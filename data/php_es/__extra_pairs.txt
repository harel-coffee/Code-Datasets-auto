APCIterator construct $format	el formato deseado como se configuró con una o más de las constantes apc_iter_*
APCIterator construct $cache	el tipo de caché que será user o file
APCIterator construct $chunk_size	el tamaño de trozo
APCIterator construct $search	una expresión regular de pcre que se compara con nombres de claves de apc como string para una única expresión regular o como un array de expresiones regulares
APCIterator construct $list	el tipo a listar
APCIterator string construct	un object apciterator en caso de éxito o null en caso de error
APCIterator string construct string $cache mixed $search int $format int $chunk_size int $list	construye un objeto iterador apciterator
APCIterator mixed current	devuelve el elemento actual en caso de éxito o false si no existen más elementos o en caso de fallo
APCIterator mixed current	obtener el elemento actual
APCIterator int get Total Size	el tamaño total de la caché
APCIterator int get Total Size	obtener el tama&ntilde;o total de la cach&eacute;
APCIterator string key	devuelve la clave en caso de éxito o false en caso de error
APCIterator string key	obtener la clave del iterador
APCIterator void next	mover el puntero al siguiente elemento
APCIterator void rewind	rebobina el iterator
APCIterator void valid	comprueba si la posici&oacute;n acutal es v&aacute;lida
AppendIterator mixed current	si el valor actual es válido o null en caso contrario
AppendIterator mixed current	obtiene el valor actual
AppendIterator void get Array Iterator	obtiene el getarrayiterator
AppendIterator Iterator get Inner Iterator	el iterador interno actual o null si no hay ninguno
AppendIterator Iterator get Inner Iterator	obtiene el iterador interno
AppendIterator scalar key	la clave actual si es válida o null en caso contrario
AppendIterator scalar key	obtiene la clave actual
AppendIterator void next	desplazarse al siguiente elemento
AppendIterator void rewind	rebobina el iterador
AppendIterator bool valid	devuelve true si la iteración actual es válida false en caso contrario
AppendIterator bool valid	comprueba la validaci&oacute;n del elemento actual
ArrayAccess offset Exists $offset	el índice a comprobar
ArrayAccess boolean offset Exists	devuelve true en caso de éxito o false en caso de error
ArrayAccess boolean offset Exists mixed $offset	comprobar si existe un &iacute;ndice
ArrayAccess offset Set $value	el valor a asignar
ArrayAccess offset Set $offset	el offset al que se asigna el valor
ArrayAccess void offset Set mixed $offset mixed $value	asignar un valor al &iacute;ndice esepecificado
ArrayAccess offset Unset $offset	el offset a destruir
ArrayAccess void offset Unset mixed $offset	destruye un offset
ArrayIterator append $value	el valor a añadir
ArrayIterator void append mixed $value	a&ntilde;ade un elemento
ArrayIterator construct $array	el array o objecto a ser iterado
ArrayIterator construct $flags	banderas para controlar el comportamiento del objeto arrayiterator
ArrayIterator mixed construct	un objeto arrayiterator
ArrayIterator mixed construct mixed $array int $flags	construye un arrayiterator
ArrayIterator int count	el número
ArrayIterator int count	cuenta elementos
ArrayIterator mixed current	la entrada actual del array
ArrayIterator mixed current	devuelve la entrada actual del array
ArrayIterator array get Array Copy	una copia de un array o un array de las propiedades públicas si arrayiterator hace referencia a un objeto
ArrayIterator array get Array Copy	obtener copia de un array
ArrayIterator void ksort	ordena un array por sus claves
ArrayIterator void natsort	ordena un array de forma natural
ArrayIterator void next	desplaza a la siguiente entrada
ArrayIterator offset Exists $index	el índice a ser comprobado
ArrayIterator void offset Exists string $index	compruebar si el &iacute;ndice existe
ArrayIterator offset Set $newval	el nuevo valor para almacenar en el índice
ArrayIterator offset Set $index	el índice a ser establecido
ArrayIterator void offset Set string $index string $newval	establece el valor para un &iacute;ndice
ArrayIterator void rewind	rebobinar array al inicio
ArrayIterator set Flags $flags	un bitmask como se indica: 0 = propiedades del objeto tienen su normal comportamiento cuando son obtenidas como lista var_dump foreach etc
ArrayIterator void set Flags string $flags	definir opciones de comportamiento
ArrayIterator uasort $cmp_function	la función de comparación usada para el ordenado
ArrayIterator void uasort string $cmp_function	ordenado definido por el usuario
ArrayIterator uksort $cmp_function	la función de comparación usada para el ordenado
ArrayIterator void uksort string $cmp_function	ordenado definido por el usuario
ArrayIterator bool valid	devuelve true si el iterador es válido false si no
ArrayIterator bool valid	comprueba si un array contiene m&aacute;s entradas
ArrayObject void asort	ordena las entradas por valor
ArrayObject int count	el número de propiedades públicas en la clase arrayobject
ArrayObject int count	obtener el n&uacute;mero de propiedades p&uacute;blicas en la clase arrayobject
ArrayObject array get Array Copy	devuelve una copia del array
ArrayObject array get Array Copy	crea una copia de la clase arrayobject
ArrayObject int get Flags	devuelve las flags de comportamiento de la clase arrayobject
ArrayObject int get Flags	obtiene las flags de comportamiento
ArrayObject ArrayIterator get Iterator	un iterador de una clase arrayobject
ArrayObject ArrayIterator get Iterator	crear un nuevo iterador desde una instancia arrayobject
ArrayObject string get Iterator Class	returns the iterator class name that is used to iterate over this object
ArrayObject string get Iterator Class	obtiene el nombre de clase iterador para arrayobject
ArrayObject void ksort	ordena las entradas por clave
ArrayObject void natcasesort	ordena un array usando un algoritmo orden natural
ArrayObject offset Set $newval	el nuevo valor para el index
ArrayObject offset Set $index	el índice a ser establecido
ArrayObject void offset Set mixed $index mixed $newval	establece el valor en el &iacute;ndice especificado
ArrayObject offset Unset $index	el índice a ser destruido
ArrayObject void offset Unset mixed $index	destruye el valor para el &iacute;ndice especificado
ArrayObject string serialize	representación serializada de arrayobject
ArrayObject string serialize	serializar un arrayobject
ArrayObject set Flags $flags	el nuevo comportamiento de arrayobject
ArrayObject void set Flags int $flags	establece las flags de comportamiento
ArrayObject set Iterator Class $iterator_class	el nombre de clase de el array iterador a usar cuando se itera sobre este objeto
ArrayObject void set Iterator Class string $iterator_class	establece el nombre de clase iterador para arrayobject
ArrayObject uasort $cmp_function	la función cmp_function acepta 2 parámetros que serán llenados por pares de entradas
ArrayObject void uasort callable $cmp_function	ordena las entradas con una funci&oacute;n de comparaci&oacute;n definida por el usuario y mantiene asociaci&oacute;n de claves
ArrayObject uksort $cmp_function	la función de devolución de llamada de comparación
ArrayObject void uksort callable $cmp_function	ordena las entradas por clave usando una funci&oacute;n de comparaci&oacute;n definida por el usuario
ArrayObject unserialize $serialized	el objeto arrayobject serializado
ArrayObject void unserialize string $serialized	deserializar el objeto arrayobject
CairoFontFace int get Type	una familia de fuentes que se puede ser cualquiera definida en cairofonttype
CairoFontFace int get Type	recupera el tipo de familia de fuentes
CairoFormat stride For Width $format	el cairoformat deseados a usar
CairoFormat stride For Width $width	el ancho de la imagen
CairoFormat int stride For Width	el intervalo de paso a usar dado por el formato deseado y el ancho o -1 si el formato no es válido o el ancho es demasiado grande
CairoFormat int stride For Width int $format int $width	proporciona un intervalo de paso apropiado a usar
CairoImageSurface construct $width	el ancho de la superficie de imagen
CairoImageSurface construct $height	el alto de la superficie de imagen
CairoImageSurface construct $format	puede ser cualquiera definido en cairoformat
CairoImageSurface int construct	un nuevo objeto cairoimagesurface
CairoImageSurface int construct int $format int $width int $height	crea una nueva cairoimagesurface
CairoImageSurface string get Data	la información de la imagen como cadena
CairoImageSurface string get Data	obtiene la informaci&oacute;n de la imagen como cadena
CairoImageSurface int get Format	una de las enumeraciones de cairoformat
CairoImageSurface int get Format	obtener el formato de imagen
CairoImageSurface int get Height	alto del objeto cairoimagesurface
CairoImageSurface int get Height	recupera el alto del cairoimagesurface
CairoImageSurface int get Width	devuelve el ansho del objeto cairoimagesurface
CairoImageSurface int get Width	recupera el ancho del cairoimagesurface
CairoSurface - construct	el prop&oacute;sito de __construct
CairoSurface create Similar $height	alto de la nueva superficie en unidades de espacio del dispositivo
CairoSurface create Similar $width	ancho de la nueva superficie en unidades de espacio del dispositivo
CairoSurface create Similar $content	el contenido de la nueva superficie
CairoSurface create Similar $other	un superficie existente usada para seleccionar el entorno de la nueva superficie
CairoSurface void create Similar CairoSurface $other int $content string $width string $height	el prop&oacute;sito de createsimilar
CallbackFilterIterator string accept	devuelve true para aceptar el elemento actual o en caso contrario false
CallbackFilterIterator string accept	llama la llamada de retorno con el valor actual la clave actual y el iterador interior como argumentos
chdb construct $pathname	el nombre del archivo a cargar
chdb string construct string $pathname	crea una instancia de chdb
Closure bind $newscope	el ámbito de clase a la que asociar la clausura o static para mantener el actual
Closure bind $closure	la función anónima a vincular
Closure bind $newthis	el objeto al que la función anónima dada debería ser vinculado o null para que la clausura sea desvinculada
Closure Closure bind	devuelve un nuevo objeto closure o false en caso de error
Closure Closure bind Closure $closure object $newthis mixed $newscope	duplicar una clausura con un objeto vinculado y &aacute;mbito de clase especificados
Closure bind To $newscope	el ámbito de clase a la que asociar la clausura o static para mantener el actual
Closure bind To $newthis	el objeto al que la función anónima dada debería ser vinculado o null para que la clausura sea desvinculada
Closure Closure bind To	devuelve el objeto closure recién creado o false en caso de error
Closure Closure bind To object $newthis mixed $newscope	duplicar la clausura con un objeto vinculado y &aacute;mbito de clase nuevos
Closure call $newthis	el object a vincular a la clausura mientras dure la llamada
Closure call	cero o más parámetros que serán dados como parámetros a la clausura
Closure mixed call	devuelve el valor devuelto por la clausura
Closure mixed call object $newthis	vincula y llama a la clausura
Closure - construct	constructor que anula la instanciaci&oacute;n
Collectable bool is Garbage	determinar si un objeto ha sido marcado como basura
Collectable void set Garbage	marcar un objeto como basura
Countable int count	el recuento personalizado como un integer
Countable int count	cuenta los elementos de un objeto
DateInterval create From Date String $time	una fecha con partes relativas
DateInterval DateInterval create From Date String	devuelve una nueva instancia de dateinterval
DateInterval DateInterval create From Date String string $time	establece un objeto dateinterval desde las partes relativas de una cadena
DateInterval format $format	los siguietes caracteres están reconocidos en el parámetro de cadena format
DateInterval string format	devuelve el intervalo formateado
DateInterval string format string $format	formatea el intervalo
DateTime - wakeup	el gestor __wakeup
DateTimeImmutable DateTimeImmutable add DateInterval $interval	a&ntilde;ade una cantidad de d&iacute;as meses a&ntilde;os horas minutos y segundos
DateTimeImmutable array get Last Errors	devuelve las advertencias y errores
DateTimeImmutable modify $modify	una cadena de fecha / hora
DateTimeImmutable modify $object	solamente para el estilo por procedimientos: un objeto datetime devuelto por date_create()
DateTimeImmutable DateTimeImmutable modify	devuelve el objeto recién creado o false en caso de error
DateTimeImmutable DateTimeImmutable modify string $modify	crea un nuevo objeto con la marca de tiempo modificada
DateTimeImmutable DateTimeImmutable set state array $array	el gestor __set_state
DateTimeImmutable DateTimeImmutable set ISODate int $year int $week int $day	establece la fecha iso
DateTimeImmutable DateTimeImmutable set Time int $hour int $minute int $second	establece la hora
DateTimeImmutable DateTimeImmutable set Timestamp int $unixtimestamp	establece la fecha y hora basadas en una marca de tiempo unix
DateTimeImmutable DateTimeImmutable set Timezone DateTimeZone $timezone	establece la zona horaria
Directory void close resource $dir_handle	cierra un gestor de directorio
DirectoryIterator get Basename $suffix	si el nombre base termina en suffix este será cortado
DirectoryIterator string get Basename	el nombre base del elemento actual directoryiterator
DirectoryIterator string get Basename string $suffix	obtener el nombre base del elemento actual directoryiterator
DirectoryIterator string get Extension	devuelve un string que contiene la extensión del ficher o un string vacío si el fichoer no tiene extensión
DirectoryIterator string get Extension	obtiene la extensi&oacute;n de un fichero
DirectoryIterator string get Filename	devuelve el nombre del fichero del elemento actual directoryiterator
DirectoryIterator string get Filename	devuelve el nombre del fichero del elemento actual directoryiterator
DirectoryIterator int get Group	devuelve el id del grupo de el elemento actual directoryiterator en formato numérico
DirectoryIterator int get Group	obtiene el grupo para el elemento actual directoryiterator
DirectoryIterator int get Inode	devuelve el número de inodo para el fichero
DirectoryIterator int get Inode	obtiene el inodo para el elemento actual directoryiterator
DirectoryIterator int get MTime	la última modificación del fichero en formato unix timestamp
DirectoryIterator int get MTime	obtiene la &uacute;ltima modificaci&oacute;n para el elemento actual directoryiterator
DirectoryIterator string get Pathname	devuelve la ruta y el nombre del fichero actual
DirectoryIterator string get Pathname	devuelve la ruta y nombre de fichnero del elemento actual directoryiterator
DirectoryIterator int get Size	devuelve el tamaño del fichero en bytes
DirectoryIterator int get Size	obtiene el tama&ntilde;o de el elemento actual directoryiterator
DirectoryIterator bool is Dir	devuelve true si es un directorio en caso contrario false
DirectoryIterator bool is Dir	determina si el elemento actual directoryiterator es un directorio
DirectoryIterator bool is Executable	devuelve true si la entrada es ejecutable en caso contrario false
DirectoryIterator bool is Executable	determina si el emento actual directoryiterator es ejecutable
DirectoryIterator bool is File	devuelve true si el fichero existe y si es un fichero normal que no sea un link o dir en caso contrario false
DirectoryIterator bool is File	determina si el elemento actual directoryiterator es un fichero
DirectoryIterator bool is Link	devuelve true si el elemento es un enlace simbólico en caso contrario false
DirectoryIterator bool is Link	determina si el elemento actual directoryiterator es un enlace simb&oacute;lico
DirectoryIterator bool is Writable	devuelve true si se puede escribir en el fichero / directorio en caso contrario false
DirectoryIterator bool is Writable	determina si el elemento actual directoryiterator se puede escribir
DirectoryIterator string key	la clave para el elemento actual directoryiterator
DirectoryIterator string key	devuelve la clave del elemento actual directoryiterator
DirectoryIterator seek $position	la base cero de la posición numérica a mover el apuntador interno
DirectoryIterator void seek int $position	mueve el apuntador interno del elemento directoryiterator
DirectoryIterator string to String	devuelve el nombre del fichero del elemento actual directoryiterator
DirectoryIterator string to String	obtiene el nombre del fichero como un string
DOMAttr bool is Id	devuelve true en caso de éxito o false en caso de error
DOMAttr bool is Id	verifica si un atributo es un id definido
DOMCharacterData append Data $data	la cadena de caracteres a anexar
DOMCharacterData void append Data string $data	anexa la cadena de caracteres al final de los datos de caracter del nodo
DOMCharacterData delete Data $offset	el índice desde el cual se comenzará a remover
DOMCharacterData delete Data $count	la cantidad de caracteres a eliminar
DOMCharacterData void delete Data int $offset int $count	remueve un rango de caracteres del nodo
DOMCharacterData insert Data $data	la cadena a insertar
DOMCharacterData insert Data $offset	la posición en la cual se insertará
DOMCharacterData void insert Data int $offset string $data	inserta una cadena en la posici&oacute;n de 16-bit especificada
DOMCharacterData replace Data $offset	la posición inicial a partir de la cual se iniciara el reemplazo
DOMCharacterData replace Data $data	la cadena con la cual el rango debe ser reemplazado
DOMCharacterData replace Data $count	el número de carácteres a reemplazar
DOMCharacterData void replace Data int $offset int $count string $data	reemplaza una subcadena dentro de un nodo domcharacterdata
DOMCharacterData substring Data $count	el número de carácteres a extraer
DOMCharacterData substring Data $offset	posición de inicio de la subcadena a extraer
DOMCharacterData string substring Data	la subcadena especificada
DOMCharacterData string substring Data int $offset int $count	extrae un rango de data del nodo
DOMDocument create Attribute NS $qualifiedName	el nombre de etiqueta y prefijo del atributo como prefix:tagname
DOMDocument create Attribute NS $namespaceURI	el uri del namespace
DOMDocument DOMAttr create Attribute NS	el nuevo domattr o false si ha ocurrido un error
DOMDocument DOMAttr create Attribute NS string $namespaceURI string $qualifiedName	crea un nuevo nodo atributo con un namespace asociado
DOMDocument create CDATASection $data	el contenido del cdata
DOMDocument DOMCDATASection create CDATASection	el nuevo domcdatasection o false si ha ocurrido un error
DOMDocument DOMCDATASection create CDATASection string $data	crea un nuevo nodo cdata
DOMDocument create Comment $data	el contenido del comentario
DOMDocument DOMComment create Comment	el nuevo domcomment o false si ha ocurrido un error
DOMDocument DOMComment create Comment string $data	crea un nuevo nodo de comentario
DOMDocument DOMDocumentFragment create Document Fragment	el nuevo domdocumentfragment o false si ha ocurrido un error
DOMDocument DOMDocumentFragment create Document Fragment	crea un nuevo fragmento de documento
DOMDocument create Element NS $value	el valor del elemento
DOMDocument create Element NS $namespaceURI	el uri del nombre de espacio
DOMDocument create Element NS $qualifiedName	elo nombre cualificado del elemento como prefix:tagname
DOMDocument DOMElement create Element NS	el nuevo domelement o false si ha ocurrido un error
DOMDocument DOMElement create Element NS string $namespaceURI string $qualifiedName string $value	crea un nuevo nodo elemento con el nombre de espacio asociado
DOMDocument create Entity Reference $name	el contenido de la entidad referencia p
DOMDocument DOMEntityReference create Entity Reference	el nuevo domentityreference o false si ha ocurrido un error
DOMDocument DOMEntityReference create Entity Reference string $name	create new entity reference node
DOMDocument create Processing Instruction $target	el objetivo de la instrucción de procesamiento
DOMDocument create Processing Instruction $data	el contenido de la instrucción de procesamiento
DOMDocument DOMProcessingInstruction create Processing Instruction	el nuevo domprocessinginstruction o false si ha ocurrido un error
DOMDocument DOMProcessingInstruction create Processing Instruction string $target string $data	crea un nuevo nodo pi
DOMDocument get Element By Id $elementId	el valor de id único para un elemento
DOMDocument DOMElement get Element By Id	devuelve el domelement o null si el elemento no ha sido encontrado
DOMDocument DOMElement get Element By Id string $elementId	busca un elemento con cierto id
DOMDocument get Elements By Tag Name $name	el nombre local sin namespace de la etiqueta con el cual se hará comparación
DOMDocument DOMNodeList get Elements By Tag Name	un nuevo objeto domnodelist que contiene todos los elementos coincidentes
DOMDocument DOMNodeList get Elements By Tag Name string $name	busca todos los elementos con el nombre de etiqueta local dado
DOMDocument import Node $importedNode	el nodo que desea importar
DOMDocument import Node $deep	si se establece en true este método importará de forma recursiva el subárbol bajo el importednode
DOMDocument DOMNode import Node	el nodo copiado o false si no puede ser copiado
DOMDocument DOMNode import Node DOMNode $importedNode bool $deep	importa un nodo dentro del documento actual
DOMDocument load $options	bitwise or de las constantes de opción libxml
DOMDocument load $filename	la ruta al documento xml
DOMDocument mixed load	devuelve true en caso de éxito o false en caso de error
DOMDocument mixed load string $filename int $options	cargar un documento xml de un archivo
DOMDocument load HTML $source	la cadena html
DOMDocument load HTML $options	desde php 5
DOMDocument bool load HTML	devuelve true en caso de éxito o false en caso de error
DOMDocument bool load HTML string $source int $options	cargar html de una cadena
DOMDocument load HTMLFile $options	desde php 5
DOMDocument load HTMLFile $filename	la ruta al fichero html
DOMDocument bool load HTMLFile	devuelve true en caso de éxito o false en caso de error
DOMDocument bool load HTMLFile string $filename int $options	cargar html desde un fichero
DOMDocument load XML $options	operador a nivel de bits or de las constantes de opciones libxml
DOMDocument load XML $source	la cadena que contiene el xml
DOMDocument mixed load XML	devuelve true en caso de éxito o false en caso de error
DOMDocument mixed load XML string $source int $options	cargar xml desde una cadena
DOMDocument void normalize Document	normaliza el documento
DOMDocument register Node Class $baseclass	la clase dom que se quiere extender
DOMDocument register Node Class $extendedclass	el nombre de la clase extendida
DOMDocument bool register Node Class	devuelve true en caso de éxito o false en caso de error
DOMDocument bool register Node Class string $baseclass string $extendedclass	registra una clase extendida usada para crear tipos de nodos base
DOMDocument relax NGValidate $filename	el fichero rng
DOMDocument bool relax NGValidate	devuelve true en caso de éxito o false en caso de error
DOMDocument bool relax NGValidate string $filename	realiza una validaci&oacute;n relaxng del documento
DOMDocument relax NGValidate Source $source	una cadena que contiene el esquema rng
DOMDocument bool relax NGValidate Source	devuelve true en caso de éxito o false en caso de error
DOMDocument bool relax NGValidate Source string $source	realiza una validaci&oacute;n relaxng del documento
DOMDocument save $options	opciones adicionales
DOMDocument save $filename	la ruta al documento xml guardado
DOMDocument int save	devuelve el número de bytes escritos o false si ocurrió un error
DOMDocument int save string $filename int $options	copia el &aacute;rbol xml interno a un archivo
DOMDocument save HTML $node	parámetro opcional que devuelve una parte del documento
DOMDocument string save HTML	devuelve el html o false si ocurrió un error
DOMDocument string save HTML DOMNode $node	copia el documento interno a una cadena usando el formato html
DOMDocument save XML $options	opciones adicionales
DOMDocument save XML $node	use este parámetro para imprimir sólo un nodo especifico sin la declaración xml en vez del documento completo
DOMDocument string save XML	devuelve el xml o false en caso de error
DOMDocument string save XML DOMNode $node int $options	copia el arbol xml interno a un string
DOMDocument schema Validate $filename	la ruta al esquema
DOMDocument schema Validate $flags	una máscara de bits de banderas de validación de esquemas de libxml
DOMDocument bool schema Validate	devuelve true en caso de éxito o false en caso de error
DOMDocument bool schema Validate string $filename int $flags	valida un documento basado en un esquema
DOMDocument schema Validate Source $flags	una máscara de bits de banderas de validación de esquemas de libxml
DOMDocument schema Validate Source $source	una cadena que contiene el esquema
DOMDocument bool schema Validate Source	devuelve true en caso de éxito o false en caso de error
DOMDocument bool schema Validate Source string $source int $flags	valida un documento basado en un esquema
DOMDocument xinclude $options	parámetros de libxml
DOMDocument int xinclude	devuelve el número de xincludes del documento -1 si falló algún proceso o false si no hubo sustituciones
DOMDocument int xinclude int $options	sustituye xincludes en un objeto domdocument
DOMDocumentFragment append XML $data	xml a añadir
DOMDocumentFragment bool append XML	devuelve true en caso de éxito o false en caso de error
DOMDocumentFragment bool append XML string $data	a&ntilde;ade informaci&oacute;n xml sin formato
DOMElement construct $name	el nombre de la etiqueta del elemento
DOMElement construct $namespaceURI	una uri del espacio de nombres para crear el elemento dentro de un espacio de nombres especificado
DOMElement construct $value	el valor del elemento
DOMElement string construct string $name string $value string $namespaceURI	crea un nuevo objeto domelement
DOMElement get Attribute $name	el nombre del atributo
DOMElement string get Attribute	el valor del atributo o una cadena vacía si no se encuentra un atributo con el nombre dado por name
DOMElement string get Attribute string $name	devuelve el valor de un atributo
DOMElement get Attribute Node NS $namespaceURI	la uri del espacio de nombres
DOMElement get Attribute Node NS $localName	el nombre local
DOMElement DOMAttr get Attribute Node NS	el nodo del atributo
DOMElement DOMAttr get Attribute Node NS string $namespaceURI string $localName	devuelve el nodo de un atributo
DOMElement get Attribute NS $namespaceURI	la uri del espacio de nombres
DOMElement get Attribute NS $localName	el nombre local
DOMElement string get Attribute NS	el valor del atributo o una cadena vacía si no se ecuentra el atributo con los localname y namespaceuri dados
DOMElement string get Attribute NS string $namespaceURI string $localName	devuelve el valor de un atributo
DOMElement get Elements By Tag Name $name	el nombre de la etiqueta
DOMElement DOMNodeList get Elements By Tag Name	esta función devuelve una nueva instancia de la clase domnodelist con todos los elementos coincidentes
DOMElement DOMNodeList get Elements By Tag Name string $name	obtiene los elementos por nombre de etiqueta
DOMElement get Elements By Tag Name NS $namespaceURI	la uri del espacio de nombres
DOMElement get Elements By Tag Name NS $localName	el nombre local
DOMElement DOMNodeList get Elements By Tag Name NS	esta función devuelve una nueva instancia de la clase domnodelist con todos los elementos coincidentes en el orden en que fueron encontrados en un recorriendo en preorden este elemento árbol
DOMElement DOMNodeList get Elements By Tag Name NS string $namespaceURI string $localName	obtener los elementos por la uri del espacio de nombres y el nombre local
DOMElement remove Attribute $name	el nombre del atributo
DOMElement bool remove Attribute	devuelve true en caso de éxito o false en caso de error
DOMElement bool remove Attribute string $name	elimina un atributo
DOMElement remove Attribute Node $oldnode	el nodo atributo
DOMElement bool remove Attribute Node	devuelve true en caso de éxito o false en caso de error
DOMElement bool remove Attribute Node DOMAttr $oldnode	elimina un atributo
DOMElement set Attribute $name	el nombre del atributo
DOMElement set Attribute $value	el valor del atributo
DOMElement DOMAttr set Attribute	el nuevo objeto domattr o false si ocurrió un error
DOMElement DOMAttr set Attribute string $name string $value	a&ntilde;ade un nuevo atributo
DOMElement set Attribute Node $attr	el nodo de atributo
DOMElement DOMAttr set Attribute Node	devuelve el nodo antiguo si el atributo ha sido reemplazado o null
DOMElement DOMAttr set Attribute Node DOMAttr $attr	a&ntilde;ade un nuevo nodo de atributo al elemento
DOMElement set Attribute Node NS $attr	el nodo atributo
DOMElement DOMAttr set Attribute Node NS	devuelve el antiguo nodo si el atributo ya sido reemplazado
DOMElement DOMAttr set Attribute Node NS DOMAttr $attr	a&ntilde;a de un nuevo nodo de atributo al elemento
DOMElement set Id Attribute $name	el nombre del atributo
DOMElement set Id Attribute $isId	establecer a true si se quiere que name sea de tipo id false si no
DOMElement void set Id Attribute string $name bool $isId	declara el atributo especificado por su nombre como de tipo id
DOMElement set Id Attribute Node $attr	el nodo atributo
DOMElement set Id Attribute Node $isId	establecer a true si se quiere que name sea de tipo id false si no
DOMElement void set Id Attribute Node DOMAttr $attr bool $isId	declara el atributo especificado por su nodo como de tipo id
DOMEntityReference construct $name	el nombre de la referencia de entidad
DOMEntityReference string construct string $name	crea un nuevo objeto domentityreference
DOMImplementation create Document $namespaceURI	la uri del espacio de nombres del elemento documento a crear
DOMImplementation create Document $doctype	el tipo de documento a crear o null
DOMImplementation create Document $qualifiedName	el nombre cualificado del elemento documento a crear
DOMImplementation DOMDocument create Document	un nuevo objeto domdocument
DOMImplementation DOMDocument create Document string $namespaceURI string $qualifiedName DOMDocumentType $doctype	crea un objeto domdocument del tipo especificado con su elemento documento
DOMImplementation create Document Type $publicId	el identificador público del subconjunto externo
DOMImplementation create Document Type $systemId	el identificador de sistema del subconjunto externo
DOMImplementation create Document Type $qualifiedName	el nombre cualificado del tipo de documente a crear
DOMImplementation DOMDocumentType create Document Type	un nuevo nodo domdocumenttype con su ownerdocument establecido a null
DOMImplementation DOMDocumentType create Document Type string $qualifiedName string $publicId string $systemId	crear un objeto domdocumenttype vac&iacute;o
DOMImplementation has Feature $feature	la característica a comprobar
DOMImplementation has Feature $version	el número de versión de feature a comprobar
DOMImplementation bool has Feature	devuelve true en caso de éxito o false en caso de error
DOMImplementation bool has Feature string $feature string $version	comprueba si la implementaci&oacute;n de dom implementa una caracter&iacute;stica espec&iacute;fica
DOMNamedNodeMap get Named Item $name	el nodename del nodo a recuperar
DOMNamedNodeMap DOMNode get Named Item	un nodo de cualquier tipo con el nodename especificado o null si no se encuentra ningún nodo
DOMNamedNodeMap DOMNode get Named Item string $name	recupera un nodo especificado por su nombre
DOMNamedNodeMap get Named Item NS $localName	el nombre local del nodo a recuperar
DOMNamedNodeMap get Named Item NS $namespaceURI	la uri del espacio de nombres del nodo a recuperar
DOMNamedNodeMap DOMNode get Named Item NS	un nodo de cualquier tipo con el nombre local y la uri del espacio de nombres especificados o null si no se encuentra ningún nodo
DOMNamedNodeMap DOMNode get Named Item NS string $namespaceURI string $localName	recupera un nodo especificado por el nombre local y la uri del espacio de nombres
DOMNamedNodeMap item $index	índice dentro de este mapa
DOMNamedNodeMap DOMNode item	el nodo en la posición marcada por index en el mapa o null si no es un índice válido mayor o igual que el número de nodos de este mapa
DOMNamedNodeMap DOMNode item int $index	recupera un nodo especificado por su &iacute;ndice
DOMNode C14 NFile $xpath	un array de xpath s por los que filtrar los nodos
DOMNode C14 NFile $exclusive	habilita el análisis exclusivo de los nodos que coincidan únicamente con el xpath o los prefijos de nombres de espacio proporcionados
DOMNode C14 NFile $with_comments	conservar los comentarios en la salida
DOMNode C14 NFile $uri	la ruta en la que escribir la salida
DOMNode C14 NFile $ns_prefixes	un array de prefijos de nombres de espacio por los que filtrar los nodos
DOMNode int C14 NFile	el número de bytes escritos o false en caso de error
DOMNode int C14 NFile string $uri bool $exclusive bool $with_comments array $xpath array $ns_prefixes	canonizar nodos a un fichero
DOMNode clone Node $deep	indica si copiar todos los nodos descendientes
DOMNode DOMNode clone Node	el nodo clonado
DOMNode DOMNode clone Node bool $deep	clona un nodo
DOMNode string get Node Path	devuelve un string que contiene el xpath o null en caso de error
DOMNode string get Node Path	obtener un xpath de un nodo
DOMNode bool has Attributes	devuelve true en caso de éxito o false en caso de error
DOMNode bool has Attributes	comprueba si un nodo tiene atributos
DOMNode is Default Namespace $namespaceURI	la uri del espacio de nombres a buscar
DOMNode bool is Default Namespace	devuelve true si namespaceuri es el espacio de nombres predeterminado false si no
DOMNode bool is Default Namespace string $namespaceURI	comprueba si la uri del espacio de nombres especificada es el espacio de nombres predeterminado
DOMNode is Same Node $node	el nodo comparado
DOMNode bool is Same Node	devuelve true en caso de éxito o false en caso de error
DOMNode bool is Same Node DOMNode $node	indica si dos nodos son el mismo nodo
DOMNode is Supported $feature	la característica a comprobar
DOMNode is Supported $version	el número de versión de feature a comprobar
DOMNode bool is Supported	devuelve true en caso de éxito o false en caso de error
DOMNode bool is Supported string $feature string $version	comprueba si una caracter&iacute;stica est&aacute; soportada para la versi&oacute;n especificada
DOMNode lookup Namespace URI $prefix	el prefijo del espacio de nombres
DOMNode string lookup Namespace URI	la uri del espacio de nombres del nodo
DOMNode string lookup Namespace URI string $prefix	obtiene la uri del espacio de nombres del nodo basado en el prefijo
DOMNode lookup Prefix $namespaceURI	la uri del espacio de nombres
DOMNode string lookup Prefix	el prefijo del espacio de nombres
DOMNode string lookup Prefix string $namespaceURI	obtiene el prefijo del espacio de nombres del nodo bas&aacute;ndoes en la uri del espacio de nombres
DOMNode void normalize	normaliza el nodo
DOMNode replace Child $newnode	el nuevo nodo
DOMNode replace Child $oldnode	el nodo antiguo
DOMNode DOMNode replace Child	el nodo antiguo o false si ocurrió un error
DOMNode DOMNode replace Child DOMNode $newnode DOMNode $oldnode	reemplaza un hijo
DOMNodelist item $index	índice del nodo de la colección
DOMNodelist DOMNode item	el nodo en la posición marcada por index del objeto domnodelist o null si no es un índice válido
DOMNodelist DOMNode item int $index	recupera un nodo especificado por un &iacute;ndice
DOMProcessingInstruction construct $name	el nombre de la etiqueta de la instrucción en proceso
DOMProcessingInstruction construct $value	el valor de la intrucción en proceso
DOMProcessingInstruction string construct string $name string $value	crea un nuevo objeto domprocessinginstruction
DOMText bool is Whitespace In Element Content	devuelve true si el nodo contiene cero o más carecteres espacio en blanco y nada más
DOMText bool is Whitespace In Element Content	indica si este nodo de texto contiene espacios en blanco
DOMText split Text $offset	el índice en el que se hace la separación comenzando en 0
DOMText DOMText split Text	el nuevo nodo del mismo tipo que contiene todo el contenido desde y después de offset
DOMText DOMText split Text int $offset	rompe este nodo en dos nodos en el &iacute;ndice especificado
DOMXPath construct $doc	el objeto domdocument asociado con el objeto domxpath
DOMXPath DOMDocument construct DOMDocument $doc	crea un nuevo objeto domxpath
DOMXPath evaluate $expression	la expresión xpath a ejecutar
DOMXPath evaluate $contextnode	el parámetro opcional contextnode se puede especificar para hacer consultas xpath relativas
DOMXPath evaluate $registerNodeNS	el parámetro opcional registernodens puede ser especificado para deshabilitar el registro automático del nodo de contexto
DOMXPath mixed evaluate	devuelve un resultado escrito si es posible o un objeto domnodelist que contiene todos los nodos coincidentes con la expresión xpath dada por expression
DOMXPath mixed evaluate string $expression DOMNode $contextnode bool $registerNodeNS	eval&uacute;a la expresi&oacute;n xpath dada y devuelve un resultado escrito si es posible
DOMXPath query $expression	la expresión xpath a ejecutar
DOMXPath query $contextnode	el parámetro opcional contextnode se puede especificar para hacer consultas xpath relativas
DOMXPath query $registerNodeNS	el parámetro opcional registernodens puede ser especificado para deshabilitar el registro automático del nodo de contexto
DOMXPath DOMNodeList query	devuelve un objeto domnodelist que contiene todos los nodos coincidentes con la expresión xpath dada por expression
DOMXPath DOMNodeList query string $expression DOMNode $contextnode bool $registerNodeNS	eval&uacute;a la expresi&oacute;n xpath dada
DOMXPath register Namespace $namespaceURI	la uri del espacio de nombres
DOMXPath register Namespace $prefix	el prefijo
DOMXPath bool register Namespace	devuelve true en caso de éxito o false en caso de error
DOMXPath bool register Namespace string $prefix string $namespaceURI	registra el espacio de nombres con el objeto domxpath
EmptyIterator mixed current	el m&eacute;todo current()
EmptyIterator scalar key	el m&eacute;todo key()
EmptyIterator void next	el m&eacute;todo next()
EmptyIterator void rewind	el m&eacute;todo rewind()
EmptyIterator bool valid	false
EmptyIterator bool valid	el m&eacute;todo valid()
Error void clone	clonar el error
Error int get Line	devuelve el número de línea en la que ocurrió el error
Error int get Line	obtener la l&iacute;nea en la que ocurri&oacute; el error
Error string get Message	devuelve el mensaje de error como una cadena
Error string get Message	obtener el mensaje de error
Error Throwable get Previous	devuelve el objeto throwable anterior si está disponible o null en caso contrario
Error Throwable get Previous	devuelve el objeto throwable anterior
Error array get Trace	devuelve la traza de la pila como un array
Error array get Trace	obtener la traza de la pila
Error string to String	devuelve la representación de string del error
Error string to String	representaci&oacute;n de string del error
ErrorException int get Severity	devuelve el nivel de la severidad de la excepción
ErrorException int get Severity	obtiene la severidad de la excepci&oacute;n
Ev int backend	devuelve un entero máscara de bits que describe el back-end utilizado por libev
Ev int backend	devuelve un entero que describe el back-end utilizado por libev
Ev feed Signal $signum	signal number
Ev void feed Signal int $signum	feed a signal event info ev
EvEmbed void sweep	realizar un &uacute;nico barrido sin bloqueos sobre el bucle embebido
Event add $timeout	timeout in seconds
Event bool add	returns true on success
Event bool add double $timeout	makes event pending
Event construct $base	the event base to associate with
Event construct $arg	custom data
Event construct $fd	stream resource socket resource or numeric file descriptor
Event construct $cb	the event callback
Event construct $what	event flags
Event EventBase construct	returns event object
Event EventBase construct EventBase $base mixed $fd int $what callable $cb mixed $arg	constructs event object
EventBase construct $cfg	opcional un objeto eventconfig
EventBase EventConfig construct	devuelve un objeto eventbase
EventBase EventConfig construct EventConfig $cfg	construye un objeto eventbase
EventBase void dispatch	despacha eventos pendientes
EventBase exit $timeout	número opcional de segundos después de los cuales el evento base deberá parar el envío de eventos
EventBase bool exit	devuelve true en caso de éxito
EventBase bool exit double $timeout	detiene el env&iacute;o de los eventos
EventBase int get Features	devuelve un entero que representa una máscara de bits de funcionalidades soportadas
EventBase int get Features	devuelve una m&aacute;scara de bits de funcionalidades soportadas
EventBase double get Time Of Day Cached	devuelve el actual tiempo de event base
EventBase double get Time Of Day Cached	devuelve el tiempo del evento base actual
EventBase bool got Stop	devuelve true si se indicó al bucle del evento de salir con eventbase::stop()
EventBase bool got Stop	verifica si se ha indicado al bucle del evento de salir
EventBase loop $flags	flags opcionales
EventBase bool loop	devuelve true en caso de éxito
EventBase bool loop int $flags	despacha eventos pendientes
EventBase bool re Init	devuelve true en caso de éxito
EventBase bool re Init	reinicializa el evento base despu&eacute;s de un 'fork')
EventBase bool stop	devuelve true en caso de éxito
EventBase bool stop	solicita a event_base que detenga la emisi&oacute;n de eventos
EventBuffer add $data	string que se añadirá al final del buffer
EventBuffer bool add	devuelve true en caso de éxito
EventBuffer bool add string $data	a&ntilde;ade datos al final de un buffer de eventos
EventBuffer - construct	construye el objeto eventbuffer
EventBuffer drain $len	el número de bytes a eliminar del buffer
EventBuffer bool drain	devuelve true en caso de éxito
EventBuffer bool drain int $len	elimina un n&uacute;mero espec&iacute;fico de bytes del principio del buffer sin copiarlo a ning&uacute;n lugar
EventBuffer void enable Locking	descripci&oacute;n
EventBuffer freeze $at_front	permite desactivar cambios en el principio o final del buffer
EventBuffer bool freeze	devuelve true en caso de éxito
EventBuffer bool freeze bool $at_front	evita que las llamadas puedan modificar un buffer de eventos
EventBuffer void lock	bloquea un buffer
EventBufferEvent ssl Filter $state	el estado actual de la conexión ssl: eventbufferevent::ssl_open eventbufferevent::ssl_accepting o eventbufferevent::ssl_connecting
EventBufferEvent ssl Filter $base	evento base asociado
EventBufferEvent ssl Filter $ctx	objecto de la clase eventsslcontext
EventBufferEvent ssl Filter $options	una o más opciones del evento búfer
EventBufferEvent ssl Filter $underlying	el socket evento búfer para usar en esta ssl
EventBufferEvent EventBufferEvent ssl Filter	devuelve un nuevo objecto ssl eventbufferevent
EventBufferEvent EventBufferEvent ssl Filter EventBase $base EventBufferEvent $underlying EventSslContext $ctx int $state int $options	crea un nuevo evento b&uacute;fer ssl b&uacute;fer para enviar sus datos a otro evento b&uacute;fer
EventHttp set Max Body Size $value	the body size in bytes
EventHttp void set Max Body Size int $value	sets maximum request body size
EventHttpRequest void cancel	cancels a pending http request
EventListener bool disable	returns true on success
EventListener bool disable	disables an event connect listener object
EventListener bool enable	returns true on success
EventListener bool enable	enables an event connect listener object
EventListener set Error Callback $cb	the error callback
EventListener set Error Callback $listener	the eventlistener object
EventListener set Error Callback $data	user custom data attached to the callback
EventListener void set Error Callback string $cb	set event listener's error callback
EventUtil set Socket Option $socket	socket resource stream or numeric file descriptor associated with the socket
EventUtil set Socket Option $optname	option name type
EventUtil set Socket Option $optval	accepts the same values as optval parameter of the socket_get_option() function
EventUtil set Socket Option $level	one of eventutil::sol_* constants
EventUtil bool set Socket Option	returns true on success
EventUtil bool set Socket Option mixed $socket int $level int $optname mixed $optval	sets socket options
EvPrepare construct $data	datos personalizados asociados con el observador
EvPrepare construct $priority	prioridad del observador
EvPrepare construct $callback	ver retrollamadas de observadores
EvPrepare string construct	devuelve el objeto evprepare en caso de éxito
EvPrepare string construct string $callback string $data string $priority	construye un objeto observador de evprepare
EvSignal construct $signum	número de señal
EvSignal construct $priority	prioridad del testigo
EvSignal construct $data	datos personalizados asociados con el testigo
EvSignal construct $callback	ver retrollamada del testigo
EvSignal int construct	devuelve el objeto evsignal en caso de éxito
EvSignal int construct int $signum callable $callback mixed $data int $priority	construye un objeto watcher testigo evperiodic
EvSignal set $signum	señal numérica
EvSignal void set int $signum	configura el testigo
Exception void clone	clona la excepci&oacute;n
Exception mixed get Code	devuelve el código de excepción en forma de integer en exception pero posiblemente en forma de otros tipos en exception descendientes por ejemplo como string en pdoexception
Exception mixed get Code	obtiene el c&oacute;digo de una excepci&oacute;n
Exception string get File	devuelve el nombre del fichero en donde fue creada la excepción
Exception string get File	obtiene el fichero donde ocurri&oacute; la excepci&oacute;n
Exception string get Message	devuelve el mensaje de excepción en formato cadena
Exception string get Message	obtiene el mensaje de excepci&oacute;n
Exception Exception get Previous	devuelve la exception anterior si está disponible o null si no
Exception Exception get Previous	devuelve la excepci&oacute;n anterior
Exception array get Trace	devuelve el seguimiento de pila de una excepción como un array
Exception array get Trace	obtiene la traza de la pila
Exception string get Trace As String	returns the exception stack trace as a string
Exception string get Trace As String	obtiene la traza de la pila como una cadena de caracteres
Exception string to String	devuelve la representación de la excepción en formato string
Exception string to String	representaci&oacute;n de la excepci&oacute;n en formato cadena
FANNConnection construct $weight	el valor del peso de la conexión
FANNConnection construct $to_neuron	el número de posición de la neurona terminal
FANNConnection construct $from_neuron	el número de posición de la neurona inicial
FANNConnection int construct int $from_neuron int $to_neuron float $weight	el constructor de la conexi&oacute;n
FANNConnection int get From Neuron	las posiciones de la neurona inicial
FANNConnection int get From Neuron	devuelve las posiciones de la neurona inicial
FANNConnection set Weight $weight	el peso de la conexión
FANNConnection bool set Weight	devuelve true en caso de éxito o false de lo contrario
FANNConnection bool set Weight float $weight	establece el peso de la conexi&oacute;n
FilesystemIterator construct $flags	los flags pueden ser proporcionados para afectar el comportamiento de algunos métodos
FilesystemIterator construct $path	la ruta de el elemento filesystem a iterar
FilesystemIterator string construct string $path int $flags	construye un nuevo iterador filesystem
FilesystemIterator mixed current	el nombre del fichero información del fichero o $this dependiendo de los indicadores establecidos
FilesystemIterator mixed current	el fichero actual
FilesystemIterator int get Flags	un valor integer con las flags establecidas
FilesystemIterator int get Flags	obtiene el manejo de flags
FilesystemIterator void rewind	rebobina hasta volver al inicio
FilterIterator bool accept	true si el elemento actual es aceptable o false en caso contrario
FilterIterator bool accept	comprueba si el elemento actual del iterador es aceptable
FilterIterator construct $iterator	el iterador que va a ser filtrado
FilterIterator Iterator construct	the filteriterator
FilterIterator Iterator construct Iterator $iterator	construye un filteriterator
finfo string buffer string $string int $options resource $context	alias de finfo_buffer
finfo string file string $file_name int $options resource $context	alias de finfo_file
finfo bool set flags int $options	alias de finfo_set_flags
function acosh $arg	el argumento a procesar
function float acosh	el arco coseno hiperbólico de arg
function float acosh float $arg	arco coseno hiperb&oacute;lico
function addcslashes $charlist	una lista de caracteres que serán escapados
function addcslashes $str	el string a escapar
function string addcslashes	devuelve el string escapado
function string addcslashes string $str string $charlist	escapa una cadena al estilo de c
function addslashes $str	el string a escapar
function string addslashes	devuelve un string escapado
function string addslashes string $str	escapa un string con barras invertidas
function array apache get modules	devuelve un array con la lista de los módulos cargados
function array apache get modules	obtiene una lista de los m&oacute;dulos cargados en el servidor apache
function string apache get version	devuelve la versión del servidor apache
function string apache get version	obtiene la versi&oacute;n del servidor apache
function apache lookup uri $filename	el nombre de archivo uri que está siendo solicitado
function object apache lookup uri	un object con información de la uri solicitada
function object apache lookup uri string $filename	realiza una petici&oacute;n parcial por la uri especificada y devuelve toda la informaci&oacute;n sobre ella
function apache note $note_name	el nombre de la nota
function apache note $note_value	el valor de la nota
function string apache note	si es llamada con un argumento devuelve el valor actual de la nota note_name
function string apache note string $note_name string $note_value	obtiene y establece las notas de petici&oacute;n de apache
function array apache request headers	devuelve un array asociativo de todas las cabeceras http en la petición actual o false en caso de fallo
function array apache request headers	obtiene todas las cabeceras http
function array apache response headers	devuelve una matriz con todas las cabeceras de respuesta de apache o false en caso de error
function array apache response headers	obtiene todas las cabeceras http de respuesta
function apache setenv $value	el nuevo valor de variable
function apache setenv $walk_to_top	indica si se va a establecer la variable de nivel superior disponible para todas las capas de apache
function apache setenv $variable	la variable de entorno que se desea establecer
function bool apache setenv	devuelve true en caso de éxito o false en caso de error
function bool apache setenv string $variable string $value bool $walk_to_top	establece una variable subprocess_env de apache
function apc add $var	la variable a almacenar
function apc add $values	nombres en clave variables en valor
function apc add $key	almacena la variable usando este nombre
function apc add $ttl	time to live tiempo de vida ; almacena var en la caché durante ttl segundos
function bool apc add	devuelve true si realmente se ha añadido algo a la caché de lo contrario devuelve false
function bool apc add string $key mixed $var int $ttl	poner una nueva variable en cach&eacute; en el almac&eacute;n de datos
function apc bin dump $user_vars	las variables de usuario
function apc bin dump $files	los ficheros
function string apc bin dump	devuelve una copia binaria de los ficheros y variables de usuario dados desde la caché de apc false si apc no está habilitado o null si se produjo un error desconocido
function string apc bin dump array $files array $user_vars	obtener una copia binaria de los ficheros y variables de usuario dados
function apc bin load $data	la copia binaria que va a ser cargada probablemente desde apc_bin_dump()
function apc bin load $flags	apc_bin_verify_crc32 apc_bin_verify_md5 o ambas
function bool apc bin load	devuelve true si la información de la copia binaria dada por data se cargó con éxito si no se devuelve false
function bool apc bin load string $data int $flags	cargar una copia binaria en la cach&eacute; de archivo / usuario de apc
function apc bin loadfile $context	el contexto de ficheros
function apc bin loadfile $filename	el nombre de fichero que contiene la copia probablemente desde apc_bin_dumpfile()
function apc bin loadfile $flags	puede ser apc_bin_verify_crc32 apc_bin_verify_md5 o ambos
function bool apc bin loadfile	devuelve true en caso de éxito si no devuelve false
function bool apc bin loadfile string $filename resource $context int $flags	cargar una copia binaria desde un fichero a la cach&eacute; de fichero / usuario de apc
function apc cache info $cache_type	si cache_type es user será devuelta la información acerca de la caché de usuario
function apc cache info $limited	si limited es true el valor devuelto excluirá la lista individual de entradas de caché
function array apc cache info	un array de datos en caché y metadatos o false en caso de error
function array apc cache info string $cache_type bool $limited	recupera informaci&oacute;n que hay en cach&eacute; del almac&eacute;n de datos de apc
function apc cas $new	el nuevo valor a actualizar
function apc cas $key	la clave del valor a ser actualizado
function apc cas $old	el valor anterior el valor actualmente guardado
function bool apc cas	devuelve true en caso de éxito o false en caso de error
function bool apc cas string $key int $old int $new	actualiza un valor anterior por un nuevo valor
function apc compile file $filename	ruta completa o relativa al archivo php que será compilado y almacenado en la caché de código de byte
function mixed apc compile file	devuelve true en caso de éxito o false en caso de error
function mixed apc compile file string $filename bool $atomic	almacena un archivo en la cach&eacute; de c&oacute;digo de byte evitando todos los filtros
function apc dec $success	opcionalmente pasa el valor boolean de éxito o fracaso a esta variable referenciada
function apc dec $key	la clave del valor a ser disminuido
function apc dec $step	el intervalo o valor a disminuir
function int apc dec	devuelve el valor actual de key en caso de éxito o false en caso de error
function int apc dec string $key int $step bool $success	disminuye un n&uacute;mero almacenado
function apc define constants $case_sensitive	el comportamiento predeterminado para las constantes es ser declaradas sensibles a mayúsculas-minúsculas; es decir constante y constante representan valores diferentes
function apc define constants $constants	un array asociativo de pares nombre_constante = > valor
function apc define constants $key	key sirve como el nombre del conjunto de constantes que va a ser almacenado
function bool apc define constants	devuelve true en caso de éxito o false en caso de error
function bool apc define constants string $key array $constants bool $case_sensitive	define un conjunto de constantes para recuperaci&oacute;n y definici&oacute;n en masa
function apc delete file $keys	los archivos a ser borrados
function mixed apc delete file	devuelve true en caso de éxito o false en caso de error
function mixed apc delete file mixed $keys	borra archivos de la cach&eacute; del c&oacute;digo de operaci&oacute;n
function apc delete $key	la clave dada por key usada para almacenar el valor con apc_store()
function mixed apc delete	devuelve true en caso de éxito o false en caso de error
function mixed apc delete string $key	elimina una variable almacenada de la cach&eacute;
function apc fetch $key	la clave dada por key usada para almacenar el valor con apc_store()
function apc fetch $success	se establece a true para éxito y false en caso de error
function mixed apc fetch	la variable almacenada o una matriz de variables en caso de éxito; false en caso de error
function mixed apc fetch mixed $key bool $success	traer una variable almacenada desde la cach&eacute;
function apc inc $key	la clave del valor a ser aumentado
function apc inc $step	el intervalo o valor a aumentar
function apc inc $success	opcionalmente pasa el valor boolean de éxito o fracaso a esta variable referenciada
function int apc inc	devuelve el valor actual de key en caso de éxito o false en caso de error
function int apc inc string $key int $step bool $success	aumentar un n&uacute;mero almacenado
function apc sma info $limited	cuando se establece a false predeterminado apc_sma_info() devolverá información detallada sobre cada segmento
function array apc sma info	un array de información de asignación de memoria compartida; false en caso de error
function array apc sma info bool $limited	recupera la informaci&oacute;n de la asignaci&oacute;n de memoria compartida de apc
function apc store $var	la variable a almacenar
function apc store $values	nombres en clave variables en valor
function apc store $key	almacena la variable usando este nombre
function apc store $ttl	time to live tiempo de vida ; almacena var en la caché durante ttl segundos
function bool apc store	devuelve true en caso de éxito o false en caso de error
function bool apc store string $key mixed $var int $ttl	guardar una variable en cach&eacute; en el almac&eacute;n de datos
function apd breakpoint $debug_level	un entero que es formado agregando al lado las constantes xxx_trace
function bool apd breakpoint	devuelve true en caso de éxito o false en caso de error
function bool apd breakpoint int $debug_level	detiene el interpretador y espera en un cr desde el socket
function apd clunk $delimiter	el delimitador
function apd clunk $warning	la advertencia a lanzar
function void apd clunk string $warning string $delimiter	lanza una advertencia y una pila de llamado
function apd croak $delimiter	el delimitador
function apd croak $warning	la advertencia a lanzar
function void apd croak string $warning string $delimiter	lanza un error una pila de lamado y entonces sale
function array apd dump persistent resources	una matriz conteniendo la pila de llamada actual
function array apd dump persistent resources	retorna todos los recursos persistentes como una matriz
function array apd dump regular resources	una matriz conteniendo los recursos regulares actuales
function array apd dump regular resources	retorna todos los recursos regulares actuales como una matriz
function apd echo $output	la variable depurada
function bool apd echo	devuelve true en caso de éxito o false en caso de error
function bool apd echo string $output	echo hacia el socket de depurado
function array apd get active symbols	una matriz multidimensional con todas las variables
function array apd get active symbols	obtener una matriz con los nombres de las variables actuales en el &aacute;mbito local
function apd set pprof trace $dump_directory	el directorio en el cual el archivo del volcado del análisis es escrito
function string apd set pprof trace	retorna la ruta del archivo de destino
function string apd set pprof trace string $dump_directory string $fragment	inicia la sesi&oacute;n de depurado
function apd set session trace socket $debug_level	un entero que es formado agregando al lado las constantes xxx_trace
function apd set session trace socket $tcp_server	socket ip o unix domain como un archivo del servidor tcp
function apd set session trace socket $port	se puede usar cualquier puerto pero números más altos son mejores dado que la mayoría de los números bajos pueden estar siendo usados por otros servicios del sistema
function apd set session trace socket $socket_type	puede ser af_unix para sockets basados en archivos o apd_af_inet para tcp / ip estándar
function bool apd set session trace socket	devuelve true en caso de éxito o false en caso de error
function bool apd set session trace socket string $tcp_server int $socket_type int $port int $debug_level	inicia la sesi&oacute;n remota de depurado
function apd set session trace $dump_directory	el directorio en el cual el archivo del volcado del análisis es escrito
function apd set session trace $debug_level	un entero que es formado agregando al lado las constantes xxx_trace
function void apd set session trace int $debug_level string $dump_directory	inicia la sesi&oacute;n de depurado
function apd set session $debug_level	un entero que es formado agregando al lado las constantes xxx_trace
function void apd set session int $debug_level	cambia o configura el nivel actual de depurado
function array change key case $array	array para trabajar en
function array change key case $case	entre case_upper o case_lower por defecto
function array array change key case	devuelve un array con sus keys converitdas en minúsculas o mayúsculas o false si array no es una matriz
function array array change key case array $array int $case	cambia a may&uacute;sculas o min&uacute;sculas todas las claves en un array
function array chunk $array	array para trabajar en
function array chunk $preserve_keys	cuando se establece en true las keys serán preservadas
function array chunk $size	el tamaño de cada fragmento
function array array chunk	retorna un array multidimensional indexado numéricamente comenzando desde cero en el cual cada dimensión contiene la cantidad de elementos definida en size
function array array chunk array $array int $size bool $preserve_keys	divide un array en fragmentos
function array column $index_key	la columna a usar como los índices / claves para el array devuelto
function array column $input	un array multidimensional o un array de objetos desde el que extraer una columna de valores
function array column $column_key	la columna de valores a devolver
function array array column	devuelve un array de valores que representa una sola columna del array de entrada
function array array column array $input mixed $column_key mixed $index_key	devuelve los valores de una sola columna del array de entrada
function array count values $array	array de valores a contar
function array array count values	retorna un array asociativo de valores a partir de array como keys y su respectivo recuento como valores
function array array count values array $array	cuenta todos los valores de un array
function array diff key $array1	el array a comparar
function array diff key	más arrays con los que comparar
function array diff key $array2	un array con el que comparar
function array array diff key	devuelve un array que contiene todas las entradas de array1 cuyas claves no están presentes en ninguno de los otros arrays
function array array diff key array $array1 array $array2	calcula la diferencia entre arrays empleando las claves para la comparaci&oacute;n
function array diff ukey $key_compare_func	la función de comparación debe devolver un entero menor igual o mayor que cero si el primer argumento se considera que sea respectivamente menor igual o mayor que el segundo
function array diff ukey $array1	array a comparar
function array diff ukey	más arrays contra los cuales comparar
function array diff ukey $array2	un array contra el cual comparar
function array array diff ukey	retorna un array conteniendo todas las entradas del array1 que no están presentes en ninguna de los otros array
function array array diff ukey array $array1 array $array2 callable $key_compare_func	calcula la diferencia entre arrays usando una funci&oacute;n de devoluci&oacute;n de llamada en las keys para comparaci&oacute;n
function array diff $array1	el array a comparar
function array diff	más arrays con los que comparar
function array diff $array2	un array con el que comparar
function array array diff	devuelve un array que contiene todas las entradas de array1 que no están presentes en ninguna de los otros arrays
function array array diff array $array1 array $array2	calcula la diferencia entre arrays
function array fill keys $value	valor usado para el llenado
function array fill keys $keys	array con los valores que serán usados como keys
function array array fill keys	retorna la matriz llenada
function array array fill keys array $keys mixed $value	llena un array con valores especificando las keys
function array fill $start_index	el primer índice del array retornado
function array fill $num	número de elementos a insertar
function array fill $value	valor a usar para el llenado
function array array fill	retorna el array llenado
function array array fill int $start_index int $num mixed $value	llena un array con valores
function array filter $callback	la función de devolución de llamada a usar
function array filter $array	el array a recorrer
function array filter $flag	indicador que determina qué argumentos se envían a callback : array_filter_use_key - pasar la clave como el único argumento a callback en lugar del valor array_filter_use_both - pasar el valor y la clave como argumentos a callback en lugar del valor
function array array filter	devuelve el array filtrado
function array array filter array $array callable $callback int $flag	filtra elementos de un array usando una funci&oacute;n de devoluci&oacute;n de llamada
function array flip $array	un array de pares clave / valor a ser volteados
function array array flip	devuelve el array volteado en caso de éxito y null si en caso de error
function array array flip array $array	intercambia todas las claves de un array con sus valores asociados
function array intersect key $array2	un array con el que comparar las claves
function array intersect key	una lista variable de arrays para comparar
function array intersect key $array1	el array con las claves maestras para verificar
function array array intersect key	devuelve un array asociativo que contiene todas las entradas de array1 que tienen claves que están presentes en todos los argumentos
function array array intersect key array $array1 array $array2	calcula la intersecci&oacute;n de arrays usando sus claves para la comparaci&oacute;n
function array intersect uassoc $array2	primer array contra el cual comparar las keys
function array intersect uassoc $key_compare_func	la función de comparación debe devolver un entero menor igual o mayor que cero si el primer argumento se considera que sea respectivamente menor igual o mayor que el segundo
function array intersect uassoc $array1	array inicial para la comparación de los arrays
function array intersect uassoc	una lista variable de argumentos de arrays para comparar valores
function array array intersect uassoc	retorna los valores de array1 cuyos valores existen en todos los argumentos
function array array intersect uassoc array $array1 array $array2 callable $key_compare_func	calcula la intersecci&oacute;n de arrays con un chequeo adicional de &iacute;ndices que se realiza por una funci&oacute;n de devoluci&oacute;n de llamada
function array key exists $key	valor para verificar
function array key exists $array	un array con las claves para verificar
function bool array key exists	devuelve true en caso de éxito o false en caso de error
function bool array key exists mixed $key array $array	verifica si el &iacute;ndice o clave dada existe en el array
function array keys $strict	determina si debería usarase una comparación estricta === durante la búsqueda
function array keys $array	un array que contiene las claves a devolver
function array keys $search_value	si se especifica solamente serán devueltas las claves que contengan estos valores
function array array keys	retorna un array con todas las claves de array
function array array keys array $array mixed $search_value bool $strict	devuelve todas las claves de un array o un subconjunto de claves de un array
function array map $array1	un array a recorrer con la función callback
function array map	lista variable de argumentos de tipo array a recorrer con la función callback
function array map $callback	función de retrollamada a ejecutar para cada elemento de cada array
function array array map	devuelve un array que contiene todos los elementos de array1 después de aplicar la función callback a cada uno de ellos
function array array map callable $callback array $array1	aplica la retrollamada especificada a los elementos de cada array
function array multisort	más arrays opcionalmente seguidos de una opción de ordenación y banderas
function array multisort $array1_sort_order	el orden usado para ordenar el argumento anterior array
function array multisort $array1	un array a ordenar
function bool array multisort	devuelve true en caso de éxito o false en caso de error
function bool array multisort array $array1 mixed $array1_sort_order mixed $array1_sort_flags	ordena varios arrays o arrays multidimensionales
function array product $array	el array
function number array product	devuelve el producto como integer o float
function number array product array $array	calcula el producto de los valores de un array
function array push $array	el array de entrada
function array push $value1	el primer valor a colocar al final de array
function int array push	devuelve el nuevo número de elementos del array
function int array push array $array mixed $value1	inserta uno o m&aacute;s elementos al final de un array
function array rand $array	el array de entrada
function array rand $num	especifica cuántas entradas deberían seleccionarse
function mixed array rand	al seleccionar solamente una entrada array_rand() devolverá la clave para una entrada aleatoria
function mixed array rand array $array int $num	seleccionar una o m&aacute;s entradas aleatorias de un array
function array reduce $initial	si el parámetro opcional initial está disponible será usado al comienzo del proceso o como un resultado final en caso de que el array esté vacío
function array reduce $item	conserva el valor de la iteración actual
function array reduce $carry	conserva el valor de retorno de la iteración anterior; en el caso de que sea la primera iteración conservará el valor de initial
function array reduce $array	el array de entrada
function array reduce $callback	mixed callback mixed $carry mixed $item carry conserva el valor de retorno de la iteración anterior; en el caso de que sea la primera iteración conservará el valor de initial
function mixed array reduce	devuelve el valor resultante
function mixed array reduce array $array callable $callback mixed $initial	reduce iterativamente un array a un solo valor usando una funci&oacute;n llamada de retorno
function array replace $array1	el array cuyos elementos son reemplazados
function array replace	más arrays de los que se extraerán los elementos
function array replace $array2	el array del cual se extraerán los elementos
function array array replace	devuelve un array o null en caso de error
function array array replace array $array1 array $array2	reemplaza los elementos de los arrays pasados en el primer array
function array reverse $preserve_keys	si se establece en true las claves numéricas se conservarán
function array reverse $array	el array de entrada
function array array reverse	devuelve el array en orden inverso
function array array reverse array $array bool $preserve_keys	devuelve un array con los elementos en orden inverso
function array shift $array	el array de entrada
function mixed array shift	devuelve el valor quitado o null si el array está vacío o no es un array
function mixed array shift array $array	quita un elemento del principio del array
function array slice $length	si la longitud dada por length es positiva la secuencia tendrá hasta tantos elementos como indique el valor
function array slice $offset	si el índice dado por offset no es negativo la secuencia empezará en esa posición del array
function array slice $array	el array de entrada
function array slice $preserve_keys	observe que array_slice() reordenará y reinicializará los índices numéricos del array de forma predeterminada
function array array slice	devuelve la parte del array
function array array slice array $array int $offset int $length bool $preserve_keys	extrae una parte de un array
function array splice $length	si se omite la longitud dada por length se elimina todo desde offset hasta el final del array
function array splice $input	el array de entrada
function array splice $offset	si el índice dado por offset es positivo el inicio de la porción eliminada estará en ese índice desde el principio del array input
function array splice $replacement	si se especifica el array replacement los elementos eliminados serán reemplazados con los elementos de este array
function array array splice	devuelve un array que consiste en los elementos extraídos
function array array splice array $input int $offset int $length mixed $replacement	elimina una porci&oacute;n del array y la reemplaza con algo
function array udiff assoc $value_compare_func	la función de comparación debe devolver un entero menor igual o mayor que cero si el primer argumento se considera que sea respectivamente menor igual o mayor que el segundo
function array udiff assoc $array1	el primer array
function array udiff assoc $array2	el segundo array
function array array udiff assoc	array_udiff_assoc() devuelve un array que contiene todos los valores de array1 que no están presentes en ninguno de los demás argumentos
function array array udiff assoc array $array1 array $array2 callable $value_compare_func	computa la diferencia entre arrays con una comprobaci&oacute;n de indices adicional compara la informaci&oacute;n mediante una funci&oacute;n de llamada de retorno
function array udiff uassoc $value_compare_func	la función de comparación debe devolver un entero menor igual o mayor que cero si el primer argumento se considera que sea respectivamente menor igual o mayor que el segundo
function array udiff uassoc $array1	el primer array
function array udiff uassoc $key_compare_func	la comparación de las claves índices se hace también mediante la función de llamada de retorno key_compare_func
function array udiff uassoc $array2	el segundo array
function array array udiff uassoc	devuelve un array que contiene todos los valores de array1 que no están presentes en ningno de los demás argumentos
function array array udiff uassoc array $array1 array $array2 callable $value_compare_func callable $key_compare_func	computa la diferencia entre arrays con una verificaci&oacute;n de &iacute;ndices adicional compara la informaci&oacute;n y los &iacute;ndices mediante una funci&oacute;n de llamada de retorno
function array uintersect assoc $value_compare_func	la función de comparación debe devolver un entero menor igual o mayor que cero si el primer argumento se considera que sea respectivamente menor igual o mayor que el segundo
function array uintersect assoc $array1	el primer array
function array uintersect assoc $array2	el segundo array
function array array uintersect assoc	devuelve un array que contiene todos los valores de array1 que están presentes en todos los argumentos
function array array uintersect assoc array $array1 array $array2 callable $value_compare_func	calcula la intersecci&oacute;n de arrays con una comprobaci&oacute;n de &iacute;ndices adicional compara la informaci&oacute;n mediante una funci&oacute;n de retrollamada
function array uintersect $value_compare_func	la función de comparación debe devolver un entero menor igual o mayor que cero si el primer argumento se considera que sea respectivamente menor igual o mayor que el segundo
function array uintersect $array1	el primer array
function array uintersect $array2	el segundo array
function array array uintersect	devuelve un array que contiene todos los valores de array1 que están presentes en todos los argumentos
function array array uintersect array $array1 array $array2 callable $value_compare_func	computa una intersecci&oacute;n de arrays compara la informaci&oacute;n mediante una funci&oacute;n de llamada de retorno
function array unshift $value1	el primer valor a añadir al inicio
function array unshift $array	el array de entrada
function int array unshift	devuelve el nuevo número de elementos del array
function int array unshift array $array mixed $value1	a&ntilde;adir al inicio de un array uno a m&aacute;s elementos
function array values $array	el array
function array array values	devuelve un array indexeado de valores
function array array values array $array	devuelve todos los valores de un array
function array	sintaxis índice = > valores separados por comas define índice y valores
function array array	devuelve un array de parámetros
function array array	crea un array
function arsort $sort_flags	se puede modificar el comportamiento del ordenado usando el parámetro opcional sort_flags par más información vea sort()
function arsort $array	el array de entrada
function bool arsort	devuelve true en caso de éxito o false en caso de error
function bool arsort array $array int $sort_flags	ordena un array en orden inverso y mantiene la asociaci&oacute;n de &iacute;ndices
function asinh $arg	el argumento a procesar
function float asinh	el arco seno hiperbólico de arg
function float asinh float $arg	arco seno hiperb&oacute;lico
function asort $array	el array de entrada
function asort $sort_flags	quizá se necesita cambiar el comportamiento del ordenado usando este parámetro opcional sort_flags para más información ver sort()
function bool asort	devuelve true en caso de éxito o false en caso de error
function bool asort array $array int $sort_flags	ordena un array y mantiene la asociaci&oacute;n de &iacute;ndices
function assert options $what	assert options opción configuración inicial valor predeterminado descripción assert_active assert
function assert options $value	nuevo valor para la directiva
function mixed assert options	devuelve el valor original de cualquiera de las opciones o false en caso de error
function mixed assert options int $what mixed $value	establecer / obtener valores de las directivas relacionadas con las aserciones
function assert $assertion	the assertion
function assert $exception	in php 7 the second parameter can be a throwable object instead of a descriptive string in which case this is the object that will be thrown if the assertion fails and the assert
function assert $description	an optional description that will be included in the failure message if the assertion fails
function bool assert	false if the assertion is false true otherwise
function bool assert mixed $assertion string $description	checks if assertion is false
function atanh $arg	el argumento a procesar
function float atanh	el arco tangente hiperbólico de arg
function float atanh float $arg	arco tangente hiperb&oacute;lica
function autoload $class	nombre de la clase a cargar
function void autoload string $class	intenta cargar una clase sin definir
function base convert $number	el número a convertir
function base convert $frombase	la base en que se encuentra number
function base convert $tobase	la base a la cual convertir number
function string base convert	number convertido a base tobase
function string base convert string $number int $frombase int $tobase	convertir un n&uacute;mero entre bases arbitrarias
function base64 decode $strict	devuelve false si los datos de entrada contienen carácteres que no estan dentro del alfabeto base64
function base64 decode $data	los datos codificados
function string base64 decode	devuelve los datos originales o false en caso de error
function string base64 decode string $data bool $strict	decodifica datos codificados con mime base64
function base64 encode $data	datos a codificar
function string base64 encode	los datos codificados como un string o false en caso de error
function string base64 encode string $data	codifica datos con mime base64
function basename $path	una ruta
function basename $suffix	si el nombre del componente termina en suffix éste será recortado también
function string basename	devuelve el nombre base de path
function string basename string $path string $suffix	devuelve el &uacute;ltimo componente de nombre de una ruta
function bbcode add element $tag_name	la nueva etiqueta a añadir al set de bbcode_container
function bbcode add element $bbcode_container	resource bbcode_container retornado por bbcode_create()
function bbcode add element $tag_rules	un array asociativo conteniendo las reglas para el analizador; ver bbcode_create() para las claves disponibles
function bool bbcode add element	devuelve true en caso de éxito o false en caso de error
function bool bbcode add element resource $bbcode_container string $tag_name array $tag_rules	a&ntilde;ade un elemento bbcode
function bbcode add smiley $smiley	el string a ser reemplazado cuando se encuentre
function bbcode add smiley $bbcode_container	resource bbcode_container retornado por bbcode_create()
function bbcode add smiley $replace_by	el string que reemplaza al smiley
function bool bbcode add smiley	devuelve true en caso de éxito o false en caso de error
function bool bbcode add smiley resource $bbcode_container string $smiley string $replace_by	a&ntilde;ade un smiley al analizador
function bbcode create $bbcode_initial_tags	un array asociativo que contiene el nombre de la etiqueta como clave y los parámetros requeridos para analizar correctamente el bbcode por su valor
function resource bbcode create	retorna un resource bbcode_container
function resource bbcode create array $bbcode_initial_tags	crea un resource de bbcode
function bbcode destroy $bbcode_container	recurso bbcode_container devuelto por bbcode_create()
function bool bbcode destroy	devuelve true en caso de éxito o false en caso de error
function bool bbcode destroy resource $bbcode_container	cierra un recurso bbcode_container
function bbcode parse $to_parse	string que necesitamos analizar
function bbcode parse $container_bbcode	resource bbcode_container retornado por bbcode_create()
function string bbcode parse	retorna el string analizado o false en caso de error
function string bbcode parse resource $bbcode_container string $to_parse	analiza un string siguiendo el set de reglas dado
function bbcode set arg parser $bbcode_arg_parser	resource bbcode_container retornado por bbcode_create()
function bbcode set arg parser $bbcode_container	resource bbcode_container retornado por bbcode_create()
function bool bbcode set arg parser	devuelve true en caso de éxito o false en caso de error
function bool bbcode set arg parser resource $bbcode_container resource $bbcode_arg_parser	a&ntilde;ade otro analizador para usar otro set de reglas para analizar argumentos
function bbcode set flags $flags	el flag que se debe aplicar a las opciones de bbcode_container
function bbcode set flags $bbcode_container	resource bbcode_container retornado por bbcode_create()
function bbcode set flags $mode	una de las constantes bbcode_set_flags_* para aplicar eliminar un set de flag o reemplazar el set de flag por flags
function bool bbcode set flags	devuelve true en caso de éxito o false en caso de error
function bool bbcode set flags resource $bbcode_container int $flags int $mode	establece o cambia las opciones del analizador
function bccomp $right_operand	el right operand como una cadena
function bccomp $left_operand	el left operand como una cadena
function bccomp $scale	el parametro optativo scale es usado para indicar el número de dígitos decimales que se utilizarán en la comparación
function int bccomp	devuelve 0 si los dos operandos son iguales 1 si el left_operand es mayor que el right_operand de lo contrario -1
function int bccomp string $left_operand string $right_operand int $scale	compara dos n&uacute;meros de precisi&oacute;n arbitraria
function bcdiv $right_operand	el right operand como una cadena
function bcdiv $left_operand	el left operand como una cadena
function bcdiv $scale	este parámetro opcional es usado para establecer el número de dígitos después del punto decimal en el resultado
function string bcdiv	devuelve el resultado de la división como una cadena or null si el right_operand es 0
function string bcdiv string $left_operand string $right_operand int $scale	divide dos n&uacute;meros de precisi&oacute;n arbitraria
function bcmod $modulus	el modulus como una cadena
function bcmod $left_operand	el left operand como una cadena
function string bcmod	devuelve el módulo como una cadena o null si modulus es 0
function string bcmod string $left_operand string $modulus	obtiene el m&oacute;dulo de un n&uacute;mero de precisi&oacute;n arbitraria
function bcompiler load exe $filename	la ruta al archivo exe como cadena
function bool bcompiler load exe	devuelve true en caso de éxito o false en caso de error
function bool bcompiler load exe string $filename	lee y crea clases desde un archivo exe de bcompiler
function bcompiler parse class $class	el nombre de la clase como cadena
function bool bcompiler parse class	devuelve true en caso de éxito o false en caso de error
function bool bcompiler parse class string $class string $callback	lee el c&oacute;digo de bytes de una clase y realiza una llamada de retorno a una funci&oacute;n de usuario
function bcompiler read $filehandle	un gestor de archivo como el devuelto por fopen()
function bool bcompiler read	devuelve true en caso de éxito o false en caso de error
function bool bcompiler read resource $filehandle	lee y crea clases ded un gestor de archivo
function bcompiler write class $className	el nombre de la clase como cadena
function bcompiler write class $filehandle	un gestor de archivo como el devuelto por fopen()
function bool bcompiler write class	devuelve true en caso de éxito o false en caso de error
function bool bcompiler write class resource $filehandle string $className string $extends	escribe una clase definida como c&oacute;digo de bytes
function bcompiler write constant $constantName	el nombre de la constante definida como cadena
function bcompiler write constant $filehandle	un gestor de archivo como el devuelto por fopen()
function bool bcompiler write constant	devuelve true en caso de éxito o false en caso de error
function bool bcompiler write constant resource $filehandle string $constantName	escribe una constante definida como c&oacute;digo de bytes
function bcompiler write exe footer $startpos	la posición del archivo en la que comienza el código de bytes y se puede obtener usando ftell()
function bcompiler write exe footer $filehandle	un gestor de archivo como el devuelto por fopen()
function bool bcompiler write exe footer	devuelve true en caso de éxito o false en caso de error
function bool bcompiler write exe footer resource $filehandle int $startpos	escribe la posici&oacute;n de inicio y la firma al final de un archivo de tipo exe
function bcompiler write function $functionName	el nombre de la función como cadena
function bcompiler write function $filehandle	un gestor de archivo como el devuelto por fopen()
function bool bcompiler write function	devuelve true en caso de éxito o false en caso de error
function bool bcompiler write function resource $filehandle string $functionName	escribe una funci&oacute;n definida como c&oacute;digo de bytes
function bcompiler write functions from file $fileName	el archivo a compilar
function bcompiler write functions from file $filehandle	un gestor de archivo como el devuelto por fopen()
function bool bcompiler write functions from file	devuelve true en caso de éxito o false en caso de error
function bool bcompiler write functions from file resource $filehandle string $fileName	escribe todas las funciones definidas en un archivo como c&oacute;digo de bytes
function bcompiler write header $write_ver	se puede usar para escribir código de bytes en un formato usado anteriormente por lo que lo puede usar con versiones anteriores de bcompiler
function bcompiler write header $filehandle	un gestor de archivo como el devuelto por fopen()
function bool bcompiler write header	devuelve true en caso de éxito o false en caso de error
function bool bcompiler write header resource $filehandle string $write_ver	escribe la cabecera de bcompiler
function bcpow $right_operand	el right operand como una cadena
function bcpow $left_operand	el left operand como una cadena
function bcpow $scale	este parámetro opcional es usado para establecer el número de dígitos después del punto decimal en el resultado
function string bcpow	devuelve el resultado como una cadena
function string bcpow string $left_operand string $right_operand int $scale	elevar un n&uacute;mero de precisi&oacute;n arbitraria a otro
function bcpowmod $modulus	el modulus como una cadena
function bcpowmod $right_operand	el right operand como una cadena
function bcpowmod $left_operand	el left operand como una cadena
function bcpowmod $scale	este parámetro opcional es usado para establecer el número de dígitos después del punto decimal en el resultado
function string bcpowmod	devuelve el resultado como una cadena o null si modulus es 0
function string bcpowmod string $left_operand string $right_operand string $modulus int $scale	eleva un n&uacute;mero de precisi&oacute;n arbitraria a otro reducido por un m&oacute;dulo especificado
function bind textdomain codeset $codeset	el juego de caracteres
function bind textdomain codeset $domain	el dominio
function string bind textdomain codeset	un string si es correcto
function string bind textdomain codeset string $domain string $codeset	especifica el juego de caracteres en que los mensajes del cat&aacute;logo del dominio ser&aacute;n devueltos
function bindec $binary_string	el string binario a convertir
function number bindec	el valor decimal de binary_string
function number bindec string $binary_string	binario a decimal
function bindtextdomain $domain	el dominio
function bindtextdomain $directory	la ruta del directorio
function string bindtextdomain	la ruta completa para el domain actual establecido
function string bindtextdomain string $domain string $directory	establece la ruta del dominio
function bzclose $bz	el puntero del fichero
function int bzclose	devuelve true en caso de éxito o false en caso de error
function int bzclose resource $bz	cierra un fichero bzip2
function bzdecompress $source	string a descomprimir
function bzdecompress $small	si es true se usará un algoritmo de descompresión alternativo que utiliza menos memoria disminuye el requisito máximo de memoria a entorno a 2300k pero por otra parte es la mitad de lento aproximadamente
function mixed bzdecompress	el string descromprimido o el número de error en caso de error
function mixed bzdecompress string $source int $small	descomprime datos codificados con bzip2
function bzerror $bz	el puntero del fichero
function array bzerror	devuelve un array asociativo con el código de error en la entrada errno y el mensaje de error en la entrada errstr
function array bzerror resource $bz	devuelve el n&uacute;mero de error y la cadena del error de bzip2 en un array
function bzerrstr $bz	el puntero del fichero
function string bzerrstr	devuelve una cadena que contiene el mensaje de error
function string bzerrstr resource $bz	devuelve una cadena de error de bzip2
function bzopen $mode	similar a la función fopen() solamente r lectura y w escritura están soportados
function bzopen $filename	el nombre del fichero a abrir o un recurso de flujo existente
function resource bzopen	si al abrir el fichero se produce un error bzopen() devolverá false en caso contrario devolverá el puntero del nuevo fichero abierto
function resource bzopen string $filename string $mode	abre un fichero comprimido con bzip2
function bzwrite $bz	el puntero del fichero
function bzwrite $data	los datos a escribir
function bzwrite $length	si se proporciona la escritura terminará después de que el length no comprimido en bytes hayan sido escritos o se haya llegado al final de data lo que llegue primero
function int bzwrite	devuelve el número de bytes escritos o false en caso de error
function int bzwrite resource $bz string $data int $length	escribe en un fichero bzip2 de forma segura binariamente
function cairo create $surface	descripción
function CairoContext cairo create	qué es devuelto si se tuvo éxito y si falló
function CairoContext cairo create CairoSurface $surface	devuelve un nuevo objeto cairocontext en la superficie requerida
function cairo font face get type $fontface	descripción
function int cairo font face get type	qué es devuelto si se tuvo éxito y si falló
function int cairo font face get type CairoFontFace $fontface	descripci&oacute;n
function cairo font options get antialias $options	descripción
function int cairo font options get antialias	qué es devuelto si se tuvo éxito y si falló
function int cairo font options get antialias CairoFontOptions $options	descripci&oacute;n
function cairo font options get hint metrics $options	descripción
function int cairo font options get hint metrics	qué es devuelto si se tuvo éxito y si falló
function int cairo font options get hint metrics CairoFontOptions $options	descripci&oacute;n
function cairo font options get hint style $options	descripción
function int cairo font options get hint style	qué es devuelto si se tuvo éxito y si falló
function int cairo font options get hint style CairoFontOptions $options	descripci&oacute;n
function cairo font options get subpixel order $options	descripción
function int cairo font options get subpixel order	qué es devuelto si se tuvo éxito y si falló
function int cairo font options get subpixel order CairoFontOptions $options	descripci&oacute;n
function cairo font options hash $options	descripción
function int cairo font options hash	qué es devuelto si se tuvo éxito y si falló
function int cairo font options hash CairoFontOptions $options	descripci&oacute;n
function cairo font options set hint metrics $options	descripción
function cairo font options set hint metrics $hint_metrics	descripción
function void cairo font options set hint metrics CairoFontOptions $options int $hint_metrics	descripci&oacute;n
function cairo font options set hint style $hint_style	descripción
function cairo font options set hint style $options	descripción
function void cairo font options set hint style CairoFontOptions $options int $hint_style	descripci&oacute;n
function cairo font options set subpixel order $options	descripción
function cairo font options set subpixel order $subpixel_order	descripción
function void cairo font options set subpixel order CairoFontOptions $options int $subpixel_order	descripci&oacute;n
function cairo font options status $options	descripción
function int cairo font options status	qué es devuelto si se tuvo éxito y si falló
function int cairo font options status CairoFontOptions $options	descripci&oacute;n
function cairo format stride for width $format	descripción
function cairo format stride for width $width	descripción
function int cairo format stride for width	qué es devuelto si se tuvo éxito y si falló
function int cairo format stride for width int $format int $width	descripci&oacute;n
function cairo image surface create from png $file	descripción
function CairoImageSurface cairo image surface create from png	qué es devuelto si se tuvo éxito y si falló
function CairoImageSurface cairo image surface create from png string $file	descripci&oacute;n
function cairo image surface get height $surface	descripción
function int cairo image surface get height	qué es devuelto si se tuvo éxito y si falló
function int cairo image surface get height CairoImageSurface $surface	descripci&oacute;n
function cairo matrix invert $matrix	descripción
function void cairo matrix invert CairoMatrix $matrix	descripci&oacute;n
function cairo matrix multiply $matrix1	descripción
function cairo matrix multiply $matrix2	descripción
function CairoMatrix cairo matrix multiply	qué es devuelto si se tuvo éxito y si falló
function CairoMatrix cairo matrix multiply CairoMatrix $matrix1 CairoMatrix $matrix2	descripci&oacute;n
function cairo matrix rotate $matrix	descripción
function cairo matrix rotate $radians	descripción
function void cairo matrix rotate CairoMatrix $matrix float $radians	descripci&oacute;n
function cairo matrix transform distance $dy	descripción
function cairo matrix transform distance $dx	descripción
function cairo matrix transform distance $matrix	descripción
function array cairo matrix transform distance	qué es devuelto si se tuvo éxito y si falló
function array cairo matrix transform distance CairoMatrix $matrix float $dx float $dy	descripci&oacute;n
function cairo matrix transform point $dy	descripción
function cairo matrix transform point $dx	descripción
function cairo matrix transform point $matrix	descripción
function array cairo matrix transform point	qué es devuelto si se tuvo éxito y si falló
function array cairo matrix transform point CairoMatrix $matrix float $dx float $dy	descripci&oacute;n
function cairo matrix translate $ty	descripción
function cairo matrix translate $tx	descripción
function cairo matrix translate $matrix	descripción
function void cairo matrix translate CairoMatrix $matrix float $tx float $ty	descripci&oacute;n
function cairo pattern add color stop rgb $offset	descripción
function cairo pattern add color stop rgb $red	descripción
function cairo pattern add color stop rgb $green	descripción
function cairo pattern add color stop rgb $pattern	descripción
function cairo pattern add color stop rgb $blue	descripción
function void cairo pattern add color stop rgb CairoGradientPattern $pattern float $offset float $red float $green float $blue	descripci&oacute;n
function cairo pattern create for surface $surface	descripción
function CairoPattern cairo pattern create for surface	qué es devuelto si se tuvo éxito y si falló
function CairoPattern cairo pattern create for surface CairoSurface $surface	descripci&oacute;n
function cairo pattern create linear $x1	descripción
function cairo pattern create linear $x0	descripción
function cairo pattern create linear $y0	descripción
function cairo pattern create linear $y1	descripción
function CairoPattern cairo pattern create linear	qué es devuelto si se tuvo éxito y si falló
function CairoPattern cairo pattern create linear float $x0 float $y0 float $x1 float $y1	descripci&oacute;n
function cairo pattern create radial $r0	descripción
function cairo pattern create radial $y1	descripción
function cairo pattern create radial $x0	descripción
function cairo pattern create radial $r1	descripción
function cairo pattern create radial $x1	descripción
function cairo pattern create radial $y0	descripción
function CairoPattern cairo pattern create radial	qué es devuelto si se tuvo éxito y si falló
function CairoPattern cairo pattern create radial float $x0 float $y0 float $r0 float $x1 float $y1 float $r1	descripci&oacute;n
function cairo pattern create rgb $red	descripción
function cairo pattern create rgb $green	descripción
function cairo pattern create rgb $blue	descripción
function CairoPattern cairo pattern create rgb	qué es devuelto si se tuvo éxito y si falló
function CairoPattern cairo pattern create rgb float $red float $green float $blue	descripci&oacute;n
function cairo pattern create rgba $red	descripción
function cairo pattern create rgba $green	descripción
function cairo pattern create rgba $alpha	descripción
function cairo pattern create rgba $blue	descripción
function CairoPattern cairo pattern create rgba	qué es devuelto si se tuvo éxito y si falló
function CairoPattern cairo pattern create rgba float $red float $green float $blue float $alpha	descripci&oacute;n
function cairo pattern get color stop rgba $index	descripción
function cairo pattern get color stop rgba $pattern	descripción
function array cairo pattern get color stop rgba	qué es devuelto si se tuvo éxito y si falló
function array cairo pattern get color stop rgba CairoGradientPattern $pattern int $index	descripci&oacute;n
function cairo pattern get extend $pattern	descripción
function int cairo pattern get extend	qué es devuelto si se tuvo éxito y si falló
function int cairo pattern get extend string $pattern	descripci&oacute;n
function cairo pattern get filter $pattern	descripción
function int cairo pattern get filter	qué es devuelto si se tuvo éxito y si falló
function int cairo pattern get filter CairoSurfacePattern $pattern	descripci&oacute;n
function cairo pattern get radial circles $pattern	descripción
function array cairo pattern get radial circles	qué es devuelto si se tuvo éxito y si falló
function array cairo pattern get radial circles CairoRadialGradient $pattern	descripci&oacute;n
function cairo pattern get rgba $pattern	descripción
function array cairo pattern get rgba	qué es devuelto si se tuvo éxito y si falló
function array cairo pattern get rgba CairoSolidPattern $pattern	descripci&oacute;n
function cairo pattern get surface $pattern	descripción
function CairoSurface cairo pattern get surface	qué es devuelto si se tuvo éxito y si falló
function CairoSurface cairo pattern get surface CairoSurfacePattern $pattern	descripci&oacute;n
function cairo pattern get type $pattern	descripción
function int cairo pattern get type	qué es devuelto si se tuvo éxito y si falló
function int cairo pattern get type CairoPattern $pattern	descripci&oacute;n
function cairo pattern set extend $extend	descripción
function cairo pattern set extend $pattern	descripción
function void cairo pattern set extend string $pattern string $extend	descripci&oacute;n
function cairo pattern set filter $pattern	descripción
function cairo pattern set filter $filter	descripción
function void cairo pattern set filter CairoSurfacePattern $pattern int $filter	descripci&oacute;n
function cairo pattern set matrix $matrix	descripción
function cairo pattern set matrix $pattern	descripción
function void cairo pattern set matrix CairoPattern $pattern CairoMatrix $matrix	descripci&oacute;n
function cairo pdf surface create $height	descripción
function cairo pdf surface create $file	descripción
function cairo pdf surface create $width	descripción
function CairoPdfSurface cairo pdf surface create	qué es devuelto si se tuvo éxito y si falló
function CairoPdfSurface cairo pdf surface create string $file float $width float $height	descripci&oacute;n
function cairo ps level to string $level	descripción
function string cairo ps level to string	qué es devuelto si se tuvo éxito y si falló
function string cairo ps level to string int $level	descripci&oacute;n
function cairo ps surface create $height	descripción
function cairo ps surface create $file	descripción
function cairo ps surface create $width	descripción
function CairoPsSurface cairo ps surface create	qué es devuelto si se tuvo éxito y si falló
function CairoPsSurface cairo ps surface create string $file float $width float $height	descripci&oacute;n
function cairo ps surface dsc begin page setup $surface	descripción
function void cairo ps surface dsc begin page setup CairoPsSurface $surface	descripci&oacute;n
function cairo ps surface dsc begin setup $surface	descripción
function void cairo ps surface dsc begin setup CairoPsSurface $surface	descripci&oacute;n
function cairo ps surface get eps $surface	descripción
function bool cairo ps surface get eps	qué es devuelto si se tuvo éxito y si falló
function bool cairo ps surface get eps CairoPsSurface $surface	descripci&oacute;n
function cairo ps surface restrict to level $level	descripción
function cairo ps surface restrict to level $surface	descripción
function void cairo ps surface restrict to level CairoPsSurface $surface int $level	descripci&oacute;n
function cairo scaled font create $matrix	descripción
function cairo scaled font create $fontface	descripción
function cairo scaled font create $fontoptions	descripción
function cairo scaled font create $ctm	descripción
function CairoScaledFont cairo scaled font create	qué es devuelto si se tuvo éxito y si falló
function CairoScaledFont cairo scaled font create CairoFontFace $fontface CairoMatrix $matrix CairoMatrix $ctm CairoFontOptions $fontoptions	descripci&oacute;n
function cairo scaled font extents $scaledfont	descripción
function array cairo scaled font extents	qué es devuelto si se tuvo éxito y si falló
function array cairo scaled font extents CairoScaledFont $scaledfont	descripci&oacute;n
function cairo scaled font get font face $scaledfont	descripción
function CairoFontFace cairo scaled font get font face	qué es devuelto si se tuvo éxito y si falló
function CairoFontFace cairo scaled font get font face CairoScaledFont $scaledfont	descripci&oacute;n
function cairo scaled font get font matrix $scaledfont	descripción
function CairoFontOptions cairo scaled font get font matrix	qué es devuelto si se tuvo éxito y si falló
function CairoFontOptions cairo scaled font get font matrix CairoScaledFont $scaledfont	descripci&oacute;n
function cairo scaled font get font options $scaledfont	descripción
function CairoFontOptions cairo scaled font get font options	qué es devuelto si se tuvo éxito y si falló
function CairoFontOptions cairo scaled font get font options CairoScaledFont $scaledfont	descripci&oacute;n
function cairo scaled font get type $scaledfont	descripción
function int cairo scaled font get type	qué es devuelto si se tuvo éxito y si falló
function int cairo scaled font get type CairoScaledFont $scaledfont	descripci&oacute;n
function cairo scaled font glyph extents $glyphs	descripción
function cairo scaled font glyph extents $scaledfont	descripción
function array cairo scaled font glyph extents	qué es devuelto si se tuvo éxito y si falló
function array cairo scaled font glyph extents CairoScaledFont $scaledfont array $glyphs	descripci&oacute;n
function cairo scaled font status $scaledfont	descripción
function int cairo scaled font status	qué es devuelto si se tuvo éxito y si falló
function int cairo scaled font status CairoScaledFont $scaledfont	descripci&oacute;n
function cairo scaled font text extents $scaledfont	descripción
function cairo scaled font text extents $text	descripción
function array cairo scaled font text extents	qué es devuelto si se tuvo éxito y si falló
function array cairo scaled font text extents CairoScaledFont $scaledfont string $text	descripci&oacute;n
function cairo surface create similar $height	descripción
function cairo surface create similar $surface	descripción
function cairo surface create similar $width	descripción
function cairo surface create similar $content	descripción
function CairoSurface cairo surface create similar	qué es devuelto si se tuvo éxito y si falló
function CairoSurface cairo surface create similar CairoSurface $surface int $content float $width float $height	descripci&oacute;n
function cairo surface finish $surface	descripción
function void cairo surface finish CairoSurface $surface	descripci&oacute;n
function cairo surface flush $surface	descripción
function void cairo surface flush CairoSurface $surface	descripci&oacute;n
function cairo surface get content $surface	descripción
function int cairo surface get content	qué es devuelto si se tuvo éxito y si falló
function int cairo surface get content CairoSurface $surface	descripci&oacute;n
function cairo surface get font options $surface	descripción
function CairoFontOptions cairo surface get font options	qué es devuelto si se tuvo éxito y si falló
function CairoFontOptions cairo surface get font options CairoSurface $surface	descripci&oacute;n
function cairo surface get type $surface	descripción
function int cairo surface get type	qué es devuelto si se tuvo éxito y si falló
function int cairo surface get type CairoSurface $surface	descripci&oacute;n
function cairo surface mark dirty rectangle $height	descripción
function cairo surface mark dirty rectangle $surface	descripción
function cairo surface mark dirty rectangle $width	descripción
function cairo surface mark dirty rectangle $x	descripción
function cairo surface mark dirty rectangle $y	descripción
function void cairo surface mark dirty rectangle CairoSurface $surface float $x float $y float $width float $height	descripci&oacute;n
function cairo surface mark dirty $surface	descripción
function void cairo surface mark dirty CairoSurface $surface	descripci&oacute;n
function cairo surface set device offset $surface	descripción
function cairo surface set device offset $x	descripción
function cairo surface set device offset $y	descripción
function void cairo surface set device offset CairoSurface $surface float $x float $y	descripci&oacute;n
function cairo surface set fallback resolution $surface	descripción
function cairo surface set fallback resolution $x	descripción
function cairo surface set fallback resolution $y	descripción
function void cairo surface set fallback resolution CairoSurface $surface float $x float $y	descripci&oacute;n
function cairo surface write to png $surface	descripción
function cairo surface write to png $stream	descripción
function void cairo surface write to png CairoSurface $surface resource $stream	descripci&oacute;n
function cairo svg surface create $height	descripción
function cairo svg surface create $file	descripción
function cairo svg surface create $width	descripción
function CairoSvgSurface cairo svg surface create	qué es devuelto si se tuvo éxito y si falló
function CairoSvgSurface cairo svg surface create string $file float $width float $height	descripci&oacute;n
function cairo svg surface restrict to version $surface	descripción
function cairo svg surface restrict to version $version	descripción
function void cairo svg surface restrict to version CairoSvgSurface $surface int $version	descripci&oacute;n
function cairo svg version to string $version	descripción
function string cairo svg version to string	qué es devuelto si se tuvo éxito y si falló
function string cairo svg version to string int $version	descripci&oacute;n
function cal info $calendar	el calendario del que se va a devolver la información
function array cal info int $calendar	devuelve informaci&oacute;n sobre un calendario en particular
function cal to jd $day	el día como número el rango válido depende de calendar
function cal to jd $calendar	el calendario desde el que se va a hacer la conversión cal_gregorian cal_julian cal_jewish o cal_french
function cal to jd $month	el mes como número el rango válido depende de calendar
function cal to jd $year	el año como número el rango válido depende de calendar
function int cal to jd	un número de día de la fecha juliana
function int cal to jd int $calendar int $month int $day int $year	convertir un calendario soportado a la fecha juliana
function call user func array $param_arr	los parámetros a pasar a la llamada de retorno como matriz indexada
function call user func array $callback	la función llamable callable a llamar
function mixed call user func array	devuelve el valor devuelto por la llamada de retorno o false en caso de error
function mixed call user func array callable $callback array $param_arr	llamar a una llamada de retorno un array de par&aacute;metros
function chdir $directorio	el nuevo directorio actual
function bool chdir	devuelve true en caso de éxito o false en caso de error
function bool chdir string $directory	cambia de directorio
function checkdate $year	el año entre 1 y 32767 inclusive
function checkdate $day	el día que está dentro del número de días del mes month dado
function checkdate $month	el mes entre 1 y 12 inclusive
function bool checkdate	devuelve true si la fecha dada es válida si no devuelve false
function bool checkdate int $month int $day int $year	validar una fecha gregoriana
function checkdnsrr $type	type puede ser cualquiera de: a mx ns soa ptr cname aaaa a6 srv naptr txt o any
function checkdnsrr $host	host puede ser la dirección ip en notación decimal con puntos o el nombre de host
function bool checkdnsrr	devuelve true si los registros se encuentran; devuelve false si no se encuentran registros o si ocurre un error
function bool checkdnsrr string $host string $type	comprueba registros dns correspondientes a un nombre de host de internet dado o direcci&oacute;n ip
function chmod $mode	observe que no se asume que mode sea automáticamente un valor octal por lo que para asegurarse de que la opración sea la esperada es necesario prefijar mode con un cero 0
function chmod $filename	ruta del fichero
function bool chmod	devuelve true en caso de éxito o false en caso de error
function bool chmod string $filename int $mode	cambia el modo de un fichero
function chown $filename	la ruta hacia el fichero
function chown $user	un nombre o número de usuario
function bool chown	devuelve true en caso de éxito o false en caso de error
function bool chown string $filename mixed $user	cambia el propietario del fichero
function chr $ascii	el código ascii
function string chr	devuelve el carácter especificado
function string chr int $ascii	devuelve un caracter espec&iacute;fico
function chunk split $body	la cadena que será fragmentada
function chunk split $end	la secuencia de final de línea
function chunk split $chunklen	la longitud del trozo
function string chunk split	devuelve la cadena fragmentada
function string chunk split string $body int $chunklen string $end	divide una cadena en trozos m&aacute;s peque&ntilde;os
function class alias $original	la clase original
function class alias $alias	el nombre del alias para la clase
function class alias $autoload	si se realiza la autocarga si la clase original no se encuentra
function bool class alias	devuelve true en caso de éxito o false en caso de error
function bool class alias string $original string $alias bool $autoload	crea un alias para una clase
function class implements $autoload	establece si se va a permitir que la clase se cargue automáticamente a a través del método mágico __autoload()
function class implements $class	un objeto instancia de clase o un string nombre de clase o interfaz
function array class implements	un array en caso de éxito o false en caso de error
function array class implements mixed $class bool $autoload	devuelve las interfaces que son implementadas por la clase o interfaz dadas
function class parents $class	un objeto instancia de clase o un string nombre de clase
function class parents $autoload	establece si se va a permitir que la clase se cargue automáticamente a a través del método mágico __autoload()
function array class parents	un array en caso de éxito o false en caso de error
function array class parents mixed $class bool $autoload	devuelve las clases padre de la clase dada
function class uses $autoload	si permitir a esta función cargar la clase automáticamente a través del método mágico __autoload()
function class uses $class	un objeto instancia de clase o una cadena nombre de clase
function array class uses	un array en caso de éxito o false en caso de error
function array class uses mixed $class bool $autoload	devolver los traits usados por la clase dada
function clearstatcache $clear_realpath_cache	si se limpia la caché de la ruta real o no
function clearstatcache $filename	limpia la ruta real y la caché de estadísticas para un nombre de fichero específico; solamente se usa si clear_realpath_cache es true
function void clearstatcache bool $clear_realpath_cache string $filename	limpia la cach&eacute; de estado de un archivo
function closedir $gestor_dir	el gestor de directorio tipo resource previamente abierto con opendir()
function void closedir resource $dir_handle	cierra un gestor de directorio
function string com create guid	devuelve el guid como cadena
function string com create guid	generar un identificador &uacute;nico globalmente guid
function com event sink $sinkobject	sinkobject debería ser una instancia de una clase con métodos nombrados después de aquellos de la dispinterfaz deseada; se puede usar com_print_typeinfo() para ayudar a generar una clase plantilla para este propósito
function com event sink $sinkinterface	php intentará usar el tipo de dispinterfaz predeterminado especificado por la biblioteca de tipos asociada con comobject pero se puede sobrescribir esta opción estableciendo sinkinterface al nombre de la dispinterfaz que se desea usar
function bool com event sink	devuelve true en caso de éxito o false en caso de error
function bool com event sink variant $comobject object $sinkobject mixed $sinkinterface	conectar eventos de un objeto com a un objeto php
function com get active object $code_page	actúa exactamente de la misma forma que lo hace la clase com
function com get active object $progid	progid puede ser el progid o el clsid del objeto al que se quiere acceder por ejemplo word
function variant com get active object	si el objeto solicitado está ejecutándose será devuelto a su script al igual que otro objeto com
function variant com get active object string $progid int $code_page	devuelve un gestor a una instancia de un objeto com ya en ejecuci&oacute;n
function com load typelib $typelib_name	typelib_name puede ser uno de los siguientes: el nombre de fichero de un fichero
function com load typelib $case_insensitive	case_insensitive se comporta de la misma manera que el parámetro con el mismo nombre de la función define()
function bool com load typelib	devuelve true en caso de éxito o false en caso de error
function bool com load typelib string $typelib_name bool $case_insensitive	carga una biblioteca de tipos
function compact $varname1	compact() toma un número variable de parámetros
function array compact	devuelve un array de salida con todas las variables añadidas a él
function array compact mixed $varname1	crear un array que contiene variables y sus valores
function int connection aborted	devuelve 1 si el cliente se desconectó 0 de lo contrario
function int connection aborted	verifica si el cliente se desconect&oacute;
function convert uudecode $data	los datos codificados mediante uuencode
function string convert uudecode	devuelve los datos descodificados como una cadena o false en caso de error
function string convert uudecode string $data	descodifica una cadena codificada mediante uuencode
function convert uuencode $data	los datos a codificar
function string convert uuencode	devuelve los datos codificados mediante uuencode o false en caso de error
function string convert uuencode string $data	codificar mediante uuencode una cadena
function copy $source	ruta al fichero de origen
function copy $context	un recurso de contexto válido creado con stream_context_create()
function copy $dest	la ruta de destino
function bool copy	devuelve true en caso de éxito o false en caso de error
function bool copy string $source string $dest resource $context	copia un fichero
function cos $arg	un ángulo en radianes
function float cos	el coseno de arg
function float cos float $arg	coseno
function cosh $arg	el argumento a procesar
function float cosh	el coseno hiperbólico de arg
function float cosh float $arg	coseno hiperb&oacute;lico
function count chars $mode	ver los valores a retornar
function count chars $string	la cadena a examinar
function mixed count chars	dependiendo de mode count_chars() devuelve uno de los siguientes: 0 - un array con el byte-value como clave y la frecuencia de cada uno como valor
function mixed count chars string $string int $mode	devuelve informaci&oacute;n sobre los caracteres usados en una cadena
function count $array_or_countable	un array o un objeto countable
function count $mode	si el parámetro opcional mode está establecido a count_recursive o 1 count() contará el array de forma recursiva
function int count	devuelve el número de elementos en array_or_countable si el parámetro no es un array o no es un objecto con la interfaz countable implementada devolverá 1
function int count mixed $array_or_countable int $mode	cuenta todos los elementos de un array o algo de un objeto
function crack check $dictionary	el diccionario de cracklib que se va a utilizar
function crack check $password	la contraseña que se quiere testear
function bool crack check	devuelve true si password es segura o false de lo contrario
function bool crack check resource $dictionary string $password	realiza una comprobaci&oacute;n de la dificultad de crackear la contrase&ntilde;a proporcionada
function crack closedict $dictionary	el diccionario a cerrarse
function bool crack closedict	devuelve true en caso de éxito o false en caso de error
function bool crack closedict resource $dictionary	cierra un diccionario abierto de cracklib
function string crack getlastmessage	el mensaje de la última comprobación realizada o false si no se han realizado comprobaciones hasta la fecha
function string crack getlastmessage	devuelve el mensaje de la &uacute;ltima comprobaci&oacute;n realizada
function create function $code	el código de la función
function create function $args	los argumentos de la función
function string create function	devuelve un nombre de función único como cadena o false en caso de error
function string create function string $args string $code	crear una funci&oacute;n an&oacute;nima estilo lambda
function crypt $str	el string al que realizarle el hash
function crypt $salt	un string opcional de salt para la base del hash
function string crypt	devuelve un string con el hash o un string que es más corto que 13 caracteres y que se garantiza que difiere del salt en caso de fallo
function string crypt string $str string $salt	hash de cadenas de un s&oacute;lo sentido
function ctype alnum $text	la cadena de prueba
function bool ctype alnum	devuelve true si cada caracter de texto es o bien uno letra o un dígito false de lo contrario
function bool ctype alnum string $text	chequear posibles caracteres alfanum&eacute;ricos
function ctype alpha $text	el string de prueba
function bool ctype alpha	devuelve true si cada caracter de texto es una letra de la localización actual false de lo contrario
function bool ctype alpha string $text	chequear posibles caracteres alfab&eacute;ticos
function ctype graph $text	la cadena de prueba
function bool ctype graph	devuelve true si cada caracter del texto es imprimible y genera alguna salida visible no incluye los espacios o false de lo contrario
function bool ctype graph string $text	chequear posibles caracteres imprimibles con excepci&oacute;n de los espacios
function ctype print $text	la cadena de prueba
function bool ctype print	devuelve true si cada caracter del texto genera realmente alguna salida incluyendo los espacios
function bool ctype print string $text	chequear posibles caracteres imprimibles
function ctype upper $text	la cadena de prueba
function bool ctype upper	devuelve true si cada caracter del text es una letra mayúscula en la localidad actual
function bool ctype upper string $text	chequear posibles caracteres en may&uacute;scula
function cubrid affected rows $conn_identifier	la conexión cubrid
function cubrid affected rows $req_identifier	identificador de petición
function int cubrid affected rows	el número de filas afectadas por la sentencia sql cuando el proceso tiene éxito
function int cubrid affected rows resource $conn_identifier	devolver el n&uacute;mero de filas afectadas por la &uacute;ltima sentencia sql
function cubrid close prepare $req_identifier	identificador de solicitud
function bool cubrid close prepare	devuelve true en caso de éxito
function bool cubrid close prepare resource $req_identifier	cerrar el gestor de solicitud
function cubrid close $conn_identifier	el identificador de conexión de cubrid
function bool cubrid close	true cuando el proceso tiene éxito
function bool cubrid close resource $conn_identifier	cerrar la conexi&oacute;n de cubrid
function cubrid col get $conn_identifier	identificador de conexión
function cubrid col get $oid	el oid de la instancia que se quiere leer
function cubrid col get $attr_name	el nombre del atributo de la instancia que se quiere leer
function array cubrid col get	matriz númerica basada en 0 que contiene los elementos que se solicitaron cuando el proceso tiene éxito;
function array cubrid col get resource $conn_identifier string $oid string $attr_name	obtener el contenido de la columna del tipo de coleccti&oacute;n usando oid
function cubrid col size $attr_name	nombre del atributo con el que se quiere trabajar
function cubrid col size $conn_identifier	identificador de conexión
function cubrid col size $oid	el oid de la instancia con la que se quiere trabajar
function int cubrid col size	número de elementos cuando el proceso tiene éxito
function int cubrid col size resource $conn_identifier string $oid string $attr_name	obtener el n&uacute;mero de elementos de la columna del tipo de colecci&oacute;n usando oid
function cubrid commit $conn_identifier	identificador de conexión
function bool cubrid commit	true cuando el proceso tiene éxito
function bool cubrid commit resource $conn_identifier	consigna una transacci&oacute;n
function cubrid connect $host	nombre del host o dirección ip del servidor cas de cubrid
function cubrid connect $userid	nombre de usuario para la base de datos
function cubrid connect $passwd	contraseña del usuario
function cubrid connect $dbname	nombre de la base de datos
function cubrid connect $port	número de puerto del servidor cas de cubrid broker_port configurado en $cubrid / conf / cubrid_broker
function cubrid connect $new_link	si se hace una segunda llamada a cubrid_connect() con los mismos argumentos no se establecerá una nueva conexión en su lugar se devolverá el identificador de conexión de la conexión ya abierta
function resource cubrid connect	el identificador de conexión cuando el proceso tiene éxito
function resource cubrid connect string $host int $port string $dbname string $userid string $passwd bool $new_link	abrir una conexi&oacute;n al servidor cubrid
function cubrid current oid $req_identifier	identificador de solicitud
function string cubrid current oid	oid de la posición del cursor actual cuando el proceso tiene éxito
function string cubrid current oid resource $req_identifier	obtener el oid de la posici&oacute;n del cursor actual
function cubrid db name $result	el puntero resultado desde un llamada a cubrid_list_dbs()
function cubrid db name $index	el índice dentro del conjunto resultado
function string cubrid db name	devuelve el nombre de la base de datos en caso de éxito y false en caso de fallo
function string cubrid db name array $result int $index	obtener el nombre de la base de datos desde los resultados de cubrid_list_dbs
function cubrid drop $oid	oid de la instancia que se quiere borrar
function cubrid drop $conn_identifier	identificador de conexión
function bool cubrid drop	true cuando el proceso tiene éxito
function bool cubrid drop resource $conn_identifier string $oid	borrar una instancia usando oid
function int cubrid error code	código de error del error que ocurrió o 0 cero si no ocurre ningún error
function int cubrid error code	obtener el c&oacute;digo de error de la llamada a una funci&oacute;n m&aacute;s reciente
function cubrid execute $option	la opción de ejecución de la consulta cubrid_include_oid cubrid_async cubrid_exec_query_all
function cubrid execute $conn_identifier	identificador de conexión
function cubrid execute $request_identifier	identificador de cubrid_prepare()
function cubrid execute $sql	sql a ser ejecutado
function resource cubrid execute	gestor de solicitud cuando el proceso tiene éxito y el primer parámetro es conn_identifier; true cuando el proceso tiene éxito y el primer argumento es request_identifier
function resource cubrid execute resource $conn_identifier string $sql int $option	ejecutar una sentencia sql preparada
function cubrid fetch array $type	tipo de array del resultado obtenido: cubrid_num cubrid_assoc cubrid_both cubrid_object
function cubrid fetch array $result	result proviene de una llamada a la función cubrid_execute()
function array cubrid fetch array	devuelve un array de cadenas que se corresponden a la fila consultada cuando ésta tenga éxito
function array cubrid fetch array resource $result int $type	extrae una fila como array asociativo num&eacute;rico o ambos
function cubrid fetch assoc $type	el tipo solamente puede ser cubrid_lob
function cubrid fetch assoc $result	result proviene de una llamada a la función cubrid_execute()
function array cubrid fetch assoc	un array asociativo cuando el proceso tuvo éxito
function array cubrid fetch assoc resource $result int $type	devuelve un array asociativo que se corresponde con la fila obtenida
function cubrid fetch field $result	result proviene de una llamada a la función cubrid_execute()
function cubrid fetch field $field_offset	el índice del campo numérico
function object cubrid fetch field	un objeto con ciertas propiedades de la columna especificada cuando el proceso tuvo éxito
function object cubrid fetch field resource $result int $field_offset	devuelve un objeto con ciertas propiedades
function cubrid fetch object $class_name	el nombre de la clase a instanciar si no se especifica se devuelve un objeto stdclass stdclass es una clase génerica vacía de php que se usa al convertir otros tipos a objetos
function cubrid fetch object $params	un array opcional de parámetros a pasar al constructor de los objetos class_name
function cubrid fetch object $result	result proviene de una llamada a la función cubrid_execute()
function cubrid fetch object $type	el tipo solamente puede ser cubrid_lob
function object cubrid fetch object	un objeto cuando el proceso tuvo éxito
function object cubrid fetch object resource $result string $class_name array $params int $type	devuelve un objeto con los nombres de las columnas
function cubrid fetch $type	tipo de array del resultado obtenido: cubrid_num cubrid_assoc cubrid_both cubrid_object
function cubrid fetch $result	result proviene de una llamada a la función cubrid_execute()
function mixed cubrid fetch	un array de resultados u objeto cuando el proceso tiene éxito
function mixed cubrid fetch resource $result int $type	obtener la siguiente fila de un conjunto de resultados
function cubrid field flags $field_offset	el índice de campo numérico
function cubrid field flags $result	result proviene de una llamada a la función cubrid_execute()
function string cubrid field flags	una cadena con banderas cuando el proceso tuvo éxito
function string cubrid field flags resource $result int $field_offset	devuelve una cadena con las banderas del &iacute;ndice del campo dado
function cubrid field name $field_offset	el índice de campo numérico
function cubrid field name $result	result proviene de una llamada a la función cubrid_execute()
function string cubrid field name	el nombre del índice del campo especificado en caso de éxito
function string cubrid field name resource $result int $field_offset	devuelve el nombre del &iacute;ndice del campo especificado
function cubrid field seek $field_offset	el índice de campo numérico
function cubrid field seek $result	result proviene de una llamada a la función cubrid_execute()
function bool cubrid field seek	true en caso de éxito
function bool cubrid field seek resource $result int $field_offset	mueve el cursor del conjunto de resultados al &iacute;ndece del campo especificado
function cubrid field type $field_offset	el índice de campo numérico
function cubrid field type $result	tipo array del resultado traído cubrid_num cubrid_assoc cubrid_both
function string cubrid field type	el tipo de la columna en caso de éxito
function string cubrid field type resource $result int $field_offset	devuelve el tipo de columna que se corresponde con el &iacute;ndice del campo dado
function cubrid get autocommit $conn_identifier	identificador de conexión
function bool cubrid get autocommit	true cuando el auto-commit está activado
function bool cubrid get autocommit resource $conn_identifier	devuelve el modo auto-commit de la conexi&oacute;n
function cubrid get charset $conn_identifier	la conexión cubrid
function string cubrid get charset	una cadena que representa el conjunto de caracteres de la conexión cubrid; en caso de éxito
function string cubrid get charset resource $conn_identifier	devolver el conjunto de caracteres de la conexi&oacute;n cubrid actual
function cubrid get class name $conn_identifier	identificador de conexión
function cubrid get class name $oid	oid de la instancia de la que se quiere comprobar su existencia
function string cubrid get class name	el nombre de la clase cuando el proceso tiene éxito
function string cubrid get class name resource $conn_identifier string $oid	obtener el nombre de la clase usando oid
function string cubrid get client info	una cadena que representa la versión de la biblioteca cliente; en caso de éxito
function string cubrid get client info	devolver la versi&oacute;n de la biblioteca cliente
function cubrid get db parameter $conn_identifier	la conexión cubrid
function array cubrid get db parameter	una matriz asociativa con los parámetros de la base de datos cubrid; en caso de éxito
function array cubrid get db parameter resource $conn_identifier	devuelve los par&aacute;metros de la base de datos cubrid
function cubrid get query timeout $req_identifier	identificador de petición
function int cubrid get query timeout	éxito: el valor del tiempo de espera de constula de la petición actual
function int cubrid get query timeout resource $req_identifier	obtener el valor del tiempo de espera de consulta de la petici&oacute;n
function cubrid get server info $conn_identifier	la conexión cubrid
function string cubrid get server info	una cadena que representa la versión del servidor cubrid; en caso de éxito
function string cubrid get server info resource $conn_identifier	devolver la versi&oacute;n del servidor cubrid
function cubrid insert id $conn_identifier	el identificador de conexión previamente obtenido por una llamada a cubrid_connect()
function string cubrid insert id	un string representa el id generado para una columna auto:increment por la consulta previa en caso de éxito
function string cubrid insert id resource $conn_identifier	devuelve el id generado por la &uacute;ltima columna actualizada auto_increment
function cubrid list dbs $conn_identifier	la conexión cubrid
function array cubrid list dbs	una matriz numérica con todas las bases de datos cubrid existentes; en caso de éxito
function array cubrid list dbs resource $conn_identifier	devuelve una matriz con la lista de todas las bases de datos cubrid existentes
function cubrid lob export $lob_identifier	identificador lob
function cubrid lob export $conn_identifier	identificador de conexión
function cubrid lob export $path_name	nombre de la ruta al fichero
function bool cubrid lob export	true cuando el proceso tiene éxito
function bool cubrid lob export resource $conn_identifier resource $lob_identifier string $path_name	exportar datos blob / clob a un fichero
function cubrid lob get $conn_identifier	identificador de conexión
function cubrid lob get $sql	la sentencia sql a ser ejecutada
function array cubrid lob get	devuelve un array de recursos lob cuando el proceso tiene éxito
function array cubrid lob get resource $conn_identifier string $sql	obtener informaci&oacute;n blob / clob
function cubrid lob send $lob_identifier	identificador lob
function cubrid lob send $conn_identifier	identificador de conexión
function bool cubrid lob send	true cuando el proceso tiene éxito
function bool cubrid lob send resource $conn_identifier resource $lob_identifier	leer informaci&oacute;n blob / clob y enviarla directamente al navegador
function cubrid lob size $lob_identifier	identificador lob
function string cubrid lob size	un string representando el tamaño de datos lob cuando el proceso tiene éxito
function string cubrid lob size resource $lob_identifier	obtener el tama&ntilde;o de datos blob / clob
function cubrid lob2 close $lob_identifier	un identificador de lob como un resultado de cubrid_lob2_new() u obtenido de un conjunto de resultados
function bool cubrid lob2 close	true en caso de éxito
function bool cubrid lob2 close resource $lob_identifier	cierra un objeto lob
function cubrid lob2 export $lob_identifier	un identificador de lob como un resultado de cubrid_lob2_new() u obtenido de un conjunto de resultados
function cubrid lob2 export $filename	el nombre del fichero donde se quieren almacenar los datos blob / clob
function bool cubrid lob2 export	true si el proceso tiene éxito y false en caso de error
function bool cubrid lob2 export resource $lob_identifier string $file_name	exporta un objeto lob a un fichero
function cubrid lob2 new $type	puede ser blob o clob y no distingue mayúsculas / minúsculas
function cubrid lob2 new $conn_identifier	un identificador de conexión
function resource cubrid lob2 new	un identificador de lob cuando tiene éxito
function resource cubrid lob2 new resource $conn_identifier string $type	crea un objeto lob
function cubrid lob2 seek $origin	este parámetro admite los siguientes valores: cubrid_cursor_first: avanzar desde el primer comienzo
function cubrid lob2 seek $lob_identifier	un identificador de lob como un resultado de cubrid_lob2_new() u obtenido de un conjunto de resultados
function cubrid lob2 seek $offset	el número de unidades que se quiere mover el cursor
function bool cubrid lob2 seek	true si el proceso tiene éxito y false en caso de error
function bool cubrid lob2 seek resource $lob_identifier int $offset int $origin	mover el cursor de un objeto lob
function cubrid lob2 seek64 $origin	este parámetro admite los siguientes valores: cubrid_cursor_first: avanzar desde el primer comienzo
function cubrid lob2 seek64 $lob_identifier	un identificador de lob como un resultado de cubrid_lob2_new() u obtenido de un conjunto de resultados
function cubrid lob2 seek64 $offset	el número de unidades que se quiere mover el cursor
function bool cubrid lob2 seek64	true si el proceso tiene éxito y false en caso de error
function bool cubrid lob2 seek64 resource $lob_identifier string $offset int $origin	mover el cursor de un objeto lob
function cubrid lob2 size $lob_identifier	un identificador de lob como un resultado de cubrid_lob2_new() u obtenido de un conjunto de resultados
function int cubrid lob2 size	devuelve el tamaño del objeto lob cuando el proceso tiene éxito
function int cubrid lob2 size resource $lob_identifier	obtiene el tama&ntilde;o de un objeto lob
function cubrid lob2 size64 $lob_identifier	un identificador de lob como un resultado de cubrid_lob2_new() u obtenido de un conjunto de resultados
function string cubrid lob2 size64	devuelve el tamaño del objeto lob como string cuando el proceso tiene éxito
function string cubrid lob2 size64 resource $lob_identifier	obtiene el tama&ntilde;o de un objeto lob
function cubrid lob2 tell $lob_identifier	un identificador de lob como un resultado de cubrid_lob2_new() u obtenido de un conjunto de resultados
function int cubrid lob2 tell	devuelve la posición del cursor del objeto lob cuando el proceso tiene éxito
function int cubrid lob2 tell resource $lob_identifier	indica la posici&oacute;n del cursor de un objeto lob
function cubrid lock read $conn_identifier	identificador de conexión
function cubrid lock read $oid	oid de la instancia en la que se quiere porner el bloqueo de lectura
function bool cubrid lock read	true cuando el proceso tiene éxito
function bool cubrid lock read resource $conn_identifier string $oid	establecer un bloqueo de lectura sobre el oid dado
function cubrid move cursor $origin	posición donde se quiere mover el cursor desde cubrid_cursor_first cubrid_cursor_current cubrid_cursor_last
function cubrid move cursor $offset	número de unidades que se quiere mover el cursor
function cubrid move cursor $req_identifier	identificador de solicitud
function int cubrid move cursor	true cuando el proceso tiene éxito
function int cubrid move cursor resource $req_identifier int $offset int $origin	mover el cursor en el resultado
function cubrid new glo $file_name	el nombre del archivo en el que se quiere guardar el glo recién creado
function cubrid new glo $conn_identifier	identificador de conexión
function cubrid new glo $class_name	nombre de la clase en la que se quiere crear un glo
function string cubrid new glo	oid de la instancia creada cuando el proceso tiene éxito
function string cubrid new glo resource $conn_identifier string $class_name string $file_name	crear una instancia glo
function cubrid next result $result	result proviene de una llamada a la función cubrid_execute()
function bool cubrid next result	true cuando el proceso ha sido exitoso
function bool cubrid next result resource $result	obtiene el resultado de la siguiente consulta cuando se ejecutan multiples sentencias sql
function cubrid num rows $result	result viene de una llamada a cubrid_execute() cubrid_query() y cubrid_prepare()
function int cubrid num rows	el número de filas cuando el proceso tiene éxito
function int cubrid num rows resource $result	obtener el n&uacute;mero de filas del conjunto de resultados
function cubrid pconnect with url $conn_url	una cadena de caracteres que contiene la información de conexión al servidor
function cubrid pconnect with url $userid	el nombre de usuario de la base de datos
function cubrid pconnect with url $passwd	la contraseña del usuario
function resource cubrid pconnect with url	el identificador de conexión cuando el proceso tiene éxito
function resource cubrid pconnect with url string $conn_url string $userid string $passwd	abrir una conexi&oacute;n persistente al servidor cubrid
function cubrid pconnect $userid	nombre de usuario para la base de datos
function cubrid pconnect $host	nombre del host o dirección ip del servidor cas de cubrid
function cubrid pconnect $dbname	nombre de la base de datos
function cubrid pconnect $port	número de puerto del servidor cas de cubrid broker_port configurado en $cubrid / conf / cubrid_broker
function cubrid pconnect $passwd	contraseña del usuario
function resource cubrid pconnect	el identificador de conexión cuando el proceso tiene éxito
function resource cubrid pconnect string $host int $port string $dbname string $userid string $passwd	abrir una conexi&oacute;n persistente a un servidor cubrid
function cubrid put $attr	nombre del atributo que se quiere actualizar
function cubrid put $conn_identifier	identificador de conexión
function cubrid put $value	nuevo valor que se quiere asignar al atributo
function cubrid put $oid	oid de la instancia que se quiere actualizar
function int cubrid put	true cuando el proceso tiene éxito
function int cubrid put resource $conn_identifier string $oid string $attr mixed $value	actualizar un atributo usando oid
function cubrid query $conn_identifier	la conexión cubrid
function cubrid query $query	una consulta sql la información dentro de la consulta debería estar adecuadamente escapada
function resource cubrid query	para select show describe explain y otras sentencias que devuelven conjuntos de resultadosa cubrid_query() devuelve un resource en caso de éxito o false en caso de error
function resource cubrid query string $query resource $conn_identifier	enviar una consulta cubrid
function cubrid real escape string $unescaped_string	la cadena que va a ser escapada
function cubrid real escape string $conn_identifier	la conexión cubrid
function string cubrid real escape string	la versión escapada de la cadena dada en caso de éxito
function string cubrid real escape string string $unescaped_string resource $conn_identifier	escapar caracteres especiales en una cadena para usarla en una sentencia sql
function cubrid result $field	el nombre o índice del campo dado por field que está siendo obtenido
function cubrid result $row	el número de fila del resultado que está siendo traído
function cubrid result $result	result proviene de una llamada a la función cubrid_execute()
function string cubrid result	el valor de un campo específico en caso de éxito null si el valor es nulo
function string cubrid result resource $result int $row mixed $field	devuelve el valor de un campo espec&iacute;fico de una fila espec&iacute;fica
function cubrid save to glo $file_name	el nombre del archivo que quierer guardar
function cubrid save to glo $conn_identifier	identificador de conexión
function cubrid save to glo $oid	oid de la instancia glo en donde se quiere guardar un fichero
function int cubrid save to glo	true cuando el proceso tiene éxito
function int cubrid save to glo resource $conn_identifier string $oid string $file_name	guardar el fichero solicitado en una instancia glo
function cubrid schema $schema_type	información del esquema que se quiere conocer
function cubrid schema $conn_identifier	identificador de conexión
function cubrid schema $attr_name	atributo del esquema que se quiere conocer
function cubrid schema $class_name	clase del esquema que se quiere conocer
function array cubrid schema	matriz que contiene la información del esquema cuando el proceso tiene éxito;
function array cubrid schema resource $conn_identifier int $schema_type string $class_name string $attr_name	obtener la informaci&oacute;n del esquema solicitado
function cubrid send glo $conn_identifier	identificador de conexión
function cubrid send glo $oid	oid de la instancia glo de la que se quiere leer información
function int cubrid send glo	true cuando el proceso tiene éxito
function int cubrid send glo resource $conn_identifier string $oid	leer informaci&oacute;n de un glo y enviarla a la salida est&aacute;ndar
function cubrid seq put $seq_element	nuevo contenido que se quiere usar para la actualización
function cubrid seq put $conn_identifier	identificador de conexión
function cubrid seq put $attr_name	nombre del atributo en el que se quiere actualizar un elemento
function cubrid seq put $index	índice basado en 1 del elemento que se quiere actualizar
function cubrid seq put $oid	oid de la instancia con la que se quiere trabajar
function bool cubrid seq put	true cuando el proceso tiene éxito
function bool cubrid seq put resource $conn_identifier string $oid string $attr_name int $index string $seq_element	actualizar el valor del elemento de la columna de tipo secuencia usando oid
function cubrid set add $conn_identifier	identificador de conexión
function cubrid set add $attr_name	nombre del atributo en donde se quiere insertar un elemento
function cubrid set add $set_element	contenido del elemento que se quiere insertar
function cubrid set add $oid	oid de la instancia con la que se quiere trabajar
function bool cubrid set add	true cuando el proceso tiene éxito
function bool cubrid set add resource $conn_identifier string $oid string $attr_name string $set_element	insertar un &uacute;nico elemento en la columna del tipo de conjunto usando oid
function cubrid set autocommit $conn_identifier	identifiador de conexión
function cubrid set autocommit $mode	modo de confirmación automática
function bool cubrid set autocommit	true cuando el proceso ha sido exitoso
function bool cubrid set autocommit resource $conn_identifier bool $mode	establece el modo de confirmaci&oacute;n autom&aacute;tica de la conexi&oacute;n
function cubrid set drop $set_element	contenido del elemento que se quiere borrar
function cubrid set drop $conn_identifier	identificador de conexión
function cubrid set drop $attr_name	nombre del atributo del que se quiere borrar un elemento
function cubrid set drop $oid	oid de la instancia con la que se quiere trabajar
function bool cubrid set drop	true cuando el proceso tiene éxito
function bool cubrid set drop resource $conn_identifier string $oid string $attr_name string $set_element	borrar un elemento de la columna del tipo de conjunto usando oid
function cubrid set query timeout $timeout	el tiempo de espera unidades de milisegundos
function cubrid set query timeout $req_identifier	identificador de petición
function bool cubrid set query timeout	true cuando el proceso tiene éxito
function bool cubrid set query timeout resource $req_identifier int $timeout	establecer el tiempo de espera de la ejecuci&oacute;n de consultas
function cubrid unbuffered query $conn_identifier	la conexión cubrid
function cubrid unbuffered query $query	una consulta sql
function resource cubrid unbuffered query	para sentencias select show describe o explain devuelve un recurso identificador de petición en caso de éxito
function resource cubrid unbuffered query string $query resource $conn_identifier	realiza una consulta sin traer los resultados a memoria
function string cubrid version	información de la versión p
function string cubrid version	obtener la versi&oacute;n del m&oacute;dulo de php de cubrid
function curl close $ch	el recurso curl devuelto por curl_init()
function void curl close resource $ch	cierra una sesi&oacute;n curl
function curl copy handle $ch	el recurso curl devuelto por curl_init()
function resource curl copy handle	devuelve un nuevo recurso de curl
function resource curl copy handle resource $ch	copia el recurso curl junto con todas sus preferencias
function curl errno $ch	el recurso curl devuelto por curl_init()
function int curl errno	devuelve el número de error ó 0 cero si no ocurrió ningún error
function int curl errno resource $ch	devuelve el &uacute;ltimo n&uacute;mero de error
function curl error $ch	el recurso curl devuelto por curl_init()
function string curl error	devuelve el mensaje de error o una cadena vacía si no ocurrió ningún error
function string curl error resource $ch	devuelve una cadena que contiene el &uacute;ltimo error de la sesi&oacute;n actual
function curl getinfo $ch	el recurso curl devuelto por curl_init()
function mixed curl getinfo	si se indica el parámetro opt devolverá su valor
function mixed curl getinfo resource $ch int $opt	obtiene informaci&oacute;n relativa a una transferencia espec&iacute;fica
function curl init $url	si se proporciona se estabecerá en el valor de la opción curlopt_url
function resource curl init	devuelve un manipulador de curl si todo fué bien false si hay errores
function resource curl init string $url	inicia sesi&oacute;n curl
function curl multi add handle $mh	el multi recurso curl multi devuelto por curl_multi_init()
function curl multi add handle $ch	el recurso curl devuelto por curl_init()
function int curl multi add handle	en caso de éxito devuelve 0 sino devuelve alguno de los códigos de error curlm_xxx
function int curl multi add handle resource $mh resource $ch	a&ntilde;ade un recurso curl a un grupo de recursos curl
function curl multi close $mh	el multi recurso curl multi devuelto por curl_multi_init()
function void curl multi close resource $mh	cierra un grupo de recursos curl
function curl multi exec $mh	el multi recurso curl multi devuelto por curl_multi_init()
function curl multi exec $still_running	hace referencia a una bandera que dice cuando las operaciones siguen ejecutándose
function int curl multi exec	código curl definido en las constantes predefinidas curl
function int curl multi exec resource $mh int $still_running	ejecuta las sub-conexiones del recurso curl actual
function curl multi getcontent $ch	el recurso curl devuelto por curl_init()
function string curl multi getcontent	devuelve el contenido de curl si la opción curlopt_returntransfer está activada en el recurso curl
function string curl multi getcontent resource $ch	devuelve el contenido del recurso curl si curlopt_returntransfer est&aacute; activado
function resource curl multi init	devuelve un multi recurso curl si funciona false si falla
function resource curl multi init	devuelve un nuevo multi recurso curl
function curl multi remove handle $mh	el multi recurso curl multi devuelto por curl_multi_init()
function curl multi remove handle $ch	el recurso curl devuelto por curl_init()
function int curl multi remove handle	devuelve 0 en caso de éxito o uno de los códigos de error curlm_xxx
function int curl multi remove handle resource $mh resource $ch	elimina un multi recurso de un conjunto de recursos curl
function curl multi select $mh	el multi recurso curl multi devuelto por curl_multi_init()
function curl multi select $timeout	tiempo en segundos para esperar por una respuesta
function int curl multi select	si funciona devuelve el número de descripciones del contenedor de descripciones
function int curl multi select resource $mh float $timeout	espera actividad en cualquier conexi&oacute;n en curl_multi
function curl multi strerror $errornum	una de las constantes de códigos de error curlm
function string curl multi strerror	devuelve un string con la descripción del código de error válido null si no lo es
function string curl multi strerror int $errornum	devuelve un string con la descripci&oacute;n del c&oacute;digo de error
function curl reset $ch	el recurso curl devuelto por curl_init()
function void curl reset resource $ch	reinicializa todas las opciones de un gestor de sesi&oacute;n libcurl
function curl setopt $option	la opción curlopt_xxx a configurar
function curl setopt $value	valor a configurar en la option
function curl setopt $ch	el recurso curl devuelto por curl_init()
function bool curl setopt	devuelve true en caso de éxito o false en caso de error
function bool curl setopt resource $ch int $option mixed $value	configura una opci&oacute;n para una transferencia curl
function curl share close $sh	un gestor compartido curl devuelto por la función curl_share_init()
function void curl share close resource $sh	cierra un gestor curl compartido
function resource curl share init	devuelve un recurso del tipo curl share handle
function resource curl share init	inicializar un gestor curl compartido
function curl share setopt $sh	un gestor curl compartido devuelto por curl_share_init()
function curl share setopt $value	valor descripción curl_lock_data_cookie comparte cookies
function curl share setopt $option	opción descripción curlshopt_share especifica un tipo de datos que debe ser compartido
function bool curl share setopt	devuelve true en caso de éxito o false en caso de error
function bool curl share setopt resource $sh int $option string $value	configura una opci&oacute;n para un gestor curl compartido
function curl strerror $errornum	una de las constantes de código de error curl
function string curl strerror	devuelve la descripción de error o null para códigos de error inválidos
function string curl strerror int $errornum	devuelve un string que describe el c&oacute;digo de error dado
function array curl version int $age	obtiene la informaci&oacute;n de la versi&oacute;n de curl
function cyrus bind $connection	el controlador de la conexión
function cyrus bind $callbacks	un array de llamadas de retorno
function bool cyrus bind	devuelve true en caso de éxito o false en caso de error
function bool cyrus bind resource $connection array $callbacks	enlaza llamadas de retorno a una conexi&oacute;n imap cyrus
function cyrus query $connection	el controlador de la conexión
function cyrus query $query	la petición
function array cyrus query	devuelve un array asociativo con las siguientes claves: text msgno y keyword
function array cyrus query resource $connection string $query	env&iacute;a una petici&oacute;n a un servidor imap cyrus
function date default timezone set $timezone_identifier	el indentificador de la zona horaria como utc o europe / lisbon
function bool date default timezone set	esta función devuelve false si timezone_identifier no es válido o true de otro modo
function bool date default timezone set string $timezone_identifier	establece la zona horaria predeterminada usada por todas las funciones de fecha / hora en un script
function date parse from format $date	una cadena que representa la fecha
function date parse from format $format	un formato aceptado por datetime::createfromformat()
function array date parse from format	devuelve una matriz asociativa con información detallada de la fecha dada
function array date parse from format string $format string $date	obtiene informaci&oacute;n de una fecha dada formateada de acuerdo al formato especificado
function date sunrise $gmtoffset	el índice gmt especificado en horas
function date sunrise $zenith	el cénit por defecto: date
function date sunrise $latitude	la latitud por defecto a norte y como valor negativo a sur
function date sunrise $format	constantes format constante descripción ejemplo sunfuncs_ret_string devuelve el resultado como string 16:46 sunfuncs_ret_double devuelve el resultado como float 16
function date sunrise $timestamp	la marca de tiempo timestamp del día del que se va a tomar la salida del sol
function date sunrise $longitude	la longitud por defecto a este y como valor negativo a oeste
function mixed date sunrise	devuelve la hora de la salida del sol en un formato format especificado si se tuvo éxito o false en caso de error
function mixed date sunrise int $timestamp int $format float $latitude float $longitude float $zenith float $gmt_offset	devuelve la hora de la salida del sol de un d&iacute;a y ubicaci&oacute;n dados
function date sunset $gmtoffset	el índice gmt especificado en horas
function date sunset $zenith	el cénit por defecto: date
function date sunset $latitude	la latitud por defecto a norte y como valor negativo a sur
function date sunset $format	constantes format constante descripción ejemplo sunfuncs_ret_string devuelve el resultado como string 16:46 sunfuncs_ret_double devuelve el resultado como float 16
function date sunset $longitude	la longitud por defecto a este y como valor negativo a oeste
function date sunset $timestamp	la marca de tiempo timestamp del día del que se va a tomar la puesta de sol
function mixed date sunset	devuelve la hora de la puesta de sol en un formato format especificado si se tuvo éxito o false en caso de error
function mixed date sunset int $timestamp int $format float $latitude float $longitude float $zenith float $gmt_offset	devuelve la hora de la puesta de sol de un d&iacute;a y ubicaci&oacute;n dados
function date $timestamp	el parámetro opcional timestamp es una marca temporal de unix de tipo integer que por defecto es la hora local si no se proporciona ningún valor a timestamp
function date $format	el formato de la fecha de salida tipo string
function string date	devuelve una cadena de fecha formateada
function string date string $format int $timestamp	dar formato a la fecha / hora local
function db2 autocommit $value	una de las siguientes constantes: db2_autocommit_off desactiva autocommit
function db2 autocommit $connection	variable válida de tipo recurso de conexión a base de datos devuelta por db2_connect() o por db2_pconnect()
function db2 autocommit $DB2_AUTOCOMMIT_OFF	desactiva autocommit
function db2 autocommit $DB2_AUTOCOMMIT_ON	activa autocommit
function mixed db2 autocommit	cuando a db2_autocommit() sólo se le proporciona el parámetro connection devuelve en forma de integer el valor actual de autocommit para la conexión solicitada
function mixed db2 autocommit resource $connection bool $value	devuelve o establece el estado de autocommit en una conexi&oacute;n de bases de datos
function db2 bind param $stmt	sentencia preparada devuelta por db2_prepare()
function db2 bind param $data-type	constante que especifica el tipo de dato sql de la variable php que se vincula: de entre db2_binary db2_char db2_double o db2_long
function db2 bind param $variable-name	string con el nombre de la variabel php que se vinculará al parámetro especificado por parameter-number
function db2 bind param $scale	especifica la escala de la variable que se vinculará a la base de datos
function db2 bind param $parameter-number	especifica la posición del parámetro en la sentencia preparada utilizando 1 como primera posición
function db2 bind param $precision	especifica la precisión con la que se debe vincular a la base de datos
function db2 bind param $parameter-type	constante que especifica si la variable php debe vincularse al parámetro sql como un parámetro de entrada db2_param_in de salida db2_param_out o como un parámetro que acepta entrada y salida db2_param_inout
function bool db2 bind param	devuelve true en caso de éxito o false en caso de error
function bool db2 bind param resource $stmt int $parameter-number string $variable-name int $parameter-type int $data-type int $precision int $scale	vincula una variable php a un par&aacute;metro de una sentencia sql
function db2 client info $connection	especifica una conexión de cliente db2 activa
function object db2 client info	devuelve un objeto en caso de éxito
function object db2 client info resource $connection	devuelve un objeto cuyas propiedades describen cliente de una base de datos db2
function db2 close $connection	especifica la conexión a cliente db2 activa
function bool db2 close	devuelve true en caso de éxito o false en caso de error
function bool db2 close resource $connection	cierra una conexi&oacute;n a base de datos
function db2 column privileges $qualifier	un calificador para bases de datos db2 que se ejecutan en servidores os / 390 o z / os
function db2 column privileges $connection	una conexión a ibm db2 cloudscape o apache derby
function db2 column privileges $table-name	el nombre de la tabla o vista
function db2 column privileges $schema	el esquema que contiene la tabla indicada
function db2 column privileges $column-name	el nombre de la columna
function resource db2 column privileges	devuelve una lista de registros que describen los permisos de las columnas especificadas a través de los parámetros entregados a la función
function resource db2 column privileges resource $connection string $qualifier string $schema string $table-name string $column-name	obtiene la lista de columnas y permisos asociados a una tabla
function db2 columns $qualifier	un calificador para bases de datos db2 que se ejecutan en servidores os / 390 o z / os
function db2 columns $connection	una conexión a ibm db2 cloudscape o apache derby
function db2 columns $table-name	el nombre de la tabla o vista
function db2 columns $schema	el esquema que contiene la tabla indicada
function db2 columns $column-name	el nombre del campo
function resource db2 columns	devuelve información de los campos especificados a través de los parámetros de la función
function resource db2 columns resource $connection string $qualifier string $schema string $table-name string $column-name	devuelve los campos de una tabla y sus metadatos asociados
function db2 commit $connection	es la conexión válida devuelta por db2_connect() o db2_pconnect()
function bool db2 commit	devuelve true en caso de éxito o false en caso de error
function bool db2 commit resource $connection	confirmar una transacci&oacute;n
function db2 conn error $connection	es la conexión que se inició correctamente pero que en algún momento dejó de ser válida
function string db2 conn error	devuelve el valor sqlstate que resultó de un intento de conexión fallido
function string db2 conn error resource $connection	devolver una cadena que contenga el valor sqlstate devuelto por el &uacute;ltimo intento de conexi&oacute;n
function db2 conn errormsg $connection	un recurso de conexión asociado a la conexión que inicialmente fue exitosa pero que en algún momento llego a ser inválida
function string db2 conn errormsg	devuelve una cadena que contiene el mensaje de error y el valor sqlcode derivados de un intento de conexión fallido
function string db2 conn errormsg resource $connection	devolver el &uacute;ltimo mensaje de error de la conexi&oacute;n y su valor sqlcode
function db2 connect $i5_date_sep	db2_i5_sep_slash - se utiliza una diagonal / como separador de fechas
function db2 connect $options	un arreglo asociativo de opciones que afectan el comportamiento de la conexión entre las claves válidas están: autocommit si se pasa el valor db2_autocommit_on se confirmarán automáticamente las transacciones de la conexión
function db2 connect $DB2_ATTR_CASE	si se pasa el valor db2_case_natural los nombres de las columnas serán devueltos con sus mayúsculas y minúsculas originales
function db2 connect $database	el nombre de la base de datos
function db2 connect $username	el usuario con el que se conecta a la base de datos
function db2 connect $i5_decimal_sep	db2_i5_sep_period - se utiliza un punto
function db2 connect $hostname	el host o la ip del servidor de la base de datos
function db2 connect $i5_query_optimize	db2_first_io - todas las consultas son optimazadas con el objetivo de devolver la primera página de resultados lo más rápido posible
function db2 connect $i5_commit	se recomienda establecer el parámetro i5_commit antes que db2_pconnect()
function db2 connect $database	el alias de la base de datos en al catálogo del cliente db2
function db2 connect $i5_time_fmt	db2_i5_fmt_iso - se utiliza el formato de tiempo estandar iso hh
function db2 connect $i5_date_fmt	db2_i5_fmt_iso - se utiliza el formato de fechas estandar iso yyyy-mm-dd
function db2 connect $i5_dbcs_alloc	db2_i5_dbcs_alloc_on habilita el esquema de alojamiento db2 6x para incremento de tamaño en columnas de traducción dbcs
function db2 connect $autocommit	si se pasa el valor db2_autocommit_on se confirmarán automáticamente las transacciones de la conexión
function db2 connect $password	la contraseña con la que se conecta a la base de datos
function db2 connect $i5_time_sep	db2_i5_sep_colon - se utiliza el signo de dos puntos : como separador de tiempo
function db2 connect $port	el puerto tcp / ip sobre el cual la base de datos está escuchando solicitudes
function db2 connect $i5_lib	una cadena que indica la lista de bibliotecas que se utilizará por default para resolver referencias no evaluadas a archivos
function db2 connect $i5_naming	db2_i5_naming_on habilita el modo de nombrado de sistema db2 udb cli iseries
function db2 connect $i5_libl	un cadena que indica la lista de bibliotecas que se utilizará para resolver referencias no evaluadas a archivos
function db2 connect $trustedcontext	si se pasa el valor db2_trusted_context_enable se establece una conexión de confianza
function db2 connect $CURSOR	si se pasa el valor db2_forward_only se establece un cursor de no-recorrido sólo hacia adelante
function resource db2 connect	devuelve un recurso de conexión si el intento de conexión es exitoso
function resource db2 connect string $database string $username string $password array $options	devolver una conexi&oacute;n a la base de datos
function db2 cursor type $stmt	un recurso de sentencia válido
function int db2 cursor type	devuelve db2_forward_only si la consulta utiliza un cursor de tipo forward-only sin recorrido o db2_scrollable si utiliza un cursor de tipo scrollable con recorrido
function int db2 cursor type resource $stmt	determinar el tipo de cursor utilizado en una consulta
function db2 escape string $string_literal	la cadena que contiene los caracteres especiales y que necesita ser escapada
function string db2 escape string	devuelve string_literal con todos los caracteres especiales ya escapados
function string db2 escape string string $string_literal	escapar ciertos caracteres especiales
function db2 exec $statement	una sentencia sql
function db2 exec $connection	una conexión válida a la base de datos devuelta por db2_connect() o db2_pconnect()
function db2 exec $options	un arreglo asociativo que contiene opciones para la sentencia
function resource db2 exec	devuelve un recurso de sentencia si la sentencia sql fue ejecutada correctamente o false si hubo un error al ejecutar la sentencia sql
function resource db2 exec resource $connection string $statement array $options	ejecutar directamente una sentencia sql
function db2 fetch array $stmt	un resurso stmt válido que contenga el resultado de la consulta
function db2 fetch array $row_number	extrae una fila específica del bloque de resultados indexada a partir de uno
function array db2 fetch array	devuelve un arreglo indexado a partir de cero de acuerdo a la posición de la columna que representa la fila solicitada en un bloque de resultados
function array db2 fetch array resource $stmt int $row_number	devolver un arreglo indexado por la posici&oacute;n de las columnas que represanta una fila de un bloque de resultados
function db2 fetch object $stmt	un recurso stmt válido que contenga el bloque de resultados
function db2 fetch object $row_number	solicita una fila específica indexada a partir de uno del bloque de resultados
function object db2 fetch object	devuelve un objeto que representa una fila del bloque de resultados
function object db2 fetch object resource $stmt int $row_number	devolver un objeto con atributos que representan a las columnas de una fila extraida
function db2 field display size $stmt	especifica un recurso válido que contiene los resultados
function db2 field display size $column	especifica la columna del resultado
function int db2 field display size	devuelve un valor entero con el número máximo de bytes requeridos para mostrar una columna específica
function int db2 field display size resource $stmt mixed $column	devolver el n&uacute;mero m&aacute;ximo de bytes requeridos para mostrar una columna
function db2 field name $column	especifica la columna en el resultado
function db2 field name $stmt	especifica un recurso válido que contiene los resultados
function string db2 field name	devuelve una cadena con el nombre de la columna especificada
function string db2 field name resource $stmt mixed $column	devolver el nombre de la columna indicada del resultado
function db2 field precision $column	especifica la columna en el resultado
function db2 field precision $stmt	especifica un recurso válido que contiene los resultados
function int db2 field precision	devuelve un entero que contiene la precisión de la columna especificada
function int db2 field precision resource $stmt mixed $column	devolver la precisi&oacute;n de la columna indicada en el resultado
function db2 field scale $column	especifica la columna en el resultado
function db2 field scale $stmt	especifica un recurso válido que contiene el resultado
function int db2 field scale	devuelve un entero que contiene la escala de la columna especificada
function int db2 field scale resource $stmt mixed $column	devolver la escala de la columna indicada en el resultado
function db2 field type $stmt	especifica un recurso válido que contenga los resultados
function db2 field type $column	especifica la columna en el resultado
function string db2 field type	devuelve una cadena que contiene el tipo de dato de la columna especificada
function string db2 field type resource $stmt mixed $column	devolver el tipo de dato de la columna indicada en un resultado
function db2 foreign keys $connection	una conexión válida a una base de datos ibm db2 cloudscape o apache derby
function db2 foreign keys $table-name	el nombre de la tabla
function db2 foreign keys $schema	el esquema que contiene las tablas
function db2 foreign keys $qualifier	un indice para bases de datos en db2 ejecutándose en servidores os / 390 o z / os
function resource db2 foreign keys	devuelve un recurso con el resultado que contiene las filas con la información de las llaves foraneas de la tabla especificada
function resource db2 foreign keys resource $connection string $qualifier string $schema string $table-name	devolver un resultado que contenga las llaves foraneas de una tabla
function db2 free result $stmt	un recurso válido
function bool db2 free result	devuelve true en caso de éxito o false en caso de error
function bool db2 free result resource $stmt	liberar los recursos asociados con un resultado
function db2 free stmt $stmt	un recurso de sentencias válido
function bool db2 free stmt	devuelve true en caso de éxito o false en caso de error
function bool db2 free stmt resource $stmt	liberar un recurso indicado
function db2 get option $option	opciones válidas para la sentencia o conexión
function db2 get option $resource	un recurso válido devuelto por db2_prepare() o devuelto por db2_connect() o db2_pconnect()
function db2 get option $wrkstnname	sql_attr_info_wrkstnname - un apuntador a una cadena utilizada para identificar el nombre de la estación de trabajo del cliente enviado al host cuando se conecta al servidor usando db2_connect()
function db2 get option $userid	sql_attr_info_userid - un apuntador a una cadena que representa el identificador del cliente enviado al servidor cuando se conecta al servidor usando db2_connect()
function db2 get option $acctstr	sql_attr_info_acctstr - un apuntador a una cadena utilizada para identificar la cuenta del cliente enviada al host cuando se conecta al servidor usando db2_connect()
function db2 get option $applname	sql_attr_info_applname - un apuntador a una cadena utilizada para identificar el nombre de la aplicación del cliente enviado al host cuando se conecta al servidor usando db2_connect()
function string db2 get option	devuelve la configuración actual del atributo especificado en la conexión en caso de éxito o false en caso de error
function string db2 get option resource $resource string $option	devolver el valor de la opci&oacute;n correpondiente a una conexi&oacute;n o sentencia
function db2 last insert id $resource	una conexión válida devuelta por db2_connect() o db2_pconnect()
function string db2 last insert id	devuelve el id autogenerado de la última sentencia insert que se ejecutó correctamente en esta conexión
function string db2 last insert id resource $resource	devolver el id autogenerado el la &uacute;ltima sentencia insert ejecutada correctamente en la conexi&oacute;n
function db2 lob read $colnum	un número de columna válido en el resultado del recurso stmt
function db2 lob read $stmt	un recurso stmt válido que contenga datos lob
function db2 lob read $length	el tamaño del segmento de datos lob que se va a extraer del recurso stmt
function string db2 lob read	devuelve la cantidad de datos que el usuario especifica
function string db2 lob read resource $stmt int $colnum int $length	obtener un segmento de tama&ntilde;o definido por el usuario de un archivo lob
function db2 num fields $stmt	un recurso válido que contenga el resultado
function int db2 num fields	devuelve un valor entero que representa el número de campos de un resultado asociado con el recurso especificado
function int db2 num fields resource $stmt	devolver el n&uacute;mero de campos que contiene un resultado
function db2 num rows $stmt	un recurso stmt válido que contenga el resultado
function int db2 num rows	devuelve el número de filas afectadas por la última sentencia sql asociada con el recurso indicado
function int db2 num rows resource $stmt	devolver el n&uacute;mero de filas afectadas por una sentencia sql
function db2 pclose $connection	especifica una conexión cliente activa de db2
function bool db2 pclose	devuelve true en caso de éxito o false en caso de error
function bool db2 pclose resource $resource	cerrar una conexi&oacute;n persistente a la base de datos
function db2 pconnect $i5_date_sep	db2_i5_sep_slash - se utiliza una diagonal / como separador de fechas
function db2 pconnect $i5_dbcs_alloc	db2_i5_dbcs_alloc_on habilita el esquema de alojamiento db2 6x para incremento de tamaño en columnas de traducción dbcs
function db2 pconnect $password	la contraseña con la que se conecta a la base de datos
function db2 pconnect $i5_time_sep	db2_i5_sep_colon - se utiliza el signo de dos puntos : como separador de tiempo
function db2 pconnect $options	un arreglo asociativo de opciones que afectan el comportamiento de la conexión entre las claves válidas están: autocommit si se pasa el valor db2_autocommit_on se confirmarán automáticamente las transacciones de la conexión
function db2 pconnect $username	el usuario con el se conecta a la base de datos
function db2 pconnect $autocommit	si se pasa el valor db2_autocommit_on se confirmarán automáticamente las transacciones de la conexión
function db2 pconnect $i5_lib	una cadena que indica la lista de bibliotecas que se utilizará por default para resolver referencias no evaluadas a archivos
function db2 pconnect $i5_naming	db2_i5_naming_on habilita el modo de nombrado de sistema db2 udb cli iseries
function db2 pconnect $i5_commit	se recomienda establecer el parámetro i5_commit antes que db2_pconnect()
function db2 pconnect $DB2_ATTR_CASE	si se pasa el valor db2_case_natural los nombres de las columnas serán devueltos con sus mayúsculas y minúsculas originales
function db2 pconnect $i5_query_optimize	db2_first_io - todas las consultas son optimazadas con el objetivo de devolver la primera página de resultados lo más rápido posible
function db2 pconnect $trustedcontext	si se pasa el valor db2_trusted_context_enable se establece una conexión de confianza
function db2 pconnect $i5_time_fmt	db2_i5_fmt_iso - se utiliza el formato de tiempo estandar iso hh
function db2 pconnect $i5_libl	un cadena que indica la lista de bibliotecas que se utilizará para resolver referencias no evaluadas a archivos
function db2 pconnect $CURSOR	si se pasa el valor db2_forward_only se establece un cursor de no-recorrido sólo hacia adelante
function db2 pconnect $i5_decimal_sep	db2_i5_sep_period - se utiliza un punto
function db2 pconnect $database	el álias de la base de datos en al catálogo del cliente db2
function db2 pconnect $i5_date_fmt	db2_i5_fmt_iso - se utiliza el formato de fechas estandar iso yyyy-mm-dd
function resource db2 pconnect	devuelve un recurso de conexión si el intento de conexión es exitoso
function resource db2 pconnect string $database string $username string $password array $options	devolver una conexi&oacute;n persistente a la base de datos
function db2 prepare $connection	una variable de conexión obtenida con db2_connect() o con db2_pconnect()
function db2 prepare $statement	un comando sql que puede contener opcionalmente uno o más marcadores de parámetros
function db2 prepare $options	un arreglo asociativo que contiene opciones para el comando
function resource db2 prepare	si el comando sql fue parseado y preparado exitosamente devuelve un resource o false en caso de producirse un error
function resource db2 prepare resource $connection string $statement array $options	prepara un comando sql para su ejecuci&oacute;n
function db2 primary keys $qualifier	un índice para bases de datos db2 ejecutándose en servidores os / 390 o z / os
function db2 primary keys $table-name	el nombre de la tabla
function db2 primary keys $connection	una conexión válida a la base de datos ibm db2 cloudscape o apache derby
function db2 primary keys $schema	el esquema que contiene las tablas
function resource db2 primary keys	devuelve un recurso de sentencia con el resultado que contiene las llaves primarias de la tabla especificada
function resource db2 primary keys resource $connection string $qualifier string $schema string $table-name	devolver un resultado con las llaves primarias de una tabla
function db2 procedure columns $connection	una conexión válida a una base de datos ibm db2 cloudscape o apache derby
function db2 procedure columns $parameter	el nombre del parámetro
function db2 procedure columns $schema	el esquema que contiene los procedimientos
function db2 procedure columns $procedure	el nombre del procedimiento
function db2 procedure columns $qualifier	un calificador para bases de datos ejecutándose en servidores os / 390 o z / os
function resource db2 procedure columns	devuelve un recurso de sentencia con un bloque de resultados que contienen los parámetros de los procedimientos almacenados que coinciden con los criterios de búsqueda
function resource db2 procedure columns resource $connection string $qualifier string $schema string $procedure string $parameter	devolver un resultado con los par&aacute;metros de los procedimientos almacenados
function db2 procedures $connection	una conexión válida a una base de datos ibm db2 cloudscape o apache derby
function db2 procedures $procedure	el nombre del procedimiento
function db2 procedures $qualifier	un calificador para bases de datos db2 ejecutándose sobre servidores os / 390 o z / os
function db2 procedures $schema	el esquema que contiene los procedimientos
function resource db2 procedures	devuelve un recurso de sentencia con un resultado que contiene las filas que representan a los procedimientos almacenados que coinciden con el criterio de búsqueda
function resource db2 procedures resource $connection string $qualifier string $schema string $procedure	devolver un resultado con los procedimientos almacenados registrados en la base de datos
function db2 result $column	tanto un entero que representa el campo del resultado indexado a partir de cero como una cadena con el nombre de la columna
function db2 result $stmt	un recurso stmt válido
function mixed db2 result	devuelve el valor del campo solicitado si el campo existe en el resultado
function mixed db2 result resource $stmt mixed $column	devolver una columna espec&iacute;fica del resultado
function db2 rollback $connection	un recurso de conexión válido devuelto por db2_connect() o db2_pconnect()
function bool db2 rollback	devuelve true en caso de éxito o false en caso de error
function bool db2 rollback resource $connection	cancelar una transacci&oacute;n
function dba close $handle	el gestor de base de datos devuelto por dba_open() o dba_popen()
function void dba close resource $handle	cerrar una base de datos dba
function dba delete $key	la clave de la entrada que está siendo eliminada
function dba delete $gestor	el gestor de base de datos devuelto por dba_open() o dba_popen()
function bool dba delete	devuelve true en caso de éxito o false en caso de error
function bool dba delete string $key resource $handle	elimina una entrada dba especificada por clave
function dba fetch $key	la clave que apunta a los datos
function dba fetch $gestor	el gestor de base de datos devuelto por dba_open() o dba_popen()
function dba fetch $skip	el número de parejas clave-valor a ignorar cuando se usan bases de datos cdb
function string dba fetch	devuelve la cadena asociada si la pareja clave / datos es encontrada false de lo contrario
function string dba fetch string $key resource $handle	recuperar datos especificados por clave
function dba firstkey $handle	el gestor de base de datos devuelto por dba_open() o dba_popen()
function string dba firstkey	devuelve la clave en caso de tener éxito o false en caso de error
function string dba firstkey resource $handle	recuperar la primera clave
function dba handlers $full_info	activa / desactiva la mostración de la información completa en el resultado
function array dba handlers	devuelve un array de gestores de bases de datos
function array dba handlers bool $full_info	listar todos los gestores disponibles
function dba insert $key	la clave de la entrada a ser insertada
function dba insert $value	el valor a ser insertado
function dba insert $handle	el gestor de base de datos devuelto por dba_open() o dba_popen()
function bool dba insert	devuelve true en caso de éxito o false en caso de error
function bool dba insert string $key string $value resource $handle	insertar entrada
function dba key split $key	la clave en representación de cadena
function mixed dba key split	devuelve un array de la forma array( 0 = > grupo 1 = > nombre_valor
function mixed dba key split mixed $key	separa una clave en representaci&oacute;n de cadena en representaci&oacute;n de array
function array dba list	un array asociativo en la forma id_recurso = > nombre_archivo
function array dba list	listar todos los archivos de base de datos abiertos
function dba optimize $handle	el gestor de base de datos devuelto por dba_open() o dba_popen()
function bool dba optimize	devuelve true en caso de éxito o false en caso de error
function bool dba optimize resource $handle	optimizar base de datos
function dba popen $mode	es r para acceso de lectura w para acceso de lectura / escritura a una base de datos existente c para acceso de lectura / escritura y creación de base de datos si no existe actualmente y n para crear truncar y tener acceso de lectura / escritura
function dba popen $path	usualmente una ruta normal en su sistema de archivos
function dba popen $handler	el nombre del gestor que será usado para acceder a path
function resource dba popen	devuelve un gestor positivo en caso de éxito o o false en caso de error
function resource dba popen string $path string $mode string $handler	abrir una base de datos de forma persistente
function dba replace $value	el valor a ser reemplazado
function dba replace $key	la clave de la entrada a ser reemplazada
function dba replace $handle	el gestor de base de datos devuelto por dba_open() o dba_popen()
function bool dba replace	devuelve true en caso de éxito o false en caso de error
function bool dba replace string $key string $value resource $handle	reemplazar o insertar una entrada
function dba sync $handle	el gestor de base de datos devuelto por dba_open() o dba_popen()
function bool dba sync	devuelve true en caso de éxito o false en caso de error
function bool dba sync resource $handle	sincronizar base de datos
function dbase add record $dbase_identifier	el identificador de enlace de la base de datos devuelto por dbase_open() o dbase_create()
function dbase add record $record	una matriz indexada de información
function bool dbase add record	devuelve true en caso de éxito o false en caso de error
function bool dbase add record int $dbase_identifier array $record	a&ntilde;ade un registro a una base de datos
function dbase delete record $record_number	un entero que abarca desde 1 al número de registros de la base de datos como el devuelto por dbase_numrecords()
function dbase delete record $dbase_identifier	el identificador de enlace de la base de datos devuelto por dbase_open() o dbase_create()
function bool dbase delete record	devuelve true en caso de éxito o false en caso de error
function bool dbase delete record int $dbase_identifier int $record_number	borra un registro de una base de datos
function dbase get record $record_number	el índice del registro
function dbase get record $dbase_identifier	el identificador de enlace de la base de datos devuelto por dbase_open() o dbase_create()
function array dbase get record	una matriz indexada con el registro
function array dbase get record int $dbase_identifier int $record_number	obtiene un registro de una base de datos como una matriz indexada
function dbase numfields $dbase_identifier	el identificador de enlace de la base de datos devuelto por dbase_open() o dbase_create()
function int dbase numfields	el número de campos de la base de datos o false si ocurrió un error
function int dbase numfields int $dbase_identifier	obtiene el n&uacute;mero de campos de una base de datos
function dbase numrecords $dbase_identifier	el identificador de enlace de la base de datos devuelto por dbase_open() o dbase_create()
function int dbase numrecords	el número de registros de la base de datos o false si ocurrió un error
function int dbase numrecords int $dbase_identifier	obtener el n&uacute;mero de registros de una base de datos
function dbase open $mode	un entero que se corresponde a aquéllos de la llamada al sistema de open() normalmente 0 significa sólo lectura 1 sólo escritura y 2 lectura y escritura
function dbase open $filename	el nombre de la base de datos
function int dbase open	devuelve un identificador de enlace de la base de datos si ésta se abrió con éxito o false si ocurrió un error
function int dbase open string $filename int $mode	abre una base de datos
function dbase replace record $record	ina matriz indexada de información
function dbase replace record $record_number	un entero que abarca desde 1 hasta el número de registros de la base de datos como el devuelto por dbase_numrecords()
function dbase replace record $dbase_identifier	el identificador de enlace de la base de datos devuelto por dbase_open() o dbase_create()
function bool dbase replace record	devuelve true en caso de éxito o false en caso de error
function bool dbase replace record int $dbase_identifier array $record int $record_number	reemplaza un registro en una base de datos
function dbplus add $tuple	una matriz de pares atributo / valor que se va a insertar en la relación relation dada
function int dbplus add	la función devolverá dbplus_err_noerr si se tuvo éxito o un código de error de db++ si falló
function int dbplus add resource $relation array $tuple	a&ntilde;ade una tupla a una relaci&oacute;n
function dbplus aql $query	la consulta aql a ejecutar
function resource dbplus aql	devuelve un gestor de relación si se tuvo éxito
function resource dbplus aql string $query string $server string $dbpath	realizar una consulta aql
function dbplus chdir $newdir	el nuevo directorio para los archivos de relaciones
function string dbplus chdir	devuelve la ruta absoluta del directorio actual
function string dbplus chdir string $newdir	obtener / estabecer el directorio virtual actual de la base de datos
function dbplus close $relation	una relación abierta mediante dbplus_open()
function mixed dbplus close	devuelve true si se tuvo éxito o dbplus_err_unknown si falló
function mixed dbplus close resource $relation	cierra una relaci&oacute;n
function dbplus curr $tuple	la información será devuelta a este parámetro como una matriz asociativa
function dbplus curr $relation	una relación abierta con dbplus_open()
function int dbplus curr	la función devolverá cero es decir dbplus_err_noerr si se tuvo éxito o un código de error de db++ si falló
function int dbplus curr resource $relation array $tuple	get current tuple from relation
function dbplus errcode $errno	el código de error
function string dbplus errcode	devuelve el mensaje de error
function string dbplus errcode int $errno	obtener la cadena de error de un c&oacute;digo de error dado o del &uacute;ltimo error
function int dbplus errno	devuelve el código de error como un entero
function int dbplus errno	obtener el c&oacute;digo de error de la &uacute;ltima operaci&oacute;n
function dbplus find $relation	una relación abierta por dbplus_open()
function dbplus find $constraints	las restricciones son tríos de cadenas de contienen un nombre de dominio un operador de comparación y un valor de comparación
function int dbplus find resource $relation array $constraints mixed $tuple	establecer una restricci&oacute;n en una relaci&oacute;n
function dbplus first $relation	una relación abierta mediante dbplus_open()
function int dbplus first	devuelve dbplus_err_noerr si se tuvo éxito o un código de error de db++ si falló
function int dbplus first resource $relation array $tuple	obtener la primera tupla de una relaci&oacute;n
function int dbplus freealllocks	liberar todos los bloqueos mantenidos por este cliente
function dbplus freelock $relation	una relación abierta con dbplus_open()
function int dbplus freelock resource $relation string $tuple	libera el bloqueo de escritura en una tupla
function dbplus getlock $relation	una relación abierta con dbplus_open()
function int dbplus getlock	devuelve cero si se tuvo éxito o un código de error distinto de cero especialmente dbplus_err_wlocked si falló
function int dbplus getlock resource $relation string $tuple	obtener un bloqueo de escritura en una tupla
function dbplus getunique $relation	una relación abierta con dbplus_open()
function int dbplus getunique	devuelve dbplus_err_noerr si se tuvo éxito o un código de error de db++ si falló
function int dbplus getunique resource $relation int $uniqueid	obtener un &uacute;nico n&uacute;mero de identificaci&oacute;n para una relaci&oacute;n
function dbplus last $relation	una relación abierta con dbplus_open()
function int dbplus last	devuelve dbplus_err_noerr si se tuvo éxito o un código de error de db++ si falló
function int dbplus last resource $relation array $tuple	obtener la &uacute;ltima tupla de una relaci&oacute;n
function dbplus lockrel $relation	una relación abierta con dbplus_open()
function int dbplus lockrel resource $relation	solictar un bloqueo de escritura en una relaci&oacute;n
function dbplus open $name	puede ser un nombre de archivo o un nombre de ruta absoluta o relativa
function resource dbplus open	si se tuvo éxito se devuelve un recurso de archivo de relación cursor que debe ser usado en cualquier comando subsiguiente que referencie a la relación
function resource dbplus open string $name	abre un archivo de relaci&oacute;n
function dbplus prev $relation	una relación abierta con dbplus_open()
function int dbplus prev	devuelve dbplus_err_noerr si se tuvo éxito o un código de error de db++ si falló
function int dbplus prev resource $relation array $tuple	obtener la tupla previa de una relaci&oacute;n
function dbplus rchperm $relation	una relación abierta con dbplus_open()
function int dbplus rchperm resource $relation int $mask string $user string $group	cambiar los permisos de una relaci&oacute;n
function dbplus rcreate $domlist	una combinación de dominios
function resource dbplus rcreate string $name mixed $domlist bool $overwrite	crea una nueva relaci&oacute;n de db++
function dbplus rcrtlike $overwrite	una relación existente con el mismo nombre dado por name sólo será sobrescirta si este parámetro está establecido a true y ningún otro proceso está actualmente usando la relación
function dbplus rcrtlike $relation	la relación copiada abierta mediante dbplus_open()
function mixed dbplus rcrtlike	devuelve un recurso si se tuvo éxito o dbplus_err_unknown si falló
function mixed dbplus rcrtlike string $name resource $relation int $overwrite	crea una copia vac&iacute;a de una relaci&oacute;n con los &iacute;ndeces predeterminados
function dbplus resolve $relation_name	el nombre de la relación
function array dbplus resolve	devuelve una matriz que contiene estos valores bajo las claves sid host y host_path o false si ocurrió un error
function array dbplus resolve string $relation_name	resuelve la informaci&oacute;n del host de la relaci&oacute;n
function resource dbplus rquery string $query string $dbpath	realizar una consulta aql local en bruto
function dbplus rrename $relation	una relación abierta con dbplus_open()
function int dbplus rrename resource $relation string $name	renombrar una relaci&oacute;n
function dbplus rsecindex $domlist	una combinación de dominios
function dbplus rsecindex $relation	una relación abierta con dbplus_open()
function mixed dbplus rsecindex	devuelve un recurso si tuvo éxito o dbplus_err_unknown si falló
function mixed dbplus rsecindex resource $relation mixed $domlist int $type	crear un nuevo &iacute;ndice secundario para una relaci&oacute;n
function dbplus runlink $relation	una relación abierta con dbplus_open()
function int dbplus runlink resource $relation	eliminar una relaci&oacute;n del sistema de archivos
function string dbplus tcl int $sid string $script	ejecutar c&oacute;digo tcl en el lado del servidor
function dbplus tremove $relation	una relación abierta con dbplus_open()
function int dbplus tremove resource $relation array $tuple array $current	eliminar una tupla y devolver la nueva tupla actual
function dbplus update $new	la nueva tupla
function dbplus update $old	la tupla antigua
function dbplus update $relation	una relación abierta con dbplus_open()
function int dbplus update resource $relation array $old array $new	actualizar la tupla especificada en la relaci&oacute;n
function dbplus xlockrel $relation	una relación abierta con dbplus_open()
function int dbplus xlockrel resource $relation	solicitar un bloqueo exclusivo de una relaci&oacute;n
function dbplus xunlockrel $relation	una relación abierta con dbplus_open()
function int dbplus xunlockrel resource $relation	liberar un bloqueo exclusivo en una relaci&oacute;n
function dbx compare $row_b	sgunda fila
function dbx compare $column_key	la columna comparada
function dbx compare $row_a	primera fila
function int dbx compare	devuelve 0 si row_a[$column_key] es igual a row_b[$column_key] y 1 o -1 si el primero es mayor o menor que el segundo respectivamente o vice versa si flag está establacido a dbx_cmp_desc
function int dbx compare array $row_a array $row_b string $column_key int $flags	comparar dos filas con prop&oacute;sitos de ordenaci&oacute;n
function dbx connect $host	el host servidor de sql
function dbx connect $module	el parámetro module puede ser una cadena o una constante aunque se prefiere la segunda forma
function dbx connect $persistent	el parámetro persistent puede ser establecido a dbx_persistent si es así se creará una conexión persistente
function dbx connect $username	el nombre de usuario
function dbx connect $password	la contraseña
function dbx connect $database	el nombre de la base de datos
function object dbx connect	devuelve un objeto si se tuvo éxito false si ocurrió un error
function object dbx connect mixed $module string $host string $database string $username string $password int $persistent	abrir una conexi&oacute;n / base de datos
function dbx error $link_identifier	el objeto de enlace de dbx devuelto por dbx_connect()
function string dbx error	devuelve una cadena que contiene el mensaje de error de la última llamada a la función del módulo abstracto p
function string dbx error object $link_identifier	reporta un mensaje de error de la &uacute;ltima llamada a la funci&oacute;n en el m&oacute;dulo
function dbx escape string $text	la cadena a escapar
function dbx escape string $link_identifier	el objeto de enlace de dbx devuelto por dbx_connect()
function string dbx escape string	devuelve el texto escapado cuando sea necesario tal como comillas barras invertidas etc
function string dbx escape string object $link_identifier string $text	escapar una cadena para que pueda ser usada de forma segura en una declaraci&oacute;n sql
function dbx query $DBX_RESULT_ASSOC	consigue que los valores de campos se puedan acceder con los respectivos nombres de columnas usados como claves a la propiedad data del objeto devuelto
function dbx query $DBX_COLNAMES_UNCHANGED	el caso de los nombres de columnas devueltos no serán cambiados
function dbx query $sql_statement	declaración sql
function dbx query $flags	el parámetro flags se usa para controlar la cantidad de niformación que es devuelta
function dbx query $DBX_COLNAMES_LOWERCASE	el caso de los nombres de columnas devueltos serán cambiados a minúsculas
function dbx query $DBX_RESULT_INFO	proporciona información acerca de las columnas como los nombres y tipos de campos
function dbx query $DBX_RESULT_UNBUFFERED	esta bandera no creará la propiedad data y la propiedad rows será inicialmente 0
function dbx query $DBX_COLNAMES_UPPERCASE	el caso de los nombres de columnas devueltos serán cambiados a mayúsculas
function dbx query $link_identifier	el objeto de enlace de dbx devuelto por dbx_connect()
function dbx query $DBX_RESULT_INDEX	es siempre establecida es decir el objeto devuelto tiene la propiedad data que es una matriz de 2 dimensiones indexada numéricamente
function mixed dbx query	dbx_query() devuelve un objeto o 1 si se tuvo éxtio y 0 si falló
function mixed dbx query object $link_identifier string $sql_statement int $flags	enviar una consulta y traer todos los resultado si hubo alguno
function dbx sort $user_compare_function	la función de comparación definida por el usuario
function dbx sort $result	un conjunto de resultados devueltos por dbx_query()
function bool dbx sort	devuelve true en caso de éxito o false en caso de error
function bool dbx sort object $result string $user_compare_function	ordenar un resultado de una llamada a dbx_query mediante una funci&oacute;n de ordenaci&oacute;n personalizada
function dcgettext $category	la categoría
function dcgettext $domain	el dominio
function dcgettext $message	el mesanje
function string dcgettext	un string si es correcto
function string dcgettext string $domain string $message int $category	sobrescribe el dominio de la b&uacute;squeda &uacute;nica del mensaje
function debug print backtrace $limit	desde 5
function debug print backtrace $options	desde 5
function void debug print backtrace int $options int $limit	muestra un rastreo
function debug zval dump $variable	la variable a ser evaluada
function void debug zval dump mixed $variable	vuelca a la salida una cadena con la representaci&oacute;n de un valor interno de zend
function decbin $number	valor decimal a convertir rango de entradas en máquinas de 32-bit number positivo number negativo valor de retorno 0 &nbsp; 0 1 &nbsp; 1 2 &nbsp; 10
function string decbin	cadena de la representación binaria de number
function string decbin int $number	decimal a binario
function dechex $number	valor decimal a convertir
function string dechex	representación tipo cadena hexadecimal de number
function string dechex int $number	decimal a hexadecimal
function define $case_insensitive	si está establecido a true la constante será definida insensible a mayúsculas-minúsculas
function define $name	el nombre de la constante
function define $value	el valor de la constante
function bool define	devuelve true en caso de éxito o false en caso de error
function bool define string $name mixed $value bool $case_insensitive	define una constante con nombre
function dgettext $domain	el dominio
function dgettext $message	el mensaje
function string dgettext	un string si es correcto
function string dgettext string $domain string $message	sobrescribe el dominio actual
function dio close $fd	descriptor de fichero devuelto por dio_open()
function void dio close resource $fd	cierra el descriptor de fichero fd
function dio fcntl $fd	descriptor de fichero devuelto por dio_open()
function dio fcntl $cmd	puede ser una de las siguientes operaciones: f_setlk - se asigna o quita el bloqueo
function dio fcntl $args	args es un array asociativo cuando cmd sea f_setlk o f_setllw con las siguientes claves: start - posición donde comienza el bloqueo length - tamaño del area bloqueada
function mixed dio fcntl	devuelve el resultado de la llamada a c
function mixed dio fcntl resource $fd int $cmd mixed $args	lleva a cabo la funci&oacute;n fcntl de la biblioteca c en el fichero fd
function dio open $flags	el parámetro flags es una máscara or de bits compuesta a partir de las siguientes banderas
function dio open $filename	ruta del fichero a abrir
function dio open $modo	si flags contiene o_creat mode establecerá los permisos del ficher permisos de creación
function resource dio open	descriptor de fichero o false en caso de error
function resource dio open string $filename int $flags int $mode	abre crea si fuera necesario un fichero a un nivel m&aacute;s bajo que el permitido por flujos de entrada y salida de las bibliotecas en c
function dio read $len	el número de bytes a leer
function dio read $fd	el fichero descriptor devuelto por dio_open()
function string dio read	la bytes leídos desde fd
function string dio read resource $fd int $len	leer bytes de un descriptor de fichero
function dio seek $fd	descriptor de fichero devuelto por dio_open()
function dio seek $whence	indica cómo interpretar la posición pos : seek_set por omisión - indica que pos se contabiliza a partir del comienzo del fichero
function dio seek $pos	nueva posición
function int dio seek resource $fd int $pos int $whence	salta a una posici&oacute;n del descriptor de fichero desde donde proceda
function dio tcsetattr $fd	descriptor de fichero devuelto por dio_open()
function dio tcsetattr $options	las siguientes opciones están disponibles: baud - tasa de baudios del puerto - puede ser 38400 19200 9600 4800 2400 1800 1200 600 300 200 150 134 110 75 o 50 el valor por omisión es 9600
function bool dio tcsetattr resource $fd array $options	establece los atributos terminales y la tasa de baudios del puerto serie
function dio truncate $fd	descriptor de fichero devuelto por dio_open()
function dio truncate $offset	tamaño en bytes
function bool dio truncate	devuelve true en caso de éxito o false en caso de error
function bool dio truncate resource $fd int $offset	trunca un descriptor de fichero fd a un determinado n&uacute;mero de bytes
function dio write $fd	descriptor de fichero devuelto por dio_open()
function dio write $len	longitud en bytes de los datos a escribir
function dio write $data	datos a escribir
function int dio write	devuelve el número de bytes escritos en fd
function int dio write resource $fd string $data int $len	escribe datos en el descriptor de fichero con un truncado opcional
function dir $context	nota : soporte para context fue añadido en php 5
function dir $directory	directorio a abrir
function Directory dir	devuelve una instancia de la clase directory null cuando si los parámetros son incorrectos o false en caso de cualquier otro error
function Directory dir string $directory resource $context	devuelve una instancia de la clase directory
function dirname $path	una ruta
function dirname $levels	el número de directorios padre a subir
function string dirname	devuelve la ruta de un directorio padre
function string dirname string $path int $levels	devuelve la ruta de un directorio padre
function disk total space $directory	un directorio del sistema de archivos o partición de disco
function float disk total space	devuelve el número total de bytes como un float o false en caso de error
function float disk total space string $directory	devuelve el tama&ntilde;o total de un sistema de archivos o partici&oacute;n de disco
function dngettext $domain	el dominio
function string dngettext	un string si es correcto
function string dngettext string $domain string $msgid1 string $msgid2 int $n	versi&oacute;n plural de dgettext
function dom import simplexml $node	el nodo simplexmlelement
function DOMElement dom import simplexml	el nodo domelement añdido o false si ocurrió un error
function DOMElement dom import simplexml SimpleXMLElement $node	obtiene un objeto domelement desde un objeto simplexmlelement
function each $array	el array de entrada
function array each	devuelve el par clave / valor actual del array dado por array
function array each array $array	devolver el par clave / valor actual de un array y avanzar el cursor del array
function easter date $year	el año como un número entre 1970 y 2037
function int easter date	el domingo de pascua como fecha unix
function int easter date int $year	obtener la fecha unix para la medianoche de pascua de un a&ntilde;o dado
function easter days $year	el año como un número positivo
function easter days $method	permite calcular las fechas de pascua basadas en el calendario gregoriano durante los años 1582 - 1752 cuando se establece a cal_easter_roman
function int easter days	el número de días después del 21 de marzo en el que cae el domingo de pascua para el año year dado
function int easter days int $year int $method	obtener el n&uacute;mero de d&iacute;as desp&uacute;es del 21 de marzo en el cu&aacute;l cae pascua para un a&ntilde;o dado
function eio cancel $data	variable arbitraria pasada a callback
function eio cancel $data	son datos personalizados pasados a la petición
function eio cancel $callback	la función callback es llamada cuando la petición está hecha
function eio cancel $pri	la prioridad de petición: eio_pri_default eio_pri_min eio_pri_max o null
function eio cancel $req	e rescurso de petición
function eio cancel $result	es el valor del resultado específico de la petición; básicamente el valor devuelto por la correspondiente llamada al sistema
function eio cancel $req	es el recurso de petición opcional que puede usarse con funciones como eio_get_last_error()
function void eio cancel resource $req	cancelar una petici&oacute;n
function eio chmod $path	la ruta al fichero o directorio objetivo advertencia evita rutas relativas
function eio chmod $data	son datos personalizados pasados a la petición
function eio chmod $callback	la función callback es llamada cuando la petición está hecha
function eio chmod $pri	la prioridad de petición: eio_pri_default eio_pri_min eio_pri_max o null
function eio chmod $data	variable arbitraria pasada a callback
function eio chmod $mode	los nuevos permisos
function eio chmod $result	es el valor del resultado específico de la petición; básicamente el valor devuelto por la correspondiente llamada al sistema
function eio chmod $req	es el recurso de petición opcional que puede usarse con funciones como eio_get_last_error()
function resource eio chmod	eio_chmod() devuelve un recurso de petición en caso de éxito o false en caso de error
function resource eio chmod string $path int $mode int $pri callable $callback mixed $data	cambiar los permisos de fichero / directorio
function eio chown $path	la ruta al fichero o directorio
function eio chown $data	son datos personalizados pasados a la petición
function eio chown $uid	el id de usuario
function eio chown $callback	la función callback es llamada cuando la petición está hecha
function eio chown $pri	la prioridad de petición: eio_pri_default eio_pri_min eio_pri_max o null
function eio chown $gid	el id de grupo
function eio chown $data	variable arbitraria pasada a callback
function eio chown $result	es el valor del resultado específico de la petición; básicamente el valor devuelto por la correspondiente llamada al sistema
function eio chown $req	es el recurso de petición opcional que puede usarse con funciones como eio_get_last_error()
function resource eio chown	eio_chown() devuelve un recurso de petición en caso de éxito o false en caso de error
function resource eio chown string $path int $uid int $gid int $pri callable $callback mixed $data	cambiar los permisos de un fichero / directorio
function eio close $fd	un flujo un recurso socket o un descriptor numérico de fichero
function eio close $data	son datos personalizados pasados a la petición
function eio close $callback	la función callback es llamada cuando la petición está hecha
function eio close $pri	la prioridad de petición: eio_pri_default eio_pri_min eio_pri_max o null
function eio close $data	variable arbitraria pasada a callback
function eio close $result	es el valor del resultado específico de la petición; básicamente el valor devuelto por la correspondiente llamada al sistema
function eio close $req	es el recurso de petición opcional que puede usarse con funciones como eio_get_last_error()
function resource eio close	eio_close() devuelve un recurso de petición en caso de éxito o false en caso de error
function resource eio close mixed $fd int $pri callable $callback mixed $data	cerrar un fichero
function eio custom $data	variable arbitraria pasada a callback
function eio custom $data	son datos personalizados pasados a la petición
function eio custom $callback	la función callback es llamada cuando la petición está hecha
function eio custom $pri	la prioridad de petición: eio_pri_default eio_pri_min eio_pri_max o null
function eio custom $result	es el valor del resultado específico de la petición; básicamente el valor devuelto por la correspondiente llamada al sistema
function eio custom $req	es el recurso de petición opcional que puede usarse con funciones como eio_get_last_error()
function resource eio custom	eio_custom() devuelve un recurso de petición en caso de éxito o false en caso de error
function resource eio custom callable $execute int $pri callable $callback mixed $data	ejecutar una petici&oacute;n personalizada como cualquier otra llamada eio_*
function eio dup2 $data	son datos personalizados pasados a la petición
function eio dup2 $fd	un flujo un recurso socket o un descriptor de fichero numérico origen
function eio dup2 $pri	la prioridad de petición: eio_pri_default eio_pri_min eio_pri_max o null
function eio dup2 $callback	la función callback es llamada cuando la petición está hecha
function eio dup2 $fd2	un flujo un recurso socket o un descriptor de fichero numérico objetivo
function eio dup2 $data	variable arbitraria pasada a callback
function eio dup2 $result	es el valor del resultado específico de la petición; básicamente el valor devuelto por la correspondiente llamada al sistema
function eio dup2 $req	es el recurso de petición opcional que puede usarse con funciones como eio_get_last_error()
function resource eio dup2	eio_dup2() devuelve un recurso de petición en caso de éxito o false en caso de error
function resource eio dup2 mixed $fd mixed $fd2 int $pri callable $callback mixed $data	duplicar un descriptor de fichero
function eio fallocate $mode	actualmente sólo está soportada una bandera para el modo: eio_falloc_fl_keep_size lo mismo que la constante posix falloc_fl_keep_size
function eio fallocate $data	son datos personalizados pasados a la petición
function eio fallocate $callback	la función callback es llamada cuando la petición está hecha
function eio fallocate $pri	la prioridad de petición: eio_pri_default eio_pri_min eio_pri_max o null
function eio fallocate $offset	especifica el inicio del rango de bytes
function eio fallocate $data	variable arbitraria pasada a callback
function eio fallocate $fd	un flujo un recurso socket o un descriptor numérico de fichero p
function eio fallocate $result	es el valor del resultado específico de la petición; básicamente el valor devuelto por la correspondiente llamada al sistema
function eio fallocate $req	es el recurso de petición opcional que puede usarse con funciones como eio_get_last_error()
function eio fallocate $length	especifica la longitud del rango de bytes
function resource eio fallocate	eio_fallocate() devuelve un recurso de petición en caso de éxito o false en caso de error
function resource eio fallocate mixed $fd int $mode int $offset int $length int $pri callable $callback mixed $data	permitir al llamador manipular directamente el espacio de disco asignado a un fichero
function eio fchmod $data	son datos personalizados pasados a la petición
function eio fchmod $callback	la función callback es llamada cuando la petición está hecha
function eio fchmod $pri	la prioridad de petición: eio_pri_default eio_pri_min eio_pri_max o null
function eio fchmod $data	variable arbitraria pasada a callback
function eio fchmod $fd	un flujo un recurso socket o un descriptor numérico de fichero p
function eio fchmod $mode	los nuevos permisos
function eio fchmod $result	es el valor del resultado específico de la petición; básicamente el valor devuelto por la correspondiente llamada al sistema
function eio fchmod $req	es el recurso de petición opcional que puede usarse con funciones como eio_get_last_error()
function resource eio fchmod	eio_fchmod() devuelve un recurso de petición en caso de éxito o false en caso de error
function resource eio fchmod mixed $fd int $mode int $pri callable $callback mixed $data	cambiar los permisos de un fichero
function eio fchown $gid	el id de grupo
function eio fchown $fd	un flujo un recurso socket o un descriptor numérico de fichero
function eio fchown $data	son datos personalizados pasados a la petición
function eio fchown $callback	la función callback es llamada cuando la petición está hecha
function eio fchown $pri	la prioridad de petición: eio_pri_default eio_pri_min eio_pri_max o null
function eio fchown $uid	el id de ususario
function eio fchown $data	variable arbitraria pasada a callback
function eio fchown $result	es el valor del resultado específico de la petición; básicamente el valor devuelto por la correspondiente llamada al sistema
function eio fchown $req	es el recurso de petición opcional que puede usarse con funciones como eio_get_last_error()
function resource eio fchown mixed $fd int $uid int $gid int $pri callable $callback mixed $data	cambiar el propietario del fichero
function eio fdatasync $data	son datos personalizados pasados a la petición
function eio fdatasync $callback	la función callback es llamada cuando la petición está hecha
function eio fdatasync $pri	la prioridad de petición: eio_pri_default eio_pri_min eio_pri_max o null
function eio fdatasync $data	variable arbitraria pasada a callback
function eio fdatasync $fd	un flujo un recurso socket o un descriptor numérico de fichero p
function eio fdatasync $result	es el valor del resultado específico de la petición; básicamente el valor devuelto por la correspondiente llamada al sistema
function eio fdatasync $req	es el recurso de petición opcional que puede usarse con funciones como eio_get_last_error()
function resource eio fdatasync	eio_fdatasync() devuelve un recurso de petición en caso de éxito o false en caso de error
function resource eio fdatasync mixed $fd int $pri callable $callback mixed $data	sincronizar el estado de ficheros que est&aacute;n en memoria con un dispositivo de almacenamiento
function eio fstat $fd	un flujo un recurso socket o un descriptor numérico de fichero
function eio fstat $data	son datos personalizados pasados a la petición
function eio fstat $callback	la función callback es llamada cuando la petición está hecha
function eio fstat $pri	la prioridad de petición: eio_pri_default eio_pri_min eio_pri_max o null
function eio fstat $data	variable arbitraria pasada a callback
function eio fstat $result	es el valor del resultado específico de la petición; básicamente el valor devuelto por la correspondiente llamada al sistema
function eio fstat $req	es el recurso de petición opcional que puede usarse con funciones como eio_get_last_error()
function resource eio fstat	eio_busy() devuelve un recurso de petición en caso de éxito o false en caso de error
function resource eio fstat mixed $fd int $pri callable $callback mixed $data	obtener el estado de un fichero
function eio fsync $fd	un flujo un recurso socket o un descriptor numérico de fichero
function eio fsync $data	son datos personalizados pasados a la petición
function eio fsync $callback	la función callback es llamada cuando la petición está hecha
function eio fsync $pri	la prioridad de petición: eio_pri_default eio_pri_min eio_pri_max o null
function eio fsync $data	variable arbitraria pasada a callback
function eio fsync $result	es el valor del resultado específico de la petición; básicamente el valor devuelto por la correspondiente llamada al sistema
function eio fsync $req	es el recurso de petición opcional que puede usarse con funciones como eio_get_last_error()
function resource eio fsync	eio_fsync() devuelve un recurso de petición en caso de éxito o false en caso de error
function resource eio fsync mixed $fd int $pri callable $callback mixed $data	sincronizar el estado de un fichero en memoria con un dispositivo de almacenamiento
function eio ftruncate $fd	un flujo un recurso socket o un descriptor numérico de fichero
function eio ftruncate $data	son datos personalizados pasados a la petición
function eio ftruncate $callback	la función callback es llamada cuando la petición está hecha
function eio ftruncate $pri	la prioridad de petición: eio_pri_default eio_pri_min eio_pri_max o null
function eio ftruncate $data	variable arbitraria pasada a callback
function eio ftruncate $result	es el valor del resultado específico de la petición; básicamente el valor devuelto por la correspondiente llamada al sistema
function eio ftruncate $req	es el recurso de petición opcional que puede usarse con funciones como eio_get_last_error()
function eio ftruncate $offset	índice desde el principio del fichero
function resource eio ftruncate	eio_ftruncate() devuelve un recurso de petición en caso de éxito o false en caso de error
function resource eio ftruncate mixed $fd int $offset int $pri callable $callback mixed $data	truncar un fichero
function eio futime $data	son datos personalizados pasados a la petición
function eio futime $callback	la función callback es llamada cuando la petición está hecha
function eio futime $pri	la prioridad de petición: eio_pri_default eio_pri_min eio_pri_max o null
function eio futime $mtime	momento de modificación
function eio futime $data	variable arbitraria pasada a callback
function eio futime $fd	un flujo un recurso socket o un descriptor numérico de fichero p
function eio futime $result	es el valor del resultado específico de la petición; básicamente el valor devuelto por la correspondiente llamada al sistema
function eio futime $atime	momento de acceso
function eio futime $req	es el recurso de petición opcional que puede usarse con funciones como eio_get_last_error()
function resource eio futime	eio_futime() devuelve un recurso de petición en caso de éxito o false en caso de error
function resource eio futime mixed $fd float $atime float $mtime int $pri callable $callback mixed $data	cambiar los momentos de &uacute;ltimo y acceso y modificaci&oacute;n de un fichero
function mixed eio get event stream	eio_get_event_stream() devuelve un flujo en caso de éxito; de otro modo devuelve null
function mixed eio get event stream	obtiene un flujo que representa una variable usada en comnunicaciones internas con libeio
function eio grp add $req	el recurso de petición
function eio grp add $grp	el recurso de grupo de peticiones devuelto por eio_grp()
function void eio grp add resource $grp resource $req	a&ntilde;adir una petici&oacute;n al grupo de peticiones
function eio grp cancel $grp	el recurso de grupo de peticiones devuelto por eio_grp()
function void eio grp cancel resource $grp	cancelar un grupo de peticiones
function eio grp limit $limit	el número de peticiones del grupo
function eio grp limit $grp	el recurso de grupo de peticiones
function void eio grp limit resource $grp int $limit	establecer el l&iacute;mite de un grupo
function void eio init	re- inicializa eio
function eio link $path	la ruta del fichero origen
function eio link $data	son datos personalizados pasados a la petición
function eio link $callback	la función callback es llamada cuando la petición está hecha
function eio link $pri	la prioridad de petición: eio_pri_default eio_pri_min eio_pri_max o null
function eio link $new_path	la ruta del fichero destino
function eio link $data	variable arbitraria pasada a callback
function eio link $result	es el valor del resultado específico de la petición; básicamente el valor devuelto por la correspondiente llamada al sistema
function eio link $req	es el recurso de petición opcional que puede usarse con funciones como eio_get_last_error()
function resource eio link string $path string $new_path int $pri callable $callback mixed $data	crear un enlace duro par un fichero
function eio lstat $data	son datos personalizados pasados a la petición
function eio lstat $callback	la función callback es llamada cuando la petición está hecha
function eio lstat $pri	la prioridad de petición: eio_pri_default eio_pri_min eio_pri_max o null
function eio lstat $req	es el recurso de petición opcional que puede usarse con funciones como eio_get_last_error()
function eio lstat $data	variable arbitraria pasada a callback
function eio lstat $result	es el valor del resultado específico de la petición; básicamente el valor devuelto por la correspondiente llamada al sistema
function eio lstat $path	la ruta de archivo
function resource eio lstat	eio_lstat() devuelve un recurso de petición en caso de éxito o false en caso de error
function resource eio lstat string $path int $pri callable $callback mixed $data	obtener el estado de un fichero
function eio mkdir $data	son datos personalizados pasados a la petición
function eio mkdir $callback	la función callback es llamada cuando la petición está hecha
function eio mkdir $pri	la prioridad de petición: eio_pri_default eio_pri_min eio_pri_max o null
function eio mkdir $mode	modo de acceso p
function eio mkdir $path	la ruta del nuevo directorio
function eio mkdir $data	variable arbitraria pasada a callback
function eio mkdir $result	es el valor del resultado específico de la petición; básicamente el valor devuelto por la correspondiente llamada al sistema
function eio mkdir $req	es el recurso de petición opcional que puede usarse con funciones como eio_get_last_error()
function resource eio mkdir	eio_mkdir() devuelve un recurso de petición en caso de éxito o false en caso de error
function resource eio mkdir string $path int $mode int $pri callable $callback mixed $data	crear un directorio
function eio mknod $data	son datos personalizados pasados a la petición
function eio mknod $callback	la función callback es llamada cuando la petición está hecha
function eio mknod $pri	la prioridad de petición: eio_pri_default eio_pri_min eio_pri_max o null
function eio mknod $dev	si el tipo de fichero es eio_s_ifchr o eio_s_ifblk dev especifica el número mayor y menor del recién creado fichero especial de dispositivo
function eio mknod $path	ruta del nuevo nodo fichero
function eio mknod $data	variable arbitraria pasada a callback
function eio mknod $result	es el valor del resultado específico de la petición; básicamente el valor devuelto por la correspondiente llamada al sistema
function eio mknod $mode	especifica tanto los permisos a usar como el tipo de nodo a ser creado
function eio mknod $req	es el recurso de petición opcional que puede usarse con funciones como eio_get_last_error()
function resource eio mknod	eio_mknod() devuelve un recurso de petición en caso de éxito o false en caso de error
function resource eio mknod string $path int $mode int $dev int $pri callable $callback mixed $data	crear un fichero especial u ordinario
function eio nop $data	son datos personalizados pasados a la petición
function eio nop $callback	la función callback es llamada cuando la petición está hecha
function eio nop $pri	la prioridad de petición: eio_pri_default eio_pri_min eio_pri_max o null
function eio nop $data	variable arbitraria pasada a callback
function eio nop $result	es el valor del resultado específico de la petición; básicamente el valor devuelto por la correspondiente llamada al sistema
function eio nop $req	es el recurso de petición opcional que puede usarse con funciones como eio_get_last_error()
function resource eio nop	eio_nop() devuelve un recurso de petición en caso de éxito o false en caso de error
function resource eio nop int $pri callable $callback mixed $data	no hace nada s&oacute;lo recorre el ciclo de peticiones entero
function int eio nreqs	eio_nreqs() devuelve el número de peticiones a ser procesadas
function int eio nreqs	devuelve el n&uacute;mero de peticiones a ser procesadas
function eio open $path	ruta del archivo a abrir
function eio open $data	son datos personalizados pasados a la petición
function eio open $callback	la función callback es llamada cuando la petición está hecha
function eio open $flags	una de las constantes eio_o_* o sus combinaciones
function eio open $pri	la prioridad de petición: eio_pri_default eio_pri_min eio_pri_max o null
function eio open $data	variable arbitraria pasada a callback
function eio open $mode	una de las constantes eio_s_i* o sus combinaciones mediante el operador a nivel de bits or
function eio open $result	es el valor del resultado específico de la petición; básicamente el valor devuelto por la correspondiente llamada al sistema
function eio open $req	es el recurso de petición opcional que puede usarse con funciones como eio_get_last_error()
function resource eio open	eio_open() devuelve un descriptor de fichero en el argumento result de callback en caso de éxito; de otro modo result es igual a -1
function resource eio open string $path int $flags int $mode int $pri callable $callback mixed $data	abrir un fichero
function int eio poll	si cualquier invocación a una petición devuelve un valor distinto de cero devuelve ese valor
function int eio poll	puede ser llamada siempre que existan peticiones pendientes que necesitan ser finalizadas
function eio readahead $fd	un flujo un recurso socket o un descriptor numérico de fichero
function eio readahead $data	son datos personalizados pasados a la petición
function eio readahead $callback	la función callback es llamada cuando la petición está hecha
function eio readahead $length	el número de bytes a leer
function eio readahead $pri	la prioridad de petición: eio_pri_default eio_pri_min eio_pri_max o null
function eio readahead $data	variable arbitraria pasada a callback
function eio readahead $offset	el punto de inicio desde el cual se va a leer la información
function eio readahead $result	es el valor del resultado específico de la petición; básicamente el valor devuelto por la correspondiente llamada al sistema
function eio readahead $req	es el recurso de petición opcional que puede usarse con funciones como eio_get_last_error()
function resource eio readahead	eio_readahead() devuelve un recurso de petición en caso de éxito o false en caso de error
function resource eio readahead mixed $fd int $offset int $length int $pri callable $callback mixed $data	perform file readahead into page cache
function eio readdir $data	son datos personalizados pasados a la petición
function eio readdir $callback	la función callback es llamada cuando la petición está hecha
function eio readdir $pri	la prioridad de petición: eio_pri_default eio_pri_min eio_pri_max o null
function eio readdir $flags	una combinación de constantes eio_readdir_*
function eio readdir $path	la ruta del directorio
function eio readdir $data	variable arbitraria pasada a callback
function eio readdir $result	es el valor del resultado específico de la petición; básicamente el valor devuelto por la correspondiente llamada al sistema
function eio readdir $req	es el recurso de petición opcional que puede usarse con funciones como eio_get_last_error()
function resource eio readdir	eio_readdir() devuelve un recurso de petición en caso de éxito o false en caso de error
function resource eio readdir string $path int $flags int $pri callable $callback string $data	leer un directorio al completo
function eio realpath $path	el nombre abreviado
function resource eio realpath string $path int $pri callable $callback string $data	obtener el nombre de ruta absoluto canonizado
function eio rename $new_path	la ruta destino
function eio rename $data	son datos personalizados pasados a la petición
function eio rename $callback	la función callback es llamada cuando la petición está hecha
function eio rename $path	la ruta de origen
function eio rename $pri	la prioridad de petición: eio_pri_default eio_pri_min eio_pri_max o null
function eio rename $data	variable arbitraria pasada a callback
function eio rename $result	es el valor del resultado específico de la petición; básicamente el valor devuelto por la correspondiente llamada al sistema
function eio rename $req	es el recurso de petición opcional que puede usarse con funciones como eio_get_last_error()
function resource eio rename	eio_rename() devuelve un recurso de petición en caso de éxito o false en caso de error
function resource eio rename string $path string $new_path int $pri callable $callback mixed $data	cambiar el nombre o la ubicaci&oacute;n de un fichero
function eio rmdir $data	son datos personalizados pasados a la petición
function eio rmdir $callback	la función callback es llamada cuando la petición está hecha
function eio rmdir $pri	la prioridad de petición: eio_pri_default eio_pri_min eio_pri_max o null
function eio rmdir $path	la ruta del directorio
function eio rmdir $data	variable arbitraria pasada a callback
function eio rmdir $result	es el valor del resultado específico de la petición; básicamente el valor devuelto por la correspondiente llamada al sistema
function eio rmdir $req	es el recurso de petición opcional que puede usarse con funciones como eio_get_last_error()
function resource eio rmdir	eio_rmdir() devuelve un recurso de petición en caso de éxito o false en caso de error
function resource eio rmdir string $path int $pri callable $callback mixed $data	eliminar un directorio
function eio seek $data	son datos personalizados pasados a la petición
function eio seek $offset	el punto de inicio desde donde van a leerse los datos
function eio seek $length	el número de bytes a leer
function eio seek $pri	la prioridad de petición: eio_pri_default eio_pri_min eio_pri_max o null
function eio seek $data	una variable arbitraria pasada a callback
function eio seek $fd	un flujo un recurso socket o un descriptor de fichero numérico
function eio seek $callback	la función callback es llamada cuando la petición está hecha
function eio seek $result	es el valor del resultado específico de la petición; básicamente el valor devuelto por la correspondiente llamada al sistema
function eio seek $req	es el recurso de petición opcional que puede usarse con funciones como eio_get_last_error()
function resource eio seek	eio_seek() devuelve el recurso solicitado en caso de éxito o false en case de error
function resource eio seek mixed $fd int $offset int $whence int $pri callable $callback mixed $data	reposiciona el &iacute;ndice del fichero abierto asociado con el argumento fd al argumento offset seg&uacute;n la directiva whence
function eio sendfile $length	el número de bytes a copiar
function eio sendfile $data	son datos personalizados pasados a la petición
function eio sendfile $out_fd	un flujo de salida un recurso socket o un descriptor de fichero
function eio sendfile $pri	la prioridad de petición: eio_pri_default eio_pri_min eio_pri_max o null
function eio sendfile $in_fd	un flujo de entrada un recurso socket o un descriptor de fichero
function eio sendfile $callback	la función callback es llamada cuando la petición está hecha
function eio sendfile $data	variable arbitraria pasada a callback
function eio sendfile $offset	el índice dentro del fichero fuente
function eio sendfile $result	es el valor del resultado específico de la petición; básicamente el valor devuelto por la correspondiente llamada al sistema
function eio sendfile $req	es el recurso de petición opcional que puede usarse con funciones como eio_get_last_error()
function resource eio sendfile	eio_sendfile() devuelve un recurso de petición en caso de éxito o false en caso de error
function resource eio sendfile mixed $out_fd mixed $in_fd int $offset int $length int $pri callable $callback string $data	transferir informaci&oacute;n entre descriptores de ficheros
function eio stat $data	son datos personalizados pasados a la petición
function eio stat $callback	la función callback es llamada cuando la petición está hecha
function eio stat $pri	la prioridad de petición: eio_pri_default eio_pri_min eio_pri_max o null
function eio stat $req	es el recurso de petición opcional que puede usarse con funciones como eio_get_last_error()
function eio stat $data	variable arbitraria pasada a callback
function eio stat $result	es el valor del resultado específico de la petición; básicamente el valor devuelto por la correspondiente llamada al sistema
function eio stat $path	la ruta de archivo
function resource eio stat	eio_stat() devuelve un recurso de petición en caso de éxito o false en caso de error
function resource eio stat string $path int $pri callable $callback mixed $data	obtener el estado de un fichero
function eio statvfs $data	son datos personalizados pasados a la petición
function eio statvfs $callback	la función callback es llamada cuando la petición está hecha
function eio statvfs $pri	la prioridad de petición: eio_pri_default eio_pri_min eio_pri_max o null
function eio statvfs $data	variable arbitraria pasada a callback
function eio statvfs $path	el nombre de ruta de cualquier fichero dentro del sistema de ficheros montado
function eio statvfs $result	es el valor del resultado específico de la petición; básicamente el valor devuelto por la correspondiente llamada al sistema
function eio statvfs $req	es el recurso de petición opcional que puede usarse con funciones como eio_get_last_error()
function resource eio statvfs	eio_statvfs() devuelve un recurso de petición en caso de éxito o false en caso de error
function resource eio statvfs string $path int $pri callable $callback mixed $data	obtener las estad&iacute;sticas del sistema de ficheros
function eio unlink $data	son datos personalizados pasados a la petición
function eio unlink $callback	la función callback es llamada cuando la petición está hecha
function eio unlink $pri	la prioridad de petición: eio_pri_default eio_pri_min eio_pri_max o null
function eio unlink $data	variable arbitraria pasada a callback
function eio unlink $result	es el valor del resultado específico de la petición; básicamente el valor devuelto por la correspondiente llamada al sistema
function eio unlink $req	es el recurso de petición opcional que puede usarse con funciones como eio_get_last_error()
function eio unlink $path	ruta del fichero
function resource eio unlink	eio_unlink() devuelve un recurso de petición en caso de éxito o false en caso de error
function resource eio unlink string $path int $pri callable $callback mixed $data	borrar un nombre y posiblemente el fichero al que se refiere
function eio write $data	son datos personalizados pasados a la petición
function eio write $callback	la función callback es llamada cuando la petición está hecha
function eio write $pri	la prioridad de petición: eio_pri_default eio_pri_min eio_pri_max o null
function eio write $offset	ïndice desde el principio del fichero
function eio write $str	la cadena fuente
function eio write $data	variable arbitraria pasada a callback
function eio write $fd	un flujo un recurso socket o un descriptor numérico de fichero p
function eio write $length	número máximo de bytes a escribir
function eio write $result	es el valor del resultado específico de la petición; básicamente el valor devuelto por la correspondiente llamada al sistema
function eio write $req	es el recurso de petición opcional que puede usarse con funciones como eio_get_last_error()
function resource eio write	eio_write() devuelve un recurso de petición en caso de éxito o false en caso de error
function resource eio write mixed $fd string $str int $length int $offset int $pri callable $callback mixed $data	escribir en un fichero
function enchant broker describe $broker	recurso de agente
function array enchant broker describe	devuelve true en caso de éxito o false en caso de error
function array enchant broker describe resource $broker	enumera los proveedores de enchant
function enchant broker free $broker	recurso de agente
function bool enchant broker free	devuelve true en caso de éxito o false en caso de error
function bool enchant broker free resource $broker	liberar el recurso de agente y sus diccionarios
function enchant broker get error $broker	recurso de agente
function string enchant broker get error	devuelve la cadena de mensaje si se encontró un error o false
function string enchant broker get error resource $broker	devuelve el &uacute;ltimo error del agente
function enchant broker list dicts $broker	recurso de agente
function mixed enchant broker list dicts	devuelve true en caso de éxito o false en caso de error
function mixed enchant broker list dicts resource $broker	devuelve una lista de los diccionarios disponibles
function enchant broker request dict $tag	una etiqueta que describe la configuración regional por ejemplo en_us de_de
function enchant broker request dict $broker	recurso de agente
function resource enchant broker request dict	devuelve un recurso de diccionario si se tuvo éxito o false en caso de error
function resource enchant broker request dict resource $broker string $tag	crear un diccionario usanto una etiqueta
function enchant broker request pwl dict $filename	ruta al fichero pwl
function enchant broker request pwl dict $broker	recurso de agente
function resource enchant broker request pwl dict	devuelve un recurso de diccionario si se tuvo éxito o false en caso de error
function resource enchant broker request pwl dict resource $broker string $filename	crea un diccionario usando un fichero pwl
function enchant broker set dict path $value	la ruta de directorio del diccionario
function enchant broker set dict path $broker	el recurso de broker
function enchant broker set dict path $dict_type	el tipo de diccionario esto es enchant_myspell o enchant_ispell
function bool enchant broker set dict path	devuelve true en caso de éxito o false en caso de error
function bool enchant broker set dict path resource $broker int $dict_type string $value	establecer la ruta del directorio para un 'backend' dado
function enchant broker set ordering $tag	etiqueta de lenguaje
function enchant broker set ordering $ordering	lista delimitada por comas de nombres de proveedores
function enchant broker set ordering $broker	recurso de agente
function bool enchant broker set ordering	devuelve true en caso de éxito o false en caso de error
function bool enchant broker set ordering resource $broker string $tag string $ordering	declara una preferencia de diccionarios a usar para el lenguaje
function enchant dict add to personal $word	la palabra a añadir
function enchant dict add to personal $dict	recurso de diccionario
function void enchant dict add to personal resource $dict string $word	a&ntilde;adir una palabra a una lista personal de palabras
function enchant dict add to session $word	la palabra a añadir
function enchant dict add to session $dict	recurso de diccionario
function void enchant dict add to session resource $dict string $word	a&ntilde;adir una palabra a esta sesi&oacute;n ortogr&aacute;fica
function enchant dict describe $dict	recurso de diccionario
function mixed enchant dict describe	devuelve true en caso de éxito o false en caso de error
function mixed enchant dict describe resource $dict	describe un diccionario individual
function enchant dict get error $dict	recurso de diccionario
function string enchant dict get error	devuelve un mensaje de error como cadena o false si no se produjo ningún error
function string enchant dict get error resource $dict	devuelve el &uacute;ltimo error de la sesi&oacute;n ortogr&aacute;fica actual
function enchant dict is in session $dict	recurso de diccionario
function enchant dict is in session $word	la palabra a buscar
function bool enchant dict is in session	devuelve true si la palabra exsite o false
function bool enchant dict is in session resource $dict string $word	si existe o no una palabra en esta sesi&oacute;n ortogr&aacute;fica
function enchant dict store replacement $cor	la palabra corregida
function enchant dict store replacement $mis	la palabra a corregir
function enchant dict store replacement $dict	recurso de diccionario
function void enchant dict store replacement resource $dict string $mis string $cor	a&ntilde;adir una correcci&oacute;n a una palabra
function end $array	el array
function mixed end	devuelve el valor del último elemento o false si el array está vacío
function mixed end array $array	establece el puntero interno de un array a su &uacute;ltimo elemento
function eregi replace $pattern	una expresión regular posix extendido
function eregi replace $replacement	si pattern contiene sub-cadenas entre paréntesis replacement puede contener sub-cadenas de la forma \ dígito las cuales serán sustituidas por el texto que coincida con la sub-cadena entre paréntesis que coincida con el número marcado por dígito; \0 producirá el contenido completo de la cadena
function eregi replace $string	la cadena de entrada
function string eregi replace	se devuelve la cadena modificada
function string eregi replace string $pattern string $replacement string $string	sustituye una expresi&oacute;n regular de forma insensible a may&uacute;sculas-min&uacute;sculas
function eregi $string	la cadena de entrada
function eregi $regs	si se encontraron coincidencias con las sub-cadenas entre paréntesis de pattern y la función es llamada con el tercer argumento regs las coincidencias serán almacenadas en los elementos de la matriz regs
function eregi $pattern	expresión regular insensible a mayúsculas-minúsculas
function int eregi	devuelve la longitud de la cadena coincidente si una coincidencia de pattern se encontró en string o false si no se encontraron coincidencias o se produjo un error
function int eregi string $pattern string $string array $regs	comparaci&oacute;n de una expresi&oacute;n regular de forma insensible a may&uacute;sculas-min&uacute;sculas
function array error get last	devuelve una matriz asociativa describiendo el último error con las claves type tipo message mensaje file archivo y line línea
function array error get last	obtener el &uacute;ltimo error que ocurri&oacute;
function error log $message_type	indica dónde debería ir el error
function error log $destination	el destino
function error log $message	el mensaje de error que debería ser registrado
function error log $extra_headers	las cabeceras extra
function bool error log	devuelve true en caso de éxito o false en caso de error
function bool error log string $message int $message_type string $destination string $extra_headers	enviar un mensaje de error a las rutinas de manejo de errores definidas
function error reporting $level	el nuevo nivel de error_reporting
function int error reporting	devuelve el nivel antiguo de error_reporting o el nivel actual si el parámetro level no se proporciona
function int error reporting int $level	establece cu&aacute;les errores de php son notificados
function escapeshellarg $arg	el argumento que será escapado
function string escapeshellarg	la cadena escapada
function string escapeshellarg string $arg	escapar una cadena a ser usada como argumento del int&eacute;rprete de comandos
function escapeshellcmd $command	el comando a ser escapado
function string escapeshellcmd	la cadena escapada
function string escapeshellcmd string $command	escapar meta-caracteres del int&eacute;rprete de comandos
function event add $event	evento válido
function event add $timeout	timeout opcional en microsegundos
function bool event add	event_add() devuelve true en caso de éxito o false en caso de error
function bool event add resource $event int $timeout	a&ntilde;ade un evento al conjunto de eventos monitorizados
function event base free $event_base	base de eventos válida
function void event base free resource $event_base	destruye una base de eventos
function event base loop $flags	parámetro opcional que puede tomar como valor cualquier combinación de evloop_once y evloop_nonblock
function event base loop $event_base	base de eventos válida
function int event base loop	event_base_loop() devuelve 0 en caso de éxito -1 en caso derror y 1 si no se ha registrado ningún evento
function int event base loop resource $event_base int $flags	gestiona eventos
function event base loopbreak $event_base	base de eventos válida
function bool event base loopbreak	event_base_loopbreak() devuelve true en caso de éxito o false en caso de error
function bool event base loopbreak resource $event_base	aborta un bucle de eventos
function event base priority init $npriorities	el número de niveles de prioridad de los eventos
function event base priority init $event_base	base de eventos
function bool event base priority init	event_base_priority_init() devuelve true en caso de éxito o false en caso de error
function bool event base priority init resource $event_base int $npriorities	configura el n&uacute;mero de niveles de prioridad de los eventos
function event base set $event	recurso válido de evento
function event base set $event_base	recurso válido de base de eventos
function bool event base set	event_base_set() devuelve true en caso de éxito o false en caso de error
function bool event base set resource $event resource $event_base	asocia una base de eventos con un evento
function event buffer base set $bevent	recurso de evento válido enviado al buffer
function event buffer base set $event_base	recurso de base de eventos válido
function bool event buffer base set	event_buffer_base_set() devuelve true en caso de éxito o false en caso de error
function bool event buffer base set resource $bevent resource $event_base	asocia el evento en un buffer con una base de eventos
function event buffer enable $bevent	recurso válido de evento almacenado en el buffer
function event buffer enable $events	cualquier combinación de ev_read y ev_write
function bool event buffer enable	event_buffer_enable() devuelve true en caso de éxito o false en caso de error
function bool event buffer enable resource $bevent int $events	activar un evento almacenado en el buffer
function event buffer free $bevent	recurso válido de evento almacenado en el buffer
function void event buffer free resource $bevent	destruye el evento almacenado en el buffer
function event buffer new $stream	recurso de flujo php
function event buffer new $arg	un parámetro que se pasará para cada una de las llamadas en background opcional
function event buffer new $writecb	llamada en background para invocar donde está listo para escribir el descripor o null si no se desea llamada en background
function event buffer new $errorcb	llamada en background para invocar donde hay un error en el descriptor no puede ser null
function event buffer new $readcb	llamada en background para invocar donde hay datos que leer o null si no se desea llamada en background
function resource event buffer new	event_buffer_new() devuelve nuevos recursos de evento en el buffer en caso de éxito o false en caso de error
function resource event buffer new resource $stream mixed $readcb mixed $writecb mixed $errorcb mixed $arg	crea un evento en el buffer
function event buffer priority set $priority	nivel de prioridad
function event buffer priority set $bevent	recurso válido de evento buferizado
function bool event buffer priority set	event_buffer_priority_set() devuelve true en caso de éxito o false en caso de error
function bool event buffer priority set resource $bevent int $priority	asigna una prioridad a un evento en el buffer
function event buffer read $data_size	tamaño de datos en bytes
function event buffer read $bevent	recurso válido de evento buferizado
function string event buffer read resource $bevent int $data_size	lee datos de un evento buferizado
function event buffer set callback $errorcb	llamada para incovar donde hay un error en el descriptor no puede ser null
function event buffer set callback $event	recurso válido de evento buferizado
function event buffer set callback $arg	un parámetro que será pasado para cada una de las llamadas opcional
function event buffer set callback $writecb	llamada para invocar donde está listo para escribir el descriptor o null si no se desea llamada
function event buffer set callback $readcb	llamada para invocar donde hay datos que leer o null si no se desea llamada
function bool event buffer set callback	devuelve true en caso de éxito o false en caso de error
function bool event buffer set callback resource $event mixed $readcb mixed $writecb mixed $errorcb mixed $arg	configura o reconfigura llamadas para un evento buferizado
function event buffer watermark set $lowmark	marca de mínimo
function event buffer watermark set $highmark	marca de máximo
function event buffer watermark set $events	cualquier combinación de ev_read y ev_write
function event buffer watermark set $bevent	recurso válido de evento buferizado
function void event buffer watermark set resource $bevent int $events int $lowmark int $highmark	configura las marcas para eventos de lectura y escritura
function event buffer write $data_size	parámetro opcional de tamaño
function event buffer write $data	los datos que se van a escribir
function event buffer write $bevent	recurso válido de evento buferizado
function bool event buffer write	event_buffer_write() devuelve true en caso de éxito o false en caso de error
function bool event buffer write resource $bevent string $data int $data_size	escribe datos en un evento buferizado
function event del $event	recurso válido de evento
function bool event del	event_del() devuelve true en caso de éxito o false en caso de error
function bool event del resource $event	elimina un evento del conjunto de eventos monitorizados
function event free $event	recurso válido de evento
function void event free resource $event	libera el recurso de evento
function resource event new	event_new() devuelve un nuevo recurso de evento en caso de éxito o false en caso de error
function resource event new	crea un nuevo evento
function event set $event	recurso válido de evento
function event set $arg	parámetro opcional de llamada
function event set $events	un conjunto de indicadores para el evento deseado pueden ser ev_read y / o ev_write
function event set $callback	función de llamada que se ejecutará cuando se produzca el evento
function event set $fd	recurso válido de flujo php
function bool event set	event_set() devuelve true en caso de éxito o false en caso de error
function bool event set resource $event mixed $fd int $events mixed $callback mixed $arg	prepara un evento
function exif read data $arrays	especifica si cada sección se convierte o no en una matriz
function exif read data $filename	el nombre de la imagen que se va a leer
function exif read data $sections	es una lista separada por comas de las secciones que necesitan estar presentes en el archivo para producir un array resultante
function exif read data $thumbnail	cuando se establece a true se lee la miniatura misma
function array exif read data	devuelve un array asociativo donde los índices de la matriz son los nombres de las cabeceras y los valores de la matriz son los valores asociados con esas cabeceras
function array exif read data string $filename string $sections bool $arrays bool $thumbnail	lee las cabeceras exif desde un jpeg o un tiff
function exif thumbnail $height	el alto devuelto de la miniatura devuelta
function exif thumbnail $filename	el nombre de la imagen que va a ser leída
function exif thumbnail $width	el ancho devuelto de la miniatura devuelta
function exif thumbnail $imagetype	el tipo de imagen devuelto de la miniatura devuelta
function string exif thumbnail	devuelve la miniatura embebida o false si la imagen no contiene ninguna miniatura
function string exif thumbnail string $filename int $width int $height int $imagetype	recuperar la miniatura embebida de una imagen tiff o jpeg
function exit $status	si status es una cadena esta función imprime el status justo antes de salir
function void exit string $status	imprime un mensaje y termina el script actual
function exp $arg	el argumento a procesar
function float exp	e elevado a la potencia de arg
function float exp float $arg	calcula la exponencial de e
function expect popen $command	comando a ejecutar
function resource expect popen	devuelve un flujo pty abierto al stdio stdout y stderr del prceso
function resource expect popen string $command	ejecuta comandos por la shell bourne y abre el flujo pty al proceso
function explode $delimiter	el string delimitador
function explode $string	el string de entrada
function explode $limit	si el parámetro limit es positivo el array devuelto contendrá el máximo de limit elementos y el último elemento contendrá el resto del string
function array explode	devuelve un array de string creados por la división del parámetro string usando los delimitadores indicados en el parámetro delimiter
function array explode string $delimiter string $string int $limit	divide un string en varios string
function expm1 $arg	el argumento a procesar
function float expm1	e elevado a la potencia de arg menos uno
function float expm1 float $arg	devuelve exp numero -1 calculado de tal forma que no pierde precisi&oacute;n incluso cuando el valor del numero se aproxima a cero
function extension loaded $name	el nombre de la extensión
function bool extension loaded	devuelve true si la extensión identificada por nombre está cargada false de lo contrario
function bool extension loaded string $name	encontrar si una extensi&oacute;n est&aacute; cargada
function extract $EXTR_REFS	extrae las variables como referencias
function extract $prefix	observe que prefix sólo es requerido si flags es extr_prefix_same extr_prefix_all extr_prefix_invalid o extr_prefix_if_exists
function extract $EXTR_SKIP	si hay una colisión no sobrescribe la variable existente
function extract $array	un array asociativo
function extract $EXTR_PREFIX_IF_EXISTS	crea nombres de variables con prefijo sólo si la versión no prefijada de la misma variable existe en la tabla de símbolos actual
function extract $EXTR_PREFIX_SAME	si hay una colisión prefija el nombre de la variable con prefix
function extract $EXTR_IF_EXISTS	sobrescribe la variable sólo si ya existe en la tabla de símbolos actual de otro modo no hace nada
function extract $flags	la manera en que las claves no-válidas / numéricas y las colisiones son tratadas está determinda por el parámetro flags
function extract $EXTR_OVERWRITE	si hay una colisión sobrescribe la variable existente
function extract $EXTR_PREFIX_ALL	prefija todos los nombres de variables con prefix
function extract $EXTR_PREFIX_INVALID	sólo prefija los nombres de variables no-válidas / numéricas con prefix
function int extract	devuelve el número de variables importadas con éxito a la tabla de símbolos
function int extract array $array int $flags string $prefix	importar variables a la tabla de s&iacute;mbolos actual desde un array
function fam cancel monitor $fam	un recuro representa una conexión al servicio fam devuelto por fam_open()
function fam cancel monitor $fam_monitor	un recurso devuelto por uno de las funciones fam_monitor_xxx
function bool fam cancel monitor	devuelve true en caso de éxito o false en caso de error
function bool fam cancel monitor resource $fam resource $fam_monitor	detiene el monitor
function fam close $fam	un recurso que representa una conexión al servicio fam devuelto por fam_open()
function void fam close resource $fam	cierra la conexi&oacute;n fam
function fam monitor collection $fam	un recurso que representa una conexión al servicio fam devuelto por fam_open()
function fam monitor collection $mask	una máscara mask para restringir los nombres de archivo
function fam monitor collection $depth	el máximo nivel de profundidad depth de búsqueda dentro del directorio
function fam monitor collection $dirname	ruta del directorio a monitorizar
function resource fam monitor collection	devuelve un recurso de monitoreo o false en caso de error
function resource fam monitor collection resource $fam string $dirname int $depth string $mask	vigila los cambios en una colecci&oacute;n de archivos de un directorio
function fam monitor directory $fam	un recurso que representa una conexión al servicio fam devuelto por fam_open()
function fam monitor directory $dirname	ruta del directorio a monitorizar
function resource fam monitor directory	devuelve un recurso de monitoreo o false en caso de error
function resource fam monitor directory resource $fam string $dirname	vigila cambios en un directorio
function fam monitor file $filename	ruta del archivo a monitorizar
function fam monitor file $fam	un recurso que representa una conexión al servicio fam devuelto por fam_open()
function resource fam monitor file	devuelve un recurso de monitoreo o false en caso de error
function resource fam monitor file resource $fam string $filename	vigila cambios en un archivo regular
function fam next event $fam	un recurso que representa una conexión al servicio fam devuelto por fam_open()
function array fam next event	devuelve un array conteniendo los códigos de eventos fam en el elemento code la ruta de este archivo aplicada al elemento filename y opcionalmente un nombre de máquina en el elemento hostname
function array fam next event resource $fam	obtiene el pr&oacute;ximo evento fam en espera
function fam open $appname	una cadena que identifica la aplicación por razones de registro
function resource fam open	devuelve un recurso que representa una conexión al servicio fam al tener éxito o false en caso de error
function resource fam open string $appname	abre una conexi&oacute;n al demonio fam
function fann cascadetrain on data $neurons_between_reports	el número de neuronas entre impresiones de informes de estado
function fann cascadetrain on data $desired_error	el fann_get_mse() o fann_get_bit_fail() deseados dependiendo de la función de parada elegida mediante fann_set_train_stop_function()
function fann cascadetrain on data $max_neurons	el número máximo de neuronas a añadir a la red neuronal
function fann cascadetrain on data $data	un resource de datos de entrenamiento de red neuronal
function fann cascadetrain on data $ann	un resource de red neuronal
function bool fann cascadetrain on data	devuelve true en caso de éxito o false de lo contrario
function bool fann cascadetrain on data resource $ann resource $data int $max_neurons int $neurons_between_reports float $desired_error	entrena un conjunto de datos completo por un per&iacute;odo de tiempo utilizando el algoritmo de entrenamiento cascade2
function fann cascadetrain on file $max_neurons	el número de neuronas entre impresiones de informes de estado a la salida estándar
function fann cascadetrain on file $desired_error	el fann_get_mse() o fann_get_bit_fail() deseados dependiendo de la función de parada elegida mediante fann_set_train_stop_function()
function fann cascadetrain on file $neurons_between_reports	el número de neuronas entre impresiones de informes de estado
function fann cascadetrain on file $filename	el número máximo de neuronas a añadir a la red neuronal
function fann cascadetrain on file $ann	un resource de red neuronal
function bool fann cascadetrain on file	devuelve true en caso de éxito o false de lo contrario
function bool fann cascadetrain on file resource $ann string $filename int $max_neurons int $neurons_between_reports float $desired_error	entre un conjunto de datos completo desde un fichero por un per&iacute;odo de tiempo utilizando el algoritmo de entrenamiento cascade2
function fann clear scaling params $ann	un resource de red neuronal
function bool fann clear scaling params	devuelve true en caso de éxito o false de lo contrario
function bool fann clear scaling params resource $ann	limpia los par&aacute;metros de escala
function fann copy $ann	un resource de red neuronal
function resource fann copy	devuelve una copia de un recurso de red neuronal en caso de éxito o false en caso de error
function resource fann copy resource $ann	crea una copia de una estructura fann
function fann create from file $configuration_file	la ruta al fichero de configuración
function resource fann create from file	devuelve un resource de red neuronal en caso de éxito o false en caso de error
function resource fann create from file string $configuration_file	construye una red neuronal de retropropagaci&oacute;n desde un fichero de configuraci&oacute;n
function fann create shortcut array $num_layers	el número total de capas incluyendo la capa de entrada y de salida
function fann create shortcut array $layers	un array con los tamaños de las capas
function resource fann create shortcut array	devuelve un recurso de red neuronal en caso de éxito o false en caso de error
function resource fann create shortcut array int $num_layers array $layers	crea una red neuronal de retropropagaci&oacute;n est&aacute;ndar que no est&aacute; completamente conectada y que posee conexiones de atajo
function fann create sparse array $connection_rate	el índice de conexión controla cuántas conexiones habrá en la red
function fann create sparse array $num_layers	el número total de capas incluyendo la capa de entrada y de salida
function fann create sparse array $layers	un array con los tamaños de las capas
function ReturnType fann create sparse array	devuelve un recurso de red neuronal en caso de éxito o false en caso de error
function ReturnType fann create sparse array float $connection_rate int $num_layers array $layers	crea una red neuronal de retropropagaci&oacute;n est&aacute;ndar que no est&aacute; completamente conectada empleando un array con tama&ntilde;os de capas
function fann create sparse $num_neurons2	el número de neuronas de la segunda capa
function fann create sparse	el número de neuronas de la otras capas
function fann create sparse $connection_rate	el índice de conexión controla cuántas conexiones habrá en la red
function fann create sparse $num_layers	el número total de capas incluyendo la capa de entrada y de salida
function fann create sparse $num_neurons1	el número de neuronas de la primera capa
function ReturnType fann create sparse	devuelve un recurso de red neuronal en caso de éxito o false en caso de error
function ReturnType fann create sparse float $connection_rate int $num_layers int $num_neurons1 int $num_neurons2	crea una red neuronal de retropropagaci&oacute;n est&aacute;ndar que no est&aacute; conectada completamente
function fann create standard $num_neurons2	el número de neuronas de la segunda capa
function fann create standard $num_neurons1	el número de neuronas de la primera capa
function fann create standard $num_layers	el número total de capas incluyendo la capa de entrada y de salida
function fann create standard	el número de neuronas de la otras capas
function resource fann create standard	devuelve un recurso de red neuronal en caso de éxito o false en caso de error
function resource fann create standard int $num_layers int $num_neurons1 int $num_neurons2	crea una red neuronal de retropropagaci&oacute;n est&aacute;ndar completamente conectada
function fann create train from callback $num_output	el número de salidas por datos de entrenamiento
function fann create train from callback $num_input	el número de entradas por datos de entrenamiento
function fann create train from callback $num_data	el número de datos de entrenamiento
function resource fann create train from callback	devuelve un resource de datos de entrenamiento en caso de éxito o false en caso de error
function resource fann create train from callback int $num_data int $num_input int $num_output callable $user_function	crea una estructura de datos de entrenamiento desde una funci&oacute;n proporcionada por el usuario
function fann create train $num_output	el número de salidas por datos de entrenamiento
function fann create train $num_input	el número de entradas por datos de entrenamiento
function fann create train $num_data	el número de datos de entrenamiento
function resource fann create train	devuelve un resource de datos de entrenamiento en caso de éxito o false en caso de error
function resource fann create train int $num_data int $num_input int $num_output	crea una estructura de datos de entrenamiento vac&iacute;a
function fann descale input $input_vector	el vector de entrada a desescalar
function fann descale input $ann	un resource de red neuronal
function bool fann descale input	devuelve true en caso de éxito o false de lo contrario
function bool fann descale input resource $ann array $input_vector	escalar datos en un vector de entrada despu&eacute;s de obtenerlo de una rna basada en par&aacute;metros previamente calculados
function fann descale output $output_vector	el vector de salida a desescalar
function fann descale output $ann	un resource de red neuronal
function bool fann descale output	devuelve true en caso de éxito o false de lo contrario
function bool fann descale output resource $ann array $output_vector	escalar datos en un vector de entrada despu&eacute;s de obtenerlo de una rna basada en par&aacute;metros previamente calculados
function fann destroy $ann	un resource de red neuronal
function bool fann destroy	devuelve true en caso de éxito o false de lo contrario
function bool fann destroy resource $ann	destruye la red por completo y libera adecuadamente toda la memoria asociada
function fann get activation function $neuron	el número de neurona
function fann get activation function $layer	el número de capa
function fann get activation function $ann	un resource de red neuronal
function int fann get activation function	una constante de funciones de aprendizaje o -1 si la neurona no está definida en la red neuronal o false en caso de error
function int fann get activation function resource $ann int $layer int $neuron	devuelve la funci&oacute;n de activaci&oacute;n
function fann get activation steepness $neuron	el número de neurona
function fann get activation steepness $layer	el número de capa
function fann get activation steepness $ann	un resource de red neuronal
function float fann get activation steepness	la pendiente de activación para la neurona o -1 si la neurona no está definida en la red neuronal o false en caso de error
function float fann get activation steepness resource $ann int $layer int $neuron	devuelve la pendiente de activaci&oacute;n para el n&uacute;mero de neurona y de capa proporcionados
function fann get bias array $ann	un resource de red neuronal
function array fann get bias array	un array con de números de tendencias en cada capa
function array fann get bias array resource $ann	obtener el n&uacute;mero de tendencias de cada capa de una red
function fann get bit fail limit $ann	un resource de red neuronal
function float fann get bit fail limit	el límite de fallo de bit o false en caso de error
function float fann get bit fail limit resource $ann	devuelve el l&iacute;mite de fallo de bit empleado durante un entrenamiento
function fann get bit fail $ann	un resource de red neuronal
function int fann get bit fail	el número de bit fallidos o false en caso de error
function int fann get bit fail resource $ann	el n&uacute;mero de bit fallidos
function fann get cascade activation functions count $ann	un resource de red neuronal
function int fann get cascade activation functions count	el número de funciones de activación en cascada o false en caso de error
function int fann get cascade activation functions count resource $ann	devuelve el n&uacute;mero de funciones de activaci&oacute;n en cascada
function fann get cascade activation functions $ann	un resource de red neuronal
function array fann get cascade activation functions	las funciones de activación en cascada o false en caso de error
function array fann get cascade activation functions resource $ann	devuelve las funciones de activaci&oacute;n en cascada
function fann get cascade activation steepnesses count $ann	un resource de red neuronal
function int fann get cascade activation steepnesses count	el número de pendientes de activación o false en caso de error
function int fann get cascade activation steepnesses count resource $ann	el n&uacute;mero de pendientes de activaci&oacute;n
function fann get cascade candidate change fraction $ann	un resource de red neuronal
function float fann get cascade candidate change fraction	the cascade candidate change fraction or false on error
function float fann get cascade candidate change fraction resource $ann	devuelve la fracci&oacute;n de cambio de candidatas en cascada
function fann get cascade candidate stagnation epochs $ann	un resource de red neuronal
function float fann get cascade candidate stagnation epochs	el número de épocas de estancamiento de candidatas en cascada o false en caso de error
function float fann get cascade candidate stagnation epochs resource $ann	devuelve el n&uacute;mero de &eacute;pocas de estancamiento de candidatas en cascada
function fann get cascade max cand epochs $ann	un resource de red neuronal
function int fann get cascade max cand epochs	el máximo de épocas de candidtas o false en caso de error
function int fann get cascade max cand epochs resource $ann	devuelve el m&aacute;ximo de &eacute;pocas de candidatas
function fann get cascade max out epochs $ann	un resource de red neuronal
function int fann get cascade max out epochs	el máximo de épocas de salida o false en caso de error
function int fann get cascade max out epochs resource $ann	devuelve el m&aacute;ximo de &eacute;pocas de salida
function fann get cascade min cand epochs $ann	un resource de red neuronal
function int fann get cascade min cand epochs	el mínimo de épocas de candidtas o false en caso de error
function int fann get cascade min cand epochs resource $ann	devuelve el m&iacute;nimo de &eacute;pocas de candidatas
function fann get cascade num candidates $ann	un resource de red neuronal
function int fann get cascade num candidates	el número de candidatas emleadas durante un entrenamiento o false en caso de error
function int fann get cascade num candidates resource $ann	devuelve el n&uacute;mero de candidatas empleadas durante un entrenamiento
function fann get cascade output stagnation epochs $ann	un resource de red neuronal
function int fann get cascade output stagnation epochs	el número de épocas de estancamiento de salida en cascada o false en caso de error
function int fann get cascade output stagnation epochs resource $ann	devuelve el n&uacute;mero de &eacute;pocas de estancamiento de salida en cascada
function fann get connection array $ann	un resource de red neuronal
function array fann get connection array	un array con las conexiones de la red
function array fann get connection array resource $ann	obtener las conexiones de la red
function fann get connection rate $ann	un resource de red neuronal
function float fann get connection rate	el índice de conexión empleado al crear la red o false en caso de error
function float fann get connection rate resource $ann	obtener el &iacute;ndice de conexi&oacute;n empleado al crear la red
function fann get errno $errdat	un resource de red neuronal o un resource de datos de entrenamiento de red neuronal
function int fann get errno	el número de error o false en caso de error
function int fann get errno resource $errdat	devuelve el n&uacute;mero del &uacute;ltimo error
function fann get errstr $errdat	un resource de red neuronal o un resource de datos de entrenamiento de red neuronal
function string fann get errstr	el string del último error o false en caso de error
function string fann get errstr resource $errdat	devuelve el string de &uacute;ltimo error
function fann get layer array $ann	un resource de red neuronal
function array fann get layer array	un array de números de neuronas en cada capa
function array fann get layer array resource $ann	obtener el n&uacute;mero de neuronas de cada capa de la red
function fann get MSE $ann	un resource de red neuronal
function float fann get MSE	el error cuadrático medio o false en caso de error
function float fann get MSE resource $ann	lee el error cuadr&aacute;tico medio de la red
function fann get num input $ann	un resource de red neuronal
function int fann get num input	el número de neuronas de entrada o false en caso de error
function int fann get num input resource $ann	obtener el n&uacute;mero de neuronas de entrada
function fann get num output $ann	un resource de red neuronal
function int fann get num output	el número de neuronas de salida o false en caso de error
function int fann get num output resource $ann	obtener el n&uacute;mero de neuronas de salida
function fann get quickprop decay $ann	un resource de red neuronal
function float fann get quickprop decay	the decay or false on error
function float fann get quickprop decay resource $ann	devuelve la decadencia que es un factor por el que los pesos deber&iacute;an decrementar en cada iteraci&oacute;n durante un entrenamiento quickprop
function fann get rprop delta max $ann	un resource de red neuronal
function float fann get rprop delta max	el tamaño de paso máximo o false en caso de error
function float fann get rprop delta max resource $ann	devuelve el tama&ntilde;o de paso m&aacute;ximo
function fann get rprop delta zero $ann	un resource de red neuronal
function ReturnType fann get rprop delta zero	el tamaño de paso inicial o false en caso de error
function ReturnType fann get rprop delta zero resource $ann	devuelve el tama&ntilde;o de paso inicial
function fann get rprop increase factor $ann	un resource de red neuronal
function float fann get rprop increase factor	el factor de aumento o false en caso de error
function float fann get rprop increase factor resource $ann	devuelve el factor de aumento empleado durante un entrenamiento rprop
function fann get sarprop step error shift $ann	un resource de red neuronal
function float fann get sarprop step error shift	el desplazamiento del error de paso de sarprop o false en caso de error
function float fann get sarprop step error shift resource $ann	devuelve el desplazamiento del error de paso de sarprop
function fann get sarprop step error threshold factor $ann	un resource de red neuronal
function float fann get sarprop step error threshold factor	el factor de umbral del error de paso de sarprop o false en caso de error
function float fann get sarprop step error threshold factor resource $ann	devuelve el factor de umbral del error de paso de sarprop
function fann get sarprop temperature $ann	un resource de red neuronal
function float fann get sarprop temperature	la temperatura de sarprop o false en caso de error
function float fann get sarprop temperature resource $ann	devuelve la temperatura de sarprop
function fann get total connections $ann	un resource de red neuronal
function int fann get total connections	el número total de conexiones de la red completa o false en caso de error
function int fann get total connections resource $ann	obtener el n&uacute;mero total de conexiones de la red completa
function fann get train error function $ann	un resource de red neuronal
function int fann get train error function	la constante de función de error o false en caso de error
function int fann get train error function resource $ann	devuelve la funci&oacute;n de error empleada durante un entrenamiento
function fann get train stop function $ann	un resource de red neuronal
function int fann get train stop function	la constante de función de parada o false en caso de error
function int fann get train stop function resource $ann	devuelve la funci&oacute;n de parada empleada durante el entrenamiento
function fann init weights $train_data	un resource de datos de entrenamiento de red neuronal
function fann init weights $ann	un resource de red neuronal
function bool fann init weights	devuelve true en caso de éxito o false de lo contrario
function bool fann init weights resource $ann resource $train_data	inicializar los pesos empleando el algoritmo de widrow + nguyen
function fann length train data $data	un resource de datos de entrenamiento de red neuronal
function int fann length train data	el número de elementos del resource de datos de entrenamiento o false en caso de error
function int fann length train data resource $data	devuelve el n&uacute;mero de patrones de entrenamiento de los datos de entrenamiento
function fann merge train data $data2	un resource de datos de entrenamiento de red neuronal
function fann merge train data $data1	un resource de datos de entrenamiento de red neuronal
function resource fann merge train data	el nuevo resource de datos de entrenamiento fundido o false en caso de error
function resource fann merge train data resource $data1 resource $data2	funde los datos de entrenamiento
function fann num input train data $data	un resource de datos de entrenamiento de red neuronal
function int fann num input train data	el número de entradas o false en caso de error
function int fann num input train data resource $data	devuelve el n&uacute;mero de entradas de cada patr&oacute;n de entrenamiento de los datos de entrenamiento
function fann num output train data $data	un resource de datos de entrenamiento de red neuronal
function int fann num output train data	el número de salidas o false en caso de error
function int fann num output train data resource $data	devuelve el n&uacute;mero de salidas de cada patr&oacute;n de entrenamiento de los datos de entrenamiento
function fann print error $errdat	un resource de red neuronal o un resource de datos de entrenamiento de red neuronal
function void fann print error string $errdat	imprime el string de error
function fann read train from file $filename	el fichero de entrada con el siguiente formato: número_datos_entrenamiento número_entradas número_salidas datos de entrada separados por un espacio datos de salida separados por un espacio
function resource fann read train from file	devuelve un resource de datos de entrenamiento en caso de éxito o false en caso de error
function resource fann read train from file string $filename	lee un fichero que almacena datos de entrenamiento
function fann reset errno $errdat	un resource de red neuronal o un resource de datos de entrenamiento de red neuronal
function void fann reset errno resource $errdat	reinicia el n&uacute;mero del &uacute;ltimo error
function fann reset errstr $errdat	un resource de red neuronal o un resource de datos de entrenamiento de red neuronal
function void fann reset errstr resource $errdat	reinicia el string del &uacute;ltimo error
function fann reset MSE $ann	un resource de red neuronal
function bool fann reset MSE	devuelve true en caso de éxito o false de lo contrario
function bool fann reset MSE string $ann	reinicia el error cuadr&aacute;tico medio de la red
function fann run $input	un array de valores de entrada
function fann run $ann	un resource de red neuronal
function array fann run	un array de valores de salida o false en caso de error
function array fann run resource $ann array $input	ejecutar&aacute; la entrada a trav&eacute;s de la red neuronal
function fann save train $data	un resource de datos de entrenamiento de red neuronal
function fann save train $file_name	el nombre delfichero donde guardar los datos de entrenamiento
function bool fann save train	devuelve true en caso de éxito o false de lo contrario
function bool fann save train resource $data string $file_name	guarda la estructura de entrenamiento en un fichero
function fann save $configuration_file	la ruta al fichero de configuración
function fann save $ann	un resource de red neuronal
function bool fann save	devuelve true en caso de éxito o false de lo contrario
function bool fann save resource $ann string $configuration_file	guarda la red completa a un fichero de configuraci&oacute;n
function fann scale input train data $train_data	un resource de datos de entrenamiento de red neuronal
function fann scale input train data $new_min	el nuevo mínimo después de escalar las entradas de los datos de entrenamiento
function fann scale input train data $new_max	el nuevo máximo después de escalar las entradas de los datos de entrenamiento
function bool fann scale input train data	devuelve true en caso de éxito o false de lo contrario
function bool fann scale input train data resource $train_data float $new_min float $new_max	escala las entradas de los datos de entrenamiento al rango especificado
function fann scale input $input_vector	el vector de entrada a escalar
function fann scale input $ann	un resource de red neuronal
function bool fann scale input	devuelve true en caso de éxito o false de lo contrario
function bool fann scale input resource $ann array $input_vector	escalar datos en un vector de entrada antes de alimentarlo a una rna basada en par&aacute;metros previamente calculados
function fann scale output train data $new_max	el nuevo máximo después de escalar las salidas de los datos de entrenamiento
function fann scale output train data $train_data	un resource de datos de entrenamiento de red neuronal
function fann scale output train data $new_min	el nuevo mínimo después de escalar las salidas de los datos de entrenamiento
function bool fann scale output train data	devuelve true en caso de éxito o false de lo contrario
function bool fann scale output train data resource $train_data float $new_min float $new_max	escala las salidas de los datos de entrenamiento al rango especificado
function fann scale train $train_data	un resource de datos de entrenamiento de red neuronal
function fann scale train $ann	un resource de red neuronal
function bool fann scale train	devuelve true en caso de éxito o false de lo contrario
function bool fann scale train resource $ann resource $train_data	escalar datos de entrada y salida basados en par&aacute;metros previamente calculados
function fann set activation function hidden $activation_function	la constante de funciones de activación
function fann set activation function hidden $ann	un resource de red neuronal
function bool fann set activation function hidden	devuelve true en caso de éxito o false de lo contrario
function bool fann set activation function hidden resource $ann int $activation_function	establece la funci&oacute;n de activaci&oacute;n para todas las capas ocultas
function fann set activation function output $activation_function	la constante de funciones de activación
function fann set activation function output $ann	un resource de red neuronal
function bool fann set activation function output	devuelve true en caso de éxito o false de lo contrario
function bool fann set activation function output resource $ann int $activation_function	establece la funci&oacute;n de activaci&oacute;n para la capa de salida
function fann set activation function $neuron	el número de neurona
function fann set activation function $activation_function	la constante de funciones de activación
function fann set activation function $layer	el número de capa
function fann set activation function $ann	un resource de red neuronal
function bool fann set activation function	devuelve true en caso de éxito o false de lo contrario
function bool fann set activation function resource $ann int $activation_function int $layer int $neuron	establece la funci&oacute;n de activaci&oacute;n para la neurona y capa proporcionadas
function fann set activation steepness hidden $activation_steepness	la pendiente de activación
function fann set activation steepness hidden $ann	un resource de red neuronal
function bool fann set activation steepness hidden	devuelve true en caso de éxito o false de lo contrario
function bool fann set activation steepness hidden resource $ann float $activation_steepness	establece la pendiente de la activaci&oacute;n para todas las neuronas de todas las capas ocultas
function fann set activation steepness layer $activation_steepness	la pendiente de activación
function fann set activation steepness layer $layer	el número de capa
function fann set activation steepness layer $ann	un resource de red neuronal
function bool fann set activation steepness layer	devuelve true en caso de éxito o false de lo contrario
function bool fann set activation steepness layer resource $ann float $activation_steepness int $layer	establece la pendiente de activaci&oacute;n para todas las neuronas del n&uacute;mero de capa proporcionada
function fann set activation steepness $neuron	el número de neurona
function fann set activation steepness $activation_steepness	la pendiente de activación
function fann set activation steepness $layer	el número de capa
function fann set activation steepness $ann	un resource de red neuronal
function bool fann set activation steepness	devuelve true en caso de éxito o false de lo contrario
function bool fann set activation steepness resource $ann float $activation_steepness int $layer int $neuron	establece la pendiente de activaci&oacute;n el n&uacute;mero de neurona y capa proporcionados
function fann set callback $ann	un resource de red neuronal
function bool fann set callback	devuelve true en caso de éxito o false de lo contrario
function bool fann set callback resource $ann collable $callback	establece la funci&oacute;n de retrollamada a emplear durante el entrenamiento
function fann set cascade activation steepnesses $cascade_activation_steepnesses_count	el array de pendientes de activación de candidatas en cascada
function fann set cascade activation steepnesses $ann	un resource de red neuronal
function bool fann set cascade activation steepnesses	devuelve true en caso de éxito o false de lo contrario
function bool fann set cascade activation steepnesses resource $ann array $cascade_activation_steepnesses_count	establece el array de pendientes de activaci&oacute;n de candidatas en cascada
function fann set cascade candidate change fraction $cascade_candidate_change_fraction	la fracción de cambio de candidatas en cascada
function fann set cascade candidate change fraction $ann	un resource de red neuronal
function bool fann set cascade candidate change fraction	devuelve true en caso de éxito o false de lo contrario
function bool fann set cascade candidate change fraction resource $ann float $cascade_candidate_change_fraction	establece la fracci&oacute;n de cambio de candidatas en cascada
function fann set cascade candidate limit $cascade_candidate_limit	el límite de candidatas
function fann set cascade candidate limit $ann	un resource de red neuronal
function bool fann set cascade candidate limit	devuelve true en caso de éxito o false de lo contrario
function bool fann set cascade candidate limit resource $ann float $cascade_candidate_limit	establece el l&iacute;mite de candidatas
function fann set cascade candidate stagnation epochs $cascade_candidate_stagnation_epochs	el número de épocas de estancamiento de candidatas en cascada
function fann set cascade candidate stagnation epochs $ann	un resource de red neuronal
function bool fann set cascade candidate stagnation epochs	devuelve true en caso de éxito o false de lo contrario
function bool fann set cascade candidate stagnation epochs resource $ann int $cascade_candidate_stagnation_epochs	establece el n&uacute;mero de &eacute;pocas de estancamiento de candidatas en cascada
function fann set cascade max cand epochs $cascade_max_cand_epochs	el máximo de épocas de candidatas
function fann set cascade max cand epochs $ann	un resource de red neuronal
function bool fann set cascade max cand epochs	devuelve true en caso de éxito o false de lo contrario
function bool fann set cascade max cand epochs resource $ann int $cascade_max_cand_epochs	establece el m&aacute;ximo de &eacute;pocas de candidatas
function fann set cascade min cand epochs $cascade_min_cand_epochs	el máximo de mínimo de candidatas
function fann set cascade min cand epochs $ann	un resource de red neuronal
function bool fann set cascade min cand epochs	devuelve true en caso de éxito o false de lo contrario
function bool fann set cascade min cand epochs resource $ann int $cascade_min_cand_epochs	establece el m&iacute;nimo de &eacute;pocas de candidatas
function fann set cascade min out epochs $cascade_min_out_epochs	el mínimo de épocas de salida
function fann set cascade min out epochs $ann	un resource de red neuronal
function bool fann set cascade min out epochs	devuelve true en caso de éxito o false de lo contrario
function bool fann set cascade min out epochs resource $ann int $cascade_min_out_epochs	establece el m&iacute;nimo de &eacute;pocas de salida
function fann set cascade num candidate groups $cascade_num_candidate_groups	el número de grupos de candidatas
function fann set cascade num candidate groups $ann	un resource de red neuronal
function bool fann set cascade num candidate groups	devuelve true en caso de éxito o false de lo contrario
function bool fann set cascade num candidate groups resource $ann int $cascade_num_candidate_groups	establece el n&uacute;mero de grupos de candidatas
function fann set cascade output stagnation epochs $cascade_output_stagnation_epochs	el número de épocas de estancamiento de salida en cascada
function fann set cascade output stagnation epochs $ann	un resource de red neuronal
function bool fann set cascade output stagnation epochs	devuelve true en caso de éxito o false de lo contrario
function bool fann set cascade output stagnation epochs resource $ann int $cascade_output_stagnation_epochs	establece el n&uacute;mero de &eacute;pocas de estancamiento de salida en cascada
function fann set cascade weight multiplier $cascade_weight_multiplier	el multiplicador de peso
function fann set cascade weight multiplier $ann	un resource de red neuronal
function bool fann set cascade weight multiplier	devuelve true en caso de éxito o false de lo contrario
function bool fann set cascade weight multiplier resource $ann float $cascade_weight_multiplier	establece el multiplicador de peso
function fann set error log $log_file	la ruta al fichero de registro
function fann set error log $errdat	un resource de red neuronal o un resource de datos de entrenamiento de red neuronal
function void fann set error log resource $errdat string $log_file	establece d&oacute;nde registrar los errores
function fann set input scaling params $train_data	un resource de datos de entrenamiento de red neuronal
function fann set input scaling params $new_input_min	el límite inferior deseado de los datos de entrada después de escalar no seguido estrictamente
function fann set input scaling params $new_input_max	el límite superior deseado de los datos de entrada después de escalar no seguido estrictamente
function fann set input scaling params $ann	un resource de red neuronal
function bool fann set input scaling params	devuelve true en caso de éxito o false de lo contrario
function bool fann set input scaling params resource $ann resource $train_data float $new_input_min float $new_input_max	calcular los par&aacute;metros de escala de entrada para un uso futuro basados en datos de entrenamiento
function fann set learning rate $learning_rate	el índice de aprendizaje
function fann set learning rate $ann	un resource de red neuronal
function bool fann set learning rate	devuelve true en caso de éxito o false de lo contrario
function bool fann set learning rate resource $ann float $learning_rate	establece el &iacute;ndice de aprendizaje
function fann set quickprop decay $quickprop_decay	el factor de decadencia de quickprop
function fann set quickprop decay $ann	un resource de red neuronal
function bool fann set quickprop decay	devuelve true en caso de éxito o false de lo contrario
function bool fann set quickprop decay resource $ann float $quickprop_decay	establece el factor de decadencia de quickprop
function fann set quickprop mu $quickprop_mu	el factor mu
function fann set quickprop mu $ann	un resource de red neuronal
function bool fann set quickprop mu	devuelve true en caso de éxito o false de lo contrario
function bool fann set quickprop mu resource $ann float $quickprop_mu	establece el factor mu de quickprop
function fann set rprop delta min $rprop_delta_min	el tamaño de paso mínimo
function fann set rprop delta min $ann	un resource de red neuronal
function bool fann set rprop delta min	devuelve true en caso de éxito o false de lo contrario
function bool fann set rprop delta min resource $ann float $rprop_delta_min	establece el tama&ntilde;o de paso m&iacute;nimo
function fann set rprop increase factor $rprop_increase_factor	el aumento de disminución
function fann set rprop increase factor $ann	un resource de red neuronal
function bool fann set rprop increase factor	devuelve true en caso de éxito o false de lo contrario
function bool fann set rprop increase factor resource $ann float $rprop_increase_factor	establece el factor de aumento empleado durante un entrenamiento rprop
function fann set sarprop step error shift $sarprop_step_error_shift	el desplazamiento del error de paso de sarprop
function fann set sarprop step error shift $ann	un resource de red neuronal
function bool fann set sarprop step error shift	devuelve true en caso de éxito o false de lo contrario
function bool fann set sarprop step error shift resource $ann float $sarprop_step_error_shift	establece el desplazamiento del error de paso de sarprop
function fann set sarprop step error threshold factor $sarprop_step_error_threshold_factor	el factor de umbral del error de paso de sarprop
function fann set sarprop step error threshold factor $ann	un resource de red neuronal
function bool fann set sarprop step error threshold factor	devuelve true en caso de éxito o false de lo contrario
function bool fann set sarprop step error threshold factor resource $ann float $sarprop_step_error_threshold_factor	establece el factor de umbral del error de paso de sarprop
function fann set sarprop temperature $sarprop_temperature	la temperatura de sarprop
function fann set sarprop temperature $ann	un resource de red neuronal
function bool fann set sarprop temperature	devuelve true en caso de éxito o false de lo contrario
function bool fann set sarprop temperature resource $ann float $sarprop_temperature	establece la temperatura de sarprop
function fann set sarprop weight decay shift $sarprop_weight_decay_shift	el desplazamiento de decadencia del peso de sarprop
function fann set sarprop weight decay shift $ann	un resource de red neuronal
function bool fann set sarprop weight decay shift	devuelve true en caso de éxito o false de lo contrario
function bool fann set sarprop weight decay shift resource $ann float $sarprop_weight_decay_shift	establece el desplazamiento de decadencia del peso de sarprop
function fann set scaling params $ann	un resource de red neuronal
function fann set scaling params $new_input_max	el límite superior deseado de los datos de entrada después de escalar no seguido estrictamente
function fann set scaling params $new_output_min	el límite inferior deseado de los datos de salida después de escalar no seguido estrictamente
function fann set scaling params $new_input_min	el límite inferior deseado de los datos de entrada después de escalar no seguido estrictamente
function fann set scaling params $new_output_max	el límite superior deseado de los datos de salida después de escalar no seguido estrictamente
function fann set scaling params $train_data	un resource de datos de entrenamiento de red neuronal
function bool fann set scaling params	devuelve true en caso de éxito o false de lo contrario
function bool fann set scaling params resource $ann resource $train_data float $new_input_min float $new_input_max float $new_output_min float $new_output_max	calcular los par&aacute;metros de escala de entrada y salida para un uso futuro basados en datos de entrenamiento
function fann set train error function $error_function	la constante de función de error
function fann set train error function $ann	un resource de red neuronal
function bool fann set train error function	devuelve true en caso de éxito o false de lo contrario
function bool fann set train error function resource $ann int $error_function	establecer la funci&oacute;n de error empleada durante un entrenamiento
function fann set train stop function $stop_function	la constante de función de parada
function fann set train stop function $ann	un resource de red neuronal
function bool fann set train stop function	devuelve true en caso de éxito o false de lo contrario
function bool fann set train stop function resource $ann int $stop_function	establece la funci&oacute;n de parada empleada durante el entrenamiento
function fann set training algorithm $training_algorithm	la constante de algoritno de entrenamiento
function fann set training algorithm $ann	un resource de red neuronal
function bool fann set training algorithm	devuelve true en caso de éxito o false de lo contrario
function bool fann set training algorithm resource $ann int $training_algorithm	establece el algoritmo de entrenamiento
function fann set weight array $connections	un array de objetos fannconnection
function fann set weight array $ann	un resource de red neuronal
function bool fann set weight array	devuelve true en caso de éxito o false de lo contrario
function bool fann set weight array resource $ann array $connections	establecer las conexiones de la red
function fann set weight $to_neuron	la neurona donde finaliza la conexión
function fann set weight $from_neuron	la neurona donde empiza la conexión
function fann set weight $weight	el peso de la conexión
function fann set weight $ann	un resource de red neuronal
function bool fann set weight	devuelve true en caso de éxito o false de lo contrario
function bool fann set weight resource $ann int $from_neuron int $to_neuron float $weight	establecer una conexi&oacute;n de la red
function fann subset train data $length	el número de elementos a copiar
function fann subset train data $pos	la posición de inicio
function fann subset train data $data	un resource de datos de entrenamiento de red neuronal
function resource fann subset train data	devuelve un resource de datos de entrenamiento en caso de éxito o false en caso de error
function resource fann subset train data resource $data int $pos int $length	devuelve una copia de un subconjunto de los datos de entrenamiento
function fann test $desired_output	un array de salidas deseadas
function fann test $input	un array de entradas
function fann test $ann	un resource de red neuronal
function bool fann test	devuelve true en caso de éxito o false de lo contrario
function bool fann test resource $ann array $input array $desired_output	probar con un conjunto de entradas y un conjunto de salidas deseadas
function fann train on file $filename	el fichero que contiene los datos de entrenamiento
function fann train on file $desired_error	el fann_get_mse() o fann_get_bit_fail() deseados dependiendo de la función de parada elegida mediante fann_set_train_stop_function()
function fann train on file $epochs_between_reports	el número de épocas entre llamadas a funciones de retrollamada
function fann train on file $max_epochs	el número máximo de épocas que debería continuar el entrenamiento
function fann train on file $ann	un resource de red neuronal
function bool fann train on file	devuelve true en caso de éxito o false de lo contrario
function bool fann train on file resource $ann string $filename int $max_epochs int $epochs_between_reports float $desired_error	entrena un conjunto de datos completo le&iacute;do desde un fichero por un per&iacute;odo de tiempo
function fann train $desired_output	un array de salidas deseadas
function fann train $input	un array de entradas
function fann train $ann	un resource de red neuronal
function bool fann train	devuelve true en caso de éxito o false de lo contrario
function bool fann train resource $ann array $input array $desired_output	entrenar una iteraci&oacute;n con un conjunto de entradas y un conjunto de salidas deseadas
function fbsql affected rows $link_identifier	un identificador de enlace frontbase devuelto por fbsql_connect() o fbsql_pconnect()
function int fbsql affected rows	si la última consulta falló esta función devolverá -1
function int fbsql affected rows resource $link_identifier	obtiene el numero de filas afectadas en la anterior operaci&oacute;n de frontbase
function fbsql autocommit $link_identifier	un identificador de enlace frontbase devuelto por fbsql_connect() o fbsql_pconnect()
function fbsql autocommit $OnOff	si se recibe este parametro opcional se cambiará el estado del autocommit con onoff a true cada sentencia tendrá un commit automático en caso de no encontrarse errores
function bool fbsql autocommit	devuelve el estado actual del autocommit como boolean
function bool fbsql autocommit resource $link_identifier bool $OnOff	activa o desactiva el autocommit
function fbsql change user $database	si se especifica se aplicará como base de datos por defecto una vez el usuario se haya cambiado
function fbsql change user $link_identifier	un identificador de enlace frontbase devuelto por fbsql_connect() o fbsql_pconnect()
function fbsql change user $password	el nuevo password
function fbsql change user $user	el nuevo nombre de usuario
function bool fbsql change user	devuelve true en caso de éxito o false en caso de error
function bool fbsql change user string $user string $password string $database resource $link_identifier	cambia el usuario logueado en la conexi&oacute;n activa
function fbsql clob size $link_identifier	un identificador de enlace frontbase devuelto por fbsql_connect() o fbsql_pconnect()
function fbsql clob size $clob_handle	un handle clob devuelto por fbsql_create_clob()
function int fbsql clob size	devuelve el tamaño del clob como un integer o false en caso de error
function int fbsql clob size string $clob_handle resource $link_identifier	obtiene el tama&ntilde;o de un clob
function fbsql close $link_identifier	un identificador de enlace frontbase devuelto por fbsql_connect() o fbsql_pconnect()
function bool fbsql close	devuelve true en caso de éxito o false en caso de error
function bool fbsql close resource $link_identifier	cierra la conexi&oacute;n frontbase
function fbsql commit $link_identifier	un identificador de enlace frontbase devuelto por fbsql_connect() o fbsql_pconnect()
function bool fbsql commit	devuelve true en caso de éxito o false en caso de error
function bool fbsql commit resource $link_identifier	ejecuta un commit de la transacci&oacute;n sobre la base de datos
function fbsql create clob $link_identifier	un identificador de enlace frontbase devuelto por fbsql_connect() o fbsql_pconnect()
function fbsql create clob $clob_data	los datos clob
function string fbsql create clob	devuelve un handle a un nuevo recurso clob que puede usarse con comandos insert y update para almacenar el clob en la base de datos
function string fbsql create clob string $clob_data resource $link_identifier	crea un clob
function fbsql data seek $row_number	el número de fila
function fbsql data seek $result	un identificador de resultado devuelto por fbsql_query() o fbsql_db_query()
function bool fbsql data seek	devuelve true en caso de éxito o false en caso de error
function bool fbsql data seek resource $result int $row_number	mueve el puntero interno de resultado
function fbsql database password $link_identifier	un identificador de enlace frontbase devuelto por fbsql_connect() o fbsql_pconnect()
function fbsql database password $database_password	el database password en un string
function string fbsql database password	devuelve el database password asociado con el identificador de enlace
function string fbsql database password resource $link_identifier string $database_password	asigna o recupera el password de una base de datos frontbase
function fbsql database $link_identifier	un identificador de enlace frontbase devuelto por fbsql_connect() o fbsql_pconnect()
function fbsql database $database	el nombre de la base de datos
function string fbsql database	devuelve el nombre de la base de datos usada en esta conexión
function string fbsql database resource $link_identifier string $database	obtiene o especifica la base de datos usada por la conexi&oacute;n
function fbsql db query $query	la consulta sql a ejecutar
function fbsql db query $link_identifier	un identificador de enlace frontbase devuelto por fbsql_connect() o fbsql_pconnect()
function fbsql db query $database	la base de datos a seleccionar
function resource fbsql db query	devuelve el identificador de resultado positivo de la consulta o false si es error
function resource fbsql db query string $database string $query resource $link_identifier	ejecuta una consulta a frontbase
function fbsql drop db $link_identifier	un identificador de enlace frontbase devuelto por fbsql_connect() o fbsql_pconnect()
function fbsql drop db $database_name	el nombre de la base de datos como string
function bool fbsql drop db	devuelve true en caso de éxito o false en caso de error
function bool fbsql drop db string $database_name resource $link_identifier	elimina drop una base de datos frontbase
function fbsql errno $link_identifier	un identificador de enlace frontbase devuelto por fbsql_connect() o fbsql_pconnect()
function int fbsql errno	devuelve el número de error de la última función fbsql o 0 cero si no hubo error
function int fbsql errno resource $link_identifier	devuelve el n&uacute;mero de error de la &uacute;ltima operaci&oacute;n
function fbsql error $link_identifier	un identificador de enlace frontbase devuelto por fbsql_connect() o fbsql_pconnect()
function string fbsql error	returns the error text from the last fbsql function or the empty string if no error occurred
function string fbsql error resource $link_identifier	devuelve el mensaje de error de la &uacute;ltima operaci&oacute;n
function fbsql fetch assoc $result	un identificador de resultado devuelto por fbsql_query() o fbsql_db_query()
function array fbsql fetch assoc	devuelve un array que corresponde a la fila obtenida o false si no quedan más filas
function array fbsql fetch assoc resource $result	obtiene una fila de resultados como array asociativo
function fbsql fetch field $field_offset	el offset numerico del campo
function fbsql fetch field $result	un identificador de resultado devuelto por fbsql_query() o fbsql_db_query()
function object fbsql fetch field	devuelve un objeto conteniendo la información del campo o false en caso de error
function object fbsql fetch field resource $result int $field_offset	obtiene informaci&oacute;n de columnas de un resultado y la devuelve como objeto
function fbsql fetch lengths $result	un identificador de resultado devuelto por fbsql_query() o fbsql_db_query()
function array fbsql fetch lengths	devuelve un array desde offset 0 que corresponde a las longitudes de cada campo en la última fila obtenida por fbsql_fetch_row() o false en caso de error
function array fbsql fetch lengths resource $result	obtiene la longitud de cada salida en un resultado
function fbsql fetch object $result	un identificador de resultado devuelto por fbsql_query() o fbsql_db_query()
function object fbsql fetch object	devuelve un objeto cuyos atributos corresponden a la fila obtenida o false si no quedan más filas
function object fbsql fetch object resource $result	obtiene una fila de resultados como objeto
function fbsql fetch row $result	un identificador de resultado devuelto por fbsql_query() o fbsql_db_query()
function array fbsql fetch row	devuelve el array que corresponde a la fila obtenida donde cada columna se guarda en un offset comenzando desde 0 o false si no hay más filas
function array fbsql fetch row resource $result	obtiene una fila de resultados como array enumerado
function fbsql field len $result	un puntero a resultado devuelto por fbsql_list_fields()
function fbsql field len $field_offset	el offset del campo
function int fbsql field len	devuelve la longitud de campo especificado
function int fbsql field len resource $result int $field_offset	devuleve la longitud de un campo especificado
function fbsql field seek $result	un identificador de resultado devuelto por fbsql_query() o fbsql_db_query()
function fbsql field seek $field_offset	la posición numérica del campo
function bool fbsql field seek	devuelve true en caso de éxito o false en caso de error
function bool fbsql field seek resource $result int $field_offset	mueve el puntero interno de resultado al campo con la posici&oacute;n especificada
function fbsql field table $field_offset	la posición offset del campo
function fbsql field table $result	un identificador de resultado devuelto por fbsql_query() o fbsql_db_query()
function string fbsql field table	devuelve el nombre de la tabla como un string
function string fbsql field table resource $result int $field_offset	obtiene el nombre de la tabla donde se encuentra el campo especificado
function fbsql free result $result	un identificador de resultado devuelto por fbsql_query() o fbsql_db_query()
function bool fbsql free result	devuelve true en caso de éxito o false en caso de error
function bool fbsql free result resource $result	libera la memoria de resultados
function fbsql hostname $host_name	si se recibe se establecerá como nuevo nombre de host de la conexión
function fbsql hostname $link_identifier	un identificador de enlace frontbase devuelto por fbsql_connect() o fbsql_pconnect()
function string fbsql hostname	devuelve el nombre de host actual de la conexión
function string fbsql hostname resource $link_identifier string $host_name	obtiene o establece el nombre host de una conexi&oacute;n
function fbsql insert id $link_identifier	un identificador de enlace frontbase devuelto por fbsql_connect() o fbsql_pconnect()
function int fbsql insert id	devuelve el id generado por la anterior consulta insert o 0 si la consulta anterior no generó un valor default unique
function int fbsql insert id resource $link_identifier	obtiene el valor id generado por la anterior operaci&oacute;n insert
function fbsql list dbs $link_identifier	un identificador de enlace frontbase devuelto por fbsql_connect() o fbsql_pconnect()
function resource fbsql list dbs	devuelve un puntero a resultado false si hay error
function resource fbsql list dbs resource $link_identifier	lista las bases de datos disponibles en un servidor frontbase
function fbsql list fields $table_name	el nombre de la tabla
function fbsql list fields $database_name	el nombre de la base de datos
function fbsql list fields $link_identifier	un identificador de enlace frontbase devuelto por fbsql_connect() o fbsql_pconnect()
function resource fbsql list fields	devuelve un puntero a resultado que puede usarse con las funciones fbsql_field_xxx o false si hay error
function resource fbsql list fields string $database_name string $table_name resource $link_identifier	lista los campos de un resultado de frontbase
function fbsql next result $result	un identificador de resultado devuelto por fbsql_query() o fbsql_db_query()
function bool fbsql next result	retorna true si un conjunto de resultados esta disponible o false de otro modo
function bool fbsql next result resource $result	mover el puntero del resultado interno por el resultado de al lado
function fbsql num fields $result	un identificador de resultado devuelto por fbsql_query() o fbsql_db_query()
function int fbsql num fields	devuelve el número de campos como entero
function int fbsql num fields resource $result	obtener el n&uacute;mero de campos del resultado
function fbsql num rows $result	un identificador de resultado devuelto por fbsql_query() o fbsql_db_query()
function int fbsql num rows	devuelve el número de filas devueltas por el último select
function int fbsql num rows resource $result	obtener el n&uacute;mero de filas del resultado
function fbsql read blob $blob_handle	un handle blob devuelto por fbsql_create_blob()
function fbsql read blob $link_identifier	un identificador de enlace frontbase devuelto por fbsql_connect() o fbsql_pconnect()
function string fbsql read blob	devuelve una cadena conteniendo los datos blob especificados
function string fbsql read blob string $blob_handle resource $link_identifier	lee un blob de la base de datos
function fbsql read clob $link_identifier	un identificador de enlace frontbase devuelto por fbsql_connect() o fbsql_pconnect()
function fbsql read clob $clob_handle	un handle clob devuelto por fbsql_create_clob()
function string fbsql read clob	devuelve una cadena conteniendo los datos clob especificados
function string fbsql read clob string $clob_handle resource $link_identifier	lee un clob de la base de datos
function fbsql result $result	un identificador de resultado devuelto por fbsql_query() o fbsql_db_query()
function fbsql result $field	puede ser la posición o el nombre del campo o el nombre de la tabla punto nombre del campo nombredetabla
function mixed fbsql result resource $result int $row mixed $field	obtiene los datos de resultado
function fbsql rollback $link_identifier	un identificador de enlace frontbase devuelto por fbsql_connect() o fbsql_pconnect()
function bool fbsql rollback	devuelve true en caso de éxito o false en caso de error
function bool fbsql rollback resource $link_identifier	retrocede una transacci&oacute;n a la base de datos
function fbsql rows fetched $result	un identificador de resultado devuelto por fbsql_query() o fbsql_db_query()
function int fbsql rows fetched	devuelve el número de filas como entero
function int fbsql rows fetched resource $result	obtiene el n&uacute;mero de filas afectadas por la &uacute;ltima consulta
function fbsql set password $old_password	la antigua contraseña a sustituir
function fbsql set password $link_identifier	un identificador de enlace frontbase devuelto por fbsql_connect() o fbsql_pconnect()
function fbsql set password $user	el nombre de usuario
function fbsql set password $password	la nueva contraseña a asignar
function bool fbsql set password	devuelve true en caso de éxito o false en caso de error
function bool fbsql set password resource $link_identifier string $user string $password string $old_password	cambia la contrase&ntilde;a para el usuario especificado
function fbsql start db $database_name	el nombre de la base de datos
function fbsql start db $link_identifier	un identificador de enlace frontbase devuelto por fbsql_connect() o fbsql_pconnect()
function bool fbsql start db	devuelve true en caso de éxito o false en caso de error
function bool fbsql start db string $database_name resource $link_identifier string $database_options	inicia una base de datos en un servidor local o remoto
function fbsql table name $index	un integer indicando el índice de la tabla actual
function fbsql table name $result	un puntero a resultado devuelto por fbsql_list_tables()
function string fbsql table name	devuelve el nombre de la tabla como una cadena
function string fbsql table name resource $result int $index	obtiene el nombre de una tabla
function fdf add doc javascript $script_code	código del script
function fdf add doc javascript $script_name	nombre del script
function fdf add doc javascript $fdf_document	manejador de documento fdf devuelto por fdf_create() fdf_open() o por fdf_open_string()
function bool fdf add doc javascript	devuelve true en caso de éxito o false en caso de error
function bool fdf add doc javascript resource $fdf_document string $script_name string $script_code	a&ntilde;adir c&oacute;digo javascript al documento fdf
function resource fdf create	devuelve un gestor de documento fdf o false en caso de error
function resource fdf create	crear un nuevo documento fdf
function fdf error $error_code	código de error obtenido con fdf_errno()
function string fdf error	devuelve el mensaje de error en forma de string o el texto no error si no hubo ningún error
function string fdf error int $error_code	consultar la descripci&oacute;n de un c&oacute;digo de error fdf
function fdf get ap $fdf_document	manejador de documentos fdf devuelto por fdf_create() fdf_open() o por fdf_open_string()
function fdf get ap $face	los valores posibles son fdfnormalap fdfrolloverap o fdfdownap
function fdf get ap $filename	nombre del fichero en el que se guardará la publicación
function bool fdf get ap	devuelve true en caso de éxito o false en caso de error
function bool fdf get ap resource $fdf_document string $field int $face string $filename	consultar la publicaci&oacute;n de un campo
function fdf get attachment $fdf_document	manejador de documentos fdf devuelto por fdf_create() fdf_open() o por fdf_open_string()
function fdf get attachment $savepath	puede ser o bien el nombre de un fichero o bien el de un directorio existente en el que creará usando el nombre original del fichero
function array fdf get attachment	el array devuelto contiene los siguientes campos: path - ruta donde se ha almacenado size - tamaño del fichero en bytes type - si se proporcionó en el fdf mimetype
function array fdf get attachment resource $fdf_document string $fieldname string $savepath	extraer un fichero subido por fdf
function fdf get encoding $fdf_document	manejador de documentos fdf devuelto por fdf_create() fdf_open() o por fdf_open_string()
function string fdf get encoding	devuelve la codificación en forma de string
function string fdf get encoding resource $fdf_document	consultar el valor de la clave / encoding
function fdf get status $fdf_document	el gestor de documento fdf devuelto por fdf_create() fdf_open() o fdf_open_string()
function string fdf get status	devuelve el valor de la clave como una cadena
function string fdf get status resource $fdf_document	obtener el valor de la clave / status
function fdf get version $fdf_document	manejador de documentos fdf devuelto por fdf_create() fdf_open() o por fdf_open_string()
function string fdf get version	devuelve la versión en forma de string
function string fdf get version resource $fdf_document	consulta el n&uacute;mero de versi&oacute;n de la api o de un fichero fdf
function void fdf header	establecer cabeceras de salida espec&iacute;ficas de fdf
function fdf next field name $fieldname	nombre del campo fdf como una cadena
function fdf next field name $fdf_document	el gestor de documento fdf devuelto por fdf_create() fdf_open() o fdf_open_string()
function string fdf next field name	devuelve el nombre de campo como una cadena
function string fdf next field name resource $fdf_document string $fieldname	obtener el siguiente nombre de campo
function fdf save $filename	si se define el fdf resultante será escrito en este parámetro
function fdf save $fdf_document	el gestor de documento fdf devuelto por fdf_create() fdf_open() o fdf_open_string()
function bool fdf save	devuelve true en caso de éxito o false en caso de error
function bool fdf save resource $fdf_document string $filename	guardar un documento fdf
function fdf set ap $face	los valores posibles son fdfnormalap fdfrolloverap y fdfdownap
function fdf set ap $fdf_document	el gestor de documento fdf devuelto por fdf_create() fdf_open() o fdf_open_string()
function bool fdf set ap	devuelve true en caso de éxito o false en caso de error
function bool fdf set ap resource $fdf_document string $field_name int $face string $filename int $page_number	establecer la apariencia de un campo
function fdf set encoding $fdf_document	manejador de documentos fdf devuelto por fdf_create() fdf_open() o por fdf_open_string()
function fdf set encoding $encoding	nombre de codicación
function bool fdf set encoding	devuelve true en caso de éxito o false en caso de error
function bool fdf set encoding resource $fdf_document string $encoding	asignar codificaci&oacute;n de caracteres de fdf
function fdf set file $url	debe ser una url absoluta
function fdf set file $fdf_document	el gestor de documento fdf devuelto por fdf_create() fdf_open() o fdf_open_string()
function fdf set file $target_frame	use este parámetro para especificar el marco en el cual desplegar el documento
function bool fdf set file	devuelve true en caso de éxito o false en caso de error
function bool fdf set file resource $fdf_document string $url string $target_frame	establecer el documento pdf en donde desplegar datos fdf
function fdf set javascript action $fdf_document	manejador de documentos fdf devuelto por fdf_create() fdf_open() o por fdf_open_string()
function fdf set javascript action $fieldname	nombre del campo fdf en forma de string
function bool fdf set javascript action	devuelve true en caso de éxito o false en caso de error
function bool fdf set javascript action resource $fdf_document string $fieldname int $trigger string $script	a&ntilde;adir una acci&oacute;n javascript a un campo
function fdf set opt $fdf_document	manejador de documentos fdf devuelto por fdf_create() fdf_open() o por fdf_open_string()
function fdf set opt $fieldname	nombre del campo fdf en forma de string
function bool fdf set opt	devuelve true en caso de éxito o false en caso de error
function bool fdf set opt resource $fdf_document string $fieldname int $element string $str1 string $str2	establecer una opci&oacute;n sobre un campo
function fdf set status $fdf_document	el gestor de documento fdf devuelto por fdf_create() fdf_open() o fdf_open_string()
function bool fdf set status	devuelve true en caso de éxito o false en caso de error
function bool fdf set status resource $fdf_document string $status	establecer el valor de la clave / status
function fdf set submit form action $fdf_document	manejador de documentos fdf devuelto por fdf_create() fdf_open() o por fdf_open_string()
function fdf set submit form action $fieldname	nombre del campo fdf en forma de string
function bool fdf set submit form action	devuelve true en caso de éxito o false en caso de error
function bool fdf set submit form action resource $fdf_document string $fieldname int $trigger string $script int $flags	asignar acci&oacute;n a un campo de formulario al enviarse
function fdf set target frame $fdf_document	manejador de documentos fdf devuelto por fdf_create() fdf_open() o por fdf_open_string()
function fdf set target frame $frame_name	nombre del contenedor en forma de string
function bool fdf set target frame	devuelve true en caso de éxito o false en caso de error
function bool fdf set target frame resource $fdf_document string $frame_name	definir contenedor en el que mostrar el formulario
function fdf set value $value	este parámetro será almacenado como una cadena a menos que sea una matriz
function fdf set value $fieldname	nombre del campo fdf como una cadena
function fdf set value $fdf_document	el gestor de documento fdf devuelto por fdf_create() fdf_open() o fdf_open_string()
function fdf set value $isName	nota : en versiones antiguas del conjunto de herramientas fdf el último parámetro determinada si el valor del campo era convertido a un nombre pdf = 1 o usado como cadena pdf = 0
function bool fdf set value	devuelve true en caso de éxito o false en caso de error
function bool fdf set value resource $fdf_document string $fieldname mixed $value int $isName	establecer el valor de un campo
function fdf set version $version	nombre de versión
function fdf set version $fdf_document	manejador de documentos de fdf devuelto por fdf_create() fdf_open() o por fdf_open_string()
function bool fdf set version	devuelve true en caso de éxito o false en caso de error
function bool fdf set version resource $fdf_document string $version	asignar n&uacute;mero de versi&oacute;n a un fichero fdf
function feof $handle	el fichero al que se apunta debe ser válido y debe apuntar a un fichero abierto por fopen() o fsockopen() y que todavía no esté cerrado por fclose()
function bool feof	devuelve true si el puntero al archivo está en eof o produce un error incluido el tiempo de espera del socket ; de otro modo devuelve false
function bool feof resource $handle	comprueba si el puntero a un archivo est&aacute; al final del archivo
function fgetc $handle	el fichero al que se apunta debe ser válido y debe apuntar a un fichero abierto por fopen() o fsockopen() y que todavía no esté cerrado por fclose()
function string fgetc	devuelve una cadena que contiene un sólo carácter leído desde el archivo apuntado por handle
function string fgetc resource $handle	obtiene un car&aacute;cter de un puntero a un archivo
function fgets $handle	el fichero al que se apunta debe ser válido y debe apuntar a un fichero abierto por fopen() o fsockopen() y que todavía no esté cerrado por fclose()
function fgets $length	la lectura termina cuando se han leído length - 1 bytes o una nueva línea la cual está incluida en el valor de retorno o un eof lo que suceda primero
function string fgets	devuelve una cadena de hasta length - 1 bytes leídos desde el fichero apuntado por handle
function string fgets resource $handle int $length	obtiene una l&iacute;nea desde el puntero a un fichero
function fgetss $handle	el fichero al que se apunta debe ser válido y debe apuntar a un fichero abierto por fopen() o fsockopen() y que todavía no esté cerrado por fclose()
function fgetss $allowable_tags	puede usar el tercer parámetro opcional para especificar las etiquetas que no deberían ser eliminadas
function fgetss $length	longitud de la información que va a ser recuperada
function string fgetss	devuelve una cadena de hasta length - 1 bytes leídos desde el archivo apuntado por handle con todo el código html y php eliminado
function string fgetss resource $handle int $length string $allowable_tags	obtiene un l&iacute;nea desde un puntero a un archivo y elimina las etiquetas html
function file exists $filename	ruta del fichero o directorio
function bool file exists	devuelve true si el fichero o directorio especificado por filename existe; false si no
function bool file exists string $filename	comprueba si existe un fichero o directorio
function file get contents $filename	nombre del fichero a leer
function file get contents $use_include_path	nota : a partir de php 5 se puede usar la constante file_use_include_path para lanzar la búsqueda en include_path
function file get contents $maxlen	la longitud máxima de los datos leídos
function file get contents $context	un recurso de contexto válido creado con stream_context_create()
function file get contents $offset	el índice donde comienza la lectura en el flujo original
function string file get contents	esta función devuelve los datos leídos o false en caso de error
function string file get contents string $filename bool $use_include_path resource $context int $offset int $maxlen	transmite un fichero entero a una cadena
function file put contents $flags	el valor de flags puede ser cualquier combinación de las siguientes banderas unidas con el operador binario or |
function file put contents $data	la información a escribir
function file put contents $filename	ruta del fichero donde se escribe la información
function file put contents $context	un recurso de contexto válido creado con stream_context_create()
function int file put contents	esta función devuelve el número de bytes que fueron escritos en el fichero o false en caso de error
function int file put contents string $filename mixed $data int $flags resource $context	escribe una cadena a un fichero
function filectime $filename	ruta del archivo
function int filectime	devuelve el momento en que se modificó un archivo por última vez o false en caso de error
function int filectime string $filename	obtiene el momento del &uacute;ltimo cambio del i-nodo de un archivo
function filegroup $filename	ruta del archivo
function int filegroup	devuelve el id de grupo del archivo o false en caso de que se produzca un error
function int filegroup string $filename	obtiene el grupo de un archivo
function int filepro fieldcount	devuelve el número de campos en la base de datos abierta filepro o false si ocurre un error
function int filepro fieldcount	encuentra cuantos campos hay en una base de datos filepro
function filepro fieldname $field_number	el número de campo
function string filepro fieldname	devuelve el nombre del campo como cadena o false en caso de error
function string filepro fieldname int $field_number	obtiene el nombre de un campo
function filepro fieldtype $field_number	el campo numérico
function string filepro fieldtype	devuelve el tipo de campo de edición como cadena o false en caso de error
function string filepro fieldtype int $field_number	obtiene el tipo de campo
function filepro fieldwidth $field_number	el número del campo
function int filepro fieldwidth	devuelve el ancho de un campo como entero o false en caso de errores
function int filepro fieldwidth int $field_number	obtiene el ancho de un campo
function filepro retrieve $field_number	el número de la columna
function filepro retrieve $row_number	el número de la fila
function string filepro retrieve	devuelve los datos especificados o false en caso de errores
function string filepro retrieve int $row_number int $field_number	obtiene datos de una base de datos filepro
function int filepro rowcount	devuelve el número de columnas de una base de datos abierta filepro o false en caso de errores
function int filepro rowcount	averig&uuml;a cuantas filas hay en una base de datos filepro
function filepro $directory	el directorio del mapa
function bool filepro	devuelve true en caso de éxito o false en caso de error
function bool filepro string $directory	lee y verifica el mapa del fichero
function filesize $filename	la ruta del fichero
function int filesize	devuelve el tamaño del fichero en bytes o false y genera un error de nivel e_warning en caso de que se produzca un error
function int filesize string $filename	obtiene el tama&ntilde;o de un fichero
function filter var array $definition	un array definiendo los argumentos
function filter var array $data	un array asociativo de claves en formato strings que contiene los datos a filtrar
function filter var array $add_empty	alade claves faltantes como null al valor devueltol
function mixed filter var array	en caso de éxito un array que contiene los valores de las variables que se han pedido o false en caso de fallo
function mixed filter var array array $data mixed $definition bool $add_empty	retorna m&uacute;ltiple variables y opcionalmente las filtra
function flock $handle	resource que apunta a un fichero del sitema que normalmente es creado usando fopen()
function flock $wouldblock	el tercer argumento opcional se establece a 1 si el bloqueo hará que la función quede esperando condición de errno ewouldblock
function flock $operation	operation es una operación de las siguientes: lock_sh para adquirir un bloqueo compartido lectura
function bool flock	devuelve true en caso de éxito o false en caso de error
function bool flock resource $handle int $operation int $wouldblock	bloqueo de ficheros recomendado y portable
function void flush	vaciar el b&uacute;fer de salida del sistema
function fopen $mode	el parámetro mode especifica el tipo de acceso que se necesita para el flujo
function fopen $use_include_path	el tercer parámetro opcional use_include_path puede ser establecido a 1 o true si se desea buscar un fichero en include_path también
function fopen $filename	si filename está en la forma esquema: / /
function fopen $context	nota : soporte para context fue añadido en php 5
function resource fopen	devuelve un recurso de puntero a fichero si tiene éxito o false si se produjo un error
function resource fopen string $filename string $mode bool $use_include_path resource $context	abre un fichero o un url
function fpassthru $handle	el fichero al que se apunta debe ser válido y debe apuntar a un fichero abierto por fopen() o fsockopen() y que todavía no esté cerrado por fclose()
function int fpassthru	si se produjo un error fpassthru() devuelve false
function int fpassthru resource $handle	escribe toda la informaci&oacute;n restante de un puntero a un archivo
function fputcsv $escape_char	el parámetro opcional escape_char establece el carácter de escape un carácter solamente
function fputcsv $delimiter	el parámetro opcional delimiter establece el delimitador de campos un carácter sólamente
function fputcsv $handle	el fichero al que se apunta debe ser válido y debe apuntar a un fichero abierto por fopen() o fsockopen() y que todavía no esté cerrado por fclose()
function fputcsv $fields	un array de valores
function fputcsv $enclosure	el parámetro opcional enclosure establece el carácter circundante de cada campo un carácter sólmente
function int fputcsv	devuelve la longitud del string escrito o false en caso de error
function int fputcsv resource $handle array $fields string $delimiter string $enclosure string $escape_char	dar formato csv a una l&iacute;nea y escribirla en un puntero a un fichero
function fribidi log2vis $str	cadena de texto lógico
function fribidi log2vis $direction	uno de entre fribidi_rtl fribidi_ltr o fribidi_auto
function fribidi log2vis $charset	una de las constantes fribidi_charset_xxx
function string fribidi log2vis	devuelve la cadena de texto visual en caso de éxito o false en caso de error
function string fribidi log2vis string $str string $direction int $charset	convierte una cadena de texto l&oacute;gica a una visual
function fscanf	los valores opcionales asignados
function fscanf $format	el formato especificado como se describe en la documentación de sprintf()
function fscanf $handle	resource que apunta a un fichero del sitema que normalmente es creado usando fopen()
function mixed fscanf	si sólo se pasaron dos parámetros a esta función los valores analizados serán devueltos como una matriz
function mixed fscanf resource $handle string $format	analiza la entrada desde un archivo de acuerdo a un formato
function fseek $handle	resource que apunta a un fichero del sitema que normalmente es creado usando fopen()
function fseek $whence	los valores de whence son: seek_set - establece la posición igual a offset bytes
function fseek $offset	el índice
function int fseek	si tiene éxito devuelve 0; de otro modo devuelve -1
function int fseek resource $handle int $offset int $whence	busca sobre un puntero a un fichero
function fstat $handle	resource que apunta a un fichero del sitema que normalmente es creado usando fopen()
function array fstat	devuelve un matriz con las estadísticas del archivo; el formato de la matriz está descrito en la página del manual de stat()
function array fstat resource $handle	obtiene informaci&oacute;n acerca de un archivo usando un puntero al archivo abierto
function ftell $handle	el puntero al fichero debe ser válido y debe apuntar a un fichero abierto con éxito por fopen() o popen()
function int ftell	devuelve la posición del puntero al fichero referido por handle como un entero; esto es su índice dentro del flujo de fichero
function int ftell resource $handle	devuelve la posici&oacute;n de lectura / escritura actual del puntero a un fichero
function ftok $proj	identificador de proyecto
function ftok $pathname	ruta a un archivo accedible
function int ftok	si se tuvo éxito el valor devuelto será el valor de la clave creada de otro modo se devolverá -1
function int ftok string $pathname string $proj	convertir un nombre de ruta y un identificador de proyecto a una clave ipc de system v
function ftp alloc $filesize	el número de bytes a reservar
function ftp alloc $ftp_stream	el identificador de enlace de la conexión ftp
function ftp alloc $result	una representación textual de la respuesta de los servidores será devuelta por referencia en result si se proporciona una variable
function bool ftp alloc	devuelve true en caso de éxito o false en caso de error
function bool ftp alloc resource $ftp_stream int $filesize string $result	reserva espacio para que un archivo sea cargado
function ftp cdup $ftp_stream	el identificador de enlace de la conexión ftp
function bool ftp cdup	devuelve true en caso de éxito o false en caso de error
function bool ftp cdup resource $ftp_stream	vuelve al directorio padre
function ftp chmod $mode	los nuevos permisos dados como un valor octal
function ftp chmod $ftp_stream	el identificador de enlace de la conexión ftp
function ftp chmod $filename	el archivo remoto
function int ftp chmod	devuelve los nuevos permisos del archivo en caso de éxito o false en caso de error
function int ftp chmod resource $ftp_stream int $mode string $filename	establecer permisos en un archivo via ftp
function ftp close $ftp_stream	el identificador de enlace de la conexión ftp
function bool ftp close	devuelve true en caso de éxito o false en caso de error
function bool ftp close resource $ftp_stream	cierra una conexi&oacute;n ftp
function ftp delete $ftp_stream	el identificador de enlace de la conexión ftp
function ftp delete $path	el archivo a eliminar
function bool ftp delete	devuelve true en caso de éxito o false en caso de error
function bool ftp delete resource $ftp_stream string $path	elimina un archivo en el servidor ftp
function ftp exec $command	el comando a ejecutar
function ftp exec $ftp_stream	el identificador de enlace de la conexión ftp
function bool ftp exec	devuelve true si el comando se ha realizado correctamente el servidor envía el código de respuesta: 200 ; en caso contrario devuelve false
function bool ftp exec resource $ftp_stream string $command	solicita la ejecuci&oacute;n de un comando en el servidor ftp
function ftp fget $remote_file	la ruta del archivo remoto
function ftp fget $ftp_stream	el identificador de enlace de la conexión ftp
function ftp fget $mode	el modo de transferencia
function ftp fget $resumepos	la posición desde la cual se empieza a descargar el archivo remoto
function ftp fget $handle	un apuntador del archivo abierto en el cual almacenar los datos
function bool ftp fget	devuelve true en caso de éxito o false en caso de error
function bool ftp fget resource $ftp_stream resource $handle string $remote_file int $mode int $resumepos	descarga un archivo desde el servidor ftp y lo guarda en un archivo abierto
function ftp get $local_file	la ruta del archivo local será reemplazado si el archivo ya existe
function ftp get $ftp_stream	el identificador de enlace de la conexión ftp
function ftp get $mode	el modo de transferencia
function ftp get $resumepos	la posición para el comienzo de la descarga en el archivo remoto
function ftp get $remote_file	la ruta del archivo remoto
function bool ftp get	devuelve true en caso de éxito o false en caso de error
function bool ftp get resource $ftp_stream string $local_file string $remote_file int $mode int $resumepos	descarga un archivo desde el servidor ftp
function ftp login $password	la contraseña pass
function ftp login $ftp_stream	el identificador de enlace de la conexión ftp
function ftp login $username	el nombre de usuario user
function bool ftp login	devuelve true en caso de éxito o false en caso de error
function bool ftp login resource $ftp_stream string $username string $password	inicia sesi&oacute;n en una conexi&oacute;n ftp
function ftp mdtm $ftp_stream	el identificador de enlace de la conexión ftp
function ftp mdtm $remote_file	el archivo de la que extraer el tiempo de la última modificación
function int ftp mdtm	devuelve el tiempo de la última modificación como una marca de tiempo unix en caso de tener éxito o -1 si se produce un error
function int ftp mdtm resource $ftp_stream string $remote_file	devuelve el tiempo de la &uacute;ltima modificaci&oacute;n del archivo dado
function ftp nb continue $ftp_stream	el identificador de enlace de la conexión ftp
function int ftp nb continue	devuelve ftp_failed o ftp_finished o ftp_moredata
function int ftp nb continue resource $ftp_stream	contin&uacute;a recuperando / enviando un archivo modo no-bloqueo
function ftp nb fput $remote_file	la ruta del archivo remoto
function ftp nb fput $ftp_stream	el identificador de enlace de la conexión ftp
function ftp nb fput $mode	el modo de transferencia
function ftp nb fput $handle	un apuntador de archivo abierto en el archivo local
function ftp nb fput $startpos	la posición en el archivo remoto para empezar a subirlo
function int ftp nb fput	devuelve ftp_failed o ftp_finished o ftp_moredata
function int ftp nb fput resource $ftp_stream string $remote_file resource $handle int $mode int $startpos	almacena un archivo desde un archivo abierto en el servidor ftp modo no-bloqueo
function ftp nb get $mode	el modo de transferencia
function ftp nb get $remote_file	la ruta del archivo remoto
function ftp nb get $ftp_stream	el identificador de enlace de la conexión ftp
function ftp nb get $local_file	la ruta del archivo local se sobrescribirá si el archivo ya existe
function ftp nb get $resumepos	posición en el fichero remoto en donde empezar la descarga
function int ftp nb get	devuelve ftp_failed o ftp_finished o ftp_moredata
function int ftp nb get resource $ftp_stream string $local_file string $remote_file int $mode int $resumepos	recupera un archivo desde el servidor ftp y lo escribe en un archivo local modo no-bloqueo
function ftp nb put $remote_file	la ruta del archivo remoto
function ftp nb put $ftp_stream	el identificador de enlace de la conexión ftp
function ftp nb put $mode	el modo de transferencia
function ftp nb put $local_file	la ruta del archivo local
function ftp nb put $startpos	la posición en el archivo remoto para empezar a subirlo
function int ftp nb put	devuelve ftp_failed o ftp_finished o ftp_moredata
function int ftp nb put resource $ftp_stream string $remote_file string $local_file int $mode int $startpos	almacena un archivo en el servidor ftp modo no-bloqueo
function ftp put $remote_file	la ruta del archivo remoto
function ftp put $ftp_stream	el identificador de enlace de la conexión ftp
function ftp put $mode	el modo de transferencia
function ftp put $local_file	la ruta del archivo local
function ftp put $startpos	la posición en el archivo remoto para empezar a subirlo
function bool ftp put	devuelve true en caso de éxito o false en caso de error
function bool ftp put resource $ftp_stream string $remote_file string $local_file int $mode int $startpos	carga un archivo al servidor ftp
function ftp raw $command	el comando a ejecutar
function ftp raw $ftp_stream	el identificador de enlace de la conexión ftp
function array ftp raw	devuelve la respuesta del servidor como una matriz de cadenas
function array ftp raw resource $ftp_stream string $command	env&iacute;a un comando arbitrario a un servidor ftp
function ftp rmdir $directory	el directorio a borrar
function ftp rmdir $ftp_stream	el identificador de enlace de la conexión ftp
function bool ftp rmdir	devuelve true en caso de éxito o false en caso de error
function bool ftp rmdir resource $ftp_stream string $directory	elimina un directorio
function ftp site $ftp_stream	el identificador de enlace de la conexión ftp
function ftp site $command	el comando site
function bool ftp site	devuelve true en caso de éxito o false en caso de error
function bool ftp site resource $ftp_stream string $command	env&iacute;a un comando site al servidor
function ftp size $ftp_stream	el identificador de enlace de la conexión ftp
function ftp size $remote_file	el archivo remoto
function int ftp size	devuelve el tamaño del archivo en caso de éxito o -1 en caso de error
function int ftp size resource $ftp_stream string $remote_file	devuelve el tama&ntilde;o del archivo dado
function ftp systype $ftp_stream	el identificador de enlace de la conexión ftp
function string ftp systype	devuelve el tipo de sistema remoto o false en caso de error
function string ftp systype resource $ftp_stream	devuelve el identificador del tipo de sistema del servidor ftp remoto
function ftruncate $handle	el puntero al archivo
function ftruncate $size	el tamaño a truncar
function bool ftruncate	devuelve true en caso de éxito o false en caso de error
function bool ftruncate resource $handle int $size	trunca un archivo a una longitud dada
function func get arg $arg_num	el índice del argumento
function mixed func get arg	devuelve el argumento especificado o false en caso de error
function mixed func get arg int $arg_num	devuelve un elemento de una lista de argumentos
function int func num args	devuelve el número de argumentos pasados a la función actual definida por el usuario
function int func num args	devuelve el n&uacute;mero de argumentos pasados a la funci&oacute;n
function int gc collect cycles	devuelve el número de ciclos de recogida
function int gc collect cycles	fuerza la recolecci&oacute;n de los ciclos de basura existentes
function void gc enable	activa el colector de referencia circular
function bool gc enabled	devuelve true si el recolector de basura está activado false en caso contrario
function bool gc enabled	devuelve el estado del colector de referencia circular
function array gd info	devuelve un array asociativo
function array gd info	reunir informaci&oacute;n acerca de la biblioteca gd instalada actualmente
function geoip continent code by name $hostname	el nombre del sitio web o dirección ip cuya localización quiere ser obtenida
function string geoip continent code by name	devuelve una abreviación de dos letras del nombre del continente en caso de éxito o false si la dirección no puede encontrarse en la base de datos
function string geoip continent code by name string $hostname	obtiene la abreviaci&oacute;n de dos letras del continente
function geoip country code by name $hostname	el sitio web o la dirección ip cuya localización quiere obtenerse
function string geoip country code by name	devuelve la abreviación de dos letras del código iso en caso de éxito o false si la dirección ip no puede ser encontrada en la base de datos
function string geoip country code by name string $hostname	obtiene la abreviaci&oacute;n de dos letras del pa&iacute;s
function geoip country name by name $hostname	el equipo o dirección ip del cual queremos obtener la ubicación debe estar activo
function string geoip country name by name	devuelve el nombre del país o false si la dirección no puede ser encontrada en la base de datos
function string geoip country name by name string $hostname	obtiene el nombre del pa&iacute;s completo
function geoip database info $database	tipo de base de datos en forma de entero
function string geoip database info	devuelve la versión de la base de datos que corresponda o null en caso de error
function string geoip database info int $database	obtener informaci&oacute;n de la base de datos geoip
function geoip db avail $database	el tipo de base de datos como entero
function bool geoip db avail	devuelve true si la base de datos existe false si no puede ser encontrada o null en caso de error
function bool geoip db avail int $database	determina si la base de datos geoip est&aacute; disponible
function array geoip db get all info	devuelve un array asociativo
function array geoip db get all info	devuelve informaci&oacute;n detallada sobre todos los tipos de bases de datos geoip
function geoip domain by name $hostname	el nombre de host o dirección ip
function string geoip domain by name	devuelve el nombre de dominio en caso de éxito o false si no se puede encontrar la dirección en la base de datos
function string geoip domain by name string $hostname	obtener el nombre de dominio de segundo nivel
function geoip netspeedcell by name $hostname	el nombre de host o la dirección ip
function string geoip netspeedcell by name	devuelve la velocidad de conexión en caso de éxito o false si la dirección no se puede encontrar en la base de datos
function string geoip netspeedcell by name string $hostname	obtener la velocidad de la conexi&oacute;n a internet
function geoip org by name $hostname	nombre de host o dirección ip
function string geoip org by name	en caso de éxito devuelve el nombre de la organización false si la dirección no se pudiera encontrar en la base de datos
function string geoip org by name string $hostname	consultar nombre de la organizaci&oacute;n
function geoip record by name $hostname	nombre de host o dirección ip que se va a consultar
function array geoip record by name	en caso de éxito devuelve un array asociativo o false si no se pudiera encontrar la dirección en la base de datos
function array geoip record by name string $hostname	devuelve informaci&oacute;n detallada de la ciudad encontrada en la base de datos de geoip
function geoip setup custom directory $path	la ruta completa del disco donde se encuentra la base de datos de geoip
function void geoip setup custom directory string $path	establecer un directorio personalizado para la base de datos de geoip
function geoip time zone by country and region $region_code	código de dos letras o dígitos de la región vea geoip_region_by_name()
function geoip time zone by country and region $country_code	código de dos letras del país vea geoip_country_code_by_name()
function string geoip time zone by country and region	en caso de éxito devuelve la zona horaria o false si no se pudiera encontrar la combinación país y región
function string geoip time zone by country and region string $country_code string $region_code	devuelve a partir de una combinaci&oacute;n de pa&iacute;s y regi&oacute;n la zona horaria
function get browser $return_array	si está establecido a true esta función devolverá un array en vez de un object
function get browser $user_agent	el agente de usuario a ser analizado
function mixed get browser	la información es devuelta en un objeto o en un array que contendrán varios elementos de información que representan por ejemplo una cadena con los números de la versión mayor y menor del navegador y el id; valores true / false para características tales como marcos javascript y cookies; etc
function mixed get browser string $user_agent bool $return_array	indica de lo que es capaz el navegador del usuario
function string get called class	devuelve el nombre de la clase
function string get called class	el nombre de la clase vinculante static &uacute;ltima
function get cfg var $option	el nombre de la opción de configuración
function string get cfg var	devuelve el valor actual de la variable de configuración de php especificada por option o false si se produce un error
function string get cfg var string $option	obtiene el valor de una opci&oacute;n de configuraci&oacute;n de php
function get class methods $class_name	el nombre de la clase o una instancia de objeto
function array get class methods	devuelve un array con los nombres de los métodos definidos para la clase especificada por class_name
function array get class methods mixed $class_name	obtiene los nombres de los m&eacute;tdos de una clase
function get class vars $class_name	el nombre de la clase
function array get class vars	devuelve una matriz asociativa de las propiedades declaradas visibles desde el ámbito actual con su valor predeterminado
function array get class vars string $class_name	obtener las propiedades predeterminadas de una clase
function get class $object	el objeto evaluado
function string get class	devuelve el nombre de la clase de la cual object es una instancia
function string get class object $object	devuelve el nombre de la clase de un objeto
function array get declared classes	devuelve una matriz con los nombres de las clases declaradas en el script actual
function array get declared classes	devuelve una matriz con los nombres de las clases definidas
function array get declared interfaces	devuelve un array con los nombres de las interfaces declaradas en el script actual
function array get declared interfaces	devuelve un array con todas las interfaces declaradas
function get defined constants $categorize	provoca que la función retorne un array multi-dimensional con categorias en las claves de la primera dimensión y constantes y sus valores en la segunda dimensión
function array get defined constants	devuelve un array de arrays nombre_constante = > valor_constante opcionalmente agrupados por nombre de extensión registrando la constante
function array get defined constants bool $categorize	devuelve un array asociativo con los nombres de todas las constantes y sus valores
function array get defined functions	devuelve una matriz multidimensional que contiene una lisata de todas las funciones definidas tanto de las incluidas internas como las definidas por el usuario
function array get defined functions	devuelve una matriz de todas las funciones definidas
function array get defined vars	una matriz multidimensional con todas las variables
function array get defined vars	devuelve una matriz con todas las variables definidas
function get extension funcs $module_name	el nombre del módulo
function array get extension funcs	devuelve una matriz con todas las funciones o false si nombre_modulo no es una extensión válida
function array get extension funcs string $module_name	devuelve una matriz con los nombres de funciones de un m&oacute;dulo
function get loaded extensions $zend_extensions	sólo retorna extensiones zend si no las extensiones regulares como mysqli
function array get loaded extensions	devuelve un array indexado de todos los nombres de los módulos
function array get loaded extensions bool $zend_extensions	devuelve un array con los nombres de todos los m&oacute;dulos compilados y cargados
function bool get magic quotes gpc	devuelve 0 si las comillas mágicas están deshabilitadas 1 de lo contrario
function bool get magic quotes gpc	obtiene el valor actual de configuraci&oacute;n de magic_quotes_gpc
function get meta tags $filename	la ruta al archivo html como una cadena
function get meta tags $use_include_path	definir use_include_path como true producirá que php intente abrir el archivo a lo largo de la ruta de inclusión estándar tal y como se define en la directiva include_path
function array get meta tags	devuelve un array con todas las etiquetas meta procesadas
function array get meta tags string $filename bool $use_include_path	extrae todo el contenido de atributos de etiquetas meta de un archivo y devuelve un array
function get object vars $object	una instancia de un objeto
function array get object vars	devuelve un array asociativo con las propiedades no estáticas accesibles del objeto especificado por object en el ámbito
function array get object vars object $object	obtiene las propiedades del objeto dado
function string getcwd	devuelve el directorio actual de trabajo en caso de éxito o false si ocurre un error
function string getcwd	obtiene el directorio actual en donde se esta trabajando
function getenv $varname	el nombre de variable
function string getenv	devuelve el valor de la variable de entorno varname o false si la variable entorno varname no existe
function string getenv string $varname	obtiene el valor de una variable de entorno
function gethostbyaddr $ip_address	la dirección ip del servidor huésped
function string gethostbyaddr	devuelve el nombre de host en caso de éxito la ip_address sin modificar en caso de fallo o false en caso de que la entrada tenga un formato incorrecto
function string gethostbyaddr string $ip_address	obtener el nombre del host de internet correspondiente a una direcci&oacute;n ip dada
function gethostbyname $hostname	el nombre de host
function string gethostbyname	devuelve la dirección ipv4 o un string que contiene el hostname sin modificar en caso de error
function string gethostbyname string $hostname	obtener la direcci&oacute;n ipv4 que corresponde a un nombre de host de internet dado
function gethostbynamel $hostname	el nombre de host
function array gethostbynamel	devuelve un array de direcciones ipv4 o false si hostname no se pudo resolver
function array gethostbynamel string $hostname	obtener una lista de direcciones ipv4 que corresponde a un nombre de host de internet dado
function string gethostname	devuelve un string con el nombre de host en caso de éxito false en caso contrario
function string gethostname	obtiene el nombre de host
function getimagesize $filename	este parámetro especifica el fichero del cual recuperar información
function getimagesize $imageinfo	este parámetro opcional permite extraer alguna información ampliada del fichero de imagen
function array getimagesize	devuelve un array de hasta 7 elementos
function array getimagesize string $filename array $imageinfo	obtener el tama&ntilde;o de una imagen
function int getlastmod	devuelve la hora de la última modificación de la página actual
function int getlastmod	obtiene la hora de la &uacute;ltima modificaci&oacute;n de la p&aacute;gina
function int getmyinode	devuelve el inodo del script actual como un entero o false en caso de error
function int getmyinode	obtiene el inode del script actual
function getservbyname $service	el nombre del servicio de internet como una cadena
function getservbyname $protocol	protocol es un valor entre tcp o udp es minúsculas
function int getservbyname	devuelve el número de puerto o false si service o protocol no son encontrados
function int getservbyname string $service string $protocol	obtener el n&uacute;mero de puerto asociado con un servicio y protocolo de internet
function getservbyport $port	el número de puerto
function getservbyport $protocol	protocol es un valor entre tcp o udp en minúsculas
function string getservbyport	devuelve el nombre del servicio de internet como una cadena
function string getservbyport int $port string $protocol	obtener el servicio de internet que corresponde con el puerto y protocolo
function gettimeofday $return_float	cuando se establece a true se devuelve un float en vez de un array
function mixed gettimeofday	por defecto se devuelve un array
function mixed gettimeofday bool $return_float	obtener la hora actual
function gettype $var	la variable de la cual queremos comprobar su tipo
function string gettype	los valores posibles para la cadena devuelta son: boolean integer double por razones históricas double es devuelto en caso de que un valor sea de tipo float y no simplemente float string array object resource null unknown type
function string gettype mixed $var	obtener el tipo de una variable
function glob $flags	banderas válidas: glob_mark - añade un barra a cada directorio devuelto glob_nosort - devuelve los çvos como aparecen en el directorio sin ordenar
function glob $pattern	el patrón
function array glob	devuelve una matriz que contiene los ficheros / directorios coincidentes una matriz vacía si no hubo ficheros coincidentes o false si se produjo un error
function array glob string $pattern int $flags	buscar coincidencias de nombres de ruta con un patr&oacute;n
function gmdate $timestamp	el parámetro opcional timestamp es una marca temporal de unix de tipo integer que por defecto es la hora local si no se proporciona ningún valor a timestamp
function gmdate $format	el formato de la fecha string a mostrar
function string gmdate	devuelve una fecha en formato gmt
function string gmdate string $format int $timestamp	formatea una fecha / hora gmt / utc
function gmmktime $minute	el número del minuto relativo al inicio de hour
function gmmktime $hour	el número de la hora relativo al inicio del día determinado por month day y year
function gmmktime $year	el año
function gmmktime $second	el número de segundos relativo al inicio de minute
function gmmktime $month	el número del mes relativo al inicio del año previo
function gmmktime $day	el número del día relativo al final del mes previo
function gmmktime $is_dst	los parámetros siempre representan una fecha gmt por lo que is_dst no influye en el resultado
function int gmmktime	devuelve una marca de tiempo unix de tipo integer
function int gmmktime int $hour int $minute int $second int $month int $day int $year int $is_dst	obtener la marca temporal de unix para una fecha gmt
function gmp abs $a	resource de número de gmp en php 5
function GMP gmp abs	devuelve el valor absoluto a como un número gmp
function GMP gmp abs GMP $a	valor absoluto
function gmp clrbit $a	resource de número de gmp en php 5
function gmp clrbit $index	el índice del bit a limpiar
function void gmp clrbit GMP $a int $index	limpia un bit
function gmp cmp $a	resource de número de gmp en php 5
function gmp cmp $b	resource de número de gmp en php 5
function int gmp cmp	devuleve un valor positivo si a > b el cero si a = b y el valor negativo de a si a < b
function int gmp cmp GMP $a GMP $b	compara los n&uacute;meros
function gmp div r $n	el número que es dividido
function gmp div r $d	el número que es dividio por n
function gmp div r $round	ver la función gmp_div_q() para la descripción del argumento round
function GMP gmp div r	the remainder as a gmp number
function GMP gmp div r GMP $n GMP $d int $round	el resto de la divisi&oacute;n de los n&uacute;meros
function gmp export $word_size	el valor predeterminado es 1
function gmp export $options	el valor predeterminado es gmp_msw_first | gmp_native_endian
function gmp export $gmpnumber	el número gmp a exportar
function string gmp export	devuelve un string o false en caso de error
function string gmp export GMP $gmpnumber integer $word_size integer $options	exportar a un string binario
function gmp fact $a	el número factorial
function GMP gmp fact	resource de número de gmp en php 5
function GMP gmp fact mixed $a	factorial
function gmp gcd $a	resource de número de gmp en php 5
function gmp gcd $b	resource de número de gmp en php 5
function GMP gmp gcd	un número positivo gmp que divide dentro a ambos a y b
function GMP gmp gcd GMP $a GMP $b	calcula el m&aacute;ximo com&uacute;n divisor
function gmp gcdext $a	resource de número de gmp en php 5
function gmp gcdext $b	resource de número de gmp en php 5
function array gmp gcdext	un array de números gmp
function array gmp gcdext GMP $a GMP $b	calcula el m&aacute;ximo com&uacute;n divisor y multiplicadores
function gmp hamdist $a	resource de número de gmp en php 5
function gmp hamdist $b	resource de número de gmp en php 5
function int gmp hamdist	resource de número de gmp en php 5
function int gmp hamdist GMP $a GMP $b	distancia hamming
function gmp import $options	el valor predeterminado es gmp_msw_first | gmp_native_endian
function gmp import $data	el string binario a importar
function gmp import $word_size	el valor predeterminado es 1
function GMP gmp import	devuelve un número gmp o false en caso de error
function GMP gmp import string $data integer $word_size integer $options	importar de un string binario
function gmp invert $a	resource de número de gmp en php 5
function gmp invert $b	resource de número de gmp en php 5
function GMP gmp invert	un número gmo en éxito o false si el inverso
function GMP gmp invert GMP $a GMP $b	inverso del modulo
function gmp jacobi $a	resource de número de gmp en php 5
function gmp jacobi $p	resource de número de gmp en php 5
function int gmp jacobi	resource de número de gmp en php 5
function int gmp jacobi GMP $a GMP $p	s&iacute;mbolo jacobi
function gmp neg $a	resource de número de gmp en php 5
function GMP gmp neg	devuelve - a como un número gmp
function GMP gmp neg GMP $a	n&uacute;mero negativo
function gmp nextprime $a	resource de número de gmp en php 5
function GMP gmp nextprime	devuelve el siguiente número primo o mayor a como un número gmp
function GMP gmp nextprime int $a	encuentra el siguiente n&uacute;mero primo
function gmp or $a	resource de número de gmp en php 5
function gmp or $b	resource de número de gmp en php 5
function GMP gmp or	resource de número de gmp en php 5
function GMP gmp or GMP $a GMP $b	nivel de bit or
function gmp perfect square $a	el número a ser revisado como un cuadrado perfecto
function bool gmp perfect square	devielve true si a es un cuadrado perfecto sino false
function bool gmp perfect square GMP $a	comprueba el cuadrado perfecto
function gmp popcount $a	resource de número de gmp en php 5
function int gmp popcount	el conteo de la población de a como un integer
function int gmp popcount GMP $a	cuenta la poblaci&oacute;n
function gmp pow $exp	la potencia positiva a elevar la base
function gmp pow $base	la base del número
function GMP gmp pow	el nuevo elevado número como un número gmp
function GMP gmp pow GMP $base int $exp	aumenta el n&uacute;mero a la potencia
function gmp powm $mod	el modulo
function gmp powm $exp	la potencia positiva a elevar la base
function gmp powm $base	la base del número
function GMP gmp powm	el nuevo elevado número como un número gmp
function GMP gmp powm GMP $base GMP $exp GMP $mod	eleva un n&uacute;mero a la potencia con modulo
function gmp prob prime $a	el número a ser revisado como primo
function gmp prob prime $reps	valores rasonables de reps varían de 5 a 10 por defecto siendo 10 ; un valor superior disminuye la probabilidad para un número no primo a pasar como un probable primo
function int gmp prob prime	si ésta función devolvier 0 a es definitivamente no primo
function int gmp prob prime GMP $a int $reps	revisa si el n&uacute;mero es probablemente primo
function gmp random bits $bits	el número de bits
function GMP gmp random bits	un número gmp aleatorio
function GMP gmp random bits integer $bits	un n&uacute;mero aleatorio
function gmp random $limiter	el limitador
function GMP gmp random	un número al azar gmp
function GMP gmp random int $limiter	numero al azar
function gmp root $a	resource de número de gmp en php 5
function gmp root $nth	la raíz positiva a tomar de a
function GMP gmp root	el componente entero de la raíz resultante como número gmp
function GMP gmp root GMP $a int $nth	tomar la parte entera de una ra&iacute;z en&eacute;sima
function gmp rootrem $a	resource de número de gmp en php 5
function gmp rootrem $nth	la raíz positiva a tomar de a
function array gmp rootrem	un array de dos elementos donde el primero es el componente entero de la raíz y el segundo es el resto ambos representados como números gmp
function array gmp rootrem GMP $a int $nth	tomar la parte entera y el resot de una ra&iacute;z en&eacute;sima
function gmp scan0 $start	el inicio del bit
function gmp scan0 $a	el número a escanear
function int gmp scan0	devuelve el índice del bit encontrado como un integer
function int gmp scan0 GMP $a int $start	escanear para 0
function gmp scan1 $start	el inicio del bit
function gmp scan1 $a	el número a escanear
function int gmp scan1	devuelve el índice del bit encontrado como un integer
function int gmp scan1 GMP $a int $start	escanear para 1
function gmp setbit $a	el valor a modificar
function gmp setbit $index	el índice del bit a establecer
function gmp setbit $bit_on	verdadero para establecer el bit establecer a 1 / on ; falso para limpiar el bit establecer a 0 / off
function void gmp setbit GMP $a int $index bool $bit_on	establece el bit
function gmp sign $a	resource de número de gmp en php 5
function int gmp sign	devuelve 1 si a es positivo -1 si a es negativo y 0 si a es cero
function int gmp sign GMP $a	el s&iacute;mbolo del n&uacute;mero
function gmp sqrt $a	resource de número de gmp en php 5
function GMP gmp sqrt	la porción entera de la raíz cuadrada como un número gmp
function GMP gmp sqrt GMP $a	calcula la ra&iacute;z cuadrada
function gmp sqrtrem $a	el número a ser la raíz cuadrada
function array gmp sqrtrem	devuelve un arreglo donde el primer elemento es el entero de la raíz cuadrada de a y el segundo es el resto ej
function array gmp sqrtrem GMP $a	ra&iacute;z cuadrada con resto
function gmp strval $gmpnumber	el número gmp a convertir en cadena
function gmp strval $base	la base del número retornado
function string gmp strval	el número como una string
function string gmp strval GMP $gmpnumber int $base	convierte un n&uacute;mero gmp a cadena
function gmp testbit $a	resource de número de gmp en php 5
function gmp testbit $index	el bit a probar
function bool gmp testbit	devuelve true si el bit se establece en el recurso $a de otro modo devuelve false
function bool gmp testbit GMP $a int $index	prueba si un bit es establecido
function gmp xor $a	resource de número de gmp en php 5
function gmp xor $b	resource de número de gmp en php 5
function GMP gmp xor	resource de número de gmp en php 5
function GMP gmp xor GMP $a GMP $b	nivel de bit xor
function gmstrftime $timestamp	el parámetro opcional timestamp es una marca temporal de unix de tipo integer que por defecto es la hora local si no se proporciona ningún valor a timestamp
function gmstrftime $format	véase la descripción de strftime()
function string gmstrftime	devuelve una cadena formateada según la cadena de formato dada empleando la marca temporal timestamp dada o el instante local actual si no se da una marca temporal
function string gmstrftime string $format int $timestamp	formatear una fecha / hora gmt / utc seg&uacute;n la configuraci&oacute;n local
function gnupg encryptsign $plaintext	el texto a ser encriptado
function gnupg encryptsign $identifier	el identificador gnupg desde una llamada a gnupg_init() o gnupg
function string gnupg encryptsign	en caso de éxito esta función retorna el texto encriptado y firmado
function string gnupg encryptsign resource $identifier string $plaintext	encripta y firma un texto dado
function gnupg import $identifier	el identificador gnupg desde una llamada a gnupg_init() o gnupg
function gnupg import $keydata	los datos de la llave que se va a importar
function array gnupg import	en caso de éxito esta función retorna un array con la información sobre el proceso de importación
function array gnupg import resource $identifier string $keydata	importa una llave
function gnupg setsignmode $sigmode	el modo para firmar
function gnupg setsignmode $identifier	el identificador gnupg desde una llamada a gnupg_init() o gnupg
function bool gnupg setsignmode	devuelve true en caso de éxito o false en caso de error
function bool gnupg setsignmode resource $identifier int $signmode	fija el modo para firmar
function gnupg verify $signed_text	el texto firmado
function gnupg verify $plaintext	el texto plano
function gnupg verify $signature	la firma
function gnupg verify $identifier	el identificador gnupg desde una llamada a gnupg_init() o gnupg
function array gnupg verify	en caso de éxito esta función retorna información sobre la firma
function array gnupg verify resource $identifier string $signed_text string $signature string $plaintext	verifica un texto firmado
function grapheme extract $extract_type	define el tipo de unidades mencionadas por el parámetro $size: grapheme_extr_count predeterminado - $size es el número predeterminado de grupos de grafemas a extraer
function grapheme extract $start	posición de inicio del parámetro $haystack en bytes -si se proporciona debe ser cero o un valor positivo que sea menor o igual que la longitud del parámetro $haystack en bytes
function grapheme extract $next	una referencia a un valor que será establecido a la posición de inicio siguiente
function grapheme extract $size	número máximo de elementos -basado en el parámetro $extract_type- a devolver
function grapheme extract $haystack	la cadena a buscar
function string grapheme extract	una cadena que empieza en el índice $start y termina en un límite de un grupo de grafemas predeterminado que se ajusta al $size y $extract_type especificados
function string grapheme extract string $haystack int $size int $extract_type int $start int $next	funci&oacute;n para extraer una secuencia de un cl&uacute;ster de grafemas predeterminados desde un buffer de texto que puede estar codificado en utf-8
function grapheme stripos $haystack	la cadena en la que buscar pajar
function grapheme stripos $offset	el parámetro opcional $offset permite especificar dónde iniciar la búsqueda en haystack como un índice en unidades de grafema no bytes o caracteres
function grapheme stripos $needle	la cadena a buscar aguja
function int grapheme stripos	devuelve la posición como un entero
function int grapheme stripos string $haystack string $needle int $offset	buscar la posici&oacute;n en unidades de grafema de la primera coincidencia de una cadena insensible a may&uacute;sculas-min&uacute;sculas
function grapheme stristr $before_needle	si es true grapheme_stristr() devuelve la parte de pajar anterior a la primera coincidencia de aguja excluyendo aguja
function grapheme stristr $haystack	la cadena en la que buscar pajar
function grapheme stristr $needle	la cadena a buscar aguja
function string grapheme stristr	devuelve la porción de $haystack o false si $needle no se encontró
function string grapheme stristr string $haystack string $needle bool $before_needle	devolver parte de la cadena pajar desde la primera coincidencia de la cadena aguja insensible a may&uacute;sculas-min&uacute;sculas hasta el final de pajar
function grapheme strripos $haystack	la cadena en la que buscar pajar
function grapheme strripos $offset	el parámetro opcional $offset permite especificar dónde iniciar la búsqueda en haystack como un índice en unidades de grafema no bytes o caracteres
function grapheme strripos $needle	la cadena a buscar aguja
function int grapheme strripos	devuelve la posición como un entero
function int grapheme strripos string $haystack string $needle int $offset	buscar la posici&oacute;n en unidades de grafema de la &uacute;ltima coincidencia de una cadena insensible a may&uacute;sculas-min&uacute;sculas
function grapheme strstr $before_needle	si es true grapheme_stristr() devuelve la parte de pajar anterior a la primera coincidencia de ajuja excluyendo la aguja
function grapheme strstr $haystack	la cadena en la que buscar pajar
function grapheme strstr $needle	la cadena a buscar aguja
function string grapheme strstr	devuelve la porción de $haystack o false si $needle no se encontró
function string grapheme strstr string $haystack string $needle bool $before_needle	devolver parte de la cadena pajar desde la primera coincidencia de la cadena aguja hasta el final de pajar
function gupnp context get port $context	un identificador de contexto devuelto por gupnp_context_new()
function int gupnp context get port	devuelve el número de puerto para el contexto actual o false n
function int gupnp context get port resource $context	obtiene el puerto
function gupnp context get subscription timeout $context	un identificador de contexto devuelto por gupnp_context_new()
function int gupnp context get subscription timeout	el tiempo de espera del suscriptor de eventos en segundos
function int gupnp context get subscription timeout resource $context	obtiene el tiempo de espera de la suscripci&oacute;n de eventos
function gupnp context new $host_ip	la dirección ip local o null para usar la dirección ip de la primera interfaz de red sin loopback
function gupnp context new $port	puerto a utilizar o 0 si usted no le importa definir un puerto
function resource gupnp context new	un identificador de contexto
function resource gupnp context new string $host_ip int $port	crea un nuevo contexto
function gupnp control point browse start $cpoint	un identificador de punto de control devuelto por gupnp_control_point_new()
function bool gupnp control point browse start	devuelve true en caso de éxito o false en caso de error
function bool gupnp control point browse start resource $cpoint	comienza la navegaci&oacute;n
function gupnp control point browse stop $cpoint	un identificador de punto de control devuelto por gupnp_control_point_new()
function bool gupnp control point browse stop	devuelve true en caso de éxito o false en caso de error
function bool gupnp control point browse stop resource $cpoint	detiene la navegaci&oacute;n
function gupnp control point callback set $GUPNP_SIGNAL_DEVICE_PROXY_UNAVAILABLE	emitido siempre que un dispositivo ha dejado de estar disponible
function gupnp control point callback set $GUPNP_SIGNAL_DEVICE_PROXY_AVAILABLE	emitido siempre que un nuevo dispositivo esté disponible
function gupnp control point callback set $GUPNP_SIGNAL_SERVICE_PROXY_AVAILABLE	emitido siempre que un nuevo servicio esté disponible
function gupnp control point callback set $signal	el valor de la señal
function gupnp control point callback set $GUPNP_SIGNAL_SERVICE_PROXY_UNAVAILABLE	emitido siempre que un servicio ha dejado de estar disponible
function gupnp control point callback set $cpoint	un identificador de punto de control devuelto por gupnp_control_point_new()
function gupnp control point callback set $callback	la función callback para cierta señal
function gupnp control point callback set $arg	dato de usuario para el callback
function bool gupnp control point callback set	devuelve true en caso de éxito o false en caso de error
function bool gupnp control point callback set resource $cpoint int $signal mixed $callback mixed $arg	establece el punto de control callback
function gupnp control point new $target	la búsqueda del objetivo
function gupnp control point new $context	un identificador de contexto devuelto por gupnp_context_new()
function resource gupnp control point new	un identificador de punto de control
function resource gupnp control point new resource $context string $target	crea un nuevo punto de control
function gupnp device action callback set $root_device	un identificador de dispositivo raíz devuelto por gupnp_root_device_new()
function gupnp device action callback set $GUPNP_SIGNAL_NOTIFY_FAILED	emitida siempre que una notificación de un cliente falla
function gupnp device action callback set $signal	el valor de la señal
function gupnp device action callback set $GUPNP_SIGNAL_ACTION_INVOKED	emitida siempre que una acción es invoada
function gupnp device action callback set $callback	la función callback para determinada señal
function gupnp device action callback set $arg	datos de usuario para el callback
function gupnp device action callback set $action_name	el nombre de la acción
function bool gupnp device action callback set	devuelve true en caso de éxito o false en caso de error
function bool gupnp device action callback set resource $root_device int $signal string $action_name mixed $callback mixed $arg	establece una funci&oacute;n callback a un dispositivo
function gupnp device info get service $type	el tipo de sericio a ser recibido
function gupnp device info get service $root_device	un identificador de dispositivo raíz devuelto por gupnp_root_device_new()
function resource gupnp device info get service	un identificador de servicio
function resource gupnp device info get service resource $root_device string $type	obtiene el servicio con el tipo
function gupnp device info get $root_device	un identificador de dispositivo raíz devuelto por gupnp_root_device_new()
function array gupnp device info get	devuelve un array conteniendo la información del dispositivo raíz como la ubicación url udn etc
function array gupnp device info get resource $root_device	obtiene informaci&oacute;n del dispositivo ra&iacute;z
function gupnp root device get available $root_device	un identificador de dispositivo raíz devuelto por gupnp_root_device_new()
function bool gupnp root device get available	devuelve true en caso de éxito o false en caso de error
function bool gupnp root device get available resource $root_device	comprueba si un dispositivo ra&iacute;z est&aacute; disponible
function gupnp root device get relative location $root_device	un identificador de dispositivo raíz devuelto por gupnp_root_device_new()
function string gupnp root device get relative location	la ubicación relativa del dispositivo raíz
function string gupnp root device get relative location resource $root_device	obtiene la ubicaci&oacute;n relativa del dispositivo ra&iacute;z
function gupnp root device new $location	ubicación del archivo de descripción para este dispositivo relativo a la raíz http
function gupnp root device new $context	un identificador de contexto devuelto por gupnp_context_new()
function resource gupnp root device new	un identificador de dispositivo raíz
function resource gupnp root device new resource $context string $location string $description_dir	crea un nuevo dispositivo ra&iacute;z
function gupnp root device stop $root_device	un identificadorde servicio raíz devuelto por gupnp_root_device_new()
function bool gupnp root device stop	devuelve true en caso de éxito o false en caso de error
function bool gupnp root device stop resource $root_device	detiene el bucle principal
function gupnp service action get $GUPNP_TYPE_FLOAT	este tipo de variable es float
function gupnp service action get $action	un identificador de acción de servicio
function gupnp service action get $GUPNP_TYPE_LONG	este tipo de variable es long
function gupnp service action get $GUPNP_TYPE_DOUBLE	este tipo de variable es double
function gupnp service action get $GUPNP_TYPE_STRING	este tipo de variable es string
function gupnp service action get $name	el nombre de la variable a recibir
function gupnp service action get $GUPNP_TYPE_BOOLEAN	este tipo de variable es boolean
function gupnp service action get $type	el tipo de variable a recibir
function gupnp service action get $GUPNP_TYPE_INT	este tipo de variable es integer
function mixed gupnp service action get	el valor de la variable
function mixed gupnp service action get resource $action string $name int $type	recupera los argumentos de la acci&oacute;n especificada
function gupnp service action return error $error_code	el código de error
function gupnp service action return error $action	un identificador de acción de servicio
function gupnp service action return error $error_description	la descripción del error
function gupnp service action return error $GUPNP_CONTROL_ERROR_INVALID_ARGS	los argumentos de acción fueron inválidos
function gupnp service action return error $GUPNP_CONTROL_ERROR_ACTION_FAILED	la acción ha fallado
function gupnp service action return error $GUPNP_CONTROL_ERROR_INVALID_ACTION	el nombre de acción es inválido
function gupnp service action return error $GUPNP_CONTROL_ERROR_OUT_OF_SYNC	fuera de sincronización obsoleto
function bool gupnp service action return error	devuelve true en caso de éxito o false en caso de error
function bool gupnp service action return error resource $action int $error_code string $error_description	devuelve el c&oacute;digo de error
function gupnp service action return $action	un identificador de acción de servicio
function bool gupnp service action return	devuelve true en caso de éxito o false en caso de error
function bool gupnp service action return resource $action	devuelve con &eacute;xito
function gupnp service action set $type	el tipo de la variable recibida
function gupnp service action set $name	ñ nombre de la variable recibida
function gupnp service action set $value	el valor de la variable a recibir
function gupnp service action set $GUPNP_TYPE_LONG	este tipo de variable es long
function gupnp service action set $GUPNP_TYPE_DOUBLE	este tipo de variable es double
function gupnp service action set $GUPNP_TYPE_FLOAT	type of the variable is float
function gupnp service action set $action	un identificador de acción de servicioe
function gupnp service action set $GUPNP_TYPE_STRING	este tipo de variable es string
function gupnp service action set $GUPNP_TYPE_BOOLEAN	este tipo de variable es boolean
function gupnp service action set $GUPNP_TYPE_INT	este tipo de variable es integer
function bool gupnp service action set	devuelve true en caso de éxito o false en caso de error
function bool gupnp service action set resource $action string $name int $type mixed $value	establece el valor de retorno de una acci&oacute;n especificada
function gupnp service freeze notify $service	un identificador de servicio
function bool gupnp service freeze notify	devuelve true en caso de éxito o false en caso de error
function bool gupnp service freeze notify resource $service	congela las nuevas notificaci&oacute;nes
function gupnp service info get $proxy	un identificador de servicio proxy
function array gupnp service info get	devuelve un array conteniendo toda la información del servicio como la ubicación url udn etc
function array gupnp service info get resource $proxy	obtiene toda la informaci&oacute;n del servicio
function gupnp service introspection get state variable $introspection	in identificador de introspección
function gupnp service introspection get state variable $variable_name	el nombre de la variable a ser recibida
function array gupnp service introspection get state variable	devuelve el estado de la variable de datos o false
function array gupnp service introspection get state variable resource $introspection string $variable_name	devuelve el estado de la variable de datos
function gupnp service notify $service	un identificador de servicio
function gupnp service notify $GUPNP_TYPE_BOOLEAN	este tipo de variables es boolean
function gupnp service notify $value	el valor de la variable
function gupnp service notify $type	el tipo de variable
function gupnp service notify $GUPNP_TYPE_DOUBLE	este tipo de variable es double
function gupnp service notify $name	el nombre de la variable
function gupnp service notify $GUPNP_TYPE_STRING	este tipo de variable es string
function gupnp service notify $GUPNP_TYPE_LONG	este tipo de variables es long
function gupnp service notify $GUPNP_TYPE_FLOAT	este tipo de variable es float
function gupnp service notify $GUPNP_TYPE_INT	este tipo de variable es integer
function bool gupnp service notify	devuelve true en caso de éxito o false en caso de error
function bool gupnp service notify resource $service string $name int $type mixed $value	lanza notificaci&oacute;n a los clientes en escucha
function gupnp service proxy action set $GUPNP_TYPE_FLOAT	este tipo de variable es float
function gupnp service proxy action set $type	el tipo de la acción
function gupnp service proxy action set $GUPNP_TYPE_DOUBLE	type of the variable is double
function gupnp service proxy action set $GUPNP_TYPE_LONG	este tipo de variable es long
function gupnp service proxy action set $proxy	un identificador de servicio proxy
function gupnp service proxy action set $name	el nombre de la acción
function gupnp service proxy action set $action	una acción
function gupnp service proxy action set $GUPNP_TYPE_STRING	este tipo de variable es string
function gupnp service proxy action set $value	el valor de la acción
function gupnp service proxy action set $GUPNP_TYPE_BOOLEAN	este tipo de variable es boolean
function gupnp service proxy action set $GUPNP_TYPE_INT	este tipo de variable es integer
function bool gupnp service proxy action set	devuelve true en caso de éxito o false en caso de error
function bool gupnp service proxy action set resource $proxy string $action string $name mixed $value int $type	env&iacute;a la acci&oacute;n al servicio y establece el valor
function gupnp service proxy add notify $GUPNP_TYPE_FLOAT	este tipo de variable es float
function gupnp service proxy add notify $proxy	un identificador de servicio proxy
function gupnp service proxy add notify $GUPNP_TYPE_LONG	este tipo de variable es long
function gupnp service proxy add notify $type	el tipo de variable
function gupnp service proxy add notify $value	la variable a agregar a la notificación
function gupnp service proxy add notify $GUPNP_TYPE_DOUBLE	este tipo de variable es double
function gupnp service proxy add notify $callback	el callback a ejecutar cuando la variable cambia
function gupnp service proxy add notify $GUPNP_TYPE_STRING	este tipo de variable es string
function gupnp service proxy add notify $GUPNP_TYPE_BOOLEAN	este tipo de variable es boolean
function gupnp service proxy add notify $arg	datos de usuario para callback
function gupnp service proxy add notify $GUPNP_TYPE_INT	este tipo de variable es integer
function bool gupnp service proxy add notify	devuelve true en caso de éxito o false en caso de error
function bool gupnp service proxy add notify resource $proxy string $value int $type mixed $callback mixed $arg	establece un callback de notificaci&oacute;n de cambios en variables
function gupnp service proxy callback set $signal	el valor de la señal
function gupnp service proxy callback set $callback	la función callback para determinada señal
function gupnp service proxy callback set $arg	datos de usuario para el callback
function gupnp service proxy callback set $GUPNP_SIGNAL_SUBSCRIPTION_LOST	emitido siempre que la suscripción a este servicio se pierda a una condición de error
function gupnp service proxy callback set $proxy	un idendificador de servicio proxy
function bool gupnp service proxy callback set	devuelve true en caso de éxito o false en caso de error
function bool gupnp service proxy callback set resource $proxy int $signal mixed $callback mixed $arg	establece un callback de servicio proxy por se&ntilde;al
function gzclose $zp	el apuntador al archivo gz
function bool gzclose	devuelve true en caso de éxito o false en caso de error
function bool gzclose resource $zp	cierra el apuntador de un archivo gz abierto
function gzcompress $data	los datos a comprimir
function gzcompress $level	el nivel de compresión
function gzcompress $encoding	una de las constentes zlib_encoding_*
function string gzcompress	la cadena comprimida o false si ocurre un error
function string gzcompress string $data int $level int $encoding	comprime una cadena
function gzdeflate $data	los datos a comprimir
function gzdeflate $encoding	una de las constantes zlib_encoding_*
function gzdeflate $level	el nivel de compresión
function string gzdeflate	la cadena comprimida o false si ocurre un error
function string gzdeflate string $data int $level int $encoding	comprime una cadena
function gzfile $filename	el nombre del archivo
function gzfile $use_include_path	se puede asignar este parámetro opcional en 1 si se desea buscar también el archivo en la ruta include_path
function array gzfile	una matriz que contiene el archivo una línea por celda
function array gzfile string $filename int $use_include_path	lee un archivo gz completo en una matriz
function gzinflate $data	los datos comprimidos con gzdeflate()
function gzinflate $length	la longitud máxima de datos a decodificar
function string gzinflate	los datos originales descomprimidos o false en caso de error
function string gzinflate string $data int $length	descomprime una cadena comprimida
function gzopen $filename	el nombre del archivo
function gzopen $mode	como en fopen() rb o wb pero también puede incluir un nivel de compresión wb9 u una estrategia: f para datos filtrados como en wb6f h para compresión huffman solamente como en wb1h
function gzopen $use_include_path	se puede configurar este parámetro opcional en 1 si se desea buscar también el archivo en la ruta include_path
function resource gzopen	retorna un apuntador hacia el archivo abierto después de eso cualquier cosa que se lea desde este descriptor de archivo sera descomprimido de forma transparente y lo que se escriba será comprimido
function resource gzopen string $filename string $mode int $use_include_path	abre un archivo gz
function gzread $zp	el apuntador al archivo gz
function gzread $length	el número de bytes a leer
function string gzread	los datos que han sido leídos
function string gzread resource $zp int $length	lectura de archivo gz segura a nivel binario
function gzrewind $zp	el apuntador al archivo gz
function bool gzrewind	devuelve true en caso de éxito o false en caso de error
function bool gzrewind resource $zp	reinicia la posici&oacute;n del apuntador a un archivo gz
function gztell $zp	el apuntador al archivo gz
function int gztell	la posición del apuntador al archivo o false si ocurre un error
function int gztell resource $zp	indica la posici&oacute;n de lectura / escritura del apuntador al archivo gz
function gzwrite $zp	el apuntador al archivo gz
function gzwrite $string	la cadena a escribir
function gzwrite $length	el número de bytes sin comprimir a escribir
function int gzwrite	retorna el número de bytes sin comprimir escritos en el flujo del archivo gz dado
function int gzwrite resource $zp string $string int $length	escritura en un archivo gz segura a nivel binario
function hash equals $user_string	el string proporcionado por el usuario
function hash equals $known_string	el string de longitud conocida con el que comparar
function bool hash equals	devuelve true cuando los dos strings son iguales o false si no
function bool hash equals string $known_string string $user_string	comparaci&oacute;n de strings segura contra ataques de temporizaci&oacute;n
function header $replace	el parámetro opcional replace indica cuando el encabezado debe reemplazar un encabezado previo similar o añadir un segundo encabezado del mismo tipo
function header $string	el encabezado en formato cadena
function header $http_response_code	fuerza el código de respuesta http a un valor específico
function void header string $string bool $replace int $http_response_code	enviar encabezado sin formato http
function array headers list	devuelve un array indexado numéricamente de encabezados
function array headers list	devuelve una lista de encabezados de respuesta enviados o listos para enviar
function hebrevc $hebrew_text	una cadena de entrada en hebreo
function hebrevc $max_chars_per_line	este parámetro es opcional e indica el número máximo de caracteres por línea que serán devueltos
function string hebrevc	devuelve la cadena visual
function string hebrevc string $hebrew_text int $max_chars_per_line	convertir texto de hebreo l&oacute;gico a texto visual con conversi&oacute;n de l&iacute;nea nueva
function hex2bin $data	la representación hexadecimal de datos
function string hex2bin	devuelve la representación binaria de los datos dados o false en caso de error
function string hex2bin string $data	decodifica una cadena binaria codificada hexadecimalmente
function hexdec $hex_string	el string hexadecimal a convertir
function number hexdec	la representación decimal de hex_string
function number hexdec string $hex_string	hexadecimal a decimal
function highlight file $return	establecer este parámetro a true para hacer que esta función devuelva el código remarcado
function highlight file $filename	ruta al fichero php a ser remarcado
function mixed highlight file	si return está establecido a true devuelve el código remarcado como string en vez de imprimirlo
function mixed highlight file string $filename bool $return	remarcado de la sintaxis de un fichero
function htmlspecialchars decode $string	el string a decodificar
function htmlspecialchars decode $flags	una máscara de bits de uno o más de los siguientes indicadores que especifican cómo manejar las comillas y que tipo de documento utilizar
function string htmlspecialchars decode	devuelve el string decodificado
function string htmlspecialchars decode string $string int $flags	convierte entidades html especiales de nuevo en caracteres
function http build query $query_data	puede ser un array u objeto que contenga propiedades
function http build query $numeric_prefix	si se usan índices numéricos en el array base y se provee este parámetro éste será añadido al comienzo de los índices numéricos para aquellos elementos encontrados sólo en el array base
function http build query $arg_separator	arg_separator
function http build query $enc_type	por omisión php_query_rfc1738
function string http build query	devuelve una cadena codificada en forma url
function string http build query mixed $query_data string $numeric_prefix string $arg_separator int $enc_type	generar una cadena de consulta codificada estilo url
function hwapi attribute new $name	el nombre del atributo
function hwapi attribute new $value	el valor del atributo
function HW_API_Attribute hwapi attribute new	devuelve una instancia de la clase hw_api_attribute
function HW_API_Attribute hwapi attribute new string $name string $value	crea una instancia de la clase hw_api_attribute
function hwapi content new $mimetype	el tipo mime del contenido
function HW_API_Content hwapi content new string $content string $mimetype	crea una nueva instancia de la clase hw_api_content
function hwapi hgcsp $port	si no se pasa un número de puerto se usa 418
function hwapi hgcsp $hostname	el nombre del host
function HW_API hwapi hgcsp	devuelve una instancia de hw_api
function HW_API hwapi hgcsp string $hostname int $port	devuelve un objeto de la clase hw_api
function hw_api_object hwapi object new array $parameter	crea una nueva instancia de la clase hwapi_object_new
function ibase affected rows $link_identifier	contexto de transacción
function int ibase affected rows	devuelve el número de filas en forma de número entero
function int ibase affected rows resource $link_identifier	devuelve el n&uacute;mero de columnas afectadas por la &uacute;ltima consulta
function ibase blob add $blob_handle	manejador de blob abierto con ibase_blob_create()
function ibase blob add $data	datos a añadir
function void ibase blob add resource $blob_handle string $data	a&ntilde;ade datos a un nuevo blob
function ibase blob close $blob_handle	manejador de blob abierto mediante ibase_blob_create() o mediante ibase_blob_open()
function mixed ibase blob close	si el blob era de lectura esta función devuelve true en caso de éxito y si el blob era de escritura esta función devuelve un string con el identificador que asignó la base de datos a este blob
function mixed ibase blob close resource $blob_handle	cierra un blob
function ibase blob echo $link_identifier	identificador de un enlace a interbase
function bool ibase blob echo	devuelve true en caso de éxito o false en caso de error
function bool ibase blob echo string $blob_id	imprime el contenido de un blob
function ibase blob get $len	tamaño de la lectura
function ibase blob get $blob_handle	manejador de blob abierto por ibase_blob_open()
function string ibase blob get	devuelve hasta len bytes del blob o false en caso de error
function string ibase blob get resource $blob_handle int $len	consulta un determinado n&uacute;mero de bytes de un blob
function ibase blob import $link_identifier	identificador de un enlace a interbase
function ibase blob import $file_handle	manejador de fichero devuelto por fopen()
function string ibase blob import	en caso de éxito devuelve el id del blob o false en caso de error
function string ibase blob import resource $link_identifier resource $file_handle	crea un blob copia un fichero en &eacute;l y lo cierra
function ibase blob info $blob_id	identificador del blob
function ibase blob info $link_identifier	identificador de enlace a interbase
function array ibase blob info	devuelve un array con información sobre el blob
function array ibase blob info resource $link_identifier string $blob_id	devuelve el tama&ntilde;o de un blob y otra informaci&oacute;n &uacute;til
function ibase commit ret $link_or_trans_identifier	si se invoca sin argumentos esta función lleva a cabo la transacción por omisión del enlace por omisión
function bool ibase commit ret	devuelve true en caso de éxito o false en caso de error
function bool ibase commit ret resource $link_or_trans_identifier	lleva a cabo una transacci&oacute;n sin cerrarla
function ibase commit $link_or_trans_identifier	si se invoca sin argumentos esta función lleva a cabo la transacción por omisión del enlace por omisión
function bool ibase commit	devuelve true en caso de éxito o false en caso de error
function bool ibase commit resource $link_or_trans_identifier	lleva a cabo una transacci&oacute;n
function ibase drop db $connection	identificador de enlace a interbase
function bool ibase drop db	devuelve true en caso de éxito o false en caso de error
function bool ibase drop db resource $connection	elimina una base de datos
function int ibase errcode	devuelve el código de error en forma de entero o false si no hubo ningún error
function int ibase errcode	devuelve un c&oacute;digo de error
function ibase execute $query	una consulta interbase preparada por ibase_prepare()
function resource ibase execute	si la consulta genera un error se devuelve false
function resource ibase execute resource $query mixed $bind_arg	ejecutar una consulta previamente preparada
function ibase fetch assoc $result	manejador de resultado
function ibase fetch assoc $fetch_flag	fetch_flag es una combinación or de las constantes ibase_text y ibase_unixtime
function array ibase fetch assoc	devuelve un array asociativo que corresponde a la fila consultada
function array ibase fetch assoc resource $result int $fetch_flag	extra una fila en forma de array asociativo de una consulta
function ibase fetch object $fetch_flag	fetch_flag es una combinación or de las constantes ibase_text y ibase_unixtime
function ibase fetch object $result_id	identificador de resultado de interbase obtenido por ibase_query() o por ibase_execute()
function object ibase fetch object	devuelve un objeto con información de la siguiente fila o false si no hubiera más filas
function object ibase fetch object resource $result_id int $fetch_flag	consulta un objeto de una base de datos interbase
function ibase field info $result	identificador de resultado de interbase
function ibase field info $field_number	posición del campo
function array ibase field info	devuelve un array con las siguientes claves: name alias relation length y type
function array ibase field info resource $result int $field_number	consulta informaci&oacute;n sobre un determinado campo
function ibase free result $result_identifier	un conjunto de resultados creado por ibase_query() o ibase_execute()
function bool ibase free result	devuelve true en caso de éxito o false en caso de error
function bool ibase free result resource $result_identifier	liberar un conjunto de resultados
function ibase name result $name	nombre que se asigna
function ibase name result $result	juego de resultados de interbase
function bool ibase name result	devuelve true en caso de éxito o false en caso de error
function bool ibase name result resource $result string $name	asigna un nombre a un juego de resultados
function ibase set event handler $event_name2	se permiten hasta 15 eventos
function ibase set event handler $event_handler	a esta función se la invoca proporcionándola como argumentos el nombre del evento y el enlace al recurso cada vez que la base de datos emita el evento especificado
function ibase set event handler $event_name1	nombre del evento
function resource ibase set event handler	el valor devuelto es un recurso de evento
function resource ibase set event handler callable $event_handler string $event_name1 string $event_name2	registra una funci&oacute;n manejadora de un determinado evento
function ibase wait event $event_name1	nombre de evento
function string ibase wait event	devuelve el nombre del evento que se emitió
function string ibase wait event string $event_name1 string $event_name2	espera a que la base de datos emita un determinado evento
function iconv get encoding $type	el valor del parámetro opcional type puede ser: all input_encoding output_encoding internal_encoding
function mixed iconv get encoding	retorna el valor actual de la variable de configuración interna si tiene éxito o o false en caso de error
function mixed iconv get encoding string $type	recupera variables de configuraci&oacute;n interna de la extensi&oacute;n iconv
function iconv mime decode $mode	mode determina el comportamiento cuando el evento iconv_mime_decode() encuentra un campo de cabecera mime mal formado
function iconv mime decode $encoded_header	la cabecera codificada como string
function iconv mime decode $charset	el parámetro opcional charset especifica el set de caracteres a usar para representar el resultado
function string iconv mime decode	en caso de éxito retorna un campo mime decodificado o false si ocurre cualquier error durante la decodificación
function string iconv mime decode string $encoded_header int $mode string $charset	decodifica un campo de la cabecera mime
function iconv mime encode $field_name	nombre del campo
function iconv mime encode $field_value	valor del campo
function iconv mime encode $preferences	puede controlarse el comportamiento de iconv_mime_decode() especificando un array asociativo que contenga elementos de configuración al parámetro opcional preferences
function string iconv mime encode	en caso de éxito retorna un campo mime codificado o false si ha ocurrido un error durante la codificación
function string iconv mime encode string $field_name string $field_value array $preferences	compone un campo de cabecera mime
function iconv set encoding $type	el valor de type puede ser cualquiera de los siguientes: input_encoding output_encoding internal_encoding
function iconv set encoding $charset	la codificación de caracteres
function bool iconv set encoding	devuelve true en caso de éxito o false en caso de error
function bool iconv set encoding string $type string $charset	establece las opciones para la conversi&oacute;n de codificaci&oacute;n de caracteres
function iconv strlen $str	el string a contar
function iconv strlen $charset	si se omite el parametro charset se asume que str se codificará en iconv
function int iconv strlen	retorna el número de caracteres de str como un entero
function int iconv strlen string $str string $charset	retorna el n&uacute;mero de caracteres de un string
function iconv strrpos $needle	el substring a ser buscado
function iconv strrpos $haystack	todo el string
function iconv strrpos $charset	si se omite el parámetro charset se asume que string se codificará con iconv
function int iconv strrpos	retorna la posición numérica de la última vez que aparece needle en haystack
function int iconv strrpos string $haystack string $needle string $charset	busca la &uacute;ltima aparici&oacute;n de un string
function iconv substr $length	si se da el parámetro length y es positivo el valor retornado contendrá como mucho length caracteres de la porción que comienza en offset dependiendo de la longitud de string
function iconv substr $str	el string original
function iconv substr $charset	si se omite el parámetro charset se asume que string se codifica en iconv
function iconv substr $offset	si offset no es negativo iconv_substr() elimina la porción de str que empieza en el caracter número offset empezando de cero
function string iconv substr	retorna la parte de str especificada por los parámetros offset y length i
function string iconv substr string $str int $offset int $length string $charset	elimina parte del string
function iconv $out_charset	codificación final
function iconv $in_charset	codificación inicial
function iconv $str	el string a ser convertido
function string iconv	retorna el string convertido o false en caso de error
function string iconv string $in_charset string $out_charset string $str	convierte un string a la codificaci&oacute;n de caracteres indicada
function id3 get frame long name $frameId	un marco id3v2
function string id3 get frame long name	retorna el nombre largo del marco o false en caso de error
function string id3 get frame long name string $frameId	obtiene el nombre largo de un marco id3v2
function id3 get frame short name $frameId	un marco id3v2
function string id3 get frame short name	retorna el nombre corto del marco o false en caso de error
function string id3 get frame short name string $frameId	obtiene el nombre corto de un marco id3v2
function id3 get genre id $genre	nombre del género como un string
function int id3 get genre id	el id del género o false en caso de error
function int id3 get genre id string $genre	obtiene el id correspondiente para un g&eacute;nero musical
function array id3 get genre list	retorna un array conteniendo todos los valores posibles para la etiqueta id3
function array id3 get genre list	obtiene todos los valores posibles para la etiqueta g&eacute;nero
function id3 get genre name $genre_id	un entero entre 0 to 147
function string id3 get genre name	retorna el nombre del género en inglés en forma de string
function string id3 get genre name int $genre_id	obtiene el nombre del g&eacute;nero correspondiente a un id
function id3 remove tag $filename	ruta al fichero mp3 en lugar de un nombre de fichero puede pasarse un contexto de flujos válido
function id3 remove tag $version	permite especificar la versión de la etiqueta esto se debe a que los ficheros mp3 pueden contener ambas versiones de etiquetas 1
function bool id3 remove tag	devuelve true en caso de éxito o false en caso de error
function bool id3 remove tag string $filename int $version	elimina una etiqueta id3 existente
function id3 set tag $filename	ruta al fichero mp3 en lugar de un nombre de fichero puede pasarse un contexto de flujos válido
function id3 set tag $tag	un array asociativo de claves de la etiqueta y sus valores las siguientes claves pueden ser usadas en el array asociativo: claves en el array asociativo clave valor posible disponible en la versión title cadena con un máximo de 30 caracteres v1
function id3 set tag $version	permite especificar la versión de la etiqueta esto se debe a que los ficheros mp3 pueden contener ambas versiones de etiquetas 1
function bool id3 set tag	devuelve true en caso de éxito o false en caso de error
function bool id3 set tag string $filename array $tag int $version	actualiza la informaci&oacute;n almacenada en una etiqueta id3
function idate $timestamp	el parámetro opcional timestamp es una marca temporal de unix de tipo integer que por defecto es la hora local si no se proporciona ningún valor a timestamp
function int idate	devuelve un integer
function int idate string $format int $timestamp	formatea una fecha / hora local como un entero
function idn to ascii $idna_info	este parámetro sólo se puede usar si intl_idna_variant_uts46 se utilizó para variant
function idn to ascii $variant	intl_idna_variant_2003 para idna 2003 o intl_idna_variant_uts46 para uts #46
function idn to ascii $domain	dominio a convertir
function idn to ascii $options	opciones de conversión - combinación de constantes idna_* excepto las constantes idna_error_*)
function string idn to ascii	nombre del dominio codificado en formato ascii-compatible
function string idn to ascii string $domain int $options int $variant array $idna_info	convierte un nombre de dominio a formato idna ascii
function ifx affected rows $result_id	un identificador válido devuelto por ifx_query() o ifx_prepare()
function int ifx affected rows	devuelve el número de registros como valor entero
function int ifx affected rows resource $result_id	devolver el n&uacute;mero de filas afectadas por una consulta
function ifx blobinfile mode $mode	modo 0 significa guardarlos en la memoria y modo 1 significa guardarlos en un archivo
function bool ifx blobinfile mode	devuelve true en caso de éxito o false en caso de error
function bool ifx blobinfile mode int $mode	establece el modo predeterminado de blob en todas las consultas de selecci&oacute;n
function ifx close $link_identifier	el identificador de enlace
function bool ifx close	devuelve true en caso de éxito o false en caso de error
function bool ifx close resource $link_identifier	cerrar conexi&oacute;n informix
function ifx create char $param	el contenido char
function int ifx create char	devuelve el id del objeto char o false en caso de error
function int ifx create char string $param	crea un objeto char
function ifx do $result_id	result_id es el identificador válido devuelto por ifx_query() o ifx_prepare() sólo para consultas select
function bool ifx do	devuelve true en caso de éxito o false en caso de error
function bool ifx do resource $result_id	ejecutar una sentencia sql previamente preparada
function ifx errormsg $errorcode	si se especifica devuelve el mensaje de error correspondiente al código especificado
function string ifx errormsg	devuelve un mensaje de error como cadena
function string ifx errormsg int $errorcode	devolver el mensaje de error de la &uacute;ltima llamada a informix
function ifx fieldproperties $result_id	result_id es un identificador válido devuelto por ifx_query() o ifx_prepare() solamente para consultas de selección
function array ifx fieldproperties	devuelve un array asociativo con los nombres de los campos como clave y las propiedades de los mismos como datos para una consulta con result_id
function array ifx fieldproperties resource $result_id	enumerar las propiedades de los campos sql
function ifx fieldtypes $result_id	result_id es el identificador válido devuelto por ifx_query() o ifx_prepare() sólo para consultas select
function array ifx fieldtypes	devuelve un arreglo asociativo con los nombres de las campos como llave y sus tipos de dato como valores para la consulta asociada con result_id
function array ifx fieldtypes resource $result_id	listar los tipos de dato de los campos sql de informix
function ifx free blob $bid	el id del objeto blob
function bool ifx free blob	devuelve true en caso de éxito o false en caso de error
function bool ifx free blob int $bid	elimina el objeto blob
function ifx free char $bid	el id del objeto char
function bool ifx free char	devuelve true en caso de éxito o false en caso de error
function bool ifx free char int $bid	elimina el objeto char
function ifx free result $result_id	result_id es un resultid válido devuelto por ifx_query() o ifx_prepare() ¡consultas de selección de tipo único!)
function bool ifx free result	devuelve true en caso de éxito o false en caso de error
function bool ifx free result resource $result_id	libera recursos de la consulta
function ifx get blob $bid	el id del objeto blob
function string ifx get blob	el contenido de el blob como un string o false en caso de error
function string ifx get blob int $bid	devolver el contenido de un objeto blob
function ifx get char $bid	el id del objeto char
function string ifx get char	devuelve el contenido como un string o false en caso de error
function string ifx get char int $bid	devolver el contenido del objeto char
function ifx getsqlca $result_id	result_id es el identificador válido devuelto por ifx_query() o ifx_prepare() sólo para consultas select
function array ifx getsqlca	devuelve un arreglo asociativo con las siguientes entradas: sqlerrd0 sqlerrd1 sqlerrd2 sqlerrd3 sqlerrd4 y sqlerrd5
function array ifx getsqlca resource $result_id	devolver el contenido de sqlca
function ifx htmltbl result $result_id	result_id es un resultid valido devuelto por ifx_query() o ifx_prepare() ¡consultas de selección de tipo único!)
function ifx htmltbl result $html_table_options	este argumento opcional es un string de la etiqueta de opciones < table >
function int ifx htmltbl result	devuelve el número de filas recuperadas o false en caso de error
function int ifx htmltbl result resource $result_id string $html_table_options	formatea todas las filas de una consulta en una tabla html
function ifx nullformat $mode	si el modo es 0 devuelve y si el modo es 1 devuelve null
function bool ifx nullformat	devuelve true en caso de éxito o false en caso de error
function bool ifx nullformat int $mode	establecer el valor devuelto de manera predeterminada al extraer una fila
function ifx num fields $result_id	result_id es el identificador válido devuelto por ifx_query() o ifx_prepare() sólo para consultas select
function int ifx num fields	devuelve el número de columnas de una consulta asociada a result_id o false en caso de error
function int ifx num fields resource $result_id	devolver el n&uacute;mero de columnas de una consulta
function ifx num rows $result_id	result_id es el identificador válido devuelto por ifx_query() o ifx_prepare() sólo para consultas select
function int ifx num rows	devuelve el número de filas extraidas o false en caso de error
function int ifx num rows resource $result_id	contar las filas que ya han sido devueltas por una consulta
function ifx pconnect $password	la contraseña como cadena
function ifx pconnect $database	el nombre de la base de datos como cadena
function ifx pconnect $userid	el usuario como cadena
function resource ifx pconnect	devuelve un identificador válido para una conexión persistente con informix en caso de éxito o false en caso de error
function resource ifx pconnect string $database string $userid string $password	abrir una conexi&oacute;n persistente con informix
function ifx prepare $link_identifier	el identificador de la conexión
function ifx prepare $query	la consulta como cadena
function ifx prepare $cursor_def	este parámetro opcional permite tratarlo como un cursor scroll y / o hold
function ifx prepare $blobidarray	si existen columnas blob byte o text en la consulta se puede agregar un parámetro blobidarray que contenga los identificadores blob correspondientes
function resource ifx prepare	devuelve un identificador válido del resultado para ser usado por ifx_do() o false en caso de error
function resource ifx prepare string $query resource $link_identifier int $cursor_def mixed $blobidarray	preparar una sentencia sql para su ejecuci&oacute;n
function ifx query $query	consulta a enviar
function ifx query $link_identifier	identificador de la conexión
function ifx query $blobidarray	si existen columnas blob byte o text en la consulta puede agregar un parámetro blobidarray que contenga los identificadores blob correspondientes
function ifx query $cursor_def	este parámetro opcional permite tratarlo como un cursor scroll y / o hold
function resource ifx query	devuelve un identificador informix válido en caso de éxito o false si ocurre algún error
function resource ifx query string $query resource $link_identifier int $cursor_type mixed $blobidarray	enviar una consulta informix
function ifx textasvarchar $mode	el modo 0 devolverá un identificador blob y el modo 1 devolverá un varchar que contenga el texto
function bool ifx textasvarchar	devuelve true en caso de éxito o false en caso de error
function bool ifx textasvarchar int $mode	establecer el modo de texto predeterminado
function ifx update char $bid	es el identificador del objeto char
function ifx update char $content	la nueva información como cadena
function bool ifx update char	devuelve true en caso de éxito o false en caso de error
function bool ifx update char int $bid string $content	actualizar el contenido de un objeto char
function ifxus close slob $bid	un identificador slob valido
function bool ifxus close slob	devuelve true en caso de éxito o false en caso de error
function bool ifxus close slob int $bid	cerrar un objeto slob
function ifxus create slob $mode	una combinación de ifx_lo_rdonly ifx_lo_wronly ifx_lo_append ifx_lo_rdwr ifx_lo_buffer e ifx_lo_nobuffer
function int ifxus create slob	devuelve un nuevo identificador slob o false caso de error
function int ifxus create slob int $mode	crear y abrir un objeto slob
function ifxus read slob $nbytes	el número de bytes a leer
function ifxus read slob $bid	un identificador slob válido
function string ifxus read slob	devuelve el contenido slob como cadena o false en caso de error
function string ifxus read slob int $bid int $nbytes	leer la cantidad especificada de bytes de un objeto slob
function ifxus tell slob $bid	un identificador slob válido
function int ifxus tell slob	devuelve la posición de búsqueda como entero o false en caso de error
function int ifxus tell slob int $bid	devolver la posici&oacute;n actual del archivo
function ifxus write slob $content	el contenido a escribir como cadena
function ifxus write slob $bid	un identificador slob válido
function int ifxus write slob	devuelve el número de bytes escritos como entero o false en caso de error
function int ifxus write slob int $bid string $content	escribir una cadena en un objeto slob
function iis get server by path $path	la ruta al directorio raíz
function int iis get server by path	devuelve el número de instancia del servidor
function int iis get server by path string $path	devuelve el n&uacute;mero de instancia asociado con path
function image type to extension $imagetype	una de las constantes imagetype_xxx
function image type to extension $include_dot	si le antecede un punto a la extensión
function string image type to extension	una cadena con la extensión correspondiente al tipo de imagen dado
function string image type to extension int $imagetype bool $include_dot	obtiene la extensi&oacute;n de un tipo de imagen
function image type to mime type $imagetype	una de las constantes imagetype_xxx
function string image type to mime type int $imagetype	obtiene el tipo mime de un tipo de imagen devuelto por getimagesize exif_read_data exif_thumbnail exif_imagetype
function image2wbmp $threshold	el valor del umbral entre 0 y 255 inclusive
function image2wbmp $filename	ruta del fichero guardado
function image2wbmp $image	un recurso image es devuelto por una de las funciones de creación de imágenes como imagecreatetruecolor()
function bool image2wbmp	devuelve true en caso de éxito o false en caso de error
function bool image2wbmp resource $image string $filename int $threshold	exportar la imagen al navegador o a un fichero
function imagealphablending $blendmode	si se habilita o no el modo mezcla
function imagealphablending $image	un recurso image es devuelto por una de las funciones de creación de imágenes como imagecreatetruecolor()
function bool imagealphablending	devuelve true en caso de éxito o false en caso de error
function bool imagealphablending resource $image bool $blendmode	establece el modo de mezcla para una imagen
function imagecharup $x	coordenada x del inicio
function imagecharup $font	puede ser 1 2 3 4 5 para fuentes built-in en latin2 encoding los números más altos corresponden a large fonts o cualquier de sus propios identificadores de fuentes registrados con imageloadfont()
function imagecharup $c	el carácter a dibujar
function imagecharup $y	coordenada y del inicio
function imagecharup $image	un recurso image es devuelto por una de las funciones de creación de imágenes como imagecreatetruecolor()
function imagecharup $color	un identificador de color creado con imagecolorallocate()
function bool imagecharup	devuelve true en caso de éxito o false en caso de error
function bool imagecharup resource $image int $font int $x int $y string $c int $color	dibujar un car&aacute;cter verticalmente
function imagecolorallocate $red	valor del componente rojo
function imagecolorallocate $green	valor del componente verde
function imagecolorallocate $blue	valor del componente azul
function imagecolorallocate $image	un recurso image es devuelto por una de las funciones de creación de imágenes como imagecreatetruecolor()
function int imagecolorallocate	un identificador de color o false si la asignación falló
function int imagecolorallocate resource $image int $red int $green int $blue	asigna un color para una imagen
function imagecolorallocatealpha $red	valor del componente rojo
function imagecolorallocatealpha $green	valor del componente verde
function imagecolorallocatealpha $blue	valor del componente azul
function imagecolorallocatealpha $alpha	un valor entre 0 y 127
function imagecolorallocatealpha $image	un recurso image es devuelto por una de las funciones de creación de imágenes como imagecreatetruecolor()
function int imagecolorallocatealpha	un identificador de color o false si la asignación falló
function int imagecolorallocatealpha resource $image int $red int $green int $blue int $alpha	asignar un color para una imagen
function imagecolorclosestalpha $red	valor del componente rojo
function imagecolorclosestalpha $green	valor del componente verde
function imagecolorclosestalpha $blue	valor del componente azul
function imagecolorclosestalpha $alpha	un valor entre 0 y 127
function imagecolorclosestalpha $image	un recurso image es devuelto por una de las funciones de creación de imágenes como imagecreatetruecolor()
function int imagecolorclosestalpha	devuelve el índice del color más próximo en la paleta
function int imagecolorclosestalpha resource $image int $red int $green int $blue int $alpha	obtener el &iacute;ndice del color m&aacute;s pr&oacute;ximo al color + alpha especificado
function imagecolorclosesthwb $red	valor del componente rojo
function imagecolorclosesthwb $green	valor del componente verde
function imagecolorclosesthwb $blue	valor del componente azul
function imagecolorclosesthwb $image	un recurso image es devuelto por una de las funciones de creación de imágenes como imagecreatetruecolor()
function int imagecolorclosesthwb	devuelve un entero con el índice del color que tiene el tono blancura y negrura más próximos al color dado
function int imagecolorclosesthwb resource $image int $red int $green int $blue	obtener el &iacute;ndice del color que tiene el tono blancura y negrura
function imagecolordeallocate $color	el identificador de color
function imagecolordeallocate $image	un recurso image es devuelto por una de las funciones de creación de imágenes como imagecreatetruecolor()
function bool imagecolordeallocate	devuelve true en caso de éxito o false en caso de error
function bool imagecolordeallocate resource $image int $color	desasignar un color de una imagen
function imagecolorexact $red	valor del componente rojo
function imagecolorexact $green	valor del componente verde
function imagecolorexact $blue	valor del componente azul
function imagecolorexact $image	un recurso image es devuelto por una de las funciones de creación de imágenes como imagecreatetruecolor()
function int imagecolorexact	devuelve el índice del color especificado en la paleta o -1 si el color no existe
function int imagecolorexact resource $image int $red int $green int $blue	obtener el &iacute;ndice del color especificado
function imagecolormatch $image2	un recurso de enlace a una imagen de paleta que apunta a una imagen que tiene el mismo tamaño que image1
function imagecolormatch $image1	un recurso de enlace a una imagen de color verdadero
function bool imagecolormatch	devuelve true en caso de éxito o false en caso de error
function bool imagecolormatch resource $image1 resource $image2	hacer que los colores de la versi&oacute;n de la paleta de una imagen coincidan m&aacute;s estrechamente con la versi&oacute;n de color verdadero
function imagecolorresolve $red	valor del componente rojo
function imagecolorresolve $green	valor del componente verde
function imagecolorresolve $blue	valor del componente azul
function imagecolorresolve $image	un recurso image es devuelto por una de las funciones de creación de imágenes como imagecreatetruecolor()
function int imagecolorresolve	devuelve un índice de color
function int imagecolorresolve resource $image int $red int $green int $blue	obtener el &iacute;ndice del color especificado o su alternativa m&aacute;s pr&oacute;xima posible
function imagecolorresolvealpha $red	valor del componente rojo
function imagecolorresolvealpha $green	valor del componente verde
function imagecolorresolvealpha $blue	valor del componente azul
function imagecolorresolvealpha $alpha	un valor entre 0 y 127
function imagecolorresolvealpha $image	un recurso image es devuelto por una de las funciones de creación de imágenes como imagecreatetruecolor()
function int imagecolorresolvealpha	devuelve un índice de color
function int imagecolorresolvealpha resource $image int $red int $green int $blue int $alpha	obtener el &iacute;ndice del color + alpha especificado o su alternativa m&aacute;s pr&oacute;xima posible
function imagecolortransparent $color	un identificador de color creado con imagecolorallocate()
function imagecolortransparent $image	un recurso image es devuelto por una de las funciones de creación de imágenes como imagecreatetruecolor()
function int imagecolortransparent	el identificador del nuevo o actual si no se especificó nada color transparente es devuelto
function int imagecolortransparent resource $image int $color	definir un color como transparente
function imageconvolution $matrix	una matriz de 3x3: una matriz de tres matrices de tres valores float
function imageconvolution $div	el divisor del resultado de la convolución usado para normalización
function imageconvolution $offset	índice de color
function imageconvolution $image	un recurso image es devuelto por una de las funciones de creación de imágenes como imagecreatetruecolor()
function bool imageconvolution	devuelve true en caso de éxito o false en caso de error
function bool imageconvolution resource $image array $matrix float $div float $offset	aplicar una matriz de convoluci&oacute;n de 3x3 usando coeficiente e &iacute;ndice
function imagecreate $height	el alto de la imagen
function imagecreate $width	el ancho de la imagen
function resource imagecreate	en caso de éxito devuelve un identificador de recurso de imagen y false en caso de error
function resource imagecreate int $width int $height	crea una nueva imagen basada en paleta
function imagecreatefromgd $filename	ruta al fichero gd
function resource imagecreatefromgd	en caso de éxito devuelve un identificador de recurso de imagen y false en caso de error
function resource imagecreatefromgd string $filename	crear una imagen nueva desde un fichero gd o un url
function imagecreatefromgd2part $height	altura original
function imagecreatefromgd2part $filename	ruta a la imagen gd2
function imagecreatefromgd2part $srcX	coordenada x del punto de origen
function imagecreatefromgd2part $width	ancho original
function imagecreatefromgd2part $srcY	coordenada y del punto de origen
function resource imagecreatefromgd2part	en caso de éxito devuelve un identificador de recurso de imagen y false en caso de error
function resource imagecreatefromgd2part string $filename int $srcX int $srcY int $width int $height	crear una nueva imagen desde una parte dada de un fichero gd2 o un url
function imagecreatefromgif $filename	ruta de la imagen gif
function resource imagecreatefromgif	en caso de éxito devuelve un identificador de recurso de imagen y false en caso de error
function resource imagecreatefromgif string $filename	crea una nueva imagen a partir de un fichero o de una url
function imagecreatefromwebp $filename	ruta a la imagen webp
function resource imagecreatefromwebp	en caso de éxito devuelve un identificador de recurso de imagen y false en caso de error
function resource imagecreatefromwebp string $filename	crea una nueva imagen a partir de un fichero o de una url
function imagecreatefromxbm $filename	ruta de la imagen xbm
function resource imagecreatefromxbm	en caso de éxito devuelve un identificador de recurso de imagen y false en caso de error
function resource imagecreatefromxbm string $filename	crea una nueva imagen a partir de un fichero o de una url
function imagecreatefromxpm $filename	ruta de la imagen xpm
function resource imagecreatefromxpm	en caso de éxito devuelve un identificador de recurso de imagen y false en caso de error
function resource imagecreatefromxpm string $filename	crea una nueva imagen a partir de un fichero o de una url
function imagecreatetruecolor $height	alto de la imagen
function imagecreatetruecolor $width	ancho de la imagen
function resource imagecreatetruecolor	en caso de éxito devuelve un identificador de recurso de imagen y false en caso de error
function resource imagecreatetruecolor int $width int $height	crear una nueva imagen de color verdadero
function imagedashedline $color	el color de relleno
function imagedashedline $image	un recurso image es devuelto por una de las funciones de creación de imágenes como imagecreatetruecolor()
function imagedashedline $y2	coordenada y inferior derecha
function imagedashedline $y1	coordenada y superior izquierda 0 0 es la esquina superior izquierda de la imagen
function imagedashedline $x2	coordenada x inferior derecha
function imagedashedline $x1	coordenada x superior izquierda
function bool imagedashedline	siempre devuelve true
function bool imagedashedline resource $image int $x1 int $y1 int $x2 int $y2 int $color	dibujar una l&iacute;nea discontinua
function imagedestroy $image	un recurso image es devuelto por una de las funciones de creación de imágenes como imagecreatetruecolor()
function bool imagedestroy	devuelve true en caso de éxito o false en caso de error
function bool imagedestroy resource $image	destruir una imagen
function imagefilledellipse $color	el color de la elipse
function imagefilledellipse $cx	coordenada x del centro
function imagefilledellipse $image	un recurso image es devuelto por una de las funciones de creación de imágenes como imagecreatetruecolor()
function imagefilledellipse $cy	coordenada y del centro
function imagefilledellipse $width	el ancho de la elipse
function imagefilledellipse $height	el alto de la elipse
function bool imagefilledellipse	devuelve true en caso de éxito o false en caso de error
function bool imagefilledellipse resource $image int $cx int $cy int $width int $height int $color	dibujar una elipse con relleno
function imagefilledpolygon $points	una matriz que contiene las coordenadas x e y de los vértices del polígono consecutivamente
function imagefilledpolygon $num_points	número total de vértices lo que debe ser al menos 3
function imagefilledpolygon $color	un identificador de color creado con imagecolorallocate()
function imagefilledpolygon $image	un recurso image es devuelto por una de las funciones de creación de imágenes como imagecreatetruecolor()
function bool imagefilledpolygon	devuelve true en caso de éxito o false en caso de error
function bool imagefilledpolygon resource $image array $points int $num_points int $color	dibujar un pol&iacute;gono con relleno
function imagefilledrectangle $x2	coordenada x del punto 2
function imagefilledrectangle $y2	coordenada y del punto 2
function imagefilledrectangle $y1	coordenada y del punto 1
function imagefilledrectangle $x1	coordenada x del punto 1
function imagefilledrectangle $image	un recurso image es devuelto por una de las funciones de creación de imágenes como imagecreatetruecolor()
function imagefilledrectangle $color	el color del relleno
function bool imagefilledrectangle	devuelve true en caso de éxito o false en caso de error
function bool imagefilledrectangle resource $image int $x1 int $y1 int $x2 int $y2 int $color	dibujar un rect&aacute;ngulo con relleno
function imagefilter $arg2	img_filter_colorize : valor del componente verde
function imagefilter $arg4	img_filter_colorize : canal alfa
function imagefilter $filtertype	filtertype puede ser lo siguitente: img_filter_negate : invierte todos los colores de la imagen
function imagefilter $arg3	img_filter_colorize : valor del componente azul
function imagefilter $image	un recurso image es devuelto por una de las funciones de creación de imágenes como imagecreatetruecolor()
function imagefilter $arg1	img_filter_brightness : nivel de brillo
function bool imagefilter	devuelve true en caso de éxito o false en caso de error
function bool imagefilter resource $image int $filtertype int $arg1 int $arg2 int $arg3 int $arg4	aplica un filtro a una imagen
function imageflip $mode	modo de volteo; puede ser una de las constantes img_flip_* : constante significado img_flip_horizontal voltea la imagen horizontalmente
function imageflip $image	un recurso image es devuelto por una de las funciones de creación de imágenes como imagecreatetruecolor()
function bool imageflip	devuelve true en caso de éxito o false en caso de error
function bool imageflip resource $image int $mode	flips an image using a given mode
function imagefontheight $font	puede ser 1 2 3 4 5 para fuentes built-in en latin2 encoding los números más altos corresponden a large fonts o cualquier de sus propios identificadores de fuentes registrados con imageloadfont()
function int imagefontheight	devuelve el alto de píxel de la fuente
function int imagefontheight int $font	obtener el alto de la fuente
function imagefontwidth $font	puede ser 1 2 3 4 5 para fuentes built-in en latin2 encoding los números más altos corresponden a large fonts o cualquier de sus propios identificadores de fuentes registrados con imageloadfont()
function int imagefontwidth	devuelve el ancho de píxel de la fuente
function int imagefontwidth int $font	obtener el ancho de la fuente
function imageftbbox $text	la cadena que va a ser medida
function imageftbbox $angle	ángulo en grados en el que text será medido
function imageftbbox $fontfile	el nombre de un archivo de fuente truetype puede ser una url
function imageftbbox $size	tamaño de fuente
function imageftbbox $extrainfo	posibles índeces de matriz para extrainfo clave tipo significado linespacing float define el espacio entre líneas
function array imageftbbox float $size float $angle string $fontfile string $text array $extrainfo	devolver la caja circundante de un texto usando fuentes mediante freetype 2
function imagegammacorrect $outputgamma	la salida gamma
function imagegammacorrect $inputgamma	la entrada gamma
function imagegammacorrect $image	un recurso image es devuelto por una de las funciones de creación de imágenes como imagecreatetruecolor()
function bool imagegammacorrect	devuelve true en caso de éxito o false en caso de error
function bool imagegammacorrect resource $image float $inputgamma float $outputgamma	aplicar una correcci&oacute;n gamma a la imagen gd
function imagegd2 $chunk_size	tamaño del trozo
function imagegd2 $type	puede ser img_gd2_raw o img_gd2_compressed
function imagegd2 $filename	ruta en la que guardar el fichero
function imagegd2 $image	un recurso image es devuelto por una de las funciones de creación de imágenes como imagecreatetruecolor()
function bool imagegd2	devuelve true en caso de éxito o false en caso de error
function bool imagegd2 resource $image string $filename int $chunk_size int $type	imprime una imagen gd2 a un navegador o archivo
function resource imagegrabscreen	devuelve un identificador de recurso de imagen si tiene éxito false si falló
function resource imagegrabscreen	capturar la pantalla completa
function imagegrabwindow $client_area	incluye el área del cliente de la ventana de aplicación
function imagegrabwindow $window_handle	el id del hwnd de ventana
function resource imagegrabwindow	devuelve un identificador de recurso de imagen si tiene éxito false si falló
function resource imagegrabwindow int $window_handle int $client_area	capturar una ventana
function imageinterlace $interlace	si no es cero la imagen será entrelazada si no el bit de entrelazamiento será desactivado
function imageinterlace $image	un recurso image es devuelto por una de las funciones de creación de imágenes como imagecreatetruecolor()
function int imageinterlace	devuelve 1 si el bit de entrelazamiento está establecido para la imagen 0 si no
function int imageinterlace resource $image int $interlace	habilitar o deshabilitar en entrelazamiento
function imagejpeg $quality	quality es opcional y su valor es desde 0 peor calidad archivo más pequeño a 100 mejor calidad archivo más grande
function imagejpeg $filename	ruta en la que guardar el fichero
function imagejpeg $image	un recurso image es devuelto por una de las funciones de creación de imágenes como imagecreatetruecolor()
function bool imagejpeg	devuelve true en caso de éxito o false en caso de error
function bool imagejpeg resource $image string $filename int $quality	exportar la imagen al navegador o a un fichero
function imagelayereffect $IMG_EFFECT_OVERLAY	la capa de revestimieto tiene el efecto de que los píxeles del fondo negro permanecerán negros los píxeles del fondo blanco permanecerán blancos pero los los píxeles del fondo gris tomarán el color del píxel del primer plano
function imagelayereffect $effect	una de las siguientes constantes: img_effect_replace usar el píxel de sustitución equivalente a pasar true a imagealphablending() img_effect_alphablend unsar la mezcla de píxel normal equivalente a pasar true a imagealphablending() img_effect_normal lo mismo que img_effect_alphablend
function imagelayereffect $IMG_EFFECT_REPLACE	usar el píxel de sustitución equivalente a pasar true a imagealphablending()
function imagelayereffect $image	un recurso image es devuelto por una de las funciones de creación de imágenes como imagecreatetruecolor()
function imagelayereffect $IMG_EFFECT_ALPHABLEND	unsar la mezcla de píxel normal equivalente a pasar true a imagealphablending()
function imagelayereffect $IMG_EFFECT_NORMAL	lo mismo que img_effect_alphablend
function bool imagelayereffect	devuelve true en caso de éxito o false en caso de error
function bool imagelayereffect resource $image int $effect	establecer la bandera de mezcla alfa para usar los efectos de capa de la biblioteca gd incluida
function imagepalettetotruecolor $image	un recurso image es devuelto por una de las funciones de creación de imágenes como imagecreatetruecolor()
function bool imagepalettetotruecolor	devuelve true si la conversión se completó o si la imagen origen ya era una imagen de color verdadero; de otro modo devuelve false
function bool imagepalettetotruecolor resource $src	convierte una imagen basada en paleta a color verdadero
function imagepng $filters	permite reducir el tamaño del archivo png
function imagepng $quality	nivel de compresión: desde 0 sin compresión hasta 9
function imagepng $filename	ruta en la que guardar el fichero
function imagepng $image	un recurso image es devuelto por una de las funciones de creación de imágenes como imagecreatetruecolor()
function bool imagepng	devuelve true en caso de éxito o false en caso de error
function bool imagepng resource $image string $filename int $quality int $filters	imprimir una imagen png al navegador o a un archivo
function imagepsencodefont $font_index	un recurso de tipo de letra devuelto por imagepsloadfont()
function imagepsencodefont $encodingfile	el formato exacto de este fichero está descrito en la documentación de t1lib
function bool imagepsencodefont	devuelve true en caso de éxito o false en caso de error
function bool imagepsencodefont resource $font_index string $encodingfile	cambiar el vector de codificaci&oacute;n de car&aacute;cter de un tipo de letra
function imagepsextendfont $extend	valor de extensión debe ser mayor que 0
function imagepsextendfont $font_index	un recurso de fuente devuelto por imagepsloadfont()
function bool imagepsextendfont	devuelve true en caso de éxito o false en caso de error
function bool imagepsextendfont resource $font_index float $extend	extender o condensar una fuente
function imagepsfreefont $font_index	un recurso de fuente devuelto por imagepsloadfont()
function bool imagepsfreefont	devuelve true en caso de éxito o false en caso de error
function bool imagepsfreefont resource $font_index	liberar la memoria usada por una fuente postscript type 1
function imagepsslantfont $slant	el nivel de inclinación
function imagepsslantfont $font_index	un recurso de fuente devuelto por imagepsloadfont()
function bool imagepsslantfont	devuelve true en caso de éxito o false en caso de error
function bool imagepsslantfont resource $font_index float $slant	inclinar una fuente
function imagerectangle $x1	coordenada x superior izquierda
function imagerectangle $y2	coordenada y inferior derecha
function imagerectangle $y1	coordenada y superior izquierda 0 0 es la esquina superior izquierda de la imagen
function imagerectangle $image	un recurso image es devuelto por una de las funciones de creación de imágenes como imagecreatetruecolor()
function imagerectangle $x2	coordenada x inferior derecha
function imagerectangle $color	un identificador de color creado con imagecolorallocate()
function bool imagerectangle	devuelve true en caso de éxito o false en caso de error
function bool imagerectangle resource $image int $x1 int $y1 int $x2 int $y2 int $color	dibuja un rect&aacute;ngulo
function imagerotate $ignore_transparent	si está establecido y no es cero los colores transparentes son ignorados de otro modo se conservan
function imagerotate $angle	ángulo de rotación en grados
function imagerotate $bgd_color	especifica el color de la zona no cubierta después de la rotación
function imagerotate $image	un recurso image es devuelto por una de las funciones de creación de imágenes como imagecreatetruecolor()
function resource imagerotate	devuelve un recurso de imgane para la imagen rotada o false en caso de error
function resource imagerotate resource $image float $angle int $bgd_color int $ignore_transparent	rotar una imagen con un &aacute;ngulo dado
function imagescale $new_height	el alto al cual redimensionar la imagen
function imagescale $new_width	el ancho al cual redimensionar la imagen
function imagescale $mode	una de las constantes img_nearest_neighbour img_bilinear_fixed img_bicubic img_bicubic_fixed u otra cualquiera usará dos pasadas
function imagescale $image	un recurso image es devuelto por una de las funciones de creación de imágenes como imagecreatetruecolor()
function resource imagescale	devuelve el recurso de la imagen redimensionada en caso de éxito o false en caso de error
function resource imagescale resource $image int $new_width int $new_height int $mode	redimensiona una imagen usando un nuevo ancho y alto
function imagesetbrush $brush	un recurso de imagen
function imagesetbrush $image	un recurso image es devuelto por una de las funciones de creación de imágenes como imagecreatetruecolor()
function bool imagesetbrush	devuelve true en caso de éxito o false en caso de error
function bool imagesetbrush resource $image resource $brush	establecer la imagen de pincel para el dibujo de l&iacute;neas
function imagesetinterpolation $method	el método de interpolación que puede ser uno de los siguientes: img_bell : filtro bell
function imagesetinterpolation $image	un recurso image es devuelto por una de las funciones de creación de imágenes como imagecreatetruecolor()
function bool imagesetinterpolation	devuelve true en caso de éxito o false en caso de error
function bool imagesetinterpolation resource $image int $method	establecer el m&eacute;todo de interpolaci&oacute;n
function imagesetpixel $color	un identificador de color creado con imagecolorallocate()
function imagesetpixel $x	coordenada x
function imagesetpixel $y	coordenada y
function imagesetpixel $image	un recurso image es devuelto por una de las funciones de creación de imágenes como imagecreatetruecolor()
function bool imagesetpixel	devuelve true en caso de éxito o false en caso de error
function bool imagesetpixel resource $image int $x int $y int $color	establecer un simple p&iacute;xel
function imagesetthickness $thickness	el grosor en píxeles
function imagesetthickness $image	un recurso image es devuelto por una de las funciones de creación de imágenes como imagecreatetruecolor()
function bool imagesetthickness	devuelve true en caso de éxito o false en caso de error
function bool imagesetthickness resource $image int $thickness	establecer el grosor para el dibujo de l&iacute;neas
function imagesettile $tile	el recurso de imagen que va a ser usado como una tesela
function imagesettile $image	un recurso image es devuelto por una de las funciones de creación de imágenes como imagecreatetruecolor()
function bool imagesettile	devuelve true en caso de éxito o false en caso de error
function bool imagesettile resource $image resource $tile	establecer la imagen de tesela para rellenos
function imagestring $string	la cadena a escribir
function imagestring $font	puede ser 1 2 3 4 5 para fuentes built-in en latin2 encoding los números más altos corresponden a large fonts o cualquier de sus propios identificadores de fuentes registrados con imageloadfont()
function imagestring $y	coordenada y de la esquina superior izquierda
function imagestring $image	un recurso image es devuelto por una de las funciones de creación de imágenes como imagecreatetruecolor()
function imagestring $x	coordenada x de la esquina superior izquierda
function imagestring $color	un identificador de color creado con imagecolorallocate()
function bool imagestring	devuelve true en caso de éxito o false en caso de error
function bool imagestring resource $image int $font int $x int $y string $string int $color	dibujar una cadena horizontalmente
function imagestringup $string	la cadena a escribir
function imagestringup $font	puede ser 1 2 3 4 5 para fuentes built-in en latin2 encoding los números más altos corresponden a large fonts o cualquier de sus propios identificadores de fuentes registrados con imageloadfont()
function imagestringup $y	coordenada y de la esquina inferior izquierda
function imagestringup $x	coordenada x de la esquina inferior izquierda
function imagestringup $image	un recurso image es devuelto por una de las funciones de creación de imágenes como imagecreatetruecolor()
function imagestringup $color	un identificador de color creado con imagecolorallocate()
function bool imagestringup	devuelve true en caso de éxito o false en caso de error
function bool imagestringup resource $image int $font int $x int $y string $string int $color	dibujar una cadena verticalmente
function imagesx $image	un recurso image es devuelto por una de las funciones de creación de imágenes como imagecreatetruecolor()
function int imagesx	devuelve el ancho de image o false si se produjeron errores
function int imagesx resource $image	obtener el ancho de una imagen
function int imagetypes	devuelve un campo de bit correspondiente a los formatos de imagen soportados por la versión de gd vinculada a php
function int imagetypes	devolver los tipos de imagen soportados por la versi&oacute;n actual de php
function imagewbmp $foreground	se puede establecer el color de primer plano con este parámetro estableciendo un identificador obtenido de imagecolorallocate()
function imagewbmp $filename	ruta en la que guardar el fichero
function imagewbmp $image	un recurso image es devuelto por una de las funciones de creación de imágenes como imagecreatetruecolor()
function bool imagewbmp	devuelve true en caso de éxito o false en caso de error
function bool imagewbmp resource $image string $filename int $foreground	exportar la imagen al navegador o a un fichero
function imagewebp $filename	ruta en la que guardar el fichero
function imagewebp $image	un recurso image es devuelto por una de las funciones de creación de imágenes como imagecreatetruecolor()
function bool imagewebp	devuelve true en caso de éxito o false en caso de error
function bool imagewebp resource $image string $filename	imprimir una imagen webp al navegador o fichero
function imagexbm $foreground	se puede establecer el color de primer plano con este parámetro estableciendo un identificador obtenido de imagecolorallocate()
function imagexbm $filename	ruta en la que guardar el fichero
function imagexbm $image	un recurso image es devuelto por una de las funciones de creación de imágenes como imagecreatetruecolor()
function bool imagexbm	devuelve true en caso de éxito o false en caso de error
function bool imagexbm resource $image string $filename int $foreground	imprimir una imagen xbm en el navegador o en un fichero
function array imap alerts	devuelve un array de todos los mensajes de alerta de imap generados o false si no hay mensajes de alerta disponibles
function array imap alerts	devuelve todos los mensajes de alerte de imap que han sucedido
function imap append $message	el mensaje a añadir como cadena cuando se toma el servidor cyrus imap se debe usar \r\n como terminador de final de línea en lugar de \n o la operación fallará
function imap append $imap_stream	imap stream devuelto por imap_open()
function imap append $internal_date	si este parámetro se establece establecerá internaldate en el mensaje añadido
function imap append $options	si se proporciona options también serán escritas al mailbox
function imap append $mailbox	el nombre del buzón veáse imap_open() para más información
function bool imap append	devuelve true en caso de éxito o false en caso de error
function bool imap append resource $imap_stream string $mailbox string $message string $options string $internal_date	a&ntilde;adir un mensaje de cadena a un buz&oacute;n especificado
function imap base64 $text	el texto cifrado
function string imap base64	devuelve el mensaje decodificado como una cadena
function string imap base64 string $text	decodificar un texto cifrado con base64
function imap binary $string	la cadena 8bit
function string imap binary	devuelve una cadena codificada mediante base64
function string imap binary string $string	convertir una cadena 8bit a una cadena base64
function imap body $msg_number	el número de mensaje
function imap body $imap_stream	imap stream devuelto por imap_open()
function imap body $options	el parámetro opcional options es una máscara de bits con uno o más de lo siguiente: ft_uid - msg_number es un uid ft_peek - no establece la bandera \seen si no lo está ya ft_internal - la cadena devuelta está en formato interno no se canonizará a crlf
function string imap body	devuelve el cuerpo del mensaje especificado como cadena
function string imap body resource $imap_stream int $msg_number int $options	leer el cuerpo del mensaje
function imap bodystruct $msg_number	el número de mensaje
function imap bodystruct $section	la sección del cuerpo a leer
function imap bodystruct $imap_stream	imap stream devuelto por imap_open()
function object imap bodystruct	devuelve la información en un objeto; para una descripción detallada de la estructura del objeto y sus propiedades veáse imap_fetchstructure()
function object imap bodystruct resource $imap_stream int $msg_number string $section	leer la estructura de una secci&oacute;n del cuerpo especificado de un mensaje especificado
function imap check $imap_stream	imap stream devuelto por imap_open()
function object imap check resource $imap_stream	comprobar el buz&oacute;n actual
function imap clearflag full $sequence	una secuencia de números de mensaje
function imap clearflag full $imap_stream	imap stream devuelto por imap_open()
function imap clearflag full $options	options es una máscara de bits y puede contener la única opción: st_uid - el argumento secuenciado contiene uids en lugar de números secuenciados
function imap clearflag full $flag	las banderas que se pueden eliminar son \\seen \\answered \\flagged \\deleted y \\draft como está definido en rfc2060
function bool imap clearflag full	devuelve true en caso de éxito o false en caso de error
function bool imap clearflag full resource $imap_stream string $sequence string $flag int $options	limpia las banderas de mensajes
function imap close $imap_stream	imap stream devuelto por imap_open()
function imap close $flag	si se define como cl_expunge la función limpiará el buzón silenciosamente antes de cerrarlo eliminando todos los mensajes marcados para este fin
function bool imap close	devuelve true en caso de éxito o false en caso de error
function bool imap close resource $imap_stream int $flag	cerrar una secuencia imap
function imap createmailbox $imap_stream	imap stream devuelto por imap_open()
function imap createmailbox $buzon	el nombre del buzón vea imap_open() para más información
function bool imap createmailbox	devuelve true en caso de éxito o false en caso de error
function bool imap createmailbox resource $imap_stream string $mailbox	crear un nuevo buz&oacute;n de correo
function imap delete $msg_number	el número de mensaje
function imap delete $imap_stream	imap stream devuelto por imap_open()
function imap delete $options	es posible usar el valor ft_uid que indica que la función debe tratar el argumento msg_number como un uid
function bool imap delete	devuelve true
function bool imap delete resource $imap_stream int $msg_number int $options	marcar un mensaje para su borrado del buz&oacute;n actual
function imap deletemailbox $mailbox	el nombre del buzón véase imap_open() para más informacion
function imap deletemailbox $imap_stream	imap stream devuelto por imap_open()
function bool imap deletemailbox	devuelve true en caso de éxito o false en caso de error
function bool imap deletemailbox resource $imap_stream string $mailbox	elimina un buz&oacute;n
function array imap errors	esta función devuelve un array con todos los mensajes de error de imap generados desde la última llamada a imap_errors() o desde el principio de la página
function array imap errors	devuelve todos los errores de imap que han ocurrido
function imap fetch overview $sequence	una descripción de la secuencia de mensajes
function imap fetch overview $imap_stream	imap stream devuelto por imap_open()
function imap fetch overview $options	sequence contendrá una secuencia de índices de mensajes; o uids si este parámetro está establecido a ft_uid
function array imap fetch overview	devuelve un array de objetos que describen una cabecera de mensaje cada uno
function array imap fetch overview resource $imap_stream string $sequence int $options	leer una visi&oacute;n general de la informaci&oacute;n de las cabeceras del mensaje dado
function imap fetchbody $msg_number	el número de mensaje
function imap fetchbody $section	el número de la parte
function imap fetchbody $imap_stream	imap stream devuelto por imap_open()
function imap fetchbody $options	una máscara de bits con uno o más de lo siguiente: ft_uid - el msg_number es un uid ft_peek - no establece la bandera \seen si no está ya establecida ft_internal - la cadena devuelta está en formato interno no canonizará a crlf
function string imap fetchbody	devuelve una sección en particular del cuerpo de los mensajes especificados como una cadena de texto
function string imap fetchbody resource $imap_stream int $msg_number string $section int $options	traer una secci&oacute;n en particular del cuerpo del mensaje
function imap fetchmime $msg_number	el número de mensaje
function imap fetchmime $section	el número de parte
function imap fetchmime $imap_stream	imap stream devuelto por imap_open()
function imap fetchmime $options	una máscara de bits con uno o más de lo siguiente: ft_uid - msg_number es un uid ft_peek - no establecer la bandera \seen si no está ya establecida ft_internal - la cadena devuelta está en formato interno no se canonizará a crlf
function string imap fetchmime	devuelve las cabeceras mime de una sección en particular del cuerpo de los mensajes especificados como una cadena de texto
function string imap fetchmime resource $imap_stream int $msg_number string $section int $options	obtener las cabeceras mime para una secci&oacute;n en particular del mensaje
function imap fetchstructure $msg_number	el número de mensaje
function imap fetchstructure $options	este parámetro opcional sólo puede tener una única opción ft_uid que indica a la función que trate el argumento msg_number como un uid
function imap fetchstructure $imap_stream	imap stream devuelto por imap_open()
function object imap fetchstructure	devuelve un objeto que incluye la envoltura información interna tamaño banderas y cuerpo de la estructura además de un objeto similar para cada adjunto mime
function object imap fetchstructure resource $imap_stream int $msg_number int $options	leer la estructura de un mensaje en particular
function imap gc $imap_stream	imap stream devuelto por imap_open()
function imap gc $caches	especifica la caché a limpiar
function bool imap gc	devuelve true en caso de éxito o false en caso de error
function bool imap gc resource $imap_stream int $caches	limpia la cach&eacute; de imap
function imap get quota $quota_root	quota_root normalmente debería estar en la forma ususario
function imap get quota $imap_stream	imap stream devuelto por imap_open()
function array imap get quota	devuelve un array con valores integer de límite y uso par el buzón dado
function array imap get quota resource $imap_stream string $quota_root	obtener la cuota de ajustes por usuario y las estad&iacute;sticas de uso por buz&oacute;n
function imap get quotaroot $imap_stream	imap stream devuelto por imap_open()
function imap get quotaroot $quota_root	quota_root normalmente debería estar en la forma de su buzón es decir inbox)
function array imap get quotaroot	devuelve un array de valores concernientes al buzón del usuario especificado
function array imap get quotaroot resource $imap_stream string $quota_root	obtener la cuota de ajustes por usuario
function imap getacl $imap_stream	imap stream devuelto por imap_open()
function imap getacl $mailbox	el nombre del buzón veáse imap_open() para más información
function array imap getacl	devuelve un array asociativo de pares folder = > acl pairs
function array imap getacl resource $imap_stream string $mailbox	obtiene el acl para un buz&oacute;n dado
function imap getmailboxes $pattern	especifica donde en la jerarquía del buzón para empezar a buscar
function imap getmailboxes $imap_stream	imap stream devuelto por imap_open()
function imap getmailboxes $ref	ref normalmente debería ser la especificación del servidor como está descrita en imap_open()
function array imap getmailboxes	devuelve un array de objetos que contienen la información de los buzones
function array imap getmailboxes resource $imap_stream string $ref string $pattern	leer la lista de buzones devolviendo informaci&oacute;n detallada de cada uno
function imap getsubscribed $pattern	especifica donde en la jerarquía del buzón para empezar a buscar
function imap getsubscribed $imap_stream	imap stream devuelto por imap_open()
function imap getsubscribed $ref	ref normalmente debería ser la especificación del servidor como está descrita en imap_open()
function array imap getsubscribed	devuelve un array de objetos de contienen información de los buzones
function array imap getsubscribed resource $imap_stream string $ref string $pattern	listar todos los buzones suscritos
function imap headers $imap_stream	imap stream devuelto por imap_open()
function array imap headers	devuelve un array de cadenas formateadas con la información de cabecera
function array imap headers resource $imap_stream	devuelve las cabeceras de todos los mensajes de un buz&oacute;n
function string imap last error	devuelve el texto completo de último mensaje de error de imap que ocurrio en la página actual
function string imap last error	obtiene el &uacute;ltimo error de imap que ocurri&oacute; durante esta petici&oacute;n de p&aacute;gina
function imap list $pattern	especifica donde en la jerarquía del buzón para empezar a buscar
function imap list $imap_stream	imap stream devuelto por imap_open()
function imap list $ref	ref normalmente debería ser la especificación del servidor como está descrita en imap_open()
function array imap list	devuelve un array que contiene los nombres de los buzones
function array imap list resource $imap_stream string $ref string $pattern	leer la lista de buzones
function imap lsub $pattern	especifica donde en la jerarquía del buzón para empezar a buscar
function imap lsub $imap_stream	imap stream devuelto por imap_open()
function imap lsub $ref	ref normalmente debería ser la especificación del servidor como está descrita en imap_open()
function array imap lsub	devuelve un array de todos los buzones suscritos
function array imap lsub resource $imap_stream string $ref string $pattern	listar todos los buzones suscritos
function imap mail move $imap_stream	imap stream devuelto por imap_open()
function imap mail move $msglist	msglist es un rango y no números de mensajes como está descrito en rfc2060
function imap mail move $mailbox	el nombre del buzón véase imap_open() para más información
function imap mail move $options	options es una máscara de bits y puede contener la única opción: cp_uid - los números de secuencia que contienen uids
function bool imap mail move	devuelve true en caso de éxito o false en caso de error
function bool imap mail move resource $imap_stream string $msglist string $mailbox int $options	mover los mensajes especificados a un buz&oacute;n
function imap mail $subject	el asunto del correo
function imap mail $message	el cuerpo del correo véase imap_mail_compose()
function imap mail $to	el destinatario
function imap mail $additional_headers	como cadena con cabeceras adicionales para ser establecidas en el correo
function imap mail $bcc	los destinatarios especificados en bcc recibirán el correo pero son excluidos de las cabeceras
function imap mail $rpath	use este parámetro para especificar la ruta de vuelta si la entrega del corro falla
function bool imap mail	devuelve true en caso de éxito o false en caso de error
function bool imap mail string $to string $subject string $message string $additional_headers string $cc string $bcc string $rpath	enviar un mensaje de correo electr&oacute;nico
function imap mime header decode $text	el texto mime
function array imap mime header decode	los elementos decodificados son devueltos como un array de objetos donde cada objeto tiene dos propiedades charset y text
function array imap mime header decode string $text	decodificar los elementos de la cabecera mime
function imap msgno $imap_stream	imap stream devuelto por imap_open()
function imap msgno $uid	el uid del mensaje
function int imap msgno	devuelve el número de secuencia de mensaje para el uid dado
function int imap msgno resource $imap_stream int $uid	obtiene el n&uacute;mero de secuencia de mensaje para el uid dado
function imap num recent $imap_stream	imap stream devuelto por imap_open()
function int imap num recent	devuelve el número de mensajes recientes en el buzón actual como un integer
function int imap num recent resource $imap_stream	obtiene el n&uacute;mero de mensajes recientes en el buz&oacute;n actual
function imap open $params	parámetros de conexión las siguientes claves cadena pueden usarse para establecer uno o más parámetros de conexión: disable_authenticator - deshabilitar las propieades de autenticación
function imap open $username	el nombre de usuario
function imap open $options	options es una máscara de bits con uno o más de lo siguiente: op_readonly - abrir un buzón de sólo lectura op_anonymous - no usar o actualizar un
function imap open $n_retries	número máximo de intentos de conexión
function imap open $password	la contraseña asociada con username
function imap open $mailbox	un nombre de buzón consiste en una ruta de servidor y una de buzón para este servidor
function resource imap open	devuelve un flujo imap en caso de éxito o false en caso de error
function resource imap open string $mailbox string $username string $password int $options int $n_retries array $params	abrir un flujo imap a un buz&oacute;n
function imap ping $imap_stream	imap stream devuelto por imap_open()
function bool imap ping	devuelve true si el flujo está aún activo false si no
function bool imap ping resource $imap_stream	comprobar si el flujo de imap est&aacute; a&uacute;n activo
function imap reopen $n_retries	número máximo de intentos de conexion
function imap reopen $imap_stream	imap stream devuelto por imap_open()
function imap reopen $mailbox	el nombre del buzón véase imap_open() para más información
function imap reopen $options	options es una máscara de bits con uno o más de lo siguiente: op_readonly - abrir el buzón en sólo lectura op_anonymous - no usar o actualizar un
function bool imap reopen	devuelve true si el flujo es reabierto false si no
function bool imap reopen resource $imap_stream string $mailbox int $options int $n_retries	reabrir un flujo imap hacia un nuevo buz&oacute;n
function imap rfc822 parse adrlist $default_host	el nombre del host predeterminado
function imap rfc822 parse adrlist $address	una cadena que contiene direcciones
function array imap rfc822 parse adrlist	devuelve un array de objetos
function array imap rfc822 parse adrlist string $address string $default_host	analiza una cadena de direcci&oacute;n
function imap rfc822 parse headers $headers	la información de las cabeceras analizadas
function imap rfc822 parse headers $defaulthost	el nombre del host predeterminado
function object imap rfc822 parse headers	devuelve un objeto similar al devuelto por imap_header() excepto por las banderas y otras propiedades que vienen del servidor imap
function object imap rfc822 parse headers string $headers string $defaulthost	analizar cabeceras de correo desde una cadena
function imap rfc822 write address $personal	el nombre del propietario de la cuenta
function imap rfc822 write address $mailbox	el nombre del buzón véase imap_open() para más información
function imap rfc822 write address $host	la parte del host del correo
function string imap rfc822 write address	devuelve una cadena de dirección de correo correctamente formateada como está definido en rfc2822
function string imap rfc822 write address string $mailbox string $host string $personal	devuelve una direcci&oacute;n de correo correctamente formateada dados el buz&oacute;n host e informaci&oacute;n personal
function imap savebody $msg_number	el número de mensaje
function imap savebody $options	una máscara de bits de uno o más de lo siguiente: ft_uid - msg_number es un uid ft_peek - no establecer la bandera \seen si no lo está ya ft_internal - la cadena devuelta está en formato intermo no canonizará a crlf
function imap savebody $part_number	el número de parte
function imap savebody $imap_stream	imap stream devuelto por imap_open()
function imap savebody $file	la ruta al fichero guardado como una cadena o un descriptor de fichero válido devuelto por fopen()
function bool imap savebody	devuelve true en caso de éxito o false en caso de error
function bool imap savebody resource $imap_stream mixed $file int $msg_number string $part_number int $options	guardar una secci&oacute;n del cuerpo espec&iacute;fica en un fichero
function imap search $options	los valores válidos para options son se_uid que causa que el array devuelto contenga uids en vez de números de secuencia de mensajes
function imap search $criteria	una cadena delimitada por espacios en la que están permitidas las siguientes palabras clave
function imap search $imap_stream	imap stream devuelto por imap_open()
function imap search $charset	conjunto de caracteres mime a utilizar cuando se ordenan cadenas
function array imap search	devuelve un array de números de mensajes o uids
function array imap search resource $imap_stream string $criteria int $options string $charset	esta funci&oacute;n devuelve un array de mensajes que coinciden con el criterio de b&uacute;squeda dado
function imap set quota $quota_limit	el tamaño máximo en kb para quota_root
function imap set quota $imap_stream	imap stream devuelto por imap_open()
function imap set quota $quota_root	el buzón que tiene una cuota a establecer
function bool imap set quota	devuelve true en caso de éxito o false en caso de error
function bool imap set quota resource $imap_stream string $quota_root int $quota_limit	establece una cuota para un buz&oacute;n dado
function imap sort $imap_stream	imap stream devuelto por imap_open()
function imap sort $reverse	establezca esto a 1 para ordenación inversa
function imap sort $options	options es una máscara de bits de uno o más de lo siguiente: se_uid - devolver uids en vez de números de secuencia se_noprefetch - no preobtener mensajes buscados
function imap sort $charset	conjunto de caracteres mime a utilizar cuando se ordenan cadenas
function imap sort $search_criteria	cadena de criterios de búsqueda en formato imap2
function array imap sort	devuelve un array de números de mensajes ordenados según los parámetros dados
function array imap sort resource $imap_stream int $criteria int $reverse int $options string $search_criteria string $charset	obtiene y ordena mensajes
function imap subscribe $imap_stream	imap stream devuelto por imap_open()
function imap subscribe $mailbox	el nombre del buzón véase imap_open() para más información
function bool imap subscribe	devuelve true en caso de éxito o false en caso de error
function bool imap subscribe resource $imap_stream string $mailbox	suscribirse a un buz&oacute;n
function imap thread $imap_stream	imap stream devuelto por imap_open()
function array imap thread	imap_thread() devuelve un array asociativo que contiene un árbol de mensajes hilados mediante references o false en caso de error
function array imap thread resource $imap_stream int $options	devuelve un &aacute;rbol de mensajes hilados
function imap uid $msg_number	el número de mensaje
function imap uid $imap_stream	imap stream devuelto por imap_open()
function int imap uid	el uid del mensaje dado
function int imap uid resource $imap_stream int $msg_number	esta funci&oacute;n devuelve el uid del n&uacute;mero de secuencia del mensaje dado
function imap undelete $msg_number	el número de mensaje
function imap undelete $imap_stream	imap stream devuelto por imap_open()
function bool imap undelete	devuelve true en caso de éxito o false en caso de error
function bool imap undelete resource $imap_stream int $msg_number int $flags	desmarcar el mensaje que est&aacute; marcado para borrar
function imap unsubscribe $imap_stream	imap stream devuelto por imap_open()
function imap unsubscribe $mailbox	el nombre del buzón véase imap_open() para más información
function bool imap unsubscribe	devuelve true en caso de éxito o false en caso de error
function bool imap unsubscribe resource $imap_stream string $mailbox	cancelar la inscripci&oacute;n de un buz&oacute;n
function imap utf7 encode $data	una cadena iso-8859-1
function string imap utf7 encode	devuelve data codificado con la codificación utf-7 modificada como está definido en rfc 2060 sección 5
function string imap utf7 encode string $data	convierte una cadena iso-8859-1 a un texto utf-7 modifiicado
function imap utf8 $mime_encoded_text	una cadena codificada mime
function string imap utf8	devuelve una cadena codificada en utf-8
function string imap utf8 string $mime_encoded_text	convierte texto codificado mime en utf-8
function implode $glue	por defecto es un string vacío
function implode $pieces	el array de strings a ser usados por implode
function string implode	devuelve un string que contiene la representación de todos los elementos del array en el mismo orden con el string glue entre cada elemento
function string implode string $glue array $pieces	une elementos de un array en un string
function import request variables $types	usando el parámetro types puede especificar cuáles variables de petición deben importarse
function import request variables $prefix	el nombre de variable prefijo puede ser colocado antes de nombrar a todas las variables importadas en el ámbito global
function bool import request variables	devuelve true en caso de éxito o false en caso de error
function bool import request variables string $types string $prefix	importar variables get / post / cookie en el &aacute;mbito global
function in array $haystack	el array
function in array $strict	si el tercer parámetro strict está establecido a true la función in_array() también comprobará los tipos de needle en haystack
function in array $needle	el valor a buscar
function bool in array	devuelve true si needle se encuentra en el array false de lo contrario
function bool in array mixed $needle array $haystack bool $strict	comprueba si un valor existe en un array
function array inclued get data	la información de inclued
function array inclued get data	obtener la informaci&oacute;n de inclued
function ingres autocommit state $link	el identificador de enlace de la conexión
function bool ingres autocommit state	devuelve true si la autoconsigna está habilitada o false cuando está deshabilitada
function bool ingres autocommit state resource $link	comprueba si la conexi&oacute;n usa la autoconsigna
function ingres autocommit $link	el identificador de enlace de la conexión
function bool ingres autocommit	devuelve true en caso de éxito o false en caso de error
function bool ingres autocommit resource $link	activa o desactiva la autoconsigna
function ingres charset $link	el identificador de enlace de la conexión
function string ingres charset	devuelve un string con el valor de ii_charsetxx o null si el valor no se pudo determinar
function string ingres charset resource $link	devuelve el conjunto de caracteres de la instalaci&oacute;n
function ingres close $link	el identificador de enlace de la conexión
function bool ingres close	devuelve true en caso de éxito o false en caso de error
function bool ingres close resource $link	cierra una conexi&oacute;n a una base de datos de ingres
function ingres connect $database	el nombre de la base de datos
function ingres connect $options	opciones de ingres_connect() nombre de la opción tipo de la opción descripción ejemplo date_century_boundary integer el umbral por el cual se determina si un año de dos dígitos está en el siglo actual o en el siglo siguiente
function ingres connect $password	la contraseña asociada con username
function ingres connect $username	el nombre de usuario de ingres
function resource ingres connect	devuelve un recurso de enlace a ingres en caso de éxito o false en caso de error
function resource ingres connect string $database string $username string $password array $options	abre una conexi&oacute;n a una base de datos de ingres
function ingres cursor $result	el identificador de resultados de una consulta
function string ingres cursor	devuelve un string que contiene el nombre del cursor activo
function string ingres cursor resource $result	obtiene el nombre de un cursor de un recurso de resultados dado
function ingres errno $link	el identificador de enlace de la conexión
function int ingres errno	devuelve un valor de tipo integer que contiene el número del último error
function int ingres errno resource $link	obtiene el n&uacute;mero del &uacute;ltimo error generado de ingres
function ingres error $link	el identificador de enlace de la conexión
function string ingres error	devuelve un valor de tipo string que contiene el último error o null si ocurrió ninguno
function string ingres error resource $link	obtener un mensaje de error coherente del &uacute;ltimo error generado
function ingres execute $types	un string que contiene una secuencia con los tipos de los valores de los parámetros proporcionados
function ingres execute $result	el identificador de enlace de la conexión
function ingres execute $params	un array con los valores de los parámetros a usar con la consulta
function bool ingres execute	devuelve true en caso de éxito o false en caso de error
function bool ingres execute resource $result array $params string $types	ejecuta una consulta preparada
function ingres fetch array $result_type	el tipo de resultado
function ingres fetch array $result	el identificador de resultados de la consulta
function array ingres fetch array	devuelve un array que se corresponde con la fila obtenida o false si no existen más filas
function array ingres fetch array resource $result int $result_type	obtiene una fila de resultados en un array
function ingres fetch assoc $result	el identificador de resultados de la consulta
function array ingres fetch assoc	devuelve un array asociativo que se corresponde con la fila obtenida o false si no existen más filas
function array ingres fetch assoc resource $result	obtienen una fila de resultados en un array asociativo
function ingres fetch object $link	el identificador de resultados de la consulta
function ingres fetch object $result_type	argumento opcional result_type es una constante que puede tomar los siguientes valores: ingres_assoc ingres_num y ingres_both
function object ingres fetch object	devuelve un objeto que se corresponde con la fila obtenida o false si no existen más filas
function object ingres fetch object resource $result int $result_type	obtiene una fila de resultados en un objeto
function ingres fetch proc return $result	el identificador de resultados de la consulta
function int ingres fetch proc return	devuelve valor de tipo integer si existe un valor de retorno si no devolverá null
function int ingres fetch proc return resource $result	obtiene el valor de retorno de una llamada a un procedimiento
function ingres fetch row $result	el identificador de resultados de la consulta
function array ingres fetch row	devuelve un array que se corresponde con la fila obtenida o false si no existieran más filas
function array ingres fetch row resource $result	obtiene una fila de resultados en un array enumerado
function ingres field length $result	el identificador de resultados de la consulta
function ingres field length $index	index es el número de columna de la que se va a obtener su longitud
function int ingres field length	devuelve la longitud de un campo
function int ingres field length resource $result int $index	obtiene la longitud de un campo
function ingres field name $index	index es el campo del que se va a obtener su nombre
function ingres field name $result	el identificador de resultados de la consulta
function string ingres field name	devuelve el nombre de un campo de un resultado de una consulta o false en caso de error
function string ingres field name resource $result int $index	obtiene el nombre de un campo de un resultado de una consulta
function ingres field nullable $index	index es el campo del cual se quiere saber si puede contener valores null
function ingres field nullable $result	el identificador de resultados de la consulta
function bool ingres field nullable	ingres_field_nullable() devuelve true si el campo se puede establecer al valor null y false si no
function bool ingres field nullable resource $result int $index	comprueba si un campo puede contener valores null
function ingres field precision $index	index es el campo del que se va a obtener la precisión
function ingres field precision $result	el identificador de resultados de la consulta
function int ingres field precision	devuelve la precisión del campo como un valor de tipo integer
function int ingres field precision resource $result int $index	obtiene la precisi&oacute;n de un campo
function ingres num fields $result	el identificador de resultados de la consulta
function int ingres num fields	devuelve el número de campos
function int ingres num fields resource $result	obtiene el n&uacute;mero de campos devueltos por la &uacute;ltima consulta
function ingres num rows $result	el identificador de resultados de la consulta
function int ingres num rows	para consultas de eliminación insertado o actualización ingres_num_rows() devuelve el número de filas afectadas por la consulta
function int ingres num rows resource $result	obtener el n&uacute;mero de filas afectadas o devueltas por una consulta
function ingres pconnect $database	el nombre de la base de datos
function ingres pconnect $options	véase ingres_connect() para una lista de las opciones que se pueden pasar
function ingres pconnect $password	la contraseña asociada con username
function ingres pconnect $username	el nombre de usuario de ingres
function resource ingres pconnect	devuelve un recurso de enlace a ingres en caso de éxito o false en caso de error
function resource ingres pconnect string $database string $username string $password array $options	abre una conexi&oacute;n persistente a una base de datos de ingres
function ingres query $params	un array de valores de parámetros para usarlos con la consulta
function ingres query $types	un string que contiene una secuencia de los tipos de los valores de los parámetros pasados
function ingres query $link	el identificador de enlace de la conexión
function ingres query $query	una consulta sql válida véase la guía de referencia de sql de la documentación de ingres
function mixed ingres query	ingres_query() devuelve un identificador de resultados de consulta en caso de éxito o false en caso de error
function mixed ingres query resource $link string $query array $params string $types	env&iacute;a una consulta sql a ingres
function ingres result seek $position	la fila donde posicionar el cursor
function ingres result seek $result	el identificador de resultados de la consulta
function bool ingres result seek	devuelve true en caso de éxito o false en caso de error
function bool ingres result seek resource $result int $position	establece la posici&oacute;n de una fila antes de obtener datos
function ini get all $details	recupera los detalles de configuración o sólo el valor actual de cada configuración
function ini get all $extension	un nombre de extensión opcional
function array ini get all	devuelve un array asociativo con el nombre de la directiva como la clave del array
function array ini get all string $extension bool $details	obtiene todas las opciones de configuraci&oacute;n
function ini get $varname	nombre de la directiva de configuración
function string ini get	devuelve el valor de la opción de configuración como cadena en caso de éxito o una cadena vacía para valores null
function string ini get string $varname	devuelve el valor de una directiva de configuraci&oacute;n
function ini restore $varname	el nombre de la opción de configuración
function void ini restore string $varname	restablece el valor de una opci&oacute;n de configuraci&oacute;n
function inotify add watch $mask	eventos para observar
function inotify add watch $pathname	fichero o directorio a observar
function inotify add watch $inotify_instance	recurso devuelto por inotify_init()
function int inotify add watch	the return value is a unique inotify instance wide watch descriptor
function int inotify add watch resource $inotify_instance string $pathname int $mask	a&ntilde;ade un seguimiento a una instancia inotify inicializada
function inotify queue len $inotify_instance	recurso devuelto por inotify_init()
function int inotify queue len	devuelve un número superior a cero si hay eventos pendientes
function int inotify queue len resource $inotify_instance	devuelve un n&uacute;mero superior a cero si hay eventos pendientes
function inotify read $inotify_instance	recurso devuelto por inotify_init()
function array inotify read	un array de eventos inotify o false si no hay eventos pendientes e inotify_instance no es de bloqueo
function array inotify read resource $inotify_instance	lee eventos de una instancia inotify
function intl error name $error_code	código de error icu
function string intl error name	el string devuelto será el mismo que el nombre de la constante del código de error
function string intl error name int $error_code	obtiene un nombre simb&oacute;lico a partir de un c&oacute;digo de error dado
function intval $var	el valor escalar a convertir a un entero
function int intval	el valor entero de var en caso de éxito o 0 en caso de error
function int intval mixed $var int $base	obtiene el valor entero de una variable
function ip2long $ip_address	una dirección en formato estándar
function int ip2long	devuelve la dirección ipv4 o false si direccion_ip es un valor inválido
function int ip2long string $ip_address	convierte una cadena que contiene una direcci&oacute;n con puntos del protocolo de internet ipv4 en una direcci&oacute;n apropiada
function iptcembed $iptcdata	la información que va a ser escrita
function iptcembed $jpeg_file_name	ruta a la imagen jpeg
function iptcembed $spool	bandera de spool
function mixed iptcembed	si spool es menor que 2 se devolverá el jpeg o false en caso de error
function mixed iptcembed string $iptcdata string $jpeg_file_name int $spool	incluir informaci&oacute;n iptc binaria en una imagen jpeg
function iptcparse $iptcblock	un bloque iptc binario
function array iptcparse	devuelve una matriz usando el marcador de etiquetas como un índice y el valor como el valor
function array iptcparse string $iptcblock	conviertir un bloque iptc binario en simples etiquetas
function is a $object	el objeto evaluado
function is a $class_name	el nombre de la clase
function is a $allow_string	si este parámetro se establece a false no se permite una cadena de nombre de la clase como object
function bool is a	devuelve true si el objeto es de esta clase o tiene esta clase como una de sus madres false si no
function bool is a object $object string $class_name bool $allow_string	comprueba si un objeto es de una clase o tiene esta clase como una de sus madres
function is array $var	la variable a ser evaluada
function bool is array	devuelve true si var es un array o de lo contrario false
function bool is array mixed $var	comprueba si una variable es un array
function is executable $filename	ruta del archivo
function bool is executable	devuelve true si el nombre de archivo existe y es ejecutable o false si se produjo un error
function bool is executable string $filename	indica si el nombre de archivo es ejecutable
function is finite $val	el valor a chequear
function bool is finite	true si val es un número finito legal en el rango permitido para un valor flotante php en esta plataforma false de lo contrario
function bool is finite float $val	encuentra si un valor es un n&uacute;mero finito legal
function is float $var	la variable a ser evaluada
function bool is float	devuelve true si var es de tipo float o false de lo contrario
function bool is float mixed $var	comprueba si el tipo de una variable es float
function is infinite $val	el valor a chequear
function bool is infinite	true si val es infinito false de lo contrario
function bool is infinite float $val	encuentra si un valor es infinito
function is int $var	la variable a ser evaluada
function bool is int	devuelve true si var es de tipo integer o false de lo contrario
function bool is int mixed $var	comprueba si el tipo de una variable es integer
function is link $filename	ruta del archivo
function bool is link	devuelve true si el nombre de archivo existe y es un enlace simbólico false si no
function bool is link string $filename	indica si el nombre de archivo es un enlace simb&oacute;lico
function is nan $val	el valor a revisar
function bool is nan	devuelve true si val no es un número en caso contrario devuelve false
function bool is nan float $val	encuentra si un valor no es un n&uacute;mero
function is null $var	la variable a ser evaluada
function bool is null	devuelve true si var es null false de lo contrario
function bool is null mixed $var	comprueba si una variable es null
function is numeric $var	la variable a evaluar
function bool is numeric	devuelve true si var es un número o una cadena numérica false de lo contrario
function bool is numeric mixed $var	comprueba si una variable es un n&uacute;mero o un string num&eacute;rico
function is object $var	la variable a ser evaluada
function bool is object	devuelve true si var es un object o false de lo contrario
function bool is object mixed $var	comprueba si una variable es un objeto
function is readable $filename	la ruta del fichero
function bool is readable	devuelve true si el fichero o directorio especificado por filename existe y es legible false si no
function bool is readable string $filename	indica si un fichero existe y es legible
function is resource $var	la variable que se evalúa
function bool is resource	devuelve true si var es un resource false de lo contrario
function bool is resource mixed $var	comprueba si una variable es un recurso
function is scalar $var	la variable a ser evaluada
function bool is scalar	devuelve true si var es escalar false de lo contrario
function bool is scalar mixed $var	comprueba si una variable es escalar
function is soap fault $object	el objecto a comprobar
function bool is soap fault	devolverá true si se produce un error y false en caso contrario
function bool is soap fault mixed $object	comprueba si una llamada soap ha fallado
function is string $var	la variable a ser evaluada
function bool is string	devuelve true si var es de tipo string false de lo contrario
function bool is string mixed $var	comprueba si una variable es de tipo string
function is subclass of $object	un nombre de clase o una instancia de objeto
function is subclass of $class_name	el nombre de clase
function is subclass of $allow_string	si se define este parámetro como false no se permite el uso del nombre de la clase como object
function bool is subclass of	esta función devuelve true si el objeto object pertenece a una clase que sea subclase de class_name false de lo contrario
function bool is subclass of mixed $object string $class_name bool $allow_string	comprobar si el objeto tiene esta clase como una de sus madres o si la implementa
function bool is tainted	devuelve true si el string está corrompido false en caso contrario
function bool is tainted string $string	comprobar si un string est&aacute; corrompido
function is uploaded file $filename	el nombre de archivo que se va a comprobar
function bool is uploaded file	devuelve true en caso de éxito o false en caso de error
function bool is uploaded file string $filename	indica si el archivo fue subido mediante http post
function is writable $filename	el nombre de archivo que va a ser comprobado
function bool is writable	devuelve true si el parámetro filename existe y es escribible
function bool is writable string $filename	indica si un archivo existe y es escribible
function iterator apply $iterator	la clase a ser iterada
function iterator apply $args	argumentos que van a ser pasados a la función de llamada de retorno
function iterator apply $function	la función de llamada de recorno a llamar para cada elemento
function int iterator apply	devuelve el número de iteraciones
function int iterator apply Traversable $iterator callable $function array $args	llama una funci&oacute;n para cada elemento en un iterador
function iterator count $iterator	el iterador a contar
function int iterator count	el número de elementos de iterator
function int iterator count Traversable $iterator	contar los elementos de un iterador
function iterator to array $use_keys	si se desea usar las claves del elemento iterador como un índice
function iterator to array $iterator	el iterador a ser copiado
function array iterator to array	un array que contiene los elementos del iterator
function array iterator to array Traversable $iterator bool $use_keys	copia el iterador en un array
function jddayofweek $mode	modos de semana de calendario modo significado 0 por defecto devuelve el número de día como un entero 0=domingo 1=lunes etc
function jddayofweek $julianday	un número de día juliano como un entero
function mixed jddayofweek	el día de la semada gregoriana como un entero o cadena
function mixed jddayofweek int $julianday int $mode	devuelve el d&iacute;a de la semana
function jdmonthname $calendar	el calendario del que se va a tomar el nombre del mes
function jdmonthname $jday	la fecha juliana que se va a manejar
function string jdmonthname	el nombre del mes de la fecha juliana y del calendario calendar dados
function string jdmonthname int $julianday int $mode	devuelve el nombre de un mes
function jdtogregorian $julianday	un número de día juliano como un entero
function string jdtogregorian	la fecha gregoriana como una cadena de la forma mes / día / año
function string jdtogregorian int $julianday	convierte una fecha juliana en una fecha gregoriana
function jdtojewish $julianday	un número de día juliano como un entero
function jdtojewish $hebrew	si el parámetro hebrew está establecido a true el parámetro fl se usa para el formato de salida basado en cadena hebreo
function jdtojewish $fl	los formatos disponibles son: cal_jewish_add_alafim_geresh cal_jewish_add_alafim cal_jewish_add_gereshayim
function string jdtojewish	la fecha judía como una cadena de la forma mes / día / año
function string jdtojewish int $juliandaycount bool $hebrew int $fl	convierte una fecha juliana a una fecha del calendario jud&iacute;o
function jdtojulian $julianday	un número de día juliano como un entero
function string jdtojulian	la fecha del calendario juliano como una cadena de la forma mes / día / año
function string jdtojulian int $julianday	convierte una fecha juliana a una fecha del calendario juliano
function jdtounix $jday	un número de día juliano entre 2440588 y 2465342
function int jdtounix	la fecha unix para el comienzo de la fecha juliana dada
function int jdtounix int $jday	convierte una fecha juliana a una fecha unix
function jewishtojd $day	el día como un número de 1 a 30
function jewishtojd $month	el mes como un número de 1 a 13
function jewishtojd $year	el año como un número entre 1 y 9999
function int jewishtojd	la fecha juliana para la fecha judía dada como un entero
function int jewishtojd int $month int $day int $year	convierte una fecha del calendario jud&iacute;o a una fecha juliana
function jpeg2wbmp $jpegname	ruta del archivo jpeg
function jpeg2wbmp $dest_width	ancho de la imagen de destino
function jpeg2wbmp $dest_height	alto de la imagen de destino
function jpeg2wbmp $threshold	valor de umbral entre 0 y 8 inclusive
function jpeg2wbmp $wbmpname	ruta del archivo wbmp de destino
function bool jpeg2wbmp	devuelve true en caso de éxito o false en caso de error
function bool jpeg2wbmp string $jpegname string $wbmpname int $dest_height int $dest_width int $threshold	convertir un archiov de imagen jpeg a un archivo de imagen wbmp
function json encode $value	el value a ser codificado
function json encode $depth	establece la profundidad máxima
function json encode $options	máscara de bits que compuesta por json_hex_quot json_hex_tag json_hex_amp json_hex_apos json_numeric_check json_pretty_print json_unescaped_slashes json_force_object json_preserve_zero_fraction json_unescaped_unicode json_partial_output_on_error
function string json encode	devuelve un string json codificado en caso de éxito o false en caso de error
function string json encode mixed $value int $options int $depth	retorna la representaci&oacute;n json del valor dado
function judy type $array	el array de judy a probar
function int judy type	devuelve un tipo de dato entero correspondiente a un tipo de dato de judy
function int judy type Judy $array	devuelve el tipo de un array de judy
function juliantojd $day	el día como un número de 1 a 31
function juliantojd $month	el mes como un número de 1 para enero a 12 para diecienbre
function juliantojd $year	el año como un número entre -4713 y 9999
function int juliantojd	la fecha juliana para la fecha del calendario juliano dado como un entero
function int juliantojd int $month int $day int $year	convierte una fecha del calendario juliano a una fecha juliana
function key $array	el array
function mixed key	la función key() simplemente devuelve la clave del elemento del array que está apuntando actualmente el puntero interno
function mixed key array $array	obtiene una clave de un array
function krsort $sort_flags	se puede modificar el comportamiento del ordenado usando el parámetro opcional sort_flags par más información vea sort()
function krsort $array	el array de entrada
function bool krsort	devuelve true en caso de éxito o false en caso de error
function bool krsort array $array int $sort_flags	ordena un array por clave en orden inverso
function ksort $sort_flags	se puede modificar el comportamiento del ordenado usando el parámetro opcional sort_flags par más información vea sort()
function ksort $array	el array de entrada
function bool ksort	devuelve true en caso de éxito o false en caso de error
function bool ksort array $array int $sort_flags	ordena un array por clave
function lcfirst $str	el string de entrada
function string lcfirst	devuelve el string resultante
function string lcfirst string $str	pasa a min&uacute;scula el primer caracter de un string
function float lcg value	un valor flotante pseudo-aleatorio en el rango de 0 1
function float lcg value	generador lineal congruente combinado
function lchgrp $filename	ruta del enlace simbólico
function lchgrp $group	el grupo especificado por un nombre o un número
function bool lchgrp	devuelve true en caso de éxito o false en caso de error
function bool lchgrp string $filename mixed $group	cambia el grupo de un enlace simb&oacute;lico
function lchown $filename	ruta al archivo
function lchown $user	nómbre o número de usuario
function bool lchown	devuelve true en caso de éxito o false en caso de error
function bool lchown string $filename mixed $user	cambia el propietario de un enlace simb&oacute;lico
function ldap 8859 to t61 $value	el texto a ser traducido
function string ldap 8859 to t61	devuelve la traducción t61 de el value
function string ldap 8859 to t61 string $value	traducir caracteres 8859 a caracteres t61
function ldap add $dn	el nombre distinguido de una entidad de ldap
function ldap add $entry	un array que especifica la información acerca de la entrada
function ldap add $link_identifier	un identificador de enlace de ldap devuelto por ldap_connect()
function bool ldap add	devuelve true en caso de éxito o false en caso de error
function bool ldap add resource $link_identifier string $dn array $entry	agregar entradas al directorio de ldap
function ldap bind $link_identifier	el identificador de enlace ldap devuelto por la función ldap_connect()
function bool ldap bind	devuelve true en caso de éxito o false en caso de error
function bool ldap bind resource $link_identifier string $bind_rdn string $bind_password	realiza la autenticaci&oacute;n con un servidor ldap
function ldap connect $hostname	si se está usando openldap 2
function ldap connect $port	el puerto al cual debe conectarse
function resource ldap connect	devuelve un identificador de enlace al ldap en caso de éxito o false en caso de error
function resource ldap connect string $hostname int $port	abre una conexi&oacute;n a un servidor ldap
function ldap control paged result response $link	un identificador de enlace ldap devuelto por ldap_connect()
function ldap control paged result response $estimated	el número estimado de entradas a recuperar
function ldap control paged result response $cookie	una estructura opaca enviada por el servidor
function bool ldap control paged result response	devuelve true en caso de éxito o false en caso de error
function bool ldap control paged result response resource $link resource $result string $cookie int $estimated	recuperar la cookie de paginaci&oacute;n ldap
function ldap control paged result $iscritical	indica si la paginación es crítica o no
function ldap control paged result $link	un identificador de enlace ldap devuelto por ldap_connect()
function ldap control paged result $cookie	una estructura opaca enviada por el servidor ldap_control_paged_result_response()
function ldap control paged result $pagesize	el número de entradas por página
function bool ldap control paged result	devuelve true en caso de éxito o false en caso de error
function bool ldap control paged result resource $link int $pagesize bool $iscritical string $cookie	enviar el control de paginaci&oacute;n ldap
function ldap count entries $result_identifier	el resultado interno de ldap
function ldap count entries $link_identifier	un identificador de enlace de ldap devuelto por ldap_connect()
function int ldap count entries	devuelve el número de entradas en el resultado o false en caso de error
function int ldap count entries resource $link_identifier resource $result_identifier	contar el n&uacute;mero de entradas en una b&uacute;squeda
function ldap dn2ufn $dn	el nombre distinguido de una entidad de ldap
function string ldap dn2ufn	devuelve el nombre amigable al usuario
function string ldap dn2ufn string $dn	convertir un dn a un formato de nombramiento amigable al usuario
function ldap escape $value	el valor a escapar
function ldap escape $flags	el contexto la cadena escapado se utilizará en: ldap_escape_filter para filtros para ser utilizado con ldap_search() o ldap_escape_dn para dns
function ldap escape $ignore	caracteres a ignorar en el escapado
function string ldap escape	retorna la cadena escapada
function string ldap escape string $value string $ignore int $flags	escapa una cadena de texto para su uso en un filtro ldap o dn
function ldap first attribute $link_identifier	un enlace identificador de ldap devuelto por ldap_connect()
function ldap first attribute $ber_identifier	ber_identifier es el identificador hacia la ubicación del puntero de memoria interna
function string ldap first attribute	devuelve el primer atributo de la entrada en caso de éxito y false en caso de error
function string ldap first attribute resource $link_identifier resource $result_entry_identifier	devolver el primer atributo
function ldap first entry $link_identifier	un enlace identificador de ldap devuelto por ldap_connect()
function resource ldap first entry	devuelve el identificador de la entrada de resultados para la primera entrada en caso de éxito y false en caso de error
function resource ldap first entry resource $link_identifier resource $result_identifier	devolver el primer resultado de identificaci&oacute;n
function bool ldap free result	devuelve true en caso de éxito o false en caso de error
function bool ldap free result resource $result_identifier	liberar la memoria de resultado
function ldap get attributes $link_identifier	un enlace identificador de ldap devuelto por ldap_connect()
function array ldap get attributes	devuelve una entrada completa de información en un arreglo multi-dimensional en caso de éxito y false en caso de error
function array ldap get attributes resource $link_identifier resource $result_entry_identifier	obtener atributos de una entrada de b&uacute;squeda de resultados
function ldap get entries $link_identifier	un enlace identificador de ldap devuelto por ldap_connect()
function array ldap get entries	devuelve un resultado completo de información en un array multi-dimensional en caso de éxito y false en caso de error
function array ldap get entries resource $link_identifier resource $result_identifier	obtener todas las entradas de los resultados
function ldap get option $link_identifier	un enlace identificador de ldap devuelto por ldap_connect()
function ldap get option $option	el parámetro option puede ser uno de estos: option type ldap_opt_deref integer ldap_opt_sizelimit integer ldap_opt_timelimit integer ldap_opt_network_timeout integer ldap_opt_protocol_version integer ldap_opt_error_number integer ldap_opt_referrals bool ldap_opt_restart bool ldap_opt_host_name string ldap_opt_error_string string ldap_opt_matched_dn string ldap_opt_server_controls array ldap_opt_client_controls array
function ldap get option $retval	este será establecido al valor de la opción
function bool ldap get option	devuelve true en caso de éxito o false en caso de error
function bool ldap get option resource $link_identifier int $option mixed $retval	obtener el valor actual para la opci&oacute;n dada
function ldap get values len $link_identifier	un identificador de enlace de ldap devuelto por ldap_connect()
function array ldap get values len	devuelve un arreglo de valores para el atributo en caso de éxito y false en caso de error
function array ldap get values len resource $link_identifier resource $result_entry_identifier string $attribute	obtener todos los valores binarios desde una entrada de resultados
function ldap get values $link_identifier	un identificador de enlace de ldap devuelto por ldap_connect()
function array ldap get values	devuelve un arreglo de valores para el atributo en caso de éxito y false en caso de error
function array ldap get values resource $link_identifier resource $result_entry_identifier string $attribute	obtener todos los valores de una entrada de resultados
function ldap mod add $link_identifier	un identificador de enlace de ldap devuelta por ldap_connect()
function ldap mod add $dn	el nombre distinguido de una entidad de ldap
function bool ldap mod add	devuelve true en caso de éxito o false en caso de error
function bool ldap mod add resource $link_identifier string $dn array $entry	agregar valores de atributo a los atributos actuales
function ldap mod del $dn	el nombre distinguido de una entidad de ldap
function ldap mod del $link_identifier	un identificador de enlace de ldap devuelto por ldap_connect()
function bool ldap mod del	devuelve true en caso de éxito o false en caso de error
function bool ldap mod del resource $link_identifier string $dn array $entry	borrar valores de atributo de los atributos actuales
function ldap mod replace $dn	el nombre distinguido de una entidad de ldap
function ldap mod replace $link_identifier	un identificador de enlace de ldap devuelto por ldap_connect()
function bool ldap mod replace	devuelve true en caso de éxito o false en caso de error
function bool ldap mod replace resource $link_identifier string $dn array $entry	reemplazar valores de atributos con valores nuevos
function ldap next entry $link_identifier	un identificador de enlace de ldap devuelto por ldap_connect()
function resource ldap next entry	devuelve un identificador de entrada para la entrada siguiente en el resultado cuyas entradas son leídas desde el comienzo con ldap_first_entry()
function resource ldap next entry resource $link_identifier resource $result_entry_identifier	obtener el siguiente resultado de entrada
function ldap rename $newparent	la nueva entrada padre / superior
function ldap rename $dn	el nombre distinguido de una entidad de ldap
function ldap rename $deleteoldrdn	si es true se remueve el valor o valores antigüos del rdn sino dichos valores del rdn se retienen como valores no distinguidos de la entrada
function ldap rename $link_identifier	un identificador de enlace de ldap devuelto por ldap_connect()
function ldap rename $newrdn	el rdn nuevo
function bool ldap rename	devuelve true en caso de éxito o false en caso de error
function bool ldap rename resource $link_identifier string $dn string $newrdn string $newparent bool $deleteoldrdn	modificar el nombre de una entrada
function ldap sort $link	un identificador de enlace de ldap devuelto por ldap_connect()
function ldap sort $result	un identificador de resultado de búsqueda devuelto por ldap_search()
function ldap sort $sortfilter	el atributo a utilizar como clave en la clasificación
function bool ldap sort resource $link resource $result string $sortfilter	clasificar entradas de resultados de ldap
function ldap unbind $link_identifier	un identificador de enlace ldap devuelto por ldap_connect()
function bool ldap unbind	devuelve true en caso de éxito o false en caso de error
function bool ldap unbind resource $link_identifier	desenlazar de directorio ldap
function levenshtein $cost_rep	define el costo de reemplazo
function levenshtein $cost_ins	define el costo de inserción
function levenshtein $str1	uno de los strings a ser evaluados para la distancia levenshtein
function levenshtein $str2	uno de los strings a ser evaluados para la distancia levenshtein
function levenshtein $cost_del	define el costo de eliminación
function int levenshtein	esta función devuelve la distancia levenshtein entre los dos strings argumentos ó -1 si uno de los strings argumentos es mayor que el límite de 255 caracteres
function int levenshtein string $str1 string $str2	c&aacute;lculo de la distancia levenshtein entre dos strings
function libxml disable entity loader $disable	deshabilita true o habilita false extensiones libxml tal como dom xmlwriter y xmlreader para cargar entidades externas
function bool libxml disable entity loader	devuelve el valor anterior
function bool libxml disable entity loader bool $disable	deshabilita la capacidad de cargar entidades externas
function array libxml get errors	recupera un array con objetos de tipo libxmlerror si hay errores en el buffer o un array vacío en caso contrario
function array libxml get errors	recupera un array de errores
function LibXMLError libxml get last error	devuelve un objeto de tipo libxmlerror si hay algún error en el buffer o false en caso contrario
function LibXMLError libxml get last error	recupera el &uacute;ltimo error de libxml
function libxml set external entity loader $resolver_function	un callable que acepte tres argumentos
function void libxml set external entity loader callable $resolver_function	cambia el cargador externo por defecto de entidades
function libxml set streams context $streams_context	el contexto de flujo de tipo resource creado con la función stream_context_create()
function void libxml set streams context resource $streams_context	configura el contexto de flujo para el pr&oacute;ximo documento libxml cargado o escrito
function libxml use internal errors $use_errors	habilita true o deshabilita false el manejo de errores por parte del usuario
function bool libxml use internal errors	esta función devuelve el valor anterior de use_errors
function bool libxml use internal errors bool $use_errors	deshabilita errores libxml y permite al usuario extraer informaci&oacute;n de errores seg&uacute;n sea necesario
function link $target	el objetivo del enlace
function link $link	el nombre del enlace
function bool link	devuelve true en caso de éxito o false en caso de error
function bool link string $target string $link	crea un enlace duro
function list $var1	una variable
function array list	devuelve el array asignado
function array list mixed $var1	asignar variables como si fueran un array
function log cmd delete $protocolOptions	clave valor message_length el tamaño total en bytes del mensaje codificado a enviar por el cable request_id el identificador de petición para este mensaje: 42 namespace el espacio de nombres de mongodb usado para el protocolo del mensaje dbname
function log cmd delete $deleteOptions	clave valor limit integer 1 o 0
function log cmd delete $server	un array que contiene la información básica sobre el servidor elegido
function array log cmd delete array $server array $writeOptions array $deleteOptions array $protocolOptions	funci&oacute;n de retrollamada al borrar documentos
function log cmd update $updateOptions	clave valor multi booleano true si a esta actualización se le permite actualizar todos los criterios coincidentes upsert booleano true si el documento debería ser creado si los criterios no coinciden q array los criterios de búsqueda u array el nuevo / s objeto / modificaciones
function log cmd update $protocolOptions	clave valor message_length el tamaño total en bytes del mensaje codificado a enviar por el cable request_id el identificador de petición para este mensaje: 42 namespace el espacio de nombres de mongodb usado para el protocolo del mensaje dbname
function log cmd update $server	un array que contiene la información básica sobre el servidor elegido
function array log cmd update array $server array $writeOptions array $updateOptions array $protocolOptions	funci&oacute;n de retrollamada al actualizar documentos
function log getmore $info	clave valor request_id integer el identificador de petición del controlador cursor_id integer el identificador del cursor a usar para obtener más datos batch_size integer número máximo de documentos a solicitar
function log getmore $server	un array que contiene la información básica sobre el servidor elegido
function array log getmore array $server array $info	funci&oacute;n de retrollamada al obtener el pr&oacute;ximo lote del cursor
function log write batch $protocolOptions	clave valor message_length el tamaño total en bytes del mensaje codificado a enviar por el cable request_id el identificador de petición para este mensaje: 42 namespace el espacio de nombres de mongodb usado para el protocolo del mensaje dbname
function log write batch $batch	array la operación por lotes real
function log write batch $server	un array que contiene la información básica sobre el servidor elegido
function array log write batch array $server array $writeOptions array $batch array $protocolOptions	funci&oacute;n de retrollamada al escribir lotes
function log $arg	el valor al que se desea calcular el logaritmo
function log $base	la base opcinal del logaritmo a usar por omisión es e y por lo tanto el logaritmo natural
function float log	el logaritmo de arg en la base dada por base si se indica o en su lugar el logaritmo natural
function float log float $arg float $base	logaritmo natural
function log10 $arg	el argumento a procesar
function float log10	el logaritmo en base 10 de arg
function float log10 float $arg	logaritmo en base 10
function log1p $number	el argumento a procesar
function float log1p	log 1 + number
function float log1p float $number	devuelve log 1 + numero calculado de tal forma que no pierde precisi&oacute;n incluso cuando el valor del numero se aproxima a cero
function long2ip $proper_address	correcta representación de la dirección
function string long2ip	devuelve una dirección ip de internet como cadena de texto
function string long2ip string $proper_address	convierte una direcci&oacute;n de red ipv4 en una cadena de texto en formato con puntos est&aacute;ndar de internet
function lstat $filename	ruta de un archivo o enlace simbólico
function array lstat	vea la página del manual de stat() para información sobre la estructura de la matriz que devuelve lstat()
function array lstat string $filename	da informaci&oacute;n acerca de un archivo o enlace simb&oacute;lico
function ltrim $str	el string de entrada
function ltrim $character_mask	se puede también especificar los caracteres que se desean retirar por medio del parámetro character_mask
function string ltrim	esta función devuelve un string con los espacios en blanco retirados del inicio de str
function string ltrim string $str string $character_mask	retira espacios en blanco u otros caracteres del inicio de un string
function lzf compress $data	el string a comprimir
function string lzf compress	devuelve los datos comprimidos o false si ocurrió un error
function string lzf compress string $data	compresi&oacute;n lzf
function lzf decompress $data	la cadena comprimida
function string lzf decompress	devuelve los datos descomprimidos o false si ocurrió un error
function string lzf decompress string $data	descompresi&oacute;n lzf
function mail $subject	título del correo electrónico a enviar
function mail $message	mensaje a enviar
function mail $additional_headers(opcional)	string a insertar al final de la cabecera del correo
function mail $to	destinatario / s del correo
function mail $additional_parameters(opcional)	el parámetro additional_parameters puede usarse para indicar opciones adicionales como opciones de línea de comandos al programa que está configurado para usarse cuando se envía correo definido por la opción de configuración sendmail_path
function bool mail	devuelve true si el correo ha sido aceptado para su envío de lo contrario false
function bool mail string $to string $subject string $message string $additional_headers string $additional_parameters	enviar correo
function mailparse determine best xfer encoding $fp	un apuntador de archivo válido que reciba operaciones de búsqueda
function string mailparse determine best xfer encoding	devuelve una de las codificaciones de caracteres soportadas por el módulo mbstring
function string mailparse determine best xfer encoding resource $fp	obtiene la mejor forma de codificar
function resource mailparse msg create	devuelve un recurso que puede ser usado para interpretar un mensaje
function resource mailparse msg create	crea un recurso de correo mime
function mailparse msg extract part file $callbackfunc	si se define este parámetro debe ser una llamada de retorno válida a la cual le será pasada la sección extraída o null para asegurarse de que esta función devuelva la sección extraída
function mailparse msg extract part file $mimemail	un recurso mime válido creado con mailparse_msg_create()
function mailparse msg extract part file $filename	puede ser un nombre de archivo o un recurso de secuencia válido
function string mailparse msg extract part file	si callbackfunc es diferente de null devuelve true en caso de éxito
function string mailparse msg extract part file resource $mimemail mixed $filename callable $callbackfunc	extrae / decodifica una secci&oacute;n de mensaje
function mailparse msg free $mimemail	un recurso mime válido reservado por mailparse_msg_create() o mailparse_msg_parse_file()
function bool mailparse msg free	devuelve true en caso de éxito o false en caso de error
function bool mailparse msg free resource $mimemail	libera un recurso mime
function mailparse msg parse $mimemail	un recurso mime válido
function bool mailparse msg parse	devuelve true en caso de éxito o false en caso de error
function bool mailparse msg parse resource $mimemail string $data	procesar datos incrementalmente sobre un b&uacute;fer
function mailparse stream encode $sourcefp	un gestor de archivo válido
function mailparse stream encode $destfp	el gestor de archivo de destino en el cual los datos codificados serán escritos
function mailparse stream encode $encoding	una de las codificaciones de caracteres soportadas por el módulo mbstring
function bool mailparse stream encode	devuelve true en caso de éxito o false en caso de error
function bool mailparse stream encode resource $sourcefp resource $destfp string $encoding	secuencia datos desde un apuntador de archivo codifica y escribe a fp_destino
function mailparse uudecode all $fp	un apuntador de archivo válido
function array mailparse uudecode all	devuelve una matriz de matrices asociativas listando la información de cada archivo
function array mailparse uudecode all resource $fp	procesa los datos desde un apuntador a archivo y extrae cada archivo embebido con codificaci&oacute;n uu
function max	cualquier valor comparable
function max $values	un array que contiene los valores
function max $value2	cualquier valor comparable
function max $value1	cualquier valor comparable
function mixed max	max() devuelve el valor del parámetro condierado el mayor según la comparación estándar
function mixed max array $values	encontrar el valor m&aacute;s alto
function bool maxdb thread safe	true si la libreria cliente es thread-safe de lo contrario false
function bool maxdb thread safe	devuelve si la seguridad de enlace se le da o no
function mb check encoding $encoding	la codificación a comprobar
function mb check encoding $var	el flujo de bytes a comprobar
function bool mb check encoding	devuelve true en caso de éxito o false en caso de error
function bool mb check encoding string $var string $encoding	comprueba si el string es v&aacute;lido para a la codificaci&oacute;n especificada
function mb convert encoding $to_encoding	el tipo de codificación a la que convertir str
function mb convert encoding $str	el string a codificar
function mb convert encoding $from_encoding	se especifica por los nombres de los códigos de caracteres previos a la conversión
function string mb convert encoding	el string codificado
function string mb convert encoding string $str string $to_encoding mixed $from_encoding	convierte una codificaci&oacute;n de caracteres
function mb convert kana $str	el string a convertir
function mb convert kana $encoding	el parámetro encoding es la codificación de caracteres
function mb convert kana $option	la opción de conversión
function string mb convert kana	el string convertido
function string mb convert kana string $str string $option string $encoding	convierte un kana a otro zen-kaku han-kaku y m&aacute;s
function mb convert variables $to_encoding	la codificación a la que se va a convertir string
function mb convert variables	vars adicionales
function mb convert variables $vars	vars es la referencia a la variable que va a ser convertida
function mb convert variables $from_encoding	from_encoding se especifica mediante un array o string separado por comas e intenta detectar la codificación desde from-coding
function string mb convert variables	la codificación de caracteres antes de la conversión en caso de éxito o false en caso de error
function string mb convert variables string $to_encoding mixed $from_encoding mixed $vars	convierte c&oacute;digos de caracteres a variable / s
function mb decode mimeheader $str	el string a decodificar
function string mb decode mimeheader	el string decodificado en la codificación de caracteres interna
function string mb decode mimeheader string $str	decodifica un string en el campo de cabecera mime
function mb detect encoding $encoding_list	encoding_list es una lista de codificaciones de caracteres
function mb detect encoding $strict	strict especifica si usar la detección de codificación estricta o no
function mb detect encoding $str	el string en el que detectar la codificación
function string mb detect encoding	la codificación de caracteres detectada o false si la codificación no se pudo detectar en el string dado
function string mb detect encoding string $str mixed $encoding_list bool $strict	detecta la codificaci&oacute;n de caracteres
function mb detect order $encoding_list	encoding_list es un array o una lista de codificaciones de caracteres separadas por comas
function mixed mb detect order	devuelve true en caso de éxito o false en caso de error
function mixed mb detect order mixed $encoding_list	establece / obtiene el orden de detecci&oacute;n de codificaciones de caracteres
function mb encode mimeheader $charset	charset especifica el nombre del conjunto de caracteres en el cual está representado str
function mb encode mimeheader $str	el string que va a ser codificado
function mb encode mimeheader $transfer_encoding	transfer_encoding especifica el esquema de la codifición mime
function mb encode mimeheader $indent	la indentación de la primera línea número de caracteres en la cabecera antes de str
function mb encode mimeheader $linefeed	linefeed especifica la marca eol fin de línea con la que mb_encode_mimeheader() realiza el pliegue de línea un término de rfc que es el acto de dividir una línea mayor que una cierta longitud en varias líneas
function string mb encode mimeheader	una versión convertida del string representado en ascii
function string mb encode mimeheader string $str string $charset string $transfer_encoding string $linefeed int $indent	codifica un string para la cabecera mime
function mb encoding aliases $encoding	el tipo de codificación del cual se quieren obtener los alias
function array mb encoding aliases	devuelve un array indexado numéricamente con los alias de la condificación en caso de éxito o false en caso de error
function array mb encoding aliases string $encoding	obtiene los alias de un tipo de codificaci&oacute;n conocido
function mb ereg match $string	el string a ser evaluado
function mb ereg match $pattern	el patrón de la expresión regular
function bool mb ereg match string $pattern string $string string $option	compararci&oacute;n de expresiones regulares para strings multibyte
function mb ereg replace callback $string	el string a comprobar
function mb ereg replace callback $callback	una llamada de retorno que será invocada y se le proporcionará un array de elementos coincidentes en el string subject
function mb ereg replace callback $option	las condiciones de comparación se pueden establecer por el parámetro option
function mb ereg replace callback $pattern	el patrón de la expresión regular
function string mb ereg replace callback	el string resultante en caso de éxito o false en caso de error
function string mb ereg replace callback string $pattern callable $callback string $string string $option	realiza una b&uacute;squeda y sustituci&oacute;n de una expresi&oacute;n regular con soporte multibyte usando una llamada de retorno
function mb ereg search init $pattern	el patrón de búsqueda
function mb ereg search init $option	la opción de búsqueda
function mb ereg search init $string	el estring de búsquda
function bool mb ereg search init string $string string $pattern string $option	configura el string y la expresi&oacute;n regular para una comparaci&oacute;n de expresiones regulares multibyte
function mb ereg search regs $pattern	el patrón de búsqueda
function mb ereg search regs $option	la opción de búsqueda
function array mb ereg search regs string $pattern string $option	devuelve la parte coincidente de una expresi&oacute;n regular multibyte
function mb ereg search $pattern	el patrón de búsqueda
function mb ereg search $option	la opción de búsqueda
function bool mb ereg search string $pattern string $option	comparaci&oacute;n de expresiones regulares multibyte para un string multibyte predefinido
function mb http output $encoding	si se establece encoding mb_http_output() establece la codificación de caracteres de salida http a encoding
function mixed mb http output	si encoding se omite mb_http_output() devuelve la codificación de caracteres de salida http en uso
function mixed mb http output string $encoding	establece / obtiene la codificaci&oacute;n de caracteres de salida http
function mb internal encoding $encoding	encoding es el nombre de la codificación de caracteres usada para la conversión de la codificación de caracteres de entrada http la conversión de la codificación de caracteres de salida http y la codificación de caracteres predeterminada para funciones de cadenas de caracteres definidas por el módulo mbstring
function mixed mb internal encoding	si se establece encoding entonces devuelve true en caso de éxito o false en caso de error
function mixed mb internal encoding string $encoding	establece / obtiene la codificaci&oacute;n de caracteres interna
function mb language $language	se usa para codificar mensajes de correo electrónico
function mixed mb language	si se establece language y language es válido devuelve true
function mixed mb language string $language	establece / obtiene el idioma actual
function array mb list encodings	devuelve un array indexado numéricamente
function array mb list encodings	devuelve un array con todos los tipos de codificaciones admitidas
function mb parse str $encoded_string	los datos del url codificado
function mb parse str $result	un array que contiene la decodificación y los valores convertidos de la codificación de caracteres
function bool mb parse str	devuelve true en caso de éxito o false en caso de error
function bool mb parse str string $encoded_string array $result	analiza datos get / post / cookie y establece varialbes globales
function mb regex encoding $encoding	el parámetro encoding es la codificación de caracteres
function mixed mb regex encoding string $encoding	establecer / obtener la codificaci&oacute;n de caracteres para expresiones regulares multibyte
function mb stripos $haystack	el string desde el que obtener la posición de la primera ocurrencia de needle
function mb stripos $encoding	el nombre de la codificación de caracteres a usar
function mb stripos $needle	el string a buscar en haystack
function mb stripos $offset	la posición de haystack donde empezar la búsquda
function int mb stripos	devuelve la posición numérica de la pirmera ocurrencia de needle en el string haystack o false si no se encuentra needle
function int mb stripos string $haystack string $needle int $offset string $encoding	busca la posici&oacute;n de la primera ocurrencia de un string dentro de otro insensible a may&uacute;sculas / min&uacute;sculas
function mb stristr $before_needle	determina qué porción de haystack devuelve esta función
function mb stristr $encoding	el nombre de la codificación de caracteres a usar
function mb stristr $needle	el string a buscar en haystack
function mb stristr $haystack	el string desde el que obtener la primera ocurrencia de needle
function string mb stristr	devuelve la porción de haystack o false si no se encuentra needle
function string mb stristr string $haystack string $needle bool $before_needle string $encoding	busca la primera ocurrencia de un string dentro de otro insensible a may&uacute;sculas / min&uacute;sculas
function mb strpos $offset	el índice de búsqueda
function mb strpos $needle	el string a buscar en haystack
function mb strpos $haystack	el string a comprobar
function mb strpos $encoding	el parámetro encoding es la codificación de caracteres
function int mb strpos	devuelve la posición numéricia de la primera ocurrencia de needle en el string haystack
function int mb strpos string $haystack string $needle int $offset string $encoding	busca la posici&oacute;n de la primera ocurrencia de un string en otro string
function mb strrchr $encoding	el nombre de la codificación de caracteres a usar
function mb strrchr $needle	el string a buscar en haystack
function mb strrchr $haystack	el string desde el que obtener la última ocurrencia de needle
function mb strrchr $part	determina qué porción de haystack devuelve esta función
function string mb strrchr	devuelve la porción de haystack
function string mb strrchr string $haystack string $needle bool $part string $encoding	busca la &uacute;ltima ocurrencia de un car&aacute;cter de un string dentro de otro
function mb strrichr $encoding	el nombre de la codificación de caracteres a usar
function mb strrichr $needle	el string a buscar en haystack
function mb strrichr $haystack	el string desde el que obtener la última ocurrencia de needle
function mb strrichr $part	determina qué porción de haystack devuelve esta función
function string mb strrichr	devuelve la porción de haystack
function string mb strrichr string $haystack string $needle bool $part string $encoding	busca la &uacute;ltima ocurrencia de un car&aacute;cter de un string dentro de otro insensible a may&uacute;sculas / min&uacute;sculas
function mb strtolower $str	el string a convertir
function mb strtolower $encoding	el parámetro encoding es la codificación de caracteres
function string mb strtolower	str con todos los caracteres alfabéticos convertidos a minúscula
function string mb strtolower string $str string $encoding	convierte una cadena de caracteres a min&uacute;sculas
function mb strtoupper $str	el string a convertir en mayúsculas
function mb strtoupper $encoding	el parámetro encoding es la codificación de caracteres
function string mb strtoupper	str con todos los caracteres alfabéticoas convertidos a mayúsculas
function string mb strtoupper string $str string $encoding	convierte un string en may&uacute;sculas
function mb strwidth $str	el string a decodificar
function mb strwidth $encoding	el parámetro encoding es la codificación de caracteres
function int mb strwidth	el ancho del string str
function int mb strwidth string $str string $encoding	devuelve el ancho de un string
function mb substitute character $substrchar	especifica el valor unicode como un integer o como uno de los siguientes string s: none : sin salida long : producir el valor del código del carácter ejemplo: u+3000 jis+7e7e entity : producir la entidad del carácter ejemplo: ȁ)
function mixed mb substitute character	si se establece substchar devuelve true en caso de éxito o en caso contrairo devuelve false
function mixed mb substitute character mixed $substrchar	establece / obtiene un car&aacute;cter de sustituci&oacute;n
function mb substr $start	si start no es negativo el string devuelto comenzará en la posición start -ésima de string empezando desde cero
function mb substr $str	el string de donde extraer la parte deseada
function mb substr $length	el número máximo de caracteres a usar de str
function mb substr $encoding	el parámetro encoding es la codificación de caracteres
function string mb substr	mb_substr() devuelve una parte de str especificada por los parametros start y length
function string mb substr string $str int $start int $length string $encoding	obtiene parte de una cadena de caracteres
function string mcrypt cfb int $cipher string $key string $data int $mode string $iv	encripta / decripta datos en modo cfb
function mcrypt create iv $source	la fuente del iv
function mcrypt create iv $size	el tamaño del iv
function string mcrypt create iv	devuelve el vector de inicialización o false en caso de error
function string mcrypt create iv int $size int $source	crea un vector de inicializaci&oacute;n iv desde una fuente aleatoria
function mcrypt decrypt $key	la clave con la cual los datos fueron cifrados
function mcrypt decrypt $cipher	una de las constantes mcrypt_nombredelcifrado o el nombre del algoritmo como string
function mcrypt decrypt $mode	una de las constantes mcrypt_mode_nombredelmodo o una de las siguientes strings: ecb cbc cfb ofb nofb o stream
function mcrypt decrypt $iv	utilizado para la inicialización en los modos cbc cfb ofb y en algunos algoritmos en el modo stream
function mcrypt decrypt $data	la información que será descifrada con el cifrador y modo dados por los parámetros cipher y mode
function string mcrypt decrypt	devuelve los datos descifrados en formato cadena o false en caso de error
function string mcrypt decrypt string $cipher string $key string $data string $mode string $iv	desencripta texto cifrado con los par&aacute;metros dados
function string mcrypt ecb int $cipher string $key string $data int $mode	obsoleto: encripta / decripta datos en modo ecb
function mcrypt enc get iv size $td	el descriptor de cifrado
function int mcrypt enc get iv size	devuelve el tamaño del iv o 0 si el iv es ignorado por el algoritmo
function int mcrypt enc get iv size resource $td	devuelve el tama&ntilde;o del iv del algoritmo abierto
function mcrypt enc get modes name $td	el descriptor de cifrado
function string mcrypt enc get modes name	devuelve el nombre en formato cadena
function string mcrypt enc get modes name resource $td	devuelve el nombre del modo abierto
function mcrypt enc is block algorithm $td	el descriptor de cifrado
function bool mcrypt enc is block algorithm	devuelve true si el algoritmo es un algoritmo por bloques o false si es uno de flujo
function bool mcrypt enc is block algorithm resource $td	chequea si el algoritmo del modo abierto es un algoritmo por bloques
function mcrypt enc is block mode $td	el descriptor de cifrado
function bool mcrypt enc is block mode	devuelve true si el modo retorna bloques de bytes o false si retorna solo bytes
function bool mcrypt enc is block mode resource $td	chequea si el modo abierto retorna bloques
function mcrypt encrypt $iv	utilizado para la inicialización en los modos cbc cfb ofb y en algunos algoritmos en el modo stream
function mcrypt encrypt $cipher	una de las constantes mcrypt_nombredelcifrado o el nombre del algoritmo como string
function mcrypt encrypt $mode	una de las constantes mcrypt_mode_nombredelmodo o una de las siguientes strings: ecb cbc cfb ofb nofb o stream
function mcrypt encrypt $data	los datos que serán cifrados con el cifrador y modo dados a través de cipher y mode
function mcrypt encrypt $key	la clave con la que los datos serán cifrados
function string mcrypt encrypt	devuelve los datos cifrados en formato cadena o false en caso de error
function string mcrypt encrypt string $cipher string $key string $data string $mode string $iv	cifra texto plano con los par&aacute;metros dados
function mcrypt generic deinit $td	el descriptor de cifrado
function bool mcrypt generic deinit	devuelve true en caso de éxito o false en caso de error
function bool mcrypt generic deinit resource $td	esta funci&oacute;n deinicializa un m&oacute;dulo de cifrado
function bool mcrypt generic end resource $td	esta funci&oacute;n termina el cifrado
function mcrypt generic init $key	la longitud máxima de la clave debería ser la misma obtenida al invocar a mcrypt_enc_get_key_size() y todos los valores menores son legales
function mcrypt generic init $td	el descriptor de cifrado
function mcrypt generic init $iv	el iv debería tener normalmente el tamaño del bloque del algoritmo pero debe obtener el tamaño tras invocar a mcrypt_enc_get_iv_size()
function int mcrypt generic init	esta función devuelve un valor negativo en caso de error: -3 cuando la longitud es incorrecta -4 cuando hubo un problema de asignación de memoria y todos los demás valores retornados son errores desconocidos
function int mcrypt generic init resource $td string $key string $iv	esta funci&oacute;n inicializa todos los buffers requeridos para el cifrado
function mcrypt generic $td	el descriptor de cifrado
function mcrypt generic $data	los datos a encriptar
function string mcrypt generic	devuelve la información cifrada
function string mcrypt generic resource $td string $data	esta funci&oacute;n encripta datos
function mcrypt get block size $cipher	una de las constantes mcrypt_nombredelcifrado o el nombre del algoritmo como string
function mcrypt get block size $mode	una de las constantes mcrypt_mode_nombredelmodo o una de las siguientes strings: ecb cbc cfb ofb nofb o stream
function int mcrypt get block size	toma el tamaño del bloque como un entero
function int mcrypt get block size int $cipher	toma el tama&ntilde;o del bloque del cifrador especificado
function mcrypt get cipher name $cipher	una de las constantes mcrypt_nombredelcifrado o el nombre del algoritmo como string
function string mcrypt get cipher name	esta función devuelve el nombre del cifrador o false si el cifrador no existe
function string mcrypt get cipher name int $cipher	toma el nombre del cifrador especificado
function mcrypt get iv size $cipher	una de las constantes mcrypt_nombredelcifrado o el nombre del algoritmo como string
function mcrypt get iv size $mode	una de las constantes mcrypt_mode_nombredelmodo o una de las siguientes strings: ecb cbc cfb ofb nofb o stream
function int mcrypt get iv size	devuelve el tamaño del vector de inicialización iv en bytes
function int mcrypt get iv size string $cipher string $mode	devuelve el tama&ntilde;o del iv perteneciente a una combinaci&oacute;n cifrador / modo espec&iacute;fica
function mcrypt list algorithms $lib_dir	especifica el directorio donde todos los algoritmos están ubicados
function array mcrypt list algorithms	devuelve un array con todos los algoritmos soportados
function array mcrypt list algorithms string $lib_dir	obtiene un array con todos los cifradores soportados
function mcrypt list modes $lib_dir	especifica el directorio donde todos los modos están ubicados
function array mcrypt list modes	devuelve un array con todos los modos soportados
function array mcrypt list modes string $lib_dir	obtiene un array con todos los modos soportados
function mcrypt module close $td	el descriptor de cifrado
function bool mcrypt module close	devuelve true en caso de éxito o false en caso de error
function bool mcrypt module close resource $td	cierra el m&oacute;dulo mcrypt
function mcrypt module get algo block size $lib_dir	este parámetro opcional puede contener la ubicación donde el módulo de modos se encuentra dentro del sistema
function mcrypt module get algo block size $algorithm	el nombre del algoritmo
function int mcrypt module get algo block size	devuelve el tamaño de bloque del algoritmo especificado en bytes
function int mcrypt module get algo block size string $algorithm string $lib_dir	devuelve el tama&ntilde;o de bloque del algoritmo especificado
function mcrypt module get supported key sizes $lib_dir	el parámetro opcional lib_dir puede contener la ubicación donde el módulo de algoritmos se encuentra dentro del sistema
function mcrypt module get supported key sizes $algorithm	el algoritmo a ser utilizado
function array mcrypt module get supported key sizes	devuelve un array con los tamaños de clave soportados por el algoritmo especificado si devuelve un array vacío es porque todos los tamaños de clave entre 1 y mcrypt_module_get_algo_key_size() son soportados por el algoritmo
function array mcrypt module get supported key sizes string $algorithm string $lib_dir	devuelve un array con los tama&ntilde;os de clave soportados del algoritmo abierto
function mcrypt module is block algorithm mode $mode	el modo a chequear
function mcrypt module is block algorithm mode $lib_dir	el parámetro opcional lib_dir puede contener la ubicación donde el módulo de algoritmos se encuentra dentro del sistema
function bool mcrypt module is block algorithm mode	esta función devuelve true si el modo especificado es para ser utilizado con algoritmos por bloques o de lo contrario devuelve false
function bool mcrypt module is block algorithm mode string $mode string $lib_dir	devuelve si el m&oacute;dulo especificado es un algoritmo por bloques o no
function mcrypt module is block algorithm $algorithm	el algoritmo a chequear
function mcrypt module is block algorithm $lib_dir	el parámetro opcional lib_dir puede contener la ubicación donde el módulo de algoritmos se encuentra dentro del sistema
function bool mcrypt module is block algorithm	esta función devuelve true si el algoritmo especificado es un algoritmo por bloques o false si es uno de flujo
function bool mcrypt module is block algorithm string $algorithm string $lib_dir	esta funci&oacute;n chequea si el algoritmo especificado es un algoritmo por bloques
function mcrypt module is block mode $mode	una de las constantes mcrypt_mode_nombredelmodo o una de las siguientes strings: ecb cbc cfb ofb nofb o stream
function mcrypt module is block mode $lib_dir	el parámetro opcional lib_dir puede contener la ubicación donde el módulo de algoritmos se encuentra dentro del sistema
function bool mcrypt module is block mode	esta función devuelve true si el modo especificado retorna bloques de bytes o false si retorna tan solo bytes
function bool mcrypt module is block mode string $mode string $lib_dir	devuelve si el modo especificado retorna bloques o no
function mcrypt module self test $lib_dir	el parámetro opcional lib_dir puede contener la ubicación donde el módulo de algoritmos se encuentra dentro del sistema
function mcrypt module self test $algorithm	una de las constantes mcrypt_nombredelcifrado o el nombre del algoritmo como string
function bool mcrypt module self test	esta fucnión devuelve true si la prueba automática es exitosa o false cuando falla
function bool mcrypt module self test string $algorithm string $lib_dir	esta funci&oacute;n ejecuta una prueba autom&aacute;tica sobre el m&oacute;dulo especificado
function string mcrypt ofb int $cipher string $key string $data int $mode string $iv	encripta / desencripta datos en modo ofb
function md5 file $nombre_archivo	el nombre de archivo
function md5 file $raw_output	cuando es true devuelve el resumen en un formato binario primitivo con una longitud de 16
function string md5 file	devuelve una cadena en caso de éxito false de lo contrario
function string md5 file string $filename bool $raw_output	calcula el resumen criptogr&aacute;fico md5 de un archivo dado
function mdecrypt generic $data	los datos encriptados
function mdecrypt generic $td	un descriptor de cifrado devuelto por mcrypt_module_open()
function string mdecrypt generic resource $td string $data	desencripta datos
function memcache debug $on_off	activa debug output si es igual a true
function bool memcache debug	devuelve true si php fue compilado con la opción --enable-debug de lo contrario devuelve false
function bool memcache debug bool $on_off	activa / desactiva debug output
function memory get peak usage $real_usage	si se deja en true puede obtener el tamaño real de memoria asignada por el sistema
function int memory get peak usage	devuelve el máximo de memoria en bytes
function int memory get peak usage bool $real_usage	devuelve el m&aacute;ximo de memoria asignada por php
function int mhash count	devuelve el mayor id de hash disponible
function int mhash count	toma el mayor id de hash disponible
function mhash keygen s2k $salt	debe ser diferente y lo suficientemente aleatorio para cada clave generada con el fin de crear claves distintas
function mhash keygen s2k $hash	el id de hash utilizado para crear la clave
function mhash keygen s2k $password	una contraseña suministrada por el usuario
function mhash keygen s2k $bytes	la longitud de la clave en bytes
function string mhash keygen s2k	devuelve la clave generada en formato cadena o false en caso de error
function string mhash keygen s2k int $hash string $password string $salt int $bytes	genera una clave
function mime content type $filename	ruta para comprobar fichero
function string mime content type	devuelve el contenido en formato mime como text / plain o application / octet-stream
function string mime content type string $filename	detecta el mime content-type para un fichero funci&oacute;n obsoleta
function min	cualquier valor comparable
function min $valores	un array que contiene los valores
function min $value2	cualquier valor comparable
function min $value1	cualquier valor comparable
function mixed min	min() devuelve el valor del parámetro condierado el menor según la comparación estándar
function mixed min array $values	encontrar el valor m&aacute;s bajo
function ming setcubicthreshold $threshold	el umbral
function void ming setcubicthreshold int $threshold	establecer un umbral c&uacute;bico
function ming setscale $scale	la escala a establecer
function void ming setscale float $scale	establecer el factor de escala global
function ming setswfcompression $level	el nuevo nivel de comprensión
function void ming setswfcompression int $level	establece la comprensi&oacute;n de salida de swf
function ming useswfversion $version	versión de swf a usar
function void ming useswfversion int $version	establece la versi&oacute;n de swf
function money format $!	suprime el símbolo de moneda del string producido
function money format $%	devuelve el caracter %
function money format f $	el caracter = seguido de un caracter f byte único que se utilizará como el caracter de relleno numérico
function money format $number	el número a ser formateado
function money format $+o(	especifica el estilo de formato para los números positivos y negativos
function money format $w	un string de dígito decimal que especifica un ancho mínimo de campo
function money format $-	si está presente hará todos los campos justificados a la izquierda con relleno a la derecha contrario al valor por defecto que es para que los campos se justifiquen a la derecha con relleno a la izquierda
function money format $^	deshabilita el uso de caracteres de agrupamiento según la definición de la configuración regional actual
function money format $.p	un punto seguido por el número de dígitos p después del carácter decimal
function money format $n	el número se formatea de acuerdo al formato nacional de moneda de la configuración regional por ejemplo para la configuración regional de_de: eu1
function money format $#n	el número máximo de dígitos n que se espera a la izquierda del caracter decimal por ejemplo el punto decimal
function money format $i	el número se formatea de acuerdo al formato internacional de moneda de la configuración regional por ejemplo para la configuración regional de ee
function string money format	devuelve el string con formato
function string money format string $format float $number	da formato a un n&uacute;mero como un string de moneda
function move uploaded file $destination	el destino del archivo movido
function move uploaded file $filename	el nombre de archivo del archivo subido
function bool move uploaded file	devuelve true en caso de éxito
function bool move uploaded file string $filename string $destination	mueve un archivo subido a una nueva ubicaci&oacute;n
function mqseries put1 $pmo	put message options mqpmo
function mqseries put1 $msgDesc	message descriptor mqmd
function mqseries put1 $objDesc	object descriptor
function mqseries put1 $hConn	connection handle
function mqseries put1 $compCode	completion code
function mqseries put1 $reason	reason code qualifying the compcode
function void mqseries put1 resource $hconn resource $objDesc resource $msgDesc resource $pmo string $buffer resource $compCode resource $reason	mqseries mqput1
function msession listvar $name	el nombre a buscar
function array msession listvar	devuelve un array asociativo de valor / sesión para todas la sesiones con una variable nombrada name
function array msession listvar string $name	lista sesiones con variable
function msg get queue $perms	permisos de la cola
function msg get queue $key	id numérico de la cola de mensajes
function resource msg get queue	devuelve un gestor de recurso que se puede usar para acceder a la cola de mensajes de system v
function resource msg get queue int $key int $perms	crear o adjuntar a una cola de mensajes
function msg remove queue $queue	gestor de recurso de la cola de mensajes
function bool msg remove queue	devuelve true en caso de éxito o false en caso de error
function bool msg remove queue resource $queue	destruir una cola de mensajes
function msg send $blocking	si el mensaje es demasiado largo para caber en la cola el script esperará hasta que otro proceso lea los mensajes de la cola y libere sufieciente espacio para el mensaje que se va a enviar
function msg send $serialize	el parámetro opcional serialize controla el modo de enviar el mensaje dado por message
function bool msg send	devuelve true en caso de éxito o false en caso de error
function bool msg send resource $queue int $msgtype mixed $message bool $serialize bool $blocking int $errorcode	eviar un mensaje a una cola de mensajes
function msg set queue $queue	gestor de recurso de cola de mensajes
function msg set queue $data	se especifican los valores que se requieren estableciendo el valor de las claves que se neceditan en la matriz data
function bool msg set queue	devuelve true en caso de éxito o false en caso de error
function bool msg set queue resource $queue array $data	establecer informaci&oacute;n en la estructura de datos de la cola de mensajes
function msql affected rows $result	el resultado resource que está siendo evaluado
function int msql affected rows	devuelve el número de filas afectadas en caso de éxito o false en caso de error
function int msql affected rows resource $result	devuelve el n&uacute;mero de filas afectadas
function msql close $link_identifier	la conexión msql
function bool msql close	devuelve true en caso de éxito o false en caso de error
function bool msql close resource $link_identifier	cierra la conexi&oacute;n msql
function msql data seek $row_number	el número de fila buscado
function msql data seek $result	el resultado resource que está siendo evaluado
function bool msql data seek	devuelve true en caso de éxito o false en caso de error
function bool msql data seek resource $result int $row_number	mueve el puntero de fila interno
function string msql error	devuelve el último mensaje de error o una cadena vacía si ningún error había sido devuelto anteriormente
function string msql error	devuelve un mensaje de error de la &uacute;ltima llamada msql
function msql fetch array $result_type	una constante que puede tomar los siguientes valores: msql_assoc msql_num y msql_both con msql_both por defecto
function msql fetch array $result	el resultado resource que está siendo evaluado
function array msql fetch array	devuelve un array que corresponde a la fila extraída o false si no hay más filas
function array msql fetch array resource $result int $result_type	extraer una fila como array
function msql fetch field $result	el resultado resource que está siendo evaluado
function msql fetch field $field_offset	el campo de desplazamiento
function object msql fetch field	devuelve un objeto que contiene la información de campo
function object msql fetch field resource $result int $field_offset	extraer informaci&oacute;n de campo
function msql fetch object $result	el resultado resource que está siendo evaluado
function object msql fetch object	devuelve un objeto con las propiedades que corresponden con la fila extraída o false si no hay más filas
function object msql fetch object resource $result	extraer la fila como un objeto
function msql field len $field_offset	el número del campo a buscar
function msql field len $result	el resultado resource que está siendo evaluado
function int msql field len	devuelve la longitud del campo especificado o false en caso de error
function int msql field len resource $result int $field_offset	ontener longitud del campo
function msql field seek $field_offset	el número del campo a buscar
function msql field seek $result	el resultado resource que está siendo evaluado
function bool msql field seek	devuelve true en caso de éxito o false en caso de error
function bool msql field seek resource $result int $field_offset	determina el desplazamiento de campo
function msql free result $result	el resultado resource que está siendo evaluado
function bool msql free result	devuelve true en caso de éxito o false en caso de error
function bool msql free result resource $result	liberar memoria de un resultado
function msql list dbs $link_identifier	la conexión msql
function resource msql list dbs	devuelve un conjunto de resultados que puede ser utilizado por cualquier función que obtenga un conjunto de resultados como msql_fetch_array()
function resource msql list dbs resource $link_identifier	lista las bases de datos msql del servidor
function msql list fields $tablename	el nombre de la tabla
function msql list fields $database	el nombre de la base de datos
function msql list fields $link_identifier	la conexión msql
function resource msql list fields	devuelve un conjunto de resultados que puede ser utilizado por cualquier función que obtenga un conjunto de resultados como msql_fetch_array()
function resource msql list fields string $database string $tablename resource $link_identifier	lista los campos resultantes
function msql list tables $database	el nombre de la base de datos
function msql list tables $link_identifier	la conexión msql
function resource msql list tables	devuelve un conjunto de resultados que puede ser utilizado por cualquier función que obtenga un conjunto de resultados como msql_fetch_array()
function resource msql list tables string $database resource $link_identifier	lista las tablas en una base de datos msql
function msql num fields $result	el resultado resource que está siendo evaluado
function int msql num fields	devuelve el número de campos en el conjunto de resultados
function int msql num fields resource $result	obtiene el n&uacute;mero de campos en el resultado
function msql num rows $result	el resultado resource que está siendo evaluado
function int msql num rows	devuelve el número de filas en el conjunto de resultados
function int msql num rows resource $query_identifier	obtiene el n&uacute;mero de filas en el resultado
function msql pconnect $hostname	el hostname también puede incluir un número de puerto por ejemplo: hostname port
function resource msql pconnect	devuelve un identificador positivo de enlace msql en caso de éxito o false en caso de error
function resource msql pconnect string $hostname	abrir una conexi&oacute;n msql persistente
function msql result $field	puede ser el campo de desplazamiento o el nombre del campo o el campo de la tabla punto nombre del campo nombre-de-tabla
function msql result $row	la fila del conjunto de resultados que está siendo recuperada
function msql result $result	el resultado resource que está siendo evaluado
function string msql result	devuelve el contenido de la celda en la fila y el desplazamiento del conjunto de resultados msql especificado
function string msql result resource $result int $row mixed $field	obtenci&oacute;n de datos del resultado
function msql select db $database_name	el nombre de la base de datos
function msql select db $link_identifier	la conexión msql
function bool msql select db	devuelve true en caso de éxito o false en caso de error
function bool msql select db string $database_name resource $link_identifier	selecciona una base de datos msql
function mssql bind $type	uno constante de entre: sqltext sqlvarchar sqlchar sqlint1 sqlint2 sqlint4 sqlbit sqlflt4 sqlflt8 sqlfltn
function mssql bind $param_name	el nombre del parámetro como un string
function mssql bind $stmt	recurso de solicitud obtenido con la función mssql_init()
function mssql bind $var	la variable php que se vinculará al parámetro mssql
function mssql bind $is_output	si el valor es un parámetro output o no
function mssql bind $is_null	si el valor es null o no
function mssql bind $maxlen	utilizado con valores char / varchar
function bool mssql bind	devuelve true en caso de éxito o false en caso de error
function bool mssql bind resource $stmt string $param_name mixed $var int $type bool $is_output bool $is_null int $maxlen	a&ntilde;ade un par&aacute;metro a un stored procedure procedimiento almacenado mssql local o remoto
function mssql close $link_identifier	un identificador de conexión ms sql devuelto por la función mssql_connect()
function bool mssql close	devuelve true en caso de éxito o false en caso de error
function bool mssql close resource $link_identifier	cierra una conexi&oacute;n ms sql server
function mssql connect $password	la contraseña
function mssql connect $new_link	si se hace una segunda llamada a la función mssql_connect() con los mismos argumentos no se establecerá una nueva conexión pero en vez de eso devolverá el identificador de la conexión que ya se había abierto
function mssql connect $username	el nombre de usuario
function mssql connect $servername	el servidor ms sql
function resource mssql connect	devuelve un identificador de conexión a ms sql en caso de éxito o false en caso de error
function resource mssql connect string $servername string $username string $password bool $new_link	establece una conexi&oacute;n a un servidor ms sql
function mssql data seek $result_identifier	el identificador del resultado que está siendo evaluado
function mssql data seek $row_number	el número de fila al que se desea apuntar en el resultado
function bool mssql data seek	devuelve true en caso de éxito o false en caso de error
function bool mssql data seek resource $result_identifier int $row_number	desplaza el apuntador interno de fila
function mssql execute $skip_results	si se omiten los resultados o no
function mssql execute $stmt	gestor de la sentencia obtenido con la función mssql_init()
function mixed mssql execute resource $stmt bool $skip_results	ejecuta un stored procedure procedimiento almacenado en una base de datos del servidor ms sql
function mssql fetch batch $result	los resultados que se están evaluando
function int mssql fetch batch	devuelve el número de filas del lote devuelto
function int mssql fetch batch resource $result	devuelve el siguiente lote de registros
function mssql fetch field $field_offset	el número de posición del campo
function mssql fetch field $result	el resultado que está siendo evaluado
function object mssql fetch field	devuelve un objeto que contiene la información de los campos
function object mssql fetch field resource $result int $field_offset	obtiene informaci&oacute;n del campo
function mssql fetch row $result	el resultado que está siendo evaluado
function array mssql fetch row	devuelve un array que corresponde a la fila leída o false si no hay más filas
function array mssql fetch row resource $result	lee una l&iacute;nea del resultado de la consulta ms sql dentro de un array num&eacute;rico
function mssql field length $result	el resultado que está siendo evaluado
function mssql field length $offset	la posición del campo empieza en 0
function int mssql field length	la longitud del campo especificado en caso de éxito o false en caso de error
function int mssql field length resource $result int $offset	devuelve la longitud de un campo
function mssql field name $offset	la posición del campo empezando por 0
function mssql field name $result	el resultado que está siendo evaluado
function string mssql field name	el nombre del campo en la posicion especificada en caso de éxito o false en caso de error
function string mssql field name resource $result int $offset	devuelve el nombre de un campo
function mssql field seek $result	el resultado que está siendo evaluado
function mssql field seek $field_offset	la posición del campo empezando por 0
function bool mssql field seek	devuelve true en caso de éxito o false en caso de error
function bool mssql field seek resource $result int $field_offset	apunta al n&uacute;mero de campo especificado
function mssql field type $offset	la posición del campo empezando por 0
function mssql field type $result	el resultado que está siendo evaluado
function string mssql field type	el tipo del campo especificado por el índice en caso de éxito o false en caso de error
function string mssql field type resource $result int $offset	devuelve el tipo de un campo
function mssql free result $result	el resultado que se está evaluando
function bool mssql free result	devuelve true en caso de éxito o false en caso de error
function bool mssql free result resource $result	liberar la memoria del recurso resultado de ms sql
function mssql free statement $stmt	recurso correspondiente a la sentencia obtenido con la función mssql_init()
function bool mssql free statement	devuelve true en caso de éxito o false en caso de error
function bool mssql free statement resource $stmt	liberar la memoria ocupada por la sentencia ms sql
function string mssql get last message	devuelve el último mensaje de error del servidor o un string vacío si ningún mensaje de error ha sido devuelto por mssql
function string mssql get last message	devuelve el &uacute;ltimo mensaje de error generado por el servidor mssql
function mssql guid string $binary	un guid binario de 16 bytes
function mssql guid string $short_format	true si se usa el formato corto
function string mssql guid string	devuelve el string convertido en caso de éxito
function string mssql guid string string $binary bool $short_format	convierte un guid globally unique identifier-identificador globalmente &uacute;nico binario de 16 bytes en un string
function mssql min error severity $severity	la nueva severidad de los errores
function void mssql min error severity int $severity	fija el nivel m&iacute;nimo de severidad de los errores
function mssql next result $result_id	el recurso de resultado que se está evaluando
function bool mssql next result	devuelve true si dispone de un conjunto de resultados adicional o false en caso contrario
function bool mssql next result resource $result_id	mover el puntero interno del resultado al siguiente resultado
function mssql num rows $result	el resultado que está siendo evaluado
function int mssql num rows	devuelve el número de filas como un integer
function int mssql num rows resource $result	devuelve el n&uacute;mero de filas que hay en un resultado
function mssql pconnect $password	la contraseña
function mssql pconnect $username	el usuario
function mssql pconnect $new_link	si se hace una segunda llamada a la función mssql_pconnect() con los mismos argumentos no se establecerá una nueva conexión sino que en su lugar se devolverá el identificador de la conexión ya abierta
function mssql pconnect $servername	el servidor ms sql
function resource mssql pconnect	devuelve un identificador a una conexión persistente a ms sql en caso de éxito o false en caso de error
function resource mssql pconnect string $servername string $username string $password bool $new_link	abre una conexi&oacute;n ms sql persistente
function mssql query $batch_size	el número de registros que hay en el buffer
function mssql query $query	una consulta sql
function mssql query $link_identifier	un identificador de conexión ms sql devuelto por mssql_connect() o mssql_pconnect()
function mixed mssql query	devuelve un recurso de resultado ms sql en caso de éxito true si no se devolvieron registros o false en caso de error
function mixed mssql query string $query resource $link_identifier int $batch_size	enviar una consulta ms sql
function mssql rows affected $link_identifier	un identificador de conexión ms sql devuelto por mssql_connect() o mssql_pconnect()
function int mssql rows affected	devuelve el número de registros afectado por la última operación
function int mssql rows affected resource $link_identifier	devuelve el n&uacute;mero de registros afectado por la sentencia sql de escritura
function mssql select db $database_name	el nombre de la base de datos
function mssql select db $link_identifier	un identificador de conexión ms sql devuelto por mssql_connect() o mssql_pconnect()
function bool mssql select db	devuelve true en caso de éxito o false en caso de error
function bool mssql select db string $database_name resource $link_identifier	selecciona la base de datos ms sql
function mt srand $seed	valor de la semilla opcional
function void mt srand int $seed	genera el mejor n&uacute;mero aleatorio a partir de una semilla
function mysql client encoding $link_identifier	la conexión mysql
function string mysql client encoding	devuelve el nombre del conjunto de caracteres predeterminado de la conexión actual
function string mysql client encoding resource $link_identifier	devuelve el nombre del conjunto de caracteres
function mysql close $link_identifier	la conexión mysql
function bool mysql close	devuelve true en caso de éxito o false en caso de error
function bool mysql close resource $link_identifier	cerrar una conexi&oacute;n de mysql
function mysql connect $password	la contraseña
function mysql connect $client_flags	el parámetro client_flags puede ser una combinación de las siguientes constantes: 128 habilita el manejo de load data local mysql_client_ssl mysql_client_compress mysql_client_ignore_space o mysql_client_interactive
function mysql connect $username	el nombre de usuario
function mysql connect $server	el servidor mysql
function mysql connect $new_link	si se realiza una segunda llamada a mysql_connect() con los mismos argumentos un nuevo enlace no será establecido pero en su lugar será devuelto el identificador de enlace del enlace ya abierto
function resource mysql connect	devuelve un identificador de enlace de mysql en caso de éxito o false en caso de error
function resource mysql connect string $server string $username string $password bool $new_link int $client_flags	abre una conexi&oacute;n al servidor mysql
function mysql data seek $row_number	número de la fila deseada del puntero de resultados nuevo
function mysql data seek $result	el resultado resource que está siendo evaluado
function bool mysql data seek	devuelve true en caso de éxito o false en caso de error
function bool mysql data seek resource $result int $row_number	mueve el puntero de resultados interno
function mysql drop db $database_name	el nombre de la base de datos que va a ser eliminada
function mysql drop db $link_identifier	la conexión mysql
function bool mysql drop db	devuelve true en caso de éxito o false en caso de error
function bool mysql drop db string $database_name resource $link_identifier	elimina drop una base de datos mysql
function mysql escape string $unescaped_string	la cadena que va a ser escapada
function string mysql escape string	devuelve la cadena escapada
function string mysql escape string string $unescaped_string	escapa una cadena para ser usada en mysql_query
function mysql fetch array $result	el resultado resource que está siendo evaluado
function mysql fetch array $result_type	el tipo de array que va a ser devuelto
function array mysql fetch array	devuelve un array de cadenas que corresponde a la fila recuperada o false si no hay más filas
function array mysql fetch array resource $result int $result_type	recupera una fila de resultados como un array asociativo un array num&eacute;rico o como ambos
function mysql fetch assoc $result	el resultado resource que está siendo evaluado
function array mysql fetch assoc	devuelve un array asociativo de strings que corresponde a la fila recuperada o false si no hay más filas disponibles
function array mysql fetch assoc resource $result	recupera una fila de resultados como un array asociativo
function mysql fetch field $result	el resultado resource que está siendo evaluado
function mysql fetch field $field_offset	el índice numérico del campo
function object mysql fetch field	devuelve un object que contiene la información del campo
function object mysql fetch field resource $result int $field_offset	obtiene la informaci&oacute;n de una columna de un resultado y la devuelve como un objeto
function mysql fetch object $class_name	el nombre de la clase donde instanciar configurar las propiedades y devolver
function mysql fetch object $params	un array opcional de parámetros para pasar al constructor de los objetos class_name
function mysql fetch object $result	el resultado resource que está siendo evaluado
function object mysql fetch object	devuelve un object con propiedades de tipo string que se corresponden con la fila recuperada o false si no quedan más filas
function object mysql fetch object resource $result string $class_name array $params	recupera una fila de resultados como un objeto
function mysql fetch row $result	el resultado resource que está siendo evaluado
function array mysql fetch row	devuelve un array numérico que corresponde a la fila recuperada o false si no quedan más filas
function array mysql fetch row resource $result	obtiene una fila de resultados como un array num&eacute;rico
function mysql field flags $field_offset	el número del campo a buscar
function mysql field flags $result	el resultado resource que está siendo evaluado
function string mysql field flags	devuelve un string de banderas asociadas con el resultado o false en caso de error
function string mysql field flags resource $result int $field_offset	obtiene las banderas asociadas al campo especificado de un resultado
function mysql field len $field_offset	el número del campo a buscar
function mysql field len $result	el resultado resource que está siendo evaluado
function int mysql field len	la longitud del índice del campo especificado en caso de éxito o false en caso de error
function int mysql field len resource $result int $field_offset	devuelve la longitud del campo especificado
function mysql field name $field_offset	el número del campo a buscar
function mysql field name $result	el resultado resource que está siendo evaluado
function string mysql field name	el nombre del índice del campo especificado en caso de éxito o false en caso de error
function string mysql field name resource $result int $field_offset	obtiene el nombre del campo especificado de un resultado
function mysql field table $field_offset	el número del campo a buscar
function mysql field table $result	el resultado resource que está siendo evaluado
function string mysql field table	el nombre de la tabla en caso de éxito
function string mysql field table resource $result int $field_offset	obtiene el nombre de la tabla en la que est&aacute; el campo especificado
function mysql field type $field_offset	el número del campo a buscar
function mysql field type $result	el resultado resource que está siendo evaluado
function string mysql field type	el tipo de campo devuelto será uno de los siguientes: int real string blob y otros tal como se detalla en la documentación de mysql
function string mysql field type resource $result int $field_offset	obtiene el tipo del campo especificado de un resultado
function string mysql get client info	la versión del cliente mysql
function string mysql get client info	obtiene informaci&oacute;n del cliente mysql
function mysql get host info $link_identifier	la conexión mysql
function string mysql get host info	devuelve un string que describe el tipo de conexión mysql en uso o o false en caso de error
function string mysql get host info resource $link_identifier	obtener informaci&oacute;n del anfitri&oacute;n de mysql
function mysql get proto info $link_identifier	la conexión mysql
function int mysql get proto info	devuelve el protocolo mysql en caso de éxito o false en caso de error
function int mysql get proto info resource $link_identifier	obtener informaci&oacute;n del protocolo mysql
function mysql get server info $link_identifier	la conexión mysql
function string mysql get server info	devuelve la versión del servidor mysql en caso de éxito o false en caso de error
function string mysql get server info resource $link_identifier	obtiene informaci&oacute;n del servidor mysql
function mysql insert id $link_identifier	la conexión mysql
function int mysql insert id	el id generado por la consulta anterior para una columna auto_increment en caso de éxito 0 si la consulta anterior no genera un valor auto_increment o false si no se estableció una conexión mysql
function int mysql insert id resource $link_identifier	obtiene el id generado en la &uacute;ltima consulta
function mysql list processes $link_identifier	la conexión mysql
function resource mysql list processes	un puntero de resultados de tipo resource en caso de éxito o false en caso de error
function resource mysql list processes resource $link_identifier	lista los procesos de mysql
function mysql list tables $database	el nombre de la base de datos
function mysql list tables $link_identifier	la conexión mysql
function resource mysql list tables	el puntero de resultados de tipo resource en caso de éxito o false en caso de error
function resource mysql list tables string $database resource $link_identifier	enumerar las tablas de una base de datos mysql
function mysql pconnect $server	el servidor de mysql
function mysql pconnect $password	la contraseña
function mysql pconnect $username	el nombre de usuario
function mysql pconnect $client_flags	el parámetro client_flags puede ser una combinación de las siguientes constantes: 128 habilita el manejo de load data local mysql_client_ssl mysql_client_compress mysql_client_ignore_space o mysql_client_interactive
function resource mysql pconnect	devuelve un identificador de enlace persistente a mysql en caso de éxito o false en caso de error
function resource mysql pconnect string $server string $username string $password int $client_flags	abre una conexi&oacute;n persistente a un servidor mysql
function mysql result $row	el número de fila del conjunto de resultados que está siendo recuperado
function mysql result $result	el resultado resource que está siendo evaluado
function mysql result $field	el nombre o el índice del campo que está siendo recuperado
function string mysql result	el contenido de una celda de un conjunto de resultados de mysql en caso de éxito o false en caso de fallo
function string mysql result resource $result int $row mixed $field	obtener datos de resultado
function mysql set charset $charset	un nombre válido de un conjunto de caracteres
function mysql set charset $link_identifier	la conexión mysql
function bool mysql set charset	devuelve true en caso de éxito o false en caso de error
function bool mysql set charset string $charset resource $link_identifier	establece el conjunto de caracteres del cliente
function mysql tablename $i	el índice de tipo integer número de fila / tabla
function mysql tablename $result	un resource de puntero de resultados que se devuelve desde mysql_list_tables()
function string mysql tablename	el nombre de la tabla en caso de éxito o false en caso de error
function string mysql tablename resource $result int $i	obtiene el nombre de la tabla de un campo
function mysql unbuffered query $query	la consulta sql a ejecutar
function mysql unbuffered query $link_identifier	la conexión mysql
function resource mysql unbuffered query	para sentencias select show describe o explain mysql_unbuffered_query() devuelve un resource en caso de éxito o false en caso de error
function resource mysql unbuffered query string $query resource $link_identifier	env&iacute;a una consulta sql a mysql sin recuperar ni almacenar en b&uacute;fer las filas de resultados
function array mysqli get cache stats	devuelve un array vacío en caso de éxito false en caso contrario
function array mysqli get cache stats	devuelve las estad&iacute;sticas de la cach&eacute; de zval del cliente
function mysqlnd memcache get config $connection	un gestor a un servidor de mysql empleando una de las extensiones de la api de mysql para php las cuales son pdo_mysql mysqli o ext / mysql
function array mysqlnd memcache get config	un array con información de la configuración de mysqlnd_memcache en caso de éxito de lo contrario false
function array mysqlnd memcache get config mixed $connection	devuelve informaci&oacute;n acerca de la configuraci&oacute;n del complemento
function mysqlnd memcache set $callback	una retrollamada que será empleada siempre que se comience el envío de una consulta a mysql
function mysqlnd memcache set $pattern	una expresión regular con la sintaxis de expresiones regulares compatibles con perl empleada para identificar consultas de memcache potenciales
function mysqlnd memcache set $mysql_connection	un gestor a un servidor de mysql empleando una de las extensiones de la api de mysql para php las cuales son pdo_mysql mysqli o ext / mysql
function mysqlnd memcache set $memcache_connection	una instancia de memcached con una conexión al complemento memcache daemon de mysql
function bool mysqlnd memcache set	true si la asociación o disociación tiene éxito o de lo contrario false si ocurrió un error
function bool mysqlnd memcache set mixed $mysql_connection Memcached $memcache_connection string $pattern callback $callback	asociar una conexi&oacute;n de mysql con una conexi&oacute;n de memcache
function mysqlnd ms get last gtid $connection	un gestor de conexión de pecl / mysqlnd_ms hacia un servidor mysql del tipo pdo_mysql mysqli > o ext / mysql
function string mysqlnd ms get last gtid	devuelve un id de transacciones global gtid en caso de éxito
function string mysqlnd ms get last gtid mixed $connection	devuelve el &uacute;ltimo id de transacciones global
function mysqlnd ms get last used connection $connection	un gestor de conexión mysql obtenido desde cualquiera de las funciones de conexión de las extensiones mysqli mysql o pdo_mysql
function array mysqlnd ms get last used connection	false en caso de error
function array mysqlnd ms get last used connection mixed $connection	devuelve un array que describe la &uacute;ltima conexi&oacute;n usada
function array mysqlnd ms get stats	devuelve null si la directiva de configuración de php mysqlnd_ms
function array mysqlnd ms get stats	devuelve la distribuci&oacute;n consultas y las estad&iacute;sticas de conexi&oacute;n
function mysqlnd ms set qos $option_value	el valor del parámetro de la opción del nivel de servicio
function mysqlnd ms set qos $service_level_option	una opción para parametrizar el nivel de servicio solicitado
function mysqlnd ms set qos $service_level	el nivel de servicio solicitado: mysqlnd_ms_qos_consistency_eventual mysqlnd_ms_qos_consistency_session o mysqlnd_ms_qos_consistency_strong
function mysqlnd ms set qos $connection	un gestor de conexión de pecl / mysqlnd_ms hacia un servidor mysql del tipo pdo_mysql mysqli > o ext / mysql para el cual establecer un nivel de servicio
function bool mysqlnd ms set qos	devuelve true si el nivel de servicio de la conexión ha sido cambiado en la solicitud
function bool mysqlnd ms set qos mixed $connection int $service_level int $service_level_option mixed $option_value	establece la calidad de servicio necesaria de un cl&uacute;ster
function mysqlnd ms set user pick server $function	la función a llamar
function bool mysqlnd ms set user pick server	el equipo anfitrión donde ejecutar la consulta
function bool mysqlnd ms set user pick server string $function	establece una llamada de retorno para la divisi&oacute;n de lectura / escritura definida por el usuario
function mysqlnd ms xa begin $gtrid	el identificador de transacción global gtrid
function mysqlnd ms xa begin $connection	un gestor de conexión de mysql obtenido desde cualquier función de conexión de las extensiones mysqli mysql o pdo_mysql
function mysqlnd ms xa begin $timeout	tiempo límite en segundos
function int mysqlnd ms xa begin	devuelve true si no hay ninguna transacción local o global abiertas y se puede iniciar una nueva transacción global
function int mysqlnd ms xa begin mixed $connection string $gtrid int $timeout	inicia una transacci&oacute;n distribuida / xa entre servidores de mysql
function mysqlnd ms xa commit $gtrid	el identificador de transacción global gtrid
function mysqlnd ms xa commit $connection	un gestor de conexión de mysql obtenido de cualesquiera de las extensiones connect functions of the mysqli mysql o pdo_mysql
function int mysqlnd ms xa commit	devuelve true si la transacción global ha sido consignada
function int mysqlnd ms xa commit mixed $connection string $gtrid	consigna una transacci&oacute;n distribuida / xa entre servidores de mysql
function mysqlnd ms xa gc $gtrid	un identificador de transacción global gtrid
function mysqlnd ms xa gc $ignore_max_retries	indica si ignorar el ajuste de configuración max_retries del complemento
function mysqlnd ms xa gc $connection	un gestor de conexión de mysql obtenido de cualesquiera de las extensiones connect functions of the mysqli mysql o pdo_mysql
function int mysqlnd ms xa gc	devuelve true si la transacción global ha sido revertida
function int mysqlnd ms xa gc mixed $connection string $gtrid boolean $ignore_max_retries	recolecta basura de transacciones xa no finalizadas despu&eacute;s de alg&uacute;n error del servidor
function bool mysqlnd qc clear cache	devuelve true en caso de éxito o false en caso de error
function bool mysqlnd qc clear cache	vac&iacute;a todo el contenido de la cach&eacute;
function array mysqlnd qc get available handlers	devuelve una rray de los gestores de almacenamiento internos disponibles
function array mysqlnd qc get available handlers	devuelve una lista de los gestores de almacenamiento disponibles
function array mysqlnd qc get query trace log	un array de información de rastreo de consultas
function array mysqlnd qc get query trace log	devuelve informaci&oacute;n de rastreo para cada consulta inspeccionada por la cach&eacute; de consultas
function mysqlnd qc set cache condition $condition	parámetro para la condición establecida con condition_type
function mysqlnd qc set cache condition $condition_type	el tipo de condición
function mysqlnd qc set cache condition $condition_option	opción para condition
function bool mysqlnd qc set cache condition	devuelve true en caso de éxito o false en caso de error
function bool mysqlnd qc set cache condition int $condition_type mixed $condition mixed $condition_option	establece las condiciones para el almacenamiento en cach&eacute; autom&aacute;tico
function mixed mysqlnd qc set is select	devuelve true en caso de éxito o false en caso de error
function mixed mysqlnd qc set is select string $callback	instala una llamada de retorno que decide si una sentencia es almacenada en cach&eacute;
function mysqlnd qc set storage handler $handler	el gestor puede ser una cadena que representa el nombre de un gestor de almacenamiento interno o un objeto de tipo mysqlnd_qc_handler_default
function bool mysqlnd qc set storage handler	devuelve true en caso de éxito o false en caso de error
function bool mysqlnd qc set storage handler string $handler	cambia el gestor de almacenamiento en uso
function mysqlnd uh set connection proxy $connection_proxy	un objeto proxy de tipo mysqlnduhconnection
function mysqlnd uh set connection proxy $mysqli_connection	un objeto de tipo mysqli
function bool mysqlnd uh set connection proxy	devuelve true en caso de éxito
function bool mysqlnd uh set connection proxy MysqlndUhConnection $connection_proxy mysqli $mysqli_connection	instala un proxy para las conexiones de mysqlnd
function mysqlnd uh set statement proxy $statement_proxy	el objeto proxy de sentencias de mysqlnd de tipo mysqlnduhstatement
function bool mysqlnd uh set statement proxy	devuelve true en caso de éxito
function bool mysqlnd uh set statement proxy MysqlndUhStatement $statement_proxy	instala un proxy para sentencias de mysqlnd
function natsort $array	el array de entrada
function bool natsort	devuelve true en caso de éxito o false en caso de error
function bool natsort array $array	ordena un array usando un algoritmo de orden natural
function bool ncurses can change color	devuelve true si el programador puede cambiar las definiciones de color false si no
function bool ncurses can change color	comprobar si las definiciones de color del terminal se pueden cambiar
function ncurses color content $r	una referencia a la que devolver el componente rojo del color
function ncurses color content $g	una referencia a la que devolver el componente verde del color
function ncurses color content $color	el número del color del que se va a obtener información
function ncurses color content $b	una referencia a la que devolver el componente azul del color
function int ncurses color content	returns -1 si la función tuvo éxito y 0 si ncurses o las capacidades de color del terminal no han sido inicializadas
function int ncurses color content int $color int $r int $g int $b	obtiene los componentes rgb de un color
function ncurses color set $pair	la pareja de colores que va a obtener los colores de primer plano y fondo para establecer los colores activos
function int ncurses color set	devuelve -1 en caso de éxito y 0 en caso de fallo
function int ncurses color set int $pair	establecer los colores de primer plano y fondo activos
function ncurses init color $b	un valor de color entre 0 y 1000 para el componente azul
function ncurses init color $color	el número de identificación del color a redefinir
function ncurses init color $r	un valor de color entre 0 y 1000 para el componente rojo
function ncurses init color $g	un valor de color entre 0 y 1000 para el componente verde
function int ncurses init color	devuelve -1 si la función tuvo éxito y 0 si ncurses o las capacidades de color del terminal no han sido inicializadas o el terminal no tiene capacidad de cambiar de color
function int ncurses init color int $color int $r int $g int $b	definir un color de termimal
function ncurses init pair $fg	el color de primer plano de la pareja de colroes
function ncurses init pair $bg	el color de fondo de la pareja de colores
function ncurses init pair $pair	el número de la pareja de colores a definir
function int ncurses init pair	devuelve -1 si la función tuvo éxito y 0 si ncurses o el soporte para colores no fue inicializado
function int ncurses init pair int $pair int $fg int $bg	definir una pareja de colores
function int ncurses start color	devuelve 0 en caso de éxito o -1 si la tabla de colores no pudo ser asignada o ncurses no fue inicializado
function int ncurses start color	inicializa la funcionalidad de color
function void newt bell	enviar sonido bip a la terminal
function newt centered window $height	alto de la vetana
function newt centered window $width	ancho de la ventana
function newt centered window $title	título de la ventana
function int newt centered window	valor no definido
function int newt centered window int $width int $height string $title	abrir una ventana centrada de un tama&ntilde;o espec&iacute;fico
function void newt checkbox set flags resource $checkbox int $flags int $sense	configura el recurso checkbox
function void newt checkbox set value resource $checkbox string $value	establece el valor de la checkbox
function void newt checkbox tree add item resource $checkboxtree string $text mixed $data int $flags int $index	a&ntilde;ade un nuevo &iacute;tem al &aacute;rbol checkbox
function array newt checkbox tree find item	devuelve el recurso del elemento del árbol de casillas de verificación o null si no se encontro
function array newt checkbox tree find item resource $checkboxtree mixed $data	busca un elemento en el &aacute;rbol de casillas de verificaci&oacute;n
function mixed newt checkbox tree get current	devuelve el elemento actual seleccionado del árbol de casillas de verificación
function mixed newt checkbox tree get current resource $checkboxtree	devuelve el elemento seleccionado del &aacute;rbol de casillas de verificaci&oacute;n
function void newt clear key buffer	desecha el contenido del b&uacute;fer de entrada del terminal sin esperar a entradas adicionales
function newt draw root text $left	número de columna nota : si es negativo la posición se mide desde el lado opuesto de la pantalla
function newt draw root text $text	el texto a mostrar
function newt draw root text $top	número de línea nota : si es negativo la posición se mide desde el lado opuesto de la pantalla
function void newt draw root text int $left int $top string $text	muestra el texto de cadena en la posici&oacute;n indicada
function newt form add component $component	el componente a añadir al formulario
function newt form add component $form	el formulario al que se le añadría el componente
function void newt form add component resource $form resource $component	a&ntilde;ade un &uacute;nico componente al formulario
function newt form add components $form	el formulario al que se le añadirán los componentes
function newt form add components $components	array de componentes a añadir al formulario
function void newt form add components resource $form array $components	a&ntilde;ade varios componentes al formulario
function newt form destroy $form	el componente formulario que va a ser destruido
function void newt form destroy resource $form	destruye un formulario
function newt get screen size $rows	número de filas del terminal
function newt get screen size $cols	número de columnas del terminal
function void newt get screen size int $cols int $rows	rellena las referencias pasadas con el tama&ntilde;o actual del terminal
function newt open window $width	el ancho de la ventana
function newt open window $title	el título de la ventana
function newt open window $left	la ubicación de la esquina superior izquierda de la ventana el número de columna
function newt open window $height	el alto de la ventana
function newt open window $top	la ubicación de la esquina inferior derecha de la ventana el número de fila
function int newt open window	devuelve 1 en caso de éxito 0 en caso de error
function int newt open window int $left int $top int $width int $height string $title	abre una ventana con el tama&ntilde;o y posici&oacute;n especificados
function void newt pop help line	reemplaza la l&iacute;nea actual de ayuda con la procedente de la pila
function void newt pop window	elimina la ventana superior de la exposici&oacute;n
function void newt refresh	actualiza las porciones modificadas de la pantalla
function void newt resume	reanudaci&oacute;n usando la interfaz de newt despu&eacute;s de llamar a newt_suspend
function newt run form $form	el componente formulario
function resource newt run form	el componente que ocasionó que se dejara de ejecutar el formulario
function resource newt run form resource $form	ejecuta un formulario
function newt set suspend callback $function	una función de llamada de retorno la cual acepta un argumento: data
function newt set suspend callback $data	los datos que son pasados a la función de llamada de retorno
function void newt set suspend callback callable $function mixed $data	establece una funci&oacute;n de llamada de retorno que se invoca cuando el usuario presiona la tecla de suspensi&oacute;n
function void newt suspend	indica a newt que devuelva el terminal a su estado inicial
function void newt wait for key	no devolver hasta que se pulse una tecla
function next $array	el array afectado
function mixed next	devuelve el valor del array en el siguiente lugar que está apuntado por el puntero interno o false si no hay más elementos
function mixed next array $array	avanza el puntero interno de un array
function string ngettext	devuelve la correcta forma plural del mensaje identificados por mensaje1 y mensaje2 para el conteo en n
function string ngettext string $msgid1 string $msgid2 int $n	versi&oacute;n plural de gettext
function nl2br $string	el string de entrada
function nl2br $is_xhtml	si utilizar saltos de línea compatibles con xhtml o no
function string nl2br	devuelve el string alterado
function string nl2br string $string bool $is_xhtml	inserta saltos de l&iacute;nea html antes de todas las nuevas l&iacute;neas de un string
function array nsapi request headers	devuelve un array asociativo con todas las cabeceras http
function array nsapi request headers	obtiene todas las cabeceras de petici&oacute;n http
function number format $thousands_sep	establece el separador para los millares
function number format $dec_point	establece el separador para los decimales
function number format $number	el número al que dar formato
function number format $decimals	establece el número de puntos decimales
function string number format	una versión formateada de number
function string number format float $number int $decimals	formatear un n&uacute;mero con los millares agrupados
function oauth urlencode $uri	uri a codificar
function string oauth urlencode	returns an rfc 3986 encoded string
function string oauth urlencode string $uri	c&oacute;difica una uri a rfc 3986
function bool ob end clean	devuelve true en caso de éxito o false en caso de error
function bool ob end clean	limpiar eliminar el b&uacute;fer de salida y deshabilitar el almacenamiento en el mismo
function void ob flush	vaciar enviar el b&uacute;fer de salida
function ob implicit flush $flag	true para habilitar el volcado implícito false para deshabilitarlo
function void ob implicit flush int $flag	habilitar / deshabilitar el volcado impl&iacute;cito
function ob start $phase	máscara de bits de constantes php_output_handler_*
function ob start $buffer	contenido del búfer de salida
function ob start $output_callback	se puede especificar una función output_callback opcional
function ob start $flags	el parámetro flags es una máscara de bits que controla las operaciones que se pueden realizar sobre el búfer de salida
function ob start $chunk_size	si se proporciona el parámetro opcional chunk_size el búffer será volcado después de cualquier llamada de salida que cause que la longitud del búfer sea igual o exceda a chunk_size
function bool ob start	devuelve true en caso de éxito o false en caso de error
function bool ob start callable $output_callback int $chunk_size int $flags	activa el almacenamiento en b&uacute;fer de la salida
function ob tidyhandler $input	el buffer
function ob tidyhandler $mode	el modo del buffer
function string ob tidyhandler	devuelve el buffer modificado
function string ob tidyhandler string $input int $mode	funci&oacute;n callback de ob_start para reparar el buffer
function oci bind array by name $max_table_length	establece la longitud máxima para los arrays entrantes y resultantes
function oci bind array by name $max_item_length	establece la longitud máxima para los elementos del array
function oci bind array by name $type	debería usarse para establecer el tipo de los elementos del arrary de pl / sql
function oci bind array by name $statement	un identificador de sentencia de oci válido
function oci bind array by name $var_array	un array
function oci bind array by name $name	el parámetro de sustitución de oracle
function bool oci bind array by name	devuelve true en caso de éxito o false en caso de error
function bool oci bind array by name resource $statement string $name array $var_array int $max_table_length int $max_item_length int $type	vincula un array de php con un par&aacute;metro de un array de oracle pl / sql
function oci bind by name $maxlength	establece la longitud máxima para los datos
function oci bind by name $statement	un identificador de sentencia de oci8 válido
function oci bind by name $variable	la variable de php que va a ser asociada con bv_name
function oci bind by name $bv_name	el parámetro de sustitución de la variable vinculada prefijado por dos puntos : usado en la sentencia
function oci bind by name $type	el tipo de datos con el que oracle trartará los datos
function bool oci bind by name	devuelve true en caso de éxito o false en caso de error
function bool oci bind by name resource $statement string $bv_name mixed $variable int $maxlength int $type	vincula una variable de php a un par&aacute;metro de sustituci&oacute;n de oracle
function oci close $connection	un identificador de conexión de oracle devuelto por oci_connect() oci_pconnect() o oci_new_connect()
function bool oci close	devuelve true en caso de éxito o false en caso de error
function bool oci close resource $connection	cierra una conexi&oacute;n a oracle
function oci commit $connection	un identificador de conexión de oracle devuelto por oci_connect() oci_pconnect() o oci_new_connect()
function bool oci commit	devuelve true en caso de éxito o false en caso de error
function bool oci commit resource $connection	consigna la transacci&oacute;n pendiente de la base de datos
function oci connect $session_mode	este parámetro está disponible desde la versión 5 de php pecl oci8 1
function oci connect $password	la contraseña para username
function oci connect $username	el nombre de usuario de oracle
function oci connect $character_set	determina el juego de caracteres usado por las bibliotecas cliente de oracle
function oci connect $connection_string	contiene la instancia de oracle a la que conectarse
function resource oci connect	devuelve un identificador de conexión o false en caso de error
function resource oci connect string $username string $password string $connection_string string $character_set int $session_mode	conecta a una base de datos de oracle
function oci define by name $variable	la variable de php que contendrá el valor de la columna devuelta
function oci define by name $statement	un identificador de sentencia de oci8 válido creado por oci_parse() y ejecutado por oci_execute() o un identificador de sentencia de ref cursor
function oci define by name $column_name	el nombre de la columna usada en la consulta
function oci define by name $type	el tipo de dato a devolver
function bool oci define by name	devuelve true en caso de éxito o false en caso de error
function bool oci define by name resource $statement string $column_name mixed $variable int $type	asocia una variable de php con una columna para la obtenci&oacute;n de consultas
function oci error $resource	para la mayoría de errores resource es el gestor de recurso que fue pasado a la función que falló
function array oci error	si no se encontró ningún error oci_error() devuelve false
function array oci error resource $resource	devuelve el &uacute;ltimo error encontrado
function oci fetch all $flags	el parámetro flags indica la estructura del array y si se deberían usar arrays asociativos
function oci fetch all $maxrows	el número de filas a devolver
function oci fetch all $statement	un identificador de sentencia de oci8 válido creado por oci_parse() y ejecutado por oci_execute() o un identificador de sentencia de ref cursor
function oci fetch all $skip	el número de filas iniciales a descartar cuando se obtiene el resultado
function oci fetch all $output	la variable que contiene las filas devueltas
function int oci fetch all	devuelve el número de filas de output el cual podría ser cero o más o false en caso de error
function int oci fetch all resource $statement array $output int $skip int $maxrows int $flags	obtiene m&uacute;ltiples filas de una consulta y las ubica en un array bidimiensional
function oci fetch array $statement	un identificador de sentencia de oci8 válido creado por oci_parse() y ejecutado por oci_execute() o un identificador de sentencia de ref cursor
function oci fetch array $mode	este segundo parámetro opcional puede ser cualquier combinación de las siguientes contantes: modos de oci_fetch_array() constante descripción oci_both devuelve un array con índices tanto asociativos como numéricos
function array oci fetch array	devuelve un array con los índices asociativos y / o numéricos
function array oci fetch array resource $statement int $mode	devuelve la siguiente fila de una consulta como un array asociativo o num&eacute;rico
function oci fetch assoc $statement	un identificador de sentencia de oci8 válido creado por oci_parse() y ejecutado por oci_execute() o un identificador de sentencia de ref cursor
function array oci fetch assoc	devuelve un array asociativo
function array oci fetch assoc resource $statement	devuelve la siguiente fila de una consulta como un array asociativo
function oci fetch object $statement	un identificador de sentencia de oci8 válido creado por oci_parse() y ejecutado por oci_execute() o un identificador de sentencia de ref cursor
function object oci fetch object	devuelve un objeto
function object oci fetch object resource $statement	devuelve la siguiente fila de una consulta como un objeto
function oci fetch row $statement	un identificador de sentencia de oci8 válido creado por oci_parse() y ejecutado por oci_execute() o un identificador de sentencia de ref cursor
function array oci fetch row	devuelve un array con índices numéricos
function array oci fetch row resource $statement	devuelve la siguiente fila de una consulta como un array num&eacute;rico
function oci fetch $statement	un identificador de sentencia de oci8 válido creado por oci_parse() y ejecutado por oci_execute() o un identificador de sentencia de ref cursor
function bool oci fetch	devuelve true en caso de éxito o false si no existen más filas en el parámetro statement
function bool oci fetch resource $statement	coloca la siguiente fila de una consulta en los b&uacute;feres internos
function oci field is null $statement	un identificador de sentencia de oci válido
function oci field is null $field	puede ser el índice de campo basado en 1 o el nombre
function bool oci field is null	devuelve true si field es null false si no
function bool oci field is null resource $statement mixed $field	comprueba si un campo de la fila actualmente obtenida es null
function oci field name $statement	un identifidacor de sentencia de oci válido
function oci field name $field	puede ser un índice de campo basado en 1 o un nombre
function string oci field name	devuelve el nombre como una cadena o false en caso de error
function string oci field name resource $statement mixed $field	devuelve el nombre de un campo de una sentencia
function oci field scale $statement	un identificador de sentencia de oci válido
function oci field scale $field	puede ser un índice de campo basado en 1 o un nombre
function int oci field scale	devuelve la escala como un entero o false en caso de error
function int oci field scale resource $statement mixed $field	indica la escala de un campo
function oci field size $statement	un identificador de sentencia de oci válido
function oci field size $field	puede ser un índice de campo basado en 1 o un nombre
function int oci field size	devuelve el tamaño de field en bytes o false en caso de error
function int oci field size resource $statement mixed $field	devuelve el tama&ntilde;o de un campo
function oci field type raw $statement	un identificador de sentencia de oci válido
function oci field type raw $field	puede ser un índice de campo basado en 1 o un nombre
function int oci field type raw	devueleve el tipo de datos sin tratar de oracle como un número o false en caso de error
function int oci field type raw resource $statement mixed $field	indica el tipo de datos sin tratar de oracle de un campo
function oci field type $statement	un identificador de sentencia de oci válido
function oci field type $field	puede ser un índice de campo basado en 1 o un nombre
function mixed oci field type	devuelve el tipo de datos de un campo como una cadena o false en caso de error
function mixed oci field type resource $statement mixed $field	devuelve el nombre del tipo de datos de un campo
function bool oci free descriptor	devuelve true en caso de éxito o false en caso de error
function bool oci free descriptor resource $descriptor	libera un descriptor
function oci get implicit resultset $statement	un identificador de sentencia oci8 válido creado mediante oci_parse() y ejecutada por oci_execute()
function resource oci get implicit resultset	devuelve un gestor de sentencia para la siguiente sentencia hija disponible en statement
function resource oci get implicit resultset resource $statement	devuelve el siguiente recurso de sentencia hija desde un recurso de sentencia padre que posee conjuntos de resultados impl&iacute;citos de oracle database 12c
function oci lob copy $lob_to	el lob de destino
function oci lob copy $lob_from	el lob copiado
function oci lob copy $length	indica la longitud de los datos a copiar
function bool oci lob copy	devuelve true en caso de éxito o false en caso de error
function bool oci lob copy OCI-Lob $lob_to OCI-Lob $lob_from int $length	copia objetos grandes
function oci new connect $session_mode	este parámetro está disponible desde la versión 5 de php pecl oci8 1
function oci new connect $password	la contraseña para username
function oci new connect $username	el nombre de usuario de oracle
function oci new connect $character_set	determina el juego de caracteres usado por las bibliotecas cliente de oracle
function oci new connect $connection_string	contiene la instancia de oracle a la que conectarse
function resource oci new connect	devuelve un identificador de conexión o false en caso de error
function resource oci new connect string $username string $password string $connection_string string $character_set int $session_mode	conectar al servidor de oracle usando una conexi&oacute;n &uacute;nica
function oci new descriptor $type	los valores válidos para type son: oci_dtype_file oci_dtype_lob y oci_dtype_rowid
function oci new descriptor $connection	un identificador de conexión de oracle devuelto por oci_connect() o oci_pconnect()
function OCI-Lob oci new descriptor	devuelve un nuevo descriptor de lob o file en caso de éxito false en caso de error
function OCI-Lob oci new descriptor resource $connection int $type	inicializa un nuevo descriptor vac&iacute;o lob o file
function oci parse $sql_text	la sentencia sql o pl / sql
function oci parse $connection	un identificador de conexión de oracle devuelto por oci_connect() oci_pconnect() o oci_new_connect()
function resource oci parse	devuelve el gestor de sentencia en caso de éxito o false en caso de error
function resource oci parse resource $connection string $sql_text	prepara una sentencia de oracle para su ejecuci&oacute;n
function oci password change $dbname	el nombre de la base de datos
function oci password change $old_password	la contraseña antigua
function oci password change $username	el nombre del usuario de oracle
function oci password change $connection	un identificador de conexión de oracle devuelto por oci_connect() o oci_pconnect()
function oci password change $new_password	la nueva contraseña a establecer
function bool oci password change	devuelve true en caso de éxito o false en caso de error
function bool oci password change resource $connection string $username string $old_password string $new_password	cambia la contrase&ntilde;a de un usuario de oracle
function oci pconnect $password	la contraseña de username
function oci pconnect $session_mode	este parámetro está disponible desde la versión 5 de php pecl oci8 1
function oci pconnect $username	el nombre de usuario de oracle
function oci pconnect $character_set	determina el juego de caracteres usado por las bibliotecas cliente de oracle
function oci pconnect $connection_string	contiene la instancia de oracle a la que conectarse
function resource oci pconnect	devuelve un identificador de conexión o false en caso de error
function resource oci pconnect string $username string $password string $connection_string string $character_set int $session_mode	conectar a una base de datos de oracle usando una conexi&oacute;n persistente
function oci set action $connection	un identificador de conexión de oracle devuelto por oci_connect() oci_pconnect() o oci_new_connect()
function oci set action $action_name	la cadena elegida por el usuario hasta 32 bytes de longitud
function bool oci set action	devuelve true en caso de éxito o false en caso de error
function bool oci set action resource $connection string $action_name	establece el nombre de una acci&oacute;n
function oci set client identifier $connection	un identificador de conexión de oracle devuelto por oci_connect() oci_pconnect() o oci_new_connect()
function oci set client identifier $client_identifier	la cadena elegida por el usuario hasta 64 bytes de longitud
function bool oci set client identifier	devuelve true en caso de éxito o false en caso de error
function bool oci set client identifier resource $connection string $client_identifier	establece el identificador del cliente
function oci set edition $edition	el nombre de la edición de oracle database anteriormente creada con el comando sql create edition
function bool oci set edition	devuelve true en caso de éxito o false en caso de error
function bool oci set edition string $edition	establece la edici&oacute;n de la base de datos
function oci set prefetch $rows	el número de filas que van a se precargadas > = 0
function oci set prefetch $statement	un identificador de sentencia de oci8 válido creado por oci_parse() y ejecutado por oci_execute() o un identificador de sentencia de ref cursor
function bool oci set prefetch	devuelve true en caso de éxito o false en caso de error
function bool oci set prefetch resource $statement int $rows	establece el n&uacute;mero de filas a precargar mediante consultas
function oci statement type $statement	un identificador de sentencia de oci8 válido desde oci_parse()
function string oci statement type	devuelve el tipo de statement como una de las siguientes cadenas
function string oci statement type resource $statement	devuelve el tipo de una sentencia
function octdec $octal_string	el string octal a convertir
function number octdec	la representación decimal de octal_string
function number octdec string $octal_string	octal a decimal
function odbc autocommit $OnOff	si onoff es true el auto envío está habilitado si es false el auto envío está deshabilitado
function odbc autocommit $connection_id	el conector identificador odbc ver odbc_connect() para más información
function mixed odbc autocommit	sin el parámetro onoff está función devuelve el estado de auto envío para connection_id
function mixed odbc autocommit resource $connection_id bool $OnOff	activa el comportamiento autom&aacute;tico de env&iacute;o
function void odbc close all	cerrar todas las conexiones odbc
function odbc close $connection_id	el conector identificador odbc ver odbc_connect() para más información
function void odbc close resource $connection_id	cerrar una conexi&oacute;n odbc
function odbc columnprivileges $owner	el propietario
function odbc columnprivileges $table_name	el nombre de la table
function odbc columnprivileges $column_name	el argumento column_name acepta patrones de búsqueda % para comparar cero o más caracteres y _ para comparar un único carácter
function odbc columnprivileges $qualifier	el cualificador
function odbc columnprivileges $connection_id	el conector identificador odbc ver odbc_connect() para más información
function resource odbc columnprivileges	devuelve un identificador de resultado de odbc o false en caso de error
function resource odbc columnprivileges resource $connection_id string $qualifier string $owner string $table_name string $column_name	lista las columnas y los privilegios asociados para la tabla dada
function odbc commit $connection_id	el conector identificador odbc ver odbc_connect() para más información
function bool odbc commit	devuelve true en caso de éxito o false en caso de error
function bool odbc commit resource $connection_id	env&iacute;a una transacci&oacute;n odbc
function odbc cursor $result_id	el indentificador de resultados
function string odbc cursor	devuelve el nombre del cursor como cadena
function string odbc cursor resource $result_id	obtener el nombre del cursor
function odbc data source $fetch_type	el parámetro fetch_type puede ser uno de los dos tipos de constantes: sql_fetch_first sql_fetch_next
function odbc data source $connection_id	el conector identificador odbc ver odbc_connect() para más información
function array odbc data source	devuelve false si se produjo un error y un array si tuvo éxito
function array odbc data source resource $connection_id int $fetch_type	devuelve informaci&oacute;n sobre una conexi&oacute;n actual
function odbc exec $query_string	la sentencia sql
function odbc exec $flags	este parámetro no se usa actualmente
function odbc exec $connection_id	el conector identificador odbc ver odbc_connect() para más información
function resource odbc exec	devuelve un identificador de resultado de odbc si el comando sql se ejecutó con éxito o false si se produjo un error
function resource odbc exec resource $connection_id string $query_string int $flags	preparar y ejecutar una sentencia sql
function odbc execute $result_id	el resource de identificación de resultado desde odbc_prepare()
function odbc execute $parameters_array	los parámetros en parameter_array serán sustituidoss por parámetros de sustitución en la declaración preparada en orden
function bool odbc execute	devuelve true en caso de éxito o false en caso de error
function bool odbc execute resource $result_id array $parameters_array	ejecutar una declaraci&oacute;n preparada
function odbc fetch array $rownumber	escoger opcionalmente qué número de fila a recuperar
function odbc fetch array $result	el recurso del resultado de odbc_exec()
function array odbc fetch array	devuelve una matriz que se corresponde con la fila traída o false si ya no hay más filas
function array odbc fetch array resource $result int $rownumber	obtener una fila de resultados como una matriz asociativa
function odbc fetch row $row_number	si no se especifica row_number odbc_fetch_row() intentará traer la siguiente fila del conjunto de resultados
function odbc fetch row $result_id	el indentificador de resultado
function bool odbc fetch row	devuelve true si hubo una fila de otro modo false
function bool odbc fetch row resource $result_id int $row_number	traer una fila
function odbc field len $field_number	el número de campo
function odbc field len $result_id	el identificador de resultado
function int odbc field len	devuelve la longitud del campo o false en caso de error
function int odbc field len resource $result_id int $field_number	obtener la longitud precisi&oacute;n de un campo
function odbc field num $field_name	el nombre del campo
function odbc field num $result_id	el identificador de resultado
function int odbc field num	devuelve el número de campo como un valor entero o false si se produjo un error
function int odbc field num resource $result_id string $field_name	devolver el n&uacute;mero de columna
function odbc field scale $field_number	el número de campo
function odbc field scale $result_id	el identificador de resultado
function int odbc field scale	devuelve la escala del campo como un valor de tipo integer o false si se produjo un error
function int odbc field scale resource $result_id int $field_number	obtener la escala de un campo
function odbc foreignkeys $pk_owner	el propietario de la clave primaria
function odbc foreignkeys $fk_owner	el propietario de la clave extranjera
function odbc foreignkeys $fk_table	la tabla de la clave extranjera
function odbc foreignkeys $pk_qualifier	el cualificador de clave primaria
function odbc foreignkeys $connection_id	el conector identificador odbc ver odbc_connect() para más información
function odbc foreignkeys $fk_qualifier	el cualificador de la clave extranjera
function odbc foreignkeys $pk_table	la tabla de la clave primaria
function resource odbc foreignkeys	devuelve un identificador de resultado odbc o false en caso de error
function resource odbc foreignkeys resource $connection_id string $pk_qualifier string $pk_owner string $pk_table string $fk_qualifier string $fk_owner string $fk_table	recupera informaci&oacute;n de una lista de claves extranjeras
function odbc free result $result_id	el identificador de resultado
function bool odbc free result	siempre devuelve true
function bool odbc free result resource $result_id	liberar los recursos asociados con un resultado
function odbc gettypeinfo $data_type	el tipo de datos el cuál se puede usar para restringir la información a un único tipo de datos
function odbc gettypeinfo $connection_id	el conector identificador odbc ver odbc_connect() para más información
function resource odbc gettypeinfo	devuelve un identificador de resultado odbc o false si se produjo un error
function resource odbc gettypeinfo resource $connection_id int $data_type	recupera informaci&oacute;n sobre los tipos de datos soportados por la fuente de datos
function odbc longreadlen $length	el número de bytes devueltos a php está controlado por el parámetro length
function odbc longreadlen $result_id	el identificador de resultado
function bool odbc longreadlen	devuelve true en caso de éxito o false en caso de error
function bool odbc longreadlen resource $result_id int $length	manejo de columnas long
function odbc num rows $result_id	el identificador de resultado devuelto por odbc_exec()
function int odbc num rows	devuelve el número de filas de un resultado odbc
function int odbc num rows resource $result_id	n&uacute;mero de filas de un resultado
function odbc prepare $query_string	la declaración de cadena de consulta que va a ser preparada
function odbc prepare $connection_id	el conector identificador odbc ver odbc_connect() para más información
function resource odbc prepare	devuelve un identificador de resultado odbc si el comando sql se preparó con éxito
function resource odbc prepare resource $connection_id string $query_string	prepara una declaraci&oacute;n para su ejecuci&oacute;n
function odbc procedurecolumns $owner	el propietario
function odbc procedurecolumns $column	la columna
function odbc procedurecolumns $proc	el procedimiento
function odbc procedurecolumns $qualifier	el cualificador
function odbc procedurecolumns $connection_id	el conector identificador odbc ver odbc_connect() para más información
function resource odbc procedurecolumns	devuelve una lista de parámetros de entrada y de salida así como las columnas que componen el conjunto de resultados para los procedimientos especificados
function resource odbc procedurecolumns resource $connection_id	recuperar informaci&oacute;n sobre los par&aacute;metros a procedimientos
function odbc procedures $owner	el propietario
function odbc procedures $name	el nombre
function odbc procedures $qualifier	el cualificador
function odbc procedures $connection_id	el conector identificador odbc ver odbc_connect() para más información
function resource odbc procedures	devuelve un identificador de resultaod odbc que contiene la información o false en caso de error
function resource odbc procedures resource $connection_id	obtener la lista de procedimientos almacenados en una fuente de datos espec&iacute;fica
function odbc result $result_id	el resource odbc
function odbc result $field	el nombre de campo a ser traído
function mixed odbc result	devuelve los contenidos de cadena del campo false si se produjo un error null para datos null o true para datos binarios
function mixed odbc result resource $result_id mixed $field	obtener informaci&oacute;n de resultado
function odbc specialcolumns $type	cuando el tipo de argumento es sql_best_rowid odbc_specialcolumns() devuelve la columna o columnas que identifican de forma única cada fila de la tabla
function odbc specialcolumns $qualifier	el cualificador
function odbc specialcolumns $connection_id	el conector identificador odbc ver odbc_connect() para más información
function odbc specialcolumns $table	la tabla
function odbc specialcolumns $owner	el propietario
function odbc specialcolumns $nullable	la opción nullable
function odbc specialcolumns $scope	el alcance el cual ordena el conjunto de resultados
function resource odbc specialcolumns	devuelve un identificador de resultado odbc o false si se produjo un fallo
function resource odbc specialcolumns resource $connection_id int $type string $qualifier string $owner string $table int $scope int $nullable	recupera columnas especiales
function odbc tableprivileges $owner	el propietario
function odbc tableprivileges $name	el nombre
function odbc tableprivileges $qualifier	el cualificador
function odbc tableprivileges $connection_id	el conector identificador odbc ver odbc_connect() para más información
function resource odbc tableprivileges	un identificador de resultado odbc o false en caso de error
function resource odbc tableprivileges resource $connection_id string $qualifier string $owner string $name	lista las tablas y los privilegios asociados con cada tabla
function openssl csr export to file $notext	el parámetro opcional notext afecta la verbosidad de la salida; si es false se incluirá información adicional en la salida entendible por seres humanos
function openssl csr export to file $outfilename	ruta del archivo de salida
function bool openssl csr export to file	devuelve true en caso de éxito o false en caso de error
function bool openssl csr export to file resource $csr string $outfilename bool $notext	exporta una csr a un archivo
function openssl csr export $notext	el parámetro opcional notext afecta la verbosidad de la salida; si es false se incluirá información adicional en la salida entendible por seres humanos
function bool openssl csr export	devuelve true en caso de éxito o false en caso de error
function bool openssl csr export resource $csr string $out bool $notext	exporta una csr como una cadena
function openssl csr new $extraattribs	extraattribs se usa para especificar opciones de configuración adicionales para la csr
function openssl csr new $configargs	por defecto la información de su sistema openssl
function openssl csr new $privkey	privkey podría estar establecida a una clave privada que fue generada previamente por openssl_pkey_new() o de otro modo obtenida desde la otra familia de funciones openssl_pkey)
function openssl csr new $dn	el nombre distinguido que se va a usar en el certificado
function mixed openssl csr new	devuelve la csr
function mixed openssl csr new array $dn resource $privkey array $configargs array $extraattribs	genera una csr
function openssl csr sign $days	days especifica la duración durante la cuál el certificado generado será válido en días
function openssl csr sign $serial	el número de serie opcional del certificado emitido
function openssl csr sign $csr	una csr previamente generada por openssl_csr_new()
function openssl csr sign $priv_key	priv_key es la clave privada que se corresponde con cacert
function openssl csr sign $configargs	se puede ajustar la firma de la csr mediante configargs
function openssl csr sign $cacert	el certificado generado será firmado por cacert
function resource openssl csr sign	devuelve un recurso de certificado x509 si se tuvo éxito false si falló
function resource openssl csr sign mixed $csr mixed $cacert mixed $priv_key int $days array $configargs int $serial	firmar una csr con otro certificado o autofirmar y generar un certificado
function openssl decrypt $data	los datos
function openssl decrypt $method	el método de cifrado
function openssl decrypt $iv	un vector de inicialización no null
function openssl decrypt $options	options puede ser una de las constantes openssl_raw_data openssl_zero_padding
function openssl decrypt $password	la contraseña
function string openssl decrypt	la cadena desencriptada si se tuvo éxito o false en caso de error
function string openssl decrypt string $data string $method string $password int $options string $iv	desencripta datos
function openssl encrypt $data	los datos
function openssl encrypt $method	el método de cifrado
function openssl encrypt $iv	un vector de inicialización no null
function openssl encrypt $options	options puede ser una de las constantes openssl_raw_data openssl_zero_padding
function openssl encrypt $password	la contraseña
function string openssl encrypt	devuelve la cadena encriptada si se tuvo éxito o false en caso de error
function string openssl encrypt string $data string $method string $password int $options string $iv	encripta datos
function string openssl error string	devuelve una cadena de mensaje de error o false si no hay más mensajes de error a devolver
function string openssl error string	devolver un mensaje de error openssl
function array openssl get cert locations	devuelve un array con las ubicaciones de certificados disponibles
function array openssl get cert locations	obtener las ubicaciones de certificados disponibles
function openssl get md methods $aliases	establecer a true si los alias del método de resumen deberían incluirse dentro del array devuelto
function array openssl get md methods	un array de los métodos de resumen disponibles
function array openssl get md methods bool $aliases	obtener los m&eacute;todos de resumen disponibles
function openssl pkcs12 export $pass	contraseña de encriptación para desbloquear el archivo pkcs#12
function openssl pkcs12 export $x509	ver parámetros key / certificate para un listado de valores válidos
function openssl pkcs12 export $out	si se tiene éxito ésto contendrá el pkcs#12
function openssl pkcs12 export $priv_key	el componente clave privada del archivo pkcs#12
function bool openssl pkcs12 export	devuelve true en caso de éxito o false en caso de error
function bool openssl pkcs12 export mixed $x509 string $out mixed $priv_key string $pass array $args	exporta un archivo de almac&eacute;n de certificado compatible con pkcs#12 a una variable
function openssl pkcs7 encrypt $recipcerts	un único certificado x
function openssl pkcs7 encrypt $flags	flags se puede usar para especificar las opciones que afectan al proceso de codificación - véase constantes pkcs7
function openssl pkcs7 encrypt $cipherid	una de las constants de cipher
function openssl pkcs7 encrypt $headers	headers es una matriz de cabeceras que serán añadidas delante de la información después de que haya sido encriptada
function bool openssl pkcs7 encrypt	devuelve true en caso de éxito o false en caso de error
function bool openssl pkcs7 encrypt string $infile string $outfile mixed $recipcerts array $headers int $flags int $cipherid	encriptar un mensaje s / mime
function openssl pkcs7 sign $flags	flags se puede usar para alterar la salida - véase constantes pkcs7
function openssl pkcs7 sign $extracerts	extracerts especifica el nombre de un archivo que contiene un grupo de certificados extra para incluir en la firma que puede ser usado para por ejemplo ayudar al destinatario a verificar el certificado que se usó
function openssl pkcs7 sign $headers	headers es una matriz de cabeceras que serán añadidas delante de la información después de que se haya firmado véase openssl_pkcs7_encrypt() para más información acerca del formato de este parámetro
function bool openssl pkcs7 sign	devuelve true en caso de éxito o false en caso de error
function bool openssl pkcs7 sign string $infilename string $outfilename mixed $signcert mixed $privkey array $headers int $flags string $extracerts	firma un mensaje s / mime
function openssl pkcs7 verify $flags	flags se puede usar para indicar cómo se verifica la firma - véase constantes pkcs7 para más información
function openssl pkcs7 verify $filename	ruta del mensaje
function openssl pkcs7 verify $extracerts	si se especifica extracerts éste es el nombre de archivo de un archivo que contiene un grupo de certificados que se van a usar como ac que no sea de confianza
function openssl pkcs7 verify $content	se puede especificar un nombre de archivo con content que será rellenado con la información verificada pero con la información de la firma eliminada
function openssl pkcs7 verify $outfilename	si se especifica outfilename debería se una cadena que contiene el nombre de un archivo en el que los certificados de las personas que firmaron los mensajes serán guardados en formato pem
function openssl pkcs7 verify $cainfo	si se especifica cainfo debería contener información sobre los certificados de la ac de confianza para usarla en el proceso de verificación - véase verificación de certificados para más información acerca de este parámetro
function mixed openssl pkcs7 verify	devuelve true si la firma es verificada false si no es correcta el mensaje ha sido interferido o el certificado de firma no es válido o -1 si se produjo un error
function mixed openssl pkcs7 verify string $filename int $flags string $outfilename array $cainfo string $extracerts string $content	verifica la firma de un mensaje s / mime firmado
function openssl pkey export to file $passphrase	la clave se puede proteger opcionalmente con una passphrase
function openssl pkey export to file $configargs	configargs se puede usar para ajustar el proceso de exportación especificando y / o sobrescribiendo las opciones del archivo de configuración de openssl
function openssl pkey export to file $outfilename	ruta del archivo de salida
function bool openssl pkey export to file	devuelve true en caso de éxito o false en caso de error
function bool openssl pkey export to file mixed $key string $outfilename string $passphrase array $configargs	obtiene una representaci&oacute;n de una clave exportable a un archivo
function openssl pkey export $passphrase	la clave es protegida opcionalmente mediante passphrase
function openssl pkey export $configargs	configargs se puede usar para ajustar el proceso de exportación especificando y / o sobrescribiendo las opciones del archivo de configuración de openssl
function bool openssl pkey export	devuelve true en caso de éxito o false en caso de error
function bool openssl pkey export mixed $key string $out string $passphrase array $configargs	obtiene una representaci&oacute;n de una clave exportable a una cadena
function openssl pkey get details $key	un recurso que contiene la clave
function array openssl pkey get details	devuelve una matriz con los detalles de la clave si se tuvo éxito o false si falló
function array openssl pkey get details resource $key	devuelve una matriz con los detalles de la clave
function openssl pkey get private $passphrase	el parámetro opcional passphrase se debe usar si la clave especificada está encriptada protegida por una frase de contraseña
function openssl pkey get private $key	key puede ser una de las siguientes: una cadena con el formato file: / / ruta / al / archivo
function resource openssl pkey get private	devuelve un identificador de clave positivo si se tuvo éxito o false si se produjo un error
function resource openssl pkey get private mixed $key string $passphrase	obtener una clave privada
function openssl pkey new $configargs	se puede ajustar la generación de la clave tal como especificando el número de bits usando configargs
function resource openssl pkey new	devuelve un identificador de recurso para la clave privada si se tuvo éxito o false si se produjo un error
function resource openssl pkey new array $configargs	genera una clave privada nueva
function openssl private decrypt $key	key debe ser la clave privada correspondiente a la usada para encriptar la información
function openssl private decrypt $padding	padding puede ser openssl_pkcs1_padding openssl_sslv23_padding openssl_pkcs1_oaep_padding openssl_no_padding
function bool openssl private decrypt	devuelve true en caso de éxito o false en caso de error
function bool openssl private decrypt string $data string $decrypted mixed $key int $padding	desencripta informaci&oacute;n con la clave privada
function openssl private encrypt $padding	padding puede ser openssl_pkcs1_padding openssl_no_padding
function bool openssl private encrypt	devuelve true en caso de éxito o false en caso de error
function bool openssl private encrypt string $data string $crypted mixed $key int $padding	encripta informaci&oacute;n con la clave privada
function openssl public encrypt $key	la clave pública
function openssl public encrypt $padding	padding puede ser openssl_pkcs1_padding openssl_sslv23_padding openssl_pkcs1_oaep_padding openssl_no_padding
function openssl public encrypt $crypted	esto contendrá el resultado de la encriptación
function bool openssl public encrypt	devuelve true en caso de éxito o false en caso de error
function bool openssl public encrypt string $data string $crypted mixed $key int $padding	encripta informaci&oacute;n con una clave p&uacute;blica
function openssl random pseudo bytes $length	la longitud de la cadena de bytes desada
function openssl random pseudo bytes $crypto_strong	si se pasó en la función mantendrá un valor booleano value que determina si el algoritmo usado fue criptográficamente fuerte p
function string openssl random pseudo bytes	devuelve el string de bytes generado si se tuvo éxito o false en caso de error
function string openssl random pseudo bytes int $length bool $crypto_strong	genera una cadena de bytes pseudo-aleatoria
function openssl seal $method	el método de cifrado
function openssl seal $data	los datos a sellar
function openssl seal $sealed_data	los datos sellados
function openssl seal $env_keys	un array de claves encriptadas
function openssl seal $pub_key_ids	un array de identificadores de recursos de clave pública
function int openssl seal	devuelve la longitud de la información sellada si se tuvo éxito o false si se produjo un error
function int openssl seal string $data string $sealed_data array $env_keys array $pub_key_ids string $method	sellar encriptar informaci&oacute;n
function openssl spki export challenge $spkac	una clave pública y desafío firmados válidos
function string openssl spki export challenge	devuelve el string del desafío asociado o null en caso de fallo
function string openssl spki export challenge string $spkac	exporta el desaf&iacute;o asociados con una clave p&uacute;blica y desaf&iacute;o firmados
function openssl verify $data	el string de datos utilizado anteriormente para generar la firma
function openssl verify $pub_key_id	resource - una clave devuelta por openssl_get_publickey() string - una clave con formato pem; p
function openssl verify $signature_alg	int - uno de estos algoritmos de firma
function openssl verify $signature	un string binario puro generado por openssl_sign() o por medios similares
function int openssl verify	devuelve 1 si la firma es correcta 0 si es incorrecta y -1 si se produjo un error
function int openssl verify string $data string $signature mixed $pub_key_id mixed $signature_alg	verificar una firma
function openssl x509 check private key $key	la clave privada
function openssl x509 check private key $cert	el certificado
function bool openssl x509 check private key	devuelve true si key el la clave privada que se conrresponde con cert o false si no
function bool openssl x509 check private key mixed $cert mixed $key	comprueba si una clave privada se corresponde a un certificado
function openssl x509 export to file $x509	ver parámetros key / certificate para un listado de valores válidos
function openssl x509 export to file $notext	el parámetro opcional notext afecta la verbosidad de la salida; si es false se incluirá información adicional en la salida entendible por seres humanos
function openssl x509 export to file $outfilename	ruta del archivo de salida
function bool openssl x509 export to file	devuelve true en caso de éxito o false en caso de error
function bool openssl x509 export to file mixed $x509 string $outfilename bool $notext	exporta un certificado a un archivo
function void openssl x509 free resource $x509cert	liberar un recurso de certificado
function openssl x509 parse $shortnames	shortnames controla cómo se indexa la información en la matriz - si shortnames es true por defecto los campos serán indexados con el nombre corto si no se usará el nombre largo - p
function array openssl x509 parse	la estructura de la información devuleta no está deliberadamente documentada aún ya que todavía está sujeta a cambios
function array openssl x509 parse mixed $x509cert bool $shortnames	analiza un certificado x509 y devuelve la informaci&oacute;n como un matriz
function resource openssl x509 read	devuelve un identificador de recurso si se tuvo éxito o false en caso de error
function resource openssl x509 read mixed $x509certdata	analiza un certificado x
function ord $string	un caracter
function int ord	devuelve el valor ascii de un entero
function int ord string $string	devuelve el valor ascii de un caracter
function output add rewrite var $name	el nombre de la variable
function output add rewrite var $value	el valor de la variable
function bool output add rewrite var	devuelve true en caso de éxito o false en caso de error
function bool output add rewrite var string $name string $value	aladir valores al mecanismo de reescritura de urls
function bool output reset rewrite vars	devuelve true en caso de éxito o false en caso de error
function bool output reset rewrite vars	restablecer los valores del mecanismo de reescritura de urls
function override function $function_name	la función para pasar por alto
function override function $function_code	el nuevo código para la función
function override function $function_args	los argumentos de la función como una cadena separada por comas
function bool override function	devuelve true en caso de éxito o false en caso de error
function bool override function string $function_name string $function_args string $function_code	pasa por alto funciones integradas
function pack $format	la cadena format consiste en códigos de formato seguidos de un argumento opcional de repetición
function string pack	devuelve una cadena binaria que contiene información
function string pack string $format mixed $args	empaqueta informaci&oacute;n a una cadena binaria
function parse str $str	el string de entrada
function parse str $arr	si el segundo parámetro arr está presente es su lugar las variables serán almacenadas en esta variable como elementos de array
function void parse str string $str array $arr	convierte el string en variables
function parse url $component	especifique uno de php_url_scheme php_url_host php_url_port php_url_user php_url_pass php_url_path php_url_query o php_url_fragment para recibir solo un componente url específico como un valor tipo string excepto cuando se da php_url_port en cuyo caso el valor de retorno será un integer
function parse url $url	la url a analizar
function mixed parse url	sobre urls seriamente malformadas parse_url() puede devolver false
function mixed parse url string $url int $component	analiza un url y devuelve sus componentes
function password get info $hash	un hash creado por password_hash()
function array password get info	devuelve un array asociativo con tres elementos: algo que coincidirá con una constante de algoritmo de contraseñas algoname que tiene el nombre legible por humanos del algoritmo options que incluye las opciones proporcionadas al llamar a password_hash()
function array password get info string $hash	devuelve informaci&oacute;n sobre el hash proporcionado
function password hash $password	la contraseña del usuario
function password hash $options	un array asociativo de opciones
function password hash $algo	a constante del algoritmo de contraseñas indicando qué algoritmo utilizar para crear el hash de la contraseña
function string password hash	devuelve el hash de la contraseña o false en caso de error
function string password hash string $password integer $algo array $options	crea un hash de contrase&ntilde;a
function password needs rehash $hash	un hash creado por password_hash()
function password needs rehash $options	un array asociativo de opciones
function password needs rehash $algo	a constante del algoritmo de contraseñas indicando qué algoritmo utilizar para crear el hash de la contraseña
function boolean password needs rehash	devuelve true si el hash debe ser generado de nuevo para coincidir con la información pasada a algo y options o false en cualquier otro caso
function boolean password needs rehash string $hash integer $algo array $options	comprueba si el hash facilitado coincide con las opciones proporcionadas
function password verify $hash	un hash creado por password_hash()
function password verify $password	la contraseña del usuario
function boolean password verify	devuelve true si la contraseña y el hash coinciden o false de lo contrario
function boolean password verify string $password string $hash	comprueba que la contrase&ntilde;a coincida con un hash
function pclose $handle	el puntero al archivo debe ser válido y debe haber sido devuelto por una llamada exitosa a popen()
function int pclose	devuelve el estado de terminación del proceso que se estaba ejecutando
function int pclose resource $handle	cierra un proceso de un puntero a un archivo
function bool PDF add launchlink resource $pdfdoc float $llx float $lly float $urx float $ury string $filename	a&ntilde;adir una anotaci&oacute;n de lanzamiento a la p&aacute;gina actual obsoleta
function bool PDF add locallink resource $pdfdoc float $lowerleftx float $lowerlefty float $upperrightx float $upperrighty int $page string $dest	a&ntilde;adir una anotaci&oacute;n de enlace a la p&aacute;gina actual obsoleta
function bool PDF add nameddest resource $pdfdoc string $name string $optlist	crear un destino con nombre
function int PDF add table cell resource $pdfdoc int $table int $column int $row string $text string $optlist	a&ntilde;adir una celda a una tabla nueva o ya existente
function int PDF add textflow resource $pdfdoc int $textflow string $text string $optlist	crear un textflow o a&ntilde;adir texto al textflow existente
function bool PDF add weblink resource $pdfdoc float $lowerleftx float $lowerlefty float $upperrightx float $upperrighty string $url	a&ntilde;adir un enlace web a la p&aacute;gina actual obsoleta
function bool PDF arc resource $p float $x float $y float $r float $alpha float $beta	dibujar un segmento de arco circular en el sentido contrario a las agujas del reloj
function bool PDF arcn resource $p float $x float $y float $r float $alpha float $beta	dibujar un segmento de arco circular en el sentido de las agujas del reloj
function int PDF begin document resource $pdfdoc string $filename string $optlist	crear un nuevo archivo pdf
function bool PDF begin glyph resource $pdfdoc string $glyphname float $wx float $llx float $lly float $urx float $ury	iniciar la definici&oacute;n de un glifo para una fuente type 3
function bool PDF begin page resource $pdfdoc float $width float $height	iniciar una nueva p&aacute;gina obsoleta
function int PDF begin pattern resource $pdfdoc float $width float $height float $xstep float $ystep int $painttype	iniciar una definici&oacute;n de patr&oacute;n
function bool PDF circle resource $pdfdoc float $x float $y float $r	dibujar un c&iacute;rculo
function bool PDF clip resource $p	recortar el trazado actual
function bool PDF close image resource $p int $image	cerrar un imagen
function bool PDF close pdi page resource $p int $page	cerrar un gestor de p&aacute;gina
function bool PDF close pdi resource $p int $doc	cerrar el documento pdf de entrada obsoleta
function bool PDF close resource $p	cerrar un recurso pdf obsoleta
function bool PDF closepath stroke resource $p	cerrar y contornear un trazado
function bool PDF closepath resource $p	cerrar el trazado actual
function bool PDF concat resource $p float $a float $b float $c float $d float $e float $f	concatenar una matriz a la ctm
function int PDF create 3dview resource $pdfdoc string $username string $optlist	crear una vista 3d
function bool PDF create annotation resource $pdfdoc float $llx float $lly float $urx float $ury string $type string $optlist	crear una anotaci&oacute;n rectangular
function int PDF create bookmark resource $pdfdoc string $text string $optlist	crear un marcador
function bool PDF create fieldgroup resource $pdfdoc string $name string $optlist	crear un grupo de campos de formulario
function bool PDF create pvf resource $pdfdoc string $filename string $data string $optlist	crear un archivo virtual pdflib
function int PDF create textflow resource $pdfdoc string $text string $optlist	crear un objeto textflow
function bool PDF curveto resource $p float $x1 float $y1 float $x2 float $y2 float $x3 float $y3	dibujar una curva de b&eacute;zier
function int PDF define layer resource $pdfdoc string $name string $optlist	crear una definici&oacute;n de capa
function int PDF delete pvf resource $pdfdoc string $filename	borrar un archivo pdflib virtual
function bool PDF delete table resource $pdfdoc int $table string $optlist	borrar un objeto tabla
function bool PDF delete textflow resource $pdfdoc int $textflow	borrar un objeto textflow
function bool PDF delete resource $pdfdoc	borrar un objeto pdflib
function bool PDF end font resource $pdfdoc	finalizar la definici&oacute;n de una fuente type 3
function bool PDF end layer resource $pdfdoc	desactivar todas las capas activas
function bool PDF end page ext resource $pdfdoc string $optlist	finalizar una p&aacute;gina
function bool PDF end page resource $p	finalizar un p&aacute;gina
function bool PDF end pattern resource $p	finalizar un patr&oacute;n
function bool PDF end template resource $p	finalizar una plantilla
function int PDF fill imageblock resource $pdfdoc int $page string $blockname int $image string $optlist	rellenar un bloque de imagen con informaci&oacute;n variable
function int PDF fill pdfblock resource $pdfdoc int $page string $blockname int $contents string $optlist	rellenar un bloque pdf con informaci&oacute;n variable
function bool PDF fill stroke resource $p	rellenar y contornear un trazado
function int PDF fill textblock resource $pdfdoc int $page string $blockname string $text string $optlist	rellenar un bloque de texto con infomaci&oacute;n variable
function int PDF findfont resource $p string $fontname string $encoding int $embed	preparar una fuente para un uso posterior obsoleta
function bool PDF fit pdi page resource $pdfdoc int $page float $x float $y string $optlist	colocar una p&aacute;gina pdf importada
function string PDF fit table resource $pdfdoc int $table float $llx float $lly float $urx float $ury string $optlist	colocar una tabla en una p&aacute;gina
function string PDF fit textflow resource $pdfdoc int $textflow float $llx float $lly float $urx float $ury string $optlist	formatear un textflow en un &aacute;rea rectangular
function bool PDF fit textline resource $pdfdoc string $text float $x float $y string $optlist	colocar una simple l&iacute;nea de texto
function string PDF get apiname resource $pdfdoc	obtener el nombre de una funci&oacute;n api que fall&oacute;
function string PDF get buffer resource $p	obtener el buffer de salida de pdf
function string PDF get errmsg resource $pdfdoc	obtener el texto del error
function int PDF get majorversion	obtener el n&uacute;mero de la versi&oacute;n mayor obsoleta
function int PDF get minorversion	obtener el n&uacute;mero de versi&oacute;n menor obsoleta
function string PDF get pdi parameter resource $p string $key int $doc int $page int $reserved	obtener un par&aacute;metro de cadena de un pdi obsoleta
function float PDF get pdi value resource $p string $key int $doc int $page int $reserved	obtener un par&aacute;metro n&uacute;merico de un pdi obsoleta
function float PDF info font resource $pdfdoc int $font string $keyword string $optlist	preguntar informaci&oacute;n detallada acerca de una fuente cargada
function float PDF info matchbox resource $pdfdoc string $boxname int $num string $keyword	preguntar sobre la informaci&oacute;n de un matchbox
function float PDF info table resource $pdfdoc int $table string $keyword	recuperar la informaci&oacute;n de una tabla
function float PDF info textflow resource $pdfdoc int $textflow string $keyword	preguntar por el estado de un textflow
function float PDF info textline resource $pdfdoc string $text string $keyword string $optlist	llevar a cabo el formateo textline y preguntar por las m&eacute;tricas
function int PDF load 3ddata resource $pdfdoc string $filename string $optlist	cargar un modelo 3d
function int PDF load image resource $pdfdoc string $imagetype string $filename string $optlist	abrir un archivo de imagen
function bool PDF moveto resource $p float $x float $y	establecer el punto actual
function resource PDF new	crear un objeto pdflib
function int PDF open ccitt resource $pdfdoc string $filename int $width int $height int $BitReverse int $k int $Blackls1	abrir una imagen ccitt en bruto obsoleta
function bool PDF open file resource $p string $filename	crear un archivo pdf obsoleta
function int PDF open image file resource $p string $imagetype string $filename string $stringparam int $intparam	leer una imagen desde un archivo obsoleta
function int PDF open pdi document resource $p string $filename string $optlist	preparar un documento pdi
function float PDF pcos get number resource $p int $doc string $path	obtener el valor de una ruta pcos con el tipo number o boolean
function string PDF pcos get stream resource $p int $doc string $optlist string $path	obtener el contenido de una ruta pcos con el tipo stream fstream o string
function string PDF pcos get string resource $p int $doc string $path	obtener el valor de una ruta pcos con el tipo name string o boolean
function bool PDF place image resource $pdfdoc int $image float $x float $y float $scale	colocar una imagen en una p&aacute;gina obsoleta
function int PDF process pdi resource $pdfdoc int $doc int $page string $optlist	procesar un documento pdf importado
function bool PDF rect resource $p float $x float $y float $width float $height	dibujar un rect&aacute;ngulo
function bool PDF resume page resource $pdfdoc string $optlist	reanudar un p&aacute;gina
function bool PDF rotate resource $p float $phi	rotar el sistema de coordenadas
function bool PDF save resource $p	guardar el estado de gr&aacute;ficos
function bool PDF scale resource $p float $sx float $sy	escalar el sistema de coordenadas
function bool PDF set layer dependency resource $pdfdoc string $type string $optlist	definir la relaci&oacute;n entre capas
function bool PDF set parameter resource $p string $key string $value	establecer un par&aacute;metro de cadena
function bool PDF set text pos resource $p float $x float $y	establecer la posici&oacute;n del texto
function bool PDF setcolor resource $p string $fstype string $colorspace float $c1 float $c2 float $c3 float $c4	establecer el color de relleno y contorno
function bool PDF setdash resource $pdfdoc float $b float $w	establecer el patr&oacute;n de discontinuidad simple
function bool PDF setflat resource $pdfdoc float $flatness	establecer el par&aacute;metro flatness
function bool PDF setfont resource $pdfdoc int $font float $fontsize	establecer un fuente
function bool PDF setgray fill resource $p float $g	establecer el color de relleno a gris obsoleta
function bool PDF setlinecap resource $p int $linecap	establecer el par&aacute;metro linecap
function bool PDF setlinejoin resource $p int $value	establecer el par&aacute;metro linejoin
function bool PDF setmatrix resource $p float $a float $b float $c float $d float $e float $f	establecer la matriz de transformaci&oacute;n actual
function bool PDF setmiterlimit resource $pdfdoc float $miter	establecer el l&iacute;mite del inglete
function bool PDF setrgbcolor stroke resource $p float $red float $green float $blue	establecer los valores de color rgb del contorno obsoleta
function bool PDF setrgbcolor resource $p float $red float $green float $blue	establecer los valores de color rgb del relleno y del contorno obsoleta
function bool PDF shfill resource $pdfdoc int $shading	rellenar un &aacute;rea con sombreado
function bool PDF show xy resource $p string $text float $x float $y	imprimir un texto en una posici&oacute;n dada
function bool PDF show resource $pdfdoc string $text	imrpimir un texto en la posici&oacute;n actual
function bool PDF skew resource $p float $alpha float $beta	inclinar el sistema de coordenadas
function float PDF stringwidth resource $p string $text int $font float $fontsize	devolver el ancho de un texto
function bool PDF stroke resource $p	contornear un trazado
function bool PDF suspend page resource $pdfdoc string $optlist	suspender una p&aacute;gina
function bool PDF translate resource $p float $tx float $ty	establecer el origen del sistema de coordenadas
function string PDF utf16 to utf8 resource $pdfdoc string $utf16string	convertir una cadena de utf-16 a utf-8
function string PDF utf32 to utf16 resource $pdfdoc string $utf32string string $ordering	convertir una cadena de utf-32 a utf-16
function string PDF utf8 to utf16 resource $pdfdoc string $utf8string string $ordering	convertir una cadena de utf-8 a utf-16
function resource pfsockopen string $hostname int $port int $errno string $errstr float $timeout	abre internet persistente o conexi&oacute;n de socket de dominio unix
function pg affected rows $result	el recurso de resultados de la consulta postgresql o postgresql query result resource es devuelto por pg_query() pg_query_params() o pg_execute() entre otros
function int pg affected rows	el número de filas afectadas por la consulta
function int pg affected rows resource $result	devuelve el n&uacute;mero de registros afectados filas
function pg cancel query $connection	recurso de conexión de base de datos postgresql
function bool pg cancel query	devuelve true en caso de éxito o false en caso de error
function bool pg cancel query resource $connection	cancelar una consulta as&iacute;ncrona
function pg client encoding $connection	recurso de conexión de base de datos postgresql
function string pg client encoding	la codificación del cliente o false en caso de error
function string pg client encoding resource $connection	obtiene la codificaci&oacute;n del cliente
function pg close $connection	es el recurso de conexión de base de datos postgresql
function bool pg close	devuelve true en caso de éxito o false en caso de error
function bool pg close resource $connection	cierra una conexi&oacute;n postgresql
function pg connect $connect_type	si pgsql_connect_force_new es pasado entonces una nueva conexión se crea incluso si el parámetro connection_string es idéntico a la conexión existente
function pg connect $connection_string	el connection_string puede estar vacío para usar todos los parámetros por defecto o este puede contener uno o más parámetros separados por espacios en blanco
function resource pg connect	el recurso de conexión postgresql en caso de éxito false en caso de fallo
function resource pg connect string $connection_string int $connect_type	abrir una conexi&oacute;n a postgresql
function pg convert $table_name	nombre de la tabla contra la que convertir los tipos
function pg convert $connection	recurso de conexión de base de datos postgresql
function pg convert $assoc_array	los datos que desea convertir
function pg convert $options	cualquier número de pgsql_conv_ignore_default pgsql_conv_force_null ó pgsql_conv_ignore_not_null ó una combinación de estos
function array pg convert	un array de valores convertidos o false en caso de error
function array pg convert resource $connection string $table_name array $assoc_array int $options	conviertir valores de un array asociativo en valores adcuados para sentencias sql
function pg copy from $connection	recurso de conexión a la base de datos postgresql
function pg copy from $delimiter	símbolo que serpara valores por cada campo en cada elemento del parámetro rows
function pg copy from $null_as	es como sql null anula los valores que son representados en el parámetro rows
function pg copy from $table_name	nombre de la tabla en la cual se copiará lo que provenga de rows
function pg copy from $rows	un array de datos a ser copiados dentro de table_name
function bool pg copy from	devuelve true en caso de éxito o false en caso de error
function bool pg copy from resource $connection string $table_name array $rows string $delimiter string $null_as	insertar registros dentro de una tabla desde un array
function pg copy to $null_as	como se representan los valores null en las rows
function pg copy to $table_name	nombre de la tabla de la que se copia los datos en rows
function pg copy to $delimiter	el símbolo que separa los valores para cada campo en cada elemento de las rows
function pg copy to $connection	recurso de conexión de base de datos postgresql
function array pg copy to	un array con un elemento por cada linea de datos copy
function array pg copy to resource $connection string $table_name string $delimiter string $null_as	copiar una tabla a un array
function pg dbname $connection	recurso de conexión de base de datos postgresql
function string pg dbname	un string que contiene el nombre de la base de datos de la connection o false en caso de error
function string pg dbname resource $connection	obtiene el nombre de la base de datos
function pg delete $assoc_array	un tipo array en los cuales están los nombres de los campos en la tabla table_name y cuyos valores son los valores de esos campos que están por ser borrados
function pg delete $table_name	nombre de la tabla de la cual se va a borrar las filas
function pg delete $options	cualquier número de pgsql_conv_force_null pgsql_dml_no_conv pgsql_dml_escape pgsql_dml_exec pgsql_dml_async o pgsql_dml_string combinadas
function pg delete $connection	recurso de conección a la base de datos postgresql
function mixed pg delete	devuelve true en caso de éxito o false en caso de error
function mixed pg delete resource $connection string $table_name array $assoc_array int $options	borra registros
function pg end copy $connection	recurso de conexión a la base de datos postgresql
function bool pg end copy	devuelve true en caso de éxito o false en caso de error
function bool pg end copy resource $connection	sincronizar con postgresql
function pg escape bytea $connection	recurso de conexión a la base de datos postgresql
function pg escape bytea $data	un tipo de dato string que contiene datos de texto o binarios para ser insertados dentro de una columna bytea
function string pg escape bytea	un tipo de dato string que contiene los datos que han sido escapados
function string pg escape bytea resource $connection string $data	escapar un string para insertarlo en un campo bytea
function pg escape identifier $connection	postgresql database connection resource
function pg escape identifier $data	a string containing text to be escaped
function string pg escape identifier	a string containing the escaped data
function string pg escape identifier resource $connection string $data	escape a identifier for insertion into a text field
function pg execute $params	una serie de valores de los parámetros para sustituir a los $1 $2 etc
function pg execute $stmtname	el nombre de la sentencia preparada para ejecutar
function pg execute $connection	recurso de conexión de base de datos postgresql
function resource pg execute	un recurso en el éxito del resultado de la consulta o false en caso de error
function resource pg execute resource $connection string $stmtname array $params	env&iacute;a una solicitud para ejecutar una setencia preparada con par&aacute;metros dados y espera el resultado
function pg lo close $result	postgresql large object lob resource returned by pg_lo_open()
function bool pg lo close	devuelve true en caso de éxito o false en caso de error
function bool pg lo close resource $large_object	close a large object
function pg lo truncate $size	the number of bytes to truncate
function pg lo truncate $large_object	postgresql large object lob resource returned by pg_lo_open()
function bool pg lo truncate	devuelve true en caso de éxito o false en caso de error
function bool pg lo truncate resource $large_object int $size	truncates a large object
function pg ping $connection	recurso de conexión de base de datos postgresql
function bool pg ping	devuelve true en caso de éxito o false en caso de error
function bool pg ping resource $connection	ping a conexi&oacute;n de base de datos
function string php ini loaded file	la ruta de php
function string php ini loaded file	recupera la ruta de acceso al archivo php
function string php ini scanned files	devuelve un string separado por comas de archivos
function string php ini scanned files	devuelve una lista de ficheros
function string php logo guid	devuelve phpe9568f34-d428-11d2-a769-00aa001acf42
function string php logo guid	obtiene el valor guid del logo
function php uname $mode	mode es un caracter simple que define qué información es devuelta: a : elegida por defecto
function string php uname	devuelve la descripción como una cadena de texto
function string php uname string $mode	devuelve informaci&oacute;n sobre el sistema operativo en que se est&aacute; ejecutando php
function phpcredits $flag	para generar una página de créditos personalizada puede utilizar el parámetro flag
function bool phpcredits	devuelve true en caso de éxito o false en caso de error
function bool phpcredits int $flag	imprime los cr&eacute;ditos de php
function phpversion $extension	un nombre de extensión opcional
function string phpversion	si el parámetro opcional extension ha sido especificado phpversion() devuelve la versión de la extensión o false si no hay información de versión asociada o la extensión no está habilitada
function string phpversion string $extension	obtiene la versi&oacute;n de php
function png2wbmp $pngname	ruta del archivo png
function png2wbmp $dest_width	ancho de la imagen de destino
function png2wbmp $dest_height	alto de la imagen de destino
function png2wbmp $threshold	valor de umbral entre 0 y 8 inclusive
function png2wbmp $wbmpname	ruta del archivo wbmp de destino
function bool png2wbmp	devuelve true en caso de éxito o false en caso de error
function bool png2wbmp string $pngname string $wbmpname int $dest_height int $dest_width int $threshold	convertir un archivo de imagen png a un archivo de imagen wbmp
function popen $mode	el modo
function popen $command	el comando
function resource popen	devuelve un puntero al fichero idéntico al devuelto por fopen() excepto que es uni-direccional sólo se puede usar para lectura o escritura y debe ser cerrado con pclose()
function resource popen string $command string $mode	abre un proceso de un puntero a un fichero
function posix access $file	el nombre del archivo a ser probado
function posix access $mode	una máscara consistente de uno o más de los valores posix_f_ok posix_r_ok posix_w_ok y posix_x_ok
function bool posix access	devuelve true en caso de éxito o false en caso de error
function bool posix access string $file int $mode	determinar la accesibilidad de un archivo
function string posix ctermid	en caso de terminación exitosa devuelve un string del nombre de ruta del terminal controlador actual
function string posix ctermid	obtener el nombre de la ruta del terminal controlador
function int posix get last error	devuelve el valor errno número de error definido por la última función posix que haya fallado
function int posix get last error	recuperar el n&uacute;mero de error establecido por la &uacute;ltima funci&oacute;n posix que ha fallado
function int posix geteuid	devuelve el id de usuario como un valor de tipo integer
function int posix geteuid	devolver el id efectivo de usuario del proceso actual
function int posix getgid	devuelve el id real de grupo como un valor de tipo integer
function int posix getgid	devuelve el id real de grupo del proceso actual
function posix getgrgid $gid	el id del grupo
function array posix getgrgid	los elementos del array devueltos son: el array de información de grupo elemento descripción name el elemento name contiene el nombre del grupo
function array posix getgrgid int $gid	devolver informaci&oacute;n sobre un grupo mediante un id de grupo
function array posix getgroups	devuelve un array de enteros que contiene los ids numéricos del conjunto de grupos del proceso actual
function array posix getgroups	devolver el conjunto de grupos del proceso actual
function posix getpgid $pid	el ide del proceso
function int posix getpgid	devuelve el identificador como valor de tipo integer
function int posix getpgid int $pid	obtener el id del grupo de procesos para un control de trabajo
function int posix getpgrp	devuelve el identificador como valor de tipo integer
function int posix getpgrp	devolver el identificador de grupo de proceso actual
function int posix getpid	devuelve el identificador como valor de tipo integer
function int posix getpid	devolver el identificador del proceso actual
function array posix getrlimit	devuelve un array asociativo de elementos para cada límite que es definido
function array posix getrlimit	devolver informaci&oacute;n sobre los l&iacute;mites de recursos del sistema
function posix getsid $pid	eñ identificador de proceso
function int posix getsid	devuelve el identificador como valor de tipo integer
function int posix getsid int $pid	obtener el sid actual del proceos
function int posix getuid	devuelve el id de usuario como valor de tipo integer
function int posix getuid	devolver el id real de usuario del proceso actual
function posix initgroups $base_group_id	normalmente el número de grupo del fichero de contraseñas
function posix initgroups $name	el usuario para el que se va a calcular la lista
function bool posix initgroups	devuelve true en caso de éxito o false en caso de error
function bool posix initgroups string $name int $base_group_id	calcular la lista de acceso al grupo
function posix kill $sig	una de las constantes de señales pcntl
function posix kill $pid	el identificador de proceso
function bool posix kill	devuelve true en caso de éxito o false en caso de error
function bool posix kill int $pid int $sig	enviar una se&ntilde;al a un proceso
function posix mkfifo $pathname	ruta al archivo fifo
function posix mkfifo $mode	el segundo parámetro modo tiene que ser definido en notación octal p
function bool posix mkfifo	devuelve true en caso de éxito o false en caso de error
function bool posix mkfifo string $pathname int $mode	crear un archivo especial fifo un pipe con nombre
function posix mknod $major	el identificador de kernel mayor del dispositivo necesario pasarlo al usar s_ifchr o s_ifblk
function posix mknod $minor	el identificador de kernel menor del dispositivo
function posix mknod $pathname	el fichero a crear
function posix mknod $mode	este parámetro se construye mediante un operador a nivel de bits or entre el tipo de fichero una de las siguientes constantes: posix_s_ifreg posix_s_ifchr posix_s_ifblk posix_s_ififo o posix_s_ifsock y los permisos
function bool posix mknod	devuelve true en caso de éxito o false en caso de error
function bool posix mknod string $pathname int $mode int $major int $minor	crear un fichero especial u ordinario posix
function posix setegid $gid	el id de grupo
function bool posix setegid	devuelve true en caso de éxito o false en caso de error
function bool posix setegid int $gid	establecer el gid efectivo del proceso actual
function posix seteuid $uid	el id de usuario
function bool posix seteuid	devuelve true en caso de éxito o false en caso de error
function bool posix seteuid int $uid	establecer el uid efectivo del proceso actual
function posix setgid $gid	el id de grupo
function bool posix setgid	devuelve true en caso de éxito o false en caso de error
function bool posix setgid int $gid	establecer el gid de proceso actual
function posix setpgid $pid	el id del proceso
function posix setpgid $pgid	el id de grupo de procesos
function bool posix setpgid	devuelve true en caso de éxito o false en caso de error
function bool posix setpgid int $pid int $pgid	establecer el id de grupo de procesos para el control de trabajo
function posix setrlimit $resource	la constante de límite de recurso conrrespondiente al límite a establecer
function posix setrlimit $softlimit	el límite blando en la unidad que el límite del recurso requiera o posix_rlimit_infinity
function posix setrlimit $hardlimit	el límite duro en la unidad que el límite del recurso requiera o posix_rlimit_infinity
function bool posix setrlimit	devuelve true en caso de éxito o false en caso de error
function bool posix setrlimit int $resource int $softlimit int $hardlimit	establecer los l&iacute;mites de recursos del sistema
function int posix setsid	devuelve un id de sesión o -1 si ocurrió algún error
function int posix setsid	hacer del proceso actual un l&iacute;der de sesi&oacute;n
function posix strerror $errno	un número de error posix devuelto por posix_get_last_error()
function string posix strerror	devuelve el mensaje de error como una cadena
function string posix strerror int $errno	recuperar el mensaje de error del sistema asociado con el errno dado
function posix ttyname $fd	el descriptor del fichero el cual se prevee que sea o un resource de fichero o un integer
function string posix ttyname	en caso de éxito devuelve un string de la ruta absoluta del fd
function string posix ttyname mixed $fd	determinar el nombre del dispositivo terminal
function array posix uname	returns un hash de cadena con información sobre el sistema
function array posix uname	obtener el nombre del sistema
function mixed preg filter	devuelve un array si el parámetro subject es un array de lo contrario devuelve un string
function mixed preg filter mixed $pattern mixed $replacement mixed $subject int $limit int $count	realiza una b&uacute;squeda y sustituci&oacute;n de una expresi&oacute;n regular
function preg grep $pattern	el patrón de búsqueda como cadena
function preg grep $input	la matriz de entrada
function preg grep $flags	si se establece a preg_grep_invert esta función devuelve los elementos de la matriz de entrada que no coinciden con pattern
function array preg grep	devuelve una matriz indexada usando las claves de la matriz input
function array preg grep string $pattern array $input int $flags	devuelve entradas de matriz que coinciden con el patr&oacute;n
function int preg last error	devuelve una de las siguientes constantes explicadas en su propia página : preg_no_error preg_internal_error preg_backtrack_limit_error vea también pcre
function int preg last error	devuelve el c&oacute;digo de error de la &uacute;ltima ejecuci&oacute;n de expresi&oacute;n regular de pcre
function preg match $subject	la cadena de entrada
function preg match $offset	normalmente la búsqueda comienza por el principio de la cadena objetivo
function preg match $flags	flags puede estar seguido de la siguiente bandera: preg_offset_capture si se pasa esta bandera por cada coincidencia producida el índice de la cadena añadida también será devuelto
function preg match $matches	si se proporciona matches entonces éste se llena con los resultados de la búsqueda
function preg match $pattern	el patrón de búsqueda como cadena
function preg match $PREG_OFFSET_CAPTURE	si se pasa esta bandera por cada coincidencia producida el índice de la cadena añadida también será devuelto
function int preg match	preg_match() devuelve 1 si pattern coincide con el subject dado 0 si no o false si ocurrió un error
function int preg match string $pattern string $subject array $matches int $flags int $offset	realiza una comparaci&oacute;n con una expresi&oacute;n regular
function preg quote $string	la cadena de entrada
function preg quote $delimiter	si se especifica el parámetro opcional delimiter éste también será escapado
function string preg quote	devuelve el string entrecomillado escapado
function string preg quote string $str string $delimiter	escapar caracteres en una expresi&oacute;n regular
function preg replace callback array $limit	las sustituciones máximas posibles para cada patrón en cada string de subject
function preg replace callback array $patterns_and_callbacks	un array asociativo con correspondencias entre patrones claves y retrollamadas valores
function preg replace callback array $subject	el sujeto
function preg replace callback array $count	la cuenta
function mixed preg replace callback array	preg_replace_callback_array() devuelve un array si el parámetro subject es un array o un string en caso contrario
function mixed preg replace callback array array $patterns_and_callbacks mixed $subject int $limit int $count	realizar una b&uacute;squeda y sustituci&oacute;n de expresi&oacute;n regular con retrollamadas
function preg replace callback $limit	las sustituciones máximas posibles por cada patrón en cada cadena subject
function preg replace callback $subject	la cadena o un array de cadenas a buscar y reemplazar
function preg replace callback $pattern	el patron de búsqueda
function preg replace callback $count	si se especifica esta variable será rellenada con el número de sustituciones hechas
function preg replace callback $callback	una llamada de retorno que será llamada y pasada a un array de elementos coincidentes en la cadena subject
function mixed preg replace callback	preg_replace_callback() devuelve un array si el parámetro subject es un array o por el contrario una cadena
function mixed preg replace callback mixed $pattern callable $callback mixed $subject int $limit int $count	realiza una b&uacute;squeda y sustituci&oacute;n de una expresi&oacute;n regular usando una llamada de retorno
function preg replace $pattern	el patrón de búsqueda
function preg replace $subject	la cadena o array de cadenas a buscar y sustituir
function preg replace $count	si se especifica esta variable será rellenada con el número de sustituciones hechas
function preg replace $replacement	la cadena o array de cadenas a reemplazar
function preg replace $limit	las sustituciones máximas posibles por cada patrón en cada cadena subject
function mixed preg replace	preg_replace() devuelve un array si el parámetro subject es un array o de lo contrario una cadena
function mixed preg replace mixed $pattern mixed $replacement mixed $subject int $limit int $count	realiza una b&uacute;squeda y sustituci&oacute;n de una expresi&oacute;n regular
function preg split $flags	flags puede ser una combinación de las siguientes banderas combinadas con el operador | a nivel de bits : preg_split_no_empty si se aplica esta bandera sólo los elementos no vacíos serán devueltos por preg_split()
function preg split $subject	el string de entrada
function preg split $PREG_SPLIT_NO_EMPTY	si se aplica esta bandera sólo los elementos no vacíos serán devueltos por preg_split()
function preg split $PREG_SPLIT_OFFSET_CAPTURE	si se aplica esta bandera por cada coincidencia producida el índice del string añadido también será devuelto
function preg split $PREG_SPLIT_DELIM_CAPTURE	si se aplica esta bandera las expresiones entre paréntesis en el patrón delimitador serán capturadas y devueltas
function preg split $limit	si se especifica son devueltos únicamente los substrings hasta limit con el resto del string colocado en el último substring
function preg split $pattern	el patrón de búsqueda dado como string
function array preg split	devuelve un array que contiene substrings de subject dividido por los límites coincidentes de pattern
function array preg split string $pattern string $subject int $limit int $flags	divide un string mediante una expresi&oacute;n regular
function print $arg	los datos de entrada
function int print	siempre devuelve 1
function int print string $arg	mostrar una cadena
function proc get status $process	el resource proc_open() que será evaluado
function array proc get status	un valor array con la información recolectada en caso de éxito y false si ocurre un error
function array proc get status resource $process	obtiene informaci&oacute;n sobre un proceso abierto por proc_open
function proc nice $increment	el valor de incremento del cambio de prioridad
function bool proc nice	devuelve true en caso de éxito o false en caso de error
function bool proc nice int $increment	modificar la prioridad del proceso actual
function proc open $cmd	el comando a ejecutar
function proc open $cwd	el directorio inicial de trabajo para el comando
function proc open $pipes	en un array indexado es establecerán los punteros de fichero que se corresponden con el fin de cualquier tuberia php que se haya creado
function proc open $other_options	permite especificar opciones adicionales
function proc open $descriptorspec	un array indexado donde la clave representa el número descriptor y el valor representa como php pasará que descriptor para que proceso hijo
function proc open $env	un array con las variables de entorno para el comando que será ejecutado o null para usar el mismo entorno como el del proceso php en curso
function resource proc open	devuelve un recurso representando el proceso cuando se haya terminado con él deberá ser liberado usando proc_close()
function resource proc open string $cmd array $descriptorspec array $pipes string $cwd array $env array $other_options	ejecuta un comando y abre un puntero de fichero para entrada / salida
function proc terminate $process	el recurso de proc_open() que será cerrado
function proc terminate $signal	este parámetro opcional solo es útil en sistemas operativos posix ; puede especificar una señal para enviar al proceso utilizando la llamada al sistema kill 2
function bool proc terminate	devuelve el estado de terminación del proceso que se ejecutó
function bool proc terminate resource $process int $signal	mata un proceso abierto mediante proc_open
function property exists $class	el nombre de la clase o un objeto de la clase a comprobar
function property exists $property	el nombre de la propiedad
function bool property exists	devuelve true si la propiedad existe false si no existe o null en caso de error
function bool property exists mixed $class string $property	comprueba si el objeto o la clase tienen una propiedad
function ps add bookmark $text	el texto usado para mostrar el marcapáginas
function ps add bookmark $psdoc	el identificador de recursos del fichero postscript como el devuelto por la función ps_new()
function ps add bookmark $open	si open es distinto de cero el visualizador de pdf mostrará el marcapáginas abierto
function ps add bookmark $parent	un marcapáginas previamente creado por esta función que se usa como padre del nuevo marcapáginas
function int ps add bookmark	el valor devuelto es una referencia al marcapáginas
function int ps add bookmark resource $psdoc string $text int $parent int $open	a&ntilde;adir un marcap&aacute;ginas a la p&aacute;gina actual
function ps add launchlink $filename	la ruta del programa a iniciar cuando se haga clic sobre el vínculo
function ps add launchlink $urx	la coordenada x de la esquina superior derecha
function ps add launchlink $lly	la coordenada y de la esquina inferior izquierda
function ps add launchlink $llx	la coordenada x de la esquina inferior izquierda
function ps add launchlink $psdoc	el identificador de recursos del fichero postscript como el devuelto por la función ps_new()
function ps add launchlink $ury	la coordenada y de la esquina superior derecha
function bool ps add launchlink	devuelve true en caso de éxito o false en caso de error
function bool ps add launchlink resource $psdoc float $llx float $lly float $urx float $ury string $filename	a&ntilde;adir un v&iacute;nculo que lance un fichero
function ps add locallink $dest	el parámetro dest determina cómo visualizar el documento
function ps add locallink $lly	la coordenada y de la esquina inferior izquierda
function ps add locallink $urx	la coordenada x de la esquina superior derecha
function ps add locallink $page	el número de la página mostrada al hacer clic en el vínculo
function ps add locallink $llx	la coordenada x de la esquina inferior izquierda
function ps add locallink $psdoc	el identificador de recursos del fichero postscript como el devuelto por la función ps_new()
function ps add locallink $ury	la coordenada y de la esquina superior derecha
function bool ps add locallink	devuelve true en caso de éxito o false en caso de error
function bool ps add locallink resource $psdoc float $llx float $lly float $urx float $ury int $page string $dest	a&ntilde;adir un v&iacute;nculo hacia una p&aacute;gina del mismo documento
function ps add weblink $urx	la coordenada x de la esquina superior derecha
function ps add weblink $lly	la coordenada y de la esquina inferior izquierda
function ps add weblink $llx	la coordenada x de la esquina inferior izquierda
function ps add weblink $psdoc	el identificador de recursos del fichero postscript como el devuelto por la función ps_new()
function ps add weblink $ury	la coordenada y de la esquina superior derecha
function ps add weblink $url	el url del hipervínculo a abrir cuando se haga clic en este vínculo p
function bool ps add weblink	devuelve true en caso de éxito o false en caso de error
function bool ps add weblink resource $psdoc float $llx float $lly float $urx float $ury string $url	a&ntilde;adir un v&iacute;nculo hacia una ubicaci&oacute;n web
function ps arc $beta	el ángulo final dado en grados
function ps arc $x	la coordenada x del punto medio del círculo
function ps arc $radius	el radio del círculo
function ps arc $alpha	el ángulo de inicio dado en grados
function ps arc $y	la coordenada y del punto medio del círculo
function ps arc $psdoc	el identificador de recursos del fichero postscript como el devuelto por la función ps_new()
function bool ps arc	devuelve true en caso de éxito o false en caso de error
function bool ps arc resource $psdoc float $x float $y float $radius float $alpha float $beta	dibujar un arco en el sentido contrario a las agujas del reloj
function ps arcn $beta	el ángulo final dado en grados
function ps arcn $x	la coordenada x del punto medio del círculo
function ps arcn $radius	el radio del círculo
function ps arcn $alpha	el ángulo de inicio dado en grados
function ps arcn $y	la coordenada y del punto medio del círculo
function ps arcn $psdoc	el identificador de recursos del fichero postscript como el devuelto por la función ps_new()
function bool ps arcn	devuelve true en caso de éxito o false en caso de error
function bool ps arcn resource $psdoc float $x float $y float $radius float $alpha float $beta	dibujar un arco en el sentido de las agujas del reloj
function ps begin page $psdoc	el identificador de recursos del fichero postscript como el devuelto por la función ps_new()
function ps begin page $width	el ancho de la página en píxeles p
function ps begin page $height	el alto de la página en píxeles p
function bool ps begin page	devuelve true en caso de éxito o false en caso de error
function bool ps begin page resource $psdoc float $width float $height	empezar una nueva p&aacute;gina
function ps begin pattern $width	el ancho del patrón en píxeles
function ps begin pattern $painttype	debe ser 1 ó 2
function ps begin pattern $height	el alto del patrón en píxeles
function ps begin pattern $psdoc	el identificador de recursos del fichero postscript como el devuelto por la función ps_new()
function ps begin pattern $x-step	la distancia en píxeles de la ubicación del patrón en dirección horizontal
function ps begin pattern $y-step	la distancia en píxeles de la ubicación del patrón en dirección vertical
function int ps begin pattern	el identificador del patrón o false en caso de error
function int ps begin pattern resource $psdoc float $width float $height float $xstep float $ystep int $painttype	iniciar un nuevo patr&oacute;n
function ps begin template $psdoc	el identificador de recursos del fichero postscript como el devuelto por la función ps_new()
function ps begin template $width	el ancho de la plantilla en píxeles
function ps begin template $height	el alto de la plantilla en píxeles
function int ps begin template	devuelve true en caso de éxito o false en caso de error
function int ps begin template resource $psdoc float $width float $height	iniciar una nueva plantilla
function ps clip $psdoc	el identificador de recursos del fichero postscript como el devuelto por la función ps_new()
function bool ps clip	devuelve true en caso de éxito o false en caso de error
function bool ps clip resource $psdoc	realizar un recorte utilizando el trazado actual
function ps close $psdoc	el identificador de recursos del fichero postscript como el devuelto por la función ps_new()
function bool ps close	devuelve true en caso de éxito o false en caso de error
function bool ps close resource $psdoc	cerrar un documento postscript
function ps closepath stroke $psdoc	el identificador de recursos del fichero postscript como el devuelto por la función ps_new()
function bool ps closepath stroke	devuelve true en caso de éxito o false en caso de error
function bool ps closepath stroke resource $psdoc	cerrar y contornear un trazado
function ps closepath $psdoc	el identificador de recursos del fichero postscript como el devuelto por la función ps_new()
function bool ps closepath	devuelve true en caso de éxito o false en caso de error
function bool ps closepath resource $psdoc	cerrar un trazado
function ps continue text $psdoc	el identificador de recursos del fichero postscript como el devuelto por la función ps_new()
function ps continue text $text	el texto a imprimir
function bool ps continue text	devuelve true en caso de éxito o false en caso de error
function bool ps continue text resource $psdoc string $text	continuar el texto en la siguiente l&iacute;nea
function ps end page $psdoc	el identificador de recursos del fichero postscript como el devuelto por la función ps_new()
function bool ps end page	devuelve true en caso de éxito o false en caso de error
function bool ps end page resource $psdoc	finalizar una p&aacute;gina
function ps end pattern $psdoc	el identificador de recursos del fichero postscript como el devuelto por la función ps_new()
function bool ps end pattern	devuelve true en caso de éxito o false en caso de error
function bool ps end pattern resource $psdoc	finalizar un patr&oacute;n
function ps end template $psdoc	el identificador de recursos del fichero postscript como el devuelto por la función ps_new()
function bool ps end template	devuelve true en caso de éxito o false en caso de error
function bool ps end template resource $psdoc	finalizar una plantilla
function ps fill stroke $psdoc	el identificador de recursos del fichero postscript como el devuelto por la función ps_new()
function bool ps fill stroke	devuelve true en caso de éxito o false en caso de error
function bool ps fill stroke resource $psdoc	rellenar y contornear el trazado actual
function ps fill $psdoc	el identificador de recursos del fichero postscript como el devuelto por la función ps_new()
function bool ps fill	devuelve true en caso de éxito o false en caso de error
function bool ps fill resource $psdoc	rellenar el trazado actual
function ps findfont $psdoc	el identificador de recursos del fichero postscript como el devuelto por la función ps_new()
function ps findfont $embed	si se establece a un valor > 0 la fuente será embebida en el documento
function ps findfont $fontname	el nombre de la fuente
function ps findfont $encoding	ps_findfont() intentará cargar el fichero pasado al parámetro encoding
function int ps findfont	devuelve el identificador de la fuente o cero en caso de error
function int ps findfont resource $psdoc string $fontname string $encoding bool $embed	cargar una fuente
function ps get value $psdoc	el identificador de recursos del fichero postscript como el devuelto por la función ps_new()
function ps get value $name	el nombre del valor
function ps get value $modifier	el parámetro modifier especifica el recurso por el que recuperar el valor
function float ps get value	devuelve el valor del parámetros o false
function float ps get value resource $psdoc string $name float $modifier	obtener ciertos valores
function ps hyphenate $psdoc	el identificador de recursos del fichero postscript como el devuelto por la función ps_new()
function ps hyphenate $text	text no debería contener ningún carácter que no sea una letra
function array ps hyphenate	un array de enteros indicando la posición de posibles divisiones del texto o false en caso de error
function array ps hyphenate resource $psdoc string $text	particionar sil&aacute;bicamente una palabra
function ps lineto $psdoc	el identificador de recursos del fichero postscript como el devuelto por la función ps_new()
function ps lineto $y	la coordenada y del punto final de la línea
function ps lineto $x	la coordenada x del punto final de la línea
function bool ps lineto	devuelve true en caso de éxito o false en caso de error
function bool ps lineto resource $psdoc float $x float $y	dibujar una l&iacute;nea
function ps makespotcolor $psdoc	el identificador de recursos del fichero postscript como el devuelto por la función ps_new()
function ps makespotcolor $name	el nombre del color directo p
function int ps makespotcolor	el id del nuevo color directo o 0 en caso de error
function int ps makespotcolor resource $psdoc string $name int $reserved	crear un color directo
function ps moveto $psdoc	el identificador de recursos del fichero postscript como el devuelto por la función ps_new()
function ps moveto $y	la coordenada y del punto al que moverse
function ps moveto $x	la coordenada x del punto al que moverse
function bool ps moveto	devuelve true en caso de éxito o false en caso de error
function bool ps moveto resource $psdoc float $x float $y	establecer el punto actual
function resource ps new	un recurso de un documento postscript o false en caso de error
function resource ps new	crear un nuevo objeto de documento postscript
function ps open file $psdoc	el identificador de recursos del fichero postscript como el devuelto por la función ps_new()
function ps open file $filename	el nombre del fichero postscript
function bool ps open file	devuelve true en caso de éxito o false en caso de error
function bool ps open file resource $psdoc string $filename	abrir un fichero para su impresi&oacute;n
function ps open memory image $psdoc	el identificador de recursos del fichero postscript como el devuelto por la función ps_new()
function int ps open memory image resource $psdoc int $gd	tomar una imagen de gd y devolverla como una imagen para colcarla en un documento ps
function ps rect $psdoc	el identificador de recursos del fichero postscript como el devuelto por la función ps_new()
function ps rect $y	la coordenada y de la esquina inferior izquierda del rectángulo
function ps rect $height	el alto de la imagen
function ps rect $width	el ancho de la imagen
function ps rect $x	la coordenada x de la esquina inferior izquierda del rectángulo
function bool ps rect	devuelve true en caso de éxito o false en caso de error
function bool ps rect resource $psdoc float $x float $y float $width float $height	dibujar un rect&aacute;ngulo
function ps restore $psdoc	el identificador de recursos del fichero postscript como el devuelto por la función ps_new()
function bool ps restore	devuelve true en caso de éxito o false en caso de error
function bool ps restore resource $psdoc	restaurar un contexto previamente guardado
function ps scale $psdoc	el identificador de recursos del fichero postscript como el devuelto por la función ps_new()
function ps scale $x	el factor de escala en dirección horizontal
function ps scale $y	el factor de escala en dirección vertical
function bool ps scale	devuelve true en caso de éxito o false en caso de error
function bool ps scale resource $psdoc float $x float $y	estalecer el factor de escala
function ps set border dash $psdoc	el identificador de recursos del fichero postscript como el devuelto por la función ps_new()
function ps set border dash $white	la longitud del hueco entre rayas
function ps set border dash $black	la longitud de la raya
function bool ps set border dash	devuelve true en caso de éxito o false en caso de error
function bool ps set border dash resource $psdoc float $black float $white	establece la longitud de las rayas del borde de las anotaciones
function ps set info $key	el nombre del campo de información a establecer
function ps set info $psdoc	un identificador de recursos del fichero postscript como el devuelto por la función ps_new()
function ps set info $value	el valor del campo de información
function bool ps set info	devuelve true en caso de éxito o false en caso de error
function bool ps set info resource $p string $key string $val	establecer los campos de informaci&oacute;n del documento
function ps setcolor $c1	dependiendo del espacio de color es el componente rojo rgb el componente cian cmyk el valor de gris gray el identificador del color directo spot o el identificador del patrón pattern
function ps setcolor $c3	dependiendo del espacio de color es el componente azul rgb o el componente amarillo cmyk
function ps setcolor $colorspace	el espacio de color debería ser gray rgb cmyk spot pattern
function ps setcolor $type	el parámetro type puede ser both ambos fill relleno o fillstroke contornear
function ps setcolor $c2	dependiendo del espacio de color es el componente verde rgb o el componente magenta cmyk
function ps setcolor $psdoc	el identificador de recursos del fichero postscript como el devuelto por la función ps_new()
function ps setcolor $c4	este parámetro sólo debe establecerse en el espacio de color cmyk y especifica el componente negro
function bool ps setcolor	devuelve true en caso de éxito o false en caso de error
function bool ps setcolor resource $psdoc string $type string $colorspace float $c1 float $c2 float $c3 float $c4	establecer el color actual
function ps setdash $psdoc	el identificador de recursos del fichero postscript como el devuelto por la función ps_new()
function ps setdash $on	la longitud de la raya
function ps setdash $off	la longitud del hueco entre rayas
function bool ps setdash	devuelve true en caso de éxito o false en caso de error
function bool ps setdash resource $psdoc float $on float $off	establecer la apariencia de una l&iacute;nea discontinua
function ps setfont $psdoc	el identificador de recursos del fichero postscript como el devuelto por la función ps_new()
function ps setfont $size	el tamaño de la fuente
function ps setfont $fontid	el identificador de la fuente como el devuelto por la función ps_findfont()
function bool ps setfont	devuelve true en caso de éxito o false en caso de error
function bool ps setfont resource $psdoc int $fontid float $size	establecer la fuente a usar para la siguiente impresi&oacute;n
function ps setgray $gray	el valor debe estar entre 0 blanco and 1 negro
function ps setgray $psdoc	el identificador de recursos del fichero postscript como el devuelto por la función ps_new()
function bool ps setgray	devuelve true en caso de éxito o false en caso de error
function bool ps setgray resource $psdoc float $gray	establecer el valor de gris
function ps setlinejoin $psdoc	el identificador de recursos del fichero postscript como el devuelto por la función ps_new()
function ps setlinejoin $type	la forma de unir las líneas
function bool ps setlinejoin	devuelve true en caso de éxito o false en caso de error
function bool ps setlinejoin resource $psdoc int $type	establecer c&oacute;mo est&aacute;n unidas las l&iacute;neas conectadas
function ps setlinewidth $psdoc	el identificador de recursos del fichero postscript como el devuelto por la función ps_new()
function ps setlinewidth $width	el ancho de las líneas en puntos
function bool ps setlinewidth	devuelve true en caso de éxito o false en caso de error
function bool ps setlinewidth resource $psdoc float $width	establecer el ancho de una l&iacute;nea
function ps setmiterlimit $psdoc	el identificador de recursos del fichero postscript como el devuelto por la función ps_new()
function ps setmiterlimit $value	la proporción máxima entre la longitud del inglete y del ancho de línea
function bool ps setmiterlimit	devuelve true en caso de éxito o false en caso de error
function bool ps setmiterlimit resource $psdoc float $value	establecer el l&iacute;mite del inglete
function ps setoverprintmode $psdoc	el identificador de recursos del fichero postscript como el devuelto por la función ps_new()
function bool ps setoverprintmode	devuelve true en caso de éxito o false en caso de error
function bool ps setoverprintmode resource $psdoc int $mode	establecer el modo de sobreimpresi&oacute;n
function ps setpolydash $psdoc	el identificador de recursos del fichero postscript como el devuelto por la función ps_new()
function ps setpolydash $arr	arr es una lista de elementos de longitud alternados para las porcioines negras y blancas
function bool ps setpolydash	devuelve true en caso de éxito o false en caso de error
function bool ps setpolydash resource $psdoc float $arr	establecer la apariencia de una l&iacute;nea discontinua
function ps shading pattern $psdoc	el identificador de recursos del fichero postscript como el devuelto por la función ps_new()
function ps shading pattern $shadingid	el identificador de un sombreado previamente creado con la función ps_shading()
function ps shading pattern $optlist	este argumento actualmente no se usa
function int ps shading pattern	el identificador del patrón o false en caso de error
function int ps shading pattern resource $psdoc int $shadingid string $optlist	crear un patr&oacute;n basado en un sombreado
function ps shfill $psdoc	el identificador de recursos del fichero postscript como el devuelto por la función ps_new()
function ps shfill $shadingid	el identificador de un sombreado previamente creado con la función ps_shading()
function bool ps shfill	devuelve true en caso de éxito o false en caso de error
function bool ps shfill resource $psdoc int $shadingid	rellenar un &aacute;rea con un sombreado
function ps show xy $x	la coordenada x de la esquina inferior izquierda de la caja circundante del texto
function ps show xy $psdoc	el identificador de recursos del fichero postscript como el devuelto por la función ps_new()
function ps show xy $text	el texto a imprimir
function ps show xy $y	la coordenada y de la esquina inferior izquierda de la caja circundante del texto
function bool ps show xy	devuelve true en caso de éxito o false en caso de error
function bool ps show xy resource $psdoc string $text float $x float $y	imprimir texto en una posici&oacute;n dada
function bool ps show xy2	devuelve true en caso de éxito o false en caso de error
function bool ps show xy2 resource $psdoc string $text int $len float $xcoor float $ycoor	imprimir texto en una posici&oacute;n
function ps show2 $psdoc	un identificador de recurso del fichero postscript como el devuelto por la función ps_new()
function ps show2 $text	el texto a imprimir
function ps show2 $len	el número máximo de caracteres a imprimir
function bool ps show2	devuelve true en caso de éxito o false en caso de error
function bool ps show2 resource $psdoc string $text int $len	imprimir texto en la posici&oacute;n actual
function ps string geometry $psdoc	el identificador de recursos del fichero postscript como el devuelto por la función ps_new()
function ps string geometry $size	el tamaño de la fuente
function ps string geometry $fontid	el identificador de la fuente a usar
function ps string geometry $text	el texto por el cual se calcula la geometría
function array ps string geometry	un array con las dimensiones de una cadena
function array ps string geometry resource $psdoc string $text int $fontid float $size	establecer la geometr&iacute;a de una cadena de caracteres
function ps stringwidth $psdoc	el identificador de recursos del fichero postscript como el devuelto por la función ps_new()
function ps stringwidth $size	el tamaño de la fuente
function ps stringwidth $text	el texto por el que calcular el ancho
function ps stringwidth $fontid	el identificador de la fuente a usar
function float ps stringwidth	el ancho de una cadena en puntos
function float ps stringwidth resource $psdoc string $text int $fontid float $size	obtener el ancho de una cadena
function ps stroke $psdoc	el identificador de recursos del fichero postscript como el devuelto por la función ps_new()
function bool ps stroke	devuelve true en caso de éxito o false en caso de error
function bool ps stroke resource $psdoc	dibujar el trazado actual
function ps symbol name $psdoc	el identificador de recursos del fichero postscript como el devuelto por la función ps_new()
function ps symbol name $fontid	el identificador de la fuente a usar
function ps symbol name $ord	el parámetro ord es la posición del glifo en el vector de codificación de fuente
function string ps symbol name	el nombre de un glifo de la fuente dada
function string ps symbol name resource $psdoc int $ord int $fontid	obtener el nombre de un glifo
function ps symbol width $psdoc	el identificador de recursos del fichero postscript como el devuelto por la función ps_new()
function ps symbol width $size	el tamaño de la fuente
function ps symbol width $fontid	el identificador de la fuente a usar
function ps symbol width $ord	la posición del glifo en el vector de codificación de fuente
function float ps symbol width	el ancho de un glifo en puntos
function float ps symbol width resource $psdoc int $ord int $fontid float $size	obtener el ancho de un glifo
function ps symbol $psdoc	el identificador de recursos del fichero postscript como el devuelto por la función ps_new()
function ps symbol $ord	la posición del glifo en el vector de codificación de fuentes
function bool ps symbol	devuelve true en caso de éxito o false en caso de error
function bool ps symbol resource $psdoc int $ord	imprimir un glifo
function pspell config create $encoding	el parámetro encoding es la codificación que se espera que tengan esas palabras
function pspell config create $jargon	el parámetro jargon contiene información extra para distinguir dos listas de palabras diferentes que tienen el mismo lenguaje y parámetros de ortografía
function pspell config create $spelling	el parámetro spelling es la ortografía solicitada para lenguajes con más de una ortografía como el inglés
function pspell config create $language	el parámetro language es el código de lenguaje que consiste en el código de lenguaje iso 639 de dos letras y un código de país iso 3166 de dos letras opcional después de un guión o guión de subrayado
function int pspell config create	devuelve un identificador de configuración de ortografía o false en caso de error
function int pspell config create string $language string $spelling string $jargon string $encoding	crear una configuraci&oacute;n usada para abrir un diccionario
function bool pspell config data dir	devuelve true en caso de éxito o false en caso de error
function bool pspell config data dir int $conf string $directory	ubicaci&oacute;n de los ficheros de informaci&oacute;n de lenguaje
function bool pspell config dict dir	devuelve true en caso de éxito o false en caso de error
function bool pspell config dict dir int $conf string $directory	ubicaci&oacute;n de la lista principal de palabras
function pspell config personal $file	la lista personal de palabras
function bool pspell config personal	devuelve true en caso de éxito o false en caso de error
function bool pspell config personal int $dictionary_link string $file	establecer un fichero que contiene una lista personal de palabras
function pspell config repl $file	el fichero debería ser modificable por quienquiera que ejecute php p
function bool pspell config repl	devuelve true en caso de éxito o false en caso de error
function bool pspell config repl int $dictionary_link string $file	establecer un fichero que contiene pares de sustituci&oacute;n
function pspell config runtogether $flag	true si las palabras unidas deberían ser tratadas como compuestos legales false si no
function bool pspell config runtogether	devuelve true en caso de éxito o false en caso de error
function bool pspell config runtogether int $dictionary_link bool $flag	considerar las palabras unidas como compuestos v&aacute;lidos
function pspell config save repl $flag	true si los pares de sustitución deberían guardarse false si no
function bool pspell config save repl	devuelve true en caso de éxito o false en caso de error
function bool pspell config save repl int $dictionary_link bool $flag	deterinar si se guarda una lista de pares de sustituci&oacute;n junto con la lista de palabras
function px close $pxdoc	identificador de recursos de la base de datos paradox devuelto por la función px_new()
function bool px close	devuelve true en caso de éxito o false en caso de error
function bool px close resource $pxdoc	cerrar una base de datos paradox
function px create fp $pxdoc	identificador de recursos de la base de datos paradox devueltos por la función px_new()
function px create fp $fielddesc	la opción fielddesc es una matriz que contiene un elemento por cada campo especificado
function px create fp $file	identificador de archivo devuelto por la función fopen()
function bool px create fp	devuelve true en caso de éxito o false en caso de error
function bool px create fp resource $pxdoc resource $file array $fielddesc	crear una nueva base de datos paradox
function px date2string $value	valor almacenado en la base de datos paradox del tipo de campo px_field_date
function px date2string $pxdoc	identificador de recursos de la base de datos paradox devuelto por la función px_new()
function px date2string $format	cadena de formato similar al formato utilizado por la función date()
function string px date2string	devuelve true en caso de éxito o false en caso de error
function string px date2string resource $pxdoc int $value string $format	convierte una fecha en una cadena
function px delete record $pxdoc	identificador de recursos de la base de datos paradox devuelto por la función px_new()
function px delete record $num	el registro numérico es un número artificial que cuenta los registros a medida en que se almacenan en la base de datos
function bool px delete record	devuelve true en caso de éxito o false en caso de error
function bool px delete record resource $pxdoc int $num	eliminar los registros de base de datos paradox
function px delete $pxdoc	identificador de recursos de la base de datos paradox devueltos por la función px_new()
function bool px delete	devuelve true en caso de éxito o false en caso de error
function bool px delete resource $pxdoc	eliminar los recursos de la base de datos paradox
function resource px new	devuelve false en caso de fallo
function resource px new	crear un nuevo objeto paradox
function px numrecords $pxdoc	identificador de recursos de la base de datos paradox devuelto por la función px_new()
function int px numrecords	devuelve el número de registros en un archivo de base de datos
function int px numrecords resource $pxdoc	devuelve el n&uacute;mero de registros en una base de datos
function px retrieve record $mode	el parámetro opcional mode puede ser px_keytolower o px_keytoupper con el fin de convertir las claves en mayúsculas o minúsculas
function px retrieve record $pxdoc	identificador de recursos de la base de datos paradox devuelto por la función px_new()
function px retrieve record $num	el registro numérico es un número artificial que cuenta los registros a medida en que se almacenan en la base de datos
function array px retrieve record	devuelve el parámetro num º del registro de la base de datos paradox
function array px retrieve record resource $pxdoc int $num int $mode	devolver registro de base de datos paradox
function px set blob file $filename	el nombre del archivo
function px set blob file $pxdoc	identificador de recursos de la base de datos paradox devuelto por la función px_new()
function bool px set blob file	devuelve true en caso de éxito o false en caso de error
function bool px set blob file resource $pxdoc string $filename	establecer el archivo desde donde los blobs se van a leer
function px set tablename $tablename	el nombre de la tabla
function px set tablename $pxdoc	identificador de recursos de la base de datos paradox devuelto por la función px_new()
function void px set tablename resource $pxdoc string $name	establecer el nombre de una tabla obsoleto
function px set targetencoding $encoding	la codificación de salida
function px set targetencoding $pxdoc	identificador de recursos de la base de datos paradox devuelto por la función px_new()
function bool px set targetencoding	devuelve false si la codificación no se puede establecer por ejemplo la codificación es desconocida o pxlib no aprueba la recodificación de todos
function bool px set targetencoding resource $pxdoc string $encoding	establecer la codificaci&oacute;n de los campos de caracteres obsoleto
function px timestamp2string $pxdoc	identificador de recursos de la base de datos paradox
function px timestamp2string $format	formato de cadena similar al formato utilizado por la función date()
function px timestamp2string $value	valor almacenado en la base de datos paradox de tipo de campo px_field_time o px_field_timestamp
function string px timestamp2string	devuelve true en caso de éxito o false en caso de error
function string px timestamp2string resource $pxdoc float $value string $format	convertir la fecha y la hora en una cadena
function quoted printable encode $str	el string de entrada
function string quoted printable encode	devuelve el string codificado
function string quoted printable encode string $str	convierte un string de 8 bits en un string quoted-printable
function rad2deg $number	un valor en radianes
function float rad2deg	el equivalente de number en grados
function float rad2deg float $number	convierte el n&uacute;mero en radianes a su equivalente en grados
function string radius strerror	devuelve mensajes de error como string de funciones radio fallidas
function string radius strerror resource $radius_handle	devuelve un mensaje de error
function random bytes $length	la longitud de la cadena aleatoria que debería ser devuelta en bytes
function string random bytes	devuelve un string que contiene el número solicitado de bytes aleatorios criptográficamente seguros
function string random bytes int $length	genera bytes seudoaleatorios criptogr&aacute;ficamente seguros
function range $end	la secuencia finaliza al alcanzar el valor end
function range $start	primer valor de la secuencia
function range $step	si se proporciona un valor a step este será usado como el incremento entre los elementos de la secuencia
function array range	devuelve un array de elementos desde start a end inclusive
function array range mixed $start mixed $end number $step	crear un array que contiene un rango de elementos
function readfile $filename	el nombre del fichero a leer
function readfile $context	un resource de flujos de contexto
function readfile $use_include_path	se puede emplear el segundo parámetro opcional y establecerlo a true si se desea buscar también el fichero en include_path
function int readfile	devuelve el número de bytes leídos del fichero
function int readfile string $filename bool $use_include_path resource $context	realizar la salida de un fichero
function readgzfile $filename	el nombre del archivo
function readgzfile $use_include_path	se puede especificar éste parámetro opcional en 1 si también se desea buscar el archivo en la ruta include_path
function int readgzfile	retorna el número de bytes sin comprimir leidos del archivo
function int readgzfile string $filename int $use_include_path	muestra un archivo gz
function void readline redisplay	redibuja la vista
function array realpath cache get	devuelve una matriz de las entradas de la caché de la ruta real
function array realpath cache get	obtiene las entradas de la cach&eacute; de la ruta real
function int realpath cache size	devuelve la cantidad de memoria que la caché de la ruta real está usando
function int realpath cache size	obtiene el tama&ntilde;o de la cach&eacute; de la ruta real
function realpath $path	la ruta que va a ser comprobada
function string realpath	devuelve el nombre de la ruta absoluta canonizado en caso de éxito
function string realpath string $path	devuelve el nombre de la ruta absoluta canonizado
function recode file $request	el tipo de solicitud de recodificación deseada
function recode file $output	un resource gestor de ficheros local para output
function recode file $input	un resource gestor de ficheros local para input
function bool recode file	devuelve false si no se puede cumplir o de lo contrario true
function bool recode file string $request resource $input resource $output	recodificar de fichero a fichero seg&uacute;n la petici&oacute;n de recoficaci&oacute;n
function recode string $request	el tipo de solicitud de recodificación deseada
function recode string $string	el string a recodificar
function string recode string	devuelve el string recodificado o false si no se pudo realizar la petición de recodificación
function string recode string string $request string $string	recodifica un string seg&uacute;n una petici&oacute;n de recodificaci&oacute;n
function rename function $original_name	el nombre original de la función
function rename function $new_name	el nuevo nombre para la función original_name
function bool rename function	devuelve true en caso de éxito o false en caso de error
function bool rename function string $original_name string $new_name	renombra original_name como new_name en la tabla global de funciones
function rename $context	nota : soporte para context fue añadido en php 5
function rename $oldname	nota : el nombre anterior
function rename $newname	el nuevo nombre
function bool rename	devuelve true en caso de éxito o false en caso de error
function bool rename string $oldname string $newname resource $context	renombra un archivo o directorio
function reset $array	el array de entrada
function mixed reset	devuelve el valor del primer elemento de un array o false si el array está vacío
function mixed reset array $array	establece el puntero interno de un array a su primer elemento
function bool restore error handler	esta función siempre devuelve true
function bool restore error handler	recupera la funci&oacute;n de gesti&oacute;n de errores previa
function bool restore exception handler	esta función siempre devuelve true
function bool restore exception handler	restaura la funci&oacute;n de gesti&oacute;n de excepciones previamente definida
function rewind $handle	el puntero al archivo debe ser válido y debe apuntar al archivo abierto con éxito por fopen()
function bool rewind	devuelve true en caso de éxito o false en caso de error
function bool rewind resource $handle	rebobina la posici&oacute;n de un puntero a un archivo
function rewinddir $gestor_dir	el gestor de directorio tipo resource abierto previamente con opendir()
function void rewinddir resource $dir_handle	regresar el gestor de directorio
function rmdir $context	nota : soporte para context fue añadido en php 5
function rmdir $dirname	ruta del directorio
function bool rmdir	devuelve true en caso de éxito o false en caso de error
function bool rmdir string $dirname resource $context	elimina un directorio
function round $mode	use una de las siguientes constantes para especificar el modo de redondeo
function round $precision	opcionalmente el número de dígitos decimales a redondear
function round $val	el valor a redondear
function float round	el valor redondeado
function float round float $val int $precision int $mode	redondea un float
function rpm is valid $filename	el nombre del fichero del fichero rpm que se desea comprobar si es válido
function bool rpm is valid	devuelve true en caso de éxito o false en caso de error
function bool rpm is valid string $filename	comprueba si un fichero rpm es v&aacute;lido
function string rpm version	rpm_version() devolverá una cadena de texto con la versión actual de rpmreader cargada en php
function string rpm version	devuelve una cadena de texto con la versi&oacute;n actual de la extensi&oacute;n de rpmreader
function string rrd error	último mensaje de error
function string rrd error	obtener el &uacute;ltimo mensaje de error
function rrd fetch $options	array de opciones para la resolución solicitada
function rrd fetch $filename	nombre de archivo de la base de datos rrd
function array rrd fetch	devuelve información acerca de los datos del gráfico recuperados
function array rrd fetch string $filename array $options	recuperar los datos de gr&aacute;fico como un array
function rrd first $raaindex	el índice numérico de la rra que se va a examinar
function rrd first $file	nombre del archivo de la base de datos rrd
function int rrd first	número entero de marca de tiempo unix false si se produce algún error
function int rrd first string $file int $raaindex	obtiene la marca de tiempo unix de la primera muestra desde el archivo rrd
function rrd graph $filename	el nombre del archivo de salida del gráfico
function rrd graph $options	las opciones para la generación de la imagen
function array rrd graph	se devolverá un array con información acerca de la imagen generada false cuando se produzca un error
function array rrd graph string $filename array $options	crea la imagen de un conjunto de datos
function rrd last $filename	nombre de archivo de la base de datos rrd
function int rrd last	devuelve un número entero como marca de tiempo unix de los datos más recientes de la base de datos rrd
function int rrd last string $filename	obtiene la marca de tiempo unix de la &uacute;ltima muestra
function rrd lastupdate $file	nombre del archivo de la base de datos rrd
function array rrd lastupdate	array de información sobre la última actualización false cuando ocurra un error
function array rrd lastupdate string $filename	obtiene informaci&oacute;n sobre los &uacute;ltimos datos actualizados
function rrd restore $options	array de opciones para la restauración
function rrd restore $rrd_file	nombre del archivo de la base de datos rrd restaurada
function rrd restore $xml_file	nombre del archivo xml con el dump del archivo de la base de datos rrd original
function bool rrd restore	devuelve true en caso de éxito false en caso de error
function bool rrd restore string $xml_file string $rrd_file array $options	restaura el archivo rrd desde el xml dump
function rrd tune $options	opciones con las propiedades del archivo de la base de datos rdd que serán cambiadas
function rrd tune $filename	nombre de archivo de la base de datos rrd
function bool rrd tune	devuelve true en caso de éxito false en caso contrario
function bool rrd tune string $filename array $options	cambia algunas opciones de cabecera del archivo de base de datos rrd database
function rrd update $filename	nombre de archivo de la base de datos rrd
function rrd update $options	opciones para actualizar la base de datos rrd
function bool rrd update	returns true on success false when error occurs
function bool rrd update string $filename array $options	actualizar la base de datos rrd
function string rrd version	string con el número de versión por ejemplo rrdtool 1
function string rrd version	obtiene informaci&oacute;n acerca de la biblioteca subyacente rrdtool
function rsort $array	el array de entrada
function rsort $sort_flags	quizá se necesita cambiar el comportamiento de ordenado usando el parámetro opcional sort_flags para más información ver sort()
function bool rsort	devuelve true en caso de éxito o false en caso de error
function bool rsort array $array int $sort_flags	ordena un array en orden inverso
function rtrim $str	el string de entrada
function rtrim $character_mask	se puede también especificar los caracteres que se desean retirar por medio del parámetro character_mask
function string rtrim	devuelve el string modificado
function string rtrim string $str string $character_mask	retira los espacios en blanco u otros caracteres del final de un string
function runkit import $filename	el nombre de archivo desde que se va a importar las definiciones de funciones y clases
function runkit import $flags	operador or a nivel de bit de la familia de constantes runkit_import_*
function bool runkit import	devuelve true en caso de éxito o false en caso de error
function bool runkit import string $filename int $flags	procesar un archivo php importando definiciones de funciones y clases sobrescribiendo cuando sea apropiado
function runkit lint file $filename	archivo que contiene el código php a ser verificado de pelusas lint
function bool runkit lint file	devuelve true en caso de éxito o false en caso de error
function bool runkit lint file string $filename	verificar la sintaxis php del archivo especificado
function runkit lint $code	el código php a ser verificado de pelusas lint
function bool runkit lint	devuelve true en caso de éxito o false en caso de error
function bool runkit lint string $code	verificar la sintaxis php del c&oacute;digo php especificado
function runkit sandbox output handler $callback	nombre de una función que espera un parámetro
function runkit sandbox output handler $sandbox	instancia de objeto de la clase runkit_sandbox en la que establecer el gestor de salida
function mixed runkit sandbox output handler	devuelve el nombre de la llamada de retorno del gestor de salida definido previamente o false si no se definió previamente un gestor
function mixed runkit sandbox output handler object $sandbox mixed $callback	especificar una funci&oacute;n para capturar y / o procesar la salida de un aislamiento de procesos de runkit
function sem acquire $nowait	especifica si el proceso no debería esperar a que el semáforo sea adquirido
function sem acquire $sem_identifier	sem_identifier es un recurso de semáforo obtenido desde sem_get()
function bool sem acquire	devuelve true en caso de éxito o false en caso de error
function bool sem acquire resource $sem_identifier bool $nowait	adquirir un sem&aacute;foro
function sem get $max_acquire	el número de procesos que puede adquirir el semáforo simultáneamente está establecido por max_acquire
function sem get $auto_release	especifica si el semáforo debería ser liberado automáticamente al cierre de la petición
function sem get $perm	los permisos del semáforo
function resource sem get	devuelve un identificador de semáforo positivo en caso de éxito o false en caso de error
function resource sem get int $key int $max_acquire int $perm int $auto_release	obtener el id de un sem&aacute;foro
function sem release $sem_identifier	un gestor de recurso de semáforo devuelto por sem_get()
function bool sem release	devuelve true en caso de éxito o false en caso de error
function bool sem release resource $sem_identifier	liberar un sem&aacute;foro
function sem remove $sem_identifier	un identificador de recurso de semáforo devuelto por sem_get()
function bool sem remove	devuelve true en caso de éxito o false en caso de error
function bool sem remove resource $sem_identifier	eliminar un sem&aacute;foro
function void session abort	desecha los cambios en el array de sesi&oacute;n y finaliza la sesi&oacute;n
function session cache expire $new_cache_expire	si se da new_cache_expire la nueva caducidad de la caché se reemplaza por new_cache_expire
function int session cache expire	devuelve la configuración actual de session
function int session cache expire string $new_cache_expire	devuelve la caducidad de la cach&eacute; actual
function session cache limiter $cache_limiter	si se especifica cache_limiter el nombre del limitador de caché actual se cambia por el nuevo valor
function string session cache limiter	devuelve el nombre del limitador de caché actual
function string session cache limiter string $cache_limiter	obtener y / o establecer el limitador de cach&eacute; actual
function session decode $data	la información codificada que va a ser alamcenada
function bool session decode	devuelve true en caso de éxito o false en caso de error
function bool session decode string $data	decodifica la informaci&oacute;n de sesi&oacute;n desde una cadena de sesi&oacute;n codificada
function string session encode	devuelve el contenido de la sesión actual codificado
function string session encode	codifica los datos de la sesi&oacute;n actual como un string codificado de sesi&oacute;n
function array session get cookie params	devuelve una matriz con la información de la cookie de sesión actual la matriz contiene los siguientes elementos: lifetime - el tiempo de vida de la cookie en segundos
function array session get cookie params	obtener los par&aacute;metros de la cookie de sesi&oacute;n
function session id $id	si se especifica id reemplazará el id de sesión actual
function string session id	session_id() devuelve el id de sesión para la sesión actual o la cadena vacía si no hay sesión actual no existe id de sesión actual
function string session id string $id	obtener y / o establecer el id de sesi&oacute;n actual
function session is registered $name	el nombre de la variable
function bool session is registered	session_is_registered() devuelve true si hay una variable global con el nombre name registrada en la sesión actual false si no
function bool session is registered string $name	averiguar si una variable global est&aacute; registrada en una sesi&oacute;n
function session module name $module	si se especifica module ese módulo será usado en su lugar
function string session module name	devuelve el nombre del módulo de sesión actual
function string session module name string $module	obtiene y / o establece el m&oacute;dulo de sesi&oacute;n actual
function session name $name	el nombre de la sesión hace referencia al nombre de la sesión usado cookies y urls p
function string session name	devuelve el nombre de la sesión actual
function string session name string $name	obtener y / o establecer el nombre de la sesi&oacute;n actual
function session regenerate id $delete_old_session	si se borra el archivo asociado antiguo o no
function bool session regenerate id	devuelve true en caso de éxito o false en caso de error
function bool session regenerate id bool $delete_old_session	actualiza el id de sesi&oacute;n actual con uno generado m&aacute;s reciente
function void session register shutdown	funci&oacute;n de cierre de sesiones
function session register $name	una cadena de contiene el nombre de una variable o una matriz que consiste en nombres de variables u otras matrices
function bool session register	devuelve true en caso de éxito o false en caso de error
function bool session register mixed $name	registrar una o m&aacute;s variables globales con la sesi&oacute;n actual
function void session reset	reinicializar el array de sesi&oacute;n con los valores originales
function session save path $path	la ruta de la información de sesión
function string session save path	devuelve la ruta del directorio actual usado para el almacenamiento de información
function string session save path string $path	obtener y / o establecer la ruta de almacenamiento de la sesi&oacute;n actual
function session start $options	si se proporciona este array asociativo de opciones sobrescribirá las directivas de configuración de sesiones establecidas actualmente
function bool session start	esta función devuleve true si una sesión fue iniciada satisfactoriamente si no devuelve false
function bool session start array $options	iniciar una nueva sesi&oacute;n o reanudar la existente
function void session unset	libera todas las variables de sesi&oacute;n
function set exception handler $exception_handler	nombre de la función a llamar cuando ocurra una excepción no capturada
function callable set exception handler	devuelve el nombre del manejador de excepciones definido anteriormente o null en caso de error
function callable set exception handler callable $exception_handler	establece una funci&oacute;n de gesti&oacute;n de excepciones definida por el usuario
function set include path $new_include_path	el nuevo valor para include_path
function string set include path	devuelve el valor antiguo de include_path en caso de éxito o false en caso de error
function string set include path string $new_include_path	establece la opci&oacute;n de configuraci&oacute;n include_path
function setcookie $expire	el tiempo en el que expira la cookie
function setcookie $name	el nombre de la cookie
function setcookie $value	el valor de la cookie
function setcookie $domain	el dominio para el cual la cookie está disponible
function setcookie $httponly	cuando es true la cookie será accesible sólo a través del protocolo http
function setcookie $path	la ruta dentro del servidor en la que la cookie estará disponible
function setcookie $secure	indica que la cookie sólo debiera transmitirse por una conexión segura https desde el cliente
function bool setcookie	si existe algún tipo de output anterior a la llamada de esta función setcookie() fallará y retornará false
function bool setcookie string $name string $value int $expire string $path string $domain bool $secure bool $httponly	enviar una cookie
function setlocale $locale	si locale es null o el string vacío los nombres de los localismos se establecerán a partir de los valores de las variables de entorno con los mismos nombres que las categorías anteriores o desde lang
function setlocale	( string opcional o array de parámetros para probarlos como localismos hasta que se tenga éxito
function string setlocale	devuelve el nuevo localismo actual o false si la funcionalidad del localismo no está implementada en la plataforma el localismo especificado no existe o el nombre de la categoría no es válido
function string setlocale int $category string $locale	establecer la informaci&oacute;n del localismo
function setproctitle $title	el título que se utilizará como título de proceso
function void setproctitle string $title	establecer el t&iacute;tulo de proceso
function setthreadtitle $title	el título que se utilizará como título del hilo
function bool setthreadtitle	devuelve true en caso de éxito o false en caso de error
function bool setthreadtitle string $title	set the thread title
function settype $var	la variable a ser convertida
function settype $tipo	los posibles valores de tipo son: boolean o desde php 4
function bool settype	devuelve true en caso de éxito o false en caso de error
function bool settype mixed $var string $type	establece el tipo de una variable
function shell exec $cmd	el comando que será ejecutado
function string shell exec	la salida del comando ejecutado o null si ocurre un error o el comando no produce ninguna salida
function string shell exec string $cmd	ejecutar un comando mediante el int&eacute;rprete de comandos y devolver la salida completa como una cadena
function shm has var $variable_key	la clave de la variable
function shm has var $shm_identifier	segmento de memoria compartida obtenido desde shm_attach()
function bool shm has var	devuelve true si la entrada existe si no false
function bool shm has var resource $shm_identifier int $variable_key	verificar si existe una entrada espec&iacute;fica
function shm put var $variable_key	la clave de la variable
function shm put var $variable	la variable
function shm put var $shm_identifier	un gestor de recurso de memoria compartida devuelto por shm_attach()
function bool shm put var	devuelve true en caso de éxito o false en caso de error
function bool shm put var resource $shm_identifier int $variable_key mixed $variable	inserta o actualiza una variable en la memoria compartida
function shm remove var $variable_key	la clave de la variable
function shm remove var $shm_identifier	el identificador de memoria compartida devuelto por shm_attach()
function bool shm remove var	devuelve true en caso de éxito o false en caso de error
function bool shm remove var resource $shm_identifier int $variable_key	eliminar una variable de la memoria compartida
function shm remove $shm_identifier	el identificador de memoria compartida devuelto por shm_attach()
function bool shm remove	devuelve true en caso de éxito o false en caso de error
function bool shm remove resource $shm_identifier	elimina la memoria compartida de sistemas unix
function shmop delete $shmid	el identificador de memoria compartida creado por shmop_open()
function bool shmop delete	devuelve true en caso de éxito o false en caso de error
function bool shmop delete int $shmid	borrar segmento de memoria compartida
function shmop open $size	el tamaño en bytes del segmento de memoria compartida que quiere crear
function shmop open $mode	permisos que se van a asignar al segmento de memoria compartida estos son similares a los que se asignan a los archivos
function shmop open $key	identificador que el sistema utilizará para ese segmento de memoria compartida
function int shmop open	en caso de éxito shmop_open() devolverá un identificador que puede utilizar para acceder al segmento de memoria compartida que ha creado
function int shmop open int $key string $flags int $mode int $size	crea o abre un segmento de memoria compartida
function shmop size $shmid	el identificador del segmento de memoria compartida creado por shmop_open()
function int shmop size	devuelve un entero el cual representa el número de bytes que ocupa el segmento de memoria compartida
function int shmop size int $shmid	obtiene el tama&ntilde;o de un segmento de memoria compartida
function shmop write $offset	especifica dónde empezará a escribir los datos en el interior del segmento de la memoria compartida
function shmop write $shmid	el identificador del segmento de la memoria compartida creado por shmop_open()
function shmop write $data	una cadena a escribir en el segmento de la memoria compartida
function int shmop write	el tamaño de la data escrita o false en caso de fallo
function int shmop write int $shmid string $data int $offset	escribir datos en un segmento de memoria compartida
function shuffle $array	el array
function bool shuffle	devuelve true en caso de éxito o false en caso de error
function bool shuffle array $array	mezcla un array
function simplexml load file $ns	el prefijo del espacio de nombres o un uri
function simplexml load file $class_name	este parámetro opcional puede ser usado cuando se necesita que simplexml_load_file() retorne un objeto de la clase especificada
function simplexml load file $options	desde php 5
function simplexml load file $filename	ruta al fichero xml nota : libxml 2 no escapa la uri así que si es necesario pasar por ejemplo b & c como parámetro a de la uri hay que llamar a simplexml_load_file( rawurlencode( http: / / example
function simplexml load file $is_prefix	true si ns es un prefijo false si es un uri; por defecto es false
function SimpleXMLElement simplexml load file	retorna un object de tipo simplexmlelement cuyas propiedades contienen los datos del documento xml o false en caso de error
function SimpleXMLElement simplexml load file string $filename string $class_name int $options string $ns bool $is_prefix	interpreta un fichero xml en un objeto
function simplexml load string $ns	el prefijo del espacio de nombres o un uri
function simplexml load string $data	un string xml correcto
function simplexml load string $options	desde php 5
function simplexml load string $is_prefix	true si ns es un prefijo false si es un uri; por defecto es false
function simplexml load string $class_name	este parámetro opcional puede ser usado cuando se necesita que simplexml_load_file() retorne un objeto de la clase especificada
function SimpleXMLElement simplexml load string	retorna un object de tipo simplexmlelement cuyas propiedades contienen los datos del documento xml o false en caso de error
function SimpleXMLElement simplexml load string string $data string $class_name int $options string $ns bool $is_prefix	interpreta un string de xml en un objeto
function sin $arg	un valor en radianes
function float sin	el seno de arg
function float sin float $arg	seno
function socket accept $socket	un recurso socket válido creado con socket_create()
function resource socket accept	devuelve un nuevo recurso socket en caso de éxito o false en caso de error
function resource socket accept resource $socket	acepta una conexi&oacute;n de un socket
function socket bind $address	si el socket es de la familia af_inet address es una ip en notación decimal con puntos p
function socket bind $port(Optional)	el parámetro port sólo se usa cuando se vincula un socket af_inet y designa el puerto en el que escuchar conexiones
function socket bind $socket	un recurso socket válido creado con socket_create()
function bool socket bind	devuelve true en caso de éxito o false en caso de error
function bool socket bind resource $socket string $address int $port	vincula un nombre a un socket
function socket clear error $socket	un recurso socket válido creado con socket_create()
function void socket clear error resource $socket	limpia el error del socket o el &uacute;ltimo c&oacute;digo de error
function int socket cmsg space int $level int $type	calcular el tama&ntilde;o del b&uacute;fer de mensajes
function socket connect $address	el parámetro address es una dirección ipv4 en notación decimal con puntos p
function socket connect $port	el parámetro port sólo se usa y es obligatoria al conectarse a un socket af_inet o a un socket af_inet6 y desgina el puerto del host remoto al que debería de hacerse una conexión
function bool socket connect	devuelve true en caso de éxito o false en caso de error
function bool socket connect resource $socket string $address int $port	inicia una conexi&oacute;n sobre un socket
function socket create listen $backlog	el parámetro backlog define la longitud máxima a la que puede aumentar la cola de conexiones pendientes
function socket create listen $port	el puerto en el que escuchar todas las interfaces
function resource socket create listen	socket_create_listen() devuelve un nuevo recurso socket en caso de éxito o false en caso de error
function resource socket create listen int $port int $backlog	abre un socket en un puerto para aceptar conexiones
function socket create pair $type	el parámetro type selecciona el tipo de comunicación que va a usar el socket
function socket create pair $domain	el parámetro domain especifica la familia de protocolos que se va a usar en el socket
function socket create pair $fd	referencia a una matriz en la cuál los dos recursos socket serán insertados
function socket create pair $protocol	el parámetro protocol establece el protocolo específico dentro del domain especificado a usar cuando se comunica con el socket devuelto
function bool socket create pair	devuelve true en caso de éxito o false en caso de error
function bool socket create pair int $domain int $type int $protocol array $fd	crea un par de sockets indistinguibles y los almacena en una matriz
function socket getpeername $socket	un recurso socket válido creado con socket_create() o socket_accept()
function socket getpeername $address	si el socket dado es de tipo af_inet o af_inet6 socket_getpeername() devolverá la dirección ip de los pares remotos en la notación apropiada p
function socket getpeername $port	si se da contendrá el puerto asociado a address
function bool socket getpeername	devuelve true en caso de éxito o false en caso de error
function bool socket getpeername resource $socket string $address int $port	pregunta a la parte remota del socket dado que puede resultar en un host / puerto o en una ruta de sistema de archivos unix dependiendo de su tipo
function socket import stream $stream	el recurso de socket a importar
function resource socket import stream	devuelve false o null en caso de fallo
function resource socket import stream resource $stream	importar un flujo a stream
function socket last error $socket	un recurso socket válido creado con socket_create()
function int socket last error	esta función devuelve un código de error de un socket
function int socket last error resource $socket	devuelve el &uacute;ltimo error sobre un socket
function socket listen $socket	un recurso socket válido creado con socket_create()
function socket listen $backlog	se pondrán en cola un máximo de conexiones entrantes backlog para su procesamiento
function bool socket listen	devuelve true en caso de éxito o false en caso de error
function bool socket listen resource $socket int $backlog	escucha una conexi&oacute;n sobre un socket
function socket read $socket	un recurso socket válido creado con socket_create() o socket_accept()
function socket read $type	el parámetro opcional type es una constante nominada: php_binary_read predeterminada - usa la función del sistema recv()
function socket read $length	el número máximo de bytes leidos es espeicificado por el parámetro length
function string socket read	socket_read() devuelve la información como cadena en caso de éxito o false en caso de error incluyendo si el host remoto cerró la conexión
function string socket read resource $socket int $length int $type	lee un m&aacute;ximo de longitud de bytes desde un socket
function socket recv $len	se obtendrán hasta len bytes desde el host remoto
function socket recv $buf	la información recibida será traida a la variable especifivada por buf
function socket recv $socket	socket debe ser un recurso socket previamente creado por socket_create()
function socket recv $flags	el valor de flags puede ser una combinación de las siguientes banderas unidas con el operador binario or |
function int socket recv	socket_recv() devuelve el número de bytes recibidos o false si hubo un error
function int socket recv resource $socket string $buf int $len int $flags	recibe informaci&oacute;n desde un socket conectado
function socket sendto $len	se enviarán len bytes desde buf
function socket sendto $buf	la información enviada será tomada desde el buffer buf
function socket sendto $addr	la dirección ip del host remoto
function socket sendto $flags	el valor de flags puede ser una combinación de las siguientes banderas unidas con el operador binario or |
function socket sendto $port	port es el número de puerto remoto al que se enviará la información
function socket sendto $socket	un recurso socket válido creado usando socket_create()
function int socket sendto	socket_sendto() devuelve el número de bytes enviados al host remoto o false si ocurrió un error
function int socket sendto resource $socket string $buf int $len int $flags string $addr int $port	env&iacute;a un mensaje a un socket ya est&eacute; conectado o no
function socket set block $socket	un recurso socket válido creado con socket_create() o socket_accept()
function bool socket set block	devuelve true en caso de éxito o false en caso de error
function bool socket set block resource $socket	establece el modo de bloqueo de un recurso socket
function socket shutdown $how	el valor de how puede ser uno de los siguientes: valores posibles de how 0 cerra el socket para dejar de leer 1 cerra el socket para dejar de escribir 2 cerra el socket para dejar de leer y escribir
function socket shutdown $socket	un recurso socket válido creado con socket_create()
function bool socket shutdown	devuelve true en caso de éxito o false en caso de error
function bool socket shutdown resource $socket int $how	cierra un socket para dejar de recibir enviar o ambos
function socket strerror $errno	un número de error de socket válido como los producidos por socket_last_error()
function string socket strerror	devuelve el mensaje de error asociado con el parámetro errno
function string socket strerror int $errno	devuelve una cadena que describe un error de socket
function sort $array	el array de entrada
function bool sort	devuelve true en caso de éxito o false en caso de error
function bool sort array $array int $sort_flags	ordena un array
function soundex $str	el string de entrada
function string soundex	devuelve la clave soundex como un string
function string soundex string $str	calcula la clave soundex de un string
function spl autoload call $class_name	el nombre de la clase a ser buscada
function void spl autoload call string $class_name	probar todos las funciones registradas __autoload() para cargar la clase solicitada
function spl autoload extensions $file_extensions	cuando se llama sin ningún argumento simplemente devuelve la lista actual de extensiones separadas por comas
function string spl autoload extensions	una lista delimitada por comas de las extensiones predeterminadas de ficheros de para spl_autoload()
function string spl autoload extensions string $file_extensions	registrar y devolver las extensiones de ficheros predeterminadas para spl_autoload
function spl autoload register $autoload_function	la función de autocarga a registrar
function spl autoload register $prepend	si es true spl_autoload_register() antepondrá el autocargador en la pila de autocarga en vez de posponerlo
function spl autoload register $throw	este parámetro especifica si spl_autoload_register() debería lanzar excepciones cuando el parámetro autoload_function no puede ser registrado
function bool spl autoload register	devuelve true en caso de éxito o false en caso de error
function bool spl autoload register callable $autoload_function bool $throw bool $prepend	registrar las funciones dadas como implementaci&oacute;n de __autoload()
function spl autoload unregister $autoload_function	la función de autocarga a eliminar
function bool spl autoload unregister	devuelve true en caso de éxito o false en caso de error
function bool spl autoload unregister mixed $autoload_function	desregistrar una funci&oacute;n dada como implementadi&oacute;n de __autoload()
function spl autoload $class_name	el nombre de la clase en minúsculas y espacio de nombres que va ser instanciado
function spl autoload $file_extensions	por omisión comprueba todas las rutas de inclusión que contienen nombres de fichero construidos por el nombre de la clase en minúsculas añadido por las extensiones de nombre de fichero
function void spl autoload string $class_name string $file_extensions	implementaci&oacute;n predeterminada para __autoload()
function array spl classes	devuelve un array que contiene las clases spl actualmente disponibles
function array spl classes	devuelve las clases spl disponibles
function spl object hash $object	cualquier objeto
function string spl object hash	un string que es único para cada objeto que existe actualmente y que siempre es el mismo para cada objeto
function string spl object hash object $obj	devuelve el id del hash del objeto dado
function sprintf $format	el string de formateo está compuesto de cero o más directivas: caracteres ordinarios excluyendo % que son copiados directamente al resultado y especificaciones de conversión donde cada una de las cuales da lugar a extraer su propio parámetro
function string sprintf	devuelve un string producido de acuerdo con el string de formato format
function string sprintf string $format mixed $args	devuelve un string formateado
function sqlite column $index_or_name	el índice o nombre de la columna a obtener
function sqlite column $decode_binary	cuando el parámetro decode_binary es seteado a true el valor por defecto php decodificará la codificación binaria que se aplicó a los datos si éstos fueron codificados usando la función sqlite_escape_string()
function sqlite column $result	el recurso del resultado de sqlite
function mixed sqlite column	devuelve el valor de la columna
function mixed sqlite column resource $result mixed $index_or_name bool $decode_binary	obtiene una columna de la fila actual de un conjunto de resultados
function sqlite error string $error_code	el código de error que se está usando el cual puede ser pasado desde sqlite_last_error()
function string sqlite error string	devuelve una descripción del código de error error_code como un string
function string sqlite error string int $error_code	devuelve la descripci&oacute;n de un c&oacute;digo de error
function sqlite escape string $item	el string que va a ser escapado
function string sqlite escape string	devuelve un string escapado para ser usado en una sentencia sql sqlite sql
function string sqlite escape string string $item	escapa una cadena para ser usada como un par&aacute;metro para una consulta
function sqlite has more $result	el resucuro de resultados de sqlite
function bool sqlite has more	devuelve true si existen más filas disponibles en el gestor dado por result o false si no
function bool sqlite has more resource $result	comprueba si est&aacute;n o no disponibles m&aacute;s filas
function string sqlite libversion	devuelve la versión de la biblioteca como cadena
function string sqlite libversion	devuelve la versi&oacute;n de la biblioteca sqlite vinculada
function sqlite udf decode binary $data	los datos codificados que serán decodificados; los datos a los que se le aplicaron sqlite_udf_encode_binary() o sqlite_escape_string()
function string sqlite udf decode binary	el string decodificado
function string sqlite udf decode binary string $data	decodificar datos binarios pasados como par&aacute;metros a una fdu
function sqlsrv begin transaction $conn	el recurso de la conexión devuelta por una llamada a sqlsrv_connect()
function bool sqlsrv begin transaction	devuelve true en caso de éxito o false en caso de error
function bool sqlsrv begin transaction resource $conn	inicia una transacci&oacute;n de base de datos
function sqlsrv cancel $stmt	el recurso de la sentencia que se va a cancelar
function bool sqlsrv cancel	devuelve true en caso de éxito o false en caso de error
function bool sqlsrv cancel resource $stmt	cancela una sentencia de base de datos
function sqlsrv client info $conn	la conexión sobre la que se va a retornar información
function array sqlsrv client info	devuelve un array asociativo con las claves que se describen en la tabla siguiente
function array sqlsrv client info resource $conn	devuelve informaci&oacute;n sobre el cliente y la conexi&oacute;n especificada
function sqlsrv close $conn	la conexión que se va a cerrar
function bool sqlsrv close	devuelve true en caso de éxito o false en caso de error
function bool sqlsrv close resource $conn	cierra una conexi&oacute;n abierta y libera los recursos asociados a la conexi&oacute;n
function sqlsrv commit $conn	la conexión en la que se va a consolidar la transacción
function bool sqlsrv commit	devuelve true en caso de éxito o false en caso de error
function bool sqlsrv commit resource $conn	consolida una transacci&oacute;n que se inici&oacute; con sqlsrv_begin_transaction
function sqlsrv configure $value	el valor de la propiedad especificada
function sqlsrv configure $setting	el nombre de la propiedad a configurar
function bool sqlsrv configure	devuelve true en caso de éxito o false en caso de error
function bool sqlsrv configure string $setting mixed $value	cambia la configuraci&oacute;n de los drivers del gestionador de errores y de log
function sqlsrv errors $errorsOrWarnings	determina si se ha de retornar información de error alertas o ambas
function mixed sqlsrv errors	si se produjeron errores y / o warnings en la última operación sqlsrv se devolverá un array de arrays conteniendo información de error
function mixed sqlsrv errors int $errorsOrWarnings	devuelve informaci&oacute;n de errores y alertas warnings de la &uacute;ltima operaci&oacute;n sqlsrv realizada
function sqlsrv execute $stmt	un recurso de sentencia devuelto por sqlsrv_prepare()
function bool sqlsrv execute	devuelve true en caso de éxito o false en caso de error
function bool sqlsrv execute resource $stmt	ejecuta una sentencia preparada con sqlsrv_prepare
function sqlsrv fetch array $fetchType	una constante predefinida con el tipo de array a devolver
function sqlsrv fetch array $stmt	un recurso de sentencia devuelta por sqlsrv_query o sqlsrv_prepare
function sqlsrv fetch array $row	especifica la fila para acceder a un conjunto de resultados que utiliza un cursor con scroll
function sqlsrv fetch array $offset	especifica la fila a la que se desea acceder si el parámetro de fila se define como sqlsrv_scroll_absolute o sqlsrv_scroll_relative
function array sqlsrv fetch array	devuelve un array en caso de éxito null si no hay más filas a devolver y false si se produce un error
function array sqlsrv fetch array resource $stmt int $fetchType int $row int $offset	devuelve una fila como un array
function sqlsrv fetch object $offset	especifica la fila a la que se accederá si el parámetro de fila se ha especificado como sqlsrv_scroll_absolute o sqlsrv_scroll_relative
function sqlsrv fetch object $className	el nombre de la clase a instanciar
function sqlsrv fetch object $row	la fila a la que se accederá
function sqlsrv fetch object $ctorParams	los valores pasados al constructor de la clase especificada
function sqlsrv fetch object $stmt	un recurso de consulta creado por sqlsrv_query() o sqlsrv_execute()
function mixed sqlsrv fetch object	devuelve un objeto en caso de éxito null si no hay más filas a devolver y false si se produce un error o si la clase especificada no existe
function mixed sqlsrv fetch object resource $stmt string $className array $ctorParams int $row int $offset	devuelve la siguiente fila de datos de un conjunto resultado como un objeto
function sqlsrv fetch $offset	especifica la fila que será accedida si el parámetro de fila se configura como sqlsrv_scroll_absolute o sqlsrv_scroll_relative
function sqlsrv fetch $row	la fila que será accedida
function sqlsrv fetch $stmt	un recurso de consulta creado por la ejecución de sqlsrv_query() o sqlsrv_execute()
function mixed sqlsrv fetch	devuelve true si la fila siguiente del conjunto de resultado se obtuvo satisfactoriamente false si se produce un error y null si no hay más filas en el conjunto de resultado
function mixed sqlsrv fetch resource $stmt int $row int $offset	hace que est&eacute; disponible para ser le&iacute;da la siguiente fila del conjunto de resultado
function sqlsrv field metadata $stmt	el recurso de la consulta de la que se obtendrá los metadatos
function mixed sqlsrv field metadata	devuelve un array de arrays en caso de éxito
function mixed sqlsrv field metadata resource $stmt	obtiene la metadata de los campos de una consulta preparada por sqlsrv_prepare o sqlsrv_query
function sqlsrv prepare $conn	a connection resource returned by sqlsrv_connect()
function sqlsrv prepare $options	an array specifing query property options
function sqlsrv prepare $params	an array specifying parameter information when executing a parameterized query
function sqlsrv prepare $sql	the string that defines the query to be prepared and executed
function mixed sqlsrv prepare	returns a statement resource on success and false if an error occurred
function mixed sqlsrv prepare resource $conn string $sql array $params array $options	prepares a query for execution
function sqlsrv query $conn	a connection resource returned by sqlsrv_connect()
function sqlsrv query $options	an array specifing query property options
function sqlsrv query $params	an array specifying parameter information when executing a parameterized query
function sqlsrv query $sql	the string that defines the query to be prepared and executed
function mixed sqlsrv query	returns a statement resource on success and false if an error occurred
function mixed sqlsrv query resource $conn string $sql array $params array $options	prepares and executes a query
function sqrt $arg	el argumento a procesar
function float sqrt	la raíz cuadrada de arg o el valor especial nan para números negativos
function float sqrt float $arg	ra&iacute;z cuadrada
function srand $seed	valor de la semilla opcional
function void srand int $seed	genera un n&uacute;mero aleatorio a partir de una semilla
function sscanf $str	el string de entrada para ser interpretado
function sscanf $format	el formato interpretado str el cual está descrito en la documentación para sprintf() con las siguientes diferencia: la función no es consciente de la configuración regional
function sscanf	opcionalmente variables pasadas por referencia que contendrán los valores interpretados
function mixed sscanf	si sólo se pasan dos parámetros a esta función los valores interpretados se devolverán como una matriz
function mixed sscanf string $str string $format	interpreta un string de entrada de acuerdo con un formato
function ssh2 sftp $session	un identificador de enlace de conexión ssh obtenido a partir de una llamada a ssh2_connect()
function resource ssh2 sftp	este método devuelve un recurso sftp de ssh2 para emplearlo con todos los demás métodos ssh2_sftp_*() y la envoltura ssh2
function resource ssh2 sftp resource $session	inicializar el subsistema sftp
function stat $filename	ruta del fichero
function array stat string $filename	da informaci&oacute;n acerca de un fichero
function stats cdf beta $which	un entero que indica cuál de los valores de los cuatro siguientes argumentos se va a calcular desde los otros
function float stats cdf beta float $par1 float $par2 float $par3 int $which	calcula un par&aacute;metro de la distribuci&oacute;n beta seg&uacute;n los valores dados a los otros
function float stats rand gen beta float $a float $b	genera una desviaci&oacute;n aleatoria beta
function stats rand gen gamma $a	parámetro de ubicación de la distribución gamma a > 0
function stats rand gen gamma $r	parámetro de forma de la distribución gamma r > 0
function float stats rand gen gamma float $a float $r	genera desviaciones aleatorias desde una distribuci&oacute;n gamma
function string stomp connect error	una cadena que describe el error o null si no hay errores
function string stomp connect error	devuelve una cadena descripci&oacute;n de el &uacute;ltimo error al conectar
function string stomp version	esta devuelve la versión actual de la extensión stomp
function string stomp version	obtiene la versi&oacute;n actual de la extensi&oacute;n stomp
function str pad $input	el string de entrada
function str pad $pad_type	el argumento opcional pad_type puede ser str_pad_right str_pad_left o str_pad_both
function str pad $pad_length	la longitud del relleno
function str pad $pad_string	nota : el pad_string se puede truncar si el número necesario de caracteres de relleno no pueden ser divididos uniformemente por la longitud de pad_string
function string str pad	devuelve el string rellenado
function string str pad string $input int $pad_length string $pad_string int $pad_type	rellena un string hasta una longitud determinada con otro string
function str split $split_length	longitud máxima del fragmento
function str split $string	el string de entrada
function array str split	si el parámetro opcional split_length se específica el array devuelto será separado en fragmentos los cuales cada uno tendrá una longitud de split_length de otra manera cada fragmento tendrá una longitud de un caracter
function array str split string $string int $split_length	convierte un string en un array
function str word count $charlist	una lista de caracteres adicionales los cuales serán considerados como de palabra
function str word count $format	especifica el valor devuelto de esta función
function str word count $string	el string
function mixed str word count	devuelve un array o un integer dependiendo del format seleccionado
function mixed str word count string $string int $format string $charlist	devuelve informaci&oacute;n sobre las palabras utilizadas en un string
function strcoll $str2	la segunda cadena
function strcoll $str1	la primera cadena
function int strcoll	devuelve < 0 si str1 es menor que str2 ; > 0 si str1 es mayor que str2 y 0 si son equivalentes
function int strcoll string $str1 string $str2	comparaci&oacute;n de cadenas basada en la localidad
function strcspn $subject	el string a examinar
function strcspn $length	la longitud del segmento de subject a examinar
function strcspn $mask	el string que contiene cada caracter no permitido
function strcspn $start	la posición en subject donde comenzar la búsqueda
function int strcspn	devuelve la longitud del segmento inicial de subject el cual consiste en todos los caracteres no presentes en mask
function int strcspn string $subject string $mask int $start int $length	averiguar la longitud del segmento inicial que no coincida con una m&aacute;scara
function stream bucket prepend $brigade	brigade es un recurso que apunta a una bucjet brigade cadena de recipientes que contiene uno o más objetos bucket recipiente
function stream bucket prepend $bucket	un objeto recipiente
function void stream bucket prepend resource $brigade object $bucket	a&ntilde;ade un recipiente al principio de una cadena de recipientes
function stream context create $options	debe ser un array asociativo de arrays asociativos con el formato $matriz envoltura [opción] = $valor
function stream context create $params	debe ser un array asociativo en el formato $matriz[parámetro] = $valor
function resource stream context create	un resource de contexto de flujo
function resource stream context create array $options array $params	crear un contexto de flujo
function stream context get params $stream_or_context	un resource de flujo o un resource de contexto
function array stream context get params	devuelve una matriz asociativa que contiene todas las opciones y parámetros del contexto
function array stream context get params resource $stream_or_context	recuperar los par&aacute;metros de un contexto
function stream context set params $stream_or_context	el flujo o el contexto para aplicar los parámetros
function stream context set params $params	un array de parámetros para configurar
function bool stream context set params	devuelve true en caso de éxito o false en caso de error
function bool stream context set params resource $stream_or_context array $params	establecer par&aacute;metros para un flujo / envoltura / contexto
function stream filter append $params	este filtro será añadido con los parámetros params especificados al final de la lista y por lo tanto será llamado el último durante las operaciones de flujo
function stream filter append $read_write	por omisión stream_filter_append() enlazará el filtro a la cadena de filtros de lectura si el archivo fue abierto para lectura esto es modo de archivo: r y / o +
function stream filter append $filtername	el nombre del filtro
function stream filter append $stream	el flujo objetivo
function resource stream filter append	devuelve un recurso en caso de éxito o false en caso de fallo
function resource stream filter append resource $stream string $filtername int $read_write mixed $params	enlaza un filtro a un flujo
function stream filter prepend $params	este filtro será añadido con los parámetros params especificados al inicio de la lista y por lo tanto será llamado el primero durante las operaciones de flujo
function stream filter prepend $read_write	por omisión stream_filter_prepend() adjuntará el filtro a la cadena de filtros de lectura si el fichero fue abierto para lectura esto es modo de fichero: r y / o +
function stream filter prepend $filtername	el nombre del filtro
function stream filter prepend $stream	el flujo objetivo
function resource stream filter prepend	devuelve un recurso en caso de éxito o false en caso de fallo
function resource stream filter prepend resource $stream string $filtername int $read_write mixed $params	adjunta un filtro a un flujo
function stream filter register $filtername	el nombre del filtro que va a ser registrado
function stream filter register $classname	para implementar un filtro se necesita definir una clase como una extensión de php_user_filter con un número de funciones miembro
function bool stream filter register	devuelve true en caso de éxito o false en caso de error
function bool stream filter register string $filtername string $classname	registrar un filtro de flujo definido por el usuario
function stream filter remove $stream_filter	el filtro de flujo a eliminar
function bool stream filter remove	devuelve true en caso de éxito o false en caso de error
function bool stream filter remove resource $stream_filter	elimina un filtro de un flujo
function stream get contents $offset(integer)	busca el índice especificado antes de leer
function stream get contents $maxlength(integer)	el máximo de bytes a leer
function stream get contents $handle(resource)	un recurso de flujo p
function string stream get contents	devuelve una cadena o false en caso de error
function string stream get contents resource $handle int $maxlength int $offset	transfiere el resto de un flujo a una cadena
function stream get line $handle	un gestor de archivo válido
function stream get line $ending	un delimitador de cadena opcional
function stream get line $length	el número de bytes a leer desde el gestor
function string stream get line	devuelve una cadena de hasta length bytes leídos desde el archivo apuntado por handle
function string stream get line resource $handle int $length string $ending	obtiene una l&iacute;nea del recurso de flujo hasta un delimitador dado
function stream get meta data $stream	el flujo puede ser cualquier flujo creado por fopen() fsockopen() y pfsockopen()
function array stream get meta data	la matriz resultante contiene los siguientes elementos:
function array stream get meta data resource $stream	recuperar meta-informaci&oacute;n o de cabecera de punteros a flujos / archivo
function array stream get wrappers	devuelve una matriz indexada que contiene el nombre de todas las envolturas de flujo disponibles en el sistema en ejecución
function array stream get wrappers	recupera la lista de los flujos registrados
function stream is local $stream_or_url	el resource de flujo o url a comprobar
function bool stream is local	devuelve true en caso de éxito o false en caso de error
function bool stream is local mixed $stream_or_url	comprueba si un flujo es un flujo local
function stream resolve include path $filename	el nombre de fichero a resolver
function string stream resolve include path	devuelve un string que contiene el nombre de fichero absoluto resuelto o false en caso de error
function string stream resolve include path string $filename	resuelve el nombre de archivo en la ruta incluida
function stream set blocking $mode	si mode es false el flujo dado será cambiado al modo de no-bloqueo y si es true será cambiado al modo de bloqueo
function stream set blocking $stream	el flujo
function bool stream set blocking	devuelve true en caso de éxito o false en caso de error
function bool stream set blocking resource $stream bool $mode	establecer el modo bloqueo / no-bloqueo en un flujo
function stream set read buffer $stream	el puntero al archivo
function stream set read buffer $buffer	el número de bytes del buffer
function int stream set read buffer	devuelve 0 en caso de éxito u otro valor si la petición no se pudo satisfacer
function int stream set read buffer resource $stream int $buffer	establece el b&uacute;fer de lectura de archivos en el flujo dado
function stream set timeout $microseconds	la parte de microsegundos del tiempo de espera a establecer
function stream set timeout $seconds	la parte de segundos del tiempo de espera a establecer
function stream set timeout $stream	el flujo objetivo
function bool stream set timeout	devuelve true en caso de éxito o false en caso de error
function bool stream set timeout resource $stream int $seconds int $microseconds	establecer un perido de tiempo de espera en un flujo
function stream set write buffer $stream	el puntero a un fichero
function stream set write buffer $buffer	el número de bytes del buffer
function int stream set write buffer	devuelve 0 en caso de éxito u otro valor si la petición no se pudo satisfacer
function int stream set write buffer resource $stream int $buffer	establece el b&uacute;fer para escritura de ficheros en el flujo dado
function stream socket accept $peername	se establecerá al nombre dirección del cliente que se conectó si está incluido y disponible desde el transporte seleccionado
function stream socket accept $server_socket	el socket del servidor desde donde aceptar una conexión
function stream socket accept $timeout	sobreescribe el tiemo de espera aceptado por defecto del socket
function resource stream socket accept	devuelve un flujo a la conexión del socket aceptado o false en caso de error
function resource stream socket accept resource $server_socket float $timeout string $peername	acepta una conexi&oacute;n sobre un socket creado por stream_socket_server
function stream socket client $context	un recurso de contexto válido creado con stream_context_create()
function stream socket client $errstr	será establecido al mensaje de error a nivel de sistema si la conexión falla
function stream socket client $flags	campo de máscara de bits que puede ser establecido a cualquier combinación de banderas de conexión
function stream socket client $timeout	número de segundos hasta que la llamda al sistema de connect() debería esperar
function stream socket client $remote_socket	dirección del socket al que se va a conectar
function stream socket client $errno	será establecido al número de error a nivel de sistema si la conexión falla
function resource stream socket client	si se tuvo éxito un recurso de flujo es devuelto el cuál se puede usar junto con las demás funciones de archivo tales como fgets() fgetss() fwrite() fclose() y feof() false si falló
function resource stream socket client string $remote_socket int $errno string $errstr float $timeout int $flags resource $context	abrir una conexi&oacute;n de socket de dominio de internet o unix
function stream socket get name $want_peer	si se establece a true se devolverá el nombre del socket remoto si se establece a false se devolverá el nombre del socket local
function stream socket get name $handle	el socket del que se va a obtener el nombre
function string stream socket get name	el nombre del socket
function string stream socket get name resource $handle bool $want_peer	recuperar el nombre de los sockets locales o remotos
function stream socket server $local_socket	el tipo de socket creado se determina por el transporte especificado usando el formato de url estándar: transporte: / / objetivo
function stream socket server $flags	campo de máscara de bits que puede ser establecido a cualquier combinación de banderas de conexión
function stream socket server $errno	si los argumentos opcionales errno y errstr están presentes serán establecidos para indicar el error a nivel de sistema ocurrido en las llamadas a nivel de sistema de socket() bind() y listen()
function stream socket server $errstr	véase la descripción de errno
function resource stream socket server	devuelve un flujo creado o false si se produjo un error
function resource stream socket server string $local_socket int $errno string $errstr int $flags resource $context	crear un socket de servidor de dominio de internet o de unix
function stream socket shutdown $how	una de las siguientes constantes: stream_shut_rd deshabilita recepciones stream_shut_wr deshabilita transmisiones o stream_shut_rdwr deshabilita recepciones y transmisiones
function stream socket shutdown $stream	un flujo abierto con stream_socket_client() por ejemplo
function bool stream socket shutdown	devuelve true en caso de éxito o false en caso de error
function bool stream socket shutdown resource $stream int $how	cerrar una conexi&oacute;n full-duplex
function stream wrapper register $flags	debería ser establecido a stream_is_url si protocol es un protocolo de url
function stream wrapper register $protocol	el nombre de la envoltura a ser registrada
function stream wrapper register $classname	el nombre de la clase que implementa protocol
function bool stream wrapper register	devuelve true en caso de éxito o false en caso de error
function bool stream wrapper register string $protocol string $classname int $flags	registra una envoltura de url implementada como una clase de php
function bool stream wrapper restore	devuelve true en caso de éxito o false en caso de error
function bool stream wrapper restore string $protocol	restablece una envoltura incluida que se dej&oacute; de registrar previamente
function bool stream wrapper unregister	devuelve true en caso de éxito o false en caso de error
function bool stream wrapper unregister string $protocol	deja de registrar una envoltura de url
function stripcslashes $str	the string to be unescaped
function string stripcslashes	devuelve la cadena sin escapar
function string stripcslashes string $str	desmarca la cadena marcada con addcslashes
function stripos $haystack	el string donde buscar
function stripos $offset	si se específica la búsqueda se iniciará en éste número de caracteres contados desde el inicio del string
function stripos $needle	observe que needle puede ser un string de uno o más caracteres
function mixed stripos	devuelve la posición donde está la aguja en relación al inicio del string haystack independiente de offset
function mixed stripos string $haystack string $needle int $offset	encuentra la posici&oacute;n de la primera aparici&oacute;n de un substring en un string sin considerar may&uacute;sculas ni min&uacute;sculas
function stristr $needle	si needle no es un string se convierte a un integer y se aplica como el valor ordinal de un caracter
function stristr $before_needle	si es true stristr() devuelve la parte del haystack anterior a la primera aparición del needle excluyendo el needle
function stristr $haystack	el string en donde buscar
function string stristr	devuelve el substring coincidente
function string stristr string $haystack mixed $needle bool $before_needle	strstr insensible a may&uacute;sculas y min&uacute;sculas
function strlen $string	el string del cual medir su longitud
function int strlen	la longitud del string en caso de éxito y 0 si el string esta vacío
function int strlen string $string	obtiene la longitud de un string
function strnatcasecmp $str1	el primer string
function strnatcasecmp $str2	el segundo string
function int strnatcasecmp	de forma similar a otras funciones de comparación esta devuelve < 0 si str1 es menor que str2 ; > 0 si str1 es mayor que str2 y 0 si son iguales
function int strnatcasecmp string $str1 string $str2	comparaci&oacute;n de strings insensible a may&uacute;sculas y min&uacute;sculas utilizando un algoritmo de orden natural
function strnatcmp $str1	el primer string
function strnatcmp $str2	el segundo string
function int strnatcmp	de forma similar a otras funciones de comparación esta devuelve < 0 si str1 es menor que str2 ; > 0 si str1 es mayor que str2 y 0 si son iguales
function int strnatcmp string $str1 string $str2	comparaci&oacute;n de strings utilizando un algoritmo de orden natural
function strncasecmp $str2	la segunda cadena
function strncasecmp $str1	la primera cadena
function strncasecmp $len	la longitud de cadenas a ser usada en la comparación
function int strncasecmp	devuelve < 0 si str1 es menor que str2 ; > 0 si str1 es mayor que str2 y 0 si son equivalentes
function int strncasecmp string $str1 string $str2 int $len	comparaci&oacute;n de los primeros n caracteres de cadenas segura con material binario e insensible a may&uacute;sculas y min&uacute;sculas
function strpos $needle	si la needle no es una cadena es convertida a integer y se interpreta como el valor ordinal de un carácter
function strpos $offset	si se específica la búsqueda iniciará en éste número de caracteres contados desde el inicio del string
function strpos $haystack	el string en donde buscar
function mixed strpos	devuelve la posición donde la aguja existe en relación al inicio del string haystack independiente del offset
function mixed strpos string $haystack mixed $needle int $offset	encuentra la posici&oacute;n de la primera ocurrencia de un substring en un string
function strptime $date(string)	la cadena a analizar p
function strptime $format(string)	el formato usado en date p
function array strptime	devuelve una matriz o false en caso de error
function array strptime string $date string $format	analiza una fecha / hora generada con strftime
function strrchr $needle	si needle contiene más de un caracter sólo se utiliza el primero
function strrchr $haystack	el string en donde buscar
function string strrchr	esta función devuelve la porción de string o false si no se encuentra needle
function string strrchr string $haystack mixed $needle	encuentra la &uacute;ltima aparici&oacute;n de un caracter en un string
function strrev $cadena	la cadena que será invertida
function string strrev	devuelve la cadena invertida
function string strrev string $string	invierte una string
function strripos $needle	si needle no es un string se convierte a un integer y se aplica como el valor ordinal de un caracter
function strripos $offset	si se especifica la búsqueda iniciará en éste número de caracteres contados desde el comienzo del string
function strripos $haystack	el string en donde buscar
function int strripos	devuelve la posición donde la aguja existe en relación al inicio del string haystack independiente de la dirección de la búsqueda o del offset
function int strripos string $haystack string $needle int $offset	encuentra la posici&oacute;n de la &uacute;ltima aparici&oacute;n de un substring insensible a may&uacute;sculas y min&uacute;sculas en un string
function strspn $subject	el string a examinar
function strspn $mask	la lista de caracteres permitidos
function strspn $length	la longitud del segmento de subject a examinar
function strspn $start	la posición en subject donde iniciar la búsqueda
function int strspn	devuelve la longitud del segmento inicial de subject el cual enteramente consiste en caracteres en mask
function int strspn string $subject string $mask int $start int $length	averigua la longitud del segmento inicial de un string que consista &uacute;nicamente en caracteres contenidos dentro de una m&aacute;scara dada
function strstr $before_needle	si se define como true strstr() devolverá la parte del haystack antes de la primera ocurrencia de needle excluyendo el needle
function strstr $needle	si needle no es un string será convertido como número entero y se aplicará el valor ordinal de caracter
function strstr $haystack	el string en donde buscar
function string strstr	devuelve una parte de un string o false si no se encuentra el needle
function string strstr string $haystack mixed $needle bool $before_needle	encuentra la primera aparici&oacute;n de un string
function strtok $str	el string a ser dividido en strings más pequeños tokens
function strtok $token	el delimitador usado cuando se divide str
function string strtok	un token de string
function string strtok string $str string $token	tokeniza string
function strtolower $string	la cadena de entrada
function string strtolower	devuelve la cadena en minúsculas
function string strtolower string $string	convierte una cadena a min&uacute;sculas
function strtr $replace_pairs	el parámetro replace_pairs se podría usar en lugar de to y from en cuyo caso sería un array en la forma array( from = > to
function strtr $string	el string a convertir
function strtr $to	el string que reemplaza a from
function strtr $from	el string a convertir a to
function string strtr	devuelve el string convertido
function string strtr string $str string $from string $to	convierte caracteres o reemplaza substrings
function substr count $needle	el substring a buscar
function substr count $offset	el desplazamiento por dónde empezar a contar
function substr count $haystack	el string dentro del cual buscar
function substr count $length	la longitud máxima después del desplazamiento especificado para buscar el substring
function int substr count	esta función devuelve un integer
function int substr count string $haystack string $needle int $offset int $length	cuenta el n&uacute;mero de apariciones del substring
function svn add $recursive	si el artículo es un directorio si desea o no añadir de forma recursiva todos sus contenidos
function svn add $force	si es true subversion recorrerá recursivamente en los directorios ya versionados a fin de agregar archivos no versionados que pueden estar ocultos en esos directorios
function svn add $path	ruta al artículo a ser agregado
function bool svn add	devuelve true en caso de éxito o false en caso de error
function bool svn add string $path bool $recursive bool $force	programa la adici&oacute;n de un art&iacute;culo en un directorio de trabajo
function svn auth get parameter $key	nombre de la clave
function string svn auth get parameter	devuelve el valor de cadena del parámetro en key ; devuelve null si el parámetro no existe
function string svn auth get parameter string $key	recupera un par&aacute;metros de autenticaci&oacute;n
function svn cat $repos_url	la ruta url del ítem en el repositorio cadena
function svn cat $revision_no	número de revisión del ítem a obtener por defecto es la última revisión entero
function string svn cat	devuelve el contenido del ítem del repositorio en caso de éxito y false en caso de error
function string svn cat string $repos_url int $revision_no	devuelve el contenido de un fichero en un repositorio
function svn checkout $repos	cadena url con la ruta al directorio en el repositorio a descargar
function svn checkout $flags	cualquier combinación de svn_non_recursive y svn_ignore_externals
function svn checkout $revision	número de la revisión del repositorio a descargar
function svn checkout $targetpath	cadena con la ruta local del directorio en donde descargar
function bool svn checkout	devuelve true en caso de éxito o false en caso de error
function bool svn checkout string $repos string $targetpath int $revision int $flags	descarga una copia de trabajo desde el repositorio
function svn cleanup $workingdir	ruta local del directorio de trabajo a limpiar nota : las rutas relativas se resolverán como si el directorio de trabajo actual es el que contiene el binario de php
function bool svn cleanup	devuelve true en caso de éxito o false en caso de error
function bool svn cleanup string $workingdir	limpieza recursiva del directorio de trabajo finalizando operaciones no completadas y eliminado bloqueos
function string svn client version	cadena de texto con el número de versión normalmente con el formato x
function string svn client version	devuelve la versi&oacute;n de las librerias del cliente svn
function svn commit $targets	array de rutas locales de archivos para hacer commit advertencia este parámetro tiene que ser un array no será aceptada un string para un único target
function svn commit $log	string del log para el commit
function svn commit $recursive	flag para desactivar el commit recursivo de directorios en el targets array
function array svn commit	se devuelve un array con la siguiente estructura:
function array svn commit string $log array $targets bool $recursive	env&iacute;a los cambios desde el directorio local de trabajo al repositorio
function svn delete $force	en caso que sea true el fichero será eliminado incluso si se han hecho modificaciones en local
function svn delete $path	ruta o ítem a eliminar
function bool svn delete	devuelve true en caso de éxito o false en caso de error
function bool svn delete string $path bool $force	elimina &iacute;tems de una copia de trabajo o repositorio
function svn diff $path2	segunda ruta de acceso a comparar
function svn diff $rev2	número de revisión de la segunda ruta de acceso
function svn diff $rev1	número de revisión de la primera ruta de acceso
function svn diff $path1	la primera ruta de acceso a comparar
function array svn diff	devuelve un array consistente en dos flujos: el primero es la salida de la comparación y el segundo contiene el flujo de salida de error
function array svn diff string $path1 int $rev1 string $path2 int $rev2	compara dos rutas de acceso recursivamente
function svn export $topath	la ruta del nuevo repositorio
function svn export $working_copy	si es true exportará ficheros no cometidos de la copia de trabajo
function svn export $frompath	la ruta del repositorio actual
function bool svn export	devuelve true en caso de éxito o false en caso de error
function bool svn export string $frompath string $topath bool $working_copy int $revision_no	exporta el contenido de un directorio svn
function svn import $url	repositorio url dentro del que se importa
function svn import $nonrecursive	si se realiza o no el procesamiento recursivo de los directorios
function svn import $path	ruta de acceso al fichero o directorio a importar
function bool svn import	devuelve true en caso de éxito o false en caso de error
function bool svn import string $path string $url bool $nonrecursive	importa una ruta de acceso sin versi&oacute;n dentro de un repositorio
function svn mkdir $path	la ruta a la copia de trabajo o repositorio
function bool svn mkdir	devuelve true en caso de éxito o false en caso de error
function bool svn mkdir string $path string $log_message	crea un directorio en la copia de trabajo actual o repositorio
function svn revert $recursive	hacer cambios de forma recursiva opcional
function svn revert $path	la ruta del repositorio de trabajo
function bool svn revert	devuelve true en caso de éxito o false en caso de error
function bool svn revert string $path bool $recursive	deshace los cambios en la copia de trabajo
function svn status $flags	cualquier combinación de svn_non_recursive svn_all independientemente del estado de modificación svn_show_updates se añadirán entradas para los elementos que estan desactualizados svn_no_ignore ignorar svn:ignore las propiedades cuando se busquen nuevos ficheros y svn_ignore_externals
function svn status $path	path local al fichero o directorio del que se obtendrá el estado
function array svn status	devuelve un array de arrays asociativos indexado numéricamente detallando el estado de los elementos del repositorio:
function array svn status string $path int $flags	devuelve el estado de la copia de trabajo de los ficheros y directorios
function svn update $revno	número de revisión a actualziar por omisión es svn_revision_head
function svn update $path	ruta a la copia de trabajo local
function svn update $recurse	si se actualizan o no recursivamente directorios
function int svn update	devuelve un nuevo número de revisión en caso de tener éxito devuelve false al fallar
function int svn update string $path int $revno bool $recurse	actualiza la copia de trabajo
function sybase close $link_identifier	si no se especifica el identificador de conexión se asumirá que es el correspondiente a la última conexión abierta
function bool sybase close	devuelve true en caso de éxito o false en caso de error
function bool sybase close resource $link_identifier	cierra una conexi&oacute;n sybase
function bool sybase data seek	devuelve true en caso de éxito o false en caso de error
function bool sybase data seek resource $result_identifier int $row_number	desplaza el apuntador de filas interno
function sybase deadlock retry count $retry_count	valores para el parámetro retry_count -1 reintentar infinitamente por defecto 0 no reintentar n reintentar n veces
function void sybase deadlock retry count int $retry_count	devuelve el n&uacute;mero de reintentos en caso de bloqueo deadlock
function array sybase fetch assoc	devuelve un array que corresponde a la fila cargada o false si no hay más filas
function array sybase fetch assoc resource $result	carga una fila resultante de sybase como un array asociativo
function sybase fetch field $field_offset	si no se especifica el campo offset se obtiene el siguiente campo que no había sido obtenido todavía con sybase_fetch_field()
function object sybase fetch field	devuelve un objeto que contiene información de campo
function object sybase fetch field resource $result int $field_offset	obtiene informaci&oacute;n de un campo de resultado sybase
function sybase fetch object $object	utilizar el segundo parámetro object para especificar el tipo del objeto que se quiere devolver
function object sybase fetch object	devuelve un objeto que contiene la fila devuelta o false si no hay más filas
function object sybase fetch object resource $result mixed $object	devuelve una fila sybase como un objeto
function string sybase get last message	devuelve un mensaje como un string
function string sybase get last message	devuelve el &uacute;ltimo mensaje del servidor
function void sybase min message severity int $severity	fija la severidad m&iacute;nima del cliente para los mensajes
function void sybase min server severity int $severity	fija la severidad m&iacute;nima del servidor sybase
function int sybase num fields	devuelve el número de campos como un entero
function int sybase num fields resource $result	devuelve el n&uacute;mero de campos que hay en un resultado sybase
function int sybase num rows	devuelve el número de filas como un entero
function int sybase num rows resource $result	devuelve el n&uacute;mero de filas que hay en un resultado sybase
function sybase pconnect $username	nombre de usuario sybase
function sybase pconnect $charset	especifica el mapa de caracteres para la conexión
function sybase pconnect $servername	el parámetro servername ha de ser un nombre de servidor válido que esté definido en el fichero interfaces
function sybase pconnect $password	contraseña asociada a username
function sybase pconnect $appname	especifica un appname para la conexión sybase
function resource sybase pconnect	devuelve un identificador de conexión persistente sybase en caso de éxito o false en caso de error
function resource sybase pconnect string $servername string $username string $password string $charset string $appname	abre una conexi&oacute;n persistente a un servidor sybase
function sybase query $link_identifier	si no se especifica el parámetro link_identifier se utiliza la última conexión establecida
function mixed sybase query	devuelve un identificador de resultado sybase en caso de éxito false en caso de error o true si la consulta se ejecutó satisfactoriamente pero no devolvió ninguna columna
function mixed sybase query string $query resource $link_identifier	env&iacute;a una consulta a una base sybase
function sybase select db $link_identifier	si no se especifica un identificador de conexión se asumirá la última conexión abierta
function bool sybase select db	devuelve true en caso de éxito o false en caso de error
function bool sybase select db string $database_name resource $link_identifier	selecciona una base de datos sybase
function symlink $target	objetivo del enlace
function symlink $link	el nombre del enlace
function bool symlink	devuelve true en caso de éxito o false en caso de error
function bool symlink string $target string $link	crea un enlace simb&oacute;lico
function string sys get temp dir	devuelve la ruta del directorio temporal
function string sys get temp dir	devuelve la ruta del directorio para archivos temporales
function syslog $priority	priority es una combinación del tipo y el nivel
function syslog $message	el mensaje a enviar a excepción de dos caracteres %m serán reemplazados con el mensaje de error strerror correspondiente con el valor presente de errno
function bool syslog	devuelve true en caso de éxito o false en caso de error
function bool syslog int $priority string $message	genera un mensaje log de sistema
function system $comando	el comando que será ejecutado
function system $return_var	si el argumento return_var se encuentra presente entonces el status devuelto por el comando ejecutado será almacenado en esta variable
function string system	devuelve la última línea de la salida del comando en caso de tener éxito y false si ocurre un error
function string system string $command int $return_var	ejecutar un programa externo y mostrar su salida
function tanh $arg	el argumento a procesar
function float tanh	la tangente hiperbólica de arg
function float tanh float $arg	tangente hiperb&oacute;lica
function tcpwrap check $address	la dirección remota del cliente
function tcpwrap check $daemon	el nombre del servicio
function tcpwrap check $nodns	si address es un nombre de dominio se empleará el dns para resolverlo a una dirección ip; establezca nodns a true para evitar este comportamiento
function tcpwrap check $user	un nombre de usuario opcional
function bool tcpwrap check	esta función devuelve true si se debería permitir el acceso false si no
function bool tcpwrap check string $daemon string $address string $user bool $nodns	realiza una comprobaci&oacute;n tcpwrap
function tempnam $dir	el directorio donde el nombre de fichero temporal será creado
function tempnam $prefix	el prefijo del nombre de fichero temporal generado
function string tempnam	devuelve el nuevo nombre del fichero temporal o false si falla
function string tempnam string $dir string $prefix	crea un fichero con un nombre de fichero &uacute;nico
function textdomain $text_domain	el nuevo mensaje del dominio o null para obtener el valor actual y no cambiarlo
function string textdomain	si es correcto esta función devuelve el dominio del mensaje actual después de cambiarlo
function string textdomain string $text_domain	establece el dominio actual
function tidy access count $object	el objeto tidy
function int tidy access count	devuelve el número de alertas
function int tidy access count tidy $object	devuelve el n&uacute;mero de alertas de accesibilidad tidy encontradas en un documento dado
function tidy config count $object	el objeto tidy
function int tidy config count	devuelve el número de errores
function int tidy config count tidy $object	devuelve el n&uacute;mero de errores de configuraci&oacute;n tidy encontrados en un documento dado
function tidy error count $object	el objeto tidy
function int tidy error count	devuelve el número de errores
function int tidy error count tidy $object	devuelve el n&uacute;mero de errores tidy encontrados en un documento dado
function void tidy load config string $filename string $encoding	carga un archivo de configuraci&oacute;n ascii tidy con la codificaci&oacute;n especificada
function bool tidy reset config	devuelve true en caso de éxito o false en caso de error
function bool tidy reset config	restaura la configuraci&oacute;n tidy a sus valores por omisi&oacute;n
function tidy set encoding $encoding	el parámetro de codificación encoding establece la codificación de la entrada / salida de los documentos
function bool tidy set encoding	devuelve true en caso de éxito o false en caso de error
function bool tidy set encoding string $encoding	establece el juego de caracteres de entrada / salida del analizador de etiquetas
function tidy setopt $option	el nombre de la opción tidy
function tidy setopt $value	el nombre de la opción tidy
function bool tidy setopt	devuelve true en caso de éxito o false en caso de error
function bool tidy setopt string $option mixed $value	modifica los ajustes de configuraci&oacute;n tidy para el documento especificado
function tidy warning count $object	el objeto tidy
function int tidy warning count	devuelve el número de alertas
function int tidy warning count tidy $object	devuelve el n&uacute;mero de alertas encontradas en un documendo dado
function time nanosleep $nanoseconds	debe ser un entero positivo menor que mil millones 1000000000
function time nanosleep $seconds	debe ser un entero no negativo
function mixed time nanosleep	devuelve true en caso de éxito o false en caso de error
function mixed time nanosleep int $seconds int $nanoseconds	retrasar por un n&uacute;mero de segundos y nanosegundos
function time sleep until $timestamp	la marca de tiempo en la que el script debería despertar
function bool time sleep until	devuelve true en caso de éxito o false en caso de error
function bool time sleep until float $timestamp	hacer que el script duerma hasta el momento especificado
function int time	devuelve la fecha unix actual
function string timezone version get	devuelve un string
function string timezone version get	obtiene la versi&oacute;n de la base de datos timezonedb
function token get all $source	la fuente php a analizar
function array token get all	un array de tokens identificadores
function array token get all string $source	divide la fuente dada en tokens php
function token name $token	el valor token
function string token name	el nombre simbólico para el token dado
function string token name int $token	obtiene el nombre simb&oacute;lico de un token php dado
function trader acos $real	array de valores reales
function array trader acos	devuelve un array con los datos calculados o false en caso de fallo
function array trader acos array $real	arcocoseno trigonom&eacute;trico de vectores
function trader add $real0	array de valores reales
function trader add $real1	array de valores reales
function array trader add	devuelve un array con los datos calculados o false en caso de fallo
function array trader add array $real0 array $real1	suma aritm&eacute;tica de vectores
function trader asin $real	array de valores reales
function array trader asin	devuelve un array con los datos calculados o false en caso de fallo
function array trader asin array $real	arcoseno trigonom&eacute;trico de vectores
function trader ceil $real	array de valores reales
function array trader ceil	devuelve un array con los datos calculados o false en caso de fallo
function array trader ceil array $real	redondeo hacia arriba de vectores
function trader cos $real	array de valores reales
function array trader cos	devuelve un array con los datos calculados o false en caso de fallo
function array trader cos array $real	coseno trigonom&eacute;trico de vectores
function trader cosh $real	array de valores reales
function array trader cosh	devuelve un array con los datos calculados o false en caso de fallo
function array trader cosh array $real	coseno hiperb&oacute;lico de un vector
function trader exp $real	array de valores reales
function array trader exp	devuelve un array con los datos calculados o false en caso de error
function array trader exp array $real	exponencial aritm&eacute;tica de vectores
function trader floor $real	array de valores reales
function array trader floor	devuelve un array con los datos calculados o false en caso de error
function array trader floor array $real	redondeo hacia abajo de vectores
function integer trader get compat	devuelve el id del modo de compatibilidad que puede ser identificado por la serie de constantes de trader_compatibility_*
function integer trader get compat	obtiene el modo de compatibilidad
function trader get unstable period $functionId	el id de la función por la que leer el factor
function integer trader get unstable period	devuelve el factor del periodo inestable para la función correspondiente
function integer trader get unstable period integer $functionId	obtiene el periodo inestable
function trader ln $real	array de valores reales
function array trader ln	devuelve un array con los datos calculados o false en caso de error
function array trader ln array $real	logaritmo natural de vectores
function trader log10 $real	array de valores reales
function array trader log10	devuelve un array con los datos calculados o false en caso de error
function array trader log10 array $real	logaritmo en base 10 de vectores
function trader mult $real0	array de valores reales
function trader mult $real1	array de valores reales
function array trader mult	devuelve un array con los datos calculados o false en caso de error
function array trader mult array $real0 array $real1	multiplicaci&oacute;n aritm&eacute;tica de vectores
function trader set unstable period $functionId	el id de la función para la cual debería establecerse el factor
function trader set unstable period $timePeriod	el valor de periodo inestable
function void trader set unstable period integer $functionId integer $timePeriod	establece el periodo inestable
function trader sinh $real	array de valores reales
function array trader sinh	devuelve un array con los datos calculados o false en caso de error
function array trader sinh array $real	seno hiperb&oacute;lico de vectores
function trader sub $real0	array de valores reales
function trader sub $real1	array de valores reales
function array trader sub	devuelve un array con los datos calculados o false en caso de error
function array trader sub array $real0 array $real1	sustracci&oacute;n artim&eacute;tica de vectores
function trader tan $real	array de valores reales
function array trader tan	devuelve un array con los datos calculados o false en caso de error
function array trader tan array $real	tangente trigonom&eacute;trica de vectores
function trader tanh $real	array de valores reales
function array trader tanh	devuelve un array con los datos calculados o false en caso de error
function array trader tanh array $real	tangente hiperb&oacute;lica trigonom&eacute;trica de vectores
function trigger error $error_type	el tipo de error designado para este error
function trigger error $error_msg	el mensaje de error designado para este error
function bool trigger error	esta función devuelve false si se especifica un error_type erróneo si no true
function bool trigger error string $error_msg int $error_type	generar un mensaje de error / advertencia / aviso de nivel de usuario
function udm cat list $agent	un enlace al agente recibido después de llamar a udm_alloc_agent()
function array udm cat list	devuelve un array con las categorías del mismo nivel que la actual category en el árbol de categorías
function array udm cat list resource $agent string $category	obtener todas las categor&iacute;as del mismo nivel que la actual
function bool udm check charset resource $agent string $charset	check if the given charset is known to mnogosearch
function int udm crc32 resource $agent string $str	devuelve el crc32 checksum del string dado
function udm error $agent	un enlace al agente obtenido después de llamar a udm_alloc_agent()
function string udm error	udm_error() devuelve el mensaje de error mnogosearch o una cadena vacía en caso de no haber ningún error
function string udm error resource $agent	obtiene el mensaje de error mnogosearch
function udm free agent $agent	un enlace al agente recibido después de llamar a udm_alloc_agent()
function int udm free agent	devuelve true en caso de éxito o false en caso de error
function int udm free agent resource $agent	liberar sesi&oacute;n mnogosearch
function udm free res $res	un enlace a un identificador de resultado recibido después de llamar a udm_find()
function bool udm free res	devuelve true en caso de éxito o false en caso de error
function bool udm free res resource $res	libera result mnogosearch
function udm get doc count $agent	un enlace a agent recibido después de llamar a udm_alloc_agent()
function int udm get doc count	devuelve el número de documentos
function int udm get doc count resource $agent	obtener el n&uacute;mero total de documentos en la base de datos
function udm hash32 $str	el string de entrada
function udm hash32 $agent	un enlace a agent recibido después de llamar a udm_alloc_agent()
function int udm hash32	devuelve un número hash 32-bit
function int udm hash32 resource $agent string $str	devuelve el hash32 checksum del string dado
function udm load ispell data $var	indicates the source for ispell data
function udm load ispell data $agent	a link to agent received after call to udm_alloc_agent()
function bool udm load ispell data	devuelve true en caso de éxito o false en caso de error
function bool udm load ispell data resource $agent int $var string $val1 string $val2 int $flag	load ispell data
function unixtojd $timestamp	una fecha unix a convertir
function int unixtojd	un número de día juliano como un entero
function int unixtojd int $timestamp	convertir una fecha unix en una fecha juliana
function urldecode $str	la cadena a ser decodificada
function string urldecode	devuelve la cadena decodificada
function string urldecode string $str	decodifica una cadena cifrada como url
function urlencode $str	la cadena a ser codificada
function string urlencode	devuelve una cadena en la que todos los caracteres no-alfanuméricos excepto -_
function string urlencode string $str	codifica como url una cadena
function usleep $micro_seconds	tiempo de parada en microsegundos
function void usleep int $micro_seconds	retrasar la ejecuci&oacute;n en microsegundos
function usort $array	el array de entrada
function usort $value_compare_func	la función de comparación debe devolver un entero menor igual o mayor que cero si el primer argumento se considera que sea respectivamente menor igual o mayor que el segundo
function bool usort	devuelve true en caso de éxito o false en caso de error
function bool usort array $array callable $value_compare_func	ordena un array seg&uacute;n sus valores usando una funci&oacute;n de comparaci&oacute;n definida por el usuario
function utf8 decode $data	una cadena codificada utf-8
function string utf8 decode	devuelve la traducción iso-8859-1 de los data
function string utf8 decode string $data	convierte una cadena con los caracteres codificados iso-8859-1 con utf-8 a un sencillo byte iso-8859-1
function utf8 encode $data	un string iso-8859-1
function string utf8 encode	devuelve la traducción utf-8 de data
function string utf8 encode string $data	codifica un string iso-8859-1 a utf-8
function variant abs $val	la variante
function mixed variant abs	devuelve el valor absoluto de val
function mixed variant abs mixed $val	devuelve el valor absoluto de una variante
function variant add $left	el operando izquierdo
function variant add $right	el operando derecho
function mixed variant add	devuelve el resultado
function mixed variant add mixed $left mixed $right	suma dos variantes y devuelve el resultado
function variant and $left	el operando izquierdo
function variant and $right	el operando derecho
function mixed variant and	reglas de aplicar and a variantes si left es si right es entonces el resultado es true true true true false false true null null false true false false false false false null false null true null null false false null null null
function mixed variant and mixed $left mixed $right	realiza una operaci&oacute;n and a nivel de bits entre dos variantes
function variant cast $type	type debería ser una de las constantes vt_xxx
function variant cast $variant	la variante
function variant variant cast	devuelve una variante vt_date
function variant variant cast variant $variant int $type	convertir una variante en un nuevo objeto variante de otro tipo
function variant cat $left	el operando izquierdo
function variant cat $right	el operando derecho
function mixed variant cat	devuelve el resultado de la concatenación
function mixed variant cat mixed $left mixed $right	concatena dos valores de variantes y devuelve el resultado
function variant date to timestamp $variant	la variante
function int variant date to timestamp	devuelve una fecha unix
function int variant date to timestamp variant $variant	convierte un valor de una variante de fecha / hora en una fecha unix
function variant eqv $left	el operando izquierdo
function variant eqv $right	el operando derecho
function mixed variant eqv	si cada bit de left es igual al bit correspondiente de right se devuelve true si no se devuelve false
function mixed variant eqv mixed $left mixed $right	realiza una equivalencia a nivel de bits en dos variantes
function variant fix $variant	la variante
function mixed variant fix	si variant es negativo se devuelve el primer entero negativo mayor o igual que la variante de otro modo se devuelve la parte entera del valor de variant
function mixed variant fix mixed $variant	devuelve la parte entera de una variante
function variant get type $variant	el objeto variante
function int variant get type	esta función devuelve un valor de tipo integer que indica el tipo de variant que puede ser una instancia de las clases com dotnet o variant
function int variant get type variant $variant	devuelve el tipo de un objeto variante
function variant idiv $left	el operando izquierdo
function variant idiv $right	el operando derecho
function mixed variant idiv mixed $left mixed $right	convierte variantes a enteros y despu&eacute;s devuelve el resultado dividi&eacute;ndolos
function variant imp $left	el operando izquierdo
function variant imp $right	el operando derecho
function mixed variant imp	tabla de implicación de variantes si left es si right es entonces el resultado es true true true true false true true null true false true true false false true false null true null true true null false null null null null
function mixed variant imp mixed $left mixed $right	realiza una implicaci&oacute;n a nivel de bits de dos variantes
function variant int $variant	la variante
function mixed variant int	si variant es negativo se devuelve el primer entero negativo mayor o igual a la variante de otro modo se devuelve la parte entera del valor de variant
function mixed variant int mixed $variant	devuelve la parte entera de una variante
function variant mul $left	el operando izquierdo
function variant mul $right	el operando derecho
function mixed variant mul mixed $left mixed $right	multiplica los valores de dos variantes
function variant neg $variant	la variante
function mixed variant neg	devuelve el resultado de la negación lógica
function mixed variant neg mixed $variant	realiza una negaci&oacute;n l&oacute;gica de una variante
function variant not $variant	la variante
function mixed variant not	devuelve la negación not a nivel de bits
function mixed variant not mixed $variant	realiza una negaci&oacute;n not a nivel de bits en una variante
function variant or $left	el operando izquierdo
function variant or $right	el operando derecho
function mixed variant or	reglas del uso de or de variantes si left es si right es entonces el resultado es true true true true false true true null true false true true false false false false null null null true true null false null null null null
function mixed variant or mixed $left mixed $right	realiza una disyunci&oacute;n l&oacute;gica de dos variantes
function variant pow $left	el operando izquierdo
function variant pow $right	el operando derecho
function mixed variant pow	devuelve el resultado de left a la potencia right
function mixed variant pow mixed $left mixed $right	devuelve el resultado de realizar la exponenciaci&oacute;n con dos variantes
function variant set type $variant	la variante
function void variant set type variant $variant int $type	convierte una variante en otro tipo in situ
function variant sub $left	el operando izquierdo
function variant sub $right	el operando derecho
function mixed variant sub mixed $left mixed $right	resta el valor de la variante derecha del valor de la varienta izquierda
function variant xor $left	el operando izquierdo
function variant xor $right	el operando derecho
function mixed variant xor	reglas de exclusión de variantes si left es si right es entonces el resultado es true true false true false true false true true false false false null null null
function mixed variant xor mixed $left mixed $right	realiza una excluci&oacute;n l&oacute;gica de dos variantes
function version compare $version1	primer número de versión
function version compare $operator	si se especifica el tercer argumento opcional operator se prueba para una relación en particular
function version compare $version2	segundo número de versión
function mixed version compare	por omisión version_compare() devuelve -1 si la primera versión es inferior a la segunda 0 si son iguales y 1 si la segunda es inferior
function mixed version compare string $version1 string $version2 string $operator	compara dos n&uacute;meros de versiones estandarizados de php
function vfprintf $format	ver sprintf() para una descripción de format
function int vfprintf	devuelve la longitud del string de salida
function int vfprintf resource $handle string $format array $args	escribe un string con formato en un flujo
function virtual $filename	el archivo sobre el que se efectuará el comando virtual
function bool virtual	ejecuta el comando virtual en caso de éxito o devuelve false si ocurre un error
function bool virtual string $filename	realiza una sub-petici&oacute;n de apache
function vprintf $format	ver sprintf() para una descripción de format
function int vprintf	devuelve la longitud de la cadena mostrada
function int vprintf string $format array $args	muestra una cadena con formato
function wddx deserialize $packet	un paquete wddx como un string o cadena
function mixed wddx deserialize	devuelve un valor deserializado que puede ser una cadena un número o un array
function mixed wddx deserialize string $packet	deserializa un packet wddx
function wddx packet end $packet_id	un paquete wddx devuelto por wddx_packet_start()
function string wddx packet end	devuelve la cadena que contiene el paquete wddx
function string wddx packet end resource $packet_id	finaliza un paquete wddx con un id espec&iacute;fico
function wddx serialize vars $var_name	pude ser una cadena una variable o un array conteniendo una cadena una variable u otro array etc
function string wddx serialize vars	devuelve el paquete wddx o false en caso de error
function string wddx serialize vars mixed $var_name	serializa variables en un paquete wddx
function win32 continue service $servicename	el nombre corto del servicio
function win32 continue service $machine	nombre opcional de la máquina
function int win32 continue service	devuelve win32_no_error en caso de éxito false si hay un problema con los parámetros o código de error win32 en caso de error
function int win32 continue service string $servicename string $machine	reanuda un servicio pausado
function win32 delete service $servicename	el nombre corto del servicio
function win32 delete service $machine	el nombre opcional de la máquina
function mixed win32 delete service	devuelve win32_no_error en caso de éxito false si hay un problema con los parámetros o código de error win32 en caso de error
function mixed win32 delete service string $servicename string $machine	borra una entrada de servicio de la base de datos del acs
function int win32 get last control message	devuelve una constante de control que puede ser una de las constantes de mensajes de control de servicio de win32service : win32_service_control_continue win32_service_control_interrogate win32_service_control_pause win32_service_control_preshutdown win32_service_control_shutdown win32_service_control_stop
function int win32 get last control message	devuelve el &uacute;ltimo mensaje de control que fue enviado a este servicio
function win32 pause service $servicename	el nombre corto del servicio
function win32 pause service $machine	nombre opcional de la máquina
function int win32 pause service	devuelve win32_no_error en caso de éxito false si hay un problema con los parámetros o código de error win32 en caso de error
function int win32 pause service string $servicename string $machine	pausa un servicio
function array win32 ps stat mem	devuelve false si falló o una matriz consistente en la siguiente información si se tuvo éxito:
function array win32 ps stat mem	estad&iacute;sticas de utilizaci&oacute;n de memoria
function win32 start service ctrl dispatcher $name	el nombre corto del servicio como se registró mediante win32_create_service()
function mixed win32 start service ctrl dispatcher	devuelve true en caso de éxito false si hay un problema con los parámetros o código de error win32 en caso de error
function mixed win32 start service ctrl dispatcher string $name	registra el script con el acs por lo que puede actuar como el servicio con el nombre dado
function win32 start service $servicename	el nombre corto del servicio
function win32 start service $machine	el nombre opcional de la máquina
function int win32 start service	devuelve win32_no_error en caso de éxito false si hay un problema con los parámetros o código de error win32 en caso de error
function int win32 start service string $servicename string $machine	inicia un servicio
function win32 stop service $servicename	el nombre corto del servicio
function win32 stop service $machine	el nombre opcional de la máquina
function int win32 stop service	devuelve win32_no_error en caso de éxito false si hay un problema con los parámetros o código de error win32 en caso de error
function int win32 stop service string $servicename string $machine	detiene un servicio
function array wincache scache meminfo	array de metadatos sobre el uso de la memoria caché de sesión o false en caso de error
function array wincache scache meminfo	recupera informaci&oacute;n sobre el uso de memoria cach&eacute; de sesi&oacute;n
function wincache ucache cas $old_value	valor anterior de la variable apuntada por key en la memoria caché del usuario
function wincache ucache cas $new_value	el nuevo valor que se asigna a una variable new value which will get assigned to variable indicado por la key si se encuentra una coincidencia
function wincache ucache cas $key	el parámetro key que se utiliza para almacenar la variable en la caché
function bool wincache ucache cas	devuelve true en caso de éxito o false en caso de error
function bool wincache ucache cas string $key int $old_value int $new_value	compara la variable con el valor antiguo y le asigna un nuevo valor a este
function wincache ucache get $success	se establecerá en true en caso de éxito y false en caso de error
function wincache ucache get $key	la key que se utiliza para almacenar la variable en la caché
function mixed wincache ucache get mixed $key bool $success	obtiene una variable almacenada en la cach&eacute; del usuario
function wincache ucache info $summaryonly	controla si el array devuelto contiene información sobre las entradas de caché individuales junto con el resumen caché del usuario
function wincache ucache info $key	la clave de una entrada en la caché del usuario
function array wincache ucache info	array de metadatos sobre caché de usuario o false en caso de error
function array wincache ucache info bool $summaryonly string $key	recupera informaci&oacute;n sobre los datos almacenados en la cach&eacute; del usuario
function array wincache ucache meminfo	array de metadatos sobre el uso de la memoria caché de usuario o false en caso de error
function array wincache ucache meminfo	recupera informaci&oacute;n sobre el uso de memoria cach&eacute; de usuario
function wincache unlock $key	nombre de la llave en la caché para liberar el bloqueo
function bool wincache unlock	devuelve true en caso de éxito o false en caso de error
function bool wincache unlock string $key	libera un bloqueo exclusivo sobre una clave dada
function wordwrap $width	el número de caracteres en el cual el string se verá envuelto
function wordwrap $str	el string de entrada
function wordwrap $break	la línea se rompe utilizando el parámetro opcional break
function wordwrap $cut	si cut se establece en true el string siempre será ajustado en o antes del width especificado
function string wordwrap	devuelve el string dado ajustado a la longitud especificada
function string wordwrap string $str int $width string $break bool $cut	ajusta un string hasta un n&uacute;mero dado de caracteres
function xattr set $filename	el archivo en el que se establece el atributo
function xattr set $flags	banderas xattr soportadas xattr_create la función falla si el atributo extendido ya existe
function xattr set $value	el valor del atributo
function xattr set $name	el nombre del atributo extendido
function bool xattr set	devuelve true en caso de éxito o false en caso de error
function bool xattr set string $filename string $name string $value int $flags	establece un atributo extendido
function xattr supported $filename	la ruta del archivo de prueba
function xattr supported $flags	banderas xattr soportadas xattr_dontfollow no sigue el enlace simbólico pero se puede operar en este
function bool xattr supported	esta función devuelve true si sistema de archivo soporta los atributos extendidos false si no soporta y null si no se puede determinar por ejemplo ruta incorrecta o le faltan permisos al archivo
function bool xattr supported string $filename int $flags	comprueba si soporta los atributos extendidos del sistema de archivos
function xdiff file bdiff size $file	la ruta al parche binario creado por la función xdiff_string_bdiff() o xdiff_string_rabdiff()
function int xdiff file bdiff size	devuelve el tamaño del archivo que se creará
function int xdiff file bdiff size string $file	lee el tama&ntilde;o de un archivo creado tras aplicar una diferencia binaria
function xdiff file bdiff $dest	ruta de el archivo parche resultante
function xdiff file bdiff $old_file	ruta a el primer archivo
function xdiff file bdiff $new_file	ruta a el segundo archivo
function bool xdiff file bdiff	devuelve true en caso de éxito o false en caso de error
function bool xdiff file bdiff string $old_file string $new_file string $dest	realiza una diferencia binaria de dos archivos
function xdiff file bpatch $file	el archivo original
function xdiff file bpatch $patch	el archivo parche binario
function xdiff file bpatch $dest	la ruta del archivo resultante
function bool xdiff file bpatch	devuelve true en caso de éxito o false en caso de error
function bool xdiff file bpatch string $file string $patch string $dest	parchea un archivo con una diferencia binaria
function xdiff file diff $old_file	ruta a el primer archivo
function xdiff file diff $context	indica el número de líneas de contexto que desea incluir en el resultado diff
function xdiff file diff $dest	ruta del archivo parche resultante
function xdiff file diff $new_file	ruta a el segundo archivo
function xdiff file diff $minimal	establezca este parámetro a true si desea reducir el tamaño del resultado puede tomar algo de tiempo
function bool xdiff file diff	devuelve true en caso de éxito o false en caso de error
function bool xdiff file diff string $old_file string $new_file string $dest int $context bool $minimal	hacer un diff unificado de dos archivos
function xdiff file merge3 $new_file2	ruta a el tercer archivo
function xdiff file merge3 $old_file	ruta a el primer archivo
function xdiff file merge3 $new_file1	ruta a el segundo archivo
function xdiff file merge3 $dest	la ruta del archivo resultante contiene la unión modificada de new_file1 y new_file2
function mixed xdiff file merge3	devuelve true si la unión fue satisfactoria una cadena con fragmento erróneo si esta no lo fue o false si ocurrió un error interno
function mixed xdiff file merge3 string $old_file string $new_file1 string $new_file2 string $dest	une 3 archivos en uno
function xdiff file patch binary $file	el archivo original
function xdiff file patch binary $patch	el archivo parche binario
function xdiff file patch binary $dest	la ruta de el archivo resultante
function bool xdiff file patch binary	devuelve true en caso de éxito o false en caso de error
function bool xdiff file patch binary string $file string $patch string $dest	alias de xdiff_file_bpatch
function xdiff file patch $file	el archivo original
function xdiff file patch $flags	puede ser xdiff_patch_normal modo por defecto parche normal o xdiff_patch_reverse parche invertido
function xdiff file patch $dest	ruta de el archivo resultante
function xdiff file patch $patch	el archivo de revisión unificado
function mixed xdiff file patch	devuelve false si ocurrió un error interno una cadena con fragmento erróneo si el parche no pudo ser aplicado o true si el parche fue aplicado con éxito
function mixed xdiff file patch string $file string $patch string $dest int $flags	parchea un archivo con un diff unificado
function xdiff file rabdiff $dest	ruta de el archivo parche resultante
function xdiff file rabdiff $old_file	ruta a el primer archivo
function xdiff file rabdiff $new_file	ruta a el segundo archivo
function bool xdiff file rabdiff	devuelve true en caso de éxito o false en caso de error
function bool xdiff file rabdiff string $old_file string $new_file string $dest	hacer una diferencia binaria de dos archivos utilizando el algoritmo polinomial de huella digital fingerprinting de rabin
function xdiff string bpatch $str	la cadena binaria original
function xdiff string bpatch $patch	la cadena parche binaria
function string xdiff string bpatch	devuelve la cadena parcheada o false en caso de error
function string xdiff string bpatch string $str string $patch	parchear una cadena con una diferencia binaria
function xdiff string merge3 $old_data	primera cadena con información
function xdiff string merge3 $new_data1	segunda cadena con información
function xdiff string merge3 $new_data2	la tercera cadena con información
function xdiff string merge3 $error	si se produce algún fragmento erróneo entonces se almacenan dentro de esta variable
function mixed xdiff string merge3	devuelve la cadena unida false si se produce un error interno o true si la cadena unida está vacía
function mixed xdiff string merge3 string $old_data string $new_data1 string $new_data2 string $error	unir tres cadenas en una
function xdiff string patch binary $str	la cadena binaria original
function xdiff string patch binary $patch	la cadena parche binaria
function string xdiff string patch binary	devuelve la cadena parcheada o false en caso de error
function string xdiff string patch binary string $str string $patch	alias de xdiff_string_bpatch
function xdiff string patch $error	si se proporciona entonces los fragmentos erróneos se almacenan dentro de esta variable
function xdiff string patch $patch	la cadena parche unificada
function xdiff string patch $str	la cadena original
function xdiff string patch $flags	flags uede ser xdiff_patch_normal modo por defecto parche normal o xdiff_patch_reverse parche invertido
function string xdiff string patch	devuelve la cadena parcheada o false en caso de error
function string xdiff string patch string $str string $patch int $flags string $error	parchear una cadena con un diff unificado
function array xhprof disable	un array de los datos xhprof de la ejecución
function array xhprof disable	detiene el perfilador xhprof
function xhprof enable $options	un array de opciones opcionales es decir la opción ignored_functions para pasar en las funciones que se ignoraron durante el perfilado
function xhprof enable $flags	flags opcionales para añadir información adicional a la creación de perfiles
function void xhprof enable int $flags array $options	inicia perfil xhprof
function void xhprof sample enable	iniciar el analisis de xhprof en modo de muestreo
function xml error string $code	código de error como el obtenido desde xml_get_error_code()
function string xml error string	devuelve un string con una descripción textual del error code o false si no se ha encontrado una descripción asociada a ese código de error
function string xml error string int $code	obtiene la cadena de un error dado en un int&eacute;rprete xml
function xml get current byte index $parser	identificador del recurso del intérprete xml sobre el que se va a obtener la indexación del byte actual
function int xml get current byte index	devuelve cual es la indexación del byte en el que se haya actualmente el intérprete en el buffer de datos empieza siendo 0 o devuelve false si parser no se refiere a un intérprete válido
function int xml get current byte index resource $parser	obtiene la indexaci&oacute;n del byte actual en un int&eacute;rprete xml
function xml get current column number $parser	identificador del recurso del intérprete xml sobre el que se va a obtener el número de columna
function int xml get current column number	devuelve el número de columna en la línea actual como la dada de xml_get_current_line_number() en la que se haya el intérprete en el buffer de datos o devuelve false si parser no se refiere a un intérprete válido
function int xml get current column number resource $parser	obtiene el n&uacute;mero de columna actual para un int&eacute;rprete xml
function xml get current line number $parser	identificador del recurso del intérprete xml sobre el que se va a obtener el número de línea
function int xml get current line number	devuelve el número de línea en el que se haya el intérprete actualmente en el buffer de datos o devuelve false si parser no se refiere a un intérprete válido
function int xml get current line number resource $parser	obtiene el n&uacute;mero de l&iacute;nea actual para un int&eacute;rprete xml
function xml get error code $parser	identificador del recurso del intérprete xml sobre el que se va a obtener el valor de la opción
function int xml get error code	esta función devuelve false si parser no se refiere a un intérprete válido si no devuelve un error de la lista: error codes section
function int xml get error code resource $parser	obtiene un c&oacute;digo de error en un int&eacute;rprete xml
function xml parse $is_final	si existe y es true data es el último fragmento de datos enviados en este intérprete
function xml parse $data	conjunto de información que se analizará
function xml parse $parser	identificador del recurso del intérprete xml que se va a usar
function int xml parse	devuelve 1 si el análisis se realiza con éxito o 0 en caso de error
function int xml parse resource $parser string $data bool $is_final	inicia un int&eacute;rprete sobre un documento xml
function xml parser create ns $encoding	el parámetro opcional encoding especifica la codificación de caracteres para la entrada y salida en php4
function xml parser create ns $separator	con un analizador que tiene en cuenta los espacios de nombres los parámetros de etiquetas pasados a las diferentes funciones gestoras consistirán en el espacio de nombres y el nombre de la etiqueta separado por el string especificado en separator
function resource xml parser create ns	devuelve un gestor de recurso para el nuevo analizador xml
function resource xml parser create ns string $encoding string $separator	crea un analizador xml con soporte para espacios de nombres
function xml parser set option $parser	identificador del recurso del intérprete xml sobre el que se va a configurar el valor de la opción
function xml parser set option $value	el nuevo valor para la opción
function xml parser set option $option	cual es la opción para configurar
function bool xml parser set option	devuelve true si se ha establecido el nuevo valor para la opción
function bool xml parser set option resource $parser int $option mixed $value	configura las opciones en un int&eacute;rprete xml
function xml set element handler $attribs	el tercer parámetro attribs contiene un array asociativo con los atributos del elemento si hay alguno
function xml set element handler $start_element_handler	la función llamada mediante start_element_handler debe aceptar tres parámetros: start_element_handler resource $parser string $name array $attribs parser el primer parámetro parser hace referencia al intérprete xml que llama al manejador
function xml set element handler $name	el segundo parámetro name contiene el nombre del elemento por el cual el manejador es llamado
function xml set element handler $end_element_handler	la función llamada mediante end_element_handler debe aceptar dos parámetros: end_element_handler resource $parser string $name parser el primer parámetro parser hace referencia al intérprete xml que llama al manejador
function xml set element handler $parser	el primer parámetro parser hace referencia al intérprete xml que llama al manejador
function xml set element handler $parser	identificador del recurso del intérprete xml para el que se van a configurar las funciones del manejador de elementos de inicio y final
function bool xml set element handler	devuelve true en caso de éxito o false en caso de error
function bool xml set element handler resource $parser callable $start_element_handler callable $end_element_handler	configura los manejadores para los elementos de inicio y final
function xml set end namespace decl handler $parser	identificador del recurso del intérprete xml
function xml set end namespace decl handler $parser	el primer parámetro parser es una referencia al intérprete xml que llama al manejador
function xml set end namespace decl handler $prefix	el prefijo es una cadena que se utiliza para hacer referencia al namespace dentro de un objeto xml
function xml set end namespace decl handler $handler	handler es una cadena que contiene el nombre de una función que debe existir cuando xml_parse() es llamado por parser
function bool xml set end namespace decl handler	devuelve true en caso de éxito o false en caso de error
function bool xml set end namespace decl handler resource $parser callable $handler	configura el manejador de declaraci&oacute;n de final del namespace
function xml set external entity ref handler $open_entity_names	el segundo parámetro open_entity_names es una lista separada por espacios de los nombres de las entidades que estan abiertas para el análisis de esta entidad incluyendo el nombre de la entidad referenciada
function xml set external entity ref handler $public_id	el quinto parámetro public_id es el identificador público tal como se especifica en la declaración de entidad o una cadena vacia si no se habia especificado; en el identificador público el espacio en blanco se habrá normalizado como lo requerido mediante las especificaciones xml
function xml set external entity ref handler $parser	identificador del recurso del intérprete xml para el que se va a configurar la función del manejador de referencia a entidades externas
function xml set external entity ref handler $base	esta es la base para resolver el identificador de sistema system_id de la declaración de notación
function xml set external entity ref handler $handler	handler es un string que contiene el nombre de una función que debe existir cuando xml_parse() es llamado por parser
function xml set external entity ref handler $parser	el primer parámetro parser hace referencia al intérprete xml que llama al manejador
function xml set external entity ref handler $system_id	el cuarto parámetro system_id es el identificador de sistema tal como se especifica en la declaración de entidad
function bool xml set external entity ref handler	devuelve true en caso de éxito o false en caso de error
function bool xml set external entity ref handler resource $parser callable $handler	configura el manejador de referencia a entidades externas
function xml set notation decl handler $public_id	identificador público de la declaración de notación externa
function xml set notation decl handler $system_id	identificador de sistema de la declaración de notación externa
function xml set notation decl handler $parser	identificador del recurso del intérprete xml para el que se va a configurar la función del manejador de declaración de notación
function xml set notation decl handler $base	esta es la base para resolver el identificador de sistema system_id de la declaración de notación
function xml set notation decl handler $notation_name	esto es el name de la notación como se describió arriba en el formato de notación
function xml set notation decl handler $parser	el primer parámetro parser hace referencia al intérprete xml que llama al manejador
function xml set notation decl handler $handler	handler es un string que contiene el nombre de una función que debe existir cuando xml_parse() es llamado por parser
function bool xml set notation decl handler	devuelve true en caso de éxito o false en caso de error
function bool xml set notation decl handler resource $parser callable $handler	configura el manejador de declaraciones de notaci&oacute;n
function xml set object $object	el objeto donde usar el intérprete xml
function xml set object $parser	identificador del recurso del intérprete xml para usar dentro del objeto
function bool xml set object	devuelve true en caso de éxito o false en caso de error
function bool xml set object resource $parser object $object	usa un int&eacute;rprete xml parser dentro de un objeto
function xml set processing instruction handler $target	el segundo parámetro target contiene el pi destino
function xml set processing instruction handler $parser	el primer parámetro parser hace referencia al intérprete xml que llama al manejador
function xml set processing instruction handler $parser	identificador del recurso del intérprete xml para el que se va a configurar la función del manejador de instrucción de proceso
function xml set processing instruction handler $handler	handler es un string que contiene el nombre de una función que debe existir cuando xml_parse() es llamado por parser
function xml set processing instruction handler $data	el tercer parámetro data contiene los datos del pi
function bool xml set processing instruction handler	devuelve true en caso de éxito o false en caso de error
function bool xml set processing instruction handler resource $parser callable $handler	configura el manejador de instrucciones de proceso pi
function xml set start namespace decl handler $parser	identificador del recurso del intérprete xml
function xml set start namespace decl handler $parser	el primer parámetro parser es una referencia al intérprete xml que llama al manejador
function xml set start namespace decl handler $prefix	el prefijo es una cadena que se utiliza para hacer referencia al namespace dentro de un objeto xml
function xml set start namespace decl handler $uri	identificador de recurso uniforme uri por sus siglas en inglés del namespace
function xml set start namespace decl handler $handler	handler es una cadena que contiene el nombre de una función que debe existir cuando xml_parse() es llamado por parser
function bool xml set start namespace decl handler	devuelve true en caso de éxito o false en caso de error
function bool xml set start namespace decl handler resource $parser callable $handler	configura el manejador de declaraci&oacute;n de inicio del namespace
function xml set unparsed entity decl handler $public_id	identificador público de la declaración de notación externa
function xml set unparsed entity decl handler $notation_name	nombre de la notación de esta entidad ver xml_set_notation_decl_handler()
function xml set unparsed entity decl handler $entity_name	el nombre de la entidad que está a punto de definirse
function xml set unparsed entity decl handler $system_id	identificador de sistema de la declaración de notación externa
function xml set unparsed entity decl handler $base	esta es la base para resolver el identificador de sistema system_id de la declaración de notación
function xml set unparsed entity decl handler $parser	el primer parámetro parser hace referencia al intérprete xml que llama al manejador
function xml set unparsed entity decl handler $parser	identificador del recurso del intérprete xml para el que se va a configurar la función del manejador de declaración de entidades no analizadas
function xml set unparsed entity decl handler $handler	handler es un string que contiene el nombre de una función que debe existir cuando xml_parse() es llamado por parser
function bool xml set unparsed entity decl handler	devuelve true en caso de éxito o false en caso de error
function bool xml set unparsed entity decl handler resource $parser callable $handler	configura el manejador de declaraci&oacute;n de entidades no analizadas
function xmlrpc set type $type	base64 or datetime
function xmlrpc set type $value	value to set the type
function bool xmlrpc set type	devuelve true en caso de éxito o false en caso de error
function bool xmlrpc set type string $value string $type	establece el tipo del xmlrpc base64 o fecha-hora para un valor de cadena php
function yaml emit file $callbacks	manejadores de contenido para emitir nodos yaml
function yaml emit file $encoding	salida de codificación de carácteres seleccionando entre yaml_any_encoding yaml_utf8_encoding yaml_utf16le_encoding yaml_utf16be_encoding
function yaml emit file $linebreak	salida del estilo de salto de línea seleccionando entre yaml_any_break yaml_cr_break yaml_ln_break yaml_crln_break
function yaml emit file $filename	ruta a el fichero
function yaml emit file $data	la data se codifica
function bool yaml emit file	devuelve true en caso de éxito
function bool yaml emit file string $filename mixed $data int $encoding int $linebreak array $callbacks	enviar la representaci&oacute;n yaml de un valor a un fichero
function yaml emit $encoding	salida de codificación de caracteres elegidos desde yaml_any_encoding yaml_utf8_encoding yaml_utf16le_encoding yaml_utf16be_encoding
function yaml emit $linebreak	estilo de salida de línea de salto desde: yaml_any_break yaml_cr_break yaml_ln_break yaml_crln_break
function yaml emit $callbacks	gestores de contenido para emitir nodos yaml
function yaml emit $data	la data se codifica
function string yaml emit	devuelve un string de yaml codificado si es correcto
function string yaml emit mixed $data int $encoding int $linebreak array $callbacks	devuelve la representaci&oacute;n de un valor yaml
function yaz ccl conf $id	el recurso de conexión devuelto por yaz_connect()
function yaz ccl conf $config	un arreglo de configuración
function void yaz ccl conf resource $id array $config	configura el analizador ccl
function yaz ccl parse $query	la consulta ccl find
function yaz ccl parse $id	el recurso de la conexión retornado por yaz_connect()
function yaz ccl parse $result	si la función fue ejecutada con éxito va a ser un arreglo conteniendo la consulta rpn valida dentro de la clave rpn
function bool yaz ccl parse	devuelve true en caso de éxito o false en caso de error
function bool yaz ccl parse resource $id string $query array $result	inviocar el analizador invoke ccl
function yaz close $id	el recurso de conexión retornado por yaz_connect()
function bool yaz close	devuelve true en caso de éxito o false en caso de error
function bool yaz close resource $id	close yaz connection
function yaz connect $persistent	un booleano
function yaz connect $user	nombre de usuario para la autenticación
function yaz connect $cookie	cookie para la sesión proxy yaz
function yaz connect $piggyback	un booleano
function yaz connect $options	si se trata de un string éste se trata como el string de autenticación z39
function yaz connect $zurl	un string que toma la forma host[:port][ / database]
function yaz connect $password	contraseña para la autenticación
function yaz connect $proxy	proxy para la conexión proxy yaz
function yaz connect $maximumRecordSize	un entero que especifica el tamaño máximo de byte de un único registro a ser devuelto por un objetivo durante la recuperación
function yaz connect $charset	un string que especifica el mapa de caracteres que será utilizado como lenguaje y mapa de caracteres en la negociación z39
function yaz connect $group	grupo para la autenticación
function yaz connect $preferredMessageSize	un entero que especifica el tamaño máximo de byte para todos los registros que se devolverán por el objetivo durante la recuperación
function mixed yaz connect	un recurso de conexión en caso de éxito false en caso de error
function mixed yaz connect string $zurl mixed $options	prepara una conexi&oacute;n a un servidor z39
function yaz database $databases	una cadena conteniendo una o más bases de datos
function yaz database $id	el recurso de conexión devuelto por yaz_connect()
function bool yaz database	devuelve true en caso de éxito o false en caso de error
function bool yaz database resource $id string $databases	especifica las bases de datos dentro de una sesi&oacute;n
function yaz errno $id	el recurso de conexión devuelto por yaz_connect()
function int yaz errno	devuelve un código de error
function int yaz errno resource $id	devuelve el n&uacute;mero de error
function yaz error $id	el recurso de conexión retornado por yaz_connect()
function string yaz error	devuelve un mensaje textual por el servidor último requerimiento identificado por el parámetro id
function string yaz error resource $id	devuelve la descripci&oacute;n del error
function yaz es $type	una string que representa el tipo de servicio extendido: itemorder ordenado de ítem create crear base de datos drop descartar base de datos commit operación de cometer update actualizar registro xmlupdate actualizar xml
function yaz es $args	un array con las opciones de servicio extendido más opciones específicas del paquete
function yaz es $id	el recurso de conexión devuelto por yaz_connect()
function void yaz es resource $id string $type array $args	prepara para una solicitud de servicio extendido
function yaz get option $name	la opción del nombre
function yaz get option $id	el recurso de conexión retornado por yaz_connect()
function string yaz get option	devuelve el valor de la opción especificada o una cadena vacía si la opción wno está establecida
function string yaz get option resource $id string $name	devuelve el valor de opci&oacute;n para la conexi&oacute;n
function yaz hits $searchresult	array de resultados para obtener información de resultados de búsqueda detallada
function yaz hits $id	el recurso de conexión devuelto por yaz_connect()
function int yaz hits	devuelve el número de éxitos de la última búsqueda o 0 si no se ha realizado ninguna búsqueda
function int yaz hits resource $id array $searchresult	devuelve el n&uacute;mero de &eacute;xitos de la &uacute;ltima b&uacute;squeda
function yaz itemorder $args	debe ser un array asociativo con información sobre la solicitud de los elementos que serán enviados
function yaz itemorder $id	el recurso de conexión devuelto por yaz_connect()
function void yaz itemorder resource $id array $args	prepara para la solicitud z39
function yaz present $id	el recurso de conexión devuelto por yaz_connect()
function bool yaz present	devuelve true en caso de éxito o false en caso de error
function bool yaz present resource $id	se prepara para la recuperaci&oacute;n z39
function yaz range $number	específica un rango de registros a recuperar
function yaz range $start	especifíca la posición del primer registro a ser recuperado
function yaz range $id	el recurso de conexión retornado por yaz_connect()
function void yaz range resource $id int $start int $number	espec&iacute;fica un rango de registros a recuperar
function yaz record $type	el parámetro type especifica la forma del registro devuelto
function yaz record $syntax	la sintaxis del registro se devuelve como un string p
function yaz record $database	el nombre de la base de datos asociada con el registro en la posición se devuelve como un string
function yaz record $string	el registro se devuelve como un string de visualización simple
function yaz record $raw	el registro se devuelve como un string en su formato original
function yaz record $array	el registro se devuelve como un array que refleja la estructura grs-1
function yaz record $id	el recurso de conexión devuelto por yaz_connect()
function yaz record $pos	la posición del registro
function yaz record $xml	el registro se devuelve como un string xml si es posible
function string yaz record	devuelve el registro que se encuentra en la posición pos o un string vacío si no existe ningún registro en la posición indicada
function string yaz record resource $id int $pos string $type	devuelve un registro
function yaz scan result $id	el recurso de conexión asociado por yaz_connect()
function yaz scan result $result	si se indica este array será modificado para contener información adicional tomada de la respuesta del scan: number - número de entradas devueltas stepsize - tamaño del paso position - posición del término status - estado del escaneo
function array yaz scan result	devuelve un array 0
function array yaz scan result resource $id array $result	devuelve el resultado de un escaneado
function yaz schema $schema	debe ser especificado como un oid identificador de objeto notación de puntos sin tratar como 1
function yaz schema $id	el recurso de conexión devuelto por yaz_connect()
function void yaz schema resource $id string $schema	especifica el esquema para la recuperaci&oacute;n
function yaz search $query	la consulta rpn es una representación textual de la consulta type-1 tal y como está definida por el estandard z39
function yaz search $type	este parámetro representa el tipo de la consulta - únicamente rpn está soportado ahora en cuyo caso el tercer argumento especifica una consulta de tipo type-1 en notación de prefijo de consulta
function yaz search $id	el recurso de conexión devuelto por yaz_connect()
function bool yaz search	devuelve true en caso de éxito o false en caso de error
function bool yaz search resource $id string $type string $query	prepara una b&uacute;squeda
function yaz set option $value	el nuevo valor de la opción
function yaz set option $nameooptions	puede ser un string o un array
function yaz set option $id	el recurso de conexión devuelta por yaz_connect()
function void yaz set option resource $id string $name string $value	configura una o m&aacute;s opciones de la conexi&oacute;n
function yaz syntax $syntax	la sintaxis debe especificarse como un oid identificador de objeto en una notación de puntos sin tratar como 1
function yaz syntax $id	el recurso de conexión devuelto por yaz_connect()
function void yaz syntax resource $id string $syntax	especifica la sintaxis de registro preferida para la recuperaci&oacute;n
function yp cat $domain	el nombre de dominio nis
function yp cat $map	el mapa nis
function array yp cat	devuelve un array con todas las entradas del mapa los valores clave del mapa serán los índices del array y las entradas del mapa serán los datos del array
function array yp cat string $domain string $map	devuelve un array conteniendo todo el mapa
function yp err string $errorcode	el código de error
function string yp err string	devuelve el mensaje de error como una cadena
function string yp err string int $errorcode	devuelve la cadena de error asociada con el c&oacute;digo de error dado
function int yp errno	devuelve una de las constantes de error yperr_xxx
function int yp errno	devuelve el c&oacute;digo de error de la operaci&oacute;n m&aacute;s reciente
function string yp get default domain	devuelve el dominio predeterminado del nodo o false
function string yp get default domain	obtiene el dominio nis por defecto
function array yp next	devuelve el siguiente par clave-valor como un array o false en caso de error
function array yp next string $domain string $map string $key	devuelve el siguiente par clave-valor en el mapa indicado
function int yp order	devuelve el número de pedido de un mapa o false en caso de error
function int yp order string $domain string $map	devuelve el n&uacute;mero de pedido de un mapa
function string zend logo guid	devuelve phpe9568f35-d428-11d2-a769-00aa001acf42
function string zend logo guid	obtiene el valor guid de zend
function string zend version	devuelve el número de versión del motor zend como una cadena
function string zend version	obtiene la versi&oacute;n del motor zend actual
function zip entry close $zip_entry	una entrada del directorio previamente abierto con zip_entry_open()
function bool zip entry close	devuelve true en caso de éxito o false en caso de error
function bool zip entry close resource $zip_entry	cierra la entrada a un directorio
function zip entry compressedsize $zip_entry	una entrada de directorio devuelva por zip_read()
function int zip entry compressedsize	el tamaño comprimido
function int zip entry compressedsize resource $zip_entry	obtiene el tama&ntilde;o comprimido de una entrada de directorio
function zip entry compressionmethod $zip_entry	una entrada de directorio devuelta por zip_read()
function string zip entry compressionmethod	el método de compresión
function string zip entry compressionmethod resource $zip_entry	devuelve el m&eacute;todo de compresi&oacute;n de una entrada de directorio
function zip entry filesize $zip_entry	una entrada de directorio devuelva por zip_read()
function int zip entry filesize	el tamaño de una entrada de directorio
function int zip entry filesize resource $zip_entry	devuelve el tama&ntilde;o del fichero actual de una entrada de directorio
function zip entry name $zip_entry	una entrada de directorio devuelta por zip_read()
function string zip entry name	el nombre de la entrada de directorio
function string zip entry name resource $zip_entry	devuelve el nombre de la entrada de un directorio
function zip open $filename	el nombre del fichero zip a abrir
function resource zip open	devuelve un manejador del recurso para usarlo después con zip_read() y zip_close() o devolver el número de error si filename no existe o en caso de otro error
function resource zip open string $filename	abre un fichero zip
function zip read $zip	un fichero zip previamente abierto con zip_open()
function resource zip read	devuelve un recurso de una entrada de directorio para poder usar luego las funciones zip_entry_
function resource zip read resource $zip	leer la siguiente entrada en el fichero zip
function string zlib decode string $data string $max_decoded_len	descomprime datos codificados en craw / gzip / zlib
function string zlib encode string $data string $encoding string $level	comprime datos con la codificaci&oacute;n especificada
function string zlib get coding type	los posibles valores de retorno son gzip deflate o false
function string zlib get coding type	retorna el tipo de codificaci&oacute;n utilizada para hacer la compresi&oacute;n
GearmanClient add Server $port	puerto del job server
GearmanClient add Server $host	nombre del host del job server
GearmanClient bool add Server	devuelve true en caso de éxito o false en caso de error
GearmanClient bool add Server string $host int $port	a&ntilde;ade un servidor de trabajos al cliente
GearmanClient add Servers $servers	una lista separadas por comas de servidores cada servidor especificado en el formato host:port
GearmanClient bool add Servers	devuelve true en caso de éxito o false en caso de error
GearmanClient bool add Servers string $servers	a&ntilde;ade una lista de servidores de trabajos al cliente
GearmanClient add Task $function_name	función registrada que ejecutará el worker
GearmanClient add Task $workload	datos serializados a ser procesados
GearmanClient add Task $unique	id único para identificar una tarea en particular
GearmanClient add Task $context	aplicación context a asociar con la tarea
GearmanClient GearmanTask add Task	un objeto gearmantask o false si no se puede añadir la tarea
GearmanClient GearmanTask add Task string $function_name string $workload mixed $context string $unique	a&ntilde;ade una tarea para ser ejecutada en paralelo
GearmanClient add Task High $function_name	función registrada que ejecutará el worker
GearmanClient add Task High $workload	datos serializados a ser procesados
GearmanClient add Task High $unique	id único para identificar una tarea en particular
GearmanClient add Task High $context	aplicación context a asociar con la tarea
GearmanClient GearmanTask add Task High	un objeto gearmantask o false si no se puedo añadir la tarea
GearmanClient GearmanTask add Task High string $function_name string $workload mixed $context string $unique	a&ntilde;ade una tarea de alta prioridad para ser ejecutada en paralelo
GearmanClient add Task High Background $function_name	función registrada que ejecutará el worker
GearmanClient add Task High Background $workload	datos serializados a ser procesados
GearmanClient add Task High Background $unique	id único para identificar una tarea en particular
GearmanClient add Task High Background $context	aplicación context a asociar con la tarea
GearmanClient GearmanTask add Task High Background	un objeto gearmantask o false si la tarea no puede ser añadida
GearmanClient GearmanTask add Task High Background string $function_name string $workload mixed $context string $unique	a&ntilde;ade una tarea de alta prioridad ejecutada en segundo plano y en paralelo
GearmanClient add Task Low Background $function_name	función registrada que ejecutará el worker
GearmanClient add Task Low Background $workload	datos serializados a ser procesados
GearmanClient add Task Low Background $unique	id único para identificar una tarea en particular
GearmanClient add Task Low Background $context	aplicación context a asociar con la tarea
GearmanClient GearmanTask add Task Low Background	un objeto gearmantask o false si la tarea no puede ser añadida
GearmanClient GearmanTask add Task Low Background string $function_name string $workload mixed $context string $unique	a&ntilde;ade una tarea de baja prioridad en segundo plano para ser ejecutada en paralelo
GearmanClient add Task Status $context	datos a pasar en la llamada a la función de retorno para el estado generalmente una referencia a un array u objeto
GearmanClient add Task Status $job_handle	manejador de la tarea a obtener el estado
GearmanClient GearmanTask add Task Status	un objeto gearmantask
GearmanClient GearmanTask add Task Status string $job_handle string $context	a&ntilde;ade una tarea para obtener el estado
GearmanClient bool clear Callbacks	retorna siempre true
GearmanClient bool clear Callbacks	elimina todas las funciones de retorno de llamada
GearmanClient GearmanClient clone	un gearmanclient en caso de éxito false si hay fallo
GearmanClient GearmanClient clone	crea una copia de un objeto gearmanclient
GearmanClient - construct	crea una instancia de gearmanclient
GearmanClient do $function_name	función registrada que ejecutará el worker
GearmanClient do $workload	datos serializados a ser procesados
GearmanClient do $unique	id único para identificar una tarea en particular
GearmanClient string do	un string representando el resultado de la tarea ejecutada
GearmanClient string do string $function_name string $workload string $unique	ejecuta una sola tarea y retorna el resultado obsoleto
GearmanClient do Background $function_name	función registrada que ejecutará el worker
GearmanClient do Background $workload	datos serializados a ser procesados
GearmanClient do Background $unique	id único para identificar una tarea en particular
GearmanClient string do Background	el manejador de la tarea enviada
GearmanClient string do Background string $function_name string $workload string $unique	ejecuta una tarea en segundo plano
GearmanClient string do Job Handle	el manejador de trabajo para la tarea en ejecución
GearmanClient string do Job Handle	obtiene el manejador de trabajo para la tarea en ejecuci&oacute;n
GearmanClient do Low $function_name	función registrada que ejecutará el worker
GearmanClient do Low $workload	datos serializados a ser procesados
GearmanClient do Low $unique	id único para identificar una tarea en particular
GearmanClient string do Low	un string representando el resultado de la tarea en ejecución
GearmanClient string do Low string $function_name string $workload string $unique	ejecuta una tarea de baja prioridad
GearmanClient do Normal $function_name	función registrada que ejecutará el worker
GearmanClient do Normal $workload	datos serializados a ser procesados
GearmanClient do Normal $unique	id único para identificar una tarea en particular
GearmanClient string do Normal	una representación de tipo string de los resultados de ejecutar una tarea
GearmanClient string do Normal string $function_name string $workload string $unique	ejecutar una &uacute;nica tarea y devolver un resultado
GearmanClient echo $workload	datos arbitrarios serializados a ser retornados
GearmanClient bool echo	devuelve true en caso de éxito o false en caso de error
GearmanClient bool echo string $workload	env&iacute;a datos a todos los servidores de trabajo para ver si retornan obsoleto
GearmanClient string error	un string de error entendible
GearmanClient string error	retorna un string con el &uacute;ltimo error encontrado
GearmanClient int get Errno	un errno de gearman válido
GearmanClient int get Errno	obtiene un valor errno
GearmanClient job Status $job_handle	el manipulador de la tarea asignado por el servidor gearman
GearmanClient array job Status	un array que contiene la información del estado para el trabajo correspondiente al manejador de trabajo indicado
GearmanClient array job Status string $job_handle	obtiene el estado de un trabajo en segundo plano
GearmanClient ping $workload	algunos datos serializados arbitrarios para que sean repetidos
GearmanClient bool ping	devuelve true en caso de éxito o false en caso de error
GearmanClient bool ping string $workload	envar datos a todos los servidores de trabajo para ver si los repiten
GearmanClient remove Options $options	las opciones a ser eliminadas
GearmanClient bool remove Options	siempre retorna true
GearmanClient bool remove Options int $options	elimina opciones del cliente
GearmanClient int return Code	un código de retorno válido de gearman
GearmanClient int return Code	obtiene el &uacute;ltimo c&oacute;digo de retorno de gearman
GearmanClient set Client Callback $callback	una función o método a llamar
GearmanClient void set Client Callback callable $callback	funci&oacute;n de llamada de retorno cuando hay un paquete de datos para una tarea obsoleto
GearmanClient set Data Callback $callback	función o método a llamar
GearmanClient bool set Data Callback	devuelve true en caso de éxito o false en caso de error
GearmanClient bool set Data Callback callable $callback	funci&oacute;n de llamada de retorno para cuando hay un paquete de datos para la tarea
GearmanClient set Exception Callback $callback	función a llamar cuando un trabajador lanza una excepción
GearmanClient bool set Exception Callback	devuelve true en caso de éxito o false en caso de error
GearmanClient bool set Exception Callback callable $callback	establece una llamada de retorno para excepciones del trabajador
GearmanClient set Fail Callback $callback	función a llamar
GearmanClient bool set Fail Callback	devuelve true en caso de éxito o false en caso de error
GearmanClient bool set Fail Callback callable $callback	establece una llamada de retorno para cuando falla un trabajo
GearmanClient set Options $options	las opciones a fijar
GearmanClient bool set Options	siempre retorna true
GearmanClient bool set Options int $options	establece opciones del cliente
GearmanClient set Status Callback $callback	función a llamar
GearmanClient bool set Status Callback	devuelve true en caso de éxito o false en caso de error
GearmanClient bool set Status Callback callable $callback	establece una llamada de retorno para obtener el estado de una tarea
GearmanClient set Warning Callback $callback	función a llamar
GearmanClient bool set Warning Callback	devuelve true en caso de éxito o false en caso de error
GearmanClient bool set Warning Callback callable $callback	establece una llamada de retorno para los warnings del trabajador
GearmanClient set Workload Callback $callback	función a llamar
GearmanClient bool set Workload Callback	devuelve true en caso de éxito o false en caso de error
GearmanClient bool set Workload Callback callable $callback	establece una llamada de retorno para aceptar actualizaciones incrementales de datos
GearmanClient int timeout	tiempo máximo en milisegundos a esperar para actividad de entrada / salida
GearmanClient int timeout	obtiene el tiempo m&aacute;ximo de inactividad de entrada / salida para el socket
GearmanJob complete $result	los datos que han resultado en formato serializado
GearmanJob bool complete	devuelve true en caso de éxito o false en caso de error
GearmanJob bool complete string $result	env&iacute;a el resultado y el estado completo obsoleto
GearmanJob data $data	datos arbitrarios serializados
GearmanJob bool data	devuelve true en caso de éxito o false en caso de error
GearmanJob bool data string $data	env&iacute;a datos para un trabajo en ejecuci&oacute;n obsoleto
GearmanJob exception $exception	descripción de la excepción
GearmanJob bool exception	devuelve true en caso de éxito o false en caso de error
GearmanJob bool exception string $exception	env&iacute;a una excepci&oacute;n para un trabajo en ejecuci&oacute;n obsoleto
GearmanJob string function Name	el nombre de la función
GearmanJob string function Name	retorna el nombre de la funci&oacute;n
GearmanJob int return Code	un código de retorno válido de gearman
GearmanJob int return Code	obtiene el &uacute;ltimo c&oacute;digo de retorno
GearmanJob send Complete $result	resultado en formato serializado
GearmanJob bool send Complete	devuelve true en caso de éxito o false en caso de error
GearmanJob bool send Complete string $result	env&iacute;a el resultado y el estado completado
GearmanJob send Data $data	datos arbitrarios serializados
GearmanJob bool send Data	devuelve true en caso de éxito o false en caso de error
GearmanJob bool send Data string $data	env&iacute;a datos para un trabajo en ejecuci&oacute;n
GearmanJob send Exception $exception	descripción de la excepción
GearmanJob bool send Exception	devuelve true en caso de éxito o false en caso de error
GearmanJob bool send Exception string $exception	env&iacute;a una excepci&oacute;n para un trabajo en ejecuci&oacute;n
GearmanJob send Status $denominator	el denominador del porcentaje completado expresado como una fracción
GearmanJob send Status $numerator	el numerador del porcentaje completado expresado como una fracción
GearmanJob bool send Status	devuelve true en caso de éxito o false en caso de error
GearmanJob bool send Status int $numerator int $denominator	env&iacute;a el estado
GearmanJob send Warning $warning	un mensaje de advertencia
GearmanJob bool send Warning	devuelve true en caso de éxito o false en caso de error
GearmanJob bool send Warning string $warning	env&iacute;a una advertencia
GearmanJob status $denominator	el denominador del porcentaje completado expresado como una fracción
GearmanJob status $numerator	el numerador del porcentaje completado expresado como una fracción
GearmanJob bool status	devuelve true en caso de éxito o false en caso de error
GearmanJob bool status int $numerator int $denominator	env&iacute;a el estado obsoleto
GearmanJob string workload	datos serializados
GearmanJob string workload	obtiene la carga de trabajo
GearmanJob int workload Size	el tamaño en bytes
GearmanJob int workload Size	obtiene el tama&ntilde;o de la carga de trabajo
GearmanTask - construct	crea una instancia de gearmantask
GearmanTask int data Size	el tamaño de los datos o false en caso de no haberlos
GearmanTask int data Size	obtiene el tama&ntilde;o de la informaci&oacute;n retornada
GearmanTask string function	el nombre de la función
GearmanTask string function	obtiene el nombre de la funci&oacute;n asociada obsoleto
GearmanTask string function Name	un nombre de función
GearmanTask string function Name	retorna el nombre de la funci&oacute;n asociada
GearmanTask bool is Known	true si la tarea es conocida false en otro caso
GearmanTask bool is Known	determina si la tarea es conocida
GearmanTask bool is Running	true si la tarea está siendo ejecutada false en otro caso
GearmanTask bool is Running	comprueba si la tarea est&aacute; siendo ejecutada
GearmanTask string job Handle	el manejador del trabajo
GearmanTask string job Handle	retorna el manejador del trabajo
GearmanTask int task Denominator	un número entre 0 y 100 o false si no puede ser determinado
GearmanTask int task Denominator	obtiene el denominador del porcentaje de tarea completada
GearmanTask int task Numerator	un número entre 0 y 100 o false si no se puede determinar
GearmanTask int task Numerator	retorna el numerador del tanto por ciento completado de la tarea expresado como una fracci&oacute;n
GearmanWorker add Function $function	función de retorno a llamar cuando el trabajo para el nombre de función registrado es enviado
GearmanWorker add Function $context	referencia a datos de contexto de la aplicación que pueden ser modificados por la la función del trabajador
GearmanWorker add Function $timeout	intervalo de tiempo en segundos
GearmanWorker add Function $function_name	nombre de la función a registrar en el servidor de trabajos
GearmanWorker bool add Function	devuelve true en caso de éxito o false en caso de error
GearmanWorker bool add Function string $function_name callable $function mixed $context int $timeout	registra y a&ntilde;ade una funci&oacute;n de retorno
GearmanWorker void clone	crea una copia del trabajador
GearmanWorker - construct	crea una instancia gearmanworker
GearmanWorker echo $workload	datos arbitrarios serializados
GearmanWorker bool echo	valor de retorno estándar de gearman
GearmanWorker bool echo string $workload	comprueba la respuesta de un servidor de trabajo
GearmanWorker int options	las opciones que tiene actualmente el trabajador
GearmanWorker int options	retorna las opciones del trabajador
GearmanWorker register $function_name	el nombre de una función a registrar en el servidor de trabajo
GearmanWorker register $timeout	un intervalo de tiempo en segundos
GearmanWorker bool register	un valor de retorno estándar de gearman
GearmanWorker bool register string $function_name int $timeout	registra una funci&oacute;n en el servidor de trabajo
GearmanWorker remove Options $option	opciones a ser eliminadas
GearmanWorker bool remove Options	retorna siempre true
GearmanWorker bool remove Options int $option	elimina las opciones del trabajador
GearmanWorker int return Code	un código de retorno válido de gearman
GearmanWorker int return Code	obtiene el &uacute;ltimo c&oacute;digo de retorno de gearman
GearmanWorker set Id $id	un identificador de tipo string
GearmanWorker bool set Id	devuelve true en caso de éxito o false en caso de error
GearmanWorker bool set Id string $id	asigna un identificador al trabajador de tal forma que pueda ser rastreado cuando se solicite a gearmand la lista de los trabajadores disponibles
GearmanWorker set Options $option	las opciones a establecer
GearmanWorker bool set Options	siempre retorna true
GearmanWorker bool set Options int $option	establece las opciones del trabajador
GearmanWorker set Timeout $timeout	un intervalo de tiempo en milisegundos
GearmanWorker bool set Timeout	retorna siempre true
GearmanWorker bool set Timeout int $timeout	establece un tiempo de espera m&aacute;ximo para actividad de entrada / salida del socket
GearmanWorker int timeout	un período de tiempo en milisegundos
GearmanWorker int timeout	retorna el tiempo m&aacute;ximo de espera para actividad de entrada / salida del socket
GearmanWorker unregister $function_name	el nombre de una función registrada en el servidor de trabajo
GearmanWorker bool unregister	un valor de retorno estándar de gearman
GearmanWorker bool unregister string $function_name	elimina el registro del nombre de una funci&oacute;n en los servidores de trabajo
GearmanWorker bool unregister All	un valor de retorno estándar de gearman
GearmanWorker bool unregister All	elimina el registro de todas los nombres de funciones en los servidores de trabajo
GearmanWorker bool wait	devuelve true en caso de éxito o false en caso de error
GearmanWorker bool wait	espera cualquier actividad de uno de los servidores de trabajo
GearmanWorker bool work	devuelve true en caso de éxito o false en caso de error
GearmanWorker bool work	espera y realiza un trabajo
Gender\Gender connect $dsn	dsn data source name a abrir
Gender\Gender boolean connect	boolean que indica resultado correcto o fallo
Gender\Gender boolean connect string $dsn	conecta con un diccionario de nombres externo
Gender\Gender get $country	id del país como constante de la clase gender
Gender\Gender get $name	nombre a comprobar
Gender\Gender integer get	devuelve el género de un nombre
Gender\Gender integer get string $name integer $country	obtener el g&eacute;nero de un nombre
Gender\Gender is Nick $name0	el nombre a comprobar
Gender\Gender is Nick $country	el id del país identificado por una constante la clase gender
Gender\Gender is Nick $name1	el nombre a comprobar
Gender\Gender array is Nick	devuelve true en caso de éxito o false en caso de error
Gender\Gender array is Nick string $name0 string $name1 integer $country	comprueba si name0 es un alias de name1
Gender\Gender similar Names $name	el nombre a comprobar
Gender\Gender similar Names $country	el id del país identificado por una constante la clase gender
Gender\Gender array similar Names	devuelve un array con los nombres similares encontrados
Gender\Gender array similar Names string $name integer $country	obtener nombres similares
Generator send $value	el valor a enviar al generador
Generator mixed send	devuelve el valor producido
Generator mixed send mixed $value	enviar un valor al generador
Generator throw $exception	la excepción a lanzar al generador
Generator mixed throw	devuelve el valor generado
Generator mixed throw Exception $exception	lanzar una excepci&oacute;n al generador
Generator void wakeup	serialize callback
GlobIterator int count	devuelve el número de directoeios y ficheros como un integer
GlobIterator int count	obtiene el n&uacute;mero de directorios y ficheros
Gmagick addnoiseimage $noise_type	el tipo de ruido
Gmagick Gmagick addnoiseimage	el objeto gmagick con el ruido añadido
Gmagick Gmagick addnoiseimage int $NOISE	a&ntilde;ade ruido aleatorio a la imagen
Gmagick annotateimage $text	la cadena a dibujar
Gmagick annotateimage $x	el índice horizontal en píxeles a la izquierda del texto
Gmagick annotateimage $angle	el ángulo en el que escribir el texto
Gmagick annotateimage $y	el índice vertical en píxeles a la línea base del texto
Gmagick annotateimage $GmagickDraw	el objeto gmagickdraw que contiene la configuración para dibujar el texto
Gmagick Gmagick annotateimage	el objeto gmagick con la anotación hecha
Gmagick Gmagick annotateimage GmagickDraw $GmagickDraw float $x float $y float $angle string $text	anota una imagen con texto
Gmagick blurimage $radius	radio de borrosidad
Gmagick blurimage $sigma	desviación estándar
Gmagick Gmagick blurimage	el objeto gmagick borroso
Gmagick Gmagick blurimage float $radius float $sigma int $channel	a&ntilde;ade un filtro de borrosidad a la imagen
Gmagick borderimage $height	alto del borde
Gmagick borderimage $color	el objeto gmagickpixel o una cadena que contiene el color del borde
Gmagick borderimage $width	ancho del borode
Gmagick Gmagick borderimage	el objeto gmagick con el borde definido
Gmagick Gmagick borderimage GmagickPixel $color int $width int $height	rodea la imagen con un borde
Gmagick chopimage $y	origen y del área recortada
Gmagick chopimage $height	alto del área recortada
Gmagick chopimage $x	origen x del área recortada
Gmagick chopimage $width	ancho del área recortada
Gmagick Gmagick chopimage	el objeto gmagick recortado
Gmagick Gmagick chopimage int $width int $height int $x int $y	elimina una regi&oacute;n de una imagen y la recorta
Gmagick Gmagick clear	el objeto gmagick limpiado
Gmagick Gmagick clear	limpia todos los recursos asociados con el objeto gmagick
Gmagick commentimage $comment	el comentario a añadir
Gmagick Gmagick commentimage	el objeto gmagick con el comentario añadido
Gmagick Gmagick commentimage string $comment	a&ntilde;ade un comentario a una imagen
Gmagick compositeimage $compose	operador de composción
Gmagick compositeimage $source	objeto gmagick que contiene la imagen compuesta
Gmagick compositeimage $y	el índice de fila de la imagen compuesta
Gmagick compositeimage $x	el índice de columna de la imagen compuesta
Gmagick Gmagick compositeimage	el objeto gmagick con composiciones
Gmagick Gmagick compositeimage Gmagick $source int $COMPOSE int $x int $y	compone una imagen en otra
Gmagick cropimage $x	la coordenada x de la esquina superior izquierda de la región recortada
Gmagick cropimage $y	la coordenada y de la esquina superior izquierda de la región recortada
Gmagick cropimage $width	el ancho del recorte
Gmagick cropimage $height	el alto del recorte
Gmagick Gmagick cropimage	el objeto gmagick recortado
Gmagick Gmagick cropimage int $width int $height int $x int $y	extrae una regi&oacute;n de la imagen
Gmagick Gmagick current	se devuelve a sí mismo si se tuvo éxito
Gmagick Gmagick current	devuelve la refencia al objeto gmagick acutal
Gmagick cyclecolormapimage $displace	la cantidad a desplazar el mapa de color
Gmagick Gmagick cyclecolormapimage	se devuelve a sí mismo si se tuvo éxito
Gmagick Gmagick cyclecolormapimage int $displace	desplaza un mapa de color de una imagen
Gmagick Gmagick despeckleimage	el objeto gmagick con el ruido granular reducido si se tuvo éxito
Gmagick Gmagick despeckleimage	reduce el ruido granular de una imagen
Gmagick Gmagick destroy	devuelve true en caso de éxito
Gmagick Gmagick destroy	destruye un objeto gmagick
Gmagick drawimage $GmagickDraw	las operaciones de dibujo para renderizar sobre la imagen
Gmagick Gmagick drawimage	el objeto gmagick dibujado
Gmagick Gmagick drawimage GmagickDraw $GmagickDraw	renderiza el objeto gmagickdraw en la imagen actual
Gmagick embossimage $radius	el radio del efecto
Gmagick embossimage $sigma	el valor sigma del efecto
Gmagick Gmagick embossimage	el objeto gmagick repujado
Gmagick Gmagick embossimage float $radius float $sigma	devuelve una imagen en escala de grises con un efecto tridimensional
Gmagick Gmagick equalizeimage	el objeto gmagick ecualizado
Gmagick Gmagick equalizeimage	ecualiza el histograma de la imagen
Gmagick Gmagick flipimage	the objeto gmagick volteado
Gmagick Gmagick flipimage	crea una imagen espejo vertical
Gmagick Gmagick flopimage	the objeto gmagick volteado
Gmagick Gmagick flopimage	crea una imagen espejo horizontal
Gmagick frameimage $width	el ancho del borde
Gmagick frameimage $color	objeto gmagickpixel o un valor de tipo float que representa el color mate
Gmagick frameimage $inner_bevel	el ancho del bisel interior
Gmagick frameimage $height	el alto del borde
Gmagick frameimage $outer_bevel	el ancho del bisel exterior
Gmagick Gmagick frameimage	el objeto gmagick enmarcado
Gmagick Gmagick frameimage GmagickPixel $color int $width int $height int $inner_bevel int $outer_bevel	a&ntilde;ade un borde tridimensional simulado
Gmagick string getcopyright	devuelve una cadena que contiene el anuncio del copyright de la api graphicsmagick y de la api de c magickwand
Gmagick string getcopyright	devuelve el copyright de la api graphicsmagick como una cadena
Gmagick string getfilename	devuelve una cadena si se tuvo éxito
Gmagick string getfilename	el nombre de archivo asociado a una secuencia de im&aacute;genes
Gmagick void getimagebackgroundcolor	devuelve el color de fondo de la imagen
Gmagick void getimagebordercolor	devuelve el color del borde de la imagen
Gmagick int getimagechanneldepth	la profundidad del canal de la imagen
Gmagick int getimagechanneldepth int $channel_type	obtiene la profundidad de un canal de imagen en particular
Gmagick int getimagecolors	el número de colores en la imagen
Gmagick int getimagecolors	devuelve el color del &iacute;ndice del mapa de color especificado
Gmagick int getimagecolorspace	el espacio de colores
Gmagick int getimagecolorspace	obtiene el espacio de colores de la imagen
Gmagick int getimagecompose	devuelve el operador de composición asociado a la imagen
Gmagick int getimagecompose	devuelve el operador de composici&oacute;n asociado a la imagen
Gmagick int getimagedelay	devuelve el operados de composción asociado con la imagen
Gmagick int getimagedelay	obetiene el retraso de la imagen
Gmagick int getimagedepth	la profundidad de la imagen
Gmagick int getimagedepth	obtiene la profundidad de la imagen
Gmagick int getimagedispose	devuelve el método de disposición si se tuvo éxito
Gmagick int getimagedispose	obtiene el m&eacute;todo de disposici&oacute;n de la imagen
Gmagick float getimagegamma	devuelve el valor gamma de la imagen si se tuvo éxito
Gmagick float getimagegamma	obtiene el valor gamma de la imagen
Gmagick array getimagegreenprimary	devuelve una matriz con las claves x e y si se tuvo éxito
Gmagick array getimagegreenprimary	devuelve el punto primario verde de la cromaticidad
Gmagick int getimageindex	el índice de la imagen activa actual
Gmagick int getimageindex	obtiene el &iacute;ndice de la imagen activa actual
Gmagick int getimageinterlacescheme	devuelve la combinación de entrelazado como un integer si se tuvo éxito
Gmagick int getimageinterlacescheme	obtiene la combinaci&oacute;n de entrelazado de la imagen
Gmagick int getimageiterations	devuelve las iteraciones de la imagen como un valor integer
Gmagick int getimageiterations	obtiene las iteraciones de la imagen
Gmagick int getimagematte	devuelve true si la imagen tiene un canal mate si no devuelve false
Gmagick int getimagematte	comprobar si la imagen tiene un canal mate
Gmagick string getimageprofile	devuelve una cadena que contiene el perfil de la imagen
Gmagick string getimageprofile string $name	devuelve el perfil nominado de la imagen
Gmagick array getimageredprimary	devuelve el punto primario rojo de la cromaticidad como una matriz con las claves x e y
Gmagick array getimageredprimary	devuelve el punto primario rojo de la cromaticidad
Gmagick int getimagerenderingintent	extrae una región de la imagen y la devuelve como una nueva varita
Gmagick int getimagerenderingintent	obtiene la propuesta de renderizaci&oacute;n de la imagen
Gmagick array getimageresolution	devuelve la resolución como una matriz
Gmagick array getimageresolution	obtiene la resoluci&oacute;n x e y de la imagen
Gmagick int getimagescene	devuelve la escena de la imagen
Gmagick int getimagescene	obtiene la escena de la imagen
Gmagick int getimagetype	devuelve el tipo de imagen potencial
Gmagick int getimagetype	obtiene el tipo de imagen potencial
Gmagick int getimageunits	devuelve las unidades de resolución de la imagen
Gmagick int getimageunits	obtiene las unidades de resoluci&oacute;n de la imagen
Gmagick array getquantumdepth	obtiene la profundidad de la cuantía de gmagick como una cadena
Gmagick array getquantumdepth	obtiene la profundidad de la cuant&iacute;a de gmagick como una cadena
Gmagick string getreleasedate	devuelve la fecha de distribución de graphicsmagick como una cadena
Gmagick string getreleasedate	devuelve la fecha de distribuci&oacute;n de graphicsmagick como una cadena
Gmagick array getsamplingfactors	devuelve una matriz asociativa con el factor de muestreo horizontal y vertical de la imagen
Gmagick array getsamplingfactors	obtiene el factor de muestreo horizontal y vertical
Gmagick array getsize	devuelve el tamaño asociado con el objeto gmagick como una matriz con las claves columns columnas y rows filas
Gmagick array getsize	devuelve el tama&ntilde;o asociado con el objeto gmagick
Gmagick mixed hasnextimage	devuelve true si el objeto tiene más imágenes cuando se atraviesa la lista en dirección hacia delante devuelve false si no hay ninguna
Gmagick mixed hasnextimage	comprueba si el objeto tiene m&aacute;s im&aacute;genes
Gmagick implodeimage $radius	el radio de la implosión
Gmagick mixed implodeimage	devuelve el objeto gmagick implosionado
Gmagick mixed implodeimage float $radius	crea una nueva imagen como una copia
Gmagick levelimage $blackPoint	el punto negro de la imagen
Gmagick levelimage $channel	proporcione cualquier constante de canal que sea válida para su modo de canal
Gmagick levelimage $gamma	el valor gamma
Gmagick levelimage $whitePoint	el punto blanco de la imagen
Gmagick mixed levelimage	objeto gmagick con la imagen nivelada
Gmagick mixed levelimage float $blackPoint float $gamma float $whitePoint int $channel	ajusta los niveles de la imagen
Gmagick mixed magnifyimage	el objeto gmagick ampliado
Gmagick mixed magnifyimage	escala una imagen x2 proporcionalmente
Gmagick medianfilterimage $radius	el radio de la zona inmediata de los píxeles
Gmagick void medianfilterimage float $radius	aplica un filtro digital
Gmagick newimage $width	ancho de la nueva imagen
Gmagick newimage $background	el color de fondo usado para esta imagen como float
Gmagick newimage $format	formato de la imagen
Gmagick newimage $height	alto de la nueva imagen
Gmagick void newimage int $width int $height string $background string $format	crea una nueva imagen
Gmagick bool nextimage	el objeto gmagick si se tuvo éxito
Gmagick bool nextimage	se mueve a la siguiente imagen
Gmagick normalizeimage $channel	identifica el canal a normalizar
Gmagick void normalizeimage int $channel	mejora el contraste de una imagen a color
Gmagick oilpaintimage $radius	el radio de la zona inmediata circular
Gmagick void oilpaintimage float $radius	simula una pintura al &oacute;leo
Gmagick profileimage $profile	el perfil
Gmagick profileimage $name	nombre del perfil a añadir o eliminar: icc iptc o perfil genérico
Gmagick void profileimage string $name string $profile	a&ntilde;ade o elimina un perfil de una imagen
Gmagick quantizeimage $numColors	el número de colores
Gmagick quantizeimage $dither	un valor distinto de cero distribuye la diferencia entre una imagen original y el algoritmo de reducción de color correspondiente a los píxeles de la zona inmediata a lo largo de una curva de hilbert
Gmagick quantizeimage $measureError	un valor distinto de cero mide la diferencia entre la imagen original y la cuantificada
Gmagick quantizeimage $treeDepth	normalmente este valor de tipo integer es cero o uno
Gmagick quantizeimage $colorspace	lleva a cabo una reducción de color en este espacio de color normalmaente rgbcolorspace
Gmagick void quantizeimage int $numColors int $colorspace int $treeDepth bool $dither bool $measureError	analiza los colores dentro de una imagen de referencia
Gmagick quantizeimages $numColors	el número de colores
Gmagick quantizeimages $dither	un valor distinto de cero distribuye la diferencia entre una imagen original y el algoritmo de reducción de color correspondiente a los píxeles de la zona inmediata a lo largo de una curva de hilbert
Gmagick quantizeimages $measureError	un valor distinto de cero mide la diferencia entre la imagen original y la cuantificada
Gmagick quantizeimages $treeDepth	normalmente este valor de tipo integer es cero o uno
Gmagick quantizeimages $colorspace	lleva a cabo una reducción de color en este espacio de color normalmaente rgbcolorspace
Gmagick void quantizeimages int $numColors int $colorspace int $treeDepth bool $dither bool $measureError	analiza los colores dentro de una secuencia de im&aacute;genes
Gmagick array queryfontmetrics	el objeto gmagick si se tuvo éxito
Gmagick array queryfontmetrics GmagickDraw $draw string $text	devuelve una matriz que representa las m&eacute;tricas de la fuente
Gmagick queryformats $pattern	especifica un puntero a una cadena de texto que contiene un patrón
Gmagick array queryformats	el objeto gmagick si se tuvo éxito
Gmagick array queryformats string $pattern	devuelve los formatos soportados por gmagick
Gmagick raiseimage $height	alto del área a realzar
Gmagick raiseimage $x	coordenada x
Gmagick raiseimage $raise	un valor distinto de cero crea un efecto de realzado en 3d de otro modo tiene un efecto contrario
Gmagick raiseimage $y	coordenada y
Gmagick raiseimage $width	ancho del área a realzar
Gmagick void raiseimage int $width int $height int $x int $y bool $raise	crea un efecto de bot&oacute;n en 3d simulado
Gmagick read $filename	el nombre de archivo de la imagen
Gmagick void read string $filename	lee una imagen desde un nombre de archivo
Gmagick readimage $filename	el nombre de archivo de la imagen
Gmagick void readimage string $filename	lee una imagen desde un nombre de archivo
Gmagick readimageblob $imageContents	el contenido de la imagen
Gmagick readimageblob $filename	el nombre de archivo de la imagen
Gmagick void readimageblob string $imageContents string $filename	lee una imagen desde una cadena binaria
Gmagick reducenoiseimage $radius	el radio de la zona inmediata de píxeles
Gmagick void reducenoiseimage float $radius	suaviza los contornos de una imagen
Gmagick void removeimage	elimina una imagen de la lista de im&aacute;genes
Gmagick removeimageprofile $name	el nombre del perfil a devolver: icc iptc o perfil genérico
Gmagick string removeimageprofile	el objeto gmagick si se tuvo éxito
Gmagick string removeimageprofile string $name	elimina el perfil nominado de la imagen y lo devuelve
Gmagick scaleimage $height	el número de filas en la imagen escalada
Gmagick scaleimage $width	el número de columnas en la imagen escalada
Gmagick Gmagick scaleimage	el objeto gmagick si se tuvo éxito
Gmagick Gmagick scaleimage int $width int $height bool $fit	escala el tama&ntilde;o de una imagen
Gmagick separateimagechannel $channel	identifica qué canal extraer: redchannel greenchannel bluechannel opacitychannel cyanchannel magentachannel yellowchannel blackchannel
Gmagick Gmagick separateimagechannel	el objeto gmagick si se tuvo éxito
Gmagick Gmagick separateimagechannel int $channel	separa un canal de la imagen
Gmagick bool set Compression Quality	el objeto gmagick en caso de éxito
Gmagick bool set Compression Quality int $quality	establece la calidad de compresi&oacute;n predeterminada del objeto
Gmagick setfilename $filename	el nombre de archivo de la imagen
Gmagick Gmagick setfilename	el objeto gmagick si se tuvo éxito
Gmagick Gmagick setfilename string $filename	establece el nombre de archivo antes de que se lea o escriba una imagen
Gmagick setimageblueprimary $x	el punto x primario azul
Gmagick setimageblueprimary $y	el punto y primario azul
Gmagick Gmagick setimageblueprimary	el objeto gmagick si se tuvo éxito
Gmagick Gmagick setimageblueprimary float $x float $y	establece el punto primario azul de la cromaticidad de la imagen
Gmagick setimagebordercolor $color	la várita de píxel de borde
Gmagick Gmagick setimagebordercolor	el objeto gmagick si se tuvo éxito
Gmagick Gmagick setimagebordercolor GmagickPixel $color	establece el color de borde de la imagen
Gmagick setimagechanneldepth $depth	la profundidad de la imagen en bits
Gmagick setimagechanneldepth $channel	identifica qué canal extraer: redchannel greenchannel bluechannel opacitychannel cyanchannel magentachannel yellowchannel blackchannel
Gmagick Gmagick setimagechanneldepth	el objeto gmagick si se tuvo éxito
Gmagick Gmagick setimagechanneldepth int $channel int $depth	establece la profundidad de una canal de imagen en particular
Gmagick setimagecolorspace $colorspace	el espacio de color de la imagen: undefinedcolorspace rgbcolorspace graycolorspace transparentcolorspace ohtacolorspace xyzcolorspace ycbcrcolorspace ycccolorspace yiqcolorspace ypbprcolorspace ypbprcolorspace yuvcolorspace cmykcolorspace srgbcolorspace hslcolorspace o hwbcolorspace
Gmagick Gmagick setimagecolorspace	el objeto gmagick si se tuvo éxito
Gmagick Gmagick setimagecolorspace int $colorspace	establece el espacio de color de una imagen
Gmagick setimagecompose $composite	el operador de composición de la imagen
Gmagick Gmagick setimagecompose	el objeto gmagick si se tuvo éxito
Gmagick Gmagick setimagecompose int $composite	establece el operador de composci&oacute;n de una imagen
Gmagick setimagedispose $disposeType	el tipo de disposición de la imagen
Gmagick Gmagick setimagedispose	el objeto gmagick si se tuvo éxito
Gmagick Gmagick setimagedispose int $disposeType	establece el m&eacute;todo de disposici&oacute;n de una imagen
Gmagick setimagefilename $filename	el nombre de archivo de la imagen
Gmagick Gmagick setimagefilename	el objeto gmagick si se tuvo éxito
Gmagick Gmagick setimagefilename string $filename	establece el nombre de archivo de una imagen en particular en una secuencia
Gmagick setimageformat $imageFormat	el formato de la imagen
Gmagick Gmagick setimageformat	el objeto gmagick si se tuvo éxito
Gmagick Gmagick setimageformat string $imageFormat	establece el formato de una imagen en particular
Gmagick setimagegamma $gamma	el valor gamma de la imagen
Gmagick Gmagick setimagegamma	el objeto gmagick si se tuvo éxito
Gmagick Gmagick setimagegamma float $gamma	establece el valor gamma de la imagen
Gmagick setimagegreenprimary $y	el punto y primario verde de la cromaticidad
Gmagick setimagegreenprimary $x	el punto x primario verde de la cromaticidad
Gmagick Gmagick setimagegreenprimary	el objeto gmagick si se tuvo éxito
Gmagick Gmagick setimagegreenprimary float $x float $y	establece el punto primario verde de la cromaticidad de la imagen
Gmagick setimageiterations $iterations	el retraso de la imagen en 1 / 100avo de segundo
Gmagick Gmagick setimageiterations	el objeto gmagick si se tuvo éxito
Gmagick Gmagick setimageiterations int $iterations	establece las iteraciones de la imagen
Gmagick setimageredprimary $x	el punto x primario rojo
Gmagick setimageredprimary $y	el punto y primario rojo
Gmagick Gmagick setimageredprimary	el objeto gmagick si se tuvo éxito
Gmagick Gmagick setimageredprimary float $x float $y	establece el punto primario rojo de la cromaticidad de la imagen
Gmagick setimagewhitepoint $y	el punto y blanco
Gmagick setimagewhitepoint $x	el punto x blanco
Gmagick Gmagick setimagewhitepoint	el objeto gmagick si se tuvo éxito
Gmagick Gmagick setimagewhitepoint float $x float $y	establece el punto blanco de cromaticidad de la imagen
Gmagick setsamplingfactors $factors	una matriz de valores de tipo double que representa el factor de muestreo de cada componente de color en el orden rgb
Gmagick Gmagick setsamplingfactors	el objeto gmagick si se tuvo éxito
Gmagick Gmagick setsamplingfactors array $factors	establece los factores de muestreo de la imagen
Gmagick shearimage $yShear	el número de grados a recortar la imagen
Gmagick shearimage $xShear	el número de grados a recortar la imagen
Gmagick shearimage $color	la varita de píxel de color de fondo
Gmagick Gmagick shearimage	el objeto gmagick si se tuvo éxito
Gmagick Gmagick shearimage mixed $color float $xShear float $yShear	crea un paralelogramo
Gmagick solarizeimage $threshold	define la extensión de la solarización
Gmagick Gmagick solarizeimage	el objeto gmagick si se tuvo éxito
Gmagick Gmagick solarizeimage int $threshold	aplica un efecto de solarizaci&oacute;n a la imagen
Gmagick swirlimage $degrees	define la tirantez del efecto de arremolinamiento
Gmagick Gmagick swirlimage	el objeto gmagick si se tuvo éxito
Gmagick Gmagick swirlimage float $degrees	arremolina los p&iacute;xeles desde el centro de la imagen
Gmagick thumbnailimage $height	el alto de la imagen
Gmagick thumbnailimage $width	el ancho de la imagen
Gmagick Gmagick thumbnailimage	el objeto gmagick si se tuvo éxito
Gmagick Gmagick thumbnailimage int $width int $height bool $fit	cambia el tama&ntilde;o de una imagen
Gmagick trimimage $fuzz	por defecto el objetivo debe coincidir exactamente con un color de píxel en particular
Gmagick Gmagick trimimage	el objeto gmagick
Gmagick Gmagick trimimage float $fuzz	elimina los extremos de la imagen
Gmagick write $filename	el nombre de archivo de la imagen
Gmagick void write string $filename	escribe una imagen al nombre de archivo especificado
GmagickDraw annotate $y	coordenada y a la línea base del texto
GmagickDraw annotate $x	coordenada x a la izquierda del texto
GmagickDraw annotate $text	texto a dibujar
GmagickDraw GmagickDraw annotate	el objeto gmagickdraw si se tuvo éxito
GmagickDraw GmagickDraw annotate float $x float $y string $text	dibuja texto en la imagen
GmagickDraw ellipse $start	inicio de rotación en grados
GmagickDraw ellipse $ox	coordenada x del origen
GmagickDraw ellipse $ry	radio en y
GmagickDraw ellipse $rx	radio en x
GmagickDraw ellipse $oy	coordenada y del origen
GmagickDraw ellipse $end	final de rotación en grados
GmagickDraw GmagickDraw ellipse	el objeto gmagickdraw si se tuvo éxito
GmagickDraw GmagickDraw ellipse float $ox float $oy float $rx float $ry float $start float $end	dibuja una elipse en la imagen
GmagickDraw void getfillcolor	devuelve el color de relleno
GmagickDraw float getfillopacity	devuelve la opacidad usada cuando se dibuja utilizando el color de relleno o la textura de relleno
GmagickDraw float getfillopacity	devuelve la opacidad usada cuando se dibuja
GmagickDraw string getfont	devuelve una cadena si se tuvo éxito y false si no está establecida ninguna fuente
GmagickDraw string getfont	devuelve la fuente
GmagickDraw float getfontsize	devuelve el tamaño de la fuente asociada con el objeto gmagickdraw actual
GmagickDraw float getfontsize	devuelve el tama&ntilde;o de punto de la fuente
GmagickDraw int getfontstyle	devuelve la constante de estilo de fuente style_ asociada con el objeto gmagickdraw o 0 si no está establecido ningún estilo
GmagickDraw int getfontstyle	devuelve el estilo de fuente
GmagickDraw int getfontweight	devuelve un valor de tipo int si se tuvo éxito y 0 si no está establecido el peso
GmagickDraw int getfontweight	devuelve el peso de la fuente
GmagickDraw float getstrokeopacity	devuelve un valor de tipo double que describe la opacidad
GmagickDraw float getstrokeopacity	devuelve la opacidad de los perfiles del objeto contorneado
GmagickDraw int gettextdecoration	devuelve una de las constantes decoration_ y 0 si no está establecida la decoración
GmagickDraw int gettextdecoration	devuelve la decoraci&oacute;n del texto
GmagickDraw line $sy	coordenada y de inicio
GmagickDraw line $ey	coordenada y final
GmagickDraw line $ex	coordenada x final
GmagickDraw line $sx	coordenada x de inicio
GmagickDraw GmagickDraw line	el objeto gmagickdraw si se tuvo éxito
GmagickDraw GmagickDraw line float $sx float $sy float $ex float $ey	dibuja una l&iacute;nea en la imagen
GmagickDraw point $x	coordenada x del objetivo
GmagickDraw point $y	coordenada y del objetivo
GmagickDraw GmagickDraw point	el objeto gmagickdraw si se tuvo éxito
GmagickDraw GmagickDraw point float $x float $y	dibuja un punto
GmagickDraw polygon $coordinates	matriz de coordenadas
GmagickDraw GmagickDraw polygon	el objeto gmagickdraw si se tuvo éxito
GmagickDraw GmagickDraw polygon array $coordinates	dibuja un pol&iacute;gono
GmagickDraw rotate $degrees	grados de rotación
GmagickDraw GmagickDraw rotate	el objeto gmagickdraw si se tuvo éxito
GmagickDraw GmagickDraw rotate float $degrees	aplica la rotaci&oacute;n especificada al espacio de coordenadas actual
GmagickDraw roundrectangle $rx	radio de la esquina en dirección horizontal
GmagickDraw roundrectangle $ry	radio de la esquina en dirección vertical
GmagickDraw roundrectangle $y1	primera coordenada y
GmagickDraw roundrectangle $x1	primera coordenada x
GmagickDraw roundrectangle $y2	segunda coordenada y
GmagickDraw roundrectangle $x2	segunda coordenada x
GmagickDraw GmagickDraw roundrectangle	el objeto gmagickdraw si se tuvo éxito
GmagickDraw GmagickDraw roundrectangle float $x1 float $y1 float $x2 float $y2 float $rx float $ry	dibuja un rect&aacute;ngulo redondeado
GmagickDraw scale $x	factor de escala horizontal
GmagickDraw scale $y	factor de escala vertical
GmagickDraw GmagickDraw scale	el objeto gmagickdraw si se tuvo éxito
GmagickDraw GmagickDraw scale float $x float $y	ajusta el factor de escala
GmagickDraw setfillcolor $color	objeto gmagickpixel que indica el color a usar para el relleno
GmagickDraw GmagickDraw setfillcolor	el objeto gmagickdraw si se tuvo éxito
GmagickDraw GmagickDraw setfillcolor string $color	establece el color de relleno a usar cuando se dibujan objetos rellenos
GmagickDraw setfont $font	el nombre de la fuente
GmagickDraw GmagickDraw setfont	el objeto gmagickdraw si se tuvo éxito
GmagickDraw GmagickDraw setfont string $font	establece la fuente especificada completamente a usar cuando se anota texto
GmagickDraw setfontsize $pointsize	el tamaño de punto del texto
GmagickDraw GmagickDraw setfontsize	el objeto gmagickdraw si se tuvo éxito
GmagickDraw GmagickDraw setfontsize float $pointsize	establece el tama&ntilde;o de punto de la fuente a usar cuando se anota texto
GmagickDraw setfontweight $weight	el peso de la fuente rango válido 100-900
GmagickDraw GmagickDraw setfontweight	el objeto gmagickdraw si se tuvo éxito
GmagickDraw GmagickDraw setfontweight int $weight	establece el peso de la fuente
GmagickDraw setstrokeopacity $stroke_opacity	la opacidad del contorno
GmagickDraw GmagickDraw setstrokeopacity	el objeto gmagickdraw si se tuvo éxito
GmagickDraw GmagickDraw setstrokeopacity float $stroke_opacity	especifica la opacidad del los perfiles del objeto contorneado
GmagickDraw setstrokewidth $width	el ancho del contorno
GmagickDraw GmagickDraw setstrokewidth	el objeto gmagickdraw si se tuvo éxito
GmagickDraw GmagickDraw setstrokewidth float $width	establece el ancho del contorno usado para dibujar los perfiles del objeto
GmagickDraw settextdecoration $int	decoración del texto
GmagickDraw GmagickDraw settextdecoration	el objeto gmagickdraw si se tuvo éxito
GmagickDraw GmagickDraw settextdecoration int $decoration	especifica una decoraci&oacute;n
GmagickDraw settextencoding $encoding	cadena de caracteres que especifica la codificación de texto
GmagickDraw GmagickDraw settextencoding	el objeto gmagickdraw en caso de éxito
GmagickDraw GmagickDraw settextencoding string $encoding	especifica el conjunto de codificaci&oacute;n del texto
GmagickPixel construct $color	la cadena de color opcional que se va a usar como el valor inicial de este objeto
GmagickPixel string construct	el objeto gmagickpixel si se tuvo éxito
GmagickPixel string construct string $color	el constructor gmagickpixel
GmagickPixel int getcolorcount	devuelve la cuenta de color como un valor de tipo integer en caso de éxito lanza una excepción de tipo gmagickpixelexception en caso de error
GmagickPixel int getcolorcount	devuelve la cuenta de color asociada a este color
GmagickPixel getcolorvalue $color	el canal a comprobar especificado como una de las constantes de canal de gmagick
GmagickPixel float getcolorvalue	el valor del canal como un número de coma flotante normalizado lanzando una excepción de tipo gmagickpixelexception si se produjo un error
GmagickPixel float getcolorvalue int $color	obtiene el valor normalizado del canal de color proporcionado
HaruAnnotation set Highlight Mode $mode	el modo destacado de la anotación
HaruAnnotation bool set Highlight Mode	devuelve true en éxito
HaruAnnotation bool set Highlight Mode int $mode	define el modo destacado de la anotaci&oacute;n
HaruAnnotation set Icon $icon	el estilo del icono
HaruAnnotation bool set Icon	devuelve true en éxito
HaruAnnotation bool set Icon int $icon	define el estilo del icono de la anotaci&oacute;n
HaruAnnotation set Opened $opened	true significa que la anotación se muestra inicialmente abierta false - significa que esta cerrada
HaruAnnotation bool set Opened	devuelve true en éxito
HaruAnnotation bool set Opened bool $opened	define el estado inicial de la anotaci&oacute;n
HaruDestination bool set Fit	devuelve true en éxito
HaruDestination bool set Fit	define la apariencia de la p&aacute;gina para ajustarse a la ventana
HaruDestination set Fit BV $left	las coordenadas izquierdas de la página
HaruDestination bool set Fit BV	devuelve true en éxito
HaruDestination bool set Fit BV float $left	define la apariencia de la p&aacute;gina para ajustarse al alto de la delimitaci&oacute;n de la caja
HaruDestination set Fit R $right	las coordenadas derechas de la página
HaruDestination set Fit R $bottom	the bottom coordinates of the page
HaruDestination set Fit R $left	las coordenadas izquierdas de la página
HaruDestination set Fit R $top	las coordenadas superiores de la página
HaruDestination bool set Fit R	devuelve true en éxito
HaruDestination bool set Fit R float $left float $bottom float $right float $top	define la apariencia de la p&aacute;gina para ajustarse al rect&aacute;ngulo especificado
HaruDestination set XYZ $zoom	el factor de aumento
HaruDestination set XYZ $left	la posición izquierda de la página
HaruDestination set XYZ $top	la posición superior de la página
HaruDestination bool set XYZ	devuelve true en éxito
HaruDestination bool set XYZ float $left float $top float $zoom	define la apariencia de la p&aacute;gina
HaruDoc object add Page	devuelve una nueva instancia de harupage
HaruDoc object add Page	agrega una nueva p&aacute;gina al documento
HaruDoc add Page Label $prefix	el prefijo para la etiqueta de página
HaruDoc add Page Label $style	el estilo de numeración
HaruDoc add Page Label $first_num	el número de la primera página en éste rango
HaruDoc add Page Label $first_page	la primera página incluida dentro del rango de la etiqueta
HaruDoc bool add Page Label	devuelve true en éxito
HaruDoc bool add Page Label int $first_page int $style int $first_num string $prefix	establece el estilo de numeraci&oacute;n para el rango especificado de p&aacute;ginas
HaruDoc create Outline $title	el título del nuevo perfil del objeto
HaruDoc create Outline $encoder	una valida instancia de haruencoder o null
HaruDoc create Outline $parent_outline	una valida instancia de haruoutline o null
HaruDoc object create Outline	devuelve una nueva instancia de haruoutline
HaruDoc object create Outline string $title object $parent_outline object $encoder	crea una nueva instancia de haruoutline
HaruDoc object get Current Page	devuelve una instancia de harupage en éxito o false si no hay página corriente en el momento
HaruDoc object get Current Page	devuelve la p&aacute;gina corriente del documento
HaruDoc get Encoder $encoding	el nombre del codificador
HaruDoc object get Encoder	devuelve una instancia de haruencoder para el codificador especificado
HaruDoc object get Encoder string $encoding	obtiene una instancia de haruencoder para el codificador especificado
HaruDoc get Info Attr $type	el tipo del atributo
HaruDoc string get Info Attr	devuelve el valor string del atributo del documento especificado
HaruDoc string get Info Attr int $type	colocar al corriente los valores de los atributos en documentos especificados
HaruDoc insert Page $page	una válida instacia de harupage
HaruDoc object insert Page	devuelve una nueva instancia de harupage
HaruDoc object insert Page object $page	inserta una nueva p&aacute;gina solo antes de la p&aacute;gina especificada
HaruDoc load PNG $filename	el nombre del archivo de la imagen png
HaruDoc load PNG $deferred	no carga los datos inmediatamente
HaruDoc object load PNG	devuelve una instacia de haruimage
HaruDoc object load PNG string $filename bool $deferred	carga y devuelve una imagen pngharuimage instance
HaruDoc load Raw $height	el ancho de la imagen
HaruDoc load Raw $width	the width of the image
HaruDoc load Raw $color_space	el espacio de color de la imagen
HaruDoc load Raw $filename	el nombre de una archivo de imagen raw
HaruDoc object load Raw	devuelve una instancia de haruimage
HaruDoc object load Raw string $filename int $width int $height int $color_space	carga una imagen raw
HaruDoc load TTF $embed	cuando se establece a true los datos glifos de la fuente son encrustado dentro del fichero pdf de lo contrario sólo la matriz de datos están incluidos
HaruDoc load TTF $fontfile	el fichero ttf para cargar
HaruDoc string load TTF	devuelve el nombre de la fuente cargada en caso de éxito
HaruDoc string load TTF string $fontfile bool $embed	carga fichero de fuente ttf
HaruDoc bool output	devuelve true en caso de éxito
HaruDoc bool output	escribe los datos del documento a la salida del buffer
HaruDoc read From Stream $bytes	el parámetro bytes se especifica como muchos otros bytes a leer aunque el flujo contenga menos bytes que los requeridos
HaruDoc string read From Stream	devuelve los datos de el flujo temporal
HaruDoc string read From Stream int $bytes	lee los datos de la corriente temporal
HaruDoc bool reset Stream	devuelve true si sucede con éxito
HaruDoc bool reset Stream	rebobina la secuencia temporal
HaruDoc save $file	el fichero para guardar el documento
HaruDoc bool save	devuelve true en caso de éxito
HaruDoc bool save string $file	guarda el documento en el fichero especificado
HaruDoc set Compression Mode $mode	el modo de compresión a utilizar
HaruDoc bool set Compression Mode	devuelve true en caso de éxito
HaruDoc bool set Compression Mode int $mode	establece el modo de compresi&oacute;n para el documento
HaruDoc set Current Encoder $encoding	el nombre de la codificación a utilizar ver codificadores integrados para la lista de valores permitidos
HaruDoc bool set Current Encoder	devuelve true en caso de éxito
HaruDoc bool set Current Encoder string $encoding	establece el codificador actual para el documento
HaruDoc set Encryption Mode $mode	el modo de encripción a utilizar
HaruDoc set Encryption Mode $key_len	la longitud de la clave de cifrado en bytes
HaruDoc bool set Encryption Mode	devuelve true on success
HaruDoc bool set Encryption Mode int $mode int $key_len	establece el modo de cifrado para el documento
HaruDoc set Open Action $destination	una válido harudestination instancia
HaruDoc bool set Open Action	devuelve true en el éxito
HaruDoc bool set Open Action object $destination	definir en qu&eacute; p&aacute;gina se muestra cuando se abre el documento
HaruDoc set Page Layout $layout	lista de valores aceptados: harudoc::page_layout_single - sólo se muestra una página
HaruDoc bool set Page Layout	en caso de éxito devuelve true
HaruDoc bool set Page Layout int $layout	indica c&oacute;mo deben mostrarse las p&aacute;ginas
HaruDoc set Pages Configuration $page_per_pages	número de páginas que puede albergar un objeto de páginas
HaruDoc bool set Pages Configuration	en caso de éxito devuelve true
HaruDoc bool set Pages Configuration int $page_per_pages	establece el n&uacute;mero de p&aacute;ginas que contiene cada conjunto de p&aacute;ginas
HaruDoc bool use CNSFonts	devuelve true en caso de éxito
HaruDoc bool use CNSFonts	habilita la incorporaci&oacute;n de fuentes chinas simplificadas
HaruDoc bool use CNTEncodings	devuelve true en caso de éxito
HaruDoc bool use CNTEncodings	habilita las codificaciones chinas tradicionales
HaruDoc bool use CNTFonts	devuelve true en caso de éxito
HaruDoc bool use CNTFonts	habilita la incorporaci&oacute;n de fuentes chinas tradicionales
HaruDoc bool use KREncodings	devuelve true en caso de éxito
HaruDoc bool use KREncodings	habilita las codificaciones coreanas
HaruDoc bool use KRFonts	devuelve true en caso de éxito
HaruDoc bool use KRFonts	habilita la incorporaci&oacute;n de fuentes coreanas
HaruEncoder get Byte Type $index	la posición en el texto
HaruEncoder get Byte Type $text	el texto
HaruEncoder int get Byte Type	obtiene el tipo de byte en el texto en la posición especificada
HaruEncoder int get Byte Type string $text int $index	obtiene el tipo de byte en el texto
HaruEncoder int get Type	devuelve el tipo del decodificador
HaruEncoder int get Type	obtiene el tipo del decodificador
HaruEncoder get Unicode $character	el código del carácter a convertir
HaruEncoder int get Unicode int $character	convierte el car&aacute;cter especificado a unicode
HaruEncoder int get Writing Mode	devuelve el modo de escritura del codificador
HaruEncoder int get Writing Mode	obtiene el modo de escritura del codificador
HaruFont int get Ascent	devuelve el ascenso vertical de la fuente
HaruFont int get Ascent	obtiene el ascenso vertical de la fuente
HaruFont int get Cap Height	devuelve la distancia de la línea de base de las palabras en mayúsculas
HaruFont int get Cap Height	obtiene la distancia de la l&iacute;nea de base de las letras en may&uacute;sculas
HaruFont int get Descent	devuelve el descenso vertical de la fuente
HaruFont int get Descent	obtiene el descenso vertical de la fuente
HaruFont string get Encoding Name	devuelve el nombre del codificador
HaruFont string get Encoding Name	obtiene el nombre del codificador
HaruFont get Unicode Width $character	el código de los caracteres
HaruFont int get Unicode Width	devuelve el ancho de los caracteres en la fuente
HaruFont int get Unicode Width int $character	obtiene el ancho de los caracteres en la fuente
HaruFont int get XHeight	devuelve la distancia de la línea de base de las letras en minúsculas
HaruFont int get XHeight	obtiene la distancia de la l&iacute;nea de base de las letras en min&uacute;sculas
HaruFont measure Text $word_space	el espacio de las palabras
HaruFont measure Text $text	el texto a adecuarse al ancho
HaruFont measure Text $width	el ancho del área a colocar el texto
HaruFont measure Text $font_size	el tamaño de la fuente
HaruFont measure Text $word_wrap	cuando éste parámetro se establece en true la función “emula” la envoltura de la palabra y no incluye la parte de la palabra actual si se alcanza el final del área
HaruFont measure Text $char_space	el espacio del carácter
HaruFont int measure Text	calcula el número de caracteres los cuales puede ser incluidos dentro de un ancho especificado
HaruFont int measure Text string $text float $width float $font_size float $char_space float $word_space bool $word_wrap	calcula el n&uacute;mero de caracteres los cuales puede ser incluidos dentro de un ancho especificado
HaruImage int get Bits Per Component	devuelve el número de bits usados para describir cada componente de color de la imagen
HaruImage int get Bits Per Component	obtiene el n&uacute;mero de bits usados para describir cada componente de color de la imagen
HaruImage string get Color Space	devuelve el nombre del espacio del color de la imagen
HaruImage string get Color Space	obtiene el nombre del espacio del color
HaruImage int get Height	devuelve la altura de la imagen
HaruImage int get Height	obtiene la altura de la imagen
HaruImage array get Size	devuelve un arreglo con dos elementos: ancho y alto los cuales contienen la dimensión apropiada de la imagen
HaruImage array get Size	obtiene el tama&ntilde;o de la imagen
HaruImage int get Width	devuelve el ancho de la imagen
HaruImage int get Width	obtiene el ancho de la imagen
HaruOutline set Destination $destination	una instancia valida de harudestination
HaruOutline bool set Destination	devuelve true en éxito
HaruOutline bool set Destination object $destination	define el destino para el esquema
HaruOutline set Opened $opened	true significa que está abierto false - significa que está cerrado
HaruOutline bool set Opened	devuelve true en éxito
HaruOutline bool set Opened bool $opened	define el estado inicial del esquema
HaruPage arc $ang2	el ángulo del final
HaruPage arc $y	coordinación vertical del centro
HaruPage arc $ray	el rayo del arco
HaruPage arc $x	coordinación horizontal del centro
HaruPage arc $ang1	el ángulo del inicio
HaruPage bool arc	devuelve true en éxito
HaruPage bool arc float $x float $y float $ray float $ang1 float $ang2	anexa un arco a la ruta corriente
HaruPage bool begin Text	devuelve true en éxito
HaruPage bool begin Text	empieza un objeto de texto y establece la posici&oacute;n corriente del texto a 0 0
HaruPage circle $y	coordinación vertical del punto centro
HaruPage circle $ray	el rayo del círculo
HaruPage circle $x	coordinación horizontal del punto centro
HaruPage bool circle	devuelve true en éxito
HaruPage bool circle float $x float $y float $ray	anexa un c&iacute;rculo a la ruta corriente
HaruPage object create Destination	devuelve una nueva instancia de harudestination
HaruPage object create Destination	crea una nueva instancia de harudestination
HaruPage create Text Annotation $text	el texto a ser mostrado
HaruPage create Text Annotation $rectangle	un arreglo con 4 coordenadas del área de anotación
HaruPage create Text Annotation $encoder	instancia opcional de haruencoder
HaruPage object create Text Annotation	devuelve una nueva instancia de haruannotation
HaruPage object create Text Annotation array $rectangle string $text object $encoder	crea una nueva instancia de haruannotation
HaruPage create URLAnnotation $url	la url para abrir
HaruPage create URLAnnotation $rectangle	un arreglo con 4 coordenadas del área clickeable
HaruPage object create URLAnnotation	devuelve una nueva instancia de haruannotation
HaruPage object create URLAnnotation array $rectangle string $url	crea una nueva instancia de haruannotation
HaruPage curve To $y1	un punto de control de la curva bezier
HaruPage curve To $x2	un punto de control de la curva bezier
HaruPage curve To $x1	un punto de control de la curva bezier
HaruPage curve To $x3	el punto corriente se mueve aquí
HaruPage curve To $y2	un punto de control de la curva bezier
HaruPage bool curve To	devuelve true en éxito
HaruPage bool curve To float $x1 float $y1 float $x2 float $y2 float $x3 float $y3	anexa una curva bezier para la ruta corriente
HaruPage curve To2 $x2	un punto de control de la curva bezier
HaruPage curve To2 $x3	el punto actual se mueve aquí
HaruPage curve To2 $y2	un punto de control de la curva bezier
HaruPage bool curve To2	devuelve true en éxito
HaruPage bool curve To2 float $x2 float $y2 float $x3 float $y3	anexar una curva bezier a la ruta actual
HaruPage draw Image $image	valida instacia de haruimage
HaruPage draw Image $y	el borde mas bajo de el área donde la imagen es mostrada
HaruPage draw Image $height	el alto del área de la imagen
HaruPage draw Image $width	el ancho del área de la imagen
HaruPage draw Image $x	el borde izquierdo del área donde la imagen es mostrada
HaruPage bool draw Image	devuelve true en éxito
HaruPage bool draw Image object $image float $x float $y float $width float $height	mostrar una imagen en la p&aacute;gina
HaruPage ellipse $y	coordenada verical del centro
HaruPage ellipse $xray	la raya de la elipse en la dirección x
HaruPage ellipse $x	coordenada horizontal del centro
HaruPage ellipse $yray	la raya de la elipse en la dirección y
HaruPage bool ellipse	devuelve true en éxito
HaruPage bool ellipse float $x float $y float $xray float $yray	anexar una elipse a la ruta actual
HaruPage bool end Path	devuelve true en éxito
HaruPage bool end Path	fin actual de la ruta del objeto sin operaciones de llenado y pintado
HaruPage bool eofill	devuelve true en éxito
HaruPage bool eofill	relleno actual de la ruta usadando la regla even-odd
HaruPage bool fill	devuelve true en éxito
HaruPage bool fill	llena la ruta actual usando la regla del n&uacute;mero de vueltas diferentes a cero
HaruPage fill Stroke $close_path	parámetro opcional
HaruPage bool fill Stroke	devuelve true al tener éxito
HaruPage bool fill Stroke bool $close_path	rellenar la ruta actual utilizando la regla de zigzagueo de n&uacute;mero distinto de cero luego colorea la ruta
HaruPage float get Char Space	devuelve el valor actual del carácter espaciado
HaruPage float get Char Space	obtiene el valor actual del car&aacute;cter espaciado
HaruPage array get CMYKFill	devuelve el color de relleno actual como un arreglo con 4 elementos c m y and k
HaruPage array get CMYKFill	obtiene el color de relleno actual
HaruPage array get CMYKStroke	devuelve el color del trazo actual como un arreglo con 4 elementos c m y and k
HaruPage array get CMYKStroke	obtiene el color actual del trazo
HaruPage object get Current Font	devuelve la fuente actual usada como una instacia de harufont
HaruPage object get Current Font	obtiene la actual fuente usada
HaruPage array get Current Pos	devuelve la posición actual para la ruta de pintado como un arreglo con dos elementos - x y y
HaruPage array get Current Pos	obtiene la posici&oacute;n actual para la ruta de impresi&oacute;n
HaruPage array get Dash	devuelve el actual patrón guía como un arreglo de dos elementos - patrón y fase o false si el patrón guía no fuera establecido
HaruPage array get Dash	obtiene el actual patr&oacute;n gu&iacute;a
HaruPage float get Flatness	devuelve la categoría de la página
HaruPage float get Flatness	obtiene la categor&iacute;a de la p&aacute;gina
HaruPage float get Gray Fill	devuelve el color de relleno actual
HaruPage float get Gray Fill	obtiene el color de relleno actual
HaruPage float get Height	devuelve la altura de la página
HaruPage float get Height	obtiene la altura de la p&aacute;gina
HaruPage float get Horizontal Scaling	devuelve el valor actual de de la escala horizontal
HaruPage float get Horizontal Scaling	obtiene el valor actual de la escala horizontal
HaruPage int get Line Join	devuelve el estilo de la línea de unión
HaruPage int get Line Join	obtiene el estilo de la l&iacute;nea de uni&oacute;n
HaruPage float get Line Width	devuelve el ancho actual de la línea
HaruPage float get Line Width	obtiene el ancho actual de la l&iacute;nea
HaruPage float get Miter Limit	devuelve el valor del límite del inglete
HaruPage float get Miter Limit	obtiene el valor del l&iacute;mite del inglete
HaruPage array get RGBFill	devuelve el color actual de relleno como un arreglo con 3 elementos: r g y b
HaruPage array get RGBFill	obtiene el color actual de relleno
HaruPage array get RGBStroke	devuelve el color actual del trazo
HaruPage array get RGBStroke	obtiene el color actual del trazo
HaruPage int get Stroking Color Space	devuelve el color actual del espacio del trazado
HaruPage int get Stroking Color Space	obtiene el color actual del espacio del trazado
HaruPage array get Text Matrix	devuelve la transformación actual de la matriz de la página como un arreglo de 6 elementos: a b c d x and y
HaruPage array get Text Matrix	obtiene la transformaci&oacute;n actual de la matriz de la p&aacute;gina
HaruPage int get Text Rendering Mode	devuelve el texto actual de modo de interpretación
HaruPage int get Text Rendering Mode	obtiene el texto actual de modo de interpretaci&oacute;n
HaruPage float get Text Rise	devuelve el valor actual del texto saliente
HaruPage float get Text Rise	obtiene el valor actual del texto saliente
HaruPage get Text Width $text	el texto a medir
HaruPage float get Text Width	devuelve el ancho del tamaño de la fuente usada en el texto actual el caracter y la letra espaciada
HaruPage float get Text Width string $text	obtiene el ancho del tama&ntilde;o de la fuente usada en el texto actual el caracter y la letra espaciada
HaruPage array get Trans Matrix	devuelve la transformación actual de la matriz de la página como un arreglo de 6 elementos: a b c d x and y
HaruPage array get Trans Matrix	obtiene la transformaci&oacute;n actual de la matriz de la p&aacute;gina
HaruPage float get Word Space	devuelve el valor actual del espaciado de la palabra
HaruPage float get Word Space	obtiene el valor actual del espaciado de la palabra
HaruPage bool line To	devuelve true en éxito
HaruPage bool line To float $x float $y	dibuja una l&iacute;nea del punto actual al especificado
HaruPage move Text Pos $y	la posición de desplazamiento del texto especificado
HaruPage move Text Pos $set_leading	if set to true the function sets the text leading to - y
HaruPage move Text Pos $x	la posición de desplazamiento del texto especificado
HaruPage bool move Text Pos	devuelve true en éxito
HaruPage bool move Text Pos float $x float $y bool $set_leading	mueve la posici&oacute;n del texto al desplazamiento especificado
HaruPage move To $y	una nueva coordenada del punto inicial
HaruPage move To $x	una nueva coordenada del punto inicial
HaruPage bool move To	devuelve true en éxito
HaruPage bool move To float $x float $y	establece el punto de inicio para la nueva ruta de dibujo
HaruPage bool move To Next Line	devuelve true en éxito
HaruPage bool move To Next Line	mueve la posici&oacute;n del texto al inicio de la siguiente l&iacute;nea
HaruPage rectangle $y	el borde más bajo del rectángulo
HaruPage rectangle $height	el alto del rectángulo
HaruPage rectangle $width	el ancho del rectángulo
HaruPage rectangle $x	el borde izquierdo del rectángulo
HaruPage bool rectangle	devuelve true en éxito
HaruPage bool rectangle float $x float $y float $width float $height	anexa un rect&aacute;ngulo a la ruta actual
HaruPage bool set CMYKStroke	devuelve true en éxito
HaruPage bool set CMYKStroke float $c float $m float $y float $k	establece el color de trazo de la p&aacute;gina
HaruPage set Flatness $flatness	la planicie definida para la página
HaruPage bool set Flatness	devuelve true al tener éxito
HaruPage bool set Flatness float $flatness	establecer la planicie para la p&aacute;gina
HaruPage set Height $height	el alto definido para la página
HaruPage bool set Height	devuelve true en éxito
HaruPage bool set Height float $height	establece el alto de la p&aacute;gina
HaruPage set Line Cap $cap	debe ser uno de los siguientes valores: harupage::butt_end - la línea es enfrentada con el punto final de la ruta
HaruPage bool set Line Cap	devuelve true en éxito
HaruPage bool set Line Cap int $cap	establece la forma a ser usada en el final de las l&iacute;neas
HaruPage set Line Join $join	debe ser uno de los siguientes valores: harupage::miter_join harupage::round_join harupage::bevel_join
HaruPage bool set Line Join	devuelve true en éxito
HaruPage bool set Line Join int $join	establece el estilo de la l&iacute;nea de uni&oacute;n para la p&aacute;gina
HaruPage set Line Width $width	el ancho de la línea definida para la página
HaruPage bool set Line Width	devuelve true en éxito
HaruPage bool set Line Width float $width	establece el ancho de la l&iacute;nea para la p&aacute;gina
HaruPage set Miter Limit $limit	define el valor actual del inglete limite de la página
HaruPage bool set Miter Limit	devuelve true en éxito
HaruPage bool set Miter Limit float $limit	establece el valor actual del inglete limite de la p&aacute;gina
HaruPage set Rotate $angle	debe ser un múltiplo de 90 grados
HaruPage bool set Rotate	devuelve true en éxito
HaruPage bool set Rotate int $angle	establece la rotaci&oacute;n del &aacute;ngulo de la p&aacute;gina
HaruPage set Size $size	debe ser uno de los siguientes valores: harupage::size_letter harupage::size_legal harupage::size_a3 harupage::size_a4 harupage::size_a5 harupage::size_b4 harupage::size_b5 harupage::size_executive harupage::size_us4x6 harupage::size_us4x8 harupage::size_us5x7 harupage::size_comm10
HaruPage set Size $direction	debe ser uno de los siguientes valores: harupage::portrait harupage::landscape
HaruPage bool set Size	devuelve true en éxito
HaruPage bool set Size int $size int $direction	define el tama&ntilde;o y la direcci&oacute;n de la p&aacute;gina
HaruPage set Slide Show $trans_time	la duración del efecto de transición en segundos
HaruPage set Slide Show $type	debe ser uno de los siguientes valores: harupage::ts_wipe_right harupage::ts_wipe_left harupage::ts_wipe_up harupage::ts_wipe_down harupage::ts_barn_doors_horizontal_out harupage::ts_barn_doors_horizontal_in harupage::ts_barn_doors_vertical_out harupage::ts_barn_doors_vertical_in harupage::ts_box_out harupage::ts_box_in harupage::ts_blinds_horizontal harupage::ts_blinds_vertical harupage::ts_dissolve harupage::ts_glitter_right harupage::ts_glitter_down harupage::ts_glitter_top_left_to_bottom_right harupage::ts_replace
HaruPage set Slide Show $disp_time	muestra la duración de la página en segundos
HaruPage bool set Slide Show	devuelve true en éxito
HaruPage bool set Slide Show int $type float $disp_time float $trans_time	establece el de estilo de transici&oacute;n de la p&aacute;gina
HaruPage set Text Leading $text_leading	define la línea de espacio para la página
HaruPage bool set Text Leading	devuelve true en éxito
HaruPage bool set Text Leading float $text_leading	establece el texto gu&iacute;a l&iacute;nea de espacio para la p&aacute;gina
HaruPage set Text Rendering Mode $mode	debe ser uno de los siguientes valores: harupage::fill harupage::stroke harupage::fill_then_stroke harupage::invisible harupage::fill_clipping harupage::stroke_clipping harupage::fill_stroke_clipping harupage::clipping
HaruPage bool set Text Rendering Mode	devuelve true en éxito
HaruPage bool set Text Rendering Mode int $mode	establece el modo de interpretaci&oacute;n del texto para la p&aacute;gina
HaruPage set Text Rise $rise	define el valor actual del aumento del texto
HaruPage bool set Text Rise	devuelve true en éxito
HaruPage bool set Text Rise float $rise	establece el valor actual del aumento del texto
HaruPage set Width $width	define el ancho de la página
HaruPage bool set Width	devuelve true en éxito
HaruPage bool set Width float $width	establece el ancho de la p&aacute;gina
HaruPage set Word Space $word_space	define el espacio de la palabra para la página
HaruPage bool set Word Space	devuelve true en éxito
HaruPage bool set Word Space float $word_space	establece el espacio de la palabra para la p&aacute;gina
HaruPage show Text $text	the text to show
HaruPage bool show Text	devuelve true en éxito
HaruPage bool show Text string $text	imprime el texto en la posici&oacute;n actual de la p&aacute;gina
HaruPage show Text Next Line $char_space	el espacio del carácter
HaruPage show Text Next Line $text	el texto a mostrar
HaruPage show Text Next Line $word_space	el espacio de la palabra
HaruPage bool show Text Next Line	devuelve true en éxito
HaruPage bool show Text Next Line string $text float $word_space float $char_space	mueve la posici&oacute;n actual a el inicio de la l&iacute;nea siguiente y imprime el texto
HaruPage stroke $close_path	cierra la ruta actual si se establece a true
HaruPage bool stroke	devuelve true en éxito
HaruPage bool stroke bool $close_path	imprime una ruta actual
HaruPage bool text Out	devuelve true en éxito
HaruPage bool text Out float $x float $y string $text	imprime el texto en la posici&oacute;n especificada
HRTime\PerformanceCounter int get Elapsed Ticks	devuelve un valor de tipo float indicando los pulsos transcurridos
HRTime\PerformanceCounter int get Elapsed Ticks	obtener los pulsos transcurridos para todos los intervalos
HRTime\PerformanceCounter int get Last Elapsed Ticks	devuelve un valor de tipo float indicando los pulsos transcurridos
HRTime\PerformanceCounter int get Last Elapsed Ticks	obtener los pulsos transcurridos para el &uacute;ltimo intervalo
HRTime\PerformanceCounter bool is Running	devuelve un valor de tipo boolean indicando si la medición está en ejecución
HRTime\PerformanceCounter bool is Running	indicar si la medici&oacute;n est&aacute; en ejecuci&oacute;n
HRTime\PerformanceCounter void start	iniciar la medici&oacute;n del tiempo
HRTime\PerformanceCounter void stop	detener la medici&oacute;n del tiempo
HRTime\StopWatch get Last Elapsed Time $unit	la unidad de tiempo representada por una constante hrtime\unit
HRTime\StopWatch float get Last Elapsed Time	devuelve un valor de tipo float indicando el tiempo transcurrido
HRTime\StopWatch float get Last Elapsed Time integer $unit	obtener el tiempo transcurrido para el &uacute;ltimo intervalo
Imagick adaptive Resize Image $columns	el número de columnas en la imagen escalada
Imagick adaptive Resize Image $bestfit	si ajustar la imagen dentro de una caja limitada
Imagick adaptive Resize Image $rows	el número de filas en la imagen escalada
Imagick bool adaptive Resize Image	devuelve true en caso de éxito
Imagick bool adaptive Resize Image int $columns int $rows bool $bestfit	redimensiona una imagen adaptativamente con informaci&oacute;n dependiente de la triangulaci&oacute;n
Imagick adaptive Sharpen Image $sigma	la desviación estándar gaussiana en píxeles
Imagick adaptive Sharpen Image $radius	el radio gaussiano en píxeles sin contar el píxel central
Imagick adaptive Sharpen Image $channel	proporciona cualquier contante de canal que sea válida para su modo de canal
Imagick bool adaptive Sharpen Image	devuelve true en caso de éxito
Imagick bool adaptive Sharpen Image float $radius float $sigma int $channel	afila la imagen adaptativamente
Imagick adaptive Threshold Image $width	ancho de la zona local
Imagick adaptive Threshold Image $height	alto de la zona local
Imagick adaptive Threshold Image $offset	el índice medio
Imagick bool adaptive Threshold Image	devuelve true en caso de éxito
Imagick bool adaptive Threshold Image int $width int $height int $offset	selecciona un umbral para cada p&iacute;xel basado en un rango de intensidad
Imagick add Noise Image $noise_type	el tipo de ruido
Imagick add Noise Image $channel	proporciona cualquier contante de canal que sea válida para su modo de canal
Imagick bool add Noise Image	devuelve true en caso de éxito
Imagick bool add Noise Image int $noise_type int $channel	a&ntilde;ade ruido aleatorio a la imagen
Imagick animate Images $x_server	la dirección del servidor x
Imagick bool animate Images	devuelve true en caso de éxito
Imagick bool animate Images string $x_server	anima una imagen o im&aacute;genes
Imagick annotate Image $x	el índice horizontal en píxeles a la izquierda del texto
Imagick annotate Image $draw_settings	el objeto imagickdraw que contiene la configuración para el dibujo de texto
Imagick annotate Image $text	la cadena a dibujar
Imagick annotate Image $angle	el ángulo en el que se escribe el texto
Imagick annotate Image $y	el índice vertical en píxeles de la línea base del texto
Imagick bool annotate Image	devuelve true en caso de éxito
Imagick bool annotate Image ImagickDraw $draw_settings float $x float $y float $angle string $text	anota una imagen con texto
Imagick append Images $stack	para apilar las imágenes verticalmente
Imagick Imagick append Images	devuelve una instancia imagick si se tuvo éxito
Imagick Imagick append Images bool $stack	a&ntilde;ade un conjunto de im&aacute;genes
Imagick Imagick average Images	devuelve un nuevo objeto imagick si se tuvo éxito
Imagick Imagick average Images	calcula la media de un conjunto de im&aacute;genes
Imagick black Threshold Image $threshold	el umbral por debajo del cual todo se vuelve de color negro
Imagick bool black Threshold Image	devuelve true en caso de éxito
Imagick bool black Threshold Image mixed $threshold	fuerza a todos los p&iacute;xeles bajo un umbral a ser negros
Imagick border Image $bordercolor	objeto imagickpixel o una cadena que contiene el color del borde
Imagick border Image $width	ancho del borde
Imagick border Image $height	alto del borde
Imagick bool border Image	devuelve true en caso de éxito
Imagick bool border Image mixed $bordercolor int $width int $height	rodea la imagen con un borde
Imagick charcoal Image $sigma	la desviación estándar gaussiana en píxeles
Imagick charcoal Image $radius	el radio gaussiano en píxeles sin contar el píxel central
Imagick bool charcoal Image	devuelve true en caso de éxito
Imagick bool charcoal Image float $radius float $sigma	simula un dibujo a carboncillo
Imagick chop Image $x	el punto de referencia x del área cortada
Imagick chop Image $y	el punto de referencia y del área cortada
Imagick chop Image $width	ancho del área cortada
Imagick chop Image $height	alto del área cortada
Imagick bool chop Image	devuelve true en caso de éxito
Imagick bool chop Image int $width int $height int $x int $y	borra una regi&oacute;n de una imagen y la recorta
Imagick bool clear	devuelve true en caso de éxito
Imagick bool clear	borra todos los recursos asociados con un objeto imagick
Imagick clip Path Image $pathname	el nombre del trazado
Imagick clip Path Image $inside	si es true las operaciones posteriores toman efecto dentro del patrón de recorte
Imagick bool clip Path Image	devuelve true en caso de éxito
Imagick bool clip Path Image string $pathname bool $inside	recorta a lo largo de trazados nominados desde un perfil 8bim
Imagick Imagick clone	se devuelve una copia de del objeto imagick
Imagick Imagick clone	hace una copia exacta de un objeto imagick
Imagick color Floodfill Image $fill	objeto imagickpixel que contiene el color de relleno
Imagick color Floodfill Image $bordercolor	objeto imagickpixel que contiene el color de borde
Imagick color Floodfill Image $x	posición x del inicio del relleno
Imagick color Floodfill Image $fuzz	la cantidad de enfoque
Imagick color Floodfill Image $y	posición y del inicio del relleno
Imagick bool color Floodfill Image	devuelve true en caso de éxito
Imagick bool color Floodfill Image mixed $fill float $fuzz mixed $bordercolor int $x int $y	cambia el valor del color de cualquier p&iacute;xel que coincida con el objetivo
Imagick colorize Image $opacity	objeto imagickpixel o un valor float que contiene el valor de la opacidad
Imagick colorize Image $colorize	objeto imagickpixel o una cadena que contiene el color
Imagick bool colorize Image	devuelve true en caso de éxito
Imagick bool colorize Image mixed $colorize mixed $opacity	mezcla el color de relleno con la imagen
Imagick combine Images $channelType	proporcione cualquier constante de canal que sea válida para su modo de canal
Imagick Imagick combine Images	devuelve true en caso de éxito
Imagick Imagick combine Images int $channelType	combina una o m&aacute;s im&aacute;genes en una s&oacute;la imagen
Imagick comment Image $comment	el comentario a añadir
Imagick bool comment Image	devuelve true en caso de éxito
Imagick bool comment Image string $comment	a&ntilde;ade un comentario a la imagen
Imagick compare Image Channels $image	un objeto imagick que contiene la imagen a comparar
Imagick compare Image Channels $metricType	una de las constantes de tipos de métrica
Imagick compare Image Channels $channelType	proporcione cualquier constante de canal que sea válida para el modo de canal
Imagick array compare Image Channels	array que consiste en new_wand y distortion
Imagick array compare Image Channels Imagick $image int $channelType int $metricType	devuelve la diferencia entre una o m&aacute;s im&aacute;genes
Imagick compare Image Layers $method	una de las constantes de método de capas
Imagick Imagick compare Image Layers	devuelve true en caso de éxito
Imagick Imagick compare Image Layers int $method	devuelve la regi&oacute;n circundante m&aacute;xima entre im&aacute;genes
Imagick compare Images $metric	proporcione una constante de tipo de métrica válida
Imagick compare Images $compare	un imagen a comparar
Imagick array compare Images	devuelve true en caso de éxito
Imagick array compare Images Imagick $compare int $metric	compara una imagen con una imagen reconstruida
Imagick composite Image $x	el índice de la columna de la imagen compuesta
Imagick composite Image $composite_object	objeto imagick que guarda la imagen compuesta
Imagick composite Image $channel	proporcione cualquier constante de canal que sea válida para su modo de canal
Imagick composite Image $y	el índice de la fila de la imagen compuesta
Imagick composite Image $compose	operador de composición
Imagick bool composite Image	devuelve true en caso de éxito
Imagick bool composite Image Imagick $composite_object int $composite int $x int $y int $channel	compone una imagen en otra
Imagick construct $files	la ruta de una imagen a cargar o un array de rutas
Imagick mixed construct	devuelve un nuevo objeto imagick si se tuvo éxtio
Imagick mixed construct mixed $files	el constructor imagick
Imagick contrast Image $sharpen	el valor de la agudización
Imagick bool contrast Image	devuelve true en caso de éxito
Imagick bool contrast Image bool $sharpen	cambia el contraste de una imagen
Imagick crop Image $x	la coordenada x de la esquina superior izquierda de la región recortada
Imagick crop Image $y	la coordenada y de la esquina superior izquierda de la región recortada
Imagick crop Image $width	el ancho del recorte
Imagick crop Image $height	el alto del recorte
Imagick bool crop Image	devuelve true en caso de éxito
Imagick bool crop Image int $width int $height int $x int $y	extrae una regi&oacute;n de la imagen
Imagick crop Thumbnail Image $height	el alto de la miniatura
Imagick crop Thumbnail Image $width	el ancho de la miniatura
Imagick bool crop Thumbnail Image	devuelve true en caso de éxito
Imagick bool crop Thumbnail Image int $width int $height	crea una miniatura recortada
Imagick Imagick current	se devuelve a sí mismo si tuvo éxito
Imagick Imagick current	devuelve una referencia del objeto imagick actual
Imagick decipher Image $passphrase	la frase de contraseña
Imagick bool decipher Image	devuelve true en caso de éxito
Imagick bool decipher Image string $passphrase	descifra una imagen
Imagick delete Image Artifact $artifact	el nombre del artefacto a borrar
Imagick bool delete Image Artifact	devuelve true en caso de éxito
Imagick bool delete Image Artifact string $artifact	borra un artefacto de imagen
Imagick bool despeckle Image	devuelve true en caso de éxito
Imagick bool despeckle Image	reduce el ruido granular de una imagen
Imagick bool destroy	devuelve true en caso de éxito
Imagick bool destroy	destruye un objeto imagick
Imagick display Image $servername	el nombre del servidor x
Imagick bool display Image	devuelve true en caso de éxito
Imagick bool display Image string $servername	muestra una imagen
Imagick display Images $servername	el nombre del servidor x
Imagick bool display Images	devuelve true en caso de éxito
Imagick bool display Images string $servername	muestra una imagen o una secuencia de im&aacute;genes
Imagick distort Image $method	el método de distorsión de la imagen
Imagick distort Image $arguments	los argumentos para este método de distorsión
Imagick distort Image $bestfit	intenta redimensionar la imagen destino para ajustarse a la imagen de origen deformada
Imagick bool distort Image	devuelve true en caso de éxito
Imagick bool distort Image int $method array $arguments bool $bestfit	deforma una imagen utilizando varios m&eacute;todos de distorsi&oacute;n
Imagick edge Image $radius	el radio de la operación
Imagick bool edge Image	devuelve true en caso de éxito
Imagick bool edge Image float $radius	mejora los bordes de la imagen
Imagick encipher Image $passphrase	la frase de contraseña
Imagick bool encipher Image	devuelve true en caso de éxito
Imagick bool encipher Image string $passphrase	cifra una imagen
Imagick bool enhance Image	devuelve true en caso de éxito
Imagick bool enhance Image	mejora la calidad de una imagen con ruido
Imagick bool equalize Image	devuelve true en caso de éxito
Imagick bool equalize Image	ecualiza el histograma de la imagen
Imagick evaluate Image $channel	proporcione cualquier constante de canal que sea válida para su modo de canal
Imagick evaluate Image $constant	el valor del operador
Imagick evaluate Image $op	la evaluación del operador
Imagick bool evaluate Image	devuelve true en caso de éxito
Imagick bool evaluate Image int $op float $constant int $channel	aplica una expresi&oacute;n a una imagen
Imagick Imagick flatten Images	devuelve true en caso de éxito
Imagick Imagick flatten Images	fusiona una secuencia de im&aacute;genes
Imagick bool flip Image	devuelve true en caso de éxito
Imagick bool flip Image	crea una imagen espejo vertical
Imagick bool flop Image	devuelve true en caso de éxito
Imagick bool flop Image	crea una imagen espejo horizontal
Imagick function Image $arguments	array de argumentos a pasar a esta función
Imagick function Image $function	consulte esta lista de constantes de función
Imagick bool function Image	devuelve true en caso de éxito
Imagick bool function Image int $function array $arguments int $channel	aplica una funci&oacute;n a la imagen
Imagick gamma Image $channel	proporcione cualquier constante de canal que sea válida para su modo de canal
Imagick gamma Image $gamma	la cantidad de corrección gamma
Imagick bool gamma Image	devuelve true en caso de éxito
Imagick bool gamma Image float $gamma int $channel	correcci&oacute;n gamma de una imagen
Imagick gaussian Blur Image $channel	proporcione cualquier constante de canal que sea válida para su modo de canal
Imagick gaussian Blur Image $sigma	la desviación estándar gaussiana en píxeles
Imagick gaussian Blur Image $radius	el radio gaussiano en píxeles sin contar el píxel central
Imagick bool gaussian Blur Image	devuelve true en caso de éxito
Imagick bool gaussian Blur Image float $radius float $sigma int $channel	hace borrosa una imagen
Imagick int get Colorspace	devuelve un entero que se puede comparar con constantes colorspace
Imagick int get Colorspace	obtiene el espacio de color
Imagick int get Compression	devuelve la constante de compresión
Imagick int get Compression	obtiene el tipo de compresi&oacute;n del objeto
Imagick int get Compression Quality	devuelve un valor de tipo integer que describe la calidad de compresión
Imagick int get Compression Quality	obtiene la calidad de compresi&oacute;n del objeto
Imagick string get Copyright	devuelve una cadena que contiene el anuncio del copyright de la api imagemagick y de la api de c magickwand
Imagick string get Copyright	devuelve el copyright de la api imagemagick como una cadena
Imagick string get Filename	devuelve una cadena en caso de éxito
Imagick string get Filename	el nombre de archivo asociado a una secuencia de im&aacute;genes
Imagick string get Font	devuelve la cadena que contiene el nombre de la fuente o false si no está establecida la fuente
Imagick string get Font	obtiene la fuente
Imagick int get Gravity	devuelve la propiedad gravedad
Imagick int get Gravity	obtiene la gravedad
Imagick get Image Artifact $artifact	el nombre del artefacto
Imagick string get Image Artifact	devuelve el valor del artefacto si se tuvo éxito
Imagick string get Image Artifact string $artifact	obtener el artefacto de imagen
Imagick ImagickPixel get Image Background Color	devuelve un objeto imagickpixel establecido al color de fondo de la imagen
Imagick ImagickPixel get Image Background Color	devuelve el color de fondo de la imagen
Imagick string get Image Blob	devuelve una cadena que contiene la imagen
Imagick string get Image Blob	devuelve la secuencia de im&aacute;genes como un valor de tipo blob
Imagick array get Image Blue Primary	matriz consistente en las coordenadas x e y del punto
Imagick array get Image Blue Primary	devuelve el punto primario azul de la cromaticidad
Imagick ImagickPixel get Image Border Color	devuelve true en caso de éxito
Imagick ImagickPixel get Image Border Color	devuelve el color del borde de la imagen
Imagick get Image Channel Distortion $channel	proporcione cualquier constante de canal que sea válida para su modo de canal
Imagick get Image Channel Distortion $reference	objeto imagick que se va a comparar
Imagick get Image Channel Distortion $metric	una de las constantes de tipo de métrica
Imagick float get Image Channel Distortion	devuelve true en caso de éxito
Imagick float get Image Channel Distortion Imagick $reference int $channel int $metric	compara los canales de imagen de una imagen con una imagen reconstruida
Imagick get Image Channel Distortions $metric	consulte esta lista de constantes de tipo de métrica
Imagick get Image Channel Distortions $channel	proporciona cualquier contante de canal que sea válida para su modo de canal
Imagick get Image Channel Distortions $reference	objeto imagick que contiene la imagen de referencia
Imagick float get Image Channel Distortions	devuelve un valor de tipo double que describe la distorsión del canal
Imagick float get Image Channel Distortions Imagick $reference int $metric int $channel	obtiene las distorsiones del canal
Imagick get Image Channel Extrema $channel	proporcione cualquier constante de canal que sea válida para su modo de canal
Imagick array get Image Channel Extrema	devuelve true en caso de éxito
Imagick array get Image Channel Extrema int $channel	obtiene los extremos de uno o m&aacute;s canales de imagen
Imagick get Image Channel Mean $channel	proporcione cualquier constante de canal que sea válida para su modo de canal
Imagick array get Image Channel Mean	devuelve true en caso de éxito
Imagick array get Image Channel Mean int $channel	obtiene la media y la desviaci&oacute;n est&aacute;ndar
Imagick get Image Channel Range $channel	proporciona cualquier contante de canal que sea válida para su modo de canal
Imagick array get Image Channel Range	devuelve una matriz que contiene los valores mínimo y máximo de el / los canal / es
Imagick array get Image Channel Range int $channel	obtiene el rango del canal
Imagick array get Image Channel Statistics	devuelve true en caso de éxito
Imagick array get Image Channel Statistics	devuelve las estad&iacute;sticas de cada canal de la imagen
Imagick Imagick get Image Clip Mask	devuelve un objeto imagick que contiene la máscara de recorte
Imagick Imagick get Image Clip Mask	obtiene la m&aacute;scara de recorte de la imagen
Imagick int get Image Colors	devuelve true en caso de éxito
Imagick int get Image Colors	obtiene el n&uacute;mero de colores &uacute;nicos de la imagen
Imagick int get Image Compose	devuelve true en caso de éxito
Imagick int get Image Compose	devuelve el operador de composici&oacute;n asociado a la imagen
Imagick int get Image Compression	devuelve la constante de compresión
Imagick int get Image Compression	obtiene el tipo de compresi&oacute;n de la imagen actual
Imagick int get Image Delay	devuelve el retraso de la imagen
Imagick int get Image Delay	obtiene el retraso de la imagen
Imagick int get Image Depth	la profundidad de la imagen
Imagick int get Image Depth	obtiene la profundidad de la imagen
Imagick int get Image Dispose	devuelve el método de disposición si se tuvo éxito
Imagick int get Image Dispose	obtiene el m&eacute;todo de disposici&oacute;n de la imagen
Imagick array get Image Extrema	devuelve una matriz asociativa con las claves min y max
Imagick array get Image Extrema	obtiene los extremos de la imagen
Imagick string get Image Filename	devuelve una cadena con el nombre de archivo de la imagen
Imagick string get Image Filename	devuelve el nombre de archivo de una imagen en particular de una secuencia
Imagick float get Image Gamma	devuelve el valor gamma de la imagen si se tuvo éxito
Imagick float get Image Gamma	obtiene el valor gamma de la imagen
Imagick int get Image Gravity	devuelve la propiedad gravedad de las imágenes
Imagick int get Image Gravity	obtiene la gravedad de la imagen
Imagick array get Image Green Primary	devuelve un array con las claves x e y si se tuvo éxito lanza una imagickexception en caso de error
Imagick array get Image Green Primary	devuelve el punto primario verde de la cromaticidad
Imagick int get Image Height	devuelve el alto de la imagen en píxeles
Imagick int get Image Height	devuelve el alto de la imagen
Imagick array get Image Histogram	devuelve el histograma de la imagen como un array de objetos imagickpixel
Imagick array get Image Histogram	obtiene el histograma de la imagen
Imagick int get Image Index	devuelve un valor de tipo integer que contiene el índice de la imagen en la pila
Imagick int get Image Index	obtiene el &iacute;ndice de la imagen activa actual
Imagick int get Image Interpolate Method	devuelve el método de interpolación si se tuvo éxito
Imagick int get Image Interpolate Method	devuelve el m&eacute;todo de interpolaci&oacute;n
Imagick int get Image Length	devuelve un valor de tipo int que contiene el tamaño de la imagen actual
Imagick int get Image Length	devuelve la longitud de la imagen en bytes
Imagick int get Image Orientation	devuelve un integer si se tuvo éxito
Imagick int get Image Orientation	obtiene la orientaci&oacute;n de la imagen
Imagick get Image Pixel Color $y	la coordenada y del píxel
Imagick get Image Pixel Color $x	la coordenada x del píxel
Imagick ImagickPixel get Image Pixel Color	devuelve una instancia de imagickpixel para el color en las coordenadas dadas
Imagick ImagickPixel get Image Pixel Color int $x int $y	devuelve el color del p&iacute;xel especificado
Imagick get Image Profile $name	el nombre del perfil que se va a devolver
Imagick string get Image Profile	devuelve un string que contiene el perfil de la imagen
Imagick string get Image Profile string $name	devuelve el perfil nominado de la imagen
Imagick get Image Properties $only_names	si se devuelve sólo los nombres de las propiedades
Imagick get Image Properties $pattern	el patrón para los nombres de las propiedades
Imagick array get Image Properties	devuelve un array que contiene las propiedades de la imagen o los nombres de las propiedades
Imagick array get Image Properties string $pattern bool $only_names	devuelve las propiedades de la imagen
Imagick get Image Property $name	nombre de la propiedad por ejemplo exif:datetime
Imagick string get Image Property	devuelve un string que contiene la propiedad de la imagen false si no existe una propiedad con el nombre dado
Imagick string get Image Property string $name	devuelve la propiedad nominada de la imagen
Imagick array get Image Red Primary	devuelve el punto primario rojo de la cromaticidad como un array con las claves x e y
Imagick array get Image Red Primary	devuelve el punto primario rojo de la cromaticidad
Imagick get Image Region $width	el ancho de la región extraída
Imagick get Image Region $y	coordenada y de la esquina superior izquierda de la región extraída
Imagick get Image Region $x	coordenada x de la esquina superior izquierda de la región extraída
Imagick get Image Region $height	el alto de la región extraída
Imagick Imagick get Image Region	extrae una región de la imagen y la devuleve como una nueva varita mágica
Imagick Imagick get Image Region int $width int $height int $x int $y	extrae una regi&oacute;n de la imagen
Imagick array get Image Resolution	devuelve la resolución como un array
Imagick array get Image Resolution	obtiene la resoluci&oacute;n x e y de la imagen
Imagick string get Images Blob	devuelve un string que contiene las imágenes
Imagick string get Images Blob	devuelve todas las secuencias de im&aacute;genes como un blob
Imagick int get Image Scene	devuelve la escena de la imagen
Imagick int get Image Scene	obtiene la escena de la imagen
Imagick int get Image Size	devuelve un valor de tipo integer que contiene el tamaño actual de la imagen
Imagick int get Image Size	devuelve la longitud de la imagen en bytes
Imagick array get Image White Point	devuelve el punto blanco de la cromaticidad como un array asociativa con las claves x e y
Imagick array get Image White Point	devuelve el punto blanco de la cromaticidad
Imagick int get Image Width	devuelve el ancho de la imagen
Imagick int get Image Width	devuelve el ancho de la imagen
Imagick int get Interlace Scheme	obtiene la varita mágica combinación de entrelazado
Imagick int get Interlace Scheme	obtiene la combinaci&oacute;n de entrelazado de un objeto
Imagick int get Iterator Index	devuelve un integer que contiene el índice de la imagen en la pila
Imagick int get Iterator Index	obtiene el &iacute;ndice de la imagen activa actual
Imagick int get Number Images	devuelve el número de imágenes asociadas con el objeto imagick
Imagick int get Number Images	devuelve el n&uacute;mero de im&aacute;genes del objeto
Imagick get Option $key	el nombre de la opción
Imagick string get Option	devuelve un valor asociado con una varita mágica y la clave especificada
Imagick string get Option string $key	devuelve un valor asociado con la clave especificada
Imagick string get Package Name	devuelve el nombre del paquete de imagemagick como un string
Imagick string get Package Name	devuelve el nombre del paquete de imagemagick
Imagick array get Page	devuelve la geometría de la página asociada con el objeto imagick en un array asociativo con las claves width ancho height alto x e y
Imagick array get Page	devuelve la geometr&iacute;a de la p&aacute;gina
Imagick ImagickPixelIterator get Pixel Iterator	devuelve un objeto imagickpixeliterator si se tuvo éxito
Imagick ImagickPixelIterator get Pixel Iterator	devuelve un objeto magickpixeliterator
Imagick get Pixel Region Iterator $y	la coordenada y de la región
Imagick get Pixel Region Iterator $columns	el ancho de la región
Imagick get Pixel Region Iterator $x	la coordenada x de la región
Imagick get Pixel Region Iterator $rows	el alto de la región
Imagick ImagickPixelIterator get Pixel Region Iterator	devuelve un objeto imagickpixeliterator de una sección de imagen
Imagick ImagickPixelIterator get Pixel Region Iterator int $x int $y int $columns int $rows	obtinene un objeto imagickpixeliterator de una secci&oacute;n de imagen
Imagick float get Point Size	devuelve un float que contiene el tamaño de punto
Imagick float get Point Size	obtiene el tama&ntilde;o de punto
Imagick array get Quantum Depth	devuelve la profundidad de la cuantía de imagick como un string
Imagick array get Quantum Depth	obtiene la profundidad de la cuant&iacute;a
Imagick array get Quantum Range	devuelve un array asociativo que contiene el rango de cuantía como un integer quantumrangelong y como un string quantumrangestring
Imagick array get Quantum Range	devuelve el rango de cuant&iacute;a de imagick
Imagick string get Release Date	devuelve la fecha de distribución de imagemagick como un string
Imagick string get Release Date	devuelve la fecha de distribuci&oacute;n de imagemagick
Imagick get Resource $type	consulte esta lista de constantes de tipos de recursos
Imagick int get Resource	devuelve el uso de memoria del recurso especificado en megabytes
Imagick int get Resource int $type	devuelve el uso de memoria del recurso especificado
Imagick get Resource Limit $type	consulte la lista de constantes de tipos de recursos
Imagick int get Resource Limit	devuelve el límite del recurso especificado en megabytes
Imagick int get Resource Limit int $type	devuelve el l&iacute;mite del recurso especificado
Imagick array get Sampling Factors	devuelve un array asociativo con el factor de muestreo horizontal y vertical de la imagen
Imagick array get Sampling Factors	obtiene el factor de muestreo horizontal y vertical
Imagick array get Size	devuelve el tamaño asociado con el objeto imagick como una matriz con las claves columns columnas y rows filas
Imagick array get Size	devuelve el tama&ntilde;o asociado con el objeto imagick
Imagick int get Size Offset	devuelve el índice de tamaño asociado con el objeto imagick
Imagick int get Size Offset	devuelve el &iacute;ndice de tama&ntilde;o
Imagick array get Version	devuelve la versión de la api imagemagick como un string y como un número
Imagick array get Version	devuelve la versi&oacute;n de la api imagemagick
Imagick hald Clut Image $clut	objeto imagick que contiene la paleta hald
Imagick hald Clut Image $channel	proporciona cualquier contante de canal que sea válida para su modo de canal
Imagick bool hald Clut Image	devuelve true en caso de éxito
Imagick bool hald Clut Image Imagick $clut int $channel	reemplaza los colores de la imagen
Imagick array identify Image	identifica una imagen y devuelve los atributos
Imagick array identify Image bool $appendRawOutput	identifica una imagen y obtiene sus atributos
Imagick label Image $label	la etiqueta a añadir
Imagick bool label Image	devuelve true en caso de éxito
Imagick bool label Image string $label	a&ntilde;ade una etiqueta a una imagen
Imagick liquid Rescale Image $width	el ancho del tamaño objetivo
Imagick liquid Rescale Image $delta_x	cuánto puede atravesar la costura el eje x
Imagick liquid Rescale Image $height	el alto del tamaño objetivo
Imagick liquid Rescale Image $rigidity	introduce un sesgo para costuras no rectas
Imagick bool liquid Rescale Image	devuelve true en caso de éxito
Imagick bool liquid Rescale Image int $width int $height float $delta_x float $rigidity	anima una imagen o im&aacute;genes
Imagick array list Registry	un arrayn que contiene los pares de clave / valor del registro
Imagick array list Registry	description
Imagick bool magnify Image	devuelve true en caso de éxito
Imagick bool magnify Image	escala una imagen x2 proporcionalmente
Imagick matte Floodfill Image $y	la coordenada y de inicio de la operación
Imagick matte Floodfill Image $x	la coordenada x de inicio de la operación
Imagick matte Floodfill Image $fuzz	el miembro enfoque de la imagen define cuánta tolerancia se acepta para considerar que dos colores son el mismo
Imagick matte Floodfill Image $alpha	el nivel de transparencia: 1
Imagick matte Floodfill Image $bordercolor	un objeto imagickpixel o una cadena que representa el color del borde
Imagick bool matte Floodfill Image	devuelve true en caso de éxito
Imagick bool matte Floodfill Image float $alpha float $fuzz mixed $bordercolor int $x int $y	cambia el valor de transparencia de un color
Imagick median Filter Image $radius	el radio de la zona inmediata de los píxeles
Imagick bool median Filter Image	devuelve true en caso de éxito
Imagick bool median Filter Image float $radius	aplica un filtro digital
Imagick bool modulate Image	devuelve true en caso de éxito
Imagick bool modulate Image float $brightness float $saturation float $hue	controla el brillo la saturaci&oacute;n y el tono
Imagick montage Image $draw	el nombre de la fuente tamaño y color se obtienen de este objeto
Imagick montage Image $tile_geometry	el número de teselas por fila y página p
Imagick montage Image $thumbnail_geometry	tamaño preferido de la imagen y del borde de cada miniatura p
Imagick montage Image $frame	rodea la imagen con un borde ornamental p
Imagick montage Image $mode	modo de enmarcación de la miniatura véase constantes de modo de montaje
Imagick Imagick montage Image	devuelve true en caso de éxito
Imagick Imagick montage Image ImagickDraw $draw string $tile_geometry string $thumbnail_geometry int $mode string $frame	crea una imagen compuesta
Imagick morph Images $number_frames	el número de imágenes intermedias a generar
Imagick Imagick morph Images	este método devuelve un nuevo objeto imagick si se tuvo éxito
Imagick Imagick morph Images int $number_frames	metamorfosea un conjunto de im&aacute;genes
Imagick Imagick mosaic Images	devuelve true en caso de éxito
Imagick Imagick mosaic Images	forma un mosaico de im&aacute;genes
Imagick motion Blur Image $channel	proporcione cualquier constante de canal que sea válida para su modo de canal
Imagick motion Blur Image $sigma	la desviación estándar gaussiana en píxeles
Imagick motion Blur Image $angle	aplica el efecto a lo largo de este ángulo
Imagick motion Blur Image $radius	el radio gaussiano en píxeles sin contar el píxel central
Imagick bool motion Blur Image	devuelve true en caso de éxito
Imagick bool motion Blur Image float $radius float $sigma float $angle int $channel	simula borrosidad en movimiento
Imagick new Image $background	el color de fondo usado para esta imagen
Imagick new Image $cols	columnas en la nueva imagen
Imagick new Image $format	el formato de la imagen
Imagick new Image $rows	filas en la nueva imagen
Imagick bool new Image	devuelve true en caso de éxito
Imagick bool new Image int $cols int $rows mixed $background string $format	crea una nueva imagen
Imagick bool next Image	devuelve true en caso de éxito
Imagick bool next Image	se mueve a la siguiente imagen
Imagick oil Paint Image $radius	el radio de la zona circular inmediata
Imagick bool oil Paint Image	devuelve true en caso de éxito
Imagick bool oil Paint Image float $radius	simula una pintura al &oacute;leo
Imagick opaque Paint Image $fuzz	la cantidad de difusión
Imagick opaque Paint Image $fill	el color sustituto
Imagick opaque Paint Image $channel	proporciona cualquier contante de canal que sea válida para su modo de canal
Imagick opaque Paint Image $invert	si es true pinta cualquier píxel que no coincida con el color objetivo
Imagick opaque Paint Image $target	objeto imagickpixel o una cadena que contiene el color a cambiar
Imagick bool opaque Paint Image	devuelve true en caso de éxito
Imagick bool opaque Paint Image mixed $target mixed $fill float $fuzz bool $invert int $channel	cambia el color de cualquier p&iacute;xel que coincida con el objetivo
Imagick bool optimize Image Layers	devuelve true en caso de éxito
Imagick bool optimize Image Layers	elimina porciones repetidas de im&aacute;genes para optimizarlas
Imagick ordered Posterize Image $channel	proporcione cualquier constante de canal que sea válida para su modo de canal
Imagick ordered Posterize Image $threshold_map	un string que contiene el nombre del mapa de umbral de entramado que se va a usar
Imagick bool ordered Posterize Image	devuelve true en caso de éxito
Imagick bool ordered Posterize Image string $threshold_map int $channel	realiza un entramado ordenado
Imagick ping Image $filename	el nombre de fichero de donde se va a leer la información
Imagick bool ping Image	devuelve true en caso de éxito
Imagick bool ping Image string $filename	trae los atributos b&aacute;sicos de una imagen
Imagick ping Image Blob $image	un string que contiene la imagen
Imagick bool ping Image Blob	devuelve true en caso de éxito
Imagick bool ping Image Blob string $image	traer los atributos r&aacute;pidamente
Imagick ping Image File $filehandle	un gestor de archivo abierto a la imagen
Imagick ping Image File $fileName	nombre de archivo opcional para esta imagen
Imagick bool ping Image File	devuelve true en caso de éxito
Imagick bool ping Image File resource $filehandle string $fileName	obtener los atrbutos b&aacute;sicos de la imagen de una manera liviana
Imagick preview Images $preview	tipo de previsualización
Imagick bool preview Images	devuelve true en caso de éxito
Imagick bool preview Images int $preview	precisa r&aacute;pidamente los par&aacute;metros apropiados para el procesamiento de la imagen
Imagick bool previous Image	devuelve true en caso de éxito
Imagick bool previous Image	se mueve a la imagen previa del objeto
Imagick query Font Metrics $text	el texto
Imagick query Font Metrics $multiline	parámetro multilínea
Imagick query Font Metrics $properties	objeto imagickdraw que contiene las propiedades de la fuente
Imagick array query Font Metrics	devuelve un array multidimensional que representa las métricas de la fuente
Imagick array query Font Metrics ImagickDraw $properties string $text bool $multiline	devuelve una matriz que representa las m&eacute;tricas de la fuente
Imagick query Fonts $pattern	el patrón de consulta
Imagick array query Fonts	devuelve un array que contiene las fuentes configuradas
Imagick array query Fonts string $pattern	devuelve las fuentes configuradas
Imagick array query Formats	devuelve un array que contiene los formatos soportados por imagick
Imagick array query Formats string $pattern	devuelve los formatos soportados por imagick
Imagick bool radial Blur Image	devuelve true en caso de éxito
Imagick bool radial Blur Image float $angle int $channel	hace borrosa de forma radial una imagen
Imagick bool raise Image	devuelve true en caso de éxito
Imagick bool raise Image int $width int $height int $x int $y bool $raise	crea un efecto de bot&oacute;n en 3d simulado
Imagick bool read Image	devuelve true en caso de éxito
Imagick bool read Image string $filename	lee una imagen desde un nombre de fichero
Imagick bool read Image Blob	devuelve true en caso de éxito
Imagick bool read Image Blob string $image string $filename	lee una imagen desde un string binario
Imagick bool read Image File	devuelve true en caso de éxito
Imagick bool read Image File resource $filehandle string $fileName	lee una imagen desde un gestor de fichero abierto
Imagick recolor Image $matrix	la matriz que contiene los valores de los colores
Imagick bool recolor Image	devuelve true en caso de éxito
Imagick bool recolor Image array $matrix	re-colorea una imagen
Imagick remap Image $DITHER	consulte esta lista de constantes de métodos de entramado
Imagick remap Image $replacement	un objeto imagick que contiene los colores sustitutos
Imagick bool remap Image	devuelve true en caso de éxito
Imagick bool remap Image Imagick $replacement int $DITHER	re-mapea los colores de una imagen
Imagick bool remove Image	devuelve true en caso de éxito
Imagick bool remove Image	quita una imagen de la lista de im&aacute;genes
Imagick string remove Image Profile	devuelve un string que contiene el perfil de la imagen
Imagick string remove Image Profile string $name	elimina el perfil nominado de la imagen y lo devuelve
Imagick bool resample Image	devuelve true en caso de éxito
Imagick bool resample Image float $x_resolution float $y_resolution int $filter float $blur	remuestrea la imagen a la resoluci&oacute;n deseada
Imagick reset Image Page $page	la definición de página
Imagick bool reset Image Page	devuelve true en caso de éxito
Imagick bool reset Image Page string $page	reinicia una p&aacute;gina de imagen
Imagick round Corners $displace	desplazamiento de la imagen
Imagick round Corners $y_rounding	redondeo y
Imagick round Corners $size_correction	corrección del tamaño
Imagick round Corners $stroke_width	ancho del contorno
Imagick round Corners $x_rounding	redondeo x
Imagick bool round Corners	devuelve true en caso de éxito
Imagick bool round Corners float $x_rounding float $y_rounding float $stroke_width float $displace float $size_correction	redondea las esquinas de una imagen
Imagick bool sample Image	devuelve true en caso de éxito
Imagick bool sample Image int $columns int $rows	escala una imagen con un muestreo de p&iacute;xeles
Imagick bool scale Image	devuelve true en caso de éxito
Imagick bool scale Image int $cols int $rows bool $bestfit	escala el tama&ntilde;o de una imagen
Imagick selective Blur Image $CHANNEL	proporciona cualquier contante de canal que sea válida para su modo de canal
Imagick void selective Blur Image float $radius float $sigma float $threshold int $CHANNEL	description
Imagick bool sepia Tone Image	devuelve true en caso de éxito
Imagick bool sepia Tone Image float $threshold	pone una imagen en tono sepia
Imagick bool set Background Color	devuelve true en caso de éxito
Imagick bool set Background Color mixed $background	establece el color de fondo por omisi&oacute;n del objeto
Imagick set Colorspace $COLORSPACE	una de las constantes colorspace
Imagick bool set Colorspace	devuelve true en caso de éxito
Imagick bool set Colorspace int $COLORSPACE	establecer el espacio de color
Imagick bool set Compression Quality	devuelve true en caso de éxito
Imagick bool set Compression Quality int $quality	establece la calidad de compresi&oacute;n predeterminda del objeto
Imagick bool set First Iterator	devuelve true en caso de éxito
Imagick bool set First Iterator	establece el iterador imagick para la primera imagen
Imagick set Image $replace	el objeto imagick sustituto
Imagick bool set Image	devuelve true en caso de éxito
Imagick bool set Image Imagick $replace	reemplaza una imagen en el objeto
Imagick set Image Alpha Channel $mode	una de las constantes imagick::alphachannel_*
Imagick bool set Image Alpha Channel	devuelve true en caso de éxito
Imagick bool set Image Alpha Channel int $mode	establece el canal alfa de la imagen
Imagick bool set Image Background Color	devuelve true en caso de éxito
Imagick bool set Image Background Color mixed $background	establece el color de fondo de la imagen
Imagick bool set Image Blue Primary	devuelve true en caso de éxito
Imagick bool set Image Blue Primary float $x float $y	establece el punto primario azul de la cromaticidad de la imagen
Imagick set Image Clip Mask $clip_mask	el objeto imagick que contiene la máscara de recorte
Imagick bool set Image Clip Mask	devuelve true en caso de éxito
Imagick bool set Image Clip Mask Imagick $clip_mask	establece la m&aacute;scara de recorte de una imagen
Imagick bool set Image Colormap Color	devuelve true en caso de éxito
Imagick bool set Image Colormap Color int $index ImagickPixel $color	establece el color de un &iacute;ndice de mapa de color especificado
Imagick set Image Colorspace $colorspace	una de las constantes colorspace
Imagick bool set Image Colorspace	devuelve true en caso de éxito
Imagick bool set Image Colorspace int $colorspace	establece el espacio de color de una imagen
Imagick bool set Image Compose	devuelve true en caso de éxito
Imagick bool set Image Compose int $compose	establece el operador de composci&oacute;n de una imagen
Imagick set Image Compression Quality $quality	la calidad de compresión de la imagen como un integer
Imagick bool set Image Compression Quality	devuelve true en caso de éxito
Imagick bool set Image Compression Quality int $quality	establece la calidad de compresi&oacute;n de una imagen
Imagick bool set Image Dispose	devuelve true en caso de éxito
Imagick bool set Image Dispose int $dispose	establece el m&eacute;todo de disposici&oacute;n de una imagen
Imagick bool set Image Filename	devuelve true en caso de éxito
Imagick bool set Image Filename string $filename	establece el nombre de archivo de una imagen en particular
Imagick bool set Image Gamma	devuelve true en caso de éxito
Imagick bool set Image Gamma float $gamma	establece el valor gamma de la imagen
Imagick set Image Index $index	la posición donde se va a establecer el iterador
Imagick bool set Image Index	devuelve true en caso de éxito
Imagick bool set Image Index int $index	establece la posici&oacute;n del iterador
Imagick bool set Image Interlace Scheme	devuelve true en caso de éxito
Imagick bool set Image Interlace Scheme int $interlace_scheme	establece la compresi&oacute;n de la imagen
Imagick set Image Iterations $iterations	el número de veces que la imagen debería mostrarse en bucle
Imagick bool set Image Iterations	devuelve true en caso de éxito
Imagick bool set Image Iterations int $iterations	establece las iteraciones de una imagen
Imagick set Image Opacity $opacity	el nivel de transpariencia: 1
Imagick bool set Image Opacity	devuelve true en caso de éxito
Imagick bool set Image Opacity float $opacity	establece el nivel de opacidad de la imagen
Imagick set Image Orientation $orientation	una de las constantes de orientación
Imagick bool set Image Orientation	devuelve true en caso de éxito
Imagick bool set Image Orientation int $orientation	establece la orientaci&oacute;n de la imagen
Imagick bool set Image Profile	devuelve true en caso de éxito
Imagick bool set Image Profile string $name string $profile	a&ntilde;ade un perfil nominado al objeto imagick
Imagick bool set Image Property	devuelve true en caso de éxito
Imagick bool set Image Property string $name string $value	establece una propiedad de la imagen
Imagick bool set Image Red Primary	devuelve true en caso de éxito
Imagick bool set Image Red Primary float $x float $y	establece el punto primario rojo de la cromaticidad de la imagen
Imagick bool set Image Resolution	devuelve true en caso de éxito
Imagick bool set Image Resolution float $x_resolution float $y_resolution	establece la resoluci&oacute;n de la imagen
Imagick bool set Image Scene	devuelve true en caso de éxito
Imagick bool set Image Scene int $scene	establece la escena de la imagen
Imagick set Image Ticks Per Second $ticks_per_second	la duración por la que imagen debería mostrarse expresada en ticks por segundo
Imagick bool set Image Ticks Per Second	devuelve true en caso de éxito
Imagick bool set Image Ticks Per Second int $ticks_per_second	establece los ticks por segundo de la imagen
Imagick bool set Image Type	devuelve true en caso de éxito
Imagick bool set Image Type int $image_type	establece el tipo de imagen
Imagick bool set Image Virtual Pixel Method	devuelve true en caso de éxito
Imagick bool set Image Virtual Pixel Method int $method	establece el m&eacute;todo de p&iacute;xel virtual de la imagen
Imagick bool set Interlace Scheme	devuelve true en caso de éxito
Imagick bool set Interlace Scheme int $interlace_scheme	establece la compresi&oacute;n de la imagen
Imagick set Iterator Index $index	la posición donde se va a establecer el iterador
Imagick bool set Iterator Index	devuelve true en caso de éxito
Imagick bool set Iterator Index int $index	establece la posici&oacute;n del iterador
Imagick bool set Option	devuelve true en caso de éxito
Imagick bool set Option string $key string $value	establece una opci&oacute;n
Imagick bool set Page	devuelve true en caso de éxito
Imagick bool set Page int $width int $height int $x int $y	establece la geometr&iacute;a de p&aacute;gina del objeto imagick
Imagick set Progress Monitor $callback	la función de progreso a llamar
Imagick void set Progress Monitor callable $callback	description
Imagick void set Registry string $key string $value	description
Imagick set Resolution $y_resolution	la resolución vertical
Imagick set Resolution $x_resolution	la resolución horizontal
Imagick bool set Resolution	devuelve true en caso de éxito
Imagick bool set Resolution float $x_resolution float $y_resolution	establece la resoluci&oacute;n de la imagen
Imagick set Resource Limit $type	consulte la lista de constantes de tipos de recurso
Imagick set Resource Limit $limit	el límite del recurso
Imagick bool set Resource Limit	devuelve true en caso de éxito
Imagick bool set Resource Limit int $type int $limit	establece el l&iacute;mite de un recurso en particular en megabytes
Imagick bool set Sampling Factors	devuelve true en caso de éxito
Imagick bool set Sampling Factors array $factors	establece los factores de muestreo de la imagen
Imagick bool set Size	devuelve true en caso de éxito
Imagick bool set Size int $columns int $rows	establece el tama&ntilde;o del objeto imagick
Imagick set Size Offset $rows	el alto en píxeles
Imagick set Size Offset $columns	el ancho en píxeles
Imagick set Size Offset $offset	el índice de la imagen
Imagick bool set Size Offset	devuelve true en caso de éxito
Imagick bool set Size Offset int $columns int $rows int $offset	establece el tama&ntilde;o y el &iacute;ndice del objeto imagick
Imagick bool set Type	devuelve true en caso de éxito
Imagick bool set Type int $image_type	establece el atributo tipo de imagen
Imagick shade Image $gray	un valor distinto de cero sombrea la intensidad de cada píxel
Imagick shade Image $azimuth	define la dirección de la fuente de luz
Imagick shade Image $elevation	define la dirección de la fuente de luz
Imagick bool shade Image	devuelve true en caso de éxito
Imagick bool shade Image bool $gray float $azimuth float $elevation	crea un efecto en 3d
Imagick bool sharpen Image	devuelve true en caso de éxito
Imagick bool sharpen Image float $radius float $sigma int $channel	afila una imagen
Imagick bool shave Image	devuelve true en caso de éxito
Imagick bool shave Image int $columns int $rows	recorta p&iacute;xeles de los extremos de la imagen
Imagick shear Image $background	el color de fondo
Imagick shear Image $y_shear	el número de grados a recortar sobre el eje y
Imagick shear Image $x_shear	el número de grados a recortar sobre el eje x
Imagick bool shear Image	devuelve true en caso de éxito
Imagick bool shear Image mixed $background float $x_shear float $y_shear	crea un paralelogramo
Imagick sigmoidal Contrast Image $alpha	la cantidad de contraste a aplicar
Imagick sigmoidal Contrast Image $channel	a qué canales de color se aplicará el contraste
Imagick sigmoidal Contrast Image $beta	donde estará el punto medio del degradado
Imagick sigmoidal Contrast Image $sharpen	si es true aumenta el contraste si es false lo decrementa
Imagick bool sigmoidal Contrast Image	devuelve true en caso de éxito
Imagick bool sigmoidal Contrast Image bool $sharpen float $alpha float $beta int $channel	ajusta el contraste de una imagen
Imagick sketch Image $sigma	la desviación estándar gaussiana en píxeles
Imagick sketch Image $angle	aplica el efecto a lo largo de este ángulo
Imagick sketch Image $radius	el radio gaussiano en píxeles sin contar el píxel central
Imagick bool sketch Image	devuelve true en caso de éxito
Imagick bool sketch Image float $radius float $sigma float $angle	simula el bosquejo de un lapiz
Imagick Imagick smush Images	la nueva imagen aplastada
Imagick Imagick smush Images string $stack string $offset	description
Imagick bool solarize Image	devuelve true en caso de éxito
Imagick bool solarize Image int $threshold	aplica un efecto de solarizaci&oacute;n a la imagen
Imagick sparse Color Image $SPARSE_METHOD	consulte esta lista de constantes de métodos de escasez
Imagick sparse Color Image $CHANNEL	proporciona cualquier contante de canal que sea válida para su modo de canal
Imagick sparse Color Image $arguments	una matriz que contiene las coodenadas
Imagick bool sparse Color Image	devuelve true en caso de éxito
Imagick bool sparse Color Image int $SPARSE_METHOD array $arguments int $channel	interpola colores
Imagick bool spread Image	devuelve true en caso de éxito
Imagick bool spread Image float $radius	despalza aleatoriamente cada p&iacute;xel en un bloque
Imagick void statistic Image int $type int $width int $height string $CHANNEL	description
Imagick Imagick stegano Image	devuelve true en caso de éxito
Imagick Imagick stegano Image Imagick $watermark_wand int $offset	oculta una marca de agua digital dentro de la imagen
Imagick bool stereo Image	devuelve true en caso de éxito
Imagick bool stereo Image Imagick $offset_wand	compone dos im&aacute;genes
Imagick sub Image Match $similarity	una nueva imagen que muestra la cantidad de similitud de cada píxel
Imagick Imagick sub Image Match Imagick $Imagick array $offset float $similarity	description
Imagick bool swirl Image	devuelve true en caso de éxito
Imagick bool swirl Image float $degrees	arremolina los p&iacute;xeles desde el centro de la imagen
Imagick bool texture Image	devuelve true en caso de éxito
Imagick bool texture Image Imagick $texture_wand	reviste repetidamente la textura de la imagen
Imagick bool threshold Image	devuelve true en caso de éxito
Imagick bool threshold Image float $threshold int $channel	cambia el valor de p&iacute;exeles individuales basdos en un umbral
Imagick bool tint Image	devuelve true en caso de éxito
Imagick bool tint Image mixed $tint mixed $opacity	aplica un vector de color a cada p&iacute;xel en la imagen
Imagick string to String	devuelve el contenido del string en caso de éxito o un string vacío en caso de fallo
Imagick string to String	devuelve la imagen como un string
Imagick transform Image Colorspace $colorspace	el espacio de color al que debería convertirse la imagen una de las constantes colorspace p
Imagick bool transform Image Colorspace	devuelve true en caso de éxito o false en caso de error
Imagick bool transform Image Colorspace int $colorspace	transforma una imagen a un nuevo espacio de color
Imagick bool transpose Image	devuelve true en caso de éxito
Imagick bool transpose Image	crea una imagen espejo vertical
Imagick bool transverse Image	devuelve true en caso de éxito
Imagick bool transverse Image	crea una imagen espejo horizontal
Imagick trim Image $fuzz	por defecto el objetivo debe coincidir exactamente con un color de píxel en particular
Imagick bool trim Image	devuelve true en caso de éxito
Imagick bool trim Image float $fuzz	elimina los extremos de la imagen
Imagick bool unique Image Colors	devuelve true en caso de éxito
Imagick bool unique Image Colors	desecha todos los colores de los p&iacute;xeles excepto uno
Imagick bool unsharp Mask Image	devuelve true en caso de éxito
Imagick bool unsharp Mask Image float $radius float $sigma float $amount float $threshold int $channel	afila una imagen
Imagick bool valid	devuelve true en caso de éxito
Imagick bool valid	comprueba si el elemento actual es v&aacute;lido
Imagick vignette Image $whitePoint	el punto blanco
Imagick vignette Image $y	índice y de la elipse
Imagick vignette Image $blackPoint	el punto negro
Imagick vignette Image $x	índice x de la elipse
Imagick bool vignette Image	devuelve true en caso de éxito
Imagick bool vignette Image float $blackPoint float $whitePoint int $x int $y	a&ntilde;ade un filtro de vi&ntilde;eta a la imagen
Imagick wave Image $amplitude	la amplitud de la onda
Imagick wave Image $length	la longitud de la onda
Imagick bool wave Image	devuelve true en caso de éxito
Imagick bool wave Image float $amplitude float $length	aplica un filtro de onda a la imagen
Imagick bool white Threshold Image	devuelve true en caso de éxito
Imagick bool white Threshold Image mixed $threshold	fuerza a todos los p&iacute;xeles por encima del umbral a ser blancos
Imagick write Image $filename	nombre del fichero donde escribir la imagen
Imagick bool write Image	devuelve true en caso de éxito
Imagick bool write Image string $filename	escribe una imagen al nombre de fichero especificado
Imagick write Images File $filehandle	el gestor de archivo donde se van a escribir las imágenes
Imagick bool write Images File	devuelve true en caso de éxito
Imagick bool write Images File resource $filehandle	escribe fotogramas al gestor de archivo
ImagickDraw int get Font Stretch	description
ImagickDraw float get Text Interword Spacing	description
ImagickDraw float get Text Kerning	description
ImagickDraw path Curve To Quadratic Bezier Smooth Absolute $y	coordenada y final
ImagickDraw path Curve To Quadratic Bezier Smooth Absolute $x	coordenada x final
ImagickDraw bool path Curve To Quadratic Bezier Smooth Absolute float $x float $y	dibuja una curva b&eacute;zier cuadr&aacute;tica
ImagickDraw void set Resolution string $x_resolution string $y_resolution	description
ImagickDraw void set Text Interline Spacing float $spacing	description
ImagickDraw void set Text Interword Spacing float $spacing	description
ImagickDraw void set Text Kerning float $kerning	description
ImagickKernel void add Kernel ImagickKernel $ImagickKernel	description
ImagickKernel void add Unity Kernel	description
ImagickKernel from Builtin $kernelString	una cadena que describe los parámetros p
ImagickKernel from Builtin $kerneltype	el tipo de núcleo a construir p
ImagickKernel ImagickKernel from Builtin string $kernelType string $kernelString	description
ImagickKernel void scale	description
ImagickKernel array separate	description
ImagickPixel get Color $normalized	normalizar los valores del color
ImagickPixel array get Color	un array de valores de canal normalizados si se da true como parámetro
ImagickPixel array get Color bool $normalized	devuelve el color
ImagickPixel string get Color As String	devuelve el color del objeto imagickpixel como string
ImagickPixel string get Color As String	devuelve el color como string
ImagickPixel mixed get Color Quantum	el valor quantum del elemento de color
ImagickPixel mixed get Color Quantum	description
ImagickPixel get Color Value $color	el color del que obtener el valor especificado como una de las constantes de color de imagick
ImagickPixel float get Color Value	el valor del canal como un número de punto flotante normalizado lanzando una imagickpixelexception si se produce un error
ImagickPixel float get Color Value int $color	obtiene el valor normalizado del canal de color proporcionado
ImagickPixel mixed get Color Value Quantum	el valor quantum del elemento de color
ImagickPixel mixed get Color Value Quantum	description
ImagickPixel array get HSL	devuelve el valor de hsl en un array con las claves hue saturation y luminosity
ImagickPixel array get HSL	devuelve el color hsl normalizado del objeto imagickpixel
ImagickPixel int get Index	description
ImagickPixel bool is Pixel Similar Quantum string $color string $fuzz	description
ImagickPixel void setcolorcount string $colorCount	description
ImagickPixel set Color Value $value	el valor a establecer para este canal desde 0 a 1
ImagickPixel set Color Value $color	una de las constantes de color de imagick p
ImagickPixel bool set Color Value	devuelve true en caso de éxito
ImagickPixel bool set Color Value int $color float $value	establece el valor normalizado de uno de los canales
ImagickPixel set Color Value Quantum $value	el valor quantum a establecer para el elemento de color
ImagickPixel set Color Value Quantum $color	el color a establecer p
ImagickPixel void set Color Value Quantum int $color mixed $value	description
ImagickPixel set HSL $hue	el valor normalizado del tono descrito como un arco fraccionario entre 0 y 1 del círculo tonal donde el valor cero es rojo
ImagickPixel set HSL $saturation	el valor normalizado de la saturación con 1 como saturación completa
ImagickPixel set HSL $luminosity	el valor normalizado de la luminosidad en una escala desde negro con 0 a blanco con 1 con el valor completo de hs en 0
ImagickPixel bool set HSL	devuelve true en caso de éxito
ImagickPixel bool set HSL float $hue float $saturation float $luminosity	establece el color hsl normalizado
ImagickPixel void set Index int $index	description
InfiniteIterator construct $iterator	el iterador a iterar infinitamente
InfiniteIterator Iterator construct Iterator $iterator	construye un infiniteiterator
InfiniteIterator void next	mueve el iterador interno hac&iacute;a adelante o se rebobina
IntlCalendar - construct	constructor privado para no permitir la creaci&oacute;n de instancias
IntlChar char Age $codepoint	el valor de tipo integer del punto de código p
IntlChar array char Age	el número de versión de unicode como array
IntlChar array char Age mixed $codepoint	obtener la &laquo;edad; del punto de c&oacute;digo
IntlChar char Direction $codepoint	el valor de tipo integer del punto de código p
IntlChar int char Direction	el valor de la categoría bidireccional; una de las siguietnes constantes: intlchar::char_direction_left_to_right intlchar::char_direction_right_to_left intlchar::char_direction_european_number intlchar::char_direction_european_number_separator intlchar::char_direction_european_number_terminator intlchar::char_direction_arabic_number intlchar::char_direction_common_number_separator intlchar::char_direction_block_separator intlchar::char_direction_segment_separator intlchar::char_direction_white_space_neutral intlchar::char_direction_other_neutral intlchar::char_direction_left_to_right_embedding intlchar::char_direction_left_to_right_override intlchar::char_direction_right_to_left_arabic intlchar::char_direction_right_to_left_embedding intlchar::char_direction_right_to_left_override intlchar::char_direction_pop_directional_format intlchar::char_direction_dir_non_spacing_mark intlchar::char_direction_boundary_neutral intlchar::char_direction_first_strong_isolate intlchar::char_direction_left_to_right_isolate intlchar::char_direction_right_to_left_isolate intlchar::char_direction_pop_directional_isolate intlchar::char_direction_char_direction_count
IntlChar int char Direction mixed $codepoint	obtener el valor de la categor&iacute;a bidireccional de un punto de c&oacute;digo
IntlChar char From Name $nameChoice	el conjunto de nombres a utilizar para la consulta
IntlChar char From Name $characterName	el nombre completo del carácter unicode
IntlChar int char From Name	el valor unicode del punto de código con el nombre dado como integer o false si no existe tal punto de código
IntlChar int char From Name string $characterName int $nameChoice	buscar un car&aacute;cter unicode por su nombre y devolver su valor de punto de c&oacute;digo
IntlChar char Mirror $codepoint	el valor de tipo integer del punto de código p
IntlChar mixed char Mirror	devuelve otro punto de código unicode que podría servir como sustituto de imagen reflejada o el mismo codepoint si no hay correspondencia o si codepoint no posee la propiedad bidi_mirrored
IntlChar mixed char Mirror mixed $codepoint	obtener el car&aacute;cter de &laquo;imagen reflejada; de un punto de c&oacute;digo
IntlChar char Name $nameChoice	el conjunto de nombres a utilizar para la consulta
IntlChar char Name $codepoint	el valor de tipo integer del punto de código p
IntlChar string char Name	el nombre correspondiente o una cadena vacía si no existe un nombre para este carácter
IntlChar string char Name mixed $codepoint int $nameChoice	obtener el nombre de un car&aacute;cter unicode
IntlChar char Type $codepoint	el valor de tipo integer del punto de código p
IntlChar int char Type	devuelve el tipo de la categoría general que puede ser una de las siguientes constantes: intlchar::char_category_unassigned intlchar::char_category_general_other_types intlchar::char_category_uppercase_letter intlchar::char_category_lowercase_letter intlchar::char_category_titlecase_letter intlchar::char_category_modifier_letter intlchar::char_category_other_letter intlchar::char_category_non_spacing_mark intlchar::char_category_enclosing_mark intlchar::char_category_combining_spacing_mark intlchar::char_category_decimal_digit_number intlchar::char_category_letter_number intlchar::char_category_other_number intlchar::char_category_space_separator intlchar::char_category_line_separator intlchar::char_category_paragraph_separator intlchar::char_category_control_char intlchar::char_category_format_char intlchar::char_category_private_use_char intlchar::char_category_surrogate intlchar::char_category_dash_punctuation intlchar::char_category_start_punctuation intlchar::char_category_end_punctuation intlchar::char_category_connector_punctuation intlchar::char_category_other_punctuation intlchar::char_category_math_symbol intlchar::char_category_currency_symbol intlchar::char_category_modifier_symbol intlchar::char_category_other_symbol intlchar::char_category_initial_punctuation intlchar::char_category_final_punctuation intlchar::char_category_char_category_count
IntlChar int char Type mixed $codepoint	obtener el valor de la categor&iacute;a general de un punto de c&oacute;digo
IntlChar chr $codepoint	el valor de tipo integer del punto de código p
IntlChar string chr	una cadena que contiene el carácter especificado por el valor del punto de código de unicode
IntlChar string chr mixed $codepoint	devolver el car&aacute;cter unicode mediante su valor de punto de c&oacute;digo
IntlChar enum Char Names $start	el primer punto de código en el rango de la enumeración
IntlChar enum Char Names $nameChoice	el selector por cuyo tipo de nombres se va a enumerar
IntlChar enum Char Names $limit	uno más del último punto de código en el rango de la enumeración el primero después del rango
IntlChar enum Char Names $callback	la función a invorcar para cada nombre de carácter
IntlChar void enum Char Names mixed $start mixed $limit callable $callback int $nameChoice	enumerar todos los caracteres de unicode con asignaci&oacute;n dentro de un rango
IntlChar enum Char Types $callback	la función a invocar para cada rango contiguo de puntos de código con la misma categoría general
IntlChar void enum Char Types callable $callback	enumerar todos los puntos de c&oacute;digo con sus categor&iacute;as generales de unicode
IntlChar fold Case $codepoint	el valor de tipo integer del punto de código p
IntlChar fold Case $options	intlchar::fold_case_default predeterminada o intlchar::fold_case_exclude_special_i
IntlChar mixed fold Case	devuelve el simple_case_folding del punto de código si lo hay; de lo contrario devuelve el punto de código en sí
IntlChar mixed fold Case mixed $codepoint int $options	realiza un &laquo;plegamiento; de un punto de c&oacute;digo
IntlChar for Digit $radix	la base valor predeterminado: 10
IntlChar for Digit $digit	el número a convertir en un carácter
IntlChar int for Digit	la representación de un carácter como string del dígito especificado en la base especificada
IntlChar int for Digit int $digit int $radix	obtener la representaci&oacute;n de un car&aacute;cter para un d&iacute;gito y base dados
IntlChar get Block Code $codepoint	el valor de tipo integer del punto de código p
IntlChar int get Block Code	devuelve el valor del bloque para codepoint
IntlChar int get Block Code mixed $codepoint	obtener el bloque de asignaci&oacute;n de unicode que contiene a un punto de c&oacute;digo
IntlChar get Int Property Value $property	la propiedad de unicode a consultar véanse las constantes intlchar::property_*
IntlChar get Int Property Value $codepoint	el valor de tipo integer del punto de código p
IntlChar int get Int Property Value	devuelve el valor numérico que es directamente el valor de la propiedad o para propiedades enumeradas que corresponde al valor numérico de la constante enumerada del tipo de enumeración respectivo del valor de la propiedad
IntlChar int get Int Property Value mixed $codepoint int $property	obtener el valor de una propiedad de unicode para un punto de c&oacute;digo
IntlChar get Property Name $property	la propiedad de unicode a consultar véanse las constantes intlchar::property_*
IntlChar get Property Name $nameChoice	el selector a obtener por su nombre
IntlChar string get Property Name	devuelve el nombre o false si property o namechoice están fuera de rango
IntlChar string get Property Name int $property int $nameChoice	obtener el nombre unicode de una propiedad
IntlChar get Property Value Enum $property	la propiedad de unicode a consultar véanse las constantes intlchar::property_*
IntlChar get Property Value Enum $name	el nombre del valor a comparar
IntlChar int get Property Value Enum	devuelve el entero del valor correspondiente o intlchar::property_invalid_code si el nombre dado no coincide con ningún valor de la propiedad dada o si la propiedad es inválida
IntlChar int get Property Value Enum int $property string $name	obtener el valor de una propiedad para un nombre de valor dado
IntlChar array get Unicode Version	un array que contiene el número de versión de unicode
IntlChar array get Unicode Version	obtener la versi&oacute;n de unicode
IntlChar has Binary Property $property	la propiedad de unicode a consultar véanse las constantes intlchar::property_*
IntlChar has Binary Property $codepoint	el valor de tipo integer del punto de código p
IntlChar bool has Binary Property	devuelve true o false según el valor de la propiedad binaria de unicode para codepoint
IntlChar bool has Binary Property mixed $codepoint int $property	comprobar una propiedad de unicode binaria para un punto de c&oacute;digo
IntlChar isalnum $codepoint	el valor de tipo integer del punto de código p
IntlChar bool isalnum	devuelve true si codepoint es un caracter alfanumérico false si no
IntlChar bool isalnum mixed $codepoint	comporbar si un punto de c&oacute;digo es un car&aacute;cter alfanum&eacute;rico
IntlChar isbase $codepoint	el valor de tipo integer del punto de código p
IntlChar bool isbase	devuelve true si codepoint es un caracter base false si no
IntlChar bool isbase mixed $codepoint	comprobar si un punto de c&oacute;digo es un car&aacute;cter base
IntlChar isblank $codepoint	el valor de tipo integer del punto de código p
IntlChar bool isblank	devuelve true si codepoint es un carácter «en blanco» o de «espacio horizontal» false si no
IntlChar bool isblank mixed $codepoint	comprobar si un punto de c&oacute;digo es un car&aacute;cter &laquo;en blanco; o de &laquo;espacio horizontal;
IntlChar iscntrl $codepoint	el valor de tipo integer del punto de código p
IntlChar bool iscntrl	devuelve true si codepoint es un carácter de control false si no
IntlChar bool iscntrl mixed $codepoint	comprobar si un punto de c&oacute;digo es un car&aacute;cter de control
IntlChar isdigit $codepoint	el valor de tipo integer del punto de código p
IntlChar bool isdigit	devuelve true si codepoint es un carácter de dígito false si no
IntlChar bool isdigit mixed $codepoint	comprobar si un punto de c&oacute;digo es un car&aacute;cter de d&iacute;gito
IntlChar isgraph $codepoint	el valor de tipo integer del punto de código p
IntlChar bool isgraph	devuelve true si codepoint es un caráter «gráfico» false si no
IntlChar bool isgraph mixed $codepoint	comprobar si un punto de c&oacute;digo es un car&aacute;ter gr&aacute;fico
IntlChar is IDIgnorable $codepoint	el valor de tipo integer del punto de código p
IntlChar bool is IDIgnorable	devuelve true si codepoint es ignorable en identificadores false si no
IntlChar bool is IDIgnorable mixed $codepoint	comprobar si un punto de c&oacute;digo es un car&aacute;cter ignorable
IntlChar is IDPart $codepoint	el valor de tipo integer del punto de código p
IntlChar bool is IDPart	devuelve true si codepoint podría darse en un identificador false si no
IntlChar bool is IDPart mixed $codepoint	comprobar si un punto de c&oacute;digo es permisible en un identificador
IntlChar is ISOControl $codepoint	el valor de tipo integer del punto de código p
IntlChar bool is ISOControl	devueve true si codepoint es un código de control de iso false si no
IntlChar bool is ISOControl mixed $codepoint	comprobar si un punto de c&oacute;digo es un c&oacute;digo de control de iso
IntlChar is Java Space Char $codepoint	el valor de tipo integer del punto de código p
IntlChar bool is Java Space Char	devuelve true si codepoint es un carácter de espacio según java false si no
IntlChar bool is Java Space Char mixed $codepoint	comprobar si un punto de c&oacute;digo es un car&aacute;cter de espacio seg&uacute;n java
IntlChar islower $codepoint	el valor de tipo integer del punto de código p
IntlChar bool islower	devuelve true si codepoint es una letra minúscula de ll false si no
IntlChar bool islower mixed $codepoint	comprobar si un punto de c&oacute;digo es una letra min&uacute;scula
IntlChar is Mirrored $codepoint	el valor de tipo integer del punto de código p
IntlChar bool is Mirrored	devuelve true si codepoint posee la propiedad bidi_mirrored false si no
IntlChar bool is Mirrored mixed $codepoint	comprobar si un punto de c&oacute;digo posee la propiedad bidi_mirrored
IntlChar isprint $codepoint	el valor de tipo integer del punto de código p
IntlChar bool isprint	devuelve true si codepoint es un carácter imprimible false si no
IntlChar bool isprint mixed $codepoint	comprobar si un punto de c&oacute;digo es un car&aacute;cter imprimible
IntlChar ispunct $codepoint	el valor de tipo integer del punto de código p
IntlChar bool ispunct	devuelve true si codepoint es un carácter de puntuación false si no
IntlChar bool ispunct mixed $codepoint	comprobar si un punto de c&oacute;digo es un car&aacute;cter de puntuaci&oacute;n
IntlChar istitle $codepoint	el valor de tipo integer del punto de código p
IntlChar bool istitle	devuelve true si codepoint es una letra titular false si no
IntlChar bool istitle mixed $codepoint	comprobar si un punto de c&oacute;digo es una letra titular
IntlChar is UAlphabetic $codepoint	el valor de tipo integer del punto de código p
IntlChar bool is UAlphabetic	devuelve true si codepoint tiene la propiedad de unicode alphabetic false si no
IntlChar bool is UAlphabetic mixed $codepoint	comprobar si un punto de c&oacute;digo tiene la propiedad de unicode alphabetic
IntlChar is UUppercase $codepoint	el valor de tipo integer del punto de código p
IntlChar bool is UUppercase	devuelve true si codepoint tiene la propiedad de unicode uppercase false si no
IntlChar bool is UUppercase mixed $codepoint	comprobar si un punto de c&oacute;digo tiene la propiedad de unicode uppercase
IntlChar isxdigit $codepoint	el valor de tipo integer del punto de código p
IntlChar bool isxdigit	devuelve true si codepoint es un carácter hexadecimal false si no
IntlChar bool isxdigit mixed $codepoint	comprobar si el punto de c&oacute;digo es un d&iacute;gito hexadecimal
IntlChar ord $character	un carácter unicode
IntlChar int ord	devuelve el valor del punto de código de unicode como integer
IntlChar int ord mixed $character	devolver el valor del punto de c&oacute;digo de unicode de un car&aacute;cter
IntlChar tolower $codepoint	el valor de tipo integer del punto de código p
IntlChar mixed tolower	devuelve el simple_lowercase_mapping del punto de código si lo hubiera; de lo contrario devuelve el punto de código en sí
IntlChar mixed tolower mixed $codepoint	convertir a min&uacute;sculas un car&aacute;cter unicode
IntlChar totitle $codepoint	el valor de tipo integer del punto de código p
IntlChar mixed totitle	devuelve el simple_titlecase_mapping del punto de código si lo hubiera; de lo contrario devuelve el punto de código en sí
IntlChar mixed totitle mixed $codepoint	convertir un car&aacute;cter unicode a letra titular
IntlChar toupper $codepoint	el valor de tipo integer del punto de código p
IntlChar mixed toupper	devuelve el simple_uppercase_mapping del punto de código si lo hubiera; de lo contrario devuelve el punto de código en sí
IntlChar mixed toupper mixed $codepoint	convertir a may&uacute;sculas un car&aacute;cter unicode
Iterator mixed current	puede devolver cualquier tipo
Iterator mixed current	devuelve el elemento actual
Iterator void next	avanza al siguiente elemento
Iterator void rewind	rebobine la iterator al primer elemento
Iterator boolean valid	el valor de retorno se debe fundir a boolean y luego evaluar
Iterator boolean valid	comprueba si la posici&oacute;n actual es v&aacute;lido
IteratorIterator construct $iterator	el iterador recorrible
IteratorIterator Traversable construct Traversable $iterator	crear un iterador de cualquier cosa que se pueda recorrer
IteratorIterator mixed current	el valor del elemento actual
IteratorIterator mixed current	obtener el valor actual
IteratorIterator Traversable get Inner Iterator	el iterador interno tal y como se pasó a iteratoriterator::__construct()
IteratorIterator Traversable get Inner Iterator	obtener el iterador interno
IteratorIterator void next	avanzar al siguiente elemento
Judy by Count $nth_index	el enésimo indice a ser vuelto
Judy int by Count	devuelve el índice en la posición enésima dada
Judy int by Count int $nth_index	localiza el en&eacute;simo indice presente en el array judy
Judy count $index_end	dejar de contar al llegar a este índice
Judy count $index_start	empieza a contar desde el índice especificado
Judy int count	devuelve el número de elementos
Judy int count int $index_start int $index_end	cuenta el n&uacute;mero de elementos en el array judy
Judy void destruct	destruye un objeto judy
Judy first $index	el índice puede ser un integer o un string the index can be an integer or a string correspondiente al índice de dónde empieza la búsqueda
Judy mixed first	devuelve el índice correspondiente en el array
Judy mixed first mixed $index	busca el primer &iacute;ndice del array judy
Judy first Empty $index	el índice puede ser un integer o un string correspondiente al índice dónde empieza la búsqueda
Judy int first Empty	devuelve el índice correspondiente en el array
Judy int first Empty mixed $index	b&uacute;squeda de la primera ausencia de &iacute;ndice en el array judy
Judy int free	libera todo el array judy
Judy int get Type	devuelve un integer que corresponde al tipo judy
Judy int get Type	devuelve el tipo del array actual judy
Judy last $index	el índice puede ser un integer o un string que corresponde al índice donde empieza la búsqueda
Judy void last string $index	busca el &uacute;ltimo &iacute;ndice en el array judy
Judy last Empty $index	el índice puede ser un entero o un string correspondiente al índice donde empezar a buscar
Judy int last Empty	devuelve el correspondiente índice del array
Judy int last Empty int $index	busca el &uacute;ltimo &iacute;ndice ausente del array judy
Judy int memory Usage	retorna la memoria usada en bytes
Judy int memory Usage	devuelve la memoria usada por el array judy
Judy next Empty $index	el índice puede ser un integer o un string correspondiente al índice donde comenzar la búsqueda
Judy int next Empty	devuelve el correspondiente índice del array
Judy int next Empty int $index	busca el sigueinte &iacute;ndice ausente del array judy
Judy offset Exists $offset	el índice a ser comprobado
Judy bool offset Exists	devuelve true si tiene éxito o false si falla
Judy bool offset Exists mixed $offset	comprueba si existe un &iacute;ndice
Judy prev $index	el índice puede ser un integer o un string que corresponde al indicé donde empieza la búsqueda
Judy mixed prev	devielve el índice correspondiente en el array
Judy mixed prev mixed $index	busca el &iacute;ndice anterior en el array judy
Judy prev Empty $index	el índice puede ser un integer o un string correspondiente al índice donde empezar la búsqueda
Judy int prev Empty	devuelve el correspondiente índice del array
Judy int prev Empty mixed $index	busca el &iacute;ndice ausente anterior en el array judy
Judy void size	devuelve el tama&ntilde;o actual del array judy
Lapack eigen Values $right	parámetro opcional
Lapack eigen Values $a	la matriz a la que calcular los valores propios
Lapack eigen Values $left	parámetro opcional
Lapack array eigen Values	devuelve un array de arrays que representa los valores propios del array
Lapack array eigen Values array $a array $left array $right	esta funci&oacute;n devuelve los valores propios de una matriz cuadrada dada
Lapack identity $n	el alto y ancho de la matriz identidad
Lapack array identity	devolverá un array de n arrays cada uno conteniendo n entradas
Lapack array identity int $n	devuelve una matriz identidad
Lapack least Squares By SVD $a	matriz a
Lapack least Squares By SVD $b	matriz b
Lapack array least Squares By SVD	devuelve la solución como un array de arrays
Lapack array least Squares By SVD array $a array $b	resuelve un problema de m&iacute;nimos cuadrados lineal usando la descomposici&oacute;n en valores singulares
LimitIterator construct $count	cuenta opcional de el límite
LimitIterator construct $offset	índice opcional de el límite
LimitIterator construct $iterator	el iterator a limitar
LimitIterator Iterator construct	el nuevo limititerator
LimitIterator Iterator construct Iterator $iterator int $offset int $count	construye un limititerator
LimitIterator mixed current	devuelve el elemento actual o null si no hay ninguno
LimitIterator mixed current	obtiene el elemento actual
LimitIterator Iterator get Inner Iterator	el iterador interno pasado a limititerator::__construct()
LimitIterator Iterator get Inner Iterator	obtiene el iterador interno
LimitIterator mixed key	devuelve la clave de el elemento actual
LimitIterator mixed key	obtiene la clave actual
LimitIterator void rewind	rebobina el iterador a un punto espec&iacute;ficado
LimitIterator bool valid	devuelve true en caso de éxito o false en caso de error
LimitIterator bool valid	comprobar si el elemento actual es v&aacute;lido
Lua register Callback $function	una función de llamada de retorno válida php
Lua mixed register Callback	devuelve $this null en caso que los argumentos sean erróneos o false para cualquier otro tipo de error
Lua mixed register Callback string $name callable $function	registra una funci&oacute;n php en lua
Memcache add $expire	tiempo de expiración del valor
Memcache add $flag	use memcache_compressed para guardar datos comprimidos usa zlib
Memcache add $var	la variable a guardar
Memcache add $key	la clave que quedará asociada con el valor
Memcache bool add	devuelve true en caso de éxito o false en caso de error
Memcache bool add string $key mixed $var int $flag int $expire	a&ntilde;adir un valor en el servidor
Memcache bool close	devuelve true en caso de éxito o false en caso de error
Memcache bool close	cierra la conexi&oacute;n al servidor memcached
Memcache connect $host	el host donde el memcached está esperando conexiones
Memcache connect $port	el puerto donde memcached está esperando conexiones
Memcache connect $timeout	valor en segundos que se utilizarán para conectarse al demonio
Memcache bool connect	devuelve true en caso de éxito o false en caso de error
Memcache bool connect string $host int $port int $timeout	abre una conexi&oacute;n al servidor memcached
Memcache delete $timeout	este parámetro ya no está soportado y su valor por omisión es 0 segundos
Memcache delete $key	la clave asociada con el valor a eliminar
Memcache bool delete	devuelve true en caso de éxito o false en caso de error
Memcache bool delete string $key int $timeout	elimina un valor del servidor
Memcache bool flush	devuelve true en caso de éxito o false en caso de error
Memcache bool flush	limpia todos los valores existentes en el servidor
Memcache get $flags	si está presente las flags capturadas juntamente con los valores serán escritas en este parámetro
Memcache get $key	la llave o array de llaves a capturar
Memcache string get	devuelve la cadena asociada con la clave dada por key o un array de pares clave-valor cuando key es un array
Memcache string get string $key int $flags	obtener valor del servidor
Memcache get Extended Stats $slabid	usado en conjunto con cachedump en el type para identificar el slap desde donde volcar
Memcache get Extended Stats $limit	usado en conjunto con cachedump en el type para limitar el número de entradas a volcar
Memcache get Extended Stats $type	tipo de estadísticas a capturar
Memcache array get Extended Stats	devuelve un array asociativo de dos dimensiones con las estadísticas o false en caso de error
Memcache array get Extended Stats string $type int $slabid int $limit	obtener estad&iacute;sticas de todos los servidores en el grupo
Memcache get Stats $slabid	usado en conjunto con cachedump en el type para identificar el slap desde donde volcar
Memcache get Stats $limit	usado en conjunto con cachedump en el type para limitar el número de entradas a volcar
Memcache get Stats $type	tipo de estadísticas a capturar
Memcache array get Stats	devuelve un array asociativo con las estadísticas del servidor o false en caso de error
Memcache array get Stats string $type int $slabid int $limit	obtiene estad&iacute;sticas del servidor
Memcache string get Version	devuelve una cadena con el número de la versión del servidor o false en caso de error
Memcache string get Version	devuelve la versi&oacute;n del servidor
Memcache pconnect $port	apunta al puerto donde memcache está esperando conexiones
Memcache pconnect $timeout	valor en segundos que serán usandos para conectar al demonio
Memcache pconnect $host	apunta al host donde memcache está esperando conexiones
Memcache mixed pconnect	devuelve true en caso de éxito o false en caso de error
Memcache mixed pconnect string $host int $port int $timeout	abre una conexi&oacute;n persistente a memcached
Memcache set Compress Threshold $threshold	controla la longitud valor mínimo antes de intentar comprimir automáticamente
Memcache set Compress Threshold $min_saving	especifica la cantidad mínima del ratio de compresión para guardar el valor
Memcache bool set Compress Threshold	devuelve true en caso de éxito o false en caso de error
Memcache bool set Compress Threshold int $threshold float $min_savings	activa compresi&oacute;n autom&aacute;tica de valores con datos largos
Memcache set Server Params $port	apunta al puerto donde memcached está esperando conexiones
Memcache set Server Params $failure_callback	permite al usuario a especificar la llamada a una función de retorno a ejectuar cuando se encuentre un error
Memcache set Server Params $host	apunta al host donde memcached está esperando conexiones
Memcache set Server Params $status	controla si el servidor debe ser marcado como online
Memcache set Server Params $timeout	valor en segundos que se utilizarán para conectarse al demonio
Memcache set Server Params $retry_interval	controla la frecuencia de reintentos cuando falla la conexión el valor por defecto es 15 segundos
Memcache bool set Server Params	devuelve true en caso de éxito o false en caso de error
Memcache bool set Server Params string $host int $port int $timeout int $retry_interval bool $status callable $failure_callback	cambia par&aacute;metros del servidor y estado en tiempo de ejecucci&oacute;n
Memcached add $expiration	tiempo de expiración que por defecto es 0
Memcached add $value	el valor a guardar
Memcached add $key	la clave en la que se guardará el valor
Memcached bool add	devuelve true en caso de éxito o false en caso de error
Memcached bool add string $key mixed $value int $expiration	a&ntilde;ade un &iacute;tem asociado a una nueva clave
Memcached add Servers $array	array de servidores a añadir a la agrupación de servidores
Memcached bool add Servers	devuelve true en caso de éxito o false en caso de error
Memcached bool add Servers array $servers	a&ntilde;adir varios servidores a la agrupaci&oacute;n de servidores
Memcached cas By Key $expiration	tiempo de expiración que por defecto es 0
Memcached cas By Key $key	la clave en la que se guardará el valor
Memcached cas By Key $cas_token	valor único asociado con el ítem existente
Memcached cas By Key $value	el valor a guardar
Memcached cas By Key $server_key	la clave que identifica al servidor donde guardar o recuperar el valor
Memcached bool cas By Key	devuelve true en caso de éxito o false en caso de error
Memcached bool cas By Key float $cas_token string $server_key string $key mixed $value int $expiration	comparar e intercambiar un &iacute;tem en un servidor espec&iacute;fico
Memcached decrement By Key $initial_value	el valor para establecer el ítem si actualmente no existe
Memcached decrement By Key $key	la clave del ítem a decrementar
Memcached decrement By Key $expiry	el periodo de expiración a establecer para el ítem
Memcached decrement By Key $offset	la cantidad por la que decrementar el valor del ítem
Memcached decrement By Key $server_key	la clave que identifica al servidor donde guardar o recuperar el valor
Memcached int decrement By Key	devuelve el nuevo valor del ítem en caso de éxito o false en caso de error
Memcached int decrement By Key string $server_key string $key int $offset int $initial_value int $expiry	decrementar un valor num&eacute;rico de un &iacute;tem almacenado en un servidor espec&iacute;fico
Memcached delete $time	la cantidad de tiempo que el servidor esperará para borrar el ítem
Memcached delete $key	la clave a eliminar
Memcached bool delete	devuelve true en caso de éxito o false en caso de error
Memcached bool delete string $key int $time	eliminar un &iacute;tem
Memcached delete Multi By Key $time	la cantidad de tiempo que esperará el servidor para eliminar los ítems
Memcached delete Multi By Key $keys	las claves a eliminar
Memcached delete Multi By Key $server_key	la clave que identifica al servidor donde guardar o recuperar el valor
Memcached bool delete Multi By Key	devuelve true en caso de éxito o false en caso de error
Memcached bool delete Multi By Key string $server_key array $keys int $time	eliminar varios &iacute;tems de un servidor espec&iacute;fico
Memcached array fetch	devuelve el siguiente resultado o false en caso contrario
Memcached array fetch	obtener el siguiente resultado
Memcached array fetch All	devuelve los resultados o false en caso de error
Memcached array fetch All	obtener todos los resultados restantes
Memcached get $key	la clave del ítem a obtener
Memcached get $cas_token	la variable donde guardar el token cas
Memcached get $cache_cb	la retrollamada de caché de lectura previa o null
Memcached mixed get	devuelve el valor almacenado en caché o false en caso contrario
Memcached mixed get string $key callable $cache_cb float $cas_token	obtener un &iacute;tem
Memcached get By Key $key	la clave del ítem a obtener
Memcached get By Key $cas_token	la variable donde guardar el token cas
Memcached get By Key $cache_cb	la retrollamada de caché de lectura previa o null
Memcached get By Key $server_key	la clave que identifica al servidor donde guardar o recuperar el valor
Memcached mixed get By Key	devuelve el valor guardado en caché o false en caso contrario
Memcached mixed get By Key string $server_key string $key callable $cache_cb float $cas_token	obtiene un &iacute;tem de un servidor espec&iacute;fico
Memcached get Delayed By Key $value_cb	la retrollamada de resultados o null
Memcached get Delayed By Key $keys	array de claves a solicitar
Memcached get Delayed By Key $with_cas	si solicitar también los valores del token cas
Memcached get Delayed By Key $server_key	la clave que identifica al servidor donde guardar o recuperar el valor
Memcached bool get Delayed By Key	devuelve true en caso de éxito o false en caso de error
Memcached bool get Delayed By Key string $server_key array $keys bool $with_cas callable $value_cb	solicitar varios &iacute;tems de un servidor espec&iacute;fico
Memcached get Multi $keys	array de claves a obtener
Memcached get Multi $flags	los indicadores para la operación de obtención get
Memcached get Multi $cas_tokens	la variable donde guardar los token cas de los ítems encontrados
Memcached mixed get Multi	devuelve el array de ítems encontrados o false en caso de error
Memcached mixed get Multi array $keys array $cas_tokens int $flags	obtener varios &iacute;tems
Memcached get Multi By Key $keys	array de claves a obtener
Memcached get Multi By Key $flags	los indicadores para la operación de obtención get
Memcached get Multi By Key $cas_tokens	la variables donde almacenar los token cas de los ítems encontrados
Memcached get Multi By Key $server_key	la clave que identifica al servidor donde guardar o recuperar el valor
Memcached array get Multi By Key	devuelve el array de ítems encontrados o false en caso de error
Memcached array get Multi By Key string $server_key array $keys string $cas_tokens int $flags	recuperar varios &iacute;tems de un servidor espec&iacute;fico
Memcached get Option $option	una de las constantes memcached::opt_*
Memcached mixed get Option	devuelve el valor de la opción solicitada o false en caso de error
Memcached mixed get Option int $option	obtener el valor de una opci&oacute;n de memcached
Memcached int get Result Code	el código resultante de la última operación de memcached
Memcached int get Result Code	devuelve el c&oacute;digo resultante de la &uacute;ltima operaci&oacute;n
Memcached string get Result Message	un mensaje que describe el resultado de la última operación memcached
Memcached string get Result Message	devolver un mensaje que describe el resultado de la &uacute;ltima operaci&oacute;n
Memcached get Server By Key $server_key	la clave que identifica al servidor donde guardar o recuperar el valor
Memcached array get Server By Key	devuelve un array que contiene tres claves: host port y weight en caso de éxito o false en case de error
Memcached array get Server By Key string $server_key	hacer corresponder una clave con un servidor
Memcached array get Server List	la lista de todos los servidores de la agrupación de servidores
Memcached array get Server List	obtener la lista de servidores de la agrupaci&oacute;n
Memcached array get Stats	array de estadísticas de servidores una entrada por servidor
Memcached array get Stats	obtener las estad&iacute;sticas de la agrupaci&oacute;n de servidores
Memcached array get Version	array de las versiones de los servidores una entrada por servidor
Memcached array get Version	obtener la informaci&oacute;n de la versi&oacute;n de la agrupaci&oacute;n de servidores
Memcached increment $offset	la cantidad por la que incrementar el valor del ítem
Memcached increment $initial_value	el valor para establecer el ítem si actualmente no existe
Memcached increment $key	la clave del ítem a incrementar
Memcached increment $expiry	el periodo de expiración a establecer para el ítem
Memcached int increment	devuelve el nuevo valor del ítem en caso de éxito o false en caso de error
Memcached int increment string $key int $offset int $initial_value int $expiry	incrementar un valor num&eacute;rico de un &iacute;tem
Memcached bool is Persistent	devuelve true si la instancia de memcache usa una conexión persistente de lo contrario devuelve false
Memcached bool is Persistent	comprueba si se est&aacute; utilizando una conexi&oacute;n persistente a memcache
Memcached bool is Pristine	devuelve true si la instancia se creó recientemente de lo contrario devuelve false
Memcached bool is Pristine	comprobar si la instancia se cre&oacute; recientemente
Memcached prepend $value	el string a anteponer
Memcached prepend $key	la clave del ítem en el que anteponer datos
Memcached bool prepend	devuelve true en caso de éxito o false en caso de error
Memcached bool prepend string $key string $value	anteponer datos a un &iacute;tem existente
Memcached prepend By Key $value	el string a anteponer
Memcached prepend By Key $key	la clave del ítem en el que anteponer datos
Memcached prepend By Key $server_key	la clave que identifica al servidor donde guardar o recuperar el valor
Memcached bool prepend By Key	devuelve true en caso de éxito o false en caso de error
Memcached bool prepend By Key string $server_key string $key string $value	anteponer datos a un &iacute;tem existente en un servidor espec&iacute;fico
Memcached bool quit	devuelve true en caso de éxito o false en caso de error
Memcached bool quit	cierra cualquier conexi&oacute;n abierta
Memcached replace By Key $key	la clave en la que se guardará el valor
Memcached replace By Key $expiration	tiempo de expiración que por defecto es 0
Memcached replace By Key $value	el valor a guardar
Memcached replace By Key $server_key	la clave que identifica al servidor donde guardar o recuperar el valor
Memcached bool replace By Key	devuelve true en caso de éxito o false en caso de error
Memcached bool replace By Key string $server_key string $key mixed $value int $expiration	reemplazar un &iacute;tem bajo una clave existente en un servidor espec&iacute;fico
Memcached set $expiration	tiempo de expiración que por defecto es 0
Memcached set $value	el valor a guardar
Memcached set $key	la clave en la que se guardará el valor
Memcached bool set	devuelve true en caso de éxito o false en caso de error
Memcached bool set string $key mixed $value int $expiration	guardar un &iacute;tem
Memcached set By Key $key	la clave en la que se guardará el valor
Memcached set By Key $expiration	tiempo de expiración que por defecto es 0
Memcached set By Key $value	el valor a guardar
Memcached set By Key $server_key	la clave que identifica al servidor donde guardar o recuperar el valor
Memcached bool set By Key	devuelve true en caso de éxito o false en caso de error
Memcached bool set By Key string $server_key string $key mixed $value int $expiration	guardar un &iacute;tem en un servidor espec&iacute;fico
Memcached set Multi $items	un array de pares de clave / valor a almacenar en el servidor
Memcached set Multi $expiration	tiempo de expiración que por defecto es 0
Memcached bool set Multi	devuelve true en caso de éxito o false en caso de error
Memcached bool set Multi array $items int $expiration	almacenar varios &iacute;tems
Memcached bool set Option	devuelve true en caso de éxito o false en caso de error
Memcached bool set Option int $option mixed $value	establecer una opci&oacute;n de memcached
Memcached set Options $options	un array asociativo de opciones donde la clave es la opción a establecer y el valor es el nuevo valor para dicha opción
Memcached bool set Options	devuelve true en caso de éxito o false en caso de error
Memcached bool set Options array $options	establecer opciones de memcached
Memcached set Sasl Auth Data $password	la contraseña para la autenticación
Memcached set Sasl Auth Data $username	el nombre de usuario para la autenticación
Memcached void set Sasl Auth Data string $username string $password	establecer las credenciales para la autenticaci&oacute;n
Memcached touch By Key $key	la clave en la que se guardará el valor
Memcached touch By Key $expiration	tiempo de expiración que por defecto es 0
Memcached touch By Key $server_key	la clave que identifica al servidor donde guardar o recuperar el valor
Memcached bool touch By Key	devuelve true en caso de éxito o false en caso de error
Memcached bool touch By Key string $server_key string $key int $expiration	establecer una nueva expiraci&oacute;n para un &iacute;tem de un servidor espec&iacute;fico
Mongo string get Slave	la dirección del secundario que está usando esta conexión para las lecturas
Mongo string get Slave	devuelve la direcci&oacute;n usada por las lecturas de slaveokay
Mongo bool get Slave Okay	devuelve el valor de slaveokay de esta instancia
Mongo bool get Slave Okay	obtiene el valor de slaveokay de esta conexi&oacute;n
Mongo set Slave Okay $ok	indica si las lecturas deberían o no enviarse a los miembros secundarios del conjunto de réplicas para todas aquellas consultas que se realicen con esta instancia de mongoclient
Mongo bool set Slave Okay	devuelve el valor anterior de slaveokay que tenía esta instancia
Mongo bool set Slave Okay bool $ok	cambia el valor de slaveokay para esta conexi&oacute;n
Mongo string switch Slave	la dirección del secundario que está usando esta conexió para realizar lecturas
Mongo string switch Slave	elije un nuevo secundario para lecturas slaveokay
MongoClient close $connection	la conexión
MongoClient bool close	devuelve si la conexión fue cerrada con éxito
MongoClient bool close boolean|string $connection	cierra esta conexi&oacute;n
MongoClient array get Connections	un array con las conexiones abiertas
MongoClient array get Connections	devuelve informaci&oacute;n sobre todas las conexiones abiertas
MongoClient kill Cursor $id	el id del cursor a eliminar
MongoClient kill Cursor $server_hash	el hash del servidor que posee el cursor
MongoClient bool kill Cursor	devuelve true si el método intentó eliminar el cursor y false si había algo erróneo en los argumentos tal como un server_hash erróneo
MongoClient bool kill Cursor string $server_hash int|MongoInt64 $id	elimina un cursor espec&iacute;fico del servidor
MongoCollection aggregate $pipeline	un array de operadores de tubería
MongoCollection aggregate $options	opciones para el comando de acumulación
MongoCollection aggregate	operadores de tubería adicionales
MongoCollection aggregate $op	primer operador de tubería
MongoCollection aggregate $op	segundo operador de tubería
MongoCollection array aggregate	un array con el resultado de la acumulación
MongoCollection array aggregate array $pipeline array $options	realiza una acumulaci&oacute;n usando el framework de acumulaci&oacute;n
MongoCollection aggregate Cursor $pipeline	la tubería del marco de acumulación a ejecutar
MongoCollection aggregate Cursor $options	opciones para el comando acumulador
MongoCollection MongoCommandCursor aggregate Cursor	devuelve un objeto mongocommandcursor
MongoCollection MongoCommandCursor aggregate Cursor array $command array $options	ejecutar un comando de tuber&iacute;a acumulador y recuperar los resultados mediante un cursor
MongoCollection create Index $keys	un array que tiene como claves los campos de índice
MongoCollection create Index $options	un array de opciones para la creación del índice
MongoCollection bool create Index	devuelve un array que contiene el estado de la creación del índice
MongoCollection bool create Index array $keys array $options	crea un &iacute;ndice en el campo o campos especificados si a&uacute;n no existen
MongoCollection distinct $key	la clave a usar
MongoCollection distinct $query	parámetros de consulta opcionales
MongoCollection array distinct	devuelve un array con valores distintos o false en caso de error
MongoCollection array distinct string $key array $query	recupera una lista de valores distintos para una clave dada a trav&eacute;s de una colecci&oacute;n
MongoCollection array drop	devuelve la respuesta de la base de datos
MongoCollection array drop	borra esta colecci&oacute;n
MongoCollection find And Modify $update	los criterios de actualización
MongoCollection find And Modify $fields	devolver opcionalmente estos campos solamente
MongoCollection find And Modify $query	los criterios de consulta con los que buscar
MongoCollection find And Modify $options	un array de opciones a aplicar tal como eliminar el documento coincidente de la bd y devolverlo
MongoCollection array find And Modify	devuelve el documento original o el modificado si new está establecido
MongoCollection array find And Modify array $query array $update array $fields array $options	actualizar un documento y devolverlo
MongoCollection find One $fields	campos del resultado que se devolverán
MongoCollection find One $options	este parámetro es un array asociativo de la forma array( nombre = > < valor >
MongoCollection find One $query	los campos en los que buscar
MongoCollection array find One	devuelve el registro que coincide con la búsqueda o null
MongoCollection array find One array $query array $fields array $options	realiza una consulta a esta colecci&oacute;n devolviendo s&oacute;lo un elemento
MongoCollection get $name	siguiente string en el nombre de la colección
MongoCollection MongoCollection get	devuelve la colección
MongoCollection MongoCollection get string $name	obtiene una colecci&oacute;n
MongoCollection insert $document	un array u objeto
MongoCollection insert $options	un array de opciones para la operación de inserción
MongoCollection bool|array insert	devuelve un array que contiene el estado de la inserción si la opción w está establecida
MongoCollection bool|array insert array|object $document array $options	inserta un documento en la colecci&oacute;n
MongoCollection save $document	array u objeto a guardar
MongoCollection save $options	opciones para el guardado
MongoCollection mixed save	si w estuviera habilitado devolverá un array que contiene el estado de la escritura
MongoCollection mixed save array|object $document array $options	guarda un documento en esta colecci&oacute;n
MongoCollection set Slave Okay $ok	indica si las lecturas deben enviarse a miembros secundarios del conjunto de réplicas para todas las posibles consultas que utilicen esta instancia de mongocollection
MongoCollection bool set Slave Okay	devuelve el valor anterior de slaveokay de esta instancia
MongoCollection bool set Slave Okay bool $ok	cambia el valor de slaveokay de esta colecci&oacute;n
MongoCommandCursor construct $connection	la conexión a la base de datos
MongoCommandCursor construct $command	comando de la base de datos
MongoCommandCursor construct $ns	nombre completo de la base de datos y la colección p
MongoCommandCursor MongoClient construct	devuelve el nuevo cursor
MongoCommandCursor MongoClient construct MongoClient $connection string $ns array $command	crear un nuevo cursor de comando
MongoCommandCursor create From Document $connection	la conexión a la base de datos
MongoCommandCursor create From Document $hash	el hash de la conexión obtenida mediante el tercer argumento por referencia de mongodb:command()
MongoCommandCursor create From Document $document	el documento con información de cursor en él
MongoCommandCursor MongoCommandCursor create From Document	devuelve el nuevo cursor
MongoCommandCursor MongoCommandCursor create From Document MongoClient $connection string $hash array $document	crear un nuevo cursor de comando desde un documento de cursor existente
MongoCommandCursor bool dead	devuelve true si no hay más resultados que aún no han sido enviados al cliente y false de lo contrario
MongoCommandCursor bool dead	comprueba si hay resultados que a&uacute;n no han sido enviados desde la base de datos
MongoCommandCursor timeout $ms	el número de milisegundos que ha de esperar el cursor a un a respuesta
MongoCommandCursor MongoCommandCursor timeout	este cursor
MongoCommandCursor MongoCommandCursor timeout int $ms	establece el tiempo de espera del lado del cliente para este comando
MongoCursor await Data $wait	si el cursor debería esperar a que estén disponibles más datos
MongoCursor MongoCursor await Data	devuelve este cursor
MongoCursor MongoCursor await Data bool $wait	establece si el cursor esperar&aacute; un momento a que un cursor de seguimiento devuelva m&aacute;s datos
MongoCursor batch Size $batchSize	el número de resultados a devolver por lote
MongoCursor MongoCursor batch Size	returns this cursor
MongoCursor MongoCursor batch Size int $batchSize	limita el n&uacute;mero de elementos devueltos en un lote
MongoCursor count $foundOnly	si fuera aplicable enviar límite de cursor e información de datos saltados
MongoCursor int count	número de documentos que devuelve la consulta de este cursor
MongoCursor int count bool $foundOnly	cuenta el n&uacute;mero de resultados de esta consulta
MongoCursor array current	el documento de resultados actual como array asociativo
MongoCursor array current	devuelve el elemento actual
MongoCursor fields $f	los campo a devolver o no
MongoCursor MongoCursor fields	devuelve este cursor
MongoCursor MongoCursor fields array $f	establece los campos para una consulta
MongoCursor immortal $liveForever	si el cursor debería ser inmortal
MongoCursor MongoCursor immortal	devuelve este cursor
MongoCursor MongoCursor immortal bool $liveForever	establece si este cursor expirar&aacute;
MongoCursor partial $okay	si se acepta la recepción de resultados parciales
MongoCursor MongoCursor partial	returns this cursor
MongoCursor MongoCursor partial bool $okay	si esta consulta deber&iacute;a obtener resultados parciales de mongos si un trozo ha ca&iacute;do
MongoCursor void rewind	devuelve el cursor al inicio del conjunto de resultados
MongoCursor set Flag $flag	qué bandera establecer
MongoCursor set Flag $set	si debería establecerse la bandera true o no false
MongoCursor MongoCursor set Flag	devuelve este cursor
MongoCursor MongoCursor set Flag int $flag bool $set	establece banderas arbitrarias en caso de que no haya m&eacute;todos disponibles para una bandera espec&iacute;fica
MongoCursor MongoCursor snapshot	devuelve este cursor
MongoCursor MongoCursor snapshot	usar el modo 'snapshot' para la consulta
MongoCursor tailable $tail	si el cursor debería ser de seguimiento
MongoCursor MongoCursor tailable	devuelve este cursor
MongoCursor MongoCursor tailable bool $tail	establece si este cursor se dejar&aacute; abierto despu&eacute;s de obtener los &uacute;ltimos resultados
MongoCursor timeout $ms	el número de milisegundos que ha de esperar el cursor a una respuesta
MongoCursor MongoCursor timeout	este cursor
MongoCursor MongoCursor timeout int $ms	establece un tiempo de espera en el lado del cliente para esta consulta
MongoCursorException string get Host	devuelve el nombre de host o null si este es desconocido
MongoCursorException string get Host	el nombre de host del servidor que encontr&oacute; el error
MongoCursorInterface batch Size $batchSize	el número de resultados a devolver por lote
MongoCursorInterface MongoCursorInterface batch Size	devuelve este cursor
MongoCursorInterface MongoCursorInterface batch Size int $batchSize	limita el n&uacute;mero de elementos devueltos en un lote
MongoCursorInterface array info	devuelve el espacio de nombres tamaño del lote límite salto banderas consulta y campos protegidos de este cursor
MongoCursorInterface array info	obtiene informaci&oacute;n sobre la creaci&oacute;n e iteraci&oacute;n del cursor
MongoDate construct $usec	microsegundos
MongoDate construct $sec	número de segundos desde la época es decir 1 enero 1970 00:00:00
MongoDate int construct	devuelve esta nueva fecha
MongoDate int construct int $sec int $usec	crea una nueva fecha
MongoDate DateTime to Date Time	un objeto datetime con esta fecha
MongoDate DateTime to Date Time	devuelve un objeto datetime que representa esta fecha
MongoDate string to String	esta fecha
MongoDate string to String	devuelve una representaci&oacute;n en forma de texto de esta fecha
MongoDB\Driver\Manager execute Query $query(MongoDB\Driver\Query)	el mongodb\driver\query a ejecutar
MongoDB\Driver\Manager execute Query $readPreference(MongoDB\Driver\ReadPreference)	opcionalmente un mongodb\driver\readpreference para seleccionar el servidor para esta operación
MongoDB\Driver\Manager execute Query $namespace(string)	un espacio de nombres completamente cualificado p
MongoDB\Driver\Manager MongoDB\Driver\Cursor execute Query	devuelve un mongodb\driver\cursor en caso de éxito
MongoDB\Driver\Manager MongoDB\Driver\Cursor execute Query string $namespace MongoDB\Driver\Query $query MongoDB\Driver\ReadPreference $readPreference	execute a database query
MongoDB authenticate $username	nombre de usuario
MongoDB authenticate $password	la contraseña en texto plano
MongoDB array authenticate	devuelve la respuesta de la base de datos
MongoDB array authenticate string $username string $password	iniciar sesi&oacute;n en esta base de datos
MongoDB command $hash	establecer el hash de conexión del servidor que ejecutó la orden
MongoDB command $options	un array de opciones para la creación del índice
MongoDB command $command	la consulta a enviar
MongoDB array command	devuelve la respuesta de la base de datos
MongoDB array command array $command array $options string $hash	ejecuta una orden de base de datos
MongoDB create Collection $max	si la colección fuera de tamaño fijo aquí establecemos el número máximo de elementos que podrá almacenar
MongoDB create Collection $autoIndexId	si capped es true se puede especificar false para deshabilitar el índice atómico creado en el campo _id
MongoDB create Collection $options	un array que contiene opciones para las colecciones
MongoDB create Collection $capped	si la colección debería tener un tamaño fijo
MongoDB create Collection $name	nombre de la colección
MongoDB create Collection $size	si la colección fuera de tamaño fijo aquí indicamos su tamaño en bytes
MongoDB MongoCollection create Collection	devuelve un objeto de colección que representa la nueva colección
MongoDB MongoCollection create Collection string $name array $options	crea una colecci&oacute;n
MongoDB create DBRef $document_or_id	si se proporciona un array o un objeto su campo _id será usado como id de referencia
MongoDB create DBRef $collection	colección a la que apuntará la referencia de base de datos
MongoDB array create DBRef	devuelve un array de referencia a base de datos
MongoDB array create DBRef string $collection mixed $document_or_id	crea una referencia a base de datos
MongoDB get $name	nombre de la colección
MongoDB MongoCollection get	devuelve la colección
MongoDB MongoCollection get string $name	obtiene una colecci&oacute;n
MongoDB get Collection Info $options	un array de opciones para enumerar las colecciones
MongoDB array get Collection Info	esta función devuelve un array donde cada elemento es un array que describe una colección
MongoDB array get Collection Info array $options	devuelve informaci&oacute;n sobre las colecciones de esta base de datos
MongoDB bool get Slave Okay	devuelve el valor de slaveokay para esta instancia
MongoDB bool get Slave Okay	devuelve el valor de slaveokay de esta base de datos
MongoDB array prev Error	devuelve el error y hace cuántas operaciones sucedió
MongoDB array prev Error	comprueba el &uacute;ltimo error emitido durante una operaci&oacute;n de base de datos
MongoDB repair $backup_original_files	si se debe guardar una copia de seguridad de los ficheros originales
MongoDB repair $preserve_cloned_files	indica si los ficheros clonados deben mantenerse cuando la reparación falle
MongoDB array repair	devuelve la respuesta de la base de datos
MongoDB array repair bool $preserve_cloned_files bool $backup_original_files	repara y compacta esta base de datos
MongoDB array reset Error	devuelve la respuesta de la base de datos
MongoDB array reset Error	limpia cualquier error de la base de datos que se haya apuntado
MongoDB set Profiling Level $level	nivel de perfilado
MongoDB int set Profiling Level	devuelve el valor anterior del nivel de perfilado
MongoDB int set Profiling Level int $level	establece el nivel de perfilado profiling de la base de datos
MongoDBRef create $id	campo _id del objeto al que enlazar
MongoDBRef create $collection	nombre de la colección sin el nombre de la base de datos
MongoDBRef create $database	nombre de la base de datos
MongoDBRef array create	devuelve la referencia
MongoDBRef array create string $collection mixed $id string $database	crea una nueva referencia de base de datos
MongoDBRef is Ref $ref	array u objeto a comprobar
MongoDBRef bool is Ref	devuelve true en caso de éxito o false en caso de error
MongoDBRef bool is Ref mixed $ref	comprueba si un array es una referencia en la base de datos
MongoDeleteBatch construct $write_options	un array de opciones de escritura
MongoDeleteBatch construct $collection	el objeto mongocollection sobre el que ejecutar el lote
MongoDeleteBatch MongoCollection construct	un nuevo objeto mongodeletebatch
MongoDeleteBatch MongoCollection construct MongoCollection $collection array $write_options	descripci&oacute;n
MongoGridFSFile resource get Resource	devuelve un recurso que puede usarse para leer el fichero
MongoGridFSFile resource get Resource	devuelve un recurso que puede usarse para leer el fichero almacenado
MongoId string get Hostname	devuelve el nombre de host
MongoId string get Hostname	obtiene el nombre de host que se usa para el id de esta m&aacute;quina
MongoId int get PID	devuelve el pid del mongoid
MongoId int get PID	obtiene el id del proceso
MongoId int get Timestamp	devuelve el número de segundos desde la fecha de referencias con el que se creó este id
MongoId int get Timestamp	devuelve el n&uacute;mero de segundos desde la fecha de referencia con el que se cre&oacute; este id
MongoId is Valid $value	el valor a comprobar su validez
MongoId bool is Valid	devuelve true si value es una instancia de mongoid o un string que consiste en exactamente 24 caracteres hexadecimales; de lo contrario devuelve false
MongoId bool is Valid mixed $value	comprobar si un valor es un objectid v&aacute;lido
MongoId set state $props	en teoría un array de propiedades utilizado para crear el nueva id
MongoId MongoId set state	un nuevo id con el valor 000000000000000000000000
MongoId MongoId set state array $props	crea un objeto mongoid trivial
MongoInsertBatch construct $write_options	un array de opciones de escritura
MongoInsertBatch construct $collection	el objeto mongocollection sobre el que ejecutar el lote
MongoInsertBatch MongoCollection construct	un nuevo objeto mongoinsertbatch
MongoInsertBatch MongoCollection construct MongoCollection $collection array $write_options	descripci&oacute;n
MongoInt32 construct $value	un número
MongoInt32 string construct	devuelve un nuevo entero
MongoInt32 string construct string $value	crea un nuevo entero de 32 bits
MongoInt64 construct $value	un número
MongoInt64 string construct	devuelve un nuevo entero
MongoInt64 string construct string $value	crea un nuevo entero de 64 bits
MongoLog callable get Callback	devuelve la función de retrollamada o false si aún no se ha establecido
MongoLog callable get Callback	obtiene la funci&oacute;n de retrollamada establecida anteriormente
MongoLog int get Level	devuelve el nivel o niveles que están siendo registrados acutalemente
MongoLog int get Level	obtiene el nivel o niveles que est&aacute;n siendo registrados
MongoLog int get Module	devuelve el módulo o los módulos que se están registrando actualmente
MongoLog int get Module	devuelve el m&oacute;dulo o m&oacute;dulos que se est&aacute;n registrando actualmente
MongoLog set Callback $level	una de las constantes de nivel de mongolog
MongoLog set Callback $message	el mensaje de registro mismo
MongoLog set Callback $log_function	la función de retrollamada a invocar por eventos
MongoLog set Callback $module	una de las constantes de módulo de mongolog
MongoLog void set Callback callable $log_function	establece una funci&oacute;n de retrollamada para ser invocada por eventos
MongoLog set Level $level	nivel o niveles que se desean registrar
MongoLog void set Level int $level	establece el nivel o niveles a registrar
MongoLog set Module $module	el / los módulo / s que desea registrar
MongoLog void set Module int $module	establece el m&oacute;dulo o m&oacute;dulos a registrar
MongoPool array info	cada agrupamiento de conexiones tiene un identificador que comienza con el nombre de host
MongoPool array info	devuelve informaci&oacute;n sobre todos los agrupamientos de conexiones
MongoRegex construct $regex	texto de la expresión regular con la forma / expresión / banderas
MongoRegex string construct	devuelve una nueva expresión regular
MongoRegex string construct string $regex	crea una nueva expresi&oacute;n regular
MongoRegex string to String	esta expresión regular en la forma / expresión / banderas
MongoRegex string to String	representaci&oacute;n en forma de texto de esta expresi&oacute;n regular
MongoResultException array get Document	el documento resultante completo es un array incluyendo datos parciales si están disponibles y claves adicionales
MongoResultException array get Document	recupera el documento resultante completo
MongoTimestamp construct $inc	incremento
MongoTimestamp construct $sec	número de segundos desde la época es decir 1 enero 1970 00:00:00
MongoTimestamp int construct	devuelve la nueva marca temporal
MongoTimestamp int construct int $sec int $inc	crea una nueva marca temporal
MongoTimestamp string to String	los segundos desde la fecha de referencia que rerpesenta este timestamp
MongoTimestamp string to String	devuelve la representaci&oacute;n en forma de texto de este timestamp
MongoUpdateBatch construct $write_options	un array de opciones de escritura
MongoUpdateBatch construct $collection	el objeto mongocollection sobre el que ejecutar el lote
MongoUpdateBatch MongoCollection construct	un nuevo objeto mongoupdatebatch
MongoUpdateBatch MongoCollection construct MongoCollection $collection array $write_options	descripci&oacute;n
MongoWriteBatch add $item	un array que describe una operación de escritura
MongoWriteBatch bool add	devuelve true en caso de éxito y lanza una excepción en caso de fallo
MongoWriteBatch bool add array $item	a&ntilde;ade una operaci&oacute;n de escritura a un lote
MongoWriteBatch execute $write_options	véase mongowritebatch::__construct
MongoWriteBatch array execute	devuelve un array que contiene información estadística del lote completo
MongoWriteBatch array execute array $write_options	ejecuta un lote de operaciones de escritura
MultipleIterator contains Iterator $iterator	el iterador a comprobar
MultipleIterator bool contains Iterator	devuelve true en caso de éxito o false en caso de error
MultipleIterator bool contains Iterator Iterator $iterator	comprueba si un iterador est&aacute; adjunto
MultipleIterator int count Iterators	el número de instancias de iteradores adjuntos como un integer
MultipleIterator int count Iterators	obtiene el n&uacute;mero de instancias de iteradores adjuntos
MultipleIterator array current	un array conteniendo los valores actuales de cada iterador adjuntado o false si no hay ningún iterador adjuntado
MultipleIterator array current	obtiene las instancias registradas del iterador
MultipleIterator array key	un array con todas las instancias registradas del iterador o false si ninguna instancia ha sido adjuntada
MultipleIterator array key	obtiene las instancias registradas del iterador
MultipleIterator void next	mueve todas las instancias de iterador adjuntadas hac&iacute;a la siguiente
MultipleIterator set Flags $flags	las flags a ser establecidas de acuerdo a las constantes flag
MultipleIterator void set Flags int $flags	establece las flags
MultipleIterator bool valid	devuelve true si uno o todos los subiteradores son válidos dependiendo de las flags o false en caso contrario
MultipleIterator bool valid	comprueba la validez de los subiteradores
function bool mysqli report int $flags	alias de mysqli_driver- > report_mode
MysqlndUhConnection change User $database	la base de datos de mysql a la que cambiar
MysqlndUhConnection change User $password	la contraseña de mysql
MysqlndUhConnection change User $passwd_len	la longitud de la contraseña de mysql
MysqlndUhConnection change User $user	el nombre de usuario de mysql
MysqlndUhConnection change User $silent	controla si a mysqlnd le está permitido emitir errores o no
MysqlndUhConnection change User $connection	gestor de conexión de mysqlnd
MysqlndUhConnection bool change User	devuelve true en caso de éxito
MysqlndUhConnection bool change User mysqlnd_connection $connection string $user string $password string $database bool $silent int $passwd_len	cambia el usuario de la conexi&oacute;n de la base de datos de mysqlnd especificada
MysqlndUhConnection charset Name $connection	gestor de conexión de mysqlnd
MysqlndUhConnection string charset Name	el conjunto de caracteres predeterminado
MysqlndUhConnection string charset Name mysqlnd_connection $connection	devuelve el conjunto de caracters predeterminado de la conexi&oacute;n de la base de datos
MysqlndUhConnection connect $database	if provided will specify the default database to be used when performing queries
MysqlndUhConnection connect $mysql_flags	opciones de conexión
MysqlndUhConnection connect $socket	especifica el socked o la tubería con nombre que debería usarse
MysqlndUhConnection connect $port	especifica el número de puerto al que intentar conectarse al servidor mysql
MysqlndUhConnection connect $password	si no se proporciona o es null el servidor mysql intentará autenticar al usuario únicamente con aquellos registro de usuarios que no tengan contraseña
MysqlndUhConnection connect $user	el nombre del usuario de mysql
MysqlndUhConnection connect $connection	gestor de conexión de mysqlnd
MysqlndUhConnection connect $host	puede ser un nombre de host o una dirección ip
MysqlndUhConnection bool connect	devuelve true en caso de éxito
MysqlndUhConnection bool connect mysqlnd_connection $connection string $host string $use&quot; string $password string $database int $port string $socket int $mysql_flags	abre una nueva conexi&oacute;n al servidor mysql
MysqlndUhConnection end PSession $connection	gestor de conexión de mysqlnd
MysqlndUhConnection bool end PSession	devuelve true en caso de éxito
MysqlndUhConnection bool end PSession mysqlnd_connection $connection	finaliza una conexi&oacute;n persistente
MysqlndUhConnection get Affected Rows $connection	gestor de conexión de mysqlnd
MysqlndUhConnection int get Affected Rows	el número de filas afectadas
MysqlndUhConnection int get Affected Rows mysqlnd_connection $connection	obtiene el n&uacute;mero de filas afectadas en una operaci&oacute;n de mysql anterior
MysqlndUhConnection get Error String $connection	gestor de conexión de mysqlnd
MysqlndUhConnection string get Error String	un string con el error de la llamada más reciente a una función
MysqlndUhConnection string get Error String mysqlnd_connection $connection	devuelve una descripci&oacute;n del &uacute;ltimo error
MysqlndUhConnection get Field Count $connection	gestor de conexión de mysqlnd
MysqlndUhConnection int get Field Count	el número de columnas
MysqlndUhConnection int get Field Count mysqlnd_connection $connection	devuelve el n&uacute;mero de columnas de la consulta m&aacute;s reciente
MysqlndUhConnection get Host Information $connection	gestor de conexión de mysqlnd
MysqlndUhConnection string get Host Information	la descripción de la conexión
MysqlndUhConnection string get Host Information mysqlnd_connection $connection	devuelve una representaci&oacute;n de tipo string del tipo de conexi&oacute;n usada
MysqlndUhConnection get Protocol Information $connection	gestor de conexión de mysqlnd
MysqlndUhConnection string get Protocol Information	the protocol version
MysqlndUhConnection string get Protocol Information mysqlnd_connection $connection	devuelve la versi&oacute;n del protocolo de mysql usado
MysqlndUhConnection get Server Information $connection	gestor de conexión de mysqlnd
MysqlndUhConnection string get Server Information	the server version
MysqlndUhConnection string get Server Information mysqlnd_connection $connection	devuelve la versi&oacute;n del servidor mysql
MysqlndUhConnection get Server Version $connection	gestor de conexión de mysqlnd
MysqlndUhConnection int get Server Version	la versión de mysql
MysqlndUhConnection int get Server Version mysqlnd_connection $connection	devuelve la versi&oacute;n del servidor mysql en forma de entero
MysqlndUhConnection get Sqlstate $connection	gestor de conexión de mysqlnd
MysqlndUhConnection string get Sqlstate	el código de sqlstate
MysqlndUhConnection string get Sqlstate mysqlnd_connection $connection	devuelve el error sqlstate de la operaci&oacute;n anterior de mysql
MysqlndUhConnection get Statistics $connection	gestor de conexión de mysqlnd
MysqlndUhConnection array get Statistics	estadísticas de conexión recopiladas por mysqlnd
MysqlndUhConnection array get Statistics mysqlnd_connection $connection	devuelve estad&iacute;sticas sobre la conexi&oacute;n cliente
MysqlndUhConnection get Thread Id $connection	gestor de conexión de mysqlnd
MysqlndUhConnection int get Thread Id	el id del hilo de la conexión
MysqlndUhConnection int get Thread Id mysqlnd_connection $connection	devuelve el id del hilo de la conexi&oacute;n en uso
MysqlndUhConnection get Warning Count $connection	gestor de conexión de mysqlnd
MysqlndUhConnection int get Warning Count	el número de advertencias
MysqlndUhConnection int get Warning Count mysqlnd_connection $connection	devuelve el n&uacute;mero de advertencias de la &uacute;ltima consulta para el enlace dado
MysqlndUhConnection list Fields $pattern	patrón de nombre
MysqlndUhConnection list Fields $connection	gestor de conexión de mysqlnd
MysqlndUhConnection list Fields $table	el nombre de la tabla que va a ser consultada
MysqlndUhConnection array list Fields mysqlnd_connection $connection string $table string $achtung_wild	enumera los campos de una tabla de mysql
MysqlndUhConnection list Method $query	el comando show a ejecutar
MysqlndUhConnection list Method $connection	gestor de conexión de mysqlnd
MysqlndUhConnection void list Method mysqlnd_connection $connection string $query string $achtung_wild string $par1	envoltura para comandos de listas desordenadas
MysqlndUhConnection next Result $connection	gestor de conexión de mysqlnd
MysqlndUhConnection bool next Result	devuelve true en caso de éxito
MysqlndUhConnection bool next Result mysqlnd_connection $connection	prepara el siguiente resultado de multi_query
MysqlndUhConnection ping $connection	gestor de conexión de mysqlnd
MysqlndUhConnection bool ping	devuelve true en caso de éxito
MysqlndUhConnection bool ping mysqlnd_connection $connection	comprueba una conexi&oacute;n al servidor o intenta reconectar si la conexi&oacute;n ha ca&iacute;do
MysqlndUhConnection query Read Resultset Header $mysqlnd_stmt	gestor de sentencias de mysqlnd
MysqlndUhConnection query Read Resultset Header $connection	gestor de conexión de mysqlnd
MysqlndUhConnection bool query Read Resultset Header	devuelve true en caso de éxito
MysqlndUhConnection bool query Read Resultset Header mysqlnd_connection $connection mysqlnd_statement $mysqlnd_stmt	lee una cabecera del conjunto de resultados
MysqlndUhConnection reap Query $connection	gestor de conexión de mysqlnd
MysqlndUhConnection bool reap Query	returns true on success
MysqlndUhConnection bool reap Query mysqlnd_connection $connection	obtiene el resultado de una consulta asicr&oacute;nica
MysqlndUhConnection select Db $connection	gestor de conexión de mysqlnd
MysqlndUhConnection select Db $database	el nombre de la base de datos
MysqlndUhConnection bool select Db	devuelve true en caso de éxito
MysqlndUhConnection bool select Db mysqlnd_connection $connection string $database	selecciona la base de datos predeterminada para su consulta
MysqlndUhConnection send Close $connection	gestor de conexión de mysqlnd
MysqlndUhConnection bool send Close	devuelve true en caso de éxito
MysqlndUhConnection bool send Close mysqlnd_connection $connection	env&iacute;a un comando de cierre a mysql
MysqlndUhConnection send Query $query	la cadena de consulta
MysqlndUhConnection send Query $connection	gestor de conexión de mysqlnd
MysqlndUhConnection bool send Query	devuelve true en caso de éxito
MysqlndUhConnection bool send Query mysqlnd_connection $connection string $query	env&iacute;a una consulta a mysql
MysqlndUhConnection server Dump Debug Information $connection	gestor de conexión de mysqlnd
MysqlndUhConnection bool server Dump Debug Information	devuelve true en caso de éxito
MysqlndUhConnection bool server Dump Debug Information mysqlnd_connection $connection	vierte la informaci&oacute;n de depuraci&oacute;n en el registro para el servidor mysql
MysqlndUhConnection set Autocommit $mode	si activar o no la autoconsigna
MysqlndUhConnection set Autocommit $connection	gestor de conexión de mysqlnd
MysqlndUhConnection bool set Autocommit	devuelve true en caso de éxito
MysqlndUhConnection bool set Autocommit mysqlnd_connection $connection int $mode	activa o desactiva la autoconsigna de las modificaciones de la base de datos
MysqlndUhConnection set Client Option $value	valor la opción si fuera necesario
MysqlndUhConnection set Client Option $connection	gestor de conexión de mysqlnd
MysqlndUhConnection set Client Option $option	la opción a establecer
MysqlndUhConnection bool set Client Option	devuelve true en caso de éxito
MysqlndUhConnection bool set Client Option mysqlnd_connection $connection int $option int $value	establece una opci&oacute;n del cliente
MysqlndUhConnection simple Command $arg	argumentos opcionales del comando com
MysqlndUhConnection simple Command $ok_packet	el tipo de paquete ok
MysqlndUhConnection simple Command $ignore_upsert_status	si ignorar el estado update / insert
MysqlndUhConnection simple Command $connection	gestor de conexión de mysqlnd
MysqlndUhConnection simple Command $silent	si mysqlnd podría emitir errores
MysqlndUhConnection simple Command $command	el comando com a enviar
MysqlndUhConnection bool simple Command	devuelve true en caso de éxito
MysqlndUhConnection bool simple Command mysqlnd_connection $connection int $command string $arg int $ok_packet bool $silent bool $ignore_upsert_status	env&iacute;a un comando com_* b&aacute;sico
MysqlndUhConnection simple Command Handle Response $ignore_upsert_status	si ignorar el estado update / insert
MysqlndUhConnection simple Command Handle Response $connection	gestor de conexión de mysqlnd
MysqlndUhConnection simple Command Handle Response $ok_packet	el tipo de paquete ok
MysqlndUhConnection simple Command Handle Response $command	el comando com del que procesar los resultados
MysqlndUhConnection simple Command Handle Response $silent	si mysqlnd podría emitir errores
MysqlndUhConnection bool simple Command Handle Response	devuelve true en caso de éxito
MysqlndUhConnection bool simple Command Handle Response mysqlnd_connection $connection int $ok_packet bool $silent int $command bool $ignore_upsert_status	procesa una respuesta para un comando com_* b&aacute;sico enviado al cliente
MysqlndUhConnection stmt Init $connection	gestor de conexión de mysqlnd
MysqlndUhConnection resource stmt Init	recurso de tipo sentencia preparada de mysqlnd únicamente interno - ¡no se debe modificar!)
MysqlndUhConnection resource stmt Init mysqlnd_connection $connection	iniciliza una sentencia y devuelve un recurso para usarlo con mysqli_statement::prepare
MysqlndUhConnection store Result $connection	gestor de conexión de mysqlnd
MysqlndUhConnection resource store Result	recurso de tipo conjunto de resultados de mysqlnd únicamente interno - ¡no se debe modificar!)
MysqlndUhConnection resource store Result mysqlnd_connection $connection	transfiere un conjunto de resultados de la &uacute;ltima consulta
MysqlndUhConnection tx Commit $connection	gestor de conexión de mysqlnd
MysqlndUhConnection bool tx Commit	devuelve true en caso de éxito
MysqlndUhConnection bool tx Commit mysqlnd_connection $connection	consigna la transacci&oacute;n en uso
MysqlndUhConnection tx Rollback $connection	gestor de conexión de mysqlnd
MysqlndUhConnection bool tx Rollback	devuelve true en caso de éxito
MysqlndUhConnection bool tx Rollback mysqlnd_connection $connection	revierte la transacci&oacute;n en uso
MysqlndUhPreparedStatement execute $statement	gestor de sentencias preparadas de mysqlnd
MysqlndUhPreparedStatement bool execute	devuelve true en caso de éxito
MysqlndUhPreparedStatement bool execute mysqlnd_prepared_statement $statement	ejecuta una consulta preparada
MysqlndUhPreparedStatement prepare $query	the query to be prepared
MysqlndUhPreparedStatement prepare $statement	gestor de sentencias preparadas de mysqlnd
MysqlndUhPreparedStatement bool prepare	devuelve true en caso de éxito
MysqlndUhPreparedStatement bool prepare mysqlnd_prepared_statement $statement string $query	prepara una sentencia sql para su ejecuci&oacute;n
NoRewindIterator mixed current	el valor actual
NoRewindIterator mixed current	obtener el valor actual
NoRewindIterator void rewind	evita la operaci&oacute;n de rebobinado en el iterador interno
NoRewindIterator bool valid	devuelve true en caso de éxito o false en caso de error
NoRewindIterator bool valid	valida el iterador
OAuth bool disable Debug	true
OAuth bool disable Debug	desactiva la depuraci&oacute;n detallada
OAuth bool disable Redirects	true
OAuth bool disable Redirects	desactiva las redirecciones
OAuth bool disable SSLChecks	true
OAuth bool disable SSLChecks	desactiva la verificaci&oacute;n ssl
OAuth bool enable Redirects	true
OAuth bool enable Redirects	activa las re-direcciones
OAuth fetch $protected_resource_url	url del recurso oauth protegio
OAuth fetch $http_method	una de las oauth_http_method_* constantes oauth which includes get post put head or delete
OAuth fetch $extra_parameters	parámetros adicionales para enviar con la petición del recurso
OAuth fetch $http_headers	encabezados cliente http como por ejemplo user-agent accept etc
OAuth mixed fetch	devuelve true en caso de éxito o false en caso de error
OAuth mixed fetch string $protected_resource_url array $extra_parameters string $http_method array $http_headers	obtiene un recurso protegido por oauth
OAuth generate Signature $extra_parameters	string o array de parámetros adicionales
OAuth generate Signature $url	url de solicitud
OAuth generate Signature $http_method	método http para la solicitud
OAuth string generate Signature	un string que contiene la firma generada o false en caso de error
OAuth string generate Signature string $http_method string $url mixed $extra_parameters	generar una firma
OAuth array get CAPath	un array con información del certificado de autoridad específicamente como claves ca_path y ca_info dentro del array asociativo devuelto
OAuth array get CAPath	obtiene la informaci&oacute;n ca
OAuth string get Last Response	devuelve la cadena conteniendo la última respuesta
OAuth string get Last Response	obtiene la &uacute;ltima respuesta
OAuth string get Last Response Headers	un string que contiene los encabezados de la última respuesta o false en caso de error
OAuth string get Last Response Headers	obtener encabezados de la &uacute;ltima respuesta
OAuth array get Last Response Info	devuelve un array conteniendo la información de respuesta de la última petición
OAuth array get Last Response Info	obtiene la informaci&oacute;n http sobre la &uacute;ltima respuesta
OAuth get Request Header $extra_parameters	string o array de parámetros adicionales
OAuth get Request Header $http_method	método http para la petición
OAuth get Request Header $url	url para la petición
OAuth string get Request Header	un string que contiene la cabecera solicitada generada o false en caso de error
OAuth string get Request Header string $http_method string $url mixed $extra_parameters	generar un string de firma de cabecera oauth
OAuth get Request Token $request_token_url	url al token de solicitud de la api
OAuth get Request Token $http_method	método http a usar por ejemplo get o post
OAuth get Request Token $callback_url	url del callback oauth
OAuth array get Request Token	devuelve un array conteniendo las respuestas oauth analizadas al tener éxitoo false al fallar
OAuth array get Request Token string $request_token_url string $callback_url string $http_method	obtiene un token de petici&oacute;n
OAuth set Auth Type $OAUTH_AUTH_TYPE_FORM	anexa los parámetros oauth al cuerpo de petición http post
OAuth set Auth Type $auth_type	auth_type puede ser una de las siguientes banderas in orden descendente de preferencia según oauth 1
OAuth set Auth Type $OAUTH_AUTH_TYPE_URI	anexa los parámetros oauth a la uri de petición
OAuth set Auth Type $OAUTH_AUTH_TYPE_AUTHORIZATION	pasa los parámetros oauth en la cabecera de authorization http
OAuth set Auth Type $OAUTH_AUTH_TYPE_NONE	ninguno
OAuth mixed set Auth Type	devuelve true si el parámetro es correctamente establecido de otra manera false ejemplo si un inválido parámetro auth_type es pasado
OAuth mixed set Auth Type int $auth_type	establece el tipo de autorizaci&oacute;n
OAuth set Nonce $nonce	el valor para oauth_nonce
OAuth mixed set Nonce	devuelve true si tiene éxito o false si nonce es considerado como inválido
OAuth mixed set Nonce string $nonce	configura el nonce para las solicitudes posteriores
OAuth set Request Engine $reqengine	el motor de peticiones deseado
OAuth void set Request Engine int $reqengine	el prop&oacute;sito de setrequestengine
OAuth bool set SSLChecks	devuelve true en caso de éxito o false en caso de error
OAuth bool set SSLChecks int $sslcheck	ajustar controles espec&iacute;ficos de ssl para las solicitudes
OAuth set Token $token_secret	el secreto oauth
OAuth set Token $token	el token oauth
OAuth bool set Token	true
OAuth bool set Token string $token string $token_secret	establece el token y el secreto
OAuth set Version $version	versión oauth el valor por omisión es siempre 1
OAuth bool set Version	devuelve true en caso de éxito o false en caso de error
OAuth bool set Version string $version	configura la versi&oacute;n oauth
OAuthProvider add Required Parameter $req_params	los parámetros requeridos
OAuthProvider bool add Required Parameter	devuelve true en caso de éxito o false en caso de error
OAuthProvider bool add Required Parameter string $req_params	agregar par&aacute;metros necesarios
OAuthProvider void callconsumer Handler	llama al callback consumernoncehandler
OAuthProvider void calltoken Handler	llama al callback tokennoncehandler
OAuthProvider check OAuth Request $method	el método http
OAuthProvider check OAuth Request $uri	la uri opcional o punto final
OAuthProvider void check OAuth Request string $uri string $method	revisa una petici&oacute;n oauth
OAuthProvider construct $params_array	la configuración de estos parámetros opcionales se limita al cli sapi
OAuthProvider array construct	un object oauthprovider
OAuthProvider array construct array $params_array	construye un nuevo objeto oauthprovider
OAuthProvider consumer Handler $callback_function	el nombre de la función callable
OAuthProvider void consumer Handler callable $callback_function	establece el manejador callback consumerhandler
OAuthProvider generate Token $strong	establecer a true significa que / dev / random será usada para la entropía de lo contrario / dev / urandom será usado
OAuthProvider generate Token $size	la longitud the desired token length in terms of bytes
OAuthProvider string generate Token	el token generado como un string de bytes
OAuthProvider string generate Token int $size bool $strong	genera un token aleatorio
OAuthProvider void is2 Legged Endpoint mixed $params_array	is2leggedendpoint
OAuthProvider remove Required Parameter $req_params	el parámetro requerido a ser removido
OAuthProvider bool remove Required Parameter	devuelve true en caso de éxito o false en caso de error
OAuthProvider bool remove Required Parameter string $req_params	remueve un par&aacute;metro requerido
OAuthProvider set Param $param_key	la clave del parámetro
OAuthProvider set Param $param_val	el valor opcional del parámetro
OAuthProvider bool set Param	devuelve true en caso de éxito o false en caso de error
OAuthProvider bool set Param string $param_key mixed $param_val	establece un par&aacute;metro
OAuthProvider set Request Token Path $path	la ruta
OAuthProvider bool set Request Token Path	true
OAuthProvider bool set Request Token Path string $path	establece la ruta de petici&oacute;n del token
OAuthProvider token Handler $callback_function	el nombre de la función callable
OAuthProvider void token Handler callable $callback_function	establece el manejador callback de tokenhandler
OCI-Collection assign $from	una instancia de oci-collection
OCI-Collection bool assign	devuelve true en caso de éxito o false en caso de error
OCI-Collection bool assign OCI-Collection $from	asigna un valor a la colecci&oacute;n desde otra colecci&oacute;n existente
OCI-Collection bool free	devuelve true en caso de éxito o false en caso de error
OCI-Collection bool free	libera los recursos asociados con el objeto colecci&oacute;n
OCI-Collection get Elem $index	el índice del elemento
OCI-Collection mixed get Elem	devuelve false si el elemento no existe; null si el elemento es null ; un string si el elemento es una columna del tipo de datos string o un número si es un campo numérico
OCI-Collection mixed get Elem int $index	devuelve el valor de un elemento
OCI-Collection int size	devuelve el número de elementos de la colección o false en caso de error
OCI-Collection int size	devuelve el tama&ntilde;o de la colecci&oacute;n
OCI-Collection trim $num	el número de elementos a eliminar
OCI-Collection bool trim	devuelve true en caso de éxito o false en caso de error
OCI-Collection bool trim int $num	elimina elementos del final de la colecci&oacute;n
OCI-Lob append $lob_from	el lob copiado
OCI-Lob bool append	devuelve true en caso de éxito o false en caso de error
OCI-Lob bool append OCI-Lob $lob_from	a&ntilde;ade datos a un objeto grande lob desde otro
OCI-Lob bool close	devuelve true en caso de éxito o false en caso de error
OCI-Lob bool close	cierra un descriptor de lob
OCI-Lob bool eof	devuelve true si el puntero interno de objetos grandes está al final del lob
OCI-Lob bool eof	comprueba la marca de final de fichero en un descriptor de objetos grandes
OCI-Lob export $start	indica desde dónde se empieza a exportar
OCI-Lob export $filename	la ruta del fichero
OCI-Lob export $length	indica la longitud de los datos a exportar
OCI-Lob bool export	devuelve true en caso de éxito o false en caso de error
OCI-Lob bool export string $filename int $start int $length	exporta el contenido de un lob a un fichero
OCI-Lob bool free	devuelve true en caso de éxito o false en caso de error
OCI-Lob bool free	libera los recursos asociados con el descriptor del lob
OCI-Lob import $filename	la ruta del fichero
OCI-Lob bool import	devuelve true en caso de éxito o false en caso de error
OCI-Lob bool import string $filename	importa datos de un fichero a un lob
OCI-Lob string load	devuelve el contenido del objeto o false en caso de error
OCI-Lob string load	devuelve el contenido de un objeto grande
OCI-Lob read $length	la longitud de los datos a leer en bytes
OCI-Lob string read	devuelve el contenido como un string o false en caso de error
OCI-Lob string read int $length	lee parte del objeto grande
OCI-Lob save $offset	se puede usar para señalar el índice desde el comienzo del objeto grande
OCI-Lob save $data	los datos a guardar
OCI-Lob bool save	devuelve true en caso de éxito o false en caso de error
OCI-Lob bool save string $data int $offset	guarda datos en un objeto grande
OCI-Lob seek $offset	indica la cantidad de bytes que se moverá el puntero interno según el modo dado por whence
OCI-Lob seek $whence	puede ser una de las siguientes constantes: oci_seek_set - establece la posición igual a offset oci_seek_cur - añade offset bytes a la posición actual oci_seek_end - añade offset bytes al final del objeto grande use un valor negativo para moverse a una posición anterior del final del objeto grande
OCI-Lob bool seek	devuelve true en caso de éxito o false en caso de error
OCI-Lob bool seek int $offset int $whence	ubica el puntero interno de un objeto grande
OCI-Lob set Buffering $on_off	true para activarlo y false para desactivarlo
OCI-Lob bool set Buffering	devuelve true en caso de éxito o false en caso de error
OCI-Lob bool set Buffering bool $on_off	cambia el estado actual del uso del b&uacute;fer para objetos grandes
OCI-Lob truncate $length	si se proporciona este método truncará el lob en length bytes
OCI-Lob bool truncate	devuelve true en caso de éxito o false en caso de error
OCI-Lob bool truncate int $length	trunca un objeto grande
OCI-Lob write $length	si se proporciona este parámetro la escritura se dentendrá después de que se hayan escrito length bytes o se alcance el final de data lo que suceda primero
OCI-Lob write $data	los datos a escribir en el lob
OCI-Lob int write	devuelve el número de bytes escritos o false en caso de error
OCI-Lob int write string $data int $length	escribe datos en un objeto grande
OCI-Lob write Temporary $lob_type	puede ser una de las siguientes constantes: oci_temp_blob se utiliza para crear blobs temporales oci_temp_clob se utiliza para crear clobs temporales
OCI-Lob write Temporary $data	los datos a escribir
OCI-Lob bool write Temporary	devuelve true en caso de éxito o false en caso de error
OCI-Lob bool write Temporary string $data int $lob_type	escribe un objeto grande temporal
ParentIterator bool accept	true si el elemento actual es aceptable en caso contrario false
ParentIterator bool accept	determina aceptabilidad
ParentIterator construct $iterator	el iterador a ser construido
ParentIterator RecursiveIterator construct	el parentiterator
ParentIterator RecursiveIterator construct RecursiveIterator $iterator	construye un parentiterator
ParentIterator ParentIterator get Children	un object
ParentIterator ParentIterator get Children	devuelve los iteradores hijo contenidos en un parentiterator
ParentIterator void next	mueve el iterador a la siguiente posici&oacute;n
ParentIterator void rewind	rebobina el iterador
PDO cubrid schema $col_name	la columna de la que se quiere conocer el esquema
PDO cubrid schema $table_name	la tabla de la que se quiere conocer el esquema
PDO cubrid schema $schema_type	el tipo de esquema del que se quiere saber
PDO array cubrid schema	un array que contiene la información del esquema cuando el proceso tiene éxito;
PDO array cubrid schema int $schema_type string $table_name string $col_name	obtiene la informaci&oacute;n del esquema solicitada
PDO exec $statement	la sentencia sql para preparar y ejecutar
PDO int exec	pdo::exec() devuelve el número de filas modificadas o borradas por la sentencia sql ejecutada
PDO int exec string $statement	ejecuta una sentencia sql y devuelve el n&uacute;mero de filas afectadas
PDO get Attribute $attribute	una de las constantes pdo::attr_*
PDO mixed get Attribute	una llamada con éxito devuelve el valor del atributo pdo solicitado
PDO mixed get Attribute int $attribute	devuelve un atributo de la conexi&oacute;n a la base de datos
PDO bool in Transaction	devuelve true si una transacción está activa actualmente y false si no
PDO bool in Transaction	comprueba si una transacci&oacute;n est&aacute; activa
PDO last Insert Id $name	nombre de la secuencia de objetos de la cual el id debe ser devuelto
PDO string last Insert Id	si el nombre de la secuencia no se especifica en el parámetro name pdo::lastinsertid() devuelve una cadena representando el id de la última columna que ha sido insertada en la base de datos
PDO string last Insert Id string $name	devuelve el id de la &uacute;ltima fila o secuencia insertada
PDO pgsql Copy To Array $null_as	cómo interpretar valores nulos
PDO pgsql Copy To Array $fields	la lista de campos a exportar
PDO pgsql Copy To Array $delimiter	el delimitador empleado en el array rows
PDO pgsql Copy To Array $table_name	un string que contiene el nombre de la tabla
PDO array pgsql Copy To Array	returns an array of rows o false en caso de error
PDO array pgsql Copy To Array string $table_name array $rows string $delimiter string $null_as string $fields	copiar datos de una tabla de una base de datos a un array de php
PDO pgsql Get Notify $result_type	el formato del conjunto de resultados debería ser devueto como representado como una constante pdo::fetch_*
PDO pgsql Get Notify $ms_timeout	la duración del tiempo de espera de una respuesta en milisegundos
PDO array pgsql Get Notify	si hay una o más notificaciones pendientes devuelve una única fila con los campos message y pid o de lo contrario devuelve false
PDO array pgsql Get Notify int $result_type int $ms_timeout	obtener una notificaci&oacute;n as&iacute;ncrona
PDO int pgsql Get Pid	el pid del servidor
PDO int pgsql Get Pid	obtener el pid del servidor
PDO pgsql LOBOpen $oid	un identificador de objeto grande
PDO pgsql LOBOpen $mode	si el modo es r se abre el flujo para lectura
PDO resource pgsql LOBOpen	devuelve un recurso de flujo en caso de éxito o false en caso de error
PDO resource pgsql LOBOpen string $oid string $mode	abre un flujo de un objeto grande existente
PDO prepare $driver_options	este array guarda uno o más pares clave= > valor para establecer el valor de los atributos del objeto pdostatement que este método devuelve
PDO prepare $statement	debe ser una plantilla de sentencia sql válida para el servidor de base de datos destino
PDO PDOStatement prepare	si el servidor de la base de datos prepara con éxito la sentencia pdo::prepare() devuelve un objeto pdostatement
PDO PDOStatement prepare string $statement array $driver_options	prepara una sentencia para su ejecuci&oacute;n y devuelve un objeto sentencia
PDO query $statement	la sentencia sql a preparar y ejecutar
PDO PDOStatement query	pdo::query() devuelve un objeto pdostatement o false en caso de error
PDO PDOStatement query string $statement	ejecuta una sentencia sql devolviendo un conjunto de resultados como un objeto pdostatement
PDO quote $string	la cadena de caracteres a entrecomillar
PDO quote $parameter_type	proporciona una declaración de tipo de datos para los controladores que tengan un estilo de entrecomillado alternativo
PDO string quote	devuelve un string entrecomillado teóricamente seguro para pasarlo a una sentencia sql
PDO string quote string $string int $parameter_type	entrecomilla una cadena de caracteres para usarla en una consulta
PDO bool roll Back	devuelve true en caso de éxito o false en caso de error
PDO bool roll Back	revierte una transacci&oacute;n
PDO bool set Attribute	devuelve true en caso de éxito o false en caso de error
PDO bool set Attribute int $attribute mixed $value	establece un atributo
PDOStatement bind Column $column	el número de primer índice 1 o el nombre de la columna del conjunto de resultados
PDOStatement bind Column $maxlen	la longitud máxima sugerida para la preasingnación
PDOStatement bind Column $driverdata	parámetro / s opcional / es para el controlador
PDOStatement bind Column $param	el nombre de la variable de php a la que vincular la columna
PDOStatement bind Column $type	el tipo de datos del parámetro especificado por las constantes pdo::param_*
PDOStatement bool bind Column	devuelve true en caso de éxito o false en caso de error
PDOStatement bool bind Column mixed $column mixed $param int $type int $maxlen mixed $driverdata	vincula una columna a una variable de php
PDOStatement bind Param $variable	nombre de la variable de php a vincular al parámetro de la sentencia sql
PDOStatement bind Param $parameter	el identificador del parámetro
PDOStatement bind Param $data_type	el tipo de datos explícito para el parámetro usando las constantes pdo::param_*
PDOStatement bind Param $length	la longitud del tipo de datos
PDOStatement bool bind Param	devuelve true en caso de éxito o false en caso de error
PDOStatement bool bind Param mixed $parameter mixed $variable int $data_type int $length mixed $driver_options	vincula un par&aacute;metro al nombre de variable especificado
PDOStatement bool close Cursor	devuelve true en caso de éxito o false en caso de error
PDOStatement bool close Cursor	cierra un cursor habilitando a la sentencia para que sea ejecutada otra vez
PDOStatement void debug Dump Params	vuelca un comando preparado de sql
PDOStatement fetch $fetch_style	controla cómo se devolverá la siguiente fila al llamador
PDOStatement fetch $offset	para un objeto pdostatement que represente un cursor desplazable para el cual el parámetro cursor_orientation está establecido a pdo::fetch_ori_abs este valor especifica el número absoluto de la fila del conjunto de resultados que se desea obtener
PDOStatement fetch $cursor_orientation	para un objeto pdostatement que represente un cursor desplazable este valor determina qué columna será devuelta por el llamador
PDOStatement mixed fetch	el valor de retorno de esta función en caso de éxito depende del tipo de obtención
PDOStatement mixed fetch int $fetch_style int $cursor_orientation int $cursor_offset	obtiene la siguiente fila de un conjunto de resultados
PDOStatement fetch Column $column_number	el número de índice basado en 0 de la columna que se quiere obtener desde la fila
PDOStatement mixed fetch Column	pdostatement::fetchcolumn() devuelve una única columna de la siguiente fila de un conjunto de resultados
PDOStatement mixed fetch Column int $column_number	devuelve una &uacute;nica columna de la siguiente fila de un conjunto de resultados
PDOStatement fetch Object $class_name	el nombre de la clase creada
PDOStatement fetch Object $ctor_args	los elementos de este array son pasados al constructor
PDOStatement mixed fetch Object	devuelve una instancia de la clase requerida con los nombres de sus propiedades que se corresponden a los nombre de las columnas o false en caso de error
PDOStatement mixed fetch Object string $class_name array $ctor_args	obtiene la siguiente fila y la devuelve como un objeto
PDOStatement mixed get Attribute	devuelve el valor del atributo
PDOStatement mixed get Attribute int $attribute	recupera un atributo de sentencia
PDOStatement bool next Rowset	devuelve true en caso de éxito o false en caso de error
PDOStatement bool next Rowset	avanza hasta el siguiente conjunto de filas de un gestor de sentencia multiconjunto de filas
PDOStatement int row Count	devuelve el número de filas
PDOStatement int row Count	devuelve el n&uacute;mero de filas afectadas por la &uacute;ltima sentencia sql
Phar string api Version	la cadena de la versión de la api como 1
Phar string api Version	devolver la versi&oacute;n de la api
Phar can Compress $type	se puede usar tanto phar::gz o phar::bz2 para comprobar si la compresión es posible con un algoritmo de compresión específico zlib o bzip2
Phar bool can Compress	true si la compresión / descompresión está disponible false si no
Phar bool can Compress int $type	devuelve si la extensi&oacute;n phar soporta la compresi&oacute;n usando zlib o bzip2
Phar bool can Write	true si el acceso a escritura esta habilitado false si está deshabilitado
Phar bool can Write	devolver si la extensi&oacute;n phar soporta la escritura y creaci&oacute;n de archivos phar
Phar convert To Data $compression	este parámetro debería ser phar::none para no comprimir el archivo completo phar::gz para la compresión basada en zlib y phar::bz2 para la compresión basada en bzip
Phar convert To Data $extension	este parámetro se utiliza para sobrescribir la extensión de fichero predeterminada de un archivo convertido
Phar convert To Data $format	este parámetro debería ser phar::tar o phar::zip
Phar PharData convert To Data	el método devuelve un objeto phardata en caso de éxito y lanza una excepción en caso de error
Phar PharData convert To Data int $format int $compression string $extension	convertir un archivo phar en un fichero tar o zip no ejecutable
Phar string create Default Stub	devuelve una cadena que contiene una rutina de interoperabildad personalizada stub que permite al archivo phar creado funcionar con o sin la extensón phar habilitada
Phar string create Default Stub string $indexfile string $webindexfile	crear una rutina de interoperabilidad espec&iacute;fica del formato de fichero phar
Phar bool get Modified	true si el phar ha sido modificado desde su apertura false si no
Phar bool get Modified	devolver si el phar fue modificado
Phar array get Signature	un array con las firmas del archivo abierto en la clave hash y md5 sha-1 sha-256 sha-512 o openssl en la clave hash_type
Phar array get Signature	devolver la firma md5 / sha1 / sha256 / sha512 / openssl de un archivo phar
Phar string get Stub	devuelve una cadena que contiene la rutina de interoperabilidad cargadora stub del archivo phar actual
Phar string get Stub	devolver el cargador de php o la rutina de interoperabilidad de un archivo phar
Phar array get Supported Signatures	devuelve un array que contiene cualquiera de las firmas md5 sha-1 sha-256 sha-512 o openssl
Phar array get Supported Signatures	devolver un array con los tipos de firmas soportados
Phar bool is Buffering	devuelve true si las operaciones de escritura están siendo almacenadas en buffer false si no
Phar bool is Buffering	determinar si las operaciones de escritura de phar est&aacute; siendo almacenadas en buffer o est&aacute;n siendo volcadas directamente al disco
Phar is Valid Phar Filename $filename	el nombre o la ruta completa al archivo phar aún no creado
Phar is Valid Phar Filename $executable	este parámetro determina si el nombre de fichero debería ser tratado como un archivo phar ejecutable o un archivo de datos no ejecutable
Phar bool is Valid Phar Filename	devuelve true si el nombre de fichero es válido false si no
Phar bool is Valid Phar Filename string $filename bool $executable	devolver si el nombre de fichero dado es un nombre de fichero phar v&aacute;lido
Phar bool is Writable	devuelve true si el archivo phar puede ser modificado
Phar bool is Writable	devolver si el archivo phar se puede modificar
Phar map Phar $alias	el alias que puede usarse en las url phar: / / para referirse a este archivo en vez de su ruta completa
Phar map Phar $dataoffset	variable sin uso está aquí por compatibilidad con los php_archive de pear
Phar bool map Phar	devuelve true en caso de éxito o false en caso de error
Phar bool map Phar string $alias int $dataoffset	leer el fichero un phar que est&aacute; en ejecuci&oacute;n y registrar su manifiesto
Phar mount $externalpath	una ruta o un url a un fichero o directorio externo a montar dentro del archivo phar
Phar mount $pharpath	la ruta interna a usar dentro del archivo phar como la ubicación de la ruta montada
Phar void mount string $pharpath string $externalpath	montar un fichero o ruta externos en una ubicaci&oacute;n virtual dentro de un archivo phar
Phar mung Server $munglist	un array que contiene como índices de cadenas request_uri php_self script_name y script_filename
Phar void mung Server array $munglist	definir una lista de hasta 4 variables $_server que deber&iacute;a ser modificadas para la ejecuci&oacute;n
Phar offset Exists $offset	el nombre del fichero ruta relativa a buscar en un phar
Phar bool offset Exists	devuelve true si el fichero existe dentro del phar o false si no
Phar bool offset Exists string $offset	determina si un fichero existe en un phar
Phar offset Get $offset	el nombre del fichero ruta relativa a buscar en un phar
Phar int offset Get	devuelve un objeto de la clase pharfileinfo que puede usarse para iterar sobre el contenido de un fichero o para recuperar información sobre el fichero actual
Phar int offset Get string $offset	obtener un objeto de la clase pharfileinfo para un fichero espec&iacute;fico
Phar void start Buffering	iniciar las operaciones de escritura en buffer de phar no modifica el objeto phar del disco
PharData add Empty Dir $dirname	el nombre de directorio vacío a crear en el archivo tar o zip
PharData bool add Empty Dir string $dirname	a&ntilde;adir un directorio vac&iacute;o al archivo tar / zip
Phar add File $file	la ruta completa o relativa del fichero del disco a ser añadido al archivo phar
Phar add File $localname	ruta con la que el fichero será almacenado en el archivo
Phar void add File string $file string $localname	a&ntilde;adir un fichero desde el sistema de ficheros al archivo phar
PharData add From String $localname	ruta con la que el fichero será almacenado en el archivo
PharData add From String $contents	el contenido del fichero a almacenar
PharData bool add From String string $localname string $contents	a&ntilde;adir un fichero desde el sistema de ficheros al archivo tar / zip
Phar build From Directory $base_dir	la ruta completa o relativa al directorio que contiene todos los ficheros a añadir al archivo
Phar build From Directory $regex	una expresión regular de pcre opcional que se usa para filtrar la lista de ficheros
Phar array build From Directory	phar::buildfromdirectory() devuelve un array asociativo que que mapea la ruta interna del fichero a la ruta completa del mismo en el sistema de ficheros
Phar array build From Directory string $base_dir string $regex	construir un archivo phar desde los ficheros de un directorio
PharData build From Iterator $iter	cualquier iterador que mapee de forma asociativa el fichero tar / zip a la ubiciación o que devuelva objetos de la clase splfileinfo
PharData build From Iterator $base_directory	para los iteradores que devuelven objetos de la clase splfileinfo es la porción de cada ruta completa de fichero a eliminar cuando de añada al archivo tar / zip
PharData array build From Iterator	phardata::buildfromiterator() devuelve un array asociativo que que mapea la ruta interna del fichero a la ruta completa del mismo en el sistema de ficheros
PharData array build From Iterator Iterator $iter string $base_directory	construir un archivo tar o zip desde un iterador
PharData compress $extension	por omisión la extensión es
PharData compress $compression	la compresión debe ser phar::gz o phar::bz2 para añadir compresión o phar::none para eliminarla
PharData object compress	devuelve un objeto de la clase phardata
PharData object compress int $compression string $extension	comprimir el archivo tar / zip entero usando la compresi&oacute;n gzip o bzip2
PharData compress Files $compression	la compresión debe ser phar::gz o phar::bz2 para añadir compresión o phar::none para eliminarla
PharData bool compress Files	devuelve true en caso de éxito o false en caso de error
PharData bool compress Files int $compression	comprime todos los ficheros del archivo tar / zip actual
PharData decompress $extension	para la descompresión las extensión de fichero predeterminada es
PharData object decompress	devuelve un objeto de la clase phardata
PharData object decompress string $extension	descomprimir un archivo phar entero
PharData delete $entry	la ruta dentro de un archivo para borrar el fichero
PharData bool delete	devuelve true en caso de éxito pero es mejor comprobar si lanza alguna excepción y asumir el éxito si no se lanza ninguna
PharData bool delete string $entry	borrar un fichero dentro de un archivo tar / zip
PharData extract To $files	el nombre de un fichero o directorio a extraer o un array de ficheros / directorios a extraer
PharData extract To $pathto	ruta donde extraer los ficheros dados por files
PharData extract To $overwrite	esteblecer a true para habilitar la sobrescritura de ficheros existentes
PharData bool extract To	devuelve true en caso de éxito pero es mejor comprobar si lanza alguna excepción y asumir el éxito si no se lanza ninguna
PharData bool extract To string $pathto string|array $files bool $overwrite	extraer el contenido de un archivo tar / zip a un directorio
PharData bool is Writable	devuelve true si el archivo tar / zip puede ser modificado
PharData bool is Writable	devolver si el archivo tar / zip se puede modificar
PharData offset Set $value	el contenido del fichero
PharData offset Set $offset	el nombre del fichero ruta relativa a modificar en un archivo tar o zip
PharData void offset Set string $offset string $value	establecer el contenido de un fichero dentro de un tar / zip a aquel de un fichero o cadena externos
PharData set Alias $alias	una cadena abreviada para referirse a este archivo en el acceso con la envoltura de flujo phar
PharData bool set Alias string $alias	funci&oacute;n sin sentido phar::setalias no es v&aacute;lido para phardata
PharData set Default Stub $index	la ruta relativa dentro del archivo phar a ejectuar si se accede desde la línea de comandos
PharData set Default Stub $webindex	la ruta relativa dentro del archivo phar a ejectuar si se accede desde un servidor web
PharData bool set Default Stub	devuelve true en caso de éxito o false en caso de error
PharData bool set Default Stub string $index string $webindex	funci&oacute;n sin sentido phar::setstub no es v&aacute;lido para phardata
PharData set Stub $stub	una cadena o un gestor de flujo abierto para usarlo como la rutina de interoperabilidad ejecutable de este archivo phar
PharData bool set Stub	devuelve true en caso de éxito o false en caso de error
PharData bool set Stub string $stub int $len	funci&oacute;n sin sentido phar::setstub no es v&aacute;lido para phardata
PharFileInfo bool compress	devuelve true en caso de éxito o false en caso de error
PharFileInfo bool compress int $compression	comprimir la entrada del phar actual con la compresi&oacute;n zlib o bzip2
PharFileInfo construct $entry	la url completa para recuperar un fichero
PharFileInfo string construct string $entry	construir un objeto de entrada phar
PharFileInfo int get Compressed Size	el tamaño en bytes del fichero dentro del archivo phar en disco
PharFileInfo int get Compressed Size	devolver el tama&ntilde;o real de un fichero con compresi&oacute;n dentro de un archivo phar
PharFileInfo int get CRC32	la suma de verificaicón crc32() de un fichero dentro de un archivo phar
PharFileInfo int get CRC32	devolver el c&oacute;dido crc32 o lanzar una exepci&oacute;n si la crc no ha sido verificado
PharFileInfo int get Phar Flags	las banderas del phar siempre 0 en la implementacion actual
PharFileInfo int get Phar Flags	devolver las banderas de una entrada de fichero
PharFileInfo bool has Metadata	devuelve false si no está establecida la metainformación o es null true si la metainformación no es null
PharFileInfo bool has Metadata	devolver la metainformaci&oacute;n de una entrada
PharFileInfo is Compressed $compression_type	una de las constantes phar::gz o phar::bz2 por defecto es cualquier compresión
PharFileInfo bool is Compressed	true si el fichero está comprimido dentro del archivo phar false si no
PharFileInfo bool is Compressed int $compression_type	devolver si la entrada est&aacute; comprimida
PharFileInfo bool is CRCChecked	true si el fichero tiene su crc verificada false si no
PharFileInfo bool is CRCChecked	devolver si la entrada de fichero tiene su crc verificada
PharFileInfo set Metadata $metadata	cualquier variable de php que contenga información a almacenar junto a un fichero
PharFileInfo void set Metadata mixed $metadata	establecer la metainformaci&oacute;n espec&iacute;fica de un fichero almacenda con un fichero
php_user_filter filter $consumed	consumed el cual siempre debe ser declarado por referencia debería ser incrementado por la longitud de la información que el filtro lee y altera
php_user_filter filter $closing	si el flujo está en el proceso de cierre y por lo tanto éste es el último pase a través de la cadena de filtros el parámetro closing será establecido a true
php_user_filter filter $in	in es un recurso que apunta a una cadena de recipientes que contiene uno o más objetos recipiente que contienen información que va a ser filtrada
php_user_filter filter $out	out es un recurso que apunta a una segunda cadena de recipientes dentro de la cual se deberían ubicar los recipientes modificados
php_user_filter int filter	el método filter() debe devolver uno de estos tres valores cuando se complete
php_user_filter int filter resource $in resource $out int $consumed bool $closing	llamado cuando se aplica un filtro
php_user_filter void on Close	llamado cuando se cierra el filtro
php_user_filter bool on Create	la implementación de este método debería devolver false en caso de error o true en caso de éxito
php_user_filter bool on Create	llamado cuando se crea el filtro
QuickHashIntHash add $value	el valor opcional de la entrada a añadir
QuickHashIntHash add $key	la clave de la entrada a añadir
QuickHashIntHash bool add	true cuando la entrasa fue añadida y false si la entrada no se añadió
QuickHashIntHash bool add int $key int $value	este m&eacute;todo a&ntilde;ade una nueva entrada al hash
QuickHashIntHash exists $key	la clave de la entrada para comprobar si existe en el hash
QuickHashIntHash bool exists	devuelve true cuando la entrada es encontrada o false si no se encuentra
QuickHashIntHash bool exists int $key	este m&eacute;todo comprueba si la clave es parte del hash
QuickHashIntHash load From String $options	las mismas opciones que toma el constructor de la clase; excepto que se ignora la opción size
QuickHashIntHash load From String $contents	el string que contiene un formato serializado del hash
QuickHashIntHash QuickHashIntHash load From String	devuelve un nuevo objeto quickhashinthash
QuickHashIntHash QuickHashIntHash load From String string $contents int $options	este m&eacute;todo de fabricaci&oacute;n crea un hash dedsde una cadena de caracteres
QuickHashIntHash save To File $filename	el nombre de fichero del fichero donde almacenar el hash
QuickHashIntHash void save To File string $filename	este m&eacute;todo almacena un hash en memoria en disco
QuickHashIntHash string save To String	este método devuelve un string que consitne un formato serializado del hash
QuickHashIntHash string save To String	este m&eacute;todo devuelve una versi&oacute;n serializada del hash
QuickHashIntHash set $value	el nuevo valor con el que establecer la entrada
QuickHashIntHash set $key	la clave de la entrada a añadir o actualizar
QuickHashIntHash bool set	2 si la entrada se encontró y se actualizó 1 si la entrada se añadió o 0 si ocurrión un error
QuickHashIntHash bool set int $key int $value	este m&eacute;todo actualiza una entrada del hash con un nuevo valor o a&ntilde;ade una nueva si la entrada no existe
QuickHashIntSet add $key	la clave de la entrada a añadir
QuickHashIntSet bool add	true cuando la entrasa fue añadida y false si la entrada no se añadió
QuickHashIntSet bool add int $key	este m&eacute;todo a&ntilde;ade una nuevas entrada al conjunto
QuickHashIntSet construct $options	las opciones que se pueden pasar son: quickhashintset::check_for_dupes que se asegura de que no se añadan entradas duplicadas al conjunto; quickhashintset::do_not_use_zend_alloc para no usar el gestor de memoria interna de php y tambíen una de las siguientes: quickhashintset::hasher_no_hash quickhashintset::hasher_jenkins1 o quickhashintset::hasher_jenkins2
QuickHashIntSet construct $size	la cantidad de listas de recipientes a configurar
QuickHashIntSet int construct	devuelve un nuevo objeto quickhashintset
QuickHashIntSet int construct int $size int $options	crea un nuevo objeto quickhashintset
QuickHashIntSet exists $key	la clave de la entrada para comprobar si existe en el conjunto
QuickHashIntSet bool exists	devuelve true si la entrada se encuentra en el conjutno o false si no
QuickHashIntSet bool exists int $key	este m&eacute;todo comprueba si una clave es parte de un conjunto
QuickHashIntSet load From File $options	las mismas opciones que toma el constructor de la clase; excepto que se ignora la opción size
QuickHashIntSet load From File $size	la cantidad de listas de recipientes a configurar
QuickHashIntSet load From File $filename	el nombre de fichero del fichero desde donde leer el conjunto
QuickHashIntSet QuickHashIntSet load From File	devuelve un nuevo objeto quickhashintset
QuickHashIntSet QuickHashIntSet load From File string $filename int $size int $options	este m&eacute;todo de fabricaci&oacute;n crear un conjunto desde un fichero
QuickHashIntSet save To File $filename	el nombre de fichero del fichero donde almacenar el hash
QuickHashIntSet void save To File string $filename	este m&eacute;todo almacena un conjunto que est&aacute; en la memoria en el disco
QuickHashIntSet string save To String	este método de vuelve un string que contiene un formato serializado del conjunto
QuickHashIntSet string save To String	este m&eacute;todo devuelve una versi&oacute;n serializada del conjunto
QuickHashIntStringHash add $value	el valor de la entrada a añadir
QuickHashIntStringHash add $key	la clave de la entrada a añadir
QuickHashIntStringHash bool add	true cuando la entrada fue añadida y false si la entrada no se pudo añadir
QuickHashIntStringHash bool add int $key string $value	este m&eacute;todo a&ntilde;ade una nueva entrada a un hash
QuickHashIntStringHash construct $options	las opciones que se pueden pasar son: quickhashintstringhash::check_for_dupes que se asegura de que no se añadan entradas duplicadas al conjunto; quickhashintstringhash::do_not_use_zend_alloc para no usar el gestor de memoria interna de php y tambíen una de las siguientes: quickhashintstringhash::hasher_no_hash quickhashintstringhash::hasher_jenkins1 o quickhashintstringhash::hasher_jenkins2
QuickHashIntStringHash construct $size	la cantidad de listas de recipientes a configurar
QuickHashIntStringHash int construct	devuelve un nuevo objeto quickhashintstringhash
QuickHashIntStringHash int construct int $size int $options	crea un nuevo objeto quickhashintstringhash
QuickHashIntStringHash delete $key	la clave de la entrada a eliminar
QuickHashIntStringHash bool delete	true cuando la entrada fue eliminada y false si la entrada no se pudo eliminar
QuickHashIntStringHash bool delete int $key	este m&eacute;todo elimina una entrada del hash
QuickHashIntStringHash exists $key	la clave de la entrada para comprobar si existe en el hash
QuickHashIntStringHash bool exists	devuelve true si la entrada se encuentra en el hash o false si no
QuickHashIntStringHash bool exists int $key	este m&eacute;todo comprueba si una clave es parte de un hash
QuickHashIntStringHash get $key	la clave de la entrada a añadir
QuickHashIntStringHash mixed get	el valor de la clave si ésta existe o null si la clave no es parte del hash
QuickHashIntStringHash mixed get int $key	este m&eacute;todo recupera un valor de un hash mediante su clave
QuickHashIntStringHash int get Size	el número de elementos del hash
QuickHashIntStringHash int get Size	devuelve el n&uacute;mero de elementos de un hash
QuickHashIntStringHash load From File $size	la cantidad de de listas de recipientes a configurar
QuickHashIntStringHash load From File $filename	el nombre de fichero del fichero desde donde leer el hash
QuickHashIntStringHash load From File $options	las mismas opciones que toma el constructor de la clase; excepto que se ignora la opción size
QuickHashIntStringHash QuickHashIntStringHash load From File	devuelve un nuevo objeto quickhashintstringhash
QuickHashIntStringHash QuickHashIntStringHash load From File string $filename int $size int $options	este m&eacute;todo de fabricaci&oacute;n crea un hash desde un fichero
QuickHashIntStringHash set $value	el nuevo valor de la entrada
QuickHashIntStringHash set $key	la clave de la entrada a añadir o actualizar
QuickHashIntStringHash int set	2 si la entrada se encontró y se actualizó 1 si la entrada se añadió o 0 si ocurrió un error
QuickHashIntStringHash int set int $key string $value	este m&eacute;todo actualiza una entrada de un hash con un nuevo valor o a&ntilde;ade una nueva si la entrada no existe
QuickHashIntStringHash update $value	el nuevo valor de la entrada
QuickHashIntStringHash update $key	la clave de la entrada a añadir
QuickHashIntStringHash bool update	true si la entrada se encontró y se actualizó y false si la entrada no formaba parte del hash
QuickHashIntStringHash bool update int $key string $value	este m&eacute;todo actualiza una entrada de un hash con un nuevo valor
QuickHashStringIntHash add $value	el valor de la entrada a añadir
QuickHashStringIntHash add $key	la clave de la entrada a añadir
QuickHashStringIntHash bool add	true cuando la entrada fue añadida y false si la entrada no se pudo añadir
QuickHashStringIntHash bool add string $key int $value	este m&eacute;todo a&ntilde;ade una nueva entrada a un hash
QuickHashStringIntHash construct $options	las opciones que se pueden pasar son: quickhashstringinthash::check_for_dupes que se asegura de que no se añadan entradas duplicadas al conjunto y quickhashstringinthash::do_not_use_zend_alloc para no usar el gestor de memoria interna de php
QuickHashStringIntHash construct $size	la cantidad de listas de recipientes a configurar
QuickHashStringIntHash int construct	devuelve un nuevo objeto quickhashstringinthash
QuickHashStringIntHash int construct int $size int $options	crea un nuevo objeto quickhashstringinthash
QuickHashStringIntHash exists $key	la clave de la entrada para comprobar si existe en el hash
QuickHashStringIntHash bool exists	devuelve true si la entrada se encuentra en el hash o false si no
QuickHashStringIntHash bool exists string $key	este m&eacute;todo comprueba si una clave es parte de un hash
QuickHashStringIntHash int get Size	el número de elementos del hash
QuickHashStringIntHash int get Size	devuelve el n&uacute;mero de elementos de un hash
QuickHashStringIntHash load From File $size	la cantidad de de listas de recipientes a configurar
QuickHashStringIntHash load From File $filename	el nombre de fichero del fichero desde donde leer el hash
QuickHashStringIntHash load From File $options	las mismas opciones que toma el constructor de la clase; excepto que se ignora la opción size
QuickHashStringIntHash QuickHashStringIntHash load From File	devuelve un nuevo objeto quickhashstringinthash
QuickHashStringIntHash QuickHashStringIntHash load From File string $filename int $size int $options	este m&eacute;todo de fabricaci&oacute;n crea un hash desde un fichero
QuickHashStringIntHash load From String $contents	la cadena de caracteres que contiene un formato serializado del hash
QuickHashStringIntHash load From String $options	las mismas opciones que toma el constructor de la clase; excepto que se ignora la opción size
QuickHashStringIntHash load From String $size	la cantidad de listas de recipientes a configurar
QuickHashStringIntHash QuickHashStringIntHash load From String	deveulve un nuevo objeto quickhashstringinthash
QuickHashStringIntHash QuickHashStringIntHash load From String string $contents int $size int $options	este m&eacute;todo de fabricaci&oacute;n crea un hash desde una cadena de caracteres
QuickHashStringIntHash string save To String	este método devuelve un formato serializado de un hash existente en el mismo formato que puede leer loadfromstring()
QuickHashStringIntHash string save To String	este m&eacute;todo devuelve una versi&oacute;n serializada del hash
QuickHashStringIntHash set $value	el nuevo valor de la entrada
QuickHashStringIntHash set $key	la clave de la entrada a añadir o actualizar
QuickHashStringIntHash int set	2 si la entrada se encontró y se actualizó 1 si la entrada se añadió o 0 si ocurrió un error
QuickHashStringIntHash int set string $key int $value	este m&eacute;todo actualiza una entrada de un hash con un nuevo valor o a&ntilde;ade una nueva si la entrada no existe
QuickHashStringIntHash update $value	el nuevo valor de la entrada
QuickHashStringIntHash update $key	la clave de la entrada a añadir
QuickHashStringIntHash bool update	true si la entrada se encontró y se actualizó y false si la entrada no formaba parte del hash
QuickHashStringIntHash bool update string $key int $value	este m&eacute;todo actualiza una entrada de un hash con un nuevo valor
RarArchive string to String	una representación textual de este objeto rararchive
RarArchive string to String	obtener representaci&oacute;n de texto
RarEntry string get Crc	devuelve el crc del archivo de entrada o false en caso de error
RarEntry string get Crc	obtener el crc de la entrada
RarEntry string get File Time	devuelve entrada última fecha de modificación como una cadena en formato yyyy-mm-dd hh:ii:ss o false en caso de error
RarEntry string get File Time	devolver entrada &uacute;ltima fecha de modificaci&oacute;n
RarEntry int get Host Os	devuelve el código del sistema operativo anfitrión o false en caso de error
RarEntry int get Host Os	obtener sistema operativo anfitri&oacute;n del archivo de entrada
RarEntry string get Name	devuelve el nombre de la entrada como una cadena o false en caso de error
RarEntry string get Name	obtener el nombre de la entrada
RarEntry int get Packed Size	devuelve el tamaño empaquetado o false en caso de error
RarEntry int get Packed Size	obtiene el tama&ntilde;o empaquetado de la entrada
RarEntry get Stream $password	la contraseña utilizada para cifrar esta entrada
RarEntry resource get Stream	el manejador de archivo o false en caso de error
RarEntry resource get Stream string $password	obtener manejador de archivo para entrada
RarEntry int get Unpacked Size	devuelve el tamaño descomprimido o false en caso de error
RarEntry int get Unpacked Size	obtener el tama&ntilde;o descomprimido de la entrada
RarEntry bool is Encrypted	devuelve true si la entrada actual se encuentra cifrada y false en caso contrario
RarEntry bool is Encrypted	comprobar si una entrada est&aacute; cifrada
RarEntry string to String	una representación textual de la entrada
RarEntry string to String	obtener texto representaci&oacute;n de entrada
RarException bool is Using Exceptions	devuelve true si las excepciones estan siendo utilizadas false en caso contrario
RarException bool is Using Exceptions	comprobar si el manejador de errores con excepciones est&aacute; en uso
RarException set Using Exceptions $using_exceptions	debe ser true para activar lanzamiento de excepciones false para descativarlo el valor por defecto
RarException void set Using Exceptions bool $using_exceptions	activar y desactivar el manejador de errores con excepciones
RecursiveArrayIterator RecursiveArrayIterator get Children	un iterador para la entrada actual si este es un array o un object
RecursiveArrayIterator RecursiveArrayIterator get Children	devuelve un iterador para la entrada actual si este es un array o un object
RecursiveArrayIterator bool has Children	devuelve true si la entrada actual es un array o un object en caso contrario false
RecursiveArrayIterator bool has Children	devuelve si la entrada actual es un array o un objeto
RecursiveCallbackFilterIterator bool has Children	retorna true si el elemento actual tiene hijos o false en caso contrario
RecursiveCallbackFilterIterator bool has Children	comprueba si los iteradores internos del elemento actual tiene hijos
RecursiveIterator RecursiveIterator get Children	un iterador de la entrada actual
RecursiveIterator RecursiveIterator get Children	devuelve un iterador para la entrada actual
RecursiveIteratorIterator void begin Iteration	inicio de la iteraci&oacute;n
RecursiveIteratorIterator RecursiveIterator call Get Children	a recursiveiterator()
RecursiveIteratorIterator RecursiveIterator call Get Children	obtener hijo
RecursiveIteratorIterator bool call Has Children	true si el elemento tiene hijos en caso contrario false
RecursiveIteratorIterator bool call Has Children	comprueba si tiene hijos
RecursiveIteratorIterator void end Children	final de los hijos
RecursiveIteratorIterator iterator get Inner Iterator	el sub iterador actual
RecursiveIteratorIterator iterator get Inner Iterator	obtener el iterador interno
RecursiveIteratorIterator void next Element	siguiente elemento
RecursiveIteratorIterator set Max Depth $max_depth	el máximo de profundidad permitida
RecursiveIteratorIterator void set Max Depth string $max_depth	establecer el m&aacute;ximo de profundidad
RecursiveRegexIterator bool has Children	devuelve true si un iterador puede ser obtenido de la entrada actual en caso contrario false
RecursiveRegexIterator bool has Children	retorna si un iterador puede ser obtenido de la entrada actual
RecursiveTreeIterator void begin Children	inicio de los hijos
RecursiveTreeIterator RecursiveIterator begin Iteration	un recursiveiterator
RecursiveTreeIterator RecursiveIterator begin Iteration	inicio de la iteraci&oacute;n
RecursiveTreeIterator RecursiveIterator call Get Children	un recursiveiterator
RecursiveTreeIterator RecursiveIterator call Get Children	obtener los hijos
RecursiveTreeIterator construct $it	el recursiveiterator o iteratoraggregate a iterar
RecursiveTreeIterator construct $mode	flags que afectan el comportamiento interno de recursiveiteratoriterator
RecursiveTreeIterator construct $caching_it_flags	flags que afectan el comportamiento interno de recursivecachingiterator
RecursiveTreeIterator construct $flags	se pueden proporcionar flags que afectarán el comportamiento de algunos métodos
RecursiveTreeIterator RecursiveIterator|IteratorAggregate construct RecursiveIterator|IteratorAggregate $it int $flags int $cit_flags int $mode	construye un nuevo recursivetreeiterator
RecursiveTreeIterator void end Children	final de los hijos
RecursiveTreeIterator string get Entry	devuelve la parte de el árbol de el elemento actual
RecursiveTreeIterator string get Entry	obtener la entrada actual
RecursiveTreeIterator string get Prefix	devuelve el string a colocar antes del elemento actual
RecursiveTreeIterator string get Prefix	obtener el prefijo
RecursiveTreeIterator string key	devuelve la clave actual con prefijo y postfijo
RecursiveTreeIterator string key	obtiene la clave de el elemento actual
RecursiveTreeIterator void rewind	rebobina el iterador
RecursiveTreeIterator set Prefix Part $part	una de las constantes recursivetreeiterator::prefix_*
RecursiveTreeIterator set Prefix Part $value	el valor a ser asignado a la parte del prefijo especificado en part
RecursiveTreeIterator void set Prefix Part int $part string $value	establece la parte de el prefijo
Reflection get Modifier Names $modifiers	modificadores que se desean obtener a partir de un valor numérico
Reflection array get Modifier Names	un array con nombres de modificadores
Reflection array get Modifier Names int $modifiers	obtener nombres de modificadores
ReflectionClass export $argument	la reflexión a exportar
ReflectionClass export $return	configurarlo a true devolverá la exportación a diferencia de emitirla
ReflectionClass string export	si el parámetro return es seteado a true la exportación se devolverá como un string de lo contrario se retornará null
ReflectionClass string export mixed $argument bool $return	exporta una clase
ReflectionClass get Constant $name	nombre de la constante
ReflectionClass mixed get Constant	valor de la constante
ReflectionClass mixed get Constant string $name	obtener una constante definida
ReflectionClass array get Constants	un array de constantes
ReflectionClass array get Constants	obtener constantes
ReflectionClass ReflectionMethod get Constructor	un objeto reflectionmethod que refleja el constructor de la clase o null si la clase no tiene constructor
ReflectionClass ReflectionMethod get Constructor	obtiene el constructor de una clase
ReflectionClass array get Default Properties	un array de propiedades predeterminadas donde la clave es el nombre de la propiedad y el valor corresponde con el valor de la propiedad o null si la propiedad no tuviera ningún valor predeterminado
ReflectionClass array get Default Properties	obtener propiedades predeterminadas
ReflectionClass string get Doc Comment	los comentarios de documentación o false si no existiera
ReflectionClass string get Doc Comment	obtener los comentarios de documentaci&oacute;n
ReflectionClass string get Extension Name	el nombre de la extensión que definió la clase o false para clases definidas por el usuario
ReflectionClass string get Extension Name	obtiene el nombre de la extensi&oacute;n que defini&oacute; una clase
ReflectionClass array get Interface Names	array numérico con el nombre de las interfaces en el valor
ReflectionClass array get Interface Names	obtiene nombres de las interfaces
ReflectionClass array get Interfaces	array asociativo de interfaces donde los nombres se usan como claves y los objetos reflectionclass como valor
ReflectionClass array get Interfaces	obtiene las interfaces
ReflectionClass int get Modifiers	devuelve una máscara de bits de constantes modificadoras
ReflectionClass int get Modifiers	obtiene modificadores
ReflectionClass string get Name	nombre de la clase
ReflectionClass string get Name	obtiene el nombre de la clase
ReflectionClass get Properties $filter	filtro opcional para filtrar el tipo de propiedades deseadas
ReflectionClass array get Properties	un array de objetos reflectionproperty
ReflectionClass array get Properties int $filter	obtiene las propiedades
ReflectionClass get Property $name	el nombre de la propiedad
ReflectionClass ReflectionProperty get Property	un objeto reflectionproperty
ReflectionClass ReflectionProperty get Property string $name	obtiene un objeto reflectionproperty para una propiedad de una clase
ReflectionClass string get Short Name	el nombre abreviado de la clase
ReflectionClass string get Short Name	obtiene el nombre abreviado
ReflectionClass array get Static Properties	las propiedades estáticas en un array
ReflectionClass array get Static Properties	obtiene las propiedades est&aacute;ticas
ReflectionClass has Constant $name	nombre de la constante que se desea comprobar
ReflectionClass bool has Constant	true si la constante está definida y en cualquier otro caso false
ReflectionClass bool has Constant string $name	comprueba si una constante est&aacute; o no definida
ReflectionClass has Method $name	nombre del método que se desea comprobar
ReflectionClass bool has Method	true si el método está definido y en cualquier otro caso false
ReflectionClass bool has Method string $name	comprueba si un m&eacute;todo est&aacute; o no definido
ReflectionClass has Property $name	nombre de la propiedad que se desea comprobar
ReflectionClass bool has Property	true si la propiedad está definida y en cualquier otro caso false
ReflectionClass bool has Property string $name	comprueba si una propiedad est&aacute; o no definida
ReflectionClass bool is Abstract	devuelve true en caso de éxito o false en caso de error
ReflectionClass bool is Abstract	comprueba si la clase es abstracta
ReflectionClass bool is Final	devuelve true en caso de éxito o false en caso de error
ReflectionClass bool is Final	comprueba si la clase es o no final
ReflectionClass is Instance $object	objeto a comparar
ReflectionClass bool is Instance	devuelve true en caso de éxito o false en caso de error
ReflectionClass bool is Instance object $object	comprueba si un objeto es instancia de la clase
ReflectionClass bool is Internal	devuelve true en caso de éxito o false en caso de error
ReflectionClass bool is Internal	comprueba si una clase est&aacute; definida internamente por una extensi&oacute;n o por el n&uacute;cleo
ReflectionClass bool is Iterateable	devuelve true en caso de éxito o false en caso de error
ReflectionClass bool is Iterateable	comprueba si es iterable
ReflectionClass bool is User Defined	devuelve true en caso de éxito o false en caso de error
ReflectionClass bool is User Defined	comprueba si es una clase definida por el usuario
ReflectionClass new Instance $args	acepta un número variable de argumentos que se pasarán al constructor de la clase
ReflectionClass object new Instance mixed $args	crea una nueva instancia de clase a partir de la lista de par&aacute;metros dados
ReflectionClass new Instance Args $args	los parámetros a pasar al constructor de la clase como array
ReflectionClass object new Instance Args	devuelve una nueva instancia de la clase
ReflectionClass object new Instance Args array $args	crea una nueva instancia de clase a partir de los argumentos dados
ReflectionClass object new Instance Without Constructor	crea una nueva clase sin invocar al constructor
ReflectionClass set Static Property Value $name	nombre de la propiedad
ReflectionClass set Static Property Value $value	nuevo valor de la propiedad
ReflectionClass void set Static Property Value string $name string $value	establece el valor de una propiedad est&aacute;tica
ReflectionClass string to String	representación en forma de string de esta instancia de reflectionclass
ReflectionClass string to String	devuelve la representaci&oacute;n en forma de string del objeto reflectionclass
ReflectionExtension void clone	clonar
ReflectionExtension construct $name	nombre de la extensión
ReflectionExtension string construct	object de la clase reflectionextension
ReflectionExtension string construct string $name	constructor de los objetos reflectionextension
ReflectionExtension export $name	la reflexión a exportar
ReflectionExtension export $return	configurarlo a true devolverá la exportación a diferencia de emitirla
ReflectionExtension string export	si el parámetro return es seteado a true la exportación se devolverá como un string de lo contrario se retornará null
ReflectionExtension string export string $name string $return	exportar
ReflectionExtension array get Class Names	un array con los nombres de las clases tal como estuvieran definidos en la extensión
ReflectionExtension array get Class Names	obtiene nombres de las clases
ReflectionExtension array get Dependencies	un array asociativo con los nombres de las dependencias como clave y required obligatorio optional opcional o conflicts conflictivo como valor
ReflectionExtension array get Dependencies	obtiene las dependencias
ReflectionExtension array get Functions	array asociativo de objetos reflectionfunction
ReflectionExtension array get Functions	obtiene las funciones de una extensi&oacute;n
ReflectionExtension string get Version	versión de la extensión
ReflectionExtension string get Version	obtiene la versi&oacute;n de una extensi&oacute;n
ReflectionExtension string to String	devuelve la extensión en forma de string de la misma forma que haría reflectionextension::export()
ReflectionExtension string to String	convertir a string
ReflectionFunction construct $name	nombre de la función que se desea reflexionar o una función anónima
ReflectionFunction mixed construct mixed $name	contruye un objeto de tipo reflectionfunction
ReflectionFunction export $name	la reflexión a exportar
ReflectionFunction export $return	configurarlo a true devolverá la exportación a diferencia de emitirla
ReflectionFunction string export	si el parámetro return es seteado a true la exportación se devolverá como un string de lo contrario se retornará null
ReflectionFunction string export string $name string $return	exporta una funci&oacute;n
ReflectionFunction invoke $args	lista de argumentos que se pasan a la función
ReflectionFunction mixed invoke	devuelve el resultado de llamar a la función invocada
ReflectionFunction mixed invoke mixed $parameter	invoca una funci&oacute;n
ReflectionFunction invoke Args $args	array con la lista de argumentos que se pasan a la función similar a cómo funciona call_user_func_array()
ReflectionFunction mixed invoke Args	devuelve el resultado de la función invocada
ReflectionFunction mixed invoke Args array $args	invoca a la funci&oacute;n con argumentos
ReflectionFunction bool is Disabled	true si está desactivadao o false en caso contrario
ReflectionFunction bool is Disabled	comprueba si una funci&oacute;n est&aacute; desactivada
ReflectionFunctionAbstract void clone	clona una funci&oacute;n
ReflectionFunctionAbstract string get Doc Comment	si existieran comentarios de documentación
ReflectionFunctionAbstract string get Doc Comment	obtiene comentarios de documentaci&oacute;n
ReflectionFunctionAbstract ReflectionExtension get Extension	información de la extensión en forma de objeto reflectionextension
ReflectionFunctionAbstract ReflectionExtension get Extension	obtiene informaci&oacute;n sobre la extensi&oacute;n
ReflectionFunctionAbstract string get Extension Name	nombre de la extensión
ReflectionFunctionAbstract string get Extension Name	obtiene el nombre de la extensi&oacute;n
ReflectionFunctionAbstract string get Name	nombre de la función
ReflectionFunctionAbstract string get Name	obtiene el nombre de la funci&oacute;n
ReflectionFunctionAbstract string get Namespace Name	nombre del espacio de nombres
ReflectionFunctionAbstract string get Namespace Name	obtiene el nombre del espacio de nombres
ReflectionFunctionAbstract int get Number Of Parameters	número de parámetros
ReflectionFunctionAbstract int get Number Of Parameters	obtiene el n&uacute;mero total de par&aacute;metros
ReflectionFunctionAbstract int get Number Of Required Parameters	número de parámetros obligatorios
ReflectionFunctionAbstract int get Number Of Required Parameters	obtiene el n&uacute;mero de par&aacute;metros obligatorios
ReflectionFunctionAbstract array get Parameters	parámetros en forma de objetos reflectionparameter
ReflectionFunctionAbstract array get Parameters	obtiene los par&aacute;metros
ReflectionFunctionAbstract int get Start Line	número de la línea de inicio
ReflectionFunctionAbstract int get Start Line	obtiene el n&uacute;mero de la l&iacute;nea de inicio
ReflectionFunctionAbstract array get Static Variables	array de variables estáticas
ReflectionFunctionAbstract array get Static Variables	obtiene las variable est&aacute;ticas
ReflectionFunctionAbstract bool in Namespace	true si está en un espacio de nombres o si no false
ReflectionFunctionAbstract bool in Namespace	comprueba si pertenece a un espacio de nombres
ReflectionFunctionAbstract bool is Deprecated	true si está obsoleta o si no false
ReflectionFunctionAbstract bool is Deprecated	comprueba si est&aacute; obsoleta
ReflectionFunctionAbstract bool is Internal	true si es interna o si no false
ReflectionFunctionAbstract bool is Internal	comprueba si la funci&oacute;n es interna
ReflectionFunctionAbstract bool is User Defined	true si está definida por el usuario y en cualquier otro caso false
ReflectionFunctionAbstract bool is User Defined	comprueba si es una funci&oacute;n definida por un usuario
ReflectionFunctionAbstract bool is Variadic	devuelve true si la función es varíadica false en caso contrario
ReflectionFunctionAbstract bool is Variadic	comprueba si la funci&oacute;n es var&iacute;adica
ReflectionFunctionAbstract bool returns Reference	true si la función devuelve una referencia o si no false
ReflectionFunctionAbstract bool returns Reference	comprueba si devuelve una referencia
ReflectionMethod construct $name	nombre del método
ReflectionMethod construct $class_method	nombre de la clase y nombre del método delimitados por ::
ReflectionMethod construct $class	nombre de clase u objeto instancia de la clase a la que pertenece el método
ReflectionMethod mixed construct mixed $class string $name	construye un objeto reflectionmethod
ReflectionMethod ReflectionClass get Declaring Class	objeto reflectionclass de la clase a la que pertenece el método reflexionado
ReflectionMethod ReflectionClass get Declaring Class	obtiene la clase en la que se ha declarado el m&eacute;todo
ReflectionMethod int get Modifiers	representación numérica de los modificadores enumerados a continuación
ReflectionMethod int get Modifiers	obtiene los modificadores del m&eacute;todo
ReflectionMethod ReflectionMethod get Prototype	devuelve una instancia de tipo reflectionmethod del prototipo del método
ReflectionMethod ReflectionMethod get Prototype	obtiene el prototipo del m&eacute;todo si lo hubiera
ReflectionMethod invoke $object	objeto al que pertenece el método invocado
ReflectionMethod invoke $parameter	cero o más parámetros para pasar a este método
ReflectionMethod mixed invoke	devuelve el resultado del método
ReflectionMethod mixed invoke object $object mixed $parameter	invoca un m&eacute;todo
ReflectionMethod invoke Args $args	argumentos que se pasan a la función en un array
ReflectionMethod invoke Args $object	objeto en el que se invoca al método
ReflectionMethod mixed invoke Args	devuelve el resultado del método
ReflectionMethod mixed invoke Args object $object array $args	invoca un m&eacute;todo con argumentos
ReflectionMethod bool is Abstract	true si el método es abstracto o si no false
ReflectionMethod bool is Abstract	comprueba si el m&eacute;todo es abstracto
ReflectionMethod bool is Constructor	true si el método es un constructor o si no false
ReflectionMethod bool is Constructor	comprueba si el m&eacute;todo es un constructor
ReflectionMethod bool is Private	true si el método es privado o si no false
ReflectionMethod bool is Private	comprueba si el m&eacute;todo es privado
ReflectionMethod bool is Protected	true si el método está protegido o si no false
ReflectionMethod bool is Protected	comprueba si el m&eacute;todo est&aacute; protegido
ReflectionMethod bool is Public	true si el método es público o si no false
ReflectionMethod bool is Public	comprueba si el m&eacute;todo es p&uacute;blico
ReflectionMethod bool is Static	true si el método es estático o si no false
ReflectionMethod bool is Static	comprueba si el m&eacute;todo es est&aacute;tico
ReflectionMethod set Accessible $accessible	true para permitir que sea accesible o false
ReflectionMethod void set Accessible bool $accessible	asigna la accesibilidad del m&eacute;todo
ReflectionMethod string to String	representación en forma de texto de esta instancia de reflectionmethod
ReflectionMethod string to String	devuelve la representaci&oacute;n en forma de texto de este objeto
ReflectionObject construct $argument	una instancia del objeto
ReflectionObject object construct object $argument	construye un reflectionobject
ReflectionParameter bool allows Null	true si null es permitido en caso contrario false
ReflectionParameter bool allows Null	comprueba si null es permitido
ReflectionParameter construct $function	la función a reflejar parámetros
ReflectionParameter construct $parameter	el parámetro
ReflectionParameter string construct string $function string $parameter	construct
ReflectionParameter ReflectionClass get Class	un objeto reflectionclass
ReflectionParameter ReflectionClass get Class	obtener la clase con declaraciones de tipos
ReflectionParameter mixed get Default Value	el valor de los parámetros por omisión
ReflectionParameter mixed get Default Value	obtiene el valor por omisi&oacute;n del par&aacute;metro
ReflectionParameter string get Name	el nombre del parámetro reflejado
ReflectionParameter string get Name	obtener el nombre del par&aacute;metro
ReflectionParameter int get Position	la posición de el parámetro de izquierda a derecha comenzando en la posición #0
ReflectionParameter int get Position	obtiene la posici&oacute;n del par&aacute;metro
ReflectionParameter bool is Array	true si un array es esperado en caso contrario false
ReflectionParameter bool is Array	comprueba si el par&aacute;metro espera un array
ReflectionParameter bool is Default Value Available	true si el valor por omisión está disponible en caso contrario false
ReflectionParameter bool is Default Value Available	comprueba si el valor por omisi&oacute;n est&aacute; disponible
ReflectionParameter bool is Variadic	devuelve true si el parámetro es varíadico o false en caso contrario
ReflectionParameter bool is Variadic	comprueba si el par&aacute;metro es var&iacute;adico
ReflectionProperty export $argument	la reflexión a exportar
ReflectionProperty export $name	nombre de la propiedad
ReflectionProperty export $return	configurarlo a true devolverá la exportación a diferencia de emitirla
ReflectionProperty string export mixed $class string $name bool $return	exportar
ReflectionProperty string get Name	nombre de la propiedad
ReflectionProperty string get Name	obtiene el nombre de la propiedad
ReflectionProperty get Value $object	si la propiedad no fuera estática se deberá adjuntar un objeto del que obtener la propiedad
ReflectionProperty mixed get Value	valor que contiene la propiedad
ReflectionProperty mixed get Value object $object	obtiene el valor
ReflectionProperty bool is Default	true si la propiedad se declaró en tiempo de compilación o false si se creó en tiempo de ejecución
ReflectionProperty bool is Default	comprueba si la propiedad es predeterminado
ReflectionProperty set Accessible $accessible	true para permitir su acceso o false
ReflectionProperty void set Accessible bool $accessible	hace accesible una propiedad
ReflectionProperty set Value $object	si la propiedad no fuera estática se deberá proporcionar un objeto sobre el que se cambiará la propiedad
ReflectionProperty set Value $value	el nuevo valor
ReflectionProperty void set Value object $object mixed $value	establece el valor de la propiedad
RegexIterator int get Flags	devuelve las flags establecidas
RegexIterator int get Flags	obtener flags
RegexIterator int get Mode	devuelve los modos de operación
RegexIterator int get Mode	devuelve el modo de operaci&oacute;n
RegexIterator int get Preg Flags	devuelve un bitmask de las flags de expresión regular
RegexIterator int get Preg Flags	devuelve las flags de expresi&oacute;n regular
RegexIterator set Flags $flags	las flags a ser establecidas the flags to set un bitmask de constantes de la clase
RegexIterator void set Flags int $flags	establece las flags
RegexIterator set Mode $mode	el modo de operación
RegexIterator void set Mode int $mode	establece el modo de operaci&oacute;n
RegexIterator set Preg Flags $preg_flags	las flags de expresión regular
RegexIterator void set Preg Flags int $preg_flags	establece las flags de expresi&oacute;n regular
RRDCreator add Archive $description	definición del archivo - rra
RRDCreator void add Archive string $description	a&ntilde;ade rra - archivo de valores de datos para cada fuente de datos
RRDCreator add Data Source $description	definición de origen de datos - ds
RRDCreator void add Data Source string $description	a&ntilde;ade definici&oacute;n de origen de datos para la base de datos rrd
RRDCreator construct $startTime	tiempo para el primer valor en la base de datos rrd
RRDCreator construct $path	ruta de acceso para el archivo de base de datos recién creada rrd
RRDCreator construct $intstep	base de intervalo en segundos con que los datos se introducen en la base de datos rrd
RRDCreator string construct string $path string $startTime int $step	crea una nueva instancia rrdcreator
RRDGraph construct $path	ruta completa de la imagen recién creada
RRDGraph string construct string $path	crea una nueva instancia rrdgraph
RRDGraph array save Verbose	se devuelve un array con información detallada acerca de la imagen generada opcionalmente con datos de imagen false si se produce un error
RRDGraph array save Verbose	guarda la consulta de la bases de datos rrd en la imagen y devuelve la informaci&oacute;n detallada acerca de gr&aacute;fico generado
RRDUpdater construct $path	ruta de archivo del sistema para el archivo de base de datos rrd que se actualizará
RRDUpdater string construct string $path	crea una nueva instancia rrdupdater
RRDUpdater update $time	valor del tiempo para la actualización del rrd con unos datos particulares
RRDUpdater update $values	los datos de actualización
RRDUpdater bool update	devuelve true en caso de éxito o false en caso de error
RRDUpdater bool update array $values string $time	actualiza el archivo de base de datos rrd
SAMConnection bool commit	este método devuelve false en caso de error
SAMConnection bool commit	hace el commit consolida la unidad de trabajo actual
SAMConnection bool connect	este método devuelve false en caso de error
SAMConnection bool connect string $protocol array $properties	establece una conexi&oacute;n a un servidor de mensajer&iacute;a
SAMConnection bool is Connected	este método devuelve true si el objeto samconnection se ha conectado con éxito a un servidor de mensajería o false en caso contrario
SAMConnection bool is Connected	consulta si se ha establecido conexi&oacute;n a un servidor de mensajer&iacute;a
SAMConnection remove $target	la identidad de la cola de la cual se va a eliminar el mensaje
SAMConnection remove $properties	un array asociativo opcional de propiedades que describen otros parámetros para controlar la operación de eliminado
SAMConnection SAMMessage remove	este método devuelve false en caso de error
SAMConnection SAMMessage remove string $target array $properties	elimina un mensaje de una cola
SAMConnection bool rollback	este método devuelve false en caso de error
SAMConnection bool rollback	cancela revierte una unidad de trabajo pendiente de ser consolidada
SAMConnection subscribe $targetTopic	la identidad del tema topic: / / topicname al que nos queremos suscribir
SAMConnection string subscribe	un identificador de suscripción que puede ser utilizado en una llamada de recepción posterior a modo de selector para obtener cualquier información del tema o false en caso de error
SAMConnection string subscribe string $targetTopic	crea una suscripci&oacute;n a un tema espec&iacute;fico
SDO_DAS_XML_Document SDO_DataObject get Root Data Object	devuelve el sdo_dataobject raíz
SDO_DAS_XML_Document SDO_DataObject get Root Data Object	devuelve el sdo_dataobject ra&iacute;z
SDO_DAS_XML_Document set XMLDeclaration $xmlDeclatation	un valor booleano para establecer la declaración xml
SDO_DAS_XML_Document void set XMLDeclaration bool $xmlDeclatation	establece la declaraci&oacute;n de xml
SDO_DAS_XML_Document set XMLVersion $xmlVersion	la cadena de versión de xml
SDO_DAS_XML_Document void set XMLVersion string $xmlVersion	establece la cadena dada como versi&oacute;n de xml
SDO_DAS_XML add Types $xsd_file	ruta al fichero de esquema xsd
SDO_DAS_XML void add Types string $xsd_file	para cargar un segundo o subsiguiente fichero de esquema en un objteo sdo_das_xml
SDO_DAS_XML create $xsd_file	ruta al fichero de esquema xsd
SDO_DAS_XML SDO_DAS_XML create	devuelve un objeto sdo_das_xml en caso de éxito o de otro modo lanza una excepción tal como se describe abajo
SDO_DAS_XML SDO_DAS_XML create mixed $xsd_file string $key	para crar un objeto sdo_das_xml para un fichero de esquema dado
SDO_DAS_XML create Data Object $namespace_uri	el uri del espacion de nombres del nombre del tipo
SDO_DAS_XML create Data Object $type_name	el nombre del tipo
SDO_DAS_XML SDO_DataObject create Data Object	devuelve un objeto sdo_dataobject en caso de éxito
SDO_DAS_XML SDO_DataObject create Data Object string $namespace_uri string $type_name	crea un objeto sdo_dataobject dados un uri de espacio de nombres y un nombre de tipo
SDO_DAS_XML create Document $document_element_name	el nombre del elemento documento
SDO_DAS_XML create Document $document_element_namespace_URI	la parte del espacio de nombre del nombre del elemento documento
SDO_DAS_XML SDO_DAS_XML_Document create Document	devuelve un objeto sdo_xml_das_document en caso de éxito
SDO_DAS_XML SDO_DAS_XML_Document create Document string $document_element_name	crea un objeto documento xml desde cero sin la necesidad de cargar un documento desde un fichero o una cadena
SDO_DAS_XML load String $xml_string	xml string
SDO_DAS_XML SDO_DAS_XML_Document load String	devuelve un sdo_das_xml_document en caso de éxito o lanza una excepción como se describe abajo
SDO_DAS_XML SDO_DAS_XML_Document load String string $xml_string	devuelve un sdo_das_xml_document para una cadena de instancia xml dada
SDO_DAS_XML save File $indent	argumento opcional para especificar que el xml será formateado
SDO_DAS_XML save File $xml_file	el fichero xml
SDO_DAS_XML save File $xdoc	el objeto sdo_das_xml_document
SDO_DAS_XML void save File SDO_XMLDocument $xdoc string $xml_file int $indent	guarda el objeto sdo_das_xml_document en un fichero
SDO_DAS_XML save String $indent	argumento opcional para especificar que el xml será formateado
SDO_DAS_XML save String $xdoc	el objeto sdo_das_xml_document
SDO_DAS_XML string save String	una cadena xml
SDO_DAS_XML string save String SDO_XMLDocument $xdoc int $indent	guarda el objeto the sdo_das_xml_document en una cadena
SeekableIterator seek $position	la posición para mover el apuntador interno
SeekableIterator void seek int $position	mueve la posici&oacute;n del apuntador interno
Serializable string serialize	devuelve la representación de un objeto o null
Serializable string serialize	representaci&oacute;n en formato cadena de un objeto
Serializable unserialize $serialized	la representación en formato string de un objeto
Serializable void unserialize string $serialized	construye el objeto
SessionHandler bool close	el valor devuelto normalmente true en caso de éxito false en caso de error
SessionHandler bool close	cerrar la sesi&oacute;n
SessionHandler string create sid	un id de sesión válido para el manejador de sesión predeterminado
SessionHandler string create sid	devuelve un nuevo id de sesi&oacute;n
SessionHandler destroy $session_id	el id de sesión a ser destruido
SessionHandler bool destroy	el valor devuelto normalmente true en caso de éxito false en caso de error
SessionHandler bool destroy string $session_id	destruir una sesi&oacute;n
SessionHandler gc $maxlifetime	las sesiones que no se han actualizado desde los últimos maxlifetime segundos serán eliminadas
SessionHandler bool gc	el valor devuelto normalmente true en caso de éxito false en caso de error
SessionHandler bool gc int $maxlifetime	eliminar las sesiones antiguas
SessionHandler open $session_name	el nombre de la sesión
SessionHandler open $save_path	la ruta donde almacenar / recuperar la sesión
SessionHandler bool open	el valor devuelto normalmente true en caso de éxito false en caso de error
SessionHandler bool open string $save_path string $session_name	inicializar una sesi&oacute;n
SessionHandlerInterface bool close	el valor devuelto normalmente true en caso de éxito false en caso de error
SessionHandlerInterface bool close	cerrar la sesi&oacute;n
SessionHandlerInterface gc $maxlifetime	las sesiones que no han sido actualizadas desde los últimos maxlifetime segundos serán eliminadas
SessionHandlerInterface bool gc	el valor devuelto normalmente true en caso de éxito false en caso de error
SessionHandlerInterface bool gc int $maxlifetime	limpieza de sesiones antiguas
SessionHandlerInterface read $session_id	el id de sesión
SessionHandlerInterface string read	devuelve una cadena codificada de la información leída
SessionHandlerInterface string read string $session_id	leer informaci&oacute;n de sesi&oacute;n
SessionHandlerInterface write $session_data	la información de sesión codificada
SessionHandlerInterface write $session_id	el id de sesión
SessionHandlerInterface bool write	el valor devuelto normalmente true en caso de éxito false en caso de error
SessionHandlerInterface bool write string $session_id string $session_data	escribir informaci&oacute;n de sesi&oacute;n
SimpleXMLElement add Attribute $namespace	si se especifica indica el espacio de nombres al que pertenece el atributo
SimpleXMLElement add Attribute $value	el valor del atributo
SimpleXMLElement add Attribute $name	el nombre del atributo a añadir
SimpleXMLElement void add Attribute string $name string $value string $namespace	a&ntilde;ade un atributo al elemento simplexml
SimpleXMLElement add Child $value	si se especifica valor del elemento hijo
SimpleXMLElement add Child $name	nombre del elemento hijo a añadir
SimpleXMLElement add Child $namespace	si se especifica el namespace al que pertenece el elemento hijo
SimpleXMLElement SimpleXMLElement add Child	el método addchild retorna un objeto simplexmlelement representando el hijo añadido al nodo xml
SimpleXMLElement SimpleXMLElement add Child string $name string $value string $namespace	a&ntilde;ade un elemento hijo al nodo xml
SimpleXMLElement attributes $is_prefix	por defecto false
SimpleXMLElement attributes $ns	un namespace opcional para los atributos recuperados
SimpleXMLElement SimpleXMLElement attributes	devuelve un objeto simplexmlelement que puede ser iterado a través de los atributos en la etiqueta
SimpleXMLElement SimpleXMLElement attributes string $ns bool $is_prefix	identifica el atributo de un elemento
SimpleXMLElement children $ns	un nombre de espacio xml
SimpleXMLElement children $is_prefix	si is_prefix es true ns será considerado como un prefijo
SimpleXMLElement SimpleXMLElement children	devuelve un elemento simplexmlelement tanto si el nodo tiene hijos o no
SimpleXMLElement SimpleXMLElement children string $ns bool $is_prefix	encuentra los hijos del nodo dado
SimpleXMLElement int count	devuelve el número de elementos de un elemento
SimpleXMLElement int count	cuenta los hijos de un elemento
SimpleXMLElement get Namespaces $recursive	si se especifica retorna todos los namespaces usados en los nodos padre e hijos
SimpleXMLElement array get Namespaces	el método getnamespaces retorna un array de nombres de namespaces con sus uris asociadas
SimpleXMLElement array get Namespaces bool $recursive	retorna los namespaces usados en el documento
SimpleXMLElement register XPath Namespace $prefix	el prefijo del namespace a usar en la petición xpath para el namespace dado en ns
SimpleXMLElement register XPath Namespace $ns	el namespace a usar para la petición xpath
SimpleXMLElement bool register XPath Namespace	devuelve true en caso de éxito o false en caso de error
SimpleXMLElement bool register XPath Namespace string $prefix string $ns	crea un contexto prefijo / ns para la siguiente petici&oacute;n xpath
SimpleXMLElement xpath $path	una ruta xpath
SimpleXMLElement array xpath	retorna un array de objetos simplexmlelement o false en caso de error
SimpleXMLElement array xpath string $path	ejecuta una petici&oacute;n xpath sobre los datos xml
SimpleXMLIterator mixed current	devuelve el elemento actual como un objeto simplexmliterator o null en caso de error
SimpleXMLIterator mixed current	devuelve el elemento actual
SimpleXMLIterator SimpleXMLIterator get Children	devuelve un objeto simplexmliterator que contiene los sub elementos de el elemento actual
SimpleXMLIterator SimpleXMLIterator get Children	devuelve los sub elementos de el elemento actual
SimpleXMLIterator mixed key	devuelve el nombre de la etiqueta xml del elemento referenciado por el objeto simplexmliterator actual o false
SimpleXMLIterator mixed key	devuelve la clave actual
SimpleXMLIterator void next	mueve al siguiente elemento
SNMP bool close	devuelve true en caso de éxito o false en caso de error
SNMP bool close	cerrar sesi&oacute;n snmp
SoapClient mixed call string $function_name string $arguments	llama a una funci&oacute;n de soap obsoleto
SoapClient string get Last Request	la última petición soap como cadena xml
SoapClient string get Last Request	devuelve la &uacute;ltima petici&oacute;n soap
SoapClient string get Last Request Headers	la última petición de los encabezados soap
SoapClient string get Last Request Headers	devuelve los encabezados soap de la &uacute;ltima petici&oacute;n
SoapClient string get Last Response	la última respuesta soap como cadena xml
SoapClient string get Last Response	devuelve la &uacute;ltima respuesta soap
SoapClient string get Last Response Headers	la última respuesta de los encabezados soap
SoapClient string get Last Response Headers	devuelve los encabezados soap de la &uacute;ltima respuesta
SoapClient array get Types	un array de los tipos soap detallando todas las estructuras y los tipos
SoapClient array get Types	devuelve una lista de los tipos soap
SoapClient set Cookie $name	el nombre de la cookie
SoapClient set Cookie $value	el valor de la cookie
SoapClient void set Cookie string $name string $value	el prop&oacute;sito de __setcookie
SoapClient set Location $new_location	la nueva url de conexión
SoapClient string set Location	la anterior url de conexión
SoapClient string set Location string $new_location	define la localizaci&oacute;n del servicio web a utilizar
SoapClient set Soap Headers $soapheaders	encabezados a definir
SoapClient bool set Soap Headers	devuelve true en caso de éxito o false en caso de error
SoapClient bool set Soap Headers mixed $soapheaders	define los encabezados soap para las subsiguentes llamadas
SoapClient soap Call $arguments	un array de argumentos a pasar a la función
SoapClient soap Call $input_headers	un array de encabezados a ser enviados con la petición soap
SoapClient soap Call $options	un array asociativo de opciones a pasar al cliente
SoapClient soap Call $function_name	nombre de la función soap a llamar
SoapClient soap Call $output_headers	si se proporciona este array se llenará con los encabezados de la respuesta soap
SoapClient mixed soap Call	las funciones soap quizá devuelven uno o múltiples valores
SoapClient mixed soap Call string $function_name array $arguments array $options mixed $input_headers array $output_headers	llama a una funci&oacute;n soap
SoapHeader string construct string $namespace string $name mixed $data bool $mustunderstand string $actor	constructor de soapheader
SoapHeader Soap Header $mustUnderstand	valor del atributo mustunderstand del elemento encabezado soap
SoapHeader Soap Header $name	el nombre del objecto soapheader
SoapHeader Soap Header $namespace	el nombre de espacios del elemento encabezado soap
SoapHeader Soap Header $actor	valor del atributo actor del elemento encabezado soap
SoapHeader Soap Header $data	el contenido del encabezado soap
SoapHeader string Soap Header string $namespace string $name mixed $data bool $mustunderstand string $actor	constructor de soapheader
SoapParam Soap Param $name	nombre del parámetro
SoapParam Soap Param $data	los datos a pasar o devolver
SoapParam mixed Soap Param mixed $data string $name	constructor de soapparam
SoapServer add Function $functions	para exportar una función pasa el nombre de la función en su parámetro como cadena
SoapServer void add Function mixed $functions	a&ntilde;ade una o m&aacute;s funciones al controlador de peticiones soap
SoapServer mixed construct mixed $wsdl array $options	constructor de soapserver
SoapServer fault $details	más información acerca del fallo
SoapServer fault $string	una breve descripción del fallo
SoapServer fault $actor	una cadena identificando el actor qeu causó el fallo
SoapServer fault $name	nombre del fallo
SoapServer fault $code	el código de error a devolver
SoapServer void fault string $code string $string string $actor string $details string $name	soapserver indica que ocurri&oacute; un fallo
SoapServer array get Functions	un array de las funciones definidas
SoapServer array get Functions	devuelve una lista de las funciones definidas
SoapServer set Persistence $mode	una de las constantes soap_persistence_xxx
SoapServer void set Persistence int $mode	establece el modo de persistencia de soapserver
SoapServer Soap Server $wsdl	para usar el soapserver en modo wsdl pasa la uri del fichero wsdl
SoapServer Soap Server $options	permite definir la versión soap por defecto soap_version la codificación de caracteres interna encoding y la uri que actúa actor
SoapServer mixed Soap Server mixed $wsdl array $options	constructor de soapserver
SoapVar string construct string $data string $encoding string $type_name string $type_namespace string $node_name string $node_namespace	constructor de soapvar
SoapVar Soap Var $encoding	id de codificación una de las constantes xsd_
SoapVar Soap Var $type_name	tipo de nombre
SoapVar Soap Var $node_namespace	espacio de nombres del nodo xml
SoapVar Soap Var $node_name	nombre del nodo xml
SoapVar Soap Var $data	datos a pasar o devolver
SoapVar Soap Var $type_namespace	tipo de espacio de nombres
SoapVar mixed Soap Var mixed $data string $encoding string $type_name string $type_namespace string $node_name string $node_namespace	constructor de soapvar
SolrClient add Documents $docs	una array que contiene la colección de instancias de solrinputdocument
SolrClient add Documents $overwrite	si sobrescribir el documento existente o no
SolrClient add Documents $commitWithin	número de milisegundos dentro de los que autoconsignar este documento
SolrClient void add Documents array $docs bool $overwrite int $commitWithin	a&ntilde;ade una colecci&oacute;n de instancias de solrinputdocument al &iacute;ndice
SolrClient commit $waitSearcher	bloqueo hasta que un nuevo buscador sea abierto y registrado como el buscador de consultas principal haciendo los cambios visibles
SolrClient commit $softCommit	refresca la vista del índice para un mayor rendimiento pero si sin garantizar on-disk
SolrClient commit $expungeDeletes	mezcla segmentos con eliminaciones para desechar
SolrClient SolrUpdateResponse commit	devuelve un objeto solrupdateresponse en caso de éxito o lanza una excepción en caso de error
SolrClient SolrUpdateResponse commit bool $softCommit bool $waitSearcher bool $expungeDeletes	finaliza todas las a&ntilde;adiduras / eliminaciones hechas al &iacute;ndice
SolrClient array construct array $clientOptions	constructor para el objeto solrclient
SolrClient delete By Id $id	el valor del campo uniquekey declarado en el esquema
SolrClient SolrUpdateResponse delete By Id	devuelve un objeto solrupdateresponse en caso de éxito y lanza una excepción en caso de error
SolrClient SolrUpdateResponse delete By Id string $id	eliminar por id
SolrClient delete By Queries $queries	la matriz de consultas
SolrClient SolrUpdateResponse delete By Queries	devuelve un objeto solrupdateresponse en caso de éxito y lanza una solrclientexception en caso de error
SolrClient SolrUpdateResponse delete By Queries array $queries	elimina todos los documentos que coincidan con cualquiera de las consultas
SolrClient delete By Query $query	la consulta
SolrClient SolrUpdateResponse delete By Query	devuelve un objeto solrupdateresponse en caso de éxito y lanza una excepción en caso de error
SolrClient SolrUpdateResponse delete By Query string $query	elimina todos los documentos que coincidan con la consulta dada
SolrClient get By Id $id	document id
SolrClient SolrQueryResponse get By Id	solrqueryresponse
SolrClient SolrQueryResponse get By Id string $id	get document by id
SolrClient array get Options	devuelve una matriz que contiene todas las opciones para el objeto solrclient establecido internamente
SolrClient array get Options	devuelve las opciones de cliente establecidas internamente
SolrClient optimize $maxSegments	optimiza como máximo este número de segmentos
SolrClient optimize $softCommit	refresca la vista del índice para un mayor rendimiento pero si sin garantizar on-disk
SolrClient optimize $waitSearcher	bloquo hasta que un nuevo buscador sea abierto y registrado como el buscador de consultas principal haciendo los cambios visibles
SolrClient SolrUpdateResponse optimize	devuelve un objeto solrupdateresponse en caso de éxito y lanza una excepción en caso de error
SolrClient SolrUpdateResponse optimize int $maxSegments bool $softCommit bool $waitSearcher	defragmenta el &iacute;ndice
SolrClient request $raw_request	una cadena xml con la solicitud sin formato al servidor
SolrClient SolrUpdateResponse request	devuelve un objeto solrupdateresponse en caso de éxito
SolrClient SolrUpdateResponse request string $raw_request	env&iacute;a una petici&oacute;n de actualizaci&oacute;n sin formato
SolrClient SolrUpdateResponse rollback	devuelve un objeto solrupdateresponse en caso de éxito o lanza una excepción solrclientexception en caso de fallo
SolrClient SolrUpdateResponse rollback	revierte todos los a&ntilde;adidos / eliminados hechos en el &iacute;ndice desde el &uacute;ltimo env&iacute;o
SolrClient set Response Writer $responseWriter	uno de los siguientes autores: json phps xml
SolrClient void set Response Writer string $responseWriter	establece el autor de la respuesta usado para preparar la respuesta de solr
SolrClient set Servlet $value	el nuevo valor para el servlet
SolrClient set Servlet $type	uno de los siguientes tipos: - solrclient::search_servlet_type - solrclient::update_servlet_type - solrclient::threads_servlet_type - solrclient::ping_servlet_type - solrclient::terms_servlet_type
SolrClient bool set Servlet	devuelve true en caso de éxito o false en caso de error
SolrClient bool set Servlet int $type string $value	cambia el servlet especificado a un nuevo valor
SolrClient void system	obtener informaci&oacute;n del servidor solr
SolrClient void threads	verifica el estado de los hilos
SolrClientException array get Internal Info	devuelve una matriz que contiene información interna de donde el error fue lanzado
SolrClientException array get Internal Info	devuelve informaci&oacute;n interna de donde se lanz&oacute; la excepci&oacute;n
SolrCollapseFunction string get Hint	returns collapse hint
SolrCollapseFunction string get Max	returns max parameter
SolrCollapseFunction string get Min	returns min parameter
SolrDisMaxQuery set Query Alt $q	query string
SolrDisMaxQuery SolrDisMaxQuery set Query Alt	solrdismaxquery
SolrDisMaxQuery SolrDisMaxQuery set Query Alt string $q	set query alternate q
SolrDisMaxQuery set Tie Breaker $tieBreaker	the tie parameter specifies a float value which should be something much less than 1 to use as tiebreaker in dismax queries
SolrDisMaxQuery SolrDisMaxQuery set Tie Breaker	solrdismaxquery
SolrDisMaxQuery SolrDisMaxQuery set Tie Breaker string $tieBreaker	sets tie breaker parameter tie parameter
SolrDisMaxQuery set User Fields $fields	fields names separated by space this parameter supports wildcards
SolrDisMaxQuery SolrDisMaxQuery set User Fields	solrdismaxquery
SolrDisMaxQuery SolrDisMaxQuery set User Fields string $fields	sets user fields parameter uf
SolrDocument add Field $fieldName	el nombre del campo
SolrDocument add Field $fieldValue	el valor del campo
SolrDocument bool add Field	devuelve true en caso de éxito o false en caso de error
SolrDocument bool add Field string $fieldName string $fieldValue	a&ntilde;ade un campo al documento
SolrDocument bool clear	devuelve true en caso de éxito o false en caso de error
SolrDocument bool clear	borra todos los campos del documento
SolrDocument void clone	crea una copia de un objeto solrdocument
SolrDocument - construct	constructor
SolrDocument SolrDocumentField current	devuelve el campo
SolrDocument SolrDocumentField current	recupera el campo actual
SolrDocument delete Field $fieldName	nombre del campo
SolrDocument bool delete Field	devuelve true en caso de éxito o false en caso de error
SolrDocument bool delete Field string $fieldName	elimina un campo del documento
SolrDocument get $fieldName	el nombre del campo
SolrDocument SolrDocumentField get	devuelve una instancia de solrdocumentfield
SolrDocument SolrDocumentField get string $fieldName	acceder al campo como una propiedad
SolrDocument get Field $fieldName	nombre del campo
SolrDocument SolrDocumentField get Field	devuelve un objeto solrdocumentfield en caso de éxito y false en caso de fallo
SolrDocument SolrDocumentField get Field string $fieldName	recupera un campo seg&uacute;n su nombre
SolrDocument int get Field Count	devuelve un entero en caso de éxito y false en caso de fallo
SolrDocument int get Field Count	devuelve el n&uacute;mero de campos de este documento
SolrDocument array get Field Names	devuelve una matriz que contiene los nombres de los campos de este documento
SolrDocument array get Field Names	devuelve una matriz con los nombres de campos del documento
SolrDocument SolrInputDocument get Input Document	devuelve un objeto solrinputdocument en caso de éxito y null en caso de fallo
SolrDocument SolrInputDocument get Input Document	devuelve un solrinputdocument equivalente al objeto
SolrDocument isset $fieldName	nombre del campo
SolrDocument bool isset	devuelve true en caso de éxito o false en caso de error
SolrDocument bool isset string $fieldName	comprueba si existe un campo
SolrDocument string key	devuelve la clave actual
SolrDocument string key	recupera la clave actual
SolrDocument merge $sourceDoc	el documento fuente
SolrDocument merge $overwrite	si esto es true los campos con el mismo nombre que los del documento destino serán sobrescritos
SolrDocument bool merge	devuelve true en caso de éxito o false en caso de error
SolrDocument bool merge SolrDocument $sourceDoc bool $overwrite	fusiona la fuente con el objeto solrdocument actual
SolrDocument void next	mueve el puntero interno al siguiente campo
SolrDocument offset Get $fieldName	el nombre del campo
SolrDocument SolrDocumentField offset Get	devuelve un objeto solrdocumentfield
SolrDocument SolrDocumentField offset Get string $fieldName	recupera un campo
SolrDocument offset Set $fieldName	el nombre del campo
SolrDocument offset Set $fieldValue	el valor del campo
SolrDocument void offset Set string $fieldName string $fieldValue	a&ntilde;ade un campo al documento
SolrDocument offset Unset $fieldName	el nombre del campo
SolrDocument void offset Unset string $fieldName	elimina un campo
SolrDocument bool reset	devuelve true en caso de éxito o false en caso de error
SolrDocument bool reset	este es un alias de solrdocument::clear()
SolrDocument void rewind	reinicia el puntero interno al principio
SolrDocument sort $sortDirection	la dirección de ordenación
SolrDocument sort $sortOrderBy	el criterio de ordenación
SolrDocument bool sort	devuelve true en caso de éxito o false en caso de error
SolrDocument bool sort int $sortOrderBy int $sortDirection	ordena los campos del documento
SolrDocument array to Array	devuelve una matriz como representación de un documento
SolrDocument array to Array	devuelve una matriz como representaci&oacute;n de un documento
SolrDocument unserialize $serialized	una representación xml del documento
SolrDocument void unserialize string $serialized	serializaci&oacute;n personalizada de objetos solrdocument
SolrDocument unset $fieldName	el nombre del campo
SolrDocument bool unset	devuelve true en caso de éxito o false en caso de error
SolrDocument bool unset string $fieldName	elimina un campo del documento
SolrDocument bool valid	devuelve true en caso de éxito y false si la posición actual ya no es válida
SolrDocument bool valid	comprueba si la posici&oacute;n actual del puntero interno es a&uacute;n v&aacute;lida
SolrException array get Internal Info	devuelve una matriz que contiene información interna de donde el error fue lanzado
SolrException array get Internal Info	devuelve informaci&oacute;n interna de donde se lanz&oacute; la excepci&oacute;n
SolrInputDocument add Field $fieldBoostValue	el boost de tiempo del índice
SolrInputDocument add Field $fieldName	el nombre del campo
SolrInputDocument add Field $fieldValue	el valor del campo
SolrInputDocument bool add Field	devuelve true en caso de éxito o false en caso de error
SolrInputDocument bool add Field string $fieldName string $fieldValue float $fieldBoostValue	a&ntilde;ade un campo al documento
SolrInputDocument delete Field $fieldName	el nombre del campo
SolrInputDocument bool delete Field	devuelve true en caso de éxito o false en caso de error
SolrInputDocument bool delete Field string $fieldName	elimina un campo del documento
SolrInputDocument get Field $fieldName	el nombre del campo
SolrInputDocument SolrDocumentField get Field	devuelve un objeto solrdocumentfield en caso de éxito y false en caso de error
SolrInputDocument SolrDocumentField get Field string $fieldName	recupera un campo por su nombre
SolrInputDocument int get Field Count	devuelve un entero en caso de éxito o false en caso de error
SolrInputDocument int get Field Count	devuelve el n&uacute;mero de campos del documento
SolrInputDocument array get Field Names	devuelve una matriz en caso de éxito y false en caso de fallo
SolrInputDocument array get Field Names	devuelve una matriz que contiene todos los campos del documento
SolrInputDocument merge $sourceDoc	el documento fuente
SolrInputDocument merge $overwrite	si esto es true reemplazará los campos coincidentes del documento destino
SolrInputDocument bool merge	devuelve true en caso de éxito o false en caso de error
SolrInputDocument bool merge SolrInputDocument $sourceDoc bool $overwrite	fusiona un documento con otro
SolrInputDocument bool reset	devuelve true en caso de éxito o false en caso de error
SolrInputDocument bool reset	este es un alias de solrinputdocument::clear
SolrInputDocument set Field Boost $fieldBoostValue	el valor boost de tiempo del índice
SolrInputDocument set Field Boost $fieldName	el nombre del campo
SolrInputDocument bool set Field Boost string $fieldName float $fieldBoostValue	establece el valor boost de tiempo del &iacute;ndice de un campo
SolrInputDocument sort $sortDirection	la dirección de ordenación
SolrInputDocument sort $sortOrderBy	el criterio de ordenación
SolrInputDocument bool sort	devuelve true en caso de éxito o false en caso de error
SolrInputDocument bool sort int $sortOrderBy int $sortDirection	ordena los campos dentro de un documento
SolrInputDocument array to Array	devuelve una matriz que contiene los campos
SolrInputDocument array to Array	devuelve una matriz como representaci&oacute;n del documento de entrada
SolrObject - construct	crea un objeto solr
SolrObject void destruct	destructor
SolrObject offset Exists $property_name	el nombre de la propiedad
SolrObject bool offset Exists	devuelve true en caso de éxito o false en caso de error
SolrObject bool offset Exists string $property_name	comprueba si la propiedad existe
SolrParams add $value	el valor del parámetro
SolrParams add $name	el nombre del parámetro
SolrParams SolrParams add	devuelve una instancia de solrparams en caso de éxito
SolrParams SolrParams add string $name string $value	esto es un alias de solrparams::addparam
SolrParams add Param $name	nombre del parámetro
SolrParams add Param $value	alor del parámetro
SolrParams SolrParams add Param	devuelve un objeto solrparam an caso de éxito y false en caso de error
SolrParams SolrParams add Param string $name string $value	a&ntilde;ade un par&aacute;metro al objeto
SolrParams get Param $param_name	el nombre del parámetro
SolrParams mixed get Param	devuelve una cadena o una matriz dependiendo del tipo del parámetro
SolrParams mixed get Param string $param_name	devuelve el valor de un par&aacute;metro
SolrParams array get Params	devuelve una matriz de parámetros url no codificados
SolrParams array get Params	devuelve una matriz de par&aacute;metros url no codificados
SolrParams string serialize	usado para serialización personalizada
SolrParams string serialize	usado para serializaci&oacute;n personalizada
SolrParams set $name	el nombre del parámetro
SolrParams set $value	el valor del parámatro
SolrParams void set string $name string $value	un alas de solrparams::setparam
SolrParams to String $url_encode	si devolver o no valores de url codificados
SolrParams string to String	devuelve una cadena en caso de éxito y false en caso de fallo
SolrParams string to String bool $url_encode	devuelve todos los par&aacute;metros de los pares nombre-valor del objeto
SolrParams unserialize $serialized	la representación serializada del objeto
SolrParams void unserialize string $serialized	usado para serializaci&oacute;n personalizada
SolrPingResponse string get Response	devuelve una cadena vacía
SolrPingResponse string get Response	devuelve la respuesta del servidor
SolrQuery add Facet Date Other $field_override	el nombre del campo para la sobrescritura
SolrQuery add Facet Date Other $value	el valor a usar
SolrQuery SolrQuery add Facet Date Other	devuelve el objeto solrquery actual si se usa el valor de retorno
SolrQuery SolrQuery add Facet Date Other string $value string $field_override	a&ntilde;ade otro par&aacute;metro facet
SolrQuery add Facet Field $field	el nombre del campo
SolrQuery SolrQuery add Facet Field	devuelve el objeto solrquery actual si se usa el valor de retorno
SolrQuery SolrQuery add Facet Field string $field	a&ntilde;ade otro campo a la faceta
SolrQuery add Facet Query $facetQuery	la consulta de faceta
SolrQuery SolrQuery add Facet Query	devuelve el objeto solrquery actual si se usa el valor de retorno
SolrQuery SolrQuery add Facet Query string $facetQuery	a&ntilde;ade una consulta de faceta
SolrQuery add Field $field	el nombre del campo
SolrQuery SolrQuery add Field	devuelve el objeto solrquery actual
SolrQuery SolrQuery add Field string $field	especifica qu&eacute; campos devolver en el resultado
SolrQuery add Filter Query $fq	la consulta de filtro
SolrQuery SolrQuery add Filter Query	devuelve el objeto solrquery actual
SolrQuery SolrQuery add Filter Query string $fq	especifica una consulta de filtro
SolrQuery add Highlight Field $field	nombre del campo
SolrQuery SolrQuery add Highlight Field	devuelve el objeto solrquery actual si se usa el valor de retorno
SolrQuery SolrQuery add Highlight Field string $field	mapea a hl
SolrQuery add Mlt Field $field	el nombre del campo
SolrQuery SolrQuery add Mlt Field	devuelve el objeto solrquery actual si se usa el valor de retorno
SolrQuery SolrQuery add Mlt Field string $field	establece un campo para usarlo para similitud
SolrQuery add Sort Field $order	la dirección de ordenación
SolrQuery add Sort Field $field	el nombre del campo
SolrQuery SolrQuery add Sort Field	devuelve el objeto solrquery actual
SolrQuery SolrQuery add Sort Field string $field int $order	usado para controlar c&oacute;mo deber&iacute;an ordenarse los resultados
SolrQuery add Stats Facet $field	el nombre del campo
SolrQuery SolrQuery add Stats Facet	devuelve el objeto solrquery actual si se usa el valor de retorno
SolrQuery SolrQuery add Stats Facet string $field	recupera una devoluci&oacute;n de subresultados para valores dentro de la faceta dada
SolrQuery add Stats Field $field	el nombre del campo
SolrQuery SolrQuery add Stats Field	devuelve el objeto solrquery actual si se usa el valor de retorno
SolrQuery SolrQuery add Stats Field string $field	mapea al par&aacute;metro stats
SolrQuery get Facet Date End $field_override	el nombre del campo
SolrQuery string get Facet Date End	devuelve una cadena en caso de éxito y null si no se estableció
SolrQuery string get Facet Date End string $field_override	devuelve el valor del par&aacute;metro facet
SolrQuery array get Facet Date Fields	devuelve todos los campos de facet
SolrQuery array get Facet Date Fields	devuelve todos los campos de facet
SolrQuery get Facet Date Gap $field_override	el nombre del campo
SolrQuery string get Facet Date Gap	devuelve una cadena en caso de éxito y null si no se estabelció
SolrQuery string get Facet Date Gap string $field_override	devuelve el valor del par&aacute;metro facet
SolrQuery get Facet Date Hard End $field_override	el nombre del campo
SolrQuery string get Facet Date Hard End	devuelve una cadena en caso de éxito y null si no se estableció
SolrQuery string get Facet Date Hard End string $field_override	devuelve el valor del par&aacute;metro facet
SolrQuery get Facet Date Other $field_override	el nombre del campo
SolrQuery array get Facet Date Other	devuelve una cadena en caso de éxito y null si no se estableció
SolrQuery array get Facet Date Other string $field_override	devuelve el valor del par&aacute;metro facet
SolrQuery get Facet Date Start $field_override	el nombre del campo
SolrQuery string get Facet Date Start	devuelve una cadena en caso de éxito y null si no se estableció
SolrQuery string get Facet Date Start string $field_override	devuelve el l&iacute;mite inferior del primer rango de datos para todas las facetas de fecha de este campo
SolrQuery array get Facet Fields	devuelve una matriz de todos los campos y null si no se estableció nada
SolrQuery array get Facet Fields	devuelve todos los campos facet
SolrQuery get Facet Limit $field_override	el nombre del campo a sobrescribir
SolrQuery int get Facet Limit	devuelve un entero en caso de éxito y null si no se estableció
SolrQuery int get Facet Limit string $field_override	devuelve el n&uacute;mero m&aacute;ximo de restricciones que deber&iacute;an ser devueltas por los campos facet
SolrQuery get Facet Missing $field_override	el nombre del campo
SolrQuery bool get Facet Missing	devuelve un booleano en caso de éxito y null si no se estableció
SolrQuery bool get Facet Missing string $field_override	devuelve el estado acutual del par&aacute;metro facet
SolrQuery get Facet Offset $field_override	el nombre del campo a sobrescribir
SolrQuery int get Facet Offset	devuelve un entero en caso de éxito y null si no se estableció
SolrQuery int get Facet Offset string $field_override	devuelve un &iacute;ndice dentro de la lista de restricciones para ser usado en paginaci&oacute;n
SolrQuery get Facet Prefix $field_override	el nombre del campo
SolrQuery string get Facet Prefix	devuelve una cadena en caso de éxito y null si no se estableció
SolrQuery string get Facet Prefix string $field_override	devuelve el prefijo de faceta
SolrQuery array get Facet Queries	devuelve una matriz en caso de éxito y null si no se estableció
SolrQuery array get Facet Queries	devuelve todas las consultas de facetas
SolrQuery get Facet Sort $field_override	el nombre del campo
SolrQuery int get Facet Sort	devuelve un entero solrquery::facet_sort_index o solrquery::facet_sort_count en caso de éxito o null si no se estableció
SolrQuery int get Facet Sort string $field_override	devuelve el tipo de ordenaci&oacute;n de la faceta
SolrQuery array get Fields	devuelve una matriz en caso de éxito y null si no se estableció
SolrQuery array get Fields	devuelve la lista de campos que ser&aacute;n devueltos en la respuesta
SolrQuery array get Group Functions	returns group functions group
SolrQuery bool get Highlight	devuelve un booleano en caso de éxito y null si no se estableció
SolrQuery bool get Highlight	devuelve el estado del par&aacute;mtero hl
SolrQuery array get Highlight Fields	devuelve una matriz en caso de éxito y null si no se estableció
SolrQuery array get Highlight Fields	devuelve todos los campos que solr deber&iacute;a generar para remarcaci&oacute;n de trozos
SolrQuery get Highlight Formatter $field_override	el nombre del campo
SolrQuery string get Highlight Formatter	devuelve una cadena en caso de éxito y null si no se estableció
SolrQuery string get Highlight Formatter string $field_override	devuelve el formateador de la salida remarcada
SolrQuery get Highlight Fragmenter $field_override	el nombre del campo
SolrQuery string get Highlight Fragmenter	devuelve una cadena en caso de éxito y null si no se estableció
SolrQuery string get Highlight Fragmenter string $field_override	devuelve el generador de trozos de texto para el texto remarcado
SolrQuery bool get Highlight Highlight Multi Term	devuelve un booleano en caso de éxito y null si no se estableció
SolrQuery bool get Highlight Highlight Multi Term	devuelve si habilitar o no la remarcaci&oacute;n de consultas range / wildcard / fuzzy / prefix
SolrQuery get Highlight Max Alternate Field Length $field_override	el nombre del campo
SolrQuery int get Highlight Max Alternate Field Length	devuelve un entero en caso de éxito y null si no se estableció
SolrQuery int get Highlight Max Alternate Field Length string $field_override	devuelve el n&uacute;mero m&aacute;ximo de caracteres del campo a devolver
SolrQuery get Highlight Merge Contiguous $field_override	el nombre del campo
SolrQuery bool get Highlight Merge Contiguous	devuelve un booleano en caso de éxito y null si no se estableció
SolrQuery bool get Highlight Merge Contiguous string $field_override	devuelve si colapsar o no fragmentos contiguos en un &uacute;nico fragmento
SolrQuery float get Highlight Regex Slop	devuelve un doble en caso de éxito y null si no se estableció
SolrQuery float get Highlight Regex Slop	devuelve el factor de desviaci&oacute;n del tama&ntilde;o de fragmento ideal
SolrQuery bool get Highlight Require Field Match	devuelve un booleano en caso de éxito y null si no se estableció
SolrQuery bool get Highlight Require Field Match	devuelve si un campo ser&aacute; remarcado solamente si la consulta coincide con este campo en particular
SolrQuery get Highlight Snippets $field_override	el nombre del campo
SolrQuery int get Highlight Snippets	devuelve un entero en caso de éxito y null si no se estableció
SolrQuery int get Highlight Snippets string $field_override	devuelve el n&uacute;mero m&aacute;ximo de trozos remarcados a generar por campo
SolrQuery bool get Highlight Use Phrase Highlighter	devuelve un booleano en caso de éxito y null si no se estableció
SolrQuery bool get Highlight Use Phrase Highlighter	devuelve el estado del par&aacute;metro hl
SolrQuery bool get Mlt Boost	devuelve un booleano en caso de éxito y null si no se estableció
SolrQuery bool get Mlt Boost	devuelve si la consulta ser&aacute; impulsada boost o no mediante la relevancia del t&eacute;rmido de inter&eacute;s
SolrQuery array get Mlt Fields	devuelve una matriz en caso de éxito y null si no se estableció
SolrQuery array get Mlt Fields	devuelve todos los campos a usar para similitud
SolrQuery int get Mlt Max Num Query Terms	devuelve un entero en caso de éxito y null si no se estableció
SolrQuery int get Mlt Max Num Query Terms	devuelve el n&uacute;mero m&aacute;ximo de t&eacute;rminos de consultas que ser&aacute;n incluidos en cualquier consulta generada
SolrQuery int get Mlt Max Num Tokens	devuelve un entero en caso de éxito y null si no se estableció
SolrQuery int get Mlt Max Num Tokens	devuelve el n&uacute;mero m&aacute;ximo de tokens a analizar en cada campo del documento que no est&eacute; almacenado con soporte termvector
SolrQuery int get Mlt Min Doc Frequency	devuelve un entero en caso de éxito y null si no se estableció
SolrQuery int get Mlt Min Doc Frequency	devuelve el umbral de frecuencia en el que las palabras que no ocurran en por lo menos tantos documentos como este ser&aacute;n ignoradas
SolrQuery int get Mlt Min Word Length	devuelve un entero en caso de éxito y null si no se estableció
SolrQuery int get Mlt Min Word Length	devuelve la longitud m&aacute;xima de palabra bajo la cual las palabras ser&aacute;n ignoradas
SolrQuery string get Query	devuelve una cadena en caso de éxito y null si no se estableció
SolrQuery string get Query	devuelve la consulta principal
SolrQuery int get Rows	devuelve un entero en caso de éxito y null si no se estableció
SolrQuery int get Rows	devuelve el n&uacute;mero m&aacute;ximo de documentos
SolrQuery int get Start	devuelve un entero en caso de éxito y null si no se estableció
SolrQuery int get Start	devuelve el &iacute;ndice del conjunto de resultados completo
SolrQuery bool get Stats	devuelve un booleano en caso de éxito y null si no se estableció
SolrQuery bool get Stats	devuelve si est&aacute;n habilitadas o no las estad&iacute;sticas
SolrQuery array get Stats Facets	devuelve una matriz en caso de éxito y null si no se estableció
SolrQuery array get Stats Facets	devuelve todas las estad&iacute;sticas de las facetas que fueron establecidas
SolrQuery bool get Terms	devuelve un booleano en caso de éxito y null si no se estableció
SolrQuery bool get Terms	devuelve si est&aacute; habilitado o no termscomponent
SolrQuery string get Terms Field	devuelve una cadena en caso de éxito y null si no se estableció
SolrQuery string get Terms Field	devuelve el campo desde el cu&aacute;l los t&eacute;rminos son recuperados
SolrQuery bool get Terms Include Upper Bound	devuelve un booleano en caso de éxito y null si no se estableció
SolrQuery bool get Terms Include Upper Bound	devuelve si incluir o no el t&eacute;rmino de l&iacute;mite superior en el conjunto de resultados
SolrQuery int get Terms Limit	devuelve un entero en caso de éxito y null si no se estableció
SolrQuery int get Terms Limit	devuelve el n&uacute;mero m&aacute;ximo de t&eacute;rminos que deber&iacute;a devolver solr
SolrQuery string get Terms Lower Bound	devuelve una cadena en caso de éxito y null si no se estableció
SolrQuery string get Terms Lower Bound	devuelve el t&eacute;rmino en el que comenzar
SolrQuery int get Terms Max Count	devuelve un entero en caso de éxito y null si no se estableció
SolrQuery int get Terms Max Count	devuelve la frecuencia de documento m&aacute;xima
SolrQuery int get Terms Min Count	devuelve un entero en caso de éxito y null si no se estableció
SolrQuery int get Terms Min Count	devuelve la frecuencia de documento m&iacute;nima a devolver para ser incluido
SolrQuery string get Terms Prefix	devuelve una cadena en caso de éxito y null si no se estableció
SolrQuery string get Terms Prefix	devuelve el prefijo del t&eacute;rmino
SolrQuery int get Terms Sort	devuelve un entero en caso de éxito y null si no se estableció
SolrQuery int get Terms Sort	devuelve un entero indicando c&oacute;mo son ordenados los t&eacute;rminos
SolrQuery int get Time Allowed	devuelve un entero en caso de éxito y null si no se estableció
SolrQuery int get Time Allowed	devuelve el tiempo en milisegundos permitido para que la consulta finalice
SolrQuery remove Facet Date Field $field	el nombre del campo de fecha a eliminar
SolrQuery SolrQuery remove Facet Date Field	devuelve el objeto solrquery actual si se usó el valor de retorno
SolrQuery SolrQuery remove Facet Date Field string $field	elimina uno de los campos de faceta de fecha
SolrQuery remove Facet Field $field	el nombre del campo
SolrQuery SolrQuery remove Facet Field	devuelve el objeto solrquery actual si se usó el valor de retorno
SolrQuery SolrQuery remove Facet Field string $field	elimina uno de los par&aacute;metros facet
SolrQuery remove Facet Query $value	el valor
SolrQuery SolrQuery remove Facet Query	devuelve el objeto solrquery actual si se usó el valor de retorno
SolrQuery SolrQuery remove Facet Query string $value	elimina uno de los par&aacute;metros facet
SolrQuery remove Field $field	nombre del campo
SolrQuery SolrQuery remove Field	devuelve el objeto solrquery actual si se usó el valor de retorno
SolrQuery SolrQuery remove Field string $field	elimina un campo de la lista de campos
SolrQuery remove Filter Query $fq	la consulta de filtro a eliminar
SolrQuery SolrQuery remove Filter Query	devuelve el objeto solrquery actual si se usó el valor de retorno
SolrQuery SolrQuery remove Filter Query string $fq	elimina una consulta de filtro
SolrQuery remove Mlt Field $field	nombre del campo
SolrQuery SolrQuery remove Mlt Field	devuelve el objeto solrquery actual si se usó el valor de retorno
SolrQuery SolrQuery remove Mlt Field string $field	elimina uno de los campos morelikethis
SolrQuery remove Mlt Query Field $queryField	el campo de consulta
SolrQuery SolrQuery remove Mlt Query Field	devuelve el objeto solrquery actual si se usó el valor de retorno
SolrQuery SolrQuery remove Mlt Query Field string $queryField	elimina uno de los campos de consulta morelikethis
SolrQuery remove Sort Field $field	el nombre del campo
SolrQuery SolrQuery remove Sort Field	devuelve el objeto solrquery actual si se usó el valor de retorno
SolrQuery SolrQuery remove Sort Field string $field	elimina uno de los campos de ordenaci&oacute;n
SolrQuery remove Stats Field $field	el nombre del campo
SolrQuery SolrQuery remove Stats Field	devuelve el objeto solrquery actual si se usó el valor de retorno
SolrQuery SolrQuery remove Stats Field string $field	elimina uno de los par&aacute;metros stats
SolrQuery set Echo Handler $flag	true o false
SolrQuery SolrQuery set Echo Handler	devuelve el objeto solrquery actual si se usó el valor de retorno
SolrQuery SolrQuery set Echo Handler bool $flag	conmuta el par&aacute;metro echohandler
SolrQuery set Echo Params $type	el tipo de parámetros a incluir
SolrQuery SolrQuery set Echo Params	devuelve el objeto solrquery actual si se usó el valor de retorno
SolrQuery SolrQuery set Echo Params string $type	determina qu&eacute; tipo de par&aacute;metros incluir en la respuesta
SolrQuery set Explain Other $query	la consulta lucene para identificar un conjuntos de documentos
SolrQuery SolrQuery set Explain Other	devuelve el objeto solrquery actual si se usó el valor de retorno
SolrQuery SolrQuery set Explain Other string $query	establece el par&aacute;metro de consulta com&uacute;n explainother
SolrQuery set Facet Date End $field_override	nombre del campo
SolrQuery set Facet Date End $value	véase facet
SolrQuery SolrQuery set Facet Date End	devuelve el objeto solrquery actual si se usó el valor de retorno
SolrQuery SolrQuery set Facet Date End string $value string $field_override	mapea a facet
SolrQuery set Facet Date Gap $field_override	el nombre del campo
SolrQuery set Facet Date Gap $value	véase facet
SolrQuery SolrQuery set Facet Date Gap	devuelve el objeto solrquery actual si se usó el valor de retorno
SolrQuery SolrQuery set Facet Date Gap string $value string $field_override	mapea a facet
SolrQuery set Facet Date Start $field_override	el nombre del campo
SolrQuery set Facet Date Start $value	véase facet
SolrQuery SolrQuery set Facet Date Start	devuelve el objeto solrquery actual si se usó el valor de retorno
SolrQuery SolrQuery set Facet Date Start string $value string $field_override	mapea a facet
SolrQuery set Facet Enum Cache Min Default Frequency $value	la frecuencia mínima
SolrQuery set Facet Enum Cache Min Default Frequency $field_override	el nombre del campo
SolrQuery SolrQuery set Facet Enum Cache Min Default Frequency	devuelve el objeto solrquery actual si se usó el valor de retorno
SolrQuery SolrQuery set Facet Enum Cache Min Default Frequency int $frequency string $field_override	establece la frecuencia de documento m&iacute;nima usada para determinar la cuenta de t&eacute;rminos
SolrQuery set Facet Limit $field_override	el nombre del campo
SolrQuery set Facet Limit $limit	el número máximo de restricciones
SolrQuery SolrQuery set Facet Limit	devuelve el objeto solrquery actual si se usó el valor de retorno
SolrQuery SolrQuery set Facet Limit int $limit string $field_override	mapea a facet
SolrQuery set Facet Min Count $field_override	el nombre del campo
SolrQuery set Facet Min Count $mincount	el mínimo
SolrQuery SolrQuery set Facet Min Count	devuelve el objeto solrquery actual si se usó el valor de retorno
SolrQuery SolrQuery set Facet Min Count int $mincount string $field_override	mapea a facet
SolrQuery set Facet Missing $field_override	el nombre del campo
SolrQuery set Facet Missing $flag	true activa esta característica
SolrQuery SolrQuery set Facet Missing	devuelve el objeto solrquery actual si se usó el valor de retorno
SolrQuery SolrQuery set Facet Missing bool $flag string $field_override	mapea a facet
SolrQuery set Facet Sort $facetSort	use solrquery::facet_sort_index para ordenar por índice o solrquery::facet_sort_count para ordenar por cuenta
SolrQuery set Facet Sort $field_override	el nombre del campo
SolrQuery SolrQuery set Facet Sort	devuelve el objeto solrquery actual si se usó el valor de retorno
SolrQuery SolrQuery set Facet Sort int $facetSort string $field_override	determina el orden de las restricciones de campos de faceta
SolrQuery set Highlight $flag	habilita o deshabilita la remarcación
SolrQuery SolrQuery set Highlight	devuelve el objeto solrquery actual si se usó el valor de retorno
SolrQuery SolrQuery set Highlight bool $flag	habilita o deshabilita la remarcaci&oacute;n
SolrQuery set Highlight Alternate Field $field	el nombre del campo de copia de seguridad
SolrQuery set Highlight Alternate Field $field_override	el nombre del campo que se va a sobrescribir
SolrQuery SolrQuery set Highlight Alternate Field	devuelve el objeto solrquery actual si se usó el valor de retorno
SolrQuery SolrQuery set Highlight Alternate Field string $field string $field_override	especifica el campo de copia de seguridad a usar
SolrQuery set Highlight Formatter $field_override	el nombre del campo
SolrQuery set Highlight Formatter $formatter	actualemte el único valor legal es simple
SolrQuery SolrQuery set Highlight Formatter string $formatter string $field_override	especifica un formateador para la salida remarcada
SolrQuery set Highlight Fragmenter $fragmenter	el fragmentador estándar es el hueco
SolrQuery set Highlight Fragmenter $field_override	el nombre del campo
SolrQuery SolrQuery set Highlight Fragmenter	devuelve el objeto solrquery actual si se usó el valor de retorno
SolrQuery SolrQuery set Highlight Fragmenter string $fragmenter string $field_override	establece el generador de trozos de c&oacute;digo para texto remarcado
SolrQuery set Highlight Fragsize $size	el tamaño en caracteres de los fragmentos a considerara para remarcación
SolrQuery set Highlight Fragsize $field_override	el nombre del campo
SolrQuery SolrQuery set Highlight Fragsize	devuelve el objeto solrquery actual si se usó el valor de retorno
SolrQuery SolrQuery set Highlight Fragsize int $size string $field_override	el tama&ntilde;o de los fragmentos a considerara para remarcaci&oacute;n
SolrQuery set Highlight Highlight Multi Term $flag	si usar o no spanscorer para remarcar términos de frases sólo cuando aparecen dentro de la frase de consulta del documento
SolrQuery SolrQuery set Highlight Highlight Multi Term	devuelve el objeto solrquery actual si se usó el valor de retorno
SolrQuery SolrQuery set Highlight Highlight Multi Term bool $flag	usa spanscorer para remarcar t&eacute;rminos de frases
SolrQuery set Highlight Max Alternate Field Length $field_override	el nombre del campo
SolrQuery set Highlight Max Alternate Field Length $fieldLength	la longitud del campo
SolrQuery SolrQuery set Highlight Max Alternate Field Length	devuelve el objeto solrquery actual si se usó el valor de retorno
SolrQuery SolrQuery set Highlight Max Alternate Field Length int $fieldLength string $field_override	establece el n&uacute;mero m&aacute;ximo de caracteres del campo a devolver
SolrQuery set Highlight Merge Contiguous $field_override	el nombre del campo
SolrQuery set Highlight Merge Contiguous $value	si colapsar o no fragmentos contiguos en un único fragmento
SolrQuery SolrQuery set Highlight Merge Contiguous	devuelve el objeto solrquery actual si se usó el valor de retorno
SolrQuery SolrQuery set Highlight Merge Contiguous bool $flag string $field_override	si colapsar o no fragmentos contiguos en un &uacute;nico fragmento
SolrQuery set Highlight Regex Max Analyzed Chars $maxAnalyzedChars	el número máximo de caracteres a analizar de un campo cuando se usa el fragmentador de expresiones regulares
SolrQuery SolrQuery set Highlight Regex Max Analyzed Chars	devuelve el objeto solrquery actual si se usó el valor de retorno
SolrQuery SolrQuery set Highlight Regex Max Analyzed Chars int $maxAnalyzedChars	especifica el n&uacute;mero m&aacute;ximo de caracteres a analizar
SolrQuery set Highlight Regex Pattern $value	la expresión regular para la fragmentación
SolrQuery SolrQuery set Highlight Regex Pattern	devuelve el objeto solrquery actual si se usó el valor de retorno
SolrQuery SolrQuery set Highlight Regex Pattern string $value	especifica la expresi&oacute;n regular para la fragmentaci&oacute;n
SolrQuery set Highlight Regex Slop $factor	el factor por el que el fragmentador de expresiones regulares puede desviarse del tamaño de fragmento ideal
SolrQuery SolrQuery set Highlight Regex Slop	devuelve el objeto solrquery actual si se usó el valor de retorno
SolrQuery SolrQuery set Highlight Regex Slop float $factor	establece el factor por el que el fragmentador de expresiones regulares puede desviarse del tama&ntilde;o de fragmento ideal
SolrQuery set Highlight Simple Pre $field_override	el nombre del campo
SolrQuery set Highlight Simple Pre $simplePre	el texto que aparece antes de un término remarcado
SolrQuery SolrQuery set Highlight Simple Pre	devuelve el objeto solrquery actual si se usó el valor de retorno
SolrQuery SolrQuery set Highlight Simple Pre string $simplePre string $field_override	establece el texto que aparece antes de un t&eacute;rmino remarcado
SolrQuery set Highlight Snippets $value	el número máximo de trozos remarcados para generar por campo
SolrQuery set Highlight Snippets $field_override	el nombre del campo
SolrQuery SolrQuery set Highlight Snippets	devuelve el objeto solrquery actual si se usó el valor de retorno
SolrQuery SolrQuery set Highlight Snippets int $value string $field_override	establece el n&uacute;mero m&aacute;ximo de trozos remarcados para generar por campo
SolrQuery set Highlight Use Phrase Highlighter $value	si usar o no spanscorer para remarcar o no términos de frases sólo cuando aparecen en la frase de consulta del documento
SolrQuery SolrQuery set Highlight Use Phrase Highlighter	devuelve el objeto solrquery actual si se usó el valor de retorno
SolrQuery SolrQuery set Highlight Use Phrase Highlighter bool $flag	si remarcar o no t&eacute;rminos de frases s&oacute;lo cuando aparecen en la frase de consulta
SolrQuery set Mlt $flag	true lo habilita y false lo desactiva
SolrQuery SolrQuery set Mlt	devuelve el objeto solrquery actual si se usó el valor de retorno
SolrQuery SolrQuery set Mlt bool $flag	habilita o deshabilita morelikethis
SolrQuery set Mlt Boost $value	establece a true o false
SolrQuery SolrQuery set Mlt Boost	devuelve el objeto solrquery actual si se usó el valor de retorno
SolrQuery SolrQuery set Mlt Boost bool $flag	establecer si la consulta ser&aacute; impulsada boost por la relevancia del t&eacute;rmino de inter&eacute;s
SolrQuery set Mlt Count $count	el número de documentos similares a devolver en cada resultado
SolrQuery SolrQuery set Mlt Count	devuelve el objeto solrquery actual si se usó el valor de retorno
SolrQuery SolrQuery set Mlt Count int $count	establece el n&uacute;mero de documentos similares a devolver en cada resultado
SolrQuery set Mlt Max Word Length $maxWordLength	la longitud de palabra máxima sobre la que las palabras serán ignoradas
SolrQuery SolrQuery set Mlt Max Word Length	devuelve el objeto solrquery actual si se usó el valor de retorno
SolrQuery SolrQuery set Mlt Max Word Length int $maxWordLength	establece la longitud de palabra m&aacute;xima
SolrQuery set Mlt Min Doc Frequency $minDocFrequency	establece la frecuencia en la que las palabras que no ocurran en por lo menos tantos documentos como este serán ignoradas
SolrQuery SolrQuery set Mlt Min Doc Frequency	devuelve el objeto solrquery actual si se usó el valor de retorno
SolrQuery SolrQuery set Mlt Min Doc Frequency int $minDocFrequency	establece la frecuencia de mltmindoc
SolrQuery set Mlt Min Term Frequency $minTermFrequency	la frecuencia bajo la cual los términos serán ignorados en los documentos fuente
SolrQuery SolrQuery set Mlt Min Term Frequency	devuelve el objeto solrquery actual si se usó el valor de retorno
SolrQuery SolrQuery set Mlt Min Term Frequency int $minTermFrequency	establece la frecuencia bajo la cual los t&eacute;rminos ser&aacute;n ignorados en los documentos fuente
SolrQuery set Mlt Min Word Length $minWordLength	la longitud de palabra mínima bajo la cual las palabras serán ignoradas
SolrQuery SolrQuery set Mlt Min Word Length	devuelve el objeto solrquery actual si se usó el valor de retorno
SolrQuery SolrQuery set Mlt Min Word Length int $minWordLength	establece la longitud de palabra m&iacute;nima
SolrQuery set Query $query	la consulta de búsqueda
SolrQuery SolrQuery set Query	devuelve el objeto solrquery actual
SolrQuery SolrQuery set Query string $query	establece la consulta de b&uacute;squeda
SolrQuery set Rows $rows	el número máximo de filas a devolver
SolrQuery SolrQuery set Rows	devuelve el objeto solrquery actual
SolrQuery SolrQuery set Rows int $rows	especifica el n&uacute;mero m&aacute;ximo de filas a devolver en el resultado
SolrQuery set Show Debug Info $flag	si mostrar o no información de depuración
SolrQuery SolrQuery set Show Debug Info	devuelve el objeto solrquery actual si se usó el valor de retorno
SolrQuery SolrQuery set Show Debug Info bool $flag	bandera para mostrar informaci&oacute;n de depuraci&oacute;n
SolrQuery set Start $start	el número de filas a saltar
SolrQuery SolrQuery set Start	devuelve el objeto solrquery actual
SolrQuery SolrQuery set Start int $start	especifica el n&uacute;mero de filas que se van a saltar
SolrQuery set Stats $flag	true habilita el componente de estadísticas y false lo deshabilita
SolrQuery SolrQuery set Stats	devuelve el objeto solrquery actual si se usó el valor de retorno
SolrQuery SolrQuery set Stats bool $flag	habilita o deshablita el componente de estad&iacute;sticas
SolrQuery set Terms $flag	true lo habilita
SolrQuery SolrQuery set Terms	devuelve el objeto solrquery actual si se usó el valor de retorno
SolrQuery SolrQuery set Terms bool $flag	habilita o deshablita termscomponent
SolrQuery set Terms Field $fieldname	el nombre del campo
SolrQuery SolrQuery set Terms Field	devuelve el objeto solrquery actual si se usó el valor de retorno
SolrQuery SolrQuery set Terms Field string $fieldname	establece el nombre del campo del que obtener los t&eacute;rminos
SolrQuery set Terms Include Lower Bound $flag	incluir el término de límite inferior en el conjunto de resultados
SolrQuery SolrQuery set Terms Include Lower Bound	devuelve el objeto solrquery actual si se usó el valor de retorno
SolrQuery SolrQuery set Terms Include Lower Bound bool $flag	incluir el t&eacute;rmino de l&iacute;mite inferior en el conjunto de resultados
SolrQuery set Terms Include Upper Bound $flag	true o false
SolrQuery SolrQuery set Terms Include Upper Bound	devuelve el objeto solrquery actual si se usó el valor de retorno
SolrQuery SolrQuery set Terms Include Upper Bound bool $flag	incluir el t&eacute;rmino de l&iacute;mite superior en el conjunto de resultados
SolrQuery set Terms Lower Bound $lowerBound	el término límite inferior
SolrQuery SolrQuery set Terms Lower Bound	devuelve el objeto solrquery actual si se usó el valor de retorno
SolrQuery SolrQuery set Terms Lower Bound string $lowerBound	especifica el t&eacute;rmino de donde empezar
SolrQuery set Terms Prefix $prefix	restringe las coincidencias de términos que comienzan con el prefijo
SolrQuery SolrQuery set Terms Prefix	devuelve el objeto solrquery actual si se usó el valor de retorno
SolrQuery SolrQuery set Terms Prefix string $prefix	restringe las coincidencias de t&eacute;rminos que comienzan con el prefijo
SolrQuery set Terms Upper Bound $upperBound	el término en el que parar
SolrQuery SolrQuery set Terms Upper Bound	devuelve el objeto solrquery actual si se usó el valor de retorno
SolrQuery SolrQuery set Terms Upper Bound string $upperBound	establece el t&eacute;rmino en el que parar
SolrQuery set Time Allowed $timeAllowed	el tiempo permitido para que la búsqueda finalice
SolrQuery SolrQuery set Time Allowed	devuelve el objeto solrquery actual si se usó el valor de retorno
SolrQuery SolrQuery set Time Allowed int $timeAllowed	el tiempo permitido para que la b&uacute;squeda finalice
SolrResponse string get Digested Response	devuelve la respueste xml como información de php serializada
SolrResponse string get Digested Response	devuelve la respueste xml como informaci&oacute;n de php serializada
SolrResponse int get Http Status	devuelve el estado http de la respuesta
SolrResponse int get Http Status	devuelve el estado http de la respuesta
SolrResponse string get Http Status Message	devuelve más detalles del estado http
SolrResponse string get Http Status Message	devuelve m&aacute;s detalles del estado http
SolrResponse string get Raw Request Headers	devuelve las cabeceras de respuesta sin tratar enviadas al servidor solr
SolrResponse string get Raw Request Headers	devuelve las cabeceras de respuesta sin tratar enviadas al servidor solr
SolrResponse string get Raw Response	devuelve la respuesta sin tratar del servidor
SolrResponse string get Raw Response	devuelve la respuesta sin tratar del servidor
SolrResponse string get Raw Response Headers	devuelve las cabeceras de respuesta sin tratar del servidor
SolrResponse string get Raw Response Headers	devuelve las cabeceras de respuesta sin tratar del servidor
SolrResponse SolrObject get Response	devuelve un objeto solrobject que representa la respuesta xml del servidor
SolrResponse SolrObject get Response	devuelve un objeto solrobject que representa la respuesta xml del servidor
SolrResponse set Parse Mode $parser_mode	solrresponse::parse_solr_doc analiza los documentos en instancias de solrdocument
SolrResponse bool set Parse Mode	devuelve true en caso de éxito o false en caso de error
SolrResponse bool set Parse Mode int $parser_mode	establece el modo de an&aacute;lisis
SolrServerException array get Internal Info	devuelve un array que contiene información interna de dónde se lanzó la excepción
SolrServerException array get Internal Info	devuelve informaci&oacute;n interna de d&oacute;nde fue lanzada la excepci&oacute;n
SolrUtils digest Xml Response $xmlresponse	la cadena de respuesta xml del servidor solr
SolrUtils digest Xml Response $parse_mode	use solrresponse::parse_solr_obj o solrresponse::parse_solr_doc
SolrUtils SolrObject digest Xml Response	devuelve el objeto solrobject que representa la respuesta xml
SolrUtils SolrObject digest Xml Response string $xmlresponse int $parse_mode	convierte una cadena de respuesta xml a un objeto solrobject
SolrUtils escape Query Chars $str	este es el string de consulta a ser escapda
SolrUtils string escape Query Chars	devuelve el string escapado o false en caso de error
SolrUtils string escape Query Chars string $str	escapa un string de consulta lucene
SolrUtils string get Solr Version	la versión actual de la extensión apache solr
SolrUtils string get Solr Version	devuelve la versi&oacute;n actual de la extensi&oacute;n solr
SolrUtils query Phrase $str	la frase lucene
SolrUtils string query Phrase	devuelve la frase entre comillas dobles
SolrUtils string query Phrase string $str	prepara una frase desde una cadena lucene sin escapar
SphinxClient build Keywords $query	una consulta para extraer palabras clave
SphinxClient build Keywords $hits	marca boolean para activar / desactivar la generación de estadísticas de palabras clave
SphinxClient build Keywords $index	un índice para obtener la configuración de tokenización y estadísticas de palabras clave de la ocurrencia
SphinxClient array build Keywords	devuelve un array de arrays asociativos con la información por palabra clave
SphinxClient array build Keywords string $query string $index bool $hits	extraer las palabras clave de una consulta
SphinxClient bool close	devuelve true en caso de éxito o false en caso de error
SphinxClient bool close	cierra conexi&oacute;n persistente previamente abierta
SphinxClient string get Last Error	devuelve el último mensaje de error o un string vacío si no hubo errores
SphinxClient string get Last Error	obtener el &uacute;ltimo mensaje de error
SphinxClient bool open	devuelve true en caso de éxito o false en caso de error
SphinxClient bool open	abre una conexi&oacute;n persistente con el servidor
SphinxClient set Connect Timeout $timeout	tiempo de espera en segundos
SphinxClient bool set Connect Timeout	devuelve true en caso de éxito o false en caso de error
SphinxClient bool set Connect Timeout float $timeout	establecer el tiempo de conexi&oacute;n
SphinxClient set Max Query Time $qtime	tiempo de consulta máximo en milisegundos
SphinxClient bool set Max Query Time	devuelve true en caso de éxito o false en caso de error
SphinxClient bool set Max Query Time int $qtime	establecer el tiempo m&aacute;ximo de consulta
SphinxClient set Ranking Mode $ranker	ranking mode
SphinxClient bool set Ranking Mode	devuelve true en caso de éxito o false en caso de error
SphinxClient bool set Ranking Mode int $ranker	set ranking mode
SphinxClient update Attributes $index	nombre del índice o índices para ser actualizado
SphinxClient update Attributes $attributes	array de nombres de atributos lista de atributos que van a ser actualizados
SphinxClient update Attributes $values	array asociativo que contiene los id de documento como claves y array de valores de los atributos como valores
SphinxClient int update Attributes	devuelve el número de documentos actualizados 0 o más en caso de éxito o false en caso de error
SphinxClient int update Attributes string $index array $attributes array $values bool $mva	actualizar los atributos del documento
SplDoublyLinkedList add $index	el índice donde insertar el nuevo valor
SplDoublyLinkedList add $newval	el nuevo valor para index
SplDoublyLinkedList void add mixed $index mixed $newval	a&ntilde;adir / insertar un nuevo valor en el &iacute;ndice especificado
SplDoublyLinkedList mixed current	el valor del nodo actual
SplDoublyLinkedList mixed current	devuelve la entrada actual del array
SplDoublyLinkedList mixed key	el índice del nodo actual
SplDoublyLinkedList mixed key	devuelve el &iacute;ndice del nodo actual
SplDoublyLinkedList void next	avanza a la siguiente entrada
SplDoublyLinkedList offset Set $index	el índice a establer
SplDoublyLinkedList offset Set $newval	el nuevo valor para index
SplDoublyLinkedList void offset Set mixed $index mixed $newval	establece el valor del &iacute;ndice espec&iacute;ficado
SplDoublyLinkedList offset Unset $index	el índice a borrar
SplDoublyLinkedList void offset Unset mixed $index	borra el valor de el &iacute;ndice espec&iacute;ficado
SplDoublyLinkedList void prev	retrocede a la entrada anterior
SplDoublyLinkedList push $value	el valor a insertar
SplDoublyLinkedList void push mixed $value	inserta un elemento al final de la lista doblemente enlazada
SplDoublyLinkedList string serialize	el string serializado
SplDoublyLinkedList string serialize	serializa el almacenamiento
SplDoublyLinkedList unserialize $serialized	es string serializada
SplDoublyLinkedList void unserialize string $serialized	deserializa el almacenamiento
SplDoublyLinkedList unshift $value	el valor a anteponer
SplDoublyLinkedList void unshift mixed $value	antepone un elemento a la lista doblemente enlazada
SplDoublyLinkedList bool valid	devuelve true si la lista doblemente enlazada contiene más nodos o false en caso contrario
SplDoublyLinkedList bool valid	comprueba si la lista doblemente enlazada contiene m&aacute;s nodos
SplFileInfo construct $file_name	ruta del fichero
SplFileInfo string construct string $file_name	construir un objeto nuevo splfileinfo
SplFileInfo get Basename $suffix	sufijo opcional para omitir el nombre de la base devuelta
SplFileInfo string get Basename	devuelve el nombre de la base sin información de la ruta de acceso
SplFileInfo string get Basename string $suffix	obtiene el nombre base del fichero
SplFileInfo string get Extension	devuelve un string que contiene la extensión del fichero o un vacío string si el archivo no tiene extensión
SplFileInfo string get Extension	obtiene la extensi&oacute;n del fichero
SplFileInfo get File Info $class_name	nombre de una clase splfileinfo derivada de su uso
SplFileInfo SplFileInfo get File Info	un objeto splfileinfo creado para el fichero
SplFileInfo SplFileInfo get File Info string $class_name	obtiene un objeto splfileinfo para el fichero
SplFileInfo string get Filename	el nombre del fichero
SplFileInfo string get Filename	obtiene el nombre del fichero
SplFileInfo int get Inode	devuelve el número de i-nodo de el objeto filesystem
SplFileInfo int get Inode	obtiene el i-nodo de el fichero
SplFileInfo string get Link Target	devuelve el destino de el enlace del sistema de ficheros
SplFileInfo string get Link Target	obtiene el destino de un enlace del sistema de ficheros
SplFileInfo int get MTime	devuelve la fecha de modificación de el fichero en formato unix timestamp
SplFileInfo int get MTime	obtiene la fecha de la &uacute;ltima modificaci&oacute;n
SplFileInfo int get Owner	el id del dueño en formato numérico
SplFileInfo int get Owner	obtiene el due&ntilde;o de el fichero
SplFileInfo string get Path	devuelve la ruta a el fichero
SplFileInfo string get Path	obtiene la ruta sin el nombre de fichero
SplFileInfo get Path Info $class_name	nombre de una clase splfileinfo derivada a usar
SplFileInfo SplFileInfo get Path Info	devuelve un objeto splfileinfo para la ruta padre de el fichero
SplFileInfo SplFileInfo get Path Info string $class_name	obtiene un objeto splfileinfo para la ruta
SplFileInfo string get Pathname	la ruta de el fichero
SplFileInfo string get Pathname	obtiene la ruta de un fichero
SplFileInfo int get Perms	devuelve los permisos de el fichero
SplFileInfo int get Perms	obtiene los permisos del fichero
SplFileInfo int get Size	el tamaño del fichero en bytes
SplFileInfo int get Size	obtiene el tama&ntilde;o de el fichero
SplFileInfo string get Type	un string representando el tipo de la entrada
SplFileInfo string get Type	obtiene el tipo del fichero
SplFileInfo bool is Dir	devuelve true si es un directorio false en caso contrario
SplFileInfo bool is Dir	dice si el fichero es un directorio
SplFileInfo bool is Executable	devuelve true si es ejecutable en caso contrario false
SplFileInfo bool is Executable	comprueba si el fichero es ejecutable
SplFileInfo bool is Link	devuelve true si el fichero es un link en caso contrario false
SplFileInfo bool is Link	comprueba si el fichero es un link
SplFileInfo bool is Readable	devuelve true si se puede leer en caso contrario false
SplFileInfo bool is Readable	comprueba si el fichero se puede leer
SplFileInfo bool is Writable	devuelve true si se puede escribir en caso contrario false ;
SplFileInfo bool is Writable	comprueba si se puede escribir en el fichero
SplFileInfo open File $open_mode	el modo para abrir el fichero
SplFileInfo open File $use_include_path	cuando está definido a true el fichero también es buscado dentro de include_path
SplFileInfo open File $context	se refiere a context sección del manual para una descripción de contexts
SplFileInfo SplFileObject open File	el fichero abierto como un objeto splfileobject
SplFileInfo SplFileObject open File string $open_mode bool $use_include_path resource $context	obtiene un objeto splfileobject para el fichero
SplFileInfo set Info Class $class_name	el nombre de la clase a emplear cuando se invoca a splfileinfo::getfileinfo() y splfileinfo::getpathinfo()
SplFileInfo void set Info Class string $class_name	establece la clase empleada con splfileinfo::getfileinfo y splfileinfo::getpathinfo
SplFileObject string|array current	recupera la línea actual del fichero
SplFileObject string|array current	recupera la l&iacute;nea actual del fichero
SplFileObject string fgetc	devuelve un string conteniendo un solo caracter leído de el fichero o false si es el final del fichero
SplFileObject string fgetc	obtiene un caracter del fichero
SplFileObject fgetcsv $escape	el carácter de escape sólo un carácter
SplFileObject fgetcsv $delimiter	el delimitador de campos sólo un carácter
SplFileObject fgetcsv $enclosure	el carácter circundante de cada campo sólo un carácter
SplFileObject array fgetcsv	devuelve un array indexado que contiene los campos leídos o false en caso de error
SplFileObject array fgetcsv string $delimiter string $enclosure string $escape	obtiene una l&iacute;nea de un fichero y la analiza como campos csv
SplFileObject string fgets	devuelve un string conteniendo la siguiente línea de el fichero o false en caso de error
SplFileObject string fgets	obtener la l&iacute;nea de el fichero
SplFileObject flock $wouldblock	establecer a true si el bloqueo hará que la función quede esperando condición de errno ewouldblock
SplFileObject flock $operation	operation es una operación de las siguientes: lock_sh para adquirir un bloqueo compartido lectura
SplFileObject bool flock	devuelve true en caso de éxito o false en caso de error
SplFileObject bool flock int $operation int $wouldblock	bloqueo de ficheros portable
SplFileObject int fpassthru	devuelve el número de caracteres leídos del handle y pasados a través de la salida
SplFileObject int fpassthru	imprimir todos los datos restantes en un apuntador de fichero
SplFileObject fscanf	los valores opcionales asignados
SplFileObject fscanf $format	el formato especificado descrito en la documentación de sprintf()
SplFileObject mixed fscanf	si sólo se pasa un parámetro a este método los valores analizados serán devueltos como un array
SplFileObject mixed fscanf string $format	analiza la entrada de un fichero de acuerdo a un formato
SplFileObject int ftell	devuelve la posición de el puntero de fichero como un integer o false en caso de error
SplFileObject int ftell	devuelve la posici&oacute;n del fichero actual
SplFileObject fwrite $str	el string a ser escrito en el fichero
SplFileObject fwrite $length	si se utiliza el argumento length la escritura se detendrá después de que se han escrito length bytes o o se llega al final del string lo que ocurra primero
SplFileObject int fwrite	devuelve el número de bytes escritos o null en caso de error
SplFileObject int fwrite string $str int $length	escribe en el fichero
SplFileObject array get Csv Control	devuelve un array indexado que contiene el carácter delimitador y el circundante
SplFileObject array get Csv Control	obtiene el car&aacute;cter delimitador y el circundante para campos csv
SplFileObject int get Flags	devuelve un integer que representa las flags
SplFileObject int get Flags	obtener las flags de splfileobject
SplFileObject int get Max Line Len	devuelve la longitud máxima de línea si ha sido establecido con splfileobject::setmaxlinelen() por omisión es 0
SplFileObject int get Max Line Len	obtener la longitud m&aacute;xima de l&iacute;nea
SplFileObject int key	devuelve el número de línea actual
SplFileObject int key	obtiene el n&uacute;mero de l&iacute;nea
SplFileObject void next	leer la siguiente l&iacute;nea
SplFileObject void rewind	rebobina el fichero hasta la primera l&iacute;nea
SplFileObject seek $line_pos	el número base cero a mover el apuntador interno
SplFileObject void seek int $line_pos	mueve el apuntador interno a la l&iacute;nea espec&iacute;ficada
SplFileObject set Csv Control $escape	el carácter de escape de campos un sólo carácter
SplFileObject set Csv Control $delimiter	el delimitador de campos un sólo carácter
SplFileObject set Csv Control $enclosure	el carácter circundante de cada campo un sólo carácter
SplFileObject void set Csv Control string $delimiter string $enclosure string $escape	establece el car&aacute;cter delimitador y el circundante para campos csv
SplFileObject set Flags $flags	bitmask de las flags a establecer
SplFileObject void set Flags int $flags	establece flags para el splfileobject
SplFileObject set Max Line Len $max_len	la longitud de una línea
SplFileObject void set Max Line Len int $max_len	establecer la longitud m&aacute;xima de una l&iacute;nea
SplFixedArray int count	devuelve el tamaño del array
SplFixedArray int count	devuelve el tama&ntilde;o del array
SplFixedArray from Array $save_indexes	intenta guardar los índices numéricos usados en el array original
SplFixedArray from Array $array	el array a importar
SplFixedArray SplFixedArray from Array	devuelve una instancia de splfixedarray conteniendo el contenido de el array
SplFixedArray SplFixedArray from Array array $array bool $save_indexes	importa un array php en una instancia splfixedarray
SplFixedArray int get Size	devuelve el tamaño de el array como un integer
SplFixedArray int get Size	obtiene el tama&ntilde;o de el array
SplFixedArray int key	los índices del array actual
SplFixedArray int key	devuelve los &iacute;ndices del array actual
SplFixedArray void next	mover a la siguiente entrada
SplFixedArray offset Get $index	el índice con el valor
SplFixedArray mixed offset Get	el valor específicado en index
SplFixedArray mixed offset Get int $index	devuelve el valor en el &iacute;ndice espec&iacute;ficado
SplFixedArray offset Unset $index	el índice a ser destruido
SplFixedArray void offset Unset int $index	destruye el valor en el &iacute;ndice espec&iacute;ficado
SplFixedArray void rewind	rebobina el iterador hasta el inicio
SplFixedArray void wakeup	reinicializar el array despu&eacute;s de ser deserializado
SplHeap mixed current	el valor de el nodo actual
SplHeap mixed current	devuelve el nodo actual se&ntilde;alado por el iterador
SplHeap insert $value	el valor a ser insertado
SplHeap void insert mixed $value	inserta un elemento en el mont&oacute;n
SplHeap void next	avanzar al siguiente nodo
SplHeap void rewind	rebobina el iterador al comienzo
SplHeap bool valid	devuelve true si el montón contiene más nodos en caso contrario false
SplHeap bool valid	comprueba si el mont&oacute;n contiene m&aacute;s nodos
SplMaxHeap compare $value1	el valor de el primer nodo a ser comparado
SplMaxHeap compare $value2	el valor de el segundo nodo a ser comparado
SplMaxHeap int compare	el resultado de la comparación un integer positivo si value1 es mayor que value2 0 si son iguales en caso contrario un integer negativo
SplMaxHeap int compare mixed $value1 mixed $value2	compara elementos con el fin de colocarlos correctamente en el mont&oacute;n en la parte de arriba
SplMinHeap compare $value1	el valor de el primer nodo a ser comparado
SplMinHeap compare $value2	el valor de el segundo nodo a ser comparado
SplMinHeap int compare	el resultado de la comparación un integer positivo si value1 es menor que value2 0 si son iguales en caso contrario integer negativo
SplMinHeap int compare mixed $value1 mixed $value2	comparar elementos con el fin de colocarlos correctamente en el mont&oacute;n em la parte de arriba
SplObjectStorage add All $storage	el almacenamiento que se quiere importar
SplObjectStorage void add All SplObjectStorage $storage	agrega todos los objetos de otro almacenamiento
SplObjectStorage attach $data	los datos asociados con el object
SplObjectStorage attach $object	el object a ser añadido
SplObjectStorage void attach object $object mixed $data	agrega un objeto en el almacenamiento
SplObjectStorage contains $object	el object a ser comprobado
SplObjectStorage bool contains	devuelve true si el object está en el almacenamiento en caso contrario false
SplObjectStorage bool contains object $object	comprueba si el almacenamiento contiene un objeto espec&iacute;fico
SplObjectStorage object current	el object en la posición actual iterador
SplObjectStorage object current	devuelve la entrada actual de almacenamiento
SplObjectStorage detach $object	el object a ser removido
SplObjectStorage void detach object $object	quita un object de el almacenamiento
SplObjectStorage get Hash $object	el objeto cuyo identificador va a ser calculado
SplObjectStorage string get Hash	un string con el identificador calculado
SplObjectStorage string get Hash object $object	calcular un identificador &uacute;nico hash para los objetos contenidos
SplObjectStorage mixed get Info	los datos asociados con la posición actual de el iterador
SplObjectStorage mixed get Info	devuelve los datos asociados con la entrada del iterador actual
SplObjectStorage int key	el índice correspondiente a la posición de el iterador
SplObjectStorage int key	devuelve el &iacute;ndice en el que se encuentra el iterador actualmente
SplObjectStorage offset Exists $object	el object a ser comprobado
SplObjectStorage bool offset Exists	devuelve true si el object existe en el almacenamiento y false en caso contrario
SplObjectStorage bool offset Exists object $object	comprueba si un objeto existe en el almacenamiento
SplObjectStorage offset Get $object	el object a ser comprobado
SplObjectStorage mixed offset Get	los datos previamente asociados con el object en el almacenamiento
SplObjectStorage mixed offset Get object $object	devuelve los datos asociados con un object
SplObjectStorage offset Set $object	el object al que se le van a asociar datos
SplObjectStorage offset Set $data	los datos asociados con el object
SplObjectStorage void offset Set object $object mixed $data	asocia datos a un objeto en el almacenamiento
SplObjectStorage offset Unset $object	el object a ser removido
SplObjectStorage void offset Unset object $object	quita un objeto de el almacenamiento
SplObjectStorage remove All $storage	el almacenamiento que contiene los elementos a remover
SplObjectStorage void remove All SplObjectStorage $storage	remover objetos contenidos en otro almacenamiento de el almacenamiento actual
SplObjectStorage remove All Except $storage	el almacenamiento que contiene los elementos a mantener en el almacenamiento actual
SplObjectStorage void remove All Except SplObjectStorage $storage	remover objetos excepto los contenidos en otro almacenamiento del almacenamiento actual
SplObjectStorage void rewind	rebobina el iterador a el primer elemento de el almacenamiento
SplObjectStorage string serialize	un string que representa el almacenamiento
SplObjectStorage string serialize	serializa el almacenamiento
SplObjectStorage set Info $data	los datos a ser asociados con la entrada del iterador actual
SplObjectStorage void set Info mixed $data	establece los datos asociados con el iterador de la entrada actual
SplObjectStorage unserialize $serialized	la representación serializada de el almacenamiento
SplObjectStorage void unserialize string $serialized	deserializa un almacenamiento desde su representaci&oacute;n string
SplObjectStorage bool valid	devuelve true si la entrada actual del iterador es válida en caso contrario false
SplObjectStorage bool valid	comprobar si la entrada actual del iterador es v&aacute;lida
SplPriorityQueue mixed key	el índice el nodo actual
SplPriorityQueue mixed key	devuelve el &iacute;ndice del nodo actual
SplPriorityQueue void next	pasar a la siguiente nodo
SplPriorityQueue void rewind	rebobinar iterador de vuelta al inicio no-op
SplQueue enqueue $value	el valor que se va a añadir
SplQueue void enqueue mixed $value	a&ntilde;ade un elemento a la cola
SplSubject attach $observer	el splobserver a adjuntar
SplSubject void attach SplObserver $observer	adjuntar un splobserver
SplSubject detach $observer	el splobserver a separar
SplSubject void detach SplObserver $observer	separa un observador
SplSubject void notify	notificar un observador
SplTempFileObject construct $max_memory	la cantidad máxima de memoria en bytes por omisión es 2 mb para el fichero temporal a usar
SplTempFileObject int construct int $max_memory	construir un nuevo objeto de fichero temporal
SQLite3 busy Timeout $msecs	los milisegundos a dormir
SQLite3 bool busy Timeout	devuelve true en caso de éxito false en case de fallo
SQLite3 bool busy Timeout int $msecs	establecer el gestor de conexi&oacute;n ocupado
SQLite3 int changes	devuelve un valor de tipo integer correspondiente al número de filas de la base de datos cambiadas o insertadas o eliminadas por la sentencia sql más reciente
SQLite3 int changes	devolver el n&uacute;mero de filas de la base de datos que fueron cambiadas o insertadas o eliminadas por la sentencia sql m&aacute;s reciente
SQLite3 bool close	devuelve true en caso de éxito false en caso de error
SQLite3 bool close	cerrar la conexi&oacute;n a la base de datos
SQLite3 construct $filename	la ruta a la base de datos de sqlite o :memory: para usar la base de datos que está en memoria
SQLite3 construct $flags	banderas opcionales para determinar cómo abrir la base de datos sqlite
SQLite3 construct $encryption_key	una clave de encriptación opcional usada cuando se encripta o desencripta una base de datos de sqlite
SQLite3 string construct	devuelve un objeto sqlite3 en caso de éxito
SQLite3 string construct string $filename int $flags string $encryption_key	instanciar un objeto de la clase sqlite3 y abrir una base de datos de sqlite 3
SQLite3 create Collation $callback	el nombre de una función php o función definida por el usuario que se aplicará como retorno de llamada definiendo el comportamiento de la ordenación
SQLite3 create Collation $name	nombre de la función sql de ordenación específica a ser creada o redefinida
SQLite3 bool create Collation	devuelve true en caso de éxito o false en caso de error
SQLite3 bool create Collation string $name callable $callback	registra una funci&oacute;n php para ser utilizada como una funci&oacute;n sql de ordenaci&oacute;n espec&iacute;fica
SQLite3 create Function $name	el nombre de la función de sql a crear o redefinir
SQLite3 create Function $argument_count	el número de argumentos que toma la función de sql
SQLite3 create Function $callback	el nombre de una función de php o una definida por el usuario para aplicarla como una llamada de retorno definiendo el comportamiento de la función de sql
SQLite3 bool create Function	devuelve true si la creación de la función tuvo éxito false en case de error
SQLite3 bool create Function string $name mixed $callback int $argument_count	registrar una funci&oacute;n de php para usarla como una funci&oacute;n escalar de sql
SQLite3 escape String $value	la cadena a ser escapada
SQLite3 string escape String	devuelve una cadena debidamente escapada que puede ser usada de forma segura en una sentencia sql
SQLite3 string escape String string $value	devolver una cadena que ha sido debidamente escapada
SQLite3 exec $query	la consulta sql a ejecutar típicamente una consulta insert update o delete
SQLite3 bool exec	devuelve true si la consulta tuvo éxito false en caso de error
SQLite3 bool exec string $query	ejecutar una consulta que no devuelve resultados en una base de datos dada
SQLite3 string last Error Msg	devuelve texto en inglés describiendo la petición sqlite que falló más recientemente
SQLite3 string last Error Msg	devolver texto en ingl&eacute;s describiendo la petici&oacute;n sqlite que fall&oacute; m&aacute;s recientemente
SQLite3 query $query	la consulta sql a ejecutar
SQLite3 SQLite3Result query	devuelve un objeto de la clase sqlite3result si la consulta devuelve resultados
SQLite3 SQLite3Result query string $query	ejecutar una consulta sql
SQLite3 query Single $query	la consulta sql a ejecutar
SQLite3 query Single $entire_row	por omisión querysingle() devuelve el valor de la primera columna devuelta por la consulta
SQLite3 mixed query Single	devuelve el valor de la primera columna de resultados o un array con la primera fila completa si entire_row es true
SQLite3 mixed query Single string $query bool $entire_row	ejecutar una consulta y devolver un &uacute;nico resultado
SQLite3 array version	devuelve un array asociativo con las claves versionstring y versionnumber
SQLite3 array version	devolver la versi&oacute;n de la biblioteca sqlite3 como una constante de cadena y como un n&uacute;mero
SQLite3Result column Name $column_number	el índice numérico basado en cero de la columna
SQLite3Result string column Name	devuelve un valor de tipo string son el nombre de la columna identificada por column_number
SQLite3Result string column Name int $column_number	devolver el nombre de la columna n-&eacute;sima
SQLite3Result column Type $column_number	el índice numérico basado en cero de la columna
SQLite3Result int column Type	devuelve el índice del tipo de información de la columna identificada por column_number uno de los siguientes: sqlite3_integer sqlite3_float sqlite3_text sqlite3_blob o sqlite3_null
SQLite3Result int column Type int $column_number	devolver el tipo de la columna n-&eacute;sima
SQLite3Result fetch Array $mode	controla cómo será devuelta al llamador la siguiente fila
SQLite3Result array fetch Array	devuelve una fila de resultados en forma de un array asociativo o indexado o ambos
SQLite3Result array fetch Array int $mode	obtener una fila de resultados en forma de un array asociativo o indexado o ambos
SQLite3Result bool finalize	devuelve true
SQLite3Result bool finalize	cerrar el conjunto de resultados
SQLite3Stmt bind Param $sql_param	un string que identifica la variable de sentencia que debería ser vinculada al parámetro
SQLite3Stmt bind Param $type	el tipo de datos del parámetro a vincular
SQLite3Stmt bind Param $param	el parámetro a vincular a la variable de sentencia
SQLite3Stmt bool bind Param	devuelve true si el parámetro es vinculado a la variable de sentencia false en caso de fallo
SQLite3Stmt bool bind Param string $sql_param mixed $param int $type	vincular un par&aacute;metro a una variable de sentencia
SQLite3Stmt bind Value $type	el tipo de dato de la variable a vincular
SQLite3Stmt bind Value $value	el valor a vincular a la variable de sentencia
SQLite3Stmt bind Value $sql_param	un string que identifica la variable de sentencia a la que el valor debería ser vinculado
SQLite3Stmt bool bind Value	devuelve true si el valor es vinculado a la variable de sentencia false en case de error
SQLite3Stmt bool bind Value string $sql_param mixed $value int $type	vincular el valor de un par&aacute;metro a una variable de sentencia
SQLite3Stmt bool clear	devuelve true si la limpiza de parámetros vinculados tuvo éxito false en caso de fallo
SQLite3Stmt bool clear	limpiar todos los par&aacute;metros vinculados actuales
SQLite3Stmt bool close	devuelve true
SQLite3Stmt bool close	cerrar una sentencia preparada
SQLite3Stmt SQLite3Result execute	devuelve un objeto de la clase sqlite3result si la ejecución de la sentencia preparada tuvo éxito false en caso de fallo
SQLite3Stmt SQLite3Result execute	ejecutar una sentencia preparada y devuolver un objeto de conjunto de resultados
streamWrapper - construct	construye una nueva envoltura de flujo
streamWrapper stream metadata $value	si el parámetro option es stream_meta_touch : array que consiste en dos argumentos de la función touch()
streamWrapper stream metadata $path	la ruta del fichero o el url a establecer los metadatos
streamWrapper bool stream metadata	devuelve true en caso de éxito o false en caso de error
streamWrapper bool stream metadata string $path int $option mixed $value	cambiar las opciones del flujo
streamWrapper stream open $options	contiene banderas adicionales establecidas por la api de flujos
streamWrapper stream open $mode	el modo usado para abrir el archivo como está detallado en fopen()
streamWrapper stream open $opened_path	si la ruta path es abierta con éxito y stream_use_path está establecido en options opened_path debería ser establecido a la ruta completa del archivo / recurso que fue abierto realmente
streamWrapper stream open $path	especifica la url que fue pasada a la función original
streamWrapper bool stream open	devuelve true en caso de éxito o false en caso de error
streamWrapper bool stream open string $path string $mode int $options string $opened_path	abre un archivo o una url
streamWrapper stream set option $option	una de las siguientes opciones: stream_option_blocking el método fue llamado en respuesta a stream_set_blocking() stream_option_read_timeout el método fue llamado en respuesta a stream_set_timeout() stream_option_write_buffer el método fue llamado en respuesta a stream_set_write_buffer()
streamWrapper stream set option $arg2	si option es stream_option_blocking : esta opción no está establecida
streamWrapper stream set option $arg1	si option es stream_option_blocking : modo de bloqueo solicitado 1 significa bloqueo 0 sin bloqueo
streamWrapper bool stream set option	devuelve true en caso de éxito o false en caso de error
streamWrapper bool stream set option int $option int $arg1 int $arg2	cambiar las opciones del flujo
streamWrapper stream truncate $new_size	el nuevo tamaño
streamWrapper bool stream truncate	devuelve true en caso de éxito o false en caso de error
streamWrapper bool stream truncate int $new_size	truncar un flujo
SVM - construct	construir un nuevo objeto svm
SVMModel save $filename	el archivo para guardar el modelo
SVMModel bool save	lanza svmexception en caso de error
SVMModel bool save string $filename	guardar un modelo en un archivo
SyncEvent bool fire	a boolean of true if the event was fired false otherwise
SyncEvent bool fire	fires / sets the event
Thread void detach	ejecuci&oacute;n
Thread integer get Creator Id	una identificación numérica
Thread integer get Creator Id	identificaci&oacute;n
Thread Thread get Current Thread	un objeto representando la ejecución del hilo actual
Thread Thread get Current Thread	identificaci&oacute;n
Throwable int get Code	devuelve el código de la excepción como un integer en exception aunque posiblemente como otro tipo en los descendientes de exception por ejemplo como string en pdoexception
Throwable int get Code	obtener el c&oacute;digo de la excepci&oacute;n
Throwable string get File	devuelve el nobre del fichero desde el que se lanzó el objeto
Throwable string get File	descripci&oacute;n
Throwable int get Line	devuelve el número de línea en la que el objeto fue instanciado
Throwable int get Line	obtiene la l&iacute;nea en la que el objeto fue instanciado
Throwable Throwable get Previous	devuelve el objeto throwable anterior si está disponible o null si no lo está
Throwable Throwable get Previous	devuelve el objeto throwable previo
Throwable array get Trace	devuelve la traza de la pila como un array con el mismo formato que en debug_backtrace()
Throwable array get Trace	obtener la traza de la pila
tidyNode bool is Asp	devuelve true si el nodo es código asp false de lo contrario
tidyNode bool is Asp	comprueba si el nodo es asp
tidyNode bool is Comment	devuelve true si el nodo es un comentario false de lo contrario
tidyNode bool is Comment	comprueba el nodo actual es un comentario
tidyNode bool is Html	devuelve true si el nodo es parte de un documento html false de lo contrario
tidyNode bool is Html	comprueba si el nodo es parte de un documento html
tidyNode bool is Text	devuelve true si un nodo representa un texto false de lo contrario
tidyNode bool is Text	comprueba si un nodo representa un texto no html
TokyoTyrant tune $timeout	the objects timeout value default: 5
TokyoTyrant tune $options	bitmask of options to tune
TokyoTyrant TokyoTyrant tune	this method returns a reference to the current object and throws tokyotyrantexception on failure
TokyoTyrant TokyoTyrant tune float $timeout int $options	tunes connection values
TokyoTyrant mixed vanish	this method returns the current object and throws tokyotyrantexception on failure
TokyoTyrant mixed vanish	empties the database
V8Js array get Extensions	devuelve un array de extensiones registradas o un array vacío si no hay ninguna
V8Js array get Extensions	devolver un array de extensiones registradas
WeakMap - construct	construye un nuevo mapa
WeakMap mixed current	el valor actual que está siendo iterado
WeakMap mixed current	devuelve el valor actual de la iteraci&oacute;n
WeakMap object key	la clave del objeto que está siendo iterado
WeakMap object key	devuelve la clave actual de la iteraci&oacute;n
WeakMap void next	avanza al siguiente elemento del mapa
WeakMap offset Exists $object	el objeto que comprobar
WeakMap bool offset Exists	devuelve true si el objeto está contenido en el mapa false en caso contrario
WeakMap bool offset Exists object $object	comprueba si un cierto objeto est&aacute; en un mapa
WeakMap offset Set $object	el objeto que sirve como clave del par clave-valor
WeakMap offset Set $value	los datos arbitrarios que sirven como valor del par clave-valor
WeakMap void offset Set object $object mixed $value	actualiza el mapa con un nuevo par clave-valor
WeakMap void rewind	sit&uacute;a el iterador al comienzo del mapa
WeakMap bool valid	devuelve true si el iterador está sobre un elemento válido al que se puede acceder false en caso contrario
WeakMap bool valid	devuelve si el iterador a&uacute;n est&aacute; sobre un elemento v&aacute;lido de un mapa
Weakref bool acquire	devuelve true si la referencia era válida y pudo ser convertida a una referencia fuerte de lo contrario false
Weakref bool acquire	adquiere una referencia fuerte de un objeto
Weakref object get	devuelve el objeto si la referencia aún es válida o null en caso contrario
Weakref object get	devuelve el objeto apuntado por una referencia d&eacute;bil
Weakref bool valid	devuelve true si el objeto aún existe y es accesible mediante weakref::get() o false en caso contrario
Weakref bool valid	comprueba si el objeto referenciado a&uacute;n existe
XMLReader DOMNode expand	el resultante domnode o false en caso de error
XMLReader DOMNode expand DOMNode $basenode	devuelve una copia del actual nodo como un objeto dom
XMLReader get Attribute Ns $localName	el nombre local
XMLReader get Attribute Ns $namespaceURI	el uri del namespace
XMLReader string get Attribute Ns	el valor del atributo o una cadena vacia si ningun atributo con el localname dado y el namespaceuri es encontrado o no está posicionado en el eleménto
XMLReader string get Attribute Ns string $localName string $namespaceURI	obtiene el valor de un atributo por su nombre local y uri
XMLReader lookup Namespace $prefix	la cadena conteniendo el prefijo
XMLReader bool lookup Namespace	devuelve true en caso de éxito o false en caso de error
XMLReader bool lookup Namespace string $prefix	busca el namespace para un prefijo
XMLReader move To Attribute No $index	la posición de el atributo
XMLReader bool move To Attribute No	devuelve true en caso de éxito o false en caso de error
XMLReader bool move To Attribute No int $index	mueve el cursor a un atributo por su &iacute;ndice
XMLReader move To Attribute Ns $namespaceURI	el uri namespace
XMLReader move To Attribute Ns $localName	el nombre local
XMLReader bool move To Attribute Ns	devuelve true en caso de éxito o false en caso de error
XMLReader bool move To Attribute Ns string $localName string $namespaceURI	mover el cursor a un atributo dado
XMLReader bool move To Element	devuelve true si es satisfactorio y false si falla o no está posicionado en el atributo cuando éste método es llamado
XMLReader bool move To Element	posiciona el cursor en el elem&eacute;nto padre del actual atributo
XMLReader bool move To First Attribute	devuelve true en caso de éxito o false en caso de error
XMLReader bool move To First Attribute	posiciona el cursor en el primer atributo
XMLReader bool move To Next Attribute	devuelve true en caso de éxito o false en caso de error
XMLReader bool move To Next Attribute	posiciona el cursor en el siguiente atributo
XMLReader open $options	una mascara de bit de las contantes de libxml_*
XMLReader open $URI	el uri señalado para el documento
XMLReader open $encoding	el documento codificado o null
XMLReader bool open	devuelve true en caso de éxito o false en caso de error
XMLReader bool open string $URI string $encoding int $options	establece el uri conteniendo el xml a analizar
XMLReader string read Outer XML	devuelve el contenido del actual nodo incluyendo el de él mismo como una cadena
XMLReader string read Outer XML	recupera el xml del actual nodo incluyendo &eacute;l mismo
XMLReader string read String	devuelve el contenido del nodo actual como cadena
XMLReader string read String	lee el contenido del nodo actual como string
XMLReader set Parser Property $property	una de las constantes de opción del analizador
XMLReader set Parser Property $value	si se establece a true la opción será habilitada de otra manera será deshabilitada
XMLReader bool set Parser Property	devuelve true en caso de éxito o false en caso de error
XMLReader bool set Parser Property int $property bool $value	establecer las opciones del analizador
XMLReader set Relax NGSchema $filename	el nombre del archivo o apuntador uri a un esquema relaxng
XMLReader bool set Relax NGSchema	devuelve true en caso de éxito o false en caso de error
XMLReader bool set Relax NGSchema string $filename	establece el nomb re del archivo o el uri para un esquema relaxng
XMLReader set Relax NGSchema Source $source	scadena que contiene el esquema relaxng
XMLReader bool set Relax NGSchema Source	devuelve true en caso de éxito o false en caso de error
XMLReader bool set Relax NGSchema Source string $source	establece los datos contenidos en un esquema relaxng
XMLReader set Schema $filename	el nombre del archivo del esquema xsd
XMLReader bool set Schema	devuelve true en caso de éxito o false en caso de error
XMLReader bool set Schema string $filename	valida el documento en contra del xsd
XMLReader xml $encoding	la codificación del documento o null
XMLReader xml $options	una mascara bit de la constante libxml_*
XMLReader xml $source	la cadena que contiene el xml a ser analizado
XMLReader bool xml	devuelve true en caso de éxito o false en caso de error
XMLReader bool xml string $source string $encoding int $options	establece el contenido del xml a analizar
XSLTProcessor get Parameter $localName	el nombre local del parámetro xslt
XSLTProcessor get Parameter $namespaceURI	la uri del namespace del parámetro xslt
XSLTProcessor string get Parameter	el valor del parámetro como un string o false si no está definido
XSLTProcessor string get Parameter string $namespaceURI string $localName	obtiene el valor de un par&aacute;metro
XSLTProcessor import Stylesheet $stylesheet	la hoja de estilos importada como objeto domdocument o simplexmlelement
XSLTProcessor void import Stylesheet object $stylesheet	importa una hoja de estilos
XSLTProcessor remove Parameter $namespaceURI	la uri del namespace para el parámetro xslt
XSLTProcessor remove Parameter $localName	nombre local del parámetro xslt
XSLTProcessor bool remove Parameter	devuelve true en caso de éxito o false en caso de error
XSLTProcessor bool remove Parameter string $namespaceURI string $localName	elimina un par&aacute;metro
XSLTProcessor set Parameter $name	nombre local del parámetro xslt
XSLTProcessor set Parameter $options	un array de parejas nombre = > valor
XSLTProcessor set Parameter $namespace	la uri para el namespace del parámetro xslt
XSLTProcessor set Parameter $value	nuevo valor para el parámetro xslt
XSLTProcessor bool set Parameter	devuelve true en caso de éxito o false en caso de error
XSLTProcessor bool set Parameter string $namespace string $name string $value	establece el valor para uno o varios par&aacute;metros
XSLTProcessor set Profiling $filename	ruta al fichero donde volcar la información
XSLTProcessor bool set Profiling	devuelve true en caso de éxito o false en caso de error
XSLTProcessor bool set Profiling string $filename	establece el fichero de salida para la informaci&oacute;n resultado del proceso
XSLTProcessor transform To Doc $doc	el nodo a transformar
XSLTProcessor DOMDocument transform To Doc	el domdocument resultante o false en caso de error
XSLTProcessor DOMDocument transform To Doc DOMNode $doc	transforma en un domdocument
XSLTProcessor transform To URI $uri	devuelve la ubicación uri para la transformación
XSLTProcessor transform To URI $doc	el documento a transformar
XSLTProcessor int transform To URI	retorna el número de bytes escritos o false en caso de error
XSLTProcessor int transform To URI DOMDocument $doc string $uri	transformar a uri
Yaf_Action_Abstract mixed execute mixed $arg	punto de entrada de una acci&oacute;n
Yaf_Application void app	recuperar una instancia de la clase application
Yaf_Application construct $config	la ruta de un fichero de configuración ini o un array de configuración si es un fichero ini de configuración debería existir una sección con el mismo nombre que una definida por yaf
Yaf_Application construct $envrion	qué sección se cargará como configuración final
Yaf_Application mixed construct mixed $config string $envrion	el constructor de la clase yaf_application
Yaf_Application execute	los parámetros de se le pasarán a la llamada de retorno
Yaf_Application execute $entry	una llamada de retorno válida
Yaf_Application void execute callable $entry	ejecutar una llamada de retorno
Yaf_Application array get Modules	obtener los nombres de los modulos definidos
Yaf_Config_Ini construct $section	qué sección en cual fichero ini se quiere analizar
Yaf_Config_Ini construct $config_file	ruta al fichero de configuración ini
Yaf_Config_Ini string construct string $config_file string $section	constructor de yaf_config_ini
Yaf_Config_Ini array to Array	devuelve un array de php
Yaf_Config_Simple array to Array	devuelve un array de php
Yaf_Controller_Abstract - construct	constructor de yaf_controller_abstract
Yaf_Controller_Abstract forward $paramters	argumentos de llamada
Yaf_Controller_Abstract forward $action	el nombre de la acción destino
Yaf_Controller_Abstract forward $controller	el nombre del controlador destino
Yaf_Controller_Abstract forward $module	el nombre del módulo destino
Yaf_Controller_Abstract void forward string $action array $paramters	avanza a la siguiente acci&oacute;n
Yaf_Controller_Abstract string get Module Name	obtiene el nombre del m&oacute;dulo
Yaf_Controller_Abstract Yaf_Response_Abstract get Response	una instancia de yaf_response_abstract
Yaf_Controller_Abstract Yaf_Response_Abstract get Response	recupera el objeto respuesta actual
Yaf_Dispatcher catch Exception $flag	bool
Yaf_Dispatcher Yaf_Dispatcher catch Exception bool $flag	activar / desactivar la captura de excepciones
Yaf_Dispatcher Yaf_Response_Abstract dispatch Yaf_Request_Abstract $request	despachar una petici&oacute;n
Yaf_Dispatcher Yaf_Application get Application	recupera la aplicaci&oacute;n
Yaf_Dispatcher Yaf_Dispatcher register Plugin Yaf_Plugin_Abstract $plugin	registra un complemento
Yaf_Dispatcher set Error Handler $callback	una llamada de retorno de tipo callable
Yaf_Dispatcher Yaf_Dispatcher set Error Handler call $callback int $error_types	establece el gestor de errores
Yaf_Dispatcher throw Exception $flag	booleano
Yaf_Dispatcher Yaf_Dispatcher throw Exception bool $flag	activa / desactiva el lanzamiento de excepciones
Yaf_Loader register Local Namespace $prefix	un string o un a array con el prefijo del nombre de la clase
Yaf_Loader void register Local Namespace mixed $prefix	registra un prefijo de clase local
Yaf_Plugin_Abstract void router Shutdown Yaf_Request_Abstract $request Yaf_Response_Abstract $response	el prop&oacute;sito de routershutdown
Yaf_Plugin_Abstract void router Startup Yaf_Request_Abstract $request Yaf_Response_Abstract $response	enganche deel prop&oacute;sito de routerstartup
Yaf_Registry void del string $name	elimina un elemento del registro
Yaf_Registry mixed get string $name	recupera un elemento del registro
Yaf_Registry bool has string $name	comprueba si existe un elemento
Yaf_Registry bool set string $name string $value	a&ntilde;ade un elemento al registro
Yaf_Request_Abstract get Env $default	si se proporciona este parámetro se devolverá si la variable no puede ser encontrada
Yaf_Request_Abstract get Env $name	el nombre de la varaible
Yaf_Request_Abstract void get Env string $name string $default	recupera la variable env
Yaf_Request_Abstract set Base Uri $uir	el uri base
Yaf_Request_Abstract bool set Base Uri	booleano
Yaf_Request_Abstract bool set Base Uri string $uir	establecer el uri base
Yaf_Request_Http get Cookie $name	el nombre de la cookie
Yaf_Request_Http get Cookie $default	si se proporciona este parámetro será devuelto si no se pudo encontrar la cookie
Yaf_Request_Http mixed get Cookie string $name string $default	recupera una varible de cookie
Yaf_Request_Http get Post $default	si se proporciona este parámetro será devuelto si no se pudo encontrar la variable
Yaf_Request_Http get Post $name	el nombre de la variable
Yaf_Request_Http mixed get Post string $name string $default	recupera una variable de post
Yaf_Response_Abstract clear Body $key	la clave del contenido si no se especifica todo el contenido será limpiado
Yaf_Response_Abstract bool clear Body string $key	el prop&oacute;sito de clearbody
Yaf_Response_Abstract get Body $key	la clave del contenido si no se especifica se usará yaf_response_abstract::default_body
Yaf_Response_Abstract mixed get Body string $key	recupera un contenido existente
Yaf_Response_Abstract prepend Body $key	la clave del contenido se puede establecer una clave y so no se especifica se usará yaf_response_abstract::default_body
Yaf_Response_Abstract prepend Body $body	la cadena con el contenido
Yaf_Response_Abstract bool prepend Body	un valor de tipo booleano
Yaf_Response_Abstract bool prepend Body string $content string $key	el prop&oacute;sito de prependbody
Yaf_Response_Abstract void response	env&iacute;a una respuesta
Yaf_Response_Abstract set Body $key	la clave del contenido se puede establecer una clave y so no se especifica se usará yaf_response_abstract::default_body
Yaf_Response_Abstract set Body $body	la cadena con el contenido
Yaf_Response_Abstract bool set Body string $content string $key	establece el contenido de una respuesta
Yaf_Route_Interface string assemble array $info array $query	ensamblar una petici&oacute;n
Yaf_Route_Regex bool route	si el patrón dado por el primer parámetro de yaf_route_regex::_construct() coincide con el uri solicitado devuelve true si no devuelve false
Yaf_Route_Regex bool route Yaf_Request_Abstract $request	el prop&oacute;sito de route
Yaf_Route_Rewrite string assemble array $info array $query	ensamblar un url
Yaf_Route_Simple string assemble array $info array $query	ensamblar un url
Yaf_Route_Simple bool route	siempre es true
Yaf_Route_Simple bool route Yaf_Request_Abstract $request	enviar una petici&oacute;n
Yaf_Route_Static string assemble array $info array $query	ensamblar un url
Yaf_Route_Supervar string assemble array $info array $query	ensamblar un url
Yaf_Route_Supervar construct $supervar_name	el nombre de la clave
Yaf_Route_Supervar string construct string $supervar_name	el prop&oacute;sito de __construct
Yaf_Router bool add Config	una instancia de yaf_config_abstract la cual debería contener una o más configuraciones de rutas válidas
Yaf_Router bool add Config Yaf_Config_Abstract $config	a&ntilde;adir rutas definidas en configuraci&oacute;n al enrutador
Yaf_Router bool add Route string $name Yaf_Route_Abstract $route	a&ntilde;adir una nueva ruta al enrutador
Yaf_Router string get Current Route	una cadena el nombre de la ruta efectiva
Yaf_Router string get Current Route	obtener el nombre de la ruta efectiva
Yaf_Router Yaf_Route_Interface get Route string $name	recupera una ruta por su nombre
Yaf_Router mixed get Routes	recupera las rutas registradas
Yaf_View_Interface bool assign string $name string $value	asignar valores al motor de vistas
Yaf_View_Interface set Script Path $template_dir	una ruta absoluta al directorio de plantillas por omisión yaf_dispatcher usa application
Yaf_View_Interface void set Script Path string $template_dir	el prop&oacute;sito de setscriptpath
Yaf_View_Simple assign $name	una cadena o un array
Yaf_View_Simple assign $value	valor mixto
Yaf_View_Simple bool assign string $name mixed $value	asignar valores
Yaf_View_Simple assign Ref $value	valor mixto
Yaf_View_Simple assign Ref $name	un nombre como cadena que será usado para acceder al valor de la plantilla
Yaf_View_Simple bool assign Ref string $name mixed $value	el prop&oacute;sito de assignref
Yaf_View_Simple bool display string $tpl array $tpl_vars	interpretar y mostrar
Yaf_View_Simple eval $tpl_content	la plantilla de tipo string
Yaf_View_Simple string eval string $tpl_content array $tpl_vars	interpreta una plantilla
Yaf_View_Simple get $name	el nombre de la variable asignada
Yaf_View_Simple void get string $name	recupera una variable asignada
Yaf_View_Simple string render string $tpl array $tpl_vars	interpreta una plantilla
Yaf_View_Simple set $value	valor mixto
Yaf_View_Simple set $name	un nombre de valor de tipo string
Yaf_View_Simple void set string $name mixed $value	establece el valor para el motor
Yar_Client call $parameters	parámetros
Yar_Client call $method	nombre del método rpc remono
Yar_Client void call string $method array $parameters	llamar a un servicio
Yar_Client construct $url	el url del servidor de yar
Yar_Client string construct	una instancia de yar_client
Yar_Client string construct string $url	crear un cliente
Yar_Concurrent_Client boolean reset	limpiar todas las llamadas registradas
Yar_Server_Exception string get Type	string
Yar_Server_Exception string get Type	el prop&oacute;sito de gettype
Yar_Server construct $obj	un objeto todos sus métodos publicos serán registrados como servicioes rpc
Yar_Server Object construct	una instancia de yar_server
Yar_Server Object construct Object $obj	registrar un servidor
ZipArchive add File $filename	la ruta del fichero a añadir
ZipArchive add File $length	este parámetro no se utiliza pero es requerido si se extiende ziparchive
ZipArchive add File $localname	si corresponde este es el nombre local dentro del archivo zip que reemplazará el filename
ZipArchive add File $start	este parámetro no se utiliza pero es requerido si se extiende ziparchive
ZipArchive bool add File	devuelve true en caso de éxito o false en caso de error
ZipArchive bool add File string $filename string $localname int $start int $length	a&ntilde;ade un fichero al archivo zip para la ruta dada
ZipArchive add From String $localname	nombre de la entrada a crear
ZipArchive add From String $contents	el contenido a usar para crear la entrada
ZipArchive bool add From String	devuelve true en caso de éxito o false en caso de error
ZipArchive bool add From String string $localname string $contents	a&ntilde;adir un fichero al archivo zip usando su contenido
ZipArchive add Pattern $pattern	un patrón pcre contra el cual se realizará la correspondencia
ZipArchive add Pattern $options	un array asociativo de opciones aceptadas por ziparchive::addglob()
ZipArchive add Pattern $path	el directorio que será escaneado
ZipArchive bool add Pattern	devuelve true en caso de éxito o false en caso de error
ZipArchive bool add Pattern string $pattern string $path array $options	a&ntilde;ade ficheros de un directorio a partir de un patr&oacute;n pcre
ZipArchive bool close	devuelve true en caso de éxito o false en caso de error
ZipArchive bool close	cierra el fichero activo abierto o el nuevo creado
ZipArchive extract To $entries	las entradas a extraer
ZipArchive extract To $destination	destino en donde extraer los ficheros
ZipArchive bool extract To	devuelve true en caso de éxito o false en caso de error
ZipArchive bool extract To string $destination mixed $entries	extraer el contenido del archivo
ZipArchive get Archive Comment $flags	si las flags se establecen en ziparchive::fl_unchanged el comentario original se devuelve sin cambios
ZipArchive string get Archive Comment	devuelve el comentario del archivo zip o false en caso de error
ZipArchive string get Archive Comment int $flags	devuelve el comentario del archivo zip
ZipArchive get Comment Index $index	índice de la entrada
ZipArchive get Comment Index $flags	si flags ziparchive::fl_unchanged se devolverá el comentario original no cambiado
ZipArchive string get Comment Index	con éxito devuelve el comentario o false en caso de error
ZipArchive string get Comment Index int $index int $flags	devuelve el comentario de una entrada usando la entrada d&iacute;ndice
ZipArchive Get External Attributes Index $opsys	en caso de éxito recibe el código del sistema operativo definido por una de las constantes ziparchive::opsys_
ZipArchive Get External Attributes Index $flags	si flags se establece a ziparchive::fl_unchanged se devuelven los atributos originales sin cambios
ZipArchive Get External Attributes Index $attr	en caso de éxito recibe los atributos externos
ZipArchive Get External Attributes Index $index	el índice de la entrada
ZipArchive bool Get External Attributes Index	devuelve true en caso de éxito o false en caso de error
ZipArchive bool Get External Attributes Index int $index int $opsys int $attr int $flags	obtener los atributos externos de una entrada definida por su &iacute;ndice
ZipArchive get External Attributes Name $name	el nombre de la entrada
ZipArchive get External Attributes Name $opsys	en caso de éxito recibe el código del sistema operativo definido por una de las constantes ziparchive::opsys_
ZipArchive get External Attributes Name $flags	si flags se establece a ziparchive::fl_unchanged se devuelven los atributos originales sin cambios
ZipArchive get External Attributes Name $attr	en caso de éxito recibe los atributos externos
ZipArchive bool get External Attributes Name	devuelve true en caso de éxito o false en caso de error
ZipArchive bool get External Attributes Name string $name int $opsys int $attr int $flags	obtener los atributos externos de una entrada definida por su nombre
ZipArchive get From Index $flags	las flags usadas para abrir el fichero
ZipArchive get From Index $length	la longitud que se see desde la entrada
ZipArchive get From Index $index	el índice de la entrada
ZipArchive string get From Index	devuelve el contenido de la entrada si se ejecutó con éxito o false en caso de error
ZipArchive string get From Index int $index int $length int $flags	devuelve el contenido de la entrada usando su &iacute;ndice
ZipArchive string get Status String	devuelve un string con el mensaje de estado en caso de tener éxito o false en caso de error
ZipArchive string get Status String	devuelve mensajes de: estado de error de sistema y / o mensajes de zip
ZipArchive locate Name $flags	los indicadores son especificados agregándoles or a los siguientes valores ó 0 para ninguno de ellos
ZipArchive locate Name $name	el nombre de la entrada a buscar
ZipArchive mixed locate Name	devuelve el índice de la entrada en caso de tener éxito o false en caso de error
ZipArchive mixed locate Name string $name int $flags	devuelve el &iacute;ndice de la entrada en el archivo
ZipArchive open $filename	el nombre del fichero del archivo zip para ser abierto
ZipArchive open $flags	el modo a utilizar para abrir el archivo
ZipArchive mixed open	c devuelve true en caso de éxito o el código de error
ZipArchive mixed open string $filename int $flags	abrir un fichero de archivo en formato zip
ZipArchive rename Index $index	índice de la entrada a renombrar
ZipArchive rename Index $newname	nombre nuevo
ZipArchive bool rename Index	devuelve true en caso de éxito o false en caso de error
ZipArchive bool rename Index int $index string $newname	renombra una entrada definida por su &iacute;ndice
ZipArchive rename Name $name	nombre de la entrada a renombrar
ZipArchive rename Name $newname	nombre nuevo
ZipArchive bool rename Name	devuelve true en caso de éxito o false en caso de error
ZipArchive bool rename Name string $name string $newname	renombra una entrada definida por su nombre
ZipArchive set Comment Index $index	índice de la entrada
ZipArchive set Comment Index $comment	los contenidos del comentario
ZipArchive mixed set Comment Index	devuelve true en caso de éxito o false en caso de error
ZipArchive mixed set Comment Index int $index string $comment	establece el comentario de una entrada definido por su &iacute;ndice
ZipArchive set Comment Name $name	nombre de la entrada
ZipArchive set Comment Name $comment	los contenidos del comentario
ZipArchive mixed set Comment Name	devuelve true en caso de éxito o false en caso de error
ZipArchive mixed set Comment Name string $name string $comment	establece el comentario de una entrada definido por su nombre
ZipArchive set Compression Index $comp_method	el método de compresión
ZipArchive set Compression Index $comp_flags	banderas de compresión
ZipArchive set Compression Index $index	el índice de la entrada
ZipArchive bool set Compression Index	devuelve true en caso de éxito o false en caso de error
ZipArchive bool set Compression Index int $index int $comp_method int $comp_flags	establecer el m&eacute;todo de compresi&oacute;n de una entrada definida por su &iacute;ndice
ZipArchive set External Attributes Name $name	el nombre de la entrada
ZipArchive set External Attributes Name $attr	los atributos externos
ZipArchive set External Attributes Name $opsys	el código del sistema operativo definido por una de las constantes ziparchive::opsys_
ZipArchive set External Attributes Name $flags	banderas opcionales
ZipArchive bool set External Attributes Name	devuelve true en caso de éxito o false en caso de error
ZipArchive bool set External Attributes Name string $name int $opsys int $attr int $flags	establece los atributos externos de una entrada definida por su nombre
ZipArchive set Password $password	la contraseña a emplear para el archivo
ZipArchive bool set Password	devuelve true en caso de éxito o false en caso de error
ZipArchive bool set Password string $password	establece la contrase&ntilde;a para el archivo activo
ZipArchive stat Name $name	nombre de la entrada
ZipArchive stat Name $flags	el argumento flags especifica cómo la búsqueda del nombre debería se hecho
ZipArchive mixed stat Name	devuelve una matríz que contenie detalles de la entrada o false en caso de error
ZipArchive mixed stat Name string $name int $flags	obtener los detalles de una entrada definida por su nombre
ZipArchive mixed unchange All	devuelve true en caso de éxito o false en caso de error
ZipArchive mixed unchange All	deshacer todos los cambios hechos en el archivo
ZipArchive unchange Name $name	nombre de la entrada
ZipArchive bool unchange Name	devuelve true en caso de éxito o false en caso de error
ZipArchive bool unchange Name string $name	deshace todos los cambios realizados a una entrada con un nombre dado
ZMQ - construct	el constructor de zmq
ZMQContext construct $io_threads	número de hilos de entrada / salida del contexto
ZMQContext construct $is_persistent	si el contexto es persistente
ZMQContext integer construct	lanza una zmqcontextexception si la inicialización del contexto falla
ZMQContext integer construct integer $io_threads boolean $is_persistent	construir un nuevo objeto zmqcontext
ZMQContext get Opt $key	un entero que representa la opción
ZMQContext mixed get Opt	devuelve un string o un integer dependiendo de key
ZMQContext mixed get Opt string $key	obtener la opci&oacute;n de contexto
ZMQContext get Socket $persistent_id	si se especifica persistent_id el socket será persistente durante varias peticiones
ZMQContext get Socket $on_new_socket	función de retrollamada que es ejecutada cuando se crea una nueva estrucutra de socket
ZMQContext get Socket $type	constante zmq::socket_* para especificar el tipo de socket
ZMQContext ZMQSocket get Socket	devuelve un objeto zmqsocket en caso de éxito
ZMQContext ZMQSocket get Socket integer $type string $persistent_id callback $on_new_socket	crear un nuevo socket
ZMQContext boolean is Persistent	devuelve true si el contexto es persistente y false si no lo es
ZMQContext boolean is Persistent	indicar si el contexto es persistente
ZMQContext set Opt $value	el valor del parámetro
ZMQContext set Opt $key	una de las constantes zmq::ctxopt_*
ZMQContext ZMQContext set Opt	devuelve el objeto actual
ZMQContext ZMQContext set Opt integer $key mixed $value	establecer una opci&oacute;n de socket
ZMQDevice construct $frontend	parámetro frontend para los dispositivos
ZMQDevice construct $listener	socket escuchador el cual recibe una copia de todos los mensajes en ambas direcciones
ZMQDevice construct $backend	parámetro backend para los dispositivos
ZMQDevice ZMQSocket construct	una llamada a este método preparará el dispositivo
ZMQDevice ZMQSocket construct ZMQSocket $frontend ZMQSocket $backend ZMQSocket $listener	construir un nuevo dispositivo
ZMQDevice void run	ejecutar el nuevo dispositivo
ZMQDevice set Idle Timeout $timeout	el valor del tiempo de espera de la retrollamada de inactividad
ZMQDevice ZMQDevice set Idle Timeout	en caso de éxito este método devuelve el objeto actual
ZMQDevice ZMQDevice set Idle Timeout integer $timeout	establecer el tiempo de espera para la inactividad
ZMQDevice set Timer Callback $user_data	datos adcionales a pasar a la función de retrollamada
ZMQDevice set Timer Callback $timeout	frecuencia con la que se invoca la retrollamada de inactividad en milisegundos
ZMQDevice set Timer Callback $cb_func	función de retrollamada a invocar cuando el dispositivo está inactivo
ZMQDevice ZMQDevice set Timer Callback	en caso de éxito este método devuelve el objeto actual
ZMQDevice ZMQDevice set Timer Callback callable $cb_func integer $timeout mixed $user_data	establecer la funci&oacute;n de retrollamada del temporizador
ZMQDevice set Timer Timeout $timeout	el valor del tiempo de espera de la retrollamada del temporizador
ZMQDevice ZMQDevice set Timer Timeout	en caso de éxito este método devuelve el objeto actual
ZMQDevice ZMQDevice set Timer Timeout integer $timeout	establecer el tiempo de espera del temporizador
ZMQPoll add $type	defina la actidad para la que es sondeado el socket véanse las constantes zmq::poll_in y zmq::poll_out
ZMQPoll add $entry	un objeto zmqsocket o un recursode de flujo de php
ZMQPoll string add	devuelve el id del elemento añadido el cual puede ser empleado más adelante para eliminar el elemento
ZMQPoll string add mixed $entry integer $type	a&ntilde;adir un elemento al conjunto de sondeo
ZMQPoll ZMQPoll clear	returns the current object
ZMQPoll ZMQPoll clear	limpiar el conjunto de sondeo
ZMQPoll integer count	devuelve un integer que representa la cantidad de elementos del conjunto de sondeo
ZMQPoll integer count	contar los elementos del conjunto de sondeo
ZMQPoll array get Last Errors	devueve un array que contiene los id de los elementos que poseen errores en el último sondeo
ZMQPoll array get Last Errors	obtener los errores del sondeo
ZMQSocket string get Persistent Id	devuelve el id de persistencia asignado al objeto y null si el socket no es persistente
ZMQSocket string get Persistent Id	obtener el id de persistencia
ZMQSocket integer get Socket Type	devuelve un número entero que representa el tipo de socket
ZMQSocket integer get Socket Type	obtener el tipo de socket
ZMQSocket get Sock Opt $key	un número entero que representa la opción
ZMQSocket mixed get Sock Opt	devuelve un string o un integer dependiendo de key
ZMQSocket mixed get Sock Opt string $key	obtener la opci&oacute;n de un socket
ZMQSocket boolean is Persistent	devuelve un boolean basado en si el socket es persistente o no
ZMQSocket boolean is Persistent	comprobrar si un socket es persistente
ZMQSocket recv $mode	proporcionar banderas de modo para recibir mensajes multiparte o hacer que la operación no quede en espera
ZMQSocket string recv	devuelve el mensaje
ZMQSocket string recv integer $mode	recibir un mensaje
ZMQSocket recv Multi $mode	proporcionar banderas de modo para recibir mensajes multiparte o hacer que la operación no quede en espera
ZMQSocket string recv Multi	devuelve el array con las partes del mensaje
ZMQSocket string recv Multi integer $mode	recibir un mensaje multiparte
ZMQSocket send $message	el mensaje a enviar
ZMQSocket send $mode	proporcionar banderas de modo para recibir mensajes multiparte o hacer que la operación no quede en espera
ZMQSocket ZMQSocket send	devuelve el objeto actual
ZMQSocket ZMQSocket send string $message integer $mode	enviar un mensaje
ZMQSocket set Sock Opt $value	el valor del parámetro
ZMQSocket set Sock Opt $key	uno de las constantes zmq::sockopt_*
ZMQSocket ZMQSocket set Sock Opt	devuelve el objeto actual
ZMQSocket ZMQSocket set Sock Opt integer $key mixed $value	establecer una opci&oacute;n de socket
ZMQSocket unbind $dsn	el dsn vinculado previamente por ejemplo transporte: / / dirección
ZMQSocket ZMQSocket unbind	devuelve el objeto actual
ZMQSocket ZMQSocket unbind string $dsn	desvincular el socket
