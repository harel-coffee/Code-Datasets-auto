None	given a set of strings calculate the set of unambiguous abbreviations for those strings and return a hash where the keys are all the possible abbreviations and the values are the full strings
None	calculates the set of unambiguous abbreviations for the strings in self
None	returns the base64-decoded version of str
None	returns the base64-encoded version of bin
None	returns the base64-decoded version of str
None	returns the base64-encoded version of bin
None	returns the base64-decoded version of str
None	returns the base64-encoded version of bin
None	invokes the block with a benchmark :report object which may be used to collect and report on the results of individual benchmark tests
None	a simple interface to the benchmark method bm generates sequential reports with labels
None	sometimes benchmark results are skewed because code executed earlier encounters different garbage collection overheads than that run later
None	returns the time used to execute the given block as a benchmark :tms object
None	returns the elapsed real time used to execute the given block
None	returns an initialized tms object which has utime as the user cpu time stime as the system cpu time cutime as the children’s user cpu time cstime as the children’s system cpu time real as the elapsed real time and label as the label
None	returns a new tms object obtained by memberwise multiplication of the individual times for this tms object by x
None	returns a new tms object obtained by memberwise summation of the individual times for this tms object with those of the other tms object
None	returns a new tms object obtained by memberwise subtraction of the individual times for the other tms object from those of this tms object
None	returns a new tms object obtained by memberwise division of the individual times for this tms object by x
None	returns a new tms object whose times are the sum of the times for this tms object plus the time required to execute the code block blk
None	an in-place version of add
None	returns the contents of this tms object as a formatted string according to a format string like that passed to kernel
None	returns a new 6-element array consisting of the label user cpu time system cpu time children’s user cpu time children’s system cpu time and elapsed real time
None	returns a new tms object obtained by memberwise operation op of the individual times for this tms object with those of the other tms object
None	internal method used to provide marshalling support
None	the ::double_fig class method returns the number of digits a float number is allowed to have
None	limit the number of significant digits in newly created bigdecimal numbers to the specified value
None	controls handling of arithmetic exceptions and rounding
None	create a new bigdecimal object
None	execute the provided block but preserve the exception mode for use with the bigdecimal :exception_* see ::mode
None	execute the provided block but preserve the precision limit
None	execute the provided block but preserve the rounding mode for use with the bigdecimal :round_* see ::mode
None	returns the bigdecimal version number
None	multiply by the specified value
None	returns the value raised to the power of n
None	add the specified value
None	return self
None	return the negation of self
None	divide by the specified value
None	the comparison operator
None	tests for value equality returns true if the values are equal
None	tests for value equality returns true if the values are equal
None	method used to provide marshalling support
None	returns the absolute value as a bigdecimal
None	return the smallest integer greater than or equal to the value as a bigdecimal
None	the coerce method provides support for ruby type coercion
None	divides by the specified value and returns the quotient and modulus as bigdecimal numbers
None	tests for value equality returns true if the values are equal
None	returns the exponent of the bigdecimal number as an integer
None	returns true if the value is finite not nan or infinite
None	return the integer part of the number as a bigdecimal
None	return the largest integer less than or equal to the value as a bigdecimal
None	return the fractional part of the number as a bigdecimal
None	creates a hash for this bigdecimal
None	returns nil -1 or +1 depending on whether the value is finite -infinity or +infinity
None	returns debugging information about the value as a string of comma-separated values in angle brackets with a leading #: the first part is the address the second is the value as a string and the final part ss mm is the current number of significant digits and the maximum number of significant digits respectively
None	returns the modulus from dividing by b
None	returns true if the value is not a number
None	returns self if the value is non-zero nil otherwise
None	returns the value raised to the power of n
None	returns an array of two integer values
None	divide by the specified value
None	returns the remainder from dividing by the value
None	round to the nearest integer by default returning the result as a bigdecimal
None	returns the sign of the value
None	splits a bigdecimal number into four parts returned as an array of values
None	returns the square root of the value
None	subtract the specified value
None	returns self
None	converts a bigdecimal to a string of the form “nnnnnn
None	returns a new float object having approximately the same value as the bigdecimal number
None	returns the value as an integer fixnum or bignum
None	returns the value as an integer fixnum or bignum
None	converts a bigdecimal to a rational
None	converts the value to a string
None	truncate to the nearest integer by default returning the result as a bigdecimal
None	returns true if the value is zero
None	computes the value of e the base of natural logarithms raised to the power of decimal to the specified number of digits of precision
None	computes the natural logarithm of decimal to the specified number of digits of precision numeric
None	computes e the base of natural logarithms to the specified number of digits of precision numeric
None	computes the value of pi to the specified number of digits of precision numeric
None	computes the arctangent of decimal to the specified number of digits of precision numeric
None	computes the cosine of decimal to the specified number of digits of precision numeric
None	computes the sine of decimal to the specified number of digits of precision numeric
None	computes the square root of decimal to the specified number of digits of precision numeric
None	convert flt to a bigdecimal and return it
None	convert int to a bigdecimal and return it
None	computes the derivative of f at x
None	determines the equality of two numbers by comparing to zero or using the epsilon value
None	computes the jacobian of f at x
None	performs lu decomposition of the n by n matrix a
None	solves a*x = b for x using lu decomposition
None	converts a rational to a bigdecimal
None	convert string to a bigdecimal and return it
None	return the accept character set for all new cgi instances
None	set the accept character set for all new cgi instances
None	create a new cgi instance
None	parse an http query string into a hash of key=>value pairs
None	this method is an alias for http_header when html5 tag maker is inactive
None	create an http header block as a string
None	print an http header and body to $default_output $>) if a string is passed it is assumed to be the content type
None	print an argument or list of arguments to the default output stream
None	create a new cgi :cookie object
None	parse a raw cookie string into a hash of cookie-name=>cookie pairs
None	set whether the cookie is a httponly cookie or not
None	a summary of cookie string
None	set whether the cookie is a secure cookie or not
None	convert the cookie to its string representation
None	returns the value or list of values for this cookie
None	replaces the value of this cookie with a new value or list of values
None	generate an anchor element as a string
None	generate a document base uri element as a string
None	generate a blockquote element as a string
None	generate a table caption element as a string
None	generate a checkbox input element as a string
None	generate a sequence of checkbox elements as a string
None	generate an file upload input element as a string
None	generate a form element as a string
None	generate a hidden input element as a string
None	generate a top-level html element as a string
None	generate an image button input element as a string
None	generate an image element as a string
None	generate a form element with multipart encoding as a string
None	generate a password input element as a string
None	generate a select element as a string
None	generates a radio-button input element
None	generate a sequence of radio button input elements as a string
None	generate a reset button input element as a string
None	generate a submit button input element as a string
None	generate a text field input element as a string
None	generate a textarea element as a string
None	get the value for the parameter with a given key
None	returns true if a given query string parameter exists
None	return all query parameter names as an array of string
None	returns whether the form contained multipart/form-data
None	set all the parameters
None	get the raw cookies as a string
None	get the raw rfc2965 cookies as a string
None	create a new cgi :session object for request
None	retrieve the session data for key key
None	set the session data for key key
None	store session data on the server and close the session storage
None	delete the session from storage
None	store session data on the server
None	url-encode a string
None	escape only the tags of certain html elements in string
None	escape special characters in html namely & <>
None	synonym for cgi :escapeelement str
None	synonym for cgi :escapehtml str
None	prettify indent an html string
None	format a time object as a string using the format specified by rfc 1123
None	url-decode a string with encoding optional
None	undo escaping such as that done by cgi :escapeelement()
None	unescape a string that has been html-escaped
None	synonym for cgi :unescapeelement str
None	synonym for cgi :unescapehtml str
None	create a new filestore instance
None	update and close the session’s filestore file
None	close and delete the session’s filestore file
None	restore session state from the session’s filestore file
None	save session state to the session’s filestore file
None	create a new memorystore instance
None	close session storage
None	delete the session state
None	restore session state
None	update session state
None	create a new nullstore instance
None	close session storage
None	delete the session state
None	restore empty session state
None	update session state
None	create a new cgi :session :pstore instance this constructor is used internally by cgi :session
None	update and close the session’s pstore file
None	close and delete the session’s pstore file
None	restore session state from the session’s pstore file
None	save session state to the session’s pstore file
None	returns the arc cosine of z
None	returns the inverse hyperbolic cosine of z
None	returns the arc sine of z
None	returns the inverse hyperbolic sine of z
None	returns the arc tangent of z
None	returns the arc tangent of y divided by x using the signs of y and x to determine the quadrant
None	returns the inverse hyperbolic tangent of z
None	returns the principal value of the cube root of z
None	returns the cosine of z where z is given in radians
None	returns the hyperbolic cosine of z where z is given in radians
None	math :e raised to the z power
None	returns the natural logarithm of complex
None	returns the base 10 logarithm of z
None	returns the base 2 logarithm of z
None	returns the sine of z where z is given in radians
None	returns the hyperbolic sine of z where z is given in radians
None	returns the non-negative square root of complex
None	returns the tangent of z where z is given in radians
None	returns the hyperbolic tangent of z where z is given in radians
None	returns a hash that contains filename as key and coverage array as value
None	returns a hash that contains filename as key and coverage array as value and disables coverage measurement
None	enables coverage measurement
None	this method is a convenience for building unix-like filters for csv data
None	this method is intended as the primary interface for reading csv files
None	this method wraps a string you provide or an empty default string in a csv object which is passed to the provided block
None	this method will return a csv instance just like ::new but the instance will be cached and returned for all future calls to this method for the same data object tested by object#object_id()) with the same options
None	this constructor will wrap either a string or io object passed in data for reading and/or writing
None	this method opens an io object and wraps that with csv
None	this method can be used to easily parse csv out of a string
None	use to slurp a csv file into an array of arrays
None	the primary write method for wrapped strings and ios row an array or csv :row) is converted to csv and appended to the data source
None	you can use this method to install a csv :converters built-in or provide a block that handles a custom conversion
None	returns the current list of converters in effect
None	yields each row of the data source in turn
None	returns true if all output fields are quoted
None	identical to #convert but for header rows
None	returns the current list of converters in effect for headers
None	returns true if the next row read will be a header row
None	returns nil if headers will not be used true if they will but have not yet been read or the actual headers after they have been read
None	returns a simplified description of the key csv attributes in an ascii compatible string
None	returns true if headers will be returned as a row of results
None	rewinds the underlying io object and resets csv’s lineno() counter
None	the primary read method for wrapped strings and ios a single row is pulled from the data source parsed and returned as an array of fields if header rows are not used or a csv :row when header rows are used
None	returns true blank lines are skipped by the parser
None	returns true if unconverted_fields() to parsed results
None	returns true if headers are written in output
None	passes args to csv
None	construct a new csv :row from headers and fields which are expected to be arrays
None	if a two-element array is provided it is assumed to be a header and field and the pair is appended
None	returns true if this row contains the same headers and fields in the same order as other
None	looks up the field by the semantics described in #field and assigns the value
None	used to remove a pair from the row by header or index
None	the provided block is passed a header and field for each pair in the row and expected to return true or false depending on whether the pair should be deleted
None	yields each pair of the row as header and field tuples much like iterating over a hash
None	this method will fetch the field value by header
None	this method will return the field value by header or index
None	returns true if data matches a field in this row and false otherwise
None	returns true if this is a field row
None	this method accepts any number of arguments which can be headers indices ranges of either or two-element arrays containing a header and offset
None	returns true if there is a field with the given header
None	returns true if name is a header for this row and false otherwise
None	returns true if this is a header row
None	returns the headers of this row
None	this method will return the index of a field with the provided header
None	a summary of fields by header in an ascii compatible string
None	returns the row as a csv string
None	collapses the row into a simple hash
None	construct a new csv :table from array_of_rows which are expected to be csv :row objects
None	adds a new row to the bottom end of this table
None	returns true if all rows of this table ==() other‘s rows
None	in the default mixed mode this method returns rows for index access and columns for header access
None	in the default mixed mode this method assigns rows for index access and columns for header access
None	returns a duplicate table object in column mode
None	switches the mode of this table to column mode
None	returns a duplicate table object in mixed mode
None	switches the mode of this table to mixed mode
None	returns a duplicate table object in row mode
None	switches the mode of this table to row mode
None	removes and returns the indicated column or row
None	removes any column or row for which the block returns true
None	in the default mixed mode or row mode iteration is the standard row major walking of rows
None	returns the headers for the first row of this table assumed to match all other rows
None	shows the mode and size of this table in a us-ascii string
None	returns the table as an array of arrays
None	returns the table as a complete csv string
None	the mixed mode default is to treat a list of indices as row access returning the rows indicated
None	returns a hash of parsed elements
None	returns a hash of parsed elements
None	returns a hash of parsed elements
None	parses the given representation of date and time and returns a hash of parsed elements
None	returns a hash of parsed elements
None	returns a hash of parsed elements
None	returns a hash of parsed elements
None	parses the given representation of date and time with the given template and returns a hash of parsed elements
None	returns a hash of parsed elements
None	creates a date object denoting the given calendar date
None	creates a date object denoting the given week date
None	returns true if the given year is a leap year of the proleptic gregorian calendar
None	creates a new date object by parsing from a string according to some rfc 2616 format
None	creates a new date object by parsing from a string according to some typical iso 8601 formats
None	creates a date object denoting the given chronological julian day number
None	creates a new date object by parsing from a string according to some typical jis x 0301 formats
None	returns true if the given year is a leap year of the proleptic julian calendar
None	returns true if the given year is a leap year of the proleptic gregorian calendar
None	creates a date object denoting the given calendar date
None	creates a date object denoting the given ordinal date
None	parses the given representation of date and time and creates a date object
None	creates a new date object by parsing from a string according to some typical rfc 2822 formats
None	creates a new date object by parsing from a string according to some typical rfc 3339 formats
None	creates a new date object by parsing from a string according to some typical rfc 2822 formats
None	parses the given representation of date and time with the given template and creates a date object
None	creates a date object denoting the present day
None	returns true if the given calendar date is valid and false if not
None	returns true if the given week date is valid and false if not
None	returns true if the given calendar date is valid and false if not
None	just returns true
None	returns true if the given ordinal date is valid and false if not
None	creates a new date object by parsing from a string according to some typical xml schema formats
None	returns a date object pointing other days after self
None	returns a date object pointing n months before self
None	compares the two dates and returns -1 zero 1 or nil
None	returns true if they are the same day
None	returns a date object pointing n months after self
None	returns the astronomical julian day number
None	returns the astronomical modified julian day number
None	returns a string in asctime 3 format but without “n0” at the end)
None	returns a string in asctime 3 format but without “n0” at the end)
None	returns the day of calendar week 1-7 monday is 1
None	returns the calendar week number 1-53
None	returns the calendar week based year
None	returns the day of the month 1-31
None	returns the fractional part of the day
None	this method is equivalent to step min -1 {|date| …}
None	this method is equivalent to #new_start(date :england)
None	returns true if the date is friday
None	this method is equivalent to #new_start(date :gregorian)
None	retunrs true if the date is on or after the day of calendar reform
None	returns the value as a string for inspection
None	this method is equivalent to #new_start(date :italy)
None	this method is equivalent to #new_start(date :julian)
None	retruns true if the date is before the day of calendar reform
None	returns the lilian day number
None	returns the day of the month 1-31
None	returns the modified julian day number
None	returns the month 1-12
None	returns true if the date is monday
None	returns the month 1-12
None	duplicates self and resets its the day of calendar reform
None	returns a date object denoting the following day
None	this method is equivalent to d + n
None	this method is equivalent to d >> n
None	this method is equivalent to d >> n * 12)
None	this method is equivalent to d - n
None	this method is equivalent to d << n
None	this method is equivalent to d << n * 12)
None	returns true if the date is saturday
None	returns the julian day number denoting the day of calendar reform
None	iterates evaluation of the given block which takes a date object
None	returns a date object denoting the following day
None	returns true if the date is sunday
None	returns true if the date is thursday
None	returns self
None	returns a datetime object which denotes self
None	returns a string in an iso 8601 format this method doesn’t use the expanded representations)
None	returns a time object which denotes self
None	returns true if the date is tuesday
None	this method is equivalent to step max 1 {|date| …}
None	returns the day of week 0-6 sunday is zero
None	returns true if the date is wednesday
None	returns the day of the year 1-366
None	returns the year
None	parses the given representation of date and time with the given template and returns a hash of parsed elements
None	creates a date-time object denoting the given calendar date
None	creates a date-time object denoting the given week date
None	creates a new date object by parsing from a string according to some rfc 2616 format
None	creates a new date object by parsing from a string according to some typical iso 8601 formats
None	creates a datetime object denoting the given chronological julian day number
None	creates a new date object by parsing from a string according to some typical jis x 0301 formats
None	creates a date-time object denoting the given calendar date
None	creates a date-time object denoting the present time
None	creates a date-time object denoting the given ordinal date
None	parses the given representation of date and time and creates a date object
None	creates a new date object by parsing from a string according to some typical rfc 2822 formats
None	creates a new date object by parsing from a string according to some typical rfc 3339 formats
None	creates a new date object by parsing from a string according to some typical rfc 2822 formats
None	parses the given representation of date and time with the given template and creates a date object
None	creates a new date object by parsing from a string according to some typical xml schema formats
None	returns a date object which denotes self
None	returns self
None	returns a string in an iso 8601 format this method doesn’t use the expanded representations)
None	returns a time object which denotes self
None	returns a date object which denotes self
None	returns a datetime object which denotes self
None	returns a copy of self as local mode
None	open a dbm database with the specified name which can include a directory path
None	open a dbm database and yields it if a block is given
None	deletes all data from the database
None	closes the database
None	returns true if the database is closed false otherwise
None	deletes an entry from the database
None	deletes all entries for which the code block returns true
None	calls the block once for each key value pair in the database
None	calls the block once for each key string in the database
None	calls the block once for each value string in the database
None	returns true if the database is empty false otherwise
None	return a value from the database by locating the key string provided
None	returns true if the database contains the specified key false otherwise
None	returns true if the database contains the specified string value false otherwise
None	returns true if the database contains the specified key false otherwise
None	returns a hash not a dbm database created by using each value in the database as a key with the corresponding key as its value
None	returns the key for the specified value
None	returns true if the database contains the specified key false otherwise
None	returns an array of all the string keys in the database
None	returns the number of entries in the database
None	returns true if the database contains the specified key false otherwise
None	converts the contents of the database to an in-memory hash then calls hash#reject with the specified code block returning a new hash
None	deletes all entries for which the code block returns true
None	replaces the contents of the database with the contents of the specified object
None	returns a new array consisting of the key value pairs for which the code block returns true
None	removes a key value pair from the database and returns it
None	returns the number of entries in the database
None	stores the specified string value in the database indexed via the string key provided
None	converts the contents of the database to an array of key value arrays and returns it
None	converts the contents of the database to an in-memory hash object and returns it
None	updates the database with multiple values from the specified object
None	returns true if the database contains the specified string value false otherwise
None	returns an array of all the string values in the database
None	returns an array containing the values associated with the given keys
None	returns the list of break points where execution will be stopped
None	returns the display expression list see debugger__ for more usage
None	returns the io used as stdout
None	sets the io used as stdout
None	prints all threads in @thread_list to @stdout
None	returns the list of waiting threads
None	pass in the obj to delegate method calls to
None	delegates ! to the _getobj_
None	returns true if two objects are not considered of equal value
None	returns true if two objects are considered of equal value
None	this method must be overridden by subclasses and should return the object method calls are being delegated to
None	this method must be overridden by subclasses and change the object delegate to obj
None	freeze both the object returned by _getobj_ and self
None	serialization support for the object returned by _getobj_
None	reinitializes delegation from a serialized object
None	handles the magic of delegation through _getobj_
None	returns the methods available to this delegate object as the union of this object’s and _getobj_ methods
None	returns the methods available to this delegate object as the union of this object’s and _getobj_ protected methods
None	returns the methods available to this delegate object as the union of this object’s and _getobj_ public methods
None	use __raise__ if your delegator does not have a object to delegate the raise method call
None	checks for a method provided by this the delegate object by forwarding the call through _getobj_
None	taint both the object returned by _getobj_ and self
None	trust both the object returned by _getobj_ and self
None	untaint both the object returned by _getobj_ and self
None	untrust both the object returned by _getobj_ and self
None	the primary interface to this library
None	returns the current object method calls are being delegated to
None	changes the delegate object to obj
None	returns a bubblebabble encoded version of a given string
None	generates a hex-encoded version of a given string
None	returns a digest subclass by name in a thread-safe manner even when on-demand loading is involved
None	frozen_string_literal false
None	returns the base64 encoded hash value of a given string
None	returns the bubblebabble encoded hash value of a given string
None	returns the hash value of a given string
None	creates a digest object and reads a given file name
None	returns the hex-encoded hash value of a given string
None	updates the digest using a given string and returns self
None	if a string is given checks whether it is equal to the hex-encoded hash value of the digest object
None	if none is given returns the resulting hash value of the digest in a base64 encoded form keeping the digest’s state
None	returns the resulting hash value and resets the digest to the initial state
None	returns the block length of the digest
None	returns the resulting hash value in a bubblebabble encoded form
None	if none is given returns the resulting hash value of the digest keeping the digest’s state
None	returns the resulting hash value and resets the digest to the initial state
None	returns the length of the hash value of the digest
None	updates the digest with the contents of a given file name and returns self
None	if none is given returns the resulting hash value of the digest in a hex-encoded form keeping the digest’s state
None	returns the resulting hash value in a hex-encoded form and resets the digest to the initial state
None	creates a printable version of the digest object
None	returns digest_obj
None	returns a new initialized copy of the digest object
None	resets the digest to the initial state and returns self
None	returns digest_obj
None	returns digest_obj
None	updates the digest using a given string and returns self
None	creates a new sha2 hash object with a given bit length
None	returns the block length of the digest in bytes
None	returns the length of the hash value of the digest in bytes
None	resets the digest to the initial state and returns self
None	updates the digest using a given string and returns self
None	creates a new acl from list with an evaluation order of deny_allow or allow_deny
None	allow connections from addrinfo addr? it must be formatted like socket#peeraddr
None	allow connections from socket soc?
None	adds list of acl entries to this acl
None	get the configuration of the current server
None	get the ‘current’ server
None	retrieves the server with the given uri
None	get the front object of the current server
None	is uri the uri for the current local server?
None	set the default acl to acl
None	set the default id conversion object
None	registers server with drb
None	removes server from the list of registered servers
None	start a druby server locally
None	stop the local druby server
None	get the thread of the primary server
None	get a reference id for an object using the current server
None	convert a reference into an object using the current server
None	get the uri defining the local druby space
None	creates a new drbarray that either dumps or wraps all the items in the array ary so they can be loaded by a remote drb server
None	convert an object into a reference id
None	convert an object reference id to an object
None	unmarshall a marshalled drbobject
None	create a new remote object stub
None	creates a drb :drbobject given the reference information to the remote host uri and object ref
None	create a new drbobject from a uri alone
None	get the reference of the object if local
None	get the uri of the remote object
None	marshall this object
None	routes method calls to the referenced remote object
None	routes respond_to? to the referenced remote object
None	notifies observers of a change in state
None	add a new protocol to the drbprotocol module
None	open a client connection to uri with the configuration config
None	open a server listening for connections at uri with configuration config
None	parse uri into a uri option pair
None	creates a new remote error that wraps the exception error
None	set the default access control list to acl
None	set the default value for the :argc_limit option
None	set the default value for the :id_conv option
None	set the default value for the :load_limit option
None	set the default safe level to level
None	create a new drbserver instance
None	get the default value of the :verbose option
None	set the default value of the :verbose option
None	is this server alive?
None	check that a method is callable via druby
None	is uri the uri for this server?
None	stop this server
None	convert a local object to a druby reference
None	convert a druby reference to the local object it refers to
None	create a drb :drbsslsocket instance
None	return an drb :drbsslsocket instance as a client-side connection with the ssl connected
None	returns a drb :drbsslsocket instance as a server-side connection with the ssl connected
None	create a new drbunknown object
None	create a drbunknownerror exception containing this object
None	attempt to load the wrapped marshalled object again
None	create a new drbunknownerror for the drb :drbunknown object unknown
None	creates a new gw
None	retrieves key from the gw
None	stores value v at key in the gw
None	creates a new timeridconv which will hold objects for timeout seconds
None	create a new drb :drbsslsocket :sslconfig instance the drb :drbsslsocket will take either a config hash or an instance of sslconfig and will setup the certificate for its session for the configuration
None	a convenience method to access the values like a hash
None	accept connection to io tcp with context of the current certificate configuration
None	connect to io tcp with context of the current certificate configuration
None	ensures that :sslcertificate and :sslprivatekey have been provided or that a new certificate is generated with the other parameters provided
None	establish the openssl :ssl :sslcontext with the configuration parameters provided
None	creates a new entry using str
None	matches addr against this entry
None	creates an empty acllist
None	adds str as an aclentry in this list
None	matches addr against each aclentry in this list
None	fail(err *rest)
None	constructs a new erb object with the template specified in str
None	returns revision information for the erb
None	define unnamed class which has methodname as instance method and return it
None	define methodname as instance method of mod from compiled ruby source
None	create unnamed module define methodname as instance method of it and return it
None	creates a new compiler for erb
None	executes the generated erb code to produce a completed template returning the results of that code
None	generate results and print them
None	can be used to set eoutvar as described in ::new
None	define methodname as instance method of current module using erb object or eruby file
None	a utility method for escaping html tag characters in s
None	a utility method for encoding the string s as a url
None	returns system configuration variable using confstr()
None	ends the process of scanning through the /etc/group file begun by ::getgrent and closes the file
None	ends the process of scanning through the /etc/passwd file begun with ::getpwent and closes the file
None	returns an entry from the /etc/group file
None	returns information about the group with specified integer group_id as found in /etc/group
None	returns information about the group with specified name as found in /etc/group
None	returns the short user name of the currently logged in user
None	returns an entry from the /etc/passwd file
None	returns the /etc/passwd information for the user with specified login name
None	returns the /etc/passwd information for the user with the given integer uid
None	provides a convenient ruby iterator which executes a block for each entry in the /etc/group file
None	returns the number of online processors
None	provides a convenient ruby iterator which executes a block for each entry in the /etc/passwd file
None	resets the process of reading the /etc/group file so that the next call to ::getgrent will return the first entry again
None	resets the process of reading the /etc/passwd file so that the next call to ::getpwent will return the first entry again
None	returns system configuration variable using sysconf()
None	returns system configuration directory
None	returns system temporary directory typically “/tmp”
None	returns the system information obtained by uname system call
None	returns pathname configuration variable using fpathconf()
None	reads from the io until the given pattern matches or the timeout is over
None	creates a new handler that opens library and returns an instance of fiddle :handle
None	returns the hexadecimal representation of a memory pointer address addr example
None	returns a memory pointer of a function’s hexadecimal address location val example
None	free the memory at address addr
None	returns the last error of the current executing thread or nil if none
None	sets the last error of the current executing thread to error
None	allocate size bytes of memory and return the integer memory address for the allocated memory
None	change the size of the memory allocated at the memory location addr to size bytes
None	returns the last win32 error of the current executing thread or nil if none
None	sets the last win32 error of the current executing thread to error
None	construct a new closure object
None	returns the memory address for this closure
None	create a new handler with the open handlers used internally by fiddle :importer#dlload
None	array of the currently loaded libraries
None	returns the address as an integer from any handlers with the function named symbol
None	given a string of c type ty returns the corresponding fiddle constant
None	parses a c prototype signature if hash tymap is provided the return value and the arguments from the signature are expected to be keys and the value will be the c type to be looked up
None	parses a c struct’s members example
None	accessor to fiddle :cstructentity
None	construct a new class given a c class klass cunion cstruct or other that provide an entity_class) types fiddle :type_int fiddle :type_size_t etc
None	allocates a c struct with the types provided
None	wraps the c pointer addr as a c struct with the given types
None	returns the offset for the packed sizes for the given types
None	fetch struct member name
None	set struct member name to value val
None	set the names of the members in this c struct
None	calculates the offsets and sizes for the given types in the struct
None	accessor to fiddle :cunionentity
None	allocates a c union the types provided
None	returns the size needed for the union with the given types
None	calculate the necessary offset and for each union member with the given types
None	constructs a function object
None	calls the constructed function with args
None	the integer memory location of this function
None	get the address as an integer for the function named name
None	create a new handler that opens library with flags
None	close this handle
None	returns true if dlclose() will be called when this handle is garbage collected
None	disable a call to dlclose() when this handle is garbage collected
None	enable a call to dlclose() when this handle is garbage collected
None	returns the memory address for this handle
None	returns the function mapped to name that was created by either #extern or #bind
None	creates a global method from the given c signature using the given opts as bind parameters with the given block
None	returns a new closure wrapper for the name function
None	creates a class to wrap the c struct with the value ty see also #struct
None	creates an array of handlers for the given libs can be an instance of fiddle :handle fiddle :importer or will create a new instance of fiddle :handle using fiddle
None	creates a global method from the given c signature
None	the fiddle :compositehandler instance will raise an error if no handlers are open
None	returns a new fiddle :function instance at the memory address of the given name function
None	returns a new fiddle :pointer instance at the memory address of the given name symbol
None	returns a new instance of the c struct with the value ty at the addr address
None	returns the sizeof ty using fiddle :cparser#parse_ctype to determine the c type and the appropriate fiddle constant
None	creates a class to wrap the c struct described by signature
None	sets the type alias for alias_type as orig_type
None	creates a class to wrap the c union described by signature
None	allocate size bytes of memory and associate it with an optional freefunc that will be called when the pointer is garbage collected
None	create a new pointer to address with an optional size and freefunc
None	get the underlying pointer for ruby object val and return it as a fiddle :pointer object
None	returns a new pointer instance that has been advanced n bytes
None	returns a new fiddle :pointer instance that is a dereferenced pointer for this pointer
None	returns a new pointer instance that has been moved back n bytes
None	returns a new fiddle :pointer instance that is a reference pointer for this pointer
None	returns -1 if less than 0 if equal to 1 if greater than other
None	returns true if other wraps the same pointer otherwise returns false
None	returns true if other wraps the same pointer otherwise returns false
None	get the free function for this pointer
None	set the free function for this pointer to function in the given fiddle :function
None	returns a string formatted with an easily readable representation of the internal state of the pointer
None	returns true if this is a null pointer
None	get the size of this pointer
None	set the size of this pointer to size
None	returns the integer memory location of this pointer
None	returns the pointer contents as a string
None	returns the pointer contents as a string
None	cast this pointer to a ruby object
None	construct a new blockcaller object
None	calls the constructed blockcaller with args for an example see ::new
None	changes the current directory to the directory dir
None	changes permission bits on the named files in list to the bit pattern represented by mode
None	changes permission bits on the named files in list to the bit pattern represented by mode
None	changes owner and group on the named files in list to the user user and the group group
None	changes owner and group on the named files in list to the user user and the group group recursively
None	returns true if the contents of a file a and a file b are identical
None	returns true if the contents of a stream a and b are identical
None	copies a file system entry src to dest
None	copies file contents of src to dest
None	copies stream src to dest
None	copies a file content src to dest
None	copies src to dest
None	ln(old new options = {}) creates a hard link new which points to old
None	ln_s(old new options = {}) creates a symbolic link new which points to old
None	creates one or more directories
None	creates a directory and all its parent directories
None	moves file s src to dest
None	returns the name of the current directory
None	removes a directory dir and its contents recursively
None	this method removes a file system entry path
None	this method removes a file system entry path
None	removes a file path
None	remove file s specified in list
None	equivalent to
None	remove files list 0 list 1 … if list n is a directory removes its all contents recursively
None	equivalent to warning this method causes local vulnerability
None	removes one or more directories
None	updates modification time mtime and access time atime of file s in list
None	returns true if new is newer than all old_list
None	calls the associated block with the name of every file and directory listed as arguments then recursively on their subdirectories and so on
None	skips the current file or directory restarting the loop with the next entry
None	define method as delegator instance method with an optional alias name ali
None	takes a hash as its argument
None	defines a method method which delegates to accessor
None	takes a hash as its argument
None	creates a new gdbm instance by opening a gdbm file named filename
None	if called without a block this is synonymous to ::new
None	sets the size of the internal bucket cache to size
None	removes all the key-value pairs within gdbm
None	closes the associated database file
None	returns true if the associated database file has been closed
None	removes the key-value-pair with the specified key from this database and returns the corresponding value
None	deletes every key-value pair from gdbm for which block evaluates to true
None	executes block for each key in the database passing the key and the corresponding value as a parameter
None	executes block for each key in the database passing the key as a parameter
None	executes block for each key in the database passing the corresponding value as a parameter
None	returns true if the database is empty
None	turns the database’s fast mode on or off
None	retrieves the value corresponding to key
None	returns true if the given key k exists within the database
None	returns true if the given value v exists within the database
None	returns true if the given key k exists within the database
None	returns a hash created by using gdbm’s values as keys and the keys as values
None	returns the key for a given value
None	returns true if the given key k exists within the database
None	returns an array of all keys of this database
None	returns the number of key-value pairs in this database
None	returns true if the given key k exists within the database
None	returns a hash copy of gdbm where all key-value pairs from gdbm for which block evaluates to true are removed
None	deletes every key-value pair from gdbm for which block evaluates to true
None	reorganizes the database file
None	replaces the content of gdbm with the key-value pairs of other
None	returns a new array of all key-value pairs of the database for which block evaluates to true
None	removes a key-value-pair from this database and returns it as a two-item array key value
None	returns the number of key-value pairs in this database
None	associates the value value with the specified key
None	unless the gdbm object has been opened with the sync flag it is not guaranteed that database modification operations are immediately applied to the database file
None	turns the database’s synchronization mode on or off
None	returns an array of all key-value pairs contained in the database
None	returns a hash of all key-value pairs contained in the database
None	adds the key-value pairs of other to gdbm overwriting entries with duplicate keys with those from other
None	returns true if the given value v exists within the database
None	returns an array of all values of this database
None	returns an array of the values associated with each specified key
None	set up option processing
None	iterator version of get’
None	each_option’ is an alias of each’
None	return the appropriate error message in posix-defined format
None	get next option name and its argument as an array of two elements
None	get_option’ is an alias of get’
None	set the handling of the ordering of options and arguments
None	set options
None	explicitly terminate option processing
None	returns true if option processing has terminated false otherwise
None	set an error a protected method
None	returns number of bytes that can be read without blocking
None	returns true if input available without blocking or false
None	waits until io is readable without blocking and returns self or nil when times out
None	waits until io is readable without blocking and returns self or nil when times out
None	waits until io is writable without blocking and returns self or nil when times out
None	yields self in non-blocking mode
None	returns true if an io object is in non-blocking mode
None	returns an file instance opened console
None	returns console window size
None	frozen_string_literal false fallback to console window size
None	yields self within cooked mode
None	enables cooked mode
None	enables/disables echo back
None	returns true if echo back is enabled
None	reads and returns a character in raw mode
None	reads and returns a line without echo back
None	flushes input buffer in kernel
None	flushes input and output buffers in kernel
None	yields self with disabling echo back
None	flushes output buffer in kernel
None	yields self within raw mode
None	enables raw mode
None	returns console size
None	creates a new ipaddr object either from a human readable ip address representation in string or from a packed in_addr value followed by an address family
None	creates a new ipaddr containing the given network byte ordered string form of an ip address
None	convert a network byte ordered string form of an ip address into human readable form
None	returns a new ipaddr built by bitwise left shift
None	compares the ipaddr with another
None	returns true if two ipaddrs are equal
None	returns a new ipaddr built by bitwise right-shift
None	checks equality used by hash
None	returns a hash value used by hash set and array classes
None	returns a network byte ordered string form of the ip address
None	returns true if the given ipaddr is in the range
None	returns a string containing a human-readable representation of the ipaddr
None	returns a string for dns reverse lookup compatible with rfc3172
None	returns a string for dns reverse lookup compatible with rfc1886
None	returns true if the ipaddr is an ipv4 address
None	returns a new ipaddr built by converting the native ipv4 address into an ipv4-compatible ipv6 address
None	returns true if the ipaddr is an ipv4-compatible ipv6 address
None	returns a new ipaddr built by converting the native ipv4 address into an ipv4-mapped ipv6 address
None	returns true if the ipaddr is an ipv4-mapped ipv6 address
None	returns true if the ipaddr is an ipv6 address
None	returns a new ipaddr built by masking ip address with the given prefixlen/netmask
None	returns a new ipaddr built by converting the ipv6 address into a native ipv4 address
None	returns a string for dns reverse lookup
None	returns the successor to the ipaddr
None	returns the integer representation of the ipaddr
None	creates a range object for the network address
None	returns a string containing the ip address representation
None	returns a string containing the ip address representation in canonical form
None	returns a new ipaddr built by bitwise or
None	returns a new ipaddr built by bitwise negation
None	set current netmask to given mask
None	set +@addr+, the internal stored ip address to given addr
None	returns a string based representation of a valid dns hostname ipv4 or ipv6 address
None	the current irb :context of the session see ::conf
None	the current jobmanager in the session
None	displays current configuration
None	initialize tracing function
None	creates a new irb session see irb :irb
None	aborts then interrupts irb
None	calls each event hook of ::conf when the current session quits
None	quits irb
None	outputs the irb help message see command line options at irb
None	initializes irb and creates a new irb
None	returns the current version of irb including release version and last updated date
None	frozen_string_literal false do not write any magic comment here
None	a convenience method that’s only available when the you require the irb :xmp standard library
None	creates a new xmp object
None	evaluates the given exps for example
None	creates a new stringinputmethod object
None	whether there are any expressions left in this printer
None	reads the next expression from this printer
None	concatenates all expressions in this printer separated by newlines
None	creates a new irb context
None	changes the current workspace to given object or binding
None	whether or not debug mode is enabled see debug_level=
None	sets the debug level of irb can also be set using the --irb_debug command line option
None	sets command result history limit
None	exits the current session see irb
None	whether io uses a file for the input_method passed when creating the current context see ::new
None	a copy of the default irb
None	set irb
None	inherited from toplevel_binding
None	whether inspect_mode is set or not see inspect_mode= for more detail
None	specifies the inspect mode with opt display inspect display to_s inspect mode in non-math mode non-inspect mode in math mode see irb :inspector for more information
None	size of the current workspace stack
None	the top-level workspace see irb :workspace#main
None	sets bc mode which loads lib/mathn
None	removes the last element from the current workspaces stack and returns it or nil if the current workspace stack is empty
None	sets the mode of the prompt in this context
None	whether verbose? is true and input_method is either stdioinputmethod or readlineinputmethod see io for more information
None	creates a new workspace with the given object or binding and appends it onto the current workspaces stack
None	a copy of the default irb
None	sets irb
None	sets the return value from the last statement evaluated in this context to last_value
None	returns whether irb‘s own file reader method is used by load/require or not
None	sets irb
None	obsolete method
None	sets whether or not to use the tracer library when evaluating statements in this context
None	returns whether messages are displayed or not
None	workspaces in the current stack
None	evaluate the given command from the given load_file on the context module
None	installs the default context extensions as irb commands irb/ext/history
None	evaluate the given cmd_name on the given cmd_class class
None	installs alias methods for the default irb commands on the given object using install_alias_method
None	installs the default irb commands irb :context#main irb :context#change_workspace irb :context#workspaces irb :context#push_workspace irb :context#pop_workspace irb_load irb_require irb :irbloader#source_file irb
None	installs alias methods for the default irb commands see ::install_extend_commands
None	displays current configuration
None	loads the given file similarly to kernel#load see irb :irbloader#irb_load
None	loads the given file similarly to kernel#require
None	creates a new input method object
None	the external encoding for standard input
None	whether the end of this input method has been reached returns true if there is no more data to read
None	reads the next line from this input method
None	convenience method for #bottom
None	creates a new stack frame
None	returns the binding context of the caller from the last frame initialized
None	convenience method for #top
None	used by kernel#set_trace_func to register each event in the call stack
None	creates a new input method object
None	reads the next line from this input method
None	whether this input method is still readable when there is no more data to read
None	determines the inspector to use where inspector is one of the keys passed during inspector definition
None	creates a new inspector object using the given inspect_proc when output return values in irb
None	proc to call when the inspector is activated good for requiring dependent libraries
None	proc to call when the input is evaluated and output in irb
None	creates a new irb session
None	evaluates input for this session
None	outputs the local variables to this current session including signal_status and context using irb :locale
None	handler for the signal sigint see kernel#trap for more information
None	evaluates the given block using the given status
None	evaluates the given block using the given context as the context
None	evaluates the given block using the given input_method as the irb :context#io
None	evaluates the given block using the given path as the irb :context#irb_path and name as the irb :context#irb_name
None	evaluates the given block using the given workspace as the irb :context#workspace
None	loads the given file similarly to kernel#load
None	loads the given file in the current session’s context and evaluates it
None	loads a given file in the current session and displays the source lines see irb :irb#suspend_input_method for more information
None	creates a new jobmanager object
None	deletes the job at the given key
None	add the given irb session to the jobs array
None	outputs a list of jobs see the irb command irb_jobs or jobs
None	returns the irb session for the given key object see search for more information
None	terminates the irb sessions specified by the given keys
None	returns the top level irb session
None	returns the top level thread
None	the total number of irb sessions used to set irb_name of the current context
None	returns the associated job for the given key
None	changes the current active irb session to the given key in the jobs array
None	returns the thread for the given key object see search for more information
None	extends the given base_method with a postfix call to the given extend_method
None	extends the given base_method with a prefix call to the given extend_method
None	returns a unique method name to use as an alias for the given name
None	define a new notifier output source returning a new compositenotifier with the given prefix and output_method
None	returns an array of the given format and opts to be used by kernel#sprintf if there was a successful regexp match in the given format from printf
None	prints the given objs calling object#inspect on each
None	prints the given objs calling object#inspect on each and appending the given prefix
None	open this method to implement your own output method raises a notimplementederror if you don’t define print in your own class
None	extends io#printf to format the given opts for kernel#sprintf using parse_printf_format
None	prints the given opts with a newline delimiter
None	calls print on each element in the given objs followed by a newline character
None	creates a new input method object using readline
None	the external encoding for standard input
None	whether the end of this input method has been reached returns true if there is no more data to read
None	reads the next line from this input method
None	returns the current line number for io
None	whether this input method is still readable when there is no more data to read
None	creates a new input method object
None	the external encoding for standard input
None	whether the end of this input method has been reached returns true if there is no more data to read
None	reads the next line from this input method
None	returns the current line number for io
None	whether this input method is still readable when there is no more data to read
None	prints the given opts to standard output see io#print for more information
None	creates a new workspace
None	evaluate the context of this workspace and use the tracer library to output the exact lines of code are being executed in chronological order
None	error message manipulator
None	creates a new notifier object
None	execute the given block if notifications are enabled
None	a wrapper method used to determine whether notifications are enabled
None	create a new composite notifier object with the given prefix and base_notifier to use for output
None	creates a new levelednotifier in the composite notifiers group
None	sets the leveled notifier for this object
None	create a new leveled notifier with the given base and prefix to send to irb :notifier :abstractnotifier
None	compares the level of this notifier object with the given other notifier
None	whether to output messages to the output method depending on the level of this notifier object
None	creates a new notifier that should not be used to output messages
None	ensures notifications are ignored see irb :notifier :abstractnotifier#notify? for more information
None	import a json marshalled object
None	marshal the object to json
None	return the json value
None	returns true if this class can be used to create an instance from a serialised json string
None	deserializes json string by converting real value r imaginary value i to a complex object
None	returns a hash that will be turned into a json object and represent this object
None	stores class name complex along with real value r and imaginary value i as json string
None	deserializes json string by converting julian year y month m day d and day of calendar reform sg to date
None	returns a hash that will be turned into a json object and represent this object
None	stores class name date with julian year y month m day d and day of calendar reform sg as json string
None	deserializes json string by converting year y month m day d hour h minute m second s offset of and day of calendar reform sg to datetime
None	returns a hash that will be turned into a json object and represent this object
None	stores class name datetime with julian year y month m day d hour h minute m second s offset of and day of calendar reform sg as json string
None	deserializes json string by constructing new exception object with message m and backtrace b serialized with to_json
None	returns a hash that will be turned into a json object and represent this object
None	stores class name exception with message m and backtrace array b as json string
None	if object is string-like parse the string and return the parsed result as a ruby data structure
None	encodes string using ruby’s string
None	dumps obj as a json string i
None	generate a json document from the ruby data structure obj and return it
None	generate a json document from the ruby data structure obj and return it
None	load a ruby data structure from a json source and return it
None	parse the json document source into a ruby data structure and return it
None	parse the json document source into a ruby data structure and return it
None	generate a json document from the ruby data structure obj and return it
None	recursively calls passed proc if the parsed data structure is an array or hash
None	deserializes json string by constructing new struct object with values v serialized by to_json
None	returns a hash that will be turned into a json object and represent this object
None	stores class name openstruct with this struct’s values v as a json string
None	deserializes json string by constructing new range object with arguments a serialized by to_json
None	returns a hash that will be turned into a json object and represent this object
None	stores class name range with json array of arguments a which include first integer last integer and exclude_end? boolean as json string
None	deserializes json string by converting numerator value n denominator value d to a rational object
None	returns a hash that will be turned into a json object and represent this object
None	stores class name rational along with numerator value n and denominator value d as json string
None	deserializes json string by constructing new regexp object with source s regexp or string and options o serialized by to_json
None	returns a hash that will be turned into a json object and represent this object
None	stores class name regexp with options o and source s regexp or string as json string
None	deserializes json string by constructing new struct object with values v serialized by to_json
None	returns a hash that will be turned into a json object and represent this object
None	stores class name struct with struct values v as a json string
None	deserializes json string by converting the string value stored in the object to a symbol
None	returns a hash that will be turned into a json object and represent this object
None	stores class name symbol with string representation of symbol as a json string
None	deserializes json string by converting time since epoch to time
None	returns a hash that will be turned into a json object and represent this object
None	stores class name time with number of seconds since epoch and number of microseconds for time as json string
None	creates a new json :ext :parser instance for the string source
None	parses the current json text source and returns the complete data structure as a result
None	returns a true if this parser is in quirks_mode false otherwise
None	returns a copy of the current source string that was used to construct this parser
None	creates a state object from opts which ought to be hash to create a new state instance configured by opts something else to create an unconfigured instance
None	instantiates a new state object configured by opts
None	returns the value returned by method name
None	sets the attribute name to value
None	returns true if nan infinity and -infinity should be generated otherwise returns false
None	this string is put at the end of a line that holds a json array
None	this string is put at the end of a line that holds a json array
None	returns true if nan infinity and -infinity should be generated otherwise returns false
None	this integer returns the current initial length of the buffer
None	this sets the initial length of the buffer to length if length > 0 otherwise its value isn’t changed
None	returns true if circular data structures should be checked otherwise returns false
None	configure this state instance with the hash opts and return itself
None	this integer returns the current depth of data structure nesting
None	this sets the maximum level of data structure nesting in the generated json to the integer depth #max_nesting = 0 if no maximum should be checked
None	generates a valid json document from object obj and returns the result
None	returns the string that is used to indent levels in the json text
None	sets the string that is used to indent levels in the json text
None	initializes this object from orig if it can be duplicated/cloned and returns it
None	this integer returns the maximum level of data structure nesting in the generated json #max_nesting = 0 if no maximum is checked
None	this sets the maximum level of data structure nesting in the generated json to the integer depth #max_nesting = 0 if no maximum should be checked
None	this string is put at the end of a line that holds a json object or hash
None	this string is put at the end of a line that holds a json object or hash
None	returns true if quirks mode is enabled
None	if set to true enables the #quirks_mode mode
None	returns the string that is used to insert a space between the tokens in a json string
None	sets space to the string that is used to insert a space between the tokens in a json string
None	returns the string that is used to insert a space before the ‘:’ in json objects
None	sets the string that is used to insert a space before the ‘:’ in json objects
None	returns the configuration instance variables as a hash that can be passed to the configure method
None	returns a json string containing a json array that is generated from this array instance
None	returns a json string representation for this integer number
None	returns a json string for false ‘false’
None	returns a json string representation for this integer number
None	returns a json string representation for this float number
None	returns a json string containing a json object that is generated from this hash instance
None	returns a json string for nil ‘null’
None	converts this object to a string calling to_s), converts it to a json string and returns the result
None	extends modul with the string :extend module
None	this string should be encoded with utf-8 a call to this method returns a json string encoded with utf16 big endian characters as u????
None	this method creates a json text from the result of a call to #to_json_raw_object of this string
None	this method creates a raw object hash that can be nested into other data structures and will be generated as a raw string
None	returns a json string for true ‘true’
None	raw strings are json objects the raw bytes are stored in an array for the key “raw”)
None	the log device
None	dump given message to the log device without any formatting
None	close the logging device
None	returns the date format being used
None	set date-time format
None	log a debug message
None	returns true iff the current severity level allows for the printing of debug messages
None	log an error message
None	returns true iff the current severity level allows for the printing of error messages
None	log a fatal message
None	returns true iff the current severity level allows for the printing of fatal messages
None	log an info message
None	returns true iff the current severity level allows for the printing of info messages
None	set logging severity threshold
None	the log device
None	log an unknown message
None	log a warn message
None	returns true iff the current severity level allows for the printing of warn messages
None	compute square root of a non negative number
None	computes the square root of a
None	mathn serves to make mathematical operations more precise in ruby and to integrate other mathematical standard libraries
None	creates a matrix where each argument is a row
None	creates a matrix of size row_count x column_count
None	creates a single-column matrix where the values of that column are as given in column
None	creates a matrix using columns as an array of column vectors
None	creates a matrix where the diagonal elements are composed of values
None	creates a empty matrix of row_count x column_count
None	create a matrix by stacking matrices horizontally
None	creates an n by n identity matrix
None	::new is private use ::rows columns [], etc
None	creates a single-row matrix where the values of that row are as given in row
None	creates a matrix where rows is an array of arrays each of which is a row of the matrix
None	creates an n by n diagonal matrix where each diagonal element is value
None	create a matrix by stacking matrices vertically
None	creates a zero matrix
None	matrix multiplication
None	matrix exponentiation
None	matrix addition
None	matrix subtraction
None	matrix division multiplication by the inverse
None	returns true if and only if the two matrices contain equal elements
None	returns the adjugate of the matrix
None	returns a clone of the matrix so that the contents of each do not reference identical objects
None	the coerce method provides support for ruby type coercion
None	returns the row column cofactor which is obtained by multiplying the first minor by -1 ** row + column
None	returns a matrix that is the result of iteration of the given block over all elements of the matrix
None	returns column vector number j of the matrix as a vector starting at 0 like an array
None	returns an array of the column vectors of the matrix
None	returns the conjugate of the matrix
None	returns the determinant of the matrix
None	returns true if this is a diagonal matrix
None	yields all elements of the matrix starting with those of the first row or returns an enumerator if no block given
None	returns the eigensystem of the matrix see eigenvaluedecomposition
None	returns true if this is an empty matrix i
None	returns the submatrix obtained by deleting the specified row and column
None	returns a hash-code for the matrix
None	returns true if this is an hermitian matrix
None	returns the imaginary part of the matrix
None	the index method is specialized to return the index as row column it also accepts an optional selector argument see each for details
None	overrides object#inspect
None	returns the inverse of the matrix
None	returns the laplace expansion along given row or column
None	returns true if this is a lower triangular matrix
None	returns the lup decomposition of the matrix see lupdecomposition
None	returns a section of the matrix
None	returns true if this is a normal matrix
None	returns true if this is an orthogonal matrix raises an error if matrix is not square
None	returns true if this is a permutation matrix raises an error if matrix is not square
None	returns the rank of the matrix
None	returns the real part of the matrix
None	returns true if all entries of the matrix are real
None	returns an array containing matrices corresponding to the real and imaginary parts of the matrix m
None	returns true if this is a regular
None	returns a matrix with entries rounded to the given precision see float#round)
None	returns row vector number i of the matrix as a vector starting at 0 like an array
None	returns the number of rows
None	returns an array of the row vectors of the matrix
None	returns true if this is a singular matrix
None	returns true if this is a square matrix
None	returns true if this is a symmetric matrix
None	returns an array of arrays that describe the rows of the matrix
None	overrides object#to_s
None	returns the trace sum of diagonal elements of the matrix
None	returns the transpose of the matrix
None	returns true if this is a unitary matrix raises an error if matrix is not square
None	returns true if this is an upper triangular matrix
None	returns true if this is a matrix with only zero elements
None	creates a vector from a list of elements
None	returns a standard basis n-vector where k is the index
None	creates a vector from an array
None	returns true iff all of vectors are linearly independent
None	::new is private use vector[] or ::elements to create
None	multiplies the vector by x where x is a number or a matrix
None	vector addition
None	vector subtraction
None	vector division
None	returns true iff the two vectors have the same elements in the same order
None	returns an angle with another vector
None	returns a copy of the vector
None	the coerce method provides support for ruby type coercion
None	like array#collect
None	collects as in enumerable#collect) over the elements of this vector and v in conjunction
None	creates a single-row matrix from this vector
None	returns the cross product of this vector with the others
None	iterate over the elements of this vector
None	iterate over the elements of this vector and v in conjunction
None	returns a hash-code for the vector
None	returns the inner product of this vector with the other
None	overrides object#inspect
None	returns the modulus pythagorean distance of the vector
None	like #collect2 but returns a vector instead of an array
None	returns a new vector with the same direction but with norm 1
None	returns a vector with entries rounded to the given precision see float#round)
None	returns the number of elements in the vector
None	returns the elements of the vector in an array
None	overrides object#to_s
None	constructs the eigenvalue decomposition for a square matrix a
None	returns the block diagonal eigenvalue matrix d
None	returns the eigenvalues in an array
None	returns the eigenvector matrix v
None	returns the inverse of the eigenvector matrix v
None	returns an array of the eigenvectors
None	returns [eigenvector_matrix #eigenvalue_matrix #eigenvector_matrix_inv]
None	returns the determinant of a calculated efficiently from the factorization
None	returns the permutation matrix p
None	returns true if u and hence a is singular
None	returns m so that a*m = b or equivalently so that l*u*m = p*b b can be a matrix or a vector
None	returns l u p in an array
None	returns the upper triangular factor u
None	returns the signedness of the given type
None	returns the size of the given type
None	returns the convertible integer type of the given type
None	generates a header file consisting of the various macro definitions generated by other methods such as #have_func and have_header
None	generates the makefile for your extension passing along any options and preprocessor constants that you may have generated through other methods
None	processes the data contents of the “depend” file
None	sets a target name that the user can then use to configure various “with” options with on the command line by using that name
None	creates a stub makefile
None	tests for the presence of an --enable-config or --disable-config option
None	searches for the executable bin on path
None	instructs mkmf to search for the given header in any of the paths provided and returns whether or not it was found in those paths
None	returns whether or not the entry point func can be found within the library lib in one of the paths specified where paths is an array of strings
None	returns where the static type type is defined
None	returns whether or not the constant const is defined
None	returns whether or not the given framework can be found on your system
None	returns whether or not the function func can be found in the common header files or within any headers that you provide
None	returns whether or not the given header file can be found on your system
None	returns whether or not the given entry point func can be found within lib
None	returns whether or not macro is defined either in the common header files or within any headers you provide
None	returns whether or not the struct of type type contains member
None	returns whether or not the static type type is defined
None	returns whether or not the variable var can be found in the common header files or within any headers that you provide
None	returns compile/link information about an installed library in a tuple of cflags ldflags libs by using the command found first in the following commands if --with-{pkg}-config={command} is given via command line option {command} {option} {pkg}-config {option} pkg-config {option} {pkg} where {option} is for instance --cflags
None	returns whether or not the constant const is defined
None	returns whether or not the static type type is defined
None	tests for the presence of a --with-config or --without-config option
None	use extend monitormixin or include monitormixin instead of this constructor
None	enters exclusive section
None	leaves exclusive section
None	enters exclusive section and executes the block
None	attempts to enter exclusive section
None	creates a new monitormixin :conditionvariable associated with the receiver
None	for backward compatibility
None	wakes up all threads waiting for this lock
None	wakes up the first thread in line waiting for this lock
None	releases the lock held in the associated monitor and waits reacquires the lock on wakeup
None	calls wait repeatedly until the given block yields a truthy value
None	calls wait repeatedly while the given block yields a truthy value
None	the default smtp port number 25
None	the default mail submission port number 587
None	the default smtps port number 465
None	creates a new net :smtp object
None	creates a new net :smtp object and connects to the server
None	returns supported authentication methods on this server
None	true if server advertises auth cram-md5
None	true if server advertises auth login
None	true if server advertises auth plain
None	true if server advertises starttls
None	this method sends a message
None	warning this method causes serious security holes
None	disables smtp/tls starttls for this object
None	disables smtp/tls for this object
None	enables smtp/tls starttls for this object
None	enables smtp/tls starttls for this object if server accepts
None	enables smtp/tls smtps smtp over direct tls connection for this object
None	finishes the smtp session and closes tcp connection
None	provide human-readable stringification of class state
None	opens a message writer stream and gives it to the block
None	set the number of seconds to wait until timing-out a read 2 call
None	aborts the current mail transaction
None	sends msgstr as a message
None	true if the smtp session has been started
None	returns truth value if this object uses starttls
None	true if this object uses starttls
None	true if this object uses starttls when server advertises starttls
None	true if this object uses smtp/tls smtps
None	creates a new instance of the response class and sets the status and string attributes
None	parses the received response and separates the reply code and the human readable reply text
None	returns a hash of the human readable reply text in the response if it is multiple lines
None	determines whether the response received was a positive intermediate reply 3xx reply code
None	creates a cram-md5 challenge
None	determines whether there was an error and raises the appropriate error based on the reply code of the response
None	the first line of the human readable reply text
None	takes the first digit of the reply code to determine the status type
None	determines whether the response received was a positive completion reply 2xx reply code
None	always returns true
None	returns the apop class if isapop is true otherwise returns the pop class
None	opens a pop3 session attempts authentication and quits
None	returns the :ca_file or :ca_path from ::ssl_params
None	constructs proper parameters from arguments
None	the default port for pop3 connections port 110
None	the default port for pop3s connections port 995
None	returns the port for pop3
None	starts a pop3 session and deletes all messages on the server
None	disable ssl for all new instances
None	enable ssl for all new instances
None	starts a pop3 session and iterates over each popmail object yielding it to the block
None	creates a new pop3 object
None	returns the ssl parameters see also ::enable_ssl
None	creates a new pop3 object and open the connection
None	returns true if ::ssl_params is set
None	returns whether verify_mode is enable from ::ssl_params
None	does this instance use apop authentication?
None	yields each message to the passed-in block in turn
None	finishes a pop3 session and closes tcp connection
None	provide human-readable stringification of class state
None	debugging output for msg
None	returns an array of net :popmail objects representing all the messages on the server
None	returns the total size in bytes of all the messages on the pop server
None	returns the number of messages on the pop server
None	the port number to connect to
None	set the read timeout
None	resets the session
None	warning this method causes a serious security hole
None	true if the pop3 session has started
None	marks a message for deletion on the server
None	true if the mail has been deleted
None	fetches the message header
None	provide human-readable stringification of class state
None	this method fetches the message
None	fetches the message header and lines lines of body
None	returns the unique-id of the message
None	adds an authenticator for #authenticate
None	returns the debug mode
None	sets the debug mode
None	decode a string from modified utf-7 format to utf-8
None	the default port for imap connections port 143
None	the default port for imaps connections port 993
None	encode a string from utf-8 format to modified utf-7
None	formats time as an imap-style date
None	formats time as an imap-style date-time
None	returns the max number of flags interned to symbols
None	sets the max number of flags interned to symbols
None	creates a new net :imap object and connects it to the specified host
None	adds a response handler
None	sends a append command to append the message to the end of the mailbox
None	sends an authenticate command to authenticate the client
None	sends a capability command and returns an array of capabilities that the server supports
None	sends a check command to request a checkpoint of the currently selected mailbox
None	sends a close command to close the currently selected mailbox
None	sends a copy command to copy the specified message s to the end of the specified destination mailbox
None	sends a create command to create a new mailbox
None	sends a delete command to remove the mailbox
None	disconnects from the server
None	returns true if disconnected from the server
None	sends a examine command to select a mailbox so that messages in the mailbox can be accessed
None	sends a expunge command to permanently remove from the currently selected mailbox all messages that have the deleted flag set
None	sends a fetch command to retrieve data associated with a message in the mailbox
None	send the getacl command along with a specified mailbox
None	sends the getquota command along with specified mailbox
None	sends the getquotaroot command along with the specified mailbox
None	sends an idle command that waits for notifications of new or expunged messages
None	leaves idle
None	sends a list command and returns a subset of names from the complete set of all names available to the client
None	sends a login command to identify the client and carries the plaintext password authenticating this user
None	sends a logout command to inform the server that the client is done with the connection
None	sends a lsub command and returns a subset of names from the set of names that the user has declared as being “active” or “subscribed
None	sends a move command to move the specified message s to the end of the specified destination mailbox
None	sends a noop command to the server
None	removes the response handler
None	sends a rename command to change the name of the mailbox to newname
None	sends a search command to search the mailbox for messages that match the given searching criteria and returns message sequence numbers
None	sends a select command to select a mailbox so that messages in the mailbox can be accessed
None	sends the setacl command along with mailbox user and the rights that user is to have on that mailbox
None	sends a setquota command along with the specified mailbox and quota
None	sends a sort command to sort messages in the mailbox
None	sends a starttls command to start tls session
None	sends a status command and returns the status of the indicated mailbox
None	sends a store command to alter data associated with messages in the mailbox in particular their flags
None	sends a subscribe command to add the specified mailbox name to the server’s set of “active” or “subscribed” mailboxes as returned by lsub()
None	similar to search(), but returns message sequence numbers in threaded format as a net :imap :threadmember tree
None	similar to copy(), but set contains unique identifiers
None	similar to fetch(), but set contains unique identifiers
None	similar to move(), but set contains unique identifiers
None	similar to search(), but returns unique identifiers
None	similar to sort(), but returns an array of unique identifiers
None	similar to store(), but set contains unique identifiers
None	similar to thread(), but returns unique identifiers instead of message sequence numbers
None	sends a unsubscribe command to remove the specified mailbox name from the server’s set of “active” or “subscribed” mailboxes
None	sends a xlist command and returns a subset of names from the complete set of all names available to the client
None	obsolete use subtype instead
None	obsolete use subtype instead
None	obsolete use subtype instead
None	obsolete use subtype instead
None	ensure argument is ‘number’ or raise dataformaterror
None	ensure argument is ‘nz_number’ or raise dataformaterror
None	check is passed argument valid ‘number’ in rfc 3501 terminology
None	check is passed argument valid ‘nz_number’ in rfc 3501 terminology
None	creates an http proxy class which behaves like net :http but performs all access via the specified proxy
None	the default port to use for http requests defaults to 80
None	sends a get request to the target and returns the http response as a string
None	gets the body text from the target and outputs it to $stdout
None	sends a get request to the target and returns the http response as a net :httpresponse object
None	the default port to use for http requests defaults to 80
None	the default port to use for https requests defaults to 443
None	creates a new net :http object without opening a tcp connection or http session
None	posts html form data to the specified uri object
None	returns true if self is a class which was created by http :proxy
None	creates a new net :http object then additionally opens the tcp connection and http session
None	turns on net/http 1
None	returns true if net/http is in version 1
None	setter for the #continue_timeout attribute
None	sends a copy request to the path and gets a response as an httpresponse object
None	sends a delete request to the path and gets a response as an httpresponse object
None	finishes the http session and closes the tcp connection
None	gets only the header from path on the connected-to host
None	sends a lock request to the path and gets a response as an httpresponse object
None	sends a mkcol request to the path and gets a response as an httpresponse object
None	sends a move request to the path and gets a response as an httpresponse object
None	sends a options request to the path and gets a response as an httpresponse object
None	sends a patch request to the path and gets a response as an httpresponse object
None	returns the x
None	posts data must be a string to path
None	sends a propfind request to the path and gets a response as an httpresponse object
None	sends a proppatch request to the path and gets a response as an httpresponse object
None	true if requests for this connection will be proxied
None	the address of the proxy server if one is configured
None	true if the proxy for this connection is determined from the environment
None	the proxy password if one is configured
None	the port of the proxy server if one is configured
None	the proxy username if one is configured
None	setter for the #read_timeout attribute
None	sends an httprequest object req to the http server
None	sends a get request to the path
None	sends a head request to the path and returns the response as a net :httpresponse object
None	sends a post request to the path
None	sends an http request to the http server
None	warning this method opens a serious security hole
None	returns true if the http session has been started
None	sends a trace request to the path and gets a response as an httpresponse object
None	sends a unlock request to the path and gets a response as an httpresponse object
None	turn on/off ssl
None	returns true if ssl/tls is being used with http
None	returns the header field corresponding to the case-insensitive key
None	sets the header field corresponding to the case-insensitive key
None	adds a value to a named header field instead of replacing its value
None	set the authorization header for “basic” authorization
None	returns “true” if the “transfer-encoding” header is present and set to “chunked”
None	returns an integer object which represents the http content-length header field or nil if that field was not provided
None	returns a range object which represents the value of the content-range header field
None	returns a content type string such as “text/html”
None	removes a header field specified by case-insensitive key
None	as for each_header except the keys are provided in capitalized form
None	iterates through the header names in the header passing capitalized header names to the code block
None	iterates through the header names and values passing in the name and value to the code block supplied
None	iterates through the header names in the header passing each header name to the code block
None	iterates through header values passing each value to the code block
None	returns the header field corresponding to the case-insensitive key
None	returns an array of header field strings corresponding to the case-insensitive key
None	true if key header exists
None	returns a content type string such as “text”
None	set proxy-authorization header for “basic” authorization
None	returns an array of range objects which represent the range http header field or nil if there is no such header
None	the length of the range represented in content-range header
None	sets the content type in an http header
None	set a html form data set
None	set header fields and a body from html form data
None	sets the http range header
None	returns a content type string such as “html”
None	returns a hash consisting of header names and array of values
None	any parameters specified for the content type returned as a hash
None	creates an http request object for path
None	true if the response has a body
None	returns the full entity body
None	because it may be necessary to modify the body eg decompression this method facilitates that
None	gets the entity body returned by the remote http server
None	raises an http error if the response is not 2xx success
None	when true connections are in passive mode per default
None	when true connections are in passive mode per default
None	creates and returns a new ftp object
None	a synonym for ftp
None	aborts the previous command abor command
None	sends the acct command
None	a setter to toggle transfers in binary mode
None	changes the remote directory
None	closes the connection
None	returns true iff the connection is closed
None	establishes an ftp connection to host optionally overriding the default port
None	deletes a file on the server
None	retrieves remotefile in whatever mode the session is set text or binary
None	retrieves remotefile in binary mode storing the result in localfile
None	retrieves remotefile in ascii text mode storing the result in localfile
None	issues the help command
None	returns an array of file information in the directory the output is like ls -l
None	logs in to the remote host
None	returns the raw last modification time of the remote file in the format “yyyymmddhhmmss” mdtm command
None	creates a remote directory
None	returns an array of the entries of the directory specified by pathname
None	returns data e
None	returns the last modification time of the remote file
None	returns an array of filenames in the remote directory
None	issues a noop command
None	transfers localfile to the server in whatever mode the session is set text or binary
None	transfers localfile to the server in binary mode storing the result in remotefile
None	transfers localfile to the server in ascii text mode storing the result in remotefile
None	returns the current remote directory
None	exits the ftp session
None	setter for the #read_timeout attribute
None	renames a file on the server
None	puts the connection into binary image mode issues the given command and fetches the data returned passing it to the associated block in chunks of blocksize characters
None	puts the connection into ascii text mode issues the given command and passes the resulting data one line at a time to the associated block
None	removes a remote directory
None	sends a command and returns the response
None	set the socket used to connect to the ftp server
None	issues a site command
None	returns the size of the given remote filename
None	returns the status stat command
None	puts the connection into binary image mode issues the given server-side command such as “stor myfile”), and sends the contents of the file named file to the server
None	puts the connection into ascii text mode issues the given server-side command such as “stor myfile”), and sends the contents of the file named file to the server one line at a time
None	returns system information
None	sends a command and expect a response beginning with ‘2’
None	returns true if the appe command may be applied to the file
None	returns true if files may be created in the directory by stou stor appe and rnto
None	returns true if the file or directory may be deleted by dele/rmd
None	returns true if the entry is a directory
None	returns true if the mkd command may be used to create a new directory within the directory
None	returns true if the directory may be entered by cwd/cdup
None	returns true if the entry is a file
None	returns true if the listing commands list nlst and mlsd are applied to the directory
None	returns true if the objects in the directory may be deleted or the directory may be purged
None	returns true if the retr command may be applied to the file
None	returns true if the file or directory may be renamed by rnfr
None	returns true if the stor command may be applied to the file
None	guess input encoding by nkf
None	returns whether input encoding is euc-jp or not
None	returns whether input encoding is iso-2022-jp or not
None	returns whether input encoding is shift_jis or not
None	returns whether input encoding is utf-8 or not
None	convert str to to_enc
None	convert str to euc-jp
None	convert str to iso-2022-jp
None	convert self to locale encoding
None	convert str to shift_jis
None	convert str to utf-16
None	convert str to utf-32
None	convert str to utf-8
None	returns guessed encoding of str by nkf routine
None	convert str and return converted result
None	returns whether self‘s encoding is euc-jp or not
None	returns whether self‘s encoding is iso-2022-jp or not
None	returns whether self‘s encoding is shift_jis or not
None	returns whether self‘s encoding is utf-8 or not
None	convert self to to_enc
None	convert self to euc-jp
None	convert self to iso-2022-jp
None	convert self to locale encoding
None	convert self to shift_jis
None	convert self to utf-16
None	convert self to utf-32
None	convert self to utf-8
None	returns the class for the given object
None	returns garbage collector generation for the given object
None	returns the method identifier for the given object
None	returns the source file origin from the given object
None	returns the original line from source for from the given object
None	counts objects for each t_imemo type
None	counts nodes for each node type
None	counts objects size in bytes for each type
None	counts symbols for each symbol type
None	counts objects for each t_data type
None	dump the contents of a ruby object as json
None	dump the contents of the ruby heap as json
None	return internal class of obj
None	return internal super class of cls class or module
None	return consuming memory size of obj
None	return consuming memory size of all living objects
None	return all reachable objects from obj’
None	return all reachable objects from root
None	starts tracing object allocations from the objectspace extension module
None	clear recorded tracing information
None	starts tracing object allocations
None	stop tracing object allocations
None	returns the object#object_id of the internal object
None	returns the type of the internal object
None	add observer as an observer on this object
None	set the changed state of this object
None	returns true if this object’s state has been changed since the last notify_observers call
None	return the number of observers associated with this object
None	remove observer as an observer on this object so that it will no longer receive notifications
None	remove all observers associated with this object
None	notify observers of a change in state if this object’s changed state is true
None	allows the opening of various resources including uris
None	returns a charset parameter in content-type field
None	returns a list of encodings in content-encoding field as an array of strings
None	returns “type/subtype” which is mime content-type
None	returns a time that represents the last-modified field
None	::capture2 captures the standard output of a command
None	::capture2e captures the standard output and the standard error of a command
None	::capture3 captures the standard output and the standard error of a command
None	::pipeline starts a list of commands as a pipeline
None	::pipeline_r starts a list of commands as a pipeline with a pipe which connects to stdout of the last command
None	::pipeline_rw starts a list of commands as a pipeline with pipes which connect to stdin of the first command and stdout of the last command
None	::pipeline_start starts a list of commands as a pipeline
None	::pipeline_w starts a list of commands as a pipeline with a pipe which connects to stdin of the first command
None	::popen2 is similar to ::popen3 except that it doesn t create a pipe for the standard error stream
None	::popen2e is similar to ::popen3 except that it merges the standard output stream and the standard error stream
None	open stdin stdout and stderr streams and start external executable
None	casts an integer as an openssl :bn see man bn for more info
None	returns a digest subclass by name
None	turns on or off crypto_mem_check
None	turns fips mode on or off
None	decodes a ber- or der-encoded value and creates an asn1data instance
None	similar to decode with the difference that decode expects one distinct value represented in der
None	if a block is given it prints out each of the elements encountered
None	bits - integer safe - boolean add - bn rem - bn
None	construct a new openssl bignum object
None	bn % bn2 => abn
None	bn * bn2 => abn
None	bn ** bn2 => abn
None	bn + bn2 => abn
None	bn - bn2 => abn
None	division of openssl :bn instances
None	returns boolean of whether bit is set
None	returns true only if obj is a bignum with the same value as big
None	checks - integer
None	checks - integer trial_div - boolean
None	base - integer valid values 0 - mpi 2 - binary 10 - the default 16 - hex
None	creates an instance of openssl’s buffering io module
None	writes s to the stream
None	closes the sslsocket and flushes any unwritten data
None	executes the block for every line in the stream where lines are separated by eol
None	calls the given block once for each byte in the stream
None	returns true if the stream is at file which means there is no more data to be read
None	flushes buffered data to the sslsocket
None	reads one character from the stream
None	reads the next “line+ from the stream
None	writes args to the stream
None	formats and writes to the stream converting parameters under control of the format string
None	writes args to the stream along with a record separator
None	reads size bytes from the stream
None	reads at most maxlen bytes in the non-blocking manner
None	reads a one-character string from the stream
None	reads a line from the stream which is separated by eol
None	reads lines from the stream which are separated by eol
None	reads at most maxlen bytes from the stream
None	pushes character c back onto the stream such that a subsequent buffered character read will return it
None	writes s to the stream
None	writes str in the non-blocking manner
None	returns the names of all available ciphers in an array
None	the string must contain a valid cipher name like “aes-128-cbc” or “3des”
None	sets the cipher’s additional authenticated data
None	sets the authentication tag to verify the contents of the ciphertext
None	indicated whether this cipher instance uses an authenticated encryption mode
None	initializes the cipher for decryption
None	initializes the cipher for encryption
None	returns the remaining data held in the cipher object
None	sets the cipher iv
None	sets the cipher key
None	sets the key length of the cipher
None	returns the name of the cipher which may differ slightly from the original name provided
None	enables or disables padding
None	generates and sets the key/iv based on a password
None	generate set and return a random iv
None	generate set and return a random key
None	fully resets the internal state of the cipher
None	encrypts data in a streaming fashion
None	creates an instance of openssl’s configuration class
None	parses a given string as a blob that contains configuration for openssl
None	parses the configuration data read from io see also parse
None	get a specific section from the current configuration given the following configurating file being loaded you can get a hash of the specific section like so
None	sets a specific section name with a hash pairs given the following configuration being created it’s important to note that this will essentially merge any of the keys in pairs with the existing section
None	set the target key with a given value under a specific section
None	for a block
None	gets the value of key from the given section given the following configurating file being loaded you can get a specific value from the config if you know the section and key like so
None	string representation of this configuration object including the class name and its sections
None	get the names of all sections in the current configuration
None	get the parsable form of the current configuration given the following configuration being created you can parse get the serialized configuration using to_s and then parse it later
None	return the data hash computed with name digest
None	creates a digest instance based on string which is either the ln long name or sn short name of a supported digest algorithm
None	returns the block length of the digest algorithm i
None	returns the output size of the digest i
None	returns the sn of this digest instance
None	resets the digest in the sense that any #update that has been performed is abandoned and the digest is set to its initial state again
None	not every message digest can be computed in one single pass
None	fetch the engine as specified by the id string see ::engines for the currently loaded engines
None	it is only necessary to run cleanup when engines are loaded via ::load
None	returns an array of currently loaded engines
None	this method loads engines
None	this returns an openssl :cipher by name if it is available in this engine
None	returns an array of command definitions for the current engine
None	send the given command to this engine
None	this returns an openssl :digest by name
None	releases all internal structural references for this engine
None	get the id for this engine
None	pretty print this engine
None	loads the given private key by id and data
None	loads the given private key by id and data
None	get the descriptive name for this engine
None	set the defaults for this engine with the given flag
None	returns the authentication code as a binary string
None	returns the authentication code as a hex-encoded string
None	returns an instance of openssl :hmac set with the key and digest algorithm to be used
None	returns self as it was when it was first initialized with all processed data cleared from it
None	returns self updated with the message to be authenticated
None	pass - string name - a string describing the key
None	str - must be a der encoded pkcs12 string
None	pass - string salt - string - should be at least 8 bytes long
None	pass - string salt - string - should be at least 8 bytes long
None	many methods in this class aren’t documented
None	string is a der- or pem-encoded string containing an arbitrary private or public key
None	queries the entropy gathering daemon egd on socket path given by filename
None	reads bytes from filename and adds them to the prng
None	generates string with length number of pseudo-random bytes
None	generates string with length number of cryptographically strong pseudo-random bytes
None	::seed is equivalent to ::add where entropy is length of str
None	return true if the prng has been seeded with enough data false otherwise
None	writes a number of random generated bytes currently 1024 to filename which can be used to initialize the prng by calling ::load_random_file in a later session
None	checks if ‘key’ is priv key for this cert
None	checks that cert signature is made with privversion of this public ‘key’
None	gets x509v3 extensions as array of x509ext objects
None	sets x509_extensions
None	creates an x509 extension
None	array to x509_extension structure or or or the same for sn
None	creates a new name
None	adds a new entry with the given oid and value to this name
None	compares this name with other and returns 0 if they are the same and -1 or +1 if they are greater or less than each other respectively
None	returns true if name and other refer to the same hash key
None	the hash value returned is suitable for use as a certificate’s filename in a ca path
None	returns an md5 based hash used in openssl 0
None	returns an array representation of the distinguished name suitable for passing to ::new
None	converts the name to der encoding
None	returns this name as a distinguished name string
None	checks that cert signature is made with privversion of this public ‘key’
None	gets x509v3 extensions as array of x509ext objects
None	sets x509_extensions
None	adds the openssl :x509 :certificate cert to the certificate store
None	adds the certificates in file to the certificate store
None	adds the default certificates to the certificate store
None	general callback for openssl verify
None	sslsocket is an openssl :ssl :sslsocket string must be a der or pem encoded session
None	returns the session id
None	gets start time of the session
None	sets start time of the session
None	gets how long until the session expires in seconds
None	sets how long until the session expires in seconds
None	returns an asn1 encoded string that contains the session object
None	returns a pem encoded string that contains the session object
None	shows everything in the session object
None	you can get a list of valid methods with openssl :ssl :sslcontext :methods
None	the list of ciphers configured for this context
None	removes sessions in the internal cache that have expired at time
None	gets various openssl options
None	sets various openssl options
None	adds session to the session cache
None	the current session cache mode
None	sets the ssl session cache mode
None	returns the current session cache size
None	sets the session cache size
None	returns a hash containing the following keys
None	removes session from the session cache
None	sets the parameters for this ssl context to the values in params
None	this method is called automatically when a new sslsocket is created
None	you can get a list of valid versions with openssl :ssl :sslcontext :methods
None	creates a new instance of sslserver
None	works similar to tcpserver#accept
None	returns the tcpserver passed to the sslserver when initialized
None	waits for a ssl/tls client to initiate a handshake
None	initiates the ssl/tls handshake as a server in non-blocking manner
None	returns the alpn protocol string that was finally selected by the client during the handshake
None	the x509 certificate for this socket endpoint
None	the cipher being used for the current connection
None	returns the list of client cas
None	initiates an ssl/tls handshake with a server
None	initiates the ssl/tls handshake as a client in non-blocking manner
None	returns the protocol string that was finally selected by the client during the handshake
None	the x509 certificate for this socket’s peer
None	the x509 certificate chain for this socket’s peer
None	the number of bytes that are immediately available for reading
None	perform hostname verification after an ssl connection is established this method must be called after calling connect to ensure that the hostname of a remote peer has been verified
None	sets the session to be used when the connection is established
None	returns true if a reused session was negotiated during the handshake
None	returns a string representing the ssl/tls version that was negotiated for the connection for example “tlsv1
None	a description of the current connection state
None	shuts down the ssl connection and prepares it for another connection
None	reads length bytes from the ssl connection
None	writes string to the ssl connection
None	returns the result of the peer certificates verification
None	creates a new dh instance from scratch by generating the private and public components alike
None	either generates a dh instance from scratch or by reading already existing dh parameters from string
None	returns a string containing a shared secret computed from the other party’s public value
None	encodes this dh to its pem encoding
None	generates a private and public key unless a private key already exists
None	stores all parameters of key to the hash insecure private informations can leak out!!! don’t use :-)) i’s up to you)
None	validates the diffie-hellman parameters associated with this instance
None	indicates whether this dh instance has a private key associated with it or not
None	indicates whether this dh instance has a public key associated with it or not
None	returns a new dh instance that carries just the public information i
None	encodes this dh to its der encoding
None	prints all parameters of key to buffer insecure private informations can leak out!!! don’t use :-)) i’s up to you)
None	creates a new dsa instance by generating a private/public key pair from scratch
None	creates a new dsa instance by reading an existing key from string
None	encodes this dsa to its pem encoding
None	stores all parameters of key to the hash insecure private informations can leak out!!! don’t use :-)) i’s up to you)
None	indicates whether this dsa instance has a private key associated with it or not
None	indicates whether this dsa instance has a public key associated with it or not
None	returns a new dsa instance that carries just the public key information
None	computes and returns the dsa signature of string where string is expected to be an already-computed message digest of the original input data
None	verifies whether the signature is valid given the message digest input
None	encodes this dsa to its der encoding
None	prints all parameters of key to buffer insecure private informations can leak out!!! don’t use :-)) i’s up to you)
None	raises an exception if the key is invalid
None	outputs the ec key in pem encoding
None	returns a constant openssl :ec :group that is tied to the key
None	both #public_key? and #private_key? may return false at the same time unlike other pkey classes
None	both #public_key? and #private_key? may return false at the same time unlike other pkey classes
None	because pkey is an abstract class actually calling this method explicitly will raise a notimplementederror
None	to sign the string data digest an instance of openssl :digest must be provided
None	to verify the string signature digest an instance of openssl :digest must be provided to re-compute the message digest of the original data also a string
None	generates an rsa keypair
None	generates or loads an rsa keypair
None	outputs this keypair in pem encoding
None	this method is insecure private information can leak out!!! stores all parameters of key to the hash
None	does this keypair contain a private key?
None	decrypt string which has been encrypted with the public key with the private key
None	encrypt string with the private key
None	the return value is always true since every private key is also a public key
None	decrypt string which has been encrypted with the private key with the public key
None	encrypt string with the public key
None	makes new rsa instance containing the public key from the private key
None	outputs this keypair in der encoding
None	this method is insecure private information can leak out!!! dumps all parameters of a keypair to a string don’t use :-)) it’s up to you)
None	creates a new basicresponse and ignores all arguments
None	adds nonce to this response
None	adds a validation status 0 for good 1 for revoked 2 for unknown to this response for certificate_id
None	copies the nonce from request into this response
None	signs this response using the signer_cert and signer_key
None	returns an array of statuses for this response
None	verifies the signature of the response using the given certificates store and flags
None	creates a new openssl :ocsp :certificateid for the given subject and issuer x509 certificates
None	compares this certificate id with other and returns true if they are the same
None	compares this certificate id’s issuer with other and returns true if they are the same
None	returns the serial number of the issuing certificate
None	creates a new openssl :ocsp :request
None	adds certificate_id to the request
None	adds a nonce to the ocsp request
None	returns all certificate ids in this request
None	checks the nonce validity for this request and response
None	signs this ocsp request using signer_cert and signer_key
None	returns this request as a der-encoded string
None	verifies this request using the given certificates and x509 store
None	creates an openssl :ocsp :response from status and basic_response
None	creates a new openssl :ocsp :response
None	returns a basicresponse for this response
None	returns the status of the response
None	returns a status string for the response
None	returns this response as a der-encoded string
None	request - optional raw request either in pem or der format
None	returns the challenge string associated with this spki
None	returns the public key associated with the spki an instance of openssl :pkey
None	key - the private key to be used for signing this instance digest
None	returns the der encoding of this spki
None	returns the pem encoding of this spki
None	returns a textual representation of this spki useful for debugging purposes
None	key - the public key to be used for verifying the spki signature returns true if the signature is valid false otherwise
None	value please have a look at constructive and primitive to see how ruby types are mapped to asn
None	encodes this asn1data into a der-encoded string value
None	value is mandatory
None	this adds a new objectid to the internal tables
None	the long name of the objectid as defined in <openssl/objects
None	the object identifier as a string e
None	the short name of the objectid as defined in <openssl/objects
None	value is mandatory
None	returns an incremented value of default according to arg
None	initializes the instance and yields itself if called with a block
None	initializes a new instance and evaluates the optional block in context of the instance
None	directs to accept specified class t
None	heading banner preceding summary
None	subject of on_tail
None	parses environment variable env or its uppercase with splitting like a shell
None	wrapper method for getopts
None	returns option summary string
None	loads options from file names as filename
None	creates an optionparser :switch from the parameters
None	add option switch and handler
None	add option switch like with on but at head of summary
None	add option switch like with on but at tail of summary
None	parses command line arguments argv in order
None	parses command line arguments argv in order when environment variable posixly_correct is set and in permutation mode otherwise
None	parses command line arguments argv in permutation mode and returns list of non-option arguments
None	program name to be emitted in error message and default banner defaults to $0
None	directs to reject specified class argument
None	release code
None	removes the last list
None	add separator in summary
None	puts option summary into to and returns to
None	terminates option parsing
None	returns option summary list
None	subject of on / on_head accept / reject
None	returns version string from #program_name version and release
None	returns an incremented value of default according to arg
None	initializes the instance and yields itself if called with a block
None	initializes a new instance and evaluates the optional block in context of the instance
None	directs to accept specified class t
None	heading banner preceding summary
None	subject of on_tail
None	parses environment variable env or its uppercase with splitting like a shell
None	wrapper method for getopts
None	returns option summary string
None	loads options from file names as filename
None	creates an optionparser :switch from the parameters
None	add option switch and handler
None	add option switch like with on but at head of summary
None	add option switch like with on but at tail of summary
None	parses command line arguments argv in order
None	parses command line arguments argv in order when environment variable posixly_correct is set and in permutation mode otherwise
None	parses command line arguments argv in permutation mode and returns list of non-option arguments
None	program name to be emitted in error message and default banner defaults to $0
None	directs to reject specified class argument
None	release code
None	removes the last list
None	add separator in summary
None	puts option summary into to and returns to
None	terminates option parsing
None	returns option summary list
None	subject of on / on_head accept / reject
None	returns version string from #program_name version and release
None	initializes instance variable
None	substitution of getopts is possible as follows
None	actual optionparser object automatically created if nonexistent
None	sets optionparser object when opt is false or nil methods #options and #options= are undefined
None	parses self destructively in order and returns self containing the rest arguments left unparsed
None	parses self destructively and returns self containing the rest arguments left unparsed
None	parses self destructively in permutation mode and returns self containing the rest arguments left unparsed
None	completion for hash key
None	just initializes all instance variables
None	appends switch at the tail of the list and associates short long and negated long options
None	searches list id for opt and the optional patterns for completion pat
None	iterates over each option passing the option to the block
None	inserts switch at the head of the list and associates short long and negated long options
None	searches key in id list
None	creates the summary table passing each line to the block without newline
None	default stringizing method to emit standard error message
None	returns error reason
None	pushes back erred argument s to argv
None	guesses argument style from arg
None	produces the summary text
None	main name of the switch
None	raises an exception if any arguments given
None	parses argument if given or uses default value
None	returns nil if argument is not present or begins with ‘-’
None	raises an exception if argument is not present
None	creates a new openstruct object
None	compares this object and other for equality
None	returns the value of a member
None	sets the value of a member
None	remove the named field from the object
None	retrieves the value object corresponding to the each name objects repeatedly
None	yields all attributes as a symbol along with the corresponding values or returns an enumerator if not block is given
None	compares this object and other for equality
None	compute a hash-code for this openstruct
None	duplicate an openstruct object members
None	returns a string containing a detailed summary of the keys and values
None	provides marshalling support for use by the marshal library
None	provides marshalling support for use by the marshal library
None	converts the openstruct to a hash with keys representing each attribute as symbols and their corresponding values example
None	used internally to check if the openstruct is able to be modified before granting access to the internal hash table to be modified
None	used internally to defined properties on the openstruct
None	creates a new pathname object from the given string path and returns pathname object
None	returns the current working directory as a pathname
None	returns or yields pathname objects
None	create a pathname object from the given string or string-like object
None	returns the current working directory as a pathname
None	appends a pathname fragment to self to produce a new pathname object
None	provides a case-sensitive comparison operator for pathnames
None	compare this pathname with other
None	compare this pathname with other
None	predicate method for testing whether a path is absolute
None	iterates over and yields a new pathname object for each element in the given path in ascending order
None	returns the last access time for the file
None	returns the last component of the path
None	returns all the bytes from the file or the first n if specified
None	writes contents to the file opening it in binary mode
None	returns the birth time for the file
None	returns the children of the directory files and subdirectories not recursive as an array of pathname objects
None	changes file permissions
None	change owner and group of the file
None	returns clean pathname of self with consecutive slashes and useless dots removed
None	returns the last change time using directory information not the file itself
None	removes a file or directory using file
None	iterates over and yields a new pathname object for each element in the given path in descending order
None	returns all but the last component of the path
None	iterates over the children of the directory files and subdirectories not recursive
None	iterates over the entries files and subdirectories in the directory yielding a pathname object for each entry
None	iterates over each component of the path
None	iterates over each line in the file and yields a string object for each
None	return the entries files and subdirectories in the directory each as a pathname object
None	compare this pathname with other
None	returns the absolute path for the file
None	returns the file’s extension
None	iterates over the directory tree in a depth first manner yielding a pathname for each file under “this” directory
None	return true if the receiver matches the given pattern
None	return true if the receiver matches the given pattern
None	freezes this pathname
None	returns “type” of file “file”, “directory”, etc)
None	joins the given pathnames onto self to create a new pathname object
None	creates a hard link at pathname
None	creates a symbolic link
None	create the referenced directory
None	creates a full path including any intermediate directories that don’t yet exist
None	returns true if self points to a mountpoint
None	returns the last modified time of the file
None	opens the file for reading or writing
None	opens the referenced directory
None	returns the parent directory
None	returns all data from the file or the first n bytes if specified
None	returns all the lines from the file
None	read symbolic link
None	returns the real absolute pathname of self in the actual filesystem
None	returns the real absolute pathname for self in the actual filesystem
None	the opposite of #absolute? it returns false if the pathname begins with a slash
None	returns a relative path from the given base_directory to the receiver
None	rename the file
None	remove the referenced directory
None	recursively deletes a directory including all directories beneath it
None	predicate method for root directories
None	returns the dirname and the basename in an array
None	returns a file :stat object
None	return a pathname which is substituted by string#sub
None	return a pathname with repl added as a suffix to the basename
None	taints this pathname
None	return the path as a string
None	return the path as a string
None	truncates the file to length bytes
None	removes a file or directory using file
None	untaints this pathname
None	update the access and modification times of the file
None	writes contents to the file
None	returns a pretty printed object as a string
None	outputs obj to out in pretty printed format of width columns in width
None	outputs obj to out like ::pp but with no indent and newline
None	check whether the object_id id is in the current buffer of objects to be pretty printed
None	yields to a block and preserves the previous set of objects being printed
None	a convenience method like #object_group but also reformats the object’s object_id
None	removes an object from the set of objects being pretty printed
None	adds obj to the pretty printing buffer using object#pretty_print or object#pretty_print_cycle
None	a pretty print for a hash
None	a present standard failsafe for pretty printing any given object
None	adds the object_id id to the set of objects being pretty printed so as to not repeat objects
None	adds a separated list
None	creates a buffer for pretty printing
None	this is similar to ::format but the result has no breaks
None	breaks the buffer into lines that are shorter than maxwidth
None	this says “you can break a line here if necessary”, and a width-column text sep is inserted if a line is not broken at the point
None	returns the group most recently added to the stack
None	this is similar to breakable except the decision to break or not is determined individually
None	outputs buffered data
None	groups line break hints added in the block
None	takes a block and queues a new group that is indented 1 level further
None	increases left margin after newline with indent for line breaks added in the block
None	this adds obj as a text of width columns in width
None	create a prettyprint :singleline object arguments output - string or similar to store rendered text
None	appends sep to the text to be output
None	this is used as a predicate and ought to be called first
None	opens a block for grouping objects to be pretty printed
None	add obj to the text to be output
None	iterates the given block over all prime numbers
None	re-composes a prime factorization and returns the product
None	returns true if self is a prime number else returns false
None	returns the factorization of self
None	iterates the given block over all prime numbers
None	re-composes a prime factorization and returns the product
None	returns true if value is a prime number else returns false
None	returns the factorization of value
None	iterates the given block for each prime number
None	rewinds the internal position for enumeration
None	returns the next pseudo-prime number and move the internal position forward
None	returns the +index+th prime number
None	returns the cached prime numbers
None	outputs the results from the profiler
None	starts the profiler
None	stops the profiler
None	to construct a pstore object pass in the file path where you would like the data to be stored
None	retrieves a value from the pstore file data by name
None	stores an individual ruby object or a hierarchy of ruby objects in the data store file under the root name
None	ends the current #transaction discarding any changes to the data store
None	ends the current #transaction committing any changes to the data store immediately
None	removes an object hierarchy from the data store by name
None	this method is just like #[], save that you may also provide a default value for the object
None	returns the path to the data store file
None	returns true if the supplied name is currently in the data store
None	returns the names of all object hierarchies currently in the store
None	opens a new transaction for the data store
None	convert an object to yaml
None	dump ruby object o to a yaml string
None	dump a list of objects as separate documents to a document stream
None	returns the version of libyaml being used
None	load yaml in to a ruby data structure
None	load the document contained in filename
None	load multiple documents given in yaml
None	parse a yaml string in yaml
None	parse a file at filename
None	parse a yaml string in yaml
None	returns a default parser
None	safely load the yaml string in yaml
None	dump ruby object to a json string
None	emit a map
None	emit a map with value
None	emit a sequence with map and tag
None	emit an arbitrary object obj and tag
None	emit a scalar with value and tag
None	emit a sequence with list and tag
None	emit a scalar with value
None	emit a sequence of list
None	create a new psych :emitter that writes to io
None	emit an alias with anchor
None	get the output style canonical or not
None	end a document emission with an implicit ending
None	emit the end of a mapping
None	end sequence emission
None	end a stream emission see psych :handler#end_stream
None	get the indentation level
None	get the preferred line width
None	emit a scalar with value anchor tag and a plain or quoted string type with style
None	start a document emission with yaml version tags and an implicit start
None	start emitting a yaml map with anchor tag an implicit start and end and style
None	start emitting a sequence with anchor a tag implicit sequence start and end along with style
None	start a stream emission with encoding see psych :handler#start_stream
None	called when an alias is found to anchor
None	called when an empty event happens
None	called with the document ends
None	called when a map ends
None	called when a sequence ends
None	called when the yaml stream ends
None	called when a scalar value is found
None	called when the document starts with the declared version tag_directives if the document is implicit
None	called when a map starts
None	called when a sequence is started
None	called with encoding when the yaml stream starts
None	is this handler a streaming handler?
None	creates a new psych :parser instance with handler
None	returns a psych :parser :mark object that contains line column and index information
None	parse the yaml document contained in yaml
None	create a new scanner
None	parse and return an int from string
None	parse and return a time from string
None	tokenize string returning the ruby object
None	start streaming using encoding
None	create a new treebuilder instance
None	handles #end_document events with version tag_directives and implicit styling
None	handles #start_document events with version tag_directives and implicit styling
None	create a new streaming emitter
None	create a new alias that points to an anchor
None	create a new psych :nodes :document object
None	returns the root node
None	create a new psych :nodes :mapping object
None	create a new psych :nodes :node
None	iterate over each node in the tree
None	convert this node to ruby
None	convert this node to yaml
None	create a new psych :nodes :scalar object
None	create a new object representing a yaml sequence
None	create a new psych :nodes :stream node with an encoding that defaults to psych :nodes :stream :utf8
None	checks the status of the child process specified by pid
None	spawns the specified command on a newly allocated pty
None	allocates a pty pseudo-terminal
None	returns the exit status of the child for which pty#check raised this exception
None	the entry point of the parser
None	the method to fetch next token
None	this method is called when a parse error is found
None	for debugging output
None	convert internal id of token symbol to the string
None	exit parser
None	leave error recovering mode
None	enter error recovering mode
None	another entry point for the parser
None	loads the best available yaml library
None	create an rdoc task with the given name
None	the block passed to this method will be called just before running the rdoc generator
None	ensures that names only includes names for the :rdoc :clobber_rdoc and :rerdoc
None	task description for the clobber rdoc task or its renamed equivalent
None	sets default task values
None	create the tasks defined by this task lib
None	list of options that will be supplied to rdoc
None	task description for the rdoc task or its renamed equivalent
None	task description for the rerdoc task or its renamed description
None	creates a new alias with a token stream of text that aliases old_name to new_name has comment and is a singleton context
None	order by singleton then new_name
None	html fragment reference for this alias
None	full old name including namespace
None	html id-friendly version of #new_name
None	‘::’ for the alias of a singleton method/attribute ‘#’ for instance-level
None	new name with prefix ‘::’ or ‘#’
None	old name with prefix ‘::’ or ‘#’
None	creates a new anymethod with a token stream text and name
None	adds an_alias as an alias for this method in context
None	prefix for aref is ‘method’
None	the #call_seq or the #param_seq with method name if there is no call_seq
None	sets the different ways you can call this method
None	dumps this anymethod for use by ri
None	loads this anymethod from array
None	method name if the method has no assigned name it extracts it from call_seq
None	a list of this method’s method and yield parameters
None	pretty parameter list for this method
None	sets the store for this method and its referenced code objects
None	for methods that super find the superclass method that would be called
None	creates a new attr with body text name read/write status rw and comment
None	attributes are equal when their names singleton and rw are identical
None	add an_alias as an attribute in context
None	the aref prefix for attributes
None	returns attr_reader attr_writer or attr_accessor as appropriate
None	dumps this attr for use by ri
None	loads this attr from array
None	return a rdoc :classmodule of class class_type that is a copy of module module
None	creates a new classmodule with name with optional superclass this is a constructor for subclasses and must never be called directly
None	adds comment to this classmodule’s list of comments at location
None	ancestors list for this classmodule the list of included modules classes will add their superclass if any
None	html fragment reference for this module or class
None	clears the comment
None	prepares this classmodule for use by a generator
None	handy wrapper for marking up this class or module’s comment
None	ancestors of this class or module only
None	does this classmodule or any of its methods have document_self set?
None	does this class or module have a comment with content or is received_nodoc true?
None	iterates the ancestors of this class or module for which an rdoc :classmodule exists
None	looks for a symbol in the ancestors
None	finds a class or module with name in this namespace or its descendants
None	return the fully qualified name of this class or module
None	merges class_module into this classmodule
None	does this object represent a module?
None	allows overriding the initial name
None	name to use to generate the url modules and classes that are aliases for another module or class return the name of the latter
None	returns the classes and modules that are not constants aliasing another class or module
None	parses comment_location into an rdoc :markup :document composed of multiple rdoc :markup :documents with their file set
None	path to this class or module for use with html generator output
None	updates the child modules or classes of class/module parent by deleting the ones that have been removed from the documentation
None	search record used by rdoc :generator :jsonindex
None	sets the store for this class or module and its contained code objects
None	get the superclass of this class
None	set the superclass of this class to superclass
None	‘module’ or ‘class’
None	updates the child modules & classes by replacing the ones that are aliases through a constant
None	deletes from extends those whose module has been removed from the documentation
None	deletes from includes those whose module has been removed from the documentation
None	creates a new codeobject that will document itself and its children
None	replaces our comment with comment unless it is empty
None	should this codeobject be displayed in outputs
None	enables or disables documentation of this codeobject’s children unless it has been turned off by :enddoc
None	enables or disables documentation of this codeobject unless it has been turned off by :enddoc
None	does this object have a comment with content or is received_nodoc true?
None	turns documentation on/off and turns on/off document_self and document_children
None	yields each parent of this codeobject
None	file name where this codeobject was found
None	force the documentation of this object unless documentation has been turned off by :enddoc
None	sets the full_name overriding any computed full name
None	use this to ignore a codeobject and all its children until found again #record_location is called)
None	has this class been ignored? see also ignore
None	the options instance from the store this codeobject is attached to or a default options instance if the codeobject is not attached
None	our parent codeobject
None	file name of our parent
None	name of our parent
None	records the rdoc :toplevel file where this code object was defined
None	the section this codeobject is in
None	enable capture of documentation unless documentation has been turned off by :enddoc
None	disable capture of documentation
None	sets the store that contains this codeobject
None	use this to suppress a codeobject and all its children until the next file it is seen in or documentation is discovered
None	has this class been suppressed? see also suppress
None	creates a new comment with text that is found in the rdoc :toplevel location
None	a comment is empty if its text string is empty
None	look for a ‘call-seq’ in the comment to override the normal parameter handling
None	hack dubious
None	sets the format of this comment and resets any parsed document
None	normalizes the text
None	parses the comment into an rdoc :markup :document
None	removes private sections from this comment
None	replaces this comment’s text with text and resets the parsed document
None	returns true if this comment is in tomdoc format
None	creates a new constant with name value and comment
None	constants are ordered by name
None	constants are equal when their parent and name is the same
None	a constant is documented if it has a comment or is an alias for a documented class or module
None	full constant name including namespace
None	the module or class this constant is an alias for
None	dumps this constant for use by ri
None	loads this constant from array
None	path to this constant for use with html generator output
None	sets the store for this class or module and its contained code objects
None	creates an unnamed empty context with public current visibility
None	contexts are sorted by #full_name
None	adds an item of type klass with the given name and comment to the context
None	adds an_alias that is automatically resolved
None	adds attribute if not already there
None	adds a class named given_name with superclass
None	adds the class or module mod to the modules or classes hash self_hash and to all_hash either toplevel :modules_hash or toplevel :classes_hash), unless done_documenting is true
None	adds constant if not already there
None	adds extension module ext which should be an rdoc :extend
None	adds included module include which should be an rdoc :include
None	adds method if not already there
None	adds a module named name
None	adds an alias from from a class or module to name which was defined in file
None	adds require to this context’s top level
None	returns a section with title creating it if it doesn’t already exist
None	adds thing to the collection array
None	is there any content? this means any of comment aliases methods attributes external aliases require constant
None	creates the full name for a child with name
None	class attributes
None	class methods
None	array of classes in this context
None	all classes and modules in this namespace
None	hash of classes keyed by class name
None	the current documentation section that new items will be added to
None	is part of this thing was defined in file?
None	iterator for attributes
None	iterator for classes and modules
None	iterator for constants
None	iterator for extension modules
None	iterator for included modules
None	iterator for methods
None	iterator for each section’s contents sorted by title
None	finds an attribute name with singleton value singleton
None	finds an attribute with name in this context
None	finds a class method with name in this context
None	finds a constant with name in this context
None	find a module at a higher scope
None	finds an external alias name with singleton value singleton
None	finds an external alias with name in this context
None	finds a file with name in this context
None	finds an instance method with name in this context
None	finds a method constant attribute external alias module or file named symbol in this context
None	finds a method named name with singleton value singleton
None	finds a instance or module method with name in this context
None	find a module with name using ruby’s scoping rules
None	look up symbol first as a module then as a local symbol
None	look up a module named symbol
None	the full name for this context
None	does this context and its methods and constants all have documentation? yes fully documented doesn’t mean everything
None	url for this with a prefix
None	sets the defaults for methods and so-forth
None	instance attributes
None	instance methods
None	breaks #method_list into a nested hash by type class or instance and visibility :public :protected :private)
None	yields anymethod and attr entries matching the list of names in methods
None	array of modules in this context
None	hash of modules keyed by module name
None	name to use to generate the url
None	changes the visibility for new methods to visibility
None	record top_level as a file self is in
None	should we remove this context from the documentation? the answer is yes if received_nodoc is true any_content is false not counting includes all includes are modules not a string and their module has #remove_from_documentation? == true all classes and modules have #remove_from_documentation? == true
None	removes methods and attributes with a visibility less than min_visibility
None	tries to resolve unmatched aliases when a method or attribute has just been added
None	returns rdoc :context :section objects referenced in this context for use in a table of contents
None	sections in this context
None	sets the current section to a section with title
None	given an array methods of method names set the visibility of each to visibility
None	sorts sections alphabetically default or in tomdoc fashion none public internal deprecated
None	return the toplevel that owns us
None	upgrades normalmodule mod in enclosing to a class_type
None	allows cross-references to be created based on the given context rdoc :context)
None	returns a reference to name
None	reads the contents of filename and handles any encoding directives in the file
None	sets the encoding of string based on the magic comment
None	defaults eoutvar to ‘io’, otherwise is identical to erb’s initialize
None	instructs compiler how to write to io_variable
None	overrides compiler startup to set the eoutvar to an empty string only if it isn’t already set
None	creates a new markdown parser that enables the given extensions
None	parses the markdown document into an rdoc :document using the default extensions
None	wraps text in emphasis for rdoc inline formatting
None	finds a link reference for label and creates a new link to it with content as the link text
None	creates an rdoc :markup :listitem by parsing the unparsed content from the first parsing pass
None	stores label as a note and fills in previously unknown note references
None	creates a new link for the footnote reference and adds the reference to the note order list for proper display at the end of the document
None	todo remove when kpeg 0
None	creates an rdoc :markup :paragraph from parts and including extension-specific behavior
None	the internal kpeg parse method
None	stores label as a reference to link and fills in previously unknown link references
None	wraps text in strong markup for rdoc inline formatting
None	creates extension methods for the name extension to enable and disable the extension and to query if they are active
None	converts all newlines into hard breaks
None	allow style blocks
None	allow php markdown extras style definition lists
None	is the extension name enabled?
None	allow github flavored markdown
None	allow html
None	enables the notes extension
None	take a block of text and use various heuristics to determine its structure paragraphs lists and so on
None	parses str into an rdoc :markup :document
None	add to the sequences recognized as general markup
None	add to other inline sequences
None	add to the sequences used to add formatting to an individual word such as bold
None	we take input parse it if necessary then invoke the output formatter using a visitor to render the result
None	creates a new methodattr from token stream text and method or attribute name name
None	order by singleton then name
None	abstract method
None	prepend src with line numbers
None	html fragment reference for this method
None	prefix for aref defined by subclasses
None	attempts to sanitize the content passed by the ruby parser remove outer parentheses etc
None	a method/attribute is documented if any of the following is true it was marked with :nodoc ; it has a comment it is an alias for a documented method it has a #see method that is documented
None	full method/attribute name including namespace
None	html id-friendly method/attribute name
None	turns the method’s token stream into html
None	‘::’ for a class method/attribute ‘#’ for an instance method
None	name for output to html
None	name of our parent with special handling for un-marshaled methods
None	path to this method for use with html generator output
None	method/attribute name with class/instance indicator
None	used by rdoc :generator :jsonindex to create a record for the search engine
None	a method/attribute to look at in particular if this method/attribute has no documentation
None	sets the store for this class or module and its contained code objects
None	type of method/attribute class or instance
None	creates a new mixin for name with comment
None	mixins are sorted by name
None	full name based on module
None	attempts to locate the included module object
None	sets the store for this class or module and its contained code objects
None	the ancestors of this class including modules
None	the definition of this class class myclassname
None	the definition of this module module mymodulename
None	this is a module returns true
None	modules don’t have one raises nomethoderror
None	check that the files on the command line exist
None	ensure only one generator is loaded
None	set the title but only if not already set
None	completes any unfinished option setup business such as filtering for existent files creating a regexp for exclude and setting a default template
None	fixes the #page_dir to be relative to the root_dir and adds the #page_dir to the files list
None	returns a properly-space list of generators and their descriptions
None	parses command line options
None	don’t display progress as we process the files
None	set quietness to bool
None	removes directories from path that are outside the current directory
None	set up an output generator for the named generator_name
None	finds the template dir for template
None	sets the minimum visibility of a documented method
None	displays a warning using kernel#warn if we’re being verbose
None	writes the yaml file
None	determines if the file is a “binary” file which basically means it has content that an rdoc parser shouldn’t try to consume
None	return a parser that can handle a particular extension
None	returns a parser that can handle the extension for file_name
None	returns the file type from the modeline in file_name
None	finds and instantiates the correct parser for the given file_name and content
None	creates a new parser storing top_level file_name content options and stats in instance variables
None	record which file types this parser can understand
None	processes common directives for codeobjects for the c and ruby parsers
None	removes an emacs-style modeline from the first line of the document
None	if there is a markup parser_name comment at the front of the file use it to determine the parser
None	checks if file is a zip file in disguise
None	parses rd source and returns an rdoc :markup :document
None	add klass that can generate output after parsing
None	active rdoc :rdoc instance
None	sets the active rdoc :rdoc instance
None	creates a new rdoc :rdoc instance
None	generates documentation or a coverage report depending upon the settings in options
None	report an error message and exit
None	gathers a set of parseable files from the files and directories listed in files
None	generates documentation for file_info from parse_files) into the output dir using the generator selected by the rdoc options
None	turns rdoc from stdin into html
None	installs a siginfo handler that prints the current filename
None	return a list of the files to be processed in a directory
None	loads options from
None	given a list of files and directories create a list of all the ruby files they contain
None	return the path name of the flag file in an output directory
None	parses filename and returns an rdoc :toplevel
None	parse each file on the command line recursively entering directories
None	removes a siginfo handler and replaces the previous
None	removes file extensions known to be unparseable from files and tags files for emacs and vim
None	create an output dir if it doesn’t exist
None	sets the current documentation tree to store and sets the store’s rdoc driver to this instance
None	update the flag file in an output directory
None	creates a new require that loads name with comment
None	the rdoc :toplevel corresponding to this require or nil if not found
None	post installs hook that generates documentation for each specification in specs
None	loads the rdoc generator
None	creates a new documentation generator for spec
None	removes legacy rdoc arguments from args
None	generates documentation using the named generator “darkfish” or “ri”) and following the given options
None	generates rdoc and ri data
None	is rdoc documentation installed?
None	removes generated rdoc and ri data
None	is ri data installed?
None	prepares the spec for documentation generation
None	creates a new lexer for content
None	returns an array of ruby tokens
None	creates a new webrick servlet
None	serves the asset at the path in req for generator_name via res
None	get request entry point
None	fills in res with the class module or page for req from store
None	creates the json search index on res for the given store
None	returns the rdoc :store and path relative to mount_path for documentation at path
None	generates an error page for the exception while handling req on res
None	instantiates a darkfish generator for store
None	handles the if-modified-since http header on req for path
None	returns an array of installed documentation
None	returns a 404 page built by generator for req on res
None	enumerates the ri paths
None	generates the root page on res
None	generates a search index for the root page on res
None	displays documentation for req on res whether that be html or some asset
None	returns an rdoc :store for the given source_name ‘ruby’ or a gem name)
None	adds the superclass to the included modules
None	the definition of this singleton class class << myclassname
None	creates a new stats that will have num_files
None	records the parsing of an alias as
None	records the parsing of an attribute attribute
None	records the parsing of a class klass
None	records the parsing of constant
None	records the parsing of file
None	records the parsing of method
None	records the parsing of a module mod
None	call this to mark the beginning of parsing for display purposes
None	calculates documentation totals and percentages for classes modules constants attributes and methods
None	sets coverage report level
None	returns the length and number of undocumented items in collection
None	call this to mark the end of parsing for display purposes
None	the documentation status of this project
None	a report that says you did a great job!
None	calculates the percentage of items documented
None	returns a report on which items are not documented
None	returns a report on undocumented attributes in classmodule cm
None	returns a report on undocumented items in classmodule cm
None	returns a report on undocumented constants in classmodule cm
None	returns a report on undocumented methods in classmodule cm
None	returns a summary of the collected statistics
None	determines which parameters in method were not documented
None	creates a new store of type that will load or save to path
None	adds module as an enclosure namespace for the given variable for c files
None	adds c variables from an rdoc :parser :c
None	adds the file with name as an rdoc :toplevel to the store
None	returns all classes discovered by rdoc
None	returns all classes and modules discovered by rdoc
None	all toplevels known to rdoc
None	returns all modules discovered by rdoc
None	ancestors cache accessor
None	attributes cache accessor
None	path to the cache file
None	path to the ri data for klass_name
None	class methods cache accessor
None	path where data for klass_name will be stored methods or class data
None	hash of all classes known to rdoc
None	prepares the rdoc code object tree for use by a generator
None	hash of all files known to rdoc
None	finds the enclosure namespace for the given c variable
None	finds the class with name in all discovered classes
None	finds the class with name starting in namespace from
None	finds the class or module with name
None	finds the file with name in all discovered files
None	finds the module with name in all discovered modules
None	returns the rdoc :toplevel that is a text file and has the given file_name
None	finds unique classes/modules defined in all_hash and returns them as an array
None	fixes the erroneous basicobject < object in 1
None	friendly rendition of path
None	instance methods cache accessor
None	loads all items from this store into memory
None	loads cache file for this store
None	loads ri data for klass_name and hooks it up to this store
None	loads ri data for klass_name
None	loads ri data for method_name in klass_name
None	loads ri data for page_name
None	gets the main page for this rdoc store
None	sets the main page for this rdoc store
None	converts the variable => classmodule map variables from a c parser into a variable => class name map
None	path to the ri data for method_name in klass_name
None	modules cache accessor
None	hash of all modules known to rdoc
None	returns the rdoc :toplevel that is a text file and has the given name
None	path to the ri data for page_name
None	removes from all_hash the contexts that are nodoc or have no content
None	saves all entries in the store
None	writes the cache file for this store
None	writes the ri data for klass or module
None	writes the ri data for method on klass
None	writes the ri data for page
None	source of the contents of this store
None	gets the title for this rdoc store
None	sets the title page for this rdoc store
None	returns the unique classes discovered by rdoc
None	returns the unique classes and modules discovered by rdoc
None	returns the unique modules discovered by rdoc
None	create an rdoc task with the given name
None	the block passed to this method will be called just before running the rdoc generator
None	ensures that names only includes names for the :rdoc :clobber_rdoc and :rerdoc
None	task description for the clobber rdoc task or its renamed equivalent
None	sets default task values
None	create the tasks defined by this task lib
None	list of options that will be supplied to rdoc
None	task description for the rdoc task or its renamed equivalent
None	task description for the rerdoc task or its renamed description
None	asserts path is a directory
None	asserts path is a file
None	creates an rdoc :comment with text which was defined on top_level
None	refutes path exists
None	abstract test-case setup
None	creates a temporary directory changes the current directory to it for the duration of the block
None	run capture_io with setting $verbose = true
None	transcodes character to encoding with a fallback character
None	expands tab characters in text to eight spaces
None	flush text left based on the shortest line
None	convert a string in markup format into html
None	strips hashes expands tabs then flushes text to the left
None	normalizes text then builds a rdoc :markup :document from it
None	the first limit characters of text as html
None	strips leading # characters from text
None	strips leading and trailing n characters from text
None	strips style comments
None	converts ampersand dashes ellipsis quotes copyright and registered trademark symbols in text to properly encoded characters
None	wraps txt to line_len
None	converts token_stream to html wrapping various tokens with <span> elements
None	adds tokens to the collected tokens
None	starts collecting tokens
None	remove the last token from the collected tokens
None	current token stream
None	returns a string representation of the token stream
None	creates a new tomdoc parser
None	parses tomdoc from text a string containing tomdoc-format text
None	extracts the signature section’s method signature an rdoc :comment that will be parsed and have the signature extracted returns a string containing the signature and nil if not
None	builds a heading from the token stream the level of heading to create returns an rdoc :markup :heading
None	builds a paragraph from the token stream unused returns an rdoc :markup :paragraph
None	builds a verbatim from the token stream
None	turns text into an array of tokens a string containing tomdoc-format text
None	creates a new toplevel for the file at absolute_name
None	an rdoc :toplevel is equal to another with the same #relative_name
None	adds an_alias to object instead of self
None	adds constant to object instead of self
None	adds include to object instead of self
None	adds method to object instead of self
None	adds class or module mod
None	base name of this file
None	returns a url for this source file on some web repository
None	only a toplevel that contains text file) will be displayed
None	finds a class or module named symbol
None	finds a module or class with name
None	returns the relative name of this file
None	an rdoc :toplevel has the same hash as another with the same #relative_name
None	url for this with a prefix
None	time this file was last modified if known
None	dumps this toplevel for use by ri
None	returns the normalclass “object”, creating it if not found
None	base name of this file without the extension
None	path to this file for use with html generator output
None	search record used by rdoc :generator :jsonindex
None	is this toplevel from a text file instead of a source code file?
None	creates a new missingfileerror for the missing file for the given name that should have been in the store
None	prints a file with a progress bar
None	creates a new quiet that will print nothing
None	prints a message at the beginning of parsing
None	prints when rdoc is done
None	prints when an alias is added
None	prints when an attribute is added
None	prints when a class is added
None	prints when a constant is added
None	prints when a file is added
None	prints when a method is added
None	prints when a module is added
None	returns a marker for rdoc :codeobject co being undocumented
None	default options for ri
None	dump data_path using pp
None	creates a new driver using initial_options from ::process_args
None	parses argv and returns a hash of options
None	runs the ri command line executable using argv
None	adds paths for undocumented classes also_in to out
None	adds a class header to out for class name which is described in classes
None	adds extends to out
None	adds a list of extensions to this module of the given type to out
None	adds “(from …)” to out for store
None	adds includes to out
None	looks up the method name and adds it to out
None	adds documentation for all methods in klass to out
None	adds a list of methods to out with a heading of name
None	returns ancestor classes of klass
None	builds a rdoc :markup :document from found klasess and includes
None	hash mapping a known class or module to the stores it can be loaded from
None	returns the stores wherein name is found along with the classes extends and includes that match it
None	completes name based on the caches
None	converts document to text and writes it to the pager
None	outputs formatted ri data for class name
None	outputs formatted ri data for method name
None	outputs formatted ri data for the class or method name
None	displays each name in name
None	outputs formatted ri data for page name
None	outputs a formatted ri page list for the pages in store
None	expands abbreviated klass klass into a fully-qualified class
None	expands the class portion of name into a fully-qualified class
None	filters the methods in found trying to find a match for name
None	yields items matching name including the store they were found in the class being searched for the class they were found in an ancestor the types of methods to look up from method_type), and the method name being searched for
None	finds the given pager for jruby
None	finds a store that matches name which can be the name of a gem “ruby”, “home” or “site”
None	creates a new rdoc :markup :formatter
None	is file in env?
None	runs ri interactively using readline if it is available
None	lists classes known to ri starting with names
None	returns an array of methods matching name
None	loads ri data for method name on klass from store
None	returns an array of ri data for methods matching name
None	returns a filtered list of methods matching name
None	builds a rdoc :markup :document from found klasses and includes
None	returns the type of method :both :instance :class) for selector
None	returns a regular expression for name that will match an rdoc :anymethod’s name
None	paginates output through a pager program
None	are we using a pager?
None	extracts the class selector and method name parts from name like foo :bar#baz
None	sets up a pager program to pass output through
None	starts a webrick server for ri
None	iterates over each selected path yielding the directory and type
None	the ri directory for the gem with gem_name
None	the latest installed gems’ ri directories
None	the location of the rdoc data in the user’s home directory
None	returns existing directories from the selected documentation directories as an array
None	returns selected documentation directories including nonexistent directories
None	the location of ri data installed into the site dir
None	the location of the built-in ri data
None	create an ri task with the given name
None	sets default task values
None	creates a new rdoc :rd :blockparser
None	adds footnote content to the document
None	adds label label to the document
None	retrieves the content of values as a single string
None	current line number
None	raises a parseerror when invalid formatting is found
None	creates a paragraph for value
None	parses src and returns an rdoc :markup :document
None	creates a new inline for rdoc and reference
None	appends more to this inline
None	initializes the inline with rdoc and inline
None	creates a new parser for inline markup in the rd format
None	creates a new rdoc :rd :inline for the rdoc markup and the raw reference
None	returns the next token from the inline text
None	returns words following an error
None	raises a parseerror when invalid formatting is found
None	parses the inline text from rd format into rdoc format
None	returns words before the error
None	prepares for parsing a c file
None	removes duplicate call-seq entries for methods using the same implementation
None	scans content for rb_define_alias
None	scans content for rb_attr and rb_define_attr
None	scans content for boot_defclass
None	scans content for rb_define_class boot_defclass rb_define_class_under and rb_singleton_class
None	scans content for rb_define_variable rb_define_readonly_variable rb_define_const and rb_define_global_const
None	scans content for rb_define_class
None	scans content for rb_define_class_under
None	scans content for rb_define_module
None	scans content for rb_define_module_under
None	scans content for rb_include_module
None	scans content for rb_define_method rb_define_singleton_method rb_define_module_function rb_define_private_method rb_define_global_function and define_filetest_function
None	creates classes and module that were missing were defined due to the file order being different than the declaration order
None	scans content for rb_define_module and rb_define_module_under
None	scans content for rb_singleton_class
None	scans content for struct_define_without_accessor
None	finds the comment for an alias on class_name from new_name to old_name
None	finds a comment for rb_define_attr rb_attr or document-attr
None	find the c code corresponding to a ruby method
None	finds a rdoc :normalclass or rdoc :normalmodule for raw_name
None	look for class or module documentation above init_+class_name+ void in a document-class class_name or module comment or above an rb_define_class or module
None	finds a comment matching type and const_name either above the comment or in the matching document- section
None	handles modifiers in comment and updates meth_obj as appropriate
None	finds a document-method override for meth_obj on class_name
None	creates a new rdoc :attr attr_name on class var_name that is either read write or both
None	creates a new rdoc :normalclass or rdoc :normalmodule based on type named class_name in parent which was assigned to the c var_name
None	adds constants
None	removes ifdefs that would otherwise confuse us
None	adds an rdoc :anymethod meth_name defined on a class or module assigned to var_name
None	registers a singleton class sclass_var as a singleton of class_var
None	normalizes tabs in body
None	loads the variable map with the given name from the rdoc :store if present
None	look for directives in a normal comment block this method modifies the comment
None	extracts parameters from the method_body and returns a method parameter string
None	removes lines that are commented out that might otherwise get picked up when scanning for classes and methods
None	extracts the classes modules methods attributes constants and aliases from a c file and returns an rdoc :toplevel for this file
None	attaches the continuation of the previous line to the entry_body
None	creates an rdoc :markup :document given the groups of changelog entries
None	returns a list of changelog entries an rdoc :markup nodes for the given entries
None	returns an rdoc :markup :list containing the given items in the changelog
None	groups entries by date
None	parses the entries in the changelog
None	converts the changelog into an rdoc :markup :document
None	creates an markdown-format toplevel for the given file
None	creates an rd-format toplevel for the given file
None	creates a new ruby parser
None	look for the first comment in a file that isn’t a shebang line
None	aborts with msg
None	looks for a true or false token
None	or separated named) and return the ultimate name the associated container and the given name with the ::)
None	return a superclass which can be either a constant of an expression
None	parse a constant which might be qualified by one or more class or module names
None	get a constant that may be surrounded by parens
None	extracts a name or symbol from the token stream
None	look for directives in a normal comment block this routine modifies its comment parameter
None	adds useful info about the parser to message
None	creates a comment with the correct format
None	parses an alias in context with comment
None	creates an rdoc :attr for the name following tk setting the comment to comment
None	creates an rdoc :attr for each attribute listed after tk setting the comment for each to comment
None	extracts call parameters from the token stream
None	parses a class in context with comment
None	generates an rdoc :method or rdoc :attr from comment by looking for :method or :attr directives in comment
None	creates an rdoc :method on container from comment if there is a signature section in the comment
None	parses a constant in context with comment
None	parses a meta-programmed attribute and creates an rdoc :attr
None	parses a meta-programmed method
None	parses a normal method defined by def
None	parses a method that needs to be ignored
None	extracts yield parameters from method
None	capture the method’s parameters
None	parses the parameters and body of meth
None	parses an rdoc :normalmodule in container with comment
None	parses an rdoc :require in context containing comment
None	parses a rescue
None	the core of the ruby parser
None	parse up to no symbol arguments
None	returns symbol text from the next token
None	parses statements in the top-level container
None	determines the visibility in container from tk
None	determines the block parameter for context
None	directives are modifier comments that can appear after class module or method names
None	handles directives following the definition for context any rdoc :codeobject) if the directives are allowed at this point
None	removes private comments from comment
None	scans this ruby file for ruby constructs
None	skip the var in part of a ‘for’ statement
None	skips the next method in container
None	while until and for have an optional do
None	skip spaces until a comment is found
None	prints message to +$stderr+ unless we’re being quiet
None	adds a token listener obj but you should probably use #token_listener
None	fetches the next token from the scanner
None	reads and returns all tokens up to one of tokens
None	retrieves a string representation of the read tokens
None	peek equivalent for #get_tkread
None	peek at the next token but don’t remove it from the stream
None	removes the token listener obj
None	resets the tools
None	skips whitespace tokens including newlines if skip_nl is true
None	has obj listen to tokens
None	returns tk to the scanner
None	prepare to parse a plain file
None	removes the encoding magic comment from text
None	removes private comments
None	extract the file contents and attach them to the toplevel as a comment
None	creates a new attribute manager that understands bold emphasized and teletype text
None	adds a markup class with name for words surrounded by html tag tag
None	adds a special handler for pattern with name
None	adds a markup class with name for words wrapped in the start and stop character
None	return an attribute object with the given turn_on and turn_off bits set
None	changes the current attribute from current to new
None	used by the tests to change attributes by name from current_set to new_set
None	map attributes like textto the sequence 001002<char>001003<char>, where <char> is a per-attribute specific character
None	converts html tags to rdoc attributes
None	converts special sequences to rdoc attributes
None	copies start_pos to end_pos from the current string
None	debug method that prints a string along with its attributes
None	processes str converting attributes html and specials
None	escapes special sequences of text to prevent conversion to rdoc
None	splits the string into chunks by attribute change
None	unescapes special sequences of text
None	creates a new attributes set
None	returns a string representation of bitmap
None	returns a unique bit for name
None	yields each attribute name in bitmap
None	creates a new attrspan for length characters
None	accesses flags for character n
None	toggles bits from start to length
None	rdoc :markup :blankline is a singleton
None	calls accept_blank_line on visitor
None	calls accept_block_quote on visitor
None	creates a new document with parts
None	appends part to the document
None	runs this document and all its items through visitor
None	concatenates the given parts onto the document
None	enumerator for the parts of this document
None	does this document have no parts?
None	the file this document was created from
None	when this is a collection of documents #file is not set and this document contains only other documents as its direct children) merge replaces documents in this class with documents from other when the file matches and adds documents from other when the files do not
None	does this document contain other documents?
None	appends parts to the document
None	returns an array of headings in the document
None	converts a target url to one that is relative to a given path
None	creates a new formatter
None	adds document to the output
None	adds a special for links of the form rdoc-…:
None	adds a special for links of the form ”>word>
None	add a new set of tags for an attribute
None	allows tag to be decorated with additional information
None	marks up content
None	converts flow items flow
None	converts added specials
None	converts a string to be fancier if desired
None	use ignore in your subclass to ignore the content of a node
None	are we currently inside tt tags?
None	turns off tags for item on res
None	turns on tags for item on res
None	extracts and a scheme url and an anchor id from url and returns them
None	is tag a tt tag?
None	call to add the visitor tests to your test case
None	call setup when inheriting from this test case
None	calls accept_blank_line
None	calls accept_block_quote
None	test case that calls @to
None	calls accept_heading with a level 5 rdoc :markup :heading
None	calls accept_heading_1 with a level 1 rdoc :markup :heading
None	calls accept_heading_2 with a level 2 rdoc :markup :heading
None	calls accept_heading_3 with a level 3 rdoc :markup :heading
None	calls accept_heading_4 with a level 4 rdoc :markup :heading
None	calls accept_heading_b with a bold level 1 rdoc :markup :heading
None	calls accept_heading_suppressed_crossref with a level 1 rdoc :markup :heading containing a suppressed crossref
None	calls accept_list_end_bullet
None	calls accept_list_end_label
None	calls accept_list_end_lalpha
None	calls accept_list_end_note
None	calls accept_list_end_number
None	calls accept_list_end_ualpha
None	calls accept_list_item_end_bullet
None	calls accept_list_item_end_label
None	calls accept_list_item_end_lalpha
None	calls accept_list_item_end_note
None	calls accept_list_item_end_number
None	calls accept_list_item_end_ualpha
None	calls accept_list_item_start_bullet
None	calls accept_list_item_start_label
None	calls accept_list_item_start_lalpha
None	calls accept_list_item_start_note
None	calls accept_list_item_start_note_2
None	calls accept_list_item_start_note_multi_description
None	calls accept_list_item_start_note_multi_label
None	calls accept_list_item_start_number
None	calls accept_list_item_start_ualpha
None	calls accept_list_start_bullet
None	calls accept_list_start_label
None	calls accept_list_start_lalpha
None	calls accept_list_start_note
None	calls accept_list_start_number
None	calls accept_list_start_ualpha
None	calls accept_paragraph
None	calls accept_paragraph_b with a rdoc :markup :paragraph containing bold words
None	calls accept_paragraph_br with a rdoc :markup :paragraph containing a <br>
None	calls accept_paragraph with a paragraph containing a hard break
None	calls accept_paragraph_i with a rdoc :markup :paragraph containing emphasized words
None	calls accept_paragraph_plus with a rdoc :markup :paragraph containing teletype words
None	calls accept_paragraph_star with a rdoc :markup :paragraph containing bold words
None	calls accept_paragraph_underscore with a rdoc :markup :paragraph containing emphasized words
None	calls accept_raw with a rdoc :markup :raw
None	calls accept_rule with a rdoc :markup :rule
None	calls accept_verbatim with a rdoc :markup :verbatim
None	calls end_accepting on your test case which needs to call @to
None	calls list_nested with a two-level list
None	calls list_verbatim with a list containing a verbatim block
None	calls start_accepting which needs to verify startup state
None	rdoc :markup :hardbreak is a singleton
None	calls accept_hard_break on visitor
None	creates a new include that will import file from include_path
None	creates a new indentedparagraph containing parts indented with indent spaces
None	calls accept_indented_paragraph on visitor
None	joins the raw paragraph text and converts inline hardbreaks to the hard_break text followed by the indent
None	creates a new list of type with items
None	appends item to the list
None	runs this list and all its items through visitor
None	is the list empty?
None	returns the last item in the list
None	appends items to the list
None	creates a new listitem with an optional label containing parts
None	appends part to the listitem
None	runs this list item and all its parts through visitor
None	is the listitem empty?
None	length of parts in the listitem
None	adds parts to the listitem
None	calls accept_paragraph on visitor
None	joins the raw paragraph text and converts inline hardbreaks to the hard_break text
None	creates a new parser
None	parses str into a document
None	returns a token stream for str for testing
None	builds a heading of level
None	builds a list flush to margin
None	builds a paragraph that is flush to margin
None	builds a verbatim that is indented from margin
None	the character offset for the input string at the given byte_offset
None	pulls the next token from the stream
None	returns the next token on the stream without modifying the stream
None	creates the stringscanner
None	skips the next token if its type is token_type
None	calculates the column by character and line of the current token based on byte_offset
None	returns the current token to the token stream
None	creates a new pre-processor for input_file_name that will look for included files in include_path
None	adds a post-process handler for directives
None	registered post-processors
None	registers directive as one handled by rdoc
None	registered directives
None	clears all registered directives and post-processors
None	look for the given file in the directory containing the current file and then in each of the directories specified in the rdoc_include path
None	look for directives in the given text
None	performs the actions described by directive and its parameter param
None	handles the :include filename directive
None	creates a new raw containing parts
None	appends text
None	calls accept_raw+ on visitor
None	appends other‘s parts
None	appends texts onto this paragraph
None	the raw text
None	calls accept_rule on visitor
None	creates a new special sequence of type with text
None	specials are equal when the have the same text and type
None	adds test cases to the calling testcase
None	test case that calls @to
None	test case that calls @to
None	test case that calls @to
None	test case that calls @to
None	test case that calls @to
None	test case that calls @to
None	test case that calls @to
None	creates a new toansi visitor that is ready to output vibrant ansi color!
None	overrides indent width to ensure output lines up correctly
None	adds coloring to note and label list items
None	maps attributes to ansi sequences
None	starts accepting with a reset screen
None	returns a new tobs that is ready for hot backspace action!
None	makes heading text bold
None	turns on or off special handling for convert_string
None	calls #convert_string on the result of #convert_special
None	adds bold or underline mixed with backspaces
None	sets a flag that is picked up by annotate to do the right thing in convert_string
None	creates a new formatter that will output html
None	special is a
None	special is a potential link
None	special is an rdoc-schemed link that will be converted into a hyperlink
None	this special is a link where the label is different from the url label url or {long label} url
None	cgi-escapes text
None	generate a link to url with content text
None	determines the html list element for list_type and open_tag
None	maps attributes to html tags
None	returns the html end-tag for list_type
None	returns the html tag for list_type possible using a label from list_item
None	returns true if text is valid ruby syntax
None	converts item to html using rdoc :text#to_html
None	adds blank_line to the output
None	adds block_quote to the output
None	adds heading to the output
None	finishes consumption of list
None	finishes consumption of list_item
None	prepares the visitor for consuming list_item
None	prepares the visitor for consuming list
None	adds paragraph to the output
None	adds raw to the output
None	adds rule to the output
None	adds verbatim to the output
None	returns the generated output
None	prepares the visitor for html generation
None	creates a new crossref resolver that generates links relative to context which lives at from_path in the generated files
None	creates a link to the reference name if the name exists
None	generates links for rdoc-ref scheme urls and allows rdoc :markup :tohtml to handle other schemes
None	we’re invoked when any text matches the crossref pattern
None	handles rdoc-ref scheme links and allows rdoc :markup :tohtml to handle other schemes
None	special is an rdoc-schemed link that will be converted into a hyperlink
None	creates an html link to name with the given text
None	creates a new tohtmlsnippet formatter that will cut off the input on the next word boundary after the given number of characters or paragraphs of text have been encountered
None	adds heading to the output as a paragraph
None	finishes consumption of list_item
None	prepares the visitor for consuming list_item
None	prepares the visitor for consuming list
None	adds verbatim to the output
None	throws :done when #paragraph_limit paragraphs have been encountered
None	marks up content
None	converts flow items flow
None	returns just the text of link url is only used to determine the link type
None	removes escaping from the cross-references in special
None	special is a
None	in snippets there are no lists
None	lists are paragraphs but notes and labels have a separator
None	maintains a bitmask to allow html elements to be closed properly
None	maintains a bitmask to allow html elements to be closed properly
None	prepares the visitor for html snippet generation
None	truncates text at the end of the first word after the character_limit
None	converts the parts of paragraph to a single entry
None	creates a new formatter that will output html-safe labels
None	converts text to an html-safe label
None	converts the crossref special to plain text removing the suppression marker if any
None	converts the tidylink special to just the text part
None	creates a new formatter that will output markdown format text
None	finishes consumption of list
None	finishes consumption of list_item
None	prepares the visitor for consuming list_item
None	prepares the visitor for consuming list
None	adds rule to the output
None	outputs verbatim indented 4 columns
None	creates a markdown-style url from url with text
None	handles rdoc- type links for footnotes
None	adds a newline to the output
None	converts the rdoc-…: links into a markdown
None	converts the rdoc markup tidylink into a markdown
None	maps attributes to html sequences
None	creates a new formatter that will output mostly rdoc markup
None	adds blank_line to the output
None	adds paragraph to the output
None	adds heading to the output
None	adds paragraph to the output
None	finishes consumption of list
None	finishes consumption of list_item
None	prepares the visitor for consuming list_item
None	prepares the visitor for consuming list
None	adds paragraph to the output
None	adds raw to the output
None	adds rule to the output
None	outputs verbatim indented 2 columns
None	applies attribute-specific markup to text using rdoc :attributemanager
None	returns the generated output
None	adds a newline to the output
None	removes preceding \ from the suppressed crossref special
None	maps attributes to html sequences
None	prepares the visitor for text generation
None	adds the stored prefix to the output and clears it
None	wraps text to width
None	singleton for table-of-contents generation
None	adds document to the output using its heading cutoff if present
None	adds heading to the table of contents
None	returns the table of contents
None	prepares the visitor for text generation
None	returns true if heading is below the display threshold
None	creates a new tt-only formatter
None	adds tts from block_quote to the output
None	pops the list type for list from list_type
None	prepares the visitor for consuming list_item
None	pushes the list type for list onto list_type
None	adds paragraph to the output
None	does nothing to markup_item because it doesn’t have any user-built content
None	returns an array of items that were wrapped in plus tt or code
None	prepares the visitor for gathering tt sections
None	extracts tt sections from text
None	calls accept_verbatim on visitor
None	collapses 3+ newlines into two newlines
None	is this verbatim section ruby code?
None	the text of the section
None	returns the locale object for locale_name
None	sets the locale object for locale_name
None	creates a new locale object for name locale
None	loads translation messages from locale_directory/+@name+/rdoc
None	translates the message into locale
None	creates a new i18n supported text for raw text
None	extracts translation target messages and yields each message
None	translates raw text into locale
None	initialize a few instance variables before we start
None	creates a template from its components and the body_file
None	directory where generated class html files live relative to the output dir
None	copies static files from the static_path into the output directory
None	output progress information if debugging is enabled
None	directory where generated class html files live relative to the output dir
None	create the directories the generated docs will live in if they don’t already exist
None	build the initial indices and output objects based on an array of toplevel objects containing the extracted information
None	generates a class file for klass
None	generate a documentation file for each class and module
None	generate a documentation file for each file
None	generate an index page which lists all the classes which are documented
None	generate a page file for file
None	generates the 404 page for the rdoc servlet
None	generates the servlet root page for the rdoc servlet
None	generate an index page which lists all the classes which are documented
None	return a list of the documented modules sorted by salience first then by name
None	try to extract subversion information out of the first constant whose value looks like a subversion id tag
None	renders the erb contained in file_name relative to the template directory and returns the result based on the current context
None	load and render the erb template in the given template_file and write it out to out_file
None	prepares for generation of output from the current directory
None	retrieves a cache template for file if present or fills the cache
None	creates the result for template with context
None	return a string describing the amount of time in the given number of seconds in terms a human can understand easily
None	copy over the stylesheet into the appropriate place in the output directory
None	creates a new generator
None	builds the json index as a hash
None	the directory classes are written to
None	output progress information if debugging is enabled
None	the directory files are written to
None	writes the json index to disk
None	compress the search_index
None	adds classes and modules to the index
None	adds methods to the index
None	adds pages to the index
None	removes whitespace and downcases string
None	generates a relative url from this object’s path to target_path
None	generates a relative url from from_path to this object’s path
None	build a webcvs url starting for the given url with full_path appended as the destination path
None	handy wrapper for marking up this object’s comment
None	creates an rdoc :markup :tohtmlcrossref formatter
None	set up a new
None	writes the parsed data store to disk for use by ri
None	set up a new ri generator
None	creates a message extractor for store
None	extracts messages from store stores them into rdoc :generator :pot :po and returns it
None	creates an object that represents po format
None	adds a po entry to the po
None	returns po format text for the po
None	creates a po entry for msgid
None	merges the po entry with other_entry
None	returns the po entry in po format
None	creates a new section with title and comment
None	sections are equal when they have the same title
None	adds comment to this section
None	anchor reference for linking to this section
None	extracts the comment for this section from the original comment block
None	the files comments in this section come from
None	serializes this section
None	de-serializes this section
None	parses comment_location into an rdoc :markup :document composed of multiple rdoc :markup :documents with their file set
None	the section’s title or ‘top section’ if the title is nil
None	removes a comment from this section if it is from the same file as comment
None	section sequence number deprecated
None	gets a list of quote characters which can cause a word break
None	gets the basic list of characters that signal a break between words for the completer routine
None	gets a list of characters which can be used to quote a substring of the line
None	gets the basic list of characters that signal a break between words for rl_complete_internal()
None	returns a string containing a character to be appended on completion
None	returns true if completion ignores case
None	returns the completion proc object
None	delete text between start and end in the current line
None	specifies emacs editing mode
None	returns true if emacs mode is active
None	gets a list of characters that cause a filename to be quoted by the completer when they appear in a completed filename
None	returns the terminal’s rows and columns
None	specifies a file object input that is input stream for ::readline method
None	insert text into the line at the current cursor position
None	returns the full line that is being edited
None	specifies a file object output that is output stream for ::readline method
None	returns the index of the current cursor position in readline
None	returns a proc object proc to call after the first prompt has been printed and just before readline starts reading input characters
None	shows the prompt and reads the inputted line with line editing
None	change what’s displayed on the screen to reflect the current contents
None	clear the current input line
None	set terminal size to rows and columns
None	gets the list of characters that are word break characters but should be left in text when it is passed to the completion function
None	specifies vi editing mode
None	returns true if vi mode is active
None	iterates over all ip addresses for name
None	iterates over all hostnames for address
None	looks up the first ip address for name
None	looks up all ip address for name
None	looks up the hostname of address
None	looks up all hostnames for address
None	creates a new resolv using resolvers
None	creates a new dns resolver
None	creates a new dns resolver
None	closes the dns resolver
None	iterates over all ip addresses for name retrieved from the dns resolver
None	iterates over all hostnames for address retrieved from the dns resolver
None	iterates over all typeclass dns resources for name
None	gets the ip address of name from the dns resolver
None	gets all ip addresses for name from the dns resolver
None	gets the hostname for address from the dns resolver
None	gets all hostnames for address from the dns resolver
None	look up the typeclass dns resource of name
None	looks up all typeclass dns resources for name
None	sets the resolver timeouts
None	creates a new resolv :hosts using filename for its data source
None	iterates over all ip addresses for name retrieved from the hosts file
None	iterates over all hostnames for address retrieved from the hosts file
None	gets the ip address of name from the hosts file
None	gets all ip addresses for name from the hosts file
None	gets the hostname of address from the hosts file
None	gets all hostnames for address from the hosts file
None	turns this ipv4 address into a resolv :dns :name
None	creates a new ipv6 address from arg which may be returns arg
None	turns this ipv6 address into a resolv :dns :name
None	creates a new one-shot multicast dns mdns resolver
None	iterates over all ip addresses for name retrieved from the mdns resolver provided name ends with “local”
None	creates a new loc :alt from arg which may be returns arg
None	creates a new loc :coord from arg which may be returns arg
None	creates a new loc :size from arg which may be returns arg
None	creates a new dns name from arg
None	true if this name is absolute
None	returns true if other is a subdomain
None	returns the domain name as a string
None	creates a new domainname from name
None	creates a new generic resource
None	creates a new hinfo running os on cpu
None	creates a new mx record with preference accepting mail at exchange
None	creates a new soa record
None	returns the concatenated string from strings
None	creates a new a for address
None	creates a new aaaa for address
None	create a srv resource record
None	provides a unified clone operation for rexml :xpathparser to use across multiple object+ types
None	provides a unified clone operation for rexml :xpathparser to use across multiple object types
None	provides a unified clone operation for rexml :xpathparser to use across multiple object types
None	provides a unified clone operation for rexml :xpathparser to use across multiple object types
None	provides a unified clone operation for rexml :xpathparser to use across multiple object types
None	create an attlistdecl pulling the information from a source
None	access the attlist attribute/value pairs
None	iterate over the key/value pairs
None	whether an attlist declaration includes the given attribute definition
None	write out exactly what we got in
None	returns true if other is an attribute and has the same name and value false otherwise
None	returns a copy of this attribute
None	sets the element of which this object is an attribute
None	creates and returns a hash from both the name and value
None	returns the namespace url if defined or nil otherwise
None	returns the namespace of the attribute
None	removes this attribute from the tree and returns true if successful this method is usually not called directly
None	returns the attribute value with entities replaced
None	returns this attribute out as xml source expanding the name
None	returns the unnormalized value of this attribute
None	writes this attribute eg puts ‘key=“value”’ to the output)
None	constructor the element of which this is an attribute
None	fetches an attribute value
None	sets an attribute overwriting any existing attribute value by the same name
None	adds an attribute overriding any existing attribute by the same name
None	removes an attribute either a string which is the name of the attribute to remove – namespaces are significant here – or the attribute to remove
None	deletes all attributes matching a name
None	iterates over each attribute of an element yielding the expanded name and value as a pair of strings
None	iterates over the attributes of an element
None	fetches an attribute the name by which to search for the attribute
None	the get_attribute_ns method retrieves a method by its namespace and name
None	returns the number of attributes the owning element contains
None	returns an array of strings containing all of the prefixes declared by this set of # attributes
None	make a copy of this object examples
None	returns the content of this cdata object examples
None	this doesn’t yet handle encodings
None	the document this child belongs to or nil if this child belongs to no document
None	sets the next sibling of this child
None	sets the parent of this child to the supplied argument
None	sets the previous sibling of this child
None	removes this child from the parent
None	replaces this object with another object
None	compares this comment to another the contents of the comment are used in the comparison
None	compares this comment to another the contents of the comment are used in the comparison
None	retrieves a named notation
None	this method returns a list of notations that have been declared in the internal dtd subset
None	this method retrieves the public identifier identifying the document’s dtd
None	this method retrieves the system identifier identifying the document’s dtd method contributed by henrik martensson
None	where to write the string an integer
None	get the entity expansion limit
None	set the entity expansion limit
None	get the entity expansion limit
None	set the entity expansion limit
None	constructor @param source if supplied must be a document string or io
None	we override this because xmldecls and doctypes must go at the start of the document
None	should be obvious
None	according to the xml spec a root node has no expanded name
None	write the xml tree out optionally with indent
None	constructor if not supplied will be set to the default value
None	adds an attribute to this element overwriting any existing attribute by the same name
None	add multiple attributes to this element
None	adds a child to this element optionally setting attributes in the element
None	adds a namespace to this element
None	a helper method to add a text child
None	attributes #
None	get an array of all cdata children
None	creates a shallow copy of self
None	get an array of all comment children
None	removes an attribute either an attribute or a string
None	deletes a child element
None	removes a namespace from this node
None	evaluates to the document to which this element belongs or nil if this element doesn’t belong to a document
None	synonym for #elements
None	iterates through the child elements yielding for each element that has a particular attribute set
None	iterates through the children yielding for each element that has a particular text set
None	synonym for element
None	returns the first child text node if any or nil otherwise
None	evaluates to true if this element has any attributes set false otherwise
None	evaluates to true if this element has at least one child element
None	evaluates to true if this element has at least one text child
None	get an array of all instruction children
None	evaluates to the uri for a prefix or the empty string if no such namespace is declared for this element
None	returns the next sibling that is an element or nil if there is no element sibling after this one
None	evaluates to an array containing the prefixes names of all defined namespaces at this context node
None	returns the previous sibling that is an element or nil if there is no element sibling prior to this one
None	evaluates to true if raw mode is set for this element
None	evaluates to the root node of the document that this element belongs to
None	a convenience method which returns the string value of the first child text element if one exists and nil otherwise
None	sets the first text child of this object
None	get an array of all text children
None	evaluates to true if whitespace is respected for this element
None	constructor the parent element
None	fetches a child element
None	sets an element replacing any previous matching element
None	adds an element if supplied is either an element string or source see element
None	deletes a child element either an element which is removed directly an xpath where the first matching child is removed or an integer where the n’th element is removed
None	removes multiple elements
None	iterates through all of the child elements optionally filtering them by a given xpath optional
None	returns true if there are no element children false otherwise
None	returns the index of the supplied child starting at 1 or -1 if the element is not a child an element child
None	returns the number of element children of the parent object
None	returns an array of element children
None	evaluates whether the given string matches an entity definition returning true if so and false otherwise
None	create a new entity
None	returns the value of this entity unprocessed – raw
None	returns this entity as a string
None	evaluates to the unnormalized value of this entity that is replacing all entities – both %ent and &ent entities
None	returns the value of this entity
None	write out a fully formed correct entity definition assuming the entity object itself is valid
None	fixed by mike stok
None	returns the size of the given list of nodes
None	helper method
None	since rexml is non-validating this method is not implemented as it requires a dtd
None	returns the last node of the given list of nodes
None	a node-set is converted to a string by returning the concatenation of the string-value of each of the children of the node in the node-set that is first in document order
None	constructs a new instruction @param target can be one of a number of things
None	fully expand the name even if the prefix wasn’t specified in the source file
None	compares names optionally with namespaces
None	sets the name and the expanded name
None	visit all subnodes of self recursively
None	find and return first subnode recursively for which the block evaluates to true
None	returns the position that self holds in its parent’s array indexed from 1
None	this method retrieves the name of the notation
None	constructor @param parent if supplied will be set as the parent of this object
None	fetches a child at a given index @param index the integer index of the child to fetch
None	set an index entry
None	deeply clones this object
None	fetches the index of a given child @param child the child to get the index of @return the index of the child or nil if the object is not a child of this parent
None	inserts an child after another child @param child1 this is either an xpath or an element
None	inserts an child before another child @param child1 this is either an xpath or an element
None	replaces one child with another making sure the nodelist is correct @param to_replace the child to replace must be a child @param replacement the child to insert into the nodelist must be a child
None	given an array of nodes it filters the array based on the path
None	a predicate filters a node-set with respect to an axis to produce a new node-set
None	if a doctype includes an attlist declaration it will cause this method to be called
None	called when <![cdata[ … ]]> is encountered in a document
None	called when a comment is encountered
None	handles a doctype declaration
None	<!element …>
None	<!entity …> the argument passed to this method is an array of the entity declaration
None	<!notation …>
None	called when an xml pi is encountered in the document
None	get the entity expansion limit
None	set the entity expansion limit
None	get the entity expansion limit
None	set the entity expansion limit
None	constructor @param arg must be a string and should be a valid xml document @param encoding if non-null sets the encoding of the source to this value overriding all encoding detection
None	inherited from encoding overridden to support optimized en/decoding
None	scans the source for a given pattern
None	generates a source object @param arg either a string or an io @return a source or nil if a bad argument was given
None	if a doctype includes an attlist declaration it will cause this method to be called
None	called when <![cdata[ … ]]> is encountered in a document
None	called when a comment is encountered
None	handles a doctype declaration
None	called when the doctype is done
None	<!element …>
None	called when %foo is encountered in a doctype declaration
None	<!entity …> the argument passed to this method is an array of the entity declaration
None	called when an instruction is encountered
None	<!notation …>
None	called when the end tag is reached
None	called when a tag is encountered
None	called when text is encountered in the document @p text the text content
None	called when an xml pi is encountered in the document
None	creates a new syncenumerator which enumerates rows of given enumerable objects
None	enumerates rows of the enumerable objects
None	returns the number of enumerated enumerable objects i
None	returns the number of enumerated enumerable objects i
None	check for illegal characters
None	constructor arg if a string the content is set to the string
None	appends text to this text node
None	other a string or a text returns the result of to_s <=> arg
None	returns the string value of this text node
None	returns the string value of this text
None	sets the contents of this text node
None	writes out text substituting special characters beforehand
None	fixme this probably won’t work properly
None	only use this if you do not want the xml declaration to be written this object is ignored by the xml writer
None	iterates over nodes that match the given path calling the supplied block with the match
None	finds and returns the first node that matches the supplied xpath
None	returns an array of nodes matching a given xpath
None	performs a depth-first document order xpath search and returns the first match
None	fixme namespaces
None	returns true if there are no more events
None	returns true if there are more events
None	escapes all possible entities
None	peek at the depth event in the stack
None	returns the next event
None	unescapes all possible entities
None	push an event back on the head of the stream
None	the type of this event
None	due to the wonders of dtds an entity declaration can be just about anything
None	listen arguments
None	create a new element
None	append a child to this element optionally under a provided namespace
None	doesn’t handle namespaces yet
None	prints out the xml document with no formatting – except if id_hack is set
None	writes the node to some output
None	create a new pretty printer
None	<!entity name system “…”> <!entity name “…”>
None	takes a string and parses it out
None	creates a new drbobjecttemplate that will match against uri and ref
None	this drbobjecttemplate matches ro if the remote object’s drburi and drbref are the same
None	creates a new notifytemplateentry that watches place for +event+s that match tuple
None	yields event/tuple pairs until this notifytemplateentry expires
None	called by tuplespace to notify this notifytemplateentry of a new event
None	retrieves a notification
None	creates a singleton ringfinger and looks for a ringserver
None	creates a new ringfinger that will look for ringservers at port on the addresses in broadcast_list
None	returns the first advertised tuplespace
None	contains all discovered tuplespaces except for the primary
None	iterates over all discovered tuplespaces starting with the primary
None	looks up ringservers waiting timeout seconds
None	returns the first found remote tuplespace
None	creates a ringprovider that will provide a klass service running on front with a description
None	advertises this service on the primary remote tuplespace
None	advertises ts on the given addresses at port
None	pulls lookup tuples out of the tuplespace and sends their drb object the address of the local tuplespace
None	extracts the response uri from msg and adds it to tuplespace where it will be picked up by reply_service for notification
None	creates a socket at address if address is multicast address then interface_address and multicast_interface can be set as optional
None	creates a thread that notifies waiting clients from the tuplespace
None	shuts down the ringserver
None	creates threads that pick up udp packets and passes them to #do_write for decoding
None	creates a new simplerenewer that keeps an object alive for another sec seconds
None	called by the tuplespace to check if the object is still alive
None	matches this template against tuple
None	matches this templateentry against tuple
None	creates a new tuple from ary_or_hash which must be an array or hash
None	accessor method for elements of the tuple
None	iterate through the tuple yielding the index or key and the value thus ensuring arrays are iterated similarly to hashes
None	fetches item k from the tuple
None	the number of elements in the tuple
None	return the tuple itself
None	removes tuple from the tuplebag
None	delete tuples which dead tuples from the tuplebag returning the deleted tuples
None	finds a live tuple that matches template
None	finds all live tuples that match template
None	finds all tuples in the tuplebag which when treated as templates match tuple and are alive
None	true if the tuplebag to see if it has any expired entries
None	add tuple to the tuplebag
None	creates a tupleentry based on ary with an optional renewer or expiry time sec
None	retrieves key from the tuple
None	a tupleentry is dead when it is canceled or expired
None	marks this tupleentry as canceled
None	returns the canceled status
None	has this tuple expired? true/false)
None	fetches key from the tuple
None	returns an expiry time based on sec which can be one of sec seconds into the future the expiry time is the start of 1970
None	creates a rinda :tuple for ary
None	reset the expiry time according to sec_or_renewer
None	the size of the tuple
None	return the object which makes up the tuple itself the array or hash
None	creates a new tuplespace
None	moves tuple to port
None	registers for notifications of event
None	reads tuple but does not remove it
None	returns all tuples matching tuple
None	removes tuple
None	adds tuple
None	creates a new tuplespaceproxy to wrap ts
None	registers for notifications of event ev on the proxied tuplespace
None	reads tuple from the proxied tuplespace
None	reads all tuples matching tuple from the proxied tuplespace
None	takes tuple from the proxied tuplespace
None	adds tuple to the proxied tuplespace
None	tokenizes the ruby program and returns an array of an array which is formatted like [ lineno column type token]
None	parses the given ruby program read from src
None	parses src and create s-exp tree
None	parses src and create s-exp tree
None	parses src and return a string which was matched to pattern
None	tokenizes the ruby program and returns an array of strings
None	creates a new ripper :filter instance passes parameters src filename and lineno to ripper :lexer
None	the column number of the current token
None	the file name of the input
None	the line number of the current token
None	starts the parser
None	this method converts a w3cdtf string date/time format to time object
None	return the tag_names for setters associated with uri
None	retrieve ::class_name for the supplied uri and tag_name if it doesn’t exist capitalize the tag_name
None	record ::class_name for the supplied uri and tag_name
None	register uri against this name
None	return the setter for the uri tag_name pair or nil
None	test if this uri is registered against this name
None	set instance vars for version encoding standalone
None	returns the maker for the version
None	adds a maker to the set of supported makers
None	builder for an rss object creates an object of the type passed in args executes the block to populate elements of the created rss object
None	returns collection of supported makers
None	returns true if the version is supported
None	returns collection of supported maker versions
None	create a new notwellformederror for an error at line in element
None	set @@default_parser to new_value if it is one of the available parsers
None	this method is used inside of several different objects to determine if special behavior is needed in the constructor
None	returns an array of two elements the filename where the calling method is located and the line number where it is defined
None	takes a string s with some html in it and escapes ‘&’, ‘“’, ‘<’ and ‘>’, by replacing them with the appropriate entities
None	if value is an instance of class klass return it else create a new instance of klass with value value
None	given a name in a name_with_underscores or a name-with-dashes format returns the camelcase version of name
None	raises notavailablevalueerror if element content is nil
None	checks if there are duplicate links with the same type and hreflang attributes that have an alternate or empty rel attribute raises a toomuchtagerror if there are duplicates found
None	creates a new atom entry element
None	returns where there are any authors present or there is a source with an author
None	returns the entry in an array
None	sets up the maker for constructing entry elements
None	creates a new atom feed
None	returns true if there are any authors for the feed or any of the entry child elements have an author
None	adds attributes for name uri and email to the klass
None	returns true if type is “xhtml”
None	returns whether any of the following are true there are any authors in the feed if the parent element has an author and the check_parent parameter was given
None	find the full path to the executable for gem name
None	the mode needed to read a file as straight binary
None	the path where gem executables are to be installed
None	clear default gem related variables
None	reset the dir and path values
None	the path to standard location of the user’s
None	the standard configuration object for gems
None	use the given configuration object which implements the configfile protocol as the standard configuration object
None	the path to the data directory specified by the gem name
None	the default directory for binaries
None	the default signing certificate chain path
None	default home directory path to be used if an alternate value is not specified in the environment
None	deduce ruby’s –program-prefix and –program-suffix from its install name
None	returns binary extensions dir for specified rubygems base dir or nil if such directory cannot be determined
None	whether to expect full paths in default gems - true for non-mri ruby implementations
None	the default signing key path
None	default gem load path
None	paths where rubygems’
None	an array of the default sources that come with rubygems
None	default spec directory path to be used if an alternate value is not specified in the environment
None	a zlib :deflate
None	todo remove with rubygems 3
None	the path where gems are to be installed
None	adds a post-installs hook that will be passed a gem :dependencyinstaller and a list of installed specifications when gem :dependencyinstaller#install is complete
None	quietly ensure the gem directory dir contains all the proper subdirectories for handling default gems
None	quietly ensure the gem directory dir contains all the proper subdirectories
None	returns a list of paths matching glob that can be used by a gem to pick up features from other gems
None	returns a list of paths matching glob from the latest gems that can be used by a gem to pick up features from other gems
None	find a gem :specification of default gem from path
None	zlib :gzipreader wrapper that unzips data
None	zlib :gzipwriter wrapper that zips data
None	get the default rubygems api host
None	set the default rubygems api host
None	a zlib :inflate#inflate wrapper
None	top level install helper method
None	returns the latest release version of rubygems
None	returns the latest release-version specification for the gem name
None	returns the version of the latest release-version of gem name
None	find all ‘rubygems_plugin’ files in $load_path and load them
None	the index to insert activated gem paths into the $load_path
None	find the ‘rubygems_plugin’ files in the latest installed gems and load them
None	loads yaml preferring psych
None	the file name and line number of the caller of the caller of this method
None	the version of the marshal format for your ruby
None	how string gem paths should be split
None	retrieve the pathsupport object that rubygems uses to lookup files
None	initialize the filesystem paths to use from env
None	array of platforms this rubygems supports
None	set array of platforms this rubygems supports primarily for testing
None	adds a post-build hook that will be passed an gem :installer instance when gem :installer#install is called
None	adds a post-install hook that will be passed an gem :installer instance when gem :installer#install is called
None	adds a hook that will get run after gem :specification
None	adds a post-uninstall hook that will be passed a gem :uninstaller instance and the spec that was uninstalled when gem :uninstaller#uninstall is called
None	adds a pre-install hook that will be passed an gem :installer instance when gem :installer#install is called
None	adds a hook that will get run before gem :specification
None	adds a pre-uninstall hook that will be passed an gem :uninstaller instance and the spec that will be uninstalled when gem :uninstaller#uninstall is called
None	the directory prefix this rubygems was installed at
None	safely read a file in binary mode on all platforms
None	refresh available gems from disk
None	register a gem :specification for default gem
None	remove needless gem :specification of default gem from unresolved default gem list
None	the path to the running ruby interpreter
None	allows setting path to ruby
None	returns a string containing the api compatibility version of ruby
None	a wrapper around ruby_engine const that may not be defined
None	a gem :version for the currently running ruby
None	a gem :version for the currently running rubygems
None	allows setting the gem path searcher
None	returns an array of sources to fetch remote gems from
None	need to be able to set the sources without calling ::sources
None	glob pattern for require-able path suffixes
None	suffixes for require-able paths
None	prints the amount of time the supplied block takes to run using the debug ui output
None	try to activate a gem containing path
None	lazily loads defaultuserinteraction and returns the default ui
None	looks for a gem dependency file at path and activates the gems in the file if found
None	use the home and paths values for ::dir and ::path
None	path for gems in the user’s home directory
None	the home directory for the user
None	allows toggling windows behavior
None	is this a windows platform?
None	the kernel#require from before rubygems was loaded
None	use #gem to activate a specific version of gem_name
None	creates a new tempio that will be initialized to contain string
None	the content of the tempio as a string
None	yields each tuple in this availableset
None	yields the gem :specification for each tuple in this availableset
None	used by the resolver the protocol to use a availableset as a search set
None	converts this availableset into a requestset that can be used to install gems
None	true when the gem has been activated
None	returns the full path to the base gem directory
None	return true if this spec can require file
None	the path to the data directory for this gem
None	returns full path to the directory where gem’s extensions are installed
None	returns path to the extensions directory
None	the full path to the gem install path + full name
None	returns the full name name-version of this gem
None	full paths in the gem to add to $load_path when this gem is activated
None	returns the full path to this spec’s gem directory
None	returns the full path to the gems directory containing this spec’s gem directory
None	returns a string usable in dir
None	return all files in this gem that match for glob
None	name of the gem
None	platform of the gem
None	paths in the gem to add to $load_path when this gem is activated
None	returns the paths to the source files for use with analysis and documentation tools
None	whether this specification is stubbed - i
None	full path of the target library file
None	return a gem :specification from this gem
None	version of the gem
None	add a list of extra arguments for the given command
None	arguments used when building gems
None	initializes a generic gem command named command
None	return an array of extra arguments for the command
None	accessor for the specific extra args hash self initializing
None	adds extra args from ~/
None	add a command-line option and handler to the command
None	override to provide details of the arguments a command takes
None	true if long begins with the characters from short
None	override to display the default values of the command options
None	override to display a longer description of what this command does
None	override to provide command handling
None	get all gem names from the command line
None	get all gem version from the command line
None	get a single gem name from the command line
None	get a single optional argument from the command line
None	handle the given list of arguments by parsing them and recording the results
None	true if the command handles the given argument list
None	invoke the command with the given list of arguments
None	invoke the command with the given list of normal arguments and additional build arguments
None	merge a set of command options with the set of default options without modifying the default option hash
None	remove previously defined command-line argument name
None	display the help message for the command
None	display to the user that a gem couldn’t be found and reasons why
None	override to display the usage for an individual gem command
None	call the given block when invoked
None	wraps text to width
None	return the authoritative instance of the command manager
None	register all the subcommands supported by the gem command
None	reset the authoritative instance of the command manager
None	returns a command instance for command_name
None	return a sorted list of all command names as strings
None	register the symbol command as a gem command
None	run the command specified by args
None	unregister the symbol command as a gem command
None	create the config file object
None	return the configuration information for key
None	set configuration option key to value
None	hash of rubygems
None	true if the backtrace option has been specified or debug is on
None	checks the permissions of the credentials file
None	the name of the configuration file
None	location of rubygems
None	delegates to @hash
None	handle the command arguments
None	really verbose mode gives you extra output
None	returns the rubygems
None	sets the rubygems
None	writes out this config file replacing its source
None	the console ui has no arguments as it defaults to reading input from stdin output to stdout and warnings or errors to stderr
None	return the default ui
None	set the default ui
None	use new_ui for the duration of block
None	constructs a dependency with name and requirements
None	dependencies are ordered by name
None	uses this dependency as a pattern to compare to other
None	is this dependency simply asking for the latest version of a gem?
None	does this dependency match the specification described by name and version or match spec? note unlike matches_spec? this method does not return true when the version is a prerelease version unless this is a prerelease dependency
None	does this dependency match spec? note this is not a convenience method
None	merges the requirements of other into this dependency
None	does this dependency require a prerelease?
None	what does this dependency require?
None	true if the dependency will not always match the latest version
None	dependency type
None	creates a new installer instance
None	indicated based on the requested domain if local gems should be considered
None	indicated based on the requested domain if remote gems should be considered
None	finds a spec and the source_uri it came from for gem gem_name and version
None	installs the gem dep_or_name and all its dependencies
None	creates a dependencylist from the current specs
None	creates a new dependencylist
None	adds gemspecs to the dependency list
None	return a list of the gem specifications in the dependency list sorted in order so that no gemspec in the list depends on a gemspec earlier in the list
None	iterator over #dependency_order
None	are all the dependencies in the list satisfied?
None	is is ok to remove a gemspec from the dependency list? if removing the gemspec creates breaks a currently ok dependency then it is not ok to remove the gemspec
None	removes the gemspec matching full_name from the dependency list
None	remove everything in the dependencylist that matches but doesn’t satisfy items in dependencies a hash of gem names to arrays of dependencies
None	return a hash of predecessors
None	simple deprecation method that deprecates name by wrapping it up in a dummy method
None	temporarily turn off warnings
None	creates a new gem :doctor that will clean up gem_repository
None	cleans up uninstalled files and invalid gem specifications
None	are we doctoring a gem repository?
None	thanks fakeweb!
None	add the –key option
None	the api key from the command options or from the user’s configuration
None	the host to connect to either from the rubygems_host environment variable or from the user’s configuration
None	creates an rubygems api to host and path with the given http method
None	signs in with the rubygems api at sign_in_host and sets the rubygems api key
None	retrieves the pre-configured api key key or terminates interaction with an error
None	if response is an http success 2xx response yields the response if a block was given or shows the response body to the user
None	run the gem command with the following arguments
None	create an indexer that will index the gems in directory
None	build various indices
None	builds marshal quick index gemspecs
None	build a single index for rubygems 1
None	builds indices for rubygems 1
None	compacts marshal output for the specs index data source by using identical objects as much as possible
None	compress filename with extension
None	compresses indices on disk
None	list of gem file names to index
None	builds and installs indices
None	zlib :gzipwriter wrapper that gzips filename on disk
None	install generated indices into the destination directory
None	make directories for index generation
None	ensure path and path with extension are identical
None	perform an in-place update of the repository from newly added gems
None	combines specs in index and source then writes out a new copy to dest
None	construct an installer object for the gem file located at path
None	defaults to use ruby’s program prefix and suffix
None	construct an installer object for an ephemeral gem one where we don’t actually have a
None	constructs an installer instance that will install the gem located at gem
None	return the text for an application file
None	builds extensions
None	the location of the default spec file for default gems
None	return the target directory where the gem is to be installed
None	ensure that the dependency is satisfied by the current installation of gem
None	ensures the gem :specification written out for this gem is loadable upon installation
None	extracts only the bin/ files from the gem into the gem directory
None	reads the file index and extracts each file into the gem directory
None	lazy accessor for the spec’s gem directory
None	creates the scripts to run the applications in the gem
None	creates the symlinks to run the applications in the gem
None	creates windows
None	installs the gem and returns a loaded gem :specification for the installed gem
None	true if the gems in the system satisfy dependency
None	return an array of specifications contained within the #gem_home we’ll be installing into
None	performs various checks before installing the gem such as the install repository is writable and its directories exist required ruby and rubygems versions are met and that dependencies are installed
None	generates a #! line for bin_file_name‘s wrapper copying arguments if necessary
None	lazy accessor for the installer’s spec
None	the location of the spec file that is installed
None	unpacks the gem into the given directory
None	return the stub script text used to launch the true ruby script
None	writes the file containing the arguments for building this gem’s extensions
None	writes the
None	writes the full
None	writes the
None	the path to a built gem from @spec the path to a built gem from @user_spec a gem :installer for the @spec that installs into @gemhome a gem :installer for the @user_spec that installs into gem
None	the path where installed executables live
None	creates an installer for spec that will install into gem_home
None	adds an executable named “executable” to spec with the given shebang
None	builds the @spec gem and returns an installer for it
None	add the install/update options to the option parser
None	default options for the gem install command
None	allows optionparser to handle http uris
None	add the –bulk-threshold option
None	add the –clear-sources option
None	add local/remote options to the command line parser
None	add the –http-proxy option
None	add the –source option
None	add the –update-sources option
None	is fetching of local and remote information enabled?
None	is local fetching enabled?
None	is remote fetching enabled?
None	turn an array of name version platform into an array of nametuple objects
None	a null nametuple ie name=nil version=0
None	turn an array of nametuple objects back into an array of tuples
None	compare with other
None	returns the full name name-version of this gem
None	indicate if this nametuple matches the current platform
None	indicate if this nametuple is for a prerelease version
None	return the name that the gemspec file would be
None	convert back to the name version platform tuple
None	noop this out so there are no anchors
None	creates a new gem :package for the file at gem
None	adds a checksum for each entry in the gem to checksums
None	builds this package based on the specification set by spec=
None	a list of file names contained in this gem
None	copies this package to path if possible
None	extracts the files in this package into destination_dir if pattern is specified only entries matching that glob will be extracted
None	gzips content written to gz_io to io
None	reads and loads checksums
None	prepares the gem for signing and checksum generation
None	the spec for this gem
None	verifies that this gem contains a valid gem specification contains a contents archive the contents archive is not corrupt after verification the gem specification from the gem is available from spec
None	verifies entry in a
None	verifies the files of the gem
None	creates a new package that will read or write to the file gem
None	create a gem package task library
None	create the rake tasks and actions specified by this gem :packagetask
None	initialization tasks without the “yield self” or define operations
None	is other equal to this platform? two platforms are equal if they have the same cpu os and version
None	does other match this platform? two platforms match if they have the same cpu or either has a cpu of ‘universal’, they have the same os and they have the same version or either has no version
None	does other match this platform? if other is a string it will be converted to a gem :platform first
None	append a platform to the list of mismatched platforms
None	a wordy description of the error
None	cached remotefetcher instance
None	initialize a remote fetcher using the source uri and possible proxy information
None	given a source at uri calculate what hostname to actually connect to query the data for it
None	downloads uri to path if necessary
None	moves the gem spec from source_uri to the cache dir unless it is already there
None	given a name and requirement downloads this gem into cache and returns the filename
None	file fetcher
None	http fetcher
None	downloads uri and returns it as a string
None	returns the size of uri in bytes
None	performs a net :http request of type request_class on uri returning a net :http response object
None	we have our own signing code here to avoid a dependency on the aws-sdk gem fortunately a simple get request isn’t too complex to sign properly
None	returns a proxy uri for the given scheme if one is set in the environment variables
None	creates or an http connection based on uri or retrieves an existing connection using a proxy if needed
None	resets http connection connection
None	creates a requestset for a list of gem :dependency objects deps
None	declare that a gem of name name with reqs requirements is needed
None	add deps gem :dependency objects to the set
None	installs gems for this requestset using the gem :installer options
None	installs from the gem dependencies files in the :gemdeps option in options yielding to the block as in install
None	load a dependency management file
None	resolve the requested dependencies and return an array of specification objects to be activated
None	resolve the requested dependencies against the gems available via gem
None	factory method to create a gem :requirement object
None	a default “version requirement” can surely only be ‘>= 0’
None	constructs a requirement from requirements
None	parse obj returning an op version pair
None	concatenates the new requirements onto this requirement
None	true if the requirement is for only an exact version
None	true if this gem has no requirements
None	a requirement is a prerelease if any of the versions inside of it are prereleases
None	true if version satisfies this requirement
None	true if the requirement will not always match the latest version
None	combines sets into a composedset that allows specification lookup in a uniform manner
None	creates a resolver that queries only against the already installed gems for the needed dependencies
None	create resolver object which will resolve the tree starting with needed dependency objects
None	proceed with resolution! returns an array of activationrequest objects
None	creates an unsigned certificate for subject and key
None	creates a self-signed certificate with an issuer and subject from email a subject alternative name of email and the given extensions for the key
None	creates a self-signed certificate with an issuer and subject of subject and the given extensions for the key
None	creates a new key pair of the specified length and algorithm
None	turns email_address into an openssl :x509 :name
None	signs expired_certificate with private_key if the keys match and the expired certificate was self-signed
None	resets the trust directory for verifying gems
None	sign the public key from certificate with the signing_key and signing_cert using the gem :security :digest_algorithm
None	returns a gem :security :trustdir which wraps the directory where trusted certificates live
None	enumerates the trusted certificates via gem :security :trustdir
None	writes pemmable which must respond to to_pem to path with the given permissions
None	creates server sockets based on the addresses option
None	can be used for quick navigation to the rdoc documentation
None	returns true and prepares http response if rdoc for the requested gem name pattern was found
None	the silentui has no arguments as it does not use any stream
None	creates a new source which will use the index located at uri
None	sources are ordered by installation preference
None	returns the local directory to write uri to
None	downloads spec and writes it to dir
None	fetches a specification for the given name_tuple
None	loads type kind of specs fetching from +@uri+ if the on-disk cache is out of date
None	returns true when it is possible and safe to update the cache directory
None	creates a new sourcefetchproblem for the given source and error
None	an english description of the error
None	creates a new sourcelist from an array of sources
None	creates a new sourcelist
None	appends obj to the source list which may be a gem :source uri or uri string
None	removes all sources from the sourcelist
None	deletes source from the source list which may be a gem :source or a uri
None	yields each source uri in the list
None	yields each source in the list
None	returns true if there are no sources in this sourcelist
None	returns the first source in the list
None	returns true if this source list includes other which may be a gem :source or a source uri
None	replaces this sourcelist with the sources in other see << for acceptable items in other
None	returns an array of source uri strings
None	default fetcher instance
None	creates a new specfetcher
None	returns a list of gems available for each source in gem
None	return all gem name tuples who’s names match obj
None	find and fetch gem name tuples that match dependency
None	find and fetch specs that match dependency
None	suggests gems based on the supplied gem_name
None	adds a development dependency named gem with requirements to this gem
None	adds a runtime dependency named gem with requirements to this gem
None	executables included in the gem
None	extensions to build when installing the gem specifically the paths to extconf
None	extra files to add to rdoc such as readme or doc/examples
None	specifies the rdoc options to be used when generating api documentation
None	the version of ruby required by this gem
None	the rubygems version required by this gem
None	lists the external to rubygems requirements that must be met for this gem to work
None	the license for this gem
None	the license s for the library
None	singular writer for authors usage
None	sets the list of authors ensuring it is an array
None	files included in this gem
None	the platform this gem runs on
None	paths in the gem to add to $load_path when this gem is activated
None	load custom marshal format re-initializing defaults as needed
None	adds spec to the known specifications keeping the collection properly sorted
None	adds multiple specs to the known specifications
None	returns all specifications
None	sets the known specs to specs
None	return full names of all specs in sorted order
None	return the list of all array-oriented instance variables
None	return the list of all instance variables
None	return the directories that specification uses to find specs
None	set the directories that specification uses to find specs
None	enumerate every known spec
None	returns every spec that matches name and optional requirements
None	find the best specification matching a name and requirements
None	return the best specification that contains the file matching path
None	return currently unresolved specs that contain the file matching path
None	search through all unresolved deps and sub-dependencies and return specs that contain the file matching path
None	return the best specification that contains the file matching path amongst the specs that are not activated
None	special loader for yaml files
None	return the latest specs optionally including prerelease specs if prerelease is true
None	loads ruby format gemspec from file
None	loads the default specifications
None	specification constructor
None	specification attributes that must be non-nil
None	make sure the yaml specification is properly formatted with dashes
None	return a list of all outdated local gem names
None	enumerates the outdated local gems yielding the local specification and the latest remote version
None	removes spec from the known specs
None	is name a required attribute?
None	required specification attributes
None	reset the list of known specs running pre and post reset hooks registered in gem
None	returns a gem :stubspecification for every installed gem
None	returns a gem :stubspecification for installed gem named name
None	doc this method needs documented or nodoc’d
None	dump only crucial instance variables
None	abbreviate the spec for downloading
None	activate this spec registering it as a loaded spec and adding it’s lib paths to $load_path
None	activate all unambiguously resolved runtime dependencies of this spec
None	returns an array with bindir attached to each executable in the executables list
None	adds this spec’s require paths to load_path in the proper location
None	singular reader for authors
None	the list of author names who wrote this gem
None	returns the full path to installed gem’s bin directory
None	returns the full path to an executable named name in this gem
None	returns the #build_args used to install the gem
None	returns the full path to the build info directory
None	returns the full path to the file containing the build information generated when the gem was installed
None	used to detect if the gem is bundled in older version of ruby but not detectable as default gem see basicspecification#default_gem?)
None	returns the full path to the cache directory containing this spec’s cached gem
None	returns the full path to the cached gem for this spec
None	return any possible conflicts against the currently loaded specs
None	the date this gem was created
None	the date this gem was created do not set this it is set automatically when the gem is packaged
None	the default value for specification attribute name
None	a list of gem :dependency objects this gem depends on
None	return a list of all gems that have a dependency on this gemspec
None	returns all specs that matches this spec’s runtime dependencies
None	a detailed description of this gem
None	list of dependencies that are used for development
None	returns the full path to this spec’s documentation directory
None	singular accessor for executables
None	singular accessor for executables
None	sets executables to value ensuring it is an array
None	sets extensions to extensions ensuring it is an array
None	sets #extra_rdoc_files to files ensuring it is an array
None	the default generated file name of the gem
None	sets files to files ensuring it is an array
None	creates a duplicate spec without large blobs that aren’t used at runtime
None	return true if there are possible conflicts against the currently loaded specs
None	duplicates ::array_attributes from other_spec so state isn’t shared
None	files in the gem under one of the require_paths
None	singular accessor for licenses
None	plural accessor for setting licenses see license= for details
None	sets the #rubygems_version to the current rubygems version
None	is this specification missing its extensions? when this returns true you probably want to build_extensions
None	return a nametuple that represents this specification
None	normalize the list of files so that all file lists have redundancies removed
None	the platform this gem runs on
None	sets #rdoc_options to value ensuring it is an array
None	singular accessor for require_paths
None	singular accessor for require_paths
None	set requirements to req ensuring it is an array
None	reset nil attributes to their default values to make the spec valid
None	returns the full path to this spec’s ri directory
None	list of dependencies that will automatically be activated at runtime
None	sanitize the descriptive fields in the spec
None	sanitize a single string
None	checks if this specification meets the requirement of dependency
None	returns an object you can use to sort specifications in sort_by
None	returns the full path to the directory containing this spec’s gemspec file
None	returns the full path to this spec’s gemspec file
None	the default name of the gemspec
None	a short summary of this gem’s description
None	returns a ruby code representation of this specification such that it can be eval’ed and reconstruct the same specification later
None	returns a ruby lighter-weight code representation of this specification used for indexing only
None	returns self
None	recursively walk dependencies of this spec executing the block for each hop
None	checks that the specification contains all required fields and does a very basic sanity check
None	checks to see if the files to be packaged are world-readable
None	set the version to version potentially also setting #required_rubygems_version if version indicates it is a prerelease
None	creates a new specificgemnotfoundexception for a gem with the given name and version
None	creates a new streamui wrapping in_stream for user input out_stream for standard output err_stream for error output
None	display an informational alert
None	display an error message in a location expected to get error messages
None	display a warning on stderr
None	ask a question
None	ask for a password
None	ask a question
None	prints a formatted backtrace to the errors stream if backtraces are enabled
None	choose from a list of options
None	display a debug message on the same location as error messages
None	return a download reporter object chosen from the current verbosity
None	return a progress reporter object chosen from the current verbosity
None	display a statement
None	terminate the application with exit code status running any exit handlers that might have been defined
None	returns true if tty methods should be used on this streamui
None	creates a new systemexitexception with the given exit_code
None	returns the path to the certificate named cert_name from test/rubygems/
None	returns the path to the key named key_name from test/rubygems
None	loads certificate named cert_name from test/rubygems/
None	loads an rsa private key named key_name with passphrase in test/rubygems/
None	returns the make command for the current platform
None	allows tests to use a random but controlled port number instead of a hardcoded one
None	finds the path to the ruby executable
None	returns whether or not we’re on a version of ruby built with vc++ or borland versus cygwin mingw etc
None	is this test being run on a windows platform?
None	add spec to +@fetcher+ serving the data in the file path
None	todo move to minitest
None	allows the proper version of rake to be used for the test
None	creates a temporary directory with hax todo deprecate and remove
None	construct a new gem :dependency
None	constructs a gem :resolver :dependencyrequest from a gem :dependency dep a from_name and from_version requesting the dependency and a parent dependencyrequest
None	sets the enable_shared entry in rbconfig :config to value and restores the original value when the block ends
None	a #git_gem is used with a gem dependencies file
None	skips this test unless you have a git executable
None	installs the provided default specs including writing the spec file
None	install the provided default specs
None	builds and installs the gem :specification spec
None	builds and installs the gem :specification spec into the user dir
None	install the provided specs
None	enables pretty-print for all tests
None	returns whether or not the nmake command could be found
None	creates a gem :specification with a minimum of extra work
None	reads a binary file at path
None	reads a marshal file at path
None	todo move to minitest
None	constructs a new gem :requirement
None	setup prepares a sandboxed location to install gems
None	constructs a new gem :specification
None	creates a specfetcher pre-filled with the gems or specs defined in the block
None	teardown restores the process to its original state and removes the tempdir unless the keep_files environment variable was set
None	uninstalls the gem :specification spec
None	builds a gem from spec and places it in file
None	removes all installed gems from +@gemhome+
None	creates a gem with name version and deps
None	gzips data
None	creates several default gems which all have a lib/code
None	set the platform to arch
None	sets up a fake fetcher using the gems from util_make_gems
None	sets up gem :specfetcher to return information from the gems in specs
None	creates a spec with name version
None	deflates data
None	construct a new gem :version
None	a #vendor_gem is used with a gem dependencies file
None	in case we’re building docs in a background process this method waits for that process to exit or if it’s already been reaped or never happened swallows the errno :echild error)
None	writes a binary file to path which is relative to +@gemhome+
None	wraps text to wrap characters and optionally indents by indent characters
None	this code is based directly on the text gem implementation returns a value representing the “cost” of transforming str1 into str2
None	constructs an uninstaller that will uninstall gem
None	is spec in gem_dir?
None	the spec of the gem to be uninstalled the list of all such gems warning this method modifies the list parameter
None	removes all gems in list
None	removes installed executables and batch files windows only for gemspec
None	performs the uninstall of the gem
None	uninstalls gem spec
None	creates a new unsatisfiabledependencyerror for the unsatisfiable gem :resolver :dependencyrequest dep
None	the name of the unresolved dependency
None	the requirement of the unresolved dependency not version
None	creates a new uri formatter for uri
None	escapes the uri for use as a cgi parameter
None	normalize the uri by adding “http //” if it is missing
None	unescapes the uri which came from a cgi parameter
None	displays an alert statement
None	displays an error statement to the error output location
None	displays a warning statement to the warning output location
None	asks a question and returns the answer
None	asks for a password with a prompt
None	asks a yes or no question
None	asks the user to answer question with an answer from the given list
None	displays the given statement on the standard output or equivalent
None	terminates the rubygems process with the given exit_code
None	calls say with msg or the results of the block if really_verbose is true
None	zlib :gzipreader wrapper that unzips data
None	zlib :gzipwriter wrapper that zips data
None	a zlib :inflate#inflate wrapper
None	this calls io
None	invokes system but silences all output
None	enumerates the parents of directory
None	checks the gem directory for the following potential inconsistencies/problems
None	given a gem file’s contents validates against its own md5 checksum contents of the gem file
None	given the path to a gem file validates against its own md5 checksum path to gem file
None	true if the version string matches rubygems’ requirements
None	factory method to create a version object
None	constructs a version from the version string
None	compares this version with other returning -1 0 or 1 if the other version is larger the same or smaller than this one
None	a recommended version for use with a ~> requirement
None	return a new version object where the next to the last revision number is one greater e
None	a version is only eql? to another version if it’s specified to the same precision
None	dump only the raw version string not the complete object
None	load custom marshal format
None	a version is considered a prerelease if it contains a letter
None	the release for this version e
None	a string representation of this version
None	add the –platform option to the option parser
None	add the –prerelease option to the option parser
None	add the –version option to the option parser
None	executes a specfetcher setup block
None	returns a hash of created specification full names and the corresponding specification
None	creates a gem with name version and deps
None	creates a gem with name version and deps
None	creates a legacy platform spec with the name ‘pl’ and version 1
None	creates a spec with name version and deps
None	creates a new staticset for the given specs
None	adds spec to this set
None	finds all gems matching dep in this set
None	finds dep in this set
None	loads a gem :specification from this set which has the given name version ver platform
None	the silent download reporter ignores all arguments
None	the silent download reporter won’t tell you when the download is done
None	the silent download reporter does not display filename or care about filesize because it is silent
None	nothing can update the silent download reporter
None	creates a silent progress reporter that ignores all input arguments
None	does not print anything when complete as this object has taken a vow of silence
None	does not print message when updated as this object has taken a vow of silence
None	creates a new progress reporter that will write to out_stream for size items
None	prints out the terminal message
None	prints out a dot and ignores message
None	creates a new verbose download reporter that will display on out_stream
None	indicates the download is complete
None	tells the download reporter that the file_name is being fetched and contains total_bytes
None	updates the verbose download reporter for the given number of bytes
None	creates a new progress reporter that will write to out_stream for size items
None	prints out the terminal message
None	prints out the position relative to the total and the message
None	creates a new git gem source for a gems from loaded from repository at the given reference
None	loads all gemspecs in the repository
None	installed sources sort before all other sources
None	we don’t need to download an installed gem
None	local sorts before gem :source and after gem :source :installed
None	creates a new lock source that wraps source and moves it earlier in the sort list
None	delegates to the wrapped source’s #fetch_spec method
None	creates a new specificfile for the gem in file
None	orders this source against other
None	creates a new vendor source for a gem that was unpacked at path
None	create a new gem :security :policy object with the given mode and options
None	ensures that signer is valid for time and was signed by the issuer
None	verifies each certificate in chain has signed the following certificate and is valid for the given time
None	verifies that data matches the signature created by public_key and the digest algorithm
None	ensures the public key of key matches the public key in signer
None	ensures the root certificate in chain is self-signed and valid for time
None	ensures the root of chain has a trusted certificate in trust_dir and the digests of the two certificates match according to digester
None	for full_name verifies the certificate chain is valid the digests match the signatures signatures created by the signer depending on the policy settings
None	extracts the certificate chain from the spec and calls verify to ensure the signatures and certificate chain is valid according to the policy
None	creates a new signer with an rsa key or path to a key and a certificate chain containing x509 certificates encoding certificates or paths to certificates
None	sign data with given digest algorithm
None	creates a new trustdir using dir where the directory and file permissions will be checked according to permissions
None	returns the path to the trusted certificate
None	enumerates trusted certificates
None	returns the issuer certificate of the given certificate if it exists in the trust directory
None	loads the given certificate_file
None	returns the path to the trusted certificate with the given asn
None	add a certificate to trusted certificate list
None	make sure the trust directory exists
None	creates a new activationrequest that will activate spec
None	is this activation request for a development dependency?
None	downloads a gem at path and returns the file path
None	the full name of the specification to be activated
None	the gem :specification for this activation request
None	true if the requested gem has already been installed
None	the name of this activation request’s specification
None	indicate if this activation is one of a set of possible requests for the same dependency request
None	return the activationrequest that contained the dependency that we were activated for
None	the version of this activation request’s specification
None	creates a new apiset that will retrieve gems from uri using the rubygems api url dep_uri which is described at guides
None	return an array of apispecification objects matching dependencyrequest req
None	a hint run by the resolver to allow the set to fetch data for dependencyrequests reqs
None	creates an apispecification for the given set from the rubygems
None	creates a bestset for the given sources or gem
None	creates a new composedset containing sets
None	finds all specs matching req in all sets
None	prefetches reqs in all sets
None	when allow_prerelease is set to true prereleases gems are allowed to match dependencies
None	sets the remote network access for all composed sets
None	creates a new resolver conflict when dependency is in conflict with an already activated specification
None	return the 2 dependency objects that conflicted
None	a string explanation of the conflict
None	explanation of the conflict used by exceptions to print useful messages
None	returns true if the conflicting dependency’s name matches spec
None	path of activations from the current list
None	return the specification that listed the dependency
None	creates a new dependencyrequest for dependency from requester
None	is this dependency a development dependency?
None	indicate that the request is for a gem explicitly requested by the user
None	indicate that the request is for a gem requested as a dependency of another gem
None	does this dependency request match spec? note match? only matches prerelease versions when dependency is a prerelease dependency
None	does this dependency request match spec? note matches_spec? matches prerelease versions
None	the name of the gem this dependency request is requesting
None	return a string indicating who caused this request to be added only valid for implicit requests
None	the version requirement for this dependency request
None	finds all git gems matching req
None	prefetches specifications from the git repositories in this set
None	installing a git gem only involves building the extensions and generating the executables
None	return an array of indexspecification objects matching dependencyrequest req
None	an indexspecification is created from the index format described in gem help generate_index
None	the dependencies of the gem for this specification
None	this is a null install as this specification is already installed
None	returns true if this gem is installable for the current platform
None	the source for this specification
None	creates a new installerset that will look for gems in domain
None	looks up the latest specification for dependency and adds it to the always_install list
None	adds a local gem requested using dep_name with the given spec that can be loaded and installed using the source
None	errors encountered while resolving gems
None	returns an array of indexspecification objects matching dependencyrequest req
None	returns true if this gem is installable for the current platform
None	creates a new lockset from the given sources
None	returns an array of indexspecification objects matching the dependencyrequest req
None	this is a null install as a locked specification is considered installed
None	a specification constructed from the lockfile is returned
None	creates a new requirementlist
None	adds resolver :dependencyrequest req to this requirements list
None	is the list empty?
None	returns the oldest five entries from the list
None	remove the oldest dependencyrequest from the list
None	how many elements are in the list
None	the #find_all method must be implemented
None	the prefetch method may be overridden but this is not necessary
None	sets default instance variables for the specification
None	the name and version of the specification
None	installs this specification using the gem :installer options
None	returns true if this specification is installable on this platform
None	a specspecification is created for a set for a gem :specification in spec
None	the dependencies of the gem for this specification
None	the name and version of the specification
None	the name of the gem for this specification
None	the platform this gem works on
None	the version of the gem for this specification
None	returns an array of vendorspecification objects matching the dependencyrequest req
None	this is a null install as this gem was unpacked into a directory
None	topologically sorts the given vertices
None	adds a new {edge} to the dependency graph @param vertex origin @param vertex destination @param object requirement the requirement that this edge represents @return edge the added edge
None	detaches the {#vertex_named} name {vertex} from the graph recursively removing any non-root vertices that were orphaned in the process @param string name @return void
None	enumerates through the vertices of the graph
None	initializes a copy of a {dependencygraph}, ensuring that all {#vertices} are properly copied
None	removes a possibility from self @return possibilitystate a state with a single possibility
None	returns an empty resolution state @return resolutionstate an empty state
None	resolves the requested dependencies into a {dependencygraph}, locking to the base dependency graph if specified @param array requested an array of ‘requested’ dependencies that the @param dependencygraph nil base the base dependency graph to which
None	returns whether this dependency which has no possible matching specifications can safely be ignored
None	returns the dependencies of specification
None	returns the name for the given dependency
None	determines whether the given requirement is satisfied by the given spec in the context of the current activated dependency graph
None	search for the specifications that match the given dependency
None	sort dependencies so that the ones that are easiest to resolve are first
None	called after resolution ends either successfully or with an error
None	called before resolution begins
None	conveys debug information to the user
None	whether or not debug messages should be printed
None	called roughly every {#progress_rate}, this method should convey progress to the user
None	the {io} object that should be used to print output
None	how often progress should be conveyed to the user via {#indicate_progress}, in seconds
None	resolves the {#original_requested} dependencies into a full dependency @raise resolvererror if successful resolution is impossible @return dependencygraph the dependency graph of successfully resolved
None	is there a path from other to self following edges in the dependency graph? @return true iff there is a path following edges within this {#graph}
None	is there a path from self to other following edges in the dependency graph? @return true iff there is a path following edges within this {#graph}
None	creates a new gemdependencyapi that will add dependencies to the gem :requestset set based on the dependency api description in path
None	defines a custom git source that uses name to expand git repositories for use in gems built from git repositories
None	loads the gem dependency file and returns self
None	specifies a gem dependency with the given name and requirements
None	loads dependencies from a gemspec file
None	block form for specifying gems from a git repository
None	block form for placing a dependency in the given groups
None	block form for restricting gems to a set of platforms
None	block form for restricting gems to a particular set of platforms
None	restricts this gem dependencies file to the given ruby version
None	sets url as a source for gems for this dependency api
None	creates a new lockfile for the given request_set and gem_deps_file location
None	the contents of the lock file
None	writes the lock file alongside the gem dependencies file
None	raises a parseerror with the given message which was encountered at a line and column while parsing
None	parses lockfiles
None	creates a new digestio instance
None	wraps io and updates digest for each of the digest algorithms in the digests hash
None	writes data to the underlying io and updates the digests
None	creates a new old-format package reader for gem
None	a list of file names contained in this gem
None	extracts the files in this package into destination_dir
None	the specification for this gem
None	raises an exception if a security policy that verifies data is active
None	creates a tar header from io stream
None	creates a new tarheader using vals
None	is the tar entry empty?
None	updates the tarheader’s checksum
None	creates a new tarreader on io and yields it to the block if given
None	close the tar file
None	iterates over files in the tarball yielding each entry
None	note do not call rewind during each
None	creates a new tarwriter yielding it if a block is given
None	adds file name with permissions mode and yields an io for writing the file to
None	adds name with permissions mode to the tar yielding io for writing the file
None	adds name with permissions mode to the tar yielding io for writing the file
None	add file name with permissions mode size bytes long
None	adds symlink name with permissions mode linking to target
None	raises ioerror if the tarwriter is closed
None	closes the tarwriter
None	is the tarwriter closed?
None	flushes the tarwriter’s io
None	creates a new directory in the tar file name with mode
None	wraps io and allows up to limit bytes to be written
None	writes data onto the io raising a fileoverflow exception if the number of bytes will be more than limit
None	creates a new restrictedstream wrapping io
None	writes data onto the io
None	creates a new tar entry for header that will be read from io
None	number of bytes read out of the tar entry
None	closes the tar entry
None	is the tar entry closed?
None	is this tar entry a directory?
None	are we at the end of the tar entry?
None	is this tar entry a file?
None	full name of the tar entry
None	read one byte from the tar entry
None	the position in the tar entry
None	reads len bytes from the tar file entry or the rest of the entry if nil
None	rewinds to the beginning of the tar file entry
None	is this tar entry a symlink?
None	creates a new extension builder for spec
None	builds extensions
None	find cached filename in gem
None	extracts the gem :specification and raw metadata from the
None	return the full path to the cached gem file matching the given name and version requirement
None	update rubygems software to the latest version
None	scans the current string until the match is exhausted yielding each match as it is encountered in the string
None	scans stdin for data matching format
None	scans the current string until the match is exhausted yielding each match as it is encountered in the string
None	scans the current string
None	creates a new database handle by opening the given filename
None	deletes all data from the database
None	closes the database file
None	returns true if the database is closed
None	deletes the key-value pair corresponding to the given key
None	iterates over the key-value pairs in the database deleting those for which the block returns true
None	iterates over each key-value pair in the database
None	iterates over each key in the database
None	iterates over each key-value pair in the database
None	iterates over each value in the database
None	returns true if the database is empty
None	returns the value in the database associated with the given key string
None	returns true if the database contains the given key
None	returns true if the database contains the given value
None	returns true if the database contains the given key
None	returns a hash in which the key-value pairs have been inverted
None	returns the key associated with the given value
None	returns true if the database contains the given key
None	returns a new array containing the keys in the database
None	returns the number of keys in the database
None	returns true if the database contains the given key
None	creates a new hash using the key-value pairs from the database then calls hash#reject with the given block which returns a hash with only the key-value pairs for which the block returns false
None	iterates over the key-value pairs in the database deleting those for which the block returns true
None	empties the database then inserts the given key-value pairs
None	returns a new array of key-value pairs for which the block returns true
None	removes a key-value pair from the database and returns them as an array
None	returns the number of keys in the database
None	stores a new value in the database with the given key as an index
None	returns a new array containing each key-value pair in the database
None	returns a new hash containing each key-value pair in the database
None	insert or update key-value pairs
None	returns true if the database contains the given value
None	returns a new array containing the values in the database
None	returns an array of values corresponding to the given keys
None	makes a set from the enumerable object with given arguments
None	creates a new set containing the given objects
None	creates a new set containing the elements of the given enumerable object
None	returns a new set built by duplicating the set removing every element that appears in the given enumerable object
None	returns true if two sets are equal
None	returns a new set containing elements exclusive between the set and the given enumerable object
None	adds the given object to the set and returns self
None	adds the given object to the set and returns self
None	classifies the set by the return value of the given block and returns a hash of {value => set of elements} pairs
None	removes all elements and returns self
None	replaces the elements with ones returned by collect()
None	deletes the given object from the set and returns self
None	deletes the given object from the set and returns self
None	deletes every element of the set for which block evaluates to true and returns self
None	returns true if the set and the given set have no element in common
None	divides the set into a set of subsets according to the commonality defined by the given block
None	calls the given block once for each element in the set passing the element as parameter
None	returns true if the set contains no elements
None	returns a new set that is a copy of the set flattening each containing set recursively
None	equivalent to #flatten but replaces the receiver with the result in place
None	returns true if the set contains the given object
None	clone internal hash
None	dup internal hash
None	returns a string containing a human-readable representation of the set
None	returns true if the set and the given set have at least one element in common
None	deletes every element of the set for which block evaluates to false and returns self
None	merges the elements of the given enumerable object to the set and returns self
None	returns true if the set is a proper subset of the given set
None	returns true if the set is a proper superset of the given set
None	equivalent to #delete_if but returns nil if no changes were made
None	replaces the contents of the set with the contents of the given enumerable object and returns self
None	equivalent to #keep_if but returns nil if no changes were made
None	returns the number of elements
None	returns true if the set is a subset of the given set
None	deletes every element that appears in the given enumerable object and returns self
None	returns true if the set is a superset of the given set
None	converts the set to an array
None	returns self if no arguments are given
None	returns a new set built by merging the set and the elements of the given enumerable object
None	convenience method for shell :commandprocessor
None	creates a new shell instance with the current working directory set to path
None	convenience method for shell :commandprocessor
None	returns the directories in the current shell’s path environment variable as an array of directory names
None	sets the #system_path that new instances of shell should have as their initial system_path
None	convenience method for shell :commandprocessor
None	creates a shell object which current directory is set to the process current directory unless otherwise specified by the pwd argument
None	convenience method for shell :commandprocessor
None	convenience method for shell :commandprocessor
None	creates a shell object which current directory is set to path
None	returns a list of scheduled jobs
None	sends the given signal to the given job
None	pops a directory from the directory stack and sets the current directory to it
None	pushes the current directory to the directory stack changing the current directory to path
None	sets the system path the shell instance’s path environment variable)
None	creates a command alias at the given alias for the given command passing any options along with it
None	returns a list of aliased commands
None	defines a command registering path as a shell method for the given command
None	include run file
None	unaliases the given alias command
None	undefines a command
None	returns a cat object for the given filenames
None	returns a concat object for the given jobs
None	returns a echo object for the given strings
None	private functions
None	returns a glob filter object with the given pattern object
None	%pwd %cwd -> @pwd
None	calls device
None	clears the command hash table
None	executes the given command with the options parameter
None	returns a tee filter object with the given file command
None	tests if the given command exists in file1 or optionally file2
None	executes a block as self example
None	iterates a block for each line
None	processes a pipeline
None	schedule a command
None	kill a job
None	simple fork
None	start a job
None	terminate a job
None	wait for all jobs to terminate
None	builds a command line string from an argument list array joining all elements escaped for the bourne shell and separated by a space
None	escapes a string so that it can be safely used in a bourne shell command line
None	builds a command line string from an argument list array
None	splits a string into an array of tokens in the same way the unix bourne shell does
None	escapes str so that it can be safely used in a bourne shell command line
None	splits str into an array of tokens in the same way the unix bourne shell does
None	by default calls instance()
None	by default do not retain any state when marshalling
None	raises a typeerror to prevent cloning
None	raises a typeerror to prevent duping
None	iterates over the list of addrinfo objects obtained by ::getaddrinfo
None	returns a list of addrinfo objects as an array
None	returns an addrinfo object for ip address
None	returns a new instance of addrinfo
None	returns an addrinfo object for tcp address
None	returns an addrinfo object for udp address
None	returns an addrinfo object for unix socket address
None	returns the address family as an integer
None	creates a socket bound to self
None	returns the canonical name as an string
None	creates a socket connected to the address of self
None	creates a socket connected to the address of self
None	creates a socket connected to remote_addr_args and bound to self
None	creates an addrinfo object from the arguments
None	returns nodename and service as a pair of strings
None	returns a string which shows addrinfo in human-readable form
None	returns a string which shows the sockaddr in addrinfo with human-readable form
None	returns true if addrinfo is internet ipv4/ipv6) address
None	returns the ip address as a string
None	returns the port number as an integer
None	returns the ip address and port number as 2-element array
None	returns true if addrinfo is ipv4 address
None	returns true for ipv4 loopback address 127
None	returns true for ipv4 multicast address 224
None	returns true for ipv4 private address 10
None	returns true if addrinfo is ipv6 address
None	returns true for ipv6 link local address ff80 :/10)
None	returns true for ipv6 loopback address ::1)
None	returns true for ipv6 multicast global scope address
None	returns true for ipv6 multicast link-local scope address
None	returns true for ipv6 multicast node-local scope address
None	returns true for ipv6 multicast organization-local scope address
None	returns true for ipv6 multicast site-local scope address
None	returns true for ipv6 multicast address ff00 :/8)
None	returns true for ipv6 site local address ffc0 :/10)
None	returns ipv4 address of ipv4 mapped/compatible ipv6 address
None	returns true for ipv6 unique local address fc00 :/7 rfc4193)
None	returns true for ipv6 unspecified address ::)
None	returns true for ipv4-compatible ipv6 address ::/80)
None	returns true for ipv4-mapped ipv6 address ::ffff 0 0/80)
None	creates a listening socket bound to self
None	returns the protocol family as an integer
None	returns the socket type as an integer
None	returns the socket type as an integer
None	returns the socket address as packed struct sockaddr string
None	returns true if addrinfo is unix address
None	returns the socket path as a string
None	gets the global ::do_not_reverse_lookup flag
None	returns a socket object which contains the file descriptor fd
None	disallows further read using shutdown system call
None	disallows further write using shutdown system call
None	returns an address of the socket suitable for connect in the local machine
None	returns the user and group on the peer of the unix socket
None	returns the remote address of the socket as a sockaddr string
None	returns the local address of the socket as a sockaddr string
None	gets a socket option
None	returns an addrinfo object for local address obtained by getsockname
None	receives a message
None	receives up to maxlen bytes from socket using recvfrom 2 after o_nonblock is set for the underlying file descriptor
None	recvmsg receives a message using recvmsg 2 system call in blocking manner
None	recvmsg receives a message using recvmsg 2 system call in non-blocking manner
None	returns an addrinfo object for remote address obtained by getpeername
None	send mesg via basicsocket
None	sendmsg sends a message using sendmsg 2 system call in blocking manner
None	sets a socket option
None	calls shutdown 2 system call
None	returns the local address as an array which contains address_family port hostname and numeric_address
None	returns the remote address as an array which contains address_family port hostname and numeric_address
None	receives a message and return the message as a string and an address which the message come from
None	yield socket and client address for each a connection accepted via given sockets
None	obtains address information for nodename servname
None	obtains the host information for address
None	obtains the host information for hostname
None	returns the hostname
None	returns an array of interface addresses
None	obtains name information for sockaddr
None	obtains the port number for service_name
None	obtains the port number for port
None	returns local ip addresses as an array
None	creates a new socket object
None	packs port and host as an af_inet/af_inet6 sockaddr string
None	packs path as an af_unix sockaddr string
None	creates a pair of sockets connected each other
None	packs port and host as an af_inet/af_inet6 sockaddr string
None	packs path as an af_unix sockaddr string
None	creates a pair of sockets connected each other
None	creates a new socket object connected to host port using tcp/ip
None	creates a tcp/ip server on port and calls the block for each connection accepted
None	creates tcp/ip server sockets for host and port
None	creates a udp/ip server on port and calls the block for each message arrived
None	run udp/ip server loop on the given sockets
None	receive udp/ip packets from the given sockets
None	creates udp/ip sockets for a udp server
None	creates a new socket connected to path using unix socket socket
None	creates a unix socket server on path
None	creates a unix server socket on path if no block given it returns a listening socket
None	unpacks sockaddr into port and ip_address
None	unpacks sockaddr into path
None	accepts a next connection
None	accepts an incoming connection using accept 2 after o_nonblock is set for the underlying file descriptor
None	binds to the given local address
None	requests a connection to be made on the given remote_sockaddr
None	requests a connection to be made on the given remote_sockaddr after o_nonblock is set for the underlying file descriptor
None	enable the socket option ipv6_v6only if ipv6_v6only is available
None	listens for connections using the specified int as the backlog
None	receives up to maxlen bytes from socket
None	receives up to maxlen bytes from socket using recvfrom 2 after o_nonblock is set for the underlying file descriptor
None	accepts an incoming connection returning an array containing the integer file descriptor for the incoming connection client_socket_fd and an addrinfo client_addrinfo
None	opens a socks connection to host via the socks server serv
None	closes the socks connection
None	creates a new server socket bound to port
None	accepts an incoming connection
None	accepts an incoming connection using accept 2 after o_nonblock is set for the underlying file descriptor
None	listens for connections using the specified int as the backlog
None	returns a file descriptor of a accepted connection
None	lookups host information by hostname
None	opens a tcp connection to remote_host on remote_port
None	creates a new udpsocket object
None	binds udpsocket to host port
None	connects udpsocket to host port
None	receives up to maxlen bytes from udpsocket using recvfrom 2 after o_nonblock is set for the underlying file descriptor
None	sends mesg via udpsocket
None	creates a new unix server socket bound to path
None	accepts an incoming connection
None	accepts an incoming connection using accept 2 after o_nonblock is set for the underlying file descriptor
None	listens for connections using the specified int as the backlog
None	accepts a new connection
None	creates a new unix client socket connected to path
None	creates a pair of sockets connected to each other
None	creates a pair of sockets connected to each other
None	returns the local address as an array which contains address_family and unix_path
None	returns the path of the local address of unixsocket
None	returns the remote address as an array which contains address_family and unix_path
None	example klass will determine the class of io returned using the io
None	receives a message via unixsocket
None	sends io as file descriptor passing
None	creates a new socket :ancillarydata object which contains a int as data
None	returns new ancillary data for ip_pktinfo
None	returns new ancillary data for ipv6_pktinfo
None	family should be an integer a string or a symbol
None	creates a new socket :ancillarydata object which contains file descriptors as data
None	tests the level and type of ancillarydata
None	returns the cmsg data as a string
None	returns the socket family as an integer
None	returns a string which shows ancillarydata in human-readable form
None	extracts addr from ipv6_pktinfo ancillary data
None	extracts ifindex from ipv6_pktinfo ancillary data
None	returns the cmsg level as an integer
None	returns the timestamp as a time object
None	returns the cmsg type as an integer
None	returns the address of ifaddr
None	returns the broadcast address of ifaddr
None	returns the destination address of ifaddr
None	returns the flags of ifaddr
None	returns the interface index of ifaddr
None	returns a string to show contents of ifaddr
None	returns the interface name of ifaddr
None	returns the netmask address of ifaddr
None	creates a new socket :option object which contains boolean as data
None	creates a new socket :option object which contains a byte as data
None	creates a new socket :option object which contains an int as data
None	creates a new socket :option object for ip_multicast_loop
None	creates a new socket :option object for ip_multicast_ttl
None	creates a new socket :option object for sol_socket/so_linger
None	returns a new socket :option object
None	returns the socket option data as a string
None	returns the socket family as an integer
None	returns a string which shows sockopt in human-readable form
None	returns the socket level as an integer
None	returns the socket option name as an integer
None	returns the socket option data as a string
None	calls string#unpack on sockopt
None	remote_address is an addrinfo object
None	sends the string msg to the source
None	creates new stringio instance from with string and mode
None	equivalent to ::new except that when it is called with a block it yields with the new instance and closes it and returns the result which returned from the block
None	returns strio itself
None	closes strio
None	closes the read end of a stringio
None	closes the write end of a stringio
None	returns true if strio is completely closed false otherwise
None	returns true if strio is not readable false otherwise
None	returns true if strio is not writable false otherwise
None	returns true if strio is at end of file
None	returns true if strio is at end of file
None	returns the encoding object that represents the encoding of the file
None	raises notimplementederror
None	returns nil
None	returns strio itself
None	returns 0
None	returns the encoding of the internal string if conversion is specified
None	returns false
None	returns the size of the buffer string
None	returns the current line number in strio
None	returns nil
None	returns the current offset in bytes of strio
None	reinitializes strio with the given other_strio or string and mode see stringio#new)
None	positions strio to the beginning of input resetting lineno to zero
None	specify the encoding of the stringio as ext_enc
None	returns the size of the buffer string
None	returns underlying string object the subject of io
None	returns true always
None	returns the argument unchanged
None	truncates the buffer string to at most integer bytes
None	returns false
None	pushes back one character passed as a parameter onto strio such that a subsequent buffered read will return it
None	appends the given string to the underlying buffer string of strio
None	similar to read but raises eoferror at end of string unless the +exception false+ option is passed in
None	similar to read but raises eoferror at end of string instead of returning nil as well as io#sysread does
None	similar to read but raises eoferror at end of string instead of returning nil as well as io#sysread does
None	this method is defined for backward compatibility
None	creates a new stringscanner object to scan over the given string
None	appends str to the string being scanned
None	return the n-th subgroup in the most recent match
None	returns true iff the scan pointer is at the beginning of the line
None	returns the character position of the scan pointer
None	this returns the value that scan would return without advancing the scan pointer
None	this returns the value that scan_until would return without advancing the scan pointer
None	equivalent to terminate
None	appends str to the string being scanned
None	equivalent to eos?
None	returns true if the scan pointer is at the end of the string
None	looks ahead to see if the pattern exists anywhere in the string without advancing the scan pointer
None	scans one byte and returns it
None	equivalent to get_byte
None	scans one character and returns it
None	returns a string that represents the stringscanner object showing the current position the size of the string the characters surrounding the scan pointer s = ::new(“fri dec 12 1975 14 39”) s
None	tests whether the given pattern is matched from the current scan pointer
None	returns the last matched string
None	returns true iff the last match was successful
None	returns the size of the most recent match see matched or nil if there was no recent match
None	extracts a string corresponding to string pos len without advancing the scan pointer
None	equivalent to peek
None	returns the byte position of the scan pointer
None	set the byte position of the scan pointer
None	returns the byte position of the scan pointer
None	return the post-match
None	locking methods
None	locking methods
None	closes the syslog facility
None	returns the facility number used in the last call to open()
None	returns the identity string used in the last call to open()
None	returns an inspect() string summarizing the object state
None	returns self for backward compatibility
None	log a message with the specified priority
None	returns the log priority mask in effect
None	sets the log priority mask
None	open the syslog facility
None	closes and then reopens the syslog
None	returns true if the syslog is open
None	returns the options bitmask used in the last call to open()
None	builds a methods for level meth
None	fills in variables for logger compatibility
None	returns the internal syslog object that is initialized when the first instance is created
None	specifies the internal syslog object to be used
None	almost duplicates #add
None	logs a message at the debug syslog debug log level or logs the message returned from the block
None	logs a message at the error syslog warning log level or logs the message returned from the block
None	logs a message at the fatal syslog err log level or logs the message returned from the block
None	logs a message at the info syslog info log level or logs the message returned from the block
None	logs a message at the unknown syslog alert log level or logs the message returned from the block
None	logs a message at the warn syslog notice log level or logs the message returned from the block
None	generates a mask bit for a priority level
None	generates a mask value for priority levels at or below the level specified
None	creates a temporary file as usual file object not tempfile
None	creates a temporary file with permissions 0600 = only readable and writable by the owner) and opens it with mode “w+”
None	creates a new tempfile
None	closes the file
None	closes and unlinks deletes the file
None	returns the full path name of the temporary file
None	returns the size of the temporary file
None	unlinks deletes the file from the filesystem
None	waits until all specified threads have terminated
None	creates a threadswait object specifying the threads to wait on
None	returns true if there are no threads in the pool still running
None	returns true if any thread has terminated and is ready to be collected
None	waits for specified threads to terminate and returns when one of the threads terminated
None	specifies the threads that this object will wait for but does not actually wait
None	waits until any of the specified threads has terminated and returns the one that does
None	waits until all specified threads have terminated
None	creates a threadswait object specifying the threads to wait on
None	returns true if there are no threads in the pool still running
None	returns true if any thread has terminated and is ready to be collected
None	waits for specified threads to terminate and returns when one of the threads terminated
None	specifies the threads that this object will wait for but does not actually wait
None	waits until any of the specified threads has terminated and returns the one that does
None	parses date as an http-date defined by rfc 2616 and converts it to a time object
None	parses date using date
None	parses date as date-time defined by rfc 2822 and converts it to a time object
None	parses date using date
None	parses date as a datetime defined by the xml schema and converts it to a time object
None	return the number of seconds the specified time zone differs from utc
None	perform an operation in a block raising an error if it takes longer than sec seconds to complete
None	class methods
None	public alias
None	class method
None	instance method
None	instance & class method
None	not stable so disable this feature
None	class method
None	instance method
None	instance & class method
None	not stable so disable this feature
None	create a new image with the given options
None	blank the image that is set the entire image to have no data so it will be displayed as transparent and the background of whatever window it is displayed in will show through
None	returns the current value of the configuration option given by option
None	copies a region from the image called source to the image called destination possibly with pixel zooming and/or subsampling
None	returns image data in the form of a string
None	returns the color of the pixel at coordinates x y in the image as a list of three integers between 0 and 255 representing the red green and blue components respectively
None	returns a boolean indicating if the pixel at x y is transparent
None	makes the pixel at x y transparent if state is true and makes that pixel opaque otherwise
None	::dcb ca wid w call ::deletecallbackkey for each callbacks
None	::deletecallbackkey remove callback from tcltk module
None	::mainloop call tcltklib
None	initialize interp pr arg :
None	_call arg invoke callback
None	e(*args): execute command
None	initialize(interp t *args):
None	_tcltkip(): returns @ip tcltkip
None	commands(): returns hash of the tcl/tk commands
None	rootwidget(): returns root widget tcltkwidget
None	initialize interpreter
None	backup original without encoding _eval and _invoke
None	get return code from tcl_eval()
None	allow_ruby_exit = mode
None	delete interpreter
None	is deleted?
None	is safe?
None	self is slave of master?
None	execute tk_mainloop
None	initialize ip name :
None	initialize ip exp :
None	initialize interp dat :
None	get(): read tcl/tk variable string using set’
None	set data set tcl/tk variable using set’
None	class methods
None	instance methods
None	private :create_self
None	private :install_cmd :uninstall_cmd module_function :install_cmd :uninstall_cmd
None	class methods
None	public alias
None	*args ::= form arg arg …
None	*args ::= form arg arg …
None	for built-in named fonts
None	define new proc class if you want to modify the new class or create a new subclass you must do such operation in the block parameter
None	define new proc class if you want to modify the new class or create a new subclass you must do such operation in the block parameter
None	create a new image with the given options
None	blank the image that is set the entire image to have no data so it will be displayed as transparent and the background of whatever window it is displayed in will show through
None	returns the current value of the configuration option given by option
None	copies a region from the image called source to the image called destination possibly with pixel zooming and/or subsampling
None	returns image data in the form of a string
None	returns the color of the pixel at coordinates x y in the image as a list of three integers between 0 and 255 representing the red green and blue components respectively
None	returns a boolean indicating if the pixel at x y is transparent
None	makes the pixel at x y transparent if state is true and makes that pixel opaque otherwise
None	define new proc class if you want to modify the new class or create a new subclass you must do such operation in the block parameter
None	class methods
None	instance methods
None	use tcl function version of set tkvariable
None	use tcl function version of set tkvariable
None	create a canvas item without creating a tkcitem object
None	wrapper methods for compatibility
None	class methods
None	instance methods
None	event handler callbacks
None	additional dialogs
None	system configuration
None	treeview column
None	treeview heading
None	treeview item
None	treeview tag
None	with the bwidget package
None	with the multi-entry package mentry is a library extension
None	with the iwidgets incr widgets package
None	with bryan oakley’s combobox package
None	helper commands
None	commands related to tile themems
None	these methods calls internal functions of tcl/tk
None	scrolledlistbox methods
None	listbox methods
None	based on tk/scrollable
None	based on tk :text widget
None	based on tk/scrollable
None	based on tk :iwidgets :entryfield
None	index method is not available because it shows index of the entry field
None	create a canvas item without creating a tkcitem object
None	based on tk :listbox and tktextwin
None	based on tk :listbox and tktextwin
None	based on tk/scrollable
None	widgetclassname = ‘archetype’
None	public methods
None	barelement_id = [‘blt_barchart_bar’
None	barelement_id = [‘blt_graph_bar’
None	barelement_id = [‘blt_stripchart_bar’
None	::mktmpdir creates a temporary directory
None	returns the operating system’s temporary file path
None	used to filter unwanted trace output example which only outputs lines of code executed within the kernel class
None	disable tracing
None	start tracing you can also pass a block
None	register an event handler p which is called everytime a line in file_name is executed
None	the iterator version of the #strongly_connected_components method
None	iterates over strongly connected components in a graph
None	returns strongly connected components as an array of arrays of nodes
None	returns a topologically sorted array of nodes
None	the iterator version of the #tsort method
None	should be implemented by a extended class
None	should be implemented by a extended class
None	returns a normalized form of str using unicode normalizations nfc nfd nfkc or nfkd
None	destructive version of #unicode_normalize doing unicode normalization in place
None	checks whether str is in unicode normalization form form which is any of the four values :nfc :nfd :nfkc or :nfkd
None	canonical ordering
None	hangul algorithm
None	normalization forms for patterns not whole strings
None	returns uri converted to a uri object
None	decode url-encoded form data from given str
None	decode given str of url-encoded form data
None	generate url-encoded form data from given enum
None	encode given str to url-encoded form data
None	string to extract uris from
None	string s to work with will be converted to rfc3986 uris before merging
None	string with uri
None	array of schemes
None	returns a hash of the defined schemes
None	string with uri
None	string to replaces in
None	unescapes the string
None	creates a new uri :ftp object from components with syntax checking
None	creates a new uri :ftp object from generic url components with no syntax checking
None	returns the path from an ftp uri
None	returns a string representation of the uri :ftp
None	string public setter for the typecode v
None	private setter for the path of the uri :ftp
None	private setter for the typecode v see also #typecode=
None	components of the uri in the order
None	returns default port
None	protocol scheme i
None	compares to uri’s
None	checks if uri is an absolute one
None	uri or string
None	returns a proxy uri
None	check the fragment v component against the uri :parser regexp for :fragment string public setter for the fragment component v
None	checks if uri has a path
None	string public setter for the host component v
None	extract the host part of the uri and unwrap brackets for ipv6 addresses
None	set the host part of the uri as the argument with brackets for ipv6 addresses
None	uri or string merges two uri’s
None	uri or string destructive form of merge
None	returns normalized uri
None	destructive version of normalize
None	string public setter for the opaque component v
None	returns the parser to be used
None	returns the password component
None	string public setter for the password component
None	string public setter for the path component v
None	string public setter for the port component v
None	string public setter for the query component v
None	checks if uri is relative
None	uri or string calculates relative path from oth to self
None	uri or string calculates relative path to oth from self
None	string public setter for the scheme component v
None	multiple symbol arguments defined in uri :http selects specified components from uri
None	constructs string from uri
None	returns the user component
None	string public setter for the user component
None	returns the userinfo either as ‘user’ or ‘user password’
None	sets userinfo argument is string like ‘name pass’
None	returns an array of the components defined from the component array
None	protected setter for the host component v see also #host=
None	protected setter for the opaque component v see also #opaque=
None	protected setter for the password component v see also #password=
None	protected setter for the path component v see also #path=
None	protected setter for the port component v see also #port=
None	protected setter for the scheme component v see also #scheme=
None	protected setter for the user component v see also #user=
None	protect setter for the user component and password if available
None	create a new uri :http object from components with syntax checking
None	create a new uri :http object from generic uri components as per rfc 2396
None	returns the full path for an http request as required by net :http :get
None	create a new uri :ldap object from components with syntax checking
None	create a new uri :ldap object from generic uri components as per rfc 2396
None	returns attributes
None	setter for attributes val
None	returns dn
None	setter for dn val
None	returns extensions
None	setter for extensions val
None	returns filter
None	setter for filter val
None	checks if uri has a path for uri :ldap this will return false
None	returns scope
None	setter for scope val
None	private setter for attributes val
None	private setter for dn val
None	private setter for extensions val
None	private setter for filter val
None	private setter for scope val
None	creates a new uri :mailto object from components with syntax checking
None	creates a new uri :mailto object from generic url components with no syntax checking
None	setter for headers v
None	setter for to v
None	returns the rfc822 e-mail text equivalent of the url as a string
None	constructs string from uri
None	private setter for headers v
None	private setter for to v
None	the constructor accepts a hash as options for parser
None	string to make safe regexp to apply
None	string to search patterns to apply to str attempts to parse and merge a set of uris if no block given then returns the result else it calls block for each element in result
None	an array of strings attempts to parse and merge a set of uris
None	returns regexp that is default self
None	string parses uri and constructs either matching uri scheme object ftp http https ldap ldaps or mailto or uri :generic
None	returns a split uri against regexp
None	string to remove escapes from regexp to apply
None	creates a weak reference to orig raises an argumenterror if the given orig is immutable such as symbol fixnum or float
None	returns true if the referenced object is still alive
None	frozen_string_literal false cgi_runner
None	escapes control characters in data
None	formats params according to format_string which is described in setup_params
None	this format specification is a subset of mod_log_config of apache
None	initializes a new logger for log_file that outputs messages at level or higher
None	synonym for log(info obj
None	closes the logger also closes the log device associated to the logger
None	will the logger output debug messages?
None	will the logger output error messages?
None	will the logger output fatal messages?
None	will the logger output info messages?
None	logs data at level if the given level is above the current log level
None	will the logger output warn messages?
None	creates a new cgi interface
None	reads key from the configuration
None	services the request req which will fill in the response res
None	starts the cgi process with the given environment env and standard input and output stdin and stdout
None	creates a new cookie with the given name and value
None	parses a cookie field sent from the user-agent
None	parses the cookie in str
None	parses the cookies in str
None	retrieves the expiration time as a time
None	sets the cookie expiration to the time t
None	the cookie string suitable for use in an http header
None	performs the standard operations for daemonizing a process
None	creates a new generic server from config
None	retrieves key from the configuration
None	adds listeners from address and port to the server
None	you must subclass genericserver and implement #run which accepts a tcp client socket
None	shuts down the server and all listening sockets
None	starts the server and runs the block for each connection
None	stops the server from accepting new connections
None	escapes &, “, > and < in string
None	simple wrapper for providing basic authentication for a request
None	simple wrapper for providing basic authentication for a proxied request
None	proxy server configurations
None	creates a new http request
None	retrieves header_name
None	returns the request body
None	the content-length header
None	the content-type header
None	iterates over the request headers
None	the host this request is for
None	should the connection this request was made on be kept alive?
None	this method provides the metavariables defined by the revision 3 of “the www common gateway interface version 1
None	parses a request from socket
None	the port this request is for
None	request query as a hash
None	the client’s ip address
None	the server name this request is for
None	is this an ssl request?
None	creates a new http response object
None	retrieves the response header field
None	sets the response header field to value
None	enables chunked transfer encoding
None	will this response body be returned using chunked transfer-encoding?
None	the content-length header
None	sets the content-length header to len
None	the content-type header
None	sets the content-type header to type
None	iterates over each header in the response
None	will this response’s connection be kept alive?
None	creates an error page for exception ex with an optional backtrace
None	redirects to url with a webrick :httpstatus :redirect status
None	sets the response’s status to the status code
None	the response’s http status line
None	creates a new http server according to config an http server uses the following attributes an array of access logs
None	logs req and res in the access logs
None	the default options request handler says get head post and options requests are allowed
None	finds the appropriate virtual host to handle req
None	mounts servlet on dir passing options to the servlet at creation time
None	mounts proc or block on dir and calls it with a webrick :httprequest and webrick :httpresponse
None	processes requests on sock
None	finds a servlet for path
None	services req and fills in res
None	unmounts dir
None	adds server as a virtual host
None	returns the status class corresponding to code
None	is code a client error status?
None	is code an error status?
None	is code an informational status?
None	returns the description corresponding to the http status code
None	is code a redirection status?
None	is code a server error status?
None	is code a successful status?
None	removes quotes and escapes from str
None	loads apache-compatible mime
None	returns the mime type of filename from the list in mime_tab
None	normalizes a request path
None	parses form data in io with the given boundary
None	parses an http header raw into a hash of header fields with an array of values
None	parses the query component of a uri in str
None	parses q values in value as used in accept headers
None	parses a range header value ranges_specifier
None	quotes and escapes quotes in str
None	splits a header value str according to http specification
None	escapes http reserved and unwise characters in str
None	escapes 8 bit characters in str
None	escapes form reserved characters in str
None	escapes path str
None	unescapes http reserved and unwise characters in str
None	unescapes form reserved characters in str
None	converts version into an httpversion
None	creates a new httpversion from version
None	compares this version with other according to the http specification rules
None	the http version as show in the http request and response
None	a simpleserver only yields when you start it
None	creates tcp server sockets bound to address port and returns them
None	creates a self-signed certificate with the given number of bits the issuer cn and a comment to be stored in the certificate
None	the server hostname
None	generates a random string of length len
None	sets the close on exec flag for io
None	sets io operations on io to be non-blocking
None	changes the process’s uid and gid to the ones of user
None	executes the passed block and raises exception if execution takes more than seconds
None	cancels the timeout handler id
None	creates a new timeouthandler
None	registers a new timeout handler timeout in seconds exception to raise when timeout elapsed
None	interrupts the timeout handler id and raises exception
None	creates a new formdata object
None	adds str to this formdata which may be the body a header or a header entry
None	retrieves the header at the first entry in key
None	adds data at the end of the chain of entries this is called by webrick :httputils
None	yields each entry in this formdata
None	returns all the formdata as an array
None	a formdata will behave like an array
None	this formdata’s body
None	returns the http status code
None	returns the http status description
None	factory for servlet instances that will handle a request from server using options from the mount point
None	initializes a new servlet for server using options which are stored as-is in +@options+
None	raises a notfound exception
None	dispatches to #do_get
None	returns the allowed http request methods
None	dispatches to a do_ method based on req if such a method is available
None	creates a new cgi script servlet for the script at name
None	creates a defaultfilehandler instance for the file at local_path
None	creates a new erbhandler on server that will evaluate and serve the erb file name
None	handles get requests
None	handles post requests
None	allow custom handling of requests for files with suffix by class handler
None	creates a filehandler servlet on server that serves files starting at directory root options may be a hash containing keys from webrick :config :filehandler or true or false
None	remove custom handling of requests for files with suffix
None	used by userdb to create a basic password entry
None	creates a new basicauth instance
None	authenticates a req and returns a 401 unauthorized using res if the authentication was not correct
None	returns a challenge response which asks for authentication information
None	used by userdb to create a digest password entry
None	creates a new digestauth instance
None	authenticates a req and returns a 401 unauthorized using res if the authentication was not correct
None	returns a challenge response which asks for authentication information
None	open a digest password database at path
None	removes a password from the database for user in realm
None	iterate passwords in the database
None	flush the password database
None	retrieves a password from the database for user in realm
None	reloads passwords from the database
None	sets a password in the database for user in realm to pass
None	open a group database at path
None	add an array of members to group
None	flush the group database
None	retrieve the list of members from group
None	reload groups from the database
None	open a password database at path
None	removes a password from the database for user in realm
None	iterate passwords in the database
None	flush the password database
None	retrieves a password from the database for user in realm
None	reload passwords from the database
None	sets a password in the database for user in realm to pass
None	retrieves a password in realm for user for the #auth_type of this database
None	creates an obscured password in realm with user and password using the #auth_type of this database
None	sets a password in realm with user and password for the #auth_type of this database
None	returns current codepage
None	returns running ole automation object or win32ole object from moniker
None	defines the constants of ole automation server as mod’s constants
None	creates guid
None	returns current locale id lcid
None	returns a new win32ole object ole automation object
None	invokes release method of dispatch interface of win32ole object
None	returns reference counter of dispatch interface of win32ole object
None	displays helpfile
None	runs the early binding method to get property
None	runs the early binding method
None	runs the early binding method to set property
None	iterates over each item of ole collection which has ienumvariant interface
None	runs ole method
None	calls #invoke method
None	initialize win32ole object activex control by calling ipersistmemory :initnew
None	returns the array of win32ole_method object
None	returns the array of win32ole_method object
None	returns win32ole_method object corresponding with method specified by 1st argument
None	returns the array of win32ole_method object
None	returns the array of win32ole_method object
None	returns win32ole object for a specific dispatch or dual interface specified by iid
None	returns true when ole object has ole method otherwise returns false
None	returns win32ole_type object
None	returns the win32ole_typelib object
None	sets property of ole object
None	translates and dispatches windows message
None	returns ole event object
None	returns handler object
None	sets event handler object
None	removes the callback of event
None	defines the callback event
None	defines the callback of event
None	disconnects ole server
None	returns a new win32ole_method object which represents the information about ole method
None	returns dispatch id
None	returns event interface name if the method is event
None	returns help context
None	returns help file
None	returns help string of ole method
None	returns the method name with class name
None	returns the method invoke kind
None	returns the method kind string
None	call-seq returns the name of the method
None	returns the offset ov vtbl
None	returns array of win32ole_param object corresponding with method parameters
None	returns string of return value type of method
None	returns detail information of return value type of method
None	returns number of return value type of method
None	returns the size of optional parameters
None	returns the size of arguments of the method
None	returns win32ole_param object which represents ole parameter information
None	returns default value
None	returns the parameter name with class name
None	returns name
None	returns ole type of win32ole_param object parameter of ole method
None	returns detail information of type of argument
None	returns win32ole_record object
None	returns the ole struct name and member name and the value of member if com server in vb
None	returns value specified by the member name of vt_record ole variable
None	returns value specified by the member name of vt_record ole object
None	sets value specified by the member name of vt_record ole object
None	returns a new win32ole_type object
None	returns array of win32ole_type objects defined by the typelib type library
None	returns array of progid
None	returns array of type libraries
None	returns the array of win32ole_type object which is implemented by the win32ole_type object and having impltypeflag_fsource and impltypeflag_fdefault
None	returns the array of win32ole_type object which is implemented by the win32ole_type object and having impltypeflag_fdefault
None	returns helpcontext
None	returns helpfile path
None	returns the array of win32ole_type object which is implemented by the win32ole_type object
None	returns the type name with class name
None	returns major version
None	returns array of win32ole_method objects which represent ole method defined in ole type library
None	returns the win32ole_typelib object which is including the win32ole_type object
None	returns the array of win32ole_type object which is implemented by the win32ole_type object and having impltypeflag_fsource
None	returns array of win32ole_variable objects which represent variables defined in ole class
None	returns a new win32ole_typelib object
None	returns the array of win32ole_typelib object
None	returns guid string which specifies type library
None	returns the type library name with class name
None	returns library name
None	returns the type library major version
None	returns the type library minor version
None	returns the type library name
None	returns the type library file path
None	returns the type library file path
None	returns the type library version
None	returns the ole variable name and the value with class name
None	returns the name of variable
None	returns ole type string
None	returns detail information of type
None	returns value if value is exists
None	returns variable kind string
None	returns the number which represents variable kind
None	returns ruby object wrapping ole variant whose variant type is vt_array
None	returns ruby object wrapping ole variant
None	decodes string str with base64 and returns that value
None	encodes string str with base64 and returns that value
None	creates a new xmlrpc :base64 instance with string str as the internal string
None	returns the decoded internal string
None	returns the base64 encoded internal string
None	creates a new xmlrpc :basicserver instance which should not be done because xmlrpc :basicserver is an abstract class
None	adds ablock to the list of handlers with name as the name of the method
None	adds the introspection handlers system
None	adds the multi-call handler system
None	returns the default-handler which is called when no handler for a method-name is found
None	returns the service-hook which is called on each service request rpc unless it’s nil
None	sets handler as the default-handler which is called when no handler for a method-name is found
None	a service-hook is called for each service request rpc
None	creates a new xmlrpc :cgiserver instance
None	call this after you have added all you handlers to the server
None	creates an object which represents the remote xml-rpc server on the given host
None	creates an object which represents the remote xml-rpc server at the given uri
None	receives a hash and calls ::new with the corresponding values
None	invokes the method named method with the parameters given by args on the xml-rpc server
None	the difference between this method and #call is that this method will not raise a xmlrpc :faultexception exception
None	similar to #call however can be called concurrently and use a new connection for each request
None	you can use this method to execute several methods on a xmlrpc server which support the multi-call extension
None	similar to #multicall however can be called concurrently and use a new connection for each request
None	changes the password for the basic authentication header to new_password
None	returns an object of class xmlrpc :client :proxy initialized with prefix and args
None	almost the same like #proxy only that a call on the returned xmlrpc :client :proxy object will return two parameters
None	similar to #proxy however can be called concurrently and use a new connection for each request
None	sets the net :http#read_timeout and net :http#open_timeout to new_timeout
None	changes the user for the basic authentication header to new_user
None	decodes the given str using xmlrpc :base64
None	converts a string to true or false raises an exception if str is not 0 or 1
None	converts a the given str to a datetime
None	converts a string to a float see also string
None	converts the given hash to an xmlrpc :faultexception object by passing the faultcode and faultstring attributes of the hash to xmlrpc :faultexception
None	converts a string to an integer see also string
None	converts the given hash to a marshalled object
None	generates a xml-rpc methodresponse document when is_ret is false then the params array must contain only one element which is a structure of a fault return-value
None	converts a ruby object into a xml-rpc <value> tag
None	creates a new xmlrpc :datetime instance with the parameters year month day as date and hour min sec as time
None	returns whether or not all date/time components are an array
None	set value as the new date/time component
None	set value as the new date/time component
None	set value as the new date/time component
None	set value as the new date/time component
None	set value as the new date/time component
None	returns all date/time components in an array
None	return a date object of the date which represents self
None	return a time object of the date/time which represents self
None	set value as the new date/time component
None	creates a new xmlrpc :faultexception instance
None	the faultcode and faultstring of the exception in a hash
None	returns methodname params
None	returns paramorfault
None	creates a new xmlrpc :modrubyserver instance
None	call this after you have added all you handlers to the server
None	sets the xmlparser to use for parsing xml documents
None	sets the xmlwriter to use for generating xml output
None	creates a new xmlrpc :server instance which is a xml-rpc server listening on the given port and accepts requests for the given host which is localhost by default
None	call this after you have added all you handlers to the server
None	stops and shuts the server down
None	return the valid ip addresses that are allowed to connect to the server
None	specifies the valid ip addresses that are allowed to connect to the server
None	yields an instance of each installed parser
None	yields an instance of each installed xml writer
None	creates an object which provides #method_missing
None	every method call is forwarded to the xml-rpc server defined in xmlrpc :client :proxy#new
None	deletes value from database associated with key
None	calls the given block once for each key value pair in the database
None	calls the given block once for each key value pair in the database
None	calls the given block for each value in database
None	return value associated with key
None	returns true if specified value is found in the database
None	returns a hash not a dbm database created by using each value in the database as a key with the corresponding key as its value
None	returns the key for the specified value
None	converts the contents of the database to an in-memory hash then calls hash#reject with the specified code block returning a new hash
None	replaces the contents of the database with the contents of the specified object
None	if a block is provided returns a new array containing key value pairs for which the block returns true
None	removes a key value pair from the database and returns it
None	stores value in database with key as the index
None	converts the contents of the database to an array of key value arrays and returns it
None	converts the contents of the database to an in-memory hash object and returns it
None	updates the database with multiple values from the specified object
None	returns an array of values from the database
None	returns an array containing the values associated with the given keys
None	calculates adler-32 checksum for string and returns updated value of adler
None	combine two adler-32 check values in to one
None	calculates crc checksum for string and returns updated value of crc
None	combine two crc-32 check values in to one
None	returns the table for calculating crc checksum as an array
None	compresses the given string
None	decompresses string
None	returns the string which represents the version of zlib library
None	compresses the given string
None	creates a new deflate stream for compression
None	this method is equivalent to deflate( flush)
None	duplicates the deflate stream
None	changes the parameters of the deflate stream to allow changes between different types of data that require different types of compression
None	sets the preset dictionary and returns string
None	creates a gzipreader or gzipwriter associated with io passing in any necessary extra options and executes the block with the newly created object just like file
None	closes the gzipfile object
None	returns comments recorded in the gzip file header or nil if the comments is not present
None	returns crc value of the uncompressed data
None	closes the gzipfile object
None	returns compression level
None	returns last modification time recorded in the gzip file header
None	returns original filename recorded in the gzip file header or nil if original filename is not present
None	returns os code number recorded in the gzip file header
None	creates a gzipreader object associated with io
None	opens a file specified by filename as a gzipped file and returns a gzipreader object associated with that file
None	returns true or false whether the stream has reached the end
None	returns true or false whether the stream has reached the end
None	the line number of the last row read from this file
None	specify line number of the last row read from this file
None	total number of output bytes output so far
None	reads at most maxlen bytes from the gziped stream but it blocks only if gzipreader has no data immediately available
None	resets the position of the file pointer to the point created the gzipreader object
None	total number of output bytes output so far
None	returns the rest of the data which had read for parsing gzip format or nil if the whole gzip file is not parsed yet
None	creates a gzipwriter object associated with io
None	opens a file specified by filename for writing gzip compressed data and returns a gzipwriter object associated with that file
None	specify the comment str in the gzip header
None	flushes all the internal buffers of the gzipwriter object
None	specify the modification time mtime in the gzip header
None	specify the original name str in the gzip header
None	total number of input bytes read so far
None	total number of input bytes read so far
None	decompresses string
None	creates a new inflate stream for decompression
None	provide the inflate stream with a dictionary that may be required in the future
None	sets the preset dictionary and returns string
None	inputs string into the end of input buffer and skips data until a full flush point can be found
None	quoted verbatim from original documentation :)
None	returns the adler-32 checksum
None	returns bytes of data in the input buffer
None	returns number of bytes of free spaces in output buffer
None	allocates size bytes of free space in the output buffer
None	closes the stream
None	returns true if the stream is closed
None	guesses the type of the data which have been inputed into the stream
None	closes the stream
None	returns true if the stream is closed
None	finishes the stream and flushes output buffer
None	returns true if the stream is finished
None	flushes output buffer and returns all data in that buffer
None	resets and initializes the stream
None	returns true if the stream is finished
None	returns the total bytes of the input data to the stream
None	returns the total bytes of the output data from the stream
None	constructs a string of the gzipfile error
None	returns a new array populated with the given objects
None	returns a new array
None	tries to convert obj into an array using to_ary method
None	concatenation — returns a new array built by concatenating the two arrays together to produce a third array
None	append—pushes the given object on to the end of this array
None	comparison — returns an integer -1 0 or +1 if this array is less than equal to or greater than other_ary
None	searches through an array whose elements are also arrays comparing obj with the first element of each contained array using obj
None	returns the element at index
None	by using binary search finds a value from this array which meets the given condition in o log n where n is the size of the array
None	by using binary search finds an index of a value from this array which meets the given condition in o log n where n is the size of the array
None	removes all elements from self
None	invokes the given block once for each element of self
None	invokes the given block once for each element of self replacing the element with the value returned by the block
None	when invoked with a block yields all combinations of length n of elements from the array and then returns the array itself
None	returns a copy of self with all nil elements removed
None	removes nil elements from the array
None	appends the elements of other_ary to self
None	returns the number of elements
None	calls the given block for each element n times or forever if nil is given
None	deletes all items from self that are equal to obj
None	deletes the element at the specified index returning that element or nil if the index is out of range
None	deletes every element of self for which block evaluates to true
None	extracts the nested value specified by the sequence of idx objects by calling dig at each step returning nil if any intermediate step is nil
None	drops first n elements from ary and returns the rest of the elements in an array
None	drops elements up to but not including the first element for which the block returns nil or false and returns an array containing the remaining elements
None	calls the given block once for each element in self passing that element as a parameter
None	returns true if self contains no elements
None	returns true if self and other are the same object or are both arrays with the same content according to object#eql?)
None	tries to return the element at position index but throws an indexerror exception if the referenced index lies outside of the array bounds
None	the first three forms set the selected elements of self which may be the entire array to obj
None	returns the index of the first object in ary such that the object is == to obj
None	returns the first element or the first n elements of the array
None	returns a new array that is a one-dimensional flattening of self recursively
None	flattens self in place
None	return true if this array is frozen or temporarily frozen while being sorted
None	compute a hash-code for this array
None	returns true if the given object is present in self that is if any element == object), otherwise returns false
None	returns the index of the first object in ary such that the object is == to obj
None	replaces the contents of self with the contents of other_ary truncating or expanding if necessary
None	inserts the given values before the element with the given index
None	creates a string representation of self
None	returns a string created by converting each element of the array to a string separated by the given separator
None	deletes every element of self for which the given block evaluates to false
None	returns the last element s of self
None	returns the number of elements in self
None	invokes the given block once for each element of self
None	invokes the given block once for each element of self replacing the element with the value returned by the block
None	packs the contents of arr into a binary sequence according to the directives in atemplatestring see the table below directives “a ” “a ” and “z” may be followed by a count which gives the width of the resulting field
None	when invoked with a block yield all permutations of length n of the elements of the array then return the array itself
None	removes the last element from self and returns it or nil if the array is empty
None	returns an array of all combinations of elements from all arrays
None	append — pushes the given object s on to the end of this array
None	searches through the array whose elements are also arrays
None	returns a new array containing the items in self for which the given block is not true
None	deletes every element of self for which the block evaluates to true if no changes were made returns nil
None	when invoked with a block yields all repeated combinations of length n of elements from the array and then returns the array itself
None	when invoked with a block yield all repeated permutations of length n of the elements of the array then return the array itself
None	replaces the contents of self with the contents of other_ary truncating or expanding if necessary
None	returns a new array containing self‘s elements in reverse order
None	reverses self in place
None	returns the index of the last object in self == to obj
None	returns a new array by rotating self so that the element at count is the first element of the new array
None	rotates self in place so that the element at count comes first and returns self
None	choose a random element or n random elements from the array
None	returns a new array containing all elements of ary for which the given block returns a true value
None	invokes the given block passing in successive elements from self deleting elements for which the block returns a false value
None	removes the first element of self and returns it shifting all other elements down by one
None	returns a new array with elements of self shuffled
None	shuffles elements in self in place
None	element reference — returns the element at index or returns a subarray starting at the start index and continuing for length elements or returns a subarray specified by range of indices
None	deletes the element s given by an index optionally up to length elements or by a range
None	returns a new array created by sorting self
None	sorts self in place
None	sorts self in place using a set of keys generated by mapping the values in self through the given block
None	returns first n elements from the array
None	passes elements to the block until the block returns nil or false then stops iterating and returns an array of all prior elements
None	returns self
None	returns self
None	returns the result of interpreting ary as an array of key value pairs
None	assumes that self is an array of arrays and transposes the rows and columns
None	returns a new array by removing duplicate values in self
None	removes duplicate elements from self
None	prepends objects to the front of self moving other elements upwards
None	returns an array containing the elements in self corresponding to the given selector s
None	converts any arguments to arrays then merges elements of self with corresponding elements from each argument
None	not documented
None	returns an integer identifier for obj
None	equality — at the object level == returns true only if obj and other are the same object
None	evaluates a string containing ruby source code or the given block within the context of the receiver obj
None	executes the given block within the context of the receiver obj
None	invoked by ruby when obj is sent a message it cannot handle
None	invoked as a callback whenever a singleton method is added to the receiver
None	invoked as a callback whenever a singleton method is removed from the receiver
None	invoked as a callback whenever a singleton method is undefined in the receiver
None	returns big modulo other
None	raises big to the exponent power which may be an integer float or anything that will coerce to a number
None	adds big and other returning the result
None	returns true if the value of big is less than that of real
None	shifts big left numeric positions right if numeric is negative
None	returns true if the value of big is less than or equal to that of real
None	comparison—returns -1 0 or +1 depending on whether big is less than equal to or greater than numeric
None	returns true if the value of big is greater than that of real
None	returns true if the value of big is greater than or equal to that of real
None	shifts big right numeric positions left if numeric is negative
None	returns the absolute value of big
None	returns the number of bits of the value of int
None	returns an array with both a numeric and a big represented as bignum objects
None	performs integer division returns integer value
None	returns true only if obj is a bignum with the same value as big
None	returns true if big is an even number
None	returns the floating point result of dividing big by numeric
None	compute a hash based on the value of big
None	returns the absolute value of big
None	returns big modulo other
None	returns true if big is an odd number
None	returns the remainder after dividing big by numeric
None	returns the number of bytes in the machine representation of big
None	converts big to a float
None	returns a string containing the representation of big radix base 2 through 36
None	evaluates the ruby expression s in string in the binding’s context
None	returns a true if a local variable symbol exists
None	returns a value of local variable symbol
None	set local variable named symbol as obj
None	returns the symbol names of the binding’s local variables this method is short version of the following code
None	returns the bound receiver of the binding object
None	creates a new anonymous unnamed class with the given superclass or object if no parameter is given
None	allocates space for a new object of class’s class and does not call initialize on the new instance
None	returns the superclass of class or nil
None	callback invoked whenever a subclass of the current class is created
None	compares two objects based on the receiver’s <=> method returning true if it returns -1
None	compares two objects based on the receiver’s <=> method returning true if it returns -1 or 0
None	compares two objects based on the receiver’s <=> method returning true if it returns 1
None	compares two objects based on the receiver’s <=> method returning true if it returns 0 or 1
None	returns false if obj <=> min is less than zero or if anobject <=> max is greater than zero true otherwise
None	returns a complex object which denotes the given polar form
None	returns a complex object which denotes the given rectangular form
None	returns a complex object which denotes the given rectangular form
None	performs exponentiation
None	performs addition
None	returns the absolute part of its polar form
None	returns square of the absolute value
None	returns the angle part of its polar form
None	returns the angle part of its polar form
None	returns the complex conjugate
None	returns the complex conjugate
None	returns the denominator lcm of both denominator - real and imag
None	performs division as each part is a float never returns a float
None	returns the imaginary part
None	returns the imaginary part
None	returns the value as a string for inspection
None	returns the absolute part of its polar form
None	returns the numerator
None	returns the angle part of its polar form
None	returns the value as a rational if possible the imaginary part should be exactly zero
None	returns the real part
None	returns false
None	returns self
None	returns the value as a float if possible the imaginary part should be exactly zero
None	returns the value as an integer if possible the imaginary part should be exactly zero
None	returns the value as a rational if possible the imaginary part should be exactly zero
None	returns the value as a string
None	creates a new condition variable instance
None	wakes up all threads waiting for this lock
None	wakes up the first thread in line waiting for this lock
None	releases the lock held in mutex and waits reacquires the lock on wakeup
None	invokes the continuation
None	changes the current working directory of the process to the given string
None	changes this process’s idea of the file system root
None	deletes the named directory
None	returns an array containing all of the filenames in the given directory
None	returns true if the named file is a directory false otherwise
None	calls the block once for each entry in the named directory passing the filename of each entry as a parameter to the block
None	returns the path to the current working directory of this process as a string
None	expands pattern which is an array of patterns or a pattern string and returns the results as matches or as arguments given to the block
None	returns the home directory of the current user or the named user if given
None	makes a new directory named by string with permissions specified by the optional parameter aninteger
None	returns a new directory object for the named directory
None	the optional enc argument specifies the encoding of the directory
None	returns the path to the current working directory of this process as a string
None	deletes the named directory
None	deletes the named directory
None	closes the directory stream
None	calls the block once for each entry in this directory passing the filename of each entry as a parameter to the block
None	returns the file descriptor used in dir
None	return a string describing this dir object
None	returns the path parameter passed to dir’s constructor
None	returns the current position in dir
None	reads the next entry from dir and returns it as a string
None	repositions dir to the first entry
None	returns the current position in dir
None	returns the path parameter passed to dir’s constructor
None	returns the corresponding ascii compatible encoding
None	possible options elements ::new creates an instance of encoding :converter
None	returns a conversion path
None	convert source_string and return destination_string
None	returns the conversion path of ec
None	returns the destination encoding as an encoding object
None	finishes the converter
None	inserts string into the encoding converter
None	returns a printable version of ec
None	returns an exception object for the last conversion
None	possible opt elements possible results #primitive_convert converts source_buffer into destination_buffer
None	call-seq put back the bytes which will be converted
None	returns the replacement string
None	returns the source encoding as an encoding object
None	returns the destination encoding as an encoding object
None	returns the destination encoding name as a string
None	returns the discarded bytes when encoding :invalidbytesequenceerror occurs
None	returns true if the invalid byte sequence error is caused by premature end of string
None	returns the bytes to be read again when encoding :invalidbytesequenceerror occurs
None	returns the source encoding as an encoding object
None	returns the source encoding name as a string
None	returns the destination encoding as an encoding object
None	returns the destination encoding name as a string
None	returns the one-character string which cause encoding :undefinedconversionerror
None	returns the source encoding as an encoding object
None	returns the source encoding name as a string
None	checks the compatibility of two objects
None	returns default external encoding
None	returns default internal encoding
None	search the encoding with specified name
None	returns the list of loaded encodings
None	returns the locale charmap name
None	returns the list of available encoding names
None	returns whether ascii-compatible or not
None	returns true for dummy encodings
None	returns a string which represents the encoding for programmers
None	returns the name of the encoding
None	returns the list of name and aliases of the encoding
None	returns a replicated encoding of enc whose name is name
None	returns the name of the encoding
None	passes each element of the collection to the given block
None	passes each element of the collection to the given block
None	enumerates over the items chunking them together based on the return value of the block
None	creates an enumerator for each chunked elements
None	returns a new array with the results of running block once for every element in enum
None	returns a new array with the concatenated results of running block once for every element in enum
None	returns the number of items in enum through enumeration
None	calls block for each element of enum repeatedly n times or forever if none or nil is given
None	passes each entry in enum to block
None	drops first n elements from enum and returns rest elements in an array
None	drops elements up to but not including the first element for which the block returns nil or false and returns an array containing the remaining elements
None	iterates the given block for each array of consecutive <n> elements
None	calls block once for each element in self passing that element as a parameter converting multiple values from yield to an array
None	iterates the given block for each slice of <n> elements
None	calls block with two arguments the item and its index for each item in enum
None	iterates the given block for each element with an arbitrary object given and returns the initially given object
None	returns an array containing the items in enum
None	passes each entry in enum to block
None	returns an array containing all elements of enum for which the given block returns a true value
None	compares each entry in enum with value or passes to block
None	returns the first element or the first n elements of the enumerable
None	returns a new array with the concatenated results of running block once for every element in enum
None	returns an array of every element in enum for which pattern === element
None	inverted version of #grep
None	groups the collection by result of the block
None	returns true if any member of enum equals obj
None	combines all elements of enum by applying a binary operation specified by a block or a symbol that names a method or operator
None	returns a lazy enumerator whose methods map/collect flat_map/collect_concat select/find_all reject grep #grep_v zip take #take_while drop and #drop_while enumerate values only on an as-needed basis
None	returns a new array with the results of running block once for every element in enum
None	returns the object in enum with the maximum value
None	returns the object in enum that gives the maximum value from the given block
None	returns true if any member of enum equals obj
None	returns the object in enum with the minimum value
None	returns the object in enum that gives the minimum value from the given block
None	returns a two element array which contains the minimum and the maximum value in the enumerable
None	returns a two element array containing the objects in enum that correspond to the minimum and maximum values respectively from the given block
None	passes each element of the collection to the given block
None	passes each element of the collection to the given block
None	returns two arrays the first containing the elements of enum for which the block evaluates to true the second containing the rest
None	combines all elements of enum by applying a binary operation specified by a block or a symbol that names a method or operator
None	returns an array for all elements of enum for which the given block returns false
None	builds a temporary array and traverses that array in reverse order
None	returns an array containing all elements of enum for which the given block returns a true value
None	creates an enumerator for each chunked elements
None	creates an enumerator for each chunked elements
None	creates an enumerator for each chunked elements
None	returns an array containing the items in enum sorted either according to their own <=> method or by using the results of the supplied block
None	sorts enum using a set of keys generated by mapping the values in enum through the given block
None	returns first n elements from enum
None	passes elements to the block until the block returns nil or false then stops iterating and returns an array of all prior elements
None	returns an array containing the items in enum
None	returns the result of interpreting enum as a list of key value pairs
None	takes one element from enum and merges corresponding elements from each args
None	creates a new lazy enumerator
None	returns a new lazy enumerator with the concatenated results of running block once for every element in lazy
None	similar to kernel#to_enum except it returns a lazy enumerator
None	returns a new lazy enumerator with the concatenated results of running block once for every element in lazy
None	similar to kernel#to_enum except it returns a lazy enumerator
None	creates a new enumerator object which can be used as an enumerable
None	iterates over the block according to how this enumerator was constructed
None	iterates the given block for each element with an arbitrary object obj and returns obj if no block is given returns a new enumerator
None	sets the value to be returned by the next yield inside e
None	creates a printable version of e
None	returns the next object in the enumerator and move the internal position forward
None	returns the next object as an array in the enumerator and move the internal position forward
None	returns the next object in the enumerator but doesn’t move the internal position forward
None	returns the next object as an array similar to #next_values but doesn’t move the internal position forward
None	rewinds the enumeration sequence to the beginning
None	returns the size of the enumerator or nil if it can’t be calculated lazily
None	iterates the given block for each element with an index which starts from offset
None	iterates the given block for each element with an arbitrary object obj and returns obj if no block is given returns a new enumerator
None	returns an array of the name and value of the environment variable with name or nil if the name cannot be found
None	removes every environment variable
None	deletes the environment variable with name and returns the value of the variable
None	deletes every environment variable for which the block evaluates to true
None	yields each environment variable name and value
None	yields each environment variable name
None	yields each environment variable name and value
None	yields each environment variable value
None	returns true when there are no environment variables
None	retrieves the environment variable name
None	returns true if there is an environment variable with the given name
None	returns true if there is an environment variable with the given value
None	returns true if there is an environment variable with the given name
None	returns the contents of the environment as a string
None	returns a new hash created by using environment variable names as values and values as names
None	deletes every environment variable where the block evaluates to false
None	returns the name of the environment variable with value
None	returns true if there is an environment variable with the given name
None	returns every environment variable name in an array
None	returns the number of environment variables
None	returns true if there is an environment variable with the given name
None	returns an array of the name and value of the environment variable with value or nil if the value cannot be found
None	re-hashing the environment variables does nothing
None	equivalent to env#delete_if but returns nil if no changes were made
None	replaces the contents of the environment variables with the contents of hash
None	returns a copy of the environment for entries where the block returns true
None	equivalent to env#keep_if but returns nil if no changes were made
None	removes an environment variable name-value pair from env and returns it as an array
None	returns the number of environment variables
None	sets the environment variable name to value
None	converts the environment variables into an array of names and value arrays
None	creates a hash with a copy of the environment variables
None	returns “env”
None	adds the contents of hash to the environment variables
None	returns true if there is an environment variable with the given value
None	returns every environment variable value as an array
None	returns an array containing the environment variable values associated with the given names
None	construct a new exception object optionally passing in a message
None	returns any backtrace associated with the exception
None	returns any backtrace associated with the exception
None	returns the previous exception $!) at the time this exception was raised
None	return this exception’s class name and message
None	returns the result of invoking exception
None	sets the backtrace information associated with exc
None	returns exception’s message or the name of the exception if no message is set
None	‘nuf said…
None	returns the current fiber
None	yields control back to the context that resumed the fiber passing along any arguments that were passed to it
None	returns true if the fiber can still be resumed or transferred to
None	resumes the fiber from the point at which the last fiber
None	transfer control to another fiber resuming it from where it last stopped or starting it if it was not resumed before
None	create a file :stat object for the given file name raising an exception if the file doesn’t exist)
None	compares file :stat objects by comparing their respective modification times
None	returns the last access time for this file as an object of class time
None	returns the birth time for stat
None	returns the native file system’s block size
None	returns true if the file is a block device false if it isn’t or if the operating system doesn’t support this feature
None	returns the number of native file system blocks allocated for this file or nil if the operating system doesn’t support this feature
None	returns true if the file is a character device false if it isn’t or if the operating system doesn’t support this feature
None	returns the change time for stat that is the time directory information about the file was changed not the file itself
None	returns an integer representing the device on which stat resides
None	returns the major part of file_stat#dev or nil
None	returns the minor part of file_stat#dev or nil
None	returns true if the named file is a directory or a symlink that points at a directory and false otherwise
None	returns true if stat is executable or if the operating system doesn’t distinguish executable files from nonexecutable files
None	returns true if stat is a regular file not a device file pipe socket etc
None	identifies the type of stat
None	returns the numeric group id of the owner of stat
None	returns the inode number for stat
None	produce a nicely formatted description of stat
None	returns an integer representing the permission bits of stat
None	returns the modification time of stat
None	returns the number of hard links to stat
None	returns true if the operating system supports pipes and stat is a pipe false otherwise
None	returns an integer representing the device type on which stat resides
None	returns the major part of file_stat#rdev or nil
None	returns the minor part of file_stat#rdev or nil
None	returns true if stat is readable by the effective user id of this process
None	returns true if stat is readable by the real user id of this process
None	returns true if stat has the set-group-id permission bit set false if it doesn’t or if the operating system doesn’t support this feature
None	returns true if stat has the set-user-id permission bit set false if it doesn’t or if the operating system doesn’t support this feature
None	returns the size of stat in bytes
None	returns true if stat is a socket false if it isn’t or if the operating system doesn’t support this feature
None	returns true if stat has its sticky bit set false if it doesn’t or if the operating system doesn’t support this feature
None	returns true if stat is a symbolic link false if it isn’t or if the operating system doesn’t support this feature
None	returns the numeric user id of the owner of stat
None	if stat is readable by others returns an integer representing the file permission bits of stat
None	if stat is writable by others returns an integer representing the file permission bits of stat
None	returns true if stat is writable by the effective user id of this process
None	returns true if stat is writable by the real user id of this process
None	returns true if stat is a zero-length file false otherwise
None	converts a pathname to an absolute pathname
None	returns the last access time for the named file as a time object)
None	returns the last component of the filename given in file_name which can be formed using both file :separator and file :alt_separator as the separator when file :alt_separator is not nil
None	returns the birth time for the named file
None	returns true if the named file is a block device
None	returns true if the named file is a character device
None	changes permission bits on the named file s to the bit pattern represented by mode_int
None	changes the owner and group of the named file s to the given numeric owner and group id’s
None	returns the change time for the named file the time at which directory information about the file was changed not the file itself
None	deletes the named files returning the number of names passed as arguments
None	returns true if the named file is a directory or a symlink that points at a directory and false otherwise
None	returns all components of the filename given in file_name except the last one
None	returns true if the named file is executable by the effective user and group id of this process
None	returns true if the named file is executable by the real user and group id of this process
None	return true if the named file exists
None	converts a pathname to an absolute pathname
None	returns the extension the portion of file name in path starting from the last period
None	returns true if the named file exists and is a regular file
None	returns true if path matches against pattern
None	returns true if path matches against pattern
None	identifies the type of the named file the return string is one of “file”, “directory”, “characterspecial”, “blockspecial”, “fifo”, “link”, “socket”, or “unknown”
None	returns true if the named file exists and the effective group id of the calling process is the owner of the file
None	returns true if the named files are identical
None	returns a new string formed by joining the strings using file :separator
None	equivalent to file :chmod but does not follow symbolic links so it will change the permissions associated with the link not the file referenced by the link
None	equivalent to file :chown but does not follow symbolic links so it will change the owner associated with the link not the file referenced by the link
None	creates a new name for an existing file using a hard link
None	returns the modification time for the named file as a time object
None	opens the file named by filename according to the given mode and returns a new file object
None	with no associated block file
None	returns true if the named file exists and the effective used id of the calling process is the owner of the file
None	returns the string representation of the path
None	returns true if the named file is a pipe
None	returns true if the named file is readable by the effective user and group id of this process
None	returns true if the named file is readable by the real user and group id of this process
None	returns the name of the file referenced by the given link
None	returns the real absolute pathname of pathname in the actual filesystem
None	returns the real absolute pathname of pathname in the actual filesystem not containing symlinks or useless dots
None	renames the given file to the new name
None	returns true if the named file has the setgid bit set
None	returns true if the named file has the setuid bit set
None	returns the size of file_name
None	returns nil if file_name doesn’t exist or has zero size the size of the file otherwise
None	returns true if the named file is a socket
None	splits the given string into a directory and a file component and returns them in a two-element array
None	returns a file :stat object for the named file see file :stat)
None	returns true if the named file has the sticky bit set
None	creates a symbolic link called new_name for the existing file old_name
None	returns true if the named file is a symbolic link
None	truncates the file file_name to be at most integer bytes long
None	returns the current umask value for this process
None	deletes the named files returning the number of names passed as arguments
None	sets the access and modification times of each named file to the first two arguments
None	if file_name is readable by others returns an integer representing the file permission bits of file_name
None	if file_name is writable by others returns an integer representing the file permission bits of file_name
None	returns true if the named file is writable by the effective user and group id of this process
None	returns true if the named file is writable by the real user and group id of this process
None	returns true if the named file exists and has a zero size
None	locks or unlocks a file according to locking_constant a logical or of the values in the table below
None	returns the pathname used to create file as a string
None	returns true if the named file is a block device
None	returns true if the named file is a character device
None	returns true if the named file is a directory or a symlink that points at a directory and false otherwise
None	returns true if the named file is executable by the effective user and group id of this process
None	returns true if the named file is executable by the real user and group id of this process
None	return true if the named file exists
None	returns true if the named file exists and is a regular file
None	returns true if the named file exists and the effective group id of the calling process is the owner of the file
None	returns true if the named files are identical
None	returns true if the named file exists and the effective used id of the calling process is the owner of the file
None	returns true if the named file is a pipe
None	returns true if the named file is readable by the effective user and group id of this process
None	returns true if the named file is readable by the real user and group id of this process
None	returns true if the named file has the setgid bit set
None	returns true if the named file has the setuid bit set
None	returns the size of file_name
None	returns nil if file_name doesn’t exist or has zero size the size of the file otherwise
None	returns true if the named file is a socket
None	returns true if the named file has the sticky bit set
None	returns true if the named file is a symbolic link
None	if file_name is readable by others returns an integer representing the file permission bits of file_name
None	if file_name is writable by others returns an integer representing the file permission bits of file_name
None	returns true if the named file is writable by the effective user and group id of this process
None	returns true if the named file is writable by the real user and group id of this process
None	returns true if the named file exists and has a zero size
None	returns fix modulo other
None	raises fix to the power of numeric which may be negative or fractional
None	performs addition the class of the resulting object depends on the class of numeric and on the magnitude of the result
None	returns true if the value of fix is less than that of real
None	shifts fix left count positions or right if count is negative
None	returns true if the value of fix is less than or equal to that of real
None	comparison—returns -1 0 +1 or nil depending on whether fix is less than equal to or greater than numeric
None	returns true if the value of fix is greater than that of real
None	returns true if the value of fix is greater than or equal to that of real
None	shifts fix right count positions or left if count is negative
None	returns the absolute value of fix
None	returns the number of bits of the value of int
None	performs integer division returns integer result of dividing fix by numeric
None	returns true if fix is an even number
None	returns the floating point result of dividing fix by numeric
None	returns the absolute value of fix
None	returns fix modulo other
None	returns true if fix is an odd number
None	returns the number of bytes in the machine representation of fix
None	converts fix to a float
None	returns a string containing the representation of fix radix base between 2 and 36
None	returns true if fix is zero
None	return the modulo after division of float by other
None	raises float to the power of other
None	returns a new float which is the sum of float and other
None	returns true if float is less than real
None	returns true if float is less than or equal to real
None	returns -1 0 +1 or nil depending on whether float is less than equal to or greater than real
None	returns true if float is greater than real
None	returns true if float is greater than or equal to real
None	returns the absolute value of float
None	returns 0 if the value is positive pi otherwise
None	returns 0 if the value is positive pi otherwise
None	returns the smallest integer greater than or equal to float
None	returns an array with both a numeric and a float represented as float objects
None	returns the denominator always positive
None	returns true only if obj is a float with the same value as float
None	returns true if float is a valid ieee floating point number it is not infinite and #nan? is false)
None	returns the largest integer less than or equal to float
None	returns a hash code for this float
None	return values corresponding to the value of float nil -1 1 for example
None	returns the absolute value of float
None	return the modulo after division of float by other
None	returns true if float is an invalid ieee floating point number
None	returns true if float is less than 0
None	returns the next representable floating-point number
None	returns the numerator
None	returns 0 if the value is positive pi otherwise
None	returns true if float is greater than 0
None	returns the previous representable floating-point number
None	returns a simpler approximation of the value flt-|eps| <= result <= flt+|eps|)
None	rounds float to a given precision in decimal digits default 0 digits
None	since float is already a float returns self
None	returns the float truncated to an integer
None	returns the float truncated to an integer
None	returns the value as a rational
None	returns a string containing a representation of self
None	returns the float truncated to an integer
None	returns true if float is 0
None	clears the gc profiler data
None	stops the gc profiler
None	starts the gc profiler
None	the current status of gc profile mode
None	returns an array of individual raw profile data hashes ordered from earliest to latest by :gc_invoke_time
None	writes the ::result to $stdout or the given io object
None	returns a profile data report such as
None	the total time used for garbage collection in seconds
None	the number of times gc occurred
None	disables garbage collection returning true if garbage collection was already disabled
None	enables garbage collection returning true if garbage collection was previously disabled
None	returns information about the most recent garbage collection
None	returns the size of memory allocated by malloc()
None	returns the number of malloc() allocations
None	initiates garbage collection unless manually disabled
None	returns a hash containing information about the gc
None	returns current status of gc stress mode
None	verify internal consistency
None	initiates garbage collection unless manually disabled
None	returns a new empty hash
None	try to convert obj into a hash using #to_hash method
None	returns true if hash is subset of other
None	returns true if hash is subset of other or equals to other
None	returns true if other is subset of hash
None	returns true if other is subset of hash or equals to hash
None	searches through the hash comparing obj with the key using ==
None	removes all key-value pairs from hsh
None	makes hsh compare its keys by their identity i
None	returns true if hsh will compare its keys by their identity
None	returns the default value the value that would be returned by hsh if key did not exist in hsh
None	if hash :new was invoked with a block return that block otherwise return nil
None	deletes the key-value pair and returns the value from hsh whose key is equal to key
None	deletes every key-value pair from hsh for which block evaluates to true
None	extracts the nested value specified by the sequence of idx objects by calling dig at each step returning nil if any intermediate step is nil
None	calls block once for each key in hsh passing the key-value pair as parameters
None	calls block once for each key in hsh passing the key as a parameter
None	calls block once for each key in hsh passing the key-value pair as parameters
None	calls block once for each key in hsh passing the value as a parameter
None	returns true if hsh contains no key-value pairs
None	returns true if hash and other are both hashes with the same content
None	the following example shows that an exception is raised if the key is not found and a default value is not supplied
None	returns an array containing the values associated with the given keys but also raises keyerror when one of keys can’t be found
None	returns a new array that is a one-dimensional flattening of this hash
None	returns true if the given key is present in hsh
None	returns true if the given value is present for some key in hsh
None	compute a hash-code for this hash
None	returns true if the given key is present in hsh
None	return the contents of this hash as a string
None	returns a new hash created by using hsh’s values as keys and the keys as values
None	deletes every key-value pair from hsh for which block evaluates to false
None	returns the key of an occurrence of a given value
None	returns true if the given key is present in hsh
None	returns a new array populated with the keys from this hash
None	returns the number of key-value pairs in the hash
None	returns true if the given key is present in hsh
None	returns a new hash containing the contents of other_hash and the contents of hsh
None	adds the contents of other_hash to hsh
None	searches through the hash comparing obj with the value using ==
None	rebuilds the hash based on the current hash values for each key
None	returns a new hash consisting of entries for which the block returns false
None	equivalent to hash#delete_if but returns nil if no changes were made
None	replaces the contents of hsh with the contents of other_hash
None	returns a new hash consisting of entries for which the block returns true
None	equivalent to hash#keep_if but returns nil if no changes were made
None	removes a key-value pair from hsh and returns it as the two-item array key value or the hash’s default value if the hash is empty
None	returns the number of key-value pairs in the hash
None	associates the value given by value with the key given by key
None	converts hsh to a nested array of key value arrays
None	returns self
None	returns self
None	adds the contents of other_hash to hsh
None	returns true if the given value is present for some key in hsh
None	returns a new array populated with the values from hsh
None	return an array containing the values associated with the given keys
None	as int is already an integer all these methods simply return the receiver
None	returns a string containing the character represented by the int‘s value according to encoding
None	returns 1
None	iterates the given block passing decreasing values from int down to and including limit
None	returns true if int is an even number
None	returns the greatest common divisor always positive
None	returns an array [int
None	since int is already an integer this always returns true
None	returns the least common multiple always positive
None	returns self
None	returns true if int is an odd number
None	returns the int itself
None	returns the integer equal to int - 1
None	returns the value as a rational
None	rounds int to a given precision in decimal digits default 0 digits
None	iterates the given block int times passing in values from zero to int - 1
None	returns the value as a rational
None	iterates the given block passing in integer values from int up to and including limit
None	opens the file optionally seeks to the given offset then returns length bytes defaulting to the rest of the file
None	::copy_stream copies src to dst
None	synonym for io
None	executes the block for every line in the named i/o port where lines are separated by sep
None	returns a new io object a stream for the given integer file descriptor fd and mode string
None	with no associated block io
None	creates a pair of pipe endpoints connected to each other and returns them as a two-element array of io objects [ read_io write_io ]
None	runs the specified command as a subprocess the subprocess’s standard input and output will be connected to the returned io object
None	opens the file optionally seeks to the given offset then returns length bytes defaulting to the rest of the file
None	reads the entire file specified by name as individual lines and returns those lines in an array
None	calls select 2 system call
None	opens the given path returning the underlying file descriptor as a fixnum
None	try to convert obj into an io using #to_io method
None	opens the file optionally seeks to the given offset writes string then returns the length written
None	string output---writes obj to ios
None	announce an intention to access data from the current file in a specific pattern
None	sets auto-close flag
None	returns true if the underlying file descriptor of ios will be closed automatically at its finalization otherwise false
None	puts ios into binary mode
None	returns true if ios is binmode
None	closes ios and flushes any pending writes to the operating system
None	sets a close-on-exec flag
None	returns true if ios will be closed on exec
None	closes the read end of a duplex i/o stream
None	closes the write end of a duplex i/o stream
None	returns true if ios is completely closed for duplex streams both reader and writer false otherwise
None	executes the block for every line in ios where lines are separated by sep
None	calls the given block once for each byte 0
None	calls the given block once for each character in ios passing the character as an argument
None	passes the integer ordinal of each character in ios passing the codepoint as an argument
None	executes the block for every line in ios where lines are separated by sep
None	returns true if ios is at end of file that means there are no more data to read
None	returns true if ios is at end of file that means there are no more data to read
None	returns the encoding object that represents the encoding of the file
None	provides a mechanism for issuing low-level commands to control or query file-oriented i/o streams
None	immediately writes all buffered data in ios to disk
None	returns an integer representing the numeric file descriptor for ios
None	flushes any buffered data within ios to the underlying operating system note that this is ruby internal buffering only the os may buffer the data as well
None	immediately writes all buffered data in ios to disk
None	gets the next 8-bit byte 0
None	reads a one-character string from ios
None	reads the next “line” from the i/o stream lines are separated by sep
None	return a string describing this io object
None	returns the encoding of the internal string if conversion is specified
None	provides a mechanism for issuing low-level commands to control or query i/o devices
None	returns true if ios is associated with a terminal device tty false otherwise
None	returns the current line number in ios
None	returns the process id of a child process associated with ios
None	returns the current offset in bytes of ios
None	writes the given object s to ios
None	formats and writes to ios converting parameters under control of the format string
None	if obj is numeric write the character whose code is the least-significant byte of obj otherwise write the first byte of the string representation of obj to ios
None	writes the given objects to ios as with io#print
None	reads at most maxlen bytes from ios using the read 2 system call after o_nonblock is set for the underlying file descriptor
None	reads a byte as with io#getbyte but raises an eoferror on end of file
None	reads a one-character string from ios
None	reads a line as with io#gets but raises an eoferror on end of file
None	reads at most maxlen bytes from the i/o stream
None	reassociates ios with the i/o stream given in other_io or to a new stream opened on path
None	positions ios to the beginning of input resetting lineno to zero
None	if single argument is specified read string from io is tagged with the encoding specified
None	returns status information for ios as an object of type file :stat
None	returns the current “sync mode” of ios
None	reads maxlen bytes from ios using a low-level read and returns them as a string
None	writes the given string to ios using a low-level write
None	returns the current offset in bytes of ios
None	returns ios
None	returns true if ios is associated with a terminal device tty false otherwise
None	pushes back bytes passed as a parameter onto ios such that a subsequent buffered read will return it
None	pushes back one character passed as a parameter onto ios such that a subsequent buffered character read will return it
None	writes the given string to ios using the write 2 system call after o_nonblock is set for the underlying file descriptor
None	returns arg as an array
None	returns x+i*y syntax of string form see string#to_c
None	converts arg to a hash by calling arg
None	converts arg to a fixnum or bignum
None	returns x/y syntax of string form see string#to_r
None	returns arg as a string
None	returns the called name of the current method as a symbol
None	returns the canonicalized absolute path of the directory of the file from which this method is called
None	returns the name at the definition of the current method as a symbol
None	terminate execution immediately effectively by calling kernel
None	converts block to a proc object and therefore binds it at the point of call and registers it for execution when the program exits
None	registers filename to be loaded using kernel :require) the first time that module which may be a string or a symbol is accessed
None	returns filename to be loaded if name is registered as autoload
None	returns a binding object describing the variable and method bindings at the point of call
None	returns true if yield would execute a block in the current context
None	generates a continuation object which it passes to the associated block
None	returns the current execution stack—an array containing strings in the form file line or file line in method
None	returns the current execution stack—an array containing backtrace location objects
None	catch executes its block
None	equivalent to $_ = $_
None	equivalent to $_
None	evaluates the ruby expression s in string
None	replaces the current process by running the given external command
None	initiates the termination of the ruby script by raising the systemexit exception
None	exits the process immediately
None	with no arguments raises the exception in $! or raises a runtimeerror if $! is nil
None	creates a subprocess
None	returns the string resulting from applying format_string to any additional arguments
None	returns and assigns to $_) the next line from the list of files in argv or $*), or from standard input if no files are present on the command line
None	returns an array of the names of global variables
None	equivalent to $_
None	returns true if yield would execute a block in the current context
None	equivalent to proc
None	loads and executes the ruby program in the file filename
None	returns the names of the current local variables
None	repeatedly executes the block
None	for each object directly writes obj
None	prints each object in turn to $stdout
None	equivalent to or
None	equivalent to proc
None	refer to the documentation for io#putc for important information regarding multi-byte characters
None	equivalent to
None	with no arguments raises the exception in $! or raises a runtimeerror if $! is nil
None	if called without an argument or if max
None	equivalent to kernel :gets except readline raises eoferror at end of file
None	returns an array containing the lines returned by calling kernel
None	loads the given name returning true if successful and false if the feature is already loaded
None	ruby tries to load the library named string relative to the requiring file’s path
None	calls select 2 system call
None	establishes proc as the handler for tracing or disables tracing if the parameter is nil
None	suspends the current thread for duration seconds which may be any number including a float with fractional seconds
None	spawn executes specified command and return its pid
None	returns the string resulting from applying format_string to any additional arguments
None	equivalent to $_
None	syscall is essentially unsafe and unportable
None	executes command… in a subshell
None	uses the character cmd to perform various tests on file1 first table below or on file1 and file2 second table
None	transfers control to the end of the active catch block waiting for tag
None	controls tracing of assignments to global variables
None	specifies the handling of signals
None	removes tracing for the specified command on the given global variable and returns nil
None	displays each of the given messages followed by a record separator on stderr unless warnings have been disabled for example with the -w0 flag
None	returns the exit value associated with this localjumperror
None	the reason this block was terminated :break :redo :retry :next :return or :noreason
None	serializes obj and all descendant objects
None	returns the result of converting the serialized data in source into a ruby object possibly with associated subordinate objects
None	returns the result of converting the serialized data in source into a ruby object possibly with associated subordinate objects
None	returns the offset of the start of the nth element of the match array in the string
None	returns the array of captures equivalent to mtch
None	returns the offset of the character immediately following the end of the nth element of the match array in the string
None	equality—two matchdata are equal if their target strings patterns and matched positions are identical
None	produce a hash based on the target string regexp and matched positions of this matchdata
None	returns a printable version of mtch
None	returns the number of elements in the match array
None	returns a list of names of captures as an array of strings
None	returns a two-element array containing the beginning and ending offsets of the nth match
None	returns the portion of the original string after the current match
None	returns the portion of the original string before the current match
None	returns the regexp
None	returns the number of elements in the match array
None	returns a frozen copy of the string passed in to match
None	returns the array of matches
None	returns the entire matched string
None	uses each index to access the matching values returning an array of the corresponding matches
None	computes the arc cosine of x
None	computes the inverse hyperbolic cosine of x
None	computes the arc sine of x
None	computes the inverse hyperbolic sine of x
None	computes the arc tangent of x
None	computes the arc tangent given y and x
None	computes the inverse hyperbolic tangent of x
None	returns the cube root of x
None	computes the cosine of x expressed in radians
None	computes the hyperbolic cosine of x expressed in radians
None	calculates the error function of x
None	calculates the complementary error function of x
None	returns e**x
None	returns a two-element array containing the normalized fraction a float and exponent a fixnum of x
None	calculates the gamma function of x
None	returns sqrt(x**2 + y**2), the hypotenuse of a right-angled triangle with sides x and y
None	returns the value of fraction*(2**exponent)
None	calculates the logarithmic gamma of x and the sign of gamma of x
None	returns the logarithm of x
None	returns the base 10 logarithm of x
None	returns the base 2 logarithm of x
None	computes the sine of x expressed in radians
None	computes the hyperbolic sine of x expressed in radians
None	computes the tangent of x expressed in radians
None	computes the hyperbolic tangent of x expressed in radians
None	returns an indication of the number of arguments accepted by a method
None	invokes the meth with the specified arguments returning the method’s return value
None	returns a clone of this method
None	returns a curried proc based on the method
None	two method objects are equal if they are bound to the same object and refer to the same method definition and their owners are the same class or module
None	returns a hash value corresponding to the method object
None	returns the name of the underlying method
None	returns the name of the method
None	returns the original name of the method
None	returns the class or module that defines the method
None	returns the parameter information of this method
None	returns the bound receiver of the method object
None	returns the ruby source filename and line number containing this method or nil if this method was not defined in ruby
None	returns a method of superclass which would be called when super is used or nil if there is no method on superclass
None	returns a proc object corresponding to this method
None	returns the name of the underlying method
None	dissociates meth from its current receiver
None	in the first form returns an array of the names of all constants accessible from the point of call
None	returns the list of modules nested at the point of call
None	creates a new anonymous module
None	returns true if mod is a subclass of other
None	comparison—returns -1 0 +1 or nil depending on whether module includes other_module they are the same or if module is included by other_module
None	case equality—returns true if obj is an instance of mod or and instance of one of mod’s descendants
None	returns true if mod is an ancestor of other
None	returns true if mod is an ancestor of other or the two modules are the same
None	returns a list of modules included/prepended in mod including mod itself
None	registers filename to be loaded using kernel :require) the first time that module which may be a string or a symbol is accessed in the namespace of mod
None	returns filename to be loaded if name is registered as autoload in the namespace of mod
None	evaluates the string or block in the context of mod except that when a block is given constant/class variable lookup is not affected
None	evaluates the given block in the context of the class/module
None	returns true if the given class variable is defined in obj
None	returns the value of the given class variable or throws a nameerror exception
None	sets the class variable named by symbol to the given object
None	returns an array of the names of class variables in mod
None	says whether mod or its ancestors have a constant with the given name
None	checks for a constant with the given name in mod
None	invoked when a reference is made to an undefined constant in mod
None	sets the named constant to the given object returning that object
None	prevents further modifications to mod
None	invokes module
None	returns true if module is included in mod or one of mod s ancestors
None	returns the list of modules included in mod
None	returns an unboundmethod representing the given instance method in mod
None	returns an array containing the names of the public and protected instance methods in the receiver
None	returns true if the named method is defined by mod or its included modules and if mod is a class its ancestors
None	evaluates the string or block in the context of mod except that when a block is given constant/class variable lookup is not affected
None	evaluates the given block in the context of the class/module
None	returns the name of the module mod
None	invokes module
None	makes existing class methods private
None	makes a list of existing constants private
None	returns a list of the private instance methods defined in mod
None	returns true if the named private method is defined by _ mod_ or its included modules and if mod is a class its ancestors
None	returns a list of the protected instance methods defined in mod
None	returns true if the named protected method is defined by mod or its included modules and if mod is a class its ancestors
None	makes a list of existing class methods public
None	makes a list of existing constants public
None	similar to instance_method searches public method only
None	returns a list of the public instance methods defined in mod
None	returns true if the named public method is defined by mod or its included modules and if mod is a class its ancestors
None	removes the definition of the sym returning that constant s value
None	returns true if mod is a singleton class or false if it is an ordinary class or module
None	returns a string representing this module or class
None	makes new_name a new copy of the method old_name
None	when this module is included in another ruby calls append_features in this module passing it the receiving module in mod
None	defines a named attribute for this module where the name is symbol
None	creates instance variables and corresponding methods that return the value of each instance variable
None	creates an accessor method to allow assignment to the attribute symbol
None	defines an instance method in the receiver
None	extends the specified object by adding this module’s constants and methods which are added as singleton methods
None	the equivalent of included but for extended modules
None	callback invoked whenever the receiver is included in another module or class
None	invoked as a callback whenever an instance method is added to the receiver
None	invoked as a callback whenever an instance method is removed from the receiver
None	not documented
None	creates module functions for the named methods
None	when this module is prepended in another ruby calls prepend_features in this module passing it the receiving module in mod
None	the equivalent of included but for prepended modules
None	with no arguments sets the default visibility for subsequently defined methods to private
None	with no arguments sets the default visibility for subsequently defined methods to protected
None	with no arguments sets the default visibility for subsequently defined methods to public
None	refine klass in the receiver
None	removes the definition of the given constant returning that constant s previous value
None	removes the method identified by symbol from the current class
None	prevents the current class from responding to calls to the named method
None	import class refinements from module into the current class or module definition
None	construct a new nameerror exception
None	return a list of the local variable names defined where this nameerror exception was raised
None	return the name associated with this nameerror exception
None	return the receiver associated with this nameerror exception
None	always returns the string “nil”
None	only the object nil responds true to nil?
None	returns zero as a rational
None	always returns an empty array
None	returns zero as a complex
None	always returns zero
None	always returns an empty hash
None	always returns zero
None	returns zero as a rational
None	always returns the empty string
None	construct a nomethoderror exception for a method of the given name called with the given arguments
None	return the arguments passed in as the third parameter to the constructor
None	equivalent to num
None	returns zero if number equals other otherwise nil is returned if the two values are incomparable
None	returns the absolute value of num
None	returns square of self
None	returns 0 if the value is positive pi otherwise
None	returns 0 if the value is positive pi otherwise
None	returns the smallest possible integer that is greater than or equal to num
None	if a numeric is the same type as num returns an array containing numeric and num
None	returns self
None	returns self
None	returns the denominator always positive
None	uses / to perform division then converts the result to an integer
None	returns an array containing the quotient and modulus obtained by dividing num by numeric
None	returns true if num and numeric are the same type and have equal values
None	returns float division
None	returns the largest integer less than or equal to num
None	returns zero
None	returns zero
None	numerics are immutable values which should not be copied
None	returns true if num is an integer including fixnum and bignum
None	returns the absolute value of num
None	returns true if num is less than 0
None	returns self if num is not zero nil otherwise
None	returns the numerator
None	returns 0 if the value is positive pi otherwise
None	returns an array [num
None	returns true if num is greater than 0
None	returns most exact division rational for integers float for floats
None	returns self
None	returns true if num is a real number
None	returns an array num 0
None	returns an array num 0
None	rounds num to a given precision in decimal digits default 0 digits
None	trap attempts to add methods to numeric objects
None	invokes the given block with the sequence of numbers starting at num incremented by step defaulted to 1 on each call
None	returns the value as a complex
None	invokes the child class’s to_i method to convert num to an integer
None	returns num truncated to an integer
None	returns true if num has a zero value
None	returns 0 if obj and other are the same object or obj == other otherwise nil
None	returns the class of obj
None	produces a shallow copy of obj—the instance variables of obj are copied but not the objects they reference
None	defines a singleton method in the receiver
None	prints obj on the given port default $>)
None	produces a shallow copy of obj—the instance variables of obj are copied but not the objects they reference
None	creates a new enumerator which will enumerate by calling method on obj passing args if any
None	adds to obj the instance methods from each module given as a parameter
None	prevents further modifications to obj
None	returns the freeze status of obj
None	generates a fixnum hash value for this object
None	returns a string containing a human-readable representation of obj
None	returns true if obj is an instance of the given class
None	returns true if the given instance variable is defined in obj
None	returns the value of the given instance variable or nil if the instance variable is not set
None	sets the instance variable named by symbol to the given object thereby frustrating the efforts of the class’s author to attempt to provide proper encapsulation
None	returns an array of instance variable names for the receiver
None	returns true if class is the class of obj or if class is one of the superclasses of obj or modules included in obj
None	returns obj
None	returns true if class is the class of obj or if class is one of the superclasses of obj or modules included in obj
None	looks up the named method as a receiver in obj returning a method object or raising nameerror
None	returns a list of the names of public and protected methods of obj
None	only the object nil responds true to nil?
None	returns the list of private methods accessible to obj
None	returns the list of protected methods accessible to obj
None	similar to method searches public method only
None	returns the list of public methods accessible to obj
None	invokes the method identified by symbol passing it any arguments specified
None	removes the named instance variable from obj returning that variable s value
None	returns true if obj responds to the given method
None	do not use this directly
None	invokes the method identified by symbol passing it any arguments specified
None	returns the singleton class of obj
None	similar to method searches singleton method only
None	returns an array of the names of singleton methods for obj
None	mark the object as tainted
None	returns true if the object is tainted
None	creates a new enumerator which will enumerate by calling method on obj passing args if any
None	returns a string representing obj
None	removes the tainted mark from the object
None	retrieves a weakly referenced object with the given key
None	creates a weak reference from the given key to the given value
None	iterates over keys and objects in a weakly referenced object
None	iterates over keys and objects in a weakly referenced object
None	iterates over keys and objects in a weakly referenced object
None	iterates over keys and objects in a weakly referenced object
None	returns true if key is registered
None	returns true if key is registered
None	iterates over keys and objects in a weakly referenced object
None	returns true if key is registered
None	iterates over values and objects in a weakly referenced object
None	converts an object id to a reference to the object
None	counts all objects grouped by type
None	adds aproc as a finalizer to be called after obj was destroyed
None	calls the block once for each living nonimmediate object in this ruby process
None	removes all finalizers for obj
None	creates a new proc object bound to the current context
None	returns the number of mandatory arguments
None	returns the binding associated with prc
None	returns a curried proc
None	returns a hash value corresponding to proc body
None	returns true for a proc object for which argument handling is rigid
None	returns the parameter information of this proc
None	returns the ruby source filename and line number containing this proc or nil if this proc was not defined in ruby
None	part of the protocol for converting objects to proc objects
None	returns the unique identifier for this proc along with an indication of where the proc was defined
None	change the current process’s real and effective group id to that specified by group
None	get the group id by the name
None	set the effective group id and if possible the saved group id of the process to the given group
None	exchange real and effective group ids and return the new effective group id
None	returns true if the real and effective group ids of a process may be exchanged on the current platform
None	returns true if the current platform has saved group id functionality
None	switch the effective and real group ids of the current process
None	shift the bits in stat right num places
None	returns true if stat generated a coredump when it terminated
None	returns true if stat exited normally for example using an exit() call or finishing the program)
None	returns the least significant eight bits of the return code of stat
None	override the inspection method
None	returns the process id that this status object represents
None	returns true if stat terminated because of an uncaught signal
None	returns true if this process is stopped
None	returns the number of the signal that caused stat to stop or nil if self is not stopped
None	returns true if stat is successful false if not
None	returns the number of the signal that caused stat to terminate or nil if self was not terminated by an uncaught signal
None	returns the bits in stat as a fixnum
None	show pid and exit status as a string
None	returns true if the process was created as a result of an execve 2 system call which had either of the setuid or setgid bits set and extra privileges were given as a result or if it has changed any of its real effective or saved user or group ids since it began execution
None	set the effective group id of the calling process to group
None	set the effective user id of the calling process to user
None	set the group id of the current process to group
None	sets the group real and/or effective group ids of the current process to rid and eid respectively
None	sets the group real effective and saved user ids of the current process to rid eid and sid respectively
None	sets the user real effective and saved user ids of the current process to rid eid and sid respectively
None	sets the user real and/or effective user ids of the current process to rid and eid respectively
None	set the real group id of the calling process to group
None	set the real user id of the calling process to user
None	set the user id of the current process to user
None	change the current process’s real and effective user id to that specified by user
None	get the user id by the name
None	set the effective user id and if possible the saved user id of the process to the given user
None	exchange real and effective user ids and return the new effective user id
None	returns true if the real and effective user ids of a process may be exchanged on the current platform
None	returns true if the current platform has saved user id functionality
None	switch the effective and real user ids of the current process
None	terminate execution immediately effectively by calling kernel
None	returns the name of the script being executed
None	returns the time resolution returned by posix ::clock_getres() function
None	returns a time returned by posix ::clock_gettime() function
None	detach the process from controlling terminal and run in the background as system daemon
None	some operating systems retain the status of terminated child processes until the parent collects that status normally using some variant of wait())
None	returns the effective group id for this process
None	returns the effective user id for this process
None	sets the effective user id for this process
None	replaces the current process by running the given external command which can take one of the following forms command line string which is passed to the standard shell command name and one or more arguments no shell command name argv and zero or more arguments no shell in the first form the string is taken as a command line that is subject to shell expansion before being executed
None	initiates the termination of the ruby script by raising the systemexit exception
None	exits the process immediately
None	creates a subprocess
None	returns the process group id for the given process id
None	returns the process group id for this process
None	gets the scheduling priority for specified process process group or user
None	gets the resource limit of the process
None	returns the session id for the given process id
None	returns the real group id for this process
None	sets the group id for this process
None	get an array of the gids of groups in the supplemental group access list for this process
None	set the supplemental group access list to the given array of group ids
None	initializes the supplemental group access list by reading the system group database and using all groups of which the given user is a member
None	sends the given signal to the specified process id s if pid is positive
None	returns the maximum number of gids allowed in the supplemental group access list
None	sets the maximum number of gids allowed in the supplemental group access list
None	returns the process id of this process
None	returns the process id of the parent of this process
None	sets the process group id of pid 0 indicates this process to integer
None	equivalent to setpgid 0 0
None	sets the process title that appears on the ps 1 command
None	sets the resource limit of the process
None	establishes this process as a new session and process group leader with no controlling tty
None	spawn executes specified command and return its pid
None	returns a tms structure see process :tms) that contains user and system cpu times for this process and also for children processes
None	returns the real user id of this process
None	sets the user user id for this process
None	waits for a child process to exit returns its process id and sets $? to a process :status object containing information on that process
None	waits for a child process to exit see ::waitpid for exact semantics) and returns an array containing the process id and the exit status a process :status object) of that child
None	waits for all children returning an array of pid/status pairs where status is a process :status object)
None	waits for a child process to exit returns its process id and sets $? to a process :status object containing information on that process
None	waits for a child process to exit see ::waitpid for exact semantics) and returns an array containing the process id and the exit status a process :status object) of that child
None	creates a new queue instance
None	removes all objects from the queue
None	closes the queue
None	returns true if the queue is closed
None	returns true if the queue is empty
None	returns the length of the queue
None	returns the number of threads waiting on the queue
None	retrieves data from the queue
None	pushes the given object to the queue
None	creates a new prng using seed to set the initial state
None	returns an arbitrary seed value
None	returns a raw seed string using platform providing features
None	returns a random binary string containing size bytes
None	when max is an integer rand returns a random integer greater than or equal to zero and less than max
None	returns the seed value used to initialize the generator
None	constructs a range using the given begin and end
None	returns true if obj is an element of the range false otherwise
None	returns the object that defines the beginning of the range
None	by using binary search finds a value in range which meets the given condition in o log n where n is the size of the range
None	returns true if obj is between the begin and end of the range
None	iterates over the elements of range passing each in turn to the block
None	returns the object that defines the end of the range
None	returns true only if obj is a range has equivalent begin and end items by comparing them with eql?), and has the same exclude_end? setting as the range
None	returns true if the range excludes its end value
None	returns the first object in the range or an array of the first n elements
None	compute a hash-code for this range
None	returns true if obj is an element of the range false otherwise
None	convert this range object to a printable form using inspect to convert the begin and end objects
None	returns the last object in the range or an array of the last n elements
None	returns the maximum value in the range
None	returns true if obj is an element of the range false otherwise
None	returns the minimum value in the range
None	returns the number of elements in the range
None	iterates over the range passing each nth element to the block
None	convert this range object to a printable form using to_s to convert the begin and end objects)
None	performs exponentiation
None	performs addition
None	performs comparison and returns -1 0 or +1
None	returns the truncated value toward positive infinity
None	returns the denominator always positive
None	performs division and returns the value as a float
None	returns the truncated value toward negative infinity
None	returns the value as a string for inspection
None	returns the numerator
None	performs division
None	returns a simpler approximation of the value if the optional argument eps is given rat-|eps| <= result <= rat+|eps|), self otherwise
None	returns the truncated value toward the nearest integer 0
None	return the value as a float
None	returns the truncated value as an integer
None	returns self
None	returns the value as a string
None	returns the truncated value toward zero
None	escapes any characters that would have special meaning in a regular expression
None	the first form returns the matchdata object generated by the last successful pattern match
None	constructs a new regular expression from pattern which can be either a string or a regexp in which case that regexp’s options are propagated), and new options may not be specified a change as of ruby 1
None	escapes any characters that would have special meaning in a regular expression
None	try to convert obj into a regexp using to_regexp method
None	return a regexp object that is the union of the given patterns i
None	case equality—used in case statements
None	returns the value of the case-insensitive flag
None	returns the encoding object that represents the encoding of obj
None	equality—two regexps are equal if their patterns are identical they have the same character set code and their casefold? values are the same
None	returns false if rxp is applicable to a string with any ascii compatible encoding
None	produce a hash based on the text and options of this regular expression
None	produce a nicely formatted string-version of rxp
None	returns a matchdata object describing the match or nil if there was no match
None	returns a hash representing information about named captures of rxp
None	returns a list of names of captures as an array of strings
None	returns the set of bits corresponding to the options used when creating this regexp see regexp :new for details
None	returns the original string of the pattern
None	returns a string containing the regular expression and its options using the ?opts source) notation
None	match—matches rxp against the contents of $_
None	takes source a string of ruby code and compiles it to an instructionsequence
None	takes file a string with the location of a ruby source file reads parses and compiles the file and returns iseq the compiled instructionsequence with source location metadata set
None	returns a hash of default options used by the ruby iseq compiler
None	takes body a method or proc object and returns a string with the human readable instructions for body
None	load an iseq object from binary format string object created by #to_binary
None	load extra data embed into binary format string object
None	takes source a string of ruby code and compiles it to an instructionsequence
None	returns the instruction sequence containing the given proc or method
None	returns the absolute path of this instruction sequence
None	returns the base label of this instruction sequence
None	returns the instruction sequence as a string in human readable form
None	evaluates the instruction sequence and returns the result
None	returns the number of the first source line where the instruction sequence was loaded from
None	returns a human-readable string representation of this instruction sequence including the label and path
None	returns the label of this instruction sequence
None	experimental mri specific feature only available as c level api
None	experimental mri specific feature only available as c level api
None	returns the path of this instruction sequence
None	returns an array with 14 elements representing the instruction sequence with the following data a string identifying the data format
None	returns serialized iseq binary format data as a string object
None	returns a hash containing implementation-dependent counters inside the vm
None	returns a list of signal names mapped to the corresponding underlying signal numbers
None	convert signal number to signal name produces
None	specifies the handling of signals
None	construct a new signalexception object
None	returns a signal number
None	creates a fixed-length queue with a maximum size of max
None	removes all objects from the queue
None	similar to queue#close
None	returns the maximum size of the queue
None	sets the maximum size of the queue to the given number
None	returns the number of threads waiting on the queue
None	retrieves data from the queue
None	pushes object to the queue
None	returns the return value of the iterator
None	returns a new string object containing a copy of str
None	try to convert obj into a string using #to_str method
None	format—uses str as a format specification and returns the result of applying it to arg
None	concatenation—returns a new string containing other_str concatenated to str
None	append—concatenates the given object to str
None	comparison—returns -1 0 +1 or nil depending on whether string is less than equal to or greater than other_string
None	returns whether str == obj similar to object#==
None	returns true for a string which has only ascii characters
None	returns a copied string whose encoding is ascii-8bit
None	returns an array of bytes in str
None	returns the length of str in bytes
None	byte reference—if passed a single fixnum returns a substring of one byte at that position
None	returns a copy of str with the first character converted to uppercase and the remainder to lowercase
None	modifies str by converting the first character to uppercase and the remainder to lowercase
None	case-insensitive version of string#<=>
None	centers str in width
None	returns an array of characters in str
None	returns a new string with the given record separator removed from the end of str if present
None	modifies str in place as described for string#chomp returning str or nil if no modifications were made
None	returns a new string with the last character removed
None	processes str as for string#chop returning str or nil if str is the empty string
None	returns a one-character string at the beginning of the string
None	makes string empty
None	returns an array of the integer ordinals of the characters in str
None	append—concatenates the given object to str
None	each other_str parameter defines a set of characters to count
None	applies a one-way cryptographic hash to str by invoking the standard library function crypt 3 with the given salt string
None	returns a copy of str with all characters in the intersection of its arguments deleted
None	performs a delete operation in place returning str or nil if str was not modified
None	returns a copy of str with all uppercase letters replaced with their lowercase counterparts
None	downcases the contents of str returning nil if no changes were made
None	produces a version of str with all non-printing characters replaced by \nnn notation and all special characters escaped
None	passes each byte in str to the given block or returns an enumerator if no block is given
None	passes each character in str to the given block or returns an enumerator if no block is given
None	passes the integer ordinal of each character in str also known as a codepoint when applied to unicode strings to the given block
None	splits str using the supplied parameter as the record separator $/ by default), passing each substring in turn to the supplied block
None	returns true if str has a length of zero
None	the first form returns a copy of str transcoded to encoding encoding
None	the first form transcodes the contents of str from str
None	returns the encoding object that represents the encoding of obj
None	returns true if str ends with one of the suffixes given
None	two strings are equal if they have the same length and content
None	changes the encoding to encoding and returns self
None	returns the indexth byte as an integer
None	returns a copy of str with the all occurrences of pattern substituted for the second argument
None	performs the substitutions of string#gsub in place returning str or nil if no substitutions were performed
None	return a hash based on the string’s length content and encoding
None	treats leading characters from str as a string of hexadecimal digits with an optional sign and an optional 0x and returns the corresponding number
None	returns true if str contains the given string or character
None	returns the index of the first occurrence of the given substring or pattern regexp in str
None	replaces the contents and taintedness of str with the corresponding values in other_str
None	inserts other_str before the character at the given index modifying str
None	returns a printable version of str surrounded by quote marks with special characters escaped
None	returns the symbol corresponding to str creating the symbol if it did not previously exist
None	returns the character length of str
None	returns an array of lines in str split using the supplied record separator $/ by default)
None	if integer is greater than the length of str returns a new string of length integer with str left justified and padded with padstr otherwise returns str
None	returns a copy of str with leading whitespace removed
None	removes leading whitespace from str returning nil if no change was made
None	converts pattern to a regexp if it isn’t already one), then invokes its match method on str
None	returns the successor to str
None	equivalent to string#succ but modifies the receiver in place
None	treats leading characters of str as a string of octal digits with an optional sign and returns the corresponding number
None	return the integer ordinal of a one-character string
None	searches sep or pattern regexp in the string and returns the part before it the match and the part after it
None	prepend—prepend the given string to str
None	returns a new string with the characters from str in reverse order
None	reverses str in place
None	returns the index of the last occurrence of the given substring or pattern regexp in str
None	if integer is greater than the length of str returns a new string of length integer with str right justified and padded with padstr otherwise returns str
None	searches sep or pattern regexp in the string from the end of the string and returns the part before it the match and the part after it
None	returns a copy of str with trailing whitespace removed
None	removes trailing whitespace from str returning nil if no change was made
None	both forms iterate through str matching the pattern which may be a regexp or a string
None	if the string is invalid byte sequence then replace invalid bytes with given replacement character else returns self
None	if the string is invalid byte sequence then replace invalid bytes with given replacement character else returns self
None	modifies the indexth byte as integer
None	returns the character length of str
None	element reference — if passed a single index returns a substring of one character at that index
None	deletes the specified portion from str and returns the portion deleted
None	divides str into substrings based on a delimiter returning an array of these substrings
None	builds a set of characters from the other_str parameter s using the procedure described for string#count
None	squeezes str in place returning either str or nil if no changes were made
None	returns true if str starts with one of the prefixes given
None	returns a copy of str with leading and trailing whitespace removed
None	removes leading and trailing whitespace from str
None	returns a copy of str with the first occurrence of pattern replaced by the second argument
None	performs the same substitution as #sub in-place
None	returns the successor to str
None	equivalent to string#succ but modifies the receiver in place
None	returns a basic n-bit checksum of the characters in str where n is the optional fixnum parameter defaulting to 16
None	returns a copy of str with uppercase alphabetic characters converted to lowercase and lowercase characters converted to uppercase
None	equivalent to string#swapcase but modifies the receiver in place returning str or nil if no changes were made
None	returns a complex which denotes the string form
None	returns the result of interpreting leading characters in str as a floating point number
None	returns the result of interpreting leading characters in str as an integer base base between 2 and 36
None	returns a rational which denotes the string form
None	returns self
None	returns self
None	returns the symbol corresponding to str creating the symbol if it did not previously exist
None	returns a copy of str with the characters in from_str replaced by the corresponding characters in to_str
None	translates str in place using the same rules as string#tr
None	processes a copy of str as described under string#tr then removes duplicate characters in regions that were affected by the translation
None	performs string#tr_s processing on str in place returning str or nil if no changes were made
None	decodes str which may contain binary data according to the format string returning an array of each value extracted
None	returns a copy of str with all lowercase letters replaced with their uppercase counterparts
None	upcases the contents of str returning nil if no changes were made
None	iterates through successive values starting at str and ending at other_str inclusive passing each value in turn to the block
None	returns true for a string which encoded correctly
None	the first two forms are used to create a new struct subclass class_name that can contain a value for each member_name
None	extracts the nested value specified by the sequence of idx objects by calling dig at each step returning nil if any intermediate step is nil
None	yields the value of each struct member in order
None	yields the name and value of each struct member in order
None	hash equality---other and struct refer to the same hash key if they have the same struct subclass and have equal member values according to object#eql?)
None	returns a hash value based on this struct’s contents see object#hash)
None	describe the contents of this struct in a string
None	returns the number of struct members
None	returns the struct members as an array of symbols
None	yields each member value from the struct to the block and returns an array containing the member values from the struct for which the given block returns a true value equivalent to enumerable#select)
None	returns the number of struct members
None	returns the values for this struct as an array
None	returns a hash containing the names and values for the struct’s members
None	returns the values for this struct as an array
None	returns the struct member values for each selector as an array
None	returns an array of all the symbols currently in ruby s symbol table
None	compares symbol with other_symbol after calling to_s on each of the symbols
None	case-insensitive version of symbol#<=>
None	returns that sym is :“” or not
None	returns the encoding object that represents the encoding of sym
None	returns the name or string corresponding to sym
None	returns the representation of sym as a symbol literal
None	in general to_sym returns the symbol corresponding to an object
None	returns sym
None	returns sym
None	returns a proc object which respond to the given method by sym
None	returns the name or string corresponding to sym
None	in general to_sym returns the symbol corresponding to an object
None	return true if the receiver is a generic systemcallerror or if the error numbers self and other are the same
None	if errno corresponds to a known system error code constructs the appropriate errno class for that error otherwise constructs a generic systemcallerror object
None	return this systemcallerror’s error number
None	create a new systemexit exception with the given status and message
None	return the status value associated with this system exit
None	returns true if exiting successful false if not
None	creates a new mutex
None	attempts to grab the lock and waits if it isn’t available
None	returns true if this lock is currently held by some thread
None	returns true if this lock is currently held by current thread
None	releases the lock and sleeps timeout seconds if it is given and non-nil or forever
None	obtains a lock runs the block and releases the lock when the block completes
None	attempts to obtain the lock and returns immediately
None	releases the lock
None	returns the full file path of this frame
None	returns the base label of this frame
None	returns the label of this frame
None	returns the line number of this frame
None	returns the file name of this frame
None	returns a kernel#caller style string representing this frame
None	returns the thread debug level
None	returns the status of the global “abort on exception” condition
None	when set to true all threads will abort if an exception is raised
None	returns the currently executing thread
None	terminates the currently running thread and schedules another thread to be run
None	changes asynchronous interrupt timing
None	causes the given thread to exit see also ::exit
None	returns an array of thread objects for all threads that are either runnable or stopped
None	returns the main thread
None	creates a new thread executing the given block
None	give the thread scheduler a hint to pass execution to another thread
None	returns whether or not the asynchronous queue is empty
None	stops execution of the current thread putting it into a “sleep” state and schedules execution of another thread
None	adds proc as a handler for tracing
None	returns true if thr is running or sleeping
None	returns the current backtrace of the target thread
None	returns the execution stack for the target thread—an array containing backtrace location objects
None	returns the threadgroup which contains the given thread or returns nil if thr is not a member of any group
None	dump the name id and status of thr to a string
None	the calling thread will suspend execution and run this thr
None	returns true if the given string or symbol exists as a fiber-local variable
None	returns an array of the names of the fiber-local variables as symbols
None	show the name of the thread
None	set given name to the ruby thread
None	returns the priority of thr
None	sets the priority of thr to integer
None	raises an exception from the given thread
None	wakes up thr making it eligible for scheduling
None	returns the safe level in effect for thr
None	establishes proc on thr as the handler for tracing or disables tracing if the parameter is nil
None	returns the status of thr
None	returns true if thr is dead or sleeping
None	terminates thr and schedules another thread to be run
None	returns true if the given string or symbol exists as a thread-local variable
None	returns the value of a thread local variable that has been set
None	sets a thread local with key to value
None	returns an array of the names of the thread-local variables as symbols
None	waits for thr to complete using join and returns its value or raises the exception which terminated the thread
None	marks a given thread as eligible for scheduling however it may still remain blocked on i/o
None	adds the given thread to this group removing it from any other group to which it may have previously been a member
None	prevents threads from being added to or removed from the receiving threadgroup
None	returns true if the thgrp is enclosed
None	returns an array of all existing thread objects that belong to this group
None	creates a new time object with the value given by time the given number of seconds_with_frac or seconds and microseconds_with_frac since the epoch
None	creates a time object based on given values interpreted as utc gmt
None	returns a time object
None	creates a new time object for the current time
None	creates a time object based on given values interpreted as utc gmt
None	addition — adds some number of seconds possibly fractional to time and returns that value as a new time object
None	comparison—compares time with other_time
None	returns a canonical string representation of time
None	returns a canonical string representation of time
None	returns the day of the month 1
None	returns true if time occurs during daylight saving time in its time zone
None	returns true if time and other_time are both time objects with the same seconds and fractional seconds
None	returns true if time represents friday
None	returns a new time object representing time in utc
None	returns a new time object representing time in local time using the local time zone in effect for this process
None	returns a new time object representing time in utc
None	returns true if time represents a time in utc gmt
None	returns the offset in seconds between the timezone of time and utc
None	converts time to utc gmt modifying the receiver
None	returns the offset in seconds between the timezone of time and utc
None	returns a hash code for this time object
None	returns the hour of the day 0
None	returns a string representing time
None	returns true if time occurs during daylight saving time in its time zone
None	converts time to local time using the local time zone in effect for this process modifying the receiver
None	returns the day of the month 1
None	returns the minute of the hour 0
None	returns the month of the year 1
None	returns true if time represents monday
None	returns the month of the year 1
None	returns the number of nanoseconds for time
None	rounds sub seconds to a given precision in decimal digits 0 digits by default
None	returns true if time represents saturday
None	returns the second of the minute 0
None	formats time according to the directives in the given format string
None	returns the fraction for time
None	returns a new time object one second later than time
None	returns true if time represents sunday
None	returns true if time represents thursday
None	returns a ten-element array of values for time see the individual methods for an explanation of the valid ranges of each value
None	returns the value of time as a floating point number of seconds since the epoch
None	returns the value of time as an integer number of seconds since the epoch
None	returns the value of time as a rational number of seconds since the epoch
None	returns a string representing time
None	returns true if time represents tuesday
None	returns the number of nanoseconds for time
None	returns the value of time as an integer number of seconds since the epoch
None	returns the number of microseconds for time
None	returns the number of microseconds for time
None	returns true if time represents a time in utc gmt
None	returns the offset in seconds between the timezone of time and utc
None	returns an integer representing the day of the week 0
None	returns true if time represents wednesday
None	returns an integer representing the day of the year 1
None	returns the year for time including the century
None	returns the name of the time zone used for time
None	returns a new tracepoint object not enabled by default
None	returns internal information of tracepoint
None	a convenience method for ::new that activates the trace automatically
None	return the generated binding object from event
None	return class or module of the method being called
None	deactivates the trace return true if trace was enabled
None	activates the trace return true if trace was enabled
None	the current status of the trace
None	type of event see events at tracepoint for more information
None	return a string containing a human-readable tracepoint status
None	line number of the event
None	return the name of the method being called
None	path of the file being run
None	value from exception raised on the :raise event
None	return value from :return c_return and b_return event
None	the string representation of true is “true”
None	returns an indication of the number of arguments accepted by a method
None	bind umeth to obj
None	returns a clone of this method
None	two method objects are equal if they are bound to the same object and refer to the same method definition and their owners are the same class or module
None	returns a hash value corresponding to the method object
None	returns the name of the underlying method
None	returns the name of the method
None	returns the original name of the method
None	returns the class or module that defines the method
None	returns the parameter information of this method
None	returns the ruby source filename and line number containing this method or nil if this method was not defined in ruby
None	returns a method of superclass which would be called when super is used or nil if there is no method on superclass
None	returns the name of the underlying method
None	document-class uncaughtthrowerror raised when throw is called with a tag which does not have corresponding catch block
None	return the tag object which was called for
None	returns formatted message with the inspected tag
None	return the return value which was called for
