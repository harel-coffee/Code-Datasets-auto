AppendIterator void get Array Iterator	возвращает класс итератора массива arrayiterator
AppendIterator scalar key	текущий ключ если он является действительным или null в противном случае
AppendIterator scalar key	возвращает текущий ключ
AppendIterator void next	переходит к следующему элементу
AppendIterator void rewind	перематывает итератор
ArrayAccess offset Exists $offset	смещение ключ для проверки
ArrayAccess boolean offset Exists	возвращает true в случае успешного завершения или false в случае возникновения ошибки
ArrayAccess boolean offset Exists mixed $offset	определяет существует ли заданное смещение ключ
ArrayAccess offset Get $offset	смещение ключ для возврата
ArrayAccess mixed offset Get	может возвращать значение любого типа
ArrayAccess mixed offset Get mixed $offset	возвращает заданное смещение ключ
ArrayIterator append $value	значение которое нужно добавить
ArrayIterator void append mixed $value	добавить элемент
ArrayIterator void asort	сортирует массив по значениям
ArrayIterator construct $array	массив или объект который может быть итерирован
ArrayIterator construct $flags	флаги для управления поведением объекта arrayiterator
ArrayIterator mixed construct	arrayiterator object
ArrayIterator mixed construct mixed $array int $flags	создает arrayiterator
ArrayIterator array get Array Copy	копия array или массив публичных свойств если arrayiterator указывает на object
ArrayIterator array get Array Copy	возвращает копию массива
ArrayIterator mixed key	ключ текущего элемента в массиве array
ArrayIterator mixed key	возвращает ключ текущего элемента массива
ArrayIterator void natcasesort	сортирует массив натурально с учетом регистра
ArrayIterator void natsort	сортирует массив натурально
ArrayIterator void next	перемещает указатель за следующую запись
ArrayIterator offset Exists $index	проверяемое смещение
ArrayIterator void offset Exists string $index	проверяет существует ли смещение
ArrayIterator offset Get $index	смещение из которого необходимо получить значения
ArrayIterator mixed offset Get	значение по смещению index
ArrayIterator mixed offset Get string $index	получает значение для смещения
ArrayIterator void rewind	перемещает указатель в начало массива
ArrayIterator string serialize	сериализованный arrayiterator
ArrayIterator string serialize	сериализует массив
ArrayIterator set Flags $flags	следующие битовые маски: 0 = свойства объекта имеют свои нормальные функции при доступе в виде списка var_dump foreach etc
ArrayIterator void set Flags string $flags	устанавливает флаги управляющие поведением
ArrayIterator uasort $cmp_function	функция сравнения элементов используемая для сортировки
ArrayIterator void uasort string $cmp_function	сортировка определенная пользователем
ArrayIterator uksort $cmp_function	функция сравнения элементов используемая для сортировки
ArrayIterator void uksort string $cmp_function	сортировка определенная пользователем
ArrayIterator bool valid	проверяет содержит ли массив еще записи
ArrayObject append $value	значение которое должно быть добавлено
ArrayObject void append mixed $value	добавляет значение в конец массива
ArrayObject void asort	сортирует записи по значению
ArrayObject int count	количество публичных свойств arrayobject
ArrayObject int count	возвращает количество публичных свойств arrayobject
ArrayObject exchange Array $input	новый массив array или объект object для замены текущего массива
ArrayObject array exchange Array	возвращает старый массив array
ArrayObject array exchange Array mixed $input	заменяет текущий массив на другой
ArrayObject int get Flags	возвращает флаги поведения arrayobject
ArrayObject int get Flags	получает флаги поведения
ArrayObject string get Iterator Class	возвращает имя класса итератора массива который будет использоваться при итерации по этому объекту
ArrayObject string get Iterator Class	возвращает имя класса итератора для arrayobject
ArrayObject void ksort	сортирует записи по ключам
ArrayObject void natcasesort	сортирует массив используя регистронезависимый алгоритм natural order
ArrayObject void natsort	сортирует массив используя алгоритм natural order
ArrayObject offset Set $newval	новое значение для index
ArrayObject offset Set $index	индекс для установки значения
ArrayObject void offset Set mixed $index mixed $newval	устанавливает новое значение по указанному индексу
ArrayObject string serialize	сериализованное представление arrayobject
ArrayObject string serialize	сериализует arrayobject
ArrayObject set Flags $flags	новое поведение arrayobject
ArrayObject void set Flags int $flags	устанавливает флаги поведения
ArrayObject set Iterator Class $iterator_class	имя класса итератора массива который будет использоваться при итерации по этому объекту
ArrayObject void set Iterator Class string $iterator_class	устанавливает имя класса итератора для arrayobject
ArrayObject unserialize $serialized	сериализованный объект arrayobject
ArrayObject void unserialize string $serialized	десериализует arrayobject
CachingIterator array get Cache	массив array содержащий элементы кэша
CachingIterator array get Cache	получение содержимого кэша
Closure bind $closure	анонимная функция для привязывания к объекту
Closure bind $newscope	область видимости класса с которой ассоциируется замыкание или static для сохранения текущей области видимости
Closure bind $newthis	объект к которому будет привязана переданная функция или null для отсоединения функции от ее текущего объекта
Closure Closure bind	возвращает новый объект closure или false в случае возникновения ошибки
Closure Closure bind Closure $closure object $newthis mixed $newscope	дублирует замыкание с указанием связанного объекта и области видимости класса
Closure bind To $newscope	область видимости класса с которой ассоциируется замыкание или static для сохранения текущей области видимости
Closure bind To $newthis	объект к которому будет привязана переданная функция или null для отсоединения функции от ее текущего объекта
Closure Closure bind To	возвращает новый объект closure или false в случае возникновения ошибки
Closure Closure bind To object $newthis mixed $newscope	дублирует замыкание с указанием связанного объекта и области видимости класса
Countable int count	пользовательское значение типа integer
Countable int count	количество элементов объекта
DateInterval create From Date String $time	дата состоящая из относительных временных фрагментов
DateInterval DateInterval create From Date String	возвращает новый объект класса dateinterval
DateInterval DateInterval create From Date String string $time	создает объект класса dateinterval используя данные из переданной строки
DateInterval format $format	в строке format распознаются следующие символы
DateInterval string format	возвращает отформатированный интервал
DateInterval string format string $format	форматирует интервал
DateTimeImmutable array get Last Errors	возвращает предупреждения и ошибки
DateTimeImmutable modify $object	только для процедурного стиля: объект datetime возвращаемый date_create()
DateTimeImmutable modify $modify	строка даты / времени
DateTimeImmutable DateTimeImmutable modify	возвращает новый объект или false в случае возникновения ошибки
DateTimeImmutable DateTimeImmutable modify string $modify	создает новый объект с измененной временной меткой
DateTimeImmutable DateTimeImmutable set state array $array	обработчик __set_state
DateTimeImmutable DateTimeImmutable set ISODate int $year int $week int $day	устанавливает дату в формате iso
DateTimeImmutable DateTimeImmutable set Time int $hour int $minute int $second	устанавливает время
DateTimeImmutable DateTimeImmutable set Timestamp int $unixtimestamp	устанавливает дату и время по переданной временной метке unix
DateTimeImmutable DateTimeImmutable set Timezone DateTimeZone $timezone	устанавливает временную зону
DateTimeImmutable DateTimeImmutable sub DateInterval $interval	вычитает переданное количество дней месяцев лет часов минут и секунд
DirectoryIterator int get ATime	возвращает время когда в последний раз был осуществлен доступ к указанному файлу
DirectoryIterator int get ATime	возвращает время последнего доступа к текущему элементу directoryiterator
DirectoryIterator int get CTime	возвращает время последнего изменения файла в формате отметки времени unix
DirectoryIterator int get CTime	возвращает время последнего изменения i-узла текущего элемента directoryiterator
DirectoryIterator string get Extension	возвращает строку string содержащую расширение файла или пустую строку string если файл его не имеет
DirectoryIterator string get Extension	возвращает расширение файла
DirectoryIterator string get Filename	возвращает имя файл текущего элемента directoryiterator
DirectoryIterator string get Filename	возвращает имя файла текущего элемента directoryiterator
DirectoryIterator int get Inode	возвращает inode файла
DirectoryIterator int get Inode	возвращает inode текущего элемента directoryiterator
DirectoryIterator int get MTime	время последнего изменения файла в формате отметки времени unix
DirectoryIterator int get MTime	возвращает время последнего изменения текущего элемента directoryiterator
DirectoryIterator int get Owner	владелец файла в числовом формате
DirectoryIterator int get Owner	возвращает идентификатор владельца текущего элемента directoryiterator
DirectoryIterator string get Path	возвращает путь до файла без имени файла и завершающего слеша
DirectoryIterator string get Path	возвращает путь к текущему элементу directoryiterator без имени файла
DirectoryIterator string get Pathname	возвращает путь и имя файла текущего файла
DirectoryIterator string get Pathname	возвращает путь и имя файла текущего элемента directoryiterator
DirectoryIterator int get Perms	возвращает набор прав для текущего файла в виде десятичного числа integer
DirectoryIterator int get Perms	возвращает набор прав для текущего элемента directoryiterator item
DirectoryIterator int get Size	возвращает размер файла в байтах
DirectoryIterator int get Size	возвращает размер текущего элемента directoryiterator
DirectoryIterator string get Type	возвращает строку string содержащую тип файла
DirectoryIterator string get Type	определяет тип текущего элемента directoryiterator
DirectoryIterator bool is Dir	возвращает true если элемент является директорией иначе false
DirectoryIterator bool is Dir	определяет является ли текущий элемент directoryiterator директорией
DirectoryIterator bool is Dot	возвращает true если элемент является
DirectoryIterator bool is Dot	определяет является ли текущий элемент directoryiterator '
DirectoryIterator bool is Executable	возвращает true если файл является исполняемым иначе false
DirectoryIterator bool is Executable	определяет является ли текущий элемент directoryiterator исполняемым
DirectoryIterator bool is File	возвращает true если файл существует и является обычным файлом т
DirectoryIterator bool is File	определяет является ли текущий элемент directoryiterator обычным файлом
DirectoryIterator bool is Link	возвращает true если элемент является символической ссылкой иначе false
DirectoryIterator bool is Link	определяет является ли текущий элемент directoryiterator символической ссылкой
DirectoryIterator bool is Readable	возвращает true если файл доступен для чтения иначе false
DirectoryIterator bool is Readable	определяет доступен ли текущий элемент directoryiterator для чтения
DirectoryIterator bool is Writable	возвращает true если файл или директория доступны для записи иначе false
DirectoryIterator bool is Writable	определяет доступен ли текущий элемент directoryiterator для записи
DirectoryIterator string key	ключ текущего элемента directoryiterator
DirectoryIterator string key	возвращает ключ текущего элемента directoryiterator
DirectoryIterator void next	перемещает указатель на следующий элемент directoryiterator
DirectoryIterator seek $position	номер позиции для перемещения
DirectoryIterator void seek int $position	перемещает указатель directoryiterator на определённую позицию
DirectoryIterator string to String	возвращает имя файла текущего элемента directoryiterator
DirectoryIterator string to String	возвращает имя файла в виде строки
DirectoryIterator bool valid	возвращает true если элемент является допустимым иначе false
DirectoryIterator bool valid	проверяет является ли текущий элемент directoryiterator допустимым файлом
DOMCharacterData append Data $data	добавляемая строка
DOMCharacterData void append Data string $data	добавляет строку в конец символьных данных узла
DOMCharacterData delete Data $count	количество удаляемых символов
DOMCharacterData delete Data $offset	позиция с которой будут удаляться символы
DOMCharacterData void delete Data int $offset int $count	удаление диапазона символов из узла
DOMCharacterData insert Data $offset	отступ в символах начиная с которого будет вставлена строка
DOMCharacterData insert Data $data	вставляемая строка
DOMCharacterData void insert Data int $offset string $data	вставляет строку после заданного отступа из 16-битных блоков
DOMCharacterData substring Data $offset	начало извлекаемой подстроки
DOMCharacterData substring Data $count	количество извлекаемых символов
DOMCharacterData string substring Data	запрашиваемая подстрока
DOMCharacterData string substring Data int $offset int $count	извлекает определенный диапазон данных из узла
DOMComment construct $value	значение комментария
DOMComment string construct string $value	создает новый экземпляр класса domcomment
DOMDocument construct $version	номер версии документа как часть xml объявления
DOMDocument construct $encoding	кодировка документа как часть xml объявления
DOMDocument string construct string $version string $encoding	создание нового domdocument объекта
DOMDocument create Attribute $name	имя атрибута
DOMDocument DOMAttr create Attribute	новый объект domattr либо false в случае возникновения ошибки
DOMDocument DOMAttr create Attribute string $name	создает новый атрибут
DOMDocument create Attribute NS $qualifiedName	имя и префикс атрибута в виде prefix:tagname
DOMDocument create Attribute NS $namespaceURI	uri пространства имен
DOMDocument DOMAttr create Attribute NS	новый экземпляр класса domattr либо false в случае ошибки
DOMDocument DOMAttr create Attribute NS string $namespaceURI string $qualifiedName	создает новый узел-атрибут с соответствующим ему пространством имен
DOMDocument create CDATASection $data	содержимое cdata
DOMDocument DOMCDATASection create CDATASection	новый объект класса domcdatasection либо false в случае ошибки
DOMDocument DOMCDATASection create CDATASection string $data	создает новый cdata узел
DOMDocument create Comment $data	содержимое комментария
DOMDocument DOMComment create Comment	новый объект класса domcomment либо false в случае ошибки
DOMDocument DOMComment create Comment string $data	создает новый узел-комментарий
DOMDocument create Element NS $qualifiedName	сформированное имя элемента в виде prefix:tagname
DOMDocument create Element NS $namespaceURI	uri пространства имен
DOMDocument create Element NS $value	значение элемента
DOMDocument DOMElement create Element NS	новый объект класса domelement либо false в случае ошибки
DOMDocument DOMElement create Element NS string $namespaceURI string $qualifiedName string $value	создание нового узла-элемента с соответствующим пространством имен
DOMDocument create Entity Reference $name	содержимое ссылки на сущность то есть ссылка на сущность без & в начале и ; в конце
DOMDocument DOMEntityReference create Entity Reference	новый объект класса domentityreference либо false в случае ошибки
DOMDocument DOMEntityReference create Entity Reference string $name	создание нового узла-ссылки на сущность
DOMDocument create Text Node $content	содержимое узла
DOMDocument DOMText create Text Node	новый объект класса domtext либо false в случае ошибки
DOMDocument DOMText create Text Node string $content	создает новый текстовый узел
DOMDocument get Element By Id $elementId	уникальный id элемента
DOMDocument DOMElement get Element By Id	возвращает объект domelement либо null если элемент не найден
DOMDocument DOMElement get Element By Id string $elementId	ищет элемент с заданным id
DOMDocument get Elements By Tag Name $name	локальное имя тэга без указания пространства имен по которому будет проводиться поиск
DOMDocument DOMNodeList get Elements By Tag Name	новый объект класса domnodelist содержащий все найденные элементы
DOMDocument DOMNodeList get Elements By Tag Name string $name	ищет все элементы с заданным локальным именем
DOMDocument get Elements By Tag Name NS $localName	локальное имя искомых элементов
DOMDocument get Elements By Tag Name NS $namespaceURI	uri пространства имен
DOMDocument DOMNodeList get Elements By Tag Name NS	новый объект класса domnodelist содержащий все найденные элементы
DOMDocument DOMNodeList get Elements By Tag Name NS string $namespaceURI string $localName	ищет элементы с заданным именем в определенном пространстве имен
DOMDocument import Node $importedNode	импортируемый узел
DOMDocument import Node $deep	если установлен в true этот метод рекурсивно импортирует поддерево узла importednode
DOMDocument DOMNode import Node	скопированный узел или false если он не может быть скопирован
DOMDocument DOMNode import Node DOMNode $importedNode bool $deep	импорт узла в текущий документ
DOMDocument load $options	побитовое или констант настройки libxml
DOMDocument load $filename	путь к xml документу
DOMDocument mixed load	возвращает true в случае успешного завершения или false в случае возникновения ошибки
DOMDocument mixed load string $filename int $options	загрузка xml из файла
DOMDocument load HTML $source	html строка
DOMDocument load HTML $options	начиная с версии php 5
DOMDocument bool load HTML	возвращает true в случае успешного завершения или false в случае возникновения ошибки
DOMDocument bool load HTML string $source int $options	загрузка html из строки
DOMDocument load HTMLFile $options	начиная с версии php 5
DOMDocument load HTMLFile $filename	путь к html файлу
DOMDocument bool load HTMLFile	возвращает true в случае успешного завершения или false в случае возникновения ошибки
DOMDocument bool load HTMLFile string $filename int $options	загрузка html из файла
DOMDocument load XML $options	побитовое или констант настройки libxml
DOMDocument load XML $source	содержащая xml строка
DOMDocument mixed load XML	возвращает true в случае успешного завершения или false в случае возникновения ошибки
DOMDocument mixed load XML string $source int $options	загрузка xml из строки
DOMDocument void normalize Document	нормализует документ
DOMDocument register Node Class $baseclass	dom класс который будет расширен
DOMDocument register Node Class $extendedclass	имя расширенного класса
DOMDocument bool register Node Class	возвращает true в случае успешного завершения или false в случае возникновения ошибки
DOMDocument bool register Node Class string $baseclass string $extendedclass	регистрация расширенного класса используемого для создания базового типа узлов
DOMDocument relax NGValidate $filename	rng файл
DOMDocument bool relax NGValidate	возвращает true в случае успешного завершения или false в случае возникновения ошибки
DOMDocument bool relax NGValidate string $filename	производит проверку документа на правильность построения посредством relaxng
DOMDocument save HTMLFile $filename	путь к файлу в который сохранится html документ
DOMDocument int save HTMLFile	возвращает число записанных байт или false в случае ошибки
DOMDocument int save HTMLFile string $filename	сохраняет документ из внутреннего представления в файл используя html форматирование
DOMDocument save XML $node	используйте этот аргумент для вывода только определенного узла без xml объявления вместо вывода документа целиком
DOMDocument save XML $options	дополнительные настройки
DOMDocument string save XML	возвращает xml или false в случае ошибки
DOMDocument string save XML DOMNode $node int $options	сохраняет xml дерево из внутреннего представления в виде строки
DOMDocument schema Validate $flags	битовая маска настроечных флагов валидации схемы libxml
DOMDocument schema Validate $filename	путь к файлу со схемой
DOMDocument bool schema Validate	возвращает true в случае успешного завершения или false в случае возникновения ошибки
DOMDocument bool schema Validate string $filename int $flags	проверяет действительность документа основываясь на заданной схеме
DOMDocument bool validate	возвращает true в случае успешного завершения или false в случае возникновения ошибки
DOMDocument bool validate	проверяет документ на соответствие его dtd
DOMDocument xinclude $options	параметры libxml
DOMDocument int xinclude	возвращает количество блоков xinclude в документе -1 если при обработке произошла ошибка либо false если не было произведено ни одной замены
DOMDocument int xinclude int $options	проводит вставку xinclude разделов в объектах domdocument
DOMElement construct $name	имя тэга создаваемого элемента
DOMElement construct $value	значение элемента
DOMElement construct $namespaceURI	пространство имен uri передается для создания элемента со отдельным пространством имен
DOMElement string construct string $name string $value string $namespaceURI	создание нового объекта класса domelement
DOMElement get Attribute $name	имя атрибута
DOMElement string get Attribute	значение атрибута или пустое значение если атрибут с указанным именем name не найден
DOMElement string get Attribute string $name	возвращает значение атрибута
DOMElement get Attribute Node $name	имя атрибута
DOMElement DOMAttr get Attribute Node	узел атрибута
DOMElement DOMAttr get Attribute Node string $name	возвращает узел атрибута
DOMElement get Attribute Node NS $localName	локальное имя
DOMElement get Attribute Node NS $namespaceURI	uri пространства имен
DOMElement DOMAttr get Attribute Node NS	узел атрибута
DOMElement DOMAttr get Attribute Node NS string $namespaceURI string $localName	возвращает узел атрибута
DOMElement get Attribute NS $localName	локальное имя
DOMElement get Attribute NS $namespaceURI	uri пространства имен
DOMElement string get Attribute NS	значение атрибута либо пустая строка если атрибутов с заданным локальным именем localname в пространстве имен namespaceuri не найдено
DOMElement string get Attribute NS string $namespaceURI string $localName	возвращает значение атрибута
DOMElement get Elements By Tag Name $name	имя тэга
DOMElement DOMNodeList get Elements By Tag Name	эта функция возвращает новый объект класса domnodelist - список всех подходящих элементов
DOMElement DOMNodeList get Elements By Tag Name string $name	возвращает элементы по имени тэга
DOMElement has Attribute $name	имя атрибута
DOMElement bool has Attribute	возвращает true в случае успешного завершения или false в случае возникновения ошибки
DOMElement bool has Attribute string $name	проверяет наличие атрибута
DOMElement has Attribute NS $localName	локальное имя
DOMElement has Attribute NS $namespaceURI	uri пространства имен
DOMElement bool has Attribute NS	возвращает true в случае успешного завершения или false в случае возникновения ошибки
DOMElement bool has Attribute NS string $namespaceURI string $localName	проверяет существует ли заданный атрибут
DOMElement remove Attribute $name	имя атрибута
DOMElement bool remove Attribute	возвращает true в случае успешного завершения или false в случае возникновения ошибки
DOMElement bool remove Attribute string $name	удаляет атрибут
DOMElement set Attribute $name	имя атрибута
DOMElement set Attribute $value	значение атрибута
DOMElement DOMAttr set Attribute	новый объект класса domattr или false в случае ошибки
DOMElement DOMAttr set Attribute string $name string $value	устанавливает значение атрибута
DOMElement set Attribute Node $attr	узел атрибута
DOMElement DOMAttr set Attribute Node	возвращает старый узел если атрибут был заменен или null
DOMElement DOMAttr set Attribute Node DOMAttr $attr	добавляет новый узел атрибута к элементу
DOMElement set Attribute NS $value	значение атрибута
DOMElement set Attribute NS $namespaceURI	uri пространства имен
DOMElement set Attribute NS $qualifiedName	стандартизованное имя атрибута в виде prefix:tagname
DOMElement void set Attribute NS string $namespaceURI string $qualifiedName string $value	добавляет новый атрибут
DOMElement set Id Attribute $name	имя атрибута
DOMElement set Id Attribute $isId	установите значение в true если требуется сделать name идентифицирующим в противном случае ставьте false
DOMElement void set Id Attribute string $name bool $isId	объявляет атрибут с заданным именем ключевым атрибутом
DOMElement set Id Attribute Node $attr	узел атрибута
DOMElement set Id Attribute Node $isId	установите значение в true если требуется сделать name идентифицирующим в противном случае ставьте false
DOMElement void set Id Attribute Node DOMAttr $attr bool $isId	объявляет заданный узел атрибута ключевым
DOMElement set Id Attribute NS $localName	локальное имя атрибута в виде prefix:tagname
DOMElement set Id Attribute NS $isId	установите значение в true если требуется сделать name идентифицирующим в противном случае ставьте false
DOMElement set Id Attribute NS $namespaceURI	uri пространства имен атрибута
DOMElement void set Id Attribute NS string $namespaceURI string $localName bool $isId	объявляет атрибут с заданным локальным именем и uri пространства имен идентифицирующим
DOMEntityReference construct $name	имя ссылки на сущность
DOMEntityReference string construct string $name	создает новый объект класса domentityreference
DOMImplementation create Document $doctype	тип элемента document или null
DOMImplementation create Document $qualifiedName	имя элемента document
DOMImplementation create Document $namespaceURI	uri пространства имен элемента document
DOMImplementation DOMDocument create Document	новый объект класса domdocument
DOMImplementation DOMDocument create Document string $namespaceURI string $qualifiedName DOMDocumentType $doctype	создает объект класса domdocument заданного типа с элементом document
DOMImplementation create Document Type $publicId	общедоступный идентификатор внешнего подмножества
DOMImplementation create Document Type $qualifiedName	стандартизованное имя типа документа для создания
DOMImplementation create Document Type $systemId	системный идентификатор внешнего подмножества
DOMImplementation DOMDocumentType create Document Type	новый объект класса domdocumenttype с атрибутом ownerdocument установленным в null
DOMImplementation DOMDocumentType create Document Type string $qualifiedName string $publicId string $systemId	создает пустой объект класса domdocumenttype
DOMImplementation has Feature $version	номер версии тестируемой возможности feature
DOMImplementation has Feature $feature	тестируемая возможность
DOMImplementation bool has Feature	возвращает true в случае успешного завершения или false в случае возникновения ошибки
DOMImplementation bool has Feature string $feature string $version	тестирует реализацию специфичных возможностей объекта domimplementation
DOMNode string get Node Path	возвращает строку string содержащую xpath либо null в случае ошибки
DOMNode string get Node Path	получение xpath пути к узлу
DOMNode bool has Attributes	возвращает true в случае успешного завершения или false в случае возникновения ошибки
DOMNode bool has Attributes	проверяет содержит ли данный узел атрибуты
DOMNode bool has Child Nodes	возвращает true в случае успешного завершения или false в случае возникновения ошибки
DOMNode bool has Child Nodes	проверяет содержит ли данный узел потомков
DOMNode insert Before $newnode	новый узел
DOMNode insert Before $refnode	опорный узел
DOMNode DOMNode insert Before	добавленный узел
DOMNode DOMNode insert Before DOMNode $newnode DOMNode $refnode	добавляет новый дочерний узел перед опорным узлом
DOMNode is Default Namespace $namespaceURI	uri пространства имен
DOMNode bool is Default Namespace	возвращает true если namespaceuri является пространством имен по умолчанию или false в противном случае
DOMNode bool is Default Namespace string $namespaceURI	проверяет совпадает ли uri пространства имен узла с пространством имен по умолчанию
DOMNode is Same Node $node	сравниваемый узел
DOMNode bool is Same Node	возвращает true в случае успешного завершения или false в случае возникновения ошибки
DOMNode bool is Same Node DOMNode $node	проверяет являются ли два узла одним и тем же узлом
DOMNode is Supported $version	номер версии модуля feature для проверки
DOMNode is Supported $feature	название свойства для проверки
DOMNode bool is Supported	возвращает true в случае успешного завершения или false в случае возникновения ошибки
DOMNode bool is Supported string $feature string $version	проверяет поддерживается ли заданное свойство в определенной версии
DOMNode lookup Namespace URI $prefix	префикс пространства имен
DOMNode string lookup Namespace URI	uri пространства имен узла
DOMNode string lookup Namespace URI string $prefix	получает uri пространства имен узла по префиксу
DOMNode lookup Prefix $namespaceURI	uri пространства имен
DOMNode string lookup Prefix	префикс пространства имен
DOMNode string lookup Prefix string $namespaceURI	возвращает префикс пространства имен узла из uri пространства имен
DOMNode replace Child $newnode	новый узел
DOMNode replace Child $oldnode	старый узел
DOMNode DOMNode replace Child	старый узел или false в случае возникновения ошибки
DOMNode DOMNode replace Child DOMNode $newnode DOMNode $oldnode	заменяет дочерний узел
DOMNodelist item $index	индекс узла в коллекции
DOMNodelist DOMNode item	узел находящийся в позиции index объекта domnodelist или null если этот индекс недопустим
DOMNodelist DOMNode item int $index	извлекает узел с заданным индексом
DOMProcessingInstruction construct $name	имя инструкции для обработчика
DOMProcessingInstruction construct $value	значение инструкции для обработчика
DOMProcessingInstruction string construct string $name string $value	создает новый объект классаdomprocessinginstruction
DOMText split Text $offset	позиция с которой узле будет разделен начиная с 0
DOMText DOMText split Text	новый узел того же типа содержащий данные после offset
DOMText DOMText split Text int $offset	разделяет узел на два начиная с заданной позиции
DOMXPath construct $doc	объект класса domdocument связанный с domxpath
DOMXPath DOMDocument construct DOMDocument $doc	создает новый объект класса domxpath
DOMXPath evaluate $registerNodeNS	посредством необязательного аргумента registernodens можно отключить автоматическую регистрацию контекста узла
DOMXPath evaluate $contextnode	дополнительный параметр contextnode может быть использован для указания обрабатывать относительные xpath запросы
DOMXPath evaluate $expression	xpath выражение для выполнения
DOMXPath mixed evaluate	возвращает типизированный результат если это возможно либо объект domnodelist содержащий все узлы соответствующие заданному xpath выражению expression
DOMXPath mixed evaluate string $expression DOMNode $contextnode bool $registerNodeNS	вычисляет переданное xpath выражение и возвращает типизированный результат если возможно
DOMXPath query $registerNodeNS	посредством необязательного аргумента registernodens можно отключить автоматическую регистрацию контекста узла
DOMXPath query $contextnode	дополнительный параметр contextnode может быть использован для указания обрабатывать относительные xpath запросы
DOMXPath query $expression	xpath запрос
DOMXPath DOMNodeList query	возвращает объект domnodelist содержащий узлы отвечающие условиям отбора в xpath expression
DOMXPath DOMNodeList query string $expression DOMNode $contextnode bool $registerNodeNS	выполняет заданное xpath выражение
DOMXPath register Namespace $prefix	префикс
DOMXPath register Namespace $namespaceURI	uri пространства имен
DOMXPath bool register Namespace	возвращает true в случае успешного завершения или false в случае возникновения ошибки
DOMXPath bool register Namespace string $prefix string $namespaceURI	ассоциирует пространство имен с объектом domxpath
DOMXPath register Php Functions $restrict	используйте этот аргумент для включения возможности вызывать из xpath выражений только определенные функции
DOMXPath void register Php Functions mixed $restrict	регистрация функций php как xpath функций
EmptyIterator void key	метод key()
EmptyIterator void next	метод next()
EmptyIterator void rewind	метод rewind()
EmptyIterator void valid	метод valid()
ErrorException int get Severity	возвращает уровень критичности исключения
ErrorException int get Severity	возвращает критичность исключения
Exception void clone	клонировать исключение
Exception string get File	возвращает имя файла в котором исключение было создано
Exception string get File	получает файл в котором возникло исключение
Exception int get Line	возвращает номер строки где было создано исключение
Exception int get Line	получает строку в которой возникло исключение
Exception string get Message	возвращает сообщение исключения в виде строки
Exception string get Message	получает сообщение исключения
Exception array get Trace	возвращает трассировку стека исключения в виде массива array
Exception array get Trace	получает трассировку стека
Exception string get Trace As String	возвращает трассировку стека исключения в виде строки
Exception string get Trace As String	получает трассировку стека в виде строки
FilesystemIterator construct $path	путь к объекту файловой системы по которому требуется навигация
FilesystemIterator construct $flags	поведение некоторых методов можно задать с помощью флагов
FilesystemIterator string construct string $path int $flags	создает новый итератор файловой системы
FilesystemIterator void next	перемещение указателя на следующий файл
FilesystemIterator void rewind	перемещение указателя на начало
FilesystemIterator set Flags $flags	флаги которые необходимо установить
FilesystemIterator void set Flags int $flags	задание настроечных флагов
FilterIterator bool accept	true если текущий элемент допустим в противном случае false
FilterIterator bool accept	проверяет является ли текущий элемент итератора допустимым
FilterIterator construct $iterator	фильтруемый итератор
FilterIterator Iterator construct	объект класса filteriterator
FilterIterator Iterator construct Iterator $iterator	создает filteriterator
finfo string buffer string $string int $options resource $context	псевдоним finfo_buffer
finfo bool set flags int $options	псевдоним finfo_set_flags
function abs $number	числовое значение
function number abs	абсолютное значение number
function number abs mixed $number	модуль числа
function acos $arg	аргумент функции
function float acos	арккосинус числа arg в радианах
function float acos float $arg	арккосинус
function addcslashes $str	экранируемая строка
function addcslashes $charlist	список экранируемых символов
function string addcslashes	возвращает экранированную строку
function string addcslashes string $str string $charlist	экранирует cтроку слешами в стиле языка c
function addslashes $str	экранируемая строка
function string addslashes	возвращает экранируемую строку
function string addslashes string $str	экранирует строку с помощью слешей
function array apache get modules	массив загруженных модулей сервера apache
function array apache get modules	возвращает список загруженных модулей сервера apache
function apache getenv $walk_to_top	получить переменную верхнего уровня доступную для всех уровней сервера apache или нет
function apache getenv $variable	переменная окружения сервера apache
function string apache getenv	значение переменной окружения сервера apache в случае успеха или false в случае ошибки
function string apache getenv string $variable bool $walk_to_top	возвращает переменную окружения подпроцесса сервера apache
function apache lookup uri $filename	имя файла uri который запрашивается
function object apache lookup uri	объект содержащий информацию о переданном uri
function object apache lookup uri string $filename	осуществить частичный запрос на указанный uri и вернуть все полученные сведения
function array apache response headers	массив http заголовков ответа apache при успешном выполнении или false в случае возникновения ошибки
function array apache response headers	возвращает список всех http заголовков ответа apache
function array apd callstack	массив содержащий текущий вызов стека
function array apd callstack	возвращает текущий вызов стека в виде массива
function apd clunk $warning	предупреждение для вывода
function apd clunk $delimiter	разделитель
function void apd clunk string $warning string $delimiter	выводит предупреждение и стек вызова
function array change key case $array	обрабатываемый массив
function array change key case $case	либо case_upper либо case_lower используется по умолчанию
function array array change key case	возвращает массив с ключами преобразованными в верхний или нижний регистр либо false если array не является массивом
function array array change key case array $array int $case	меняет регистр всех ключей в массиве
function array combine $values	массив значений
function array combine $keys	массив ключей
function array array combine	возвращает скомбинированный array либо false если количество элементов в массивах не совпадает
function array array combine array $keys array $values	создает новый массив используя один массив в качестве ключей а другой в качестве соответствующих значений
function array diff uassoc $array1	исходный массив
function array diff uassoc	дополнительные массивы с которыми осуществляется сравнение
function array diff uassoc $key_compare_func	функция сравнения должна возвращать целое которое меньше равно или больше нуля если первый аргумент является соответственно меньшим равным или большим чем второй
function array diff uassoc $array2	массив с которым идет сравнение
function array array diff uassoc	возвращает array содержащий все элементы array1 которых нет во всех остальных массивах
function array array diff uassoc array $array1 array $array2 callable $key_compare_func	вычисляет расхождение массивов с дополнительной проверкой индекса осуществляемой при помощи callback-функции
function array diff $array1	исходный массив
function array diff	дополнительные массивы с которыми осуществляется сравнение
function array diff $array2	массив с которым идет сравнение
function array array diff	возвращает array содержащий элементы array1 отсутствующие в любом из всех остальных массивах
function array array diff array $array1 array $array2	вычислить расхождение массивов
function array fill keys $keys	массив значений которые будут использованы в качестве ключей
function array fill keys $value	заполняемое значение
function array array fill keys	возвращает заполненный массив
function array array fill keys array $keys mixed $value	создает массив и заполняет его значениями с определенными ключами
function array fill $num	количество вставляемых элементов
function array fill $start_index	первый индекс возвращаемого массива
function array fill $value	значение для заполнения
function array array fill	возвращает заполненный массив
function array array fill int $start_index int $num mixed $value	заполняет массив значениями
function array filter $callback	используемая callback-функция если callback -функция не передана все значения массива array равные false см
function array filter $array	итерируемый массив
function array filter $flag	флаг определяющий какие аргументы передавать в callback : array_filter_use_key - передавать только ключ массива как аргумент для callback вместо значения array_filter_use_both - передавать и ключ и значение в callback вместо только значения
function array array filter	возвращает отфильтрованный массив
function array array filter array $array callable $callback int $flag	фильтрует элементы массива с помощью callback-функции
function array flip $array	массив переворачиваемых пар ключ / значение
function array array flip	возвращает перевернутый массив в случае успеха или null в случае ошибки
function array array flip array $array	меняет местами ключи с их значениями в массиве
function array intersect key $array1	основной проверяемый массив
function array intersect key $array2	массив с которым идет сравнение
function array intersect key	переменный список сравниваемых массивов
function array array intersect key	возвращает ассоциативный массив содержащий все элементы array1 имеющие ключи содержащиеся во всех остальных параметрах
function array array intersect key array $array1 array $array2	вычислить пересечение массивов сравнивая ключи
function array intersect uassoc $array2	первый массив с которым сравниваются ключи
function array intersect uassoc	дополнительные массивы с которыми осуществляется сравнение
function array intersect uassoc $key_compare_func	функция сравнения должна возвращать целое которое меньше равно или больше нуля если первый аргумент является соответственно меньшим равным или большим чем второй
function array intersect uassoc $array1	исходный сравниваемый массив
function array array intersect uassoc	возвращает все элементы array1 чьи значения существуют во всех аргументах
function array array intersect uassoc array $array1 array $array2 callable $key_compare_func	вычисляет схождение массивов с дополнительной проверкой индекса осуществляемой при помощи callback-функции
function array intersect ukey $array1	основной проверяемый массив
function array intersect ukey $array2	первый массив с которым сравниваются ключи
function array intersect ukey $key_compare_func	функция сравнения должна возвращать целое которое меньше равно или больше нуля если первый аргумент является соответственно меньшим равным или большим чем второй
function array intersect ukey	дополнительные массивы с которыми осуществляется сравнение ключей
function array array intersect ukey	возвращает все элементы array1 чьи ключи существуют во всех переданных аргументах
function array array intersect ukey array $array1 array $array2 callable $key_compare_func	вычисляет схождение массивов используя callback-функцию для сравнения ключей
function array map	дополнительные массивы для обработки callback -функцией
function array map $array1	массив к которому применяется callback -функция
function array map $callback	callback-функция применяемая к каждому элементу в каждом массиве
function array array map	возвращает массив содержащий все элементы array1 после применения callback -функции к каждому из них
function array array map callable $callback array $array1	применяет callback-функцию ко всем элементам указанных массивов
function array merge recursive $array1	первоначальный массив для слияния
function array merge recursive	дополнительные рекурсивно сливаемые массивы
function array array merge recursive	массив значений полученный в результате слияния аргументов вместе
function array array merge recursive array $array1	рекурсивное слияние двух или более массивов
function array merge $array1	исходный сливаемый массив
function array merge	дополнительные сливаемые массивы
function array array merge	возвращает результирующий массив
function array array merge array $array1	сливает один или большее количество массивов
function array multisort $array1_sort_flags	настройки сортировки для вышеуказанного аргумента array : флаг способа сортировки: sort_regular - обычное сравнение элементов без изменения типов sort_numeric - сравнение элементов как чисел sort_string - сравнение элементов как строк sort_locale_string - сравнение элементов как строк учитывая текущую локаль
function array multisort $array1_sort_order	порядок для сортировки вышеуказанного аргумента array
function array multisort $array1	сортируемый массив array
function array multisort	дополнительные массивы необязательно следующие после порядка сортировки и флагов
function bool array multisort	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool array multisort array $array1 mixed $array1_sort_order mixed $array1_sort_flags	сортирует несколько массивов или многомерные массивы
function array pad $size	новый размер массива
function array pad $value	дополняемое значение если длина массива array меньше size
function array pad $array	исходный массив к которому дополняются элементы
function array array pad	возвращает копию array дополненного до размера указанного size значением value
function array array pad array $array int $size mixed $value	дополнить размер массива определенным значением до заданной величины
function array pop $array	массив из которого берется значение
function mixed array pop	возвращает последний элемент массива array
function mixed array pop array $array	извлекает последний элемент массива
function array rand $num	определяет количество выбираемых элементов
function array rand $array	входной массив
function mixed array rand	при выборе только одного элемента array_rand() возвращает ключ для случайного элемента
function mixed array rand array $array int $num	выбирает одно или несколько случайных значений из массива
function array reduce $carry	содержит результирующее значение с предыдущей итерации; в случае же первой итерации содержит значение параметра initial
function array reduce $item	содержит значение текущей итерации
function array reduce $initial	если передан необязательный параметр initial то он будет использован в начале процесса или в качестве окончательного результата в случае пустого массива
function array reduce $array	входной массив
function array reduce $callback	mixed callback mixed $carry mixed $item carry содержит результирующее значение с предыдущей итерации; в случае же первой итерации содержит значение параметра initial
function mixed array reduce	возвращает получившееся значение
function mixed array reduce array $array callable $callback mixed $initial	итеративно уменьшает массив к единственному значению используя callback-функцию
function array replace recursive $array2	массив из которого будут взяты элементы для замены
function array replace recursive	дополнительные массивы из которых будут браться элементы для замены
function array replace recursive $array1	массив элементы которого будут заменены
function array array replace recursive	возвращает array или null если произошла ошибка
function array array replace recursive array $array1 array $array2	рекурсивно заменяет элементы первого массива элементами переданных массивов
function array replace $array2	массив элементами которого будут заменяться элементы первого массива
function array replace $array1	массив элементы которого требуется заменить
function array replace	еще массивы из которых будут браться элементы для замены
function array array replace	возвращает массив array или null в случае ошибки
function array array replace array $array1 array $array2	замена элементов массива элементами других переданных массивов
function array reverse $preserve_keys	если установлено в true то ключи будут сохранены
function array reverse $array	входной массив
function array array reverse	возвращает массив с элементами в обратном порядке
function array array reverse array $array bool $preserve_keys	возвращает массив с элементами в обратном порядке
function array search $haystack	массив
function array search $needle	искомое значение
function array search $strict	если третий параметр strict установлен в true то функция array_search() будет искать идентичные элементы в haystack
function mixed array search	возвращает ключ для needle если он был найден в массиве иначе false
function mixed array search mixed $needle array $haystack bool $strict	осуществляет поиск данного значения в массиве и возвращает соответствующий ключ в случае удачи
function array slice $preserve_keys	обратите внимание что по умолчанию array_slice() сбрасывает ключи массива
function array slice $offset	если параметр offset неотрицателен последовательность начнётся на указанном расстоянии от начала array
function array slice $array	входной массив
function array slice $length	если в эту функцию передан положительный параметр length последовательность будет включать количество элементов меньшее или равное length length length
function array array slice	возвращает срез
function array array slice array $array int $offset int $length bool $preserve_keys	выбирает срез массива
function array splice $offset	если параметр offset положителен будут удалены элементы находящиеся на расстоянии offset от начала input
function array splice $replacement	если передан массив replacement в качестве аргумента тогда удалённые элементы будут заменены элементами этого массива
function array splice $input	входной массив
function array splice $length	если параметр length опущен будут удалены все элементы начиная с позиции offset и до конца массива
function array array splice	возвращает массив содержащий удалённые элементы
function array array splice array $input int $offset int $length mixed $replacement	удаляет часть массива и заменяет её чем-нибудь ещё
function array udiff assoc $array2	второй массив
function array udiff assoc $value_compare_func	функция сравнения должна возвращать целое которое меньше равно или больше нуля если первый аргумент является соответственно меньшим равным или большим чем второй
function array udiff assoc $array1	первый массив
function array array udiff assoc	array_udiff_assoc() возвращает array содержащий все элементы array1 которых нет в каком-либо из всех остальных аргументов
function array array udiff assoc array $array1 array $array2 callable $value_compare_func	вычисляет расхождение в массивах с дополнительной проверкой индексов используя для сравнения значений callback-функцию
function array udiff uassoc $key_compare_func	сравнение ключей индексов также осуществляется с помощью callback-функции key_compare_func
function array udiff uassoc $array2	второй массив
function array udiff uassoc $value_compare_func	функция сравнения должна возвращать целое которое меньше равно или больше нуля если первый аргумент является соответственно меньшим равным или большим чем второй
function array udiff uassoc $array1	первый массив
function array array udiff uassoc	возвращает array содержащий все элементы array1 которых нет в каком-либо из остальных аргументов
function array array udiff uassoc array $array1 array $array2 callable $value_compare_func callable $key_compare_func	вычисляет расхождение в массивах с дополнительной проверкой индексов используя для сравнения значений и индексов callback-функцию
function array uintersect assoc $array2	второй массив
function array uintersect assoc $value_compare_func	функция сравнения должна возвращать целое которое меньше равно или больше нуля если первый аргумент является соответственно меньшим равным или большим чем второй
function array uintersect assoc $array1	первый массив
function array array uintersect assoc	возвращает массив содержащий все элементы array1 которые существуют во всех остальных аргументах
function array array uintersect assoc array $array1 array $array2 callable $value_compare_func	вычисляет пересечение массивов с дополнительной проверкой индексов используя для сравнения значений callback-функцию
function array uintersect $array2	второй массив
function array uintersect $value_compare_func	функция сравнения должна возвращать целое которое меньше равно или больше нуля если первый аргумент является соответственно меньшим равным или большим чем второй
function array uintersect $array1	первый массив
function array array uintersect	возвращает массив содержащий все элементы array1 которые существуют во всех остальных аргументах
function array array uintersect array $array1 array $array2 callable $value_compare_func	вычисляет пересечение массивов используя для сравнения значений callback-функцию
function array unique $sort_flags	можно использовать необязательный второй параметр sort_flags для изменения поведения сортировки с помощью следующих значений: виды сортировок флагов: sort_regular - нормальное сравнение элементов типы не меняются sort_numeric - элементы сравниваются как числа sort_string - элементы сравниваются как строки sort_locale_string - сравнивает элементы как строки с учетом текущей локали
function array unique $array	входной массив
function array array unique	возвращает отфильтрованный массив
function array array unique array $array int $sort_flags	убирает повторяющиеся значения из массива
function array unshift $value1	первое значение для добавления
function array unshift $array	входной массив
function int array unshift	возвращает новое количество элементов в array
function int array unshift array $array mixed $value1	добавляет один или несколько элементов в начало массива
function array walk recursive $userdata	если указан необязательный параметр userdata то он будет передан третьим параметром функции callback
function array walk recursive $callback	обычно callback принимает два параметра
function array walk recursive $array	входной массив
function bool array walk recursive	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool array walk recursive array $array callable $callback mixed $userdata	рекурсивно применяет пользовательскую функцию к каждому элементу массива
function array	синтаксис индекс = > значения разделённые запятыми определяет индексы и их значения
function array array	возвращает массив параметров
function array array	создает массив
function arsort $sort_flags	вы можете изменить поведение сортировки используя дополнительный параметр sort_flags подробнее см
function arsort $array	входной массив
function bool arsort	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool arsort array $array int $sort_flags	сортирует массив в обратном порядке сохраняя ключи
function asinh $arg	входное значение
function float asinh	гиперболический арксинус arg
function float asinh float $arg	гиперболический арксинус
function asort $sort_flags	вы можете изменить поведение сортировки используя дополнительный параметр sort_flags подробнее см
function asort $array	входной массив
function bool asort	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool asort array $array int $sort_flags	сортирует массив сохраняя ключи
function atanh $arg	входное значение
function float atanh	гиперболический арктангенс arg
function float atanh float $arg	гиперболический арктангенс
function base convert $frombase	основание системы счисления числа number
function base convert $tobase	основание системы счисления для преобразования числа number
function base convert $number	число для преобразования
function string base convert	number преобразованное в систему счисления tobase
function string base convert string $number int $frombase int $tobase	преобразование числа между произвольными системами счисления
function base64 decode $data	закодированные данные
function base64 decode $strict	возвращает false если данные содержат символы вне алфавита base64
function string base64 decode	возвращает декодированные данные или false в случае возникновения ошибки
function string base64 decode string $data bool $strict	декодирует данные закодированные алгоритмом mime base64
function basename $path	путь
function basename $suffix	если компонент имени заканчивается на suffix то он также будет отброшен
function string basename	возвращает базовое имя указанного пути path
function string basename string $path string $suffix	возвращает последний компонент имени из указанного пути
function bbcode add element $tag_name	новый тег добавляемый в набор тегов bbcode_container
function bbcode add element $tag_rules	ассоциативный массив содержащий правила разбора; см
function bbcode add element $bbcode_container	bbcode_container типа resource возвращаемый функцией bbcode_create()
function bool bbcode add element	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool bbcode add element resource $bbcode_container string $tag_name array $tag_rules	добавляет элемент bbcode
function bbcode add smiley $replace_by	строка которая заменяет смайл при совпадении
function bbcode add smiley $smiley	строка которая будет заменена при совпадении
function bbcode add smiley $bbcode_container	bbcode_container типа resource возвращаемый функцией bbcode_create()
function bool bbcode add smiley	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool bbcode add smiley resource $bbcode_container string $smiley string $replace_by	добавляет смайлы для разбора парсером
function bbcode destroy $bbcode_container	bbcode_container типа resource возвращаемый функцией bbcode_create()
function bool bbcode destroy	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool bbcode destroy resource $bbcode_container	закрывает ресурс bbcode_container
function bbcode parse $to_parse	строка которую необходимо разобрать
function bbcode parse $bbcode_container	bbcode_container типа resource возвращаемый функцией bbcode_create()
function string bbcode parse	возвращает разобранную строку или false в случае возникновения ошибки
function string bbcode parse resource $bbcode_container string $to_parse	производит разбор строки в соответствии с заданным набором правил
function bbcode set arg parser $bbcode_arg_parser	значение bbcode_container типа resource возвращаемое функцией bbcode_create()
function bbcode set arg parser $bbcode_container	bbcode_container resource возвращаемый функцией bbcode_create()
function bool bbcode set arg parser	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool bbcode set arg parser resource $bbcode_container resource $bbcode_arg_parser	подключает другой парсер для применения иного набора правил в качестве параметров разбора
function bbcode set flags $flags	набор флагов которые будут применены к настройкам bbcode_container
function bbcode set flags $mode	одна из констант bbcode_set_flags_* используемых для установки снятия указанного набора флагов или замены набора флагов другим набором
function bbcode set flags $bbcode_container	bbcode_container типа resource возвращаемый функцией bbcode_create()
function bool bbcode set flags	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool bbcode set flags resource $bbcode_container int $flags int $mode	устанавливает или изменяет настройки парсера
function bcadd $left_operand	левый операнд слагаемое в виде строки
function bcadd $right_operand	правый операнд слагаемое в виде строки
function bcadd $scale	этот необязательный параметр используется для установки количества знаков после десятичного разделителя в результате
function string bcadd	сумма слагаемых в виде строки
function string bcadd string $left_operand string $right_operand int $scale	сложить 2 числа произвольной точности
function bccomp $left_operand	левый операнд в виде строки
function bccomp $right_operand	правый операнд в виде строки
function bccomp $scale	необязательный аргумент scale задает количество цифр после десятичной точки которое будет участвовать в сравнении
function int bccomp	возвращает 0 если числа равны; 1 если left_operand больше чем right_operand ; -1 если меньше
function int bccomp string $left_operand string $right_operand int $scale	сравнение двух чисел произвольной точности
function bcdiv $left_operand	левый операнд в виде строки
function bcdiv $right_operand	правый операнд в виде строки
function bcdiv $scale	этот необязательный параметр используется для установки количества знаков после десятичного разделителя в результате
function string bcdiv	возвращает результат деления в виде строки или null если right_operand равен 0
function string bcdiv string $left_operand string $right_operand int $scale	операция деления для чисел произвольной точности
function bcmod $left_operand	левый операнд в виде строки
function bcmod $modulus	правый операнд модуль в виде строки
function string bcmod	возвращает остаток от деления в виде строки или null если modulus равен 0
function string bcmod string $left_operand string $modulus	получает остаток от деления чисел с произвольной точностью
function bcscale $scale	масштаб число знаков после запятой
function bool bcscale	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool bcscale int $scale	задает количество чисел после десятичной точки по умолчанию для всех bc math функций
function bcsub $scale	этот необязательный параметр используется для установки количества знаков после десятичного разделителя в результате
function bcsub $left_operand	левый операнд уменьшаемое в виде строки
function bcsub $right_operand	правый операнд вычитаемое в виде строки
function string bcsub	разность в виде строки
function string bcsub string $left_operand string $right_operand int $scale	вычитает одно число с произвольной точностью из другого
function bin2hex $str	строка
function string bin2hex	возвращает шестнадцатеричное представление указанной строки
function string bin2hex string $str	преобразует бинарные данные в шестнадцатеричное представление
function bind textdomain codeset $codeset	кодировка
function bind textdomain codeset $domain	домен
function string bind textdomain codeset	строка в случае успеха
function string bind textdomain codeset string $domain string $codeset	устанавливает кодировку в которой будут возвращаться сообщения из каталога сообщений домена
function bindec $binary_string	бинарная строка для преобразования
function number bindec	десятичное значение binary_string
function number bindec string $binary_string	двоичное в десятичное
function bson decode $bson	преобразуемый bson объект
function array bson decode	возвращает десериализованный bson объект
function array bson decode string $bson	преобразовывает объект bson в массив php
function bson encode $anything	преобразуемая переменная
function string bson encode	возвращает сериализованную строку
function string bson encode mixed $anything	преобразовывет переменную php в строку bson
function bzclose $bz	указатель на файл
function int bzclose	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function int bzclose resource $bz	закрывает файл bzip2
function bzcompress $source	сжимаемая строка
function bzcompress $workfactor	контролирует поведение фазы компрессии в худшем случае когда входные данные являются часто повторяющимися
function bzcompress $blocksize	определяет размера блока используемый при сжатии должен быть числом в диапазоне от 1 до 9 где 9 даст наилучшее но более ресурсоемкое сжатие
function mixed bzcompress	сжатая строка или код ошибки в случае неудачного завершения работы
function mixed bzcompress string $source int $blocksize int $workfactor	сжимает строку с использованием bzip2
function bzdecompress $small	если true то будет использован альтернативный алгоритм распаковки использующий меньше памяти максимально требуемая память находится в районе 2300k но работает приблизительно вдвое медленнее
function bzdecompress $source	распаковываемая строка
function mixed bzdecompress	распакованная строка или код ошибки в случае неудачного завершения работы
function mixed bzdecompress string $source int $small	распаковывает данные сжатые с использованием bzip2
function bzerrno $bz	указатель на файл
function int bzerrno	возвращает код ошибки в виде целого числа
function int bzerrno resource $bz	возвращает код ошибки работы с bzip2
function bzerror $bz	файловый указатель
function array bzerror	возвращает ассоциативный массив с кодом ошибки с ключом errno и строкой ошибки с ключом errstr
function array bzerror resource $bz	возвращает код и строку ошибки работы с bzip2 в виде массива
function bzerrstr $bz	указатель на файл
function string bzerrstr	возвращает строку содержащую сообщение об ошибке
function string bzerrstr resource $bz	возвращает строку ошибки работы с bzip2
function bzflush $bz	указатель на файл
function int bzflush	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function int bzflush resource $bz	форсирует запись всех буферизированных данных
function bzread $bz	указатель на файл
function bzread $length	если не указан bzread() будет считывать 1024 несжатых байта за один раз
function string bzread	возвращает распакованные данные либо false в случае ошибки
function string bzread resource $bz int $length	бинарно-безопасное чтение файла bzip2
function bzwrite $bz	указатель на файл
function bzwrite $length	если указан запись остановится после length несжатых записанных байт либо если был достигнут конец data в зависимости от того что произойдет первым
function bzwrite $data	записываемые данные
function int bzwrite	возвращает количество записанных байт или false в случае ошибки
function int bzwrite resource $bz string $data int $length	бинарно-безопасная запись bzip2 файла
function cal days in month $calendar	календарь используемый для вычисления
function cal days in month $year	год в выбранном календаре
function cal days in month $month	месяц в выбранном календаре
function int cal days in month	количество дней в конкретном месяце выбранного календаря
function int cal days in month int $calendar int $month int $year	возвращает количество дней в месяце для заданного года и календаря
function cal from jd $jd	день юлианского календаря как целое число
function cal from jd $calendar	календарь в который нужно преобразовать дату
function array cal from jd	возвращает массив содержащий информацию о дате такую как месяц день год день недели сокращенное и полное название дня недели месяца и дату в форме месяц / день / год
function array cal from jd int $jd int $calendar	преобразует дату заданную в юлианском календаре в дату указанного календаря
function cal to jd $day	день в виде числа разрешенное значение зависит от календаря calendar
function cal to jd $month	месяц в виде числа разрешенное значение зависит от календаря calendar
function cal to jd $calendar	календарь из которого будет произведена конвертация один из: cal_gregorian cal_julian cal_jewish или cal_french
function cal to jd $year	год в виде числа разрешенное значение зависит от календаря calendar
function int cal to jd	число дней в юлианском исчислении
function int cal to jd int $calendar int $month int $day int $year	преобразует заданную дату в юлианское исчисление
function call user func array $param_arr	передаваемые в функцию параметры в виде индексированного массива
function call user func array $callback	вызываемая функция типа callable
function mixed call user func array	возвращает результат функции или false в случае ошибки
function mixed call user func array callable $callback array $param_arr	вызывает пользовательскую функцию с массивом параметров
function chdir $directory	новый текущий каталог
function bool chdir	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool chdir string $directory	изменяет каталог
function checkdate $month	месяц
function checkdate $year	год
function checkdate $day	день
function bool checkdate	возвращает true если проверяемая дата является корректной или false в противном случае
function bool checkdate int $month int $day int $year	проверяет корректность даты по григорианскому календарю
function chgrp $group	название или номер группы
function chgrp $filename	путь к файлу
function bool chgrp	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool chgrp string $filename mixed $group	изменяет группу владельцев файла
function chr $ascii	ascii-код
function string chr	возвращает символ по его коду
function string chr int $ascii	возвращает символ по его коду
function chroot $directory	путь для смены корневой директории
function bool chroot	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool chroot string $directory	изменяет корневой каталог
function chunk split $chunklen	длина фрагмента
function chunk split $end	последовательность символов используемая в качестве конца строки
function chunk split $body	разбиваемая строка
function string chunk split	возвращает преобразованную строку
function string chunk split string $body int $chunklen string $end	разбивает строку на фрагменты
function class alias $alias	имя псевдонима для класса
function class alias $original	оригинальный класс
function class alias $autoload	нужно ли автоматически подгружать оригинальный класс если он не был найден
function bool class alias	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool class alias string $original string $alias bool $autoload	создает псевдоним для указанного класса
function class parents $autoload	в зависимости от переданного значения функция может загрузить описание класса автоматически магическим методом __autoload()
function class parents $class	объект экземпляр класса или строка имя класса
function array class parents	в случае успеха будет возвращен массив
function array class parents mixed $class bool $autoload	возвращает список родительских классов заданного класса
function class uses $autoload	в зависимости от переданного значения функция может загрузить описание класса автоматически магическим методом __autoload()
function class uses $class	объект экземпляр класса или строка имя класса
function array class uses	в случае успеха будет возвращен массив
function array class uses mixed $class bool $autoload	возвращает список трэйтов используемых заданным классом
function clearstatcache $filename	очистить кэш realpath и stat только для определенного файла используется только если параметр clear_realpath_cache установлен в true
function clearstatcache $clear_realpath_cache	очищать кэш realpath или нет
function void clearstatcache bool $clear_realpath_cache string $filename	очищает кэш состояния файлов
function closedir $dir_handle	дескриптор каталога resource предварительно открытый с помощью opendir()
function void closedir resource $dir_handle	освобождает дескриптор каталога
function bool closelog	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool closelog	завершает соединение с системным журналом
function int connection aborted	возвращает 1 если клиент отключен 0 в другом случае
function int connection aborted	проверяет подключение клиента
function int connection status	возвращает статус соединения в битах который можно использовать в константах connection_xxx для определения статуса соединения
function int connection status	возвращает статус соединения в битах
function convert cyr string $from	исходная кириллическая кодировка один символ
function convert cyr string $str	конвертируемая строка
function convert cyr string $to	целевая кириллическая кодировка один символ
function string convert cyr string	возвращает преобразованную строку
function string convert cyr string string $str string $from string $to	преобразует строку из одной кириллической кодировки в другую
function convert uudecode $data	данные в формате uuencode
function string convert uudecode	возвращает декодированные данные в виде строки или false в случае возникновения ошибки
function string convert uudecode string $data	декодирует строку из формата uuencode в обычный вид
function convert uuencode $data	кодируемые данные
function string convert uuencode	возвращает закодированные данные в формате uuencode или false в случае возникновения ошибки
function string convert uuencode string $data	кодирует строку в формат uuencode
function cos $arg	угол в радианах
function float cos	косинус угла arg
function float cos float $arg	косинус
function cosh $arg	входное значение
function float cosh	гиперболический косинус arg
function float cosh float $arg	гиперболический косинус
function count chars $string	исследуемая строка
function count chars $mode	смотрите возвращаемые значения
function mixed count chars	в зависимости от параметра mode count_chars() возвращает одно из следующих значений: 0 - массив индексами которого являются ascii-коды а значениями - число вхождений соответствующего символа
function mixed count chars string $string int $mode	возвращает информацию о символах входящих в строку
function crack check $dictionary	идентификатор словаря cracklib
function crack check $password	проверяемый пароль
function bool crack check	возвращает true если пароль переданный в параметре password сильный взломоустойчивый иначе false
function bool crack check resource $dictionary string $password	проверяет взломостойкость переданного пароля
function crack closedict $dictionary	словарь который нужно закрыть
function bool crack closedict	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool crack closedict resource $dictionary	закрывает открытый ранее словарь cracklib
function crack opendict $dictionary	путь к словарю cracklib
function resource crack opendict	возвращает идентификатор ресурса словаря в случае успеха или false в случае возникновения ошибки
function resource crack opendict string $dictionary	открывает новый словарь cracklib
function create function $code	код функции
function create function $args	аргументы функции
function string create function	возвращает уникальное имя функции в виде строки или false в случае ошибки
function string create function string $args string $code	создаёт анонимную лямбда функцию
function crypt $str	хэшируемая строка
function crypt $salt	необязательный параметр с солью на которой будет основано хэширование
function string crypt	возвращает хэшированную строку или строку короче 13 символов гарантированно отличающуюся от соли в случае ошибки
function string crypt string $str string $salt	необратимое хэширование строки
function ctype alnum $text	проверяемая строка
function bool ctype alnum	возвращает true если каждый символ в строке text является буквой или цифрой иначе возвращается false
function bool ctype alnum string $text	проверяет на наличие буквенно-цифровых символов
function ctype alpha $text	проверяемая строка
function bool ctype alpha	возвращает true если каждый символ в строке text является буквой из текущей локали false в противном случае
function bool ctype alpha string $text	проверяет на наличие буквенных символов
function ctype cntrl $text	проверяемая строка
function bool ctype cntrl	возвращает true если каждый символ в строке text является управляющим символом из текущей локали false в противном случае
function bool ctype cntrl string $text	проверяет на наличие управляющих символов
function ctype lower $text	проверяемая строка
function bool ctype lower	возвращает true если каждый символ в строке text является буквой в нижнем регистре в текущей локали
function bool ctype lower string $text	проверяет наличие символов в нижнем регистре
function ctype print $text	проверяемая строка
function bool ctype print	возвращает true если каждый символ в строке text фактически создает вывод включая пустой
function bool ctype print string $text	проверяет на наличие печатных символов
function ctype punct $text	проверяемая строка
function bool ctype punct	возвращает true если каждый символ в строке text является печатным но не является ни буквой ни цифрой ни пустым символом иначе будет возвращено false
function bool ctype punct string $text	проверяет на наличие печатных символов которые в то же время не являются пробельными или буквенно-цифровыми символами
function ctype space $text	проверяемая строка
function bool ctype space	возвращает true если каждый символ в строке text создает какой-нибудь из пробельных символов false в противном случае
function bool ctype space string $text	проверяет наличие пробельных символов
function ctype upper $text	проверяемая строка
function bool ctype upper	возвращает true если каждый символ в строке text является буквой в верхнем регистре в текущей локали
function bool ctype upper string $text	проверяет на наличие символов в верхнем регистре
function ctype xdigit $text	проверяемая строка
function bool ctype xdigit	возвращает true если каждый символ строки text является шестнадцатеричной цифрой то есть десятичной цифрой либо символом из диапазона a-fa-f в обратном случае возвращает false
function bool ctype xdigit string $text	проверяет наличие шестнадцатеричных цифр
function curl close $ch	дескриптор curl полученный из curl_init()
function void curl close resource $ch	завершает сеанс curl
function curl copy handle $ch	дескриптор curl полученный из curl_init()
function resource curl copy handle	возвращает новый дескриптор curl
function resource curl copy handle resource $ch	копирует дескриптор curl вместе со всеми его настройками
function curl errno $ch	дескриптор curl полученный из curl_init()
function int curl errno	возвращает номер ошибки или 0 ноль если ошибки не произошло
function int curl errno resource $ch	возвращает код последней ошибки
function curl error $ch	дескриптор curl полученный из curl_init()
function string curl error	возвращает сообщение об ошибке или пустую строку если ошибки не произошло
function string curl error resource $ch	возвращает строку с описанием последней ошибки текущего сеанса
function curl exec $ch	дескриптор curl полученный из curl_init()
function mixed curl exec	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function mixed curl exec resource $ch	выполняет запрос curl
function curl getinfo $opt	может принимать значение одной из следующих констант: curlinfo_effective_url - последний использованный url curlinfo_http_code - последний полученный http код curlinfo_filetime - удаленная серверная дата загруженного документа если она неизвестна возвращается -1
function curl getinfo $ch	дескриптор curl полученный из curl_init()
function mixed curl getinfo	если параметр opt указан то возвращается его значение
function mixed curl getinfo resource $ch int $opt	возвращает информацию об определенной операции
function curl init $url	если указан опция curlopt_url будет автоматически установлена в значение этого аргумента
function resource curl init	возвращает дескриптор curl при удаче и false в случае ошибки
function resource curl init string $url	инициализирует сеанс curl
function curl multi add handle $mh	мульти-дескриптор curl полученный из curl_multi_init()
function curl multi add handle $ch	дескриптор curl полученный из curl_init()
function int curl multi add handle	возвращает 0 при успехе или один из кодов ошибок curlm_xxx
function int curl multi add handle resource $mh resource $ch	добавляет обычный curl дескриптор к набору curl дескрипторов
function curl multi close $mh	мульти-дескриптор curl полученный из curl_multi_init()
function void curl multi close resource $mh	закрывает набор curl дескрипторов
function curl multi getcontent $ch	дескриптор curl полученный из curl_init()
function string curl multi getcontent	возвращает содержимое curl дескриптора если была использована опция curlopt_returntransfer
function string curl multi getcontent resource $ch	возвращает результат операции если была установлена опция curlopt_returntransfer
function curl multi select $mh	мульти-дескриптор curl полученный из curl_multi_init()
function curl multi select $timeout	время в секундах для ожидания ответа
function int curl multi select	в случае успеха возвращает количество дескрипторов содержащихся в наборах дескрипторов
function int curl multi select resource $mh float $timeout	ждет активности на любом curl_multi соединении
function curl setopt $option	устанавливаемый параметр curlopt_xxx
function curl setopt $ch	дескриптор curl полученный из curl_init()
function curl setopt $value	значение параметра option
function bool curl setopt	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool curl setopt resource $ch int $option mixed $value	устанавливает параметр для сеанса curl
function array curl version int $age	возвращает версию curl
function current $array	массив
function mixed current	функция current() просто возвращает значение элемента массива на который указывает его внутренний указатель
function mixed current array $array	возвращает текущий элемент массива
function cyrus bind $callbacks	массив обратных вызовов
function cyrus bind $connection	дескриптор соединения
function bool cyrus bind	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool cyrus bind resource $connection array $callbacks	привязать обратные вызовы для cyrus imap соединения
function cyrus close $connection	дескриптор соединения
function bool cyrus close	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool cyrus close resource $connection	закрывает соединение с сервером cyrus imap
function cyrus connect $port	номер порта
function cyrus connect $host	имя хоста cyrus imap сервера
function resource cyrus connect	возвращает дескриптор соединения в случае успеха или false в случае возникновения ошибки
function resource cyrus connect string $host string $port int $flags	установить соединение с сервером cyrus imap
function cyrus query $connection	дескриптор соединения
function cyrus query $query	строка запроса
function array cyrus query	возвращает ассоциативный массив со следующими ключами: text msgno и keyword
function array cyrus query resource $connection string $query	послать запрос cyrus imap серверу
function string date default timezone get	возвращает string
function string date default timezone get	возвращает временную зону используемой по умолчанию всеми функциями даты / времени в скрипте
function date parse from format $format	формат распознаваемый функцией datetime::createfromformat()
function date parse from format $date	строка представляющая дату
function array date parse from format	возвращает ассоциативный массив с подробной информацией о заданной дате
function array date parse from format string $format string $date	получение информации о заданной в определенном формате дате
function date sunrise $latitude	по умолчанию в северном полушарии для южного передается отрицательная величина
function date sunrise $timestamp	временная метка timestamp дня для которого определяется время рассвета
function date sunrise $format	format constants константа описание пример sunfuncs_ret_string тип возвращаемого результата string 16:46 sunfuncs_ret_double тип возвращаемого результата float 16
function date sunrise $longitude	по умолчанию восточная для указания западной долготы передается отрицательная величина
function date sunrise $zenith	по умолчанию: date
function date sunrise $gmtoffset	задается в часах
function mixed date sunrise	возвращает время восхода солнца в заданном формате format или false в случае возникновения ошибки
function mixed date sunrise int $timestamp int $format float $latitude float $longitude float $zenith float $gmt_offset	возвращает время рассвета для заданных дня и местоположения
function date sunset $timestamp	временная метка timestamp дня для которого определяется время захода солнца
function date sunset $latitude	по умолчанию в северном полушарии для южного передается отрицательная величина
function date sunset $format	format constants константа описание пример sunfuncs_ret_string тип возвращаемого результата string 16:46 sunfuncs_ret_double тип возвращаемого результата float 16
function date sunset $longitude	по умолчанию восточная для указания западной долготы передается отрицательная величина
function date sunset $zenith	по умолчанию: date
function date sunset $gmtoffset	задается в часах
function mixed date sunset	возвращает время захода солнца в заданном формате format или false в случае возникновения ошибки
function mixed date sunset int $timestamp int $format float $latitude float $longitude float $zenith float $gmt_offset	возвращает время захода солнца для заданных дня и местоположения
function dbase add record $dbase_identifier	идентификатор базы данных возвращаемый функцией dbase_open() или dbase_create()
function dbase add record $record	индексированный массив с данными
function bool dbase add record	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool dbase add record int $dbase_identifier array $record	добавляет запись в базу данных
function dbase close $dbase_identifier	идентификатор базы данных возвращаемый функцией dbase_open() или dbase_create()
function bool dbase close	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool dbase close int $dbase_identifier	закрывает базу данных
function dbase create $fields	массив массивов в котором каждый массив описывает формат одного поля базы данных
function dbase create $filename	имя базы данных
function int dbase create	возвращает идентификатор связи с базой данных если база данных успешно создана или false в случае ошибки
function int dbase create string $filename array $fields	создает базу данных
function dbase delete record $record_number	целое число в промежутке от 1 до количества записей в базе дынных количество записей возвращает функция dbase_numrecords()
function dbase delete record $dbase_identifier	идентификатор базы данных возвращаемый функцией dbase_open() или dbase_create()
function bool dbase delete record	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool dbase delete record int $dbase_identifier int $record_number	удаление записей из базы данных
function dbase get header info $dbase_identifier	идентификатор базы данных полученный с помощью dbase_open() или dbase_create()
function array dbase get header info	индексированный массив значений для каждой колонки поля
function array dbase get header info int $dbase_identifier	получает информацию о свойствах полей базы данных
function dbase get record $dbase_identifier	идентификатор базы данных возвращаемый функцией dbase_open() или dbase_create()
function dbase get record $record_number	индекс записи
function array dbase get record	возвращает запись в виде массива
function array dbase get record int $dbase_identifier int $record_number	получает записи из базы данных как из индексированного массива
function dbase numrecords $dbase_identifier	идентификатор базы данных возвращаемый функцией dbase_open() или dbase_create()
function int dbase numrecords	количество записей в базе данных или false в случае возникновения ошибки
function int dbase numrecords int $dbase_identifier	получает количество записей в базе данных
function dbase open $filename	имя базы данных
function dbase open $mode	целое число которое соответствует аналогичному в системном вызове open() обычно 0 означает режим для чтения 1 - режим для записи и 2 - режим для чтения и записи
function int dbase open	возвращает идентификатор ссылки на базу данных если база данных успешно открыта или false если произошла ошибка
function int dbase open string $filename int $mode	открывает базу данных
function dbase pack $dbase_identifier	идентификатор базы данных возвращаемый функцией dbase_open() или dbase_create()
function bool dbase pack	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool dbase pack int $dbase_identifier	фиксирует удаление из базы данных
function dbase replace record $record	индексированный массив данных
function dbase replace record $record_number	целое число которое может быть в диапазоне от 1 до числа записей в базе данных которое вернула функция dbase_numrecords()
function dbase replace record $dbase_identifier	идентификатор базы данных возвращаемый функцией dbase_open() или dbase_create()
function bool dbase replace record	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool dbase replace record int $dbase_identifier array $record int $record_number	заменяет запись в базе данных
function dcgettext $message	сообщение
function dcgettext $domain	домен
function dcgettext $category	категория
function string dcgettext	в случае успеха возвращает значение типа string
function string dcgettext string $domain string $message int $category	переопределяет одно сообщение в домене
function dcngettext $domain	домен
function string dcngettext	в случае успеха возвращает значение типа string
function string dcngettext string $domain string $msgid1 string $msgid2 int $n int $category	версия dcgettext для множественного числа
function debug backtrace $options	в версии 5
function debug backtrace $limit	в версии 5
function array debug backtrace	возвращает массив вложенных ассоциативных массивов array
function array debug backtrace int $options int $limit	выводит стек вызовов функций в массив
function debug print backtrace $options	в версии 5
function debug print backtrace $limit	в версии 5
function void debug print backtrace int $options int $limit	выводит стек вызовов функций
function decoct $number	десятичное значение для преобразования
function string decoct	восьмеричное строковое представление number
function string decoct int $number	переводит число из десятичной системы счисления в восьмеричную
function void define syslog variables	инициализирует все syslog переменные
function dgettext $message	сообщение
function dgettext $domain	домен
function string dgettext	в случае успеха возвращает значение типа string
function string dgettext string $domain string $message	позволяет переопределить текущий домен
function dir $context	замечание : поддержка контекста была добавлена в php 5
function dir $directory	каталог для открытия
function Directory dir	возвращает экземпляр класса directory null при неверных параметрах и false в случае другой ошибки
function Directory dir string $directory resource $context	возвращает экземпляр класса directory
function dirname $path	путь
function string dirname	возвращает путь к родительской директории
function string dirname string $path	возвращает имя родительского каталога из указанного пути
function disk total space $directory	директория файловой системы или раздел диска
function float disk total space	возвращает общий размер в байтах в виде вещественного числа или false в случае возникновения ошибки
function float disk total space string $directory	возвращает общий размер каталога или раздела файловой системы
function dl $library	этот аргумент содержит только имя файла расширения которое требуется загрузить
function bool dl	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool dl string $library	загружает php расширение во время выполнения
function dngettext $domain	домен
function string dngettext	в случае успеха возвращает значение типа string
function string dngettext string $domain string $msgid1 string $msgid2 int $n	версия dgettext для множественного числа
function dom import simplexml $node	узел simplexmlelement
function DOMElement dom import simplexml	добавленный узел domelement или false в случае возникновения любых ошибок
function DOMElement dom import simplexml SimpleXMLElement $node	получает объект класса domelement из объекта класса simplexmlelement
function each $array	входной массив
function array each	возвращает текущую пару ключ / значение из массива array
function array each array $array	возвращает текущую пару ключ / значение из массива и смещает его указатель
function easter date $year	год - число между 1970 и 2037
function int easter date	дата пасхи в виде метки времени unix
function int easter date int $year	метка времени unix соответствующая полуночи на пасху в заданном году
function easter days $year	год положительное число
function easter days $method	позволяет расcчитать пасхальные даты основываясь на григорианском календаре для 1582 - 1752 годов если установить cal_easter_roman
function int easter days	количество дней между 21 марта и пасхальным воскресеньем в заданном году year
function int easter days int $year int $method	получение количества дней между 21 марта и пасхой в заданном году
function eio busy $callback	функция обратного вызова исполняемая когда все запросы группы будут выполнены
function eio busy $pri	приоритет запросов: eio_pri_default eio_pri_min eio_pri_max или null
function eio busy $delay	задержка в секундах
function eio busy $data	произвольная переменная передаваемая в callback -функцию
function resource eio busy	eio_busy() возвращает запрос типа resource в случае успеха или false при ошибке
function resource eio busy int $delay int $pri callable $callback mixed $data	искусственно увеличивает нагрузку
function eio cancel $result	содержит результирующее значение зависящее от запроса; обычно это значение возвращаемое соответствующим системным вызовом
function eio cancel $req	является опциональным запрашиваемым ресурсом который может использоваться с такими функциями как eio_get_last_error()
function eio cancel $pri	приоритет запросов: eio_pri_default eio_pri_min eio_pri_max или null
function eio cancel $data	произвольная переменная передаваемая в callback -функцию
function eio cancel $callback	функция callback вызывается при завершении запроса
function eio cancel $data	является пользовательскими данными переданными в запросе
function eio cancel $req	ресурс запроса
function void eio cancel resource $req	отменяет запрос
function eio chmod $mode	новые права доступа
function eio chmod $result	содержит результирующее значение зависящее от запроса; обычно это значение возвращаемое соответствующим системным вызовом
function eio chmod $req	является опциональным запрашиваемым ресурсом который может использоваться с такими функциями как eio_get_last_error()
function eio chmod $pri	приоритет запросов: eio_pri_default eio_pri_min eio_pri_max или null
function eio chmod $data	произвольная переменная передаваемая в callback -функцию
function eio chmod $callback	функция callback вызывается при завершении запроса
function eio chmod $data	является пользовательскими данными переданными в запросе
function eio chmod $path	путь к файлу или директории внимание избегайте относительных путей
function resource eio chmod	eio_chmod() возвращает указатель на запрос при успехе или false при ошибке
function resource eio chmod string $path int $mode int $pri callable $callback mixed $data	изменяет права доступа к файлу / директории
function eio chown $path	путь к файлу или директории
function eio chown $result	содержит результирующее значение зависящее от запроса; обычно это значение возвращаемое соответствующим системным вызовом
function eio chown $uid	код пользователя
function eio chown $req	является опциональным запрашиваемым ресурсом который может использоваться с такими функциями как eio_get_last_error()
function eio chown $pri	приоритет запросов: eio_pri_default eio_pri_min eio_pri_max или null
function eio chown $gid	код группы
function eio chown $data	произвольная переменная передаваемая в callback -функцию
function eio chown $callback	функция callback вызывается при завершении запроса
function eio chown $data	является пользовательскими данными переданными в запросе
function resource eio chown	eio_chown() возвращает указатель на запрос при успехе или false при ошибке
function resource eio chown string $path int $uid int $gid int $pri callable $callback mixed $data	изменяет права доступа к файлу / директории
function eio close $result	содержит результирующее значение зависящее от запроса; обычно это значение возвращаемое соответствующим системным вызовом
function eio close $fd	поток указатель на сокет socket resource или числовой дескриптор файла
function eio close $pri	приоритет запросов: eio_pri_default eio_pri_min eio_pri_max или null
function eio close $data	произвольная переменная передаваемая в callback -функцию
function eio close $callback	функция callback вызывается при завершении запроса
function eio close $data	является пользовательскими данными переданными в запросе
function eio close $req	является опциональным запрашиваемым ресурсом который может использоваться с такими функциями как eio_get_last_error()
function resource eio close	eio_close() возвращает указатель на запрос при успехе или false при ошибке
function resource eio close mixed $fd int $pri callable $callback mixed $data	close file
function eio dup2 $result	содержит результирующее значение зависящее от запроса; обычно это значение возвращаемое соответствующим системным вызовом
function eio dup2 $fd2	целевой поток указатель на сокет socket resource или нумерованный дескриптор файла
function eio dup2 $req	является опциональным запрашиваемым ресурсом который может использоваться с такими функциями как eio_get_last_error()
function eio dup2 $pri	приоритет запросов: eio_pri_default eio_pri_min eio_pri_max или null
function eio dup2 $data	произвольная переменная передаваемая в callback -функцию
function eio dup2 $callback	функция callback вызывается при завершении запроса
function eio dup2 $data	является пользовательскими данными переданными в запросе
function eio dup2 $fd	исходный поток указатель на сокет socket resource или нумерованный дескриптор файла
function resource eio dup2	eio_dup2() возвращает указатель на запрос при успехе или false при ошибке
function resource eio dup2 mixed $fd mixed $fd2 int $pri callable $callback mixed $data	создает дубликат дескриптора файла
function eio fchmod $mode	новые права доступа
function eio fchmod $result	содержит результирующее значение зависящее от запроса; обычно это значение возвращаемое соответствующим системным вызовом
function eio fchmod $req	является опциональным запрашиваемым ресурсом который может использоваться с такими функциями как eio_get_last_error()
function eio fchmod $pri	приоритет запросов: eio_pri_default eio_pri_min eio_pri_max или null
function eio fchmod $fd	поток указатель на сокет или числовой дескриптор файла например возвращенный eio_open()
function eio fchmod $data	произвольная переменная передаваемая в callback -функцию
function eio fchmod $callback	функция callback вызывается при завершении запроса
function eio fchmod $data	является пользовательскими данными переданными в запросе
function resource eio fchmod	eio_fchmod() возвращает указатель на запрос при успехе или false при ошибке
function resource eio fchmod mixed $fd int $mode int $pri callable $callback mixed $data	изменяет права доступа к файлу
function eio fdatasync $result	содержит результирующее значение зависящее от запроса; обычно это значение возвращаемое соответствующим системным вызовом
function eio fdatasync $req	является опциональным запрашиваемым ресурсом который может использоваться с такими функциями как eio_get_last_error()
function eio fdatasync $pri	приоритет запросов: eio_pri_default eio_pri_min eio_pri_max или null
function eio fdatasync $fd	поток указатель на сокет или числовой дескриптор файла например возвращенный eio_open()
function eio fdatasync $data	произвольная переменная передаваемая в callback -функцию
function eio fdatasync $callback	функция callback вызывается при завершении запроса
function eio fdatasync $data	является пользовательскими данными переданными в запросе
function resource eio fdatasync	eio_fdatasync() возвращает указатель на запрос при успехе или false при ошибке
function resource eio fdatasync mixed $fd int $pri callable $callback mixed $data	синхронизирует текущее состояние файла с физическим устройством
function eio fstat $result	содержит результирующее значение зависящее от запроса; обычно это значение возвращаемое соответствующим системным вызовом
function eio fstat $req	является опциональным запрашиваемым ресурсом который может использоваться с такими функциями как eio_get_last_error()
function eio fstat $pri	приоритет запросов: eio_pri_default eio_pri_min eio_pri_max или null
function eio fstat $data	произвольная переменная передаваемая в callback -функцию
function eio fstat $callback	функция callback вызывается при завершении запроса
function eio fstat $data	является пользовательскими данными переданными в запросе
function eio fstat $fd	поток указатель на сокет или числовой дескриптор файла
function resource eio fstat	eio_busy() возвращает указатель на запрос при успехе или false при ошибке
function resource eio fstat mixed $fd int $pri callable $callback mixed $data	возвращает статус файла
function eio fstatvfs $result	содержит результирующее значение зависящее от запроса; обычно это значение возвращаемое соответствующим системным вызовом
function eio fstatvfs $req	является опциональным запрашиваемым ресурсом который может использоваться с такими функциями как eio_get_last_error()
function eio fstatvfs $pri	приоритет запросов: eio_pri_default eio_pri_min eio_pri_max или null
function eio fstatvfs $data	произвольная переменная передаваемая в callback -функцию
function eio fstatvfs $callback	функция callback вызывается при завершении запроса
function eio fstatvfs $data	является пользовательскими данными переданными в запросе
function eio fstatvfs $fd	файловый дескриптор файла примонтированной файловой системы
function resource eio fstatvfs	eio_fstatvfs() возвращает указатель на запрос при успехе или false при ошибке
function resource eio fstatvfs mixed $fd int $pri callable $callback mixed $data	возвращает статистику файловой системы
function eio futime $mtime	время последнего изменения
function eio futime $result	содержит результирующее значение зависящее от запроса; обычно это значение возвращаемое соответствующим системным вызовом
function eio futime $req	является опциональным запрашиваемым ресурсом который может использоваться с такими функциями как eio_get_last_error()
function eio futime $pri	приоритет запросов: eio_pri_default eio_pri_min eio_pri_max или null
function eio futime $fd	поток указатель на сокет или числовой дескриптор файла возвращенный к примеру eio_open()
function eio futime $data	произвольная переменная передаваемая в callback -функцию
function eio futime $atime	время последнего доступа
function eio futime $callback	функция callback вызывается при завершении запроса
function eio futime $data	является пользовательскими данными переданными в запросе
function resource eio futime	eio_futime() возвращает указатель на запрос при успехе или false при ошибке
function resource eio futime mixed $fd float $atime float $mtime int $pri callable $callback mixed $data	изменяет дату и время последней модификации и доступа к файлу
function eio get last error $req	указатель на ресурс
function string eio get last error	eio_get_last_error() возвращает строку содержащую последнюю ошибку связанную с указателем на ресурс req
function string eio get last error resource $req	возвращает последнюю ошибку связанную с указателем на ресурс
function eio grp add $grp	указатель на группу запросов возвращённый eio_grp()
function eio grp add $req	указатель на ресурс
function void eio grp add resource $grp resource $req	добавляет запрос в группу запросов
function eio grp cancel $grp	указатель на группу запросов возвращенный eio_grp()
function void eio grp cancel resource $grp	отменяет группу запросов
function eio grp limit $grp	указатель на группу ресурсов
function eio grp limit $limit	максимальное количество ресурсов в группе
function void eio grp limit resource $grp int $limit	устанавливает предельное количество запросов в группе
function eio grp $result	содержит результирующее значение зависящее от запроса; обычно это значение возвращаемое соответствующим системным вызовом
function eio grp $callback	функция callback вызывается при завершении запроса
function eio grp $data	является пользовательскими данными переданными в запросе
function eio grp $data	произвольная переменная передаваемая в callback -функцию
function eio grp $req	является опциональным запрашиваемым ресурсом который может использоваться с такими функциями как eio_get_last_error()
function resource eio grp	eio_grp() возвращает указатель на запрос при успехе или false при ошибке
function resource eio grp callable $callback string $data	создает группу запросов
function void eio init	re- initialize eio
function eio link $result	содержит результирующее значение зависящее от запроса; обычно это значение возвращаемое соответствующим системным вызовом
function eio link $req	является опциональным запрашиваемым ресурсом который может использоваться с такими функциями как eio_get_last_error()
function eio link $pri	приоритет запросов: eio_pri_default eio_pri_min eio_pri_max или null
function eio link $data	произвольная переменная передаваемая в callback -функцию
function eio link $callback	функция callback вызывается при завершении запроса
function eio link $data	является пользовательскими данными переданными в запросе
function eio link $path	путь к файлу
function eio link $new_path	имя жесткой ссылки
function resource eio link string $path string $new_path int $pri callable $callback mixed $data	создает жесткую ссылку на файл
function eio lstat $result	содержит результирующее значение зависящее от запроса; обычно это значение возвращаемое соответствующим системным вызовом
function eio lstat $req	является опциональным запрашиваемым ресурсом который может использоваться с такими функциями как eio_get_last_error()
function eio lstat $pri	приоритет запросов: eio_pri_default eio_pri_min eio_pri_max или null
function eio lstat $data	произвольная переменная передаваемая в callback -функцию
function eio lstat $callback	функция callback вызывается при завершении запроса
function eio lstat $data	является пользовательскими данными переданными в запросе
function eio lstat $path	путь к файлу
function resource eio lstat	eio_lstat() возвращает указатель на запрос при успехе или false при ошибке
function resource eio lstat string $path int $pri callable $callback mixed $data	возвращает статус файла
function eio mknod $data	данные которые необходимо передать в callback-функцию callback
function eio mknod $result	содержит результирующее значение зависящее от запроса; обычно это значение возвращаемое соответствующим системным вызовом
function eio mknod $req	является опциональным запрашиваемым ресурсом который может использоваться с такими функциями как eio_get_last_error()
function eio mknod $pri	приоритет запросов: eio_pri_default eio_pri_min eio_pri_max или null
function eio mknod $data	является пользовательскими данными переданными в запросе
function eio mknod $callback	функция callback вызывается при завершении запроса
function eio mknod $dev	при создании файла типа eio_s_ifchr или eio_s_ifblk параметр dev задает верхнюю и нижнюю границы нумерации специальных файлов устройств
function eio mknod $mode	задает разрешения для файла и его тип
function eio mknod $path	путь к новому файлу
function resource eio mknod	eio_mknod() возвращает ресурс запроса в случае успеха операции либо false в случае ошибки
function resource eio mknod string $path int $mode int $dev int $pri callable $callback mixed $data	создает специальный или обычный файл
function eio nop $result	содержит результирующее значение зависящее от запроса; обычно это значение возвращаемое соответствующим системным вызовом
function eio nop $req	является опциональным запрашиваемым ресурсом который может использоваться с такими функциями как eio_get_last_error()
function eio nop $pri	приоритет запросов: eio_pri_default eio_pri_min eio_pri_max или null
function eio nop $data	данные которые будут переданы в callback-функцию callback
function eio nop $callback	функция callback вызывается при завершении запроса
function eio nop $data	является пользовательскими данными переданными в запросе
function resource eio nop	eio_nop() возвращает ресурс запроса либо false в случае ошибки
function resource eio nop int $pri callable $callback mixed $data	проход по циклу запроса не совершая никаких операций
function int eio npending	eio_npending() возвращает число завершенных но необработанных процессов
function int eio npending	возвращает число завершенных но необработанных процессов
function int eio nreqs	eio_nreqs() возвращает число запросов которые предстоит выполнить
function int eio nreqs	возвращает число запросов которые предстоит выполнить
function eio open $result	содержит результирующее значение зависящее от запроса; обычно это значение возвращаемое соответствующим системным вызовом
function eio open $path	путь к открываемому файлу
function eio open $req	является опциональным запрашиваемым ресурсом который может использоваться с такими функциями как eio_get_last_error()
function eio open $data	данные которые будут передаваться в callback-функцию callback
function eio open $pri	приоритет запросов: eio_pri_default eio_pri_min eio_pri_max или null
function eio open $mode	комбинация из одной или нескольких констант eio_s_i* через побитовое или
function eio open $flags	комбинация из одной или нескольких констант eio_o_*
function eio open $callback	функция callback вызывается при завершении запроса
function eio open $data	является пользовательскими данными переданными в запросе
function resource eio open	eio_open() возвращает дескриптор файла через аргумент result callback-функции callback
function resource eio open string $path int $flags int $mode int $pri callable $callback mixed $data	открывает файл
function int eio poll	если любой вызов запроса возвращает ненулевое значение возвращается это значение
function int eio poll	может быть вызвана когда имеются запросы ожидающие выполнения
function eio read $data	данные которые необходимо передать в функцию callback
function eio read $length	максимальное считываемое число байт
function eio read $result	содержит результирующее значение зависящее от запроса; обычно это значение возвращаемое соответствующим системным вызовом
function eio read $offset	смещение в файле
function eio read $req	является опциональным запрашиваемым ресурсом который может использоваться с такими функциями как eio_get_last_error()
function eio read $pri	приоритет запросов: eio_pri_default eio_pri_min eio_pri_max или null
function eio read $callback	функция callback вызывается при завершении запроса
function eio read $data	является пользовательскими данными переданными в запросе
function eio read $fd	поток ресурс сокета или числовой файловый описатель
function resource eio read	eio_read() передает считанные данные через параметр result в функцию callback
function resource eio read mixed $fd int $length int $offset int $pri callable $callback mixed $data	читает данные из файла начиная с заданного смещения
function eio realpath $path	краткий или относительный путь
function resource eio realpath string $path int $pri callable $callback string $data	получает абсолютный приведенный к каноническому виду путь
function eio seek $data	данные которые необходимо передать в функцию callback
function eio seek $result	содержит результирующее значение зависящее от запроса; обычно это значение возвращаемое соответствующим системным вызовом
function eio seek $length	число байт которое необходимо прочитать
function eio seek $req	является опциональным запрашиваемым ресурсом который может использоваться с такими функциями как eio_get_last_error()
function eio seek $pri	приоритет запросов: eio_pri_default eio_pri_min eio_pri_max или null
function eio seek $offset	начальная позиция с которой будут читаться данные
function eio seek $callback	функция callback вызывается при завершении запроса
function eio seek $data	является пользовательскими данными переданными в запросе
function eio seek $fd	поток ресурс сокета или числовой описатель файла
function resource eio seek	eio_seek() возвращает ресурс запроса или false в случае ошибки
function resource eio seek mixed $fd int $offset int $whence int $pri callable $callback mixed $data	перемещает файловый указатель файла fd на число байт offset в соответствии с директивой whence
function eio set max poll time $nseconds	количество секунд
function void eio set max poll time float $nseconds	устанавливает максимальное время выполнения
function eio stat $result	содержит результирующее значение зависящее от запроса; обычно это значение возвращаемое соответствующим системным вызовом
function eio stat $req	является опциональным запрашиваемым ресурсом который может использоваться с такими функциями как eio_get_last_error()
function eio stat $pri	приоритет запросов: eio_pri_default eio_pri_min eio_pri_max или null
function eio stat $data	произвольная переменная передаваемая в callback -функцию
function eio stat $callback	функция callback вызывается при завершении запроса
function eio stat $data	является пользовательскими данными переданными в запросе
function eio stat $path	путь к файлу
function resource eio stat	eio_stat() возвращает указатель на запрос при успехе или false при ошибке
function resource eio stat string $path int $pri callable $callback mixed $data	возвращает статус файла
function eio statvfs $result	содержит результирующее значение зависящее от запроса; обычно это значение возвращаемое соответствующим системным вызовом
function eio statvfs $req	является опциональным запрашиваемым ресурсом который может использоваться с такими функциями как eio_get_last_error()
function eio statvfs $pri	приоритет запросов: eio_pri_default eio_pri_min eio_pri_max или null
function eio statvfs $callback	функция callback вызывается при завершении запроса
function eio statvfs $data	произвольная переменная передаваемая в callback -функцию
function eio statvfs $path	имя любого файла в примонтированной файловой системе
function eio statvfs $data	является пользовательскими данными переданными в запросе
function resource eio statvfs	eio_stat() возвращает указатель на запрос при успехе или false при ошибке
function resource eio statvfs string $path int $pri callable $callback mixed $data	возвращает статистику файловой системы
function eio truncate $result	содержит результирующее значение зависящее от запроса; обычно это значение возвращаемое соответствующим системным вызовом
function eio truncate $req	является опциональным запрашиваемым ресурсом который может использоваться с такими функциями как eio_get_last_error()
function eio truncate $pri	приоритет запросов: eio_pri_default eio_pri_min eio_pri_max или null
function eio truncate $data	произвольная переменная передаваемая в callback -функцию
function eio truncate $callback	функция callback вызывается при завершении запроса
function eio truncate $data	является пользовательскими данными переданными в запросе
function eio truncate $offset	смещение от начала файла
function eio truncate $path	путь к файлу
function resource eio truncate	eio_busy() возвращает указатель на запрос при успехе или false при ошибке
function resource eio truncate string $path int $offset int $pri callable $callback mixed $data	урезает размер файла
function eio unlink $result	содержит результирующее значение зависящее от запроса; обычно это значение возвращаемое соответствующим системным вызовом
function eio unlink $req	является опциональным запрашиваемым ресурсом который может использоваться с такими функциями как eio_get_last_error()
function eio unlink $pri	приоритет запросов: eio_pri_default eio_pri_min eio_pri_max или null
function eio unlink $data	произвольная переменная передаваемая в callback -функцию
function eio unlink $callback	функция callback вызывается при завершении запроса
function eio unlink $data	является пользовательскими данными переданными в запросе
function eio unlink $path	путь к файлу
function resource eio unlink	eio_unlink() возвращает указатель на запрос при успехе или false при ошибке
function resource eio unlink string $path int $pri callable $callback mixed $data	удаляет файл или одну из жестких ссылок на него
function end $array	массив
function mixed end	возвращает значение последнего элемента или false для пустого массива
function mixed end array $array	устанавливает внутренний указатель массива на его последний элемент
function eregi replace $pattern	расширенное регулярное выражение posix
function eregi replace $replacement	если pattern содержит подстроки в скобках replacement может содержать подстроки вида \ digit которые будут заменены текстом совпавшим с digit-подстрокой в скобках; \0 воспроизведет все содержимое строки
function eregi replace $string	исходная строка
function string eregi replace	возвращается измененная строка
function string eregi replace string $pattern string $replacement string $string	осуществляет замену по регулярному выражению без учета регистра
function eregi $string	входная строка
function eregi $regs	если совпадения найдены для подстрок в скобках из pattern и функция вызывается с третьим аргументом regs совпадения будут сохранены в элементах массива regs
function eregi $pattern	регистронезависимое регулярное выражение
function int eregi	возвращает длину совпавшей строки если совпадения с pattern найдены в string или false если совпадений не найдено или возникла ошибка
function int eregi string $pattern string $string array $regs	совпадение с регулярным выражением без учёта регистра
function array error get last	возвращает ассоциативный массив с описанием последней произошедшей ошибки
function array error get last	получение информации о последней произошедшей ошибке
function error log $destination	назначение
function error log $extra_headers	дополнительные заголовки
function error log $message	сообщение об ошибке которое должно быть логировано
function error log $message_type	определяет куда отправлять ошибку
function bool error log	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool error log string $message int $message_type string $destination string $extra_headers	отправляет сообщение об ошибке заданному обработчику ошибок
function error reporting $level	новое значение уровня error_reporting
function int error reporting	возвращает старое значение уровня error_reporting либо текущее значение если аргумент level не задан
function int error reporting int $level	задает какие ошибки php попадут в отчет
function escapeshellarg $arg	аргумент который будет экранирован
function string escapeshellarg	экранированная строка
function string escapeshellarg string $arg	экранирует строку для того чтобы она могла быть использована как аргумент командной строки
function escapeshellcmd $command	команда которая будет экранирована
function string escapeshellcmd	экранированная строка
function string escapeshellcmd string $command	экранирует метасимволы командной строки
function exif imagetype $filename	изображение тип которого требуется определить
function int exif imagetype	если корректная сигнатура обнаружена функция вернет соответствующую типу изображения константу
function int exif imagetype string $filename	определение типа изображения
function exif thumbnail $width	возвращаемая ширина эскиза
function exif thumbnail $imagetype	возвращаемый тип эскиза
function exif thumbnail $height	возвращаемая высота эскиза
function exif thumbnail $filename	имя файла изображения
function string exif thumbnail	возвращает встроенный эскиз или false если изображение не содержит эскиза
function string exif thumbnail string $filename int $width int $height int $imagetype	получает встроенный эскиз tiff или jpeg изображения
function exit $status	если параметр status задан в виде строки то эта функция выведет содержимое status перед выходом
function void exit string $status	выводит сообщение и прекращает выполнение текущего скрипта
function exp $arg	степень для возведения
function float exp	e возводится в степень arg
function float exp float $arg	вычисляет число e в степени
function explode $string	входная строка
function explode $limit	если аргумент limit является положительным возвращаемый массив будет содержать максимум limit элементов при этом последний элемент будет содержать остаток строки string
function explode $delimiter	разделитель
function array explode	возвращает массив array строк string созданный делением параметра string по границам указанным параметром delimiter
function array explode string $delimiter string $string int $limit	разбивает строку с помощью разделителя
function extract $EXTR_OVERWRITE	если переменная с таким именем существует она будет перезаписана
function extract $EXTR_PREFIX_SAME	если переменная с таким именем существует к её имени будет добавлен префикс определённый параметром prefix
function extract $flags	параметр flags определяет способ трактования неправильных / числовых ключей и коллизий
function extract $EXTR_PREFIX_INVALID	добавить префикс prefix только к некорректным / числовым именам переменных
function extract $EXTR_REFS	извлечь переменные как ссылки
function extract $EXTR_PREFIX_IF_EXISTS	создать только префикс-версии переменных если версия данной переменной без префикса уже существует в текущей символьной таблице
function extract $array	ассоциативный массив
function extract $EXTR_SKIP	если переменная с таким именем существует ее текущее значение не будет перезаписано
function extract $EXTR_PREFIX_ALL	добавить префикс prefix ко всем именам переменных
function extract $EXTR_IF_EXISTS	перезаписать только переменные уже имеющиеся в текущей таблице символов в противном случае не делать ничего
function extract $prefix	обратите внимание что prefix имеет значение только если flags установлен в extr_prefix_same extr_prefix_all extr_prefix_invalid или extr_prefix_if_exists
function int extract	возвращает количество переменных успешно импортированных в текущую таблицу символов
function int extract array $array int $flags string $prefix	импортирует переменные из массива в текущую таблицу символов
function fbsql affected rows $link_identifier	идентификатор соединения frontbase полученный из fbsql_connect() или fbsql_pconnect()
function int fbsql affected rows	если последний запрос не был произведен то функция возвращает -1
function int fbsql affected rows resource $link_identifier	возвращает число затронутых строк в предыдущем frontbase действии
function fclose $handle	дескриптор должен быть корректным и указывать на файл открытый ранее с помощью функции fopen() или fsockopen()
function bool fclose	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool fclose resource $handle	закрывает открытый дескриптор файла
function fdf close $fdf_document	дескриптор fdf-документа возвращенный функциями fdf_create() fdf_open() или fdf_open_string()
function void fdf close resource $fdf_document	закрывает fdf-документ
function fdf get encoding $fdf_document	дескриптор fdf-документа возвращенный функциями fdf_create() fdf_open() или fdf_open_string()
function string fdf get encoding	возвращает кодировку в виде строки
function string fdf get encoding resource $fdf_document	получает значение ключа / encoding
function feof $handle	указатель на файл должен быть корректным и указывать на файл успешно открытый функциями fopen() или fsockopen() и все еще не закрытым функцией fclose()
function bool feof	возвращает true если указатель файла указывает на eof или произошла ошибка в том числе таймаут сокета иначе возвращает false
function bool feof resource $handle	проверяет достигнут ли конец файла
function fgetc $handle	указатель на файл должен быть корректным и указывать на файл успешно открытый функциями fopen() или fsockopen() и все еще не закрытым функцией fclose()
function string fgetc	возвращает строку с одним символом прочтенным из файла на который указывает handle
function string fgetc resource $handle	считывает символ из файла
function fgetss $allowable_tags	можно использовать третий необязательный параметр для указания тегов которые не нужно вырезать
function fgetss $length	длина получаемых данных
function fgetss $handle	указатель на файл должен быть корректным и указывать на файл успешно открытый функциями fopen() или fsockopen() и все еще не закрытым функцией fclose()
function string fgetss	возвращает строку из length - 1 байт прочтенных из файла на который указывает дескриптор handle с вырезанными html и php тегами
function string fgetss resource $handle int $length string $allowable_tags	прочитать строку из файла и отбросить html-теги
function file exists $filename	путь к файлу или каталогу
function bool file exists	возвращает true если файл или каталог указанный параметром filename существует иначе возвращает false
function bool file exists string $filename	проверяет наличие указанного файла или каталога
function file put contents $context	корректный ресурс контекста созданный с помощью функции stream_context_create()
function file put contents $flags	значением параметра flags может быть любая комбинация следующих флагов соединенных бинарным оператором или |
function file put contents $filename	путь к записываемому файлу
function file put contents $data	записываемые данные
function int file put contents	функция возвращает количество записанных байт в файл или false в случае ошибки
function int file put contents string $filename mixed $data int $flags resource $context	пишет строку в файл
function filectime $filename	путь к файлу
function int filectime	возвращает время последнего изменения файла или false в случае возникновения ошибки
function int filectime string $filename	возвращает время изменения индексного дескриптора файла
function filegroup $filename	путь к файлу
function int filegroup	возвращает идентификатор группы файла или false в случае ошибки
function int filegroup string $filename	получает идентификатор группы файла
function filemtime $filename	путь к файлу
function int filemtime	возвращает время последнего изменения указанного файла или false в случае возникновения ошибки
function int filemtime string $filename	возвращает время последнего изменения файла
function fileperms $filename	путь к файлу
function int fileperms	возвращает права доступа на указанный файл в числовом виде
function int fileperms string $filename	возвращает информацию о правах на файл
function filesize $filename	путь к файлу
function int filesize	возвращает размер указанного файла в байтах или false и генерирует ошибку уровня e_warning в случае возникновения ошибки
function int filesize string $filename	возвращает размер файла
function filetype $filename	путь к файлу
function string filetype	возвращает тип файла
function string filetype string $filename	возвращает тип файла
function filter var array $definition	массив определяющий параметры
function filter var array $add_empty	добавляет в результат отсутствующие ключи со значением null
function filter var array $data	массив со строковыми ключами содержащий данные для фильтрации
function mixed filter var array	массив содержащий значения запрошенных переменных в случае успеха или false в случае возникновения ошибки
function mixed filter var array array $data mixed $definition bool $add_empty	принимает несколько переменных и при необходимости фильтрует их
function floatval $var	может быть любого скалярного типа
function float floatval	значение заданной переменной в виде числа с плавающей точкой
function float floatval mixed $var	возвращает значение переменной в виде числа с плавающей точкой
function fnmatch $string	проверяемая строка
function fnmatch $pattern	шаблон подстановки оболочки операционной системы
function fnmatch $flags	значением параметра flags может быть любая комбинация следующих флагов объединенных с помощью бинарного оператора или |)
function bool fnmatch	при совпадении возвращает true иначе возвращает false
function bool fnmatch string $pattern string $string int $flags	проверяет совпадение имени файла с шаблоном
function fpassthru $handle	указатель на файл должен быть корректным и указывать на файл успешно открытый функциями fopen() или fsockopen() и все еще не закрытым функцией fclose()
function int fpassthru	в случае возникновения ошибки fpassthru() возвращает false
function int fpassthru resource $handle	выводит все оставшиеся данные из файлового указателя
function fprintf $format	описание параметра format смотрите в описании функции sprintf()
function fprintf $handle	указатель resource на файл обычно создаваемый с помощью функции fopen()
function int fprintf	возвращает длину записанной строки
function int fprintf resource $handle string $format mixed $args	записывает отформатированную строку в поток
function frenchtojd $month	месяц в виде числа от 1 для месяца vendémiaire до 13 для периода 5-6 дней в конце каждого года
function frenchtojd $year	год в виде числа между 1 и 14
function frenchtojd $day	день в виде числа от 1 до 30
function int frenchtojd	число integer дней в юлианском летоисчислении для заданной даты по французскому республиканскому календарю
function int frenchtojd int $month int $day int $year	преобразует дату французского республиканского календаря в количество дней в юлианском летоисчислении
function fscanf $format	указанный формат в соответствии с документацией sprintf()
function fscanf $handle	указатель resource на файл обычно создаваемый с помощью функции fopen()
function fscanf	необязательные присваиваемые значения
function mixed fscanf	если в функцию переданы только два аргумента обработанные значения будут возвращены в виде массива
function mixed fscanf resource $handle string $format	обрабатывает данные из файла в соответствии с форматом
function fseek $handle	указатель resource на файл обычно создаваемый с помощью функции fopen()
function fseek $offset	смещение
function fseek $whence	значениями whence являются: seek_set - устанавливает смещение в offset байт
function int fseek	в случае успеха возвращает 0; в противном случае возвращает -1
function int fseek resource $handle int $offset int $whence	устанавливает смещение в файловом указателе
function fsockopen $errno	если этот параметр предоставить то в случае ошибки системного вызова функции connect() он будет принимать номер этой ошибки
function fsockopen $port	номер порта
function fsockopen $timeout	таймаут соединения в секундах
function fsockopen $errstr	сообщение об ошибке в виде строки
function fsockopen $hostname	если установлена поддержка openssl можно использовать ssl или tls протоколы соединений поверх tcp / ip при подключении к удаленному хосту
function resource fsockopen	fsockopen() возвращает файловый указатель который можно передавать в функции работающие с файлами такие как fgets() fgetss() fwrite() fclose() и feof()
function resource fsockopen string $hostname int $port int $errno string $errstr float $timeout	открывает соединение с интернет сокетом или доменным сокетом unix
function ftp alloc $ftp_stream	идентификатор соединения с ftp-сервером
function ftp alloc $filesize	количество резервируемых байт
function ftp alloc $result	текстовое представление ответа сервера будет возвращено по ссылке в аргумент result если он указан
function bool ftp alloc	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool ftp alloc resource $ftp_stream int $filesize string $result	резервирует место на диске для закачиваемого файла
function ftp chdir $ftp_stream	идентификатор соединения с ftp-сервером
function ftp chdir $directory	целевая директория
function bool ftp chdir	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool ftp chdir resource $ftp_stream string $directory	изменяет текущую директорию на ftp сервере
function ftp chmod $ftp_stream	идентификатор соединения с ftp-сервером
function ftp chmod $filename	удалённый файл
function ftp chmod $mode	новые права доступа указанные в виде восьмеричного значения
function int ftp chmod	возвращает новые права доступа к файлу в случае успеха или false в случае ошибки
function int ftp chmod resource $ftp_stream int $mode string $filename	устанавливает права доступа к файлу
function ftp close $ftp_stream	идентификатор соединения с ftp-сервером
function bool ftp close	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool ftp close resource $ftp_stream	закрывает соединение с ftp-сервером
function ftp connect $port	этот аргумент указывает альтернативный порт для подключения
function ftp connect $timeout	этот аргумент указывает таймаут для всех последующих сетевых операций
function ftp connect $host	адрес ftp-сервера
function resource ftp connect	возвращает поток ftp в случае успешного выполнения или false в случае ошибки
function resource ftp connect string $host int $port int $timeout	устанавливает соединение с ftp-сервером
function ftp delete $ftp_stream	идентификатор соединения с ftp-сервером
function ftp delete $path	удаляемый файл
function bool ftp delete	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool ftp delete resource $ftp_stream string $path	удаляет файл на ftp-сервере
function ftp exec $ftp_stream	идентификатор соединения с ftp-сервером
function ftp exec $command	команда для выполнения
function bool ftp exec	возвращает true в случае успешного выполнения команды сервер отправляет код ответа: 200 ; в противном случае возвращает false
function bool ftp exec resource $ftp_stream string $command	запрашивает выполнение команды на ftp-сервере
function ftp fget $ftp_stream	идентификатор соединения с ftp-сервером
function ftp fget $remote_file	путь к удалённому файлу
function ftp fget $handle	открытый файловый дескриптор в который будут сохранены данные
function ftp fget $mode	режим передачи
function ftp fget $resumepos	позиция начала загрузки в удаленном файле
function bool ftp fget	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool ftp fget resource $ftp_stream resource $handle string $remote_file int $mode int $resumepos	скачивает файл с ftp-сервера и сохраняет его в предварительно открытом файле
function ftp mdtm $remote_file	файл время модификации которого надо получить
function ftp mdtm $ftp_stream	идентификатор соединения с ftp сервером
function int ftp mdtm	возвращает время последней модификации виде временной метки unix или -1 в случае ошибки
function int ftp mdtm resource $ftp_stream string $remote_file	возвращает время последней модификации файла
function ftp nb fput $ftp_stream	идентификатор соединения с ftp-сервером
function ftp nb fput $remote_file	путь к удалённому файлу
function ftp nb fput $mode	режим передачи
function ftp nb fput $handle	открытый файловый дескриптор локального файла
function ftp nb fput $startpos	позиция начала загрузки в удаленном файле
function int ftp nb fput	возвращает ftp_failed ftp_finished или ftp_moredata
function int ftp nb fput resource $ftp_stream string $remote_file resource $handle int $mode int $startpos	загружает предварительно открытый файл на ftp-сервер в асинхронном режиме
function ftp nb get $ftp_stream	идентификатор соединения с ftp-сервером
function ftp nb get $remote_file	путь к удалённому файлу
function ftp nb get $local_file	путь к локальному файлу файл будет перезаписан если уже существует
function ftp nb get $mode	режим передачи
function ftp nb get $resumepos	позиция начала загрузки в удаленном файле
function int ftp nb get	возвращает ftp_failed ftp_finished или ftp_moredata
function int ftp nb get resource $ftp_stream string $local_file string $remote_file int $mode int $resumepos	скачивает файл с ftp-сервера в асинхронном режиме и сохраняет его в локальный файл
function ftp nb put $ftp_stream	идентификатор соединения с ftp-сервером
function ftp nb put $mode	режим передачи
function ftp nb put $remote_file	путь к файлу на сервере
function ftp nb put $local_file	путь к локальному файлу
function ftp nb put $startpos	позиция в удаленном файле в которую начинается загрузка
function int ftp nb put	возвращает ftp_failed ftp_finished или ftp_moredata
function int ftp nb put resource $ftp_stream string $remote_file string $local_file int $mode int $startpos	загружает файл на ftp сервер в асинхронном режиме
function ftp pasv $ftp_stream	идентификатор соединения с ftp-сервером
function ftp pasv $pasv	если true пассивный режим будет включен иначе выключен
function bool ftp pasv	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool ftp pasv resource $ftp_stream bool $pasv	включает или выключает пассивный режим
function ftp put $ftp_stream	идентификатор соединения с ftp-сервером
function ftp put $remote_file	путь к файлу на ftp-сервере
function ftp put $startpos	задает позицию в удаленном файле в которую начнется загрузка
function ftp put $local_file	путь к локальному файлу
function ftp put $mode	задает режим передачи
function bool ftp put	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool ftp put resource $ftp_stream string $remote_file string $local_file int $mode int $startpos	загружает файл на ftp-сервер
function ftp raw $ftp_stream	идентификатор соединения с ftp-сервером
function ftp raw $command	команда
function array ftp raw	возвращает ответ сервера в виде массива строк
function array ftp raw resource $ftp_stream string $command	отправляет произвольную команду ftp-серверу
function ftp rawlist $ftp_stream	идентификатор соединения с ftp-сервером
function ftp rawlist $directory	имя директории на сервере
function ftp rawlist $recursive	если передано значение true серверу будет отправлена команда list -r
function mixed ftp rawlist	возвращает массив каждый элемент которого содержит одну строку ответа сервера
function mixed ftp rawlist resource $ftp_stream string $directory bool $recursive	возвращает подробный список файлов в заданной директории
function ftp set option $option	в настоящее время поддерживаются следующие параметры: поддерживаемые параметры ftp_timeout_sec устанавливает таймаут сетевых операций в секундах
function ftp set option $ftp_stream	идентификатор соединения с ftp сервером
function ftp set option $value	назначение этого аргумента зависит от значения параметра option
function bool ftp set option	возвращает true если параметр был установлен; false в противном случае
function bool ftp set option resource $ftp_stream int $option mixed $value	устанавливает параметры соединения с ftp сервером
function ftp site $ftp_stream	идентификатор соединения с ftp-сервером
function ftp site $command	команда site
function bool ftp site	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool ftp site resource $ftp_stream string $command	отправляет серверу команду site
function ftp size $ftp_stream	идентификатор соединения с ftp-сервером
function ftp size $remote_file	имя файла на сервере
function int ftp size	возвращает размер файла или -1 при возникновении ошибки
function int ftp size resource $ftp_stream string $remote_file	возвращает размер указанного файла
function ftp ssl connect $timeout	задает таймаут для всех операций с этим соединением
function ftp ssl connect $port	задает порт на котором устанавливается соединение
function ftp ssl connect $host	адрес ftp-сервера
function resource ftp ssl connect	возвращает ssl-ftp поток в случае успеха или false при возникновении ошибки
function resource ftp ssl connect string $host int $port int $timeout	устанавливает соединение с ftp-сервером через ssl
function func get arg $arg_num	номер аргумента
function mixed func get arg	возвращает указанный аргумент или false в случае ошибки
function mixed func get arg int $arg_num	возвращает элемент из списка аргументов
function function exists $function_name	имя функции строка
function bool function exists	возвращает true если function_name существует и является функцией иначе возвращается false
function bool function exists string $function_name	возвращает true если указанная функция определена
function void gc disable	отключает сборщик циклических ссылок
function array gd info	возвращает ассоциативный массив
function array gd info	вывод информации о текущей установленной gd библиотеке
function geoip country code by name $hostname	имя хоста или ip-адрес по которому будет вестись поиск
function string geoip country code by name	возвращает два символа содержащих код страны по iso 3166-1 при нахождении адреса в базе данных в противном случае false
function string geoip country code by name string $hostname	получить двухсимвольный код страны
function geoip country code3 by name $hostname	имя хоста или ip-адрес по которому будет вестись поиск
function string geoip country code3 by name	возвращает три символа содержащих код континента по iso 3166-1 при нахождении адреса в базе данных в противном случае false
function string geoip country code3 by name string $hostname	получить трехсимвольный код страны
function geoip country name by name $hostname	имя хоста или ip-адрес по которому будет вестись поиск
function string geoip country name by name	возвращает полное название страны при нахождении адреса в базе данных в противном случае false
function string geoip country name by name string $hostname	получить полное название страны
function geoip database info $database	тип базы определяется целым числом integer
function string geoip database info	возвращает подходящую версию или null при ошибке
function string geoip database info int $database	возвращает информацию о базе geoip
function geoip db filename $database	тип базы определяется целым числом integer
function string geoip db filename	возвращает имя файла соответствующей базы или null при ошибке
function string geoip db filename int $database	возвращает имя файла соответствующей базы geoip
function array geoip db get all info	возвращает ассоциативный массив
function array geoip db get all info	возвращает подробную информацию обо всех типах базы geoip
function geoip id by name $hostname	имя хоста или ip адрес соединение с которыми проверяется
function int geoip id by name	возвращает тип соединения
function int geoip id by name string $hostname	возвращает тип интернет соединения
function geoip org by name $hostname	имя хоста или ip адрес
function string geoip org by name	возвращает имя организации в случае успеха или false если адрес не может быть найден в базе данных
function string geoip org by name string $hostname	возвращает название организации владеющей ip адресом
function geoip region by name $hostname	имя хоста или ip адрес данные о стране и регионе которого необходимо найти
function array geoip region by name	возвращает ассоциативный массив в случае успеха или false если адрес не будет найден в базе данных
function array geoip region by name string $hostname	возвращает коды страны и региона
function geoip region name by code $country_code	двухбуквенный код страны geoip_country_code_by_name()
function geoip region name by code $region_code	двухбуквенный или циферный код региона geoip_region_by_name()
function string geoip region name by code	возвращает название региона в случае успехе или false если страна и код региона не найдены в базе данных
function string geoip region name by code string $country_code string $region_code	возвращает название региона для выбранной страны и кода региона
function geoip time zone by country and region $region_code	двухбуквенный или цифровой код региона смотрите geoip_region_by_name()
function geoip time zone by country and region $country_code	двухбуквенный код страны смотрите geoip_country_code_by_name()
function string geoip time zone by country and region	возвращает временную зону в случае успеха или false если страна и одновременно код региона не могут быть найдены
function string geoip time zone by country and region string $country_code string $region_code	возвращает временную зону и код региона для некоторых стран
function get browser $return_array	если равен true то функция вернет массив array вместо объекта object
function get browser $user_agent	анализируется user agent
function mixed get browser	информация возвращается в виде объекта либо в виде архива который содержит различные данные к примеру мажорную и минорную версию браузера и строку id; true / false наличие функций браузера таких как фреймы javascript cookies и т
function mixed get browser string $user_agent bool $return_array	сообщает о возможностях браузера пользователя
function get cfg var $option	имя настройки конфигурации
function string get cfg var	возвращает текущее значение настройки конфигурации php option или false в случае ошибки
function string get cfg var string $option	извлекает значение настройки конфигурации php
function get class methods $class_name	the class name or an object instance
function array get class methods	возвращает массив имен методов объявленных в классе class_name
function array get class methods mixed $class_name	возвращает массив имен методов класса
function get class vars $class_name	имя класса
function array get class vars	возвращает ассоциативный массив объявленных свойств класса видимых из текущей области видимости с их значением по умолчанию
function array get class vars string $class_name	возвращает объявленные по умолчанию свойства класса
function array get declared classes	возвращает массив имен объявленных классов текущего скрипта
function array get declared classes	возвращает массив с именами объявленных классов
function get defined constants $categorize	использование этого аргумента дает возможность получить многомерный массив в котором в первом измерении будут содержаться категории констант а во втором соответствующие имена и значения
function array get defined constants	возвращает массив вида имя константы = > значение константы с возможностью сгруппировать его по имени расширения зарегистрировавшей константу
function array get defined constants bool $categorize	возвращает ассоциативный массив с именами и значениями всех предопределенных констант
function array get defined functions	эта функция возвращает многомерный массив содержащий список всех определённых функций встроенных и пользовательских
function array get defined functions	возвращает массив всех определённых функций
function array get defined vars	многомерный массив со всеми переменными
function array get defined vars	возвращает массив всех определенных переменных
function get extension funcs $module_name	имя модуля
function array get extension funcs	возвращает массив имен функций или false если module_name не является допустимым модулем
function array get extension funcs string $module_name	возвращает массив имен функций модуля
function get html translation table $table	указывает какую таблицу использовать для преобразований
function get html translation table $encoding	используемая кодировка
function get html translation table $flags	битовая маска состоящая из одного или нескольких перечисленных ниже флагов которые указывают какие кавычки будет содержать таблица а также для какого документа таблица предназначена
function array get html translation table	возвращает таблицу преобразований в виде массива с оригинальными символами в качестве ключей и сущностями в качестве значений
function array get html translation table int $table int $flags string $encoding	возвращает таблицу преобразований используемую функциями htmlspecialchars и htmlentities
function array get included files	возвращает массив имен всех файлов
function array get included files	возвращает массив имен включенных в скрипт файлов
function get loaded extensions $zend_extensions	возвращать только zend расширения или обычные расширения вроде mysqli
function array get loaded extensions	возвращает индексированный массив имен всех модулей
function array get loaded extensions bool $zend_extensions	возвращает массив имен всех скомпилированных и загруженных модулей
function bool get magic quotes gpc	возвращает 0 если magic_quotes_gpc выключен 1 в противном случае
function bool get magic quotes gpc	получение текущего значения настройки конфигурации magic_quotes_gpc
function get object vars $object	экземпляр объекта
function array get object vars	возвращает ассоциативный массив нестатических свойств объекта object доступных в данной области видимости
function array get object vars object $object	возвращает свойства указанного объекта
function get parent class $object	тестируемый объект или имя класса
function string get parent class	возвращает имя родительского класса если object является объектом или именем класса
function string get parent class mixed $object	возвращает имя родительского класса для объекта или класса
function get resource type $handle	определяемый дескриптор ресурса
function string get resource type	если данный параметр handle является ресурсом функция возвращает строку указывающую его тип
function string get resource type resource $handle	возвращает тип ресурса
function array getallheaders	ассоциативный массив содержащий все http-заголовки для данного запроса или false в случае возникновения ошибок
function array getallheaders	возвращает все заголовки http-запроса
function string getcwd	возвращает текущий рабочий каталог в случае успеха или false в случае ошибки
function string getcwd	получает имя текущего рабочего каталога
function getdate $timestamp	необязательный параметр timestamp представляет собой integer метку времени по умолчанию равную текущему локальному времени если timestamp не указан
function array getdate	возвращает ассоциативный массив array с информацией о параметре timestamp который содержит следующие элементы:
function array getdate int $timestamp	возвращает информацию о дате / времени
function gethostbyaddr $ip_address	ip-адрес узла
function string gethostbyaddr	возвращает имя узла в случае успеха исходный ip_address в случае ошибки или false в случае ошибочного ввода
function string gethostbyaddr string $ip_address	получает доменное имя узла соответствующее переданному ip-адресу
function gethostbynamel $hostname	имя узла
function array gethostbynamel	возвращает массив адресов ipv4 или false если hostname не может быть разрешено
function array gethostbynamel string $hostname	возвращает список адресов ipv4 соответствующих переданному доменному имени узла
function string gethostname	возвращает строку с именем хоста либо false в случае ошибки
function string gethostname	получает имя хоста
function getimagesizefromstring $imagedata	данные изображения в виде строки
function getimagesizefromstring $imageinfo	см
function array getimagesizefromstring	см
function array getimagesizefromstring string $imagedata array $imageinfo	получение размера изображения из строки данных
function int getlastmod	возвращает время последней модификации текущей страницы
function int getlastmod	определение времени последней модификации страницы
function getmxrr $weight	если передан массив weight то он будет заполнен полученной информацией о приоритетах
function getmxrr $hostname	доменное имя узла
function getmxrr $mxhosts	список найденных записей mx помещенный в массив mxhosts
function bool getmxrr	возвращает true если были найдены записи; возвращает false если записей не было найдено или произошла ошибка
function bool getmxrr string $hostname array $mxhosts array $weight	получает запись mx соответствующую переданному доменному имени узла
function int getmyinode	возвращает inode текущего скрипта в виде целого числа или false в случае ошибки
function int getmyinode	получение значения inode текущего скрипта
function getprotobynumber $number	номер протокола
function string getprotobynumber	возвращает имя протокола в виде строки string или false в случае возникновения ошибки
function string getprotobynumber int $number	получает имя протокола по номеру
function getservbyport $port	номер порта
function getservbyport $protocol	параметр protocol может быть tcp or udp в нижнем регистре
function string getservbyport	возвращает имя интернет службы в виде строки string
function string getservbyport int $port string $protocol	получает интернет службу соответствующую заданному порту и протоколу
function gettimeofday $return_float	если установлено в true вместо массива возвращается число с плавающей точкой
function mixed gettimeofday	по умолчанию возвращается array
function mixed gettimeofday bool $return_float	возвращает текущее время
function glob $pattern	шаблон
function glob $flags	допустимые флаги: glob_mark - добавляет слеш к каждой возвращаемой директории
function array glob	возвращает массив который содержит совпадающие файлы / директории пустой массив в случае отсутствия совпадения или false в случае ошибки
function array glob string $pattern int $flags	находит файловые пути совпадающие с шаблоном
function gmdate $timestamp	необязательный параметр timestamp представляет собой integer метку времени по умолчанию равную текущему локальному времени если timestamp не указан
function gmdate $format	формат выводимой даты string
function string gmdate	возвращает строку с форматированной датой
function string gmdate string $format int $timestamp	форматирует дату / время по гринвичу
function gmmktime $year	год
function gmmktime $is_dst	параметры всегда представляют собой дату по гринвичу поэтому параметр is_dst не влияет на результат
function gmmktime $month	количество месяцев прошедших с конца предыдущего года
function gmmktime $second	количество секунд прошедших от начала минуты указанной параметром minute
function gmmktime $hour	количество часов прошедших с начала дня указанного параметрами month day и year
function gmmktime $minute	количество минут прошедших от начала часа указанного параметром hour
function gmmktime $day	количество дней прошедших с конца предыдущего месяца
function int gmmktime	возвращает временную метку unix тип integer
function int gmmktime int $hour int $minute int $second int $month int $day int $year int $is_dst	возвращает метку времени unix для времени по гринвичу
function gmp abs $a	или ресурс resource gmp числа в php 5
function GMP gmp abs	возвращает абсолютную величину аргумента a в виде gmp числа
function GMP gmp abs GMP $a	абсолютная величина
function gmp add $b	второе слагаемое
function gmp add $a	второе слагаемое
function GMP gmp add	сумма аргументов в виде gmp числа
function GMP gmp add GMP $a GMP $b	сложение чисел
function gmp and $b	или ресурс resource gmp числа в php 5
function gmp and $a	или ресурс resource gmp числа в php 5
function GMP gmp and	результат побитового и сопоставления в виде gmp числа
function GMP gmp and GMP $a GMP $b	побитовое и
function gmp cmp $b	или ресурс resource gmp числа в php 5
function gmp cmp $a	или ресурс resource gmp числа в php 5
function int gmp cmp	возвращает положительное значение если a > b ноль если a = b и отрицательное значение если a < b
function int gmp cmp GMP $a GMP $b	сравнение чисел
function gmp div qr $n	делимое
function gmp div qr $d	делитель числа n
function gmp div qr $round	в документации к функции gmp_div_q() приведено описание аргумента round
function array gmp div qr	возвращает массив array в котором первый элемент содержит [n / d] целое частное а второй n - [n / d] * d (остаток от деления
function array gmp div qr GMP $n GMP $d int $round	деление чисел и получение частного и остатка
function gmp div r $n	делимое
function gmp div r $d	делитель числа n
function gmp div r $round	в документации к функции gmp_div_q() приведено описание аргумента round
function GMP gmp div r	остаток в виде gmp числа
function GMP gmp div r GMP $n GMP $d int $round	остаток от деления чисел
function gmp divexact $n	делимое
function gmp divexact $d	делитель числа a
function GMP gmp divexact	ресурс resource gmp числа в php 5
function GMP gmp divexact GMP $n GMP $d	деление чисел без остатка
function gmp gcd $b	или ресурс resource gmp числа в php 5
function gmp gcd $a	или ресурс resource gmp числа в php 5
function GMP gmp gcd	положительный нод чисел a и b
function GMP gmp gcd GMP $a GMP $b	вычисление наибольшего общего делителя
function gmp gcdext $b	или ресурс resource gmp числа в php 5
function gmp gcdext $a	или ресурс resource gmp числа в php 5
function array gmp gcdext	массив array gmp чисел
function array gmp gcdext GMP $a GMP $b	вычисление нод и множителей
function gmp hamdist $b	или ресурс resource gmp числа в php 5
function gmp hamdist $a	или ресурс resource gmp числа в php 5
function int gmp hamdist	ресурс resource gmp числа в php 5
function int gmp hamdist GMP $a GMP $b	расстояние хэмминга
function gmp intval $gmpnumber	или ресурс resource gmp числа в php 5
function int gmp intval	целое число типа integer преобразованное из gmpnumber
function int gmp intval GMP $gmpnumber	преобразование числа gmp в целое число
function gmp invert $b	или ресурс resource gmp числа в php 5
function gmp invert $a	или ресурс resource gmp числа в php 5
function GMP gmp invert	gmp число при успешном завершении либо false если инверсия не существует
function GMP gmp invert GMP $a GMP $b	инверсия остатка от деления
function gmp legendre $p	или ресурс resource gmp числа в php 5
function gmp legendre $a	или ресурс resource gmp числа в php 5
function int gmp legendre	ресурс resource gmp числа в php 5
function int gmp legendre GMP $a GMP $p	символ лежандра
function gmp mod $n	или ресурс resource gmp числа в php 5
function gmp mod $d	делитель модуль
function GMP gmp mod	ресурс resource gmp числа в php 5
function GMP gmp mod GMP $n GMP $d	вычисление остатка от целочисленного деления
function gmp mul $b	второй множитель число умножаемое на a
function gmp mul $a	первый множитель число умножаемое на b
function GMP gmp mul	ресурс resource gmp числа в php 5
function GMP gmp mul GMP $a GMP $b	умножение чисел
function gmp nextprime $a	или ресурс resource gmp числа в php 5
function GMP gmp nextprime	возвращает следующее простое число большее чем a в виде gmp числа
function GMP gmp nextprime int $a	поиск следующего простого числа
function gmp or $b	или ресурс resource gmp числа в php 5
function gmp or $a	или ресурс resource gmp числа в php 5
function GMP gmp or	ресурс resource gmp числа в php 5
function GMP gmp or GMP $a GMP $b	побитовое или
function gmp perfect square $a	проверяемое на точный квадрат число
function bool gmp perfect square	возвращает true если a является квадратом целого числа false в противном случае
function bool gmp perfect square GMP $a	проверка числа на точный квадрат
function gmp popcount $a	или ресурс resource gmp числа в php 5
function int gmp popcount	количество единиц в двоичной записи числа a в виде числа типа integer
function int gmp popcount GMP $a	количество единиц в двоичной записи числа
function gmp powm $base	основание степени
function gmp powm $exp	положительный показатель степени в которую возводится base
function gmp powm $mod	делитель остаток от целочисленного деления на который будет возвращен
function GMP gmp powm	новое gmp число результат операции
function GMP gmp powm GMP $base GMP $exp GMP $mod	возводит число в степень и производит деление по модулю
function gmp prob prime $reps	допустимые значения аргумента reps лежат в диапазоне от 5 до 10 по умолчанию 10 ; чем больше это число тем меньше вероятность что непростые числа пройдут этот тест и определятся как возможно простые
function gmp prob prime $a	число для которого проводится проверка
function int gmp prob prime	если функция возвращает 0 a точно не является простым
function int gmp prob prime GMP $a int $reps	проверяет является ли число вероятно простым
function gmp setbit $a	изменяемое значение
function gmp setbit $bit_on	true для установки бита установки в 1 / включен ; false для его очистки установки в 0 / выключен
function gmp setbit $index	индекс устанавливаемого бита
function void gmp setbit GMP $a int $index bool $bit_on	установка бита
function gmp sign $a	или ресурс resource gmp числа в php 5
function int gmp sign	возвращает 1 если a положительное; -1 если a отрицательное; и 0 если a равно нулю
function int gmp sign GMP $a	знак числа
function gmp sqrt $a	или ресурс resource gmp числа в php 5
function GMP gmp sqrt	целая часть корня в виде gmp числа
function GMP gmp sqrt GMP $a	вычисление квадратного корня
function gmp strval $base	система счисления возвращаемого числа
function gmp strval $gmpnumber	gmp число для конвертации
function string gmp strval	число в виде строки типа string
function string gmp strval GMP $gmpnumber int $base	преобразование gmp числа в строку
function gmp sub $b	вычитаемое из числа a
function gmp sub $a	уменьшаемое
function GMP gmp sub	ресурс resource gmp числа в php 5
function GMP gmp sub GMP $a GMP $b	вычитание чисел
function gmp testbit $index	проверяемый бит
function gmp testbit $a	или ресурс resource gmp числа в php 5
function bool gmp testbit	возвращает true если бит установлен в $a иначе false
function bool gmp testbit GMP $a int $index	проверка установлен ли бит в 1
function gmp xor $b	или ресурс resource gmp числа в php 5
function gmp xor $a	или ресурс resource gmp числа в php 5
function GMP gmp xor	ресурс resource gmp числа в php 5
function GMP gmp xor GMP $a GMP $b	побитовое исключающее или
function gnupg decrypt $text	расшифровываемый текст
function gnupg decrypt $identifier	идентификатор gnupg полученный из gnupg_init() или gnupg
function string gnupg decrypt	в случае успеха эта функция возвращает расшифрованный текст
function string gnupg decrypt resource $identifier string $text	расшифровывает переданный текст
function gnupg decryptverify $plaintext	параметру plaintext передаётся расшифрованный текст
function gnupg decryptverify $identifier	идентификатор gnupg полученный из gnupg_init() или gnupg
function gnupg decryptverify $text	текст для расшифровки
function array gnupg decryptverify	в случае успеха эта функция возвращает информацию о подписи и передаёт в параметр plaintext расшифрованный текст
function array gnupg decryptverify resource $identifier string $text string $plaintext	расшифровывает и проверяет подпись переданного текста
function gnupg encryptsign $plaintext	текст для шифрования
function gnupg encryptsign $identifier	идентификатор gnupg полученный из gnupg_init() или gnupg
function string gnupg encryptsign	в случае успеха эта функция возвращает зашифрованный и подписанный текст
function string gnupg encryptsign resource $identifier string $plaintext	шифрует и подписывает переданный текст
function gnupg export $identifier	идентификатор gnupg полученный из gnupg_init() или gnupg
function gnupg export $fingerprint	отпечаток ключа
function string gnupg export	в случае успеха эта функция возвращает ключ
function string gnupg export resource $identifier string $fingerprint	экспортирует ключ
function gnupg setarmor $identifier	идентификатор gnupg полученный из gnupg_init() или gnupg
function gnupg setarmor $armor	в случае не нулевого целого числа функция включает текстовый режим вывода по умолчанию
function bool gnupg setarmor	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool gnupg setarmor resource $identifier int $armor	переключает вывод в текстовом или бинарном режиме
function gnupg seterrormode $errormode	режим ошибок
function gnupg seterrormode $identifier	идентификатор gnupg полученный из gnupg_init() или gnupg
function void gnupg seterrormode resource $identifier int $errormode	устанавливает режим отчетов об ошибках error_reporting
function gnupg setsignmode $sigmode	режим подписывания
function gnupg setsignmode $identifier	идентификатор gnupg полученный из gnupg_init() или gnupg
function bool gnupg setsignmode	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool gnupg setsignmode resource $identifier int $signmode	устанавливает режим подписывания
function gnupg sign $plaintext	простой текст для подписания
function gnupg sign $identifier	идентификатор gnupg полученный из gnupg_init() или gnupg
function string gnupg sign	в случае успеха эта функция возвращает подписанный текст или подпись
function string gnupg sign resource $identifier string $plaintext	подписывает переданный текст
function gregoriantojd $month	месяц в виде числа от 1 январь до 12 декабрь
function gregoriantojd $year	года в виде числа от -4714 до 9999
function gregoriantojd $day	день в виде числа от 1 до 31
function int gregoriantojd	число дней integer в юлианском летоисчислении для даты по григорианскому календарю
function int gregoriantojd int $month int $day int $year	преобразует дату по григорианскому календарю в количество дней в юлианском летоисчислении
function gzclose $zp	указатель на gz-файл
function bool gzclose	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool gzclose resource $zp	закрывает открытый gz-файл по его указателю
function gzcompress $data	данные для сжатия
function gzcompress $level	уровень сжатия
function gzcompress $encoding	одна из zlib_encoding_* констант
function string gzcompress	сжатая строка или false в случае ошибки
function string gzcompress string $data int $level int $encoding	сжимает строку
function gzdecode $length	максимальный размер строки для распаковки
function gzdecode $data	данные для распаковки упакованные с помощью gzencode()
function string gzdecode	распакованная строка или false если произошла ошибка
function string gzdecode string $data int $length	распаковывает строку упакованную с помощью gzip
function gzdeflate $data	данные для сжатия
function gzdeflate $level	уровень сжатия
function gzdeflate $encoding	одна из zlib_encoding_* констант
function string gzdeflate	сжатая строка или false в случае ошибки
function string gzdeflate string $data int $level int $encoding	сжимает строку
function gzencode $data	данные для сжатия
function gzencode $level	уровень сжатия
function gzencode $encoding_mode	режим сжатия может быть force_gzip по умолчанию или force_deflate
function string gzencode	сжатая строка или false в случае ошибки
function string gzencode string $data int $level int $encoding_mode	сжимает строку в формате gzip
function gzeof $zp	указатель на gz-файл возвращённый после его успешного открытия функцией gzopen()
function int gzeof	возвращает true если позиция указателя в gz-файле соответствует eof или в случае ошибки; иначе возвращает false
function int gzeof resource $zp	проверяет находится ли текущая позиция в конце eof gz-файла
function gzgetc $zp	указатель на gz-файл возвращённый после его успешного открытия функцией gzopen()
function string gzgetc	символ после распаковки или false в случае eof в отличие от gzeof()
function string gzgetc resource $zp	возвращает символ из gz-файла
function gzgets $zp	указатель на gz-файл возвращённый после его успешного открытия функцией gzopen()
function gzgets $length	максимальный размер возвращаемых данных
function string gzgets	распакованная строка или false в случае ошибки
function string gzgets resource $zp int $length	возвращает строку из gz-файла
function gzgetss $zp	указатель на gz-файл возвращённый после его успешного открытия функцией gzopen()
function gzgetss $allowable_tags	используйте этот необязательный параметр чтобы указать теги которые не следует удалять из возвращаемой строки
function gzgetss $length	максимальный размер возвращаемых данных
function string gzgetss	распакованная строка без разметки или false в случае ошибки
function string gzgetss resource $zp int $length string $allowable_tags	возвращает строку из gz-файла с удалёнными html-тегами
function gzinflate $data	данные сжатые функцией gzdeflate()
function gzinflate $length	максимальный размер данных для распаковки
function string gzinflate	распакованные данные или false в случае ошибки
function string gzinflate string $data int $length	распаковывает строку
function gzopen $filename	имя файла
function gzopen $mode	как в fopen() rb или wb но также может включать уровень сжатия wb9 или стратегию: f для фильтрации данных как в wb6f h для сжатия только по алгоритму хаффмана как в wb1h для более детальной информации о параметре стратегии см
function gzopen $use_include_path	если вы хотите чтобы поиск файла выполнялся также в директориях include_path установите значение этого аргумента в 1
function resource gzopen	возвращает указатель на открытый файл после чего всё что вы читаете из этого дескриптора будет автоматически распаковываться а всё что вы записываете - упаковываться
function resource gzopen string $filename string $mode int $use_include_path	открывает gz-файл
function gzread $zp	указатель на gz-файл возвращённый после его успешного открытия функцией gzopen()
function gzread $length	количество байт после распаковки которые следует прочитать
function string gzread	прочтённые данные
function string gzread resource $zp int $length	бинарное чтение gz-файла
function gzuncompress $data	данные сжатые функцией gzcompress()
function gzuncompress $length	максимальный размер данных для распаковки
function string gzuncompress	распакованные данные или false в случае ошибки
function string gzuncompress string $data int $length	распаковывает строку
function gzwrite $zp	указатель на gz-файл возвращённый после его успешного открытия функцией gzopen()
function gzwrite $string	записываемая строка
function gzwrite $length	число записываемых байтов до сжатия
function int gzwrite	возвращает число действительно записанных байт без учёта сжатия в поток gz-файла
function int gzwrite resource $zp string $string int $length	бинарная запись в gz-файл
function void halt compiler	останавливает работу компилятора
function header register callback $callback	функция вызывается непосредственно перед отправкой заголовков не получает параметров и возвращаемое значение игнорируется
function bool header register callback	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool header register callback callable $callback	вызывает функцию заголовка header
function header remove $name	имя удаляемого заголовка
function void header remove string $name	удаляет предварительно установленные заголовки
function header $string	строка заголовка
function header $replace	необязательный параметр replace определяет надо ли заменять предыдущий аналогичный заголовок или заголовок того же типа
function header $http_response_code	принудительно задает код ответа http
function void header string $string bool $replace int $http_response_code	отправка http заголовка
function array headers list	возвращает нумерованный массив заголовков
function array headers list	возвращает список переданных или готовых к передаче заголовков
function headers sent $file	если опциональные параметры file и line установлены то функция headers_sent() поместит имя файла php исходника и номер строки с которой начинается вывод в переменные file и line
function headers sent $line	номер строки с которой начинается вывод
function bool headers sent	функция headers_sent() вернет false если http заголовки не были отправлены либо true если отправлены
function bool headers sent string $file int $line	проверяет были ли и куда отправлены заголовки
function hebrevc $max_chars_per_line	этот необязательный параметр указывает максимально возвращаемое число символов на строку
function hebrevc $hebrew_text	входная строка на иврите
function string hebrevc	возвращает строку в визуальной кодировке
function string hebrevc string $hebrew_text int $max_chars_per_line	преобразует текст на иврите из логической кодировки в визуальную с преобразованием перевода строки
function hexdec $hex_string	шестнадцатеричная строка для преобразования
function number hexdec	десятичное представление hex_string
function number hexdec string $hex_string	переводит число из шестнадцатеричной системы счисления в десятичную
function html entity decode $string	входная строка
function html entity decode $encoding	необязательный аргумент определяющий кодировку используемую при конвертации симоволов
function html entity decode $flags	битовая маска состоящая из одного или более флагов которые указывают как обращаться с кавычками и какой тип документа использовать
function string html entity decode	возвращает раскодированную строку
function string html entity decode string $string int $flags string $encoding	преобразует все html-сущности в соответствующие символы
function htmlentities $string	входная строка
function htmlentities $encoding	необязательный аргумент определяющий кодировку используемую при конвертации симоволов
function htmlentities $double_encode	при выключении параметра double_encode php не будет преобразовывать существующие html-сущности
function htmlentities $flags	битовая маска из нижеуказанных флагов определяющих режим обработки кавычек некорректных кодовых последовательностей и используемый тип документа
function string htmlentities	возвращает преобразованную строку
function string htmlentities string $string int $flags string $encoding bool $double_encode	преобразует все возможные символы в соответствующие html-сущности
function htmlspecialchars $encoding	необязательный аргумент определяющий кодировку используемую при конвертации симоволов
function htmlspecialchars $double_encode	если параметр double_encode выключен то php не будет преобразовывать существующие html-сущности
function htmlspecialchars $string	конвертируемая строка string
function htmlspecialchars $flags	битовая маска из нижеуказанных флагов определяющих режим обработки кавычек некорректных кодовых последовательностей и используемый тип документа
function string htmlspecialchars	преобразованная строка string
function string htmlspecialchars string $string int $flags string $encoding bool $double_encode	преобразует специальные символы в html-сущности
function http build query $query_data	может быть массивом или объектом содержащим свойства
function http build query $arg_separator	arg_separator
function http build query $enc_type	по умолчанию php_query_rfc1738
function http build query $numeric_prefix	если числовые индексы используются в базовом массиве и этот параметр указан то будет добавлен числовой индекс только для элементов в базом массиве
function string http build query	возвращает url-кодированную строку
function string http build query mixed $query_data string $numeric_prefix string $arg_separator int $enc_type	генерирует url-кодированную строку запроса
function http response code $response_code	код ответа устанавливается с помощью опционального параметра response_code
function int http response code	текущий код ответа
function int http response code int $response_code	получает или устанавливает код ответа http
function hypot $x	длина первой стороны
function hypot $y	длина второй стороны
function float hypot	вычисленная длина гипотенузы
function float hypot float $x float $y	рассчитывает длину гипотенузы прямоугольного треугольника
function iconv mime decode headers $charset	необязательный параметр charset указывает кодировку в которой будет представлен результат
function iconv mime decode headers $mode	параметр mode определяет поведение если iconv_mime_decode_headers() обнаружит неправильное поле заголовка mime
function iconv mime decode headers $encoded_headers	не раскодированные заголовки в виде строки
function array iconv mime decode headers	в случае успеха возвращает ассоциативный массив с полями mime -заголовков указанных параметром encoded_headers или false в случае ошибки
function array iconv mime decode headers string $encoded_headers int $mode string $charset	декодирует несколько полей заголовка mime
function iconv mime decode $mode	mode задает режим поведения функции в случае когда iconv_mime_decode() определит что mime -заголовок имеет недопустимую структуру
function iconv mime decode $charset	необязательный аргумент charset задает набор символов в котором будет представлен результат
function iconv mime decode $encoded_header	закодированный заголовок в виде строки
function string iconv mime decode	возвращает декодированный mime -заголовок в случае успеха или false в случае ошибки
function string iconv mime decode string $encoded_header int $mode string $charset	декодирует поле mime-заголовка
function iconv mime encode $field_name	имя поля
function iconv mime encode $field_value	значение поля
function iconv mime encode $preferences	есть возможность контролировать поведение функции iconv_mime_encode() посредством передачи массива с настройками в качестве третьего аргумента preferences
function string iconv mime encode	возвращает закодированное mime поле в случае успеха или false в случае ошибки
function string iconv mime encode string $field_name string $field_value array $preferences	сжимает поле mime-заголовка
function iconv set encoding $charset	набор символов
function iconv set encoding $type	значение type может быть одним из приведенных ниже: input_encoding output_encoding internal_encoding
function bool iconv set encoding	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool iconv set encoding string $type string $charset	устанавливает значение для преобразования символов кодировки
function iconv strlen $charset	если параметр charset опущен предполагается что кодировка строки str эквивалентна значению iconv
function iconv strlen $str	строка
function int iconv strlen	возвращает количество символов в str как целое число
function int iconv strlen string $str string $charset	возвращает количество символов в строке
function iconv strpos $charset	если параметр charset не указан то подразумевается что string имеет кодировку iconv
function iconv strpos $needle	искомая подстрока
function iconv strpos $offset	необязательный параметр offset позволяет указать с какого по счёту символа строки начинать поиск
function iconv strpos $haystack	строка в которой производится поиск
function int iconv strpos	возвращает номер позиции первого вхождения строки needle в haystack
function int iconv strpos string $haystack string $needle int $offset string $charset	возвращает позицию первого вхождения подстроки
function iconv strrpos $charset	если параметр charset не указан то подразумевается что string имеет кодировку iconv
function iconv strrpos $needle	искомая подстрока
function iconv strrpos $haystack	строка в которой производится поиск
function int iconv strrpos	возвращает номер позиции последнего вхождения строки needle в haystack
function int iconv strrpos string $haystack string $needle string $charset	возвращает позицию последнего вхождения подстроки
function iconv substr $offset	если offset неотрицателен iconv_substr() получает часть строки str начиная с символа с порядковым номером offset нумерация начинается с нуля
function iconv substr $charset	если параметр charset не указан предполагается что строка string имеет кодировку iconv
function iconv substr $length	если length задан и положителен возвращаемое значение содержит не более length символов начиная с offset зависит от длины строки string
function iconv substr $str	изначальная строка
function string iconv substr	возвращает часть строки str определенную параметрами offset и length
function string iconv substr string $str int $offset int $length string $charset	получение части строки
function iconv $in_charset	кодировка входной строки
function iconv $str	строка которую необходимо преобразовать
function iconv $out_charset	требуемая на выходе кодировка
function string iconv	возвращает преобразованную строку или false в случае возникновения ошибки
function string iconv string $in_charset string $out_charset string $str	преобразование строки в требуемую кодировку
function id3 get frame short name $frameId	id3v2 кадр
function string id3 get frame short name	возвращает короткое имя кадра или false в случае ошибки
function string id3 get frame short name string $frameId	возвращает короткое имя id3v2 кадра
function id3 get genre id $genre	название жанра в виде строки string
function int id3 get genre id	идентификатор жанра или false в случае ошибки
function int id3 get genre id string $genre	возвращает идентификатор жанра
function array id3 get genre list	возвращает массив содержащий все возможные значения жанра которые может содержать id3-тег
function array id3 get genre list	возвращает все возможные значения жанра
function id3 get genre name $genre_id	число в интервале от 0 до 147
function string id3 get genre name	возвращает строку с именем
function string id3 get genre name int $genre_id	возвращает имя по идентификатору жанра
function id3 get tag $version	позволяет определять версию id3-тега так как mp3-файл может содержать теги версии 1
function id3 get tag $filename	путь к mp3-файлу вместо имени файла можно передать потоковый ресурс
function array id3 get tag	возвращает ассоциативный массив с различными ключами: title artist
function array id3 get tag string $filename int $version	возвращает всю информацию сохранённую в id3-теге
function id3 get version $filename	путь к mp3 файлу
function int id3 get version	возвращает номер версии id3-тега mp3-файла
function int id3 get version string $filename	возвращает версию id3-тега
function id3 remove tag $version	позволяет определять версию id3-тега так как mp3-файл может содержать теги версии 1
function id3 remove tag $filename	путь к mp3-файлу вместо имени файла можно передать потоковый ресурс
function bool id3 remove tag	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool id3 remove tag string $filename int $version	удаляет существующий id3-тег
function id3 set tag $filename	путь к mp3 файлу вместо имени файла можно передать потоковый ресурс
function id3 set tag $version	позволяет определять версию id3 тега так как mp3 файл может содержать теги версии 1
function id3 set tag $tag	ассоциативный массив ключей и значений тега
function bool id3 set tag	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool id3 set tag string $filename array $tag int $version	обновляет информацию в id3 теге
function idate $timestamp	необязательный параметр timestamp представляет собой integer метку времени по умолчанию равную текущему локальному времени если timestamp не указан
function int idate	возвращает целое число integer
function int idate string $format int $timestamp	преобразует локальное время / дату в целое число
function ignore user abort $value	если параметр задан то функция устанавливает заданный параметр value функции ignore_user_abort в ini настройку
function int ignore user abort	возвращает предыдущее значение в виде целого числа
function int ignore user abort string $value	устанавливает необходимо ли прерывать работу скрипта при отключении клиента
function image type to extension $include_dot	добавлять точку к расширению или нет
function image type to extension $imagetype	одна из констант imagetype_xxx
function string image type to extension	строка с расширением файла соответствующим типу изображения
function string image type to extension int $imagetype bool $include_dot	получение расширения файла для типа изображения
function image type to mime type $imagetype	одна из констант imagetype_xxx
function string image type to mime type int $imagetype	получение mime-типа для типа изображения возвращаемого функциями getimagesize exif_read_data exif_thumbnail exif_imagetype
function imagealphablending $blendmode	включить режим сопряжения или нет
function imagealphablending $image	ресурс изображения полученный одной из функций создания изображений например такой как imagecreatetruecolor()
function bool imagealphablending	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool imagealphablending resource $image bool $blendmode	задание режима сопряжения цветов для изображения
function imagearc $cx	x-координата центра
function imagearc $color	идентификатор цвета созданный функцией imagecolorallocate()
function imagearc $height	высота дуги
function imagearc $end	угол окончания дуги в градусах
function imagearc $image	ресурс изображения полученный одной из функций создания изображений например такой как imagecreatetruecolor()
function imagearc $cy	y-координата центра
function imagearc $width	ширина дуги
function imagearc $start	угол начала дуги в градусах
function bool imagearc	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool imagearc resource $image int $cx int $cy int $width int $height int $start int $end int $color	рисование дуги
function imagechar $color	идентификатор цвета созданный функцией imagecolorallocate()
function imagechar $x	x-координата начала рисования
function imagechar $image	ресурс изображения полученный одной из функций создания изображений например такой как imagecreatetruecolor()
function imagechar $c	символ для рисования
function imagechar $font	может принимать значения 1 2 3 4 5 для встроенных шрифтов в кодировке latin2 более высокое число соответствует большему шрифту или любому из ваших собственных идентификаторов шрифтов зарегистрированных с помощью imageloadfont()
function imagechar $y	y-координата начала рисования
function bool imagechar	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool imagechar resource $image int $font int $x int $y string $c int $color	рисование символа по горизонтали
function imagecharup $x	x-координата начала рисования
function imagecharup $color	идентификатор цвета созданных функцией imagecolorallocate()
function imagecharup $image	ресурс изображения полученный одной из функций создания изображений например такой как imagecreatetruecolor()
function imagecharup $c	символ для рисования
function imagecharup $font	может принимать значения 1 2 3 4 5 для встроенных шрифтов в кодировке latin2 более высокое число соответствует большему шрифту или любому из ваших собственных идентификаторов шрифтов зарегистрированных с помощью imageloadfont()
function imagecharup $y	y-координата начала рисования
function bool imagecharup	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool imagecharup resource $image int $font int $x int $y string $c int $color	рисование символа вертикально
function imagecolorallocate $green	значение зеленого компонента цвета
function imagecolorallocate $red	значение красного компонента цвета
function imagecolorallocate $blue	значение синего компонента цвета
function imagecolorallocate $image	ресурс изображения полученный одной из функций создания изображений например такой как imagecreatetruecolor()
function int imagecolorallocate	идентификатор цвета либо false в случае неудачи
function int imagecolorallocate resource $image int $red int $green int $blue	создание цвета для изображения
function imagecolorallocatealpha $green	значение зеленого компонента цвета
function imagecolorallocatealpha $red	значение красного компонента цвета
function imagecolorallocatealpha $alpha	значение в диапазоне от 0 до 127
function imagecolorallocatealpha $blue	значение синего компонента цвета
function imagecolorallocatealpha $image	ресурс изображения полученный одной из функций создания изображений например такой как imagecreatetruecolor()
function int imagecolorallocatealpha	идентификатор цвета или false в случае неудачи при создании цвета
function int imagecolorallocatealpha resource $image int $red int $green int $blue int $alpha	создание цвета для изображения
function imagecolorclosest $green	значение зеленого компонента цвета
function imagecolorclosest $red	значение красного компонента цвета
function imagecolorclosest $blue	значение синего компонента цвета
function imagecolorclosest $image	ресурс изображения полученный одной из функций создания изображений например такой как imagecreatetruecolor()
function int imagecolorclosest	возвращает индекс цвета в палитре изображения ближайшего к заданному
function int imagecolorclosest resource $image int $red int $green int $blue	получение индекса цвета ближайшего к заданному
function imagecolorclosestalpha $green	значение зеленого компонента цвета
function imagecolorclosestalpha $red	значение красного компонента цвета
function imagecolorclosestalpha $alpha	значение в диапазоне от 0 до 127
function imagecolorclosestalpha $blue	значение синего компонента цвета
function imagecolorclosestalpha $image	ресурс изображения полученный одной из функций создания изображений например такой как imagecreatetruecolor()
function int imagecolorclosestalpha	возвращает индекс цвета в палитре изображения ближайшего к заданному
function int imagecolorclosestalpha resource $image int $red int $green int $blue int $alpha	получение индекса цвета ближайшего к заданному с учетом прозрачности
function imagecolordeallocate $color	идентификатор цвета
function imagecolordeallocate $image	ресурс изображения полученный одной из функций создания изображений например такой как imagecreatetruecolor()
function bool imagecolordeallocate	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool imagecolordeallocate resource $image int $color	разрыв ассоциации переменной с цветом для заданного изображения
function imagecolorexact $green	значение зеленого компонента цвета
function imagecolorexact $red	значение красного компонента цвета
function imagecolorexact $blue	значение синего компонента цвета
function imagecolorexact $image	ресурс изображения полученный одной из функций создания изображений например такой как imagecreatetruecolor()
function int imagecolorexact	возвращает индекс для заданного цвета в палитре изображения либо -1 если такого цвета в палитре нет
function int imagecolorexact resource $image int $red int $green int $blue	получение индекса заданного цвета
function imagecolorresolvealpha $green	значение зеленого компонента цвета
function imagecolorresolvealpha $red	значение красного компонента цвета
function imagecolorresolvealpha $alpha	значение в диапазоне от 0 до 127
function imagecolorresolvealpha $blue	значение синего компонента цвета
function imagecolorresolvealpha $image	ресурс изображения полученный одной из функций создания изображений например такой как imagecreatetruecolor()
function int imagecolorresolvealpha	возвращает индекс цвета
function int imagecolorresolvealpha resource $image int $red int $green int $blue int $alpha	получает идентификатор конкретного цвета и альфа компонента или его ближайший аналог
function imagecolorset $green	значение зеленого компонента цвета
function imagecolorset $image	ресурс изображения полученный одной из функций создания изображений например такой как imagecreatetruecolor()
function imagecolorset $blue	значение синего компонента цвета
function imagecolorset $alpha	значение альфа компонента
function imagecolorset $red	значение красного компонента цвета
function imagecolorset $index	индекс в палитре
function void imagecolorset resource $image int $index int $red int $green int $blue int $alpha	установка набора цветов для заданного индекса палитры
function imagecolorsforindex $index	индекс цвета
function imagecolorsforindex $image	ресурс изображения полученный одной из функций создания изображений например такой как imagecreatetruecolor()
function array imagecolorsforindex	возвращает ассоциативный массив с красным зеленым синим и альфа ключами содержащий соответствующие значения для заданного индекса цвета
function array imagecolorsforindex resource $image int $index	получение цветов соответствующих индексу
function imageconvolution $offset	смещение цвета
function imageconvolution $div	делитель результата искривления используется для нормализации
function imageconvolution $matrix	матрица 3x3: массив из трех массивов по 3 значения с плавающей точкой в каждом
function imageconvolution $image	ресурс изображения полученный одной из функций создания изображений например такой как imagecreatetruecolor()
function bool imageconvolution	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool imageconvolution resource $image array $matrix float $div float $offset	наложение искривляющей матрицы 3х3 используя коэффициент и смещение
function imagecreate $height	высота изображения
function imagecreate $width	ширина изображения
function resource imagecreate	возвращает ресурс изображения в случае успеха или false в случае ошибки
function resource imagecreate int $width int $height	создание нового палитрового изображения
function imagecreatefromgd $filename	путь к gd файлу
function resource imagecreatefromgd	возвращает ресурс изображения в случае успеха или false в случае ошибки
function resource imagecreatefromgd string $filename	создание нового изображения на основе gd файла или url
function imagecreatefromgd2 $filename	путь к gd2 изображению
function resource imagecreatefromgd2	возвращает ресурс изображения в случае успеха или false в случае ошибки
function resource imagecreatefromgd2 string $filename	создание нового изображения на основе gd2 или url
function imagecreatefromgd2part $height	высота исходного изображения
function imagecreatefromgd2part $filename	путь к gd2 изображению
function imagecreatefromgd2part $srcX	x-координата точки исходного изображения
function imagecreatefromgd2part $srcY	y-координата точки исходного изображения
function imagecreatefromgd2part $width	ширина исходного изображения
function resource imagecreatefromgd2part	возвращает ресурс изображения в случае успеха или false в случае ошибки
function resource imagecreatefromgd2part string $filename int $srcX int $srcY int $width int $height	создание нового изображения на основе части gd2 файла или url
function imagecreatefromgif $filename	путь к gif картинке
function resource imagecreatefromgif	возвращает ресурс изображения в случае успеха или false в случае ошибки
function resource imagecreatefromgif string $filename	создает новое изображение из файла или url
function imagecreatefromjpeg $filename	путь к jpeg картинке
function resource imagecreatefromjpeg	возвращает ресурс изображения в случае успеха или false в случае ошибки
function resource imagecreatefromjpeg string $filename	создает новое изображение из файла или url
function imagecreatefrompng $filename	путь к изображению png
function resource imagecreatefrompng	возвращает ресурс изображения в случае успеха или false в случае ошибки
function resource imagecreatefrompng string $filename	создает новое изображение из файла или url
function imagecreatefromwbmp $filename	путь к изображению wbmp
function resource imagecreatefromwbmp	возвращает ресурс изображения в случае успеха или false в случае ошибки
function resource imagecreatefromwbmp string $filename	создает новое изображение из файла или url
function imagecreatefromxbm $filename	путь к изображению xbm
function resource imagecreatefromxbm	возвращает ресурс изображения в случае успеха или false в случае ошибки
function resource imagecreatefromxbm string $filename	создает новое изображение из файла или url
function imagecreatefromxpm $filename	путь к изображению xpm
function resource imagecreatefromxpm	возвращает ресурс изображения в случае успеха или false в случае ошибки
function resource imagecreatefromxpm string $filename	создает новое изображение из файла или url
function imagedashedline $x1	верхняя левая x координата
function imagedashedline $y2	нижняя правая у-координата
function imagedashedline $color	цвет линии
function imagedashedline $x2	нижняя правая х-координата
function imagedashedline $image	ресурс изображения полученный одной из функций создания изображений например такой как imagecreatetruecolor()
function imagedashedline $y1	верхняя левая y координата
function bool imagedashedline	всегда возвращает true
function bool imagedashedline resource $image int $x1 int $y1 int $x2 int $y2 int $color	рисование пунктирной линии
function imagedestroy $image	ресурс изображения полученный одной из функций создания изображений например такой как imagecreatetruecolor()
function bool imagedestroy	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool imagedestroy resource $image	уничтожение изображения
function imagefill $x	x-координата начала
function imagefill $y	y-координата начала
function imagefill $color	цвет заливки
function imagefill $image	ресурс изображения полученный одной из функций создания изображений например такой как imagecreatetruecolor()
function bool imagefill	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool imagefill resource $image int $x int $y int $color	заливка
function imagefilledellipse $cx	x-координата центра
function imagefilledellipse $width	ширина эллипса
function imagefilledellipse $image	ресурс изображения полученный одной из функций создания изображений например такой как imagecreatetruecolor()
function imagefilledellipse $cy	y-координата центра
function imagefilledellipse $height	высота эллипса
function imagefilledellipse $color	цвет заливки
function bool imagefilledellipse	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool imagefilledellipse resource $image int $cx int $cy int $width int $height int $color	рисование закрашенного эллипса
function imagefilledpolygon $points	массив содержащий x и y координаты последовательных вершин многоугольника
function imagefilledpolygon $num_points	число вершин должно быть не меньше 3
function imagefilledpolygon $color	идентификатор цвета созданный функцией imagecolorallocate()
function imagefilledpolygon $image	ресурс изображения полученный одной из функций создания изображений например такой как imagecreatetruecolor()
function bool imagefilledpolygon	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool imagefilledpolygon resource $image array $points int $num_points int $color	рисование закрашенного многоугольника
function imagefilledrectangle $y1	y-координата точки 1
function imagefilledrectangle $image	ресурс изображения полученный одной из функций создания изображений например такой как imagecreatetruecolor()
function imagefilledrectangle $y2	y-координата точки 2
function imagefilledrectangle $x2	x-координата точки 2
function imagefilledrectangle $color	цвет заливки
function imagefilledrectangle $x1	x-координата точки 1
function bool imagefilledrectangle	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool imagefilledrectangle resource $image int $x1 int $y1 int $x2 int $y2 int $color	рисование закрашенного прямоугольника
function imagefilltoborder $x	x-координата начала
function imagefilltoborder $y	y-координата начала
function imagefilltoborder $color	цвет заливки
function imagefilltoborder $border	цвет границы заливки
function imagefilltoborder $image	ресурс изображения полученный одной из функций создания изображений например такой как imagecreatetruecolor()
function bool imagefilltoborder	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool imagefilltoborder resource $image int $x int $y int $border int $color	заливка цветом
function imagefilter $arg2	img_filter_colorize : значение зеленого компонента цвета
function imagefilter $arg1	img_filter_brightness : уровень яркости
function imagefilter $arg3	img_filter_colorize : значение синего компонента цвета
function imagefilter $image	ресурс изображения полученный одной из функций создания изображений например такой как imagecreatetruecolor()
function imagefilter $arg4	img_filter_colorize : альфа канал значение между 0 и 127
function imagefilter $filtertype	filtertype может быть одним из следующих: img_filter_negate : инвертирует все цвета изображения
function bool imagefilter	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool imagefilter resource $image int $filtertype int $arg1 int $arg2 int $arg3 int $arg4	применяет фильтр к изображению
function imagefontheight $font	может принимать значения 1 2 3 4 5 для встроенных шрифтов в кодировке latin2 более высокое число соответствует большему шрифту или любому из ваших собственных идентификаторов шрифтов зарегистрированных с помощью imageloadfont()
function int imagefontheight	возвращает высоту в пикселах
function int imagefontheight int $font	получение высоты шрифта
function imagefontwidth $font	может принимать значения 1 2 3 4 5 для встроенных шрифтов в кодировке latin2 более высокое число соответствует большему шрифту или любому из ваших собственных идентификаторов шрифтов зарегистрированных с помощью imageloadfont()
function int imagefontwidth	возвращает ширину в пикселах
function int imagefontwidth int $font	получение ширины шрифта
function imageftbbox $size	размер шрифта
function imageftbbox $text	измеряемая строка
function imageftbbox $extrainfo	возможные ключи массива extrainfo ключ тип значение linespacing float определяет рисование подчеркиваний
function imageftbbox $angle	угол в градусах в котором text должен быть измерен
function imageftbbox $fontfile	имя файла truetype шрифта может быть url
function array imageftbbox float $size float $angle string $fontfile string $text array $extrainfo	определение границ текста выводимого шрифтом freetype2
function imagegd $filename	путь для сохранения файла
function imagegd $image	ресурс изображения полученный одной из функций создания изображений например такой как imagecreatetruecolor()
function bool imagegd	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool imagegd resource $image string $filename	вывод gd-изображения в браузер или в файл
function imagegd2 $chunk_size	размер части изображения
function imagegd2 $type	либо img_gd2_raw либо img_gd2_compressed
function imagegd2 $filename	путь для сохранения файла
function imagegd2 $image	ресурс изображения полученный одной из функций создания изображений например такой как imagecreatetruecolor()
function bool imagegd2	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool imagegd2 resource $image string $filename int $chunk_size int $type	вывод gd2 изображения в броузер или файл
function resource imagegrabscreen	возвращает идентификатор ресурса изображения в случае успеха false в случае неудачи
function resource imagegrabscreen	захватывает изображение с экрана
function imagegrabwindow $window_handle	id окна hwnd
function imagegrabwindow $client_area	включает клиентскую часть окна приложения
function resource imagegrabwindow	возвращает идентификатор ресурса изображения в случае успеха false в случае неудачи
function resource imagegrabwindow int $window_handle int $client_area	захватывает изображение окна
function imageinterlace $interlace	если значение отлично от нуля изображение будет разбито на чередующиеся строки в противном случае бит интерлейсинга будет установлен в 0
function imageinterlace $image	ресурс изображения полученный одной из функций создания изображений например такой как imagecreatetruecolor()
function int imageinterlace	возвращает 1 если бит интерлейсинга установлен 0 в противном случае
function int imageinterlace resource $image int $interlace	включение или выключение интерлейсинга
function imageistruecolor $image	ресурс изображения полученный одной из функций создания изображений например такой как imagecreatetruecolor()
function bool imageistruecolor	возвращает true если image полноцветное false в противном случае
function bool imageistruecolor resource $image	определяет является ли изображение полноцветным
function imagejpeg $quality	необязательный параметр и может принимать значения в диапазоне от 0 низкое качество маленький размер файла до 100 высокое качество большой размер файла
function imagejpeg $filename	путь для сохранения файла
function imagejpeg $image	ресурс изображения полученный одной из функций создания изображений например такой как imagecreatetruecolor()
function bool imagejpeg	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool imagejpeg resource $image string $filename int $quality	выводит изображение в браузер или пишет в файл
function imagelayereffect $IMG_EFFECT_ALPHABLEND	использовать обычное сопряжение цветов аналогично передаче false в imagealphablending()
function imagelayereffect $IMG_EFFECT_OVERLAY	в результате наложения картинки с этим эффектом черные и белые пикселы фона изображения останутся так же черными и белыми а серые поменяют цвет на цвет пиксела накладываемого изображения
function imagelayereffect $effect	одна из следующих констант: img_effect_replace использовать замену пикселов аналогично передаче true в imagealphablending() img_effect_alphablend использовать обычное сопряжение цветов аналогично передаче false в imagealphablending() img_effect_normal то же что и img_effect_alphablend
function imagelayereffect $IMG_EFFECT_NORMAL	то же что и img_effect_alphablend
function imagelayereffect $image	ресурс изображения полученный одной из функций создания изображений например такой как imagecreatetruecolor()
function imagelayereffect $IMG_EFFECT_REPLACE	использовать замену пикселов аналогично передаче true в imagealphablending()
function bool imagelayereffect	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool imagelayereffect resource $image int $effect	установка флага альфа сопряжения для использования эффектов наложения изображений встроенной libgd библиотеки
function imageline $x1	x-координата первой точки
function imageline $color	цвет линии
function imageline $image	ресурс изображения полученный одной из функций создания изображений например такой как imagecreatetruecolor()
function imageline $y2	y-координата второй точки
function imageline $y1	y-координата первой точки
function imageline $x2	x-координата второй точки
function bool imageline	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool imageline resource $image int $x1 int $y1 int $x2 int $y2 int $color	рисование линии
function imagepng $filters	позволяет уменьшить размер png файла
function imagepng $quality	степень сжатия: от 0 нет сжатия до 9
function imagepng $filename	путь для сохранения файла
function imagepng $image	ресурс изображения полученный одной из функций создания изображений например такой как imagecreatetruecolor()
function bool imagepng	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool imagepng resource $image string $filename int $quality int $filters	вывод png изображения в броузер или файл
function imagepolygon $points	массив вершин многоугольника: points 0 = x0 points 1 = y0 points 2 = x1 points 3 = y1
function imagepolygon $num_points	общее число точек вершин
function imagepolygon $color	идентификатор цвета созданный функцией imagecolorallocate()
function imagepolygon $image	ресурс изображения полученный одной из функций создания изображений например такой как imagecreatetruecolor()
function bool imagepolygon	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool imagepolygon resource $image array $points int $num_points int $color	рисование многоугольника
function imagepsbbox $space	позволяет изменять размер пробела в шрифте
function imagepsbbox $angle	angle задается в градусах
function imagepsbbox $tightness	tightness позволяет регулировать расстояние между символами
function imagepsbbox $text	текст который должен быть записан
function imagepsbbox $size	size задается в пикселах
function imagepsbbox $font_index	ресурс шрифта возвращаемый функцией imagepsloadfont()
function array imagepsbbox	возвращает массив со следующими элементами: 0 левая x-координата 1 верхняя y-координата 2 правая x-координата 3 нижняя y-координата
function array imagepsbbox string $text resource $font int $size	выдает параметры рамки обрамляющей текст написанный шрифтом postscript type1
function imagepsencodefont $encodingfile	формат этого файла описан в документации к t1lib библиотеке
function imagepsencodefont $font_index	ресурс шрифта возвращаемый функцией imagepsloadfont()
function bool imagepsencodefont	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool imagepsencodefont resource $font_index string $encodingfile	изменение вектора кодировки шрифта
function imagepsfreefont $font_index	ресурс шрифта возвращаемый функцией imagepsloadfont()
function bool imagepsfreefont	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool imagepsfreefont resource $font_index	освобождение памяти занятой шрифтом postscript type
function imagepsloadfont $filename	путь к файлу шрифта postscript
function resource imagepsloadfont	если все в порядке будет возвращен индекс шрифта для дальнейшего использования
function resource imagepsloadfont string $filename	загрузка шрифта postscript type 1 из файла
function imagerectangle $x1	верхняя левая x координата
function imagerectangle $y2	нижняя правая y координата
function imagerectangle $image	ресурс изображения полученный одной из функций создания изображений например такой как imagecreatetruecolor()
function imagerectangle $x2	нижняя правая x координата
function imagerectangle $y1	верхняя левая y координата 0 0 - левый верхний угол изображения
function imagerectangle $color	идентификатор цвета созданный функцией imagecolorallocate()
function bool imagerectangle	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool imagerectangle resource $image int $x1 int $y1 int $x2 int $y2 int $color	рисование прямоугольника
function imagesavealpha $saveflag	требуется ли сохранять альфа канал или нет
function imagesavealpha $image	ресурс изображения полученный одной из функций создания изображений например такой как imagecreatetruecolor()
function bool imagesavealpha	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool imagesavealpha resource $image bool $saveflag	установка флага сохранения всей информации альфа компонента в противовес одноцветной прозрачности и сохранение png изображения
function imagesetpixel $y	y-координата
function imagesetpixel $color	идентификатор цвета созданный функцией imagecolorallocate()
function imagesetpixel $x	x-координата
function imagesetpixel $image	ресурс изображения полученный одной из функций создания изображений например такой как imagecreatetruecolor()
function bool imagesetpixel	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool imagesetpixel resource $image int $x int $y int $color	рисование точки
function imagestring $string	строка текста
function imagestring $font	может принимать значения 1 2 3 4 5 для встроенных шрифтов в кодировке latin2 более высокое число соответствует большему шрифту или любому из ваших собственных идентификаторов шрифтов зарегистрированных с помощью imageloadfont()
function imagestring $image	ресурс изображения полученный одной из функций создания изображений например такой как imagecreatetruecolor()
function imagestring $x	x-координата верхнего левого угла
function imagestring $y	y-координата верхнего левого угла
function imagestring $color	идентификатор цвета создаваемый функцией imagecolorallocate()
function bool imagestring	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool imagestring resource $image int $font int $x int $y string $string int $color	рисование строки текста горизонтально
function imagesx $image	ресурс изображения полученный одной из функций создания изображений например такой как imagecreatetruecolor()
function int imagesx	возвращает ширину изображения image или false в случае ошибки
function int imagesx resource $image	получение ширины изображения
function imagesy $image	ресурс изображения полученный одной из функций создания изображений например такой как imagecreatetruecolor()
function int imagesy	возвращает высоту изображения image или false в случае ошибки
function int imagesy resource $image	получение высоты изображения
function imagettfbbox $size	размер шрифта
function imagettfbbox $text	измеряемая строка
function imagettfbbox $angle	угол в градусах в котором будет измерен text
function imagettfbbox $fontfile	имя файла truetype шрифта может быть url
function array imagettfbbox	imagettfbbox() возвращает массив из 8 элементов представляющих координаты четырех точек - вершин рамки вокруг текста
function array imagettfbbox float $size float $angle string $fontfile string $text	получение параметров рамки обрамляющей текст написанный truetype шрифтом
function imagettftext $size	размер шрифта
function imagettftext $color	индекс цвета
function imagettftext $image	ресурс изображения полученный одной из функций создания изображений например такой как imagecreatetruecolor()
function imagettftext $x	координаты x и y определяют отправную точку для первого символа текста конкретно левый нижний угол символа
function imagettftext $angle	угол в градусах 0 градусов означает расположение текста слева направо
function imagettftext $fontfile	путь к файлу truetype шрифта
function imagettftext $text	текстовая строка в кодировке utf-8
function imagettftext $y	y-координата
function array imagettftext	возвращает массив из 8 элементов представляющих 4 точки - координаты углов рамки обрамляющей текст
function array imagettftext resource $image float $size float $angle int $x int $y int $color string $fontfile string $text	рисование текста на изображении шрифтом truetype
function imagewbmp $foreground	можно задать цвет верхнего слоя
function imagewbmp $filename	путь для сохранения файла
function imagewbmp $image	ресурс изображения полученный одной из функций создания изображений например такой как imagecreatetruecolor()
function bool imagewbmp	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool imagewbmp resource $image string $filename int $foreground	выводит изображение в браузер или пишет в файл
function imagexbm $foreground	можно задать цвет верхнего слоя
function imagexbm $filename	путь для сохранения файла
function imagexbm $image	ресурс изображения полученный одной из функций создания изображений например такой как imagecreatetruecolor()
function bool imagexbm	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool imagexbm resource $image string $filename int $foreground	вывод xbm изображения в броузер или файл
function implode $pieces	массив объединяемых строк
function implode $glue	по умолчанию равен пустой строке
function string implode	возвращает строку содержащую строковое представление всех элементов массива в указанном порядке со строкой glue между каждым элементом
function string implode string $glue array $pieces	объединяет элементы массива в строку
function in array $haystack	массив
function in array $needle	искомое значение
function in array $strict	если третий параметр strict установлен в true тогда функция in_array() также проверит соответствие типов параметра needle и соответствующего значения массива haystack
function bool in array	возвращает true если needle был найден в массиве и false в обратном случае
function bool in array mixed $needle array $haystack bool $strict	проверяет присутствует ли в массиве значение
function ini get $varname	имя настройки конфигурации
function string ini get	возвращает значение настройки конфигурации в виде строки
function string ini get string $varname	получает значение настройки конфигурации
function ini restore $varname	имя настройки
function void ini restore string $varname	восстанавливает значение настройки конфигурации
function ini set $newvalue	новое значение настройки
function ini set $varname	не все доступные настройки можно изменять функцией ini_set()
function string ini set	в случае успеха возвращает старое значение в случае неудачи возвращает false
function string ini set string $varname string $newvalue	установка значения настройки конфигурации
function interface exists $interface_name	имя интерфейса
function interface exists $autoload	определяет использовать ли по умолчанию __autoload или нет
function bool interface exists	возвращает true если интерфейс заданный именем interface_name был определен false в остальных случаях
function bool interface exists string $interface_name bool $autoload	проверяет определен ли интерфейс
function intval $base	основание системы исчисления для преобразования замечание : если base равно 0 основание системы исчисления определяется форматом параметра var : если строка включает префикс 0x или 0x) основание выбирается равным 16 шестнадцатеричным ; иначе если строка начинается с 0 основание равно 8 восьмеричное ; иначе основание выбирается равным 10 десятеричным
function intval $var	скалярное значение для конвертации в целое
function int intval	целое значение переменной var в случае успеха или 0 в случае неудачи
function int intval mixed $var int $base	возвращает целое значение переменной
function ip2long $ip_address	адрес в стандартном формате
function int ip2long	возвращает ipv4 адрес или false если параметр ip_address содержит ошибку
function int ip2long string $ip_address	конвертирует строку содержащую ipv4 интернет адрес с точками в допустимый адрес
function iptcparse $iptcblock	двоичные данные iptc
function array iptcparse	возвращает массив значений тэгов используя метки тэгов в качестве индекса
function array iptcparse string $iptcblock	разбор двоичных iptc данных на отдельные тэги
function is a $class_name	имя класса
function is a $object	проверяемый объект
function is a $allow_string	если параметр установлен в false то не допускается имя класса в виде строки в качестве параметра object
function bool is a	возвращает true если объект принадлежит данному классу или имеет данный класс в числе своих предков иначе возвращается false
function bool is a object $object string $class_name bool $allow_string	проверяет принадлежит ли объект к данному классу или содержит данный класс в числе своих предков
function is array $var	проверяемая переменная
function bool is array	возвращает true если переменная var является массивом array или false в противном случае
function bool is array mixed $var	определяет является ли переменная массивом
function is bool $var	проверяемая переменная
function bool is bool	возвращает true если var является переменной типа boolean или false в противном случае
function bool is bool mixed $var	проверяет является ли переменная булевой
function is callable $callable_name	получает имя для вызова
function is callable $name	может быть как именем функции заданным строковой переменной так и объектом и именем вызываемого метода например: array($someobject methodname
function is callable $syntax_only	если равен true функция только проверяет что name может быть функцией или методом
function bool is callable	возвращает true если name может быть вызвана или false в противном случае
function bool is callable callable $name bool $syntax_only string $callable_name	проверяет может ли значение переменной быть вызвано в качестве функции
function is dir $filename	путь к файлу
function bool is dir	возвращает true если файл существует и является директорией иначе возвращается false
function bool is dir string $filename	определяет является ли имя файла директорией
function is executable $filename	путь к файлу
function bool is executable	возвращает true если файл существует и является исполняемым или false в случае ошибки
function bool is executable string $filename	определяет является ли файл исполняемым
function is finite $val	проверяемое значение
function bool is finite	true если val является допустимым конечным числом в разрешенном для php float диапазоне для данной платформы и false в противном случае
function bool is finite float $val	проверяет является ли значение допустимым конечным числом
function is float $var	проверяемая переменная
function bool is float	возвращает true если var является переменной типа float false в противном случае
function bool is float mixed $var	проверяет является ли переменная числом с плавающей точкой
function is int $var	проверяемая переменная
function bool is int	возвращает true если var является целым числом или false в противном случае
function bool is int mixed $var	проверяет является ли переменная переменной целочисленного типа
function is nan $val	проверяемое значение
function bool is nan	возвращает true если val имеет значение не число nan и false в противном случае
function bool is nan float $val	проверяет является ли значение не числом
function is null $var	проверяемая переменная
function bool is null	возвращает true если значение var равно null или false в противном случае
function bool is null mixed $var	проверяет является ли значение переменной равным null
function is object $var	проверяемая переменная
function bool is object	возвращает true если var является объектом или false в противном случае
function bool is object mixed $var	проверяет является ли переменная объектом
function is readable $filename	путь к файлу
function bool is readable	возвращает true если файл или директория указанная в filename существует и доступна для чтения иначе возвращает false
function bool is readable string $filename	определяет существование файла и доступен ли он для чтения
function is resource $var	проверяемая переменная
function bool is resource	возвращает true если var является ресурсом или false в противном случае
function bool is resource mixed $var	проверяет является ли переменная ресурсом
function is string $var	проверяемая переменная
function bool is string	возвращает true если var является строкой и false в противном случае
function bool is string mixed $var	проверяет является ли переменная строкой
function is subclass of $object	имя класса или экземпляр объекта
function is subclass of $allow_string	если параметр установлен в false то не допускается имя класса в виде строки в качестве параметра object
function is subclass of $class_name	имя класса
function bool is subclass of	эта функция возвращает true если объект object принадлежит к классу наследующему от class_name иначе она возвращает false
function bool is subclass of mixed $object string $class_name bool $allow_string	проверяет содержит ли объект в своем дереве предков указанный класс
function is uploaded file $filename	имя проверяемого файла
function bool is uploaded file	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool is uploaded file string $filename	определяет был ли файл загружен при помощи http post
function isset	другая переменная
function isset $var	проверяемая переменная
function bool isset	возвращает true если var определена и значение отличное от null и false в противном случае
function bool isset mixed $var	определяет была ли установлена переменная значением отличным от null
function iterator apply $function	функция обратного вызова которая применяется к каждому элементу
function iterator apply $iterator	класс для перебора
function iterator apply $args	аргументы для передачи в функцию обратного вызова
function int iterator apply	returns the iteration count
function int iterator apply Traversable $iterator callable $function array $args	вызывает функцию для каждого элемента в итераторе
function iterator count $iterator	итератор в котором производится подсчет
function int iterator count	количество элементов в итераторе iterator
function int iterator count Traversable $iterator	подсчитывает количество элементов в итераторе
function jddayofweek $mode	режимы отображения дней недели режим значение 0 по умолчанию день недели возвращается в виде числа 0=воскресенье 1=понедельник и т
function jddayofweek $julianday	день в виде числа в юлианском летоисчислении
function mixed jddayofweek	день недели по григорианскому календарю в виде строки или числа
function mixed jddayofweek int $julianday int $mode	возвращает день недели
function jdmonthname $calendar	календарь из которого будет взято название месяца
function jdmonthname $jday	число дней в юлианском летоисчислении которое требуется преобразовать
function string jdmonthname	название месяца для заданного юлианского дня соответствующее календарю calendar
function string jdmonthname int $julianday int $mode	возвращает название месяца
function jdtofrench $julianday	номер дня в юлианском летоисчислении
function string jdtofrench	дата со дня французской революции в виде строки формата месяц / день / год
function string jdtofrench int $juliandaycount	переводит число дней в юлианском летоисчислении в дату по французскому республиканскому календарю
function jdtogregorian $julianday	номер дня в юлианском летоисчислении
function string jdtogregorian	дата по григорианскому календарю в виде строки формата месяц / день / год
function string jdtogregorian int $julianday	переводит число дней в юлианском летоисчислении в дату по григорианскому календарю
function jewishtojd $day	номер дня в виде числа от 1 до 30
function jewishtojd $year	год в виде числа от 1 до 9999
function jewishtojd $month	номер месяца в виде числа от 1 до 13
function int jewishtojd	номер дня в юлианском летоисчислении в виде числа для заданной иудейской даты
function int jewishtojd int $month int $day int $year	переводит дату по иудейскому календарю в число дней в юлианском летоисчислении
function json decode $json	json строка string для декодирования
function json decode $depth	указывает глубину рекурсии
function json decode $assoc	если true возвращаемые объекты будут преобразованы в ассоциативные массивы
function json decode $options	битовая маска опций декодирования json
function mixed json decode	возвращает данные json преобразованные в соответствующие типы php
function mixed json decode string $json bool $assoc int $depth int $options	декодирует json строку
function juliantojd $year	год в виде числа между -4713 и 9999
function juliantojd $month	месяц в виде числа от 1 январь до 12 декабрь
function juliantojd $day	день в виде числа от 1 до 31
function int juliantojd	юлианский день в виде числа для заданной даты по юлианскому календарю
function int juliantojd int $month int $day int $year	переводит дату по юлианскому календарю в число дней в юлианском летоисчислении
function key $array	массив
function mixed key	функция key() просто возвращает ключ того элемента массива на который в данный момент указывает внутренний указатель массива
function mixed key array $array	выбирает ключ из массива
function krsort $sort_flags	вы можете изменить поведение сортировки используя дополнительный параметр sort_flags подробнее см
function krsort $array	входной массив
function bool krsort	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool krsort array $array int $sort_flags	сортирует массив по ключам в обратном порядке
function lcfirst $str	входная строка
function string lcfirst	возвращает результирующую строку
function string lcfirst string $str	преобразует первый символ строки в нижний регистр
function lchgrp $group	группа указанная по имени или номеру
function lchgrp $filename	путь к ссылке
function bool lchgrp	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool lchgrp string $filename mixed $group	изменяет группу которой принадлежит символическая ссылка
function lchown $user	имя пользователя или номер
function lchown $filename	путь к файлу
function bool lchown	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool lchown string $filename mixed $user	изменяет владельца символической ссылки
function ldap 8859 to t61 $value	текст которые должен быть переведён
function string ldap 8859 to t61	возвращает кодированный в t61 параметр value
function string ldap 8859 to t61 string $value	переводит символы из кодировки iso-8859 в t61
function ldap add $entry	массив который определяет информацию о записи
function ldap add $link_identifier	идентификатор ссылки ldap возвращенный ldap_connect()
function ldap add $dn	отличительное имя ldap объекта
function bool ldap add	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool ldap add resource $link_identifier string $dn array $entry	добавить запись в ldap директорию
function ldap bind $link_identifier	идентификатор ссылки ldap возвращенный ldap_connect()
function bool ldap bind	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool ldap bind resource $link_identifier string $bind_rdn string $bind_password	привязать к ldap директории
function ldap count entries $link_identifier	идентификатор ссылки ldap возвращенный функцией ldap_connect()
function ldap count entries $result_identifier	внутренний результат ldap
function int ldap count entries	возвращает число записей в результате или false в случае ошибки
function int ldap count entries resource $link_identifier resource $result_identifier	посчитать число записей в результатах поиска
function ldap delete $dn	уникальное имя ldap записи
function ldap delete $link_identifier	идентификатор ссылки ldap возвращаемый ldap_connect()
function bool ldap delete	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool ldap delete resource $link_identifier string $dn	удаляет запись из директории ldap
function ldap dn2ufn $dn	отличительное имя объекта ldap
function string ldap dn2ufn	возвращает удобное для пользователя имя
function string ldap dn2ufn string $dn	преобразовать dn в удобный для пользователя формат именования
function ldap err2str $errno	номер ошибки
function string ldap err2str	возвращает сообщение ошибки в виде строки
function string ldap err2str int $errno	преобразовать код ошибки ldap в строковое сообщение об ошибке
function ldap error $link_identifier	идентификатор ссылки ldap возвращенный ldap_connect()
function string ldap error	возвращает сообщение ошибки в виде строки
function string ldap error resource $link_identifier	возвратить сообщение об ошибке ldap последней команды
function ldap explode dn $with_attrib	используется для запроса если rdns возвращены только со значениями или также с их атрибутами
function ldap explode dn $dn	отличительное имя объекта ldap
function array ldap explode dn	возвращает массив всех компонентов dn
function array ldap explode dn string $dn int $with_attrib	разделить dn на его составные части
function ldap first attribute $link_identifier	идентификатор ссылки ldap возвращенный ldap_connect()
function ldap first attribute $ber_identifier	ber_identifier является идентификатором внутреннего указателя ячейки памяти
function string ldap first attribute	возвращает первый атрибут в записи в случае успеха и false в случае ошибки
function string ldap first attribute resource $link_identifier resource $result_entry_identifier	вернуть первый атрибут
function bool ldap free result	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool ldap free result resource $result_identifier	освободить память результата
function ldap get dn $link_identifier	идентификатор ссылки ldap возвращенный ldap_connect()
function string ldap get dn	возвращает dn записи результата и false в случае ошибки
function string ldap get dn resource $link_identifier resource $result_entry_identifier	получить dn результирующей записи
function ldap get entries $link_identifier	идентификатор ссылки ldap возвращенный ldap_connect()
function array ldap get entries	возвращает полную информацию о результате в виде многомерного массива в случае успеха и false в случае ошибки
function array ldap get entries resource $link_identifier resource $result_identifier	получает все записи результата
function ldap get values len $link_identifier	идентификатор ссылки ldap возвращенный ldap_connect()
function array ldap get values len	возвращает массив значений для атрибута в случае успеха и false в случае ошибки
function array ldap get values len resource $link_identifier resource $result_entry_identifier string $attribute	получить все бинарные значения из записи результата
function ldap get values $link_identifier	идентификатор ссылки ldap возвращенный ldap_connect()
function array ldap get values	возвращает массив значений для атрибута в случае успеха и false в случае ошибки
function array ldap get values resource $link_identifier resource $result_entry_identifier string $attribute	получает все значения из записи результата
function ldap mod del $link_identifier	идентификатор ссылки ldap возвращенный ldap_connect()
function ldap mod del $dn	отличительное имя ldap объекта
function bool ldap mod del	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool ldap mod del resource $link_identifier string $dn array $entry	удалить значения атрибута из текущих атрибутов
function ldap modify $link_identifier	идентификатор ссылки ldap возвращенный ldap_connect()
function ldap modify $dn	отличительное имя объекта ldap
function bool ldap modify	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool ldap modify resource $link_identifier string $dn array $entry	изменить ldap запись
function ldap next attribute $link_identifier	идентификатор ссылки ldap возвращенный ldap_connect()
function ldap next attribute $ber_identifier	внутреннее состояние указателя сохраняется этим параметром
function string ldap next attribute	возвращает следующий атрибут записи в случае успеха и false в случае ошибки
function string ldap next attribute resource $link_identifier resource $result_entry_identifier	получить следующий атрибут из результата
function ldap next entry $link_identifier	идентификатор ссылки ldap возвращенный ldap_connect()
function resource ldap next entry	возвращает идентификатор для следующей записи в результате содержимое которого начинают читаться запуская ldap_first_entry()
function resource ldap next entry resource $link_identifier resource $result_entry_identifier	получить следующую запись результата
function ldap parse result $errcode	ссылка на переменную которой присваивается код ошибки ldap или 0 если нет ошибки
function ldap parse result $matcheddn	ссылка на переменную которой присваивается найденный dn если он определяется в запросе иначе присваивается null
function ldap parse result $link	идентификатор ldap соединения возвращаемый функцией ldap_connect()
function ldap parse result $result_identifier	ресурс ldap результата возвращаемый функциями ldap_list() или ldap_search()
function ldap parse result $referrals	ссылка на переменную которой присваивается массив array со всеми отсылками referral в виде строк или пустой массив если они не были возвращены
function ldap parse result $errmsg	ссылка на переменную которой присваивается сообщение об ldap ошибке или пустая строка если нет ошибки
function bool ldap parse result	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool ldap parse result resource $link resource $result int $errcode string $matcheddn string $errmsg array $referrals	извлечь информацию из результата
function ldap rename $deleteoldrdn	если true старые значения rdn удаляются иначе старые значения rdn сохраняются как неуникальные значения записи
function ldap rename $link_identifier	идентификатор ссылки ldap возвращенный ldap_connect()
function ldap rename $dn	отличительное имя ldap объекта
function ldap rename $newparent	новая родительская / превосходящая запись
function ldap rename $newrdn	новое rdn
function bool ldap rename	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool ldap rename resource $link_identifier string $dn string $newrdn string $newparent bool $deleteoldrdn	изменить имя записи
function void libxml clear errors	очистка буфера ошибок libxml
function libxml disable entity loader $disable	отключение true или включение false libxml расширений также как в dom xmlwriter и xmlreader для загрузки внешних сущностей
function bool libxml disable entity loader	возвращает предыдущее значение
function bool libxml disable entity loader bool $disable	отключение возможности загрузки сущностей из внешних источников
function array libxml get errors	возвращает массив объектов libxmlerror если в буфере есть ошибки либо пустой массив в противном случае
function array libxml get errors	получение массива произошедших ошибок
function libxml use internal errors $use_errors	включает true пользовательскую обработку ошибок или отключает ее false
function bool libxml use internal errors	эта функция возвращает предыдущее значение параметра use_errors
function bool libxml use internal errors bool $use_errors	отключение ошибок libxml и передача полномочий по выборке и обработке информации об ошибках пользователю
function link $target	цель ссылки
function link $link	имя ссылки
function bool link	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool link string $target string $link	создаёт жёсткую ссылку
function linkinfo $path	путь к ссылке
function int linkinfo	linkinfo() возвращает поле st_dev структуры stat из unix c которую возвращает системный вызов lstat
function int linkinfo string $path	возвращает информацию о ссылке
function list $var1	переменная
function array list	возвращает присвоенный массив
function array list mixed $var1	присваивает переменным из списка значения подобно массиву
function localtime $timestamp	необязательный параметр timestamp представляет собой integer метку времени по умолчанию равную текущему локальному времени если timestamp не указан
function localtime $is_associative	если установлен в false или не передан то возвращается обычный массив с числовыми индексами
function array localtime int $timestamp bool $is_associative	возвращает локальное время
function log $base	необязательное основание логарифма по умолчанию основание e что соответствует натуральному логарифму
function log $arg	число для которого необходимо вычислить логарифм
function float log	логарифм числа arg по основанию base если указано или натуральный логарифм
function float log float $arg float $base	натуральный логарифм
function log10 $arg	входное значение
function float log10	десятичный логарифм arg
function float log10 float $arg	десятичный логарифм
function long2ip $proper_address	заданный адрес
function string long2ip	возвращает интернет ip адрес в виде строки
function string long2ip string $proper_address	конвертирует ipv4 адрес интернет сети в стандартную строку с точками
function lstat $filename	путь к файлу или символической ссылке
function array lstat	обратитесь к странице руководства функции stat() для получения информации о структуре массива который возвращает lstat()
function array lstat string $filename	возвращает информацию о файле или символической ссылке
function ltrim $character_mask	с помощью параметра character_mask можно также указать удаляемые символы
function ltrim $str	входная строка
function string ltrim	эта функция возвращает строку str с удаленными из начала строки пробелами
function string ltrim string $str string $character_mask	удаляет пробелы или другие символы из начала строки
function mail $message	отправляемое сообщение
function mail $additional_headers(необязательный)	строка которая будет дополнительно вставлена в конец отправляемых заголовков письма
function mail $to	получатель или получатели письма
function mail $additional_parameters(необязательный)	параметр additional_parameters может быть использован для передачи дополнительных флагов в виде аргументов командной строки для программы сконфигурированной для отправки писем указанной директивой sendmail_path
function mail $subject	тема отправляемого письма
function bool mail	возвращает true если письмо было принято для передачи иначе false
function bool mail string $to string $subject string $message string $additional_headers string $additional_parameters	отправляет электронную почту
function mb check encoding $encoding	ожидаемая кодировка
function mb check encoding $var	поток данных для проверки
function bool mb check encoding	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool mb check encoding string $var string $encoding	проверяет что кодировка для строки выбрана верно
function mb convert case $mode	режим смены регистра
function mb convert case $encoding	параметр encoding представляет собой символьную кодировку
function mb convert case $str	строка string для преобразования
function string mb convert case	строка string преобразованная в соответствии с режимом mode
function string mb convert case string $str int $mode string $encoding	производит смену регистра символов в строке
function mb convert encoding $to_encoding	кодировка в которую будет преобразована строка str
function mb convert encoding $str	строка string которая преобразуется
function mb convert encoding $from_encoding	параметр для указания исходной кодировки строки
function string mb convert encoding	преобразованная строка
function string mb convert encoding string $str string $to_encoding mixed $from_encoding	преобразует кодировку символов
function mb convert kana $str	исходная строка string
function mb convert kana $encoding	параметр encoding представляет собой символьную кодировку
function mb convert kana $option	настройка конвертации
function string mb convert kana	преобразованная строка string
function string mb convert kana string $str string $option string $encoding	преобразование кодировок kana из одной в другую zen-kaku han-kaku и другие
function mb convert variables $from_encoding	from_encoding задается в виде массива array или строки string с разделенными запятой кодировками
function mb convert variables $to_encoding	кодировка в которую необходимо перекодировать строку string
function mb convert variables	дополнительные vars
function mb convert variables $vars	vars - ссылка на переменную содержимое которой необходимо преобразовать
function string mb convert variables	исходную кодировку в случае успеха или false в случае неудачи
function string mb convert variables string $to_encoding mixed $from_encoding mixed $vars	преобразует символы в переменной(-ых из одной кодировки в другую
function mb decode numericentity $convmap	convmap - массив array который задает диапазон кодов символов
function mb decode numericentity $str	строка для декодирования string
function mb decode numericentity $encoding	параметр encoding представляет собой символьную кодировку
function string mb decode numericentity	преобразованная строка string
function string mb decode numericentity string $str array $convmap string $encoding	декодирует числовую html-ссылку в символ
function mb detect order $encoding_list	encoding_list - массив array или строка в которой перечислены кодировки через запятую
function mixed mb detect order	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function mixed mb detect order mixed $encoding_list	установка / получение списка кодировок для механизмов определения кодировки
function mb encode numericentity $str	кодируемая строка string
function mb encode numericentity $convmap	convmap - массив задающий диапазон кодов
function mb encode numericentity $encoding	параметр encoding представляет собой символьную кодировку
function string mb encode numericentity	сконвертированная строка string
function string mb encode numericentity string $str array $convmap string $encoding bool $is_hex	кодирование символа в числовую html-ссылку
function mb ereg match $pattern	шаблон регулярного выражения
function mb ereg match $string	оцениваемая строка string
function bool mb ereg match string $pattern string $string string $option	совпадение с регулярным выражением для многобайтовой строки
function mb ereg search init $pattern	шаблон регулярное выражение
function mb ereg search init $option	настройка поиска
function mb ereg search init $string	строка в которой будет осуществляться поиск соответствий
function bool mb ereg search init string $string string $pattern string $option	инициализация поиска соответствий регулярному выражению многобайтной строкой и текстом регулярного выражения
function mb ereg search pos $option	настройка поиска
function mb ereg search pos $pattern	шаблон текст регулярного выражения
function array mb ereg search pos string $pattern string $option	возвращает позицию и длину совпавшего с регулярным выражением участка многобайтной строки
function mb ereg search $option	настройка поиска
function mb ereg search $pattern	шаблон для поиска текст регулярного выражения
function bool mb ereg search string $pattern string $option	поиск соответствий регулярному выражению для строк в многобайтных кодировках
function mb http output $encoding	если задан аргумент encoding mb_http_output() устанавливает кодировку выходных символов http в encoding
function mixed mb http output	если аргумент encoding опущен mb_http_output() возвращает текущую кодировку символов http вывода
function mixed mb http output string $encoding	установка / получение кодировки символов http вывода
function mb language $language	используется для кодирования символов в сообщениях электронной почты
function mixed mb language	если аргумент language задан а language имеет допустимое значение функция возвращает true
function mixed mb language string $language	установка / получение текущего языка
function array mb list encodings	возвращает индексный массив
function array mb list encodings	возвращает массив всех поддерживаемых кодировок
function mb output handler $contents	содержимое выходного буфера
function mb output handler $status	состояние выходного буфера
function string mb output handler	преобразованная строка string
function string mb output handler string $contents int $status	callback-функция преобразующая кодировку символов в выходном буфере
function mb preferred mime name $encoding	кодировка для которой выбирается набор символов
function string mb preferred mime name	mime набор символов charset в виде строки string для кодировки encoding
function string mb preferred mime name string $encoding	получение набора символов mime
function mb regex encoding $encoding	параметр encoding представляет собой символьную кодировку
function mixed mb regex encoding string $encoding	set / get character encoding for multibyte regex
function mb send mail $additional_parameter	значением additional_parameter является параметр командной строки mta
function mb send mail $subject	тема письма
function mb send mail $message	текст письма
function mb send mail $additional_headers(необязательный)	строка вставляемая в конец заголовка письма
function mb send mail $to	электронные адреса получателей
function bool mb send mail	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool mb send mail string $to string $subject string $message string $additional_headers string $additional_parameter	отправка закодированного сообщения
function mb strimwidth $str	исходная строка string
function mb strimwidth $start	смещение от начала строки
function mb strimwidth $width	ожидаемая ширина вырезаемой части
function mb strimwidth $trimmarker	строка добавляемая в конец обрезанной строки
function mb strimwidth $encoding	параметр encoding представляет собой символьную кодировку
function string mb strimwidth	обрезанная строка string
function string mb strimwidth string $str int $start int $width string $trimmarker string $encoding	получение строки обрезанной до заданной ширины
function mb stripos $encoding	кодировка символов строк
function mb stripos $offset	позиция в строке haystack с которой начинается поиск вхождений
function mb stripos $needle	строка поиск которой осуществляется в строке haystack
function mb stripos $haystack	строка в которой производится поиск вхождений строки needle
function int mb stripos	возвращает позицию первого вхождения строки needle в строке haystack либо false если needle не найдена
function int mb stripos string $haystack string $needle int $offset string $encoding	поиск позиции первого вхождения одной строки в другую нечувствителен к регистру
function mb stristr $before_needle	определяет какую часть строки haystack вернет эта функция
function mb stristr $encoding	название используемой кодировки символов
function mb stristr $haystack	строка в которой ищется первое вхождение строки needle
function mb stristr $needle	строка для поиска в haystack
function string mb stristr	возвращает часть строки haystack или false если needle не найдена
function string mb stristr string $haystack string $needle bool $before_needle string $encoding	находит первое вхождение подстроки в строке без учета регистра
function mb strlen $str	строка string для которой измеряется длина
function mb strlen $encoding	параметр encoding представляет собой символьную кодировку
function mixed mb strlen	возвращает количество символов в строке string str имеющих кодировку символов encoding
function mixed mb strlen string $str string $encoding	получает длину строки
function mb strrpos $needle	строка string поиск которой производится в строке haystack
function mb strrpos $offset	если аргумент задан поиск вхождения будет начинаться с позиции offset в строке string
function mb strrpos $haystack	строка string в которой производится поиск вхождения needle
function mb strrpos $encoding	параметр encoding представляет собой символьную кодировку
function int mb strrpos	возвращает позицию последнего вхождения строки needle в строке haystack string либо false если needle не найдена
function int mb strrpos string $haystack string $needle int $offset string $encoding	поиск позиции последнего вхождения одной строки в другую
function mb strstr $before_needle	определяет какую часть строки haystack вернет эта функция
function mb strstr $encoding	название используемой кодировки символов
function mb strstr $haystack	строка в которой ищется первое вхождение строки needle
function mb strstr $needle	строка для поиска в haystack
function string mb strstr	возвращает часть строки haystack или false если needle не найдена
function string mb strstr string $haystack string $needle bool $before_needle string $encoding	находит первое вхождение подстроки в строке
function mb strtolower $str	исходная строка string
function mb strtolower $encoding	параметр encoding представляет собой символьную кодировку
function string mb strtolower	str буквы в которой приведены к нижнему регистру
function string mb strtolower string $str string $encoding	приведение строки к нижнему регистру
function mb strtoupper $str	исходная строка string
function mb strtoupper $encoding	параметр encoding представляет собой символьную кодировку
function string mb strtoupper	str буквы в которой приведены к верхнему регистру
function string mb strtoupper string $str string $encoding	приведение строки к верхнему регистру
function mb substitute character $substrchar	задает значение юникода в виде числа integer или одной из следующих строк string : none : нет вывода long : код конечного в выходной кодировке символа пример: u+3000 jis+7e7e entity : сущность конечного в выходной кодировке символа пример: ȁ)
function mixed mb substitute character	если аргумент substchar задан функция вернет true в случае успеха false в противном случае
function mixed mb substitute character mixed $substrchar	задание / получение символа заместителя
function mb substr count $needle	строка string для поиска
function mb substr count $haystack	строка string для проверки
function mb substr count $encoding	параметр encoding представляет собой символьную кодировку
function int mb substr count	количество вхождений подстроки needle в строку haystack
function int mb substr count string $haystack string $needle string $encoding	возвращает количество вхождений подстроки
function string mcrypt cbc int $cipher string $key string $data int $mode string $iv	шифрует / дешифрует данные в режиме cbc
function md5 file $filename	имя файла
function md5 file $raw_output	если имеет значение true то возвращается бинарная строка из 16 символов
function string md5 file	возвращает строку в случае успеха иначе false
function string md5 file string $filename bool $raw_output	возвращает md5-хэш файла
function md5 $str	строка
function md5 $raw_output	если необязательный аргумент raw_output имеет значение true то возвращается бинарная строка из 16 символов
function string md5	возвращает хэш в виде 32-символьного шестнадцатеричного числа
function string md5 string $str bool $raw_output	возвращает md5-хэш строки
function memory get peak usage $real_usage	передача true в качестве этого аргумента позволяет получить реальный объем памяти выделенный системой
function int memory get peak usage	возвращает максимальный объем памяти в байтах
function int memory get peak usage bool $real_usage	возвращает пиковое значение объема памяти выделенной php
function metaphone $phonemes	этот параметр выставляет ограничение в phonemes символов на длину возвращаемого ключа metaphone
function metaphone $str	входная строка
function string metaphone	возвращает ключ metaphone в виде строки или false в случае возникновения ошибки
function string metaphone string $str int $phonemes	возвращает ключ metaphone для строки
function method exists $method_name	имя метода
function method exists $object	экземпляр объекта или имя класса
function bool method exists	возвращает true если метод method_name определен для указанного объекта object иначе возвращает false
function bool method exists mixed $object string $method_name	проверяет существует ли метод в данном классе
function microtime $get_as_float	если указано и установлено в true microtime() возвратит float вместо string как описано в разделе возвращаемых значений ниже
function mixed microtime	по умолчанию microtime() возвращает string в формате msec sec где sec представляет собой количество секунд с начала эпохи unix 1 января 1970 0:00:00 gmt а msec - это количество микросекунд прошедших после sec
function mixed microtime bool $get_as_float	возвращает текущую метку времени unix с микросекундами
function mime content type $filename	путь к проверяемому файлу
function string mime content type	возвращает тип содержимого в формате mime например text / plain или application / octet-stream
function string mime content type string $filename	определяет mime-тип содержимого файла устаревшее
function mkdir $context	замечание : поддержка контекста была добавлена в php 5
function mkdir $mode	по умолчанию принимает значение 0777 что означает самые широкие права
function mkdir $recursive	разрешает создание вложенных директорий указанных в pathname
function mkdir $pathname	путь к директории
function bool mkdir	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool mkdir string $pathname int $mode bool $recursive resource $context	создаёт директорию
function mktime $month	количество месяцев прошедших с конца предыдущего года
function mktime $is_dst	данный параметр может быть установлен в 1 если заданной дате соответствует летнее время dst 0 в противном случае или -1 значение по умолчанию если неизвестно действует ли летнее время на заданную дату
function mktime $second	количество секунд прошедших от начала минуты указанной параметром minute
function mktime $year	номер года может быть указан двумя или четырьмя цифрами причем значения между 0-69 будут трактованы как 2000-2069 а между 70-100 - как 1970-2000
function mktime $hour	количество часов прошедших с начала дня указанного параметрами month day и year
function mktime $minute	количество минут прошедших от начала часа указанного параметром hour
function mktime $day	количество дней прошедших с конца предыдущего месяца
function int mktime	mktime() возвращает временную метку unix в соответствии с переданными аргументами
function int mktime int $hour int $minute int $second int $month int $day int $year int $is_dst	возвращает метку времени unix для заданной даты
function money format $%	вставляет символ %
function money format $n	используется национальный денежный формат из текущей локали например для локали de_de: eu1
function money format $!	подавляет вывод символа валюты
function money format $^	отключает группировку символов определяемую текущей локалью
function money format $number	форматируемое число
function money format $format	описание формата состоит из: символа % необязательных флагов необязательной ширины поля необязательной точности до запятой необязательной точности после запятой обязательного описателя преобразования флаги могут быть использованы следующие флаги: = f символ = за которым следует еще один символ f задает символ заполнения
function money format $+или(	задает способ форматирования положительных и отрицательных значений
function money format $-	если этот флаг задан поля будут выравнены влево с отбивкой вправо вместо используемого по умолчанию выравнивания вправо с отбивкой влево
function money format $#n	максимальное количество цифр n которое ожидается до запятой
function money format $w	строка из десятичных цифр задающая минимальную ширину поля
function money format $i	используется международный денежный формат из текущей локали например для американской локали: usd 1 234
function money format $.p	точка за которой следует число знаков p выводимых после запятой
function money format f $	символ = за которым следует еще один символ f задает символ заполнения
function string money format	возвращает отформатированную строку
function string money format string $format float $number	форматирует число как денежную величину
function mt srand $seed	необязательное значение параметра переинициализации
function void mt srand int $seed	переинициализирует генератор случайных чисел mt
function mysql affected rows $link_identifier	соединение mysql
function int mysql affected rows	возвращает количество измененных записей в случае успеха и -1 в случае если последний запрос не удался
function int mysql affected rows resource $link_identifier	возвращает число затронутых прошлой операцией рядов
function mysql client encoding $link_identifier	соединение mysql
function string mysql client encoding	возвращает используемую по умолчанию кодировку для данного соединения
function string mysql client encoding resource $link_identifier	возвращает кодировку соединения
function mysql close $link_identifier	соединение mysql
function bool mysql close	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool mysql close resource $link_identifier	закрывает соединение с сервером mysql
function mysql create db $link_identifier	соединение mysql
function mysql create db $database_name	имя создаваемой базы данных
function bool mysql create db	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool mysql create db string $database_name resource $link_identifier	создает базу данных mysql
function mysql data seek $result	обрабатываемый результат запроса
function mysql data seek $row_number	желаемый номер ряда в полученном дескрипторе результата
function bool mysql data seek	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool mysql data seek resource $result int $row_number	перемещает внутренний указатель в результате запроса
function mysql db name $field	имя поля
function mysql db name $result	дескриптор результата полученный из вызова mysql_list_dbs()
function mysql db name $row	индекс в результате
function string mysql db name	возвращает название базы данных в случае успеха или false в случае ошибки
function string mysql db name resource $result int $row mixed $field	возвращает название базы данных из вызова к mysql_list_dbs
function mysql db query $link_identifier	соединение mysql
function mysql db query $query	запрос mysql
function mysql db query $database	имя базы данных на которую произойдет переключение
function resource mysql db query	возвращает ресурс результата запроса к mysql или false в случае ошибки
function resource mysql db query string $database string $query resource $link_identifier	переключается на указанную базу данных и посылает запрос
function mysql drop db $link_identifier	соединение mysql
function mysql drop db $database_name	имя удаляемой базы данных
function bool mysql drop db	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool mysql drop db string $database_name resource $link_identifier	уничтожает базу данных mysql
function mysql errno $link_identifier	соединение mysql
function int mysql errno	возвращает код ошибки последней функции работы с mysql или 0 ноль если операция выполнена успешно
function int mysql errno resource $link_identifier	возвращает численный код ошибки выполнения последней операции с mysql
function mysql escape string $unescaped_string	экранируемая строка
function string mysql escape string	возвращает экранируемую строку
function string mysql escape string string $unescaped_string	экранирует строку для использования в mysql_query
function mysql fetch array $result	обрабатываемый результат запроса
function mysql fetch array $result_type	тип возвращаемого массива
function array mysql fetch array	возвращает массив строк соответствующих обработанному ряду результата запроса или false если рядов больше нет
function array mysql fetch array resource $result int $result_type	обрабатывает ряд результата запроса возвращая ассоциативный массив численный массив или оба
function mysql fetch assoc $result	обрабатываемый результат запроса
function array mysql fetch assoc	возвращает ассоциативный массив строк соответствующий полученному ряду либо false если рядов больше нет
function array mysql fetch assoc resource $result	возвращает ряд результата запроса в качестве ассоциативного массива
function mysql fetch field $result	обрабатываемый результат запроса
function mysql fetch field $field_offset	числовое смещение поля
function object mysql fetch field	возвращает object содержащий информацию о колонке
function object mysql fetch field resource $result int $field_offset	возвращает информацию о колонке из результата запроса в виде объекта
function mysql fetch object $class_name	имя класса
function mysql fetch object $result	обрабатываемый результат запроса
function mysql fetch object $params	необязательный массив array параметров передаваемых в конструктор создаваемого экземпляра class_name
function object mysql fetch object	возвращает объект object со строковыми свойствами соответствующими полученному ряду или false если рядов больше нет
function object mysql fetch object resource $result string $class_name array $params	обрабатывает ряд результата запроса и возвращает объект
function mysql field flags $result	обрабатываемый результат запроса
function mysql field flags $field_offset	числовое смещение поля
function string mysql field flags	возвращает строку с флагами связанными с результатом или false в случае возникновения ошибки
function string mysql field flags resource $result int $field_offset	возвращает флаги связанные с указанным полем результата запроса
function mysql field name $result	обрабатываемый результат запроса
function mysql field name $field_offset	числовое смещение поля
function string mysql field name	название поля по указанному индексу в случае успеха или false в случае возникновения ошибки
function string mysql field name resource $result int $field_offset	возвращает название указанной колонки результата запроса
function mysql field seek $result	обрабатываемый результат запроса
function mysql field seek $field_offset	числовое смещение поля
function bool mysql field seek	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool mysql field seek resource $result int $field_offset	устанавливает внутренний указатель результата на переданное смещение поля
function mysql field type $result	обрабатываемый результат запроса
function mysql field type $field_offset	числовое смещение поля
function string mysql field type	поля могут быть следующих типов: int real string blob и других подробно описанных документации mysql
function string mysql field type resource $result int $field_offset	возвращает тип указанного поля из результата запроса
function mysql free result $result	обрабатываемый результат запроса
function bool mysql free result	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool mysql free result resource $result	освобождает память от результата запроса
function mysql get host info $link_identifier	соединение mysql
function string mysql get host info	возвращает строку описывающую тип используемого соединения указанного переданным дескриптором соединения или false в случае возникновения ошибки
function string mysql get host info resource $link_identifier	возвращает информацию о соединении с mysql
function mysql get proto info $link_identifier	соединение mysql
function int mysql get proto info	возвращает используемый протокол mysql в случае успеха или false в случае возникновения ошибки
function int mysql get proto info resource $link_identifier	возвращает информацию о протоколе mysql
function mysql list dbs $link_identifier	соединение mysql
function resource mysql list dbs	возвращает resource результата в случае успеха или false в случае ошибки
function resource mysql list dbs resource $link_identifier	возвращает список баз данных доступных на сервере
function mysql list fields $link_identifier	соединение mysql
function mysql list fields $database_name	имя опрашиваемой базы данных
function mysql list fields $table_name	имя опрашиваемой таблицы
function resource mysql list fields	дескриптор результата resource в случае успеха или false в случае ошибки
function resource mysql list fields string $database_name string $table_name resource $link_identifier	возвращает список колонок таблицы
function mysql list processes $link_identifier	соединение mysql
function resource mysql list processes	дескриптор результата resource в случае успеха или false в случае возникновения ошибки
function resource mysql list processes resource $link_identifier	возвращает список процессов mysql
function mysql list tables $link_identifier	соединение mysql
function mysql list tables $database	имя базы данных
function resource mysql list tables	дескриптор результата resource в случае успеха или false в случае возникновения ошибки
function resource mysql list tables string $database resource $link_identifier	возвращает список таблиц базы данных mysql
function mysql num fields $result	обрабатываемый результат запроса
function int mysql num fields	возвращает количество полей в результате запроса resource в случае успеха или false в случае возникновения ошибки
function int mysql num fields resource $result	возвращает количество полей результата запроса
function mysql num rows $result	обрабатываемый результат запроса
function int mysql num rows	количество рядов в результате запроса в случае успеха или false в случае возникновения ошибки
function int mysql num rows resource $result	возвращает количество рядов результата запроса
function mysql pconnect $server	сервер mysql
function mysql pconnect $client_flags	параметр client_flags может быть комбинацией следующих констант: 128 включает обработку load data local mysql_client_ssl mysql_client_compress mysql_client_ignore_space и mysql_client_interactive
function mysql pconnect $password	пароль
function mysql pconnect $username	имя пользователя
function resource mysql pconnect	возвращает дескриптор постоянного соединения mysql в случае успеха и false в случае ошибки
function resource mysql pconnect string $server string $username string $password int $client_flags	устанавливает постоянное соединение с сервером mysql
function mysql ping $link_identifier	соединение mysql
function bool mysql ping	возвращает true если соединение в рабочем состоянии и false в противном случае
function bool mysql ping resource $link_identifier	проверяет соединение с сервером и пересоединяется при необходимости
function mysql real escape string $link_identifier	соединение mysql
function mysql real escape string $unescaped_string	экранируемая строка
function string mysql real escape string	возвращает строку в которой экранированы все необходимые символы или false в случае ошибки
function string mysql real escape string string $unescaped_string resource $link_identifier	экранирует специальные символы в строках для использования в выражениях sql
function mysql result $result	обрабатываемый результат запроса
function mysql result $row	номер получаемого ряда из результата
function mysql result $field	имя или смещение получаемого поля
function string mysql result	содержимое одного поля из набора результата mysql в случае успеха или false в случае ошибки
function string mysql result resource $result int $row mixed $field	возвращает данные результата запроса
function mysql select db $link_identifier	соединение mysql
function mysql select db $database_name	имя выбираемой базы данных
function bool mysql select db	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool mysql select db string $database_name resource $link_identifier	выбирает базу данных mysql
function mysql set charset $link_identifier	соединение mysql
function mysql set charset $charset	корректное название кодировки
function bool mysql set charset	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool mysql set charset string $charset resource $link_identifier	устанавливает кодировку клиента
function mysql stat $link_identifier	соединение mysql
function string mysql stat	возвращает строку с данными аптайма количества потоков запросов количеством открытых таблиц и таблиц с сброшенным внутренним кэшем flush tables а также количество запросов в секунду
function string mysql stat resource $link_identifier	возвращает текущий статус сервера
function mysql tablename $i	целочисленный индекс номер ряда / таблицы
function mysql tablename $result	дескриптор результата типа resource полученный из вызова mysql_list_tables()
function string mysql tablename	имя таблицы в случае успеха или false в случае возникновения ошибки
function string mysql tablename resource $result int $i	возвращает имя таблицы содержащей указанное поле
function mysql thread id $link_identifier	соединение mysql
function int mysql thread id	идентификатор потока в случае успеха или false в случае возникновения ошибки
function int mysql thread id resource $link_identifier	возвращает идентификатор текущего потока
function mysql unbuffered query $link_identifier	соединение mysql
function mysql unbuffered query $query	запускаемый sql-запрос
function resource mysql unbuffered query	для select show describe и explain запросов mysql_unbuffered_query() возвращает resource в случае успеха или false в случае ошибки
function resource mysql unbuffered query string $query resource $link_identifier	посылает запрос mysql без авто-обработки результата и его буферизации
function natcasesort $array	входной массив
function bool natcasesort	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool natcasesort array $array	сортирует массив используя алгоритм natural order без учета регистра символов
function natsort $array	входной массив
function bool natsort	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool natsort array $array	сортирует массив используя алгоритм natural order
function next $array	массив array модифицируется данной функцией
function mixed next	возвращает значение элемента массива находящегося на позиции следующей за позицией внутренний указателя или false если достигнут конец массива
function mixed next array $array	передвигает внутренний указатель массива на одну позицию вперёд
function string ngettext	возвращает корректную форму сообщения во множественном числе идентифицируемых по параметрам msgid1 и msgid2 для количества n
function string ngettext string $msgid1 string $msgid2 int $n	версия gettext для сообщений во множественном числе
function nl langinfo $item	item может быть целым числом или соответствующей константой
function string nl langinfo	возвращает элемент в виде строки или false если item передан неправильно
function string nl langinfo int $item	возвращает информацию о языке и локали
function nl2br $string	входная строка
function nl2br $is_xhtml	использовать ли совместимые с xhtml переводы строк или нет
function string nl2br	возвращает измененную строку
function string nl2br string $string bool $is_xhtml	вставляет html-код разрыва строки перед каждым переводом строки
function number format $number	форматируемое число
function number format $thousands_sep	устанавливает разделитель тысяч
function number format $decimals	устанавливает число знаков после запятой
function number format $dec_point	устанавливает разделитель дробной части
function string number format	возвращается отформатированное число number
function string number format float $number int $decimals	форматирует число с разделением групп
function void ob clean	очищает стирает буфер вывода
function bool ob end clean	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool ob end clean	очищает стирает буфер вывода и отключает буферизацию вывода
function string ob get clean	возвращает содержимое буфера вывода и заканчивает буферизацию вывода
function string ob get clean	получить содержимое текущего буфера и удалить его
function string ob get contents	функция вернет содержимое буфера вывода или false если буферизация вывода не активирована
function string ob get contents	возвращает содержимое буфера вывода
function string ob get flush	возвращает буфер вывода или false если буферизация не активна
function string ob get flush	сброс буфера вывода возвращая его содержимое и отключение буферизации вывода
function int ob get level	возвращает уровень вложенности обработчиков буферизации вывода или 0 если буферизация не активирована
function int ob get level	возвращает уровень вложенности механизма буферизации вывода
function ob get status $full_status	если true то вернет все уровни активных буферов
function array ob get status bool $full_status	получить статус буфера вывода
function string ob gzhandler string $buffer int $mode	callback-функция используемая для gzip-сжатия буфера вывода при вызове ob_start
function string ob iconv handler	информацию о возвращаемых значениях этого обработчика можно посмотреть в описании к функции ob_start()
function string ob iconv handler string $contents int $status	преобразует символы из текущей кодировки в кодировку выходного буфера
function ob implicit flush $flag	true для включения неявного сброса false в противном случае
function void ob implicit flush int $flag	функция включает / выключает неявный сброс
function array ob list handlers	функция вернет массив с используемыми обработчиками вывода если имеются
function array ob list handlers	список всех используемых обработчиков вывода
function ob start $chunk_size	если передан не обязательный параметр chunk_size то буфер буден сброшен после любого вывода превышающего или равного по размеру chunk_size
function ob start $phase	битовая маска констант php_output_handler_*
function ob start $buffer	содержимое буфера вывода
function ob start $output_callback	можно задать необязательный параметр output_callback
function ob start $flags	параметр flags является битовой маской которая управляет операциями которые можно совершать над буфером вывода
function bool ob start	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool ob start callable $output_callback int $chunk_size int $flags	включение буферизации вывода
function ob tidyhandler $input	буфер
function ob tidyhandler $mode	режим буфера
function string ob tidyhandler	возвращает видоизмененный буфер
function string ob tidyhandler string $input int $mode	функция обратного вызова ob_start для восстановление буфера
function oci bind by name $bv_name	метка с префиксом в виде двоеточия используемая в выражении
function oci bind by name $type	тип данных к которому oracle будет приводить значения
function oci bind by name $statement	допустимый идентификатор выражения oci8
function oci bind by name $maxlength	устанавливает максимальный размер данных
function oci bind by name $variable	переменная php ассоциированная с bv_name
function bool oci bind by name	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool oci bind by name resource $statement string $bv_name mixed $variable int $maxlength int $type	прикрепляет переменную php к соответствующей метке в sql-выражении
function oci close $connection	идентификатор соединения oracle полученный и функций oci_connect() oci_pconnect() или oci_new_connect()
function bool oci close	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool oci close resource $connection	закрывает соединение с сервером oracle
function oci commit $connection	идентификатор соединения oracle полученный из функций oci_connect() oci_pconnect() или oci_new_connect()
function bool oci commit	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool oci commit resource $connection	фиксирует транзакцию базы данных
function oci connect $session_mode	этот параметр доступен начиная с версии php 5 pecl oci8 1
function oci connect $password	пароль username
function oci connect $connection_string	содержит экземпляр oracle для подключения
function oci connect $character_set	определяет кодировку используемую клиентскими библиотеками oracle
function oci connect $username	имя пользователя oracle
function resource oci connect	возвращает идентификатор соединения или false в случае ошибки
function resource oci connect string $username string $password string $connection_string string $character_set int $session_mode	устанавливает соединение с базой данных oracle
function oci define by name $type	тип возвращаемых данных
function oci define by name $statement	корректный идентификатор выражения oci8 полученный из oci_parse() и исполненный функцией oci_execute() или идентификатор выражения ref cursor
function oci define by name $column_name	имя столбца использованного в запросе
function oci define by name $variable	переменная php предназначенная для хранения возвращенного значения
function bool oci define by name	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool oci define by name resource $statement string $column_name mixed $variable int $type	сопоставляет переменную php столбцу результата запроса
function oci error $resource	для большинства ошибок параметром resource является соответствующий идентификатор соединения или выражения
function array oci error	если ошибок не найдено то oci_error() возвращает false
function array oci error resource $resource	возвращает последнюю ошибку
function oci execute $mode	необязательный второй параметр с одним из следующих значений: режим выполнения константа описание oci_commit_on_success автоматически сохранять все несохраненные изменения произведенные за текущую сессию при успешном выполнении выражения
function oci execute $statement	правильное подготовленное выражение oci
function bool oci execute	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool oci execute resource $statement int $mode	выполняет подготовленное выражение
function oci fetch all $statement	корректный идентификатор выражения oci8 полученный из oci_parse() и исполненный функцией oci_execute() или идентификатор выражения ref cursor
function oci fetch all $output	переменная содержащая возвращенные строки
function oci fetch all $maxrows	число возвращаемых строк
function oci fetch all $skip	число строк которых необходимо исключить из выборки
function oci fetch all $flags	параметр flags содержит структуру массива отражает необходимость использования ассоциативных массивов
function int oci fetch all	возвращает число столбцов в output который может принимать значение 0 или более или false в случае возникновения ошибки
function int oci fetch all resource $statement array $output int $skip int $maxrows int $flags	выбирает все строки из результата запроса в двумерный массив
function oci fetch array $statement	корректный идентификатор выражения oci8 полученный из oci_parse() и исполненный функцией oci_execute() или идентификатор выражения ref cursor
function oci fetch array $mode	необязательный второй параметр может состоять из любой комбинации следующих констант: oci_fetch_array() modes константа описание oci_both возвращает массив как с ассоциативными и числовыми индексами
function array oci fetch array	возвращает массив с ассоциативными и / или числовыми ключами
function array oci fetch array resource $statement int $mode	возвращает следующую строку из результата запроса в виде ассоциативного или нумерованного массива
function oci fetch assoc $statement	корректный идентификатор выражения oci8 полученный из oci_parse() и исполненный функцией oci_execute() или идентификатор выражения ref cursor
function array oci fetch assoc	возвращает ассоциативный массив
function array oci fetch assoc resource $statement	возвращает следующую строку из результата запроса в виде ассоциативного массива
function oci fetch $statement	корректный идентификатор выражения oci8 полученный из oci_parse() и исполненный функцией oci_execute() или идентификатор выражения ref cursor
function bool oci fetch	возвращает true при успехе или false в результате запроса больше нет рядов
function bool oci fetch resource $statement	выбирает следующую строку из результата в буфер
function oci field is null $statement	идентификатор допустимого oci запроса
function oci field is null $field	может быть порядковый номер поля начиная с 1 или имя поля
function bool oci field is null	возвращает true если field равен null и false если нет
function bool oci field is null resource $statement mixed $field	проверяет равняется ли поле в текущем полученном ряду равным null
function oci field name $field	может быть номером поля нумерация начинается с 1 или именем
function oci field name $statement	идентификатор допустимого oci запроса
function string oci field name	возвращает имя в виде строки или false при ошибках
function string oci field name resource $statement mixed $field	возвращает имя поля из результата запроса
function oci field precision $field	может быть номером поля нумерация начинается с 1 или именем
function oci field precision $statement	идентификатор допустимого oci запроса
function int oci field precision	возвращает точность в виде числа или false при ошибках
function int oci field precision resource $statement mixed $field	возвращает точность поля
function oci field size $field	может быть номером поля нумерация начинается с 1 или именем
function oci field size $statement	идентификатор допустимого oci запроса
function int oci field size	возвращает размер поля field в байтах или false при ошибках
function int oci field size resource $statement mixed $field	возвращает размер поля
function oci free statement $statement	допустимый идентификатор oci-выражения
function bool oci free statement	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool oci free statement resource $statement	освобождает ресурсы занимаемые курсором или sql-выражением
function oci internal debug $onoff	значение false выключает отладку а true - включает
function void oci internal debug bool $onoff	включает и выключает внутреннюю отладку
function oci lob copy $length	длина участка содержимого для копирования
function oci lob copy $lob_from	копируемый объект lob
function oci lob copy $lob_to	lob объект назначения
function bool oci lob copy	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool oci lob copy OCI-Lob $lob_to OCI-Lob $lob_from int $length	копирует объект lob
function oci lob is equal $lob1	идентификатор lob
function oci lob is equal $lob2	идентификатор lob
function bool oci lob is equal	возвращает true если объекты идентичны и false в обратном случае или в случае ошибки
function bool oci lob is equal OCI-Lob $lob1 OCI-Lob $lob2	сравнивает два объекта lob / file
function oci new collection $schema	должна быть указана схема данных где создан именованный тип
function oci new collection $tdo	должен быть корректным именем типа в верхнем регистре
function oci new collection $connection	идентификатор соединения с сервером oracle возвращаемый функцией oci_connect() или oci_pconnect()
function OCI-Collection oci new collection	returns a new ocicollection object or false on error
function OCI-Collection oci new collection resource $connection string $tdo string $schema	создает новый объект коллекции
function oci new connect $session_mode	этот параметр доступен начиная с версии php 5 pecl oci8 1
function oci new connect $password	пароль пользователя username
function oci new connect $connection_string	содержит экземпляр oracle для подключения
function oci new connect $character_set	определяет кодировку используемую клиентскими библиотеками oracle
function oci new connect $username	имя пользователя oracle
function resource oci new connect	возвращает идентификатор соединения или false в случае ошибки
function resource oci new connect string $username string $password string $connection_string string $character_set int $session_mode	устанавливает новое соединение с сервером oracle
function oci new descriptor $connection	идентификатор соединения с сервером oracle возвращаемый функцией oci_connect() или oci_pconnect()
function oci new descriptor $type	допустимые значения параметра type : oci_dtype_file oci_dtype_lob и oci_dtype_rowid
function OCI-Lob oci new descriptor	возвращает новый lob или дескриптор file в случае успеха или false при ошибке
function OCI-Lob oci new descriptor resource $connection int $type	инициализирует новый дескриптор объекта lob или file
function oci num fields $statement	идентификатор допустимого oci запроса
function int oci num fields	возвращает число затронутых строк в виде integer либо false при ошибке
function int oci num fields resource $statement	возвращает количество полей в результате запроса
function oci password change $old_password	старый пароль
function oci password change $dbname	имя базы данных
function oci password change $new_password	новый пароль
function oci password change $username	имя пользователя oracle
function oci password change $connection	идентификатор соединения возвращаемый функцией oci_connect() или oci_pconnect()
function bool oci password change	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool oci password change resource $connection string $username string $old_password string $new_password	изменяет пароль пользователя oracle
function oci pconnect $session_mode	этот параметр доступен начиная с версии php 5 pecl oci8 1
function oci pconnect $password	пароль пользователя username
function oci pconnect $connection_string	содержит экземпляр oracle для подключения
function oci pconnect $character_set	определяет кодировку используемую клиентскими библиотеками oracle
function oci pconnect $username	имя пользователя oracle
function resource oci pconnect	возвращает идентификатор подключения или false в случае ошибки
function resource oci pconnect string $username string $password string $connection_string string $character_set int $session_mode	устанавливает постоянное соединение с сервером oracle
function oci result $field	может быть задано номером поля начиная с 1 либо по имени
function mixed oci result	возвращает все значения в виде строки за исключением абстрактных типов rowids lobs и files
function mixed oci result resource $statement mixed $field	возвращает значение поля из результата запроса
function string oci server version	возвращает в виде строки информацию о версии или false при ошибке
function string oci server version resource $connection	возвращает версию сервера oracle
function oci set client identifier $connection	идентификатор соединения oracle возвращаемый oci_connect() oci_pconnect() или oci_new_connect()
function oci set client identifier $client_identifier	задаваемая пользователем строка до 64 байт
function bool oci set client identifier	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool oci set client identifier resource $connection string $client_identifier	задает идентификатор клиента
function oci set client info $connection	идентификатор соединения oracle возвращаемый oci_connect() oci_pconnect() или oci_new_connect()
function oci set client info $client_info	задаваемая пользователем строка до 64 байт
function bool oci set client info	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool oci set client info resource $connection string $client_info	задает информацию о клиенте
function oci set edition $edition	имя выпуска базы данных oracle ранее созданное sql командой create edition
function bool oci set edition	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool oci set edition string $edition	задает выпуск edition базы данных
function oci set module name $connection	идентификатор соединения oracle возвращаемый oci_connect() oci_pconnect() или oci_new_connect()
function oci set module name $module_name	задаваемая пользователем строка string длиной до 48 байт
function bool oci set module name	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool oci set module name resource $connection string $module_name	задает имя модулю
function oci set prefetch $statement	корректный идентификатор выражения oci8 полученный из oci_parse() и исполненный функцией oci_execute() или идентификатор выражения ref cursor
function oci set prefetch $rows	количество рядов предварительной выборки > = 0
function bool oci set prefetch	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool oci set prefetch resource $statement int $rows	устанавливает количество строк которые будут автоматически выбраны в буфер
function opendir $context	для описания параметра context обратитесь к разделу потоки
function opendir $path	путь к открываемому каталогу
function resource opendir	возвращает дескриптор каталога resource в случае успеха или false в случае ошибки
function resource opendir string $path resource $context	открывает дескриптор каталога
function openlog $ident	строка ident добавляется к каждому сообщению
function openlog $facility	параметр facility используется для определения типа программы создавшей сообщение журнала
function openlog $option	аргумент option используется для указания используемых опций журналирования при создании записи журнала
function bool openlog	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool openlog string $ident int $option int $facility	открывает соединение к системному журналу
function output add rewrite var $value	значение параметра
function output add rewrite var $name	имя параметра
function bool output add rewrite var	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool output add rewrite var string $name string $value	добавить обработчик значений url
function bool output reset rewrite vars	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool output reset rewrite vars	сброс значений установленных обработчиком url
function pack $format	параметр format задается в виде строки и состоит из кодов формата и опционального аргумента повторения
function string pack	возвращает бинарную строку содержащую данные
function string pack string $format mixed $args	упаковывает данные в бинарную строку
function parse ini string $process_sections	установив в параметр process_sections true можно получить многомерный массив который включает названия секций и настроек
function parse ini string $ini	содержимое разбираемого ini файла
function parse ini string $scanner_mode	может принимать следующие значения: ini_scanner_normal по умолчанию или ini_scanner_raw
function array parse ini string	в случае успеха настройки возвращаются в виде ассоциативного массива array
function array parse ini string string $ini bool $process_sections int $scanner_mode	разбирает строку конфигурации
function parse str $arr	если указан второй параметр arr то вместо присвоения переменных в текущем контексте они будут сохранены в этом параметре в качестве элементов массива
function parse str $str	входная строка
function void parse str string $str array $arr	разбирает строку в переменные
function parse url $url	url для разбора
function parse url $component	укажите одну из констант php_url_scheme php_url_host php_url_port php_url_user php_url_pass php_url_path php_url_query или php_url_fragment чтобы получить только конкретный компонент url в виде строки string
function mixed parse url	при разборе значительно некорректных url-адресов parse_url() может вернуть false
function mixed parse url string $url int $component	разбирает url и возвращает его компоненты
function passthru $return_var	если присутствует аргумент return_var то код возврата unix-команды будет помещён здесь
function passthru $command	команда которая будет выполнена
function void passthru string $command int $return_var	выполняет внешнюю программу и отображает необработанный вывод
function pathinfo $options	если указан то задает для возврата отдельный элемент: один из следующих pathinfo_dirname pathinfo_basename pathinfo_extension и pathinfo_filename
function pathinfo $path	анализируемый путь
function mixed pathinfo	если параметр options не передан то возвращаемый ассоциативный массив array будет содержать следующие элементы: dirname basename extension если есть и filename
function mixed pathinfo string $path int $options	возвращает информацию о пути к файлу
function bool PDF arc resource $p float $x float $y float $r float $alpha float $beta	рисует дугу окружности против часовой стрелки
function bool PDF arcn resource $p float $x float $y float $r float $alpha float $beta	рисует дугу окружности по часовой стрелке
function bool PDF circle resource $pdfdoc float $x float $y float $r	рисует окружность
function bool PDF close resource $p	закрывает pdf-документ [устаревшее]
function int PDF create 3dview resource $pdfdoc string $username string $optlist	создает объемное изображение
function int PDF create action resource $pdfdoc string $type string $optlist	создает действие для объекта или события
function bool PDF create annotation resource $pdfdoc float $llx float $lly float $urx float $ury string $type string $optlist	создает прямоугольную аннотацию
function string PDF get errmsg resource $pdfdoc	возвращает текст ошибки
function int PDF get errnum resource $pdfdoc	возвращает код ошибки
function resource PDF new	создает объект pdflib
function bool PDF open file resource $p string $filename	создает pdf-файл [устаревшее]
function bool PDF scale resource $p float $sx float $sy	масштабирует систему координат
function bool PDF setmiterlimit resource $pdfdoc float $miter	set miter limit
function string PDF utf16 to utf8 resource $pdfdoc string $utf16string	конвертирует строку из utf-16 в utf-8
function string PDF utf8 to utf16 resource $pdfdoc string $utf8string string $ordering	конвертирует строку из utf-8 в utf-16
function resource pfsockopen string $hostname int $port int $errno string $errstr float $timeout	открывает постоянное соединение с интернет или сокетом unix домена
function pg affected rows $result	результат запроса к postgresql значение типа resource возвращаемое функцией pg_query() pg_query_params() или pg_execute() среди прочих
function int pg affected rows	количество записей затронутых запросом
function int pg affected rows resource $result	возвращает количество затронутых запросом записей кортежей
function pg cancel query $connection	ресурс соединения с базой данных postgresql
function bool pg cancel query	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool pg cancel query resource $connection	остановка асинхронного запроса
function pg client encoding $connection	ресурс соединения с базой данных postgresql
function string pg client encoding	клиентская кодировка либо false в случае ошибки
function string pg client encoding resource $connection	получение кодировки клиента
function pg connect $connection_string	строка connection_string может быть пустой строкой или содержать несколько параметров разделенных пробелами
function pg connect $connect_type	если в функцию передана константа pgsql_connect_force_new будет создаваться новое подключение даже если connection_string идентична строке существующего подключения
function resource pg connect	ресурс соединения с базой данных postgresql либо false если подключиться не удалось
function resource pg connect string $connection_string int $connect_type	открывает соединение с базой данных postgresql
function pg connection busy $connection	ресурс соединения с базой данных postgresql
function bool pg connection busy	возвращает true когда соединение занято иначе false
function bool pg connection busy resource $connection	проверяет занято ли соединение в данный момент
function pg connection reset $connection	ресурс подключения к базе данных postgresql
function bool pg connection reset	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool pg connection reset resource $connection	сброс подключение переподключение
function pg connection status $connection	ресурс соединения с базой данных postgresql
function int pg connection status	pgsql_connection_ok либо pgsql_connection_bad
function int pg connection status resource $connection	определяет состояние подключения
function pg convert $assoc_array	данные для преобразования
function pg convert $options	одна из констант pgsql_conv_ignore_default pgsql_conv_force_null или pgsql_conv_ignore_not_null либо их комбинация
function pg convert $table_name	имя таблицы базы данных
function pg convert $connection	ресурс соединения с базой данных postgresql
function array pg convert	массив array содержащий преобразованные данные либо false в случае ошибки
function array pg convert resource $connection string $table_name array $assoc_array int $options	преобразует значения ассоциативного массива в приемлемые для использования в sql запросах
function pg copy from $null_as	определяет каким образом значения sql null представлены в массиве rows
function pg copy from $rows	массив array данных для копирования в table_name
function pg copy from $delimiter	символ отделяющий значения друг от друга в каждом элементе массива rows
function pg copy from $table_name	имя таблицы в которую копируются значения из rows
function pg copy from $connection	ресурс соединения с базой данных postgresql
function bool pg copy from	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool pg copy from resource $connection string $table_name array $rows string $delimiter string $null_as	вставляет записи из массива в таблицу
function pg dbname $connection	ресурс подключения к базе данных postgresql
function string pg dbname	строка содержащая имя базы данных соответствующей ресурсу connection либо false в случае ошибки
function string pg dbname resource $connection	определяет имя базы данных
function pg delete $table_name	имя таблицы из которой удаляются записи
function pg delete $assoc_array	ассоциативный массив ключи которого соответствуют именам полей таблицы table_name а значения соответствуют удаляемым значениям в этих колонках
function pg delete $options	комбинация констант pgsql_conv_force_null pgsql_dml_no_conv pgsql_dml_escape pgsql_dml_exec pgsql_dml_async или pgsql_dml_string
function pg delete $connection	ресурс соединения с базой данных postgresql
function mixed pg delete	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function mixed pg delete resource $connection string $table_name array $assoc_array int $options	удаляет записи
function pg end copy $connection	ресурс подключения к базе данных postgresql
function bool pg end copy	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool pg end copy resource $connection	синхронизирует с бэкендом postgresql
function pg escape bytea $data	строка содержащая двоичные данные в виде текста которые требуется поместить в поле типа bytea
function pg escape bytea $connection	ресурс подключения к базе данных postgresql
function string pg escape bytea	возвращает строку в которой экранированы все необходимые символы
function string pg escape bytea resource $connection string $data	экранирует спецсимволы в строке для вставки в поле типа bytea
function pg escape string $data	исходная экранируемая строка
function pg escape string $connection	ресурс подключения к базе данных postgresql
function string pg escape string	возвращает строку в которой экранированы все необходимые символы
function string pg escape string resource $connection string $data	экранирование спецсимволов в строке запроса
function pg execute $connection	ресурс подключения к базе данных postgresql
function pg execute $params	массив значений параметров запроса для замены псевдопеременных $1 $2 и т
function pg execute $stmtname	имя подготовленного к исполнению запроса
function resource pg execute	ресурс результата выполнения запроса при успешном выполнении
function resource pg execute resource $connection string $stmtname array $params	запускает выполнение ранее подготовленного параметризованного запроса и ждет результат
function pg fetch all columns $result	ресурс результата запроса postgresql возвращаемый функциями pg_query() pg_query_params() или pg_execute() в числе прочих
function pg fetch all columns $column	номер колонки результата запроса начиная с нуля данные из которой будут помещены в массив
function array pg fetch all columns	массив значений колонки результата запроса
function array pg fetch all columns resource $result int $column	выбирает все записи из одной колонки результата запроса и помещает их в массив
function pg fetch all $result	ресурс результата запроса postgresql возвращаемый функциями pg_query() pg_query_params() или pg_execute() в числе прочих
function array pg fetch all	многомерный массив данных результата запроса
function array pg fetch all resource $result	выбирает все данные из результата запроса и помещает их в массив
function pg fetch assoc $result	ресурс результата запроса postgresql возвращаемый функциями pg_query() pg_query_params() или pg_execute() в числе прочих
function pg fetch assoc $row	номер выбираемой из результата запроса строки
function array pg fetch assoc	ассоциативный массив индексированный именами полей выборки
function array pg fetch assoc resource $result int $row	выбирает строку результата запроса и помещает данные в ассоциативный массив
function pg fetch object $result_type	устарел и не используется
function pg fetch object $result	ресурс результата запроса postgresql возвращаемый функциями pg_query() pg_query_params() или pg_execute() в числе прочих
function pg fetch object $row	номер выбираемой из результата запроса строки
function pg fetch object $class_name	имя класса создаваемого и возвращаемого объекта
function pg fetch object $params	необязательный аргумент
function object pg fetch object	object имена и значения свойств которого соответствуют именам и значениям полей результата запроса
function object pg fetch object resource $result int $row int $result_type	выбирает строку результата запроса и возвращает данные в виде объекта
function pg fetch result $result	ресурс результата запроса postgresql возвращаемый функциями pg_query() pg_query_params() или pg_execute() в числе прочих
function pg fetch result $row	номер выбираемой из результата запроса строки
function pg fetch result $field	имя или номер поля выбираемого значения
function string pg fetch result	логические значения возвращаются как t или f
function string pg fetch result resource $result int $row mixed $field	возвращает запись из результата запроса
function pg field is null $field	номер поля начиная с нуля как integer или имя поля как string
function pg field is null $result	ресурс результата запроса postgresql возвращаемый функциями pg_query() pg_query_params() или pg_execute() в числе прочих
function pg field is null $row	номер строки результата запроса с нужным полем
function int pg field is null	возвращает 1 если выбранное значение sql null 0 для других значений
function int pg field is null resource $result int $row mixed $field	проверка поля на значение sql null
function pg field num $result	ресурс результата запроса postgresql возвращаемый функциями pg_query() pg_query_params() или pg_execute() в числе прочих
function pg field num $field_name	наименование поля
function int pg field num	номер поля начиная с нуля либо -1 в случае ошибки
function int pg field num resource $result string $field_name	возвращает порядковый номер именованного поля
function pg field prtlen $result	ресурс результата запроса postgresql возвращаемый функциями pg_query() pg_query_params() или pg_execute() в числе прочих
function pg field prtlen $row	номер строки результата запроса с нужным полем
function int pg field prtlen	длина строки при выводе значения поля либо false в случае ошибки
function int pg field prtlen resource $result int $row_number mixed $field_name_or_number	возвращает количество печатаемых символов
function pg field size $result	ресурс результата запроса postgresql возвращаемый функциями pg_query() pg_query_params() или pg_execute() в числе прочих
function pg field size $field_number	порядковый номер поля результата запроса начиная с нуля
function int pg field size	требуемый объем памяти в байтах для хранения значения поля
function int pg field size resource $result int $field_number	возвращает размер поля
function pg field table $oid_only	по умолчанию функция возвращает название таблицы содержащей заданное поле
function pg field table $result	ресурс результата запроса postgresql возвращаемый функциями pg_query() pg_query_params() или pg_execute() в числе прочих
function pg field table $field_number	порядковый номер поля результата запроса начиная с нуля
function mixed pg field table	при успешном завершении название таблицы или ее oid
function mixed pg field table resource $result int $field_number bool $oid_only	возвращает наименование или идентификатор таблицы содержащей заданное поле
function pg field type oid $result	ресурс результата запроса postgresql возвращаемый функциями pg_query() pg_query_params() или pg_execute() в числе прочих
function pg field type oid $field_number	порядковый номер поля начиная с нуля
function int pg field type oid	oid базового типа значений поля либо false в случае ошибки
function int pg field type oid resource $result int $field_number	возвращает идентификатор типа заданного поля
function pg field type $result	ресурс результата запроса postgresql возвращаемый функциями pg_query() pg_query_params() или pg_execute() в числе прочих
function pg field type $field_number	порядковый номер поля начиная с нуля
function string pg field type	строка содержащая имя базового типа значений поля либо false в случае ошибки
function string pg field type resource $result int $field_number	возвращает имя типа заданного поля
function pg get notify $result_type	необязательный аргумент указывающий каким образом возвращаемый массив array будет проиндексирован
function pg get notify $connection	ресурс соединения с базой данных postgresql
function array pg get notify	массив array содержащий notify сообщение и pid сервера бд
function array pg get notify resource $connection int $result_type	получение sql notify сообщения
function pg get result $connection	ресурс соединения с базой данных postgresql
function resource pg get result	ресурс результата запроса либо false когда доступных результатов больше нет
function resource pg get result resource $connection	получение результата асинхронного запроса
function pg host $connection	ресурс подключения к базе данных postgresql
function string pg host	строка содержащая имя подключенного через connection хоста либо false в случае ошибки
function string pg host resource $connection	возвращает имя хоста соответствующего подключению
function pg insert $options	комбинация констант pgsql_conv_opts pgsql_dml_no_conv pgsql_dml_escape pgsql_dml_exec pgsql_dml_async и pgsql_dml_string
function pg insert $assoc_array	ассоциативный массив array в котором ключи являются названиями колонок таблицы table_name а значения - записи которые необходимо вставить в эти колонки
function pg insert $table_name	имя таблицы для вставки данных
function pg insert $connection	ресурс соединения с базой данных postgresql
function mixed pg insert	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function mixed pg insert resource $connection string $table_name array $assoc_array int $options	заносит данные из массива в таблицу базы данных
function pg last oid $result	ресурс результата запроса postgresql возвращаемый функциями pg_query() pg_query_params() или pg_execute() в числе прочих
function string pg last oid	строка содержащая oid последней вставленной строки на соединении connection либо false если произошла ошибка или поле oid недоступно
function string pg last oid resource $result	возвращает oid последней добавленной в базу строки
function pg lo close $result	ресурс большого объекта postgresql large object lob возвращаемый функцией pg_lo_open()
function bool pg lo close	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool pg lo close resource $large_object	закрывает большой объект
function pg lo create $connection	ресурс подключения к базе данных postgresql
function pg lo create $object_id	если задан аргумент object_id функция попытается создать объект с этим идентификатором в противном случае будет использован свободный идентификатор назначенный сервером
function int pg lo create	oid большого объекта либо false в случае ошибки
function int pg lo create resource $connection mixed $object_id	создает большой объект
function pg lo export $connection	ресурс подключения к базе данных postgresql
function pg lo export $oid	oid большого объекта в базе данных
function pg lo export $pathname	полный путь и имя файла в клиентской файловой системе для записи данных большого объекта
function bool pg lo export	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool pg lo export resource $connection int $oid string $pathname	вывод большого объекта в файл
function pg lo import $connection	ресурс подключения к базе данных postgresql
function pg lo import $object_id	если задан аргумент object_id функция попытается создать объект с этим идентификатором в противном случае будет использован свободный идентификатор назначенный сервером
function pg lo import $pathname	полный путь и имя файла в клиентской файловой системе для чтения данных большого объекта
function int pg lo import	oid созданного большого объекта либо false в случае ошибки
function int pg lo import resource $connection string $pathname mixed $object_id	импорт большого объекта из файла
function pg lo open $mode	режим доступа к объекту
function pg lo open $connection	ресурс подключения к базе данных postgresql
function pg lo open $oid	oid большого объекта в базе данных
function resource pg lo open	ресурс большого объекта либо false в случае ошибки
function resource pg lo open resource $connection int $oid string $mode	открывает большой объект базы данных
function pg lo read all $large_object	ресурс большого объекта lob postgresql возвращаемый функцией pg_lo_open()
function int pg lo read all	количество прочитанных байт либо false в случае ошибки
function int pg lo read all resource $large_object	читает содержимое большого объекта и посылает напрямую в броузер
function pg lo seek $whence	одна из констант: pgsql_seek_set перемещать от начала объекта pgsql_seek_cur перемещать с текущей позиции или pgsql_seek_end отступать от конца объекта
function pg lo seek $offset	количество байт на сколько требуется переместить указатель
function pg lo seek $large_object	ресурс большого объекта lob postgresql возвращаемый функцией pg_lo_open()
function bool pg lo seek	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool pg lo seek resource $large_object int $offset int $whence	перемещает внутренний указатель большого объекта
function pg lo tell $large_object	ресурс большого объекта lob postgresql возвращаемый функцией pg_lo_open()
function int pg lo tell	текущая позиция внутреннего указателя количество байт от начала большого объекта
function int pg lo tell resource $large_object	возвращает текущее положение внутреннего указателя большого объекта
function pg lo unlink $connection	ресурс подключения к базе данных postgresql
function pg lo unlink $oid	oid большого объекта в базе данных
function bool pg lo unlink	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool pg lo unlink resource $connection int $oid	удаление большого объекта
function pg lo write $data	данные для записи в большой объект
function pg lo write $large_object	ресурс большого объекта lob postgresql возвращаемый функцией pg_lo_open()
function pg lo write $len	необязательный аргумент
function int pg lo write	количество записанных в большой объект байт либо false в случае ошибки
function int pg lo write resource $large_object string $data int $len	записывает данные в большой объект
function pg meta data $table_name	название таблицы
function pg meta data $extended	флаг указывающий что нужно вернуть расширенные мета-данные
function pg meta data $connection	ресурс соединения с базой данных postgresql
function array pg meta data	массив содержащий определение таблицы либо false в случае ошибки
function array pg meta data resource $connection string $table_name bool $extended	получение метаданных таблицы
function pg num rows $result	результат запроса postgresql возвращаемый функциями pg_query() pg_query_params() или pg_execute() и прочими
function int pg num rows	количество строк в выборке
function int pg num rows resource $result	возвращает количество строк в выборке
function pg pconnect $connection_string	строка connection_string может быть пустой строкой или содержать несколько параметров разделенных пробелами
function pg pconnect $connect_type	если в функцию передана константа pgsql_connect_force_new будет создаваться новое подключение даже если connection_string идентична строке существующего подключения
function resource pg pconnect	ресурс соединения с базой данных postgresql либо false если подключиться не удалось
function resource pg pconnect string $connection_string int $connect_type	открывает постоянное соединение с сервером postgresql
function pg ping $connection	ресурс подключения к базе данных postgresql
function bool pg ping	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool pg ping resource $connection	проверка соединения с базой данных
function pg port $connection	ресурс подключения к базе данных postgresql
function int pg port	число типа int соответствующее номеру порта либо false в случае ошибки
function int pg port resource $connection	возвращает номер порта соответствующий заданному соединению
function pg prepare $stmtname	имя создаваемой заготовки
function pg prepare $connection	ресурс подключения к базе данных postgresql
function pg prepare $query	параметризованный sql запрос
function resource pg prepare	ресурс результата запроса или false в случае возникновения ошибки
function resource pg prepare resource $connection string $stmtname string $query	посылает запрос на создание параметризованного sql выражения и ждет его завершения
function pg query params $connection	ресурс подключения к базе данных postgresql
function pg query params $query	параметризованный sql запрос
function pg query params $params	массив значений параметров запроса для замены псевдопеременных $1 $2 и т
function resource pg query params	ресурс результата запроса или false в случае возникновения ошибки
function resource pg query params resource $connection string $query array $params	посылает параметризованный запрос на сервер параметры передаются отдельно от текста sql запроса
function pg result error field $fieldcode	возможные значения аргумента fieldcode : pgsql_diag_severity pgsql_diag_sqlstate pgsql_diag_message_primary pgsql_diag_message_detail pgsql_diag_message_hint pgsql_diag_statement_position pgsql_diag_internal_position для версий postgresql 8
function pg result error field $result	ресурс результата предыдущего запроса postgresql
function string pg result error field	сообщение об ошибке из заданного поля в виде строки string ; null если заданное поле не существует; false в случае ошибки
function string pg result error field resource $result int $fieldcode	возвращает конкретное поле из отчета об ошибках
function pg result error $result	ресурс результата запроса postgresql возвращенный pg_query() pg_query_params() или pg_execute() и прочими
function string pg result error	возвращает строку string
function string pg result error resource $result	возвращает сообщение об ошибке связанной с запросом результата
function pg send query params $query	параметризованный sql запрос
function pg send query params $params	массив значений параметров запроса для замены псевдопеременных $1 $2 и т
function pg send query params $connection	ресурс соединения с базой данных postgresql
function bool pg send query params	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool pg send query params resource $connection string $query array $params	посылает параметризованный запрос на сервер не ожидает возвращаемого результата
function pg send query $query	одно или несколько sql выражений разделенных точкой с запятой
function pg send query $connection	ресурс соединения с базой данных postgresql
function bool pg send query	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool pg send query resource $connection string $query	отправляет асинхронный запрос
function pg set error verbosity $verbosity	требуемый режим: pgsql_errors_terse pgsql_errors_default или pgsql_errors_verbose
function pg set error verbosity $connection	ресурс подключения к базе данных postgresql
function int pg set error verbosity	предыдущий режим действовавший до запуска функции: pgsql_errors_terse pgsql_errors_default или pgsql_errors_verbose
function int pg set error verbosity resource $connection int $verbosity	определяет объем текста сообщений возвращаемых функциями pg_last_error и pg_result_error
function pg transaction status $connection	ресурс соединения с базой данных postgresql
function int pg transaction status	список возможных состояний: pgsql_transaction_idle сервер бездействует pgsql_transaction_active выполняется запрос pgsql_transaction_intrans сервер бездействует работа в режиме транзакции или pgsql_transaction_inerror сервер бездействует транзакция потерпела неудачу
function int pg transaction status resource $connection	возвращает текущее состояние транзакции на сервере
function pg tty $connection	ресурс подключения к базе данных postgresql
function string pg tty	имя tty для подключения connection в виде строки string либо false в случае ошибки
function string pg tty resource $connection	возвращает имя терминала tty связанное с соединением
function pg unescape bytea $data	строка string содержащая данные типа postgresql bytea и подлежащая преобразованию в двоичную строку php
function string pg unescape bytea	строка string с неэкранированными спецсимволами
function string pg unescape bytea string $data	убирает экранирование двоичных данных типа bytea
function pg untrace $connection	ресурс подключения к базе данных postgresql
function bool pg untrace	всегда возвращает true
function bool pg untrace resource $connection	отключает трассировку соединения с postgresql
function pg version $connection	ресурс подключения к базе данных postgresql
function array pg version	возвращает массив с ключами client protocol и server и соответствующими значениями версий либо false в случае ошибки или некорректно работающего соединения
function array pg version resource $connection	возвращает массив содержащий версии клиента протокола клиент-серверного взаимодействия и сервера если доступно
function php check syntax $filename	имя проверяемого файла
function php check syntax $error_message	если используется параметр error_message то в нем будет содержаться сообщение об ошибке сформированное при проверке синтаксиса
function bool php check syntax	возвращает true если проверка пройдена и false если возникла ошибка или файл из filename недоступен
function bool php check syntax string $filename string $error_message	проверяет и запускает php синтаксис указанного файла
function string php ini loaded file	путь к загруженному файлу php
function string php ini loaded file	получение адреса загруженного php
function string php ini scanned files	при успехе возвращает строку с разделенными запятыми именами
function string php ini scanned files	возвращает список
function string php logo guid	возвращает phpe9568f34-d428-11d2-a769-00aa001acf42
function string php logo guid	получение guid логотипа
function php strip whitespace $filename	путь к php файлу
function string php strip whitespace	возвращает очищенный исходный код или пустую строку в случае ошибки
function string php strip whitespace string $filename	возвращает исходный код без комментариев и пробелов
function php uname $mode	mode - одиночный символ определяющий какая информация будет выводиться: a : по умолчанию
function string php uname	возвращает описание ос в виде строки
function string php uname string $mode	выдает информацию об операционной системе на которой запущен php
function phpcredits $flag	использование аргумента flag позволяет произвольно компоновать информацию об отдельных группах разработчиков
function bool phpcredits	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool phpcredits int $flag	выводит список разработчиков php
function png2wbmp $threshold	ограничение от 0 до 8 включительно
function png2wbmp $pngname	путь к png файлу
function png2wbmp $dest_width	ширина результирующего изображения
function png2wbmp $wbmpname	путь к результирующему wbmp файлу
function png2wbmp $dest_height	высота результирующего изображения
function bool png2wbmp	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool png2wbmp string $pngname string $wbmpname int $dest_height int $dest_width int $threshold	преобразование png файла в wbmp
function popen $command	команда
function popen $mode	режим
function resource popen	возвращает файловый указатель идентичный возвращаемому функцией fopen() за исключением того что он односторонний может быть использован только для чтения или записи и должен быть закрыт при помощи pclose()
function resource popen string $command string $mode	открывает файловый указатель процесса
function posix access $mode	маска состоящая из одной или более констант: posix_f_ok posix_r_ok posix_w_ok или posix_x_ok
function posix access $file	путь к проверяемому файлу
function bool posix access	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool posix access string $file int $mode	определяет доступность файла
function string posix ctermid	в случае успешного выполнения возвращает string с путём до текущего управляющего терминала
function string posix ctermid	возвращает путь управляющего терминала
function int posix get last error	возвращает номер ошибки установленный последней posix функцией завершившейся неудачей
function int posix get last error	возвращает номер ошибки которая произошла в последней posix функции завершившейся неудачей
function int posix getegid	возвращает число типа integer соответствующее эффективному идентификатору группы
function int posix getegid	возвращает эффективный идентификатор группы текущего процесса egid
function int posix geteuid	возвращает id пользователя как integer
function int posix geteuid	возвращает эффективный идентификатор пользователя текущего процесса euid
function int posix getgid	возвращает integer соответствующее действительному id группы текущего процесса
function int posix getgid	возвращает действительный id группы текущего процесса gid
function posix getgrnam $name	имя группы
function array posix getgrnam	возвращает массив со следующими элементами: массив с информацией о группе элемент описание name элемент name содержит имя группы
function array posix getgrnam string $name	возвращает информацию о группе используя её имя
function array posix getgroups	возвращает числовой массив содержащий список идентификаторов групп для текущего процесса
function array posix getgroups	возвращает список групп для текущего процесса
function posix getpgid $pid	идентификатор текущего процесса
function int posix getpgid	возвращает идентификатор как число типа integer
function int posix getpgid int $pid	возвращает id группы текущего процесса для менеджера задач
function int posix getpgrp	возвращает идентификатор как integer
function int posix getpgrp	возвращает идентификатор группы текущего процесса
function int posix getpid	возвращает идентификатор как integer
function int posix getpid	возвращает идентификатор текущего процесса
function int posix getppid	возвращает идентификатор процесса как integer
function int posix getppid	возвращает идентификатор родительского процесса
function int posix getuid	возвращает id пользователя как integer
function int posix getuid	возвращает фактический идентификатор пользователя текущего процесса uid
function posix initgroups $name	имя пользователя для которого определяется уровень доступа
function posix initgroups $base_group_id	идентификатор базовой группы из файла password
function bool posix initgroups	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool posix initgroups string $name int $base_group_id	определяет уровень доступа для группы
function posix isatty $fd	файловый дескриптор который ожидается в виде или ресурса resource или целого числа integer
function bool posix isatty	возвращает true если fd является открытым файловым дескриптором связанным с терминалом и false в остальных случаях
function bool posix isatty mixed $fd	определяет является ли файловый дескриптор интерактивным терминалом
function posix kill $sig	одна из pcntl констант сигналов
function posix kill $pid	идентификатор процесса
function bool posix kill	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool posix kill int $pid int $sig	отправляет сигнал соответствующему процессу
function posix mkfifo $pathname	путь к fifo файлу
function posix mkfifo $mode	второй параметр mode должен быть представлен в восьмеричной нотации например 0644
function bool posix mkfifo	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool posix mkfifo string $pathname int $mode	создает специальный fifo файл именованный канал- pipe
function posix mknod $major	старший номер устройства обязательный параметр при использовании констант s_ifchr или s_ifblk
function posix mknod $pathname	путь и имя создаваемого файла
function posix mknod $minor	младший номер устройства
function posix mknod $mode	данный параметр получается с помощью побитового или между типом файла одной из следующих констант: posix_s_ifreg posix_s_ifchr posix_s_ifblk posix_s_ififo или posix_s_ifsock и правами доступа
function bool posix mknod	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool posix mknod string $pathname int $mode int $major int $minor	создает специальный или обычный файл posix
function posix setegid $gid	устанавливаемый эффективный идентификатор группы для текущего процесса
function bool posix setegid	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool posix setegid int $gid	устанавливает эффективный идентификатор группы для текущего процесса egid
function posix seteuid $uid	устанавливаемый идентификатор пользователя
function bool posix seteuid	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool posix seteuid int $uid	устанавливает эффективный идентификатор пользователя для текущего процесса euid
function posix setpgid $pgid	идентификатор группы процесса
function posix setpgid $pid	идентификатор процесса
function bool posix setpgid	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool posix setpgid int $pid int $pgid	устанавливает идентификатор группы процесса для менеджера задач
function array posix times	возвращает массив строк с информацией об текущем использовании cpu который включает следующее ticks - число тактов прошедшее с момента перезагрузки
function array posix times	возвращает информацию об использовании процессорного времени
function posix ttyname $fd	файловый дескриптор который ожидается в виде или ресурса resource или целого числа integer
function string posix ttyname	в случае успеха возвращает string содержащую абсолютный путь до терминала связанного с файловым дескриптором fd
function string posix ttyname mixed $fd	определяет имя терминального устройства
function mixed preg filter	возвращает array если аргумент subject имеет тип array или string в противном случае
function mixed preg filter mixed $pattern mixed $replacement mixed $subject int $limit int $count	производит поиск и замену по регулярному выражению
function preg grep $input	входящий массив
function preg grep $pattern	искомый шаблон строка
function preg grep $flags	в случае если установлен в preg_grep_invert функция preg_grep() возвращает те элементы массива которые не соответствуют заданному шаблону pattern
function array preg grep	возвращает массив индексированный ключами из массива input
function array preg grep string $pattern array $input int $flags	возвращает массив вхождений которые соответствуют шаблону
function preg match all $PREG_PATTERN_ORDER	упорядочивает результаты так что элемент $matches 0 содержит массив полных вхождений шаблона элемент $matches 1 содержит массив вхождений первой подмаски и так далее
function preg match all $subject	входная строка
function preg match all $pattern	искомый шаблон строка
function preg match all $matches	параметр flags регулирует порядок вывода совпадений в возвращаемом многомерном массиве
function preg match all $PREG_SET_ORDER	упорядочивает результаты так что элемент $matches 0 содержит первый набор вхождений элемент $matches 1 содержит второй набор вхождений и так далее
function preg match all $offset	обычно поиск осуществляется слева направо с начала строки
function preg match all $PREG_OFFSET_CAPTURE	в случае если этот флаг указан для каждой найденной подстроки будет указана ее позиция в исходной строке
function preg match all $flags	может быть комбинацией следующих флагов необходимо понимать что использование preg_pattern_order одновременно с preg_set_order бессмысленно : preg_pattern_order упорядочивает результаты так что элемент $matches 0 содержит массив полных вхождений шаблона элемент $matches 1 содержит массив вхождений первой подмаски и так далее
function int preg match all	возвращает количество найденных вхождений шаблона которое может быть и нулем либо false если во время выполнения возникли какие-либо ошибки
function int preg match all string $pattern string $subject array $matches int $flags int $offset	выполняет глобальный поиск шаблона в строке
function preg quote $delimiter	в случае если указан необязательный параметр delimiter он будет также экранироваться
function preg quote $str	входная строка
function string preg quote	возвращает экранированную строку
function string preg quote string $str string $delimiter	экранирует символы в регулярных выражениях
function preg replace callback $limit	максимально возможное количество замен для каждого шаблона в каждой строке subject
function preg replace callback $pattern	искомый шаблон
function preg replace callback $count	если указана то эта переменная будет заполнена количеством произведенных замен
function preg replace callback $subject	строка или массив строк для поиска и замены
function preg replace callback $callback	вызываемая callback-функция которой будет передан массив совпавших элементов из строки subject
function mixed preg replace callback	preg_replace_callback() возвращает массив если параметр subject является массивом иначе возвращается строка
function mixed preg replace callback mixed $pattern callable $callback mixed $subject int $limit int $count	выполняет поиск по регулярному выражению и замену с использованием callback-функции
function preg replace $count	если указана то эта переменная будет заполнена количеством произведенных замен
function preg replace $pattern	искомый шаблон
function preg replace $replacement	строка или массив строк для замены
function preg replace $subject	строка или массив строк для поиска и замены
function preg replace $limit	максимально возможное количество замен каждого шаблона для каждой строки subject
function mixed preg replace	preg_replace() возвращает массив если параметр subject является массивом иначе возвращается строка
function mixed preg replace mixed $pattern mixed $replacement mixed $subject int $limit int $count	выполняет поиск и замену по регулярному выражению
function prev $array	входной массив
function mixed prev	возвращает значение массива на которое ранее указывал внутренний указатель массива или false если больше элементов нет
function mixed prev array $array	передвигает внутренний указатель массива на одну позицию назад
function print $arg	вводимые данные
function int print	возвращает 1 всегда
function int print string $arg	выводит строку
function proc close $process	дескриптор типа resource открытый при помощи proc_open() который будет закрыт
function int proc close	возвращает код завершения процесса который был запущен
function int proc close resource $process	завершает процесс открытый при помощи функции proc_open и возвращает код завершения этого процесса
function proc open $pipes	будет задан массивом указателей на файлы соответствующие созданным каналам передачи данных php
function proc open $descriptorspec	массив ключи которого представляют собой номер дескриптора а значение описывает как php должен передать этот дескриптор дочернему процессу
function proc open $other_options	позволяет задать дополнительные настройки
function proc open $cmd	команда для выполнения
function proc open $cwd	рабочая директория команды
function proc open $env	массив переменных окружения для запускаемой команды или null если требуется использовать то же окружение что и у текущего php процесса
function resource proc open	возвращает ресурс представляющий процесс
function resource proc open string $cmd array $descriptorspec array $pipes string $cwd array $env array $other_options	выполняет команду и открывает указатель на файл для ввода / вывода
function proc terminate $signal	этот необязательный параметр полезен только на операционных системах поддерживающих стандарт posix
function proc terminate $process	открытый при помощи функции proc_open() дескриптор типа resource который будет закрыт
function bool proc terminate	возвращает статус прекращения процесса который был запущен
function bool proc terminate resource $process int $signal	уничтожает процесс открытый при помощи функции proc_open
function property exists $class	имя класса или объекта класса для проверки
function property exists $property	имя свойства
function bool property exists	возвращает true если свойство существует false - если оно не существует или null в случае ошибки
function bool property exists mixed $class string $property	проверяет содержит ли объект или класс указанный атрибут
function ps curveto $x3	x-coordinate of third control point
function ps curveto $y2	y-coordinate of second control point
function ps curveto $y1	y-coordinate of first control point
function ps curveto $y3	y-coordinate of third control point
function ps curveto $x2	x-coordinate of second control point
function ps curveto $psdoc	resource identifier of the postscript file as returned by ps_new()
function ps curveto $x1	x-coordinate of first control point
function bool ps curveto	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool ps curveto resource $psdoc float $x1 float $y1 float $x2 float $y2 float $x3 float $y3	draws a curve
function pspell config personal $file	персональный список слов
function bool pspell config personal	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool pspell config personal int $dictionary_link string $file	устанавливает файл содержащий персональный список слов
function pspell config runtogether $flag	true если объединенные слова должны рассматриваться как правильные сложные слова false в противном случае
function bool pspell config runtogether	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool pspell config runtogether int $dictionary_link bool $flag	рассматривает объединённые слова как правильные сложные слова
function pspell config save repl $flag	true если замещающие пары должны сохраняться false в противном случае
function bool pspell config save repl	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool pspell config save repl int $dictionary_link bool $flag	определяет сохранять ли список замещающих пар вместе со списком слов
function pspell new $mode	параметр mode - это режим в котором будет работать проверка орфографии
function pspell new $language	параметр language - это код языка который состоит из двухбуквенного кода языка по стандарту iso 639 и необязательного двубуквенного кода страны по стандарту iso 3166 после тире или подчеркивания
function pspell new $encoding	параметр encoding это кодировка в которой как ожидается даны слова
function pspell new $spelling	параметр spelling определяет вариант проверки орфографии для языков с более чем одним вариантом правописания таких как английский
function pspell new $jargon	параметр jargon содержит дополнительную информацию для различения двух различных списков слов имеющих одинаковые параметры language и spelling
function int pspell new	в случае успеха возвращает ссылку на словарь или false в случае возникновения ошибки
function int pspell new string $language string $spelling string $jargon string $encoding int $mode	загружает новый словарь
function putenv $setting	установка вида foo=bar
function bool putenv	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool putenv string $setting	устанавливает значение переменной среды
function quotemeta $str	входная строка
function string quotemeta	возвращает экранированную строку или false если в качестве параметра str была указана пустая строка
function string quotemeta string $str	экранирует специальные символы
function range $start	первое значение последовательности
function range $end	конечное значение которым заканчивается последовательность
function range $step	если указан параметр step то он будет использоваться как инкремент между элементами последовательности
function array range	возвращает массив элементов от start до end включительно
function array range mixed $start mixed $end number $step	создает массив содержащий диапазон элементов
function rawurldecode $str	url который должен быть декодирован
function string rawurldecode	возвращает декодированный url в виде строки
function string rawurldecode string $str	декодирование url-кодированной строки
function rawurlencode $str	url который должен быть закодирован
function string rawurlencode	возвращает строку в которой все не цифробуквенные символы кроме -_
function string rawurlencode string $str	url-кодирование строки согласно rfc 3986
function array realpath cache get	возвращает массив записей из кэша реального пути
function array realpath cache get	получает записи из кэша реального пути
function int realpath cache size	возвращает объем использованной памяти для кэширования реального пути
function int realpath cache size	получает размер кэша реального пути
function register shutdown function $callback	регистрируемая завершающая функция
function register shutdown function $parameter	разрешается передавать параметры в завершающую функцию указав их как дополнительные параметры
function void register shutdown function callable $callback mixed $parameter	регистрирует функцию которая выполнится по завершении работы скрипта
function reset $array	входной массив
function mixed reset	возвращает значение первого элемента массива или false если массив пуст
function mixed reset array $array	устанавливает внутренний указатель массива на его первый элемент
function rewind $handle	файловый указатель должен быть доступным и ссылаться на файл успешно открытый при помощи fopen()
function bool rewind	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool rewind resource $handle	сбрасывает курсор у файлового указателя
function rewinddir $dir_handle	ресурс resource дескриптора каталога ранее открытый с помощью функции opendir()
function void rewinddir resource $dir_handle	сбросить дескриптор каталога
function rmdir $context	замечание : поддержка контекста была добавлена в php 5
function rmdir $dirname	путь к директории
function bool rmdir	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool rmdir string $dirname resource $context	удаляет директорию
function round $precision	количество десятичных знаков до которых округлять
function round $mode	используйте одну из этих констант для задания способа округления
function round $val	значение для округления
function float round	округленное значение
function float round float $val int $precision int $mode	округляет число типа float
function rsort $sort_flags	вы можете изменить поведение сортировки используя дополнительный параметр sort_flags подробнее смотрите функцию sort()
function rsort $array	входной массив
function bool rsort	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool rsort array $array int $sort_flags	сортирует массив в обратном порядке
function rtrim $character_mask	с помощью параметра character_mask можно также указать удаляемые символы
function rtrim $str	входная строка
function string rtrim	возвращает модифицированную строку
function string rtrim string $str string $character_mask	удаляет пробелы или другие символы из конца строки
function runkit import $flags	результат побитового или над константами из семейства runkit_import_*
function runkit import $filename	имя файла из которого будут импортированы классы и функции
function bool runkit import	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool runkit import string $filename int $flags	обрабатывает php файл импортируя функции и классы перезаписывая при необходимости
function runkit lint file $filename	php-файл в котором проверять синтаксис
function bool runkit lint file	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool runkit lint file string $filename	проверяет php-синтаксис выбранного файла
function runkit lint $code	php код для проверки синтаксиса
function bool runkit lint	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool runkit lint string $code	проверяет php-синтаксис выбранного кода
function runkit sandbox output handler $sandbox	экземпляр runkit_sandbox вывод которого необходимо обрабатывать
function runkit sandbox output handler $callback	имя функции для перехвата данных
function mixed runkit sandbox output handler	возвращает предыдущее имя функции или false если она не была задана
function mixed runkit sandbox output handler object $sandbox mixed $callback	задает функцию для захвата и / или обработки данных из песочницы
function serialize $value	значение которое необходимо сериализовать
function string serialize	возвращает строку содержащую потоковое представление переменной value которая может быть сохранена где угодно
function string serialize mixed $value	генерирует пригодное для хранения представление переменной
function array session get cookie params	возвращает массив с информацией о cookie текущей сессии который содержит следующие элементы: lifetime - время жизни cookie в секундах
function array session get cookie params	возвращает параметры cookie сессии
function void session register shutdown	функция завершения сессии
function int session status	php_session_disabled если механизм сессий отключен
function int session status	возвращает состояние текущей сессии
function set exception handler $exception_handler	имя функции которая будет вызываться каждый раз когда выбрасывается неперехватываемое исключение
function callable set exception handler	возвращает имя предыдущего заданного обработчика или null в случае ошибки
function callable set exception handler callable $exception_handler	задает пользовательский обработчик исключений
function set magic quotes runtime $new_setting	false - выключено true - включено
function bool set magic quotes runtime	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool set magic quotes runtime bool $new_setting	установка текущего значения настройки magic_quotes_runtime
function setcookie $httponly	если задано true cookie будут доступны только через http протокол
function setcookie $domain	домен которому доступны cookie
function setcookie $expire	время когда срок действия cookie истекает
function setcookie $name	наименование cookie
function setcookie $secure	указывает на то что значение cookie должно передаваться от клиента по защищенному https соединению
function setcookie $path	путь к директории на сервере из которой будут доступны cookie
function setcookie $value	значение cookie
function bool setcookie	если перед вызовом функции клиенту уже передавался какой-либо вывод тэги пустые строки пробелы текст и т
function bool setcookie string $name string $value int $expire string $path string $domain bool $secure bool $httponly	посылает cookie
function setlocale $category	параметр category это именованная константа определяющая категорию функций на которые будет влиять установка локали: lc_all - все нижеперечисленное lc_collate - функции сравнения строк смотри strcoll() lc_ctype - функции преобразования и классификации строк например strtoupper() lc_monetary - для функции localeconv() lc_numeric - задает символ десятичного разделения см
function setlocale	(необязательные аргументы в виде строк или массивов для установки настроек локали до первой успешной попытки
function setlocale $locale	если в качестве locale передана пустая строка или null имена локалей будут взяты из одноименных переменных окружения или переменной с именем lang
function string setlocale	возвращает имя вновь установленной локали или false если система не поддерживает установку локали указанная локаль не существует или передано недопустимое имя категории
function string setlocale int $category string $locale	устанавливает настройки локали
function bool setrawcookie	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool setrawcookie string $name string $value int $expire string $path string $domain bool $secure bool $httponly	посылает cookie не преобразовывая значение
function settype $var	преобразуемая переменная
function settype $type	допустимыми значениями параметра type являются: boolean или начиная с php версии 4
function bool settype	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool settype mixed $var string $type	присваивает переменной новый тип
function shmop open $key	системный идентификатор блока разделяемой памяти
function shmop open $flags	доступные для использования флаги: a для доступа устанавливает флаг shm_rdonly) следует применять этот флаг когда необходимо использовать ранее зарезервированный участок разделяемой памяти уже содержащий какие-либо данные
function shmop open $mode	права доступа к участку памяти такие же как к обычному файлу
function shmop open $size	размер резервируемого блока в разделяемой памяти в байтах
function int shmop open	при успешном выполнении shmop_open() возвращается идентификатор который может быть в дальнейшем использован для доступа к зарезервированному участку памяти
function int shmop open int $key string $flags int $mode int $size	резервирование или использование блока разделяемой памяти
function shmop read $start	определяет с какой позиции начинать чтение данных
function shmop read $shmid	идентификатор блока памяти возвращаемый функцией shmop_open()
function shmop read $count	количество байтов для чтения
function string shmop read	возвращает строковые данные или false в случае возникновения ошибки
function string shmop read int $shmid int $start int $count	чтение данных из участка разделяемой памяти
function shmop size $shmid	идентификатор блока памяти возвращаемый функцией shmop_open()
function int shmop size	результатом является целое число отражающее количество байт зарезервированных в разделяемой памяти для конкретного блока
function int shmop size int $shmid	возвращает размер блока в разделяемой памяти
function similar text $first	первая строка
function similar text $second	вторая строка
function similar text $percent	при передаче по ссылке третьего аргумента similar_text() присваивает ему степень похожести двух строк в процентах
function int similar text	возвращается количество совпадающих символов в двух строках
function int similar text string $first string $second float $percent	вычисляет степень похожести двух строк
function simplexml load file $is_prefix	true если ns является префиксом и false если uri; по умолчанию равен false
function simplexml load file $options	начиная с php 5
function simplexml load file $filename	путь к xml-файлу замечание : libxml 2 декодирует uri так что если вы хотите передать например b & c как параметр uri a вы должны вызвать simplexml_load_file( rawurlencode( http: / / example
function simplexml load file $ns	префикс пространства имен или uri
function simplexml load file $class_name	вы можете использовать этот необязательный параметр для того чтобы функция simplexml_load_file() возвращала объект указанного класса
function SimpleXMLElement simplexml load file	возвращает объект object класса simplexmlelement со свойствами содержащими данные которые хранятся внутри xml-документа или false в случае возникновения ошибки
function SimpleXMLElement simplexml load file string $filename string $class_name int $options string $ns bool $is_prefix	интерпретирует xml-файл в объект
function sin $arg	значение в радианах
function float sin	синус угла arg
function float sin float $arg	синус
function sinh $arg	входное значение
function float sinh	гиперболический синус arg
function float sinh float $arg	гиперболический синус
function socket accept $socket	действительный ресурс сокета созданный при помощи функции socket_create()
function resource socket accept	в случае успеха возвращает новый ресурс сокета или false в случае ошибки
function resource socket accept resource $socket	принимает соединение на сокете
function socket bind $port(Optional)	параметр port используется только когда имя привязывается к сокету af_inet и указывает порт на котором будут слушаться соединения
function socket bind $socket	действующий ресурс сокета созданный при помощи функции socket_create()
function socket bind $address	если сокет из семейства af_inet то параметр address должен быть ip-адресом в записи разделённой точками например 127
function bool socket bind	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool socket bind resource $socket string $address int $port	привязывает имя к сокету
function socket close $socket	действующий ресурс сокета созданный при помощи функций socket_create() или socket_accept()
function void socket close resource $socket	закрывает ресурс сокета
function socket connect $port	параметр port используется и обязателен только в том случае если происходит соединение с сокетом af_inet или af_inet6 и он указывает порт на удалённом хосте к которому должно быть создано соединение
function socket connect $address	параметр address может быть ipv4-адресом в записи разделённой точками например 127
function bool socket connect	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool socket connect resource $socket string $address int $port	начинает соединение с сокетом
function socket create listen $backlog	параметр backlog определяет максимальную длину до которой может вырасти очередь ожидающих соединений
function socket create listen $port	порт который нужно слушать на всех интерфейсах
function resource socket create listen	socket_create_listen() возвращает новый ресурс сокета в случае успешного завершения или false в случае ошибки
function resource socket create listen int $port int $backlog	открывает сокет на указанном порту для принятия соединений
function socket create pair $domain	параметр domain определяет семейство протоколов которое будет использоваться сокетом
function socket create pair $type	параметр type указывает тип коммуникации которая будет использоваться сокетом
function socket create pair $fd	ссылка на массив в который будут вставлены два ресурса сокетов
function socket create pair $protocol	параметр protocol устанавливает определённый протокол в указанном семействе протоколов domain который будет использоваться при связи с полученными сокетами
function bool socket create pair	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool socket create pair int $domain int $type int $protocol array $fd	создаёт пару неразличимых сокетов и сохраняет их в массиве
function socket send $buf	буфер содержащий данные которые будут отправлены на удалённый хост
function socket send $flags	значение параметра flags может быть любой комбинацией следующих флагов соединённых при помощи двоичного оператора or |
function socket send $socket	действующий ресурс сокета созданный при помощи функции socket_create() или socket_accept()
function socket send $len	число байт которое будет отправлено на удалённый хост из буфера buf
function int socket send	socket_send() возвращает количество отправленных байтов или false в случае ошибки
function int socket send resource $socket string $buf int $len int $flags	отправляет данные в подсоединённый сокет
function socket set block $socket	действующий ресурс сокета созданный при помощи функции socket_create() или socket_accept()
function bool socket set block	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool socket set block resource $socket	устанавливает блокирующий режим на ресурсе сокета
function socket set nonblock $socket	действующий ресурс сокета созданный при помощи функции socket_create() или socket_accept()
function bool socket set nonblock	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool socket set nonblock resource $socket	устанавливает неблокирующий режим для файлового дескриптора fd
function socket set option $optval	значение опции
function socket set option $level	параметр level указывает уровень протокола на котором используется опция
function socket set option $socket	действующий ресурс сокета созданный при помощи функции socket_create() или socket_accept()
function socket set option $optname	возможные опции для сокета те же самые как и для функции socket_get_option()
function bool socket set option	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool socket set option resource $socket int $level int $optname mixed $optval	устанавливает опции для сокета
function socket shutdown $how	значение параметра how может быть одним из следующих: возможные значения для параметра how 0 завершает чтение из сокета 1 завершает запись в сокет 2 завершает чтение и запись в сокет
function socket shutdown $socket	действующий ресурс сокета созданный при помощи функции socket_create()
function bool socket shutdown	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool socket shutdown resource $socket int $how	завершает работу сокета на получение и / или отправку данных
function socket strerror $errno	допустимый код ошибки сокета скорее всего возвращённый функцией socket_last_error()
function string socket strerror	возвращает сообщение об ошибке связанное с параметром errno
function string socket strerror int $errno	возвращает строку описывающую ошибку сокета
function socket write $buffer	буфер который будет записан
function socket write $length	необязательный параметр length может указывать другое число байт записываемых в сокет
function int socket write	возвращает количество байт успешно записанных в сокет или false в случае возникновения ошибки
function int socket write resource $socket string $buffer int $length	запись в сокет
function string solr get version	возвращает строку в случае успеха и false в случае ошибки
function string solr get version	возвращает текущую версию расширения apache solr
function sort $array	входной массив
function sort $sort_flags	дополнительный второй параметр sort_flags можно использовать для изменения поведения сортировки используя следующие значения: флаги сортировки: sort_regular - обычное сравнение элементов без изменения типов sort_numeric - числовое сравнение элементов sort_string - строковое сравнение элементов sort_locale_string - сравнивает элементы как строки с учетом текущей локали
function bool sort	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool sort array $array int $sort_flags	сортирует массив
function soundex $str	входная строка
function string soundex	возвращает ключ soundex в виде строки
function string soundex string $str	возвращает ключ soundex для строки
function spl autoload call $class_name	имя искомого класса
function void spl autoload call string $class_name	попытка загрузить описание класса всеми зарегистрированными методами __autoload()
function spl autoload extensions $file_extensions	при вызове без параметров функция просто выведет список зарегистрированных на данный момент расширений перечисленных через запятую
function string spl autoload extensions	список перечисленных через запятую расширений файлов для функции spl_autoload()
function string spl autoload extensions string $file_extensions	регистрация и вывод расширений файлов для spl_autoload
function array spl autoload functions	массив array всех зарегистрированных в __autoload функций
function array spl autoload functions	получение списка всех зарегистрированных функций __autoload()
function spl autoload register $throw	этот параметр определяет должна ли spl_autoload_register() выбрасывать исключение если зарегистрировать autoload_function оказалось невозможным
function spl autoload register $prepend	если передано значение true spl_autoload_register() поместит указанную функцию в начало очереди вместо добавления в конец
function spl autoload register $autoload_function	имя функции реализующей метод spl_autoload()
function bool spl autoload register	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool spl autoload register callable $autoload_function bool $throw bool $prepend	регистрирует заданную функцию в качестве реализации метода __autoload()
function spl autoload unregister $autoload_function	функция автозагрузки описаний классов регистрацию которой требуется снять
function bool spl autoload unregister	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool spl autoload unregister mixed $autoload_function	отмена регистрации функции в качестве реализации метода __autoload()
function spl autoload $file_extensions	по умолчанию функция будет искать файлы с расширениями
function spl autoload $class_name	имя класса и пространства имен в нижнем регистре описание которого требуется загрузить
function void spl autoload string $class_name string $file_extensions	реализация по умолчанию метода __autoload()
function array spl classes	возвращает массив array содержащий доступные а настоящий момент классы spl
function array spl classes	возвращает доступные классы spl
function spl object hash $object	какой-либо объект
function string spl object hash	строка символов уникальная для каждого существующего на данный момент объекта но в то же время одна и та же для каждого конкретного объекта
function string spl object hash object $obj	возвращает хеш-идентификатор для объекта
function split $string	входная строка
function split $pattern	регулярное выражение чувствительное к регистру
function split $limit	если указан параметр limit возвращаемый массив будет содержать максимум limit элементов причем последний элемент будет включать всю оставшуюся часть строки string
function array split	возвращает массив строк каждая из которых является строкой образованной разбиением строки string чувствительным к регистру регулярным выражением pattern
function array split string $pattern string $string int $limit	разбиение строки на массив по регулярному выражению
function sprintf $format	строка формата состоит из нуля и более директив: обычных символов за исключением % которые копируются напрямую в результирующую строку и описателей преобразований каждый из которых заменяется на один из параметров
function string sprintf	возвращает строку отформатированную в соответствии со строкой format
function string sprintf string $format mixed $args	возвращает отформатированную строку
function sql regcase $string	входная строка
function string sql regcase	создает допустимое регулярное выражение которое будет совпадать с string игнорируя регистр символов
function string sql regcase string $string	создает регулярное выражение для регистронезависимого сравнения
function sqlite close $dbhandle	ресурс базы данных sqlite полученный из функции sqlite_open() в случае использования процедурного подхода
function void sqlite close resource $dbhandle	закрывает открытую базу данных sqlite
function sqlite column $index_or_name	индекс или имя возвращаемого столбца
function sqlite column $result	ресурс результата sqlite
function sqlite column $decode_binary	когда параметр decode_binary установлен в true по умолчанию php будет декодировать бинарный код примененный к данным как если бы они были закодированы функцией sqlite_escape_string()
function mixed sqlite column	возвращает значение столбца
function mixed sqlite column resource $result mixed $index_or_name bool $decode_binary	выбирает столбец из текущей записи результата запроса
function sqlite error string $error_code	код ошибки полученный из sqlite_last_error()
function string sqlite error string	возвращает читабельное описание ошибки с кодом error_code в виде string
function string sqlite error string int $error_code	возвращает строку с описанием ошибки
function sqlite escape string $item	экранируемая строка string
function string sqlite escape string	возвращает экранируемую строку string пригодную для использования в sql-запросе sqlite
function string sqlite escape string string $item	экранирует спецсимволы в строке для использования в запросе
function sqlite has more $result	ресурс результата sqlite
function bool sqlite has more	sqlite_has_more() возвращает true если результат запроса result содержит записи доступные для выборки иначе возвращает false
function bool sqlite has more resource $result	определяет есть ли еще записи в результате запроса
function sqrt $arg	аргумент для вычисления
function float sqrt	квадратный корень из arg или специальное значение nan для отрицательных чисел
function float sqrt float $arg	квадратный корень
function srand $seed	начальное значение генератора
function void srand int $seed	изменяет начальное число генератора псевдослучайных чисел
function sscanf $str	обрабатываемая строка string
function sscanf	необязательные переменные передаваемые по ссылке которым будут присвоены считанные значения
function sscanf $format	формат в соответствии с которым будет интерпретирована строка str описанный в документации к функции sprintf() со следующими отличиями: на функцию не влияют настройки локали
function mixed sscanf	если переданы только эти два аргумента будет возвращен массив
function mixed sscanf string $str string $format	разбирает строку в соответствии с заданным форматом
function stat $filename	путь к файлу
function array stat string $filename	возвращает информацию о файле
function str getcsv $enclosure	устанавливает символ ограничителя поля только один символ
function str getcsv $input	обрабатываемая строка
function str getcsv $delimiter	устанавливает разделитель поля только один символ
function str getcsv $escape	устанавливает экранирующий символ только один символ
function array str getcsv	возвращает индексированный массив содержащий полученные из строки поля
function array str getcsv string $input string $delimiter string $enclosure string $escape	выполняет разбор csv-строки в массив
function str ireplace $replace	значение замены будет использовано для замены искомых значений search
function str ireplace $count	если передан то будет установлен в количество произведенных замен
function str ireplace $subject	строка или массив в котором производится поиск и замена также известный как haystack стог сена
function str ireplace $search	искомое значение также известное как needle иголка
function mixed str ireplace	возвращает строку или массив с замененными значениями
function mixed str ireplace mixed $search mixed $replace mixed $subject int $count	регистронезависимый вариант функции str_replace
function str pad $pad_string	замечание : pad_string может быть урезана если необходимое количество дополняемых символов не делится нацело на длину строки pad_string
function str pad $pad_length	если значение pad_length отрицательно меньше или равно длине входной строки то дополнения не происходит
function str pad $input	входная строка
function str pad $pad_type	необязательный аргумент pad_type может иметь значение str_pad_right str_pad_left или str_pad_both
function string str pad	возвращает дополненную строку
function string str pad string $input int $pad_length string $pad_string int $pad_type	дополняет строку другой строкой до заданной длины
function str repeat $multiplier	количество раз которые нужно повторить строку input
function str repeat $input	повторяемая строка
function string str repeat	возвращает повторяющуюся строку
function string str repeat string $input int $multiplier	возвращает повторяющуюся строку
function str replace $replace	значение замены будет использовано для замены искомых значений search
function str replace $count	если передан то будет установлен в количество произведенных замен
function str replace $subject	строка или массив в котором производится поиск и замена также известный как haystack стог сена
function str replace $search	искомое значение также известное как needle иголка
function mixed str replace	эта функция возвращает строку или массив с замененными значениями
function mixed str replace mixed $search mixed $replace mixed $subject int $count	заменяет все вхождения строки поиска на строку замены
function str rot13 $str	входная строка
function string str rot13	возвращает rot13 версию переданной строки
function string str rot13 string $str	выполняет преобразование rot13 над строкой
function str split $string	входная строка
function str split $split_length	максимальная длина фрагмента
function array str split	если указан необязательный аргумент split_length возвращаемый массив будет содержать части исходной строки длиной split_length каждая иначе каждый элемент будет содержать один символ
function array str split string $string int $split_length	преобразует строку в массив
function str word count $string	строка
function str word count $charlist	список дополнительных символов которые будут рассматриваться как слово
function str word count $format	указывает возвращаемое значение данной функции
function mixed str word count	возвращает массив или целое число в зависимости от указанного параметра format
function mixed str word count string $string int $format string $charlist	возвращает информацию о словах входящих в строку
function strcoll $str1	первая строка
function strcoll $str2	вторая строка
function int strcoll	возвращает отрицательное число если str1 меньше чем str2 положительное число если str1 больше чем str2 и 0 если они равны
function int strcoll string $str1 string $str2	сравнение строк с учетом текущей локали
function stream bucket prepend $brigade	brigade - ресурс указывающий на цепочку бакетов которая содержит один или несколько объектов bucket
function stream bucket prepend $bucket	бакет
function void stream bucket prepend resource $brigade resource $bucket	присоединить бакет в начало цепочки
function stream context get params $stream_or_context	ресурс resource потока или контекстовый ресурс resource
function array stream context get params	возвращает ассоциативный массив содержащий все опции и параметры контекста
function array stream context get params resource $stream_or_context	извлекает параметры из контекста
function stream context set params $stream_or_context	поток или контекст к которому будут применены параметры
function stream context set params $params	массив параметров которые будут установлены
function bool stream context set params	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool stream context set params resource $stream_or_context array $params	устанавливает параметры для потока / обертки / контекста
function stream filter append $filtername	название фильтра
function stream filter append $params	этот фильтр будет добавлен с указанными params к концу списка и таким образом будет вызван последним в списке потоковых операций
function stream filter append $stream	целевой поток
function stream filter append $read_write	по умолчанию stream_filter_append() будет прикреплять фильтр к цепочке фильтров чтения если файл был открыт для чтения т
function resource stream filter append	возвращает ресурс который может быть использован для того чтобы обратиться к этому экземпляру фильтра во время вызова stream_filter_remove()
function resource stream filter append resource $stream string $filtername int $read_write mixed $params	прикрепляет фильтр к потоку
function stream filter prepend $filtername	название потока
function stream filter prepend $stream	целевой поток
function stream filter prepend $params	этот фильтр будет добавлен с указанными параметрами params к началу списка и таким образом будет вызван первым во время потоковых операций
function stream filter prepend $read_write	по умолчанию функция stream_filter_prepend() будет прикреплять фильтр к цепочке фильтров чтения если файл был открыт для чтения т
function resource stream filter prepend	возвращает ресурс который может быть использован для того чтобы обратиться к этому экземпляру фильтра во время вызова stream_filter_remove()
function resource stream filter prepend resource $stream string $filtername int $read_write mixed $params	прикрепляет фильтр к потоку
function stream filter register $classname	для того чтобы реализовать фильтр вам нужно определить класс как расширение php_user_filter c целым рядом функций-членов
function stream filter register $filtername	название регистрируемого фильтра
function bool stream filter register	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool stream filter register string $filtername string $classname	регистрирует потоковый фильтр определённый пользователем
function stream get contents $handle(resource)	ресурс потока например полученный при помощи функции fopen()
function stream get contents $offset(integer)	перейти к указанному смещению перед чтением
function stream get contents $maxlength(integer)	максимальное количество байт для чтения
function string stream get contents	возвращает строку или false в случае возникновения ошибки
function string stream get contents resource $handle int $maxlength int $offset	читает оставшуюся часть потока в строку
function stream get line $handle	допустимый дескриптор файла
function stream get line $length	количество байт для чтения из дескриптора
function stream get line $ending	необязательный разделитель строки
function string stream get line	возвращает строку длиной до length байт прочитанную из файла указанного параметром handle
function string stream get line resource $handle int $length string $ending	получает строку из потокового ресурса до указанного разделителя
function stream get meta data $stream	переменная stream может быть любым потоком созданным при помощи функций fopen() fsockopen() и pfsockopen()
function array stream get meta data	получаемый массив содержит следующие элементы:
function array stream get meta data resource $stream	извлекает заголовок / метаданные из потоков / файловых указателей
function array stream get wrappers	возвращает индексированный массив содержащий названия все обёрток потоков доступных на запущенной системе
function array stream get wrappers	извлекает список зарегистрированных потоков
function stream notification callback $message_code	передаётся если для события доступен код описывающего сообщения
function stream notification callback $bytes_transferred	если доступно то параметр bytes_transferred будет заполнен
function stream notification callback $bytes_max	если доступно то параметр bytes_max будет заполнен
function stream notification callback $notification_code	одна из констант оповещения stream_notify_*
function stream notification callback $message	передаётся если для события доступно описывающее сообщение
function stream notification callback $severity	одна из констант оповещения stream_notify_severity_*
function void stream notification callback int $notification_code int $severity string $message int $message_code int $bytes_transferred int $bytes_max	callback-функция для параметра контекста notification
function stream resolve include path $filename	имя файла которое необходимо преобразовать
function string stream resolve include path	возвращает строку string содержащую полученное абсолютное имя файла или false в случае возникновения ошибки
function string stream resolve include path string $filename	составляет полное имя файла используя пути включения
function stream select $tv_sec	параметры tv_sec и tv_usec вместе формируют параметр timeout tv_sec указывает число секунд а tv_usec - число микросекунд
function stream select $write	потоки перечисленные в массиве write будут отслеживаться на предмет того что запись в них не будет блокироваться
function stream select $read	потоки перечисленные в массиве read будут отслеживаться на предмет появления символов доступных для чтения точнее отслеживается что чтение не будет блокироваться - в частности потоковый ресурс также готов для чтения в конце файла но в этом случае функция fread() будет возвращать строку нулевой длины
function stream select $except	потоки перечисленные в массиве except будут отслеживаться на предмет поступления высокоприоритетных исключительных внеполосных или out-of-band данных
function stream select $tv_usec	смотрите описание параметра tv_sec
function int stream select	в случае успеха функция stream_select() возвращает количество потоковых ресурсов содержащееся в изменённых массивах которое может равно нулю если истёк тайм-аут до того как произошло что-то интересное
function int stream select array $read array $write array $except int $tv_sec int $tv_usec	запускает эквивалент системного вызова select() на заданных массивах потоков с таймаутом указанным параметрами tv_sec и tv_usec
function stream set blocking $mode	если параметр mode равен 0 указанный поток будет переключен в неблокирующий режим а если он равен 1 поток будет переключен в блокирующий режим
function stream set blocking $stream	поток
function bool stream set blocking	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool stream set blocking resource $stream int $mode	устанавливает блокирующий / неблокирующий режим на потоке
function stream set read buffer $buffer	число байт для буферизации
function stream set read buffer $stream	файловый указатель
function int stream set read buffer	возвращает 0 в случае удачи или eof если запрос не может быть выполнен
function int stream set read buffer resource $stream int $buffer	устанавливает буферизацию чтения файла на указанном потоке
function stream set timeout $stream	целевой поток
function stream set timeout $microseconds	микросекунды в устанавливаемом тайм-ауте
function stream set timeout $seconds	секунды в устанавливаемом тайм-ауте
function bool stream set timeout	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool stream set timeout resource $stream int $seconds int $microseconds	устанавливает значение тайм-аута на потоке
function stream set write buffer $buffer	число байт для буферизации
function stream set write buffer $stream	файловый указатель
function int stream set write buffer	возвращает 0 в случае успеха или eof в случае если запрос не может быть выполнен
function int stream set write buffer resource $stream int $buffer	устанавливает буферизацию файла при записи в указанный поток
function stream socket accept $server_socket	серверный сокет для принятия соединения
function stream socket accept $peername	будет присвоено имя адрес клиента который подсоединился если оно содержится и доступно из выбранного транспорта
function stream socket accept $timeout	заменяет тайм-аут подключения сокета по умолчанию
function resource stream socket accept	возвращает поток принятого соединения с сокетом или false в случае возникновения ошибки
function resource stream socket accept resource $server_socket float $timeout string $peername	принимает соединение на сокете созданном c помощью функции stream_socket_server
function stream socket client $flags	поле битовой маски которое может принимать значение любой комбинации флагов соединения
function stream socket client $remote_socket	адрес удалённого сокета для соединения
function stream socket client $timeout	число секунд в течение которых должен произойти тайм-аут системного вызова connect()
function stream socket client $context	действующий ресурс контекста созданный при помощи функции stream_context_create()
function stream socket client $errno	будет присвоен номер системной ошибки если соединение не удалось установить
function stream socket client $errstr	будет присвоено сообщение о системной ошибке если соединение не удалось установить
function resource stream socket client	в случае успеха возвращается ресурс потока который может быть использован с другими файловыми функциями такими как fgets() fgetss() fwrite() fclose() и feof() в случае неудачи возвращается false
function resource stream socket client string $remote_socket int $errno string $errstr float $timeout int $flags resource $context	открывает соединение с интернет-сокетом или с доменным сокетом unix
function stream socket get name $handle	сокет название которого нужно получить
function stream socket get name $want_peer	если установлено в true то удалённое название сокета будет возвращено если установлено в false то локальное название сокета будет возвращено
function string stream socket get name	название сокета
function string stream socket get name resource $handle bool $want_peer	извлекает название локального или удалённого сокета
function stream socket pair $type	используемый тип взаимодействия: stream_sock_dgram stream_sock_raw stream_sock_rdm stream_sock_seqpacket or stream_sock_stream
function stream socket pair $protocol	используемый протокол: stream_ipproto_icmp stream_ipproto_ip stream_ipproto_raw stream_ipproto_tcp or stream_ipproto_udp
function stream socket pair $domain	используемое семейство протоколов: stream_pf_inet stream_pf_inet6 или stream_pf_unix
function array stream socket pair	возвращает массив array с двумя потоковыми ресурсами в случае успеха или false в случае неудачи
function array stream socket pair int $domain int $type int $protocol	создаёт пару связанных неразличимых потоковых сокетов
function stream socket sendto $socket	сокет через который будут отправлены данные data
function stream socket sendto $address	адрес указанный при создании потокового сокета будет использоваться до тех пор пока не указан альтернативный адрес в параметре address
function stream socket sendto $data	отправляемые данные
function stream socket sendto $flags	значение параметра flags может быть комбинацией следующего: возможные значения для параметра flags stream_oob обрабатывать oob out-of-band внеполосные данные
function int stream socket sendto	возвращает код результата как целое число
function int stream socket sendto resource $socket string $data int $flags string $address	отправляет сообщение в сокет независимо от того подсоединён он или нет
function stream socket server $errstr	смотрите описание параметра errno
function stream socket server $errno	если необязательные аргументы errno и errstr присутствуют то они будут установлены для указания действительного уровня системной ошибки которая происходит при системных вызовах socket() bind() и listen()
function stream socket server $flags	битовая маска которая может быть установлена в любую комбинацию флагов для создания сокета
function stream socket server $local_socket	тип создаваемого сокета определяется по транспорту указанному с использованием стандартного форматирования url: transport: / / target
function resource stream socket server	возвращает созданный поток или false в случае ошибки
function resource stream socket server string $local_socket int $errno string $errstr int $flags resource $context	создаёт интернет-сокет или доменный сокет unix
function stream wrapper register $flags	должно быть установлено в stream_is_url если параметр protocol является протоколом url
function stream wrapper register $protocol	название регистрируемой обёртки
function stream wrapper register $classname	название класса который реализует протокол protocol
function bool stream wrapper register	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool stream wrapper register string $protocol string $classname int $flags	регистрирует обёртку url реализованную в виде php-класса
function bool stream wrapper restore	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool stream wrapper restore string $protocol	восстанавливает ранее разрегистрированную встроенную обёртку
function bool stream wrapper unregister	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool stream wrapper unregister string $protocol	отменяет регистрацию обертки url
function strftime $timestamp	необязательный параметр timestamp представляет собой integer метку времени по умолчанию равную текущему локальному времени если timestamp не указан
function string strftime	возвращает строку отформатированную в соответствии с параметром format используя указанную временную метку timestamp или текущее время если метка не была указана
function string strftime string $format int $timestamp	форматирует текущую дату / время с учетом текущих настроек локали
function strip tags $allowable_tags	второй необязательный параметр может быть использован для указания тегов которые не нужно удалять
function strip tags $str	входная строка
function string strip tags	возвращает строку без тегов
function string strip tags string $str string $allowable_tags	удаляет html и php-теги из строки
function stripcslashes $str	строка с которой нужно убрать экранирование
function string stripcslashes	возвращает неэкранированную строку
function string stripcslashes string $str	удаляет экранирование символов произведенное функцией addcslashes
function stripos $needle	заметьте что needle может содержать строку из одного или более символов
function stripos $haystack	строка в которой производится поиск
function stripos $offset	если этот параметр указан то поиск будет начат с указанного количества символов с начала строки
function mixed stripos	возвращает позицию в которой находится искомая строка относительно начала строки haystack независимо от смещения offset
function mixed stripos string $haystack string $needle int $offset	возвращает позицию первого вхождения подстроки без учета регистра
function stripslashes $str	входная строка
function string stripslashes	возвращает строку с вырезанными обратными слешами
function string stripslashes string $str	удаляет экранирование символов
function stristr $before_needle	если установлен в true stristr() возвращает часть строки haystack до первого вхождения needle не включая needle
function stristr $needle	если needle не является строкой он приводится к целому и трактуется как код символа
function stristr $haystack	строка в которой производится поиск
function string stristr	возвращает указанную подстроку
function string stristr string $haystack mixed $needle bool $before_needle	регистронезависимый вариант функции strstr
function strlen $string	строка string для которой измеряется длина
function int strlen	длина строки string в случае успеха и 0 если string пуста
function int strlen string $string	возвращает длину строки
function strnatcasecmp $str1	первая строка
function strnatcasecmp $str2	вторая строка
function int strnatcasecmp	подобно другим функциям сравнения строк данная функция возвращает отрицательное число если str1 меньше чем str2 положительное число если str1 больше чем str2 и 0 если строки равны
function int strnatcasecmp string $str1 string $str2	сравнение строк без учета регистра с использованием алгоритма natural order
function strncasecmp $str1	первая строка
function strncasecmp $len	количество символов участвующих в сравнении
function strncasecmp $str2	вторая строка
function int strncasecmp	возвращает отрицательное число если str1 меньше чем str2 положительное число если str1 больше чем str2 и 0 если строки равны
function int strncasecmp string $str1 string $str2 int $len	бинарно-безопасное сравнение первых n символов строк без учета регистра
function strncmp $len	количество символов используемых в сравнении
function strncmp $str1	первая строка
function strncmp $str2	вторая строка
function int strncmp	возвращает отрицательное число если str1 меньше чем str2 положительное число если str1 больше чем str2 и 0 если строки равны
function int strncmp string $str1 string $str2 int $len	бинарно-безопасное сравнение первых n символов строк
function strpos $needle	если needle не является строкой он приводится к целому и трактуется как код символа
function strpos $haystack	строка в которой производится поиск
function strpos $offset	если этот параметр указан то поиск будет начат с указанного количества символов с начала строки
function mixed strpos	возвращает позицию в которой находится искомая строка относительно начала строки haystack независимо от смещения offset
function mixed strpos string $haystack mixed $needle int $offset	возвращает позицию первого вхождения подстроки
function strptime $format(string)	формат строки date например формат используемый в функции strftime()
function strptime $date(string)	строка для разбора например строковый результат выполнения функции strftime()
function array strptime	возвращает массив или false в случае возникновения ошибки
function array strptime string $date string $format	разбирает строку даты / времени сгенерированную функцией strftime
function strrev $string	переворачиваемая строка
function string strrev	возвращает перевернутую строку
function string strrev string $string	переворачивает строку задом наперед
function strrpos $needle	если needle не является строкой то он приводится к целому и трактуется как код символа
function strrpos $haystack	строка в которой производится поиск
function strrpos $offset	если указан то поиск начнется с данного количества символов с начала строки
function int strrpos	возвращает номер позиции последнего вхождения needle относительно начала строки haystack независимо от направления поиска и смещения offset
function int strrpos string $haystack string $needle int $offset	возвращает позицию последнего вхождения подстроки в строке
function strspn $length	длина исследуемого фрагмента subject
function strspn $mask	список из разрешенных символов
function strspn $start	позиция начала поиска в subject
function strspn $subject	исследуемая строка
function int strspn	возвращает длину первого участка subject состоящего целиком из символов в mask
function int strspn string $subject string $mask int $start int $length	возвращает длину участка в начале строки полностью соответствующего маске
function strstr $needle	если needle не является строкой он приводится к целому и трактуется как код символа
function strstr $haystack	входная строка
function strstr $before_needle	если установлен в true strstr() возвращает часть строки haystack до первого вхождения needle исключая needle
function string strstr	возвращает часть строки или false если needle не найдена
function string strstr string $haystack mixed $needle bool $before_needle	находит первое вхождение подстроки
function strtok $token	разделитель строки str
function strtok $str	строка string разбиваемая на подстроки токены
function string strtok	токен string
function string strtok string $str string $token	разбивает строку на токены
function strtolower $string	входная строка
function string strtolower	возвращает строку в нижнем регистре
function string strtolower string $string	преобразует строку в нижний регистр
function strtoupper $string	входная строка
function string strtoupper	возвращает строку в верхнем регистре
function string strtoupper string $string	преобразует строку в верхний регистр
function substr compare $length	длина сравнения
function substr compare $offset	стартовая позиция сравнения
function substr compare $str	следующая сравниваемая строка
function substr compare $case_insensitivity	если case_sensitivity имеет значение true сравнение выполняется с учетом регистра
function substr compare $main_str	основная сравниваемая строка
function int substr compare	возвращает отрицательное число если строка main_str начиная с символа offset меньше чем str ; положительное число если она больше str ; 0 если строки равны
function int substr compare string $main_str string $str int $offset int $length bool $case_insensitivity	бинарно-безопасное сравнение 2 строк со смещением с учетом или без учета регистра
function substr replace $string	входная строка
function substr replace $length	если аргумент положителен то он представляет собой длину заменяемой подстроки в строке string
function substr replace $replacement	строка замены
function substr replace $start	если start положителен замена начинается с символа с порядковым номером start строки string
function mixed substr replace	возвращает результирующую строку
function mixed substr replace mixed $string mixed $replacement mixed $start mixed $length	заменяет часть строки
function substr $string	входная строка
function substr $start	если start неотрицателен возвращаемая подстрока начинается с позиции start от начала строки считая от нуля
function substr $length	если length положительный возвращаемая строка будет не длиннее length символов начиная с параметра start в зависимости от длины string
function string substr	возвращает извлеченную часть строки или false в случае возникновения ошибки или пустую строку string
function string substr string $string int $start int $length	возвращает подстроку
function svn add $force	если значение параметра эквивалентно true -- subversion будет рекурсивно просматривать уже известные директории для того чтобы добавить файлы которые находятся в этих директориях но не были взяты под контроль subversion
function svn add $recursive	если добавляется директория флаг определят будет ли рекурсивно добавлено всё ее содержимое
function svn add $path	путь к добавляемой папке файлу или ссылке
function bool svn add	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool svn add string $path bool $recursive bool $force	добавляет элементы в список запланированных для добавления в рабочую копию
function svn auth get parameter $key	имя ключа строка
function string svn auth get parameter	возвращает значение параметра по ключу key в виде строки или null если параметр не существует
function string svn auth get parameter string $key	возвращает параметр аутентификации
function svn cat $repos_url	путь url к элементу в репозитории
function svn cat $revision_no	номер ревизии целое число соответствующего элемента по умолчанию - head последняя ревизия
function string svn cat	возвращает содержимое элемента в репозитории в случае успешного завершения или false в случае возникновения ошибки
function string svn cat string $repos_url int $revision_no	возвращает содержимое файла в репозитории
function svn checkout $targetpath	локальный путь куда необходимо получить рабочую копию
function svn checkout $flags	комбинации из констант svn_non_recursive и svn_ignore_externals
function svn checkout $repos	путь url к директории которую необходимо получить из репозитория
function svn checkout $revision	номер ревизии целое число которую необходимо получить
function bool svn checkout	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool svn checkout string $repos string $targetpath int $revision int $flags	получает рабочую копию из репозитория
function string svn client version	номер версии обычно в формате x
function string svn client version	возвращает версию клиентских библиотек svn
function svn commit $targets	массив с путями к локальным файлам или директориям которые будут отправлены
function svn commit $log	строка комментария для текущего изменения
function svn commit $recursive	флаг для отключения рекурсивной отправки директорий из массива targets
function array svn commit	возвращает массив в формате:
function array svn commit string $log array $targets bool $recursive	отправляет изменения из рабочей директории в репозиторий
function svn delete $force	при true файл будет удален даже если в нем есть локальные изменения
function svn delete $path	путь к удаляемому элементу
function bool svn delete	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool svn delete string $path bool $force	удаляет элементы из рабочей копии или репозитория
function svn diff $rev1	номер ревизии первого файла
function svn diff $path2	второй путь к файлу аналогично path1
function svn diff $rev2	номер ревизии второго файла аналогично rev1
function svn diff $path1	первый путь
function array svn diff	возвращает список массивов состоящий из двух потоков: первая - различия файлов; вторая - ошибки
function array svn diff string $path1 int $rev1 string $path2 int $rev2	рекурсивно показывает различия двух файлов
function svn export $working_copy	при true из рабочей копии будут так же экспортированы не отправленные в репозиторий файлы
function svn export $frompath	путь к текущему репозиторию или к рабочей копии
function svn export $topath	путь к чистой папке для экспорта
function bool svn export	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool svn export string $frompath string $topath bool $working_copy int $revision_no	экспортирует содержимое директории svn
function svn import $path	путь к файлу или директории для импорта
function svn import $nonrecursive	следует ли обработать директории рекурсивно или нет
function svn import $url	url адрес репозитория
function bool svn import	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool svn import string $path string $url bool $nonrecursive	импорт пути без версии в репозитории
function svn log $flags	любая комбинация svn_omit_messages svn_discover_changed_paths и svn_stop_on_copy
function svn log $end_revision	конечный номер ревизии для получения
function svn log $repos_url	url адрес репозитория для получения истории правок элемента
function svn log $start_revision	начальный номер ревизии для получения
function svn log $limit	количество записей для получения
function array svn log	в случае успеха функция возвращает массив формата: 0 = > array ordered most recent highest revision first rev = > номер ревизии целое число author = > автор правки строка msg = > комментарий к изменениям строка date = > дата правки в формате iso 8601 т
function array svn log string $repos_url int $start_revision int $end_revision int $limit int $flags	возвращает комментарии к правкам в репозитории
function svn ls $url	url адрес репозитория например http: / / www
function svn ls $revision	целочисленный номер ревизии для получения списка содержимого
function svn ls $recurse	включает рекурсивный запрос
function array svn ls string $repos_url int $revision_no bool $recurse bool $peg	возвращает список содержимого директории репозитория url опционально для конкретной ревизии
function svn revert $recursive	опциональный параметр рекурсивной отмены правок
function svn revert $path	путь к рабочей копии
function bool svn revert	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool svn revert string $path bool $recursive	отменяет локальные изменения рабочей копии
function symlink $target	цель ссылки
function symlink $link	имя ссылки
function bool symlink	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool symlink string $target string $link	создаёт символическую ссылку
function system $command	команда которая будет выполнена
function system $return_var	если есть аргумент return_var то код возврата выполняемой команды будет записан в эту переменную
function string system	возвращает последнюю строку вывода команды в случае успеха и false - в случае неудачи
function string system string $command int $return_var	выполняет внешнюю программу и отображает её вывод
function tan $arg	значение в радианах
function float tan	тангенс угла arg
function float tan float $arg	тангенс
function tanh $arg	входное значение
function float tanh	гиперболический тангенс arg
function float tanh float $arg	гиперболический тангенс
function textdomain $text_domain	новый домен сообщений или null для получения текущего значения без его изменения
function string textdomain	в случае успеха данная функция возвращает текущее домен сообщений после возможного его изменения
function string textdomain string $text_domain	устанавливает домен по умолчанию
function tidy access count $object	объект tidy
function int tidy access count	возвращает число предупреждений
function int tidy access count tidy $object	возвращает число доступных предупреждений tidy встретившихся в рассмотренном документе
function tidy error count $object	объект tidy
function int tidy error count	возвращает число ошибок tidy
function int tidy error count tidy $object	возвращает число ошибок tidy встретившихся при рассмотрении документа
function tidy get output $object	объект tidy
function string tidy get output	возвращает разобранную tidy-разметку
function string tidy get output tidy $object	возвращает строку представляющую разобранную tidy-разметку
function tidy set encoding $encoding	параметр encoding устанавливает кодировку для входных / выходных документов
function bool tidy set encoding	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool tidy set encoding string $encoding	устанавливает входную / выходную кодировку символов для указанной разметки
function time nanosleep $nanoseconds	должно быть целым положительным числом меньшим одного миллиарда
function time nanosleep $seconds	должно быть целым положительным числом
function mixed time nanosleep	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function mixed time nanosleep int $seconds int $nanoseconds	откладывает исполнение на заданное число секунд и наносекунд
function int time	возвращает текущую метку времени unix
function string timezone version get	возвращает string
function string timezone version get	получение номера версии базы данных временных зон
function token get all $source	исходный код php для разбора
function array token get all	массив идентификаторов лексем
function array token get all string $source	разбивает переданный исходный код на php-лексемы
function token name $token	значение лексемы
function string token name	символьное значение для переданной лексемы token
function string token name int $token	возвращает символьное имя для переданной php-лексемы
function touch $atime	если передан время доступа указанного файла будет установлено в значение atime
function touch $time	время касания
function touch $filename	имя касаемого файла
function bool touch	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool touch string $filename int $time int $atime	устанавливает время доступа и модификации файла
function trigger error $error_msg	сообщение соответствующее этой ошибке
function trigger error $error_type	назначенный тип ошибки
function bool trigger error	функция возвращает false если задан неправильный error_type и true в остальных случаях
function bool trigger error string $error_msg int $error_type	вызывает пользовательскую ошибку / предупреждение / уведомление
function trim $character_mask	можно также задать список символов для удаления с помощью необязательного аргумента character_mask
function trim $str	обрезаемая строка string
function string trim	обрезаемая строка
function string trim string $str string $character_mask	удаляет пробелы или другие символы из начала и конца строки
function uasort $array	входной массив
function uasort $value_compare_func	смотрите функции usort() и uksort() для примеров callback-функций сортировки предоставленных пользователем
function bool uasort	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool uasort array $array callable $value_compare_func	сортирует массив используя пользовательскую функцию для сравнения элементов с сохранением ключей
function ucfirst $str	входная строка
function string ucfirst	возвращает результирующую строку
function string ucfirst string $str	преобразует первый символ строки в верхний регистр
function ucwords $str	входная строка
function string ucwords	возвращает модифицированную строку
function string ucwords string $str	преобразует в верхний регистр первый символ каждого слова в строке
function int udm api version	udm_api_version() возвращает номер версии mnogosearch api
function int udm api version	получает версию mnogosearch api
function udm clear search limits $agent	ссылка на идентификатор агента полученная после вызова udm_alloc_agent()
function bool udm clear search limits	возвращает true
function bool udm clear search limits resource $agent	очищает все ограничения поиска mnogosearch
function udm errno $agent	ссылка на идентификатор агента полученная после вызова udm_alloc_agent()
function int udm errno	возвращает номер ошибки mnogosearch; либо нуль если ошибки нет
function int udm errno resource $agent	получает номер ошибки mnogosearch
function udm error $agent	ссылка на идентификатор агента полученная после вызова udm_alloc_agent()
function string udm error	udm_error() возвращает сообщение об ошибке mnogosearch либо пустую строку если нет ошибок
function string udm error resource $agent	получает сообщение об ошибке mnogosearch
function udm free agent $agent	ссылка на идентификатор агента полученная после вызова udm_alloc_agent()
function int udm free agent	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function int udm free agent resource $agent	освобождает сессию mnogosearch
function udm free ispell data $agent	ссылка на идентификатор агента полученная после вызова udm_alloc_agent()
function bool udm free ispell data	udm_free_ispell_data() всегда возвращает true
function bool udm free ispell data int $agent	освобождает память выделенную для ispell-данных
function udm free res $res	ссылка на идентификатор результата полученная после вызова udm_find()
function bool udm free res	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool udm free res resource $res	освобождает память выделенную для результатов mnogosearch
function udm hash32 $agent	ссылка на идентификатор агента полученная после вызова udm_alloc_agent()
function udm hash32 $str	входная строка
function int udm hash32	возвращает 32-битную хэш-сумму
function int udm hash32 resource $agent string $str	возвращает контрольную сумму hash32 данной строки
function uksort $key_compare_func	функция сравнения должна возвращать целое которое меньше равно или больше нуля если первый аргумент является соответственно меньшим равным или большим чем второй
function uksort $array	входной массив
function bool uksort	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool uksort array $array callable $key_compare_func	сортирует массив по ключам используя пользовательскую функцию для сравнения ключей
function umask $mask	новая umask
function int umask	вызов umask() без аргументов вернёт текущую umask иначе будет возвращена старая umask
function int umask int $mask	изменяет текущую umask
function uniqid $more_entropy	если равен true то функция uniqid() добавит дополнительную энтропию используя комбинированный линейный конгруэнтный генератор в конце возвращаемого значения что увеличивает вероятность уникальности результата
function uniqid $prefix	может быть полезно к примеру если идентификаторы генерируются одновременно на нескольких хостах и генерация идентификаторы производится в одну и ту же микросекунду
function string uniqid	возвращает уникальный идентификатор в виде строки string
function string uniqid string $prefix bool $more_entropy	генерирует уникальный id
function unixtojd $timestamp	метка времени unix для преобразования
function int unixtojd	число дней в юлианском летоисчислении
function int unixtojd int $timestamp	переводит метку времени unix в юлианский день
function unpack $data	упакованные данные
function unpack $format	см
function array unpack	возвращает ассоциативный массив содержащий распакованные элементы бинарной строки
function array unpack string $format string $data	распаковывает данные из бинарной строки
function unset	другая переменная
function unset $var	удаляемая переменная
function void unset mixed $var	удаляет переменную
function usort $value_compare_func	функция сравнения должна возвращать целое которое меньше равно или больше нуля если первый аргумент является соответственно меньшим равным или большим чем второй
function usort $array	входной массив
function bool usort	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool usort array $array callable $value_compare_func	сортирует массив по значениям используя пользовательскую функцию для сравнения элементов
function utf8 decode $data	строка закодированная в utf-8
function string utf8 decode	возвращает данные data переведенные в iso-8859-1
function string utf8 decode string $data	преобразует строку с iso-8859-1 символами кодированную в utf-8 в однобайтную iso-8859-1
function utf8 encode $data	iso-8859-1 строка
function string utf8 encode	возвращает utf-8 перевод данных data
function string utf8 encode string $data	кодирует строку iso-8859-1 в кодировке utf-8
function version compare $version1	старший номер версии
function version compare $version2	младший номер версии
function version compare $operator	если задан третий необязательный аргумент operator то версии проверяются на соответствие логическому выражению
function mixed version compare	по умолчанию функция version_compare() возвращает -1 если первая версия меньше второй; 0 когда они равны; 1 если вторая меньше первой
function mixed version compare string $version1 string $version2 string $operator	сравнивает две стандартизованные строки с номером версии
function vfprintf $format	описание параметра format смотрите в документации к функции sprintf()
function int vfprintf	возвращает длину выведенной строки
function int vfprintf resource $handle string $format array $args	записывает отформатированную строку в поток
function virtual $filename	имя файла для которого будет выполнен подзапрос
function bool virtual	результат выполнения подзапроса в случае успеха или false в случае ошибки
function bool virtual string $filename	выполняет подзапрос apache
function vsprintf $format	описание параметра format смотрите в документации к функции sprintf()
function string vsprintf	возвращает значения массива в виде строки отформатированные в соответствии с параметром format описанном в документации к функции sprintf()
function string vsprintf string $format array $args	возвращает отформатированную строку
function win32 continue service $servicename	короткое название службы
function win32 continue service $machine	необязательное имя машины
function int win32 continue service	возвращает win32_no_error в случае успешного завершения false если была обнаружена проблема с параметрами или код ошибки win32 при неудачном завершении работы
function int win32 continue service string $servicename string $machine	возобновляет работу приостановленной службы
function win32 stop service $servicename	короткое название службы
function win32 stop service $machine	необязательное имя машины
function int win32 stop service	возвращает win32_no_error в случае успешного завершения false если была обнаружена проблема с параметрами или код ошибки win32 при неудачном завершении работы
function int win32 stop service string $servicename string $machine	останавливает службу
function wordwrap $width	количество символов по которым строка будет перенесена
function wordwrap $break	символ переноса строки можно указать с помощью необязательного параметра break
function wordwrap $cut	если параметр cut установлен в true строка всегда будет переноситься на указанной ширине или раньше
function wordwrap $str	входная строка
function string wordwrap	возвращает строку со вставленными символами переноса на указанной длине
function string wordwrap string $str int $width string $break bool $cut	переносит строку по указанному количеству символов
function xattr get $flags	поддерживаемые xattr-флаги xattr_dontfollow не разыменовывать символические ссылки работать с самой ссылкой
function xattr get $name	имя атрибута
function xattr get $filename	файл атрибут которого нужно прочитать
function string xattr get	функция возвращает строку содержащую значение false если атрибут не существует
function string xattr get string $filename string $name int $flags	получение расширенных атрибутов файла
function xattr list $flags	поддерживаемые xattr-флаги xattr_dontfollow не разыменовывать символические ссылки работать с самой ссылкой
function xattr list $filename	файл список атрибутов которого нужно прочитать
function array xattr list	функция возвращает массив содержащий имена расширенных атрибутов
function array xattr list string $filename int $flags	просмотр списка расширенных атрибутов файла
function xattr remove $flags	поддерживаемые xattr-флаги xattr_dontfollow не разыменовывать символические ссылки работать с самой ссылкой
function xattr remove $name	имя удаляемого атрибута
function xattr remove $filename	файл атрибут которого нужно удалить
function bool xattr remove	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool xattr remove string $filename string $name int $flags	удаление расширенных атрибутов файла
function xattr set $filename	имя файла атрибут которого нужно установить
function xattr set $value	значение атрибута
function xattr set $flags	поддерживаемые xattr-флаги xattr_create функция вернёт ошибку если атрибут существует
function xattr set $name	имя расширенного атрибута
function bool xattr set	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool xattr set string $filename string $name string $value int $flags	установка расширенных атрибутов файла
function xattr supported $flags	поддерживаемые xattr-флаги xattr_dontfollow не разыменовывать символические ссылки работать с самой ссылкой
function xattr supported $filename	путь к проверяемому файлу
function bool xattr supported	функция возвращает true если файловая система поддерживает расширенные атрибуты false если это не так и null если невозможно определить на пример неверный путь к файлу или нет разрешения на чтение файла
function bool xattr supported string $filename int $flags	проверка поддержки расширенных атрибутов
function xml error string $code	код ошибки возвращаемый функцией xml_get_error_code()
function string xml error string	возвращает строку с текстовым описанием кода ошибки code или false если описания не найдено
function string xml error string int $code	получение строки ошибки xml анализатора
function xml get current line number $parser	ссылка на парсер xml для получения номера строки
function int xml get current line number	эта функция возвращает false если ссылка параметра parser не ведет к действующему парсеру или же возвращает номер строки согласно текущему положению указателя парсера
function int xml get current line number resource $parser	получает от xml-парсера номер текущей строки
function xml get error code $parser	ссылка на парсер xml для получения кода ошибки
function int xml get error code	эта функция возвращает false если ссылка параметра parser не ведет к действующему парсеру или же возвращает один из кодов ошибок из списка расположенного в разделе кодов ошибок
function int xml get error code resource $parser	получает код ошибки xml-парсера
function xml parse into struct $index	массив указателей на соответствующие значения в массиве $values
function xml parse into struct $data	строка xml данных
function xml parse into struct $parser	ссылка на используемый xml анализатор
function xml parse into struct $values	массив значений xml данных
function int xml parse into struct	xml_parse_into_struct() возвращает 0 при неудачном разборе строки и 1 при успешном
function int xml parse into struct resource $parser string $data array $values array $index	разбор xml данных и помещение в массив
function xml parse $is_final	если задан и установлен в true data считается последней частью в этом разборе
function xml parse $parser	ссылка на используемый xml анализатор
function xml parse $data	часть данных для разбора
function int xml parse	возвращает 1 при успешном завершении 0 в противном случае
function int xml parse resource $parser string $data bool $is_final	запускает разбор xml документа
function xml parser create ns $separator	если сообщить анализатору пространство имен то параметры тэгов передающиеся в различные обработчики будут состоять из пространства имен и локального имени отделенных заданным в этом аргументе разделителем seperator
function xml parser create ns $encoding	необязательный аргумент encoding задает кодировку символов для ввода / вывода в php 4
function resource xml parser create ns	возвращает ресурс созданного xml анализатора
function resource xml parser create ns string $encoding string $separator	создание xml анализатора с поддержкой пространств имен
function xml parser free $parser	ссылка на очищаемый xml анализатор
function bool xml parser free	эта функция возвращает false если parser ссылается на недопустимый анализатор в остальных случаях она очищает анализатор и возвращает true
function bool xml parser free resource $parser	освобождение xml анализатора
function xml parser get option $option	какую настройку получить
function xml parser get option $parser	ссылка на xml анализатор настройку которого требуется получить
function mixed xml parser get option	эта функция возвращает false если parser ссылается на недопустимый анализатор или если option имеет недопустимое значение в этом случает выбрасывается предупреждение e_warning
function mixed xml parser get option resource $parser int $option	получение значения настройки xml анализатора
function xml parser set option $option	какую настройку требуется установить
function xml parser set option $value	новое значение настройки
function xml parser set option $parser	ссылка на xml анализатор
function bool xml parser set option	функция возвращает false если parser ссылается на недопустимый анализатор или если настройка не может быть установлена
function bool xml parser set option resource $parser int $optionне mixed $value	установка значения настройки xml анализатора
function xml set character data handler $handler	handler - строка содержащая имя функции которая должна быть определена на момент вызова функции xml_parse() из анализатора parser
function xml set character data handler $data	второй аргумент data должен содержать данные в виде текстовой строки
function xml set character data handler $parser	ссылка на xml анализатор
function xml set character data handler $parser	первый аргумент parser является ссылкой на xml анализатор вызывающий обработчик
function bool xml set character data handler	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool xml set character data handler resource $parser callable $handler	установка обработчика символьных данных
function xml set default handler $handler	handler - строка содержащая имя функции которая должна быть определена на момент вызова функции xml_parse() из анализатора parser
function xml set default handler $data	второй аргумент data должен содержать символьные данные
function xml set default handler $parser	ссылка на xml анализатор
function xml set default handler $parser	первый аргумент parser является ссылкой на xml анализатор вызывающий обработчик
function bool xml set default handler	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool xml set default handler resource $parser callable $handler	установка обработчика по умолчанию
function xml set external entity ref handler $open_entity_names	второй аргумент open_entity_names - список разделенных пробелами имен сущностей которые могут участвовать в разборе текущей сущности включая текущую сущность
function xml set external entity ref handler $parser	первый аргумент parser является ссылкой на xml анализатор вызывающий обработчик
function xml set external entity ref handler $public_id	пятый аргумент public_id - общедоступный идентификатор в том виде как он представлен в объявлении сущности либо пустая строка если такового нет; пробелы в идентификаторе будут нормализованы в соответствии с требованиями xml спецификации
function xml set external entity ref handler $system_id	четвертый аргумент system_id - системный идентификатор в том виде как он представлен в объявлении сущности
function xml set external entity ref handler $parser	ссылка на xml анализатор
function xml set external entity ref handler $base	это основа для разрешения системного идентификатора system_id внешней сущности
function xml set external entity ref handler $handler	handler - строка содержащая имя функции которая должна быть определена на момент вызова функции xml_parse() из анализатора parser
function bool xml set external entity ref handler	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool xml set external entity ref handler resource $parser callable $handler	установка обработчика внешних сущностей
function xml set processing instruction handler $handler	handler - строка содержащая имя функции которая должна быть определена на момент вызова функции xml_parse() из анализатора parser
function xml set processing instruction handler $parser	ссылка на xml анализатор для которого устанавливается обработчик
function xml set processing instruction handler $data	третий аргумент data содержит pi данные
function xml set processing instruction handler $parser	первый аргумент parser является ссылкой на xml анализатор вызывающий обработчик
function xml set processing instruction handler $target	второй аргумент target содержит цель применения pi
function bool xml set processing instruction handler	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool xml set processing instruction handler resource $parser callable $handler	установка обработчика инструкций препроцессора pi
function xml set unparsed entity decl handler $parser	первый аргумент parser является ссылкой на xml анализатор вызывающий обработчик
function xml set unparsed entity decl handler $notation_name	имя обозначения этой сущности см
function xml set unparsed entity decl handler $entity_name	имя сущности которой требуется дать определение
function xml set unparsed entity decl handler $system_id	системный идентификатор внешней сущности
function xml set unparsed entity decl handler $parser	ссылка на xml анализатор для которого задается обработчик
function xml set unparsed entity decl handler $base	это основа для разрешения системного идентификатора system_id внешней сущности
function xml set unparsed entity decl handler $handler	handler - строка содержащая имя функции которая должна быть определена на момент вызова функции xml_parse() из анализатора parser
function xml set unparsed entity decl handler $public_id	общедоступный идентификатор внешней сущности
function bool xml set unparsed entity decl handler	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool xml set unparsed entity decl handler resource $parser callable $handler	установка обработчика неразобранных объявлений сущностей
function xmlrpc set type $value	значение для установки типа
function xmlrpc set type $type	base64 или datetime
function bool xmlrpc set type	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool xmlrpc set type string $value string $type	устанавливает тип xml-rpc base64 или datetime для значения строки php
function yaml emit file $callbacks	обработчики контента для вывода yaml узлов
function yaml emit file $data	параметр data будет кодирован
function yaml emit file $linebreak	символ конца строки вывода выбирается из yaml_any_break yaml_cr_break yaml_ln_break yaml_crln_break
function yaml emit file $filename	путь к файлу
function yaml emit file $encoding	кодировка вывода выбирается из yaml_any_encoding yaml_utf8_encoding yaml_utf16le_encoding yaml_utf16be_encoding
function bool yaml emit file	возвращает true в случае успеха
function bool yaml emit file string $filename mixed $data int $encoding int $linebreak array $callbacks	отправляет yaml-представление значения в файл
function yaz ccl conf $id	идентификатор ресурса возвращаемый функцией yaz_connect()
function yaz ccl conf $config	массив настроек
function void yaz ccl conf resource $id array $config	конфигурирует ccl-парсер
function yaz connect $maximumRecordSize	целочисленный параметр определяющий максимальное количество байт в отдельной записи возвращаемой сервером в результате поиска
function yaz connect $options	если задается строка то она рассматривается как строка аутентификации z39
function yaz connect $persistent	имеет логический тип
function yaz connect $password	пароль для аутентификации
function yaz connect $user	имя пользователя для аутентификации
function yaz connect $preferredMessageSize	целочисленное параметр определяющий максимальный размер всех записей возвращенных сервером при поиске в байтах
function yaz connect $piggyback	имеет логический тип
function yaz connect $zurl	строка принимающая форму host[:port][ / database]
function yaz connect $proxy	прокси для подключения yaz proxy
function yaz connect $group	название группы для аутентификации
function yaz connect $cookie	cookie для сессии yaz proxy
function yaz connect $charset	строка определяющая кодировку используемую в z39
function mixed yaz connect	дескриптор соединения в случае успеха false при ошибке
function mixed yaz connect string $zurl mixed $options	подготавливает соединение с сервером z39
function yaz sort $d	сортировка по убыванию
function yaz sort $i	сортировка без учета регистра символов
function yaz sort $a	сортировка по возрастанию
function yaz sort $s	сортировка с учетом регистра символов
function yaz sort $id	дескриптор соединения возвращаемый yaz_connect()
function yaz sort $criteria	строка принимающая вид поле1 флаг1 поле2 флаг2 где поле1 устанавливает первый атрибут сортировки поле2 - второй и т
function void yaz sort resource $id string $criteria	задает критерий сортировки
function yaz syntax $syntax	синтаксис должен быть задан как oid object identifier идентификатор объекта в исходном формате разделенным точками например 1
function yaz syntax $id	дескриптор соединения возвращаемый yaz_connect()
function void yaz syntax resource $id string $syntax	задает предпочитаемый синтаксис для извлекаемой записи
function yaz wait $timeout	устанавливает время ожидания в секундах
function yaz wait $event	имеет логический тип
function yaz wait $options	ассоциативный массив параметров: timeout устанавливает время ожидания в секундах
function mixed yaz wait	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function mixed yaz wait array $options	ожидает выполнения запросов z39
function int zend thread id	возвращает id потока выполнения в виде целого числа
function int zend thread id	возвращает уникальный идентификатор текущего потока выполнения
function zip close $zip	zip-файл должен быть открыт с помощью функции zip_open()
function void zip close resource $zip	закрывает дескриптор zip-архива
function zip entry close $zip_entry	дескриптор директории ранее открытый функцией zip_entry_open()
function bool zip entry close	возвращает true в случае успешного завершения или false в случае возникновения ошибки
function bool zip entry close resource $zip_entry	закрывает дескриптор директории
function zip entry compressionmethod $zip_entry	дескриптор директории возвращаемый функцией zip_read()
function string zip entry compressionmethod	метод сжатия
function string zip entry compressionmethod resource $zip_entry	возвращает метод сжатия дескриптора директории
function zip entry filesize $zip_entry	дескриптор директории возвращаемый функцией zip_read()
function int zip entry filesize	реальный размер дескриптора директории
function int zip entry filesize resource $zip_entry	возвращает реальный размер файла для дескриптора директории
function zip entry name $zip_entry	дескриптор директории возвращаемый функцией zip_read()
function string zip entry name	имя дескриптора директории
function string zip entry name resource $zip_entry	получает имя дескриптора директории
function zip entry read $zip_entry	дескриптор директории возвращаемый функцией zip_read()
function zip entry read $length	число байт которое нужно считать
function string zip entry read	возвращает считанные данные или пустую строку если достигнут конец файла или false в случае ошибки
function string zip entry read resource $zip_entry int $length	читает данные из открытого ранее дескриптора директории
function zip open $filename	имя файла zip-архива для открытия
function resource zip open	возвращает ссылку на ресурс для последующего использования с функциями zip_read() и zip_close() либо возвращает номер ошибки если filename не существует или в случае другой ошибки
function resource zip open string $filename	открывает zip-архив
function zip read $zip	zip-файл предварительно открытый с помощью функции zip_open()
function resource zip read	возвращает запись каталога для дальнейшего использования с функциями zip_entry_
function resource zip read resource $zip	считывает следующую запись в zip-архиве
function string zlib decode string $data string $max_decoded_len	распаковывает любые raw / gzip / zlib закодированные данные
function string zlib encode string $data string $encoding string $level	запаковывает данные с указанным кодированием
GearmanClient add Options $options	опции для добавления
GearmanClient bool add Options	всегда возвращает true
GearmanClient bool add Options int $options	добавить клиентские опции
GearmanClient add Server $host	имя хоста сервера задач
GearmanClient add Server $port	порт сервера задач
GearmanClient bool add Server	возвращает true в случае успешного завершения или false в случае возникновения ошибки
GearmanClient bool add Server string $host int $port	добавить сервер задач для клиента
GearmanClient add Servers $servers	список серверов разделенных запятыми
GearmanClient bool add Servers	возвращает true в случае успешного завершения или false в случае возникновения ошибки
GearmanClient bool add Servers string $servers	добавить список серверов задач для клиента
GearmanClient add Task Background $context	контекст приложения связываемый с задачей
GearmanClient add Task Background $workload	сериализованные данные подлежащие обработке
GearmanClient add Task Background $function_name	зарегистрированная функция вызываемая рабочим процессом
GearmanClient add Task Background $unique	уникальный id назначаемый определенной задаче
GearmanClient GearmanTask add Task Background	объект gearmantask или false если задача не может быть добавлена
GearmanClient GearmanTask add Task Background string $function_name string $workload mixed $context string $unique	добавить фоновую задачу для работы в параллельном режиме
GearmanClient add Task High $context	контекст приложения связываемый с задачей
GearmanClient add Task High $workload	сериализованные данные подлежащие обработке
GearmanClient add Task High $function_name	зарегистрированная функция вызываемая рабочим процессом
GearmanClient add Task High $unique	уникальный id назначаемый определенной задаче
GearmanClient GearmanTask add Task High	объект gearmantask или false если задача не может быть добавлена
GearmanClient GearmanTask add Task High string $function_name string $workload mixed $context string $unique	добавить высокоприоритетную задачу для работы в параллельном режиме
GearmanClient add Task Low Background $context	контекст приложения связываемый с задачей
GearmanClient add Task Low Background $workload	сериализованные данные подлежащие обработке
GearmanClient add Task Low Background $function_name	зарегистрированная функция вызываемая рабочим процессом
GearmanClient add Task Low Background $unique	уникальный id назначаемый определенной задаче
GearmanClient GearmanTask add Task Low Background	объект gearmantask или false если задача не может быть добавлена
GearmanClient GearmanTask add Task Low Background string $function_name string $workload mixed $context string $unique	добавить низкоприоритетную фоновую задачу для работы в параллельном режиме
GearmanClient add Task Status $context	данные которые будут переданы обратному вызову
GearmanClient add Task Status $job_handle	дескриптор задания для получения статуса задачи
GearmanClient GearmanTask add Task Status	объект gearmantask
GearmanClient GearmanTask add Task Status string $job_handle string $context	добавить задачу для получения статуса
GearmanClient GearmanClient clone	gearmanclient в случае успеха false в случае неудачи
GearmanClient GearmanClient clone	создать копию объекта gearmanclient
GearmanClient - construct	создать экземпляр gearmanclient
GearmanClient string context	та же самая структура данных контекста приведенная в gearmanclient::setcontext()
GearmanClient string context	возвращает контекст приложения
GearmanClient do Background $workload	сериализованные данные подлежащие обработке
GearmanClient do Background $function_name	зарегистрированная функция вызываемая рабочим процессом
GearmanClient do Background $unique	уникальный id назначаемый определенной задаче
GearmanClient string do Background	дескриптор текущего задания
GearmanClient string do Background string $function_name string $workload string $unique	запускает выполнение задачи в фоновом режиме
GearmanClient do High Background $workload	сериализованные данные подлежащие обработке
GearmanClient do High Background $function_name	зарегистрированная функция вызываемая рабочим процессом
GearmanClient do High Background $unique	уникальный id назначаемый определенной задаче
GearmanClient string do High Background	дескриптор отправленной задачи
GearmanClient string do High Background string $function_name string $workload string $unique	запускает на выполнение с высоким приоритетом задачу в фоновом режиме
GearmanClient string do Job Handle	дескриптор задания для выполняющейся задачи
GearmanClient string do Job Handle	получить дескриптор выполняющейся задачи
GearmanClient do Low $workload	сериализованные данные подлежащие обработке
GearmanClient do Low $function_name	зарегистрированная функция вызываемая рабочим процессом
GearmanClient do Low $unique	уникальный id назначаемый определенной задаче
GearmanClient string do Low	строка содержащая результат выполнения задачи
GearmanClient string do Low string $function_name string $workload string $unique	запускает на выполнение задачу с низким приоритетом
GearmanClient do Low Background $workload	сериализованные данные подлежащие обработке
GearmanClient do Low Background $function_name	зарегистрированная функция вызываемая рабочим процессом
GearmanClient do Low Background $unique	уникальный id назначаемый определенной задаче
GearmanClient string do Low Background	дескриптор отправленной задачи
GearmanClient string do Low Background string $function_name string $workload string $unique	запускает на выполнение с низким приоритетом задачу в фоновом режиме
GearmanClient do Normal $workload	сериализованные данные подлежащие обработке
GearmanClient do Normal $function_name	зарегистрированная функция вызываемая рабочим процессом
GearmanClient do Normal $unique	уникальный id назначаемый определенной задаче
GearmanClient string do Normal	строка представляющая результат выполнения задания
GearmanClient string do Normal string $function_name string $workload string $unique	выполняет одиночное задание и возвращает результат
GearmanClient array do Status	массив представляющий процентное отношение выполненной работы
GearmanClient array do Status	получение статуса обработки задания
GearmanClient echo $workload	некоторые произвольные сериализированные данные для получения отклика
GearmanClient bool echo	возвращает true в случае успешного завершения или false в случае возникновения ошибки
GearmanClient bool echo string $workload	отправляет данные всем серверам заданий чтобы проверить отклик [устаревший метод]
GearmanClient int get Errno	допустимый gearman errno
GearmanClient int get Errno	получить значение errno
GearmanClient job Status $job_handle	дескриптор задачи который присваевается сервером gearman
GearmanClient array job Status	массив содержащий информацию о задании соответствующем заданному описателю
GearmanClient array job Status string $job_handle	получение статуса выполнения фонового задания
GearmanClient ping $workload	данные которые можно вывести в выходной поток
GearmanClient bool ping	возвращает true в случае успешного завершения или false в случае возникновения ошибки
GearmanClient bool ping string $workload	отправляет данные на все сервера и смотрит какие из них выведут эти данные
GearmanClient int return Code	допустимый возвращаемый код gearman
GearmanClient int return Code	получить последний возвращённый код gearman
GearmanClient set Client Callback $callback	функция или метод которые должны быть вызваны
GearmanClient void set Client Callback callable $callback	установить функцию обратного вызова когда есть пакет данных для задачи устаревший метод
GearmanClient set Complete Callback $callback	функция которая должна быть вызвана
GearmanClient bool set Complete Callback	возвращает true в случае успешного завершения или false в случае возникновения ошибки
GearmanClient bool set Complete Callback callable $callback	установите функцию которая будет вызвана по завершении задачи
GearmanClient set Context $context	произвольные данные контекста
GearmanClient bool set Context	всегда возвращает true
GearmanClient bool set Context string $context	установить данные приложения
GearmanClient bool set Data	всегда возвращает true
GearmanClient bool set Data string $data	установить данные приложения устаревший метод
GearmanClient set Data Callback $callback	функция или метод для обратного вызова
GearmanClient bool set Data Callback	возвращает true в случае успешного завершения или false в случае возникновения ошибки
GearmanClient bool set Data Callback callable $callback	задает callback-функцию для обработки переданных данных
GearmanClient set Exception Callback $callback	функция для перехвата исключения выброшенного обработчиком заданий
GearmanClient bool set Exception Callback	возвращает true в случае успешного завершения или false в случае возникновения ошибки
GearmanClient bool set Exception Callback callable $callback	задание функции обратного вызова для перехвата исключений обработчика заданий
GearmanClient set Fail Callback $callback	функция обратного вызова
GearmanClient bool set Fail Callback	возвращает true в случае успешного завершения или false в случае возникновения ошибки
GearmanClient bool set Fail Callback callable $callback	задание функции обратного вызова для обработки ситуации когда задание выполнить не удалось
GearmanClient set Status Callback $callback	функция для обратного вызова
GearmanClient bool set Status Callback	возвращает true в случае успешного завершения или false в случае возникновения ошибки
GearmanClient bool set Status Callback callable $callback	задание callback-функции собирающей информацию о состоянии обработчика заданий
GearmanClient set Timeout $timeout	временной интервал в миллисекундах
GearmanClient bool set Timeout	всегда возвращает true
GearmanClient bool set Timeout int $timeout	установка таймаута для операций ввода / вывода
GearmanClient set Warning Callback $callback	функция для обратного вызова
GearmanClient bool set Warning Callback	возвращает true в случае успешного завершения или false в случае возникновения ошибки
GearmanClient bool set Warning Callback callable $callback	задание callback-функции обслуживающей предупреждения обработчика заданий
GearmanClient int timeout	таймаут в миллисекундах
GearmanClient int timeout	получение значения таймаута операций ввода / вывода
GearmanJob - construct	создание объекта gearmanjob
GearmanJob data $data	сериализованные данные
GearmanJob bool data	возвращает true в случае успешного завершения или false в случае возникновения ошибки
GearmanJob bool data string $data	отправка данных устаревший метод
GearmanJob exception $exception	описание исключения
GearmanJob bool exception	возвращает true в случае успешного завершения или false в случае возникновения ошибки
GearmanJob bool exception string $exception	отправка исключения устаревший метод
GearmanJob bool fail	возвращает true в случае успешного завершения или false в случае возникновения ошибки
GearmanJob bool fail	отправка статуса провала операции устаревший метод
GearmanJob string function Name	имя функции
GearmanJob string function Name	получение имени функции
GearmanJob string handle	описатель задания
GearmanJob string handle	получение описателя объекта работы
GearmanJob send Complete $result	сериализованные результаты работы
GearmanJob bool send Complete	возвращает true в случае успешного завершения или false в случае возникновения ошибки
GearmanJob bool send Complete string $result	отправка результата и статуса завершения
GearmanJob send Data $data	сериализованные данные
GearmanJob bool send Data	возвращает true в случае успешного завершения или false в случае возникновения ошибки
GearmanJob bool send Data string $data	отправка данных
GearmanJob send Exception $exception	описание исключения
GearmanJob bool send Exception	возвращает true в случае успешного завершения или false в случае возникновения ошибки
GearmanJob bool send Exception string $exception	отправка исключения
GearmanJob bool send Fail	возвращает true в случае успешного завершения или false в случае возникновения ошибки
GearmanJob bool send Fail	отправка статуса провала операции
GearmanJob send Status $numerator	доля выполненной работы
GearmanJob send Status $denominator	количество всей работы
GearmanJob bool send Status	возвращает true в случае успешного завершения или false в случае возникновения ошибки
GearmanJob bool send Status int $numerator int $denominator	отправка статуса задания
GearmanJob status $numerator	доля выполненной работы
GearmanJob status $denominator	количество всей работы
GearmanJob bool status	возвращает true в случае успешного завершения или false в случае возникновения ошибки
GearmanJob bool status int $numerator int $denominator	отправка статуса задания устаревший метод
GearmanJob string unique	уникальный идентификатор
GearmanJob string unique	получение уникального идентификатора
GearmanJob warning $warning	сообщение предупреждения
GearmanJob bool warning	возвращает true в случае успешного завершения или false в случае возникновения ошибки
GearmanJob bool warning string $warning	отправка предупреждения устаревший метод
GearmanJob string workload	сериализованные данные
GearmanJob string workload	получение данных для обработки
GearmanJob int workload Size	размер в байтах
GearmanJob int workload Size	получение размера обрабатываемых данных
GearmanTask GearmanTask create	объект класса gearmantask или false в случае возникновения ошибки
GearmanTask GearmanTask create	создает задание устаревший метод
GearmanTask int data Size	размер данных или false если данных предоставлено не было
GearmanTask int data Size	получение размера возвращаемых данных
GearmanTask bool is Known	true если задание известно false в противном случае
GearmanTask bool is Known	определение известно ли серверу об этом задании
GearmanTask bool is Running	true если задание выполняется false в противном случае
GearmanTask bool is Running	проверяет выполняется ли задание в данный момент
GearmanTask int return Code	допустимый в gearman код возврата
GearmanTask int return Code	получение последнего кода возврата
GearmanTask int task Denominator	число от 0 до 100 или false если определить значение не удалось
GearmanTask int task Denominator	получение знаменателя в дроби отвечающей за процент выполненной работы
GearmanTask int task Numerator	число от 0 до 100 или false если значение определить не удалось
GearmanTask int task Numerator	получение числителя дроби отвечающей за процент выполненной работы
GearmanTask string uuid	уникальный идентификатор или false если никакого идентификатора не присвоено
GearmanTask string uuid	получение уникального идентификатора задания устаревший метод
GearmanWorker add Options $option	добавляемые настройки
GearmanWorker bool add Options	всегда возвращает true
GearmanWorker bool add Options int $option	добавление настроек обработчика
GearmanWorker - construct	создание объекта gearmanworker
GearmanWorker echo $workload	какие-либо сериализованные данные
GearmanWorker bool echo	стандартное для gearman возвращаемое значение
GearmanWorker bool echo string $workload	проверка отклика серверов заданий
GearmanWorker string error	строка с описанием ошибки
GearmanWorker string error	получение последней обнаруженной ошибки
GearmanWorker int get Errno	допустимый номер ошибки
GearmanWorker int get Errno	получение номера ошибки
GearmanWorker register $function_name	имя функции которое необходимо зарегистрировать на сервере
GearmanWorker register $timeout	временной интервал в секундах
GearmanWorker bool register	стандартное возвращаемое значение gearman
GearmanWorker bool register string $function_name int $timeout	регистрация функции на сервере заданий
GearmanWorker remove Options $option	настройки которые необходимо убрать
GearmanWorker bool remove Options	всегда возвращает true
GearmanWorker bool remove Options int $option	удаление настроек обработчика
GearmanWorker set Id $id	строковый идентификатор
GearmanWorker bool set Id	возвращает true в случае успешного завершения или false в случае возникновения ошибки
GearmanWorker bool set Id string $id	назначает обработчику идентификатор чтобы в дальнейшем иметь возможность опросить все доступные обработчики
GearmanWorker set Options $option	настройки которые необходимо задать
GearmanWorker bool set Options	всегда возвращает true
GearmanWorker bool set Options int $option	задание настроек обработчика
GearmanWorker int timeout	временной интервал в миллисекундах
GearmanWorker int timeout	получение значения таймаута ожидания запросов на сокете
GearmanWorker bool unregister All	стандартное возвращаемое значение gearman
GearmanWorker bool unregister All	удаление регистрации всех имен функций на серверах заданий
GearmanWorker bool wait	возвращает true в случае успешного завершения или false в случае возникновения ошибки
GearmanWorker bool wait	ожидание запроса от какого-либо сервера задач
GearmanWorker bool work	возвращает true в случае успешного завершения или false в случае возникновения ошибки
GearmanWorker bool work	ожидание задания и его немедленное выполнение
GlobIterator int count	количество директорий и файлов в виде целого числа типа integer
GlobIterator int count	определяет количество директорий и файлов
Imagick adaptive Resize Image $bestfit	будет ли подгоняться изображение внутри ограничительной рамки
Imagick adaptive Resize Image $rows	количество строк в масштабе изображения
Imagick adaptive Resize Image $columns	количество столбцов в масштабе изображения
Imagick bool adaptive Resize Image	в случае успешной работы возвращает true
Imagick bool adaptive Resize Image int $columns int $rows bool $bestfit	адаптивное изменение размера изображения с данными триангуляции
Imagick adaptive Sharpen Image $sigma	стандартное отклонение гаусса в пикселях
Imagick adaptive Sharpen Image $radius	радиус гаусса в пикселях не считая центрального пикселя
Imagick adaptive Sharpen Image $channel	передайте любую корректную для вашего режима канала константу
Imagick bool adaptive Sharpen Image	в случае успешной работы возвращает true
Imagick bool adaptive Sharpen Image float $radius float $sigma int $channel	адаптивное изменение резкости изображения
Imagick add Image $source	исходный объект imagick
Imagick bool add Image	в случае успешной работы возвращает true
Imagick bool add Image Imagick $source	добавляет новое изображение к списку изображений объекта imagick
Imagick add Noise Image $noise_type	тип шума
Imagick add Noise Image $channel	передайте любую корректную для вашего режима канала константу
Imagick bool add Noise Image	в случае успешной работы возвращает true
Imagick bool add Noise Image int $noise_type int $channel	накладывает случайный шум на изображение
Imagick affine Transform Image $matrix	аффинная матрица
Imagick bool affine Transform Image	в случае успешной работы возвращает true
Imagick bool affine Transform Image ImagickDraw $matrix	преобразование изображения
Imagick animate Images $x_server	адрес x сервера
Imagick bool animate Images	в случае успешной работы возвращает true
Imagick bool animate Images string $x_server	анимация одного или нескольких изображений
Imagick annotate Image $x	горизонтальное смещение в пикселях слева от текста
Imagick annotate Image $angle	угол под которым выводится текст
Imagick annotate Image $text	строка с текстом
Imagick annotate Image $y	вертикальное смещение в пикселях к базовому тексту
Imagick annotate Image $draw_settings	объект imagickdraw с настройками наносимого текста
Imagick bool annotate Image	в случае успешной работы возвращает true
Imagick bool annotate Image ImagickDraw $draw_settings float $x float $y float $angle string $text	добавляет текстовый комментарий на изображение
Imagick black Threshold Image $threshold	пороговое значение ниже которого все пиксели станут черными
Imagick bool black Threshold Image	в случае успешной работы возвращает true
Imagick bool black Threshold Image mixed $threshold	перевести все пиксели ниже порогового значения в черный цвет
Imagick blur Image $channel	константа channeltype
Imagick blur Image $sigma	стандартное отклонение
Imagick blur Image $radius	радиус размытия
Imagick bool blur Image	в случае успешной работы возвращает true
Imagick bool blur Image float $radius float $sigma int $channel	добавляет фильтр размытия к изображению
Imagick border Image $bordercolor	объект imagickpixel или строка содержащая цвет рамки
Imagick border Image $width	ширина рамки
Imagick border Image $height	высота рамки
Imagick bool border Image	в случае успешной работы возвращает true
Imagick bool border Image mixed $bordercolor int $width int $height	окружает изображение рамкой
Imagick charcoal Image $sigma	стандартное отклонение гаусса в пикселях
Imagick charcoal Image $radius	радиус гаусса в пикселях не включая центральный пиксель
Imagick bool charcoal Image	в случае успешной работы возвращает true
Imagick bool charcoal Image float $radius float $sigma	рисование углем
Imagick chop Image $height	высота обрезаемой области
Imagick chop Image $y	начало отчета обрезаемой области по оси y
Imagick chop Image $x	начало отчета обрезаемой области по оси x
Imagick chop Image $width	ширина обрезаемой области
Imagick bool chop Image	в случае успешной работы возвращает true
Imagick bool chop Image int $width int $height int $x int $y	удаляет область изображения и обрезает его
Imagick bool clear	в случае успешной работы возвращает true
Imagick bool clear	очищает все ресурсы связанные с объектом imagick
Imagick clip Path Image $inside	если установлено true то последующие операции будут применяться к внутреннему контуру
Imagick clip Path Image $pathname	обозначенный контур
Imagick bool clip Path Image	в случае успешной работы возвращает true
Imagick bool clip Path Image string $pathname bool $inside	отсечь вдоль обозначенного контура с профилем 8bim
Imagick Imagick clone	будет возвращена копия объекта imagick
Imagick Imagick clone	создает точную копию объекта imagick
Imagick construct $files	путь к изображению для загрузки или массив таких путей
Imagick mixed construct	в случае успеха возвращает новый объект imagick
Imagick mixed construct mixed $files	конструктор объекта imagick
Imagick crop Image $width	ширина обрезания
Imagick crop Image $x	координата x верхнего левого угла области обрезания
Imagick crop Image $y	координата y верхнего левого угла области обрезания
Imagick crop Image $height	высота обрезания
Imagick bool crop Image	в случае успешной работы возвращает true
Imagick bool crop Image int $width int $height int $x int $y	извлекает область изображения
Imagick Imagick current	возвращает себя в случае успеха
Imagick Imagick current	возвращает ссылку на текущий объект imagick
Imagick bool destroy	в случае успешной работы возвращает true
Imagick bool destroy	удаляет объект imagick
Imagick display Image $servername	имя x сервера
Imagick bool display Image	в случае успешной работы возвращает true
Imagick bool display Image string $servername	выводит изображение
Imagick draw Image $draw	операции рисования выполняемые к изображению
Imagick bool draw Image	в случае успешной работы возвращает true
Imagick bool draw Image ImagickDraw $draw	выполняет рендеринг объекта imagickdraw на текущем изображении
Imagick bool flip Image	в случае успешной работы возвращает true
Imagick bool flip Image	создает вертикальное зеркало изображения
Imagick bool flop Image	в случае успешной работы возвращает true
Imagick bool flop Image	создает горизонтальное зеркало изображения
Imagick int get Colorspace	возвращает целое число которое можно сравнить с константами colorspace
Imagick int get Colorspace	возвращает цветовую палитру
Imagick int get Compression	возвращает константу сжатия
Imagick int get Compression	возвращает тип сжатия объекта
Imagick int get Compression Quality	возвращает число означающее качество сжатия
Imagick int get Compression Quality	возвращает качество сжатия объекта
Imagick string get Copyright	возвращает строку содержащую копирайт imagemagick и magickwand c api
Imagick string get Copyright	возвращает копирайт api imagemagick в виде строки
Imagick string get Font	возвращает строку содержащую название шрифта или false если шрифт не установлен
Imagick string get Font	возвращает название шрифта
Imagick string get Format	возвращает формат изображения
Imagick string get Format	возвращает формат imagick объекта
Imagick int get Gravity	возвращает значение гравитации
Imagick int get Gravity	возвращает значение гравитации притяжения
Imagick string get Home URL	возвращает ссылку домашней страницы imagemagick
Imagick string get Home URL	возвращает домашний url библиотеки imagemagick
Imagick Imagick get Image	возвращает новый объект imagick с текущей последовательности изображений
Imagick Imagick get Image	возвращает новый объект imagick
Imagick ImagickPixel get Image Border Color	в случае успешной работы возвращает true
Imagick ImagickPixel get Image Border Color	возвращает цвет рамки изображения
Imagick get Image Channel Distortions $reference	imagick object containing the reference image
Imagick get Image Channel Distortions $metric	refer to this list of metric type constants
Imagick get Image Channel Distortions $channel	передайте любую корректную для вашего режима канала константу
Imagick float get Image Channel Distortions	returns a double describing the channel distortion
Imagick float get Image Channel Distortions Imagick $reference int $metric int $channel	gets channel distortions
Imagick int get Image Colors	в случае успешной работы возвращает true
Imagick int get Image Colors	возвращает число уникальных цветов в изображении
Imagick int get Image Compose	в случае успешной работы возвращает true
Imagick int get Image Compose	возвращает составной оператор связанный с изображением
Imagick int get Image Compression	возвращает константу компрессии
Imagick int get Image Compression	возвращает текущий тип компрессии изображения
Imagick int get Image Compression Quality	возвращает целое число описывающее сжатие изображения
Imagick int get Image Compression Quality	возвращает текущее качество сжатия изображения
Imagick string get Image Filename	возвращает строку с именем файла изображения
Imagick string get Image Filename	возвращает имя файла конкретного изображения в последовательности
Imagick string get Image Format	возвращает строку содержащую формат изображения в случае успеха
Imagick string get Image Format	возвращает формат конкретного изображения в последовательности
Imagick array get Image Geometry	возвращает массив с шириной и высотой изображения
Imagick array get Image Geometry	возвращает ширину и высоту в виде ассоциативного массива
Imagick int get Image Gravity	возвращает значение гравитации
Imagick int get Image Gravity	возвращает значение гравитации притяжения
Imagick int get Image Height	возвращает высоту изображения в пикселях
Imagick int get Image Height	возвращает высоту изображения
Imagick int get Image Size	возвращает целое число содержащее текущий размер изображения
Imagick int get Image Size	возвращает размер длину изображения в байтах
Imagick int get Image Type	возвращает возможный тип изображения
Imagick int get Image Type	возвращает возможный тип изображения
Imagick int get Image Width	возвращает ширину изображения в пикселях
Imagick int get Image Width	возвращает ширину изображения
Imagick float get Point Size	возвращает float содержащее размер точки
Imagick float get Point Size	возвращает размер точки
Imagick array get Quantum Depth	возвращает величину глубины объекта imagick в виде строки
Imagick array get Quantum Depth	возвращает величину глубины
Imagick array get Quantum Range	возвращает ассоциативный массив содержащий размер спектра как целое integer quantumrangelong и как строку string quantumrangestring
Imagick array get Quantum Range	возвращает величину размера спектра imagick
Imagick string get Release Date	возвращает дату релиза imagemagick в виде строки
Imagick string get Release Date	возвращает дату релиза imagemagick
Imagick get Resource $type	смотрите список констант типов ресурсов
Imagick int get Resource	возвращает размер используемой памяти указанного ресурса в мегабайтах
Imagick int get Resource int $type	возвращает размер используемой памяти указанного ресурса
Imagick get Resource Limit $type	смотрите список констант типов ресурсов
Imagick int get Resource Limit	возвращает заданный лимит ресурсов в мегабайтах
Imagick int get Resource Limit int $type	возвращает заданный лимит ресурсов
Imagick array get Sampling Factors	возвращает ассоциативный массив с горизонтальным и вертикальным фактором выборки изображения
Imagick array get Sampling Factors	возвращает горизонтальный и вертикальный фактор выборки
Imagick array get Size	возвращает размер связанный с объектом imagick в виде массива с ключами columns столбцы и rows строки
Imagick array get Size	возвращает размер связанный с объектом imagick
ImagickPixel get Color $normalized	нормализовать значение цвета
ImagickPixel array get Color	массив значений канала
ImagickPixel array get Color bool $normalized	возвращает цвет
ImagickPixel string get Color As String	возвращает цвет объекта imagickpixel в виде строки
ImagickPixel string get Color As String	возвращает цвет в виде строки
ImagickPixel array get HSL	возвращает hsl-значение в виде массива с ключами hue saturation и luminosity
ImagickPixel array get HSL	возвращает нормализованный hsl-цвет объекта imagickpixel
ImagickPixel set Color Value $color	одна из констант цвета imagick т
ImagickPixel set Color Value $value	значение для установки в этом канале в пределах от 0 до 1
ImagickPixel bool set Color Value	в случае успешной работы возвращает true
ImagickPixel bool set Color Value int $color float $value	устанавливает нормализованное значение одного из каналов
InfiniteIterator construct $iterator	бесконечный итератор
InfiniteIterator Iterator construct Iterator $iterator	конструктор класса infiniteiterator
InfiniteIterator void next	перемещает итератор на одну позицию вперед или в начало
IntlDateFormatter create $timezone	time zone id
IntlDateFormatter create $locale	locale to use when formatting or parsing or null to use the value specified in the ini setting intl
IntlDateFormatter create $timetype	time type to use none short medium long full
IntlDateFormatter create $calendar	calendar to use for formatting or parsing
IntlDateFormatter create $pattern	optional pattern to use when formatting or parsing
IntlDateFormatter create $datetype	date type to use none short medium long full
IntlDateFormatter IntlDateFormatter create	the created intldateformatter or false in case of failure
IntlDateFormatter IntlDateFormatter create string $locale int $datetype int $timetype mixed $timezone mixed $calendar string $pattern	create a date formatter
Iterator mixed current	может возвращать любой тип
Iterator mixed current	возвращает текущий элемент
Iterator scalar key	при успехе возвращает scalar или же null при неудаче
Iterator scalar key	возвращает ключ текущего элемента
Iterator void rewind	возвращает итератор на первый элемент
IteratorAggregate Traversable get Iterator	экземпляр объекта использующего iterator или traversable
IteratorAggregate Traversable get Iterator	возвращает внешний итератор
IteratorIterator construct $iterator	обходимый traversable итератор
IteratorIterator Traversable construct Traversable $iterator	создает итератор из чего-либо что является обходимым traversable
IteratorIterator mixed current	значение текущего элемента
IteratorIterator mixed current	получает текущее значение
IteratorIterator scalar key	ключ текущего элемента
IteratorIterator scalar key	получает ключ текущего элемента
IteratorIterator void next	перемещает итератор к следующему элементу
IteratorIterator void rewind	возвращает итератор к первому элементу
IteratorIterator bool valid	возвращает true если итератор является допустимым; в противном случае - false
IteratorIterator bool valid	проверяет является ли итератор допустимым
JsonSerializable mixed json Serialize	возвращает данные которые могут быть сериализованы json_encode() которые являются значением любого типа отличным от типа resource
JsonSerializable mixed json Serialize	задает данные которые должны быть сериализованы в json
LimitIterator Iterator get Inner Iterator	внутренний объект-итератор переданный конструктору limititerator::__construct()
LimitIterator Iterator get Inner Iterator	получение внутреннего объекта-итератора
LimitIterator int get Position	текущая позиция
LimitIterator int get Position	возвращает текущую позицию
LimitIterator void next	перемещение к следующей позиции
LimitIterator seek $position	позиция на которую требуется переместить указатель
LimitIterator int seek	возвращает смещение от начальной позиции после перемещения
LimitIterator int seek int $position	перемещает итератор на заданную позицию
LimitIterator bool valid	возвращает true в случае успешного завершения или false в случае возникновения ошибки
LimitIterator bool valid	проверяет валидность текущего элемента
Memcached add $value	сохраняемое значение
Memcached add $expiration	время хранения объекта по умолчанию равно 0
Memcached add $key	ключ под которым сохраняется значение
Memcached bool add	возвращает true в случае успешного завершения или false в случае возникновения ошибки
Memcached bool add string $key mixed $value int $expiration	добавляет элемент с новым ключом
Memcached add By Key $server_key	ключ идентифицирующий сервер на котором хранится значение
Memcached add By Key $value	сохраняемое значение
Memcached add By Key $expiration	время хранения объекта по умолчанию равно 0
Memcached add By Key $key	ключ под которым сохраняется значение
Memcached bool add By Key	возвращает true в случае успешного завершения или false в случае возникновения ошибки
Memcached bool add By Key string $server_key string $key mixed $value int $expiration	добавляет новый элемент на заданный сервер
Memcached add Server $weight	весовой коэффициент для заданного сервера по отношению к общему весу всех серверов в пуле
Memcached add Server $host	имя хоста memcache сервера
Memcached add Server $port	порт на котором работает сервер memcache
Memcached bool add Server	возвращает true в случае успешного завершения или false в случае возникновения ошибки
Memcached bool add Server string $host int $port int $weight	добавляет сервер в пул
Memcached add Servers $array	массив с серверами для добавления в пул
Memcached bool add Servers	возвращает true в случае успешного завершения или false в случае возникновения ошибки
Memcached bool add Servers array $servers	добавляет несколько серверов в пул
Memcached append By Key $server_key	ключ идентифицирующий сервер на котором хранится значение
Memcached append By Key $key	ключ под которым сохраняется значение
Memcached append By Key $value	строка для добавления в конец существующей записи
Memcached bool append By Key	возвращает true в случае успешного завершения или false в случае возникновения ошибки
Memcached bool append By Key string $server_key string $key string $value	добавляет данные к существующей записи на заданном сервере
Memcached cas $cas_token	уникальное значение связанное с существующей записью
Memcached cas $value	сохраняемое значение
Memcached cas $expiration	время хранения объекта по умолчанию равно 0
Memcached cas $key	ключ под которым сохраняется значение
Memcached bool cas	возвращает true в случае успешного завершения или false в случае возникновения ошибки
Memcached bool cas float $cas_token string $key mixed $value int $expiration	сравнивает и устанавливает значение для записи
Memcached delete $key	ключ удаляемой записи
Memcached delete $time	время к течение которого сервер ожидает удаления записи
Memcached bool delete	возвращает true в случае успешного завершения или false в случае возникновения ошибки
Memcached bool delete string $key int $time	удаляет запись
Memcached delete By Key $server_key	ключ идентифицирующий сервер на котором хранится значение
Memcached delete By Key $key	ключ удаляемой записи
Memcached delete By Key $time	период времени в течение которого сервер ожидает удаления записи
Memcached bool delete By Key	возвращает true в случае успешного завершения или false в случае возникновения ошибки
Memcached bool delete By Key string $server_key string $key int $time	удаляет запись с указанного сервера
Memcached delete Multi $keys	ключ удаляемой записи
Memcached delete Multi $time	время к течение которого сервер ожидает удаления записи
Memcached bool delete Multi	возвращает true в случае успешного завершения или false в случае возникновения ошибки
Memcached bool delete Multi array $keys int $time	удаляет несколько записей
Memcached delete Multi By Key $keys	ключ удаляемой записи
Memcached delete Multi By Key $server_key	ключ идентифицирующий сервер на котором хранится значение
Memcached delete Multi By Key $time	время к течение которого сервер ожидает удаления записи
Memcached bool delete Multi By Key	возвращает true в случае успешного завершения или false в случае возникновения ошибки
Memcached bool delete Multi By Key string $server_key array $keys int $time	удаляет несколько записей с указанного сервера
Memcached array fetch	возвращает следующий результат запроса или false в противном случае
Memcached array fetch	извлекает следующий результат
Memcached array fetch All	возвращает результат запроса или false в случае возникновения ошибки
Memcached array fetch All	извлекает все полученные записи
Memcached get $key	ключ получаемой записи
Memcached get $cache_cb	функция обратного вызова для кэшируемого чтения или null
Memcached get $cas_token	переменная в которую записывается cas токен
Memcached mixed get	возвращает значение хранимое в кеше или false в противном случае
Memcached mixed get string $key callable $cache_cb float $cas_token	получение записи
Memcached array get All Keys	возвращает список ключей хранящихся на всех серверах в случае успеха или false в случае возникновения ошибки
Memcached array get All Keys	получает все ключи хранящиеся на серверах
Memcached get By Key $server_key	ключ идентифицирующий сервер на котором хранится значение
Memcached get By Key $cas_token	переменная в которую записывается cas токен
Memcached get By Key $cache_cb	callback-функция для кэшируемого чтения или null
Memcached get By Key $key	ключ получаемой записи
Memcached mixed get By Key	возвращает значение хранимое в кеше или false в противном случае
Memcached mixed get By Key string $server_key string $key callable $cache_cb float $cas_token	получает запись с определенного сервера
Memcached get Delayed $value_cb	callback-функция возвращающая результат или null
Memcached get Delayed $keys	массив с ключами для запроса записей
Memcached get Delayed $with_cas	запрашивать ли cas токены записей вместе со значениями
Memcached bool get Delayed	возвращает true в случае успешного завершения или false в случае возникновения ошибки
Memcached bool get Delayed array $keys bool $with_cas callable $value_cb	запрашивает несколько записей
Memcached get Delayed By Key $server_key	ключ идентифицирующий сервер на котором хранится значение
Memcached get Delayed By Key $value_cb	callback-функция возвращающая результат или null
Memcached get Delayed By Key $keys	массив с ключами для запроса записей
Memcached get Delayed By Key $with_cas	запрашивать ли cas токены записей вместе со значениями
Memcached bool get Delayed By Key	возвращает true в случае успешного завершения или false в случае возникновения ошибки
Memcached bool get Delayed By Key string $server_key array $keys bool $with_cas callable $value_cb	запрашивает несколько записей с указанного сервера
Memcached get Multi By Key $server_key	ключ идентифицирующий сервер на котором хранится значение
Memcached get Multi By Key $flags	флаги для операции получения записей
Memcached get Multi By Key $cas_tokens	переменная в которую будут записаны cas токены найденных записей
Memcached get Multi By Key $keys	массив с ключами для получения записей
Memcached array get Multi By Key	возвращает массив найденных записей или false в случае возникновения ошибки
Memcached array get Multi By Key string $server_key array $keys string $cas_tokens int $flags	получает несколько записей с указанного сервера
Memcached get Option $option	одна из memcached::opt_* констант
Memcached mixed get Option	возвращает значение запрашиваемого параметра или false в случае ошибки
Memcached mixed get Option int $option	получает значение memcached параметра
Memcached string get Result Message	сообщение описывающее результат выполнения последней memcached операции
Memcached string get Result Message	возвращает сообщение описывающее результат выполнения последней операции
Memcached get Server By Key $server_key	ключ идентифицирующий сервер на котором хранится значение
Memcached array get Server By Key	возвращает массив содержащий следующие ключи: host port и weight в случае успеха или false в случае неудачи
Memcached array get Server By Key string $server_key	получает информацию о сервере по ключу
Memcached array get Server List	список серверов в пуле
Memcached array get Server List	получает список серверов в пуле
Memcached array get Stats	список массивов со статистикой по каждому серверу где каждый элемент- отдельный сервер
Memcached array get Stats	получает статистику о серверах в пуле
Memcached array get Version	список массивов с информацией о версии по каждому серверу где каждый элемент- отдельный сервер
Memcached array get Version	получает информацию о версии серверов в пуле
Memcached increment $initial_value	инициирующее значение которое будет установлено записи если переданного ключа не существует
Memcached increment $key	ключ увеличиваемой записи
Memcached increment $expiry	время когда срок действия записи истекает
Memcached increment $offset	величина на которую происходит увеличение значения записи
Memcached int increment	возвращает новое значение записи в случае успеха или false в случае возникновения ошибки
Memcached int increment string $key int $offset int $initial_value int $expiry	увеличивает числовое значение записи
Memcached increment By Key $initial_value	инициирующее значение которое будет установлено записи если переданного ключа не существует
Memcached increment By Key $server_key	ключ идентифицирующий сервер на котором хранится значение
Memcached increment By Key $key	ключ увеличиваемой записи
Memcached increment By Key $expiry	время когда срок действия записи истекает
Memcached increment By Key $offset	величина на которую происходит увеличение значения записи
Memcached int increment By Key	возвращает новое значение записи в случае успеха или false в случае возникновения ошибки
Memcached int increment By Key string $server_key string $key int $offset int $initial_value int $expiry	увеличивает числовое значение записи хранимой на указанном сервере
Memcached bool is Pristine	возвращает true если экземпляр класса уже создан и false в противном случае
Memcached bool is Pristine	проверяет создан ли уже экземпляр класса memcached
Memcached prepend $key	ключ записи к которой происходит добавление в начало
Memcached prepend $value	добавляемая строка
Memcached bool prepend	возвращает true в случае успешного завершения или false в случае возникновения ошибки
Memcached bool prepend string $key string $value	добавляет данные в начало существующей записи
Memcached prepend By Key $server_key	ключ идентифицирующий сервер на котором хранится значение
Memcached prepend By Key $value	добавляемая строка
Memcached prepend By Key $key	ключ записи к которой происходит добавление в начало
Memcached bool prepend By Key	возвращает true в случае успешного завершения или false в случае возникновения ошибки
Memcached bool prepend By Key string $server_key string $key string $value	добавляет данные в начало существующей записи на указанном сервере
Memcached replace By Key $server_key	ключ идентифицирующий сервер на котором хранится значение
Memcached replace By Key $value	сохраняемое значение
Memcached replace By Key $expiration	время хранения объекта по умолчанию равно 0
Memcached replace By Key $key	ключ под которым сохраняется значение
Memcached bool replace By Key	возвращает true в случае успешного завершения или false в случае возникновения ошибки
Memcached bool replace By Key string $server_key string $key mixed $value int $expiration	заменяет существующую запись с заданным ключом на указанном сервере
Memcached set $value	сохраняемое значение
Memcached set $expiration	время хранения объекта по умолчанию равно 0
Memcached set $key	ключ под которым сохраняется значение
Memcached bool set	возвращает true в случае успешного завершения или false в случае возникновения ошибки
Memcached bool set string $key mixed $value int $expiration	сохраняет запись
Memcached set By Key $server_key	ключ идентифицирующий сервер на котором хранится значение
Memcached set By Key $value	сохраняемое значение
Memcached set By Key $expiration	время хранения объекта по умолчанию равно 0
Memcached set By Key $key	ключ под которым сохраняется значение
Memcached bool set By Key	возвращает true в случае успешного завершения или false в случае возникновения ошибки
Memcached bool set By Key string $server_key string $key mixed $value int $expiration	сохраняет запись на указанном сервере
Memcached set Multi $items	сохраняемый массив пар ключей / значений
Memcached set Multi $expiration	время хранения объекта по умолчанию равно 0
Memcached bool set Multi	возвращает true в случае успешного завершения или false в случае возникновения ошибки
Memcached bool set Multi array $items int $expiration	сохраняет несколько записей
Memcached set Multi By Key $server_key	ключ идентифицирующий сервер на котором хранится значение
Memcached set Multi By Key $items	сохраняемый массив пар ключей / значений
Memcached set Multi By Key $expiration	время хранения объекта по умолчанию равно 0
Memcached bool set Multi By Key	возвращает true в случае успешного завершения или false в случае возникновения ошибки
Memcached bool set Multi By Key string $server_key array $items int $expiration	сохраняет несколько записей на указанном сервере
Memcached bool set Option	возвращает true в случае успешного завершения или false в случае возникновения ошибки
Memcached bool set Option int $option mixed $value	устанавливает значение параметра для memcached
Memcached set Options $options	ассоциативный массив с параметрами где в качестве ключа выступает название параметра а в качестве значения- новое значение данного параметра
Memcached bool set Options	возвращает true в случае успешного завершения или false в случае возникновения ошибки
Memcached bool set Options array $options	устанавливает несколько memcached параметров
Memcached touch $expiration	время хранения объекта по умолчанию равно 0
Memcached touch $key	ключ под которым сохраняется значение
Memcached bool touch	возвращает true в случае успешного завершения или false в случае возникновения ошибки
Memcached bool touch string $key int $expiration	устанавливает новый срок хранения для записи
MultipleIterator void count Iterators	получает число присоединенных итераторов
MultipleIterator detach Iterator $iterator	отсоединяемый итератор
MultipleIterator void detach Iterator Iterator $iterator	отсоединяет итератор
MultipleIterator array key	массив array всех зарегистрированных итераторов или false если нет присоединенных подытераторов
MultipleIterator array key	получает зарегистрированные итераторы
MultipleIterator void next	перемещает все присоединенные итераторы к своим следующим элементам
MultipleIterator void valid	проверяет корректность подытераторов
function bool mysqli report int $flags	псевдоним mysqli_driver- > report_mode
NoRewindIterator mixed current	текущее значение
NoRewindIterator mixed current	получает текущее значение
NoRewindIterator mixed key	текущий ключ
NoRewindIterator mixed key	получает текущий ключ
NoRewindIterator void next	перемещает итератор к следующему элементу
NoRewindIterator bool valid	возвращает true в случае успешного завершения или false в случае возникновения ошибки
NoRewindIterator bool valid	проверяет итератор
OCI-Collection assign $from	экземпляр oci-collection
OCI-Collection bool assign	возвращает true в случае успешного завершения или false в случае возникновения ошибки
OCI-Collection bool assign OCI-Collection $from	присваивает коллекции значение другой уже существующей коллекции
OCI-Collection bool free	возвращает true в случае успешного завершения или false в случае возникновения ошибки
OCI-Collection bool free	освобождает ресурсы занимаемые объектом коллекции
OCI-Collection get Elem $index	индекс элемента
OCI-Collection mixed get Elem	djpdhfoftn false если такого элемента нет; null если элемент равен null ; строку если элемент относится к строковому столбцу и число если элемент является числовым полем
OCI-Collection mixed get Elem int $index	возвращает значение элемента
OCI-Collection int max	возвращает максимальное количество как целое число или false в случае ошибки
OCI-Collection int max	возвращает максимальное количество элементов в коллекции
OCI-Collection trim $num	количество элементов для отсечения
OCI-Collection bool trim	возвращает true в случае успешного завершения или false в случае возникновения ошибки
OCI-Collection bool trim int $num	отсекает элементы с конца коллекции
OCI-Lob append $lob_from	копируемый lob
OCI-Lob bool append	возвращает true в случае успешного завершения или false в случае возникновения ошибки
OCI-Lob bool append OCI-Lob $lob_from	добавляет данные из объекта lob в конец другого объекта
OCI-Lob bool close	возвращает true в случае успешного завершения или false в случае возникновения ошибки
OCI-Lob bool close	закрывает дескриптор объекта lob
OCI-Lob bool eof	возвращает true если внутренний указатель объекта находится на конце lob
OCI-Lob bool eof	проверяет находится ли указатель lob на конце объекта
OCI-Lob export $start	начальная позиция экспорта
OCI-Lob export $length	длина экспортируемой части lob
OCI-Lob export $filename	путь к файлу
OCI-Lob bool export	возвращает true в случае успешного завершения или false в случае возникновения ошибки
OCI-Lob bool export string $filename int $start int $length	сохраняет содержимое объекта lob в файл
OCI-Lob flush $flag	по умолчанию ресурсы не освобождаются но используя флаг oci_lob_buffer_free вы можете сделать это принудительно
OCI-Lob bool flush	возвращает true в случае успешного завершения или false в случае возникновения ошибки
OCI-Lob bool flush int $flag	очищает и записывает буфер объекта lob на сервер
OCI-Lob bool free	возвращает true в случае успешного завершения или false в случае возникновения ошибки
OCI-Lob bool free	освобождает ресурсы связанные с дескриптором lob
OCI-Lob bool get Buffering	возвращает false если буферизация отключена и true если включена
OCI-Lob bool get Buffering	возвращает текущее состояние буферизации большого объекта lob
OCI-Lob import $filename	путь к файлу
OCI-Lob bool import	возвращает true в случае успешного завершения или false в случае возникновения ошибки
OCI-Lob bool import string $filename	записывает содержимое файла в объект lob
OCI-Lob read $length	длина считываемых данных в байтах
OCI-Lob string read	возвращает содержимое в виде строки или false в случае возникновения ошибки
OCI-Lob string read int $length	возвращает часть объекта lob
OCI-Lob bool rewind	возвращает true в случае успешного завершения или false в случае возникновения ошибки
OCI-Lob bool rewind	переводит указатель объекта в начало большого объекта
OCI-Lob save $offset	может использоваться для указания смещения от начала lob
OCI-Lob save $data	данные для сохранения
OCI-Lob bool save	возвращает true в случае успешного завершения или false в случае возникновения ошибки
OCI-Lob bool save string $data int $offset	сохраняет данные в lob
OCI-Lob seek $offset	указывает количество байтов на которые следует переместиться от позиции определяемой параметром whence :
OCI-Lob seek $whence	may be one of: oci_seek_set - установить позицию равную offset oci_seek_cur - прибавить к текущей позиции offset байт oci_seek_end - прибавить к концу файла offset байт чтобы переместить указатель в начало - укажите отрицательный offset
OCI-Lob bool seek	возвращает true в случае успешного завершения или false в случае возникновения ошибки
OCI-Lob bool seek int $offset int $whence	устанавливает позицию внутреннего указателя lob
OCI-Lob int size	возвращает длину объекта lob или false в случае возникновения ошибки
OCI-Lob int size	возвращает размер объекта lob
OCI-Lob truncate $length	если указан то lob обрезается до указанной в length длины в байтах
OCI-Lob bool truncate	возвращает true в случае успешного завершения или false в случае возникновения ошибки
OCI-Lob bool truncate int $length	обрезает большой объект
OCI-Lob write $length	если указан этот параметр то запись остановится после того как length байт будет записано или закончатся данные из параметра data
OCI-Lob write $data	записываемые в lob данные
OCI-Lob int write	возвращает количество записанных байт или false в случае возникновения ошибки
OCI-Lob int write string $data int $length	записывает данные в объект lob
OCI-Lob write Temporary $data	данные для записи
OCI-Lob write Temporary $lob_type	один из следующих вариантов: oci_temp_blob для создания временных blobов oci_temp_clob для создания временных clobов
OCI-Lob bool write Temporary	возвращает true в случае успешного завершения или false в случае возникновения ошибки
OCI-Lob bool write Temporary string $data int $lob_type	записывает временный большой объект lob
OuterIterator Iterator get Inner Iterator	внутренний итератор для текущего элемента
OuterIterator Iterator get Inner Iterator	возвращает внутренний итератор для текущего элемента
ParentIterator construct $iterator	объект-итератор на основе которого создается новый объект
ParentIterator RecursiveIterator construct	объект parentiterator
ParentIterator RecursiveIterator construct RecursiveIterator $iterator	конструктор класса parentiterator
ParentIterator bool has Children	возвращает true в случае успешного завершения или false в случае возникновения ошибки
ParentIterator bool has Children	проверяет имеет ли внутренний объект-итератор дочерние объекты
ParentIterator void next	перемещает указатель на одну позицию вперед
PDO bool begin Transaction	возвращает true в случае успешного завершения или false в случае возникновения ошибки
PDO bool begin Transaction	инициализация транзакции
PDO bool commit	возвращает true в случае успешного завершения или false в случае возникновения ошибки
PDO bool commit	фиксирует транзакцию
PDO exec $statement	sql выражение которое необходимо подготовить и запустить
PDO int exec	pdo::exec() возвращает количество строк которые были модифицированы или удалены в ходе его выполнения
PDO int exec string $statement	запускает sql запрос на выполнение и возвращает количество строк задействованных в ходе его выполнения
PDO get Attribute $attribute	одни из pdo::attr_* констант
PDO mixed get Attribute	успешный вызов возвращает значение запрашиваемого атрибута pdo
PDO mixed get Attribute int $attribute	получить атрибут соединения с базой данных
PDO array get Available Drivers	функция pdo::getavailabledrivers() возвращает массив имен драйверов pdo
PDO array get Available Drivers	возвращает массив доступных драйверов pdo
PDO last Insert Id $name	имя объекта последовательности который должен выдать id
PDO string last Insert Id	если объект последовательности для name не задан pdo::lastinsertid() вернет строку представляющую id последней добавленной в базу записи
PDO string last Insert Id string $name	возвращает id последней вставленной строки или последовательное значение
PDO quote $string	экранируемая строка
PDO quote $parameter_type	представляет подсказку о типе данных первого параметра для драйверов которые имеют альтернативные способы экранирования
PDO string quote	возвращает экранированную строку которую теоретически безопасно использовать в теле sql запроса
PDO string quote string $string int $parameter_type	заключает строку в кавычки для использования в запросе
PDO bool roll Back	возвращает true в случае успешного завершения или false в случае возникновения ошибки
PDO bool roll Back	откат транзакции
PDOStatement bind Value $data_type	явно заданный тип данных параметра
PDOStatement bind Value $parameter	идентификатор параметра запроса
PDOStatement bind Value $value	значение которое требуется привязать к параметру
PDOStatement bool bind Value	возвращает true в случае успешного завершения или false в случае возникновения ошибки
PDOStatement bool bind Value mixed $parameter mixed $value int $data_type	связывает параметр с заданным значением
PDOStatement bool close Cursor	возвращает true в случае успешного завершения или false в случае возникновения ошибки
PDOStatement bool close Cursor	закрывает курсор переводя запрос в состояние готовности к повторному запуску
PDOStatement int column Count	возвращает количество столбцов в результирующем наборе запроса pdostatement
PDOStatement int column Count	возвращает количество столбцов в результирующем наборе
PDOStatement void debug Dump Params	вывод информации о подготовленной sql команде в целях отладки
PDOStatement execute $input_parameters	массив значений содержащий столько элементов сколько параметров заявлено в sql запросе
PDOStatement bool execute	возвращает true в случае успешного завершения или false в случае возникновения ошибки
PDOStatement bool execute array $input_parameters	запускает подготовленный запрос на выполнение
PDOStatement fetch Column $column_number	номер столбца данные которого необходимо извлечь
PDOStatement mixed fetch Column	pdostatement::fetchcolumn() возвращает значение одного столбца следующей строки результирующего набора
PDOStatement mixed fetch Column int $column_number	возвращает данные одного столбца следующей строки результирующего набора
PDOStatement fetch Object $ctor_args	элементы этого массива будут переданы в конструктор класса
PDOStatement fetch Object $class_name	имя класса создаваемого объекта
PDOStatement mixed fetch Object	возвращает новый объект указанного класса имена свойств которого соответствуют именам столбцов результирующего набора или false в случае возникновения ошибки
PDOStatement mixed fetch Object string $class_name array $ctor_args	извлекает следующую строку и возвращает ее в виде объекта
PDOStatement mixed get Attribute	возвращает значение атрибута
PDOStatement mixed get Attribute int $attribute	получение значения атрибута запроса pdostatement
PDOStatement bool set Attribute	возвращает true в случае успешного завершения или false в случае возникновения ошибки
PDOStatement bool set Attribute int $attribute mixed $value	присваивает атрибут объекту pdostatement
php_user_filter filter $in	in - ресурс указывающий на bucket brigade которая содержит один или несколько объектов bucket содержащих фильтруемые данные
php_user_filter filter $closing	если поток закрывается следовательно это последний фильтр в цепочке аргумент closing примет значение true
php_user_filter filter $out	out - ресурс указывающий на другой объект bucket brigade в который будут помещаться модифицированные бакеты
php_user_filter filter $consumed	consumed который должен всегда передаваться по ссылке должен увеличиваться на размер данных которые фильтр читает и изменяет
php_user_filter int filter	метод filter() должен возвращать одно из трех значений
php_user_filter int filter resource $in resource $out int $consumed bool $closing	вызывается как только применяется фильтр
RarEntry int get Attr	возвращает атрибуты или false в случае ошибки
RarEntry int get Attr	возвращает атрибуты элемента архива
RarEntry string get Crc	возвращает crc элемента архива или false в случае ошибки
RarEntry string get Crc	возвращает crc элемента архива
RarEntry int get Method	возвращает номер метода или false в случае ошибки
RarEntry int get Method	возвращает метод компрессии элемента
RarEntry string get Name	возвращает имя элемента в виде строки или false в случае ошибки
RarEntry string get Name	возвращает имя элемента
RarEntry int get Packed Size	возвращает размер сжатого элемента или false в случае ошибки
RarEntry int get Packed Size	возвращает размер сжатого элемента
RarEntry int get Unpacked Size	возвращает размер распакованного элемента или false в случае ошибки
RarEntry int get Unpacked Size	возвращает размер элемента в распакованном состоянии
RarEntry int get Version	возвращает версию или false в случае ошибки
RarEntry int get Version	возвращает минимальную версию программы rar необходимую для распаковки элемента
RecursiveArrayIterator RecursiveArrayIterator get Children	итератор для текущего элемента если этот элемент является массивом array или объектом object
RecursiveArrayIterator RecursiveArrayIterator get Children	возвращает итератор для текущего элемента если этот элемент является массивом array или объектом object
RecursiveArrayIterator bool has Children	возвращает true если текущий элемент является массивом array или объектом object false в противном случае
RecursiveArrayIterator bool has Children	определяет является ли текущий элемент массивом или объектом
RecursiveCachingIterator construct $flags	флаги
RecursiveCachingIterator construct $iterator	используемый итератор
RecursiveCachingIterator Iterator construct	recursivecachingiterator
RecursiveCachingIterator Iterator construct Iterator $iterator string $flags	конструктор
RecursiveCallbackFilterIterator RecursiveCallbackFilterIterator get Children	возвращает объект recursivecallbackfilteriterator содержащий дочерние элементы внутреннего итератора
RecursiveCallbackFilterIterator RecursiveCallbackFilterIterator get Children	возвращает дочерние элементы итератора хранящегося внутри recursivecallbackfilteriterator
RecursiveFilterIterator construct $iterator	объект-итератор recursiveiterator элементы которого требуется отфильтровать
RecursiveFilterIterator RecursiveIterator construct RecursiveIterator $iterator	создает объект recursivefilteriterator на основе объекта-итератора recursiveiterator
RecursiveFilterIterator RecursiveFilterIterator get Children	возвращает recursivefilteriterator содержащий дочерние элементы текущего элемента внутреннего итератора
RecursiveFilterIterator RecursiveFilterIterator get Children	возвращает дочерние элементы внутреннего итератора в виде объекта recursivefilteriterator
RecursiveFilterIterator bool has Children	true если у текущего элемента внутреннего итератора есть дочерние элементы false в противно случае
RecursiveFilterIterator bool has Children	проверяет есть ли у текущего элемента внутреннего итератора дочерние элементы
RecursiveIterator bool has Children	возвращает true если по текущему элементу можно осуществить навигацию false в противном случае
RecursiveIterator bool has Children	определяет можно ли для текущего элемента создать итератор
RecursiveIteratorIterator void begin Children	переход к первому дочернему элементу
RecursiveIteratorIterator void begin Iteration	начало навигации
RecursiveIteratorIterator RecursiveIterator call Get Children	объект класса recursiveiterator()
RecursiveIteratorIterator RecursiveIterator call Get Children	получение дочерних элементов
RecursiveIteratorIterator construct $flags	необязательный настроечный флаг
RecursiveIteratorIterator construct $iterator	объект-итератор на основе которого требуется построить данный экземпляр
RecursiveIteratorIterator construct $mode	необязательный параметр
RecursiveIteratorIterator Traversable construct Traversable $iterator int $mode int $flags	конструктор класса recursiveiteratoriterator
RecursiveIteratorIterator void end Iteration	окончание навигации
RecursiveIteratorIterator mixed get Max Depth	максимальная глубина рекурсии или false если глубина не ограничена
RecursiveIteratorIterator mixed get Max Depth	получение максимальной глубины рекурсии
RecursiveIteratorIterator void next Element	следующий элемент
RecursiveIteratorIterator set Max Depth $max_depth	максимально допустимая глубина вложенности
RecursiveIteratorIterator void set Max Depth string $max_depth	установка максимальной глубины вложенности
RecursiveRegexIterator RecursiveRegexIterator get Children	итератор для текущего элемента если возможна навигация по содержимому внутреннего итератора
RecursiveRegexIterator RecursiveRegexIterator get Children	возвращает итератор для текущего элемента
RecursiveTreeIterator void begin Children	начало навигации по потомкам элемента
RecursiveTreeIterator RecursiveIterator begin Iteration	объект recursiveiterator
RecursiveTreeIterator RecursiveIterator begin Iteration	начало навигации
RecursiveTreeIterator bool call Has Children	true если у текущего элемента есть дочерние false в противном случае
RecursiveTreeIterator bool call Has Children	проверка есть ли у текущего элемента потомки
RecursiveTreeIterator string current	возвращает текущий элемент с префиксом и суфиксом
RecursiveTreeIterator string current	получение текущего элемента
RecursiveTreeIterator void end Iteration	завершение навигации
RecursiveTreeIterator string get Entry	возвращает поддерево корнем которого является текущий элемент
RecursiveTreeIterator string get Entry	получение поддерева корнем которого является текущий элемент
RecursiveTreeIterator void get Postfix	получение суффикса
RecursiveTreeIterator string get Prefix	возвращает строку для помещения перед текущим элементом
RecursiveTreeIterator string get Prefix	получение префикса
RecursiveTreeIterator string key	возвращает ключ текущего элемента с префиксом и суффиксом
RecursiveTreeIterator string key	получение ключа текущего элемента
RecursiveTreeIterator void next	переход к следующему элементу
RecursiveTreeIterator void rewind	перевод итератора в начало
Reflection get Modifier Names $modifiers	числовые значения модификаторов имена которых требуется получить
Reflection array get Modifier Names	массив имен модификаторов
Reflection array get Modifier Names int $modifiers	получение имен модификаторов
ReflectionClass construct $argument	в качестве аргумента может принимать строку string содержащую имя исследуемого класса либо объект object
ReflectionClass mixed construct mixed $argument	создаёт объект класса reflectionclass
ReflectionClass get Constant $name	имя константы
ReflectionClass mixed get Constant	значение константы
ReflectionClass mixed get Constant string $name	возвращает определенную константу
ReflectionClass array get Constants	массив array констант
ReflectionClass array get Constants	возвращает константы
ReflectionClass ReflectionMethod get Constructor	объект reflectionmethod отражающий конструктор класса или null если у класса нет конструктора
ReflectionClass ReflectionMethod get Constructor	возвращает конструктор класса
ReflectionClass array get Default Properties	ассоциативный массив array свойств по умолчанию ключами которого являются имена свойств а значениями -- соответствующие значения по умолчанию или же null если этому свойству не было задано значение по умолчанию
ReflectionClass array get Default Properties	возвращает свойства по умолчанию
ReflectionClass int get End Line	номер последней строки определения пользовательского класса или false если номер неизвестен
ReflectionClass int get End Line	возвращает номер последней строки
ReflectionClass ReflectionExtension get Extension	экземпляр класса reflectionextension представляющий расширение определенное в классе или null для пользовательских классов
ReflectionClass ReflectionExtension get Extension	возвращает объект класса reflectionextension для расширения определенного в классе
ReflectionClass array get Interfaces	ассоциативный массив array интерфейсов в котором ключами являются имена интерфейсов а значениями -- объекты reflectionclass
ReflectionClass array get Interfaces	возвращает интерфейсы
ReflectionClass get Methods $filter	фильтрация результата для включения в список только методов с определенными атрибутами
ReflectionClass array get Methods	массив array объектов класса reflectionmethod отражающих каждый метод
ReflectionClass array get Methods int $filter	возвращает список методов в виде массива
ReflectionClass int get Modifiers	возвращает битовую маску из констант модификаторов
ReflectionClass int get Modifiers	возвращает информацию о модификаторах класса
ReflectionClass string get Namespace Name	название пространства имён
ReflectionClass string get Namespace Name	возвращает название пространства имён
ReflectionClass get Properties $filter	опциональный фильтр позволяющий возвращать только желаемые типы свойств
ReflectionClass array get Properties	массив объектов класса reflectionproperty
ReflectionClass array get Properties int $filter	возвращает свойства
ReflectionClass get Property $name	имя свойства
ReflectionClass ReflectionProperty get Property	объект класса reflectionproperty
ReflectionClass ReflectionProperty get Property string $name	возвращает экземпляр reflectionproperty для свойства класса
ReflectionClass int get Start Line	номер начальной строки в виде целого числа integer
ReflectionClass int get Start Line	возвращает номер начальной строки
ReflectionClass get Static Property Value $def_value	значение по умолчанию возвращаемое в случае если в классе не определено статическое свойство с заданным именем name
ReflectionClass get Static Property Value $name	имя статического свойства значение которого необходимо получить
ReflectionClass mixed get Static Property Value	значение статического свойства
ReflectionClass mixed get Static Property Value string $name mixed $def_value	возвращает значение static свойства
ReflectionClass has Constant $name	имя проверяемой константы
ReflectionClass bool has Constant	true если константа задана в противном случае false
ReflectionClass bool has Constant string $name	проверяет задана ли константа
ReflectionClass has Method $name	имя проверяемого метода
ReflectionClass bool has Method	true если метод задан в противном случае false
ReflectionClass bool has Method string $name	проверяет задан ли метод
ReflectionClass implements Interface $interface	имя интерфейса
ReflectionClass bool implements Interface	возвращает true в случае успешного завершения или false в случае возникновения ошибки
ReflectionClass bool implements Interface string $interface	проверяет реализуется ли интерфейс
ReflectionClass bool in Namespace	возвращает true в случае успешного завершения или false в случае возникновения ошибки
ReflectionClass bool in Namespace	проверяет определён ли класс в пространстве имён
ReflectionClass bool is Abstract	возвращает true в случае успешного завершения или false в случае возникновения ошибки
ReflectionClass bool is Abstract	проверяет является ли класс абстрактным
ReflectionClass bool is Final	возвращает true в случае успешного завершения или false в случае возникновения ошибки
ReflectionClass bool is Final	проверяет является ли класс окончательным final
ReflectionClass is Instance $object	проверяемый объект
ReflectionClass bool is Instance	возвращает true в случае успешного завершения или false в случае возникновения ошибки
ReflectionClass bool is Instance object $object	проверяет принадлежит ли объект классу
ReflectionClass bool is Instantiable	возвращает true в случае успешного завершения или false в случае возникновения ошибки
ReflectionClass bool is Instantiable	проверяет можно ли создать экземпляр класса
ReflectionClass bool is Internal	возвращает true в случае успешного завершения или false в случае возникновения ошибки
ReflectionClass bool is Internal	проверяет является ли класс встроенным в расширение или в ядро
ReflectionClass is Subclass Of $class	имя класса по которому будет вестись проверка
ReflectionClass bool is Subclass Of	возвращает true в случае успешного завершения или false в случае возникновения ошибки
ReflectionClass bool is Subclass Of string $class	проверяет является ли класс подклассом
ReflectionClass bool is User Defined	возвращает true в случае успешного завершения или false в случае возникновения ошибки
ReflectionClass bool is User Defined	проверяет является ли класс пользовательским
ReflectionClass new Instance Args $args	массив array аргументов который затем передаётся в конструктор класса
ReflectionClass object new Instance Args	возвращает новый экземпляр класса
ReflectionClass object new Instance Args array $args	создаёт экземпляр класса с переданными параметрами
ReflectionClass object new Instance Without Constructor	создаёт новый экземпляр класса без вызова конструктора
ReflectionClass string to String	строковое представление экземпляра класса reflectionclass
ReflectionClass string to String	возвращает строковое представление объекта класса reflectionclass
ReflectionExtension construct $name	имя модуля
ReflectionExtension string construct	объект object класса reflectionextension
ReflectionExtension string construct string $name	создаёт объект класса reflectionextension
ReflectionExtension export $name	экспортируемый объект reflection
ReflectionExtension export $return	установка в true вернет экспортируемое значение в отличие от поведения где этот параметр опущен
ReflectionExtension string export	если параметр return установлен в true тогда экспортируемый объект будет возвращен как string иначе будет возвращен null
ReflectionExtension string export string $name string $return	экспортирует модуль
ReflectionExtension array get Classes	массив объектов класса reflectionclass по одному на каждый класс модуля
ReflectionExtension array get Classes	возвращает классы
ReflectionExtension array get Dependencies	ассоциативный массив array ключами которого являются зависимости а значениями следующие записи: required optional или conflicts
ReflectionExtension array get Dependencies	получение зависимостей
ReflectionExtension array get Functions	ассоциативный массив объектов reflectionfunction в котором ключами являются названия определенных в расширении функций
ReflectionExtension array get Functions	получение функций расширения
ReflectionExtension array get INIEntries	ассоциативный массив array в котором ключи - имена ini-настроек а значения - соответствующие значения настроек
ReflectionExtension array get INIEntries	получение ini-настроек расширения
ReflectionExtension string get Name	имя расширения
ReflectionExtension string get Name	получение имени расширения
ReflectionExtension string get Version	версия расширения
ReflectionExtension string get Version	получение версии расширения
ReflectionExtension string to String	возвращает экспортированное расширение в виде строки тем же образом что и reflectionextension::export()
ReflectionExtension string to String	преобразование в строку
ReflectionFunction construct $name	имя reflection-функции или замыкания
ReflectionFunction mixed construct mixed $name	конструктор класса reflectionfunction
ReflectionFunction export $name	экспортируемый объект reflection
ReflectionFunction export $return	установка в true вернет экспортируемое значение в отличие от поведения где этот параметр опущен
ReflectionFunction string export	если параметр return установлен в true тогда экспортируемый объект будет возвращен как string иначе будет возвращен null
ReflectionFunction string export string $name string $return	экспорт функции
ReflectionFunction invoke $args	передаваемые функции аргументы
ReflectionFunction mixed invoke	возвращает результат выполнения вызванной функции
ReflectionFunction mixed invoke mixed $parameter	вызывает функцию
ReflectionFunction invoke Args $args	передаваемые функции аргументы в виде массива
ReflectionFunction mixed invoke Args	возвращает результат выполнения вызванной функции
ReflectionFunction mixed invoke Args array $args	вызов функции с передачей аргументов
ReflectionFunction bool is Disabled	true если функция отключена false противном случае
ReflectionFunction bool is Disabled	проверяет что функция отключена
ReflectionFunction string to String	результат выполнения схож с выводом reflectionfunction::export()
ReflectionFunction string to String	представление в виде строки
ReflectionFunctionAbstract void clone	копирующий конструктор
ReflectionFunctionAbstract string get Doc Comment	комментарий если он есть false в противном случае
ReflectionFunctionAbstract string get Doc Comment	получает документируемый комментарий
ReflectionFunctionAbstract int get End Line	номер последней строки описания определенной пользователем функции либо false если он неизвестен
ReflectionFunctionAbstract int get End Line	получает номер строки завершения описания функции
ReflectionFunctionAbstract ReflectionExtension get Extension	информация о расширении в виде объекта reflectionextension
ReflectionFunctionAbstract ReflectionExtension get Extension	получает информацию о расширении
ReflectionFunctionAbstract string get File Name	имя файла
ReflectionFunctionAbstract string get File Name	получает имя файла
ReflectionFunctionAbstract string get Namespace Name	имя пространства имен
ReflectionFunctionAbstract string get Namespace Name	получение имени пространства имен
ReflectionFunctionAbstract int get Number Of Parameters	число аргументов
ReflectionFunctionAbstract int get Number Of Parameters	получает количество аргументов
ReflectionFunctionAbstract array get Parameters	аргументы представленные объектами reflectionparameter
ReflectionFunctionAbstract array get Parameters	получает аргументы
ReflectionFunctionAbstract string get Short Name	короткое имя функции
ReflectionFunctionAbstract string get Short Name	получает короткое имя функции
ReflectionFunctionAbstract bool in Namespace	true если функция определена в пространстве имен false в противном случае
ReflectionFunctionAbstract bool in Namespace	проверяет находится ли функция в пространстве имен
ReflectionFunctionAbstract bool is Closure	возвращает true если функция является замыканием closure false в противном случае
ReflectionFunctionAbstract bool is Closure	проверяет является ли функция замыканием closure
ReflectionFunctionAbstract bool is Deprecated	true если функция устарела false в противном случае
ReflectionFunctionAbstract bool is Deprecated	проверяет является ли функция устаревшей
ReflectionFunctionAbstract bool is Internal	true если функция внутренняя false в противном случае
ReflectionFunctionAbstract bool is Internal	проверяет является ли функция внутренней
ReflectionFunctionAbstract bool is User Defined	true если функция определена пользователем false; в противном случае
ReflectionFunctionAbstract bool is User Defined	проверяет является ли функция определенной пользователем
ReflectionMethod construct $class_method	имена класса и метода разделенные ::
ReflectionMethod construct $class	имя класса или объекта экземпляра класса содержащего метод
ReflectionMethod construct $name	имя метода
ReflectionMethod mixed construct mixed $class string $name	конструктор класса reflectionmethod
ReflectionMethod export $class	имя класса
ReflectionMethod export $return	установка в true вернет экспортируемое значение в отличие от поведения где этот параметр опущен
ReflectionMethod export $name	имя метода
ReflectionMethod string export	если параметр return установлен в true тогда экспортируемый объект будет возвращен как string иначе будет возвращен null
ReflectionMethod string export string $class string $name bool $return	экспорт отраженного метода
ReflectionMethod invoke $object	объект метод которого требуется вызвать
ReflectionMethod invoke $parameter	ноль или более аргументов передаваемых методу
ReflectionMethod mixed invoke	возвращает результат выполнения метода
ReflectionMethod mixed invoke object $object mixed $parameter	вызов
ReflectionMethod invoke Args $object	объект метод которого вызывается
ReflectionMethod invoke Args $args	массив array содержащий аргументы функции
ReflectionMethod mixed invoke Args	возвращает результат выполнения метода
ReflectionMethod mixed invoke Args object $object array $args	вызов метода с передачей аргументов массивом
ReflectionMethod bool is Abstract	true если метод абстрактный false в противном случае
ReflectionMethod bool is Abstract	проверяет является ли метод абстрактным
ReflectionMethod bool is Constructor	true если метод является конструктором false в противном случае
ReflectionMethod bool is Constructor	проверяет является ли метод конструктором
ReflectionMethod bool is Destructor	true если метод является деструктором false в противном случае
ReflectionMethod bool is Destructor	проверяет является ли метод деструктором
ReflectionMethod bool is Final	true если создать наследника метода нельзя false в противном случае
ReflectionMethod bool is Final	проверяет может ли метод иметь наследников final
ReflectionMethod bool is Protected	true если метод защищенный protected false в противном случае
ReflectionMethod bool is Protected	проверяет является ли метод защищенным protected
ReflectionMethod bool is Public	true если метод общедоступный public false в противном случае
ReflectionMethod bool is Public	проверяет является ли метод общедоступным public
ReflectionMethod bool is Static	true если метод статический false в противном случае
ReflectionMethod bool is Static	проверяет является ли метод статическим
ReflectionMethod set Accessible $accessible	true чтобы сделать метод доступным или false
ReflectionMethod void set Accessible bool $accessible	делает метод доступным
ReflectionMethod string to String	строковое представление объекта reflectionmethod
ReflectionMethod string to String	возвращает строковое представление объекта reflection method
ReflectionObject export $argument	экспортируемый объект reflection
ReflectionObject export $return	установка в true вернет экспортируемое значение в отличие от поведения где этот параметр опущен
ReflectionObject string export	если параметр return установлен в true тогда экспортируемый объект будет возвращен как string иначе будет возвращен null
ReflectionObject string export string $argument bool $return	экспорт
ReflectionParameter void clone	копирующий конструктор
ReflectionParameter construct $parameter	аргумент
ReflectionParameter construct $function	функция аргумент которой требуется отобразить
ReflectionParameter string construct string $function string $parameter	конструктор класса
ReflectionParameter ReflectionClass get Class	объект класса reflectionclass
ReflectionParameter ReflectionClass get Class	получение класса из контроля типа
ReflectionParameter ReflectionClass get Declaring Class	объект класса reflectionclass
ReflectionParameter ReflectionClass get Declaring Class	получение объявляющего класса
ReflectionParameter ReflectionFunctionAbstract get Declaring Function	объект класса reflectionfunction
ReflectionParameter ReflectionFunctionAbstract get Declaring Function	получение объявляющей функции
ReflectionParameter mixed get Default Value	значение по умолчанию аргумента
ReflectionParameter mixed get Default Value	получение значения по умолчанию аргумента
ReflectionParameter string get Name	имя отображенного аргумента
ReflectionParameter string get Name	получение имени аргумента
ReflectionParameter int get Position	позиция аргумента слева направо первый аргумент стоит на позиции #0
ReflectionParameter int get Position	получение позиции аргумента
ReflectionParameter bool is Array	true если в качестве значения ожидается массив array false в противном случае
ReflectionParameter bool is Array	проверяет ожидает ли аргумент массив в качестве значения
ReflectionParameter bool is Default Value Available	true если доступно значение по умолчанию false в противном случае
ReflectionParameter bool is Default Value Available	проверяет доступно ли значение по умолчанию аргумента
ReflectionParameter bool is Passed By Reference	true если аргумент передан по ссылке false в противном случае
ReflectionParameter bool is Passed By Reference	проверяет что аргумент передан по ссылке
ReflectionParameter string to String	преобразование в строку
ReflectionProperty void clone	копирующий конструктор
ReflectionProperty ReflectionClass get Declaring Class	объект класса reflectionclass
ReflectionProperty ReflectionClass get Declaring Class	получение объявляющего класса
ReflectionProperty string get Doc Comment	комментарий
ReflectionProperty string get Doc Comment	получение документируемого комментария
ReflectionProperty int get Modifiers	числовое представление модификаторов
ReflectionProperty int get Modifiers	получение модификаторов
ReflectionProperty string get Name	имя отображенного свойства
ReflectionProperty string get Name	получение имени свойства
ReflectionProperty get Value $object	если свойство не статическое необходимо передать объект из которого требуется это свойство получить
ReflectionProperty mixed get Value	текущее значение свойства
ReflectionProperty mixed get Value object $object	получение значения
ReflectionProperty bool is Default	true если свойство объявлено во время компиляции либо false если оно было создано во время выполнения
ReflectionProperty bool is Default	проверяет является ли значение свойством по умолчанию
ReflectionProperty bool is Private	true если свойство частное false в противном случае
ReflectionProperty bool is Private	проверяет является ли свойство частным private
ReflectionProperty bool is Public	true если свойство общедоступное false в противном случае
ReflectionProperty bool is Public	проверяет является ли свойство общедоступным public
ReflectionProperty set Accessible $accessible	true делает свойство доступным false - закрывает доступ к свойству
ReflectionProperty void set Accessible bool $accessible	задание доступности свойства
ReflectionProperty set Value $object	если свойство нестатическое необходимо передать объект свойство в котором нужно изменить
ReflectionProperty set Value $value	новое значение
ReflectionProperty void set Value object $object mixed $value	задание значения свойству
ReflectionProperty string to String	преобразование в строку
Reflector string to String	представление в виде строки
RegexIterator bool accept	true если значение элемента соответствует регулярному выражению false в противном случае
RegexIterator bool accept	проверка соответствия регулярному выражению
RegexIterator int get Mode	возвращает режим работы
RegexIterator int get Mode	возвращает режим работы
RegexIterator set Mode $mode	режим работы
RegexIterator void set Mode int $mode	установка режима работы
RegexIterator set Preg Flags $preg_flags	флаги настройки регулярного выражения
RegexIterator void set Preg Flags int $preg_flags	задание флагов регулярного выражения
Serializable string serialize	возвращает строковое представление объекта или null
Serializable string serialize	представляет объект в виде строки
Serializable unserialize $serialized	строковое представление объекта
Serializable void unserialize string $serialized	создает объект
SessionHandlerInterface bool close	возвращаемое значение сессионного хранилища обычно true в случае успеха false в случае ошибки
SessionHandlerInterface bool close	закрывает сессию
SessionHandlerInterface destroy $session_id	идентификатор сессии уничтожается
SessionHandlerInterface bool destroy	возвращаемое значение сессионного хранилища обычно true в случае успеха false в случае ошибки
SessionHandlerInterface bool destroy string $session_id	уничтожает сессию
SessionHandlerInterface gc $maxlifetime	сессии которые не обновлялись в течении maxlifetime секунд будут удалены
SessionHandlerInterface bool gc	возвращаемое значение сессионного хранилища обычно true в случае успеха false в случае ошибки
SessionHandlerInterface bool gc string $maxlifetime	очищает старые сессии
SessionHandlerInterface write $session_id	идентификатор сессии
SessionHandlerInterface write $session_data	закодированные данные сессии
SessionHandlerInterface bool write	возвращаемое значение сессионного хранилища обычно true в случае успеха false в случае ошибки
SessionHandlerInterface bool write string $session_id string $session_data	записать данные сессии
SimpleXMLElement add Attribute $namespace	необязательный параметр указывает на пространство имен к которому принадлежит атрибут
SimpleXMLElement add Attribute $name	название добавляемого атрибута
SimpleXMLElement add Attribute $value	значение атрибута
SimpleXMLElement void add Attribute string $name string $value string $namespace	добавляет атрибут к simplexml-элементу
SimpleXMLElement add Child $value	если указано то значение содержимое дочернего элемента
SimpleXMLElement add Child $name	имя добавляемого дочернего элемента
SimpleXMLElement add Child $namespace	если указано то пространство имен к которому принадлежит дочерний элемент
SimpleXMLElement SimpleXMLElement add Child	метод addchild возвращает объект simplexmlelement представляющий добавленного потомка к узлу xml
SimpleXMLElement SimpleXMLElement add Child string $name string $value string $namespace	добавляет дочерний элемент к узлу xml
SimpleXMLElement attributes $ns	не обязательное пространство имен для извлеченных атрибутов
SimpleXMLElement attributes $is_prefix	по умолчанию false
SimpleXMLElement SimpleXMLElement attributes	возвращает итеративный объект simplexmlelement по которому можно перемещаться для перебора всех атрибутов тега
SimpleXMLElement SimpleXMLElement attributes string $ns bool $is_prefix	возвращает атрибуты элемента
SimpleXMLElement children $is_prefix	если is_prefix установлен в true ns будет рассмотрен как префикс
SimpleXMLElement children $ns	не обязательное пространство имен xml
SimpleXMLElement SimpleXMLElement children	возвращает simplexmlelement элемент даже если узел не имеет дочерних элементов
SimpleXMLElement SimpleXMLElement children string $ns bool $is_prefix	поиск дочерних элементов данного узла
SimpleXMLElement int count	возвращает число элементов у текущего элемента
SimpleXMLElement int count	считает количество дочерних элементов у текущего элемента
SimpleXMLElement get Doc Namespaces $from_root	позволяет рекурсивно проверить пространства имен у дочернего узла вместо корневого узла xml документа
SimpleXMLElement get Doc Namespaces $recursive	если указано то возвращает все объявленные пространства имен у родительского узла и его дочерних элементов
SimpleXMLElement array get Doc Namespaces	метод getdocnamespaces возвращает массив array с названиями пространств имен и связанными с ними uri
SimpleXMLElement array get Doc Namespaces bool $recursive bool $from_root	возвращает объявленное пространство имен в документе
SimpleXMLElement string get Name	метод getname возвращает имя тега xml в виде строки string на который ссылается simplexmlelement объект
SimpleXMLElement string get Name	получение имени xml элемента
SimpleXMLElement get Namespaces $recursive	если указано то возвращает все используемые пространства имен у родительского узла и его дочерних элементов
SimpleXMLElement array get Namespaces	метод getnamespaces возвращает массив array с названиями пространств имен и связанными с ними uri
SimpleXMLElement array get Namespaces bool $recursive	получение пространств имен используемых в документе
SimpleXMLElement xpath $path	путь xpath
SimpleXMLElement array xpath	возвращает массив array объектов simplexmlelement или false в случае ошибки
SimpleXMLElement array xpath string $path	запускает xpath запрос к xml данным
SimpleXMLIterator SimpleXMLIterator get Children	возвращает объект simplexmliterator содержащий вложенные элементы текущего элемента
SimpleXMLIterator SimpleXMLIterator get Children	возвращает вложенные элементы текущего элемента
SimpleXMLIterator mixed key	возвращает имя xml-тега элемента на который ссылается текущий объект simplexmliterator или false
SimpleXMLIterator mixed key	возвращает текущий ключ
SimpleXMLIterator void rewind	возвращает итератор к первому элементу
SimpleXMLIterator bool valid	возвращает true если текущий элемент допустим; в противном случае false
SimpleXMLIterator bool valid	проверяет является ли текущий элемент допустимым
SoapClient array get Functions	массив array прототипов soap функций c описанием типа возвращаемого значения имени функции и параметров с типами
SoapClient array get Functions	возвращает список доступных soap функций
SoapClient string get Last Request	последний soap-запрос в виде строки с xml
SoapClient string get Last Request	возвращает последний soap-запрос
SoapClient string get Last Response	последний soap-ответ в виде строки с xml
SoapClient string get Last Response	возвращает последний soap-ответ
SoapClient array get Types	массив array soap-типов с подробным описанием всех структур и типов
SoapClient array get Types	возвращает список soap-типов
SoapClient set Cookie $value	значение cookie
SoapClient set Cookie $name	имя cookie
SoapClient void set Cookie string $name string $value	устанавливает cookie
SoapClient set Soap Headers $soapheaders	устанавливаемые заголовки
SoapClient bool set Soap Headers	возвращает true в случае успешного завершения или false в случае возникновения ошибки
SoapClient bool set Soap Headers mixed $soapheaders	устанавливает soap-заголовки для последующих вызовов
SoapClient Soap Client $wsdl	uri файла wsdl или null если работа происходит в режиме не-wsdl
SoapClient Soap Client $options	массив настроек
SoapClient mixed Soap Client mixed $wsdl array $options	конструктор soapclient
SoapHeader string construct string $namespace string $name mixed $data bool $mustunderstand string $actor	soapheader constructor
SoapServer mixed construct mixed $wsdl array $options	soapserver constructor
SoapServer set Class $args	необязательные параметры которые будут переданы в конструктор класса в процессе создания объекта
SoapServer set Class $class_name	имя передаваемого класса
SoapServer void set Class string $class_name mixed $args	устанавливает класс который будет обрабатывать soap-запросы
SoapVar string construct string $data string $encoding string $type_name string $type_namespace string $node_name string $node_namespace	soapvar constructor
SolrClientException array get Internal Info	возвращает массив содержащий внутреннюю информацию о том где была вызвана ошибка
SolrClientException array get Internal Info	возвращает внутреннюю информацию о том где было вызвано исключение
SolrException array get Internal Info	возвращает массив содержащий внутреннюю информацию о том где была вызвана ошибка
SolrException array get Internal Info	возвращает внутреннюю информацию о том где было вызвано исключение
SphinxClient add Query $index	название индекса или названия
SphinxClient add Query $query	строка запроса
SphinxClient int add Query	возвращает индекс массива результатов который будет возвращен с помощью sphinxclient::runqueries или false в случае ошибки
SphinxClient int add Query string $query string $index string $comment	добавление запроса к очереди запросов
SphinxClient build Excerpts $words	ключевые слова которые необходимо подсветить
SphinxClient build Excerpts $docs	массив строк с содержимым документов
SphinxClient build Excerpts $opts	ассоциативный массив с дополнительными параметрами подсветки см
SphinxClient build Excerpts $index	название индекса
SphinxClient array build Excerpts	при успехе возвращает массив фрагментов
SphinxClient array build Excerpts array $docs string $index string $words array $opts	построение текстовых фрагментов
SphinxClient build Keywords $hits	бинарный флаг включающий / выключающий генерацию статистики ключевых слов
SphinxClient build Keywords $query	запрос для извлечения ключевых слов
SphinxClient build Keywords $index	индекс для получения настроек tokenizer лексера и частотной статистики ключевых слов
SphinxClient array build Keywords	возвращает массив ассоциативных массивов с информацией по каждому ключевому слову
SphinxClient array build Keywords string $query string $index bool $hits	извлечение ключевых слов из запроса
SphinxClient - construct	создание нового объекта sphinxclient
SphinxClient escape String $string	строка для экранирования
SphinxClient string escape String	возвращает экранированную строку
SphinxClient string escape String string $string	экранирование спецсимволов
SphinxClient bool open	возвращает true в случае успешного завершения или false в случае возникновения ошибки
SphinxClient bool open	создание постоянного подключения к серверу
SphinxClient void reset Filters	обнуление всех фильтров
SphinxClient array run Queries	возвращает false в случае неудачи или массив с набором результатов в случае успеха
SphinxClient array run Queries	выполнение набора поисковых запросов
SphinxClient set Field Weights $weights	ассоциативный массив названий полей и их весовых коэффициентов
SphinxClient bool set Field Weights	возвращает true в случае успешного завершения или false в случае возникновения ошибки
SphinxClient bool set Field Weights array $weights	установка весовых коэффициентов полей
SphinxClient set Filter $exclude	если true то попадающие под фильтр документы исключаются из списка результатов
SphinxClient set Filter $values	обычный массив значений типа integer
SphinxClient set Filter $attribute	название атрибута
SphinxClient bool set Filter	возвращает true в случае успешного завершения или false в случае возникновения ошибки
SphinxClient bool set Filter string $attribute array $values bool $exclude	добавление фильтра по типу поля integer
SphinxClient set Filter Float Range $exclude	если установлено в true то попадающие под фильтр документы будут исключены из списка результатов
SphinxClient set Filter Float Range $max	максимальное значение
SphinxClient set Filter Float Range $min	минимальное значение
SphinxClient set Filter Float Range $attribute	название атрибута
SphinxClient bool set Filter Float Range	возвращает true в случае успешного завершения или false в случае возникновения ошибки
SphinxClient bool set Filter Float Range string $attribute float $min float $max bool $exclude	добавление фильтра по диапазону значений для поля типа float
SphinxClient set Geo Anchor $longitude	долгота якоря в радианах
SphinxClient set Geo Anchor $latitude	широта якоря в радианах
SphinxClient set Geo Anchor $attrlong	название атрибута хранящего долготу
SphinxClient set Geo Anchor $attrlat	название атрибута хранящего широту
SphinxClient bool set Geo Anchor	возвращает true в случае успешного завершения или false в случае возникновения ошибки
SphinxClient bool set Geo Anchor string $attrlat string $attrlong float $latitude float $longitude	установка опорной точки для расчета географической удаленности
SphinxClient set Group Distinct $attribute	строка содержащая атрибут по которому происходит группировка
SphinxClient bool set Group Distinct	возвращает true в случае успешного завершения или false в случае возникновения ошибки
SphinxClient bool set Group Distinct string $attribute	установка названия атрибута для расчета количества уникальных значений при группировке
SphinxClient set IDRange $max	максимальное значение id
SphinxClient set IDRange $min	минимальное значение id
SphinxClient bool set IDRange	возвращает true в случае успешного завершения или false в случае возникновения ошибки
SphinxClient bool set IDRange int $min int $max	установка диапазона значений допустимых id документов
SphinxClient set Index Weights $weights	ассоциативный массив связывающий названия индексов string с их весами integer
SphinxClient bool set Index Weights	возвращает true в случае успешного завершения или false в случае возникновения ошибки
SphinxClient bool set Index Weights array $weights	установка весовых коэффициентов индексов
SphinxClient set Limits $limit	количество необходимых к получению результатов
SphinxClient set Limits $offset	смещение набора результатов
SphinxClient set Limits $cutoff	используется для повышенного контроля за производительностью
SphinxClient set Limits $max_matches	контролирует количество совпадений которые searchd будет хранить в оперативной памяти в процессе поиска
SphinxClient bool set Limits	возвращает true в случае успешного завершения или false в случае возникновения ошибки
SphinxClient bool set Limits int $offset int $limit int $max_matches int $cutoff	установка смещения и предельного числа значений для набора результатов
SphinxClient set Match Mode $mode	режим совпадения
SphinxClient bool set Match Mode	возвращает true в случае успешного завершения или false в случае возникновения ошибки
SphinxClient bool set Match Mode int $mode	установка режима совпадения при полнотекстовом поиске
SphinxClient set Ranking Mode $ranker	режим ранжирования
SphinxClient bool set Ranking Mode	возвращает true в случае успешного завершения или false в случае возникновения ошибки
SphinxClient bool set Ranking Mode int $ranker	установка режима ранжирования
SphinxClient set Retries $delay	задержка между попытками в миллисекундах
SphinxClient set Retries $count	количество повторных попыток
SphinxClient bool set Retries	возвращает true в случае успешного завершения или false в случае возникновения ошибки
SphinxClient bool set Retries int $count int $delay	установка количества повторных попыток и задержки между ними
SphinxClient set Select $clause	условия схожие с языком sql
SphinxClient bool set Select	возвращает true в случае успешного завершения или false в случае возникновения ошибки
SphinxClient bool set Select string $clause	установка условия выборки
SphinxClient set Sort Mode $mode	режим сортировки
SphinxClient bool set Sort Mode	возвращает true в случае успешного завершения или false в случае возникновения ошибки
SphinxClient bool set Sort Mode int $mode string $sortby	установка режима сортировки результатов
SphinxClient array status	возвращает ассоциативный массив статистики поискового сервера
SphinxClient array status	запрос статуса searchd
SphinxClient update Attributes $values	ассоциативный массив содержащий id документов в качестве ключей и массив значений атрибутов в качестве значений
SphinxClient update Attributes $index	название индекса или индексов для обновления
SphinxClient update Attributes $attributes	массив названий атрибутов которые будут обновлены
SphinxClient int update Attributes	возвращает количество измененных документов 0 или более в случае успеха или false в случае неудачи
SphinxClient int update Attributes string $index array $attributes array $values bool $mva	обновление атрибутов документа
SplDoublyLinkedList mixed key	индекс текущего узла
SplDoublyLinkedList mixed key	возвращает индекс текущего узла
SplDoublyLinkedList void next	перемещает итератор к следующему элементу
SplDoublyLinkedList offset Set $index	индекс
SplDoublyLinkedList offset Set $newval	новое значение для индекса index
SplDoublyLinkedList void offset Set mixed $index mixed $newval	устанавливает значение по заданному индексу $index в $newval
SplDoublyLinkedList void prev	перемещает итератор к предыдущему элементу
SplDoublyLinkedList push $value	значения для добавления
SplDoublyLinkedList void push mixed $value	помещает элемент в конец двусвязного списка
SplDoublyLinkedList void rewind	возвращает итератор в начало
SplDoublyLinkedList string serialize	сериализованная строка
SplDoublyLinkedList string serialize	сериализует хранилище
SplDoublyLinkedList unserialize $serialized	сериализованная строка
SplDoublyLinkedList void unserialize string $serialized	десериализует хранилище
SplDoublyLinkedList bool valid	возвращает true если двусвязный список содержит узлы false в противном случае
SplDoublyLinkedList bool valid	проверяет содержит ли узлы двусвязный список
SplFileInfo construct $file_name	путь к файлу
SplFileInfo string construct string $file_name	создает новый объект splfileinfo
SplFileInfo int get ATime	возвращает время последнего доступа к файлу
SplFileInfo int get ATime	получает время последнего обращения к файлу
SplFileInfo string get Filename	имя файла
SplFileInfo string get Filename	получает имя файла
SplFileInfo int get Group	id группы в числовом формате
SplFileInfo int get Group	получает группу файла
SplFileInfo string get Link Target	возвращает целевой путь по ссылке файловой системы
SplFileInfo string get Link Target	получение пути по ссылке
SplFileInfo int get MTime	возвращает время последнего изменения файла в формате unix timestamp
SplFileInfo int get MTime	получает время последнего изменения
SplFileInfo get Path Info $class_name	имя используемого объекта splfileinfo путь которого требуется получить
SplFileInfo SplFileInfo get Path Info	возвращает объект класса splfileinfo представляющий путь к родительской директории файла
SplFileInfo SplFileInfo get Path Info string $class_name	получение объекта splfileinfo для заданного пути
SplFileInfo string get Pathname	путь к файлу
SplFileInfo string get Pathname	определение пути к файлу
SplFileInfo int get Perms	возвращает список разрешений для файла
SplFileInfo int get Perms	получает список разрешений для файла
SplFileInfo string get Real Path	возвращает путь к файлу
SplFileInfo string get Real Path	определяет абсолютный путь к файлу
SplFileInfo int get Size	размер файла в байтах
SplFileInfo int get Size	получает размер файла
SplFileInfo string get Type	строка string представляющая тип элемента
SplFileInfo string get Type	получает тип файла
SplFileInfo bool is Dir	возвращает true если каталог; в противном случае - false
SplFileInfo bool is Dir	сообщает является ли файл каталогом
SplFileInfo bool is Executable	возвращает true если файл является исполняемым; иначе - false
SplFileInfo bool is Executable	сообщает является ли файл исполняемым
SplFileInfo bool is File	возвращает true если файл существует и является обычным файлом не ссылкой иначе - false
SplFileInfo bool is File	сообщает ссылается ли объект на обычный файл
SplFileInfo bool is Link	возвращает true если файл является ссылкой; в противном случае - false
SplFileInfo bool is Link	сообщает является ли файл ссылкой
SplFileInfo bool is Readable	возвращает true если файл доступен для чтения; в противном случае - false
SplFileInfo bool is Readable	сообщает является ли файл доступным для чтения
SplFileInfo open File $use_include_path	если установлено в true имя файла также ищется в include_path
SplFileInfo open File $context	для описания контекстов обратитесь к следующему разделу руководства: контекст
SplFileInfo open File $open_mode	режим открытия файла
SplFileInfo SplFileObject open File	открытый файл как splfileobject object
SplFileInfo SplFileObject open File string $open_mode bool $use_include_path resource $context	получает объект splfileobject для файла
SplFileInfo set File Class $class_name	имя класса для метода splfileinfo::openfile()
SplFileInfo void set File Class string $class_name	задает имя класса который будет использоваться методом splfileinfo::openfile
SplFileInfo set Info Class $class_name	имя класса используемого при вызове splfileinfo::getfileinfo() и splfileinfo::getpathinfo()
SplFileInfo void set Info Class string $class_name	задает имя класса объекты которого будут создаваться методами splfileinfo::getfileinfo и splfileinfo::getpathinfo
SplFileObject construct $filename	файл который требуется прочитать
SplFileObject construct $use_include_path	требуется ли просматривать include_path во время поиска файла filename
SplFileObject construct $context	допустимый ресурс контекста созданный функцией stream_context_create()
SplFileObject construct $open_mode	режим работы с файлом
SplFileObject string construct string $filename string $open_mode bool $use_include_path resource $context	конструктор класса splfileobject
SplFileObject bool eof	возвращает true если конец файла был достигнут; false - в противном случае
SplFileObject bool eof	проверяет достигнут ли конец файла
SplFileObject bool fflush	возвращает true в случае успешного завершения или false в случае возникновения ошибки
SplFileObject bool fflush	сбрасывает буфер вывода в файл
SplFileObject fgetcsv $delimiter	разделитель полей один символ
SplFileObject fgetcsv $enclosure	символ обрамления полей один символ
SplFileObject fgetcsv $escape	экранирующий символ один символ
SplFileObject array fgetcsv	возвращает массив содержащий данные прочитанной строки или false в случае ошибки
SplFileObject array fgetcsv string $delimiter string $enclosure string $escape	получение строки файла и ее разбор в соответствии с csv разметкой
SplFileObject string fgets	возвращает строку содержащую следующую строку из файла или false в случае ошибки
SplFileObject string fgets	читает строку из файла
SplFileObject fgetss $allowable_tags	необязательный параметр
SplFileObject string fgetss	возвращает строку из файла очищенную от html и php кода либо false в случае ошибки
SplFileObject string fgetss string $allowable_tags	получение строки из файла с очисткой от html тэгов
SplFileObject int fpassthru	возвращает количество символов которые были прочитаны из файла с описателем handle и переданы на вывод
SplFileObject int fpassthru	выводит все оставшееся содержимое файла в выходной поток
SplFileObject fputcsv $delimiter	необязательный параметр delimiter устанавливает разделитель для полей допускается только один символ
SplFileObject fputcsv $enclosure	необязательный параметр enclosure устанавливает экранирующий символ для полей enclosure допускается только один символ
SplFileObject fputcsv $fields	массив значений
SplFileObject int fputcsv	возвращает длину записанной строки или false в случае возникновения ошибки
SplFileObject int fputcsv array $fields string $delimiter string $enclosure	записывает массив с полями в виде строки csv
SplFileObject fwrite $str	строка которая будет записана в файл
SplFileObject fwrite $length	если задан аргумент length запись остановится после того как length байт будут записаны или будет достигнут конец строки string в зависимости от того что случится раньше
SplFileObject int fwrite	возвращает количество записанных байт или null в случае ошибки
SplFileObject int fwrite string $str int $length	запись в файл
SplFileObject void get Children	метод-заглушка
SplFileObject int get Flags	возвращает число типа integer представляющее набор флагов
SplFileObject int get Flags	получает флаги настройки объекта splfileobject
SplFileObject int get Max Line Len	возвращает максимальную длину строки если она была установлена с помощью splfileobject::setmaxlinelen() по умолчанию 0
SplFileObject int get Max Line Len	получает максимальную длину строки
SplFileObject bool has Children	возвращает false
SplFileObject bool has Children	класс splfileobject не имеет наследников
SplFileObject int key	возвращает номер текущей строки файла
SplFileObject int key	получение номера строки
SplFileObject void rewind	перевод файлового указателя в начало файла
SplFileObject seek $line_pos	номер строки начиная с 0 на которую требуется перейти
SplFileObject void seek int $line_pos	перевод файлового указателя на заданную строку
SplFileObject set Flags $flags	битовая маска флагов для установки
SplFileObject void set Flags int $flags	устанавливает флаги для splfileobject
SplFileObject bool valid	возвращает true если eof не достигнут false - в противном случае
SplFileObject bool valid	проверяет достигнут ли конец файла eof
SplFixedArray int count	возвращает размер массива
SplFixedArray int count	возвращает размер массива
SplFixedArray mixed current	текущий элемент массива
SplFixedArray mixed current	возвращает текущий элемент массива
SplFixedArray from Array $save_indexes	по возможности сохранить численные индексы заданные в оригинальном массиве
SplFixedArray from Array $array	массив который следует импортировать
SplFixedArray SplFixedArray from Array	возвращает объект класса splfixedarray содержащий данные из импортированного массива
SplFixedArray SplFixedArray from Array array $array bool $save_indexes	импортирует php-массив в объект класса splfixedarray
SplFixedArray offset Exists $index	индекс который необходимо проверить
SplFixedArray bool offset Exists	true если требуемый index существует иначе false
SplFixedArray bool offset Exists int $index	возвращает факт наличия указанного индекса массива
SplFixedArray offset Set $index	индекс по которому устанавливается значение
SplFixedArray offset Set $newval	новое значение для индекса index
SplFixedArray void offset Set int $index mixed $newval	устанавливает новое значение по заданному индексу
SplFixedArray offset Unset $index	индекс по которому удаляется значение
SplFixedArray void offset Unset int $index	удаляет значение по индексу $index
SplFixedArray void rewind	выставляет итератор массива в начало
SplFixedArray set Size $size	новое значение размера массива
SplFixedArray int set Size int $size	изменяет размер массива
SplHeap compare $value1	значение первого сравниваемого узла
SplHeap compare $value2	значение второго сравниваемого узла
SplHeap int compare	метод должен возвращать положительное значение когда value1 больше value2 0 если они равны и отрицательное в остальных случаях
SplHeap int compare mixed $value1 mixed $value2	сравнивает элементы чтобы во время сортировки корректно разместить их в куче
SplHeap mixed current	текущее значение узла
SplHeap mixed current	возвращает текущий узел на который указывает итератор
SplHeap insert $value	значение которое требуется вставить
SplHeap void insert mixed $value	вставляет элемент в кучу и пересортирует ее
SplHeap mixed key	индекс текущего узла
SplHeap mixed key	возвращает индекс текущего узла
SplHeap void next	переход к следующему узлу
SplHeap void rewind	перевод итератора на начало
SplMaxHeap compare $value1	значение первого сравниваемого узла
SplMaxHeap compare $value2	значение второго сравниваемого узла
SplMaxHeap int compare	метод возвращает положительное значение когда value1 больше value2 0 если они равны и отрицательное в остальных случаях
SplMaxHeap int compare mixed $value1 mixed $value2	сравнивает элементы чтобы во время сортировки корректно разместить их в куче
SplMinHeap compare $value1	значение первого сравниваемого узла
SplMinHeap compare $value2	значение второго сравниваемого узла
SplMinHeap int compare	метод возвращает положительное значение когда value1 больше value2 0 если они равны и отрицательное в остальных случаях
SplMinHeap int compare mixed $value1 mixed $value2	сравнивает элементы чтобы во время сортировки корректно разместить их в куче
SplObjectStorage add All $storage	контейнер объектов из которого требуется импортировать данные
SplObjectStorage void add All SplObjectStorage $storage	добавляет все объекты из другого контейнера
SplObjectStorage attach $object	добавляемый объект object
SplObjectStorage attach $data	данные с которыми требуется ассоциировать объект object
SplObjectStorage void attach object $object mixed $data	добавляет объект в контейнер
SplObjectStorage contains $object	искомый объект object
SplObjectStorage bool contains	возвращает true если object находится в контейнере и false в противном случае
SplObjectStorage bool contains object $object	проверяет содержит ли контейнер заданный объект
SplObjectStorage int count	количество объектов в контейнере
SplObjectStorage int count	возвращает количество объектов в контейнере
SplObjectStorage object current	объект object на который указывает итератор контейнера
SplObjectStorage object current	возвращает текущий объект
SplObjectStorage mixed get Info	данные ассоциированные с объектом
SplObjectStorage mixed get Info	возвращает данные ассоциированные с текущим объектом
SplObjectStorage int key	индекс текущего положения итератора
SplObjectStorage int key	возвращает индекс текущего положения итератора
SplObjectStorage offset Unset $object	удаляемый объект object
SplObjectStorage void offset Unset object $object	удаляет объект из контейнера
SplObjectStorage remove All $storage	контейнер содержащий элементы которые требуется удалить
SplObjectStorage void remove All SplObjectStorage $storage	удаляет из текущего контейнера объекты которые есть в другом контейнере
SplObjectStorage remove All Except $storage	контейнер содержащий элементы которые должны остаться в текущем контейнере
SplObjectStorage void remove All Except SplObjectStorage $storage	удаляет из текущего контейнера все объекты которых нет в другом контейнере
SplObjectStorage void rewind	переводит итератор на первый элемент контейнера
SplObjectStorage string serialize	строковое представление контейнера
SplObjectStorage string serialize	сериализует контейнер
SplObjectStorage unserialize $serialized	сериализованное представление контейнера
SplObjectStorage void unserialize string $serialized	восстанавливает сериализованый контейнер из строки
SplObjectStorage bool valid	возвращает true если текущий объект допустим и false в противном случае
SplObjectStorage bool valid	определяет допустимо ли текущее значение итератора
SplPriorityQueue insert $priority	приоритет значения
SplPriorityQueue insert $value	добавляемое значение
SplPriorityQueue void insert mixed $value mixed $priority	добавляет элемент в очередь и пересортирует ее
SplPriorityQueue void next	переход к следующему узлу
SplPriorityQueue void rewind	переводит итератор на начало очереди
SplQueue mixed dequeue	значение удаленного из очереди элемента
SplQueue mixed dequeue	удаляет элемент из очереди
SplQueue enqueue $value	значение для постановки в очередь
SplQueue void enqueue mixed $value	добавляет элемент в очередь
SplSubject attach $observer	объект класса splobserver для присоединения
SplSubject void attach SplObserver $observer	присоединяет наблюдателя объект класса splobserver
SplSubject detach $observer	объект класса splobserver для отсоединения
SplSubject void detach SplObserver $observer	отсоединяет наблюдателя
SplSubject void notify	посылает уведомление наблюдателю
SQLite3 prepare $query	sql-запрос на подготовку
SQLite3 SQLite3Stmt prepare	возвращает объект sqlite3stmt в случае успешного завершения или false в случае возникновения ошибки
SQLite3 SQLite3Stmt prepare string $query	подготавливает sql-запрос для выполнения
streamWrapper - destruct	уничтожает существующую обертку потока
streamWrapper bool dir closedir	возвращает true в случае успешного завершения или false в случае возникновения ошибки
streamWrapper bool dir closedir	обработчик закрытия директории
streamWrapper string dir readdir	должен возвращать строку string представляющую имя следующего файла либо false если следующего файла нет
streamWrapper string dir readdir	обработчик чтения содержимого директории
streamWrapper bool dir rewinddir	возвращает true в случае успешного завершения или false в случае возникновения ошибки
streamWrapper bool dir rewinddir	обработчик перемещения на начало директории
streamWrapper mkdir $path	создаваемая директория
streamWrapper mkdir $options	битовая маска составленная из констант вроде stream_mkdir_recursive
streamWrapper mkdir $mode	значение которое будет передано в mkdir()
streamWrapper bool mkdir	возвращает true в случае успешного завершения или false в случае возникновения ошибки
streamWrapper bool mkdir string $path int $mode int $options	создание директории
streamWrapper rmdir $path	url удаляемой директории
streamWrapper rmdir $options	битовая маска составленная из констант вроде stream_mkdir_recursive
streamWrapper bool rmdir	возвращает true в случае успешного завершения или false в случае возникновения ошибки
streamWrapper bool rmdir string $path int $options	удаляет директорию
streamWrapper void stream close	закрывает ресурс
streamWrapper bool stream flush	должен возвращать true если кэшированные данные успешно сохранены или их вообще нет либо false если данные не могут быть сохранены
streamWrapper bool stream flush	сохранение данных вывода
streamWrapper stream lock $operation	operation может принимать одно из следующих значений: lock_sh установить совместную блокировку для чтения
streamWrapper bool stream lock	возвращает true в случае успешного завершения или false в случае возникновения ошибки
streamWrapper bool stream lock int $operation	advisory file locking
streamWrapper stream metadata $value	если option принимает значение stream_meta_touch : массив array состоящий из двух аргументов функции touch()
streamWrapper stream metadata $path	путь к файлу или url для задания метаданных
streamWrapper stream metadata $option	одно из значений: stream_meta_touch метод вызывается в результате вызова touch() stream_meta_owner_name метод вызывается в результате вызова chown() со строковым аргументом stream_meta_owner метод вызывается в результате вызова chown() stream_meta_group_name метод вызывается в результате вызова chgrp() stream_meta_group метод вызывается в результате вызова chgrp() stream_meta_access метод вызывается в результате вызова chmod()
streamWrapper bool stream metadata	возвращает true в случае успешного завершения или false в случае возникновения ошибки
streamWrapper bool stream metadata string $path int $option mixed $value	изменяет настройки потока
streamWrapper array stream stat	см
streamWrapper array stream stat	получение информации о файловом ресурсе
streamWrapper int stream tell	должен возвращать текущую позицию потока
streamWrapper int stream tell	определение текущей позиции потока
streamWrapper stream truncate $new_size	новый размер
streamWrapper bool stream truncate	возвращает true в случае успешного завершения или false в случае возникновения ошибки
streamWrapper bool stream truncate int $new_size	усечение потока
streamWrapper stream write $data	эти данные должны передаваться потоку уровнем ниже
streamWrapper int stream write	должен возвращать количество успешно записанных байт или 0 если ничего записать не удалось
streamWrapper int stream write string $data	запись в поток
streamWrapper unlink $path	url удаляемого файла
streamWrapper bool unlink	возвращает true в случае успешного завершения или false в случае возникновения ошибки
streamWrapper bool unlink string $path	удаление файла
SWFVideoStream int get Num Frames	возвращает количество кадров как целое число
SWFVideoStream int get Num Frames	возвращает количество кадров в видео-файле
SWFVideoStream set Dimension $y	высота в пикселях
SWFVideoStream set Dimension $x	ширина в пикселях
SWFVideoStream void set Dimension int $x int $y	устанавливает размер видео
tidy construct $encoding	параметр encoding устанавливает кодировку для входных / выходных документов
tidy construct $use_include_path	поиск файла в include_path
tidy construct $config	настройки config могут быть заданы в виде массива или строки
tidy construct $filename	если задан параметр filename то эта функция прочитает файл и инициализирует объект с этим файлом действуя как функция tidy_parse_file()
tidy string construct	возвращает новый экземпляр tidy
tidy string construct string $filename mixed $config string $encoding bool $use_include_path	создает новый tidy-объект
tidyNode tidyNode get Parent	возвращает объект tidynode если узел имеет родителя в противном случае null
tidyNode tidyNode get Parent	возвращает родительский узел текущего узла
tidyNode bool has Children	возвращает true если у узла есть потомки false - в противном случае
tidyNode bool has Children	проверяет существование потомков у узла
tidyNode bool has Siblings	возвращает true если существуют соседние узлы false - в противном случае
tidyNode bool has Siblings	проверяет существование соседних узлов
tidyNode bool is Asp	возвращает true если узел является asp false - в противном случае
tidyNode bool is Asp	проверяет текущий узел на соответствие asp
tidyNode bool is Jste	возвращает true если узел является jste false - в противном случае
tidyNode bool is Jste	проверяет текущий узел на соответствие jste
tidyNode bool is Php	возвращает true если узел является php-кодом false - в противном случае
tidyNode bool is Php	проверяет является ли текущий узел php-кодом
tidyNode bool is Text	возвращает true если узел представляет собой текст false - в противном случае
tidyNode bool is Text	проверяет является ли текущий узел обычным текстом не разметкой
XMLReader bool close	возвращает true в случае успешного завершения или false в случае возникновения ошибки
XMLReader bool close	закрыть ввод xmlreader
XMLReader get Attribute $name	имя атрибута
XMLReader string get Attribute	значение атрибута или null если атрибут с заданным параметром name не найден или нет позиции элемента
XMLReader string get Attribute string $name	получить значение атрибута с определённым именем
XMLReader get Attribute No $index	позиция атрибута
XMLReader string get Attribute No	значение атрибута или пустая строка до php 5
XMLReader string get Attribute No int $index	получить значение атрибута по индексу
XMLReader bool is Valid	возвращает true в случае успешного завершения или false в случае возникновения ошибки
XMLReader bool is Valid	показать является ли разбираемый документ синтаксически правильным
XMLReader lookup Namespace $prefix	строка содержащая префикс
XMLReader bool lookup Namespace	возвращает true в случае успешного завершения или false в случае возникновения ошибки
XMLReader bool lookup Namespace string $prefix	найти пространство имён для префикса
XMLReader move To Attribute $name	имя атрибута
XMLReader bool move To Attribute	возвращает true в случае успешного завершения или false в случае возникновения ошибки
XMLReader bool move To Attribute string $name	переместить курсор к атрибуту с заданным именем
XMLReader move To Attribute No $index	позиция атрибута
XMLReader bool move To Attribute No	возвращает true в случае успешного завершения или false в случае возникновения ошибки
XMLReader bool move To Attribute No int $index	переместить курсор на атрибут по индексу
XMLReader bool move To Element	возвращает true в случае успеха и false в случае неудачи или если невозможно выполнить позиционирование курсора на атрибуте когда этот метод вызывается
XMLReader bool move To Element	позиционировать курсор на родительском элементе текущего атрибута
XMLReader bool move To First Attribute	возвращает true в случае успешного завершения или false в случае возникновения ошибки
XMLReader bool move To First Attribute	переместить позицию курсора на первый атрибут
XMLReader bool move To Next Attribute	возвращает true в случае успешного завершения или false в случае возникновения ошибки
XMLReader bool move To Next Attribute	переместить позицию курсора на следующий атрибут
XMLReader string read Outer XML	возвращает содержимое текущего узла включая сам узел как строку
XMLReader string read Outer XML	получить xml из текущего узла включая сам узел
XMLReader string read String	возвращает содержимое текущего узла в виде строки
XMLReader string read String	прочитать содержимое текущего узла как строку
XMLReader set Parser Property $property	одна из констант опций парсера
XMLReader set Parser Property $value	если установлено в true то опция будет включена в противном случае опция будет выключена
XMLReader bool set Parser Property	возвращает true в случае успешного завершения или false в случае возникновения ошибки
XMLReader bool set Parser Property int $property bool $value	устанавливает опцию парсера
XMLReader set Relax NGSchema $filename	имя файла или uri указывающий на схему relaxng
XMLReader bool set Relax NGSchema	возвращает true в случае успешного завершения или false в случае возникновения ошибки
XMLReader bool set Relax NGSchema string $filename	установить имя файла или uri для схемы relaxng
XMLReader set Relax NGSchema Source $source	строка содержащая схему relaxng
XMLReader bool set Relax NGSchema Source	возвращает true в случае успешного завершения или false в случае возникновения ошибки
XMLReader bool set Relax NGSchema Source string $source	устанавливает данные содержащие схему relaxng
XMLReader set Schema $filename	имя файла xsd схемы
XMLReader bool set Schema	возвращает true в случае успешного завершения или false в случае возникновения ошибки
XMLReader bool set Schema string $filename	проверить документ используя xsd
XMLReader xml $options	битовая маска констант libxml_*
XMLReader xml $encoding	кодировка документа или null
XMLReader xml $source	строка содержащая xml для разбора
XMLReader bool xml	возвращает true в случае успешного завершения или false в случае возникновения ошибки
XMLReader bool xml string $source string $encoding int $options	установить данные содержащие xml для разбора
XSLTProcessor get Parameter $namespaceURI	пространство имён uri параметра xslt
XSLTProcessor get Parameter $localName	локальное имя параметра xslt
XSLTProcessor string get Parameter	значение параметра в виде строки или false если оно не установлено
XSLTProcessor string get Parameter string $namespaceURI string $localName	возвращает значение параметра
XSLTProcessor bool has Exslt Support	возвращает true в случае успешного завершения или false в случае возникновения ошибки
XSLTProcessor bool has Exslt Support	определяет имеет ли php поддержку exslt
XSLTProcessor import Stylesheet $stylesheet	импортируемая таблица стилей в виде объекта domdocument или simplexmlelement
XSLTProcessor bool import Stylesheet	возвращает true в случае успешного завершения или false в случае возникновения ошибки
XSLTProcessor bool import Stylesheet object $stylesheet	импортирует таблицу стилей
XSLTProcessor set Profiling $filename	путь к файлу в который записывается профилирующая информация
XSLTProcessor bool set Profiling	возвращает true в случае успешного завершения или false в случае возникновения ошибки
XSLTProcessor bool set Profiling string $filename	устанавливает файл для профилирования
XSLTProcessor transform To URI $doc	документ для преобразования
XSLTProcessor transform To URI $uri	целевой uri для преобразования
XSLTProcessor int transform To URI	возвращает количество записанных байтов либо false при ошибке
XSLTProcessor int transform To URI DOMDocument $doc string $uri	преобразует в uri
XSLTProcessor transform To XML $doc	объект класса domdocument или simplexmlelement для преобразования
XSLTProcessor string transform To XML	результат преобразования или false при ошибке
XSLTProcessor string transform To XML object $doc	преобразует в xml
Yaf_Dispatcher auto Render $flag	bool замечание : since 2
Yaf_Dispatcher Yaf_Dispatcher auto Render bool $flag	switch on / off autorendering
Yaf_Dispatcher bool disable View	disable view rendering
Yaf_View_Simple get $name	the assigned variable name if this is empty all assigned variables will be returned
Yaf_View_Simple void get string $name	retrieve assigned variable
ZipArchive add From String $localname	локальное имя файла для создания
ZipArchive add From String $contents	содержимое для создания файла
ZipArchive bool add From String	возвращает true в случае успешного завершения или false в случае возникновения ошибки
ZipArchive bool add From String string $localname string $contents	добавляет файл в zip-архив используя его содержимое
ZipArchive bool close	возвращает true в случае успешного завершения или false в случае возникновения ошибки
ZipArchive bool close	закрывает активный архив открытый или вновь созданный
ZipArchive delete Index $index	индекс элемента для удаления
ZipArchive bool delete Index	возвращает true в случае успешного завершения или false в случае возникновения ошибки
ZipArchive bool delete Index int $index	удаляет элемент в архиве используя его индекс
ZipArchive delete Name $name	имя элемента для удаления
ZipArchive bool delete Name	возвращает true в случае успешного завершения или false в случае возникновения ошибки
ZipArchive bool delete Name string $name	удаляет элемент в архиве используя его имя
ZipArchive extract To $entries	элементы для извлечения
ZipArchive extract To $destination	место назначение куда извлекать файлы
ZipArchive bool extract To	возвращает true в случае успешного завершения или false в случае возникновения ошибки
ZipArchive bool extract To string $destination mixed $entries	извлекает содержимое архива
ZipArchive get Comment Index $flags	если флаг установлен в ziparchive::fl_unchanged возвращается оригинальный неизмененный комментарий
ZipArchive get Comment Index $index	индекс записи
ZipArchive string get Comment Index	возвращает комментарий при успехе или false в случае возникновения ошибки
ZipArchive string get Comment Index int $index int $flags	возвращает комментарий элемента используя его индекс
ZipArchive get Comment Name $flags	если флаг установлен в ziparchive::fl_unchanged возвращается оригинальный неизмененный комментарий
ZipArchive get Comment Name $name	имя элемента
ZipArchive string get Comment Name	возвращает комментарий при успехе или false в случае возникновения ошибки
ZipArchive string get Comment Name string $name int $flags	возвращает комментарий элемента используя его имя
ZipArchive get From Index $index	индекс элемента
ZipArchive get From Index $flags	флаги используемые для открытия архива
ZipArchive get From Index $length	размер читаемых данных из элемента
ZipArchive string get From Index	возвращает содержимое элемента при успехе или false в случае возникновения ошибки
ZipArchive string get From Index int $index int $length int $flags	возвращает содержимое элемента по его индексу
ZipArchive get From Name $flags	флаги используемые для открытия архива
ZipArchive get From Name $name	имя элемента
ZipArchive get From Name $length	размер читаемых данных из элемента
ZipArchive string get From Name	возвращает содержимое элемента при успехе или false в случае возникновения ошибки
ZipArchive string get From Name string $name int $length int $flags	возвращает содержимое элемента по его имени
ZipArchive get Stream $name	используемое имя элемента
ZipArchive resource get Stream	возвращает файловый указатель ресурс в случае успеха или false в случае возникновения ошибки
ZipArchive resource get Stream string $name	получить дескриптор файла элемента определенный по имени элемента только для чтения
ZipArchive locate Name $flags	флаги определяемые битовой маской из следующих значений либо 0 для ни одного из них
ZipArchive locate Name $name	имя элемента для поиска
ZipArchive int locate Name	возвращает индекс элемента в случае успеха или false в случае возникновения ошибки
ZipArchive int locate Name string $name int $flags	возвращает индекс элемента в архиве
ZipArchive open $flags	используемый режим открытия файлов
ZipArchive open $filename	имя zip-архива для открытия
ZipArchive mixed open	коды ошибок возвращает true при успешном завершении или код ошибки
ZipArchive mixed open string $filename int $flags	открывает zip-архив
ZipArchive rename Index $index	индекс элемента для переименования
ZipArchive rename Index $newname	новое имя
ZipArchive bool rename Index	возвращает true в случае успешного завершения или false в случае возникновения ошибки
ZipArchive bool rename Index int $index string $newname	переименовывает элемент по его индексу
ZipArchive rename Name $newname	новое имя
ZipArchive rename Name $name	имя элемента для переименования
ZipArchive bool rename Name	возвращает true в случае успешного завершения или false в случае возникновения ошибки
ZipArchive bool rename Name string $name string $newname	переименовывает элемент по его имени
ZipArchive set Archive Comment $comment	содержание комментария
ZipArchive bool set Archive Comment	возвращает true в случае успешного завершения или false в случае возникновения ошибки
ZipArchive bool set Archive Comment string $comment	устанавливает комментарий к zip-архиву
ZipArchive set Comment Index $index	индекс элемента
ZipArchive set Comment Index $comment	содержание комментария
ZipArchive bool set Comment Index	возвращает true в случае успешного завершения или false в случае возникновения ошибки
ZipArchive bool set Comment Index int $index string $comment	устанавливает комментарий к элементу по его индексу
ZipArchive set Comment Name $comment	содержание комментария
ZipArchive set Comment Name $name	имя элемента
ZipArchive bool set Comment Name	возвращает true в случае успешного завершения или false в случае возникновения ошибки
ZipArchive bool set Comment Name string $name string $comment	устанавливает комментарий к элементу заданному по имени
ZipArchive stat Index $index	индекс элемента
ZipArchive stat Index $flags	ziparchive::fl_unchanged указывается чтобы запросить информацию об исходном файле в архиве игнорируя любые внесенные изменения
ZipArchive array stat Index	возвращает массив содержащий детальную информацию о элементе или или false в случае возникновения ошибки
ZipArchive array stat Index int $index int $flags	получение детальной информации о элементе по его индексу
ZipArchive stat Name $name	имя элемента
ZipArchive stat Name $flags	флаг указывающий как должен происходить поиск имени
ZipArchive array stat Name	возвращает массив содержащий детальную информацию о элементе или или false в случае возникновения ошибки
ZipArchive array stat Name string $name int $flags	получение детальной информации о элементе по его имени
ZipArchive unchange Index $index	индекс позиции
ZipArchive bool unchange Index	возвращает true в случае успешного завершения или false в случае возникновения ошибки
ZipArchive bool unchange Index int $index	отменяет все изменения у позиции с заданным индексом
ZipArchive unchange Name $name	имя позиции
ZipArchive bool unchange Name	возвращает true в случае успешного завершения или false в случае возникновения ошибки
ZipArchive bool unchange Name string $name	отменяет все измения у позиции с заданным именем
ZMQDevice construct $frontend	frontend parameter for the devices
ZMQDevice construct $backend	backend parameter for the devices
ZMQDevice construct $listener	listener socket which receives a copy of all messages going both directions
ZMQDevice ZMQSocket construct	call to this method will prepare the device
ZMQDevice ZMQSocket construct ZMQSocket $frontend ZMQSocket $backend ZMQSocket $listener	construct a new device
