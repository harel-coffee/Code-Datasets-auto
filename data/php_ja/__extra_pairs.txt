APCIterator construct $search	apc の キー の 名前 に マッチ する pcre 正規 表現
APCIterator construct $format	希望 する 書式
APCIterator construct $list	一覧 に する 形式
APCIterator construct $cache	キャッシュ の 形式
APCIterator construct $chunk_size	チャンクサイズ
APCIterator string construct	成功 し た 場合 に apciterator オブジェクト 、 失敗 し た 場合 に null を 返し ます
APCIterator string construct string $cache mixed $search int $format int $chunk_size int $list	apciterator イテレータオブジェクト を 作成 する
APCIterator int get Total Hits	成功 し た 場合 に ヒット 数 、 失敗 し た 場合 に false を 返し ます
APCIterator int get Total Hits	キャッシュヒット の 総数 を 取得 する
APCIterator int get Total Size	キャッシュ の サイズ の 合計 を 返し ます
APCIterator int get Total Size	キャッシュ の サイズ の 合計 を 取得 する
APCIterator string key	成功 し た 場合 に キー 、 失敗 し た 場合 に false を 返し ます
APCIterator string key	イテレータ の キー を 取得 する
APCIterator void next	ポインタ を 次 の 項目 に 移動 さ せる
APCIterator void valid	現在 位置 が 有効 か どう か を 調べる
AppendIterator append $iterator	追加 する イテレータ
AppendIterator void append Iterator $iterator	イテレータ を 追加 する
AppendIterator Iterator get Inner Iterator	現在 の 内部 イテレータ を 返し ます
AppendIterator Iterator get Inner Iterator	内部 イテレータ を 取得 する
AppendIterator int get Iterator Index	現在 の 内部 イテレータ の インデックス 最初 は ゼロ を 整数 値 で 返し ます
AppendIterator int get Iterator Index	イテレータ の インデックス を 取得 する
AppendIterator scalar key	有効 な 状態 の 場合 は 現在 の キー 、 それ 以外 の 場合 は null を 返し ます
AppendIterator scalar key	現在 の キー を 取得 する
AppendIterator void next	次 の 要素 に 移動 する
AppendIterator bool valid	現在 の イテレーション が 有効 な 場合 に true 、 それ 以外 の 場合 に false を 返し ます
AppendIterator bool valid	現在 の 要素 が 有効 か どう か を 調べる
ArrayAccess offset Get $offset	取得 し たい オフセット
ArrayAccess mixed offset Get	すべて の 型 の 値 を 返す こと が でき ます
ArrayAccess mixed offset Get mixed $offset	オフセット を 取得 する
ArrayAccess offset Set $value	設定 し たい 値
ArrayAccess offset Set $offset	値 を 代入 し たい オフセット
ArrayAccess void offset Set mixed $offset mixed $value	指定 し た オフセット に 値 を 設定 する
ArrayAccess offset Unset $offset	設定 解除 し たい オフセット
ArrayAccess void offset Unset mixed $offset	オフセット の 設定 を 解除 する
ArrayIterator append $value	追加 する 値
ArrayIterator void append mixed $value	要素 を 追加 する
ArrayIterator int count	連想 配列 の 場合 は 要素 の 数 、 オブジェクト の 場合 は public プロパティ の 数 を 返し ます
ArrayIterator int count	要素 を 数える
ArrayIterator array get Array Copy	配列 の コピー を 返し ます
ArrayIterator array get Array Copy	配列 の コピー を 取得 する
ArrayIterator mixed key	この 関数 は 、 現在 の 配列 キー を 返し ます
ArrayIterator mixed key	現在 の 配列 キー を 返す
ArrayIterator void ksort	キー で 配列 を ソート する
ArrayIterator void next	次 の エントリ に 移動 する
ArrayIterator offset Exists $index	調べ たい オフセット
ArrayIterator void offset Exists string $index	オフセット が 存在 する かど う か を 調べる
ArrayIterator offset Get $index	値 を 取得 し たい オフセット
ArrayIterator mixed offset Get	オフセット index の 値 を 返し ます
ArrayIterator mixed offset Get string $index	オフセット の 値 を 取得 する
ArrayIterator offset Set $index	設定 し たい インデックス
ArrayIterator offset Set $newval	インデックス に 格納 する 新しい 値
ArrayIterator void offset Set string $index string $newval	オフセット の 値 を 設定 する
ArrayIterator string serialize	シリアライズ し た arrayiterator を 返し ます
ArrayIterator string serialize	シリアライズ する
ArrayIterator set Flags $flags	次 の ビットマスク
ArrayIterator void set Flags string $flags	振る 舞い の フラグ を 設定 する
ArrayIterator uasort $cmp_function	ソート に 使う 比較 関数
ArrayIterator void uasort string $cmp_function	ユーザー 定義 の ソート
ArrayIterator uksort $cmp_function	ソート に 使う 比較 関数
ArrayIterator void uksort string $cmp_function	ユーザー 定義 の ソート
ArrayIterator unserialize $serialized	シリアライズ し た arrayiterator オブジェクト
ArrayIterator string unserialize	arrayiterator を 返し ます
ArrayIterator string unserialize string $serialized	アンシリアライズ する
ArrayObject void asort	値 で エントリ を ソート する
ArrayObject int count	arrayobject の public プロパティ の 数 を 返し ます
ArrayObject int count	arrayobject の public プロパティ の 数 を 取得 する
ArrayObject exchange Array $input	現在 の 配列 と 交換 する 配列 あるい は オブジェクト
ArrayObject array exchange Array	元 の 配列 を 返し ます
ArrayObject array exchange Array mixed $input	配列 を 別 の 配列 と 交換 する
ArrayObject array get Array Copy	配列 の コピー を 返し ます
ArrayObject array get Array Copy	arrayobject の コピー を 作成 する
ArrayObject int get Flags	arrayobject の 振る 舞い の フラグ を 返し ます
ArrayObject int get Flags	振る 舞い の フラグ を 取得 する
ArrayObject ArrayIterator get Iterator	arrayobject から イテレータ を 返し ます
ArrayObject ArrayIterator get Iterator	arrayobject インスタンス から 新規 イテレータ を 生成 する
ArrayObject string get Iterator Class	この オブジェクト の 反復 処理 に 使う イテレータ の クラス 名 を 返し ます
ArrayObject string get Iterator Class	arrayobject の イテレータクラス 名 を 取得 する
ArrayObject void ksort	キー で エントリ を ソート する
ArrayObject void natcasesort	大文字 小文字 を 区別 し ない & quot ; 自然順 &quot ; アルゴリズム で エントリ を ソート する
ArrayObject set Iterator Class $iterator_class	この オブジェクト の 反復 処理 に 使う 配列 イテレータ の クラス 名
ArrayObject void set Iterator Class string $iterator_class	arrayobject の イテレータクラス 名 を 設定 する
ArrayObject uasort $cmp_function	関数 cmp _function は 二つ の パラメータ を 受け取り ます
ArrayObject void uasort callable $cmp_function	ユーザー 定義 の 比較 関数 で エントリ を ソート し 、 キー と の 対応 は 保持 する
ArrayObject unserialize $serialized	シリアライズ し た arrayobject
ArrayObject void unserialize string $serialized	arrayobject を アンシリアライズ する
CachingIterator array get Cache	キャッシュ の 内容 を 含む 配列 を 返し ます
CachingIterator array get Cache	キャッシュ の 内容 を 取得 する
CallbackFilterIterator string accept	現在 の アイテム を 受け 付ける 場合 に true 、 それ 以外 の 場合 に false を 返し ます
CallbackFilterIterator string accept	現在 の 値 、 現在 の キー 、 そして 内部 イテレータ を 引数 として で コールバック を 呼び出す
chdb construct $pathname	読み込む ファイル 名
chdb string construct string $pathname	chdb クラス の インスタンス を 生成 し ます
chdb get $key	値 を 取得 する ため の キー
chdb string get	与え られ た key に対応 し た 値 を 含む 文字 列 を 返し ます
chdb string get string $key	キー に 対応 し た 値 を 取得 する
Closure bind $closure	バインド する 無名 関数
Closure bind $newthis	指定 し た 無名 関数 を バインド する オブジェクト
Closure bind $newscope	クロージャ を 関連 づける クラススコープ 、 あるい は & # 0 3 9 ; static &# 0 3 9 ; で 現在 の スコープ を 維持 し ます
Closure Closure bind	新しい closure オブジェクト を 返し ます
Closure Closure bind Closure $closure object $newthis mixed $newscope	バインド さ れ た オブジェクト と クラス の スコープ で クロージャ を 複製 する
Closure bind To $newthis	指定 し た 無名 関数 を バインド する オブジェクト
Closure bind To $newscope	クロージャ を 関連 づける クラススコープ 、 あるい は & # 0 3 9 ; static &# 0 3 9 ; で 現在 の スコープ を 維持 し ます
Closure Closure bind To	新しい closure オブジェクト を 返し ます
Closure Closure bind To object $newthis mixed $newscope	新しく バインド し た オブジェクト と クラス の スコープ で 、 クロージャ を 複製 する
Closure - construct	インスタンス 作成 を 無効 化 し た コンストラクタ
Cond broadcast $condition	cond :: create を 呼ん で 取得 し た 条件 変数 へ の ハンドル
Cond boolean broadcast	成功 し た かどう か を 返し ます
Cond boolean broadcast long $condition	条件 を ブロードキャスト する
Cond long create	条件 変数 へ の ハンドル を 返し ます
Cond long create	条件 を 作る
Cond destroy $condition	cond :: create を 呼ん で 取得 し た 条件 変数 へ の ハンドル
Cond boolean destroy	成功 し た かどう か を 返し ます
Cond boolean destroy long $condition	条件 を 破棄 する
Cond wait $condition	cond :: create を 呼ん で 取得 し た 条件 変数 へ の ハンドル
Cond wait $timeout	オプション の タイムアウト 時間
Cond wait $mutex	呼び出し元 が mutex :: create を 呼ん で 所有 ロック し て いる ミューテックス へ の ハンドル
Cond boolean wait	成功 し た かどう か を 返し ます
Cond boolean wait long $condition long $mutex long $timeout	条件 を 待つ
DateInterval format $format	次 の 文字 を 、 format パラメータ 文字 列 に 使用 する こと が でき ます
DateInterval string format	フォーマット さ れ た 間隔 を 返し ます
DateInterval string format string $format	間隔 を フォーマット する
DateTime set state $array	初期化 配列
DateTime DateTime set state	新しい datetime オブジェクト の インスタンス を 返し ます
DateTime DateTime set state array $array	_ _set _state ハンドラ
DateTime - wakeup	_ _wakeup ハンドラ
DateTimeImmutable DateTimeImmutable add DateInterval $interval	年月 日時 分秒 の 値 を 加える
DateTimeImmutable modify $object	手続き 型 のみ : date _create が 返す datetime オブジェクト
DateTimeImmutable modify $modify	日付 / 時刻 文字列
DateTimeImmutable DateTimeImmutable modify	新しく 作っ た オブジェクト を 返し ます
DateTimeImmutable DateTimeImmutable modify string $modify	タイムスタンプ を 変更 し た 新しい オブジェクト を 作る
DateTimeImmutable DateTimeImmutable set state array $array	_ _set _state ハンドラ
DateTimeImmutable DateTimeImmutable set Date int $year int $month int $day	日付 を 設定 する
DateTimeImmutable DateTimeImmutable set Timestamp int $unixtimestamp	unix タイムスタンプ を 用い て 日付 と 時刻 を 設定 する
DateTimeImmutable DateTimeImmutable set Timezone DateTimeZone $timezone	タイムゾーン を 設定 する
DateTimeImmutable DateTimeImmutable sub DateInterval $interval	年月 日時 分秒 の 値 を 引く
Directory void rewind resource $dir_handle	ディレクトリハンドル を 元 に 戻す
DirectoryIterator DirectoryIterator current	現在 の directoryiterator アイテム を 返し ます
DirectoryIterator DirectoryIterator current	現在 の directoryiterator アイテム を 返す
DirectoryIterator int get ATime	ファイル の 最終 アクセス 時刻 を 、 unix タイムスタンプ で 返し ます
DirectoryIterator int get ATime	現在 の directoryiterator アイテム の 最終 アクセス 時刻 を 取得 する
DirectoryIterator get Basename $suffix	ベース 名 が suffix で 終わる 場合 は 、 これ が カット さ れ ます
DirectoryIterator string get Basename	現在 の directoryiterator の アイテム の ベース 名 を 返し ます
DirectoryIterator string get Basename string $suffix	現在 の directoryiterator の アイテム の ベース 名 を 取得 する
DirectoryIterator int get CTime	ファイル の 最終 更新 時刻 を 、 unix タイムスタンプ で 返し ます
DirectoryIterator int get CTime	現在 の directoryiterator アイテム の inode 修正 時刻 を 取得 する
DirectoryIterator string get Extension	ファイル の 拡張子 を 文字列 で 返し ます
DirectoryIterator string get Extension	ファイル の 拡張子 を 取得 する
DirectoryIterator string get Filename	現在 の directoryiterator アイテム の ファイル 名 を 返し ます
DirectoryIterator string get Filename	現在 の directoryiterator アイテム の ファイル 名 を 返す
DirectoryIterator int get Inode	ファイル の inode 番号 を 返し ます
DirectoryIterator int get Inode	現在 の directoryiterator アイテム の inode を 取得 する
DirectoryIterator int get Owner	ファイル の 所有 者 を 、 数値 形式 で 返し ます
DirectoryIterator int get Owner	現在 の directoryiterator アイテム の 所有 者 を 取得 する
DirectoryIterator string get Pathname	現在 の ファイル の パス と ファイル 名 を 返し ます
DirectoryIterator string get Pathname	現在 の directoryiterator アイテム の パス と ファイル 名 を 返す
DirectoryIterator int get Size	ファイルサイズ を バイト 単位 で 返し ます
DirectoryIterator int get Size	現在 の directoryiterator アイテム の サイズ を 取得 する
DirectoryIterator bool is Dir	ディレクトリ の 場合 に true 、 そう で ない 場合 に false を 返し ます
DirectoryIterator bool is Dir	現在 の directoryiterator アイテム が ディレクトリ で ある かど う か を 調べる
DirectoryIterator bool is Dot	エントリ が
DirectoryIterator bool is Dot	現在 の directoryiterator アイテム が '
DirectoryIterator bool is Link	エントリ が シンボリックリンク で ある 場合 に true 、 そう で ない 場合 に false を 返し ます
DirectoryIterator bool is Link	現在 の directoryiterator アイテム が シンボリックリンク で ある かど う か を 調べる
DirectoryIterator bool is Readable	ファイル が 読込 可能 で ある 場合 に true 、 そう で ない 場合 に false を 返し ます
DirectoryIterator bool is Readable	現在 の directoryiterator アイテム が 読込 可能 で ある かど う か を 調べる
DirectoryIterator void next	次 の directoryiterator アイテム に 移動 する
DirectoryIterator void rewind	directoryiterator を 最初 に 巻き戻す
DirectoryIterator seek $position	異動先 を 表す 、 ゼロ から 始まる 位置
DirectoryIterator void seek int $position	directoryiterator の アイテム を 移動 する
DirectoryIterator bool valid	有効 な 位置 で ある 場合 は true 、 それ 以外 の 場合 は false を 返し ます
DirectoryIterator bool valid	現在 の directoryiterator の 位置 が 有効 な ファイル で ある かどう か チェック する
DOMAttr bool is Id	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
DOMAttr bool is Id	属性 が 定義 済み の id かどう か を 調べる
DOMCharacterData append Data $data	追加 する 文字列
DOMCharacterData void append Data string $data	ノード の 文字 データ の 最後 に 文字列 を 追加 する
DOMCharacterData delete Data $offset	削除 開始 位置 の オフセット
DOMCharacterData delete Data $count	削除 する 文字 の 数
DOMCharacterData void delete Data int $offset int $count	指定 し た 範囲 の 文字列 を ノード から 削除 する
DOMCharacterData insert Data $offset	挿入 する 場所 の 文字 オフセット
DOMCharacterData insert Data $data	挿入 する 文字列
DOMCharacterData void insert Data int $offset string $data	指定 し た 1 6 ビット 単位 の オフセット に 、 文字列 を 挿入 する
DOMCharacterData replace Data $offset	置換 開始 位置 の オフセット
DOMCharacterData replace Data $count	置換 する 文字 の 数
DOMCharacterData replace Data $data	置換 する 文字列
DOMCharacterData void replace Data int $offset int $count string $data	domcharacterdata ノード の 文字列 の 一部 を 置換 する
DOMComment construct $value	コメント の 値
DOMComment string construct string $value	新しい domcomment オブジェクト を 作成 する
DOMDocument construct $version	xml 宣言 の 一部 で ある 、 ドキュメント の バージョン 番号
DOMDocument construct $encoding	xml 宣言 の 一部 で ある 、 ドキュメント の エンコーディング
DOMDocument string construct string $version string $encoding	新しい domdocument オブジェクト を 作成 する
DOMDocument create Attribute $name	属性 の 名前
DOMDocument DOMAttr create Attribute	新しい domattr 、 あるい は エラー が 発生 し た 場合 は false を 返し ます
DOMDocument DOMAttr create Attribute string $name	新しい 属性 を 作成 する
DOMDocument create Attribute NS $qualifiedName	属性 の タグ 名 と プレフィックス を 、 prefix :tagname の よう な 形式 で 指定 する
DOMDocument create Attribute NS $namespaceURI	名前 空間 の uri
DOMDocument DOMAttr create Attribute NS	新しい domattr 、 あるい は エラー が 発生 し た 場合 は false を 返し ます
DOMDocument DOMAttr create Attribute NS string $namespaceURI string $qualifiedName	関連付け られ た 名前 空間 に 新しい 属性 を 作成 する
DOMDocument create CDATASection $data	cdata の 内容
DOMDocument DOMCDATASection create CDATASection	新しい domcdatasection 、 あるい は エラー が 発生 し た 場合 は false を 返し ます
DOMDocument DOMCDATASection create CDATASection string $data	新しい cdata ノード を 作成 する
DOMDocument create Comment $data	コメント の 内容
DOMDocument DOMComment create Comment	新しい domcomment 、 あるい は エラー が 発生 し た 場合 は false を 返し ます
DOMDocument DOMComment create Comment string $data	新しい comment ノード を 作成 する
DOMDocument DOMDocumentFragment create Document Fragment	新しい domdocumentfragment 、 あるい は エラー が 発生 し た 場合 は false を 返し ます
DOMDocument DOMDocumentFragment create Document Fragment	新しい 文書 片 を 作成 する
DOMDocument create Element $name	要素 の タグ 名
DOMDocument create Element $value	要素 の 値
DOMDocument DOMElement create Element	新しい domelement クラス の 新しい インスタンス 、 あるい は エラー が 発生 し た 場合 は false を 返し ます
DOMDocument DOMElement create Element string $name string $value	新しい 要素 ノード を 作成 する
DOMDocument create Processing Instruction $data	処理 命令 の 内容
DOMDocument create Processing Instruction $target	処理 命令 の 対象
DOMDocument DOMProcessingInstruction create Processing Instruction	新しい domprocessinginstruction 、 あるい は エラー が 発生 し た 場合 に は false を 返し ます
DOMDocument DOMProcessingInstruction create Processing Instruction string $target string $data	新しい pi ノード を 作成 する
DOMDocument create Text Node $content	テキスト の 内容
DOMDocument DOMText create Text Node	新しい domtext 、 あるい が エラー が 発生 し た 場合 に は false を 返し ます
DOMDocument DOMText create Text Node string $content	新しい テキストノード を 作成 する
DOMDocument get Element By Id $elementId	要素 の id
DOMDocument DOMElement get Element By Id	domelement 、 あるい は 要素 が 見つ から なかっ た 場合 は null を 返し ます
DOMDocument DOMElement get Element By Id string $elementId	id に対応 する 要素 を 検索 する
DOMDocument get Elements By Tag Name $name	タグ の ローカル 名 名前 空間 を 除い た もの に 一致 する 名前
DOMDocument DOMNodeList get Elements By Tag Name	一致 する すべ て の 要素 を 含む 、 新しい domnodelist オブジェクト を 返し ます
DOMDocument DOMNodeList get Elements By Tag Name string $name	指定 し た ローカルタグ 名 に 対応 する すべ て の 要素 を 検索 する
DOMDocument load $options	libxml オプション 定数 を ビット or で 連結 し た もの
DOMDocument load $filename	xml ドキュメント へ の パス
DOMDocument mixed load	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
DOMDocument mixed load string $filename int $options	ファイル から xml を 読み込む
DOMDocument load HTMLFile $filename	html ファイル へ の パス
DOMDocument load HTMLFile $options	php 5
DOMDocument bool load HTMLFile	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
DOMDocument bool load HTMLFile string $filename int $options	ファイル から html を 読み込む
DOMDocument register Node Class $extendedclass	拡張 し た クラス の 名前
DOMDocument register Node Class $baseclass	拡張 し たい dom クラス
DOMDocument bool register Node Class	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
DOMDocument bool register Node Class string $baseclass string $extendedclass	基底 ノード 型 を 作成 する 際 に 使用 する 拡張 クラス を 登録 する
DOMDocument relax NGValidate Source $source	rng スキーマ を 含む 文字列
DOMDocument bool relax NGValidate Source	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
DOMDocument bool relax NGValidate Source string $source	ドキュメント を relaxng で 検証 する
DOMDocument save $filename	保存 さ れ た xml ドキュメント へ の パス
DOMDocument save $options	追加 の オプション
DOMDocument int save	書き込ん だ バイト 数 、 あるい は エラー が 発生 し た 場合 は false を 返し ます
DOMDocument int save string $filename int $options	内部 の xml ツリー を ファイル に 出力 する
DOMDocument save HTML $node	ドキュメント の サブセット を 出力 する オプション の パラメータ
DOMDocument string save HTML	html 、 あるい は エラー が 発生 し た 場合 は false を 返し ます
DOMDocument string save HTML DOMNode $node	内部 の ドキュメント を html 形式 の 文字 列 として 出力 する
DOMDocument save HTMLFile $filename	保存 さ れ た html ドキュメント へ の パス
DOMDocument int save HTMLFile	書き込ん だ バイト 数 、 あるい は エラー が 発生 し た 場合 は false を 返し ます
DOMDocument int save HTMLFile string $filename	内部 の ドキュメント を html 形式 で ファイル に 出力 する
DOMDocument save XML $node	ドキュメント 全体 で は なく 、 xml 宣言 以外 の 特定 の ノード だけ を 出力 し たい 場合 に この パラメータ を 使用 し ます
DOMDocument save XML $options	追加 の オプション
DOMDocument string save XML	xml 、 あるい は エラー が 発生 し た 場合 は false を 返し ます
DOMDocument string save XML DOMNode $node int $options	内部 の xml ツリー を 文字 列 として 出力 する
DOMDocument schema Validate $flags	libxml の スキーマ 検証 フラグ の ビットマスク
DOMDocument schema Validate $filename	スキーマ へ の パス
DOMDocument bool schema Validate	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
DOMDocument bool schema Validate string $filename int $flags	スキーマ に 基づい て ドキュメント を 検証 する
DOMDocument schema Validate Source $source	スキーマ を 含む 文字列
DOMDocument schema Validate Source $flags	libxml の スキーマ 検証 フラグ の ビットマスク
DOMDocument bool schema Validate Source	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
DOMDocument bool schema Validate Source string $source int $flags	スキーマ に 基づい て ドキュメント を 検証 する
DOMDocument bool validate	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
DOMDocument bool validate	dtd に 基づい て ドキュメント を 検証 する
DOMElement construct $name	要素 の タグ 名
DOMElement construct $value	要素 の 値
DOMElement construct $namespaceURI	指定 し た 名前 空間 の 中 で 要素 を 作成 する ため の 名前 空間 uri
DOMElement string construct string $name string $value string $namespaceURI	新しい domelement オブジェクト を 作成 する
DOMElement get Attribute Node $name	属性 の 名前
DOMElement DOMAttr get Attribute Node	属性 ノード を 返し ます
DOMElement DOMAttr get Attribute Node string $name	属性 ノード を 返す
DOMElement get Attribute Node NS $localName	ローカル 名
DOMElement get Attribute Node NS $namespaceURI	名前 空間 uri
DOMElement DOMAttr get Attribute Node NS	属性 ノード を 返し ます
DOMElement DOMAttr get Attribute Node NS string $namespaceURI string $localName	属性 ノード を 返す
DOMElement get Attribute NS $localName	ローカル 名
DOMElement get Attribute NS $namespaceURI	名前 空間 uri
DOMElement string get Attribute NS	属性 の 値 、 あるい は localname および namespaceuri に対応 する 属性 が 見つから なかっ た 場合 に は 空 の 文字列 を 返し ます
DOMElement string get Attribute NS string $namespaceURI string $localName	属性 の 値 を 返す
DOMElement get Elements By Tag Name $name	タグ 名
DOMElement DOMNodeList get Elements By Tag Name	この 関数 は 、 一致 し たすべて の 要素 から なる domnodelist クラス の インスタンス を 返し ます
DOMElement DOMNodeList get Elements By Tag Name string $name	タグ 名 から 要素 を 取得 する
DOMElement get Elements By Tag Name NS $localName	ローカル 名
DOMElement get Elements By Tag Name NS $namespaceURI	名前 空間 uri
DOMElement DOMNodeList get Elements By Tag Name NS	この 関数 は 、 一致 し たすべて の 要素 から なる domnodelist クラス の インスタンス を 返し ます
DOMElement DOMNodeList get Elements By Tag Name NS string $namespaceURI string $localName	名前 空間 uri と ローカル 名 から 要素 を 取得 する
DOMElement has Attribute $name	要素名
DOMElement bool has Attribute	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
DOMElement bool has Attribute string $name	属性 が 存在 する かど う か を 調べる
DOMElement has Attribute NS $localName	ローカル 名
DOMElement has Attribute NS $namespaceURI	名前 空間 uri
DOMElement bool has Attribute NS	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
DOMElement bool has Attribute NS string $namespaceURI string $localName	属性 が 存在 する かど う か を 調べる
DOMElement remove Attribute $name	属性 の 名前
DOMElement bool remove Attribute	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
DOMElement bool remove Attribute string $name	属性 を 削除 する
DOMElement remove Attribute NS $localName	ローカル 名
DOMElement remove Attribute NS $namespaceURI	名前 空間 uri
DOMElement bool remove Attribute NS	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
DOMElement bool remove Attribute NS string $namespaceURI string $localName	属性 を 削除 する
DOMElement set Attribute $name	属性 の 名前
DOMElement set Attribute $value	属性 の 値
DOMElement DOMAttr set Attribute	新しい domattr 、 あるい は エラー が 発生 し た 場合 は false を 返し ます
DOMElement DOMAttr set Attribute string $name string $value	新しい 属性 を 追加 する
DOMElement set Attribute Node $attr	属性 ノード
DOMElement DOMAttr set Attribute Node	属性 が 置換 さ れ た 場合 は 置換 前 の ノード 、 そう で ない 場合 は null を 返し ます
DOMElement DOMAttr set Attribute Node DOMAttr $attr	新しい 属性 ノード を 要素 に 追加 する
DOMElement set Attribute Node NS $attr	属性 ノード
DOMElement DOMAttr set Attribute Node NS	属性 が 置換 さ れ た 場合 は 置換 前 の ノード を 返し ます
DOMElement DOMAttr set Attribute Node NS DOMAttr $attr	新しい 属性 ノード を 要素 に 追加 する
DOMElement set Attribute NS $value	属性 の 値
DOMElement set Attribute NS $namespaceURI	名前 空間 uri
DOMElement set Attribute NS $qualifiedName	prefix :tagname 形式 で 表し た 属性 名
DOMElement void set Attribute NS string $namespaceURI string $qualifiedName string $value	新しい 属性 を 追加 する
DOMElement set Id Attribute $name	属性 の 名前
DOMElement set Id Attribute $isId	name を id 型 に し たい 場合 に true 、 それ 以外 の 場合 に false を 設定 し ます
DOMElement void set Id Attribute string $name bool $isId	id 型 の 属性 を 名前 で 宣言 する
DOMElement set Id Attribute NS $localName	属性 の ローカル 名
DOMElement set Id Attribute NS $namespaceURI	属性 の 名前 空間 uri
DOMElement set Id Attribute NS $isId	name を id 型 に し たい 場合 に true 、 それ 以外 の 場合 に false を 設定 し ます
DOMElement void set Id Attribute NS string $namespaceURI string $localName bool $isId	id 型 の 属性 を ローカル 名 および 名前 空間 uri で 宣言 する
DOMImplementation - construct	新しい domimplementation オブジェクト を 作成 する
DOMImplementation create Document $qualifiedName	作成 する ドキュメント 要素 の 修飾 名
DOMImplementation create Document $doctype	作成 する ドキュメント の 型 、 あるい は null
DOMImplementation create Document $namespaceURI	作成 する ドキュメント 要素 の 名前 空間 uri
DOMImplementation DOMDocument create Document	新しい domdocument オブジェクト を 返し ます
DOMImplementation DOMDocument create Document string $namespaceURI string $qualifiedName DOMDocumentType $doctype	指定 し た 型 と ドキュメント 要素 の domdocument オブジェクト を 作成 する
DOMImplementation create Document Type $publicId	外部 サブセット の 公開 id
DOMImplementation create Document Type $systemId	外部 サブセット の システム id
DOMImplementation create Document Type $qualifiedName	作成 さ れる ドキュメント 型 の 修飾 名
DOMImplementation DOMDocumentType create Document Type	ownerdocument を null に 設定 し た 新しい domdocumenttype ノード を 返し ます
DOMImplementation DOMDocumentType create Document Type string $qualifiedName string $publicId string $systemId	空 の domdocumenttype オブジェクト を 作成 する
DOMImplementation has Feature $feature	調べる 機能
DOMImplementation has Feature $version	調べる feature の バージョン 番号
DOMImplementation bool has Feature	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
DOMImplementation bool has Feature string $feature string $version	dom 実装 が 、 指定 し た 機能 を 実装 し て いる かど う か を 調べる
DOMNamedNodeMap get Named Item $name	取得 する ノード の 名前
DOMNamedNodeMap DOMNode get Named Item	指定 し た 任意 の 型 の nodename の ノード 、 あるい は ノード が 見つ から なかっ た 場合 に は null を 返し ます
DOMNamedNodeMap DOMNode get Named Item string $name	名前 で 指定 さ れ た ノード を 取得 する
DOMNamedNodeMap get Named Item NS $localName	取得 する ノード の ローカル 名
DOMNamedNodeMap get Named Item NS $namespaceURI	取得 する ノード の 名前 空間 uri
DOMNamedNodeMap DOMNode get Named Item NS	指定 し た 任意 の 型 の ローカル 名 および 名前 空間 uri の ノード 、 あるい は ノード が 見つ から なかっ た 場合 に は null を 返し ます
DOMNamedNodeMap DOMNode get Named Item NS string $namespaceURI string $localName	ローカル 名 および 名前 空間 uri で 指定 し た ノード を 取得 する
DOMNamedNodeMap item $index	マップ 内 の インデックス
DOMNamedNodeMap DOMNode item	マップ 内 の index 番目 の 位置 に ある ノード 、 あるい は インデックス が 不正 な 形式 マップ 内 の 要素 数 以上 の 場合 は null を 返し ます
DOMNamedNodeMap DOMNode item int $index	インデックス で 指定 し た ノード を 取得 する
DOMNode C14 N $exclusive	指定 し た xpath あるい は 名前 空間 プレフィックス に マッチ する ノード だけ を 対象 と し た パース を 有効 に する
DOMNode C14 N $ns_prefixes	ノード を 絞り込む ため の 名前 空間 プレフィックス の 配列
DOMNode C14 N $with_comments	コメント を 残し て 出力 する
DOMNode C14 N $xpath	ノード を 絞り込む ため の xpath の 配列
DOMNode string C14 N	正規化 し た ノード を 文字列 で 返し ます
DOMNode string C14 N bool $exclusive bool $with_comments array $xpath array $ns_prefixes	ノード を 文字列 に 正規 化 する
DOMNode clone Node $deep	子孫 要素 を 含め て コピー する かど う か を 指定 し ます
DOMNode DOMNode clone Node	複製 さ れ た ノード を 返し ます
DOMNode DOMNode clone Node bool $deep	ノード を 複製 する
DOMNode int get Line No	常 に ノード が 定義 さ れ た 行 の 番号 を 返し ます
DOMNode int get Line No	ノード が 存在 する 行 の 番号 を 取得 し ます
DOMNode string get Node Path	xpath を 含む 文字 列 、 あるい は エラー 時 に null を 返し ます
DOMNode string get Node Path	ノード の xpath を 取得 する
DOMNode bool has Attributes	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
DOMNode bool has Attributes	ノード が 属性 を 保持 し て いる かど う か を 調べる
DOMNode insert Before $refnode	参照 ノード
DOMNode insert Before $newnode	新しい ノード
DOMNode DOMNode insert Before	挿入 さ れ た ノード を 返し ます
DOMNode DOMNode insert Before DOMNode $newnode DOMNode $refnode	参照 し て いる ノード の 前 に 新しい 子 を 追加 する
DOMNode is Default Namespace $namespaceURI	調べる 名前 空間 uri
DOMNode bool is Default Namespace	namespaceuri が デフォルト の 名前 空間 で ある 場合 に true 、 それ 以外 の 場合 に false を 返し ます
DOMNode bool is Default Namespace string $namespaceURI	指定 し た namespaceuri が デフォルト の 名前 空間 か どう か を 調べる
DOMNode is Supported $feature	調べる 機能
DOMNode is Supported $version	調べる 機能 feature の バージョン 番号
DOMNode bool is Supported	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
DOMNode bool is Supported string $feature string $version	指定 し た バージョン で 機能 が サポート さ れ て いる かど う か を 調べる
DOMNode lookup Namespace URI $prefix	名前 空間 の プレフィックス
DOMNode string lookup Namespace URI	ノード の 名前 空間 uri を 返し ます
DOMNode string lookup Namespace URI string $prefix	プレフィックス に 基づい て 、 ノード の 名前 空間 uri を 取得 する
DOMNode void normalize	ノード を 正規 化 する
DOMNode remove Child $oldnode	削除 する 子要素
DOMNode DOMNode remove Child	子要素 の 削除 に 成功 し た 場合 に 、 削除 し た 要素 を 返し ます
DOMNode DOMNode remove Child DOMNode $oldnode	子要 素群 から 子要素 を 削除 する
DOMNode replace Child $oldnode	古い ノード
DOMNode replace Child $newnode	新しい ノード
DOMNode DOMNode replace Child	古い ノード 、 あるい は エラー が 発生 し た 場合 は false を 返し ます
DOMNode DOMNode replace Child DOMNode $newnode DOMNode $oldnode	子 を 置き 換える
DOMNodelist item $index	コレクション 内 の ノード の インデックス
DOMNodelist DOMNode item	domnodelist 内 の index 番目 の 位置 に ある ノード 、 あるい は インデックス が 不正 な 形式 の 場合 は null を 返し ます
DOMNodelist DOMNode item int $index	インデックス で 指定 し た ノード を 取得 する
DOMProcessingInstruction construct $name	処理 命令 の タグ 名
DOMProcessingInstruction construct $value	処理 命令 の 値
DOMProcessingInstruction string construct string $name string $value	新しい domprocessinginstruction オブジェクト を 作成 する
DOMText bool is Whitespace In Element Content	ノード に ゼロ 個以上 の 空白 文字 だけ が 含まれる 場合 に true 、 それ 以外 の 場合 に false を 返し ます
DOMText bool is Whitespace In Element Content	この テキストノード が 空白 を 含む か どう か を 示す
DOMText split Text $offset	分割 する 位置 を 示す オフセット
DOMText DOMText split Text	同じ型 の 新しい ノード を 返し ます
DOMText DOMText split Text int $offset	指定 し た オフセット で ノード を 2 つに 分割 する
DOMXPath construct $doc	domxpath に関連付け られ た domdocument
DOMXPath DOMDocument construct DOMDocument $doc	新しい domxpath オブジェクト を 作成 する
DOMXPath evaluate $expression	実行 する xpath 式
DOMXPath evaluate $registerNodeNS	オプション の registernodens で 、 コンテキストノード の 自動 登録 を 無効 に する こと が でき ます
DOMXPath evaluate $contextnode	相対 xpath クエリ を 実行 する 場合 に 、 オプション で 基準 ノード を 指定 する こと が 可能 です
DOMXPath mixed evaluate	可能 で あれ ば 型付け さ れ た 結果 、 あるい は 指定 さ れ た xpath 式 expression に マッチ する すべ て の ノード を 含む domnodelist を 返し ます
DOMXPath mixed evaluate string $expression DOMNode $contextnode bool $registerNodeNS	与え られ た xpath 式 を 評価 し 、 可能 で あれ ば 結果 を 返す
DOMXPath register Namespace $namespaceURI	名前 空間 の uri
DOMXPath register Namespace $prefix	プレフィックス
DOMXPath bool register Namespace	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
DOMXPath bool register Namespace string $prefix string $namespaceURI	domxpath オブジェクト の 名前 空間 を 登録 する
DOMXPath register Php Functions $restrict	この パラメータ を 使っ て 、 特定 の 関数 のみ を xpath から コール できる よう に 制限 する こと が でき ます
DOMXPath void register Php Functions mixed $restrict	php の 関数 を xpath 関数 として 登録 する
EmptyIterator void next	next メソッド
Ev int depth	ev _depth は 、 デフォルト の ループ の 再帰 の 深さ を 返し ます
Ev int depth	再帰 の 深さ を 返す
Ev void embeddable Backends	他 の イベントループ に 埋め込める バックエンド 群 を 返す
Ev feed Signal $signum	シグナル 番号
Ev void feed Signal int $signum	シグナルイベント を ev に 送る
Ev feed Signal Event $signum	シグナル 番号
Ev void feed Signal Event int $signum	シグナルイベント の 情報 を デフォルトループ に 送る
Ev int iteration	デフォルト の イベントループ の ポーリング 回数 を 返し ます
Ev int iteration	デフォルト の イベントループ が 新しい イベント を ポーリング し た 回数 を 返す
Ev double now	デフォルト の イベントループ で 直近 の 処理 が 始まっ た 時刻 を 表す 秒数 を 返し ます
Ev double now	デフォルト の イベントループ で 直近 の 処理 が 始まっ た 時刻 を 返す
Ev void resume	一時 停止 し て い た デフォルト の イベントループ を 再開 さ せる
Ev run $flags	オプション の パラメータ で 、 以下 のい ずれ か に なり ます
Ev void run int $flags	イベント の チェック と デフォルトループ の コールバック の 呼び出し を 開始 する
Ev stop $how	ev :: break _* 定数 のいずれ か
Ev void stop int $how	デフォルト の イベントループ を 止める
Ev void supported Backends	現在 の libev の 構成 で サポート する バックエンド 群 を 返す
Ev void suspend	デフォルト の イベントループ を 一時 停止 する
Ev double time	epoch から 現在 時刻 まで の 秒数 を 返し ます
Ev double time	epoch から 現在 時刻 まで の 秒数 を 返す
Ev void verify	内部 の 整合 性 を チェック する デバッグ 用
EvCheck construct $priority	ウォッチャー の 優先 度
EvCheck construct $data	この ウォッチャー に 関連 づける カスタムデータ
EvCheck construct $callback	ウォッチャー の コールバック を 参照く ださい
EvCheck callable construct	成功 し た 場合 に evcheck オブジェクト を 返し ます
EvCheck callable construct callable $callback mixed $data int $priority	evcheck ウォッチャーオブジェクト を 作る
EvCheck create Stopped $priority	ウォッチャー の 優先 度
EvCheck create Stopped $data	この ウォッチャー に 関連 づける カスタムデータ
EvCheck create Stopped $callback	ウォッチャー の コールバック を 参照く ださい
EvCheck object create Stopped	成功 し た 場合 に evcheck オブジェクト を 返し ます
EvCheck object create Stopped string $callback string $data string $priority	停止 し た evcheck ウォッチャー の インスタンス を 作る
EvChild construct $pid	状態 の 変更 を 待つ プロセス の pid 0 に する と 、 すべて の プロセス を 対象 に し ます
EvChild construct $priority	ウォッチャー の 優先 度
EvChild construct $data	この ウォッチャー に 関連 づける カスタムデータ
EvChild construct $trace	false に する と 、 プロセス が 終了 し た とき に だけ ウォッチャー を アクティブ に し ます
EvChild construct $callback	ウォッチャー の コールバック を 参照く ださい
EvChild int construct	成功 し た 場合 に evchild オブジェクト を 返し ます
EvChild int construct int $pid bool $trace callable $callback mixed $data int $priority	evchild ウォッチャーオブジェクト を 作る
EvChild create Stopped $trace	evchild :: __ construct と同じ
EvChild create Stopped $priority	ウォッチャー の 優先 度
EvChild create Stopped $pid	evchild :: __ construct と同じ
EvChild create Stopped $data	この ウォッチャー に 関連 づける カスタムデータ
EvChild create Stopped $callback	ウォッチャー の コールバック を 参照く ださい
EvChild object create Stopped int $pid bool $trace callable $callback mixed $data int $priority	停止 し た evchild ウォッチャー の インスタンス を 作る
EvEmbed create Stopped $priority	ウォッチャー の 優先 度
EvEmbed create Stopped $data	この ウォッチャー に 関連 づける カスタムデータ
EvEmbed create Stopped $other	evembed :: __ construct と同じ
EvEmbed create Stopped $callback	ウォッチャー の コールバック を 参照く ださい
EvEmbed void create Stopped object $other callable $callback mixed $data int $priority	停止 し た evembed ウォッチャー の インスタンス を 作る
EvEmbed void sweep	埋め込ん だ ループ に対し て 単一 の 非 ブロックスイープ を 行う
EvFork create Stopped $priority	ウォッチャー の 優先 度
EvFork create Stopped $data	この ウォッチャー に 関連 づける カスタムデータ
EvFork create Stopped $callback	ウォッチャー の コールバック を 参照く ださい
EvFork object create Stopped	成功 し た 場合 に 、 停止 し た evfork オブジェクト を 返し ます
EvFork object create Stopped string $callback string $data string $priority	停止 し た evfork ウォッチャー の インスタンス を 作る
EvPrepare construct $priority	ウォッチャー の 優先 度
EvPrepare construct $data	この ウォッチャー に 関連 づける カスタムデータ
EvPrepare construct $callback	ウォッチャー の コールバック を 参照く ださい
EvPrepare string construct	成功 し た 場合 に evprepare オブジェクト を 返し ます
EvPrepare string construct string $callback string $data string $priority	evprepare ウォッチャーオブジェクト を 作る
Exception void clone	例外 を コピー する
Exception mixed get Code	例外 コード を 整数 値 で 返し ます
Exception mixed get Code	例外 コード を 取得 する
Exception string get File	例外 が 作ら れ た ファイル の 名前 を 返し ます
Exception string get File	例外 が 発生 し た ファイル を 取得 する
Exception int get Line	例外 が 作られ た 行番 号 を 返し ます
Exception int get Line	例外 が 発生 し た 行 を 取得 する
Exception string get Message	例外 メッセージ 文字 列 を 返し ます
Exception string get Message	例外 メッセージ を 取得 する
Exception Exception get Previous	前 に 発生 し た exception 、 あるい は それ が 存在 し ない 場合 は null を 返し ます
Exception Exception get Previous	前 の 例外 を 返す
Exception array get Trace	例外 の スタックトレース を 配列 で 返し ます
Exception array get Trace	スタックトレース を 取得 する
Exception string get Trace As String	例外 の スタックトレース を 文字列 で 返し ます
Exception string get Trace As String	スタックトレース を 文字列 で 取得 する
Exception string to String	例外 を 文字列 で 表現 し た もの を 返し ます
Exception string to String	例外 の 文字 列表 現
FilesystemIterator construct $path	反復 処理 し たい ファイルシステム 上 の アイテム へ の パス
FilesystemIterator construct $flags	フラグ を 指定 する と 、 いくつか の メソッド の 振る 舞い を 変更 する こと が でき ます
FilesystemIterator string construct string $path int $flags	新しい filesystem イテレータ を 作成 する
FilesystemIterator void rewind	先頭 に 巻き戻す
FilesystemIterator set Flags $flags	設定 する 処理 フラグ
FilesystemIterator void set Flags int $flags	処理 フラグ を 設定 する
FilterIterator bool accept	現在 の 要素 が 通過 する 場合 に true 、 それ 以外 の 場合 に false を 返し ます
FilterIterator bool accept	イテレータ の 現在 の 要素 が フィルタ を 満た す かどう か を 調べる
FilterIterator construct $iterator	フィルタリング の 対象 と なる イテレータ
FilterIterator Iterator construct	filteriterator を 返し ます
FilterIterator Iterator construct Iterator $iterator	filteriterator を 作成 する
finfo string buffer string $string int $options resource $context	finfo _buffer の エイリアス
finfo string file string $file_name int $options resource $context	finfo _file の エイリアス
function addcslashes $str	エスケープ し たい 文字列
function addcslashes $charlist	エスケープ の 対象 と なる 文字 を 並べ た もの
function string addcslashes	エスケープ さ れ た 文字列 を 返し ます
function string addcslashes string $str string $charlist	c 言語 と 同様 に スラッシュ で 文字列 を クォート する
function bool apache child terminate	もし php が apache 1 モジュール として 実行 し て いる 場合 、 true を 返し ます
function bool apache child terminate	この リクエスト の 後 に apache プロセス を 終了 する
function string apache get version	成功 時 は apache の バージョン 、 失敗 し た 場合 に false を 返し ます
function string apache get version	apache の バージョン を 取得 する
function apache lookup uri $filename	リクエスト さ れ て いる ファイル 名 uri
function object apache lookup uri	uri に関する 情報 の オブジェクト です
function object apache lookup uri string $filename	リクエスト の 一部 を 指定 し た uri に対し て 行い 、 全て の 情報 を 返す
function apache note $note_value	記号 の 値
function apache note $note_name	記号 の 名前
function string apache note	引数 が 1つ だけ 指定 さ れ て コール さ れ た 場合 、 現在 の 記号 の 値 note _name が 返さ れ ます
function string apache note string $note_name string $note_value	apache リクエスト 記号 note を 取得 / 設定 する
function array apache request headers	現在 の リクエスト に おける すべ て の http ヘッダ の 連想 配列 、 あるい は 失敗 時 は false を 返し ます
function array apache request headers	すべて の http リクエストヘッダ を 取得 する
function bool apache reset timeout	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool apache reset timeout	apache の 書き込み タイマー を リセット する
function array apache response headers	全て の apache レスポンスヘッダ の 配列 、 失敗 し た 場合 に false を 返し ます
function array apache response headers	http レスポンスヘッダ を 全 て 取得 する
function apache setenv $value	variable の 新しい 値
function apache setenv $walk_to_top	全て の apache レイヤ に対し て 有効 な トップレベル の 変数 を 設定 する かどう か
function apache setenv $variable	設定 する 環境 変数
function bool apache setenv	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool apache setenv string $variable string $value bool $walk_to_top	apache サブプロセス の 環境 変数 を 設定 する
function apc add $var	格納 する 変数
function apc add $values	名前 を キー 、 変数 を 値 に 指定 し ます
function apc add $key	この 名前 を 用い て 変数 を 格納 し ます
function apc add $ttl	有効 期間
function bool apc add	何か が キャッシュ に 正しく 追加 さ れ た とき に true 、 それ 以外 の 場合 に false を 返し ます
function bool apc add string $key mixed $var int $ttl	新規 の 変数 を データ 領域 に キャッシュ する
function apc bin dump $files	ファイル
function apc bin dump $user_vars	ユーザー 変数
function string apc bin dump	指定 し た ファイル および ユーザー 変数 の バイナリダンプ を apc キャッシュ から 返し ます
function string apc bin dump array $files array $user_vars	指定 し た ファイル および ユーザー 変数 の バイナリダンプ を 取得 する
function apc bin dumpfile $filename	the filename where the dump is being saved
function apc bin dumpfile $flags	flags passed to the filename stream
function apc bin dumpfile $context	the context passed to the filename stream
function apc bin dumpfile $user_vars	the user variables being dumped
function apc bin dumpfile $files	the file names being dumped
function int apc bin dumpfile	the number of bytes written to the file otherwise false if apc is not enabled filename is an invalid file name filename can &# 0 3 9 ; t be opened the file dump can &# 0 3 9 ; t be completed e
function int apc bin dumpfile array $files array $user_vars string $filename int $flags resource $context	キャッシュ さ れ た ファイル や ユーザー 変数 の バイナリダンプ を ファイル に 出力 する
function apc bin load $data	読み込む バイナリダンプ
function apc bin load $flags	apc _bin _verify _crc 3 2 、 apc _bin _verify _md5 あるい は その 両方
function bool apc bin load	バイナリダンプ の 読み込み に 成功 し た 場合 に true 、 それ 以外 の 場合 に false を 返し ます
function bool apc bin load string $data int $flags	バイナリダンプ を apc の ファイル / ユーザーキャッシュ に 読み込む
function apc bin loadfile $flags	apc _bin _verify _crc 3 2 、 apc _bin _verify _md5 あるい は その 両方
function apc bin loadfile $context	ファイル の コンテキスト
function apc bin loadfile $filename	ダンプ を 含む ファイル の 名前
function bool apc bin loadfile	バイナリダンプ の 読み込み に 成功 し た 場合 に true 、 それ 以外 の 場合 に false を 返し ます
function bool apc bin loadfile string $filename resource $context int $flags	バイナリダンプ を ファイル から apc の ファイル / ユーザーキャッシュ に 読み込む
function apc cache info $limited	limited が true の 場合 は 、 返り値 に キャッシュエントリ の 個々 の 一覧 が 含まれ ませ ん
function apc cache info $cache_type	cache _type が & quot ; user & quot ; の 場合 は ユーザーキャッシュ の 情報 を 返し ます
function array apc cache info	キャッシュ さ れ た データ （ および メタデータ ） の 配列 を 返し ます
function array apc cache info string $cache_type bool $limited	apc の データ から 、 キャッシュ さ れ た 情報 を 取得 する
function apc clear cache $cache_type	cache _type が & quot ; user & quot ; の 場合 は ユーザーキャッシュ が クリア さ れ ます
function bool apc clear cache	常 に true を 返し ます
function bool apc clear cache string $cache_type	apc キャッシュ を クリア する
function apc define constants $constants	constant _name = & gt ; value 形式 の 連想 配列
function apc define constants $key	key は 、 格納 さ れる 定数 群 の 名前 を 表し ます
function apc define constants $case_sensitive	デフォルト で は 、 定数 名 の 大文字 ・ 小文字 は 区別 さ れ ます
function bool apc define constants	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool apc define constants string $key array $constants bool $case_sensitive	定数 の 組 を 定義 し 、 それ を 取得 あるい は 一括 定義 する
function apc delete file $keys	削除 し たい ファイル
function mixed apc delete file	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function mixed apc delete file mixed $keys	ファイル を opcode キャッシュ から 削除 する
function apc delete $key	（ apc _store を 用い て ） 値 を 格納 する 際 に 使用 さ れ た key
function mixed apc delete	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function mixed apc delete string $key	格納 さ れ て いる 変数 を キャッシュ から 取り除く
function apc exists $keys	キー を 含む 文字 列 、 あるい は 文字列 の 配列
function mixed apc exists	キー が 存在 する 場合 に true 、 それ 以外 の 場合 に false を 返し ます
function mixed apc exists mixed $keys	apc キー が 存在 する かど う か を 調べる
function apc fetch $key	( apc _store を 用い て 値 を 格納 する 際 に 使用 さ れ た key
function apc fetch $success	成功 し た ば あい に true 、 失敗 し た 際 に false が 設定 さ れ ます
function mixed apc fetch	成功 し た 場合 に 格納 さ れ て い た 変数 あるい は 配列 、 失敗 し た 場合 に false を 返し ます
function mixed apc fetch mixed $key bool $success	格納 さ れ て いる 変数 を キャッシュ から 取得 する
function apc load constants $case_sensitive	デフォルト で は 、 定数 名 の 大文字 ・ 小文字 は 区別 さ れ ます
function apc load constants $key	取得 し たい 定数 群 （ apc _define _constants を 使用 し て 格納 さ れ た もの ）
function bool apc load constants	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool apc load constants string $key bool $case_sensitive	定数 群 を キャッシュ から 読み込む
function apc sma info $limited	false デフォルト を 設定 する と 、 apc _sma _info は 各 セグメント の 詳細 な 情報 を 返し ます
function array apc sma info	共有 メモリ 割り当て データ の 配列 を 返し ます
function array apc sma info bool $limited	apc の 共有 メモリ 割り当て に関する 情報 を 取得 する
function apc store $var	格納 する 変数
function apc store $values	名前 を キー 、 変数 を 値 に 指定 し ます
function apc store $key	この 名前 を 用い て 変数 を 格納 し ます
function apc store $ttl	有効 期間
function bool apc store	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool apc store string $key mixed $var int $ttl	変数 を データ 領域 に キャッシュ する
function apd breakpoint $debug_level	xxx _trace 定数 の 組み合わせ による 整数 値
function bool apd breakpoint	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool apd breakpoint int $debug_level	インタプリタ の 処理 を 停止 し 、 ソケット から の cr を 待つ
function apd clunk $warning	スロー する 警告
function apd clunk $delimiter	区切り 文字
function void apd clunk string $warning string $delimiter	警告 と コールスタック を スロー する
function apd continue $debug_level	xxx _trace 定数 の 組み合わせ による 整数 値
function bool apd continue	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool apd continue int $debug_level	インタプリタ を 再開 する
function apd croak $warning	スロー する 警告
function apd croak $delimiter	区切り 文字
function void apd croak string $warning string $delimiter	エラー と コールスタック を スロー し 、 終了 する
function array apd dump persistent resources	現在 の コールスタック を 含む 配列 を 返し ます
function array apd dump persistent resources	すべて の 持続 的 な リソース を 配列 で 返す
function apd echo $output	デバッグ さ れ た 変数
function bool apd echo	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool apd echo string $output	デバッグ 用 ソケット に 表示 する
function apd set session trace socket $port	任意 の ポート を 使用 でき ます が 、 できる だけ 大きめ の 数 を 使用 する ほう が いい でしょ う
function apd set session trace socket $tcp_server	tcp サーバー の ip あるい は unix ドメインソケット ファイル など
function apd set session trace socket $socket_type	ファイルベース の ソケット なら af _unix 、 標準 の tcp / ip なら apd _af _inet
function apd set session trace socket $debug_level	xxx _trace 定数 の 組み合わせ による 整数 値
function bool apd set session trace socket	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool apd set session trace socket string $tcp_server int $socket_type int $port int $debug_level	リモートセッション の デバッグ を 開始 する
function apd set session trace $dump_directory	プロファイル の ダンプファイル を 書き込む ディレクトリ
function apd set session trace $debug_level	xxx _trace 定数 の 組み合わせ による 整数 値
function void apd set session trace int $debug_level string $dump_directory	セッション の デバッグ を 開始 する
function apd set session $debug_level	xxx _trace 定数 の 組み合わせ による 整数 値
function void apd set session int $debug_level	現在 の デバッグレベル を 変更 あるい は 設定 する
function array change key case $array	処理 を 行う 配列
function array change key case $case	case _upper あるい は case _lower デフォルト
function array array change key case	すべて の キー を 小文 字 あるい は 大文字 に し た 配列 を 返し ます
function array array change key case array $array int $case	配列 の すべ て の キー の 大文 字小 文字 を 変更 する
function array chunk $size	各 部分 の サイズ
function array chunk $array	処理 を 行う 配列
function array chunk $preserve_keys	true の 場合 は キー を その まま 保持 し ます
function array array chunk	数 値添 字 の 多次 元 配列 を 返し ます
function array array chunk array $array int $size bool $preserve_keys	配列 を 分割 する
function array column $column_key	値 を 返し たい カラム
function array column $input	値 を 取り出し たい 多次 元配 列 あるい は オブジェクト の 配列
function array column $index_key	返す 配列 の インデックス として 使う カラム
function array array column	入力 配列 の 単一 の カラム を 表す値 の 配列 を 返し ます
function array array column array $input mixed $column_key mixed $index_key	入力 配列 から 単一 の カラム の 値 を 返す
function array count values $array	値 を 数える 配列
function array array count values	array の キー と その 登場 回数 を 組み合わせ た 連想 配列 を 返し ます
function array array count values array $array	配列 の 値 の 数 を 数える
function array diff assoc	さらに 比較 する 対象 と なる 配列
function array diff assoc $array2	比較 する 対象 と なる 配列
function array diff assoc $array1	比較元 の 配列
function array array diff assoc	array 1 の 要素 の うち 、 その 他 の 配列 のい ずれ に も 含まれ ない もの だけ を 残し た 配列 を 返し ます
function array array diff assoc array $array1 array $array2	追加 さ れ た 添字 の 確認 を 含め て 配列 の 差 を 計算 する
function array diff ukey	さらに 比較 する 対象 と なる 配列
function array diff ukey $array2	比較 する 対象 と なる 配列
function array diff ukey $key_compare_func	比較 関数 は 、 最初 の 引数 と 二番目 の 引数 の 比較 結果 を 返し ます
function array diff ukey $array1	比較元 の 配列
function array array diff ukey	array 1 の 要素 の うち 、 その 他 の 配列 のい ずれ に も 含まれ ない もの だけ を 残し た 配列 を 返し ます
function array array diff ukey array $array1 array $array2 callable $key_compare_func	キー を 基準 に し 、 コールバック 関数 を 用い て 配列 の 差 を 計算 する
function array fill keys $value	埋め たい 値
function array fill keys $keys	キー として 使用 する 値 の 配列
function array array fill keys	値 を 埋め た 配列 を 返し ます
function array array fill keys array $keys mixed $value	キー を 指定 し て 、 配列 を 値 で 埋める
function array fill $num	挿入 する 要素 数
function array fill $value	要素 に 使用 する 値
function array fill $start_index	返さ れる 配列 の 最初 の インデックス
function array array fill	値 を 埋め た 配列 を 返し ます
function array array fill int $start_index int $num mixed $value	配列 を 指定 し た 値 で 埋める
function array filter $array	処理 する 配列
function array filter $callback	使用 する コールバック 関数
function array filter $flag	引数 として 、 何 を callback に 送る の か を 決める フラグ
function array array filter	フィルタリング さ れ た 結果 の 配列 を 返し ます
function array array filter array $array callable $callback int $flag	コールバック 関数 を 使用 し て 、 配列 の 要素 を フィルタリング する
function array intersect	さら に それ 以外 の 配列
function array intersect $array1	値 を 調べる も とと なる 配列
function array intersect $array2	値 を 比較 する 対象 と なる 配列
function array array intersect	array 1 の 値 の うち 、 すべて の 引数 に 存在 する 値 の もの を 含む 連想 配列 を 返し ます
function array array intersect array $array1 array $array2	配列 の 共通項 を 計算 する
function array key exists $key	調べる 値
function array key exists $array	キー が 存在 する かど う か を 調べ たい 配列
function bool array key exists	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool array key exists mixed $key array $array	指定 し た キー また は 添字 が 配列 に ある かど う か を 調べる
function array map $array1	コールバック 関数 を 適用 する 配列
function array map	コールバック 関数 に 渡す 引数 を 指定 する 配列 の 可変 リスト
function array map $callback	配列 の 各要 素 に 適用 する コールバック 関数
function array array map	array 1 の 各要 素 に callback 関数 を 適用 し た 後 、 その 全 て の 要素 を 含む 配列 を 返し ます
function array array map callable $callback array $array1	指定 し た 配列 の 要素 に コールバック 関数 を 適用 する
function array multisort $array1	ソート し たい 配列
function array multisort $array1_sort_order	先ほど の 引数 array の ソート 順
function array multisort $array1_sort_flags	先ほど の 引数 array の ソート 方法
function array multisort	追加 の 配列
function bool array multisort	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool array multisort array $array1 mixed $array1_sort_order mixed $array1_sort_flags	複数 の 多次 元 の 配列 を ソート する
function array pop $array	値 を 取り出す 配列
function mixed array pop	配列 array の 最後 の 値 を 取り出し て 返し ます
function mixed array pop array $array	配列 の 末尾 から 要素 を 取り除く
function array push $array	入力 の 配列
function array push $value1	array の 最後 に 追加 する 値
function int array push	処理後 の 配列 の 中 の 要素 の 数 を 返し ます
function int array push array $array mixed $value1	一つ 以上 の 要素 を 配列 の 最後 に 追加 する
function array rand $array	入力 の 配列
function array rand $num	取得 する エントリ の 数 を 指定 し ます
function mixed array rand	エントリ を 一つ だけ 取得 する 場合 、 array _rand は ランダム な エントリ の キー を 返し ます
function mixed array rand array $array int $num	配列 から 一つ 以上 の 要素 を ランダム に 取得 する
function array reduce $array	入力 の 配列
function array reduce $callback	mixed callback mixed $ carry mixed $ item carry 前回 の 反復 処理 の 結果 を 保持 し ます
function array reduce $carry	前回 の 反復 処理 の 結果 を 保持 し ます
function array reduce $item	現在 の 反復 処理 の 値 を 保持 し ます
function array reduce $initial	オプション の intial が 利用 可能 な 場合 、 処理 の 最初 で 使用 さ れ たり 、 配列 が 空 の 場合 の 最終 結果 として 使用 さ れ ます
function mixed array reduce	結果 の 値 を 返し ます
function mixed array reduce array $array callable $callback mixed $initial	コールバック 関数 を 用い て 配列 を 普通 の 値 に 変更 する こと により 、 配列 を 再帰 的 に 減らす
function array replace recursive	オプション
function array replace recursive $array2	置き換え たい 要素 を 含む 配列
function array replace recursive $array1	要素 を 置き 換え たい 配列
function array array replace recursive	配列 を 返し ます
function array array replace recursive array $array1 array $array2	渡さ れ た 配列 の 要素 を 再帰 的 に 置き 換える
function array replace $array2	置き換え たい 要素 を 含む 配列
function array replace	置き換え たい 要素 を 含む 、 さらに 別 の 配列
function array replace $array1	要素 を 置き 換え たい 配列
function array array replace	配列 を 返し ます
function array array replace array $array1 array $array2	渡さ れ た 配列 の 要素 を 置き 換える
function array reverse $array	入力 の 配列
function array reverse $preserve_keys	true の 場合 は 数値 の キー を 保持 し ます
function array array reverse	逆転 さ せ た 配列 を 返し ます
function array array reverse array $array bool $preserve_keys	要素 を 逆順 に し た 配列 を 返す
function array search $strict	オプション の 3 番目 の パラメータ strict に true が 指定 さ れ た 場合 、 array _search は identical 要素 を haystack から 探し ます
function array search $haystack	配列
function array search $needle	検索 し たい 値
function mixed array search	needle が 見つかっ た 場合 に 配列 の キー 、 それ 以外 の 場合 に false を 返し ます
function mixed array search mixed $needle array $haystack bool $strict	指定 し た 値 を 配列 で 検索 し 、 見つかっ た 場合 に 対応 する キー を 返す
function array shift $array	入力 の 配列
function mixed array shift	取り出し た 値 を 返し ます
function mixed array shift array $array	配列 の 先頭 から 要素 を 一つ 取り出す
function array splice $replacement	配列 replacement が 指定 さ れ た 場合 、 削除 さ れ た 要素 は 、 この 配列 の 要素 で 置換 さ れ ます
function array splice $offset	offset が 正 の 場合 、 削除 さ れる 部分 は 配列 input の 最初 から 指定 オフセット の ぶん だけ 進ん だ 位置 から と なり ます
function array splice $length	length が 省略 さ れ た 場合 、 offset から 配列 の 最後 まで が 全 て 削除 さ れ ます
function array splice $input	入力 の 配列
function array array splice	抽出 さ れ た 要素 を 含む 配列 を 返し ます
function array array splice array $input int $offset int $length mixed $replacement	配列 の 一部 を 削除 し 、 他 の 要素 で 置換 する
function array sum $array	入力 の 配列
function number array sum	値 の 合計 を 整数 また は float として 返し ます
function number array sum array $array	配列 の 中 の 値 の 合計 を 計算 する
function array udiff $array2	2 番目 の 配列
function array udiff $value_compare_func	比較用 の コールバック 関数
function array udiff $array1	最初 の 配列
function array array udiff	他 の 引数 のい ずれ に も 存在 し ない array 1 の 値 の 全て を 有する 配列 を 返し ます
function array array udiff array $array1 array $array2 callable $value_compare_func	データ の 比較 に コールバック 関数 を 用い 、 配列 の 差 を 計算 する
function array uintersect assoc $value_compare_func	比較 関数 は 、 最初 の 引数 と 二番目 の 引数 の 比較 結果 を 返し ます
function array uintersect assoc $array2	2 番目 の 配列
function array uintersect assoc $array1	最初 の 配列
function array array uintersect assoc	全て の 引数 に 現れる array 1 の 全て の 値 を 含む 配列 を 返し ます
function array array uintersect assoc array $array1 array $array2 callable $value_compare_func	データ の 比較 に コールバック 関数 を 用い 、 追加 さ れ た 添字 の 確認 も 含め て 配列 の 共通項 を 計算 する
function array unshift $array	入力 の 配列
function array unshift $value1	加える 最初 の 値
function int array unshift	処理後 の array の 要素 の 数 を 返し ます
function int array unshift array $array mixed $value1	一つ 以上 の 要素 を 配列 の 最初 に 加える
function array values $array	配列
function array array values	数 値添 字 の 値 の 配列 を 返し ます
function array array values array $array	配列 の 全て の 値 を 返す
function array walk recursive $array	入力 の 配列
function array walk recursive $callback	通常 、 callback は 引数 を 二つ とり ます
function array walk recursive $userdata	オプション の userdata パラメータ が 指定 さ れ た 場合 、 コールバック 関数 callback へ の 三番目 の 引数 として 渡さ れ ます
function bool array walk recursive	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool array walk recursive array $array callable $callback mixed $userdata	配列 の 全て の 要素 に 、 ユーザー 関数 を 再帰 的 に 適用 する
function asin $arg	処理 する 角度
function float asin	arg の アークサイン を ラジアン で 返し ます
function float asin float $arg	逆正弦 （ アークサイン ）
function asinh $arg	処理 する 角度
function float asinh	arg の アークハイパボリックサイン を 返し ます
function float asinh float $arg	逆双 曲線 正弦 （ アークハイパボリックサイン ）
function asort $array	入力 の 配列
function asort $sort_flags	オプション の パラメータ sort _flags により ソート の 動作 を 修正 可能 です
function bool asort	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool asort array $array int $sort_flags	連想キー と 要素 と の 関係 を 維持 しつつ 配列 を ソート する
function assert options $value	オプション に 指定 する 新しい 値
function assert options $what	assert オプション オプション ini 設定 デフォルト 値 説明 assert _active assert
function mixed assert options	その オプション の 元 の 値 、 あるい は エラー 時 に false を 返し ます
function mixed assert options int $what mixed $value	様々 な assert フラグ を 設定 / 取得 する
function atan $arg	処理 する 引数
function float atan	arg の アークタンジェント を ラジアン で 返し ます
function float atan float $arg	逆正接 （ アークタンジェント ）
function autoload $class	ロード する クラス の 名前
function void autoload string $class	未定義 の クラス の ロード を 試みる
function base64 decode $data	デコード さ れる データ
function base64 decode $strict	入力 に base 6 4 アルファベット の 範囲 外 の 文字 が 含まれる 場合 に false を 返す
function string base64 decode	も と の データ を 返し ます
function string base64 decode string $data bool $strict	mime base 6 4 方式 により エンコード さ れ た データ を デコード する
function base64 encode $data	エンコード する データ
function string base64 encode	エンコード さ れ た データ を 文字列 で 返し ます
function string base64 encode string $data	mime base 6 4 方式 で データ を エンコード する
function bbcode destroy $bbcode_container	bbcode _create が 返す bbcode _container
function bool bbcode destroy	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool bbcode destroy resource $bbcode_container	bbcode _container リソース を 閉じる
function bbcode set arg parser $bbcode_container	bbcode _create が 返す bbcode _container リソース
function bbcode set arg parser $bbcode_arg_parser	bbcode _create が 返す bbcode _container リソース
function bool bbcode set arg parser	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool bbcode set arg parser resource $bbcode_container resource $bbcode_arg_parser	別 の パーサ を アタッチ し て 、 引数 の パース 用 に 別 の ルールセット を 設定 する
function bbcode set flags $bbcode_container	bbcode _create が 返す bbcode _container リソース
function bbcode set flags $mode	bbcode _set _flags _* 定数 のい ずれ か
function bbcode set flags $flags	bbcode _container オプション に 適用 する フラグ の セット
function bool bbcode set flags	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool bbcode set flags resource $bbcode_container int $flags int $mode	パーサ の オプション を 設定 あるい は 変更 する
function bccomp $scale	オプション の scale パラメータ で 、 小数 点以 下 の 桁数 を 指定 し ます
function bccomp $right_operand	右 オペランド を 表す 文字列
function bccomp $left_operand	左 オペランド を 表す 文字列
function int bccomp	ふたつ の オペランド が 等しけれ ば 0 、 left _operand が right _operand より 大きけれ ば 返り値 は 1 、 小さけれ ば - 1 を 返し ます
function int bccomp string $left_operand string $right_operand int $scale	2 つの 任意 精度 数値 を 比較 する
function bcmod $modulus	法 を 表す 文字列
function bcmod $left_operand	左 オペランド を 表す 文字列
function string bcmod	剰余 を 文字列 で 返し ます
function string bcmod string $left_operand string $modulus	2 つの 任意 精度 数値 の 剰余 を 取得 する
function bcmul $scale	この オプションパラメータ を 使用 し て 、 結果 の 小数 点以 下 の 桁数 を 指定 し ます
function bcmul $right_operand	右 オペランド を 表す 文字列
function bcmul $left_operand	左 オペランド を 表す 文字列
function string bcmul	結果 を 文字列 で 返し ます
function string bcmul string $left_operand string $right_operand int $scale	2つ の 任意 精度 数値 の 乗算 を 行う
function bcompiler load exe $filename	exe ファイル の パス を 表す 文字列
function bool bcompiler load exe	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool bcompiler load exe string $filename	bcompiler の exe ファイル を 読み込み 、 クラス を 生成 する
function bcompiler load $filename	bzcompress さ れ た ファイル の パス を 表す 文字列
function bool bcompiler load	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool bcompiler load string $filename	bz 圧縮 さ れ た ファイル を 読み込み 、 クラス を 生成 する
function bcompiler parse class $class	クラス 名 を 表す 文字列
function bool bcompiler parse class	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool bcompiler parse class string $class string $callback	クラス の バイトコード を 読み込み 、 ユーザー 関数 を コール する
function bcompiler read $filehandle	fopen が 返す ファイルハンドル
function bool bcompiler read	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool bcompiler read resource $filehandle	ファイルハンドル を 読み込み 、 クラス を 生成 する
function bcompiler write class $className	クラス 名 を 表す 文字列
function bcompiler write class $filehandle	fopen が 返す ファイルハンドル
function bool bcompiler write class	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool bcompiler write class resource $filehandle string $className string $extends	定義 し た クラス を バイトコード として 書き込む
function bcompiler write constant $constantName	定義済み の 定数 名 を 表す 文字列
function bcompiler write constant $filehandle	fopen が 返す ファイルハンドル
function bool bcompiler write constant	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool bcompiler write constant resource $filehandle string $constantName	定義 し た 定数 を バイトコード として 書き込む
function bcompiler write footer $filehandle	fopen が 返す ファイルハンドル
function bool bcompiler write footer	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool bcompiler write footer resource $filehandle	コンパイル さ れ た データ の 終了 を 示す 文字 \ x 0 0 を 書き込む
function bcompiler write function $functionName	関数 名 を 表す 文字列
function bcompiler write function $filehandle	fopen が 返す ファイルハンドル
function bool bcompiler write function	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool bcompiler write function resource $filehandle string $functionName	定義 し た 関数 を バイトコード として 書き込む
function bcompiler write header $write_ver	以前 に 使わ れ て い た フォーマット で バイトコード を 書き込む際 に 使用 し ます
function bcompiler write header $filehandle	fopen が 返す ファイルハンドル
function bool bcompiler write header	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool bcompiler write header resource $filehandle string $write_ver	bcompiler の ヘッダ を 書き込む
function bcpow $scale	この オプションパラメータ を 使用 し て 、 結果 の 小数 点以 下 の 桁数 を 指定 し ます
function bcpow $right_operand	右 オペランド を 表す 文字列
function bcpow $left_operand	左 オペランド を 表す 文字列
function string bcpow	結果 を 文字列 で 返し ます
function string bcpow string $left_operand string $right_operand int $scale	任意 精度 数値 を べき 乗 する
function bcpowmod $modulus	法 を 表す 文字列
function bcpowmod $scale	この オプションパラメータ を 使用 し て 、 結果 の 小数 点以 下 の 桁数 を 指定 し ます
function bcpowmod $right_operand	右 オペランド を 表す 文字列
function bcpowmod $left_operand	左 オペランド を 表す 文字列
function string bcpowmod	結果 を 文字列 で 返し ます
function string bcpowmod string $left_operand string $right_operand string $modulus int $scale	任意 精度 数値 の べき 乗 の 、 指定 し た 数値 による 剰余
function bcscale $scale	スケール
function bool bcscale	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool bcscale int $scale	すべて の bc 演算 関数 に おける デフォルト の スケール を 設定 する
function bcsqrt $scale	この オプションパラメータ を 使用 し て 、 結果 の 小数 点以 下 の 桁数 を 指定 し ます
function bcsqrt $operand	オペランド を 表す 文字列
function string bcsqrt	平方根 を 文字列 で 返し ます
function string bcsqrt string $operand int $scale	任意 精度 数値 の 平方根 を 取得 する
function bcsub $scale	この オプションパラメータ を 使用 し て 、 結果 の 小数 点以 下 の 桁数 を 指定 し ます
function bcsub $right_operand	右 オペランド を 表す 文字列
function bcsub $left_operand	左 オペランド を 表す 文字列
function string bcsub	減算 の 結果 を 文字列 で 返し ます
function string bcsub string $left_operand string $right_operand int $scale	任意 精度 数値 の 減算 を 行う
function bindec $binary_string	変換 し たい 2 進数 文字列
function number bindec	binary _string を 1 0 進 に 変換 し た 値 を 返し ます
function number bindec string $binary_string	2 進数 を 1 0 進数 に 変換 する
function boolval $var	boolean に 変換 し たい スカラー 値
function boolean boolval	var の boolean として の 値 を 返し ます
function boolean boolval mixed $var	変数 の boolean として の 値 を 取得 する
function bson decode $bson	復元 し たい bson
function array bson decode	bson オブジェクト を 復元 し た もの を 返し ます
function array bson decode string $bson	bson オブジェクト を php の 配列 に 復元 する
function bson encode $anything	変換 し たい 変数
function string bson encode	変換 し た 文字列 を 返し ます
function string bson encode mixed $anything	php の 変数 を bson 文字列 に 変換 する
function bzclose $bz	ファイルポインタ
function int bzclose	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function int bzclose resource $bz	bzip 2 ファイル を 閉じる
function bzcompress $source	圧縮 する 文字列
function bzcompress $workfactor	繰り返し が 多い 、 最悪 の 入力 データ の 場合 の 圧縮 処理 の 動作 を 制御 し ます
function bzcompress $blocksize	圧縮 時 の ブロック 長 を 指定 し ます
function mixed bzcompress	圧縮 さ れ た 文字 列 、 もしく は エラー 時 は エラー 数
function mixed bzcompress string $source int $blocksize int $workfactor	文字列 を bzip 2 形式 の データ に 圧縮 する
function bzdecompress $source	解凍 する 文字列
function bzdecompress $small	true の 場合 、 より メモリ の 消 費量 が 少ない 所要メモリ は 最大 2 3 0 0 k 程度 まで 少なく なり ます 別 の 圧縮 アルゴリズム が 使用 さ れ ます が 、 速度 は 約半 分 に なっ て しまい ます
function mixed bzdecompress	解凍 さ れ た 文字 列列 、 もしく は エラー 時 は エラー 数
function mixed bzdecompress string $source int $small	bzip 2 形式 の データ を 解凍 する
function bzerrno $bz	ファイルポインタ
function int bzerrno	整数 として の エラー 番号 を 返し ます
function int bzerrno resource $bz	bzip 2 エラー 番号 を 返す
function bzerror $bz	ファイルポインタ
function array bzerror	errno エントリ に エラーコード 、 errstr エントリ に エラーメッセージ を 持つ 連想 配列 を 返し ます
function array bzerror resource $bz	bzip 2 エラー 番号 と エラー 文字 列 を 配列 で 返す
function bzerrstr $bz	ファイルポインタ
function string bzerrstr	エラーメッセージ を 含む 文字 列 を 返し ます
function string bzerrstr resource $bz	bzip 2 エラー 文字 列 を 返す
function bzread $bz	ファイルポインタ
function bzread $length	指定 さ れ ない 場合 、 bzread は 一度 に 圧縮前 の 状態 で 1 0 2 4 バイト 読み込み ます
function string bzread	非 圧縮 データ 、 もしく は エラー 時 に false を 返し ます
function string bzread resource $bz int $length	バイナリ 対応 の bzip 2 ファイル 読み込み
function bzwrite $data	書き込む データ
function bzwrite $bz	ファイルポインタ
function bzwrite $length	指定 し た 場合 、 圧縮 前 の length バイト 分 の 書き込み が 終っ た か 、 data の 終端 に 達し た か で 書き込み は 終了 し ます
function int bzwrite	書き込ん だ バイト 数 、 もしく は エラー 時 に false を 返し ます
function int bzwrite resource $bz string $data int $length	バイナリ 対応 の bzip 2 ファイル へ の 書き込み
function cal days in month $calendar	計算 に 使用 する カレンダー
function cal days in month $month	選択 し た カレンダー に おける月
function cal days in month $year	選択 し た カレンダー に おける 年
function int cal days in month	指定 し た カレンダー の 、 その月 の 日数 を 返し ます
function int cal days in month int $calendar int $month int $year	指定 し た 年 と カレンダー について 、月 の 日数 を 返す
function chdb create $pathname	作成 する chdb の ファイルパス 名 指定 さ れ た パス と 同じ ファイル が 既 に ある 場合 は 上書き さ れ ます
function chdb create $data	chdb ファイル に 格納 する キー と 値 の ペア を 含ん だ 配列 キー と 値 は ファイル に 書き出さ れる 前 に 文字列 に 変換 さ れ ます
function bool chdb create	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool chdb create string $pathname array $data	chdb ファイル を 作成 する
function chdir $directory	新しい カレントディレクトリ
function bool chdir	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool chdir string $directory	ディレクトリ を 変更 する
function checkdate $year	年 は 1 から 3 2 7 6 7 の 間 と なり ます
function checkdate $month	月 は 1 から 1 2 の 間 と なり ます
function checkdate $day	日 は 、 指定 さ れ た month の 日数 の 範囲 内 に なり ます
function bool checkdate	指定 し た 日付 が 有効 な 場合 に true 、 そう で ない 場合 に false を 返し ます
function bool checkdate int $month int $day int $year	グレゴリオ 暦 の 日付 / 時刻 の 妥当性 を 確認 し ます
function checkdnsrr $host	host は 、 ドット で 4 つに 分け られ た 形式 の ip アドレス か 、 あるい は ホスト 名 です
function checkdnsrr $type	type は 、 a mx ns soa ptr cname aaaa a 6 srv naptr any のどれ か 一つ です
function bool checkdnsrr	レコード が 見つかっ た 場合 に true 、 何 も 見つ から ない か エラー が 発生 し た 場合 に false を 返し ます
function bool checkdnsrr string $host string $type	指定 し た インターネットホスト 名 もしく は ip アドレス に 対応 する dns レコード を 検索 する
function chgrp $filename	ファイル へ の パス
function chgrp $group	グループ 名 あるい は グループ 番号
function bool chgrp	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool chgrp string $filename mixed $group	ファイル の グループ を 変更 する
function chmod $mode	mode は 自動 的 に は 8 進数 と 見なさ れ ない の で 注意 し て くだ さい
function chmod $filename	ファイル へ の パス
function bool chmod	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool chmod string $filename int $mode	ファイル の モード を 変更 する
function chown $user	ユーザー 名 あるい は ユーザー 番号
function chown $filename	ファイル へ の パス
function bool chown	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool chown string $filename mixed $user	ファイル の 所有 者 を 変更 する
function class alias $autoload	元 の クラス が 見つ から ない 場合 に オートロード する かどう か
function class alias $alias	クラス の エイリアス 名
function class alias $original	元 と なる クラス
function bool class alias	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool class alias string $original string $alias bool $autoload	クラス の エイリアス を 作成 する
function class exists $class_name	クラス 名
function class exists $autoload	デフォルト で _ _ autoload を コール する かし ない か
function bool class exists	クラス class _name が 定義 さ れ て いる 場合 に true 、 それ 以外 の 場合 に false を 返し ます
function bool class exists string $class_name bool $autoload	クラス が 定義 済み か どう か を 確認 する
function class implements $class	オブジェクト クラス の インスタンス もしく は 文字列 クラス 名 あるい は インターフェイス 名 を 指定 し ます
function class implements $autoload	_ _autoload マジックメソッド を 通じ て 、 この 関数 に クラス を 自動 的 に ロード さ せる かど う か を 指定 し ます
function array class implements	成功 し た 場合 に 配列 、 エラー 時 に false を 返し ます
function array class implements mixed $class bool $autoload	与え られ た クラス あるい は インターフェイス が 実装 し て いる インターフェイス を 返す
function class parents $autoload	_ _autoload マジックメソッド を 通じ て 、 この 関数 に クラス を 自動 的 に ロード さ せる かど う か を 指定 し ます
function class parents $class	オブジェクト もしく は クラス の 文字列 を 指定 し ます
function array class parents	成功 し た 場合 に 配列 、 エラー 時 に false を 返し ます
function array class parents mixed $class bool $autoload	与え られ た クラス の 親 クラス を 返す
function class uses $class	オブジェクト クラス の インスタンス あるい は 文字列 クラス 名
function class uses $autoload	マジックメソッド _ _ autoload で 、 この 関数 から クラス を 自動 的 に 読み込ま せる かどう か
function array class uses	成功 し た 場合 に 配列 、 エラー 時 に は false を 返し ます
function array class uses mixed $class bool $autoload	指定 し た クラス が 使っ て いる トレイト を 返す
function cli set process title $title	新しい タイトル
function bool cli set process title	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool cli set process title string $title	プロセス の タイトル を 設定 する
function closedir $dir_handle	opendir が 事前 に オープン し た ディレクトリハンドル リソース
function void closedir resource $dir_handle	ディレクトリハンドル を クローズ する
function bool closelog	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool closelog	システムログ へ の 接続 を 閉じる
function string com create guid	guid を 文字列 で 返し ます
function string com create guid	グローバルユニーク id guid を 生成 する
function com event sink $sinkinterface	php は comobject に 関連 する タイプライブラリ で 指定 さ れ た デフォルト の ディスパッチインターフェイス を 使用 しよ う と し ます が 、 使用 さ せ たい インターフェイス 名 を sinkinterface に 指定 する こと で 、 それ を 上書き する こと が 可能 です
function com event sink $sinkobject	sinkobject に は 、 要求 さ れる ディスパッチ インターフェイス と 同じ 名前 の メソッド を 持つ クラス の インスタンス を 指定 する 必要 が あり ます
function bool com event sink	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool com event sink variant $comobject object $sinkobject mixed $sinkinterface	com オブジェクト の イベント を php オブジェクト に 接続 する
function com get active object $progid	progid は 、 アクセス し たい オブジェクト の progid あるい は clsid たとえ ば word
function com get active object $code_page	com クラス の 場合 と 同様 の 働き を し ます
function variant com get active object	要求 さ れ た オブジェクト が 実行 中 の 場合 は 、 他 の com オブジェクト と 同様 に スクリプト へ 返さ れ ます
function variant com get active object string $progid int $code_page	すで に 実行 中 の com オブジェクト の インスタンス へ の ハンドル を 返す
function com message pump $timeoutms	タイムアウト
function bool com message pump	タイムアウト の 前 に メッセージ が 到着 し た 場合 は 、 その メッセージ が 処理 さ れ て 関数 は true を 返し ます
function bool com message pump int $timeoutms	com メッセージ を 処理 し 、 timeoutms ミリ 秒 の 間待 つ
function com print typeinfo $dispinterface	結果 を 表示 し たい インターフェイス で 、 この インターフェイス は idispatch を 継承 し た もの です
function com print typeinfo $comobject	comobject は 、 com オブジェクト の インスタンス か あるい は タイプライブラリ の 名前 com _load _typelib の 規則 に し た がっ て 名前 解決 さ れ ます のいずれ か です
function com print typeinfo $wantsink	true の 場合 、 対応 する シンクインターフェイス が 代わり に 表示 さ れ ます
function bool com print typeinfo	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool com print typeinfo object $comobject string $dispinterface bool $wantsink	ディスパッチインターフェイス の ため に 、 php の クラス 定義 を 出力 する
function int connection aborted	クライアント と の 接続 が 切断 さ れ て いる 場合 に 1 、 それ 以外 の 場合 に 0 を 返し ます
function int connection aborted	クライアント と の 接続 が 切断 さ れ て いる かど う か を 調べる
function int connection status	接続 ステータス の ビットフィールド を 返し ます
function int connection status	接続 ステータス の ビットフィールド を 返す
function convert uudecode $data	uuencode さ れ た データ
function string convert uudecode	デコード し た データ を 文字列 で 返し ます
function string convert uudecode string $data	uuencode さ れ た 文字列 を デコード する
function cos $arg	ラジアン で 表し た 角度
function float cos	arg の コサイン を 返し ます
function float cos float $arg	余弦 （ コサイン ）
function cosh $arg	処理 する 引数
function float cosh	arg の ハイパボリックコサイン を 返し ます
function float cosh float $arg	双曲 線余 弦 （ ハイパボリックコサイン ）
function count chars $string	調べ たい 文字列
function count chars $mode	返り値 を 参照く ださい
function mixed count chars	mode の 値 により 、 count _chars は 以下 の 値 の どれ か を 返し ます
function mixed count chars string $string int $mode	文字列 で 使用 さ れ て いる 文字 に関する 情報 を 返す
function count $array_or_countable	配列 あるい は countable オブジェクト
function count $mode	オプション の mode 引数 が count _recursive また は 1 に セット さ れ た 場合 、 count は 再帰 的 に 配列 を カウント し ます
function int count	array _or _countable に 含まれる 要素 の 数 を 返し ます
function int count mixed $array_or_countable int $mode	変数 に 含ま れる すべ て の 要素 、 あるい は オブジェクト に 含まれる 何か の 数 を 数える
function string crack getlastmessage	直近 の 強度 チェック による メッセージ 、 あるい は チェック が まだ 行わ れ て い ない 場合 は false を 返し ます
function string crack getlastmessage	直近 の 強度 チェック から の メッセージ を 返す
function create function $args	関数 の 引数
function create function $code	関数 の コード
function string create function	一意 な 関数 名 を 表す 文字 列 、 あるい は エラー 時 に false を 返し ます
function string create function string $args string $code	匿名 関数 ラムダ 形式 を 作成 する
function crypt $salt	ハッシュ の も とと なる salt 文字列
function crypt $str	ハッシュ し たい 文字列
function string crypt	ハッシュ し た 文字列 を 返し ます
function string crypt string $str string $salt	文字列 の 一方向 の ハッシュ 化 を 行う
function ctype alnum $text	調べる 文字列
function bool ctype alnum	text のすべて の 文字 が 英字 また は 数字 だっ た 場合 に true 、 そう で ない 場合 に false を 返し ます
function bool ctype alnum string $text	英数 字 か どう か を 調べる
function ctype cntrl $text	調べる 文字列
function bool ctype cntrl	text のすべて の 文字 が 現在 の ロケール の 制御 文字 だっ た 場合 に true 、 そう で ない 場合 に false を 返し ます
function bool ctype cntrl string $text	制御 文字 か どう か を 調べる
function ctype digit $text	調べる 文字列
function bool ctype digit	string text のすべて の 文字 が 1 0 進数 字 だっ た 場合 に true 、 そう で ない 場合 に false を 返し ます
function bool ctype digit string $text	数字 か どう か を 調べる
function ctype lower $text	調べる 文字列
function bool ctype lower	text のすべて の 文字 が カレント の ロケール で 小文字 だっ た 場合 に true 、 そう で ない 場合 に false を 返し ます
function bool ctype lower string $text	小文字 か どう か を 調べる
function ctype print $text	調べる 文字列
function bool ctype print	text のすべて の 文字 が （ 空白 を 含め て ） 実際 に 出力 を 行う 場合 に true 、 text に 制御 文字 また は まっ たく 出力 も 制御 も 行わ ない 文字 が 含まれる 場合 に false を 返し ます
function bool ctype print string $text	印字 可能 な 文字 か どう か を 調べる
function ctype punct $text	調べる 文字列
function bool ctype punct	text のすべて の 文字 が 出力 可能 で あり 、 かつ 文字 でも 数字 でも 空白 で も なかっ た 場合 に true 、 そう で ない 場合 に false を 返し ます
function bool ctype punct string $text	空白 、 英数 字以 外 の 出力 可能 な 文字 か どう か を 調べる
function curl close $ch	curl _init が 返す curl ハンドル
function void curl close resource $ch	curl セッション を 閉じる
function curl copy handle $ch	curl _init が 返す curl ハンドル
function resource curl copy handle	新しい curl ハンドル を 返し ます
function resource curl copy handle resource $ch	curl ハンドル を 、 その 設定 も 含め て コピー する
function curl errno $ch	curl _init が 返す curl ハンドル
function int curl errno	エラー 番号 を 返し ます
function int curl errno resource $ch	直近 の エラー 番号 を 返す
function curl error $ch	curl _init が 返す curl ハンドル
function string curl error	エラーメッセージ 、 あるい は エラー が 発生 し なかっ た 場合 は & # 0 3 9 ;& # 0 3 9 ; 空文字 を 返し ます
function string curl error resource $ch	現在 の セッション に関する 直近 の エラー 文字 列 を 返す
function curl escape $ch	curl _init が 返す curl ハンドル
function curl escape $str	エンコード する 文字列
function string curl escape	エスケープ し た 文字列 を 返し ます
function string curl escape resource $ch string $str	指定 し た 文字列 を url エンコード する
function curl exec $ch	curl _init が 返す curl ハンドル
function mixed curl exec	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function mixed curl exec resource $ch	curl セッション を 実行 する
function curl getinfo $ch	curl _init が 返す curl ハンドル
function curl getinfo $opt	これ は 、 以下 のい ずれ か の 定数 と なり ます
function mixed curl getinfo	opt を 指定 し た 場合 は 、 その 値 を 返し ます
function mixed curl getinfo resource $ch int $opt	指定 し た 伝送 に関する 情報 を 得る
function curl multi add handle $mh	curl _multi _init が 返す curl マルチハンドル
function curl multi add handle $ch	curl _init が 返す curl ハンドル
function int curl multi add handle	成功 し た 場合 に 0 、 あるい は エラーコード curlm _xxx のいずれか を 返し ます
function int curl multi add handle resource $mh resource $ch	curl マルチハンドル に 、 通常 の curl ハンドル を 追加 する
function curl multi close $mh	curl _multi _init が 返す curl マルチハンドル
function void curl multi close resource $mh	curl ハンドル の セット を 閉じる
function curl multi info read $mh	curl _multi _init が 返す curl マルチハンドル
function curl multi info read $msgs_in_queue	まだ キュー の 中 に 残っ て いる メッセージ の 数
function array curl multi info read	成功 し た 場合 に メッセージ の 連想 配列 、 失敗 し た 場合 に false を 返し ます
function array curl multi info read resource $mh int $msgs_in_queue	現在 の 転送 について の 情報 を 表示 する
function curl setopt array $options	設定 する オプション と その 値 を 指定 し た 配列
function curl setopt array $ch	curl _init が 返す curl ハンドル
function bool curl setopt array	すべて の オプション が うまく 設定 でき た 場合 に true を 返し ます
function bool curl setopt array resource $ch array $options	curl 転送 用 の 複数 の オプション を 設定 する
function curl share close $sh	curl _share _init が 返す curl 共有 ハンドル
function void curl share close resource $sh	curl 共有 ハンドル を 閉じる
function resource curl share init	&quot ;curl share handle &quot ; 型 の リソース を 返し ます
function resource curl share init	curl 共有 ハンドル を 初期化 する
function curl share setopt $sh	curl _share _init が 返す curl 共有 ハンドル
function curl share setopt $option	オプション 説明 curlshopt _share 共有 さ せる データ の 種類 を 指定 し ます
function curl share setopt $value	値 説明 curl _lock _data _cookie クッキー の データ を 共有 する
function bool curl share setopt	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool curl share setopt resource $sh int $option string $value	curl 共有 ハンドル の オプション を 設定 する
function curl unescape $ch	curl _init が 返す curl ハンドル
function curl unescape $str	デコード 対象 の 文字列
function string curl unescape	デコード し た 文字列 を 返し ます
function string curl unescape resource $ch string $str	url エンコード さ れ た 文字列 を デコード する
function cyrus close $connection	接続 ハンドル
function bool cyrus close	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool cyrus close resource $connection	cyrus imap サーバー へ の 接続 を 閉じる
function cyrus connect $port	ポート 番号
function cyrus connect $host	cyrus imap ホスト 名
function resource cyrus connect	成功 し た 場合 に 接続 ハンドラ 、 失敗 し た 場合 に false を 返し ます
function resource cyrus connect string $host string $port int $flags	cyrus imap サーバー に 接続 する
function cyrus query $query	クエリ 文字列
function cyrus query $connection	接続 ハンドル
function array cyrus query	text 、 msgno 、 そして keyword の キー を 持つ 連想 配列 を 返し ます
function array cyrus query resource $connection string $query	cyrus imap サーバー へ クエリ を 送信 する
function string date default timezone get	string を 返し ます
function string date default timezone get	スクリプト 中 の 日付 / 時刻 関数 で 使用 さ れる デフォルトタイムゾーン を 取得 する
function date default timezone set $timezone_identifier	タイムゾーン id
function bool date default timezone set	この 関数 は 、 timezone _identifier が 無効 なもの で ある 場合 に false 、 それ 以外 の 場合 に true を 返し ます
function bool date default timezone set string $timezone_identifier	スクリプト 中 の 日付 / 時刻 関数 で 使用 さ れる デフォルトタイムゾーン を 設定 する
function date parse from format $date	日付 を あらわす 文字列
function date parse from format $format	datetime :: createfromformat が 理解 できる フォーマット
function array date parse from format	指定 し た 日付 について の 詳細 情報 を 連想 配列 で 返し ます
function array date parse from format string $format string $date	指定 し た 書式 で フォーマット さ れ た 日付 について の 情報 を 取得 する
function db2 autocommit $value	以下 の 定数 のい ずれ か
function db2 autocommit $connection	db 2 _ connect あるい は db2 _ pconnect が返し た 有効 な データベース 接続 リソース
function db2 autocommit $DB2_AUTOCOMMIT_ON	autocommit を 有効 に し ます
function db2 autocommit $DB2_AUTOCOMMIT_OFF	autocommit を 無効 に し ます
function mixed db2 autocommit	db 2 _ autocommit に connection パラメータ のみ を 渡し た 場合 、 指定 し た 接続 の autocommit の 状態 を 整数 値 で 返し ます
function mixed db2 autocommit resource $connection bool $value	データベース 接続 の autocommit の 状態 を 取得 また は 設定 する
function db2 bind param $precision	変数 を データベース に バインド する 際 の 精度 を 指定 し ます
function db2 bind param $data-type	php 変数 を どの sql データ 型 に バインド する のか を 指定 する 定数
function db2 bind param $scale	変数 を データベース に バインド する 際 の 位取り を 指定 し ます
function db2 bind param $variable-name	parameter -number で 指定 し た パラメータ に バインド する php 変数 の 名前 を 表す 文字列
function db2 bind param $parameter-number	プリペアドステートメント の パラメータ の 位置
function db2 bind param $stmt	db 2 _ prepare が 返す プリペアドステートメント
function bool db2 bind param	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool db2 bind param resource $stmt int $parameter-number string $variable-name int $parameter-type int $data-type int $precision int $scale	php 変数 を sql 文 の パラメータ に バインド する
function db2 client info $connection	アクティブ な db2 クライアント 接続 を 指定 し ます
function object db2 client info	成功 し た 場合 に オブジェクト 、 失敗 し た 場合 に false を 返し ます
function object db2 client info resource $connection	db 2 データベースクライアント の 情報 を プロパティ に 保持 する オブジェクト を 返す
function db2 column privileges $column-name	カラム の 名前
function db2 column privileges $schema	テーブル を 含む スキーマ
function db2 column privileges $connection	ibm db 2 、 cloudscape あるい は apache derby データベース へ の 有効 な 接続
function db2 column privileges $qualifier	os / 3 9 0 あるい は z / os サーバー 上 で 稼動 し て いる db2 データベース の 修飾子
function db2 column privileges $table-name	テーブル あるい は ビュー の 名前
function resource db2 column privileges	指定 し た パラメータ に 一致 する カラム の 権限 情報 を 含む ステートメントリソース を 返し ます
function resource db2 column privileges resource $connection string $qualifier string $schema string $table-name string $column-name	テーブル の カラム および 関連 する 権限 情報 を 含む 結果 セット を 返す
function db2 columns $column-name	カラム の 名前
function db2 columns $schema	テーブル を 含む スキーマ
function db2 columns $connection	ibm db 2 、 cloudscape あるい は apache derby データベース へ の 有効 な 接続
function db2 columns $qualifier	os / 3 9 0 あるい は z / os サーバー 上 で 稼動 し て いる db2 データベース の 修飾子
function db2 columns $table-name	テーブル あるい は ビュー の 名前
function resource db2 columns	指定 し た パラメータ に 一致 する カラム の 情報 を 含む 結果 セット の ステートメントリソース を 返し ます
function resource db2 columns resource $connection string $qualifier string $schema string $table-name string $column-name	テーブル の カラム および 関連 する メタデータ を 含む 結果 セット を 返す
function db2 commit $connection	db 2 _ connect あるい は db2 _ pconnect が返し た 有効 な データベース 接続 リソース
function bool db2 commit	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool db2 commit resource $connection	トランザクション を コミット する
function db2 conn error $connection	当初 は 成功 し た もの の 、 その後 に 無効 に なっ た 接続 に 関連 付け られ た 接続 リソース
function string db2 conn error	失敗 し た 接続 試行 の 結果 を 表す sqlstate を 返し ます
function string db2 conn error resource $connection	直近 の 接続 から 返さ れ た sqlstate を 含む 文字 列 を 返す
function db2 connect $hostname	データベースサーバー の ホスト 名 あるい は ip アドレス
function db2 connect $i5_decimal_sep	db 2 _ i 5 _ sep _period - ピリオド
function db2 connect $database	データベース へ の カタログ 接続 の 場合 に は 、 database は db2 クライアントカタログ 内 で の データベースエイリアス を 表し ます
function db2 connect $port	データベース が 要求 を 待ち受ける tcp / ip ポート
function db2 connect $i5_query_optimize	db 2 _ first _io すべて の クエリ は 、 結果 の 一行目 を できる だけ 早く 返す よう に 最適 化 さ れ ます
function db2 connect $i5_commit	i 5 _ commit 属性 は 、 db2 _ connect の 前 に 設定 し なけれ ば なり ませ ん
function db2 connect $database	データベース の 名前
function db2 connect $i5_dbcs_alloc	db 2 _ i 5 _ dbcs _alloc _on は 、 dbcs トランザクションカラムサイズ 用 の db2 6x アロケーション を 有効 に し ます
function db2 connect $i5_libl	ファイル 参照 を 解決 する 際 に 用いる ライブラリ 一覧 を 表す 文字
function db2 connect $CURSOR	db 2 _ forward _only を 渡す と 、 ステートメントリソース で 前進 のみ の カーソル を 使用 し ます
function db2 connect $trustedcontext	db 2 _ trusted _context _enable を 渡す と 、 この 接続 ハンドル で の 信頼 済み コンテキスト を 有効 に し ます
function db2 connect $i5_time_fmt	db 2 _ i 5 _ fmt _iso - 国際 標準 化機 構 iso の 時刻 書式 hh
function db2 connect $options	接続 の 振る 舞い を 指定 する 接続 オプション の 連想 配列
function db2 connect $i5_lib	未解決 の ファイル 参照 を 解決 する 際 に 使用 する デフォルト の ライブラリ を 指定 し ます
function db2 connect $username	データベース に 接続 する ユーザー 名
function db2 connect $autocommit	db 2 _ autocommit _on を 渡す と 、 この 接続 ハンドル で 自動 コミット を 有効 に し ます
function db2 connect $password	データベース に 接続 する パスワード
function db2 connect $i5_time_sep	db 2 _ i 5 _ sep _colon - コロン : を 時刻 の 区切り 文字 として 使用 し ます
function db2 connect $DB2_ATTR_CASE	db 2 _ case _natural を 渡す と 、 カラム 名 の 大文 字小 文字 を 変換 せ ずに 返し ます
function db2 connect $i5_naming	db 2 _ i 5 _ naming _on は 、 db 2 udb cli iseries の システムネーミングモード を 有効 に し ます
function db2 connect $i5_date_fmt	db 2 _ i 5 _ fmt _iso - 国際 標準 化機 構 iso の 日付 書式 yyyy -mm -dd を 使用 し ます
function db2 connect $i5_date_sep	db 2 _ i 5 _ sep _slash - スラッシュ / を 日付 の 区切り 文字 として 使用 し ます
function resource db2 connect	接続 に 成功 し た 場合 は 接続 ハンドルリソース を 返し ます
function resource db2 connect string $database string $username string $password array $options	データベース へ の 接続 を 返す
function db2 cursor type $stmt	有効 な ステートメントリソース
function int db2 cursor type	ステートメントリソース が 前進 のみ の カーソル を 使用 し て いる 場合 に db2 _ forward _only 、 スクロール 可能 な カーソル を 使用 し て いる 場合 に db2 _ scrollable を 返し ます
function int db2 cursor type resource $stmt	ステートメントリソース が 使用 し て いる カーソル の 型 を 返す
function db2 exec $connection	db 2 _ connect あるい は db2 _ pconnect が返し た 有効 な データベース 接続 リソース
function db2 exec $statement	sql 文
function db2 exec $options	文 の オプション を 含む 連想 配列
function resource db2 exec	sql 文 の 実行 に 成功 し た 場合 に ステートメントリソース 、 sql 文 の 実行 に 失敗 し た 場合 に false を 返し ます
function resource db2 exec resource $connection string $statement array $options	sql 文 を 直接 実行 する
function db2 fetch assoc $row_number	結果 セット 内 の 1 から 始まる 行番 号 を 指定 し ます
function db2 fetch assoc $stmt	結果 セット を 含む 有効 な stmt リソース
function array db2 fetch assoc	結果 セット の 次 の 行 あるい は 要求 し た 行 の データ を 表す 、 カラム 名 を インデックス と し た 連想 配列 を 返し ます
function array db2 fetch assoc resource $stmt int $row_number	結果 セット 内 の 行 を 表す 、 カラム 名 を インデックス と する 配列 を 返す
function db2 fetch both $row_number	結果 セット 内 の 1 から 始まる 行番 号 を 指定 し ます
function db2 fetch both $stmt	結果 セット を 含む 有効 な stmt リソース
function array db2 fetch both	結果 セット の 次 の 行 あるい は 要求 し た 行 の データ を 表す 、 カラム 名 および 0 から 始まる カラム 番号 の 両方 を インデックス と し た 連想 配列 を 返し ます
function array db2 fetch both resource $stmt int $row_number	結果 セット 内 の 行 を 表す 、 カラム 位置 および カラム 名 の 両方 を インデックス と する 配列 を 返す
function db2 fetch object $row_number	結果 セット 内 の 1 から 始まる 行番 号 を 指定 し ます
function db2 fetch object $stmt	結果 セット を 含む 有効 な stmt リソース
function object db2 fetch object	結果 セット 内 の 行 を 表す オブジェクト を 返し ます
function object db2 fetch object resource $stmt int $row_number	結果 セット 内 の 行 を 表す 、 カラム を プロパティ と する オブジェクト を 返す
function db2 field display size $stmt	結果 セット を 含む ステートメントリソース を 指定 し ます
function db2 field display size $column	結果 セット 内 の カラム を 指定 し ます
function int db2 field display size	指定 し た カラム を 表示 する ため に 必要 な 最大 バイト 数 を 表す 整数 値 を 返し ます
function int db2 field display size resource $stmt mixed $column	カラム を 表示 する ため に 必要 な 最大 の バイト 数 を 返す
function db2 field name $stmt	結果 セット を 含む ステートメントリソース を 指定 し ます
function db2 field name $column	結果 セット 内 の カラム を 指定 し ます
function string db2 field name	指定 し た カラム の 名前 を 含む 文字 列 を 返し ます
function string db2 field name resource $stmt mixed $column	結果 セット 内 の カラム の 名前 を 返す
function db2 field scale $stmt	結果 セット を 含む ステートメントリソース を 指定 し ます
function db2 field scale $column	結果 セット 内 の カラム を 指定 し ます
function int db2 field scale	指定 し た カラム の 位取り を 整数 値 で 返し ます
function int db2 field scale resource $stmt mixed $column	結果 セット 内 の 指定 し た カラム の 位取り を 返す
function db2 field width $stmt	結果 セット を 含む ステートメントリソース を 指定 し ます
function db2 field width $column	結果 セット 内 の カラム を 指定 し ます
function int db2 field width	結果 セット 内 の 文字 型 あるい は バイナリデータ 型 の カラム について 、 その幅 を 整数 値 で 返し ます
function int db2 field width resource $stmt mixed $column	結果 セット 内 の 指定 し た カラム の 現在 値 の 幅 を 返す
function db2 free result $stmt	有効 な ステートメントリソース
function bool db2 free result	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool db2 free result resource $stmt	結果 セット に 関連 付け られ た リソース を 開放 する
function db2 free stmt $stmt	有効 な ステートメントリソース
function bool db2 free stmt	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool db2 free stmt resource $stmt	指定 さ れ た ステートメントリソース に 関連 付け られ た リソース を 開放 する
function db2 get option $option	ステートメント や 接続 の 、 有効 な オプション
function db2 get option $resource	db 2 _ prepare が 返す 有効 な ステートメントリソース 、 あるい は db2 _ connect や db2 _ pconnect が 返す 有効 な 接続 リソース
function db2 get option $acctstr	sql _attr _info _acctstr - ヌル 終端 の 文字 列 へ の ポインタ で 、 db 2 接続 の 際 に ホストデータベースサーバー に 送信 する クライアント の アカウンティング ・ ストリング として 使用 し ます
function db2 get option $applname	sql _attr _info _applname - ヌル 終端 の 文字 列 へ の ポインタ で 、 db 2 接続 の 際 に ホストデータベースサーバー に 送信 する クライアント の アプリケーション 名 として 使用 し ます
function db2 get option $userid	sql _attr _info _userid - ヌル 終端 の 文字 列 へ の ポインタ で 、 db 2 接続 の 際 に ホストデータベースサーバー に 送信 する クライアント の ユーザー id として 使用 し ます
function db2 get option $wrkstnname	sql _attr _info _wrkstnname - ヌル 終端 の 文字 列 へ の ポインタ で 、 db 2 接続 の 際 に ホストデータベースサーバー に 送信 する クライアント の ワークステーション 名 として 使用 し ます
function string db2 get option	成功 し た 場合 に 接続 属性 の 現在 の 設定 内容 、 失敗 し た 場合 に false を 返し ます
function string db2 get option resource $resource string $option	ステートメントリソース あるい は 接続 リソース から オプション の 値 を 取得 する
function db2 last insert id $resource	db 2 _ connect あるい は db2 _ pconnect が 返す 接続 リソース
function string db2 last insert id	この 接続 上 で 最後 に 成功 し た insert クエリ が 自動 生成 し た id を 返し ます
function string db2 last insert id resource $resource	この 接続 上 で 最後 に 成功 し た insert クエリ が 自動 生成 し た id を 返す
function db2 lob read $length	stmt リソース から 取得 する lob データ の サイズ
function db2 lob read $colnum	stmt リソース の 結果 セット 内 の 、 有効 な カラム 番号
function db2 lob read $stmt	lob データ を 含む 有効 な stmt リソース
function string db2 lob read	指定 し た サイズ の データ を 返し ます
function string db2 lob read resource $stmt int $colnum int $length	lob ファイル から 、 ユーザー が 定義 し た サイズ の 内容 を 取得 する
function db2 next result $stmt	db 2 _ exec あるい は db2 _ execute から 返さ れる プリペアドステートメント
function resource db2 next result	ストアドプロシージャ が 別 の 結果 セット を 返し て いる 場合 に は 次 の 結果 セット を 含む新しい ステートメントリソース 、 別 の 結果 セット を 返し て い ない 場合 に は false を 返し ます
function resource db2 next result resource $stmt	ストアドプロシージャ から 、 次 の 結果 セット を 要求 する
function db2 num fields $stmt	結果 セット を 含む 有効 な ステートメントリソース
function int db2 num fields	指定 し た ステートメントリソース に 関連 付け られ た 結果 セット 内 の フィールド の 数 を 表す 整数 値 を 返し ます
function int db2 num fields resource $stmt	結果 セット に 含まれる フィールド の 数 を 返す
function db2 num rows $stmt	結果 セット を 含む 有効 な stmt リソース
function int db2 num rows	指定 し た ステートメントハンドル によっ て 発行 さ れ た 、 直近 の sql 文 によっ て 変更 さ れ た 行 の 数 を 返し ます
function int db2 num rows resource $stmt	sql 文 によっ て 変更 さ れ た 行 の 数 を 返す
function db2 prepare $connection	db 2 _ connect あるい は db2 _ pconnect が返し た 有効 な データベース 接続 リソース
function db2 prepare $statement	ひとつ 以上 の パラメータマーカ を 含む sql 文
function db2 prepare $options	文 の オプション を 含む 連想 配列
function resource db2 prepare	sql 文 の パース に 成功 し 、 データベースサーバー 内 で 正しく 準備 さ れ た 場合 に ステートメントリソース を 返し ます
function resource db2 prepare resource $connection string $statement array $options	実行 する sql 文 を 準備 する
function db2 procedure columns $schema	プロシージャ を 含む スキーマ
function db2 procedure columns $connection	ibm db 2 、 cloudscape あるい は apache derby データベース へ の 有効 な 接続
function db2 procedure columns $procedure	プロシージャ の 名前
function db2 procedure columns $qualifier	os / 3 9 0 あるい は z / os サーバー 上 で 稼動 し て いる db2 データベース の 修飾子
function db2 procedure columns $parameter	パラメータ の 名前
function resource db2 procedure columns	指定 し た パラメータ に 一致 する ストアドプロシージャ の パラメータ 情報 を 含む 結果 セット の ステートメントリソース を 返し ます
function resource db2 procedure columns resource $connection string $qualifier string $schema string $procedure string $parameter	ストアドプロシージャ の パラメータ を 含む 結果 セット を 返す
function db2 result $stmt	有効 な stmt リソース
function db2 result $column	結果 セット 内 の カラム の 位置 を 表す 0 から 始まる インデックス 、 あるい は カラム 名 を 表す 文字列
function mixed db2 result	指定 し た フィールド が 結果 セット に 存在 する 場合 に その フィールド の 値 を 返し ます
function mixed db2 result resource $stmt mixed $column	結果 セット の 行 から ひとつ の カラム を 返す
function db2 rollback $connection	db 2 _ connect あるい は db2 _ pconnect が返し た 有効 な データベース 接続 リソース
function bool db2 rollback	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool db2 rollback resource $connection	トランザクション を ロールバック する
function db2 set option $rowcount	db 2 _ rowcount _prefetch _on - クライアント は 、 取得 する 前 に 全行 数 を 問い合わ せる こと が でき ます
function db2 set option $i5_fetch_only	db 2 _ i 5 _ fetch _on - カーソル は 読み込み 専用 と なり 、 場所 を 指定 し て の 更新 や 削除 に は 使用 でき ませ ん
function db2 set option $resource	db 2 _ prepare が 返す 有効 な ステートメントリソース か 、 あるい は db2 _ connect や db2 _ pconnect が 返す 有効 な 接続 リソース
function db2 set option $trusted_user	ユーザー を 信頼 済み ユーザー に 変更 する 際 に 、 信頼 済み ユーザー の ユーザー id 文字列 を この キー の 値 として 渡し ます
function db2 set option $trusted_password	trusted _user キー で 指定 し た ユーザー に 対応 する パスワード 文字列
function db2 set option $binmode	db 2 _ binary を 渡す と 、 バイナリデータ が その まま の 形式 で 返さ れる よう に なり ます
function db2 set option $type	この 関数 に 渡す リソース の 型 を 、 整数 値 で 指定 し ます
function db2 set option $db2_attr_case	db 2 _ case _lower を 渡す と 、 結果 セット の カラム 名 を 小文字 で 返し ます
function db2 set option $userid	sql _attr _info _userid - ヌル 終端 の 文字 列 へ の ポインタ で 、 db 2 接続 の 際 に ホストデータベースサーバー に 送信 する クライアント の ユーザー id として 使用 し ます
function db2 set option $applname	sql _attr _info _applname - ヌル 終端 の 文字 列 へ の ポインタ で 、 db 2 接続 の 際 に ホストデータベースサーバー に 送信 する クライアント の アプリケーション 名 として 使用 し ます
function db2 set option $autocommit	db 2 _ autocommit _on を 渡す と 、 指定 し た 接続 リソース の 自動 コミット を オン に し ます
function db2 set option $cursor	db 2 _ forward _only を 渡す と 、 ステートメントリソース に 前進 のみ の カーソル を 指定 し ます
function db2 set option $acctstr	sql _attr _info _acctstr - ヌル 終端 の 文字 列 へ の ポインタ で 、 db 2 接続 の 際 に ホストデータベースサーバー に 送信 する クライアント の アカウンティング ・ ストリング として 使用 し ます
function db2 set option $options	ステートメント あるい は 接続 の オプション を 含む 連想 配列
function db2 set option $deferred_prepare	db 2 _ deferred _prepare _on を 渡す と 、 指定 し た ステートメントリソース について 遅延 プリペア を 有効 に し ます
function db2 set option $wrkstnname	sql _attr _info _wrkstnname - ヌル 終端 の 文字 列 へ の ポインタ で 、 db 2 接続 の 際 に ホストデータベースサーバー に 送信 する クライアント の ワークステーション 名 として 使用 し ます
function bool db2 set option	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool db2 set option resource $resource array $options int $type	接続 リソース あるい は ステートメントリソース の オプション を 設定 する
function db2 special columns $schema	テーブル を 含む スキーマ
function db2 special columns $connection	ibm db 2 、 cloudscape あるい は apache derby データベース へ の 有効 な 接続
function db2 special columns $qualifier	os / 3 9 0 あるい は z / os サーバー 上 で 稼動 し て いる db2 データベース の 修飾子
function db2 special columns $table_name	テーブル の 名前
function db2 special columns $scope	ユニーク 行 id の 有効 期間 の 最小値 を 表す 整数 値
function resource db2 special columns	テーブル の ユニーク 行 id 情報 を 含む 結果 セット の ステートメントリソース を 返し ます
function resource db2 special columns resource $connection string $qualifier string $schema string $table_name int $scope	テーブル の ユニーク 行 id カラム を 含む 結果 セット を 返す
function db2 stmt errormsg $stmt	有効 な ステートメントリソース
function string db2 stmt errormsg	sql 文 の 発行 により 直近 に 発生 し た エラー を 表す エラーメッセージ および sqlstate を 返し ます
function string db2 stmt errormsg resource $stmt	直近 の sql 文 の エラーメッセージ を 含む 文字 列 を 返す
function db2 tables $table-type	テーブル 型 の 識別子 を カンマ で 区切っ た リスト
function db2 tables $schema	テーブル を 含む スキーマ
function db2 tables $connection	ibm db 2 、 cloudscape あるい は apache derby データベース へ の 有効 な 接続
function db2 tables $qualifier	os / 3 9 0 あるい は z / os サーバー 上 で 稼動 し て いる db2 データベース の 修飾子
function db2 tables $table-name	テーブル の 名前
function resource db2 tables	指定 し た パラメータ に 一致 する テーブル の 情報 を 含む 結果 セット の リソース を 返し ます
function resource db2 tables resource $connection string $qualifier string $schema string $table-name string $table-type	データベース 内 の テーブル および 関連 する メタデータ を 含む 結果 セット を 返す
function dba close $handle	dba _open あるい は dba _popen によって 返さ れ た データベースハンドル
function void dba close resource $handle	dba データベース を 閉じる
function dba delete $handle	dba _open あるい は dba _popen によって 返さ れ た データベースハンドル
function dba delete $key	削除 する エントリ の キー
function bool dba delete	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool dba delete string $key resource $handle	キー が 指す dba エントリ を 削除 する
function dba exists $key	確認 を 行う キー
function dba exists $handle	dba _open あるい は dba _popen によって 返さ れ た データベースハンドル
function bool dba exists	キー が 存在 する 場合 に true 、 それ 以外 の 場合 に false を 返し ます
function bool dba exists string $key resource $handle	キー が 存在 する かど う か を 確認 する
function dba fetch $skip	dba データベース を 使用 する 際 に 無視 する キー / 値 の 組み合わせ 数
function dba fetch $key	データ を 取得 する キー
function dba fetch $handle	dba _open あるい は dba _popen によって 返さ れ た データベースハンドル
function string dba fetch	キー / データ の 組 が 見つかっ た 場合 に それ に 関連 する 文字 列 、 それ 以外 の 場合 に false を 返し ます
function string dba fetch string $key resource $handle	キー が 指す データ を 取得 する
function dba firstkey $handle	dba _open あるい は dba _popen によって 返さ れ た データベースハンドル
function string dba firstkey	成功 し た 場合 に キー 、 失敗 し た 場合 に false を 返し ます
function string dba firstkey resource $handle	最初 の キー を 取得 する
function dba handlers $full_info	結果 の 全て の 情報 を 表示 する かど う か を 切り 替え ます
function array dba handlers	データベースハンドラ の 配列 を 返し ます
function array dba handlers bool $full_info	利用 可能 な ハンドラ の 一覧 を 得る
function dba insert $key	挿入 する エントリ の キー
function dba insert $value	挿入 する 値
function dba insert $handle	dba _open あるい は dba _popen によって 返さ れ た データベースハンドル
function bool dba insert	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool dba insert string $key string $value resource $handle	エントリ を 挿入 する
function dba key split $key	文字列 形式 の キー
function mixed dba key split	array 0 = & gt ; group 1 = & gt ; value _name 形式 の 配列 を 返し ます
function mixed dba key split mixed $key	文字列 形式 の キー を 配列 形式 に 分割 する
function dba nextkey $handle	dba _open あるい は dba _popen によって 返さ れ た データベースハンドル
function string dba nextkey	成功 し た 場合 に キー 、 失敗 し た 場合 に false を 返し ます
function string dba nextkey resource $handle	次 の キー を 取得 する
function dba optimize $handle	dba _open あるい は dba _popen によって 返さ れ た データベースハンドル
function bool dba optimize	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool dba optimize resource $handle	データベース を 最適 化 する
function dba replace $handle	dba _open あるい は dba _popen によって 返さ れ た データベースハンドル
function dba replace $value	置換 さ れる 値
function dba replace $key	置換 する エントリ の キー
function bool dba replace	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool dba replace string $key string $value resource $handle	エントリ を 置換 また は 挿入 する
function dba sync $handle	dba _open あるい は dba _popen によって 返さ れ た データベースハンドル
function bool dba sync	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool dba sync resource $handle	データベース を 同期 する
function dbase add record $record	データ の 配列
function dbase add record $dbase_identifier	データベース の リンク id
function bool dbase add record	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool dbase add record int $dbase_identifier array $record	データベース に レコード を 追加 する
function dbase create $fields	配列 の 配列 で 、 各配 列 は データベース に おける ひとつ の フィールド の フォーマット を 記述 し ます
function dbase create $filename	データベース の 名前
function int dbase create	データベース の 作成 に 成功 し た 場合 に リンク id 、 エラー が 発生 し た 場合 に false を 返し ます
function int dbase create string $filename array $fields	データベース を 作成 する
function dbase get header info $dbase_identifier	データベース の リンク id
function array dbase get header info	データベース の 各 カラム について の 要素 を 格納 し た 配列 を 返し ます
function array dbase get header info int $dbase_identifier	データベース の ヘッダ 情報 を 得る
function dbase get record with names $record_number	レコード の インデックス
function dbase get record with names $dbase_identifier	データベース の リンク id
function array dbase get record with names	レコード の 連想 配列 を 返し ます
function array dbase get record with names int $dbase_identifier int $record_number	データベース から レコード を 連想 配列 として 得る
function dbase numfields $dbase_identifier	データベース の リンク id
function int dbase numfields	データベース の フィールド 数 を 返し ます
function int dbase numfields int $dbase_identifier	データベース の フィールド 数 を 得る
function dbase open $mode	open システムコール に 対応 する 整数 値 （ 通常 、 0 は 読み込み のみ 可 ・ 1 は 書き込み のみ 可 ・ 2 は 読み 書き 両 方可 を 意味 し ます ）
function dbase open $filename	データベース の 名前
function int dbase open	データベース の オープン に 成功 し た 場合 に リンク id 、 エラー が 発生 し た 場合 に false を 返し ます
function int dbase open string $filename int $mode	データベース を オープン する
function dbase pack $dbase_identifier	データベース の リンク id
function bool dbase pack	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool dbase pack int $dbase_identifier	データベース を 圧縮 する
function dbplus aql $query	aql algebraic query language に関する より 詳細 な 情報 について は 、 オリジナル の db ++ マニュアル で 提供 さ れ て い ます
function resource dbplus aql	成功 時 に 関係 ハンドル を 返し ます
function resource dbplus aql string $query string $server string $dbpath	aql クエリ を 実行 する
function dbplus chdir $newdir	リレーションファイル の 新しい ディレクトリ
function string dbplus chdir	カレントディレクトリ の 絶対 パス を 返し ます
function string dbplus chdir string $newdir	データベース 仮想 カレントディレクトリ を 設定 / 取得 する
function dbplus close $relation	dbplus _open で オープン し た リレーション
function mixed dbplus close	成功 し た 場合 に true 、 失敗 し た 場合 に dbplus _err _unknown を 返し ます
function mixed dbplus close resource $relation	リレーション を 閉じる
function dbplus curr $tuple	データ が この パラメータ に 連想 配列 として 返さ れ ます
function dbplus curr $relation	dbplus _open で オープン し た リレーション
function int dbplus curr	この 関数 は 、 成功 時 に ゼロ すなわち dbplus _err _noerr 、 失敗 時 に db ++ エラーコード を 返し ます
function int dbplus curr resource $relation array $tuple	リレーション から カレントタプル を 取得 する
function int dbplus errno	エラーコード を 表す 整数 値 を 返し ます
function int dbplus errno	直近 の 操作 に関する エラーコード を 取得 する
function dbplus find $constraints	拘束 は 、 ドメイン 名 、 比較 演算子 、 比較 値 を 含む 複合 文字 列 です
function dbplus find $relation	dbplus _open で オープン し た リレーション
function int dbplus find resource $relation array $constraints mixed $tuple	リレーション に 拘束 を 設定 する
function dbplus first $relation	dbplus _open で オープン し た リレーション
function int dbplus first	成功 し た 場合 に dbplus _err _noerr 、 失敗 し た 場合 に db ++ エラーコード を 返し ます
function int dbplus first resource $relation array $tuple	リレーション から 最初 の タプル を 取得 する
function dbplus flush $relation	dbplus _open で オープン し た リレーション
function int dbplus flush	成功 し た 場合 に dbplus _err _noerr 、 失敗 し た 場合 に db ++ エラーコード を 返し ます
function int dbplus flush resource $relation	リレーション に 行っ た 全て の 変更 を フラッシュ する
function int dbplus freealllocks	この クライアント により 保持 さ れ た 全て の ロック を 解放 する
function dbplus freelock $relation	dbplus _open で オープン し た リレーション
function int dbplus freelock resource $relation string $tuple	タプル の 書き込み ロック を 解放 する
function dbplus freerlocks $relation	dbplus _open で オープン し た リレーション
function int dbplus freerlocks resource $relation	指定 し た リレーション に関する 全て の タプルロック を 解放 する
function dbplus last $relation	dbplus _open で オープン し た リレーション
function int dbplus last	成功 し た 場合 に dbplus _err _noerr 、 失敗 し た 場合 に db ++ エラーコード を 返し ます
function int dbplus last resource $relation array $tuple	リレーション から 直近 の タプル を 取得 する
function dbplus next $relation	dbplus _open で オープン し た リレーション
function int dbplus next	成功 し た 場合 に dbplus _err _noerr 、 失敗 し た 場合 に db ++ エラーコード を 返し ます
function int dbplus next resource $relation array $tuple	リレーション から 次 の タプル を 取得 する
function dbplus prev $relation	dbplus _open で オープン し た リレーション
function int dbplus prev	成功 し た 場合 に dbplus _err _noerr 、 失敗 し た 場合 に db ++ エラーコード を 返し ます
function int dbplus prev resource $relation array $tuple	リレーション から 前 の タプル を 取得 する
function dbplus rchperm $relation	dbplus _open で オープン し た リレーション
function int dbplus rchperm resource $relation int $mask string $user string $group	リレーション の 許可 属性 を 変更 する
function dbplus rcrtexact $relation	コピー する リレーション
function dbplus rcrtexact $overwrite	この パラメータ が true で あり 他 の プロセス が その リレーション を 使用 し て い ない 場合 に のみ 、 同 じ 名前 の 既存 の リレーション が 上書き さ れ ます
function mixed dbplus rcrtexact	成功 し た 場合 に リソース 、 失敗 し た 場合 に dbplus _err _unknown を 返し ます
function mixed dbplus rcrtexact string $name resource $relation bool $overwrite	インデックス を 含む 、 リレーション の 空 の コピー を 作成 する
function dbplus rcrtlike $relation	コピー する リレーション
function dbplus rcrtlike $overwrite	この パラメータ が true で あり 他 の プロセス が その リレーション を 使用 し て い ない 場合 に のみ 、 同 じ 名前 の 既存 の リレーション が 上書き さ れ ます
function mixed dbplus rcrtlike	成功 し た 場合 に リソース 、 失敗 し た 場合 に dbplus _err _unknown を 返し ます
function mixed dbplus rcrtlike string $name resource $relation int $overwrite	デフォルト の インデックス で 、 リレーション の 空 の コピー を 作成 する
function dbplus rkeys $domlist	ドメイン の 組み合わせ
function dbplus rkeys $relation	dbplus _open で オープン し た リレーション
function mixed dbplus rkeys	成功 し た 場合 に リソース 、 失敗 し た 場合 に dbplus _err _unknown を 返し ます
function mixed dbplus rkeys resource $relation mixed $domlist	リレーション の 主キー を 新規 に 指定 する
function resource dbplus ropen string $name	リレーションファイル を ローカル に オープン する
function resource dbplus rquery string $query string $dbpath	ローカル raw aql クエリ を 実行 する
function dbplus rrename $relation	dbplus _open で オープン し た リレーション
function int dbplus rrename resource $relation string $name	リレーション の 名前 を 変更 する
function dbplus rsecindex $domlist	ドメイン 名 の 組み合わせ
function dbplus rsecindex $relation	dbplus _open で オープン し た リレーション
function mixed dbplus rsecindex	成功 し た 場合 に リソース 、 失敗 し た 場合 に dbplus _err _unknown を 返し ます
function mixed dbplus rsecindex resource $relation mixed $domlist int $type	リレーション に 新規 セカンダリインデックス を 作成 する
function dbplus runlink $relation	dbplus _open で オープン し た リレーション
function int dbplus runlink resource $relation	ファイルシステム から リレーション を 削除 する
function string dbplus tcl int $sid string $script	サーバー 側 で tcl コード を 実行 する
function dbplus tremove $relation	dbplus _open で オープン し た リレーション
function int dbplus tremove resource $relation array $tuple array $current	タプル を 削除 し 、 新規 カレントタプル を 返す
function dbplus unlockrel $relation	dbplus _open で オープン し た リレーション
function int dbplus unlockrel resource $relation	リレーション の 書き込み ロック を 中断 する
function dbplus unselect $relation	dbplus _open で オープン し た リレーション
function int dbplus unselect resource $relation	リレーション から 制約 を 削除 する
function dbplus xunlockrel $relation	dbplus _open で オープン し た リレーション
function int dbplus xunlockrel resource $relation	リレーション の 排他 的 ロック を 解放 する
function dbx compare $column_key	比較 する カラム
function dbx compare $row_b	二番目 の 行
function dbx compare $flags	flags によっ て 比較 の 方向 を 指定 し ます
function dbx compare $row_a	最初 の 行
function int dbx compare array $row_a array $row_b string $column_key int $flags	ソート する ため に 二つ の レコード を 比較 する
function dbx connect $database	データベース 名
function dbx connect $host	sql サーバー の ホスト
function dbx connect $password	パスワード
function dbx connect $persistent	persistent パラメータ に dbx _persistent を 設定 する と 、 持続 的 接続 が 作成 さ れ ます
function dbx connect $username	ユーザー 名
function dbx connect $module	module パラメータ に は 文字列 また は 定数 を 設定 し ます
function object dbx connect	dbx _connect は 成功 時 に オブジェクト 、 エラー 時 に false を 返し ます
function object dbx connect mixed $module string $host string $database string $username string $password int $persistent	接続 / データベース を オープン する
function dbx error $link_identifier	dbx _connect が 返す dbx リンクオブジェクト
function string dbx error	抽象化 さ れ た モジュール （ 例え ば mysql モジュール ） の 直近 の 関数 コール から エラーメッセージ を 有する 文字 列 を 返し ます
function string dbx error object $link_identifier	使用 する モジュール の 最新 の 関数 コール に おける エラーメッセージ を 出力 する
function dbx escape string $text	エスケープ する 文字列
function dbx escape string $link_identifier	dbx _connect が 返す dbx リンクオブジェクト
function string dbx escape string	テキスト を 返し ます
function string dbx escape string object $link_identifier string $text	sql ステートメント で 安全 に 使用 できる よう に 文字列 を エスケープ する
function dbx sort $result	dbx _query が 返す 結果 セット
function dbx sort $user_compare_function	ユーザー 定義 の 比較 関数
function bool dbx sort	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool dbx sort object $result string $user_compare_function	カスタマイズ さ れ た ソート 関数 により 、 dbx _query から 結果 を ソート する
function dcgettext $category	カテゴリ
function dcgettext $domain	ドメイン
function dcgettext $message	メッセージ
function string dcgettext	成功 し た 場合 に 文字列 を 返し ます
function string dcgettext string $domain string $message int $category	単一 の 参照 に関する ドメイン を 上書き する
function dcngettext $domain	ドメイン
function string dcngettext	成功 し た 場合 に 文字列 を 返し ます
function string dcngettext string $domain string $msgid1 string $msgid2 int $n int $category	dcgettext の 複数 形版
function debug backtrace $limit	5
function debug backtrace $options	php 5
function array debug backtrace	連想 配列 の 配列 を 返し ます
function array debug backtrace int $options int $limit	バックトレース を 生成 する
function debug print backtrace $limit	5
function debug print backtrace $options	php 5
function void debug print backtrace int $options int $limit	バックトレース を 表示 する
function debug zval dump $variable	評価 さ れる 変数
function void debug zval dump mixed $variable	内部 的 な zend の 値 を 表す 文字列 を ダンプ する
function decbin $number	変換 し たい 1 0 進数 値
function string decbin	binary _string を 2 進文 字列 で 表し た 値 を 返し ます
function string decbin int $number	1 0 進数 を 2 進数 に 変換 する
function dechex $number	変換 し たい 1 0 進数 値
function string dechex	number を 1 6 進文 字列 で 表し た 値 を 返し ます
function string dechex int $number	1 0 進数 を 1 6 進数 に 変換 する
function decoct $number	変換 し たい 1 0 進数 値
function string decoct	number を 8 進文 字列 で 表し た 値 を 返し ます
function string decoct int $number	1 0 進数 を 8 進数 に 変換 する
function void define syslog variables	syslog に 関係 する 全て の 定数 を 初期化 する
function define $value	定数 の 値
function define $name	定数 の 名前
function define $case_insensitive	true を 指定 する と 、 定数 は 大文字 小文字 を 区別 し ない よう に なり ます
function bool define	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool define string $name mixed $value bool $case_insensitive	名前 を 指定 し て 定数 を 定義 する
function defined $name	定数 名
function bool defined	name で 指定 し た 名前 の 定数 が 定義 さ れ て いる 場合 に true 、 その 他 の 場合 に false を 返し ます
function bool defined string $name	指定 し た 名前 の 定数 が 存在 する かど う か を 調べる
function dgettext $domain	ドメイン
function dgettext $message	メッセージ
function string dgettext	成功 し た 場合 に 文字列 を 返し ます
function string dgettext string $domain string $message	現在 の ドメイン を 上書き する
function dio close $fd	dio _open が 返す ファイル 記述子
function void dio close resource $fd	fd で 指定 し た ファイル 記述子 を 閉じる
function dio fcntl $fd	dio _open が 返す ファイル 記述子
function dio fcntl $cmd	以下 の 処理 のい ずれ か
function dio fcntl $args	args は 連想 配列 で 、 cmd が f _setlk あるい は f _setllw の 際 に 以下 の キー を 保持 し ます
function mixed dio fcntl	c ライブラリ を コール し た 結果 を 返し ます
function mixed dio fcntl resource $fd int $cmd mixed $args	fd について c ライブラリ の fcntl を 実行 する
function dio read $len	読み込む バイト 数
function dio read $fd	dio _open が 返す ファイル 記述子
function string dio read	fd から 読み込ん だ バイトデータ を 返し ます
function string dio read resource $fd int $len	ファイル 記述子 から バイトデータ を 読み込む
function dio seek $whence	位置 pos をど の よう に 解釈 する か を 指示 し ます
function dio seek $fd	dio _open が 返す ファイル 記述子
function dio seek $pos	新しい 位置
function int dio seek resource $fd int $pos int $whence	fd 上 で whence から pos に 移動 する
function dio tcsetattr $options	現在 使用 可能 な オプション は 以下 の とおり です
function dio tcsetattr $fd	dio _open が 返す ファイル 記述子
function bool dio tcsetattr resource $fd array $options	シリアルポート の 端末 属性 と ボーレート を 設定 する
function dio truncate $fd	dio _open が 返す ファイル 記述子
function dio truncate $offset	オフセット の バイト 数
function bool dio truncate	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool dio truncate resource $fd int $offset	ファイル 記述子 fd を オフセットバイト へ 丸める
function dio write $data	書き込む データ
function dio write $fd	dio _open が 返す ファイル 記述子
function dio write $len	書き込む データ の バイト 長
function int dio write	fd に 書き込ん だ バイト 数 を 返し ます
function int dio write resource $fd string $data int $len	オプション で 丸め 長さ を 指定 し て データ を 書き込む
function disk free space $directory	ファイルシステム の ディレクトリ あるい は ディスクパーティション
function float disk free space	利用 可能 な バイト 数 を float 型 で 返し ます
function float disk free space string $directory	ファイルシステム あるい は ディスクパーティション 上 で 利用 可能 な 領域 を 返す
function disk total space $directory	ファイルシステム の ディレクトリ あるい は ディスクパーティション
function float disk total space	総 バイト 数 を float 型 で 返し ます
function float disk total space string $directory	ファイルシステム あるい は ディスクパーティション の 全体 サイズ を 返す
function dl $library	この パラメータ に 指定 できる の は 拡張 モジュール の ファイル 名 だけ であり 、 それ は プラットフォーム に 依存 し ます
function bool dl	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool dl string $library	実行 時 に php 拡張 モジュール を ロード する
function dngettext $domain	ドメイン
function string dngettext	成功 し た 場合 に 文字列 を 返し ます
function string dngettext string $domain string $msgid1 string $msgid2 int $n	dgettext の 複数 形版
function dom import simplexml $node	simplexmlelement ノード
function DOMElement dom import simplexml	追加 さ れ た domelement ノード 、 あるい は 何らか の エラー が 発生 し た 場合 は false を 返し ます
function DOMElement dom import simplexml SimpleXMLElement $node	simplexmlelement オブジェクト から domelement オブジェクト を 取得 する
function each $array	入力 の 配列
function array each	配列 array から 現在 の キー と 値 の ペア を 返し ます
function array each array $array	配列 から 現在 の キー と 値 の ペア を 返し て 、 カーソル を 進める
function easter days $method	cal _easter _roman に 設定 する と 1 5 8 2 年 から 1 7 5 2 年 まで の 復活 祭 の 日付 を グレゴリオ 暦 に も とづい て 計算 し ます
function easter days $year	正 の 数値 で 表し た 年
function int easter days	指定 し た 年 year におい て 、 3 月 2 1 日 から 復活 祭 まで の 日数 を 返し ます
function int easter days int $year int $method	指定 し た 年 に おい て 、 3 月 2 1 日 から 復活 祭 まで の 日数 を 得る
function eio busy $callback	すべて の グループリクエスト が 終わっ た とき に 呼ば れる コールバック
function eio busy $pri	リクエスト の 優先 順位
function eio busy $delay	待つ 秒数
function eio busy $data	callback に 渡す 任意 の 引数
function resource eio busy	eio _busy は 成功 し た 場合 に リクエストリソース を 返し ます
function resource eio busy int $delay int $pri callable $callback mixed $data	人為 的 に 負荷 を 高く する
function eio cancel $data	は 、 リクエスト に 渡す カスタムデータ です
function eio cancel $req	リクエストリソース
function eio cancel $data	callback に 渡す 任意 の 引数
function eio cancel $pri	リクエスト の 優先 順位
function eio cancel $callback	callback 関数 が 、 リクエスト 終了 時 に コール さ れ ます
function eio cancel $req	は オプション で 指定 する リクエストリソース です
function eio cancel $result	に は リクエスト 固有 の 結果 が 格納 さ れ ます
function void eio cancel resource $req	リクエスト を 取り消す
function eio chmod $data	は 、 リクエスト に 渡す カスタムデータ です
function eio chmod $mode	新しい パーミッション
function eio chmod $path	対象 と なる ファイル や ディレクトリ の パス
function eio chmod $data	callback に 渡す 任意 の 引数
function eio chmod $pri	リクエスト の 優先 順位
function eio chmod $callback	callback 関数 が 、 リクエスト 終了 時 に コール さ れ ます
function eio chmod $req	は オプション で 指定 する リクエストリソース です
function eio chmod $result	に は リクエスト 固有 の 結果 が 格納 さ れ ます
function resource eio chmod	eio _chmod は 、 成功 し た 場合 に リクエストリソース を 返し ます
function resource eio chmod string $path int $mode int $pri callable $callback mixed $data	ファイル や ディレクトリ の パーミッション を 変更 する
function eio chown $data	は 、 リクエスト に 渡す カスタムデータ です
function eio chown $path	ファイル や ディレクトリ へ の パス
function eio chown $data	callback に 渡す 任意 の 引数
function eio chown $req	は オプション で 指定 する リクエストリソース です
function eio chown $gid	グループ id
function eio chown $pri	リクエスト の 優先 順位
function eio chown $callback	callback 関数 が 、 リクエスト 終了 時 に コール さ れ ます
function eio chown $uid	ユーザー id
function eio chown $result	に は リクエスト 固有 の 結果 が 格納 さ れ ます
function resource eio chown	eio _chown は 、 成功 し た 場合 に リクエストリソース を 返し ます
function resource eio chown string $path int $uid int $gid int $pri callable $callback mixed $data	ファイル や ディレクトリ の オーナー を 変更 する
function eio close $data	は 、 リクエスト に 渡す カスタムデータ です
function eio close $data	callback に 渡す 任意 の 引数
function eio close $pri	リクエスト の 優先 順位
function eio close $callback	callback 関数 が 、 リクエスト 終了 時 に コール さ れ ます
function eio close $req	は オプション で 指定 する リクエストリソース です
function eio close $fd	ストリーム 、 ソケットリソース 、 あるい は 数値 で 表し た ファイルディスクリプタ
function eio close $result	に は リクエスト 固有 の 結果 が 格納 さ れ ます
function resource eio close	eio _close は 、 成功 し た 場合 に リクエストリソース を 返し ます
function resource eio close mixed $fd int $pri callable $callback mixed $data	ファイル を 閉じる
function eio dup2 $fd2	複製先 の ストリーム 、 ソケットリソース 、 あるい は ファイルディスクリプタ
function eio dup2 $data	は 、 リクエスト に 渡す カスタムデータ です
function eio dup2 $req	は オプション で 指定 する リクエストリソース です
function eio dup2 $data	callback に 渡す 任意 の 引数
function eio dup2 $pri	リクエスト の 優先 順位
function eio dup2 $callback	callback 関数 が 、 リクエスト 終了 時 に コール さ れ ます
function eio dup2 $fd	複製元 の ストリーム 、 ソケットリソース 、 あるい は ファイルディスクリプタ
function eio dup2 $result	に は リクエスト 固有 の 結果 が 格納 さ れ ます
function resource eio dup2	eio _dup 2 は 、 成功 し た 場合 に リクエストリソース を 返し ます
function resource eio dup2 mixed $fd mixed $fd2 int $pri callable $callback mixed $data	ファイルディスクリプタ を 複製 する
function eio fallocate $data	は 、 リクエスト に 渡す カスタムデータ です
function eio fallocate $mode	現在 サポート する フラグ は eio _falloc _fl _keep _size posix の 定数 falloc _fl _keep _size と 同じ 意味 だけ です
function eio fallocate $fd	ストリーム 、 ソケットリソース 、 あるい は 数値 で 表し た ファイルディスクリプタ たとえ ば eio _open が 返す もの
function eio fallocate $length	バイト 幅 の 長さ
function eio fallocate $data	callback に 渡す 任意 の 引数
function eio fallocate $pri	リクエスト の 優先 順位
function eio fallocate $offset	バイト 幅 の 開始 位置
function eio fallocate $callback	callback 関数 が 、 リクエスト 終了 時 に コール さ れ ます
function eio fallocate $req	は オプション で 指定 する リクエストリソース です
function eio fallocate $result	に は リクエスト 固有 の 結果 が 格納 さ れ ます
function resource eio fallocate	eio _fallocate は 、 成功 し た 場合 に リクエストリソース を 返し ます
function resource eio fallocate mixed $fd int $mode int $offset int $length int $pri callable $callback mixed $data	呼び出し元 が 、 ファイル に 割り 当て られ た ディスク 空間 を 直接 操作 できる よう に する
function eio fchmod $data	は 、 リクエスト に 渡す カスタムデータ です
function eio fchmod $fd	ストリーム 、 ソケットリソース 、 あるい は 数値 で 表し た ファイルディスクリプタ eio _open が 返す もの など
function eio fchmod $mode	新しい パーミッション
function eio fchmod $data	callback に 渡す 任意 の 引数
function eio fchmod $pri	リクエスト の 優先 順位
function eio fchmod $callback	callback 関数 が 、 リクエスト 終了 時 に コール さ れ ます
function eio fchmod $req	は オプション で 指定 する リクエストリソース です
function eio fchmod $result	に は リクエスト 固有 の 結果 が 格納 さ れ ます
function resource eio fchmod	eio _fchmod は 、 成功 し た 場合 に リクエストリソース を 返し ます
function resource eio fchmod mixed $fd int $mode int $pri callable $callback mixed $data	ファイル の パーミッション を 変更 する
function eio fchown $data	は 、 リクエスト に 渡す カスタムデータ です
function eio fchown $data	callback に 渡す 任意 の 引数
function eio fchown $req	は オプション で 指定 する リクエストリソース です
function eio fchown $gid	グループ id
function eio fchown $pri	リクエスト の 優先 順位
function eio fchown $callback	callback 関数 が 、 リクエスト 終了 時 に コール さ れ ます
function eio fchown $uid	ユーザー id
function eio fchown $fd	ストリーム 、 ソケットリソース 、 あるい は 数値 で 表し た ファイルディスクリプタ
function eio fchown $result	に は リクエスト 固有 の 結果 が 格納 さ れ ます
function resource eio fchown mixed $fd int $uid int $gid int $pri callable $callback mixed $data	ファイル の オーナー を 変更 する
function eio fdatasync $data	は 、 リクエスト に 渡す カスタムデータ です
function eio fdatasync $fd	ストリーム 、 ソケットリソース 、 あるい は 数値 で 表し た ファイルディスクリプタ eio _open が 返す もの など
function eio fdatasync $data	callback に 渡す 任意 の 引数
function eio fdatasync $pri	リクエスト の 優先 順位
function eio fdatasync $callback	callback 関数 が 、 リクエスト 終了 時 に コール さ れ ます
function eio fdatasync $req	は オプション で 指定 する リクエストリソース です
function eio fdatasync $result	に は リクエスト 固有 の 結果 が 格納 さ れ ます
function resource eio fdatasync	eio _fdatasync は 、 成功 し た 場合 に リクエストリソース を 返し ます
function resource eio fdatasync mixed $fd int $pri callable $callback mixed $data	ファイル の コア 内 の 情報 を ストレージデバイス に 同期 さ せる
function eio fsync $data	は 、 リクエスト に 渡す カスタムデータ です
function eio fsync $data	callback に 渡す 任意 の 引数
function eio fsync $pri	リクエスト の 優先 順位
function eio fsync $callback	callback 関数 が 、 リクエスト 終了 時 に コール さ れ ます
function eio fsync $req	は オプション で 指定 する リクエストリソース です
function eio fsync $fd	ストリーム 、 ソケットリソース 、 あるい は 数値 で 表し た ファイルディスクリプタ
function eio fsync $result	に は リクエスト 固有 の 結果 が 格納 さ れ ます
function resource eio fsync	eio _fsync は 、 成功 し た 場合 に リクエストリソース を 返し ます
function resource eio fsync mixed $fd int $pri callable $callback mixed $data	メモリ 内 で の ファイル の 状態 を ストレージデバイス に 同期 さ せる
function eio ftruncate $data	は 、 リクエスト に 渡す カスタムデータ です
function eio ftruncate $offset	ファイル の 先頭 から の オフセット
function eio ftruncate $data	callback に 渡す 任意 の 引数
function eio ftruncate $pri	リクエスト の 優先 順位
function eio ftruncate $callback	callback 関数 が 、 リクエスト 終了 時 に コール さ れ ます
function eio ftruncate $req	は オプション で 指定 する リクエストリソース です
function eio ftruncate $fd	ストリーム 、 ソケットリソース 、 あるい は 数値 で 表し た ファイルディスクリプタ
function eio ftruncate $result	に は リクエスト 固有 の 結果 が 格納 さ れ ます
function resource eio ftruncate	eio _ftruncate は 、 成功 し た 場合 に リクエストリソース を 返し ます
function resource eio ftruncate mixed $fd int $offset int $pri callable $callback mixed $data	ファイル を 切り 詰める
function eio futime $data	は 、 リクエスト に 渡す カスタムデータ です
function eio futime $fd	ストリーム 、 ソケットリソース 、 あるい は 数値 で 表し た ファイルディスクリプタ eio _open が 返す もの など
function eio futime $atime	アクセス 時刻
function eio futime $data	callback に 渡す 任意 の 引数
function eio futime $pri	リクエスト の 優先 順位
function eio futime $callback	callback 関数 が 、 リクエスト 終了 時 に コール さ れ ます
function eio futime $req	は オプション で 指定 する リクエストリソース です
function eio futime $result	に は リクエスト 固有 の 結果 が 格納 さ れ ます
function eio futime $mtime	変更 時刻
function resource eio futime	eio _futime は 、 成功 し た 場合 に リクエストリソース を 返し ます
function resource eio futime mixed $fd float $atime float $mtime int $pri callable $callback mixed $data	ファイル の 最終 アクセス 時刻 と 変更 時刻 を 変更 する
function eio get last error $req	リクエストリソース
function string eio get last error	eio _get _last _error は 、 req に 関連 づけ られ た 直近 の エラー の 説明 を 文字列 で 返し ます
function string eio get last error resource $req	リクエストリソース に 関連 づけ られ た 直近 の エラー の 説明 を 文字列 で 返す
function eio grp add $req	リクエストリソース
function eio grp add $grp	eio _grp が 返す リクエストグループリソース
function void eio grp add resource $grp resource $req	リクエスト を リクエストグループ に 追加 する
function eio grp limit $grp	リクエストグループリソース
function eio grp limit $limit	グループ 内 の リクエスト 数
function void eio grp limit resource $grp int $limit	グループリミット を 設定 する
function eio grp $data	は 、 リクエスト に 渡す カスタムデータ です
function eio grp $req	は オプション で 指定 する リクエストリソース です
function eio grp $result	に は リクエスト 固有 の 結果 が 格納 さ れ ます
function eio grp $callback	callback 関数 が 、 リクエスト 終了 時 に コール さ れ ます
function eio grp $data	callback に 渡す 任意 の 引数
function resource eio grp	eio _grp は 、 成功 し た 場合 に リクエストグループリソース を 返し ます
function resource eio grp callable $callback string $data	リクエストグループ を 作る
function void eio init	eio を 初期化 する
function eio link $data	は 、 リクエスト に 渡す カスタムデータ です
function eio link $new_path	リンク 先 の パス
function eio link $path	リンク 元 の パス
function eio link $data	callback に 渡す 任意 の 引数
function eio link $pri	リクエスト の 優先 順位
function eio link $callback	callback 関数 が 、 リクエスト 終了 時 に コール さ れ ます
function eio link $req	は オプション で 指定 する リクエストリソース です
function eio link $result	に は リクエスト 固有 の 結果 が 格納 さ れ ます
function resource eio link string $path string $new_path int $pri callable $callback mixed $data	ファイル の ハードリンク を 作る
function eio lstat $data	は 、 リクエスト に 渡す カスタムデータ です
function eio lstat $path	ファイル へ の パス
function eio lstat $data	callback に 渡す 任意 の 引数
function eio lstat $pri	リクエスト の 優先 順位
function eio lstat $callback	callback 関数 が 、 リクエスト 終了 時 に コール さ れ ます
function eio lstat $req	は オプション で 指定 する リクエストリソース です
function eio lstat $result	に は リクエスト 固有 の 結果 が 格納 さ れ ます
function resource eio lstat	eio _lstat は 、 成功 し た 場合 に リクエストリソース を 返し ます
function resource eio lstat string $path int $pri callable $callback mixed $data	ファイル の 状態 を 取得 する
function eio mkdir $data	は 、 リクエスト に 渡す カスタムデータ です
function eio mkdir $mode	アクセスモード
function eio mkdir $data	callback に 渡す 任意 の 引数
function eio mkdir $pri	リクエスト の 優先 順位
function eio mkdir $callback	callback 関数 が 、 リクエスト 終了 時 に コール さ れ ます
function eio mkdir $req	は オプション で 指定 する リクエストリソース です
function eio mkdir $result	に は リクエスト 固有 の 結果 が 格納 さ れ ます
function eio mkdir $path	新しい ディレクトリ へ の パス
function resource eio mkdir	eio _mkdir は 、 成功 し た 場合 に リクエストリソース を 返し ます
function resource eio mkdir string $path int $mode int $pri callable $callback mixed $data	ディレクトリ を 作る
function eio mknod $data	は 、 リクエスト に 渡す カスタムデータ です
function eio mknod $path	新しい ノード ファイル への パス
function eio mknod $mode	利用 する パーミッション と 作成 する ノード の 型 を 指定 し ます
function eio mknod $dev	ファイルタイプ が eio _s _ifchr あるい は eio _s _ifblk の 場合 に 、 新しく 作る デバイスファイル の メジャー 番号 と マイナー 番号 を 指定 し ます
function eio mknod $data	callback に 渡す 任意 の 引数
function eio mknod $pri	リクエスト の 優先 順位
function eio mknod $callback	callback 関数 が 、 リクエスト 終了 時 に コール さ れ ます
function eio mknod $req	は オプション で 指定 する リクエストリソース です
function eio mknod $result	に は リクエスト 固有 の 結果 が 格納 さ れ ます
function resource eio mknod	eio _mknod は 、 成功 し た 場合 に リクエストリソース を 返し ます
function resource eio mknod string $path int $mode int $dev int $pri callable $callback mixed $data	特殊 ファイル あるい は 一般 ファイル を 作る
function int eio nreqs	eio _nreqs は 、 処理 対象 の リクエスト 数 を 返し ます
function int eio nreqs	処理 対象 の リクエスト 数 を 返す
function eio open $data	は 、 リクエスト に 渡す カスタムデータ です
function eio open $flags	eio _o _* 定数 のい ずれ か 、 あるい は 複数 の 組み合わせ
function eio open $path	開き たい ファイル へ の パス
function eio open $data	callback に 渡す 任意 の 引数
function eio open $pri	リクエスト の 優先 順位
function eio open $callback	callback 関数 が 、 リクエスト 終了 時 に コール さ れ ます
function eio open $req	は オプション で 指定 する リクエストリソース です
function eio open $result	に は リクエスト 固有 の 結果 が 格納 さ れ ます
function eio open $mode	eio _s _i * 定数 のい ずれ か 、 あるい は 複数 の ビット or による 組み合わせ
function resource eio open	eio _open は 、 成功 し た 場合 に callback の result 引数 で ファイルディスクリプタ を 返し ます
function resource eio open string $path int $flags int $mode int $pri callable $callback mixed $data	ファイル を 開く
function int eio poll	何か の リクエスト を 実行 し て それ が 非 ゼロ を 返し た 場合 は 、 その 値 を 返し ます
function int eio poll	未処理 の リクエスト が ある かど う か を 調べる
function eio read $data	は 、 リクエスト に 渡す カスタムデータ です
function eio read $data	callback に 渡す 任意 の 引数
function eio read $pri	リクエスト の 優先 順位
function eio read $callback	callback 関数 が 、 リクエスト 終了 時 に コール さ れ ます
function eio read $offset	ファイル 内 で の オフセット
function eio read $req	は オプション で 指定 する リクエストリソース です
function eio read $fd	ストリーム 、 ソケットリソース 、 あるい は 数値 で 表し た ファイルディスクリプタ
function eio read $length	読み込む バイト 数 の 最大 値
function eio read $result	に は リクエスト 固有 の 結果 が 格納 さ れ ます
function resource eio read	eio _read は 、 読み込ん だ データ を callback 関数 の result 引数 に 格納 し ます
function resource eio read mixed $fd int $length int $offset int $pri callable $callback mixed $data	ファイル を 、 指定 し た オフセット から 読み込む
function eio readahead $data	は 、 リクエスト に 渡す カスタムデータ です
function eio readahead $length	読み込む バイト 数
function eio readahead $data	callback に 渡す 任意 の 引数
function eio readahead $pri	リクエスト の 優先 順位
function eio readahead $callback	callback 関数 が 、 リクエスト 終了 時 に コール さ れ ます
function eio readahead $req	は オプション で 指定 する リクエストリソース です
function eio readahead $fd	ストリーム 、 ソケットリソース 、 あるい は 数値 で 表し た ファイルディスクリプタ
function eio readahead $result	に は リクエスト 固有 の 結果 が 格納 さ れ ます
function eio readahead $offset	読み込み の 開始 位置
function resource eio readahead	eio _readahead は 、 成功 し た 場合 に リクエストリソース を 返し ます
function resource eio readahead mixed $fd int $offset int $length int $pri callable $callback mixed $data	ファイル を 先読み し て ページキャッシュ に 格納 する
function eio realpath $path	短い 形式 の パス
function resource eio realpath string $path int $pri callable $callback string $data	正規化 し た 絶対 パス を 取得 する
function eio rename $data	は 、 リクエスト に 渡す カスタムデータ です
function eio rename $new_path	変更後 の パス
function eio rename $path	元 の パス
function eio rename $data	callback に 渡す 任意 の 引数
function eio rename $pri	リクエスト の 優先 順位
function eio rename $callback	callback 関数 が 、 リクエスト 終了 時 に コール さ れ ます
function eio rename $req	は オプション で 指定 する リクエストリソース です
function eio rename $result	に は リクエスト 固有 の 結果 が 格納 さ れ ます
function resource eio rename	eio _rename は 、 成功 し た 場合 に リクエストリソース を 返し ます
function resource eio rename string $path string $new_path int $pri callable $callback mixed $data	ファイル 名 や 場所 を 変更 する
function eio rmdir $data	は 、 リクエスト に 渡す カスタムデータ です
function eio rmdir $path	ディレクトリ へ の パス
function eio rmdir $data	callback に 渡す 任意 の 引数
function eio rmdir $pri	リクエスト の 優先 順位
function eio rmdir $callback	callback 関数 が 、 リクエスト 終了 時 に コール さ れ ます
function eio rmdir $req	は オプション で 指定 する リクエストリソース です
function eio rmdir $result	に は リクエスト 固有 の 結果 が 格納 さ れ ます
function resource eio rmdir	eio _rmdir は 、 成功 し た 場合 に リクエストリソース を 返し ます
function resource eio rmdir string $path int $pri callable $callback mixed $data	ディレクトリ を 削除 する
function eio seek $data	は 、 リクエスト に 渡す カスタムデータ です
function eio seek $length	読み込む バイト 数
function eio seek $data	callback に 渡す 任意 の 引数
function eio seek $pri	リクエスト の 優先 順位
function eio seek $callback	callback 関数 が 、 リクエスト 終了 時 に コール さ れ ます
function eio seek $req	は オプション で 指定 する リクエストリソース です
function eio seek $fd	ストリーム 、 ソケットリソース 、 あるい は 数値 で 表し た ファイルディスクリプタ
function eio seek $result	に は リクエスト 固有 の 結果 が 格納 さ れ ます
function eio seek $offset	読み込み の 開始 位置
function resource eio seek	eio _seek は 、 成功 し た 場合 に リクエストリソース を 返し ます
function resource eio seek mixed $fd int $offset int $whence int $pri callable $callback mixed $data	fd で 指定 し た ファイル 内 で の オフセット を 、 offset と whence に 従っ て 移動 する
function eio sendfile $data	は 、 リクエスト に 渡す カスタムデータ です
function eio sendfile $length	コピー する バイト 数
function eio sendfile $out_fd	出力先 の ストリーム 、 ソケットリソース 、 あるい は ファイルディスクリプタ
function eio sendfile $data	callback に 渡す 任意 の 引数
function eio sendfile $offset	元 ファイル 内 で の オフセット
function eio sendfile $pri	リクエスト の 優先 順位
function eio sendfile $callback	callback 関数 が 、 リクエスト 終了 時 に コール さ れ ます
function eio sendfile $req	は オプション で 指定 する リクエストリソース です
function eio sendfile $result	に は リクエスト 固有 の 結果 が 格納 さ れ ます
function eio sendfile $in_fd	入力元 の ストリーム 、 ソケットリソース 、 あるい は ファイルディスクリプタ
function resource eio sendfile	eio _sendfile は 、 成功 し た 場合 に リクエストリソース を 返し ます
function resource eio sendfile mixed $out_fd mixed $in_fd int $offset int $length int $pri callable $callback string $data	ファイルディスクリプタ 間 で データ を 転送 する
function eio stat $data	は 、 リクエスト に 渡す カスタムデータ です
function eio stat $path	ファイル へ の パス
function eio stat $data	callback に 渡す 任意 の 引数
function eio stat $pri	リクエスト の 優先 順位
function eio stat $callback	callback 関数 が 、 リクエスト 終了 時 に コール さ れ ます
function eio stat $req	は オプション で 指定 する リクエストリソース です
function eio stat $result	に は リクエスト 固有 の 結果 が 格納 さ れ ます
function resource eio stat	eio _stat は 、 成功 し た 場合 に リクエストリソース を 返し ます
function resource eio stat string $path int $pri callable $callback mixed $data	ファイル の 状態 を 取得 する
function eio statvfs $data	は 、 リクエスト に 渡す カスタムデータ です
function eio statvfs $data	callback に 渡す 任意 の 引数
function eio statvfs $pri	リクエスト の 優先 順位
function eio statvfs $callback	callback 関数 が 、 リクエスト 終了 時 に コール さ れ ます
function eio statvfs $req	は オプション で 指定 する リクエストリソース です
function eio statvfs $path	マウント さ れ た ファイルシステム 内 の ファイル の パス
function eio statvfs $result	に は リクエスト 固有 の 結果 が 格納 さ れ ます
function resource eio statvfs	eio _statvfs は 、 成功 し た 場合 に リクエストリソース を 返し ます
function resource eio statvfs string $path int $pri callable $callback mixed $data	ファイルシステム の 状態 を 取得 する
function eio symlink $data	は 、 リクエスト に 渡す カスタムデータ です
function eio symlink $new_path	リンク 先 の パス
function eio symlink $path	リンク 元 の パス
function eio symlink $data	callback に 渡す 任意 の 引数
function eio symlink $pri	リクエスト の 優先 順位
function eio symlink $callback	callback 関数 が 、 リクエスト 終了 時 に コール さ れ ます
function eio symlink $req	は オプション で 指定 する リクエストリソース です
function eio symlink $result	に は リクエスト 固有 の 結果 が 格納 さ れ ます
function resource eio symlink	eio _symlink は 、 成功 し た 場合 に リクエストリソース を 返し ます
function resource eio symlink string $path string $new_path int $pri callable $callback mixed $data	シンボリックリンク を 作る
function eio truncate $data	は 、 リクエスト に 渡す カスタムデータ です
function eio truncate $offset	ファイル の 先頭 から の オフセット
function eio truncate $path	ファイル へ の パス
function eio truncate $data	callback に 渡す 任意 の 引数
function eio truncate $pri	リクエスト の 優先 順位
function eio truncate $callback	callback 関数 が 、 リクエスト 終了 時 に コール さ れ ます
function eio truncate $req	は オプション で 指定 する リクエストリソース です
function eio truncate $result	に は リクエスト 固有 の 結果 が 格納 さ れ ます
function resource eio truncate	eio _busy は 、 成功 し た 場合 に リクエストリソース を 返し ます
function resource eio truncate string $path int $offset int $pri callable $callback mixed $data	ファイル を 切り 詰める
function eio unlink $data	は 、 リクエスト に 渡す カスタムデータ です
function eio unlink $path	ファイル へ の パス
function eio unlink $data	callback に 渡す 任意 の 引数
function eio unlink $pri	リクエスト の 優先 順位
function eio unlink $callback	callback 関数 が 、 リクエスト 終了 時 に コール さ れ ます
function eio unlink $req	は オプション で 指定 する リクエストリソース です
function eio unlink $result	に は リクエスト 固有 の 結果 が 格納 さ れ ます
function resource eio unlink	eio _unlink は 、 成功 し た 場合 に リクエストリソース を 返し ます
function resource eio unlink string $path int $pri callable $callback mixed $data	名前 を 削除 し 、 その 名前 で 参照 し て いる ファイル も 削除 する
function eio write $data	は 、 リクエスト に 渡す カスタムデータ です
function eio write $fd	ストリーム 、 ソケットリソース 、 あるい は 数値 で 表し た ファイルディスクリプタ eio _open が 返す もの など
function eio write $str	ソース 文字列
function eio write $offset	ファイル の 先頭 から の オフセット
function eio write $data	callback に 渡す 任意 の 引数
function eio write $pri	リクエスト の 優先 順位
function eio write $callback	callback 関数 が 、 リクエスト 終了 時 に コール さ れ ます
function eio write $req	は オプション で 指定 する リクエストリソース です
function eio write $result	に は リクエスト 固有 の 結果 が 格納 さ れ ます
function eio write $length	書き込む 最大 バイト 数
function resource eio write	eio _write は 、 成功 し た 場合 に リクエストリソース を 返し ます
function resource eio write mixed $fd string $str int $length int $offset int $pri callable $callback mixed $data	ファイル に 書き込む
function empty $var	チェック する 変数 注意 : php 5
function bool empty	var が 存在 し 、 かつその 値 が 空や 0 で なけれ ば false を 返し ます
function bool empty mixed $var	変数 が 空 で ある かど う か を 検査 する
function enchant broker describe $broker	ブローカーリソース
function array enchant broker describe	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function array enchant broker describe resource $broker	enchant プロバイダ を 列挙 する
function enchant broker dict exists $broker	ブローカーリソース
function enchant broker dict exists $tag	空 で ない 、 locale 形式 の タグ
function bool enchant broker dict exists	タグ が 存在 する 場合 に true 、 存在 し ない 場合 に false を 返し ます
function bool enchant broker dict exists resource $broker string $tag	辞書 が 存在 する かど う か を 調べる
function enchant broker free dict $dict	辞書 リソース
function bool enchant broker free dict	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool enchant broker free dict resource $dict	辞書 リソース を 開放 する
function enchant broker free $broker	ブローカーリソース
function bool enchant broker free	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool enchant broker free resource $broker	ブローカーリソース および その 辞書 を 開放 する
function enchant broker get error $broker	ブローカーリソース
function string enchant broker get error	エラー が 見つかっ た 場合 に メッセージ 文字 列 、 それ 以外 の 場合 に false を 返し ます
function string enchant broker get error resource $broker	ブローカー の 直近 の エラー を 返す
function enchant broker list dicts $broker	ブローカーリソース
function mixed enchant broker list dicts	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function mixed enchant broker list dicts resource $broker	使用 可能 な 辞書 の 一覧 を 返す
function enchant broker request dict $broker	ブローカーリソース
function enchant broker request dict $tag	ロケール を 表す タグ
function resource enchant broker request dict	成功 し た 場合 に 辞書 リソース 、 失敗 し た 場合 に false を 返し ます
function resource enchant broker request dict resource $broker string $tag	タグ を 使用 し て 新しい 辞書 を 作成 する
function enchant broker request pwl dict $broker	ブローカーリソース
function enchant broker request pwl dict $filename	pwl ファイル へ の パス
function resource enchant broker request pwl dict	成功 し た 場合 に 辞書 リソース 、 失敗 し た 場合 に false を 返し ます
function resource enchant broker request pwl dict resource $broker string $filename	pwl ファイル を 使用 し て 辞書 を 作成 する
function enchant broker set ordering $broker	ブローカーリソース
function enchant broker set ordering $tag	言語タグ
function enchant broker set ordering $ordering	プロバイダ 名 を カンマ 区切り でつ ない だ リスト
function bool enchant broker set ordering	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool enchant broker set ordering resource $broker string $tag string $ordering	その 言語 で 使用 する 辞書 の 優先 順位 を 宣言 する
function enchant dict describe $dict	辞書 リソース
function mixed enchant dict describe	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function mixed enchant dict describe resource $dict	個々 の 辞書 について 説明 する
function enchant dict get error $dict	辞書 リソース
function string enchant dict get error	エラーメッセージ を 表す 文字 列 、 あるい は エラー が 発生 し て い ない 場合 に false を 返し ます
function string enchant dict get error resource $dict	現在 の スペリングセッション の 直近 の エラー を 返す
function enchant dict is in session $word	探す 単語
function enchant dict is in session $dict	辞書 リソース
function bool enchant dict is in session	単語 が 存在 する 場合 に true 、 それ 以外 の 場合 に false を 返し ます
function bool enchant dict is in session resource $dict string $word	この スペリングセッション に ' 単語 ' が 存在 する かど う か を 調べる
function eregi $regs	pattern の 括弧 でくく られ た 部分 文字列 に マッチ し 、 かつこの 関数 が 3 番目 の 引数 regs を 指定 し て コール さ れ た 場合 、 マッチ し た 部分 が 配列 regs に 格納 さ れ ます
function eregi $string	入力 文字列
function eregi $pattern	大文字 小文字 を 区別 し ない 正規 表現
function int eregi	string の 中 で pattern が マッチ し た 場合 に は マッチ し た 文字 列 の 長さ を 返し 、 マッチ し なかっ た 場合 また は エラー と なっ た 場合 は false を 返し ます
function int eregi string $pattern string $string array $regs	大文字 小文字 を 区別 せ ず に 正規 表現 による マッチング を 行う
function error log $extra_headers	追加 の ヘッダ
function error log $message	ログ に 記録 さ れる エラーメッセージ
function error log $message_type	メッセージ を どこ に 送る の か を 指定 し ます
function error log $destination	メッセージ の 送信 先
function bool error log	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool error log string $message int $message_type string $destination string $extra_headers	定義 さ れ た エラー 処理 ルーチン に エラーメッセージ を 送信 する
function error reporting $level	新しい error _reporting レベル
function int error reporting	変更前 の error _reporting レベル を 返し ます
function int error reporting int $level	出力 する php エラー の 種類 を 設定 する
function escapeshellarg $arg	エスケープ さ れる 引数
function string escapeshellarg	エスケープ さ れ た 文字列
function string escapeshellarg string $arg	シェル 引数 として 使用 さ れる 文字列 を エスケープ する
function eval $code	有効 な php コード
function mixed eval	評価 さ れる コード の 中 で return が コール さ れ ない 限り 、 eval は null を 返し ます
function mixed eval string $code	文字列 を php コード として 評価 する
function event add $timeout	オプション の タイムアウト マイクロ 秒
function event add $event	有効 な イベントリソース
function bool event add	event _add は 、 成功 し た 場合 に true 、 エラー 時 に false を 返し ます
function bool event add resource $event int $timeout	モニタ する イベント に 追加 する
function event base free $event_base	有効 な イベントベースリソース
function void event base free resource $event_base	イベントベース を 破棄 する
function event base loop $event_base	有効 な イベントベースリソース
function event base loop $flags	オプション の パラメータ
function int event base loop	event _base _loop は 、 成功 し た 場合 に 0 、 エラー 時 に - 1 、 イベント が 登録 さ れ て い なけれ ば 1 を 返し ます
function int event base loop resource $event_base int $flags	イベント を 処理 する
function event base loopbreak $event_base	有効 な イベントベースリソース
function bool event base loopbreak	event _base _loopbreak は 、 成功 し た 場合 に true 、 エラー 時 に false を 返し ます
function bool event base loopbreak resource $event_base	イベントループ を 中止 する
function resource event base new	event _base _new は 、 成功 し た 場合 に 有効 な イベントベースリソース 、 エラー 時 に false を 返し ます
function resource event base new	新しい イベントベース を 作成 し て 初期化 する
function event base priority init $event_base	有効 な イベントベースリソース
function event base priority init $npriorities	イベント の 優先 度 レベル を 表す 数値
function bool event base priority init	event _base _priority _init は 、 成功 し た 場合 に true 、 エラー 時 に false を 返し ます
function bool event base priority init resource $event_base int $npriorities	イベント の 優先 度 レベル の 数値 を 設定 する
function event base set $event_base	有効 な イベントベースリソース
function event base set $event	有効 な イベントリソース
function bool event base set	event _base _set は 、 成功 し た 場合 に true 、 エラー 時 に false を 返し ます
function bool event base set resource $event resource $event_base	イベントベース を イベント と 関連 づける
function event buffer base set $bevent	有効 な バッファ つき イベントリソース
function event buffer base set $event_base	有効 な イベントベースリソース
function bool event buffer base set	event _buffer _base _set は 、 成功 し た 場合 に true 、 エラー 時 に false を 返し ます
function bool event buffer base set resource $bevent resource $event_base	バッファ つき イベント を イベントベース と 関連 づける
function event buffer disable $bevent	有効 な バッファ つき イベントリソース
function event buffer disable $events	ev _read と ev _write の 任意 の 組み合わせ
function bool event buffer disable	event _buffer _disable は 、 成功 し た 場合 に true 、 エラー 時 に false を 返し ます
function bool event buffer disable resource $bevent int $events	バッファ つき イベント を 無効 に する
function event buffer enable $bevent	有効 な バッファ つき イベントリソース
function event buffer enable $events	ev _read と ev _write の 任意 の 組み合わせ
function bool event buffer enable	event _buffer _enable は 、 成功 し た 場合 に true 、 エラー 時 に false を 返し ます
function bool event buffer enable resource $bevent int $events	バッファ つき イベント を 有効 に する
function event buffer fd set $bevent	有効 な バッファ つき イベントリソース
function event buffer fd set $fd	有効 な php ストリーム
function void event buffer fd set resource $bevent resource $fd	バッファ つき イベント の ファイル 記述子 を 変更 する
function event buffer free $bevent	有効 な バッファ つき イベントリソース
function void event buffer free resource $bevent	バッファ つき イベント を 破棄 する
function event buffer new $readcb	データ を 読み込む とき に 起動 する コールバック
function event buffer new $writecb	記述子 の 書き込み 準備 が でき た とき に 起動 する コールバック
function event buffer new $errorcb	記述子 で エラー が 発生 し た とき に 起動 する コールバック
function event buffer new $arg	各 コールバック に 渡す 引数 任意
function event buffer new $stream	有効 な php ストリームリソース
function resource event buffer new	event _buffer _new は 、 成功 し た 場合 に 新しい バッファ つき イベント 、 エラー 時 に false を 返し ます
function resource event buffer new resource $stream mixed $readcb mixed $writecb mixed $errorcb mixed $arg	新しい バッファ つき イベント を 作成 する
function event buffer priority set $priority	優先度 レベル
function event buffer priority set $bevent	有効 な バッファ つき イベントリソース
function bool event buffer priority set	event _buffer _priority _set は 、 成功 し た 場合 に true 、 エラー 時 に false を 返し ます
function bool event buffer priority set resource $bevent int $priority	バッファ 着き イベント の 優先 度 を 設定 する
function event buffer read $bevent	有効 な バッファ つき イベントリソース
function event buffer read $data_size	データサイズ バイト 単位
function string event buffer read resource $bevent int $data_size	バッファ つき イベント から データ を 読み込む
function event buffer timeout set $write_timeout	書き込み タイムアウト 秒数
function event buffer timeout set $bevent	有効 な バッファ つき イベントリソース
function event buffer timeout set $read_timeout	読み込み タイムアウト 秒数
function void event buffer timeout set resource $bevent int $read_timeout int $write_timeout	バッファ つき イベント の 読み込み タイムアウト および 書き込み タイムアウト を 設定 する
function event buffer write $data_size	オプション で サイズ を 指定 し ます
function event buffer write $bevent	有効 な バッファ つき イベントリソース
function event buffer write $data	書き込む データ
function bool event buffer write	event _buffer _write は 、 成功 し た 場合 に true 、 エラー 時 に false を 返し ます
function bool event buffer write resource $bevent string $data int $data_size	バッファ つき イベント に データ を 書き込む
function event del $event	有効 な イベントリソース
function bool event del	event _del は 、 成功 し た 場合 に true 、 エラー 時 に false を 返し ます
function bool event del resource $event	モニタ する イベント から 削除 する
function event free $event	有効 な イベントリソース
function void event free resource $event	イベントリソース を 解放 する
function resource event new	event _new は 、 成功 し た 場合 に イベントリソース 、 エラー 時 に false を 返し ます
function resource event new	新しい イベント を 作成 する
function exec $output	引数 output が 存在 する 場合 、 指定 し た 配列 は 、 コマンド から の 出力 の 各行 で 埋め られ ます
function exec $command	実行 する コマンド
function exec $return_var	引数 return _var が 、 引数 output と 共に 存在 する 場合 、 実行 し た コマンド の ステータス が この 変数 に 書か れ ます
function string exec	コマンド 結果 の 最後 の 行 を 返し ます
function string exec string $command array $output int $return_var	外部 プログラム を 実行 する
function exif read data $arrays	各 セクション を 配列 と する かど う か を 指定 し ます
function exif read data $filename	読み込む 画像 ファイル の 名前
function exif read data $sections	結果 の 配列 を 作成 する ため に 存在 する 必要 の ある セクション の カンマ 区切り リスト
function exif read data $thumbnail	true を 指定 する と 、 サムネイル 本体 を 読み込み ます
function array exif read data	ヘッダ 名 が キー ・ ヘッダ の 内容 が 値と なる 連想 配列 を 返し ます
function array exif read data string $filename string $sections bool $arrays bool $thumbnail	jpeg あるい は tiff から exif ヘッダ を 読み込む
function exif thumbnail $width	返さ れる サムネイル の 幅 が 格納 さ れ ます
function exif thumbnail $filename	読み込む 画像 ファイル の 名前
function exif thumbnail $height	返さ れる サムネイル の 高さ が 格納 さ れ ます
function exif thumbnail $imagetype	返さ れる サムネイル の 画像 タイプ が 格納 さ れ ます
function string exif thumbnail	埋め込ま れ た サムネイル を 返し ます
function string exif thumbnail string $filename int $width int $height int $imagetype	tiff あるい は jpeg 形式 の 画像 に 埋め込ま れ た サムネイル を 取得 する
function exit $status	status が 文字列 の 場合 は 、 この 関数 は 終了 直前 に status を 表示 し ます
function void exit string $status	メッセージ を 出力 し 、 現在 の スクリプト を 終了 する
function expect popen $command	実行 する コマンド
function resource expect popen	プロセス の 標準 入力 ・ 標準 出力 ・ 標準 エラー 出力 へ の pty ストリーム を 返し ます
function resource expect popen string $command	bourne シェル 経由 で コマンド を 実行 し 、 プロセス へ の pty ストリーム を オープン する
function expm1 $arg	処理 する 引数
function float expm1	& # 0 3 9 ; e &# 0 3 9 ; の arg 乗 から 1 を 引い た 値 を 返し ます
function float expm1 float $arg	値 が ゼロ に 近い 時 に でも 精度 を 保つ ため に exp number - 1 を 返す
function extension loaded $name	拡張 モジュール の 名前
function bool extension loaded	name で 指定 する 拡張 機能 が ロード さ れ て いる 場合 に true を 返し ます
function bool extension loaded string $name	ある 拡張 機能 が ロード さ れ て いる かど う か を 調べる
function extract $array	この 関数 は 連想 配列 var _array を 引数 と し 、 その キー を 変数 名 、 値 を 変数 の 値として 処理 し ます
function extract $EXTR_OVERWRITE	衝突 が あっ た 場合 、 存在 する 変数 が 上書き さ れ ます
function extract $EXTR_IF_EXISTS	現在 の シンボルテーブル に 既 に 存在 する 場合 に のみ 上書き し ます
function extract $EXTR_PREFIX_IF_EXISTS	同じ 変数 だ が 接頭 辞 を つけ て い ない バージョン の 変数 が 現在 の シンボルテーブル に 存在 する 場合 に のみ 変数 を 生成 し ます
function extract $EXTR_PREFIX_ALL	全て の 変数 の 前 に prefix を 付け ます
function extract $EXTR_SKIP	衝突 が あっ た 場合 、 存在 する 変数 は 上書き さ れ ませ ん
function extract $prefix	prefix は 、 flags が extr _prefix _same 、 extr _prefix _all 、 extr _prefix _invalid あるい は extr _prefix _if _exists の 場合 に のみ 必要 で ある こと に 注意 し て くだ さい
function extract $flags	無効 また は 数値 キー および 衝突 に関する 対処 法 は 、 flags で 定義 さ れ ます
function extract $EXTR_PREFIX_INVALID	無効 また は 数値 の 変数 名 のみ に 接頭 辞 prefix を 付け ます
function extract $EXTR_REFS	変数 を 参照 として 展開 し ます
function extract $EXTR_PREFIX_SAME	衝突 が あっ た 場合 、 prefix を 前 につけた 新しい 変数 と なり ます
function int extract	シンボルテーブル に インポート し た 変数 の 数 を 返し ます
function int extract array $array int $flags string $prefix	配列 から シンボルテーブル に 変数 を インポート する
function fam cancel monitor $fam_monitor	fam _monitor _xxx 関数 のい ずれ か が 返す リソース
function fam cancel monitor $fam	a resource representing a connection to the fam service returned by fam _open
function bool fam cancel monitor	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool fam cancel monitor resource $fam resource $fam_monitor	監視 を 終了 する
function fam close $fam	fam _open が 返す 、 fam サービス へ の 接続 を 表す リソース
function void fam close resource $fam	fam 接続 を 閉じる
function fam monitor directory $fam	fam _open が 返す 、 fam サービス へ の 接続 を 表す リソース
function fam monitor directory $dirname	監視 する ディレクトリ へ の パス
function resource fam monitor directory	モニタリングリソース 、 あるい は エラー 時 に false を 返し ます
function resource fam monitor directory resource $fam string $dirname	ディレクトリ の 変更 を 監視 する
function fam monitor file $fam	fam _open が 返す 、 fam サービス へ の 接続 を 表す リソース
function fam monitor file $filename	監視 する ファイル へ の パス
function resource fam monitor file	モニタリングリソース 、 あるい は エラー 時 に false を 返し ます
function resource fam monitor file resource $fam string $filename	通常 の ファイル の 変更 を 監視 する
function fam next event $fam	fam _open が 返す 、 fam サービス へ の 接続 を 表す リソース
function array fam next event resource $fam	次 の 待機 中 の fam イベント を 返す
function fam pending $fam	fam _open が 返す 、 fam サービス へ の 接続 を 表す リソース
function int fam pending	fam _next _event により 取得 可能 な 待機 中 の イベント が ある 場合 に ゼロ 以外 の 値 、 ない 場合 に ゼロ を 返し ます
function int fam pending resource $fam	待機 中 の fam イベント の 有無 を 調べる
function fam resume monitor $fam	fam _open が 返す 、 fam サービス へ の 接続 を 表す リソース
function fam resume monitor $fam_monitor	fam _monitor _xxx 関数 のい ずれ か が 返す リソース
function bool fam resume monitor	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool fam resume monitor resource $fam resource $fam_monitor	中断 さ れ た 監視 処理 を 再開 する
function fann init weights $train_data	ニューラルネットワークトレーニングリソース
function fann init weights $ann	ニューラルネットワークリソース
function bool fann init weights	成功 し た 場合 に true 、 それ 以外 の 場合 に false を 返し ます
function bool fann init weights resource $ann resource $train_data	initialize the weights using widrow + nguyen &rsquo ;s algorithm
function fbsql affected rows $link_identifier	fbsql _connect あるい は fbsql _pconnect が 返す frontbase リンク id
function int fbsql affected rows	直近 の クエリ が 失敗 し た 場合 、 この 関数 は - 1 を 返し ます
function int fbsql affected rows resource $link_identifier	直近 の frontbase 操作 により 変更 さ れ た レコード の 数 を 得る
function fbsql blob size $link_identifier	fbsql _connect あるい は fbsql _pconnect が 返す frontbase リンク id
function fbsql blob size $blob_handle	fbsql _create _blob が 返す blob ハンドル
function int fbsql blob size	blob の 大きさ を 整数 値 で 返し ます
function int fbsql blob size string $blob_handle resource $link_identifier	blob の 大きさ を 取得 する
function fbsql change user $user	新しい ユーザー 名
function fbsql change user $link_identifier	fbsql _connect あるい は fbsql _pconnect が 返す frontbase リンク id
function fbsql change user $database	指定 し た 場合 、 これ が ユーザー 変更 後 の デフォルト また は カレントデータベース と なり ます
function fbsql change user $password	新しい ユーザー の パスワード
function bool fbsql change user	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool fbsql change user string $user string $password string $database resource $link_identifier	アクティブ な 接続 に ログイン し て いる ユーザー を 変更 する
function fbsql close $link_identifier	fbsql _connect あるい は fbsql _pconnect が 返す frontbase リンク id
function bool fbsql close	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool fbsql close resource $link_identifier	frontbase 接続 を 閉じる
function fbsql connect $username	接続用 の ユーザー 名
function fbsql connect $hostname	サーバー の ホスト 名
function fbsql connect $password	接続用 の パスワード
function resource fbsql connect	成功 時 に 正 の frontbase リンク id 、 エラー 時 に false を 返し ます
function resource fbsql connect string $hostname string $username string $password	frontbase サーバー へ の 接続 を オープン する
function fbsql create blob $link_identifier	fbsql _connect あるい は fbsql _pconnect が 返す frontbase リンク id
function fbsql create blob $blob_data	blob データ
function string fbsql create blob	新しく 作成 し た blob の リソースハンドル を 返し ます
function string fbsql create blob string $blob_data resource $link_identifier	blob を 作成 する
function fbsql create clob $link_identifier	fbsql _connect あるい は fbsql _pconnect が 返す frontbase リンク id
function fbsql create clob $clob_data	clob データ
function string fbsql create clob	新しく 作成 し た clob の リソースハンドル を 返し ます
function string fbsql create clob string $clob_data resource $link_identifier	clob を 作成 する
function fbsql create db $link_identifier	fbsql _connect あるい は fbsql _pconnect が 返す frontbase リンク id
function fbsql create db $database_name	データベース 名 を 表す 文字列
function bool fbsql create db	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool fbsql create db string $database_name resource $link_identifier string $database_options	frontbase データベース を 作成 する
function fbsql data seek $result	fbsql _query あるい は fbsql _db _query が 返す 結果 id
function fbsql data seek $row_number	行番号
function bool fbsql data seek	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool fbsql data seek resource $result int $row_number	内部 結果 ポインタ を 移動 する
function fbsql database $database	データベース 名
function fbsql database $link_identifier	fbsql _connect あるい は fbsql _pconnect が 返す frontbase リンク id
function string fbsql database	この 接続 で 使用 する データベース の 名前 を 返し ます
function string fbsql database resource $link_identifier string $database	接続 で 使用 する データベース 名 を 取得 あるい は 設定 する
function fbsql db query $query	実行 する sql クエリ
function fbsql db query $link_identifier	fbsql _connect あるい は fbsql _pconnect が 返す frontbase リンク id
function fbsql db query $database	選択 し た データベース
function resource fbsql db query	クエリ 結果 へ の 正 の frontbase 結果 id 、 また は エラー 時 に は false を 返し ます
function resource fbsql db query string $database string $query resource $link_identifier	frontbase クエリ を 送信 する
function fbsql db status $link_identifier	fbsql _connect あるい は fbsql _pconnect が 返す frontbase リンク id
function fbsql db status $database_name	データベース 名
function int fbsql db status	現在 の 状態 を 表す 整数 値 を 返し ます
function int fbsql db status string $database_name resource $link_identifier	指定 し た データベース の 状態 を 取得 する
function fbsql drop db $link_identifier	fbsql _connect あるい は fbsql _pconnect が 返す frontbase リンク id
function fbsql drop db $database_name	データベース 名 を 表す 文字列
function bool fbsql drop db	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool fbsql drop db string $database_name resource $link_identifier	frontbase データベース を 破棄 削除 する
function fbsql errno $link_identifier	fbsql _connect あるい は fbsql _pconnect が 返す frontbase リンク id
function int fbsql errno	直近 の fbsql 関数 の エラー 番号 、 あるい は エラー が 発生 し なかっ た 場合 に 0 ゼロ を 返し ます
function int fbsql errno resource $link_identifier	前 の frontbase 操作 による エラーメッセージ の 数値 を 返す
function fbsql fetch array $result	fbsql _query あるい は fbsql _db _query が 返す 結果 id
function fbsql fetch array $result_type	fbsql _assoc 、 fbsql _num あるい は fbsql _both のいずれか の 定数 値
function array fbsql fetch array	取得 し た 行 に 対応 する 配列 を 返し ます
function array fbsql fetch array resource $result int $result_type	連想 配列 、 数値 配列 、 また は その 両方 として 結果 レコード を 取得 する
function fbsql fetch field $result	fbsql _query あるい は fbsql _db _query が 返す 結果 id
function fbsql fetch field $field_offset	フィールド の 数値 オフセット
function object fbsql fetch field	フィールド 情報 を 含む オブジェクト 、 あるい は エラー 時 に false を 返し ます
function object fbsql fetch field resource $result int $field_offset	結果 から カラム 情報 を 得て 、 オブジェクト として 返す
function fbsql fetch object $result	fbsql _query あるい は fbsql _db _query が 返す 結果 id
function object fbsql fetch object	取得 し た 行 に 対応 する プロパティ を もつ オブジェクト を 返し ます
function object fbsql fetch object resource $result	オブジェクト として 結果 レコード を 取得 する
function fbsql field flags $result	fbsql _list _fields が 返す 結果 ポインタ
function fbsql field flags $field_offset	フィールド の 数値 オフセット
function string fbsql field flags	指定 し た フィールド の フィールドフラグ を 返し ます
function string fbsql field flags resource $result int $field_offset	クエリ 結果 に おい て 指定 し た フィールド に関する フラグ を 得る
function fbsql field len $result	fbsql _list _fields が 返す 結果 ポインタ
function fbsql field len $field_offset	フィールド の 数値 オフセット
function int fbsql field len	指定 し た フィールド の 長さ を 返し ます
function int fbsql field len resource $result int $field_offset	指定 し た フィールド の 長さ を 返す
function fbsql field table $result	fbsql _query あるい は fbsql _db _query が 返す 結果 id
function fbsql field table $field_offset	フィールド の 数値 オフセット
function string fbsql field table	テーブル 名 を 文字列 で 返し ます
function string fbsql field table resource $result int $field_offset	指定 し た フィールド が ある テーブル の 名前 を 得る
function fbsql field type $result	fbsql _query あるい は fbsql _db _query が 返す 結果 id
function fbsql field type $field_offset	フィールド の 数値 オフセット
function string fbsql field type	フィールド の 型 を 文字列 で 返し ます
function string fbsql field type resource $result int $field_offset	結果 の 中 で 指定 し た フィールド の 型 を 得る
function fbsql free result $result	fbsql _query あるい は fbsql _db _query が 返す 結果 id
function bool fbsql free result	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool fbsql free result resource $result	結果 メモリ を 開放 する
function fbsql hostname $host_name	指定 し た 場合 は 、 これ が 新しい 接続 の ホスト 名 と なり ます
function fbsql hostname $link_identifier	fbsql _connect あるい は fbsql _pconnect が 返す frontbase リンク id
function string fbsql hostname	現在 の 接続 で 使用 し て いる ホスト 名 を 返し ます
function string fbsql hostname resource $link_identifier string $host_name	接続 で 使用 さ れ て いる ホスト 名 を 取得 あるい は 設定 する
function fbsql insert id $link_identifier	fbsql _connect あるい は fbsql _pconnect が 返す frontbase リンク id
function int fbsql insert id	直近 の insert クエリ が 生成 し た id を 返し ます
function int fbsql insert id resource $link_identifier	直近 の insert 処理 により 生成 さ れ た id を 得る
function fbsql list dbs $link_identifier	fbsql _connect あるい は fbsql _pconnect が 返す frontbase リンク id
function resource fbsql list dbs	結果 ポインタ あるい は エラー 時 に false を 返し ます
function resource fbsql list dbs resource $link_identifier	frontbase サーバー で 利用 可能 な データベース の 一覧 を 得る
function fbsql list fields $table_name	テーブル 名
function fbsql list fields $link_identifier	fbsql _connect あるい は fbsql _pconnect が 返す frontbase リンク id
function fbsql list fields $database_name	データベース 名
function resource fbsql list fields	結果 ポインタ を 返し ます
function resource fbsql list fields string $database_name string $table_name resource $link_identifier	frontbase 結果 フィールド の 一覧 を 得る
function fbsql list tables $database	データベース 名
function fbsql list tables $link_identifier	fbsql _connect あるい は fbsql _pconnect が 返す frontbase リンク id
function resource fbsql list tables	結果 ポインタ を 返し ます
function resource fbsql list tables string $database resource $link_identifier	frontbase データベース の テーブル 一覧 を 得る
function fbsql num rows $result	fbsql _query あるい は fbsql _db _query が 返す 結果 id
function int fbsql num rows	直近 の select 文 が 返す行 の 数 を 返し ます
function int fbsql num rows resource $result	結果 の レコード 数 を 得る
function fbsql pconnect $username	接続 時 の ユーザー 名
function fbsql pconnect $password	接続 時 の パスワード
function fbsql pconnect $hostname	ホスト 名
function resource fbsql pconnect	成功 し た 場合 に は 正 の frontbase 持続 的 リンク id 、 エラー 時 に は false を 返し ます
function resource fbsql pconnect string $hostname string $username string $password	frontbase サーバー へ の 持続 的 接続 を オープン する
function fbsql query $query	実行 する sql クエリ
function fbsql query $link_identifier	fbsql _connect あるい は fbsql _pconnect が 返す frontbase リンク id
function resource fbsql query	fbsql _query は 、 クエリ が 成功 し た かどう か を 示す ため に true 非 ゼロ あるい は false を 返し ます
function resource fbsql query string $query resource $link_identifier int $batch_size	frontbase クエリ を 送信 する
function fbsql read blob $link_identifier	fbsql _connect あるい は fbsql _pconnect が 返す frontbase リンク id
function fbsql read blob $blob_handle	fbsql _create _blob が 返す blob ハンドル
function string fbsql read blob	指定 し た blob データ を 含む 文字 列 を 返し ます
function string fbsql read blob string $blob_handle resource $link_identifier	データベース から blob を 読み込む
function fbsql rollback $link_identifier	fbsql _connect あるい は fbsql _pconnect が 返す frontbase リンク id
function bool fbsql rollback	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool fbsql rollback resource $link_identifier	データベース へ の トランザクション を ロールバック する
function fbsql select db $link_identifier	fbsql _connect あるい は fbsql _pconnect が 返す frontbase リンク id
function fbsql select db $database_name	選択 する データベース の 名前
function bool fbsql select db	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool fbsql select db string $database_name resource $link_identifier	frontbase データベース を 選択 する
function fbsql set lob mode $result	fbsql _query あるい は fbsql _db _query が 返す 結果 id
function fbsql set lob mode $lob_mode	以下 のい ずれ か です
function bool fbsql set lob mode	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool fbsql set lob mode resource $result int $lob_mode	frontbase 結果 セット の lob 取得 モード を 設定 する
function fbsql set password $old_password	も と の パスワード
function fbsql set password $password	設定 する 新しい パスワード
function fbsql set password $link_identifier	fbsql _connect あるい は fbsql _pconnect が 返す frontbase リンク id
function fbsql set password $user	ユーザー 名
function bool fbsql set password	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool fbsql set password resource $link_identifier string $user string $password string $old_password	指定 し た ユーザー の パスワード を 変更 する
function fbsql set transaction $isolation	設定 する 分離 レベル
function fbsql set transaction $locking	設定 する ロック の 形式
function fbsql set transaction $link_identifier	fbsql _connect あるい は fbsql _pconnect が 返す frontbase リンク id
function void fbsql set transaction resource $link_identifier int $locking int $isolation	トランザクション の ロック と 分離 レベル を 設定 する
function fbsql start db $link_identifier	fbsql _connect あるい は fbsql _pconnect が 返す frontbase リンク id
function fbsql start db $database_name	データベース 名
function bool fbsql start db	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool fbsql start db string $database_name resource $link_identifier string $database_options	ローカル また は リモートサーバー の データベース を 開始 する
function fbsql stop db $link_identifier	fbsql _connect あるい は fbsql _pconnect が 返す frontbase リンク id
function fbsql stop db $database_name	データベース 名
function bool fbsql stop db	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool fbsql stop db string $database_name resource $link_identifier	ローカル また は リモートサーバー の データベース を 停止 する
function fbsql warnings $OnOff	警告 を 有効 に する かし ない か
function bool fbsql warnings	警告 を オン に し た 場合 は true 、 そう で ない 場合 は false を 返し ます
function bool fbsql warnings bool $OnOff	frontbase 警告 を 有効 また は 無効 に する
function fclose $handle	ファイルポインタ は 有効 なもの で なけれ ば なら ず 、 また fopen また は fsockopen で 正常 に オープン さ れ た ファイル を 指し て いる 必要 が あり ます
function bool fclose	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool fclose resource $handle	オープン さ れ た ファイルポインタ を クローズ する
function fdf close $fdf_document	fdf _create 、 fdf _open あるい は fdf _open _string が 返す fdf ドキュメントハンドル
function void fdf close resource $fdf_document	fdf ドキュメント を 閉じる
function resource fdf create	fdf ドキュメントハンドル 、 あるい は エラー 時 に false を 返し ます
function resource fdf create	新規 fdf ドキュメント を 作成 する
function fdf error $error_code	fdf _errno で 取得 し た エラーコード
function string fdf error	エラーメッセージ を 表す 文字 列 、 あるい は 何 も 問題 が ない 場合 は no error を 返し ます
function string fdf error int $error_code	直近 の fdf エラーコード について の 説明 を 返す
function fdf get attachment $fdf_document	fdf _create 、 fdf _open あるい は fdf _open _string が 返す fdf ドキュメントハンドル
function fdf get attachment $savepath	ファイル 名 また は 既存 の ディレクトリ 名 を 指定 し 、 ディレクトリ 名 を 指定 し た 場合 は その 下 に 元 の ファイル 名 で 保存 さ れ ます
function array fdf get attachment	返さ れる 配列 は 以下 の よう な フィールド を 保持 し ます
function array fdf get attachment resource $fdf_document string $fieldname string $savepath	fdf に 埋め込ま れ て いる 、 アップロード さ れ た ファイル を 展開 する
function fdf get file $fdf_document	fdf _create 、 fdf _open あるい は fdf _open _string が 返す fdf ドキュメントハンドル
function string fdf get file	キー の 値 を 文字列 を 返し ます
function string fdf get file resource $fdf_document	/ f キー の 値 を 得る
function fdf get status $fdf_document	fdf _create 、 fdf _open あるい は fdf _open _string が 返す fdf ドキュメントハンドル
function string fdf get status	キー の 値 を 文字列 で 返し ます
function string fdf get status resource $fdf_document	/ status キー の 値 を 得る
function fdf get value $fdf_document	fdf _create 、 fdf _open あるい は fdf _open _string が 返す fdf ドキュメントハンドル
function fdf get value $which	この オプションパラメータ を 渡す こと で 、 配列 フィールド の 要素 が 取得 可能 です
function fdf get value $fieldname	fdf フィールド の 名前 を 表す 文字列
function mixed fdf get value	フィールド の 値 を 返し ます
function mixed fdf get value resource $fdf_document string $fieldname int $which	フィールド の 値 を 得る
function fdf get version $fdf_document	fdf _create 、 fdf _open あるい は fdf _open _string が 返す fdf ドキュメントハンドル
function string fdf get version	バージョン を 表す 文字 列 を 返し ます
function string fdf get version resource $fdf_document	fdf api あるい は ファイル の バージョン を 取得 する
function fdf next field name $fdf_document	fdf _create 、 fdf _open あるい は fdf _open _string が 返す fdf ドキュメントハンドル
function fdf next field name $fieldname	fdf フィールド 名 を 表す 文字列
function string fdf next field name	フィールド 名 を 文字列 で 返し ます
function string fdf next field name resource $fdf_document string $fieldname	次 の フィールド 名 を 得る
function fdf open $filename	fdf ファイル へ の パス
function resource fdf open	fdf ドキュメント の ハンドル 、 あるい は エラー 時 に false を 返し ます
function resource fdf open string $filename	fdf ドキュメント を オープン する
function fdf save string $fdf_document	fdf _create 、 fdf _open あるい は fdf _open _string が 返す fdf ドキュメントハンドル
function string fdf save string	ドキュメント を 表す 文字 列 、 あるい は エラー 時 に false を 返し ます
function string fdf save string resource $fdf_document	fdf ドキュメント を 文字 列 として 返す
function fdf save $fdf_document	fdf _create 、 fdf _open あるい は fdf _open _string が 返す fdf ドキュメントハンドル
function fdf save $filename	指定 し た 場合 は 、 結果 の fdf がここ に 書き込ま れ ます
function bool fdf save	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool fdf save resource $fdf_document string $filename	fdf ドキュメント を 保存 する
function fdf set ap $fdf_document	fdf _create 、 fdf _open あるい は fdf _open _string が 返す fdf ドキュメントハンドル
function fdf set ap $face	fdfnormalap 、 fdfrolloverap および fdfdownap のいずれ か が 使用 可能 です
function bool fdf set ap	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool fdf set ap resource $fdf_document string $field_name int $face string $filename int $page_number	フィールド の 外観 を 設定 する
function fdf set encoding $fdf_document	fdf _create 、 fdf _open あるい は fdf _open _string が 返す fdf ドキュメントハンドル
function fdf set encoding $encoding	エンコーディング 名
function bool fdf set encoding	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool fdf set encoding resource $fdf_document string $encoding	fdf 文字 エンコーディング を 設定 する
function fdf set file $url	絶対 url で 指定 する 必要 が あり ます
function fdf set file $fdf_document	fdf _create 、 fdf _open あるい は fdf _open _string が 返す fdf ドキュメントハンドル
function fdf set file $target_frame	この パラメータ を 使用 し て 、 ドキュメント を 表示 する フレーム を 指定 し ます
function bool fdf set file	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool fdf set file resource $fdf_document string $url string $target_frame	fdf データ を 表示 する pdf ドキュメント を 設定 する
function fdf set flags $fdf_document	fdf _create 、 fdf _open あるい は fdf _open _string が 返す fdf ドキュメントハンドル
function fdf set flags $fieldname	fdf フィールド 名 を 表す 文字列
function bool fdf set flags	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool fdf set flags resource $fdf_document string $fieldname int $whichFlags int $newFlags	フィールド の フラグ を 設定 する
function fdf set javascript action $fdf_document	fdf _create 、 fdf _open あるい は fdf _open _string が 返す fdf ドキュメントハンドル
function fdf set javascript action $fieldname	fdf フィールド 名 を 表す 文字列
function bool fdf set javascript action	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool fdf set javascript action resource $fdf_document string $fieldname int $trigger string $script	フィールド の javascript アクション を 設定 する
function fdf set opt $fdf_document	fdf _create 、 fdf _open あるい は fdf _open _string が 返す fdf ドキュメントハンドル
function fdf set opt $fieldname	fdf フィールド 名 を 表す 文字列
function bool fdf set opt	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool fdf set opt resource $fdf_document string $fieldname int $element string $str1 string $str2	フィールド の オプション を 設定 する
function fdf set status $fdf_document	fdf _create 、 fdf _open あるい は fdf _open _string が 返す fdf ドキュメントハンドル
function bool fdf set status	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool fdf set status resource $fdf_document string $status	/ status キー の 値 を 設定 する
function fdf set submit form action $fdf_document	fdf _create 、 fdf _open あるい は fdf _open _string が 返す fdf ドキュメントハンドル
function fdf set submit form action $fieldname	fdf フィールド 名 を 表す 文字列
function bool fdf set submit form action	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool fdf set submit form action resource $fdf_document string $fieldname int $trigger string $script int $flags	フィールド の 投稿 フォームアクション を 設定 する
function fdf set target frame $fdf_document	fdf _create 、 fdf _open あるい は fdf _open _string が 返す fdf ドキュメントハンドル
function fdf set target frame $frame_name	フレーム 名 を 表す 文字列
function bool fdf set target frame	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool fdf set target frame resource $fdf_document string $frame_name	フォーム の 表示 対象 と なる フレーム を 設定 する
function fdf set version $fdf_document	fdf _create 、 fdf _open あるい は fdf _open _string が 返す fdf ドキュメントハンドル
function fdf set version $version	バージョン を 表す 文字列
function bool fdf set version	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool fdf set version resource $fdf_document string $version	fdf ファイル の バージョン 番号 を 設定 する
function fgetss $allowable_tags	オプション の 3 番目 の 引数 を 使用 し て 、 取り除く 必要 が ない タグ を 指定 する こと が でき ます
function fgetss $handle	ファイルポインタ は 、 有効 な ファイルポインタ で ある 必要 が あり 、 fopen また は fsockopen で 正常 に オープン さ れ た （ そして まだ fclose で クローズ さ れ て い ない ） ファイル を 指し て いる 必要 が あり ます
function fgetss $length	取得 し たい データ の 長さ
function string fgetss	handle で 指定 し た ファイルポインタ から 最大 length - 1 バイト 読み出し 、 html や php コード を 取り除い た 文字列 を 返し ます
function string fgetss resource $handle int $length string $allowable_tags	ファイルポインタ から 1 行取り出し 、 html タグ を 取り除く
function file exists $filename	ファイル あるい は ディレクトリ へ の パス
function bool file exists	filename で 指定 し た ファイル また は ディレクトリ が 存在 すれ ば true を 返し 、 そう で なけれ ば false を 返し ます
function bool file exists string $filename	ファイル また は ディレクトリ が 存在 する かどう か 調べる
function file put contents $context	stream _context _create で 作成 し た コンテキストリソース
function file put contents $data	書き込む データ
function file put contents $filename	データ を 書き込む ファイル へ の パス
function file put contents $flags	flags の 値 は 、 以下 の フラグ を 組み合わ せ た もの と なり ます 組み合わせる 際 に は 、 論理 or | 演算子 で 連結 し ます
function int file put contents	この 関数 は ファイル に 書き込ま れ た バイト 数 を 返し ます
function int file put contents string $filename mixed $data int $flags resource $context	文字列 を ファイル に 書き込む
function filectime $filename	ファイル へ の パス
function int filectime	ファイル の 最終 更新 時刻 を 返し 、 失敗 し た 場合 に false を 返し ます
function int filectime string $filename	ファイル の inode 変更 時刻 を 取得 する
function filegroup $filename	ファイル へ の パス
function int filegroup	ファイル の 所有 者 の グループ id を 返し 、 エラー の 場合 は false を 返し ます
function int filegroup string $filename	ファイル の グループ を 取得 する
function fileowner $filename	ファイル へ の パス
function int fileowner	ファイル の 所有 者 の ユーザー id を 返し 、 失敗 し た 場合 に false を 返し ます
function int fileowner string $filename	ファイル の 所有 者 を 取得 する
function fileperms $filename	ファイル へ の パス
function int fileperms	ファイル の パーミッション を 数値 モード で 返し ます
function int fileperms string $filename	ファイル の パーミッション を 取得 する
function int filepro fieldcount	オープン し た filepro データベース の フィールド 数 、 あるい は エラー の 場合 に false を 返し ます
function int filepro fieldcount	filepro データベース 中 の フィールド 数 を 返す
function filepro fieldname $field_number	フィールド 番号
function string filepro fieldname	フィールド 名 を 表す 文字 列 、 あるい は エラー の 場合 に false を 返し ます
function string filepro fieldname int $field_number	フィールド 名 を 取得 する
function filepro fieldwidth $field_number	フィールド 番号
function int filepro fieldwidth	フィールド の 幅 を 表す 整数 値 、 あるい は エラー の 場合 に false を 返し ます
function int filepro fieldwidth int $field_number	フィールド 幅 を 取得 する
function filepro retrieve $row_number	行番号
function filepro retrieve $field_number	フィールド 番号
function string filepro retrieve	指定 し た データ 、 あるい は エラー の 場合 に false を 返し ます
function string filepro retrieve int $row_number int $field_number	filepro データベース から データ を 取得 する
function int filepro rowcount	オープン さ れ た filepro データベース に おける 行 の 数 を 返し ます
function int filepro rowcount	filepro データベース の 行 の 数 を 返し ます
function filepro $directory	map ディレクトリ
function bool filepro	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool filepro string $directory	map ファイル の 読み込み と 照合 を 行う
function filetype $filename	ファイル へ の パス
function string filetype	ファイル の タイプ を 返し ます
function string filetype string $filename	ファイルタイプ を 取得 する
function filter var array $definition	引数 を 定義 する 配列
function filter var array $add_empty	存在 し ない キー は null として 返り値 に 追加 し ます
function filter var array $data	文字列キー の 配列
function mixed filter var array	成功 し た 場合 は 要求 さ れ た 変数 の 値 を 含む 配列 、 あるい は 失敗 し た 場合 に false を 返し ます
function mixed filter var array array $data mixed $definition bool $add_empty	複数 の 変数 を 受け取り 、 オプション で それら を フィルタリング する
function finfo close $finfo	finfo _open が 返す fileinfo リソース
function bool finfo close	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool finfo close resource $finfo	fileinfo リソース を 閉じる
function void flush	システム 出力 バッファ を フラッシュ する
function fnmatch $string	調べ たい 文字列
function fnmatch $flags	flags の 値 は 、 以下 の フラグ を 論理 or |) 演算子 で 連結 し た 任意 の 組み合わせ です
function fnmatch $pattern	シェル の ワイルドカードパターン
function bool fnmatch	マッチ し た 場合 に true 、 それ 以外 の 場合 に false を 返し ます
function bool fnmatch string $pattern string $string int $flags	ファイル 名 が パターン に マッチ する か 調べる
function forward static call array $parameter	この ひとつ の パラメータ に 、 メソッド に 渡す すべ て の パラメータ を 配列 で 指定 し ます
function forward static call array $function	コール し たい 関数 あるい は メソッド
function mixed forward static call array	関数 の 結果 、 あるい は エラー 時 に false を 返し ます
function mixed forward static call array callable $function array $parameters	静的 メソッド を コール し 、 引数 を 配列 で 渡す
function forward static call $parameter	関数 に 渡し たい パラメータ
function forward static call $function	コール し たい 関数 あるい は メソッド
function mixed forward static call	関数 の 結果 、 あるい は エラー 時 に false を 返し ます
function mixed forward static call callable $function mixed $parameter	静的 メソッド を コール する
function fpassthru $handle	ファイルポインタ は 、 有効 な ファイルポインタ で ある 必要 が あり 、 fopen また は fsockopen で 正常 に オープン さ れ た （ そして まだ fclose で クローズ さ れ て い ない ） ファイル を 指し て いる 必要 が あり ます
function int fpassthru	エラー が 起こっ た 場合 、 fpassthru は false を 返し ます
function int fpassthru resource $handle	ファイルポインタ 上 に 残っ て いる すべ て の データ を 出力 する
function fprintf $handle	fopen を 使用 し て 作成 し た ファイルシステムポインタリソース
function fprintf $format	format について は 、 sprintf の ドキュメント で 説明 さ れ て い ます
function int fprintf	書き込ま れ た 文字 列 の 長さ を 返し ます
function int fprintf resource $handle string $format mixed $args	フォーマット さ れ た 文字列 を ストリーム に 書き込む
function fread $handle	fopen を 使用 し て 作成 し た ファイルシステムポインタリソース
function fread $length	最大 length バイト まで 読み込む
function string fread	読み込ん だ 文字列 を 返し ます
function string fread resource $handle int $length	バイナリセーフ な ファイル の 読み込み
function frenchtojd $day	日 を 表す 、 1 から 3 0 まで の 数字
function frenchtojd $year	年 を 表す 、 1 から 1 4 まで の 数字
function frenchtojd $month	月 を 表す 、 1 vendăšmiaire から 1 3 各年 の 最後 の 5 - 6 日 まで の 数字
function int frenchtojd	フランス 革命 暦 の 日付 を ユリウス 積算 日 に なおし た 結果 を 整数 値 で 返し ます
function int frenchtojd int $month int $day int $year	フランス 革命 暦 を ユリウス 積算 日 に 変換 する
function fribidi log2vis $direction	fribidi _rtl 、 fribidi _ltr あるい は fribidi _auto のいずれ か ひとつ
function fribidi log2vis $str	論理 表記 の 文字列
function fribidi log2vis $charset	fribidi _charset _xxx のいずれ か ひとつ
function string fribidi log2vis	成功 し た 場合 に 物理 表記 の 文字 列 、 失敗 し た 場合 に false を 返し ます
function string fribidi log2vis string $str string $direction int $charset	論理 表記 を 物理 表記 に 変換 する
function fseek $handle	fopen を 使用 し て 作成 し た ファイルシステムポインタリソース
function fseek $offset	オフセット
function fseek $whence	whence の 値 は 以下 の よう に なり ます
function int fseek	成功 する と 0 を 返し 、 そう で なけれ ば - 1 を 返し ます
function int fseek resource $handle int $offset int $whence	ファイルポインタ を 移動 する
function fsockopen $port	ポート 番号
function fsockopen $timeout	接続 タイムアウト 秒数
function fsockopen $errstr	エラーメッセージ を 表す 文字列
function fsockopen $errno	指定 し た 場合 は 、 システムコール connect で 発生 し た エラー の エラー 番号 が 格納 さ れ ます
function resource fsockopen	fsockopen は 、 ファイルポインタ を 返し ます
function resource fsockopen string $hostname int $port int $errno string $errstr float $timeout	インターネット 接続 もしく は unix ドメインソケット 接続 を オープン する
function fstat $handle	fopen を 使用 し て 作成 し た ファイルシステムポインタリソース
function array fstat	ファイル の 統計 情報 の 配列 を 返し ます
function array fstat resource $handle	オープン し た ファイルポインタ から ファイル に関する 情報 を 取得 する
function ftell $handle	ファイルポインタ は 有効 なもの で なけれ ば なら ず 、 また fopen 、 popen で 正常 に オープン さ れ た ファイル を 指し て いる 必要 が あり ます
function int ftell	handle が 示す ファイルポインタ の 位置 、 すなわち ファイル ・ ストリーム 上 の オフセット を 整数 値 で 返し ます
function int ftell resource $handle	ファイル の 読み 書き 用 ポインタ の 現在 位置 を 返す
function ftp alloc $result	もし 変数 が 指定 さ れ て い た 場合 、 サーバー から の 応答 テキスト の 内容 の 参照 が 格納 さ れ ます
function ftp alloc $filesize	確保 し たい バイト 数
function ftp alloc $ftp_stream	ftp 接続 の リンク id
function bool ftp alloc	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ftp alloc resource $ftp_stream int $filesize string $result	アップロード さ れる ファイル の ため の スペース を 確保 する
function ftp cdup $ftp_stream	ftp 接続 の リンク id
function bool ftp cdup	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ftp cdup resource $ftp_stream	親 ディレクトリ に 移動 する
function ftp chmod $mode	新しい パーミッション
function ftp chmod $filename	リモートファイル
function ftp chmod $ftp_stream	ftp 接続 の リンク id
function int ftp chmod	成功 し た 場合 に 新しい パーミッション を 、 エラー 時 に false を 返し ます
function int ftp chmod resource $ftp_stream int $mode string $filename	ftp 経由 で ファイル の パーミッション を 設定 する
function ftp connect $port	この パラメータ は 接続 先 の ポート を 指定 し ます
function ftp connect $timeout	この パラメータ は 、 以降 の ネットワーク 操作 時 の タイムアウト を 指定 し ます
function ftp connect $host	ftp サーバー の アドレス
function resource ftp connect	成功 し た 場合 に ftp ストリーム を 、 エラー 時 に false を 返し ます
function resource ftp connect string $host int $port int $timeout	ftp 接続 を オープン する
function ftp delete $path	削除 する ファイル
function ftp delete $ftp_stream	ftp 接続 の リンク id
function bool ftp delete	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ftp delete resource $ftp_stream string $path	ftp サーバー 上 の ファイル を 削除 する
function ftp exec $command	実行 し たい コマンド
function ftp exec $ftp_stream	ftp 接続 の リンク id
function bool ftp exec	コマンド が 成功 し た （ サーバー の 応答 コード が 2 0 0 ） 場合 に true を 、 それ 以外 の 場合 に false を 返し ます
function bool ftp exec resource $ftp_stream string $command	ftp サーバー 上 で の コマンド の 実行 を リクエスト する
function ftp fput $startpos	リモートファイル 内 で の 、 アップロード 開始 位置
function ftp fput $remote_file	リモートファイル の パス
function ftp fput $mode	転送 モード
function ftp fput $ftp_stream	ftp 接続 の リンク id
function ftp fput $handle	ローカル で オープン さ れ て いる ファイル の ポインタ
function bool ftp fput	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ftp fput resource $ftp_stream string $remote_file resource $handle int $mode int $startpos	オープン 中 の ファイル を ftp サーバー に アップロード する
function ftp get option $ftp_stream	ftp 接続 の リンク id
function ftp get option $option	現在 、 以下 の オプション が サポート さ れ て い ます : サポート さ れる 実行 時 ftp オプション ftp _timeout _sec ネットワーク 関連 処理 で 使用 さ れる カレント の タイムアウト を 返し ます
function mixed ftp get option	成功 し た 場合 は その 値 を 、 指定 し た option が サポート さ れ て い ない 場合 は false を 返し ます
function mixed ftp get option resource $ftp_stream int $option	カレント ftp ストリーム で の 種々 の 実行 時動 作 を 取得 する
function ftp get $local_file	ローカルファイル の パス （ ファイル がす でに 存在 する 場合 は 上書き さ れ ます ）
function ftp get $remote_file	リモートファイル の パス
function ftp get $mode	転送 モード
function ftp get $ftp_stream	ftp 接続 の リンク id
function ftp get $resumepos	リモートファイル の 、 ダウンロード を 開始 する 位置
function bool ftp get	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ftp get resource $ftp_stream string $local_file string $remote_file int $mode int $resumepos	ftp サーバー から ファイル を ダウンロード する
function ftp login $username	ユーザー 名 （ user ）
function ftp login $ftp_stream	ftp 接続 の リンク id
function ftp login $password	パスワード （ pass ）
function bool ftp login	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ftp login resource $ftp_stream string $username string $password	ftp 接続 に ログイン する
function ftp mkdir $ftp_stream	ftp 接続 の リンク id
function ftp mkdir $directory	作成 さ れる ディレクトリ の 名前
function string ftp mkdir	成功 し た 時 に は 新規 に 作成 し た ディレクトリ 名 、 エラー 時 に false を 返し ます
function string ftp mkdir resource $ftp_stream string $directory	ディレクトリ を 作成 する
function ftp nb continue $ftp_stream	ftp 接続 の リンク id
function int ftp nb continue	ftp _failed 、 ftp _finished あるい は ftp _moredata を 返し ます
function int ftp nb continue resource $ftp_stream	ファイル の 取得 / 送信 を 継続 する （ 非 ブロッキング ）
function ftp nb fget $resumepos	ダウンロード を 開始 する 、 リモートファイル 内 の 位置
function ftp nb fget $remote_file	リモートファイル の パス
function ftp nb fget $mode	転送 モード
function ftp nb fget $ftp_stream	ftp 接続 の リンク id
function ftp nb fget $handle	オープン さ れ て いる ファイル の ポインタ
function int ftp nb fget	ftp _failed 、 ftp _finished あるい は ftp _moredata を 返し ます
function int ftp nb fget resource $ftp_stream resource $handle string $remote_file int $mode int $resumepos	ftp サーバー から ファイル を ダウンロード し 、 オープン 中 の ファイル に 保存 する （ 非 ブロッキング ）
function ftp nb get $resumepos	ダウンロード を 開始 する 、 リモートファイル 内 の 位置
function ftp nb get $remote_file	リモートファイル の パス
function ftp nb get $local_file	ローカルファイル の パス （ ファイル がす でに 存在 する 場合 、 上書き さ れ ます ）
function ftp nb get $ftp_stream	ftp 接続 の リンク id
function ftp nb get $mode	転送 モード
function int ftp nb get	ftp _failed 、 ftp _finished あるい は ftp _moredata を 返し ます
function int ftp nb get resource $ftp_stream string $local_file string $remote_file int $mode int $resumepos	ftp サーバー から ファイル を 取得 し 、 ローカルファイル に 書き込む （ 非 ブロッキング ）
function ftp nb put $local_file	ローカルファイル の パス
function ftp nb put $startpos	リモートファイル 内 で の 、 アップロード 開始 位置
function ftp nb put $remote_file	リモートファイル の パス
function ftp nb put $mode	転送 モード
function ftp nb put $ftp_stream	ftp 接続 の リンク id
function int ftp nb put	ftp _failed 、 ftp _finished あるい は ftp _moredata を 返し ます
function int ftp nb put resource $ftp_stream string $remote_file string $local_file int $mode int $startpos	ftp サーバー に ファイル を 保存 する （ 非 ブロッキング ）
function ftp pasv $pasv	true の 場合 は パッシブモード を オン に 、 そう で ない 場合 は オフ に し ます
function ftp pasv $ftp_stream	ftp 接続 の リンク id
function bool ftp pasv	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ftp pasv resource $ftp_stream bool $pasv	パッシブモード を オン また は オフ に する
function ftp put $local_file	ローカルファイル の パス
function ftp put $startpos	リモートファイル 内 で の 、 アップロード 開始 位置
function ftp put $remote_file	リモートファイル の パス
function ftp put $mode	転送 モード
function ftp put $ftp_stream	ftp 接続 の リンク id
function bool ftp put	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ftp put resource $ftp_stream string $remote_file string $local_file int $mode int $startpos	ftp サーバー に ファイル を アップロード する
function ftp raw $command	実行 し たい コマンド
function ftp raw $ftp_stream	ftp 接続 の リンク id
function array ftp raw	サーバー から の 応答 を 文字 列 の 配列 で 返し ます
function array ftp raw resource $ftp_stream string $command	ftp サーバー に 任意 の コマンド を 送信 する
function ftp rawlist $recursive	true を 設定 し た 場合 、 発行 さ れる コマンド は list - r と なり ます
function ftp rawlist $directory	ディレクトリ の パス
function ftp rawlist $ftp_stream	ftp 接続 の リンク id
function mixed ftp rawlist	各 要素 が 1 行分 の テキスト に 対応 する 配列 を 返し ます
function mixed ftp rawlist resource $ftp_stream string $directory bool $recursive	指定 し た ディレクトリ の 詳細 な ファイル 一覧 を 返す
function ftp rename $oldname	現在 の ファイル / ディレクトリ の 名前
function ftp rename $ftp_stream	ftp 接続 の リンク id
function ftp rename $newname	新しい 名前
function bool ftp rename	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ftp rename resource $ftp_stream string $oldname string $newname	ftp サーバー 上 の ファイル また は ディレクトリ の 名前 を 変更 する
function ftp rmdir $directory	削除 する ディレクトリ
function ftp rmdir $ftp_stream	ftp 接続 の リンク id
function bool ftp rmdir	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ftp rmdir resource $ftp_stream string $directory	ディレクトリ を 削除 する
function ftp set option $option	現在 、 以下 の オプション が サポート さ れ て い ます : サポート さ れる 実行 時 ftp オプション ftp _timeout _sec 全 て の ネットワーク 関連 関数 に関し て 秒単 位 で タイムアウト を 変更 します
function ftp set option $ftp_stream	ftp 接続 の リンク id
function ftp set option $value	この パラメータ の 内容 は 、 どの option を 変更 しよ う とし て いる か によって 変わり ます
function bool ftp set option	オプション が 設定 でき た 場合 に true 、 そう で ない 場合 に false を 返し ます
function bool ftp set option resource $ftp_stream int $option mixed $value	さまざまな ftp 実行 時 オプション を 設定 する
function ftp site $command	site コマンド
function ftp site $ftp_stream	ftp 接続 の リンク id
function bool ftp site	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ftp site resource $ftp_stream string $command	site コマンド を サーバー に 送信 する
function ftp size $remote_file	リモートファイル
function ftp size $ftp_stream	ftp 接続 の リンク id
function int ftp size	成功 し た 場合 は ファイル の サイズ を 、 エラー 時 に は - 1 を 返し ます
function int ftp size resource $ftp_stream string $remote_file	指定 し た ファイル の サイズ を 返す
function ftp systype $ftp_stream	ftp 接続 の リンク id
function string ftp systype	リモートシステム 型 を 返し ます
function string ftp systype resource $ftp_stream	リモート ftp サーバー の システム 型 id を 返す
function ftruncate $handle	ファイルポインタ
function ftruncate $size	丸める 大きさ
function bool ftruncate	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ftruncate resource $handle int $size	ファイル を 指定 し た 長さ に 丸める
function func get arg $arg_num	引数 の 位置
function mixed func get arg	指定 し た 引数 、 あるい は エラー 時 に false を 返し ます
function mixed func get arg int $arg_num	引数 の リスト から 要素 を ひとつ返す
function array func get args	配列 を 返し ます
function array func get args	関数 の 引数 リスト を 配列 として 返す
function function exists $function_name	関数 名 を 表す 文字列
function bool function exists	function _name が 存在 し 、 関数 で ある 場合 に true 、 それ 以外 の 場合 に false を 返し ます
function bool function exists string $function_name	指定 し た 関数 が 定義 さ れ て いる 場合 に true を 返す
function int gc collect cycles	収集 し た サイクル の 数 を 返し ます
function int gc collect cycles	すべて の 既存 ガベージサイクル を 強制 的 に 収集 する
function void gc disable	循環 参照 コレクタ を 無効 に する
function geoip country code by name $hostname	場所 を 探す 対象 と なる ホスト 名 あるい は ip アドレス
function string geoip country code by name	成功 し た 場合 に は 二文字 の iso 国 コード 、 アドレス が データベース で 見つ から ない 場合 に は false を 返し ます
function string geoip country code by name string $hostname	二文字 の 国 コード を 取得 する
function geoip country name by name $hostname	場所 を 探す 対象 と なる ホスト 名 あるい は ip アドレス
function string geoip country name by name	成功 し た 場合 に は 国名 、 アドレス が データベース で 見つ から ない 場合 に は false を 返し ます
function string geoip country name by name string $hostname	完全 な 国名 を 取得 する
function geoip database info $database	データベース の 型 を 整数 値 で 指定 し ます
function string geoip database info	対応 する データベース の バージョン 、 あるい は エラー 時 に null を 返し ます
function string geoip database info int $database	geoip データベース の 情報 を 取得 する
function geoip db avail $database	データベース の 形式 を 表す 整数 値
function bool geoip db avail	データベース が 存在 する 場合 に true 、 存在 し ない 場合 に false 、 エラー 時 に null を 返し ます
function bool geoip db avail int $database	geoip データベース が 使用 可能 か どう か を 調べる
function geoip db filename $database	データベース の 形式 を 表す 整数 値
function string geoip db filename	対応 する データベース の ファイル 名 、 あるい は エラー 時 に null を 返し ます
function string geoip db filename int $database	対応 する geoip データベース の ファイル 名 を 返す
function array geoip db get all info	連想 配列 を 返し ます
function array geoip db get all info	すべて の geoip データベース 形式 について の 詳細 情報 を 返す
function geoip isp by name $hostname	ホスト 名 あるい は ip アドレス
function string geoip isp by name	成功 し た 場合 に は isp 名 、 アドレス が データベース で 見つ から ない 場合 に は false を 返し ます
function string geoip isp by name string $hostname	インターネットサービスプロバイダ isp 名 を 取得 する
function geoip region by name $hostname	地域 を 探す 対象 と なる ホスト 名 あるい は ip アドレス
function array geoip region by name	成功 し た 場合 に は 連想 配列 、 アドレス が データベース で 見つ から ない 場合 に は false を 返し ます
function array geoip region by name string $hostname	国 コード および 地域 を 取得 する
function geoip region name by code $country_code	二文字 の 国 コード geoip _country _code _by _name を 参照く ださい
function geoip region name by code $region_code	二文字 あるい は 二桁 の 地域 コード geoip _region _by _name を 参照く ださい
function string geoip region name by code	成功 し た 場合 は 地域 名 、 国 コード と 地域 コード の 組 に 対応 する 地域 が 見つ から なかっ た 場合 は false を 返し ます
function string geoip region name by code string $country_code string $region_code	国 コード と 地域 コード から 地域 名 を 返す
function get cfg var $option	設定 オプション の 名前
function string get cfg var	option で 指定 さ れ た php 設定 オプション の 現在 の 値 を 返し 、 エラー の 場合 は false を 返し ます
function string get cfg var string $option	php 設定 オプション の 値 を 取得 する
function get class $object	調べる オブジェクト
function string get class	オブジェクト object が インスタンス で ある クラス の 名前 を 返し ます
function string get class object $object	オブジェクト の クラス 名 を 返す
function get defined constants $categorize	これ を 渡す と 、 この 関数 は 多次 元 の 配列 を 返す よう に なり ます
function array get defined constants	定数 名 = & gt ; 定数 値 の 配列 の 配列 を 返し ます
function array get defined constants bool $categorize	すべて の 定数 の 名前 と その 値 を 連想 配列 として 返す
function array get defined functions	この 関数 は 、 組込 内部 関数 および ユーザー 定義 関数 を 共に 含む 定義 済み の 全て の 関数 の リスト を 有する 多次 元 配列 を 返し ます
function array get defined functions	定義済み の 全て の 関数 を 配列 で 返す
function get extension funcs $module_name	モジュール 名
function array get extension funcs	すべて の 関数 を 含む 配列 を 返し ます
function array get extension funcs string $module_name	ある モジュール の 関数 名 を 配列 として 返す
function get headers $format	オプション の format パラメータ が ゼロ 以外 に セット さ れ た 場合 、 get _headers は レスポンス を パース し 、 配列 の キー を セット し ます
function get headers $url	対象 と なる url
function array get headers	数 値添 字配 列 あるい は 連想 配列 で ヘッダ を 返し ます
function array get headers string $url int $format	http リクエスト に対する レスポンス 内 で サーバー によっ て 送出 さ れ た 全て の ヘッダ を 取得 する
function get html translation table $encoding	使用 する エンコーディング
function get html translation table $table	どちら の テーブル を 返す か
function get html translation table $flags	以下 の フラグ の ビットマスク による 組み合わせ で 、 どの クォート を テーブル に 含める の か 、 そし て ど の ドキュメント 形式 用 の テーブル に する のか を 指定 し ます
function array get html translation table	変換 テーブル を 配列 で 返し ます
function array get html translation table int $table int $flags string $encoding	htmlspecialchars および htmlentities で 使用 さ れる 変換 テーブル を 返す
function array get included files	すべて の ファイル 名 を 含む 配列 を 返し ます
function array get included files	include また は require で 読み込ま れ た ファイル の 名前 を 配列 として 返す
function get loaded extensions $zend_extensions	zend 拡張 モジュール のみ を 返し ます
function array get loaded extensions	モジュール 名 の 配列 を 返し ます
function array get loaded extensions bool $zend_extensions	コンパイル / ロード さ れ て いる 全て の モジュール の 名前 を 配列 として 返す
function bool get magic quotes gpc	magic _quotes _gpc が オフ の 場合 に 0 、 そう で ない 場合 に 1 を 返し ます
function bool get magic quotes gpc	magic _quotes _gpc の 現在 の 設定 を 得る
function get meta tags $filename	html ファイル へ の パス を 表す 文字列
function get meta tags $use_include_path	use _include _path を true に 指定 する と 、 include _path ディレクティブ の 内容 に し た がっ て ファイル を 探し ます
function array get meta tags	パース さ れ た メタタグ を 含む 配列 を 返し ます
function array get meta tags string $filename bool $use_include_path	ファイル 上 の すべ て の メタタグ 情報 を 配列 に 展開 する
function get object vars $object	オブジェクト の インスタンス
function array get object vars	指定 し た オブジェクト object について 、 その スコープ 内 で アクセス 可能 な 非 static プロパティ を 連想 配列 として 返し ます
function array get object vars object $object	指定 し た オブジェクト の プロパティ を 取得 する
function get parent class $object	調べ たい オブジェクト あるい は クラス の 名前
function string get parent class	object が インスタンス あるい は 名前 で ある クラス の 親 クラス 名 を 返し ます
function string get parent class mixed $object	オブジェクト の 親 クラス の 名前 を 取得 する
function get resource type $handle	評価 さ れる リソースハンドル
function string get resource type	指定 さ れ た handle が リソース で あっ た 場合 、 この 関数 は その 型 を 表す 文字 列 を 返し ます
function string get resource type resource $handle	リソース 型 を 返す
function array getallheaders	全て の http リクエストヘッダ の 連想 配列 、 もしく は 失敗 時 に false を 返し ます
function array getallheaders	全て の http リクエストヘッダ を 取得 する
function getdate $timestamp	オプション の パラメータ timestamp は 、 integer 型 の unix タイムスタンプ です
function array getdate	timestamp に 関連 する 情報 を 連想 配列 で 返し ます
function array getdate int $timestamp	日付 / 時刻 情報 を 取得 する
function getenv $varname	変数 の 名前
function string getenv	varname が 示す 環境 変数 の 値 を 返し 、 環境 変数 varname が 存在 し ない 場合 は false を 返し ます
function string getenv string $varname	環境 変数 の 値 を 取得 する
function gethostbyaddr $ip_address	ホスト の ip アドレス
function string gethostbyaddr	成功 し た 場合 は ホスト 名 を 返し ます
function string gethostbyaddr string $ip_address	指定 し た ip アドレス に 対応 する インターネットホスト 名 を 取得 する
function gethostbyname $hostname	ホスト 名
function string gethostbyname	ipv 4 アドレス を 返し ます
function string gethostbyname string $hostname	インターネットホスト 名 に 対応 する ipv 4 アドレス を 取得 する
function gethostbynamel $hostname	ホスト 名
function array gethostbynamel	ipv 4 アドレス の 配列 を 返し ます
function array gethostbynamel string $hostname	指定 し た インターネットホスト 名 に 対応 する ipv 4 アドレス の リスト を 取得 する
function string gethostname	成功時 に は ホスト 名 を 示す 文字列
function string gethostname	ホスト 名 を 取得 する
function getimagesize $filename	この パラメータ は 、 情報 を 取得 し たい ファイル の 名前 を 指定 し ます
function getimagesize $imageinfo	オプション の パラメータ で 、 画像 ファイル から 何ら か の 拡張 情報 を 引き出す こと が 可能 です
function array getimagesize	最大 7 つの 要素 から なる 配列 を 返し ます
function array getimagesize string $filename array $imageinfo	画像 の 大きさ を 取得 する
function getimagesizefromstring $imageinfo	getimagesize を 参照く ださい
function getimagesizefromstring $imagedata	文字列 で 表し た 画像 データ
function array getimagesizefromstring	getimagesize を 参照く ださい
function array getimagesizefromstring string $imagedata array $imageinfo	画像 の 大きさ を 文字 列 から 取得 する
function int getlastmod	現在 の ページ の 最終 更新 時刻 を 返し ます
function int getlastmod	最終更 新 時刻 を 取得 する
function getmxrr $mxhosts	見つかっ た mx レコード の リスト が 、 配列 mxhosts に 格納 さ れ ます
function getmxrr $weight	配列 weight を 指定 する と 、 そこに 重み 情報 が 格納 さ れ ます
function getmxrr $hostname	インターネットホスト 名
function bool getmxrr	何 か レコード が 見つかっ た 場合 に true 、 何 も 見つ から ない か エラー が 発生 し た 場合 に false を 返し ます
function bool getmxrr string $hostname array $mxhosts array $weight	指定 し た インターネットホスト 名 に 対応 する mx レコード を 取得 する
function int getmypid	現在 の php の プロセス id を 返し 、 エラー の 場合 は false を 返し ます
function int getmypid	php の プロセス id を 取得 する
function getprotobynumber $number	プロトコル 番号
function string getprotobynumber	プロトコル 名 を 文字列 で 返し ます
function string getprotobynumber int $number	プロトコル 番号 が 指す プロトコル 名 を 取得 する
function gettimeofday $return_float	true を 指定 する と 、 配列 で は なく float で 返し ます
function mixed gettimeofday	デフォルト で は 配列 を 返し ます
function mixed gettimeofday bool $return_float	現在 の 時間 を 得る
function gettype $var	型 を 調べ たい 変数
function string gettype	返さ れ た 文字 列 は 、 以下 のい ずれ か の 値 を 持ち ます
function string gettype mixed $var	変数 の 型 を 取得 する
function glob $flags	有効 な フラグ は 次 の とおり です
function glob $pattern	パターン
function array glob	マッチ する ファイル ／ ディレクトリ を 含む 配列 を 返し ます
function array glob string $pattern int $flags	パターン に マッチ する パス 名 を 探す
function gmp and $b	php 5
function gmp and $a	php 5
function GMP gmp and	ビット and 演算 の 結果 を gmp 数 で 返し ます
function GMP gmp and GMP $a GMP $b	ビット and を 計算 する
function gmp div qr $d	n を 割る 数
function gmp div qr $round	引数 round の 説明 について は 、 gmp _div _q 関数 を 参照く ださい
function gmp div qr $n	割られる 数
function array gmp div qr	配列 を 返し ます
function array gmp div qr GMP $n GMP $d int $round	除算 を 行い 、 商 と 余り を 得る
function gmp divexact $n	割られる 数
function gmp divexact $d	a を 割る 数
function GMP gmp divexact	php 5
function GMP gmp divexact GMP $n GMP $d	正確 な 除算
function gmp fact $a	階乗 を 求める 数
function GMP gmp fact	php 5
function GMP gmp fact mixed $a	階乗
function gmp gcdext $b	php 5
function gmp gcdext $a	php 5
function array gmp gcdext	gmp 数 の 配列 を 返し ます
function array gmp gcdext GMP $a GMP $b	最大 公約 数 と 乗数 を 計算 する
function gmp init $number	整数 値 あるい は 文字列
function gmp init $base	基数
function GMP gmp init	php 5
function GMP gmp init mixed $number int $base	gmp 数 を 作成 する
function gmp intval $gmpnumber	php 5
function int gmp intval	gmpnumber を 整数 に 変換 し た 結果 を 返し ます
function int gmp intval GMP $gmpnumber	gmp 数 を 整数 に 変換 する
function gmp invert $b	php 5
function gmp invert $a	php 5
function GMP gmp invert	成功 し た 場合 に gmp 数 、 逆 が 存在 し ない 場合 に false を 返し ます
function GMP gmp invert GMP $a GMP $b	法 による 逆
function gmp jacobi $p	php 5
function gmp jacobi $a	php 5
function int gmp jacobi	php 5
function int gmp jacobi GMP $a GMP $p	ヤコビ 記号
function gmp legendre $p	php 5
function gmp legendre $a	php 5
function int gmp legendre	php 5
function int gmp legendre GMP $a GMP $p	ルジェンドル 記号
function gmp mod $n	php 5
function gmp mod $d	法 として 使用 する 値
function GMP gmp mod	php 5
function GMP gmp mod GMP $n GMP $d	モジュロ 演算
function gmp mul $a	b を 掛け られる 数
function gmp mul $b	a に 掛ける 数
function GMP gmp mul	php 5
function GMP gmp mul GMP $a GMP $b	数値 を 乗算 する
function gmp neg $a	php 5
function GMP gmp neg	- a を gmp 数 で 返し ます
function GMP gmp neg GMP $a	符号 を 反転 する
function gmp nextprime $a	php 5
function GMP gmp nextprime	a より 大きい 次 の 素数 を gmp 数 として 返し ます
function GMP gmp nextprime int $a	次 の 素数 を 見つける
function gmp perfect square $a	平方数 か どう か を 調べ たい 数
function bool gmp perfect square	a が 平方数 の 場合 に true 、 その 他 の 場合 に false を 返し ます
function bool gmp perfect square GMP $a	平方数 か どう か を 調べる
function gmp popcount $a	php 5
function int gmp popcount	a に セット さ れ て いる ビット の 数 を 返し ます
function int gmp popcount GMP $a	セット さ れ て いる ビット の 数
function gmp pow $base	も とと なる 数
function gmp pow $exp	正 の 数 で 、 base を 何乗 する か を 指定 し ます
function GMP gmp pow	べき 乗 の 結果 を gmp 数 で 返し ます
function GMP gmp pow GMP $base int $exp	べき 乗 を 計算 する
function gmp powm $base	も とと なる 数
function gmp powm $exp	正 の 数 で 、 base を 何乗 する か を 指定 し ます
function gmp powm $mod	モジュロ
function GMP gmp powm	結果 を gmp 数 で 返し ます
function GMP gmp powm GMP $base GMP $exp GMP $mod	べき 乗 と モジュロ を 計算 する
function gmp prob prime $a	素数 か どう か を 調べ たい 数
function gmp prob prime $reps	reps の 合理 的 な 値 は 5 から 1 0 くらい まで 変動 し ます デフォルト は 1 0 です
function int gmp prob prime	この 関数 が 0 を 返す 場合 、 a は 確実 に 素数 で は あり ませ ん
function int gmp prob prime GMP $a int $reps	数 が &quot ; おそらく 素数 &quot ; で ある かど う か を 調べる
function gmp scan0 $a	スキャン する 数
function gmp scan0 $start	開始 する ビット
function int gmp scan0	ビット が 見つかっ た 場所 の インデックス を 整数 値 で 返し ます
function int gmp scan0 GMP $a int $start	0 を 探す
function gmp scan1 $a	スキャン する 数
function gmp scan1 $start	開始 する ビット
function int gmp scan1	ビット が 見つかっ た 場所 の インデックス を 整数 値 で 返し ます
function int gmp scan1 GMP $a int $start	1 を 探す
function gmp sign $a	php 5
function int gmp sign	a が 正 の 場合 に 1 、 a が 負 の 場合 に - 1 、 そして a が ゼロ の 場合 に 0 を 返し ます
function int gmp sign GMP $a	数 の 符号
function gmp sqrt $a	php 5
function GMP gmp sqrt	平方根 の 整数 部分 を gmp 数 で 返し ます
function GMP gmp sqrt GMP $a	平方根 を 計算 する
function gmp sqrtrem $a	平方根 を 計算 し たい 数
function array gmp sqrtrem	最初 の 要素 が a の 整数 平方根 gmp _sqrt も 参照く ださい 、 2 番目 の 要素 が 余り すなわち 、 a と 最初 の 要素 の 2 乗 の 差 で ある よう な 配列 を 返し ます
function array gmp sqrtrem GMP $a	余りつき の 平方根
function gmp strval $gmpnumber	文字列 の 変換 し たい gmp 数
function gmp strval $base	返り値 の 基数
function string gmp strval	数 を 文字列 で 表し た もの を 返し ます
function string gmp strval GMP $gmpnumber int $base	gmp 数 を 文字列 に 変換 する
function gmp sub $b	a から 引く 数
function gmp sub $a	引か れる 数
function GMP gmp sub	php 5
function GMP gmp sub GMP $a GMP $b	数値 の 減算
function gnupg decryptverify $plaintext	plaintext に は 復号 し た テキスト が 格納 さ れ ます
function gnupg decryptverify $text	復号 し たい テキスト
function gnupg decryptverify $identifier	gnupg _init あるい は gnupg の コール で 得 られ た gnupg id
function array gnupg decryptverify	成功 し た 場合 、 この 関数 は 署名 の 情報 を 返し 、 復号 さ れ た テキスト を plaintext に 保存 し ます
function array gnupg decryptverify resource $identifier string $text string $plaintext	指定 さ れ た テキスト を 復号 し 、 検証 する
function gnupg encrypt $plaintext	暗号化 し たい テキスト
function gnupg encrypt $identifier	gnupg _init あるい は gnupg の コール で 得 られ た gnupg id
function string gnupg encrypt	成功 し た 場合 、 この 関数 は 暗号 化 さ れ た テキスト を 返し ます
function string gnupg encrypt resource $identifier string $plaintext	指定 し た テキスト を 暗号 化 する
function gnupg export $fingerprint	フィンガープリントキー
function gnupg export $identifier	gnupg _init あるい は gnupg の コール で 得 られ た gnupg id
function string gnupg export	成功 し た 場合 、 この 関数 は キー の データ を 返し ます
function string gnupg export resource $identifier string $fingerprint	キー を エクスポート する
function gnupg import $keydata	インポート し たい キー の データ
function gnupg import $identifier	gnupg _init あるい は gnupg の コール で 得 られ た gnupg id
function array gnupg import	成功 し た 場合 、 この 関数 は インポート 処理 の 情報 を 配列 で 返し ます
function array gnupg import resource $identifier string $keydata	キー を インポート する
function gnupg setarmor $armor	ゼロ 以外 の 整数 値 を この 関数 に 渡す と 、 armor 形式 の 出力 を 有効 に し ます デフォルト
function gnupg setarmor $identifier	gnupg _init あるい は gnupg の コール で 得 られ た gnupg id
function bool gnupg setarmor	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool gnupg setarmor resource $identifier int $armor	armor 形式 を 切り 替える
function gnupg seterrormode $errormode	エラー 形式
function gnupg seterrormode $identifier	gnupg _init あるい は gnupg の コール で 得 られ た gnupg id
function void gnupg seterrormode resource $identifier int $errormode	エラー 報告 モード を 設定 する
function gnupg setsignmode $identifier	gnupg _init あるい は gnupg の コール で 得 られ た gnupg id
function gnupg setsignmode $sigmode	署名 の 形式
function bool gnupg setsignmode	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool gnupg setsignmode resource $identifier int $signmode	署名 方式 を 設定 する
function gnupg verify $plaintext	平文 テキスト
function gnupg verify $signature	署名
function gnupg verify $signed_text	the signed text
function gnupg verify $identifier	gnupg _init あるい は gnupg の コール で 得 られ た gnupg id
function array gnupg verify	成功 し た 場合 、 この 関数 は 署名 について の 情報 を 返し ます
function array gnupg verify resource $identifier string $signed_text string $signature string $plaintext	署名済 み テキスト を 検証 する
function grapheme extract $size	返す 項目 $ extract _type に 基づく の 最大 数
function grapheme extract $haystack	検索 する 文字列
function grapheme extract $start	$haystack 内 で の 開始 位置 を バイト 数 で 指定 し ます
function grapheme extract $next	次 の 開始 位置 へ の 参照 が 設定 さ れ ます
function grapheme extract $extract_type	$size パラメータ の 単位 の 形式 を 指定 し ます
function string grapheme extract	オフセット $ start から 始まり 、 指定 し た $ size と $ extract _type を 満た す 、 デフォルト の 書記 素 クラスタバウンダリ で 終わる 文字 列 を 返し ます
function string grapheme extract string $haystack int $size int $extract_type int $start int $next	デフォルト の 書記 素 クラスタシーケンス を テキストバッファ から 取り出す 関数
function grapheme stripos $haystack	探す 対象 と なる 文字列
function grapheme stripos $needle	探し たい 文字列
function grapheme stripos $offset	オプション の $ offset パラメータ で 、$ haystack のど の 位置 バイト 数 や 文字数 で は なく 、 書記 素単 位 から 探し 始める のか を 指定 し ます
function int grapheme stripos	位置 を 表す 整数 値 を 返し ます
function int grapheme stripos string $haystack string $needle int $offset	大文字 小文字 を 区別 せ ず 、 文字 列内 で 最初 に あらわ れる 場所 の 書記 素単 位 の 位置 を 見つける
function grapheme strpos $haystack	探す 対象 と なる 文字列
function grapheme strpos $needle	探し たい 文字列
function grapheme strpos $offset	オプション の $ offset パラメータ で 、$ haystack のど の 位置 バイト 数 や 文字数 で は なく 、 書記 素単 位 から 探し 始める のか を 指定 し ます
function int grapheme strpos	位置 を 表す 整数 値 を 返し ます
function int grapheme strpos string $haystack string $needle int $offset	文字 列内 で 最初 に あらわ れる 場所 の 書記 素単 位 の 位置 を 見つける
function grapheme strripos $haystack	探す 対象 と なる 文字列
function grapheme strripos $needle	探し たい 文字列
function grapheme strripos $offset	オプション の $ offset パラメータ で 、$ haystack のど の 位置 バイト 数 や 文字数 で は なく 、 書記 素単 位 から 探し 始める のか を 指定 し ます
function int grapheme strripos	位置 を 表す 整数 値 を 返し ます
function int grapheme strripos string $haystack string $needle int $offset	大文字 小文字 を 区別 せ ず 、 文字 列内 で 最後 に あらわ れる 場所 の 書記 素単 位 の 位置 を 見つける
function grapheme strrpos $haystack	探す 対象 と なる 文字列
function grapheme strrpos $needle	探し たい 文字列
function grapheme strrpos $offset	オプション の $ offset パラメータ で 、$ haystack のど の 位置 バイト 数 や 文字数 で は なく 、 書記 素単 位 から 探し 始める のか を 指定 し ます
function int grapheme strrpos	位置 を 表す 整数 値 を 返し ます
function int grapheme strrpos string $haystack string $needle int $offset	文字 列内 で 最後 に あらわ れる 場所 の 書記 素単 位 の 位置 を 見つける
function grapheme strstr $haystack	入力 文字列
function grapheme strstr $needle	探し たい 文字列
function grapheme strstr $before_needle	true の 場合 、 grapheme _strstr は needle が 最初 に 登場 し た 場所 より 前 の 部分 文字 列 を 返し ます needle は 含め ませ ん
function string grapheme strstr	部分 文字 列 、 あるい は needle が 見つ から なかっ た 場合 に false を 返し ます
function string grapheme strstr string $haystack string $needle bool $before_needle	haystack 文字列 の 中 で 、 needle が 最初 に 登場 し た 場所 以降 の 部分 文字 列 を 返す
function grapheme substr $string	入力 文字列
function grapheme substr $start	デフォルト の 書記 素単 位 で の 開始 位置
function grapheme substr $length	長さ を 書記 素単 位 で 指定 し ます
function int grapheme substr	$string の 部分 文字 列 を 返し ます
function int grapheme substr string $string int $start int $length	部分 文字 列 を 返す
function gregoriantojd $year	年 を 表す 、- 4 7 1 4 から 9 9 9 9 まで の 数字
function gregoriantojd $day	日 を 表す 、 1 から 3 1 まで の 数字
function gregoriantojd $month	月 を 表す 、 1 january から 1 2 december まで の 数字
function int gregoriantojd	指定 し た グレゴリウス 日 を ユリウス 積算 日 に なおし た 結果 を 返し ます
function int gregoriantojd int $month int $day int $year	グレゴリウス 日 を ユリウス 積算 日 に 変換 する
function gzdecode $length	デコード する データ の 最大 長
function gzdecode $data	デコード する データ
function string gzdecode	デコード さ れ た 文字列 、 あるい は エラー が 発生 し た 場合 に false を 返し ます
function string gzdecode string $data int $length	gzip 圧縮 さ れ た 文字列 を デコード する
function gzdeflate $data	収縮 さ せる データ
function gzdeflate $encoding	定数 zlib _encoding _* のいずれ か
function gzdeflate $level	圧縮 レベル
function string gzdeflate	収縮 さ れ た 文字 列 、 もしく は エラー の 場合 false
function string gzdeflate string $data int $level int $encoding	文字列 を deflate 圧縮 する
function gzencode $level	圧縮 レベル を 指定 し ます
function gzencode $data	エンコード する データ を 指定 し ます
function gzencode $encoding_mode	エンコーディングモード を 指定 し ます
function string gzencode	エンコード さ れ た 文字 列 、 もしく は エラー 発生 時 に false
function string gzencode string $data int $level int $encoding_mode	gzip 圧縮 さ れ た 文字列 を 作成 する
function gzeof $zp	gz ファイルポインタ は 、 有効 な ファイルポインタ で あり 、 かつ 、 gzopen により オープン でき た ファイル を 指し て いる 必要 が あり ます
function int gzeof	gz ファイルポインタ が eof を 指す 、 もしく は エラー が 発生 し た 場合 true 、 そう で なけれ ば false を 返し ます
function int gzeof resource $zp	gz ファイルポインタ が eof かどう か 調べる
function gzfile $filename	ファイル 名 を 指定 し ます
function gzfile $use_include_path	もし include _path に ある ファイル も 検索 し たい 場合 、 この オプションパラメータ に 1 を 設定 する こと が でき ます
function array gzfile	ファイル を 含む 配列 で 、 要素毎 に 1 行ずつ 含ん で い ます
function array gzfile string $filename int $use_include_path	gz ファイル 全体 を 配列 に 読み込む
function gzgetc $zp	gz ファイルポインタ を 指定 し ます
function string gzgetc	非 圧縮 の 文字列 、 もしく は eof gzeof とは 異 なる の 場合 に false を 返し ます
function string gzgetc resource $zp	gz ファイル へ の ポインタ から 文字 を 得る
function gzgets $length	取得 する データ 長 を 指定 し ます
function gzgets $zp	gz ファイルポインタ を 指定 し ます
function string gzgets	非 圧縮 の 文字列 、 もしく は エラー 時 に false
function string gzgets resource $zp int $length	ファイルポインタ から 1 行 を 得る
function gzinflate $length	デコード する 最大 データ 長 を 指定 し ます
function gzinflate $data	gzdeflate により 圧縮 さ れ た データ を 指定 し ます
function string gzinflate	オリジナル の 無圧 縮 な データ 、 もしく は エラー 時 に false
function string gzinflate string $data int $length	deflate 圧縮 さ れ た 文字列 を 解凍 する
function gzopen $filename	ファイル 名 を 指定 し ます
function gzopen $use_include_path	この オプションパラメータ を 1 に する こと により 、 include _path に ある ファイル も 検索 する こと が でき ます
function resource gzopen	オープン し た ファイル へ の ファイルポインタ を 返し ます
function resource gzopen string $filename string $mode int $use_include_path	gz ファイル を 開く
function gzpassthru $zp	gz ファイルポインタ を 指定 し ます
function int gzpassthru	gz から 読み込ん で 解凍 さ れ 、 入力 に 渡さ れ た 文字数
function int gzpassthru resource $zp	gz ファイル へ の ポインタ から 残り の データ 全部 を 出力 する
function gzread $length	読み込む バイト 数 を 指定 し ます
function gzread $zp	gz ファイルポインタ を 指定 し ます
function string gzread	読み込ま れ た データ
function string gzread resource $zp int $length	バイナリ 対応 の gz ファイル 読み込み
function gzrewind $zp	gz ファイルポインタ を 指定 し ます
function bool gzrewind	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool gzrewind resource $zp	gz ファイルポインタ の 示す 位置 を 元 に 戻す
function gzwrite $string	書き込む 文字 列 を 指定 し ます
function gzwrite $length	書き込む 解凍 さ れ た バイト 数 を 指定 し ます
function gzwrite $zp	gz ファイルポインタ を 指定 し ます
function int gzwrite	与え られ た gz ファイルストリーム に 書き込ま れ た 解凍 さ れ た バイト 数 を 返し ます
function int gzwrite resource $zp string $string int $length	バイナリセーフ な gz ファイル 書き込み
function void halt compiler	コンパイラ の 実行 を 中止 する
function header register callback $callback	ヘッダ を 送信 する 前 に コール する 関数
function bool header register callback	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool header register callback callable $callback	ヘッダ 用 の 関数 を 登録 する
function headers sent $line	出力 を 開始 し た 行番 号
function headers sent $file	オプション 引数 の file と line が セット さ れ て いる 場合 、 php の ソースファイル 名 と 出力 が 開始 さ れ た 行番 号 が 、 それぞれ file と line に 格納 さ れ ます
function bool headers sent	headers _sent は 、 http ヘッダ が まだ 送信 さ れ て い ない 場合 に false 、 そう で ない で ない 場合 に true を 返し ます
function bool headers sent string $file int $line	ヘッダ が 既 に 送信 さ れ て いる かど う か を 調べる
function hebrev $max_chars_per_line	この オプション の パラメータ は 、 出力 さ れる 行毎 の 最大 文字 数 を 返し ます
function hebrev $hebrew_text	ヘブライ 語 の 入力 文字列
function string hebrev	物理 表記 の 文字列 を 返し ます
function string hebrev string $hebrew_text int $max_chars_per_line	論理 表記 の ヘブライ 語 を 物理 表記 に 変換 する
function hexdec $hex_string	変換 し たい 1 6 進文 字列
function number hexdec	hex _string を 1 0 進 で 表し た 値 を 返し ます
function number hexdec string $hex_string	1 6 進数 を 1 0 進数 に 変換 する
function highlight file $return	この パラメータ を true に する と 、 この 関数 は ハイライト さ れ た コード を 返し ます
function highlight file $filename	ハイライト 表示 する php ファイル へ の パス
function mixed highlight file	return が true の 場合 は 、 ハイライト さ れ た コード を 文字 列 として 返し 、 表示 し ませ ん
function mixed highlight file string $filename bool $return	ファイル の 構文 ハイライト 表示
function html entity decode $encoding	オプション の 引数
function html entity decode $string	入力 文字列
function html entity decode $flags	以下 の フラグ の ビットマスク による 組み合わせ で 、 クォート の 扱い や ドキュメント の 形式 を 指定 し ます
function string html entity decode	デコード さ れ た 文字列 を 返し ます
function string html entity decode string $string int $flags string $encoding	html エンティティ を 適切 な 文字 に 変換 する
function http build query $arg_separator	arg _separator
function http build query $numeric_prefix	もし 数値 インデックス が 基底 と なる 配列 に 使用 さ れ たり numeric _prefix が 指定 さ れ た 場合 、 基底 と なる 配列 の 要素 に対する 数値 インデックス の 前 に これ が 追加 さ れ ます
function http build query $query_data	プロパティ を 含む 配列 もしく は オブジェクト
function http build query $enc_type	デフォルト は php _query _rfc 1 7 3 8 です
function string http build query	url エンコード さ れ た 文字列 を 返し ます
function string http build query mixed $query_data string $numeric_prefix string $arg_separator int $enc_type	url エンコード さ れ た クエリ 文字 列 を 生成 する
function hwapi attribute new $name	属性 の 名前
function hwapi attribute new $value	属性 の 値
function HW_API_Attribute hwapi attribute new	hw _api _attribute の インスタンス を 返し ます
function HW_API_Attribute hwapi attribute new string $name string $value	hw _api _attribute クラス の インスタンス を 作成 する
function hwapi hgcsp $hostname	ホスト 名
function hwapi hgcsp $port	ポート 番号 を 渡さ なかっ た 場合 は 、 4 1 8 が 用い られ ます
function HW_API hwapi hgcsp	hw _api の インスタンス を 返し ます
function HW_API hwapi hgcsp string $hostname int $port	hw _api クラス の オブジェクト を 返す
function ibase blob add $data	追加 する データ
function ibase blob add $blob_handle	ibase _blob _create で オープン し た blob ハンドル
function void ibase blob add resource $blob_handle string $data	生成 さ れ た blob に データ を 追加 する
function ibase blob cancel $blob_handle	ibase _blob _create で オープン し た blob ハンドル
function bool ibase blob cancel	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ibase blob cancel resource $blob_handle	blob の 生成 を 取り消す
function ibase blob get $blob_handle	ibase _blob _open で オープン し た blob ハンドル
function ibase blob get $len	返さ れる データ の サイズ
function string ibase blob get	blob から 最大 len バイト を 返し ます
function string ibase blob get resource $blob_handle int $len	オープン し た blob から len バイト 分 の データ を 取得 する
function ibase blob info $link_identifier	interbase リンク id
function ibase blob info $blob_id	blob の id
function array ibase blob info	blob について の 情報 を 含む 配列 を 返し ます
function array ibase blob info resource $link_identifier string $blob_id	blob の 長さ と 他 の 便利 な 情報 を 返す
function ibase blob open $link_identifier	interbase リンク id
function ibase blob open $blob_id	blob の id
function resource ibase blob open	後 で ibase _blob _get ととも に 使用 する blob ハンドル を 返し ます
function resource ibase blob open resource $link_identifier string $blob_id	データ の 一部 を 取得 する ため に blob を オープン する
function ibase close $connection_id	ibase _connect が 返す interbase リンク id
function bool ibase close	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ibase close resource $connection_id	interbase データベース へ の 接続 を 閉じる
function ibase commit ret $link_or_trans_identifier	引数 なし で コール さ れ た 場合 、 この 関数 は デフォルトリンク の デフォルト の トランザクション を コミット し ます
function bool ibase commit ret	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ibase commit ret resource $link_or_trans_identifier	トランザクション を 閉じ ず に コミット する
function ibase commit $link_or_trans_identifier	引数 なし で コール さ れ た 場合 、 この 関数 は デフォルトリンク の デフォルト の トランザクション を コミット し ます
function bool ibase commit	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ibase commit resource $link_or_trans_identifier	トランザクション を コミット する
function ibase drop db $connection	interbase リンク id
function bool ibase drop db	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ibase drop db resource $connection	データベース を 削除 する
function int ibase errcode	エラーコード を 表す 整数 、 あるい は エラー が 発生 し なかっ た 場合 は false を 返し ます
function int ibase errcode	エラーコード を 返す
function ibase fetch row $result_identifier	interbase 結果 id
function ibase fetch row $fetch_flag	fetch _flag は 、 定数 ibase _text および ibase _unixtime を 論理 和 で 指定 し ます
function array ibase fetch row	取得 し た 行 に 対応 する 配列 を 返し ます
function array ibase fetch row resource $result_identifier int $fetch_flag	interbase データベース から 1 行分 の 結果 を 取得 する
function ibase field info $result	interbase 結果 id
function ibase field info $field_number	フィールド の オフセット
function array ibase field info	配列 を 返し ます
function array ibase field info resource $result int $field_number	フィールド に関する 情報 を 得る
function ibase free query $query	ibase _prepare で 準備 し た クエリ
function bool ibase free query	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ibase free query resource $query	プリペアドクエリ により 確保 さ れ た メモリ を 解放 する
function ibase free result $result_identifier	ibase _query あるい は ibase _execute で 作成 し た 結果 セット
function bool ibase free result	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ibase free result resource $result_identifier	結果 セット を 解放 する
function ibase name result $name	割り当てる 名前
function ibase name result $result	interbase 結果 セット
function bool ibase name result	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ibase name result resource $result string $name	結果 セット に 名前 を 割り 当てる
function ibase num fields $result_id	interbase 結果 id
function int ibase num fields	フィールド の 数 を 整数 値 で 返し ます
function int ibase num fields resource $result_id	結果 セット に おける フィールド 数 を 得る
function ibase rollback ret $link_or_trans_identifier	引数 なし で コール さ れ た 場合 、 この 関数 は デフォルトリンク の デフォルト の トランザクション を ロールバック し ます
function bool ibase rollback ret	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ibase rollback ret resource $link_or_trans_identifier	トランザクション を 閉じ ず に ロールバック する
function ibase rollback $link_or_trans_identifier	引数 なし で コール さ れ た 場合 、 この 関数 は デフォルトリンク の デフォルト の トランザクション を ロールバック し ます
function bool ibase rollback	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ibase rollback resource $link_or_trans_identifier	トランザクション を ロールバック する
function ibase set event handler $event_name1	イベント の 名前
function ibase set event handler $event_handler	コールバック は 、 データベース から 特定 の イベント が 送信 さ れ た 場合 に 、 イベント 名 と リンクリソース を 引数 として コール さ れ ます
function ibase set event handler $event_name2	最大 で 1 5 の イベント を 指定 でき ます
function resource ibase set event handler	返さ れる 値 は イベント の リソース です
function resource ibase set event handler callable $event_handler string $event_name1 string $event_name2	イベント が 発生 し た 際 に コール さ れる コールバック 関数 を 登録 する
function ibase trans $link_identifier	interbase リンク id
function ibase trans $trans_args	trans _args は 、 以下 の ibase _read 、 ibase _write 、 ibase _committed 、 ibase _consistency 、 ibase _concurrency 、 ibase _rec _version 、 ibase _rec _no _version 、 ibase _wait および ibase _nowait の 組み合わせ と なり ます
function resource ibase trans	トランザクションハンドル 、 あるい は エラー 時 に false を 返し ます
function resource ibase trans int $trans_args resource $link_identifier	トランザクション を 開始 する
function iconv mime decode headers $encoded_headers	エンコード さ れ た ヘッダ を 表す 文字列
function iconv mime decode headers $charset	オプション の charset パラメータ は 、 結果 の 文字 セット を 指定 し ます
function iconv mime decode headers $mode	mode は 、 iconv _mime _decode _headers が 不正 な 形式 の mime ヘッダフィールド に 遭遇 し た 場合 の 振る 舞い を 定義 し ます
function array iconv mime decode headers	成功 し た 場合 は 連想 配列 を 返し ます
function array iconv mime decode headers string $encoded_headers int $mode string $charset	複数 の mime ヘッダフィールド を 一度 に デコード する
function iconv mime decode $mode	mode は 、 iconv _mime _decode が 不正 な 形式 の mime ヘッダフィールド に 遭遇 し た 場合 の 振る 舞い を 定義 し ます
function iconv mime decode $encoded_header	エンコード さ れ た ヘッダ を 表す 文字列
function iconv mime decode $charset	オプション の charset パラメータ は 、 結果 の 文字 セット を 指定 し ます
function string iconv mime decode	成功 し た 場合 は デコード さ れ た mime フィールド を 、 デコード 中 に エラー が 発生 し た 場合 は false を 返し ます
function string iconv mime decode string $encoded_header int $mode string $charset	mime ヘッダフィールド を デコード する
function iconv set encoding $charset	文字 セット
function iconv set encoding $type	type に は 以下 の 値 の どれ か を 指定 でき ます
function bool iconv set encoding	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool iconv set encoding string $type string $charset	文字 エンコーディング 変換 用 の 設定 を 行なう
function iconv substr $offset	start が 負 で ない 場合 、 iconv _substr は str の start 番目 の 文字 （ ゼロ から 数え て ） から 切り出し ます
function iconv substr $charset	charset が 指定 さ れ なかっ た 場合 、 文字 セット は ini 設定 iconv
function iconv substr $str	元 の 文字列
function iconv substr $length	length が 指定 さ れ 、 かつ 正 で ある 場合 、 返 さ れる 文字 列 は start から 数え て 最大 length 文字 数分 と なり ます string の 長さ に 依存 し ます
function string iconv substr	文字列 str の 、 offset と length で 指定 さ れ た 一部 を 返し ます
function string iconv substr string $str int $offset int $length string $charset	文字列 の 一部 を 切り出す
function iconv $in_charset	入力 文字 セット
function iconv $out_charset	出力 文字 セット
function iconv $str	変換 する 文字列
function string iconv	変換 さ れ た 文字 列 、 失敗 し た 場合 に false を 返し ます
function string iconv string $in_charset string $out_charset string $str	文字列 を 指定 し た 文字 エンコーディング に 変換 する
function id3 get frame long name $frameId	id 3v 2 フレーム
function string id3 get frame long name	フレーム の 長い 名前 、 あるい は エラー 時 に false を 返し ます
function string id3 get frame long name string $frameId	id 3v 2 フレーム の 長い 名前 を 取得 する
function array id3 get genre list	id 3 タグ に 格納 さ れ て いる すべ て の ジャンル を 含む 配列 を 返し ます
function array id3 get genre list	使用 可能 な ジャンル の 一覧 を 取得 する
function id3 get tag $filename	mp 3 ファイル へ の パス
function id3 get tag $version	mp 3 ファイル が バージョン 1
function array id3 get tag	title や artist といっ た キー を 含む 連想 配列 を 返し ます
function array id3 get tag string $filename int $version	id 3 タグ に 含ま れる すべ て の 情報 を 取得 する
function id3 get version $filename	mp 3 ファイル へ の パス
function int id3 get version	mp 3 ファイル 内 の id3 タグ の バージョン を 返し ます
function int id3 get version string $filename	id 3 タグ の バージョン を 取得 する
function id3 remove tag $version	mp 3 ファイル に は バージョン 1
function id3 remove tag $filename	mp 3 ファイル へ の パス
function bool id3 remove tag	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool id3 remove tag string $filename int $version	既存 の id3 タグ を 削除 する
function id3 set tag $version	mp 3 ファイル に は バージョン 1
function id3 set tag $tag	タグ の キー と 値 を 含む 連想 配列
function id3 set tag $filename	mp 3 ファイル へ の パス
function bool id3 set tag	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool id3 set tag string $filename array $tag int $version	id 3 タグ に 格納 さ れ て いる 情報 を 更新 する
function idn to ascii $options	変換 オプション - idna _ で はじまる 定数 idna _error _* 定数 を 除く の 組み合わせ です
function idn to ascii $variant	idna 2 0 0 3 の 場合 は intl _idna _variant _ 2 0 0 3 、 あるい は uts # 4 6 の 場合 は intl _idna _variant _uts 4 6
function idn to ascii $domain	変換 する ドメイン 名 php 5 で は 、 utf - 8 に エンコード さ れ て いる 必要 が あり ます
function idn to ascii $idna_info	この パラメータ を 使う の は 、 variant が intl _idna _variant _uts 4 6 の 場合 だけ です
function string idn to ascii	idna の ascii 形式 で エンコード さ れ た ドメイン 名
function string idn to ascii string $domain int $options int $variant array $idna_info	ドメイン 名 を idna の ascii 形式 に 変換 する
function idn to utf8 $options	変換 オプション - idna _ で はじまる 定数 idna _error _* 定数 を 除く の 組み合わせ です
function idn to utf8 $idna_info	この パラメータ を 使う の は 、 variant が intl _idna _variant _uts 4 6 の 場合 だけ です
function idn to utf8 $domain	idna の ascii 方式 で エンコード さ れ た 、 変換 対象 の ドメイン 名
function idn to utf8 $variant	idna 2 0 0 3 の 場合 は intl _idna _variant _ 2 0 0 3 、 あるい は uts # 4 6 の 場合 は intl _idna _variant _uts 4 6
function string idn to utf8	unicode の ドメイン 名
function string idn to utf8 string $domain int $options int $variant array $idna_info	idna の ascii 方式 で エンコード さ れ た ドメイン 名 を unicode に 変換 する
function ifx affected rows $result_id	ifx _query また は ifx _prepare により 返さ れる 有効 な 結果 id です
function int ifx affected rows	行 の 数 を 整数 値 で 返し ます
function int ifx affected rows resource $result_id	クエリ で 変更 さ れ た 行 の 数 を 得る
function ifx blobinfile mode $mode	モード & quot ; 0 & quot ; は 、blob を メモリー に 保存 する こと を 意味 し 、 モード & quot ; 1 & quot ; は 、blob を ファイル に 保存 する こと を 意味 し ます
function bool ifx blobinfile mode	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ifx blobinfile mode int $mode	全て の select クエリ に関する デフォルト の blob モード を 設定 する
function ifx close $link_identifier	リンク id
function bool ifx close	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ifx close resource $link_identifier	informix 接続 を 閉じる
function ifx connect $userid	ユーザー 名 を 表す 文字列
function ifx connect $password	パスワード を 表す 文字列
function ifx connect $database	データベース 名 を 表す 文字列
function resource ifx connect	成功 時 に 接続 id を 、 エラー 時 に false を 返し ます
function resource ifx connect string $database string $userid string $password	informix サーバー へ の 接続 を オープン する
function ifx copy blob $bid	blob オブジェクト の id
function int ifx copy blob	新規 の blob オブジェクト id を 返し ます
function int ifx copy blob int $bid	指定 し た blob オブジェクト を 二重化 する
function ifx create char $param	内容 と なる 文字
function int ifx create char	新しい 文字 オブジェクト の id 、 あるい は エラー 時 に false を 返し ます
function int ifx create char string $param	文字 オブジェクト を 作成 する
function ifx errormsg $errorcode	指定 する と 、 指定 し た コード に 対応 する エラーメッセージ を 返し ます
function string ifx errormsg	エラーメッセージ を 文字列 で 返し ます
function string ifx errormsg int $errorcode	直近 の informix コール の エラーメッセージ を 返す
function ifx fetch row $result_id	ifx _query また は ifx _prepare select 型 の クエリ のみ !) により 返さ れ た 有効 な 結果 id です
function ifx fetch row $position	オプション の パラメータ で 、& quot ; スクロール & quot ; カーソル で & quot ; 取得 &quot ; 操作 を 行う ため の もの です
function array ifx fetch row	取得 さ れ た 行 に 対応 する 連想 配列 を 返し ます
function array ifx fetch row resource $result_id mixed $position	行 を 連想 配列 として 取得 する
function ifx fieldproperties $result_id	result _id は 、 ifx _query また は ifx _prepare select 型 の クエリ のみ !) により 返さ れ た 有効 な 結果 id です
function array ifx fieldproperties	result _id の クエリ について 、 フィールド 名 を キー と し 、 sql フィールドプロパティ を データ と し た 連想 配列 を 返し ます
function array ifx fieldproperties resource $result_id	sql フィールドプロパティ の リスト
function ifx free blob $bid	blob オブジェクト id
function bool ifx free blob	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ifx free blob int $bid	blob オブジェクト を 削除 する
function ifx free char $bid	文字 オブジェクト id
function bool ifx free char	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ifx free char int $bid	文字 オブジェクト を 削除 する
function ifx free result $result_id	result _id は 、 ifx _query また は ifx _prepare select 型 の クエリ のみ !) により 返さ れ た 有効 な 結果 id です
function bool ifx free result	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ifx free result resource $result_id	クエリ に関する リソース を 解放 する
function ifx get blob $bid	blob オブジェクト id
function string ifx get blob	blob の 内容 を 表す 文字 列 、 あるい は エラー 時 に false を 返し ます
function string ifx get blob int $bid	blob オブジェクト の 内容 を 返す
function ifx getsqlca $result_id	result _id は 、 ifx _query また は ifx _prepare select 型 の クエリ のみ !) により 返さ れ た 有効 な 結果 id です
function array ifx getsqlca	連想 配列 を 返し ます
function array ifx getsqlca resource $result_id	クエリ 実行 後 、 sqlca
function ifx htmltbl result $result_id	result _id is a valid resultid returned by ifx _query or ifx _prepare select type queries only !)
function ifx htmltbl result $html_table_options	この オプション 引数 は 、& lt ;table &gt ; タグ の オプション と する 文字 列 です
function int ifx htmltbl result	取得 さ れ た 行 の 数 、 あるい は エラー の 場合 に false を 返し ます
function int ifx htmltbl result resource $result_id string $html_table_options	クエリ 結果 の 全行 を html テーブル に フォーマット する
function ifx num fields $result_id	result _id は 、 ifx _query また は ifx _prepare select 型 の クエリ のみ !) により 返さ れ た 有効 な 結果 id です
function int ifx num fields	result _id に関する クエリ 結果 の カラム 数 、 あるい は エラー の 場合 に false を 返し ます
function int ifx num fields resource $result_id	クエリ の カラム 数 を 返す
function ifx num rows $result_id	result _id は 、 ifx _query また は ifx _prepare select 型 の クエリ のみ !) により 返さ れ た 有効 な 結果 id です
function int ifx num rows	取得 し た 行 の 数 、 あるい は エラー 時 に false を 返し ます
function int ifx num rows resource $result_id	クエリ から 既 に 取得 さ れ た 行 の 数 を 数える
function ifx prepare $cursor_def	オプション の パラメータ で 、 その カーソル を & quot ; スクロール & quot ; また は & quot ; ホールド & quot ; カーソル と する こと が でき ます
function ifx prepare $query	クエリ 文字列
function ifx prepare $link_identifier	リンク id
function ifx prepare $blobidarray	もし 、 クエリ に おい て blob byte また は text カラム が ある 場合 、 対応 する & quot ;blob id &quot ; を 有する blobidarray パラメータ を 追加 する こと が 可能 です
function resource ifx prepare	後 で ifx _do で 使用 する ため の 結果 id 、 あるい は エラー 時 に false を 返し ます
function resource ifx prepare string $query resource $link_identifier int $cursor_def mixed $blobidarray	sql 文 を 実行 用 に 準備 する
function ifx textasvarchar $mode	モード & quot ; 0 & quot ; は 、blob を 返し 、& quot ; 1 & quot ; は 、 テキスト の 内容 を 有する varchar を 返し ます
function bool ifx textasvarchar	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ifx textasvarchar int $mode	デフォルト の テキストモード を 設定 する
function ifx update blob $content	新規 データ の 文字列
function ifx update blob $bid	blob オブジェクト id
function bool ifx update blob	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ifx update blob int $bid string $content	blob オブジェクト の 内容 を 更新 する
function ifx update char $content	新規 データ の 文字列
function ifx update char $bid	文字 オブジェクト id
function bool ifx update char	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ifx update char int $bid string $content	文字 オブジェクト の 内容 を 更新 する
function ifxus close slob $bid	既存 の slob の id
function bool ifxus close slob	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ifxus close slob int $bid	slob オブジェクト を 削除 する
function ifxus free slob $bid	既存 の slob の id
function bool ifxus free slob	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ifxus free slob int $bid	slob オブジェクト を 削除 する
function ifxus open slob $mode	ifx _lo _rdonly 、 ifx _lo _wronly 、 ifx _lo _append 、 ifx _lo _rdwr 、 ifx _lo _buffer 、 ifx _lo _nobuffer の 組み合わせ
function ifxus open slob $bid	既存 の slob の id
function int ifxus open slob	新しい slob オブジェクト の id 、 あるい は エラー 時 に false を 返し ます
function int ifxus open slob int $bid int $mode	slob オブジェクト を オープン する
function ifxus tell slob $bid	既存 の slob の id
function int ifxus tell slob	シーク 位置 を 表す 整数 値 、 あるい は エラー 時 に false を 返し ます
function int ifxus tell slob int $bid	現在 の ファイル また は シーク 位置 を 返す
function ifxus write slob $content	書き込む 内容 を 表す 文字列
function ifxus write slob $bid	既存 の slob の id
function int ifxus write slob	書き込ん だ バイト 数 を 表す 整数 値 、 あるい は エラー 時 に false を 返し ます
function int ifxus write slob int $bid string $content	slob オブジェクト に 文字列 を 書き こむ
function ignore user abort $value	指定 する と 、 この 関数 は ini 項目 ignore _user _abort に value の 値 を 設定 し ます
function int ignore user abort	以前 の 設定 を 表す integer 値 を 返し ます
function int ignore user abort bool $value	クライアント の 接続 が 切断 さ れ た 際 に スクリプト の 実行 を 終了 する かど う か を 設定 する
function iis get server by path $path	ルートディレクトリ へ の パス
function int iis get server by path	サーバー の インスタンス 番号 を 返し ます
function int iis get server by path string $path	指定 し た パス の インスタンス 番号 を 返す
function image type to extension $imagetype	imagetype _xxx 定数 のい ずれ かひ とつ
function image type to extension $include_dot	拡張子 の 前 に ドット を つける かどう か
function string image type to extension	指定 し た 型 に 対応 する 拡張子 を 文字列 で 返し ます
function string image type to extension int $imagetype bool $include_dot	画像 形式 から ファイル の 拡張子 を 取得 する
function imagecharup $c	描画 する 文字
function imagecharup $y	始点 の y 座標
function imagecharup $font	latin 2 エンコーディング の 組み込み の フォント の 場合 は 1 2 3 4 5 のいずれ か 数字 が 大き なほう が 、 より 大きい フォント に 対応 し ます 、 あるい は imageloadfont で 登録 し た フォント の 識別子 のい ずれ か
function imagecharup $color	imagecolorallocate で 作成 し た 色 id
function imagecharup $x	始点 の x 座標
function imagecharup $image	imagecreatetruecolor のよう な 画像 作成 関数 が 返す 画像 リソース
function bool imagecharup	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool imagecharup resource $image int $font int $x int $y string $c int $color	垂直 に 文字 を 描画 する
function imagecolorallocatealpha $red	赤 コンポーネント の 値
function imagecolorallocatealpha $alpha	0 から 1 2 7 まで の 値
function imagecolorallocatealpha $green	緑 コンポーネント の 値
function imagecolorallocatealpha $image	imagecreatetruecolor のよう な 画像 作成 関数 が 返す 画像 リソース
function imagecolorallocatealpha $blue	青 コンポーネント の 値
function int imagecolorallocatealpha	色 id 、 あるい は 作成 に 失敗 し た 場合 に false を 返し ます
function int imagecolorallocatealpha resource $image int $red int $green int $blue int $alpha	画像 で 使用 する 色 を 透過 度 を 指定 し て 作成 する
function imagecolorat $y	点 の y 座標
function imagecolorat $image	imagecreatetruecolor のよう な 画像 作成 関数 が 返す 画像 リソース
function imagecolorat $x	点 の x 座標
function int imagecolorat	色 の インデックス を 返し ます
function int imagecolorat resource $image int $x int $y	ピクセル の 色 の インデックス を 取得 する
function imagecolorclosest $red	赤 コンポーネント の 値
function imagecolorclosest $green	緑 コンポーネント の 値
function imagecolorclosest $image	imagecreatetruecolor のよう な 画像 作成 関数 が 返す 画像 リソース
function imagecolorclosest $blue	青 コンポーネント の 値
function int imagecolorclosest	画像 パレット 内 で 、 指定 し た 色 にいちばん 近い 色 の インデックス を 返し ます
function int imagecolorclosest resource $image int $red int $green int $blue	指定 し た 色 に 最も 近い 色 の インデックス を 取得 する
function imagecolorclosestalpha $red	赤 コンポーネント の 値
function imagecolorclosestalpha $alpha	0 から 1 2 7 まで の 値
function imagecolorclosestalpha $green	緑 コンポーネント の 値
function imagecolorclosestalpha $image	imagecreatetruecolor のよう な 画像 作成 関数 が 返す 画像 リソース
function imagecolorclosestalpha $blue	青 コンポーネント の 値
function int imagecolorclosestalpha	画像 パレット 内 で 、 指定 し た 色 にいちばん 近い 色 の インデックス を 返し ます
function int imagecolorclosestalpha resource $image int $red int $green int $blue int $alpha	指定 し た 色 + アルファ 値 に 最も 近い 色 の インデックス を 取得 する
function imagecolorclosesthwb $red	赤 コンポーネント の 値
function imagecolorclosesthwb $green	緑 コンポーネント の 値
function imagecolorclosesthwb $image	imagecreatetruecolor のよう な 画像 作成 関数 が 返す 画像 リソース
function imagecolorclosesthwb $blue	青 コンポーネント の 値
function int imagecolorclosesthwb	指定 し た 色 に 最も 近い 色合 い 、 白 、 黒 を 有する 色 の インデックス を 返し ます
function int imagecolorclosesthwb resource $image int $red int $green int $blue	色合い 、 白 、 黒 を 有する 色 の インデックス を 得る
function imagecolordeallocate $image	imagecreatetruecolor のよう な 画像 作成 関数 が 返す 画像 リソース
function imagecolordeallocate $color	色 id
function bool imagecolordeallocate	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool imagecolordeallocate resource $image int $color	イメージ の 色 リソース を 開放 する
function imagecolorexact $red	赤 コンポーネント の 値
function imagecolorexact $green	緑 コンポーネント の 値
function imagecolorexact $image	imagecreatetruecolor のよう な 画像 作成 関数 が 返す 画像 リソース
function imagecolorexact $blue	青 コンポーネント の 値
function int imagecolorexact	指定 し た 色 の 、 パレット 内 で の インデックス を 返し ます
function int imagecolorexact resource $image int $red int $green int $blue	指定 し た 色 の インデックス を 取得 する
function imagecolorexactalpha $red	赤 コンポーネント の 値
function imagecolorexactalpha $alpha	0 から 1 2 7 まで の 値
function imagecolorexactalpha $green	緑 コンポーネント の 値
function imagecolorexactalpha $image	imagecreatetruecolor のよう な 画像 作成 関数 が 返す 画像 リソース
function imagecolorexactalpha $blue	青 コンポーネント の 値
function int imagecolorexactalpha	イメージ の パレット に おける 、 指定 し た 色 + アルファ 値 の インデックス を 返し ます
function int imagecolorexactalpha resource $image int $red int $green int $blue int $alpha	指定 し た 色 + アルファ 値 の インデックス を 取得 する
function imagecolorresolvealpha $red	赤 コンポーネント の 値
function imagecolorresolvealpha $alpha	0 から 1 2 7 まで の 値
function imagecolorresolvealpha $green	緑 コンポーネント の 値
function imagecolorresolvealpha $image	imagecreatetruecolor のよう な 画像 作成 関数 が 返す 画像 リソース
function imagecolorresolvealpha $blue	青 コンポーネント の 値
function int imagecolorresolvealpha	色インデックス を 返し ます
function int imagecolorresolvealpha resource $image int $red int $green int $blue int $alpha	指定 し た 色 + アルファ 値 また は 最も 近い 色 の インデックス を 取得 する
function imagecolorset $index	パレット の インデックス
function imagecolorset $alpha	アルファコンポーネント の 値
function imagecolorset $red	赤 コンポーネント の 値
function imagecolorset $green	緑 コンポーネント の 値
function imagecolorset $image	imagecreatetruecolor のよう な 画像 作成 関数 が 返す 画像 リソース
function imagecolorset $blue	青 コンポーネント の 値
function void imagecolorset resource $image int $index int $red int $green int $blue int $alpha	指定 し た パレットインデックス の 色 を 設定 する
function imagecolortransparent $color	imagecolorallocate で 指定 し た 色 id
function imagecolortransparent $image	imagecreatetruecolor のよう な 画像 作成 関数 が 返す 画像 リソース
function int imagecolortransparent	新しい 透明 色 の id 指定 し なかっ た 場合 は 現在 設定 さ れ て いる id を 返し ます
function int imagecolortransparent resource $image int $color	透明色 を 定義 する
function imageconvolution $matrix	3x 3 の 配列
function imageconvolution $div	畳み込み 結果 の 除数
function imageconvolution $image	imagecreatetruecolor のよう な 画像 作成 関数 が 返す 画像 リソース
function imageconvolution $offset	色 オフセット
function bool imageconvolution	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool imageconvolution resource $image array $matrix float $div float $offset	div および offset の 係数 を 使用 し 、 3x 3 の 畳み込み 配列 を 適用 する
function imagecreatefromgd2part $srcX	作成元 の x 座標
function imagecreatefromgd2part $width	コピー 元 の 幅
function imagecreatefromgd2part $srcY	作成元 の y 座標
function imagecreatefromgd2part $height	コピー 元 の 高さ
function imagecreatefromgd2part $filename	gd 2 画像 へ の パス
function resource imagecreatefromgd2part	成功 し た 場合 に 画像 リソース id 、 エラー 時 に false を 返し ます
function resource imagecreatefromgd2part string $filename int $srcX int $srcY int $width int $height	gd 2 ファイル また は url の 指定 し た 部分 から 新規 イメージ を 生成 する
function imagecreatefromjpeg $filename	jpeg 画像 へ の パス
function resource imagecreatefromjpeg	成功 し た 場合 に 画像 リソース id 、 エラー 時 に false を 返し ます
function resource imagecreatefromjpeg string $filename	新しい 画像 を ファイル あるい は url から 作成 する
function imagecreatefrompng $filename	png 画像 へ の パス
function resource imagecreatefrompng	成功 し た 場合 に 画像 リソース id 、 エラー 時 に false を 返し ます
function resource imagecreatefrompng string $filename	新しい 画像 を ファイル あるい は url から 作成 する
function imagecreatefromwbmp $filename	wbmp 画像 へ の パス
function resource imagecreatefromwbmp	成功 し た 場合 に 画像 リソース id 、 エラー 時 に false を 返し ます
function resource imagecreatefromwbmp string $filename	新しい 画像 を ファイル あるい は url から 作成 する
function imagecreatefromwebp $filename	webp 画像 へ の パス
function resource imagecreatefromwebp	成功 し た 場合 に 画像 リソース id 、 エラー 時 に false を 返し ます
function resource imagecreatefromwebp string $filename	新しい 画像 を ファイル あるい は url から 作成 する
function imagecreatefromxbm $filename	xbm 画像 へ の パス
function resource imagecreatefromxbm	成功 し た 場合 に 画像 リソース id 、 エラー 時 に false を 返し ます
function resource imagecreatefromxbm string $filename	新しい 画像 を ファイル あるい は url から 作成 する
function imagecreatefromxpm $filename	xpm 画像 へ の パス
function resource imagecreatefromxpm	成功 し た 場合 に 画像 リソース id 、 エラー 時 に false を 返し ます
function resource imagecreatefromxpm string $filename	新しい 画像 を ファイル あるい は url から 作成 する
function imagecreatetruecolor $height	画像 の 高さ
function imagecreatetruecolor $width	画像 の 幅
function resource imagecreatetruecolor	成功 し た 場合 に 画像 リソース id 、 エラー 時 に false を 返し ます
function resource imagecreatetruecolor int $width int $height	truecolor イメージ を 新規 に 作成 する
function imagedashedline $color	塗りつぶし 色
function imagedashedline $x1	左上 の x 座標
function imagedashedline $y1	左上 の y 座標 0
function imagedashedline $x2	右下 の x 座標
function imagedashedline $y2	右下 の y 座標
function imagedashedline $image	imagecreatetruecolor のよう な 画像 作成 関数 が 返す 画像 リソース
function bool imagedashedline	常 に true を 返し ます
function bool imagedashedline resource $image int $x1 int $y1 int $x2 int $y2 int $color	破線 を 描画 する
function imagedestroy $image	imagecreatetruecolor のよう な 画像 作成 関数 が 返す 画像 リソース
function bool imagedestroy	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool imagedestroy resource $image	画像 を 破棄 する
function imageellipse $height	楕円 の 高さ
function imageellipse $color	楕円 の 色 を 、 imagecolorallocate で 作成 し た 画像 id で 指定 し ます
function imageellipse $cx	中心 の x 座標
function imageellipse $cy	中心 の y 座標
function imageellipse $image	imagecreatetruecolor のよう な 画像 作成 関数 が 返す 画像 リソース
function imageellipse $width	楕円 の 幅
function bool imageellipse	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool imageellipse resource $image int $cx int $cy int $width int $height int $color	楕円 を 描画 する
function imagefill $y	開始 位置 の y 座標
function imagefill $color	塗りつぶし 色
function imagefill $image	imagecreatetruecolor のよう な 画像 作成 関数 が 返す 画像 リソース
function imagefill $x	開始 位置 の x 座標
function bool imagefill	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool imagefill resource $image int $x int $y int $color	塗り潰す
function imagefilledpolygon $points	多角形 の 頂点 の 座標 x および y を 含む 配列
function imagefilledpolygon $image	imagecreatetruecolor のよう な 画像 作成 関数 が 返す 画像 リソース
function imagefilledpolygon $num_points	頂点 の 総数
function imagefilledpolygon $color	imagecolorallocate で 作成 し た 色 id
function bool imagefilledpolygon	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool imagefilledpolygon resource $image array $points int $num_points int $color	塗りつぶし た 多角 形 を 描画 する
function imagefilledrectangle $x2	終了 位置 の x 座標
function imagefilledrectangle $color	塗りつぶし 色
function imagefilledrectangle $y2	終了 位置 の y 座標
function imagefilledrectangle $x1	開始 位置 の x 座標
function imagefilledrectangle $y1	開始 位置 の y 座標
function imagefilledrectangle $image	imagecreatetruecolor のよう な 画像 作成 関数 が 返す 画像 リソース
function bool imagefilledrectangle	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool imagefilledrectangle resource $image int $x1 int $y1 int $x2 int $y2 int $color	塗りつぶし た 矩形 を 描画 する
function imagefilter $arg1	img _filter _brightness : 輝度 レベル
function imagefilter $arg3	img _filter _colorize : 青 コンポーネント の 値
function imagefilter $filtertype	filtertype は 、 以下 のい ずれ か です
function imagefilter $arg2	img _filter _colorize : 緑 コンポーネント の 値
function imagefilter $image	imagecreatetruecolor のよう な 画像 作成 関数 が 返す 画像 リソース
function imagefilter $arg4	img _filter _colorize : アルファチャネル
function bool imagefilter	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool imagefilter resource $image int $filtertype int $arg1 int $arg2 int $arg3 int $arg4	画像 に フィルタ を 適用 する
function imagefontheight $font	latin 2 エンコーディング の 組み込み の フォント の 場合 は 1 2 3 4 5 のいずれ か 数字 が 大き なほう が 、 より 大きい フォント に 対応 し ます 、 あるい は imageloadfont で 登録 し た フォント の 識別子 のい ずれ か
function int imagefontheight	フォント の 高さ を ピクセル で 返し ます
function int imagefontheight int $font	フォント の 高さ を 取得 する
function imageftbbox $fontfile	truetype フォント の ファイル 名 url も 可
function imageftbbox $angle	text を 取得 する 角度
function imageftbbox $extrainfo	extrainfo の 配列 の インデックス キー 型 意味 linespacing float 描画 時 の 行間 を 定義 し ます
function imageftbbox $text	取得 し たい 文字列
function imageftbbox $size	フォントサイズ
function array imageftbbox	imageftbbox は 8 つの 要素 から なる 配列 を 返し ます
function array imageftbbox float $size float $angle string $fontfile string $text array $extrainfo	freetype 2 による フォント を 用い た テキスト を 囲む箱 を 取得 する
function imagegd $filename	ファイル の 保存 先 の パス
function imagegd $image	imagecreatetruecolor のよう な 画像 作成 関数 が 返す 画像 リソース
function bool imagegd	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool imagegd resource $image string $filename	gd イメージ を ブラウザ また は ファイル に 出力 する
function imagegif $filename	ファイル の 保存 先 の パス
function imagegif $image	imagecreatetruecolor のよう な 画像 作成 関数 が 返す 画像 リソース
function bool imagegif	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool imagegif resource $image string $filename	画像 を ブラウザ あるい は ファイル に 出力 する
function resource imagegrabscreen	成功 し た 場合 に 画像 リソース の id 、 失敗 し た 場合 に false を 返し ます
function resource imagegrabscreen	画面 全体 を キャプチャ する
function imagegrabwindow $window_handle	hwnd ウィンドウ id
function imagegrabwindow $client_area	アプリケーション の クライアント 領域 を 含める かどう か
function resource imagegrabwindow	成功 し た 場合 に 画像 リソース の id 、 失敗 し た 場合 に false を 返し ます
function resource imagegrabwindow int $window_handle int $client_area	ウィンドウ を キャプチャ する
function imageistruecolor $image	imagecreatetruecolor のよう な 画像 作成 関数 が 返す 画像 リソース
function bool imageistruecolor	image が truecolor の 場合 に true 、 それ 以外 の 場合 に false を 返し ます
function bool imageistruecolor resource $image	画像 が truecolor かどう か 調べる
function imageloadfont $file	フォントファイル 形式 は 現在 は バイナリ で 、 アーキクチャ に 依存 し ます
function int imageloadfont	フォント id を 返し ます
function int imageloadfont string $file	新しい フォント を 読み込む
function imagepng $filename	ファイル の 保存 先 の パス
function imagepng $image	imagecreatetruecolor のよう な 画像 作成 関数 が 返す 画像 リソース
function imagepng $quality	圧縮 レベル
function imagepng $filters	png ファイル の 大きさ を 小さく し ます
function bool imagepng	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool imagepng resource $image string $filename int $quality int $filters	png イメージ を ブラウザ また は ファイル に 出力 する
function imagepolygon $image	imagecreatetruecolor のよう な 画像 作成 関数 が 返す 画像 リソース
function imagepolygon $points	多角形 の 頂点 から なる php の 配列 で 、 次 のよう に なり ます
function imagepolygon $num_points	頂点 の 総数
function imagepolygon $color	imagecolorallocate で 作成 し た 色 id
function bool imagepolygon	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool imagepolygon resource $image array $points int $num_points int $color	多角形 を 描画 する
function imagepsencodefont $font_index	imagepsloadfont が 返す フォントリソース
function imagepsencodefont $encodingfile	この ファイル の 正しい フォーマット は 、 t 1libs の ドキュメント に 記述 さ れ て い ます
function bool imagepsencodefont	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool imagepsencodefont resource $font_index string $encodingfile	フォント の 文字 エンコードベクトル を 変更 する
function imagepsfreefont $font_index	imagepsloadfont が 返す フォントリソース
function bool imagepsfreefont	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool imagepsfreefont resource $font_index	postscript type 1 フォント 用 メモリ を 解放 する
function imagepsloadfont $filename	postscript フォントファイル へ の パス
function resource imagepsloadfont	全 て 正常 に 処理 さ れ た 場合 、 有効 な フォント id が 返さ れ 、 後 で 使用 する こと が でき ます
function resource imagepsloadfont string $filename	ファイル から postscript type 1 フォント を ロード する
function imagerectangle $image	imagecreatetruecolor のよう な 画像 作成 関数 が 返す 画像 リソース
function imagerectangle $x1	左上 の x 座標
function imagerectangle $x2	右下 の x 座標
function imagerectangle $color	imagecolorallocate で 作成 し た 色 id
function imagerectangle $y2	右下 の y 座標
function imagerectangle $y1	左上 の y 座標
function bool imagerectangle	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool imagerectangle resource $image int $x1 int $y1 int $x2 int $y2 int $color	矩形 を 描画 する
function imagesavealpha $saveflag	アルファチャネル を 保存 する か 否か
function imagesavealpha $image	imagecreatetruecolor のよう な 画像 作成 関数 が 返す 画像 リソース
function bool imagesavealpha	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool imagesavealpha resource $image bool $saveflag	png 画像 を 保存 する 際 に （ 単一色 の 透過 設定 で は ない ） 完全 な アルファチャネル 情報 を 保存 する フラグ を 設定 する
function imagesetinterpolation $image	imagecreatetruecolor のよう な 画像 作成 関数 が 返す 画像 リソース
function imagesetinterpolation $method	補間 方法
function bool imagesetinterpolation	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool imagesetinterpolation resource $image int $method	補間 方法 を 設定 する
function imagestring $font	latin 2 エンコーディング の 組み込み の フォント の 場合 は 1 2 3 4 5 のいずれ か 数字 が 大き なほう が 、 より 大きい フォント に 対応 し ます 、 あるい は imageloadfont で 登録 し た フォント の 識別子 のい ずれ か
function imagestring $color	imagecolorallocate で 作成 し た 色 id
function imagestring $y	左上隅 の y 座標
function imagestring $string	書き出す 文字列
function imagestring $image	imagecreatetruecolor のよう な 画像 作成 関数 が 返す 画像 リソース
function imagestring $x	左上隅 の x 座標
function bool imagestring	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool imagestring resource $image int $font int $x int $y string $string int $color	文字列 を 水平 に 描画 する
function imagestringup $x	左下隅 の x 座標
function imagestringup $font	latin 2 エンコーディング の 組み込み の フォント の 場合 は 1 2 3 4 5 のいずれ か 数字 が 大き なほう が 、 より 大きい フォント に 対応 し ます 、 あるい は imageloadfont で 登録 し た フォント の 識別子 のい ずれ か
function imagestringup $color	imagecolorallocate で 作成 し た 色 id
function imagestringup $string	書き出す 文字列
function imagestringup $y	左下隅 の y 座標
function imagestringup $image	imagecreatetruecolor のよう な 画像 作成 関数 が 返す 画像 リソース
function bool imagestringup	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool imagestringup resource $image int $font int $x int $y string $string int $color	文字列 を 垂直 に 描画 する
function imagesy $image	imagecreatetruecolor のよう な 画像 作成 関数 が 返す 画像 リソース
function int imagesy	image の 高さ 、 あるい は エラー 時 に false を 返し ます
function int imagesy resource $image	画像 の 高さ を 取得 する
function imagetruecolortopalette $image	imagecreatetruecolor のよう な 画像 作成 関数 が 返す 画像 リソース
function imagetruecolortopalette $dither	イメージ に ディザー を かける こと を 指定 し ます
function imagetruecolortopalette $ncolors	パレット に 保持 さ れる 最大 の 色数 を 設定 し ます
function bool imagetruecolortopalette	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool imagetruecolortopalette resource $image bool $dither int $ncolors	truecolor イメージ を パレットイメージ に 変換 する
function imagettfbbox $angle	測定 する text の 角度 度単 位
function imagettfbbox $fontfile	truetype フォントファイル の ファイル 名 url
function imagettfbbox $text	測定 する 文字列
function imagettfbbox $size	フォントサイズ
function array imagettfbbox	imagettfbbox は 、 テキスト の bounding box を 作成 する ため の 4 点 を 表現 する 8 個 の 要素 から なる 配列 を 返し ます
function array imagettfbbox float $size float $angle string $fontfile string $text	typetype フォント を 使用 し た テキスト の bounding box を 生成 する
function imagewbmp $filename	ファイル の 保存 先 の パス
function imagewbmp $image	imagecreatetruecolor のよう な 画像 作成 関数 が 返す 画像 リソース
function imagewbmp $foreground	この パラメータ で 、 前景 の 色 を 指定 でき ます
function bool imagewbmp	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool imagewbmp resource $image string $filename int $foreground	画像 を ブラウザ あるい は ファイル に 出力 する
function imagexbm $filename	ファイル の 保存 先 の パス
function imagexbm $image	imagecreatetruecolor のよう な 画像 作成 関数 が 返す 画像 リソース
function imagexbm $foreground	この パラメータ で 、 前景 の 色 を 指定 でき ます
function bool imagexbm	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool imagexbm resource $image string $filename int $foreground	xbm 画像 を ブラウザ あるい は ファイル に 出力 する
function imap body $msg_number	メッセージ 番号
function imap body $options	オプション の options は ビットマスク で あり 、 以下 の 要素 の 組み合わせ と なり ます
function imap body $imap_stream	imap _open が 返す imap ストリーム
function string imap body	指定 し た メッセージ の 本文 を 文字列 で 返し ます
function string imap body resource $imap_stream int $msg_number int $options	メッセージ 本文 を 読む
function imap bodystruct $msg_number	メッセージ 番号
function imap bodystruct $imap_stream	imap _open が 返す imap ストリーム
function imap bodystruct $section	読み込む body セクション
function object imap bodystruct	オブジェクト の 情報 を 返し ます
function object imap bodystruct resource $imap_stream int $msg_number string $section	指定 し た メッセージ の 指定 し た body セクション の 構造 を 読み込む
function imap check $imap_stream	imap _open が 返す imap ストリーム
function object imap check	以下 の プロパティ を もつ オブジェクト の 情報 を 返し ます
function object imap check resource $imap_stream	現在 の メールボックス を チェック する
function imap clearflag full $options	オプション options は ビットマスク で あり 、 以下 の 組み合わせ と なり ます
function imap clearflag full $imap_stream	imap _open が 返す imap ストリーム
function imap clearflag full $sequence	メッセージ 番号 の シーケンス
function bool imap clearflag full	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool imap clearflag full resource $imap_stream string $sequence string $flag int $options	メッセージ の フラグ を クリア する
function imap createmailbox $imap_stream	imap _open が 返す imap ストリーム
function imap createmailbox $mailbox	メールボックス 名
function bool imap createmailbox	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool imap createmailbox resource $imap_stream string $mailbox	新しい メールボックス を 作る
function imap delete $msg_number	メッセージ 番号
function imap delete $imap_stream	imap _open が 返す imap ストリーム
function imap delete $options	ft _uid を 指定 する と 、 引数 msg _number を uid として 処理 する こと を 関数 に 指示 でき ます
function bool imap delete	returns true
function bool imap delete resource $imap_stream int $msg_number int $options	現在 の メールボックス から 削除 する メッセージ に 印 を 付ける
function array imap errors	この 関数 は 、 最後 に imap _errors コール を 行っ て から 、 また は その ページ の 処理 を 開始 し て から 発生 し た 全て の imap エラーメッセージ の 配列 を 返し ます
function array imap errors	発生 し たすべ て の imap エラー を 返す
function imap expunge $imap_stream	imap _open が 返す imap ストリーム
function bool imap expunge	true を 返し ます
function bool imap expunge resource $imap_stream	削除用 に マーク さ れ たすべて の メッセージ を 削除 する
function imap fetchbody $msg_number	メッセージ 番号
function imap fetchbody $section	パート 番号
function imap fetchbody $imap_stream	imap _open が 返す imap ストリーム
function imap fetchbody $options	ビットマスク で あり 、 以下 の 組合 わせ と なり ます
function string imap fetchbody	指定 さ れ た メッセージ 本文 中 の 特定 の セクション を テキスト 文字 列 で 返し ます
function string imap fetchbody resource $imap_stream int $msg_number string $section int $options	メッセージ 本文 中 の 特定 の セクション を 取り出す
function imap fetchstructure $msg_number	メッセージ 番号
function imap fetchstructure $imap_stream	imap _open が 返す imap ストリーム
function imap fetchstructure $options	オプション の パラメータ で 、 ft _uid のみ が 指定 可能 です
function object imap fetchstructure	オブジェクト を 返し ます
function object imap fetchstructure resource $imap_stream int $msg_number int $options	特定 の メッセージ の 構造 を 読み込む
function imap gc $imap_stream	imap _open が 返す imap ストリーム
function imap gc $caches	破棄 し たい キャッシュ を 指定 し ます
function bool imap gc	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool imap gc resource $imap_stream int $caches	imap キャッシュ を クリア する
function imap get quota $imap_stream	imap _open が 返す imap ストリーム
function imap get quota $quota_root	quota _root は 、 通常 user
function array imap get quota	指定 し た メールボックス の limit と usage を キー と し た 整数 値 を 配列 として 返し ます
function array imap get quota resource $imap_stream string $quota_root	クオータレベル の 設定 、 メールボックス 毎 の 使用 状況 を 取得 する
function imap getacl $imap_stream	imap _open が 返す imap ストリーム
function imap getacl $mailbox	メールボックス 名
function array imap getacl	&quot ;folder &quot ; =& gt ; & quot ;acl &quot ; 形式 の 連想 配列 を 返し ます
function array imap getacl resource $imap_stream string $mailbox	与え られ た メールボックス の acl を 取得 する
function imap getsubscribed $ref	ref は 、 通常 は imap _open で 指定 し た サーバー 情報 です
function imap getsubscribed $imap_stream	imap _open が 返す imap ストリーム
function imap getsubscribed $pattern	検索 を 開始 する メールボックス の 階層 を 指定 し ます
function array imap getsubscribed	メールボックス 情報 を 有する オブジェクト の 配列 を 返し ます
function array imap getsubscribed resource $imap_stream string $ref string $pattern	購読 中 の 全 メールボックス の 一覧 を 取得 する
function imap headers $imap_stream	imap _open が 返す imap ストリーム
function array imap headers	ヘッダ 情報 で フォーマット さ れ た 文字 列 の 配列 を 返し ます
function array imap headers resource $imap_stream	メールボックス 内 の すべ て の メッセージ の ヘッダ を 返す
function string imap last error	現在 の ページ に 生じ た 直近 の imap エラーメッセージ の 全文 を 返し ます
function string imap last error	ページリクエスト 時 に 生じ た 直近 の imap エラー を 返す
function imap list $imap_stream	imap _open が 返す imap ストリーム
function imap list $ref	通常 、 ref は imap _open で 述べ られ て いる サーバー 定義 です
function imap list $pattern	検索 を 開始 する メールボックス の 階層 を 指定 し ます
function array imap list	メールボックス の 名前 を 含む 配列 を 返し ます
function array imap list resource $imap_stream string $ref string $pattern	メールボックス の リスト を 読み込む
function imap listscan $imap_stream	imap _open が 返す imap ストリーム
function imap listscan $ref	通常 、 ref は imap _open で 述べ られ て いる サーバー 定義 です
function imap listscan $content	検索 する 文字列
function imap listscan $pattern	検索 を 開始 する メールボックス の 階層 を 指定 し ます
function array imap listscan	content を テキスト に 持つ メールボックス の 名前 を 配列 で 返し ます
function array imap listscan resource $imap_stream string $ref string $pattern string $content	指定 し た テキスト に マッチ する メールボックス の 一覧 を 返す
function imap mail compose $body	本文 の 配列
function imap mail compose $envelope	ヘッダフィールド の 連想 配列
function string imap mail compose	mime メッセージ を 返し ます
function string imap mail compose array $envelope array $body	指定 し た エンベロープ および ボディセクション に 基づい て mime メッセージ を 作成 する
function imap mail copy $imap_stream	imap _open が 返す imap ストリーム
function imap mail copy $mailbox	メールボックス 名
function imap mail copy $options	options は ビットマスク で あり 、 以下 の 組み合わせ です
function imap mail copy $msglist	msglist は 、 & raquo ;& nbsp ;rfc 2 0 6 0 に 記述 さ れ た よう に ただ の メッセージ 番号 で は なく 、 範囲 を 示し ます
function bool imap mail copy	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool imap mail copy resource $imap_stream string $msglist string $mailbox int $options	指定 さ れ た メッセージ を メールボックス に コピー する
function imap mail move $imap_stream	imap _open が 返す imap ストリーム
function imap mail move $options	options は ビットマスク で あり 、 ひとつ の オプション を とり ます
function imap mail move $mailbox	メールボックス 名
function imap mail move $msglist	msglist は 、 & raquo ;& nbsp ;rfc 2 0 6 0 に 記述 さ れ た よう に ただ の メッセージ 番号 で は なく 、 範囲 を 示し ます
function bool imap mail move	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool imap mail move resource $imap_stream string $msglist string $mailbox int $options	指定 さ れ た メッセージ を メールボックス に 移動 する
function imap mail $to	受信 者
function imap mail $rpath	リターンパス を 指定 する ため に rpath パラメータ を 使用 し て くだ さい
function imap mail $bcc	bcc で 指定 し た 受信 者 は mail を 受信 し ます が 、 ヘッダ から は 除外 さ れ ます
function imap mail $message	メール の 本文
function imap mail $subject	メール の 件名
function imap mail $additional_headers	メール に 設定 する 追加 ヘッダ 文字列
function bool imap mail	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool imap mail string $to string $subject string $message string $additional_headers string $cc string $bcc string $rpath	e -mail メッセージ を 送信 する
function imap mailboxmsginfo $imap_stream	imap _open が 返す imap ストリーム
function object imap mailboxmsginfo	以下 の プロパティ を 有する オブジェクト を 返し ます
function object imap mailboxmsginfo resource $imap_stream	現在 の メールボックス に関する 情報 を 得る
function imap msgno $imap_stream	imap _open が 返す imap ストリーム
function imap msgno $uid	メッセージ の uid
function int imap msgno	指定 し た uid の メッセージ 番号 を 返し ます
function int imap msgno resource $imap_stream int $uid	指定 し た uid の メッセージ 番号 を 返す
function imap num msg $imap_stream	imap _open が 返す imap ストリーム
function int imap num msg	現在 の メールボックス の メッセージ 数 を 返し ます
function int imap num msg resource $imap_stream	現在 の メールボックス の メッセージ 数 を 取得 する
function imap num recent $imap_stream	imap _open が 返す imap ストリーム
function int imap num recent	現在 の メールボックス に ある 新しい メッセージ の 数 を 返し ます
function int imap num recent resource $imap_stream	現在 の メールボックス に ある 新規 メッセージ 数 を 取得 する
function imap open $mailbox	メールボックス 名 mailbox は 、 サーバー 名 の 部分 と 使用 する サーバー に おける メールボックス へ の パス から 構成 さ れ ます
function imap open $n_retries	接続 試行 の 最大 数
function imap open $password	username の パスワード
function imap open $params	接続 パラメータ
function imap open $options	options は ビットマスク で あり 、 以下 の 組み合わせ と なり ます
function imap open $username	ユーザー 名
function resource imap open	成功 し た 場合 は imap ストリーム を 、 失敗 し た 場合 は false を 返し ます
function resource imap open string $mailbox string $username string $password int $options int $n_retries array $params	メールボックス へ の imap ストリーム を オープン する
function imap ping $imap_stream	imap _open が 返す imap ストリーム
function bool imap ping	ストリーム が まだ 有効 で あれ ば true を 、 そう で なけれ ば false を 返し ます
function bool imap ping resource $imap_stream	imap ストリーム が アクティブ か どう か を 調べる
function imap qprint $string	quoted -printable 文字列
function string imap qprint	8 ビット 文字 列 を 返し ます
function string imap qprint string $string	quoted -printable 文字列 を 8 ビット 文字 列 に 変換 する
function imap rfc822 parse adrlist $default_host	デフォルト の ホスト 名
function imap rfc822 parse adrlist $address	アドレス を 含む 文字列
function array imap rfc822 parse adrlist	オブジェクト の 配列 を 返し ます
function array imap rfc822 parse adrlist string $address string $default_host	アドレス 文字 列 を 解釈 し ます
function imap rfc822 parse headers $headers	パース さ れ た ヘッダデータ
function imap rfc822 parse headers $defaulthost	デフォルト の ホスト 名
function object imap rfc822 parse headers	imap _header が 返す オブジェクト と 似た もの を 返し ます
function object imap rfc822 parse headers string $headers string $defaulthost	文字列 から メールヘッダ を 解釈 する
function imap savebody $msg_number	メッセージ 番号
function imap savebody $part_number	パート 番号
function imap savebody $imap_stream	imap _open が 返す imap ストリーム
function imap savebody $file	保存先 ファイル へ の パス を 表す 文字 列 、 あるい は fopen が 返す ファイル 記述子
function imap savebody $options	ビットマスク で あり 、 以下 の 組合 わせ と なり ます
function bool imap savebody	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool imap savebody resource $imap_stream mixed $file int $msg_number string $part_number int $options	指定 し た 本文部 を ファイル に 保存 する
function imap search $imap_stream	imap _open が 返す imap ストリーム
function imap search $charset	文字列 の 検索 の 際 に 使う mime 文字 セット
function imap search $criteria	空白 で 区切 られ た 文字列 で 、 以下 の キーワード が 使用 可能 です
function imap search $options	options に 指定 できる 値 は se _uid です
function array imap search	メッセージ 番号 あるい は uid の 配列 を 返し ます
function array imap search resource $imap_stream string $criteria int $options string $charset	指定 し た 検索 条件 に マッチ する メッセージ を 配列 として 返す
function imap setacl $id	権限 を 付与 する ユーザー
function imap setacl $imap_stream	imap _open が 返す imap ストリーム
function imap setacl $mailbox	メールボックス 名
function imap setacl $rights	その ユーザー に 付与 する 権限
function bool imap setacl	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool imap setacl resource $imap_stream string $mailbox string $id string $rights	指定 し た メールボックス の acl を 設定 する
function imap sort $imap_stream	imap _open が 返す imap ストリーム
function imap sort $reverse	これ を 1 に する と 、 逆順 に ソート し ます
function imap sort $options	options は ビットマスク で 、 以下 の 組み合わせ と なり ます
function imap sort $criteria	criteria は 、 次 のどれ か とし ます ひとつ のみ
function imap sort $charset	文字列 の 検索 の 際 に 使う mime 文字 セット
function imap sort $search_criteria	imap 2 フォーマット の 検索 条件 文字列
function array imap sort	指定 し た パラメータ で ソート し た メッセージ 番号 の 配列 を 返し ます
function array imap sort resource $imap_stream int $criteria int $reverse int $options string $search_criteria string $charset	メッセージヘッダ の 配列 を ソート する
function imap subscribe $imap_stream	imap _open が 返す imap ストリーム
function imap subscribe $mailbox	メールボックス 名
function bool imap subscribe	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool imap subscribe resource $imap_stream string $mailbox	メールボックス を 購読 する
function imap thread $imap_stream	imap _open が 返す imap ストリーム
function array imap thread	imap _thread は 、 references で スレッド 化 し た メッセージ の ツリー を 含む 連想 配列 を 返し ます
function array imap thread resource $imap_stream int $options	スレッド 化 し た メッセージ の ツリー を 返す
function imap unsubscribe $imap_stream	imap _open が 返す imap ストリーム
function imap unsubscribe $mailbox	メールボックス 名
function bool imap unsubscribe	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool imap unsubscribe resource $imap_stream string $mailbox	メールボックス の 購読 を やめる
function imap utf7 decode $text	修正版 utf - 7 エンコーディング の 文字列
function string imap utf7 decode	text と 同じ 内容 の 文字 を iso - 8 8 5 9 - 1 で エンコード し た 文字列 を 返し ます
function string imap utf7 decode string $text	修正版 utf - 7 エンコード さ れ た 文字列 を デコード する
function imap utf7 encode $data	iso - 8 8 5 9 - 1 文字列
function string imap utf7 encode	data を 修正 版 utf - 7 で エンコード し た 文字列 を 返し ます
function string imap utf7 encode string $data	iso - 8 8 5 9 - 1 文字列 を 修正 版 utf - 7 テキスト に 変換 する
function implode $pieces	連結 し たい 文字 列 の 配列
function implode $glue	デフォルト は 空文 字列 です
function string implode	すべて の 配列 要素 の 順序 を 変え ず に 、 各要 素間 に glue 文字列 を はさん で 1 つの 文字 列 に して 返し ます
function string implode string $glue array $pieces	配列 要素 を 文字列 により 連結 する
function import request variables $types	types パラメータ を 使用 する と 、 インポート する リクエスト 変数 の 種類 を 指定 可能 です
function import request variables $prefix	変数 名 の 接頭 辞 として 使用 さ れ 、 グローバルスコープ に インポート さ れる 全て の 変数 名 の 前 に 付加 さ れ ます
function bool import request variables	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool import request variables string $types string $prefix	get / post / cookie 変数 を グローバルスコープ に インポート する
function ingres close $link	接続 リンク id
function bool ingres close	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ingres close resource $link	ingres データベース 接続 を 閉じる
function ingres commit $link	接続 リンク id
function bool ingres commit	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ingres commit resource $link	トランザクション を コミット する
function ingres connect $database	データベース 名
function ingres connect $username	ingres の ユーザー 名
function ingres connect $options	ingres _connect の オプション オプション 名 型 説明 例 date _century _boundary integer 2 桁 で 指定 し た 年 を 、 今世紀 と 判断 する か 来世 紀 と 判断 する か の 閾値
function ingres connect $password	username の パスワード
function resource ingres connect	成功時 に ingres リンクリソース 、 失敗 し た 場合 に false を 返し ます
function resource ingres connect string $database string $username string $password array $options	ingres データベース へ の 接続 を オープン する
function ingres cursor $result	クエリ 結果 id
function string ingres cursor	アクティブ な カーソル の 名前 を 含む 文字 列 を 返し ます
function string ingres cursor resource $result	指定 し た 結果 リソース の カーソル 名 を 取得 する
function ingres errno $link	接続 リンク id
function int ingres errno	直近 の エラー 番号 を 整数 値 で 返し ます
function int ingres errno resource $link	直近 に 発生 し た ingres エラー 番号 を 取得 する
function ingres error $link	接続 リンク id
function string ingres error	直近 の エラー の 内容 を 文字列 で 返し ます
function string ingres error resource $link	直近 に 発生 し た エラー の エラーメッセージ を 取得 する
function ingres errsqlstate $link	接続 リンク id
function string ingres errsqlstate	直近 の sqlstate を 文字列 で 返し ます
function string ingres errsqlstate resource $link	直近 に 発生 し た sqlstate エラーコード を 取得 する
function ingres escape string $link	接続 リンク id
function ingres escape string $source_string	パース する 文字列
function string ingres escape string	エスケープ し た データ を 含む 文字 列 を 返し ます
function string ingres escape string resource $link string $source_string	クエリ で 使う ため に 特殊 文字 を エスケープ する
function ingres execute $result	クエリ 結果 id
function ingres execute $params	この クエリ で 使う パラメータ の 値 の 配列
function ingres execute $types	パラメータ に 渡し た 値 の 型 を 表す 文字列
function bool ingres execute	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ingres execute resource $result array $params string $types	プリペアドクエリ を 実行 する
function ingres fetch array $result	クエリ 結果 id
function ingres fetch array $result_type	result _type に は 、 数値 添字 の 場合 に ingres _num 、 連想 配列 の 場合 に ingres _assoc 、 両方 の 場合 に ingres _both デフォルト を 指定 可能 です
function array ingres fetch array	取得 し た レコード 行 に対応 する 配列 を 返し ます
function array ingres fetch array resource $result int $result_type	1 行分 の 結果 を 配列 に 取得 する
function ingres fetch assoc $result	クエリ 結果 id
function array ingres fetch assoc	取得 し た 行 に 対応 する 連想 配列 を 返し ます
function array ingres fetch assoc resource $result	1 行分 の 結果 を 連想 配列 に 取得 する
function ingres fetch object $link	クエリ 結果 id
function ingres fetch object $result_type	オプション の 引数 result _type は 定数 で あり 、 次 の 値 の どれ かと なり ます : ingres _assoc ingres _num ingres _both
function object ingres fetch object	取得 し た レコード 行 を オブジェクト として 返し ます
function object ingres fetch object resource $result int $result_type	1 行分 の 結果 を オブジェクト として 取得 する
function ingres fetch row $result	クエリ 結果 id
function array ingres fetch row	取得 し た レコード 行 を 有する 配列 を 返し ます
function array ingres fetch row resource $result	1 行分 の 結果 を 数値 添字 配列 として 取得 する
function ingres field length $result	クエリ 結果 id
function ingres field length $index	index は 、 長さ を 取得 し たい カラム の 番号 です
function int ingres field length	フィールド の 長さ を 返し ます
function int ingres field length resource $result int $index	フィールド 長 を 得る
function ingres field nullable $result	クエリ 結果 id
function ingres field nullable $index	index は 、 null が 設定 可能 か どう か を 取得 し たい フィールド です
function bool ingres field nullable	ingres _field _nullable は 、 フィールド に null が 設定 可能 な 場合 に true 、 設定 でき ない 場合 に false を 返し ます
function bool ingres field nullable resource $result int $index	フィールド に null 値 を 設定 可能 か どう か 調べる
function ingres field precision $result	クエリ 結果 id
function ingres field precision $index	index は 、 精度 を 取得 し たい フィールド です
function int ingres field precision	フィールド の 精度 を 返し ます
function int ingres field precision resource $result int $index	フィールド の 精度 を 得る
function ingres field scale $result	クエリ 結果 id
function ingres field scale $index	index は 、 スケール を 取得 し たい フィールド です
function int ingres field scale	フィールド の スケール を 返し ます
function int ingres field scale resource $result int $index	フィールド の スケール を 得る
function ingres field type $result	クエリ 結果 id
function ingres field type $index	index は 、 型 を 取得 し たい フィールド です
function string ingres field type	ingres _field _type は クエリ 結果 の フィールド 型 、 失敗 し た 場合 に false を 返し ます
function string ingres field type resource $result int $index	クエリ 結果 に おい て フィールド の 型 を 得る
function ingres next error $link	接続 リンク id
function bool ingres next error	ingres _next _error は 、 取得 できる エラー が まだ 残っ て いる 場合 に true を 返し ます
function bool ingres next error resource $link	次 の ingres エラー を 取得 する
function ingres num fields $result	クエリ 結果 id
function int ingres num fields	フィールド の 数 を 返し ます
function int ingres num fields resource $result	直近 の クエリ により 返さ れ た フィールド の 数 を 得る
function ingres num rows $result	クエリ 結果 id
function int ingres num rows	delete insert update クエリ の 場合 、 ingres _num _rows は 、 その クエリ により 作用 さ れ た 行 レコード の 数 を 返し ます
function int ingres num rows resource $result	クエリ が 変更 し たり 返し たり し た レコード の 数 を 取得 する
function ingres pconnect $database	データベース 名
function ingres pconnect $options	渡せる オプション の 一覧 は ingres _connect を 参照く ださい
function ingres pconnect $username	ingres の ユーザー 名
function ingres pconnect $password	username の パスワード
function resource ingres pconnect	成功 し た 際 に ingres リンクリソース 、 失敗 し た 場合 に false を 返し ます
function resource ingres pconnect string $database string $username string $password array $options	ingres データベース へ の 持続 的 接続 を オープン する
function ingres prepare $link	接続 リンク id
function ingres prepare $query	ingres の ドキュメント ingres sql reference guide を 参照く ださい に 書か れ た 正しい 形式 の sql クエリ
function mixed ingres prepare	ingres _prepare は クエリ の 結果 id を 返し ます
function mixed ingres prepare resource $link string $query	後 で 実行 する ため の クエリ を 準備 する
function ingres query $link	接続 リンク id
function ingres query $params	クエリ で 使用 する パラメータ の 値 の 配列
function ingres query $types	渡さ れ た パラメータ の 値 の 型 を 含む 文字列
function ingres query $query	有効 な sql クエリ ingres ドキュメント に ある ingres sql リファレンスガイド を 参照く ださい
function mixed ingres query	ingres _query は 、 成功 し た 場合 に クエリ 結果 id 、 それ 以外 の 場合 に false を 返し ます
function mixed ingres query resource $link string $query array $params string $types	ingres に sql クエリ を 送信 する
function ingres set environment $options	オプション 名 と その 値 の ペア の 配列
function ingres set environment $link	接続 リンク id
function bool ingres set environment	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ingres set environment resource $link array $options	環境 を 設定 し て 出力 オプション を 制御 する
function ini get all $details	詳細 な 設定 を 取得 する か 、 あるい は 各 設定 の 現在 の 値 のみ を 取得 する か
function ini get all $extension	オプション で 指定 する 拡張 モジュール 名
function array ini get all	ディレクティブ 名 を キー と する 連想 配列 を 返し ます
function array ini get all string $extension bool $details	すべて の 設定 オプション を 得る
function ini set $varname	全て の オプション が ini _set を 使用 し て 変更 する こと が 可能 なわけ で は あり ませ ん
function ini set $newvalue	オプション の 新しい 値
function string ini set	成功 し た 場合 に 元 の 値 、 失敗 し た 場合 に false を 返し ます
function string ini set string $varname string $newvalue	設定 オプション の 値 を 設定 する
function inotify add watch $inotify_instance	inotify _init が 返す リソース
function inotify add watch $mask	監視 する イベント
function inotify add watch $pathname	監視 対象 の ファイル あるい は ディレクトリ
function int inotify add watch	返り値 は 、( inotify インスタンス 内 で 一意 な 監視 記述子 です
function int inotify add watch resource $inotify_instance string $pathname int $mask	初期 化済 み の inotify インスタンス に 監視 対象 を 追加 する
function resource inotify init	ストリームリソース 、 あるい は エラー 時 に false を 返し ます
function resource inotify init	inotify インスタンス を 初期化 する
function inotify read $inotify_instance	inotify _init が 返す リソース
function array inotify read	inotify イベント の 配列 、 を 返し ます
function array inotify read resource $inotify_instance	inotify インスタンス から イベント を 読み込む
function interface exists $autoload	デフォルト で _ _ autoload を コール する かどう か
function interface exists $interface_name	インターフェイス 名
function bool interface exists	interface _name で 与え られ た インターフェイス が 宣言 さ れ て いれ ば true を 返し ます
function bool interface exists string $interface_name bool $autoload	インターフェイス が 宣言 さ れ て いる かど う か を 確認 する
function intl error name $error_code	icu の エラーコード
function string intl error name	エラーコード 定数 と 同じ 名前 の 文字列 を 返し ます
function string intl error name int $error_code	指定 し た エラーコード に 対応 する 名前 を 取得 する
function int intl get error code	直近 の api 関数 の コール が 返す エラーコード を 返し ます
function int intl get error code	直近 の エラーコード を 取得 する
function string intl get error message	直近 の api 関数 の コール で 発生 し た エラー の 説明 を 返し ます
function string intl get error message	直近 の エラー の 説明 を 取得 する
function intval $base	変換 の ため の 基数 注意 : base が 0 の 場合 は 、 var の フォーマット に 基づい て 利用 する 基数 を 決め ます
function intval $var	整数 に 変換 する スカラー 値
function int intval	成功 時 は var の 整数 値 、 失敗 時 は 0
function int intval mixed $var int $base	変数 の 整数 として の 値 を 取得 する
function ip2long $ip_address	標準 形式 の アドレス
function int ip2long	長整 数値 、 あるい は ip _address が 不正 な 形式 の 場合 に false を 返し ます
function int ip2long string $ip_address	ドット 表記 の ipv 4 ip アドレス を 、 長整 数 表現 に 変換 する
function is array $var	評価 する 変数
function bool is array	var が 配列型 の 場合 true 、 そう で ない 場合 false を 返し ます
function bool is array mixed $var	変数 が 配列 か どう か を 検査 する
function is bool $var	評価 する 変数
function bool is bool	var が boolean で ある 場合 に true 、 それ 以外 の 場合 に false を 返し ます
function bool is bool mixed $var	変数 が boolean で ある か を 調べる
function is callable $var	チェック する 値
function is callable $syntax_only	true の 場合 、 この 関数 は 単 に name が 関数 また は メソッド で ある かど う か だけ を 調べ ます
function is callable $callable_name	&quot ; 呼び出し名 &quot ; を 受け取り ます
function bool is callable	var が コール 可能 な 場合 に true 、 それ 以外 の 場合 に false を 返し ます
function bool is callable mixed $var bool $syntax_only string $callable_name	引数 が 、 関数 として コール 可能 な 構造 で ある かど う か を 調べる
function is dir $filename	ファイル へ の パス
function bool is dir	ファイル が 存在 し て 、 かつ それ が ディレクトリ で あれ ば true 、 それ 以外 の 場合 は false を 返し ます
function bool is dir string $filename	ファイル が ディレクトリ か どう か を 調べる
function is executable $filename	ファイル へ の パス
function bool is executable	ファイル が 存在 し 、 かつ それ が 実行 可能 な 場合 に true 、 エラー 時 に false を 返し ます
function bool is executable string $filename	ファイル が 実行 可能 か どう か を 調べる
function is file $filename	ファイル へ の パス
function bool is file	ファイル が 存在 し 、 かつ それ が 通常 の ファイル で ある 場合 に true 、 それ 以外 の 場合 に false を 返し ます
function bool is file string $filename	通常 ファイル か どう か を 調べる
function is infinite $val	調べる 値
function bool is infinite	val が 無限 大 で ある 場合 に true 、 そう で ない 場合 に false を 返し ます
function bool is infinite float $val	値 が 無限 大 で ある かど う か を 判定 する
function is nan $val	調べる 値
function bool is nan	val が & # 0 3 9 ; 非数 値 not a number & # 0 3 9 ; の 場合 に true 、 そう で ない 場合 に false を 返し ます
function bool is nan float $val	値 が 数値 で ない か どう か を 判定 する
function is object $var	評価 する 変数
function bool is object	もし var が object 型 の 場合 true 、 そう で ない 場合 は false を 返し ます
function bool is object mixed $var	変数 が オブジェクト か どう か を 検査 する
function is readable $filename	ファイル へ の パス
function bool is readable	filename で 指定 し た ファイル あるい は ディレクトリ が 存在 し 、 それが 読み込み 可能 で あれ ば true 、 それ 以外 の 場合 に false を 返し ます
function bool is readable string $filename	ファイル が 存在 し 、 読み込み 可能 で ある かど う か を 知る
function is resource $var	評価 する 変数
function bool is resource	var が resource の 場合 に true 、 それ 以外 の 場合 に false を 返し ます
function bool is resource mixed $var	変数 が リソース か どう か を 調べる
function is soap fault $object	検査 する オブジェクト
function bool is soap fault	エラー 時 に true 、 それ 以外 の 場合 に false を 返し ます
function bool is soap fault mixed $object	soap コール が 失敗 し た かどう か を 調べる
function is string $var	評価 する 変数
function bool is string	var の 型 が string で ある 場合 に true 、 それ 以外 の 場合 に false を 返し ます
function bool is string mixed $var	変数 の 型 が 文字 列 か どう か を 調べる
function is writable $filename	調べ たい ファイル 名
function bool is writable	filename が 存在 し て 書き込み 可能 な 場合 に true を 返し ます
function bool is writable string $filename	ファイル が 書き込み 可能 か どう か を 調べる
function isset	別 の 変数
function isset $var	調べ たい 変数
function bool isset	var が 存在 し て null 以外 の 値 を とれ ば true 、 そう で なけれ ば false を 返し ます
function bool isset mixed $var	変数 が セット さ れ て いる こと 、 そして null で ない こと を 検査 する
function iterator apply $function	すべて の 要素 に対し て コール し たい コールバック 関数
function iterator apply $iterator	順次 処理 し たい クラス
function iterator apply $args	コールバック 関数 に 渡す 引数
function int iterator apply	イテレータ の 要素 数 を 返し ます
function int iterator apply Traversable $iterator callable $function array $args	ユーザー 関数 を イテレータ の すべ て の 要素 で コール する
function iterator count $iterator	カウント し たい イテレータ
function int iterator count	iterator の 要素 数 を 返し ます
function int iterator count Traversable $iterator	イテレータ に ある 要素 を カウント する
function iterator to array $use_keys	イテレータ の 要素 の キー を インデックス として 使用 する かどう か
function iterator to array $iterator	コピー し たい イテレータ
function array iterator to array	iterator の 要素 を 含む 配列 を 返し ます
function array iterator to array Traversable $iterator bool $use_keys	イテレータ を 配列 に コピー する
function jddayofweek $mode	暦 の 曜日 モード モード 意味 0 デフォルト 整数 で 曜日 番号 0 = sunday 1 = monday 等 を 返し ます
function jddayofweek $julianday	ユリウス 積算 日 を 表す 整数 値
function mixed jddayofweek	グレゴリウス 暦 の 曜日 を 表す 数値 あるい は 文字列 を 返し ます
function mixed jddayofweek int $julianday int $mode	曜日 を 返す
function jdtofrench $julianday	ユリウス 積算 日 を 表す 整数 値
function string jdtofrench	フランス 革命 暦 の 日付 を & quot ;月 / 日 / 年 &quot ; 形式 の 文字 列 で 返し ます
function string jdtofrench int $juliandaycount	ユリウス 積算 日 を フランス 革命 暦 共和暦 に 変換 する
function jdtogregorian $julianday	ユリウス 積算 日 を 表す 整数 値
function string jdtogregorian	グレゴリウス 暦 の 日付 を & quot ;月 / 日 / 年 &quot ; 形式 の 文字 列 で 返し ます
function string jdtogregorian int $julianday	ユリウス 積算 日 を グレゴリウス 日 に 変換 する
function jdtojewish $hebrew	パラメータ hebrew が true に 設定 さ れ て いる 場合 、 ヘブライ 語 の 文字 列形 式 で の 出力 の ため に fl が 使用 さ れ ます
function jdtojewish $fl	使用 可能 な フォーマット は cal _jewish _add _alafim _geresh 、 cal _jewish _add _alafim および cal _jewish _add _gereshayim です
function jdtojewish $julianday	ユリウス 積算 日 を 表す 整数 値
function string jdtojewish	ユダヤ 暦 の 日付 を & quot ;月 / 日 / 年 &quot ; 形式 の 文字 列 で 返し ます
function string jdtojewish int $juliandaycount bool $hebrew int $fl	ユリウス 積算 日 を ユダヤ 暦 に 変換 する
function jdtojulian $julianday	ユリウス 積算 日 を 表す 整数 値
function string jdtojulian	ユリウス 暦 の 日付 を & quot ;月 / 日 / 年 &quot ; 形式 の 文字 列 で 返し ます
function string jdtojulian int $julianday	ユリウス 積算 日 を ユリウス 暦 に 変換 する
function jdtounix $jday	2 4 4 0 5 8 8 から 2 4 6 5 3 4 2 まで の ユリウス 積算 日
function int jdtounix	指定 し た ユリウス 積算 日 の 開始 時 の unix タイムスタンプ を 返し ます
function int jdtounix int $jday	ユリウス 歴 を unix タイムスタンプ に 変換 する
function jpeg2wbmp $wbmpname	変換後 の wbmp ファイル へ の パス
function jpeg2wbmp $dest_height	変換後 の 画像 の 高さ
function jpeg2wbmp $dest_width	変換後 の 画像 の 幅
function jpeg2wbmp $jpegname	jpeg ファイル へ の パス
function jpeg2wbmp $threshold	閾値
function bool jpeg2wbmp	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool jpeg2wbmp string $jpegname string $wbmpname int $dest_height int $dest_width int $threshold	jpeg イメージファイル から wbmp イメージファイル に 変換 する
function json decode $options	json デコードオプション の ビットマスク です
function json decode $json	デコード 対象 と なる json 文字列
function json decode $assoc	true の 場合 、 返さ れる オブジェクト は 連想 配列 形式 に なり ます
function json decode $depth	ユーザー 指定 の 再帰 の 深さ
function mixed json decode	json で エンコード さ れ た データ を 、 適切 な php の 型 として 返し ます
function mixed json decode string $json bool $assoc int $depth int $options	json 文字列 を デコード する
function json encode $options	json _hex _quot json _hex _tag json _hex _amp json _hex _apos json _numeric _check json _pretty _print json _unescaped _slashes json _force _object json _preserve _zero _fraction json _unescaped _unicode json _partial _output _on _error から なる ビットマスク
function json encode $depth	最大 の 深さ を 設定 し ます
function json encode $value	エンコード する 値
function string json encode	成功 し た 場合 に 、 json エンコード さ れ た 文字列 を 返し ます
function string json encode mixed $value int $options int $depth	値 を json 形式 に して 返す
function juliantojd $year	年 を 表す 、- 4 7 1 3 から 9 9 9 9 まで の 数値
function juliantojd $month	月 を 表す 、 1 for january から 1 2 for december まで の 数値
function juliantojd $day	日 を 表す 、 1 から 3 1 まで の 数値
function int juliantojd	指定 し た ユリウス 暦 の 日付 に 対応 する ユリウス 積算 日 を 返し ます
function int juliantojd int $month int $day int $year	ユリウス 暦 を ユリウス 積算 日 に 変換 する
function kadm5 chpass principal $principal	プリンシパル
function kadm5 chpass principal $password	新しい パスワード
function kadm5 chpass principal $handle	kadm 5 ハンドル
function bool kadm5 chpass principal	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool kadm5 chpass principal resource $handle string $principal string $password	プリンシパル の パスワード を 変更 する
function kadm5 delete principal $handle	kadm 5 ハンドル
function kadm5 delete principal $principal	削除 する プリンシパル
function bool kadm5 delete principal	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool kadm5 delete principal resource $handle string $principal	kerberos プリンシパル を 削除 する
function kadm5 flush $handle	kadm 5 ハンドル
function bool kadm5 flush	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool kadm5 flush resource $handle	kerberos データベース に対する すべ て の 変更 を 取り消す
function kadm5 get policies $handle	kadm 5 ハンドル
function array kadm5 get policies	成功 し た 場合 は ポリシー の 配列 、 失敗 し た 場合 に false を 返し ます
function array kadm5 get policies resource $handle	kerberos データベース から 、 すべて の ポリシー を 取得 する
function kadm5 get principals $handle	kadm 5 ハンドル
function array kadm5 get principals	成功 し た 場合 は プリンシパル の 配列 、 失敗 し た 場合 に false を 返し ます
function array kadm5 get principals resource $handle	kerberos データベース から 、 すべて の プリンシパル を 取得 する
function kadm5 init with password $admin_server	サーバー
function kadm5 init with password $principal	プリンシパル
function kadm5 init with password $password	password を 省略 し たり null を 指定 し たり する と 、 ランダム な キー を 生成 し ます
function kadm5 init with password $realm	この 接続 の 認証 領域 を 定義 し ます
function resource kadm5 init with password	成功 し た 場合 は kadm 5 ハンドル 、 失敗 し た 場合 に false を 返し ます
function resource kadm5 init with password string $admin_server string $realm string $principal string $password	kadm 5 ライブラリ へ の 接続 を オープン し 、 必要 な ステータス 情報 を 初期化 する
function kadm5 modify principal $principal	プリンシパル
function kadm5 modify principal $handle	kadm 5 ハンドル
function kadm5 modify principal $options	オプション の パラメータ を 、 配列 options で 指定 する こと が でき ます
function bool kadm5 modify principal	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool kadm5 modify principal resource $handle string $principal array $options	kerberos プリンシパル を 、 指定 し た パラメータ で 変更 する
function key $array	配列
function mixed key	key 関数 は 、 内部 ポインタ が 現在指 し て いる 配列 要素 の キー を 返し ます
function mixed key array $array	配列 から キー を 取り出す
function krsort $array	入力 の 配列
function krsort $sort_flags	オプション の パラメータ sort _flags により ソート の 動作 を 修正 可能 です
function bool krsort	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool krsort array $array int $sort_flags	配列 を キー で 逆順 に ソート する
function ksort $array	入力 の 配列
function ksort $sort_flags	オプション の パラメータ sort _flags により ソート の 動作 を 修正 可能 です
function bool ksort	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ksort array $array int $sort_flags	配列 を キー で ソート する
function lcfirst $str	入力 文字列
function string lcfirst	変換後 の 文字列 を 返し ます
function string lcfirst string $str	文字列 の 最初 の 文字 を 小文字 に する
function float lcg value	( 0 1 の 範囲 の 疑似 乱数 を 、 浮動 小数 点数 で 返し ます
function float lcg value	複合線 形合 同法
function lchgrp $group	グループ 名 あるい は グループ 番号
function lchgrp $filename	シンボリックリンク へ の パス
function bool lchgrp	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool lchgrp string $filename mixed $group	シンボリックリンク の グループ 所有 権 を 変更 する
function lchown $user	ユーザー 名 あるい は ユーザー 番号
function lchown $filename	ファイル へ の パス
function bool lchown	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool lchown string $filename mixed $user	シンボリックリンク の 所有 者 を 変更 する
function ldap add $link_identifier	ldap _connect が 返す ldap リンク id
function ldap add $entry	その エントリ に関する 情報 を 表す 配列
function ldap add $dn	ldap エンティティ の 識別 名
function bool ldap add	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ldap add resource $link_identifier string $dn array $entry	ldap ディレクトリ に エントリ を 付加 する
function ldap bind $link_identifier	ldap _connect が 返す ldap リンク id
function bool ldap bind	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ldap bind resource $link_identifier string $bind_rdn string $bind_password	ldap ディレクトリ に バインド する
function ldap control paged result response $cookie	サーバー から 送 られる opaque structure
function ldap control paged result response $link	ldap _connect が 返す ldap リンク id
function ldap control paged result response $estimated	取得 する エントリ 数 の 予測
function bool ldap control paged result response	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ldap control paged result response resource $link resource $result string $cookie int $estimated	ldap ページネーションクッキー を 取得 する
function ldap count entries $link_identifier	ldap _connect が 返す ldap リンク id
function ldap count entries $result_identifier	内部 の ldap 結果
function int ldap count entries	結果 の エントリ 数 を 返し ます
function int ldap count entries resource $link_identifier resource $result_identifier	検索 結果 の エントリ 数 を 数える
function ldap dn2ufn $dn	ldap エンティティ の 識別 名
function string ldap dn2ufn	ユーザー に わかり やすい 形式 の 名前 を 返し ます
function string ldap dn2ufn string $dn	dn を ユーザー に 分かり やすい 名前 の フォーマット に 変換 する
function ldap err2str $errno	エラー 番号
function string ldap err2str	エラーメッセージ を 表す 文字 列 を 返し ます
function string ldap err2str int $errno	ldap の エラー 番号 を エラーメッセージ 文字 列 に 変換 する
function ldap errno $link_identifier	ldap _connect が 返す ldap リンク id
function int ldap errno	この リンク に関する 直近 の ldap コマンド の ldap エラー 番号 を 返し ます
function int ldap errno resource $link_identifier	直近 の ldap コマンド の ldap エラー 番号 を 返す
function ldap error $link_identifier	ldap _connect が 返す ldap リンク id
function string ldap error	エラーメッセージ 文字 列 を 返し ます
function string ldap error resource $link_identifier	直近 の ldap コマンド の ldap エラーメッセージ を 返す
function ldap explode dn $dn	ldap エンティティ の 識別 名
function ldap explode dn $with_attrib	rdn が 値 のみ を 返す の か 、 あるい は 、 属性 を 同時 に 返す の か を 指定 する ため に 使用 し ます
function array ldap explode dn	すべて の dn 要素 を 配列 で 返し ます
function array ldap explode dn string $dn int $with_attrib	dn を 構成 要素 ごと に 分割 する
function ldap first entry $link_identifier	ldap _connect が 返す ldap リンク id
function resource ldap first entry	成功 時 に 最初 の エントリ に関する 結果 エントリ id 、 エラー の 場合 に false を 返し ます
function resource ldap first entry resource $link_identifier resource $result_identifier	最初 の 結果 id を 返す
function bool ldap free result	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ldap free result resource $result_identifier	結果 メモリ を 開放 する
function ldap get entries $link_identifier	ldap _connect が 返す ldap リンク id
function array ldap get entries	成功 時 に 完全 な 結果 情報 を 多次 元 配列 で 返し ます
function array ldap get entries resource $link_identifier resource $result_identifier	全て の 結果 エントリ を 得る
function ldap get values len $link_identifier	ldap _connect が 返す ldap リンク id
function array ldap get values len	成功 時 に 属性 の 値 を 配列 で 返し 、 エラー 時 に false を 返し ます
function array ldap get values len resource $link_identifier resource $result_entry_identifier string $attribute	結果 エントリ から 全 て の バイナリ 値 を 得る
function ldap get values $link_identifier	ldap _connect が 返す ldap リンク id
function array ldap get values	成功 し た 場合 、 指定 し た 属性 に関する 値 を 配列 を 返し ます
function array ldap get values resource $link_identifier resource $result_entry_identifier string $attribute	結果 エントリ から 全 て の 値 を 得る
function ldap mod add $link_identifier	ldap _connect が 返す ldap リンク id
function ldap mod add $dn	ldap エンティティ の 識別 名
function bool ldap mod add	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ldap mod add resource $link_identifier string $dn array $entry	現在 の 属性 に 属性 を 追加 する
function ldap mod del $link_identifier	ldap _connect が 返す ldap リンク id
function ldap mod del $dn	ldap エンティティ の 識別 名
function bool ldap mod del	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ldap mod del resource $link_identifier string $dn array $entry	現在 の 属性 から 属性 を 削除 する
function ldap mod replace $link_identifier	ldap _connect が 返す ldap リンク id
function ldap mod replace $dn	ldap エンティティ の 識別 名
function bool ldap mod replace	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ldap mod replace resource $link_identifier string $dn array $entry	属性 を 新規 の 値 に 置換 する
function ldap modify $link_identifier	ldap _connect が 返す ldap リンク id
function ldap modify $dn	ldap エンティティ の 識別 名
function bool ldap modify	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ldap modify resource $link_identifier string $dn array $entry	ldap エントリ を 修正 する
function ldap next attribute $ber_identifier	ポインタ の 内部 状態 を 、 この パラメータ で 管理 し ます
function ldap next attribute $link_identifier	ldap _connect が 返す ldap リンク id
function string ldap next attribute	成功 し た 場合 、 エントリ に おける 次 の 属性 を 返し ます
function string ldap next attribute resource $link_identifier resource $result_entry_identifier	結果 に おける 次 の 属性 を 得る
function ldap next entry $link_identifier	ldap _connect が 返す ldap リンク id
function resource ldap next entry	ldap _first _entry により エントリ が 読み 始め られ た 結果 に おい て 次 の エントリ に関する エントリid を 返し ます
function resource ldap next entry resource $link_identifier resource $result_entry_identifier	次 の 結果 エントリ を 得る
function ldap parse result $result_identifier	ldap _list あるい は ldap _search が 返す ldap 結果 リソース
function ldap parse result $matcheddn	リクエスト 内 に マッチ する dn が あっ た 場合 に 、 それ を 格納 する 変数 へ の 参照
function ldap parse result $referrals	結果 に 含ま れる すべ て の 照会 文字 列 の 配列 を 格納 する 変数 へ の 参照
function ldap parse result $link	ldap _connect が 返す ldap リンク id
function ldap parse result $errcode	結果 に 含ま れる ldap エラーコード を 格納 する 変数 へ の 参照
function ldap parse result $errmsg	結果 に 含ま れる ldap エラーメッセージ を 格納 する 変数 へ の 参照
function bool ldap parse result	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ldap parse result resource $link resource $result int $errcode string $matcheddn string $errmsg array $referrals	結果 から 情報 を 展開 する
function ldap rename $link_identifier	ldap _connect が 返す ldap リンク id
function ldap rename $newparent	新しい 親 エントリ
function ldap rename $newrdn	新しい rdn
function ldap rename $deleteoldrdn	true の 場合 は 古い rdn 値 を 削除 し ます
function ldap rename $dn	ldap エンティティ の 識別 名
function bool ldap rename	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ldap rename resource $link_identifier string $dn string $newrdn string $newparent bool $deleteoldrdn	エントリ 名 を 修正 する
function ldap sort $sortfilter	ソート の キー として 使う 属性
function ldap sort $link	ldap _connect が 返す ldap リンク id
function ldap sort $result	ldap _search が 返す 検索 結果 id
function bool ldap sort resource $link resource $result string $sortfilter	ldap 結果 エントリ を ソート する
function void libxml clear errors	libxml エラーハンドラ を クリア する
function LibXMLError libxml get last error	エラー が バッファ に ある 場合 に libxmlerror オブジェクト 、 それ 以外 の 場合 に false を 返し ます
function LibXMLError libxml get last error	libxml から 直近 の エラー を 取得 する
function libxml set external entity loader $resolver_function	三つ の 引数 を とる callable
function void libxml set external entity loader callable $resolver_function	デフォルト の 外部 エンティティローダー を 変更 する
function libxml set streams context $streams_context	ストリームコンテキストリソース stream _context _create で 作成
function void libxml set streams context resource $streams_context	次 の libxml ドキュメント の 読込 ／ 書き こみ の ため に ストリームコンテキスト を 設定 する
function libxml use internal errors $use_errors	ユーザー による エラー 処理 を 有効 true また は 無効 false にする
function bool libxml use internal errors	この 関数 は 、 use _errors の 前 の 値 を 返し ます
function bool libxml use internal errors bool $use_errors	libxml エラー を 無効 に し 、 ユーザー が 必要 に 応じ て エラー 情報 を 取得 できる よう に する
function link $target	リンク の 対象
function link $link	リンク の 名前
function bool link	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool link string $target string $link	ハードリンク を 作成 する
function linkinfo $path	リンク へ の パス
function int linkinfo	linkinfo は 、 lstat システムコール で 返さ れ た unix c 言語 の stat 構造体 の st _dev フィールド を 返し ます
function int linkinfo string $path	リンク に関する 情報 を 取得 する
function array localeconv	localeconv は 、 setlocale で 設定 さ れ た 現在 の ロケール に 基づき データ を 返し ます
function array localeconv	数値 に関する フォーマット 情報 を 得る
function log10 $arg	処理 する 引数
function float log10	底 を 1 0 と する arg の 対数 を 返し ます
function float log10 float $arg	底 が 1 0 の 対数
function log1p $number	処理 する 引数
function float log1p	log 1 + number を 返し ます
function float log1p float $number	値 が ゼロ に 近い 時 に でも 精度 を 保つ 方法 で 計算 し た log 1 + number を 返す
function lstat $filename	ファイル あるい は シンボリックリンク へ の パス
function array lstat	lstat が 返す 配列 の 内容 について は stat の マニュアル を ご覧く ださい
function array lstat string $filename	ファイル あるい は シンボリックリンク の 情報 を 取得 する
function ltrim $str	入力 文字列
function ltrim $character_mask	character _mask パラメータ により 、 削除 する 文字 を 指定 する こと も 可能 です
function string ltrim	この 関数 は 文字列 の 最初 から 空白 文字 を 取り除き 、 取り除か れ た 文字列 を 返し ます
function string ltrim string $str string $character_mask	文字列 の 最初 から 空白 もしく は その 他 の 文字 を 取り除く
function lzf compress $data	圧縮 する データ
function string lzf compress	圧縮 さ れ た データ を 返し ます
function string lzf compress string $data	lzf 圧縮 を 行う
function lzf decompress $data	圧縮 さ れ た データ
function string lzf decompress	伸長 し た データ を 返し ます
function string lzf decompress string $data	lzf 圧縮 を 伸長 する
function int lzf optimized for	lzf が 速度 に 最適 化 さ れ て いる 場合 に 1 、 圧縮 率 に 最適 化 さ れ て いる 場合 に 0 を 返し ます
function int lzf optimized for	lzf 拡張 モジュール の 最適 化 指定 を 取得 する
function mail $subject	送信 する メール の 表題
function mail $additional_parameters（オプション）	パラメータ additional _parameters は 、 追加 の フラグ を コマンドラインオプション として メール 送信 プログラム に 渡す際 に 使用 可能 です
function mail $to	メール の 受信 者
function mail $additional_headers（オプション）	メールヘッダ の 最後 に 挿入 さ れる 文字列
function mail $message	送信 する メッセージ
function bool mail	メール 送信 が 受け 入れ られ た 場合 に true 、 それ 以外 の 場合 に false を 返し ます
function bool mail string $to string $subject string $message string $additional_headers string $additional_parameters	メール を 送信 する
function mailparse msg extract part file $mimemail	mailparse _msg _create で 作成 し た mime リソース
function mailparse msg extract part file $filename	ファイル 名 あるい は 有効 な ストリームリソース
function mailparse msg extract part file $callbackfunc	展開 さ れ た セクション に 渡さ れる コールバック 関数 、 あるい は null を 指定 する と 、 この 関数 は 展開 し た セクション を 返し ます
function string mailparse msg extract part file	callbackfunc が null で ない 場合 は 、 成功時 に true を 返し ます
function string mailparse msg extract part file resource $mimemail mixed $filename callable $callbackfunc	メッセージセクション を 展開 / デコード する
function mailparse msg parse file $filename	メッセージ を 保持 する ファイル へ の パス
function resource mailparse msg parse file	構造 を 表す mime リソース 、 あるい は エラー 時 に false を 返し ます
function resource mailparse msg parse file string $filename	ファイル を パース する
function mailparse msg parse $mimemail	有効 な mime リソース
function bool mailparse msg parse	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool mailparse msg parse resource $mimemail string $data	データ を パース し 、 バッファ に 追加 する
function mailparse stream encode $sourcefp	有効 な ファイルハンドル
function mailparse stream encode $destfp	エンコード し た データ を 書き込む ファイルハンドル
function mailparse stream encode $encoding	mbstring モジュール が サポート する 文字 エンコーディング のい ずれ か
function bool mailparse stream encode	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool mailparse stream encode resource $sourcefp resource $destfp string $encoding	ソースファイルポインタ から ストリームデータ を 取得 し 、 エンコーディング を 適用 し 、 出力 ファイルポインタ に 書き込む
function mailparse uudecode all $fp	有効 な ファイルポインタ
function array mailparse uudecode all	ファイル 名 の 情報 を 含む 連想 配列 の 配列 を 返し ます
function array mailparse uudecode all resource $fp	ファイルポインタ から データ を スキャン し 、 uuencode さ れ た ファイル を 展開 する
function max $value2	任意 の 比較 可能 な 値
function max	任意 の 比較 可能 な 値
function max $values	値 を 含む 配列
function max $value1	任意 の 比較 可能 な 値
function mixed max	max は 、 パラメータ として 渡し た 値 の 中 で 、 標準 の 比較 ルール に 従っ て 最大 に なる もの を 返し ます
function mixed max array $values	最大値 を 返す
function int maxdb connect errno	直近 の maxdb _connect の コール の エラーコード を 返し ます
function int maxdb connect errno	直近 の 接続 コール の エラーコード を 返す
function void maxdb debug string $debug	デバッグ 操作 を 行う
function string maxdb get client info	maxdb クライアントライブラリ の バージョン を 表す 文字 列 を 返し ます
function string maxdb get client info	maxdb クライアント の バージョン を 文字列 で 返す
function int maxdb get client version	maxdb クライアントライブラリ の バージョン を 表す 数値 を 、 以下 の フォーマット で 返し ます
function int maxdb get client version	maxdb クライアント の 情報 を 取得 する
function bool maxdb next result	false を 返し ます
function bool maxdb next result resource $link	multi _query の 、 次 の 結果 を 準備 する
function string maxdb stmt sqlstate	直近 の エラー について の sqlstate エラーコード を 含む 文字 列 を 返し ます
function string maxdb stmt sqlstate resource $stmt	事前 の ステートメント の 捜査 から の sqlstate エラー を 返す
function bool maxdb thread safe	クライアントライブラリ が スレッドセーフ で ある 場合 に true 、 それ 以外 の 場合 に false を 返し ます
function bool maxdb thread safe	スレッドセーフ で ある かど う か を 返す
function mb check encoding $var	調べる バイトストリーム
function mb check encoding $encoding	期待 する エンコーディング
function bool mb check encoding	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool mb check encoding string $var string $encoding	文字列 が 、 指定 し た エンコーディング で 有効 なもの かど う か を 調べる
function mb convert case $encoding	encoding パラメータ に は 文字 エンコーディング を 指定 し ます
function mb convert case $str	変換 さ れる 文字列
function mb convert case $mode	変換 モード
function string mb convert case	mode で 指定 さ れ た 方法 で string に対し て ケースフォルディング を 行っ た 結果 を 返し ます
function string mb convert case string $str int $mode string $encoding	文字列 に対し て ケースフォルディング を 行う
function mb convert encoding $from_encoding	変換 前 の 文字 エンコーディング 名 を 指定 し ます
function mb convert encoding $str	変換 する 文字列
function mb convert encoding $to_encoding	str の 変換 後 の 文字 エンコーディング
function string mb convert encoding	変換後 の 文字列 を 返し ます
function string mb convert encoding string $str string $to_encoding mixed $from_encoding	文字 エンコーディング を 変換 する
function mb convert kana $option	変換 オプション
function mb convert kana $encoding	encoding パラメータ に は 文字 エンコーディング を 指定 し ます
function mb convert kana $str	変換 さ れる 文字列
function string mb convert kana	変換後 の 文字列 を 返し ます
function string mb convert kana string $str string $option string $encoding	カナ を & quot ; 全角 か な &quot ;、 & quot ; 半角 か な &quot ; 等 に 変換 する
function mb decode mimeheader $str	デコード する 文字列
function string mb decode mimeheader	内部 文字 エンコーディング で デコード さ れ た 文字列 を 返し ます
function string mb decode mimeheader string $str	mime ヘッダフィールド の 文字列 を デコード する
function mb decode numericentity $encoding	encoding パラメータ に は 文字 エンコーディング を 指定 し ます
function mb decode numericentity $convmap	convmap は 変換 する コード 領域 を 指定 する 配列 です
function mb decode numericentity $str	デコード する 文字列
function string mb decode numericentity	変換 さ れ た 文字列 を 返し ます
function string mb decode numericentity string $str array $convmap string $encoding	html 数値 エンティティ を 文字 に デコード する
function mb detect order $encoding_list	encoding _list は 、 配列 また は カンマ 区切り の 文字 エンコーディング の リスト です
function mixed mb detect order	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function mixed mb detect order mixed $encoding_list	文字 エンコーディング 検出 順序 を 設定 あるい は 取得 する
function mb encode numericentity $convmap	convmap は 、 変換 する コード 領域 を 指定 する 配列 です
function mb encode numericentity $encoding	encoding パラメータ に は 文字 エンコーディング を 指定 し ます
function mb encode numericentity $str	エンコード する 文字列
function string mb encode numericentity	変換後 の 文字列 を 返し ます
function string mb encode numericentity string $str array $convmap string $encoding bool $is_hex	文字 を html 数値 エンティティ に エンコード する
function mb ereg match $pattern	正規 表現 パターン
function mb ereg match $string	評価 する 文字列
function bool mb ereg match string $pattern string $string string $option	マルチバイト 文字 列 が 正規 表現 に 一致 する か 調べる
function mb ereg search pos $pattern	検索 パターン
function mb ereg search pos $option	検索 オプション
function array mb ereg search pos string $pattern string $option	指定 し た マルチバイト 文字 列 が 正規 表現 に 一致 する 部分 の 位置 と 長さ を 返す
function mb ereg search regs $pattern	検索 パターン
function mb ereg search regs $option	検索 オプション
function array mb ereg search regs string $pattern string $option	指定 し た マルチバイト 文字 列 が 正規 表現 に 一致 する 部分 を 取得 する
function mb ereg search $pattern	検索 パターン
function mb ereg search $option	検索 オプション
function bool mb ereg search string $pattern string $option	指定 し た マルチバイト 文字 列 が 正規 表現 に 一致 する か 調べる
function mb internal encoding $encoding	encoding は 、 http 入力 文字 エンコーディング 変換 、 http 出力 文字 エンコーディング 変換 および mbstring モジュール の 文字 列関 数 に おい て デフォルト の 文字 エンコーディング として 使用 さ れ ます
function mixed mb internal encoding	encoding が 設定 さ れ た 場合 、 成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function mixed mb internal encoding string $encoding	内部 文字 エンコーディング を 設定 あるい は 取得 する
function mb language $language	e -mail メッセージ の エンコーディング として 使用 し ます
function mixed mb language	language が 設定 さ れ 、 language が 有効 な 場合 、 true が 返さ れ ます
function mixed mb language string $language	現在 の 言語 を 設定 あるい は 取得 する
function array mb list encodings	数 値添 字 の 配列 を 返し ます
function array mb list encodings	サポート する すべ て の エンコーディング の 配列 を 返す
function mb output handler $contents	出力 バッファ の 中身
function mb output handler $status	出力 バッファ の 状態
function string mb output handler	変換後 の 文字列 を 返し ます
function string mb output handler string $contents int $status	出力 バッファ 内 で 文字 エンコーディング を 変換 する コールバック 関数
function mb parse str $encoded_string	url エンコード さ れ た データ
function mb parse str $result	デコード さ れ 、 文字 エンコーディング 変換 さ れ た 文字 列 が 含ま れ ます
function bool mb parse str	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool mb parse str string $encoded_string array $result	get / post / cookie データ を パース し 、 グローバル 変数 を 設定 する
function mb preferred mime name $encoding	調べる エンコーディング
function string mb preferred mime name	文字 エンコーディング encoding 用 の mime charset 文字列 を 返し ます
function string mb preferred mime name string $encoding	mime 文字 設定 を 文字列 で 得る
function mb send mail $message	メール の 本文
function mb send mail $additional_parameter	additional _parameter は 、 mta へ 渡す コマンドライン 引数 です
function mb send mail $to	送信先 の メールアドレス
function mb send mail $subject	メール の 件名
function mb send mail $additional_headers（オプション）	メールヘッダ の 最後 に 挿入 さ れる 文字列
function bool mb send mail	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool mb send mail string $to string $subject string $message string $additional_headers string $additional_parameter	エンコード 変換 を 行っ て メール を 送信 する
function mb strcut $str	取り出し の 対象 と なる 文字列
function mb strcut $encoding	encoding パラメータ に は 文字 エンコーディング を 指定 し ます
function mb strcut $length	バイト 単位 で の 長さ
function mb strcut $start	start が 非負 で ある 場合 に 返さ れる 文字 列 は 、 string の start バイト 目以降 の 文字 列 と なり ます ゼロ から 数え ます
function string mb strcut	mb _strcut は 、 start および length パラメータ で 指定 し た str の 一部 を 返し ます
function string mb strcut string $str int $start int $length string $encoding	文字列 の 一部 を 得る
function mb strimwidth $width	丸める 幅
function mb strimwidth $trimmarker	丸め た 後 に その 文字 列 の 最後 に 追加 さ れる 文字列
function mb strimwidth $encoding	encoding パラメータ に は 文字 エンコーディング を 指定 し ます
function mb strimwidth $str	丸め たい 文字列
function mb strimwidth $start	開始 位置 の オフセット
function string mb strimwidth	丸め られ た 文字列 を 返し ます
function string mb strimwidth string $str int $start int $width string $trimmarker string $encoding	指定 し た 幅 で 文字列 を 丸める
function mb stripos $encoding	使用 する 文字 エンコーディング 名
function mb stripos $haystack	needle が 最初 に 現れる 位置 を 見つける 文字列
function mb stripos $needle	haystack の 中 で 探す 文字列
function mb stripos $offset	haystack の 中 で 、 検索 を 開始 する 位置
function int mb stripos	needle が haystack の 中 で 最初 に 現れる 位置 を 返し ます
function int mb stripos string $haystack string $needle int $offset string $encoding	大文字 小文字 を 区別 せ ず 、 文字列 の 中 で 指定 し た 文字 列 が 最初 に 現れる 位置 を 探す
function mb stristr $encoding	使用 する 文字 エンコーディング 名
function mb stristr $haystack	needle が 最初 に 現れる 位置 を 見つける 文字列
function mb stristr $needle	haystack の 中 で 探す 文字列
function mb stristr $before_needle	この 関数 が haystack のど の 部分 を 返す の か を 指定 し ます
function string mb stristr	haystack の 部分 文字 列 を 返し ます
function string mb stristr string $haystack string $needle bool $before_needle string $encoding	大文字 小文字 を 区別 せ ず 、 文字列 の 中 で 指定 し た 文字 列 が 最初 に 現れる 位置 を 探す
function mb strlen $encoding	encoding パラメータ に は 文字 エンコーディング を 指定 し ます
function mb strlen $str	長さ を 調べ たい 文字列
function mixed mb strlen	文字 エンコーディング encoding の 文字列 str の 文字数 を 返し ます
function mixed mb strlen string $str string $encoding	文字列 の 長さ を 得る
function mb strpos $offset	検索 オフセット
function mb strpos $needle	haystack の 中 から 探す 文字列
function mb strpos $haystack	調べ たい 文字列
function mb strpos $encoding	encoding パラメータ に は 文字 エンコーディング を 指定 し ます
function int mb strpos	文字列 haystack の 中 で needle が 最初 に 現れる 位置 を 数字 で 返し ます
function int mb strpos string $haystack string $needle int $offset string $encoding	文字列 の 中 に 指定 し た 文字 列 が 最初 に 現れる 位置 を 見つける
function mb strrchr $haystack	needle が 最後 に 現れる 位置 を 探す 文字列
function mb strrchr $needle	haystack の 中 で 探す 文字列
function mb strrchr $encoding	使用 する 文字 エンコーディング の 名前
function mb strrchr $part	この 関数 が haystack のど の 部分 を 返す の か を 指定 し ます
function string mb strrchr	haystack の 部分 文字 列 を 返し ます
function string mb strrchr string $haystack string $needle bool $part string $encoding	別 の 文字 列 の 中 で 、 ある 文字 が 最後 に 現れる 場所 を 見つける
function mb strrichr $haystack	needle が 最後 に 現れる 位置 を 探す 文字列
function mb strrichr $needle	haystack の 中 で 探す 文字列
function mb strrichr $encoding	使用 する 文字 エンコーディング の 名前
function mb strrichr $part	この 関数 が haystack のど の 部分 を 返す の か を 指定 し ます
function string mb strrichr	haystack の 部分 文字 列 を 返し ます
function string mb strrichr string $haystack string $needle bool $part string $encoding	大文字 小文字 を 区別 せ ず 、 別 の 文字 列 の 中 で ある 文字 が 最後 に 現れる 場所 を 探す
function mb strripos $encoding	使用 する 文字 エンコーディング 名
function mb strripos $offset	haystack の 中 で 、 検索 を 開始 する 位置
function mb strripos $haystack	needle が 最後 に 現れる 位置 を 見つける 文字列
function mb strripos $needle	haystack の 中 で 探す 文字列
function int mb strripos	needle が haystack の 中 で 最後 に 現れる 位置 を 返し ます
function int mb strripos string $haystack string $needle int $offset string $encoding	大文字 小文字 を 区別 せ ず 、 文字列 の 中 で 指定 し た 文字 列 が 最後 に 現れる 位置 を 探す
function mb strrpos $needle	haystack の 中 で 見つけ たい 文字列
function mb strrpos $offset	指定 する と 、 文字 列中 の 任意 の 文字 位置 から 検索 を 開始 する こと が でき ます
function mb strrpos $encoding	encoding パラメータ に は 文字 エンコーディング を 指定 し ます
function mb strrpos $haystack	needle が 最後 に 登場 する 場所 を 調べ たい 文字列
function int mb strrpos	文字列 haystack の 中 で needle が 最後 に 現れる 位置 を 数字 で 返し ます
function int mb strrpos string $haystack string $needle int $offset string $encoding	文字列 の 中 に 指定 し た 文字 列 が 最後 に 現れる 位置 を 見つける
function mb strstr $encoding	使用 する 文字 エンコーディング 名
function mb strstr $haystack	needle が 最初 に 現れる 位置 を 見つける 文字列
function mb strstr $needle	haystack の 中 で 探す 文字列
function mb strstr $before_needle	この 関数 が haystack のど の 部分 を 返す の か を 指定 し ます
function string mb strstr	haystack の 部分 文字 列 を 返し ます
function string mb strstr string $haystack string $needle bool $before_needle string $encoding	文字列 の 中 で 、 指定 し た 文字 列 が 最初 に 現れる 位置 を 見つける
function mb strtoupper $str	大文字 に 変換 し たい 文字列
function mb strtoupper $encoding	encoding パラメータ に は 文字 エンコーディング を 指定 し ます
function string mb strtoupper	str のすべて の アルファベット を 大文字 に し た もの を 返し ます
function string mb strtoupper string $str string $encoding	文字列 を 大文字 に する
function mb strwidth $encoding	encoding パラメータ に は 文字 エンコーディング を 指定 し ます
function mb strwidth $str	幅 を 取得 し たい 文字列
function int mb strwidth	文字列 str の 幅 を 返し ます
function int mb strwidth string $str string $encoding	文字列 の 幅 を 返す
function mb substr count $needle	見つける 文字列
function mb substr count $haystack	調べ たい 文字列
function mb substr count $encoding	encoding パラメータ に は 文字 エンコーディング を 指定 し ます
function int mb substr count	文字列 haystack の 中 で の 部分 文字 列 needle の 出現 回数 を 返し ます
function int mb substr count string $haystack string $needle string $encoding	部分 文字 列 の 出現 回数 を 数える
function mb substr $length	str の 中 から 取り出す 最大 文字 数
function mb substr $encoding	encoding パラメータ に は 文字 エンコーディング を 指定 し ます
function mb substr $str	部分 文字 列 を 取り出し たい 文字列
function mb substr $start	start が 非負 で ある 場合 に 返さ れる 文字 列 は 、 string の start バイト 目以降 の 文字 列 と なり ます ゼロ から 数え ます
function string mb substr	mb _substr は 、 start および length パラメータ で 指定 し た str の 一部 を 返し ます
function string mb substr string $str int $start int $length string $encoding	文字列 の 一部 を 得る
function mcrypt decrypt $data	この データ が 、 指定 し た cipher および mode で 復号 さ れ ます
function mcrypt decrypt $cipher	mcrypt _ 暗号 名 定数 のい ずれ か 、 あるい は アルゴリズム 名 を あらわす 文字列
function mcrypt decrypt $key	データ を 暗号 化 し た 際 の キー
function mcrypt decrypt $iv	cbc cfb ofb モード および stream モード の いくつか の アルゴリズム の 初期化 の 際 に 使用 さ れ ます
function mcrypt decrypt $mode	定数 mcrypt _mode _ モード 名 、 あるい は 文字列 & quot ;ecb &quot ; & quot ;cbc &quot ; & quot ;cfb &quot ; & quot ;ofb &quot ; & quot ;nofb &quot ; & quot ;stream &quot ; のいずれ か
function string mcrypt decrypt	復号 さ れ た データ を 文字列 で 返し ます
function string mcrypt decrypt string $cipher string $key string $data string $mode string $iv	指定 し た パラメータ で 暗号 化 さ れ た テキスト を 復号 する
function mcrypt enc get algorithms name $td	暗号 化記 述子
function string mcrypt enc get algorithms name	オープン し た アルゴリズム の 名前 を 文字列 で 返し ます
function string mcrypt enc get algorithms name resource $td	オープン さ れ た アルゴリズム の 名前 を 返す
function mcrypt enc get iv size $td	暗号 化記 述子
function int mcrypt enc get iv size	この 関数 は 、 暗号 化記 述子 で 指定 し た アルゴリズム の iv の 大きさ を バイト 単位 で 返し ます
function int mcrypt enc get iv size resource $td	オープン さ れ た アルゴリズム の iv の 大きさ を 返す
function mcrypt enc get key size $td	暗号 化記 述子
function int mcrypt enc get key size	その アルゴリズム で サポート さ れる 最大 キー 長 を バイト 単位 で 返し ます
function int mcrypt enc get key size resource $td	オープン さ れ た モード で サポート さ れる 最大 キー 長 を 返す
function mcrypt enc get modes name $td	暗号 化記 述子
function string mcrypt enc get modes name	名前 を 表す 文字 列 を 返し ます
function string mcrypt enc get modes name resource $td	オープン さ れ た モード の 名前 を 返す
function mcrypt enc is block algorithm $td	暗号 化記 述子
function bool mcrypt enc is block algorithm	アルゴリズム が ブロックアルゴリズム で ある 場合 に true 、 ストリームアルゴリズム で ある 場合 に false を 返し ます
function bool mcrypt enc is block algorithm resource $td	オープン さ れ た モード の 暗号 が ブロックアルゴリズム で ある かど う か を 調べる
function mcrypt encrypt $cipher	mcrypt _ 暗号 名 定数 のい ずれ か 、 あるい は アルゴリズム 名 を あらわす 文字列
function mcrypt encrypt $key	データ を 暗号 化 する 際 の キー
function mcrypt encrypt $iv	cbc cfb ofb モード および stream モード の いくつか の アルゴリズム の 初期化 の 際 に 使用 さ れ ます
function mcrypt encrypt $data	指定 し た cipher および mode で 暗号 化 する データ
function mcrypt encrypt $mode	定数 mcrypt _mode _ モード 名 、 あるい は 文字列 & quot ;ecb &quot ; & quot ;cbc &quot ; & quot ;cfb &quot ; & quot ;ofb &quot ; & quot ;nofb &quot ; & quot ;stream &quot ; のいずれ か
function string mcrypt encrypt	暗号化 さ れ た データ を 文字列 で 返し ます
function string mcrypt encrypt string $cipher string $key string $data string $mode string $iv	指定 し た パラメータ で プレーンテキスト を 暗号 化 する
function mcrypt generic deinit $td	暗号 化記 述子
function bool mcrypt generic deinit	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool mcrypt generic deinit resource $td	暗号化 モジュール を 終了 する
function mcrypt generic init $iv	iv は 通常 その アルゴリズム の ブロック 長 と 同じ 大き さ です が 、 mcrypt _enc _get _iv _size を コール する こと により 、 その 大きさ を 得る 必要 が あり ます
function mcrypt generic init $td	暗号 化記 述子
function mcrypt generic init $key	キー の 最大 長 は 、 mcrypt _enc _get _key _size を コール し た 際 に 得 られる キー 長 で あり 、 この 値より 小さ な 値 は 全 て 有効 です
function int mcrypt generic init	この 関数 は 、 エラー 時 に 負 の 値 を 返し ます
function int mcrypt generic init resource $td string $key string $iv	暗号化 に 必要 な 全 て の バッファ を 初期化 する
function mcrypt get iv size $cipher	mcrypt _ 暗号 名 定数 のい ずれ か 、 あるい は アルゴリズム 名 を あらわす 文字列
function mcrypt get iv size $mode	定数 mcrypt _mode _ モード 名 、 あるい は 文字列 & quot ;ecb &quot ; & quot ;cbc &quot ; & quot ;cfb &quot ; & quot ;ofb &quot ; & quot ;nofb &quot ; & quot ;stream &quot ; のいずれ か
function int mcrypt get iv size	初 期化 ベクトル iv の 大きさ を バイト 数 で 返し ます
function int mcrypt get iv size string $cipher string $mode	指定 し た 暗号 / モード の 組み合わせ に 属する iv の 大きさ を 返す
function mcrypt list algorithms $lib_dir	すべて の アルゴリズム が 存在 する ディレクトリ を 指定 し ます
function array mcrypt list algorithms	サポート する すべ て の アルゴリズム を 配列 で 返し ます
function array mcrypt list algorithms string $lib_dir	サポート さ れる 全て の 暗号 を 配列 として 取得 する
function mcrypt module get algo block size $lib_dir	オプション の パラメータ で 、 システム 上 で の モードモジュール の 位置 を 指定 する こと が 可能 です
function mcrypt module get algo block size $algorithm	アルゴリズム 名
function int mcrypt module get algo block size	指定 し た アルゴリズム で サポート さ れる ブロック 長 を バイト 単位 で 返し ます
function int mcrypt module get algo block size string $algorithm string $lib_dir	指定 し た アルゴリズム の ブロック 長 を 返す
function mcrypt module get algo key size $lib_dir	オプション の パラメータ で 、 システム 上 で の モードモジュール の 位置 を 指定 する こと が 可能 です
function mcrypt module get algo key size $algorithm	アルゴリズム 名
function int mcrypt module get algo key size	この 関数 は 、 指定 し た アルゴリズム で サポート さ れる 最大 キー 長 を バイト 単位 で 返し ます
function int mcrypt module get algo key size string $algorithm string $lib_dir	オープン さ れ た モード で サポート さ れる 最大 キー 長 を 返す
function mcrypt module is block algorithm $lib_dir	オプション の パラメータ lib _dir により 、 システム 上 で の algorithm モジュール の 位置 を 指定 する こと が 可能 です
function mcrypt module is block algorithm $algorithm	調べ たい アルゴリズム
function bool mcrypt module is block algorithm	この 関数 は 、 指定 し た アルゴリズム が ブロックアルゴリズム の 場合 に true 、 ストリームアルゴリズム の 場合 に false を 返し ます
function bool mcrypt module is block algorithm string $algorithm string $lib_dir	指定 し た アルゴリズム が ブロックアルゴリズム で ある か を 調べる
function mcrypt module open $mode_directory	暗号化 モジュール の 位置 を 指定 する 際 に は mode _directory を 使い ます
function mcrypt module open $algorithm	mcrypt _ 暗号 名 定数 のい ずれ か 、 あるい は アルゴリズム 名 を あらわす 文字列
function mcrypt module open $algorithm_directory	暗号化 モジュール の 位置 を 指定 する 際 に は algorithm _directory を 使い ます
function mcrypt module open $mode	定数 mcrypt _mode _ モード 名 、 あるい は 文字列 & quot ;ecb &quot ; & quot ;cbc &quot ; & quot ;cfb &quot ; & quot ;ofb &quot ; & quot ;nofb &quot ; & quot ;stream &quot ; のいずれ か
function resource mcrypt module open	通常 は 暗号 化記 述子 を 返し ます
function resource mcrypt module open string $algorithm string $algorithm_directory string $mode string $mode_directory	使用 する アルゴリズム および モード の モジュール を オープン する
function mcrypt module self test $algorithm	mcrypt _ 暗号 名 定数 のい ずれ か 、 あるい は アルゴリズム 名 を あらわす 文字列
function mcrypt module self test $lib_dir	オプション の パラメータ lib _dir により 、 システム 上 で の algorithm モジュール の 位置 を 指定 する こと が 可能 です
function bool mcrypt module self test	この 関数 は 、 セルフテスト が 成功 し た 場合 true 、 失敗 し た 場合 に false を 返し ます
function bool mcrypt module self test string $algorithm string $lib_dir	指定 し た モジュール の セルフテスト を 実行 する
function memory get peak usage $real_usage	これ を true に 設定 する と 、 システム が 割り当て た 実際 の メモリ の 大きさ を 取得 し ます
function int memory get peak usage	メモリ の 最大 値 を バイト 数 で 返し ます
function int memory get peak usage bool $real_usage	php によって 割り 当て られ た メモリ の 最大 値 を 返す
function memory get usage $real_usage	これ を true に 設定 する と 、 システム が 割り当て た 実際 の メモリ の 大きさ 未使用 の ページ も 含む もの を 取得 し ます
function int memory get usage	メモリ の 量 を バイト 単位 で 返し ます
function int memory get usage bool $real_usage	php に 割り 当て られ た メモリ の 量 を 返す
function metaphone $phonemes	この パラメータ は 、 返さ れる metaphone キー の 長さ を 最大 phonemes 文字 まで に 制限 し ます
function metaphone $str	入力 文字列
function string metaphone	metaphone キー を 文字列 で 返し ます
function string metaphone string $str int $phonemes	文字列 の metaphone キー を 計算 する
function method exists $method_name	メソッド の 名前
function method exists $object	オブジェクト の インスタンス 、 あるい は クラス 名
function bool method exists	method _name で 指定 し た メソッド が 指定 し た object におい て 定義 さ れ て いる 場合 に true 、 そう で ない 場合 に false を 返し ます
function bool method exists mixed $object string $method_name	クラスメソッド が 存在 する かど う か を 確認 する
function int mhash count	利用 可能 な ハッシュ id の 最大 値 を 返し ます
function int mhash count	利用 可能 な ハッシュ id の 最大 値 を 得る
function mhash get block size $hash	ハッシュ id
function int mhash get block size	サイズ を バイト 数 で 返し ます
function int mhash get block size int $hash	指定 し た ハッシュ の ブロックサイズ を 得る
function mhash get hash name $hash	ハッシュ id
function string mhash get hash name	ハッシュ の 名前 を 返し ます
function string mhash get hash name int $hash	指定 し た ハッシュ の 名前 を 得る
function mhash keygen s2k $password	ユーザー が 指定 し た パスワード
function mhash keygen s2k $bytes	キー の 長さ を バイト 数 で 指定 し ます
function mhash keygen s2k $hash	キー の 作成 に 使用 する ハッシュ id
function mhash keygen s2k $salt	異 なっ た キー を 生成 する ため 、 キー を 生成 する たび に 、 十分 に ランダム な 異 なる 値と なる 必要 が あり ます
function string mhash keygen s2k	生成 さ れ た キー を 表す 文字 列 、 あるい は エラー 時 に false を 返し ます
function string mhash keygen s2k int $hash string $password string $salt int $bytes	キー を 生成 する
function mhash $data	ユーザー が 入力 し た 文字列
function mhash $hash	ハッシュ id
function mhash $key	指定 し た 場合 は 、 この 関数 は 結果 の hmac を 返し ます
function string mhash	結果 の ハッシュ あるい は ダイジェスト とも 言い ます あるい は hmac を 表す 文字 列 を 返し ます
function string mhash int $hash string $data string $key	ハッシュ 値 を 計算 する
function microtime $get_as_float	true を 指定 する と 、 microtime は 文字列 で は なく float を 返す よう に なり ます
function mixed microtime	デフォルト で は 、 microtime は & quot ;msec sec &quot ; 形式 の 文字列 を 返し ます
function mixed microtime bool $get_as_float	現在 の unix タイムスタンプ を マイクロ 秒 まで 返す
function mime content type $filename	調べる ファイル へ の パス
function string mime content type	content type を mime 形式 で 返し ます
function string mime content type string $filename	ファイル の mime content -type を 検出 する
function ming setcubicthreshold $threshold	閾値
function void ming setcubicthreshold int $threshold	三次元 の 閾値 を 設定 する
function ming setswfcompression $level	新しい 圧縮 レベル
function void ming setswfcompression int $level	swf 出力 の 圧縮 を 設定 する
function ming useswfversion $version	使用 する swf の バージョン
function void ming useswfversion int $version	swf の バージョン を 設定 する
function mkdir $context	注意 : コンテキスト の サポート は 、 php 5
function mkdir $mode	モード は 0 7 7 7 が デフォルト です
function mkdir $pathname	ディレクトリ の パス
function mkdir $recursive	pathname で 、 入れ 子構 造 の ディレクトリ の 作成 を 許可 し ます
function bool mkdir	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool mkdir string $pathname int $mode bool $recursive resource $context	ディレクトリ を 作る
function mktime $is_dst	この パラメータ は サマータイム dst の 時に 1 に セット さ れ 、 そう で ない 時 に 0 、 サマータイム で ある かどう か が 不明 で ある 場合 に - 1 に セット さ れ ます
function mktime $minute	hour 時 0 分 から 数え た 「分 」
function mktime $second	minute 分 0 秒 から 数え た 「秒 」
function mktime $month	前 年末 から 数え た 月数
function mktime $year	年
function mktime $hour	month 、 day と year で 決まる 日付 の 0 時 から 数え た 「時 」
function mktime $day	前月 末 から 数え た 日数
function int mktime	mktime は 与え られ た 引数 の unix タイムスタンプ を 返し ます
function int mktime int $hour int $minute int $second int $month int $day int $year int $is_dst	日付 を unix の タイムスタンプ として 取得 する
function mqseries begin $reason	compcode の 原因 を 表す コード
function mqseries begin $compCode	完了 コード
function mqseries begin $hConn	接続 ハンドル
function void mqseries begin resource $hconn array $beginOptions resource $compCode resource $reason	mqseries mqbegin
function mqseries close $reason	compcode の 原因 を 表す コード
function mqseries close $compCode	完了 コード
function mqseries close $hObj	オブジェクトハンドル
function mqseries close $hConn	接続 ハンドル
function void mqseries close resource $hconn resource $hobj int $options resource $compCode resource $reason	mqseries mqclose
function mqseries conn $qManagerName	キューマネージャ 名
function mqseries conn $reason	compcode の 原因 を 表す コード
function mqseries conn $compCode	完了 コード
function mqseries conn $hConn	接続 ハンドル
function void mqseries conn string $qManagerName resource $hconn resource $compCode resource $reason	mqseries mqconn
function mqseries connx $qManagerName	キューマネージャ 名
function mqseries connx $reason	compcode の 原因 を 表す コード
function mqseries connx $compCode	完了 コード
function mqseries connx $connOps	関数 の 動作 を 制御 する オプション
function mqseries connx $hConn	接続 ハンドル
function void mqseries connx string $qManagerName array $connOptions resource $hconn resource $compCode resource $reason	mqseries mqconnx
function mqseries disc $reason	compcode の 原因 を 表す コード
function mqseries disc $compCode	完了 コード
function mqseries disc $hConn	接続 ハンドル
function void mqseries disc resource $hconn resource $compCode resource $reason	mqseries mqdisc
function mqseries open $compCode	完了 コード
function mqseries open $reason	compcode の 原因 を 表す コード
function mqseries open $objDesc	オブジェクト 記述子 mqod
function mqseries open $hObj	オブジェクトハンドル
function mqseries open $hConn	接続 ハンドル
function mqseries open $options	関数 の 動作 を 制御 する オプション
function void mqseries open resource $hconn array $objDesc int $option resource $hobj resource $compCode resource $reason	mqseries mqopen
function mqseries put1 $hConn	接続 ハンドル
function mqseries put1 $compCode	完了 コード
function mqseries put1 $reason	compcode の 原因 を 表す コード
function mqseries put1 $objDesc	オブジェクト 記述子 mqod
function mqseries put1 $msgDesc	メッセージ 記述子 mqmd
function mqseries put1 $pmo	put メッセージ の オプション mqpmo
function void mqseries put1 resource $hconn resource $objDesc resource $msgDesc resource $pmo string $buffer resource $compCode resource $reason	mqseries mqput 1
function mqseries strerror $reason	compcode の 原因 を 表す コード
function string mqseries strerror	原因 コード の メッセージ を 文字列 で 返し ます
function string mqseries strerror int $reason	結果 コード mqrc に対応 する エラーメッセージ を 返す
function msession listvar $name	検索 する 名前
function array msession listvar	name という 名前 の 変数 を 有する 全 て の セッション を 値と する 連想 配列 を 返し ます
function array msession listvar string $name	セッション の 一覧 を 変数 を 使用 し て 取得 する
function msg get queue $key	メッセージキュー の 数値 id
function msg get queue $perms	キュー の パーミッション
function resource msg get queue	リソースハンドル を 返し ます
function resource msg get queue int $key int $perms	メッセージキュー を 作成 また は それ に アタッチ する
function msg set queue $data	設定 し たい 値 を 、 data 配列 に 設定 し ます
function msg set queue $queue	メッセージキュー の リソースハンドル
function bool msg set queue	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool msg set queue resource $queue array $data	メッセージキューデータ 構造 体 の 情報 を 設定 する
function msg stat queue $queue	メッセージキュー の リソースハンドル
function array msg stat queue	返り値 は 配列 で 、 その キー と 値 は 以下 の よう な 意味 を もち ます
function array msg stat queue resource $queue	メッセージキューデータ 構造 体 の 情報 を 返す
function msql affected rows $result	評価 さ れ た 結果 リソース
function int msql affected rows	成功 し た 場合 に は 変更 さ れ た 行 の 数 、 エラー 時 に false を 返し ます
function int msql affected rows resource $result	変更 さ れ た 行 の 数 を 返す
function msql close $link_identifier	msql 接続
function bool msql close	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool msql close resource $link_identifier	msql 接続 を 閉じる
function msql connect $hostname	ホスト 名 に は ポート 番号 を 含める こと も 可能 です
function resource msql connect	成功 し た 場合 に は 正 の msql リンク id を 、 エラー 時 に は false を 返し ます
function resource msql connect string $hostname	msql 接続 を 開く
function msql create db $link_identifier	msql 接続
function msql create db $database_name	msql データベース 名
function bool msql create db	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool msql create db string $database_name resource $link_identifier	msql データベース を 作成 する
function msql db query $query	sql クエリ
function msql db query $link_identifier	msql 接続
function msql db query $database	msql データベース の 名前
function resource msql db query	成功 し た 場合 に は 正 の msql リンク id を 、 エラー 時 に は false を 返し ます
function resource msql db query string $database string $query resource $link_identifier	msql クエリ を 送信 する
function string msql error	直近 の エラーメッセージ を 返し ます
function string msql error	最後 の msql コール に関する エラーメッセージ を 返す
function msql fetch array $result_type	以下 の 定数 msql _assoc 、 msql _num 、 および msql _both のうち のい ずれ か
function msql fetch array $result	評価 さ れ た 結果 リソース
function array msql fetch array	取得 し た 行 に 対応 する 配列 を 返し ます
function array msql fetch array resource $result int $result_type	結果 の 行 を 配列 として 取得 する
function msql fetch field $result	評価 さ れ た 結果 リソース
function msql fetch field $field_offset	フィールドオフセット
function object msql fetch field	フィールド 情報 を 含む オブジェクト を 返し ます
function object msql fetch field resource $result int $field_offset	フィールド 情報 を 得る
function msql fetch object $result	評価 さ れ た 結果 リソース
function object msql fetch object	得 た 行 に 対応 する プロパティ を 有する オブジェクト を 返し ます
function object msql fetch object resource $result	結果 の 行 を オブジェクト として 取得 する
function msql field flags $field_offset	数値 フィールドオフセット
function msql field flags $result	評価 さ れ た 結果 リソース
function string msql field flags	指定 し た キー の フィールドフラグ を 含む 文字 列 を 返し ます
function string msql field flags resource $result int $field_offset	フィールド の フラグ を 取得 する
function msql field name $field_offset	数値 フィールドオフセット
function msql field name $result	評価 さ れ た 結果 リソース
function string msql field name	フィールド の 名前 を 返し ます
function string msql field name resource $result int $field_offset	結果 に おける 指定 し た フィールド の 名前 を 取得 する
function msql field seek $field_offset	数値 フィールドオフセット
function msql field seek $result	評価 さ れ た 結果 リソース
function bool msql field seek	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool msql field seek resource $result int $field_offset	フィールドオフセット を 設定 する
function msql field table $field_offset	数値 フィールドオフセット
function msql field table $result	評価 さ れ た 結果 リソース
function int msql field table	成功 し た 場合 は テーブル の 名前 、 失敗 し た 場合 に false を 返し ます
function int msql field table resource $result int $field_offset	フィールド の テーブル 名 を 取得 する
function msql free result $result	評価 さ れ た 結果 リソース
function bool msql free result	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool msql free result resource $result	結果 保持 用 メモリ を 開放 する
function msql list dbs $link_identifier	msql 接続
function resource msql list dbs	結果 セット を 返し ます
function resource msql list dbs resource $link_identifier	サーバー 上 の msql データベース の リスト を 返す
function msql list fields $link_identifier	msql 接続
function msql list fields $tablename	テーブル の 名前
function msql list fields $database	データベース の 名前
function resource msql list fields	結果 セット を 返し ます
function resource msql list fields string $database string $tablename resource $link_identifier	結果 フィールド の リスト を 得る
function msql num rows $result	評価 さ れ た 結果 リソース
function int msql num rows	結果 セット に おける 行 の 数 を 返し ます
function int msql num rows resource $query_identifier	結果 に おける 行 の 数 を 得る
function msql query $link_identifier	msql 接続
function msql query $query	sql クエリ
function resource msql query	成功 し た 場合 に は 正 の msql リンク id を 、 エラー 時 に は false を 返し ます
function resource msql query string $query resource $link_identifier	msql クエリ を 送信 する
function msql select db $link_identifier	msql 接続
function msql select db $database_name	データベース 名
function bool msql select db	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool msql select db string $database_name resource $link_identifier	msql データベース を 選択 する
function mssql bind $var	mssql パラメータ として バインド する php 変数
function mssql bind $stmt	mssql _init で 取得 し た ステートメントリソース
function mssql bind $param_name	パラメータ 名 を 表す 文字列
function mssql bind $type	sqltext sqlvarchar sqlchar sqlint 1 sqlint 2 sqlint 4 sqlbit sqlflt 4 sqlflt 8 sqlfltn のいずれ か
function mssql bind $is_null	パラメータ が null かどう か
function mssql bind $is_output	値 が output パラメータ で ある かどう か
function mssql bind $maxlen	char / varchar 値 で 使用 し ます
function bool mssql bind	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool mssql bind resource $stmt string $param_name mixed $var int $type bool $is_output bool $is_null int $maxlen	ストアドプロシージャ また は リモートストアドプロシージャ へ パラメータ を 追加 する
function mssql close $link_identifier	mssql _connect が 返す ms sql リンク id
function bool mssql close	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool mssql close resource $link_identifier	ms sql server へ の 接続 を 閉じる
function mssql connect $password	パスワード
function mssql connect $new_link	同じ 引数 で mssql _connect が 再度 コール さ れ た 場合 、 新規 の リンク は 作成 さ れ ず 、 代わり に 既 に オープン さ れ た リンク id が 返さ れ ます
function mssql connect $username	ユーザー 名
function mssql connect $servername	ms sql サーバー
function resource mssql connect	成功時 に ms sql リンク id 、 エラー 発生 時 に false を 返し ます
function resource mssql connect string $servername string $username string $password bool $new_link	ms sql サーバー 接続 を オープン する
function mssql data seek $result_identifier	処理 対象 と なる 結果 リソース
function mssql data seek $row_number	新しい 結果 ポインタ の 行番 号
function bool mssql data seek	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool mssql data seek resource $result_identifier int $row_number	内部行 ポインタ を 移動 する
function mssql execute $skip_results	結果 を スキップ する かどう か
function mssql execute $stmt	mssql _init で 取得 し た ステートメントハンドル
function mixed mssql execute resource $stmt bool $skip_results	ms sql サーバーデータベース で ストアドプロシージャ を 実行 する
function mssql fetch array $result	処理 対象 と なる 結果 リソース
function mssql fetch array $result_type	取得 する 配列 の 形式
function array mssql fetch array	取得 さ れ た 行 に 対応 する 配列 、 行 が もう ない 場合 に false を 返し ます
function array mssql fetch array resource $result int $result_type	連想 配列 ・ 数値 添字 配列 ・ あるい は その 両方 で 結果 の 行 を 取得 する
function mssql fetch batch $result	処理 対象 と なる 結果 リソース
function int mssql fetch batch	返さ れ た バッチ 内 の 行番 号 を 返し ます
function int mssql fetch batch resource $result	レコード の 次 の バッチ を 返す
function mssql fetch field $result	処理 対象 と なる 結果 リソース
function mssql fetch field $field_offset	フィールドオフセット
function object mssql fetch field	フィールド 情報 を 含む オブジェクト を 返し ます
function object mssql fetch field resource $result int $field_offset	フィールド 情報 を 取得 する
function mssql fetch object $result	処理 対象 と なる 結果 リソース
function object mssql fetch object	取得 さ れ た 行 に 対応 する プロパティ を 有する オブジェクト 、 また は もう 行 が ない 場合 に false を 返し ます
function object mssql fetch object resource $result	オブジェクト として 行 を 取得 する
function mssql fetch row $result	処理 対象 と なる 結果 リソース
function array mssql fetch row	取得 さ れ た 行 に 対応 する 配列 、 また は 行 が もう ない 場合 に false を 返し ます
function array mssql fetch row resource $result	配列 として 行 を 取得 する
function mssql field name $offset	フィールドオフセット
function mssql field name $result	処理 対象 と なる 結果 リソース
function string mssql field name	成功 し た 場合 は 指定 し た フィールドインデックス の 名前 、 失敗 し た 場合 に false を 返し ます
function string mssql field name resource $result int $offset	フィールド 名 を 得る
function mssql field seek $result	処理 対象 と なる 結果 リソース
function mssql field seek $field_offset	フィールドオフセット
function bool mssql field seek	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool mssql field seek resource $result int $field_offset	指定 し た フィールドオフセット に 移動 する
function mssql field type $offset	フィールドオフセット
function mssql field type $result	処理 対象 と なる 結果 リソース
function string mssql field type	成功 し た 場合 は 指定 し た フィールドインデックス の 型 、 失敗 し た 場合 に false を 返し ます
function string mssql field type resource $result int $offset	フィールド 型 を 得る
function mssql free result $result	処理 対象 と なる 結果 リソース
function bool mssql free result	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool mssql free result resource $result	結果 保持 用 メモリ を 解放 する
function mssql free statement $stmt	mssql _init で 取得 し た ステートメントリソース
function bool mssql free statement	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool mssql free statement resource $stmt	ステートメント の メモリ を 開放 する
function string mssql get last message	サーバー から の 直近 の エラーメッセージ 、 あるい は mssql で エラー が 発生 し て い ない 場合 は 空 の 文字列 を 返し ます
function string mssql get last message	サーバー の 直近 の メッセージ を 返す
function mssql init $sp_name	ストアドプロシージャ 名
function mssql init $link_identifier	mssql _connect が 返す ms sql リンク id
function resource mssql init	&quot ;statement &quot ; リソース の id を 返し ます
function resource mssql init string $sp_name resource $link_identifier	ストアドプロシージャ また は リモート の ストアドプロシージャ を 初期化 する
function mssql min error severity $severity	新しい エラー 深刻 度
function void mssql min error severity int $severity	最小 の エラー 深刻 度 を 設定 する
function mssql min message severity $severity	新しい メッセージ 深刻 度
function void mssql min message severity int $severity	最小 の メッセージ 深刻 度 を 設定 する
function mssql num fields $result	処理 対象 と なる 結果 リソース
function int mssql num fields	フィールド の 数 を 整数 値 で 返し ます
function int mssql num fields resource $result	結果 の フィールド 数 を 得る
function mssql num rows $result	処理 対象 と なる 結果 リソース
function int mssql num rows	行 の 数 を 整数 値 で 返し ます
function int mssql num rows resource $result	結果 の 行数 を 得る
function mssql pconnect $password	パスワード
function mssql pconnect $new_link	同じ 引数 で mssql _pconnect が 再度 コール さ れ た 場合 、 新規 の リンク は 作成 さ れ ず 、 代わり に 既 に オープン さ れ た リンク id が 返さ れ ます
function mssql pconnect $username	ユーザー 名
function mssql pconnect $servername	ms sql サーバー
function resource mssql pconnect	成功 時 に 正 の ms sql 持続 的 リンク id 、 エラー 時 に false を 返し ます
function resource mssql pconnect string $servername string $username string $password bool $new_link	持続 的 ms sql 接続 を オープン する
function mssql query $link_identifier	mssql _connect あるい は mssql _pconnect が 返す ms sql リンク id
function mssql query $query	sql クエリ
function mssql query $batch_size	バッファ に まとめる レコード の 数
function mixed mssql query	成功時 に ms sql 結果 id 、 結果 が 返さ れ なかっ た 場合 に true 、 エラー 時 に false を 返し ます
function mixed mssql query string $query resource $link_identifier int $batch_size	ms sql クエリ を 送る
function mssql result $field	フィールドオフセット 、 フィールド 名 また は テーブル 名
function mssql result $result	処理 対象 と なる 結果 リソース
function mssql result $row	行番号
function string mssql result	指定 し た セル の 内容 を 返し ます
function string mssql result resource $result int $row mixed $field	結果 データ を 得る
function mssql rows affected $link_identifier	mssql _connect あるい は mssql _pconnect が 返す ms sql リンク id
function int mssql rows affected	直近 の 書き込み クエリ によっ て 変更 さ れ た レコード 数 を 返し ます
function int mssql rows affected resource $link_identifier	クエリ によっ て 変更 さ れ た レコード 数 を 返す
function mssql select db $link_identifier	mssql _connect あるい は mssql _pconnect が 返す ms sql リンク id
function mssql select db $database_name	the database name
function bool mssql select db	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool mssql select db string $database_name resource $link_identifier	ms sql データベース を 選択 する
function mt srand $seed	オプション で 指定 する シード 値
function void mt srand int $seed	改良 型乱 数生 成器 に シード を 指定 する
function mysql client encoding $link_identifier	mysql 接続
function string mysql client encoding	カレント の 接続 から 、 デフォルト の 文字 セット 名 を 返し ます
function string mysql client encoding resource $link_identifier	文字 セット 名 を 返す
function mysql connect $server	mysql サーバー
function mysql connect $password	パスワード
function mysql connect $new_link	同じ 引数 で 2 回 mysql _connect を コール し た 場合 、 2 回目 は 新規 の リンク が 確立 さ れる の で は なく 、 代わり にす でに オープン さ れ た リンク の リンク id が 返さ れ ます
function mysql connect $username	ユーザー 名
function mysql connect $client_flags	パラメータ client _flags は 、 以下 の 定数 の 組み合わせ です ： 1 2 8 load data local の 処理 を 有効 に する 、 mysql _client _ssl 、 mysql _client _compress 、 mysql _client _ignore _space また は mysql _client _interactive
function resource mysql connect	成功 し た 場合 に mysql リンク id を 、 失敗 し た 場合 に false を 返し ます
function resource mysql connect string $server string $username string $password bool $new_link int $client_flags	mysql サーバー へ の 接続 を オープン する
function mysql db name $row	結果 セット 内 の インデックス
function mysql db name $result	mysql _list _dbs を コール し て 得 られ た 結果 ポインタ
function mysql db name $field	フィールド 名
function string mysql db name	成功 し た 場合 に データベース 名 を 、 失敗 し た 場合 に false を 返し ます
function string mysql db name resource $result int $row mixed $field	mysql _list _dbs の コール 結果 から データベース 名 を 取得 する
function mysql db query $query	mysql クエリー
function mysql db query $database	選択 する データベース 名
function mysql db query $link_identifier	mysql 接続
function resource mysql db query	クエリー の 結果 を 指す mysql 結果 リソース を 正 の 値 で 返し ます
function resource mysql db query string $database string $query resource $link_identifier	データベース を 選択 し 、 そこ で クエリー を 実行 する
function mysql drop db $database_name	削除 する データベース の 名前
function mysql drop db $link_identifier	mysql 接続
function bool mysql drop db	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool mysql drop db string $database_name resource $link_identifier	mysql データベース を 破棄 削除 する
function mysql errno $link_identifier	mysql 接続
function int mysql errno	直近 の mysql 関数 から の エラー 番号 を 返し ます
function int mysql errno resource $link_identifier	直近 の mysql 処理 から エラーメッセージ の エラー 番号 を 返す
function mysql error $link_identifier	mysql 接続
function string mysql error	直近 の mysql 関数 から の エラー 文字 列 を 返し ます
function string mysql error resource $link_identifier	直近 に 実行 さ れ た mysql 操作 の エラーメッセージ を 返す
function mysql escape string $unescaped_string	エスケープ さ れる 文字列
function string mysql escape string	エスケープ さ れ た 文字列 を 返し ます
function string mysql escape string string $unescaped_string	mysql _query で 使用 する ため に 文字列 を エスケープ する
function mysql fetch array $result_type	取得 する 配列 の 形式 です
function mysql fetch array $result	評価 さ れ た 結果 リソース
function array mysql fetch array	取得 し た 行 を あらわす 文字 列 の 配列 を 返し ます
function array mysql fetch array resource $result int $result_type	連想 配列 、 添字 配列 、 また は その 両方 として 結果 の 行 を 取得 する
function mysql fetch assoc $result	評価 さ れ た 結果 リソース
function array mysql fetch assoc	取得 し た 行 に 対応 する 文字 列 の 連想 配列 を 返し ます
function array mysql fetch assoc resource $result	連想 配列 として 結果 の 行 を 取得 する
function mysql fetch object $class_name	インスタンス 化 し 、 プロパティ を 設定 し て 返す クラス の 名前
function mysql fetch object $params	class _name オブジェクト の コンストラクタ に 渡す オプション の パラメータ の 配列
function mysql fetch object $result	評価 さ れ た 結果 リソース
function object mysql fetch object	取得 さ れ た 行 を 表す 文字 列 プロパティ を 有する オブジェクト object を 返し ます
function object mysql fetch object resource $result string $class_name array $params	結果 の 行 を オブジェクト として 取得 する
function mysql fetch row $result	評価 さ れ た 結果 リソース
function array mysql fetch row	取得 さ れ た 行 に 対応 する 文字 列 の 配列 を 返し ます
function array mysql fetch row resource $result	結果 を 添字 配列 として 取得 する
function mysql field flags $field_offset	数値 フィールドオフセット
function mysql field flags $result	評価 さ れ た 結果 リソース
function string mysql field flags	結果 について の フラグ を 文字列 で 返し ます
function string mysql field flags resource $result int $field_offset	結果 に おい て 指定 し た フィールド の フラグ を 取得 する
function mysql field len $field_offset	数値 フィールドオフセット
function mysql field len $result	評価 さ れ た 結果 リソース
function int mysql field len	成功 し た 場合 に は 指定 し た フィールド の 長さ 、 失敗 し た 場合 に false を 返し ます
function int mysql field len resource $result int $field_offset	指定 し た フィールド の 長さ を 返す
function mysql field name $field_offset	数値 フィールドオフセット
function mysql field name $result	評価 さ れ た 結果 リソース
function string mysql field name	成功 し た 場合 に 指定 し た フィールド の 名前 を 、 失敗 し た 場合 に false を 返し ます
function string mysql field name resource $result int $field_offset	結果 に おい て 指定 し た フィールド 名 を 取得 する
function mysql field seek $field_offset	数値 フィールドオフセット
function mysql field seek $result	評価 さ れ た 結果 リソース
function bool mysql field seek	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool mysql field seek resource $result int $field_offset	結果 ポインタ を 指定 し た フィールドオフセット に セット する
function mysql field table $field_offset	数値 フィールドオフセット
function mysql field table $result	評価 さ れ た 結果 リソース
function string mysql field table	成功 し た 場合 に テーブル の 名前 を 返し ます
function string mysql field table resource $result int $field_offset	指定 し た フィールド が 含ま れる テーブル の 名前 を 取得 する
function mysql field type $field_offset	数値 フィールドオフセット
function mysql field type $result	評価 さ れ た 結果 リソース
function string mysql field type	返さ れる フィールド 型 は & quot ;int &quot ; & quot ;real &quot ; & quot ;string &quot ; & quot ;blob &quot ; そして その 他 & raquo ;& nbsp ;mysql ドキュメント で 詳細 が 規定 さ れ て いる 型 の うち の ひとつ に なり ます
function string mysql field type resource $result int $field_offset	結果 に おい て 指定 し た フィールド の 型 を 取得 する
function mysql free result $result	評価 さ れ た 結果 リソース
function bool mysql free result	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool mysql free result resource $result	結果 保持 用 メモリ を 開放 する
function string mysql get client info	mysql クライアント の バージョン を 返し ます
function string mysql get client info	mysql クライアント 情報 を 取得 する
function mysql get host info $link_identifier	mysql 接続
function string mysql get host info	使用 さ れ て いる mysql 接続 の 型 を 表す 文字 列 を 返し ます
function string mysql get host info resource $link_identifier	mysql ホスト 情報 を 取得 する
function mysql info $link_identifier	mysql 接続
function string mysql info	成功 し た 場合 に 文について の 情報 、 失敗 し た 場合 に false を 返し ます
function string mysql info resource $link_identifier	直近 の クエリ について の 情報 を 得る
function mysql insert id $link_identifier	mysql 接続
function int mysql insert id	直近 の クエリ により auto _increment カラム 用 に 生成 さ れ た id を 返し ます
function int mysql insert id resource $link_identifier	直近 の クエリ で 生成 さ れ た id を 得る
function mysql list dbs $link_identifier	mysql 接続
function resource mysql list dbs	成功 し た 場合 に 結果 ポインタ resource を 、 失敗 し た 場合 に false を 返し ます
function resource mysql list dbs resource $link_identifier	mysql サーバー 上 で 利用 可能 な データベース の リスト を 得る
function mysql num rows $result	評価 さ れ た 結果 リソース
function int mysql num rows	成功 し た 場合 に 結果 セット の 行 の 数 、 失敗 し た 場合 に false を 返し ます
function int mysql num rows resource $result	結果 に おける 行 の 数 を 得る
function mysql pconnect $server	mysql サーバー
function mysql pconnect $password	パスワード
function mysql pconnect $username	ユーザー 名
function mysql pconnect $client_flags	パラメータ client _flags は 、 以下 の 定数 の 組み合わせ です ： 1 2 8 load data local の 処理 を 有効 に する 、 mysql _client _ssl 、 mysql _client _compress 、 mysql _client _ignore _space また は mysql _client _interactive
function resource mysql pconnect	成功 し た 場合 に mysql 持続 的 リンク id を 、 失敗 し た 場合 に false を 返し ます
function resource mysql pconnect string $server string $username string $password int $client_flags	mysql サーバー へ の 持続 的 な 接続 を オープン する
function mysql ping $link_identifier	mysql 接続
function bool mysql ping	mysql サーバー と の 接続 が 有効 な 場合 に true そう で ない 場合 に false を 返し ます
function bool mysql ping resource $link_identifier	サーバー と の 接続 状況 を 調べ 、 接続 さ れ て い ない 場合 は 再接 続 する
function mysql real escape string $unescaped_string	エスケープ さ れる 文字列
function mysql real escape string $link_identifier	mysql 接続
function string mysql real escape string	成功 し た 場合 に エスケープ 後 の 文字 列 、 失敗 し た 場合 に false を 返し ます
function string mysql real escape string string $unescaped_string resource $link_identifier	sql 文中 で 用いる 文字 列 の 特殊 文字 を エスケープ する
function mysql result $row	結果 から 取得 する 行 の 番号
function mysql result $result	評価 さ れ た 結果 リソース
function mysql result $field	取得 し たい フィールド 名 また は フィールド の オフセット
function string mysql result	成功 し た 場合 に mysql 結果 セット の ひとつ の セル の 内容 、 失敗 し た 場合 に false を 返し ます
function string mysql result resource $result int $row mixed $field	結果 データ を 得る
function mysql select db $database_name	選択 する データベース 名
function mysql select db $link_identifier	mysql 接続
function bool mysql select db	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool mysql select db string $database_name resource $link_identifier	mysql データベース を 選択 する
function mysql set charset $charset	有効 な 文字 セット 名
function mysql set charset $link_identifier	mysql 接続
function bool mysql set charset	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool mysql set charset string $charset resource $link_identifier	クライアント の 文字 セット を 設定 する
function mysql stat $link_identifier	mysql 接続
function string mysql stat	稼働 時間 、 スレッド 、 クエリ 、 オープン さ れ て いる テーブル 、 フラッシュ さ れ た テーブル 、 そして 1 秒あ たり の クエリ 数 を 文字列 で 返し ます
function string mysql stat resource $link_identifier	現在 の システム の 状態 を 取得 する
function mysql tablename $i	整数 の インデックス （行 / テーブル 番号 ）
function mysql tablename $result	mysql _list _tables から 返さ れる 結果 ポインタ resource
function string mysql tablename	成功 し た 場合 に テーブル 名 、 失敗 し た 場合 に false を 返し ます
function string mysql tablename resource $result int $i	フィールド の テーブル 名 を 得る
function mysql unbuffered query $query	実行 する sql クエリ
function mysql unbuffered query $link_identifier	mysql 接続
function resource mysql unbuffered query	select show describe あるい は explain で は 、 mysql _unbuffered _query は 成功 し た 場合 に resource 、 エラー 時 に false を 返し ます
function resource mysql unbuffered query string $query resource $link_identifier	mysql に sql クエリ を 送信 する が 、 結果 に対し て の フェッチ や バッファリング は 行わ ない
function array mysqli get cache stats	成功 し た 場合 に 空 の 配列 、 それ 以外 の 場合 に false を 返し ます
function array mysqli get cache stats	クライアント の zval キャッシュ の 統計 情報 を 返す
function mysqlnd memcache set $pattern	perl 互換 の 正規 表現 形式 の パターン
function mysqlnd memcache set $mysql_connection	mysql サーバー へ の ハンドル
function mysqlnd memcache set $callback	クエリー を mysql に 送る とき に 使う コールバック
function mysqlnd memcache set $memcache_connection	memcached の インスタンス で 、 mysql memcache daemon プラグイン に 接続 さ せる もの
function bool mysqlnd memcache set	関連 づけ 、 あるい は その 解除 が 成功 し た 場合 に true 、 エラー が 発生 し た 場合 に false を 返し ます
function bool mysqlnd memcache set mixed $mysql_connection Memcached $memcache_connection string $pattern callback $callback	mysql の 接続 を memcache の 接続 と 関連 づける
function natcasesort $array	入力 の 配列
function bool natcasesort	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool natcasesort array $array	大文字 小文字 を 区別 し ない &quot ; 自然順 &quot ; アルゴリズム を 用い て 配列 を ソート する
function bool ncurses can change color	プログラマ が 色定 義 を 変更 できる 場合 に true 、 それ 以外 の 場合 に false を 返し ます
function bool ncurses can change color	端末 の 色 を 変更 可能 か どう か 確認 する
function ncurses color content $b	青 コンポーネント の 値 へ の 参照
function ncurses color content $r	赤 コンポーネント の 値 へ の 参照
function ncurses color content $color	情報 を 取得 し たい 色 の 番号
function ncurses color content $g	緑 コンポーネント の 値 へ の 参照
function int ncurses color content	関数 が 成功 し た 場合 は - 1 、 ncurses や 端末 の 色機 能 の 初期 化 が でき て い ない 場合 は 0 を 返し ます
function int ncurses color content int $color int $r int $g int $b	色 の rgb 値 を 取得 する
function bool ncurses has colors	端末 が カラー 表示 機能 を 持っ て いる 場合 に true 、 持っ て い ない 場合 に false を 返し ます
function bool ncurses has colors	カラー 端末 か どう か 確認 する
function ncurses init pair $bg	色ペア の 背景 色
function ncurses init pair $fg	色ペア の 前景 色
function ncurses init pair $pair	定義 し たい 色ペア の 番号
function int ncurses init pair	関数 が 成功 し た 場合 は - 1 、 ncurses や 端末 の 色機 能 の 初期 化 が でき て い ない 場合 は 0 を 返し ます
function int ncurses init pair int $pair int $fg int $bg	色ペア を 定義 する
function void ncurses init	ncurses を 初期化 する
function ncurses pair content $b	色ペア の 背景 色 へ の 参照
function ncurses pair content $f	色ペア の 前景 色 へ の 参照
function ncurses pair content $pair	情報 を 取得 し たい 色ペア の 番号
function int ncurses pair content	関数 が 成功 し た 場合 は - 1 、 ncurses や 端末 の 色機 能 の 初期 化 が でき て い ない 場合 は 0 を 返し ます
function int ncurses pair content int $pair int $f int $b	色ペア の 前景 色 と 背景 色 を 取得 する
function int ncurses start color	成功 し た 場合 に 0 、 色テーブル の 割り 当て に 失敗 し た 場合 や ncurses が 初期化 さ れ て い ない 場合 に - 1 を 返し ます
function int ncurses start color	色機能 を 初期化 する
function void newt bell	ビープ 音 を 端末 に 送信 する
function resource newt button bar	作成 し た ボタン を 含む グリッド を 返し ます
function resource newt button bar array $buttons	作成 し た ボタン を 含む グリッド を 返す
function newt button $text	ボタン に 表示 する テキスト
function newt button $left	ボタン の x 座標
function newt button $top	ボタン の y 座標
function resource newt button	作成 し た ボタンコンポーネント へ の リソースリンク 、 あるい は エラー 時 に false を 返し ます
function resource newt button int $left int $top string $text	新しい ボタン を 作成 する
function string newt checkbox get value	チェックボックス の 値 を 表す 文字 を 返し ます
function string newt checkbox get value resource $checkbox	チェックボックスリソース の 値 を 取得 する
function void newt checkbox set flags resource $checkbox int $flags int $sense	チェックボックスリソース を 設定 する
function void newt checkbox tree add item resource $checkboxtree string $text mixed $data int $flags int $index	新しい アイテム を チェックボックスツリー に 追加 する
function array newt checkbox tree find item	チェックボックスツリーアイテムリソース を 返し ます
function array newt checkbox tree find item resource $checkboxtree mixed $data	チェックボックスツリー の アイテム を 探す
function mixed newt checkbox tree get current	現在 の 選択 さ れ て いる チェックボックスツリーアイテム を 返し ます
function mixed newt checkbox tree get current resource $checkboxtree	チェックボックスツリー の 選択 さ れ て いる アイテム を 返す
function int newt finished	成功 し た 場合 に 1 、 失敗 し た 場合 に 0 を 返し ます
function int newt finished	newt インターフェイス を 終了 する
function newt form add components $components	フォーム に 追加 する コンポーネント の 配列
function newt form add components $form	コンポーネント を 追加 する フォーム
function void newt form add components resource $form array $components	フォーム に 複数 の コンポーネント を 追加 する
function newt form run $exit_struct	フォームコンポーネント を 実行 し た 後 の 情報 を 返す ため に 使用 する 配列
function newt form run $form	フォームコンポーネント
function void newt form run resource $form array $exit_struct	フォーム を 実行 する
function newt form $vert_bar	フォーム に 関連 付け られる 垂直 スクロールバー
function newt form $help	ヘルプ 文字列
function newt form $flags	さまざまな フラグ
function resource newt form	作成 さ れ た フォームコンポーネント の リソースリンク 、 あるい は エラー 時 に false を 返し ます
function resource newt form resource $vert_bar string $help int $flags	フォーム を 作成 する
function void newt pop help line	現在 の ヘルプ 行 を スタック の 内容 で 置き 換える
function newt push help line $text	新しい ヘルプメッセージ
function void newt push help line string $text	現在 の ヘルプ 行 を スタック に 保存 し 、 新しい 行 を 表示 する
function void newt refresh	画面 の 変更 さ れ た 部分 を 更新 する
function void newt resume	newt _suspend を コール し た 後 に newt インターフェイス の 使用 を 再開 する
function newt run form $form	フォームコンポーネント
function resource newt run form	フォーム の 実行 を 停止 さ せ た コンポーネント を 返し ます
function resource newt run form resource $form	フォーム を 実行 する
function newt set suspend callback $data	コールバック 関数 に 渡さ れる データ
function newt set suspend callback $function	ひとつ の 引数 data を 受け 取る コールバック 関数
function void newt set suspend callback callable $function mixed $data	ユーザー が サスペンドキー を 押し た 際 に 起動 する コールバック 関数 を 設定 する
function void newt wait for key	キー が 押さ れる まで 結果 を 返さ ない
function next $array	対象 と なる 配列
function mixed next	内部 配列 ポインタ が 指す 場所 の 次 の 場所 の 値 を 返し ます
function mixed next array $array	内部 配列 ポインタ を 進める
function ngettext $msgid2	複数 形 の メッセージ id
function ngettext $n	数 件数 など
function ngettext $msgid1	単数 形 の メッセージ id
function string ngettext	msgid 1 および msgid 2 で 表さ れる メッセージ の 、 数 n に対応 する 複数 形 を 返し ます
function string ngettext string $msgid1 string $msgid2 int $n	gettext の 複数 形版
function nl langinfo $item	item は 要素 の 整数 値 、 もしく は 要素 の 定数 名 です
function string nl langinfo	要素 を 文字列 で 返し ます
function string nl langinfo int $item	言語 および ロケール 情報 を 検索 する
function oauth get sbs $request_parameters	リクエストパラメータ の 配列
function oauth get sbs $http_method	httpメソッド
function oauth get sbs $uri	エンコード する uri
function string oauth get sbs	sbs を 返し ます
function string oauth get sbs string $http_method string $uri array $request_parameters	sbs を 生成 する
function void ob clean	出力 バッファ を クリア 消去 する
function bool ob end clean	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ob end clean	出力用 バッファ を クリア 消去 し 、 出力 の バッファリング を オフ に する
function bool ob end flush	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ob end flush	出力用 バッファ を フラッシュ 送信 し 、 出力 の バッファリング を オフ に する
function string ob get clean	出力 バッファ の 内容 を 返し た 後 で 出力 の バッファリング を 終了 し ます
function string ob get clean	現在 の バッファ の 内容 を 取得 し 、 出力 バッファ を 削除 する
function string ob get contents	出力用 バッファ の 内容 を 返し ます
function string ob get contents	出力用 バッファ の 内容 を 返す
function string ob get flush	出力 バッファ を 返し ます
function string ob get flush	出力 バッファ を フラッシュ し 、 その 内容 を 文字 列 として 返し た 後 で 出力 バッファリング を 終了 する
function int ob get length	出力 バッファ の 内容 の 長さ を バイト 単位 で 返し ます
function int ob get length	出力 バッファ の 長さ を 返す
function int ob get level	出力 バッファリングハンドラ の ネストレベル を 返し ます
function int ob get level	出力 バッファリング 機構 の ネストレベル を 返す
function string ob iconv handler	この ハンドラ の 返り値 について の 情報 は ob _start を 参照く ださい
function string ob iconv handler string $contents int $status	出力 バッファハンドラ として 文字 エンコーディング を 変換 する
function array ob list handlers	これ は 、 使用 中 の 出力 ハンドラ を （もし 存在 すれ ば ） 配列 で 返し ます
function array ob list handlers	使用 中 の 出力 ハンドラ の 一覧 を 取得 する
function ob start $output_callback	オプション の 引数 output _callback 関数 を 指定 する こと が 可能 です
function ob start $flags	flags は ビットマスク で 、 出力 バッファ 上 で どん な 操作 が できる のか を 制御 し ます
function ob start $phase	定数 php _output _handler _* の ビットマスク
function ob start $chunk_size	オプション の パラメータ chunk _size が 渡さ れ た 場合 、 バッファ の 長さ が chunk _size バイト を 超える たび に 、 出力 の 後 で バッファ が フラッシュ さ れ ます
function ob start $buffer	出力 バッファ の 内容
function bool ob start	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ob start callable $output_callback int $chunk_size int $flags	出力 の バッファリング を 有効 に する
function ob tidyhandler $input	バッファ
function ob tidyhandler $mode	バッファ の モード
function string ob tidyhandler	修正 し た バッファ を 返し ます
function string ob tidyhandler string $input int $mode	バッファ を 修正 する ため の ob _start コールバック 関数
function oci bind by name $statement	有効 な oci 8 ステートメント 識別子
function oci bind by name $variable	bv _name に 関連 づける php の 変数
function oci bind by name $bv_name	コロン を 先頭 につけ た バインド 変数 プレースホルダ を ステートメント 内 で 使い ます
function oci bind by name $type	oracle が データ を 扱う とき の データ 型
function oci bind by name $maxlength	バインド 時 の 最大 長
function bool oci bind by name	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool oci bind by name resource $statement string $bv_name mixed $variable int $maxlength int $type	oracle プレースホルダ に php 変数 を バインド する
function oci cancel $statement	oci ステートメント
function bool oci cancel	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool oci cancel resource $statement	カーソル から の 読み込み を キャンセル する
function string oci client version	文字列 として バージョン 番号 を 返し ます
function string oci client version	oracle クライアント ・ライブラリ の バージョン を 返す
function oci close $connection	oci _connect 、 oci _pconnect あるい は oci _new _connect が 返す oracle 接続 id
function bool oci close	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool oci close resource $connection	oracle と の 接続 を 閉じる
function oci define by name $column_name	クエリ で 使用 する カラム 名
function oci define by name $variable	返さ れる カラム の 値 を 格納 する php 変数
function oci define by name $type	返さ れる データ の 型
function oci define by name $statement	oci _parse で 作成 し て oci _execute で 実行 し た 有効 な oci 8 ステートメント id 、 あるい は ref cursor ステートメント id
function bool oci define by name	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool oci define by name resource $statement string $column_name mixed $variable int $type	php の 変数 を 、 クエリ で 取得 する カラム に 関連 づける
function oci execute $mode	オプション の 二 番目 の パラメータ は 、 次 の 定数 のい ずれ かと なり ます
function oci execute $statement	有効 な oci ステートメント id
function bool oci execute	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool oci execute resource $statement int $mode	文 を 実行 する
function oci fetch all $output	返さ れ た 行 を 格納 する 変数
function oci fetch all $flags	パラメータ flags は 、 配列 の 構造 を あらわし 、 また 連想 配列 を 使う か どう か も あらわし ます
function oci fetch all $maxrows	読み込む 行数
function oci fetch all $statement	oci _parse で 作成 し て oci _execute で 実行 し た 有効 な oci 8 ステートメント id 、 あるい は ref cursor ステートメント id
function oci fetch all $skip	結果 を 取得 する 際 に 無視 する 行数 デフォルト の 値 は 0 で 、 最初 の 行 から 開始 さ れ ます
function int oci fetch all	output の 行数 を 返し ます
function int oci fetch all resource $statement array $output int $skip int $maxrows int $flags	クエリ から の 複数 の 行 を 二次 元配 列 に 取得 する
function oci fetch array $statement	oci _parse で 作成 し て oci _execute で 実行 し た 有効 な oci 8 ステートメント id 、 あるい は ref cursor ステートメント id
function oci fetch array $mode	オプション の 第 2 引数 は 、 次 の 定数 の 組み合わせ が 可能 です
function array oci fetch array	連想 配列 や 数値 添字 配列 を 返し ます
function array oci fetch array resource $statement int $mode	クエリ の 次 の 行 を 連想 配列 あるい は 数値 添字 配列 で 返す
function oci fetch object $statement	oci _parse で 作成 し て oci _execute で 実行 し た 有効 な oci 8 ステートメント id 、 あるい は ref cursor ステートメント id
function object oci fetch object	オブジェクト を 返し ます
function object oci fetch object resource $statement	クエリ の 次 の 行 を オブジェクト として 返す
function oci fetch row $statement	oci _parse で 作成 し て oci _execute で 実行 し た 有効 な oci 8 ステートメント id 、 あるい は ref cursor ステートメント id
function array oci fetch row	数 値添 字配 列 を 返し ます
function array oci fetch row resource $statement	クエリ の 次 の 行 を 配列 で 返す
function oci fetch $statement	oci _parse で 作成 し て oci _execute で 実行 し た 有効 な oci 8 ステートメント id 、 あるい は ref cursor ステートメント id
function bool oci fetch	成功 し た 場合 に true 、 statement にもう 行 が ない 場合 に false を 返し ます
function bool oci fetch resource $statement	クエリ の 次 の 行 を 内部 バッファ に 取得 する
function oci field is null $field	( 1 から 始まる フィールド 番号 、 また は フィールド 名
function oci field is null $statement	有効 な oci ステートメント id
function bool oci field is null	field が null の 場合 に true 、 それ 以外 の 場合 に false を 返し ます
function bool oci field is null resource $statement mixed $field	フェッチ し た フィールド が null で ある かど う か を 確認 する
function oci field name $field	フィールド 番号 1 から 始まる あるい は 名前 のい ずれ か
function oci field name $statement	有効 な oci ステートメント id
function string oci field name	名前 を 表す 文字 列 、 あるい は エラー 時 に false を 返し ます
function string oci field name resource $statement mixed $field	文 から の フィールド 名 を 返す
function oci field precision $field	フィールド 番号 1 から 始まる あるい は 名前 のい ずれ か
function oci field precision $statement	有効 な oci ステートメント id
function int oci field precision	精度 を 表す 整数 値 、 あるい は エラー 時 に false を 返し ます
function int oci field precision resource $statement mixed $field	フィールド の 精度 を 問い合わせる
function oci field scale $field	フィールド 番号 1 から 始まる あるい は 名前 のい ずれ か
function oci field scale $statement	有効 な oci ステートメント id
function int oci field scale	桁数 を 表す 整数 値 、 あるい は エラー 時 に false を 返し ます
function int oci field scale resource $statement mixed $field	フィールド の 桁数 を 問い合わせる
function oci field type raw $field	フィールド 番号 1 から 始まる あるい は 名前 のい ずれ か
function oci field type raw $statement	有効 な oci ステートメント id
function int oci field type raw	oracle の データ 型 を 表す 数値 、 あるい は エラー 時 に false を 返し ます
function int oci field type raw resource $statement mixed $field	oracle における フィールド の 型 を 問い合わせる
function oci free statement $statement	有効 な oci ステートメント id
function bool oci free statement	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool oci free statement resource $statement	文や カーソル に 関連 付け られ た 全て の リソース を 解放 する
function oci internal debug $onoff	これ を false に する と デバッグ 出力 を オフ に し 、 true に する と オン に なり ます
function void oci internal debug bool $onoff	内部 デバッグ 用 の 出力 を 有効 また は 無効 に する
function oci lob is equal $lob2	lob の id
function oci lob is equal $lob1	lob の id
function bool oci lob is equal	これら の オブジェクト が 等しい 場合 true を 返し 、 そう で なけれ ば false を 返し ます
function bool oci lob is equal OCI-Lob $lob1 OCI-Lob $lob2	2 つの lob / file ロケータ の 等価 性 を 比較 する
function oci new collection $connection	oci _connect あるい は oci _pconnect が 返す oracle 接続 id
function oci new collection $schema	型 を 作成 し た スキーマ を 指定 し なけれ ば なり ませ ん
function oci new collection $tdo	有効 な 型名 大文字
function OCI-Collection oci new collection	新しい ocicollection オブジェクト 、 あるい は エラー 時 に false を 返し ます
function OCI-Collection oci new collection resource $connection string $tdo string $schema	新しい コレクションオブジェクト を 割り 当てる
function oci new connect $connection_string	接続先 の oracle インスタンス
function oci new connect $character_set	oracle クライアントライブラリ が 使う 文字 セット を 指定 し ます
function oci new connect $session_mode	この パラメータ は php 5 pecl oci 8 1
function oci new connect $password	username の パスワード
function oci new connect $username	oracle の ユーザー 名
function resource oci new connect	接続 id 、 あるい は エラー 時 に false を 返し ます
function resource oci new connect string $username string $password string $connection_string string $character_set int $session_mode	一意 な 接続 を 使っ て oracle サーバー へ 接続 する
function oci num fields $statement	有効 な oci ステートメント id
function int oci num fields	カラム の 数 を 表す 整数 値 、 あるい は エラー 時 に false を 返し ます
function int oci num fields resource $statement	ある 文 に おける 結果 の カラム 数 を 返す
function oci parse $connection	oci _connect 、 oci _pconnect あるい は oci _new _connect が 返す oracle 接続 id
function oci parse $sql_text	sql あるい は pl / sql ステートメント
function resource oci parse	成功 し た 場合 に ステートメントハンドル 、 あるい は エラー 時 に false を 返し ます
function resource oci parse resource $connection string $sql_text	実行 の ため に oracle の 文 を パース する
function oci password change $connection	oci _connect あるい は oci _pconnect が 返す oracle 接続 id
function oci password change $new_password	設定 し たい 、 新しい パスワード
function oci password change $dbname	データベース 名
function oci password change $old_password	旧 パスワード
function oci password change $username	oracle の ユーザー 名
function bool oci password change	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool oci password change resource $connection string $username string $old_password string $new_password	oracle ユーザー の パスワード を 変更 する
function oci pconnect $connection_string	接続先 の oracle インスタンス
function oci pconnect $character_set	oracle クライアントライブラリ が 使う 文字 セット を 指定 し ます
function oci pconnect $session_mode	この パラメータ は php 5 pecl oci 8 1
function oci pconnect $password	username の パスワード
function oci pconnect $username	oracle の ユーザー 名
function resource oci pconnect	接続 id 、 あるい は エラー 時 に false を 返し ます
function resource oci pconnect string $username string $password string $connection_string string $character_set int $session_mode	持続 的 接続 を 使用 し て oracle データベース に 接続 する
function oci result $field	カラム 番号 1 から 始まる また は カラム 名 大文字 のどちらか を 使用 可能 です
function mixed oci result	抽象型 rowid lob file を 除き 、 全て を 文字 列 として 返し ます
function mixed oci result resource $statement mixed $field	フェッチ し た 行 から フィールド の 値 を 取得 する
function string oci server version	バージョン 情報 を 表す 文字 列 、 あるい は エラー 時 に false を 返し ます
function string oci server version resource $connection	oracle データベース の バージョン を 返す
function oci set client info $connection	oci _connect 、 oci _pconnect あるい は oci _new _connect が 返す oracle 接続 id
function oci set client info $client_info	ユーザー が 選ん だ 、 長さ が 最高 6 4 バイト の 文字列
function bool oci set client info	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool oci set client info resource $connection string $client_info	クライアント 情報 を 設定 する
function oci set edition $edition	sql コマンド & quot ; create edition & quot ; であらかじめ 作成 さ れ た オラクル ・ データベース ・ エディション 名
function bool oci set edition	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool oci set edition string $edition	データベース ・ エディション を 設定 し ます
function oci statement type $statement	oci _parse が 返す 、 有効 な oci 8 ステートメント id
function string oci statement type	ステートメント statement の 種類 を 次 のい ずれ か の 値 で 返し ます
function string oci statement type resource $statement	ステートメント の 種類 を 返す
function odbc autocommit $OnOff	onoff が true の 場合 は 自動 コミット が 可能 で あり 、 false の 場合 は 自動 コミット が 使用 不可 と なっ て い ます
function odbc autocommit $connection_id	odbc 接続 id
function mixed odbc autocommit	onoff パラメータ を 指定 し ない 場合 、 この 関数 は 、 connection _id に関する 自動 コミット の 状態 を 返し ます
function mixed odbc autocommit resource $connection_id bool $OnOff	自動 コミット の 動作 を オン また は オフ に する
function odbc close $connection_id	odbc 接続 id
function void odbc close resource $connection_id	odbc 接続 を 閉じる
function odbc cursor $result_id	結果 id
function string odbc cursor	カーソル 名 を 文字列 で 返し ます
function string odbc cursor resource $result_id	カーソル 名 を 得る
function odbc data source $connection_id	odbc 接続 id
function odbc data source $fetch_type	fetch _type は 次 の ふたつ の 定数 sql _fetch _first sql _fetch _next のうち の どちらか です
function array odbc data source	エラー 時 に は false 、 成功時 に は 配列 を 返し ます
function array odbc data source resource $connection_id int $fetch_type	現在 の 接続 について の 情報 を 返す
function odbc exec $flags	この パラメータ は 現在 使用 し て いませ ん
function odbc exec $connection_id	odbc 接続 id
function odbc exec $query_string	sql 文
function resource odbc exec	sql コマンド の 実行 に 成功 し た 場合 に は 、 odbc 結果 id を 返し ます
function resource odbc exec resource $connection_id string $query_string int $flags	sql 文 を 準備 し 、 実行 する
function odbc execute $parameters_array	プリペアドステートメント の 中 の プレースホルダ が 、 parameter _array 内 の パラメータ で 順 に 置き 換え られ ます
function odbc execute $result_id	odbc _prepare で 取得 し た 結果 id リソース
function bool odbc execute	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool odbc execute resource $result_id array $parameters_array	プリペアドステートメント を 実行 する
function odbc fetch array $result	odbc _exec の 結果 リソース
function odbc fetch array $rownumber	ど の 行番 号 を 取得 する のか を 任意 で 指定 する
function array odbc fetch array	取得 し た 行 に 対応 する 配列 を 返し ます
function array odbc fetch array resource $result int $rownumber	連想 配列 として 結果 の 行 を 取得 する
function odbc fetch into $result_id	結果 リソース
function odbc fetch into $result_array	結果 の 配列
function odbc fetch into $rownumber	行番号
function int odbc fetch into	結果 に おける カラム 番号 を 返し ます
function int odbc fetch into resource $result_id array $result_array int $rownumber	一行ぶん の 結果 を 配列 に 取り込む
function odbc fetch row $result_id	結果 id
function odbc fetch row $row_number	row _number が 指定 さ れ ない 場合 、 odbc _fetch _row は 、 結果 セット に おける 次 の 行 を 取り込も う と 試み ます
function bool odbc fetch row	行 が あっ た 場合 に は true 、 それ 以外 の 場合 に false を 返し ます
function bool odbc fetch row resource $result_id int $row_number	行 を 取り込む
function odbc field num $result_id	結果 id
function odbc field num $field_name	フィールド 名
function int odbc field num	フィールド 番号 、 あるい は エラー 時 に false を 返し ます
function int odbc field num resource $result_id string $field_name	カラム 番号 を 返す
function odbc field scale $result_id	結果 id
function odbc field scale $field_number	フィールド 番号
function int odbc field scale	フィールド 番号 、 あるい は エラー 時 に false を 返し ます
function int odbc field scale resource $result_id int $field_number	フィールド の 精度 を 得る
function odbc field type $result_id	結果 id
function odbc field type $field_number	フィールド 番号
function string odbc field type	フィールド の 型 を 表す 文字 列 、 あるい は エラー 時 に false を 返し ます
function string odbc field type resource $result_id int $field_number	フィールド の データ 型 を 返す
function odbc free result $result_id	結果 id
function bool odbc free result	常 に true を 返し ます
function bool odbc free result resource $result_id	結果 を 保持 する リソース を 開放 する
function odbc gettypeinfo $data_type	データ 型
function odbc gettypeinfo $connection_id	odbc 接続 id
function resource odbc gettypeinfo	odbc 結果 id また は 失敗 し た 場合 に false を 返し ます
function resource odbc gettypeinfo resource $connection_id int $data_type	データソース が サポート する データ 型 について の 情報 を 取得 する
function odbc longreadlen $result_id	結果 id
function odbc longreadlen $length	php に 返さ れる バイト 数 は 、 パラメータ length により 制御 さ れ ます
function bool odbc longreadlen	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool odbc longreadlen resource $result_id int $length	long カラム を 処理 する
function odbc num fields $result_id	odbc _exec が 返す 結果 id
function int odbc num fields	フィールド 数 、 あるい は エラー 時 に - 1 を 返し ます
function int odbc num fields resource $result_id	結果 の カラム 数 を 返す
function odbc procedures $qualifier	修飾子
function odbc procedures $connection_id	odbc 接続 id
function odbc procedures $owner	所有 者
function odbc procedures $name	名前
function resource odbc procedures	情報 を 含む odbc 結果 id を 返し ます
function resource odbc procedures resource $connection_id	指定 し た データソース に 保存 さ れ て いる プロシージャ の リスト を 取得 する
function odbc result all $result_id	結果 id
function odbc result all $format	テーブル の フォーマット 指定
function int odbc result all	成功 の 場合 に 結果 の 行数 、 エラー の 場合 に false を 返し ます
function int odbc result all resource $result_id string $format	html テーブル として 結果 を 出力 する
function odbc rollback $connection_id	odbc 接続 id
function bool odbc rollback	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool odbc rollback resource $connection_id	トランザクション を ロールバック する
function odbc statistics $connection_id	odbc 接続 id
function odbc statistics $owner	所有 者
function odbc statistics $unique	unique 属性
function odbc statistics $table_name	テーブル 名
function odbc statistics $qualifier	修飾子
function odbc statistics $accuracy	正確 さ
function resource odbc statistics	odbc 結果 id を 返し ます
function resource odbc statistics resource $connection_id string $qualifier string $owner string $table_name int $unique int $accuracy	テーブル に関する 統計 情報 を 取得 する
function odbc tables $types	table _type が 空 の 文字列 で は ない 場合 、 検索 する 型 に ついて カンマ で 区切っ た 値 の リスト を 指定 する 必要 が あり ます
function odbc tables $qualifier	修飾子
function odbc tables $connection_id	odbc 接続 id
function odbc tables $owner	所有 者
function odbc tables $name	名前
function resource odbc tables	情報 を 含ん で いる odbc 結果 id を 返し ます
function resource odbc tables resource $connection_id string $qualifier string $owner string $name string $types	指定 し た データソース に 保存 さ れ た テーブル の 名前 の リスト を 取得 する
function opcache compile file $file	コンパイル し たい php スクリプト へ の パス
function boolean opcache compile file	file を 正常 に コンパイル し た とき に true を 返し ます
function boolean opcache compile file string $file	php スクリプト を 、 実行 せ ずに コンパイル し て キャッシュ する
function array opcache get configuration	情報 の 配列 を 返し ます
function array opcache get configuration	キャッシュ について の 構成 情報 を 取得
function opcache get status $get_scripts	スクリプト 固有 の 状態 の 情報 を 含む
function array opcache get status	情報 の 配列 を 返し ます
function array opcache get status boolean $get_scripts	キャッシュ について の ステータス 情報 を 取得
function openssl csr export to file $outfilename	出力 ファイル へ の パス
function openssl csr export to file $notext	オプション の パラメータ notext を 設定 する と 、 出力 内容 の 冗長 性 が 変化 し ます
function bool openssl csr export to file	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool openssl csr export to file resource $csr string $outfilename bool $notext	csr を ファイル に エクスポート する
function openssl csr export $notext	オプション の パラメータ notext を 設定 する と 、 出力 内容 の 冗長 性 が 変化 し ます
function bool openssl csr export	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool openssl csr export resource $csr string $out bool $notext	csr を 文字 列 として エクスポート する
function openssl csr new $dn	証明書 で 使用 さ れる 識別 名
function openssl csr new $configargs	デフォルト で は 、 システム の openssl
function openssl csr new $privkey	privkey に は 、 事前 に openssl _pkey _new （ あるい は その 他 の openssl _pkey 系 の 関数 ） で 作成 し た 秘密 鍵 を 設定 し ます
function openssl csr new $extraattribs	extraattribs は 、 csr に関する 追加 の 設定 情報 を 設定 する ため に 使用 し ます
function mixed openssl csr new	csr を 返し ます
function mixed openssl csr new array $dn resource $privkey array $configargs array $extraattribs	csr を 作成 する
function openssl get md methods $aliases	返さ れる array に ダイジェスト の エイリアス を 含める べき 場合 、 true に 設定 し ます
function array openssl get md methods	利用 可能 な ダイジェスト ・メソッド の array
function array openssl get md methods bool $aliases	利用 可能 な ダイジェスト ・メソッド を 取得
function openssl pkcs12 export $out	成功 し た 場合 に 、 ここに pkcs # 1 2 が 保存 さ れ ます
function openssl pkcs12 export $x509	使用 できる 値 の 一覧 は キー / 証明 書 パラメータ を 参照く ださい
function openssl pkcs12 export $pass	pkcs # 1 2 ファイル の ロック を 解除 する ため の パスワード
function openssl pkcs12 export $priv_key	pkcs # 1 2 ファイル の プライベートキーコンポーネント
function bool openssl pkcs12 export	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool openssl pkcs12 export mixed $x509 string $out mixed $priv_key string $pass array $args	pkcs # 1 2 互換 の 証明 書保存 ファイル を 変数 に エクスポート する
function openssl pkcs12 read $certs	成功 し た 場合 に 、 ここに 認証 ストアデータ が 格納 さ れ ます
function openssl pkcs12 read $pass	pkcs # 1 2 ファイル の ロック を 解除 する ため の パスワード
function openssl pkcs12 read $pkcs12	認証 ストア の 内容
function bool openssl pkcs12 read	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool openssl pkcs12 read string $pkcs12 array $certs string $pass	pkcs # 1 2 認証 ストア を パース し て 配列 形式 に する
function openssl pkcs7 encrypt $headers	headers は 、 暗号化 さ れ た 後 に データ の 前 に 付加 さ れる ヘッダ の 配列 です
function openssl pkcs7 encrypt $cipherid	暗号 定数 のうち の 一つ
function openssl pkcs7 encrypt $flags	flags は オプション として 使用 可能 で あり 、 エンコード 処理 を 変更 する ため に 指定 し ます
function openssl pkcs7 encrypt $recipcerts	x
function bool openssl pkcs7 encrypt	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool openssl pkcs7 encrypt string $infile string $outfile mixed $recipcerts array $headers int $flags int $cipherid	s / mime メッセージ を 暗号 化 する
function openssl pkcs7 sign $headers	headers は 、 ヘッダ の 配列 です
function openssl pkcs7 sign $flags	flags を 出力 を 変更 する ため に 使用 する こと が 可能 です
function openssl pkcs7 sign $extracerts	extracerts に は 、 サイン に 含める ため の 他 の 一連 の 証明 書 を 記述 し た ファイル 名 を 指定 し ます
function bool openssl pkcs7 sign	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool openssl pkcs7 sign string $infilename string $outfilename mixed $signcert mixed $privkey array $headers int $flags string $extracerts	s / mime メッセージ に サイン する
function openssl pkcs7 verify $cainfo	cainfo が 指定 さ れ た 場合 、 検証 処理 で 使用 する ため に 認証 済み の ca 証明 書 に関する 情報 を 保持 する 必要 が あり ます
function openssl pkcs7 verify $filename	メッセージ へ の パス
function openssl pkcs7 verify $outfilename	outfilename を 指定 する 場合 、 メッセージ に 署名 し た 人 の 証明 書 が pem 形式 で 保存 さ れ た ファイル の 名前 を この 変数 に 指定 する 必要 が あり ます
function openssl pkcs7 verify $content	ファイル 名 ととも に content を 指定 する と 、 検証 し た データ が ここ に 格納 さ れ ます
function openssl pkcs7 verify $flags	flags により 署名 の 検証 方法 を 指定 する こと が 可能 です
function openssl pkcs7 verify $extracerts	extracerts が 指定 さ れ た 場合 、 これ は 未認 証 の ca として 一連 の 証明 書 を 使用 する ため の ファイル の 名前 と なり ます
function mixed openssl pkcs7 verify	署名 が 検証 さ れ た 場合 は true 、 正しく ない 場合 メッセージ が 改暫 さ れ たか 署名 に 用い られ た 証明 書 が 無効 は false 、 エラー の 場合 に - 1 を 返し ます
function mixed openssl pkcs7 verify string $filename int $flags string $outfilename array $cainfo string $extracerts string $content	s / mime で サイン さ れ た メッセージ の 署名 を 検証 する
function openssl pkey export to file $passphrase	オプション で passphrase を 使用 し て キー を 保護 する こと が 可能 です
function openssl pkey export to file $outfilename	出力 ファイル へ の パス
function openssl pkey export to file $configargs	configargs により openssl 設定 ファイル の 設定 を 追加 し たり 上書き し たり する こと で 、 エクスポート 処理 の 詳細 設定 が 可能 です
function bool openssl pkey export to file	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool openssl pkey export to file mixed $key string $outfilename string $passphrase array $configargs	エクスポート 可能 な 形式 で 、 キー を ファイル に 取得 する
function openssl pkey export $passphrase	オプション で passphrase を 使用 し て キー を 保護 する こと が 可能 です
function openssl pkey export $configargs	configargs により openssl 設定 ファイル の 設定 を 追加 し たり 上書き し たり する こと で 、 エクスポート 処理 の 詳細 設定 が 可能 です
function bool openssl pkey export	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool openssl pkey export mixed $key string $out string $passphrase array $configargs	エクスポート 可能 な 形式 で 、 キー を 文字列 に 取得 する
function openssl pkey free $key	キー を 保持 する リソース
function void openssl pkey free resource $key	秘密鍵 を 開放 する
function openssl pkey get private $key	key は 以下 のい ずれ か です
function openssl pkey get private $passphrase	指定 さ れ た キー が （ パスフレーズ を 用い て ） 暗号 化 さ れ て いる 場合 は 、 オプション の パラメータ passphrase を 使用 する 必要 が あり ます
function resource openssl pkey get private	成功 し た 場合 に 正 の キーリソース id 、 エラー 時 に false を 返し ます
function resource openssl pkey get private mixed $key string $passphrase	秘密鍵 を 取得 する
function openssl private decrypt $padding	padding に は 、 openssl _pkcs 1 _ padding 、 openssl _sslv 2 3 _ padding 、 openssl _pkcs 1 _ oaep _padding 、 openssl _no _padding が 指定 可能 です
function openssl private decrypt $key	key は 、 データ の 暗号 化 に 使用 し た もの に対応 する 秘密 鍵 で ある 必要 が あり ます
function bool openssl private decrypt	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool openssl private decrypt string $data string $decrypted mixed $key int $padding	秘密鍵 で データ を 復号 する
function openssl private encrypt $padding	padding に は openssl _pkcs 1 _ padding あるい は openssl _no _padding が 指定 可能 です
function bool openssl private encrypt	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool openssl private encrypt string $data string $crypted mixed $key int $padding	秘密鍵 で データ を 暗号 化 する
function openssl public encrypt $key	公開鍵
function openssl public encrypt $crypted	暗号化 し た 結果 が ここ に 格納 さ れ ます
function openssl public encrypt $padding	padding に は openssl _pkcs 1 _ padding 、 openssl _sslv 2 3 _ padding 、 openssl _pkcs 1 _ oaep _padding 、 openssl _no _padding が 指定 可能 です
function bool openssl public encrypt	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool openssl public encrypt string $data string $crypted mixed $key int $padding	公開鍵 で データ を 暗号 化 する
function openssl random pseudo bytes $crypto_strong	これ を 渡し て おく と 、 使っ た アルゴリズム が 暗号 学的 に 強い もの で ある かど う か を 表す boolean 値 が 格納 さ れ ます
function openssl random pseudo bytes $length	希望 する バイト 長
function string openssl random pseudo bytes	成功 し た 場合 は 指定 し た バイト 長 の string を 返し ます
function string openssl random pseudo bytes int $length bool $crypto_strong	疑似 乱数 の バイト 文字 列 を 生成 する
function openssl seal $env_keys	暗号化 し た キー の 配列
function openssl seal $sealed_data	シール 済み の データ
function openssl seal $data	シール する データ
function openssl seal $pub_key_ids	公開鍵 リソース id の 配列
function openssl seal $method	暗号化 の 手法
function int openssl seal	成功時 に シール 暗号 化 さ れ た データ の 長 さ 、 エラー 時 に false を 返し ます
function int openssl seal string $data string $sealed_data array $env_keys array $pub_key_ids string $method	データ を シール 暗号 化 する
function openssl sign $signature	成功 し た 場合 、 署名 が signature に 格納 さ れ ます
function openssl sign $priv_key_id	resource - openssl _get _privatekey が 返す鍵
function openssl sign $data	署名 し たい データ の 文字列
function openssl sign $signature_alg	int - いずれ か の 署名 アルゴリズム
function bool openssl sign	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool openssl sign string $data string $signature mixed $priv_key_id mixed $signature_alg	署名 を 生成 する
function openssl x509 check private key $cert	証明書
function openssl x509 check private key $key	秘密鍵
function bool openssl x509 check private key	key が cert に対応 する 秘密 鍵 の 場合 に true 、 それ 以外 の 場合 に false を 返し ます
function bool openssl x509 check private key mixed $cert mixed $key	秘密鍵 が 証明 書 に 対応 する か を 確認 する
function openssl x509 checkpurpose $untrustedfile	指定 し た 場合 は 、 これ が 証明 書 を 含む pem エンコード さ れ た ファイル の 名前 に なり ます
function openssl x509 checkpurpose $cainfo	cainfo は 、 証明書 の 認証 で 説明 し た よう な 信頼 できる ca ファイル / ディレクトリ の 配列 です
function openssl x509 checkpurpose $x509cert	調べ たい 証明 書
function int openssl x509 checkpurpose	証明書 が 意図 し た 目的 に 使用 可能 で ある 場合 に true 、 使用 でき ない 場合 に false 、 エラー の 場合 に - 1 を 返し ます
function int openssl x509 checkpurpose mixed $x509cert int $purpose array $cainfo string $untrustedfile	証明書 が 特定 の 目的 に 使用 可能 か どう か 確認 する
function openssl x509 parse $shortnames	shortnames は 、 配列 中 で の データ の 添字 付け の 方法 を 設定 し ます
function array openssl x509 parse	返さ れる データ の 構造 について は （わざ と ）まだ 文書化 し て いませ ん
function array openssl x509 parse mixed $x509cert bool $shortnames	x 5 0 9 証明 書 を パース し 、 配列 として 情報 を 返す
function resource openssl x509 read	成功 し た 場合 に リソース id 、 失敗 し た 場合 に false を 返し ます
function resource openssl x509 read mixed $x509certdata	x
function ord $string	文字
function int ord	ascii 値 を 返し ます
function int ord string $string	文字 の ascii 値 を 返す
function override function $function_args	関数 へ の 引数 を カンマ 区切り の 文字 列 で 指定 し ます
function override function $function_name	上書き する 関数
function override function $function_code	関数 の 新しい コード
function bool override function	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool override function string $function_name string $function_args string $function_code	組み込み の 関数 を 上書き する
function pack $format	フォーマット 文字 列 は 、 フォーマットコード の 後 に オプション の 反復 指定 用引 数 が 続く 形式 と なっ て い ます
function string pack	バイナリ 文字 列 を 含む データ を 返し ます
function string pack string $format mixed $args	データ を バイナリ 文字列 に パック する
function parse ini file $process_sections	process _sections パラメータ に true を 設定 する と 、 セクション 名 と 設定 が 含ま れ た 多次 元 の 配列 を 得る こと が でき ます
function parse ini file $scanner_mode	ini _scanner _normal デフォルト あるい は ini _scanner _raw
function parse ini file $filename	パース し たい ini ファイル の ファイル 名
function array parse ini file	成功 し た 場合 に 設定 を 連想 配列 形式 で 返し ます
function array parse ini file string $filename bool $process_sections int $scanner_mode	設定 ファイル を パース する
function parse ini string $ini	パース し たい ini ファイル の 内容
function parse ini string $scanner_mode	ini _scanner _normal デフォルト あるい は ini _scanner _raw
function parse ini string $process_sections	process _sections を true に 設定 する と 、 セクション 名 と 設定 を 含む 多次 元 配列 を 返し ます
function array parse ini string	成功 し た 場合 に 設定 を 連想 配列 形式 で 返し ます
function array parse ini string string $ini bool $process_sections int $scanner_mode	設定 文字列 を パース する
function parse str $arr	2 番目 の 引数 arr が 指定 さ れ た 場合 、 変数 は 、 代わり に 配列 の 要素 として この 変数 に 保存 さ れ ます
function parse str $str	入力 文字列
function void parse str string $str array $arr	文字列 を 処理 し 、 変数 に 代入 する
function parse url $url	パース する url
function mixed parse url	完全 に おかし な 形式 の url について は 、 parse _url は false を 返し ます
function mixed parse url string $url int $component	url を 解釈 し 、 その 構成 要素 を 返す
function passthru $return_var	引数 return _var が 存在 する 場合 、 unix コマンド の ステータス が この 変数 に 書か れ ます
function passthru $command	実行 する コマンド
function void passthru string $command int $return_var	外部 プログラム を 実行 し 、 未整 形 の 出力 を 表示 する
function password get info $hash	password _hash が 作っ た ハッシュ
function array password get info	三つ の 要素 を 持つ 連想 配列 を 返し ます
function array password get info string $hash	指定 し た ハッシュ に関する 情報 を 返す
function password hash $password	ユーザー の パスワード
function password hash $algo	パスワード の ハッシュ に 使う アルゴリズム を 表す パスワードアルゴリズム 定数
function password hash $options	オプション を 含む 連想 配列
function string password hash	ハッシュ し た パスワード を 返し ます
function string password hash string $password integer $algo array $options	パスワードハッシュ を 作る
function password needs rehash $algo	パスワード の ハッシュ に 使う アルゴリズム を 表す パスワードアルゴリズム 定数
function password needs rehash $hash	password _hash が 作っ た ハッシュ
function password needs rehash $options	オプション を 含む 連想 配列
function boolean password needs rehash	指定 し た algo と options に マッチ する ため に ハッシュ の 再計 算 が 必要 な 場合 は true 、 それ 以外 の 場合 は false を 返し ます
function boolean password needs rehash string $hash integer $algo array $options	指定 し た ハッシュ が オプション に マッチ する かど う か を 調べる
function password verify $password	ユーザー の パスワード
function password verify $hash	password _hash が 作っ た ハッシュ
function boolean password verify	パスワード と ハッシュ が マッチ する 場合 に true 、 それ 以外 の 場合 に false を 返し ます
function boolean password verify string $password string $hash	パスワード が ハッシュ に マッチ する かど う か を 調べる
function pclose $handle	ファイルポインタ は 有効 なもの で なけれ ば なら ず 、 また popen で 正常 に オープン さ れ た もの で ある 必要 が あり ます
function int pclose	実行 し て い た プロセス の 終了 ステータス を 返し ます
function int pclose resource $handle	プロセス の ファイルポインタ を クローズ する
function pcntl alarm $seconds	待機 する 秒数
function int pcntl alarm	それ まで に 予定 さ れ て い た アラーム の 予定 時刻 まで の 秒数 を 返し ます
function int pcntl alarm int $seconds	シグナル を 送信 する アラーム を 設定 する
function pcntl exec $envs	envs は 、 プログラム に 渡す 環境 変数 の 配列 です
function pcntl exec $args	args は 、 プログラム に 渡す 引数 文字 列 の 配列 です
function pcntl exec $path	path は 、 バイナリ 実行 ファイル へ の パス か 、 あるい は 有効 な 実行 ファイル を 指す shebang 例 : #! / usr / local / bin / perl が 一行目 に 存在 する スクリプト へ の パス で ある 必要 が あり ます
function bool pcntl exec	エラー 時 に false を 返し 、 成功 時 に は 何 も 返し ませ ん
function bool pcntl exec string $path array $args array $envs	現在 の プロセス 空間 で 指定 し た プログラム を 実行 する
function int pcntl fork	成功時 に 、子プロセス の pid が 親 プロセス の 実行 スレッド に 返さ れ 、 子 プロセス の 実行 スレッド に は 0 が 返さ れ ます
function int pcntl fork	現在 実行 中 の プロセス を フォーク する
function pcntl getpriority $pid	指定 し なかっ た 場合 は 、 現在 の プロセス の pid を 使用 し ます
function pcntl getpriority $process_identifier	prio _pgrp 、 prio _user あるい は prio _process のいずれ か
function int pcntl getpriority	pcntl _getpriority は プロセス の 優先 度 を 返し ます
function int pcntl getpriority int $pid int $process_identifier	プロセス の 優先 度 を 取得 する
function pcntl setpriority $pid	指定 し ない 場合 は 、 現在 の プロセス の pid を 使用 し ます
function pcntl setpriority $process_identifier	prio _pgrp 、 prio _user あるい は prio _process のいずれ か です
function pcntl setpriority $priority	priority は 一般 的 に は - 2 0 から 2 0 まで の 値 です
function bool pcntl setpriority	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool pcntl setpriority int $priority int $pid int $process_identifier	プロセス の 優先 度 を 変更 する
function bool pcntl signal dispatch	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool pcntl signal dispatch	ペンディングシグナル 用 の ハンドラ を コール する
function pcntl signal $signo	処理 する シグナル
function pcntl signal $handler	シグナルハンドラ
function pcntl signal $signo	シグナル 番号
function pcntl signal $restart_syscalls	再 起動 の システムコール に 対応 する かど う か を 設定 し ます
function bool pcntl signal	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool pcntl signal int $signo callable|int $handler bool $restart_syscalls	シグナルハンドラ を 設定 する
function pcntl sigtimedwait $seconds	タイムアウト の 秒数
function pcntl sigtimedwait $nanoseconds	タイムアウト の ナノ 秒数
function pcntl sigtimedwait $set	待つ シグナル の 配列
function pcntl sigtimedwait $siginfo	シグナル について の 情報 を 含む 配列 が siginfo に 設定 さ れ ます
function int pcntl sigtimedwait	成功 し た 場合 に pcntl _sigtimedwait は シグナル 番号 を 返し ます
function int pcntl sigtimedwait array $set array $siginfo int $seconds int $nanoseconds	タイムアウト つき で シグナル を 待つ
function pcntl wexitstatus $status	パラメータ status は 、 pcntl _waitpid が 正常 に コール さ れ た 際 に 得 られ ます
function int pcntl wexitstatus	リターンコード を 表す 整数 値 を 返し ます
function int pcntl wexitstatus int $status	終了 し た 子 プロセス の リターンコード を 返す
function pcntl wifexited $status	パラメータ status は 、 pcntl _waitpid が 正常 に コール さ れ た 際 に 得 られ ます
function bool pcntl wifexited	子 プロセス の ステータスコード が 終了 に 成功 し た 場合 に true 、 それ 以外 の 場合 に false を 返し ます
function bool pcntl wifexited int $status	ステータスコード が 正常 終了 を 表し て いる かど う か を 調べる
function pcntl wifsignaled $status	パラメータ status は 、 pcntl _waitpid が 正常 に コール さ れ た 際 に 得 られ ます
function bool pcntl wifsignaled	捕捉 さ れ なかっ た シグナル の せい で 子 プロセス が 終了 し た 場合 に true 、 それ 以外 の 場合 に false を 返し ます
function bool pcntl wifsignaled int $status	ステータスコード が シグナル による 終了 を 表し て いる かど う か を 調べる
function pcntl wifstopped $status	パラメータ status は 、 pcntl _waitpid が 正常 に コール さ れ た 際 に 得 られ ます
function bool pcntl wifstopped	リターン を 生じ た 子 プロセス が 現在 停止 し て いる 場合 に true 、 それ 以外 の 場合 に false を 返し ます
function bool pcntl wifstopped int $status	子 プロセス が 現在 停止 し て いる かど う か を 調べる
function pcntl wtermsig $status	パラメータ status は 、 pcntl _waitpid が 正常 に コール さ れ た 際 に 得 られ ます
function int pcntl wtermsig	シグナル 番号 を 表す 整数 値 を 返し ます
function int pcntl wtermsig int $status	子 プロセス を 終了 さ せ た シグナル を 返す
function bool PDF activate item resource $pdfdoc int $id	構造体 要素 やその 他 の 内容 を アクティブ に する
function bool PDF add launchlink resource $pdfdoc float $llx float $lly float $urx float $ury string $filename	現在 の ページ に 起動 用注 記 を 追加 する [ 古い 関数 ]
function bool PDF add nameddest resource $pdfdoc string $name string $optlist	移動先 を 作成 する
function int PDF add table cell resource $pdfdoc int $table int $column int $row string $text string $optlist	新しい テーブル 、 あるい は 既存 の テーブル に セル を 追加 する
function int PDF add textflow resource $pdfdoc int $textflow string $text string $optlist	textflow を 作成 する か 、 既存 の textflow に テキスト を 追加 する
function bool PDF add thumbnail resource $pdfdoc int $image	現在 の ページ に サムネイル を 追加 する
function bool PDF add weblink resource $pdfdoc float $lowerleftx float $lowerlefty float $upperrightx float $upperrighty string $url	現在 の ページ に web リンク を 追加 する [ 古い 関数 ]
function bool PDF arcn resource $p float $x float $y float $r float $alpha float $beta	時計 回り に 円弧 を 描く
function int PDF begin document resource $pdfdoc string $filename string $optlist	新しい pdf ファイル を 作成 する
function int PDF begin item resource $pdfdoc string $tag string $optlist	構造体 要素 ある い は その 他 の 内容 を オープン する
function bool PDF begin layer resource $pdfdoc int $layer	レイヤー を 開始 する
function bool PDF begin page ext resource $pdfdoc float $width float $height string $optlist	新規 ページ を 開始 する
function bool PDF begin page resource $pdfdoc float $width float $height	新規 ページ を 開始 する [ 古い 関数 ]
function int PDF begin template ext resource $pdfdoc float $width float $height string $optlist	テンプレート 定義 を 開始 する
function int PDF begin template resource $pdfdoc float $width float $height	テンプレート 定義 を 開始 する [ 古い 関数 ]
function bool PDF clip resource $p	現在 の パス に 切り取る
function bool PDF close image resource $p int $image	画像 を 閉じる
function bool PDF close pdi page resource $p int $page	ページハンドル を 閉じる
function bool PDF close pdi resource $p int $doc	pdf ドキュメント 入力 を 閉じる [ 古い 関数 ]
function bool PDF close resource $p	pdf ドキュメント を 閉じる [ 古い 関数 ]
function bool PDF closepath stroke resource $p	パス を 閉じ 、 パス に 沿っ て 線 を 描く
function bool PDF closepath resource $p	現在 の パス を 閉じる
function bool PDF concat resource $p float $a float $b float $c float $d float $e float $f	行列 を ctm に 追加 する
function int PDF create 3dview resource $pdfdoc string $username string $optlist	3d ビュー を 作成 する
function int PDF create action resource $pdfdoc string $type string $optlist	オブジェクト や イベント に対する アクション を 作成 する
function bool PDF create annotation resource $pdfdoc float $llx float $lly float $urx float $ury string $type string $optlist	矩形 の 注記 を 作成 する
function int PDF create bookmark resource $pdfdoc string $text string $optlist	ブックマーク を 作成 する
function int PDF create textflow resource $pdfdoc string $text string $optlist	textflow オブジェクト を 作成 する
function bool PDF curveto resource $p float $x1 float $y1 float $x2 float $y2 float $x3 float $y3	ベジエ 曲線 を 描く
function int PDF define layer resource $pdfdoc string $name string $optlist	レイヤー 定義 を 作成 する
function int PDF delete pvf resource $pdfdoc string $filename	pdflib 仮想 ファイル を 削除 する
function bool PDF delete textflow resource $pdfdoc int $textflow	textflow オブジェクト を 削除 する
function bool PDF delete resource $pdfdoc	pdflib オブジェクト を 削除 する
function bool PDF encoding set char resource $pdfdoc string $encoding int $slot string $glyphname int $uv	グリフ 名 や unicode 値 を 追加 する
function bool PDF end document resource $pdfdoc string $optlist	pdf ファイル を 閉じる
function bool PDF end font resource $pdfdoc	type 3 フォント 定義 を 終了 する
function bool PDF end item resource $pdfdoc int $id	構造体 要素 やその 他 の 内容 を 閉じる
function bool PDF end layer resource $pdfdoc	すべて の アクティブ な レイヤー を 無効 に する
function bool PDF end page ext resource $pdfdoc string $optlist	ページ を 終了 する
function bool PDF end pattern resource $p	パターン を 終了 する
function bool PDF end template resource $p	テンプレート を 終了 する
function bool PDF endpath resource $p	現在 の パス を 終了 する
function int PDF fill imageblock resource $pdfdoc int $page string $blockname int $image string $optlist	画像 ブロック を さまざまな データ で 塗り つぶす
function int PDF fill pdfblock resource $pdfdoc int $page string $blockname int $contents string $optlist	pdf ブロック を さまざまな データ で 塗り つぶす
function int PDF findfont resource $p string $fontname string $encoding int $embed	後 で 使用 する フォント を 準備 する [ 古い 関数 ]
function bool PDF fit pdi page resource $pdfdoc int $page float $x float $y string $optlist	インポート し た pdf ページ を 配置 する
function string PDF fit table resource $pdfdoc int $table float $llx float $lly float $urx float $ury string $optlist	テーブル を ページ に 配置 する
function string PDF fit textflow resource $pdfdoc int $textflow float $llx float $lly float $urx float $ury string $optlist	textflow を 矩形 領域 に 配置 する
function string PDF get buffer resource $p	pdf 出力 バッファ を 取得 する
function string PDF get errmsg resource $pdfdoc	エラーテキスト を 取得 する
function int PDF get errnum resource $pdfdoc	エラー 番号 を 取得 する
function int PDF get majorversion	メジャーバージョン 番号 を 取得 する [ 古い 関数 ]
function int PDF get minorversion	マイナーバージョン 番号 を 取得 する [ 古い 関数 ]
function string PDF get parameter resource $p string $key float $modifier	文字列 パラメータ を 取得 する
function string PDF get pdi parameter resource $p string $key int $doc int $page int $reserved	pdi 文字列 パラメータ を 取得 する [ 古い 関数 ]
function float PDF get pdi value resource $p string $key int $doc int $page int $reserved	数 値型 の pdi パラメータ を 取得 する [ 古い 関数 ]
function float PDF info font resource $pdfdoc int $font string $keyword string $optlist	読み込ま れ た フォント について の 詳細 情報 を 問い合わせる
function float PDF info table resource $pdfdoc int $table string $keyword	テーブル の 情報 を 取得 する
function float PDF info textflow resource $pdfdoc int $textflow string $keyword	textflow の 状態 を 問い合わせる
function float PDF info textline resource $pdfdoc string $text string $keyword string $optlist	テキスト の 行 の フォーマット を 行い 、 メトリクス を 問い合わせる
function bool PDF initgraphics resource $p	描画 状態 を リセット する
function int PDF load 3ddata resource $pdfdoc string $filename string $optlist	3d モデル を 読み込む
function int PDF load font resource $pdfdoc string $fontname string $encoding string $optlist	フォント を 検索 し 、 準備 する
function int PDF load iccprofile resource $pdfdoc string $profilename string $optlist	icc プロファイル を 検索 し 、 準備 する
function int PDF makespotcolor resource $p string $spotname	スポット 色 を 作成 する
function bool PDF moveto resource $p float $x float $y	現在 の 位置 を 設定 する
function resource PDF new	pdflib オブジェクト を 作成 する
function int PDF open ccitt resource $pdfdoc string $filename int $width int $height int $BitReverse int $k int $Blackls1	raw ccitt イメージ を オープン する [ 古い 関数 ]
function bool PDF open file resource $p string $filename	pdf ファイル を 作成 する [ 古い 関数 ]
function int PDF open image file resource $p string $imagetype string $filename string $stringparam int $intparam	ファイル から イメージ を 読み込む [ 古い 関数 ]
function int PDF open pdi document resource $p string $filename string $optlist	pdi ドキュメント を 準備 する
function int PDF open pdi page resource $p int $doc int $pagenumber string $optlist	ページ を 準備 する
function string PDF pcos get stream resource $p int $doc string $optlist string $path	stream 、 fstream あるい は string 型 の pcos パス の 内容 を 取得 する
function string PDF pcos get string resource $p int $doc string $path	name 、 string あるい は boolean 型 の pcos パス の 値 を 取得 する
function bool PDF place image resource $pdfdoc int $image float $x float $y float $scale	イメージ を ページ 上 に 置く [ 古い 関数 ]
function int PDF process pdi resource $pdfdoc int $doc int $page string $optlist	インポート さ れ た pdf ドキュメント を 処理 する
function bool PDF rect resource $p float $x float $y float $width float $height	矩形 を 描く
function bool PDF restore resource $p	描画 状態 を 復元 する
function bool PDF resume page resource $pdfdoc string $optlist	ページ を 再開 する
function bool PDF rotate resource $p float $phi	座標系 を 回転 する
function bool PDF save resource $p	描画 状態 を 保存 する
function bool PDF scale resource $p float $sx float $sy	スケール を 設定 する
function bool PDF set border dash resource $pdfdoc float $black float $white	注記 の 周り の 境界 の 破線 形式 を 設定 する [ 古い 関数 ]
function bool PDF set border style resource $pdfdoc string $style float $width	注記 の 周り の 境界 の 形式 を 設定 する [ 古い 関数 ]
function bool PDF set parameter resource $p string $key string $value	文字列 パラメータ を 設定 する
function bool PDF set text pos resource $p float $x float $y	テキスト の 位置 を 設定 する
function bool PDF setdashpattern resource $pdfdoc string $optlist	破線 パターン を 設定 する
function bool PDF setflat resource $pdfdoc float $flatness	平面度 を 設定 する
function bool PDF setgray fill resource $p float $g	塗りつぶし 色 を グレー に 設定 する [ 古い 関数 ]
function bool PDF setgray resource $p float $g	色 を グレー に 設定 する [ 古い 関数 ]
function bool PDF setlinecap resource $p int $linecap	linecap パラメータ を 設定 する
function bool PDF setlinejoin resource $p int $value	linejoin パラメータ を 設定 する
function bool PDF setlinewidth resource $p float $width	線幅 を 設定 する
function bool PDF setmiterlimit resource $pdfdoc float $miter	miter limit を 設定 する
function bool PDF setrgbcolor stroke resource $p float $red float $green float $blue	描画 rgb 色 を 設定 する [ 古い 関数 ]
function bool PDF shfill resource $pdfdoc int $shading	シェーディング で 領域 を 塗り つぶす
function bool PDF show xy resource $p string $text float $x float $y	指定 し た 位置 に テキスト を 出力 する
function bool PDF skew resource $p float $alpha float $beta	座標系 を 歪ませる
function float PDF stringwidth resource $p string $text int $font float $fontsize	テキスト の 幅 を 返す
function bool PDF suspend page resource $pdfdoc string $optlist	ページ を 停止 する
function string PDF utf16 to utf8 resource $pdfdoc string $utf16string	文字列 を utf - 1 6 から utf - 8 に 変換 する
function string PDF utf32 to utf16 resource $pdfdoc string $utf32string string $ordering	文字列 を utf - 3 2 から utf - 1 6 に 変換 する
function resource pfsockopen string $hostname int $port int $errno string $errstr float $timeout	持続 的 な internet また は unix ドメインソケット 接続 を オープン する
function pg affected rows $result	pg _query pg _query _params あるい は pg _execute から 返さ れる postgresql の クエリ 結果 リソース
function int pg affected rows	クエリ によっ て 変更 さ れ た 行 の 数 を 返し ます
function int pg affected rows resource $result	変更 さ れ た レコード タプル の 数 を 返す
function pg client encoding $connection	postgresql データベース 接続 リソース
function string pg client encoding	クライアント の エンコーディング を 返し ます
function string pg client encoding resource $connection	クライアント の エンコーディング を 取得 する
function pg close $connection	postgresql データベース 接続 リソース
function bool pg close	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool pg close resource $connection	postgresql 接続 を クローズ する
function pg connect $connect_type	pgsql _connect _force _new が 渡さ れ た 場合 は 、 たとえ connection _string が 既存 の 接続 と まっ たく 同 一 で あっ ても 新しい 接続 を オープン し ます
function pg connect $connection_string	すべ て デフォルト の パラメータ を 使用 する 場合 に は connection _string を 空に する こと が 可能 です
function resource pg connect	成功 し た 場合 に postgresql の 接続 リソース 、 失敗 し た 場合 に false を 返し ます
function resource pg connect string $connection_string int $connect_type	postgresql 接続 を オープン する
function pg connection reset $connection	postgresql データベース の 接続 リソース
function bool pg connection reset	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool pg connection reset resource $connection	接続 を リセット 再接 続 する
function pg connection status $connection	postgresql データベース の 接続 リソース
function int pg connection status	pgsql _connection _ok あるい は pgsql _connection _bad
function int pg connection status resource $connection	接続 ステータス を 取得 する
function pg convert $assoc_array	変換 さ れる データ
function pg convert $connection	postgresql データベース の 接続 リソース
function pg convert $options	pgsql _conv _ignore _default pgsql _conv _force _null あるい は pgsql _conv _ignore _not _null の 組み合わせ
function pg convert $table_name	変換 対象 と なる テーブル の 名前
function array pg convert	変換 さ れ た 値 の 配列 を 返し ます
function array pg convert resource $connection string $table_name array $assoc_array int $options	連想 配列 の 値 を 、 sql 文 として 実行 可能 な 形式 に 変換 する
function pg copy from $null_as	rows の 中 で 、 sql の null をど の よう に 表現 する か
function pg copy from $rows	table _name に コピー する データ の 配列
function pg copy from $connection	postgresql データベース の 接続 リソース
function pg copy from $delimiter	rows の 要素 内 で 、 各 フィールド に 対応 する 値 を 区切る 文字
function pg copy from $table_name	rows を コピー する テーブル の 名前
function bool pg copy from	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool pg copy from resource $connection string $table_name array $rows string $delimiter string $null_as	配列 から テーブル に 挿入 する
function pg copy to $null_as	rows の 中 で 、 sql の null をど の よう に 表現 する か
function pg copy to $table_name	データ を rows に コピー する テーブル の 名前
function pg copy to $connection	postgresql データベース の 接続 リソース
function pg copy to $delimiter	rows の 要素 内 で 、 各 フィールド に 対応 する 値 を 区切る 文字
function array pg copy to	copy さ れ た データ が 1 行ご と に ひとつ の 要素 と なっ て いる 配列 を 返し ます
function array pg copy to resource $connection string $table_name string $delimiter string $null_as	配列 に テーブル を コピー する
function pg delete $assoc_array	その キー が table _name テーブル の フィールド 名 、 値 が 削除 し たい フィールド の 値 と なっ て いる 配列
function pg delete $options	pgsql _conv _force _null 、 pgsql _dml _no _conv 、 pgsql _dml _escape 、 pgsql _dml _exec 、 pgsql _dml _async あるい は pgsql _dml _string を 組み合わせ た 数
function pg delete $connection	postgresql データベース の 接続 リソース
function pg delete $table_name	行 を 削除 する テーブル の 名前
function mixed pg delete	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function mixed pg delete resource $connection string $table_name array $assoc_array int $options	レコード を 削除 する
function pg escape bytea $connection	postgresql データベース 接続 リソース
function pg escape bytea $data	bytea 型 の カラム に 挿入 する テキスト また は バイナリデータ を 含む 文字列
function string pg escape bytea	エスケープ さ れ た データ を 文字列 で 返し ます
function string pg escape bytea resource $connection string $data	bytea フィールド に 挿入 する ため に 文字列 を エスケープ する
function pg fetch all columns $column	結果 リソース から 取得 する カラム の 番号
function pg fetch all columns $result	pg _query pg _query _params あるい は pg _execute から 返さ れる postgresql の クエリ 結果 リソース
function array pg fetch all columns	結果 カラム の 全て の 値 を 配列 で 返し ます
function array pg fetch all columns resource $result int $column	指定 し た カラム の 全て の 行 を 配列 として 取得 する
function pg fetch array $result_type	result _type は 、 返り値 の 形式 を 制御 する オプション の パラメータ です
function pg fetch array $result	pg _query pg _query _params あるい は pg _execute から 返さ れる postgresql の クエリ 結果 リソース
function pg fetch array $row	取得 する 行番 号
function array pg fetch array	0 から 始まる 数値 添字 の 配列 か 連想 配列 （ フィールド 名 を キー と する ）、 あるい は その 両方 を 返し ます
function array pg fetch array resource $result int $row int $result_type	行 を 配列 として 取得 する
function pg fetch row $result	pg _query pg _query _params あるい は pg _execute から 返さ れる postgresql の クエリ 結果 リソース
function pg fetch row $row	取得 する 行番 号
function array pg fetch row	個々 の 値 を 文字 列 として 格納 し た 配列 を 返し ます
function array pg fetch row resource $result int $row	数 値添 字 の 配列 として 行 を 得る
function pg field is null $row	取得 する 結果 の 行番 号
function pg field is null $result	pg _query pg _query _params あるい は pg _execute から 返さ れる postgresql の クエリ 結果 リソース
function pg field is null $field	（ 0 から 始まる ） フィールド 番号 を 表す 数値 、 あるい は フィールド 名 を 表す 文字列
function int pg field is null	指定 し た 行 の フィールド が sql の null だっ た 場合 に 1 、 そう で ない 場合 に 0 を 返し ます
function int pg field is null resource $result int $row mixed $field	フィールド が sql の null かどう か 調べる
function pg field prtlen $result	pg _query pg _query _params あるい は pg _execute から 返さ れる postgresql の クエリ 結果 リソース
function pg field prtlen $row	結果 の 行番 号
function int pg field prtlen	フィールド の 表示 さ れる 長さ を 返し ます
function int pg field prtlen resource $result int $row_number mixed $field_name_or_number	表示 さ れる 長さ を 返す
function pg field table $field_number	0 から 始まる フィールド 番号
function pg field table $result	pg _query 、 pg _query _params あるい は pg _execute その 他 も 含む から 返さ れ た 、 postgresql クエリ 結果 リソース
function pg field table $oid_only	デフォルト で は 、 フィールド が 属 する テーブル の 名前 が 返さ れ ます
function mixed pg field table	成功 し た 場合 に フィールド の テーブル 名 あるい は oid 、 あるい は 失敗 し た 場合 に false を 返し ます
function mixed pg field table resource $result int $field_number bool $oid_only	tables フィールド の 名前 あるい は oid を 返す
function pg field type oid $result	pg _query pg _query _params あるい は pg _execute から 返さ れる postgresql の クエリ 結果 リソース
function pg field type oid $field_number	フィールド 番号
function int pg field type oid	フィールド の 型 に 対応 する oid を 返し ます
function int pg field type oid resource $result int $field_number	フィールド 番号 に 対応 する 型 id （oid ） を 返す
function pg field type $result	pg _query pg _query _params あるい は pg _execute から 返さ れる postgresql の クエリ 結果 リソース
function pg field type $field_number	フィールド 番号
function string pg field type	フィールド 型 の 名前 を 文字列 で 返し ます
function string pg field type resource $result int $field_number	フィールド 番号 に 対応 する 型名 を 返す
function pg free result $result	pg _query pg _query _params あるい は pg _execute から 返さ れる postgresql の クエリ 結果 リソース
function bool pg free result	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool pg free result resource $result	メモリ を 開放 する
function pg get notify $result_type	result _type は 、 返り値 の 形式 を 制御 する オプション の パラメータ です
function pg get notify $connection	postgresql データベース の 接続 リソース
function array pg get notify	notify メッセージ 名 と バックエンド の pid を 含む 配列 を 返し ます
function array pg get notify resource $connection int $result_type	sql notify メッセージ を 取得 する
function pg get pid $connection	postgresql データベース の 接続 リソース
function int pg get pid	バックエンド の データベース の プロセス id
function int pg get pid resource $connection	バックエンド の プロセス id を 得る
function pg host $connection	postgresql データベース 接続 リソース
function string pg host	connection が 接続 し て いる ホスト の 名前 を 文字列 で 返し ます
function string pg host resource $connection	接続 に 関連 する ホスト 名 を 返す
function pg insert $options	pgsql _conv _opts 、 pgsql _dml _no _conv 、 pgsql _dml _escape 、 pgsql _dml _exec 、 pgsql _dml _async あるい は pgsql _dml _string を 組み合わせ た 数
function pg insert $assoc_array	テーブル table _name の フィールド 名 を キー に 、 挿入 する 内容 を 値に もつ 配列
function pg insert $connection	postgresql データベース の 接続 リソース
function pg insert $table_name	行 を 挿入 する テーブル の 名前
function mixed pg insert	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function mixed pg insert resource $connection string $table_name array $assoc_array int $options	テーブル に 配列 を 挿入 する
function pg last error $connection	postgresql データベース 接続 リソース
function string pg last error	指定 し た connection の 直近 の エラーメッセージ を 含む 文字 列 を 返し ます
function string pg last error resource $connection	特定 の 接続 から 直近 の エラーメッセージ 文字 列 を 取得 する
function pg last notice $connection	postgresql データベース の 接続 リソース
function string pg last notice	指定 さ れ た connection の 直近 の 通知 を 文字列 で 返し ます
function string pg last notice resource $connection	postgresql サーバー から の 直近 の 通知 メッセージ を 返す
function pg last oid $result	pg _query pg _query _params あるい は pg _execute から 返さ れる postgresql の クエリ 結果 リソース
function string pg last oid	指定 さ れ た connection で 、 直近 に 挿入 さ れ た 行 に 割り当て られ た oid を 文字列 で 返し ます
function string pg last oid resource $result	直近 の 行 の オブジェクト id を 返す
function pg lo close $result	postgresql large object lob resource returned by pg _lo _open
function bool pg lo close	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool pg lo close resource $large_object	ラージオブジェクト を クローズ する
function pg lo create $object_id	object _id が 指定 さ れる と 、 この 関数 は 指定 さ れ た id の ラージオブジェクト を 作成 しよ う とし ます
function pg lo create $connection	postgresql データベース 接続 リソース
function int pg lo create	ラージオブジェクト の oid を 返し ます
function int pg lo create resource $connection mixed $object_id	ラージオブジェクト を 生成 する
function pg lo export $connection	postgresql データベース 接続 リソース
function pg lo export $pathname	ラージオブジェクト を クライアント の ファイルシステム に 書き込む際 の フルパス と ファイル 名
function pg lo export $oid	データベース 内 の ラージオブジェクト の oid
function bool pg lo export	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool pg lo export resource $connection int $oid string $pathname	ラージオブジェクト を ファイル に エクスポート する
function pg lo import $object_id	object _id が 指定 さ れる と 、 この 関数 は 指定 さ れ た id の ラージオブジェクト を 作成 しよ う とし ます
function pg lo import $connection	postgresql データベース 接続 リソース
function pg lo import $pathname	クライアント の ファイルシステム から ラージオブジェクト 用 データ を 読み込む 際 の フルパス と ファイル 名
function int pg lo import	作成 さ れ た ラージオブジェクト の oid を 返し ます
function int pg lo import resource $connection string $pathname mixed $object_id	ファイル から ラージオブジェクト を インポート する
function pg lo open $mode	読み込み 専用 の & quot ;r &quot ;、 書き込み 専用 の & quot ;w &quot ;、 読み書き 可能 な & quot ;rw &quot ; のいずれ か
function pg lo open $connection	postgresql データベース 接続 リソース
function pg lo open $oid	データベース 内 の ラージオブジェクト の oid
function resource pg lo open	ラージオブジェクト の リソース を 返し ます
function resource pg lo open resource $connection int $oid string $mode	ラージオブジェクト を オープン する
function pg lo read all $large_object	pg _lo _open によって 返さ れ た postgresql ラージオブジェクト lob リソース
function int pg lo read all	読み込ん だ バイト 数 を 返し ます
function int pg lo read all resource $large_object	ラージオブジェクト 全体 を 読み込み ブラウザ に 直接 送信 する
function pg lo read $large_object	pg _lo _open によって 返さ れ た postgresql ラージオブジェクト lob リソース
function pg lo read $len	返す データ の 最大 バイト 数 （ オプション ）
function string pg lo read	ラージオブジェクト から len バイト の データ を 文字列 で 返し ます
function string pg lo read resource $large_object int $len	ラージオブジェクト を 読み込む
function pg lo seek $large_object	pg _lo _open が 返す postgresql の ラージオブジェクト lob リソース
function pg lo seek $offset	シーク する バイト 数
function pg lo seek $whence	定数 pgsql _seek _set （ オブジェクト の 先頭 から シーク する ）、 pgsql _seek _cur （ カレント の 位置 から シーク する ）、 あるい は pgsql _seek _end （ オブジェクト の 最後 から シーク する ） の 中 の ひとつ
function bool pg lo seek	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool pg lo seek resource $large_object int $offset int $whence	ラージオブジェクト の 位置 を シーク する
function pg lo unlink $connection	postgresql データベース 接続 リソース
function pg lo unlink $oid	データベース 内 の ラージオブジェクト の oid
function bool pg lo unlink	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool pg lo unlink resource $connection int $oid	ラージオブジェクト を 削除 する
function pg lo write $large_object	pg _lo _open によって 返さ れ た postgresql ラージオブジェクト lob リソース
function pg lo write $data	ラージオブジェクト に 書き込む データ
function pg lo write $len	書き込む データ の 最大 バイト 数 （ オプション ）
function int pg lo write	ラージオブジェクト に 書き込ん だ バイト 数 を 返し ます
function int pg lo write resource $large_object string $data int $len	ラージオブジェクト を 書く
function pg meta data $extended	拡張 メタデータ を 返す かど う か を 表す フラグ
function pg meta data $connection	postgresql データベース の 接続 リソース
function pg meta data $table_name	テーブル の 名前
function array pg meta data	テーブル 定義 の 配列 を 返し ます
function array pg meta data resource $connection string $table_name bool $extended	テーブル から メタデータ を 取得 する
function pg num fields $result	pg _query pg _query _params あるい は pg _execute から 返さ れる postgresql の クエリ 結果 リソース
function int pg num fields	結果 の フィールド （ カラム ） 数 を 返し ます
function int pg num fields resource $result	フィールド 数 を 返す
function pg options $connection	postgresql データベース 接続 リソース
function string pg options	connection の オプション を 文字列 で 返し ます
function string pg options resource $connection	接続 に 関連 する オプション を 取得 する
function pg parameter status $connection	postgresql データベース 接続 リソース
function pg parameter status $param_name	指定 可能 な param _name に は 以下 が 含ま れ ます
function string pg parameter status	パラメータ の 値 を 文字列 で 返し ます
function string pg parameter status resource $connection string $param_name	サーバー の パラメータ 設定 を 検索 する
function pg ping $connection	postgresql データベース 接続 リソース
function bool pg ping	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool pg ping resource $connection	データベース 接続 を 調べる
function pg port $connection	postgresql データベース 接続 リソース
function int pg port	connection が 指し て いる データベース の ポート 番号 を 含む int を 返し ます
function int pg port resource $connection	接続 に 関連 する ポート 番号 を 返す
function pg prepare $connection	postgresql データベース 接続 リソース
function pg prepare $stmtname	プリペアドステートメント につける 名前
function pg prepare $query	パラメータ 化 し た sql 文
function resource pg prepare	成功 し た 場合 に クエリ 結果 リソース 、 失敗 し た 場合 に false を 返し ます
function resource pg prepare resource $connection string $stmtname string $query	指定 し た パラメータ で プリペアドステートメント を 作成 する リクエスト を 送信 し 、 その 完了 を 待つ
function pg query $connection	postgresql データベース 接続 リソース
function pg query $query	実行 する 1 つまた は 複数 の sql 文
function resource pg query	成功 し た 場合 に クエリ 結果 リソース 、 失敗 し た 場合 に false を 返し ます
function resource pg query resource $connection string $query	クエリ を 実行 する
function pg result error field $fieldcode	以下 の fieldcode が 使用 可能 です
function pg result error field $result	実行 し た ステートメント の クエリ 結果 リソース
function string pg result error field	エラーフィールド の 内容 を 文字列 で 返し ます
function string pg result error field resource $result int $fieldcode	エラー 報告 の 各 フィールド を 返す
function pg result error $result	pg _query pg _query _params あるい は pg _execute から 返さ れる postgresql の クエリ 結果 リソース
function string pg result error	文字列 を 返し ます
function string pg result error resource $result	結果 に 関連 する エラーメッセージ を 取得 する
function pg result seek $offset	結果 リソース 内 で 、 内部 オフセット を 移動 さ せる 行
function pg result seek $result	pg _query pg _query _params あるい は pg _execute から 返さ れる postgresql の クエリ 結果 リソース
function bool pg result seek	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool pg result seek resource $result int $offset	結果 リソース の 内部 行 オフセット を 設定 する
function pg select $options	pgsql _conv _force _null 、 pgsql _dml _no _conv 、 pgsql _dml _escape 、 pgsql _dml _exec 、 pgsql _dml _async あるい は pgsql _dml _string の 組み合わせ
function pg select $assoc_array	テーブル table _name の フィールド 名 を キー に 、 そして 取得 対象 と なる 行 に マッチ する データ を 値に もつ 配列
function pg select $connection	postgresql データベース の 接続 リソース
function pg select $table_name	行 を 選択 する テーブル の 名前
function mixed pg select	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function mixed pg select resource $connection string $table_name array $assoc_array int $options	レコード を 選択 する
function pg send execute $connection	postgresql データベース 接続 リソース
function pg send execute $stmtname	実行 する プリペアドステートメント の 名前
function pg send execute $params	プリペアドステートメント 中 の $ 1 、$ 2 など の プレースホルダ を 置き換える パラメータ の 配列
function bool pg send execute	成功 し た 場合 に true 、 失敗 し た 場合 に false を 返し ます
function bool pg send execute resource $connection string $stmtname array $params	指定 し た パラメータ で プリペアドステートメント を 実行 する リクエスト を 送信 し 、 その 結果 を 待た ない
function pg send prepare $connection	postgresql データベース 接続 リソース
function pg send prepare $stmtname	プリペアドステートメント につける 名前
function pg send prepare $query	パラメータ 化 し た sql 文
function bool pg send prepare	成功 し た 場合 に true 、 失敗 し た 場合 に false を 返し ます
function bool pg send prepare resource $connection string $stmtname string $query	指定 し た パラメータ で プリペアドステートメント を 作成 する リクエスト を 送信 し 、 その 結果 を 待た ない
function pg send query params $params	プリペアドステートメント 中 の $ 1 、$ 2 など の プレースホルダ を 置き換える パラメータ の 配列
function pg send query params $query	パラメータ 化 し た sql 文
function pg send query params $connection	postgresql データベース の 接続 リソース
function bool pg send query params	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool pg send query params resource $connection string $query array $params	コマンド と パラメータ を 分割 し て サーバー に 送信 し 、 その 結果 を 待た ない
function pg send query $connection	postgresql データベース 接続 リソース
function pg send query $query	実行 する ひとつまた は 複数 の sql 文
function bool pg send query	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool pg send query resource $connection string $query	非 同期 クエリ を 送信 する
function pg set client encoding $connection	postgresql データベース 接続 リソース
function pg set client encoding $encoding	クライアントエンコーディング
function int pg set client encoding	成功 し た 場合 に 0 、 エラー 時 に - 1 を 返し ます
function int pg set client encoding resource $connection string $encoding	クライアント の エンコーディング を 設定 する
function pg transaction status $connection	postgresql データベース の 接続 リソース
function int pg transaction status	pgsql _transaction _idle （ アイドル 状態 ）、 pgsql _transaction _active （ コマンド の 実行 中 ）、 pgsql _transaction _intrans （ 正常 な トランザクション 内 で アイドル 状態 ）、 あるい は pgsql _transaction _inerror （ 失敗 し た トランザクション 内 で アイドル 状態 ） のいずれか を 返し ます
function int pg transaction status resource $connection	サーバー 上 で 実行 中 の トランザクション の 状態 を 返す
function pg tty $connection	postgresql データベース 接続 リソース
function string pg tty	connection の デバッグ tty を 文字列 で 返し ます
function string pg tty resource $connection	接続 に関する tty 名 を 返す
function pg untrace $connection	postgresql データベース 接続 リソース
function bool pg untrace	always returns true
function bool pg untrace resource $connection	postgresql 接続 の トレース を 無効 に する
function pg update $data	テーブル table _name の フィールド 名 を キー に 、 そして マッチ し た 対象 を 更新 する データ を 値に もつ 配列
function pg update $options	pgsql _conv _force _null 、 pgsql _dml _no _conv 、 pgsql _dml _escape 、 pgsql _dml _exec 、 pgsql _dml _async あるい は pgsql _dml _string の 組み合わせ
function pg update $table_name	行 を 更新 する テーブル の 名前
function pg update $connection	postgresql データベース の 接続 リソース
function pg update $condition	テーブル table _name の フィールド 名 を キー に 、 そして 取得 対象 と なる 行 に マッチ する データ を 値に もつ 配列
function mixed pg update	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function mixed pg update resource $connection string $table_name array $data array $condition int $options	テーブル を 更新 する
function pg version $connection	postgresql データベース 接続 リソース
function array pg version	client protocol および server の キー と その 値 を 持つ 配列 を 返し ます （ 有効 な 場合 ）
function array pg version resource $connection	クライアント ・ プロトコル ・ サーバー の バージョン を 配列 で 返す
function php check syntax $filename	調べる ファイル の 名前
function php check syntax $error_message	error _message パラメータ が 指定 さ れ た 場合 、 文法 チェック の 際 に 生成 さ れ た エラーメッセージ が ここ に 格納 さ れ ます
function bool php check syntax	文法 チェック が 成功 し た 場合 に true 、 チェック が 失敗 し たり file _name が オープン でき なかっ た 場合 に false を 返し ます
function bool php check syntax string $filename string $error_message	指定 し た ファイル の 文法 チェック （ と 実行 ） を 行う
function string php ini loaded file	読み込ま れ て いる php
function string php ini loaded file	読み込ま れ た php
function string php ini scanned files	成功 する と 、
function string php ini scanned files	追加 の ini ディレクトリ に ある
function string php logo guid	phpe 9 5 6 8 f 3 4 - d 4 2 8 - 1 1 d 2 - a 7 6 9 - 0 0 aa 0 0 1 acf 4 2 を 返し ます
function string php logo guid	ロゴ の guid を 取得 する
function php strip whitespace $filename	php ファイル へ の パス
function string php strip whitespace	成功 し た 場合 に 処理 済み の ソースコード 、 失敗 し た 場合 に 空 の 文字列 を 返し ます
function string php strip whitespace string $filename	コメント と 空白 文字 を 取り除い た ソース を 返す
function php uname $mode	mode は 、 どの よう な 情報 を 返す の か を 一文字 で 指定 し ます : &# 0 3 9 ; a &# 0 3 9 ; : デフォルト です
function string php uname	説明 を 文字列 で 返し ます
function string php uname string $mode	php が 稼動 し て いる オペレーティングシステム に関する 情報 を 返す
function phpinfo $what	以下 に ある constants ビット 値 を ひとつまた は 複数 個 を 加算 し て 、 オプション の what 引数 に 渡す こと によっ て 出力 を カスタマイズ でき ます
function bool phpinfo	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool phpinfo int $what	php の 設定 情報 を 出力 する
function phpversion $extension	オプション で 指定 する 拡張 モジュール 名
function string phpversion	オプション の extension パラメータ が 指定 さ れ て いる 場合 、 phpversion はその 拡張 モジュール の バージョン を 返し ます
function string phpversion string $extension	現在 の php バージョン を 取得 する
function posix access $mode	posix _f _ok 、 posix _r _ok 、 posix _w _ok および posix _x _ok のうち の ひとつ あるい は 複数 から なる マスク
function posix access $file	調べる ファイル の 名前
function bool posix access	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool posix access string $file int $mode	ファイル の アクセス 権限 を 判断 する
function string posix ctermid	処理 に 成功 し た 場合 は 、 現在 制御 し て いる 端末 の パス 名 を 表す 文字 列 を 返し ます
function string posix ctermid	制御 する 端末 の パス 名 を 得る
function int posix getegid	実効 グループ id を 表す 整数 値 を 返し ます
function int posix getegid	現在 の プロセス の 有効 な グループ id を 返す
function int posix geteuid	ユーザー id を 表す 整数 値 を 返し ます
function int posix geteuid	現在 の プロセス の 有効 な ユーザー id を 返す
function int posix getgid	実際 の グループ id を 表す 整数 値 を 返し ます
function int posix getgid	現在 の プロセス の 実際 の グループ id を 返す
function posix getgrnam $name	グループ の 名前
function array posix getgrnam	以下 の 要素 を 持つ 配列 を 返し ます
function array posix getgrnam string $name	指定 し た 名前 の グループ に関する 情報 を 返す
function array posix getgroups	現在 の プロセス の グループセット について 、 グループ id を 表す 整数 値 を 含む 配列 を 返し ます
function array posix getgroups	現在 の プロセス の グループセット を 返す
function string posix getlogin	ユーザー の ログイン 名 を 文字列 で 返し ます
function string posix getlogin	ログイン 名 を 返す
function posix getpgid $pid	プロセス id
function int posix getpgid	id を 表す 整数 値 を 返し ます
function int posix getpgid int $pid	ジョブ 制御 の プロセスグループ id を 得る
function int posix getpgrp	id を 表す 整数 値 を 返し ます
function int posix getpgrp	現在 の プロセス の グループ id を 返す
function int posix getppid	id を 表す 整数 値 を 返し ます
function int posix getppid	親 プロセス の id を 返す
function posix getpwnam $username	英数 字 で 表し た ユーザー 名
function array posix getpwnam	成功 し た 場合 は 次 の 要素 を 持つ 配列 、 それ 以外 の 場合 は false を 返し ます
function array posix getpwnam string $username	指定 し た 名前 の ユーザー に関する 情報 を 返す
function posix getpwuid $uid	ユーザー id
function array posix getpwuid	返さ れる 連想 配列 の 要素 は 次 の よう に なり ます
function array posix getpwuid int $uid	指定 id の ユーザー に関する 情報 を 返す
function array posix getrlimit	各 リソース に関する 制限 値 を 含む 連想 配列 を 返し ます
function array posix getrlimit	システムリソース 制限 に関する 情報 を 返す
function posix getsid $pid	プロセス id
function int posix getsid	id を 表す 整数 値 を 返し ます
function int posix getsid int $pid	プロセス の 現在 の sid を 得る
function int posix getuid	id を 表す 整数 値 を 返し ます
function int posix getuid	現在 の プロセス の 実際 の ユーザー id を 返す
function posix isatty $fd	ファイル 記述子
function bool posix isatty	fd が オープン さ れ て おり 、 かつ 端末 に 接続 さ れ て いる 場合 に true 、 それ 以外 の 場合 に false を 返し ます
function bool posix isatty mixed $fd	ファイル 記述子 が 対話 型端 末 で ある かど う か を 定義 する
function posix kill $sig	pcntl シグナル 定数 のいずれ か
function posix kill $pid	プロセス id
function bool posix kill	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool posix kill int $pid int $sig	プロセス に シグナル を 送信 する
function posix mkfifo $pathname	fifo ファイル へ の パス
function posix mkfifo $mode	2 番目 の パラメータ mode は 、 8 進表 記 例 : 0 6 4 4 で 指定 する 必要 が あり ます
function bool posix mkfifo	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool posix mkfifo string $pathname int $mode	fifo スペシャルファイル 名前 付き パイプ を 作成 する
function posix mknod $pathname	作成 する ファイル
function posix mknod $mode	この パラメータ は 、 ファイル 型 以下 の 定数 posix _s _ifreg 、 posix _s _ifchr 、 posix _s _ifblk 、 posix _s _ififo あるい は posix _s _ifsock のうち の ひとつ および パーミッション の 論理 和 で 構成 さ れ ます
function posix mknod $major	メジャーデバイスカーネル id s _ifchr あるい は s _ifblk を 使用 し て いる 場合 に 渡す 必要 が あり ます
function posix mknod $minor	マイナーデバイスカーネル id
function bool posix mknod	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool posix mknod string $pathname int $mode int $major int $minor	スペシャルファイル あるい は 通常 の ファイル を 作成 する posix
function posix seteuid $uid	ユーザー id
function bool posix seteuid	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool posix seteuid int $uid	現在 の プロセス の 実効 uid を 設定 する
function posix setgid $gid	グループ id
function bool posix setgid	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool posix setgid int $gid	現在 の プロセス の gid を 設定 する
function posix setrlimit $softlimit	ソフトリミット 、 単位 は 、 リソース 制限 が 必要 と する 任意 の 単位 です
function posix setrlimit $resource	設定 さ れる リミット に 対応 する リソースリミット 定数 です
function posix setrlimit $hardlimit	ハードリミット 、 単位 は 、 リソース 制限 が 必要 と する 任意 の 単位 です
function bool posix setrlimit	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool posix setrlimit int $resource int $softlimit int $hardlimit	システムリソース 制限 を 設定
function posix setuid $uid	ユーザー id
function bool posix setuid	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool posix setuid int $uid	現在 の プロセス の uid を 設定 する
function posix strerror $errno	posix _get _last _error が 返す posix エラー 番号
function string posix strerror	エラーメッセージ を 表す 文字 列 を 返し ます
function string posix strerror int $errno	指定 し た エラー 番号 に 対応 する システム の エラーメッセージ を 取得 する
function array posix times	現在 の プロセス の cpu 使用 状況 に関する 情報 を 表す 文字 列 を 連想 配列 として 返し ます
function array posix times	プロセス 時間 を 得る
function posix ttyname $fd	ファイル 記述子
function string posix ttyname	成功 し た 場合 に fd の 絶対 パス を 表す 文字 列 、 失敗 し た 場合 に false を 返し ます
function string posix ttyname mixed $fd	端末 の デバイス 名 を 調べる
function array posix uname	システム に関する 情報 を 文字 列 の 連想 配列 として 返し ます
function array posix uname	システム 名 を 得る
function mixed preg filter	subject が 配列 の 場合 は 配列 を 、 それ 以外 の 場合 は 文字列 を 返し ます
function mixed preg filter mixed $pattern mixed $replacement mixed $subject int $limit int $count	正規 表現 による 検索 と 置換 を 行う
function preg match $flags	flags に は 以下 の フラグ を 指定 でき ます
function preg match $pattern	検索 する パターン を 表す 文字列
function preg match $offset	通常 、 検索 は 対象 文字 列 の 先頭 から 開始 さ れ ます
function preg match $matches	matches を 指定 し た 場合 、 検索 結果 が 代入 さ れ ます
function preg match $subject	入力 文字列
function preg match $PREG_OFFSET_CAPTURE	この フラグ を 設定 し た 場合 、 各 マッチ に 対応 する 文字 列 の オフセット も 返さ れ ます
function int preg match	preg _match は 、 pattern が 指定 し た subject に マッチ し た 場合 に 1 を 返し ます
function int preg match string $pattern string $subject array $matches int $flags int $offset	正規 表現 による マッチング を 行う
function preg quote $delimiter	オプション の delimiter を 指定 する と 、 ここで 指定 し た 文字 も エスケープ さ れ ます
function preg quote $str	入力 文字列
function string preg quote	クォート さ れ た エスケープ し た 文字列 を 返し ます
function string preg quote string $str string $delimiter	正規 表現 文字 を クオート する
function preg replace callback $callback	この コールバック 関数 は 、 検索 対象 文字 列 で マッチ し た 要素 の 配列 が 指定 さ れ て コール さ れ ます
function preg replace callback $limit	subject 文字列 に おける 各 パターン の 最大 置換 回数
function preg replace callback $count	指定 し た 場合 は 、 置換 を 行っ た 回数 が ここ に 格納 さ れ ます
function preg replace callback $pattern	検索 する パターン
function preg replace callback $subject	文字列 あるい は 文字列 の 配列 で 、 検索 および 置換 の 対象 と なる 文字 列 を 指定 し ます
function mixed preg replace callback	preg _replace _callback は 、 subject が 配列 の 場合 に は 配列 を 、 それ 以外 の 場合 は 文字列 を 返し ます
function mixed preg replace callback mixed $pattern callable $callback mixed $subject int $limit int $count	正規 表現 検索 を 行い 、 コールバック 関数 を 使用 し て 置換 を 行う
function preg replace $subject	検索 ・ 置換 対象 と なる 文字 列 もしく は 文字列 の 配列 subject が 配列 の 場合 、 検索 と 置換 は subject の 各要 素 に対し て 行わ れ 、 返り値も 配列 と なり ます
function preg replace $count	この 引数 が 指定 さ れる と 、 置換 回数 が 渡さ れ ます
function preg replace $replacement	置換 を 行う 文字 列 もしく は 文字列 の 配列
function preg replace $limit	subject 文字列 に おい て 、 各 パターン による 置換 を 行う 最大 回数
function preg replace $pattern	検索 を 行う パターン
function mixed preg replace	preg _replace は 、 subject 引数 が 配列 の 場合 は 配列 を 、 その 他 の 場合 は 文字列 を 返し ます
function mixed preg replace mixed $pattern mixed $replacement mixed $subject int $limit int $count	正規 表現 検索 および 置換 を 行う
function preg split $PREG_SPLIT_DELIM_CAPTURE	この フラグ を 設定 する と 、 文字 列分 割用 の パターン 中 の カッコ による サブパターン で キャプチャ さ れ た 値 も 同時 に 返さ れ ます
function preg split $limit	これ を 指定 し た 場合 、 最大 limit 個 の 部分 文字 列 を 返し ます
function preg split $flags	flags は 、 次 の フラグ を 組み合わ せ た もの と する （ ビット 和演 算子 | で 組み合わせる ） こと が 可能 です
function preg split $PREG_SPLIT_OFFSET_CAPTURE	この フラグ を 設定 し た 場合 、 各 マッチ に 対応 する 文字 列 の オフセット も 返さ れ ます
function preg split $pattern	検索 する パターン を 表す 文字列
function preg split $PREG_SPLIT_NO_EMPTY	この フラグ を 設定 する と 、 空文 字列 で ない もの だけ が preg _split により 返さ れ ます
function preg split $subject	入力 文字列
function array preg split	pattern に マッチ し た 境界 で 分割 し た subject の 部分 文字 列 の 配列 を 返し ます
function array preg split string $pattern string $subject int $limit int $flags	正規 表現 で 文字列 を 分割 する
function print r $return	print _r の 結果 を 取得 し たい 場合 に は return 引数 を 使い ます
function print r $expression	表示 し たい 式
function mixed print r	string 、 integer float を 指定 し た 場合 は その 値 が 出力 さ れ ます
function mixed print r mixed $expression bool $return	指定 し た 変数 に関する 情報 を 解り やすく 出力 する
function print $arg	入力 データ
function int print	常 に 1 を 返し ます
function int print string $arg	文字列 を 出力 する
function proc close $process	閉じ られる proc _open リソース
function int proc close	実行 し て い た プロセス の 終了 状態 を 返し ます
function int proc close resource $process	proc _open で 開か れ た プロセス を 閉じ 、 その プロセス の 終了 コード を 返す
function proc nice $increment	変更 する 優先 度 の 増加 値
function bool proc nice	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool proc nice int $increment	現在 の プロセス の 優先 度 を 変更 する
function property exists $class	確認 する クラス 名 、 もしく は クラス の オブジェクト を 指定 し ます
function property exists $property	プロパティ 名 を 指定 し ます
function bool property exists	プロパティ が 存在 し て いる 場合 は true 、 存在 し て い ない 場合 に false 、 エラー 時 に は null を 返し ます
function bool property exists mixed $class string $property	オブジェクト もしく は クラス に プロパティ が 存在 する かど う か を 調べる
function ps add bookmark $text	ブックマーク の 表示 に 使用 する テキスト
function ps add bookmark $open	open が ゼロ で ない 場合 、 ブックマーク は pdf ビューア 上 で 開い た 形 で 表示 さ れ ます
function ps add bookmark $psdoc	ps _new が 返す 、 postscript ファイル の リソース id
function ps add bookmark $parent	新しい ブックマーク の 親と なる 、 事前 に この 関数 で 作成 さ れ た ブックマーク
function int ps add bookmark	返り値 は ブックマーク へ の 参照 です
function int ps add bookmark resource $psdoc string $text int $parent int $open	現在 の ページ に ブックマーク を 追加 する
function ps add launchlink $filename	リンク が クリック さ れ た 際 に 開始 する プログラム の パス
function ps add launchlink $llx	左下角 の x 座標
function ps add launchlink $urx	右上角 の x 座標
function ps add launchlink $psdoc	ps _new が 返す 、 postscript ファイル の リソース id
function ps add launchlink $lly	左下角 の y 座標
function ps add launchlink $ury	右上角 の y 座標
function bool ps add launchlink	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ps add launchlink resource $psdoc float $llx float $lly float $urx float $ury string $filename	ファイル を 実行 する ため の リンク を 追加 する
function ps add locallink $dest	dest は 、 ドキュメント が どの よう に 表示 さ れる か を 指定 し ます
function ps add locallink $llx	左下角 の x 座標
function ps add locallink $urx	右上角 の x 座標
function ps add locallink $page	リンク が クリック さ れ た 際 に 開始 する ページ
function ps add locallink $lly	左下角 の y 座標
function ps add locallink $ury	右上角 の y 座標
function ps add locallink $psdoc	ps _new が 返す 、 postscript ファイル の リソース id
function bool ps add locallink	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ps add locallink resource $psdoc float $llx float $lly float $urx float $ury int $page string $dest	同 一 ドキュメント 内 の ページ へ の リンク を 追加 する
function ps arc $x	円 の 中心 の x 座標
function ps arc $beta	終了 位置 の 角度 を 度単 位 で 指定
function ps arc $radius	円 の 半径
function ps arc $y	円 の 中心 の y 座標
function ps arc $psdoc	ps _new が 返す 、 postscript ファイル の リソース id
function ps arc $alpha	開始 位置 の 角度 を 度単 位 で 指定
function bool ps arc	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ps arc resource $psdoc float $x float $y float $radius float $alpha float $beta	反時 計回り に 円弧 を 描く
function ps arcn $x	円 の 中心 の x 座標
function ps arcn $beta	終了 位置 の 角度 を 度単 位 で 指定
function ps arcn $radius	円 の 半径
function ps arcn $y	円 の 中心 の y 座標
function ps arcn $psdoc	ps _new が 返す 、 postscript ファイル の リソース id
function ps arcn $alpha	開始 位置 の 角度 を 度単 位 で 指定
function bool ps arcn	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ps arcn resource $psdoc float $x float $y float $radius float $alpha float $beta	時計 回り に 円弧 を 描く
function ps begin page $height	ピクセル 単位 の ページ の 高さ 例 : a 4 の 場合 は 8 4 2
function ps begin page $width	ピクセル 単位 の ページ の 幅 例 : a 4 の 場合 は 5 9 6
function ps begin page $psdoc	ps _new が 返す 、 postscript ファイル の リソース id
function bool ps begin page	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ps begin page resource $psdoc float $width float $height	新しい ページ を 開始 する
function ps begin pattern $x-step	パターン を 水平 方向 に 並べる 際 の ピクセル 単位 の 間隔
function ps begin pattern $height	ピクセル 単位 の パターン の 高さ
function ps begin pattern $width	ピクセル 単位 の パターン の 幅
function ps begin pattern $psdoc	ps _new が 返す 、 postscript ファイル の リソース id
function ps begin pattern $painttype	1 あるい は 2 で なけれ ば なり ませ ん
function ps begin pattern $y-step	パターン を 垂直 方向 に 並べる 際 の ピクセル 単位 の 間隔
function int ps begin pattern	パターン の id を 返し ます
function int ps begin pattern resource $psdoc float $width float $height float $xstep float $ystep int $painttype	新しい パターン を 開始 する
function ps clip $psdoc	ps _new が 返す 、 postscript ファイル の リソース id
function bool ps clip	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ps clip resource $psdoc	現在 の パス を 描画 範囲 として 指定 する
function ps close image $imageid	ps _open _image あるい は ps _open _image _file が 返す 、 画像 の リソース id
function ps close image $psdoc	ps _new が 返す 、 postscript ファイル の リソース id
function void ps close image resource $psdoc int $imageid	画像 を 閉じ 、 メモリ を 開放 する
function ps closepath $psdoc	ps _new が 返す 、 postscript ファイル の リソース id
function bool ps closepath	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ps closepath resource $psdoc	パス を 閉じる
function ps curveto $x1	最初 の 制御 点 の x 座標
function ps curveto $y3	3 番目 の 制御 点 の y 座標
function ps curveto $y1	最初 の 制御 点 の y 座標
function ps curveto $psdoc	ps _new が 返す 、 postscript ファイル の リソース id
function ps curveto $y2	2 番目 の 制御 点 の y 座標
function ps curveto $x2	2 番目 の 制御 点 の x 座標
function ps curveto $x3	3 番目 の 制御 点 の x 座標
function bool ps curveto	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ps curveto resource $psdoc float $x1 float $y1 float $x2 float $y2 float $x3 float $y3	曲線 を 描く
function ps end page $psdoc	ps _new が 返す 、 postscript ファイル の リソース id
function bool ps end page	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ps end page resource $psdoc	ページ を 終了 する
function ps end pattern $psdoc	ps _new が 返す 、 postscript ファイル の リソース id
function bool ps end pattern	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ps end pattern resource $psdoc	パターン を 終了 する
function ps end template $psdoc	ps _new が 返す 、 postscript ファイル の リソース id
function bool ps end template	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ps end template resource $psdoc	テンプレート を 終了 する
function ps fill $psdoc	ps _new が 返す 、 postscript ファイル の リソース id
function bool ps fill	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ps fill resource $psdoc	現在 の パス を 塗り つぶす
function ps lineto $x	直線 の 終了 地点 の x 座標
function ps lineto $psdoc	ps _new が 返す 、 postscript ファイル の リソース id
function ps lineto $y	直線 の 終了 地点 の y 座標
function bool ps lineto	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ps lineto resource $psdoc float $x float $y	直線 を 描く
function ps makespotcolor $psdoc	ps _new が 返す 、 postscript ファイル の リソース id
function ps makespotcolor $name	スポット 色 の 名前 、 例え ば pantone 5 5 6 5
function int ps makespotcolor	成功 し た 場合 に スポット 色 の id を 、 失敗 し た 場合 に ゼロ を 返し ます
function int ps makespotcolor resource $psdoc string $name int $reserved	スポット 色 を 作成 する
function ps moveto $y	移動 する 位置 の y 座標
function ps moveto $psdoc	ps _new が 返す 、 postscript ファイル の リソース id
function ps moveto $x	移動 する 位置 の x 座標
function bool ps moveto	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ps moveto resource $psdoc float $x float $y	現在 位置 を 設定 する
function resource ps new	成功 し た 場合 に postscript ドキュメント の リソース を 、 失敗 し た 場合 に false を 返し ます
function resource ps new	新しい postscript ドキュメントオブジェクト を 作成 する
function ps open file $filename	postscript ファイル の 名前
function ps open file $psdoc	ps _new が 返す 、 postscript ファイル の リソース id
function bool ps open file	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ps open file resource $psdoc string $filename	出力用 の ファイル を 開く
function ps open image file $filename	画像 データ を 含む ファイル の 名前
function ps open image file $stringparam	使用 さ れませ ん
function ps open image file $intparam	使用 さ れませ ん
function ps open image file $psdoc	ps _new が 返す 、 postscript ファイル の リソース id
function ps open image file $type	画像 の 形式
function int ps open image file	成功 し た 場合 に 画像 の id を 、 失敗 し た 場合 に ゼロ を 返し ます
function int ps open image file resource $psdoc string $type string $filename string $stringparam int $intparam	ファイル から 画像 を 開く
function ps place image $scale	画像 の 拡大 率
function ps place image $y	画像 の 左下角 の y 座標
function ps place image $imageid	ps _open _image あるい は ps _open _image _file が 返す 、 画像 の リソース id
function ps place image $psdoc	ps _new が 返す 、 postscript ファイル の リソース id
function ps place image $x	画像 の 左下角 の x 座標
function bool ps place image	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ps place image resource $psdoc int $imageid float $x float $y float $scale	画像 を ページ に 配置 する
function ps rect $y	矩形 の 左下角 の y 座標
function ps rect $width	画像 の 幅
function ps rect $x	矩形 の 左下角 の x 座標
function ps rect $psdoc	ps _new が 返す 、 postscript ファイル の リソース id
function ps rect $height	画像 の 高さ
function bool ps rect	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ps rect resource $psdoc float $x float $y float $width float $height	矩形 を 描く
function ps rotate $rot	回転 角度 を 度単 位 で 指定 し ます
function ps rotate $psdoc	ps _new が 返す 、 postscript ファイル の リソース id
function bool ps rotate	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ps rotate resource $psdoc float $rot	回転 の 程度 を 設定 する
function ps save $psdoc	ps _new が 返す 、 postscript ファイル の リソース id
function bool ps save	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ps save resource $psdoc	現在 の コンテキスト を 保存 する
function ps set info $key	設定 する 情報 フィールド の 名前
function ps set info $psdoc	ps _new が 返す 、 postscript ファイル の リソース id
function ps set info $value	情報 フィールド の 値
function bool ps set info	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ps set info resource $p string $key string $val	ドキュメント の 情報 を 設定 する
function ps set parameter $psdoc	ps _new が 返す 、 postscript ファイル の リソース id
function ps set parameter $value	パラメータ の 値
function ps set parameter $name	使用 できる 名称 について は ps _get _parameter を 参照く ださい
function bool ps set parameter	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ps set parameter resource $psdoc string $name string $value	パラメータ を 設定 する
function ps set text pos $y	新しい テキスト 位置 の y 座標
function ps set text pos $psdoc	ps _new が 返す 、 postscript ファイル の リソース id
function ps set text pos $x	新しい テキスト 位置 の x 座標
function bool ps set text pos	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ps set text pos resource $psdoc float $x float $y	テキスト の 出力 位置 を 設定 する
function ps set value $textrendering	テキスト を どの よう に 見せる か
function ps set value $name	name は 以下 の うち の ひとつ です
function ps set value $leading	行間 を ピクセル で 指定 する
function ps set value $wordspacing	単語 の 間隔 を 空白 文字 に対する 比率 で 設定 する
function ps set value $textx	出力 テキスト の x 座標
function ps set value $psdoc	ps _new が 返す 、 postscript ファイル の リソース id
function ps set value $texty	出力 テキスト の y 座標
function ps set value $value	パラメータ の 値
function bool ps set value	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ps set value resource $psdoc string $name float $value	値 を 設定 する
function ps setcolor $c3	colorspace の 値 によっ て 、 blue 成分 rgb の 場合 、 yellow 成分 cmyk の 場合 のいずれ かと なり ます
function ps setcolor $c4	colorspace が cmyk の 場合 に のみ 設定 さ れ 、 black 成分 の 値 を 指定 し ます
function ps setcolor $type	type は both 、 fill 、 あるい は fillstroke のいずれ か です
function ps setcolor $colorspace	colorspace は gray 、 rgb 、 cmyk 、 spot 、 pattern のいずれ か です
function ps setcolor $c2	colorspace の 値 によっ て 、 green 成分 rgb の 場合 、 magenta 成分 cmyk の 場合 のいずれ かと なり ます
function ps setcolor $c1	colorspace の 値 によっ て 、 red 成分 rgb の 場合 、 cyan 成分 cmyk の 場合 、 グレースケール gray の 場合 、 スポット 色 の id あるい は パターン の id のいずれ かと なり ます
function ps setcolor $psdoc	ps _new が 返す 、 postscript ファイル の リソース id
function bool ps setcolor	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ps setcolor resource $psdoc string $type string $colorspace float $c1 float $c2 float $c3 float $c4	色 を 設定 する
function ps setdash $off	破線 と 破線 の 間隔 の 長さ
function ps setdash $on	破線 の 長さ
function ps setdash $psdoc	ps _new が 返す 、 postscript ファイル の リソース id
function bool ps setdash	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ps setdash resource $psdoc float $on float $off	破線 の 形状 を 設定 する
function ps setfont $size	フォント の サイズ
function ps setfont $psdoc	ps _new が 返す 、 postscript ファイル の リソース id
function ps setfont $fontid	ps _findfont が 返す 、 フォント id
function bool ps setfont	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ps setfont resource $psdoc int $fontid float $size	以降 の 出力 で 用いる フォント を 設定 する
function ps setgray $gray	値 は 0 （ 白 ） から 1 （ 黒 ） まで の 間 で なけれ ば なり ませ ん
function ps setgray $psdoc	ps _new が 返す 、 postscript ファイル の リソース id
function bool ps setgray	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ps setgray resource $psdoc float $gray	グレー 値 を 設定 する
function ps setlinecap $type	線端 の 形式
function ps setlinecap $psdoc	ps _new が 返す 、 postscript ファイル の リソース id
function bool ps setlinecap	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ps setlinecap resource $psdoc int $type	線端 の 形状 を 設定 する
function ps setlinewidth $psdoc	ps _new が 返す 、 postscript ファイル の リソース id
function ps setlinewidth $width	線 の 幅 ポイント 数
function bool ps setlinewidth	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ps setlinewidth resource $psdoc float $width	線幅 を 設定 する
function ps show $text	出力 する テキスト
function ps show $psdoc	ps _new が 返す 、 postscript ファイル の リソース id
function bool ps show	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ps show resource $psdoc string $text	テキスト を 出力 する
function ps stringwidth $size	フォント の サイズ
function ps stringwidth $fontid	使用 する フォント の id
function ps stringwidth $psdoc	ps _new が 返す 、 postscript ファイル の リソース id
function ps stringwidth $text	幅 を 計算 する テキスト
function float ps stringwidth	文字列 の 幅 を ポイント 数 で 返し ます
function float ps stringwidth resource $psdoc string $text int $fontid float $size	文字列 の 幅 を 取得 する
function ps symbol name $ord	ord は 、 フォントエンコーディングベクタ の 中 で の グリフ の 位置 です
function ps symbol name $fontid	使用 する フォント の id
function ps symbol name $psdoc	ps _new が 返す 、 postscript ファイル の リソース id
function string ps symbol name	指定 さ れ た フォント の グリフ 名 を 返し ます
function string ps symbol name resource $psdoc int $ord int $fontid	グリフ 名 を 取得 する
function ps symbol width $size	フォント の サイズ
function ps symbol width $ord	ord は 、 フォントエンコーディングベクタ の 中 で の グリフ の 位置 です
function ps symbol width $fontid	使用 する フォント の id
function ps symbol width $psdoc	ps _new が 返す 、 postscript ファイル の リソース id
function float ps symbol width	グリフ の 幅 を ポイント 数 で 返し ます
function float ps symbol width resource $psdoc int $ord int $fontid float $size	グリフ の 幅 を 取得 する
function ps symbol $psdoc	ps _new が 返す 、 postscript ファイル の リソース id
function ps symbol $ord	フォントエンコーディングベクタ の 中 で の グリフ の 位置
function bool ps symbol	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ps symbol resource $psdoc int $ord	グリフ を 出力 する
function ps translate $y	変換後 の 座標 系 の 原点 の y 座標
function ps translate $psdoc	ps _new が 返す 、 postscript ファイル の リソース id
function ps translate $x	変換後 の 座標 系 の 原点 の x 座標
function bool ps translate	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ps translate resource $psdoc float $x float $y	座標 変換 を 設定 する
function pspell config personal $file	個人 の 単語 リスト
function bool pspell config personal	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool pspell config personal int $dictionary_link string $file	個人 の 単語 リスト を 保持 する ファイル を 設定 する
function pspell config repl $file	この ファイル は php の 実行 ユーザー たとえ ば nobody が 書き込み 可能 で ある 必要 が あり ます
function bool pspell config repl	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool pspell config repl int $dictionary_link string $file	置換 候補 を 保持 する ファイル を 設定 する
function pspell config runtogether $flag	連続 し た 単語 を 複合 語 として 扱う 場合 な true 、 それ 以外 の 場合 は false
function bool pspell config runtogether	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool pspell config runtogether int $dictionary_link bool $flag	複合語 を 有効 な 単語 の 組み合わ せ として 考慮 する
function pspell new $spelling	パラメータ spelling は 、 英語 の よう に 複数 の スペル が ある 言語 に関し て スペル の 指定 を 行う もの です
function pspell new $jargon	パラメータ jargon は 、 同じ language および spelling パラメータ を 有する 2 つの 異 なる 単語 リスト を 区別 する ため の 追加 情報 を 有し て い ます
function pspell new $mode	パラメータ mode は 、 スペルチェッカ の 動作 モード です
function pspell new $encoding	パラメータ encoding は 、 単語 の エンコーディング として 予想 さ れる もの です
function pspell new $language	パラメータ language は 、 2 文字 の iso 6 3 9 言語 コード と オプション で ダッシュ また は アンダースコア の 後 に 2 文字 の iso 3 1 6 6 国 コード から なる 言語 コード です
function int pspell new	成功 し た 場合 に ディレクトリリンク 識別子 、 失敗 し た 場合 に false を 返し ます
function int pspell new string $language string $spelling string $jargon string $encoding int $mode	新規 辞書 を ロード する
function putenv $setting	&quot ;foo =bar &quot ; 形式 の 設定
function bool putenv	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool putenv string $setting	環境 変数 の 値 を 設定 する
function px create fp $file	fopen が 返す ファイルハンドル
function px create fp $fielddesc	fielddesc は 、 各 フィールド の 設定 を 保持 する 配列 です
function px create fp $pxdoc	px _new が 返す paradox データベース の リソース id
function bool px create fp	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool px create fp resource $pxdoc resource $file array $fielddesc	新しい paradox データベース を 作成 する
function px date2string $format	date で 使用 する の と 同じ 形式 の 文字 列 フォーマット
function px date2string $value	px _field _date 型 の paradox データベースフィールド に 格納 さ れる 値
function px date2string $pxdoc	px _new が 返す paradox データベース の リソース id
function string px date2string	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function string px date2string resource $pxdoc int $value string $format	日付 を 文字列 に 変換 する
function px delete $pxdoc	px _new が 返す paradox データベース の リソース id
function bool px delete	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool px delete resource $pxdoc	paradox データベース の リソース を 削除 する
function px get parameter $inputencoding	入力 データ を データベース に 保存 する 際 の エンコーディング
function px get parameter $targetencoding	出力用 の エンコーディング
function px get parameter $tablename	データベースヘッダ に 格納 さ れる テーブル 名
function px get parameter $name	name は 、 以下 のい ずれ か です
function px get parameter $pxdoc	px _new が 返す paradox データベース の リソース id
function string px get parameter	パラメータ の 値 、 失敗 し た 場合 に false を 返し ます
function string px get parameter resource $pxdoc string $name	パラメータ を 取得 する
function px get schema $mode	返さ れる 配列 の キー を 小文字 また は 大文字 に 変換 する ため に 、 オプション の mode に px _keytolower あるい は px _keytoupper を 指定 する こと が でき ます
function px get schema $pxdoc	px _new が 返す 、 paradox データベース の リソース id
function array px get schema	データベースファイル の スキーマ を 連想 配列 で 返し ます
function array px get schema resource $pxdoc int $mode	データベーススキーマ を 返す
function px get value $name	name は 以下 のい ずれ か です
function px get value $pxdoc	px _new が 返す 、 paradox データベース の リソース id
function px get value $numprimkeys	プライマリキー の 数
function float px get value	パラメータ の 値 、 失敗 し た 場合 に false を 返し ます
function float px get value resource $pxdoc string $name	値 を 取得 する
function px insert record $data	px _retrieve _record など が 返す 、 フィールド 値 を 含む 連想 配列 あるい は 数値 添字 配列
function px insert record $pxdoc	px _new が 返す paradox データベース の リソース id
function int px insert record	失敗 し た 場合 に は false 、 成功 し た 場合 に は レコード 数 を 返し ます
function int px insert record resource $pxdoc array $data	paradox データベース に レコード を 挿入 する
function resource px new	失敗 し た 場合 は false を 返し ます
function resource px new	新しい paradox オブジェクト を 作成 する
function px numrecords $pxdoc	px _new が 返す paradox データベース の リソース id
function int px numrecords	データベースファイル 内 の レコード の 数 を 返し ます
function int px numrecords resource $pxdoc	データベース 内 の レコード の 数 を 返す
function px open fp $pxdoc	px _new が 返す 、 paradox データベース の リソース id
function px open fp $file	file は 、 実際 の データベースファイル を パラメータ に 指定 し て fopen を コール し た とき の 返り 値 です
function bool px open fp	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool px open fp resource $pxdoc resource $file	paradox データベース を オープン する
function px put record $record	例え ば px _retrieve _record が 返す よう な 形式 で の フィールド 値 を 含む 、 連想 配列 あるい は 数値 添字 配列
function px put record $recpos	この オプションパラメータ で 、 データベース 内 の 現在 の 位置 以降 の レコード 番号 を 指定 し ます
function px put record $pxdoc	px _new が 返す paradox データベース の リソース id
function bool px put record	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool px put record resource $pxdoc array $record int $recpos	paradox データベース に レコード を 保存 する
function px set blob file $filename	ファイル の 名前
function px set blob file $pxdoc	px _new が 返す paradox データベース の リソース id
function bool px set blob file	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool px set blob file resource $pxdoc string $filename	blob を 読み込む ファイル 名 を 設定 する
function px set parameter $targetencoding	出力用 の エンコーディング
function px set parameter $inputencoding	入力 データ を データベース に 保存 する 際 の エンコーディング
function px set parameter $name	設定 し たい パラメータ の 内容 に 応じ て 、 name に は 以下 のい ずれ か を 指定 し ます
function px set parameter $pxdoc	px _new が 返す 、 paradox データベース の リソース id
function px set parameter $tablename	データベースヘッダ に 格納 さ れる テーブル 名
function px set parameter $value	パラメータ に 設定 する 値
function bool px set parameter	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool px set parameter resource $pxdoc string $name string $value	パラメータ を 設定 する
function px set targetencoding $encoding	出力用 の エンコーディング
function px set targetencoding $pxdoc	px _new が 返す paradox データベース の リソース id
function bool px set targetencoding	エンコーディング が 設定 さ れ て い ない 場合 は false を 返し ます
function bool px set targetencoding resource $pxdoc string $encoding	文字 フィールド の エンコーディング を 設定 する 非推奨
function px set value $name	name は 以下 のい ずれ か です
function px set value $pxdoc	px _new が 返す 、 paradox データベース の リソース id
function px set value $numprimkeys	プライマリキー の 数
function bool px set value	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool px set value resource $pxdoc string $name float $value	値 を 設定 する
function px timestamp2string $pxdoc	paradox データベース の リソース id
function px timestamp2string $format	date で 使用 する の と 同じ 形式 の 文字 列 フォーマット
function px timestamp2string $value	paradox データベースフィールド に 保存 さ れ た 、 px _field _time 型 あるい は px _field _timestamp 型 の 値
function string px timestamp2string	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function string px timestamp2string resource $pxdoc float $value string $format	タイムスタンプ を 文字列 に 変換 する
function px update record $data	px _retrieve _record が 返す フィールド 値 を 含む 連想 配列
function px update record $num	レコード 番号 は 人為 的 な 番号 で 、 レコード が データベース に 格納 さ れ た 順番 を 表し ます
function px update record $pxdoc	px _new が 返す 、 paradox データベース の リソース id
function bool px update record	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool px update record resource $pxdoc array $data int $num	paradox データベース の レコード を 更新 する
function quoted printable encode $str	入力 文字列
function string quoted printable encode	エンコード さ れ た 文字列 を 返し ます
function string quoted printable encode string $str	8 ビット 文字列 を quoted -printable 文字列 に 変換 する
function quotemeta $str	入力 文字列
function string quotemeta	メタ 文字 を クォート し た 文字列 を 返し ます
function string quotemeta string $str	メタ 文字 を クォート する
function radius add server $max_tries	結果 が 返っ て こなかっ た 場合 に 最大 何回 まで リクエスト を 繰り返す か を max _tries に 指定 し ます
function radius add server $port	port は 、 サーバー と の 接続 に 使用 する udp ポート を 指定 し ます
function radius add server $secret	secret パラメータ に は 、 サーバーホスト に 対する 共有 秘密 鍵 が 渡さ れ ます
function radius add server $timeout	timeout パラメータ に は 、 サーバー から 応答 を 受信 する 際 の タイムアウト を 秒単 位 で 指定 し ます
function radius add server $hostname	hostname は サーバー の ホスト を fqdn あるい は ドット 区切り の ip アドレス 形式 で 指定 し ます
function bool radius add server	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool radius add server resource $radius_handle string $hostname int $port string $secret int $timeout int $max_tries	サーバー を 追加 する
function bool radius close	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool radius close resource $radius_handle	すべて の リソース を 開放 する
function radius config $file	設定 ファイル へ の パス を 、 引数 として radius _config に渡し ます
function bool radius config	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool radius config resource $radius_handle string $file	指定 し た 設定 ファイル を ライブラリ に 読み込ませる
function radius create request $type	radius _access _request あるい は radius _accounting _request のいずれ か
function bool radius create request	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool radius create request resource $radius_handle int $type	課金 あるい は 認証 の リクエスト を 作成 する
function string radius demangle	復元 し た 文字列 、 あるい は エラー 時 に は false を 返し ます
function string radius demangle resource $radius_handle string $mangled	データ を 復元 する
function array radius get vendor attr	属性 の 型 、 ベンダ および データ を 含む 連想 配列 か 、 エラー 時 に は false を 返し ます
function array radius get vendor attr string $data	ベンダ 固有 の 属性 を 取得 する
function radius put addr $type	属性 の 型
function radius put addr $addr	ipv 4 アドレス を 表す 文字列
function radius put addr $radius_handle	radius リソース
function radius put addr $options	属性 の オプション の ビットマスク
function radius put addr $tag	属性 の タグ
function bool radius put addr	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool radius put addr resource $radius_handle int $type string $addr int $options int $tag	ip アドレス 属性 を 設定 する
function radius put attr $type	属性 の 型
function radius put attr $options	属性 の オプション の ビットマスク
function radius put attr $radius_handle	radius リソース
function radius put attr $value	属性 の 値
function radius put attr $tag	属性 の タグ
function bool radius put attr	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool radius put attr resource $radius_handle int $type string $value int $options int $tag	バイナリ 属性 を 設定 する
function radius put int $type	属性 の 型
function radius put int $options	属性 の オプション の ビットマスク
function radius put int $radius_handle	radius リソース
function radius put int $value	属性 の 値
function radius put int $tag	属性 の タグ
function bool radius put int	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool radius put int resource $radius_handle int $type int $value int $options int $tag	整数 属性 を 設定 する
function radius put string $type	属性 の 型
function radius put string $options	属性 の オプション の ビットマスク
function radius put string $radius_handle	radius リソース
function radius put string $value	属性 の 値
function radius put string $tag	属性 の タグ
function bool radius put string	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool radius put string resource $radius_handle int $type string $value int $options int $tag	文字列 属性 を 設定 する
function radius put vendor addr $type	属性 の 型
function radius put vendor addr $radius_handle	radius リソース
function radius put vendor addr $addr	文字列 形式 の ipv 4 アドレス
function radius put vendor addr $options	属性 の オプション の ビットマスク
function radius put vendor addr $tag	属性 の タグ
function radius put vendor addr $vendor	ベンダー id
function bool radius put vendor addr	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool radius put vendor addr resource $radius_handle int $vendor int $type string $addr	ベンダー 固有 の ip アドレス 属性 を 設定 する
function radius put vendor attr $type	属性 の 型
function radius put vendor attr $value	属性 の 値
function radius put vendor attr $radius_handle	radius リソース
function radius put vendor attr $options	属性 の オプション の ビットマスク
function radius put vendor attr $tag	属性 の タグ
function radius put vendor attr $vendor	ベンダー id
function bool radius put vendor attr	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool radius put vendor attr resource $radius_handle int $vendor int $type string $value int $options int $tag	ベンダー 固有 の バイナリ 属性 を 設定 する
function radius put vendor int $type	属性 の 型
function radius put vendor int $value	属性 の 値
function radius put vendor int $radius_handle	radius リソース
function radius put vendor int $options	属性 の オプション の ビットマスク
function radius put vendor int $tag	属性 の タグ
function radius put vendor int $vendor	ベンダー id
function bool radius put vendor int	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool radius put vendor int resource $radius_handle int $vendor int $type int $value int $options int $tag	ベンダー 固有 の 整数 属性 を 設定 する
function radius put vendor string $type	属性 の 型
function radius put vendor string $value	属性 の 値
function radius put vendor string $radius_handle	radius リソース
function radius put vendor string $options	属性 の オプション の ビットマスク
function radius put vendor string $tag	属性 の タグ
function radius put vendor string $vendor	ベンダー id
function bool radius put vendor string	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool radius put vendor string resource $radius_handle int $vendor int $type string $value int $options int $tag	ベンダー 固有 の 文字 列属 性 を 設定 する
function string radius request authenticator	リクエスト 認証子 を 文字列 で 返し ます
function string radius request authenticator resource $radius_handle	リクエスト 認証子 を 返す
function string radius strerror	失敗 し た radius 関数 から の エラーメッセージ を 文字列 で 返し ます
function string radius strerror resource $radius_handle	エラーメッセージ を 返す
function range $start	シーケンス の 最初 の 値
function range $end	値 が end に 達する まで シーケンス が 続き ます
function range $step	step が 指定 さ れ て いる 場合 、 それ は 要素 毎 の 増加 数 と なり ます
function array range	start から end まで の 整数 の 配列 を 返し ます
function array range mixed $start mixed $end number $step	ある 範囲 の 整数 を 有する 配列 を 作成 する
function rawurlencode $str	エンコード する url
function string rawurlencode	- _
function string rawurlencode string $str	rfc 3 9 8 6 に 基づき url エンコード を 行う
function readdir $dir_handle	opendir が 事前 に オープン し た ディレクトリハンドル リソース
function string readdir	成功 し た 場合 に エントリ 名 、 失敗 し た 場合 に false を 返し ます
function string readdir resource $dir_handle	ディレクトリハンドル から エントリ を 読み込む
function readfile $use_include_path	オプション の 2 番目 の 引数 を 使用 し て 、 これ に true を 設定 する こと により 、 include _path の ファイル の 検索 も 行う こと が でき ます
function readfile $context	コンテキストストリームリソース
function readfile $filename	読み込も う と する ファイル の 名前
function int readfile	ファイル から 読み込ん だ バイト 数 を 返し ます
function int readfile string $filename bool $use_include_path resource $context	ファイル を 出力 する
function readgzfile $filename	ファイル 名 を 指定 し ます
function readgzfile $use_include_path	include _path に ある ファイル も 検索 し たい 場合 、 この オプションパラメータ を 1 に 設定 し て くだ さい
function int readgzfile	ファイル から 読み込ん だ 解凍 さ れ た データ の バイト 数 を 返し ます
function int readgzfile string $filename int $use_include_path	gz ファイル を 出力 する
function readline callback handler install $prompt	確認 メッセージ
function readline callback handler install $callback	callback 関数 が 受け 取る パラメータ は ひとつ で 、 ユーザー から 返さ れ た 入力 です
function bool readline callback handler install	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool readline callback handler install string $prompt callable $callback	readline コールバックインターフェイス と 端末 を 初期化 し 、 プロンプト を 表示 し て 結果 を すぐ に 返す
function bool readline callback handler remove	インストール さ れ た コールバック が 削除 でき た 場合 に true 、 削除 する ハンドラ が 見つ から なかっ た 場合 に false を 返し ます
function bool readline callback handler remove	インストール さ れ た ハンドラ を 削除 し 、 端末 の 設定 を もと に 戻す
function void readline callback read char	文字 を 読み込み 、 改行 を 受け 取る と readline コールバックインターフェイス に 通知 する
function bool readline clear history	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool readline clear history	ヒストリ を クリア する
function readline info $newvalue	指定 し た 場合 は 、 これ が その 設定 の 新しい 値 と なり ます
function readline info $varname	変数 の 名前
function mixed readline info	パラメータ を 指定 し ない で コール し た 場合 、 この 関数 は readline が 使用 する すべて の 設定 の 値 を 配列 で 返し ます
function mixed readline info string $varname string $newvalue	種々 の readline の 内部 変数 を 取得 / 設定 する
function array readline list history	コマンドラインヒストリ 全体 の 配列 を 返し ます
function array readline list history	ヒストリ を 一覧 表示 する
function void readline on new line	カーソル が 新しい 行 に 移動 し た こと を readline に 通知 する
function readline read history $filename	コマンドヒストリ を 含む ファイル へ の パス
function bool readline read history	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool readline read history string $filename	ヒストリ を 読み込む
function void readline redisplay	画面 を 再描 画 する
function readline write history $filename	保存 する ファイル へ の パス
function bool readline write history	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool readline write history string $filename	ヒストリ を 書き こむ
function readline $prompt	ユーザー に 示す 確認 文字 列 を 指定 し ます
function string readline	ユーザー から 取得 し た 文字列 を 一つ だけ 返し ます
function string readline string $prompt	一行読 み 込む
function readlink $path	シンボリックリンク の パス
function string readlink	シンボリックリンク ・パス の 内容 を 返し ます
function string readlink string $path	シンボリックリンク 先 を 返す
function recode file $output	出力 として 使用 する ローカルファイルハンドルリソース
function recode file $input	入力 として 使用 する ローカルファイルハンドルリソース
function recode file $request	変換 指令 の 型
function bool recode file	応じる こと が でき ない 場合 に false 、 それ 以外 の 場合 に true を 返し ます
function bool recode file string $request resource $input resource $output	コード 変換 指令 に 基づき ファイル から ファイル に コード 変換 する
function recode string $request	変換 指令 の 型
function recode string $string	変換 する 文字列
function string recode string	変換後 の 文字 列 、 また は 変換 指令 を 実行 でき ない 場合 に false を 返し ます
function string recode string string $request string $string	コード 変換 指令 に 基づき 文字 列 の コード を 変換 する
function register shutdown function $parameter	シャットダウン 関数 に パラメータ を 渡す に は 、 ここ で 追加 の パラメータ を 渡し ます
function register shutdown function $callback	登録 する コールバック
function void register shutdown function callable $callback mixed $parameter	シャットダウン 時 に 実行 する 関数 を 登録 する
function rename function $original_name	も と の 関数 名
function rename function $new_name	関数 original _name の 新しい 名前
function bool rename function	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool rename function string $original_name string $new_name	グローバル の 関数 テーブル で 関数 名 を 変更 する
function rename $oldname	注意 : 変更 前 の 名前
function rename $context	注意 : コンテキスト の サポート は 、 php 5
function rename $newname	変更後 の 名前
function bool rename	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool rename string $oldname string $newname resource $context	ファイル を リネーム する
function rewind $handle	ファイルポインタ は 有効 なもの で なけれ ば なら ず 、 また fopen で 正常 に オープン さ れ た ファイル を 指し て いる 必要 が あり ます
function bool rewind	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool rewind resource $handle	ファイルポインタ の 位置 を 先頭 に 戻す
function round $val	丸める 値
function round $precision	オプション で 指定 する 、 丸める 桁数
function round $mode	次 の 定数 のい ずれ か を 使っ て 、 丸め の モード を 指定 し ます
function float round	丸め た 値 を 返し ます
function float round float $val int $precision int $mode	浮動 小数 点数 を 丸める
function rpm close $rpmr	rpm _open で オープン し た ファイルポインタリソース
function bool rpm close	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool rpm close resource $rpmr	rpm ファイル を 閉じる
function rpm get tag $rpmr	rpm _open で オープン し た ファイルポインタリソース
function rpm get tag $tagnum	rpm ヘッダ から 取得 する タグ の 番号
function mixed rpm get tag	関数 に 渡し た tagnum の 値 により 、 返り値 の 型 は いろいろ な 形式 に なりえ ます
function mixed rpm get tag resource $rpmr int $tagnum	rpm ファイル から ヘッダタグ を 取得 する
function rsort $array	入力 の 配列
function rsort $sort_flags	オプション の パラメータ sort _flags により ソート の 動作 を 修正 可能 です
function bool rsort	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool rsort array $array int $sort_flags	配列 を 逆順 に ソート する
function rtrim $str	入力 文字列
function rtrim $character_mask	character _mask パラメータ により 、 削除 する 文字 を 指定 する こと も 可能 です
function string rtrim	変更後 の 文字列 を 返し ます
function string rtrim string $str string $character_mask	文字列 の 最後 から 空白 もしく は その 他 の 文字 を 取り除く
function runkit import $filename	関数 や クラス の 定義 を 読み込む ファイル 名
function runkit import $flags	runkit _import _* 系 の 定数 の 論理 和
function bool runkit import	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool runkit import string $filename int $flags	ファイル から 関数 や クラス の 定義 を 読み込み 、 必要 に 応じ て 書き 換える
function runkit lint file $filename	php コード を 含む 、 チェック 対象 の ファイル
function bool runkit lint file	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool runkit lint file string $filename	指定 し た ファイル の php 文法 を チェック する
function runkit lint $code	チェック 対象 の php コード
function bool runkit lint	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool runkit lint string $code	指定 し た php コード の 文法 を チェック する
function runkit sandbox output handler $callback	ひとつ の パラメータ を 受け 取る 関数 の 名前
function runkit sandbox output handler $sandbox	出力 の 処理 を 設定 する runkit _sandbox クラス の インスタンス
function mixed runkit sandbox output handler	前 に 定義 さ れ て い た 出力 ハンドラコールバック の 名前 を 返し ます
function mixed runkit sandbox output handler object $sandbox mixed $callback	サンドボックス 内 で の 出力 を 取得 ・ 処理 する ため の 関数 を 指定 する
function scandir $directory	調べる ディレクトリ
function scandir $context	context パラメータ の 説明 について は 、 マニュアル の ストリーム を 参照く ださい
function scandir $sorting_order	デフォルト で は 、 ソート 順 は アルファベット 昇順 です
function array scandir	成功 し た 場合 に ファイル 名 の 配列 、 失敗 し た 場合 に false を 返し ます
function array scandir string $directory int $sorting_order resource $context	指定 さ れ た パス の ファイル と ディレクトリ の リスト を 取得 する
function sem get $auto_release	リクエスト の 終了 時 に 自動 的 に セマフォ を 開放 する かど う か を 指定 し ます
function sem get $max_acquire	同 時に セマフォ を 得る こと が 可能 な プロセス 数 を max _acquire に セット し ます
function sem get $perm	セマフォ の パーミッション
function resource sem get	成功 し た 場合 に 正 の セマフォ id 、 エラー 時 に は false を 返し ます
function resource sem get int $key int $max_acquire int $perm int $auto_release	セマフォ id を 得る
function sem release $sem_identifier	sem _get が 返す セマフォリソースハンドル
function bool sem release	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool sem release resource $sem_identifier	セマフォ を 解放 する
function sem remove $sem_identifier	sem _get が 返す セマフォリソース id
function bool sem remove	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool sem remove resource $sem_identifier	セマフォ を 削除 する
function serialize $value	シリアル 化 する 値
function string serialize	value の 保存 可能 な バイトストリーム 表現 を 含む 文字 列 を 返し ます
function string serialize mixed $value	値 の 保存 可能 な 表現 を 生成 する
function void session abort	session 配列 の 変更 を 破棄 し て セッション を 終了 し ます
function session cache expire $new_cache_expire	new _cache _expire が 指定 さ れ た 場合 、 現在 の キャッシュ の 有効 期限 は 、 new _cache _expire で 置換 さ れ ます
function int session cache expire	session
function int session cache expire string $new_cache_expire	現在 の キャッシュ の 有効 期限 を 返す
function array session get cookie params	現在 の セッションクッキー の 情報 を 配列 として 返し ます
function array session get cookie params	セッションクッキー の パラメータ を 得る
function session id $id	id が 指定 さ れ た 場合 、 現在 の セッション id を 置換 し ます
function string session id	session _id は 現在 の セッション の セッション id を 返し ます
function string session id string $id	現在 の セッション id を 取得 また は 設定 する
function session is registered $name	変数 名
function bool session is registered	session _is _registered は 、 name という 名前 の グローバル 変数 が 現在 の セッション に 登録 さ れ て いる 場合 に true 、 それ 以外 の 場合 に false を 返し ます
function bool session is registered string $name	変数 が セッション に 登録 さ れ て いる かど う か を 調べる
function session module name $module	module が 指定 さ れ た 場合 、 その モジュール を 代わり に 使用 し ます
function string session module name	現在 の セッションモジュール の 名前 を 返し ます
function string session module name string $module	現在 の セッションモジュール を 取得 また は 設定 する
function session name $name	セッション の 名前 を 参照 し ます
function string session name	現在 の セッション の 名前 を 返し ます
function string session name string $name	現在 の セッション 名 を 取得 また は 設定 する
function session pgsql get error $with_error_message	true に 設定 する と 、 各 エラー の エラーメッセージ も 返さ れ ます
function array session pgsql get error	エラー の 数 を 配列 で 返し ます
function array session pgsql get error bool $with_error_message	エラー の 数 および 直近 の エラーメッセージ を 返す
function session regenerate id $delete_old_session	関連付け られ た 古い セッション を 削除 する かどう か
function bool session regenerate id	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool session regenerate id bool $delete_old_session	現在 の セッションid を 新しく 生成 し た もの と 置き 換える
function void session register shutdown	セッション の シャットダウン 関数
function void session reset	session 配列 を 元 の 値 で 再初 期化 し ます
function session set cookie params $path	クッキー が 動作 する ドメイン 上 の パス
function session set cookie params $httponly	true の 場合 は 、 php で セッションクッキー を 設定 する 際 に httponly フラグ の 送信 を 試み ます
function session set cookie params $secure	true の 場合 は 、 セキュア な 接続 の 場合 に のみ クッキー を 送信 し ます
function session set cookie params $domain	クッキー の ドメイン
function session set cookie params $lifetime	セッションクッキー の 有効 期限
function void session set cookie params int $lifetime string $path string $domain bool $secure bool $httponly	セッションクッキーパラメータ を 設定 する
function session start $options	オプション の 連想 配列 を 指定 する こと が でき ます
function bool session start	この 関数 は 、 セッション が 正常 に 開始 し た 場合 に true 、 それ 以外 の 場合 に false を 返し ます
function bool session start array $options	新しい セッション を 開始 、 あるい は 既存 の セッション を 再開 する
function session unregister $name	変数 名
function bool session unregister	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool session unregister string $name	現在 の セッション から 変数 の 登録 を 削除 する
function void session unset	全て の セッション 変数 を 開放 する
function void session write close	セッションデータ を 書き込ん で セッション を 終了 する
function set exception handler $exception_handler	キャッチ さ れ ない 例外 が 発生 し た 際 に コール さ れる 関数 の 名前
function callable set exception handler	前 に 定義 さ れ た 例外 ハンドラ の 名前 、 また は エラー 発生 時 に null を 返し ます
function callable set exception handler callable $exception_handler	ユーザー 定義 の 例外 ハンドラ 関数 を 設定 する
function set include path $new_include_path	include _path の 新しい 値
function string set include path	成功 し た 場合 に 元 の include _path の 値 、 失敗 し た 場合 に false を 返し ます
function string set include path string $new_include_path	include _path 設定 オプション を セット する
function set magic quotes runtime $new_setting	false は オフ 、 true は オン を 表し ます
function bool set magic quotes runtime	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool set magic quotes runtime bool $new_setting	magic _quotes _runtime の 現在 アクティブ な 設定 を セット する
function set time limit $seconds	最大 実行 時間 を 表す 秒数
function bool set time limit	成功 し た 場合 に true 、 失敗 し た 場合 に false を 返し ます
function bool set time limit int $seconds	実行 時間 の 最大 値 を 制限 する
function setcookie $expire	クッキー の 有効 期限
function setcookie $path	サーバー 上 で の 、 クッキー を 有効 と し たい パス & # 0 3 9 ; / &# 0 3 9 ; を セット する と 、 クッキー は domain 配下 の 全て で 有効 と なり ます
function setcookie $httponly	true を 設定 する と 、 http を通し て のみ クッキー に アクセス できる よう に なり ます
function setcookie $value	クッキー の 値
function setcookie $name	クッキー の 名前
function setcookie $domain	クッキー が 有効 な サブ ドメイン
function setcookie $secure	クライアント から の セキュア な https 接続 の 場合 に のみ クッキー が 送信 さ れる よう に し ます
function bool setcookie	もし も この 関数 を コール する 前 に 何らか の 出力 が ある 場合 に は 、 setcookie は 失敗 し false を 返し ます
function bool setcookie string $name string $value int $expire string $path string $domain bool $secure bool $httponly	クッキー を 送信 する
function setproctitle $title	プロセス の タイトル として 使用 する タイトル
function void setproctitle string $title	プロセス の タイトル を 設定
function bool setrawcookie	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool setrawcookie string $name string $value int $expire string $path string $domain bool $secure bool $httponly	値 を url エンコード せ ず に クッキー を 送信 する
function settype $type	type の 値 は 以下 の 命令 のい ずれ か です
function settype $var	変換 する 変数
function bool settype	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool settype mixed $var string $type	変数 の 型 を セット する
function shm attach $memsize	メモリ の サイズ
function shm attach $perm	オプション の パーミッション 設定
function shm attach $key	共有 メモリセグメント id を 表す 数値
function resource shm attach	共有 メモリセグメント の id を 返し ます
function resource shm attach int $key int $memsize int $perm	共有 メモリセグメント を 作成 また は オープン する
function shm detach $shm_identifier	shm _attach が 返す 共有 メモリリソースハンドル
function bool shm detach	shm _detach は 、 常 に true を 返し ます
function bool shm detach resource $shm_identifier	共有 メモリセグメント へ の 接続 を 閉じる
function shm get var $shm_identifier	共有 メモリセグメント
function shm get var $variable_key	変数 の キー
function mixed shm get var	指定 し た キー の 変数 を 返し ます
function mixed shm get var resource $shm_identifier int $variable_key	共有 メモリ から 変数 を 返す
function shm has var $variable_key	変数 の キー
function shm has var $shm_identifier	shm _attach で 取得 し た 共有 メモリセグメント
function bool shm has var	エントリ が 存在 する 場合 に true 、 それ 以外 の 場合 に false を 返し ます
function bool shm has var resource $shm_identifier int $variable_key	特定 の エントリ が 存在 する かど う か を 調べる
function shm put var $variable_key	変数 の キー
function shm put var $variable	変数
function shm put var $shm_identifier	shm _attach が 返す 共有 メモリリソースハンドル
function bool shm put var	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool shm put var resource $shm_identifier int $variable_key mixed $variable	共有 メモリ の 変数 を 挿入 また は 更新 する
function shm remove var $variable_key	変数 の キー
function shm remove var $shm_identifier	shm _attach が 返す 共有 メモリ id
function bool shm remove var	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool shm remove var resource $shm_identifier int $variable_key	共有 メモリ から 変数 を 削除 する
function shmop delete $shmid	shmop _open が 作成 し た 共有 メモリブロック の 識別子
function bool shmop delete	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool shmop delete int $shmid	共有 メモリブロック を 削除 する
function shmop open $flags	フラグ に 設定 できる 内容 は 、 次 の とおり です
function shmop open $size	作成 し たい 共有 メモリブロック の 大きさ を バイト 数 で 指定 し ます
function shmop open $mode	共有 メモリセグメント に 設定 し たい 許可 属性 で 、 ファイル に関する 許可 属性 と 同様 なもの です
function shmop open $key	共有 メモリブロック の システム id で あり 、 1 0 進数 また は 1 6 進数 で 指定 する こと が 可能 です
function int shmop open	成功 し た 場合 は 、 shmop _open は 作成 し た 共有 メモリセグメント に アクセス する ため に 使用 する id を 返し ます
function int shmop open int $key string $flags int $mode int $size	共有 メモリブロック を 作成 また は オープン する
function shmop read $count	読み込む バイト 数
function shmop read $start	読み込み を 開始 する 位置
function shmop read $shmid	shmop _open が 作成 し た 共有 メモリブロック の 識別子
function string shmop read	データ を 返し ます
function string shmop read int $shmid int $start int $count	共有 メモリブロック から データ を 読み込む
function shmop size $shmid	shmop _open が 作成 し た 共有 メモリブロック の 識別子
function int shmop size	共有 メモリブロック が 占有 する バイト 数 を 表す 整数 を 返し ます
function int shmop size int $shmid	共有 メモリブロック の 大きさ を 得る
function simplexml import dom $node	dom 要素 ノード
function simplexml import dom $class_name	この オプションパラメータ を 使用 する と 、 simplexml _import _dom は 指定 し た クラス の オブジェクト を 返し ます
function SimpleXMLElement simplexml import dom	simplexmlelement を 返し ます
function SimpleXMLElement simplexml import dom DOMNode $node string $class_name	dom ノード から simplexmlelement オブジェクト を 取得 する
function simplexml load string $is_prefix	ns が プレフィックス で ある 場合 に true 、 uri で ある 場合 に false
function simplexml load string $data	整形式 xml 文字列
function simplexml load string $options	php 5
function simplexml load string $ns	名前 空間 プレフィックス あるい は uri
function simplexml load string $class_name	この オプション の パラメータ を 使用 し て 、 simplexml _load _file が 指定 さ れ た クラス の オブジェクト を 返す よう に し ます
function SimpleXMLElement simplexml load string	simplexmlelement クラス の オブジェクト を 返し ます
function SimpleXMLElement simplexml load string string $data string $class_name int $options string $ns bool $is_prefix	xml 文字列 を オブジェクト に 代入 する
function sin $arg	ラジアン で 表し た 値
function float sin	arg の サイン を 返し ます
function float sin float $arg	正弦 （ サイン ）
function sinh $arg	処理 する 引数
function float sinh	arg の ハイパボリックサイン を 返し ます
function float sinh float $arg	双曲 線正 弦 （ ハイパボリックサイン ）
function bool snmp get quick print	quick _print が オン の 場合 に true 、 それ 以外 の 場合 に false を 返し ます
function bool snmp get quick print	ucd ライブラリ の quick _print の 現在 の 設定 値 を 取得 する
function snmp set oid output format $oid_format	oid _format の 値 による oid
function bool snmp set oid output format int $oid_format	oid の 出力 形式 を 設定 する
function snmp2 get $timeout	最初 の タイムアウト まで の マイクロ 秒数
function snmp2 get $retries	タイムアウト 発生 時 の 再試 行回 数
function snmp2 get $community	リードコミュニティ
function snmp2 get $host	snmp エージェント
function snmp2 get $object_id	snmp オブジェクト
function string snmp2 get	成功 し た 場合 に snmp オブジェクト の 値 、 エラー 時 に false を 返し ます
function string snmp2 get string $host string $community string $object_id string $timeout string $retries	snmp オブジェクト を 取得 する
function snmp2 real walk $host	snmp エージェント サーバー の ホスト 名
function snmp2 real walk $community	リードコミュニティ
function snmp2 real walk $retries	タイムアウト 発生 時 の 再試 行回 数
function snmp2 real walk $timeout	最初 の タイムアウト まで の マイクロ 秒数
function snmp2 real walk $object_id	前 に ある snmp オブジェクト id
function array snmp2 real walk	成功 し た 場合 に snmp オブジェクト id とその 値 の 連想 配列
function array snmp2 real walk string $host string $community string $object_id string $timeout string $retries	指定 し たすべて の オブジェクト と その オブジェクト id を 返す
function snmp2 set $retries	タイムアウト 発生 時 の 再試 行回 数
function snmp2 set $value	新しい 値
function snmp2 set $community	ライトコミュニティ
function snmp2 set $type	the mib defines the type of each object id
function snmp2 set $host	snmp エージェント サーバー の ホスト 名
function snmp2 set $timeout	最初 の タイムアウト まで の マイクロ 秒数
function snmp2 set $object_id	snmp オブジェクト id
function bool snmp2 set	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool snmp2 set string $host string $community string $object_id string $type string $value string $timeout string $retries	snmp オブジェクト の 値 を 設定 する
function snmp2 walk $object_id	null の 場合 は object _id は snmp オブジェクトツリー の ルート と なり 、 ツリー 配下 の すべ て の オブジェクト を 配列 で 返し ます
function snmp2 walk $retries	タイムアウト 発生 時 の 再試 行回 数
function snmp2 walk $community	リードコミュニティ
function snmp2 walk $timeout	最初 の タイムアウト まで の マイクロ 秒数
function snmp2 walk $host	snmp エージェント サーバー
function array snmp2 walk	object _id を ルート と する すべ て の snmp オブジェクト の 値 の 配列 、 あるい は エラー 時 に false を 返し ます
function array snmp2 walk string $host string $community string $object_id string $timeout string $retries	すべて の snmp オブジェクト を エージェント から 取得 する
function snmpget $community	リードコミュニティ
function snmpget $hostname	snmp エージェント
function snmpget $timeout	最初 の タイムアウト まで の マイクロ 秒数
function snmpget $object_id	snmp オブジェクト
function snmpget $retries	タイムアウト が 発生 し た とき の 再試 行 の 回数
function string snmpget	成功 し た 場合 に snmp オブジェクト の 値 、 失敗 し た 場合 に false を 返し ます
function string snmpget string $hostname string $community string $object_id int $timeout int $retries	snmp オブジェクト を 取得 する
function snmpgetnext $retries	タイムアウト 発生 時 の 再試 行回 数
function snmpgetnext $host	snmp エージェント サーバー の ホスト 名
function snmpgetnext $community	リードコミュニティ
function snmpgetnext $object_id	前 に ある snmp オブジェクト の id
function snmpgetnext $timeout	最初 の タイムアウト まで の マイクロ 秒数
function string snmpgetnext	成功 し た 場合 に snmp オブジェクト の 値 、 エラー 時 に false を 返し ます
function string snmpgetnext string $host string $community string $object_id int $timeout int $retries	指定 し た オブジェクト id に 続く snmp オブジェクト を 取得 する
function snmpset $retries	タイムアウト 発生 時 の 再試 行回 数
function snmpset $value	新しい 値
function snmpset $community	ライトコミュニティ
function snmpset $type	the mib defines the type of each object id
function snmpset $host	snmp エージェント サーバー の ホスト 名
function snmpset $timeout	最初 の タイムアウト まで の マイクロ 秒数
function snmpset $object_id	snmp オブジェクト id
function bool snmpset	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool snmpset string $host string $community string $object_id string $type mixed $value int $timeout int $retries	snmp オブジェクト の 値 を 設定 する
function snmpwalkoid $community	リードコミュニティ
function snmpwalkoid $retries	タイムアウト 発生 時 の 再試 行回 数
function snmpwalkoid $hostname	snmp エージェント
function snmpwalkoid $timeout	最初 の タイムアウト まで の マイクロ 秒数
function snmpwalkoid $object_id	null の 場合 は 、 object _id が snmp オブジェクトツリー の ルート として 解釈 さ れ 、 ツリー の 配下 の すべ て の オブジェクト を 配列 として 返し ます
function array snmpwalkoid	object _id から の snmp オブジェクト の 値 の 配列 を ルート として 返し ます
function array snmpwalkoid string $hostname string $community string $object_id int $timeout int $retries	ネットワークエンティティ に関する 情報 ツリー を 検索 する
function socket bind $socket	socket _create で 作成 し た 有効 な ソケット 記述子
function socket bind $address	ソケット の 種類 が af _inet の 場合 、 address は ドット で 4 つに 区切 られ た 表記 （ 例 : 1 2 7
function socket bind $port（オプション）	パラメータ port は af _inet ソケット に バインド する 場合 に のみ 使用 さ れ 、 接続 する リモートホスト の ポート を 指定 し ます
function bool socket bind	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool socket bind resource $socket string $address int $port	ソケット に 名前 を バインド する
function socket create listen $backlog	backlog パラメータ は 、 接続 の 順番 待ち の キュー を どれ だけ の 長さ まで 保持 する か を 定義 し ます
function socket create listen $port	すべて の インターフェイス で 待ち受ける ポート
function resource socket create listen	socket _create _listen は 、 成功 し た 場合 に 新規 ソケットリソース を 、 エラー 時 に false を 返し ます
function resource socket create listen int $port int $backlog	接続 を 受け つける ため に ポート に ソケット を オープン する
function socket create pair $fd	2 つの ソケットリソース が 格納 さ れる 配列 へ の 参照
function socket create pair $type	type で は 、 ソケット が 使用 する 通信 の 形式 を 選択 し ます
function socket create pair $protocol	protocol は 、 指定 し た domain の 中 の 特定 の プロトコル を 指定 し ます
function socket create pair $domain	domain は 、 ソケット で 使用 する プロトコル の 種類 を 指定 し ます
function bool socket create pair	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool socket create pair int $domain int $type int $protocol array $fd	区別 でき ない ソケット の 組 を 作成 し 、 配列 に 保存 する
function socket create $type	type パラメータ は 、 ソケット が 利用 する 通信 方式 を 指定 し ます
function socket create $domain	パラメータ domain に は 、 ソケット が 利用 する プロトコルファミリー を 指定 し ます
function socket create $protocol	protocol は 、 ソケット 上 の 通信 で 使わ れる domain で 指定 さ れ た ファミリー に 属する プロトコル を 指定 し ます
function resource socket create	socket _create は 、 成功時 に ソケットリソース 、 失敗 時 に false を 返し ます
function resource socket create int $domain int $type int $protocol	ソケット （ 通信 時 の 終端 ） を 作成 する
function socket getpeername $address	指定 さ れ た ソケット の 型 が af _inet あるい は af _inet 6 で あっ た 場合 、 socket _getpeername は ピア （ リモート ） の ip アドレス を 適切 な 書式 （例 : 1 2 7
function socket getpeername $socket	socket _create あるい は socket _accept で 作成 し た ソケットリソース
function socket getpeername $port	指定 し た 場合 は 、 address に関連付ける ポート を 保持 し ます
function bool socket getpeername	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool socket getpeername resource $socket string $address int $port	指定 し た ソケット の リモート 側 に 問い合わせ 、 その 型 に 応じ て ホスト / ポート 、 あるい は unix ファイルシステム の パス を 返す
function socket import stream $stream	インポート する ストリームリソース
function resource socket import stream	false を 返し ます
function resource socket import stream resource $stream	ストリーム を インポート する
function socket read $socket	socket _create あるい は socket _accept で 作成 し た ソケットリソース
function socket read $length	読み込ま れる 最大 バイト 長 は 、 length パラメータ で 指定 し ます
function socket read $type	オプション の パラメータ type は 、 名前 の ある 定数 です
function string socket read	socket _read は 、 成功 時 に 文字 列 として データ を 返し 、 エラー 時 リモートホスト が 接続 を クローズ し た 場合 を 含み ます に false を 返し ます
function string socket read resource $socket int $length int $type	ソケット から 最大 バイト 長 まで 読み こむ
function socket recv $buf	受信 し た データ が 、 buf で 指定 し た 変数 に 格納 さ れ ます
function socket recv $socket	socket は 、 事前 に socket _create で 作成 し た ソケットリソース で なけれ ば なり ませ ん
function socket recv $flags	flags の 値 は 、 次 の フラグ を 論理 or | 演算子 で 組み合わ せ た もの と なり ます
function socket recv $len	最大 len バイト まで を リモートホスト から 取得 し ます
function int socket recv	socket _recv は 、 受信 し た バイト 数 を 返し ます
function int socket recv resource $socket string $buf int $len int $flags	接続 し た ソケット から データ を 受信 する
function socket select $tv_sec	tv _sec および tv _usec は 、 ともに タイムアウト を 指定 する パラメータ です
function socket select $except	配列 except に 挙げ られ た ソケット で は 、 例外 を 監視 し ます
function socket select $write	配列 write に 挙げ られ た ソケット で は 、 書き込み が ブロック さ れ て い ない か どう か を 監視 し ます
function int socket select	成功 し た 場合 は 、 socket _select は 配列 内 で 変化 の あっ た ソケットリソース の 数 を 返し ます
function int socket select array $read array $write array $except int $tv_sec int $tv_usec	与え られ た ソケット の 配列 に対し 、 指定 し た 有効 時間 で select システムコール を 実行 する
function socket send $buf	リモートホスト に 送信 する データ を 含む バッファ
function socket send $len	buf から リモートホスト に 送信 する バイト 数
function socket send $flags	flags の 値 は 、 以下 の フラグ の 任意 の 組み合わせ を 論理 or 演算子 | で 連結 し た もの と なり ます
function socket send $socket	socket _create あるい は socket _accept が 作成 し た ソケットリソース
function int socket send	socket _send は 、 送信 し た バイト 数 あるい は エラー 時 に false を 返し ます
function int socket send resource $socket string $buf int $len int $flags	接続 し た ソケット に データ を 送信 する
function socket sendto $addr	リモートホスト の ip アドレス
function socket sendto $len	buf から len バイト 分 の データ が 送信 さ れ ます
function socket sendto $socket	socket _create で 作成 し た ソケットリソース
function socket sendto $port	port は 、 データ の 送信 先 と なる リモートホスト の ポート 番号 です
function socket sendto $buf	送信 する データ が 、 buf から 取り出さ れ ます
function socket sendto $flags	flags の 値 は 、 以下 の フラグ の 任意 の 組み合わせ を 論理 or 演算子 | で 連結 し た もの と なり ます
function int socket sendto	socket _sendto は 、 リモートホスト に 送信 し た バイト 数 を 返し ます
function int socket sendto resource $socket string $buf int $len int $flags string $addr int $port	接続 し て いる かどう か によら ず ソケット に メッセージ を 送信 する
function socket set nonblock $socket	socket _create あるい は socket _accept で 作成 し た ソケットリソース
function bool socket set nonblock	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool socket set nonblock resource $socket	ソケットリソース を 非 ブロックモード に 設定 する
function socket set option $optname	使用 可能 な ソケットオプション は socket _get _option 関数 と 同じ です
function socket set option $socket	socket _create あるい は socket _accept で 作成 し た ソケットリソース
function socket set option $level	level パラメータ は 、 オプション の プロトコルレベル を 指定 し ます
function socket set option $optval	オプション の 値
function bool socket set option	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool socket set option resource $socket int $level int $optname mixed $optval	ソケット の オプション を 設定 する
function socket shutdown $how	how の 値 は 以下 の うち の ひとつ です
function socket shutdown $socket	socket _create で 作成 し た ソケットリソース
function bool socket shutdown	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool socket shutdown resource $socket int $how	受信 、 送信 、 また は 送受 信用 の ソケット を シャットダウン する
function socket strerror $errno	ソケット の エラー 番号
function string socket strerror	errno パラメータ に 対応 する エラーメッセージ を 返し ます
function string socket strerror int $errno	ソケットエラー の 内容 を 文字 列 として 返す
function socket write $buffer	書き込ま れる バッファ
function socket write $length	オプション の パラメータ length で 、 ソケット に 書き込む バイト 数 を 指定 する こと が 可能 です
function int socket write	ソケット へ の 書き込み に 成功 し た データ の バイト 数 を 返し ます
function int socket write resource $socket string $buffer int $length	ソケット に 書き込む
function sort $array	入力 の 配列
function sort $sort_flags	オプション の 2 番目 の パラメータ sort _flags は 、 以下 の 値 により ソート の 動作 を 修正 する ため に 使用 する こと が 可能 です
function bool sort	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool sort array $array int $sort_flags	配列 を ソート する
function soundex $str	入力 文字列
function string soundex	soundex キー を 文字列 で 返し ます
function string soundex string $str	文字列 の soundex キー を 計算 する
function spl autoload extensions $file_extensions	引数 なし で コール し た 場合 は 、 現在 の 拡張子 一覧 を カンマ 区切り で 返し ます
function string spl autoload extensions	spl _autoload の デフォルト 拡張子 の 一覧 を カンマ 区切り 形式 で 返し ます
function string spl autoload extensions string $file_extensions	spl _autoload 用 の デフォルト の 拡張子 を 登録 し 、 それ を 返す
function array spl autoload functions	すべて の 登録 済み _ _ autoload 関数 を 配列 で 返し ます
function array spl autoload functions	すべて の 登録 済み _ _ autoload 関数 を 返す
function spl autoload unregister $autoload_function	登録 を 解除 し たい autoload 関数
function bool spl autoload unregister	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool spl autoload unregister mixed $autoload_function	指定 し た 関数 の 、_ _ autoload の 実装 として の 登録 を 解除 する
function spl autoload $file_extensions	デフォルト で は 、 クラス 名 を 小文字 に して
function spl autoload $class_name	インスタンス を 作成 する 小文字 の クラス 名 および 名前 空間 名
function void spl autoload string $class_name string $file_extensions	_ _autoload の デフォルト 実装
function array spl classes	現在 利用 可能 な spl クラス を 配列 で 返し ます
function array spl classes	利用 可能 な spl クラス を 返す
function spl object hash $object	何らか の オブジェクト
function string spl object hash	現在 存在 する 各 オブジェクト に 固有 で 、 同 一 オブジェクト に対し て は 常 に 同じ値と なる 文字 列 を 返し ます
function string spl object hash object $obj	指定 し た オブジェクト の ハッシュ id を 返す
function split $pattern	大文字 小文字 を 区別 する 正規 表現
function split $string	入力 文字列
function split $limit	limit が 指定 さ れ た 場合 、 返さ れる 配列 に は 最大 limit の 要素 が 含ま れ ます
function array split	文字列 の 配列 を 返し ます
function array split string $pattern string $string int $limit	正規 表現 により 文字 列 を 分割 し 、 配列 に 格納 する
function spliti $string	入力 文字列
function spliti $limit	limit が 指定 さ れ た 場合 、 返さ れる 配列 に は 最大 limit の 要素 が 含ま れ ます
function spliti $pattern	大文字 小文字 を 区別 し ない 正規 表現
function array spliti	文字列 の 配列 を 返し ます
function array spliti string $pattern string $string int $limit	大文字 小文字 を 区別 し ない 正規 表現 により 文字 列 を 分割 し 、 配列 に 格納 する
function sql regcase $string	入力 文字列
function string sql regcase	大文字 小文字 を 区別 せ ず string に マッチ する 、 有効 な 正規 表現 式 を 返し ます
function string sql regcase string $string	大文字 小文字 を 区別 し ない マッチング の ため の 正規 表現 を 作成 する
function sqlite close $dbhandle	sqlite データベースリソース
function void sqlite close resource $dbhandle	オープン さ れ た sqlite データベース を 閉じる
function sqlite error string $error_code	使用 する エラーコード
function string sqlite error string	error _code に対応 する 可読 形式 の 説明 を 文字列 で 返し ます
function string sqlite error string int $error_code	エラーコード の 説明 を 返す
function sqlite escape string $item	クォート し たい 文字列
function string sqlite escape string	sqlite の sql 文 で 使用 できる 形式 に エスケープ し た 文字列 を 返し ます
function string sqlite escape string string $item	クエリパラメータ 用 に 文字列 を エスケープ する
function sqlite factory $mode	ファイル の モード
function sqlite factory $error_message	参照 として 渡さ れ 、 エラー が 発生 し た 場合 に データベース が オープン でき なかっ た 原因 を 説明 する 記述 的 な エラーメッセージ を 保持 する ため に 設定 さ れ ます
function sqlite factory $filename	sqlite データベース の ファイル 名
function SQLiteDatabase sqlite factory	成功時 に sqlitedatabase オブジェクト 、 失敗 時 に null を 返し ます
function SQLiteDatabase sqlite factory string $filename int $mode string $error_message	sqlite データベース を オープン し 、 sqlitedatabse オブジェクト を 返す
function sqlite has more $result	sqlite 結果 リソース
function bool sqlite has more	result ハンドル にまだ レコード が ある 場合 true を 返し ます
function bool sqlite has more resource $result	まだ レコード が ある か ない か を 返す
function string sqlite libencoding	ライブラリ の エンコーディング を 返し ます
function string sqlite libencoding	リンク さ れ て いる sqlite ライブラリ の エンコーディング を 返す
function string sqlite libversion	ライブラリ の バージョン を 文字列 で 返し ます
function string sqlite libversion	リンク さ れ て いる sqlite ライブラリ の バージョン を 返す
function sqlsrv fetch array $stmt	sqlsrv _query あるい は sqlsrv _prepare が 返す ステートメントリソース
function sqlsrv fetch array $offset	引数 row に sqlsrv _scroll _absolute また は sqlsrv _scroll _relative を 指定 する 際 に 、 この 引数 で 取得 する 列 を 指定 し ます
function sqlsrv fetch array $row	スクロール 可能 な カーソル を 用い た 結果 セット から 、 取得 する 列 を 指定 し ます
function sqlsrv fetch array $fetchType	返り値 の 型 を 指定 し ます
function array sqlsrv fetch array	成功 時 に 配列 を 返し ます
function array sqlsrv fetch array resource $stmt int $fetchType int $row int $offset	行 を 配列 として 返す
function sqrt $arg	処理 する 引数
function float sqrt	arg の 平方根 を 返し ます
function float sqrt float $arg	平方根
function srand $seed	オプション で 指定 する シード 値
function void srand int $seed	乱数 ジェネレータ を 初期化 する
function ssh2 auth agent $session	ssh 接続 リンク id
function ssh2 auth agent $username	リモート の ユーザー 名
function bool ssh2 auth agent	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ssh2 auth agent resource $session string $username	ssh の 認証 を 、 ssh agent を 使っ て 行う
function ssh2 auth password $session	ssh 2 _ connect の コール によっ て 取得 し た ssh 接続 リンク id
function ssh2 auth password $username	リモート の ユーザー 名
function ssh2 auth password $password	username の パスワード
function bool ssh2 auth password	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ssh2 auth password resource $session string $username string $password	ssh 上 で プレーン な パスワード を 使用 し た 認証 を 行う
function ssh2 auth pubkey file $session	ssh 2 _ connect の コール によっ て 取得 し た ssh 接続 リンク id
function ssh2 auth pubkey file $passphrase	もし 、 privkeyfile が 暗号 化 さ れ て いる そう ある べき です 場合 、 パスフレーズ も 引数 に 渡す 必要 が あり ます
function ssh2 auth pubkey file $pubkeyfile	公開鍵 ファイル
function bool ssh2 auth pubkey file	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ssh2 auth pubkey file resource $session string $username string $pubkeyfile string $privkeyfile string $passphrase	公開鍵 を 使用 し た 認証 を 行う
function ssh2 connect $methods	methods は 以下 に 示さ れ た 4つ の パラメータ を 持つ 連想 配列 です
function resource ssh2 connect	成功 し た 場合 に リソース 、 エラー 時 に false を 返し ます
function resource ssh2 connect string $host int $port array $methods array $callbacks	ssh サーバー に 接続 する
function ssh2 exec $env	env に は 、 対象 と なる 環境 で 設定 する 名前 / 値 の ペア を 連想 配列 で 渡し ます
function ssh2 exec $width	仮想 端末 の 幅
function ssh2 exec $width_height_type	width _height _type は 、 ssh 2 _ term _unit _chars あるい は ssh 2 _ term _unit _pixels のいずれ か です
function ssh2 exec $session	ssh 2 _ connect の コール によっ て 取得 し た ssh 接続 リンク id
function ssh2 exec $height	仮想 端末 の 高さ
function resource ssh2 exec	成功時 に ストリーム を 返し 、 失敗 し た 場合 に false を 返し ます
function resource ssh2 exec resource $session string $command string $pty array $env int $width int $height int $width_height_type	リモートサーバー 上 で コマンド を 実行 する
function ssh2 methods negotiated $session	ssh 2 _ connect の コール によっ て 取得 し た ssh 接続 リンク id
function array ssh2 methods negotiated resource $session	ネゴシエート さ れ た メソッド の リスト を 返す
function resource ssh2 publickey init	他 のすべて の ssh 2 _ publickey _* メソッド で 使用 する 、 ssh 2 公開鍵 サブシステム リソース を 返し ます
function resource ssh2 publickey init resource $session	公開鍵 サブシステム を 初期化 する
function ssh2 publickey list $pkey	公開鍵 サブシステム の リソース
function array ssh2 publickey list	鍵 を 、 数値 添字 の 配列 で 返し ます
function array ssh2 publickey list resource $pkey	現在 認証 済み の 公開鍵 の 一覧 を 表示 する
function ssh2 scp recv $remote_file	リモートファイル へ の パス
function ssh2 scp recv $session	ssh 2 _ connect の コール によっ て 取得 し た ssh 接続 リンク id
function ssh2 scp recv $local_file	ローカルファイル へ の パス
function bool ssh2 scp recv	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ssh2 scp recv resource $session string $remote_file string $local_file	scp 経由 で ファイル を 要求 する
function ssh2 sftp chmod $sftp	ssh 2 sftp リソース
function ssh2 sftp chmod $mode	ファイル の パーミッション
function ssh2 sftp chmod $filename	ファイル へ の パス
function bool ssh2 sftp chmod	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ssh2 sftp chmod resource $sftp string $filename int $mode	ファイル の モード を 変更 する
function ssh2 sftp readlink $sftp	ssh 2 _ sftp で オープン し た ssh 2 sftp リソース
function ssh2 sftp readlink $link	シンボリックリンク へ の パス
function string ssh2 sftp readlink	シンボリックリンク link の ターゲット を 返し ます
function string ssh2 sftp readlink resource $sftp string $link	シンボリックリンク の ターゲット を 返す
function ssh2 sftp realpath $sftp	ssh 2 _ sftp で オープン し た ssh 2 sftp リソース
function string ssh2 sftp realpath	実際 の パス を 表す 文字 列 を 返し ます
function string ssh2 sftp realpath resource $sftp string $filename	指定 さ れ た パス 文字 列 の 実パス を 解決 する
function ssh2 sftp rmdir $sftp	ssh 2 _ sftp で オープン し た ssh 2 sftp リソース
function bool ssh2 sftp rmdir	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ssh2 sftp rmdir resource $sftp string $dirname	ディレクトリ を 削除 する
function ssh2 sftp unlink $sftp	ssh 2 _ sftp で オープン し た ssh 2 sftp リソース
function bool ssh2 sftp unlink	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool ssh2 sftp unlink resource $sftp string $filename	ファイル を 削除 する
function ssh2 sftp $session	ssh 2 _ connect の コール によっ て 取得 し た ssh 接続 リンク id
function resource ssh2 sftp	この メソッド は 全て の 他 の ssh 2 _ sftp _* や ssh 2
function resource ssh2 sftp resource $session	sftp サブシステム を 初期化 する
function ssh2 shell $height	仮想 端末 の 高さ
function ssh2 shell $width	仮想 端末 の 幅
function ssh2 shell $width_height_type	width _height _type は ssh 2 _ term _unit _chars あるい は ssh 2 _ term _unit _pixels のいずれ か です
function ssh2 shell $term_type	term _type は 対象 システム の / etc / termcap に 記載 さ れ た エントリ の 一つ に 相当 し ます
function ssh2 shell $env	env に は 、 対象 の 環境 に 設定 する 名前 / 値 の 組 の 連想 配列 を 渡す こと が でき ます
function ssh2 shell $session	ssh 2 _ connect の コール によっ て 取得 し た ssh 接続 リンク id
function resource ssh2 shell resource $session string $term_type array $env int $width int $height int $width_height_type	対話式 の シェル を 要求 する
function stat $filename	ファイル へ の パス
function array stat string $filename	ファイル に関する 情報 を 取得 する
function str getcsv $input	パース する 文字列
function str getcsv $delimiter	フィールド 区切り 文字 1 文字 のみ
function str getcsv $escape	エスケープ 文字 1 文字 のみ
function str getcsv $enclosure	フィールド 囲み 文字 1 文字 のみ
function array str getcsv	読み込ん だ フィールド の 内容 を 配列 で 返し ます
function array str getcsv string $input string $delimiter string $enclosure string $escape	csv 文字列 を パース し て 配列 に 格納 する
function str pad $pad_type	オプション の 引数 pad _type に は 、 str _pad _right str _pad _left str _pad _both を 指定 可能 です
function str pad $pad_string	注意 : 必要 と さ れる 埋める 文字 数 が pad _string の 長さ で 均等 に 分割 でき ない 場合 、 pad _string は 切り 捨 て られ ます
function str pad $pad_length	pad _length の 値が 負 、 また は 入力 文字 列 の 長 さ 以下 で ある 場合 、 埋める 操作 は 行わ れ ませ ん
function str pad $input	入力 文字列
function string str pad	埋め た 後 の 文字列 を 返し ます
function string str pad string $input int $pad_length string $pad_string int $pad_type	文字列 を 固定 長 の 他 の 文字 列 で 埋める
function str repeat $input	繰り返す 文字列
function str repeat $multiplier	input を 繰り返す 回数
function string str repeat	繰り返し た 文字列 を 返し ます
function string str repeat string $input int $multiplier	文字列 を 反復 する
function str replace $replace	見つかっ た search を 置き 換える 値
function str replace $search	探し たい 値
function str replace $count	指定 し た 場合 は 、 マッチ し て 置換 が 行わ れ た 箇所 の 個数 が ここ に 格納 さ れ ます
function str replace $subject	検索 ・ 置換 の 対象 と なる 文字 列 あるい は 配列
function mixed str replace	この 関数 は 、 置換 後 の 文字 列 あるい は 配列 を 返し ます
function mixed str replace mixed $search mixed $replace mixed $subject int $count	検索 文字列 に 一致 し たすべて の 文字列 を 置換 する
function str rot13 $str	入力 文字列
function string str rot13	指定 し た 文字列 を rot 1 3 変換 し た 結果 を 返し ます
function string str rot13 string $str	文字列 に rot 1 3 変換 を 行う
function str word count $charlist	& # 0 3 9 ; 単語 &# 0 3 9 ; とみなさ れる 文字 に 追加 する 文字 の リスト
function str word count $format	この 関数 の 戻り値 を 設定 し ます
function str word count $string	文字列
function mixed str word count	選択 し た format に 応じ て 、 配列 あるい は 整数 を 返し ます
function mixed str word count string $string int $format string $charlist	文字列 に 使用 さ れ て いる 単語 について の 情報 を 返す
function strcspn $start	subject の 中 で 調べ 始める 位置
function strcspn $subject	調べ たい 文字列
function strcspn $mask	許可 し ない 文字 を すべ て 含む 文字列
function strcspn $length	subject の 中 で の 調べる セグメント の 長さ
function int strcspn	subject の 中 で 、 mask の 文字 を まっ たく 含ま ない 最初 の セグメント の 長さ を 返し ます
function int strcspn string $subject string $mask int $start int $length	マスク に マッチ し ない 最初 の セグメント の 長さ を 返す
function stream bucket prepend $bucket	bucket オブジェクト
function stream bucket prepend $brigade	brigade は bucket brigade を 指す リソース で 、 ここ に は ひとつ あるい は 複数 の bucket オブジェクト が 含ま れ ます
function void stream bucket prepend resource $brigade object $bucket	bucket を brigade の 先頭 に 追加 する
function stream context create $options	次 の よう な 形式 の 連想 配列 から なる 連想 配列 で なく て は なり ませ ん
function stream context create $params	$arr [& # 0 3 9 ; parameter &# 0 3 9 ;] = $ value 形式 の 連想 配列 で なく て ば なり ませ ん
function resource stream context create	ストリームコンテキストリソース を 返し ます
function resource stream context create array $options array $params	ストリームコンテキスト を 作成 する
function stream context get params $stream_or_context	ストリームリソース あるい は コンテキスト リソース
function array stream context get params	すべて の コンテキストオプション および パラメータ を 含む 連想 配列 を 返し ます
function array stream context get params resource $stream_or_context	コンテキスト の パラメータ を 取得 する
function stream filter append $filtername	フィルタ 名
function stream filter append $stream	対象 と なる ストリーム
function stream filter append $params	この フィルタ は 、 指定 さ れ た params と 共に 、 リスト の 末尾 に 追加 さ れ 、 ストリーム に対する 操作 の 中 で 最後 に 呼び出さ れ ます
function resource stream filter append	成功 し た 場合 に リソース 、 失敗 し た 場合 に false を 返し ます
function resource stream filter append resource $stream string $filtername int $read_write mixed $params	ストリーム に フィルタ を 付加 する
function stream filter prepend $filtername	フィルタ 名
function stream filter prepend $stream	対象 と なる ストリーム
function stream filter prepend $params	この フィルタ は 、 指定 さ れ た params と 共に 、 リスト の 先頭 に 追加 さ れ 、 ストリーム に対する 操作 の 中 で 最初 に 呼び出さ れ ます
function resource stream filter prepend	成功 し た 場合 に リソース 、 失敗 し た 場合 に false を 返し ます
function resource stream filter prepend resource $stream string $filtername int $read_write mixed $params	フィルタ を ストリーム に 付加 する
function stream filter remove $stream_filter	削除 する ストリームフィルタ
function bool stream filter remove	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool stream filter remove resource $stream_filter	ストリーム から フィルタ を 取り除く
function stream get contents $handle(resource)	ストリームリソース （例 : fopen の 返す 値 ）
function stream get contents $offset(integer)	読み込み を 開始 する 前 に 移動 する 位置
function stream get contents $maxlength(integer)	読み込む 最大 バイト 数
function string stream get contents	文字列 を 返し ます
function string stream get contents resource $handle int $maxlength int $offset	残り の ストリーム を 文字列 に 読み込む
function stream get meta data $stream	ストリーム は fopen か 、 fsockopen か 、 pfsockopen で 作成 さ れ たい ずれ の もの も 指定 でき ます
function array stream get meta data	結果 の 配列 は 次 の よう な 項目 を 含み ます
function array stream get meta data resource $stream	ヘッダー あるい は メタデータ を ストリーム また は ファイルポインタ から 取得 する
function array stream get wrappers	スクリプト を 走ら せ て いる システム 上 で 使う こと の できる すべ て の ストリーム ラッパー の 名前 を 配列 の 形 で 返し ます
function array stream get wrappers	登録 さ れ て いる ストリーム の ラッパー の リスト を 取得 する
function stream is local $stream_or_url	調べ たい ストリームリソース あるい は url
function bool stream is local	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool stream is local mixed $stream_or_url	ローカルストリーム か どう か を 調べる
function stream notification callback $notification_code	stream _notify _* 通知 定数 の ひとつ
function stream notification callback $bytes_max	利用 可能 な 場合 は bytes _max の 値 が 格納 さ れ ます
function stream notification callback $bytes_transferred	利用 可能 な 場合 は bytes _transferred の 値 が 格納 さ れ ます
function stream notification callback $message_code	イベント について 説明 する コード が 存在 する 場合 に 渡さ れ ます
function stream notification callback $severity	stream _notify _severity _* 通知 定数 の ひとつ
function stream notification callback $message	イベント について 説明 する メッセージ が 存在 する 場合 に 渡さ れ ます
function void stream notification callback int $notification_code int $severity string $message int $message_code int $bytes_transferred int $bytes_max	notification コンテキストパラメータ 用 の コールバック 関数
function stream select $write	write 配列 に 列挙 さ れ た ストリーム に対し て は 、 ブロック し ない で 書き込み が できる かどう か の 監視 が 行わ れ ます
function stream select $tv_sec	tv _sec と tv _usec は 、 一体 と なっ て 、 timeout パラメータ を 表現 し ます
function stream select $tv_usec	tv _sec の 説明 を 参照く ださい
function stream select $except	except 配列 に 列挙 さ れ た ストリーム に対し て は 、 重大 な 例外 （& quot ; 帯域 外 の &quot ;） データ が 発生 し た かどう か の 監視 が 行わ れ ます
function int stream select	成功 し た 場合 stream _select は 、 変更 さ れ た 配列 に 何個 の ストリームリソース が 格納 さ れ たか を 示す数 を 返し ます
function int stream select array $read array $write array $except int $tv_sec int $tv_usec	select システムコール と 同等 の 操作 を 、 ストリーム の 配列 に対し て tv _sec と tv _usec で 指定 さ れ た タイムアウト 時間 を もっ て 行う
function stream set blocking $stream	ストリーム
function stream set blocking $mode	mode が false の 時 、 ストリーム は 非 ブロックモード に 切り 替え られ 、 true の 場合 は 、 ブロックモード に 切り 替え られ ます
function bool stream set blocking	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool stream set blocking resource $stream bool $mode	ストリーム の ブロックモード を 有効 に する / 解除 する
function stream set read buffer $stream	ファイルポインタ
function stream set read buffer $buffer	バッファ の バイト 数
function int stream set read buffer	成功時 に 0 を 、 要求 通り に 設定 でき なかっ た 場合 は それ 以外 の 値 を 返し ます
function int stream set read buffer resource $stream int $buffer	指定 し た ストリーム の ファイル 読み込み バッファリング を 有効 に する
function stream set timeout $microseconds	設定 し たい タイムアウト の マイクロ 秒数 部分
function stream set timeout $seconds	設定 し たい タイムアウト の 秒数 部分
function stream set timeout $stream	対象 と なる ストリーム
function bool stream set timeout	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool stream set timeout resource $stream int $seconds int $microseconds	ストリーム に タイムアウト を 設定 する
function stream set write buffer $stream	ファイルポインタ
function stream set write buffer $buffer	バッファ の バイト 数
function int stream set write buffer	成功時 に 0 を 、 要求 通り に 設定 でき なかっ た 場合 は それ 以外 の 値 を 返し ます
function int stream set write buffer resource $stream int $buffer	指定 さ れ た ストリーム の ファイル 書き込み バッファリング を 有効 に する
function stream socket accept $peername	接続元 の クライアント の 名前 アドレス が 含ま れ て い て 、 選択 し た トランスポート で 有効 で あっ た 場合 に 、 それ を 設定 し ます
function stream socket accept $server_socket	接続 元 から の 接続 を 受け 付ける サーバーソケット
function stream socket accept $timeout	デフォルト の ソケット 接続 待ち タイムアウト を 上書き し ます
function resource stream socket accept	受け付け た ソケット 接続 へ の ストリーム を 返し ます
function resource stream socket accept resource $server_socket float $timeout string $peername	stream _socket _server で 作ら れ た ソケット の 接続 を 受け 入れる
function stream socket client $context	stream _context _create で 作成 し た 有効 な コンテキストリソース
function stream socket client $remote_socket	接続 する ソケット の アドレス
function stream socket client $flags	接続 設定 フラグ の 任意 の 組み合わせ を 指定 できる ビットフィールド です
function stream socket client $errno	接続 に 失敗 し た 場合 に システムレベル の エラー 番号 が 設定 さ れ ます
function stream socket client $timeout	connect システムコール が タイムアウト と なる まで の 秒数
function stream socket client $errstr	接続 に 失敗 し た 場合 に システムレベル の エラーメッセージ が 設定 さ れ ます
function resource stream socket client	成功 し た 場合 に 、 fgets fgetss fwrite fclose feof といっ た 、 ファイル 関数 と 共に 使う こと の できる ストリームリソース を 返し ます
function resource stream socket client string $remote_socket int $errno string $errstr float $timeout int $flags resource $context	インターネットドメイン また は unix ドメイン の ソケット 接続 を 開く
function stream socket pair $protocol	使用 する プロトコル
function stream socket pair $domain	使用 する プロトコルファミリー
function stream socket pair $type	使用 する 接続 の 型
function array stream socket pair	成功 し た 場合 に 2 つの ソケットリソース の 配列 、 失敗 し た 場合 に false を 返し ます
function array stream socket pair int $domain int $type int $protocol	接続 さ れ た 、 区別 でき ない ソケットストリーム の 組 を 作成 する
function stream socket recvfrom $length	socket から 受信 する バイト 数
function stream socket recvfrom $flags	flags は 以下 の 値 の 組み合わせ です
function stream socket recvfrom $socket	リモートソケット
function stream socket recvfrom $address	address が 指定 さ れ た 場合 、 そこに は リモートソケット の アドレス が 保存 さ れ ます
function string stream socket recvfrom	読み込ん だ データ を 文字列 で 返し ます
function string stream socket recvfrom resource $socket int $length int $flags string $address	接続 さ れ て いる かどう か に かかわら ず 、 ソケット から の データ を 受信 する
function stream socket sendto $data	送り たい データ
function stream socket sendto $address	address で 別 の アドレス が 指定 さ れ て い ない 限り 、 ソケットストリーム が 作成 さ れ た 際 の アドレス を 使用 し ます
function stream socket sendto $socket	data を 送信 する ソケット
function stream socket sendto $flags	flags は 以下 の 値 の 組み合わせ です
function int stream socket sendto	結果 コード を 整数 値 で 返し ます
function int stream socket sendto resource $socket string $data int $flags string $address	接続 さ れ て いる かどう か に かかわら ず 、 ソケット に データ を 送信 する
function stream socket server $errstr	errno の 説明 を 参照く ださい
function stream socket server $flags	ソケット 作成 フラグ の 任意 の 組み合わせ を 指定 できる ビットフィールド です
function stream socket server $errno	オプション の errno と errstr パラメータ が 存在 する とき は 、 そこに システムレベル の socket 、 bind および listen の コール に おい て 発生 し た 実際 の システムレベル の エラー を 返し ます
function resource stream socket server	作成 し た ストリーム 、 あるい は エラー 時 に false を 返し ます
function resource stream socket server string $local_socket int $errno string $errstr int $flags resource $context	インターネットドメイン また は unix ドメイン の サーバーソケット を 作成 する
function stream socket shutdown $stream	オープン し て いる ストリーム たとえ ば stream _socket _client で オープン し た もの など
function stream socket shutdown $how	以下 の 定数 のい ずれ か
function bool stream socket shutdown	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool stream socket shutdown resource $stream int $how	全 二重 接続 を 終了 する
function bool stream wrapper unregister	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool stream wrapper unregister string $protocol	url ラッパー の 登録 を 解除 する
function strip tags $str	入力 文字列
function strip tags $allowable_tags	オプション の 2 番目 の 引数 により 、 取り除か ない タグ を 指定 でき ます
function string strip tags	タグ を 除去 し た 文字列 を 返し ます
function string strip tags string $str string $allowable_tags	文字列 から html および php タグ を 取り除く
function stripcslashes $str	元 に 戻し たい 文字列
function string stripcslashes	元 に 戻し た 文字列 を 返し ます
function string stripcslashes string $str	addcslashes で クォート さ れ た 文字列 を アンクォート する
function stripslashes $str	入力 文字列
function string stripslashes	バックスラッシュ が 取り除か れ た 文字列 を 返し ます \& # 0 3 9 ; が & # 0 3 9 ; に なる など
function string stripslashes string $str	クォート さ れ た 文字 列 の クォート 部分 を 取り除く
function strnatcasecmp $str2	次 の 文字列
function strnatcasecmp $str1	最初 の 文字列
function int strnatcasecmp	他 の 文字 列比 較関 数 と 同様 に 、 この 関数 は 、 str 1 が str 2 より 小さい 場合 に & lt ; 0 、 str 1 が str 2 より 大きい 場合 に & gt ; 0 、 等しい 場合 に 0 を 返し ます
function int strnatcasecmp string $str1 string $str2	&quot ; 自然順 &quot ; アルゴリズム により 大文 字小 文字 を 区別 し ない 文字 列比 較 を 行う
function strpbrk $char_list	この パラメータ は 大文字 小文字 を 区別 し ます
function strpbrk $haystack	char _list を 探す 文字列
function string strpbrk	見つかっ た 文字 から 始まる 文字 列 、 あるい は 見つ から なかっ た 場合 に false を 返し ます
function string strpbrk string $haystack string $char_list	文字列 の 中 から 任意 の 文字 を 探す
function strpos $needle	needle が 文字列 で ない 場合 は 、 それ を 整数 に 変換 し 、 その 番号 に 対応 する 文字 として 扱い ます
function strpos $haystack	検索 を 行う 文字列
function strpos $offset	指定 する と 、 文字 列内 で の 検索 開始 位置 が その 位置 に なり ます
function mixed strpos	needle が 見つかっ た 位置 を 、 haystack 文字列 の 先頭 offset の 値と は 無関係 から の 相対 位置 で 返し ます
function mixed strpos string $haystack mixed $needle int $offset	文字 列内 の 部分 文字 列 が 最初 に 現れる 場所 を 見つける
function strptime $format(string)	date で 使用 さ れ て いる フォーマット （ 例 : strftime で 使用 さ れ て い た もの と 同じ ）
function strptime $date(string)	パース する 文字 列 （例 : strftime の 返り 値 ）
function array strptime	成功 し た 場合 は 配列 、 失敗 し た 場合 に false を 返し ます
function array strptime string $date string $format	strftime が 生成 し た 日付 / 時刻 を パース する
function strrpos $offset	指定 する と 、 文字列 の 開始 位置 から この 文字 数 だけ 進ん だ ところ で 検索 を 中止 し ます
function strrpos $needle	needle が 文字列 で ない 場合 は 、 それ を 整数 に 変換 し 、 その 番号 に 対応 する 文字 として 扱い ます
function strrpos $haystack	検索 を 行う 文字列
function int strrpos	needle が 見つかっ た 位置 を 、 haystack 文字列 の 先頭 offset の 値と は 無関係 から の 相対 位置 で 返し ます
function int strrpos string $haystack string $needle int $offset	文字 列中 に 、 ある 部分 文字 列 が 最後 に 現れる 場所 を 探す
function strspn $mask	許可 する 文字 の 一覧
function strspn $subject	調べ たい 文字列
function strspn $length	subject 内 で 調べる 部分 の 長さ
function strspn $start	subject の 中 で 調べ 始める 位置
function int strspn	subject の 中 で 、 全 て mask の 中 の 文字 から なる 最初 の セグメント の 長さ を 返し ます
function int strspn string $subject string $mask int $start int $length	指定 し た マスク 内 に 含まれる 文字 から なる 文字 列 の 最初 の セグメント の 長さ を 探す
function strtok $str	より 小さい 文字列 トークン に 分割 する 文字列
function strtok $token	str を 分割 する 際 に 使用 する 区切り 文字
function string strtok	文字列 トークン を 返し ます
function string strtok string $str string $token	文字列 を トークン に 分割 する
function strtoupper $string	入力 文字列
function string strtoupper	大文字 に し た 文字列 を 返し ます
function string strtoupper string $string	文字列 を 大文字 に する
function substr compare $length	比較 する 長さ
function substr compare $str	比較 し たい 二 番 目 の 文字列
function substr compare $offset	比較 を 開始 する 位置
function substr compare $main_str	比較 し たい 最初 の 文字列
function substr compare $case_insensitivity	case _insensitivity が true の 場合 、 大文字 小文字 を 区別 せ ず に 比較 し ます
function int substr compare	main _str の offset 以降 が str より 小さい 場合 に 負の 数 、 str より 大きい 場合 に 正の 数 、 等しい 場合 に 0 を 返し ます
function int substr compare string $main_str string $str int $offset int $length bool $case_insensitivity	指定 し た 位置 から 指定 し た 長さ の 2 つの 文字 列 について 、 バイナリ 対応 で 比較 する
function substr count $haystack	検索 対象 の 文字列
function substr count $offset	開始 位置 の オフセット
function substr count $needle	検索 する 副文 字列
function substr count $length	指定 し た オフセット 以降 に 副文 字列 で 検索 する 最大 長
function int substr count	この 関数 は 整数 を 返し ます
function int substr count string $haystack string $needle int $offset int $length	副 文字 列 の 出現 回数 を 数える
function substr replace $length	正 の 値 を 指定 し た 場合 、 string の 置換 さ れる 部分 の 長さ を 表し ます
function substr replace $string	入力 文字列
function substr replace $replacement	置換 する 文字列
function substr replace $start	start が 正 の 場合 、 置換 は string で start 番目 の 文字 から 始まり ます
function mixed substr replace	結果 の 文字列 を 返し ます
function mixed substr replace mixed $string mixed $replacement mixed $start mixed $length	文字列 の 一部 を 置換 する
function svn add $force	true の 場合 は 、 すで に バージョン 管理 下 に おか れ て いる ディレクトリ の 中身 も 調べ 、 もし バージョン 管理 さ れ て い ない ファイル が あれ ば それ も 追加 し ます
function svn add $recursive	アイテム が ディレクトリ で ある 場合 、 その 中身 を 再帰 的 に 追加 する かど う か を 指定 し ます
function svn add $path	追加 し たい アイテム の パス
function bool svn add	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool svn add string $path bool $recursive bool $force	作業 ディレクトリ 内 の アイテム の 追加 を 予約 する
function svn auth get parameter $key	キー の 名前
function string svn auth get parameter	key の 値 を 文字列 で 返し ます
function string svn auth get parameter string $key	認証 パラメータ を 取得 する
function svn auth set parameter $value	その パラメータ に 指定 する 値
function svn auth set parameter $key	キー の 名前
function void svn auth set parameter string $key string $value	認証 パラメータ を 設定 する
function svn blame $repository_url	リポジトリ の url
function svn blame $revision_no	リビジョン 番号
function array svn blame	svn blame 情報 を 配列 で 返し ます
function array svn blame string $repository_url int $revision_no	ファイル の svn blame を 取得 する
function svn cat $revision_no	取得 し たい リビジョン 番号 を 表す 整数 値
function svn cat $repos_url	リポジトリ 内 の アイテム へ の パス を 表す url 文字列
function string svn cat	成功 し た 場合 に アイテム の 内容 を 表す 文字 列 、 失敗 し た 場合 に false を 返し ます
function string svn cat string $repos_url int $revision_no	リポジトリ 内 の ファイル の 内容 を 返す
function svn checkout $targetpath	チェックアウト 先 ディレクトリ の ローカルパス
function svn checkout $flags	svn _non _recursive および svn _ignore _externals の 任意 の 組み合わせ
function svn checkout $revision	チェックアウト し たい リビジョン 番号 を 表す 整数 値
function svn checkout $repos	チェックアウト し たい リポジトリ 内 の ディレクトリ を 表す url 文字列
function bool svn checkout	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool svn checkout string $repos string $targetpath int $revision int $flags	リポジトリ から 作業 コピー を チェックアウト する
function string svn client version	バージョン 番号 を 表す 文字 列 を 返し ます
function string svn client version	svn クライアントライブラリ の バージョン を 返す
function svn commit $log	コミット 時 に 使用 する ログメッセージ
function svn commit $recursive	配列 targets に ディレクトリ が 指定 さ れ た 場合 の 再帰 コミット を 無効 に する フラグ
function svn commit $targets	コミット する ローカルパス や ファイル の 配列
function array svn commit	以下 の よう な 形式 の 配列 を 返し ます
function array svn commit string $log array $targets bool $recursive	変更 内容 を 、 ローカル の 作業 コピー から リポジトリ に 送信 する
function svn delete $path	削除 し たい アイテム へ の パス
function svn delete $force	true の 場合 は 、 ファイル が ローカル で 変更 さ れ て いて も 削除 し ます
function bool svn delete	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool svn delete string $path bool $force	作業 コピー あるい は リポジトリ から アイテム を 削除 する
function svn diff $path2	もう ひとつ の パス
function svn diff $rev2	もう ひとつ の パス の リビジョン 番号
function svn diff $path1	最初 の パス
function svn diff $rev1	最初 の パス の リビジョン 番号
function array svn diff	ふたつ の ストリーム の 内容 を 含む 配列 の リスト を 返し ます
function array svn diff string $path1 int $rev1 string $path2 int $rev2	ふたつ の パス の 差分 を 再帰 的 に 取得 する
function svn export $frompath	現在 の リポジトリ へ の パス
function svn export $working_copy	true の 場合 は 、 コミット し て い ない ファイル を 作業 コピー から エクスポート し ます
function svn export $topath	新しい リポジトリ へ の パス
function bool svn export	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool svn export string $frompath string $topath bool $working_copy int $revision_no	svn ディレクトリ の 内容 を エクスポート する
function svn log $repos_url	履歴 を 取得 し たい アイテム の リポジトリ url
function svn log $limit	取得 し たい ログ の 数
function svn log $start_revision	ログ を 取得 し たい 最初 の リビジョン 番号
function svn log $flags	svn _omit _messages 、 svn _discover _changed _paths および svn _stop _on _copy の 任意 の 組み合わせ
function svn log $end_revision	ログ を 取得 し たい 最後 の リビジョン 番号
function array svn log	成功 し た 場合 は 、 この 関数 は 次 の よう な 構造 の 配列 を 返し ます
function array svn log string $repos_url int $start_revision int $end_revision int $limit int $flags	指定 し た リポジトリ url の コミットログメッセージ を 返す
function svn mkdir $path	作業 コピー あるい は リポジトリ へ の パス
function bool svn mkdir	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool svn mkdir string $path string $log_message	作業 コピー あるい は リポジトリ 内 に ディレクトリ を 作成 する
function svn revert $recursive	再帰 的 に 処理 する かど う か を 表す オプション の パラメータ
function svn revert $path	作業 コピー へ の パス
function bool svn revert	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool svn revert string $path bool $recursive	作業 コピー へ の 変更 を 取り消す
function svn update $revno	アップデート する リビジョン 番号
function svn update $recurse	ディレクトリ を 再帰 処理 する かどう か
function svn update $path	ローカル の 作業 コピー へ の パス
function int svn update	成功 し た 場合 に 新しい リビジョン 番号 、 失敗 し た 場合 に false を 返し ます
function int svn update string $path int $revno bool $recurse	作業 コピー を アップデート する
function sybase close $link_identifier	リンク id を 省略 し た 場合 は 、 最後 に オープン し た リンク を 使用 し ます
function bool sybase close	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool sybase close resource $link_identifier	sybase 接続 を 閉じる
function bool sybase data seek	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool sybase data seek resource $result_identifier int $row_number	内部行 ポインタ を 移動 する
function sybase deadlock retry count $retry_count	retry _count の 値 - 1 永遠 に 再試行 し ます （ デフォルト ）
function void sybase deadlock retry count int $retry_count	デッドロック の 再試 行回 数 を 設定 する
function sybase fetch field $field_offset	フィールドオフセット が 指定 さ れ ない 場合 、 sybase _fetch _field によりまだ 取り込ま れ て い ない 次 の フィールド が 取り込ま れ ます
function object sybase fetch field	フィールド 情報 を 含む オブジェクト を 返し ます
function object sybase fetch field resource $result int $field_offset	結果 から フィールド 情報 を 取得 する
function sybase fetch object $object	返さ れれる オブジェクト の 型 を 指定 する に は 、 2 番目 の パラメータ object を 使用 し ます
function object sybase fetch object	取り込ま れ た 行 に対する プロパティ を 有する オブジェクト を 返し ます
function object sybase fetch object resource $result mixed $object	行 を オブジェクト として 取り込む
function array sybase fetch row	取り込ま れ た 行 に 対応 する 配列 を 返し ます
function array sybase fetch row resource $result	行 を 配列 として 取得 する
function bool sybase field seek	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool sybase field seek resource $result int $field_offset	フィールドオフセット を 設定 する
function string sybase get last message	メッセージ を 文字列 で 返し ます
function string sybase get last message	サーバー から 直近 の メッセージ を 返す
function void sybase min client severity int $severity	クライアント の severity の 最小値 を 設定 する
function void sybase min error severity int $severity	エラー の severity の 最小値 を 設定 する
function void sybase min server severity int $severity	サーバー の severity の 最小値 を 設定 する
function int sybase num fields	フィールド の 数 を 返し ます
function int sybase num fields resource $result	結果 に おける フィールド の 数 を 取得 する
function sybase query $link_identifier	リンク id が 指定 さ れ ない 場合 、 最後 に オープン さ れ た リンク が 指定 さ れ た と 仮定 さ れ ます
function mixed sybase query	成功 時 に 正 の sybase 結果 id を 、 エラー 時 に false を 返し ます
function mixed sybase query string $query resource $link_identifier	sybase クエリ を 送信 する
function sybase result $field	引数 field は 、 フィールド の オフセット 、 フィールド 名 、 また は テーブル 名
function string sybase result	sybase _result は 、 sybase 結果 セット から セル の 内容 を 返し ます
function string sybase result resource $result int $row mixed $field	結果 データ を 取得 する
function sybase set message handler $handler	ハンドラ は 、 以下 の 5 つの 引数 を この 順 に 受け取り ます
function sybase set message handler $link_identifier	リンクid を 省略 し た 場合 は 、 最後 に 開い た リンク を 使い ます
function bool sybase set message handler	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool sybase set message handler callable $handler resource $link_identifier	サーバー で メッセージ が 発生 し た 際 に コール さ れる ハンドラ を 指定 する
function sybase unbuffered query $store_result	結果 セット を メモリ 中 に 読み込む 必要 が ない こと を 指示 する ため 、 オプション の store _result に false を 指定 する こと が 可能 です
function resource sybase unbuffered query	成功 時 に 正 の sybase 結果 id 、 エラー 時 に false を 返し ます
function resource sybase unbuffered query string $query resource $link_identifier bool $store_result	sybase クエリ を 送信 し 、 ブロック し ない
function syslog $message	残り の 引数 は 送信 する メッセージ です
function syslog $priority	priority は 、 容易 さ facility と レベル level の 組み合わせ です
function bool syslog	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool syslog int $priority string $message	システムログ の メッセージ を 生成 する
function system $return_var	引数 return _var が 存在 する 場合 、 実行 し た コマンド の 返す ステータス が この 変数 に 書か れ ます
function system $command	実行 する コマンド
function string system	成功 時 は コマンド 出力 の 最後 の 行 を 返し 、 失敗 時 は false を 返し ます
function string system string $command int $return_var	外部 プログラム を 実行 し 、 出力 を 表示 する
function bool taint	変換 に 成功 し た とき に ture を 返し ます
function bool taint string $string	文字列 を 汚染 さ せる
function tanh $arg	処理 する 引数
function float tanh	arg の ハイパボリックタンジェント を 返し ます
function float tanh float $arg	双曲 線正 接 （ ハイパボリックタンジェント ）
function tempnam $dir	テンポラリファイル を 作成 し たい ディレクトリ
function tempnam $prefix	作成 さ れる テンポラリファイル の プレフィックス
function string tempnam	新しい テンポラリファイル 名 パス を 含む を 返し 、 失敗 し た 場合 に は false を 返し ます
function string tempnam string $dir string $prefix	一意 な ファイル 名 を 生成 する
function textdomain $text_domain	新しい メッセージドメイン
function string textdomain	成功 する と 、 この 関数 は ドメイン を 変更 し た 後 に 現在 の メッセージドメイン を 返し ます
function string textdomain string $text_domain	デフォルトドメイン を 設定 する
function tidy access count $object	tidy オブジェクト
function int tidy access count	警告 の 数 を 返し ます
function int tidy access count tidy $object	指定 し た ドキュメント について 発生 し た tidy アクセシビリティ 警告 の 数 を 返す
function tidy config count $object	tidy オブジェクト
function int tidy config count	エラー の 数 を 返し ます
function int tidy config count tidy $object	指定 し た ドキュメント について 発生 し た tidy 設定 エラー の 数 を 返す
function tidy error count $object	tidy オブジェクト
function int tidy error count	エラー の 数 を 返し ます
function int tidy error count tidy $object	指定 し た ドキュメント について 発生 し た tidy エラー の 数 を 返す
function tidy get output $object	tidy オブジェクト
function string tidy get output	修正 さ れ た html を 文字列 で 返し ます
function string tidy get output tidy $object	パース さ れ た tidy マークアップ を 表す 文字 列 を 返す
function void tidy load config string $filename string $encoding	指定 し た エンコーディング で ascii コード の tidy 設定 ファイル を ロード する
function tidy set encoding $encoding	encoding は 入出 力 ドキュメント の エンコーディング を 設定 し ます
function bool tidy set encoding	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool tidy set encoding string $encoding	マークアップ を パース する 際 の 入力 ／ 出力 エンコーディング を 設定 する
function tidy setopt $value	tidy オプション の 値
function tidy setopt $option	tidy オプション の 名前
function bool tidy setopt	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool tidy setopt string $option mixed $value	指定 し た tidy ドキュメント について の 設定 を 更新 する
function time nanosleep $nanoseconds	十 億 より も 小さい 非負 の 整数 で ある 必要 が あり ます
function time nanosleep $seconds	非負 の 整数 で ある 必要 が あり ます
function mixed time nanosleep	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function mixed time nanosleep int $seconds int $nanoseconds	秒および ナノ 秒単 位 で 実行 を 遅延 する
function string timezone version get	文字列 を 返し ます
function string timezone version get	timezonedb の バージョン を 取得 する
function resource tmpfile	ファイル の ハンドル を 返し ます
function resource tmpfile	テンポラリファイル を 作成 する
function token get all $source	パース する php ソース
function token get all $flags	以下 の フラグ が 使え ます
function array token get all	トークン id の 配列 を 返し ます
function array token get all string $source int $flags	指定 し た ソース を php トークン に 分割 する
function token name $token	トークン の 値
function string token name	token に対応 する シンボル 名 を 返し ます
function string token name int $token	指定 し た php トークン の シンボル 名 を 取得 する
function trim $str	ホワイトスペース を 取り除く string
function trim $character_mask	character _mask パラメータ により 、 削除 する 文字 を 指定 する こと も 可能 です
function string trim	ホワイトスペース を 取り除い た 文字列
function string trim string $str string $character_mask	文字列 の 先頭 および 末尾 に ある ホワイトスペース を 取り除く
function uasort $array	入力 の 配列
function uasort $value_compare_func	ユーザー 定義 の 比較 関数 の 例 について は 、 usort および uksort を 参照く ださい
function bool uasort	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool uasort array $array callable $value_compare_func	ユーザー 定義 の 比較 関数 で 配列 を ソート し 、 連想 インデックス を 保持 する
function ucwords $delimiters	オプション の delimiters で 、 単語 の 区切り 文字 を 指定 し ます
function ucwords $str	入力 文字列
function string ucwords	変更後 の 文字列 を 返し ます
function string ucwords string $str string $delimiters	文字列 の 各単 語 の 最初 の 文字 を 大文字 に する
function udm add search limit $agent	udm _alloc _agent から 返さ れ た 、 エージェント へ の リンク
function udm add search limit $val	現在 の パラメータ の 値 を 定義 し ます
function udm add search limit $var	パラメータ を 定義 し 、 制限 を 示し ます
function bool udm add search limit	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool udm add search limit resource $agent int $var string $val	種々 の 検索 の 制約 を 設定 する
function udm alloc agent array $databases	databases の 各要 素 に は データベース の url を 指定 し ます
function resource udm alloc agent array	成功 し た 場合 に リソースリンク id 、 失敗 し た 場合 に false を 返し ます
function resource udm alloc agent array array $databases	mnogosearch セッション を 割り 当てる
function udm alloc agent $dbmode	dbmode - 単語 の 記憶 用 sql データベース モード を 選択 可能 です
function udm alloc agent $dbaddr	dbaddr - url 形式 の データベース 名
function resource udm alloc agent	成功 し た 場合 に mnogosearch エージェント id 、 失敗 し た 場合 に false を 返し ます
function resource udm alloc agent string $dbaddr string $dbmode	mnogosearch セッション を 確保 する
function int udm api version	udm _api _version は 、 mnogosearch api バージョン 番号 を 返し ます
function int udm api version	mnogosearch api バージョン を 取得 する
function udm cat list $agent	事前 の > udm _alloc _agent の コール により 返さ れ た エージェント id
function array udm cat list	カテゴリツリー に おける 現在 の category と 同 レベル の カテゴリ の 一覧 を 配列 で 返し ます
function array udm cat list resource $agent string $category	現在 の カテゴリ と 同じ レベル の カテゴリ を 全 て 取得 する
function udm clear search limits $agent	事前 の > udm _alloc _agent の コール により 返さ れ た エージェント へ の リンク
function bool udm clear search limits	returns true
function bool udm clear search limits resource $agent	mnogosearch 検索 に関する 全て の 制約 を クリア する
function udm errno $agent	udm _alloc _agent への コール から 返さ れる エージェント id へ の リンク
function int udm errno	mnogosearch エラー 番号 を 返し ます
function int udm errno resource $agent	mnogosearch エラー 番号 を 取得 する
function udm free agent $agent	udm _alloc _agent から 返さ れ た エージェント id へ の リンク
function int udm free agent	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function int udm free agent resource $agent	mnogosearch セッション を 開放 する
function udm free ispell data $agent	udm _alloc _agent により 得 られる エージェントリンク id
function bool udm free ispell data	udm _free _ispell _data は 、 常 に true を 返し ます
function bool udm free ispell data int $agent	ispell データ 用 に 確保 さ れ た メモリ を 解放 する
function udm free res $res	udm _find から 返さ れ た 結果 id へ の リンク
function bool udm free res	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool udm free res resource $res	mnogosearch 結果 を 開放 する
function udm get doc count $agent	udm _alloc _agent の コール により 取得 し た 、 エージェント id へ の リンク
function int udm get doc count	ドキュメント の 数 を 返し ます
function int udm get doc count resource $agent	データベース 内 の ドキュメント の 総数 を 得る
function udm hash32 $str	入力 文字列
function udm hash32 $agent	事前 の > udm _alloc _agent の コール により 返さ れ た エージェント へ の リンク
function int udm hash32	3 2 ビット の ハッシュ 値 を 返し ます
function int udm hash32 resource $agent string $str	指定 し た 文字列 の hash 3 2 チェックサム を 返す
function udm set agent param $var	以下 の パラメータ および それら の 値 が 利用 可能 です
function udm set agent param $agent	udm _alloc _agent の コール により 取得 し た 、 エージェント の リンク id
function bool udm set agent param	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool udm set agent param resource $agent int $var string $val	mnogosearch エージェント の セッションパラメータ を 設定 する
function uniqid $prefix	これ が 有用 な の は 、 たとえ ば 複数 ホスト で 同時 に id を 生成 する よう な 場合 です
function uniqid $more_entropy	true に する と 、 uniqid は 返り値 の 最後 に さらに 別 の エントロピー を 線形合 同法 を 使用 し て 追加 し ます
function string uniqid	一意 な 識別子 を 文字列 で 返し ます
function string uniqid string $prefix bool $more_entropy	一意 な id を 生成 する
function unixtojd $timestamp	変換 し たい unix タイムスタンプ
function int unixtojd	ユリウス 積算 日 を 表す 整数 値 を 返し ます
function int unixtojd int $timestamp	unix タイムスタンプ を ユリウス 歴 に 変換 する
function unlink $filename	ファイル へ の パス
function unlink $context	注意 : コンテキスト の サポート は 、 php 5
function bool unlink	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool unlink string $filename resource $context	ファイル を 削除 する
function unpack $format	書式 コード の 説明 は pack を 参照く ださい
function unpack $data	パック さ れ た データ
function array unpack	バイナリ 文字 列 を 切り出し た 要素 を 含む 連想 配列 を 返し ます
function array unpack string $format string $data	バイナリ 文字 列 から データ を 切り出す
function uopz compose $properties	プロパティー の 連想 配列
function uopz compose $methods	メソッド の 連想 配列
function uopz compose $classes	クラス 、 インターフェース および トレイト の 名前 の 配列
function uopz compose $name	合法 な クラス 名
function uopz compose $flags	エントリ ・ タイプ
function void uopz compose string $name array $classes array $methods array $properties int $flags	クラス を 構成
function uopz extend $parent	継承 する クラス の 名前
function uopz extend $class	拡張 する クラス の 名前
function void uopz extend string $class string $parent	実行 時 に クラス を 拡張
function uopz flags $function	関数 名
function uopz flags $class	クラス 名
function uopz flags $flags	zend _acc _ フラグ の 有効 な セット 、 フラグ を 読み取る zend _acc _fetch
function int uopz flags	設定 の 場合 、 古い フラグ を 返し ます
function int uopz flags string $class string $function int $flags	関数 また は クラス の フラグ を 取得 また は 設定
function uopz function $modifiers	関数 の 修飾子
function uopz function $handler	関数 の クロージャ
function uopz function $function	関数 名
function uopz function $class	新規 関数 を 受け 取る クラス の 名前
function void uopz function string $class string $function Closure $handler int $modifiers	実行 時 に 関数 を 作成
function void uopz implement string $class string $interface	実行 時 に インターフェイス を 実装
function uopz overload $opcode	有効 な オペコード
function void uopz overload int $opcode Callable $callable	vm の オペコード を オーバーロード
function uopz redefine $class	定数 を 含む クラス の 名前
function uopz redefine $value	定数 の 新しい 値
function uopz redefine $constant	定数 名
function void uopz redefine string $class string $constant mixed $value	定数 を 再定 義
function uopz rename $class	関数 を 含む クラス の 名前
function uopz rename $function	既存 の 関数 名
function uopz rename $rename	関数 の 新しい 名前
function void uopz rename string $class string $function string $rename	実行 時 に 関数 名 を 変更
function uopz restore $function	関数 名
function uopz restore $class	リストア する 関数 を 含む クラス の 名前
function void uopz restore string $class string $function	前 に バックアップ し た 関数 を リストア
function uopz undefine $constant	既存 の 定数 名
function uopz undefine $class	constant を 含む クラス の 名前
function void uopz undefine string $class string $constant	定数 を 未定 義化
function urlencode $str	エンコード する 文字列
function string urlencode	- _
function string urlencode string $str	文字列 を url エンコード する
function use soap error handler $handler	true に 設定 する と 、 エラー の 詳細 を クライアント に 送信 し ます
function bool use soap error handler	元 の 値 を 返し ます
function bool use soap error handler bool $handler	soap エラーハンドラ を 使用 する かど う か を 設定 する
function usort $array	入力 の 配列
function usort $value_compare_func	比較 関数 は 、 最初 の 引数 と 二番目 の 引数 の 比較 結果 を 返し ます
function bool usort	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool usort array $array callable $value_compare_func	ユーザー 定義 の 比較 関数 を 使用 し て 、 配列 を 値 で ソート する
function variant abs $val	variant
function mixed variant abs	val の 絶対 値 を 返し ます
function mixed variant abs mixed $val	variant の 絶対 値 を 返す
function variant add $right	右 オペランド
function variant add $left	左 オペランド
function mixed variant add	結果 を 返し ます
function mixed variant add mixed $left mixed $right	2 つの variant 値 を 「 加算 」 し 、 結果 を 返す
function variant and $right	右 オペランド
function variant and $left	左 オペランド
function mixed variant and	variant の and 規則 left right 結果 true true true true false false true null null false true false false false false false null false null true null null false false null null null
function mixed variant and mixed $left mixed $right	2 つの variant の 論理 積 を 計算 し 、 結果 を 返す
function variant cast $type	type は 、 定数 vt _xxx の 中 の ひとつ で なけれ ば なり ませ ん
function variant cast $variant	variant
function variant variant cast	vt _date variant を 返し ます
function variant variant cast variant $variant int $type	variant を 、 別 の 型 の 新しい variant に 変換 する
function variant cmp $lcid	文字列 の 比較 に 使用 する 有効 な ロケール 識別子 です これ は 文字列 の 比較 に 影響 し ます
function variant cmp $right	右 オペランド
function variant cmp $flags	flags は 、 以下 の ひとつ あるい は 複数 の 値 を or で 組み合わ せ た もの で 、 文字列 の 比較 に 影響 し ます
function variant cmp $left	左 オペランド
function int variant cmp	以下 のい ずれ か を 返し ます
function int variant cmp mixed $left mixed $right int $lcid int $flags	2 つの variant を 比較 する
function variant date from timestamp $timestamp	unix タイムスタンプ
function variant variant date from timestamp	vt _date 型 の variant を 返し ます
function variant variant date from timestamp int $timestamp	unix タイムスタンプ を 、 日付 形式 の variant で 返す
function variant date to timestamp $variant	variant
function int variant date to timestamp	unix タイムスタンプ を 返し ます
function int variant date to timestamp variant $variant	日付 / 時刻 の variant 値 を unix タイムスタンプ に 変換 する
function variant div $right	右 オペランド
function variant div $left	左 オペランド
function mixed variant div mixed $left mixed $right	2 つの variant の 除算 結果 を 返す
function variant eqv $right	右 オペランド
function variant eqv $left	左 オペランド
function mixed variant eqv	left の 各 ビット が right の 対応 する ビット に 等しい 場合 に true を 、 それ 以外 の 場合 に false を 返し ます
function mixed variant eqv mixed $left mixed $right	2 つの variant の ビット 値 が 等しい か どう か を 調べる
function variant fix $variant	variant
function mixed variant fix	variant が 負 の 数 の 場合 、 variant の 値以上 の 最初 の 整数 値 を 返し ます
function mixed variant fix mixed $variant	variant の 整数 部 を 返す
function variant get type $variant	variant オブジェクト
function int variant get type	この 関数 は 、 variant の 型 を 表す 整数 値 を 返し ます
function int variant get type variant $variant	variant オブジェクト の 型 を 返す
function variant idiv $right	右 オペランド
function variant idiv $left	左 オペランド
function mixed variant idiv mixed $left mixed $right	variants を 整数 に 変換 し 、 除算 の 結果 を 返す
function variant imp $right	右 オペランド
function variant imp $left	左 オペランド
function mixed variant imp	variant implication テーブル left right 結果 true true true true false true true null true false true true false false true false null true null true true null false null null null null
function mixed variant imp mixed $left mixed $right	2 つの variant の ビット implication を 行う
function variant int $variant	variant
function mixed variant int	variant が 負 の 数 の 場合 、 variant の 値以上 の 最初 の 整数 値 を 返し ます
function mixed variant int mixed $variant	variant の 整数 部 を 返す
function variant neg $variant	variant
function mixed variant neg	論理 否定 演算 の 結果 を 返し ます
function mixed variant neg mixed $variant	variant の 論理 否定 演算 を 行う
function variant set type $variant	variant
function void variant set type variant $variant int $type	variant を 「その 場 で 」 別 の 型 に 変換 する
function variant sub $right	右 オペランド
function variant sub $left	左 オペランド
function mixed variant sub mixed $left mixed $right	左 の variant から 右 の variant を 引き 、 その 結果 を 返す
function variant xor $right	右 オペランド
function variant xor $left	左 オペランド
function mixed variant xor	variant の xor 規則 left right 結果 true true false true false true false true true false false false null null null
function mixed variant xor mixed $left mixed $right	2 つの variant の 排他 的 論理 和 を 計算 する
function virtual $filename	virtual コマンド が 実行 さ れる ファイル
function bool virtual	成功 時 は virtual コマンド の 実行 、 失敗 時 は false を 返し ます
function bool virtual string $filename	apache サブリクエスト を 実行 する
function vprintf $format	format について の 説明 は sprintf を 参照く ださい
function int vprintf	出力 さ れ た 文字 列 の 長さ を 返し ます
function int vprintf string $format array $args	フォーマット さ れ た 文字列 を 出力 する
function wddx deserialize $packet	wddx パケット
function mixed wddx deserialize	デシリアライズ し た 値 を 返し ます
function mixed wddx deserialize string $packet	wddx パケット を デシリアライズ する
function wddx packet end $packet_id	wddx _packet _start が 返す wddx パケット
function string wddx packet end	wddx パケット を 含む 文字 列 を 返し ます
function string wddx packet end resource $packet_id	指定 し た id の wddx パケット を 終了 する
function wddx serialize vars $var_name	変数 名 を 表す 文字 列 、 あるい は 配列
function string wddx serialize vars	wddx パケット 、 あるい は エラー 時 に false を 返し ます
function string wddx serialize vars mixed $var_name	変数 を wddx パケット に シリアライズ する
function win32 continue service $machine	マシン 名
function win32 continue service $servicename	サービス の 短い 名前
function int win32 continue service	成功 し た 場合 に win 3 2 _ no _error を 返し ます
function int win32 continue service string $servicename string $machine	中断 し た サービス を 再開 する
function int win32 get last control message	制御 コード 定数 を 返し ます
function int win32 get last control message	サービス に 送信 さ れ た 直近 の 制御 メッセージ を 返す
function win32 pause service $machine	マシン 名
function win32 pause service $servicename	サービス の 短い 名前
function int win32 pause service	成功 し た 場合 に win 3 2 _ no _error を 返し ます
function int win32 pause service string $servicename string $machine	サービス を 中断 する
function array win32 ps stat mem	失敗 し た 場合 は 、 false を 返し ます
function array win32 ps stat mem	メモリ 使用 量 の 統計 情報 を 取得 する
function win32 ps stat proc $pid	統計 情報 を 取得 する プロセス の id
function array win32 ps stat proc	失敗 し た 場合 は 、 false を 返し ます
function array win32 ps stat proc int $pid	プロセス の 統計 情報 を 取得 する
function win32 query service status $machine	オプション の マシン 名
function win32 query service status $servicename	サービス の 短い 名前
function mixed win32 query service status	成功 し た 場合 に 以下 の 情報 を 含む 配列 を 返し ます
function mixed win32 query service status string $servicename string $machine	サービス の 状態 を 問い合わせる
function win32 set service status $checkpoint	the checkpoint value the service increments periodically to report its progress during a lengthy start stop pause or continue operation
function win32 set service status $status	以下 の ステータスコード の うち の ひとつ
function bool win32 set service status	成功 し た 場合 に true を 返し ます
function bool win32 set service status int $status int $checkpoint	サービス の 状態 を 更新 する
function win32 stop service $machine	オプション の マシン 名
function win32 stop service $servicename	サービス の 短い 名前
function int win32 stop service	成功 し た 場合 に win 3 2 _ no _error を 返し ます
function int win32 stop service string $servicename string $machine	サービス を 停止 する
function wincache ocache fileinfo $summaryonly	返さ れる 配列 に 、 opcode キャッシュ の 概要 に 加え て 個々 の キャッシュエントリ の 情報 を 含める かどう か
function array wincache ocache fileinfo	opcode キャッシュ について の メタデータ の 配列 を 返し ます
function array wincache ocache fileinfo bool $summaryonly	opcode キャッシュ に キャッシュ さ れ た ファイル について の 情報 を 取得 する
function array wincache ocache meminfo	opcode キャッシュ の メモリ 使用 状況 について の メタデータ の 配列 を 返し ます
function array wincache ocache meminfo	opcode キャッシュ の メモリ 使用 状況 について の 情報 を 取得 する
function wincache refresh if changed $files	リフレッシュ し たい ファイル 名 の 配列
function bool wincache refresh if changed	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool wincache refresh if changed array $files	キャッシュ さ れ た ファイル の キャッシュエントリ を リフレッシュ する
function array wincache rplist fileinfo	ファイルパス 解決 キャッシュ について の メタデータ の 配列 を 返し ます
function array wincache rplist fileinfo bool $summaryonly	ファイルパス 解決 キャッシュ について の 情報 を 取得 する
function wincache scache info $summaryonly	返さ れる 配列 に 、 セッションキャッシュ の 概要 に 加え て 個々 の キャッシュエントリ の 情報 を 含める かどう か
function array wincache scache info	セッションキャッシュ について の メタデータ の 配列 を 返し ます
function array wincache scache info bool $summaryonly	セッションキャッシュ に キャッシュ さ れ た ファイル について の 情報 を 取得 する
function array wincache scache meminfo	セッションキャッシュ の メモリ 使用 状況 について の メタデータ の 配列 を 返し ます
function array wincache scache meminfo	セッションキャッシュ の メモリ 使用 状況 について の 情報 を 取得 する
function wincache ucache add $key	変数 を 格納 する とき に 、 この 名前 の キー を 使い ます
function wincache ucache add $ttl	変数 の キャッシュ 内 で の 生存 時間 を 秒単 位 で 指定 し ます
function wincache ucache add $value	格納 し たい 変数 の 値
function wincache ucache add $values	キー と 値 の 連想 配列
function bool wincache ucache add	key が 配列 の とき の 返り値 は 、 次 の よう に なり ます
function bool wincache ucache add string $key mixed $value int $ttl	変数 が 既 に キャッシュ に 存在 し ない 場合 に のみ 変数 を ユーザーキャッシュ に 追加 する
function wincache ucache dec $dec_by	key に 関連 づけ られ た 変数 の 減少幅
function wincache ucache dec $key	変数 を キャッシュ に 格納 する とき に 使っ た キー の 名前
function wincache ucache dec $success	成功 し た 場合 に true 、 失敗 し た 場合 に false が 設定 さ れ ます
function mixed wincache ucache dec string $key int $dec_by bool $success	キー に 関連 づけ られ た 値 を 減少 さ せる
function wincache ucache delete $key	変数 を キャッシュ に 格納 する とき に 使っ た キー の 名前
function bool wincache ucache delete	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool wincache ucache delete mixed $key	変数 を ユーザーキャッシュ から 削除 する
function wincache ucache exists $key	変数 を キャッシュ に 格納 する とき に 使っ た キー の 名前
function bool wincache ucache exists	指定 し た キー の 変数 が 存在 する 場合 に true 、 それ 以外 の 場合 に false を 返し ます
function bool wincache ucache exists string $key	変数 が ユーザーキャッシュ に 存在 する かど う か を 調べる
function wincache ucache inc $key	変数 を キャッシュ に 格納 する とき に 使っ た キー の 名前
function wincache ucache inc $success	成功 し た 場合 に true 、 失敗 し た 場合 に false が 設定 さ れ ます
function wincache ucache inc $inc_by	key に 関連 づけ られ た 変数 の 増加 幅
function mixed wincache ucache inc string $key int $inc_by bool $success	キー に 関連 づけ られ た 値 を 増加 さ せる
function wincache ucache info $key	ユーザーキャッシュ 内 の エントリ の キー
function wincache ucache info $summaryonly	返さ れる 配列 に 、 ユーザーキャッシュ の 概要 に 加え て 個々 の キャッシュエントリ の 情報 を 含める かどう か
function array wincache ucache info	ユーザーキャッシュ について の メタデータ の 配列 を 返し ます
function array wincache ucache info bool $summaryonly string $key	ユーザーキャッシュ に キャッシュ さ れ た ファイル について の 情報 を 取得 する
function array wincache ucache meminfo	ユーザーキャッシュ の メモリ 使用 状況 について の メタデータ の 配列 を 返し ます
function array wincache ucache meminfo	ユーザーキャッシュ の メモリ 使用 状況 について の 情報 を 取得 する
function wordwrap $cut	cut を true に 設定 する と 、 文字列 は 常 に 指定 し た width で ラップ さ れ ます
function wordwrap $str	入力 文字列
function wordwrap $break	オプション の パラメータ break を 用い て 行 を 分割 し ます
function wordwrap $width	文字列 を 分割 する とき の 文字数
function string wordwrap	受け取っ た 文字列 を 指定 し た 長さ で 分割 し た もの を 返し ます
function string wordwrap string $str int $width string $break bool $cut	指定 し た 文字 数 で 文字列 を 分割 する
function xattr get $name	属性 の 名前
function xattr get $filename	属性 を 取得 する ファイル
function xattr get $flags	サポート さ れる xattr の フラグ xattr _dontfollow シンボリックリンク の リンク 先 を たどら ず 、 リンク その もの を 操作 し ます
function string xattr get	値 を 含む 文字 列 、 あるい は 属性 が 存在 し ない 場合 に は false を 返し ます
function string xattr get string $filename string $name int $flags	拡張 属性 を 取得 する
function xattr list $flags	サポート さ れる xattr の フラグ xattr _dontfollow シンボリックリンク の リンク 先 を たどら ず 、 リンク その もの を 操作 し ます
function xattr list $filename	ファイル の パス
function array xattr list	この 関数 は 、 拡張 属性 の 名前 を 配列 で 返し ます
function array xattr list string $filename int $flags	拡張 属性 の 一覧 を 取得 する
function xattr remove $filename	属性 を 削除 する ファイル
function xattr remove $name	削除 する 属性 の 名前
function xattr remove $flags	サポート さ れる xattr の フラグ xattr _dontfollow シンボリックリンク の リンク 先 を たどら ず 、 リンク その もの を 操作 し ます
function bool xattr remove	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool xattr remove string $filename string $name int $flags	拡張 属性 を 削除 する
function xattr set $name	拡張 属性 の 名前
function xattr set $flags	サポート さ れる xattr の フラグ xattr _create 拡張 属性 が 既 に 存在 する 場合 、 関数 は 失敗 し ます
function xattr set $value	属性 の 値
function xattr set $filename	属性 を 設定 する ファイル
function bool xattr set	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool xattr set string $filename string $name string $value int $flags	拡張 属性 を 設定 する
function xattr supported $filename	調べる ファイル の パス
function xattr supported $flags	サポート さ れる xattr の フラグ xattr _dontfollow シンボリックリンク の リンク 先 を たどら ず 、 リンク その もの を 操作 し ます
function bool xattr supported string $filename int $flags	ファイルシステム が 拡張 属性 を サポート し て いる かど う か を 調べる
function xdiff file bdiff size $file	xdiff _string _bdiff 関数 あるい は xdiff _string _rabdiff 関数 で 作成 し た バイナリパッチファイル へ の パス
function int xdiff file bdiff size	作成 さ れる ファイル の サイズ を 返し ます
function int xdiff file bdiff size string $file	バイナリ diff を 適用 し て 作成 する ファイル の サイズ を 読み込む
function xdiff file bdiff $new_file	2 番目 の ファイル へ の パス
function xdiff file bdiff $dest	結果 の パッチファイル へ の パス
function xdiff file bdiff $old_file	最初 の ファイル へ の パス
function bool xdiff file bdiff	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool xdiff file bdiff string $old_file string $new_file string $dest	2 つの ファイル の バイナリ diff を 作成 する
function xdiff file diff binary $new_file	2 番目 の ファイル へ の パス
function xdiff file diff binary $dest	結果 の パッチファイル へ の パス
function xdiff file diff binary $old_file	最初 の ファイル へ の パス
function bool xdiff file diff binary	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool xdiff file diff binary string $old_file string $new_file string $dest	xiff _file _bdiff の エイリアス
function xdiff file diff $context	diff の 結果 の 前後 に 含める 行 の 数 を 指定 し ます
function xdiff file diff $minimal	この パラメータ を true に する と 、 結果 の ファイル が 最小 に なり ます 長い 時間 が かかり ます
function xdiff file diff $new_file	2 番目 の ファイル へ の パス
function xdiff file diff $dest	結果 の パッチファイル へ の パス
function xdiff file diff $old_file	最初 の ファイル へ の パス
function bool xdiff file diff	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool xdiff file diff string $old_file string $new_file string $dest int $context bool $minimal	2 つの ファイル の unified diff を 作成 する
function xdiff file merge3 $new_file1	2 番目 の ファイル へ の パス
function xdiff file merge3 $dest	結果 の ファイル へ の パス
function xdiff file merge3 $new_file2	3 番目 の ファイル へ の パス
function xdiff file merge3 $old_file	最初 の ファイル へ の パス
function mixed xdiff file merge3	成功 し た 場合 に true 、 もし 拒否 さ れ た 部分 が ある 場合 に は その 文字 列 、 内部 エラー が 発生 し た 場合 に false を 返し ます
function mixed xdiff file merge3 string $old_file string $new_file1 string $new_file2 string $dest	3 つの ファイル を ひとつ に 統合 する
function xdiff file patch binary $file	元 の ファイル
function xdiff file patch binary $patch	バイナリ の パッチファイル
function xdiff file patch binary $dest	結果 の ファイル へ の パス
function bool xdiff file patch binary	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool xdiff file patch binary string $file string $patch string $dest	xdiff _file _bpatch の エイリアス
function xdiff file patch $patch	unified 形式 の パッチファイル
function xdiff file patch $flags	xdiff _patch _normal （ デフォルト
function xdiff file patch $file	元 の ファイル
function xdiff file patch $dest	結果 の ファイル へ の パス
function mixed xdiff file patch	内部 エラー が 発生 し た 場合 に false を 返し ます
function mixed xdiff file patch string $file string $patch string $dest int $flags	ファイル に unified diff 形式 の パッチ を 適用 する
function xdiff file rabdiff $new_file	2 番目 の ファイル へ の パス
function xdiff file rabdiff $dest	結果 の パッチファイル へ の パス
function xdiff file rabdiff $old_file	最初 の ファイル へ の パス
function bool xdiff file rabdiff	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool xdiff file rabdiff string $old_file string $new_file string $dest	2 つの ファイル の バイナリ diff を 、rabin の polynomial fingerprinting アルゴリズム で 作成 する
function xdiff string diff $context	diff の 結果 の 前後 に 含める 行 の 数 を 指定 し ます
function xdiff string diff $old_data	データ を 含む 最初 の 文字列
function xdiff string diff $new_data	データ を 含む 2 番目 の 文字列
function xdiff string diff $minimal	この パラメータ を true に する と 、 結果 の ファイル が 最小 に なり ます 非常 に 時間 が かかり ます
function string xdiff string diff	成功 し た 場合 は その 結果 の diff 、 内部 エラー が 発生 し た 場合 に false を 返し ます
function string xdiff string diff string $old_data string $new_data int $context bool $minimal	2 つの 文字列 の unified diff を 作成 する
function xdiff string patch $patch	unified 形式 の パッチ 文字列
function xdiff string patch $flags	flags は xdiff _patch _normal デフォルト
function xdiff string patch $str	元 の 文字列
function xdiff string patch $error	これ を 指定 する と 、 パッチ を 拒否 さ れ た 部分 が ここ に 保存 さ れ ます
function string xdiff string patch	パッチ 適用 後 の 文字列 、 あるい は エラー 時 に false を 返し ます
function string xdiff string patch string $str string $patch int $flags string $error	文字列 に unified diff 形式 の パッチ を 適用 する
function array xhprof disable	実行 結果 の xhprof データ を 配列 で 返し ます
function array xhprof disable	xhprof プロファイラ を 終了 する
function array xhprof sample disable	xhprof の サンプルデータ の 配列 を 返し ます
function array xhprof sample disable	xhprof サンプルプロファイラ を 終了 する
function xml get current column number $parser	カラム 番号 を 得る xml パーサ へ の リファレンス
function int xml get current column number	この 関数 は 、 parser が 有効 な パーサ で ない 場合 に false を 返し ます
function int xml get current column number resource $parser	xml パーサ の カレント の カラム 番号 を 取得 する
function xml get current line number $parser	行番号 を 得る xml パーサ へ の リファレンス
function int xml get current line number	この 関数 は 、 parser が 有効 な パーサ で ない 場合 に false 、 それ 以外 の 場合 に データバッファ の 中 で 現在 パーサ が 処理 中 の 行番 号 を 返し ます
function int xml get current line number resource $parser	xml パーサ の カレント の 行番 号 を 得る
function xml get error code $parser	エラーコード を 得る xml パーサ へ の リファレンス
function int xml get error code	この 関数 は 、 parser が 有効 な パーサ を 参照 し て い ない 場合 に false を 返し ます
function int xml get error code resource $parser	xml パーサ の エラーコード を 得る
function xml parse into struct $values	xml データ の 値 を 含む 配列
function xml parse into struct $parser	xml パーサ へ の 参照
function xml parse into struct $index	$values 内 の 適切 な 値 の 場所 を さす ポインタ の 配列
function xml parse into struct $data	xml データ を 含む 文字列
function int xml parse into struct	xml _parse _into _struct は 失敗 し た 場合 に 0 、 成功 し た 場合 に 1 を 返し ます
function int xml parse into struct resource $parser string $data array $values array $index	配列 構造体 に xml データ を 処理 する
function xml parse $parser	使用 する xml パーサ へ の リファレンス
function xml parse $data	処理 する データ
function xml parse $is_final	true が 設定 さ れ た 場合 、 data は この 処理 の 間 に 送られ た 最後 の データ という こと に なり ます
function int xml parse	成功 し た 場合 に 1 、 失敗 し た 場合 に 0 を 返し ます
function int xml parse resource $parser string $data bool $is_final	xml ドキュメント の 処理 を 開始 する
function xml parser create $encoding	php 4 で は 、 オプション の encoding で 入出 力 の エンコーディング を 指定 し ます
function resource xml parser create	新しい xml パーサ の リソースハンドル を 返し ます
function resource xml parser create string $encoding	xml パーサ を 作成 する
function xml parser get option $option	取得 する オプション
function xml parser get option $parser	オプション を 取得 する xml パーサ へ の リファレンス
function mixed xml parser get option	この 関数 は 、 parser が 有効 な パーサ を 参照 し ない か 、 option が 不正 な 形式 の 場合 に false を 返し ます 同時に e _warning を 生成 し ます
function mixed xml parser get option resource $parser int $option	xml パーサ から オプション を 得る
function xml parser set option $parser	オプション を 設定 する xml パーサ へ の リファレンス
function xml parser set option $value	その オプション の 新しい 設定 値
function xml parser set option $option	設定 する オプション
function bool xml parser set option	この 関数 は 、 parser が 有効 な パーサ を 参照 し ない か 、 オプション が 設定 出来 なかっ た 場合 に false を 返し ます
function bool xml parser set option resource $parser int $option mixed $value	xml パーサ の オプション を 設定 する
function xml set default handler $parser	最初 の パラメータ で ある parser は 、 ハンドラ を コール し た xml パーサ へ の リファレンス です
function xml set default handler $handler	handler は 、 parser に関し て xml _parse が コール さ れ た 際 に 必要 な 関数 の 名前 を 有する 文字 列 です
function xml set default handler $data	2 番目 の パラメータ で ある data は 、 文字 データ を 有し て い ます
function xml set default handler $parser	デフォルト の ハンドラ 関数 を 設定 する xml パーサ へ の 参照
function bool xml set default handler	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool xml set default handler resource $parser callable $handler	デフォルト の ハンドラ を 設定 する
function xml set element handler $parser	最初 の パラメータ で ある parser は 、 ハンドラ を コール する xml パーサ へ の リファレンス です
function xml set element handler $name	2 番目 の パラメータ で ある name は 、 この ハンドラ が コール さ れ た 要素 の 名前 を 有し て い ます
function xml set element handler $start_element_handler	start _element _handler という 名前 の 関数 は 、 次 の 3 つの パラメータ を とる 必要 が あり ます
function xml set element handler $parser	開始 要素 および 終了 要素 の ハンドラ 関数 を 設定 する xml パーサ へ の 参照
function xml set element handler $attribs	第 3 の パラメータ で ある attribs は 、 その 要素 の 全 属性 に関する 連想 配列 です
function xml set element handler $end_element_handler	end _element _handler という 名前 の 関数 は 、 2 つ の パラメータ を とる 必要 が あり ます
function bool xml set element handler	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool xml set element handler resource $parser callable $start_element_handler callable $end_element_handler	開始 要素 および 終了 要素 の ハンドラ を 設定 する
function xml set end namespace decl handler $parser	xml パーサ へ の 参照
function xml set end namespace decl handler $prefix	xml オブジェクト 内 の 名前 空間 を 参照 する 際 に 使う 文字列
function xml set end namespace decl handler $handler	handler に は 、 関数 名 を 文字列 で 指定 し ます
function xml set end namespace decl handler $parser	最初 の パラメータ parser は 、 ハンドラ を コール し た xml パーサ へ の 参照 です
function bool xml set end namespace decl handler	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool xml set end namespace decl handler resource $parser callable $handler	名前 空間 終了 ハンドラ を 設定 する
function xml set external entity ref handler $public_id	5 番目 の パラメータ publicid は 、 エンティティ 宣言 で 指定 さ れ た パブリック id また は 指定 さ れ ない 場合 は 空 の 文字列 です
function xml set external entity ref handler $parser	外部 エンティティリファレンスハンドラ 関数 を 設定 する xml パーサ へ の 参照
function xml set external entity ref handler $handler	handler は 、 parser に関し て xml _parse が コール さ れ た 際 に 必要 な 関数 の 名前 を 有する 文字 列 です
function xml set external entity ref handler $system_id	4 番目 の パラメータ 、 systemid は エンティティ 宣言 で 指定 さ れ た システム id です
function xml set external entity ref handler $parser	最初 の パラメータ 、 parser は ハンドラ を コール する xml パーサ へ の リファレンス です
function xml set external entity ref handler $base	これ は 外部 エンティティ の システム id systemid を 有し て い ます
function xml set external entity ref handler $open_entity_names	2 番目 の パラメータ 、 open _entity _names は 、 エンティティ の 処理 を 行う ため に オープン さ れ た エンティティ の 名前 の スペース 区切り の リスト です 参照 さ れる エンティティ の 名前 を 含み ます
function bool xml set external entity ref handler	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool xml set external entity ref handler resource $parser callable $handler	外部 エンティティリファレンスハンドラ を 設定 する
function xml set notation decl handler $public_id	外部 表記 用宣 言 の パブリック id
function xml set notation decl handler $parser	最初 の パラメータ 、 parser は ハンドラ を コール する xml パーサ へ の リファレンス です
function xml set notation decl handler $handler	handler は 、 parser に関し て xml _parse が コール さ れ た 際 に 必要 な 関数 の 名前 を 有する 文字 列 です
function xml set notation decl handler $system_id	外部 表記 用宣 言 の システム id
function xml set notation decl handler $parser	表記 法宣 言 ハンドラ 関数 を 設定 する xml パーサ へ の 参照
function xml set notation decl handler $base	外部 エンティティ の システム id systemid を 取得 する 際 の 基本 と なり ます
function xml set notation decl handler $notation_name	これ は 、 前記 の 表記 用 フォーマット に 示す よう に 表記 法 の 名前 です
function bool xml set notation decl handler	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool xml set notation decl handler resource $parser callable $handler	表記 法宣 言 ハンドラ を 設定 する
function xml set object $parser	オブジェクト 内部 で 使う xml パーサ へ の 参照
function xml set object $object	xml パーサ を 使う オブジェクト
function bool xml set object	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool xml set object resource $parser object $object	オブジェクト 内部 で xml パーサ を 使用 する
function xml set start namespace decl handler $parser	xml パーサ へ の 参照
function xml set start namespace decl handler $uri	名前 空間 の uri
function xml set start namespace decl handler $prefix	xml オブジェクト 内 の 名前 空間 を 参照 する 際 に 使う 文字列
function xml set start namespace decl handler $handler	handler に は 、 関数 名 を 文字列 で 指定 し ます
function xml set start namespace decl handler $parser	最初 の パラメータ parser は 、 ハンドラ を コール し た xml パーサ へ の 参照 です
function bool xml set start namespace decl handler	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool xml set start namespace decl handler resource $parser callable $handler	名前 空間 開始 ハンドラ を 設定 する
function xml set unparsed entity decl handler $handler	handler は 、 parser に関し て xml _parse が コール さ れ た 際 に 必要 な 関数 の 名前 を 有する 文字 列 です
function xml set unparsed entity decl handler $system_id	外部 エンティティ の システム id
function xml set unparsed entity decl handler $base	外部 エンティティ の システム id systemid を 取得 する 際 の 基本 と なり ます
function xml set unparsed entity decl handler $parser	処理 さ れ ない エンティティ 宣言 用 ハンドラ 関数 を 設定 する xml パーサ へ の 参照
function xml set unparsed entity decl handler $parser	最初 の パラメータ 、 parser は ハンドラ を コール する xml パーサ へ の リファレンス です
function xml set unparsed entity decl handler $notation_name	この エンティティ の 表記 法 の 名前 xml _set _notation _decl _handler を 参照く ださい
function xml set unparsed entity decl handler $entity_name	宣言 しよ う と する エンティティ の 名前
function xml set unparsed entity decl handler $public_id	外部 エンティティ の パブリック id
function bool xml set unparsed entity decl handler	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool xml set unparsed entity decl handler resource $parser callable $handler	処理 さ れ ない エンティティ 宣言 用 ハンドラ を 設定 する
function xmlrpc set type $value	型 を 設定 する 値
function xmlrpc set type $type	& # 0 3 9 ; base 6 4 &# 0 3 9 ; あるい は & # 0 3 9 ; datetime &# 0 3 9 ;
function bool xmlrpc set type	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool xmlrpc set type string $value string $type	php 文字 列型 用 に xmlrpc 型 、 base 6 4 また は datetime を 設定 する
function yaml emit file $encoding	出力 時 の 文字 エンコーディング
function yaml emit file $data	エンコード し たい データ
function yaml emit file $linebreak	出力 時 の 改行 形式
function yaml emit file $filename	ファイル へ の パス
function yaml emit file $callbacks	yaml ノード の 発行 用 の コンテンツハンドラ
function bool yaml emit file	成功 し た 場合 に true を 返し ます
function bool yaml emit file string $filename mixed $data int $encoding int $linebreak array $callbacks	yaml 形式 に し た 値 を ファイル に 送る
function yaml emit $encoding	出力 時 の 文字 エンコーディング
function yaml emit $data	エンコード し たい データ
function yaml emit $linebreak	出力 時 の 改行 形式
function yaml emit $callbacks	yaml ノード の 発行 用 の コンテンツハンドラ
function string yaml emit	成功 し た 場合 に yaml 形式 の 文字列 を 返し ます
function string yaml emit mixed $data int $encoding int $linebreak array $callbacks	yaml 形式 に し た 値 を 返す
function yaml parse file $pos	ストリーム から 取り出す ドキュメント - 1 はすべて の ドキュメント 、 0 は 最初 の ドキュメント 、
function yaml parse file $filename	ファイル へ の パス
function yaml parse file $callbacks	yaml ノード の コンテンツハンドラ
function yaml parse file $ndocs	ndocs を 渡す と 、 ストリーム 内 で 見つかっ た ドキュメント の 数 が そこ に 格納 さ れ ます
function mixed yaml parse file	適切 な php の 型 に 変換 し た 結果 を 返し ます
function mixed yaml parse file string $filename int $pos int $ndocs array $callbacks	ファイル から の yaml ストリーム を パース する
function yaz addinfo $id	yaz _connect が 返す 接続 リソース
function string yaz addinfo	エラー の 詳細 情報 を 文字列 で 返し ます
function string yaz addinfo resource $id	詳細 な エラー 情報 を 返す
function yaz ccl conf $id	yaz _connect が 返す 接続 リソース
function yaz ccl conf $config	設定 の 配列
function void yaz ccl conf resource $id array $config	ccl パーサ を 設定 する
function yaz ccl parse $id	yaz _connect が 返す 接続 リソース
function yaz ccl parse $result	関数 が 成功 し た 場合 、 キー rpn に 有効 な rpn クエリ を 含む 配列 と なり ます
function yaz ccl parse $query	ccl find クエリ
function bool yaz ccl parse	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool yaz ccl parse resource $id string $query array $result	ccl パーサ を 起動 する
function yaz close $id	yaz _connect が 返す 接続 リソース
function bool yaz close	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool yaz close resource $id	yaz 接続 を クローズ する
function yaz database $id	yaz _connect が 返す 接続 リソース
function yaz database $databases	ひとつ あるい は 複数 の データベース を 表す 文字列
function bool yaz database	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool yaz database resource $id string $databases	セッション 内 の データベース を 指定 する
function yaz error $id	yaz _connect が 返す 接続 リソース
function string yaz error	id で 表さ れる 直近 の リクエスト の サーバー に関する エラーメッセージ を 返し ます
function string yaz error resource $id	エラー の 内容 を 返す
function yaz es $id	yaz _connect が 返す 接続 リソース
function yaz es $args	拡張 サービス の オプション に 加え て パッケージ 固有 の オプション を 指定 する 配列
function yaz es $type	拡張 サービス の 形式 を 表す 文字列
function void yaz es resource $id string $type array $args	拡張 サービス の リクエスト を 準備 する
function yaz get option $id	yaz _connect が 返す 接続 リソース
function yaz get option $name	オプション の 名前
function string yaz get option	指定 し た オプション の 値 を 返し ます
function string yaz get option resource $id string $name	接続 に関する オプション の 値 を 返す
function yaz hits $id	yaz _connect が 返す 接続 リソース
function yaz hits $searchresult	詳細 な 検索 結果 情報 の 配列
function int yaz hits	直近 の 検索 に関する ヒット 数 を 返し ます
function int yaz hits resource $id array $searchresult	直近 の 検索 に関する ヒット 数 を 返す
function yaz range $start	取得 する 最初 の レコード の 位置 を 指定 し ます
function yaz range $id	yaz _connect が 返す 接続 リソース
function yaz range $number	取得 する レコード の 数 を 指定 し ます
function void yaz range resource $id int $start int $number	取得 する レコード の 範囲 を 指定 する
function yaz record $raw	レコード は 、 その 本来 の フォーマット の ままで 返さ れ ます
function yaz record $id	yaz _connect が 返す 接続 リソース
function yaz record $pos	レコード の 位置
function yaz record $xml	レコード は 、 可能 なら ば xml 文字 列 として 返さ れ ます
function yaz record $database	レコード の 該当 位置 に 関連 する データベース の 名前 を 文字列 で 返し ます
function yaz record $string	レコード は 、 単純 な 形式 の 文字 列 で 返さ れ ます
function yaz record $type	type は 、 返さ れる レコード の 型 を 指定 し ます
function yaz record $syntax	レコード の 構文 が 文字列 で 返さ れ ます
function yaz record $array	レコード は 、 grs - 1 の 構造 を 反映 し た 配列 で 返さ れ ます
function string yaz record	位置 pos の レコード を 返し ます
function string yaz record resource $id int $pos string $type	レコード を 返す
function yaz scan result $result	指定 さ れ た 場合 、 この 配列 に スキャン 時 の 応答 から 得 られ た 追加 情報 が 代入 さ れ ます
function yaz scan result $id	yaz _connect が 返す 接続 リソース
function array yaz scan result	配列 0
function array yaz scan result resource $id array $result	スキャンリクエスト の 結果 を 返す
function yaz scan $id	yaz _connect が 返す 接続 リソース
function yaz scan $flags	オプション の パラメータ で 、 スキャンリクエスト の 動作 を 制御 する 追加 情報 を 指定 し ます
function yaz scan $startterm	スキャン を 開始 する 項目 の 位置
function yaz scan $type	現 時点 で は rpn 型 のみ が サポート さ れ て い ます
function void yaz scan resource $id string $type string $startterm array $flags	スキャン の 準備 を する
function yaz search $query	rpn クエリ は 、 z 3 9
function yaz search $id	yaz _connect が 返す 接続 リソース
function yaz search $type	クエリ の 型 を 表し ます
function bool yaz search	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool yaz search resource $id string $type string $query	検索 を 準備 する
function yaz set option $value	オプション の 新しい 値
function yaz set option $id	yaz _connect が 返す 接続 リソース
function yaz set option $nameあるいはoptions	文字列 あるい は 配列 です
function void yaz set option resource $id string $name string $value	接続 に関する ひとつ あるい は 複数 の オプション を 設定 する
function yaz sort $d	降順 ソート
function yaz sort $id	yaz _connect が 返す 接続 リソース
function yaz sort $a	昇順 ソート
function yaz sort $s	大文字 小文字 を 区別 する ソート
function yaz sort $i	大文字 小文字 を 区別 し ない ソート
function yaz sort $criteria	field 1 flags 1 field 2 flags 2 の よう な 形式 の 文字列
function void yaz sort resource $id string $criteria	ソート 条件 を 設定 する
function yaz syntax $id	yaz _connect が 返す 接続 リソース
function yaz syntax $syntax	ドット 記法 の （ 1
function void yaz syntax resource $id string $syntax	取得 用 に 適当 な レコード 構文 を 指定 する
function yp cat $domain	nis ドメイン 名
function yp cat $map	nis マップ
function array yp cat	すべて の マップエントリ を 配列 で 返し ます
function array yp cat string $domain string $map	マップ 全体 を 含む 配列 を 返す
function int yp errno	エラー 定数 yperr _xxx のいずれか を 返し ます
function int yp errno	前 の 操作 の エラーコード を 返す
function yp first $domain	nis ドメイン 名
function yp first $map	nis マップ
function array yp first	最初 の キー / 値 の 組 を 表す 配列 、 あるい は エラー 時 に false を 返し ます
function array yp first string $domain string $map	指定 し た マップ から 最初 の キー / 値 の 組 を 返す
function string yp get default domain	ノード の デフォルトドメイン また は false を 返し ます
function string yp get default domain	マシン の デフォルト nis ドメイン を 取得 する
function yp master $domain	nis ドメイン 名
function yp master $map	nis マップ
function string yp master string $domain string $map	指定 し た マップ の マスタ nis サーバー の マシン 名 を 返す
function yp match $domain	nis ドメイン 名
function yp match $key	キー は 正確 で なけれ ば なり ませ ん
function yp match $map	nis マップ
function string yp match	値 、 あるい は エラー 時 に false を 返し ます
function string yp match string $domain string $map string $key	検索 し た 行 を 返す
function int yp order	マップ の 呼出 番号 、 あるい は エラー 時 に false を 返し ます
function int yp order string $domain string $map	マップ の 呼出 番号 を 返す
function string zend version	zend engine の バージョン 番号 を 文字列 で 返し ます
function string zend version	現在 の zend engine の バージョン を 取得 する
function zip close $zip	事前 に zip _open で オープン さ れ た zip ファイル
function void zip close resource $zip	zip ファイルアーカイブ を 閉じる
function zip entry close $zip_entry	zip _entry _open により オープン さ れ た ディレクトリ の エントリ
function bool zip entry close	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool zip entry close resource $zip_entry	ディレクトリエントリ を 閉じる
function zip entry compressionmethod $zip_entry	zip _read により 返さ れ た ディレクトリ の エントリ
function string zip entry compressionmethod	圧縮 方法
function string zip entry compressionmethod resource $zip_entry	ディレクトリエントリ の 圧縮 方法 を 取得 する
function zip entry filesize $zip_entry	zip _read により 返さ れ た ディレクトリ の エントリ
function int zip entry filesize	ディレクトリエントリ の サイズ
function int zip entry filesize resource $zip_entry	ディレクトリエントリ の 実際 の ファイルサイズ を 取得 する
function zip entry open $zip	zip _open により 返さ れ た 有効 な リソースハンドル
function zip entry open $mode	fopen の マニュアル で 指定 さ れ た モード の どれ か 注意 : 現在 、 mode は 無視 さ れ 、 常 に & quot ;rb &quot ; となり ます
function zip entry open $zip_entry	zip _read により 返さ れ た ディレクトリエントリ
function bool zip entry open	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
function bool zip entry open resource $zip resource $zip_entry string $mode	読込み 用 に ディレクトリエントリ を オープン する
function zip entry read $zip_entry	zip _read により 返さ れ た ディレクトリエントリ
function zip entry read $length	返す バイト 数
function string zip entry read	読み込ん だ データ を 返し ます
function string zip entry read resource $zip_entry int $length	オープン さ れ た ディレクトリエントリ から 読み込む
function zip open $filename	オープン する zip アーカイブ の ファイル 名
function resource zip open	後 で zip _read および zip _close で 使用 さ れる リソースハンドル 、 また は 、 filename が 存在 し ない 場合 やその 他 の エラー が 発生 し た 場合 は エラー の 番号 を 返し ます
function resource zip open string $filename	zip ファイルアーカイブ を オープン する
function zip read $zip	zip _open で オープン 済み の zip ファイル
function resource zip read	後 で zip _entry _
function resource zip read resource $zip	zip ファイルアーカイブ の 中 の 次 の エントリ を 読み込む
function string zlib encode string $data string $encoding string $level	指定 し た 符号 化方 式 で データ を 圧縮 する
function string zlib get coding type	返さ れる 値 は gzip deflate もしく は false です
function string zlib get coding type	出力 圧縮 に 使用 さ れ た コーディング の 種類 を 返す
Gender\Gender country $country	gender \gender クラス の 定数 で 表さ れる 国 id
Gender\Gender array country	成功 し た 場合 は 、 短い 国名 と 完全 な 国名 の 配列 を 返し ます
Gender\Gender array country integer $country	国 を 表す テキスト を 取得 する
Gender\Gender get $name	調べ たい 名前
Gender\Gender get $country	gender クラス の 定数 で 表さ れる 国 id
Gender\Gender integer get	性別 を 返し ます
Gender\Gender integer get string $name integer $country	性別 を 取得 する
Gender\Gender similar Names $country	gender クラス の 定数 で 指定 する 国 id
Gender\Gender similar Names $name	調べる 名前
Gender\Gender array similar Names	似 て いる 名前 の 配列 を 返し ます
Gender\Gender array similar Names string $name integer $country	似 た 名前 を 取得 する
Generator mixed key	yield し た キー を 返し ます
Generator mixed key	yield し た キー を 取得 する
Generator void rewind	イテレータ を 巻き戻す
Generator throw $exception	ジェネレータ に スロー する 例外
Generator mixed throw	yield し た 値 を 返し ます
Generator mixed throw Exception $exception	例外 を ジェネレータ に スロー する
GlobIterator construct $flags	オプション の フラグ
GlobIterator construct $path	ディレクトリ へ の パス
GlobIterator string construct string $path int $flags	glob を 使う ディレクトリ を 作成 する
GlobIterator int count	返さ れ た ディレクトリ や ファイル の 数 を integer で 返し ます
GlobIterator int count	ディレクトリ や ファイル の 数 を 取得 する
Gmagick addnoiseimage $noise_type	ノイズ の 形式
Gmagick Gmagick addnoiseimage	gmagick オブジェクト に ノイズ を 追加 し て 返し ます
Gmagick Gmagick addnoiseimage int $NOISE	ランダム な ノイズ を 画像 に 追加 する
Gmagick annotateimage $x	テキスト の 左端 の 水平 オフセット を あらわす ピクセル 数
Gmagick annotateimage $angle	テキスト を 書き出す 角度
Gmagick annotateimage $GmagickDraw	テキスト 描画 設定 を 含む gmagickdraw オブジェクト
Gmagick annotateimage $y	テキスト の ベースライン の 垂直 オフセット を あらわす ピクセル 数
Gmagick annotateimage $text	描画 する テキスト
Gmagick Gmagick annotateimage	gmagick オブジェクト に 注記 を 加え て 返し ます
Gmagick Gmagick annotateimage GmagickDraw $GmagickDraw float $x float $y float $angle string $text	画像 に テキスト による 注記 を 加える
Gmagick blurimage $sigma	標準 偏差
Gmagick blurimage $radius	にじみ の 半径
Gmagick Gmagick blurimage	にじませ た gmagick オブジェクト を 返し ます
Gmagick Gmagick blurimage float $radius float $sigma int $channel	blur にじみ フィルタ を 画像 に 追加 する
Gmagick borderimage $color	枠線 の 色 を 含む gmagickpixel オブジェクト あるい は 文字列
Gmagick borderimage $width	枠線 の 幅
Gmagick borderimage $height	枠線 の 高さ
Gmagick Gmagick borderimage	枠線 を 定義 し た gmagick オブジェクト を 返し ます
Gmagick Gmagick borderimage GmagickPixel $color int $width int $height	画像 の 周り を 枠線 で 囲む
Gmagick charcoalimage $radius	ガウス 分布 の 半径
Gmagick charcoalimage $sigma	ガウス 分布 の 標準 偏差 ピクセル 単位
Gmagick Gmagick charcoalimage	木炭画 を シミュレート し た gmagick オブジェクト を 返し ます
Gmagick Gmagick charcoalimage float $radius float $sigma	木炭画 を シミュレート する
Gmagick chopimage $y	切り取る 範囲 の y 座標
Gmagick chopimage $height	切り取る 範囲 の 高さ
Gmagick chopimage $width	切り取る 範囲 の 幅
Gmagick chopimage $x	切り取る 範囲 の x 座標
Gmagick Gmagick chopimage	切り取っ た 後 の gmagick オブジェクト を 返し ます
Gmagick Gmagick chopimage int $width int $height int $x int $y	画像 の 一部 を 取り除き 、 切り 詰める
Gmagick commentimage $comment	追加 する コメント
Gmagick Gmagick commentimage	コメント を 追加 し た gmagick オブジェクト を 返し ます
Gmagick Gmagick commentimage string $comment	コメント を 画像 に 追加 する
Gmagick construct $filename	読み込み たい 画像 へ の パス 、 あるい は 複数 の パス の 配列
Gmagick string construct	成功 し た 場合 に 新しい gmagick オブジェクト を 返し ます
Gmagick string construct string $filename	gmagick の コンストラクタ
Gmagick cropthumbnailimage $height	サムネイル の 高さ
Gmagick cropthumbnailimage $width	サムネイル の 幅
Gmagick Gmagick cropthumbnailimage	切り取っ た gmagick オブジェクト を 返し ます
Gmagick Gmagick cropthumbnailimage int $width int $height	切り取っ て サムネイル を 作成 する
Gmagick void deconstructimages	画像間 の 特定 の ピクセル の 差 を 返す
Gmagick Gmagick despeckleimage	スペックルノイズ を 軽減 し た gmagick オブジェクト を 返し ます
Gmagick Gmagick despeckleimage	画像内 の スペックルノイズ を 軽減 する
Gmagick Gmagick destroy	成功 し た 場合 に true を 返し ます
Gmagick Gmagick destroy	gmagick オブジェクト を 破棄 する
Gmagick drawimage $GmagickDraw	画像 を レンダリング する 描画 操作
Gmagick Gmagick drawimage	描か れ た gmagick オブジェクト を 返し ます
Gmagick Gmagick drawimage GmagickDraw $GmagickDraw	現在 の 画像 上 の gmagickdraw オブジェクト を レンダリング する
Gmagick embossimage $sigma	効果 の シグマ
Gmagick embossimage $radius	効果 の 半径
Gmagick Gmagick embossimage	エンボス 処理 し た gmagick オブジェクト を 返し ます
Gmagick Gmagick embossimage float $radius float $sigma	グレースケール 画像 に 三次 元効 果 を 施し て 返す
Gmagick Gmagick enhanceimage	品質 を 向上 し た gmagick オブジェクト を 返し ます
Gmagick Gmagick enhanceimage	ノイジー な 画像 の 品質 を 向上 さ せる
Gmagick Gmagick equalizeimage	均等化 し た gmagick オブジェクト を 返し ます
Gmagick Gmagick equalizeimage	画像 ヒストグラム を 均等 化 する
Gmagick Gmagick flipimage	垂直 反転 し た gmagick オブジェクト を 返し ます
Gmagick Gmagick flipimage	垂直 方向 に 反転 し た 画像 を 作成 する
Gmagick Gmagick flopimage	水平 反転 し た gmagick オブジェクト を 返し ます
Gmagick Gmagick flopimage	水平 方向 に 反転 し た 画像 を 作成 する
Gmagick frameimage $width	枠 の 幅
Gmagick frameimage $outer_bevel	外側 の 影 の 幅
Gmagick frameimage $color	マット 色 を 表す gmagickpixel オブジェクト あるい は 浮動 小数 点数
Gmagick frameimage $height	枠 の 高さ
Gmagick frameimage $inner_bevel	内側 の 影 の 幅
Gmagick Gmagick frameimage	枠線 を つけ た gmagick オブジェクト を 返し ます
Gmagick Gmagick frameimage GmagickPixel $color int $width int $height int $inner_bevel int $outer_bevel	三次元 の 枠線 を シミュレート する
Gmagick string getfilename	成功 し た 場合 に 文字列 を 返し ます
Gmagick string getfilename	画像 シーケンス に 関連 付け られ た ファイル 名 を 取得 する
Gmagick void getimagebordercolor	画像 の 前景 色 を 返す
Gmagick int getimagechanneldepth	画像 チャネル の 深度 を 返し ます
Gmagick int getimagechanneldepth int $channel_type	特定 の 画像 チャネル の 深度 を 返す
Gmagick int getimagecolorspace	色空間 を 返し ます
Gmagick int getimagecolorspace	画像 の 色空間 を 取得 する
Gmagick int getimagecompose	画像 に 関連 付け られ て いる 合成 演算子 を 返し ます
Gmagick int getimagecompose	画像 の 合成 演算子 を 返す
Gmagick int getimagedelay	画像 の 遅延 を 返し ます
Gmagick int getimagedelay	画像 の 遅延 を 取得 する
Gmagick int getimagedispose	画像 の 配置 方法 を 返し ます
Gmagick int getimagedispose	画像 の 配置 方法 を 取得 する
Gmagick array getimageextrema	&quot ;min &quot ; および & quot ;max &quot ; という キー を 持つ 連想 配列 を 返し ます
Gmagick array getimageextrema	画像 の 極値 を 取得 する
Gmagick string getimagefilename	画像 の ファイル 名 を 文字列 で 返し ます
Gmagick string getimagefilename	シーケンス 内 の 特定 の 画像 の ファイル 名 を 返す
Gmagick string getimageformat	成功 し た 場合 は 画像 の フォーマット を 文字列 で 返し ます
Gmagick string getimageformat	シーケンス 内 の 特定 の 画像 の フォーマット を 返す
Gmagick float getimagegamma	成功 し た 場合 に ガンマ を 返し ます
Gmagick float getimagegamma	画像 の ガンマ を 取得 する
Gmagick int getimageheight	画像 の 高さ を ピクセル 数 で 返し ます
Gmagick int getimageheight	画像 の 高さ を 返す
Gmagick array getimagehistogram	画像 の ヒストグラム を gmagickpixel オブジェクト の 配列 で 返し ます
Gmagick array getimagehistogram	画像 の ヒストグラム を 取得 する
Gmagick int getimageindex	現在 アクティブ な 画像 の インデックス を 返し ます
Gmagick int getimageindex	現在 アクティブ な 画像 の インデックス を 取得 する
Gmagick int getimageinterlacescheme	成功 し た 場合 に 画像 の インターレース 手法 を 返し ます
Gmagick int getimageinterlacescheme	画像 の インターレース 手法 を 取得 する
Gmagick int getimageiterations	画像 の 反復 を 表す 整数 値 を 返し ます
Gmagick int getimageiterations	画像 の 反復 を 取得 する
Gmagick int getimagematte	画像 が マットチャネル を 持っ て いる 場合 に true 、 そう で ない 場合 に false を 返し ます
Gmagick int getimagematte	画像 が マットチャネル を 持っ て いる かど う か を 調べる
Gmagick array getimageredprimary	赤 が 一番 強い 点 を & quot ;x &quot ; および & quot ;y &quot ; という キー を 持つ 配列 で 返し ます
Gmagick array getimageredprimary	赤 が 一番 強い 点 を 返す
Gmagick int getimagerenderingintent	画像 の レンダリング 方向 を 返し ます
Gmagick int getimagerenderingintent	画像 の レンダリング 方向 を 取得 する
Gmagick int getimagescene	画像 の シーン を 返し ます
Gmagick int getimagescene	画像 の シーン を 取得 する
Gmagick string getimagesignature	その ファイル の sha - 2 5 6 ハッシュ を 文字列 で 返し ます
Gmagick string getimagesignature	sha - 2 5 6 メッセージダイジェスト を 生成 する
Gmagick int getimagetype	画像 の 型 を 返し ます
Gmagick int getimagetype	画像 の 型 を 取得 する
Gmagick array getimagewhitepoint	色度 が 白い点 を 返し ます
Gmagick array getimagewhitepoint	色度 が 白い点 を 返す
Gmagick string getpackagename	graphicsmagick パッケージ 名 を 文字列 で 返し ます
Gmagick string getpackagename	graphicsmagick パッケージ 名 を 返す
Gmagick array getquantumdepth	gmagick quantum depth を 文字列 で 返し ます
Gmagick array getquantumdepth	gmagick quantum depth を 取得 する
Gmagick array getversion	graphicsmagick api の バージョン を 文字 列 と 数値 で 返し ます
Gmagick array getversion	graphicsmagick api の バージョン を 返す
Gmagick mixed haspreviousimage	リスト 内 で 逆方 向 に ひとつ 進ん だ とき にまだ オブジェクト が 画像 を 保持 し て いれ ば true 、 し て い なけれ ば false を 返し ます
Gmagick mixed haspreviousimage	オブジェクト が 前 の 画像 を 保持 し て いる かど う か を 調べる
Gmagick labelimage $label	追加 する ラベル
Gmagick mixed labelimage	ラベル を 追加 し た gmagick オブジェクト を 返し ます
Gmagick mixed labelimage string $label	ラベル を 画像 に 追加 する
Gmagick mixed magnifyimage	拡大 し た gmagick オブジェクト を 返し ます
Gmagick mixed magnifyimage	画像 を 二倍 に 比例 拡大 する
Gmagick mapimage $dither	ゼロ 以外 の 整数 値 を 設定 し て 、 マップ し た 画像 を ディザリング し ます
Gmagick mapimage $gmagick	参照 する 画像
Gmagick Gmagick mapimage	gmagick オブジェクト を 返し ます
Gmagick Gmagick mapimage gmagick $gmagick bool $dither	画像 の 色 を 、 参照 画像 の 中 の 最も 近い色 に 置き 換える
Gmagick medianfilterimage $radius	近傍 ピクセル の 半径
Gmagick void medianfilterimage float $radius	デジタルフィルタ を 適用 する
Gmagick modulateimage $hue	画像 の 色相 - 1 0 0 から + 1 0 0
Gmagick modulateimage $saturation	画像 の 彩度 - 1 0 0 から + 1 0 0
Gmagick modulateimage $brightness	画像 の 明度 - 1 0 0 から + 1 0 0
Gmagick void modulateimage float $brightness float $saturation float $hue	明度 、 彩度 、 色相 を 制御 する
Gmagick oilpaintimage $radius	近傍円 の 半径
Gmagick void oilpaintimage float $radius	油絵 を シミュレート する
Gmagick bool previousimage	成功 し た 場合 に gmagick オブジェクト を 返し ます
Gmagick bool previousimage	オブジェクト 内 の 前 の 画像 に 移動 する
Gmagick profileimage $profile	プロファイル
Gmagick profileimage $name	追加 あるい は 削除 する プロファイル の 名前
Gmagick void profileimage string $name string $profile	画像 の プロファイル を 追加 あるい は 削除 する
Gmagick quantizeimage $treeDepth	通常 は 、 この 整数 値 は 0 か 1 に なり ます
Gmagick quantizeimage $measureError	ゼロ 以外 の 値 で 、 元 画像 と 量子 化 し た 画像 の 違い を 計測 し ます
Gmagick quantizeimage $colorspace	この 色空間 の 中 で 色数 を 減ら す
Gmagick quantizeimage $numColors	色数
Gmagick quantizeimage $dither	ゼロ 以外 の 値 を 元 の 画像 と の 間 の 違い に 分配 し 、 対応 する 減色 アルゴリズム を 近傍 ピクセル と の ヒルベルト 曲線 に 沿っ た もの に し ます
Gmagick void quantizeimage int $numColors int $colorspace int $treeDepth bool $dither bool $measureError	参照 画像 内 の 色 を 解析 する
Gmagick quantizeimages $treeDepth	通常 は 、 この 整数 値 は 0 か 1 に なり ます
Gmagick quantizeimages $measureError	ゼロ 以外 の 値 で 、 元 画像 と 量子 化 し た 画像 の 違い を 計測 し ます
Gmagick quantizeimages $colorspace	この 色空間 の 中 で 色数 を 減ら す
Gmagick quantizeimages $numColors	色数
Gmagick quantizeimages $dither	ゼロ 以外 の 値 を 元 の 画像 と の 間 の 違い に 分配 し 、 対応 する 減色 アルゴリズム を 近傍 ピクセル と の ヒルベルト 曲線 に 沿っ た もの に し ます
Gmagick void quantizeimages int $numColors int $colorspace int $treeDepth bool $dither bool $measureError	画像 シーケンス 内 の 色 を 解析 する
Gmagick array queryfonts	成功 し た 場合 に gmagick オブジェクト を 返し ます
Gmagick array queryfonts string $pattern	設定 し た フォント を 返す
Gmagick queryformats $pattern	パターン を 含む 文字 列 へ の ポインタ を 指定 し ます
Gmagick array queryformats	成功 し た 場合 に gmagick オブジェクト を 返し ます
Gmagick array queryformats string $pattern	gmagick が サポート する フォーマット を 返す
Gmagick raiseimage $x	x 座標
Gmagick raiseimage $width	明るく する 範囲 の 幅
Gmagick raiseimage $height	明るく する 範囲 の 高さ
Gmagick raiseimage $raise	ゼロ 以外 の 値 を 指定 する と 三次元 の 引き上げ 効果 、 ゼロ の 場合 は 引き下げ 効果
Gmagick raiseimage $y	y 座標
Gmagick void raiseimage int $width int $height int $x int $y bool $raise	三次元 の ボタン 風 の 効果 を シミュレート する
Gmagick read $filename	画像 ファイル 名
Gmagick void read string $filename	ファイル から 画像 を 読み込む
Gmagick readimage $filename	画像 ファイル 名
Gmagick void readimage string $filename	ファイル から 画像 を 読み込む
Gmagick readimageblob $imageContents	画像 の 内容
Gmagick readimageblob $filename	画像 ファイル 名
Gmagick void readimageblob string $imageContents string $filename	バイナリ 文字 列 から 画像 を 読み込む
Gmagick readimagefile $fp	ファイルディスクリプタ
Gmagick void readimagefile resource $fp string $filename	オープン し て いる ファイルハンドル から 画像 を 読み込む
Gmagick void removeimage	画像 リスト から 画像 を 削除 する
Gmagick removeimageprofile $name	返す プロファイル の 名前
Gmagick string removeimageprofile	聖子 し た 場合 に gmagick オブジェクト を 返し ます
Gmagick string removeimageprofile string $name	指定 し た 名前 の 画像 プロファイル を 削除 し て 返す
Gmagick resampleimage $xResolution	新しい 画像 の x 方向 の 解像 度
Gmagick resampleimage $yResolution	新しい 画像 の y 方向 の 解像 度
Gmagick resampleimage $blur	blur 要素
Gmagick resampleimage $filter	利用 する フィルタ
Gmagick void resampleimage float $xResolution float $yResolution int $filter float $blur	画像 を 指定 し た 解像 度 に リサンプリング する
Gmagick resizeimage $height	画像 の 高さ
Gmagick resizeimage $width	画像 の 幅
Gmagick resizeimage $blur	blur 要素
Gmagick resizeimage $filter	利用 する フィルタ
Gmagick void resizeimage int $width int $height int $filter float $blur bool $fit	画像 の サイズ を 変更 する
Gmagick rotateimage $color	背景色
Gmagick rotateimage $degrees	画像 を 回転 さ せる 度数
Gmagick Gmagick rotateimage	成功 し た 場合 に gmagick オブジェクト を 返し ます
Gmagick Gmagick rotateimage mixed $color float $degrees	画像 を 回転 する
Gmagick scaleimage $width	変更後 の 画像 の 幅
Gmagick scaleimage $height	変更後 の 画像 の 高さ
Gmagick Gmagick scaleimage	成功 し た 場合 に gmagick オブジェクト を 返し ます
Gmagick Gmagick scaleimage int $width int $height bool $fit	画像 の サイズ を 変更 する
Gmagick separateimagechannel $channel	ど の チャネル を 取り出す か
Gmagick Gmagick separateimagechannel	成功 し た 場合 に gmagick オブジェクト を 返し ます
Gmagick Gmagick separateimagechannel int $channel	画像 から チャネル を 分離 する
Gmagick setfilename $filename	画像 ファイル 名
Gmagick Gmagick setfilename	成功 し た 場合 に gmagick オブジェクト を 返し ます
Gmagick Gmagick setfilename string $filename	画像 を 読み 書き する 前 に ファイル 名 を 設定 する
Gmagick setimagebackgroundcolor $color	画像 の 背景 色
Gmagick Gmagick setimagebackgroundcolor	成功 し た 場合 に gmagick オブジェクト を 返し ます
Gmagick Gmagick setimagebackgroundcolor GmagickPixel $color	画像 の 背景 色 を 設定 する
Gmagick setimageblueprimary $y	青 が 一番 強い 点 の y 座標
Gmagick setimageblueprimary $x	青 が 一番 強い 点 の x 座標
Gmagick Gmagick setimageblueprimary	成功 し た 場合 に gmagick オブジェクト を 返し ます
Gmagick Gmagick setimageblueprimary float $x float $y	青 が 一番 強い 点 を 設定 する
Gmagick setimagebordercolor $color	画像 の 前景 色
Gmagick Gmagick setimagebordercolor	成功 し た 場合 に gmagick オブジェクト を 返し ます
Gmagick Gmagick setimagebordercolor GmagickPixel $color	画像 の 前景 色 を 設定 する
Gmagick setimagechanneldepth $channel	抽出 する チャネル
Gmagick setimagechanneldepth $depth	深度 を 表す ビット 数
Gmagick Gmagick setimagechanneldepth	成功 し た 場合 に gmagick オブジェクト を 返し ます
Gmagick Gmagick setimagechanneldepth int $channel int $depth	特定 の 画像 チャネル の 深度 を 設定 する
Gmagick setimagecolorspace $colorspace	画像 の 色空間
Gmagick Gmagick setimagecolorspace	成功 し た 場合 に gmagick オブジェクト を 返し ます
Gmagick Gmagick setimagecolorspace int $colorspace	画像 の 色空間 を 設定 する
Gmagick setimagecompose $composite	画像 の 合成 演算子
Gmagick Gmagick setimagecompose	成功 し た 場合 に gmagick オブジェクト を 返し ます
Gmagick Gmagick setimagecompose int $composite	画像 の 合成 演算子 を 設定 する
Gmagick setimagedelay $delay	画像 の 遅延 を 1 / 1 0 0 秒単 位 で 指定 し ます
Gmagick Gmagick setimagedelay	成功 し た 場合 に gmagick オブジェクト を 返し ます
Gmagick Gmagick setimagedelay int $delay	画像 の 遅延 を 設定 する
Gmagick setimagefilename $filename	画像 ファイル 名
Gmagick Gmagick setimagefilename	成功 し た 場合 に gmagick オブジェクト を 返し ます
Gmagick Gmagick setimagefilename string $filename	シーケンス 内 の 特定 の 画像 の ファイル 名 を 設定 する
Gmagick setimageindex $index	シーン 番号
Gmagick Gmagick setimageindex	成功 し た 場合 に gmagick オブジェクト を 返し ます
Gmagick Gmagick setimageindex int $index	画像 リスト 内 で の イテレータ の 位置 を 、 index パラメータ で 指定 し た 場所 に 設定 する
Gmagick setimageinterlacescheme $interlace	画像 の インターレース 手法
Gmagick Gmagick setimageinterlacescheme	成功 し た 場合 に gmagick オブジェクト を 返し ます
Gmagick Gmagick setimageinterlacescheme int $interlace	画像 の インターレース 手法 を 設定 する
Gmagick setimageiterations $iterations	画像 の 遅延 を 1 / 1 0 0 秒単 位 で 指定 し ます
Gmagick Gmagick setimageiterations	成功 し た 場合 に gmagick オブジェクト を 返し ます
Gmagick Gmagick setimageiterations int $iterations	画像 の 反復 を 設定 する
Gmagick setimageprofile $profile	プロファイル
Gmagick setimageprofile $name	追加 あるい は 削除 する プロファイル の 名前
Gmagick Gmagick setimageprofile	成功 し た 場合 に gmagick オブジェクト を 返し ます
Gmagick Gmagick setimageprofile string $name string $profile	指定 し た 名前 の 画像 プロファイル を gmagick オブジェクト に 追加 する
Gmagick setimagerenderingintent $rendering_intent	画像 の レンダリング 方向
Gmagick Gmagick setimagerenderingintent	成功 し た 場合 に gmagick オブジェクト を 返し ます
Gmagick Gmagick setimagerenderingintent int $rendering_intent	画像 の レンダリング 方向 を 設定 する
Gmagick setimageresolution $xResolution	x 方向 の 解像 度
Gmagick setimageresolution $yResolution	y 方向 の 解像 度
Gmagick Gmagick setimageresolution	成功 し た 場合 に gmagick オブジェクト を 返し ます
Gmagick Gmagick setimageresolution float $xResolution float $yResolution	画像 の 解像 度 を 設定 する
Gmagick setimagescene $scene	画像 の シーン 番号
Gmagick Gmagick setimagescene	成功 し た 場合 に gmagick オブジェクト を 返し ます
Gmagick Gmagick setimagescene int $scene	画像 の シーン を 設定 する
Gmagick setimagetype $imgType	画像 の 型
Gmagick Gmagick setimagetype	成功 し た 場合 に gmagick オブジェクト を 返し ます
Gmagick Gmagick setimagetype int $imgType	画像 の 型 を 設定 する
Gmagick setimageunits $resolution	画像 の 解像 度 の 単位
Gmagick Gmagick setimageunits	成功 し た 場合 に gmagick オブジェクト を 返し ます
Gmagick Gmagick setimageunits int $resolution	画像 の 解像 度 の 単位 を 設定 する
Gmagick setimagewhitepoint $x	白い点 の x 座標
Gmagick setimagewhitepoint $y	白い点 の y 座標
Gmagick Gmagick setimagewhitepoint	成功 し た 場合 に gmagick オブジェクト を 返し ます
Gmagick Gmagick setimagewhitepoint float $x float $y	画像 の 色度 が 白い点 を 設定 する
Gmagick setsamplingfactors $factors	各色 コンポーネント の サンプリング 係数 を 表す double 型 の 値 の 配列 rgb 順
Gmagick Gmagick setsamplingfactors	成功 し た 場合 に gmagick オブジェクト を 返し ます
Gmagick Gmagick setsamplingfactors array $factors	画像 の サンプリング 係数 を 設定 する
Gmagick solarizeimage $threshold	ソラリゼーション の 効き 具合 を 指定 し ます
Gmagick Gmagick solarizeimage	成功 し た 場合 に gmagick オブジェクト を 返し ます
Gmagick Gmagick solarizeimage int $threshold	画像 に ソラリゼーション 効果 を 適用 する
Gmagick Gmagick stripimage	成功 し た 場合 に gmagick オブジェクト を 返し ます
Gmagick Gmagick stripimage	画像 から すべ て の プロパティ や コメント を 除去 する
Gmagick swirlimage $degrees	渦巻 効果 の 程度
Gmagick Gmagick swirlimage	成功 し た 場合 に gmagick オブジェクト を 返し ます
Gmagick Gmagick swirlimage float $degrees	画像 の 中心 から 、 ピクセル を 渦巻 状 に する
Gmagick trimimage $fuzz	デフォルト で は 、 対象 の 色 は 特定 の ピクセル の 色 とまっ たく 同じ で なけれ ば なり ませ ん
Gmagick Gmagick trimimage	gmagick オブジェクト を 返し ます
Gmagick Gmagick trimimage float $fuzz	画像 の 輪郭 を 削除 する
Gmagick write $filename	画像 ファイル 名
Gmagick void write string $filename	画像 を 指定 し た ファイル 名 で 書き出す
Gmagick writeimage $filename	画像 ファイル 名
Gmagick Gmagick writeimage	gmagick オブジェクト を 返し ます
Gmagick Gmagick writeimage string $filename bool $all_frames	画像 を 指定 し た ファイル 名 で 書き出す
GmagickDraw annotate $text	描画 する テキスト
GmagickDraw annotate $x	テキスト の 左端 の x 座標
GmagickDraw annotate $y	テキスト の ベースライン の y 座標
GmagickDraw GmagickDraw annotate	成功 し た 場合 に gmagickdraw オブジェクト を 返し ます
GmagickDraw GmagickDraw annotate float $x float $y string $text	画像 の 上 に テキスト を 描画 する
GmagickDraw bezier $coordinate_array	座標 の 配列
GmagickDraw GmagickDraw bezier	成功 し た 場合 に gmagickdraw オブジェクト を 返し ます
GmagickDraw GmagickDraw bezier array $coordinate_array	ベジエ 曲線 を 描く
GmagickDraw ellipse $oy	原点 の y 座標
GmagickDraw ellipse $end	終了 角度
GmagickDraw ellipse $start	開始 角度
GmagickDraw ellipse $rx	x 方向 の 半径
GmagickDraw ellipse $ox	原点 の x 座標
GmagickDraw ellipse $ry	y 方向 の 半径
GmagickDraw GmagickDraw ellipse	成功 し た 場合 に gmagickdraw オブジェクト を 返し ます
GmagickDraw GmagickDraw ellipse float $ox float $oy float $rx float $ry float $start float $end	楕円 を 画像 上 に 描く
GmagickDraw float getfillopacity	塗りつぶし の 色や テクスチャ に 使う 不透 明度 を 返し ます
GmagickDraw float getfillopacity	描画 に 使う 不透 明度 を 返す
GmagickDraw float getfontsize	現在 の gmagickdraw オブジェクト に 関連 づけ られ た フォント の サイズ を 返し ます
GmagickDraw float getfontsize	フォント の ポイント 数 を 返す
GmagickDraw int getfontweight	成功 し た 場合 に 整数 値 を 返し ます
GmagickDraw int getfontweight	フォント の ウェイト を 返す
GmagickDraw void getstrokecolor	オブジェクト の 輪郭 の 描画 に 使う 色 を 返す
GmagickDraw float getstrokeopacity	不透 明度 を 表す 浮動 小数 点数 値 を 返し ます
GmagickDraw float getstrokeopacity	オブジェクト の 輪郭 の 不透 明度 を 返す
GmagickDraw int gettextdecoration	decoration _ 定数 のい ずれ か を 返し ます
GmagickDraw int gettextdecoration	テキスト の デコレーション を 返す
GmagickDraw polygon $coordinates	座標 の 配列
GmagickDraw GmagickDraw polygon	成功 し た 場合 に gmagickdraw オブジェクト を 返し ます
GmagickDraw GmagickDraw polygon array $coordinates	多角形 を 描く
GmagickDraw polyline $coordinate_array	座標 の 配列
GmagickDraw GmagickDraw polyline	成功 し た 場合 に gmagickdraw オブジェクト を 返し ます
GmagickDraw GmagickDraw polyline array $coordinate_array	ポリライン を 描く
GmagickDraw rectangle $x2	二番目 の x 座標
GmagickDraw rectangle $y2	二番目 の y 座標
GmagickDraw rectangle $y1	最初 の y 座標
GmagickDraw rectangle $x1	最初 の x 座標
GmagickDraw GmagickDraw rectangle	成功 し た 場合 に gmagickdraw オブジェクト を 返し ます
GmagickDraw GmagickDraw rectangle float $x1 float $y1 float $x2 float $y2	矩形 を 描く
GmagickDraw scale $y	垂直方向 の 倍率
GmagickDraw scale $x	水平方向 の 倍率
GmagickDraw GmagickDraw scale	成功 し た 場合 に gmagickdraw オブジェクト を 返し ます
GmagickDraw GmagickDraw scale float $x float $y	倍率 を 調整 する
GmagickDraw setfillcolor $color	塗りつぶし に 使う 色 を 表す gmagickpixel オブジェクト
GmagickDraw GmagickDraw setfillcolor	成功 し た 場合 に gmagickdraw オブジェクト を 返し ます
GmagickDraw GmagickDraw setfillcolor string $color	オブジェクト の 塗り つぶし に 使う 色 を 設定 する
GmagickDraw setfillopacity $fill_opacity	塗りつぶし の 不透 明度
GmagickDraw GmagickDraw setfillopacity	成功 し た 場合 に gmagickdraw オブジェクト を 返し ます
GmagickDraw GmagickDraw setfillopacity float $fill_opacity	不透 明度 を 設定 する
GmagickDraw setfont $font	フォント 名
GmagickDraw GmagickDraw setfont	成功 し た 場合 に gmagickdraw オブジェクト を 返し ます
GmagickDraw GmagickDraw setfont string $font	テキスト の アノテーション で 使う フォント の 完全 な 名前 を 設定 する
GmagickDraw setfontsize $pointsize	テキスト の ポイント 数
GmagickDraw GmagickDraw setfontsize	成功 し た 場合 に gmagickdraw オブジェクト を 返し ます
GmagickDraw GmagickDraw setfontsize float $pointsize	テキスト の アノテーション で 使う フォント の ポイント 数 を 設定 する
GmagickDraw setfontstyle $style	フォントスタイル normalstyle italicstyle obliquestyle anystyle
GmagickDraw GmagickDraw setfontstyle	成功 し た 場合 に gmagickdraw オブジェクト を 返し ます
GmagickDraw GmagickDraw setfontstyle int $style	テキスト の アノテーション で 使う フォント の スタイル を 設定 する
GmagickDraw setfontweight $weight	フォント の ウェイト 1 0 0 - 9 0 0 の 範囲 が 有効
GmagickDraw GmagickDraw setfontweight	成功 し た 場合 に gmagickdraw オブジェクト を 返し ます
GmagickDraw GmagickDraw setfontweight int $weight	フォント の ウェイト を 設定 する
GmagickDraw setstrokecolor $color	輪郭 の 色 を 表す gmagickpixel オブジェクト
GmagickDraw GmagickDraw setstrokecolor	成功 し た 場合 に gmagickdraw オブジェクト を 返し ます
GmagickDraw GmagickDraw setstrokecolor GmagickPixel $color	オブジェクト の 輪郭 の 描画 に 使う 色 を 設定 する
GmagickDraw setstrokeopacity $stroke_opacity	不透 明度
GmagickDraw GmagickDraw setstrokeopacity	成功 し た 場合 に gmagickdraw オブジェクト を 返し ます
GmagickDraw GmagickDraw setstrokeopacity float $stroke_opacity	オブジェクト の 輪郭 の 不透 明度 を 設定 する
GmagickDraw setstrokewidth $width	線 の 幅
GmagickDraw GmagickDraw setstrokewidth	成功 し た 場合 に gmagickdraw オブジェクト を 返し ます
GmagickDraw GmagickDraw setstrokewidth float $width	オブジェクト の 輪郭 の 描画 に 使う 線 の 幅 を 設定 する
GmagickDraw settextencoding $encoding	テキスト の エンコーディング を 表す 文字列
GmagickDraw GmagickDraw settextencoding	成功 し た 場合 に gmagickdraw オブジェクト を 返し ます
GmagickDraw GmagickDraw settextencoding string $encoding	テキスト の コードセット を 設定 する
GmagickPixel construct $color	オプション で 指定 する 色文 字列
GmagickPixel string construct	成功 し た 場合 に gmagickpixel オブジェクト を 返し ます
GmagickPixel string construct string $color	gmagickpixel の コンストラクタ
GmagickPixel getcolor $as_array	true に する と 、 返り値 を 文字列 で は なく 配列 に し ます
GmagickPixel getcolor $normalize_array	色 の 値 を 正規 化 し ます
GmagickPixel mixed getcolor	各 チャネル の 値 を 配列 で 返し ます
GmagickPixel mixed getcolor bool $as_array bool $normalize_array	色 を 返す
GmagickPixel int getcolorcount	成功 し た 場合 に 色 カウント を 整数 値 で 返し ます
GmagickPixel int getcolorcount	この 色 の 色 カウント を 返す
GmagickPixel getcolorvalue $color	調べ たい チャネル
GmagickPixel float getcolorvalue	チャネル の 値 を 、 正規 化 し た 浮動 小数 点数 値 で 返し ます
GmagickPixel float getcolorvalue int $color	指定 し た 色 チャネル の 正規 化 し た 値 を 取得 する
HaruAnnotation set Border Style $width	枠線 の 幅
HaruAnnotation set Border Style $dash_on	破線 の 形式
HaruAnnotation set Border Style $dash_off	破線 の 形式
HaruAnnotation bool set Border Style	成功 し た 場合 に true を 返し ます
HaruAnnotation bool set Border Style float $width int $dash_on int $dash_off	アノテーション の 枠 の 形式 を 設定 する
HaruAnnotation set Icon $icon	アイコン の 形式
HaruAnnotation bool set Icon	成功 し た 場合 に true を 返し ます
HaruAnnotation bool set Icon int $icon	アノテーション の アイコン の 形式 を 設定 する
HaruAnnotation set Opened $opened	true は 、 アノテーション が 最初 から 開い て 表示 さ れ て いる こと を 意味 し ます
HaruAnnotation bool set Opened	成功 し た 場合 に true を 返し ます
HaruAnnotation bool set Opened bool $opened	アノテーション の 初期 状態 を 設定 する
HaruDestination bool set Fit	成功 し た 場合 に true を 返し ます
HaruDestination bool set Fit	ページ の 表示 を 、 ウィンドウ に あわせる よう 設定 する
HaruDestination bool set Fit B	成功 し た 場合 に true を 返し ます
HaruDestination bool set Fit B	ページ の 表示 を 、 ページ の バウンディングボックス を ウィンドウ に あわせる よう 設定 する
HaruDestination set Fit R $left	ページ の 左端 の 座標
HaruDestination set Fit R $top	ページ の 上端 の 座標
HaruDestination set Fit R $bottom	ページ の 下端 の 座標
HaruDestination set Fit R $right	ページ の 右端 の 座標
HaruDestination bool set Fit R	成功 し た 場合 に true を 返し ます
HaruDestination bool set Fit R float $left float $bottom float $right float $top	ページ の 表示 を 、 指定 し た 矩形 に あわせる よう 設定 する
HaruDestination set Fit V $left	ページ の 左端 の 位置
HaruDestination bool set Fit V	成功 し た 場合 に true を 返し ます
HaruDestination bool set Fit V float $left	ページ の 表示 を 、 ウィンドウ の 高さ に あわせる よう 設定 する
HaruDestination set XYZ $zoom	拡大率
HaruDestination set XYZ $top	ページ の 上端 の 位置
HaruDestination set XYZ $left	ページ の 左端 の 位置
HaruDestination bool set XYZ	成功 し た 場合 に true を 返し ます
HaruDestination bool set XYZ float $left float $top float $zoom	ページ の 表示 を 設定 する
HaruDoc - construct	新しい harudoc の インスタンス を 作成 する
HaruDoc object get Current Encoder	ドキュメント が 現在 使用 し て いる haruencoder 、 あるい は エンコーダ が まだ 設定 さ れ て い ない 場合 に false を 返し ます
HaruDoc object get Current Encoder	ドキュメント が 現在 使用 し て いる haruencoder を 取得 する
HaruDoc object get Current Page	成功 し た 場合 に harupage の インスタンス 、 現在 の ページ が 設定 さ れ て い ない 場合 に false を 返し ます
HaruDoc object get Current Page	ドキュメント の 現在 の ページ を 返す
HaruDoc get Encoder $encoding	エンコーディング 名
HaruDoc object get Encoder	指定 し た エンコーディング の haruencoder の インスタンス を 返し ます
HaruDoc object get Encoder string $encoding	指定 し た エンコーディング の haruencoder の インスタンス を 取得 する
HaruDoc get Font $encoding	使用 する エンコーディング
HaruDoc get Font $fontname	フォント の 名前
HaruDoc object get Font	指定 し た fontname および encoding の harufont の インスタンス を 返し ます
HaruDoc object get Font string $fontname string $encoding	harufont の インスタンス を 取得 する
HaruDoc get Info Attr $type	属性 の 型
HaruDoc string get Info Attr	指定 し た ドキュメント 属性 の 文字 列値 を 返し ます
HaruDoc string get Info Attr int $type	指定 し た ドキュメント 属性 の 現在 の 値 を 取得 する
HaruDoc int get Page Layout	現在 ドキュメント に 設定 さ れ て いる ページレイアウト を 返し ます
HaruDoc int get Page Layout	現在 の ページレイアウト を 取得 する
HaruDoc insert Page $page	有効 な harupage の インスタンス
HaruDoc object insert Page	新しい harupage の インスタンス を 返し ます
HaruDoc object insert Page object $page	指定 し た ページ の 直前 に 新しい ページ を 挿入 する
HaruDoc load JPEG $filename	有効 な jpeg 画像 ファイル
HaruDoc object load JPEG	新しい haruimage の インスタンス を 返し ます
HaruDoc object load JPEG string $filename	jpeg 画像 を 読み込む
HaruDoc load PNG $deferred	データ を 即時 に 読み込ま ない
HaruDoc load PNG $filename	png 画像 ファイル の ファイル 名
HaruDoc object load PNG	haruimage の インスタンス を 返し ます
HaruDoc object load PNG string $filename bool $deferred	png 画像 を 読み込み 、 haruimage の インスタンス を 返す
HaruDoc load TTC $index	コレクションファイル 内 で の フォント の インデックス
HaruDoc load TTC $embed	true を 指定 する と 、 フォント の グリフデータ を pdf ファイル に 埋め込み ます
HaruDoc load TTC $fontfile	truetype コレクションファイル
HaruDoc string load TTC	成功時 に 、 読み込ん だ フォント の 名前 を 返し ます
HaruDoc string load TTC string $fontfile int $index bool $embed	ttc ファイル から 指定 し た インデックス の フォント を 読み込む
HaruDoc load TTF $embed	true を 指定 する と 、 フォント の グリフデータ を pdf ファイル に 埋め込み ます
HaruDoc load TTF $fontfile	読み込む ttf ファイル
HaruDoc string load TTF	成功時 に 、 読み込ん だ フォント の 名前 を 返し ます
HaruDoc string load TTF string $fontfile bool $embed	ttf フォントファイル を 読み込む
HaruDoc load Type1 $pfmfile	オプション で 指定 する 、 pfa / pfb ファイル へ の パス
HaruDoc load Type1 $afmfile	afm ファイル へ の パス
HaruDoc string load Type1	成功時 に 、 読み込ん だ フォント の 名前 を 返し ます
HaruDoc string load Type1 string $afmfile string $pfmfile	type 1 フォント を 読み込む
HaruDoc bool output	成功 し た 場合 に true を 返し ます
HaruDoc bool output	ドキュメントデータ を 出力 バッファ に 書き出す
HaruDoc read From Stream $bytes	パラメータ bytes で 、 読み込む バイト 数 を 指定 し ます
HaruDoc string read From Stream	一時ストリーム の データ を 返し ます
HaruDoc string read From Stream int $bytes	データ を 一時 ストリーム から 読み込む
HaruDoc bool reset Stream	成功 し た 場合 に true を 返し ます
HaruDoc bool reset Stream	一時ストリーム を 巻き戻す
HaruDoc save $file	ドキュメント を 保存 する ファイル 名
HaruDoc bool save	成功 し た 場合 に true を 返し ます
HaruDoc bool save string $file	ドキュメント を 指定 し た ファイル に 保存 する
HaruDoc set Current Encoder $encoding	使用 する エンコーディング の 名前
HaruDoc bool set Current Encoder	成功 し た 場合 に true を 返し ます
HaruDoc bool set Current Encoder string $encoding	ドキュメント の 現在 の エンコーダ を 設定 する
HaruDoc set Open Action $destination	有効 な harudestination の インスタンス
HaruDoc bool set Open Action	成功 し た 場合 に true を 返し ます
HaruDoc bool set Open Action object $destination	ドキュメント を 開い た とき にど の ページ を 表示 する か を 定義 する
HaruDoc set Page Layout $layout	以下 の 値 を 使用 でき ます
HaruDoc bool set Page Layout	成功 し た 場合 に true を 返し ます
HaruDoc bool set Page Layout int $layout	ページ を どの よう に 表示 する か を 設定 する
HaruDoc set Page Mode $mode	以下 の 値 を 使用 でき ます
HaruDoc bool set Page Mode	成功 し た 場合 に true を 返し ます
HaruDoc bool set Page Mode int $mode	ドキュメント を どの よう に 表示 する か を 設定 する
HaruDoc set Pages Configuration $page_per_pages	pages オブジェクト が 保持 できる ページ 数
HaruDoc bool set Pages Configuration	成功 し た 場合 に true を 返し ます
HaruDoc bool set Pages Configuration int $page_per_pages	ページ 群単 位 の ページ 数 を 設定 する
HaruDoc set Permission $permission	これら の フラグ を 組み合わせ た 値と なり ます
HaruDoc bool set Permission	成功 し た 場合 に true を 返し ます
HaruDoc bool set Permission int $permission	ドキュメント の 使用 権限 を 設定 する
HaruDoc bool use CNSEncodings	成功 し た 場合 に true を 返し ます
HaruDoc bool use CNSEncodings	簡体 字中 国語 エンコーディング を 有効 に する
HaruDoc bool use CNTFonts	成功 し た 場合 に true を 返し ます
HaruDoc bool use CNTFonts	組み込み の 繁体 字中 国語 フォント を 有効 に する
HaruDoc bool use JPFonts	成功 し た 場合 に true を 返し ます
HaruDoc bool use JPFonts	組み込み の 日本語 フォント を 有効 に する
HaruDoc bool use KREncodings	成功 し た 場合 に true を 返し ます
HaruDoc bool use KREncodings	韓国 / 朝鮮語 エンコーディング を 有効 に する
HaruDoc bool use KRFonts	成功 し た 場合 に true を 返し ます
HaruDoc bool use KRFonts	組み込み の 韓国 / 朝鮮語 フォント を 有効 に する
HaruEncoder get Byte Type $index	テキスト 内 の 位置
HaruEncoder get Byte Type $text	テキスト
HaruEncoder int get Byte Type	テキスト 内 の 指定 し た 位置 の バイト の 型 を 返し ます
HaruEncoder int get Byte Type string $text int $index	テキスト 内 の バイト の 型 を 取得 する
HaruEncoder int get Type	エンコーダ の 型 を 返し ます
HaruEncoder int get Type	エンコーダ の 型 を 取得 する
HaruFont int get Cap Height	大文字 の ベースライン から の 距離 を 返し ます
HaruFont int get Cap Height	大文字 の ベースライン から の 距離 を 取得 する
HaruFont int get Descent	フォント の 垂直 descent ベースライン の 下側 の 高さ を 返し ます
HaruFont int get Descent	フォント の 垂直 descent を 取得 する
HaruFont string get Encoding Name	フォントエンコーディング の 名前 を 返し ます
HaruFont string get Encoding Name	エンコーディング 名 を 取得 する
HaruFont string get Font Name	フォント の 名前 を 返し ます
HaruFont string get Font Name	フォント 名 を 取得 する
HaruFont get Text Width $text	調べ たい テキスト
HaruFont array get Text Width	指定 し た テキスト について 、 テキスト 全体 の 幅 、 文字数 、 単語 数 および 空白 の 数 を 返し ます
HaruFont array get Text Width string $text	テキスト 全体 の 幅 、 文字数 、 単語 数 および 空白 の 数 を 取得 する
HaruFont get Unicode Width $character	文字 の コード
HaruFont int get Unicode Width	フォント の 文字 の 幅 を 返し ます
HaruFont int get Unicode Width int $character	フォント の 文字 の 幅 を 取得 する
HaruFont int get XHeight	小文字 の ベースライン から の 距離 を 返し ます
HaruFont int get XHeight	小文字 の ベースライン から の 距離 を 取得 する
HaruImage int get Bits Per Component	画像 の 各色 コンポーネント で 使用 する ビット 数 を 返し ます
HaruImage int get Bits Per Component	画像 の 各色 コンポーネント で 使用 する ビット 数 を 取得 する
HaruImage string get Color Space	画像 の 色空間 の 名前 を 返し ます
HaruImage string get Color Space	色空間 の 名前 を 取得 する
HaruImage int get Height	画像 の 高さ を 返し ます
HaruImage int get Height	画像 の 高さ を 取得 する
HaruImage array get Size	二つ の 要素 width および height を 持つ 配列 を 返し ます
HaruImage array get Size	画像 の 大きさ を 取得 する
HaruImage int get Width	画像 の 幅 を 返し ます
HaruImage int get Width	画像 の 幅 を 取得 する
HaruImage set Color Mask $rmin	赤 の 最小値
HaruImage set Color Mask $bmin	青 の 最小値
HaruImage set Color Mask $gmax	緑 の 最大 値
HaruImage set Color Mask $bmax	青 の 最大 値
HaruImage set Color Mask $rmax	赤 の 最大 値
HaruImage set Color Mask $gmin	緑 の 最小値
HaruImage bool set Color Mask	成功 し た 場合 に true を 返し ます
HaruImage bool set Color Mask int $rmin int $rmax int $gmin int $gmax int $bmin int $bmax	画像 の 色 マスク を 設定 する
HaruOutline set Opened $opened	true は 開い た 状態 、 false は 閉じ た 状態
HaruOutline bool set Opened	成功 し た 場合 に true を 返し ます
HaruOutline bool set Opened bool $opened	アウトライン の 初期 状態 を 設定 する
HaruPage bool begin Text	成功 し た 場合 に true を 返し ます
HaruPage bool begin Text	テキストオブジェクト を 開始 し 、 テキスト の 現在 位置 を 0 0 に 設定 する
HaruPage circle $ray	円 の 半径
HaruPage circle $y	中心 の 垂直 座標
HaruPage circle $x	中心 の 水平 座標
HaruPage bool circle	成功 し た 場合 に true を 返し ます
HaruPage bool circle float $x float $y float $ray	現在 の パス に 円 を 追加 する
HaruPage bool close Path	成功 し た 場合 に true を 返し ます
HaruPage bool close Path	現在 の 位置 から パス の 開始 位置 に 直線 を 追加 する
HaruPage bool concat	成功 し た 場合 に true を 返し ます
HaruPage bool concat float $a float $b float $c float $d float $x float $y	現在 の ページ の 変換 行列 と 指定 し た 行列 を 連結 する
HaruPage create Text Annotation $encoder	オプション で 指定 する haruencoder の インスタンス
HaruPage create Text Annotation $rectangle	アノテーション の 範囲 を 表す 4 つの 座標 の 配列
HaruPage create Text Annotation $text	表示 する テキスト
HaruPage object create Text Annotation	新しい haruannotation の インスタンス を 返し ます
HaruPage object create Text Annotation array $rectangle string $text object $encoder	新しい haruannotation の インスタンス を 作成 する
HaruPage curve To $y2	ベジエ 曲線 の 制御 点
HaruPage curve To $x1	ベジエ 曲線 の 制御 点
HaruPage curve To $x3	現在 位置 は ここ に 移動 し ます
HaruPage curve To $y1	ベジエ 曲線 の 制御 点
HaruPage curve To $x2	ベジエ 曲線 の 制御 点
HaruPage bool curve To	成功 し た 場合 に true を 返し ます
HaruPage bool curve To float $x1 float $y1 float $x2 float $y2 float $x3 float $y3	ベジエ 曲線 を 現在 の パス に 追加 する
HaruPage curve To2 $y2	ベジエ 曲線 の 制御 点
HaruPage curve To2 $x2	ベジエ 曲線 の 制御 点
HaruPage curve To2 $x3	現在 位置 は ここ に 移動 し ます
HaruPage bool curve To2	成功 し た 場合 に true を 返し ます
HaruPage bool curve To2 float $x2 float $y2 float $x3 float $y3	ベジエ 曲線 を 現在 の パス に 追加 する
HaruPage curve To3 $x1	ベジエ 曲線 の 制御 点
HaruPage curve To3 $y1	ベジエ 曲線 の 制御 点
HaruPage curve To3 $x3	現在 位置 は ここ に 移動 し ます
HaruPage bool curve To3	成功 し た 場合 に true を 返し ます
HaruPage bool curve To3 float $x1 float $y1 float $x3 float $y3	ベジエ 曲線 を 現在 の パス に 追加 する
HaruPage draw Image $x	画像 を 表示 する 範囲 の 左端
HaruPage draw Image $y	画像 を 表示 する 範囲 の 下端
HaruPage draw Image $image	有効 な haruimage の インスタンス
HaruPage draw Image $height	画像 の 範囲 の 高さ
HaruPage draw Image $width	画像 の 範囲 の 幅
HaruPage bool draw Image	成功 し た 場合 に true を 返し ます
HaruPage bool draw Image object $image float $x float $y float $width float $height	画像 を ページ に 表示 する
HaruPage ellipse $y	中心 の 垂直 座標
HaruPage ellipse $x	中心 の 水平 座標
HaruPage ellipse $yray	楕円 の y 方向 の 半径
HaruPage ellipse $xray	楕円 の x 方向 の 半径
HaruPage bool ellipse	成功 し た 場合 に true を 返し ます
HaruPage bool ellipse float $x float $y float $xray float $yray	楕円 を 現在 の パス に 追加 する
HaruPage bool end Path	成功 し た 場合 に true を 返し ます
HaruPage bool end Path	塗りつぶし や 描画 を 行わ ず に 現在 の パスオブジェクト を 終了 する
HaruPage bool end Text	成功 し た 場合 に true を 返し ます
HaruPage bool end Text	現在 の テキストオブジェクト を 終了 する
HaruPage bool eofill	成功 し た 場合 に true を 返し ます
HaruPage bool eofill	奇偶 規則 を 使用 し て 現在 の パス を 塗り つぶす
HaruPage fill Stroke $close_path	オプション の パラメータ です
HaruPage bool fill Stroke	成功 し た 場合 に true を 返し ます
HaruPage bool fill Stroke bool $close_path	ノンゼロワインディング 規則 を 使用 し て 現在 の パス を 塗り つぶす
HaruPage float get Char Space	現在 の 文字 間隔 を 返し ます
HaruPage float get Char Space	現在 の 文字 間隔 を 取得 する
HaruPage array get CMYKFill	現在 の 塗り つぶし 色 を 、 4 つの 要素 & quot ;c &quot ; & quot ;m &quot ; & quot ;y &quot ; および & quot ;k &quot ; から なる 配列 で 返し ます
HaruPage array get CMYKFill	現在 の 塗り つぶし 色 を 取得 する
HaruPage array get CMYKStroke	現在 の 描画 色 を 、 4 つの 要素 & quot ;c &quot ; & quot ;m &quot ; & quot ;y &quot ; および & quot ;k &quot ; から なる 配列 で 返し ます
HaruPage array get CMYKStroke	現在 の 描画 色 を 取得 する
HaruPage float get Current Font Size	現在 の フォント の サイズ を 返し ます
HaruPage float get Current Font Size	現在 の フォント の サイズ を 取得 する
HaruPage array get Current Pos	パス の 描画 用 に 使用 する 現在 位置 を 、 二つ の 要素 & quot ;x &quot ; と & quot ;y &quot ; から なる 配列 で 返し ます
HaruPage array get Current Pos	パス の 描画 用 の 現在 の 位置 を 取得 する
HaruPage array get Current Text Pos	テキスト の 印字 用 に 使用 する 現在 位置 を 、 二つ の 要素 & quot ;x &quot ; と & quot ;y &quot ; から なる 配列 で 返し ます
HaruPage array get Current Text Pos	テキスト の 印字 用 の 現在 の 位置 を 取得 する
HaruPage array get Dash	現在 の 破線 の パターン を 、 二つ の 要素 & quot ;pattern &quot ; と & quot ;phase &quot ; から なる 配列 で 返し ます
HaruPage array get Dash	現在 の 破線 の パターン を 取得 する
HaruPage int get Filling Color Space	現在 の 塗り つぶし の 色空間 を 返し ます
HaruPage int get Filling Color Space	現在 の 塗り つぶし の 色空間 を 取得 する
HaruPage float get Flatness	ページ の 平坦 度 を 返し ます
HaruPage float get Flatness	ページ の 平坦 度 を 取得 する
HaruPage int get GMode	現在 の グラフィックスモード を 返し ます
HaruPage int get GMode	現在 の グラフィックスモード を 取得 する
HaruPage float get Gray Fill	現在 の 塗り つぶし 色 を 返し ます
HaruPage float get Gray Fill	現在 の 塗り つぶし 色 を 取得 する
HaruPage float get Gray Stroke	現在 の 塗り つぶし 色 を 返し ます
HaruPage float get Gray Stroke	現在 の 描画 色 を 取得 する
HaruPage float get Height	ページ の 高さ を 返し ます
HaruPage float get Height	ページ の 高さ を 取得 する
HaruPage float get Horizontal Scaling	現在 の 水平 方向 の 拡大 率 を 返し ます
HaruPage float get Horizontal Scaling	現在 の 水平 方向 の 拡大 率 を 取得 する
HaruPage int get Line Cap	現在 の パス の 終端 の 形式 を 返し ます
HaruPage int get Line Cap	現在 の パス の 終端 の 形式 を 取得 する
HaruPage int get Line Join	現在 の パス の 角 の 形式 を 返し ます
HaruPage int get Line Join	現在 の パス の 角 の 形式 を 取得 する
HaruPage float get Miter Limit	マイターリミット の 値 を 返し ます
HaruPage float get Miter Limit	マイターリミット の 値 を 取得 する
HaruPage array get RGBFill	現在 の 塗り つぶし 色 を 、 三つ の 要素 & quot ;r &quot ;、 & quot ;g &quot ; および & quot ;b &quot ; から なる 配列 で 返し ます
HaruPage array get RGBFill	現在 の 塗り つぶし 色 を 取得 する
HaruPage array get RGBStroke	現在 の 描画 色 を 返し ます
HaruPage array get RGBStroke	現在 の 描画 色 を 取得 する
HaruPage float get Text Leading	現在 の 行間 隔 の 値 を 返し ます
HaruPage float get Text Leading	現在 の 行間 隔 の 値 を 取得 する
HaruPage float get Text Rise	現在 の テキストライズ の 値 を 返し ます
HaruPage float get Text Rise	現在 の テキストライズ の 値 を 取得 する
HaruPage get Text Width $text	調べ たい テキスト
HaruPage float get Text Width	現在 の フォントサイズ 、 文字 エンコーディング および 単語 間隔 を 使用 し て テキスト の 幅 を 返し ます
HaruPage float get Text Width string $text	現在 の フォントサイズ 、 文字 エンコーディング および 単語 間隔 を 使用 し て テキスト の 幅 を 取得 する
HaruPage array get Trans Matrix	その ページ の 現在 の 変換 行列 を 、 & quot ;a &quot ;、 & quot ;b &quot ;、 & quot ;c &quot ;、 & quot ;d &quot ;、 & quot ;x &quot ; および & quot ;y &quot ; の 6 つの 要素 から なる 配列 で 返し ます
HaruPage array get Trans Matrix	その ページ の 現在 の 変換 行列 を 取得 する
HaruPage float get Word Space	現在 の 単語 間隔 の 値 を 返し ます
HaruPage float get Word Space	現在 の 単語 間隔 の 値 を 取得 する
HaruPage bool line To	成功 し た 場合 に true を 返し ます
HaruPage bool line To float $x float $y	現在 位置 から 指定 し た 位置 まで 直線 を 描画 する
HaruPage measure Text $wordwrap	この パラメータ を true に 設定 する と 、 ワードラップ 処理 を & quot ; エミュレート & quot ; します
HaruPage measure Text $width	行 の 長さ
HaruPage measure Text $text	調べ たい テキスト
HaruPage int measure Text	指定 し た 幅 の 一行 中 に 配置 できる 文字 の バイト 長 を 返し ます
HaruPage int measure Text string $text float $width bool $wordwrap	指定 し た 幅 の 一行 中 に 配置 できる 文字 の バイト 長 を 計算 する
HaruPage move Text Pos $y	指定 し た テキスト 位置 の オフセット
HaruPage move Text Pos $set_leading	true の 場合 は 、 テキスト の リーディング が - y と なり ます
HaruPage move Text Pos $x	指定 し た テキスト 位置 の オフセット
HaruPage bool move Text Pos	成功 し た 場合 に true を 返し ます
HaruPage bool move Text Pos float $x float $y bool $set_leading	テキスト の 位置 を 、 指定 し た オフセット に 移動 する
HaruPage move To $y	新しい 開始 位置 の 座標
HaruPage move To $x	新しい 開始 位置 の 座標
HaruPage bool move To	成功 し た 場合 に true を 返し ます
HaruPage bool move To float $x float $y	新しい 描画 パス の 開始 位置 を 設定 する
HaruPage bool move To Next Line	成功 し た 場合 に true を 返し ます
HaruPage bool move To Next Line	テキスト の 位置 を 次 の 行 の 行頭 に 移動 する
HaruPage rectangle $height	矩形 の 高さ
HaruPage rectangle $y	矩形 の 下端
HaruPage rectangle $width	矩形 の 幅
HaruPage rectangle $x	矩形 の 左端
HaruPage bool rectangle	成功 し た 場合 に true を 返し ます
HaruPage bool rectangle float $x float $y float $width float $height	現在 の パス に 矩形 を 追加 する
HaruPage set Char Space $char_space	その ページ の 新しい 文字 間隔
HaruPage bool set Char Space	成功 し た 場合 に true を 返し ます
HaruPage bool set Char Space float $char_space	ページ の 文字 間隔 を 設定 する
HaruPage bool set CMYKFill	成功 し た 場合 に true を 返し ます
HaruPage bool set CMYKFill float $c float $m float $y float $k	ページ の 塗り つぶし 色 を 設定 する
HaruPage set Dash $pattern	最大 8 要素 から なる 配列
HaruPage set Dash $phase	パターン を どこ から 開始 する か
HaruPage bool set Dash	成功 し た 場合 に true を 返し ます
HaruPage bool set Dash array $pattern int $phase	ページ の 破線 パターン を 設定 する
HaruPage set Flatness $flatness	その ページ に 定義 する 平坦 度
HaruPage bool set Flatness	成功 し た 場合 に true を 返し ます
HaruPage bool set Flatness float $flatness	ページ の 平坦 度 を 設定 する
HaruPage set Font And Size $font	有効 な harufont の インスタンス
HaruPage set Font And Size $size	フォント の サイズ
HaruPage bool set Font And Size	成功 し た 場合 に true を 返し ます
HaruPage bool set Font And Size object $font float $size	ページ の フォント および フォントサイズ を 設定 する
HaruPage set Gray Fill $value	0 から 1 まで の グレイ 値
HaruPage bool set Gray Fill	成功 し た 場合 に true を 返し ます
HaruPage bool set Gray Fill float $value	ページ の 塗り つぶし 色 を 設定 する
HaruPage set Height $height	その ページ に 定義 する 高さ
HaruPage bool set Height	成功 し た 場合 に true を 返し ます
HaruPage bool set Height float $height	ページ の 高さ を 設定 する
HaruPage set Horizontal Scaling $scaling	ページ 上 で テキスト を 表示 する 際 の 水平 方向 の 拡大 率
HaruPage bool set Horizontal Scaling	成功 し た 場合 に true を 返し ます
HaruPage bool set Horizontal Scaling float $scaling	ページ の 横方 向 の 拡大 率 を 設定 する
HaruPage set Line Width $width	その ページ に 定義 する 線幅
HaruPage bool set Line Width	成功 し た 場合 に true を 返し ます
HaruPage bool set Line Width float $width	ページ の 線幅 を 設定 する
HaruPage set Miter Limit $limit	ページ の マイターリミット の 現在 値 に 定義 する 値
HaruPage bool set Miter Limit	成功 し た 場合 に true を 返し ます
HaruPage bool set Miter Limit float $limit	ページ の マイターリミット の 現在 値 を 設定 する
HaruPage bool set RGBFill	成功 し た 場合 に true を 返し ます
HaruPage bool set RGBFill float $r float $g float $b	ページ の 塗り つぶし 色 を 設定 する
HaruPage set Size $direction	次 のい ずれ か の 値 で なけれ ば なり ませ ん
HaruPage set Size $size	次 のい ずれ か の 値 で なけれ ば なり ませ ん
HaruPage bool set Size	成功 し た 場合 に true を 返し ます
HaruPage bool set Size int $size int $direction	ページ の サイズ および 方向 を 設定 する
HaruPage set Slide Show $trans_time	ページ 移動 処理 を 行う 秒数
HaruPage set Slide Show $type	以下 のい ずれ か の 値 で なけれ ば なり ませ ん
HaruPage set Slide Show $disp_time	ページ の 表示 時間 を 表す 秒数
HaruPage bool set Slide Show	成功 し た 場合 に true を 返し ます
HaruPage bool set Slide Show int $type float $disp_time float $trans_time	ページ の 移動 方式 を 設定 する
HaruPage set Text Matrix $d	高さ の 乗数
HaruPage set Text Matrix $y	テキスト の 垂直 方向 の 位置
HaruPage set Text Matrix $x	テキスト の 水平 方向 の 位置
HaruPage set Text Matrix $a	幅 の 乗数
HaruPage set Text Matrix $b	垂直方向 の 傾き ラジアン
HaruPage set Text Matrix $c	水平方向 の 傾き ラジアン
HaruPage bool set Text Matrix	成功 し た 場合 に true を 返し ます
HaruPage bool set Text Matrix float $a float $b float $c float $d float $x float $y	その ページ の 現在 の テキスト 変換 行列 を 設定 する
HaruPage set Text Rendering Mode $mode	以下 のい ずれ か の 値 で なけれ ば なり ませ ん
HaruPage bool set Text Rendering Mode	成功 し た 場合 に true を 返し ます
HaruPage bool set Text Rendering Mode int $mode	その ページ の 現在 の テキスト の レンダリングモード を 設定 する
HaruPage set Text Rise $rise	現在 の テキストライズ に 設定 する 値
HaruPage bool set Text Rise	成功 し た 場合 に true を 返し ます
HaruPage bool set Text Rise float $rise	現在 の テキストライズ の 値 を 設定 する
HaruPage set Width $width	ページ の 幅 に 設定 する 値
HaruPage bool set Width	成功 し た 場合 に true を 返し ます
HaruPage bool set Width float $width	ページ の 幅 を 設定 する
HaruPage set Word Space $word_space	ページ の 単語 間隔 に 設定 する 値
HaruPage bool set Word Space	成功 し た 場合 に true を 返し ます
HaruPage bool set Word Space float $word_space	ページ の 単語 間隔 を 設定 する
HaruPage stroke $close_path	true の 場合 は 現在 の パス を 閉じ ます
HaruPage bool stroke	成功 し た 場合 に true を 返し ます
HaruPage bool stroke bool $close_path	現在 の パス を 描画 する
HaruPage bool text Out	成功 し た 場合 に true を 返し ます
HaruPage bool text Out float $x float $y string $text	テキスト を 指定 し た 位置 に 表示 する
HaruPage text Rect $bottom	テキスト の 範囲 の 下端
HaruPage text Rect $right	テキスト の 範囲 の 右端
HaruPage text Rect $left	テキスト の 範囲 の 左端
HaruPage text Rect $align	テキスト の 配置
HaruPage text Rect $top	テキスト の 範囲 の 上端
HaruPage text Rect $text	表示 さ せ たい テキスト
HaruPage bool text Rect	成功 し た 場合 に true を 返し ます
HaruPage bool text Rect float $left float $top float $right float $bottom string $text int $align	指定 し た 領域 内 に テキスト を 表示 する
Imagick adaptive Sharpen Image $radius	ガウス 分布 の 半径
Imagick adaptive Sharpen Image $channel	その モード で 有効 な チャネル 定数 を 指定 し ます
Imagick adaptive Sharpen Image $sigma	ガウス 分布 の 標準 偏差 ピクセル 単位
Imagick bool adaptive Sharpen Image	成功 し た 場合 に true を 返し ます
Imagick bool adaptive Sharpen Image float $radius float $sigma int $channel	順応 し て 画像 を シャープ に する
Imagick adaptive Threshold Image $width	周辺 の 幅
Imagick adaptive Threshold Image $height	周辺 の 高さ
Imagick adaptive Threshold Image $offset	平均 オフセット
Imagick bool adaptive Threshold Image	成功 し た 場合 に true を 返し ます
Imagick bool adaptive Threshold Image int $width int $height int $offset	輝度 の 範囲 に も とづい て 各 ピクセル の 閾値 を 選択 する
Imagick add Image $source	元 の imagick オブジェクト
Imagick bool add Image	成功 し た 場合 に true を 返し ます
Imagick bool add Image Imagick $source	新しい 画像 を imagick オブジェクト の 画像 リスト に 追加 する
Imagick annotate Image $draw_settings	テキスト 描画 設定 を 含む imagickdraw オブジェクト
Imagick annotate Image $angle	テキスト を 書き出す 角度
Imagick annotate Image $x	テキスト の 左端 の 水平 オフセット を あらわす ピクセル 数
Imagick annotate Image $y	テキスト の ベースライン の 垂直 オフセット を あらわす ピクセル 数
Imagick annotate Image $text	描画 する テキスト
Imagick bool annotate Image	成功 し た 場合 に true を 返し ます
Imagick bool annotate Image ImagickDraw $draw_settings float $x float $y float $angle string $text	画像 に テキスト による 注記 を 加える
Imagick append Images $stack	画像 を 垂直 方向 に 積む か どう か
Imagick Imagick append Images	成功 し た 場合 に imagick インスタンス を 返し ます
Imagick Imagick append Images bool $stack	画像群 を 追加 する
Imagick Imagick average Images	成功 し た 場合 に imagick インスタンス を 返し ます
Imagick Imagick average Images	画像群 を 平均 化 する
Imagick blur Image $sigma	標準 偏差
Imagick blur Image $channel	チャネル 定数
Imagick blur Image $radius	にじみ の 半径
Imagick bool blur Image	成功 し た 場合 に true を 返し ます
Imagick bool blur Image float $radius float $sigma int $channel	blur にじみ フィルタ を 画像 に 追加 する
Imagick border Image $height	枠線 の 高さ
Imagick border Image $width	枠線 の 幅
Imagick border Image $bordercolor	枠線 の 色 を 含む imagickpixel オブジェクト あるい は 文字列
Imagick bool border Image	成功 し た 場合 に true を 返し ます
Imagick bool border Image mixed $bordercolor int $width int $height	画像 の 周り を 枠線 で 囲む
Imagick charcoal Image $radius	ガウス 分布 の 半径
Imagick charcoal Image $sigma	ガウス 分布 の 標準 偏差 ピクセル 単位
Imagick bool charcoal Image	成功 し た 場合 に true を 返し ます
Imagick bool charcoal Image float $radius float $sigma	木炭画 を シミュレート する
Imagick chop Image $y	切り取る 範囲 の y 座標
Imagick chop Image $height	切り取る 範囲 の 高さ
Imagick chop Image $width	切り取る 範囲 の 幅
Imagick chop Image $x	切り取る 範囲 の x 座標
Imagick bool chop Image	成功 し た 場合 に true を 返し ます
Imagick bool chop Image int $width int $height int $x int $y	画像 の 一部 を 取り除き 、 切り 詰める
Imagick bool clear	成功 し た 場合 に true を 返し ます
Imagick bool clear	imagick オブジェクト に 関連 付け られ たすべて の リソース を クリア する
Imagick bool clip Image	成功 し た 場合 に true を 返し ます
Imagick bool clip Image	8bim プロファイル の 最初 の パス に そっ て 切り 取る
Imagick clut Image $lookup_table	色ルックアップテーブル を 含む imagick オブジェクト
Imagick clut Image $channel	チャネルタイプ 定数
Imagick bool clut Image	成功 し た 場合 に true を 返し ます
Imagick bool clut Image Imagick $lookup_table float $channel	画像 の 色 を 置き 換える
Imagick Imagick coalesce Images	成功 し た 場合 に 新規 imagick オブジェクト を 返し ます
Imagick Imagick coalesce Images	複数 の 画像 を 合成 する
Imagick color Floodfill Image $fill	塗りつぶし 色 を 表す imagickpixel オブジェクト
Imagick color Floodfill Image $bordercolor	枠線 の 色 を 表す imagickpixel オブジェクト
Imagick color Floodfill Image $fuzz	fuzz の 量
Imagick color Floodfill Image $x	開始 位置 の x 座標
Imagick color Floodfill Image $y	開始 位置 の y 座標
Imagick bool color Floodfill Image	成功 し た 場合 に true を 返し ます
Imagick bool color Floodfill Image mixed $fill float $fuzz mixed $bordercolor int $x int $y	対象 に マッチ する 任意 の 点 の 色 の 値 を 変更 する
Imagick colorize Image $opacity	不透 明度 を 表す imagickpixel オブジェクト あるい は 文字列
Imagick colorize Image $colorize	色 を 表す imagickpixel オブジェクト あるい は 文字列
Imagick bool colorize Image	成功 し た 場合 に true を 返し ます
Imagick bool colorize Image mixed $colorize mixed $opacity	塗りつぶし 色 と 画像 を 混合 する
Imagick compare Image Layers $method	レイヤメソッド 定数 のいずれ か
Imagick Imagick compare Image Layers	成功 し た 場合 に true を 返し ます
Imagick Imagick compare Image Layers int $method	複数 の 画像 の 中 で 最大 の 境界 範囲 を 返す
Imagick compare Images $metric	メトリック 定数 を 指定 し ます
Imagick compare Images $compare	比較 し たい 画像
Imagick array compare Images	成功 し た 場合 に true を 返し ます
Imagick array compare Images Imagick $compare int $metric	ある 画像 を 再構 築 さ れ た 画像 と 比較 する
Imagick construct $files	読み込み たい 画像 へ の パス 、 あるい は 複数 の パス の 配列
Imagick mixed construct	成功 し た 場合 に 新しい imagick オブジェクト を 返し ます
Imagick mixed construct mixed $files	imagick の コンストラクタ
Imagick contrast Image $sharpen	シャープ 値
Imagick bool contrast Image	成功 し た 場合 に true を 返し ます
Imagick bool contrast Image bool $sharpen	画像 の コントラスト を 変更 する
Imagick crop Image $x	抽出 する 領域 の 左上 の x 座標
Imagick crop Image $height	抽出 する 高さ
Imagick crop Image $y	抽出 する 領域 の 左上 の y 座標
Imagick crop Image $width	抽出 する 幅
Imagick bool crop Image	成功 し た 場合 に true を 返し ます
Imagick bool crop Image int $width int $height int $x int $y	画像 の 一部 を 抽出 する
Imagick crop Thumbnail Image $height	サムネイル の 高さ
Imagick crop Thumbnail Image $width	サムネイル の 幅
Imagick bool crop Thumbnail Image	成功 し た 場合 に true を 返し ます
Imagick bool crop Thumbnail Image int $width int $height	切り取っ て サムネイル を 作成 する
Imagick Imagick current	成功 し た 場合 に 自分 自身 を 返し ます
Imagick Imagick current	現在 の imagick オブジェクト へ の 参照 を 返す
Imagick cycle Colormap Image $displace	カラーマップ を 移動 さ せる 量
Imagick bool cycle Colormap Image	成功 し た 場合 に true を 返し ます
Imagick bool cycle Colormap Image int $displace	画像 の カラーマップ を 移動 する
Imagick decipher Image $passphrase	パスフレーズ
Imagick bool decipher Image	成功 し た 場合 に true を 返し ます
Imagick bool decipher Image string $passphrase	画像 を 復号 する
Imagick delete Image Artifact $artifact	削除 し たい アーチファクト の 名前
Imagick bool delete Image Artifact	成功 し た 場合 に true を 返し ます
Imagick bool delete Image Artifact string $artifact	画像 の アーチファクト を 削除 する
Imagick bool destroy	成功 し た 場合 に true を 返し ます
Imagick bool destroy	imagick オブジェクト を 破棄 する
Imagick display Image $servername	x サーバー の 名前
Imagick bool display Image	成功 し た 場合 に true を 返し ます
Imagick bool display Image string $servername	画像 を 表示 する
Imagick distort Image $bestfit	元 画像 の サイズ を 変更 する
Imagick distort Image $arguments	歪め 方式 の 引数
Imagick distort Image $method	画像 の 歪め 方式
Imagick bool distort Image	成功 し た 場合 に true を 返し ます
Imagick bool distort Image int $method array $arguments bool $bestfit	さまざまな 方式 で 画像 を 歪める
Imagick draw Image $draw	画像 を レンダリング する 描画 操作
Imagick bool draw Image	成功 し た 場合 に true を 返し ます
Imagick bool draw Image ImagickDraw $draw	現在 の 画像 上 の imagickdraw オブジェクト を レンダリング する
Imagick emboss Image $sigma	効果 の シグマ
Imagick emboss Image $radius	効果 の 半径
Imagick bool emboss Image	成功 し た 場合 に true を 返し ます
Imagick bool emboss Image float $radius float $sigma	グレースケール 画像 に 三次 元効 果 を 施し て 返す
Imagick encipher Image $passphrase	パスフレーズ
Imagick bool encipher Image	成功 し た 場合 に true を 返し ます
Imagick bool encipher Image string $passphrase	画像 を 暗号 化 する
Imagick bool enhance Image	成功 し た 場合 に true を 返し ます
Imagick bool enhance Image	ノイジー な 画像 の 品質 を 向上 さ せる
Imagick bool equalize Image	成功 し た 場合 に true を 返し ます
Imagick bool equalize Image	画像 ヒストグラム を 均等 化 する
Imagick evaluate Image $channel	チャネルモード に 対応 し た チャネル 定数 を 指定 し ます
Imagick evaluate Image $op	評価 演算子
Imagick evaluate Image $constant	演算子 の 値
Imagick bool evaluate Image	成功 し た 場合 に true を 返し ます
Imagick bool evaluate Image int $op float $constant int $channel	式 を 画像 に 適用 する
Imagick Imagick flatten Images	成功 し た 場合 に true を 返し ます
Imagick Imagick flatten Images	画像 シーケンス を マージ する
Imagick bool flip Image	成功 し た 場合 に true を 返し ます
Imagick bool flip Image	垂直 方向 に 反転 し た 画像 を 作成 する
Imagick bool flop Image	成功 し た 場合 に true を 返し ます
Imagick bool flop Image	水平 方向 に 反転 し た 画像 を 作成 する
Imagick function Image $function	関数 定数 の 一覧 を 参照く ださい
Imagick function Image $arguments	この 関数 に 渡す 引数 の 配列
Imagick bool function Image	成功 し た 場合 に true を 返し ます
Imagick bool function Image int $function array $arguments int $channel	画像 に 関数 を 適用 する
Imagick fx Image $expression	式
Imagick fx Image $channel	チャネルモード に 対応 し た チャネル 定数 を 指定 し ます
Imagick Imagick fx Image	成功 し た 場合 に true を 返し ます
Imagick Imagick fx Image string $expression int $channel	式 を 画像 の 各 ピクセル に 適用 する
Imagick gaussian Blur Image $channel	チャネルモード に 対応 し た チャネル 定数 を 指定 し ます
Imagick gaussian Blur Image $sigma	ガウス 演算 の 標準 偏差
Imagick gaussian Blur Image $radius	ガウス 演算 の 半径
Imagick bool gaussian Blur Image	成功 し た 場合 に true を 返し ます
Imagick bool gaussian Blur Image float $radius float $sigma int $channel	画像 を ぼかす
Imagick string get Filename	成功 し た 場合 に 文字列 を 返し ます
Imagick string get Filename	画像 シーケンス に 関連 付け られ た ファイル 名 を 取得 する
Imagick string get Format	画像 フォーマット を 返し ます
Imagick string get Format	imagick オブジェクト の フォーマット を 取得 する
Imagick int get Gravity	gravity プロパティ を 返し ます
Imagick int get Gravity	gravity を 取得 する
Imagick string get Home URL	imagemagick の ホームページ へ の リンク を 返し ます
Imagick string get Home URL	imagemagick の ホーム url を 返す
Imagick Imagick get Image	現在 の 画像 シーケンス を 使用 し た 新しい imagick オブジェクト を 返し ます
Imagick Imagick get Image	新しい imagick オブジェクト を 返す
Imagick int get Image Alpha Channel	現在 の アルファチャネル 値 を 表す 定数 を 返し ます
Imagick int get Image Alpha Channel	画像 の アルファチャネル を 取得 する
Imagick ImagickPixel get Image Background Color	画像 の 背景 色 を 設定 し た imagickpixel を 返し ます
Imagick ImagickPixel get Image Background Color	画像 の 背景 色 を 返す
Imagick string get Image Blob	画像 を 含む 文字 列 を 返し ます
Imagick string get Image Blob	画像 シーケンス を blob で 返す
Imagick array get Image Blue Primary	&quot ;x &quot ; 座標 および & quot ;y &quot ; 座標 を 含む 配列 を 返し ます
Imagick array get Image Blue Primary	青 が 一番 強い 点 を 返す
Imagick ImagickPixel get Image Border Color	成功 し た 場合 に true を 返し ます
Imagick ImagickPixel get Image Border Color	画像 の 前景 色 を 返す
Imagick get Image Channel Distortion $reference	比較 する imagick オブジェクト
Imagick get Image Channel Distortion $channel	チャネルモード に 対応 し た チャネル 定数 を 指定 し ます
Imagick get Image Channel Distortion $metric	メトリック 型定 数 のいずれ か
Imagick float get Image Channel Distortion	成功 し た 場合 に true を 返し ます
Imagick float get Image Channel Distortion Imagick $reference int $channel int $metric	画像 の チャネル を 再構 築 し た 画像 と 比較 する
Imagick get Image Channel Extrema $channel	チャネルモード に 対応 し た チャネル 定数 を 指定 し ます
Imagick array get Image Channel Extrema	成功 し た 場合 に true を 返し ます
Imagick array get Image Channel Extrema int $channel	ひとつ あるい は 複数 の 画像 チャネル の 極値 を 取得 する
Imagick get Image Channel Kurtosis $channel	その モード で 有効 な チャネル 定数 を 指定 し ます
Imagick array get Image Channel Kurtosis	kurtosis と skewness を 要素 に 持つ 配列 を 返し ます
Imagick array get Image Channel Kurtosis int $channel	getimagechannelkurtosis
Imagick get Image Channel Range $channel	その モード で 有効 な チャネル 定数 を 指定 し ます
Imagick array get Image Channel Range	チャネル の minima および maxima の 値 を 含む 配列 を 返し ます
Imagick array get Image Channel Range int $channel	チャネル の 範囲 を 取得 する
Imagick array get Image Channel Statistics	成功 し た 場合 に true を 返し ます
Imagick array get Image Channel Statistics	画像 の 各 チャネル の 統計 情報 を 返す
Imagick Imagick get Image Clip Mask	画像 の クリップマスク を 含む imagick オブジェクト を 返し ます
Imagick Imagick get Image Clip Mask	画像 の クリップマスク を 取得 する
Imagick int get Image Colorspace	成功 し た 場合 に true を 返し ます
Imagick int get Image Colorspace	画像 の 色空間 を 取得 する
Imagick int get Image Compose	成功 し た 場合 に true を 返し ます
Imagick int get Image Compose	画像 の 合成 演算子 を 返す
Imagick int get Image Compression	圧縮 形式 を 表す 定数 を 返し ます
Imagick int get Image Compression	現在 の 画像 の 圧縮 形式 を 取得 する
Imagick int get Image Compression Quality	画像 の 圧縮 品質 を 表す 整数 値 を 返し ます
Imagick int get Image Compression Quality	現在 の 画像 の 圧縮 品質 を 取得 する
Imagick int get Image Delay	画像 の 遅延 を 返し ます
Imagick int get Image Delay	画像 の 遅延 を 取得 する
Imagick get Image Distortion $reference	比較 する imagick オブジェクト
Imagick get Image Distortion $metric	メトリック 型定 数 のいずれ か
Imagick float get Image Distortion	その 画像 で 使用 する 歪み 係数 あるい は その 推測 値 を 返し ます
Imagick float get Image Distortion MagickWand $reference int $metric	ある 画像 と 再構 築 し た 画像 を 比較 する
Imagick string get Image Filename	画像 の ファイル 名 を 文字列 で 返し ます
Imagick string get Image Filename	シーケンス 内 の 特定 の 画像 の ファイル 名 を 返す
Imagick string get Image Format	成功 し た 場合 は 画像 の フォーマット を 文字列 で 返し ます
Imagick string get Image Format	シーケンス 内 の 特定 の 画像 の フォーマット を 返す
Imagick array get Image Geometry	画像 の 幅 と 高さ を 表す 配列 を 返し ます
Imagick array get Image Geometry	幅 と 高さ を 連想 配列 で 取得 する
Imagick array get Image Green Primary	成功 し た 場合 に & quot ;x &quot ; および & quot ;y &quot ; という キー を 持つ 配列 を 返し ます
Imagick array get Image Green Primary	緑 が 一番 強い 点 を 返す
Imagick int get Image Height	画像 の 高さ を ピクセル 数 で 返し ます
Imagick int get Image Height	画像 の 高さ を 返す
Imagick array get Image Histogram	画像 の ヒストグラム を imagickpixel オブジェクト の 配列 で 返し ます
Imagick array get Image Histogram	画像 の ヒストグラム を 取得 する
Imagick int get Image Index	スタック 内 の 画像 の インデックス を 表す 整数 値 を 返し ます
Imagick int get Image Index	現在 アクティブ な 画像 の インデックス を 取得 する
Imagick int get Image Interlace Scheme	成功 し た 場合 に 画像 の インターレース 手法 を 返し ます
Imagick int get Image Interlace Scheme	画像 の インターレース 手法 を 取得 する
Imagick int get Image Interpolate Method	成功 し た 場合 に 補間 方式 を 返し ます
Imagick int get Image Interpolate Method	画像 の 補間 方式 を 返す
Imagick int get Image Iterations	画像 の 反復 を 表す 整数 値 を 返し ます
Imagick int get Image Iterations	画像 の 反復 を 取得 する
Imagick int get Image Length	現在 の 画像 の サイズ を 整数 値 で 返し ます
Imagick int get Image Length	画像 の 長さ を バイト 数 で 取得 する
Imagick string get Image Magick License	imagemagick の ライセンス を 文字列 で 返し ます
Imagick string get Image Magick License	imagemagick の ライセンス を 文字列 で 返す
Imagick bool get Image Matte	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
Imagick bool get Image Matte	画像 が マットチャネル を 持っ て いる かど う か を 返す
Imagick ImagickPixel get Image Matte Color	成功 し た 場合 に imagickpixel オブジェクト を 返し ます
Imagick ImagickPixel get Image Matte Color	画像 の マット 色 を 返す
Imagick int get Image Orientation	成功 し た 場合 に 整数 値 を 返し ます
Imagick int get Image Orientation	画像 の 方向 を 取得 する
Imagick get Image Profiles $only_names	プロファイル 名 のみ を 返す かどう か
Imagick get Image Profiles $pattern	プロファイル 名 の パターン
Imagick array get Image Profiles	画像 の プロファイル あるい は プロファイル 名 を 含む 連想 配列 を 返し ます
Imagick array get Image Profiles string $pattern bool $only_names	画像 プロファイル を 返す
Imagick get Image Properties $pattern	プロパティ 名 の パターン
Imagick get Image Properties $only_names	プロパティ 名 のみ を 返す かどう か
Imagick array get Image Properties	画像 の プロパティ あるい は プロパティ 名 を 含む 連想 配列 を 返し ます
Imagick array get Image Properties string $pattern bool $only_names	画像 の プロパティ を 返す
Imagick get Image Property $name	プロパティ の 名前 たとえ ば exif :datetime
Imagick string get Image Property	画像 の プロパティ を 含む 文字 列 を 返し ます
Imagick string get Image Property string $name	指定 し た 名前 の 画像 の プロパティ を 返す
Imagick array get Image Red Primary	赤 が 一番 強い 点 を & quot ;x &quot ; および & quot ;y &quot ; という キー を 持つ 配列 で 返し ます
Imagick array get Image Red Primary	赤 が 一番 強い 点 を 返す
Imagick get Image Region $y	抽出 する 範囲 の 左上 の y 座標
Imagick get Image Region $height	抽出 する 範囲 の 高さ
Imagick get Image Region $x	抽出 する 範囲 の 左上 の x 座標
Imagick get Image Region $width	抽出 する 範囲 の 幅
Imagick Imagick get Image Region	画像 の 一部 を 抽出 し 、 新しい wand として 返し ます
Imagick Imagick get Image Region int $width int $height int $x int $y	画像 の 一部 を 抽出 する
Imagick int get Image Rendering Intent	画像 の レンダリング 方向 を 返し ます
Imagick int get Image Rendering Intent	画像 の レンダリング 方向 を 取得 する
Imagick array get Image Resolution	解像度 を 配列 で 返し ます
Imagick array get Image Resolution	画像 の x 方向 と y 方向 の 解像 度 を 取得 する
Imagick string get Images Blob	画像 を 文字列 で 返し ます
Imagick string get Images Blob	すべて の 画像 シーケンス を blob で 返す
Imagick int get Image Scene	画像 の シーン を 返し ます
Imagick int get Image Scene	画像 の シーン を 取得 する
Imagick string get Image Signature	その ファイル の sha - 2 5 6 ハッシュ を 文字列 で 返し ます
Imagick string get Image Signature	sha - 2 5 6 メッセージダイジェスト を 生成 する
Imagick float get Image Total Ink Density	画像 の 総 インク 密度 を 返し ます
Imagick float get Image Total Ink Density	画像 の 総 インク 密度 を 取得 する
Imagick int get Image Type	画像 の 型 を 返し ます
Imagick int get Image Type	画像 の 型 を 取得 する
Imagick int get Image Virtual Pixel Method	成功 し た 場合 に 仮想 ピクセルメソッド を 返し ます
Imagick int get Image Virtual Pixel Method	仮想 ピクセルメソッド を 取得 する
Imagick array get Image White Point	色度 が 白い点 を 返し ます
Imagick array get Image White Point	色度 が 白い点 を 返す
Imagick int get Image Width	画像 の 幅 を 返し ます
Imagick int get Image Width	画像 の 幅 を 返す
Imagick int get Number Images	imagick オブジェクト に 関連 付け られ て いる 画像 の 数 を 返し ます
Imagick int get Number Images	オブジェクト 内 の 画像 の 数 を 返す
Imagick get Option $key	オプション の 名前
Imagick string get Option	指定 し た キー に 対応 する 値 を 返し ます
Imagick string get Option string $key	指定 し た キー に 対応 する 値 を 返す
Imagick string get Package Name	imagemagick パッケージ 名 を 文字列 で 返し ます
Imagick string get Package Name	imagemagick パッケージ 名 を 返す
Imagick array get Page	imagick オブジェクト に 関連 付け られ た ページ の ジオメトリ を 返し ます
Imagick array get Page	ページ の ジオメトリ を 返す
Imagick ImagickPixelIterator get Pixel Iterator	成功 し た 場合 に imagickpixeliterator を 返し ます
Imagick ImagickPixelIterator get Pixel Iterator	magickpixeliterator を 返す
Imagick get Pixel Region Iterator $y	範囲 の y 座標
Imagick get Pixel Region Iterator $rows	範囲 の 高さ
Imagick get Pixel Region Iterator $x	範囲 の x 座標
Imagick get Pixel Region Iterator $columns	範囲 の 幅
Imagick ImagickPixelIterator get Pixel Region Iterator	画像 セクション の imagickpixeliterator を 返し ます
Imagick ImagickPixelIterator get Pixel Region Iterator int $x int $y int $columns int $rows	画像 セクション の imagickpixeliterator を 取得 する
Imagick array get Quantum Depth	imagick quantum depth を 文字列 で 返し ます
Imagick array get Quantum Depth	quantum depth を 取得 する
Imagick array get Quantum Range	quantum range を 連想 配列 で 返し ます
Imagick array get Quantum Range	imagick quantum range を 返す
Imagick string get Release Date	imagemagick の リリース 日 を 文字列 で 返し ます
Imagick string get Release Date	imagemagick の リリース 日 を 返す
Imagick get Resource $type	リソース 型定 数 の 一覧 を 参照く ださい
Imagick int get Resource	指定 し た リソース の メモリ 使用 状況 を メガバイト 単位 で 返し ます
Imagick int get Resource int $type	指定 し た リソース の メモリ 使用 状況 を 返す
Imagick array get Version	imagemagick api の バージョン を 文字 列 と 数値 で 返し ます
Imagick array get Version	imagemagick api の バージョン を 返す
Imagick bool has Next Image	リスト 内 で ひとつ 先 に 進ん だ とき にまだ オブジェクト が 画像 を 保持 し て いれ ば true 、 し て い なけれ ば false を 返し ます
Imagick bool has Next Image	オブジェクト が 次 の 画像 を 保持 し て いる かど う か を 調べる
Imagick bool has Previous Image	リスト 内 で 逆方 向 に ひとつ 進ん だ とき にまだ オブジェクト が 画像 を 保持 し て いれ ば true 、 し て い なけれ ば false を 返し ます
Imagick bool has Previous Image	オブジェクト が 前 の 画像 を 保持 し て いる かど う か を 調べる
Imagick implode Image $radius	内破 処理 の 半径
Imagick bool implode Image	成功 し た 場合 に true を 返し ます
Imagick bool implode Image float $radius	新しい 画像 を コピー として 作成 する
Imagick import Image Pixels $storage	ピクセル の 格納 方式
Imagick import Image Pixels $pixels	ピクセル の 配列
Imagick import Image Pixels $map	ピクセル の 並び順 を 表す 文字列
Imagick import Image Pixels $width	画像 の 幅
Imagick import Image Pixels $y	画像 の y 位置
Imagick import Image Pixels $height	画像 の 高さ
Imagick import Image Pixels $x	画像 の x 位置
Imagick bool import Image Pixels	成功 し た 場合 に true を 返し ます
Imagick bool import Image Pixels int $x int $y int $width int $height string $map int $storage array $pixels	画像 の ピクセル を インポート する
Imagick label Image $label	追加 する ラベル
Imagick bool label Image	成功 し た 場合 に true を 返し ます
Imagick bool label Image string $label	ラベル を 画像 に 追加 する
Imagick level Image $channel	チャネルモード に 対応 し た チャネル 定数 を 指定 し ます
Imagick level Image $blackPoint	画像 の 黒 の 点
Imagick level Image $gamma	ガンマ 値
Imagick level Image $whitePoint	画像 の 白 の 点
Imagick bool level Image	成功 し た 場合 に true を 返し ます
Imagick bool level Image float $blackPoint float $gamma float $whitePoint int $channel	画像 の レベル を 調節 する
Imagick linear Stretch Image $blackPoint	画像 の 黒 の 点
Imagick linear Stretch Image $whitePoint	画像 の 白 の 点
Imagick bool linear Stretch Image	成功 し た 場合 に true を 返し ます
Imagick bool linear Stretch Image float $blackPoint float $whitePoint	画像 の 輝度 を 引き伸ば し て 飽和 さ せる
Imagick bool magnify Image	成功 し た 場合 に true を 返し ます
Imagick bool magnify Image	画像 を 2 倍 に 比例 拡大 する
Imagick merge Image Layers $layer_method	imagick :: layermethod _* 定数 のい ずれ か
Imagick Imagick merge Image Layers	マージ し た 画像 を 含む imagick オブジェクト を 返し ます
Imagick Imagick merge Image Layers int $layer_method	画像 の レイヤー を マージ する
Imagick bool minify Image	成功 し た 場合 に true を 返し ます
Imagick bool minify Image	画像 を その 半分 の サイズ に 比例 縮小 する
Imagick bool modulate Image	成功 し た 場合 に true を 返し ます
Imagick bool modulate Image float $brightness float $saturation float $hue	明度 、 飽和 度 、 色相 を 制御 する
Imagick montage Image $frame	画像 を 枠線 で 囲み ます 例 1 5 x 1 5 + 3 + 3
Imagick montage Image $draw	フォント 名 、 サイズ 、 色 を この オブジェクト から 取得 し ます
Imagick montage Image $thumbnail_geometry	各 サムネイル の 画像 サイズ と 枠線 の サイズ 例 1 2 0 x 1 2 0 + 4 + 3 & gt ;
Imagick montage Image $mode	サムネイル の フレームモード
Imagick montage Image $tile_geometry	行単位 、 ページ 単位 の タイル 数 例 6x 4 + 0 + 0
Imagick Imagick montage Image	成功 し た 場合 に true を 返し ます
Imagick Imagick montage Image ImagickDraw $draw string $tile_geometry string $thumbnail_geometry int $mode string $frame	合成 画像 を 作成 する
Imagick morph Images $number_frames	生成 する 中間 画像 の 数
Imagick Imagick morph Images	この メソッド は 、 成功 し た 場合 に 新しい imagick オブジェクト を 返し ます
Imagick Imagick morph Images int $number_frames	複数 の 画像 を モーフィング する
Imagick Imagick mosaic Images	成功 し た 場合 に true を 返し ます
Imagick Imagick mosaic Images	画像 から モザイク を 作成 する
Imagick motion Blur Image $angle	この 角度 で 効果 を 適用 し ます
Imagick motion Blur Image $channel	その チャンネルモード で 使用 可能 な 任意 の チャンネル 定数 を 指定 し ます
Imagick motion Blur Image $sigma	ガウス 演算 の 標準 偏差
Imagick motion Blur Image $radius	ガウス 演算 の 半径
Imagick bool motion Blur Image	成功 し た 場合 に true を 返し ます
Imagick bool motion Blur Image float $radius float $sigma float $angle int $channel	モーションブラー を シミュレート する
Imagick new Image $cols	新しい 画像 の カラム 数
Imagick new Image $format	画像 フォーマット
Imagick new Image $background	この 画像 で 使用 する 背景 色
Imagick new Image $rows	新しい 画像 の 行数
Imagick bool new Image	成功 し た 場合 に true を 返し ます
Imagick bool new Image int $cols int $rows mixed $background string $format	新しい 画像 を 作成 する
Imagick bool next Image	成功 し た 場合 に true を 返し ます
Imagick bool next Image	次 の 画像 に 移動 する
Imagick normalize Image $channel	チャネルモード に 対応 し た チャネル 定数 を 指定 し ます
Imagick bool normalize Image	成功 し た 場合 に true を 返し ます
Imagick bool normalize Image int $channel	カラー 画像 の コントラスト を 強調 する
Imagick oil Paint Image $radius	近傍円 の 半径
Imagick bool oil Paint Image	成功 し た 場合 に true を 返し ます
Imagick bool oil Paint Image float $radius	油絵 を シミュレート する
Imagick opaque Paint Image $invert	true の 場合 は 、 対象 の 色 に マッチ し ない ピクセル を 変更 し ます
Imagick opaque Paint Image $fuzz	あいまい さ を あらわす 量
Imagick opaque Paint Image $target	変更 し たい 色 を あらわす imagickpixel オブジェクト あるい は 文字列
Imagick opaque Paint Image $channel	その モード で 有効 な チャネル 定数 を 指定 し ます
Imagick opaque Paint Image $fill	置き換える 色
Imagick bool opaque Paint Image	成功 し た 場合 に true を 返し ます
Imagick bool opaque Paint Image mixed $target mixed $fill float $fuzz bool $invert int $channel	対象 に マッチ する 任意 の ピクセル の 色 を 変更 する
Imagick bool optimize Image Layers	成功 し た 場合 に true を 返し ます
Imagick bool optimize Image Layers	画像 の 繰り返し 部分 を 削除 し て 最適 化 する
Imagick ordered Posterize Image $threshold_map	使用 する ディザリング 閾値 マップ を 含む 文字列
Imagick ordered Posterize Image $channel	チャネルモード に 応じ た チャネル 定数 を 指定 し ます
Imagick bool ordered Posterize Image	成功 し た 場合 に true を 返し ます
Imagick bool ordered Posterize Image string $threshold_map int $channel	配列 ディザリング を 行う
Imagick paint Floodfill Image $x	floodfill の 開始 位置 の x 座標
Imagick paint Floodfill Image $bordercolor	境界色 を 表す imagickpixel オブジェクト あるい は 文字列
Imagick paint Floodfill Image $fuzz	fuzz の 量
Imagick paint Floodfill Image $channel	その モード で 有効 な チャネル 定数 を 指定 し ます
Imagick paint Floodfill Image $fill	塗りつぶし 色 を 表す imagickpixel オブジェクト あるい は 文字列
Imagick paint Floodfill Image $y	floodfill の 開始 位置 の y 座標
Imagick bool paint Floodfill Image	成功 し た 場合 に true を 返し ます
Imagick bool paint Floodfill Image mixed $fill float $fuzz mixed $bordercolor int $x int $y int $channel	色 に マッチ する ピクセル を 変更 する
Imagick paint Transparent Image $target	この 対象 色 を 変更 し て 、 画像 の 不透 明度 を 指定 し ます
Imagick paint Transparent Image $alpha	不透 明度 レベル
Imagick paint Transparent Image $fuzz	画像 の fuzz 値
Imagick bool paint Transparent Image	成功 し た 場合 に true を 返し ます
Imagick bool paint Transparent Image mixed $target float $alpha float $fuzz	色 に マッチ する ピクセル を 塗り つぶし 色 に 変更 する
Imagick ping Image $filename	情報 を 読み込む ファイル 名
Imagick bool ping Image	成功 し た 場合 に true を 返し ます
Imagick bool ping Image string $filename	画像 の 基本 属性 を 取得 する
Imagick ping Image Blob $image	画像 を 含む 文字列
Imagick bool ping Image Blob	成功 し た 場合 に true を 返し ます
Imagick bool ping Image Blob string $image	手早く 属性 を 取得 する
Imagick ping Image File $filehandle	開い て いる 画像 の ファイルハンドル
Imagick ping Image File $fileName	オプション で 指定 する 、 この 画像 の ファイル 名
Imagick bool ping Image File	成功 し た 場合 に true を 返し ます
Imagick bool ping Image File resource $filehandle string $fileName	画像 の 基本 属性 を 手軽 に 取得 する
Imagick polaroid Image $angle	ポラロイド 角度
Imagick polaroid Image $properties	ポラロイドプロパティ
Imagick bool polaroid Image	成功 し た 場合 に true を 返し ます
Imagick bool polaroid Image ImagickDraw $properties float $angle	ポラロイド 写真 を シミュレート する
Imagick preview Images $preview	プレビュー 形式
Imagick bool preview Images	成功 し た 場合 に true を 返し ます
Imagick bool preview Images int $preview	画像 処理 用 の 適切 な パラメータ を 手早く 取得 する
Imagick bool profile Image	成功 し た 場合 に true を 返し ます
Imagick bool profile Image string $name string $profile	画像 の プロファイル を 追加 あるい は 削除 する
Imagick query Font Metrics $text	テキスト
Imagick query Font Metrics $multiline	マルチラインパラメータ
Imagick query Font Metrics $properties	フォント の プロパティ を 含む imagickdraw オブジェクト
Imagick array query Font Metrics	フォントメトリクス を 表す 、 多次 元 配列 を 返し ます
Imagick array query Font Metrics ImagickDraw $properties string $text bool $multiline	フォントメトリクス を 表す 配列 を 返す
Imagick query Fonts $pattern	クエリパターン
Imagick array query Fonts	フォント を 含む 配列 を 返し ます
Imagick array query Fonts string $pattern	設定 し た フォント を 返す
Imagick bool radial Blur Image	成功 し た 場合 に true を 返し ます
Imagick bool radial Blur Image float $angle int $channel	画像 に ラジアルブラー を 施す
Imagick bool raise Image	成功 し た 場合 に true を 返し ます
Imagick bool raise Image int $width int $height int $x int $y bool $raise	三次元 の ボタン 風 の 効果 を シミュレート する
Imagick random Threshold Image $high	高い点
Imagick random Threshold Image $channel	その モード に 対応 し た 任意 の チャネル 定数 を 指定 し ます
Imagick random Threshold Image $low	低い点
Imagick bool random Threshold Image	成功 し た 場合 に true を 返し ます
Imagick bool random Threshold Image float $low float $high int $channel	コントラスト の 高い 2 色 の 画像 を 作成 する
Imagick bool read Image Blob	成功 し た 場合 に true を 返し ます
Imagick bool read Image Blob string $image string $filename	バイナリ 文字 列 から 画像 を 読み込む
Imagick bool read Image File	成功 し た 場合 に true を 返し ます
Imagick bool read Image File resource $filehandle string $fileName	オープン し て いる ファイルハンドル から 画像 を 読み込む
Imagick recolor Image $matrix	色 の 値 を 含む 行列
Imagick bool recolor Image	成功 し た 場合 に true を 返し ます
Imagick bool recolor Image array $matrix	画像 の 色 を 変更 する
Imagick bool reduce Noise Image	成功 し た 場合 に true を 返し ます
Imagick bool reduce Noise Image float $radius	画像 の 輪郭 を なめらか に する
Imagick remap Image $DITHER	ディザメソッド 定数 の 一覧 を 参照く ださい
Imagick remap Image $replacement	置き換える 色 を 含む imagick オブジェクト
Imagick bool remap Image	成功 し た 場合 に true を 返し ます
Imagick bool remap Image Imagick $replacement int $DITHER	画像 の 色 を 再配 置 する
Imagick bool remove Image	成功 し た 場合 に true を 返し ます
Imagick bool remove Image	画像 リスト から 画像 を 削除 する
Imagick string remove Image Profile	画像 の プロファイル 名 を 返し ます
Imagick string remove Image Profile string $name	指定 し た 名前 の 画像 プロファイル を 削除 し て それ を 返す
Imagick bool resample Image	成功 し た 場合 に true を 返し ます
Imagick bool resample Image float $x_resolution float $y_resolution int $filter float $blur	画像 を 指定 し た 解像 度 に リサンプリング する
Imagick reset Image Page $page	ページ 定義
Imagick bool reset Image Page	成功 し た 場合 に true を 返し ます
Imagick bool reset Image Page string $page	画像 の ページ を リセット する
Imagick resize Image $filter	フィルタ 定数 の 一覧 を 参照く ださい
Imagick resize Image $bestfit	オプション の fit パラメータ
Imagick resize Image $columns	画像 の 幅
Imagick resize Image $blur	blur 要素
Imagick resize Image $rows	画像 の 高さ
Imagick bool resize Image	成功 し た 場合 に true を 返し ます
Imagick bool resize Image int $columns int $rows int $filter float $blur bool $bestfit	画像 の サイズ を 変更 する
Imagick round Corners $y_rounding	y 方向 の 丸め
Imagick round Corners $x_rounding	x 方向 の 丸め
Imagick round Corners $stroke_width	線幅
Imagick round Corners $size_correction	サイズ 補正
Imagick round Corners $displace	image displace
Imagick bool round Corners	成功 し た 場合 に true を 返し ます
Imagick bool round Corners float $x_rounding float $y_rounding float $stroke_width float $displace float $size_correction	画像 の 角 を 丸める
Imagick bool sample Image	成功 し た 場合 に true を 返し ます
Imagick bool sample Image int $columns int $rows	ピクセル の サンプリング によっ て 画像 の 倍率 を 変更 する
Imagick bool scale Image	成功 し た 場合 に true を 返し ます
Imagick bool scale Image int $cols int $rows bool $bestfit	画像 の サイズ を 変更 する
Imagick separate Image Channel $channel	ど の 「 チャネル 」 を 戻す か
Imagick bool separate Image Channel	成功 し た 場合 に true を 返し ます
Imagick bool separate Image Channel int $channel	画像 から チャネル を 分離 する
Imagick bool sepia Tone Image	成功 し た 場合 に true を 返し ます
Imagick bool sepia Tone Image float $threshold	画像 を セピア 調 に する
Imagick set Colorspace $COLORSPACE	colorspace 定数 の ひとつ
Imagick bool set Colorspace	成功 し た 場合 に true を 返し ます
Imagick bool set Colorspace int $COLORSPACE	色空間 を 設定 する
Imagick bool set Compression	成功 し た 場合 に true を 返し ます
Imagick bool set Compression int $compression	オブジェクト の デフォルト の 圧縮 方式 を 設定 する
Imagick bool set Compression Quality	成功 し た 場合 に true を 返し ます
Imagick bool set Compression Quality int $quality	オブジェクト の デフォルト の 圧縮 品質 を 設定 する
Imagick bool set First Iterator	成功 し た 場合 に true を 返し ます
Imagick bool set First Iterator	imagick イテレータ を 最初 の 画像 に 設定 する
Imagick bool set Format	成功 し た 場合 に true を 返し ます
Imagick bool set Format string $format	imagick オブジェクト の フォーマット を 設定 する
Imagick set Gravity $gravity	gravity プロパティ
Imagick bool set Gravity int $gravity	gravity を 設定 する
Imagick set Image $replace	置き換える imagick オブジェクト
Imagick bool set Image	成功 し た 場合 に true を 返し ます
Imagick bool set Image Imagick $replace	オブジェクト 内 の 画像 を 置き 換える
Imagick bool set Image Background Color	成功 し た 場合 に true を 返し ます
Imagick bool set Image Background Color mixed $background	画像 の 背景 色 を 設定 する
Imagick bool set Image Bias	成功 し た 場合 に true を 返し ます
Imagick bool set Image Bias float $bias	画像 を 折り た たむ 任意 の メソッド について 画像 の バイアス を 設定 する
Imagick set Image Border Color $border	前 景色
Imagick bool set Image Border Color	成功 し た 場合 に true を 返し ます
Imagick bool set Image Border Color mixed $border	画像 の 前景 色 を 設定 する
Imagick set Image Clip Mask $clip_mask	クリップマスク を 含む imagick オブジェクト
Imagick bool set Image Clip Mask	成功 し た 場合 に true を 返し ます
Imagick bool set Image Clip Mask Imagick $clip_mask	画像 の クリップマスク を 設定 する
Imagick set Image Colorspace $colorspace	colorspace 定数 のいずれ か
Imagick bool set Image Colorspace	成功 し た 場合 に true を 返し ます
Imagick bool set Image Colorspace int $colorspace	画像 の 色空間 を 設定 する
Imagick bool set Image Compose	成功 し た 場合 に true を 返し ます
Imagick bool set Image Compose int $compose	画像 の 合成 演算子 を 設定 する
Imagick set Image Compression $compression	compression 定数 のい ずれ か
Imagick bool set Image Compression	成功 し た 場合 に true を 返し ます
Imagick bool set Image Compression int $compression	画像 の 圧縮 を 設定 する
Imagick set Image Compression Quality $quality	画像 の 圧縮 品質 を 表す 整数 値
Imagick bool set Image Compression Quality	成功 し た 場合 に true を 返し ます
Imagick bool set Image Compression Quality int $quality	画像 の 圧縮 品質 を 設定 する
Imagick set Image Delay $delay	画像 を 表示 さ せる 時間 を & # 0 3 9 ; ticks &# 0 3 9 ; で 表し た 値
Imagick bool set Image Delay	成功 し た 場合 に true を 返し ます
Imagick bool set Image Delay int $delay	画像 の 遅延 を 設定 する
Imagick bool set Image Depth	成功 し た 場合 に true を 返し ます
Imagick bool set Image Depth int $depth	画像 の 深度 を 設定 する
Imagick bool set Image Dispose	成功 し た 場合 に true を 返し ます
Imagick bool set Image Dispose int $dispose	画像 の 配置 方法 を 設定 する
Imagick bool set Image Filename	成功 し た 場合 に true を 返し ます
Imagick bool set Image Filename string $filename	特定 の 画像 の ファイル 名 を 設定 する
Imagick bool set Image Gamma	成功 し た 場合 に true を 返し ます
Imagick bool set Image Gamma float $gamma	画像 の ガンマ を 設定 する
Imagick set Image Gravity $gravity	gravity プロパティ
Imagick bool set Image Gravity int $gravity	画像 の gravity を 設定 する
Imagick bool set Image Green Primary	成功 し た 場合 に true を 返し ます
Imagick bool set Image Green Primary float $x float $y	緑 が 一番 強い 点 を 設定 する
Imagick bool set Image Interlace Scheme	成功 し た 場合 に true を 返し ます
Imagick bool set Image Interlace Scheme int $interlace_scheme	画像 の インターレース 手法 を 設定 する
Imagick set Image Iterations $iterations	画像 を ループ さ せる 回数
Imagick bool set Image Iterations	成功 し た 場合 に true を 返し ます
Imagick bool set Image Iterations int $iterations	画像 の 反復 を 設定 する
Imagick set Image Matte $matte	true に する と マットチャネル を 有効 に し 、 false の 場合 は 無効 に し ます
Imagick bool set Image Matte	成功 し た 場合 に true を 返し ます
Imagick bool set Image Matte bool $matte	画像 の マットチャネル を 設定 する
Imagick bool set Image Profile	成功 し た 場合 に true を 返し ます
Imagick bool set Image Profile string $name string $profile	指定 し た 名前 の 画像 プロファイル を imagick オブジェクト に 追加 する
Imagick bool set Image Property	成功 し た 場合 に true を 返し ます
Imagick bool set Image Property string $name string $value	画像 の プロパティ を 設定 する
Imagick bool set Image Red Primary	成功 し た 場合 に true を 返し ます
Imagick bool set Image Red Primary float $x float $y	赤 が 一番 強い 点 を 設定 する
Imagick bool set Image Rendering Intent	成功 し た 場合 に true を 返し ます
Imagick bool set Image Rendering Intent int $rendering_intent	画像 の レンダリング 方向 を 設定 する
Imagick bool set Image Scene	成功 し た 場合 に true を 返し ます
Imagick bool set Image Scene int $scene	画像 の シーン を 設定 する
Imagick bool set Image Type	成功 し た 場合 に true を 返し ます
Imagick bool set Image Type int $image_type	画像 の 型 を 設定 する
Imagick bool set Image Units	成功 し た 場合 に true を 返し ます
Imagick bool set Image Units int $units	画像 の 解像 度 の 単位 を 設定 する
Imagick bool set Image Virtual Pixel Method	成功 し た 場合 に true を 返し ます
Imagick bool set Image Virtual Pixel Method int $method	画像 の 仮想 ピクセルメソッド を 設定 する
Imagick bool set Image White Point	成功 し た 場合 に true を 返し ます
Imagick bool set Image White Point float $x float $y	画像 の 色度 が 白い点 を 設定 する
Imagick set Iterator Index $index	イテレータ を 設定 する 場所
Imagick bool set Iterator Index	成功 し た 場合 に true を 返し ます
Imagick bool set Iterator Index int $index	イテレータ の 位置 を 設定 する
Imagick bool set Last Iterator	成功 し た 場合 に true を 返し ます
Imagick bool set Last Iterator	imagick イテレータ を 最後 の 画像 に 設定 する
Imagick bool set Option	成功 し た 場合 に true を 返し ます
Imagick bool set Option string $key string $value	オプション を 設定 する
Imagick bool set Page	成功 し た 場合 に true を 返し ます
Imagick bool set Page int $width int $height int $x int $y	imagick オブジェクト の ページジオメトリ を 設定 する
Imagick set Point Size $point_size	ポイントサイズ
Imagick bool set Point Size	成功 し た 場合 に true を 返し ます
Imagick bool set Point Size float $point_size	ポイントサイズ を 設定 する
Imagick set Resolution $y_resolution	垂直方向 の 解像 度
Imagick set Resolution $x_resolution	水平方向 の 解像 度
Imagick bool set Resolution	成功 し た 場合 に true を 返し ます
Imagick bool set Resolution float $x_resolution float $y_resolution	画像 の 解像 度 を 設定 する
Imagick bool set Size	成功 し た 場合 に true を 返し ます
Imagick bool set Size int $columns int $rows	imagick オブジェクト の サイズ を 設定 する
Imagick set Size Offset $columns	幅 ピクセル 単位
Imagick set Size Offset $rows	高さ ピクセル 単位
Imagick set Size Offset $offset	画像 の オフセット
Imagick bool set Size Offset	成功 し た 場合 に true を 返し ます
Imagick bool set Size Offset int $columns int $rows int $offset	imagick オブジェクト の サイズ の オフセット を 設定 する
Imagick shade Image $gray	ゼロ 以外 の 値 で 、 各 ピクセル に 影 を つけ ます
Imagick shade Image $elevation	光源 の 方向 を 定義 し ます
Imagick shade Image $azimuth	光源 の 方向 を 定義 し ます
Imagick bool shade Image	成功 し た 場合 に true を 返し ます
Imagick bool shade Image bool $gray float $azimuth float $elevation	3d 効果 を 作成 する
Imagick bool shadow Image	成功 し た 場合 に true を 返し ます
Imagick bool shadow Image float $opacity float $sigma int $x int $y	画像 の 影 を シミュレート する
Imagick bool sharpen Image	成功 し た 場合 に true を 返し ます
Imagick bool sharpen Image float $radius float $sigma int $channel	画像 を シャープ に する
Imagick shear Image $background	背景色
Imagick shear Image $x_shear	x 軸方 向 に 押しつぶす 角度
Imagick shear Image $y_shear	y 軸方 向 に 押しつぶす 角度
Imagick bool shear Image	成功 し た 場合 に true を 返し ます
Imagick bool shear Image mixed $background float $x_shear float $y_shear	平行 四 辺形 を 作成 する
Imagick sigmoidal Contrast Image $channel	which color channels the contrast will be applied to
Imagick sigmoidal Contrast Image $sharpen	if true increase the contrast if false decrease the contrast
Imagick sigmoidal Contrast Image $alpha	the amount of contrast to apply
Imagick sigmoidal Contrast Image $beta	where the midpoint of the gradient will be
Imagick bool sigmoidal Contrast Image	成功 し た 場合 に true を 返し ます
Imagick bool sigmoidal Contrast Image bool $sharpen float $alpha float $beta int $channel	画像 の コントラスト を 調整 する
Imagick sketch Image $angle	この 角度 で 効果 を 適用 し ます
Imagick sketch Image $radius	ガウス 変換 の 半径 ピクセル 単位 で 中心 の ピクセル は 数え ない
Imagick sketch Image $sigma	ガウス 変換 の 標準 偏差 ピクセル 単位
Imagick bool sketch Image	成功 し た 場合 に true を 返し ます
Imagick bool sketch Image float $radius float $sigma float $angle	鉛筆画 を シミュレート する
Imagick bool solarize Image	成功 し た 場合 に true を 返し ます
Imagick bool solarize Image int $threshold	画像 に ソラリゼーション 効果 を 適用 する
Imagick sparse Color Image $SPARSE_METHOD	sparse method 定数 の 一覧 を 参照く ださい
Imagick sparse Color Image $arguments	座標 を 含む 配列
Imagick sparse Color Image $CHANNEL	その モード で 有効 な チャネル 定数 を 指定 し ます
Imagick bool sparse Color Image	成功 し た 場合 に true を 返し ます
Imagick bool sparse Color Image int $SPARSE_METHOD array $arguments int $channel	色 を 補間 する
Imagick bool splice Image	成功 し た 場合 に true を 返し ます
Imagick bool splice Image int $width int $height int $x int $y	無地 の 画像 を 作成 する
Imagick bool spread Image	成功 し た 場合 に true を 返し ます
Imagick bool spread Image float $radius	ブロック 内 の 各 ピクセル を ランダム に 移動 する
Imagick Imagick stegano Image	成功 し た 場合 に true を 返し ます
Imagick Imagick stegano Image Imagick $watermark_wand int $offset	デジタル 透かし を 画像 に 埋め込む
Imagick bool stereo Image	成功 し た 場合 に true を 返し ます
Imagick bool stereo Image Imagick $offset_wand	ふたつ の 画像 を 合成 する
Imagick bool strip Image	成功 し た 場合 に true を 返し ます
Imagick bool strip Image	画像 から すべ て の プロパティ や コメント を 除去 する
Imagick bool texture Image	成功 し た 場合 に true を 返し ます
Imagick bool texture Image Imagick $texture_wand	テクスチャ 画像 を タイル 状 に 並べる
Imagick bool threshold Image	成功 し た 場合 に true を 返し ます
Imagick bool threshold Image float $threshold int $channel	閾値 に も とづい て 個々 の ピクセル の 値 を 変更 する
Imagick thumbnail Image $bestfit	最大値 を 強制 的 に 使用 する かどう か
Imagick thumbnail Image $columns	画像 の 幅
Imagick thumbnail Image $rows	画像 の 高さ
Imagick bool thumbnail Image	成功 し た 場合 に true を 返し ます
Imagick bool thumbnail Image int $columns int $rows bool $bestfit bool $fill	画像 の サイズ を 変更 する
Imagick transform Image $crop	切り取り ジオメトリ 文字列
Imagick transform Image $geometry	画像 ジオメトリ 文字列
Imagick Imagick transform Image	変換語 の 画像 を 含む imagick オブジェクト を 返し ます
Imagick Imagick transform Image string $crop string $geometry	切り取る サイズ と 画像 の ジオメトリ を 設定 する 便利 な メソッド
Imagick transparent Paint Image $target	対象 と なる 色
Imagick transparent Paint Image $alpha	透明度
Imagick transparent Paint Image $invert	true の 場合 は 、 対象 の 色 に マッチ し ない ピクセル を 変更 し ます
Imagick transparent Paint Image $fuzz	あいまい さ を あらわす 量
Imagick bool transparent Paint Image	成功 し た 場合 に true を 返し ます
Imagick bool transparent Paint Image mixed $target float $alpha float $fuzz bool $invert	ピクセル を 透過 さ せる
Imagick bool transverse Image	成功 し た 場合 に true を 返し ます
Imagick bool transverse Image	水平 方向 に 反転 さ せ た 画像 を 作成 する
Imagick bool unsharp Mask Image	成功 し た 場合 に true を 返し ます
Imagick bool unsharp Mask Image float $radius float $sigma float $amount float $threshold int $channel	画像 を シャープ に する
Imagick bool valid	成功 し た 場合 に true を 返し ます
Imagick bool valid	現在 の アイテム が 有効 か どう か を 調べる
Imagick vignette Image $blackPoint	黒 の 点
Imagick vignette Image $whitePoint	白 の 点
Imagick vignette Image $y	楕円 の y オフセット
Imagick vignette Image $x	楕円 の x オフセット
Imagick bool vignette Image	成功 し た 場合 に true を 返し ます
Imagick bool vignette Image float $blackPoint float $whitePoint int $x int $y	ビネットフィルタ を 画像 に 追加 する
Imagick wave Image $length	波長
Imagick wave Image $amplitude	波 の 振幅
Imagick bool wave Image	成功 し た 場合 に true を 返し ます
Imagick bool wave Image float $amplitude float $length	ウェーブフィルタ を 画像 に 適用 する
Imagick write Image $filename	画像 を 書き出す ファイル 名
Imagick bool write Image	成功 し た 場合 に true を 返し ます
Imagick bool write Image string $filename	指定 し た 名前 で 画像 を 書き込む
Imagick write Image File $filehandle	画像 を 書き出す ファイルハンドル
Imagick bool write Image File	成功 し た 場合 に true を 返し ます
Imagick bool write Image File resource $filehandle	画像 を ファイルハンドル に 書き出す
Imagick bool write Images	成功 し た 場合 に true を 返し ます
Imagick bool write Images string $filename bool $adjoin	画像 あるい は 画像 シーケンス を 書き込む
ImagickPixel get Color $normalized	色 を 正規 化 する
ImagickPixel array get Color	各 チャネル の 値 を 配列 で 返し ます
ImagickPixel array get Color bool $normalized	色 を 返す
ImagickPixel string get Color As String	imagickpixel オブジェクト の 色 を 文字列 で 返し ます
ImagickPixel string get Color As String	色 を 文字列 で 返す
ImagickPixel get Color Value $color	調べ たい 色
ImagickPixel float get Color Value	チャネル の 値 を 正規 化 し た 浮動 小数 点数 値 を 返し ます
ImagickPixel float get Color Value int $color	指定 し た 色 チャネル の 値 を 正規 化 し た もの を 取得 する
ImagickPixel array get HSL	hsl の 値 を それぞれ & quot ;hue &quot ;、 & quot ;saturation &quot ;、 そして & quot ;luminosity &quot ; という キー に 保持 する 配列 を 返し ます
ImagickPixel array get HSL	imagickpixel オブジェクト の hsl カラー を 正規 化 し た もの を 返す
ImagickPixel set Color Value $value	その チャネル に 設定 する 値
ImagickPixel set Color Value $color	imagick 色 チャネル 定数 のい ずれ か
ImagickPixel bool set Color Value	成功 し た 場合 に true を 返し ます
ImagickPixel bool set Color Value int $color float $value	指定 し た チャネル の 正規 化 し た 値 を 設定 する
ImagickPixel set HSL $hue	色相 を 正規 化 し た 値
ImagickPixel set HSL $luminosity	明度 を 正規 化 し た 値
ImagickPixel set HSL $saturation	彩度 を 正規 化 し た 値
ImagickPixel bool set HSL	成功 し た 場合 に true を 返し ます
ImagickPixel bool set HSL float $hue float $saturation float $luminosity	正規化 し た hsl カラー を 設定 する
InfiniteIterator construct $iterator	無限 に 処理 し 続ける イテレータ
InfiniteIterator Iterator construct Iterator $iterator	infiniteiterator を 作成 する
InfiniteIterator void next	内部 イテレータ を 次 に 移動 する か 、 巻き戻す
Iterator mixed current	あらゆる 型 を 返す こと が 可能 です
Iterator mixed current	現在 の 要素 を 返す
Iterator scalar key	成功 し た 場合 に スカラー 型 、 失敗 し た 場合 に null を 返し ます
Iterator scalar key	現在 の 要素 の キー を 返す
Iterator void next	次 の 要素 に 進む
IteratorAggregate Traversable get Iterator	iterator あるい は traversable を 実装 し た オブジェクト の インスタンス を 返し ます
IteratorAggregate Traversable get Iterator	外部 イテレータ を 取得 する
IteratorIterator construct $iterator	traversable な イテレータ
IteratorIterator Traversable construct Traversable $iterator	traversable な 何 か から イテレータ を 作成 する
IteratorIterator mixed current	現在 の 要素 の 値 を 返し ます
IteratorIterator mixed current	現在 の 値 を 取得 する
IteratorIterator Traversable get Inner Iterator	iteratoriterator :: __ construct に渡し た 内部 イテレータ を 返し ます
IteratorIterator Traversable get Inner Iterator	内部 イテレータ を 取得 する
JsonSerializable mixed json Serialize	json _encode で シリアライズ する データ を 返し ます
JsonSerializable mixed json Serialize	json に シリアライズ し たい データ を 指定 する
LimitIterator construct $iterator	制限 し たい イテレータ
LimitIterator construct $count	オプション の 要素 数
LimitIterator construct $offset	オプション の 開始 位置
LimitIterator Iterator construct	新しい limititerator を 返し ます
LimitIterator Iterator construct Iterator $iterator int $offset int $count	limititerator を 作成 する
LimitIterator Iterator get Inner Iterator	limititerator :: __ construct に渡さ れ た 内部 イテレータ を 返し ます
LimitIterator Iterator get Inner Iterator	内部 イテレータ を 取得 する
LimitIterator int get Position	現在 の 位置 を 返し ます
LimitIterator int get Position	現在 の 位置 を 返す
LimitIterator mixed key	現在 の 要素 の キー を 返し ます
LimitIterator mixed key	現在 の キー を 取得 する
LimitIterator seek $position	移動 し たい 位置
LimitIterator int seek	移動後 の オフセット 位置 を 返し ます
LimitIterator int seek int $position	与え られ た 位置 に 移動 する
LimitIterator bool valid	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
LimitIterator bool valid	現在 の 要素 が 有効 か どう か を チェック する
Lua register Callback $function	有効 な php 関数 コールバック
Lua mixed register Callback	$this を 返し ます
Lua mixed register Callback string $name callable $function	php 関数 を lua に 登録
Memcache add $flag	項目 を 圧縮 し て 格納 する 場合 に memcache _compressed を 使用 し ます zlib を 使用 し ます
Memcache add $var	格納 する 値
Memcache add $key	項目 に 関連 付け られ た キー
Memcache add $expire	項目 の 有効 期限
Memcache bool add	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
Memcache bool add string $key mixed $var int $flag int $expire	サーバー に 項目 を 追加 する
Memcache bool close	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
Memcache bool close	memcached サーバー と の 接続 を 閉じる
Memcache connect $timeout	デーモン へ の 接続 の 際 に 使用 する 値 秒単位 です
Memcache connect $port	memcached が 接続 を 待ち受ける ポート を 指定 し ます
Memcache connect $host	memcached が 接続 を 待ち受ける ホスト を 指定 し ます
Memcache bool connect	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
Memcache bool connect string $host int $port int $timeout	memcached サーバー へ の 接続 を オープン する
Memcache decrement $value	項目 の 値 を value だけ 減ら し ます
Memcache decrement $key	値 を 減ら す 項目 の キー
Memcache int decrement	項目 の 新しい 値か 、 失敗 し た 場合 に false を 返し ます
Memcache int decrement string $key int $value	項目 の 値 を 減ら す
Memcache delete $key	削除 し たい 項目 の キー
Memcache delete $timeout	この 非推 奨 の パラメータ は サポート し て おら ず 、 デフォルト で 0 秒 に なっ て い ます
Memcache bool delete	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
Memcache bool delete string $key int $timeout	サーバー から 項目 を 削除 する
Memcache bool flush	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
Memcache bool flush	サーバー 上 の すべ て の 既存 項目 を 消去 する
Memcache get $key	取得 し たい キー あるい は キー の 配列
Memcache get $flags	存在 し た 場合 は 、 値と とも に 取得 し た フラグ を ここ に 書き込み ます
Memcache string get	key に関連付け られ た 文字列 を 返し ます
Memcache string get string $key int $flags	サーバー から 項目 を 取得 する
Memcache get Stats $slabid	type を cachedump と 設定 し た 場合 に 使用 し 、 ダンプ を 取得 する slab を 指定 し ます
Memcache get Stats $limit	type を cachedump と 設定 し た 場合 に 使用 し 、 ダンプ する エントリ の 数 を 制限 し ます
Memcache get Stats $type	取得 する 統計 情報 の 型
Memcache array get Stats	サーバー の 統計 情報 を 含む 連想 配列 を 返し ます
Memcache array get Stats string $type int $slabid int $limit	サーバー の 統計 情報 を 取得 する
Memcache pconnect $timeout	デーモン へ の 接続 の 際 に 使用 する 値 秒単位 です
Memcache pconnect $port	memcached が 接続 を 待ち受ける ポート を 指定 し ます
Memcache pconnect $host	memcached が 接続 を 待ち受ける ホスト を 指定 し ます
Memcache mixed pconnect	memcache オブジェクト を 返し ます
Memcache mixed pconnect string $host int $port int $timeout	memcached サーバー へ の 持続 的 な 接続 を オープン する
Memcache replace $flag	項目 を 圧縮 し て 格納 する 場合 に memcache _compressed を 使用 し ます zlib を 使用 し ます
Memcache replace $var	格納 する 値
Memcache replace $key	項目 に 関連 付け られ た キー
Memcache replace $expire	項目 の 有効 期限
Memcache bool replace	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
Memcache bool replace string $key mixed $var int $flag int $expire	既存 項目 の 値 を 置換 する
Memcache set Server Params $timeout	デーモン へ の 接続 の 際 に 使用 する 値 秒単位 です
Memcache set Server Params $retry_interval	サーバー と の 接続 が 失敗 し た 際 に 再試行 を 行う 頻度 を 設定 し ます
Memcache set Server Params $port	memcached が 接続 を 待ち受ける ポート を 指定 し ます
Memcache set Server Params $failure_callback	エラー が 発生 し た 際 に 実行 さ れる コールバック 関数 を 指定 できる よう に し ます
Memcache set Server Params $host	memcached が 接続 を 待ち受ける ホスト を 指定 し ます
Memcache set Server Params $status	サーバー が オンライン 状態 で ある かど う か を 制御 し ます
Memcache bool set Server Params	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
Memcache bool set Server Params string $host int $port int $timeout int $retry_interval bool $status callable $failure_callback	サーバー の パラメータ および 状態 を 、 実行 時 に 変更 する
Memcached add By Key $expiration	期限切 れ と なる まで の 時間
Memcached add By Key $key	値 の 格納 先 の キー
Memcached add By Key $value	格納 する 値
Memcached add By Key $server_key	値 を 格納 し たり データ を 取得 し たり する サーバー を 表す キー
Memcached bool add By Key	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
Memcached bool add By Key string $server_key string $key mixed $value int $expiration	指定 し た サーバー に アイテム を 新しい キー で 追加 する
Memcached add Server $port	memcache が 動作 し て いる ポート
Memcached add Server $host	memcache サーバー の ホスト 名
Memcached add Server $weight	プール 内 の 全 サーバー に おける その サーバー の 重み
Memcached bool add Server	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
Memcached bool add Server string $host int $port int $weight	サーバー を サーバープール に 追加 する
Memcached append By Key $value	追記 する 文字列
Memcached append By Key $key	値 の 格納 先 の キー
Memcached append By Key $server_key	値 を 格納 し たり データ を 取得 し たり する サーバー を 表す キー
Memcached bool append By Key	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
Memcached bool append By Key string $server_key string $key string $value	指定 し た サーバー で データ を 既存 の アイテム に 追記 する
Memcached cas $value	格納 する 値
Memcached cas $expiration	期限切 れ と なる まで の 時間
Memcached cas $key	値 の 格納 先 の キー
Memcached cas $cas_token	既存 の アイテム に 割り当て たれ た 一意 な 値
Memcached bool cas	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
Memcached bool cas float $cas_token string $key mixed $value int $expiration	アイテム を 比較 し て 入れ 替える
Memcached decrement By Key $offset	値 を 減ら し たい 量
Memcached decrement By Key $expiry	その アイテム に 設定 する 有効 期限
Memcached decrement By Key $key	減ら し たい アイテム の キー
Memcached decrement By Key $initial_value	その アイテム が 存在 し ない 場合 に 設定 する 値
Memcached decrement By Key $server_key	値 を 格納 し たり データ を 取得 し たり する サーバー を 表す キー
Memcached int decrement By Key	成功 し た 場合 に アイテム の 新しい 値 、 失敗 し た 場合 に false を 返し ます
Memcached int decrement By Key string $server_key string $key int $offset int $initial_value int $expiry	指定 し た サーバー 上 に ある 数値 アイテム の 値 を 減ら す
Memcached delete $time	サーバー が アイテム を 削除 する まで の 待ち 時間
Memcached delete $key	削除 し たい キー
Memcached bool delete	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
Memcached bool delete string $key int $time	アイテム を 削除 する
Memcached delete By Key $time	サーバー が アイテム を 削除 する まで の 待ち 時間
Memcached delete By Key $key	削除 し たい キー
Memcached delete By Key $server_key	値 を 格納 し たり データ を 取得 し たり する サーバー を 表す キー
Memcached bool delete By Key	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
Memcached bool delete By Key string $server_key string $key int $time	指定 し た サーバー から アイテム を 削除 する
Memcached delete Multi By Key $time	サーバー が アイテム を 削除 する まで の 待ち 時間
Memcached delete Multi By Key $keys	削除 し たい キー
Memcached delete Multi By Key $server_key	値 を 格納 し たり データ を 取得 し たり する サーバー を 表す キー
Memcached bool delete Multi By Key	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
Memcached bool delete Multi By Key string $server_key array $keys int $time	指定 し た サーバー から 複数 の アイテム を 削除 する
Memcached array fetch	次 の 結果 、 あるい は false を 返し ます
Memcached array fetch	次 の 結果 を 取得 する
Memcached flush $delay	アイテム の 無効 化 まで に 待機 する 秒数
Memcached bool flush	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
Memcached bool flush int $delay	キャッシュ 内 の すべ て の アイテム を 無効 に する
Memcached get $cas_token	cas トークン を 格納 する 変数
Memcached get $key	取得 し たい アイテム の キー
Memcached get $cache_cb	read -through キャッシュコールバック 、 あるい は null
Memcached mixed get	キャッシュ に 格納 さ れ た 値 、 あるい は false を 返し ます
Memcached mixed get string $key callable $cache_cb float $cas_token	アイテム を 取得 する
Memcached array get All Keys	成功 し た 場合 は 全 サーバー に 格納 さ れ て いる キー 、 失敗 し た 場合 に false を 返し ます
Memcached array get All Keys	すべて の サーバー の キー を 取得 する
Memcached get By Key $cas_token	cas トークン を 格納 する 変数
Memcached get By Key $cache_cb	read -through キャッシュコールバック 、 あるい は null
Memcached get By Key $key	取得 し たい アイテム の キー
Memcached get By Key $server_key	値 を 格納 し たり データ を 取得 し たり する サーバー を 表す キー
Memcached mixed get By Key	キャッシュ に 格納 さ れ た 値 、 あるい は false を 返し ます
Memcached mixed get By Key string $server_key string $key callable $cache_cb float $cas_token	指定 し た サーバー から アイテム を 取得 する
Memcached get Delayed $keys	要求 する キー の 配列
Memcached get Delayed $value_cb	result コールバック 、 あるい は null
Memcached get Delayed $with_cas	cas トークン の 値 も 要求 する かどう か
Memcached bool get Delayed	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
Memcached bool get Delayed array $keys bool $with_cas callable $value_cb	複数 の アイテム を 要求 する
Memcached get Multi By Key $flags	取得 操作 の フラグ
Memcached get Multi By Key $cas_tokens	見つかっ た アイテム の cas トークン を 格納 する 変数
Memcached get Multi By Key $keys	取得 し たい キー の 配列
Memcached get Multi By Key $server_key	値 を 格納 し たり データ を 取得 し たり する サーバー を 表す キー
Memcached array get Multi By Key	見つかっ た アイテム の 配列 、 失敗 し た 場合 に false を 返し ます
Memcached array get Multi By Key string $server_key array $keys string $cas_tokens int $flags	指定 し た サーバー から 複数 の アイテム を 取得 する
Memcached get Option $option	memcached :: opt _* 定数 のい ずれ か
Memcached mixed get Option	要求 さ れ た オプション の 値 、 あるい は エラー 時 に false を 返し ます
Memcached mixed get Option int $option	memcached の オプション の 値 を 取得 する
Memcached int get Result Code	直近 の memcached 操作 の 結果 コード を 返し ます
Memcached int get Result Code	直近 の 操作 の 結果 コード を 返す
Memcached string get Result Message	最後 に 実行 し た memcached クラス の 操作 結果 を 説明 し た メッセージ
Memcached string get Result Message	最後 に 実行 し た 操作 の 結果 を 説明 し た メッセージ を 返す
Memcached get Server By Key $server_key	値 を 格納 し たり データ を 取得 し たり する サーバー を 表す キー
Memcached array get Server By Key	成功 し た 場合 に 配列 を 返し ます
Memcached array get Server By Key string $server_key	キー と サーバー を 関連 付ける
Memcached array get Stats	サーバー の 統計 情報 の 配列 を 返し ます
Memcached array get Stats	サーバープール の 統計 情報 を 取得 する
Memcached array get Version	memcached サーバー の バージョン 情報 の 配列
Memcached array get Version	サーバープール の バージョン 情報 を 取得 する
Memcached increment $offset	値 を 増や し たい 量
Memcached increment $expiry	その アイテム に 設定 する 有効 期限
Memcached increment $initial_value	その アイテム が 存在 し ない 場合 に 設定 する 値
Memcached increment $key	増や し たい アイテム の キー
Memcached int increment	成功 し た 場合 に アイテム の 新しい 値 、 失敗 し た 場合 に false を 返し ます
Memcached int increment string $key int $offset int $initial_value int $expiry	数値 アイテム の 値 を 増やす
Memcached increment By Key $offset	値 を 増や し たい 量
Memcached increment By Key $expiry	その アイテム に 設定 する 有効 期限
Memcached increment By Key $initial_value	その アイテム が 存在 し ない 場合 に 設定 する 値
Memcached increment By Key $key	増や し たい アイテム の キー
Memcached increment By Key $server_key	値 を 格納 し たり データ を 取得 し たり する サーバー を 表す キー
Memcached int increment By Key	成功 し た 場合 に アイテム の 新しい 値 、 失敗 し た 場合 に false を 返し ます
Memcached int increment By Key string $server_key string $key int $offset int $initial_value int $expiry	指定 し た サーバー 上 に ある 数値 アイテム の 値 を 増やす
Memcached bool is Persistent	memcache インスタンス が 持続 的 接続 を 使っ て いる 場合 に true 、 それ 以外 の 場合 に false を 返し ます
Memcached bool is Persistent	memcache へ の 接続 で 持続 的 接続 を 使っ て いる かど う か を 調べる
Memcached bool is Pristine	直近 に 作られ た インスタンス で ある 場合 に true 、 それ 以外 の 場合 に false を 返し ます
Memcached bool is Pristine	直近 に 作られ た インスタンス か どう か を 調べる
Memcached prepend $key	データ を 先頭 に 付加 し たい アイテム の キー
Memcached prepend $value	先頭 に 付加 する 文字列
Memcached bool prepend	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
Memcached bool prepend string $key string $value	既存 の アイテム の 前 に データ を 付加 する
Memcached prepend By Key $key	データ を 先頭 に 付加 し たい アイテム の キー
Memcached prepend By Key $value	先頭 に 付加 する 文字列
Memcached prepend By Key $server_key	値 を 格納 し たり データ を 取得 し たり する サーバー を 表す キー
Memcached bool prepend By Key	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
Memcached bool prepend By Key string $server_key string $key string $value	指定 し た サーバー で 既存 の アイテム の 前 に データ を 付加 する
Memcached bool quit	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
Memcached bool quit	開い て いる 接続 を 閉じる
Memcached replace $expiration	期限切 れ と なる まで の 時間
Memcached replace $key	値 の 格納 先 の キー
Memcached replace $value	格納 する 値
Memcached bool replace	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
Memcached bool replace string $key mixed $value int $expiration	既存 の キー の アイテム を 入れ 替える
Memcached replace By Key $expiration	期限切 れ と なる まで の 時間
Memcached replace By Key $key	値 の 格納 先 の キー
Memcached replace By Key $value	格納 する 値
Memcached replace By Key $server_key	値 を 格納 し たり データ を 取得 し たり する サーバー を 表す キー
Memcached bool replace By Key	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
Memcached bool replace By Key string $server_key string $key mixed $value int $expiration	指定 し た サーバー で 既存 の キー の アイテム を 入れ 替える
Memcached bool reset Server List	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
Memcached bool reset Server List	サーバーリスト から すべ て の サーバー を 消去 する
Memcached set By Key $expiration	期限切 れ と なる まで の 時間
Memcached set By Key $key	値 の 格納 先 の キー
Memcached set By Key $value	格納 する 値
Memcached set By Key $server_key	値 を 格納 し たり データ を 取得 し たり する サーバー を 表す キー
Memcached bool set By Key	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
Memcached bool set By Key string $server_key string $key mixed $value int $expiration	指定 し た サーバー に アイテム を 格納 する
Memcached set Multi By Key $items	サーバー に 格納 する キー / 値 の ペア の 配列
Memcached set Multi By Key $expiration	期限切 れ と なる まで の 時間
Memcached set Multi By Key $server_key	値 を 格納 し たり データ を 取得 し たり する サーバー を 表す キー
Memcached bool set Multi By Key	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
Memcached bool set Multi By Key string $server_key array $items int $expiration	指定 し た サーバー で 複数 の アイテム を 格納 する
Memcached bool set Option	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
Memcached bool set Option int $option mixed $value	memcached の オプション の 値 を 設定 する
Memcached set Options $options	オプション の 連想 配列
Memcached bool set Options	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
Memcached bool set Options array $options	memcached の オプション の 値 を 設定 する
Memcached set Sasl Auth Data $password	認証 で 使う パスワード
Memcached set Sasl Auth Data $username	認証 で 使う ユーザー 名
Memcached void set Sasl Auth Data string $username string $password	認証用 の 資格 情報 を 設定 する
Memcached touch $expiration	期限切 れ と なる まで の 時間
Memcached touch $key	値 の 格納 先 の キー
Memcached bool touch	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
Memcached bool touch string $key int $expiration	アイテム に 新しい 有効 期限 を 設定 する
Mongo close $connection	指定 し なかっ たり false を 渡し たり し た 場合 は 、 書き込み 用 に 選ば れ た 接続 を 閉じ ます
Mongo bool close	接続 を 閉じる のに 成功 し た かどう か を 返し ます
Mongo bool close boolean|string $connection	接続 を 閉じる
Mongo array get Hosts	セット 内 の ホスト に関する 情報 の 配列 を 返し ます
Mongo array get Hosts	関連 づけ られ たすべて の ホスト の 状態 を 更新 する
Mongo string get Slave	この 接続 が 読み込み に 使っ て いる セカンダリ の アドレス を 返し ます
Mongo string get Slave	slaveokay の 読み込み に 使わ れ て いる アドレス を 返す
Mongo bool get Slave Okay	この インスタンス の slaveokay の 値 を 返し ます
Mongo bool get Slave Okay	この 接続 の slaveokay 設定 を 取得 する
Mongo set Slave Okay $ok	可能 な 限り の 問い合わせ を レプリカセット の セカンダリメンバ に 送信 し たい とき に 、 この mongoclient インスタンス を 使い ます
Mongo bool set Slave Okay	この インスタンス の 、 変更 前 の slaveokay の 値 を 返し ます
Mongo bool set Slave Okay bool $ok	この 接続 の slaveokay の 設定 を 変更 する
Mongo string switch Slave	この 接続 が 読み込み に 使っ て いる セカンダリ の アドレス を 返し ます
Mongo string switch Slave	slaveokay 読み込み 用 の 新しい セカンダリ を 選ぶ
MongoBinData construct $data	バイナリデータ
MongoBinData construct $type	データ 型
MongoBinData string construct	新しい バイナリデータオブジェクト を 返し ます
MongoBinData string construct string $data int $type	新しい バイナリデータオブジェクト を 作成 する
MongoClient array get Connections	開い て いる 接続 に関する 配列 を 返し ます
MongoClient array get Connections	開い て いる すべ て の 接続 の 情報 を 返す
MongoClient kill Cursor $server_hash	カーソル の 情報 を 持つ 、 サーバー の ハッシュ
MongoClient kill Cursor $id	削除 し たい カーソル の id
MongoClient bool kill Cursor	カーソル の 削除 処理 を 実行 し た 場合 に true 、 引数 に 何か 問題 が あっ た 場合 server _hash が 間違っ て いる 場合 など に false を 返し ます
MongoClient bool kill Cursor string $server_hash int|MongoInt64 $id	サーバー 上 の 指定 し た カーソル を 削除 する
MongoCollection aggregate $op	二番目 の パイプライン 演算子
MongoCollection aggregate $options	集約 コマンド の オプション
MongoCollection aggregate $pipeline	パイプライン 演算子 の 配列
MongoCollection aggregate $op	最初 の パイプライン 演算子
MongoCollection aggregate	それ 以降 の パイプライン 演算子
MongoCollection array aggregate	集約 の 結果 を 配列 で 返し ます
MongoCollection array aggregate array $pipeline array $options	aggregation フレームワーク を 使っ て 集約 する
MongoCollection distinct $key	使う キー
MongoCollection distinct $query	オプション の クエリパラメータ
MongoCollection array distinct	区別 できる 値 の 配列 を 返し ます
MongoCollection array distinct string $key array $query	コレクション 内 で 、 指定 し た キー に 対応 する 区別 できる 値 の 一覧 を 取得 する
MongoCollection find And Modify $query	クエリ の 検索 条件
MongoCollection find And Modify $fields	オプション で 、 返す フィールド を 絞り込め ます
MongoCollection find And Modify $update	更新 条件
MongoCollection find And Modify $options	適用 する オプション の 配列
MongoCollection array find And Modify	元 の ドキュメント を 返し ます
MongoCollection array find And Modify array $query array $update array $fields array $options	ドキュメント を 更新 し て 返す
MongoCollection bool get Slave Okay	この インスタンス の slaveokay の 値 を 返し ます
MongoCollection bool get Slave Okay	この コレクション の slaveokay 設定 を 取得 する
MongoCollection insert $options	追加 操作 について の オプション の 配列
MongoCollection insert $document	配列 あるい は オブジェクト
MongoCollection bool|array insert	&quot ;w &quot ; オプション が 設定 さ れ て いる 場合 は 、 追加 の 状況 を 含む 配列 を 返し ます
MongoCollection bool|array insert array|object $document array $options	ドキュメント を コレクション に 追加 する
MongoCollection set Slave Okay $ok	可能 な 限り の 問い合わせ を レプリカセット の セカンダリメンバ に 送信 し たい とき に 、 この mongo インスタンス を 使い ます
MongoCollection bool set Slave Okay	この インスタンス の 、 変更 前 の slaveokay の 値 を 返し ます
MongoCollection bool set Slave Okay bool $ok	この コレクション の slaveokay の 設定 を 変更 する
MongoCursor add Option $value	追加 し たい 値
MongoCursor add Option $key	追加 し たい フィールド 名
MongoCursor MongoCursor add Option	この カーソル を 返し ます
MongoCursor MongoCursor add Option string $key mixed $value	トップレベル の キー / 値 の ペア を クエリ に 追加 する
MongoCursor batch Size $batchSize	バッチ で 返す 結果 の 数
MongoCursor MongoCursor batch Size	この カーソル を 返し ます
MongoCursor MongoCursor batch Size int $batchSize	ひとつ の バッチ で 返す 要素 数 を 制限 する
MongoCursor count $foundOnly	カーソル の limit を 送信 し 、 制限 に 達し た 場合 に count 関数 へ の 情報 の 送信 を スキップ し ます
MongoCursor int count	この カーソル の クエリ が 返す ドキュメント の 数 を 返し ます
MongoCursor int count bool $foundOnly	この クエリ の 結果 の 数 を 数える
MongoCursor array current	現在 の 結果 を 連想 配列 で 返し ます
MongoCursor array current	現在 の 要素 を 返す
MongoCursor bool dead	クライアント にまだ 送 られ て い ない 結果 が 残っ て いる 場合 に true 、 そう で ない 場合 に false を 返し ます
MongoCursor bool dead	まだ データベース から 送信 さ れ て い ない ドキュメント が ある かど う か を 調べる
MongoCursor fields $f	返し たい あるい は 返し たく ない フィールド
MongoCursor MongoCursor fields	この カーソル を 返し ます
MongoCursor MongoCursor fields array $f	クエリ の フィールド を 設定 する
MongoCursor immortal $liveForever	カーソル を 不死 に する かどう か
MongoCursor MongoCursor immortal	この カーソル を 返し ます
MongoCursor MongoCursor immortal bool $liveForever	この カーソル を タイムアウト さ せる かど う か を 設定 する
MongoCursor array info	この カーソル の namespace 、 batch size 、 limit 、 skip 、 flags 、 query そして fields を 返し ます
MongoCursor array info	カーソル の 作成 と 走査 に関する 情報 を 取得 する
MongoCursor tailable $tail	カーソル が 追尾 可能 か どう か
MongoCursor MongoCursor tailable	この カーソル を 返し ます
MongoCursor MongoCursor tailable bool $tail	この カーソル が 、 最後 の 結果 を 取得 し た 後 も オープン し た まま に し て おく かど う か を 設定 する
MongoCursor timeout $ms	カーソル が レスポンス を 待つ ミリ 秒数
MongoCursor MongoCursor timeout	この カーソル を 返し ます
MongoCursor MongoCursor timeout int $ms	この クエリ の クライアント 側 の タイムアウト を 設定 する
MongoDate string to String	この 日付 を 返し ます
MongoDate string to String	この 日付 の 文字 列表 現 を 返す
MongoDB authenticate $password	パスワード プレーンテキスト
MongoDB authenticate $username	ユーザー 名
MongoDB array authenticate	データベース から の 応答 を 返し ます
MongoDB array authenticate string $username string $password	この データベース に ログイン する
MongoDB command $command	送信 し たい クエリ
MongoDB command $options	インデックス を 作る オプション の 配列 です
MongoDB command $hash	コマンド を 実行 する サーバー の 接続 ハッシュ を 設定 し ます
MongoDB array command	データベース の 応答 を 返し ます
MongoDB array command array $command array $options string $hash	データベースコマンド を 実行 する
MongoDB construct $MongoClientconn	データベース 接続
MongoDB construct $name	データベース 名
MongoDB MongoClient construct	データベース を 返し ます
MongoDB MongoClient construct MongoClient $conn string $name	新しい データベース を 作成 する
MongoDB create Collection $name	コレクション の 名前
MongoDB create Collection $capped	コレクション が 固定 サイズ か どう か
MongoDB create Collection $max	コレクション が 固定 サイズ の 場合 に 、 コレクション 内 に 格納 できる 要素 の 最大 数
MongoDB create Collection $autoIndexId	capped が true の とき に これ を false に する と 、 _ id フィールド 上 で の 自動 的 な インデックス 作成 を 無効 化 でき ます
MongoDB create Collection $options	コレクション の オプション を 含む 配列
MongoDB create Collection $size	コレクション が 固定 サイズ の 場合 に その バイト 数 を 指定 し ます
MongoDB MongoCollection create Collection	新しい コレクション を あらわす コレクションオブジェクト を 返し ます
MongoDB MongoCollection create Collection string $name array $options	コレクション を 作成 する
MongoDB create DBRef $collection	データベース 参照 が 指す コレクション
MongoDB create DBRef $document_or_id	配列 あるい は オブジェクト を 渡し た 場合 は 、 その _ id フィールド を 参照 id として 利用 し ます
MongoDB array create DBRef	データベース 参照 配列 を 返し ます
MongoDB array create DBRef string $collection mixed $document_or_id	データベース 参照 を 作成 する
MongoDB bool force Error	データベース から の 応答 を 返し ます
MongoDB bool force Error	データベース の エラー を 作成 する
MongoDB get $name	コレクション の 名前
MongoDB MongoCollection get	コレクション を 返し ます
MongoDB MongoCollection get string $name	コレクション を 取得 する
MongoDB get Collection Names $options	コレクション の 一覧 を 取得 する 際 の オプション の 配列
MongoDB array get Collection Names	コレクション の 名前 を 文字 列 の 配列 で 返し ます
MongoDB array get Collection Names array $options	この データベース の すべ て の コレクション 名 の 配列 を 取得 する
MongoDB int get Profiling Level	プロファイリングレベル を 返し ます
MongoDB int get Profiling Level	この データベース の プロファイリングレベル を 取得 する
MongoDB bool get Slave Okay	この インスタンス の slaveokay の 値 を 返し ます
MongoDB bool get Slave Okay	この データベース の slaveokay 設定 を 取得 する
MongoDB array last Error	エラー が あっ た 場合 は それ を 返し ます
MongoDB array last Error	直近 の データベース 操作 で エラー が 発生 し た かどう か を 調べる
MongoDB list Collections $options	コレクション の 一覧 を 取得 する 際 の オプション の 配列
MongoDB array list Collections	mongocollection オブジェクト の 配列 を 返し ます
MongoDB array list Collections array $options	この データベース 内 の すべ て の コレクション の mongocollection オブジェクト の 配列 を 取得 する
MongoDB repair $preserve_cloned_files	修復 に 失敗 し た 場合 に 、 コピー し た ファイル を 保持 し ます
MongoDB repair $backup_original_files	元 ファイル を バックアップ する かどう か
MongoDB array repair	データベース の 応答 を 返し ます
MongoDB array repair bool $preserve_cloned_files bool $backup_original_files	この データベース を 修復 ・ 圧縮 する
MongoDB array reset Error	データベース から の 応答 を 返し ます
MongoDB array reset Error	データベース で 発生 し たすべて の エラー を クリア する
MongoDBRef create $id	リンク する オブジェクト の _ id フィールド
MongoDBRef create $collection	コレクション の 名前 データベース 名 を 除く
MongoDBRef create $database	データベース の 名前
MongoDBRef array create	参照 を 返し ます
MongoDBRef array create string $collection mixed $id string $database	新しい データベース 参照 を 作成 する
MongoGridFS construct $files	オプション の コレクション 名 プレフィックス
MongoGridFS construct $db	データベース
MongoGridFS MongoDB construct MongoDB $db string $prefix mixed $chunks	新しい ファイルコレクション を 作成 する
MongoGridFSFile resource get Resource	ファイル を 読み込む ため に 使う リソース を 返し ます
MongoGridFSFile resource get Resource	格納 さ れ た ファイル を 読む ため に 使う リソース を 返す
MongoId int get Timestamp	この id が 作ら れ た とき の エポック から の 経過 秒数 を 返し ます
MongoId int get Timestamp	この id が 作ら れ た とき の エポック から の 経過 秒数 を 取得 する
MongoLog callable get Callback	コールバック 関数 を 返し ます
MongoLog callable get Callback	以前 に 設定 さ れ た コールバック 関数 の 名前 を 取得 する
MongoLog int get Level	現在 記録 さ れ て いる ログレベル を 返し ます
MongoLog int get Level	現在 記録 さ れ て いる ログレベル を 取得 する
MongoLog int get Module	現在ログ を 記録 し て いる モジュール を 返し ます
MongoLog int get Module	現在ログ を 記録 し て いる モジュール を 取得 する
MongoLog set Callback $message	ログメッセージ
MongoLog set Callback $level	mongolog レベル 定数 のいずれ か
MongoLog set Callback $module	mongolog モジュール 定数 のいずれ か
MongoLog set Callback $log_function	イベント に 対応 し て 呼ば れる コールバック 関数
MongoLog void set Callback callable $log_function	イベント に 対応 し て 呼ば れる コールバック 関数 を 設定 する
MongoLog set Level $level	記録 し たい ログ の レベル
MongoLog void set Level int $level	記録 する ログレベル を 設定 する
MongoPool array info	各 接続 プール に は 識別子 が あり 、 ホスト 名 から 始まり ます
MongoPool array info	すべて の 接続 プール に関する 情報 を 返す
MongoRegex construct $regex	正規 表現 / expr / flags 形式 の 文字列
MongoRegex string construct	新しい 正規 表現 を 返し ます
MongoRegex string construct string $regex	新しい 正規 表現 を 作成 する
MongoRegex string to String	正規 表現 を & quot ; / expr / flags &quot ; 形式 で 返し ます
MongoRegex string to String	この 正規 表現 の 文字 列表 現
MongoResultException array get Document	すべて の 結果 ドキュメント を 配列 で 返し ます
MongoResultException array get Document	結果 ドキュメント を 取得 する
MongoTimestamp construct $inc	増分
MongoTimestamp construct $sec	エポック 1 jan 1 9 7 0 0 0 : 0 0 : 0 0
MongoTimestamp int construct	新しい タイムスタンプ を 返し ます
MongoTimestamp int construct int $sec int $inc	新しい タイムスタンプ を 作成 する
MongoTimestamp string to String	この タイムスタンプ が 表す 、 エポック から の 経過 秒数 を 返し ます
MongoTimestamp string to String	この タイムスタンプ を 文字 列形 式 で 返す
MultipleIterator contains Iterator $iterator	調べ たい イタレータ
MultipleIterator bool contains Iterator	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
MultipleIterator bool contains Iterator Iterator $iterator	イテレータ が アタッチ さ れ て いる かど う か を 調べる
MultipleIterator int count Iterators	アタッチ さ れ て いる イテレータインスタンス の 数 を integer で 返し ます
MultipleIterator int count Iterators	アタッチ さ れ て いる イテレータインスタンス の 数 を 取得 する
MultipleIterator array current	アタッチ さ れ て いる 各 イテレータ の 現在 の 値 を 含む 配列 を 返し ます
MultipleIterator array current	登録 さ れ て いる イテレータインスタンス を 取得 する
MultipleIterator detach Iterator $iterator	デタッチ する イテレータ
MultipleIterator void detach Iterator Iterator $iterator	イテレータ を デタッチ する
MultipleIterator int get Flags	フラグ について の 情報 を integer で 返し ます
MultipleIterator int get Flags	フラグ の 情報 を 取得 する
MultipleIterator array key	登録 さ れ て いる イテレータインスタンス を 取得 し ます の 配列 を 返し ます
MultipleIterator array key	登録 さ れ て いる イテレータインスタンス を 取得 する
MultipleIterator void next	アタッチ し て いる すべ て の イテレータインスタンス を 次 に 移動 さ せる
MultipleIterator void rewind	アタッチ し て いる すべ て の イテレータインスタンス を 巻き戻す
MultipleIterator set Flags $flags	設定 する フラグ
MultipleIterator void set Flags int $flags	フラグ を 設定 する
MultipleIterator bool valid	サブイテレータ の ひとつ ある い はすべて フラグ によって 異 なり ます が 有効 な 場合 に true 、 それ 以外 の 場合 に false を 返し ます
MultipleIterator bool valid	サブイテレータ の 有効 性 を 調べる
Mutex create $lock	true に する と 、 ミューテックス を 呼び出し 元用 に ロック し て から ハンドル を 返し ます
Mutex long create	新しく 作り 、 オプション で ロック し た ミューテックス の ハンドル を 返し ます
Mutex long create boolean $lock	ミューテックス を 作る
Mutex destroy $mutex	mutex :: create を 呼ん で 取得 し た ミューテックス へ の ハンドル
Mutex boolean destroy	成功 し た かどう か を 返し ます
Mutex boolean destroy long $mutex	ミューテックス を 破棄 する
Mutex lock $mutex	mutex :: create を 呼ん で 取得 し た ハンドル
Mutex boolean lock	成功 し た かどう か を 返し ます
Mutex boolean lock long $mutex	ミューテックス を 確保 する
function bool mysqli report int $flags	mysqli _driver -& gt ;report _mode の エイリアス
NoRewindIterator construct $iterator	使用 する イテレータ
NoRewindIterator Iterator construct	渡さ れ た イテレータ に も とづく norewinditerator を 返し ます
NoRewindIterator Iterator construct Iterator $iterator	norewinditerator を 作成 する
NoRewindIterator mixed current	現在 の 値 を 返し ます
NoRewindIterator mixed current	現在 の 値 を 取得 する
NoRewindIterator void next	次 の 要素 に 移動 する
NoRewindIterator void rewind	内部 イテレータ の 巻き戻し 操作 を 阻止 する
NoRewindIterator bool valid	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
NoRewindIterator bool valid	イテレータ の 有効 性 を 検証 する
OAuth construct $auth_type	この オプション の パラメータ で 、 oauth パラメータ を コンシューマ に 渡す 方法 を 定義 し ます
OAuth construct $consumer_key	サービスプロバイダ が 提供 する consumer key
OAuth construct $signature_method	この オプション の パラメータ で 、 使用 する 署名 方式 を 定義 し ます
OAuth construct $consumer_secret	サービスプロバイダ が 提供 する consumer secret
OAuth string construct string $consumer_key string $consumer_secret string $signature_method int $auth_type	新しい oauth オブジェクト を 作成 する
OAuth void destruct	デストラクタ
OAuth bool disable Debug	true
OAuth bool disable Debug	デバッグ を 無効 に する
OAuth bool disable Redirects	true
OAuth bool disable Redirects	リダイレクト を 無効 に する
OAuth bool disable SSLChecks	true
OAuth bool disable SSLChecks	ssl チェック を 無効 に する
OAuth bool enable Redirects	true
OAuth bool enable Redirects	リダイレクト を 有効 に する
OAuth bool enable SSLChecks	true
OAuth bool enable SSLChecks	ssl チェック を 有効 に する
OAuth get Access Token $auth_session_handle	認証 セッションハンドル
OAuth get Access Token $verifier_token	1
OAuth get Access Token $http_method	利用 する http メソッド
OAuth get Access Token $access_token_url	アクセストークン api の url
OAuth array get Access Token	成功 し た 場合 は oauth レスポンス を パース し た 配列 、 失敗 し た 場合 は false を 返し ます
OAuth array get Access Token string $access_token_url string $verifier_token string $http_method	アクセストークン を 取得 する
OAuth array get CAPath	認証局 の 情報 を 含む 配列 を 返し ます
OAuth array get CAPath	ca 情報 を 取得 する
OAuth string get Last Response Headers	最後 の レスポンス の ヘッダ を 文字列 で 返し ます
OAuth string get Last Response Headers	最後 の レスポンス の ヘッダ を 取得 する
OAuth array get Last Response Info	直近 の リクエスト に対する レスポンス の 情報 を 含む 配列 を 返し ます
OAuth array get Last Response Info	直近 の レスポンス の http 情報 を 取得 する
OAuth get Request Header $http_method	リクエスト の http メソッド
OAuth get Request Header $url	リクエスト の url
OAuth get Request Header $extra_parameters	パラメータ 文字 列 あるい は 配列
OAuth string get Request Header	生成 さ れ た リクエストヘッダ を 文字列 で 返し ます
OAuth string get Request Header string $http_method string $url mixed $extra_parameters	oauth ヘッダ 文字 列 シグネチャ を 生成 する
OAuth get Request Token $callback_url	oauth コールバック url
OAuth get Request Token $request_token_url	リクエストトークン api の url
OAuth get Request Token $http_method	利用 する http メソッド
OAuth array get Request Token	成功 し た 場合 は oauth レスポンス を パース し た 配列 、 失敗 し た 場合 は false を 返し ます
OAuth array get Request Token string $request_token_url string $callback_url string $http_method	リクエストトークン を 取得 する
OAuth set Nonce $nonce	oauth _nonce の 値
OAuth mixed set Nonce	成功 し た 場合 に true を 返し ます
OAuth mixed set Nonce string $nonce	続く リクエスト 用 の ノンス を 設定 する
OAuth set Request Engine $reqengine	使い たい リクエストエンジン
OAuth void set Request Engine int $reqengine	setrequestengine
OAuth bool set SSLChecks	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
OAuth bool set SSLChecks int $sslcheck	リクエスト に 固有 の ssl チェック を 調整 する
OAuth set Timestamp $timestamp	タイムスタンプ
OAuth mixed set Timestamp	true を 返し ます
OAuth mixed set Timestamp string $timestamp	タイムスタンプ を 設定 する
OAuth set Token $token	oauth トークン
OAuth set Token $token_secret	oauth トークン secret
OAuth bool set Token	true
OAuth bool set Token string $token string $token_secret	トークン と secret を 設定 する
OAuth set Version $version	oauth の バージョン
OAuth bool set Version	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
OAuth bool set Version string $version	oauth の バージョン を 設定 する
OAuthProvider add Required Parameter $req_params	必須 パラメータ
OAuthProvider bool add Required Parameter	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
OAuthProvider bool add Required Parameter string $req_params	必須 パラメータ を 追加 する
OAuthProvider void callconsumer Handler	consumernoncehandler コールバック を コール する
OAuthProvider void calltoken Handler	tokennoncehandler コールバック を コール する
OAuthProvider check OAuth Request $method	http メソッド
OAuthProvider check OAuth Request $uri	オプション の uri 、 あるい は エンドポイント
OAuthProvider void check OAuth Request string $uri string $method	oauth リクエスト を チェック する
OAuthProvider construct $params_array	これら の オプションパラメータ を 設定 できる の は cli sapi のみ です
OAuthProvider array construct	oauthprovider オブジェクト を 返し ます
OAuthProvider array construct array $params_array	新しい oauthprovider オブジェクト を 作る
OAuthProvider consumer Handler $callback_function	callable 関数 名
OAuthProvider void consumer Handler callable $callback_function	consumerhandler コールバック を 設定 する
OAuthProvider void is2 Legged Endpoint mixed $params_array	is 2leggedendpoint
OAuthProvider remove Required Parameter $req_params	削除 し たい 必須 パラメータ
OAuthProvider bool remove Required Parameter	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
OAuthProvider bool remove Required Parameter string $req_params	必須 パラメータ を 削除 する
OAuthProvider set Param $param_val	パラメータ の 値
OAuthProvider set Param $param_key	パラメータ の キー
OAuthProvider bool set Param	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
OAuthProvider bool set Param string $param_key mixed $param_val	パラメータ を 設定 する
OCI-Collection append $value	コレクション に 追加 する 値 を 指定 し ます
OCI-Collection bool append	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
OCI-Collection bool append mixed $value	コレクション に 要素 を 追加 する
OCI-Collection assign $from	oci -collection の インスタンス を 指定 し ます
OCI-Collection bool assign	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
OCI-Collection bool assign OCI-Collection $from	コレクション に 他 の 存在 する コレクション から 値 を 割り 当てる
OCI-Collection int max	コレクション 内 の 要素 の 最大 数 、 あるい は エラー 時 に false を 返し ます
OCI-Collection int max	コレクション 内 の 要素 の 最大 数 を 取得 する
OCI-Collection int size	コレクション 内 の 要素 の 数 、 もしく は エラー 時 に false を 返し ます
OCI-Collection int size	コレクション の サイズ を 返す
OCI-Lob append $lob_from	コピー する lob
OCI-Lob bool append	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
OCI-Lob bool append OCI-Lob $lob_from	ラージオブジェクト の データ を 他 の ラージオブジェクト に 追加 する
OCI-Lob bool close	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
OCI-Lob bool close	lob ディスクリプタ を 閉じる
OCI-Lob int erase	消去 さ れ た 実際 の 文字 数 あるい は バイト 数 、 失敗 し た 場合 に false を 返し ます
OCI-Lob int erase int $offset int $length	内部 lob データ の 特定 の 位置 を 消去 する
OCI-Lob export $length	出力 する データ の 長さ
OCI-Lob export $filename	ファイル へ の パス
OCI-Lob export $start	出力 を 開始 する 位置
OCI-Lob bool export	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
OCI-Lob bool export string $filename int $start int $length	lob の 内容 を ファイル に 出力 する
OCI-Lob flush $flag	デフォルト で は リソース は 解放 さ れませ ん が 、 フラグ oci _lob _buffer _free を 使用 する こと で 明示 的 に 行う こと が でき ます
OCI-Lob bool flush	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
OCI-Lob bool flush int $flag	lob の バッファ を サーバー に フラッシュ する 、 あるい は 書き込む
OCI-Lob bool free	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
OCI-Lob bool free	lob ディスクリプタ に 関連 付け られ たり ソース を 解放 する
OCI-Lob import $filename	ファイル へ の パス
OCI-Lob bool import	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
OCI-Lob bool import string $filename	ファイルデータ を lob に インポート する
OCI-Lob read $length	読み込む バイト 数
OCI-Lob string read	読み込ん だ 内容 を 表す 文字 列 、 失敗 し た 場合 に false を 返し ます
OCI-Lob string read int $length	ラージオブジェクト の 一部 を 読み込む
OCI-Lob save $data	保存 する データ
OCI-Lob save $offset	ラージオブジェクト の 先頭 から の オフセット を 指定 する ため に 利用 し ます
OCI-Lob bool save	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
OCI-Lob bool save string $data int $offset	データ を ラージオブジェクト に 保存 する
OCI-Lob seek $offset	内部 ポインタ を whence で 示さ れ た 位置 から 移動 さ せる バイト 数 を 表し ます
OCI-Lob seek $whence	以下 のい ずれ か です
OCI-Lob bool seek	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
OCI-Lob bool seek int $offset int $whence	ラージオブジェクト の 内部 ポインタ を セット する
OCI-Lob set Buffering $on_off	true は 有効 、 false は 無効 を 表し ます
OCI-Lob bool set Buffering	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
OCI-Lob bool set Buffering bool $on_off	現在 の ラージオブジェクト 用 の バッファリング 状態 を 変更 する
OCI-Lob int size	ラージオブジェクト の サイズ を 返し ます
OCI-Lob int size	ラージオブジェクト の サイズ を 返す
OCI-Lob int tell	lob の 内部 ポインタ の 現在 位置 を 返し ます
OCI-Lob int tell	ラージオブジェクト の 内部 ポインタ の 現在 位置 を 返す
OCI-Lob truncate $length	指定 し た 場合 は 、 この メソッド は ラージオブジェクト を length バイト に 切り つめ ます
OCI-Lob bool truncate	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
OCI-Lob bool truncate int $length	ラージオブジェクト を 切り つめる
OCI-Lob write $data	lob に 書き込む データ
OCI-Lob write $length	この パラメータ を 指定 する と 、 length バイト 書き込む か data の 終端 に 達 する か 、 いずれ か 早い 方 の 後 に 書き込み が 停止 し ます
OCI-Lob int write	書き込ん だ バイト 数 、 失敗 し た 場合 に false を 返し ます
OCI-Lob int write string $data int $length	データ を ラージオブジェクト に 書き込む
OuterIterator Iterator get Inner Iterator	現在 の エントリ の 内部 イテレータ を 返し ます
OuterIterator Iterator get Inner Iterator	現在 の エントリ の 内部 イテレータ を 返す
ParentIterator bool accept	受け入れ 可能 な 場合 に true 、 それ 以外 の 場合 に false を 返し ます
ParentIterator bool accept	受け入れ 可能 か どう か を 調べる
ParentIterator construct $iterator	作成 する 元 と なる イテレータ
ParentIterator RecursiveIterator construct	parentiterator を 返し ます
ParentIterator RecursiveIterator construct RecursiveIterator $iterator	parentiterator を 作成 する
ParentIterator ParentIterator get Children	オブジェクト を 返し ます
ParentIterator ParentIterator get Children	parentiterator に 含まれる 内部 イテレータ の 子 を 返す
ParentIterator bool has Children	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
ParentIterator bool has Children	内部 イテレータ の 現在 の 要素 が 子 を 持つ かど う か を チェック する
ParentIterator void next	イテレータ を 前 に 移動 する
ParentIterator void rewind	イテレータ を 巻き戻す
PDO bool commit	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
PDO bool commit	トランザクション を コミット する
PDO cubrid schema $col_name	スキーマ を 知り たい カラム
PDO cubrid schema $schema_type	知り たい スキーマ の 型
PDO cubrid schema $table_name	スキーマ を 知り たい テーブル
PDO array cubrid schema	処理 に 成功 する と 、 スキーマ 情報 を 含む 配列 を 返し ます
PDO array cubrid schema int $schema_type string $table_name string $col_name	指定 し た スキーマ 情報 を 取得 する
PDO bool in Transaction	トランザクション が 現在 アクティブ な 場合 に true 、 そう で ない とき に false を 返し ます
PDO bool in Transaction	トランザクション 内 か どう か を 調べる
PDO last Insert Id $name	id が 返さ れる べき シーケンスオブジェクト 名 を 指定 し ます
PDO string last Insert Id	もし name パラメータ に シーケンス 名 が 指定 さ れ なかっ た 場合 、 pdo :: lastinsertid は データベース に 挿入 さ れ た 最後 の 行 の 行id に 相当 する 文字 列 を 返し ます
PDO string last Insert Id string $name	最後 に 挿入 さ れ た 行 の id あるい は シーケンス の 値 を 返す
PDO string pgsql LOBCreate	新しく 作成 さ れ た ラージオブジェクト の oid 、 あるい は 失敗 し た 場合 に false を 返し ます
PDO string pgsql LOBCreate	新しい ラージオブジェクト を 作成 する
PDO pgsql LOBOpen $oid	ラージオブジェクト の id
PDO pgsql LOBOpen $mode	モード が r の 場合 、 読み込み 用 の ストリーム を オープン し ます
PDO resource pgsql LOBOpen	成功 し た 場合 に ストリームリソース 、 失敗 し た 場合 に false を 返し ます
PDO resource pgsql LOBOpen string $oid string $mode	既存 の ラージオブジェクト の ストリーム を オープン する
PDO pgsql LOBUnlink $oid	ラージオブジェクト の id
PDO bool pgsql LOBUnlink	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
PDO bool pgsql LOBUnlink string $oid	ラージオブジェクト を 削除 する
PDO prepare $driver_options	この 配列 は 、 この メソッド によって 返さ れる pdostatement オブジェクト に対し て 1 もしく は それ 以上 の key =& gt ;value の 組 を 含み ます
PDO prepare $statement	これ は 対象 の データベースサーバー に対し て 有効 な sql 文 の テンプレート で なけれ ば なり ませ ん
PDO PDOStatement prepare	もし データベースサーバー が 正常 に 文 を 準備 する 場合 、 pdo :: prepare は pdostatement オブジェクト を 返し ます
PDO PDOStatement prepare string $statement array $driver_options	文 を 実行 する 準備 を 行い 、 文オブジェクト を 返す
PDO quote $string	クオート さ れる 文字 列 を 指定 し ます
PDO quote $parameter_type	クオート する スタイル を 変更 する ため 、 ドライバ に データ 型 の ヒント を 提供 し ます
PDO string quote	理論 上安 全 な クオート さ れ た sql ステートメント の 文字列 を 返し ます
PDO string quote string $string int $parameter_type	クエリ 用 の 文字列 を クオート する
PDO bool roll Back	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
PDO bool roll Back	トランザクション を ロールバック する
PDOStatement bind Column $driverdata	ドライバ の オプションパラメータ
PDOStatement bind Column $maxlen	領域 を 事前 に 確保 する ため の ヒント
PDOStatement bind Column $param	カラム が バインド さ れる php 変数 名 を 指定 し ます
PDOStatement bind Column $column	結果 セット 中 の カラム 番号 1 から 始まる を 指定 し ます
PDOStatement bind Column $type	パラメータ の データ 型 を pdo :: param _* 定数 で 指定 し ます
PDOStatement bool bind Column	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
PDOStatement bool bind Column mixed $column mixed $param int $type int $maxlen mixed $driverdata	カラム を php 変数 に バインド する
PDOStatement int column Count	pdostatement オブジェクト に 相当 する 結果 セット に ある カラム 数 を 返し ます
PDOStatement int column Count	結果 セット 中 の カラム 数 を 返す
PDOStatement execute $input_parameters	実行 さ れる sql 文 の 中 の バインドパラメータ と 同数 の 要素 から なる 、 値 の 配列
PDOStatement bool execute	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
PDOStatement bool execute array $input_parameters	プリペアドステートメント を 実行 する
PDOStatement fetch $cursor_orientation	スクロール 可能 な カーソル を 表す pdostatement オブジェクト の 場合 、 この 値 により 呼び出し 側 に 返さ れる 行 を 定義 し ます
PDOStatement fetch $fetch_style	次 の レコード を 呼び出し元 に 返す 方法 を 制御 し ます
PDOStatement fetch $offset	スクロール 可能 な カーソル を 表す pdostatement オブジェクト の 場合 で 、 cursor _orientation パラメータ が pdo :: fetch _ori _abs に 設定 さ れ た 場合 、 この 値 により 取得 さ れる 結果 セット の 行 の 絶対 位置 が 指定 さ れ ます
PDOStatement mixed fetch	この 関数 が 成功 し た 場合 の 返り値 は 、 取得 形式 によって 異 なり ます
PDOStatement mixed fetch int $fetch_style int $cursor_orientation int $cursor_offset	結果 セット から 次 の 行 を 取得 する
PDOStatement fetch Column $column_number	行 から 処理 し たい 0 で 始まる カラム 番号 を 指定 し ます
PDOStatement mixed fetch Column	pdostatement :: fetchcolumn は 結果 セット の 次行 から 単 一 カラム を 返し ます
PDOStatement mixed fetch Column int $column_number	結果 セット の 次行 から 単 一 カラム を 返す
PDOStatement mixed get Attribute	属性 の 値 を 返し ます
PDOStatement mixed get Attribute int $attribute	文 の 属性 を 取得 する
PDOStatement int row Count	行 の 数 を 返し ます
PDOStatement int row Count	直近 の sql ステートメント によっ て 作用 し た 行数 を 返す
PDOStatement bool set Attribute	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
PDOStatement bool set Attribute int $attribute mixed $value	文 の 属性 を 設定 する
Phar string api Version	api の バージョン を 、 & quot ; 1
Phar string api Version	api の バージョン を 返す
Phar can Compress $type	phar :: gz あるい は phar :: bz2 のいずれか を 指定 し 、 指定 し た 圧縮 アルゴリズム で の 圧縮 が 可能 か どう か を 調べ ます
Phar bool can Compress	圧縮 / 展開 が 可能 な 場合 に true 、 そう で ない 場合 に false を 返し ます
Phar bool can Compress int $type	phar 拡張 モジュール が zlib あるい は bzip 2 による 圧縮 を サポート し て いる かど う か を 返す
Phar convert To Data $extension	この パラメータ は 、 変換 後 の アーカイブ の デフォルト の ファイル 拡張子 を 変更 し ます
Phar convert To Data $format	これ は phar :: tar あるい は phar :: zip のいずれ かと なり ます
Phar convert To Data $compression	アーカイブ 全体 の 圧縮 を 行わ ない 場合 は phar :: none 、 zlib による 圧縮 の 場合 は phar :: gz 、 そして bzip による 圧縮 の 場合 は phar :: bz2 のいずれか を 指定 し ます
Phar PharData convert To Data	この メソッド は 、 成功 し た 場合 に phardata オブジェクト を 返し ます
Phar PharData convert To Data int $format int $compression string $extension	phar アーカイブ を 実行 可能 で ない tar あるい は zip ファイル に 変換 する
Phar mixed get Metadata	phar アーカイブ の メタデータ として 保存 さ れ て いる 、 シリアライズ 可能 な 任意 の php 変数 を 返し ます
Phar mixed get Metadata	phar アーカイブ の メタデータ を 返す
Phar array get Supported Signatures	md 5 、 sha - 1 、 sha - 2 5 6 、 sha - 5 1 2 あるい は openssl を 含む 配列 を 返し ます
Phar array get Supported Signatures	サポート する シグネチャ 型 の 配列 を 返す
Phar bool has Metadata	メタデータ が 設定 さ れ て いる 場合 に true 、 さ れ て い ない 場合 に false を 返し ます
Phar bool has Metadata	ファイル が グローバル な メタデータ を 持つ かど う か を 返す
Phar void intercept File Funcs	fopen 、 file _get _contents 、 opendir など の stat 関連 の 関数 を すべ て phar に 横取り させる
Phar is Valid Phar Filename $filename	まだ 作成 さ れ て い ない phar アーカイブ の 名前 あるい は フルパス
Phar is Valid Phar Filename $executable	この パラメータ は 、 指定 し た 名前 の ファイル を phar の 実行 可能 アーカイブ として 扱う か データ のみ の 非実 行可 能 アーカイブ として 扱う か を 指定 し ます
Phar bool is Valid Phar Filename	正しい 形式 の ファイル で ある 場合 に true 、 そう で ない 場合 に false を 返し ます
Phar bool is Valid Phar Filename string $filename bool $executable	指定 し た ファイル 名 が 正しい 形式 の phar ファイル か どう か を 返す
Phar bool is Writable	phar アーカイブ が 変更 可能 な 場合 に true を 返し ます
Phar bool is Writable	phar アーカイブ が 変更 可能 な 場合 に true を 返す
Phar load Phar $filename	オープン する phar アーカイブ へ の 完全 パス あるい は 相対 パス
Phar load Phar $alias	この phar アーカイブ を さす 際 に 使用 する エイリアス
Phar bool load Phar	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
Phar bool load Phar string $filename string $alias	任意 の phar アーカイブ を 、 エイリアス を 指定 し て 読み込む
Phar mung Server $munglist	request _uri 、 php _self 、 script _name および script _filename を 含む 配列
Phar void mung Server array $munglist	最大 4 つまで の $ _ server 変数 を 実行 時 に 変更 さ せる
Phar offset Exists $offset	phar 内 で 探す ファイル 名 相対パス
Phar bool offset Exists	ファイル が phar 内 に 存在 する 場合 に true 、 しない 場合 に false を 返し ます
Phar bool offset Exists string $offset	ファイル が phar 内 に 存在 する かど う か を 調べる
Phar offset Get $offset	phar 内 で 探す ファイル 名 相対パス
Phar int offset Get	pharfileinfo オブジェクト を 返し ます
Phar int offset Get string $offset	指定 し た ファイル の pharfileinfo オブジェクト を 取得 する
Phar running $retphar	false の 場合 は phar アーカイブ の ディスク 上 で の フルパス を 返し ます
Phar string running	ファイル 名 が 正しい 形式 の 場合 に ファイル 名 、 それ 以外 の 場合 に 空文 字列 を 返し ます
Phar string running bool $retphar	現在 実行 中 の phar アーカイブ の フルパス あるい は 完全 な phar url を 返す
Phar void stop Buffering	phar アーカイブ へ の 書き込み リクエスト の バッファリング を 終了 し 、 変更 内容 を ディスク に 書き込む
Phar unlink Archive $archive	ディスク 上 の phar アーカイブ へ の パス
Phar bool unlink Archive	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
Phar bool unlink Archive string $archive	phar アーカイブ を ディスク と メモリ から 完全 に 削除 する
Phar web Phar $rewrites	書き換え 関数 は 、 唯一 の パラメータ として 文字 列 を 受け取り 、 string あるい は false を 返さ ない といけ ませ ん
Phar web Phar $f404	ファイル が 見つ から ない とき に 実行 する スクリプト の 場所
Phar web Phar $mimetypes	ファイル の 拡張子 と mime タイプ を 関連 付け た 配列
Phar web Phar $index	phar の 中 で ディレクトリインデックス と なる ファイル の 場所
Phar web Phar $alias	phar : / / url でこの アーカイブ を 指す際に 、 フルパス の 代わり に 使用 する エイリアス
Phar void web Phar string $alias string $index string $f404 array $mimetypes callable $rewrites	ウェブベース の phar で 使用 する フロントコントローラ
PharData add Empty Dir $dirname	phar アーカイブ 内 に 作成 する 空 の ディレクトリ の 名前
PharData bool add Empty Dir	返り値 は あり ませ ん
PharData bool add Empty Dir string $dirname	空 の ディレクトリ を tar / zip アーカイブ に 追加 する
Phar add File $file	phar アーカイブ に 追加 し たい ディスク 上 の ファイル へ の フルパス あるい は 相対 パス
Phar add File $localname	ファイル を アーカイブ 内 に 格納 する とき の パス
Phar void add File string $file string $localname	ファイルシステム 上 の ファイル を phar アーカイブ に 追加 する
PharData build From Iterator $iter	phar ファイル と 実際 の 場所 の 関連 を 返す イテレータ 、 あるい は splfileinfo オブジェクト を 返す イテレータ
PharData build From Iterator $base_directory	splfileinfo オブジェクト を 返す イテレータ を 指定 し た 際 、 tar / zip アーカイブ へ の 追加 時 に フルパス から 取り除く 部分
PharData array build From Iterator	phardata :: buildfromiterator は 連想 配列 を 返し ます
PharData array build From Iterator Iterator $iter string $base_directory	イテレータ から tar あるい は zip アーカイブ を 作成 する
PharData compress Files $compression	圧縮 を 行う 場合 は phar :: gz あるい は phar :: bz2 、 圧縮 を 解除 する ため に は phar :: none のいずれか を 指定 し なけれ ば なり ませ ん
PharData bool compress Files	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
PharData bool compress Files int $compression	現在 の tar / zip アーカイブ 内 の すべ て の ファイル を 圧縮 する
PharData convert To Data $extension	この パラメータ は 、 変換 後 の アーカイブ の デフォルト の ファイル 拡張子 を 変更 し ます
PharData convert To Data $format	これ は phar :: tar あるい は phar :: zip のいずれ かと なり ます
PharData convert To Data $compression	アーカイブ 全体 の 圧縮 を 行わ ない 場合 は phar :: none 、 zlib による 圧縮 の 場合 は phar :: gz 、 そして bzip による 圧縮 の 場合 は phar :: bz2 のいずれか を 指定 し ます
PharData PharData convert To Data	この メソッド は 、 成功 し た 場合 に phardata オブジェクト を 返し ます
PharData PharData convert To Data int $format int $compression string $extension	phar アーカイブ を 実行 可能 で ない tar あるい は zip ファイル に 変換 する
PharData bool copy	成功 し た 場合 に true を 返し ます
PharData bool copy string $oldfile string $newfile	phar アーカイブ 内 の ファイル を 、 phar 内 で 別 の 新しい ファイル として コピー する
PharData delete $entry	削除 し たい ファイル の 、 アーカイブ 内 で の パス
PharData bool delete	成功 し た 場合 に true を 返し ます
PharData bool delete string $entry	tar / zip アーカイブ 内 の ファイル を 削除 する
PharData extract To $pathto	指定 し た files の 展開 先 の パス
PharData extract To $overwrite	true に する と 既存 の ファイル を 上書き し ます
PharData extract To $files	展開 し たい ファイル 名 / ディレクトリ 名 、 あるい は その 配列
PharData bool extract To	成功 し た 場合 に true を 返し ます
PharData bool extract To string $pathto string|array $files bool $overwrite	tar / zip アーカイブ の 内容 を ディレクトリ に 展開 する
PharData bool is Writable	tar / zip アーカイブ が 変更 可能 な 場合 に true を 返し ます
PharData bool is Writable	tar / zip アーカイブ が 変更 可能 な 場合 に true を 返す
PharData offset Set $value	ファイル の 内容
PharData offset Set $offset	tar あるい は zip アーカイブ 内 で 変更 する ファイル 名 相対パス
PharData void offset Set string $offset string $value	tar / zip の 内部 の ファイル に 、 外部 ファイル あるい は 文字列 の 内容 を 設定 する
PharData offset Unset $offset	tar / zip アーカイブ 内 で 変更 する ファイル 名 相対パス
PharData bool offset Unset	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
PharData bool offset Unset string $offset	ファイル を tar / zip アーカイブ から 削除 する
PharData set Alias $alias	この アーカイブ を 指す とき に 使用 する 短い 文字列
PharData bool set Alias string $alias	ダミー 関数 phar :: setalias は phardata で は 使用 不能
PharFileInfo bool compress	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
PharFileInfo bool compress int $compression	現在 の phar エントリ を zlib あるい は bzip 2 のいずれか で 圧縮 する
PharFileInfo bool decompress	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
PharFileInfo bool decompress	phar 内 の 現在 の phar エントリ の 圧縮 を 解除 する
PharFileInfo bool del Metadata	成功 し た 場合 に true を 返し ます
PharFileInfo bool del Metadata	エントリ の メタデータ を 削除 する
PharFileInfo int get Compressed Size	ディスク 上 の phar アーカイブ 内 の ファイル の バイト 数 を 返し ます
PharFileInfo int get Compressed Size	phar アーカイブ 内 で の 実際 の ファイル の 大きさ 圧縮 さ れ た 状態 を 返す
PharFileInfo int get CRC32	phar アーカイブ 内 の ファイル の crc 3 2 チェックサム を 返し ます
PharFileInfo int get CRC32	crc 3 2 コード を 返す か 、 crc が チェック でき ない 場合 に 例外 を スロー する
PharFileInfo mixed get Metadata	ファイル の メタデータ として 保存 さ れ て いる 、 シリアライズ 可能 な 任意 の php 変数 を 返し ます
PharFileInfo mixed get Metadata	ファイル ととも に 保存 さ れ て いる 、 ファイル 固有 の メタデータ を 返す
PharFileInfo int get Phar Flags	phar フラグ を 返し ます 現在 の 実装 で は 、 常 に 0 と なり ます
PharFileInfo int get Phar Flags	phar ファイルエントリ の フラグ を 返す
PharFileInfo bool has Metadata	メタデータ が 設定 さ れ て い ない か あるい は null が 設定 さ れ て いる 場合 に false 、 null 以外 の メタデータ が 設定 さ れ て いる 場合 に true を 返し ます
PharFileInfo bool has Metadata	エントリ の メタデータ を 返す
PharFileInfo is Compressed $compression_type	phar :: gz あるい は phar :: bz2 のいずれ か
PharFileInfo bool is Compressed	phar アーカイブ 内 の ファイル が 圧縮 さ れ て いる 場合 に true 、 そう で ない 場合 に false を 返し ます
PharFileInfo bool is Compressed int $compression_type	エントリ が 圧縮 さ れ て いる かど う か を 調べる
PharFileInfo bool is CRCChecked	その ファイル の crc が 検証 さ れ て いる 場合 に true 、 そう で ない 場合 に false を 返し ます
PharFileInfo bool is CRCChecked	ファイルエントリ の crc が 検証 さ れ て いる かど う か を 調べる
PharFileInfo set Metadata $metadata	ファイル ととも に 保存 する 情報 を 含む 、 php の 変数
PharFileInfo void set Metadata mixed $metadata	ファイル ととも に 保存 する 、 ファイル 固有 の メタデータ を 設定 する
php_user_filter bool on Create	この メソッド を 実装 は 、 成功 し た 場合 に true そして 失敗 し た 場合 に false を 返す 必要 が あり ます
php_user_filter bool on Create	フィルタ を 作成 する とき に コール さ れる
QuickHashIntHash add $value	追加 する エントリ の 値 オプション
QuickHashIntHash add $key	追加 する エントリ の キー
QuickHashIntHash bool add	エントリ が 追加 さ れ た 場合 に true 、 追加 さ れ なかっ た 場合 に false を 返し ます
QuickHashIntHash bool add int $key int $value	新 たな エントリ を ハッシュ に 追加 する
QuickHashIntHash construct $size	バケツリスト の 数
QuickHashIntHash construct $options	次 の オプション が 使え ます
QuickHashIntHash int construct	新しい quickhashinthash オブジェクト を 返し ます
QuickHashIntHash int construct int $size int $options	新しい quickhashinthash オブジェクト を 作る
QuickHashIntHash delete $key	削除 する エントリ の キー
QuickHashIntHash bool delete	エントリ が 削除 さ れ た とき に true 、 削除 さ れ なかっ た とき に false を 返し ます
QuickHashIntHash bool delete int $key	エントリ を ハッシュ から 削除 する
QuickHashIntHash exists $key	ハッシュ 内 に 存在 する かど う か を 調べ たい キー
QuickHashIntHash bool exists	エントリ が 存在 する 場合 に true 、 存在 し ない 場合 に false を 返し ます
QuickHashIntHash bool exists int $key	キー が ハッシュ に 存在 する かど う か を 調べる
QuickHashIntHash load From File $options	クラス の コンストラクタ が 受け 取る の と 同じ オプション
QuickHashIntHash load From File $filename	ハッシュ を 読み込む ファイル の ファイル 名
QuickHashIntHash QuickHashIntHash load From File	新しい quickhashinthash を 返し ます
QuickHashIntHash QuickHashIntHash load From File string $filename int $options	ファイル から ハッシュ を 作る ファクトリーメソッド
QuickHashIntHash load From String $contents	ハッシュ を シリアライズ し た 文字列
QuickHashIntHash load From String $options	クラス の コンストラクタ が 受け 取る の と 同じ オプション
QuickHashIntHash QuickHashIntHash load From String	新しい quickhashinthash を 返し ます
QuickHashIntHash QuickHashIntHash load From String string $contents int $options	文字列 から ハッシュ を 作る ファクトリーメソッド
QuickHashIntHash save To File $filename	ハッシュ の 保存 先 の ファイル 名
QuickHashIntHash void save To File string $filename	メモリ 上 の ハッシュ を ディスク に 保存 する
QuickHashIntHash update $key	更新 する エントリ の キー
QuickHashIntHash update $value	新しい 値
QuickHashIntHash bool update	エントリ が 見つかっ て 更新 でき た とき に true 、 エントリ が 見つ から なかっ た とき に false を 返し ます
QuickHashIntHash bool update int $key int $value	ハッシュ の エントリ を 新しい 値 で 更新 する
QuickHashIntSet exists $key	セット 内 に 存在 する かど う か を 調べ たい キー
QuickHashIntSet bool exists	エントリ が 存在 する 場合 に true 、 存在 し ない 場合 に false を 返し ます
QuickHashIntSet bool exists int $key	キー が セット に 存在 する かど う か を 調べる
QuickHashIntSet int get Size	セット の 要素 数 を 返し ます
QuickHashIntSet int get Size	セット の 要素 数 を 返す
QuickHashIntSet load From File $options	クラス の コンストラクタ が 受け 取る の と 同じ オプション
QuickHashIntSet load From File $size	バケツリスト の 数
QuickHashIntSet load From File $filename	セット を 読み込む ファイル の ファイル 名
QuickHashIntSet QuickHashIntSet load From File	新しい quickhashintset を 返し ます
QuickHashIntSet QuickHashIntSet load From File string $filename int $size int $options	ファイル から セット を 作る ファクトリーメソッド
QuickHashIntSet load From String $contents	セット を シリアライズ し た 文字列
QuickHashIntSet load From String $options	クラス の コンストラクタ が 受け 取る の と 同じ オプション
QuickHashIntSet load From String $size	バケツリスト の 数
QuickHashIntSet QuickHashIntSet load From String	新しい quickhashintset を 返し ます
QuickHashIntSet QuickHashIntSet load From String string $contents int $size int $options	文字列 から セット を 作る ファクトリーメソッド
QuickHashIntSet save To File $filename	セット の 保存 先 の ファイル 名
QuickHashIntSet void save To File string $filename	メモリ 上 の セット を ディスク に 保存 する
QuickHashIntSet string save To String	この メソッド は 、 セット を シリアライズ し た 文字列 を 返し ます
QuickHashIntSet string save To String	シリアライズ し た セット を 返す
QuickHashIntStringHash add $value	追加 する エントリ の 値
QuickHashIntStringHash add $key	追加 する エントリ の キー
QuickHashIntStringHash bool add	エントリ が 追加 さ れ た 場合 に true 、 追加 さ れ なかっ た 場合 に false を 返し ます
QuickHashIntStringHash bool add int $key string $value	新 たな エントリ を ハッシュ に 追加 する
QuickHashIntStringHash exists $key	ハッシュ 内 に 存在 する かど う か を 調べ たい キー
QuickHashIntStringHash bool exists	エントリ が 存在 する 場合 に true 、 存在 し ない 場合 に false を 返し ます
QuickHashIntStringHash bool exists int $key	キー が ハッシュ に 存在 する かど う か を 調べる
QuickHashIntStringHash get $key	エントリ の キー
QuickHashIntStringHash mixed get	キー が 存在 する 場合 は その 値 、 キー が 存在 し ない 場合 は null を 返し ます
QuickHashIntStringHash mixed get int $key	キー を 指定 し て ハッシュ から 値 を 取得 する
QuickHashIntStringHash int get Size	ハッシュ の 要素 数 を 返し ます
QuickHashIntStringHash int get Size	ハッシュ の 要素 数 を 返す
QuickHashIntStringHash load From String $contents	ハッシュ を シリアライズ し た 文字列
QuickHashIntStringHash load From String $options	クラス の コンストラクタ が 受け 取る の と 同じ オプション
QuickHashIntStringHash load From String $size	バケツリスト の 数
QuickHashIntStringHash QuickHashIntStringHash load From String	新しい quickhashintstringhash を 返し ます
QuickHashIntStringHash QuickHashIntStringHash load From String string $contents int $size int $options	文字列 から ハッシュ を 作る ファクトリーメソッド
QuickHashIntStringHash set $value	エントリ に 新しく 設定 する 値
QuickHashIntStringHash set $key	追加 あるい は 更新 する エントリ の キー
QuickHashIntStringHash int set	エントリ が 見つかっ て 更新 でき た とき に 2 、 エントリ を 新しく 追加 し た とき に 1 、 エラー が 発生 し た とき に 0 を 返し ます
QuickHashIntStringHash int set int $key string $value	ハッシュ 内 の エントリ の 値 を 更新 エントリ が 存在 し ない 場合 は 新しく 追加 する
QuickHashIntStringHash update $key	更新 する エントリ の キー
QuickHashIntStringHash update $value	新しい 値
QuickHashIntStringHash bool update	エントリ が 見つかっ て 更新 でき た とき に true 、 エントリ が 見つ から なかっ た とき に false を 返し ます
QuickHashIntStringHash bool update int $key string $value	ハッシュ の エントリ を 新しい 値 で 更新 する
QuickHashStringIntHash construct $size	バケツリスト の 数
QuickHashStringIntHash construct $options	次 の オプション が 使え ます
QuickHashStringIntHash int construct	新しい quickhashstringinthash オブジェクト を 返し ます
QuickHashStringIntHash int construct int $size int $options	新しい quickhashstringinthash オブジェクト を 作る
QuickHashStringIntHash exists $key	ハッシュ 内 に 存在 する かど う か を 調べ たい キー
QuickHashStringIntHash bool exists	エントリ が 存在 する 場合 に true 、 存在 し ない 場合 に false を 返し ます
QuickHashStringIntHash bool exists string $key	キー が ハッシュ に 存在 する かど う か を 調べる
QuickHashStringIntHash get $key	エントリ の キー
QuickHashStringIntHash mixed get	キー が 存在 する 場合 は その 値 、 キー が 存在 し ない 場合 は null を 返し ます
QuickHashStringIntHash mixed get string $key	キー を 指定 し て ハッシュ から 値 を 取得 する
QuickHashStringIntHash load From File $options	クラス の コンストラクタ が 受け 取る の と 同じ オプション
QuickHashStringIntHash load From File $size	バケツリスト の 数
QuickHashStringIntHash load From File $filename	ハッシュ を 読み込む ファイル の ファイル 名
QuickHashStringIntHash QuickHashStringIntHash load From File	新しい quickhashstringinthash を 返し ます
QuickHashStringIntHash QuickHashStringIntHash load From File string $filename int $size int $options	ファイル から ハッシュ を 作る ファクトリーメソッド
QuickHashStringIntHash load From String $contents	ハッシュ を シリアライズ し た 文字列
QuickHashStringIntHash load From String $options	クラス の コンストラクタ が 受け 取る の と 同じ オプション
QuickHashStringIntHash load From String $size	バケツリスト の 数
QuickHashStringIntHash QuickHashStringIntHash load From String	新しい quickhashstringinthash を 返し ます
QuickHashStringIntHash QuickHashStringIntHash load From String string $contents int $size int $options	文字列 から ハッシュ を 作る ファクトリーメソッド
QuickHashStringIntHash save To File $filename	ハッシュ の 保存 先 の ファイル 名
QuickHashStringIntHash void save To File string $filename	メモリ 上 の ハッシュ を ディスク に 保存 する
QuickHashStringIntHash string save To String	この メソッド は 、 ハッシュ を シリアライズ し た 文字列 を 返し ます
QuickHashStringIntHash string save To String	シリアライズ し た ハッシュ を 返す
QuickHashStringIntHash set $value	エントリ に 新しく 設定 する 値
QuickHashStringIntHash set $key	追加 あるい は 更新 する エントリ の キー
QuickHashStringIntHash int set	エントリ が 見つかっ て 更新 でき た とき に 2 、 エントリ を 新しく 追加 し た とき に 1 、 エラー が 発生 し た とき に 0 を 返し ます
QuickHashStringIntHash int set string $key int $value	ハッシュ 内 の エントリ の 値 を 更新 エントリ が 存在 し ない 場合 は 新しく 追加 する
RarArchive string to String	この rararchive オブジェクト の テキスト 表現 を 返し ます
RarArchive string to String	テキスト 形式 で 取得 する
RarEntry extract $extended_data	true に する と 、 ntfs の acl や unix の オーナー 情報 といっ た 拡張 情報 が アーカイブ に 設定 さ れ て いれ ば 、 取り出し た ファイル に も それ を 設定 し ます
RarEntry extract $filepath	取り出す ファイル の ディレクトリ と ファイル 名 を 含む パス 相対パス あるい は 絶対 パス
RarEntry extract $dir	ファイル を 展開 する ディレクトリ へ の パス
RarEntry extract $password	この エントリ の 暗号 化 に 使う パスワード
RarEntry bool extract	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
RarEntry bool extract string $dir string $filepath string $password bool $extended_data	アーカイブ の エントリ を 展開 する
RarEntry int get Attr	属性 、 あるい は エラー 時 に false を 返し ます
RarEntry int get Attr	エントリ の 属性 を 取得 する
RarEntry string get File Time	エントリ の 最終 更新 時刻 を yyyy -mm -dd hh :ii :ss 形式 で 表し た 文字列 、 あるい は エラー 時 に false を 返し ます
RarEntry string get File Time	エントリ の 最終 更新 時刻 を 取得 する
RarEntry int get Host Os	ホスト os の コード 、 あるい は エラー 時 に false を 返し ます
RarEntry int get Host Os	エントリ の ホスト os を 取得 する
RarEntry int get Method	メソッド 番号 、 あるい は エラー 時 に false を 返し ます
RarEntry int get Method	エントリ の 圧縮 方法 を 取得 する
RarEntry string get Name	エントリ 名 を 表す 文字 列 、 あるい は エラー 時 に false を 返し ます
RarEntry string get Name	エントリ の 名前 を 取得 する
RarEntry int get Packed Size	圧縮後 の サイズ 、 あるい は エラー 時 に false を 返し ます
RarEntry int get Packed Size	圧縮後 の エントリ の サイズ を 取得 する
RarEntry get Stream $password	この エントリ の 暗号 化 に 使う パスワード
RarEntry resource get Stream	ファイルハンドラ を 返し ます
RarEntry resource get Stream string $password	この エントリ の ファイルハンドラ を 取得 する
RarEntry int get Unpacked Size	展開後 の サイズ 、 あるい は エラー 時 に false を 返し ます
RarEntry int get Unpacked Size	展開後 の エントリ の サイズ を 取得 する
RarEntry int get Version	バージョン 、 あるい は エラー 時 に false を 返し ます
RarEntry int get Version	この エントリ を 展開 する のに 必要 な rar プログラム の 最低 バージョン を 取得 する
RarEntry bool is Directory	エントリ が ディレクトリ で ある 場合 に true 、 それ 以外 の 場合 に false を 返し ます
RarEntry bool is Directory	この エントリ が ディレクトリ で ある かど う か を 調べる
RarEntry bool is Encrypted	エントリ が 暗号 化 さ れ て いる 場合 に true 、 それ 以外 の 場合 に false を 返し ます
RarEntry bool is Encrypted	この エントリ が 暗号 化 さ れ て いる かど う か を 調べる
RecursiveArrayIterator RecursiveArrayIterator get Children	現在 の エントリ が 配列 あるい は オブジェクト で ある 場合 に 、 その イテレータ を 返し ます
RecursiveArrayIterator RecursiveArrayIterator get Children	現在 の エントリ が 配列 あるい は オブジェクト で ある 場合 に 、 その イテレータ を 返す
RecursiveArrayIterator bool has Children	現在 の エントリ が 配列 あるい は オブジェクト で ある 場合 に true 、 それ 以外 の 場合 に false を 返し ます
RecursiveArrayIterator bool has Children	現在 の エントリ が 配列 あるい は オブジェクト で ある かど う か を 返す
RecursiveCallbackFilterIterator RecursiveCallbackFilterIterator get Children	子 を 含む recursivecallbackfilteriterator を 返し ます
RecursiveCallbackFilterIterator RecursiveCallbackFilterIterator get Children	recursivecallbackfilteriterator に 含まれる 内部 イテレータ の 子 を 返す
RecursiveDirectoryIterator construct $path	反復 処理 の 対象 と なる ディレクトリ の パス
RecursiveDirectoryIterator construct $flags	フラグ を 指定 し て 、 いくつか の メソッド の 振る 舞い を 変更 する こと が でき ます
RecursiveDirectoryIterator string construct	新しく 作成 し た recursivedirectoryiterator を 返し ます
RecursiveDirectoryIterator string construct string $path int $flags	recursivedirectoryiterator を 作成 する
RecursiveDirectoryIterator string get Sub Path	サブパス サブディレクトリ を 返し ます
RecursiveDirectoryIterator string get Sub Path	サブパス を 取得 する
RecursiveDirectoryIterator string get Sub Pathname	サブパス サブディレクトリ と ファイル 名 を 返し ます
RecursiveDirectoryIterator string get Sub Pathname	サブパス と 名前 を 取得 する
RecursiveFilterIterator construct $iterator	フィルタリング する recursiveiterator
RecursiveFilterIterator RecursiveIterator construct RecursiveIterator $iterator	recursiveiterator から recursivefilteriterator を 作成 する
RecursiveFilterIterator bool has Children	内部 イテレータ が 子 を 持つ 場合 に true 、 それ 以外 の 場合 に false を 返し ます
RecursiveFilterIterator bool has Children	内部 イテレータ の 現在 の 要素 が 子 を 持つ かど う か を 調べる
RecursiveIterator RecursiveIterator get Children	現在 の エントリ の イテレータ を 返し ます
RecursiveIterator RecursiveIterator get Children	現在 の エントリ の イテレータ を 返す
RecursiveIteratorIterator void begin Children	子 を 開始 する
RecursiveIteratorIterator void begin Iteration	反復 処理 を 開始 する
RecursiveIteratorIterator bool call Has Children	要素 に 子 が ある 場合 に true 、 それ 以外 の 場合 に false を 返し ます
RecursiveIteratorIterator bool call Has Children	子 を 持つ かど う か を 調べる
RecursiveIteratorIterator void end Children	子 を 終了 する
RecursiveIteratorIterator mixed get Max Depth	許可 さ れる 最大 の 深さ 、 あるい は 無制 限 の 場合 に false を 返し ます
RecursiveIteratorIterator mixed get Max Depth	最大 の 深さ を 取得 する
RecursiveIteratorIterator void next Element	次 の 要素
RecursiveIteratorIterator set Max Depth $max_depth	許可 さ れる 最大 の 深さ
RecursiveIteratorIterator void set Max Depth string $max_depth	最大 の 深さ を 設定 する
RecursiveRegexIterator bool has Children	現在 の エントリ の イテレータ が 取得 可能 な 場合 に true 、 それ 以外 の 場合 に false を 返し ます
RecursiveRegexIterator bool has Children	現在 の エントリ の イテレータ が 取得 可能 か どう か を 返す
RecursiveTreeIterator void begin Children	子 を 開始 する
RecursiveTreeIterator RecursiveIterator call Get Children	recursiveiterator を 返し ます
RecursiveTreeIterator RecursiveIterator call Get Children	子 を 取得 する
RecursiveTreeIterator bool call Has Children	子 が ある 場合 に true 、 それ 以外 の 場合 に false を 返し ます
RecursiveTreeIterator bool call Has Children	子 を 持っ て いる かど う か を 調べる
RecursiveTreeIterator construct $flags	フラグ を 指定 し て 一部 の メソッド の 振る 舞い を 変更 する こと が でき ます
RecursiveTreeIterator construct $it	recursiveiterator あるい は iteratoraggregate
RecursiveTreeIterator construct $mode	内部 的 に 使う recursiveiteratoriterator の 振る 舞い を 変更 する フラグ
RecursiveTreeIterator construct $caching_it_flags	内部 的 に 使う recursivecachingiterator の 振る 舞い を 変更 する フラグ
RecursiveTreeIterator RecursiveIterator|IteratorAggregate construct RecursiveIterator|IteratorAggregate $it int $flags int $cit_flags int $mode	recursivetreeiterator を 作成 する
RecursiveTreeIterator string current	接頭辞 と 接尾 辞 を つけ た 現在 の 要素 を 返し ます
RecursiveTreeIterator string current	現在 の 要素 を 取得 する
RecursiveTreeIterator void end Children	子 を 終了 する
RecursiveTreeIterator void end Iteration	反復 処理 を 終了 する
RecursiveTreeIterator string get Entry	現在 の 要素 から 作っ た ツリー を 返し ます
RecursiveTreeIterator string get Entry	現在 の エントリ を 取得 する
RecursiveTreeIterator void get Postfix	接尾辞 を 取得 する
RecursiveTreeIterator string get Prefix	現在 の 要素 の 前 に 置く 文字 列 を 返し ます
RecursiveTreeIterator string get Prefix	接頭辞 を 取得 する
RecursiveTreeIterator string key	接頭辞 と 接尾 辞 を つけ た 現在 の キー を 返し ます
RecursiveTreeIterator string key	現在 の 要素 の キー を 取得 する
RecursiveTreeIterator void next	次 の 要素 に 移動 する
RecursiveTreeIterator void next Element	次 の 要素
RecursiveTreeIterator void rewind	イテレータ を 巻き戻す
Reflection get Modifier Names $modifiers	取得 し たい 修飾子
Reflection array get Modifier Names	修飾子 の 名前 の 配列 を 返し ます
Reflection array get Modifier Names int $modifiers	修飾子 の 名前 を 取得 する
ReflectionClass export $return	true に 設定 する と 、 エクスポート を 発行 する の で は なく 返し ます
ReflectionClass export $argument	エクスポート する リフレクション
ReflectionClass string export	return パラメータ を true に 設定 する と 、 エクスポート を 文字列 で 返し ます
ReflectionClass string export mixed $argument bool $return	クラス を エクスポート する
ReflectionClass get Constant $name	定数 の 名前
ReflectionClass mixed get Constant	定数 の 値 を 返し ます
ReflectionClass mixed get Constant string $name	定義 さ れ て いる 定数 を 取得 する
ReflectionClass array get Constants	定数 の 配列 を 返し ます
ReflectionClass array get Constants	定数 を 取得 する
ReflectionClass array get Default Properties	デフォルトプロパティ の 配列 を 返し ます
ReflectionClass array get Default Properties	デフォルトプロパティ を 取得 する
ReflectionClass string get Doc Comment	ドキュメントコメント が 存在 すれ ば それ を 返し ます
ReflectionClass string get Doc Comment	ドキュメントコメント を 取得 する
ReflectionClass ReflectionExtension get Extension	クラス を 定義 する 拡張 モジュール を 表す reflectionextension オブジェクト を 返し ます
ReflectionClass ReflectionExtension get Extension	クラス を 定義 する 拡張 モジュール を 表す reflectionextension オブジェクト を 取得 する
ReflectionClass string get File Name	クラス が 定義 さ れ て いる ファイル の ファイル 名 を 返し ます
ReflectionClass string get File Name	クラス が 定義 さ れ て いる ファイル の ファイル 名 を 取得 する
ReflectionClass array get Interface Names	インターフェイス 名 の 配列 を 返し ます
ReflectionClass array get Interface Names	インターフェイス の 名前 を 取得 する
ReflectionClass get Method $name	調べ たい メソッド の 名前
ReflectionClass ReflectionMethod get Method	reflectionmethod を 返し ます
ReflectionClass ReflectionMethod get Method string $name	クラスメソッド の reflectionmethod を 取得 する
ReflectionClass get Methods $filter	結果 を フィルタ し て 、 特定 の 属性 を 持つ メソッド だけ を 含める よう に し ます
ReflectionClass array get Methods	各 メソッド を 表す reflectionmethod オブジェクト の 配列 を 返し ます
ReflectionClass array get Methods int $filter	メソッド の 配列 を 取得 する
ReflectionClass int get Modifiers	修飾子 定数 の ビットマスク を 返し ます
ReflectionClass int get Modifiers	修飾子 を 取得 する
ReflectionClass string get Name	クラス の 名前 を 返し ます
ReflectionClass string get Name	クラス の 名前 を 取得 する
ReflectionClass int get Start Line	開始行 を 返し ます
ReflectionClass int get Start Line	開始行 を 取得 する
ReflectionClass has Property $name	調べ たい プロパティ の 名前
ReflectionClass bool has Property	プロパティ が 定義 さ れ て いる 場合 に true 、 それ 以外 の 場合 に false を 返し ます
ReflectionClass bool has Property string $name	プロパティ が 定義 さ れ て いる かど う か を 調べる
ReflectionClass implements Interface $interface	インターフェイス の 名前
ReflectionClass bool implements Interface	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
ReflectionClass bool implements Interface string $interface	インターフェイス の 実装 を 調べる
ReflectionClass bool in Namespace	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
ReflectionClass bool in Namespace	名前 空間 内 に ある かど う か を 調べる
ReflectionClass bool is Abstract	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
ReflectionClass bool is Abstract	抽象 クラス で ある かど う か を 調べる
ReflectionClass bool is Cloneable	この クラス が クローン 可能 で ある 場合 に true 、 そう で ない 場合 に false を 返し ます
ReflectionClass bool is Cloneable	この クラス が クローン 可能 か どう か を 返す
ReflectionClass bool is Final	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
ReflectionClass bool is Final	final クラス で ある かど う か を 調べる
ReflectionClass bool is Interface	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
ReflectionClass bool is Interface	この クラス が インターフェイス で ある かど う か を 調べる
ReflectionClass bool is Iterateable	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
ReflectionClass bool is Iterateable	反復 処理 が 可能 で ある かど う か を 調べる
ReflectionClass new Instance $args	可変長 の 引数 を 受け付け 、 それ を call _user _func と 同じ 方式 で クラス の コンストラクタ に 渡し ます
ReflectionClass object new Instance mixed $args	指定 し た 引数 で クラス の 新しい インスタンス を 作成 する
ReflectionClass string to String	この reflectionclass インスタンス の 文字 列表 現 を 返し ます
ReflectionClass string to String	reflectionclass オブジェクト の 文字 列表 現 を 返す
ReflectionExtension void clone	クローン する
ReflectionExtension construct $name	拡張 モジュール の 名前
ReflectionExtension string construct	reflectionextension オブジェクト を 返し ます
ReflectionExtension string construct string $name	reflectionextension を 作成 する
ReflectionExtension array get Class Names	拡張 モジュール で 定義 さ れ て いる クラス 名 の 配列 を 返し ます
ReflectionExtension array get Class Names	クラス 名 を 取得 する
ReflectionExtension array get Constants	定数 名 を キー と する 連想 配列 を 返し ます
ReflectionExtension array get Constants	定数 を 取得 する
ReflectionExtension array get Dependencies	依存 する 拡張 モジュール を キー 、 そして required 、 optional あるい は conflicts のいずれか を 値と する 連想 配列 を 返し ます
ReflectionExtension array get Dependencies	依存性 を 取得 する
ReflectionExtension array get Functions	reflectionfunction オブジェクト の 連想 配列 を 返し ます
ReflectionExtension array get Functions	拡張 モジュール の 関数 を 取得 する
ReflectionExtension array get INIEntries	ini エントリ を キー 、 定義 さ れ て いる 値 を キー に 対応 する 値 と し た 連想 配列 を 返し ます
ReflectionExtension array get INIEntries	拡張 モジュール の ini エントリ を 取得 する
ReflectionExtension string get Version	拡張 モジュール の バージョン を 返し ます
ReflectionExtension string get Version	拡張 モジュール の バージョン を 取得 する
ReflectionExtension void info	拡張 モジュール の 情報 を 表示 する
ReflectionExtension string to String	エクスポート し た 拡張 モジュール を 文字列 で 返し ます
ReflectionExtension string to String	文字列 に 変換 する
ReflectionFunction invoke $args	渡す 引数 の リスト
ReflectionFunction mixed invoke	起動 し た 関数 の 結果 を 返し ます
ReflectionFunction mixed invoke mixed $parameter	関数 を 起動 する
ReflectionFunction bool is Disabled	無効 に なっ て いる 場合 に true 、 それ 以外 の 場合 に false を 返し ます
ReflectionFunction bool is Disabled	関数 が 無効 に なっ て いる かど う か を 調べる
ReflectionFunction string to String	その 関数 について 、 reflectionfunction :: export のよう な 出力 を 返し ます
ReflectionFunction string to String	文字列 に 変換 する
ReflectionFunctionAbstract void clone	関数 の クローン を 作成 する
ReflectionFunctionAbstract string get Doc Comment	ドキュメントコメント が 存在 する 場合 は それ を 返し ます
ReflectionFunctionAbstract string get Doc Comment	ドキュメントコメント を 取得 する
ReflectionFunctionAbstract int get End Line	ユーザー 定義 関数 の 終了 行番 号 を 返し ます
ReflectionFunctionAbstract int get End Line	終了 行番 号 を 取得 する
ReflectionFunctionAbstract ReflectionExtension get Extension	拡張 モジュール の 情報 を reflectionextension オブジェクト で 返し ます
ReflectionFunctionAbstract ReflectionExtension get Extension	拡張 モジュール の 情報 を 取得 する
ReflectionFunctionAbstract string get Extension Name	拡張 モジュール の 名前 を 返し ます
ReflectionFunctionAbstract string get Extension Name	拡張 モジュール の 名前 を 取得 する
ReflectionFunctionAbstract string get File Name	ファイル 名 を 返し ます
ReflectionFunctionAbstract string get File Name	ファイル 名 を 取得 する
ReflectionFunctionAbstract string get Name	関数 の 名前 を 返し ます
ReflectionFunctionAbstract string get Name	関数 名 を 取得 する
ReflectionFunctionAbstract string get Namespace Name	名前 空間 名 を 返し ます
ReflectionFunctionAbstract string get Namespace Name	名前 空間 名 を 取得 する
ReflectionFunctionAbstract int get Number Of Parameters	パラメータ の 数 を 返し ます
ReflectionFunctionAbstract int get Number Of Parameters	パラメータ 数 を 取得 する
ReflectionFunctionAbstract int get Number Of Required Parameters	必須 パラメータ の 数 を 返し ます
ReflectionFunctionAbstract int get Number Of Required Parameters	必須 パラメータ の 数 を 取得 する
ReflectionFunctionAbstract array get Parameters	パラメータ を reflectionparameter オブジェクト の 配列 で 返し ます
ReflectionFunctionAbstract array get Parameters	パラメータ を 取得 する
ReflectionFunctionAbstract int get Start Line	開始 行番 号 を 返し ます
ReflectionFunctionAbstract int get Start Line	開始 行番 号 を 取得 する
ReflectionFunctionAbstract array get Static Variables	静的 変数 の 配列 を 返し ます
ReflectionFunctionAbstract array get Static Variables	静的 変数 を 取得 する
ReflectionFunctionAbstract bool in Namespace	名前 空間 内 に ある 場合 に true 、 それ 以外 の 場合 に false を 返し ます
ReflectionFunctionAbstract bool in Namespace	関数 が 名前 空間 内 に ある かど う か を 調べる
ReflectionFunctionAbstract bool is Deprecated	非 推奨 で ある 場合 に true 、 それ 以外 の 場合 に false を 返し ます
ReflectionFunctionAbstract bool is Deprecated	非 推奨 で ある かど う か を 調べる
ReflectionFunctionAbstract bool is Internal	内部 関数 で ある 場合 に true 、 それ 以外 の 場合 に false を 返し ます
ReflectionFunctionAbstract bool is Internal	内部 関数 か どう か を 調べる
ReflectionFunctionAbstract bool is User Defined	ユーザー 定義 関数 で ある 場合 に true 、 それ 以外 の 場合 に false を 返し ます
ReflectionFunctionAbstract bool is User Defined	ユーザー 定義 関数 で ある かど う か を 調べる
ReflectionFunctionAbstract void to String	文字列 に 変換 する
ReflectionMethod ReflectionClass get Declaring Class	その メソッド が 属 する クラス を あらわす reflectionclass オブジェクト を 返し ます
ReflectionMethod ReflectionClass get Declaring Class	メソッド が 宣言 さ れ て いる クラス を 取得 する
ReflectionMethod ReflectionMethod get Prototype	メソッド の プロトタイプ の reflectionmethod オブジェクト を 返し ます
ReflectionMethod ReflectionMethod get Prototype	メソッド の プロトタイプ を 存在 すれ ば 取得 する
ReflectionMethod invoke $object	メソッド を 実行 する オブジェクト
ReflectionMethod invoke $parameter	メソッド に 渡す パラメータ
ReflectionMethod mixed invoke	メソッド の 結果 を 返し ます
ReflectionMethod mixed invoke object $object mixed $parameter	実行 する
ReflectionMethod bool is Abstract	抽象 メソッド で ある 場合 に true 、 それ 以外 の 場合 に false を 返し ます
ReflectionMethod bool is Abstract	抽象 メソッド で ある かど う か を 調べる
ReflectionMethod bool is Destructor	デストラクタ で ある 場合 に true 、 それ 以外 の 場合 に false を 返し ます
ReflectionMethod bool is Destructor	デストラクタ で ある かど う か を 調べる
ReflectionMethod bool is Final	final メソッド で ある 場合 に true 、 それ 以外 の 場合 に false を 返し ます
ReflectionMethod bool is Final	final メソッド で ある かど う か を 調べる
ReflectionMethod set Accessible $accessible	true を 指定 する と 、 アクセス できる よう に なり ます
ReflectionMethod void set Accessible bool $accessible	メソッド の アクセス 範囲 を 設定 する
ReflectionMethod string to String	reflectionmethod の インスタンス の 文字 列表 現 を 返し ます
ReflectionMethod string to String	reflectionmethod オブジェクト の 文字 列表 現 を 返す
ReflectionObject export $return	true に 設定 する と 、 エクスポート を 発行 する の で は なく 返し ます
ReflectionObject export $argument	エクスポート する リフレクション
ReflectionObject string export	return パラメータ を true に 設定 する と 、 エクスポート を 文字列 で 返し ます
ReflectionObject string export string $argument bool $return	エクスポート する
ReflectionParameter bool allows Null	null を 許可 する 場合 に true 、 それ 以外 の 場合 に false を 返し ます
ReflectionParameter bool allows Null	null を 許可 する かど う か を 調べる
ReflectionParameter ReflectionClass get Declaring Class	reflectionclass オブジェクト を 返し ます
ReflectionParameter ReflectionClass get Declaring Class	宣言 し て いる クラス を 取得 する
ReflectionParameter mixed get Default Value	パラメータ の デフォルト 対 を 返し ます
ReflectionParameter mixed get Default Value	パラメータ の デフォルト 値 を 取得 する
ReflectionParameter string get Name	パラメータ 名 を 返し ます
ReflectionParameter string get Name	パラメータ 名 を 取得 する
ReflectionParameter bool is Array	配列 を 受け 取る パラメータ で ある 場合 に true 、 それ 以外 の 場合 に false を 返し ます
ReflectionParameter bool is Array	配列 を 受け 取る パラメータ で ある かど う か を 調べる
ReflectionParameter bool is Default Value Available	デフォルト 値 が 存在 する 場合 に true 、 それ 以外 の 場合 に false を 返し ます
ReflectionParameter bool is Default Value Available	デフォルト 値 が 存在 する かど う か を 調べる
ReflectionParameter bool is Optional	省略 可能 で ある 場合 に true 、 それ 以外 の 場合 に false を 返し ます
ReflectionParameter bool is Optional	省略 可能 で ある かど う か を 調べる
ReflectionParameter bool is Passed By Reference	パラメータ が 参照 渡し で ある 場合 に true 、 それ 以外 の 場合 に false を 返し ます
ReflectionParameter bool is Passed By Reference	参照渡 しか どう か を 調べる
ReflectionParameter string to String	文字列 に 変換 する
ReflectionProperty void clone	クローン する
ReflectionProperty string get Doc Comment	プロパティ の ドキュメントコメント を 返し ます
ReflectionProperty string get Doc Comment	プロパティ の ドキュメントコメント を 取得 する
ReflectionProperty int get Modifiers	修飾子 を 数値 で 返し ます
ReflectionProperty int get Modifiers	修飾子 を 取得 する
ReflectionProperty get Value $object	静的 で ない プロパティ の 場合 は 、 プロパティ を 取得 し たい オブジェクト を 指定 し なけれ ば なり ませ ん
ReflectionProperty mixed get Value	プロパティ の 現在 の 値 を 返し ます
ReflectionProperty mixed get Value object $object	値 を 取得 する
ReflectionProperty bool is Private	private プロパティ で ある 場合 に true 、 それ 以外 の 場合 に false を 返し ます
ReflectionProperty bool is Private	private プロパティ で ある かど う か を 調べる
ReflectionProperty bool is Protected	protected プロパティ で ある 場合 に true 、 それ 以外 の 場合 に false を 返し ます
ReflectionProperty bool is Protected	protected プロパティ で ある かど う か を 調べる
ReflectionProperty set Accessible $accessible	true を 指定 する と 、 アクセス できる よう に なり ます
ReflectionProperty void set Accessible bool $accessible	プロパティ の アクセス 範囲 を 設定 する
ReflectionProperty set Value $object	静的 で ない プロパティ の 場合 は 、 プロパティ を 変更 し たい オブジェクト を 指定 し なけれ ば なり ませ ん
ReflectionProperty set Value $value	新しい 値
ReflectionProperty void set Value object $object mixed $value	プロパティ の 値 を 設定 する
Reflector string export	エクスポート する
Reflector string to String	文字列 に 変換 する
RegexIterator int get Mode	操作 モード を 返し ます
RegexIterator int get Mode	操作 モード を 返す
RegexIterator set Flags $flags	設定 する フラグ
RegexIterator void set Flags int $flags	フラグ を 設定 する
RegexIterator set Mode $mode	操作 モード
RegexIterator void set Mode int $mode	操作 モード を 設定 する
RegexIterator set Preg Flags $preg_flags	正規 表現 フラグ
RegexIterator void set Preg Flags int $preg_flags	正規 表現 フラグ を 設定 する
SAMConnection bool commit	エラー が 発生 し た 場合 に false を 返し ます
SAMConnection bool commit	現在 作業 中 の 内容 を コミット 正常 に 完了 する
SAMConnection connect $protocol	構造 化文 字列 で 、 メッセージングサーバー に 接続 する 際 に 使用 する プロトコル 指定 し ます
SAMConnection connect $properties	オプション の 連想 配列 で 、 接続 の 際 に 必要 な 詳細 情報 を 表す プロパティ を 指定 し ます
SAMConnection bool connect	この メソッド は 、 エラー が 発生 し た 場合 に false を 返し ます
SAMConnection bool connect string $protocol array $properties	メッセージングサーバー と の 接続 を 確立 する
SAMConnection bool disconnect	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
SAMConnection bool disconnect	メッセージングサーバー から の 接続 を 解除 する
SDO_DAS_XML_Document SDO_DataObject get Root Data Object	ルート sdo _dataobject を 返し ます
SDO_DAS_XML_Document SDO_DataObject get Root Data Object	ルート sdo _dataobject を 返す
SDO_DAS_XML_Document string get Root Element Name	ルート 要素 の 名前 を 返し ます
SDO_DAS_XML_Document string get Root Element Name	ルート 要素 の 名前 を 返す
SDO_DAS_XML_Document string get Root Element URI	ルート 要素 の uri 文字列 を 返し ます
SDO_DAS_XML_Document string get Root Element URI	ルート 要素 の uri 文字列 を 返す
SDO_DAS_XML_Document set Encoding $encoding	エンコーディング 文字列
SDO_DAS_XML_Document void set Encoding string $encoding	エンコーディング を 文字列 で 設定 する
SDO_DAS_XML_Document set XMLDeclaration $xmlDeclatation	xml 宣言 を 設定 する ため の boolean 値
SDO_DAS_XML_Document void set XMLDeclaration bool $xmlDeclatation	xml 宣言 を 設定 する
SDO_DAS_XML_Document set XMLVersion $xmlVersion	xml バージョン 文字列
SDO_DAS_XML_Document void set XMLVersion string $xmlVersion	xml バージョン を 文字列 で 設定 する
SDO_DAS_XML add Types $xsd_file	xsd スキーマファイル へ の パス
SDO_DAS_XML void add Types string $xsd_file	2 番目 以降 の スキーマファイル を sdo _das _xml オブジェクト に 読み込む
SDO_DAS_XML create Data Object $namespace_uri	型名 の 名前 空間 uri
SDO_DAS_XML create Data Object $type_name	型名
SDO_DAS_XML SDO_DataObject create Data Object	成功 し た 場合 に sdo _dataobject を 返し ます
SDO_DAS_XML SDO_DataObject create Data Object string $namespace_uri string $type_name	名前 空間 uri および 型名 を 指定 し て sdo _dataobject を 作成 する
SDO_DAS_XML load File $xml_file	インスタンスドキュメント へ の パス
SDO_DAS_XML SDO_XMLDocument load File	成功 し た 場合 は sdo _das _xml _document オブジェクト を 返し ます
SDO_DAS_XML SDO_XMLDocument load File string $xml_file	xml インスタンスドキュメント へ の パス を 指定 し 、 sdo _das _xml _document オブジェクト を 返す
SDO_DAS_XML load String $xml_string	xml 文字列
SDO_DAS_XML SDO_DAS_XML_Document load String	成功 し た 場合 は sdo _das _xml _document オブジェクト を 返し ます
SDO_DAS_XML SDO_DAS_XML_Document load String string $xml_string	xml インスタンス 文字 列 を 指定 し 、 sdo _das _xml _document オブジェクト を 返す
SDO_DAS_XML save String $xdoc	sdo _das _xml _document オブジェクト
SDO_DAS_XML save String $indent	オプション の 引数 で 、 xml を 整形 する かど う か を 指定 し ます
SDO_DAS_XML string save String	xml 文字列 を 返し ます
SDO_DAS_XML string save String SDO_XMLDocument $xdoc int $indent	sdo _das _xml _document オブジェクト を 文字列 に 保存 する
SeekableIterator seek $position	移動先 の 位置
SeekableIterator void seek int $position	位置 を 移動 する
SessionHandler bool close	返り値 通常 は 、 true が 成功 そし て false が 失敗 を 表し ます
SessionHandler bool close	セッション を 閉じる
SessionHandler string create sid	デフォルト の セッション ・ ハンドラ に対し て 有効 な セッション です
SessionHandler string create sid	新規 セッション id を 返す
SessionHandler destroy $session_id	破棄 する セッション id
SessionHandler bool destroy	返り値 通常 は 、 true が 成功 そし て false が 失敗 を 表し ます
SessionHandler bool destroy string $session_id	セッション を 破棄 する
SessionHandler gc $maxlifetime	直近 の maxlifetime 秒 の 間 に 更新 さ れ て い ない セッション を 削除 し ます
SessionHandler bool gc	返り値 通常 は 、 true が 成功 そし て false が 失敗 を 表し ます
SessionHandler bool gc int $maxlifetime	古い セッション を 削除 する
SessionHandler open $save_path	セッション を 格納 / 取得 する パス
SessionHandler open $session_name	セッション 名
SessionHandler bool open	返り値 通常 は 、 true が 成功 そし て false が 失敗 を 表し ます
SessionHandler bool open string $save_path string $session_name	セッション を 開始 する
SessionHandler read $session_id	データ を 読み込む セッション の id
SessionHandler string read	読み込ん だ データ を 常 に 文字列 で 返し ます
SessionHandler string read string $session_id	セッション の データ を 読み込む
SessionHandlerInterface bool close	返り値 通常 は 、 true が 成功 そし て false が 失敗 を 表し ます
SessionHandlerInterface bool close	セッション を 閉じる
SessionHandlerInterface destroy $session_id	破棄 する セッション id
SessionHandlerInterface bool destroy	返り値 通常 は 、 true が 成功 そし て false が 失敗 を 表し ます
SessionHandlerInterface bool destroy string $session_id	セッション を 破棄 する
SessionHandlerInterface gc $maxlifetime	直近 の maxlifetime 秒 の 間 に 更新 さ れ て い ない セッション を 削除 し ます
SessionHandlerInterface bool gc	返り値 通常 は 、 true が 成功 そし て false が 失敗 を 表し ます
SessionHandlerInterface bool gc int $maxlifetime	古い セッション を 削除 する
SessionHandlerInterface open $save_path	セッション を 格納 / 取得 する パス
SessionHandlerInterface open $name	セッション 名
SessionHandlerInterface bool open	返り値 通常 は 、 true が 成功 そし て false が 失敗 を 表し ます
SessionHandlerInterface bool open string $save_path string $name	セッション を 開始 する
SimpleXMLElement as XML $filename	指定 し た 場合 、 データ を 返す かわり に ファイル に データ を 書き込み ます
SimpleXMLElement mixed as XML	filename が 指定 さ れ て い ない 場合 、 この 関数 は 成功 時 に string 、 エラー 時 に false を 返し ます
SimpleXMLElement mixed as XML string $filename	simplexml 要素 に 基づき 整形 式 の xml 文字列 を 返す
SimpleXMLElement attributes $ns	オプション で 指定 する 、 取得 し た 属性 の 名前 空間
SimpleXMLElement attributes $is_prefix	デフォルト は false
SimpleXMLElement SimpleXMLElement attributes	simplexmlelement オブジェクト を 返し ます
SimpleXMLElement SimpleXMLElement attributes string $ns bool $is_prefix	要素 の 属性 を 定義 する
SimpleXMLElement children $ns	xml 名前 空間
SimpleXMLElement children $is_prefix	is _prefix が true の 場合 は ns を プレフィックス として 扱い ます
SimpleXMLElement SimpleXMLElement children	ノード が 子 を 持つ かどう か に かかわらず simplexmlelement 要素 を 返し ます
SimpleXMLElement SimpleXMLElement children string $ns bool $is_prefix	指定 し た ノード の 子 ノード を 見付ける
SimpleXMLElement get Doc Namespaces $from_root	xml 文書 の ルートノード から で なく 、 子 ノード の 配下 の 名前 空間 を 再帰 的 に チェック できる よう に し ます
SimpleXMLElement get Doc Namespaces $recursive	指定 さ れ て いる 場合 は 、 親 ノード および 子 ノード で 宣言 さ れ て いる 全て の 名前 空間 を 返し ます
SimpleXMLElement array get Doc Namespaces	getdocnamespaces メソッド は 、 名前 空間 名 および 関連 付け られ た uri を 配列 で 返し ます
SimpleXMLElement array get Doc Namespaces bool $recursive bool $from_root	ドキュメント で 宣言 さ れ て いる 名前 空間 を 返す
SimpleXMLElement string get Name	getname メソッド は 、 simplexmlelement オブジェクト が 参照 し て いる xml タグ の 名前 を string で 返し ます
SimpleXMLElement string get Name	xml 要素 の 名前 を 取得 する
SimpleXMLElement get Namespaces $recursive	指定 さ れ て いる 場合 は 、 親 ノード および 子 ノード で 使用 し て いる 全て の 名前 空間 を 返し ます
SimpleXMLElement array get Namespaces	getnamespaces メソッド は 、 名前 空間 名 および 関連 付け られ た uri を 配列 で 返し ます
SimpleXMLElement array get Namespaces bool $recursive	ドキュメント で 使用 し て いる 名前 空間 を 返す
SimpleXMLElement register XPath Namespace $prefix	ns で 指定 し た 名前 空間 へ の xpath クエリ で 使用 する 、 名前 空間 プレフィックス
SimpleXMLElement register XPath Namespace $ns	xpath クエリ で 使用 する 名前 空間
SimpleXMLElement bool register XPath Namespace	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
SimpleXMLElement bool register XPath Namespace string $prefix string $ns	次 の xpath クエリ 用 の prefix / ns コンテキスト を 作成 する
SimpleXMLElement xpath $path	xpath パス
SimpleXMLElement array xpath	simplexmlelement オブジェクト の 配列 を 返し ます
SimpleXMLElement array xpath string $path	xml データ に xpath クエリ を 実行 する
SimpleXMLIterator mixed current	現在 の 要素 を simplexmliterator オブジェクト で 返し ます
SimpleXMLIterator mixed current	現在 の simplexml エントリ を 返す
SimpleXMLIterator bool has Children	現在 の 要素 が 子要素 を 持つ 場合 に true 、 それ 以外 の 場合 に false を 返し ます
SimpleXMLIterator bool has Children	現在 の 要素 が 子要素 を 持つ かど う か を 調べる
SimpleXMLIterator mixed key	現在 の simplexmliterator オブジェクト が 参照 する 要素 の xml タグ 名 、 あるい は false を 返し ます
SimpleXMLIterator mixed key	現在 の キー を 返す
SimpleXMLIterator void rewind	最初 の 要素 に 巻き戻す
SNMP bool close	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
SNMP bool close	snmp セッション を 閉じる
SNMP string get Error	直近 の snmp リクエスト から の エラー を 表す 文字 列 を 返し ます
SNMP string get Error	直近 の エラーメッセージ を 取得 する
SNMP getnext $object_id	snmp オブジェクト oid
SNMP mixed getnext	snmp オブジェクト の 値 を object _id に あわせ て 文字 列 か 配列 で 返し ます
SNMP mixed getnext mixed $object_id	指定 し た オブジェクト id に 続く snmp オブジェクト を 取得 する
SNMP set $type	the mib defines the type of each object id
SNMP set $value	新しい 値
SNMP set $object_id	snmp オブジェクト id
SNMP bool set	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
SNMP bool set mixed $object_id mixed $type mixed $value	snmp オブジェクト の 値 を 設定 する
SNMP set Security $contextName	コンテキスト 名
SNMP set Security $sec_level	セキュリティレベル noauthnopriv |authnopriv |authpriv
SNMP set Security $priv_passphrase	プライバシーパスフレーズ
SNMP set Security $contextEngineID	コンテキスト engineid
SNMP set Security $auth_protocol	認証 プロトコル md5 あるい は sha
SNMP set Security $auth_passphrase	認証 パスフレーズ
SNMP set Security $priv_protocol	プライバシープロトコル des あるい は aes
SNMP bool set Security	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
SNMP bool set Security string $sec_level string $auth_protocol string $auth_passphrase string $priv_protocol string $priv_passphrase string $contextName string $contextEngineID	セキュリティ 関連 の snmpv 3 セッションパラメータ を 設定 する
SNMP walk $object_id	取得 する サブツリー の ルート
SNMP walk $non_repeaters	これ は 、 渡さ れ た 変数 の 中 で 反復 処理 の 対象 外 と する 変数 の 数 を 指定 し ます
SNMP walk $max_repetitions	これ は 、 繰り返す 変数 の 反復 処理 の 最大 数 を 指定 し ます
SNMP walk $suffix_as_key	デフォルト で は 、 完全 な oid 記法 を 出力 配列 の キー として 使い ます
SNMP array walk	成功 し た 場合 は snmp オブジェクト の id とその 値 の 連想 配列 を 返し ます
SNMP array walk string $object_id bool $suffix_as_key int $max_repetitions int $non_repeaters	snmp オブジェクト の サブツリー を 取得 する
SoapClient mixed call string $function_name string $arguments	soap 関数 を コール する 非推奨
SoapClient string get Last Request	直近 の soap リクエスト を xml 文字列 で 返し ます
SoapClient string get Last Request	直近 の soap リクエスト を 返す
SoapClient string get Last Request Headers	直近 の soap リクエストヘッダ
SoapClient string get Last Request Headers	直近 の soap リクエストヘッダ を 返す
SoapClient string get Last Response	直近 の soap レスポンス を xml 文字列 で 返し ます
SoapClient string get Last Response	直近 の soap レスポンス を 返す
SoapClient string get Last Response Headers	直近 の soap レスポンスヘッダ
SoapClient string get Last Response Headers	直近 の soap レスポンスヘッダ を 返す
SoapClient array get Types	soap 型 の 配列 を 返し ます
SoapClient array get Types	soap 型 の 一覧 を 返す
SoapClient set Location $new_location	新しい エンドポイント url
SoapClient string set Location	それ まで の エンドポイント url を 返し ます
SoapClient string set Location string $new_location	使用 する ウェブサービス の 場所 を 設定 する
SoapClient Soap Client $options	オプション の 配列
SoapClient Soap Client $wsdl	wsdl ファイル の uri もしく は 非 wsdl モード の 場合 null 注意 : 開発 中 は 、 wsdl の キャッシュ を php
SoapClient mixed Soap Client mixed $wsdl array $options	soapclient コンストラクタ
SoapFault string construct string $faultcode string $faultstring string $faultactor string $detail string $faultname string $headerfault	soapfault コンストラクタ
SoapHeader Soap Header $mustUnderstand	soap ヘッダ 要素 の mustunderstand 属性 の 値
SoapHeader Soap Header $data	soap ヘッダ の 内容
SoapHeader Soap Header $namespace	soap ヘッダ 要素 の 名前 空間
SoapHeader Soap Header $name	soap ヘッダ 要素 の 名前
SoapHeader Soap Header $actor	soap ヘッダ 要素 の actor 属性 の 値
SoapHeader string Soap Header string $namespace string $name mixed $data bool $mustunderstand string $actor	soapheader コンストラクタ
SoapParam mixed construct mixed $data string $name	soapparam コンストラクタ
SoapParam Soap Param $data	渡す もしく は 返す データ
SoapParam Soap Param $name	パラメータ の 名前
SoapParam mixed Soap Param mixed $data string $name	soapparam コンストラクタ
SoapServer add Function $functions	単一 の 関数 を エクスポート する に は 、 この パラメータ に 文字 列 として 関数 名 を 渡し て く ださい
SoapServer void add Function mixed $functions	soap リクエスト によっ て 処理 さ れる 単一 も しく は いくつか の 関数 を 追加 する
SoapServer fault $name	フォールト の 名前
SoapServer fault $code	返し たい エラーコード
SoapServer fault $details	フォールト について の 詳細
SoapServer fault $actor	フォールト を 引き起こし た アクター を あらわす 文字列
SoapServer fault $string	エラー について の 簡単 な 説明
SoapServer void fault string $code string $string string $actor string $details string $name	エラー を 示す soapserver フォールト を 発行 する
SoapServer array get Functions	定義 さ れ て いる 関数 の 配列 を 返し ます
SoapServer array get Functions	定義 さ れ て いる 関数 の 一覧 を 返す
SoapServer handle $soap_request	soap リクエスト
SoapServer void handle string $soap_request	soap リクエスト を 処理 する
SoapServer set Class $args	これら の オプションパラメータ は 、 オブジェクト 作成 時 に デフォルト の クラスコンストラクタ に 渡さ れ ます
SoapServer set Class $class_name	エクスポート する クラス 名
SoapServer void set Class string $class_name mixed $args	soap リクエスト を 処理 する クラス を 設定 する
SoapServer set Object $object	リクエスト を 処理 する オブジェクト
SoapServer void set Object object $object	soap リクエスト の 処理 に 使用 する オブジェクト を 設定 する
SoapServer Soap Server $options	デフォルト の soap バージョン soap _version 内部 の 文字 エンコーディング encoding アクター の uri actor を 指定 する こと が でき ます
SoapServer Soap Server $wsdl	wsdl モード の 場合 、 これ に wsdl ファイル の uri を 指定 する 必要 が あり ます
SoapServer mixed Soap Server mixed $wsdl array $options	soapserver コンストラクタ
SoapVar string construct string $data string $encoding string $type_name string $type_namespace string $node_name string $node_namespace	soapvar コンストラクタ
SoapVar Soap Var $data	渡す もしく は 返す データ
SoapVar Soap Var $encoding	エンコーディング id
SoapVar Soap Var $node_namespace	xml ノード の 名前 空間
SoapVar Soap Var $node_name	xml ノード の 名前
SoapVar Soap Var $type_name	型名
SoapVar Soap Var $type_namespace	型 の 名前 空間
SoapVar mixed Soap Var mixed $data string $encoding string $type_name string $type_namespace string $node_name string $node_namespace	soapvar コンストラクタ
SolrClientException array get Internal Info	エラー が スロー さ れ た 際 の 内部 情報 を 含む 配列 を 返し ます
SolrClientException array get Internal Info	例外 が スロー さ れ た 際 の 内部 情報 を 返す
SolrDocument add Field $fieldName	フィールド 名
SolrDocument add Field $fieldValue	フィールド の 値
SolrDocument bool add Field	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
SolrDocument bool add Field string $fieldName string $fieldValue	文書 に フィールド を 追加
SolrDocument void clone	solrdocument オブジェクト の コピー を 作成
SolrDocument SolrDocumentField current	フィールド を 返し ます
SolrDocument SolrDocumentField current	現行 の フィールド を 取得
SolrDocument delete Field $fieldName	フィールド 名
SolrDocument bool delete Field	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
SolrDocument bool delete Field string $fieldName	文書 から フィールド を 除去
SolrDocument void destruct	デストラクタ
SolrDocument get $fieldName	フィールド 名
SolrDocument SolrDocumentField get	solrdocumentfield インスタンス を 返し ます
SolrDocument SolrDocumentField get string $fieldName	プロパティ として フィールド に アクセス
SolrDocument get Field $fieldName	フィールド 名
SolrDocument SolrDocumentField get Field	成功時 に は solrdocumentfield 、 失敗 時 に は false を 返し ます
SolrDocument SolrDocumentField get Field string $fieldName	名前 で フィールド を 取得
SolrDocument int get Field Count	成功時 に は 整数 、 失敗 時 に は false を 返し ます
SolrDocument int get Field Count	この 文書 内 の フィールド 数 を 返す
SolrDocument array get Field Names	この 文書 内 の フィールド 名 を 含む 配列 を 返し ます
SolrDocument array get Field Names	文書内 の フィールド 名 の 配列 を 返す
SolrDocument isset $fieldName	フィールド 名
SolrDocument bool isset	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
SolrDocument bool isset string $fieldName	フィールド が 存在 する か チェック
SolrDocument string key	現行 の キー を 返し ます
SolrDocument string key	現行 の キー を 返す
SolrDocument void next	内部 ポインタ を 次 の フィールド に 移動
SolrDocument offset Exists $fieldName	フィールド 名
SolrDocument bool offset Exists	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
SolrDocument bool offset Exists string $fieldName	特定 の フィールド が 存在 する かどう か チェック
SolrDocument offset Get $fieldName	フィールド 名
SolrDocument SolrDocumentField offset Get	solrdocumentfield オブジェクト を 返し ます
SolrDocument SolrDocumentField offset Get string $fieldName	フィールド を 取得
SolrDocument offset Set $fieldValue	この フィールド に対する 値
SolrDocument offset Set $fieldName	フィールド 名
SolrDocument void offset Set string $fieldName string $fieldValue	文書 に フィールド を 追加
SolrDocument offset Unset $fieldName	フィールド 名
SolrDocument void offset Unset string $fieldName	フィールド を 除去
SolrDocument bool reset	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
SolrDocument bool reset	solrdocument :: clear への エイリアス
SolrDocument array to Array	文書 の 配列 表現 を 返し ます
SolrDocument array to Array	文書 の 配列 表現 を 返す
SolrException array get Internal Info	エラー が スロー さ れ た 際 の 内部 情報 を 含む 配列 を 返し ます
SolrException array get Internal Info	例外 が スロー さ れ た 際 の 内部 情報 を 返す
SolrIllegalArgumentException array get Internal Info	エラー が スロー さ れ た 際 の 内部 情報 を 含む 配列 を 返し ます
SolrIllegalArgumentException array get Internal Info	例外 が スロー さ れ た 際 の 内部 情報 を 返す
SolrIllegalOperationException array get Internal Info	エラー が スロー さ れ た 際 の 内部 情報 を 含む 配列 を 返し ます
SolrIllegalOperationException array get Internal Info	例外 が スロー さ れ た 際 の 内部 情報 を 返す
SolrInputDocument delete Field $fieldName	フィールド 名
SolrInputDocument bool delete Field	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
SolrInputDocument bool delete Field string $fieldName	文書 から フィールド を 除去
SolrInputDocument float get Boost	成功 し た 場合 は boost 値 、 失敗 し た 場合 は false を 返し ます
SolrInputDocument float get Boost	文書 に対する 現行 の boost 値 を 取得
SolrInputDocument get Field $fieldName	フィールド 名
SolrInputDocument SolrDocumentField get Field	成功時 に は solrdocumentfield オブジェクト 、 失敗 時 に は false を 返し ます
SolrInputDocument SolrDocumentField get Field string $fieldName	名前 で フィールド を 取得
SolrInputDocument get Field Boost $fieldName	フィールド 名
SolrInputDocument float get Field Boost	フィールド の boost 値 、 また は エラー が あっ た 場合 に は false を 返し ます
SolrInputDocument float get Field Boost string $fieldName	特定 の フィールド に対する boost 値 を 取得
SolrInputDocument int get Field Count	成功 し た 場合 に 整数 、 失敗 し た 場合 に false を 返し ます
SolrInputDocument int get Field Count	文書内 の フィールド 数 を 返す
SolrInputDocument array get Field Names	成功時 に は 配列 、 失敗 時 に は false を 返し ます
SolrInputDocument array get Field Names	文書内 の フィールド を 全て 含む 配列 を 返す
SolrInputDocument bool reset	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
SolrInputDocument set Boost $documentBoostValue	この 文書 に対する インデキシング 時間 の boost 値
SolrInputDocument bool set Boost	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
SolrInputDocument bool set Boost float $documentBoostValue	この 文書 に対する boost 値 を 設定
SolrObject - construct	solr オブジェクト を 生成
SolrObject offset Get $property_name	プロパティ 名
SolrObject mixed offset Get	プロパティ の 値 を 返し ます
SolrObject mixed offset Get string $property_name	プロパティ を 取得 する ため に 使用 さ れる
SolrParams add $value	パラメータ 値
SolrParams add $name	パラメータ 名
SolrParams SolrParams add	成功時 に solrparams インスタンス を 返し ます
SolrParams add Param $value	パラメータ 値
SolrParams add Param $name	パラメータ 名
SolrParams SolrParams add Param	成功時 に solrparam オブジェクト 、 失敗 時 に false を 返し ます
SolrParams SolrParams add Param string $name string $value	オブジェクト に パラメータ を 追加
SolrParams string serialize	カスタム の シリアライズ で 使わ れ ます
SolrParams set $value	パラメータ 値
SolrParams set $name	パラメータ 名
SolrParams set Param $value	パラメータ 値
SolrParams set Param $name	パラメータ 名
SolrParams SolrParams set Param	成功時 に solrparam オブジェクト 、 値 の 場合 に false を 返し ます
SolrParams SolrParams set Param string $name string $value	パラメータ を 指定 さ れ た 値 に 設定
SolrParams to String $url_encode	url エンコード さ れ た 値 が 返さ れる かどう か
SolrParams string to String	成功 時 に 文字列 、 失敗 時 に false を 返し ます
SolrParams unserialize $serialized	オブジェクト の シリアライズ さ れ た 表現
SolrPingResponse string get Response	空文 字列 を 返し ます
SolrPingResponse string get Response	サーバー から の レスポンス を 返す
SolrQuery set Query $query	検索 クエリー
SolrQuery SolrQuery set Query	現行 の solrquery オブジェクト を 返し ます
SolrQuery SolrQuery set Query string $query	検索 クエリー を 設定
SolrResponse string get Digested Response	シリアライズ さ れ た php データ として xml レスポンス を 返し ます
SolrResponse string get Digested Response	シリアライズ さ れ た php データ として xml レスポンス を 返す
SolrResponse int get Http Status	レスポンス の http ステータス を 返し ます
SolrResponse int get Http Status	レスポンス の http ステータス を 返す
SolrResponse string get Http Status Message	http ステータス に関する 詳細 を 返し ます
SolrResponse string get Http Status Message	http ステータス に関する 詳細 を 返す
SolrResponse string get Raw Request	solr サーバー に 送られ た 生 の リクエスト を 返し ます
SolrResponse string get Raw Request	solr サーバー に 送られ た 生 の リクエスト を 返す
SolrResponse string get Raw Request Headers	solr サーバー に 送られ た 生 の リクエストヘッダ を 返し ます
SolrResponse string get Raw Request Headers	solr サーバー に 送られ た 生 の リクエストヘッダ を 返す
SolrResponse string get Raw Response	solr サーバー から の 生 の レスポンス を 返し ます
SolrResponse string get Raw Response	solr サーバー から の 生 の レスポンス を 返す
SolrResponse string get Raw Response Headers	solr サーバー から の 生 の レスポンスヘッダ を 返し ます
SolrResponse string get Raw Response Headers	solr サーバー から の 生 の レスポンスヘッダ を 返す
SolrResponse SolrObject get Response	サーバー から の xml レスポンス を 表現 する solrobject を 返し ます
SolrResponse SolrObject get Response	サーバー から の xml レスポンス を 表現 する solrobject を 返す
SolrResponse set Parse Mode $parser_mode	solrresponse :: parse _solr _doc は 、 solrdocument インスタンス 内 の 文書 を パース し ます
SolrResponse bool set Parse Mode	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
SolrResponse bool set Parse Mode int $parser_mode	パースモード を 設定
SolrUtils string get Solr Version	apache solr エクステンション の 現行 バージョン
SolrUtils string get Solr Version	solr エクステンション の 現行 バージョン を 返す
SphinxClient build Excerpts $index	インデックス の 名前
SphinxClient build Excerpts $words	強調 さ せる キーワード
SphinxClient build Excerpts $opts	追加 の 強調 オプション 以下 を 参照く ださい の 連想 配列
SphinxClient build Excerpts $docs	ドキュメント の 内容 を 含む 文字 列 の 配列
SphinxClient array build Excerpts	成功 し た 場合 に 抜粋 部 の 配列 、 失敗 し た 場合 に false を 返し ます
SphinxClient array build Excerpts array $docs string $index string $words array $opts	テキスト の 抜粋 を 作成 する
SphinxClient build Keywords $index	トークン 化 の 設定 と キーワード 出現 統計 情報 を 取得 する インデックス
SphinxClient build Keywords $query	キーワード を 抽出 する クエリ
SphinxClient build Keywords $hits	キーワード 統計 情報 の 生成 を 有効 / 無効 に する フラグ
SphinxClient array build Keywords	キーワード 単位 の 情報 を 含む 連想 配列 の 配列 を 返し ます
SphinxClient array build Keywords string $query string $index bool $hits	キーワード を クエリ から 抽出 する
SphinxClient - construct	新しい sphinxclient オブジェクト を 作成 する
SphinxClient string get Last Error	直近 の エラーメッセージ を 返し ます
SphinxClient string get Last Error	直近 の エラーメッセージ を 取得 する
SphinxClient string get Last Warning	直近 の 警告 メッセージ を 返し ます
SphinxClient string get Last Warning	直近 の 警告 を 取得 する
SplDoublyLinkedList mixed current	現在 の ノード の 値 を 返し ます
SplDoublyLinkedList mixed current	現在 の 配列 の 要素 を 返す
SplDoublyLinkedList mixed key	現在 の ノード の インデックス を 返し ます
SplDoublyLinkedList mixed key	現在 の ノード の インデックス を 返す
SplDoublyLinkedList offset Set $index	設定 し たい インデックス
SplDoublyLinkedList offset Set $newval	index の 新しい 値
SplDoublyLinkedList void offset Set mixed $index mixed $newval	指定 し た $ index の 値 を $ newval に 設定 する
SplDoublyLinkedList offset Unset $index	削除 し たい インデックス
SplDoublyLinkedList void offset Unset mixed $index	指定 し た $ index の 値 を 削除 する
SplDoublyLinkedList void prev	前 の エントリ に 移動 する
SplDoublyLinkedList push $value	追加 し たい 値
SplDoublyLinkedList void push mixed $value	双方向 リンクリスト の 末尾 に 要素 を 追加 する
SplDoublyLinkedList string serialize	シリアライズ し た 文字列 を 返し ます
SplDoublyLinkedList string serialize	ストレージ を シリアライズ する
SplDoublyLinkedList unshift $value	追加 する 値
SplDoublyLinkedList void unshift mixed $value	双方向 リンクリスト の 先頭 に 要素 を 追加 する
SplDoublyLinkedList bool valid	双方向 リンクリスト にまだ ノード が 含まれる 場合 に true 、 そう で ない 場合 に false を 返し ます
SplDoublyLinkedList bool valid	双方向 リンクリスト にまだ ノード が ある かど う か を 調べる
SplFileInfo construct $file_name	ファイル へ の パス
SplFileInfo string construct string $file_name	新しい splfileinfo オブジェクト を 作成 する
SplFileInfo int get ATime	ファイル に 最後 に アクセス が あっ た 時刻 を 返し ます
SplFileInfo int get ATime	ファイル の 最終 アクセス 時刻 を 取得 する
SplFileInfo get Basename $suffix	返さ れる ベース 名 から 取り除き たい 、 オプション の サフィックス
SplFileInfo string get Basename	パス 情報 を 含ま ない ベース 名 を 返し ます
SplFileInfo string get Basename string $suffix	ファイル の ベース 名 を 取得 する
SplFileInfo int get CTime	最終 変更 時刻 を unix タイムスタンプ で 返し ます
SplFileInfo int get CTime	inode 変更 時刻 を 取得 する
SplFileInfo string get Extension	ファイル の 拡張子 を 含む 文字 列 を 返し ます
SplFileInfo string get Extension	ファイル の 拡張子 を 取得 する
SplFileInfo int get Group	グループ id を 数値 形式 で 返し ます
SplFileInfo int get Group	ファイル の グループ を 取得 する
SplFileInfo string get Link Target	ファイルシステム の リンク 先 を 返し ます
SplFileInfo string get Link Target	リンク 先 を 取得 する
SplFileInfo int get MTime	ファイル の 最終 変更 時刻 を unix タイムスタンプ で 返し ます
SplFileInfo int get MTime	最終 変更 時刻 を 取得 する
SplFileInfo string get Path	ファイル へ の パス を 返し ます
SplFileInfo string get Path	ファイル 名 を 除い た パス を 取得 する
SplFileInfo string get Pathname	ファイル へ の パス を 返し ます
SplFileInfo string get Pathname	ファイル へ の パス を 取得 する
SplFileInfo int get Perms	ファイル の パーミッション を 返し ます
SplFileInfo int get Perms	ファイル の パーミッション を 取得 する
SplFileInfo string get Real Path	ファイル へ の パス を 返し ます
SplFileInfo string get Real Path	ファイル へ の 絶対 パス を 取得 する
SplFileInfo int get Size	ファイルサイズ を バイト 数 で 返し ます
SplFileInfo int get Size	ファイルサイズ を 取得 する
SplFileInfo bool is Executable	実行 可能 で ある 場合 に true 、 そう で ない 場合 に false を 返し ます
SplFileInfo bool is Executable	ファイル が 実行 可能 か どう か を 調べる
SplFileInfo bool is Link	ファイル が リンク で ある 場合 に true 、 そう で ない 場合 に false を 返し ます
SplFileInfo bool is Link	ファイル が リンク で ある かど う か を 調べる
SplFileInfo bool is Writable	書き込み 可能 な 場合 に true 、 そう で ない 場合 に false を 返し ます
SplFileInfo bool is Writable	エントリ が 書き込み 可能 で ある かど う か を 調べる
SplFileInfo open File $use_include_path	true に 設定 する と 、 この ファイル 名 を include _path の 中 から も 探し ます
SplFileInfo open File $open_mode	ファイル を 開く際 の モード
SplFileInfo open File $context	コンテキスト について の 説明 は 、 マニュアル の コンテキスト の 節 を 参照く ださい
SplFileInfo SplFileObject open File	オープン し た ファイル を splfileobject オブジェクト で 返し ます
SplFileInfo SplFileObject open File string $open_mode bool $use_include_path resource $context	ファイル の splfileobject オブジェクト を 取得 する
SplFileInfo set File Class $class_name	splfileinfo :: openfile が コール さ れ た 際 に 使用 する クラス 名
SplFileInfo void set File Class string $class_name	splfileinfo :: openfile で 使用 する クラス を 設定 する
SplFileInfo set Info Class $class_name	splfileinfo :: getfileinfo および splfileinfo :: getpathinfo が コール さ れ た 際 に 使用 する クラス 名
SplFileInfo void set Info Class string $class_name	splfileinfo :: getfileinfo および splfileinfo :: getpathinfo で 使用 する クラス を 設定 する
SplFileInfo void to String	ファイル へ の パス を 文字列 で 返す
SplFileObject string|array current	ファイル の 現在 の 行 を 取得 し ます
SplFileObject string|array current	ファイル の 現在 の 行 を 取得 する
SplFileObject bool eof	ファイル が 終端 で あれ ば true 、 そう で なけれ ば false を 返し ます
SplFileObject bool eof	ファイル の 終端 に 到達 し て いる か 調べる
SplFileObject bool fflush	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
SplFileObject bool fflush	出力 を ファイル に フラッシュ する
SplFileObject string fgetc	ファイル から 読み込ま れ た 1 文字 を 含む 文字 列 もしく は 終端 の 場合 は false を 返し ます
SplFileObject string fgetc	ファイル から 文字 を 取り出す
SplFileObject string fgets	ファイル から 次 の 行 を 含む 文字 列 、 もしく は エラー の とき は false を 返し ます
SplFileObject string fgets	ファイル から 1 行取り出す
SplFileObject fgetss $allowable_tags	オプション の パラメータ で 、 取り除き たく ない タグ を 指定 し ます
SplFileObject string fgetss	html と php コード が 取り除か れ た ファイル の 次 の 行 を 含む 文字 列 、 もしく は false を 返し ます
SplFileObject string fgetss string $allowable_tags	ファイル から 1 行取り出し html タグ を 取り除く
SplFileObject int fpassthru	handle から 読み込ま れ 出力 を 通し て 渡さ れ た 文字数 を 返し ます
SplFileObject int fpassthru	ファイルポインタ に 残っ て いる データ を すべ て 出力 する
SplFileObject fseek $offset	オフセット です
SplFileObject fseek $whence	whence の 値 は 次 の よう なもの に なり ます : seek _set - offset バイト に 等しい 位置 に セット し ます
SplFileObject int fseek	探索 が 成功 し た 場合 は 0 、 そう で なけれ ば - 1 が 返さ れ ます
SplFileObject int fseek int $offset int $whence	ファイルポインタ を 移動 さ せる
SplFileObject array fstat	ファイル の 統計 情報 の 配列 を 返し ます ; 配列 フォーマット の 詳細 は stat の マニュアルページ を 参照 し て くだ さい
SplFileObject array fstat	ファイル の 情報 を 得る
SplFileObject int ftell	ファイルポインタ の 位置 を 整数 として 、 もしく は エラー の とき は false を 返し ます
SplFileObject int ftell	ファイルポインタ の 現在 位置 を 返す
SplFileObject array get Csv Control	区切り と 囲み 文字 を 含む 数字 添字 配列 を 返し ます
SplFileObject array get Csv Control	csv の 区切り と 囲み 文字 を 取得 する
SplFileObject int get Max Line Len	splfileobject :: setmaxlinelen で セット さ れる 場合 は 行 の 最大 バイト 数 を 返し ます
SplFileObject int get Max Line Len	行 の 最大 バイト 数 を 取得 する
SplFileObject bool has Children	returns false
SplFileObject bool has Children	splfileobject は 子 を 持ち ませ ん
SplFileObject int key	現在 の 行番 号 を 返し ます
SplFileObject int key	行番号 を 取得 する
SplFileObject seek $line_pos	ゼロ を 起点 と し た 移動 さ せる 行数
SplFileObject void seek int $line_pos	ファイルポインタ を 指定行 に 移動 さ せる
SplFileObject set Csv Control $delimiter	フィールド の 区切り 文字 1 文字 のみ
SplFileObject set Csv Control $enclosure	フィールド の 囲み 文字 1 文字 のみ
SplFileObject set Csv Control $escape	フィールド の エスケープ 文字 1 文字 のみ
SplFileObject void set Csv Control string $delimiter string $enclosure string $escape	csv の 区切り 文字 と 囲み 文字 を セット する
SplFileObject bool valid	ファイル 終端 に 到達 し て い なけれ ば true 、 そう で なけれ ば false を 返し ます
SplFileObject bool valid	ファイル 終端 で ない か チェック する
SplFixedArray int count	配列 の サイズ を 返し ます
SplFixedArray int count	配列 の サイズ を 返す
SplFixedArray mixed current	現在 の 要素 の 値 を 返し ます
SplFixedArray mixed current	現在 の 配列 の 要素 を 返す
SplFixedArray int get Size	配列 の サイズ を integer で 返し ます
SplFixedArray int get Size	配列 の サイズ を 取得 する
SplFixedArray int key	現在 の 配列 の 添字 を 返し ます
SplFixedArray int key	現在 の 配列 の 添字 を 返す
SplFixedArray void next	次 の エントリ に 進む
SplFixedArray offset Exists $index	調べ たい 添字
SplFixedArray bool offset Exists	指定 し た 添字 が 存在 する 場合 に true 、 それ 以外 の 場合 に false を 返し ます
SplFixedArray bool offset Exists int $index	指定 し た 添字 が 存在 する かど う か を 返す
SplFixedArray offset Get $index	値 を 取得 し たい 添字
SplFixedArray mixed offset Get	index で 指定 し た 添字 の 値 を 返し ます
SplFixedArray mixed offset Get int $index	指定 し た 添字 の 値 を 返す
SplFixedArray offset Unset $index	消去 し たい 添字
SplFixedArray void offset Unset int $index	指定 し た 添字 の 値 を 消去 する
SplFixedArray void rewind	イテレータ を 先頭 に 巻き戻す
SplFixedArray array to Array	固定 長配 列 と 同じ 内容 の php の 配列 を 返し ます
SplFixedArray array to Array	固定 長配 列 から php の 配列 を 返す
SplFixedArray bool valid	配列 にまだ 要素 が ある 場合 に true 、 それ 以外 の 場合 に false を 返し ます
SplFixedArray bool valid	配列 にまだ 要素 が ある かど う か を 調べる
SplFixedArray void wakeup	アンシリアライズ 後 に 配列 を 再初 期化 する
SplHeap mixed current	現在 の ノード の 値 を 返し ます
SplHeap mixed current	イテレータ が 指す 現在 の ノード を 返す
SplHeap mixed key	現在 の ノード の インデックス を 返し ます
SplHeap mixed key	現在 の ノード の インデックス を 返す
SplHeap void rewind	イテレータ を 先頭 に 巻き戻す 何 もし ない
SplHeap bool valid	ヒープ にまだ ノード が 含まれる 場合 に true 、 そう で ない 場合 に false を 返し ます
SplHeap bool valid	ヒープ にまだ ノード が ある かど う か を 調べる
SplObjectStorage add All $storage	インポート し たい ストレージ
SplObjectStorage void add All SplObjectStorage $storage	別 の ストレージ から すべ て の オブジェクト を 追加 する
SplObjectStorage attach $object	追加 し たい オブジェクト
SplObjectStorage attach $data	object に 関連 づける データ
SplObjectStorage void attach object $object mixed $data	オブジェクト を ストレージ に 追加 する
SplObjectStorage contains $object	探し たい オブジェクト
SplObjectStorage bool contains	object が ストレージ に 存在 する 場合 に true 、 それ 以外 の 場合 に false を 返し ます
SplObjectStorage bool contains object $object	ストレージ に 特定 の オブジェクト が 含ま れる かど う か を 調べる
SplObjectStorage int count	ストレージ 内 の オブジェクト の 数 を 返し ます
SplObjectStorage int count	ストレージ 内 の オブジェクト の 数 を 返す
SplObjectStorage object current	現在 の イテレータ の 位置 に ある オブジェクト を 返し ます
SplObjectStorage object current	現在 の ストレージ の 要素 を 返す
SplObjectStorage detach $object	取り除き たい オブジェクト
SplObjectStorage void detach object $object	オブジェクト を ストレージ から 取り除く
SplObjectStorage int key	イテレータ の 現在 位置 に 対応 する インデックス を 返し ます
SplObjectStorage int key	イテレータ の 現在 位置 を 返す
SplObjectStorage void next	次 の エントリ に 移動 する
SplObjectStorage offset Set $object	データ を 関連 づけ たい オブジェクト
SplObjectStorage offset Set $data	object に 関連 づける データ
SplObjectStorage void offset Set object $object mixed $data	ストレージ 内 の オブジェクト に データ を 関連 づける
SplObjectStorage offset Unset $object	取り除き たい オブジェクト
SplObjectStorage void offset Unset object $object	ストレージ から オブジェクト を 取り除く
SplObjectStorage remove All Except $storage	現在 の ストレージ に 残し て おき たい 要素 を 含む ストレージ
SplObjectStorage void remove All Except SplObjectStorage $storage	別 の ストレージ に 含ま れ て いる もの 以外 の すべ て の オブジェクト を 現在 の ストレージ から 取り除く
SplObjectStorage string serialize	ストレージ の 文字 列表 現 を 返し ます
SplObjectStorage string serialize	ストレージ を シリアライズ する
SplObjectStorage unserialize $serialized	ストレージ を シリアライズ し た もの
SplObjectStorage void unserialize string $serialized	ストレージ の 文字 列表 現 を アンシリアライズ する
SplObjectStorage bool valid	イテレータ の エントリ が 有効 な 場合 に true 、 それ 以外 の 場合 に false を 返し ます
SplObjectStorage bool valid	イテレータ の 現在 の エントリ が 有効 か どう か を 返す
SplObserver update $subject	observer に 更新 を 通知 する splsubject
SplObserver void update SplSubject $subject	subject の 更新 を 受信 する
SplPriorityQueue compare $priority1	比較 し たい 最初 の ノード の 優先 順位
SplPriorityQueue compare $priority2	比較 し たい 2 番目 の ノード の 優先 順位
SplPriorityQueue int compare	比較 結果 を 返し ます
SplPriorityQueue int compare mixed $priority1 mixed $priority2	要素 の 優先 順位 を 比較 し 、 ヒープ 内 の 適切 な 位置 に 置く
SplPriorityQueue mixed current	現在 の ノード の 値 あるい は 優先 順位 あるい は その 両方 を 、 抽出 フラグ の 設定 に 応じ て 返し ます
SplPriorityQueue mixed current	イテレータ が 指す 現在 の ノード を 返す
SplPriorityQueue insert $value	挿入 する 値
SplPriorityQueue insert $priority	関連 づける 優先 順位
SplPriorityQueue void insert mixed $value mixed $priority	キュー に 要素 を 挿入 する
SplPriorityQueue mixed key	現在 の ノード の インデックス を 返し ます
SplPriorityQueue mixed key	現在 の ノード の インデックス を 返す
SplPriorityQueue void next	次 の ノード に 移動 する
SplPriorityQueue void rewind	イテレータ を 先頭 に 巻き戻す 何 もし ない
SplPriorityQueue bool valid	キュー にまだ ノード が 含まれる 場合 に true 、 そう で ない 場合 に false を 返し ます
SplPriorityQueue bool valid	キュー にまだ ノード が ある かど う か を 調べる
SplQueue enqueue $value	キュー に 追加 する 値
SplQueue void enqueue mixed $value	要素 を キュー に 追加 する
SplSubject detach $observer	デタッチ する splobserver
SplSubject void detach SplObserver $observer	observer を デタッチ する
SplSubject void notify	observer に 通知 する
SplTempFileObject construct $max_memory	一時ファイル に 使う メモリ の 最大 量 バイト 単位 、 デフォルト は 2 mb
SplTempFileObject int construct int $max_memory	新しい 一時 ファイルオブジェクト を 作成 する
SQLite3 busy Timeout $msecs	スリープ さ せる 時間 ミリ秒
SQLite3 bool busy Timeout	成功 し た 場合 に true 、 失敗 し た 場合 に false を 返し ます
SQLite3 bool busy Timeout int $msecs	接続 が ビジー 状態 の とき の ハンドラ を 設定 する
SQLite3 int changes	直近 の sql 文 で 変更 あるい は 挿入 、 削除 さ れ た 行 の 数 を 表す integer 値 を 返し ます
SQLite3 int changes	直近 の sql 文 で 変更 あるい は 挿入 、 削除 さ れ た 行 の 数 を 返す
SQLite3 bool close	成功 し た 場合 に true 、 失敗 し た 場合 に false を 返し ます
SQLite3 bool close	データベース と の 接続 を 閉じる
SQLite3 create Aggregate $step_callback	集約 対象 の すべ て の 項目 に 適用 する コールバック として 指定 する 、 php の 関数 あるい は ユーザー 定義 関数 の 名前
SQLite3 create Aggregate $final_callback	集約 処理 の 最後 に 適用 する コールバック として 指定 する 、 php の 関数 あるい は ユーザー 定義 関数 の 名前
SQLite3 create Aggregate $argument_count	sql 集約 関数 が 受け 取る パラメータ の 数
SQLite3 create Aggregate $name	作成 あるい は 再定義 し たい sql 集約 関数 の 名前
SQLite3 bool create Aggregate	集約 関数 の 作成 に 成功 し た 場合 に true 、 失敗 し た 場合 に false を 返し ます
SQLite3 bool create Aggregate string $name mixed $step_callback mixed $final_callback int $argument_count	sql の 集約 関数 として 使用 する php 関数 を 登録 する
SQLite3 create Function $callback	コールバック として 指定 する 、 php の 関数 あるい は ユーザー 定義 関数 の 名前
SQLite3 create Function $argument_count	sql 関数 が 受け 取る パラメータ の 数
SQLite3 create Function $name	作成 あるい は 再定義 し たい sql 関数 の 名前
SQLite3 bool create Function	関数 の 作成 に 成功 し た 場合 に true 、 失敗 し た 場合 に false を 返し ます
SQLite3 bool create Function string $name mixed $callback int $argument_count	sql の スカラー 関数 として 使用 する php 関数 を 登録 する
SQLite3 escape String $value	エスケープ し たい 文字列
SQLite3 string escape String	sql 文 の 中 で 安全 に 使える よう 適切 に エスケープ さ れ た 文字列 を 返し ます
SQLite3 string escape String string $value	適切 に エスケープ さ れ た 文字列 を 返す
SQLite3 exec $query	実行 し たい sql クエリ 通常 は insert 、 update あるい は delete クエリ
SQLite3 bool exec	クエリ が 成功 し た 場合 に true 、 失敗 し た 場合 に false を 返し ます
SQLite3 bool exec string $query	指定 し た データベース に 、 結果 を 返さ ない クエリ を 実行 する
SQLite3 int last Error Code	直近 で 失敗 し た sqlite リクエスト の 結果 コード を 数値 で 返し ます
SQLite3 int last Error Code	直近 で 失敗 し た sqlite リクエスト の 結果 コード を 数値 で 返す
SQLite3 string last Error Msg	直近 で 失敗 し た sqlite リクエスト について の 英文 テキスト の 説明 を 返し ます
SQLite3 string last Error Msg	直近 で 失敗 し た sqlite リクエスト について の 英文 テキスト の 説明 を 返す
SQLite3 load Extension $shared_library	読み込み たい ライブラリ の 名前
SQLite3 bool load Extension	拡張 ライブラリ の 読み込み に 成功 し た 場合 に true 、 失敗 し た 場合 に false を 返し ます
SQLite3 bool load Extension string $shared_library	sqlite 拡張 ライブラリ を 読み込む
SQLite3 open $filename	sqlite データベース へ の パス
SQLite3 open $encryption_key	オプション の 暗号 キー
SQLite3 open $flags	sqlite データベース の オープン 方法 を 指定 する フラグ
SQLite3 void open string $filename int $flags string $encryption_key	sqlite データベース を オープン する
SQLite3 prepare $query	準備 し たい sql クエリ
SQLite3 SQLite3Stmt prepare	成功 し た 場合 に sqlite 3stmt オブジェクト 、 失敗 し た 場合 に false を 返し ます
SQLite3 SQLite3Stmt prepare string $query	実行 する sql 文 を 準備 する
SQLite3 query $query	実行 し たい sql クエリ
SQLite3 SQLite3Result query	クエリ が 結果 を 返す 場合 は sqlite 3result オブジェクト を 返し ます
SQLite3 SQLite3Result query string $query	sql クエリ を 実行 する
SQLite3 query Single $entire_row	デフォルト で は 、 querysingle は クエリ が 返す 結果 の 最初 の カラム の 値 を 返し ます
SQLite3 query Single $query	実行 し たい sql クエリ
SQLite3 mixed query Single	結果 の 最初 の カラム の 値 あるい は 最初 の 行全 体 の 配列 entire _row が true の 場合 を 返し ます
SQLite3 mixed query Single string $query bool $entire_row	クエリ を 実行 し 、 単一 の 結果 を 返す
SQLite3 array version	キー & quot ;versionstring &quot ; および & quot ;versionnumber &quot ; を 持つ 連想 配列 を 返し ます
SQLite3 array version	sqlite 3 ライブラリ の バージョン を 、 文字 列定 数 と 数値 で 返す
SQLite3Result column Type $column_number	0 から 始まる カラム の 数値 インデックス
SQLite3Result int column Type	column _number で 指定 し た カラム の データ 型 インデックス sqlite 3 _ integer 、 sqlite 3 _ float 、 sqlite 3 _ text 、 sqlite 3 _ blob あるい は sqlite 3 _ null のいずれ か を 返し ます
SQLite3Result int column Type int $column_number	n 番目 の カラム の 型 を 返す
SQLite3Result fetch Array $mode	次 の 行 を どの よう に 返すか を 制御 し ます
SQLite3Result array fetch Array	結果 の 行 を 、 連想 配列 あるい は 数値 添字 配列 ある い は その 両方 で 取得 し ます
SQLite3Result array fetch Array int $mode	結果 の 行 を 、 連想 配列 あるい は 数値 添字 配列 ある い は その 両方 で 取得 する
SQLite3Result bool finalize	true を 返し ます
SQLite3Result bool finalize	結果 セット を 閉じる
SQLite3Result int num Columns	結果 セット の カラム 数 を 返し ます
SQLite3Result int num Columns	結果 セット の カラム 数 を 返す
SQLite3Stmt bind Param $type	バインド する パラメータ の データ 型
SQLite3Stmt bind Param $param	変数 に バインド する パラメータ
SQLite3Stmt bind Param $sql_param	パラメータ を どの 変数 に バインド する か を 表す 文字列
SQLite3Stmt bool bind Param	パラメータ を 変数 に バインド し た 場合 に true 、 失敗 し た 場合 に false を 返し ます
SQLite3Stmt bool bind Param string $sql_param mixed $param int $type	パラメータ を 変数 に バインド する
SQLite3Stmt bool clear	バインド さ れ て いる パラメータ の クリア に 成功 し た 場合 に true 、 失敗 し た 場合 に false を 返し ます
SQLite3Stmt bool clear	現在 バインド さ れ て いる すべ て の パラメータ を クリア する
SQLite3Stmt SQLite3Result execute	プリペアドステートメント の 実行 に 成功 し た 場合 に sqlite 3result オブジェクト 、 失敗 し た 場合 に false を 返し ます
SQLite3Stmt SQLite3Result execute	プリペアドステートメント を 実行 し 、 結果 セットオブジェクト を 返す
SQLite3Stmt int param Count	プリペアドステートメント 内 の パラメータ の 数 を 返し ます
SQLite3Stmt int param Count	プリペアドステートメント 内 の パラメータ の 数 を 返す
SQLite3Stmt bool reset	ステートメント の リセット に 成功 し た 場合 に true 、 失敗 し た 場合 に false を 返し ます
SQLite3Stmt bool reset	プリペアドステートメント を リセット する
streamWrapper - construct	新しい ストリームラッパー を 作成 する
streamWrapper - destruct	既存 の ストリームラッパー を 破棄 する
streamWrapper dir opendir $path	opendir に渡す url を 指定 し ます
streamWrapper dir opendir $options	safe _mode 0x 0 4 を 強制 する か 否か
streamWrapper bool dir opendir	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
streamWrapper bool dir opendir string $path int $options	ディレクトリハンドル を オープン する
streamWrapper rename $path_to	path _from の 変更 後 の url
streamWrapper rename $path_from	現在 の ファイル の url
streamWrapper bool rename	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
streamWrapper bool rename string $path_from string $path_to	ファイル あるい は ディレクトリ の 名前 を 変える
streamWrapper rmdir $options	stream _mkdir _recursive など の 値 の ビットマスク
streamWrapper rmdir $path	削除 し たい ディレクトリ の url
streamWrapper bool rmdir	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
streamWrapper bool rmdir string $path int $options	ディレクトリ を 削除 する
streamWrapper stream cast $cast_as	stream _select が stream _cast を コール し た 場合 は stream _cast _for _select 、 stream _cast がそれ 以外 の 用途 で コール さ れ た 場合 は stream _cast _as _stream
streamWrapper resource stream cast	ラッパー が 使用 し て いる ストリームリソース 、 あるい は false を 返し ます
streamWrapper resource stream cast int $cast_as	元 と なる リソース を 取得 する
streamWrapper void stream close	リソース を 閉じる
streamWrapper bool stream eof	読み込み / 書き込み 位置 が ストリーム の 末尾 に あっ て もう それ 以上 読み込む データ が ない 場合 に true 、 それ 以外 の 場合 に false を 返し ます
streamWrapper bool stream eof	ファイルポインタ が 終端 に ある かど う か を 調べる
streamWrapper bool stream flush	キャッシュデータ が 正常 に 格納 でき た あるい は 格納 する データ が なかっ た 場合 に true 、 データ を 格納 でき なかっ た 場合 に false を 返し ます
streamWrapper bool stream flush	出力 を フラッシュ する
streamWrapper stream metadata $path	メタデータ を 設定 する ファイルパス あるい は url
streamWrapper stream metadata $value	option の 値 が stream _meta _touch の 場合 は 、 touch 関数 の 二つ の 引数 を 含む 配列
streamWrapper stream metadata $option	次 のい ずれ か です
streamWrapper bool stream metadata	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
streamWrapper bool stream metadata string $path int $option mixed $value	ストリームオプション を 変更 する
streamWrapper stream open $options	ストリーム api が 設定 する 追加 の フラグ
streamWrapper stream open $path	元 の 関数 に 渡す url を 指定 し ます
streamWrapper stream open $opened_path	path の オープン に 成功 し 、 stream _use _path が options に 設定 さ れ て い た 場合 、 opened _path に は 実際 に オープン し た ファイル / リソース の フルパス を 設定 し なけれ ば なり ませ ん
streamWrapper stream open $mode	ファイル を オープン する 際 の モード
streamWrapper bool stream open	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
streamWrapper bool stream open string $path string $mode int $options string $opened_path	ファイル あるい は url を オープン する
streamWrapper stream read $count	現在 位置 から 何 バイト ぶん の データ を 返す か
streamWrapper string stream read	count バイト 未満 の データ しか 存在 し ない 場合 は 、 返せる 限り の データ を 返し ます
streamWrapper string stream read int $count	ストリーム から 読み込む
streamWrapper stream seek $offset	移動 する ストリームオフセット
streamWrapper stream seek $whence	使用 可能 な 値 seek _set - offset バイト 目 の 位置 に 移動 する
streamWrapper bool stream seek	位置 を 更新 し た 場合 に true 、 それ 以外 の 場合 に false を 返し ます
streamWrapper bool stream seek int $offset int $whence	ストリーム 内 の 特定 の 場所 に 移動 する
streamWrapper array stream stat	stat を 参照く ださい
streamWrapper array stream stat	ファイルリソース について の 情報 を 取得 する
streamWrapper stream write $data	元 と なる システム に 書き込ま れる データ
streamWrapper int stream write	正常 に 格納 でき た バイト 数 、 あるい は 何 も 格納 でき なかっ た 場合 は 0 を 返し ます
streamWrapper int stream write string $data	ストリーム に 書き込む
streamWrapper url stat $path	情報 を 取得 し たい ファイル の url
streamWrapper url stat $flags	ストリーム api が 設定 する 追加 の フラグ
streamWrapper array url stat	stat が 返す の と 同じ 要素 を 返さ なけれ ば なり ませ ん
streamWrapper array url stat string $path int $flags	ファイル について の 情報 を 取得 する
SVMModel load $filename	モデル の ファイル 名
SVMModel bool load	エラー 時 に svmexception を スロー し ます
SVMModel bool load string $filename	保管 さ れ た svm モデル を 読み込み
SWFVideoStream int get Num Frames	フレーム 数 を 整数 で 返し ます
SWFVideoStream int get Num Frames	ビデオ 内 の フレーム 数 を 返す
SWFVideoStream set Dimension $y	高さ を 表す ピクセル 数
SWFVideoStream set Dimension $x	幅 を 表す ピクセル 数
SWFVideoStream void set Dimension int $x int $y	ビデオ の 大きさ を 設定 する
Thread integer get Thread Id	数値 の id を 返し ます
Thread integer get Thread Id	識別
Thread boolean is Joined	状態 を 表す boolean 値 を 返し ます
Thread boolean is Joined	状態 を 検出 する
Thread boolean is Started	状態 を 表す boolean 値 を 返し ます
Thread boolean is Started	状態 を 検出 する
Thread start $options	オプション の マスク
Thread boolean start	成功 し た かどう か を 表す boolean 値 を 返し ます
Thread boolean start integer $options	実行 する
Throwable string get File	オブジェクト が スロー さ れ た ファイル の 名前 を 返し ます
Throwable string get File	例外 が 発生 し た ファイル 名 を 取得 する
Throwable string get Message	スロー さ れ た オブジェクト に 関連 づけ られ た メッセージ を 返し ます
Throwable string get Message	メッセージ を 取得 する
Throwable array get Trace	スタックトレース の 配列 を 返し ます
Throwable array get Trace	スタックトレース を 取得 する
tidy construct $use_include_path	include _path から ファイル を 探し ます
tidy construct $config	config に は 配列 あるい は 文字列 を 渡し ます
tidy construct $filename	もし filename パラメータ が 与え られ た 場合 、 この 関数 は ファイル を 読み込み 、 tidy _parse _file のよう に 実行 し て ファイル に 基づい た オブジェクト を 初期化 し ます
tidy construct $encoding	encoding は 入出 力 ドキュメント の エンコーディング を 設定 し ます
tidy string construct	新しい tidy インスタンス を 返し ます
tidy string construct string $filename mixed $config string $encoding bool $use_include_path	新しい tidy オブジェクト を 作成 する
tidyNode tidyNode get Parent	その ノード が 親 を 持っ て いる 場合 に tidynode 、 それ 以外 の 場合 に null を 返し ます
tidyNode tidyNode get Parent	カレントノード の 親 ノード を 返す
tidyNode bool has Children	ノード が 子 を 持つ 場合 に true 、 それ 以外 の 場合 に false を 返し ます
tidyNode bool has Children	ノード が 子 を 持つ かど う か を 調べる
tidyNode bool has Siblings	兄弟 ノード を 持つ 場合 に true 、 それ 以外 の 場合 に false を 返し ます
tidyNode bool has Siblings	この ノード が 兄弟 ノード を 持つ かど う か を 調べる
tidyNode bool is Jste	ノード が jste で ある 場合 に true 、 それ 以外 の 場合 に false を 返し ます
tidyNode bool is Jste	この ノード が jste で ある かど う か を 調べる
tidyNode bool is Php	ノード が php コード で ある 場合 に true 、 それ 以外 の 場合 に false を 返し ます
tidyNode bool is Php	この ノード が php で ある かど う か を 調べる
tidyNode bool is Text	ノード が テキスト を 著す 場合 に true 、 それ 以外 の 場合 に false を 返し ます
tidyNode bool is Text	この ノード が マークアップ で ない テキスト で ある かど う か を 調べる
TokyoTyrant add $type	tokyotyrant :: rdbrec _int あるい は tokyotyrant :: rdbrec _dbl 定数
TokyoTyrant add $key	文字列 キー
TokyoTyrant add $increment	加算 する 値
TokyoTyrant number add	成功 し た 場合 に 新しい 値 を 返し ます
TokyoTyrant number add string $key number $increment int $type	数値キー を 加算 する
TokyoTyrant connect $port	ポート 番号
TokyoTyrant connect $options	接続 の オプション
TokyoTyrant connect $host	ホスト 名
TokyoTyrant TokyoTyrant connect	現在 の オブジェクト を 返し ます
TokyoTyrant TokyoTyrant connect string $host int $port array $options	データベース に 接続 する
TokyoTyrant connect Uri $uri	データベース へ の uri
TokyoTyrant TokyoTyrant connect Uri	現在 の オブジェクト を 返し ます
TokyoTyrant TokyoTyrant connect Uri string $uri	データベース に 接続 する
TokyoTyrant construct $port	ポート 番号
TokyoTyrant construct $options	接続 の オプション
TokyoTyrant construct $host	ホスト 名
TokyoTyrant string construct	データベース へ の 接続 が 失敗 し た 場合 に tokyotyrantexception を スロー し ます
TokyoTyrant string construct string $host int $port array $options	新しい tokyotyrant オブジェクト を 作成 する
TokyoTyrant ext $key	関数 に 渡す キー
TokyoTyrant ext $value	関数 に 渡す値
TokyoTyrant ext $name	実行 し たい 関数 の 名前
TokyoTyrant ext $options	レコードロック の 場合 は tokyotyrant :: rdbxo _lckrec 、 グローバルロック の 場合 は tokyotyrant :: rdbxo _lckglb
TokyoTyrant string ext	スクリプト 関数 の 結果 を 返し ます
TokyoTyrant string ext string $name int $options string $key string $value	リモートスクリプト を 実行 する
TokyoTyrant get $keys	キー を あらわす 文字 列 、 あるい は 文字列 の 配列
TokyoTyrant mixed get	指定 し た 引数 に 応じ て 、 文字 列 あるい は 配列 を 返し ます
TokyoTyrant mixed get mixed $keys	値 を 取得 する
TokyoTyrant TokyoTyrantIterator get Iterator	tokyotyrantiterator オブジェクト を 返し ます
TokyoTyrant TokyoTyrantIterator get Iterator	イテレータ を 取得 する
TokyoTyrant int num	データベース 内 の レコード の 数 を 返し ます
TokyoTyrant int num	データベース 内 の レコード の 数 を 取得 する
TokyoTyrant out $keys	文字列 の キー 、 あるい は 文字列 の キー の 配列
TokyoTyrant TokyoTyrant out	現在 の オブジェクト を 返し ます
TokyoTyrant TokyoTyrant out mixed $keys	レコード を 削除 する
TokyoTyrant put Cat $keys	文字列 の キー 、 あるい は key -value ペア の 配列
TokyoTyrant put Cat $value	文字列 の キー を 使用 し た 場合 の 値
TokyoTyrant TokyoTyrant put Cat	現在 の オブジェクト へ の 参照 を 返し ます
TokyoTyrant TokyoTyrant put Cat mixed $keys string $value	レコード を 連結 する
TokyoTyrant put Nr $keys	文字列 の キー 、 あるい は key -value ペア の 配列
TokyoTyrant put Nr $value	文字列 の 値
TokyoTyrant TokyoTyrant put Nr	現在 の オブジェクト へ の 参照 を 返し ます
TokyoTyrant TokyoTyrant put Nr mixed $keys string $value	値 を 格納 する
TokyoTyrant put Shl $value	連結 する 値
TokyoTyrant put Shl $width	レコード の 幅
TokyoTyrant put Shl $key	文字列 の キー
TokyoTyrant mixed put Shl	現在 の オブジェクト へ の 参照 を 返し ます
TokyoTyrant mixed put Shl string $key string $value int $width	レコード を 連結 する
TokyoTyrant set Master $host	レプリケーションマスタ の ホスト 名
TokyoTyrant set Master $check_consistency	整合性 の チェック を 行う か どう か
TokyoTyrant set Master $timestamp	開始 時刻 の タイムスタンプ マイクロ 秒
TokyoTyrant set Master $port	レプリケーションマスタ の ポート
TokyoTyrant mixed set Master	現在 の オブジェクト を 返し ます
TokyoTyrant mixed set Master string $host int $port int $timestamp bool $check_consistency	レプリケーション の マスタ を 設定 する
TokyoTyrantIterator mixed current	成功 し た 場合 に 現在 の 値 、 失敗 し た 場合 に false を 返し ます
TokyoTyrantIterator mixed current	現在 の 値 を 取得 する
TokyoTyrantIterator mixed key	成功 し た 場合 に 現在 の キー 、 失敗 し た 場合 に false を 返し ます
TokyoTyrantIterator mixed key	現在 の キー を 返す
TokyoTyrantIterator mixed next	成功 し た 場合 に 次の 値 、 失敗 し た 場合 に false を 返し ます
TokyoTyrantIterator mixed next	次 の キー に 移動 する
TokyoTyrantIterator void rewind	イテレータ を 巻き戻す
TokyoTyrantIterator bool valid	現在 の アイテム が 有効 な 場合 に true 、 そう で ない 場合 に false を 返し ます
TokyoTyrantIterator bool valid	イテレータ が 有効 か どう か を 調べる
TokyoTyrantQuery add Cond $name	条件 で 使う カラム の 名前
TokyoTyrantQuery add Cond $op	演算子
TokyoTyrantQuery add Cond $expr	式
TokyoTyrantQuery mixed add Cond	この メソッド は 現在 の オブジェクト を 返し ます
TokyoTyrantQuery mixed add Cond string $name int $op string $expr	条件 を クエリ に 追加 する
TokyoTyrantQuery int count	マッチ し た 行 の 数 を 返し ます
TokyoTyrantQuery int count	レコード を 数える
TokyoTyrantQuery array current	現在 の 行 を 返し ます
TokyoTyrantQuery array current	現在 の 要素 を 返す
TokyoTyrantQuery string hint	常 に 文字列 を 返し ます
TokyoTyrantQuery string hint	クエリ の ヒント 文字 列 を 取得 する
TokyoTyrantQuery meta Search $type	tokyotyrant :: rdbms _* 定数 のい ずれ か
TokyoTyrantQuery meta Search $queries	tokyotyrantquery オブジェクト の 配列
TokyoTyrantQuery array meta Search	マッチ する 行 を 返し ます
TokyoTyrantQuery array meta Search array $queries int $type	複数 の クエリ から レコード を 取得 する
TokyoTyrantQuery array next	次 の 行 を 返し ます
TokyoTyrantQuery array next	イテレータ を 次 の エントリ に 移動 する
TokyoTyrantQuery TokyoTyrantQuery out	この メソッド は 現在 の オブジェクト を 返し ます
TokyoTyrantQuery TokyoTyrantQuery out	クエリ に 基づい て レコード を 削除 する
TokyoTyrantQuery array search	マッチ し た 行 を 返し ます
TokyoTyrantQuery array search	レコード を 検索 する
TokyoTyrantQuery set Limit $skip	先頭 から 何件 の レコード を 読み 飛ば すか
TokyoTyrantQuery set Limit $max	レコード の 最大 数
TokyoTyrantQuery mixed set Limit	この メソッド は 現在 の オブジェクト を 返し ます
TokyoTyrantQuery mixed set Limit int $max int $skip	結果 を 制限 する
TokyoTyrantQuery set Order $name	並べ 替え を 行う カラム 名
TokyoTyrantQuery set Order $type	type に は 、 次 の 定数 のい ずれ か を 指定 し ます
TokyoTyrantQuery mixed set Order	この メソッド は 、 現在 の オブジェクト を 返し ます
TokyoTyrantQuery mixed set Order string $name int $type	結果 を 並べ 替える
TokyoTyrantTable add $type	tokyotyrant :: rdb _recint あるい は tokyotyrant :: rdb _recdbl 定数
TokyoTyrantTable add $key	文字列 キー
TokyoTyrantTable add $increment	加算 する 値
TokyoTyrantTable void add string $key mixed $increment string $type	レコード を 追加 する
TokyoTyrantTable get $keys	主キー
TokyoTyrantTable array get	行 を 配列 で 返し ます
TokyoTyrantTable array get mixed $keys	行 を 取得 する
TokyoTyrantTable TokyoTyrantIterator get Iterator	tokyotyrantiterator オブジェクト を 返し ます
TokyoTyrantTable TokyoTyrantIterator get Iterator	イテレータ を 取得 する
TokyoTyrantTable TokyoTyrantQuery get Query	成功 し た 場合 に tokyotyrantquery を 返し ます
TokyoTyrantTable TokyoTyrantQuery get Query	クエリオブジェクト を 取得 する
TokyoTyrantTable out $keys	整数 の キー 、 あるい は その 配列
TokyoTyrantTable void out mixed $keys	レコード を 削除 する
TokyoTyrantTable put $columns	行 の 内容
TokyoTyrantTable put $key	行 の 主キー
TokyoTyrantTable int put	成功 し た 場合 に 主キー を 返し ます
TokyoTyrantTable int put string $key array $columns	行 を 格納 する
TokyoTyrantTable put Cat $columns	行 の 内容 の 配列
TokyoTyrantTable put Cat $key	行 の 主キー 、 あるい は null
TokyoTyrantTable void put Cat string $key array $columns	行 を 連結 する
TokyoTyrantTable put Keep $columns	行 の 内容 の 配列
TokyoTyrantTable put Keep $key	行 の 主キー 、 あるい は null
TokyoTyrantTable void put Keep string $key array $columns	新しい レコード を 書き込む
TokyoTyrantTable put Nr $keys	文字列 の キー 、 あるい は key -value ペア の 配列
TokyoTyrantTable put Nr $value	文字列 の 値
TokyoTyrantTable void put Nr mixed $keys string $value	値 を 格納 する
TokyoTyrantTable put Shl $value	連結 する 値
TokyoTyrantTable put Shl $width	レコード の 幅
TokyoTyrantTable put Shl $key	文字列 の キー
TokyoTyrantTable void put Shl string $key string $value int $width	レコード を 連結 する
V8Js construct $extensions	v 8js :: registerextension で 登録 し た 拡張 の 一覧
V8Js construct $report_uncaught_exceptions	キャッチ でき なかっ た javascript の 例外 を その 場 です ぐ に 報告 する かど う か を 制御 し ます
V8Js construct $variables	javascript の 中 で 使う php の 変数 の マップ
V8Js construct $object_name	javascript に 渡す オブジェクト の 名前
V8Js string construct	新しい v 8js コンテキストオブジェクト を 返し ます
V8Js string construct string $object_name array $variables array $extensions bool $report_uncaught_exceptions	新しい v 8js オブジェクト を 作成 する
V8Js V8JsException get Pending Exception	v 8jsexception あるい は null を 返し ます
V8Js V8JsException get Pending Exception	キャッチ さ れ なかっ た javascript 例外 の 中 で 未処 理 の もの を 返す
V8Js register Extension $auto_enable	true に する と 、 この 拡張 が すべ て の v 8js コンテキスト で 自動 的 に 有効 と なり ます
V8Js register Extension $dependencies	登録 する 拡張 が 依存 し て いる 他 の 拡張 の 名前 の 配列
V8Js register Extension $script	登録 する javascript コード
V8Js register Extension $extension_name	登録 する 拡張 の 名前
V8Js bool register Extension	拡張 の 登録 に 成功 し た 場合 に true 、 それ 以外 の 場合 に false を 返し ます
V8Js bool register Extension string $extension_name string $script array $dependencies bool $auto_enable	v 8js で 使う javascript の 拡張 を 登録 する
WeakMap - construct	新しい マップ を 作る
WeakMap int count	マップ 内 の 生き た エントリ を 返し ます
WeakMap int count	マップ 内 の 生き た エントリ を 数える
WeakMap mixed current	反復 処理 中 の 現在 の 値 を 返し ます
WeakMap mixed current	反復 処理 中 の 現在 の 値 を 返す
WeakMap void next	マップ の 次 の 要素 に 進む
WeakMap offset Exists $object	調べ たい オブジェクト
WeakMap bool offset Exists	オブジェクト が マップ 内 に 含まれる 場合 に true 、 それ 以外 の 場合 に false を 返し ます
WeakMap bool offset Exists object $object	オブジェクト が マップ 内 に ある かど う か を 調べる
WeakMap offset Get $object	マップ 内 の キー として 含ま れる オブジェクト
WeakMap mixed offset Get	引数 で 渡し た オブジェクト に 関連 づけ られ た 値 を 返し ます
WeakMap mixed offset Get object $object	オブジェクト を 指定 し て 、 それ が 指す値 を 返す
WeakMap bool valid	イテレータ が 有効 な マップ 要素 を 指し て い て そこ に アクセス できる 場合 に true 、 そう で ない 場合 に false を 返し ます
WeakMap bool valid	イテレータ が 有効 な マップ 要素 を 指し て いる かど う か を 返す
Weakref bool acquire	その 参照 が 有効 で 、 かつ 強い 参照 に 切り 替え られ た 場合 に true 、 それ 以外 の 場合 に false を 返し ます
Weakref bool acquire	オブジェクト へ の 強い 参照 を 確保 する
Weakref object get	参照 が 有効 な 場合 に その 先 の オブジェクト を 返し ます
Weakref object get	弱い 参照 が 指す先 に オブジェクト を 返す
Weakref bool release	先 に 確保 し た 参照 を 解放 でき た 場合 に true 、 それ 以外 の 場合 に false を 返し ます
Weakref bool release	確保 し た 参照 を 解放 する
Weakref bool valid	オブジェクト が まだ 存在 し て weakref :: get アクセス 可能 な 場合 に true 、 それ 以外 の 場合 に false を 返し ます
Weakref bool valid	参照先 の オブジェクト が まだ 存在 する かど う か を 調べる
Worker integer get Stacked	整数 値 を 返し ます
Worker integer get Stacked	スタック の 状態 を 調べる
Worker boolean is Shutdown	状態 を 表す boolean 値 を 返し ます
Worker boolean is Shutdown	状態 を 検出 する
Worker boolean is Working	状態 を 表す boolean 値 を 返し ます
Worker boolean is Working	状態 を 検出 する
Worker boolean shutdown	同 期処 理
Worker unstack $work	事前 に worker に 積ん だ threaded オブジェクト
Worker integer unstack	スタック の 新しい 長さ を 返し ます
Worker integer unstack Threaded $work	スタック 処理
XMLReader bool close	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
XMLReader bool close	xmlreader の 入力 を 閉じる
XMLReader get Attribute $name	属性 の 名前
XMLReader string get Attribute	属性 の 値 を 返し ます
XMLReader string get Attribute string $name	名前 を もと に 、 属性 の 値 を 取得 する
XMLReader get Attribute No $index	属性 の 位置
XMLReader string get Attribute No	属性 の 値 を 返し ます
XMLReader string get Attribute No int $index	インデックス を もと に 、 属性 の 値 を 取得 する
XMLReader bool is Valid	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
XMLReader bool is Valid	パース し て いる ドキュメント の 妥当性 を 示す
XMLReader lookup Namespace $prefix	プレフィックス を 含む 文字列
XMLReader string lookup Namespace	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
XMLReader string lookup Namespace string $prefix	プレフィックス から 、 名前 空間 を 検索 する
XMLReader move To Attribute $name	属性 の 名前
XMLReader bool move To Attribute	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
XMLReader bool move To Attribute string $name	指定 し た 名前 の 属性 に カーソル を 移動 する
XMLReader move To Attribute No $index	属性 の 位置
XMLReader bool move To Attribute No	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
XMLReader bool move To Attribute No int $index	指定 し た インデックス の 属性 に カーソル を 移動 する
XMLReader move To Attribute Ns $localName	ローカル 名
XMLReader move To Attribute Ns $namespaceURI	名前 空間 の uri
XMLReader bool move To Attribute Ns	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
XMLReader bool move To Attribute Ns string $localName string $namespaceURI	指定 し た 名前 の 属性 に カーソル を 移動 する
XMLReader bool move To Element	成功 し た 場合 に true 、 失敗 し た 場合 、 あるい は メソッド が コール さ れ た 際 の 位置 が 属性 ノード で は なかっ た 場合 に false を 返し ます
XMLReader bool move To Element	現在 の 属性 の 親要 素 に カーソル を 移動 する
XMLReader bool move To First Attribute	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
XMLReader bool move To First Attribute	最初 の 属性 に カーソル を 移動 する
XMLReader bool move To Next Attribute	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
XMLReader bool move To Next Attribute	次 の 属性 に カーソル を 移動 する
XMLReader next $localname	移動先 の ノード の 名前
XMLReader bool next	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
XMLReader bool next string $localname	すべて の サブツリー を 飛ば し て 、 次 の ノード に カーソル を 移動 する
XMLReader open $options	libxml _* 定数 の ビットマスク
XMLReader open $encoding	ドキュメント の エンコーディング あるい は null
XMLReader open $URI	ドキュメント を 指す uri
XMLReader bool open	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
XMLReader bool open string $URI string $encoding int $options	パース する xml を 含む uri を 設定 する
XMLReader bool read	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
XMLReader bool read	ドキュメント 内 の 次 の ノード に 移動 する
XMLReader string read Outer XML	現在 の ノード の 中身 を 、 自分 自身 も 含め て 文字 列 で 返し ます
XMLReader string read Outer XML	現在 の ノード から 自分 自身 も 含め た xml を 取得 する
XMLReader string read String	現在 の ノード の 内容 を 文字列 で 返し ます
XMLReader string read String	現在 の ノード の 内容 を 文字列 で 読み込む
XMLReader set Parser Property $property	パーサオプション 定数 の ひとつ
XMLReader set Parser Property $value	true を 設定 する と オプション が 有効 に なり 、 それ 以外 を 設定 する と 無効 に なり ます
XMLReader bool set Parser Property	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
XMLReader bool set Parser Property int $property bool $value	パーサ の オプション を 設定 する
XMLReader set Relax NGSchema $filename	relaxng スキーマ を 指す ファイル 名 あるい は uri
XMLReader bool set Relax NGSchema	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
XMLReader bool set Relax NGSchema string $filename	relaxng スキーマ の ファイル 名 あるい は uri を 設定 する
XMLReader set Schema $filename	xsd スキーマファイル 名
XMLReader bool set Schema	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
XMLReader bool set Schema string $filename	ドキュメント を xsd で 検証 する
XMLReader xml $options	libxml _* 定数 の ビットマスク
XMLReader xml $encoding	ドキュメント の エンコーディング あるい は null
XMLReader xml $source	パース さ れる xml を 含む 文字列
XMLReader bool xml	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
XMLReader bool xml string $source string $encoding int $options	パース する xml を 含む データ を 設定 する
XSLTProcessor get Parameter $localName	xslt パラメータ の ローカル 名 を 指定 し ます
XSLTProcessor get Parameter $namespaceURI	xslt パラメータ の 名前 空間 uri を 指定 し ます
XSLTProcessor string get Parameter	パラメータ の 値 文字列 、 あるい は 設定 さ れ て い ない 場合 は false を 返し ます
XSLTProcessor string get Parameter string $namespaceURI string $localName	パラメータ の 値 を 取得 する
XSLTProcessor bool has Exslt Support	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
XSLTProcessor bool has Exslt Support	php が exslt を サポート し て いる かど う か を 判定 する
XSLTProcessor import Stylesheet $stylesheet	取り込ま れる スタイルシート を domdocument オブジェクト あるい は simplexmlelement オブジェクト として 指定 し ます
XSLTProcessor bool import Stylesheet	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
XSLTProcessor bool import Stylesheet object $stylesheet	スタイルシート を 取り込む
XSLTProcessor register PHPFunctions $restrict	この パラメータ は 、 xslt から コール さ れる 信頼 できる 関数 のみ を 許可 し ます
XSLTProcessor void register PHPFunctions mixed $restrict	php 関数 を xslt 関数 として 利用 できる よう に する
XSLTProcessor remove Parameter $localName	xslt パラメータ の ローカル 名 を 指定 し ます
XSLTProcessor remove Parameter $namespaceURI	xslt パラメータ の 名前 空間 uri を 指定 し ます
XSLTProcessor bool remove Parameter	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
XSLTProcessor bool remove Parameter string $namespaceURI string $localName	パラメータ を 削除 する
XSLTProcessor set Parameter $name	xslt パラメータ の ローカル 名 を 指定 し ます
XSLTProcessor set Parameter $value	xslt パラメータ の 新しい 値 を 指定 し ます
XSLTProcessor set Parameter $namespace	xslt パラメータ の 名前 空間 uri を 指定 し ます
XSLTProcessor set Parameter $options	名前 = & gt ; 値 の 組 の 配列 を 指定 し ます
XSLTProcessor bool set Parameter	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
XSLTProcessor bool set Parameter string $namespace string $name string $value	パラメータ の 値 を 設定 する
XSLTProcessor set Profiling $filename	プロファイル 情報 を 出力 する ファイル へ の パス
XSLTProcessor bool set Profiling	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
XSLTProcessor bool set Profiling string $filename	プロファイル 情報 の 出力 ファイル を 設定 する
XSLTProcessor transform To URI $doc	変換 する 文章 を 指定 し ます
XSLTProcessor transform To URI $uri	変換先 の uri
XSLTProcessor int transform To URI	書き込ま れ た バイト 数
XSLTProcessor int transform To URI DOMDocument $doc string $uri	uri に 変換 する
XSLTProcessor transform To XML $doc	変換 対象 と なる 、 domdocument オブジェクト あるい は simplexmlelement オブジェクト を 指定 し ます
XSLTProcessor string transform To XML	変換 結果 の 文字列
XSLTProcessor string transform To XML object $doc	xml に 変換 する
Yaf_Application bootstrap $bootstrap	yaf _bootstrap _abstract の インスタンス
Yaf_Application void bootstrap Yaf_Bootstrap_Abstract $bootstrap	ブートストラップ を コール する
Yaf_Application construct $envrion	最終 的 な 設定 として 、 どの セクション を 読み込む か
Yaf_Application construct $config	ini ファイル へ の パス 、 あるい は 設定 の 配列
Yaf_Application mixed construct mixed $config string $envrion	yaf _application の コンストラクタ
Yaf_Application void environ	環境 を 取得 する
Yaf_Config_Ini construct $config_file	ini ファイル へ の パス
Yaf_Config_Ini construct $section	ini ファイル の 中 で パース し たい セクション
Yaf_Config_Ini string construct string $config_file string $section	yaf _config _ini の コンストラクタ
Yaf_Config_Ini array to Array	php の 配列 を 返す
Yaf_Config_Simple array to Array	php の 配列 を 返す
Yaf_Controller_Abstract - construct	yaf _controller _abstract の コンストラクタ
Yaf_Controller_Abstract string get Module Name	モジュール 名 を 取得 する
Yaf_Controller_Abstract Yaf_Request_Abstract get Request	yaf _request _abstract instance
Yaf_Controller_Abstract Yaf_Request_Abstract get Request	現在 の リクエストオブジェクト を 取得 する
Yaf_Controller_Abstract Yaf_Response_Abstract get Response	yaf _response _abstract instance
Yaf_Controller_Abstract Yaf_Response_Abstract get Response	現在 の レスポンスオブジェクト を 取得 する
Yaf_Controller_Abstract Yaf_View_Interface get View	ビューエンジン を 取得 する
Yaf_Controller_Abstract void init	コントローラ を 初期化 する
Yaf_Controller_Abstract redirect $url	場所 を 表す url
Yaf_Controller_Abstract bool redirect	bool
Yaf_Controller_Abstract bool redirect string $url	url に リダイレクト する
Yaf_Dispatcher bool disable View	ビュー の レンダリング を 無効 に する
Yaf_Dispatcher Yaf_Dispatcher register Plugin Yaf_Plugin_Abstract $plugin	プラグイン を 登録 する
Yaf_Dispatcher set View $view	yaf _view _interface の インスタンス
Yaf_Dispatcher Yaf_Dispatcher set View Yaf_View_Interface $view	カスタムビューエンジン を 設定 する
Yaf_Dispatcher throw Exception $flag	bool
Yaf_Dispatcher Yaf_Dispatcher throw Exception bool $flag	例外 の スロー の オン / オフ を 切り 替える
Yaf_Loader register Local Namespace $prefix	クラス 名 の プレフィックス を 表す 文字 列 あるい は 配列
Yaf_Loader void register Local Namespace mixed $prefix	ローカルクラスプレフィックス を 登録 する
Yaf_Plugin_Abstract void dispatch Loop Shutdown Yaf_Request_Abstract $request Yaf_Response_Abstract $response	the dispatchloopshutdown purpose
Yaf_Plugin_Abstract void router Shutdown Yaf_Request_Abstract $request Yaf_Response_Abstract $response	the routershutdown purpose
Yaf_Plugin_Abstract void router Startup Yaf_Request_Abstract $request Yaf_Response_Abstract $response	routerstartup フック
Yaf_Registry void del string $name	アイテム を レジストリ から 削除 する
Yaf_Registry mixed get string $name	アイテム を レジストリ から 取得 する
Yaf_Registry bool has string $name	アイテム が 存在 する かど う か を 調べる
Yaf_Registry bool set string $name string $value	アイテム を レジストリ に 追加 する
Yaf_Request_Abstract get Env $default	この パラメータ を 指定 する と 、 変数 が 見つ から ない 場合 に この 値 を 返す よう に なり ます
Yaf_Request_Abstract get Env $name	変数 名
Yaf_Request_Abstract void get Env string $name string $default	env 変数 を 取得 する
Yaf_Request_Abstract get Server $default	この パラメータ を 指定 する と 、 変数 が 見つ から ない 場合 に この 値 を 返す よう に なり ます
Yaf_Request_Abstract get Server $name	変数 名
Yaf_Request_Abstract void get Server string $name string $default	server 変数 を 取得 する
Yaf_Request_Http get $default	この パラメータ を 指定 する と 、 変数 が 見つ から ない 場合 に この 値 を 返す よう に なり ます
Yaf_Request_Http get $name	変数 名
Yaf_Request_Http mixed get string $name string $default	クライアント から の 変数 を 取得 する
Yaf_Request_Http get Query $default	この パラメータ を 指定 する と 、 変数 が 見つ から ない 場合 に この 値 を 返す よう に なり ます
Yaf_Request_Http get Query $name	変数 名
Yaf_Request_Http mixed get Query string $name string $default	クエリパラメータ を 取得 する
Yaf_Request_Http bool is Xml Http Request	ajax リクエスト か どう か を 調べる
Yaf_Response_Abstract clear Body $key	コンテンツ の キー
Yaf_Response_Abstract bool clear Body string $key	the clearbody purpose
Yaf_Response_Abstract get Body $key	コンテンツ の キー
Yaf_Response_Abstract mixed get Body string $key	コンテンツ を 取得 する
Yaf_Response_Abstract set Body $body	コンテンツ 文字列
Yaf_Response_Abstract set Body $key	コンテンツ の キー
Yaf_Response_Abstract bool set Body string $content string $key	コンテンツ を レスポンス に 設定 する
Yaf_Route_Regex bool route	yaf _route _regex :: _ construct の 引数 で 指定 し た パターン に リクエスト uri が マッチ し た 場合 に true 、 それ 以外 の 場合 に false を 返し ます
Yaf_Route_Regex bool route Yaf_Request_Abstract $request	the route purpose
Yaf_Route_Simple construct $module_name	モジュール の 情報 を 取得 する キー
Yaf_Route_Simple construct $controller_name	コントローラ の 情報 を 取得 する キー
Yaf_Route_Simple construct $action_name	アクション の 情報 を 取得 する キー
Yaf_Route_Simple string construct	常 に true を 返し ます
Yaf_Route_Simple string construct string $module_name string $controller_name string $action_name	yaf _route _simple の コンストラクタ
Yaf_Route_Supervar construct $supervar_name	キー の 名前
Yaf_Route_Supervar string construct string $supervar_name	the _ _ construct purpose
Yaf_Router bool add Config	yaf _config _abstract の インスタンス を 返し ます
Yaf_Router bool add Config Yaf_Config_Abstract $config	設定 で 定義 し た ルート を ルーター に 追加 する
Yaf_Router string get Current Route	ルート 名 を 文字列 で 返し ます
Yaf_Router string get Current Route	使わ れ て いる ルート 名 を 取得 する
Yaf_Router mixed get Routes	登録済み の ルート を 取得 する
Yaf_View_Interface bool assign string $name string $value	値 を ビューエンジン に 代入 する
Yaf_View_Interface set Script Path $template_dir	テンプレートディレクトリ へ の 絶対 パス
Yaf_View_Interface void set Script Path string $template_dir	the setscriptpath purpose
Yaf_View_Simple bool display string $tpl array $tpl_vars	レンダリング し て 表示 する
Yaf_View_Simple eval $tpl_content	文字列 の テンプレート
Yaf_View_Simple string eval string $tpl_content array $tpl_vars	テンプレート を レンダリング する
Yaf_View_Simple get $name	代入 し た 変数 名
Yaf_View_Simple void get string $name	retrieve assigned variable
Yaf_View_Simple string render string $tpl array $tpl_vars	テンプレート を レンダリング する
Yaf_View_Simple set $name	変数 名
Yaf_View_Simple set $value	変数 の 値
Yaf_View_Simple void set string $name mixed $value	値 を エンジン に 設定 する
ZipArchive add Glob $flags	glob の フラグ の ビットマスク
ZipArchive add Glob $options	オプション の 連想 配列
ZipArchive add Glob $pattern	glob パターン
ZipArchive bool add Glob	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
ZipArchive bool add Glob string $pattern int $flags array $options	ディレクトリ から 、 glob パターン を 使っ て ファイル を 追加 する
ZipArchive bool close	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
ZipArchive bool close	アクティブ な オープン さ れ た 、 あるい は 新しく 作成 さ れ た アーカイブ を 閉じる
ZipArchive delete Index $index	削除 する エントリ の インデックス
ZipArchive bool delete Index	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
ZipArchive bool delete Index int $index	インデックス を 使用 し て 、 アーカイブ 内 の エントリ を 削除 する
ZipArchive delete Name $name	削除 する エントリ の 名前
ZipArchive bool delete Name	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
ZipArchive bool delete Name string $name	名前 を 使用 し て 、 アーカイブ から エントリ を 削除 する
ZipArchive extract To $entries	展開 する エントリ
ZipArchive extract To $destination	ファイル を 展開 する 場所
ZipArchive bool extract To	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
ZipArchive bool extract To string $destination mixed $entries	アーカイブ の 内容 を 展開 する
ZipArchive get Archive Comment $flags	ziparchive :: fl _unchanged を 設定 する と 、 元 の 変更 さ れ て い ない コメント を 返し ます
ZipArchive string get Archive Comment	zip アーカイブ の コメント を 返し ます
ZipArchive string get Archive Comment int $flags	zip アーカイブ の コメント を 返す
ZipArchive get Comment Index $flags	ziparchive :: fl _unchanged を 指定 する と 、 元 の 変化 し て い ない コメント を 返し ます
ZipArchive get Comment Index $index	エントリ の インデックス
ZipArchive string get Comment Index	成功 し た 場合 に コメント 、 失敗 し た 場合 に false を 返し ます
ZipArchive string get Comment Index int $index int $flags	エントリ の インデックス を 使用 し て 、 エントリ の コメント を 返す
ZipArchive get From Name $name	エントリ の 名前
ZipArchive get From Name $length	エントリ から 読み込む 長 さ
ZipArchive get From Name $flags	エントリ を 探す際 に 使用 する フラグ
ZipArchive string get From Name	成功 し た 場合 に エントリ の 内容 、 失敗 し た 場合 に false を 返し ます
ZipArchive string get From Name string $name int $length int $flags	名前 を 使用 し て 、 エントリ の 内容 を 返す
ZipArchive get Name Index $flags	ziparchive :: fl _unchanged を 指定 する と 、 元 の 変化 し て い ない コメント を 返し ます
ZipArchive get Name Index $index	エントリ の インデックス
ZipArchive string get Name Index	成功 し た 場合 に 名前 、 失敗 し た 場合 に false を 返し ます
ZipArchive string get Name Index int $index int $flags	インデックス を 使用 し て 、 エントリ の 名前 を 返す
ZipArchive string get Status String	成功時 に は ステータスメッセージ を 文字列 で 返し ます
ZipArchive get Stream $name	使用 する エントリ の 名前
ZipArchive resource get Stream	成功 し た 場合 に ファイルポインタ リソース 、 失敗 し た 場合 に false を 返し ます
ZipArchive resource get Stream string $name	名前 を 使用 し て 、 エントリ の ファイルハンドラ 読み込み 専用 を 取得 する
ZipArchive locate Name $flags	この 関数 は 、 アーカイブ 内 の 指定 し た 名前 の ファイル の インデックス を 返し ます
ZipArchive locate Name $name	探し たい エントリ の 名前
ZipArchive int locate Name	成功 し た 場合 に エントリ の インデックス 、 失敗 し た 場合 に false を 返し ます
ZipArchive int locate Name string $name int $flags	アーカイブ 内 の エントリ の インデックス を 返す
ZipArchive open $flags	アーカイブ の オープン に 使用 する モード
ZipArchive open $filename	オープン する zip アーカイブ の ファイル 名
ZipArchive mixed open	エラーコード 成功 し た 場合 に true 、 それ 以外 の 場合 に エラーコード を 返し ます
ZipArchive mixed open string $filename int $flags	zip ファイルアーカイブ を オープン する
ZipArchive rename Index $index	名前 を 変更 する エントリ の インデックス
ZipArchive rename Index $newname	新しい 名前
ZipArchive bool rename Index	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
ZipArchive bool rename Index int $index string $newname	インデックス を 使用 し て エントリ 名 を 変更 する
ZipArchive set Archive Comment $comment	コメント の 内容
ZipArchive bool set Archive Comment	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
ZipArchive bool set Archive Comment string $comment	zip アーカイブ の コメント を 設定 する
ZipArchive set Comment Index $comment	コメント の 内容
ZipArchive set Comment Index $index	エントリ の インデックス
ZipArchive bool set Comment Index	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
ZipArchive bool set Comment Index int $index string $comment	インデックス を 使用 し て エントリ の コメント を 設定 する
ZipArchive set Comment Name $name	エントリ の 名前
ZipArchive set Comment Name $comment	コメント の 内容
ZipArchive bool set Comment Name	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
ZipArchive bool set Comment Name string $name string $comment	名前 を 使用 し て エントリ の コメント を 設定 する
ZipArchive stat Index $flags	ziparchive :: fl _unchanged を or で 連結 する と 、 アーカイブ 内 に 最初 に 記録 さ れ た 際 の 情報 を 取得 し ます
ZipArchive stat Index $index	エントリ の インデックス
ZipArchive array stat Index	エントリ の 詳細 を 含む 配列 を 返し ます
ZipArchive array stat Index int $index int $flags	インデックス を 使用 し て エントリ の 詳細 を 取得 する
ZipArchive stat Name $name	エントリ の 名前
ZipArchive stat Name $flags	名前 を どの よう に 探す の か を 設定 し ます
ZipArchive array stat Name	エントリ の 詳細 を 含む 配列 を 返し ます
ZipArchive array stat Name string $name int $flags	名前 を 使用 し て エントリ の 詳細 を 取得 する
ZipArchive bool unchange All	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
ZipArchive bool unchange All	アーカイブ に対する すべ て の 変更 を 取り消す
ZipArchive unchange Index $index	エントリ の インデックス
ZipArchive bool unchange Index	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
ZipArchive bool unchange Index int $index	指定 し た インデックス の エントリ に対する すべ て の 変更 を 取り消す
ZipArchive unchange Name $name	エントリ の 名前
ZipArchive bool unchange Name	成功 し た 場合 に true を 、 失敗 し た 場合 に false を 返し ます
ZipArchive bool unchange Name string $name	指定 し た 名前 の エントリ に対する すべ て の 変更 を 取り消す
