APCIterator construct $list	the type to list
APCIterator construct $format	the desired format as configured with one or more of the apc_iter_* constants
APCIterator construct $chunk_size	the chunk size
APCIterator construct $search	a pcre regular expression that matches against apc key names either as a string for a single regular expression or as an array of regular expressions
APCIterator construct $cache	the cache type which will be user or file
APCIterator string construct	an apciterator object on success or null on failure
APCIterator string construct string $cache mixed $search int $format int $chunk_size int $list	constructs an apciterator iterator object
APCIterator mixed current	returns the current item on success or false if no more items or exist or on failure
APCIterator mixed current	get current item
APCIterator int get Total Size	the total cache size
APCIterator int get Total Size	get total cache size
APCIterator string key	returns the key on success or false upon failure
APCIterator string key	get iterator key
APCIterator void next	move pointer to next item
APCIterator void rewind	rewinds iterator
APCIterator void valid	checks if current position is valid
APCUIterator construct $list	the type to list
APCUIterator construct $format	the desired format as configured with one or more of the apc_iter_* constants
APCUIterator construct $chunk_size	the chunk size
APCUIterator construct $search	a pcre regular expression that matches against apc key names either as a string for a single regular expression or as an array of regular expressions
APCUIterator construct $cache	the cache type which will be user or file
APCUIterator mixed construct	an apcuiterator object on success or null on failure
APCUIterator mixed construct mixed $search int $format int $chunk_size int $list	constructs an apcuiterator iterator object
APCUIterator int get Total Count	the total count
APCUIterator int get Total Count	get total count
APCUIterator int get Total Hits	the number of hits on success or false on failure
APCUIterator int get Total Hits	get total cache hits
APCUIterator int get Total Size	the total cache size
APCUIterator int get Total Size	get total cache size
APCUIterator string key	returns the key on success or false upon failure
APCUIterator string key	get iterator key
APCUIterator void rewind	rewinds iterator
APCUIterator void valid	checks if current position is valid
AppendIterator append $iterator	the iterator to append
AppendIterator mixed current	the current value if it is valid or null otherwise
AppendIterator void get Array Iterator	gets the arrayiterator
AppendIterator Iterator get Inner Iterator	the current inner iterator or null if there is not one
AppendIterator Iterator get Inner Iterator	gets the inner iterator
AppendIterator scalar key	the current key if it is valid or null otherwise
AppendIterator scalar key	gets the current key
AppendIterator void rewind	rewinds the iterator
ArrayAccess boolean offset Exists	returns true on success or false on failure
ArrayAccess boolean offset Exists mixed $offset	whether an offset exists
ArrayAccess offset Get $offset	the offset to retrieve
ArrayAccess mixed offset Get	can return all value types
ArrayAccess mixed offset Get mixed $offset	offset to retrieve
ArrayAccess offset Set $value	the value to set
ArrayAccess offset Set $offset	the offset to assign the value to
ArrayAccess void offset Set mixed $offset mixed $value	assign a value to the specified offset
ArrayAccess offset Unset $offset	the offset to unset
ArrayAccess void offset Unset mixed $offset	unset an offset
ArrayIterator append $value	the value to append
ArrayIterator void append mixed $value	append an element
ArrayIterator int count	the number of elements or public properties in the associated array or object respectively
ArrayIterator int count	count elements
ArrayIterator array get Array Copy	a copy of the array or array of public properties if arrayiterator refers to an object
ArrayIterator array get Array Copy	get array copy
ArrayIterator void get Flags	get flags
ArrayIterator mixed key	the current array key
ArrayIterator mixed key	return current array key
ArrayIterator void ksort	sort array by keys
ArrayIterator void natcasesort	sort an array naturally case insensitive
ArrayIterator offset Get $index	the offset to get the value from
ArrayIterator mixed offset Get	the value at offset index
ArrayIterator mixed offset Get string $index	get value for an offset
ArrayIterator offset Set $index	the index to set for
ArrayIterator offset Set $newval	the new value to store at the index
ArrayIterator void offset Set string $index string $newval	set value for an offset
ArrayIterator offset Unset $index	the offset to unset
ArrayIterator void offset Unset string $index	unset value for an offset
ArrayIterator void rewind	rewind array back to the start
ArrayIterator uasort $cmp_function	the compare function used for the sort
ArrayIterator void uasort string $cmp_function	user defined sort
ArrayIterator uksort $cmp_function	the compare function used for the sort
ArrayIterator void uksort string $cmp_function	user defined sort
ArrayIterator bool valid	returns true if the iterator is valid otherwise false
ArrayIterator bool valid	check whether array contains more entries
ArrayObject void asort	sort the entries by value
ArrayObject int count	the number of public properties in the arrayobject
ArrayObject exchange Array $input	the new array or object to exchange with the current array
ArrayObject array exchange Array	returns the old array
ArrayObject array exchange Array mixed $input	exchange the array for another one
ArrayObject array get Array Copy	returns a copy of the array
ArrayObject array get Array Copy	creates a copy of the arrayobject
ArrayObject int get Flags	returns the behavior flags of the arrayobject
ArrayObject int get Flags	gets the behavior flags
ArrayObject ArrayIterator get Iterator	an iterator from an arrayobject
ArrayObject void natcasesort	sort an array using a case insensitive natural order algorithm
ArrayObject void natsort	sort entries using a natural order algorithm
ArrayObject offset Set $index	the index being set
ArrayObject offset Set $newval	the new value for the index
ArrayObject offset Unset $index	the index being unset
ArrayObject string serialize	the serialized representation of the arrayobject
ArrayObject string serialize	serialize an arrayobject
ArrayObject set Flags $flags	the new arrayobject behavior
ArrayObject void set Flags int $flags	sets the behavior flags
ArrayObject set Iterator Class $iterator_class	the classname of the array iterator to use when iterating over this object
ArrayObject void set Iterator Class string $iterator_class	sets the iterator classname for the arrayobject
ArrayObject uasort $cmp_function	function cmp_function should accept two parameters which will be filled by pairs of entries
ArrayObject void uasort callable $cmp_function	sort the entries with a user-defined comparison function and maintain key association
ArrayObject uksort $cmp_function	the callback comparison function
ArrayObject void uksort callable $cmp_function	sort the entries by keys using a user-defined comparison function
ArrayObject unserialize $serialized	the serialized arrayobject
ArrayObject void unserialize string $serialized	unserialize an arrayobject
CachingIterator array get Cache	an array containing the cache items
CairoFormat stride For Width $width	the width of the image
CairoFormat stride For Width $format	the desired cairoformat to use
CairoFormat int stride For Width	the appropriate stride to use given the desired format and width or -1 if either the format is invalid or the width too large
CairoFormat int stride For Width int $format int $width	provides an appropiate stride to use
CairoImageSurface construct $height	the height of the image surface
CairoImageSurface construct $width	the width of the image surface
CairoImageSurface construct $format	can be any defined in cairoformat
CairoImageSurface int construct	a new cairoimagesurface
CairoImageSurface int construct int $format int $width int $height	creates a new cairoimagesurface
CairoImageSurface create From Png $file	path to png image file
CairoImageSurface CairoImageSurface create From Png	cairoimagesurface object
CairoImageSurface string get Data	the image data as string
CairoImageSurface string get Data	gets the image data as string
CairoImageSurface int get Format	one of the cairoformat enums
CairoImageSurface int get Format	get the image format
CairoImageSurface int get Height	cairoimagesurface object height
CairoImageSurface int get Height	retrieves the height of the cairoimagesurface
CairoSurface - construct	the __construct purpose
CairoSurface create Similar $height	height of the new surface in device-space units
CairoSurface create Similar $other	an existing surface used to select the backend of the new surface
CairoSurface create Similar $content	the content for the new surface
CairoSurface create Similar $width	width of the new surface in device-space units
CairoSurface void create Similar CairoSurface $other int $content string $width string $height	the createsimilar purpose
CallbackFilterIterator string accept	returns true to accept the current item or false otherwise
CallbackFilterIterator string accept	calls the callback with the current value the current key and the inner iterator as arguments
chdb construct $pathname	the name of the file to load
chdb string construct string $pathname	creates a chdb instance
chdb get $key	the key for which to get the value
chdb string get	returns a string containing the value associated with the given key or null if not found
chdb string get string $key	gets the value associated with a key
Closure bind $newthis	the object to which the given anonymous function should be bound or null for the closure to be unbound
Closure bind $newscope	the class scope to which associate the closure is to be associated or static to keep the current one
Closure bind $closure	the anonymous functions to bind
Closure Closure bind	returns a new closure object or false on failure
Closure Closure bind Closure $closure object $newthis mixed $newscope	duplicates a closure with a specific bound object and class scope
Closure bind To $newthis	the object to which the given anonymous function should be bound or null for the closure to be unbound
Closure bind To $newscope	the class scope to which associate the closure is to be associated or static to keep the current one
Closure Closure bind To	returns the newly created closure object or false on failure
Closure Closure bind To object $newthis mixed $newscope	duplicates the closure with a new bound object and class scope
Closure call	zero or more parameters which will be given as parameters to the closure
Closure call $newthis	the object to bind the closure to for the duration of the call
Closure mixed call	returns the return value of the closure
Closure mixed call object $newthis	binds and calls the closure
Collectable bool is Garbage	determine whether an object has been marked as garbage
Collectable void set Garbage	mark an object as garbage
Cond broadcast $condition	a handle to a condition variable returned by a previous call to cond::create()
Cond boolean broadcast	a boolean indication of success
Cond boolean broadcast long $condition	broadcast a condition
Cond long create	a handle to a condition variable
Cond long create	create a condition
Cond destroy $condition	a handle to a condition variable returned by a previous call to cond::create()
Cond boolean destroy	a boolean indication of success
Cond boolean destroy long $condition	destroy a condition
Cond wait $condition	a handle returned by a previous call to cond::create()
Cond wait $timeout	an optional timeout in microseconds millionths of a second
Cond wait $mutex	a handle returned by a previous call to mutex::create() and owned locked by the caller
Cond boolean wait	a boolean indication of success
Cond boolean wait long $condition long $mutex long $timeout	wait for condition
Countable int count	the custom count as an integer
Countable int count	count elements of an object
DateInterval create From Date String $time	a date with relative parts
DateInterval DateInterval create From Date String	returns a new dateinterval instance
DateInterval DateInterval create From Date String string $time	sets up a dateinterval from the relative parts of the string
DateInterval format $format	the following characters are recognized in the format parameter string
DateInterval string format	returns the formatted interval
DateTimeImmutable DateTimeImmutable add DateInterval $interval	adds an amount of days months years hours minutes and seconds
DateTimeImmutable modify $object	procedural style only: a datetime object returned by date_create()
DateTimeImmutable modify $modify	a date / time string
DateTimeImmutable DateTimeImmutable modify	returns the newly created object or false on failure
DateTimeImmutable DateTimeImmutable modify string $modify	creates a new object with modified timestamp
DateTimeImmutable DateTimeImmutable set Date int $year int $month int $day	sets the date
DateTimeImmutable DateTimeImmutable set ISODate int $year int $week int $day	sets the iso date
DateTimeImmutable DateTimeImmutable set Time int $hour int $minute int $second	sets the time
DateTimeImmutable DateTimeImmutable sub DateInterval $interval	subtracts an amount of days months years hours minutes and seconds
Directory void close resource $dir_handle	close directory handle
Directory string read resource $dir_handle	read entry from directory handle
DirectoryIterator DirectoryIterator current	the current directoryiterator item
DirectoryIterator DirectoryIterator current	return the current directoryiterator item
DirectoryIterator int get ATime	returns the time the file was last accessed as a unix timestamp
DirectoryIterator int get ATime	get last access time of the current directoryiterator item
DirectoryIterator int get CTime	returns the last change time of the file as a unix timestamp
DirectoryIterator int get CTime	get inode change time of the current directoryiterator item
DirectoryIterator string get Extension	returns a string containing the file extension or an empty string if the file has no extension
DirectoryIterator string get Extension	gets the file extension
DirectoryIterator int get Group	returns the group id of the current directoryiterator item in numerical format
DirectoryIterator int get Group	get group for the current directoryiterator item
DirectoryIterator int get Inode	returns the inode number for the file
DirectoryIterator int get Inode	get inode for the current directoryiterator item
DirectoryIterator int get Owner	the file owner of the file in numerical format
DirectoryIterator int get Owner	get owner of current directoryiterator item
DirectoryIterator string get Path	returns the path to the file omitting the file name and any trailing slash
DirectoryIterator string get Path	get path of current iterator item without filename
DirectoryIterator string get Pathname	returns the path and file name of current file
DirectoryIterator string get Pathname	return path and file name of current directoryiterator item
DirectoryIterator int get Perms	returns the permissions of the file as a decimal integer
DirectoryIterator int get Perms	get the permissions of current directoryiterator item
DirectoryIterator int get Size	returns the size of the file in bytes
DirectoryIterator int get Size	get size of current directoryiterator item
DirectoryIterator bool is Dir	returns true if it is a directory otherwise false
DirectoryIterator bool is Dir	determine if current directoryiterator item is a directory
DirectoryIterator bool is Executable	returns true if the entry is executable otherwise false
DirectoryIterator bool is Executable	determine if current directoryiterator item is executable
DirectoryIterator bool is File	returns true if the file exists and is a regular file not a link or dir otherwise false
DirectoryIterator bool is File	determine if current directoryiterator item is a regular file
DirectoryIterator bool is Readable	returns true if the file is readable otherwise false
DirectoryIterator bool is Readable	determine if current directoryiterator item can be read
DirectoryIterator bool is Writable	returns true if the file / directory is writable otherwise false
DirectoryIterator bool is Writable	determine if current directoryiterator item can be written to
DirectoryIterator seek $position	the zero-based numeric position to seek to
DirectoryIterator void seek int $position	seek to a directoryiterator item
DirectoryIterator bool valid	returns true if the position is valid otherwise false
DOMAttr bool is Id	returns true on success or false on failure
DOMAttr bool is Id	checks if attribute is a defined id
DOMCharacterData append Data $data	the string to append
DOMCharacterData void append Data string $data	append the string to the end of the character data of the node
DOMCharacterData insert Data $offset	the character offset at which to insert
DOMCharacterData insert Data $data	the string to insert
DOMCharacterData void insert Data int $offset string $data	insert a string at the specified 16-bit unit offset
DOMCharacterData replace Data $data	the string with which the range must be replaced
DOMCharacterData replace Data $count	the number of characters to replace
DOMCharacterData replace Data $offset	the offset from which to start replacing
DOMCharacterData void replace Data int $offset int $count string $data	replace a substring within the domcharacterdata node
DOMCharacterData substring Data $offset	start offset of substring to extract
DOMCharacterData substring Data $count	the number of characters to extract
DOMCharacterData string substring Data	the specified substring
DOMCharacterData string substring Data int $offset int $count	extracts a range of data from the node
DOMComment construct $value	the value of the comment
DOMDocument construct $encoding	the encoding of the document as part of the xml declaration
DOMDocument construct $version	the version number of the document as part of the xml declaration
DOMDocument create Attribute $name	the name of the attribute
DOMDocument DOMAttr create Attribute	the new domattr or false if an error occurred
DOMDocument DOMAttr create Attribute string $name	create new attribute
DOMDocument create Attribute NS $namespaceURI	the uri of the namespace
DOMDocument create Attribute NS $qualifiedName	the tag name and prefix of the attribute as prefix:tagname
DOMDocument DOMAttr create Attribute NS	the new domattr or false if an error occurred
DOMDocument DOMAttr create Attribute NS string $namespaceURI string $qualifiedName	create new attribute node with an associated namespace
DOMDocument DOMDocumentFragment create Document Fragment	the new domdocumentfragment or false if an error occurred
DOMDocument DOMDocumentFragment create Document Fragment	create new document fragment
DOMDocument create Element NS $namespaceURI	the uri of the namespace
DOMDocument create Element NS $value	the value of the element
DOMDocument create Element NS $qualifiedName	the qualified name of the element as prefix:tagname
DOMDocument DOMElement create Element NS	the new domelement or false if an error occurred
DOMDocument DOMElement create Element NS string $namespaceURI string $qualifiedName string $value	create new element node with an associated namespace
DOMDocument create Entity Reference $name	the content of the entity reference e
DOMDocument DOMEntityReference create Entity Reference	the new domentityreference or false if an error occurred
DOMDocument DOMEntityReference create Entity Reference string $name	create new entity reference node
DOMDocument create Processing Instruction $target	the target of the processing instruction
DOMDocument create Processing Instruction $data	the content of the processing instruction
DOMDocument DOMProcessingInstruction create Processing Instruction	the new domprocessinginstruction or false if an error occurred
DOMDocument DOMProcessingInstruction create Processing Instruction string $target string $data	creates new pi node
DOMDocument create Text Node $content	the content of the text
DOMDocument DOMText create Text Node	the new domtext or false if an error occurred
DOMDocument DOMText create Text Node string $content	create new text node
DOMDocument get Elements By Tag Name $name	the local name without namespace of the tag to match on
DOMDocument DOMNodeList get Elements By Tag Name	a new domnodelist object containing all the matched elements
DOMDocument DOMNodeList get Elements By Tag Name string $name	searches for all elements with given local tag name
DOMDocument get Elements By Tag Name NS $localName	the local name of the elements to match on
DOMDocument get Elements By Tag Name NS $namespaceURI	the namespace uri of the elements to match on
DOMDocument DOMNodeList get Elements By Tag Name NS	a new domnodelist object containing all the matched elements
DOMDocument DOMNodeList get Elements By Tag Name NS string $namespaceURI string $localName	searches for all elements with given tag name in specified namespace
DOMDocument load $filename	the path to the xml document
DOMDocument load $options	bitwise or of the libxml option constants
DOMDocument mixed load	returns true on success or false on failure
DOMDocument mixed load string $filename int $options	load xml from a file
DOMDocument load HTMLFile $options	since php 5
DOMDocument load HTMLFile $filename	the path to the html file
DOMDocument bool load HTMLFile	returns true on success or false on failure
DOMDocument bool load HTMLFile string $filename int $options	load html from a file
DOMDocument load XML $options	bitwise or of the libxml option constants
DOMDocument load XML $source	the string containing the xml
DOMDocument mixed load XML	returns true on success or false on failure
DOMDocument mixed load XML string $source int $options	load xml from a string
DOMDocument void normalize Document	normalizes the document
DOMDocument register Node Class $extendedclass	your extended class name
DOMDocument register Node Class $baseclass	the dom class that you want to extend
DOMDocument bool register Node Class	returns true on success or false on failure
DOMDocument bool register Node Class string $baseclass string $extendedclass	register extended class used to create base node type
DOMDocument relax NGValidate $filename	the rng file
DOMDocument bool relax NGValidate	returns true on success or false on failure
DOMDocument bool relax NGValidate string $filename	performs relaxng validation on the document
DOMDocument save $filename	the path to the saved xml document
DOMDocument save $options	additional options
DOMDocument int save	returns the number of bytes written or false if an error occurred
DOMDocument int save string $filename int $options	dumps the internal xml tree back into a file
DOMDocument save HTML $node	optional parameter to output a subset of the document
DOMDocument string save HTML	returns the html or false if an error occurred
DOMDocument string save HTML DOMNode $node	dumps the internal document into a string using html formatting
DOMDocument save HTMLFile $filename	the path to the saved html document
DOMDocument int save HTMLFile	returns the number of bytes written or false if an error occurred
DOMDocument int save HTMLFile string $filename	dumps the internal document into a file using html formatting
DOMDocument save XML $node	use this parameter to output only a specific node without xml declaration rather than the entire document
DOMDocument save XML $options	additional options
DOMDocument string save XML	returns the xml or false if an error occurred
DOMDocument string save XML DOMNode $node int $options	dumps the internal xml tree back into a string
DOMDocument schema Validate $flags	a bitmask of libxml schema validation flags
DOMDocument schema Validate $filename	the path to the schema
DOMDocument bool schema Validate	returns true on success or false on failure
DOMDocument bool schema Validate string $filename int $flags	validates a document based on a schema
DOMDocument schema Validate Source $flags	a bitmask of libxml schema validation flags
DOMDocument schema Validate Source $source	a string containing the schema
DOMDocument bool schema Validate Source	returns true on success or false on failure
DOMDocument bool schema Validate Source string $source int $flags	validates a document based on a schema
DOMDocument bool validate	returns true on success or false on failure
DOMDocument xinclude $options	libxml parameters
DOMDocument int xinclude	returns the number of xincludes in the document -1 if some processing failed or false if there were no substitutions
DOMDocument int xinclude int $options	substitutes xincludes in a domdocument object
DOMDocumentFragment append XML $data	xml to append
DOMDocumentFragment bool append XML	returns true on success or false on failure
DOMDocumentFragment bool append XML string $data	append raw xml data
DOMElement construct $namespaceURI	a namespace uri to create the element within a specific namespace
DOMElement construct $value	the value of the element
DOMElement construct $name	the tag name of the element
DOMElement get Attribute $name	the name of the attribute
DOMElement string get Attribute	the value of the attribute or an empty string if no attribute with the given name is found
DOMElement string get Attribute string $name	returns value of attribute
DOMElement get Attribute Node $name	the name of the attribute
DOMElement DOMAttr get Attribute Node	the attribute node
DOMElement DOMAttr get Attribute Node string $name	returns attribute node
DOMElement get Attribute NS $namespaceURI	the namespace uri
DOMElement get Attribute NS $localName	the local name
DOMElement string get Attribute NS	the value of the attribute or an empty string if no attribute with the given localname and namespaceuri is found
DOMElement string get Attribute NS string $namespaceURI string $localName	returns value of attribute
DOMElement get Elements By Tag Name NS $namespaceURI	the namespace uri
DOMElement get Elements By Tag Name NS $localName	the local name
DOMElement DOMNodeList get Elements By Tag Name NS	this function returns a new instance of the class domnodelist of all matched elements in the order in which they are encountered in a preorder traversal of this element tree
DOMElement DOMNodeList get Elements By Tag Name NS string $namespaceURI string $localName	get elements by namespaceuri and localname
DOMElement has Attribute $name	the attribute name
DOMElement bool has Attribute	returns true on success or false on failure
DOMElement bool has Attribute string $name	checks to see if attribute exists
DOMElement has Attribute NS $namespaceURI	the namespace uri
DOMElement has Attribute NS $localName	the local name
DOMElement bool has Attribute NS	returns true on success or false on failure
DOMElement bool has Attribute NS string $namespaceURI string $localName	checks to see if attribute exists
DOMElement remove Attribute $name	the name of the attribute
DOMElement bool remove Attribute	returns true on success or false on failure
DOMElement bool remove Attribute string $name	removes attribute
DOMElement remove Attribute Node $oldnode	the attribute node
DOMElement bool remove Attribute Node	returns true on success or false on failure
DOMElement bool remove Attribute Node DOMAttr $oldnode	removes attribute
DOMElement remove Attribute NS $namespaceURI	the namespace uri
DOMElement remove Attribute NS $localName	the local name
DOMElement bool remove Attribute NS	returns true on success or false on failure
DOMElement bool remove Attribute NS string $namespaceURI string $localName	removes attribute
DOMElement set Attribute $value	the value of the attribute
DOMElement set Attribute $name	the name of the attribute
DOMElement DOMAttr set Attribute	the new domattr or false if an error occurred
DOMElement DOMAttr set Attribute string $name string $value	adds new attribute
DOMElement set Attribute Node NS $attr	the attribute node
DOMElement DOMAttr set Attribute Node NS	returns the old node if the attribute has been replaced
DOMElement DOMAttr set Attribute Node NS DOMAttr $attr	adds new attribute node to element
DOMElement set Attribute NS $qualifiedName	the qualified name of the attribute as prefix:tagname
DOMElement set Attribute NS $namespaceURI	the namespace uri
DOMElement set Attribute NS $value	the value of the attribute
DOMElement void set Attribute NS string $namespaceURI string $qualifiedName string $value	adds new attribute
DOMElement set Id Attribute NS $namespaceURI	the namespace uri of the attribute
DOMElement set Id Attribute NS $localName	the local name of the attribute as prefix:tagname
DOMElement set Id Attribute NS $isId	set it to true if you want name to be of type id false otherwise
DOMElement void set Id Attribute NS string $namespaceURI string $localName bool $isId	declares the attribute specified by local name and namespace uri to be of type id
DOMEntityReference construct $name	the name of the entity reference
DOMImplementation has Feature $version	the version number of the feature to test
DOMImplementation has Feature $feature	the feature to test
DOMImplementation bool has Feature	returns true on success or false on failure
DOMNamedNodeMap get Named Item $name	the nodename of the node to retrieve
DOMNamedNodeMap DOMNode get Named Item	a node of any type with the specified nodename or null if no node is found
DOMNamedNodeMap DOMNode get Named Item string $name	retrieves a node specified by name
DOMNamedNodeMap get Named Item NS $localName	the local name of the node to retrieve
DOMNamedNodeMap get Named Item NS $namespaceURI	the namespace uri of the node to retrieve
DOMNamedNodeMap DOMNode get Named Item NS	a node of any type with the specified local name and namespace uri or null if no node is found
DOMNamedNodeMap DOMNode get Named Item NS string $namespaceURI string $localName	retrieves a node specified by local name and namespace uri
DOMNamedNodeMap item $index	index into this map
DOMNamedNodeMap DOMNode item	the node at the index th position in the map or null if that is not a valid index greater than or equal to the number of nodes in this map
DOMNamedNodeMap DOMNode item int $index	retrieves a node specified by index
DOMNode C14 N $with_comments	retain comments in output
DOMNode C14 N $xpath	an array of xpath s to filter the nodes by
DOMNode C14 N $exclusive	enable exclusive parsing of only the nodes matched by the provided xpath or namespace prefixes
DOMNode C14 N $ns_prefixes	an array of namespace prefixes to filter the nodes by
DOMNode string C14 N	returns canonicalized nodes as a string or false on failure
DOMNode C14 NFile $with_comments	retain comments in output
DOMNode C14 NFile $xpath	an array of xpath s to filter the nodes by
DOMNode C14 NFile $exclusive	enable exclusive parsing of only the nodes matched by the provided xpath or namespace prefixes
DOMNode C14 NFile $uri	path to write the output to
DOMNode C14 NFile $ns_prefixes	an array of namespace prefixes to filter the nodes by
DOMNode int C14 NFile	number of bytes written or false on failure
DOMNode clone Node $deep	indicates whether to copy all descendant nodes
DOMNode DOMNode clone Node	the cloned node
DOMNode DOMNode clone Node bool $deep	clones a node
DOMNode bool has Attributes	returns true on success or false on failure
DOMNode bool has Attributes	checks if node has attributes
DOMNode is Default Namespace $namespaceURI	the namespace uri to look for
DOMNode bool is Default Namespace	return true if namespaceuri is the default namespace false otherwise
DOMNode bool is Default Namespace string $namespaceURI	checks if the specified namespaceuri is the default namespace or not
DOMNode is Same Node $node	the compared node
DOMNode bool is Same Node	returns true on success or false on failure
DOMNode bool is Same Node DOMNode $node	indicates if two nodes are the same node
DOMNode is Supported $version	the version number of the feature to test
DOMNode is Supported $feature	the feature to test
DOMNode bool is Supported	returns true on success or false on failure
DOMNode bool is Supported string $feature string $version	checks if feature is supported for specified version
DOMNode lookup Namespace URI $prefix	the prefix of the namespace
DOMNode string lookup Namespace URI	the namespace uri of the node
DOMNode void normalize	normalizes the node
DOMNode replace Child $newnode	the new node
DOMNode replace Child $oldnode	the old node
DOMNode DOMNode replace Child	the old node or false if an error occur
DOMNode DOMNode replace Child DOMNode $newnode DOMNode $oldnode	replaces a child
DOMNodelist item $index	index of the node into the collection
DOMNodelist DOMNode item	the node at the index th position in the domnodelist or null if that is not a valid index
DOMNodelist DOMNode item int $index	retrieves a node specified by index
DOMProcessingInstruction construct $value	the value of the processing instruction
DOMProcessingInstruction construct $name	the tag name of the processing instruction
DOMText split Text $offset	the offset at which to split starting from 0
DOMText DOMText split Text	the new node of the same type which contains all the content at and after the offset
DOMText DOMText split Text int $offset	breaks this node into two nodes at the specified offset
DOMXPath construct $doc	the domdocument associated with the domxpath
DOMXPath evaluate $expression	the xpath expression to execute
DOMXPath evaluate $registerNodeNS	the optional registernodens can be specified to disable automatic registration of the context node
DOMXPath evaluate $contextnode	the optional contextnode can be specified for doing relative xpath queries
DOMXPath mixed evaluate	returns a typed result if possible or a domnodelist containing all nodes matching the given xpath expression
DOMXPath mixed evaluate string $expression DOMNode $contextnode bool $registerNodeNS	evaluates the given xpath expression and returns a typed result if possible
DOMXPath query $expression	the xpath expression to execute
DOMXPath query $registerNodeNS	the optional registernodens can be specified to disable automatic registration of the context node
DOMXPath query $contextnode	the optional contextnode can be specified for doing relative xpath queries
DOMXPath DOMNodeList query	returns a domnodelist containing all nodes matching the given xpath expression
DOMXPath DOMNodeList query string $expression DOMNode $contextnode bool $registerNodeNS	evaluates the given xpath expression
DOMXPath register Namespace $namespaceURI	the uri of the namespace
DOMXPath register Namespace $prefix	the prefix
DOMXPath bool register Namespace	returns true on success or false on failure
DOMXPath bool register Namespace string $prefix string $namespaceURI	registers the namespace with the domxpath object
EmptyIterator void next	the next() method
EmptyIterator bool valid	false
EmptyIterator bool valid	the valid() method
Error mixed get Code	returns the error code as integer
Error mixed get Code	gets the error code
Error string get File	returns the filename in which the error occurred
Error string get File	gets the file in which the error occurred
Error int get Line	returns the line number where the error occurred
Error int get Line	gets the line in which the error occurred
Error string get Message	returns the error message as a string
Error string get Message	gets the error message
Error Throwable get Previous	returns the previous throwable if available or null otherwise
Error Throwable get Previous	returns previous throwable
Error array get Trace	returns the stack trace as an array
Error array get Trace	gets the stack trace
Error string get Trace As String	returns the stack trace as a string
Error string get Trace As String	gets the stack trace as a string
Error string to String	returns the string representation of the error
Error string to String	string representation of the error
ErrorException int get Severity	returns the severity level of the exception
ErrorException int get Severity	gets the exception severity
Ev int backend	returns an integer bit mask describing the backend used by libev
Ev feed Signal $signum	signal number
Ev void feed Signal int $signum	feed a signal event info ev
Ev feed Signal Event $signum	signal number
Ev int iteration	returns number of polls of the default event loop
Ev int iteration	return the number of times the default event loop has polled for new events
Ev void now Update	establishes the current time by querying the kernel updating the time returned by ev::now in the progress
Ev void recommended Backends	returns a bit mask of recommended backends for current platform
Ev void resume	resume previously suspended default event loop
Ev run $flags	optional parameter flags can be one of the following: list for possible values of flags flags description 0 the default behavior described above ev::run_once block at most one(wait but dont loop ev::run_nowait dont block at all( fetch / handle events but dont wait see the run flag constants
Ev sleep $seconds	fractional number of seconds
Ev stop $how	one of ev::break_* constants
EvCheck construct $data	custom data associated with the watcher
EvCheck construct $priority	watcher priority
EvCheck construct $callback	see watcher callbacks
EvCheck callable construct	returns evcheck object on success
EvCheck create Stopped $data	custom data associated with the watcher
EvCheck create Stopped $priority	watcher priority
EvCheck create Stopped $callback	see watcher callbacks
EvCheck object create Stopped	returns evcheck object on success
EvChild construct $pid	wait for status changes of process pid or any process if pid is specified as 0
EvChild construct $data	custom data associated with the watcher
EvChild construct $priority	watcher priority
EvChild construct $callback	see watcher callbacks
EvChild construct $trace	if false only activate the watcher when the process terminates
EvChild int construct	returns evchild object on success
EvChild create Stopped $trace	the same as for evchild::__construct()
EvChild create Stopped $data	custom data associated with the watcher
EvChild create Stopped $priority	watcher priority
EvChild create Stopped $callback	see watcher callbacks
EvChild create Stopped $pid	the same as for evchild::__construct()
EvChild object create Stopped int $pid bool $trace callable $callback mixed $data int $priority	create instance of a stopped evcheck watcher
EvEmbed create Stopped $other	the same as for evembed::__construct()
EvEmbed create Stopped $data	custom data associated with the watcher
EvEmbed create Stopped $priority	watcher priority
EvEmbed create Stopped $callback	see watcher callbacks
EvEmbed void create Stopped object $other callable $callback mixed $data int $priority	create stopped evembed watcher object
EvEmbed set $other	the same as for evembed::__construct()
EvEmbed void set object $other	configures the watcher
Event add $timeout	timeout in seconds
Event bool add	returns true on success
Event bool add double $timeout	makes event pending
Event bool del	returns true on success
Event bool del	makes event non-pending
Event void free	make event non-pending and free resources allocated for this event
Event set $what	see event flags
Event set $base	the event base to associate the event with
Event set $arg	custom data associated with the event
Event set $fd	a stream socket resource or numeric file descriptor; for signal events pass -1
Event set $cb	the event callback
Event bool set	returns true on success
Event set Priority $priority	the event priority
Event bool set Priority	returns true on success
Event set Timer $base	the event base to associate with
Event set Timer $arg	custom data
Event set Timer $cb	the timer event callback
Event bool set Timer	returns true on success
EventBase construct $cfg	optional eventconfig object
EventBase EventConfig construct	returns eventbase object
EventBase void dispatch	dispatch pending events
EventBase int get Features	returns integer representing a bitmask of supported features
EventBase double get Time Of Day Cached	returns the current event base time
EventBase double get Time Of Day Cached	returns the current event base time
EventBase bool re Init	returns true on success
EventBase bool re Init	re-initialize event base after a fork
EventBuffer add $data	string to be appended to the end of the buffer
EventBuffer bool add	returns true on success
EventBuffer add Buffer $buf	the source eventbuffer object
EventBuffer bool add Buffer	returns true on success
EventBuffer bool add Buffer EventBuffer $buf	move all data from a buffer provided to the current instance of eventbuffer
EventBuffer append From $buf	source buffer
EventBuffer int append From	returns the number of bytes read
EventBuffer copyout $max_bytes	the number of bytes to copy
EventBuffer copyout $data	output string
EventBuffer int copyout	returns the number of bytes copied or -1 on failure
EventBuffer int copyout string $data int $max_bytes	copies out specified number of bytes from the front of the buffer
EventBuffer drain $len	the number of bytes to remove from the buffer
EventBuffer bool drain	returns true on success
EventBuffer bool drain int $len	removes specified number of bytes from the front of the buffer without copying it anywhere
EventBuffer void enable Locking	description
EventBuffer expand $len	the number of bytes to reserve for the buffer
EventBuffer bool expand	returns true on success
EventBuffer bool expand int $len	reserves space in buffer
EventBuffer prepend Buffer $buf	source buffer
EventBuffer bool prepend Buffer	returns true on success
EventBuffer bool prepend Buffer EventBuffer $buf	moves all data from source buffer to the front of current buffer
EventBuffer pullup $size	the number of bytes required to be contiguous within the buffer
EventBuffer string pullup	if size is greater than the number of bytes in the buffer the function returns null
EventBuffer string pullup int $size	linearizes data within buffer and returns it's contents as a string
EventBuffer read $max_bytes	maxmimum number of bytes to read from the buffer
EventBuffer string read	returns string read or false on failure
EventBuffer string read int $max_bytes	read data from an evbuffer and drain the bytes read
EventBuffer read Line $eol_style	one of eventbuffer:eol_* constants
EventBuffer string read Line	on success returns the line read from the buffer otherwise null
EventBuffer string read Line int $eol_style	extracts a line from the front of the buffer
EventBuffer search $end	end search position
EventBuffer search $what	string to search
EventBuffer search $start	start search position
EventBuffer mixed search	returns numeric position of the first occurance of the string in the buffer or false if string is not found
EventBuffer mixed search string $what int $start int $end	scans the buffer for an occurrence of a string
EventBuffer substr $length	maximum number of bytes to substract
EventBuffer substr $start	the start position of data to be substracted
EventBuffer string substr	returns the data substracted as a string on success or false on failure
EventBuffer string substr int $start int $length	substracts a portion of the buffer data
EventBuffer bool unlock	returns true on success
EventBuffer bool unlock	releases lock acquired by eventbuffer::lock
EventBuffer write $howmuch	the maximum number of bytes to write
EventBuffer write $fd	socket resource stream or numeric file descriptor associated normally associated with a socket
EventBuffer int write	returns the number of bytes written or false on error
EventBuffer int write mixed $fd int $howmuch	write contents of the buffer to a file or socket
EventBufferEvent connect $addr	should contain an ip address with optional port number or a path to unix domain socket
EventBufferEvent bool connect	returns true on success
EventBufferEvent bool connect string $addr	connect buffer event's file descriptor to given address or unix socket
EventBufferEvent connect Host $port	port number
EventBufferEvent connect Host $hostname	hostname to connect to
EventBufferEvent connect Host $family	address family
EventBufferEvent connect Host $dns_base	object of eventdnsbase in case if dns is to be resolved asyncronously
EventBufferEvent bool connect Host	returns true on success
EventBufferEvent bool connect Host EventDnsBase $dns_base string $hostname int $port int $family	connects to a hostname with optionally asyncronous dns resolving
EventBufferEvent construct $eventcb	status-change event callback
EventBufferEvent construct $options	one of eventbufferevent::opt_* constants or 0
EventBufferEvent construct $writecb	write event callback
EventBufferEvent construct $socket	may be created as a stream not necessarily by means of sockets extension
EventBufferEvent construct $arg	a variable that will be passed to all the callbacks
EventBufferEvent construct $readcb	read event callback
EventBufferEvent construct $base	event base that should be associated with the new buffer event
EventBufferEvent EventBase construct	returns buffer event resource optionally associated with socket resource
EventBufferEvent EventBase construct EventBase $base mixed $socket int $options callable $readcb callable $writecb callable $eventcb	constructs eventbufferevent object
EventBufferEvent bool disable	returns true on success
EventBufferEvent bool disable int $events	disable events read write or both on a buffer event
EventBufferEvent enable $events	event::read event::write or event::read | event::write on a buffer event
EventBufferEvent bool enable	returns true on success
EventBufferEvent bool enable int $events	enable events read write or both on a buffer event
EventBufferEvent void free	free a buffer event
EventBufferEvent string get Dns Error String	returns a string describing dns lookup error or an empty string for no error
EventBufferEvent string get Dns Error String	returns string describing the last failed dns lookup attempt
EventBufferEvent EventBuffer get Input	returns instance of eventbuffer input buffer associated with current buffer event
EventBufferEvent EventBuffer get Output	returns instance of eventbuffer output buffer associated with current buffer event
EventBufferEvent read $size	maximum number of bytes to read
EventBufferEvent string read	returns string of data read from the input buffer
EventBufferEvent string read int $size	read buffer's data
EventBufferEvent read Buffer $buf	target buffer
EventBufferEvent bool read Buffer	returns true on success; otherwise false
EventBufferEvent set Callbacks $writecb	write event callback
EventBufferEvent set Callbacks $eventcb	status-change event callback
EventBufferEvent set Callbacks $readcb	read event callback
EventBufferEvent set Callbacks $arg	a variable that will be passed to all the callbacks
EventBufferEvent set Priority $priority	priority value
EventBufferEvent bool set Priority	returns true on success
EventBufferEvent set Timeouts $timeout_write	write timeout
EventBufferEvent set Timeouts $timeout_read	read timeout
EventBufferEvent bool set Timeouts	returns true on success
EventBufferEvent string ssl Error	returns openssl error string reported on the buffer event or false if there is no more error to return
EventBufferEvent ssl Filter $state	the current state of ssl connection: eventbufferevent::ssl_open eventbufferevent::ssl_accepting or eventbufferevent::ssl_connecting
EventBufferEvent ssl Filter $underlying	a socket buffer event to use for this ssl
EventBufferEvent ssl Filter $options	one or more buffer event options
EventBufferEvent ssl Filter $base	associated event base
EventBufferEvent ssl Filter $ctx	object of eventsslcontext class
EventBufferEvent EventBufferEvent ssl Filter	returns a new ssl eventbufferevent object
EventBufferEvent string ssl Get Cipher Info	returns a textual description of the cipher on success or false on error
EventBufferEvent string ssl Get Cipher Info	returns a textual description of the cipher
EventBufferEvent string ssl Get Cipher Name	returns the current cipher name of the ssl connection or false on error
EventBufferEvent string ssl Get Cipher Name	returns the current cipher name of the ssl connection
EventBufferEvent string ssl Get Protocol	returns the name of the protocol used for current ssl connection
EventBufferEvent ssl Socket $socket	socket to use for this ssl
EventBufferEvent ssl Socket $state	the current state of ssl connection: eventbufferevent::ssl_open eventbufferevent::ssl_accepting or eventbufferevent::ssl_connecting
EventBufferEvent ssl Socket $options	the buffer event options
EventBufferEvent ssl Socket $base	associated event base
EventBufferEvent ssl Socket $ctx	object of eventsslcontext class
EventBufferEvent EventBufferEvent ssl Socket	returns eventbufferevent object
EventBufferEvent write $data	data to be added to the underlying buffer
EventBufferEvent bool write	returns true on success
EventBufferEvent bool write string $data	adds data to a buffer event's output buffer
EventConfig avoid Method $method	the backend method to avoid
EventConfig bool avoid Method	returns true on success otherwise false
EventConfig bool avoid Method int $method	tells libevent to avoid specific event method
EventConfig set Max Dispatch Interval $max_callbacks	a number of callbacks after which libevent should stop running callbacks and check for more events or -1 if there should be no such limit
EventConfig set Max Dispatch Interval $min_priority	a priority below which max_interval and max_callbacks should not be enforced
EventConfig set Max Dispatch Interval $max_interval	an interval after which libevent should stop running callbacks and check for more events or 0 if there should be no such interval
EventConfig void set Max Dispatch Interval int $max_interval int $max_callbacks int $min_priority	prevents priority inversion
EventDnsBase add Search $domain	search domain
EventDnsBase void clear Search	removes all current search suffixes
EventDnsBase construct $initialize	if the initialize argument is true it tries to configure the dns base sensibly given your operating system’s default
EventDnsBase construct $base	event base
EventDnsBase EventBase construct	returns eventdnsbase object
EventDnsBase parse Resolv Conf $filename	path to resolv
EventDnsBase parse Resolv Conf $flags	determines what information is parsed from the resolv
EventDnsBase bool parse Resolv Conf	returns true on success
EventDnsBase set Option $value	option value
EventDnsBase set Option $option	the currently available configuration options are: ndots timeout max-timeouts max-inflight and attempts
EventDnsBase bool set Option	returns true on success
EventDnsBase set Search Ndots $ndots	the number of dots
EventDnsBase bool set Search Ndots	returns true on success
EventDnsBase bool set Search Ndots int $ndots	set the 'ndots' parameter for searches
EventHttp accept $socket	socket resource stream or numeric file descriptor representing a socket ready to accept connections
EventHttp bool accept	returns true on success
EventHttp bind $address	a string containing the ip address to listen 2 on
EventHttp bind $port	the port number to listen on
EventHttp construct $base	associated event base
EventHttp construct $ctx	eventsslcontext class object
EventHttp EventBase construct	returns eventhttp object
EventHttp EventBase construct EventBase $base EventSslContext $ctx	constructs eventhttp object the http server
EventHttp remove Server Alias $alias	the alias to remove
EventHttp bool remove Server Alias	returns true on success
EventHttp bool remove Server Alias string $alias	removes server alias
EventHttp set Allowed Methods $methods	a bit mask of eventhttprequest::cmd_* constants
EventHttp set Callback $cb	the callback callable that gets invoked on requested path
EventHttp set Callback $path	the path for which to invoke the callback
EventHttp set Callback $arg	custom data
EventHttp set Callback $req	eventhttprequest object
EventHttp set Max Headers Size $value	the header size in bytes
EventHttp set Timeout $value	the timeout in seconds
EventHttpConnection construct $address	the address to connect to
EventHttpConnection construct $base	associated event base
EventHttpConnection construct $dns_base	if dns_base is null hostname resolution will block
EventHttpConnection construct $port	the port to connect to
EventHttpConnection construct $ctx	eventsslcontext class object
EventHttpConnection EventBase construct	returns eventhttpconnection object
EventHttpConnection EventBase get Base	on success returns eventbase object associated with the connection
EventHttpConnection get Peer $address	address of the peer
EventHttpConnection get Peer $port	port of the peer
EventHttpConnection make Request $type	one of eventhttprequest::cmd_* constants
EventHttpConnection make Request $req	the connection object over which to send the request
EventHttpConnection make Request $uri	the uri associated with the request
EventHttpConnection bool make Request	returns true on success
EventHttpConnection set Local Address $address	the ip address from which http connections are made
EventHttpConnection void set Local Address string $address	sets the ip address from which http connections are made
EventHttpConnection set Local Port $port	the port number
EventHttpConnection set Retries $retries	the retry limit
EventHttpConnection set Timeout $timeout	timeout in seconds
EventHttpRequest add Header $key	header name
EventHttpRequest add Header $value	header value
EventHttpRequest add Header $type	one of eventhttprequest::*_header constants
EventHttpRequest bool add Header	returns true on success
EventHttpRequest void close Connection	closes associated http connection
EventHttpRequest construct $callback	gets invoked on requesting path
EventHttpRequest construct $data	user custom data passed to the callback
EventHttpRequest callable construct	returns eventhttprequest object
EventHttpRequest find Header $key	the header name
EventHttpRequest find Header $type	one of eventhttprequest::*_header constants
EventHttpRequest EventBufferEvent get Buffer Event	returns eventbufferevent object
EventHttpRequest EventBufferEvent get Buffer Event	returns eventbufferevent object
EventHttpRequest void get Command	returns the request command method
EventHttpRequest EventHttpConnection get Connection	returns eventhttpconnection object
EventHttpRequest EventHttpConnection get Connection	returns eventhttpconnection object
EventHttpRequest EventBuffer get Input Buffer	returns the input buffer
EventHttpRequest string get Uri	returns the request uri
EventHttpRequest send Error $error	the http error code
EventHttpRequest send Error $reason	a brief explanation ofthe error
EventHttpRequest send Reply $code	the http response code to send
EventHttpRequest send Reply $reason	a brief message to send with the response code
EventHttpRequest send Reply $buf	the body of the response
EventHttpRequest send Reply Chunk $buf	the data chunk to send as part of the reply
EventHttpRequest send Reply Start $code	the http response code to send
EventHttpRequest send Reply Start $reason	a brief message to send with the response code
EventHttpRequest void send Reply Start int $code string $reason	initiate a chunked reply
EventListener construct $flags	bit mask of eventlistener::opt_* constants
EventListener construct $base	associated event base
EventListener construct $data	custom user data attached to cb
EventListener construct $cb	a callable that will be invoked when new connection received
EventListener construct $target	may be string socket resource or a stream associated with a socket
EventListener construct $backlog	controls the maximum number of pending connections that the network stack should allow to wait in a not-yet-accepted state at any time; see documentation for your system’s listen function for more details
EventListener EventBase construct	returns eventlistener object representing the event connection listener
EventListener bool enable	returns true on success
EventListener set Callback $listener	the eventlistener object
EventListener set Callback $arg	user custom data attached to the callback
EventListener set Callback $arg	custom user data attached to the callback
EventListener set Callback $fd	the file descriptor or a resource associated with the listener
EventListener set Callback $address	array of two elements: ip address and the server port
EventListener set Callback $cb	the new callback for new connections
EventListener void set Callback callable $cb mixed $arg	the setcallback purpose
EventSslContext construct $options	associative array of ssl context options one of eventsslcontext::opt_* constants
EventSslContext construct $method	one of eventsslcontext::*_method constants
EventSslContext string construct	returns eventsslcontext object
EventSslContext string construct string $method string $options	constructs an openssl context for use with event classes
EventUtil - construct	the abstract constructor
EventUtil get Last Socket Errno $socket	socket resource stream or a file descriptor of a socket
EventUtil int get Last Socket Errno	returns the most recent socket error number errno
EventUtil int get Last Socket Errno mixed $socket	returns the most recent socket error number
EventUtil get Last Socket Error $socket	socket resource stream or a file descriptor of a socket
EventUtil string get Last Socket Error	returns the most recent socket error
EventUtil get Socket Fd $socket	socket resource or stream
EventUtil int get Socket Fd	returns true on success
EventUtil int get Socket Fd mixed $socket	returns numeric file descriptor of a socket or stream
EventUtil get Socket Name $socket	socket resource stream or a file descriptor of a socket
EventUtil get Socket Name $port	output parameter
EventUtil get Socket Name $address	output parameter
EventUtil bool get Socket Name	returns true on success
EventUtil void ssl Rand Poll	generates entropy by means of openssl's rand_poll()
EvFork construct $data	custom data associated with the watcher
EvFork construct $priority	watcher priority
EvFork construct $callback	see watcher callbacks
EvFork callable construct	returns evfork object on success
EvFork callable construct callable $callback mixed $data int $priority	constructs the evfork watcher object
EvIdle construct $data	custom data associated with the watcher
EvIdle construct $priority	watcher priority
EvIdle construct $callback	see watcher callbacks
EvIdle callable construct	returns evidle object on success
EvIdle callable construct callable $callback mixed $data int $priority	constructs the evidle watcher object
EvIdle create Stopped $data	custom data associated with the watcher
EvIdle create Stopped $priority	watcher priority
EvIdle create Stopped $callback	see watcher callbacks
EvIdle object create Stopped	returns evidle object on success
EvIdle object create Stopped string $callback mixed $data int $priority	creates instance of a stopped evidle watcher object
EvIo construct $priority	watcher priority
EvIo construct $fd	can be a stream opened with fopen() or similar functions numeric file descriptor or socket
EvIo construct $data	custom data associated with the watcher
EvIo construct $events	ev::read and / or ev::write
EvIo construct $callback	see watcher callbacks
EvIo mixed construct	returns evio object on success
EvIo mixed construct mixed $fd int $events callable $callback mixed $data int $priority	constructs evio watcher object
EvIo set $fd	the same as for evio::__construct()
EvIo set $events	the same as for evio::__construct()
EvIo void set mixed $fd int $events	configures the watcher
EvLoop construct $io_interval	see io_interval
EvLoop construct $timeout_interval	see timeout_interval
EvLoop construct $flags	one of the event loop flags
EvLoop construct $data	custom data associated with the loop
EvLoop int construct	returns new evloop object
EvLoop EvFork fork	returns evfork object on success
EvLoop EvIdle idle	returns evidle object on success
EvLoop void loop Fork	must be called after a fork
EvLoop double now	returns time of the event loop in fractional seconds
EvLoop double now	returns the current event loop time
EvLoop void now Update	establishes the current time by querying the kernel updating the time returned by evloop::now in the progress
EvLoop EvPeriodic periodic	returns evperiodic object on success
EvLoop run $flags	optional parameter flags can be one of the following: list for possible values of flags flags description 0 the default behavior described above ev::run_once block at most one(wait but dont loop ev::run_nowait dont block at all( fetch / handle events but dont wait see the run flag constants
EvLoop void run int $flags	begin checking for events and calling callbacks for the loop
EvLoop stop $how	one of ev::break_* constants
EvLoop EvTimer timer	returns evtimer object on success
EvPeriodic double at	returns the absolute time this watcher is supposed to trigger next in seconds
EvPeriodic double at	returns the absolute time that this watcher is supposed to trigger next
EvPeriodic construct $interval	see periodic watcher operation modes
EvPeriodic construct $offset	see periodic watcher operation modes
EvPeriodic construct $data	custom data associated with the watcher
EvPeriodic construct $priority	watcher priority
EvPeriodic construct $reschedule_cb	reschedule callback
EvPeriodic construct $callback	see watcher callbacks
EvPeriodic double construct	returns evperiodic object on success
EvPeriodic double construct double $offset string $interval callable $reschedule_cb callable $callback mixed $data int $priority	constructs evperiodic watcher object
EvPeriodic create Stopped $interval	see periodic watcher operation modes
EvPeriodic create Stopped $offset	see periodic watcher operation modes
EvPeriodic create Stopped $data	custom data associated with the watcher
EvPeriodic create Stopped $priority	watcher priority
EvPeriodic create Stopped $reschedule_cb	reschedule callback
EvPeriodic create Stopped $callback	see watcher callbacks
EvPeriodic EvPeriodic create Stopped	returns evperiodic watcher object on success
EvPeriodic EvPeriodic create Stopped double $offset double $interval callable $reschedule_cb callable $callback mixed $data int $priority	create a stopped evperiodic watcher
EvPeriodic set $interval	the same meaning as for evperiodic::__construct()
EvPeriodic set $offset	the same meaning as for evperiodic::__construct()
EvPeriodic void set double $offset double $interval	configures the watcher
EvPrepare construct $data	custom data associated with the watcher
EvPrepare construct $priority	watcher priority
EvPrepare construct $callback	see watcher callbacks
EvPrepare string construct	returns evprepare object on success
EvPrepare create Stopped $data	custom data associated with the watcher
EvPrepare create Stopped $priority	watcher priority
EvPrepare create Stopped $callback	see watcher callbacks
EvPrepare EvPrepare create Stopped	return evprepare object on success
EvSignal create Stopped $data	custom data associated with the watcher
EvSignal create Stopped $priority	watcher priority
EvSignal create Stopped $callback	see watcher callbacks
EvSignal create Stopped $signum	signal number
EvSignal EvSignal create Stopped	returns evsignal object on success
EvStat construct $data	custom data associated with the watcher
EvStat construct $priority	watcher priority
EvStat construct $interval	hint on how quickly a change is expected to be detected and should normally be specified as 0
EvStat construct $callback	see watcher callbacks
EvStat construct $path	the path to wait for status changes on
EvStat string construct	returns evstat watcher object on succes
EvStat string construct string $path double $interval callable $callback mixed $data int $priority	constructs evstat watcher object
EvStat void prev	returns the previous set of values returned by evstat::attr
EvStat bool stat	returns true if path exists
EvStat bool stat	initiates the stat call
EvTimer void again	restarts the timer watcher
EvTimer construct $after	configures the timer to trigger after after seconds
EvTimer construct $repeat	if repeat is 0
EvTimer construct $data	custom data associated with the watcher
EvTimer construct $priority	watcher priority
EvTimer construct $callback	see watcher callbacks
EvTimer double construct	returns evtimer object on success
EvTimer create Stopped $after	configures the timer to trigger after after seconds
EvTimer create Stopped $repeat	if repeat is 0
EvTimer create Stopped $data	custom data associated with the watcher
EvTimer create Stopped $priority	watcher priority
EvTimer create Stopped $callback	see watcher callbacks
EvTimer EvTimer create Stopped	returns evtimer watcher object on success
EvTimer set $after	configures the timer to trigger after after seconds
EvTimer set $repeat	if repeat is 0
EvWatcher int clear	in case if the watcher is pending returns revents bitset as if the watcher callback had been invoked
EvWatcher int clear	clear watcher pending status
EvWatcher - construct	abstract constructor of a watcher object
EvWatcher feed $revents	bit mask of watcher received events
EvWatcher void feed int $revents	feeds the given revents set into the event loop
EvWatcher EvLoop get Loop	returns evloop event loop object responsible for the watcher
EvWatcher invoke $revents	bit mask of watcher received events
EvWatcher keepalive $value	with keepalive value set to false the watcher wont keep ev::run() / evloop::run() from returning even though the watcher is active
EvWatcher bool keepalive	returns the previous state
EvWatcher set Callback $callback	see watcher callbacks
EvWatcher void start	starts the watcher
EvWatcher void stop	stops the watcher
Exception void clone	clone the exception
Exception mixed get Code	returns the exception code as integer in exception but possibly as other type in exception descendants for example as string in pdoexception
Exception mixed get Code	gets the exception code
Exception string get File	returns the filename in which the exception was created
Exception string get File	gets the file in which the exception occurred
Exception string get Message	returns the exception message as a string
Exception string get Message	gets the exception message
Exception Exception get Previous	returns the previous exception if available or null otherwise
Exception Exception get Previous	returns previous exception
Exception string get Trace As String	returns the exception stack trace as a string
Exception string get Trace As String	gets the stack trace as a string
Exception string to String	returns the string representation of the exception
Exception string to String	string representation of the exception
FANNConnection construct $weight	the connection weight value
FANNConnection construct $to_neuron	the postion number of terminating neuron
FANNConnection construct $from_neuron	the postion number of starting neuron
FANNConnection int construct int $from_neuron int $to_neuron float $weight	the connection constructor
FANNConnection int get From Neuron	the postions of starting neuron
FANNConnection int get To Neuron	the postions of terminating neuron
FilesystemIterator construct $path	the path of the filesystem item to be iterated over
FilesystemIterator construct $flags	flags may be provided which will affect the behavior of some methods
FilesystemIterator string construct string $path int $flags	constructs a new filesystem iterator
FilesystemIterator int get Flags	the integer value of the set flags
FilesystemIterator int get Flags	get the handling flags
FilesystemIterator set Flags $flags	the handling flags to set
FilterIterator bool accept	true if the current element is acceptable otherwise false
FilterIterator bool accept	check whether the current element of the iterator is acceptable
FilterIterator construct $iterator	the iterator that is being filtered
FilterIterator Iterator construct	the filteriterator
FilterIterator Iterator construct Iterator $iterator	construct a filteriterator
function abs $number	the numeric value to process
function number abs	the absolute value of number
function number abs mixed $number	absolute value
function acos $arg	the argument to process
function float acos	the arc cosine of arg in radians
function float acos float $arg	arc cosine
function acosh $arg	the value to process
function float acosh	the inverse hyperbolic cosine of arg
function float acosh float $arg	inverse hyperbolic cosine
function addcslashes $charlist	a list of characters to be escaped
function addcslashes $str	the string to be escaped
function string addcslashes	returns the escaped string
function string addcslashes string $str string $charlist	quote string with slashes in a c style
function bool apache child terminate	returns true if php is running as an apache 1 module the apache version is non-multithreaded and the child_terminate php directive is enabled disabled by default
function bool apache child terminate	terminate apache process after this request
function string apache get version	returns the apache version on success or false on failure
function string apache get version	fetch apache version
function apache lookup uri $filename	the filename uri thats being requested
function object apache lookup uri	an object of related uri information
function object apache lookup uri string $filename	perform a partial request for the specified uri and return all info about it
function apache note $note_name	the name of the note
function apache note $note_value	the value of the note
function string apache note	if called with one argument it returns the current value of note note_name
function string apache note string $note_name string $note_value	get and set apache request notes
function array apache request headers	an associative array of all the http headers in the current request or false on failure
function array apache request headers	fetch all http request headers
function bool apache reset timeout	returns true on success or false on failure
function bool apache reset timeout	reset the apache write timer
function apache setenv $variable	the environment variable thats being set
function apache setenv $value	the new variable value
function apache setenv $walk_to_top	whether to set the top-level variable available to all apache layers
function bool apache setenv	returns true on success or false on failure
function bool apache setenv string $variable string $value bool $walk_to_top	set an apache subprocess_env variable
function apc bin dump $files	the files
function apc bin dump $user_vars	the user vars
function string apc bin dump	returns a binary dump of the given files and user variables from the apc cache false if apc is not enabled or null if an unknown error is encountered
function string apc bin dump array $files array $user_vars	get a binary dump of the given files and user variables
function apc cache info $cache_type	if cache_type is user information about the user cache will be returned
function apc cache info $limited	if limited is true the return value will exclude the individual list of cache entries
function array apc cache info	array of cached data and meta-data or false on failure
function array apc cache info string $cache_type bool $limited	retrieves cached information from apc's data store
function apc cas $key	the key of the value being updated
function apc cas $old	the old value the value currently stored
function apc cas $new	the new value to update to
function bool apc cas	returns true on success or false on failure
function bool apc cas string $key int $old int $new	updates an old value with a new value
function apc clear cache $cache_type	if cache_type is user the user cache will be cleared; otherwise the system cache cached files will be cleared
function bool apc clear cache	returns true always
function bool apc clear cache string $cache_type	clears the apc cache
function apc compile file $filename	full or relative path to a php file that will be compiled and stored in the bytecode cache
function mixed apc compile file	returns true on success or false on failure
function apc delete file $keys	the files to be deleted
function mixed apc delete file	returns true on success or false on failure
function mixed apc delete file mixed $keys	deletes files from the opcode cache
function apc delete $key	the key used to store the value with apc_store()
function mixed apc delete	returns true on success or false on failure
function apc inc $key	the key of the value being increased
function apc inc $success	optionally pass the success or fail boolean value to this referenced variable
function apc inc $step	the step or value to increase
function int apc inc	returns the current value of key s value on success or false on failure
function int apc inc string $key int $step bool $success	increase a stored number
function apc load constants $case_sensitive	the default behaviour for constants is to be declared case-sensitive; i
function apc load constants $key	the name of the constant set that was stored with apc_define_constants() to be retrieved
function bool apc load constants	returns true on success or false on failure
function apc sma info $limited	when set to false default apc_sma_info() will return a detailed information about each segment
function array apc sma info	array of shared memory allocation data; false on failure
function array apc sma info bool $limited	retrieves apc's shared memory allocation information
function apcu add $ttl	time to live; store var in the cache for ttl seconds
function apcu add $values	names in key variables in value
function apcu add $key	store the variable using this name
function apcu add $var	the variable to store
function bool apcu add	returns true if something has effectively been added into the cache false otherwise
function bool apcu add string $key mixed $var int $ttl	cache a new variable in the data store
function apcu cache info $limited	if limited is true the return value will exclude the individual list of cache entries
function array apcu cache info	array of cached data and meta-data or false on failure
function array apcu cache info bool $limited	retrieves cached information from apcu's data store
function apcu entry $key	identity of cache entry
function apcu entry $ttl	time to live; store var in the cache for ttl seconds
function apcu entry $generator	a callable that accepts key as the only argument and returns the value to cache
function mixed apcu entry	returns the cached value
function mixed apcu entry string $key callable $generator int $ttl	atomically fetch or generate a cache entry
function apcu exists $keys	a string or an array of strings that contain keys
function mixed apcu exists	returns true if the key exists otherwise false or if an array was passed to keys then an array is returned that contains all existing keys or an empty array if none exist
function mixed apcu exists mixed $keys	checks if entry exists
function apcu fetch $key	the key used to store the value with apcu_store()
function apcu fetch $success	set to true in success and false in failure
function mixed apcu fetch	the stored variable or array of variables on success; false on failure
function mixed apcu fetch mixed $key bool $success	fetch a stored variable from the cache
function apcu inc $key	the key of the value being increased
function apcu inc $success	optionally pass the success or fail boolean value to this referenced variable
function apcu inc $step	the step or value to increase
function int apcu inc	returns the current value of key s value on success or false on failure
function int apcu inc string $key int $step bool $success	increase a stored number
function apcu sma info $limited	when set to false default apcu_sma_info() will return a detailed information about each segment
function array apcu sma info	array of shared memory allocation data; false on failure
function apcu store $ttl	time to live; store var in the cache for ttl seconds
function apcu store $values	names in key variables in value
function apcu store $key	store the variable using this name
function apcu store $var	the variable to store
function bool apcu store	returns true on success or false on failure
function apd breakpoint $debug_level	an integer which is formed by adding together the xxx_trace constants
function bool apd breakpoint	returns true on success or false on failure
function bool apd breakpoint int $debug_level	stops the interpreter and waits on a cr from the socket
function apd continue $debug_level	an integer which is formed by adding together the xxx_trace constants
function bool apd continue	returns true on success or false on failure
function bool apd continue int $debug_level	restarts the interpreter
function array apd dump persistent resources	an array containing the current call stack
function array apd dump regular resources	an array containing the current regular resources
function apd echo $output	the debugged variable
function bool apd echo	returns true on success or false on failure
function bool apd echo string $output	echo to the debugging socket
function array apd get active symbols	a multidimensional array with all the variables
function array apd get active symbols	get an array of the current variables names in the local scope
function apd set pprof trace $dump_directory	the directory in which the profile dump file is written
function string apd set pprof trace	returns path of the destination file
function string apd set pprof trace string $dump_directory string $fragment	starts the session debugging
function apd set session trace socket $tcp_server	ip or unix domain socket like a file of the tcp server
function apd set session trace socket $port	you can use any port but higher numbers are better as most of the lower numbers may be used by other system services
function apd set session trace socket $socket_type	can be af_unix for file based sockets or apd_af_inet for standard tcp / ip
function apd set session trace socket $debug_level	an integer which is formed by adding together the xxx_trace constants
function bool apd set session trace socket	returns true on success or false on failure
function bool apd set session trace socket string $tcp_server int $socket_type int $port int $debug_level	starts the remote session debugging
function apd set session $debug_level	an integer which is formed by adding together the xxx_trace constants
function void apd set session int $debug_level	changes or sets the current debugging level
function array chunk $preserve_keys	when set to true keys will be preserved
function array chunk $array	the array to work on
function array chunk $size	the size of each chunk
function array array chunk	returns a multidimensional numerically indexed array starting with zero with each dimension containing size elements
function array array chunk array $array int $size bool $preserve_keys	split an array into chunks
function array column $input	a multi-dimensional array or an array of objects from which to pull a column of values from
function array column $index_key	the column to use as the index / keys for the returned array
function array column $column_key	the column of values to return
function array array column	returns an array of values representing a single column from the input array
function array array column array $input mixed $column_key mixed $index_key	return the values from a single column in the input array
function array combine $keys	array of keys to be used
function array combine $values	array of values to be used
function array array combine	returns the combined array false if the number of elements for each array isnt equal
function array array combine array $keys array $values	creates an array by using one array for keys and another for its values
function array count values $array	the array of values to count
function array array count values	returns an associative array of values from array as keys and their count as value
function array array count values array $array	counts all the values of an array
function array diff key $array2	an array to compare against
function array diff key	more arrays to compare against
function array diff key $array1	the array to compare from
function array array diff key	returns an array containing all the entries from array1 whose keys are not present in any of the other arrays
function array array diff key array $array1 array $array2	computes the difference of arrays using keys for comparison
function array diff ukey $key_compare_func	the comparison function must return an integer less than equal to or greater than zero if the first argument is considered to be respectively less than equal to or greater than the second
function array diff ukey $array2	an array to compare against
function array diff ukey	more arrays to compare against
function array diff ukey $array1	the array to compare from
function array array diff ukey	returns an array containing all the entries from array1 that are not present in any of the other arrays
function array array diff ukey array $array1 array $array2 callable $key_compare_func	computes the difference of arrays using a callback function on the keys for comparison
function array fill keys $keys	array of values that will be used as keys
function array fill keys $value	value to use for filling
function array array fill keys	returns the filled array
function array array fill keys array $keys mixed $value	fill an array with values specifying keys
function array fill $value	value to use for filling
function array fill $num	number of elements to insert
function array fill $start_index	the first index of the returned array
function array array fill	returns the filled array
function array array fill int $start_index int $num mixed $value	fill an array with values
function array filter $callback	the callback function to use if no callback is supplied all entries of array equal to false see converting to boolean will be removed
function array filter $flag	flag determining what arguments are sent to callback : array_filter_use_key - pass key as the only argument to callback instead of the value array_filter_use_both - pass both value and key as arguments to callback instead of the value
function array filter $array	the array to iterate over
function array array filter	returns the filtered array
function array array filter array $array callable $callback int $flag	filters elements of an array using a callback function
function array flip $array	an array of key / value pairs to be flipped
function array array flip	returns the flipped array on success and null on failure
function array array flip array $array	exchanges all keys with their associated values in an array
function array intersect key	a variable list of arrays to compare
function array intersect key $array1	the array with master keys to check
function array intersect key $array2	an array to compare keys against
function array array intersect key	returns an associative array containing all the entries of array1 which have keys that are present in all arguments
function array array intersect key array $array1 array $array2	computes the intersection of arrays using keys for comparison
function array intersect uassoc $array1	initial array for comparison of the arrays
function array intersect uassoc $array2	first array to compare keys against
function array intersect uassoc	variable list of array arguments to compare values against
function array intersect uassoc $key_compare_func	the comparison function must return an integer less than equal to or greater than zero if the first argument is considered to be respectively less than equal to or greater than the second
function array array intersect uassoc	returns the values of array1 whose values exist in all of the arguments
function array array intersect uassoc array $array1 array $array2 callable $key_compare_func	computes the intersection of arrays with additional index check compares indexes by a callback function
function array intersect	a variable list of arrays to compare
function array intersect $array1	the array with master values to check
function array intersect $array2	an array to compare values against
function array array intersect	returns an array containing all of the values in array1 whose values exist in all of the parameters
function array array intersect array $array1 array $array2	computes the intersection of arrays
function array key exists $array	an array with keys to check
function array key exists $key	value to check
function bool array key exists	returns true on success or false on failure
function bool array key exists mixed $key array $array	checks if the given key or index exists in the array
function array keys $search_value	if specified then only keys containing these values are returned
function array keys $array	an array containing keys to return
function array keys $strict	determines if strict comparison === should be used during the search
function array array keys	returns an array of all the keys in array
function array array keys array $array mixed $search_value bool $strict	return all the keys or a subset of the keys of an array
function array map $array1	an array to run through the callback function
function array map	variable list of array arguments to run through the callback function
function array map $callback	callback function to run for each element in each array
function array array map	returns an array containing all the elements of array1 after applying the callback function to each one
function array array map callable $callback array $array1	applies the callback to the elements of the given arrays
function array merge recursive $array1	initial array to merge
function array merge recursive	variable list of arrays to recursively merge
function array array merge recursive	an array of values resulted from merging the arguments together
function array array merge recursive array $array1	merge two or more arrays recursively
function array merge $array1	initial array to merge
function array merge	variable list of arrays to merge
function array array merge	returns the resulting array
function array array merge array $array1	merge one or more arrays
function array pad $size	new size of the array
function array pad $value	value to pad if array is less than size
function array pad $array	initial array of values to pad
function array array pad	returns a copy of the array padded to size specified by size with value value
function array array pad array $array int $size mixed $value	pad array to the specified length with a value
function array pop $array	the array to get the value from
function mixed array pop	returns the last value of array
function mixed array pop array $array	pop the element off the end of array
function array product $array	the array
function number array product	returns the product as an integer or float
function number array product array $array	calculate the product of values in an array
function array push $value1	the first value to push onto the end of the array
function array push $array	the input array
function int array push	returns the new number of elements in the array
function int array push array $array mixed $value1	push one or more elements onto the end of array
function array reduce $array	the input array
function array reduce $callback	mixed callback mixed $carry mixed $item carry holds the return value of the previous iteration; in the case of the first iteration it instead holds the value of initial
function array reduce $carry	holds the return value of the previous iteration; in the case of the first iteration it instead holds the value of initial
function array reduce $item	holds the value of the current iteration
function array reduce $initial	if the optional initial is available it will be used at the beginning of the process or as a final result in case the array is empty
function mixed array reduce	returns the resulting value
function mixed array reduce array $array callable $callback mixed $initial	iteratively reduce the array to a single value using a callback function
function array replace recursive $array1	the array in which elements are replaced
function array replace recursive $array2	the array from which elements will be extracted
function array replace recursive	optional
function array array replace recursive	returns an array or null if an error occurs
function array array replace recursive array $array1 array $array2	replaces elements from passed arrays into the first array recursively
function array replace $array1	the array in which elements are replaced
function array replace $array2	the array from which elements will be extracted
function array replace	more arrays from which elements will be extracted
function array array replace	returns an array or null if an error occurs
function array array replace array $array1 array $array2	replaces elements from passed arrays into the first array
function array reverse $preserve_keys	if set to true numeric keys are preserved
function array reverse $array	the input array
function array array reverse	returns the reversed array
function array array reverse array $array bool $preserve_keys	return an array with elements in reverse order
function array splice $replacement	if replacement array is specified then the removed elements are replaced with elements from this array
function array splice $input	the input array
function array splice $offset	if offset is positive then the start of removed portion is at that offset from the beginning of the input array
function array splice $length	if length is omitted removes everything from offset to the end of the array
function array array splice	returns an array consisting of the extracted elements
function array array splice array $input int $offset int $length mixed $replacement	remove a portion of the array and replace it with something else
function array udiff assoc $array2	the second array
function array udiff assoc $array1	the first array
function array udiff assoc $value_compare_func	the comparison function must return an integer less than equal to or greater than zero if the first argument is considered to be respectively less than equal to or greater than the second
function array array udiff assoc	array_udiff_assoc() returns an array containing all the values from array1 that are not present in any of the other arguments
function array udiff uassoc $array2	the second array
function array udiff uassoc $array1	the first array
function array udiff uassoc $key_compare_func	the comparison of keys indices is done also by the callback function key_compare_func
function array udiff uassoc $value_compare_func	the comparison function must return an integer less than equal to or greater than zero if the first argument is considered to be respectively less than equal to or greater than the second
function array array udiff uassoc	returns an array containing all the values from array1 that are not present in any of the other arguments
function array uintersect assoc $array2	the second array
function array uintersect assoc $array1	the first array
function array uintersect assoc $value_compare_func	the comparison function must return an integer less than equal to or greater than zero if the first argument is considered to be respectively less than equal to or greater than the second
function array array uintersect assoc	returns an array containing all the values of array1 that are present in all the arguments
function array unique $sort_flags	the optional second parameter sort_flags may be used to modify the sorting behavior using these values: sorting type flags: sort_regular - compare items normally dont change types sort_numeric - compare items numerically sort_string - compare items as strings sort_locale_string - compare items as strings based on the current locale
function array unique $array	the input array
function array array unique	returns the filtered array
function array array unique array $array int $sort_flags	removes duplicate values from an array
function arsort $sort_flags	you may modify the behavior of the sort using the optional parameter sort_flags for details see sort()
function arsort $array	the input array
function bool arsort	returns true on success or false on failure
function bool arsort array $array int $sort_flags	sort an array in reverse order and maintain index association
function asinh $arg	the argument to process
function float asinh	the inverse hyperbolic sine of arg
function float asinh float $arg	inverse hyperbolic sine
function asort $sort_flags	you may modify the behavior of the sort using the optional parameter sort_flags for details see sort()
function asort $array	the input array
function bool asort	returns true on success or false on failure
function bool asort array $array int $sort_flags	sort an array and maintain index association
function assert options $value	an optional new value for the option
function assert options $what	assert options option ini setting default value description assert_active assert
function mixed assert options	returns the original setting of any option or false on errors
function mixed assert options int $what mixed $value	set / get the various assert flags
function assert $assertion	the assertion
function assert $exception	in php 7 the second parameter can be a throwable object instead of a descriptive string in which case this is the object that will be thrown if the assertion fails and the assert
function assert $description	an optional description that will be included in the failure message if the assertion fails
function bool assert	false if the assertion is false true otherwise
function bool assert mixed $assertion string $description	checks if assertion is false
function atan $arg	the argument to process
function float atan	the arc tangent of arg in radians
function float atan float $arg	arc tangent
function autoload $class	name of the class to load
function void autoload string $class	attempt to load undefined class
function base convert $frombase	the base number is in
function base convert $tobase	the base to convert number to
function base convert $number	the number to convert
function string base convert	number converted to base tobase
function string base convert string $number int $frombase int $tobase	convert a number between arbitrary bases
function base64 decode $data	the encoded data
function base64 decode $strict	returns false if input contains character from outside the base64 alphabet
function string base64 decode	returns the original data or false on failure
function string base64 decode string $data bool $strict	decodes data encoded with mime base64
function bbcode add element $tag_name	the new tag to add to the bbcode_container tag_set
function bbcode add element $tag_rules	an associative array containing the parsing rules; see bbcode_create() for the available keys
function bbcode add element $bbcode_container	bbcode_container resource returned by bbcode_create()
function bool bbcode add element	returns true on success or false on failure
function bool bbcode add element resource $bbcode_container string $tag_name array $tag_rules	adds a bbcode element
function bbcode add smiley $smiley	the string that will be replaced when found
function bbcode add smiley $replace_by	the string that replace smiley when found
function bbcode add smiley $bbcode_container	bbcode_container resource returned by bbcode_create()
function bool bbcode add smiley	returns true on success or false on failure
function bbcode create $bbcode_initial_tags	an associative array containing the tag names as keys and parameters required to correctly parse bbcode as their value
function resource bbcode create	returns a bbcode_container
function resource bbcode create array $bbcode_initial_tags	create a bbcode resource
function bbcode destroy $bbcode_container	bbcode_container resource returned by bbcode_create()
function bool bbcode destroy	returns true on success or false on failure
function bool bbcode destroy resource $bbcode_container	close bbcode_container resource
function bbcode parse $bbcode_container	bbcode_container resource returned by bbcode_create()
function bbcode parse $to_parse	the string we need to parse
function string bbcode parse	returns the parsed string or false on failure
function string bbcode parse resource $bbcode_container string $to_parse	parse a string following a given rule set
function bbcode set arg parser $bbcode_arg_parser	bbcode_container resource returned by bbcode_create()
function bbcode set arg parser $bbcode_container	bbcode_container resource returned by bbcode_create()
function bool bbcode set arg parser	returns true on success or false on failure
function bool bbcode set arg parser resource $bbcode_container resource $bbcode_arg_parser	attach another parser in order to use another rule set for argument parsing
function bbcode set flags $flags	the flag set that must be applied to the bbcode_container options
function bbcode set flags $bbcode_container	bbcode_container resource returned by bbcode_create()
function bbcode set flags $mode	one of the bbcode_set_flags_* constant to set unset a specific flag set or to replace the flag set by flags
function bool bbcode set flags	returns true on success or false on failure
function bccomp $left_operand	the left operand as a string
function bccomp $right_operand	the right operand as a string
function bccomp $scale	the optional scale parameter is used to set the number of digits after the decimal place which will be used in the comparison
function int bccomp	returns 0 if the two operands are equal 1 if the left_operand is larger than the right_operand -1 otherwise
function int bccomp string $left_operand string $right_operand int $scale	compare two arbitrary precision numbers
function bcmod $modulus	the modulus as a string
function bcmod $left_operand	the left operand as a string
function string bcmod	returns the modulus as a string or null if modulus is 0
function string bcmod string $left_operand string $modulus	get modulus of an arbitrary precision number
function bcmul $left_operand	the left operand as a string
function bcmul $scale	this optional parameter is used to set the number of digits after the decimal place in the result
function bcmul $right_operand	the right operand as a string
function string bcmul	returns the result as a string
function string bcmul string $left_operand string $right_operand int $scale	multiply two arbitrary precision numbers
function bcompiler load exe $filename	the exe file path as a string
function bool bcompiler load exe	returns true on success or false on failure
function bool bcompiler load exe string $filename	reads and creates classes from a bcompiler exe file
function bcompiler parse class $class	the class name as a string
function bool bcompiler parse class	returns true on success or false on failure
function bcompiler read $filehandle	a file handle as returned by fopen()
function bool bcompiler read	returns true on success or false on failure
function bool bcompiler read resource $filehandle	reads and creates classes from a filehandle
function bcompiler write class $filehandle	a file handle as returned by fopen()
function bcompiler write class $className	the class name as a string
function bool bcompiler write class	returns true on success or false on failure
function bool bcompiler write class resource $filehandle string $className string $extends	writes a defined class as bytecodes
function bcompiler write exe footer $filehandle	a file handle as returned by fopen()
function bcompiler write exe footer $startpos	the file position at which the bytecodes start and can be obtained using ftell()
function bool bcompiler write exe footer	returns true on success or false on failure
function bool bcompiler write exe footer resource $filehandle int $startpos	writes the start pos and sig to the end of a exe type file
function bcompiler write function $filehandle	a file handle as returned by fopen()
function bcompiler write function $functionName	the function name as a string
function bool bcompiler write function	returns true on success or false on failure
function bool bcompiler write function resource $filehandle string $functionName	writes a defined function as bytecodes
function bcompiler write functions from file $filehandle	a file handle as returned by fopen()
function bcompiler write functions from file $fileName	the file to be compiled
function bool bcompiler write functions from file	returns true on success or false on failure
function bool bcompiler write functions from file resource $filehandle string $fileName	writes all functions defined in a file as bytecodes
function bcompiler write header $filehandle	a file handle as returned by fopen()
function bcompiler write header $write_ver	can be used to write bytecode in a previously used format so that you can use it with older versions of bcompiler
function bool bcompiler write header	returns true on success or false on failure
function bool bcompiler write header resource $filehandle string $write_ver	writes the bcompiler header
function bcpow $left_operand	the left operand as a string
function bcpow $scale	this optional parameter is used to set the number of digits after the decimal place in the result
function bcpow $right_operand	the right operand as a string
function string bcpow	returns the result as a string
function string bcpow string $left_operand string $right_operand int $scale	raise an arbitrary precision number to another
function bcscale $scale	the scale factor
function bool bcscale	returns true on success or false on failure
function bool bcscale int $scale	set default scale parameter for all bc math functions
function bcsqrt $operand	the operand as a string
function bcsqrt $scale	this optional parameter is used to set the number of digits after the decimal place in the result
function string bcsqrt	returns the square root as a string or null if operand is negative
function string bcsqrt string $operand int $scale	get the square root of an arbitrary precision number
function bcsub $left_operand	the left operand as a string
function bcsub $scale	this optional parameter is used to set the number of digits after the decimal place in the result
function bcsub $right_operand	the right operand as a string
function string bcsub	the result of the subtraction as a string
function string bcsub string $left_operand string $right_operand int $scale	subtract one arbitrary precision number from another
function bind textdomain codeset $codeset	the code set
function bind textdomain codeset $domain	the domain
function string bind textdomain codeset	a string on success
function string bind textdomain codeset string $domain string $codeset	specify the character encoding in which the messages from the domain message catalog will be returned
function bindec $binary_string	the binary string to convert
function number bindec	the decimal value of binary_string
function number bindec string $binary_string	binary to decimal
function boolval $var	the scalar value being converted to a boolean
function boolean boolval	the boolean value of var
function boolean boolval mixed $var	get the boolean value of a variable
function bson decode $bson	the bson to be deserialized
function array bson decode	returns the deserialized bson object
function array bson decode string $bson	deserializes a bson object into a php array
function bson encode $anything	the variable to be serialized
function string bson encode	returns the serialized string
function string bson encode mixed $anything	serializes a php variable into a bson string
function bzclose $bz	the file pointer
function int bzclose	returns true on success or false on failure
function int bzclose resource $bz	close a bzip2 file
function bzcompress $blocksize	specifies the blocksize used during compression and should be a number from 1 to 9 with 9 giving the best compression but using more resources to do so
function bzcompress $workfactor	controls how the compression phase behaves when presented with worst case highly repetitive input data
function bzcompress $source	the string to compress
function mixed bzcompress	the compressed string or an error number if an error occurred
function mixed bzcompress string $source int $blocksize int $workfactor	compress a string into bzip2 encoded data
function bzerror $bz	the file pointer
function array bzerror	returns an associative array with the error code in the errno entry and the error message in the errstr entry
function array bzerror resource $bz	returns the bzip2 error number and error string in an array
function bzerrstr $bz	the file pointer
function string bzerrstr	returns a string containing the error message
function string bzerrstr resource $bz	returns a bzip2 error string
function bzflush $bz	the file pointer
function bool bzflush	returns true on success or false on failure
function bool bzflush resource $bz	force a write of all buffered data
function bzwrite $length	if supplied writing will stop after length uncompressed bytes have been written or the end of data is reached whichever comes first
function bzwrite $data	the written data
function bzwrite $bz	the file pointer
function int bzwrite	returns the number of bytes written or false on error
function int bzwrite resource $bz string $data int $length	binary safe bzip2 file write
function cal days in month $month	month in the selected calendar
function cal days in month $year	year in the selected calendar
function cal days in month $calendar	calendar to use for calculation
function int cal days in month	the length in days of the selected month in the given calendar
function int cal days in month int $calendar int $month int $year	return the number of days in a month for a given year and calendar
function cal from jd $calendar	calendar to convert to
function cal from jd $jd	julian day as integer
function array cal from jd	returns an array containing calendar information like month day year day of week abbreviated and full names of weekday and month and the date in string form month / day / year
function array cal from jd int $jd int $calendar	converts from julian day count to a supported calendar
function cal info $calendar	calendar to return information for
function array cal info int $calendar	returns information about a particular calendar
function cal to jd $calendar	calendar to convert from one of cal_gregorian cal_julian cal_jewish or cal_french
function cal to jd $month	the month as a number the valid range depends on the calendar
function cal to jd $year	the year as a number the valid range depends on the calendar
function cal to jd $day	the day as a number the valid range depends on the calendar
function int cal to jd	a julian day number
function int cal to jd int $calendar int $month int $day int $year	converts from a supported calendar to julian day count
function call user func $callback	the callable to be called
function call user func $parameter	zero or more parameters to be passed to the callback
function mixed call user func	returns the return value of the callback or false on error
function mixed call user func callable $callback mixed $parameter	call the callback given by the first parameter
function chdb create $pathname	the name of the file to create
function chdb create $data	an array containing the key-value pairs to store in the chdb file
function bool chdb create	returns true on success or false on failure
function bool chdb create string $pathname array $data	creates a chdb file
function chdir $directory	the new current directory
function bool chdir	returns true on success or false on failure
function bool chdir string $directory	change directory
function checkdate $day	the day is within the allowed number of days for the given month
function checkdate $year	the year is between 1 and 32767 inclusive
function checkdate $month	the month is between 1 and 12 inclusive
function bool checkdate	returns true if the date given is valid; otherwise returns false
function bool checkdate int $month int $day int $year	validate a gregorian date
function chgrp $group	a group name or number
function chgrp $filename	path to the file
function bool chgrp	returns true on success or false on failure
function bool chgrp string $filename mixed $group	changes file group
function chmod $mode	note that mode is not automatically assumed to be an octal value so to ensure the expected operation you need to prefix mode with a zero 0
function chmod $filename	path to the file
function bool chmod	returns true on success or false on failure
function bool chmod string $filename int $mode	changes file mode
function chown $user	a user name or number
function chown $filename	path to the file
function bool chown	returns true on success or false on failure
function bool chown string $filename mixed $user	changes file owner
function chunk split $end	the line ending sequence
function chunk split $chunklen	the chunk length
function chunk split $body	the string to be chunked
function string chunk split	returns the chunked string
function string chunk split string $body int $chunklen string $end	split a string into smaller chunks
function class alias $original	the original class
function class alias $alias	the alias name for the class
function class alias $autoload	whether to autoload if the original class is not found
function bool class alias	returns true on success or false on failure
function bool class alias string $original string $alias bool $autoload	creates an alias for a class
function class parents $autoload	whether to allow this function to load the class automatically through the __autoload() magic method
function class parents $class	an object class instance or a string class name
function array class parents	an array on success or false on error
function array class parents mixed $class bool $autoload	return the parent classes of the given class
function class uses $autoload	whether to allow this function to load the class automatically through the __autoload() magic method
function class uses $class	an object class instance or a string class name
function array class uses	an array on success or false on error
function array class uses mixed $class bool $autoload	return the traits used by the given class
function clearstatcache $filename	clear the realpath and the stat cache for a specific filename only; only used if clear_realpath_cache is true
function clearstatcache $clear_realpath_cache	whether to clear the realpath cache or not
function void clearstatcache bool $clear_realpath_cache string $filename	clears file status cache
function cli set process title $title	the new title
function bool cli set process title	returns true on success or false on failure
function bool cli set process title string $title	sets the process title
function closedir $dir_handle	the directory handle resource previously opened with opendir()
function void closedir resource $dir_handle	close directory handle
function bool closelog	returns true on success or false on failure
function bool closelog	close connection to system logger
function string com create guid	returns the guid as a string
function string com create guid	generate a globally unique identifier guid
function com event sink $sinkinterface	php will attempt to use the default dispinterface type specified by the typelibrary associated with comobject but you may override this choice by setting sinkinterface to the name of the dispinterface that you want to use
function com event sink $sinkobject	sinkobject should be an instance of a class with methods named after those of the desired dispinterface; you may use com_print_typeinfo() to help generate a template class for this purpose
function bool com event sink	returns true on success or false on failure
function bool com event sink variant $comobject object $sinkobject mixed $sinkinterface	connect events from a com object to a php object
function com get active object $progid	progid must be either the progid or clsid for the object that you want to access for example word
function com get active object $code_page	acts in precisely the same way that it does for the com class
function variant com get active object	if the requested object is running it will be returned to your script just like any other com object
function variant com get active object string $progid int $code_page	returns a handle to an already running instance of a com object
function int connection aborted	returns 1 if client disconnected 0 otherwise
function int connection aborted	check whether client disconnected
function int connection status	returns the connection status bitfield which can be used against the connection_xxx constants to determine the connection status
function int connection status	returns connection status bitfield
function count chars $mode	see return values
function count chars $string	the examined string
function mixed count chars	depending on mode count_chars() returns one of the following: 0 - an array with the byte-value as key and the frequency of every byte as value
function mixed count chars string $string int $mode	return information about characters used in a string
function count $mode	if the optional mode parameter is set to count_recursive or 1 count() will recursively count the array
function count $array_or_countable	an array or countable object
function int count	returns the number of elements in array_or_countable
function int count mixed $array_or_countable int $mode	count all elements in an array or something in an object
function crack check $dictionary	the crack lib dictionary
function crack check $gecos	the gecos information associated with the user account
function crack check $password	the password to be checked
function crack check $username	the username of the account with the password
function bool crack check	returns true if password is strong or false otherwise
function bool crack check resource $dictionary string $password	performs an obscure check with the given password
function crack closedict $dictionary	the dictionary to close
function bool crack closedict	returns true on success or false on failure
function bool crack closedict resource $dictionary	closes an open cracklib dictionary
function create function $args	the function arguments
function create function $code	the function code
function string create function	returns a unique function name as a string or false on error
function string create function string $args string $code	create an anonymous lambda-style function
function crypt $str	the string to be hashed
function crypt $salt	an optional salt string to base the hashing on
function string crypt	returns the hashed string or a string that is shorter than 13 characters and is guaranteed to differ from the salt on failure
function string crypt string $str string $salt	one-way string hashing
function ctype alnum $text	the tested string
function bool ctype alnum	returns true if every character in text is either a letter or a digit false otherwise
function bool ctype alnum string $text	check for alphanumeric character s
function ctype alpha $text	the tested string
function bool ctype alpha	returns true if every character in text is a letter from the current locale false otherwise
function bool ctype alpha string $text	check for alphabetic character s
function ctype cntrl $text	the tested string
function bool ctype cntrl	returns true if every character in text is a control character from the current locale false otherwise
function bool ctype cntrl string $text	check for control character s
function ctype digit $text	the tested string
function bool ctype digit	returns true if every character in the string text is a decimal digit false otherwise
function bool ctype digit string $text	check for numeric character s
function ctype graph $text	the tested string
function bool ctype graph	returns true if every character in text is printable and actually creates visible output no white space false otherwise
function bool ctype graph string $text	check for any printable character s except space
function ctype lower $text	the tested string
function bool ctype lower	returns true if every character in text is a lowercase letter in the current locale
function bool ctype lower string $text	check for lowercase character s
function ctype print $text	the tested string
function bool ctype print	returns true if every character in text will actually create output including blanks
function bool ctype print string $text	check for printable character s
function ctype upper $text	the tested string
function bool ctype upper	returns true if every character in text is an uppercase letter in the current locale
function bool ctype upper string $text	check for uppercase character s
function ctype xdigit $text	the tested string
function bool ctype xdigit	returns true if every character in text is a hexadecimal digit that is a decimal digit or a character from a-fa-f false otherwise
function bool ctype xdigit string $text	check for character s representing a hexadecimal digit
function cubrid affected rows $req_identifier	request identifier could be returned from either cubrid_prepare() or cubrid_execute()
function cubrid affected rows $conn_identifier	the cubrid connection
function int cubrid affected rows	number of rows affected by the sql statement when process is successful
function int cubrid affected rows resource $conn_identifier	return the number of rows affected by the last sql statement
function cubrid close prepare $req_identifier	request identifier
function bool cubrid close prepare	return true on success
function bool cubrid close prepare resource $req_identifier	close the request handle
function cubrid close request $req_identifier	request identifier
function bool cubrid close request	return true on success
function bool cubrid close request resource $req_identifier	close the request handle
function cubrid col get $conn_identifier	connection identifier
function cubrid col get $oid	oid of the instance that you want to read
function cubrid col get $attr_name	attribute name that you want to read from the instance
function array cubrid col get	array 0-based numerical array containing the elements you requested when process is successful;
function array cubrid col get resource $conn_identifier string $oid string $attr_name	get contents of collection type column using oid
function cubrid col size $conn_identifier	connection identifier
function cubrid col size $attr_name	name of the attribute that you want to work with
function cubrid col size $oid	oid the instance that you want to work with
function int cubrid col size	number of elements when process is successful
function int cubrid col size resource $conn_identifier string $oid string $attr_name	get the number of elements in collection type column using oid
function cubrid column names $req_identifier	request identifier
function array cubrid column names	array of string values containing the column names when process is successful
function array cubrid column names resource $req_identifier	get the column names in result
function cubrid column types $req_identifier	request identifier
function array cubrid column types	array of string values containing the column names when process is successful
function array cubrid column types resource $req_identifier	get column types in result
function cubrid commit $conn_identifier	connection identifier
function bool cubrid commit	true when process is successful
function bool cubrid commit resource $conn_identifier	commit a transaction
function cubrid connect with url $passwd	user password
function cubrid connect with url $conn_url	a character string that contains server connection information
function cubrid connect with url $userid	user name for the database
function cubrid connect with url $new_link	if a second call is made to cubrid_connect_with_url() with the same arguments no new connection will be established but instead the connection identifier of the already opened connection will be returned
function resource cubrid connect with url	connection identifier when process is successful
function resource cubrid connect with url string $conn_url string $userid string $passwd bool $new_link	establish the environment for connecting to cubrid server
function cubrid connect $new_link	if a second call is made to cubrid_connect() with the same arguments no new connection will be established but instead the connection identifier of the already opened connection will be returned
function cubrid connect $dbname	name of database
function cubrid connect $port	port number of cubrid cas server broker_port configured in $cubrid / conf / cubrid_broker
function cubrid connect $host	host name or ip address of cubrid cas server
function cubrid connect $passwd	user password
function cubrid connect $userid	user name for the database
function resource cubrid connect	connection identifier when process is successful
function resource cubrid connect string $host int $port string $dbname string $userid string $passwd bool $new_link	open a connection to a cubrid server
function cubrid current oid $req_identifier	request identifier
function string cubrid current oid	oid of current cursor location when process is successful
function string cubrid current oid resource $req_identifier	get oid of the current cursor location
function cubrid db name $result	the result pointer from a call to cubrid_list_dbs()
function cubrid db name $index	the index into the result set
function string cubrid db name	returns the database name on success and false on failure
function string cubrid db name array $result int $index	get db name from results of cubrid_list_dbs
function cubrid drop $conn_identifier	connection identifier
function cubrid drop $oid	oid of the instance that you want to delete
function bool cubrid drop	true when process is successful
function bool cubrid drop resource $conn_identifier string $oid	delete an instance using oid
function int cubrid error code	error code of the error that occurred or 0 zero if no error occurred
function int cubrid error code	get error code for the most recent function call
function cubrid execute $conn_identifier	connection identifier
function cubrid execute $option	query execution option cubrid_include_oid cubrid_async cubrid_exec_query_all
function cubrid execute $sql	sql to be executed
function cubrid execute $request_identifier	cubrid_prepare() identifier
function resource cubrid execute	request identifier when process is successful and first param is conn_identifier; true when process is successful and first argument is request_identifier
function resource cubrid execute resource $conn_identifier string $sql int $option	execute a prepared sql statement
function cubrid fetch array $result	result comes from a call to cubrid_execute()
function cubrid fetch array $type	array type of the fetched result cubrid_num cubrid_assoc cubrid_both
function array cubrid fetch array	returns an array of strings that corresponds to the fetched row when process is successful
function array cubrid fetch array resource $result int $type	fetch a result row as an associative array a numeric array or both
function cubrid fetch assoc $type	type can only be cubrid_lob this parameter will be used only when you need to operate the lob object
function cubrid fetch assoc $result	result comes from a call to cubrid_execute()
function array cubrid fetch assoc	associative array when process is successful
function array cubrid fetch assoc resource $result int $type	return the associative array that corresponds to the fetched row
function cubrid fetch lengths $result	result comes from a call to cubrid_execute()
function array cubrid fetch lengths	an numeric array when process is successful
function array cubrid fetch lengths resource $result	return an array with the lengths of the values of each field from the current row
function cubrid fetch object $type	type can only be cubrid_lob this parameter will be used only when you need to operate the lob object
function cubrid fetch object $result	result comes from a call to cubrid_execute()
function cubrid fetch object $params	an optional array of parameters to pass to the constructor for class_name objects
function cubrid fetch object $class_name	the name of the class to instantiate
function object cubrid fetch object	an object when process is successful
function object cubrid fetch object resource $result string $class_name array $params int $type	fetche the next row and returns it as an object
function cubrid fetch row $type	type can only be cubrid_lob this parameter will be used only when you need to operate the lob object
function cubrid fetch row $result	result comes from a call to cubrid_execute()
function array cubrid fetch row	a numerical array when process is successful
function array cubrid fetch row resource $result int $type	return a numerical array with the values of the current row
function cubrid fetch $result	result comes from a call to cubrid_execute()
function cubrid fetch $type	array type of the fetched result cubrid_num cubrid_assoc cubrid_both cubrid_object
function mixed cubrid fetch	result array or object when process is successful
function mixed cubrid fetch resource $result int $type	fetch the next row from a result set
function cubrid field len $result	result comes from a call to cubrid_execute()
function cubrid field len $field_offset	the numerical field offset
function int cubrid field len	maximum length when process is successful
function int cubrid field len resource $result int $field_offset	get the maximum length of the specified field
function cubrid field seek $result	result comes from a call to cubrid_execute()
function cubrid field seek $field_offset	the numerical field offset
function bool cubrid field seek	true on success
function bool cubrid field seek resource $result int $field_offset	move the result set cursor to the specified field offset
function cubrid field table $field_offset	the numerical field offset
function cubrid field table $result	array type of the fetched result cubrid_num cubrid_assoc cubrid_both
function string cubrid field table	name of the table of the specified field on success
function string cubrid field table resource $result int $field_offset	return the name of the table of the specified field
function cubrid field type $field_offset	the numerical field offset
function cubrid field type $result	array type of the fetched result cubrid_num cubrid_assoc cubrid_both
function string cubrid field type	type of the column on success
function string cubrid field type resource $result int $field_offset	return the type of the column corresponding to the given field offset
function cubrid get autocommit $conn_identifier	connection identifier
function bool cubrid get autocommit	true when auto-commit is on
function bool cubrid get autocommit resource $conn_identifier	get auto-commit mode of the connection
function string cubrid get client info	a string that represents the client library version; on success
function string cubrid get client info	return the client library version
function cubrid get db parameter $conn_identifier	the cubrid connection
function array cubrid get db parameter	an associative array with cubrid database parameters; on success
function array cubrid get db parameter resource $conn_identifier	returns the cubrid database parameters
function cubrid get query timeout $req_identifier	request identifier
function int cubrid get query timeout	success: the query timeout value of the current request
function int cubrid get query timeout resource $req_identifier	get the query timeout value of the request
function cubrid insert id $conn_identifier	the connection identifier previously obtained by a call to cubrid_connect()
function string cubrid insert id	a string representing the id generated for an auto_increment column by the previous query on success
function string cubrid insert id resource $conn_identifier	return the id generated for the last updated auto_increment column
function cubrid list dbs $conn_identifier	the cubrid connection
function array cubrid list dbs	an numeric array with all existing cubrid databases; on success
function array cubrid list dbs resource $conn_identifier	return an array with the list of all existing cubrid databases
function cubrid load from glo $conn_identifier	connection identifier
function cubrid load from glo $oid	oid of the glo instance that you want to read the data from
function cubrid load from glo $file_name	name of the file where you want to save the data in
function int cubrid load from glo	true when process is successful
function int cubrid load from glo resource $conn_identifier string $oid string $file_name	read data from a glo instance and save it in a file
function cubrid lob close $lob_identifier_array	lob identifier array return from cubrid_lob_get
function bool cubrid lob close	true when process is successful
function bool cubrid lob close array $lob_identifier_array	close blob / clob data
function cubrid lob export $conn_identifier	connection identifier
function cubrid lob export $lob_identifier	lob identifier
function cubrid lob export $path_name	path name of the file
function bool cubrid lob export	true when process is successful
function bool cubrid lob export resource $conn_identifier resource $lob_identifier string $path_name	export blob / clob data to file
function cubrid lob get $conn_identifier	connection identifier
function cubrid lob get $sql	sql statement to be executed
function array cubrid lob get	return an array of lob resources when process is successful
function array cubrid lob get resource $conn_identifier string $sql	get blob / clob data
function cubrid lob send $conn_identifier	connection identifier
function cubrid lob send $lob_identifier	lob identifier
function bool cubrid lob send	true when process is successful
function bool cubrid lob send resource $conn_identifier resource $lob_identifier	read blob / clob data and send straight to browser
function cubrid lob size $lob_identifier	lob identifier
function string cubrid lob size	a string representing lob data size when process is successful
function string cubrid lob size resource $lob_identifier	get blob / clob data size
function cubrid lob2 import $lob_identifier	lob identifier as a result of cubrid_lob2_new() or get from the result set
function cubrid lob2 import $filename	file name you want to import blob / clob data
function bool cubrid lob2 import	true if the process is successful and false for failure
function bool cubrid lob2 import resource $lob_identifier string $file_name	import blob / clob data from a file
function cubrid lob2 new $conn_identifier	connection identifier
function cubrid lob2 new $type	it may be blob or clob it wont be case-sensitive
function resource cubrid lob2 new	lob identifier when it is successful
function resource cubrid lob2 new resource $conn_identifier string $type	create a lob object
function cubrid lob2 seek $offset	number of units you want to move the cursor
function cubrid lob2 seek $origin	this parameter can be the following values: cubrid_cursor_first: move forward from the first beginning
function cubrid lob2 seek $lob_identifier	lob identifier as a result of cubrid_lob2_new() or get from the result set
function bool cubrid lob2 seek	true if the process is successful and false for failure
function bool cubrid lob2 seek resource $lob_identifier int $offset int $origin	move the cursor of a lob object
function cubrid lob2 seek64 $offset	number of units you want to move the cursor
function cubrid lob2 seek64 $origin	this parameter can be the following values: cubrid_cursor_first: move forward from the first beginning
function cubrid lob2 seek64 $lob_identifier	lob identifier as a result of cubrid_lob2_new() or get from the result set
function bool cubrid lob2 seek64	true if the process is successful and false for failure
function bool cubrid lob2 seek64 resource $lob_identifier string $offset int $origin	move the cursor of a lob object
function cubrid lob2 size $lob_identifier	lob identifier as a result of cubrid_lob2_new() or get from the result set
function int cubrid lob2 size	it will return the size of the lob object when it processes successfully
function int cubrid lob2 size resource $lob_identifier	get a lob object's size
function cubrid lob2 size64 $lob_identifier	lob identifier as a result of cubrid_lob2_new() or get from the result set
function string cubrid lob2 size64	it will return the size of the lob object as a string when it processes successfully
function string cubrid lob2 size64 resource $lob_identifier	get a lob object's size
function cubrid lob2 tell $lob_identifier	lob identifier as a result of cubrid_lob2_new() or get from the result set
function int cubrid lob2 tell	it will return the cursor position on the lob object when it processes successfully
function int cubrid lob2 tell resource $lob_identifier	tell the cursor position of the lob object
function cubrid lob2 tell64 $lob_identifier	lob identifier as a result of cubrid_lob2_new() or get from the result set
function string cubrid lob2 tell64	it will return the cursor position on the lob object as a string when it processes successfully
function string cubrid lob2 tell64 resource $lob_identifier	tell the cursor position of the lob object
function cubrid lob2 write $lob_identifier	lob identifier as a result of cubrid_lob2_new() or get from the result set
function cubrid lob2 write $buf	data that need to be written to the lob object
function bool cubrid lob2 write	true if the process is successful and false for failure
function bool cubrid lob2 write resource $lob_identifier string $buf	write to a lob object
function cubrid lock read $conn_identifier	connection identifier
function cubrid lock read $oid	oid of the instance that you want to put read lock on
function bool cubrid lock read	true when process is successful
function bool cubrid lock read resource $conn_identifier string $oid	set a read lock on the given oid
function cubrid lock write $conn_identifier	connection identifier
function cubrid lock write $oid	oid of the instance that you want to put write lock on
function bool cubrid lock write	true when process is successful
function bool cubrid lock write resource $conn_identifier string $oid	set a write lock on the given oid
function cubrid new glo $conn_identifier	connection identifier
function cubrid new glo $class_name	name of the class that you want to create a glo in
function cubrid new glo $file_name	the file name that you want to save in the newly created glo
function string cubrid new glo	oid of the instance created when process is successful
function string cubrid new glo resource $conn_identifier string $class_name string $file_name	create a glo instance
function cubrid next result $result	result comes from a call to cubrid_execute()
function bool cubrid next result	true when process is successful
function bool cubrid next result resource $result	get result of next query when executing multiple sql statements
function cubrid num fields $result	result comes from a call to cubrid_execute() cubrid_query() and cubrid_prepare()
function int cubrid num fields	number of columns on success
function int cubrid num fields resource $result	return the number of columns in the result set
function cubrid pconnect with url $passwd	user password
function cubrid pconnect with url $conn_url	a character string that contains server connection information
function cubrid pconnect with url $userid	user name for the database
function resource cubrid pconnect with url	connection identifier when process is successful
function resource cubrid pconnect with url string $conn_url string $userid string $passwd	open a persistent connection to cubrid server
function cubrid pconnect $passwd	user password
function cubrid pconnect $port	port number of cubrid cas server broker_port configured in $cubrid / conf / cubrid_broker
function cubrid pconnect $userid	user name for the database
function cubrid pconnect $host	host name or ip address of cubrid cas server
function cubrid pconnect $dbname	name of database
function resource cubrid pconnect	connection identifier when process is successful
function resource cubrid pconnect string $host int $port string $dbname string $userid string $passwd	open a persistent connection to a cubrid server
function cubrid ping $conn_identifier	the cubrid connection identifier
function bool cubrid ping	returns true if the connection to the server cubrid server is working otherwise false
function bool cubrid ping resource $conn_identifier	ping a server connection or reconnect if there is no connection
function cubrid query $query	an sql query data inside the query should be properly escaped
function cubrid query $conn_identifier	the cubrid connection
function resource cubrid query	for select show describe explain and other statements returning resultset cubrid_query() returns a resource on success or false on error
function resource cubrid query string $query resource $conn_identifier	send a cubrid query
function cubrid result $result	result comes from a call to cubrid_execute()
function cubrid result $field	the name or offset of the field being retrieved
function cubrid result $row	the row number from the result that is being retrieved
function string cubrid result	value of a specific field on success null if value if null
function string cubrid result resource $result int $row mixed $field	return the value of a specific field in a specific row
function cubrid schema $conn_identifier	connection identifier
function cubrid schema $attr_name	attribute you want to know the schema of
function cubrid schema $class_name	class you want to know the schema of
function cubrid schema $schema_type	schema data that you want to know
function array cubrid schema	array containing the schema information when process is successful;
function array cubrid schema resource $conn_identifier int $schema_type string $class_name string $attr_name	get the requested schema information
function cubrid seq drop $conn_identifier	connection identifier
function cubrid seq drop $index	index of the element that you want to delete 1-based
function cubrid seq drop $oid	oid of the instance you want to work with
function cubrid seq drop $attr_name	name of the attribute that you want to delete an element from
function bool cubrid seq drop	true when process is successful
function bool cubrid seq drop resource $conn_identifier string $oid string $attr_name int $index	delete an element from sequence type column using oid
function cubrid seq insert $conn_identifier	connection identifier
function cubrid seq insert $attr_name	name of the attribute you want to insert an instance to
function cubrid seq insert $index	location of the element you want to insert the element to 1-based
function cubrid seq insert $oid	oid of the instance you want to work with
function cubrid seq insert $seq_element	content of the element that you want to insert
function bool cubrid seq insert	true when process is successful
function bool cubrid seq insert resource $conn_identifier string $oid string $attr_name int $index string $seq_element	insert an element to a sequence type column using oid
function cubrid seq put $conn_identifier	connection identifier
function cubrid seq put $index	index 1-based of the element that you want to update
function cubrid seq put $attr_name	name of the attribute that you want to update an element
function cubrid seq put $oid	oid of the instance you want to work with
function cubrid seq put $seq_element	new content that you want to use for the update
function bool cubrid seq put	true when process is successful
function bool cubrid seq put resource $conn_identifier string $oid string $attr_name int $index string $seq_element	update the element value of sequence type column using oid
function cubrid set db parameter $param_value	isolation level value 1-6 or lock timeout in seconds value
function cubrid set db parameter $param_type	database parameter type
function cubrid set db parameter $conn_identifier	the cubrid connection
function bool cubrid set db parameter	true on success
function bool cubrid set db parameter resource $conn_identifier int $param_type int $param_value	sets the cubrid database parameters
function cubrid set drop $conn_identifier	connection identifier
function cubrid set drop $attr_name	name of the attribute you want to delete an element from
function cubrid set drop $oid	oid of the instance you want to work with
function cubrid set drop $set_element	content of the element you want to delete
function bool cubrid set drop	true when process is successful
function bool cubrid set drop resource $conn_identifier string $oid string $attr_name string $set_element	delete an element from set type column using oid
function cubrid unbuffered query $query	a sql query
function cubrid unbuffered query $conn_identifier	the cubrid connection
function resource cubrid unbuffered query	for select show describe or explain statements returns a request identifier resource on success
function resource cubrid unbuffered query string $query resource $conn_identifier	perform a query without fetching the results into memory
function string cubrid version	version information eg
function string cubrid version	get the cubrid php module's version
function curl close $ch	a curl handle returned by curl_init()
function void curl close resource $ch	close a curl session
function curl copy handle $ch	a curl handle returned by curl_init()
function resource curl copy handle	returns a new curl handle
function resource curl copy handle resource $ch	copy a curl handle along with all of its preferences
function curl escape $str	the string to be encoded
function curl escape $ch	a curl handle returned by curl_init()
function string curl escape	returns escaped string or false on failure
function string curl escape resource $ch string $str	url encodes the given string
function curl getinfo $ch	a curl handle returned by curl_init()
function mixed curl getinfo	if opt is given returns its value
function mixed curl getinfo resource $ch int $opt	get information regarding a specific transfer
function curl multi add handle $mh	a curl multi handle returned by curl_multi_init()
function curl multi add handle $ch	a curl handle returned by curl_init()
function int curl multi add handle	returns 0 on success or one of the curlm_xxx errors code
function int curl multi add handle resource $mh resource $ch	add a normal curl handle to a curl multi handle
function curl multi close $mh	a curl multi handle returned by curl_multi_init()
function void curl multi close resource $mh	close a set of curl handles
function curl multi getcontent $ch	a curl handle returned by curl_init()
function string curl multi getcontent	return the content of a curl handle if curlopt_returntransfer is set
function string curl multi getcontent resource $ch	return the content of a curl handle if curlopt_returntransfer is set
function curl multi info read $mh	a curl multi handle returned by curl_multi_init()
function curl multi info read $msgs_in_queue	number of messages that are still in the queue
function array curl multi info read	on success returns an associative array for the message false on failure
function array curl multi info read resource $mh int $msgs_in_queue	get information about the current transfers
function resource curl multi init	returns a curl multi handle resource on success false on failure
function resource curl multi init	returns a new curl multi handle
function curl multi select $mh	a curl multi handle returned by curl_multi_init()
function curl multi select $timeout	time in seconds to wait for a response
function int curl multi select	on success returns the number of descriptors contained in the descriptor sets
function int curl multi select resource $mh float $timeout	wait for activity on any curl_multi connection
function curl multi strerror $errornum	one of the curlm error codes constants
function string curl multi strerror	returns error string for valid error code null otherwise
function string curl multi strerror int $errornum	return string describing error code
function curl reset $ch	a curl handle returned by curl_init()
function void curl reset resource $ch	reset all options of a libcurl session handle
function curl setopt array $options	an array specifying which options to set and their values
function curl setopt array $ch	a curl handle returned by curl_init()
function bool curl setopt array	returns true if all options were successfully set
function bool curl setopt array resource $ch array $options	set multiple options for a curl transfer
function curl share close $sh	a curl share handle returned by curl_share_init()
function void curl share close resource $sh	close a curl share handle
function resource curl share init	returns resource of type curl share handle
function resource curl share init	initialize a curl share handle
function curl share setopt $value	value description curl_lock_data_cookie shares cookie data
function curl share setopt $sh	a curl share handle returned by curl_share_init()
function curl share setopt $option	option description curlshopt_share specifies a type of data that should be shared
function bool curl share setopt	returns true on success or false on failure
function bool curl share setopt resource $sh int $option string $value	set an option for a curl share handle
function array curl version int $age	gets curl version information
function current $array	the array
function mixed current	the current() function simply returns the value of the array element thats currently being pointed to by the internal pointer
function mixed current array $array	return the current element in an array
function cyrus bind $connection	the connection handle
function cyrus bind $callbacks	an array of callbacks
function bool cyrus bind	returns true on success or false on failure
function bool cyrus bind resource $connection array $callbacks	bind callbacks to a cyrus imap connection
function cyrus close $connection	the connection handle
function bool cyrus close	returns true on success or false on failure
function bool cyrus close resource $connection	close connection to a cyrus imap server
function cyrus connect $host	the cyrus imap host name
function cyrus connect $port	the port number
function resource cyrus connect	returns a connection handler on success or false on failure
function resource cyrus connect string $host string $port int $flags	connect to a cyrus imap server
function cyrus query $query	the query string
function cyrus query $connection	the connection handle
function array cyrus query	returns an associative array with the following keys: text msgno and keyword
function array cyrus query resource $connection string $query	send a query to a cyrus imap server
function string date default timezone get	returns a string
function string date default timezone get	gets the default timezone used by all date / time functions in a script
function date default timezone set $timezone_identifier	the timezone identifier like utc or europe / lisbon
function bool date default timezone set	this function returns false if the timezone_identifier isnt valid or true otherwise
function bool date default timezone set string $timezone_identifier	sets the default timezone used by all date / time functions in a script
function date sunrise $zenith	default: date
function date sunrise $gmtoffset	specified in hours
function date sunrise $latitude	defaults to north pass in a negative value for south
function date sunrise $timestamp	the timestamp of the day from which the sunrise time is taken
function date sunrise $format	format constants constant description example sunfuncs_ret_string returns the result as string 16:46 sunfuncs_ret_double returns the result as float 16
function date sunrise $longitude	defaults to east pass in a negative value for west
function mixed date sunrise	returns the sunrise time in a specified format on success or false on failure
function mixed date sunrise int $timestamp int $format float $latitude float $longitude float $zenith float $gmt_offset	returns time of sunrise for a given day and location
function date sunset $zenith	default: date
function date sunset $gmtoffset	specified in hours
function date sunset $latitude	defaults to north pass in a negative value for south
function date sunset $format	format constants constant description example sunfuncs_ret_string returns the result as string 16:46 sunfuncs_ret_double returns the result as float 16
function date sunset $timestamp	the timestamp of the day from which the sunset time is taken
function date sunset $longitude	defaults to east pass in a negative value for west
function mixed date sunset	returns the sunset time in a specified format on success or false on failure
function mixed date sunset int $timestamp int $format float $latitude float $longitude float $zenith float $gmt_offset	returns time of sunset for a given day and location
function date $timestamp	the optional timestamp parameter is an integer unix timestamp that defaults to the current local time if a timestamp is not given
function date $format	the format of the outputted date string
function string date	returns a formatted date string
function string date string $format int $timestamp	format a local time / date
function db2 autocommit $DB2_AUTOCOMMIT_OFF	turns autocommit off
function db2 autocommit $connection	a valid database connection resource variable as returned from db2_connect() or db2_pconnect()
function db2 autocommit $value	one of the following constants: db2_autocommit_off turns autocommit off
function db2 autocommit $DB2_AUTOCOMMIT_ON	turns autocommit on
function mixed db2 autocommit	when db2_autocommit() receives only the connection parameter it returns the current state of autocommit for the requested connection as an integer value
function mixed db2 autocommit resource $connection bool $value	returns or sets the autocommit state for a database connection
function db2 bind param $scale	specifies the scale with which the variable should be bound to the database
function db2 bind param $variable-name	a string specifying the name of the php variable to bind to the parameter specified by parameter-number
function db2 bind param $parameter-type	a constant specifying whether the php variable should be bound to the sql parameter as an input parameter db2_param_in an output parameter db2_param_out or as a parameter that accepts input and returns output db2_param_inout
function db2 bind param $precision	specifies the precision with which the variable should be bound to the database
function db2 bind param $stmt	a prepared statement returned from db2_prepare()
function db2 bind param $data-type	a constant specifying the sql data type that the php variable should be bound as: one of db2_binary db2_char db2_double or db2_long
function db2 bind param $parameter-number	specifies the 1-indexed position of the parameter in the prepared statement
function bool db2 bind param	returns true on success or false on failure
function bool db2 bind param resource $stmt int $parameter-number string $variable-name int $parameter-type int $data-type int $precision int $scale	binds a php variable to an sql statement parameter
function db2 close $connection	specifies an active db2 client connection
function bool db2 close	returns true on success or false on failure
function bool db2 close resource $connection	closes a database connection
function db2 column privileges $table-name	the name of the table or view
function db2 column privileges $qualifier	a qualifier for db2 databases running on os / 390 or z / os servers
function db2 column privileges $connection	a valid connection to an ibm db2 cloudscape or apache derby database
function db2 column privileges $schema	the schema which contains the tables
function db2 column privileges $column-name	the name of the column
function resource db2 column privileges	returns a statement resource with a result set containing rows describing the column privileges for columns matching the specified parameters
function db2 commit $connection	a valid database connection resource variable as returned from db2_connect() or db2_pconnect()
function bool db2 commit	returns true on success or false on failure
function bool db2 commit resource $connection	commits a transaction
function db2 conn error $connection	a connection resource associated with a connection that initially succeeded but which over time became invalid
function string db2 conn error	returns the sqlstate value resulting from a failed connection attempt
function string db2 conn error resource $connection	returns a string containing the sqlstate returned by the last connection attempt
function db2 conn errormsg $connection	a connection resource associated with a connection that initially succeeded but which over time became invalid
function string db2 conn errormsg	returns a string containing the error message and sqlcode value resulting from a failed connection attempt
function string db2 conn errormsg resource $connection	returns the last connection error message and sqlcode value
function db2 connect $i5_libl	a character value that indicates the library list that will be used for resolving unqualified file references
function db2 connect $i5_date_fmt	db2_i5_fmt_iso - the international organization for standardization iso date format yyyy-mm-dd is used
function db2 connect $i5_lib	a character value that indicates the default library that will be used for resolving unqualified file references
function db2 connect $password	the password with which you are connecting to the database
function db2 connect $i5_commit	the i5_commit attribute should be set before the db2_connect()
function db2 connect $username	the username with which you are connecting to the database
function db2 connect $hostname	the hostname or ip address of the database server
function db2 connect $i5_naming	db2_i5_naming_on value turns on db2 udb cli iseries system naming mode
function db2 connect $autocommit	passing the db2_autocommit_on value turns autocommit on for this connection handle
function db2 connect $CURSOR	passing the db2_forward_only value specifies a forward-only cursor for a statement resource
function db2 connect $i5_date_sep	db2_i5_sep_slash - a slash / is used as the date separator
function db2 connect $DB2_ATTR_CASE	passing the db2_case_natural value specifies that column names are returned in natural case
function db2 connect $database	for a cataloged connection to a database database represents the database alias in the db2 client catalog
function db2 connect $i5_time_fmt	db2_i5_fmt_iso - the international organization for standardization iso time format hh
function db2 connect $trustedcontext	passing the db2_trusted_context_enable value turns trusted context on for this connection handle
function db2 connect $database	the name of the database
function db2 connect $i5_dbcs_alloc	db2_i5_dbcs_alloc_on value turns on db2 6x allocation scheme for dbcs translation column size growth
function db2 connect $port	the tcp / ip port on which the database is listening for requests
function db2 connect $i5_time_sep	db2_i5_sep_colon - a colon : is used as the time separator
function db2 connect $i5_decimal_sep	db2_i5_sep_period - a period
function db2 connect $i5_query_optimize	db2_first_io all queries are optimized with the goal of returning the first page of output as fast as possible
function db2 connect $options	an associative array of connection options that affect the behavior of the connection where valid array keys include: autocommit passing the db2_autocommit_on value turns autocommit on for this connection handle
function resource db2 connect	returns a connection handle resource if the connection attempt is successful
function resource db2 connect string $database string $username string $password array $options	returns a connection to a database
function db2 cursor type $stmt	a valid statement resource
function int db2 cursor type	returns either db2_forward_only if the statement resource uses a forward-only cursor or db2_scrollable if the statement resource uses a scrollable cursor
function db2 escape string $string_literal	the string that contains special characters that need to be modified
function string db2 escape string	returns string_literal with the special characters noted above prepended with backslashes
function string db2 escape string string $string_literal	used to escape certain characters
function db2 exec $statement	an sql statement
function db2 exec $connection	a valid database connection resource variable as returned from db2_connect() or db2_pconnect()
function db2 exec $options	an associative array containing statement options
function resource db2 exec	returns a statement resource if the sql statement was issued successfully or false if the database failed to execute the sql statement
function db2 execute $parameters	an array of input parameters matching any parameter markers contained in the prepared statement
function db2 execute $stmt	a prepared statement returned from db2_prepare()
function bool db2 execute	returns true on success or false on failure
function bool db2 execute resource $stmt array $parameters	executes a prepared sql statement
function db2 fetch array $stmt	a valid stmt resource containing a result set
function db2 fetch array $row_number	requests a specific 1-indexed row from the result set
function array db2 fetch array	returns a 0-indexed array with column values indexed by the column position representing the next or requested row in the result set
function db2 fetch assoc $stmt	a valid stmt resource containing a result set
function db2 fetch assoc $row_number	requests a specific 1-indexed row from the result set
function array db2 fetch assoc	returns an associative array with column values indexed by the column name representing the next or requested row in the result set
function db2 fetch both $stmt	a valid stmt resource containing a result set
function db2 fetch both $row_number	requests a specific 1-indexed row from the result set
function array db2 fetch both	returns an associative array with column values indexed by both the column name and 0-indexed column number
function db2 fetch row $row_number	with scrollable cursors you can request a specific row number in the result set
function db2 fetch row $stmt	a valid stmt resource
function bool db2 fetch row	returns true if the requested row exists in the result set
function bool db2 fetch row resource $stmt int $row_number	sets the result set pointer to the next row or requested row
function db2 field display size $stmt	specifies a statement resource containing a result set
function db2 field display size $column	specifies the column in the result set
function int db2 field display size	returns an integer value with the maximum number of bytes required to display the specified column
function int db2 field display size resource $stmt mixed $column	returns the maximum number of bytes required to display a column
function db2 field num $stmt	specifies a statement resource containing a result set
function db2 field num $column	specifies the column in the result set
function int db2 field num	returns an integer containing the 0-indexed position of the named column in the result set
function db2 field precision $stmt	specifies a statement resource containing a result set
function db2 field precision $column	specifies the column in the result set
function int db2 field precision	returns an integer containing the precision of the specified column
function db2 field scale $stmt	specifies a statement resource containing a result set
function db2 field scale $column	specifies the column in the result set
function int db2 field scale	returns an integer containing the scale of the specified column
function db2 field type $stmt	specifies a statement resource containing a result set
function db2 field type $column	specifies the column in the result set
function string db2 field type	returns a string containing the defined data type of the specified column
function db2 field width $stmt	specifies a statement resource containing a result set
function db2 field width $column	specifies the column in the result set
function int db2 field width	returns an integer containing the width of the specified character or binary data type column in a result set
function db2 free result $stmt	a valid statement resource
function bool db2 free result	returns true on success or false on failure
function bool db2 free result resource $stmt	frees resources associated with a result set
function db2 get option $applname	sql_attr_info_applname - a pointer to a null-terminated character string used to identify the client application name sent to the host database server when using db2 connect
function db2 get option $acctstr	sql_attr_info_acctstr - a pointer to a null-terminated character string used to identify the client accounting string sent to the host database server when using db2 connect
function db2 get option $resource	a valid statement resource as returned from db2_prepare() or a valid connection resource as returned from db2_connect() or db2_pconnect()
function db2 get option $userid	sql_attr_info_userid - a pointer to a null-terminated character string used to identify the client user id sent to the host database server when using db2 connect
function db2 get option $option	a valid statement or connection options
function db2 get option $wrkstnname	sql_attr_info_wrkstnname - a pointer to a null-terminated character string used to identify the client workstation name sent to the host database server when using db2 connect
function string db2 get option	returns the current setting of the connection attribute provided on success or false on failure
function string db2 get option resource $resource string $option	retrieves an option value for a statement resource or a connection resource
function db2 last insert id $resource	a valid connection resource as returned from db2_connect() or db2_pconnect()
function string db2 last insert id	returns the auto generated id of last insert query that successfully executed on this connection
function db2 lob read $length	the size of the lob data to be retrieved from the stmt resource
function db2 lob read $stmt	a valid stmt resource containing lob data
function db2 lob read $colnum	a valid column number in the result set of the stmt resource
function string db2 lob read	returns the amount of data the user specifies
function string db2 lob read resource $stmt int $colnum int $length	gets a user defined size of lob files with each invocation
function db2 next result $stmt	a prepared statement returned from db2_exec() or db2_execute()
function resource db2 next result	returns a new statement resource containing the next result set if the stored procedure returned another result set
function resource db2 next result resource $stmt	requests the next result set from a stored procedure
function db2 num fields $stmt	a valid statement resource containing a result set
function int db2 num fields	returns an integer value representing the number of fields in the result set associated with the specified statement resource
function db2 pclose $connection	specifies an active db2 client connection
function bool db2 pclose	returns true on success or false on failure
function bool db2 pclose resource $resource	closes a persistent database connection
function db2 pconnect $CURSOR	passing the db2_forward_only value specifies a forward-only cursor for a statement resource
function db2 pconnect $i5_time_sep	db2_i5_sep_colon - a colon : is used as the time separator
function db2 pconnect $i5_query_optimize	db2_first_io all queries are optimized with the goal of returning the first page of output as fast as possible
function db2 pconnect $i5_date_fmt	db2_i5_fmt_iso - the international organization for standardization iso date format yyyy-mm-dd is used
function db2 pconnect $i5_date_sep	db2_i5_sep_slash - a slash / is used as the date separator
function db2 pconnect $i5_libl	a character value that indicates the library list that will be used for resolving unqualified file references
function db2 pconnect $i5_lib	a character value that indicates the default library that will be used for resolving unqualified file references
function db2 pconnect $trustedcontext	passing the db2_trusted_context_enable value turns trusted context on for this connection handle
function db2 pconnect $i5_dbcs_alloc	db2_i5_dbcs_alloc_on value turns on db2 6x allocation scheme for dbcs translation column size growth
function db2 pconnect $password	the password with which you are connecting to the database
function db2 pconnect $i5_commit	the i5_commit attribute should be set before the db2_pconnect()
function db2 pconnect $i5_time_fmt	db2_i5_fmt_iso - the international organization for standardization iso time format hh
function db2 pconnect $i5_decimal_sep	db2_i5_sep_period - a period
function db2 pconnect $DB2_ATTR_CASE	passing the db2_case_natural value specifies that column names are returned in natural case
function db2 pconnect $username	the username with which you are connecting to the database
function db2 pconnect $database	the database alias in the db2 client catalog
function db2 pconnect $options	an associative array of connection options that affect the behavior of the connection where valid array keys include: autocommit passing the db2_autocommit_on value turns autocommit on for this connection handle
function db2 pconnect $i5_naming	db2_i5_naming_on value turns on db2 udb cli iseries system naming mode
function db2 pconnect $autocommit	passing the db2_autocommit_on value turns autocommit on for this connection handle
function resource db2 pconnect	returns a connection handle resource if the connection attempt is successful
function resource db2 pconnect string $database string $username string $password array $options	returns a persistent connection to a database
function db2 prepare $statement	an sql statement optionally containing one or more parameter markers
function db2 prepare $connection	a valid database connection resource variable as returned from db2_connect() or db2_pconnect()
function db2 prepare $options	an associative array containing statement options
function resource db2 prepare	returns a statement resource if the sql statement was successfully parsed and prepared by the database server
function resource db2 prepare resource $connection string $statement array $options	prepares an sql statement to be executed
function db2 procedure columns $parameter	the name of the parameter
function db2 procedure columns $qualifier	a qualifier for db2 databases running on os / 390 or z / os servers
function db2 procedure columns $connection	a valid connection to an ibm db2 cloudscape or apache derby database
function db2 procedure columns $schema	the schema which contains the procedures
function db2 procedure columns $procedure	the name of the procedure
function resource db2 procedure columns	returns a statement resource with a result set containing rows describing the parameters for the stored procedures matching the specified parameters
function resource db2 procedure columns resource $connection string $qualifier string $schema string $procedure string $parameter	returns a result set listing stored procedure parameters
function db2 rollback $connection	a valid database connection resource variable as returned from db2_connect() or db2_pconnect()
function bool db2 rollback	returns true on success or false on failure
function bool db2 rollback resource $connection	rolls back a transaction
function db2 server info $connection	specifies an active db2 client connection
function object db2 server info	returns an object on a successful call
function object db2 server info resource $connection	returns an object with properties that describe the db2 database server
function db2 special columns $table_name	the name of the table
function db2 special columns $qualifier	a qualifier for db2 databases running on os / 390 or z / os servers
function db2 special columns $connection	a valid connection to an ibm db2 cloudscape or apache derby database
function db2 special columns $schema	the schema which contains the tables
function db2 special columns $scope	integer value representing the minimum duration for which the unique row identifier is valid
function resource db2 special columns	returns a statement resource with a result set containing rows with unique row identifier information for a table
function db2 statistics $qualifier	a qualifier for db2 databases running on os / 390 or z / os servers
function db2 statistics $unique	an integer value representing the type of index information to return
function db2 statistics $connection	a valid connection to an ibm db2 cloudscape or apache derby database
function db2 statistics $1	return the information for all indexes on the table
function db2 statistics $table_name	the name of the table
function db2 statistics $0	return only the information for unique indexes on the table
function db2 statistics $schema	the schema that contains the targeted table
function resource db2 statistics	returns a statement resource with a result set containing rows describing the statistics and indexes for the base tables matching the specified parameters
function db2 stmt error $stmt	a valid statement resource
function string db2 stmt error	returns a string containing an sqlstate value
function string db2 stmt error resource $stmt	returns a string containing the sqlstate returned by an sql statement
function db2 table privileges $table_name	the name of the table
function db2 table privileges $qualifier	a qualifier for db2 databases running on os / 390 or z / os servers
function db2 table privileges $connection	a valid connection to an ibm db2 cloudscape or apache derby database
function db2 table privileges $schema	the schema which contains the tables
function resource db2 table privileges	returns a statement resource with a result set containing rows describing the privileges for the tables that match the specified parameters
function db2 tables $table-type	a list of comma-delimited table type identifiers
function db2 tables $qualifier	a qualifier for db2 databases running on os / 390 or z / os servers
function db2 tables $connection	a valid connection to an ibm db2 cloudscape or apache derby database
function db2 tables $schema	the schema which contains the tables
function db2 tables $table-name	the name of the table
function resource db2 tables	returns a statement resource with a result set containing rows describing the tables that match the specified parameters
function dba close $handle	the database handler returned by dba_open() or dba_popen()
function void dba close resource $handle	close a dba database
function dba delete $key	the key of the entry which is deleted
function dba delete $handle	the database handler returned by dba_open() or dba_popen()
function bool dba delete	returns true on success or false on failure
function bool dba delete string $key resource $handle	delete dba entry specified by key
function dba exists $key	the key the check is performed for
function dba exists $handle	the database handler returned by dba_open() or dba_popen()
function bool dba exists	returns true if the key exists false otherwise
function bool dba exists string $key resource $handle	check whether key exists
function dba fetch $key	the key the data is specified by
function dba fetch $skip	the number of key-value pairs to ignore when using cdb databases
function dba fetch $handle	the database handler returned by dba_open() or dba_popen()
function string dba fetch	returns the associated string if the key / data pair is found false otherwise
function string dba fetch string $key resource $handle	fetch data specified by key
function dba firstkey $handle	the database handler returned by dba_open() or dba_popen()
function string dba firstkey	returns the key on success or false on failure
function string dba firstkey resource $handle	fetch first key
function dba handlers $full_info	turns on / off full information display in the result
function array dba handlers	returns an array of database handlers
function array dba handlers bool $full_info	list all the handlers available
function dba insert $key	the key of the entry to be inserted
function dba insert $value	the value to be inserted
function dba insert $handle	the database handler returned by dba_open() or dba_popen()
function bool dba insert	returns true on success or false on failure
function bool dba insert string $key string $value resource $handle	insert entry
function dba key split $key	the key in string representation
function mixed dba key split	returns an array of the form array( 0 = > group 1 = > value_name
function mixed dba key split mixed $key	splits a key in string representation into array representation
function array dba list	an associative array in the form resourceid = > filename
function array dba list	list all open database files
function dba nextkey $handle	the database handler returned by dba_open() or dba_popen()
function string dba nextkey	returns the key on success or false on failure
function string dba nextkey resource $handle	fetch next key
function dba open $mode	it is r for read access w for read / write access to an already existing database c for read / write access and database creation if it doesnt currently exist and n for create truncate and read / write access
function dba open $path	commonly a regular path in your filesystem
function dba open $handler	the name of the handler which shall be used for accessing path
function resource dba open	returns a positive handle on success or false on failure
function resource dba open string $path string $mode string $handler	open database
function dba optimize $handle	the database handler returned by dba_open() or dba_popen()
function bool dba optimize	returns true on success or false on failure
function bool dba optimize resource $handle	optimize database
function dba popen $mode	it is r for read access w for read / write access to an already existing database c for read / write access and database creation if it doesnt currently exist and n for create truncate and read / write access
function dba popen $path	commonly a regular path in your filesystem
function dba popen $handler	the name of the handler which shall be used for accessing path
function resource dba popen	returns a positive handle on success or false on failure
function resource dba popen string $path string $mode string $handler	open database persistently
function dba replace $key	the key of the entry to be replaced
function dba replace $value	the value to be replaced
function dba replace $handle	the database handler returned by dba_open() or dba_popen()
function bool dba replace	returns true on success or false on failure
function bool dba replace string $key string $value resource $handle	replace or insert entry
function dbase close $dbase_identifier	the database link identifier returned by dbase_open() or dbase_create()
function bool dbase close	returns true on success or false on failure
function bool dbase close int $dbase_identifier	closes a database
function dbase create $filename	the name of the database
function dbase create $fields	an array of arrays each array describing the format of one field of the database
function int dbase create	returns a database link identifier if the database is successfully created or false if an error occurred
function int dbase create string $filename array $fields	creates a database
function dbase get header info $dbase_identifier	the database link identifier returned by dbase_open() or dbase_create()
function array dbase get header info	an indexed array with an entry for each column in the database
function array dbase get header info int $dbase_identifier	gets the header info of a database
function dbase get record with names $record_number	the index of the record
function dbase get record with names $dbase_identifier	the database link identifier returned by dbase_open() or dbase_create()
function array dbase get record with names	an associative array with the record
function array dbase get record with names int $dbase_identifier int $record_number	gets a record from a database as an associative array
function dbase numfields $dbase_identifier	the database link identifier returned by dbase_open() or dbase_create()
function int dbase numfields	the number of fields in the database or false if an error occurs
function int dbase numfields int $dbase_identifier	gets the number of fields of a database
function dbase numrecords $dbase_identifier	the database link identifier returned by dbase_open() or dbase_create()
function int dbase numrecords	the number of records in the database or false if an error occurs
function int dbase numrecords int $dbase_identifier	gets the number of records in a database
function dbase open $filename	the name of the database
function dbase open $mode	an integer which correspond to those for the open() system call typically 0 means read-only 1 means write-only and 2 means read and write
function int dbase open	returns a database link identifier if the database is successfully opened or false if an error occurred
function int dbase open string $filename int $mode	opens a database
function dbase pack $dbase_identifier	the database link identifier returned by dbase_open() or dbase_create()
function bool dbase pack	returns true on success or false on failure
function bool dbase pack int $dbase_identifier	packs a database
function dbase replace record $record	an indexed array of data
function dbase replace record $record_number	an integer which spans from 1 to the number of records in the database as returned by dbase_numrecords()
function dbase replace record $dbase_identifier	the database link identifier returned by dbase_open() or dbase_create()
function bool dbase replace record	returns true on success or false on failure
function bool dbase replace record int $dbase_identifier array $record int $record_number	replaces a record in a database
function dbplus add $tuple	an array of attribute / value pairs to be inserted into the given relation
function int dbplus add	the function will return dbplus_err_noerr on success or a db++ error code on failure
function int dbplus add resource $relation array $tuple	add a tuple to a relation
function dbplus aql $query	the aql query to be executed
function resource dbplus aql	returns a relation handle on success
function resource dbplus aql string $query string $server string $dbpath	perform aql query
function dbplus chdir $newdir	the new directory for relation files
function string dbplus chdir	returns the absolute path of the current directory
function string dbplus chdir string $newdir	get / set database virtual current directory
function dbplus close $relation	a relation opened by dbplus_open()
function mixed dbplus close	returns true on success or dbplus_err_unknown on failure
function mixed dbplus close resource $relation	close a relation
function dbplus errcode $errno	the error code
function string dbplus errcode	returns the error message
function string dbplus errcode int $errno	get error string for given errorcode or last error
function int dbplus errno	returns the error code as an integer
function int dbplus errno	get error code for last operation
function dbplus freelock $relation	a relation opened by dbplus_open()
function int dbplus freelock resource $relation string $tuple	release write lock on tuple
function dbplus freerlocks $relation	a relation opened by dbplus_open()
function int dbplus freerlocks resource $relation	free all tuple locks on given relation
function dbplus getlock $relation	a relation opened by dbplus_open()
function int dbplus getlock	returns zero on success or a non-zero error code especially dbplus_err_wlocked on failure
function int dbplus getlock resource $relation string $tuple	get a write lock on a tuple
function dbplus last $relation	a relation opened by dbplus_open()
function int dbplus last	returns dbplus_err_noerr on success or a db++ error code on failure
function int dbplus last resource $relation array $tuple	get last tuple from relation
function dbplus next $relation	a relation opened by dbplus_open()
function int dbplus next	returns dbplus_err_noerr on success or a db++ error code on failure
function int dbplus next resource $relation array $tuple	get next tuple from relation
function dbplus open $name	can be either a file name or a relative or absolute path name
function resource dbplus open	on success a relation file resource cursor is returned which must be used in any subsequent commands referencing the relation
function resource dbplus open string $name	open relation file
function dbplus prev $relation	a relation opened by dbplus_open()
function int dbplus prev	returns dbplus_err_noerr on success or a db++ error code on failure
function int dbplus prev resource $relation array $tuple	get previous tuple from relation
function dbplus rchperm $relation	a relation opened by dbplus_open()
function int dbplus rchperm resource $relation int $mask string $user string $group	change relation permissions
function dbplus rcreate $domlist	a combination of domains
function resource dbplus rcreate string $name mixed $domlist bool $overwrite	creates a new db++ relation
function dbplus rcrtlike $relation	the copied relation opened by dbplus_open()
function dbplus rcrtlike $overwrite	an existing relation by the same name will only be overwritten if this parameter is set to true and no other process is currently using the relation
function mixed dbplus rcrtlike	returns resource on success or dbplus_err_unknown on failure
function mixed dbplus rcrtlike string $name resource $relation int $overwrite	creates an empty copy of a relation with default indices
function dbplus resolve $relation_name	the relation name
function array dbplus resolve	returns an array containing these values under the keys sid host and host_path or false on error
function array dbplus resolve string $relation_name	resolve host information for relation
function resource dbplus ropen string $name	open relation file local
function resource dbplus rquery string $query string $dbpath	perform local raw aql query
function dbplus rsecindex $domlist	a combination of domains
function dbplus rsecindex $relation	a relation opened by dbplus_open()
function mixed dbplus rsecindex	returns resource on success or dbplus_err_unknown on failure
function mixed dbplus rsecindex resource $relation mixed $domlist int $type	create a new secondary index for a relation
function dbplus runlink $relation	a relation opened by dbplus_open()
function int dbplus runlink resource $relation	remove relation from filesystem
function string dbplus tcl int $sid string $script	execute tcl code on server side
function dbplus unlockrel $relation	a relation opened by dbplus_open()
function int dbplus unlockrel resource $relation	give up write lock on relation
function dbplus unselect $relation	a relation opened by dbplus_open()
function int dbplus unselect resource $relation	remove a constraint from relation
function dbplus xlockrel $relation	a relation opened by dbplus_open()
function int dbplus xlockrel resource $relation	request exclusive lock on relation
function dbx compare $column_key	the compared column
function dbx compare $row_b	second row
function dbx compare $row_a	first row
function int dbx compare	returns 0 if the row_a[$column_key] is equal to row_b[$column_key] and 1 or -1 if the former is greater or is smaller than the latter one respectively or vice versa if the flag is set to dbx_cmp_desc
function int dbx compare array $row_a array $row_b string $column_key int $flags	compare two rows for sorting purposes
function dbx error $link_identifier	the dbx link object returned by dbx_connect()
function string dbx error	returns a string containing the error message from the last function call of the abstracted module e
function string dbx error object $link_identifier	report the error message of the latest function call in the module
function dbx escape string $text	the string to escape
function dbx escape string $link_identifier	the dbx link object returned by dbx_connect()
function string dbx escape string	returns the text escaped where necessary such as quotes backslashes etc
function string dbx escape string object $link_identifier string $text	escape a string so it can safely be used in an sql-statement
function dbx query $DBX_COLNAMES_UPPERCASE	the case of the returned column names will be changed to uppercase
function dbx query $DBX_COLNAMES_UNCHANGED	the case of the returned column names will not be changed
function dbx query $sql_statement	sql statement
function dbx query $link_identifier	the dbx link object returned by dbx_connect()
function dbx query $DBX_RESULT_UNBUFFERED	this flag will not create the data property and the rows property will initially be 0
function dbx query $DBX_RESULT_INFO	it provides info about columns such as field names and field types
function dbx query $DBX_COLNAMES_LOWERCASE	the case of the returned column names will be changed to lowercase
function dbx query $DBX_RESULT_ASSOC	it effects that the field values can be accessed with the respective column names used as keys to the returned objects data property
function dbx query $DBX_RESULT_INDEX	it is always set that is the returned object has a data property which is a 2 dimensional array indexed numerically
function dbx query $flags	the flags parameter is used to control the amount of information that is returned
function mixed dbx query	dbx_query() returns an object or 1 on success and 0 on failure
function mixed dbx query object $link_identifier string $sql_statement int $flags	send a query and fetch all results if any
function dbx sort $user_compare_function	the user-defined comparison function
function dbx sort $result	a result set returned by dbx_query()
function bool dbx sort	returns true on success or false on failure
function bool dbx sort object $result string $user_compare_function	sort a result from a dbx_query by a custom sort function
function dcgettext $domain	the domain
function dcgettext $message	the message
function dcgettext $category	the category
function string dcgettext	a string on success
function string dcgettext string $domain string $message int $category	overrides the domain for a single lookup
function debug backtrace $options	as of 5
function debug backtrace $limit	as of 5
function array debug backtrace	returns an array of associative array s
function array debug backtrace int $options int $limit	generates a backtrace
function debug print backtrace $options	as of 5
function debug print backtrace $limit	as of 5
function void debug print backtrace int $options int $limit	prints a backtrace
function debug zval dump $variable	the variable being evaluated
function decbin $number	decimal value to convert range of inputs on 32-bit machines positive number negative number return value 0 &nbsp; 0 1 &nbsp; 1 2 &nbsp; 10
function string decbin	binary string representation of number
function string decbin int $number	decimal to binary
function dechex $number	the decimal value to convert
function string dechex	hexadecimal string representation of number
function string dechex int $number	decimal to hexadecimal
function void define syslog variables	initializes all syslog related variables
function define $case_insensitive	if set to true the constant will be defined case-insensitive
function define $value	the value of the constant
function define $name	the name of the constant
function bool define	returns true on success or false on failure
function bool define string $name mixed $value bool $case_insensitive	defines a named constant
function defined $name	the constant name
function bool defined	returns true if the named constant given by name has been defined false otherwise
function bool defined string $name	checks whether a given named constant exists
function deg2rad $number	angular value in degrees
function float deg2rad	the radian equivalent of number
function float deg2rad float $number	converts the number in degrees to the radian equivalent
function dio open $mode	if flags contains o_creat mode will set the permissions of the file creation permissions
function dio open $flags	the flags parameter is a bitwise-ored value comprising flags from the following list
function dio open $filename	the pathname of the file to open
function resource dio open	a file descriptor or false on error
function resource dio open string $filename int $flags int $mode	opens a file creating it if necessary at a lower level than the c library input / ouput stream functions allow
function dio read $fd	the file descriptor returned by dio_open()
function dio read $len	the number of bytes to read
function string dio read	the bytes read from fd
function string dio read resource $fd int $len	reads bytes from a file descriptor
function dio tcsetattr $options	the currently available options are: baud - baud rate of the port - can be 38400 19200 9600 4800 2400 1800 1200 600 300 200 150 134 110 75 or 50 default value is 9600
function dio tcsetattr $fd	the file descriptor returned by dio_open()
function bool dio tcsetattr resource $fd array $options	sets terminal attributes and baud rate for a serial port
function dio truncate $offset	the offset in bytes
function dio truncate $fd	the file descriptor returned by dio_open()
function bool dio truncate	returns true on success or false on failure
function bool dio truncate resource $fd int $offset	truncates file descriptor fd to offset bytes
function dio write $data	the written data
function dio write $fd	the file descriptor returned by dio_open()
function dio write $len	the length of data to write in bytes
function int dio write	returns the number of bytes written to fd
function int dio write resource $fd string $data int $len	writes data to fd with optional truncation at length
function dir $directory	directory to open
function dir $context	note : context support was added with php 5
function Directory dir	returns an instance of directory or null with wrong parameters or false in case of another error
function Directory dir string $directory resource $context	return an instance of the directory class
function dirname $levels	the number of parent directories to go up
function dirname $path	a path
function string dirname	returns the path of a parent directory
function string dirname string $path int $levels	returns a parent directory's path
function disk free space $directory	a directory of the filesystem or disk partition
function float disk free space	returns the number of available bytes as a float or false on failure
function float disk free space string $directory	returns available space on filesystem or disk partition
function disk total space $directory	a directory of the filesystem or disk partition
function float disk total space	returns the total number of bytes as a float or false on failure
function float disk total space string $directory	returns the total size of a filesystem or disk partition
function dl $library	this parameter is only the filename of the extension to load which also depends on your platform
function bool dl	returns true on success or false on failure
function bool dl string $library	loads a php extension at runtime
function dngettext $domain	the domain
function string dngettext	a string on success
function string dngettext string $domain string $msgid1 string $msgid2 int $n	plural version of dgettext
function dns get record $raw	in case of raw mode we query only the requestd type instead of looping type by type before going with the additional info stuff
function dns get record $hostname	hostname should be a valid dns hostname such as www
function dns get record $authns	passed by reference and if given will be populated with resource records for the authoritative name servers
function dns get record $addtl	passed by reference and if given will be populated with any additional records
function dns get record $type	by default dns_get_record() will search for any resource records associated with hostname
function array dns get record	this function returns an array of associative arrays or false on failure
function array dns get record string $hostname int $type array $authns array $addtl bool $raw	fetch dns resource records associated with a hostname
function dom import simplexml $node	the simplexmlelement node
function DOMElement dom import simplexml	the domelement node added or false if any errors occur
function DOMElement dom import simplexml SimpleXMLElement $node	gets a domelement object from a simplexmlelement object
function each $array	the input array
function array each	returns the current key and value pair from the array array
function easter date $year	the year as a number between 1970 an 2037
function int easter date	the easter date as a unix timestamp
function int easter date int $year	get unix timestamp for midnight on easter of a given year
function easter days $method	allows easter dates to be calculated based on the gregorian calendar during the years 1582 - 1752 when set to cal_easter_roman
function easter days $year	the year as a positive number
function int easter days	the number of days after march 21st that the easter sunday is in the given year
function int easter days int $year int $method	get number of days after march 21 on which easter falls for a given year
function eio busy $pri	the request priority: eio_pri_default eio_pri_min eio_pri_max or null
function eio busy $data	arbitrary variable passed to callback
function eio busy $delay	delay in seconds
function eio busy $callback	this callback is called when all the group requests are done
function resource eio busy	eio_busy() returns request resource on success or false on error
function resource eio busy int $delay int $pri callable $callback mixed $data	artificially increase load
function eio cancel $pri	the request priority: eio_pri_default eio_pri_min eio_pri_max or null
function eio cancel $result	request-specific result value; basically the value returned by corresponding system call
function eio cancel $data	arbitrary variable passed to callback
function eio cancel $callback	callback function is called when the request is done
function eio cancel $data	is custom data passed to the request
function eio cancel $req	the request resource
function eio cancel $req	is optional request resource which can be used with functions like eio_get_last_error()
function void eio cancel resource $req	cancels a request
function eio chmod $pri	the request priority: eio_pri_default eio_pri_min eio_pri_max or null
function eio chmod $result	request-specific result value; basically the value returned by corresponding system call
function eio chmod $req	is optional request resource which can be used with functions like eio_get_last_error()
function eio chmod $data	is custom data passed to the request
function eio chmod $data	arbitrary variable passed to callback
function eio chmod $callback	callback function is called when the request is done
function eio chmod $path	path to the target file or directory warning avoid relative paths
function eio chmod $mode	the new permissions
function resource eio chmod	eio_chmod() returns request resource on success or false on error
function resource eio chmod string $path int $mode int $pri callable $callback mixed $data	change file / direcrory permissions
function eio chown $pri	the request priority: eio_pri_default eio_pri_min eio_pri_max or null
function eio chown $callback	callback function is called when the request is done
function eio chown $req	is optional request resource which can be used with functions like eio_get_last_error()
function eio chown $uid	user id
function eio chown $data	is custom data passed to the request
function eio chown $data	arbitrary variable passed to callback
function eio chown $gid	group id
function eio chown $result	request-specific result value; basically the value returned by corresponding system call
function eio chown $path	path to file or directory
function resource eio chown	eio_chown() returns request resource on success or false on error
function resource eio chown string $path int $uid int $gid int $pri callable $callback mixed $data	change file / direcrory permissions
function eio close $pri	the request priority: eio_pri_default eio_pri_min eio_pri_max or null
function eio close $result	request-specific result value; basically the value returned by corresponding system call
function eio close $callback	callback function is called when the request is done
function eio close $data	is custom data passed to the request
function eio close $data	arbitrary variable passed to callback
function eio close $fd	stream socket resource or numeric file descriptor
function eio close $req	is optional request resource which can be used with functions like eio_get_last_error()
function resource eio close	eio_close() returns request resource on success or false on error
function resource eio close mixed $fd int $pri callable $callback mixed $data	close file
function eio custom $pri	the request priority: eio_pri_default eio_pri_min eio_pri_max or null
function eio custom $result	request-specific result value; basically the value returned by corresponding system call
function eio custom $execute	specifies the request function that should match the following prototype: mixed execute mixed data ; callback is event completion callback that should match the following prototype: void callback( mixed data mixed result ; data is the data passed to execute via data argument without modifications result value returned by execute
function eio custom $callback	callback function is called when the request is done
function eio custom $data	is custom data passed to the request
function eio custom $data	arbitrary variable passed to callback
function eio custom $req	is optional request resource which can be used with functions like eio_get_last_error()
function resource eio custom	eio_custom() returns request resource on success or false on error
function resource eio custom callable $execute int $pri callable $callback mixed $data	execute custom request like any other eio_* call
function eio dup2 $pri	the request priority: eio_pri_default eio_pri_min eio_pri_max or null
function eio dup2 $result	request-specific result value; basically the value returned by corresponding system call
function eio dup2 $req	is optional request resource which can be used with functions like eio_get_last_error()
function eio dup2 $fd2	target stream socket resource or numeric file descriptor
function eio dup2 $data	is custom data passed to the request
function eio dup2 $data	arbitrary variable passed to callback
function eio dup2 $callback	callback function is called when the request is done
function eio dup2 $fd	source stream socket resource or numeric file descriptor
function resource eio dup2	eio_dup2() returns request resource on success or false on error
function resource eio dup2 mixed $fd mixed $fd2 int $pri callable $callback mixed $data	duplicate a file descriptor
function bool eio event loop	eio_event_loop() returns true on success or false on error
function bool eio event loop	polls libeio until all requests proceeded
function eio fchmod $fd	stream socket resource or numeric file descriptor e
function eio fchmod $pri	the request priority: eio_pri_default eio_pri_min eio_pri_max or null
function eio fchmod $result	request-specific result value; basically the value returned by corresponding system call
function eio fchmod $req	is optional request resource which can be used with functions like eio_get_last_error()
function eio fchmod $data	is custom data passed to the request
function eio fchmod $data	arbitrary variable passed to callback
function eio fchmod $callback	callback function is called when the request is done
function eio fchmod $mode	the new permissions
function resource eio fchmod	eio_fchmod() returns request resource on success or false on error
function resource eio fchmod mixed $fd int $mode int $pri callable $callback mixed $data	change file permissions
function eio fchown $pri	the request priority: eio_pri_default eio_pri_min eio_pri_max or null
function eio fchown $callback	callback function is called when the request is done
function eio fchown $req	is optional request resource which can be used with functions like eio_get_last_error()
function eio fchown $uid	user id
function eio fchown $data	is custom data passed to the request
function eio fchown $data	arbitrary variable passed to callback
function eio fchown $gid	group id
function eio fchown $fd	stream socket resource or numeric file descriptor
function eio fchown $result	request-specific result value; basically the value returned by corresponding system call
function resource eio fchown mixed $fd int $uid int $gid int $pri callable $callback mixed $data	change file ownership
function eio fdatasync $fd	stream socket resource or numeric file descriptor e
function eio fdatasync $pri	the request priority: eio_pri_default eio_pri_min eio_pri_max or null
function eio fdatasync $result	request-specific result value; basically the value returned by corresponding system call
function eio fdatasync $callback	callback function is called when the request is done
function eio fdatasync $data	is custom data passed to the request
function eio fdatasync $data	arbitrary variable passed to callback
function eio fdatasync $req	is optional request resource which can be used with functions like eio_get_last_error()
function resource eio fdatasync	eio_fdatasync() returns request resource on success or false on error
function resource eio fdatasync mixed $fd int $pri callable $callback mixed $data	synchronize a file's in-core state with storage device
function eio fstat $pri	the request priority: eio_pri_default eio_pri_min eio_pri_max or null
function eio fstat $result	request-specific result value; basically the value returned by corresponding system call
function eio fstat $callback	callback function is called when the request is done
function eio fstat $data	is custom data passed to the request
function eio fstat $data	arbitrary variable passed to callback
function eio fstat $fd	stream socket resource or numeric file descriptor
function eio fstat $req	is optional request resource which can be used with functions like eio_get_last_error()
function resource eio fstat	eio_busy() returns request resource on success or false on error
function resource eio fstat mixed $fd int $pri callable $callback mixed $data	get file status
function eio fstatvfs $pri	the request priority: eio_pri_default eio_pri_min eio_pri_max or null
function eio fstatvfs $fd	a file descriptor of a file within the mounted file system
function eio fstatvfs $result	request-specific result value; basically the value returned by corresponding system call
function eio fstatvfs $callback	callback function is called when the request is done
function eio fstatvfs $data	is custom data passed to the request
function eio fstatvfs $data	arbitrary variable passed to callback
function eio fstatvfs $req	is optional request resource which can be used with functions like eio_get_last_error()
function resource eio fstatvfs	eio_fstatvfs() returns request resource on success or false on error
function resource eio fstatvfs mixed $fd int $pri callable $callback mixed $data	get file system statistics
function eio fsync $pri	the request priority: eio_pri_default eio_pri_min eio_pri_max or null
function eio fsync $result	request-specific result value; basically the value returned by corresponding system call
function eio fsync $callback	callback function is called when the request is done
function eio fsync $data	is custom data passed to the request
function eio fsync $data	arbitrary variable passed to callback
function eio fsync $fd	stream socket resource or numeric file descriptor
function eio fsync $req	is optional request resource which can be used with functions like eio_get_last_error()
function resource eio fsync	eio_fsync() returns request resource on success or false on error
function resource eio fsync mixed $fd int $pri callable $callback mixed $data	synchronize a file's in-core state with storage device
function mixed eio get event stream	eio_get_event_stream() returns stream on success; otherwise null
function mixed eio get event stream	get stream representing a variable used in internal communications with libeio
function eio get last error $req	the request resource
function string eio get last error	eio_get_last_error() returns string describing the last error associated with the request resource specified by req
function string eio get last error resource $req	returns string describing the last error associated with a request resource
function eio grp add $grp	the request group resource returned by eio_grp()
function eio grp add $req	the request resource
function void eio grp add resource $grp resource $req	adds a request to the request group
function eio grp $data	is custom data passed to the request
function eio grp $data	arbitrary variable passed to callback
function eio grp $req	is optional request resource which can be used with functions like eio_get_last_error()
function eio grp $callback	callback function is called when the request is done
function eio grp $result	request-specific result value; basically the value returned by corresponding system call
function resource eio grp	eio_grp() returns request group resource on success or false on error
function resource eio grp callable $callback string $data	createsa request group
function void eio init	re- initialize eio
function eio link $pri	the request priority: eio_pri_default eio_pri_min eio_pri_max or null
function eio link $result	request-specific result value; basically the value returned by corresponding system call
function eio link $new_path	target file path
function eio link $req	is optional request resource which can be used with functions like eio_get_last_error()
function eio link $path	source file path
function eio link $data	is custom data passed to the request
function eio link $data	arbitrary variable passed to callback
function eio link $callback	callback function is called when the request is done
function resource eio link string $path string $new_path int $pri callable $callback mixed $data	create a hardlink for file
function eio lstat $pri	the request priority: eio_pri_default eio_pri_min eio_pri_max or null
function eio lstat $result	request-specific result value; basically the value returned by corresponding system call
function eio lstat $path	the file path
function eio lstat $callback	callback function is called when the request is done
function eio lstat $data	is custom data passed to the request
function eio lstat $data	arbitrary variable passed to callback
function eio lstat $req	is optional request resource which can be used with functions like eio_get_last_error()
function resource eio lstat	eio_lstat() returns request resource on success or false on error
function resource eio lstat string $path int $pri callable $callback mixed $data	get file status
function eio mknod $pri	the request priority: eio_pri_default eio_pri_min eio_pri_max or null
function eio mknod $callback	callback function is called when the request is done
function eio mknod $req	is optional request resource which can be used with functions like eio_get_last_error()
function eio mknod $path	path for the new node file
function eio mknod $data	is custom data passed to the request
function eio mknod $mode	specifies both the permissions to use and the type of node to be created
function eio mknod $data	arbitrary variable passed to callback
function eio mknod $result	request-specific result value; basically the value returned by corresponding system call
function eio mknod $dev	if the file type is eio_s_ifchr or eio_s_ifblk then dev specifies the major and minor numbers of the newly created device special file
function resource eio mknod	eio_mknod() returns request resource on success or false on error
function resource eio mknod string $path int $mode int $dev int $pri callable $callback mixed $data	create a special or ordinary file
function eio nop $pri	the request priority: eio_pri_default eio_pri_min eio_pri_max or null
function eio nop $result	request-specific result value; basically the value returned by corresponding system call
function eio nop $callback	callback function is called when the request is done
function eio nop $data	is custom data passed to the request
function eio nop $data	arbitrary variable passed to callback
function eio nop $req	is optional request resource which can be used with functions like eio_get_last_error()
function resource eio nop	eio_nop() returns request resource on success or false on error
function resource eio nop int $pri callable $callback mixed $data	does nothing except go through the whole request cycle
function int eio npending	eio_npending() returns number of finished but unhandled requests
function int eio npending	returns number of finished but unhandled requests
function int eio nreqs	eio_nreqs() returns number of requests to be processed
function int eio nreqs	returns number of requests to be processed
function eio open $pri	the request priority: eio_pri_default eio_pri_min eio_pri_max or null
function eio open $mode	one of eio_s_i* constants or their combination via bitwise or operator
function eio open $callback	callback function is called when the request is done
function eio open $req	is optional request resource which can be used with functions like eio_get_last_error()
function eio open $data	is custom data passed to the request
function eio open $data	arbitrary variable passed to callback
function eio open $path	path of the file to be opened
function eio open $result	request-specific result value; basically the value returned by corresponding system call
function eio open $flags	one of eio_o_* constants or their combinations
function resource eio open	eio_open() returns file descriptor in result argument of callback on success; otherwise result is equal to -1
function resource eio open string $path int $flags int $mode int $pri callable $callback mixed $data	opens a file
function int eio poll	if any request invocation returns a non-zero value returns that value
function int eio poll	can be to be called whenever there are pending requests that need finishing
function eio read $pri	the request priority: eio_pri_default eio_pri_min eio_pri_max or null
function eio read $callback	callback function is called when the request is done
function eio read $req	is optional request resource which can be used with functions like eio_get_last_error()
function eio read $length	maximum number of bytes to read
function eio read $data	is custom data passed to the request
function eio read $data	arbitrary variable passed to callback
function eio read $fd	stream socket resource or numeric file descriptor
function eio read $result	request-specific result value; basically the value returned by corresponding system call
function eio read $offset	offset within the file
function resource eio read	eio_read() stores read bytes in result argument of callback function
function resource eio read mixed $fd int $length int $offset int $pri callable $callback mixed $data	read from a file descriptor at given offset
function eio readahead $pri	the request priority: eio_pri_default eio_pri_min eio_pri_max or null
function eio readahead $length	number of bytes to be read
function eio readahead $callback	callback function is called when the request is done
function eio readahead $req	is optional request resource which can be used with functions like eio_get_last_error()
function eio readahead $offset	starting point from which data is to be read
function eio readahead $data	is custom data passed to the request
function eio readahead $data	arbitrary variable passed to callback
function eio readahead $fd	stream socket resource or numeric file descriptor
function eio readahead $result	request-specific result value; basically the value returned by corresponding system call
function resource eio readahead	eio_readahead() returns request resource on success or false on error
function resource eio readahead mixed $fd int $offset int $length int $pri callable $callback mixed $data	perform file readahead into page cache
function eio readdir $pri	the request priority: eio_pri_default eio_pri_min eio_pri_max or null
function eio readdir $result	request-specific result value; basically the value returned by corresponding system call
function eio readdir $req	is optional request resource which can be used with functions like eio_get_last_error()
function eio readdir $data	is custom data passed to the request
function eio readdir $data	arbitrary variable passed to callback
function eio readdir $callback	callback function is called when the request is done
function eio readdir $path	directory path
function eio readdir $flags	combination of eio_readdir_* constants
function resource eio readdir	eio_readdir() returns request resource on success or false on error
function resource eio readdir string $path int $flags int $pri callable $callback string $data	reads through a whole directory
function eio realpath $path	short pathname
function resource eio realpath string $path int $pri callable $callback string $data	get the canonicalized absolute pathname
function eio rename $pri	the request priority: eio_pri_default eio_pri_min eio_pri_max or null
function eio rename $result	request-specific result value; basically the value returned by corresponding system call
function eio rename $req	is optional request resource which can be used with functions like eio_get_last_error()
function eio rename $data	is custom data passed to the request
function eio rename $data	arbitrary variable passed to callback
function eio rename $callback	callback function is called when the request is done
function eio rename $new_path	target path
function eio rename $path	source path
function resource eio rename	eio_rename() returns request resource on success or false on error
function resource eio rename string $path string $new_path int $pri callable $callback mixed $data	change the name or location of a file
function eio seek $pri	the request priority: eio_pri_default eio_pri_min eio_pri_max or null
function eio seek $length	number of bytes to be read
function eio seek $callback	callback function is called when the request is done
function eio seek $req	is optional request resource which can be used with functions like eio_get_last_error()
function eio seek $offset	starting point from which data is to be read
function eio seek $data	is custom data passed to the request
function eio seek $data	arbitrary variable passed to callback
function eio seek $fd	stream socket resource or numeric file descriptor
function eio seek $result	request-specific result value; basically the value returned by corresponding system call
function resource eio seek	eio_seek() returns request resource on success or false on error
function resource eio seek mixed $fd int $offset int $whence int $pri callable $callback mixed $data	repositions the offset of the open file associated with the fd argument to the argument offset according to the directive whence
function eio sendfile $pri	the request priority: eio_pri_default eio_pri_min eio_pri_max or null
function eio sendfile $callback	callback function is called when the request is done
function eio sendfile $req	is optional request resource which can be used with functions like eio_get_last_error()
function eio sendfile $data	arbitrary variable passed to callback
function eio sendfile $length	number of bytes to copy
function eio sendfile $data	is custom data passed to the request
function eio sendfile $in_fd	input stream socket resource or file descriptor
function eio sendfile $offset	offset within the source file
function eio sendfile $result	request-specific result value; basically the value returned by corresponding system call
function eio sendfile $out_fd	output stream socket resource or file descriptor
function resource eio sendfile	eio_sendfile() returns request resource on success or false on error
function resource eio sendfile mixed $out_fd mixed $in_fd int $offset int $length int $pri callable $callback string $data	transfer data between file descriptors
function eio stat $pri	the request priority: eio_pri_default eio_pri_min eio_pri_max or null
function eio stat $result	request-specific result value; basically the value returned by corresponding system call
function eio stat $path	the file path
function eio stat $callback	callback function is called when the request is done
function eio stat $data	is custom data passed to the request
function eio stat $data	arbitrary variable passed to callback
function eio stat $req	is optional request resource which can be used with functions like eio_get_last_error()
function resource eio stat	eio_stat() returns request resource on success or false on error
function resource eio stat string $path int $pri callable $callback mixed $data	get file status
function eio statvfs $req	is optional request resource which can be used with functions like eio_get_last_error()
function eio statvfs $result	request-specific result value; basically the value returned by corresponding system call
function eio statvfs $pri	the request priority: eio_pri_default eio_pri_min eio_pri_max or null
function eio statvfs $callback	callback function is called when the request is done
function eio statvfs $data	is custom data passed to the request
function eio statvfs $data	arbitrary variable passed to callback
function eio statvfs $path	pathname of any file within the mounted file system
function resource eio statvfs	eio_statvfs() returns request resource on success or false on error
function resource eio statvfs string $path int $pri callable $callback mixed $data	get file system statistics
function eio symlink $pri	the request priority: eio_pri_default eio_pri_min eio_pri_max or null
function eio symlink $result	request-specific result value; basically the value returned by corresponding system call
function eio symlink $req	is optional request resource which can be used with functions like eio_get_last_error()
function eio symlink $data	is custom data passed to the request
function eio symlink $data	arbitrary variable passed to callback
function eio symlink $callback	callback function is called when the request is done
function eio symlink $new_path	target path
function eio symlink $path	source path
function resource eio symlink	eio_symlink() returns request resource on success or false on error
function resource eio symlink string $path string $new_path int $pri callable $callback mixed $data	create a symbolic link
function eio truncate $pri	the request priority: eio_pri_default eio_pri_min eio_pri_max or null
function eio truncate $result	request-specific result value; basically the value returned by corresponding system call
function eio truncate $path	file path
function eio truncate $req	is optional request resource which can be used with functions like eio_get_last_error()
function eio truncate $data	is custom data passed to the request
function eio truncate $data	arbitrary variable passed to callback
function eio truncate $callback	callback function is called when the request is done
function eio truncate $offset	offset from beginning of the file
function resource eio truncate	eio_busy() returns request resource on success or false on error
function resource eio truncate string $path int $offset int $pri callable $callback mixed $data	truncate a file
function eio unlink $pri	the request priority: eio_pri_default eio_pri_min eio_pri_max or null
function eio unlink $result	request-specific result value; basically the value returned by corresponding system call
function eio unlink $callback	callback function is called when the request is done
function eio unlink $data	is custom data passed to the request
function eio unlink $data	arbitrary variable passed to callback
function eio unlink $path	path to file
function eio unlink $req	is optional request resource which can be used with functions like eio_get_last_error()
function resource eio unlink	eio_unlink() returns request resource on success or false on error
function resource eio unlink string $path int $pri callable $callback mixed $data	delete a name and possibly the file it refers to
function enchant broker describe $broker	broker resource
function array enchant broker describe	returns true on success or false on failure
function array enchant broker describe resource $broker	enumerates the enchant providers
function enchant broker dict exists $tag	non-empty tag in the locale format ex: us_us ch_de etc
function enchant broker dict exists $broker	broker resource
function bool enchant broker dict exists	returns true when the tag exist or false when not
function bool enchant broker dict exists resource $broker string $tag	whether a dictionary exists or not
function enchant broker get dict path $dict_type	the type of the dictionaries i
function enchant broker get dict path $broker	broker resource
function bool enchant broker get dict path	returns the path of the dictionary directory on success or false on failure
function enchant broker get error $broker	broker resource
function string enchant broker get error	return the msg string if an error was found or false
function string enchant broker get error resource $broker	returns the last error of the broker
function enchant broker list dicts $broker	broker resource
function mixed enchant broker list dicts	returns true on success or false on failure
function mixed enchant broker list dicts resource $broker	returns a list of available dictionaries
function enchant broker request dict $broker	broker resource
function enchant broker request dict $tag	a tag describing the locale for example en_us de_de
function resource enchant broker request dict	returns a dictionary resource on success or false on failure
function resource enchant broker request dict resource $broker string $tag	create a new dictionary using a tag
function enchant broker request pwl dict $broker	broker resource
function enchant broker request pwl dict $filename	path to the pwl file
function resource enchant broker request pwl dict	returns a dictionary resource on success or false on failure
function resource enchant broker request pwl dict resource $broker string $filename	creates a dictionary using a pwl file
function enchant broker set dict path $dict_type	the type of the dictionaries i
function enchant broker set dict path $broker	broker resource
function enchant broker set dict path $value	the path of the dictionary directory
function bool enchant broker set dict path	returns true on success or false on failure
function enchant broker set ordering $broker	broker resource
function enchant broker set ordering $tag	language tag
function enchant broker set ordering $ordering	comma delimited list of provider names
function bool enchant broker set ordering	returns true on success or false on failure
function bool enchant broker set ordering resource $broker string $tag string $ordering	declares a preference of dictionaries to use for the language
function enchant dict add to personal $word	the word to add
function enchant dict add to personal $dict	dictionary resource
function void enchant dict add to personal resource $dict string $word	add a word to personal word list
function enchant dict check $word	the word to check
function enchant dict check $dict	dictionary resource
function bool enchant dict check	returns true if the word is spelled correctly false if not
function bool enchant dict check resource $dict string $word	check whether a word is correctly spelled or not
function enchant dict describe $dict	dictionary resource
function mixed enchant dict describe	returns true on success or false on failure
function mixed enchant dict describe resource $dict	describes an individual dictionary
function enchant dict get error $dict	dictinaray resource
function string enchant dict get error	returns the error message as string or false if no error occurred
function enchant dict quick check $word	the word to check
function enchant dict quick check $suggestions	if the word is not correctly spelled this variable will contain an array of suggestions
function enchant dict quick check $dict	dictionary resource
function bool enchant dict quick check	returns true if the word is correctly spelled or false
function bool enchant dict quick check resource $dict string $word array $suggestions	check the word is correctly spelled and provide suggestions
function enchant dict store replacement $cor	the correct word
function enchant dict store replacement $mis	the work to fix
function enchant dict store replacement $dict	dictionary resource
function void enchant dict store replacement resource $dict string $mis string $cor	add a correction for a word
function end $array	the array
function mixed end	returns the value of the last element or false for empty array
function mixed end array $array	set the internal pointer of an array to its last element
function eregi replace $string	the input string
function eregi replace $replacement	if pattern contains parenthesized substrings replacement may contain substrings of the form \ digit which will be replaced by the text matching the digitth parenthesized substring; \0 will produce the entire contents of string
function eregi replace $pattern	a posix extended regular expression
function string eregi replace	the modified string is returned
function string eregi replace string $pattern string $replacement string $string	replace regular expression case insensitive
function eregi $pattern	case insensitive regular expression
function eregi $regs	if matches are found for parenthesized substrings of pattern and the function is called with the third argument regs the matches will be stored in the elements of the array regs
function eregi $string	the input string
function int eregi	returns the length of the matched string if a match for pattern was found in string or false if no matches were found or an error occurred
function int eregi string $pattern string $string array $regs	case insensitive regular expression match
function error log $extra_headers	the extra headers
function error log $message	the error message that should be logged
function error log $message_type	says where the error should go
function error log $destination	the destination
function bool error log	returns true on success or false on failure
function bool error log string $message int $message_type string $destination string $extra_headers	send an error message to the defined error handling routines
function error reporting $level	the new error_reporting level
function int error reporting	returns the old error_reporting level or the current level if no level parameter is given
function int error reporting int $level	sets which php errors are reported
function escapeshellarg $arg	the argument that will be escaped
function string escapeshellarg	the escaped string
function string escapeshellarg string $arg	escape a string to be used as a shell argument
function escapeshellcmd $command	the command that will be escaped
function string escapeshellcmd	the escaped string
function string escapeshellcmd string $command	escape shell metacharacters
function event add $event	valid event resource
function event add $timeout	optional timeout in microseconds
function bool event add	event_add() returns true on success or false on error
function bool event add resource $event int $timeout	add an event to the set of monitored events
function event base free $event_base	valid event base resource
function void event base free resource $event_base	destroy event base
function event base loop $flags	optional parameter which can take any combination of evloop_once and evloop_nonblock
function event base loop $event_base	valid event base resource
function int event base loop	event_base_loop() returns 0 on success -1 on error and 1 if no events were registered
function int event base loop resource $event_base int $flags	handle events
function event base loopbreak $event_base	valid event base resource
function bool event base loopbreak	event_base_loopbreak() returns true on success or false on error
function bool event base loopbreak resource $event_base	abort event loop
function event base loopexit $timeout	optional timeout parameter in microseconds
function event base loopexit $event_base	valid event base resource
function bool event base loopexit	event_base_loopexit() returns true on success or false on error
function bool event base loopexit resource $event_base int $timeout	exit loop after a time
function resource event base new	event_base_new() returns valid event base resource on success or false on error
function resource event base new	create and initialize new event base
function event base priority init $npriorities	the number of event priority levels
function event base priority init $event_base	valid event base resource
function bool event base priority init	event_base_priority_init() returns true on success or false on error
function bool event base priority init resource $event_base int $npriorities	set the number of event priority levels
function event base reinit $event_base	valid event base resource that needs to be re-initialized
function bool event base reinit	returns true on success or false on failure
function bool event base reinit resource $event_base	reinitialize the event base after a fork
function event buffer base set $bevent	valid buffered event resource
function event buffer base set $event_base	valid event base resource
function bool event buffer base set	event_buffer_base_set() returns true on success or false on error
function bool event buffer base set resource $bevent resource $event_base	associate buffered event with an event base
function event buffer disable $events	any combination of ev_read and ev_write
function event buffer disable $bevent	valid buffered event resource
function bool event buffer disable	event_buffer_disable() returns true on success or false on error
function bool event buffer disable resource $bevent int $events	disable a buffered event
function event buffer enable $events	any combination of ev_read and ev_write
function event buffer enable $bevent	valid buffered event resource
function bool event buffer enable	event_buffer_enable() returns true on success or false on error
function bool event buffer enable resource $bevent int $events	enable a buffered event
function event buffer fd set $bevent	valid buffered event resource
function event buffer fd set $fd	valid php stream must be castable to file descriptor
function void event buffer fd set resource $bevent resource $fd	change a buffered event file descriptor
function event buffer free $bevent	valid buffered event resource
function void event buffer free resource $bevent	destroy buffered event
function event buffer priority set $bevent	valid buffered event resource
function event buffer priority set $priority	priority level
function bool event buffer priority set	event_buffer_priority_set() returns true on success or false on error
function bool event buffer priority set resource $bevent int $priority	assign a priority to a buffered event
function event buffer read $bevent	valid buffered event resource
function event buffer read $data_size	data size in bytes
function string event buffer read resource $bevent int $data_size	read data from a buffered event
function event buffer set callback $readcb	callback to invoke where there is data to read or null if no callback is desired
function event buffer set callback $arg	an argument that will be passed to each of the callbacks optional
function event buffer set callback $writecb	callback to invoke where the descriptor is ready for writing or null if no callback is desired
function event buffer set callback $event	valid buffered event resource
function event buffer set callback $errorcb	callback to invoke where there is an error on the descriptor cannot be null
function bool event buffer set callback	returns true on success or false on failure
function bool event buffer set callback resource $event mixed $readcb mixed $writecb mixed $errorcb mixed $arg	set or reset callbacks for a buffered event
function event buffer timeout set $read_timeout	read timeout in seconds
function event buffer timeout set $bevent	valid buffered event resource
function event buffer timeout set $write_timeout	write timeout in seconds
function void event buffer timeout set resource $bevent int $read_timeout int $write_timeout	set read and write timeouts for a buffered event
function event buffer watermark set $highmark	high watermark
function event buffer watermark set $events	any combination of ev_read and ev_write
function event buffer watermark set $lowmark	low watermark
function event buffer watermark set $bevent	valid buffered event resource
function void event buffer watermark set resource $bevent int $events int $lowmark int $highmark	set the watermarks for read and write events
function event buffer write $bevent	valid buffered event resource
function event buffer write $data	the data to be written
function event buffer write $data_size	optional size parameter
function bool event buffer write	event_buffer_write() returns true on success or false on error
function bool event buffer write resource $bevent string $data int $data_size	write data to a buffered event
function event del $event	valid event resource
function bool event del	event_del() returns true on success or false on error
function bool event del resource $event	remove an event from the set of monitored events
function event free $event	valid event resource
function void event free resource $event	free event resource
function event priority set $event	valid event resource
function event priority set $priority	priority level
function bool event priority set	returns true on success or false on failure
function bool event priority set resource $event int $priority	assign a priority to an event
function event set $event	valid event resource
function event set $arg	optional callback parameter
function event set $fd	valid php stream resource
function event set $callback	callback function to be called when the matching event occurs
function event set $events	a set of flags indicating the desired event can be ev_read and / or ev_write
function bool event set	event_set() returns true on success or false on error
function bool event set resource $event mixed $fd int $events mixed $callback mixed $arg	prepare an event
function event timer set $event	valid event resource
function event timer set $arg	optional callback parameter
function event timer set $callback	callback function to be called when the matching event occurs
function bool event timer set	returns true on success or false on failure
function bool event timer set resource $event callable $callback mixed $arg	prepare a timer event
function exec $output	if the output argument is present then the specified array will be filled with every line of output from the command
function exec $return_var	if the return_var argument is present along with the output argument then the return status of the executed command will be written to this variable
function exec $command	the command that will be executed
function string exec	the last line from the result of the command
function string exec string $command array $output int $return_var	execute an external program
function exif imagetype $filename	the image being checked
function int exif imagetype	when a correct signature is found the appropriate constant value will be returned otherwise the return value is false
function int exif imagetype string $filename	determine the type of an image
function exif thumbnail $imagetype	the returned image type of the returned thumbnail
function exif thumbnail $height	the returned height of the returned thumbnail
function exif thumbnail $filename	the name of the image file being read
function exif thumbnail $width	the return width of the returned thumbnail
function string exif thumbnail	returns the embedded thumbnail or false if the image contains no thumbnail
function string exif thumbnail string $filename int $width int $height int $imagetype	retrieve the embedded thumbnail of a tiff or jpeg image
function exit $status	if status is a string this function prints the status just before exiting
function void exit string $status	output a message and terminate the current script
function expect expectl $cases	an array of expect cases
function expect expectl $expect	an expect stream previously opened with expect_popen()
function int expect expectl	returns value associated with the pattern that was matched
function expect popen $command	command to execute
function resource expect popen	returns an open pty stream to the processes stdio stdout and stderr
function fam close $fam	a resource representing a connection to the fam service returned by fam_open()
function void fam close resource $fam	close fam connection
function fam monitor collection $dirname	directory path to the monitored files
function fam monitor collection $depth	the maximum search depth starting from this directory
function fam monitor collection $mask	a shell pattern mask restricting the file names to look for
function fam monitor collection $fam	a resource representing a connection to the fam service returned by fam_open()
function resource fam monitor collection	returns a monitoring resource or false on errors
function resource fam monitor collection resource $fam string $dirname int $depth string $mask	monitor a collection of files in a directory for changes
function fam monitor directory $dirname	path to the monitored directory
function fam monitor directory $fam	a resource representing a connection to the fam service returned by fam_open()
function resource fam monitor directory	returns a monitoring resource or false on errors
function resource fam monitor directory resource $fam string $dirname	monitor a directory for changes
function fam monitor file $filename	path to the monitored file
function fam monitor file $fam	a resource representing a connection to the fam service returned by fam_open()
function resource fam monitor file	returns a monitoring resource or false on errors
function resource fam monitor file resource $fam string $filename	monitor a regular file for changes
function fam open $appname	a string identifying the application for logging reasons
function resource fam open	returns a resource representing a connection to the fam service on success or false on errors
function resource fam open string $appname	open connection to fam daemon
function fam pending $fam	a resource representing a connection to the fam service returned by fam_open()
function int fam pending	returns non-zero if events are available to be fetched using fam_next_event() zero otherwise
function int fam pending resource $fam	check for pending fam events
function fam suspend monitor $fam_monitor	a resource returned by one of the fam_monitor_xxx functions
function fam suspend monitor $fam	a resource representing a connection to the fam service returned by fam_open()
function bool fam suspend monitor	returns true on success or false on failure
function bool fam suspend monitor resource $fam resource $fam_monitor	temporarily suspend monitoring
function fann cascadetrain on data $desired_error	the desired fann_get_mse() or fann_get_bit_fail() depending on which stop function is chosen by fann_set_train_stop_function()
function fann cascadetrain on data $data	neural network training data resource
function fann cascadetrain on data $max_neurons	the maximum number of neurons to be added to neural network
function fann cascadetrain on data $neurons_between_reports	the number of neurons between printing a status report
function fann cascadetrain on data $ann	neural network resource
function bool fann cascadetrain on data	returns true on success or false otherwise
function bool fann cascadetrain on data resource $ann resource $data int $max_neurons int $neurons_between_reports float $desired_error	trains on an entire dataset for a period of time using the cascade2 training algorithm
function fann cascadetrain on file $filename	the maximum number of neurons to be added to neural network
function fann cascadetrain on file $desired_error	the desired fann_get_mse() or fann_get_bit_fail() depending on which stop function is chosen by fann_set_train_stop_function()
function fann cascadetrain on file $neurons_between_reports	the number of neurons between printing a status report
function fann cascadetrain on file $max_neurons	the number of neurons between printing a status report to stdout
function fann cascadetrain on file $ann	neural network resource
function bool fann cascadetrain on file	returns true on success or false otherwise
function bool fann cascadetrain on file resource $ann string $filename int $max_neurons int $neurons_between_reports float $desired_error	trains on an entire dataset read from file for a period of time using the cascade2 training algorithm
function fann copy $ann	neural network resource
function resource fann copy	returns a copy of neural network resource on success or false on error
function fann create from file $configuration_file	the configuration file path
function resource fann create from file	returns a neural network resource on success or false on error
function resource fann create from file string $configuration_file	constructs a backpropagation neural network from a configuration file
function fann create shortcut array $num_layers	the total number of layers including the input and the output layer
function fann create shortcut array $layers	an array of layers sizes
function resource fann create shortcut array	returns a neural network resource on success or false on error
function resource fann create shortcut array int $num_layers array $layers	creates a standard backpropagation neural network which is not fully connectected and has shortcut connections
function fann create shortcut $num_neurons1	number of neurons in the first layer
function fann create shortcut $num_layers	the total number of layers including the input and the output layer
function fann create shortcut	number of neurons in other layers
function fann create shortcut $num_neurons2	number of neurons in the second layer
function reference fann create shortcut	returns a neural network resource on success or false on error
function reference fann create shortcut int $num_layers int $num_neurons1 int $num_neurons2	creates a standard backpropagation neural network which is not fully connectected and has shortcut connections
function fann create sparse array $connection_rate	the connection rate controls how many connections there will be in the network
function fann create sparse array $num_layers	the total number of layers including the input and the output layer
function fann create sparse array $layers	an array of layer sizes
function ReturnType fann create sparse array	returns a neural network resource on success or false on error
function fann create sparse $num_neurons1	number of neurons in the first layer
function fann create sparse $connection_rate	the connection rate controls how many connections there will be in the network
function fann create sparse $num_layers	the total number of layers including the input and the output layer
function fann create sparse	number of neurons in other layers
function fann create sparse $num_neurons2	number of neurons in the second layer
function ReturnType fann create sparse	returns a neural network resource on success or false on error
function fann create standard array $num_layers	the total number of layers including the input and the output layer
function fann create standard array $layers	an array of layer sizes
function resource fann create standard array	returns a neural network resource on success or false on error
function resource fann create standard array int $num_layers array $layers	creates a standard fully connected backpropagation neural network using an array of layer sizes
function fann create standard $num_neurons1	number of neurons in the first layer
function fann create standard $num_layers	the total number of layers including the input and the output layer
function fann create standard	number of neurons in other layers
function fann create standard $num_neurons2	number of neurons in the second layer
function resource fann create standard	returns a neural network resource on success or false on error
function fann create train from callback $num_input	the number of inputs per training data
function fann create train from callback $num_data	the number of training data
function fann create train from callback $num_output	the number of ouputs per training data
function resource fann create train from callback	returns a train data resource on success or false on error
function fann create train $num_input	the number of inputs per training data
function fann create train $num_data	the number of training data
function fann create train $num_output	the number of ouputs per training data
function resource fann create train	returns a train data resource on success or false on error
function fann descale input $input_vector	input vector that will be descaled
function fann descale input $ann	neural network resource
function bool fann descale input	returns true on success or false otherwise
function fann descale train $train_data	neural network training data resource
function fann descale train $ann	neural network resource
function bool fann descale train	returns true on success or false otherwise
function fann duplicate train data $data	neural network training data resource
function resource fann duplicate train data	returns a train data resource on success or false on error
function resource fann duplicate train data resource $data	returns an exact copy of a fann train data
function fann get activation function $neuron	neuron number
function fann get activation function $layer	layer number
function fann get activation function $ann	neural network resource
function int fann get activation function	learning functions constant or -1 if the neuron is not defined in the neural network or false on error
function int fann get activation function resource $ann int $layer int $neuron	returns the activation function
function fann get activation steepness $neuron	neuron number
function fann get activation steepness $layer	layer number
function fann get activation steepness $ann	neural network resource
function float fann get activation steepness	the activation steepness for the neuron or -1 if the neuron is not defined in the neural network or false on error
function float fann get activation steepness resource $ann int $layer int $neuron	returns the activation steepness for supplied neuron and layer number
function fann get bias array $ann	neural network resource
function array fann get bias array	an array of numbers of bias in each layer
function fann get bit fail limit $ann	neural network resource
function float fann get bit fail limit	the bit fail limit or false on error
function fann get bit fail $ann	neural network resource
function int fann get bit fail	the number of bits fail or false on error
function int fann get bit fail resource $ann	the number of fail bits
function fann get cascade activation functions $ann	neural network resource
function array fann get cascade activation functions	the cascade activation functions or false on error
function array fann get cascade activation functions resource $ann	returns the cascade activation functions
function fann get cascade activation steepnesses count $ann	neural network resource
function int fann get cascade activation steepnesses count	the number of activation steepnesses or false on error
function int fann get cascade activation steepnesses count resource $ann	the number of activation steepnesses
function fann get cascade activation steepnesses $ann	neural network resource
function array fann get cascade activation steepnesses	the cascade activation steepnesses or false on error
function array fann get cascade activation steepnesses resource $ann	returns the cascade activation steepnesses
function fann get cascade candidate change fraction $ann	neural network resource
function float fann get cascade candidate change fraction	the cascade candidate change fraction or false on error
function float fann get cascade candidate change fraction resource $ann	returns the cascade candidate change fraction
function fann get cascade candidate limit $ann	neural network resource
function float fann get cascade candidate limit	the candidate limit or false on error
function float fann get cascade candidate limit resource $ann	return the candidate limit
function fann get cascade max cand epochs $ann	neural network resource
function int fann get cascade max cand epochs	the maximum candidate epochs or false on error
function int fann get cascade max cand epochs resource $ann	returns the maximum candidate epochs
function fann get cascade min cand epochs $ann	neural network resource
function int fann get cascade min cand epochs	the minimum candidate epochs or false on error
function int fann get cascade min cand epochs resource $ann	returns the minimum candidate epochs
function fann get cascade min out epochs $ann	neural network resource
function int fann get cascade min out epochs	the minimum out epochs or false on error
function int fann get cascade min out epochs resource $ann	returns the minimum out epochs
function fann get cascade num candidate groups $ann	neural network resource
function int fann get cascade num candidate groups	the number of candidate groups or false on error
function int fann get cascade num candidate groups resource $ann	returns the number of candidate groups
function fann get cascade num candidates $ann	neural network resource
function int fann get cascade num candidates	the number of candidates used during training or false on error
function int fann get cascade num candidates resource $ann	returns the number of candidates used during training
function fann get cascade output change fraction $ann	neural network resource
function float fann get cascade output change fraction	the cascade output change fraction or false on error
function float fann get cascade output change fraction resource $ann	returns the cascade output change fraction
function fann get connection array $ann	neural network resource
function array fann get connection array	an array of connections in the network
function fann get connection rate $ann	neural network resource
function float fann get connection rate	the connection rate used when the network was created or false on error
function fann get errno $errdat	either neural network resource or neural network trainining data resource
function int fann get errno	the error number or false on error
function fann get errstr $errdat	either neural network resource or neural network trainining data resource
function string fann get errstr	the last error string or false on error
function fann get layer array $ann	neural network resource
function array fann get layer array	an array of numbers of neurons in each leayer
function array fann get layer array resource $ann	get the number of neurons in each layer in the network
function fann get learning rate $ann	neural network resource
function float fann get learning rate	the learning rate or false on error
function float fann get learning rate resource $ann	returns the learning rate
function fann get MSE $ann	neural network resource
function float fann get MSE	the mean square error or false on error
function fann get network type $ann	neural network resource
function int fann get network type	network type constant or false on error
function fann get num layers $ann	neural network resource
function int fann get num layers	the number of leayers in the neural network or false on error
function fann get num output $ann	neural network resource
function int fann get num output	number of output neurons or false on error
function fann get quickprop decay $ann	neural network resource
function float fann get quickprop decay	the decay or false on error
function float fann get quickprop decay resource $ann	returns the decay which is a factor that weights should decrease in each iteration during quickprop training
function fann get rprop delta max $ann	neural network resource
function float fann get rprop delta max	the maximum step-size or false on error
function float fann get rprop delta max resource $ann	returns the maximum step-size
function fann get rprop delta min $ann	neural network resource
function float fann get rprop delta min	the minimum step-size or false on error
function float fann get rprop delta min resource $ann	returns the minimum step-size
function fann get sarprop step error shift $ann	neural network resource
function float fann get sarprop step error shift	the sarprop step error shift or false on error
function fann get sarprop step error threshold factor $ann	neural network resource
function float fann get sarprop step error threshold factor	the sarprop step error threshold factor or false on error
function float fann get sarprop step error threshold factor resource $ann	returns the sarprop step error threshold factor
function fann get sarprop weight decay shift $ann	neural network resource
function float fann get sarprop weight decay shift	the sarprop weight decay shift or false on error
function float fann get sarprop weight decay shift resource $ann	returns the sarprop weight decay shift
function fann get total connections $ann	neural network resource
function int fann get total connections	total number of connections in the entire network or false on error
function fann get total neurons $ann	neural network resource
function int fann get total neurons	total number of neurons in the entire network or false on error
function fann get train error function $ann	neural network resource
function int fann get train error function	the error function constant or false on error
function fann get train stop function $ann	neural network resource
function int fann get train stop function	the stop function constant or false on error
function fann get training algorithm $ann	neural network resource
function int fann get training algorithm	training algorithm constant or false on error
function fann init weights $train_data	neural network training data resource
function fann init weights $ann	neural network resource
function bool fann init weights	returns true on success or false otherwise
function bool fann init weights resource $ann resource $train_data	initialize the weights using widrow + nguyen&rsquo;s algorithm
function fann length train data $data	neural network training data resource
function int fann length train data	number of elements in the train data resource or false on error
function int fann length train data resource $data	returns the number of training patterns in the train data
function fann merge train data $data1	neural network training data resource
function fann merge train data $data2	neural network training data resource
function resource fann merge train data	new merged train data resource or false on error
function resource fann merge train data resource $data1 resource $data2	merges the train data
function fann num input train data $data	neural network training data resource
function int fann num input train data	the number of inputs or false on error
function int fann num input train data resource $data	returns the number of inputs in each of the training patterns in the train data
function fann randomize weights $min_weight	minimum weight value
function fann randomize weights $max_weight	maximum weight value
function fann randomize weights $ann	neural network resource
function bool fann randomize weights	returns true on success or false otherwise
function fann read train from file $filename	the input file in the following format: num_train_data num_input num_output inputdata seperated by space outputdata seperated by space
function resource fann read train from file	returns a train data resource on success or false on error
function fann reset MSE $ann	neural network resource
function bool fann reset MSE	returns true on success or false otherwise
function fann save $configuration_file	the configuration file path
function fann save $ann	neural network resource
function bool fann save	returns true on success or false otherwise
function fann scale input train data $new_max	new maximum after scaling inputs in training data
function fann scale input train data $train_data	neural network training data resource
function fann scale input train data $new_min	new minimum after scaling inputs in training data
function bool fann scale input train data	returns true on success or false otherwise
function fann scale input $input_vector	input vector that will be scaled
function fann scale input $ann	neural network resource
function bool fann scale input	returns true on success or false otherwise
function fann scale output train data $new_min	new minimum after scaling outputs in training data
function fann scale output train data $train_data	neural network training data resource
function fann scale output train data $new_max	new maximum after scaling outputs in training data
function bool fann scale output train data	returns true on success or false otherwise
function fann scale output $output_vector	output vector that will be scaled
function fann scale output $ann	neural network resource
function bool fann scale output	returns true on success or false otherwise
function fann scale train data $new_max	new maximum after scaling inputs and outputs in training data
function fann scale train data $new_min	new minimum after scaling inputs and outputs in training data
function fann scale train data $train_data	neural network training data resource
function bool fann scale train data	returns true on success or false otherwise
function fann set activation function hidden $activation_function	the activation functions constant
function fann set activation function hidden $ann	neural network resource
function bool fann set activation function hidden	returns true on success or false otherwise
function fann set activation function layer $layer	layer number
function fann set activation function layer $activation_function	the activation functions constant
function fann set activation function layer $ann	neural network resource
function bool fann set activation function layer	returns true on success or false otherwise
function bool fann set activation function layer resource $ann int $activation_function int $layer	sets the activation function for all the neurons in the supplied layer
function fann set activation function output $activation_function	the activation functions constant
function fann set activation function output $ann	neural network resource
function bool fann set activation function output	returns true on success or false otherwise
function fann set activation function $neuron	neuron number
function fann set activation function $layer	layer number
function fann set activation function $activation_function	the activation functions constant
function fann set activation function $ann	neural network resource
function bool fann set activation function	returns true on success or false otherwise
function bool fann set activation function resource $ann int $activation_function int $layer int $neuron	sets the activation function for supplied neuron and layer
function fann set activation steepness layer $layer	layer number
function fann set activation steepness layer $activation_steepness	the activation steepness
function fann set activation steepness layer $ann	neural network resource
function bool fann set activation steepness layer	returns true on success or false otherwise
function bool fann set activation steepness layer resource $ann float $activation_steepness int $layer	sets the activation steepness for all of the neurons in the supplied layer number
function fann set activation steepness output $activation_steepness	the activation steepness
function fann set activation steepness output $ann	neural network resource
function bool fann set activation steepness output	returns true on success or false otherwise
function fann set bit fail limit $bit_fail_limit	the bit fail limit
function fann set bit fail limit $ann	neural network resource
function bool fann set bit fail limit	returns true on success or false otherwise
function fann set cascade activation functions $cascade_activation_functions	the array of cascade candidate activation functions
function fann set cascade activation functions $ann	neural network resource
function bool fann set cascade activation functions	returns true on success or false otherwise
function fann set cascade activation steepnesses $cascade_activation_steepnesses_count	the array of cascade candidate activation steepnesses
function fann set cascade activation steepnesses $ann	neural network resource
function bool fann set cascade activation steepnesses	returns true on success or false otherwise
function fann set cascade candidate change fraction $cascade_candidate_change_fraction	the cascade candidate change fraction
function fann set cascade candidate change fraction $ann	neural network resource
function bool fann set cascade candidate change fraction	returns true on success or false otherwise
function fann set cascade candidate limit $cascade_candidate_limit	the candidate limit
function fann set cascade candidate limit $ann	neural network resource
function bool fann set cascade candidate limit	returns true on success or false otherwise
function fann set cascade max cand epochs $cascade_max_cand_epochs	the max candidate epochs
function fann set cascade max cand epochs $ann	neural network resource
function bool fann set cascade max cand epochs	returns true on success or false otherwise
function fann set cascade max out epochs $cascade_max_out_epochs	the maximum out epochs
function fann set cascade max out epochs $ann	neural network resource
function bool fann set cascade max out epochs	returns true on success or false otherwise
function fann set cascade min cand epochs $cascade_min_cand_epochs	the minimum candidate epochs
function fann set cascade min cand epochs $ann	neural network resource
function bool fann set cascade min cand epochs	returns true on success or false otherwise
function fann set cascade min out epochs $cascade_min_out_epochs	the minimum out epochs
function fann set cascade min out epochs $ann	neural network resource
function bool fann set cascade min out epochs	returns true on success or false otherwise
function fann set cascade num candidate groups $cascade_num_candidate_groups	the number of candidate groups
function fann set cascade num candidate groups $ann	neural network resource
function bool fann set cascade num candidate groups	returns true on success or false otherwise
function fann set cascade output change fraction $cascade_output_change_fraction	the cascade output change fraction
function fann set cascade output change fraction $ann	neural network resource
function bool fann set cascade output change fraction	returns true on success or false otherwise
function fann set cascade output stagnation epochs $cascade_output_stagnation_epochs	the number of cascade output stagnation epochs
function fann set cascade output stagnation epochs $ann	neural network resource
function bool fann set cascade output stagnation epochs	returns true on success or false otherwise
function fann set cascade weight multiplier $cascade_weight_multiplier	the weight multiplier
function fann set cascade weight multiplier $ann	neural network resource
function bool fann set cascade weight multiplier	returns true on success or false otherwise
function fann set error log $errdat	either neural network resource or neural network trainining data resource
function fann set error log $log_file	the log file path
function fann set input scaling params $new_input_min	the desired lower bound in input data after scaling not strictly followed
function fann set input scaling params $new_input_max	the desired upper bound in input data after scaling not strictly followed
function fann set input scaling params $train_data	neural network training data resource
function fann set input scaling params $ann	neural network resource
function bool fann set input scaling params	returns true on success or false otherwise
function fann set learning momentum $learning_momentum	the learning momentum
function fann set learning momentum $ann	neural network resource
function bool fann set learning momentum	returns true on success or false otherwise
function fann set learning rate $learning_rate	the learning rate
function fann set learning rate $ann	neural network resource
function bool fann set learning rate	returns true on success or false otherwise
function fann set quickprop decay $quickprop_decay	the quickprop decay factor
function fann set quickprop decay $ann	neural network resource
function bool fann set quickprop decay	returns true on success or false otherwise
function fann set rprop decrease factor $rprop_decrease_factor	the decrease factor
function fann set rprop decrease factor $ann	neural network resource
function bool fann set rprop decrease factor	returns true on success or false otherwise
function fann set rprop delta max $rprop_delta_max	the maximum step-size
function fann set rprop delta max $ann	neural network resource
function bool fann set rprop delta max	returns true on success or false otherwise
function bool fann set rprop delta max resource $ann float $rprop_delta_max	sets the maximum step-size
function fann set rprop delta zero $rprop_delta_zero	the initial step-size
function fann set rprop delta zero $ann	neural network resource
function bool fann set rprop delta zero	returns true on success or false otherwise
function bool fann set rprop delta zero resource $ann float $rprop_delta_zero	sets the initial step-size
function fann set rprop increase factor $rprop_increase_factor	the increase factor
function fann set rprop increase factor $ann	neural network resource
function bool fann set rprop increase factor	returns true on success or false otherwise
function fann set sarprop step error shift $sarprop_step_error_shift	the sarprop step error shift
function fann set sarprop step error shift $ann	neural network resource
function bool fann set sarprop step error shift	returns true on success or false otherwise
function fann set sarprop step error threshold factor $sarprop_step_error_threshold_factor	the sarprop step error threshold factor
function fann set sarprop step error threshold factor $ann	neural network resource
function bool fann set sarprop step error threshold factor	returns true on success or false otherwise
function fann set sarprop temperature $sarprop_temperature	the sarprop temperature
function fann set sarprop temperature $ann	neural network resource
function bool fann set sarprop temperature	returns true on success or false otherwise
function fann set train error function $error_function	the error function constant
function fann set train error function $ann	neural network resource
function bool fann set train error function	returns true on success or false otherwise
function fann set train stop function $stop_function	the stop function constant
function fann set train stop function $ann	neural network resource
function bool fann set train stop function	returns true on success or false otherwise
function fann set training algorithm $training_algorithm	training algorithm constant
function fann set training algorithm $ann	neural network resource
function bool fann set training algorithm	returns true on success or false otherwise
function fann set weight array $connections	an array of fannconnection objects
function fann set weight array $ann	neural network resource
function bool fann set weight array	returns true on success or false otherwise
function fann set weight $weight	connection weight
function fann set weight $from_neuron	the neuron where the connection starts
function fann set weight $to_neuron	the neuron where the connection ends
function fann set weight $ann	neural network resource
function bool fann set weight	returns true on success or false otherwise
function bool fann set weight resource $ann int $from_neuron int $to_neuron float $weight	set a connection in the network
function fann shuffle train data $train_data	neural network training data resource
function bool fann shuffle train data	returns true on success or false otherwise
function fann subset train data $data	neural network training data resource
function fann subset train data $pos	starting position
function fann subset train data $length	the number of copied elements
function resource fann subset train data	returns a train data resource on success or false on error
function resource fann subset train data resource $data int $pos int $length	returns an copy of a subset of the train data
function fann train epoch $data	neural network training data resource
function fann train epoch $ann	neural network resource
function float fann train epoch	the mse or false on error
function float fann train epoch resource $ann resource $data	train one epoch with a set of training data
function fann train $desired_output	an array of desired outputs
function fann train $input	an array of inputs
function fann train $ann	neural network resource
function bool fann train	returns true on success or false otherwise
function fbsql affected rows $link_identifier	a frontbase link identifier returned by fbsql_connect() or fbsql_pconnect()
function int fbsql affected rows	if the last query failed this function will return -1
function int fbsql affected rows resource $link_identifier	get number of affected rows in previous frontbase operation
function fbsql blob size $link_identifier	a frontbase link identifier returned by fbsql_connect() or fbsql_pconnect()
function fbsql blob size $blob_handle	a blob handle returned by fbsql_create_blob()
function int fbsql blob size	returns the blob size as an integer or false on error
function int fbsql blob size string $blob_handle resource $link_identifier	get the size of a blob
function fbsql clob size $link_identifier	a frontbase link identifier returned by fbsql_connect() or fbsql_pconnect()
function fbsql clob size $clob_handle	a clob handle returned by fbsql_create_clob()
function int fbsql clob size	returns the clob size as an integer or false on error
function int fbsql clob size string $clob_handle resource $link_identifier	get the size of a clob
function fbsql close $link_identifier	a frontbase link identifier returned by fbsql_connect() or fbsql_pconnect()
function bool fbsql close	returns true on success or false on failure
function bool fbsql close resource $link_identifier	close frontbase connection
function fbsql commit $link_identifier	a frontbase link identifier returned by fbsql_connect() or fbsql_pconnect()
function bool fbsql commit	returns true on success or false on failure
function bool fbsql commit resource $link_identifier	commits a transaction to the database
function fbsql create blob $link_identifier	a frontbase link identifier returned by fbsql_connect() or fbsql_pconnect()
function fbsql create blob $blob_data	the blob data
function string fbsql create blob	returns a resource handle to the newly created blob which can be used with insert and update commands to store the blob in the database
function string fbsql create blob string $blob_data resource $link_identifier	create a blob
function fbsql data seek $result	a result identifier returned by fbsql_query() or fbsql_db_query()
function fbsql data seek $row_number	the row number
function bool fbsql data seek	returns true on success or false on failure
function bool fbsql data seek resource $result int $row_number	move internal result pointer
function fbsql database $database	the database name
function fbsql database $link_identifier	a frontbase link identifier returned by fbsql_connect() or fbsql_pconnect()
function string fbsql database	returns the name of the database used with this connection
function string fbsql database resource $link_identifier string $database	get or set the database name used with a connection
function fbsql db status $link_identifier	a frontbase link identifier returned by fbsql_connect() or fbsql_pconnect()
function fbsql db status $database_name	the database name
function int fbsql db status	returns an integer value with the current status
function int fbsql db status string $database_name resource $link_identifier	get the status for a given database
function fbsql drop db $link_identifier	a frontbase link identifier returned by fbsql_connect() or fbsql_pconnect()
function fbsql drop db $database_name	the database name as a string
function bool fbsql drop db	returns true on success or false on failure
function bool fbsql drop db string $database_name resource $link_identifier	drop delete a frontbase database
function fbsql errno $link_identifier	a frontbase link identifier returned by fbsql_connect() or fbsql_pconnect()
function int fbsql errno	returns the error number from the last fbsql function or 0 zero if no error occurred
function int fbsql errno resource $link_identifier	returns the error number from previous operation
function fbsql error $link_identifier	a frontbase link identifier returned by fbsql_connect() or fbsql_pconnect()
function string fbsql error	returns the error text from the last fbsql function or the empty string if no error occurred
function string fbsql error resource $link_identifier	returns the error message from previous operation
function fbsql fetch array $result	a result identifier returned by fbsql_query() or fbsql_db_query()
function fbsql fetch array $result_type	a constant and can take the following values: fbsql_assoc fbsql_num or fbsql_both
function array fbsql fetch array	returns an array that corresponds to the fetched row or false if there are no more rows
function array fbsql fetch array resource $result int $result_type	fetch a result row as an associative array a numeric array or both
function fbsql fetch assoc $result	a result identifier returned by fbsql_query() or fbsql_db_query()
function array fbsql fetch assoc	returns an associative array that corresponds to the fetched row or false if there are no more rows
function array fbsql fetch assoc resource $result	fetch a result row as an associative array
function fbsql fetch field $field_offset	the numerical offset of the field
function fbsql fetch field $result	a result identifier returned by fbsql_query() or fbsql_db_query()
function object fbsql fetch field	returns an object containing field information or false on errors
function object fbsql fetch field resource $result int $field_offset	get column information from a result and return as an object
function fbsql fetch lengths $result	a result identifier returned by fbsql_query() or fbsql_db_query()
function array fbsql fetch lengths	returns an array starting at offset 0 that corresponds to the lengths of each field in the last row fetched by fbsql_fetch_row() or false on error
function array fbsql fetch lengths resource $result	get the length of each output in a result
function fbsql fetch row $result	a result identifier returned by fbsql_query() or fbsql_db_query()
function array fbsql fetch row	returns an array that corresponds to the fetched row where each result column is stored in an offset starting at offset 0 or false if there are no more rows
function array fbsql fetch row resource $result	get a result row as an enumerated array
function fbsql field len $field_offset	the numerical offset of the field
function fbsql field len $result	a result pointer returned by fbsql_list_fields()
function int fbsql field len	returns the length of the specified field
function fbsql field name $field_index	the numerical offset of the field
function fbsql field name $result	a result pointer returned by fbsql_list_fields()
function string fbsql field name	returns the name as a string or false if the field doesnt exist
function string fbsql field name resource $result int $field_index	get the name of the specified field in a result
function fbsql field seek $field_offset	the numerical offset of the field
function fbsql field seek $result	a result identifier returned by fbsql_query() or fbsql_db_query()
function bool fbsql field seek	returns true on success or false on failure
function bool fbsql field seek resource $result int $field_offset	set result pointer to a specified field offset
function fbsql field table $field_offset	the numerical offset of the field
function fbsql field table $result	a result identifier returned by fbsql_query() or fbsql_db_query()
function string fbsql field table	returns the name of the table as a string
function string fbsql field table resource $result int $field_offset	get name of the table the specified field is in
function fbsql field type $field_offset	the numerical offset of the field
function fbsql field type $result	a result identifier returned by fbsql_query() or fbsql_db_query()
function string fbsql field type	returns the field type as a string
function string fbsql field type resource $result int $field_offset	get the type of the specified field in a result
function fbsql free result $result	a result identifier returned by fbsql_query() or fbsql_db_query()
function bool fbsql free result	returns true on success or false on failure
function bool fbsql free result resource $result	free result memory
function fbsql list dbs $link_identifier	a frontbase link identifier returned by fbsql_connect() or fbsql_pconnect()
function resource fbsql list dbs	returns a result pointer or false on error
function resource fbsql list dbs resource $link_identifier	list databases available on a frontbase server
function fbsql next result $result	a result identifier returned by fbsql_query() or fbsql_db_query()
function bool fbsql next result	returns true if an additional result set was available or false otherwise
function bool fbsql next result resource $result	move the internal result pointer to the next result
function fbsql num rows $result	a result identifier returned by fbsql_query() or fbsql_db_query()
function int fbsql num rows	returns the number of rows returned by the last select statement
function int fbsql num rows resource $result	get number of rows in result
function fbsql password $password	if provided this will be the new connection password
function fbsql password $link_identifier	a frontbase link identifier returned by fbsql_connect() or fbsql_pconnect()
function string fbsql password	returns the current password used for the connection
function fbsql query $query	the sql query to be executed
function fbsql query $link_identifier	a frontbase link identifier returned by fbsql_connect() or fbsql_pconnect()
function resource fbsql query	fbsql_query() returns true non-zero or false to indicate whether or not the query succeeded
function resource fbsql query string $query resource $link_identifier int $batch_size	send a frontbase query
function fbsql read clob $link_identifier	a frontbase link identifier returned by fbsql_connect() or fbsql_pconnect()
function fbsql read clob $clob_handle	a clob handle returned by fbsql_create_clob()
function string fbsql read clob	returns a string containing the specified clob data
function string fbsql read clob string $clob_handle resource $link_identifier	read a clob from the database
function fbsql result $result	a result identifier returned by fbsql_query() or fbsql_db_query()
function fbsql result $field	can be the fields offset or the fields name or the fields table dot fields name tablename
function mixed fbsql result resource $result int $row mixed $field	get result data
function fbsql rollback $link_identifier	a frontbase link identifier returned by fbsql_connect() or fbsql_pconnect()
function bool fbsql rollback	returns true on success or false on failure
function bool fbsql rollback resource $link_identifier	rollback a transaction to the database
function fbsql rows fetched $result	a result identifier returned by fbsql_query() or fbsql_db_query()
function int fbsql rows fetched	returns the number of rows as an integer
function int fbsql rows fetched resource $result	get the number of rows affected by the last statement
function fbsql select db $link_identifier	a frontbase link identifier returned by fbsql_connect() or fbsql_pconnect()
function fbsql select db $database_name	the name of the database to be selected
function bool fbsql select db	returns true on success or false on failure
function bool fbsql select db string $database_name resource $link_identifier	select a frontbase database
function fbsql set lob mode $result	a result identifier returned by fbsql_query() or fbsql_db_query()
function fbsql set lob mode $lob_mode	can be one of: fbsql_lob_direct - lob data is retrieved directly
function bool fbsql set lob mode	returns true on success or false on failure
function bool fbsql set lob mode resource $result int $lob_mode	set the lob retrieve mode for a frontbase result set
function fbsql set password $user	the user name
function fbsql set password $old_password	the old password to be replaced
function fbsql set password $password	the new password to be set
function fbsql set password $link_identifier	a frontbase link identifier returned by fbsql_connect() or fbsql_pconnect()
function bool fbsql set password	returns true on success or false on failure
function bool fbsql set password resource $link_identifier string $user string $password string $old_password	change the password for a given user
function fbsql set transaction $link_identifier	a frontbase link identifier returned by fbsql_connect() or fbsql_pconnect()
function fbsql set transaction $locking	the type of locking to be set
function fbsql set transaction $isolation	the type of isolation to be set
function void fbsql set transaction resource $link_identifier int $locking int $isolation	set the transaction locking and isolation
function fbsql table name $index	integer index for the current table
function fbsql table name $result	a result pointer returned by fbsql_list_tables()
function string fbsql table name	returns the name of the table as a string
function string fbsql table name resource $result int $index	get table name of field
function fbsql warnings $OnOff	whether to enable warnings or no
function bool fbsql warnings	returns true if warnings is turned on false otherwise
function bool fbsql warnings bool $OnOff	enable or disable frontbase warnings
function fclose $handle	the file pointer must be valid and must point to a file successfully opened by fopen() or fsockopen()
function bool fclose	returns true on success or false on failure
function bool fclose resource $handle	closes an open file pointer
function fdf close $fdf_document	the fdf document handle returned by fdf_create() fdf_open() or fdf_open_string()
function void fdf close resource $fdf_document	close an fdf document
function resource fdf create	returns a fdf document handle or false on error
function resource fdf create	create a new fdf document
function fdf error $error_code	an error code obtained with fdf_errno()
function string fdf error	returns the error message as a string or the string no error if nothing went wrong
function string fdf error int $error_code	return error description for fdf error code
function fdf get attachment $fdf_document	the fdf document handle returned by fdf_create() fdf_open() or fdf_open_string()
function fdf get attachment $savepath	may be the name of a plain file or an existing directory in which the file is to be created under its original name
function array fdf get attachment	the returned array contains the following fields: path - path were the file got stored size - size of the stored file in bytes type - mimetype if given in the fdf
function array fdf get attachment resource $fdf_document string $fieldname string $savepath	extracts uploaded file embedded in the fdf
function fdf get encoding $fdf_document	the fdf document handle returned by fdf_create() fdf_open() or fdf_open_string()
function string fdf get encoding	returns the encoding as a string
function string fdf get encoding resource $fdf_document	get the value of the / encoding key
function fdf get file $fdf_document	the fdf document handle returned by fdf_create() fdf_open() or fdf_open_string()
function string fdf get file	returns the key value as a string
function string fdf get file resource $fdf_document	get the value of the / f key
function fdf get status $fdf_document	the fdf document handle returned by fdf_create() fdf_open() or fdf_open_string()
function string fdf get status	returns the key value as a string
function string fdf get status resource $fdf_document	get the value of the / status key
function fdf get version $fdf_document	the fdf document handle returned by fdf_create() fdf_open() or fdf_open_string()
function string fdf get version	returns the version as a string
function string fdf get version resource $fdf_document	gets version number for fdf api or file
function void fdf header	sets fdf-specific output headers
function fdf next field name $fdf_document	the fdf document handle returned by fdf_create() fdf_open() or fdf_open_string()
function fdf next field name $fieldname	name of the fdf field as a string
function string fdf next field name	returns the field name as a string
function string fdf next field name resource $fdf_document string $fieldname	get the next field name
function fdf open string $fdf_data	the data as returned from a pdf form or created using fdf_create() and fdf_save_string()
function resource fdf open string	returns a fdf document handle or false on error
function resource fdf open string string $fdf_data	read a fdf document from a string
function fdf open $filename	path to the fdf file
function resource fdf open	returns a fdf document handle or false on error
function resource fdf open string $filename	open a fdf document
function fdf set ap $fdf_document	the fdf document handle returned by fdf_create() fdf_open() or fdf_open_string()
function fdf set ap $face	the possible values fdfnormalap fdfrolloverap and fdfdownap
function bool fdf set ap	returns true on success or false on failure
function bool fdf set ap resource $fdf_document string $field_name int $face string $filename int $page_number	set the appearance of a field
function fdf set flags $fdf_document	the fdf document handle returned by fdf_create() fdf_open() or fdf_open_string()
function fdf set flags $fieldname	name of the fdf field as a string
function bool fdf set flags	returns true on success or false on failure
function bool fdf set flags resource $fdf_document string $fieldname int $whichFlags int $newFlags	sets a flag of a field
function fdf set javascript action $fdf_document	the fdf document handle returned by fdf_create() fdf_open() or fdf_open_string()
function fdf set javascript action $fieldname	name of the fdf field as a string
function bool fdf set javascript action	returns true on success or false on failure
function bool fdf set javascript action resource $fdf_document string $fieldname int $trigger string $script	sets an javascript action of a field
function fdf set opt $fdf_document	the fdf document handle returned by fdf_create() fdf_open() or fdf_open_string()
function fdf set opt $fieldname	name of the fdf field as a string
function bool fdf set opt	returns true on success or false on failure
function bool fdf set opt resource $fdf_document string $fieldname int $element string $str1 string $str2	sets an option of a field
function fdf set submit form action $fdf_document	the fdf document handle returned by fdf_create() fdf_open() or fdf_open_string()
function fdf set submit form action $fieldname	name of the fdf field as a string
function bool fdf set submit form action	returns true on success or false on failure
function bool fdf set submit form action resource $fdf_document string $fieldname int $trigger string $script int $flags	sets a submit form action of a field
function fdf set target frame $fdf_document	the fdf document handle returned by fdf_create() fdf_open() or fdf_open_string()
function fdf set target frame $frame_name	the frame name as a string
function bool fdf set target frame	returns true on success or false on failure
function bool fdf set target frame resource $fdf_document string $frame_name	set target frame for form display
function fdf set value $value	this parameter will be stored as a string unless it is an array
function fdf set value $fdf_document	the fdf document handle returned by fdf_create() fdf_open() or fdf_open_string()
function fdf set value $isName	note : in older versions of the fdf toolkit last parameter determined if the field value was to be converted to a pdf name = 1 or set to a pdf string = 0
function fdf set value $fieldname	name of the fdf field as a string
function bool fdf set value	returns true on success or false on failure
function bool fdf set value resource $fdf_document string $fieldname mixed $value int $isName	set the value of a field
function fdf set version $fdf_document	the fdf document handle returned by fdf_create() fdf_open() or fdf_open_string()
function fdf set version $version	the version number
function bool fdf set version	returns true on success or false on failure
function bool fdf set version resource $fdf_document string $version	sets version number for a fdf file
function feof $handle	the file pointer must be valid and must point to a file successfully opened by fopen() or fsockopen() and not yet closed by fclose()
function bool feof	returns true if the file pointer is at eof or an error occurs including socket timeout ; otherwise returns false
function fflush $handle	the file pointer must be valid and must point to a file successfully opened by fopen() or fsockopen() and not yet closed by fclose()
function bool fflush	returns true on success or false on failure
function bool fflush resource $handle	flushes the output to a file
function fgetc $handle	the file pointer must be valid and must point to a file successfully opened by fopen() or fsockopen() and not yet closed by fclose()
function string fgetc	returns a string containing a single character read from the file pointed to by handle
function string fgetc resource $handle	gets character from file pointer
function fgetcsv $escape	the optional escape parameter sets the escape character one character only
function fgetcsv $delimiter	the optional delimiter parameter sets the field delimiter one character only
function fgetcsv $handle	a valid file pointer to a file successfully opened by fopen() popen() or fsockopen()
function fgetcsv $enclosure	the optional enclosure parameter sets the field enclosure character one character only
function fgetcsv $length	must be greater than the longest line in characters to be found in the csv file allowing for trailing line-end characters
function array fgetcsv	returns an indexed array containing the fields read
function array fgetcsv resource $handle int $length string $delimiter string $enclosure string $escape	gets line from file pointer and parse for csv fields
function fgets $length	reading ends when length - 1 bytes have been read or a newline which is included in the return value or an eof whichever comes first
function fgets $handle	the file pointer must be valid and must point to a file successfully opened by fopen() or fsockopen() and not yet closed by fclose()
function string fgets	returns a string of up to length - 1 bytes read from the file pointed to by handle
function string fgets resource $handle int $length	gets line from file pointer
function fgetss $allowable_tags	you can use the optional third parameter to specify tags which should not be stripped
function fgetss $handle	the file pointer must be valid and must point to a file successfully opened by fopen() or fsockopen() and not yet closed by fclose()
function fgetss $length	length of the data to be retrieved
function string fgetss	returns a string of up to length - 1 bytes read from the file pointed to by handle with all html and php code stripped
function string fgetss resource $handle int $length string $allowable_tags	gets line from file pointer and strip html tags
function file exists $filename	path to the file or directory
function bool file exists	returns true if the file or directory specified by filename exists; false otherwise
function file get contents $filename	name of the file to read
function file get contents $maxlen	maximum length of data read
function file get contents $context	a valid context resource created with stream_context_create()
function file get contents $offset	the offset where the reading starts on the original stream
function file get contents $use_include_path	note : as of php 5 the file_use_include_path constant can be used to trigger include path search
function string file get contents	the function returns the read data or false on failure
function string file get contents string $filename bool $use_include_path resource $context int $offset int $maxlen	reads entire file into a string
function file put contents $flags	the value of flags can be any combination of the following flags joined with the binary or | operator
function file put contents $filename	path to the file where to write the data
function file put contents $context	a valid context resource created with stream_context_create()
function file put contents $data	the data to write
function int file put contents	this function returns the number of bytes that were written to the file or false on failure
function int file put contents string $filename mixed $data int $flags resource $context	write a string to a file
function file $filename	path to the file
function file $FILE_USE_INCLUDE_PATH	search for the file in the include_path
function file $flags	the optional parameter flags can be one or more of the following constants: file_use_include_path search for the file in the include_path
function file $FILE_IGNORE_NEW_LINES	do not add newline at the end of each array element
function file $FILE_SKIP_EMPTY_LINES	skip empty lines
function file $context	a context resource created with the stream_context_create() function
function array file	returns the file in an array
function array file string $filename int $flags resource $context	reads entire file into an array
function filectime $filename	path to the file
function int filectime	returns the time the file was last changed or false on failure
function int filectime string $filename	gets inode change time of file
function filegroup $filename	path to the file
function int filegroup	returns the group id of the file or false if an error occurs
function int filegroup string $filename	gets file group
function filemtime $filename	path to the file
function int filemtime	returns the time the file was last modified or false on failure
function int filemtime string $filename	gets file modification time
function fileowner $filename	path to the file
function int fileowner	returns the user id of the owner of the file or false on failure
function int fileowner string $filename	gets file owner
function filepro fieldname $field_number	the field number
function string filepro fieldname	returns the name of the field as a string or false on errors
function string filepro fieldname int $field_number	gets the name of a field
function filepro fieldwidth $field_number	the field number
function int filepro fieldwidth	returns the width of the field as a integer or false on errors
function int filepro fieldwidth int $field_number	gets the width of a field
function filepro retrieve $field_number	the field number
function filepro retrieve $row_number	the row number
function string filepro retrieve	returns the specified data or false on errors
function string filepro retrieve int $row_number int $field_number	retrieves data from a filepro database
function filetype $filename	path to the file
function string filetype	returns the type of the file
function string filetype string $filename	gets file type
function filter input array $add_empty	add missing keys as null to the return value
function filter input array $definition	an array defining the arguments
function filter input array $type	one of input_get input_post input_cookie input_server or input_env
function mixed filter input array	an array containing the values of the requested variables on success or false on failure
function mixed filter input array int $type mixed $definition bool $add_empty	gets external variables and optionally filters them
function filter var array $add_empty	add missing keys as null to the return value
function filter var array $definition	an array defining the arguments
function filter var array $data	an array with string keys containing the data to filter
function mixed filter var array	an array containing the values of the requested variables on success or false on failure
function mixed filter var array array $data mixed $definition bool $add_empty	gets multiple variables and optionally filters them
function finfo open $magic_file	name of a magic database file usually something like / path / to / magic
function finfo open $options	one or disjunction of more fileinfo constants
function resource finfo open	procedural style only returns a magic database resource on success or false on failure
function resource finfo open int $options string $magic_file	create a new fileinfo resource
function void flush	flush system output buffer
function fmod $y	the divisor
function fmod $x	the dividend
function float fmod	the floating point remainder of x / y
function float fmod float $x float $y	returns the floating point remainder modulo of the division of the arguments
function fnmatch $flags	the value of flags can be any combination of the following flags joined with the binary or |) operator
function fnmatch $string	the tested string
function fnmatch $pattern	the shell wildcard pattern
function bool fnmatch	returns true if there is a match false otherwise
function bool fnmatch string $pattern string $string int $flags	match filename against a pattern
function forward static call array $function	the function or method to be called
function forward static call array $parameter	one parameter gathering all the method parameter in one array
function mixed forward static call array	returns the function result or false on error
function mixed forward static call array callable $function array $parameters	call a static method and pass the arguments as array
function forward static call $function	the function or method to be called
function forward static call $parameter	zero or more parameters to be passed to the function
function mixed forward static call	returns the function result or false on error
function mixed forward static call callable $function mixed $parameter	call a static method
function fpassthru $handle	the file pointer must be valid and must point to a file successfully opened by fopen() or fsockopen() and not yet closed by fclose()
function int fpassthru	if an error occurs fpassthru() returns false
function int fpassthru resource $handle	output all remaining data on a file pointer
function frenchtojd $year	the year as a number between 1 and 14
function frenchtojd $day	the day as a number from 1 to 30
function frenchtojd $month	the month as a number from 1 for vendémiaire to 13 for the period of 5-6 days at the end of each year
function int frenchtojd	the julian day for the given french revolution date as an integer
function fribidi log2vis $str	the logical string
function fribidi log2vis $charset	one of the fribidi_charset_xxx constants
function fribidi log2vis $direction	one of fribidi_rtl fribidi_ltr or fribidi_auto
function string fribidi log2vis	returns the visual string on success or false on failure
function string fribidi log2vis string $str string $direction int $charset	convert a logical string to a visual one
function fscanf	the optional assigned values
function fscanf $format	the specified format as described in the sprintf() documentation
function fscanf $handle	a file system pointer resource that is typically created using fopen()
function mixed fscanf	if only two parameters were passed to this function the values parsed will be returned as an array
function mixed fscanf resource $handle string $format	parses input from a file according to a format
function fseek $handle	a file system pointer resource that is typically created using fopen()
function fseek $offset	the offset
function fseek $whence	whence values are: seek_set - set position equal to offset bytes
function int fseek	upon success returns 0; otherwise returns -1
function int fseek resource $handle int $offset int $whence	seeks on a file pointer
function fsockopen $hostname	if openssl support is installed you may prefix the hostname with either ssl: / / or tls: / / to use an ssl or tls client connection over tcp / ip to connect to the remote host
function fsockopen $port	the port number
function fsockopen $errstr	the error message as a string
function fsockopen $timeout	the connection timeout in seconds
function fsockopen $errno	if provided holds the system level error number that occurred in the system-level connect() call
function resource fsockopen	fsockopen() returns a file pointer which may be used together with the other file functions such as fgets() fgetss() fwrite() fclose() and feof()
function resource fsockopen string $hostname int $port int $errno string $errstr float $timeout	open internet or unix domain socket connection
function ftok $proj	project identifier
function ftok $pathname	path to an accessible file
function int ftok	on success the return value will be the created key value otherwise -1 is returned
function int ftok string $pathname string $proj	convert a pathname and a project identifier to a system v ipc key
function ftp cdup $ftp_stream	the link identifier of the ftp connection
function bool ftp cdup	returns true on success or false on failure
function ftp chdir $directory	the target directory
function ftp chdir $ftp_stream	the link identifier of the ftp connection
function bool ftp chdir	returns true on success or false on failure
function bool ftp chdir resource $ftp_stream string $directory	changes the current directory on a ftp server
function ftp chmod $mode	the new permissions given as an octal value
function ftp chmod $filename	the remote file
function ftp chmod $ftp_stream	the link identifier of the ftp connection
function int ftp chmod	returns the new file permissions on success or false on error
function int ftp chmod resource $ftp_stream int $mode string $filename	set permissions on a file via ftp
function ftp close $ftp_stream	the link identifier of the ftp connection
function bool ftp close	returns true on success or false on failure
function bool ftp close resource $ftp_stream	closes an ftp connection
function ftp connect $timeout	this parameter specifies the timeout for all subsequent network operations
function ftp connect $port	this parameter specifies an alternate port to connect to
function ftp connect $host	the ftp server address
function resource ftp connect	returns a ftp stream on success or false on error
function resource ftp connect string $host int $port int $timeout	opens an ftp connection
function ftp fput $handle	an open file pointer on the local file
function ftp fput $remote_file	the remote file path
function ftp fput $mode	the transfer mode
function ftp fput $startpos	the position in the remote file to start uploading to
function ftp fput $ftp_stream	the link identifier of the ftp connection
function bool ftp fput	returns true on success or false on failure
function bool ftp fput resource $ftp_stream string $remote_file resource $handle int $mode int $startpos	uploads from an open file to the ftp server
function ftp get option $option	currently the following options are supported: supported runtime ftp options ftp_timeout_sec returns the current timeout used for network related operations
function ftp get option $ftp_stream	the link identifier of the ftp connection
function mixed ftp get option	returns the value on success or false if the given option is not supported
function mixed ftp get option resource $ftp_stream int $option	retrieves various runtime behaviours of the current ftp stream
function ftp get $mode	the transfer mode
function ftp get $remote_file	the remote file path
function ftp get $resumepos	the position in the remote file to start downloading from
function ftp get $local_file	the local file path will be overwritten if the file already exists
function ftp get $ftp_stream	the link identifier of the ftp connection
function bool ftp get	returns true on success or false on failure
function bool ftp get resource $ftp_stream string $local_file string $remote_file int $mode int $resumepos	downloads a file from the ftp server
function ftp login $username	the username user
function ftp login $password	the password pass
function ftp login $ftp_stream	the link identifier of the ftp connection
function bool ftp login	returns true on success or false on failure
function bool ftp login resource $ftp_stream string $username string $password	logs in to an ftp connection
function ftp mkdir $directory	the name of the directory that will be created
function ftp mkdir $ftp_stream	the link identifier of the ftp connection
function string ftp mkdir	returns the newly created directory name on success or false on error
function string ftp mkdir resource $ftp_stream string $directory	creates a directory
function ftp nb continue $ftp_stream	the link identifier of the ftp connection
function int ftp nb continue	returns ftp_failed or ftp_finished or ftp_moredata
function int ftp nb continue resource $ftp_stream	continues retrieving / sending a file non-blocking
function ftp nb fput $handle	an open file pointer on the local file
function ftp nb fput $remote_file	the remote file path
function ftp nb fput $mode	the transfer mode
function ftp nb fput $startpos	the position in the remote file to start uploading to
function ftp nb fput $ftp_stream	the link identifier of the ftp connection
function int ftp nb fput	returns ftp_failed or ftp_finished or ftp_moredata
function int ftp nb fput resource $ftp_stream string $remote_file resource $handle int $mode int $startpos	stores a file from an open file to the ftp server non-blocking
function ftp nb put $mode	the transfer mode
function ftp nb put $remote_file	the remote file path
function ftp nb put $local_file	the local file path
function ftp nb put $startpos	the position in the remote file to start uploading to
function ftp nb put $ftp_stream	the link identifier of the ftp connection
function int ftp nb put	returns ftp_failed or ftp_finished or ftp_moredata
function int ftp nb put resource $ftp_stream string $remote_file string $local_file int $mode int $startpos	stores a file on the ftp server non-blocking
function ftp pasv $pasv	if true the passive mode is turned on else its turned off
function ftp pasv $ftp_stream	the link identifier of the ftp connection
function bool ftp pasv	returns true on success or false on failure
function bool ftp pasv resource $ftp_stream bool $pasv	turns passive mode on or off
function ftp rename $newname	the new name
function ftp rename $oldname	the old file / directory name
function ftp rename $ftp_stream	the link identifier of the ftp connection
function bool ftp rename	returns true on success or false on failure
function bool ftp rename resource $ftp_stream string $oldname string $newname	renames a file or a directory on the ftp server
function ftp rmdir $directory	the directory to delete
function ftp rmdir $ftp_stream	the link identifier of the ftp connection
function bool ftp rmdir	returns true on success or false on failure
function bool ftp rmdir resource $ftp_stream string $directory	removes a directory
function ftp site $command	the site command
function ftp site $ftp_stream	the link identifier of the ftp connection
function bool ftp site	returns true on success or false on failure
function bool ftp site resource $ftp_stream string $command	sends a site command to the server
function ftp size $remote_file	the remote file
function ftp size $ftp_stream	the link identifier of the ftp connection
function int ftp size	returns the file size on success or -1 on error
function int ftp size resource $ftp_stream string $remote_file	returns the size of the given file
function ftp ssl connect $timeout	this parameter specifies the timeout for all subsequent network operations
function ftp ssl connect $port	this parameter specifies an alternate port to connect to
function ftp ssl connect $host	the ftp server address
function resource ftp ssl connect	returns a ssl-ftp stream on success or false on error
function resource ftp ssl connect string $host int $port int $timeout	opens an secure ssl-ftp connection
function func get arg $arg_num	the argument offset
function mixed func get arg	returns the specified argument or false on error
function mixed func get arg int $arg_num	return an item from the argument list
function array func get args	returns an array in which each element is a copy of the corresponding member of the current user-defined functions argument list
function array func get args	returns an array comprising a function's argument list
function int func num args	returns the number of arguments passed into the current user-defined function
function int func num args	returns the number of arguments passed to the function
function function exists $function_name	the function name as a string
function bool function exists	returns true if function_name exists and is a function false otherwise
function bool function exists string $function_name	return true if the given function has been defined
function void gc disable	deactivates the circular reference collector
function void gc enable	activates the circular reference collector
function int gc mem caches	returns the number of bytes freed
function geoip country code by name $hostname	the hostname or ip address whose location is to be looked-up
function string geoip country code by name	returns the two letter iso country code on success or false if the address cannot be found in the database
function string geoip country code by name string $hostname	get the two letter country code
function geoip country name by name $hostname	the hostname or ip address whose location is to be looked-up
function string geoip country name by name	returns the country name on success or false if the address cannot be found in the database
function string geoip country name by name string $hostname	get the full country name
function geoip database info $database	the database type as an integer
function string geoip database info	returns the corresponding database version or null on error
function string geoip database info int $database	get geoip database information
function geoip db avail $database	the database type as an integer
function bool geoip db avail	returns true is database exists false if not found or null on error
function bool geoip db avail int $database	determine if geoip database is available
function geoip domain by name $hostname	the hostname or ip address
function string geoip domain by name	returns the domain name on success or false if the address cannot be found in the database
function string geoip domain by name string $hostname	get the second level domain name
function geoip id by name $hostname	the hostname or ip address whose connection type is to be looked-up
function int geoip id by name	returns the connection type
function int geoip id by name string $hostname	get the internet connection type
function geoip org by name $hostname	the hostname or ip address
function string geoip org by name	returns the organization name on success or false if the address cannot be found in the database
function string geoip org by name string $hostname	get the organization name
function geoip region by name $hostname	the hostname or ip address whose region is to be looked-up
function array geoip region by name	returns the associative array on success or false if the address cannot be found in the database
function array geoip region by name string $hostname	get the country code and region
function geoip region name by code $region_code	the two-letter or digit region code see geoip_region_by_name()
function geoip region name by code $country_code	the two-letter country code see geoip_country_code_by_name()
function string geoip region name by code	returns the region name on success or false if the country and region code combo cannot be found
function string geoip region name by code string $country_code string $region_code	returns the region name for some country and region code combo
function geoip setup custom directory $path	the full path of where the geoip database is on disk
function void geoip setup custom directory string $path	set a custom directory for the geoip database
function geoip time zone by country and region $region_code	the two-letter or digit region code see geoip_region_by_name()
function geoip time zone by country and region $country_code	the two-letter country code see geoip_country_code_by_name()
function string geoip time zone by country and region	returns the time zone on success or false if the country and region code combo cannot be found
function string geoip time zone by country and region string $country_code string $region_code	returns the time zone for some country and region code combo
function string get called class	returns the class name
function string get called class	the late static binding class name
function get cfg var $option	the configuration option name
function string get cfg var	returns the current value of the php configuration variable specified by option or false if an error occurs
function array get declared classes	returns an array of the names of the declared classes in the current script
function array get declared classes	returns an array with the name of the defined classes
function array get declared interfaces	returns an array of the names of the declared interfaces in the current script
function array get declared interfaces	returns an array of all declared interfaces
function get defined constants $categorize	causing this function to return a multi-dimensional array with categories in the keys of the first dimension and constants and their values in the second dimension
function array get defined constants	returns an array of constant name = > constant value array optionally groupped by extension name registering the constant
function array get defined constants bool $categorize	returns an associative array with the names of all the constants and their values
function get extension funcs $module_name	the module name
function array get extension funcs	returns an array with all the functions or false if module_name is not a valid extension
function array get extension funcs string $module_name	returns an array with the names of the functions of a module
function get headers $url	the target url
function get headers $format	if the optional format parameter is set to non-zero get_headers() parses the response and sets the arrays keys
function array get headers	returns an indexed or associative array with the headers or false on failure
function array get headers string $url int $format	fetches all the headers sent by the server in response to a http request
function array get included files	returns an array of the names of all files
function array get included files	returns an array with the names of included or required files
function get object vars $object	an object instance
function array get object vars	returns an associative array of defined object accessible non-static properties for the specified object in scope
function array get object vars object $object	gets the properties of the given object
function get parent class $object	the tested object or class name
function string get parent class	returns the name of the parent class of the class of which object is an instance or the name
function string getcwd	returns the current working directory on success or false on failure
function getdate $timestamp	the optional timestamp parameter is an integer unix timestamp that defaults to the current local time if a timestamp is not given
function array getdate	returns an associative array of information related to the timestamp
function array getdate int $timestamp	get date / time information
function getenv $varname	the variable name
function string getenv	returns the value of the environment variable varname or false if the environment variable varname does not exist
function gethostbyaddr $ip_address	the host ip address
function string gethostbyaddr	returns the host name on success the unmodified ip_address on failure or false on malformed input
function string gethostbyaddr string $ip_address	get the internet host name corresponding to a given ip address
function gethostbynamel $hostname	the host name
function array gethostbynamel	returns an array of ipv4 addresses or false if hostname could not be resolved
function array gethostbynamel string $hostname	get a list of ipv4 addresses corresponding to a given internet host name
function string gethostname	returns a string with the hostname on success otherwise false is returned
function string gethostname	gets the host name
function getimagesizefromstring $imageinfo	see getimagesize()
function getimagesizefromstring $imagedata	the image data as a string
function array getimagesizefromstring	see getimagesize()
function array getimagesizefromstring string $imagedata array $imageinfo	get the size of an image from a string
function int getlastmod	returns the time of the last modification of the current page
function int getlastmod	gets time of last page modification
function getmxrr $weight	if the weight array is given it will be filled with the weight information gathered
function getmxrr $mxhosts	a list of the mx records found is placed into the array mxhosts
function getmxrr $hostname	the internet host name
function bool getmxrr	returns true if any records are found; returns false if no records were found or if an error occurred
function bool getmxrr string $hostname array $mxhosts array $weight	get mx records corresponding to a given internet host name
function int getmypid	returns the current php process id or false on error
function int getmypid	gets php's process id
function getopt $longopts	an array of options
function getopt $options	each character in this string will be used as option characters and matched against options passed to the script starting with a single hyphen -
function array getopt	this function will return an array of option / argument pairs or false on failure
function array getopt string $options array $longopts	gets options from the command line argument list
function getprotobyname $name	the protocol name
function int getprotobyname	returns the protocol number or false on failure
function int getprotobyname string $name	get protocol number associated with protocol name
function getrusage $who	if who is 1 getrusage will be called with rusage_children
function array getrusage	returns an associative array containing the data returned from the system call
function array getrusage int $who	gets the current resource usages
function getservbyname $service	the internet service name as a string
function getservbyname $protocol	protocol is either tcp or udp in lowercase
function int getservbyname	returns the port number or false if service or protocol is not found
function int getservbyname string $service string $protocol	get port number associated with an internet service and protocol
function getservbyport $port	the port number
function getservbyport $protocol	protocol is either tcp or udp in lowercase
function string getservbyport	returns the internet service name as a string
function string getservbyport int $port string $protocol	get internet service which corresponds to port and protocol
function gettext $message	the message being translated
function string gettext	returns a translated string if one is found in the translation table or the submitted message if not found
function string gettext string $message	lookup a message in the current domain
function gettimeofday $return_float	when set to true a float instead of an array is returned
function mixed gettimeofday	by default an array is returned
function mixed gettimeofday bool $return_float	get current time
function gettype $var	the variable being type checked
function string gettype	possible values for the returned string are: boolean integer double for historical reasons double is returned in case of a float and not simply float string array object resource null unknown type
function string gettype mixed $var	get the type of a variable
function glob $flags	valid flags: glob_mark - adds a slash to each directory returned glob_nosort - return files as they appear in the directory no sorting
function glob $pattern	the pattern
function array glob	returns an array containing the matched files / directories an empty array if no file matched or false on error
function array glob string $pattern int $flags	find pathnames matching a pattern
function gmdate $timestamp	the optional timestamp parameter is an integer unix timestamp that defaults to the current local time if a timestamp is not given
function gmdate $format	the format of the outputted date string
function string gmdate	returns a formatted date string
function string gmdate string $format int $timestamp	format a gmt / utc date / time
function gmp abs $a	either a gmp number resource in php 5
function GMP gmp abs	returns the absolute value of a as a gmp number
function GMP gmp abs GMP $a	absolute value
function gmp and $b	either a gmp number resource in php 5
function gmp and $a	either a gmp number resource in php 5
function GMP gmp and	a gmp number representing the bitwise and comparison
function GMP gmp and GMP $a GMP $b	bitwise and
function gmp clrbit $index	the index of the bit to clear
function gmp clrbit $a	either a gmp number resource in php 5
function void gmp clrbit GMP $a int $index	clear bit
function gmp cmp $b	either a gmp number resource in php 5
function gmp cmp $a	either a gmp number resource in php 5
function int gmp cmp	returns a positive value if a > b zero if a = b and a negative value if a < b
function int gmp cmp GMP $a GMP $b	compare numbers
function gmp div q $a	the number being divided
function gmp div q $b	the number that a is being divided by
function gmp div q $round	the result rounding is defined by the round which can have the following values: gmp_round_zero : the result is truncated towards 0
function GMP gmp div q	a gmp number resource in php 5
function GMP gmp div q GMP $a GMP $b int $round	divide numbers
function gmp div r $d	the number that n is being divided by
function gmp div r $n	the number being divided
function gmp div r $round	see the gmp_div_q() function for description of the round argument
function GMP gmp div r	the remainder as a gmp number
function GMP gmp div r GMP $n GMP $d int $round	remainder of the division of numbers
function gmp divexact $d	the number that a is being divided by
function gmp divexact $n	the number being divided
function GMP gmp divexact	a gmp number resource in php 5
function GMP gmp divexact GMP $n GMP $d	exact division of numbers
function gmp export $word_size	default value is 1
function gmp export $gmpnumber	the gmp number being exported
function gmp export $options	default value is gmp_msw_first | gmp_native_endian
function string gmp export	returns a string or false on failure
function string gmp export GMP $gmpnumber integer $word_size integer $options	export to a binary string
function gmp fact $a	the factorial number
function GMP gmp fact	a gmp number resource in php 5
function GMP gmp fact mixed $a	factorial
function gmp gcd $b	either a gmp number resource in php 5
function gmp gcd $a	either a gmp number resource in php 5
function GMP gmp gcd	a positive gmp number that divides into both a and b
function GMP gmp gcd GMP $a GMP $b	calculate gcd
function gmp gcdext $b	either a gmp number resource in php 5
function gmp gcdext $a	either a gmp number resource in php 5
function array gmp gcdext	an array of gmp numbers
function array gmp gcdext GMP $a GMP $b	calculate gcd and multipliers
function gmp hamdist $b	either a gmp number resource in php 5
function gmp hamdist $a	either a gmp number resource in php 5
function int gmp hamdist	a gmp number resource in php 5
function int gmp hamdist GMP $a GMP $b	hamming distance
function gmp init $number	an integer or a string
function gmp init $base	the base
function GMP gmp init	a gmp number resource in php 5
function GMP gmp init mixed $number int $base	create gmp number
function gmp intval $gmpnumber	either a gmp number resource in php 5
function int gmp intval	the integer value of gmpnumber
function int gmp intval GMP $gmpnumber	convert gmp number to integer
function gmp invert $b	either a gmp number resource in php 5
function gmp invert $a	either a gmp number resource in php 5
function GMP gmp invert	a gmp number on success or false if an inverse does not exist
function GMP gmp invert GMP $a GMP $b	inverse by modulo
function gmp legendre $p	either a gmp number resource in php 5
function gmp legendre $a	either a gmp number resource in php 5
function int gmp legendre	a gmp number resource in php 5
function int gmp legendre GMP $a GMP $p	legendre symbol
function gmp mod $d	the modulo that is being evaluated
function gmp mod $n	either a gmp number resource in php 5
function GMP gmp mod	a gmp number resource in php 5
function GMP gmp mod GMP $n GMP $d	modulo operation
function gmp mul $a	a number that will be multiplied by b
function gmp mul $b	a number that will be multiplied by a
function GMP gmp mul	a gmp number resource in php 5
function GMP gmp mul GMP $a GMP $b	multiply numbers
function gmp neg $a	either a gmp number resource in php 5
function GMP gmp neg	returns - a as a gmp number
function GMP gmp neg GMP $a	negate number
function gmp nextprime $a	either a gmp number resource in php 5
function GMP gmp nextprime	return the next prime number greater than a as a gmp number
function gmp popcount $a	either a gmp number resource in php 5
function int gmp popcount	the population count of a as an integer
function int gmp popcount GMP $a	population count
function gmp pow $base	the base number
function gmp pow $exp	the positive power to raise the base
function GMP gmp pow	the new raised number as a gmp number
function GMP gmp pow GMP $base int $exp	raise number into power
function gmp powm $base	the base number
function gmp powm $mod	the modulo
function gmp powm $exp	the positive power to raise the base
function GMP gmp powm	the new raised number as a gmp number
function GMP gmp powm GMP $base GMP $exp GMP $mod	raise number into power with modulo
function gmp random bits $bits	the number of bits
function GMP gmp random bits	a random gmp number
function GMP gmp random bits integer $bits	random number
function gmp random range $max	a gmp number representing the upper bound for the random number
function gmp random range $min	a gmp number representing the lower bound for the random number
function GMP gmp random range	a random gmp number
function GMP gmp random range GMP $min GMP $max	random number
function gmp root $a	either a gmp number resource in php 5
function gmp root $nth	the positive root to take of a
function GMP gmp root	the integer component of the resultant root as a gmp number
function GMP gmp root GMP $a int $nth	take the integer part of nth root
function gmp rootrem $a	either a gmp number resource in php 5
function gmp rootrem $nth	the positive root to take of a
function array gmp rootrem	a two element array where the first element is the integer component of the root and the second element is the remainder both represented as gmp numbers
function array gmp rootrem GMP $a int $nth	take the integer part and remainder of nth root
function gmp scan0 $a	the number to scan
function gmp scan0 $start	the starting bit
function int gmp scan0	returns the index of the found bit as an integer
function int gmp scan0 GMP $a int $start	scan for 0
function gmp setbit $bit_on	true to set the bit set it to 1 / on ; false to clear the bit set it to 0 / off
function gmp setbit $a	the value to modify
function gmp setbit $index	the index of the bit to set
function void gmp setbit GMP $a int $index bool $bit_on	set bit
function gmp sqrt $a	either a gmp number resource in php 5
function GMP gmp sqrt	the integer portion of the square root as a gmp number
function GMP gmp sqrt GMP $a	calculate square root
function gmp sqrtrem $a	the number being square rooted
function array gmp sqrtrem	returns array where first element is the integer square root of a and the second is the remainder i
function array gmp sqrtrem GMP $a	square root with remainder
function gmp strval $gmpnumber	the gmp number that will be converted to a string
function gmp strval $base	the base of the returned number
function string gmp strval	the number as a string
function string gmp strval GMP $gmpnumber int $base	convert gmp number to string
function gmp sub $b	the number subtracted from a
function gmp sub $a	the number being subtracted from
function GMP gmp sub	a gmp number resource in php 5
function GMP gmp sub GMP $a GMP $b	subtract numbers
function gmp testbit $a	either a gmp number resource in php 5
function gmp testbit $index	the bit to test
function bool gmp testbit	returns true if the bit is set in resource $a otherwise false
function bool gmp testbit GMP $a int $index	tests if a bit is set
function gmp xor $b	either a gmp number resource in php 5
function gmp xor $a	either a gmp number resource in php 5
function GMP gmp xor	a gmp number resource in php 5
function GMP gmp xor GMP $a GMP $b	bitwise xor
function gmstrftime $format	see description in strftime()
function gmstrftime $timestamp	the optional timestamp parameter is an integer unix timestamp that defaults to the current local time if a timestamp is not given
function string gmstrftime	returns a string formatted according to the given format string using the given timestamp or the current local time if no timestamp is given
function string gmstrftime string $format int $timestamp	format a gmt / utc time / date according to locale settings
function gnupg encryptsign $identifier	the gnupg identifier from a call to gnupg_init() or gnupg
function gnupg encryptsign $plaintext	the text being encrypted
function string gnupg encryptsign	on success this function returns the encrypted and signed text
function string gnupg encryptsign resource $identifier string $plaintext	encrypts and signs a given text
function gnupg export $identifier	the gnupg identifier from a call to gnupg_init() or gnupg
function gnupg export $fingerprint	the fingerprint key
function string gnupg export	on success this function returns the keydata
function string gnupg export resource $identifier string $fingerprint	exports a key
function gnupg setarmor $identifier	the gnupg identifier from a call to gnupg_init() or gnupg
function gnupg setarmor $armor	pass a non-zero integer-value to this function to enable armored-output default
function bool gnupg setarmor	returns true on success or false on failure
function bool gnupg setarmor resource $identifier int $armor	toggle armored output
function gnupg seterrormode $identifier	the gnupg identifier from a call to gnupg_init() or gnupg
function gnupg seterrormode $errormode	the error mode
function gnupg setsignmode $sigmode	the mode for signing
function gnupg setsignmode $identifier	the gnupg identifier from a call to gnupg_init() or gnupg
function bool gnupg setsignmode	returns true on success or false on failure
function gopher parsedir $dirent	the directory entry
function array gopher parsedir	returns an associative array whose components are: type - one of the gopher_xxx constants
function array gopher parsedir string $dirent	translate a gopher formatted directory entry into an associative array
function grapheme extract $extract_type	defines the type of units referred to by the $size parameter: grapheme_extr_count default - $size is the number of default grapheme clusters to extract
function grapheme extract $haystack	string to search
function grapheme extract $size	maximum number items - based on the $extract_type - to return
function grapheme extract $next	reference to a value that will be set to the next starting position
function grapheme extract $start	starting position in $haystack in bytes - if given it must be zero or a positive value that is less than or equal to the length of $haystack in bytes
function string grapheme extract	a string starting at offset $start and ending on a default grapheme cluster boundary that conforms to the $size and $extract_type specified
function grapheme stristr $haystack	the input string
function grapheme stristr $before_needle	if true grapheme_strstr() returns the part of the haystack before the first occurrence of the needle excluding needle
function grapheme stristr $needle	the string to look for
function string grapheme stristr	returns the portion of $haystack or false if $needle is not found
function string grapheme stristr string $haystack string $needle bool $before_needle	returns part of haystack string from the first occurrence of case-insensitive needle to the end of haystack
function grapheme strrpos $needle	the string to look for
function grapheme strrpos $offset	the optional $offset parameter allows you to specify where in $haystack to start searching as an offset in grapheme units not bytes or characters
function grapheme strrpos $haystack	the string to look in
function int grapheme strrpos	returns the position as an integer
function grapheme strstr $haystack	the input string
function grapheme strstr $before_needle	if true grapheme_strstr() returns the part of the haystack before the first occurrence of the needle excluding the needle
function grapheme strstr $needle	the string to look for
function string grapheme strstr	returns the portion of string or false if needle is not found
function string grapheme strstr string $haystack string $needle bool $before_needle	returns part of haystack string from the first occurrence of needle to the end of haystack
function grapheme substr $length	length in grapheme units
function grapheme substr $start	start position in default grapheme units
function grapheme substr $string	the input string
function int grapheme substr	returns the extracted part of $string
function gregoriantojd $day	the day as a number from 1 to 31
function gregoriantojd $year	the year as a number between -4714 and 9999
function gregoriantojd $month	the month as a number from 1 for january to 12 for december
function int gregoriantojd	the julian day for the given gregorian date as an integer
function int gregoriantojd int $month int $day int $year	converts a gregorian date to julian day count
function gupnp context get host ip $context	a context identifier returned by gupnp_context_new()
function string gupnp context get host ip	returns the ip address for the current context and false on error
function string gupnp context get host ip resource $context	get the ip address
function gupnp context host path $context	a context identifier returned by gupnp_context_new()
function gupnp context host path $local_path	path to the local file or folder to be hosted
function gupnp context host path $server_path	web server path where local_path should be hosted
function bool gupnp context host path	returns true on success or false on failure
function bool gupnp context host path resource $context string $local_path string $server_path	start hosting
function gupnp context new $port	port to run on or 0 if you dont care what port is used
function gupnp context new $host_ip	the local hosts ip address or null to use the ip address of the first non-loopback network interface
function resource gupnp context new	a context identifier
function resource gupnp context new string $host_ip int $port	create a new context
function gupnp control point browse start $cpoint	a control point identifier returned by gupnp_control_point_new()
function bool gupnp control point browse start	returns true on success or false on failure
function bool gupnp control point browse start resource $cpoint	start browsing
function gupnp control point browse stop $cpoint	a control point identifier returned by gupnp_control_point_new()
function bool gupnp control point browse stop	returns true on success or false on failure
function bool gupnp control point browse stop resource $cpoint	stop browsing
function gupnp control point callback set $callback	the callback function for the certain signal
function gupnp control point callback set $GUPNP_SIGNAL_SERVICE_PROXY_AVAILABLE	emitted whenever a new service has become available
function gupnp control point callback set $GUPNP_SIGNAL_SERVICE_PROXY_UNAVAILABLE	emitted whenever a service is not available any more
function gupnp control point callback set $signal	the value of signal
function gupnp control point callback set $arg	user data for callback
function gupnp control point callback set $GUPNP_SIGNAL_DEVICE_PROXY_UNAVAILABLE	emitted whenever a device is not available any more
function gupnp control point callback set $GUPNP_SIGNAL_DEVICE_PROXY_AVAILABLE	emitted whenever a new device has become available
function gupnp control point callback set $cpoint	a control point identifier returned by gupnp_control_point_new()
function bool gupnp control point callback set	returns true on success or false on failure
function bool gupnp control point callback set resource $cpoint int $signal mixed $callback mixed $arg	set control point callback
function gupnp control point new $context	a context identifier returned by gupnp_context_new()
function gupnp control point new $target	the search target
function resource gupnp control point new	a control point identifier
function resource gupnp control point new resource $context string $target	create a new control point
function gupnp device action callback set $callback	the callback function for the certain signal
function gupnp device action callback set $signal	the value of signal
function gupnp device action callback set $root_device	a root device identifier returned by gupnp_root_device_new()
function gupnp device action callback set $arg	user data for callback
function gupnp device action callback set $GUPNP_SIGNAL_ACTION_INVOKED	emitted whenever an action is invoked
function gupnp device action callback set $GUPNP_SIGNAL_NOTIFY_FAILED	emitted whenever notification of a client fails
function gupnp device action callback set $action_name	the name of action
function bool gupnp device action callback set	returns true on success or false on failure
function bool gupnp device action callback set resource $root_device int $signal string $action_name mixed $callback mixed $arg	set device callback function
function gupnp device info get service $type	the type of the service to be retrieved
function gupnp device info get service $root_device	a root device identifier returned by gupnp_root_device_new()
function resource gupnp device info get service	a service identifier
function resource gupnp device info get service resource $root_device string $type	get the service with type
function gupnp device info get $root_device	a root device identifier returned by gupnp_root_device_new()
function array gupnp device info get	return array wich contains the information of the root device like location url udn and etc
function gupnp root device get available $root_device	a root device identifier returned by gupnp_root_device_new()
function bool gupnp root device get available	returns true on success or false on failure
function bool gupnp root device get available resource $root_device	check whether root device is available
function gupnp root device get relative location $root_device	a root device identifier returned by gupnp_root_device_new()
function string gupnp root device get relative location	the relative location of root device
function gupnp root device new $location	location of the description file for this device relative to the http root
function gupnp root device new $context	a context identifier returned by gupnp_context_new()
function resource gupnp root device new	a root device identifier
function resource gupnp root device new resource $context string $location string $description_dir	create a new root device
function gupnp root device set available $available	set true if root_device should be available
function gupnp root device set available $root_device	a root device identifier returned by gupnp_root_device_new()
function bool gupnp root device set available	returns true on success or false on failure
function bool gupnp root device set available resource $root_device bool $available	set whether or not root_device is available
function gupnp service action get $name	the name of the variable to retrieve
function gupnp service action get $GUPNP_TYPE_INT	type of the variable is integer
function gupnp service action get $GUPNP_TYPE_LONG	type of the variable is long
function gupnp service action get $GUPNP_TYPE_DOUBLE	type of the variable is double
function gupnp service action get $GUPNP_TYPE_FLOAT	type of the variable is float
function gupnp service action get $GUPNP_TYPE_STRING	type of the variable is string
function gupnp service action get $action	a service action identifier
function gupnp service action get $type	the type of the variable to retrieve
function gupnp service action get $GUPNP_TYPE_BOOLEAN	type of the variable is boolean
function mixed gupnp service action get	the value of the variable
function gupnp service action return error $GUPNP_CONTROL_ERROR_INVALID_ACTION	the action name was invalid
function gupnp service action return error $error_code	the error code
function gupnp service action return error $GUPNP_CONTROL_ERROR_OUT_OF_SYNC	out of sync deprecated
function gupnp service action return error $GUPNP_CONTROL_ERROR_ACTION_FAILED	the action failed
function gupnp service action return error $GUPNP_CONTROL_ERROR_INVALID_ARGS	the action arguments were invalid
function gupnp service action return error $action	a service action identifier
function gupnp service action return error $error_description	the error description
function bool gupnp service action return error	returns true on success or false on failure
function gupnp service action return $action	a service action identifier
function bool gupnp service action return	returns true on success or false on failure
function gupnp service action set $name	the name of the variable to retrieve
function gupnp service action set $GUPNP_TYPE_INT	type of the variable is integer
function gupnp service action set $value	the value of the variable to retrieve
function gupnp service action set $GUPNP_TYPE_LONG	type of the variable is long
function gupnp service action set $GUPNP_TYPE_DOUBLE	type of the variable is double
function gupnp service action set $GUPNP_TYPE_FLOAT	type of the variable is float
function gupnp service action set $GUPNP_TYPE_STRING	type of the variable is string
function gupnp service action set $action	a service action identifier
function gupnp service action set $type	the type of the variable to retrieve
function gupnp service action set $GUPNP_TYPE_BOOLEAN	type of the variable is boolean
function bool gupnp service action set	returns true on success or false on failure
function gupnp service introspection get state variable $introspection	a introspection identifier
function gupnp service introspection get state variable $variable_name	the name of the variable to retreive
function array gupnp service introspection get state variable	return the state variable data or false
function array gupnp service introspection get state variable resource $introspection string $variable_name	returns the state variable data
function gupnp service notify $name	the name of the variable
function gupnp service notify $service	a service identifier
function gupnp service notify $GUPNP_TYPE_LONG	type of the variable is long
function gupnp service notify $GUPNP_TYPE_DOUBLE	type of the variable is double
function gupnp service notify $type	the type of the variable
function gupnp service notify $GUPNP_TYPE_FLOAT	type of the variable is float
function gupnp service notify $GUPNP_TYPE_STRING	type of the variable is string
function gupnp service notify $GUPNP_TYPE_INT	type of the variable is integer
function gupnp service notify $value	the value of the variable
function gupnp service notify $GUPNP_TYPE_BOOLEAN	type of the variable is boolean
function bool gupnp service notify	returns true on success or false on failure
function bool gupnp service notify resource $service string $name int $type mixed $value	notifies listening clients
function gupnp service proxy action get $name	the action name
function gupnp service proxy action get $type	the type of the variable to retrieve
function gupnp service proxy action get $GUPNP_TYPE_LONG	type of the variable is long
function gupnp service proxy action get $GUPNP_TYPE_DOUBLE	type of the variable is double
function gupnp service proxy action get $GUPNP_TYPE_FLOAT	type of the variable is float
function gupnp service proxy action get $GUPNP_TYPE_STRING	type of the variable is string
function gupnp service proxy action get $action	an action
function gupnp service proxy action get $GUPNP_TYPE_INT	type of the variable is integer
function gupnp service proxy action get $GUPNP_TYPE_BOOLEAN	type of the variable is boolean
function gupnp service proxy action get $proxy	a service proxy identifier
function mixed gupnp service proxy action get	return value of the action
function mixed gupnp service proxy action get resource $proxy string $action string $name int $type	send action to the service and get value
function gupnp service proxy action set $name	the action name
function gupnp service proxy action set $GUPNP_TYPE_LONG	type of the variable is long
function gupnp service proxy action set $value	the action value
function gupnp service proxy action set $GUPNP_TYPE_DOUBLE	type of the variable is double
function gupnp service proxy action set $type	the type of the action
function gupnp service proxy action set $GUPNP_TYPE_FLOAT	type of the variable is float
function gupnp service proxy action set $GUPNP_TYPE_STRING	type of the variable is string
function gupnp service proxy action set $action	an action
function gupnp service proxy action set $GUPNP_TYPE_INT	type of the variable is integer
function gupnp service proxy action set $GUPNP_TYPE_BOOLEAN	type of the variable is boolean
function gupnp service proxy action set $proxy	a service proxy identifier
function bool gupnp service proxy action set	returns true on success or false on failure
function bool gupnp service proxy action set resource $proxy string $action string $name mixed $value int $type	send action to the service and set value
function gupnp service proxy add notify $GUPNP_TYPE_LONG	type of the variable is long
function gupnp service proxy add notify $GUPNP_TYPE_DOUBLE	type of the variable is double
function gupnp service proxy add notify $arg	user data for callback
function gupnp service proxy add notify $type	the type of the variable
function gupnp service proxy add notify $GUPNP_TYPE_FLOAT	type of the variable is float
function gupnp service proxy add notify $GUPNP_TYPE_STRING	type of the variable is string
function gupnp service proxy add notify $value	the variable to add notification for
function gupnp service proxy add notify $GUPNP_TYPE_INT	type of the variable is integer
function gupnp service proxy add notify $callback	the callback to call when variable changes
function gupnp service proxy add notify $GUPNP_TYPE_BOOLEAN	type of the variable is boolean
function gupnp service proxy add notify $proxy	a service proxy identifier
function bool gupnp service proxy add notify	returns true on success or false on failure
function bool gupnp service proxy add notify resource $proxy string $value int $type mixed $callback mixed $arg	sets up callback for variable change notification
function gupnp service proxy callback set $callback	the callback function for the certain signal
function gupnp service proxy callback set $GUPNP_SIGNAL_SUBSCRIPTION_LOST	emitted whenever the subscription to this service has been lost due to an error condition
function gupnp service proxy callback set $signal	the value of signal
function gupnp service proxy callback set $arg	user data for callback
function gupnp service proxy callback set $proxy	a service proxy identifier
function bool gupnp service proxy callback set	returns true on success or false on failure
function gupnp service proxy get subscribed $proxy	a service proxy identifier
function bool gupnp service proxy get subscribed	returns true on success or false on failure
function gupnp service proxy set subscribed $subscribed	set true to subscribe to this service
function gupnp service proxy set subscribed $proxy	a service proxy identifier
function bool gupnp service proxy set subscribed	returns true on success or false on failure
function gzcompress $level	the level of compression
function gzcompress $data	the data to compress
function gzcompress $encoding	one of zlib_encoding_* constants
function string gzcompress	the compressed string or false if an error occurred
function string gzcompress string $data int $level int $encoding	compress a string
function gzdeflate $level	the level of compression
function gzdeflate $encoding	one of zlib_encoding_* constants
function gzdeflate $data	the data to deflate
function string gzdeflate	the deflated string or false if an error occurred
function string gzdeflate string $data int $level int $encoding	deflate a string
function gzencode $level	the level of compression
function gzencode $data	the data to encode
function gzencode $encoding_mode	the encoding mode
function string gzencode	the encoded string or false if an error occurred
function string gzencode string $data int $level int $encoding_mode	create a gzip compressed string
function gzfile $filename	the file name
function gzfile $use_include_path	you can set this optional parameter to 1 if you want to search for the file in the include_path too
function array gzfile	an array containing the file one line per cell empty lines included and with newlines still attached
function array gzfile string $filename int $use_include_path	read entire gz-file into an array
function gzgetc $zp	the gz-file pointer
function string gzgetc	the uncompressed character or false on eof unlike gzeof()
function string gzgetc resource $zp	get character from gz-file pointer
function gzgets $length	the length of data to get
function gzgets $zp	the gz-file pointer
function string gzgets	the uncompressed string or false on error
function string gzgets resource $zp int $length	get line from file pointer
function gzinflate $data	the data compressed by gzdeflate()
function gzinflate $length	the maximum length of data to decode
function string gzinflate	the original uncompressed data or false on error
function string gzinflate string $data int $length	inflate a deflated string
function gzpassthru $zp	the gz-file pointer
function int gzpassthru	the number of uncompressed characters read from gz and passed through to the input or false on error
function int gzpassthru resource $zp	output all remaining data on a gz-file pointer
function gzread $length	the number of bytes to read
function gzread $zp	the gz-file pointer
function string gzread	the data that have been read
function string gzread resource $zp int $length	binary-safe gz-file read
function gzrewind $zp	the gz-file pointer
function bool gzrewind	returns true on success or false on failure
function bool gzrewind resource $zp	rewind the position of a gz-file pointer
function gztell $zp	the gz-file pointer
function int gztell	the position of the file pointer or false if an error occurs
function int gztell resource $zp	tell gz-file pointer read / write position
function gzwrite $length	the number of uncompressed bytes to write
function gzwrite $string	the string to write
function gzwrite $zp	the gz-file pointer
function int gzwrite	returns the number of uncompressed bytes written to the given gz-file stream
function int gzwrite resource $zp string $string int $length	binary-safe gz-file write
function void halt compiler	halts the compiler execution
function hash equals $user_string	the user-supplied string
function hash equals $known_string	the string of known length to compare against
function bool hash equals	returns true when the two strings are equal false otherwise
function bool hash equals string $known_string string $user_string	timing attack safe string comparison
function header register callback $callback	function called just before the headers are sent
function bool header register callback	returns true on success or false on failure
function bool header register callback callable $callback	call a header function
function header remove $name	the header name to be removed
function void header remove string $name	remove previously set headers
function header $string	the header string
function header $replace	the optional replace parameter indicates whether the header should replace a previous similar header or add a second header of the same type
function header $http_response_code	forces the http response code to the specified value
function void header string $string bool $replace int $http_response_code	send a raw http header
function headers sent $line	the line number where the output started
function headers sent $file	if the optional file and line parameters are set headers_sent() will put the php source file name and line number where output started in the file and line variables
function bool headers sent	headers_sent() will return false if no http headers have already been sent or true otherwise
function hebrevc $hebrew_text	a hebrew input string
function hebrevc $max_chars_per_line	this optional parameter indicates maximum number of characters per line that will be returned
function string hebrevc	returns the visual string
function string hebrevc string $hebrew_text int $max_chars_per_line	convert logical hebrew text to visual text with newline conversion
function hexdec $hex_string	the hexadecimal string to convert
function number hexdec	the decimal representation of hex_string
function number hexdec string $hex_string	hexadecimal to decimal
function highlight file $filename	path to the php file to be highlighted
function highlight file $return	set this parameter to true to make this function return the highlighted code
function mixed highlight file	if return is set to true returns the highlighted code as a string instead of printing it out
function mixed highlight file string $filename bool $return	syntax highlighting of a file
function html entity decode $encoding	an optional argument defining the encoding used when converting characters
function html entity decode $flags	a bitmask of one or more of the following flags which specify how to handle quotes and which document type to use
function html entity decode $string	the input string
function string html entity decode	returns the decoded string
function string html entity decode string $string int $flags string $encoding	convert all html entities to their applicable characters
function htmlentities $double_encode	when double_encode is turned off php will not encode existing html entities
function htmlentities $encoding	an optional argument defining the encoding used when converting characters
function htmlentities $string	the input string
function htmlentities $flags	a bitmask of one or more of the following flags which specify how to handle quotes invalid code unit sequences and the used document type
function string htmlentities	returns the encoded string
function string htmlentities string $string int $flags string $encoding bool $double_encode	convert all applicable characters to html entities
function htmlspecialchars decode $string	the string to decode
function htmlspecialchars decode $flags	a bitmask of one or more of the following flags which specify how to handle quotes and which document type to use
function string htmlspecialchars decode	returns the decoded string
function string htmlspecialchars decode string $string int $flags	convert special html entities back to characters
function htmlspecialchars $double_encode	when double_encode is turned off php will not encode existing html entities the default is to convert everything
function htmlspecialchars $string	the string being converted
function htmlspecialchars $encoding	an optional argument defining the encoding used when converting characters
function htmlspecialchars $flags	a bitmask of one or more of the following flags which specify how to handle quotes invalid code unit sequences and the used document type
function string htmlspecialchars	the converted string
function string htmlspecialchars string $string int $flags string $encoding bool $double_encode	convert special characters to html entities
function http build query $numeric_prefix	if numeric indices are used in the base array and this parameter is provided it will be prepended to the numeric index for elements in the base array only
function http build query $arg_separator	arg_separator
function http build query $query_data	may be an array or object containing properties
function http build query $enc_type	by default php_query_rfc1738
function string http build query	returns a url-encoded string
function string http build query mixed $query_data string $numeric_prefix string $arg_separator int $enc_type	generate url-encoded query string
function http response code $response_code	the optional response_code will set the response code
function mixed http response code	if response_code is provided then the previous status code will be returned
function mixed http response code int $response_code	get or set the http response code
function hwapi content new $mimetype	the mimetype for the contents
function HW_API_Content hwapi content new string $content string $mimetype	create new instance of class hw_api_content
function ibase blob cancel $blob_handle	a blob handle opened with ibase_blob_create()
function bool ibase blob cancel	returns true on success or false on failure
function bool ibase blob cancel resource $blob_handle	cancel creating blob
function ibase blob close $blob_handle	a blob handle opened with ibase_blob_create() or ibase_blob_open()
function mixed ibase blob close	if the blob was being read this function returns true on success if the blob was being written to this function returns a string containing the blob id that has been assigned to it by the database
function mixed ibase blob close resource $blob_handle	close blob
function ibase blob create $link_identifier	an interbase link identifier
function resource ibase blob create	returns a blob handle for later use with ibase_blob_add() or false on failure
function resource ibase blob create resource $link_identifier	create a new blob for adding data
function ibase blob echo $link_identifier	an interbase link identifier
function bool ibase blob echo	returns true on success or false on failure
function bool ibase blob echo string $blob_id	output blob contents to browser
function ibase blob get $blob_handle	a blob handle opened with ibase_blob_open()
function ibase blob get $len	size of returned data
function string ibase blob get	returns at most len bytes from the blob or false on failure
function string ibase blob get resource $blob_handle int $len	get len bytes data from open blob
function ibase blob info $link_identifier	an interbase link identifier
function ibase blob info $blob_id	a blob id
function array ibase blob info	returns an array containing information about a blob
function array ibase blob info resource $link_identifier string $blob_id	return blob length and other useful info
function ibase close $connection_id	an interbase link identifier returned from ibase_connect()
function bool ibase close	returns true on success or false on failure
function bool ibase close resource $connection_id	close a connection to an interbase database
function ibase commit ret $link_or_trans_identifier	if called without an argument this function commits the default transaction of the default link
function bool ibase commit ret	returns true on success or false on failure
function bool ibase commit ret resource $link_or_trans_identifier	commit a transaction without closing it
function ibase drop db $connection	an interbase link identifier
function bool ibase drop db	returns true on success or false on failure
function bool ibase drop db resource $connection	drops a database
function ibase fetch object $result_id	an interbase result identifier obtained either by ibase_query() or ibase_execute()
function ibase fetch object $fetch_flag	fetch_flag is a combination of the constants ibase_text and ibase_unixtime ored together
function object ibase fetch object	returns an object with the next row information or false if there are no more rows
function object ibase fetch object resource $result_id int $fetch_flag	get an object from a interbase database
function ibase fetch row $fetch_flag	fetch_flag is a combination of the constants ibase_text and ibase_unixtime ored together
function ibase fetch row $result_identifier	an interbase result identifier
function array ibase fetch row	returns an array that corresponds to the fetched row or false if there are no more rows
function array ibase fetch row resource $result_identifier int $fetch_flag	fetch a row from an interbase database
function ibase field info $field_number	field offset
function ibase field info $result	an interbase result identifier
function array ibase field info	returns an array with the following keys: name alias relation length and type
function array ibase field info resource $result int $field_number	get information about a field
function ibase free event handler $event	an event resource created by ibase_set_event_handler()
function bool ibase free event handler	returns true on success or false on failure
function bool ibase free event handler resource $event	cancels a registered event handler
function ibase name result $result	an interbase result set
function ibase name result $name	the name to be assigned
function bool ibase name result	returns true on success or false on failure
function bool ibase name result resource $result string $name	assigns a name to a result set
function ibase num params $query	the prepared query handle
function int ibase num params	returns the number of parameters as an integer
function int ibase num params resource $query	return the number of parameters in a prepared query
function ibase param info $query	an interbase prepared query handle
function ibase param info $param_number	parameter offset
function array ibase param info	returns an array with the following keys: name alias relation length and type
function array ibase param info resource $query int $param_number	return information about a parameter in a prepared query
function ibase rollback ret $link_or_trans_identifier	if called without an argument this function rolls back the default transaction of the default link
function bool ibase rollback ret	returns true on success or false on failure
function bool ibase rollback ret resource $link_or_trans_identifier	roll back a transaction without closing it
function ibase rollback $link_or_trans_identifier	if called without an argument this function rolls back the default transaction of the default link
function bool ibase rollback	returns true on success or false on failure
function bool ibase rollback resource $link_or_trans_identifier	roll back a transaction
function ibase set event handler $event_name1	an event name
function ibase set event handler $event_name2	at most 15 events allowed
function ibase set event handler $event_handler	the callback is called with the event name and the link resource as arguments whenever one of the specified events is posted by the database
function resource ibase set event handler	the return value is an event resource
function resource ibase set event handler callable $event_handler string $event_name1 string $event_name2	register a callback function to be called when events are posted
function ibase trans $trans_args	trans_args can be a combination of ibase_read ibase_write ibase_committed ibase_consistency ibase_concurrency ibase_rec_version ibase_rec_no_version ibase_wait and ibase_nowait
function ibase trans $link_identifier	an interbase link identifier
function resource ibase trans	returns a transaction handle or false on error
function resource ibase trans int $trans_args resource $link_identifier	begin a transaction
function ibase wait event $event_name1	the event name
function string ibase wait event	returns the name of the event that was posted
function string ibase wait event string $event_name1 string $event_name2	wait for an event to be posted by the database
function iconv mime decode $encoded_header	the encoded header as a string
function iconv mime decode $mode	mode determines the behaviour in the event iconv_mime_decode() encounters a malformed mime header field
function iconv mime decode $charset	the optional charset parameter specifies the character set to represent the result by
function string iconv mime decode	returns a decoded mime field on success or false if an error occurs during the decoding
function iconv mime encode $field_value	the field value
function iconv mime encode $preferences	you can control the behaviour of iconv_mime_encode() by specifying an associative array that contains configuration items to the optional third parameter preferences
function iconv mime encode $field_name	the field name
function string iconv mime encode	returns an encoded mime field on success or false if an error occurs during the encoding
function string iconv mime encode string $field_name string $field_value array $preferences	composes a mime header field
function iconv substr $charset	if charset parameter is omitted string are assumed to be encoded in iconv
function iconv substr $str	the original string
function iconv substr $offset	if offset is non-negative iconv_substr() cuts the portion out of str beginning at offset th character counting from zero
function iconv substr $length	if length is given and is positive the return value will contain at most length characters of the portion that begins at offset depending on the length of string
function string iconv substr	returns the portion of str specified by the offset and length parameters
function string iconv substr string $str int $offset int $length string $charset	cut out part of a string
function id3 get frame long name $frameId	an id3v2 frame
function string id3 get frame long name	returns the frame long name or false on errors
function string id3 get frame long name string $frameId	get the long name of an id3v2 frame
function id3 get frame short name $frameId	an id3v2 frame
function string id3 get frame short name	returns the frame short name or false on errors
function string id3 get frame short name string $frameId	get the short name of an id3v2 frame
function id3 get genre id $genre	genre name as string
function int id3 get genre id	the genre id or false on errors
function int id3 get genre id string $genre	get the id for a genre
function array id3 get genre list	returns an array containing all possible genres that may be stored in an id3 tag
function array id3 get genre list	get all possible genre values
function id3 get genre name $genre_id	an integer ranging from 0 to 147
function string id3 get genre name	returns the name as a string
function string id3 get genre name int $genre_id	get the name for a genre id
function id3 get tag $filename	the path to the mp3 file instead of a filename you may also pass a valid stream resource
function id3 get tag $version	allows you to specify the version of the tag as mp3 files may contain both version 1
function array id3 get tag	returns an associative array with various keys like: title artist
function array id3 get tag string $filename int $version	get all information stored in an id3 tag
function id3 get version $filename	the path to the mp3 file instead of a filename you may also pass a valid stream resource
function int id3 get version	returns the version number of the id3 tag of the file
function int id3 get version string $filename	get version of an id3 tag
function id3 remove tag $filename	the path to the mp3 file instead of a filename you may also pass a valid stream resource
function id3 remove tag $version	allows you to specify the version of the tag as mp3 files may contain both version 1
function bool id3 remove tag	returns true on success or false on failure
function bool id3 remove tag string $filename int $version	remove an existing id3 tag
function id3 set tag $filename	the path to the mp3 file instead of a filename you may also pass a valid stream resource
function id3 set tag $tag	an associative array of tag keys and values the following keys may be used in the associative array: keys in the associative array key possible value available in version title string with maximum of 30 characters v1
function id3 set tag $version	allows you to specify the version of the tag as mp3 files may contain both version 1
function bool id3 set tag	returns true on success or false on failure
function bool id3 set tag string $filename array $tag int $version	update information stored in an id3 tag
function idate $timestamp	the optional timestamp parameter is an integer unix timestamp that defaults to the current local time if a timestamp is not given
function int idate	returns an integer
function int idate string $format int $timestamp	format a local time / date as integer
function idn to ascii $domain	domain to convert
function idn to ascii $idna_info	this parameter can be used only if intl_idna_variant_uts46 was used for variant
function idn to ascii $options	conversion options - combination of idna_* constants except idna_error_* constants
function idn to ascii $variant	either intl_idna_variant_2003 for idna 2003 or intl_idna_variant_uts46 for uts #46
function string idn to ascii	domain name encoded in ascii-compatible form
function string idn to ascii string $domain int $options int $variant array $idna_info	convert domain name to idna ascii form
function ifx affected rows $result_id	a valid result id returned by ifx_query() or ifx_prepare()
function int ifx affected rows	returns the number of rows as an integer
function int ifx affected rows resource $result_id	get number of rows affected by a query
function ifx blobinfile mode $mode	mode 0 means save byte-blobs in memory and mode 1 means save byte-blobs in a file
function bool ifx blobinfile mode	returns true on success or false on failure
function ifx byteasvarchar $mode	mode 0 will return a blob id and mode 1 will return a varchar with text content
function bool ifx byteasvarchar	returns true on success or false on failure
function bool ifx byteasvarchar int $mode	set the default byte mode
function ifx connect $userid	the username as a string
function ifx connect $password	the password as a string
function ifx connect $database	the database name as a string
function resource ifx connect	returns a connection identifier on success or false on error
function resource ifx connect string $database string $userid string $password	open informix server connection
function ifx create blob $type	1 = text 0 = byte
function ifx create blob $mode	0 = blob-object holds the content in memory 1 = blob-object holds the content in file
function ifx create blob $param	if mode = 0: pointer to the content if mode = 1: pointer to the filestring
function int ifx create blob	returns the new blob object-id or false on errors
function int ifx create blob int $type int $mode string $param	creates an blob object
function ifx create char $param	the char content
function int ifx create char	returns the new char object id or false on errors
function ifx do $result_id	result_id is a valid resultid returned by ifx_query() or ifx_prepare() select type queries only!)
function bool ifx do	returns true on success or false on failure
function bool ifx do resource $result_id	execute a previously prepared sql-statement
function ifx errormsg $errorcode	if specified the function will return the message corresponding to the specified code
function string ifx errormsg	return the error message as a string
function string ifx errormsg int $errorcode	returns error message of last informix call
function ifx fetch row $result_id	result_id is a valid resultid returned by ifx_query() or ifx_prepare() select type queries only!)
function ifx fetch row $position	an optional parameter for a fetch operation on scroll cursors: next previous current first last or a number
function array ifx fetch row	returns an associative array that corresponds to the fetched row or false if there are no more rows
function array ifx fetch row resource $result_id mixed $position	get row as an associative array
function ifx fieldproperties $result_id	result_id is a valid resultid returned by ifx_query() or ifx_prepare() select type queries only!)
function array ifx fieldproperties	returns an associative array with fieldnames as key and the sql fieldproperties as data for a query with result_id
function array ifx fieldproperties resource $result_id	list of sql fieldproperties
function ifx free blob $bid	the blob object id
function bool ifx free blob	returns true on success or false on failure
function bool ifx free blob int $bid	deletes the blob object
function ifx free char $bid	the char object id
function bool ifx free char	returns true on success or false on failure
function bool ifx free char int $bid	deletes the char object
function ifx free result $result_id	result_id is a valid resultid returned by ifx_query() or ifx_prepare() select type queries only!)
function bool ifx free result	returns true on success or false on failure
function bool ifx free result resource $result_id	releases resources for the query
function ifx get blob $bid	the blob object id
function string ifx get blob	the contents of the blob as a string or false on errors
function string ifx get blob int $bid	return the content of a blob object
function ifx get char $bid	the char object-id
function string ifx get char	returns the contents as a string or false on errors
function string ifx get char int $bid	return the content of the char object
function ifx htmltbl result $html_table_options	this optional argument is a string of < table > tag options
function ifx htmltbl result $result_id	result_id is a valid resultid returned by ifx_query() or ifx_prepare() select type queries only!)
function int ifx htmltbl result	returns the number of fetched rows or false on errors
function int ifx htmltbl result resource $result_id string $html_table_options	formats all rows of a query into a html table
function ifx nullformat $mode	mode 0 returns and mode 1 returns null
function bool ifx nullformat	returns true on success or false on failure
function bool ifx nullformat int $mode	sets the default return value on a fetch row
function ifx num fields $result_id	result_id is a valid resultid returned by ifx_query() or ifx_prepare() select type queries only!)
function int ifx num fields	returns the number of columns in query for result_id or false on errors
function int ifx num fields resource $result_id	returns the number of columns in the query
function ifx num rows $result_id	result_id is a valid resultid returned by ifx_query() or ifx_prepare() select type queries only!)
function int ifx num rows	returns the number of fetched rows or false on errors
function int ifx num rows resource $result_id	count the rows already fetched from a query
function ifx query $query	the query string
function ifx query $link_identifier	the link identifier
function ifx query $blobidarray	if you have blob byte or text columns in the query you can add a blobidarray parameter containing the corresponding blob ids and you should replace those columns with a ? in the query text
function ifx query $cursor_def	this optional parameter allows you to make this a scroll and / or hold cursor
function resource ifx query	returns valid informix result identifier on success or false on errors
function resource ifx query string $query resource $link_identifier int $cursor_type mixed $blobidarray	send informix query
function ifx textasvarchar $mode	mode 0 will return a blob id and mode 1 will return a varchar with text content
function bool ifx textasvarchar	returns true on success or false on failure
function bool ifx textasvarchar int $mode	set the default text mode
function ifxus create slob $mode	a combination of ifx_lo_rdonly ifx_lo_wronly ifx_lo_append ifx_lo_rdwr ifx_lo_buffer ifx_lo_nobuffer
function int ifxus create slob	return the new slob object-id or false on errors
function ifxus free slob $bid	an existing slob id
function bool ifxus free slob	returns true on success or false on failure
function ifxus open slob $mode	a combination of ifx_lo_rdonly ifx_lo_wronly ifx_lo_append ifx_lo_rdwr ifx_lo_buffer ifx_lo_nobuffer
function ifxus open slob $bid	an existing slob id
function int ifxus open slob	returns the new slob object-id or false on errors
function ifxus read slob $nbytes	the number of bytes to read
function ifxus read slob $bid	an existing slob id
function string ifxus read slob	returns the slob contents as a string or false on errors
function ifxus tell slob $bid	an existing slob id
function int ifxus tell slob	returns the seek position as an integer or false on errors
function int ifxus tell slob int $bid	returns the current file or seek position
function ifxus write slob $content	the content to write as a string
function ifxus write slob $bid	an existing slob id
function int ifxus write slob	returns the bytes written as an integer or false on errors
function ignore user abort $value	if set this function will set the ignore_user_abort ini setting to the given value
function int ignore user abort	returns the previous setting as an integer
function int ignore user abort bool $value	set whether a client disconnect should abort script execution
function iis get server by path $path	the path to the root directory
function int iis get server by path	returns the server instance number
function int iis get server by path string $path	return the instance number associated with the path
function image type to extension $imagetype	one of the imagetype_xxx constant
function image type to extension $include_dot	whether to prepend a dot to the extension or not
function string image type to extension	a string with the extension corresponding to the given image type
function string image type to extension int $imagetype bool $include_dot	get file extension for image type
function imagealphablending $image	an image resource returned by one of the image creation functions such as imagecreatetruecolor()
function imagealphablending $blendmode	whether to enable the blending mode or not
function bool imagealphablending	returns true on success or false on failure
function bool imagealphablending resource $image bool $blendmode	set the blending mode for an image
function imagearc $cx	x-coordinate of the center
function imagearc $cy	y-coordinate of the center
function imagearc $width	the arc width
function imagearc $height	the arc height
function imagearc $start	the arc start angle in degrees
function imagearc $end	the arc end angle in degrees
function imagearc $image	an image resource returned by one of the image creation functions such as imagecreatetruecolor()
function imagearc $color	a color identifier created with imagecolorallocate()
function bool imagearc	returns true on success or false on failure
function bool imagearc resource $image int $cx int $cy int $width int $height int $start int $end int $color	draws an arc
function imagechar $x	x-coordinate of the start
function imagechar $font	can be 1 2 3 4 5 for built-in fonts in latin2 encoding where higher numbers corresponding to larger fonts or any of your own font identifiers registered with imageloadfont()
function imagechar $c	the character to draw
function imagechar $image	an image resource returned by one of the image creation functions such as imagecreatetruecolor()
function imagechar $y	y-coordinate of the start
function imagechar $color	a color identifier created with imagecolorallocate()
function bool imagechar	returns true on success or false on failure
function bool imagechar resource $image int $font int $x int $y string $c int $color	draw a character horizontally
function imagecharup $x	x-coordinate of the start
function imagecharup $font	can be 1 2 3 4 5 for built-in fonts in latin2 encoding where higher numbers corresponding to larger fonts or any of your own font identifiers registered with imageloadfont()
function imagecharup $c	the character to draw
function imagecharup $image	an image resource returned by one of the image creation functions such as imagecreatetruecolor()
function imagecharup $y	y-coordinate of the start
function imagecharup $color	a color identifier created with imagecolorallocate()
function bool imagecharup	returns true on success or false on failure
function bool imagecharup resource $image int $font int $x int $y string $c int $color	draw a character vertically
function imagecolorallocatealpha $image	an image resource returned by one of the image creation functions such as imagecreatetruecolor()
function imagecolorallocatealpha $red	value of red component
function imagecolorallocatealpha $blue	value of blue component
function imagecolorallocatealpha $green	value of green component
function imagecolorallocatealpha $alpha	a value between 0 and 127
function int imagecolorallocatealpha	a color identifier or false if the allocation failed
function int imagecolorallocatealpha resource $image int $red int $green int $blue int $alpha	allocate a color for an image
function imagecolorat $image	an image resource returned by one of the image creation functions such as imagecreatetruecolor()
function imagecolorat $y	y-coordinate of the point
function imagecolorat $x	x-coordinate of the point
function int imagecolorat	returns the index of the color
function int imagecolorat resource $image int $x int $y	get the index of the color of a pixel
function imagecolorclosestalpha $image	an image resource returned by one of the image creation functions such as imagecreatetruecolor()
function imagecolorclosestalpha $red	value of red component
function imagecolorclosestalpha $blue	value of blue component
function imagecolorclosestalpha $green	value of green component
function imagecolorclosestalpha $alpha	a value between 0 and 127
function int imagecolorclosestalpha	returns the index of the closest color in the palette
function int imagecolorclosestalpha resource $image int $red int $green int $blue int $alpha	get the index of the closest color to the specified color + alpha
function imagecolorclosesthwb $image	an image resource returned by one of the image creation functions such as imagecreatetruecolor()
function imagecolorclosesthwb $red	value of red component
function imagecolorclosesthwb $blue	value of blue component
function imagecolorclosesthwb $green	value of green component
function int imagecolorclosesthwb	returns an integer with the index of the color which has the hue white and blackness nearest the given color
function int imagecolorclosesthwb resource $image int $red int $green int $blue	get the index of the color which has the hue white and blackness
function imagecolorexactalpha $image	an image resource returned by one of the image creation functions such as imagecreatetruecolor()
function imagecolorexactalpha $red	value of red component
function imagecolorexactalpha $blue	value of blue component
function imagecolorexactalpha $green	value of green component
function imagecolorexactalpha $alpha	a value between 0 and 127
function int imagecolorexactalpha	returns the index of the specified color+alpha in the palette of the image or -1 if the color does not exist in the images palette
function int imagecolorexactalpha resource $image int $red int $green int $blue int $alpha	get the index of the specified color + alpha
function imagecolormatch $image1	a truecolor image link resource
function imagecolormatch $image2	a palette image link resource pointing to an image that has the same size as image1
function bool imagecolormatch	returns true on success or false on failure
function imagecolorresolve $image	an image resource returned by one of the image creation functions such as imagecreatetruecolor()
function imagecolorresolve $red	value of red component
function imagecolorresolve $blue	value of blue component
function imagecolorresolve $green	value of green component
function int imagecolorresolve	returns a color index
function int imagecolorresolve resource $image int $red int $green int $blue	get the index of the specified color or its closest possible alternative
function imagecolorstotal $image	an image resource returned by one of the image creation functions such as imagecreatefromgif()
function int imagecolorstotal	returns the number of colors in the specified images palette or 0 for truecolor images
function int imagecolorstotal resource $image	find out the number of colors in an image's palette
function imagecolortransparent $image	an image resource returned by one of the image creation functions such as imagecreatetruecolor()
function imagecolortransparent $color	a color identifier created with imagecolorallocate()
function int imagecolortransparent	the identifier of the new or current if none is specified transparent color is returned
function int imagecolortransparent resource $image int $color	define a color as transparent
function imagecreate $width	the image width
function imagecreate $height	the image height
function resource imagecreate	returns an image resource identifier on success false on errors
function resource imagecreate int $width int $height	create a new palette based image
function imagecreatefromgd $filename	path to the gd file
function resource imagecreatefromgd	returns an image resource identifier on success false on errors
function imagecreatefromgd2 $filename	path to the gd2 image
function resource imagecreatefromgd2	returns an image resource identifier on success false on errors
function imagecreatefromjpeg $filename	path to the jpeg image
function resource imagecreatefromjpeg	returns an image resource identifier on success false on errors
function resource imagecreatefromjpeg string $filename	create a new image from file or url
function imagecreatefromstring $image	a string containing the image data
function resource imagecreatefromstring	an image resource will be returned on success
function resource imagecreatefromstring string $image	create a new image from the image stream in the string
function imagecreatefromwbmp $filename	path to the wbmp image
function resource imagecreatefromwbmp	returns an image resource identifier on success false on errors
function resource imagecreatefromwbmp string $filename	create a new image from file or url
function imagecreatefromwebp $filename	path to the webp image
function resource imagecreatefromwebp	returns an image resource identifier on success false on errors
function resource imagecreatefromwebp string $filename	create a new image from file or url
function imagecreatefromxbm $filename	path to the xbm image
function resource imagecreatefromxbm	returns an image resource identifier on success false on errors
function resource imagecreatefromxbm string $filename	create a new image from file or url
function imagecreatefromxpm $filename	path to the xpm image
function resource imagecreatefromxpm	returns an image resource identifier on success false on errors
function resource imagecreatefromxpm string $filename	create a new image from file or url
function imagecreatetruecolor $height	image height
function imagecreatetruecolor $width	image width
function resource imagecreatetruecolor	returns an image resource identifier on success false on errors
function resource imagecreatetruecolor int $width int $height	create a new true color image
function imagedestroy $image	an image resource returned by one of the image creation functions such as imagecreatetruecolor()
function bool imagedestroy	returns true on success or false on failure
function bool imagedestroy resource $image	destroy an image
function imageellipse $cx	x-coordinate of the center
function imageellipse $cy	y-coordinate of the center
function imageellipse $width	the ellipse width
function imageellipse $color	the color of the ellipse
function imageellipse $height	the ellipse height
function imageellipse $image	an image resource returned by one of the image creation functions such as imagecreatetruecolor()
function bool imageellipse	returns true on success or false on failure
function bool imageellipse resource $image int $cx int $cy int $width int $height int $color	draw an ellipse
function imagefill $image	an image resource returned by one of the image creation functions such as imagecreatetruecolor()
function imagefill $y	y-coordinate of start point
function imagefill $x	x-coordinate of start point
function imagefill $color	the fill color
function bool imagefill	returns true on success or false on failure
function bool imagefill resource $image int $x int $y int $color	flood fill
function imagefilledellipse $cx	x-coordinate of the center
function imagefilledellipse $cy	y-coordinate of the center
function imagefilledellipse $height	the ellipse height
function imagefilledellipse $width	the ellipse width
function imagefilledellipse $color	the fill color
function imagefilledellipse $image	an image resource returned by one of the image creation functions such as imagecreatetruecolor()
function bool imagefilledellipse	returns true on success or false on failure
function bool imagefilledellipse resource $image int $cx int $cy int $width int $height int $color	draw a filled ellipse
function imagefilter $arg3	img_filter_colorize : value of blue component
function imagefilter $arg1	img_filter_brightness : brightness level
function imagefilter $arg2	img_filter_colorize : value of green component
function imagefilter $image	an image resource returned by one of the image creation functions such as imagecreatetruecolor()
function imagefilter $filtertype	filtertype can be one of the following: img_filter_negate : reverses all colors of the image
function imagefilter $arg4	img_filter_colorize : alpha channel a value between 0 and 127
function bool imagefilter	returns true on success or false on failure
function bool imagefilter resource $image int $filtertype int $arg1 int $arg2 int $arg3 int $arg4	applies a filter to an image
function imagefontheight $font	can be 1 2 3 4 5 for built-in fonts in latin2 encoding where higher numbers corresponding to larger fonts or any of your own font identifiers registered with imageloadfont()
function int imagefontheight	returns the pixel height of the font
function int imagefontheight int $font	get font height
function imageftbbox $text	the string to be measured
function imageftbbox $extrainfo	possible array indexes for extrainfo key type meaning linespacing float defines drawing linespacing
function imageftbbox $fontfile	the name of the truetype font file can be a url
function imageftbbox $size	the font size
function imageftbbox $angle	angle in degrees in which text will be measured
function array imageftbbox float $size float $angle string $fontfile string $text array $extrainfo	give the bounding box of a text using fonts via freetype2
function imagegd $image	an image resource returned by one of the image creation functions such as imagecreatetruecolor()
function imagegd $filename	the path to save the file to
function bool imagegd	returns true on success or false on failure
function bool imagegd resource $image string $filename	output gd image to browser or file
function imagegd2 $image	an image resource returned by one of the image creation functions such as imagecreatetruecolor()
function imagegd2 $filename	the path to save the file to
function imagegd2 $type	either img_gd2_raw or img_gd2_compressed
function imagegd2 $chunk_size	chunk size
function bool imagegd2	returns true on success or false on failure
function bool imagegd2 resource $image string $filename int $chunk_size int $type	output gd2 image to browser or file
function imagegif $image	an image resource returned by one of the image creation functions such as imagecreatetruecolor()
function imagegif $filename	the path to save the file to
function bool imagegif	returns true on success or false on failure
function bool imagegif resource $image string $filename	output image to browser or file
function resource imagegrabscreen	returns an image resource identifier on success false on failure
function resource imagegrabscreen	captures the whole screen
function imagegrabwindow $client_area	include the client area of the application window
function imagegrabwindow $window_handle	the hwnd window id
function resource imagegrabwindow	returns an image resource identifier on success false on failure
function resource imagegrabwindow int $window_handle int $client_area	captures a window
function imagelayereffect $IMG_EFFECT_REPLACE	use pixel replacement equivalent of passing true to imagealphablending()
function imagelayereffect $IMG_EFFECT_NORMAL	same as img_effect_alphablend
function imagelayereffect $IMG_EFFECT_ALPHABLEND	use normal pixel blending equivalent of passing false to imagealphablending()
function imagelayereffect $effect	one of the following constants: img_effect_replace use pixel replacement equivalent of passing true to imagealphablending() img_effect_alphablend use normal pixel blending equivalent of passing false to imagealphablending() img_effect_normal same as img_effect_alphablend
function imagelayereffect $image	an image resource returned by one of the image creation functions such as imagecreatetruecolor()
function imagelayereffect $IMG_EFFECT_OVERLAY	overlay has the effect that black background pixels will remain black white background pixels will remain white but grey background pixels will take the colour of the foreground pixel
function bool imagelayereffect	returns true on success or false on failure
function imageline $x2	x-coordinate for second point
function imageline $y1	y-coordinate for first point
function imageline $y2	y-coordinate for second point
function imageline $color	the line color
function imageline $image	an image resource returned by one of the image creation functions such as imagecreatetruecolor()
function imageline $x1	x-coordinate for first point
function bool imageline	returns true on success or false on failure
function bool imageline resource $image int $x1 int $y1 int $x2 int $y2 int $color	draw a line
function imageloadfont $file	the font file format is currently binary and architecture dependent
function int imageloadfont	the font identifier which is always bigger than 5 to avoid conflicts with built-in fonts or false on errors
function int imageloadfont string $file	load a new font
function imagepalettecopy $destination	the destination image resource
function imagepalettecopy $source	the source image resource
function void imagepalettecopy resource $destination resource $source	copy the palette from one image to another
function imagepalettetotruecolor $image	an image resource returned by one of the image creation functions such as imagecreatetruecolor()
function bool imagepalettetotruecolor	returns true if the convertion was complete or if the source image already is a true color image otherwise false is returned
function bool imagepalettetotruecolor resource $src	converts a palette based image to true color
function imagepng $image	an image resource returned by one of the image creation functions such as imagecreatetruecolor()
function imagepng $filename	the path to save the file to
function imagepng $filters	allows reducing the png file size
function imagepng $quality	compression level: from 0 no compression to 9
function bool imagepng	returns true on success or false on failure
function bool imagepng resource $image string $filename int $quality int $filters	output a png image to either the browser or a file
function imagepolygon $image	an image resource returned by one of the image creation functions such as imagecreatetruecolor()
function imagepolygon $points	an array containing the polygons vertices e
function imagepolygon $color	a color identifier created with imagecolorallocate()
function imagepolygon $num_points	total number of points vertices
function bool imagepolygon	returns true on success or false on failure
function bool imagepolygon resource $image array $points int $num_points int $color	draws a polygon
function imagepsbbox $size	size is expressed in pixels
function imagepsbbox $angle	angle is in degrees
function imagepsbbox $space	allows you to change the default value of a space in a font
function imagepsbbox $font_index	a font resource returned by imagepsloadfont()
function imagepsbbox $tightness	tightness allows you to control the amount of white space between characters
function imagepsbbox $text	the text to be written
function array imagepsbbox	returns an array containing the following elements: 0 left x-coordinate 1 upper y-coordinate 2 right x-coordinate 3 lower y-coordinate
function array imagepsbbox string $text resource $font int $size	give the bounding box of a text rectangle using postscript type1 fonts
function imagepsextendfont $extend	extension value must be greater than 0
function imagepsextendfont $font_index	a font resource returned by imagepsloadfont()
function bool imagepsextendfont	returns true on success or false on failure
function bool imagepsextendfont resource $font_index float $extend	extend or condense a font
function imagepsfreefont $font_index	a font resource returned by imagepsloadfont()
function bool imagepsfreefont	returns true on success or false on failure
function bool imagepsfreefont resource $font_index	free memory used by a postscript type 1 font
function imagepsloadfont $filename	path to the postscript font file
function resource imagepsloadfont	in the case everything went right a valid font index will be returned and can be used for further purposes
function resource imagepsloadfont string $filename	load a postscript type 1 font from file
function imagepsslantfont $slant	slant level
function imagepsslantfont $font_index	a font resource returned by imagepsloadfont()
function bool imagepsslantfont	returns true on success or false on failure
function bool imagepsslantfont resource $font_index float $slant	slant a font
function imagerectangle $y1	upper left y coordinate 0 0 is the top left corner of the image
function imagerectangle $x1	upper left x coordinate
function imagerectangle $y2	bottom right y coordinate
function imagerectangle $x2	bottom right x coordinate
function imagerectangle $image	an image resource returned by one of the image creation functions such as imagecreatetruecolor()
function imagerectangle $color	a color identifier created with imagecolorallocate()
function bool imagerectangle	returns true on success or false on failure
function bool imagerectangle resource $image int $x1 int $y1 int $x2 int $y2 int $color	draw a rectangle
function imagesetbrush $image	an image resource returned by one of the image creation functions such as imagecreatetruecolor()
function imagesetbrush $brush	an image resource
function bool imagesetbrush	returns true on success or false on failure
function bool imagesetbrush resource $image resource $brush	set the brush image for line drawing
function imagesetstyle $image	an image resource returned by one of the image creation functions such as imagecreatetruecolor()
function imagesetstyle $style	an array of pixel colors
function bool imagesetstyle	returns true on success or false on failure
function bool imagesetstyle resource $image array $style	set the style for line drawing
function imagesetthickness $image	an image resource returned by one of the image creation functions such as imagecreatetruecolor()
function imagesetthickness $thickness	thickness in pixels
function bool imagesetthickness	returns true on success or false on failure
function bool imagesetthickness resource $image int $thickness	set the thickness for line drawing
function imagesettile $image	an image resource returned by one of the image creation functions such as imagecreatetruecolor()
function imagesettile $tile	the image resource to be used as a tile
function bool imagesettile	returns true on success or false on failure
function bool imagesettile resource $image resource $tile	set the tile image for filling
function imagestring $y	y-coordinate of the upper left corner
function imagestring $font	can be 1 2 3 4 5 for built-in fonts in latin2 encoding where higher numbers corresponding to larger fonts or any of your own font identifiers registered with imageloadfont()
function imagestring $x	x-coordinate of the upper left corner
function imagestring $image	an image resource returned by one of the image creation functions such as imagecreatetruecolor()
function imagestring $color	a color identifier created with imagecolorallocate()
function imagestring $string	the string to be written
function bool imagestring	returns true on success or false on failure
function bool imagestring resource $image int $font int $x int $y string $string int $color	draw a string horizontally
function imagetruecolortopalette $image	an image resource returned by one of the image creation functions such as imagecreatetruecolor()
function imagetruecolortopalette $dither	indicates if the image should be dithered - if it is true then dithering will be used which will result in a more speckled image but with better color approximation
function imagetruecolortopalette $ncolors	sets the maximum number of colors that should be retained in the palette
function bool imagetruecolortopalette	returns true on success or false on failure
function bool imagetruecolortopalette resource $image bool $dither int $ncolors	convert a true color image to a palette image
function imagettfbbox $text	the string to be measured
function imagettfbbox $fontfile	the name of the truetype font file can be a url
function imagettfbbox $size	the font size
function imagettfbbox $angle	angle in degrees in which text will be measured
function array imagettfbbox	imagettfbbox() returns an array with 8 elements representing four points making the bounding box of the text on success and false on error
function array imagettfbbox float $size float $angle string $fontfile string $text	give the bounding box of a text using truetype fonts
function int imagetypes	returns a bit-field corresponding to the image formats supported by the version of gd linked into php
function int imagetypes	return the image types supported by this php build
function imagewbmp $image	an image resource returned by one of the image creation functions such as imagecreatetruecolor()
function imagewbmp $filename	the path to save the file to
function imagewbmp $foreground	you can set the foreground color with this parameter by setting an identifier obtained from imagecolorallocate()
function bool imagewbmp	returns true on success or false on failure
function bool imagewbmp resource $image string $filename int $foreground	output image to browser or file
function imagewebp $image	an image resource returned by one of the image creation functions such as imagecreatetruecolor()
function imagewebp $filename	the path to save the file to
function bool imagewebp	returns true on success or false on failure
function bool imagewebp resource $image string $filename	output a webp image to browser or file
function imagexbm $image	an image resource returned by one of the image creation functions such as imagecreatetruecolor()
function imagexbm $filename	the path to save the file to
function imagexbm $foreground	you can set the foreground color with this parameter by setting an identifier obtained from imagecolorallocate()
function bool imagexbm	returns true on success or false on failure
function bool imagexbm resource $image string $filename int $foreground	output an xbm image to browser or file
function array imap alerts	returns an array of all of the imap alert messages generated or false if no alert messages are available
function array imap alerts	returns all imap alert messages that have occurred
function imap base64 $text	the encoded text
function string imap base64	returns the decoded message as a string
function string imap base64 string $text	decode base64 encoded text
function imap binary $string	the 8bit string
function string imap binary	returns a base64 encoded string
function string imap binary string $string	convert an 8bit string to a base64 string
function imap bodystruct $section	the body section to read
function imap bodystruct $msg_number	the message number
function imap bodystruct $imap_stream	an imap stream returned by imap_open()
function object imap bodystruct	returns the information in an object for a detailed description of the object structure and properties see imap_fetchstructure()
function imap createmailbox $mailbox	the mailbox name see imap_open() for more information
function imap createmailbox $imap_stream	an imap stream returned by imap_open()
function bool imap createmailbox	returns true on success or false on failure
function bool imap createmailbox resource $imap_stream string $mailbox	create a new mailbox
function imap delete $options	you can set the ft_uid which tells the function to treat the msg_number argument as an uid
function imap delete $msg_number	the message number
function imap delete $imap_stream	an imap stream returned by imap_open()
function bool imap delete	returns true
function bool imap delete resource $imap_stream int $msg_number int $options	mark a message for deletion from current mailbox
function imap deletemailbox $mailbox	the mailbox name see imap_open() for more information
function imap deletemailbox $imap_stream	an imap stream returned by imap_open()
function bool imap deletemailbox	returns true on success or false on failure
function bool imap deletemailbox resource $imap_stream string $mailbox	delete a mailbox
function array imap errors	this function returns an array of all of the imap error messages generated since the last imap_errors() call or the beginning of the page
function array imap errors	returns all of the imap errors that have occurred
function imap expunge $imap_stream	an imap stream returned by imap_open()
function bool imap expunge	returns true
function bool imap expunge resource $imap_stream	delete all messages marked for deletion
function imap fetch overview $sequence	a message sequence description
function imap fetch overview $options	sequence will contain a sequence of message indices or uids if this parameter is set to ft_uid
function imap fetch overview $imap_stream	an imap stream returned by imap_open()
function array imap fetch overview	returns an array of objects describing one message header each
function array imap fetch overview resource $imap_stream string $sequence int $options	read an overview of the information in the headers of the given message
function imap fetchbody $options	a bitmask with one or more of the following: ft_uid - the msg_number is a uid ft_peek - do not set the \seen flag if not already set ft_internal - the return string is in internal format will not canonicalize to crlf
function imap fetchbody $msg_number	the message number
function imap fetchbody $section	the part number
function imap fetchbody $imap_stream	an imap stream returned by imap_open()
function string imap fetchbody	returns a particular section of the body of the specified messages as a text string
function string imap fetchbody resource $imap_stream int $msg_number string $section int $options	fetch a particular section of the body of the message
function imap fetchheader $options	the possible options are: ft_uid - the msgno argument is a uid ft_internal - the return string is in internal format without any attempt to canonicalize to crlf newlines ft_prefetchtext - the rfc822
function imap fetchheader $msg_number	the message number
function imap fetchheader $imap_stream	an imap stream returned by imap_open()
function string imap fetchheader	returns the header of the specified message as a text string
function string imap fetchheader resource $imap_stream int $msg_number int $options	returns header for a message
function imap fetchmime $options	a bitmask with one or more of the following: ft_uid - the msg_number is a uid ft_peek - do not set the \seen flag if not already set ft_internal - the return string is in internal format will not canonicalize to crlf
function imap fetchmime $msg_number	the message number
function imap fetchmime $section	the part number
function imap fetchmime $imap_stream	an imap stream returned by imap_open()
function string imap fetchmime	returns the mime headers of a particular section of the body of the specified messages as a text string
function string imap fetchmime resource $imap_stream int $msg_number string $section int $options	fetch mime headers for a particular section of the message
function imap gc $caches	specifies the cache to purge
function imap gc $imap_stream	an imap stream returned by imap_open()
function bool imap gc	returns true on success or false on failure
function bool imap gc resource $imap_stream int $caches	clears imap cache
function imap get quota $quota_root	quota_root should normally be in the form of user
function imap get quota $imap_stream	an imap stream returned by imap_open()
function array imap get quota	returns an array with integer values limit and usage for the given mailbox
function imap getmailboxes $ref	ref should normally be just the server specification as described in imap_open()
function imap getmailboxes $pattern	specifies where in the mailbox hierarchy to start searching
function imap getmailboxes $imap_stream	an imap stream returned by imap_open()
function array imap getmailboxes	returns an array of objects containing mailbox information
function array imap getmailboxes resource $imap_stream string $ref string $pattern	read the list of mailboxes returning detailed information on each one
function imap headerinfo $fromlength	number of characters for the fetchfrom property
function imap headerinfo $msg_number	the message number
function imap headerinfo $subjectlength	number of characters for the fetchsubject property must be greater than or equal to zero
function imap headerinfo $imap_stream	an imap stream returned by imap_open()
function object imap headerinfo resource $imap_stream int $msg_number int $fromlength int $subjectlength string $defaulthost	read the header of the message
function imap headers $imap_stream	an imap stream returned by imap_open()
function array imap headers	returns an array of string formatted with header info
function string imap last error	returns the full text of the last imap error message that occurred on the current page
function string imap last error	gets the last imap error that occurred during this page request
function imap list $ref	ref should normally be just the server specification as described in imap_open()
function imap list $pattern	specifies where in the mailbox hierarchy to start searching
function imap list $imap_stream	an imap stream returned by imap_open()
function array imap list	returns an array containing the names of the mailboxes
function imap listscan $ref	ref should normally be just the server specification as described in imap_open()
function imap listscan $pattern	specifies where in the mailbox hierarchy to start searching
function imap listscan $content	the searched string
function imap listscan $imap_stream	an imap stream returned by imap_open()
function array imap listscan	returns an array containing the names of the mailboxes that have content in the text of the mailbox
function array imap listscan resource $imap_stream string $ref string $pattern string $content	returns the list of mailboxes that matches the given text
function imap lsub $ref	ref should normally be just the server specification as described in imap_open()
function imap lsub $pattern	specifies where in the mailbox hierarchy to start searching
function imap lsub $imap_stream	an imap stream returned by imap_open()
function array imap lsub	returns an array of all the subscribed mailboxes
function array imap lsub resource $imap_stream string $ref string $pattern	list all the subscribed mailboxes
function imap mail copy $msglist	msglist is a range not just message numbers as described in rfc2060
function imap mail copy $options	options is a bitmask of one or more of cp_uid - the sequence numbers contain uids cp_move - delete the messages from the current mailbox after copying
function imap mail copy $mailbox	the mailbox name see imap_open() for more information
function imap mail copy $imap_stream	an imap stream returned by imap_open()
function bool imap mail copy	returns true on success or false on failure
function bool imap mail copy resource $imap_stream string $msglist string $mailbox int $options	copy specified messages to a mailbox
function imap mail move $msglist	msglist is a range not just message numbers as described in rfc2060
function imap mail move $mailbox	the mailbox name see imap_open() for more information
function imap mail move $options	options is a bitmask and may contain the single option: cp_uid - the sequence numbers contain uids
function imap mail move $imap_stream	an imap stream returned by imap_open()
function bool imap mail move	returns true on success or false on failure
function bool imap mail move resource $imap_stream string $msglist string $mailbox int $options	move specified messages to a mailbox
function imap mime header decode $text	the mime text
function array imap mime header decode	the decoded elements are returned in an array of objects where each object has two properties charset and text
function array imap mime header decode string $text	decode mime header elements
function imap num msg $imap_stream	an imap stream returned by imap_open()
function int imap num msg	return the number of messages in the current mailbox as an integer
function imap num recent $imap_stream	an imap stream returned by imap_open()
function int imap num recent	returns the number of recent messages in the current mailbox as an integer
function int imap num recent resource $imap_stream	gets the number of recent messages in current mailbox
function imap open $options	the options are a bit mask with one or more of the following: op_readonly - open mailbox read-only op_anonymous - dont use or update a
function imap open $mailbox	a mailbox name consists of a server and a mailbox path on this server
function imap open $username	the user name
function imap open $params	connection parameters the following string keys maybe used to set one or more connection parameters: disable_authenticator - disable authentication properties
function imap open $password	the password associated with the username
function imap open $n_retries	number of maximum connect attempts
function resource imap open	returns an imap stream on success or false on error
function resource imap open string $mailbox string $username string $password int $options int $n_retries array $params	open an imap stream to a mailbox
function imap renamemailbox $old_mbox	the old mailbox name see imap_open() for more information
function imap renamemailbox $new_mbox	the new mailbox name see imap_open() for more information
function imap renamemailbox $imap_stream	an imap stream returned by imap_open()
function bool imap renamemailbox	returns true on success or false on failure
function bool imap renamemailbox resource $imap_stream string $old_mbox string $new_mbox	rename an old mailbox to new mailbox
function imap reopen $options	the options are a bit mask with one or more of the following: op_readonly - open mailbox read-only op_anonymous - dont use or update a
function imap reopen $mailbox	the mailbox name see imap_open() for more information
function imap reopen $n_retries	number of maximum connect attempts
function imap reopen $imap_stream	an imap stream returned by imap_open()
function bool imap reopen	returns true if the stream is reopened false otherwise
function bool imap reopen resource $imap_stream string $mailbox int $options int $n_retries	reopen imap stream to new mailbox
function imap rfc822 parse adrlist $default_host	the default host name
function imap rfc822 parse adrlist $address	a string containing addresses
function array imap rfc822 parse adrlist	returns an array of objects
function array imap rfc822 parse adrlist string $address string $default_host	parses an address string
function imap savebody $options	a bitmask with one or more of the following: ft_uid - the msg_number is a uid ft_peek - do not set the \seen flag if not already set ft_internal - the return string is in internal format will not canonicalize to crlf
function imap savebody $msg_number	the message number
function imap savebody $part_number	the part number
function imap savebody $file	the path to the saved file as a string or a valid file descriptor returned by fopen()
function imap savebody $imap_stream	an imap stream returned by imap_open()
function bool imap savebody	returns true on success or false on failure
function bool imap savebody resource $imap_stream mixed $file int $msg_number string $part_number int $options	save a specific body section to a file
function imap search $criteria	a string delimited by spaces in which the following keywords are allowed
function imap search $charset	mime character set to use when searching strings
function imap search $options	valid values for options are se_uid which causes the returned array to contain uids instead of messages sequence numbers
function imap search $imap_stream	an imap stream returned by imap_open()
function array imap search	returns an array of message numbers or uids
function array imap search resource $imap_stream string $criteria int $options string $charset	this function returns an array of messages matching the given search criteria
function imap set quota $quota_limit	the maximum size in kb for the quota_root
function imap set quota $quota_root	the mailbox to have a quota set
function imap set quota $imap_stream	an imap stream returned by imap_open()
function bool imap set quota	returns true on success or false on failure
function bool imap set quota resource $imap_stream string $quota_root int $quota_limit	sets a quota for a given mailbox
function imap setflag full $flag	the flags which you can set are \seen \answered \flagged \deleted and \draft as defined by rfc2060
function imap setflag full $options	a bit mask that may contain the single option: st_uid - the sequence argument contains uids instead of sequence numbers
function imap setflag full $sequence	a sequence of message numbers
function imap setflag full $imap_stream	an imap stream returned by imap_open()
function bool imap setflag full	returns true on success or false on failure
function bool imap setflag full resource $imap_stream string $sequence string $flag int $options	sets flags on messages
function imap sort $search_criteria	imap2-format search criteria string
function imap sort $reverse	set this to 1 for reverse sorting
function imap sort $charset	mime character set to use when sorting strings
function imap sort $imap_stream	an imap stream returned by imap_open()
function imap sort $options	the options are a bitmask of one or more of the following: se_uid - return uids instead of sequence numbers se_noprefetch - dont prefetch searched messages
function imap sort $criteria	criteria can be one and only one of the following: sortdate - message date sortarrival - arrival date sortfrom - mailbox in first from address sortsubject - message subject sortto - mailbox in first to address sortcc - mailbox in first cc address sortsize - size of message in octets
function array imap sort	returns an array of message numbers sorted by the given parameters
function array imap sort resource $imap_stream int $criteria int $reverse int $options string $search_criteria string $charset	gets and sort messages
function imap status $mailbox	the mailbox name see imap_open() for more information
function imap status $imap_stream	an imap stream returned by imap_open()
function object imap status	this function returns an object containing status information
function object imap status resource $imap_stream string $mailbox int $options	returns status information on a mailbox
function imap subscribe $mailbox	the mailbox name see imap_open() for more information
function imap subscribe $imap_stream	an imap stream returned by imap_open()
function bool imap subscribe	returns true on success or false on failure
function bool imap subscribe resource $imap_stream string $mailbox	subscribe to a mailbox
function imap timeout $timeout_type	one of the following: imap_opentimeout imap_readtimeout imap_writetimeout or imap_closetimeout
function imap timeout $timeout	the timeout in seconds
function mixed imap timeout	if the timeout parameter is set this function returns true on success and false on failure
function mixed imap timeout int $timeout_type int $timeout	set or fetch imap timeout
function imap uid $msg_number	the message number
function imap uid $imap_stream	an imap stream returned by imap_open()
function int imap uid	the uid of the given message
function imap unsubscribe $mailbox	the mailbox name see imap_open() for more information
function imap unsubscribe $imap_stream	an imap stream returned by imap_open()
function bool imap unsubscribe	returns true on success or false on failure
function bool imap unsubscribe resource $imap_stream string $mailbox	unsubscribe from a mailbox
function imap utf7 decode $text	a modified utf-7 encoding string as defined in rfc 2060 section 5
function string imap utf7 decode	returns a string that is encoded in iso-8859-1 and consists of the same sequence of characters in text or false if text contains invalid modified utf-7 sequence or text contains a character that is not part of iso-8859-1 character set
function string imap utf7 decode string $text	decodes a modified utf-7 encoded string
function imap utf7 encode $data	an iso-8859-1 string
function string imap utf7 encode	returns data encoded with the modified utf-7 encoding as defined in rfc 2060 section 5
function string imap utf7 encode string $data	converts iso-8859-1 string to modified utf-7 text
function imap utf8 $mime_encoded_text	a mime encoded string
function string imap utf8	returns an utf-8 encoded string
function string imap utf8 string $mime_encoded_text	converts mime-encoded text to utf-8
function implode $glue	defaults to an empty string
function implode $pieces	the array of strings to implode
function string implode	returns a string containing a string representation of all the array elements in the same order with the glue string between each element
function string implode string $glue array $pieces	join array elements with a string
function in array $haystack	the array
function in array $strict	if the third parameter strict is set to true then the in_array() function will also check the types of the needle in the haystack
function in array $needle	the searched value
function bool in array	returns true if needle is found in the array false otherwise
function bool in array mixed $needle array $haystack bool $strict	checks if a value exists in an array
function inet pton $address	a human readable ipv4 or ipv6 address
function string inet pton	returns the in_addr representation of the given address or false if a syntactically invalid address is given for example an ipv4 address without dots or an ipv6 address without colons
function string inet pton string $address	converts a human readable ip address to its packed in_addr representation
function ingres autocommit state $link	the connection link identifier
function bool ingres autocommit state	returns true if autocommit is enabled or false when autocommit is disabled
function bool ingres autocommit state resource $link	test if the connection is using autocommit
function ingres charset $link	the connection link identifier
function string ingres charset	returns a string with the value for ii_charsetxx or returns null if the value could not be determined
function string ingres charset resource $link	returns the installation character set
function ingres connect $database	the database name
function ingres connect $password	the password associated with username
function ingres connect $username	the ingres user name
function ingres connect $options	ingres_connect() options option name option type description example date_century_boundary integer the threshold by which a 2-digit year is determined to be in the current century or in the next century
function resource ingres connect	returns a ingres link resource on success or false on failure
function resource ingres connect string $database string $username string $password array $options	open a connection to an ingres database
function ingres cursor $result	the query result identifier
function string ingres cursor	returns a string containing the active cursor name
function string ingres cursor resource $result	get a cursor name for a given result resource
function ingres error $link	the connection link identifier
function string ingres error	returns a string containing the last error or null if no error has occurred
function string ingres error resource $link	get a meaningful error message for the last error generated
function ingres errsqlstate $link	the connection link identifier
function string ingres errsqlstate	returns a string containing the last sqlstate or null if no error has occurred
function string ingres errsqlstate resource $link	get the last sqlstate error code generated
function ingres escape string $source_string	the source string to be parsed
function ingres escape string $link	the connection link identifier
function string ingres escape string	returns a string containing the escaped data
function string ingres escape string resource $link string $source_string	escape special characters for use in a query
function ingres fetch array $result	the query result identifier
function ingres fetch array $result_type	the result type
function array ingres fetch array	returns an array that corresponds to the fetched row or false if there are no more rows
function array ingres fetch array resource $result int $result_type	fetch a row of result into an array
function ingres fetch assoc $result	the query result identifier
function array ingres fetch assoc	returns an associative array that corresponds to the fetched row or false if there are no more rows
function array ingres fetch assoc resource $result	fetch a row of result into an associative array
function ingres fetch object $link	the query result identifier
function ingres fetch object $result_type	( optional argument
function object ingres fetch object	returns an object that corresponds to the fetched row or false if there are no more rows
function object ingres fetch object resource $result int $result_type	fetch a row of result into an object
function ingres field name $result	the query result identifier
function ingres field name $index	index is the field whose name will be retrieved
function string ingres field name	returns the name of a field in a query result or false on failure
function string ingres field name resource $result int $index	get the name of a field in a query result
function ingres field nullable $result	the query result identifier
function ingres field nullable $index	index is the field whose nullability will be retrieved
function bool ingres field nullable	ingres_field_nullable() returns true if the field can be set to the null value and false if it cannot
function ingres field precision $result	the query result identifier
function ingres field precision $index	index is the field whose precision will be retrieved
function int ingres field precision	returns the field precision as an integer
function int ingres field precision resource $result int $index	get the precision of a field
function ingres field scale $result	the query result identifier
function ingres field scale $index	index is the field whose scale will be retrieved
function int ingres field scale	returns the scale of the field as an integer
function int ingres field scale resource $result int $index	get the scale of a field
function ingres next error $link	the connection link identifier
function bool ingres next error	ingres_next_error() returns true if there is another error to retrieve or false when there are no more errors
function bool ingres next error resource $link	get the next ingres error
function ingres pconnect $database	the database name
function ingres pconnect $password	the password associated with username
function ingres pconnect $username	the ingres user name
function ingres pconnect $options	see ingres_connect() for the list of options that can be passed
function resource ingres pconnect	returns an ingres link resource on success or false on failure
function ingres prepare $query	a valid sql query see the ingres sql reference guide in the ingres documentation
function ingres prepare $link	the connection link identifier
function mixed ingres prepare	ingres_prepare() returns a query result identifier that is used with ingres_execute() to execute the query
function mixed ingres prepare resource $link string $query	prepare a query for later execution
function ingres query $params	an array of parameter values to be used with the query
function ingres query $types	a string containing a sequence of types for the parameter values passed
function ingres query $query	a valid sql query see the ingres sql reference guide in the ingres documentation
function ingres query $link	the connection link identifier
function mixed ingres query	ingres_query() returns a query result identifier on success else it returns false
function mixed ingres query resource $link string $query array $params string $types	send an sql query to ingres
function ingres rollback $link	the connection link identifier
function bool ingres rollback	returns true on success or false on failure
function bool ingres rollback resource $link	roll back a transaction
function ingres set environment $options	an enumerated array of option name / value pairs
function ingres set environment $link	the connection link identifier
function bool ingres set environment	returns true on success or false on failure
function bool ingres set environment resource $link array $options	set environment features controlling output options
function ingres unbuffered query $params	an array of parameter values to be used with the query
function ingres unbuffered query $types	a string containing a sequence of types for the parameter values passed
function ingres unbuffered query $query	a valid sql query see the ingres sql reference guide in the ingres documentation
function ingres unbuffered query $link	the connection link identifier
function mixed ingres unbuffered query	ingres_unbuffered_query() returns a query result identifier when there are rows to fetch; else it returns false when there are no rows as is the case of an insert update or delete statement
function mixed ingres unbuffered query resource $link string $query array $params string $types	send an unbuffered sql query to ingres
function ini get all $extension	an optional extension name
function ini get all $details	retrieve details settings or only the current value for each setting
function array ini get all	returns an associative array with directive name as the array key
function array ini get all string $extension bool $details	gets all configuration options
function ini restore $varname	the configuration option name
function void ini restore string $varname	restores the value of a configuration option
function ini set $newvalue	the new value for the option
function ini set $varname	not all the available options can be changed using ini_set()
function string ini set	returns the old value on success false on failure
function string ini set string $varname string $newvalue	sets the value of a configuration option
function resource inotify init	a stream resource or false on error
function resource inotify init	initialize an inotify instance
function inotify queue len $inotify_instance	resource returned by inotify_init()
function int inotify queue len	returns a number upper than zero if there are pending events
function int inotify queue len resource $inotify_instance	return a number upper than zero if there are pending events
function intdiv $dividend	number to be divided
function intdiv $divisor	number which divides the dividend
function int intdiv	the integer quotient of the division of dividend by divisor
function int intdiv int $dividend int $divisor	integer division
function interface exists $interface_name	the interface name
function interface exists $autoload	whether to call __autoload or not by default
function bool interface exists	returns true if the interface given by interface_name has been defined false otherwise
function bool interface exists string $interface_name bool $autoload	checks if the interface has been defined
function intl error name $error_code	icu error code
function string intl error name	the returned string will be the same as the name of the error code constant
function string intl error name int $error_code	get symbolic name for a given error code
function int intl get error code	error code returned by the last api function call
function int intl get error code	get the last error code
function string intl get error message	description of an error occurred in the last api function call
function string intl get error message	get description of the last error
function intval $var	the scalar value being converted to an integer
function int intval	the integer value of var on success or 0 on failure
function int intval mixed $var int $base	get the integer value of a variable
function ip2long $ip_address	a standard format address
function int ip2long	returns the long integer or false if ip_address is invalid
function int ip2long string $ip_address	converts a string containing an ipv4 internet protocol dotted address into a long integer
function iptcembed $spool	spool flag
function iptcembed $iptcdata	the data to be written
function iptcembed $jpeg_file_name	path to the jpeg image
function mixed iptcembed	if spool is less than 2 the jpeg will be returned or false on failure
function iptcparse $iptcblock	a binary iptc block
function array iptcparse	returns an array using the tagmarker as an index and the value as the value
function array iptcparse string $iptcblock	parse a binary iptc block into single tags
function is a $class_name	the class name
function is a $object	the tested object
function is a $allow_string	if this parameter set to false string class name as object is not allowed
function bool is a	returns true if the object is of this class or has this class as one of its parents false otherwise
function bool is a object $object string $class_name bool $allow_string	checks if the object is of this class or has this class as one of its parents
function is array $var	the variable being evaluated
function bool is array	returns true if var is an array false otherwise
function bool is array mixed $var	finds whether a variable is an array
function is bool $var	the variable being evaluated
function bool is bool	returns true if var is a boolean false otherwise
function bool is bool mixed $var	finds out whether a variable is a boolean
function is callable $callable_name	receives the callable name
function is callable $syntax_only	if set to true the function only verifies that name might be a function or method
function is callable $var	the value to check
function bool is callable	returns true if var is callable false otherwise
function is dir $filename	path to the file
function bool is dir	returns true if the filename exists and is a directory false otherwise
function bool is dir string $filename	tells whether the filename is a directory
function is executable $filename	path to the file
function bool is executable	returns true if the filename exists and is executable or false on error
function is file $filename	path to the file
function bool is file	returns true if the filename exists and is a regular file false otherwise
function bool is file string $filename	tells whether the filename is a regular file
function is finite $val	the value to check
function bool is finite	true if val is a legal finite number within the allowed range for a php float on this platform else false
function bool is finite float $val	finds whether a value is a legal finite number
function is float $var	the variable being evaluated
function bool is float	returns true if var is a float false otherwise
function bool is float mixed $var	finds whether the type of a variable is float
function is infinite $val	the value to check
function bool is infinite	true if val is infinite else false
function bool is infinite float $val	finds whether a value is infinite
function is int $var	the variable being evaluated
function bool is int	returns true if var is an integer false otherwise
function bool is int mixed $var	find whether the type of a variable is integer
function is link $filename	path to the file
function bool is link	returns true if the filename exists and is a symbolic link false otherwise
function bool is link string $filename	tells whether the filename is a symbolic link
function is null $var	the variable being evaluated
function bool is null	returns true if var is null false otherwise
function bool is null mixed $var	finds whether a variable is null
function is numeric $var	the variable being evaluated
function bool is numeric	returns true if var is a number or a numeric string false otherwise
function bool is numeric mixed $var	finds whether a variable is a number or a numeric string
function is object $var	the variable being evaluated
function bool is object	returns true if var is an object false otherwise
function bool is object mixed $var	finds whether a variable is an object
function is readable $filename	path to the file
function bool is readable	returns true if the file or directory specified by filename exists and is readable false otherwise
function is scalar $var	the variable being evaluated
function bool is scalar	returns true if var is a scalar false otherwise
function bool is scalar mixed $var	finds whether a variable is a scalar
function is soap fault $object	the object to test
function bool is soap fault	this will return true on error and false otherwise
function bool is soap fault mixed $object	checks if a soap call has failed
function is string $var	the variable being evaluated
function bool is string	returns true if var is of type string false otherwise
function bool is string mixed $var	find whether the type of a variable is string
function is subclass of $class_name	the class name
function is subclass of $allow_string	if this parameter set to false string class name as object is not allowed
function is subclass of $object	a class name or an object instance
function bool is subclass of	this function returns true if the object object belongs to a class which is a subclass of class_name false otherwise
function bool is subclass of mixed $object string $class_name bool $allow_string	checks if the object has this class as one of its parents or implements it
function bool is tainted	return true if the string is tainted false otherwise
function is uploaded file $filename	the filename being checked
function bool is uploaded file	returns true on success or false on failure
function bool is uploaded file string $filename	tells whether the file was uploaded via http post
function is writable $filename	the filename being checked
function bool is writable	returns true if the filename exists and is writable
function bool is writable string $filename	tells whether the filename is writable
function iterator apply $function	the callback function to call on every element
function iterator apply $iterator	the class to iterate over
function iterator apply $args	arguments to pass to the callback function
function int iterator apply	returns the iteration count
function int iterator apply Traversable $iterator callable $function array $args	call a function for every element in an iterator
function jdmonthname $calendar	the calendar to take the month name from
function jdmonthname $jday	the julian day to operate on
function string jdmonthname	the month name for the given julian day and calendar
function string jdmonthname int $julianday int $mode	returns a month name
function jdtojewish $hebrew	if the hebrew parameter is set to true the fl parameter is used for hebrew string based output format
function jdtojewish $julianday	a julian day number as integer
function jdtojewish $fl	the available formats are: cal_jewish_add_alafim_geresh cal_jewish_add_alafim cal_jewish_add_gereshayim
function string jdtojewish	the jewish date as a string in the form month / day / year
function string jdtojewish int $juliandaycount bool $hebrew int $fl	converts a julian day count to a jewish calendar date
function jdtojulian $julianday	a julian day number as integer
function string jdtojulian	the julian date as a string in the form month / day / year
function string jdtojulian int $julianday	converts a julian day count to a julian calendar date
function jewishtojd $year	the year as a number between 1 and 9999
function jewishtojd $month	the month as a number from 1 to 13
function jewishtojd $day	the day as a number from 1 to 30
function int jewishtojd	the julian day for the given jewish date as an integer
function int jewishtojd int $month int $day int $year	converts a date in the jewish calendar to julian day count
function jpeg2wbmp $dest_height	destination image height
function jpeg2wbmp $wbmpname	path to destination wbmp file
function jpeg2wbmp $dest_width	destination image width
function jpeg2wbmp $threshold	threshold value between 0 and 8 inclusive
function jpeg2wbmp $jpegname	path to jpeg file
function bool jpeg2wbmp	returns true on success or false on failure
function bool jpeg2wbmp string $jpegname string $wbmpname int $dest_height int $dest_width int $threshold	convert jpeg image file to wbmp image file
function json decode $options	bitmask of json decode options
function json decode $json	the json string being decoded
function json decode $depth	user specified recursion depth
function json decode $assoc	when true returned object s will be converted into associative array s
function mixed json decode	returns the value encoded in json in appropriate php type
function mixed json decode string $json bool $assoc int $depth int $options	decodes a json string
function json encode $options	bitmask consisting of json_hex_quot json_hex_tag json_hex_amp json_hex_apos json_numeric_check json_pretty_print json_unescaped_slashes json_force_object json_preserve_zero_fraction json_unescaped_unicode json_partial_output_on_error
function json encode $depth	set the maximum depth
function json encode $value	the value being encoded
function string json encode	returns a json encoded string on success or false on failure
function string json encode mixed $value int $options int $depth	returns the json representation of a value
function int json last error	returns an integer the value can be one of the following constants:
function int json last error	returns the last error occurred
function judy type $array	the judy array to test
function int judy type	return an integer corresponding to a judy type
function int judy type Judy $array	return the type of a judy array
function juliantojd $day	the day as a number from 1 to 31
function juliantojd $year	the year as a number between -4713 and 9999
function juliantojd $month	the month as a number from 1 for january to 12 for december
function int juliantojd	the julian day for the given julian date as an integer
function int juliantojd int $month int $day int $year	converts a julian calendar date to julian day count
function kadm5 chpass principal $handle	a kadm5 handle
function kadm5 chpass principal $password	the new password
function kadm5 chpass principal $principal	the principal
function bool kadm5 chpass principal	returns true on success or false on failure
function bool kadm5 chpass principal resource $handle string $principal string $password	changes the principal's password
function kadm5 create principal $handle	a kadm5 handle
function kadm5 create principal $options	it is possible to specify several optional parameters within the array options
function kadm5 create principal $password	if password is omitted or is null a random key will be generated
function kadm5 create principal $principal	the principal
function bool kadm5 create principal	returns true on success or false on failure
function bool kadm5 create principal resource $handle string $principal string $password array $options	creates a kerberos principal with the given parameters
function kadm5 get policies $handle	a kadm5 handle
function array kadm5 get policies	returns array of policies on success or false on failure
function array kadm5 get policies resource $handle	gets all policies from the kerberos database
function kadm5 get principal $handle	a kadm5 handle
function kadm5 get principal $principal	the principal
function array kadm5 get principal	returns array of options containing the following keys: kadm5_principal kadm5_princ_expire_time kadm5_pw_expiration kadm5_attributes kadm5_max_life kadm5_mod_name kadm5_mod_time kadm5_kvno kadm5_policy kadm5_max_rlife kadm5_last_success kadm5_last_failed kadm5_fail_auth_count on success or false on failure
function array kadm5 get principal resource $handle string $principal	gets the principal's entries from the kerberos database
function kadm5 get principals $handle	a kadm5 handle
function array kadm5 get principals	returns array of principals on success or false on failure
function array kadm5 get principals resource $handle	gets all principals from the kerberos database
function kadm5 init with password $realm	defines the authentication domain for the connection
function kadm5 init with password $principal	the principal
function kadm5 init with password $admin_server	the server
function kadm5 init with password $password	if password is omitted or is null a random key will be generated
function resource kadm5 init with password	returns a kadm5 handle on success or false on failure
function resource kadm5 init with password string $admin_server string $realm string $principal string $password	opens a connection to the kadm5 library
function kadm5 modify principal $handle	a kadm5 handle
function kadm5 modify principal $options	it is possible to specify several optional parameters within the array options
function kadm5 modify principal $principal	the principal
function bool kadm5 modify principal	returns true on success or false on failure
function bool kadm5 modify principal resource $handle string $principal array $options	modifies a kerberos principal with the given parameters
function key $array	the array
function mixed key	the key() function simply returns the key of the array element thats currently being pointed to by the internal pointer
function mixed key array $array	fetch a key from an array
function krsort $sort_flags	you may modify the behavior of the sort using the optional parameter sort_flags for details see sort()
function krsort $array	the input array
function bool krsort	returns true on success or false on failure
function bool krsort array $array int $sort_flags	sort an array by key in reverse order
function ksort $sort_flags	you may modify the behavior of the sort using the optional parameter sort_flags for details see sort()
function ksort $array	the input array
function bool ksort	returns true on success or false on failure
function bool ksort array $array int $sort_flags	sort an array by key
function float lcg value	a pseudo random float value in the range of 0 1
function float lcg value	combined linear congruential generator
function lchgrp $group	the group specified by name or number
function lchgrp $filename	path to the symlink
function bool lchgrp	returns true on success or false on failure
function bool lchgrp string $filename mixed $group	changes group ownership of symlink
function ldap 8859 to t61 $value	the text to be translated
function string ldap 8859 to t61	return the t61 translation of value
function string ldap 8859 to t61 string $value	translate 8859 characters to t61 characters
function ldap add $entry	an array that specifies the information about the entry
function ldap add $link_identifier	an ldap link identifier returned by ldap_connect()
function ldap add $dn	the distinguished name of an ldap entity
function bool ldap add	returns true on success or false on failure
function bool ldap add resource $link_identifier string $dn array $entry	add entries to ldap directory
function ldap bind $link_identifier	an ldap link identifier returned by ldap_connect()
function bool ldap bind	returns true on success or false on failure
function bool ldap bind resource $link_identifier string $bind_rdn string $bind_password	bind to ldap directory
function ldap compare $value	the compared value
function ldap compare $link_identifier	an ldap link identifier returned by ldap_connect()
function ldap compare $dn	the distinguished name of an ldap entity
function ldap compare $attribute	the attribute name
function mixed ldap compare	returns true if value matches otherwise returns false
function mixed ldap compare resource $link_identifier string $dn string $attribute string $value	compare value of attribute found in entry specified with dn
function ldap connect $host	this field supports using a hostname or with openldap 2
function ldap connect $port	the port to connect to
function resource ldap connect	returns a positive ldap link identifier when the provided hostname / port combination or ldap uri seems plausible
function resource ldap connect string $host int $port	connect to an ldap server
function ldap control paged result response $link	an ldap link identifier returned by ldap_connect()
function ldap control paged result response $cookie	an opaque structure sent by the server
function ldap control paged result response $estimated	the estimated number of entries to retrieve
function bool ldap control paged result response	returns true on success or false on failure
function bool ldap control paged result response resource $link resource $result string $cookie int $estimated	retrieve the ldap pagination cookie
function ldap control paged result $link	an ldap link identifier returned by ldap_connect()
function ldap control paged result $pagesize	the number of entries by page
function ldap control paged result $iscritical	indicates whether the pagination is critical or not
function ldap control paged result $cookie	an opaque structure sent by the server ldap_control_paged_result_response()
function bool ldap control paged result	returns true on success or false on failure
function bool ldap control paged result resource $link int $pagesize bool $iscritical string $cookie	send ldap pagination control
function ldap count entries $link_identifier	an ldap link identifier returned by ldap_connect()
function ldap count entries $result_identifier	the internal ldap result
function int ldap count entries	returns number of entries in the result or false on error
function int ldap count entries resource $link_identifier resource $result_identifier	count the number of entries in a search
function ldap dn2ufn $dn	the distinguished name of an ldap entity
function string ldap dn2ufn	returns the user friendly name
function string ldap dn2ufn string $dn	convert dn to user friendly naming format
function ldap err2str $errno	the error number
function string ldap err2str	returns the error message as a string
function string ldap err2str int $errno	convert ldap error number into string error message
function ldap errno $link_identifier	an ldap link identifier returned by ldap_connect()
function int ldap errno	return the ldap error number of the last ldap command for this link
function int ldap errno resource $link_identifier	return the ldap error number of the last ldap command
function ldap escape $flags	the context the escaped string will be used in: ldap_escape_filter for filters to be used with ldap_search() or ldap_escape_dn for dns
function ldap escape $value	the value to escape
function ldap escape $ignore	characters to ignore when escaping
function string ldap escape	returns the escaped string
function string ldap escape string $value string $ignore int $flags	escape a string for use in an ldap filter or dn
function ldap explode dn $with_attrib	used to request if the rdns are returned with only values or their attributes as well
function ldap explode dn $dn	the distinguished name of an ldap entity
function array ldap explode dn	returns an array of all dn components
function array ldap explode dn string $dn int $with_attrib	splits dn into its component parts
function ldap first attribute $link_identifier	an ldap link identifier returned by ldap_connect()
function ldap first attribute $ber_identifier	ber_identifier is the identifier to internal memory location pointer
function string ldap first attribute	returns the first attribute in the entry on success and false on error
function string ldap first attribute resource $link_identifier resource $result_entry_identifier	return first attribute
function ldap first entry $link_identifier	an ldap link identifier returned by ldap_connect()
function resource ldap first entry	returns the result entry identifier for the first entry on success and false on error
function resource ldap first entry resource $link_identifier resource $result_identifier	return first result id
function bool ldap free result	returns true on success or false on failure
function bool ldap free result resource $result_identifier	free result memory
function ldap get attributes $link_identifier	an ldap link identifier returned by ldap_connect()
function array ldap get attributes	returns a complete entry information in a multi-dimensional array on success and false on error
function array ldap get attributes resource $link_identifier resource $result_entry_identifier	get attributes from a search result entry
function ldap get dn $link_identifier	an ldap link identifier returned by ldap_connect()
function string ldap get dn	returns the dn of the result entry and false on error
function string ldap get dn resource $link_identifier resource $result_entry_identifier	get the dn of a result entry
function ldap get entries $link_identifier	an ldap link identifier returned by ldap_connect()
function array ldap get entries	returns a complete result information in a multi-dimensional array on success and false on error
function array ldap get entries resource $link_identifier resource $result_identifier	get all result entries
function ldap get option $option	the parameter option can be one of: option type ldap_opt_deref integer ldap_opt_sizelimit integer ldap_opt_timelimit integer ldap_opt_network_timeout integer ldap_opt_protocol_version integer ldap_opt_error_number integer ldap_opt_referrals bool ldap_opt_restart bool ldap_opt_host_name string ldap_opt_error_string string ldap_opt_matched_dn string ldap_opt_server_controls array ldap_opt_client_controls array
function ldap get option $retval	this will be set to the option value
function ldap get option $link_identifier	an ldap link identifier returned by ldap_connect()
function bool ldap get option	returns true on success or false on failure
function bool ldap get option resource $link_identifier int $option mixed $retval	get the current value for given option
function ldap mod add $link_identifier	an ldap link identifier returned by ldap_connect()
function ldap mod add $dn	the distinguished name of an ldap entity
function bool ldap mod add	returns true on success or false on failure
function bool ldap mod add resource $link_identifier string $dn array $entry	add attribute values to current attributes
function ldap mod del $link_identifier	an ldap link identifier returned by ldap_connect()
function ldap mod del $dn	the distinguished name of an ldap entity
function bool ldap mod del	returns true on success or false on failure
function bool ldap mod del resource $link_identifier string $dn array $entry	delete attribute values from current attributes
function ldap mod replace $link_identifier	an ldap link identifier returned by ldap_connect()
function ldap mod replace $dn	the distinguished name of an ldap entity
function bool ldap mod replace	returns true on success or false on failure
function bool ldap mod replace resource $link_identifier string $dn array $entry	replace attribute values with new ones
function ldap modify $link_identifier	an ldap link identifier returned by ldap_connect()
function ldap modify $dn	the distinguished name of an ldap entity
function bool ldap modify	returns true on success or false on failure
function bool ldap modify resource $link_identifier string $dn array $entry	modify an ldap entry
function ldap next attribute $ber_identifier	the internal state of the pointer is maintained by this parameter
function ldap next attribute $link_identifier	an ldap link identifier returned by ldap_connect()
function string ldap next attribute	returns the next attribute in an entry on success and false on error
function string ldap next attribute resource $link_identifier resource $result_entry_identifier	get the next attribute in result
function ldap next entry $link_identifier	an ldap link identifier returned by ldap_connect()
function resource ldap next entry	returns entry identifier for the next entry in the result whose entries are being read starting with ldap_first_entry()
function resource ldap next entry resource $link_identifier resource $result_entry_identifier	get next result entry
function ldap rename $newparent	the new parent / superior entry
function ldap rename $link_identifier	an ldap link identifier returned by ldap_connect()
function ldap rename $deleteoldrdn	if true the old rdn value s is removed else the old rdn value s is retained as non-distinguished values of the entry
function ldap rename $dn	the distinguished name of an ldap entity
function ldap rename $newrdn	the new rdn
function bool ldap rename	returns true on success or false on failure
function bool ldap rename resource $link_identifier string $dn string $newrdn string $newparent bool $deleteoldrdn	modify the name of an entry
function ldap set option $link_identifier	an ldap link identifier returned by ldap_connect()
function ldap set option $option	the parameter option can be one of: option type available since ldap_opt_deref integer &nbsp; ldap_opt_sizelimit integer &nbsp; ldap_opt_timelimit integer &nbsp; ldap_opt_network_timeout integer php 5
function ldap set option $newval	the new value for the specified option
function bool ldap set option	returns true on success or false on failure
function bool ldap set option resource $link_identifier int $option mixed $newval	set the value of the given option
function ldap sort $sortfilter	the attribute to use as a key in the sort
function ldap sort $link	an ldap link identifier returned by ldap_connect()
function ldap sort $result	an search result identifier returned by ldap_search()
function bool ldap sort resource $link resource $result string $sortfilter	sort ldap result entries
function ldap unbind $link_identifier	an ldap link identifier returned by ldap_connect()
function bool ldap unbind	returns true on success or false on failure
function bool ldap unbind resource $link_identifier	unbind from ldap directory
function levenshtein $str1	one of the strings being evaluated for levenshtein distance
function levenshtein $str2	one of the strings being evaluated for levenshtein distance
function levenshtein $cost_del	defines the cost of deletion
function levenshtein $cost_rep	defines the cost of replacement
function levenshtein $cost_ins	defines the cost of insertion
function int levenshtein	this function returns the levenshtein-distance between the two argument strings or -1 if one of the argument strings is longer than the limit of 255 characters
function int levenshtein string $str1 string $str2	calculate levenshtein distance between two strings
function array libxml get errors	returns an array with libxmlerror objects if there are any errors in the buffer or an empty array otherwise
function LibXMLError libxml get last error	returns a libxmlerror object if there is any error in the buffer false otherwise
function libxml set external entity loader $resolver_function	a callable that takes three arguments
function libxml use internal errors $use_errors	enable true user error handling or disable false user error handling
function bool libxml use internal errors	this function returns the previous value of use_errors
function bool libxml use internal errors bool $use_errors	disable libxml errors and allow user to fetch error information as needed
function link $target	target of the link
function link $link	the link name
function bool link	returns true on success or false on failure
function bool link string $target string $link	create a hard link
function linkinfo $path	path to the link
function int linkinfo	linkinfo() returns the st_dev field of the unix c stat structure returned by the lstat system call
function list $var1	a variable
function array list	returns the assigned array
function array list mixed $var1	assign variables as if they were an array
function array localeconv	localeconv() returns data based upon the current locale as set by setlocale()
function array localeconv	get numeric formatting information
function localtime $timestamp	the optional timestamp parameter is an integer unix timestamp that defaults to the current local time if a timestamp is not given
function localtime $is_associative	if set to false or not supplied then the array is returned as a regular numerically indexed array
function array localtime int $timestamp bool $is_associative	get the local time
function log cmd delete $server	an array containing the basic information about the server that was picked
function log cmd delete $deleteOptions	key value limit integer 1 or 0
function log cmd delete $protocolOptions	key value message_length the total size in bytes of the encoded message being sent over the wire request_id the request identifier for this message: 42 namespace the mongodb namespace used for the protocol message dbname
function array log cmd delete array $server array $writeOptions array $deleteOptions array $protocolOptions	callback when deleting documents
function log cmd insert $server	an array containing the basic information about the server that was picked
function log cmd insert $document	the document that has been prepared to be inserted
function log cmd insert $protocolOptions	key value message_length the total size in bytes of the encoded message being sent over the wire request_id the request identifier for this message: 42 namespace the mongodb namespace used for the protocol message dbname
function array log cmd insert array $server array $document array $writeOptions array $protocolOptions	callback when inserting documents
function log cmd update $updateOptions	key value multi boolean true if this update is allowed to update all matched criteria upsert boolean true if the document should be created if criteria does not match q array the search criteria u array the new object / modifications
function log cmd update $server	an array containing the basic information about the server that was picked
function log cmd update $protocolOptions	key value message_length the total size in bytes of the encoded message being sent over the wire request_id the request identifier for this message: 42 namespace the mongodb namespace used for the protocol message dbname
function array log cmd update array $server array $writeOptions array $updateOptions array $protocolOptions	callback when updating documents
function log getmore $info	key value request_id integer the driver request identifier cursor_id integer the cursor identifier being used to fetch more data batch_size integer maximum number of documents being requested
function log getmore $server	an array containing the basic information about the server that was picked
function array log getmore array $server array $info	callback when retrieving next cursor batch
function log killcursor $info	key value cursor_id integer the cursor identifier to kill
function log killcursor $server	an array containing the basic information about the server that was picked
function array log killcursor array $server array $info	callback when executing killcursor operations
function log write batch $batch	array the actual batch operation
function log write batch $server	an array containing the basic information about the server that was picked
function log write batch $protocolOptions	key value message_length the total size in bytes of the encoded message being sent over the wire request_id the request identifier for this message: 42 namespace the mongodb namespace used for the protocol message dbname
function array log write batch array $server array $writeOptions array $batch array $protocolOptions	callback when writing batches
function log $base	the optional logarithmic base to use defaults to e and so to the natural logarithm
function log $arg	the value to calculate the logarithm for
function float log	the logarithm of arg to base if given or the natural logarithm
function float log float $arg float $base	natural logarithm
function log1p $number	the argument to process
function float log1p	log 1 + number
function float log1p float $number	returns log 1 + number computed in a way that is accurate even when the value of number is close to zero
function long2ip $proper_address	a proper address representation in long integer
function string long2ip	returns the internet ip address as a string
function string long2ip string $proper_address	converts an long integer address into a string in ipv4 internet standard dotted format
function lstat $filename	path to a file or a symbolic link
function array lstat	see the manual page for stat() for information on the structure of the array that lstat() returns
function array lstat string $filename	gives information about a file or symbolic link
function ltrim $character_mask	you can also specify the characters you want to strip by means of the character_mask parameter
function ltrim $str	the input string
function string ltrim	this function returns a string with whitespace stripped from the beginning of str
function lzf decompress $data	the compressed string
function string lzf decompress	returns the decompressed data or false if an error occurred
function string lzf decompress string $data	lzf decompression
function mail $subject	subject of the email to be sent
function mail $additional_parameters(optional)	the additional_parameters parameter can be used to pass additional flags as command line options to the program configured to be used when sending mail as defined by the sendmail_path configuration setting
function mail $to	receiver or receivers of the mail
function mail $additional_headers(optional)	string to be inserted at the end of the email header
function mail $message	message to be sent
function bool mail	returns true if the mail was successfully accepted for delivery false otherwise
function bool mail string $to string $subject string $message string $additional_headers string $additional_parameters	send mail
function mailparse determine best xfer encoding $fp	a valid file pointer which must be seek-able
function string mailparse determine best xfer encoding	returns one of the character encodings supported by the mbstring module
function string mailparse determine best xfer encoding resource $fp	gets the best way of encoding
function resource mailparse msg create	returns a handle that can be used to parse a message
function resource mailparse msg create	create a mime mail resource
function mailparse msg extract part file $callbackfunc	if set this must be either a valid callback that will be passed the extracted section or null to make this function return the extracted section
function mailparse msg extract part file $filename	can be a file name or a valid stream resource
function mailparse msg extract part file $mimemail	a valid mime resource created with mailparse_msg_create()
function string mailparse msg extract part file	if callbackfunc is not null returns true on success
function string mailparse msg extract part file resource $mimemail mixed $filename callable $callbackfunc	extracts / decodes a message section
function mailparse msg parse file $filename	path to the file holding the message
function resource mailparse msg parse file	returns a mime resource representing the structure or false on error
function mailparse msg parse $mimemail	a valid mime resource
function bool mailparse msg parse	returns true on success or false on failure
function bool mailparse msg parse resource $mimemail string $data	incrementally parse data into buffer
function mailparse rfc822 parse addresses $addresses	a string containing addresses like in: wez furlong < wez@example
function array mailparse rfc822 parse addresses	returns an array of associative arrays with the following keys for each recipient: display the recipient name for display purpose
function array mailparse rfc822 parse addresses string $addresses	parse rfc 822 compliant addresses
function mailparse stream encode $destfp	the destination file handle in which the encoded data will be written
function mailparse stream encode $encoding	one of the character encodings supported by the mbstring module
function mailparse stream encode $sourcefp	a valid file handle
function bool mailparse stream encode	returns true on success or false on failure
function bool mailparse stream encode resource $sourcefp resource $destfp string $encoding	streams data from source file pointer apply encoding and write to destfp
function mailparse uudecode all $fp	a valid file pointer
function array mailparse uudecode all	returns an array of associative arrays listing filename information
function array mailparse uudecode all resource $fp	scans the data from fp and extract each embedded uuencoded file
function int maxdb connect errno	an error code value for the last call to maxdb_connect() if it failed
function int maxdb connect errno	returns the error code from last connect call
function string maxdb connect error	a string that describes the error
function string maxdb connect error	returns a string description of the last connect error
function void maxdb debug string $debug	performs debugging operations
function string maxdb get client info	a string that represents the maxdb client library version
function string maxdb get client info	returns the maxdb client version as a string
function resource maxdb init	returns an resource
function resource maxdb init	initializes maxdb and returns an resource for use with maxdb_real_connect
function bool maxdb select db	returns true on success or false on failure
function bool maxdb select db resource $link string $dbname	selects the default database for database queries
function string maxdb stmt sqlstate	returns a string containing the sqlstate error code for the last error
function string maxdb stmt sqlstate resource $stmt	returns sqlstate error from previous statement operation
function mb check encoding $var	the byte stream to check
function mb check encoding $encoding	the expected encoding
function bool mb check encoding	returns true on success or false on failure
function bool mb check encoding string $var string $encoding	check if the string is valid for the specified encoding
function mb convert variables $to_encoding	the encoding that the string is being converted to
function mb convert variables $vars	vars is the reference to the variable being converted
function mb convert variables	additional vars
function mb convert variables $from_encoding	from_encoding is specified as an array or comma separated string it tries to detect encoding from from-coding
function string mb convert variables	the character encoding before conversion for success or false for failure
function string mb convert variables string $to_encoding mixed $from_encoding mixed $vars	convert character code in variable s
function mb decode mimeheader $str	the string being decoded
function string mb decode mimeheader	the decoded string in internal character encoding
function string mb decode mimeheader string $str	decode string in mime header field
function mb decode numericentity $convmap	convmap is an array that specifies the code area to convert
function mb decode numericentity $str	the string being decoded
function mb decode numericentity $encoding	the encoding parameter is the character encoding
function string mb decode numericentity	the converted string
function string mb decode numericentity string $str array $convmap string $encoding	decode html numeric string reference to character
function mb detect order $encoding_list	encoding_list is an array or comma separated list of character encoding
function mixed mb detect order	returns true on success or false on failure
function mixed mb detect order mixed $encoding_list	set / get character encoding detection order
function mb encode numericentity $convmap	convmap is array specifies code area to convert
function mb encode numericentity $str	the string being encoded
function mb encode numericentity $encoding	the encoding parameter is the character encoding
function string mb encode numericentity	the converted string
function string mb encode numericentity string $str array $convmap string $encoding bool $is_hex	encode character to html numeric string reference
function mb encoding aliases $encoding	the encoding type being checked for aliases
function array mb encoding aliases	returns a numerically indexed array of encoding aliases on success or false on failure
function array mb encoding aliases string $encoding	get aliases of a known encoding type
function mb ereg match $pattern	the regular expression pattern
function mb ereg match $string	the string being evaluated
function bool mb ereg match string $pattern string $string string $option	regular expression match for multibyte string
function mb ereg replace callback $string	the string being checked
function mb ereg replace callback $pattern	the regular expression pattern
function mb ereg replace callback $callback	a callback that will be called and passed an array of matched elements in the subject string
function mb ereg replace callback $option	matching condition can be set by option parameter
function string mb ereg replace callback	the resultant string on success or false on error
function string mb ereg replace callback string $pattern callable $callback string $string string $option	perform a regular expresssion seach and replace with multibyte support using a callback
function mb ereg search init $string	the search string
function mb ereg search init $option	the search option
function mb ereg search init $pattern	the search pattern
function bool mb ereg search init string $string string $pattern string $option	setup string and regular expression for a multibyte regular expression match
function mb ereg search regs $option	the search option
function mb ereg search regs $pattern	the search pattern
function mb ereg search $option	the search option
function mb ereg search $pattern	the search pattern
function bool mb ereg search string $pattern string $option	multibyte regular expression match for predefined multibyte string
function mb http output $encoding	if encoding is set mb_http_output() sets the http output character encoding to encoding
function mixed mb http output	if encoding is omitted mb_http_output() returns the current http output character encoding
function mixed mb http output string $encoding	set / get http output character encoding
function mb internal encoding $encoding	encoding is the character encoding name used for the http input character encoding conversion http output character encoding conversion and the default character encoding for string functions defined by the mbstring module
function mixed mb internal encoding	if encoding is set then returns true on success or false on failure
function mixed mb internal encoding string $encoding	set / get internal character encoding
function mb language $language	used for encoding e-mail messages
function mixed mb language	if language is set and language is valid it returns true
function mixed mb language string $language	set / get current language
function array mb list encodings	returns a numerically indexed array
function array mb list encodings	returns an array of all supported encodings
function mb output handler $status	the status of the output buffer
function mb output handler $contents	the contents of the output buffer
function string mb output handler	the converted string
function string mb output handler string $contents int $status	callback function converts character encoding in output buffer
function mb parse str $result	an array containing decoded and character encoded converted values
function mb parse str $encoded_string	the url encoded data
function bool mb parse str	returns true on success or false on failure
function bool mb parse str string $encoded_string array $result	parse get / post / cookie data and set global variable
function mb preferred mime name $encoding	the encoding being checked
function string mb preferred mime name	the mime charset string for character encoding encoding
function string mb preferred mime name string $encoding	get mime charset string
function mb regex encoding $encoding	the encoding parameter is the character encoding
function mixed mb regex encoding string $encoding	set / get character encoding for multibyte regex
function mb send mail $additional_parameter	additional_parameter is a mta command line parameter
function mb send mail $subject	the subject of the mail
function mb send mail $to	the mail addresses being sent to
function mb send mail $message	the message of the mail
function mb send mail $additional_headers(optional)	string to be inserted at the end of the email header
function bool mb send mail	returns true on success or false on failure
function bool mb send mail string $to string $subject string $message string $additional_headers string $additional_parameter	send encoded mail
function mb strimwidth $start	the start position offset
function mb strimwidth $width	the width of the desired trim
function mb strimwidth $str	the string being decoded
function mb strimwidth $encoding	the encoding parameter is the character encoding
function mb strimwidth $trimmarker	a string that is added to the end of string when string is truncated
function string mb strimwidth	the truncated string
function string mb strimwidth string $str int $start int $width string $trimmarker string $encoding	get truncated string with specified width
function mb stripos $offset	the position in haystack to start searching
function mb stripos $encoding	character encoding name to use
function mb stripos $haystack	the string from which to get the position of the first occurrence of needle
function mb stripos $needle	the string to find in haystack
function int mb stripos	return the numeric position of the first occurrence of needle in the haystack string or false if needle is not found
function int mb stripos string $haystack string $needle int $offset string $encoding	finds position of first occurrence of a string within another case insensitive
function mb stristr $before_needle	determines which portion of haystack this function returns
function mb stristr $haystack	the string from which to get the first occurrence of needle
function mb stristr $needle	the string to find in haystack
function mb stristr $encoding	character encoding name to use
function string mb stristr	returns the portion of haystack or false if needle is not found
function string mb stristr string $haystack string $needle bool $before_needle string $encoding	finds first occurrence of a string within another case insensitive
function mb strlen $encoding	the encoding parameter is the character encoding
function mb strlen $str	the string being checked for length
function mixed mb strlen	returns the number of characters in string str having character encoding encoding
function mixed mb strlen string $str string $encoding	get string length
function mb strpos $haystack	the string being checked
function mb strpos $offset	the search offset
function mb strpos $needle	the string to find in haystack
function mb strpos $encoding	the encoding parameter is the character encoding
function int mb strpos	returns the numeric position of the first occurrence of needle in the haystack string
function int mb strpos string $haystack string $needle int $offset string $encoding	find position of first occurrence of string in a string
function mb strrchr $haystack	the string from which to get the last occurrence of needle
function mb strrchr $part	determines which portion of haystack this function returns
function mb strrchr $needle	the string to find in haystack
function mb strrchr $encoding	character encoding name to use
function string mb strrchr	returns the portion of haystack
function string mb strrchr string $haystack string $needle bool $part string $encoding	finds the last occurrence of a character in a string within another
function mb strrichr $haystack	the string from which to get the last occurrence of needle
function mb strrichr $part	determines which portion of haystack this function returns
function mb strrichr $needle	the string to find in haystack
function mb strrichr $encoding	character encoding name to use
function string mb strrichr	returns the portion of haystack
function string mb strrichr string $haystack string $needle bool $part string $encoding	finds the last occurrence of a character in a string within another case insensitive
function mb strripos $haystack	the string from which to get the position of the last occurrence of needle
function mb strripos $offset	the position in haystack to start searching
function mb strripos $needle	the string to find in haystack
function mb strripos $encoding	character encoding name to use
function int mb strripos	return the numeric position of the last occurrence of needle in the haystack string or false if needle is not found
function int mb strripos string $haystack string $needle int $offset string $encoding	finds position of last occurrence of a string within another case insensitive
function mb strrpos $offset	may be specified to begin searching an arbitrary number of characters into the string
function mb strrpos $haystack	the string being checked for the last occurrence of needle
function mb strrpos $needle	the string to find in haystack
function mb strrpos $encoding	the encoding parameter is the character encoding
function int mb strrpos	returns the numeric position of the last occurrence of needle in the haystack string
function int mb strrpos string $haystack string $needle int $offset string $encoding	find position of last occurrence of a string in a string
function mb strtoupper $str	the string being uppercased
function mb strtoupper $encoding	the encoding parameter is the character encoding
function string mb strtoupper	str with all alphabetic characters converted to uppercase
function string mb strtoupper string $str string $encoding	make a string uppercase
function mb strwidth $str	the string being decoded
function mb strwidth $encoding	the encoding parameter is the character encoding
function int mb strwidth	the width of string str
function int mb strwidth string $str string $encoding	return width of string
function mb substitute character $substrchar	specify the unicode value as an integer or as one of the following string s: none : no output long : output character code value example: u+3000 jis+7e7e entity : output character entity example: ȁ)
function mixed mb substitute character	if substchar is set it returns true for success otherwise returns false
function mixed mb substitute character mixed $substrchar	set / get substitution character
function mb substr count $needle	the string being found
function mb substr count $haystack	the string being checked
function mb substr count $encoding	the encoding parameter is the character encoding
function int mb substr count	the number of times the needle substring occurs in the haystack string
function int mb substr count string $haystack string $needle string $encoding	count the number of substring occurrences
function string mcrypt cbc int $cipher string $key string $data int $mode string $iv	encrypts / decrypts data in cbc mode
function mcrypt create iv $size	the size of the iv
function mcrypt create iv $source	the source of the iv
function string mcrypt create iv	returns the initialization vector or false on error
function string mcrypt ecb int $cipher string $key string $data int $mode	deprecated: encrypts / decrypts data in ecb mode
function mcrypt enc get block size $td	the encryption descriptor
function int mcrypt enc get block size	returns the block size of the specified algorithm in bytes
function int mcrypt enc get block size resource $td	returns the blocksize of the opened algorithm
function mcrypt enc get key size $td	the encryption descriptor
function int mcrypt enc get key size	returns the maximum supported key size of the algorithm in bytes
function int mcrypt enc get key size resource $td	returns the maximum supported keysize of the opened mode
function mcrypt enc get supported key sizes $td	the encryption descriptor
function array mcrypt enc get supported key sizes	returns an array with the key sizes supported by the algorithm specified by the encryption descriptor
function array mcrypt enc get supported key sizes resource $td	returns an array with the supported keysizes of the opened algorithm
function mcrypt enc is block algorithm mode $td	the encryption descriptor
function bool mcrypt enc is block algorithm mode	returns true if the mode is for use with block algorithms otherwise it returns false
function bool mcrypt enc is block algorithm mode resource $td	checks whether the encryption of the opened mode works on blocks
function mcrypt enc is block algorithm $td	the encryption descriptor
function bool mcrypt enc is block algorithm	returns true if the algorithm is a block algorithm or false if it is a stream one
function bool mcrypt enc is block algorithm resource $td	checks whether the algorithm of the opened mode is a block algorithm
function mcrypt enc is block mode $td	the encryption descriptor
function bool mcrypt enc is block mode	returns true if the mode outputs blocks of bytes or false if it outputs just bytes
function bool mcrypt enc is block mode resource $td	checks whether the opened mode outputs blocks
function mcrypt encrypt $iv	used for the initialization in cbc cfb ofb modes and in some algorithms in stream mode
function mcrypt encrypt $key	the key with which the data will be encrypted
function mcrypt encrypt $data	the data that will be encrypted with the given cipher and mode
function mcrypt encrypt $cipher	one of the mcrypt_ciphername constants or the name of the algorithm as string
function mcrypt encrypt $mode	one of the mcrypt_mode_modename constants or one of the following strings: ecb cbc cfb ofb nofb or stream
function string mcrypt encrypt	returns the encrypted data as a string or false on failure
function string mcrypt encrypt string $cipher string $key string $data string $mode string $iv	encrypts plaintext with given parameters
function mcrypt generic init $key	the maximum length of the key should be the one obtained by calling mcrypt_enc_get_key_size() and every value smaller than this is legal
function mcrypt generic init $iv	the iv should normally have the size of the algorithms block size but you must obtain the size by calling mcrypt_enc_get_iv_size()
function mcrypt generic init $td	the encryption descriptor
function int mcrypt generic init	the function returns a negative value on error: -3 when the key length was incorrect -4 when there was a memory allocation problem and any other return value is an unknown error
function int mcrypt generic init resource $td string $key string $iv	this function initializes all buffers needed for encryption
function mcrypt generic $data	the data to encrypt
function mcrypt generic $td	the encryption descriptor
function string mcrypt generic	returns the encrypted data
function mcrypt get cipher name $cipher	one of the mcrypt_ciphername constants or the name of the algorithm as string
function string mcrypt get cipher name	this function returns the name of the cipher or false if the cipher does not exist
function string mcrypt get cipher name int $cipher	gets the name of the specified cipher
function mcrypt get iv size $cipher	one of the mcrypt_ciphername constants or the name of the algorithm as string
function mcrypt get iv size $mode	one of the mcrypt_mode_modename constants or one of the following strings: ecb cbc cfb ofb nofb or stream
function int mcrypt get iv size	returns the size of the initialization vector iv in bytes
function int mcrypt get iv size string $cipher string $mode	returns the size of the iv belonging to a specific cipher / mode combination
function mcrypt get key size $cipher	one of the mcrypt_ciphername constants or the name of the algorithm as string
function mcrypt get key size $mode	one of the mcrypt_mode_modename constants or one of the following strings: ecb cbc cfb ofb nofb or stream
function int mcrypt get key size	returns the maximum supported key size of the algorithm in bytes or false on failure
function int mcrypt get key size int $cipher	gets the key size of the specified cipher
function mcrypt list algorithms $lib_dir	specifies the directory where all algorithms are located
function array mcrypt list algorithms	returns an array with all the supported algorithms
function array mcrypt list algorithms string $lib_dir	gets an array of all supported ciphers
function mcrypt module close $td	the encryption descriptor
function bool mcrypt module close	returns true on success or false on failure
function bool mcrypt module close resource $td	closes the mcrypt module
function mcrypt module get algo block size $algorithm	the algorithm name
function mcrypt module get algo block size $lib_dir	this optional parameter can contain the location where the mode module is on the system
function int mcrypt module get algo block size	returns the block size of the algorithm specified in bytes
function int mcrypt module get algo block size string $algorithm string $lib_dir	returns the blocksize of the specified algorithm
function mcrypt module get algo key size $algorithm	the algorithm name
function mcrypt module get algo key size $lib_dir	this optional parameter can contain the location where the mode module is on the system
function int mcrypt module get algo key size	this function returns the maximum supported key size of the algorithm specified in bytes
function int mcrypt module get algo key size string $algorithm string $lib_dir	returns the maximum supported keysize of the opened mode
function mcrypt module get supported key sizes $lib_dir	the optional lib_dir parameter can contain the location where the algorithm module is on the system
function mcrypt module get supported key sizes $algorithm	the algorithm to be used
function array mcrypt module get supported key sizes	returns an array with the key sizes supported by the specified algorithm
function array mcrypt module get supported key sizes string $algorithm string $lib_dir	returns an array with the supported keysizes of the opened algorithm
function mcrypt module is block algorithm mode $lib_dir	the optional lib_dir parameter can contain the location where the algorithm module is on the system
function mcrypt module is block algorithm mode $mode	the mode to check
function bool mcrypt module is block algorithm mode	this function returns true if the mode is for use with block algorithms otherwise it returns false
function bool mcrypt module is block algorithm mode string $mode string $lib_dir	returns if the specified module is a block algorithm or not
function mcrypt module is block algorithm $algorithm	the algorithm to check
function mcrypt module is block algorithm $lib_dir	the optional lib_dir parameter can contain the location where the algorithm module is on the system
function bool mcrypt module is block algorithm	this function returns true if the specified algorithm is a block algorithm or false if it is a stream one
function bool mcrypt module is block algorithm string $algorithm string $lib_dir	this function checks whether the specified algorithm is a block algorithm
function mcrypt module is block mode $lib_dir	the optional lib_dir parameter can contain the location where the algorithm module is on the system
function mcrypt module is block mode $mode	one of the mcrypt_mode_modename constants or one of the following strings: ecb cbc cfb ofb nofb or stream
function bool mcrypt module is block mode	this function returns true if the mode outputs blocks of bytes or false if it outputs just bytes
function bool mcrypt module is block mode string $mode string $lib_dir	returns if the specified mode outputs blocks or not
function mcrypt module open $algorithm_directory	the algorithm_directory parameter is used to locate the encryption module
function mcrypt module open $mode_directory	the mode_directory parameter is used to locate the encryption module
function mcrypt module open $mode	one of the mcrypt_mode_modename constants or one of the following strings: ecb cbc cfb ofb nofb or stream
function mcrypt module open $algorithm	one of the mcrypt_ciphername constants or the name of the algorithm as string
function resource mcrypt module open	normally it returns an encryption descriptor or false on error
function resource mcrypt module open string $algorithm string $algorithm_directory string $mode string $mode_directory	opens the module of the algorithm and the mode to be used
function md5 file $raw_output	when true returns the digest in raw binary format with a length of 16
function md5 file $filename	the filename
function string md5 file	returns a string on success false otherwise
function string md5 file string $filename bool $raw_output	calculates the md5 hash of a given file
function md5 $raw_output	if the optional raw_output is set to true then the md5 digest is instead returned in raw binary format with a length of 16
function md5 $str	the string
function string md5	returns the hash as a 32-character hexadecimal number
function string md5 string $str bool $raw_output	calculate the md5 hash of a string
function mdecrypt generic $td	an encryption descriptor returned by mcrypt_module_open()
function mdecrypt generic $data	encrypted data
function string mdecrypt generic resource $td string $data	decrypts data
function memcache debug $on_off	turns debug output on if equals to true
function bool memcache debug	returns true if php was built with --enable-debug option otherwise returns false
function bool memcache debug bool $on_off	turn debug output on / off
function memory get peak usage $real_usage	set this to true to get the real size of memory allocated from system
function int memory get peak usage	returns the memory peak in bytes
function int memory get peak usage bool $real_usage	returns the peak of memory allocated by php
function memory get usage $real_usage	set this to true to get total memory allocated from system including unused pages
function int memory get usage	returns the memory amount in bytes
function int memory get usage bool $real_usage	returns the amount of memory allocated to php
function metaphone $phonemes	this parameter restricts the returned metaphone key to phonemes characters in length
function metaphone $str	the input string
function string metaphone	returns the metaphone key as a string or false on failure
function string metaphone string $str int $phonemes	calculate the metaphone key of a string
function method exists $object	an object instance or a class name
function method exists $method_name	the method name
function bool method exists	returns true if the method given by method_name has been defined for the given object false otherwise
function bool method exists mixed $object string $method_name	checks if the class method exists
function int mhash count	returns the highest available hash id
function mhash get block size $hash	the hash id
function int mhash get block size	returns the size in bytes or false if the hash does not exist
function int mhash get block size int $hash	gets the block size of the specified hash
function mhash get hash name $hash	the hash id
function string mhash get hash name	returns the name of the hash or false if the hash does not exist
function mhash $hash	the hash id
function mhash $data	the user input as a string
function mhash $key	if specified the function will return the resulting hmac instead
function string mhash	returns the resulting hash also called digest or hmac as a string or false on error
function string mhash int $hash string $data string $key	computes hash
function microtime $get_as_float	if used and set to true microtime() will return a float instead of a string as described in the return values section below
function mixed microtime	by default microtime() returns a string in the form msec sec where sec is the number of seconds since the unix epoch 0:00:00 january 1 1970 gmt and msec measures microseconds that have elapsed since sec and is also expressed in seconds
function mixed microtime bool $get_as_float	return current unix timestamp with microseconds
function mime content type $filename	path to the tested file
function string mime content type	returns the content type in mime format like text / plain or application / octet-stream
function string mime content type string $filename	detect mime content-type for a file
function min	any comparable value
function min $values	an array containing the values
function min $value2	any comparable value
function min $value1	any comparable value
function mixed min	min() returns the parameter value considered lowest according to standard comparisons
function mixed min array $values	find lowest value
function ming setcubicthreshold $threshold	the threshold
function void ming setcubicthreshold int $threshold	set cubic threshold
function ming setscale $scale	the scale to be set
function void ming setscale float $scale	set the global scaling factor
function ming useswfversion $version	swf version to use
function void ming useswfversion int $version	sets the swf version
function mktime $day	the number of the day relative to the end of the previous month
function mktime $second	the number of seconds relative to the start of the minute
function mktime $hour	the number of the hour relative to the start of the day determined by month day and year
function mktime $month	the number of the month relative to the end of the previous year
function mktime $is_dst	this parameter can be set to 1 if the time is during daylight savings time dst 0 if it is not or -1 the default if it is unknown whether the time is within daylight savings time or not
function mktime $year	the number of the year may be a two or four digit value with values between 0-69 mapping to 2000-2069 and 70-100 to 1970-2000
function mktime $minute	the number of the minute relative to the start of the hour
function int mktime	mktime() returns the unix timestamp of the arguments given
function int mktime int $hour int $minute int $second int $month int $day int $year int $is_dst	get unix timestamp for a date
function money format $n	the number is formatted according to the locales national currency format e
function money format $number	the number to be formatted
function money format $+or(	specify the formatting style for positive and negative numbers
function money format $-	if present it will make all fields left-justified padded to the right as opposed to the default which is for the fields to be right-justified padded to the left
function money format f $	the character = followed by a single byte character f to be used as the numeric fill character
function money format $#n	the maximum number of digits n expected to the left of the decimal character e
function money format $!	suppress the currency symbol from the output string
function money format $.p	a period followed by the number of digits p after the decimal character
function money format $w	a decimal digit string specifying a minimum field width
function money format $i	the number is formatted according to the locales international currency format e
function money format $^	disable the use of grouping characters as defined by the current locale
function money format $%	returns the % character
function string money format	returns the formatted string
function string money format string $format float $number	formats a number as a currency string
function mqseries back $hConn	connection handle
function mqseries back $reason	reason code qualifying the compcode
function mqseries back $compCode	completion code
function void mqseries back resource $hconn resource $compCode resource $reason	mqseries mqback
function mqseries close $hConn	connection handle
function mqseries close $reason	reason code qualifying the compcode
function mqseries close $hObj	object handle
function mqseries close $compCode	completion code
function void mqseries close resource $hconn resource $hobj int $options resource $compCode resource $reason	mqseries mqclose
function mqseries cmit $hConn	connection handle
function mqseries cmit $reason	reason code qualifying the compcode
function mqseries cmit $compCode	completion code
function void mqseries cmit resource $hconn resource $compCode resource $reason	mqseries mqcmit
function mqseries conn $hConn	connection handle
function mqseries conn $reason	reason code qualifying the compcode
function mqseries conn $qManagerName	name of queue manager
function mqseries conn $compCode	completion code
function void mqseries conn string $qManagerName resource $hconn resource $compCode resource $reason	mqseries mqconn
function mqseries disc $hConn	connection handle
function mqseries disc $reason	reason code qualifying the compcode
function mqseries disc $compCode	completion code
function void mqseries disc resource $hconn resource $compCode resource $reason	mqseries mqdisc
function mqseries open $objDesc	object descriptor
function mqseries open $hConn	connection handle
function mqseries open $hObj	object handle
function mqseries open $options	options that control the action of the function
function mqseries open $compCode	completion code
function mqseries open $reason	reason code qualifying the compcode
function void mqseries open resource $hconn array $objDesc int $option resource $hobj resource $compCode resource $reason	mqseries mqopen
function mqseries strerror $reason	reason code qualifying the compcode
function string mqseries strerror	string representation of the reason code message
function string mqseries strerror int $reason	returns the error message corresponding to a result code mqrc
function msession listvar $name	the name being searched
function array msession listvar	returns an associative array of value / session for all sessions with a variable named name
function array msession listvar string $name	list sessions with variable
function msg get queue $key	message queue numeric id
function msg get queue $perms	queue permissions
function resource msg get queue	returns a resource handle that can be used to access the system v message queue
function resource msg get queue int $key int $perms	create or attach to a message queue
function msg queue exists $key	queue key
function bool msg queue exists	returns true on success or false on failure
function bool msg queue exists int $key	check whether a message queue exists
function msg send $serialize	the optional serialize controls how the message is sent
function msg send $blocking	if the message is too large to fit in the queue your script will wait until another process reads messages from the queue and frees enough space for your message to be sent
function bool msg send	returns true on success or false on failure
function bool msg send resource $queue int $msgtype mixed $message bool $serialize bool $blocking int $errorcode	send a message to a message queue
function msg set queue $data	you specify the values you require by setting the value of the keys that you require in the data array
function msg set queue $queue	message queue resource handle
function bool msg set queue	returns true on success or false on failure
function bool msg set queue resource $queue array $data	set information in the message queue data structure
function msg stat queue $queue	message queue resource handle
function array msg stat queue	the return value is an array whose keys and values have the following meanings: array structure for msg_stat_queue msg_perm
function array msg stat queue resource $queue	returns information from the message queue data structure
function msql affected rows $result	the result resource that is being evaluated
function int msql affected rows	returns the number of affected rows on success or false on error
function int msql affected rows resource $result	returns number of affected rows
function msql close $link_identifier	the msql connection
function bool msql close	returns true on success or false on failure
function bool msql close resource $link_identifier	close msql connection
function msql create db $database_name	the name of the msql database
function msql create db $link_identifier	the msql connection
function bool msql create db	returns true on success or false on failure
function bool msql create db string $database_name resource $link_identifier	create msql database
function msql drop db $database_name	the name of the database
function msql drop db $link_identifier	the msql connection
function bool msql drop db	returns true on success or false on failure
function bool msql drop db string $database_name resource $link_identifier	drop delete msql database
function string msql error	the last error message or an empty string if no error was issued
function string msql error	returns error message of last msql call
function msql fetch array $result_type	a constant that can take the following values: msql_assoc msql_num and msql_both with msql_both being the default
function msql fetch array $result	the result resource that is being evaluated
function array msql fetch array	returns an array that corresponds to the fetched row or false if there are no more rows
function array msql fetch array resource $result int $result_type	fetch row as array
function msql fetch object $result	the result resource that is being evaluated
function object msql fetch object	returns an object with properties that correspond to the fetched row or false if there are no more rows
function object msql fetch object resource $result	fetch row as object
function msql fetch row $result	the result resource that is being evaluated
function array msql fetch row	returns an array that corresponds to the fetched row or false if there are no more rows
function array msql fetch row resource $result	get row as enumerated array
function msql field flags $result	the result resource that is being evaluated
function msql field flags $field_offset	the numerical field offset
function string msql field flags	returns a string containing the field flags of the specified key
function string msql field flags resource $result int $field_offset	get field flags
function msql field len $result	the result resource that is being evaluated
function msql field len $field_offset	the numerical field offset
function int msql field len	returns the length of the specified field or false on error
function int msql field len resource $result int $field_offset	get field length
function msql field name $result	the result resource that is being evaluated
function msql field name $field_offset	the numerical field offset
function string msql field name	the name of the field or false on failure
function string msql field name resource $result int $field_offset	get the name of the specified field in a result
function msql field seek $result	the result resource that is being evaluated
function msql field seek $field_offset	the numerical field offset
function bool msql field seek	returns true on success or false on failure
function bool msql field seek resource $result int $field_offset	set field offset
function msql field table $result	the result resource that is being evaluated
function msql field table $field_offset	the numerical field offset
function int msql field table	the name of the table on success or false on failure
function int msql field table resource $result int $field_offset	get table name for field
function msql field type $result	the result resource that is being evaluated
function msql field type $field_offset	the numerical field offset
function string msql field type	the type of the field
function string msql field type resource $result int $field_offset	get field type
function msql free result $result	the result resource that is being evaluated
function bool msql free result	returns true on success or false on failure
function bool msql free result resource $result	free result memory
function msql list dbs $link_identifier	the msql connection
function resource msql list dbs	returns a result set which may be traversed with any function that fetches result sets such as msql_fetch_array()
function resource msql list dbs resource $link_identifier	list msql databases on server
function msql list tables $database	the name of the database
function msql list tables $link_identifier	the msql connection
function resource msql list tables	returns a result set which may be traversed with any function that fetches result sets such as msql_fetch_array()
function resource msql list tables string $database resource $link_identifier	list tables in an msql database
function msql num fields $result	the result resource that is being evaluated
function int msql num fields	returns the number of fields in the result set
function int msql num fields resource $result	get number of fields in result
function msql num rows $result	the result resource that is being evaluated
function int msql num rows	returns the number of rows in the result set
function int msql num rows resource $query_identifier	get number of rows in result
function msql query $query	the sql query
function msql query $link_identifier	the msql connection
function resource msql query	returns a positive msql query identifier on success or false on error
function resource msql query string $query resource $link_identifier	send msql query
function msql result $field	can be the fields offset or the fields name or the fields table dot fields name tablename
function msql result $row	the row offset
function msql result $result	the result resource that is being evaluated
function string msql result	returns the contents of the cell at the row and offset in the specified msql result set
function string msql result resource $result int $row mixed $field	get result data
function mssql close $link_identifier	a ms sql link identifier returned by mssql_connect()
function bool mssql close	returns true on success or false on failure
function bool mssql close resource $link_identifier	close ms sql server connection
function mssql data seek $result_identifier	the result resource that is being evaluated
function mssql data seek $row_number	the desired row number of the new result pointer
function bool mssql data seek	returns true on success or false on failure
function bool mssql data seek resource $result_identifier int $row_number	moves internal row pointer
function mssql fetch array $result_type	the type of array that is to be fetched
function mssql fetch array $result	the result resource that is being evaluated
function array mssql fetch array	returns an array that corresponds to the fetched row or false if there are no more rows
function array mssql fetch array resource $result int $result_type	fetch a result row as an associative array a numeric array or both
function mssql fetch assoc $result_id	the result resource that is being evaluated
function array mssql fetch assoc	returns an associative array that corresponds to the fetched row or false if there are no more rows
function array mssql fetch assoc resource $result_id	returns an associative array of the current row in the result
function mssql fetch field $result	the result resource that is being evaluated
function mssql fetch field $field_offset	the numerical field offset
function object mssql fetch field	returns an object containing field information
function object mssql fetch field resource $result int $field_offset	get field information
function mssql fetch object $result	the result resource that is being evaluated
function object mssql fetch object	returns an object with properties that correspond to the fetched row or false if there are no more rows
function object mssql fetch object resource $result	fetch row as object
function mssql fetch row $result	the result resource that is being evaluated
function array mssql fetch row	returns an array that corresponds to the fetched row or false if there are no more rows
function array mssql fetch row resource $result	get row as enumerated array
function mssql field name $result	the result resource that is being evaluated
function mssql field name $offset	the field offset starts at 0
function string mssql field name	the name of the specified field index on success or false on failure
function string mssql field name resource $result int $offset	get the name of a field
function mssql field seek $field_offset	the field offset starts at 0
function mssql field seek $result	the result resource that is being evaluated
function bool mssql field seek	returns true on success or false on failure
function mssql field type $result	the result resource that is being evaluated
function mssql field type $offset	the field offset starts at 0
function string mssql field type	the type of the specified field index on success or false on failure
function string mssql field type resource $result int $offset	gets the type of a field
function mssql free result $result	the result resource that is being freed
function bool mssql free result	returns true on success or false on failure
function bool mssql free result resource $result	free result memory
function mssql free statement $stmt	statement resource obtained with mssql_init()
function bool mssql free statement	returns true on success or false on failure
function bool mssql free statement resource $stmt	free statement memory
function mssql min message severity $severity	the new message severity
function mssql next result $result_id	the result resource that is being evaluated
function bool mssql next result	returns true if an additional result set was available or false otherwise
function bool mssql next result resource $result_id	move the internal result pointer to the next result
function mssql num rows $result	the result resource that is being evaluated
function int mssql num rows	returns the number of rows as an integer
function int mssql num rows resource $result	gets the number of rows in result
function mssql pconnect $password	the password
function mssql pconnect $username	the username
function mssql pconnect $new_link	if a second call is made to mssql_pconnect() with the same arguments no new link will be established but instead the link identifier of the already opened link will be returned
function mssql pconnect $servername	the ms sql server
function resource mssql pconnect	returns a positive ms sql persistent link identifier on success or false on error
function resource mssql pconnect string $servername string $username string $password bool $new_link	open persistent ms sql connection
function mssql query $query	an sql query
function mssql query $link_identifier	a ms sql link identifier returned by mssql_connect() or mssql_pconnect()
function mssql query $batch_size	the number of records to batch in the buffer
function mixed mssql query	returns a ms sql result resource on success true if no rows were returned or false on error
function mixed mssql query string $query resource $link_identifier int $batch_size	send ms sql query
function mt srand $seed	an optional seed value
function void mt srand int $seed	seed the better random number generator
function mysql affected rows $link_identifier	the mysql connection
function int mysql affected rows	returns the number of affected rows on success and -1 if the last query failed
function int mysql affected rows resource $link_identifier	get number of affected rows in previous mysql operation
function mysql client encoding $link_identifier	the mysql connection
function string mysql client encoding	returns the default character set name for the current connection
function string mysql client encoding resource $link_identifier	returns the name of the character set
function mysql connect $password	the password
function mysql connect $username	the username
function mysql connect $new_link	if a second call is made to mysql_connect() with the same arguments no new link will be established but instead the link identifier of the already opened link will be returned
function mysql connect $server	the mysql server
function mysql connect $client_flags	the client_flags parameter can be a combination of the following constants: 128 enable load data local handling mysql_client_ssl mysql_client_compress mysql_client_ignore_space or mysql_client_interactive
function resource mysql connect	returns a mysql link identifier on success or false on failure
function resource mysql connect string $server string $username string $password bool $new_link int $client_flags	open a connection to a mysql server
function mysql create db $database_name	the name of the database being created
function mysql create db $link_identifier	the mysql connection
function bool mysql create db	returns true on success or false on failure
function bool mysql create db string $database_name resource $link_identifier	create a mysql database
function mysql db name $row	the index into the result set
function mysql db name $field	the field name
function mysql db name $result	the result pointer from a call to mysql_list_dbs()
function string mysql db name	returns the database name on success and false on failure
function string mysql db name resource $result int $row mixed $field	retrieves database name from the call to mysql_list_dbs
function mysql db query $query	the mysql query
function mysql db query $database	the name of the database that will be selected
function mysql db query $link_identifier	the mysql connection
function resource mysql db query	returns a positive mysql result resource to the query result or false on error
function resource mysql db query string $database string $query resource $link_identifier	selects a database and executes a query on it
function mysql drop db $database_name	the name of the database that will be deleted
function mysql drop db $link_identifier	the mysql connection
function bool mysql drop db	returns true on success or false on failure
function bool mysql drop db string $database_name resource $link_identifier	drop delete a mysql database
function mysql errno $link_identifier	the mysql connection
function int mysql errno	returns the error number from the last mysql function or 0 zero if no error occurred
function int mysql errno resource $link_identifier	returns the numerical value of the error message from previous mysql operation
function mysql error $link_identifier	the mysql connection
function string mysql error	returns the error text from the last mysql function or empty string if no error occurred
function string mysql error resource $link_identifier	returns the text of the error message from previous mysql operation
function mysql escape string $unescaped_string	the string that is to be escaped
function string mysql escape string	returns the escaped string
function string mysql escape string string $unescaped_string	escapes a string for use in a mysql_query
function mysql fetch array $result_type	the type of array that is to be fetched
function mysql fetch array $result	the result resource that is being evaluated
function array mysql fetch array	returns an array of strings that corresponds to the fetched row or false if there are no more rows
function array mysql fetch array resource $result int $result_type	fetch a result row as an associative array a numeric array or both
function mysql fetch assoc $result	the result resource that is being evaluated
function array mysql fetch assoc	returns an associative array of strings that corresponds to the fetched row or false if there are no more rows
function array mysql fetch assoc resource $result	fetch a result row as an associative array
function mysql fetch lengths $result	the result resource that is being evaluated
function array mysql fetch lengths	an array of lengths on success or false on failure
function array mysql fetch lengths resource $result	get the length of each output in a result
function mysql fetch object $params	an optional array of parameters to pass to the constructor for class_name objects
function mysql fetch object $class_name	the name of the class to instantiate set the properties of and return
function mysql fetch object $result	the result resource that is being evaluated
function object mysql fetch object	returns an object with string properties that correspond to the fetched row or false if there are no more rows
function object mysql fetch object resource $result string $class_name array $params	fetch a result row as an object
function mysql field flags $result	the result resource that is being evaluated
function mysql field flags $field_offset	the numerical field offset
function string mysql field flags	returns a string of flags associated with the result or false on failure
function string mysql field flags resource $result int $field_offset	get the flags associated with the specified field in a result
function mysql field len $result	the result resource that is being evaluated
function mysql field len $field_offset	the numerical field offset
function int mysql field len	the length of the specified field index on success or false on failure
function int mysql field len resource $result int $field_offset	returns the length of the specified field
function mysql field name $result	the result resource that is being evaluated
function mysql field name $field_offset	the numerical field offset
function string mysql field name	the name of the specified field index on success or false on failure
function string mysql field name resource $result int $field_offset	get the name of the specified field in a result
function mysql field seek $result	the result resource that is being evaluated
function mysql field seek $field_offset	the numerical field offset
function bool mysql field seek	returns true on success or false on failure
function bool mysql field seek resource $result int $field_offset	set result pointer to a specified field offset
function mysql field table $result	the result resource that is being evaluated
function mysql field table $field_offset	the numerical field offset
function string mysql field table	the name of the table on success
function string mysql field table resource $result int $field_offset	get name of the table the specified field is in
function mysql field type $result	the result resource that is being evaluated
function mysql field type $field_offset	the numerical field offset
function string mysql field type	the returned field type will be one of int real string blob and others as detailed in the mysql documentation
function string mysql field type resource $result int $field_offset	get the type of the specified field in a result
function mysql free result $result	the result resource that is being evaluated
function bool mysql free result	returns true on success or false on failure
function bool mysql free result resource $result	free result memory
function mysql get host info $link_identifier	the mysql connection
function string mysql get host info	returns a string describing the type of mysql connection in use for the connection or false on failure
function string mysql get host info resource $link_identifier	get mysql host info
function mysql get proto info $link_identifier	the mysql connection
function int mysql get proto info	returns the mysql protocol on success or false on failure
function int mysql get proto info resource $link_identifier	get mysql protocol info
function mysql info $link_identifier	the mysql connection
function string mysql info	returns information about the statement on success or false on failure
function string mysql info resource $link_identifier	get information about the most recent query
function mysql insert id $link_identifier	the mysql connection
function int mysql insert id	the id generated for an auto_increment column by the previous query on success 0 if the previous query does not generate an auto_increment value or false if no mysql connection was established
function int mysql insert id resource $link_identifier	get the id generated in the last query
function mysql list dbs $link_identifier	the mysql connection
function resource mysql list dbs	returns a result pointer resource on success or false on failure
function resource mysql list dbs resource $link_identifier	list databases available on a mysql server
function mysql list processes $link_identifier	the mysql connection
function resource mysql list processes	a result pointer resource on success or false on failure
function resource mysql list processes resource $link_identifier	list mysql processes
function mysql query $link_identifier	the mysql connection
function mysql query $query	an sql query the query string should not end with a semicolon
function mixed mysql query	for select show describe explain and other statements returning resultset mysql_query() returns a resource on success or false on error
function mixed mysql query string $query resource $link_identifier	send a mysql query
function mysql real escape string $unescaped_string	the string that is to be escaped
function mysql real escape string $link_identifier	the mysql connection
function string mysql real escape string	returns the escaped string or false on error
function string mysql real escape string string $unescaped_string resource $link_identifier	escapes special characters in a string for use in an sql statement
function mysql result $field	the name or offset of the field being retrieved
function mysql result $row	the row number from the result thats being retrieved
function mysql result $result	the result resource that is being evaluated
function string mysql result	the contents of one cell from a mysql result set on success or false on failure
function string mysql result resource $result int $row mixed $field	get result data
function mysql set charset $link_identifier	the mysql connection
function mysql set charset $charset	a valid character set name
function bool mysql set charset	returns true on success or false on failure
function bool mysql set charset string $charset resource $link_identifier	sets the client character set
function mysql stat $link_identifier	the mysql connection
function string mysql stat	returns a string with the status for uptime threads queries open tables flush tables and queries per second
function string mysql stat resource $link_identifier	get current system status
function mysql tablename $i	the integer index row / table number
function mysql tablename $result	a result pointer resource thats returned from mysql_list_tables()
function string mysql tablename	the name of the table on success or false on failure
function string mysql tablename resource $result int $i	get table name of field
function mysql thread id $link_identifier	the mysql connection
function int mysql thread id	the thread id on success or false on failure
function int mysql thread id resource $link_identifier	return the current thread id
function mysql unbuffered query $query	the sql query to execute
function mysql unbuffered query $link_identifier	the mysql connection
function resource mysql unbuffered query	for select show describe or explain statements mysql_unbuffered_query() returns a resource on success or false on error
function resource mysql unbuffered query string $query resource $link_identifier	send an sql query to mysql without fetching and buffering the result rows
function array mysqli get links stats	mysqli_get_links_stats() returns an associative array with three elements keyed as follows: total an integer indicating the total number of open links in any state
function array mysqli get links stats	return information about open and cached links
function mysqlnd memcache get config $connection	a handle to a mysql server using one of the mysql api extensions for php which are pdo_mysql mysqli or ext / mysql
function array mysqlnd memcache get config	an array of mysqlnd_memcache configuration information on success otherwise false
function array mysqlnd memcache get config mixed $connection	returns information about the plugin configuration
function mysqlnd ms dump servers $connection	a mysql connection handle obtained from any of the connect functions of the mysqli mysql or pdo_mysql extensions
function array mysqlnd ms dump servers	false on error
function mysqlnd ms get last gtid $connection	a pecl / mysqlnd_ms connection handle to a mysql server of the type pdo_mysql mysqli > or ext / mysql
function string mysqlnd ms get last gtid	returns a global transaction id gtid on success
function string mysqlnd ms get last gtid mixed $connection	returns the latest global transaction id
function mysqlnd ms match wild $wildcard	the wildcard pattern to check against the table name
function mysqlnd ms match wild $table_name	the table name to check if it is matched by the wildcard
function bool mysqlnd ms match wild	returns true table_name is matched by wildcard
function mysqlnd ms query is select $query	query string to test
function int mysqlnd ms query is select	a return value of mysqlnd_ms_query_use_master indicates that the query should be send to the mysql replication master server
function int mysqlnd ms query is select string $query	find whether to send the query to the master the slave or the last used mysql server
function mysqlnd ms set qos $service_level	the requested service level: mysqlnd_ms_qos_consistency_eventual mysqlnd_ms_qos_consistency_session or mysqlnd_ms_qos_consistency_strong
function mysqlnd ms set qos $service_level_option	an option to parameterize the requested service level
function mysqlnd ms set qos $option_value	parameter value for the service level option
function mysqlnd ms set qos $connection	a pecl / mysqlnd_ms connection handle to a mysql server of the type pdo_mysql mysqli or ext / mysql for which a service level is to be set
function bool mysqlnd ms set qos	returns true if the connections service level has been switched to the requested
function mysqlnd ms xa begin $timeout	timeout in seconds
function mysqlnd ms xa begin $connection	a mysql connection handle obtained from any of the connect functions of the mysqli mysql or pdo_mysql extensions
function mysqlnd ms xa begin $gtrid	global transaction identifier gtrid
function int mysqlnd ms xa begin	returns true if there is no open local or global transaction and a new global transaction can be started
function int mysqlnd ms xa begin mixed $connection string $gtrid int $timeout	starts a distributed / xa transaction among mysql servers
function mysqlnd ms xa rollback $connection	a mysql connection handle obtained from any of the connect functions of the mysqli mysql or pdo_mysql extensions
function mysqlnd ms xa rollback $gtrid	global transaction identifier gtrid
function int mysqlnd ms xa rollback	returns true if the global transaction has been rolled back
function int mysqlnd ms xa rollback mixed $connection string $gtrid	rolls back a distributed / xa transaction among mysql servers
function bool mysqlnd qc clear cache	returns true on success or false on failure
function array mysqlnd qc get available handlers	returns an array of available built-in storage handler
function array mysqlnd qc get available handlers	returns a list of available storage handler
function array mysqlnd qc get normalized query trace log	an array of query log
function array mysqlnd qc get query trace log	an array of query backtrace
function mixed mysqlnd qc set is select	returns true on success or false on failure
function mysqlnd qc set storage handler $handler	handler can be of type string representing the name of a built-in storage handler or an object of type mysqlnd_qc_handler_default
function bool mysqlnd qc set storage handler	returns true on success or false on failure
function bool mysqlnd qc set storage handler string $handler	change current storage handler
function mysqlnd uh convert to mysqlnd $MySQL connection handle	a mysql connection handle of type mysql mysqli or pdo_mysql
function resource mysqlnd uh convert to mysqlnd	a mysqlnd connection handle
function mysqlnd uh set connection proxy $connection_proxy	a proxy object of type mysqlnduhconnection
function mysqlnd uh set connection proxy $mysqli_connection	object of type mysqli
function bool mysqlnd uh set connection proxy	returns true on success
function bool mysqlnd uh set connection proxy MysqlndUhConnection $connection_proxy mysqli $mysqli_connection	installs a proxy for mysqlnd connections
function mysqlnd uh set statement proxy $statement_proxy	the mysqlnd statement proxy object of type mysqlnduhstatement
function bool mysqlnd uh set statement proxy	returns true on success
function natcasesort $array	the input array
function bool natcasesort	returns true on success or false on failure
function bool natcasesort array $array	sort an array using a case insensitive natural order algorithm
function natsort $array	the input array
function bool natsort	returns true on success or false on failure
function bool natsort array $array	sort an array using a natural order algorithm
function bool ncurses can change color	return true if the programmer can change color definitions false otherwise
function bool ncurses can change color	checks if terminal color definitions can be changed
function ncurses color content $color	the number of the color to retrieve information for
function ncurses color content $r	a reference to which to return the red component of the color
function ncurses color content $b	a reference to which to return the blue component of the color
function ncurses color content $g	a reference to which to return the green component of the color
function int ncurses color content	returns -1 if the function was successful and 0 if ncurses or terminal color capabilities have not been initialized
function int ncurses color content int $color int $r int $g int $b	retrieves rgb components of a color
function bool ncurses has colors	return true if the terminal has color capabilities false otherwise
function bool ncurses has colors	checks if terminal has color capabilities
function ncurses init color $r	a color value between 0 and 1000 for the red component
function ncurses init color $b	a color value between 0 and 1000 for the blue component
function ncurses init color $color	the identification number of the color to redefine
function ncurses init color $g	a color value between 0 and 1000 for the green component
function int ncurses init color	returns -1 if the function was successful and 0 if ncurses or terminal color capabilities have not been initialized or the terminal does not have color changing capabilities
function int ncurses init color int $color int $r int $g int $b	define a terminal color
function ncurses init pair $fg	the foreground color for the color pair
function ncurses init pair $bg	the background color for the color pair
function ncurses init pair $pair	the number of the color pair to define
function int ncurses init pair	returns -1 if the function was successful and 0 if ncurses or color support were not initialized
function int ncurses init pair int $pair int $fg int $bg	define a color pair
function void ncurses init	initialize ncurses
function ncurses pair content $b	a reference to which to return the background color of the color pair
function ncurses pair content $f	a reference to which to return the foreground color of the color pair
function ncurses pair content $pair	the number of the color pair to retrieve information for
function int ncurses pair content	returns -1 if the function was successful and 0 if ncurses or terminal color capabilities have not been initialized
function int ncurses pair content int $pair int $f int $b	retrieves foreground and background colors of a color pair
function int ncurses start color	returns 0 on success or -1 if the color table could not be allocated or ncurses was not initialized
function int ncurses start color	initializes color functionality
function void newt bell	send a beep to the terminal
function resource newt button bar	returns grid containing the buttons created
function newt button $left	x-coordinate of the button
function newt button $text	the text which should be displayed in the button
function newt button $top	y-coordinate of the button
function resource newt button	returns a resource link to the created button component or false on error
function resource newt button int $left int $top string $text	create a new button
function newt centered window $height	window height
function newt centered window $title	window title
function newt centered window $width	window width
function int newt centered window	undefined value
function string newt checkbox get value	returns character indicating the value of the checkbox
function string newt checkbox get value resource $checkbox	retreives value of checkox resource
function void newt checkbox tree add item resource $checkboxtree string $text mixed $data int $flags int $index	adds new item to the checkbox tree
function mixed newt checkbox tree get current	returns current selected checkbox tree item
function mixed newt checkbox tree get current resource $checkboxtree	returns checkbox tree selected item
function void newt clear key buffer	discards the contents of the terminal's input buffer without waiting for additional input
function newt draw root text $left	column number note : if left is negative the position is measured from the opposite side of the screen
function newt draw root text $top	line number note : if top is negative the position is measured from the opposite side of the screen
function newt draw root text $text	text to display
function int newt finished	returns 1 on success 0 on failure
function newt form add component $component	component to add to the form
function newt form add component $form	form to which component will be added
function newt form add components $form	form to which components will be added
function newt form add components $components	array of components to add to the form
function void newt form add components resource $form array $components	add several components to the form
function newt form destroy $form	form component which is going to be destroyed
function void newt form destroy resource $form	destroys a form
function newt form $vert_bar	vertical scrollbar which should be associated with the form
function newt form $help	help text string
function newt form $flags	various flags
function resource newt form	returns a resource link to the created form component or false on error
function resource newt form resource $vert_bar string $help int $flags	create a form
function int newt init	returns 1 on success 0 on failure
function int newt init	initialize newt
function newt push help line $text	new help text message note : if not specified the help line is cleared
function void newt refresh	updates modified portions of the screen
function void newt resume	resume using the newt interface after calling newt_suspend
function newt run form $form	form component
function resource newt run form	the component which caused the form to stop running
function resource newt run form resource $form	runs a form
function newt set suspend callback $data	this data is been passed to the callback function
function newt set suspend callback $function	a callback function which accepts one argument: data
function void newt set suspend callback callable $function mixed $data	set a callback function which gets invoked when user presses the suspend key
function nl langinfo $item	item may be an integer value of the element or the constant name of the element
function string nl langinfo	returns the element as a string or false if item is not valid
function string nl langinfo int $item	query language and locale information
function nl2br $is_xhtml	whether to use xhtml compatible line breaks or not
function nl2br $string	the input string
function string nl2br	returns the altered string
function string nl2br string $string bool $is_xhtml	inserts html line breaks before all newlines in a string
function array nsapi response headers	returns an associative array with all the nsapi response headers
function array nsapi response headers	fetch all http response headers
function nsapi virtual $uri	the uri of the script
function bool nsapi virtual	returns true on success or false on failure
function bool nsapi virtual string $uri	perform an nsapi sub-request
function void ob clean	clean erase the output buffer
function bool ob end clean	returns true on success or false on failure
function bool ob end clean	clean erase the output buffer and turn off output buffering
function bool ob end flush	returns true on success or false on failure
function bool ob end flush	flush send the output buffer and turn off output buffering
function void ob flush	flush send the output buffer
function string ob get clean	returns the contents of the output buffer and end output buffering
function string ob get clean	get current buffer contents and delete current output buffer
function string ob get contents	this will return the contents of the output buffer or false if output buffering isnt active
function string ob get contents	return the contents of the output buffer
function string ob get flush	returns the output buffer or false if no buffering is active
function string ob get flush	flush the output buffer return it as a string and turn off output buffering
function ob get status $full_status	true to return all active output buffer levels
function array ob get status bool $full_status	get status of output buffers
function string ob gzhandler string $buffer int $mode	ob_start callback function to gzip output buffer
function ob implicit flush $flag	true to turn implicit flushing on false otherwise
function void ob implicit flush int $flag	turn implicit flush on / off
function ob tidyhandler $mode	the buffer mode
function ob tidyhandler $input	the buffer
function string ob tidyhandler	returns the modified buffer
function string ob tidyhandler string $input int $mode	ob_start callback function to repair the buffer
function oci bind array by name $var_array	an array
function oci bind array by name $max_table_length	sets the maximum length both for incoming and result arrays
function oci bind array by name $type	should be used to set the type of pl / sql array items
function oci bind array by name $statement	a valid oci statement identifier
function oci bind array by name $max_item_length	sets maximum length for array items
function oci bind array by name $name	the oracle placeholder
function bool oci bind array by name	returns true on success or false on failure
function bool oci bind array by name resource $statement string $name array $var_array int $max_table_length int $max_item_length int $type	binds a php array to an oracle pl / sql array parameter
function oci cancel $statement	an oci statement
function bool oci cancel	returns true on success or false on failure
function bool oci cancel resource $statement	cancels reading from cursor
function string oci client version	returns the version number as a string
function string oci client version	returns the oracle client library version
function oci close $connection	an oracle connection identifier returned by oci_connect() oci_pconnect() or oci_new_connect()
function bool oci close	returns true on success or false on failure
function bool oci close resource $connection	closes an oracle connection
function oci commit $connection	an oracle connection identifier returned by oci_connect() oci_pconnect() or oci_new_connect()
function bool oci commit	returns true on success or false on failure
function bool oci commit resource $connection	commits the outstanding database transaction
function oci connect $session_mode	this parameter is available since version php 5 pecl oci8 1
function oci connect $character_set	determines the character set used by the oracle client libraries
function oci connect $password	the password for username
function oci connect $username	the oracle user name
function oci connect $connection_string	contains the oracle instance to connect to
function resource oci connect	returns a connection identifier or false on error
function resource oci connect string $username string $password string $connection_string string $character_set int $session_mode	connect to an oracle database
function oci define by name $variable	the php variable that will contain the returned column value
function oci define by name $type	the data type to be returned
function oci define by name $statement	a valid oci8 statement identifier created by oci_parse() and executed by oci_execute() or a ref cursor statement identifier
function oci define by name $column_name	the column name used in the query
function bool oci define by name	returns true on success or false on failure
function bool oci define by name resource $statement string $column_name mixed $variable int $type	associates a php variable with a column for query fetches
function oci error $resource	for most errors resource is the resource handle that was passed to the failing function call
function array oci error	if no error is found oci_error() returns false
function oci fetch all $flags	parameter flags indicates the array structure and whether associative arrays should be used
function oci fetch all $output	the variable to contain the returned rows
function oci fetch all $statement	a valid oci8 statement identifier created by oci_parse() and executed by oci_execute() or a ref cursor statement identifier
function oci fetch all $maxrows	the number of rows to return
function oci fetch all $skip	the number of initial rows to discard when fetching the result
function int oci fetch all	returns the number of rows in output which may be 0 or more or false on failure
function oci fetch array $mode	an optional second parameter can be any combination of the following constants: oci_fetch_array() modes constant description oci_both returns an array with both associative and numeric indices
function oci fetch array $statement	a valid oci8 statement identifier created by oci_parse() and executed by oci_execute() or a ref cursor statement identifier
function array oci fetch array	returns an array with associative and / or numeric indices
function array oci fetch array resource $statement int $mode	returns the next row from a query as an associative or numeric array
function oci fetch assoc $statement	a valid oci8 statement identifier created by oci_parse() and executed by oci_execute() or a ref cursor statement identifier
function array oci fetch assoc	returns an associative array
function array oci fetch assoc resource $statement	returns the next row from a query as an associative array
function oci fetch object $statement	a valid oci8 statement identifier created by oci_parse() and executed by oci_execute() or a ref cursor statement identifier
function object oci fetch object	returns an object
function object oci fetch object resource $statement	returns the next row from a query as an object
function oci fetch $statement	a valid oci8 statement identifier created by oci_parse() and executed by oci_execute() or a ref cursor statement identifier
function bool oci fetch	returns true on success or false if there are no more rows in the statement
function bool oci fetch resource $statement	fetches the next row from a query into internal buffers
function oci field is null $statement	a valid oci statement identifier
function oci field is null $field	can be the fields index 1-based or name
function bool oci field is null	returns true if field is null false otherwise
function bool oci field is null resource $statement mixed $field	checks if a field in the currently fetched row is null
function oci field name $statement	a valid oci statement identifier
function oci field name $field	can be the fields index 1-based or name
function string oci field name	returns the name as a string or false on errors
function string oci field name resource $statement mixed $field	returns the name of a field from the statement
function oci field scale $statement	a valid oci statement identifier
function oci field scale $field	can be the fields index 1-based or name
function int oci field scale	returns the scale as an integer or false on errors
function int oci field scale resource $statement mixed $field	tell the scale of the field
function oci field size $statement	a valid oci statement identifier
function oci field size $field	can be the fields index 1-based or name
function int oci field size	returns the size of a field in bytes or false on errors
function int oci field size resource $statement mixed $field	returns field's size
function oci field type raw $statement	a valid oci statement identifier
function oci field type raw $field	can be the fields index 1-based or name
function int oci field type raw	returns oracles raw data type as a number or false on errors
function int oci field type raw resource $statement mixed $field	tell the raw oracle data type of the field
function oci field type $statement	a valid oci statement identifier
function oci field type $field	can be the fields index 1-based or name
function mixed oci field type	returns the field data type as a string or false on errors
function mixed oci field type resource $statement mixed $field	returns a field's data type name
function bool oci free descriptor	returns true on success or false on failure
function bool oci free descriptor resource $descriptor	frees a descriptor
function oci free statement $statement	a valid oci statement identifier
function bool oci free statement	returns true on success or false on failure
function bool oci free statement resource $statement	frees all resources associated with statement or cursor
function oci get implicit resultset $statement	a valid oci8 statement identifier created by oci_parse() and executed by oci_execute()
function resource oci get implicit resultset	returns a statement handle for the next child statement available on statement
function resource oci get implicit resultset resource $statement	returns the next child statement resource from a parent statement resource that has oracle database 12c implicit result sets
function oci internal debug $onoff	set this to false to turn debug output off or true to turn it on
function oci lob is equal $lob2	a lob identifier
function oci lob is equal $lob1	a lob identifier
function bool oci lob is equal	returns true if these objects are equal false otherwise
function bool oci lob is equal OCI-Lob $lob1 OCI-Lob $lob2	compares two lob / file locators for equality
function oci num rows $statement	a valid oci statement identifier
function int oci num rows	returns the number of rows affected as an integer or false on errors
function int oci num rows resource $statement	returns number of rows affected during statement execution
function oci parse $connection	an oracle connection identifier returned by oci_connect() oci_pconnect() or oci_new_connect()
function oci parse $sql_text	the sql or pl / sql statement
function resource oci parse	returns a statement handle on success or false on error
function resource oci parse resource $connection string $sql_text	prepares an oracle statement for execution
function oci set action $connection	an oracle connection identifier returned by oci_connect() oci_pconnect() or oci_new_connect()
function oci set action $action_name	user chosen string up to 32 bytes long
function bool oci set action	returns true on success or false on failure
function bool oci set action resource $connection string $action_name	sets the action name
function oci set client identifier $connection	an oracle connection identifier returned by oci_connect() oci_pconnect() or oci_new_connect()
function oci set client identifier $client_identifier	user chosen string up to 64 bytes long
function bool oci set client identifier	returns true on success or false on failure
function bool oci set client identifier resource $connection string $client_identifier	sets the client identifier
function oci set client info $connection	an oracle connection identifier returned by oci_connect() oci_pconnect() or oci_new_connect()
function oci set client info $client_info	user chosen string up to 64 bytes long
function bool oci set client info	returns true on success or false on failure
function bool oci set client info resource $connection string $client_info	sets the client information
function oci set edition $edition	oracle database edition name previously created with the sql create edition command
function bool oci set edition	returns true on success or false on failure
function bool oci set edition string $edition	sets the database edition
function oci set module name $module_name	user chosen string up to 48 bytes long
function oci set module name $connection	an oracle connection identifier returned by oci_connect() oci_pconnect() or oci_new_connect()
function bool oci set module name	returns true on success or false on failure
function bool oci set module name resource $connection string $module_name	sets the module name
function octdec $octal_string	the octal string to convert
function number octdec	the decimal representation of octal_string
function number octdec string $octal_string	octal to decimal
function odbc binmode $result_id	the result identifier
function odbc binmode $mode	possible values for mode are: odbc_binmode_passthru : passthru binary data odbc_binmode_return : return as is odbc_binmode_convert : convert to char and return
function bool odbc binmode	returns true on success or false on failure
function bool odbc binmode resource $result_id int $mode	handling of binary column data
function void odbc close all	close all odbc connections
function odbc columnprivileges $connection_id	the odbc connection identifier see odbc_connect() for details
function odbc columnprivileges $owner	the owner
function odbc columnprivileges $qualifier	the qualifier
function odbc columnprivileges $column_name	the column_name argument accepts search patterns % to match zero or more characters and _ to match a single character
function odbc columnprivileges $table_name	the table name
function resource odbc columnprivileges	returns an odbc result identifier or false on failure
function odbc cursor $result_id	the result identifier
function string odbc cursor	returns the cursor name as a string
function string odbc cursor resource $result_id	get cursorname
function odbc execute $parameters_array	parameters in parameter_array will be substituted for placeholders in the prepared statement in order
function odbc execute $result_id	the result id resource from odbc_prepare()
function bool odbc execute	returns true on success or false on failure
function bool odbc execute resource $result_id array $parameters_array	execute a prepared statement
function odbc fetch array $result	the result resource from odbc_exec()
function odbc fetch array $rownumber	optionally choose which row number to retrieve
function array odbc fetch array	returns an array that corresponds to the fetched row or false if there are no more rows
function array odbc fetch array resource $result int $rownumber	fetch a result row as an associative array
function odbc fetch into $result_id	the result resource
function odbc fetch into $result_array	the result array that can be of any type since it will be converted to type array
function odbc fetch into $rownumber	the row number
function int odbc fetch into	returns the number of columns in the result; false on error
function odbc fetch object $result	the result resource from odbc_exec()
function odbc fetch object $rownumber	optionally choose which row number to retrieve
function object odbc fetch object	returns an object that corresponds to the fetched row or false if there are no more rows
function object odbc fetch object resource $result int $rownumber	fetch a result row as an object
function odbc fetch row $result_id	the result identifier
function odbc fetch row $row_number	if row_number is not specified odbc_fetch_row() will try to fetch the next row in the result set
function bool odbc fetch row	returns true if there was a row false otherwise
function bool odbc fetch row resource $result_id int $row_number	fetch a row
function odbc field scale $result_id	the result identifier
function odbc field scale $field_number	the field number
function int odbc field scale	returns the field scale as a integer or false on error
function int odbc field scale resource $result_id int $field_number	get the scale of a field
function odbc field type $result_id	the result identifier
function odbc field type $field_number	the field number
function string odbc field type	returns the field type as a string or false on error
function string odbc field type resource $result_id int $field_number	datatype of a field
function odbc foreignkeys $fk_owner	the foreign key owner
function odbc foreignkeys $connection_id	the odbc connection identifier see odbc_connect() for details
function odbc foreignkeys $fk_table	the foreign key table
function odbc foreignkeys $pk_table	the primary key table
function odbc foreignkeys $pk_qualifier	the primary key qualifier
function odbc foreignkeys $fk_qualifier	the foreign key qualifier
function odbc foreignkeys $pk_owner	the primary key owner
function resource odbc foreignkeys	returns an odbc result identifier or false on failure
function resource odbc foreignkeys resource $connection_id string $pk_qualifier string $pk_owner string $pk_table string $fk_qualifier string $fk_owner string $fk_table	retrieves a list of foreign keys
function odbc gettypeinfo $connection_id	the odbc connection identifier see odbc_connect() for details
function odbc gettypeinfo $data_type	the data type which can be used to restrict the information to a single data type
function resource odbc gettypeinfo	returns an odbc result identifier or false on failure
function odbc longreadlen $length	the number of bytes returned to php is controlled by the parameter length
function odbc longreadlen $result_id	the result identifier
function bool odbc longreadlen	returns true on success or false on failure
function bool odbc longreadlen resource $result_id int $length	handling of long columns
function odbc next result $result_id	the result identifier
function bool odbc next result	returns true if there are more result sets false otherwise
function bool odbc next result resource $result_id	checks if multiple results are available
function odbc num fields $result_id	the result identifier returned by odbc_exec()
function int odbc num fields	returns the number of fields or -1 on error
function int odbc num fields resource $result_id	number of columns in a result
function odbc num rows $result_id	the result identifier returned by odbc_exec()
function int odbc num rows	returns the number of rows in an odbc result
function int odbc num rows resource $result_id	number of rows in a result
function odbc primarykeys $connection_id	the odbc connection identifier see odbc_connect() for details
function resource odbc primarykeys	returns an odbc result identifier or false on failure
function resource odbc primarykeys resource $connection_id string $qualifier string $owner string $table	gets the primary keys for a table
function odbc procedures $connection_id	the odbc connection identifier see odbc_connect() for details
function odbc procedures $owner	the owner
function odbc procedures $qualifier	the qualifier
function odbc procedures $name	the name
function resource odbc procedures	returns an odbc result identifier containing the information or false on failure
function resource odbc procedures resource $connection_id	get the list of procedures stored in a specific data source
function odbc result all $result_id	the result identifier
function odbc result all $format	additional overall table formatting
function int odbc result all	returns the number of rows in the result or false on error
function int odbc result all resource $result_id string $format	print result as html table
function odbc result $field	the field name being retrieved
function odbc result $result_id	the odbc resource
function mixed odbc result	returns the string contents of the field false on error null for null data or true for binary data
function odbc rollback $connection_id	the odbc connection identifier see odbc_connect() for details
function bool odbc rollback	returns true on success or false on failure
function bool odbc rollback resource $connection_id	rollback a transaction
function odbc setoption $param	the value for the given option
function odbc setoption $option	the option to set
function odbc setoption $function	is the odbc function to use
function odbc setoption $id	is a connection id or result id on which to change the settings
function bool odbc setoption	returns true on success or false on failure
function bool odbc setoption resource $id int $function int $option int $param	adjust odbc settings
function odbc statistics $connection_id	the odbc connection identifier see odbc_connect() for details
function odbc statistics $unique	the unique attribute
function odbc statistics $table_name	the table name
function odbc statistics $owner	the owner
function odbc statistics $accuracy	the accuracy
function odbc statistics $qualifier	the qualifier
function resource odbc statistics	returns an odbc result identifier or false on failure
function resource odbc statistics resource $connection_id string $qualifier string $owner string $table_name int $unique int $accuracy	retrieve statistics about a table
function odbc tableprivileges $connection_id	the odbc connection identifier see odbc_connect() for details
function odbc tableprivileges $owner	the owner
function odbc tableprivileges $qualifier	the qualifier
function odbc tableprivileges $name	the name
function resource odbc tableprivileges	an odbc result identifier or false on failure
function resource odbc tableprivileges resource $connection_id string $qualifier string $owner string $name	lists tables and the privileges associated with each table
function odbc tables $connection_id	the odbc connection identifier see odbc_connect() for details
function odbc tables $owner	the owner
function odbc tables $qualifier	the qualifier
function odbc tables $name	the name
function odbc tables $types	if table_type is not an empty string it must contain a list of comma-separated values for the types of interest; each value may be enclosed in single quotes or unquoted
function resource odbc tables	returns an odbc result identifier containing the information or false on failure
function resource odbc tables resource $connection_id string $qualifier string $owner string $name string $types	get the list of table names stored in a specific data source
function opcache compile file $file	the path to the php script to be compiled
function boolean opcache compile file	returns true if file was compiled successfully or false on failure
function boolean opcache compile file string $file	compiles and caches a php script without executing it
function array opcache get configuration	returns an array of information including ini blacklist and version
function array opcache get configuration	get configuration information about the cache
function opcache get status $get_scripts	include script specific state information
function array opcache get status	returns an array of information optionally containing script specific state information
function array opcache get status boolean $get_scripts	get status information about the cache
function opcache invalidate $force	if set to true the script will be invalidated regardless of whether invalidation is necessary
function opcache invalidate $script	the path to the script being invalidated
function boolean opcache invalidate	returns true if the opcode cache for script was invalidated or if there was nothing to invalidate or false if the opcode cache is disabled
function boolean opcache invalidate string $script boolean $force	invalidates a cached script
function opcache is script cached $file	the path to the php script to be checked
function boolean opcache is script cached	returns true if file is cached in opcache false otherwise
function boolean opcache is script cached string $file	tells whether a script is cached in opcache
function boolean opcache reset	returns true if the opcode cache was reset or false if the opcode cache is disabled
function boolean opcache reset	resets the contents of the opcode cache
function opendir $path	the directory path that is to be opened
function opendir $context	for a description of the context parameter refer to the streams section of the manual
function resource opendir	returns a directory handle resource on success or false on failure
function resource opendir string $path resource $context	open directory handle
function openssl cipher iv length $method	the cipher method see openssl_get_cipher_methods() for a list of potential values
function int openssl cipher iv length	returns the cipher length on success or false on failure
function int openssl cipher iv length string $method	gets the cipher iv length
function openssl csr export to file $outfilename	path to the output file
function openssl csr export to file $notext	the optional parameter notext affects the verbosity of the output; if it is false then additional human-readable information is included in the output
function bool openssl csr export to file	returns true on success or false on failure
function bool openssl csr export to file resource $csr string $outfilename bool $notext	exports a csr to a file
function openssl csr export $notext	the optional parameter notext affects the verbosity of the output; if it is false then additional human-readable information is included in the output
function bool openssl csr export	returns true on success or false on failure
function bool openssl csr export resource $csr string $out bool $notext	exports a csr as a string
function openssl csr new $configargs	by default the information in your system openssl
function openssl csr new $extraattribs	extraattribs is used to specify additional configuration options for the csr
function openssl csr new $privkey	privkey should be set to a private key that was previously generated by openssl_pkey_new() or otherwise obtained from the other openssl_pkey family of functions
function openssl csr new $dn	the distinguished name to be used in the certificate
function mixed openssl csr new	returns the csr
function mixed openssl csr new array $dn resource $privkey array $configargs array $extraattribs	generates a csr
function openssl csr sign $days	days specifies the length of time for which the generated certificate will be valid in days
function openssl csr sign $cacert	the generated certificate will be signed by cacert
function openssl csr sign $serial	an optional the serial number of issued certificate
function openssl csr sign $priv_key	priv_key is the private key that corresponds to cacert
function openssl csr sign $csr	a csr previously generated by openssl_csr_new()
function openssl csr sign $configargs	you can finetune the csr signing by configargs
function resource openssl csr sign	returns an x509 certificate resource on success false on failure
function resource openssl csr sign mixed $csr mixed $cacert mixed $priv_key int $days array $configargs int $serial	sign a csr with another certificate or itself and generate a certificate
function openssl decrypt $password	the password
function openssl decrypt $options	options can be one of openssl_raw_data openssl_zero_padding
function openssl decrypt $method	the cipher method
function openssl decrypt $iv	a non-null initialization vector
function openssl decrypt $data	the data
function string openssl decrypt	the decrypted string on success or false on failure
function string openssl decrypt string $data string $method string $password int $options string $iv	decrypts data
function openssl digest $raw_output	setting to true will return as raw output data otherwise the return value is binhex encoded
function openssl digest $method	the digest method
function openssl digest $data	the data
function string openssl digest	returns the digested hash value on success or false on failure
function string openssl digest string $data string $method bool $raw_output	computes a digest
function string openssl error string	returns an error message string or false if there are no more error messages to return
function string openssl error string	return openssl error message
function void openssl free key resource $key_identifier	free key resource
function openssl get cipher methods $aliases	set to true if cipher aliases should be included within the returned array
function array openssl get cipher methods	an array of available cipher methods
function array openssl get cipher methods bool $aliases	gets available cipher methods
function openssl get md methods $aliases	set to true if digest aliases should be included within the returned array
function array openssl get md methods	an array of available digest methods
function array openssl get md methods bool $aliases	gets available digest methods
function openssl open $open_data	if the call is successful the opened data is returned in this parameter
function bool openssl open	returns true on success or false on failure
function bool openssl open string $sealed_data string $open_data string $env_key mixed $priv_key_id string $method	open sealed data
function openssl pkcs12 export $out	on success this will hold the pkcs#12
function openssl pkcs12 export $pass	encryption password for unlocking the pkcs#12 file
function openssl pkcs12 export $x509	see key / certificate parameters for a list of valid values
function openssl pkcs12 export $priv_key	private key component of pkcs#12 file
function bool openssl pkcs12 export	returns true on success or false on failure
function bool openssl pkcs12 export mixed $x509 string $out mixed $priv_key string $pass array $args	exports a pkcs#12 compatible certificate store file to variable
function openssl pkcs12 read $pass	encryption password for unlocking the pkcs#12 file
function openssl pkcs12 read $pkcs12	the certificate store contents not its file name
function openssl pkcs12 read $certs	on success this will hold the certificate store data
function bool openssl pkcs12 read	returns true on success or false on failure
function bool openssl pkcs12 read string $pkcs12 array $certs string $pass	parse a pkcs#12 certificate store into an array
function openssl pkey export to file $outfilename	path to the output file
function openssl pkey export to file $configargs	configargs can be used to fine-tune the export process by specifying and / or overriding options for the openssl configuration file
function openssl pkey export to file $passphrase	the key can be optionally protected by a passphrase
function bool openssl pkey export to file	returns true on success or false on failure
function bool openssl pkey export to file mixed $key string $outfilename string $passphrase array $configargs	gets an exportable representation of a key into a file
function openssl pkey export $configargs	configargs can be used to fine-tune the export process by specifying and / or overriding options for the openssl configuration file
function openssl pkey export $passphrase	the key is optionally protected by passphrase
function bool openssl pkey export	returns true on success or false on failure
function bool openssl pkey export mixed $key string $out string $passphrase array $configargs	gets an exportable representation of a key into a string
function openssl pkey free $key	resource holding the key
function void openssl pkey free resource $key	frees a private key
function openssl pkey get details $key	resource holding the key
function array openssl pkey get details	returns an array with the key details in success or false in failure
function array openssl pkey get details resource $key	returns an array with the key details
function openssl pkey get private $passphrase	the optional parameter passphrase must be used if the specified key is encrypted protected by a passphrase
function openssl pkey get private $key	key can be one of the following: a string having the format file: / / path / to / file
function resource openssl pkey get private	returns a positive key resource identifier on success or false on error
function resource openssl pkey get private mixed $key string $passphrase	get a private key
function openssl pkey get public $certificate	certificate can be one of the following: an x
function resource openssl pkey get public	returns a positive key resource identifier on success or false on error
function resource openssl pkey get public mixed $certificate	extract public key from certificate and prepare it for use
function openssl public decrypt $padding	padding can be one of openssl_pkcs1_padding openssl_no_padding
function openssl public decrypt $key	key must be the public key corresponding that was used to encrypt the data
function bool openssl public decrypt	returns true on success or false on failure
function bool openssl public decrypt string $data string $decrypted mixed $key int $padding	decrypts data with public key
function openssl random pseudo bytes $crypto_strong	if passed into the function this will hold a boolean value that determines if the algorithm used was cryptographically strong e
function openssl random pseudo bytes $length	the length of the desired string of bytes
function string openssl random pseudo bytes	returns the generated string of bytes on success or false on failure
function string openssl random pseudo bytes int $length bool $crypto_strong	generate a pseudo-random string of bytes
function openssl sign $signature_alg	int - one of these signature algorithms
function openssl sign $signature	if the call was successful the signature is returned in signature
function openssl sign $priv_key_id	resource - a key returned by openssl_get_privatekey() string - a pem formatted key
function openssl sign $data	the string of data you wish to sign
function bool openssl sign	returns true on success or false on failure
function bool openssl sign string $data string $signature mixed $priv_key_id mixed $signature_alg	generate signature
function openssl spki new $algorithm	the digest algorithm
function openssl spki new $privkey	privkey should be set to a private key that was previously generated by openssl_pkey_new() or otherwise obtained from the other openssl_pkey family of functions
function openssl spki new $challenge	the challenge associated to associate with the spkac
function string openssl spki new	returns a signed public key and challenge string or null on failure
function string openssl spki new resource $privkey string $challenge int $algorithm	generate a new signed public key and challenge
function openssl verify $data	the string of data used to generate the signature previously
function openssl verify $signature	a raw binary string generated by openssl_sign() or similar means
function openssl verify $pub_key_id	resource - a key returned by openssl_get_publickey() string - a pem formatted key example -----begin public key----- miibcgk
function openssl verify $signature_alg	int - one of these signature algorithms
function int openssl verify	returns 1 if the signature is correct 0 if it is incorrect and -1 on error
function int openssl verify string $data string $signature mixed $pub_key_id mixed $signature_alg	verify signature
function openssl x509 check private key $key	the private key
function openssl x509 check private key $cert	the certificate
function bool openssl x509 check private key	returns true if key is the private key that corresponds to cert or false otherwise
function bool openssl x509 check private key mixed $cert mixed $key	checks if a private key corresponds to a certificate
function openssl x509 checkpurpose $cainfo	cainfo should be an array of trusted ca files / dirs as described in certificate verification
function openssl x509 checkpurpose $x509cert	the examined certificate
function openssl x509 checkpurpose $untrustedfile	if specified this should be the name of a pem encoded file holding certificates that can be used to help verify the certificate although no trust is placed in the certificates that come from that file
function int openssl x509 checkpurpose	returns true if the certificate can be used for the intended purpose false if it cannot or -1 on error
function int openssl x509 checkpurpose mixed $x509cert int $purpose array $cainfo string $untrustedfile	verifies if a certificate can be used for a particular purpose
function openssl x509 export to file $outfilename	path to the output file
function openssl x509 export to file $x509	see key / certificate parameters for a list of valid values
function openssl x509 export to file $notext	the optional parameter notext affects the verbosity of the output; if it is false then additional human-readable information is included in the output
function bool openssl x509 export to file	returns true on success or false on failure
function bool openssl x509 export to file mixed $x509 string $outfilename bool $notext	exports a certificate to file
function openssl x509 export $output	on success this will hold the pem
function openssl x509 export $x509	see key / certificate parameters for a list of valid values
function openssl x509 export $notext	the optional parameter notext affects the verbosity of the output; if it is false then additional human-readable information is included in the output
function bool openssl x509 export	returns true on success or false on failure
function bool openssl x509 export mixed $x509 string $output bool $notext	exports a certificate as a string
function openssl x509 parse $shortnames	shortnames controls how the data is indexed in the array - if shortnames is true the default then fields will be indexed with the short name form otherwise the long name form will be used - e
function array openssl x509 parse	the structure of the returned data is deliberately not yet documented as it is still subject to change
function array openssl x509 parse mixed $x509cert bool $shortnames	parse an x509 certificate and return the information as an array
function ord $string	a character
function int ord	returns the ascii value as an integer
function int ord string $string	return ascii value of character
function output add rewrite var $name	the variable name
function output add rewrite var $value	the variable value
function bool output add rewrite var	returns true on success or false on failure
function bool output add rewrite var string $name string $value	add url rewriter values
function bool output reset rewrite vars	returns true on success or false on failure
function bool output reset rewrite vars	reset url rewriter values
function override function $function_args	the function arguments as a comma separated string
function override function $function_name	the function to override
function override function $function_code	the new code for the function
function bool override function	returns true on success or false on failure
function bool override function string $function_name string $function_args string $function_code	overrides built-in functions
function pack $format	the format string consists of format codes followed by an optional repeater argument
function string pack	returns a binary string containing data
function string pack string $format mixed $args	pack data into binary string
function parse ini string $ini	the contents of the ini file being parsed
function parse ini string $process_sections	by setting the process_sections parameter to true you get a multidimensional array with the section names and settings included
function parse ini string $scanner_mode	can either be ini_scanner_normal default or ini_scanner_raw
function array parse ini string	the settings are returned as an associative array on success and false on failure
function array parse ini string string $ini bool $process_sections int $scanner_mode	parse a configuration string
function parse str $arr	if the second parameter arr is present variables are stored in this variable as array elements instead
function parse str $str	the input string
function void parse str string $str array $arr	parses the string into variables
function password get info $hash	a hash created by password_hash()
function array password get info	returns an associative array with three elements: algo which will match a password algorithm constant algoname which has the human readable name of the algorithm options which includes the options provided when calling password_hash()
function array password get info string $hash	returns information about the given hash
function password hash $algo	a password algorithm constant denoting the algorithm to use when hashing the password
function password hash $options	an associative array containing options
function password hash $password	the users password
function string password hash	returns the hashed password or false on failure
function string password hash string $password integer $algo array $options	creates a password hash
function password needs rehash $algo	a password algorithm constant denoting the algorithm to use when hashing the password
function password needs rehash $options	an associative array containing options
function password needs rehash $hash	a hash created by password_hash()
function boolean password needs rehash	returns true if the hash should be rehashed to match the given algo and options or false otherwise
function boolean password needs rehash string $hash integer $algo array $options	checks if the given hash matches the given options
function pathinfo $path	the path to be parsed
function pathinfo $options	if present specifies a specific element to be returned; one of pathinfo_dirname pathinfo_basename pathinfo_extension or pathinfo_filename
function mixed pathinfo	if the options parameter is not passed an associative array containing the following elements is returned: dirname basename extension if any and filename
function mixed pathinfo string $path int $options	returns information about a file path
function pclose $handle	the file pointer must be valid and must have been returned by a successful call to popen()
function int pclose	returns the termination status of the process that was run
function int pclose resource $handle	closes process file pointer
function pcntl exec $args	args is an array of argument strings passed to the program
function pcntl exec $envs	envs is an array of strings which are passed as environment to the program
function pcntl exec $path	path must be the path to a binary executable or a script with a valid path pointing to an executable in the shebang #! / usr / local / bin / perl for example as the first line
function bool pcntl exec	returns false on error and does not return on success
function bool pcntl exec string $path array $args array $envs	executes specified program in current process space
function pcntl getpriority $pid	if not specified the pid of the current process is used
function pcntl getpriority $process_identifier	one of prio_pgrp prio_user or prio_process
function int pcntl getpriority	pcntl_getpriority() returns the priority of the process or false on error
function int pcntl getpriority int $pid int $process_identifier	get the priority of any process
function bool pcntl signal dispatch	returns true on success or false on failure
function bool pcntl signal dispatch	calls signal handlers for pending signals
function pcntl signal $restart_syscalls	specifies whether system call restarting should be used when this signal arrives
function pcntl signal $handler	the signal handler
function pcntl signal $signo	the signal being handled
function pcntl signal $signo	the signal number
function bool pcntl signal	returns true on success or false on failure
function bool pcntl signal int $signo callable|int $handler bool $restart_syscalls	installs a signal handler
function pcntl sigprocmask $set	list of signals
function pcntl sigprocmask $oldset	the oldset parameter is set to an array containing the list of the previously blocked signals
function pcntl sigprocmask $how	sets the behavior of pcntl_sigprocmask()
function bool pcntl sigprocmask	returns true on success or false on failure
function bool pcntl sigprocmask int $how array $set array $oldset	sets and retrieves blocked signals
function pcntl sigtimedwait $set	array of signals to wait for
function pcntl sigtimedwait $siginfo	the siginfo is set to an array containing informations about the signal
function pcntl sigtimedwait $seconds	timeout in seconds
function pcntl sigtimedwait $nanoseconds	timeout in nanoseconds
function int pcntl sigtimedwait	on success pcntl_sigtimedwait() returns a signal number
function int pcntl sigtimedwait array $set array $siginfo int $seconds int $nanoseconds	waits for signals with a timeout
function pcntl sigwaitinfo $set	array of signals to wait for
function pcntl sigwaitinfo $siginfo	the siginfo parameter is set to an array containing informations about the signal
function int pcntl sigwaitinfo	on success pcntl_sigwaitinfo() returns a signal number
function int pcntl sigwaitinfo array $set array $siginfo	waits for signals
function pcntl wait $status	pcntl_wait() will store status information in the status parameter which can be evaluated using the following functions: pcntl_wifexited() pcntl_wifstopped() pcntl_wifsignaled() pcntl_wexitstatus() pcntl_wtermsig() and pcntl_wstopsig()
function pcntl wait $options	if wait3 is available on your system mostly bsd-style systems you can provide the optional options parameter
function int pcntl wait	pcntl_wait() returns the process id of the child which exited -1 on error or zero if wnohang was provided as an option on wait3-available systems and no child was available
function int pcntl wait int $status int $options	waits on or returns the status of a forked child
function pcntl wifexited $status	the status parameter is the status parameter supplied to a successful call to pcntl_waitpid()
function bool pcntl wifexited	returns true if the child status code represents a normal exit false otherwise
function bool pcntl wifexited int $status	checks if status code represents a normal exit
function pcntl wifstopped $status	the status parameter is the status parameter supplied to a successful call to pcntl_waitpid()
function bool pcntl wifstopped	returns true if the child process which caused the return is currently stopped false otherwise
function bool pcntl wifstopped int $status	checks whether the child process is currently stopped
function pcntl wtermsig $status	the status parameter is the status parameter supplied to a successful call to pcntl_waitpid()
function int pcntl wtermsig	returns the signal number as an integer
function int pcntl wtermsig int $status	returns the signal which caused the child to terminate
function bool PDF activate item resource $pdfdoc int $id	activate structure element or other content item
function bool PDF add launchlink resource $pdfdoc float $llx float $lly float $urx float $ury string $filename	add launch annotation for current page deprecated
function bool PDF add locallink resource $pdfdoc float $lowerleftx float $lowerlefty float $upperrightx float $upperrighty int $page string $dest	add link annotation for current page deprecated
function bool PDF add nameddest resource $pdfdoc string $name string $optlist	create named destination
function int PDF add textflow resource $pdfdoc int $textflow string $text string $optlist	create textflow or add text to existing textflow
function bool PDF add thumbnail resource $pdfdoc int $image	add thumbnail for current page
function bool PDF add weblink resource $pdfdoc float $lowerleftx float $lowerlefty float $upperrightx float $upperrighty string $url	add weblink for current page deprecated
function bool PDF arcn resource $p float $x float $y float $r float $alpha float $beta	draw a clockwise circular arc segment
function int PDF begin document resource $pdfdoc string $filename string $optlist	create new pdf file
function bool PDF begin glyph resource $pdfdoc string $glyphname float $wx float $llx float $lly float $urx float $ury	start glyph definition for type 3 font
function int PDF begin item resource $pdfdoc string $tag string $optlist	open structure element or other content item
function bool PDF begin layer resource $pdfdoc int $layer	start layer
function bool PDF begin page resource $pdfdoc float $width float $height	start new page deprecated
function int PDF begin pattern resource $pdfdoc float $width float $height float $xstep float $ystep int $painttype	start pattern definition
function bool PDF circle resource $pdfdoc float $x float $y float $r	draw a circle
function bool PDF clip resource $p	clip to current path
function bool PDF close image resource $p int $image	close image
function bool PDF close pdi page resource $p int $page	close the page handle
function bool PDF closepath fill stroke resource $p	close fill and stroke current path
function bool PDF closepath stroke resource $p	close and stroke path
function bool PDF closepath resource $p	close current path
function int PDF create 3dview resource $pdfdoc string $username string $optlist	create 3d view
function int PDF create action resource $pdfdoc string $type string $optlist	create action for objects or events
function bool PDF create annotation resource $pdfdoc float $llx float $lly float $urx float $ury string $type string $optlist	create rectangular annotation
function int PDF create gstate resource $pdfdoc string $optlist	create graphics state object
function bool PDF create pvf resource $pdfdoc string $filename string $data string $optlist	create pdflib virtual file
function int PDF create textflow resource $pdfdoc string $text string $optlist	create textflow object
function bool PDF curveto resource $p float $x1 float $y1 float $x2 float $y2 float $x3 float $y3	draw bezier curve
function int PDF define layer resource $pdfdoc string $name string $optlist	create layer definition
function int PDF delete pvf resource $pdfdoc string $filename	delete pdflib virtual file
function bool PDF delete table resource $pdfdoc int $table string $optlist	delete table object
function bool PDF delete textflow resource $pdfdoc int $textflow	delete textflow object
function bool PDF encoding set char resource $pdfdoc string $encoding int $slot string $glyphname int $uv	add glyph name and / or unicode value
function bool PDF end font resource $pdfdoc	terminate type 3 font definition
function bool PDF end glyph resource $pdfdoc	terminate glyph definition for type 3 font
function bool PDF end item resource $pdfdoc int $id	close structure element or other content item
function bool PDF end page ext resource $pdfdoc string $optlist	finish page
function bool PDF endpath resource $p	end current path
function int PDF fill imageblock resource $pdfdoc int $page string $blockname int $image string $optlist	fill image block with variable data
function int PDF fill pdfblock resource $pdfdoc int $page string $blockname int $contents string $optlist	fill pdf block with variable data
function bool PDF fill resource $p	fill current path
function bool PDF fit image resource $pdfdoc int $image float $x float $y string $optlist	place image or template
function bool PDF fit pdi page resource $pdfdoc int $page float $x float $y string $optlist	place imported pdf page
function string PDF fit textflow resource $pdfdoc int $textflow float $llx float $lly float $urx float $ury string $optlist	format textflow in rectangular area
function bool PDF fit textline resource $pdfdoc string $text float $x float $y string $optlist	place single line of text
function string PDF get apiname resource $pdfdoc	get name of unsuccessfull api function
function string PDF get buffer resource $p	get pdf output buffer
function string PDF get errmsg resource $pdfdoc	get error text
function int PDF get errnum resource $pdfdoc	get error number
function int PDF get minorversion	get minor version number deprecated
function string PDF get pdi parameter resource $p string $key int $doc int $page int $reserved	get pdi string parameter deprecated
function float PDF get pdi value resource $p string $key int $doc int $page int $reserved	get pdi numerical parameter deprecated
function float PDF info font resource $pdfdoc int $font string $keyword string $optlist	query detailed information about a loaded font
function float PDF info matchbox resource $pdfdoc string $boxname int $num string $keyword	query matchbox information
function float PDF info table resource $pdfdoc int $table string $keyword	retrieve table information
function float PDF info textflow resource $pdfdoc int $textflow string $keyword	query textflow state
function float PDF info textline resource $pdfdoc string $text string $keyword string $optlist	perform textline formatting and query metrics
function bool PDF lineto resource $p float $x float $y	draw a line
function int PDF load 3ddata resource $pdfdoc string $filename string $optlist	load 3d model
function int PDF load font resource $pdfdoc string $fontname string $encoding string $optlist	search and prepare font
function int PDF load iccprofile resource $pdfdoc string $profilename string $optlist	search and prepare icc profile
function int PDF load image resource $pdfdoc string $imagetype string $filename string $optlist	open image file
function bool PDF moveto resource $p float $x float $y	set current point
function bool PDF open file resource $p string $filename	create pdf file deprecated
function int PDF open image file resource $p string $imagetype string $filename string $stringparam int $intparam	read image from file deprecated
function int PDF open memory image resource $p resource $image	open image created with php's image functions not supported
function int PDF open pdi resource $pdfdoc string $filename string $optlist int $len	open pdf file deprecated
function float PDF pcos get number resource $p int $doc string $path	get value of pcos path with type number or boolean
function string PDF pcos get stream resource $p int $doc string $optlist string $path	get contents of pcos path with type stream fstream or string
function string PDF pcos get string resource $p int $doc string $path	get value of pcos path with type name string or boolean
function bool PDF place image resource $pdfdoc int $image float $x float $y float $scale	place image on the page deprecated
function bool PDF place pdi page resource $pdfdoc int $page float $x float $y float $sx float $sy	place pdf page deprecated
function bool PDF resume page resource $pdfdoc string $optlist	resume page
function bool PDF rotate resource $p float $phi	rotate coordinate system
function bool PDF scale resource $p float $sx float $sy	scale coordinate system
function bool PDF set border color resource $p float $red float $green float $blue	set border color of annotations deprecated
function bool PDF set border dash resource $pdfdoc float $black float $white	set border dash style of annotations deprecated
function bool PDF set gstate resource $pdfdoc int $gstate	activate graphics state object
function bool PDF set info resource $p string $key string $value	fill document info field
function bool PDF set parameter resource $p string $key string $value	set string parameter
function bool PDF set value resource $p string $key float $value	set numerical parameter
function bool PDF setcolor resource $p string $fstype string $colorspace float $c1 float $c2 float $c3 float $c4	set fill and stroke color
function bool PDF setdash resource $pdfdoc float $b float $w	set simple dash pattern
function bool PDF setflat resource $pdfdoc float $flatness	set flatness
function bool PDF setgray fill resource $p float $g	set fill color to gray deprecated
function bool PDF setgray stroke resource $p float $g	set stroke color to gray deprecated
function bool PDF setgray resource $p float $g	set color to gray deprecated
function bool PDF setlinecap resource $p int $linecap	set linecap parameter
function bool PDF setlinejoin resource $p int $value	set linejoin parameter
function bool PDF setlinewidth resource $p float $width	set line width
function bool PDF setmatrix resource $p float $a float $b float $c float $d float $e float $f	set current transformation matrix
function bool PDF setmiterlimit resource $pdfdoc float $miter	set miter limit
function bool PDF setrgbcolor resource $p float $red float $green float $blue	set fill and stroke rgb color values deprecated
function int PDF shading pattern resource $pdfdoc int $shading string $optlist	define shading pattern
function bool PDF show resource $pdfdoc string $text	output text at current position
function bool PDF skew resource $p float $alpha float $beta	skew the coordinate system
function float PDF stringwidth resource $p string $text int $font float $fontsize	return width of text
function bool PDF stroke resource $p	stroke path
function bool PDF translate resource $p float $tx float $ty	set origin of coordinate system
function string PDF utf16 to utf8 resource $pdfdoc string $utf16string	convert string from utf-16 to utf-8
function string PDF utf8 to utf16 resource $pdfdoc string $utf8string string $ordering	convert string from utf-8 to utf-16
function resource pfsockopen string $hostname int $port int $errno string $errstr float $timeout	open persistent internet or unix domain socket connection
function pg connect poll $connection	postgresql database connection resource
function int pg connect poll	returns pgsql_polling_failed pgsql_polling_reading pgsql_polling_writing pgsql_polling_ok or pgsql_polling_active
function int pg connect poll resource $connection	poll the status of an in-progress asynchronous postgresql connection attempt
function pg connect $connection_string	the connection_string can be empty to use all default parameters or it can contain one or more parameter settings separated by whitespace
function pg connect $connect_type	if pgsql_connect_force_new is passed then a new connection is created even if the connection_string is identical to an existing connection
function resource pg connect	postgresql connection resource on success false on failure
function resource pg connect string $connection_string int $connect_type	open a postgresql connection
function pg connection busy $connection	postgresql database connection resource
function bool pg connection busy	returns true if the connection is busy false otherwise
function bool pg connection busy resource $connection	get connection is busy or not
function pg connection reset $connection	postgresql database connection resource
function bool pg connection reset	returns true on success or false on failure
function bool pg connection reset resource $connection	reset connection reconnect
function pg consume input $connection	postgresql database connection resource
function bool pg consume input	true if no error occurred or false if there was an error
function bool pg consume input resource $connection	reads input on the connection
function pg copy to $delimiter	the token that separates values for each field in each element of rows
function pg copy to $connection	postgresql database connection resource
function pg copy to $null_as	how sql null values are represented in the rows
function pg copy to $table_name	name of the table from which to copy the data into rows
function array pg copy to	an array with one element for each line of copy data
function array pg copy to resource $connection string $table_name string $delimiter string $null_as	copy a table to an array
function pg dbname $connection	postgresql database connection resource
function string pg dbname	a string containing the name of the database the connection is to or false on error
function string pg dbname resource $connection	get the database name
function pg end copy $connection	postgresql database connection resource
function bool pg end copy	returns true on success or false on failure
function bool pg end copy resource $connection	sync with postgresql backend
function pg escape bytea $connection	postgresql database connection resource
function pg escape bytea $data	a string containing text or binary data to be inserted into a bytea column
function string pg escape bytea	a string containing the escaped data
function string pg escape bytea resource $connection string $data	escape a string for insertion into a bytea field
function pg escape identifier $connection	postgresql database connection resource
function pg escape identifier $data	a string containing text to be escaped
function string pg escape identifier	a string containing the escaped data
function string pg escape identifier resource $connection string $data	escape a identifier for insertion into a text field
function pg escape literal $connection	postgresql database connection resource
function pg escape literal $data	a string containing text to be escaped
function string pg escape literal	a string containing the escaped data
function string pg escape literal resource $connection string $data	escape a literal for insertion into a text field
function pg execute $connection	postgresql database connection resource
function pg execute $stmtname	the name of the prepared statement to execute
function pg execute $params	an array of parameter values to substitute for the $1 $2 etc
function resource pg execute	a query result resource on success or false on failure
function pg fetch all columns $result	postgresql query result resource returned by pg_query() pg_query_params() or pg_execute() among others
function pg fetch all columns $column	column number zero-based to be retrieved from the result resource
function array pg fetch all columns	an array with all values in the result column
function array pg fetch all columns resource $result int $column	fetches all rows in a particular result column as an array
function pg fetch array $result	postgresql query result resource returned by pg_query() pg_query_params() or pg_execute() among others
function pg fetch array $row	row number in result to fetch
function pg fetch array $result_type	an optional parameter that controls how the returned array is indexed
function array pg fetch array	an array indexed numerically beginning with 0 or associatively indexed by field name or both
function array pg fetch array resource $result int $row int $result_type	fetch a row as an array
function pg fetch assoc $result	postgresql query result resource returned by pg_query() pg_query_params() or pg_execute() among others
function pg fetch assoc $row	row number in result to fetch
function array pg fetch assoc	an array indexed associatively by field name
function array pg fetch assoc resource $result int $row	fetch a row as an associative array
function pg fetch object $result	postgresql query result resource returned by pg_query() pg_query_params() or pg_execute() among others
function pg fetch object $row	row number in result to fetch
function pg fetch object $result_type	ignored and deprecated
function pg fetch object $params	an optional array of parameters to pass to the constructor for class_name objects
function pg fetch object $class_name	the name of the class to instantiate set the properties of and return
function object pg fetch object	an object with one attribute for each field name in the result
function object pg fetch object resource $result int $row int $result_type	fetch a row as an object
function pg fetch result $result	postgresql query result resource returned by pg_query() pg_query_params() or pg_execute() among others
function pg fetch result $row	row number in result to fetch
function pg fetch result $field	a string representing the name of the field column to fetch otherwise an int representing the field number to fetch
function string pg fetch result	boolean is returned as t or f
function string pg fetch result resource $result int $row mixed $field	returns values from a result resource
function pg fetch row $result	postgresql query result resource returned by pg_query() pg_query_params() or pg_execute() among others
function pg fetch row $row	row number in result to fetch
function array pg fetch row	an array indexed from 0 upwards with each value represented as a string
function array pg fetch row resource $result int $row	get a row as an enumerated array
function pg field is null $result	postgresql query result resource returned by pg_query() pg_query_params() or pg_execute() among others
function pg field is null $row	row number in result to fetch
function pg field is null $field	field number starting from 0 as an integer or the field name as a string
function int pg field is null	returns 1 if the field in the given row is sql null 0 if not
function int pg field is null resource $result int $row mixed $field	test if a field is sql null
function pg field num $result	postgresql query result resource returned by pg_query() pg_query_params() or pg_execute() among others
function pg field num $field_name	the name of the field
function int pg field num	the field number numbered from 0 or -1 on error
function int pg field num resource $result string $field_name	returns the field number of the named field
function pg field prtlen $result	postgresql query result resource returned by pg_query() pg_query_params() or pg_execute() among others
function pg field prtlen $row	row number in result
function int pg field prtlen	the field printed length or false on error
function int pg field prtlen resource $result int $row_number mixed $field_name_or_number	returns the printed length
function pg field size $result	postgresql query result resource returned by pg_query() pg_query_params() or pg_execute() among others
function pg field size $field_number	field number starting from 0
function int pg field size	the internal field storage size in bytes
function int pg field size resource $result int $field_number	returns the internal storage size of the named field
function pg field table $result	postgresql query result resource returned by pg_query() pg_query_params() or pg_execute() among others
function pg field table $oid_only	by default the tables name that field belongs to is returned but if oid_only is set to true then the oid will instead be returned
function pg field table $field_number	field number starting from 0
function mixed pg field table	on success either the fields table name or oid
function mixed pg field table resource $result int $field_number bool $oid_only	returns the name or oid of the tables field
function pg field type oid $result	postgresql query result resource returned by pg_query() pg_query_params() or pg_execute() among others
function pg field type oid $field_number	field number starting from 0
function int pg field type oid	the oid of the fields base type
function int pg field type oid resource $result int $field_number	returns the type id oid for the corresponding field number
function pg field type $result	postgresql query result resource returned by pg_query() pg_query_params() or pg_execute() among others
function pg field type $field_number	field number starting from 0
function string pg field type	a string containing the base name of the fields type or false on error
function string pg field type resource $result int $field_number	returns the type name for the corresponding field number
function pg flush $connection	postgresql database connection resource
function mixed pg flush	returns true if the flush was successful or no data was waiting to be flushed 0 if part of the pending data was flushed but more remains or false on failure
function mixed pg flush resource $connection	flush outbound query data on the connection
function pg free result $result	postgresql query result resource returned by pg_query() pg_query_params() or pg_execute() among others
function bool pg free result	returns true on success or false on failure
function bool pg free result resource $result	free result memory
function pg get notify $connection	postgresql database connection resource
function pg get notify $result_type	an optional parameter that controls how the returned array is indexed
function array pg get notify	an array containing the notify message name and backend pid
function array pg get notify resource $connection int $result_type	gets sql notify message
function pg get result $connection	postgresql database connection resource
function resource pg get result	the result resource or false if no more results are available
function resource pg get result resource $connection	get asynchronous query result
function pg host $connection	postgresql database connection resource
function string pg host	a string containing the name of the host the connection is to or false on error
function string pg host resource $connection	returns the host name associated with the connection
function pg insert $options	any number of pgsql_conv_opts pgsql_dml_no_conv pgsql_dml_escape pgsql_dml_exec pgsql_dml_async or pgsql_dml_string combined
function pg insert $connection	postgresql database connection resource
function pg insert $assoc_array	an array whose keys are field names in the table table_name and whose values are the values of those fields that are to be inserted
function pg insert $table_name	name of the table into which to insert rows
function mixed pg insert	returns true on success or false on failure
function mixed pg insert resource $connection string $table_name array $assoc_array int $options	insert array into table
function pg lo close $result	postgresql large object lob resource returned by pg_lo_open()
function bool pg lo close	returns true on success or false on failure
function bool pg lo close resource $large_object	close a large object
function pg lo create $object_id	if an object_id is given the function will try to create a large object with this id else a free object id is assigned by the server
function pg lo create $connection	postgresql database connection resource
function int pg lo create	a large object oid or false on error
function int pg lo create resource $connection mixed $object_id	create a large object
function pg lo export $oid	the oid of the large object in the database
function pg lo export $connection	postgresql database connection resource
function pg lo export $pathname	the full path and file name of the file in which to write the large object on the client filesystem
function bool pg lo export	returns true on success or false on failure
function bool pg lo export resource $connection int $oid string $pathname	export a large object to file
function pg lo open $oid	the oid of the large object in the database
function pg lo open $connection	postgresql database connection resource
function pg lo open $mode	can be either r for read-only w for write only or rw for read and write
function resource pg lo open	a large object resource or false on error
function resource pg lo open resource $connection int $oid string $mode	open a large object
function pg lo read all $large_object	postgresql large object lob resource returned by pg_lo_open()
function int pg lo read all	number of bytes read or false on error
function int pg lo read all resource $large_object	reads an entire large object and send straight to browser
function pg lo seek $offset	the number of bytes to seek
function pg lo seek $whence	one of the constants pgsql_seek_set seek from object start pgsql_seek_cur seek from current position or pgsql_seek_end seek from object end
function pg lo seek $large_object	postgresql large object lob resource returned by pg_lo_open()
function bool pg lo seek	returns true on success or false on failure
function bool pg lo seek resource $large_object int $offset int $whence	seeks position within a large object
function pg lo tell $large_object	postgresql large object lob resource returned by pg_lo_open()
function int pg lo tell	the current seek offset in number of bytes from the beginning of the large object
function int pg lo tell resource $large_object	returns current seek position a of large object
function pg lo truncate $size	the number of bytes to truncate
function pg lo truncate $large_object	postgresql large object lob resource returned by pg_lo_open()
function bool pg lo truncate	returns true on success or false on failure
function bool pg lo truncate resource $large_object int $size	truncates a large object
function pg lo unlink $oid	the oid of the large object in the database
function pg lo unlink $connection	postgresql database connection resource
function bool pg lo unlink	returns true on success or false on failure
function bool pg lo unlink resource $connection int $oid	delete a large object
function pg lo write $len	an optional maximum number of bytes to write
function pg lo write $large_object	postgresql large object lob resource returned by pg_lo_open()
function pg lo write $data	the data to be written to the large object
function int pg lo write	the number of bytes written to the large object or false on error
function int pg lo write resource $large_object string $data int $len	write to a large object
function pg options $connection	postgresql database connection resource
function string pg options	a string containing the connection options or false on error
function string pg options resource $connection	get the options associated with the connection
function pg parameter status $connection	postgresql database connection resource
function pg parameter status $param_name	possible param_name values include server_version server_encoding client_encoding is_superuser session_authorization datestyle timezone and integer_datetimes
function string pg parameter status	a string containing the value of the parameter false on failure or invalid param_name
function pg pconnect $connection_string	the connection_string can be empty to use all default parameters or it can contain one or more parameter settings separated by whitespace
function pg pconnect $connect_type	if pgsql_connect_force_new is passed then a new connection is created even if the connection_string is identical to an existing connection
function resource pg pconnect	postgresql connection resource on success false on failure
function resource pg pconnect string $connection_string int $connect_type	open a persistent postgresql connection
function pg ping $connection	postgresql database connection resource
function bool pg ping	returns true on success or false on failure
function bool pg ping resource $connection	ping database connection
function pg port $connection	postgresql database connection resource
function int pg port	an int containing the port number of the database server the connection is to or false on error
function int pg port resource $connection	return the port number associated with the connection
function pg put line $data	a line of text to be sent directly to the postgresql backend
function pg put line $connection	postgresql database connection resource
function bool pg put line	returns true on success or false on failure
function bool pg put line resource $connection string $data	send a null-terminated string to postgresql backend
function pg query params $connection	postgresql database connection resource
function pg query params $query	the parameterized sql statement
function pg query params $params	an array of parameter values to substitute for the $1 $2 etc
function resource pg query params	a query result resource on success or false on failure
function pg result error field $result	a postgresql query result resource from a previously executed statement
function pg result error field $fieldcode	possible fieldcode values are: pgsql_diag_severity pgsql_diag_sqlstate pgsql_diag_message_primary pgsql_diag_message_detail pgsql_diag_message_hint pgsql_diag_statement_position pgsql_diag_internal_position postgresql 8
function string pg result error field	a string containing the contents of the error field null if the field does not exist or false on failure
function string pg result error field resource $result int $fieldcode	returns an individual field of an error report
function pg result status $result	postgresql query result resource returned by pg_query() pg_query_params() or pg_execute() among others
function pg result status $type	either pgsql_status_long to return the numeric status of the result or pgsql_status_string to return the command tag of the result
function mixed pg result status	possible return values are pgsql_empty_query pgsql_command_ok pgsql_tuples_ok pgsql_copy_out pgsql_copy_in pgsql_bad_response pgsql_nonfatal_error and pgsql_fatal_error if pgsql_status_long is specified
function mixed pg result status resource $result int $type	get status of query result
function pg select $table_name	name of the table from which to select rows
function pg select $connection	postgresql database connection resource
function pg select $assoc_array	an array whose keys are field names in the table table_name and whose values are the conditions that a row must meet to be retrieved
function pg select $options	any number of pgsql_conv_force_null pgsql_dml_no_conv pgsql_dml_escape pgsql_dml_exec pgsql_dml_async or pgsql_dml_string combined
function mixed pg select	returns true on success or false on failure
function mixed pg select resource $connection string $table_name array $assoc_array int $options	select records
function pg send execute $connection	postgresql database connection resource
function pg send execute $stmtname	the name of the prepared statement to execute
function pg send execute $params	an array of parameter values to substitute for the $1 $2 etc
function bool pg send execute	returns true on success false on failure
function pg send prepare $stmtname	the name to give the prepared statement
function pg send prepare $connection	postgresql database connection resource
function pg send prepare $query	the parameterized sql statement
function bool pg send prepare	returns true on success false on failure
function pg send query params $connection	postgresql database connection resource
function pg send query params $query	the parameterized sql statement
function pg send query params $params	an array of parameter values to substitute for the $1 $2 etc
function bool pg send query params	returns true on success or false on failure
function pg send query $connection	postgresql database connection resource
function pg send query $query	the sql statement or statements to be executed
function bool pg send query	returns true on success or false on failure
function bool pg send query resource $connection string $query	sends asynchronous query
function pg set error verbosity $verbosity	the required verbosity: pgsql_errors_terse pgsql_errors_default or pgsql_errors_verbose
function pg set error verbosity $connection	postgresql database connection resource
function int pg set error verbosity	the previous verbosity level: pgsql_errors_terse pgsql_errors_default or pgsql_errors_verbose
function int pg set error verbosity resource $connection int $verbosity	determines the verbosity of messages returned by pg_last_error and pg_result_error
function pg trace $connection	postgresql database connection resource
function pg trace $pathname	the full path and file name of the file in which to write the trace log
function pg trace $mode	an optional file access mode same as for fopen()
function bool pg trace	returns true on success or false on failure
function bool pg trace string $pathname string $mode resource $connection	enable tracing a postgresql connection
function pg tty $connection	postgresql database connection resource
function string pg tty	a string containing the debug tty of the connection or false on error
function string pg tty resource $connection	return the tty name associated with the connection
function pg unescape bytea $data	a string containing postgresql bytea data to be converted into a php binary string
function string pg unescape bytea	a string containing the unescaped data
function string pg unescape bytea string $data	unescape binary for bytea type
function pg untrace $connection	postgresql database connection resource
function bool pg untrace	always returns true
function bool pg untrace resource $connection	disable tracing of a postgresql connection
function pg update $options	any number of pgsql_conv_force_null pgsql_dml_no_conv pgsql_dml_escape pgsql_dml_exec pgsql_dml_async or pgsql_dml_string combined
function pg update $connection	postgresql database connection resource
function pg update $condition	an array whose keys are field names in the table table_name and whose values are the conditions that a row must meet to be updated
function pg update $data	an array whose keys are field names in the table table_name and whose values are what matched rows are to be updated to
function pg update $table_name	name of the table into which to update rows
function mixed pg update	returns true on success or false on failure
function mixed pg update resource $connection string $table_name array $data array $condition int $options	update table
function pg version $connection	postgresql database connection resource
function array pg version	returns an array with client protocol and server keys and values if available
function array pg version resource $connection	returns an array with client protocol and server version when available
function php check syntax $error_message	if the error_message parameter is used it will contain the error message generated by the syntax check
function php check syntax $filename	the name of the file being checked
function bool php check syntax	returns true if the lint check passed and false if the link check failed or if filename cannot be opened
function bool php check syntax string $filename string $error_message	check the php syntax of and execute the specified file
function string php ini scanned files	returns a comma-separated string of
function string php ini scanned files	return a list of
function string php logo guid	returns phpe9568f34-d428-11d2-a769-00aa001acf42
function string php logo guid	gets the logo guid
function php strip whitespace $filename	path to the php file
function string php strip whitespace	the stripped source code will be returned on success or an empty string on failure
function string php strip whitespace string $filename	return source with stripped comments and whitespace
function phpcredits $flag	to generate a custom credits page you may want to use the flag parameter
function bool phpcredits	returns true on success or false on failure
function bool phpcredits int $flag	prints out the credits for php
function phpinfo $what	the output may be customized by passing one or more of the following constants bitwise values summed together in the optional what parameter
function bool phpinfo	returns true on success or false on failure
function bool phpinfo int $what	outputs information about php's configuration
function phpversion $extension	an optional extension name
function string phpversion	if the optional extension parameter is specified phpversion() returns the version of that extension or false if there is no version information associated or the extension isnt enabled
function string phpversion string $extension	gets the current php version
function png2wbmp $dest_height	destination image height
function png2wbmp $wbmpname	path to destination wbmp file
function png2wbmp $dest_width	destination image width
function png2wbmp $threshold	threshold value between 0 and 8 inclusive
function png2wbmp $pngname	path to png file
function bool png2wbmp	returns true on success or false on failure
function bool png2wbmp string $pngname string $wbmpname int $dest_height int $dest_width int $threshold	convert png image file to wbmp image file
function int posix get last error	returns the errno error number set by the last posix function that failed
function string posix getcwd	returns a string of the absolute pathname on success
function string posix getcwd	pathname of current directory
function int posix getgid	returns the real group id as an integer
function int posix getgid	return the real group id of the current process
function posix getgrgid $gid	the group id
function array posix getgrgid	the array elements returned are: the group information array element description name the name element contains the name of the group
function array posix getgrgid int $gid	return info about a group by group id
function array posix getgroups	returns an array of integers containing the numeric group ids of the group set of the current process
function array posix getgroups	return the group set of the current process
function posix getpgid $pid	the process id
function int posix getpgid	returns the identifier as an integer
function int posix getpgid int $pid	get process group id for job control
function int posix getpgrp	returns the identifier as an integer
function int posix getpgrp	return the current process group identifier
function int posix getpid	returns the identifier as an integer
function int posix getpid	return the current process identifier
function int posix getppid	returns the identifier as an integer
function int posix getppid	return the parent process identifier
function posix getpwnam $username	an alphanumeric username
function array posix getpwnam	on success an array with the following elements is returned else false is returned: the user information array element description name the name element contains the username of the user
function array posix getpwnam string $username	return info about a user by username
function posix getpwuid $uid	the user identifier
function array posix getpwuid	returns an associative array with the following elements: the user information array element description name the name element contains the username of the user
function array posix getpwuid int $uid	return info about a user by user id
function array posix getrlimit	returns an associative array of elements for each limit that is defined
function array posix getrlimit	return info about system resource limits
function posix initgroups $base_group_id	typically the group number from the password file
function posix initgroups $name	the user to calculate the list for
function bool posix initgroups	returns true on success or false on failure
function bool posix initgroups string $name int $base_group_id	calculate the group access list
function posix isatty $fd	the file descriptor which is expected to be either a file resource or an integer
function bool posix isatty	returns true if fd is an open descriptor connected to a terminal and false otherwise
function bool posix isatty mixed $fd	determine if a file descriptor is an interactive terminal
function posix kill $pid	the process identifier
function posix kill $sig	one of the pcntl signals constants
function bool posix kill	returns true on success or false on failure
function bool posix kill int $pid int $sig	send a signal to a process
function posix mkfifo $pathname	path to the fifo file
function posix mkfifo $mode	the second parameter mode has to be given in octal notation e
function bool posix mkfifo	returns true on success or false on failure
function bool posix mkfifo string $pathname int $mode	create a fifo special file a named pipe
function posix mknod $pathname	the file to create
function posix mknod $minor	the minor device kernel identifier
function posix mknod $major	the major device kernel identifier required to pass when using s_ifchr or s_ifblk
function posix mknod $mode	this parameter is constructed by a bitwise or between file type one of the following constants: posix_s_ifreg posix_s_ifchr posix_s_ifblk posix_s_ififo or posix_s_ifsock and permissions
function bool posix mknod	returns true on success or false on failure
function bool posix mknod string $pathname int $mode int $major int $minor	create a special or ordinary file posix
function posix setegid $gid	the group id
function bool posix setegid	returns true on success or false on failure
function bool posix setegid int $gid	set the effective gid of the current process
function posix seteuid $uid	the user id
function bool posix seteuid	returns true on success or false on failure
function bool posix seteuid int $uid	set the effective uid of the current process
function posix setgid $gid	the group id
function bool posix setgid	returns true on success or false on failure
function bool posix setgid int $gid	set the gid of the current process
function posix setpgid $pgid	the process group id
function posix setpgid $pid	the process id
function bool posix setpgid	returns true on success or false on failure
function bool posix setpgid int $pid int $pgid	set process group id for job control
function posix setrlimit $hardlimit	the hard limit in whatever unit the resource limit requires or posix_rlimit_infinity
function posix setrlimit $resource	the resource limit constant corresponding to the limit that is being set
function posix setrlimit $softlimit	the soft limit in whatever unit the resource limit requires or posix_rlimit_infinity
function bool posix setrlimit	returns true on success or false on failure
function bool posix setrlimit int $resource int $softlimit int $hardlimit	set system resource limits
function int posix setsid	returns the session id or -1 on errors
function posix setuid $uid	the user id
function bool posix setuid	returns true on success or false on failure
function bool posix setuid int $uid	set the uid of the current process
function posix strerror $errno	a posix error number returned by posix_get_last_error()
function string posix strerror	returns the error message as a string
function string posix strerror int $errno	retrieve the system error message associated with the given errno
function array posix times	returns a hash of strings with information about the current process cpu usage
function array posix times	get process times
function posix ttyname $fd	the file descriptor which is expected to be either a file resource or an integer
function string posix ttyname	on success returns a string of the absolute path of the fd
function string posix ttyname mixed $fd	determine terminal device name
function array posix uname	returns a hash of strings with information about the system
function array posix uname	get system name
function pow $exp	the exponent
function pow $base	the base to use
function number pow	base raised to the power of exp
function number pow number $base number $exp	exponential expression
function mixed preg filter	returns an array if the subject parameter is an array or a string otherwise
function mixed preg filter mixed $pattern mixed $replacement mixed $subject int $limit int $count	perform a regular expression search and replace
function preg grep $input	the input array
function preg grep $pattern	the pattern to search for as a string
function preg grep $flags	if set to preg_grep_invert this function returns the elements of the input array that do not match the given pattern
function array preg grep	returns an array indexed using the keys from the input array
function array preg grep string $pattern array $input int $flags	return array entries that match the pattern
function int preg last error	returns one of the following constants explained on their own page : preg_no_error preg_internal_error preg_backtrack_limit_error see also pcre
function preg match all $pattern	the pattern to search for as a string
function preg match all $PREG_PATTERN_ORDER	orders results so that $matches 0 is an array of full pattern matches $matches 1 is an array of strings matched by the first parenthesized subpattern and so on
function preg match all $PREG_OFFSET_CAPTURE	if this flag is passed for every occurring match the appendant string offset will also be returned
function preg match all $matches	array of all matches in multi-dimensional array ordered according to flags
function preg match all $offset	normally the search starts from the beginning of the subject string
function preg match all $subject	the input string
function preg match all $PREG_SET_ORDER	orders results so that $matches 0 is an array of first set of matches $matches 1 is an array of second set of matches and so on
function int preg match all	returns the number of full pattern matches which might be zero or false if an error occurred
function int preg match all string $pattern string $subject array $matches int $flags int $offset	perform a global regular expression match
function preg match $pattern	the pattern to search for as a string
function preg match $PREG_OFFSET_CAPTURE	if this flag is passed for every occurring match the appendant string offset will also be returned
function preg match $offset	normally the search starts from the beginning of the subject string
function preg match $subject	the input string
function preg match $matches	if matches is provided then it is filled with the results of search
function preg match $flags	flags can be the following flag: preg_offset_capture if this flag is passed for every occurring match the appendant string offset will also be returned
function int preg match	preg_match() returns 1 if the pattern matches given subject 0 if it does not or false if an error occurred
function int preg match string $pattern string $subject array $matches int $flags int $offset	perform a regular expression match
function preg quote $str	the input string
function preg quote $delimiter	if the optional delimiter is specified it will also be escaped
function string preg quote	returns the quoted escaped string
function string preg quote string $str string $delimiter	quote regular expression characters
function preg replace callback array $patterns_and_callbacks	an associative array mapping patterns keys to callbacks values
function preg replace callback array $subject	the string or an array with strings to search and replace
function preg replace callback array $count	if specified this variable will be filled with the number of replacements done
function preg replace callback array $limit	the maximum possible replacements for each pattern in each subject string
function mixed preg replace callback array	preg_replace_callback_array() returns an array if the subject parameter is an array or a string otherwise
function mixed preg replace callback array array $patterns_and_callbacks mixed $subject int $limit int $count	perform a regular expression search and replace using callbacks
function preg replace callback $pattern	the pattern to search for
function preg replace callback $count	if specified this variable will be filled with the number of replacements done
function preg replace callback $subject	the string or an array with strings to search and replace
function preg replace callback $callback	a callback that will be called and passed an array of matched elements in the subject string
function preg replace callback $limit	the maximum possible replacements for each pattern in each subject string
function mixed preg replace callback	preg_replace_callback() returns an array if the subject parameter is an array or a string otherwise
function mixed preg replace callback mixed $pattern callable $callback mixed $subject int $limit int $count	perform a regular expression search and replace using a callback
function preg replace $pattern	the pattern to search for
function preg replace $replacement	the string or an array with strings to replace
function preg replace $count	if specified this variable will be filled with the number of replacements done
function preg replace $subject	the string or an array with strings to search and replace
function preg replace $limit	the maximum possible replacements for each pattern in each subject string
function mixed preg replace	preg_replace() returns an array if the subject parameter is an array or a string otherwise
function mixed preg replace mixed $pattern mixed $replacement mixed $subject int $limit int $count	perform a regular expression search and replace
function preg split $pattern	the pattern to search for as a string
function preg split $PREG_SPLIT_NO_EMPTY	if this flag is set only non-empty pieces will be returned by preg_split()
function preg split $PREG_SPLIT_OFFSET_CAPTURE	if this flag is set for every occurring match the appendant string offset will also be returned
function preg split $PREG_SPLIT_DELIM_CAPTURE	if this flag is set parenthesized expression in the delimiter pattern will be captured and returned as well
function preg split $limit	if specified then only substrings up to limit are returned with the rest of the string being placed in the last substring
function preg split $subject	the input string
function preg split $flags	flags can be any combination of the following flags combined with the | bitwise operator : preg_split_no_empty if this flag is set only non-empty pieces will be returned by preg_split()
function array preg split	returns an array containing substrings of subject split along boundaries matched by pattern
function array preg split string $pattern string $subject int $limit int $flags	split string by a regular expression
function prev $array	the input array
function mixed prev	returns the array value in the previous place thats pointed to by the internal array pointer or false if there are no more elements
function print r $expression	the expression to be printed
function print r $return	if you would like to capture the output of print_r() use the return parameter
function mixed print r	if given a string integer or float the value itself will be printed
function mixed print r mixed $expression bool $return	prints human-readable information about a variable
function proc close $process	the proc_open() resource that will be closed
function int proc close	returns the termination status of the process that was run
function int proc close resource $process	close a process opened by proc_open and return the exit code of that process
function proc nice $increment	the increment value of the priority change
function bool proc nice	returns true on success or false on failure
function bool proc nice int $increment	change the priority of the current process
function proc terminate $process	the proc_open() resource that will be closed
function proc terminate $signal	this optional parameter is only useful on posix operating systems; you may specify a signal to send to the process using the kill 2 system call
function bool proc terminate	returns the termination status of the process that was run
function bool proc terminate resource $process int $signal	kills a process opened by proc_open
function property exists $property	the name of the property
function property exists $class	the class name or an object of the class to test for
function bool property exists	returns true if the property exists false if it doesnt exist or null in case of an error
function bool property exists mixed $class string $property	checks if the object or class has a property
function ps add launchlink $ury	the y-coordinate of the upper right corner
function ps add launchlink $llx	the x-coordinate of the lower left corner
function ps add launchlink $filename	the path of the program to be started when the link is clicked on
function ps add launchlink $urx	the x-coordinate of the upper right corner
function ps add launchlink $lly	the y-coordinate of the lower left corner
function ps add launchlink $psdoc	resource identifier of the postscript file as returned by ps_new()
function bool ps add launchlink	returns true on success or false on failure
function bool ps add launchlink resource $psdoc float $llx float $lly float $urx float $ury string $filename	adds link which launches file
function ps add locallink $ury	the y-coordinate of the upper right corner
function ps add locallink $page	the number of the page displayed when clicking on the link
function ps add locallink $llx	the x-coordinate of the lower left corner
function ps add locallink $urx	the x-coordinate of the upper right corner
function ps add locallink $lly	the y-coordinate of the lower left corner
function ps add locallink $psdoc	resource identifier of the postscript file as returned by ps_new()
function ps add locallink $dest	the parameter dest determines how the document is being viewed
function bool ps add locallink	returns true on success or false on failure
function bool ps add locallink resource $psdoc float $llx float $lly float $urx float $ury int $page string $dest	adds link to a page in the same document
function ps add weblink $ury	the y-coordinate of the upper right corner
function ps add weblink $llx	the x-coordinate of the lower left corner
function ps add weblink $urx	the x-coordinate of the upper right corner
function ps add weblink $url	the url of the hyperlink to be opened when clicking on this link e
function ps add weblink $lly	the y-coordinate of the lower left corner
function ps add weblink $psdoc	resource identifier of the postscript file as returned by ps_new()
function bool ps add weblink	returns true on success or false on failure
function bool ps add weblink resource $psdoc float $llx float $lly float $urx float $ury string $url	adds link to a web location
function ps arc $beta	the end angle given in degrees
function ps arc $alpha	the start angle given in degrees
function ps arc $x	the x-coordinate of the circles middle point
function ps arc $radius	the radius of the circle
function ps arc $y	the y-coordinate of the circles middle point
function ps arc $psdoc	resource identifier of the postscript file as returned by ps_new()
function bool ps arc	returns true on success or false on failure
function bool ps arc resource $psdoc float $x float $y float $radius float $alpha float $beta	draws an arc counterclockwise
function ps begin page $width	the width of the page in pixel e
function ps begin page $psdoc	resource identifier of the postscript file as returned by ps_new()
function ps begin page $height	the height of the page in pixel e
function bool ps begin page	returns true on success or false on failure
function bool ps begin page resource $psdoc float $width float $height	start a new page
function ps begin template $psdoc	resource identifier of the postscript file as returned by ps_new()
function ps begin template $height	the height of the template in pixel
function ps begin template $width	the width of the template in pixel
function int ps begin template	returns true on success or false on failure
function int ps begin template resource $psdoc float $width float $height	start a new template
function ps close $psdoc	resource identifier of the postscript file as returned by ps_new()
function bool ps close	returns true on success or false on failure
function bool ps close resource $psdoc	closes a postscript document
function ps closepath stroke $psdoc	resource identifier of the postscript file as returned by ps_new()
function bool ps closepath stroke	returns true on success or false on failure
function bool ps closepath stroke resource $psdoc	closes and strokes path
function ps closepath $psdoc	resource identifier of the postscript file as returned by ps_new()
function bool ps closepath	returns true on success or false on failure
function bool ps closepath resource $psdoc	closes path
function ps continue text $text	the text to output
function ps continue text $psdoc	resource identifier of the postscript file as returned by ps_new()
function bool ps continue text	returns true on success or false on failure
function bool ps continue text resource $psdoc string $text	continue text in next line
function ps curveto $x3	x-coordinate of third control point
function ps curveto $y2	y-coordinate of second control point
function ps curveto $y1	y-coordinate of first control point
function ps curveto $y3	y-coordinate of third control point
function ps curveto $x2	x-coordinate of second control point
function ps curveto $psdoc	resource identifier of the postscript file as returned by ps_new()
function ps curveto $x1	x-coordinate of first control point
function bool ps curveto	returns true on success or false on failure
function bool ps curveto resource $psdoc float $x1 float $y1 float $x2 float $y2 float $x3 float $y3	draws a curve
function ps end page $psdoc	resource identifier of the postscript file as returned by ps_new()
function bool ps end page	returns true on success or false on failure
function bool ps end page resource $psdoc	end a page
function ps end pattern $psdoc	resource identifier of the postscript file as returned by ps_new()
function bool ps end pattern	returns true on success or false on failure
function bool ps end pattern resource $psdoc	end a pattern
function ps end template $psdoc	resource identifier of the postscript file as returned by ps_new()
function bool ps end template	returns true on success or false on failure
function bool ps end template resource $psdoc	end a template
function ps fill stroke $psdoc	resource identifier of the postscript file as returned by ps_new()
function bool ps fill stroke	returns true on success or false on failure
function bool ps fill stroke resource $psdoc	fills and strokes the current path
function ps fill $psdoc	resource identifier of the postscript file as returned by ps_new()
function bool ps fill	returns true on success or false on failure
function bool ps fill resource $psdoc	fills the current path
function ps findfont $fontname	the name of the font
function ps findfont $psdoc	resource identifier of the postscript file as returned by ps_new()
function ps findfont $encoding	ps_findfont() will try to load the file passed in the parameter encoding
function ps findfont $embed	if set to a value > 0 the font will be embedded into the document
function int ps findfont	returns the identifier of the font or zero in case of an error
function int ps findfont resource $psdoc string $fontname string $encoding bool $embed	loads a font
function ps get buffer $psdoc	resource identifier of the postscript file as returned by ps_new()
function string ps get buffer resource $psdoc	fetches the full buffer containig the generated ps data
function ps get parameter $psdoc	resource identifier of the postscript file as returned by ps_new()
function ps get parameter $modifier	an identifier needed if a parameter of a resource is requested e
function ps get parameter $name	name of the parameter
function string ps get parameter	returns the value of the parameter or false on failure
function string ps get parameter resource $psdoc string $name float $modifier	gets certain parameters
function ps get value $psdoc	resource identifier of the postscript file as returned by ps_new()
function ps get value $name	name of the value
function ps get value $modifier	the parameter modifier specifies the resource for which the value is to be retrieved
function float ps get value	returns the value of the parameter or false
function float ps get value resource $psdoc string $name float $modifier	gets certain values
function ps hyphenate $text	text should not contain any non alpha characters
function ps hyphenate $psdoc	resource identifier of the postscript file as returned by ps_new()
function array ps hyphenate	an array of integers indicating the position of possible breaks in the text or false on failure
function array ps hyphenate resource $psdoc string $text	hyphenates a word
function ps moveto $x	x-coordinate of the point to move to
function ps moveto $psdoc	resource identifier of the postscript file as returned by ps_new()
function ps moveto $y	y-coordinate of the point to move to
function bool ps moveto	returns true on success or false on failure
function bool ps moveto resource $psdoc float $x float $y	sets current point
function resource ps new	resource of postscript document or false on failure
function resource ps new	creates a new postscript document object
function ps open file $filename	the name of the postscript file
function ps open file $psdoc	resource identifier of the postscript file as returned by ps_new()
function bool ps open file	returns true on success or false on failure
function bool ps open file resource $psdoc string $filename	opens a file for output
function ps place image $scale	the scaling factor for the image
function ps place image $psdoc	resource identifier of the postscript file as returned by ps_new()
function ps place image $imageid	the resource identifier of the image as returned by ps_open_image() or ps_open_image_file()
function ps place image $x	x-coordinate of the lower left corner of the image
function ps place image $y	y-coordinate of the lower left corner of the image
function bool ps place image	returns true on success or false on failure
function bool ps place image resource $psdoc int $imageid float $x float $y float $scale	places image on the page
function ps restore $psdoc	resource identifier of the postscript file as returned by ps_new()
function bool ps restore	returns true on success or false on failure
function bool ps restore resource $psdoc	restore previously save context
function ps rotate $psdoc	resource identifier of the postscript file as returned by ps_new()
function ps rotate $rot	angle of rotation in degree
function bool ps rotate	returns true on success or false on failure
function bool ps rotate resource $psdoc float $rot	sets rotation factor
function ps save $psdoc	resource identifier of the postscript file as returned by ps_new()
function bool ps save	returns true on success or false on failure
function bool ps save resource $psdoc	save current context
function ps scale $x	scaling factor in horizontal direction
function ps scale $y	scaling factor in vertical direction
function ps scale $psdoc	resource identifier of the postscript file as returned by ps_new()
function bool ps scale	returns true on success or false on failure
function bool ps scale resource $psdoc float $x float $y	sets scaling factor
function ps set border color $blue	the blue component of the border color
function ps set border color $psdoc	resource identifier of the postscript file as returned by ps_new()
function ps set border color $red	the red component of the border color
function ps set border color $green	the green component of the border color
function bool ps set border color	returns true on success or false on failure
function bool ps set border color resource $psdoc float $red float $green float $blue	sets color of border for annotations
function ps set border dash $psdoc	resource identifier of the postscript file as returned by ps_new()
function ps set border dash $white	the length of the gap between dashes
function ps set border dash $black	the length of the dash
function bool ps set border dash	returns true on success or false on failure
function bool ps set border dash resource $psdoc float $black float $white	sets length of dashes for border of annotations
function ps set info $psdoc	resource identifier of the postscript file as returned by ps_new()
function ps set info $value	the value of the information field
function ps set info $key	the name of the information field to set
function bool ps set info	returns true on success or false on failure
function bool ps set info resource $p string $key string $val	sets information fields of document
function ps set value $value	the value of the parameter
function ps set value $name	the name can be one of the following: textrendering the way how text is shown
function ps set value $wordspacing	the distance between words relative to the width of a space
function ps set value $texty	the y coordinate for text output
function ps set value $textrendering	the way how text is shown
function ps set value $psdoc	resource identifier of the postscript file as returned by ps_new()
function ps set value $leading	the distance between lines in pixels
function ps set value $textx	the x coordinate for text output
function bool ps set value	returns true on success or false on failure
function bool ps set value resource $psdoc string $name float $value	sets certain values
function ps setdash $psdoc	resource identifier of the postscript file as returned by ps_new()
function ps setdash $on	the length of the dash
function ps setdash $off	the length of the gap between dashes
function bool ps setdash	returns true on success or false on failure
function bool ps setdash resource $psdoc float $on float $off	sets appearance of a dashed line
function ps setfont $psdoc	resource identifier of the postscript file as returned by ps_new()
function ps setfont $size	the size of the font
function ps setfont $fontid	the font identifier as returned by ps_findfont()
function bool ps setfont	returns true on success or false on failure
function bool ps setfont resource $psdoc int $fontid float $size	sets font to use for following output
function ps setgray $gray	the value must be between 0 white and 1 black
function ps setgray $psdoc	resource identifier of the postscript file as returned by ps_new()
function bool ps setgray	returns true on success or false on failure
function bool ps setgray resource $psdoc float $gray	sets gray value
function ps setlinecap $psdoc	resource identifier of the postscript file as returned by ps_new()
function ps setlinecap $type	the type of line ends
function bool ps setlinecap	returns true on success or false on failure
function bool ps setlinecap resource $psdoc int $type	sets appearance of line ends
function ps setlinewidth $psdoc	resource identifier of the postscript file as returned by ps_new()
function ps setlinewidth $width	the width of lines in points
function bool ps setlinewidth	returns true on success or false on failure
function bool ps setlinewidth resource $psdoc float $width	sets width of a line
function ps setmiterlimit $psdoc	resource identifier of the postscript file as returned by ps_new()
function ps setmiterlimit $value	the maximum ratio between the miter length and the line width
function bool ps setmiterlimit	returns true on success or false on failure
function bool ps setmiterlimit resource $psdoc float $value	sets the miter limit
function ps show $psdoc	resource identifier of the postscript file as returned by ps_new()
function ps show $text	the text to be output
function bool ps show	returns true on success or false on failure
function bool ps show resource $psdoc string $text	output text
function ps string geometry $psdoc	resource identifier of the postscript file as returned by ps_new()
function ps string geometry $size	the size of the font
function ps string geometry $text	the text for which the geometry is to be calculated
function ps string geometry $fontid	the identifier of the font to be used
function array ps string geometry	an array of the dimensions of a string
function array ps string geometry resource $psdoc string $text int $fontid float $size	gets geometry of a string
function ps stringwidth $size	the size of the font
function ps stringwidth $psdoc	resource identifier of the postscript file as returned by ps_new()
function ps stringwidth $text	the text for which the width is to be calculated
function ps stringwidth $fontid	the identifier of the font to be used
function float ps stringwidth	width of a string in points
function float ps stringwidth resource $psdoc string $text int $fontid float $size	gets width of a string
function ps stroke $psdoc	resource identifier of the postscript file as returned by ps_new()
function bool ps stroke	returns true on success or false on failure
function bool ps stroke resource $psdoc	draws the current path
function ps symbol name $ord	the parameter ord is the position of the glyph in the font encoding vector
function ps symbol name $psdoc	resource identifier of the postscript file as returned by ps_new()
function ps symbol name $fontid	the identifier of the font to be used
function string ps symbol name	the name of a glyph in the given font
function string ps symbol name resource $psdoc int $ord int $fontid	gets name of a glyph
function ps symbol width $ord	the position of the glyph in the font encoding vector
function ps symbol width $psdoc	resource identifier of the postscript file as returned by ps_new()
function ps symbol width $size	the size of the font
function ps symbol width $fontid	the identifier of the font to be used
function float ps symbol width	the width of a glyph in points
function float ps symbol width resource $psdoc int $ord int $fontid float $size	gets width of a glyph
function ps symbol $ord	the position of the glyph in the font encoding vector
function ps symbol $psdoc	resource identifier of the postscript file as returned by ps_new()
function bool ps symbol	returns true on success or false on failure
function bool ps symbol resource $psdoc int $ord	output a glyph
function ps translate $psdoc	resource identifier of the postscript file as returned by ps_new()
function ps translate $y	y-coordinate of the origin of the translated coordinate system
function ps translate $x	x-coordinate of the origin of the translated coordinate system
function bool ps translate	returns true on success or false on failure
function bool ps translate resource $psdoc float $x float $y	sets translation
function pspell config create $language	the language parameter is the language code which consists of the two letter iso 639 language code and an optional two letter iso 3166 country code after a dash or underscore
function pspell config create $spelling	the spelling parameter is the requested spelling for languages with more than one spelling such as english
function pspell config create $jargon	the jargon parameter contains extra information to distinguish two different words lists that have the same language and spelling parameters
function pspell config create $encoding	the encoding parameter is the encoding that words are expected to be in
function int pspell config create	retuns a pspell config identifier or false on error
function pspell config personal $file	the personal wordlist
function bool pspell config personal	returns true on success or false on failure
function pspell config repl $file	the file should be writable by whoever php runs as e
function bool pspell config repl	returns true on success or false on failure
function pspell config runtogether $flag	true if run-together words should be treated as legal compounds false otherwise
function bool pspell config runtogether	returns true on success or false on failure
function bool pspell config runtogether int $dictionary_link bool $flag	consider run-together words as valid compounds
function pspell config save repl $flag	true if replacement pairs should be saved false otherwise
function bool pspell config save repl	returns true on success or false on failure
function bool pspell config save repl int $dictionary_link bool $flag	determine whether to save a replacement pairs list along with the wordlist
function putenv $setting	the setting like foo=bar
function bool putenv	returns true on success or false on failure
function bool putenv string $setting	sets the value of an environment variable
function px close $pxdoc	resource identifier of the paradox database as returned by px_new()
function bool px close	returns true on success or false on failure
function bool px close resource $pxdoc	closes a paradox database
function px get schema $pxdoc	resource identifier of the paradox database as returned by px_new()
function px get schema $mode	if the optional mode is px_keytolower or px_keytoupper the keys of the returned array will be converted to lower or upper case
function array px get schema	returns the schema of a database file as an associated array
function array px get schema resource $pxdoc int $mode	returns the database schema
function px get value $pxdoc	resource identifier of the paradox database as returned by px_new()
function px get value $name	name can be one of the following
function px get value $numprimkeys	the number of primary keys
function float px get value	returns the value of the parameter or false on failure
function float px get value resource $pxdoc string $name	gets a value
function px insert record $pxdoc	resource identifier of the paradox database as returned by px_new()
function px insert record $data	associated or indexed array containing the field values as e
function int px insert record	returns false on failure or the record number in case of success
function int px insert record resource $pxdoc array $data	inserts record into paradox database
function resource px new	returns false on failure
function px numfields $pxdoc	resource identifier of the paradox database as returned by px_new()
function int px numfields	returns the number of fields in a database file
function int px numfields resource $pxdoc	returns number of fields in a database
function px numrecords $pxdoc	resource identifier of the paradox database as returned by px_new()
function int px numrecords	returns the number of records in a database file
function int px numrecords resource $pxdoc	returns number of records in a database
function px put record $pxdoc	resource identifier of the paradox database as returned by px_new()
function px put record $record	associated or indexed array containing the field values as e
function px put record $recpos	this optional parameter may be used to specify a record number greater than the current number of records in the database
function bool px put record	returns true on success or false on failure
function bool px put record resource $pxdoc array $record int $recpos	stores record into paradox database
function px retrieve record $pxdoc	resource identifier of the paradox database as returned by px_new()
function px retrieve record $mode	the optional mode can be px_keytolower or px_keytoupper in order to convert the keys into lower or upper case
function px retrieve record $num	the record number is an artificial number counting records in the order as they are stored in the database
function array px retrieve record	returns the num th record from the paradox database
function array px retrieve record resource $pxdoc int $num int $mode	returns record of paradox database
function px set value $pxdoc	resource identifier of the paradox database as returned by px_new()
function px set value $name	name can be one of the following
function px set value $numprimkeys	the number of primary keys
function bool px set value	returns true on success or false on failure
function bool px set value resource $pxdoc string $name float $value	sets a value
function px timestamp2string $value	value as stored in paradox database field of type px_field_time or px_field_timestamp
function px timestamp2string $pxdoc	resource identifier of the paradox database
function px timestamp2string $format	string format similar to the format used by date()
function string px timestamp2string	returns true on success or false on failure
function string px timestamp2string resource $pxdoc float $value string $format	converts the timestamp into a string
function px update record $pxdoc	resource identifier of the paradox database as returned by px_new()
function px update record $num	the record number is an artificial number counting records in the order as they are stored in the database
function px update record $data	associated array containing the field values as returned by px_retrieve_record()
function bool px update record	returns true on success or false on failure
function bool px update record resource $pxdoc array $data int $num	updates record in paradox database
function quoted printable decode $str	the input string
function string quoted printable decode	returns the 8-bit binary string
function string quoted printable decode string $str	convert a quoted-printable string to an 8 bit string
function quoted printable encode $str	the input string
function string quoted printable encode	returns the encoded string
function string quoted printable encode string $str	convert a 8 bit string to a quoted-printable string
function rad2deg $number	a radian value
function float rad2deg	the equivalent of number in degrees
function float rad2deg float $number	converts the radian number to the equivalent number in degrees
function bool radius close	returns true on success or false on failure
function bool radius close resource $radius_handle	frees all ressources
function radius config $file	the pathname of the configuration file is passed as the file argument to radius_config()
function bool radius config	returns true on success or false on failure
function bool radius config resource $radius_handle string $file	causes the library to read the given configuration file
function string radius demangle mppe key	returns the demangled string or false on error
function string radius demangle mppe key resource $radius_handle string $mangled	derives mppe-keys from mangled data
function string radius demangle	returns the demangled string or false on error
function string radius demangle resource $radius_handle string $mangled	demangles data
function mixed radius get attr	returns an associative array containing the attribute-type and the data or error number < = 0
function mixed radius get attr resource $radius_handle	extracts an attribute
function radius get tagged attr data $data	the tagged attribute to be decoded
function string radius get tagged attr data	returns the data from the tagged attribute or false on failure
function string radius get tagged attr data string $data	extracts the data from a tagged attribute
function array radius get vendor attr	returns an associative array containing the attribute-type vendor and the data or false on error
function array radius get vendor attr string $data	extracts a vendor specific attribute
function radius put int $options	a bitmask of the attribute options
function radius put int $value	the attribute value
function radius put int $type	the attribute type
function radius put int $radius_handle	the radius resource
function radius put int $tag	the attribute tag
function bool radius put int	returns true on success or false on failure
function bool radius put int resource $radius_handle int $type int $value int $options int $tag	attaches an integer attribute
function radius put string $options	a bitmask of the attribute options
function radius put string $value	the attribute value
function radius put string $type	the attribute type
function radius put string $radius_handle	the radius resource
function radius put string $tag	the attribute tag
function bool radius put string	returns true on success or false on failure
function bool radius put string resource $radius_handle int $type string $value int $options int $tag	attaches a string attribute
function radius put vendor addr $type	the attribute type
function radius put vendor addr $options	a bitmask of the attribute options
function radius put vendor addr $addr	an ipv4 address in string form such as 10
function radius put vendor addr $vendor	the vendor id
function radius put vendor addr $tag	the attribute tag
function radius put vendor addr $radius_handle	the radius resource
function bool radius put vendor addr	returns true on success or false on failure
function bool radius put vendor addr resource $radius_handle int $vendor int $type string $addr	attaches a vendor specific ip address attribute
function radius put vendor attr $type	the attribute type
function radius put vendor attr $value	the attribute value which will be treated as a raw binary string
function radius put vendor attr $options	a bitmask of the attribute options
function radius put vendor attr $vendor	the vendor id
function radius put vendor attr $tag	the attribute tag
function radius put vendor attr $radius_handle	the radius resource
function bool radius put vendor attr	returns true on success or false on failure
function bool radius put vendor attr resource $radius_handle int $vendor int $type string $value int $options int $tag	attaches a vendor specific binary attribute
function radius put vendor string $type	the attribute type
function radius put vendor string $options	a bitmask of the attribute options
function radius put vendor string $vendor	the vendor id
function radius put vendor string $tag	the attribute tag
function radius put vendor string $radius_handle	the radius resource
function radius put vendor string $value	the attribute value
function bool radius put vendor string	returns true on success or false on failure
function bool radius put vendor string resource $radius_handle int $vendor int $type string $value int $options int $tag	attaches a vendor specific string attribute
function string radius request authenticator	returns the request authenticator as string or false on error
function string radius request authenticator resource $radius_handle	returns the request authenticator
function int radius send request	if a valid response is received radius_send_request() returns the radius code which specifies the type of the response
function int radius send request resource $radius_handle	sends the request and waites for a reply
function string radius server secret	returns the servers shared secret as string or false on error
function string radius server secret resource $radius_handle	returns the shared secret
function string radius strerror	returns error messages as string from failed radius functions
function string radius strerror resource $radius_handle	returns an error message
function random bytes $length	the length of the random string that should be returned in bytes
function string random bytes	returns a string containing the requested number of cryptographically secure random bytes
function string random bytes int $length	generates cryptographically secure pseudo-random bytes
function random int $max	the highest value to be returned which must be less than or equal to php_int_max
function random int $min	the lowest value to be returned which must be php_int_min or higher
function int random int	returns a cryptographically secure random integer in the range min to max inclusive
function int random int int $min int $max	generates cryptographically secure pseudo-random integers
function range $step	if a step value is given it will be used as the increment between elements in the sequence
function range $start	first value of the sequence
function range $end	the sequence is ended upon reaching the end value
function array range	returns an array of elements from start to end inclusive
function rawurldecode $str	the url to be decoded
function string rawurldecode	returns the decoded url as a string
function string rawurldecode string $str	decode url-encoded strings
function rawurlencode $str	the url to be encoded
function string rawurlencode	returns a string in which all non-alphanumeric characters except -_
function string rawurlencode string $str	url-encode according to rfc 3986
function readdir $dir_handle	the directory handle resource previously opened with opendir()
function string readdir	returns the entry name on success or false on failure
function string readdir resource $dir_handle	read entry from directory handle
function readfile $filename	the filename being read
function readfile $use_include_path	you can use the optional second parameter and set it to true if you want to search for the file in the include_path too
function readfile $context	a context stream resource
function int readfile	returns the number of bytes read from the file
function int readfile string $filename bool $use_include_path resource $context	outputs a file
function readgzfile $filename	the file name
function readgzfile $use_include_path	you can set this optional parameter to 1 if you want to search for the file in the include_path too
function int readgzfile	returns the number of uncompressed bytes read from the file
function int readgzfile string $filename int $use_include_path	output a gz-file
function readline add history $line	the line to be added in the history
function bool readline add history	returns true on success or false on failure
function bool readline add history string $line	adds a line to the history
function bool readline callback handler remove	returns true if a previously installed callback handler was removed or false if one could not be found
function void readline callback read char	reads a character and informs the readline callback interface when a line is received
function bool readline clear history	returns true on success or false on failure
function bool readline clear history	clears the history
function readline completion function $function	you must supply the name of an existing function which accepts a partial command line and returns an array of possible matches
function bool readline completion function	returns true on success or false on failure
function bool readline completion function callable $function	registers a completion function
function readline info $newvalue	if provided this will be the new value of the setting
function readline info $varname	a variable name
function mixed readline info	if called with no parameters this function returns an array of values for all the setting readline uses
function mixed readline info string $varname string $newvalue	gets / sets various internal readline variables
function array readline list history	returns an array of the entire command line history
function array readline list history	lists the history
function void readline on new line	inform readline that the cursor has moved to a new line
function readline read history $filename	path to the filename containing the command history
function bool readline read history	returns true on success or false on failure
function bool readline read history string $filename	reads the history
function void readline redisplay	redraws the display
function readline write history $filename	path to the saved file
function bool readline write history	returns true on success or false on failure
function bool readline write history string $filename	writes the history
function readlink $path	the symbolic link path
function string readlink	returns the contents of the symbolic link path or false on error
function string readlink string $path	returns the target of a symbolic link
function realpath $path	the path being checked
function string realpath	returns the canonicalized absolute pathname on success
function string realpath string $path	returns canonicalized absolute pathname
function recode string $request	the desired recode request type
function recode string $string	the string to be recoded
function string recode string	returns the recoded string or false if unable to perform the recode request
function string recode string string $request string $string	recode a string according to a recode request
function rename function $original_name	the original function name
function rename function $new_name	the new name for the original_name function
function bool rename function	returns true on success or false on failure
function bool rename function string $original_name string $new_name	renames orig_name to new_name in the global function table
function rename $context	note : context support was added with php 5
function rename $newname	the new name
function rename $oldname	note : the old name
function bool rename	returns true on success or false on failure
function bool rename string $oldname string $newname resource $context	renames a file or directory
function reset $array	the input array
function mixed reset	returns the value of the first array element or false if the array is empty
function mixed reset array $array	set the internal pointer of an array to its first element
function bool restore error handler	this function always returns true
function bool restore error handler	restores the previous error handler function
function bool restore exception handler	this function always returns true
function bool restore exception handler	restores the previously defined exception handler function
function rewind $handle	the file pointer must be valid and must point to a file successfully opened by fopen()
function bool rewind	returns true on success or false on failure
function bool rewind resource $handle	rewind the position of a file pointer
function rmdir $context	note : context support was added with php 5
function rmdir $dirname	path to the directory
function bool rmdir	returns true on success or false on failure
function bool rmdir string $dirname resource $context	removes directory
function rpm close $rpmr	a file pointer resource successfully opened by rpm_open()
function bool rpm close	returns true on success or false on failure
function bool rpm close resource $rpmr	closes an rpm file
function rpm get tag $rpmr	a file pointer resource successfully opened by rpm_open()
function rpm get tag $tagnum	the tag number to retrieve from the rpm header
function mixed rpm get tag	the return value can be of various types depending on the tagnum supplied to the function
function mixed rpm get tag resource $rpmr int $tagnum	retrieves a header tag from an rpm file
function rpm is valid $filename	the filename of the rpm file you wish to check for validity
function bool rpm is valid	returns true on success or false on failure
function bool rpm is valid string $filename	tests a filename for validity as an rpm file
function rpm open $filename	the filename of the rpm file you wish to open
function resource rpm open	if the open succeeds then rpm_open() will return a file pointer resource to the newly opened file
function resource rpm open string $filename	opens an rpm file
function string rpm version	rpm_version() will return a string representing the rpmreader version currently loaded in php
function string rpm version	returns a string representing the current version of the rpmreader extension
function rrd create $options	options for rrd create - list of strings
function rrd create $filename	filename for newly created rrd file
function bool rrd create	returns true on success or false on failure
function bool rrd create string $filename array $options	creates rrd database file
function string rrd error	latest error message
function string rrd error	gets latest error message
function rrd fetch $filename	rrd database file name
function rrd fetch $options	array of options for resolution specification
function array rrd fetch	returns information about retrieved graph data
function array rrd fetch string $filename array $options	fetch the data for graph as array
function rrd last $filename	rrd database file name
function int rrd last	integer as unix timestamp of the most recent data from the rrd database
function int rrd last string $filename	gets unix timestamp of the last sample
function rrd lastupdate $file	rrd database file name
function array rrd lastupdate	array of information about last update false when error occurs
function array rrd lastupdate string $filename	gets information about last updated data
function rrd tune $filename	rrd database file name
function rrd tune $options	options with rrd database file properties which will be changed
function bool rrd tune	returns true on success false otherwise
function bool rrd tune string $filename array $options	tunes some rrd database file header options
function rrd xport $options	array of options for the export see rrd xport man page
function array rrd xport	array with information about rrd database file false when error occurs
function array rrd xport array $options	exports the information about rrd database
function rsort $sort_flags	you may modify the behavior of the sort using the optional parameter sort_flags for details see sort()
function rsort $array	the input array
function bool rsort	returns true on success or false on failure
function bool rsort array $array int $sort_flags	sort an array in reverse order
function rtrim $character_mask	you can also specify the characters you want to strip by means of the character_mask parameter
function rtrim $str	the input string
function string rtrim	returns the modified string
function string rtrim string $str string $character_mask	strip whitespace or other characters from the end of a string
function runkit lint file $filename	file containing php code to be lint checked
function bool runkit lint file	returns true on success or false on failure
function bool runkit lint file string $filename	check the php syntax of the specified file
function runkit lint $code	php code to be lint checked
function bool runkit lint	returns true on success or false on failure
function bool runkit lint string $code	check the php syntax of the specified php code
function scandir $sorting_order	by default the sorted order is alphabetical in ascending order
function scandir $directory	the directory that will be scanned
function scandir $context	for a description of the context parameter refer to the streams section of the manual
function array scandir	returns an array of filenames on success or false on failure
function array scandir string $directory int $sorting_order resource $context	list files and directories inside the specified path
function sem acquire $nowait	specifies if the process shouldnt wait for the semaphore to be acquired
function sem acquire $sem_identifier	sem_identifier is a semaphore resource obtained from sem_get()
function bool sem acquire	returns true on success or false on failure
function bool sem acquire resource $sem_identifier bool $nowait	acquire a semaphore
function sem get $max_acquire	the number of processes that can acquire the semaphore simultaneously is set to max_acquire
function sem get $auto_release	specifies if the semaphore should be automatically released on request shutdown
function sem get $perm	the semaphore permissions
function resource sem get	returns a positive semaphore identifier on success or false on error
function resource sem get int $key int $max_acquire int $perm int $auto_release	get a semaphore id
function sem release $sem_identifier	a semaphore resource handle as returned by sem_get()
function bool sem release	returns true on success or false on failure
function bool sem release resource $sem_identifier	release a semaphore
function sem remove $sem_identifier	a semaphore resource identifier as returned by sem_get()
function bool sem remove	returns true on success or false on failure
function bool sem remove resource $sem_identifier	remove a semaphore
function session cache expire $new_cache_expire	if new_cache_expire is given the current cache expire is replaced with new_cache_expire
function int session cache expire	returns the current setting of session
function int session cache expire string $new_cache_expire	return current cache expire
function array session get cookie params	returns an array with the current session cookie information the array contains the following items: lifetime - the lifetime of the cookie in seconds
function array session get cookie params	get the session cookie parameters
function session id $id	if id is specified it will replace the current session id
function string session id	session_id() returns the session id for the current session or the empty string if there is no current session no current session id exists
function string session id string $id	get and / or set the current session id
function session module name $module	if module is specified that module will be used instead
function string session module name	returns the name of the current session module
function string session module name string $module	get and / or set the current session module
function session name $name	the session name references the name of the session which is used in cookies and urls e
function string session name	returns the name of the current session
function string session name string $name	get and / or set the current session name
function void session register shutdown	session shutdown function
function session register $name	a string holding the name of a variable or an array consisting of variable names or other arrays
function bool session register	returns true on success or false on failure
function bool session register mixed $name	register one or more global variables with the current session
function void session reset	re-initialize session array with original values
function session set cookie params $domain	cookie domain for example www
function session set cookie params $httponly	if set to true then php will attempt to send the httponly flag when setting the session cookie
function session set cookie params $lifetime	lifetime of the session cookie defined in seconds
function session set cookie params $path	path on the domain where the cookie will work
function session set cookie params $secure	if true cookie will only be sent over secure connections
function void session set cookie params int $lifetime string $path string $domain bool $secure bool $httponly	set the session cookie parameters
function session start $options	if provided this is an associative array of options that will override the currently set session configuration directives
function bool session start	this function returns true if a session was successfully started otherwise false
function bool session start array $options	start new or resume existing session
function int session status	php_session_disabled if sessions are disabled
function int session status	returns the current session status
function void session write close	write session data and end session
function set error handler $errline	the fourth parameter is optional errline which contains the line number the error was raised at as an integer
function set error handler $error_handler	a callback with the following signature
function set error handler $errfile	the third parameter is optional errfile which contains the filename that the error was raised in as a string
function set error handler $error_types	can be used to mask the triggering of the error_handler function just like the error_reporting ini setting controls which errors are shown
function set error handler $errstr	the second parameter errstr contains the error message as a string
function set error handler $errcontext	the fifth parameter is optional errcontext which is an array that points to the active symbol table at the point the error occurred
function set error handler $errno	the first parameter errno contains the level of the error raised as an integer
function mixed set error handler	returns a string containing the previously defined error handler if any
function mixed set error handler callable $error_handler int $error_types	sets a user-defined error handler function
function set magic quotes runtime $new_setting	false for off true for on
function bool set magic quotes runtime	returns true on success or false on failure
function bool set magic quotes runtime bool $new_setting	sets the current active configuration setting of magic_quotes_runtime
function setlocale	( optional string or array parameters to try as locale settings until success
function setlocale $locale	if locale is null or the empty string the locale names will be set from the values of environment variables with the same names as the above categories or from lang
function string setlocale	returns the new current locale or false if the locale functionality is not implemented on your platform the specified locale does not exist or the category name is invalid
function string setlocale int $category string $locale	set locale information
function bool setrawcookie	returns true on success or false on failure
function bool setrawcookie string $name string $value int $expire string $path string $domain bool $secure bool $httponly	send a cookie without urlencoding the cookie value
function setthreadtitle $title	the title to use as the thread title
function bool setthreadtitle	returns true on success or false on failure
function bool setthreadtitle string $title	set the thread title
function settype $type	possibles values of type are: boolean or since php 4
function settype $var	the variable being converted
function bool settype	returns true on success or false on failure
function bool settype mixed $var string $type	set the type of a variable
function shell exec $cmd	the command that will be executed
function string shell exec	the output from the executed command or null if an error occurred or the command produces no output
function string shell exec string $cmd	execute command via shell and return the complete output as a string
function shm attach $key	a numeric shared memory segment id
function shm attach $memsize	the memory size
function shm attach $perm	the optional permission bits
function resource shm attach	returns a shared memory segment identifier
function resource shm attach int $key int $memsize int $perm	creates or open a shared memory segment
function shm detach $shm_identifier	a shared memory resource handle as returned by shm_attach()
function bool shm detach	shm_detach() always returns true
function bool shm detach resource $shm_identifier	disconnects from shared memory segment
function shm get var $variable_key	the variable key
function shm get var $shm_identifier	shared memory segment obtained from shm_attach()
function mixed shm get var	returns the variable with the given key
function mixed shm get var resource $shm_identifier int $variable_key	returns a variable from shared memory
function shm has var $variable_key	the variable key
function shm has var $shm_identifier	shared memory segment obtained from shm_attach()
function bool shm has var	returns true if the entry exists otherwise false
function bool shm has var resource $shm_identifier int $variable_key	check whether a specific entry exists
function shm put var $variable_key	the variable key
function shm put var $shm_identifier	a shared memory resource handle as returned by shm_attach()
function shm put var $variable	the variable
function bool shm put var	returns true on success or false on failure
function bool shm put var resource $shm_identifier int $variable_key mixed $variable	inserts or updates a variable in shared memory
function shm remove var $variable_key	the variable key
function shm remove var $shm_identifier	the shared memory identifier as returned by shm_attach()
function bool shm remove var	returns true on success or false on failure
function bool shm remove var resource $shm_identifier int $variable_key	removes a variable from shared memory
function shm remove $shm_identifier	the shared memory identifier as returned by shm_attach()
function bool shm remove	returns true on success or false on failure
function bool shm remove resource $shm_identifier	removes shared memory from unix systems
function shmop close $shmid	the shared memory block identifier created by shmop_open()
function void shmop close int $shmid	close shared memory block
function shmop open $mode	the permissions that you wish to assign to your memory segment those are the same as permission for a file
function shmop open $key	systems id for the shared memory block
function shmop open $size	the size of the shared memory block you wish to create in bytes
function int shmop open	on success shmop_open() will return an id that you can use to access the shared memory segment youve created
function int shmop open int $key string $flags int $mode int $size	create or open shared memory block
function shmop write $offset	specifies where to start writing data inside the shared memory segment
function shmop write $shmid	the shared memory block identifier created by shmop_open()
function shmop write $data	a string to write into shared memory block
function int shmop write	the size of the written data or false on failure
function int shmop write int $shmid string $data int $offset	write data into shared memory block
function similar text $first	the first string
function similar text $second	the second string
function similar text $percent	by passing a reference as third argument similar_text() will calculate the similarity in percent for you
function int similar text	returns the number of matching chars in both strings
function int similar text string $first string $second float $percent	calculate the similarity between two strings
function simplexml load file $filename	path to the xml file note : libxml 2 unescapes the uri so if you want to pass e
function simplexml load file $is_prefix	true if ns is a prefix false if its a uri; defaults to false
function simplexml load file $options	since php 5
function simplexml load file $class_name	you may use this optional parameter so that simplexml_load_file() will return an object of the specified class
function simplexml load file $ns	namespace prefix or uri
function SimpleXMLElement simplexml load file	returns an object of class simplexmlelement with properties containing the data held within the xml document or false on failure
function SimpleXMLElement simplexml load file string $filename string $class_name int $options string $ns bool $is_prefix	interprets an xml file into an object
function sin $arg	a value in radians
function float sin	the sine of arg
function float sin float $arg	sine
function sinh $arg	the argument to process
function float sinh	the hyperbolic sine of arg
function float sinh float $arg	hyperbolic sine
function bool snmp get quick print	returns true if quick_print is on false otherwise
function bool snmp get quick print	fetches the current value of the ucd library's quick_print setting
function snmp set enum print $enum_print	as the value is interpreted as boolean by the net-snmp library it can only be 0 or 1
function bool snmp set enum print int $enum_print	return all values that are enums with their enum value instead of the raw integer
function snmp2 get $object_id	the snmp object
function snmp2 get $retries	the number of times to retry if timeouts occur
function snmp2 get $community	the read community
function snmp2 get $timeout	the number of microseconds until the first timeout
function snmp2 get $host	the snmp agent
function string snmp2 get	returns snmp object value on success or false on error
function string snmp2 get string $host string $community string $object_id string $timeout string $retries	fetch an snmp object
function snmp2 getnext $timeout	the number of microseconds until the first timeout
function snmp2 getnext $retries	the number of times to retry if timeouts occur
function snmp2 getnext $host	the hostname of the snmp agent server
function snmp2 getnext $object_id	the snmp object id which precedes the wanted one
function snmp2 getnext $community	the read community
function string snmp2 getnext	returns snmp object value on success or false on error
function string snmp2 getnext string $host string $community string $object_id string $timeout string $retries	fetch the snmp object which follows the given object id
function snmp2 real walk $timeout	the number of microseconds until the first timeout
function snmp2 real walk $retries	the number of times to retry if timeouts occur
function snmp2 real walk $host	the hostname of the snmp agent server
function snmp2 real walk $object_id	the snmp object id which precedes the wanted one
function snmp2 real walk $community	the read community
function array snmp2 real walk	returns an associative array of the snmp object ids and their values on success or false on error
function array snmp2 real walk string $host string $community string $object_id string $timeout string $retries	return all objects including their respective object id within the specified one
function snmp2 set $type	the mib defines the type of each object id
function snmp2 set $retries	the number of times to retry if timeouts occur
function snmp2 set $host	the hostname of the snmp agent server
function snmp2 set $object_id	the snmp object id
function snmp2 set $community	the write community
function snmp2 set $timeout	the number of microseconds until the first timeout
function snmp2 set $value	the new value
function bool snmp2 set	returns true on success or false on failure
function bool snmp2 set string $host string $community string $object_id string $type string $value string $timeout string $retries	set the value of an snmp object
function snmp2 walk $retries	the number of times to retry if timeouts occur
function snmp2 walk $timeout	the number of microseconds until the first timeout
function snmp2 walk $object_id	if null object_id is taken as the root of the snmp objects tree and all objects under that tree are returned as an array
function snmp2 walk $host	the snmp agent server
function snmp2 walk $community	the read community
function array snmp2 walk	returns an array of snmp object values starting from the object_id as root or false on error
function array snmp2 walk string $host string $community string $object_id string $timeout string $retries	fetch all the snmp objects from an agent
function snmpget $object_id	the snmp object
function snmpget $hostname	the snmp agent
function snmpget $timeout	the number of microseconds until the first timeout
function snmpget $retries	the number of times to retry if timeouts occur
function snmpget $community	the read community
function string snmpget	returns snmp object value on success or false on error
function string snmpget string $hostname string $community string $object_id int $timeout int $retries	fetch an snmp object
function snmprealwalk $timeout	the number of microseconds until the first timeout
function snmprealwalk $retries	the number of times to retry if timeouts occur
function snmprealwalk $host	the hostname of the snmp agent server
function snmprealwalk $object_id	the snmp object id which precedes the wanted one
function snmprealwalk $community	the read community
function array snmprealwalk	returns an associative array of the snmp object ids and their values on success or false on error
function array snmprealwalk string $host string $community string $object_id int $timeout int $retries	return all objects including their respective object id within the specified one
function snmpset $type	the mib defines the type of each object id
function snmpset $retries	the number of times to retry if timeouts occur
function snmpset $host	the hostname of the snmp agent server
function snmpset $object_id	the snmp object id
function snmpset $community	the write community
function snmpset $timeout	the number of microseconds until the first timeout
function snmpset $value	the new value
function bool snmpset	returns true on success or false on failure
function bool snmpset string $host string $community string $object_id string $type mixed $value int $timeout int $retries	set the value of an snmp object
function snmpwalk $timeout	the number of microseconds until the first timeout
function snmpwalk $retries	the number of times to retry if timeouts occur
function snmpwalk $hostname	the snmp agent server
function snmpwalk $object_id	if null object_id is taken as the root of the snmp objects tree and all objects under that tree are returned as an array
function snmpwalk $community	the read community
function array snmpwalk	returns an array of snmp object values starting from the object_id as root or false on error
function array snmpwalk string $hostname string $community string $object_id int $timeout int $retries	fetch all the snmp objects from an agent
function snmpwalkoid $hostname	the snmp agent
function snmpwalkoid $timeout	the number of microseconds until the first timeout
function snmpwalkoid $retries	the number of times to retry if timeouts occur
function snmpwalkoid $object_id	if null object_id is taken as the root of the snmp objects tree and all objects under that tree are returned as an array
function snmpwalkoid $community	the read community
function array snmpwalkoid	returns an associative array with object ids and their respective object value starting from the object_id as root or false on error
function array snmpwalkoid string $hostname string $community string $object_id int $timeout int $retries	query for a tree of information about a network entity
function socket accept $socket	a valid socket resource created with socket_create()
function resource socket accept	returns a new socket resource on success or false on error
function resource socket accept resource $socket	accepts a connection on a socket
function socket bind $port(Optional)	the port parameter is only used when binding an af_inet socket and designates the port on which to listen for connections
function socket bind $socket	a valid socket resource created with socket_create()
function socket bind $address	if the socket is of the af_inet family the address is an ip in dotted-quad notation e
function bool socket bind	returns true on success or false on failure
function bool socket bind resource $socket string $address int $port	binds a name to a socket
function socket clear error $socket	a valid socket resource created with socket_create()
function void socket clear error resource $socket	clears the error on the socket or the last error code
function socket close $socket	a valid socket resource created with socket_create() or socket_accept()
function void socket close resource $socket	closes a socket resource
function int socket cmsg space int $level int $type	calculate message buffer size
function socket connect $port	the port parameter is only used and is mandatory when connecting to an af_inet or an af_inet6 socket and designates the port on the remote host to which a connection should be made
function socket connect $address	the address parameter is either an ipv4 address in dotted-quad notation e
function bool socket connect	returns true on success or false on failure
function bool socket connect resource $socket string $address int $port	initiates a connection on a socket
function socket create listen $port	the port on which to listen on all interfaces
function socket create listen $backlog	the backlog parameter defines the maximum length the queue of pending connections may grow to
function resource socket create listen	socket_create_listen() returns a new socket resource on success or false on error
function resource socket create listen int $port int $backlog	opens a socket on port to accept connections
function socket create pair $protocol	the protocol parameter sets the specific protocol within the specified domain to be used when communicating on the returned socket
function socket create pair $domain	the domain parameter specifies the protocol family to be used by the socket
function socket create pair $fd	reference to an array in which the two socket resources will be inserted
function socket create pair $type	the type parameter selects the type of communication to be used by the socket
function bool socket create pair	returns true on success or false on failure
function bool socket create pair int $domain int $type int $protocol array $fd	creates a pair of indistinguishable sockets and stores them in an array
function socket create $protocol	the protocol parameter sets the specific protocol within the specified domain to be used when communicating on the returned socket
function socket create $domain	the domain parameter specifies the protocol family to be used by the socket
function socket create $type	the type parameter selects the type of communication to be used by the socket
function resource socket create	socket_create() returns a socket resource on success or false on error
function resource socket create int $domain int $type int $protocol	create a socket endpoint for communication
function socket get option $socket	a valid socket resource created with socket_create() or socket_accept()
function socket get option $level	the level parameter specifies the protocol level at which the option resides
function socket get option $optname	available socket options option description type so_debug reports whether debugging information is being recorded
function mixed socket get option	returns the value of the given option or false on errors
function mixed socket get option resource $socket int $level int $optname	gets socket options for the socket
function socket import stream $stream	the stream resource to import
function resource socket import stream	returns false or null on failure
function resource socket import stream resource $stream	import a stream
function socket last error $socket	a valid socket resource created with socket_create()
function int socket last error	this function returns a socket error code
function int socket last error resource $socket	returns the last error on the socket
function socket listen $socket	a valid socket resource created with socket_create()
function socket listen $backlog	a maximum of backlog incoming connections will be queued for processing
function bool socket listen	returns true on success or false on failure
function bool socket listen resource $socket int $backlog	listens for a connection on a socket
function socket read $socket	a valid socket resource created with socket_create() or socket_accept()
function socket read $type	optional type parameter is a named constant: php_binary_read default - use the system recv() function
function socket read $length	the maximum number of bytes read is specified by the length parameter
function string socket read	socket_read() returns the data as a string on success or false on error including if the remote host has closed the connection
function string socket read resource $socket int $length int $type	reads a maximum of length bytes from a socket
function socket recv $socket	the socket must be a socket resource previously created by socket_create()
function socket recv $flags	the value of flags can be any combination of the following flags joined with the binary or | operator
function socket recv $len	up to len bytes will be fetched from remote host
function socket recv $buf	the data received will be fetched to the variable specified with buf
function int socket recv	socket_recv() returns the number of bytes received or false if there was an error
function int socket recv resource $socket string $buf int $len int $flags	receives data from a connected socket
function socket sendto $buf	the sent data will be taken from buffer buf
function socket sendto $len	len bytes from buf will be sent
function socket sendto $addr	ip address of the remote host
function socket sendto $port	port is the remote port number at which the data will be sent
function socket sendto $flags	the value of flags can be any combination of the following flags joined with the binary or | operator
function socket sendto $socket	a valid socket resource created using socket_create()
function int socket sendto	socket_sendto() returns the number of bytes sent to the remote host or false if an error occurred
function int socket sendto resource $socket string $buf int $len int $flags string $addr int $port	sends a message to a socket whether it is connected or not
function socket set block $socket	a valid socket resource created with socket_create() or socket_accept()
function bool socket set block	returns true on success or false on failure
function bool socket set block resource $socket	sets blocking mode on a socket resource
function socket set option $optval	the option value
function socket set option $socket	a valid socket resource created with socket_create() or socket_accept()
function socket set option $level	the level parameter specifies the protocol level at which the option resides
function socket set option $optname	the available socket options are the same as those for the socket_get_option() function
function bool socket set option	returns true on success or false on failure
function bool socket set option resource $socket int $level int $optname mixed $optval	sets socket options for the socket
function socket shutdown $socket	a valid socket resource created with socket_create()
function socket shutdown $how	the value of how can be one of the following: possible values for how 0 shutdown socket reading 1 shutdown socket writing 2 shutdown socket reading and writing
function bool socket shutdown	returns true on success or false on failure
function bool socket shutdown resource $socket int $how	shuts down a socket for receiving sending or both
function socket strerror $errno	a valid socket error number likely produced by socket_last_error()
function string socket strerror	returns the error message associated with the errno parameter
function string socket strerror int $errno	return a string describing a socket error
function socket write $buffer	the buffer to be written
function socket write $length	the optional parameter length can specify an alternate length of bytes written to the socket
function int socket write	returns the number of bytes successfully written to the socket or false on failure
function int socket write resource $socket string $buffer int $length	write to a socket
function soundex $str	the input string
function string soundex	returns the soundex key as a string
function string soundex string $str	calculate the soundex key of a string
function spl autoload extensions $file_extensions	when calling without an argument it simply returns the current list of extensions each separated by comma
function string spl autoload extensions	a comma delimited list of default file extensions for spl_autoload()
function string spl autoload extensions string $file_extensions	register and return default file extensions for spl_autoload
function array spl autoload functions	an array of all registered __autoload functions
function array spl autoload functions	return all registered __autoload() functions
function spl autoload register $prepend	if true spl_autoload_register() will prepend the autoloader on the autoload queue instead of appending it
function spl autoload register $throw	this parameter specifies whether spl_autoload_register() should throw exceptions when the autoload_function cannot be registered
function spl autoload register $autoload_function	the autoload function being registered
function bool spl autoload register	returns true on success or false on failure
function bool spl autoload register callable $autoload_function bool $throw bool $prepend	register given function as __autoload() implementation
function spl autoload $class_name	the lowercased name of the class and namespace being instantiated
function spl autoload $file_extensions	by default it checks all include paths to contain filenames built up by the lowercase class name appended by the filename extensions
function void spl autoload string $class_name string $file_extensions	default implementation for __autoload()
function array spl classes	returns an array containing the currently available spl classes
function array spl classes	return available spl classes
function split $limit	if limit is set the returned array will contain a maximum of limit elements with the last element containing the whole rest of string
function split $string	the input string
function split $pattern	case sensitive regular expression
function array split	returns an array of strings each of which is a substring of string formed by splitting it on boundaries formed by the case-sensitive regular expression pattern
function array split string $pattern string $string int $limit	split string into array by regular expression
function spliti $pattern	case insensitive regular expression
function spliti $limit	if limit is set the returned array will contain a maximum of limit elements with the last element containing the whole rest of string
function spliti $string	the input string
function array spliti	returns an array of strings each of which is a substring of string formed by splitting it on boundaries formed by the case insensitive regular expression pattern
function array spliti string $pattern string $string int $limit	split string into array by regular expression case insensitive
function sprintf $format	the format string is composed of zero or more directives: ordinary characters excluding % that are copied directly to the result and conversion specifications each of which results in fetching its own parameter
function string sprintf	returns a string produced according to the formatting string format
function string sprintf string $format mixed $args	return a formatted string
function sqlite close $dbhandle	the sqlite database resource; returned from sqlite_open() when used procedurally
function void sqlite close resource $dbhandle	closes an open sqlite database
function sqlite error string $error_code	the error code being used which might be passed in from sqlite_last_error()
function string sqlite error string	returns a human readable description of the error_code as a string
function string sqlite error string int $error_code	returns the textual description of an error code
function sqlite escape string $item	the string being quoted
function string sqlite escape string	returns an escaped string for use in an sqlite sql statement
function string sqlite escape string string $item	escapes a string for use as a query parameter
function sqlite factory $mode	the mode of the file
function sqlite factory $filename	the filename of the sqlite database
function sqlite factory $error_message	passed by reference and is set to hold a descriptive error message explaining why the database could not be opened if there was an error
function SQLiteDatabase sqlite factory	returns an sqlitedatabase object on success null on error
function SQLiteDatabase sqlite factory string $filename int $mode string $error_message	opens an sqlite database and returns an sqlitedatabase object
function sqlite has more $result	the sqlite result resource
function bool sqlite has more	returns true if there are more rows available from the result handle or false otherwise
function bool sqlite has more resource $result	finds whether or not more rows are available
function string sqlite libencoding	returns the library encoding
function string sqlite libencoding	returns the encoding of the linked sqlite library
function string sqlite libversion	returns the library version as a string
function sqlite open $mode	the mode of the file
function sqlite open $filename	the filename of the sqlite database
function sqlite open $error_message	passed by reference and is set to hold a descriptive error message explaining why the database could not be opened if there was an error
function resource sqlite open	returns a resource database handle on success false on error
function resource sqlite open string $filename int $mode string $error_message	opens an sqlite database and create the database if it does not exist
function sqlite udf encode binary $data	the string being encoded
function string sqlite udf encode binary	the encoded string
function string sqlite udf encode binary string $data	encode binary data before returning it from an udf
function sqlsrv begin transaction $conn	the connection resource returned by a call to sqlsrv_connect()
function bool sqlsrv begin transaction	returns true on success or false on failure
function bool sqlsrv begin transaction resource $conn	begins a database transaction
function sqlsrv cancel $stmt	the statement resource to be cancelled
function bool sqlsrv cancel	returns true on success or false on failure
function sqlsrv client info $conn	the connection about which information is returned
function array sqlsrv client info	returns an associative array with keys described in the table below
function sqlsrv close $conn	the connection to be closed
function bool sqlsrv close	returns true on success or false on failure
function sqlsrv commit $conn	the connection on which the transaction is to be committed
function bool sqlsrv commit	returns true on success or false on failure
function bool sqlsrv commit resource $conn	commits a transaction that was begun with sqlsrv_begin_transaction
function sqlsrv connect $serverName	the name of the server to which a connection is established
function sqlsrv connect $connectionInfo	an associative array that specifies options for connecting to the server
function resource sqlsrv connect	a connection resource
function sqlsrv errors $errorsOrWarnings	determines whether error information warning information or both are returned
function mixed sqlsrv errors	if errors and / or warnings occurred on the last sqlsrv operation an array of arrays containing error information is returned
function sqlsrv execute $stmt	a statement resource returned by sqlsrv_prepare()
function bool sqlsrv execute	returns true on success or false on failure
function bool sqlsrv execute resource $stmt	executes a statement prepared with sqlsrv_prepare
function sqlsrv fetch object $offset	specifies the row to be accessed if the row parameter is set to sqlsrv_scroll_absolute or sqlsrv_scroll_relative
function sqlsrv fetch object $stmt	a statement resource created by sqlsrv_query() or sqlsrv_execute()
function sqlsrv fetch object $ctorParams	values passed to the constructor of the specified class
function sqlsrv fetch object $className	the name of the class to instantiate
function sqlsrv fetch object $row	the row to be accessed
function mixed sqlsrv fetch object	returns an object on success null if there are no more rows to return and false if an error occurs or if the specified class does not exist
function mixed sqlsrv fetch object resource $stmt string $className array $ctorParams int $row int $offset	retrieves the next row of data in a result set as an object
function sqlsrv fetch $stmt	a statement resource created by executing sqlsrv_query() or sqlsrv_execute()
function sqlsrv fetch $offset	specifies the row to be accessed if the row parameter is set to sqlsrv_scroll_absolute or sqlsrv_scroll_relative
function sqlsrv fetch $row	the row to be accessed
function mixed sqlsrv fetch	returns true if the next row of a result set was successfully retrieved false if an error occurs and null if there are no more rows in the result set
function sqlsrv field metadata $stmt	the statment resource for which metadata is returned
function mixed sqlsrv field metadata	returns an array of arrays is returned on success
function mixed sqlsrv field metadata resource $stmt	retrieves metadata for the fields of a statement prepared by sqlsrv_prepare or sqlsrv_query
function sqlsrv free stmt $stmt	the statment for which resources are freed
function bool sqlsrv free stmt	returns true on success or false on failure
function sqlsrv get config $setting	the name of the setting for which the value is returned
function mixed sqlsrv get config	returns the value of the specified setting
function sqlsrv has rows $stmt	a statement resource returned by sqlsrv_query() or sqlsrv_execute()
function bool sqlsrv has rows	returns true if the specified statement has rows and false if the statement does not have rows or if an error occurred
function sqlsrv num fields $stmt	the statment for which the number of fields is returned
function mixed sqlsrv num fields	returns the number of fields on success
function sqlsrv num rows $stmt	the statement for which the row count is returned
function mixed sqlsrv num rows	returns the number of rows retrieved on success and false if an error occurred
function sqlsrv prepare $conn	a connection resource returned by sqlsrv_connect()
function sqlsrv prepare $options	an array specifing query property options
function sqlsrv prepare $params	an array specifying parameter information when executing a parameterized query
function sqlsrv prepare $sql	the string that defines the query to be prepared and executed
function mixed sqlsrv prepare	returns a statement resource on success and false if an error occurred
function sqlsrv rollback $conn	the connection resource returned by a call to sqlsrv_connect()
function bool sqlsrv rollback	returns true on success or false on failure
function bool sqlsrv rollback resource $conn	rolls back a transaction that was begun with sqlsrv_begin_transaction
function sqrt $arg	the argument to process
function float sqrt	the square root of arg or the special value nan for negative numbers
function float sqrt float $arg	square root
function ssdeep fuzzy compare $signature1	the first fuzzy hash signature string
function ssdeep fuzzy compare $signature2	the second fuzzy hash signature string
function int ssdeep fuzzy compare	returns an integer from 0 to 100 on success false otherwise
function int ssdeep fuzzy compare string $signature1 string $signature2	calculates the match score between two fuzzy hash signatures
function ssdeep fuzzy hash filename $file_name	the filename of the file to hash
function string ssdeep fuzzy hash filename	returns a string on success false otherwise
function string ssdeep fuzzy hash filename string $file_name	create a fuzzy hash from a file
function ssdeep fuzzy hash $to_hash	the input string
function string ssdeep fuzzy hash	returns a string on success false otherwise
function string ssdeep fuzzy hash string $to_hash	create a fuzzy hash from a string
function ssh2 auth agent $session	an ssh connection link identifier obtained from a call to ssh2_connect()
function ssh2 auth agent $username	remote user name
function bool ssh2 auth agent	returns true on success or false on failure
function ssh2 auth none $session	an ssh connection link identifier obtained from a call to ssh2_connect()
function ssh2 auth none $username	remote user name
function mixed ssh2 auth none	returns true if the server does accept none as an authentication method or an array of accepted authentication methods on failure
function mixed ssh2 auth none resource $session string $username	authenticate as none
function ssh2 auth password $password	password for username
function ssh2 auth password $session	an ssh connection link identifier obtained from a call to ssh2_connect()
function ssh2 auth password $username	remote user name
function bool ssh2 auth password	returns true on success or false on failure
function ssh2 fingerprint $session	an ssh connection link identifier obtained from a call to ssh2_connect()
function ssh2 fingerprint $flags	flags may be either of ssh2_fingerprint_md5 or ssh2_fingerprint_sha1 logically ored with ssh2_fingerprint_hex or ssh2_fingerprint_raw
function string ssh2 fingerprint	returns the hostkey hash as a string
function string ssh2 fingerprint resource $session int $flags	retrieve fingerprint of remote server
function ssh2 methods negotiated $session	an ssh connection link identifier obtained from a call to ssh2_connect()
function array ssh2 methods negotiated resource $session	return list of negotiated methods
function ssh2 publickey list $pkey	publickey subsystem resource
function array ssh2 publickey list	returns a numerically indexed array of keys each of which is an associative array containing: name blob and attrs elements
function ssh2 scp recv $remote_file	path to the remote file
function ssh2 scp recv $session	an ssh connection link identifier obtained from a call to ssh2_connect()
function ssh2 scp recv $local_file	path to the local file
function bool ssh2 scp recv	returns true on success or false on failure
function bool ssh2 scp recv resource $session string $remote_file string $local_file	request a file via scp
function ssh2 sftp lstat $path	path to the remote symbolic link
function array ssh2 sftp lstat	see the documentation for stat() for details on the values which may be returned
function array ssh2 sftp lstat resource $sftp string $path	stat a symbolic link
function ssh2 sftp mkdir $mode	permissions on the new directory
function ssh2 sftp mkdir $sftp	an ssh2 sftp resource opened by ssh2_sftp()
function ssh2 sftp mkdir $dirname	path of the new directory
function ssh2 sftp mkdir $recursive	if recursive is true any parent directories required for dirname will be automatically created as well
function bool ssh2 sftp mkdir	returns true on success or false on failure
function bool ssh2 sftp mkdir resource $sftp string $dirname int $mode bool $recursive	create a directory
function ssh2 sftp readlink $sftp	an ssh2 sftp resource opened by ssh2_sftp()
function ssh2 sftp readlink $link	path of the symbolic link
function string ssh2 sftp readlink	returns the target of the symbolic link
function string ssh2 sftp readlink resource $sftp string $link	return the target of a symbolic link
function ssh2 sftp realpath $sftp	an ssh2 sftp resource opened by ssh2_sftp()
function string ssh2 sftp realpath	returns the real path as a string
function string ssh2 sftp realpath resource $sftp string $filename	resolve the realpath of a provided path string
function ssh2 sftp rename $to	the new file name that replaces from
function ssh2 sftp rename $sftp	an ssh2 sftp resource opened by ssh2_sftp()
function ssh2 sftp rename $from	the current file that is being renamed
function bool ssh2 sftp rename	returns true on success or false on failure
function bool ssh2 sftp rename resource $sftp string $from string $to	rename a remote file
function ssh2 sftp rmdir $sftp	an ssh2 sftp resource opened by ssh2_sftp()
function bool ssh2 sftp rmdir	returns true on success or false on failure
function bool ssh2 sftp rmdir resource $sftp string $dirname	remove a directory
function ssh2 sftp unlink $sftp	an ssh2 sftp resource opened by ssh2_sftp()
function bool ssh2 sftp unlink	returns true on success or false on failure
function bool ssh2 sftp unlink resource $sftp string $filename	delete a file
function ssh2 sftp $session	an ssh connection link identifier obtained from a call to ssh2_connect()
function resource ssh2 sftp	this method returns an ssh2 sftp resource for use with all other ssh2_sftp_*() methods and the ssh2
function resource ssh2 sftp resource $session	initialize sftp subsystem
function ssh2 shell $term_type	term_type should correspond to one of the entries in the target systems / etc / termcap file
function ssh2 shell $env	env may be passed as an associative array of name / value pairs to set in the target environment
function ssh2 shell $width	width of the virtual terminal
function ssh2 shell $width_height_type	width_height_type should be one of ssh2_term_unit_chars or ssh2_term_unit_pixels
function ssh2 shell $session	an ssh connection link identifier obtained from a call to ssh2_connect()
function ssh2 shell $height	height of the virtual terminal
function resource ssh2 shell resource $session string $term_type array $env int $width int $height int $width_height_type	request an interactive shell
function ssh2 tunnel $session	an ssh connection link identifier obtained from a call to ssh2_connect()
function resource ssh2 tunnel resource $session string $host int $port	open a tunnel through a remote server
function stat $filename	path to the file
function array stat string $filename	gives information about a file
function stats cdf beta $which	integer indicating which of the next four argument values is to be calculated from the others
function float stats cdf beta	status -- 0 if calculation completed correctly -i if input parameter number i is out of range 1 if answer appears to be lower than lowest search bound 2 if answer appears to be higher than greatest search bound 3 if p + q
function float stats cdf beta float $par1 float $par2 float $par3 int $which	cdf function for beta distribution
function float stats rand gen f float $dfn float $dfd	generates a random deviate
function stats rand gen gamma $r	shape parameter of gamma distribution r > 0
function stats rand gen gamma $a	location parameter of gamma distribution a > 0
function float stats rand gen gamma float $a float $r	generates random deviates from a gamma distribution
function string stomp connect error	a string that describes the error or null if no error occurred
function str getcsv $input	the string to parse
function str getcsv $enclosure	set the field enclosure character one character only
function str getcsv $delimiter	set the field delimiter one character only
function str getcsv $escape	set the escape character one character only
function array str getcsv	returns an indexed array containing the fields read
function array str getcsv string $input string $delimiter string $enclosure string $escape	parse a csv string into an array
function str ireplace $count	if passed this will be set to the number of replacements performed
function str ireplace $subject	the string or array being searched and replaced on otherwise known as the haystack
function str ireplace $search	the value being searched for otherwise known as the needle
function str ireplace $replace	the replacement value that replaces found search values
function mixed str ireplace	returns a string or an array of replacements
function mixed str ireplace mixed $search mixed $replace mixed $subject int $count	case-insensitive version of str_replace
function str pad $input	the input string
function str pad $pad_string	note : the pad_string may be truncated if the required number of padding characters cant be evenly divided by the pad_string s length
function str pad $pad_type	optional argument pad_type can be str_pad_right str_pad_left or str_pad_both
function str pad $pad_length	if the value of pad_length is negative less than or equal to the length of the input string no padding takes place and input will be returned
function string str pad	returns the padded string
function string str pad string $input int $pad_length string $pad_string int $pad_type	pad a string to a certain length with another string
function str replace $count	if passed this will be set to the number of replacements performed
function str replace $subject	the string or array being searched and replaced on otherwise known as the haystack
function str replace $search	the value being searched for otherwise known as the needle
function str replace $replace	the replacement value that replaces found search values
function mixed str replace	this function returns a string or an array with the replaced values
function mixed str replace mixed $search mixed $replace mixed $subject int $count	replace all occurrences of the search string with the replacement string
function str rot13 $str	the input string
function string str rot13	returns the rot13 version of the given string
function string str rot13 string $str	perform the rot13 transform on a string
function str split $split_length	maximum length of the chunk
function str split $string	the input string
function array str split	if the optional split_length parameter is specified the returned array will be broken down into chunks with each being split_length in length otherwise each chunk will be one character in length
function array str split string $string int $split_length	convert a string to an array
function str word count $string	the string
function str word count $charlist	a list of additional characters which will be considered as word
function str word count $format	specify the return value of this function
function mixed str word count	returns an array or an integer depending on the format chosen
function mixed str word count string $string int $format string $charlist	return information about words used in a string
function strcoll $str1	the first string
function strcoll $str2	the second string
function int strcoll	returns < 0 if str1 is less than str2 ; > 0 if str1 is greater than str2 and 0 if they are equal
function int strcoll string $str1 string $str2	locale based string comparison
function strcspn $length	the length of the segment from subject to examine
function strcspn $subject	the string to examine
function strcspn $start	the position in subject to start searching
function strcspn $mask	the string containing every disallowed character
function int strcspn	returns the length of the initial segment of subject which consists entirely of characters not in mask
function int strcspn string $subject string $mask int $start int $length	find length of initial segment not matching mask
function stream bucket prepend $bucket	a bucket object
function stream bucket prepend $brigade	brigade is a resource pointing to a bucket brigade which contains one or more bucket objects
function void stream bucket prepend resource $brigade object $bucket	prepend bucket to brigade
function stream context create $params	must be an associative array in the format $arr parameter = $value
function stream context create $options	must be an associative array of associative arrays in the format $arr wrapper option = $value
function resource stream context create	a stream context resource
function resource stream context create array $options array $params	creates a stream context
function stream context get params $stream_or_context	a stream resource or a context resource
function array stream context get params	returns an associate array containing all context options and parameters
function array stream context get params resource $stream_or_context	retrieves parameters from a context
function stream context set params $stream_or_context	the stream or context to apply the parameters too
function stream context set params $params	an array of parameters to set
function bool stream context set params	returns true on success or false on failure
function bool stream context set params resource $stream_or_context array $params	set parameters for a stream / wrapper / context
function stream filter append $params	this filter will be added with the specified params to the end of the list and will therefore be called last during stream operations
function stream filter append $filtername	the filter name
function stream filter append $stream	the target stream
function stream filter append $read_write	by default stream_filter_append() will attach the filter to the read filter chain if the file was opened for reading i
function resource stream filter append	returns a resource on success or false on failure
function resource stream filter append resource $stream string $filtername int $read_write mixed $params	attach a filter to a stream
function stream filter register $classname	to implement a filter you need to define a class as an extension of php_user_filter with a number of member functions
function stream filter register $filtername	the filter name to be registered
function bool stream filter register	returns true on success or false on failure
function bool stream filter register string $filtername string $classname	register a user defined stream filter
function stream get contents $maxlength(integer)	the maximum bytes to read
function stream get contents $handle(resource)	a stream resource e
function stream get contents $offset(integer)	seek to the specified offset before reading
function string stream get contents	returns a string or false on failure
function string stream get contents resource $handle int $maxlength int $offset	reads remainder of a stream into a string
function stream get meta data $stream	the stream can be any stream created by fopen() fsockopen() and pfsockopen()
function array stream get meta data	the result array contains the following items:
function array stream get meta data resource $stream	retrieves header / meta data from streams / file pointers
function array stream get wrappers	returns an indexed array containing the name of all stream wrappers available on the running system
function array stream get wrappers	retrieve list of registered streams
function stream notification callback $message_code	passed if a descriptive message code is available for the event
function stream notification callback $bytes_transferred	if applicable the bytes_transferred will be populated
function stream notification callback $notification_code	one of the stream_notify_* notification constants
function stream notification callback $bytes_max	if applicable the bytes_max will be populated
function stream notification callback $message	passed if a descriptive message is available for the event
function stream notification callback $severity	one of the stream_notify_severity_* notification constants
function void stream notification callback int $notification_code int $severity string $message int $message_code int $bytes_transferred int $bytes_max	a callback function for the notification context parameter
function stream resolve include path $filename	the filename to resolve
function string stream resolve include path	returns a string containing the resolved absolute filename or false on failure
function string stream resolve include path string $filename	resolve filename against the include path
function stream select $tv_usec	see tv_sec description
function stream select $tv_sec	the tv_sec and tv_usec together form the timeout parameter tv_sec specifies the number of seconds while tv_usec the number of microseconds
function stream select $read	the streams listed in the read array will be watched to see if characters become available for reading more precisely to see if a read will not block - in particular a stream resource is also ready on end-of-file in which case an fread() will return a zero length string
function stream select $except	the streams listed in the except array will be watched for high priority exceptional out-of-band data arriving
function stream select $write	the streams listed in the write array will be watched to see if a write will not block
function int stream select	on success stream_select() returns the number of stream resources contained in the modified arrays which may be zero if the timeout expires before anything interesting happens
function int stream select array $read array $write array $except int $tv_sec int $tv_usec	runs the equivalent of the select() system call on the given arrays of streams with a timeout specified by tv_sec and tv_usec
function stream set blocking $stream	the stream
function stream set blocking $mode	if mode is false the given stream will be switched to non-blocking mode and if true it will be switched to blocking mode
function bool stream set blocking	returns true on success or false on failure
function bool stream set blocking resource $stream bool $mode	set blocking / non-blocking mode on a stream
function stream set read buffer $buffer	the number of bytes to buffer
function stream set read buffer $stream	the file pointer
function int stream set read buffer	returns 0 on success or another value if the request cannot be honored
function int stream set read buffer resource $stream int $buffer	set read file buffering on the given stream
function stream set timeout $seconds	the seconds part of the timeout to be set
function stream set timeout $microseconds	the microseconds part of the timeout to be set
function stream set timeout $stream	the target stream
function bool stream set timeout	returns true on success or false on failure
function bool stream set timeout resource $stream int $seconds int $microseconds	set timeout period on a stream
function stream set write buffer $buffer	the number of bytes to buffer
function stream set write buffer $stream	the file pointer
function int stream set write buffer	returns 0 on success or another value if the request cannot be honored
function int stream set write buffer resource $stream int $buffer	sets write file buffering on the given stream
function stream socket client $errno	will be set to the system level error number if connection fails
function stream socket client $remote_socket	address to the socket to connect to
function stream socket client $timeout	number of seconds until the connect() system call should timeout
function stream socket client $errstr	will be set to the system level error message if the connection fails
function stream socket client $context	a valid context resource created with stream_context_create()
function stream socket client $flags	bitmask field which may be set to any combination of connection flags
function resource stream socket client	on success a stream resource is returned which may be used together with the other file functions such as fgets() fgetss() fwrite() fclose() and feof() false on failure
function resource stream socket client string $remote_socket int $errno string $errstr float $timeout int $flags resource $context	open internet or unix domain socket connection
function stream socket get name $want_peer	if set to true the remote socket name will be returned if set to false the local socket name will be returned
function stream socket get name $handle	the socket to get the name of
function string stream socket get name	the name of the socket
function string stream socket get name resource $handle bool $want_peer	retrieve the name of the local or remote sockets
function stream socket pair $domain	the protocol family to be used: stream_pf_inet stream_pf_inet6 or stream_pf_unix
function stream socket pair $protocol	the protocol to be used: stream_ipproto_icmp stream_ipproto_ip stream_ipproto_raw stream_ipproto_tcp or stream_ipproto_udp
function stream socket pair $type	the type of communication to be used: stream_sock_dgram stream_sock_raw stream_sock_rdm stream_sock_seqpacket or stream_sock_stream
function array stream socket pair	returns an array with the two socket resources on success or false on failure
function array stream socket pair int $domain int $type int $protocol	creates a pair of connected indistinguishable socket streams
function stream socket recvfrom $length	the number of bytes to receive from the socket
function stream socket recvfrom $address	if address is provided it will be populated with the address of the remote socket
function stream socket recvfrom $socket	the remote socket
function stream socket recvfrom $flags	the value of flags can be any combination of the following: possible values for flags stream_oob process oob out-of-band data
function string stream socket recvfrom	returns the read data as a string
function string stream socket recvfrom resource $socket int $length int $flags string $address	receives data from a socket connected or not
function stream socket sendto $socket	the socket to send data to
function stream socket sendto $address	the address specified when the socket stream was created will be used unless an alternate address is specified in address
function stream socket sendto $flags	the value of flags can be any combination of the following: possible values for flags stream_oob process oob out-of-band data
function stream socket sendto $data	the data to be sent
function int stream socket sendto	returns a result code as an integer
function int stream socket sendto resource $socket string $data int $flags string $address	sends a message to a socket whether it is connected or not
function stream supports lock $stream	the stream to check
function bool stream supports lock	returns true on success or false on failure
function bool stream supports lock resource $stream	tells whether the stream supports locking
function stream wrapper register $classname	the classname which implements the protocol
function stream wrapper register $flags	should be set to stream_is_url if protocol is a url protocol
function stream wrapper register $protocol	the wrapper name to be registered
function bool stream wrapper register	returns true on success or false on failure
function bool stream wrapper register string $protocol string $classname int $flags	register a url wrapper implemented as a php class
function bool stream wrapper unregister	returns true on success or false on failure
function bool stream wrapper unregister string $protocol	unregister a url wrapper
function strftime $timestamp	the optional timestamp parameter is an integer unix timestamp that defaults to the current local time if a timestamp is not given
function string strftime	returns a string formatted according format using the given timestamp or the current local time if no timestamp is given
function string strftime string $format int $timestamp	format a local time / date according to locale settings
function strip tags $allowable_tags	you can use the optional second parameter to specify tags which should not be stripped
function strip tags $str	the input string
function string strip tags	returns the stripped string
function string strip tags string $str string $allowable_tags	strip html and php tags from a string
function stripcslashes $str	the string to be unescaped
function string stripcslashes	returns the unescaped string
function string stripcslashes string $str	un-quote string quoted with addcslashes
function stripslashes $str	the input string
function string stripslashes	returns a string with backslashes stripped off
function stristr $needle	if needle is not a string it is converted to an integer and applied as the ordinal value of a character
function stristr $before_needle	if true stristr() returns the part of the haystack before the first occurrence of the needle excluding needle
function stristr $haystack	the string to search in
function string stristr	returns the matched substring
function string stristr string $haystack mixed $needle bool $before_needle	case-insensitive strstr
function strnatcasecmp $str1	the first string
function strnatcasecmp $str2	the second string
function int strnatcasecmp	similar to other string comparison functions this one returns < 0 if str1 is less than str2 > 0 if str1 is greater than str2 and 0 if they are equal
function int strnatcasecmp string $str1 string $str2	case insensitive string comparisons using a natural order algorithm
function strncasecmp $len	the length of strings to be used in the comparison
function strncasecmp $str1	the first string
function strncasecmp $str2	the second string
function int strncasecmp	returns < 0 if str1 is less than str2 ; > 0 if str1 is greater than str2 and 0 if they are equal
function int strncasecmp string $str1 string $str2 int $len	binary safe case-insensitive string comparison of the first n characters
function strpbrk $char_list	this parameter is case sensitive
function strpbrk $haystack	the string where char_list is looked for
function string strpbrk	returns a string starting from the character found or false if it is not found
function string strpbrk string $haystack string $char_list	search a string for any of a set of characters
function strrchr $needle	if needle contains more than one character only the first is used
function strrchr $haystack	the string to search in
function string strrchr	this function returns the portion of string or false if needle is not found
function string strrchr string $haystack mixed $needle	find the last occurrence of a character in a string
function strrev $string	the string to be reversed
function string strrev	returns the reversed string
function string strrev string $string	reverse a string
function strrpos $needle	if needle is not a string it is converted to an integer and applied as the ordinal value of a character
function strrpos $offset	if specified search will start this number of characters counted from the beginning of the string
function strrpos $haystack	the string to search in
function int strrpos	returns the position where the needle exists relative to the beginnning of the haystack string independent of search direction or offset
function int strrpos string $haystack string $needle int $offset	find the position of the last occurrence of a substring in a string
function strspn $length	the length of the segment from subject to examine
function strspn $subject	the string to examine
function strspn $start	the position in subject to start searching
function strspn $mask	the list of allowable characters
function int strspn	returns the length of the initial segment of subject which consists entirely of characters in mask
function int strspn string $subject string $mask int $start int $length	finds the length of the initial segment of a string consisting entirely of characters contained within a given mask
function strtok $str	the string being split up into smaller strings tokens
function strtok $token	the delimiter used when splitting up str
function string strtok	a string token
function string strtok string $str string $token	tokenize string
function strtolower $string	the input string
function string strtolower	returns the lowercased string
function string strtolower string $string	make a string lowercase
function strtoupper $string	the input string
function string strtoupper	returns the uppercased string
function string strtoupper string $string	make a string uppercase
function substr compare $offset	the start position for the comparison
function substr compare $main_str	the main string being compared
function substr compare $str	the secondary string being compared
function substr compare $case_insensitivity	if case_insensitivity is true comparison is case insensitive
function substr compare $length	the length of the comparison
function int substr compare	returns < 0 if main_str from position offset is less than str > 0 if it is greater than str and 0 if they are equal
function int substr compare string $main_str string $str int $offset int $length bool $case_insensitivity	binary safe comparison of two strings from an offset up to length characters
function substr count $offset	the offset where to start counting
function substr count $haystack	the string to search in
function substr count $needle	the substring to search for
function substr count $length	the maximum length after the specified offset to search for the substring
function int substr count	this function returns an integer
function int substr count string $haystack string $needle int $offset int $length	count the number of substring occurrences
function substr $length	if length is given and is positive the string returned will contain at most length characters beginning from start depending on the length of string
function substr $start	if start is non-negative the returned string will start at the start th position in string counting from zero
function substr $string	the input string
function string substr	returns the extracted part of string ; or false on failure or an empty string
function string substr string $string int $start int $length	return part of a string
function svn add $recursive	if item is directory whether or not to recursively add all of its contents
function svn add $path	path of item to add
function svn add $force	if true subversion will recurse into already versioned directories in order to add unversioned files that may be hiding in those directories
function bool svn add	returns true on success or false on failure
function bool svn add string $path bool $recursive bool $force	schedules the addition of an item in a working directory
function svn auth get parameter $key	string key name
function string svn auth get parameter	returns the string value of the parameter at key ; returns null if parameter does not exist
function string svn auth get parameter string $key	retrieves authentication parameter
function svn auth set parameter $key	string key name
function svn auth set parameter $value	string value to set to parameter at key
function void svn auth set parameter string $key string $value	sets an authentication parameter
function svn blame $repository_url	the repository url
function svn blame $revision_no	the revision number
function array svn blame	an array of svn blame information separated by line which includes the revision number line number line of code author and date
function array svn blame string $repository_url int $revision_no	get the svn blame for a file
function svn checkout $flags	any combination of svn_non_recursive and svn_ignore_externals
function svn checkout $targetpath	string local path to directory to check out in to note : relative paths will be resolved as if the current working directory was the one that contains the php binary
function svn checkout $revision	integer revision number of repository to check out
function svn checkout $repos	string url path to directory in repository to check out
function bool svn checkout	returns true on success or false on failure
function bool svn checkout string $repos string $targetpath int $revision int $flags	checks out a working copy from the repository
function svn cleanup $workingdir	string path to local working directory to cleanup note : relative paths will be resolved as if the current working directory was the one that contains the php binary
function bool svn cleanup	returns true on success or false on failure
function bool svn cleanup string $workingdir	recursively cleanup a working copy directory finishing incomplete operations and removing locks
function string svn client version	string version number usually in form of x
function svn commit $log	string log text to commit
function svn commit $targets	array of local paths of files to be committed warning this parameter must be an array a string for a single target is not acceptable
function svn commit $recursive	boolean flag to disable recursive committing of directories in the targets array
function array svn commit	returns array in form of:
function array svn commit string $log array $targets bool $recursive	sends changes from the local working copy to the repository
function svn diff $path2	second path to diff
function svn diff $rev1	first paths revision number
function svn diff $path1	first path to diff
function svn diff $rev2	second paths revision number
function array svn diff	returns an array-list consisting of two streams: the first is the diff output and the second contains error stream output
function array svn diff string $path1 int $rev1 string $path2 int $rev2	recursively diffs two paths
function svn export $working_copy	if true it will export uncommitted files from the working copy
function svn export $topath	the path to the new repository
function svn export $frompath	the path to the current repository
function bool svn export	returns true on success or false on failure
function bool svn export string $frompath string $topath bool $working_copy int $revision_no	export the contents of a svn directory
function svn import $path	path of file or directory to import
function svn import $url	repository url to import into
function svn import $nonrecursive	whether or not to refrain from recursively processing directories
function bool svn import	returns true on success or false on failure
function bool svn import string $path string $url bool $nonrecursive	imports an unversioned path into a repository
function svn log $repos_url	repository url of the item to retrieve log history from
function svn log $start_revision	revision number of the first log to retrieve
function svn log $limit	number of logs to retrieve
function svn log $end_revision	revision number of the last log to retrieve
function svn log $flags	any combination of svn_omit_messages svn_discover_changed_paths and svn_stop_on_copy
function array svn log string $repos_url int $start_revision int $end_revision int $limit int $flags	returns the commit log messages of a repository url
function svn ls $recurse	enables recursion
function svn ls $revision	integer revision number to retrieve listing of
function svn ls $url	url of the repository eg
function array svn ls string $repos_url int $revision_no bool $recurse bool $peg	returns list of directory contents in repository url optionally at revision number
function svn mkdir $path	the path to the working copy or repository
function bool svn mkdir	returns true on success or false on failure
function svn revert $path	the path to the working repository
function svn revert $recursive	optionally make recursive changes
function bool svn revert	returns true on success or false on failure
function bool svn revert string $path bool $recursive	revert changes to the working copy
function svn status $path	local path to file or directory to retrieve status of
function svn status $flags	any combination of svn_non_recursive svn_all regardless of modification status svn_show_updates entries will be added for items that are out-of-date svn_no_ignore disregard svn:ignore properties when scanning for new files and svn_ignore_externals
function array svn status	returns a numerically indexed array of associative arrays detailing the status of items in the repository:
function array svn status string $path int $flags	returns the status of working copy files and directories
function sybase close $link_identifier	if the link identifier isnt specified the last opened link is assumed
function bool sybase close	returns true on success or false on failure
function bool sybase close resource $link_identifier	closes a sybase connection
function sybase connect $new	whether to open a new connection or use the existing one
function sybase connect $username	sybase user name
function sybase connect $servername	the servername argument has to be a valid servername that is defined in the interfaces file
function sybase connect $charset	specifies the charset for the connection
function sybase connect $password	password associated with username
function sybase connect $appname	specifies an appname for the sybase connection
function resource sybase connect	returns a positive sybase link identifier on success or false on failure
function resource sybase connect string $servername string $username string $password string $charset string $appname bool $new	opens a sybase server connection
function bool sybase data seek	returns true on success or false on failure
function bool sybase data seek resource $result_identifier int $row_number	moves internal row pointer
function array sybase fetch assoc	returns an array that corresponds to the fetched row or false if there are no more rows
function array sybase fetch assoc resource $result	fetch a result row as an associative array
function sybase fetch object $object	use the second object to specify the type of object you want to return
function object sybase fetch object	returns an object with properties that correspond to the fetched row or false if there are no more rows
function object sybase fetch object resource $result mixed $object	fetch a row as an object
function array sybase fetch row	returns an array that corresponds to the fetched row or false if there are no more rows
function array sybase fetch row resource $result	get a result row as an enumerated array
function bool sybase field seek	returns true on success or false on failure
function bool sybase field seek resource $result int $field_offset	sets field offset
function bool sybase free result	returns true on success or false on failure
function bool sybase free result resource $result	frees result memory
function string sybase get last message	returns the message as a string
function string sybase get last message	returns the last message from the server
function void sybase min client severity int $severity	sets minimum client severity
function void sybase min error severity int $severity	sets minimum error severity
function void sybase min message severity int $severity	sets minimum message severity
function int sybase num fields	returns the number of fields as an integer
function int sybase num fields resource $result	gets the number of fields in a result set
function int sybase num rows	returns the number of rows as an integer
function int sybase num rows resource $result	get number of rows in a result set
function sybase pconnect $charset	specifies the charset for the connection
function sybase pconnect $appname	specifies an appname for the sybase connection
function sybase pconnect $username	sybase user name
function sybase pconnect $password	password associated with username
function sybase pconnect $servername	the servername argument has to be a valid servername that is defined in the interfaces file
function resource sybase pconnect	returns a positive sybase persistent link identifier on success or false on error
function resource sybase pconnect string $servername string $username string $password string $charset string $appname	open persistent sybase connection
function sybase query $link_identifier	if the link identifier isnt specified the last opened link is assumed
function mixed sybase query	returns a positive sybase result identifier on success false on error or true if the query was successful but didnt return any columns
function mixed sybase query string $query resource $link_identifier	sends a sybase query
function sybase select db $link_identifier	if no link identifier is specified the last opened link is assumed
function bool sybase select db	returns true on success or false on failure
function bool sybase select db string $database_name resource $link_identifier	selects a sybase database
function sybase set message handler $link_identifier	if the link identifier isnt specified the last opened link is assumed
function sybase set message handler $handler	the handler expects five arguments in the following order: message number severity state line number and description
function bool sybase set message handler	returns true on success or false on failure
function bool sybase set message handler callable $handler resource $link_identifier	sets the handler called when a server message is raised
function string sys get temp dir	returns the path of the temporary directory
function string sys get temp dir	returns directory path used for temporary files
function array sys getloadavg	returns an array with three samples last 1 5 and 15 minutes
function array sys getloadavg	gets system load average
function system $return_var	if the return_var argument is present then the return status of the executed command will be written to this variable
function system $command	the command that will be executed
function string system	returns the last line of the command output on success and false on failure
function string system string $command int $return_var	execute an external program and display the output
function bool taint	return true if the transformation is done
function bool taint string $string	taint a string
function tan $arg	the argument to process in radians
function float tan	the tangent of arg
function float tan float $arg	tangent
function tanh $arg	the argument to process
function float tanh	the hyperbolic tangent of arg
function float tanh float $arg	hyperbolic tangent
function tempnam $dir	the directory where the temporary filename will be created
function tempnam $prefix	the prefix of the generated temporary filename
function string tempnam	returns the new temporary filename with path or false on failure
function string tempnam string $dir string $prefix	create file with unique file name
function textdomain $text_domain	the new message domain or null to get the current setting without changing it
function string textdomain	if successful this function returns the current message domain after possibly changing it
function string textdomain string $text_domain	sets the default domain
function tidy access count $object	the tidy object
function int tidy access count	returns the number of warnings
function int tidy access count tidy $object	returns the number of tidy accessibility warnings encountered for specified document
function tidy error count $object	the tidy object
function int tidy error count	returns the number of errors
function int tidy error count tidy $object	returns the number of tidy errors encountered for specified document
function void tidy load config string $filename string $encoding	load an ascii tidy configuration file with the specified encoding
function tidy save config $filename	path to the config file
function bool tidy save config	returns true on success or false on failure
function bool tidy save config string $filename	save current settings to named file
function tidy set encoding $encoding	the encoding parameter sets the encoding for input / output documents
function bool tidy set encoding	returns true on success or false on failure
function bool tidy set encoding string $encoding	set the input / output character encoding for parsing markup
function tidy setopt $option	the tidy option name
function tidy setopt $value	the tidy option name
function bool tidy setopt	returns true on success or false on failure
function bool tidy setopt string $option mixed $value	updates the configuration settings for the specified tidy document
function tidy warning count $object	the tidy object
function int tidy warning count	returns the number of warnings
function int tidy warning count tidy $object	returns the number of tidy warnings encountered for specified document
function time nanosleep $nanoseconds	must be a non-negative integer less than 1 billion
function time nanosleep $seconds	must be a non-negative integer
function mixed time nanosleep	returns true on success or false on failure
function mixed time nanosleep int $seconds int $nanoseconds	delay for a number of seconds and nanoseconds
function time sleep until $timestamp	the timestamp when the script should wake
function bool time sleep until	returns true on success or false on failure
function bool time sleep until float $timestamp	make the script sleep until the specified time
function token get all $flags	valid flags: token_parse - recognises the ability to use reserved words in specific contexts
function token get all $source	the php source to parse
function array token get all	an array of token identifiers
function array token get all string $source int $flags	split given source into php tokens
function token name $token	the token value
function string token name	the symbolic name of the given token
function string token name int $token	get the symbolic name of a given php token
function trader acos $real	array of real values
function array trader acos	returns an array with calculated data or false on failure
function array trader acos array $real	vector trigonometric acos
function trader add $real0	array of real values
function trader add $real1	array of real values
function array trader add	returns an array with calculated data or false on failure
function array trader add array $real0 array $real1	vector arithmetic add
function trader asin $real	array of real values
function array trader asin	returns an array with calculated data or false on failure
function array trader asin array $real	vector trigonometric asin
function trader atan $real	array of real values
function array trader atan	returns an array with calculated data or false on failure
function array trader atan array $real	vector trigonometric atan
function trader ceil $real	array of real values
function array trader ceil	returns an array with calculated data or false on failure
function array trader ceil array $real	vector ceil
function trader cos $real	array of real values
function array trader cos	returns an array with calculated data or false on failure
function array trader cos array $real	vector trigonometric cos
function trader cosh $real	array of real values
function array trader cosh	returns an array with calculated data or false on failure
function array trader cosh array $real	vector trigonometric cosh
function trader div $real0	array of real values
function trader div $real1	array of real values
function array trader div	returns an array with calculated data or false on failure
function array trader div array $real0 array $real1	vector arithmetic div
function integer trader errno	returns the error code identified by one of the trader_err_* constants
function integer trader errno	get error code
function trader exp $real	array of real values
function array trader exp	returns an array with calculated data or false on failure
function array trader exp array $real	vector arithmetic exp
function trader floor $real	array of real values
function array trader floor	returns an array with calculated data or false on failure
function array trader floor array $real	vector floor
function trader get unstable period $functionId	function id the factor to be read for
function integer trader get unstable period	returns the unstable period factor for the corresponding function
function integer trader get unstable period integer $functionId	get unstable period
function trader log10 $real	array of real values
function array trader log10	returns an array with calculated data or false on failure
function array trader log10 array $real	vector log10
function trader mult $real0	array of real values
function trader mult $real1	array of real values
function array trader mult	returns an array with calculated data or false on failure
function array trader mult array $real0 array $real1	vector arithmetic mult
function trader set unstable period $functionId	function id the factor should be set for
function trader set unstable period $timePeriod	unstable period value
function void trader set unstable period integer $functionId integer $timePeriod	set unstable period
function trader sqrt $real	array of real values
function array trader sqrt	returns an array with calculated data or false on failure
function array trader sqrt array $real	vector square root
function trader sub $real0	array of real values
function trader sub $real1	array of real values
function array trader sub	returns an array with calculated data or false on failure
function array trader sub array $real0 array $real1	vector arithmetic subtraction
function trigger error $error_type	the designated error type for this error
function trigger error $error_msg	the designated error message for this error
function bool trigger error	this function returns false if wrong error_type is specified true otherwise
function bool trigger error string $error_msg int $error_type	generates a user-level error / warning / notice message
function trim $character_mask	optionally the stripped characters can also be specified using the character_mask parameter
function trim $str	the string that will be trimmed
function string trim	the trimmed string
function string trim string $str string $character_mask	strip whitespace or other characters from the beginning and end of a string
function ucfirst $str	the input string
function string ucfirst	returns the resulting string
function string ucfirst string $str	make a string's first character uppercase
function ucwords $delimiters	the optional delimiters contains the word separator characters
function ucwords $str	the input string
function string ucwords	returns the modified string
function string ucwords string $str string $delimiters	uppercase the first character of each word in a string
function udm add search limit $agent	a link to agent received after call to udm_alloc_agent()
function udm add search limit $val	defines the value of the current parameter
function udm add search limit $var	defines the parameter indicating limits
function bool udm add search limit	returns true on success or false on failure
function bool udm add search limit resource $agent int $var string $val	add various search limits
function udm alloc agent array $databases	the array databases must contain one database url per element analog to the first parameter of udm_alloc_agent()
function resource udm alloc agent array	returns a resource link identifier on success or false on failure
function resource udm alloc agent array array $databases	allocate mnogosearch session
function udm alloc agent $dbmode	dbmode - you may select the sql database mode of words storage
function udm alloc agent $dbaddr	dbaddr - url-style database description with options type host database name port user and password to connect to sql database
function resource udm alloc agent	returns a mnogosearch agent identifier on success false on failure
function resource udm alloc agent string $dbaddr string $dbmode	allocate mnogosearch session
function udm cat list $agent	a link to agent received after call to udm_alloc_agent()
function array udm cat list	returns an array listing all categories of the same level as the current category in the categories tree
function array udm cat list resource $agent string $category	get all the categories on the same level with the current one
function udm clear search limits $agent	a link to agent received after call to udm_alloc_agent()
function bool udm clear search limits	returns true
function bool udm clear search limits resource $agent	clear all mnogosearch search restrictions
function udm errno $agent	a link to agent received after call to udm_alloc_agent()
function int udm errno	returns the mnogosearch error number zero if no error
function int udm errno resource $agent	get mnogosearch error number
function udm error $agent	a link to agent received after call to udm_alloc_agent()
function string udm error	udm_error() returns mnogosearch error message empty string if no error
function string udm error resource $agent	get mnogosearch error message
function udm find $agent	a link to agent received after call to udm_alloc_agent()
function udm find $query	mnogosearch understands the following boolean operators: & - logical and
function resource udm find	returns a result link identifier on success or false on failure
function resource udm find resource $agent string $query	perform search
function udm free agent $agent	a link to agent received after call to udm_alloc_agent()
function int udm free agent	returns true on success or false on failure
function int udm free agent resource $agent	free mnogosearch session
function udm free res $res	a link to a result identifier received after call to udm_find()
function bool udm free res	returns true on success or false on failure
function bool udm free res resource $res	free mnogosearch result
function udm get doc count $agent	a link to agent received after call to udm_alloc_agent()
function int udm get doc count	returns the number of documents
function int udm get doc count resource $agent	get total number of documents in database
function udm get res field $row	row - the number of the link on the current page
function udm get res field $res	res - a link to result identifier received after call to udm_find()
function udm get res field $field	field - field identifier may have the following values: udm_field_url - document url field udm_field_content - document content-type field for example text / html
function string udm get res field	udm_get_res_field() returns result field value on success false on error
function string udm get res field resource $res int $row int $field	fetch a result field
function udm load ispell data $var	indicates the source for ispell data
function udm load ispell data $agent	a link to agent received after call to udm_alloc_agent()
function bool udm load ispell data	returns true on success or false on failure
function bool udm load ispell data resource $agent int $var string $val1 string $val2 int $flag	load ispell data
function udm set agent param $agent	a link to agent received after call to udm_alloc_agent()
function udm set agent param $var	the following parameters and their values are available: udm_param_page_num - used to choose search results page number results are returned by pages beginning from 0 with udm_param_page_size results per page
function bool udm set agent param	returns true on success or false on failure
function bool udm set agent param resource $agent int $var string $val	set mnogosearch agent session parameters
function uksort $array	the input array
function uksort $key_compare_func	the comparison function must return an integer less than equal to or greater than zero if the first argument is considered to be respectively less than equal to or greater than the second
function bool uksort	returns true on success or false on failure
function bool uksort array $array callable $key_compare_func	sort an array by keys using a user-defined comparison function
function umask $mask	the new umask
function int umask	umask() without arguments simply returns the current umask otherwise the old umask is returned
function int umask int $mask	changes the current umask
function unixtojd $timestamp	a unix timestamp to convert
function int unixtojd	a julian day number as integer
function int unixtojd int $timestamp	convert unix timestamp to julian day
function unlink $context	note : context support was added with php 5
function unlink $filename	path to the file
function bool unlink	returns true on success or false on failure
function bool unlink string $filename resource $context	deletes a file
function unset $var	the variable to be unset
function unset	another variable
function void unset mixed $var	unset a given variable
function uopz backup $function	the name of the function
function uopz backup $class	the name of the class containing the function to backup
function void uopz backup string $class string $function	backup a function
function void uopz delete string $class string $function	delete a function
function uopz flags $class	the name of a class
function uopz flags $flags	a valid set of zend_acc_ flags zend_acc_fetch to read flags
function uopz flags $function	the name of the function
function int uopz flags	if setting returns old flags else returns flags
function int uopz flags string $class string $function int $flags	get or set flags on function or class
function uopz overload $opcode	a valid opcode see constants for details of supported codes
function void uopz overload int $opcode Callable $callable	overload a vm opcode
function uopz redefine $value	the new value for the constant must be a valid type for a constant variable
function uopz redefine $class	the name of the class containing the constant
function uopz redefine $constant	the name of the constant
function void uopz redefine string $class string $constant mixed $value	redefine a constant
function use soap error handler $handler	set to true to send error details to clients
function bool use soap error handler	returns the original value
function bool use soap error handler bool $handler	set whether to use the soap error handler
function usleep $micro_seconds	halt time in microseconds
function void usleep int $micro_seconds	delay execution in microseconds
function usort $array	the input array
function usort $value_compare_func	the comparison function must return an integer less than equal to or greater than zero if the first argument is considered to be respectively less than equal to or greater than the second
function bool usort	returns true on success or false on failure
function bool usort array $array callable $value_compare_func	sort an array by values using a user-defined comparison function
function utf8 decode $data	an utf-8 encoded string
function string utf8 decode	returns the iso-8859-1 translation of data
function string utf8 decode string $data	converts a string with iso-8859-1 characters encoded with utf-8 to single-byte iso-8859-1
function variant abs $val	the variant
function mixed variant abs	returns the absolute value of val
function variant and $left	the left operand
function variant and $right	the right operand
function mixed variant and	variant and rules if left is if right is then the result is true true true true false false true null null false true false false false false false null false null true null null false false null null null
function mixed variant and mixed $left mixed $right	performs a bitwise and operation between two variants
function variant cat $left	the left operand
function variant cat $right	the right operand
function mixed variant cat	returns the result of the concatenation
function mixed variant cat mixed $left mixed $right	concatenates two variant values together and returns the result
function variant date from timestamp $timestamp	a unix timestamp
function variant variant date from timestamp	returns a vt_date variant
function variant variant date from timestamp int $timestamp	returns a variant date representation of a unix timestamp
function variant div $left	the left operand
function variant div $right	the right operand
function mixed variant div mixed $left mixed $right	returns the result from dividing two variants
function variant eqv $left	the left operand
function variant eqv $right	the right operand
function mixed variant eqv	if each bit in left is equal to the corresponding bit in right then true is returned otherwise false is returned
function variant fix $variant	the variant
function mixed variant fix	if variant is negative then the first negative integer greater than or equal to the variant is returned otherwise returns the integer portion of the value of variant
function mixed variant fix mixed $variant	returns the integer portion of a variant
function variant idiv $left	the left operand
function variant idiv $right	the right operand
function mixed variant idiv mixed $left mixed $right	converts variants to integers and then returns the result from dividing them
function variant imp $left	the left operand
function variant imp $right	the right operand
function mixed variant imp	variant implication table if left is if right is then the result is true true true true false true true null true false true true false false true false null true null true true null false null null null null
function mixed variant imp mixed $left mixed $right	performs a bitwise implication on two variants
function variant int $variant	the variant
function mixed variant int	if variant is negative then the first negative integer greater than or equal to the variant is returned otherwise returns the integer portion of the value of variant
function mixed variant int mixed $variant	returns the integer portion of a variant
function variant mod $left	the left operand
function variant mod $right	the right operand
function mixed variant mod	returns the remainder of the division
function mixed variant mod mixed $left mixed $right	divides two variants and returns only the remainder
function variant not $variant	the variant
function mixed variant not	returns the bitwise not negation
function mixed variant not mixed $variant	performs bitwise not negation on a variant
function variant pow $left	the left operand
function variant pow $right	the right operand
function mixed variant pow	returns the result of left to the power of right
function mixed variant pow mixed $left mixed $right	returns the result of performing the power function with two variants
function variant set type $variant	the variant
function void variant set type variant $variant int $type	convert a variant into another type in-place
function variant set $variant	the variant
function void variant set variant $variant mixed $value	assigns a new value for a variant object
function variant xor $left	the left operand
function variant xor $right	the right operand
function mixed variant xor	variant xor rules if left is if right is then the result is true true false true false true false true true false false false null null null
function mixed variant xor mixed $left mixed $right	performs a logical exclusion on two variants
function version compare $version1	first version number
function version compare $operator	if the third optional operator argument is specified test for a particular relationship
function version compare $version2	second version number
function mixed version compare	by default version_compare() returns -1 if the first version is lower than the second 0 if they are equal and 1 if the second is lower
function mixed version compare string $version1 string $version2 string $operator	compares two php-standardized version number strings
function vprintf $format	see sprintf() for a description of format
function int vprintf	returns the length of the outputted string
function int vprintf string $format array $args	output a formatted string
function vsprintf $format	see sprintf() for a description of format
function string vsprintf	return array values as a formatted string according to format which is described in the documentation for sprintf()
function string vsprintf string $format array $args	return a formatted string
function wddx add vars $var_name	can be either a string naming a variable or an array containing strings naming the variables or another array etc
function wddx add vars $packet_id	a wddx packet returned by wddx_packet_start()
function bool wddx add vars	returns true on success or false on failure
function bool wddx add vars resource $packet_id mixed $var_name	add variables to a wddx packet with the specified id
function wddx deserialize $packet	a wddx packet as a string or stream
function mixed wddx deserialize	returns the deserialized value which can be a string a number or an array
function wddx packet start $comment	an optional comment string
function resource wddx packet start	returns a packet id for use in later functions or false on error
function resource wddx packet start string $comment	starts a new wddx packet with structure inside it
function wddx serialize value $comment	an optional comment string that appears in the packet header
function wddx serialize value $var	the value to be serialized
function string wddx serialize value	returns the wddx packet or false on error
function string wddx serialize value mixed $var string $comment	serialize a single value into a wddx packet
function wddx serialize vars $var_name	can be either a string naming a variable or an array containing strings naming the variables or another array etc
function string wddx serialize vars	returns the wddx packet or false on error
function string wddx serialize vars mixed $var_name	serialize variables into a wddx packet
function win32 continue service $machine	optional machine name
function win32 continue service $servicename	the short name of the service
function int win32 continue service	returns win32_no_error on success false if there is a problem with the parameters or a win32 error code on failure
function int win32 continue service string $servicename string $machine	resumes a paused service
function win32 delete service $servicename	the short name of the service
function win32 delete service $machine	the optional machine name
function mixed win32 delete service	returns win32_no_error on success false if there is a problem with the parameters or a win32 error code on failure
function mixed win32 delete service string $servicename string $machine	deletes a service entry from the scm database
function int win32 get last control message	returns a control constant which will be one of the win32service service control message constants : win32_service_control_continue win32_service_control_interrogate win32_service_control_pause win32_service_control_preshutdown win32_service_control_shutdown win32_service_control_stop
function int win32 get last control message	returns the last control message that was sent to this service
function win32 pause service $machine	optional machine name
function win32 pause service $servicename	the short name of the service
function int win32 pause service	returns win32_no_error on success false if there is a problem with the parameters or a win32 error code on failure
function int win32 pause service string $servicename string $machine	pauses a service
function array win32 ps list procs	returns false on failure or an array consisting of process statistics like win32_ps_stat_proc() returns for all running processes on success
function array win32 ps list procs	list running processes
function array win32 ps stat mem	returns false on failure or an array consisting of the following information on success:
function array win32 ps stat mem	stat memory utilization
function win32 query service status $servicename	the short name of the service
function win32 query service status $machine	the optional machine name
function mixed win32 query service status	returns an array consisting of the following information on success false if there is a problem with the parameters or a win32 error code on failure
function mixed win32 query service status string $servicename string $machine	queries the status of a service
function win32 set service status $checkpoint	the checkpoint value the service increments periodically to report its progress during a lengthy start stop pause or continue operation
function win32 set service status $status	the service status code one of win32_service_running win32_service_stopped win32_service_stop_pending win32_service_start_pending win32_service_continue_pending win32_service_pause_pending win32_service_paused
function bool win32 set service status	returns true on success false if there is a problem with the parameters or a win32 error code on failure
function bool win32 set service status int $status int $checkpoint	update the service status
function win32 start service ctrl dispatcher $name	the short-name of the service as registered by win32_create_service()
function mixed win32 start service ctrl dispatcher	returns true on success false if there is a problem with the parameters or a win32 error code on failure
function mixed win32 start service ctrl dispatcher string $name	registers the script with the scm so that it can act as the service with the given name
function win32 stop service $machine	optional machine name
function win32 stop service $servicename	the short name of the service
function int win32 stop service	returns win32_no_error on success false if there is a problem with the parameters or a win32 error code on failure
function int win32 stop service string $servicename string $machine	stops a service
function array wincache fcache meminfo	array of meta data about file cache memory usage or false on failure
function array wincache fcache meminfo	retrieves information about file cache memory usage
function wincache lock $isglobal	controls whether the scope of the lock is system-wide or local
function wincache lock $key	name of the key in the cache to get the lock on
function bool wincache lock	returns true on success or false on failure
function bool wincache lock string $key bool $isglobal	acquires an exclusive lock on a given key
function wincache ocache fileinfo $summaryonly	controls whether the returned array will contain information about individual cache entries along with the opcode cache summary
function array wincache ocache fileinfo	array of meta data about opcode cache or false on failure
function array wincache ocache fileinfo bool $summaryonly	retrieves information about files cached in the opcode cache
function array wincache ocache meminfo	array of meta data about opcode cache memory usage or false on failure
function array wincache ocache meminfo	retrieves information about opcode cache memory usage
function wincache refresh if changed $files	an array of file names for files that need to be refreshed
function bool wincache refresh if changed	returns true on success or false on failure
function bool wincache refresh if changed array $files	refreshes the cache entries for the cached files
function array wincache rplist fileinfo	array of meta data about the resolve file path cache or false on failure
function array wincache rplist fileinfo bool $summaryonly	retrieves information about resolve file path cache
function array wincache rplist meminfo	array of meta data that describes memory usage by resolve file path cache
function array wincache rplist meminfo	retrieves information about memory usage by the resolve file path cache
function wincache scache info $summaryonly	controls whether the returned array will contain information about individual cache entries along with the session cache summary
function array wincache scache info	array of meta data about session cache or false on failure
function array wincache scache info bool $summaryonly	retrieves information about files cached in the session cache
function array wincache scache meminfo	array of meta data about session cache memory usage or false on failure
function array wincache scache meminfo	retrieves information about session cache memory usage
function wincache ucache cas $old_value	old value of the variable pointed by key in the user cache
function wincache ucache cas $key	the key that is used to store the variable in the cache
function wincache ucache cas $new_value	new value which will get assigned to variable pointer by key if a match is found
function bool wincache ucache cas	returns true on success or false on failure
function bool wincache ucache cas string $key int $old_value int $new_value	compares the variable with old value and assigns new value to it
function bool wincache ucache clear	returns true on success or false on failure
function bool wincache ucache clear	deletes entire content of the user cache
function wincache ucache exists $key	the key that was used to store the variable in the cache
function bool wincache ucache exists	returns true if variable with the key exitsts otherwise returns false
function bool wincache ucache exists string $key	checks if a variable exists in the user cache
function wincache ucache inc $key	the key that was used to store the variable in the cache
function wincache ucache inc $success	will be set to true on success and false on failure
function wincache ucache inc $inc_by	the value by which the variable associated with the key will get incremented
function mixed wincache ucache inc string $key int $inc_by bool $success	increments the value associated with the key
function wincache ucache set $value	value of a variable to store
function wincache ucache set $values	associative array of keys and values
function wincache ucache set $key	store the variable using this key name
function wincache ucache set $ttl	time for the variable to live in the cache in seconds
function bool wincache ucache set mixed $key mixed $value int $ttl	adds a variable in user cache and overwrites a variable if it already exists in the cache
function wincache unlock $key	name of the key in the cache to release the lock on
function bool wincache unlock	returns true on success or false on failure
function bool wincache unlock string $key	releases an exclusive lock on a given key
function wordwrap $cut	if the cut is set to true the string is always wrapped at or before the specified width
function wordwrap $break	the line is broken using the optional break parameter
function wordwrap $str	the input string
function wordwrap $width	the number of characters at which the string will be wrapped
function string wordwrap	returns the given string wrapped at the specified length
function string wordwrap string $str int $width string $break bool $cut	wraps a string to a given number of characters
function xattr remove $flags	supported xattr flags xattr_dontfollow do not follow the symbolic link but operate on symbolic link itself
function xattr remove $name	the name of the attribute to remove
function xattr remove $filename	the file from which we remove the attribute
function bool xattr remove	returns true on success or false on failure
function bool xattr remove string $filename string $name int $flags	remove an extended attribute
function xattr set $filename	the file in which we set the attribute
function xattr set $value	the value of the attribute
function xattr set $name	the name of the extended attribute
function xattr set $flags	supported xattr flags xattr_create function will fail if extended attribute already exists
function bool xattr set	returns true on success or false on failure
function bool xattr set string $filename string $name string $value int $flags	set an extended attribute
function xdiff file bdiff $old_file	path to the first file
function xdiff file bdiff $new_file	path to the second file
function xdiff file bdiff $dest	path of the resulting patch file
function bool xdiff file bdiff	returns true on success or false on failure
function bool xdiff file bdiff string $old_file string $new_file string $dest	make binary diff of two files
function xdiff file diff $old_file	path to the first file
function xdiff file diff $new_file	path to the second file
function xdiff file diff $context	indicates how many lines of context you want to include in diff result
function xdiff file diff $minimal	set this parameter to true if you want to minimalize size of the result can take a long time
function xdiff file diff $dest	path of the resulting patch file
function bool xdiff file diff	returns true on success or false on failure
function bool xdiff file diff string $old_file string $new_file string $dest int $context bool $minimal	make unified diff of two files
function xdiff file merge3 $old_file	path to the first file
function xdiff file merge3 $new_file1	path to the second file
function xdiff file merge3 $new_file2	path to the third file
function xdiff file merge3 $dest	path of the resulting file containing merged changed from both new_file1 and new_file2
function mixed xdiff file merge3	returns true if merge was successful string with rejected chunks if it was not or false if an internal error happened
function mixed xdiff file merge3 string $old_file string $new_file1 string $new_file2 string $dest	merge 3 files into one
function xdiff file patch binary $dest	path of the resulting file
function xdiff file patch binary $file	the original file
function xdiff file patch binary $patch	the binary patch file
function bool xdiff file patch binary	returns true on success or false on failure
function bool xdiff file patch binary string $file string $patch string $dest	alias of xdiff_file_bpatch
function xdiff file rabdiff $old_file	path to the first file
function xdiff file rabdiff $new_file	path to the second file
function xdiff file rabdiff $dest	path of the resulting patch file
function bool xdiff file rabdiff	returns true on success or false on failure
function bool xdiff file rabdiff string $old_file string $new_file string $dest	make binary diff of two files using the rabin's polynomial fingerprinting algorithm
function xdiff string bdiff size $patch	the binary patch created by xdiff_string_bdiff() or xdiff_string_rabdiff() function
function int xdiff string bdiff size	returns the size of file that would be created
function int xdiff string bdiff size string $patch	read a size of file created by applying a binary diff
function xdiff string bpatch $patch	the binary patch string
function xdiff string bpatch $str	the original binary string
function string xdiff string bpatch	returns the patched string or false on error
function string xdiff string bpatch string $str string $patch	patch a string with a binary diff
function xdiff string diff $minimal	set this parameter to true if you want to minimalize the size of the result can take a long time
function xdiff string diff $new_data	second string with data
function xdiff string diff $context	indicates how many lines of context you want to include in the diff result
function xdiff string diff $old_data	first string with data
function string xdiff string diff	returns string with resulting diff or false if an internal error happened
function string xdiff string diff string $old_data string $new_data int $context bool $minimal	make unified diff of two strings
function xdiff string patch binary $patch	the binary patch string
function xdiff string patch binary $str	the original binary string
function string xdiff string patch binary	returns the patched string or false on error
function string xdiff string patch binary string $str string $patch	alias of xdiff_string_bpatch
function xdiff string patch $flags	flags can be either xdiff_patch_normal default mode normal patch or xdiff_patch_reverse reversed patch
function xdiff string patch $str	the original string
function xdiff string patch $patch	the unified patch string
function xdiff string patch $error	if provided then rejected parts are stored inside this variable
function string xdiff string patch	returns the patched string or false on error
function string xdiff string patch string $str string $patch int $flags string $error	patch a string with an unified diff
function array xhprof disable	an array of xhprof data from the run
function array xhprof disable	stops xhprof profiler
function xhprof enable $options	an array of optional options namely the ignored_functions option to pass in functions to be ignored during profiling
function xhprof enable $flags	optional flags to add additional information to the profiling
function void xhprof enable int $flags array $options	start xhprof profiler
function xml get current byte index $parser	a reference to the xml parser to get byte index from
function int xml get current byte index	this function returns false if parser does not refer to a valid parser or else it returns which byte index the parser is currently at in its data buffer starting at 0
function int xml get current byte index resource $parser	get current byte index for an xml parser
function xml get current column number $parser	a reference to the xml parser to get column number from
function int xml get current column number	this function returns false if parser does not refer to a valid parser or else it returns which column on the current line as given by xml_get_current_line_number() the parser is currently at
function int xml get current column number resource $parser	get current column number for an xml parser
function xml get current line number $parser	a reference to the xml parser to get line number from
function int xml get current line number	this function returns false if parser does not refer to a valid parser or else it returns which line the parser is currently at in its data buffer
function int xml get current line number resource $parser	get current line number for an xml parser
function xml get error code $parser	a reference to the xml parser to get error code from
function int xml get error code	this function returns false if parser does not refer to a valid parser or else it returns one of the error codes listed in the error codes section
function int xml get error code resource $parser	get xml parser error code
function xml parse into struct $values	an array containing the values of the xml data
function xml parse into struct $index	an array containing pointers to the location of the appropriate values in the $values
function xml parse into struct $data	a string containing the xml data
function xml parse into struct $parser	a reference to the xml parser
function int xml parse into struct	xml_parse_into_struct() returns 0 for failure and 1 for success
function int xml parse into struct resource $parser string $data array $values array $index	parse xml data into an array structure
function xml parse $data	chunk of data to parse
function xml parse $parser	a reference to the xml parser to use
function xml parse $is_final	if set and true data is the last piece of data sent in this parse
function int xml parse	returns 1 on success or 0 on failure
function int xml parse resource $parser string $data bool $is_final	start parsing an xml document
function xml parser create ns $encoding	the optional encoding specifies the character encoding for the input / output in php 4
function xml parser create ns $separator	with a namespace aware parser tag parameters passed to the various handler functions will consist of namespace and tag name separated by the string specified in separator
function resource xml parser create ns	returns a resource handle for the new xml parser
function resource xml parser create ns string $encoding string $separator	create an xml parser with namespace support
function xml parser create $encoding	the optional encoding specifies the character encoding for the input / output in php 4
function resource xml parser create	returns a resource handle for the new xml parser
function resource xml parser create string $encoding	create an xml parser
function xml parser free $parser	a reference to the xml parser to free
function bool xml parser free	this function returns false if parser does not refer to a valid parser or else it frees the parser and returns true
function bool xml parser free resource $parser	free an xml parser
function xml parser get option $parser	a reference to the xml parser to get an option from
function xml parser get option $option	which option to fetch
function mixed xml parser get option	this function returns false if parser does not refer to a valid parser or if option isnt valid generates also a e_warning
function mixed xml parser get option resource $parser int $option	get options from an xml parser
function xml parser set option $value	the options new value
function xml parser set option $parser	a reference to the xml parser to set an option in
function xml parser set option $option	which option to set
function bool xml parser set option	this function returns false if parser does not refer to a valid parser or if the option could not be set
function bool xml parser set option resource $parser int $option mixed $value	set options in an xml parser
function xml set character data handler $parser	a reference to the xml parser to set up character data handler function
function xml set character data handler $parser	the first parameter parser is a reference to the xml parser calling the handler
function xml set character data handler $handler	handler is a string containing the name of a function that must exist when xml_parse() is called for parser
function xml set character data handler $data	the second parameter data contains the character data as a string
function bool xml set character data handler	returns true on success or false on failure
function bool xml set character data handler resource $parser callable $handler	set up character data handler
function xml set default handler $parser	a reference to the xml parser to set up default handler function
function xml set default handler $parser	the first parameter parser is a reference to the xml parser calling the handler
function xml set default handler $handler	handler is a string containing the name of a function that must exist when xml_parse() is called for parser
function xml set default handler $data	the second parameter data contains the character data
function bool xml set default handler	returns true on success or false on failure
function bool xml set default handler resource $parser callable $handler	set up default handler
function xml set external entity ref handler $base	this is the base for resolving the system identifier system_id of the external entity
function xml set external entity ref handler $public_id	the fifth parameter public_id is the public identifier as specified in the entity declaration or an empty string if none was specified; the whitespace in the public identifier will have been normalized as required by the xml spec
function xml set external entity ref handler $open_entity_names	the second parameter open_entity_names is a space-separated list of the names of the entities that are open for the parse of this entity including the name of the referenced entity
function xml set external entity ref handler $parser	the first parameter parser is a reference to the xml parser calling the handler
function xml set external entity ref handler $handler	handler is a string containing the name of a function that must exist when xml_parse() is called for parser
function xml set external entity ref handler $system_id	the fourth parameter system_id is the system identifier as specified in the entity declaration
function xml set external entity ref handler $parser	a reference to the xml parser to set up external entity reference handler function
function bool xml set external entity ref handler	returns true on success or false on failure
function bool xml set external entity ref handler resource $parser callable $handler	set up external entity reference handler
function xml set notation decl handler $base	this is the base for resolving the system identifier system_id of the notation declaration
function xml set notation decl handler $parser	a reference to the xml parser to set up notation declaration handler function
function xml set notation decl handler $system_id	system identifier of the external notation declaration
function xml set notation decl handler $parser	the first parameter parser is a reference to the xml parser calling the handler
function xml set notation decl handler $handler	handler is a string containing the name of a function that must exist when xml_parse() is called for parser
function xml set notation decl handler $notation_name	this is the notations name as per the notation format described above
function xml set notation decl handler $public_id	public identifier of the external notation declaration
function bool xml set notation decl handler	returns true on success or false on failure
function bool xml set notation decl handler resource $parser callable $handler	set up notation declaration handler
function xml set object $parser	a reference to the xml parser to use inside the object
function xml set object $object	the object where to use the xml parser
function bool xml set object	returns true on success or false on failure
function bool xml set object resource $parser object $object	use xml parser within an object
function xml set processing instruction handler $parser	the first parameter parser is a reference to the xml parser calling the handler
function xml set processing instruction handler $handler	handler is a string containing the name of a function that must exist when xml_parse() is called for parser
function xml set processing instruction handler $data	the third parameter data contains the pi data
function xml set processing instruction handler $target	the second parameter target contains the pi target
function xml set processing instruction handler $parser	a reference to the xml parser to set up processing instruction pi handler function
function bool xml set processing instruction handler	returns true on success or false on failure
function bool xml set processing instruction handler resource $parser callable $handler	set up processing instruction pi handler
function xml set start namespace decl handler $uri	uniform resource identifier uri of namespace
function xml set start namespace decl handler $parser	the first parameter parser is a reference to the xml parser calling the handler
function xml set start namespace decl handler $handler	handler is a string containing the name of a function that must exist when xml_parse() is called for parser
function xml set start namespace decl handler $prefix	the prefix is a string used to reference the namespace within an xml object
function xml set start namespace decl handler $parser	a reference to the xml parser
function bool xml set start namespace decl handler	returns true on success or false on failure
function bool xml set start namespace decl handler resource $parser callable $handler	set up start namespace declaration handler
function xmlrpc set type $type	base64 or datetime
function xmlrpc set type $value	value to set the type
function bool xmlrpc set type	returns true on success or false on failure
function yaml parse file $pos	document to extract from stream -1 for all documents 0 for first document
function yaml parse file $callbacks	content handlers for yaml nodes
function yaml parse file $ndocs	if ndocs is provided then it is filled with the number of documents found in stream
function yaml parse file $filename	path to the file
function mixed yaml parse file	returns the value encoded in input in appropriate php type or false on failure
function mixed yaml parse file string $filename int $pos int $ndocs array $callbacks	parse a yaml stream from a file
function yaml parse url $url	url should be of the form scheme: / /
function yaml parse url $pos	document to extract from stream -1 for all documents 0 for first document
function yaml parse url $callbacks	content handlers for yaml nodes
function yaml parse url $ndocs	if ndocs is provided then it is filled with the number of documents found in stream
function mixed yaml parse url	returns the value encoded in input in appropriate php type or false on failure
function mixed yaml parse url string $url int $pos int $ndocs array $callbacks	parse a yaml stream from a url
function yaz addinfo $id	the connection resource returned by yaz_connect()
function string yaz addinfo	a string containing additional error information or an empty string if the last operation was successful or if no additional information was provided by the server
function string yaz addinfo resource $id	returns additional error information
function yaz ccl conf $id	the connection resource returned by yaz_connect()
function yaz ccl conf $config	an array of configuration
function void yaz ccl conf resource $id array $config	configure ccl parser
function yaz ccl parse $query	the ccl find query
function yaz ccl parse $result	if the function was executed successfully this will be an array containing the valid rpn query under the key rpn
function yaz ccl parse $id	the connection resource returned by yaz_connect()
function bool yaz ccl parse	returns true on success or false on failure
function bool yaz ccl parse resource $id string $query array $result	invoke ccl parser
function yaz close $id	the connection resource returned by yaz_connect()
function bool yaz close	returns true on success or false on failure
function bool yaz close resource $id	close yaz connection
function yaz connect $password	password for authentication
function yaz connect $zurl	a string that takes the form host[:port][ / database]
function yaz connect $persistent	a boolean
function yaz connect $preferredMessageSize	an integer that specifies the maximum byte size of all records to be returned by a target during retrieval
function yaz connect $maximumRecordSize	an integer that specifies the maximum byte size of a single record to be returned by a target during retrieval
function yaz connect $piggyback	a boolean
function yaz connect $group	group for authentication
function yaz connect $cookie	cookie for session yaz proxy
function yaz connect $user	username for authentication
function yaz connect $proxy	proxy for connection yaz proxy
function yaz connect $options	if given as a string it is treated as the z39
function yaz connect $charset	a string that specifies character set to be used in z39
function mixed yaz connect	a connection resource on success false on error
function mixed yaz connect string $zurl mixed $options	prepares for a connection to a z39
function yaz database $id	the connection resource returned by yaz_connect()
function yaz database $databases	a string containing one or more databases
function bool yaz database	returns true on success or false on failure
function bool yaz database resource $id string $databases	specifies the databases within a session
function yaz element $elementset	most servers support f for full records and b for brief records
function yaz element $id	the connection resource returned by yaz_connect()
function bool yaz element	returns true on success or false on failure
function bool yaz element resource $id string $elementset	specifies element-set name for retrieval
function yaz errno $id	the connection resource returned by yaz_connect()
function int yaz errno	returns an error code
function int yaz errno resource $id	returns error number
function yaz es result $id	the connection resource returned by yaz_connect()
function array yaz es result	returns array with element targetreference for the reference for the extended service operation generated and returned from the server
function array yaz es result resource $id	inspects extended services result
function yaz itemorder $args	must be an associative array with information about the item order request to be sent
function yaz itemorder $id	the connection resource returned by yaz_connect()
function void yaz itemorder resource $id array $args	prepares for z39
function yaz present $id	the connection resource returned by yaz_connect()
function bool yaz present	returns true on success or false on failure
function bool yaz present resource $id	prepares for retrieval z39
function yaz range $start	specifies the position of the first record to be retrieved
function yaz range $id	the connection resource returned by yaz_connect()
function yaz range $number	specifies the number of records to be retrieved
function yaz record $type	the type specifies the form of the returned record
function yaz record $string	the record is returned as a string for simple display
function yaz record $pos	the record position
function yaz record $database	the name of database associated with record at the position is returned as a string
function yaz record $id	the connection resource returned by yaz_connect()
function yaz record $syntax	the syntax of the record is returned as a string i
function yaz record $xml	the record is returned as an xml string if possible
function yaz record $array	the record is returned as an array that reflects the grs-1 structure
function yaz record $raw	the record is returned as a string in its original form
function string yaz record	returns the record at position pos or an empty string if no record exists at the given position
function string yaz record resource $id int $pos string $type	returns a record
function yaz scan result $result	if given this array will be modified to hold additional information taken from the scan response: number - number of entries returned stepsize - step size position - position of term status - scan status
function yaz scan result $id	the connection resource returned by yaz_connect()
function array yaz scan result	returns an array 0
function array yaz scan result resource $id array $result	returns scan response result
function yaz schema $schema	must be specified as an oid object identifier in a raw dot-notation like 1
function yaz schema $id	the connection resource returned by yaz_connect()
function void yaz schema resource $id string $schema	specifies schema for retrieval
function yaz search $type	this parameter represents the query type - only rpn is supported now in which case the third argument specifies a type-1 query in prefix query notation
function yaz search $query	the rpn query is a textual representation of the type-1 query as defined by the z39
function yaz search $id	the connection resource returned by yaz_connect()
function bool yaz search	returns true on success or false on failure
function bool yaz search resource $id string $type string $query	prepares for a search
function yaz sort $criteria	a string that takes the form field1 flags1 field2 flags2 where field1 specifies the primary attributes for sort field2 seconds etc
function yaz sort $s	case sensitive sorting
function yaz sort $id	the connection resource returned by yaz_connect()
function yaz sort $d	sort descending
function yaz sort $i	case insensitive sorting
function yaz sort $a	sort ascending
function void yaz sort resource $id string $criteria	sets sorting criteria
function yaz syntax $id	the connection resource returned by yaz_connect()
function yaz syntax $syntax	the syntax must be specified as an oid object identifier in a raw dot-notation like 1
function void yaz syntax resource $id string $syntax	specifies the preferred record syntax for retrieval
function yaz wait $timeout	sets timeout in seconds
function yaz wait $options	an associative array of options: timeout sets timeout in seconds
function yaz wait $event	a boolean
function mixed yaz wait	returns true on success or false on failure
function mixed yaz wait array $options	wait for z39
function yp err string $errorcode	the error code
function string yp err string	returns the error message as a string
function string yp err string int $errorcode	returns the error string associated with the given error code
function int yp errno	returns one of the yperr_xxx error constants
function yp first $domain	the nis domain name
function yp first $map	the nis map
function array yp first	returns the first key-value pair as an array on success or false on errors
function array yp first string $domain string $map	returns the first key-value pair from the named map
function string yp get default domain	returns the default domain of the node or false
function string yp get default domain	fetches the machine's default nis domain
function yp master $domain	the nis domain name
function yp master $map	the nis map
function yp match $key	this key must be exact
function yp match $domain	the nis domain name
function yp match $map	the nis map
function string yp match	returns the value or false on errors
function string yp match string $domain string $map string $key	returns the matched line
function int yp order	returns the order number for a map or false on error
function int yp order string $domain string $map	returns the order number for a map
function int zend thread id	returns the thread id as an integer
function int zend thread id	returns a unique identifier for the current thread
function string zend version	returns the zend engine version number as a string
function string zend version	gets the version of the current zend engine
function zip close $zip	a zip file previously opened with zip_open()
function void zip close resource $zip	close a zip file archive
function zip entry compressedsize $zip_entry	a directory entry returned by zip_read()
function int zip entry compressedsize	the compressed size
function int zip entry compressedsize resource $zip_entry	retrieve the compressed size of a directory entry
function zip entry filesize $zip_entry	a directory entry returned by zip_read()
function int zip entry filesize	the size of the directory entry
function int zip entry filesize resource $zip_entry	retrieve the actual file size of a directory entry
function zip entry read $zip_entry	a directory entry returned by zip_read()
function zip entry read $length	the number of bytes to return
function string zip entry read	returns the data read empty string on end of a file or false on error
function string zip entry read resource $zip_entry int $length	read from an open directory entry
function zip open $filename	the file name of the zip archive to open
function resource zip open	returns a resource handle for later use with zip_read() and zip_close() or returns the number of error if filename does not exist or in case of other error
function resource zip open string $filename	open a zip file archive
function string zlib get coding type	possible return values are gzip deflate or false
GearmanClient add Options $options	the options to add
GearmanClient bool add Options	always returns true
GearmanClient bool add Options int $options	add client options
GearmanClient add Server $host	the job server host name
GearmanClient add Server $port	the job server port
GearmanClient bool add Server	returns true on success or false on failure
GearmanClient bool add Server string $host int $port	add a job server to the client
GearmanClient add Servers $servers	a comma-separated list of servers each server specified in the format host:port
GearmanClient bool add Servers	returns true on success or false on failure
GearmanClient bool add Servers string $servers	add a list of job servers to the client
GearmanClient add Task $unique	a unique id used to identify a particular task
GearmanClient add Task $workload	serialized data to be processed
GearmanClient add Task $context	application context to associate with a task
GearmanClient add Task $function_name	a registered function the worker is to execute
GearmanClient GearmanTask add Task	a gearmantask object or false if the task could not be added
GearmanClient GearmanTask add Task string $function_name string $workload mixed $context string $unique	add a task to be run in parallel
GearmanClient add Task High $unique	a unique id used to identify a particular task
GearmanClient add Task High $workload	serialized data to be processed
GearmanClient add Task High $context	application context to associate with a task
GearmanClient add Task High $function_name	a registered function the worker is to execute
GearmanClient GearmanTask add Task High	a gearmantask object or false if the task could not be added
GearmanClient GearmanTask add Task High string $function_name string $workload mixed $context string $unique	add a high priority task to run in parallel
GearmanClient add Task Low $unique	a unique id used to identify a particular task
GearmanClient add Task Low $workload	serialized data to be processed
GearmanClient add Task Low $context	application context to associate with a task
GearmanClient add Task Low $function_name	a registered function the worker is to execute
GearmanClient GearmanTask add Task Low	a gearmantask object or false if the task could not be added
GearmanClient GearmanTask add Task Low string $function_name string $workload mixed $context string $unique	add a low priority task to run in parallel
GearmanClient add Task Status $job_handle	the job handle for the task to get status for
GearmanClient add Task Status $context	data to be passed to the status callback generally a reference to an array or object
GearmanClient GearmanTask add Task Status	a gearmantask object
GearmanClient GearmanTask add Task Status string $job_handle string $context	add a task to get status
GearmanClient bool clear Callbacks	always returns true
GearmanClient bool clear Callbacks	clear all task callback functions
GearmanClient GearmanClient clone	a gearmanclient on success false on failure
GearmanClient GearmanClient clone	create a copy of a gearmanclient object
GearmanClient string data	the same string data set with gearmanclient::setdata()
GearmanClient string data	get the application data deprecated
GearmanClient do High Background $workload	serialized data to be processed
GearmanClient do High Background $unique	a unique id used to identify a particular task
GearmanClient do High Background $function_name	a registered function the worker is to execute
GearmanClient string do High Background	the job handle for the submitted task
GearmanClient string do High Background string $function_name string $workload string $unique	run a high priority task in the background
GearmanClient string do Job Handle	the job handle for the running task
GearmanClient string do Job Handle	get the job handle for the running task
GearmanClient do Low $workload	serialized data to be processed
GearmanClient do Low $unique	a unique id used to identify a particular task
GearmanClient do Low $function_name	a registered function the worker is to execute
GearmanClient string do Low	a string representing the results of running a task
GearmanClient string do Low string $function_name string $workload string $unique	run a single low priority task
GearmanClient do Low Background $workload	serialized data to be processed
GearmanClient do Low Background $unique	a unique id used to identify a particular task
GearmanClient do Low Background $function_name	a registered function the worker is to execute
GearmanClient string do Low Background	the job handle for the submitted task
GearmanClient string do Low Background string $function_name string $workload string $unique	run a low priority task in the background
GearmanClient do Normal $workload	serialized data to be processed
GearmanClient do Normal $unique	a unique id used to identify a particular task
GearmanClient do Normal $function_name	a registered function the worker is to execute
GearmanClient string do Normal	a string representing the results of running a task
GearmanClient string do Normal string $function_name string $workload string $unique	run a single task and return a result
GearmanClient echo $workload	some arbitrary serialized data to be echo back
GearmanClient bool echo	returns true on success or false on failure
GearmanClient bool echo string $workload	send data to all job servers to see if they echo it back deprecated
GearmanClient int get Errno	a valid gearman errno
GearmanClient int get Errno	get an errno value
GearmanClient job Status $job_handle	the job handle assigned by the gearman server
GearmanClient array job Status	an array containing status information for the job corresponding to the supplied job handle
GearmanClient array job Status string $job_handle	get the status of a background job
GearmanClient ping $workload	some arbitrary serialized data to be echo back
GearmanClient bool ping	returns true on success or false on failure
GearmanClient bool ping string $workload	send data to all job servers to see if they echo it back
GearmanClient int return Code	a valid gearman return code
GearmanClient int return Code	get the last gearman return code
GearmanClient bool run Tasks	returns true on success or false on failure
GearmanClient bool run Tasks	run a list of tasks in parallel
GearmanClient set Complete Callback $callback	a function to be called
GearmanClient bool set Complete Callback	returns true on success or false on failure
GearmanClient bool set Complete Callback callable $callback	set a function to be called on task completion
GearmanClient set Context $context	arbitrary context data
GearmanClient bool set Context	always returns true
GearmanClient bool set Context string $context	set application context
GearmanClient bool set Data	always returns true
GearmanClient bool set Data string $data	set application data deprecated
GearmanClient set Data Callback $callback	a function or method to call
GearmanClient bool set Data Callback	returns true on success or false on failure
GearmanClient bool set Data Callback callable $callback	callback function when there is a data packet for a task
GearmanClient set Exception Callback $callback	function to call when the worker throws an exception
GearmanClient bool set Exception Callback	returns true on success or false on failure
GearmanClient bool set Exception Callback callable $callback	set a callback for worker exceptions
GearmanClient set Fail Callback $callback	a function to call
GearmanClient bool set Fail Callback	returns true on success or false on failure
GearmanClient bool set Fail Callback callable $callback	set callback for job failure
GearmanClient set Status Callback $callback	a function to call
GearmanClient bool set Status Callback	returns true on success or false on failure
GearmanClient bool set Status Callback callable $callback	set a callback for collecting task status
GearmanClient set Workload Callback $callback	a function to call
GearmanClient bool set Workload Callback	returns true on success or false on failure
GearmanClient bool set Workload Callback callable $callback	set a callback for accepting incremental data updates
GearmanClient int timeout	timeout in milliseconds to wait for i / o activity
GearmanClient int timeout	get current socket i / o activity timeout value
GearmanJob - construct	create a gearmanjob instance
GearmanJob data $data	arbitrary serialized data
GearmanJob bool data	returns true on success or false on failure
GearmanJob bool data string $data	send data for a running job deprecated
GearmanJob exception $exception	an exception description
GearmanJob bool exception	returns true on success or false on failure
GearmanJob bool exception string $exception	send exception for running job deprecated
GearmanJob bool fail	returns true on success or false on failure
GearmanJob bool fail	send fail status deprecated
GearmanJob int return Code	a valid gearman return code
GearmanJob int return Code	get last return code
GearmanJob send Data $data	arbitrary serialized data
GearmanJob bool send Data	returns true on success or false on failure
GearmanJob bool send Data string $data	send data for a running job
GearmanJob send Exception $exception	an exception description
GearmanJob bool send Exception	returns true on success or false on failure
GearmanJob bool send Exception string $exception	send exception for running job exception
GearmanJob send Status $denominator	the denominator of the precentage completed expressed as a fraction
GearmanJob send Status $numerator	the numerator of the precentage completed expressed as a fraction
GearmanJob bool send Status	returns true on success or false on failure
GearmanJob bool send Status int $numerator int $denominator	send status
GearmanJob set Return $gearman_return_t	a valid gearman return value
GearmanJob bool set Return	description
GearmanJob bool set Return int $gearman_return_t	set a return value
GearmanJob status $denominator	the denominator of the precentage completed expressed as a fraction
GearmanJob status $numerator	the numerator of the precentage completed expressed as a fraction
GearmanJob bool status	returns true on success or false on failure
GearmanJob bool status int $numerator int $denominator	send status deprecated
GearmanJob warning $warning	a warning messages
GearmanJob bool warning	returns true on success or false on failure
GearmanJob bool warning string $warning	send a warning deprecated
GearmanJob string workload	serialized data
GearmanJob string workload	get workload
GearmanJob int workload Size	the size in bytes
GearmanJob int workload Size	get size of work load
GearmanTask - construct	create a gearmantask instance
GearmanTask string data	the serialized data or false if no data is present
GearmanTask string data	get data returned for a task
GearmanTask int data Size	the data size or false if there is no data
GearmanTask int data Size	get the size of returned data
GearmanTask string function Name	a function name
GearmanTask string function Name	get associated function name
GearmanTask bool is Known	true if the task is known false otherwise
GearmanTask bool is Known	determine if task is known
GearmanTask bool is Running	true if the task is running false otherwise
GearmanTask bool is Running	test whether the task is currently running
GearmanTask string job Handle	the opaque job handle
GearmanTask string job Handle	get the job handle
GearmanTask int return Code	a valid gearman return code
GearmanTask int return Code	get the last return code
GearmanTask int task Denominator	a number between 0 and 100 or false if cannot be determined
GearmanTask int task Denominator	get completion percentage denominator
GearmanTask int task Numerator	a number between 0 and 100 or false if cannot be determined
GearmanTask int task Numerator	get completion percentage numerator
GearmanTask string uuid	the unique identifier or false if no identifier is assigned
GearmanTask string uuid	get the unique identifier for a task deprecated
GearmanWorker add Options $option	the options to be added
GearmanWorker bool add Options	always returns true
GearmanWorker bool add Options int $option	add worker options
GearmanWorker add Servers $servers	a comma separated list of job servers in the format host:port
GearmanWorker bool add Servers	returns true on success or false on failure
GearmanWorker bool add Servers string $servers	add job servers
GearmanWorker void clone	create a copy of the worker
GearmanWorker - construct	create a gearmanworker instance
GearmanWorker echo $workload	arbitrary serialized data
GearmanWorker bool echo	standard gearman return value
GearmanWorker bool echo string $workload	test job server response
GearmanWorker string error	an error string
GearmanWorker string error	get the last error encountered
GearmanWorker int options	the options currently set for the worker
GearmanWorker int options	get worker options
GearmanWorker register $timeout	an interval of time in seconds
GearmanWorker register $function_name	the name of a function to register with the job server
GearmanWorker bool register	a standard gearman return value
GearmanWorker bool register string $function_name int $timeout	register a function with the job server
GearmanWorker set Id $id	a string identifier
GearmanWorker bool set Id	returns true on success or false on failure
GearmanWorker bool set Id string $id	give the worker an identifier so it can be tracked when asking gearmand for the list of available workers
GearmanWorker set Timeout $timeout	an interval of time in milliseconds
GearmanWorker bool set Timeout	always returns true
GearmanWorker bool set Timeout int $timeout	set socket i / o activity timeout
GearmanWorker unregister $function_name	the name of a function to register with the job server
GearmanWorker bool unregister	a standard gearman return value
GearmanWorker bool unregister string $function_name	unregister a function name with the job servers
GearmanWorker bool unregister All	a standard gearman return value
GearmanWorker bool unregister All	unregister all function names with the job servers
GearmanWorker bool wait	returns true on success or false on failure
GearmanWorker bool wait	wait for activity from one of the job servers
GearmanWorker bool work	returns true on success or false on failure
GearmanWorker bool work	wait for and perform jobs
Gender\Gender connect $dsn	dsn to open
Gender\Gender boolean connect	boolean as success of failure
Gender\Gender construct $dsn	dsn to open
Gender\Gender string construct string $dsn	construct the gender object
Gender\Gender get $name	name to check
Gender\Gender get $country	country id identified by gender class constant
Gender\Gender integer get	returns gender of the name
Gender\Gender integer get string $name integer $country	get gender of a name
Gender\Gender is Nick $name1	name to check
Gender\Gender is Nick $country	country id identified by gender class constant
Gender\Gender is Nick $name0	name to check
Gender\Gender array is Nick	returns true on success or false on failure
Gender\Gender array is Nick string $name0 string $name1 integer $country	check if the name0 is an alias of the name1
Gender\Gender similar Names $name	name to check
Gender\Gender similar Names $country	country id identified by gender class constant
Gender\Gender array similar Names	returns an array with the similar names found
Gender\Gender array similar Names string $name integer $country	get similar names
Generator mixed key	returns the yielded key
Generator mixed key	get the yielded key
Generator void rewind	rewind the iterator
Generator throw $exception	exception to throw into the generator
Generator mixed throw	returns the yielded value
Generator mixed throw Exception $exception	throw an exception into the generator
Generator void wakeup	serialize callback
GlobIterator int count	the number of returned directories and files as an integer
GlobIterator int count	get the number of directories and files
Gmagick addimage $source	the source gmagick object
Gmagick Gmagick addimage	the gmagick object with image added
Gmagick Gmagick addimage Gmagick $Gmagick	adds new image to gmagick object image list
Gmagick addnoiseimage $noise_type	the type of the noise
Gmagick Gmagick addnoiseimage	the gmagick object with noise added
Gmagick annotateimage $GmagickDraw	the gmagickdraw object that contains settings for drawing the text
Gmagick annotateimage $y	vertical offset in pixels to the baseline of text
Gmagick annotateimage $angle	the angle at which to write the text
Gmagick annotateimage $text	the string to draw
Gmagick annotateimage $x	horizontal offset in pixels to the left of text
Gmagick Gmagick annotateimage	the gmagick object with annotation made
Gmagick blurimage $sigma	standard deviation
Gmagick blurimage $radius	blur radius
Gmagick Gmagick blurimage	the blurred gmagick object
Gmagick borderimage $height	border height
Gmagick borderimage $width	border width
Gmagick borderimage $color	gmagickpixel object or a string containing the border color
Gmagick Gmagick borderimage	the gmagick object with border defined
Gmagick Gmagick borderimage GmagickPixel $color int $width int $height	surrounds the image with a border
Gmagick charcoalimage $sigma	the standard deviation of the gaussian in pixels
Gmagick charcoalimage $radius	the radius of the gaussian in pixels not counting the center pixel
Gmagick Gmagick charcoalimage	the gmagick object with charcoal simulation
Gmagick construct $filename	the path to an image to load or array of paths
Gmagick string construct	returns a new gmagick object on success
Gmagick cropimage $height	the height of the crop
Gmagick cropimage $y	the y coordinate of the cropped regions top left corner
Gmagick cropimage $width	the width of the crop
Gmagick cropimage $x	the x coordinate of the cropped regions top left corner
Gmagick Gmagick cropimage	the cropped gmagick object
Gmagick cyclecolormapimage $displace	the amount to displace the colormap
Gmagick Gmagick cyclecolormapimage	returns self on success
Gmagick Gmagick cyclecolormapimage int $displace	displaces an image's colormap
Gmagick Gmagick despeckleimage	the despeckled gmagick object on success
Gmagick Gmagick despeckleimage	the despeckleimage purpose
Gmagick Gmagick destroy	returns true on success
Gmagick Gmagick destroy	the destroy purpose
Gmagick drawimage $GmagickDraw	the drawing operations to render on the image
Gmagick Gmagick drawimage	the drawn gmagick object
Gmagick edgeimage $radius	the radius of the operation
Gmagick Gmagick edgeimage	the gmagick object with edges enhanced
Gmagick Gmagick edgeimage float $radius	enhance edges within the image
Gmagick embossimage $sigma	the sigma of the effect
Gmagick embossimage $radius	the radius of the effect
Gmagick Gmagick embossimage	the embossed gmagick object
Gmagick Gmagick enhanceimage	the enhanced gmagick object
Gmagick Gmagick enhanceimage	improves the quality of a noisy image
Gmagick Gmagick equalizeimage	the equalized gmagick object
Gmagick gammaimage $gamma	the amount of gamma-correction
Gmagick Gmagick gammaimage	the gamma corrected gmagick object
Gmagick string getcopyright	returns a string containing the copyright notice of graphicsmagick and magickwand c api
Gmagick string getfilename	returns a string on success
Gmagick string getfilename	the filename associated with an image sequence
Gmagick array getimageblueprimary	array consisting of x and y coordinates of point
Gmagick array getimageblueprimary	returns the chromaticy blue primary point
Gmagick int getimagecolors	the number of colors in image
Gmagick int getimagecompose	returns the composite operator associated with the image
Gmagick int getimagedelay	returns the composite operator associated with the image
Gmagick int getimagedepth	image depth
Gmagick int getimagedispose	returns the dispose method on success
Gmagick array getimageextrema	returns an associative array with the keys min and max
Gmagick array getimageextrema	gets the extrema for the image
Gmagick string getimagefilename	returns a string with the filename of the image
Gmagick string getimageformat	returns a string containing the image format on success
Gmagick float getimagegamma	returns the image gamma on success
Gmagick array getimagegreenprimary	returns an array with the keys x and y on success
Gmagick array getimagegreenprimary	returns the chromaticy green primary point
Gmagick int getimageheight	returns the image height in pixels
Gmagick array getimagehistogram	returns the image histogram as an array of gmagickpixel objects
Gmagick array getimagehistogram	gets the image histogram
Gmagick int getimageindex	index of current active image
Gmagick int getimageindex	gets the index of the current active image
Gmagick int getimageiterations	returns the image iterations as an integer
Gmagick int getimagematte	returns true if the image has a matte channel otherwise false
Gmagick int getimagematte	check if the image has a matte channel
Gmagick void getimagemattecolor	returns the image matte color
Gmagick array getimageredprimary	returns the chromaticity red primary point as an array with the keys x and y
Gmagick array getimageredprimary	returns the chromaticity red primary point
Gmagick int getimagerenderingintent	extracts a region of the image and returns it as a a new wand
Gmagick array getimageresolution	returns the resolution as an array
Gmagick array getimageresolution	gets the image x and y resolution
Gmagick int getimagescene	returns the image scene
Gmagick int getimageunits	returns the image units of resolution
Gmagick int getimagewidth	returns the image width
Gmagick string getpackagename	returns the graphicsmagick package name as a string
Gmagick array getquantumdepth	returns the gmagick quantum depth as a string
Gmagick string getreleasedate	returns the graphicsmagick release date as a string
Gmagick array getsize	returns the size associated with the gmagick object as an array with the keys columns and rows
Gmagick array getsize	returns the size associated with the gmagick object
Gmagick array getversion	returns the graphicsmagick api version as a string and as a number
Gmagick array getversion	returns the graphicsmagick api version
Gmagick mixed hasnextimage	returns true if the object has more images when traversing the list in the forward direction returns false if there are none
Gmagick mixed hasnextimage	checks if the object has more images
Gmagick mixed haspreviousimage	returns true if the object has more images when traversing the list in the reverse direction returns false if there are none
Gmagick mixed haspreviousimage	checks if the object has a previous image
Gmagick implodeimage $radius	the radius of the implode
Gmagick mixed implodeimage	returns imploded gmagick object
Gmagick mixed implodeimage float $radius	creates a new image as a copy
Gmagick labelimage $label	the label to add
Gmagick mixed labelimage	gmagick with label
Gmagick levelimage $blackPoint	the image black point
Gmagick levelimage $channel	provide any channel constant that is valid for your channel mode
Gmagick levelimage $whitePoint	the image white point
Gmagick levelimage $gamma	the gamma value
Gmagick mixed levelimage	gmagick object with image levelled
Gmagick mixed levelimage float $blackPoint float $gamma float $whitePoint int $channel	adjusts the levels of an image
Gmagick mixed magnifyimage	magnified gmagick object
Gmagick mixed magnifyimage	scales an image proportionally 2x
Gmagick mapimage $gmagick	the reference image
Gmagick mapimage $dither	set this integer value to something other than zero to dither the mapped image
Gmagick Gmagick mapimage	gmagick object
Gmagick motionblurimage $angle	apply the effect along this angle
Gmagick motionblurimage $sigma	the standard deviation of the gaussian in pixels
Gmagick motionblurimage $radius	the radius of the gaussian in pixels not counting the center pixel
Gmagick normalizeimage $channel	identify which channel to normalize
Gmagick void normalizeimage int $channel	enhances the contrast of a color image
Gmagick oilpaintimage $radius	the radius of the circular neighborhood
Gmagick void oilpaintimage float $radius	simulates an oil painting
Gmagick profileimage $profile	the profile
Gmagick profileimage $name	name of profile to add or remove: icc iptc or generic profile
Gmagick void profileimage string $name string $profile	adds or removes a profile from an image
Gmagick quantizeimage $numColors	the number of colors
Gmagick quantizeimage $measureError	a value other than zero measures the difference between the original and quantized images
Gmagick quantizeimage $colorspace	perform color reduction in this colorspace typically rgbcolorspace
Gmagick quantizeimage $treeDepth	normally this integer value is zero or one
Gmagick quantizeimage $dither	a value other than zero distributes the difference between an original image and the corresponding color reduced algorithm to neighboring pixels along a hilbert curve
Gmagick void quantizeimage int $numColors int $colorspace int $treeDepth bool $dither bool $measureError	analyzes the colors within a reference image
Gmagick quantizeimages $numColors	the number of colors
Gmagick quantizeimages $measureError	a value other than zero measures the difference between the original and quantized images
Gmagick quantizeimages $colorspace	perform color reduction in this colorspace typically rgbcolorspace
Gmagick quantizeimages $treeDepth	normally this integer value is zero or one
Gmagick quantizeimages $dither	a value other than zero distributes the difference between an original image and the corresponding color reduced algorithm to neighboring pixels along a hilbert curve
Gmagick void quantizeimages int $numColors int $colorspace int $treeDepth bool $dither bool $measureError	the quantizeimages purpose
Gmagick array queryfontmetrics	the gmagick object on success
Gmagick array queryfontmetrics GmagickDraw $draw string $text	returns an array representing the font metrics
Gmagick array queryfonts	the gmagick object on success
Gmagick array queryfonts string $pattern	returns the configured fonts
Gmagick queryformats $pattern	specifies a pointer to a text string containing a pattern
Gmagick array queryformats	the gmagick object on success
Gmagick read $filename	the image filename
Gmagick readimageblob $imageContents	content of image
Gmagick readimageblob $filename	the image filename
Gmagick readimagefile $fp	the file descriptor
Gmagick void readimagefile resource $fp string $filename	the readimagefile purpose
Gmagick removeimageprofile $name	name of profile to return: icc iptc or generic profile
Gmagick string removeimageprofile	the gmagick object on success
Gmagick resampleimage $blur	the blur factor where larger than 1 is blurry smaller than 1 is sharp
Gmagick resampleimage $yResolution	the new image y resolution
Gmagick resampleimage $xResolution	the new image x resolution
Gmagick resampleimage $filter	image filter to use
Gmagick rollimage $y	the y offset
Gmagick rollimage $x	the x offset
Gmagick void rollimage int $x int $y	offsets an image
Gmagick rotateimage $degrees	the number of degrees to rotate the image
Gmagick rotateimage $color	the background pixel
Gmagick Gmagick rotateimage	the gmagick object on success
Gmagick Gmagick rotateimage mixed $color float $degrees	rotates an image
Gmagick scaleimage $width	the number of columns in the scaled image
Gmagick scaleimage $height	the number of rows in the scaled image
Gmagick Gmagick scaleimage	the gmagick object on success
Gmagick Gmagick scaleimage int $width int $height bool $fit	scales the size of an image
Gmagick separateimagechannel $channel	identify which channel to extract: redchannel greenchannel bluechannel opacitychannel cyanchannel magentachannel yellowchannel blackchannel
Gmagick Gmagick separateimagechannel	the gmagick object on success
Gmagick Gmagick separateimagechannel int $channel	separates a channel from the image
Gmagick bool set Compression Quality	the gmagick object on success
Gmagick bool set Compression Quality int $quality	sets the object's default compression quality
Gmagick setimagebackgroundcolor $color	the background pixel wand
Gmagick Gmagick setimagebackgroundcolor	the gmagick object on success
Gmagick setimageblueprimary $y	the blue primary y-point
Gmagick setimageblueprimary $x	the blue primary x-point
Gmagick Gmagick setimageblueprimary	the gmagick object on success
Gmagick setimagebordercolor $color	the border pixel wand
Gmagick Gmagick setimagebordercolor	the gmagick object on success
Gmagick setimagechanneldepth $depth	the image depth in bits
Gmagick setimagechanneldepth $channel	identify which channel to extract: redchannel greenchannel bluechannel opacitychannel cyanchannel magentachannel yellowchannel blackchannel
Gmagick Gmagick setimagechanneldepth	the gmagick object on success
Gmagick setimagecolorspace $colorspace	the image colorspace: undefinedcolorspace rgbcolorspace graycolorspace transparentcolorspace ohtacolorspace xyzcolorspace ycbcrcolorspace ycccolorspace yiqcolorspace ypbprcolorspace ypbprcolorspace yuvcolorspace cmykcolorspace srgbcolorspace hslcolorspace or hwbcolorspace
Gmagick Gmagick setimagecolorspace	the gmagick object on success
Gmagick setimagecompose $composite	the image composite operator
Gmagick Gmagick setimagecompose	the gmagick object on success
Gmagick setimagedispose $disposeType	the image disposal type
Gmagick Gmagick setimagedispose	the gmagick object on success
Gmagick setimagefilename $filename	the image filename
Gmagick Gmagick setimagefilename	the gmagick object on success
Gmagick setimagegamma $gamma	the image gamma
Gmagick Gmagick setimagegamma	the gmagick object on success
Gmagick setimagegreenprimary $y	the chromaticity green primary y-point
Gmagick setimagegreenprimary $x	the chromaticity green primary x-point
Gmagick Gmagick setimagegreenprimary	the gmagick object on success
Gmagick Gmagick setimagegreenprimary float $x float $y	tsets the image chromaticity green primary point
Gmagick setimageindex $index	the scene number
Gmagick Gmagick setimageindex	the gmagick object on success
Gmagick setimageinterlacescheme $interlace	the image interlace scheme: nointerlace lineinterlace planeinterlace partitioninterlace
Gmagick Gmagick setimageinterlacescheme	the gmagick object on success
Gmagick setimageiterations $iterations	the image delay in 1 / 100th of a second
Gmagick Gmagick setimageiterations	the gmagick object on success
Gmagick setimageprofile $profile	the profile
Gmagick setimageprofile $name	name of profile to add or remove: icc iptc or generic profile
Gmagick Gmagick setimageprofile	the gmagick object on success
Gmagick setimageredprimary $y	the red primary y-point
Gmagick setimageredprimary $x	the red primary x-point
Gmagick Gmagick setimageredprimary	the gmagick object on success
Gmagick setimagerenderingintent $rendering_intent	the image rendering intent: undefinedintent saturationintent perceptualintent absoluteintent or relativeintent
Gmagick Gmagick setimagerenderingintent	the gmagick object on success
Gmagick setimagescene $scene	the image scene number
Gmagick Gmagick setimagescene	the gmagick object on success
Gmagick setimagetype $imgType	the image type: undefinedtype bileveltype grayscaletype grayscalemattetype palettetype palettemattetype truecolortype truecolormattetype colorseparationtype colorseparationmattetype or optimizetype
Gmagick Gmagick setimagetype	the gmagick object on success
Gmagick setimageunits $resolution	the image units of resolution : undefinedresolution pixelsperinchresolution or pixelspercentimeterresolution
Gmagick Gmagick setimageunits	the gmagick object on success
Gmagick setsamplingfactors $factors	an array of doubles representing the sampling factor for each color component in rgb order
Gmagick Gmagick setsamplingfactors	the gmagick object on success
Gmagick setsize $rows	the height in pixels
Gmagick setsize $columns	the width in pixels
Gmagick Gmagick setsize	the gmagick object on success
Gmagick solarizeimage $threshold	define the extent of the solarization
Gmagick Gmagick solarizeimage	the gmagick object on success
Gmagick Gmagick solarizeimage int $threshold	applies a solarizing effect to the image
Gmagick spreadimage $radius	choose a random pixel in a neighborhood of this extent
Gmagick Gmagick spreadimage	the gmagick object on success
Gmagick Gmagick spreadimage float $radius	randomly displaces each pixel in a block
Gmagick Gmagick stripimage	the gmagick object on success
Gmagick trimimage $fuzz	by default target must match a particular pixel color exactly
Gmagick Gmagick trimimage	the gmagick object
Gmagick Gmagick trimimage float $fuzz	remove edges from the image
Gmagick writeimage $filename	the image filename
Gmagick Gmagick writeimage	the gmagick object
GmagickDraw arc $ey	ending y ordinate of bounding rectangle
GmagickDraw arc $sx	starting x ordinate of bounding rectangle
GmagickDraw arc $sy	starting y ordinate of bounding rectangle
GmagickDraw arc $ed	ending degrees of rotation
GmagickDraw arc $ex	ending x ordinate of bounding rectangle
GmagickDraw arc $sd	starting degrees of rotation
GmagickDraw GmagickDraw arc	the gmagickdraw object on success
GmagickDraw GmagickDraw arc float $sx float $sy float $ex float $ey float $sd float $ed	draws an arc
GmagickDraw bezier $coordinate_array	coordinates array
GmagickDraw GmagickDraw bezier	the gmagickdraw object on success
GmagickDraw GmagickDraw bezier array $coordinate_array	draws a bezier curve
GmagickDraw ellipse $start	starting rotation in degrees
GmagickDraw ellipse $rx	radius in x
GmagickDraw ellipse $ox	origin x ordinate
GmagickDraw ellipse $end	ending rotation in degrees
GmagickDraw ellipse $ry	radius in y
GmagickDraw ellipse $oy	origin y ordinate
GmagickDraw GmagickDraw ellipse	the gmagickdraw object on success
GmagickDraw float getfillopacity	returns the opacity used when drawing using the fill color or fill texture
GmagickDraw string getfont	returns a string on success and false if no font is set
GmagickDraw string getfont	returns the font
GmagickDraw int getfontweight	returns an int on success and 0 if no weight is set
GmagickDraw int getfontweight	returns the font weight
GmagickDraw float getstrokeopacity	returns a double describing the opacity
GmagickDraw float getstrokewidth	returns a double describing the stroke width
GmagickDraw string gettextencoding	returns a string specifying the code set or false if text encoding is not set
GmagickDraw string gettextencoding	returns the code set used for text annotations
GmagickDraw line $sx	starting x ordinate
GmagickDraw line $ey	ending y ordinate
GmagickDraw line $ex	ending x ordinate
GmagickDraw line $sy	starting y ordinate
GmagickDraw GmagickDraw line	the gmagickdraw object on success
GmagickDraw GmagickDraw line float $sx float $sy float $ex float $ey	the line purpose
GmagickDraw polygon $coordinates	coordinate array
GmagickDraw GmagickDraw polygon	the gmagickdraw object on success
GmagickDraw GmagickDraw polygon array $coordinates	draws a polygon
GmagickDraw polyline $coordinate_array	the array of coordinates
GmagickDraw GmagickDraw polyline	the gmagickdraw object on success
GmagickDraw GmagickDraw polyline array $coordinate_array	draws a polyline
GmagickDraw rectangle $x1	x ordinate of first coordinate
GmagickDraw rectangle $x2	x ordinate of second coordinate
GmagickDraw rectangle $y2	y ordinate of second coordinate
GmagickDraw rectangle $y1	y ordinate of first coordinate
GmagickDraw GmagickDraw rectangle	the gmagickdraw object on success
GmagickDraw GmagickDraw rectangle float $x1 float $y1 float $x2 float $y2	draws a rectangle
GmagickDraw rotate $degrees	degrees of rotation
GmagickDraw GmagickDraw rotate	the gmagickdraw object on success
GmagickDraw setfillopacity $fill_opacity	fill opacity
GmagickDraw GmagickDraw setfillopacity	the gmagickdraw object on success
GmagickDraw GmagickDraw setfillopacity float $fill_opacity	the setfillopacity purpose
GmagickDraw setstrokeopacity $stroke_opacity	stroke opacity
GmagickDraw GmagickDraw setstrokeopacity	the gmagickdraw object on success
GmagickDraw setstrokewidth $width	stroke width
GmagickDraw GmagickDraw setstrokewidth	the gmagickdraw object on success
GmagickDraw settextencoding $encoding	character string specifying text encoding
GmagickDraw GmagickDraw settextencoding	the gmagickdraw object on success
GmagickDraw GmagickDraw settextencoding string $encoding	specifies the text code set
GmagickPixel construct $color	the optional color string to use as the initial value of this object
GmagickPixel string construct	the gmagickpixel object on success
GmagickPixel string construct string $color	the gmagickpixel constructor
GmagickPixel getcolorvalue $color	the channel to check specified as one of the gmagick channel constants
GmagickPixel float getcolorvalue	the value of the channel as a normalized floating-point number throwing gmagickpixelexception on error
GmagickPixel float getcolorvalue int $color	gets the normalized value of the provided color channel
GmagickPixel setcolor $color	the color definition to use in order to initialise the gmagickpixel object
GmagickPixel GmagickPixel setcolor	the gmagickpixel object on success
GmagickPixel GmagickPixel setcolor string $color	sets the color
GmagickPixel setcolorvalue $color	one of the gmagick channel color constants
GmagickPixel setcolorvalue $value	the value to set this channel to ranging from 0 to 1
GmagickPixel GmagickPixel setcolorvalue	the gmagickpixel object on success
GmagickPixel GmagickPixel setcolorvalue int $color float $value	sets the normalized value of one of the channels
HaruAnnotation set Border Style $dash_on	the dash style
HaruAnnotation set Border Style $width	the width of the border line
HaruAnnotation set Border Style $dash_off	the dash style
HaruAnnotation bool set Border Style	returns true on success
HaruAnnotation bool set Border Style float $width int $dash_on int $dash_off	set the border style of the annotation
HaruAnnotation set Icon $icon	the style of the icon
HaruAnnotation bool set Icon	returns true on success
HaruAnnotation bool set Icon int $icon	set the icon style of the annotation
HaruDestination bool set Fit	returns true on success
HaruDestination bool set Fit	set the appearance of the page to fit the window
HaruDestination bool set Fit B	returns true on success
HaruDestination bool set Fit B	set the appearance of the page to fit the bounding box of the page within the window
HaruDestination set Fit BH $top	the top coordinates of the page
HaruDestination bool set Fit BH	returns true on success
HaruDestination bool set Fit BH float $top	set the appearance of the page to fit the width of the bounding box
HaruDestination set Fit H $top	the top position of the page
HaruDestination bool set Fit H	returns true on success
HaruDestination bool set Fit H float $top	set the appearance of the page to fit the window width
HaruDestination set Fit V $left	the left position of the page
HaruDestination bool set Fit V	returns true on success
HaruDestination bool set Fit V float $left	set the appearance of the page to fit the window height
HaruDoc object add Page	returns a new harupage instance
HaruDoc object add Page	add new page to the document
HaruDoc add Page Label $style	the numbering style
HaruDoc add Page Label $first_page	the first page included into the labeling range
HaruDoc add Page Label $first_num	the first page number in this range
HaruDoc add Page Label $prefix	the prefix for the page label
HaruDoc bool add Page Label	returns true on success
HaruDoc create Outline $encoder	a valid haruencoder instance or null
HaruDoc create Outline $title	the caption of new outline object
HaruDoc create Outline $parent_outline	a valid haruoutline instance or null
HaruDoc object create Outline	returns a new haruoutline instance
HaruDoc object get Current Encoder	returns haruencoder currently used in the document or false if encoder is not set
HaruDoc object get Current Encoder	get haruencoder currently used in the document
HaruDoc object get Current Page	returns harupage instance on success or false if there is no current page at the moment
HaruDoc object get Current Page	return current page of the document
HaruDoc get Encoder $encoding	the encoding name
HaruDoc object get Encoder	returns a haruencoder instance for the specified encoding
HaruDoc object get Encoder string $encoding	get haruencoder instance for the specified encoding
HaruDoc get Font $fontname	the name of the font
HaruDoc get Font $encoding	the encoding to use
HaruDoc object get Font	returns a harufont instance with the specified fontname and encoding
HaruDoc object get Font string $fontname string $encoding	get harufont instance
HaruDoc get Info Attr $type	the type of the attribute
HaruDoc string get Info Attr	returns the string value of the specified document attribute
HaruDoc string get Info Attr int $type	get current value of the specified document attribute
HaruDoc int get Page Mode	returns the page mode currently set in the document
HaruDoc int get Page Mode	get current page mode
HaruDoc int get Stream Size	returns the size of the data in the temporary stream of the document
HaruDoc insert Page $page	a valid harupage instance
HaruDoc object insert Page	returns a new harupage instance
HaruDoc object insert Page object $page	insert new page just before the specified page
HaruDoc load JPEG $filename	a valid jpeg image file
HaruDoc object load JPEG	returns a new haruimage instance
HaruDoc object load JPEG string $filename	load a jpeg image
HaruDoc load Raw $width	the width of the image
HaruDoc load Raw $color_space	the color space of the image
HaruDoc load Raw $height	the height of the image
HaruDoc load Raw $filename	the name of a raw image file
HaruDoc object load Raw	returns a haruimage instance
HaruDoc object load Raw string $filename int $width int $height int $color_space	load a raw image
HaruDoc load TTC $index	the index of the font in the collection file
HaruDoc load TTC $embed	when set to true the glyph data of the font is embedded into the pdf file otherwise only the matrix data is included
HaruDoc load TTC $fontfile	the truetype collection file
HaruDoc string load TTC	returns the name of the loaded font on success
HaruDoc string load TTC string $fontfile int $index bool $embed	load the font with the specified index from ttc file
HaruDoc load TTF $fontfile	the ttf file to load
HaruDoc load TTF $embed	when set to true the glyph data of the font is embedded into the pdf file otherwise only the matrix data is included
HaruDoc string load TTF	returns the name of the loaded font on success
HaruDoc string load TTF string $fontfile bool $embed	load ttf font file
HaruDoc load Type1 $pfmfile	path to a pfa / pfb file optional
HaruDoc load Type1 $afmfile	path to an afm file
HaruDoc string load Type1	returns the name of the loaded font on success
HaruDoc string load Type1 string $afmfile string $pfmfile	load type1 font
HaruDoc bool output	returns true on success
HaruDoc bool output	write the document data to the output buffer
HaruDoc read From Stream $bytes	the bytes parameter specifies how many bytes to read though the stream may contain less bytes than requested
HaruDoc string read From Stream	returns data from the temporary stream
HaruDoc bool reset Stream	returns true on success
HaruDoc bool reset Stream	rewind the temporary stream
HaruDoc bool save To Stream	returns true on success
HaruDoc bool save To Stream	save the document into a temporary stream
HaruDoc set Encryption Mode $key_len	the encryption key length in bytes
HaruDoc set Encryption Mode $mode	the encryption mode to use
HaruDoc bool set Encryption Mode	returns true on success
HaruDoc bool set Encryption Mode int $mode int $key_len	set encryption mode for the document
HaruDoc set Info Attr $type	the type of the attribute
HaruDoc set Info Attr $info	the value of the attribute
HaruDoc bool set Info Attr	returns true on success
HaruDoc bool set Info Attr int $type string $info	set the info attribute of the document
HaruDoc set Open Action $destination	a valid harudestination instance
HaruDoc bool set Open Action	returns true on success
HaruDoc bool set Open Action object $destination	define which page is shown when the document is opened
HaruDoc set Page Layout $layout	the following values are accepted: harudoc::page_layout_single - only one page is displayed
HaruDoc bool set Page Layout	returns true on success
HaruDoc bool set Page Layout int $layout	set how pages should be displayed
HaruDoc set Page Mode $mode	the following values are accepted: harudoc::page_mode_use_none - display the document with neither outline nor thumbnail
HaruDoc bool set Page Mode	returns true on success
HaruDoc bool set Page Mode int $mode	set how the document should be displayed
HaruDoc set Pages Configuration $page_per_pages	the numbers of pages that a pages object can contain
HaruDoc bool set Pages Configuration	returns true on success
HaruDoc bool set Pages Configuration int $page_per_pages	set the number of pages per set of pages
HaruDoc set Password $user_password	the password of the user
HaruDoc set Password $owner_password	the password of the owner which can change permissions of the document
HaruDoc bool set Password	returns true on success
HaruDoc bool set Password string $owner_password string $user_password	set owner and user passwords for the document
HaruDoc set Permission $permission	the values is a combination of these flags: harudoc::enable_read - user can read the document
HaruDoc bool set Permission	returns true on success
HaruDoc bool set Permission int $permission	set permissions for the document
HaruDoc bool use CNSEncodings	returns true on success
HaruDoc bool use CNSEncodings	enable chinese simplified encodings
HaruDoc bool use CNSFonts	returns true on success
HaruDoc bool use CNSFonts	enable builtin chinese simplified fonts
HaruDoc bool use JPEncodings	returns true on success
HaruDoc bool use JPEncodings	enable japanese encodings
HaruDoc bool use JPFonts	returns true on success
HaruDoc bool use JPFonts	enable builtin japanese fonts
HaruDoc bool use KREncodings	returns true on success
HaruDoc bool use KREncodings	enable korean encodings
HaruDoc bool use KRFonts	returns true on success
HaruDoc bool use KRFonts	enable builtin korean fonts
HaruEncoder int get Type	returns the type of the encoder
HaruEncoder get Unicode $character	the character code to convert
HaruEncoder int get Unicode int $character	convert the specified character to unicode
HaruFont int get Cap Height	returns the distance from the baseline of uppercase letters
HaruFont int get Descent	return the vertical descent of the font
HaruFont get Text Width $text	the text to measure
HaruFont array get Text Width	returns the total width of the text number of characters number of words and number of spaces in the given text
HaruFont get Unicode Width $character	the code of the character
HaruFont int get Unicode Width	returns the width of the character in the font
HaruFont measure Text $text	the text to fit the width
HaruFont measure Text $word_wrap	when this parameter is set to true the function emulates word wrapping and doesnt include the part of the current word if reached the end of the area
HaruFont measure Text $word_space	the word spacing
HaruFont measure Text $char_space	the character spacing
HaruFont measure Text $font_size	the size of the font
HaruFont measure Text $width	the width of the area to put the text to
HaruFont int measure Text	returns the number of characters which can be included within the specified width
HaruImage int get Bits Per Component	returns the number of bits used to describe each color component of the image
HaruImage int get Bits Per Component	get the number of bits used to describe each color component of the image
HaruImage int get Height	returns the height of the image
HaruImage array get Size	returns an array with two elements: width and height which contain appropriate dimensions of the image
HaruImage array get Size	get size of the image
HaruImage set Mask Image $mask_image	a valid haruimage instance
HaruImage bool set Mask Image	returns true on success
HaruImage bool set Mask Image object $mask_image	set the image mask
HaruOutline set Destination $destination	a valid harudestination instance
HaruOutline bool set Destination	returns true on success
HaruOutline bool set Destination object $destination	set the destination for the outline
HaruOutline set Opened $opened	true means open false - closed
HaruOutline bool set Opened	returns true on success
HaruOutline bool set Opened bool $opened	set the initial state of the outline
HaruPage arc $ang1	the angle of the beginning
HaruPage arc $ray	the ray of the arc
HaruPage arc $x	horizontal coordinate of the center
HaruPage arc $ang2	the angle of the end
HaruPage arc $y	vertical coordinate of the center
HaruPage bool arc	returns true on success
HaruPage bool arc float $x float $y float $ray float $ang1 float $ang2	append an arc to the current path
HaruPage bool begin Text	returns true on success
HaruPage bool begin Text	begin a text object and set the current text position to 0 0
HaruPage bool close Path	returns true on success
HaruPage bool close Path	append a straight line from the current point to the start point of the path
HaruPage object create Destination	returns a new harudestination instance
HaruPage object create Destination	create new harudestination instance
HaruPage create Link Annotation $rectangle	an array with 4 coordinates of the clickable area
HaruPage create Link Annotation $destination	valid harudestination instance
HaruPage object create Link Annotation	returns a new haruannotation instance
HaruPage object create Link Annotation array $rectangle object $destination	create new haruannotation instance
HaruPage curve To2 $y2	a bezier curve control point
HaruPage curve To2 $x3	the current point moves here
HaruPage curve To2 $x2	a bezier curve control point
HaruPage bool curve To2	returns true on success
HaruPage bool curve To2 float $x2 float $y2 float $x3 float $y3	append a bezier curve to the current path
HaruPage curve To3 $x1	a bezier curve control point
HaruPage curve To3 $x3	the current point moves here
HaruPage curve To3 $y1	a bezier curve control point
HaruPage bool curve To3	returns true on success
HaruPage bool curve To3 float $x1 float $y1 float $x3 float $y3	append a bezier curve to the current path
HaruPage bool end Path	returns true on success
HaruPage bool end Path	end current path object without filling and painting operations
HaruPage bool end Text	returns true on success
HaruPage bool end Text	end current text object
HaruPage eo Fill Stroke $close_path	optional parameter
HaruPage bool eo Fill Stroke	returns true on success
HaruPage bool eo Fill Stroke bool $close_path	fill current path using even-odd rule then paint the path
HaruPage bool fill	returns true on success
HaruPage bool fill	fill current path using nonzero winding number rule
HaruPage array get CMYKFill	returns the current filling color as an array with 4 elements c m y and k
HaruPage array get CMYKFill	get the current filling color
HaruPage array get CMYKStroke	returns the current stroking color as an array with 4 elements c m y and k
HaruPage object get Current Font	returns the currently used font as an instance of harufont
HaruPage float get Current Font Size	returns the current font size
HaruPage array get Current Pos	returns the current position for path painting as an array of with two elements - x and y
HaruPage array get Current Text Pos	returns the current position for text printing as an array with 2 elements - x and y
HaruPage array get Dash	returns the current dash pattern as an array of two elements - pattern and phase or false if dash pattern was not set
HaruPage int get Filling Color Space	returns the current filling color space
HaruPage float get Gray Stroke	returns the current stroking color
HaruPage float get Horizontal Scaling	returns the current value of horizontal scaling
HaruPage float get Horizontal Scaling	get the current value of horizontal scaling
HaruPage float get Line Width	returns the current line width
HaruPage float get Miter Limit	returns the value of the miter limit
HaruPage float get Miter Limit	get the value of miter limit
HaruPage int get Stroking Color Space	returns the current stroking color space
HaruPage array get Text Matrix	returns the current text transformation matrix of the page as an array of 6 elements: a b c d x and y
HaruPage int get Text Rendering Mode	returns the current text rendering mode
HaruPage array get Trans Matrix	returns the current transformation matrix of the page as an array of 6 elements: a b c d x and y
HaruPage float get Width	returns the width of the page
HaruPage float get Word Space	returns the current value of word spacing
HaruPage measure Text $text	the text to measure
HaruPage measure Text $width	the width of the line
HaruPage measure Text $wordwrap	when this parameter is set to true the function emulates word wrapping by stopping after the last full word delimited by whitespace that can fit on the line
HaruPage int measure Text	returns the byte length of characters which can be included within the specified width
HaruPage int measure Text string $text float $width bool $wordwrap	calculate the byte length of characters which can be included on one line of the specified width
HaruPage move Text Pos $x	the specified text position offset
HaruPage move Text Pos $y	the specified text position offset
HaruPage move Text Pos $set_leading	if set to true the function sets the text leading to - y
HaruPage bool move Text Pos	returns true on success
HaruPage bool move Text Pos float $x float $y bool $set_leading	move text position to the specified offset
HaruPage move To $x	a new starting point coordinate
HaruPage move To $y	a new starting point coordinate
HaruPage bool move To	returns true on success
HaruPage bool move To float $x float $y	set starting point for new drawing path
HaruPage bool move To Next Line	returns true on success
HaruPage bool move To Next Line	move text position to the start of the next line
HaruPage rectangle $height	the height of the rectangle
HaruPage rectangle $width	the width of the rectangle
HaruPage rectangle $x	the left border of the rectangle
HaruPage rectangle $y	the lower border of the rectangle
HaruPage bool rectangle	returns true on success
HaruPage bool rectangle float $x float $y float $width float $height	append a rectangle to the current path
HaruPage set Char Space $char_space	the new character spacing for the page
HaruPage bool set Char Space	returns true on success
HaruPage bool set Char Space float $char_space	set character spacing for the page
HaruPage bool set CMYKFill	returns true on success
HaruPage bool set CMYKFill float $c float $m float $y float $k	set filling color for the page
HaruPage bool set CMYKStroke	returns true on success
HaruPage bool set CMYKStroke float $c float $m float $y float $k	set stroking color for the page
HaruPage set Dash $pattern	an array 8 elements max which contains a pattern of dashes and gaps used for lines on the page
HaruPage set Dash $phase	the phase on which the pattern begins
HaruPage bool set Dash	returns true on success
HaruPage bool set Dash array $pattern int $phase	set the dash pattern for the page
HaruPage set Font And Size $font	a valid harufont instance
HaruPage set Font And Size $size	the size of the font
HaruPage bool set Font And Size	returns true on success
HaruPage bool set Font And Size object $font float $size	set font and fontsize for the page
HaruPage set Gray Stroke $value	the value of gray level between 0 and 1
HaruPage bool set Gray Stroke	returns true on success
HaruPage bool set Gray Stroke float $value	sets stroking color for the page
HaruPage set Horizontal Scaling $scaling	the horizontal scaling for text showing on the page
HaruPage bool set Horizontal Scaling	returns true on success
HaruPage bool set Horizontal Scaling float $scaling	set horizontal scaling for the page
HaruPage set Line Width $width	the defined line width for the page
HaruPage bool set Line Width	returns true on success
HaruPage bool set Line Width float $width	set line width for the page
HaruPage set Miter Limit $limit	defines the current value of the miter limit of the page
HaruPage bool set Miter Limit	returns true on success
HaruPage bool set RGBStroke	returns true on success
HaruPage bool set RGBStroke float $r float $g float $b	set stroking color for the page
HaruPage set Rotate $angle	must be a multiple of 90 degrees
HaruPage bool set Rotate	returns true on success
HaruPage bool set Rotate int $angle	set rotation angle of the page
HaruPage set Size $direction	must be one of the following values: harupage::portrait harupage::landscape
HaruPage set Size $size	must be one of the following values: harupage::size_letter harupage::size_legal harupage::size_a3 harupage::size_a4 harupage::size_a5 harupage::size_b4 harupage::size_b5 harupage::size_executive harupage::size_us4x6 harupage::size_us4x8 harupage::size_us5x7 harupage::size_comm10
HaruPage bool set Size	returns true on success
HaruPage bool set Size int $size int $direction	set size and direction of the page
HaruPage set Text Rendering Mode $mode	must be one of the following values: harupage::fill harupage::stroke harupage::fill_then_stroke harupage::invisible harupage::fill_clipping harupage::stroke_clipping harupage::fill_stroke_clipping harupage::clipping
HaruPage bool set Text Rendering Mode	returns true on success
HaruPage bool set Text Rendering Mode int $mode	set text rendering mode for the page
HaruPage set Text Rise $rise	defines the current value of text rising
HaruPage bool set Text Rise	returns true on success
HaruPage set Width $width	defines width of the page
HaruPage bool set Width	returns true on success
HaruPage bool set Width float $width	set width of the page
HaruPage set Word Space $word_space	defines word spacing for the page
HaruPage bool set Word Space	returns true on success
HaruPage bool set Word Space float $word_space	set word spacing for the page
HaruPage stroke $close_path	closes the current path if set to true
HaruPage bool stroke	returns true on success
HaruPage bool stroke bool $close_path	paint current path
HaruPage text Rect $text	the text to print
HaruPage text Rect $right	right border of the text area
HaruPage text Rect $align	text alignment
HaruPage text Rect $bottom	lower border of the text area
HaruPage text Rect $top	top border of the text area
HaruPage text Rect $left	left border of the text area
HaruPage bool text Rect	returns true on success
HaruPage bool text Rect float $left float $top float $right float $bottom string $text int $align	print the text inside the specified region
HRTime\PerformanceCounter int get Elapsed Ticks	returns integer indicating elapsed ticks
HRTime\PerformanceCounter int get Elapsed Ticks	get elapsed ticks for all intervals
HRTime\PerformanceCounter int get Frequency	returns integer indicating the timer frequency
HRTime\PerformanceCounter int get Frequency	timer frequency in ticks per second
HRTime\PerformanceCounter bool is Running	returns boolean indicating whetehr the measurement is running
HRTime\PerformanceCounter bool is Running	whether the measurement is running
HRTime\PerformanceCounter void start	start time measurement
HRTime\PerformanceCounter void stop	stop time measurement
HRTime\StopWatch get Elapsed Time $unit	time unit represented by a hrtime\unit constant
HRTime\StopWatch float get Elapsed Time	returns float indicating elapsed time
HRTime\StopWatch float get Elapsed Time integer $unit	get elapsed time for all intervals
HRTime\StopWatch get Last Elapsed Time $unit	time unit represented by a hrtime\unit constant
HRTime\StopWatch float get Last Elapsed Time	returns float indicating elapsed time
HRTime\StopWatch float get Last Elapsed Time integer $unit	get elapsed time for the last interval
Imagick adaptive Blur Image $channel	provide any channel constant that is valid for your channel mode
Imagick adaptive Blur Image $sigma	the standard deviation of the gaussian in pixels
Imagick adaptive Blur Image $radius	the radius of the gaussian in pixels not counting the center pixel
Imagick bool adaptive Blur Image	returns true on success
Imagick bool adaptive Blur Image float $radius float $sigma int $channel	adds adaptive blur filter to image
Imagick adaptive Threshold Image $width	width of the local neighborhood
Imagick adaptive Threshold Image $offset	the mean offset
Imagick adaptive Threshold Image $height	height of the local neighborhood
Imagick bool adaptive Threshold Image	returns true on success
Imagick bool adaptive Threshold Image int $width int $height int $offset	selects a threshold for each pixel based on a range of intensity
Imagick affine Transform Image $matrix	the affine matrix
Imagick bool affine Transform Image	returns true on success
Imagick bool affine Transform Image ImagickDraw $matrix	transforms an image
Imagick animate Images $x_server	x server address
Imagick bool animate Images	returns true on success
Imagick bool animate Images string $x_server	animates an image or images
Imagick auto Level Image $CHANNEL	which channel should the auto-levelling should be done on
Imagick void auto Level Image string $CHANNEL	description
Imagick blur Image $channel	the channeltype constant
Imagick blur Image $sigma	standard deviation
Imagick blur Image $radius	blur radius
Imagick bool blur Image	returns true on success
Imagick border Image $bordercolor	imagickpixel object or a string containing the border color
Imagick border Image $height	border height
Imagick border Image $width	border width
Imagick bool border Image	returns true on success
Imagick bool border Image mixed $bordercolor int $width int $height	surrounds the image with a border
Imagick void brightness Contrast Image string $brightness string $contrast string $CHANNEL	description
Imagick charcoal Image $sigma	the standard deviation of the gaussian in pixels
Imagick charcoal Image $radius	the radius of the gaussian in pixels not counting the center pixel
Imagick bool charcoal Image	returns true on success
Imagick bool clear	returns true on success
Imagick void clip Image Path string $pathname string $inside	description
Imagick clip Path Image $pathname	the name of the path
Imagick clip Path Image $inside	if true later operations take effect inside clipping path
Imagick bool clip Path Image	returns true on success
Imagick bool clip Path Image string $pathname bool $inside	clips along the named paths from the 8bim profile
Imagick clut Image $channel	the channeltype constant
Imagick clut Image $lookup_table	imagick object containing the color lookup table
Imagick bool clut Image	returns true on success
Imagick bool clut Image Imagick $lookup_table float $channel	replaces colors in the image
Imagick color Floodfill Image $fuzz	the amount of fuzz
Imagick color Floodfill Image $x	x start position of the floodfill
Imagick color Floodfill Image $fill	imagickpixel object containing the fill color
Imagick color Floodfill Image $bordercolor	imagickpixel object containing the border color
Imagick color Floodfill Image $y	y start position of the floodfill
Imagick bool color Floodfill Image	returns true on success
Imagick bool color Floodfill Image mixed $fill float $fuzz mixed $bordercolor int $x int $y	changes the color value of any pixel that matches target
Imagick void color Matrix Image string $color_matrix	description
Imagick combine Images $channelType	provide any channel constant that is valid for your channel mode
Imagick Imagick combine Images	returns true on success
Imagick comment Image $comment	the comment to add
Imagick bool comment Image	returns true on success
Imagick compare Image Channels $image	imagick object containing the image to compare
Imagick compare Image Channels $metricType	one of the metric type constants
Imagick compare Image Channels $channelType	provide any channel constant that is valid for your channel mode
Imagick array compare Image Channels	array consisting of new_wand and distortion
Imagick array compare Image Channels Imagick $image int $channelType int $metricType	returns the difference in one or more images
Imagick compare Image Layers $method	one of the layer method constants
Imagick Imagick compare Image Layers	returns true on success
Imagick Imagick compare Image Layers int $method	returns the maximum bounding region between images
Imagick compare Images $compare	an image to compare to
Imagick compare Images $metric	provide a valid metric type constant
Imagick array compare Images	returns true on success
Imagick array compare Images Imagick $compare int $metric	compares an image to a reconstructed image
Imagick composite Image $composite_object	imagick object which holds the composite image
Imagick composite Image $x	the column offset of the composited image
Imagick composite Image $compose	composite operator
Imagick composite Image $channel	provide any channel constant that is valid for your channel mode
Imagick composite Image $y	the row offset of the composited image
Imagick bool composite Image	returns true on success
Imagick bool composite Image Imagick $composite_object int $composite int $x int $y int $channel	composite one image onto another
Imagick construct $files	the path to an image to load or an array of paths
Imagick mixed construct	returns a new imagick object on success
Imagick mixed construct mixed $files	the imagick constructor
Imagick contrast Image $sharpen	the sharpen value
Imagick bool contrast Image	returns true on success
Imagick bool contrast Image bool $sharpen	change the contrast of the image
Imagick contrast Stretch Image $channel	provide any channel constant that is valid for your channel mode
Imagick contrast Stretch Image $white_point	the white point
Imagick contrast Stretch Image $black_point	the black point
Imagick bool contrast Stretch Image	returns true on success
Imagick bool contrast Stretch Image float $black_point float $white_point int $channel	enhances the contrast of a color image
Imagick convolve Image $channel	provide any channel constant that is valid for your channel mode
Imagick convolve Image $kernel	the convolution kernel
Imagick bool convolve Image	returns true on success
Imagick count $mode	an unused argument
Imagick void count string $mode	description
Imagick crop Image $height	the height of the crop
Imagick crop Image $y	the y coordinate of the cropped regions top left corner
Imagick crop Image $width	the width of the crop
Imagick crop Image $x	the x coordinate of the cropped regions top left corner
Imagick bool crop Image	returns true on success
Imagick crop Thumbnail Image $height	the height of the thumbnail
Imagick crop Thumbnail Image $width	the width of the thumbnail
Imagick bool crop Thumbnail Image	returns true on success
Imagick bool crop Thumbnail Image int $width int $height	creates a crop thumbnail
Imagick Imagick current	returns self on success
Imagick Imagick current	returns a reference to the current imagick object
Imagick cycle Colormap Image $displace	the amount to displace the colormap
Imagick bool cycle Colormap Image	returns true on success
Imagick bool cycle Colormap Image int $displace	displaces an image's colormap
Imagick decipher Image $passphrase	the passphrase
Imagick bool decipher Image	returns true on success
Imagick bool decipher Image string $passphrase	deciphers an image
Imagick delete Image Artifact $artifact	the name of the artifact to delete
Imagick bool delete Image Artifact	returns true on success
Imagick bool delete Image Artifact string $artifact	delete image artifact
Imagick deskew Image $threshold	deskew threshold
Imagick bool deskew Image float $threshold	removes skew from the image
Imagick bool despeckle Image	returns true on success
Imagick bool despeckle Image	reduces the speckle noise in an image
Imagick bool destroy	returns true on success
Imagick bool destroy	destroys the imagick object
Imagick display Image $servername	the x server name
Imagick bool display Image	returns true on success
Imagick bool display Image string $servername	displays an image
Imagick distort Image $bestfit	attempt to resize destination to fit distorted source
Imagick distort Image $method	the method of image distortion
Imagick distort Image $arguments	the arguments for this distortion method
Imagick bool distort Image	returns true on success
Imagick bool distort Image int $method array $arguments bool $bestfit	distorts an image using various distortion methods
Imagick edge Image $radius	the radius of the operation
Imagick bool edge Image	returns true on success
Imagick bool edge Image float $radius	enhance edges within the image
Imagick encipher Image $passphrase	the passphrase
Imagick bool encipher Image	returns true on success
Imagick bool encipher Image string $passphrase	enciphers an image
Imagick bool enhance Image	returns true on success
Imagick bool enhance Image	improves the quality of a noisy image
Imagick bool equalize Image	returns true on success
Imagick evaluate Image $op	the evaluation operator
Imagick evaluate Image $channel	provide any channel constant that is valid for your channel mode
Imagick evaluate Image $constant	the value of the operator
Imagick bool evaluate Image	returns true on success
Imagick bool evaluate Image int $op float $constant int $channel	applies an expression to an image
Imagick export Image Pixels $STORAGE	refer to this list of pixel type constants
Imagick export Image Pixels $height	height of the exported area
Imagick export Image Pixels $map	ordering of the exported pixels
Imagick export Image Pixels $x	x-coordinate of the exported area
Imagick export Image Pixels $width	width of the exported aread
Imagick export Image Pixels $y	y-coordinate of the exported area
Imagick array export Image Pixels	returns an array containing the pixels values
Imagick array export Image Pixels int $x int $y int $width int $height string $map int $STORAGE	exports raw image pixels
Imagick Imagick flatten Images	returns true on success
Imagick forward Fourier Transformimage $magnitude	if true return as magnitude / phase pair otherwise a real / imaginary image pair
Imagick void forward Fourier Transformimage bool $magnitude	description
Imagick frame Image $width	the width of the border
Imagick frame Image $inner_bevel	the inner bevel width
Imagick frame Image $matte_color	imagickpixel object or a string representing the matte color
Imagick frame Image $height	the height of the border
Imagick frame Image $outer_bevel	the outer bevel width
Imagick bool frame Image	returns true on success
Imagick bool frame Image mixed $matte_color int $width int $height int $inner_bevel int $outer_bevel	adds a simulated three-dimensional border
Imagick function Image $function	refer to this list of function constants
Imagick function Image $arguments	array of arguments to pass to this function
Imagick bool function Image	returns true on success
Imagick bool function Image int $function array $arguments int $channel	applies a function on the image
Imagick fx Image $channel	provide any channel constant that is valid for your channel mode
Imagick fx Image $expression	the expression
Imagick Imagick fx Image	returns true on success
Imagick gamma Image $channel	provide any channel constant that is valid for your channel mode
Imagick gamma Image $gamma	the amount of gamma-correction
Imagick bool gamma Image	returns true on success
Imagick gaussian Blur Image $channel	provide any channel constant that is valid for your channel mode
Imagick gaussian Blur Image $sigma	the standard deviation of the gaussian in pixels
Imagick gaussian Blur Image $radius	the radius of the gaussian in pixels not counting the center pixel
Imagick bool gaussian Blur Image	returns true on success
Imagick int get Compression Quality	returns integer describing the compression quality
Imagick string get Copyright	returns a string containing the copyright notice of imagemagick and magickwand c api
Imagick string get Filename	returns a string on success
Imagick string get Filename	the filename associated with an image sequence
Imagick string get Format	returns the format of the image
Imagick int get Gravity	returns the gravity property
Imagick int get Gravity	gets the gravity
Imagick int get Image Alpha Channel	returns a constant defining the current alpha channel value
Imagick int get Image Alpha Channel	gets the image alpha channel
Imagick ImagickPixel get Image Background Color	returns an imagickpixel set to the background color of the image
Imagick string get Image Blob	returns a string containing the image
Imagick string get Image Blob	returns the image sequence as a blob
Imagick array get Image Blue Primary	array consisting of x and y coordinates of point
Imagick array get Image Blue Primary	returns the chromaticy blue primary point
Imagick ImagickPixel get Image Border Color	returns true on success
Imagick get Image Channel Depth $channel	provide any channel constant that is valid for your channel mode
Imagick int get Image Channel Depth	returns true on success
Imagick get Image Channel Distortion $channel	provide any channel constant that is valid for your channel mode
Imagick get Image Channel Distortion $reference	imagick object to compare to
Imagick get Image Channel Distortion $metric	one of the metric type constants
Imagick float get Image Channel Distortion	returns true on success
Imagick float get Image Channel Distortion Imagick $reference int $channel int $metric	compares image channels of an image to a reconstructed image
Imagick get Image Channel Distortions $channel	provide any channel constant that is valid for your channel mode
Imagick get Image Channel Distortions $reference	imagick object containing the reference image
Imagick get Image Channel Distortions $metric	refer to this list of metric type constants
Imagick float get Image Channel Distortions	returns a double describing the channel distortion
Imagick float get Image Channel Distortions Imagick $reference int $metric int $channel	gets channel distortions
Imagick get Image Channel Extrema $channel	provide any channel constant that is valid for your channel mode
Imagick array get Image Channel Extrema	returns true on success
Imagick get Image Channel Kurtosis $channel	provide any channel constant that is valid for your channel mode
Imagick array get Image Channel Kurtosis	returns an array with kurtosis and skewness members
Imagick array get Image Channel Kurtosis int $channel	the getimagechannelkurtosis purpose
Imagick get Image Channel Range $channel	provide any channel constant that is valid for your channel mode
Imagick array get Image Channel Range	returns an array containing minima and maxima values of the channel s
Imagick array get Image Channel Range int $channel	gets channel range
Imagick array get Image Channel Statistics	returns true on success
Imagick get Image Colormap Color $index	the offset into the image colormap
Imagick ImagickPixel get Image Colormap Color	returns true on success
Imagick int get Image Colorspace	returns true on success
Imagick int get Image Compose	returns true on success
Imagick int get Image Delay	returns the image delay
Imagick int get Image Dispose	returns the dispose method on success
Imagick get Image Distortion $reference	imagick object to compare to
Imagick get Image Distortion $metric	one of the metric type constants
Imagick float get Image Distortion	returns the distortion metric used on the image or the best guess thereof
Imagick float get Image Distortion MagickWand $reference int $metric	compares an image to a reconstructed image
Imagick array get Image Extrema	returns an associative array with the keys min and max
Imagick string get Image Format	returns a string containing the image format on success
Imagick float get Image Gamma	returns the image gamma on success
Imagick array get Image Geometry	returns an array with the width / height of the image
Imagick array get Image Geometry	gets the width and height as an associative array
Imagick int get Image Gravity	returns the images gravity property
Imagick int get Image Gravity	gets the image gravity
Imagick int get Image Index	returns an integer containing the index of the image in the stack
Imagick int get Image Index	gets the index of the current active image
Imagick int get Image Iterations	returns the image iterations as an integer
Imagick int get Image Length	returns an int containing the current image size
Imagick string get Image Magick License	returns a string containing the imagemagick license
Imagick bool get Image Matte	returns true on success or false on failure
Imagick bool get Image Matte	return if the image has a matte channel
Imagick ImagickPixel get Image Matte Color	returns imagickpixel object on success
Imagick string get Image Mime Type	description
Imagick array get Image Page	returns the page geometry associated with the image in an array with the keys width height x and y
Imagick array get Image Page	returns the page geometry
Imagick get Image Profiles $only_names	whether to return only profile names
Imagick get Image Profiles $pattern	the pattern for profile names
Imagick array get Image Profiles	returns an array containing the image profiles or profile names
Imagick array get Image Profiles string $pattern bool $only_names	returns the image profiles
Imagick get Image Properties $only_names	whether to return only property names
Imagick get Image Properties $pattern	the pattern for property names
Imagick array get Image Properties	returns an array containing the image properties or property names
Imagick array get Image Properties string $pattern bool $only_names	returns the image properties
Imagick array get Image Red Primary	returns the chromaticity red primary point as an array with the keys x and y
Imagick array get Image Red Primary	returns the chromaticity red primary point
Imagick int get Image Rendering Intent	returns the image rendering intent
Imagick array get Image Resolution	returns the resolution as an array
Imagick int get Image Scene	returns the image scene
Imagick string get Image Signature	returns a string containing the sha-256 hash of the file
Imagick string get Image Signature	generates an sha-256 message digest
Imagick int get Image Type	returns the potential image type
Imagick int get Image Virtual Pixel Method	returns the virtual pixel method on success
Imagick int get Image Virtual Pixel Method	returns the virtual pixel method
Imagick array get Image White Point	returns the chromaticity white point as an associative array with the keys x and y
Imagick array get Image White Point	returns the chromaticity white point
Imagick int get Image Width	returns the image width
Imagick int get Iterator Index	returns an integer containing the index of the image in the stack
Imagick int get Iterator Index	gets the index of the current active image
Imagick get Option $key	the name of the option
Imagick string get Option	returns a value associated with a wand and the specified key
Imagick string get Option string $key	returns a value associated with the specified key
Imagick string get Package Name	returns the imagemagick package name as a string
Imagick array get Page	returns the page geometry associated with the imagick object in an associative array with the keys width height x and y throwing imagickexception on error
Imagick array get Page	returns the page geometry
Imagick ImagickPixelIterator get Pixel Iterator	returns an imagickpixeliterator on success
Imagick get Pixel Region Iterator $x	the x-coordinate of the region
Imagick get Pixel Region Iterator $rows	the height of the region
Imagick get Pixel Region Iterator $columns	the width of the region
Imagick get Pixel Region Iterator $y	the y-coordinate of the region
Imagick ImagickPixelIterator get Pixel Region Iterator	returns an imagickpixeliterator for an image section
Imagick float get Point Size	returns a float containing the point size
Imagick float get Point Size	gets point size
Imagick array get Quantum Depth	returns the imagick quantum depth as a string
Imagick array get Quantum Depth	gets the quantum depth
Imagick array get Quantum Range	returns an associative array containing the quantum range as an integer quantumrangelong and as a string quantumrangestring
Imagick array get Quantum Range	returns the imagick quantum range
Imagick get Resource $type	refer to the list of resourcetype constants
Imagick int get Resource	returns the specified resources memory usage in megabytes
Imagick int get Resource int $type	returns the specified resource's memory usage
Imagick array get Size	returns the size associated with the imagick object as an array with the keys columns and rows
Imagick array get Size	returns the size associated with the imagick object
Imagick int get Size Offset	returns the size offset associated with the imagick object
Imagick int get Size Offset	returns the size offset
Imagick array get Version	returns the imagemagick api version as a string and as a number
Imagick array get Version	returns the imagemagick api version
Imagick bool has Previous Image	returns true if the object has more images when traversing the list in the reverse direction returns false if there are none
Imagick bool has Previous Image	checks if the object has a previous image
Imagick identify Format $embedText	a string containing formatting sequences e
Imagick string|false identify Format string $embedText	description
Imagick implode Image $radius	the radius of the implode
Imagick bool implode Image	returns true on success
Imagick bool implode Image float $radius	creates a new image as a copy
Imagick import Image Pixels $pixels	the array of pixels
Imagick import Image Pixels $height	the image height
Imagick import Image Pixels $map	map of pixel ordering as a string
Imagick import Image Pixels $y	the image y position
Imagick import Image Pixels $width	the image width
Imagick import Image Pixels $x	the image x position
Imagick import Image Pixels $storage	the pixel storage method
Imagick bool import Image Pixels	returns true on success
Imagick bool import Image Pixels int $x int $y int $width int $height string $map int $storage array $pixels	imports image pixels
Imagick inverse Fourier Transform Image $magnitude	if true combine as magnitude / phase pair otherwise a real / imaginary image pair
Imagick inverse Fourier Transform Image $complement	the second image to combine with this one to form either the magnitude / phase or real / imaginary image pair
Imagick void inverse Fourier Transform Image string $complement string $magnitude	description
Imagick label Image $label	the label to add
Imagick bool label Image	returns true on success
Imagick level Image $blackPoint	the image black point
Imagick level Image $channel	provide any channel constant that is valid for your channel mode
Imagick level Image $whitePoint	the image white point
Imagick level Image $gamma	the gamma value
Imagick bool level Image	returns true on success
Imagick bool level Image float $blackPoint float $gamma float $whitePoint int $channel	adjusts the levels of an image
Imagick linear Stretch Image $blackPoint	the image black point
Imagick linear Stretch Image $whitePoint	the image white point
Imagick bool linear Stretch Image	returns true on success
Imagick liquid Rescale Image $delta_x	how much the seam can traverse on x-axis
Imagick liquid Rescale Image $height	the height of the target size
Imagick liquid Rescale Image $rigidity	introduces a bias for non-straight seams
Imagick liquid Rescale Image $width	the width of the target size
Imagick bool liquid Rescale Image	returns true on success
Imagick bool liquid Rescale Image int $width int $height float $delta_x float $rigidity	animates an image or images
Imagick array list Registry	an array containing the key / values from the registry
Imagick array list Registry	description
Imagick bool magnify Image	returns true on success
Imagick bool magnify Image	scales an image proportionally 2x
Imagick matte Floodfill Image $bordercolor	an imagickpixel object or string representing the border color
Imagick matte Floodfill Image $x	the starting x coordinate of the operation
Imagick matte Floodfill Image $fuzz	the fuzz member of image defines how much tolerance is acceptable to consider two colors as the same
Imagick matte Floodfill Image $y	the starting y coordinate of the operation
Imagick matte Floodfill Image $alpha	the level of transparency: 1
Imagick bool matte Floodfill Image	returns true on success
Imagick bool matte Floodfill Image float $alpha float $fuzz mixed $bordercolor int $x int $y	changes the transparency value of a color
Imagick median Filter Image $radius	the radius of the pixel neighborhood
Imagick bool median Filter Image	returns true on success
Imagick bool median Filter Image float $radius	applies a digital filter
Imagick merge Image Layers $layer_method	one of the imagick::layermethod_* constants
Imagick Imagick merge Image Layers	returns an imagick object containing the merged image
Imagick Imagick merge Image Layers int $layer_method	merges image layers
Imagick bool minify Image	returns true on success
Imagick bool minify Image	scales an image proportionally to half its size
Imagick bool modulate Image	returns true on success
Imagick bool modulate Image float $brightness float $saturation float $hue	control the brightness saturation and hue
Imagick montage Image $draw	the font name size and color are obtained from this object
Imagick montage Image $tile_geometry	the number of tiles per row and page e
Imagick montage Image $frame	surround the image with an ornamental border e
Imagick montage Image $mode	thumbnail framing mode see montage mode constants
Imagick montage Image $thumbnail_geometry	preferred image size and border size of each thumbnail e
Imagick Imagick montage Image	returns true on success
Imagick Imagick montage Image ImagickDraw $draw string $tile_geometry string $thumbnail_geometry int $mode string $frame	creates a composite image
Imagick morph Images $number_frames	the number of in-between images to generate
Imagick Imagick morph Images	this method returns a new imagick object on success
Imagick Imagick mosaic Images	returns true on success
Imagick Imagick mosaic Images	forms a mosaic from images
Imagick motion Blur Image $angle	apply the effect along this angle
Imagick motion Blur Image $channel	provide any channel constant that is valid for your channel mode
Imagick motion Blur Image $sigma	the standard deviation of the gaussian in pixels
Imagick motion Blur Image $radius	the radius of the gaussian in pixels not counting the center pixel
Imagick bool motion Blur Image	returns true on success
Imagick negate Image $channel	provide any channel constant that is valid for your channel mode
Imagick negate Image $gray	whether to only negate grayscale pixels within the image
Imagick bool negate Image	returns true on success
Imagick new Image $cols	columns in the new image
Imagick new Image $background	the background color used for this image
Imagick new Image $format	image format
Imagick new Image $rows	rows in the new image
Imagick bool new Image	returns true on success
Imagick bool new Image int $cols int $rows mixed $background string $format	creates a new image
Imagick new Pseudo Image $pseudoString	string containing pseudo image definition
Imagick new Pseudo Image $rows	rows in the new image
Imagick new Pseudo Image $columns	columns in the new image
Imagick bool new Pseudo Image	returns true on success
Imagick bool new Pseudo Image int $columns int $rows string $pseudoString	creates a new image
Imagick bool next Image	returns true on success
Imagick bool next Image	moves to the next image
Imagick normalize Image $channel	provide any channel constant that is valid for your channel mode
Imagick bool normalize Image	returns true on success
Imagick bool normalize Image int $channel	enhances the contrast of a color image
Imagick oil Paint Image $radius	the radius of the circular neighborhood
Imagick bool oil Paint Image	returns true on success
Imagick bool oil Paint Image float $radius	simulates an oil painting
Imagick opaque Paint Image $channel	provide any channel constant that is valid for your channel mode
Imagick opaque Paint Image $fuzz	the amount of fuzz
Imagick opaque Paint Image $invert	if true paints any pixel that does not match the target color
Imagick opaque Paint Image $target	imagickpixel object or a string containing the color to change
Imagick opaque Paint Image $fill	the replacement color
Imagick bool opaque Paint Image	returns true on success
Imagick bool opaque Paint Image mixed $target mixed $fill float $fuzz bool $invert int $channel	changes the color value of any pixel that matches target
Imagick bool optimize Image Layers	returns true on success
Imagick bool optimize Image Layers	removes repeated portions of images to optimize
Imagick ordered Posterize Image $channel	provide any channel constant that is valid for your channel mode
Imagick ordered Posterize Image $threshold_map	a string containing the name of the threshold dither map to use
Imagick bool ordered Posterize Image	returns true on success
Imagick bool ordered Posterize Image string $threshold_map int $channel	performs an ordered dither
Imagick paint Floodfill Image $fuzz	the amount of fuzz
Imagick paint Floodfill Image $x	x start position of the floodfill
Imagick paint Floodfill Image $fill	imagickpixel object or a string containing the fill color
Imagick paint Floodfill Image $bordercolor	imagickpixel object or a string containing the border color
Imagick paint Floodfill Image $channel	provide any channel constant that is valid for your channel mode
Imagick paint Floodfill Image $y	y start position of the floodfill
Imagick bool paint Floodfill Image	returns true on success
Imagick bool paint Floodfill Image mixed $fill float $fuzz mixed $bordercolor int $x int $y int $channel	changes the color value of any pixel that matches target
Imagick paint Opaque Image $target	change this target color to the fill color within the image
Imagick paint Opaque Image $fill	an imagickpixel object or a string representing the fill color
Imagick paint Opaque Image $channel	provide any channel constant that is valid for your channel mode
Imagick paint Opaque Image $fuzz	the fuzz member of image defines how much tolerance is acceptable to consider two colors as the same
Imagick bool paint Opaque Image	returns true on success
Imagick bool paint Opaque Image mixed $target mixed $fill float $fuzz int $channel	change any pixel that matches color
Imagick paint Transparent Image $target	change this target color to specified opacity value within the image
Imagick paint Transparent Image $fuzz	the fuzz member of image defines how much tolerance is acceptable to consider two colors as the same
Imagick paint Transparent Image $alpha	the level of transparency: 1
Imagick bool paint Transparent Image	returns true on success
Imagick ping Image $filename	the filename to read the information from
Imagick bool ping Image	returns true on success
Imagick bool ping Image string $filename	fetch basic attributes about the image
Imagick ping Image Blob $image	a string containing the image
Imagick bool ping Image Blob	returns true on success
Imagick bool ping Image Blob string $image	quickly fetch attributes
Imagick ping Image File $filehandle	an open filehandle to the image
Imagick ping Image File $fileName	optional filename for this image
Imagick bool ping Image File	returns true on success
Imagick bool ping Image File resource $filehandle string $fileName	get basic image attributes in a lightweight manner
Imagick polaroid Image $properties	the polaroid properties
Imagick polaroid Image $angle	the polaroid angle
Imagick bool polaroid Image	returns true on success
Imagick bool posterize Image	returns true on success
Imagick preview Images $preview	preview type
Imagick bool preview Images	returns true on success
Imagick bool preview Images int $preview	quickly pin-point appropriate parameters for image processing
Imagick bool previous Image	returns true on success
Imagick bool previous Image	move to the previous image in the object
Imagick bool profile Image	returns true on success
Imagick bool profile Image string $name string $profile	adds or removes a profile from an image
Imagick query Fonts $pattern	the query pattern
Imagick array query Fonts	returns an array containing the configured fonts
Imagick bool read Image File	returns true on success
Imagick Imagick read Images	the imagick object that contains all the images
Imagick Imagick read Images string $filenames	description
Imagick recolor Image $matrix	the matrix containing the color values
Imagick bool recolor Image	returns true on success
Imagick bool recolor Image array $matrix	recolors image
Imagick bool reduce Noise Image	returns true on success
Imagick bool reduce Noise Image float $radius	smooths the contours of an image
Imagick remap Image $replacement	an imagick object containing the replacement colors
Imagick remap Image $DITHER	refer to this list of dither method constants
Imagick bool remap Image	returns true on success
Imagick bool remap Image Imagick $replacement int $DITHER	remaps image colors
Imagick bool remove Image	returns true on success
Imagick bool render	returns true on success
Imagick reset Image Page $page	the page definition
Imagick bool reset Image Page	returns true on success
Imagick bool reset Image Page string $page	reset image page
Imagick resize Image $columns	width of the image
Imagick resize Image $filter	refer to the list of filter constants
Imagick resize Image $blur	the blur factor where > 1 is blurry < 1 is sharp
Imagick resize Image $bestfit	optional fit parameter
Imagick resize Image $rows	height of the image
Imagick bool resize Image	returns true on success
Imagick bool resize Image int $columns int $rows int $filter float $blur bool $bestfit	scales an image
Imagick rotate Image $background	the background color
Imagick rotate Image $degrees	rotation angle in degrees
Imagick bool rotate Image	returns true on success
Imagick bool rotate Image mixed $background float $degrees	rotates an image
Imagick segment Image $smooth_threshold	eliminates noise from the histogram
Imagick segment Image $verbose	whether to output detailed information about recognised classes
Imagick segment Image $cluster_threshold	a percentage describing minimum number of pixels contained in hexedra before it is considered valid
Imagick segment Image $COLORSPACE	one of the colorspace constants
Imagick bool segment Image int $COLORSPACE float $cluster_threshold float $smooth_threshold bool $verbose	segments an image
Imagick separate Image Channel $channel	which channel to return
Imagick bool separate Image Channel	returns true on success
Imagick bool separate Image Channel int $channel	separates a channel from the image
Imagick bool sepia Tone Image	returns true on success
Imagick bool sepia Tone Image float $threshold	sepia tones an image
Imagick bool set Background Color	returns true on success
Imagick bool set Background Color mixed $background	sets the object's default background color
Imagick bool set Compression	returns true on success
Imagick bool set Compression int $compression	sets the object's default compression type
Imagick bool set Compression Quality	returns true on success
Imagick bool set Compression Quality int $quality	sets the object's default compression quality
Imagick bool set Filename	returns true on success
Imagick bool set Filename string $filename	sets the filename before you read or write the image
Imagick bool set First Iterator	returns true on success
Imagick set Gravity $gravity	the gravity property
Imagick bool set Gravity int $gravity	sets the gravity
Imagick set Image Alpha Channel $mode	one of the imagick::alphachannel_* constants
Imagick bool set Image Alpha Channel	returns true on success
Imagick bool set Image Alpha Channel int $mode	sets image alpha channel
Imagick set Image Artifact $artifact	the name of the artifact
Imagick set Image Artifact $value	the value of the artifact
Imagick bool set Image Artifact	returns true on success
Imagick bool set Image Artifact string $artifact string $value	set image artifact
Imagick bool set Image Blue Primary	returns true on success
Imagick set Image Border Color $border	the border color
Imagick bool set Image Border Color	returns true on success
Imagick bool set Image Colormap Color	returns true on success
Imagick bool set Image Compose	returns true on success
Imagick bool set Image Compose int $compose	sets the image composite operator
Imagick set Image Delay $delay	the amount of time expressed in ticks that the image should be displayed for
Imagick bool set Image Delay	returns true on success
Imagick bool set Image Depth	returns true on success
Imagick bool set Image Dispose	returns true on success
Imagick bool set Image Extent	returns true on success
Imagick bool set Image Extent int $columns int $rows	sets the image size
Imagick bool set Image Filename	returns true on success
Imagick bool set Image Filename string $filename	sets the filename of a particular image
Imagick set Image Format $format	string presentation of the image format
Imagick bool set Image Format	returns true on success
Imagick bool set Image Format string $format	sets the format of a particular image
Imagick set Image Gravity $gravity	the gravity property
Imagick bool set Image Gravity int $gravity	sets the image gravity
Imagick bool set Image Green Primary	returns true on success
Imagick set Image Interpolate Method $method	the method is one of the imagick::interpolate_* constants
Imagick bool set Image Interpolate Method	returns true on success
Imagick set Image Matte $matte	true activates the matte channel and false disables it
Imagick bool set Image Matte	returns true on success
Imagick bool set Image Matte Color	returns true on success
Imagick set Image Orientation $orientation	one of the orientation constants
Imagick bool set Image Orientation	returns true on success
Imagick bool set Image Page	returns true on success
Imagick bool set Image Profile	returns true on success
Imagick bool set Image Property	returns true on success
Imagick bool set Image Property string $name string $value	sets an image property
Imagick bool set Image Red Primary	returns true on success
Imagick bool set Image Rendering Intent	returns true on success
Imagick bool set Image Resolution	returns true on success
Imagick bool set Image Scene	returns true on success
Imagick set Image Ticks Per Second $ticks_per_second	the duration for which an image should be displayed expressed in ticks per second
Imagick bool set Image Ticks Per Second	returns true on success
Imagick bool set Image Ticks Per Second int $ticks_per_second	sets the image ticks-per-second
Imagick bool set Image Type	returns true on success
Imagick bool set Image Virtual Pixel Method	returns true on success
Imagick bool set Image White Point	returns true on success
Imagick bool set Interlace Scheme	returns true on success
Imagick set Iterator Index $index	the position to set the iterator to
Imagick bool set Iterator Index	returns true on success
Imagick bool set Iterator Index int $index	set the iterator position
Imagick bool set Last Iterator	returns true on success
Imagick set Point Size $point_size	point size
Imagick bool set Point Size	returns true on success
Imagick bool set Point Size float $point_size	sets point size
Imagick set Progress Monitor $callback	the progress function to call
Imagick void set Progress Monitor callable $callback	description
Imagick void set Registry string $key string $value	description
Imagick set Resolution $y_resolution	the vertical resolution
Imagick set Resolution $x_resolution	the horizontal resolution
Imagick bool set Resolution	returns true on success
Imagick set Resource Limit $type	refer to the list of resourcetype constants
Imagick set Resource Limit $limit	the resource limit
Imagick bool set Resource Limit	returns true on success
Imagick bool set Resource Limit int $type int $limit	sets the limit for a particular resource in megabytes
Imagick set Size Offset $rows	the height in pixels
Imagick set Size Offset $columns	the width in pixels
Imagick set Size Offset $offset	the image offset
Imagick bool set Size Offset	returns true on success
Imagick bool set Type	returns true on success
Imagick bool shadow Image	returns true on success
Imagick bool shave Image	returns true on success
Imagick sigmoidal Contrast Image $beta	where the midpoint of the gradient will be
Imagick sigmoidal Contrast Image $sharpen	if true increase the contrast if false decrease the contrast
Imagick sigmoidal Contrast Image $alpha	the amount of contrast to apply
Imagick sigmoidal Contrast Image $channel	which color channels the contrast will be applied to
Imagick bool sigmoidal Contrast Image	returns true on success
Imagick bool sigmoidal Contrast Image bool $sharpen float $alpha float $beta int $channel	adjusts the contrast of an image
Imagick sketch Image $angle	apply the effect along this angle
Imagick sketch Image $sigma	the standard deviation of the gaussian in pixels
Imagick sketch Image $radius	the radius of the gaussian in pixels not counting the center pixel
Imagick bool sketch Image	returns true on success
Imagick bool solarize Image	returns true on success
Imagick bool solarize Image int $threshold	applies a solarizing effect to the image
Imagick bool splice Image	returns true on success
Imagick bool spread Image	returns true on success
Imagick bool spread Image float $radius	randomly displaces each pixel in a block
Imagick void statistic Image int $type int $width int $height string $CHANNEL	description
Imagick Imagick stegano Image	returns true on success
Imagick bool stereo Image	returns true on success
Imagick bool stereo Image Imagick $offset_wand	composites two images
Imagick bool strip Image	returns true on success
Imagick sub Image Match $similarity	a new image that displays the amount of similarity at each pixel
Imagick Imagick sub Image Match Imagick $Imagick array $offset float $similarity	description
Imagick bool swirl Image	returns true on success
Imagick bool swirl Image float $degrees	swirls the pixels about the center of the image
Imagick bool texture Image	returns true on success
Imagick bool texture Image Imagick $texture_wand	repeatedly tiles the texture image
Imagick bool threshold Image	returns true on success
Imagick bool threshold Image float $threshold int $channel	changes the value of individual pixels based on a threshold
Imagick thumbnail Image $bestfit	whether to force maximum values
Imagick thumbnail Image $rows	image height
Imagick thumbnail Image $columns	image width
Imagick bool thumbnail Image	returns true on success
Imagick bool thumbnail Image int $columns int $rows bool $bestfit bool $fill	changes the size of an image
Imagick bool tint Image	returns true on success
Imagick string to String	returns the string content on success or an empty string on failure
Imagick string to String	returns the image as a string
Imagick transparent Paint Image $fuzz	the amount of fuzz
Imagick transparent Paint Image $invert	if true paints any pixel that does not match the target color
Imagick transparent Paint Image $target	the target color to paint
Imagick transparent Paint Image $alpha	the level of transparency: 1
Imagick bool transparent Paint Image	returns true on success
Imagick bool transparent Paint Image mixed $target float $alpha float $fuzz bool $invert	paints pixels transparent
Imagick trim Image $fuzz	by default target must match a particular pixel color exactly
Imagick bool trim Image	returns true on success
Imagick bool trim Image float $fuzz	remove edges from the image
Imagick bool unique Image Colors	returns true on success
Imagick bool valid	returns true on success
Imagick wave Image $length	the length of the wave
Imagick wave Image $amplitude	the amplitude of the wave
Imagick bool wave Image	returns true on success
Imagick bool wave Image float $amplitude float $length	applies wave filter to the image
Imagick bool white Threshold Image	returns true on success
Imagick bool white Threshold Image mixed $threshold	force all pixels above the threshold into white
Imagick write Image File $filehandle	filehandle where to write the image
Imagick bool write Image File	returns true on success
Imagick bool write Image File resource $filehandle	writes an image to a filehandle
Imagick bool write Images	returns true on success
Imagick write Images File $filehandle	filehandle where to write the images
Imagick bool write Images File	returns true on success
Imagick bool write Images File resource $filehandle	writes frames to a filehandle
ImagickDraw int get Font Stretch	description
ImagickDraw float get Text Interline Spacing	description
ImagickDraw float get Text Interword Spacing	description
ImagickDraw void reset Vector Graphics	description
ImagickDraw void set Resolution string $x_resolution string $y_resolution	description
ImagickDraw void set Text Interline Spacing float $spacing	description
ImagickDraw void set Text Interword Spacing float $spacing	description
ImagickDraw void set Text Kerning float $kerning	description
ImagickKernel void add Unity Kernel	description
ImagickKernel from Builtin $kernelString	a string that describes the parameters e
ImagickKernel from Builtin $kerneltype	the type of kernel to build e
ImagickKernel ImagickKernel from Builtin string $kernelType string $kernelString	description
ImagickKernel from Matrix $array	which element of the kernel should be used as the origin pixel
ImagickKernel from Matrix $array	a matrix i
ImagickKernel ImagickKernel from Matrix	the generated imagickkernel
ImagickKernel ImagickKernel from Matrix array $matrix array $origin	description
ImagickKernel array get Matrix	a matrix 2d array of the values that represent the kernel
ImagickKernel array get Matrix	description
ImagickKernel void scale	description
ImagickPixel mixed get Color Value Quantum	the quantum value of the color element
ImagickPixel mixed get Color Value Quantum	description
ImagickPixel is Pixel Similar $color	the imagickpixel object to compare this object against
ImagickPixel is Pixel Similar $fuzz	the maximum distance within which to consider these colors as similar
ImagickPixel bool is Pixel Similar	returns true on success
ImagickPixel bool is Pixel Similar ImagickPixel $color float $fuzz	check the distance between this color and another
ImagickPixel void setcolorcount string $colorCount	description
ImagickPixel set Color Value $color	one of the imagick color constants e
ImagickPixel set Color Value $value	the value to set this channel to ranging from 0 to 1
ImagickPixel bool set Color Value	returns true on success
ImagickPixel bool set Color Value int $color float $value	sets the normalized value of one of the channels
ImagickPixel set Color Value Quantum $color	which color element to set e
ImagickPixel set Color Value Quantum $value	the quantum value to set the color element to
ImagickPixel void set Color Value Quantum int $color mixed $value	description
ImagickPixel set HSL $luminosity	the normalized value for luminosity on a scale from black at 0 to white at 1 with the full hs value at 0
ImagickPixel set HSL $hue	the normalized value for hue described as a fractional arc between 0 and 1 of the hue circle where the zero value is red
ImagickPixel set HSL $saturation	the normalized value for saturation with 1 as full saturation
ImagickPixel bool set HSL	returns true on success
ImagickPixel bool set HSL float $hue float $saturation float $luminosity	sets the normalized hsl color
IntlCalendar - construct	private constructor for disallowing instantiation
IntlChar char Age $codepoint	the integer codepoint value e
IntlChar array char Age	the unicode version number as an array
IntlChar array char Age mixed $codepoint	get the age of the code point
IntlChar char Digit Value $codepoint	the integer codepoint value e
IntlChar int char Digit Value	the decimal digit value of codepoint or -1 if it is not a decimal digit character
IntlChar int char Digit Value mixed $codepoint	get the decimal digit value of a decimal digit character
IntlChar char Direction $codepoint	the integer codepoint value e
IntlChar int char Direction	the bidirectional category value; one of the following constants: intlchar::char_direction_left_to_right intlchar::char_direction_right_to_left intlchar::char_direction_european_number intlchar::char_direction_european_number_separator intlchar::char_direction_european_number_terminator intlchar::char_direction_arabic_number intlchar::char_direction_common_number_separator intlchar::char_direction_block_separator intlchar::char_direction_segment_separator intlchar::char_direction_white_space_neutral intlchar::char_direction_other_neutral intlchar::char_direction_left_to_right_embedding intlchar::char_direction_left_to_right_override intlchar::char_direction_right_to_left_arabic intlchar::char_direction_right_to_left_embedding intlchar::char_direction_right_to_left_override intlchar::char_direction_pop_directional_format intlchar::char_direction_dir_non_spacing_mark intlchar::char_direction_boundary_neutral intlchar::char_direction_first_strong_isolate intlchar::char_direction_left_to_right_isolate intlchar::char_direction_right_to_left_isolate intlchar::char_direction_pop_directional_isolate intlchar::char_direction_char_direction_count
IntlChar int char Direction mixed $codepoint	get bidirectional category value for a code point
IntlChar char Type $codepoint	the integer codepoint value e
IntlChar int char Type	returns the general category type which may be one of the following constants: intlchar::char_category_unassigned intlchar::char_category_general_other_types intlchar::char_category_uppercase_letter intlchar::char_category_lowercase_letter intlchar::char_category_titlecase_letter intlchar::char_category_modifier_letter intlchar::char_category_other_letter intlchar::char_category_non_spacing_mark intlchar::char_category_enclosing_mark intlchar::char_category_combining_spacing_mark intlchar::char_category_decimal_digit_number intlchar::char_category_letter_number intlchar::char_category_other_number intlchar::char_category_space_separator intlchar::char_category_line_separator intlchar::char_category_paragraph_separator intlchar::char_category_control_char intlchar::char_category_format_char intlchar::char_category_private_use_char intlchar::char_category_surrogate intlchar::char_category_dash_punctuation intlchar::char_category_start_punctuation intlchar::char_category_end_punctuation intlchar::char_category_connector_punctuation intlchar::char_category_other_punctuation intlchar::char_category_math_symbol intlchar::char_category_currency_symbol intlchar::char_category_modifier_symbol intlchar::char_category_other_symbol intlchar::char_category_initial_punctuation intlchar::char_category_final_punctuation intlchar::char_category_char_category_count
IntlChar int char Type mixed $codepoint	get the general category value for a code point
IntlChar chr $codepoint	the integer codepoint value e
IntlChar string chr	a string containing the single character specified by the unicode code point value
IntlChar string chr mixed $codepoint	return unicode character by code point value
IntlChar digit $codepoint	the integer codepoint value e
IntlChar digit $radix	the radix defaults to 10
IntlChar int digit	returns the numeric value represented by the character in the specified radix or false if there is no value or if the value exceeds the radix
IntlChar int digit string $codepoint int $radix	get the decimal digit value of a code point for a given radix
IntlChar enum Char Names $nameChoice	selector for which kind of names to enumerate
IntlChar enum Char Names $callback	the function that is to be called for each character name
IntlChar enum Char Names $start	the first code point in the enumeration range
IntlChar enum Char Names $limit	one more than the last code point in the enumeration range the first one after the range
IntlChar void enum Char Names mixed $start mixed $limit callable $callback int $nameChoice	enumerate all assigned unicode characters within a range
IntlChar enum Char Types $callback	the function that is to be called for each contiguous range of code points with the same general category
IntlChar void enum Char Types callable $callback	enumerate all code points with their unicode general categories
IntlChar fold Case $codepoint	the integer codepoint value e
IntlChar fold Case $options	either intlchar::fold_case_default default or intlchar::fold_case_exclude_special_i
IntlChar mixed fold Case	returns the simple_case_folding of the code point if any; otherwise the code point itself
IntlChar mixed fold Case mixed $codepoint int $options	perform case folding on a code point
IntlChar for Digit $digit	the number to convert to a character
IntlChar for Digit $radix	the radix defaults to 10
IntlChar int for Digit	the character representation as a string of the specified digit in the specified radix
IntlChar int for Digit int $digit int $radix	get character representation for a given digit and radix
IntlChar get Block Code $codepoint	the integer codepoint value e
IntlChar int get Block Code	returns the block value for codepoint
IntlChar int get Block Code mixed $codepoint	get the unicode allocation block containing a code point
IntlChar get Combining Class $codepoint	the integer codepoint value e
IntlChar int get Combining Class	returns the combining class of the character
IntlChar int get Combining Class mixed $codepoint	get the combining class of a code point
IntlChar get FC NFKC Closure $codepoint	the integer codepoint value e
IntlChar string get FC NFKC Closure	returns the fc_nfkc_closure property string for the codepoint or an empty string if there is none
IntlChar string get FC NFKC Closure mixed $codepoint	get the fc_nfkc_closure property for a code point
IntlChar get Int Property Max Value $property	the unicode property to lookup see the intlchar::property_* constants
IntlChar int get Int Property Max Value	the maximum value returned by intlchar::getintpropertyvalue() for a unicode property
IntlChar int get Int Property Max Value int $property	get the max value for a unicode property
IntlChar get Int Property Min Value $property	the unicode property to lookup see the intlchar::property_* constants
IntlChar int get Int Property Min Value	the maximum value returned by intlchar::getintpropertyvalue() for a unicode property
IntlChar int get Int Property Min Value int $property	get the min value for a unicode property
IntlChar get Int Property Value $property	the unicode property to lookup see the intlchar::property_* constants
IntlChar get Int Property Value $codepoint	the integer codepoint value e
IntlChar int get Int Property Value	returns the numeric value that is directly the property value or for enumerated properties corresponds to the numeric value of the enumerated constant of the respective property value enumeration type
IntlChar int get Int Property Value mixed $codepoint int $property	get the value for a unicode property for a code point
IntlChar get Numeric Value $codepoint	the integer codepoint value e
IntlChar float get Numeric Value	numeric value of codepoint or float -123456789 if none is defined
IntlChar float get Numeric Value mixed $codepoint	get the numeric value for a unicode code point
IntlChar get Property Enum $alias	the property name to be matched
IntlChar int get Property Enum	returns an intlchar::property_ constant value or intlchar::property_invalid_code if the given name does not match any property
IntlChar int get Property Enum string $alias	get the property constant value for a given property name
IntlChar get Property Name $property	the unicode property to lookup see the intlchar::property_* constants
IntlChar get Property Name $nameChoice	selector for which name to get
IntlChar string get Property Name	returns the name or false if either the property or the namechoice is out of range
IntlChar string get Property Name int $property int $nameChoice	get the unicode name for a property
IntlChar get Property Value Enum $property	the unicode property to lookup see the intlchar::property_* constants
IntlChar get Property Value Enum $name	the value name to be matched
IntlChar int get Property Value Enum	returns the corresponding value integer or intlchar::property_invalid_code if the given name does not match any value of the given property or if the property is invalid
IntlChar int get Property Value Enum int $property string $name	get the property value for a given value name
IntlChar has Binary Property $property	the unicode property to lookup see the intlchar::property_* constants
IntlChar has Binary Property $codepoint	the integer codepoint value e
IntlChar bool has Binary Property	returns true or false according to the binary unicode property value for codepoint
IntlChar bool has Binary Property mixed $codepoint int $property	check a binary unicode property for a code point
IntlChar isalpha $codepoint	the integer codepoint value e
IntlChar bool isalpha	returns true if codepoint is a letter character false if not
IntlChar bool isalpha mixed $codepoint	check if code point is a letter character
IntlChar isbase $codepoint	the integer codepoint value e
IntlChar bool isbase	returns true if codepoint is a base character false if not
IntlChar bool isbase mixed $codepoint	check if code point is a base character
IntlChar isblank $codepoint	the integer codepoint value e
IntlChar bool isblank	returns true if codepoint is either a blank or horizontal space character false if not
IntlChar bool isblank mixed $codepoint	check if code point is a blank or horizontal space character
IntlChar iscntrl $codepoint	the integer codepoint value e
IntlChar bool iscntrl	returns true if codepoint is a control character false if not
IntlChar bool iscntrl mixed $codepoint	check if code point is a control character
IntlChar isdefined $codepoint	the integer codepoint value e
IntlChar bool isdefined	returns true if codepoint is a defined character false if not
IntlChar bool isdefined mixed $codepoint	check whether the code point is defined
IntlChar isdigit $codepoint	the integer codepoint value e
IntlChar bool isdigit	returns true if codepoint is a digit character false if not
IntlChar bool isdigit mixed $codepoint	check if code point is a digit character
IntlChar is IDStart $codepoint	the integer codepoint value e
IntlChar bool is IDStart	returns true if codepoint may start an identifier false if not
IntlChar bool is IDStart mixed $codepoint	check if code point is permissible as the first character in an identifier
IntlChar is ISOControl $codepoint	the integer codepoint value e
IntlChar bool is ISOControl	returns true if codepoint is an iso control code false if not
IntlChar bool is ISOControl mixed $codepoint	check if code point is an iso control code
IntlChar is Java IDPart $codepoint	the integer codepoint value e
IntlChar bool is Java IDPart	returns true if codepoint may occur in a java identifier false if not
IntlChar bool is Java IDPart mixed $codepoint	check if code point is permissible in a java identifier
IntlChar is Java IDStart $codepoint	the integer codepoint value e
IntlChar bool is Java IDStart	returns true if codepoint may start a java identifier false if not
IntlChar bool is Java IDStart mixed $codepoint	check if code point is permissible as the first character in a java identifier
IntlChar is Java Space Char $codepoint	the integer codepoint value e
IntlChar bool is Java Space Char	returns true if codepoint is a space character according to java false if not
IntlChar bool is Java Space Char mixed $codepoint	check if code point is a space character according to java
IntlChar islower $codepoint	the integer codepoint value e
IntlChar bool islower	returns true if codepoint is an ll lowercase letter false if not
IntlChar bool islower mixed $codepoint	check if code point is a lowercase letter
IntlChar is Mirrored $codepoint	the integer codepoint value e
IntlChar bool is Mirrored	returns true if codepoint has the bidi_mirrored property false if not
IntlChar bool is Mirrored mixed $codepoint	check if code point has the bidi_mirrored property
IntlChar ispunct $codepoint	the integer codepoint value e
IntlChar bool ispunct	returns true if codepoint is a punctuation character false if not
IntlChar bool ispunct mixed $codepoint	check if code point is punctuation character
IntlChar is UAlphabetic $codepoint	the integer codepoint value e
IntlChar bool is UAlphabetic	returns true if codepoint has the alphabetic unicode property false if not
IntlChar bool is UAlphabetic mixed $codepoint	check if code point has the alphabetic unicode property
IntlChar isupper $codepoint	the integer codepoint value e
IntlChar bool isupper	returns true if codepoint is an lu uppercase letter false if not
IntlChar bool isupper mixed $codepoint	check if code point has the general category lu uppercase letter
IntlChar is UWhite Space $codepoint	the integer codepoint value e
IntlChar bool is UWhite Space	returns true if codepoint has the white_space unicode property false if not
IntlChar bool is UWhite Space mixed $codepoint	check if code point has the white_space unicode property
IntlChar is Whitespace $codepoint	the integer codepoint value e
IntlChar bool is Whitespace	returns true if codepoint is a whitespace character according to icu false if not
IntlChar bool is Whitespace mixed $codepoint	check if code point is a whitespace character according to icu
IntlChar ord $character	a unicode character
IntlChar int ord	returns the unicode code point value as an integer
IntlChar int ord mixed $character	return unicode code point value of character
IntlChar totitle $codepoint	the integer codepoint value e
IntlChar mixed totitle	returns the simple_titlecase_mapping of the code point if any; otherwise the code point itself
IntlChar mixed totitle mixed $codepoint	make unicode character titlecase
IntlDateFormatter create $timezone	time zone id
IntlDateFormatter create $locale	locale to use when formatting or parsing or null to use the value specified in the ini setting intl
IntlDateFormatter create $timetype	time type to use none short medium long full
IntlDateFormatter create $calendar	calendar to use for formatting or parsing
IntlDateFormatter create $pattern	optional pattern to use when formatting or parsing
IntlDateFormatter create $datetype	date type to use none short medium long full
IntlDateFormatter IntlDateFormatter create	the created intldateformatter or false in case of failure
IntlDateFormatter IntlDateFormatter create string $locale int $datetype int $timetype mixed $timezone mixed $calendar string $pattern	create a date formatter
Iterator scalar key	returns scalar on success or null on failure
Iterator scalar key	return the key of the current element
Iterator void next	move forward to next element
Iterator void rewind	rewind the iterator to the first element
Iterator boolean valid	the return value will be casted to boolean and then evaluated
Iterator boolean valid	checks if current position is valid
IteratorIterator construct $iterator	the traversable iterator
IteratorIterator Traversable construct Traversable $iterator	create an iterator from anything that is traversable
IteratorIterator mixed current	the value of the current element
IteratorIterator mixed current	get the current value
IteratorIterator Traversable get Inner Iterator	the inner iterator as passed to iteratoriterator::__construct()
IteratorIterator scalar key	the key of the current element
IteratorIterator bool valid	returns true if the iterator is valid otherwise false
JsonSerializable mixed json Serialize	returns data which can be serialized by json_encode() which is a value of any type other than a resource
JsonSerializable mixed json Serialize	specify data which should be serialized to json
Judy count $index_start	start counting from the given index
Judy count $index_end	stop counting when reaching this index
Judy int count	return the number of elements
Judy first $index	the index can be an integer or a string corresponding to the index where to start the search
Judy mixed first	return the corresponding index in the array
Judy mixed first mixed $index	search for the first index in the judy array
Judy first Empty $index	the index can be an integer or a string corresponding to the index where to start the search
Judy int first Empty	return the corresponding index in the array
Judy int first Empty mixed $index	search for the first absent index in the judy array
Judy int get Type	return an integer corresponding to a judy type
Judy int get Type	return the type of the current judy array
Judy last Empty $index	the index can be an integer or a string corresponding to the index where to start the search
Judy int last Empty	return the corresponding index in the array
Judy int last Empty int $index	search for the last absent index in the judy array
Judy int memory Usage	return the memory used in bytes
Judy next $index	the index can be an integer or a string corresponding to the index where to start the search
Judy mixed next	return the corresponding index in the array
Judy mixed next mixed $index	search for the next index in the judy array
Judy offset Exists $offset	an offset to check for
Judy bool offset Exists	returns true on success or false on failure
Judy bool offset Exists mixed $offset	whether a offset exists
Judy offset Unset $offset	the offset to unset
Judy bool offset Unset mixed $offset	offset to unset
Judy prev $index	the index can be an integer or a string corresponding to the index where to start the search
Judy mixed prev	return the corresponding index in the array
Judy mixed prev mixed $index	search for the previous index in the judy array
Judy prev Empty $index	the index can be an integer or a string corresponding to the index where to start the search
Judy int prev Empty	return the corresponding index in the array
Judy int prev Empty mixed $index	search for the previous absent index in the judy array
Lapack eigen Values $left	optional parameter - if an array is passed here it will be filled with the left eigenvectors
Lapack eigen Values $right	optional parameter - if an array is passed here it will be filled with the right eigenvectors
Lapack eigen Values $a	the matrix to calculate the eigenvalues for
Lapack array eigen Values	returns an array of arrays representing the eigenvalues for the array
Lapack array eigen Values array $a array $left array $right	this function returns the eigenvalues for a given square matrix
Lapack identity $n	the height and width of the identity matrix
Lapack array identity	will return a an array of n arrays each containing n entries
Lapack array identity int $n	return an identity matrix
Lapack least Squares By Factorisation $b	matrix b
Lapack least Squares By Factorisation $a	matrix a
Lapack array least Squares By Factorisation	array of the solution matrix
Lapack array least Squares By Factorisation array $a array $b	calculate the linear least squares solution of a matrix using qr factorisation
Lapack least Squares By SVD $b	matrix b
Lapack least Squares By SVD $a	matrix a
Lapack array least Squares By SVD	returns the solution as an array of arrays
Lapack array least Squares By SVD array $a array $b	solve the linear least squares problem using svd
Lapack singular Values $a	the matrix to calculate the singular values for
Lapack array singular Values	the singular values
Lapack array singular Values array $a	calculated the singular values of a matrix
Lapack solve Linear Equation $a	square matrix of linear equations
Lapack solve Linear Equation $b	right hand side to be solved for
Lapack array solve Linear Equation	matrix x
Lapack array solve Linear Equation array $a array $b	solve a system of linear equations
LimitIterator construct $offset	optional offset of the limit
LimitIterator construct $iterator	the iterator to limit
LimitIterator construct $count	optional count of the limit
LimitIterator Iterator construct	the new limititerator
LimitIterator Iterator construct Iterator $iterator int $offset int $count	construct a limititerator
LimitIterator Iterator get Inner Iterator	the inner iterator passed to limititerator::__construct()
LimitIterator Iterator get Inner Iterator	get inner iterator
LimitIterator mixed key	returns the key for the current item
LimitIterator mixed key	get current key
LimitIterator void next	move the iterator forward
LimitIterator void rewind	rewind the iterator to the specified starting offset
LimitIterator seek $position	the position to seek to
LimitIterator int seek	returns the offset position after seeking
LimitIterator int seek int $position	seek to the given position
LimitIterator bool valid	returns true on success or false on failure
LimitIterator bool valid	check whether the current element is valid
Memcache add $flag	use memcache_compressed to store the item compressed uses zlib
Memcache add $expire	expiration time of the item
Memcache add $key	the key that will be associated with the item
Memcache add $var	the variable to store
Memcache bool add	returns true on success or false on failure
Memcache bool add string $key mixed $var int $flag int $expire	add an item to the server
Memcache bool close	returns true on success or false on failure
Memcache bool close	close memcached server connection
Memcache decrement $value	decrement the item by value
Memcache decrement $key	key of the item do decrement
Memcache int decrement	returns items new value on success or false on failure
Memcache int decrement string $key int $value	decrement item's value
Memcache delete $timeout	this deprecated parameter is not supported and defaults to 0 seconds
Memcache delete $key	the key associated with the item to delete
Memcache bool delete	returns true on success or false on failure
Memcache bool delete string $key int $timeout	delete item from the server
Memcache bool flush	returns true on success or false on failure
Memcache bool flush	flush all existing items at the server
Memcache get Extended Stats $slabid	used in conjunction with type set to cachedump to identify the slab to dump from
Memcache get Extended Stats $type	the type of statistics to fetch
Memcache get Extended Stats $limit	used in conjunction with type set to cachedump to limit the number of entries to dump
Memcache array get Extended Stats	returns a two-dimensional associative array of server statistics or false on failure
Memcache array get Extended Stats string $type int $slabid int $limit	get statistics from all servers in pool
Memcache get Server Status $host	point to the host where memcached is listening for connections
Memcache get Server Status $port	point to the port where memcached is listening for connections
Memcache int get Server Status	returns a the servers status
Memcache int get Server Status string $host int $port	returns server status
Memcache get Stats $slabid	used in conjunction with type set to cachedump to identify the slab to dump from
Memcache get Stats $type	the type of statistics to fetch
Memcache get Stats $limit	used in conjunction with type set to cachedump to limit the number of entries to dump
Memcache array get Stats	returns an associative array of server statistics or false on failure
Memcache array get Stats string $type int $slabid int $limit	get statistics of the server
Memcache string get Version	returns a string of server version number or false on failure
Memcache string get Version	return version of the server
Memcache pconnect $timeout	value in seconds which will be used for connecting to the daemon
Memcache pconnect $host	point to the host where memcached is listening for connections
Memcache pconnect $port	point to the port where memcached is listening for connections
Memcache mixed pconnect	returns a memcache object or false on failure
Memcache mixed pconnect string $host int $port int $timeout	open memcached server persistent connection
Memcache set Compress Threshold $threshold	controls the minimum value length before attempting to compress automatically
Memcache set Compress Threshold $min_saving	specifies the minimum amount of savings to actually store the value compressed
Memcache bool set Compress Threshold	returns true on success or false on failure
Memcache bool set Compress Threshold int $threshold float $min_savings	enable automatic compression of large values
Memcache set Server Params $status	controls if the server should be flagged as online
Memcache set Server Params $host	point to the host where memcached is listening for connections
Memcache set Server Params $timeout	value in seconds which will be used for connecting to the daemon
Memcache set Server Params $failure_callback	allows the user to specify a callback function to run upon encountering an error
Memcache set Server Params $retry_interval	controls how often a failed server will be retried the default value is 15 seconds
Memcache set Server Params $port	point to the port where memcached is listening for connections
Memcache bool set Server Params	returns true on success or false on failure
Memcache bool set Server Params string $host int $port int $timeout int $retry_interval bool $status callable $failure_callback	changes server parameters and status at runtime
Memcached add By Key $key	the key under which to store the value
Memcached add By Key $expiration	the expiration time defaults to 0
Memcached add By Key $server_key	the key identifying the server to store the value on or retrieve it from
Memcached add By Key $value	the value to store
Memcached bool add By Key	returns true on success or false on failure
Memcached bool add By Key string $server_key string $key mixed $value int $expiration	add an item under a new key on a specific server
Memcached add Server $weight	the weight of the server relative to the total weight of all the servers in the pool
Memcached add Server $port	the port on which memcache is running
Memcached add Server $host	the hostname of the memcache server
Memcached bool add Server	returns true on success or false on failure
Memcached bool add Server string $host int $port int $weight	add a server to the server pool
Memcached add Servers $array	array of the servers to add to the pool
Memcached bool add Servers	returns true on success or false on failure
Memcached bool add Servers array $servers	add multiple servers to the server pool
Memcached append $key	the key under which to store the value
Memcached append $value	the string to append
Memcached bool append	returns true on success or false on failure
Memcached bool append string $key string $value	append data to an existing item
Memcached cas $key	the key under which to store the value
Memcached cas $expiration	the expiration time defaults to 0
Memcached cas $value	the value to store
Memcached cas $cas_token	unique value associated with the existing item
Memcached bool cas	returns true on success or false on failure
Memcached bool cas float $cas_token string $key mixed $value int $expiration	compare and swap an item
Memcached cas By Key $key	the key under which to store the value
Memcached cas By Key $expiration	the expiration time defaults to 0
Memcached cas By Key $server_key	the key identifying the server to store the value on or retrieve it from
Memcached cas By Key $cas_token	unique value associated with the existing item
Memcached cas By Key $value	the value to store
Memcached bool cas By Key	returns true on success or false on failure
Memcached bool cas By Key float $cas_token string $server_key string $key mixed $value int $expiration	compare and swap an item on a specific server
Memcached decrement $expiry	the expiry time to set on the item
Memcached decrement $key	the key of the item to decrement
Memcached decrement $offset	the amount by which to decrement the items value
Memcached decrement $initial_value	the value to set the item to if it doesnt currently exist
Memcached int decrement	returns items new value on success or false on failure
Memcached int decrement string $key int $offset int $initial_value int $expiry	decrement numeric item's value
Memcached delete $key	the key to be deleted
Memcached delete $time	the amount of time the server will wait to delete the item
Memcached bool delete	returns true on success or false on failure
Memcached bool delete string $key int $time	delete an item
Memcached delete By Key $server_key	the key identifying the server to store the value on or retrieve it from
Memcached delete By Key $time	the amount of time the server will wait to delete the item
Memcached delete By Key $key	the key to be deleted
Memcached bool delete By Key	returns true on success or false on failure
Memcached bool delete By Key string $server_key string $key int $time	delete an item from a specific server
Memcached delete Multi $keys	the keys to be deleted
Memcached delete Multi $time	the amount of time the server will wait to delete the items
Memcached bool delete Multi	returns true on success or false on failure
Memcached bool delete Multi array $keys int $time	delete multiple items
Memcached get $cache_cb	read-through caching callback or null
Memcached get $key	the key of the item to retrieve
Memcached get $cas_token	the variable to store the cas token in
Memcached mixed get	returns the value stored in the cache or false otherwise
Memcached mixed get string $key callable $cache_cb float $cas_token	retrieve an item
Memcached array get All Keys	returns the keys stored on all the servers on success or false on failure
Memcached array get All Keys	gets the keys stored on all the servers
Memcached get By Key $cache_cb	read-through caching callback or null
Memcached get By Key $server_key	the key identifying the server to store the value on or retrieve it from
Memcached get By Key $cas_token	the variable to store the cas token in
Memcached get By Key $key	the key of the item to fetch
Memcached mixed get By Key	returns the value stored in the cache or false otherwise
Memcached mixed get By Key string $server_key string $key callable $cache_cb float $cas_token	retrieve an item from a specific server
Memcached get Delayed By Key $with_cas	whether to request cas token values also
Memcached get Delayed By Key $server_key	the key identifying the server to store the value on or retrieve it from
Memcached get Delayed By Key $value_cb	the result callback or null
Memcached get Delayed By Key $keys	array of keys to request
Memcached bool get Delayed By Key	returns true on success or false on failure
Memcached bool get Delayed By Key string $server_key array $keys bool $with_cas callable $value_cb	request multiple items from a specific server
Memcached get Multi $cas_tokens	the variable to store the cas tokens for the found items
Memcached get Multi $keys	array of keys to retrieve
Memcached get Multi $flags	the flags for the get operation
Memcached mixed get Multi	returns the array of found items or false on failure
Memcached mixed get Multi array $keys array $cas_tokens int $flags	retrieve multiple items
Memcached get Multi By Key $cas_tokens	the variable to store the cas tokens for the found items
Memcached get Multi By Key $keys	array of keys to retrieve
Memcached get Multi By Key $flags	the flags for the get operation
Memcached get Multi By Key $server_key	the key identifying the server to store the value on or retrieve it from
Memcached array get Multi By Key	returns the array of found items or false on failure
Memcached array get Multi By Key string $server_key array $keys string $cas_tokens int $flags	retrieve multiple items from a specific server
Memcached int get Result Code	result code of the last memcached operation
Memcached int get Result Code	return the result code of the last operation
Memcached string get Result Message	message describing the result of the last memcached operation
Memcached string get Result Message	return the message describing the result of the last operation
Memcached get Server By Key $server_key	the key identifying the server to store the value on or retrieve it from
Memcached array get Server By Key	returns an array containing three keys of host port and weight on success or false on failure
Memcached array get Server By Key string $server_key	map a key to a server
Memcached array get Server List	the list of all servers in the server pool
Memcached array get Server List	get the list of the servers in the pool
Memcached array get Stats	array of server statistics one entry per server
Memcached array get Stats	get server pool statistics
Memcached array get Version	array of server versions one entry per server
Memcached array get Version	get server pool version info
Memcached increment $key	the key of the item to increment
Memcached increment $expiry	the expiry time to set on the item
Memcached increment $initial_value	the value to set the item to if it doesnt currently exist
Memcached increment $offset	the amount by which to increment the items value
Memcached int increment	returns new items value on success or false on failure
Memcached int increment string $key int $offset int $initial_value int $expiry	increment numeric item's value
Memcached increment By Key $key	the key of the item to increment
Memcached increment By Key $expiry	the expiry time to set on the item
Memcached increment By Key $server_key	the key identifying the server to store the value on or retrieve it from
Memcached increment By Key $initial_value	the value to set the item to if it doesnt currently exist
Memcached increment By Key $offset	the amount by which to increment the items value
Memcached int increment By Key	returns new items value on success or false on failure
Memcached int increment By Key string $server_key string $key int $offset int $initial_value int $expiry	increment numeric item's value stored on a specific server
Memcached bool is Pristine	returns the true if instance is recently created false otherwise
Memcached bool is Pristine	check if the instance was recently created
Memcached prepend $key	the key of the item to prepend the data to
Memcached prepend $value	the string to prepend
Memcached bool prepend	returns true on success or false on failure
Memcached bool prepend string $key string $value	prepend data to an existing item
Memcached prepend By Key $key	the key of the item to prepend the data to
Memcached prepend By Key $value	the string to prepend
Memcached prepend By Key $server_key	the key identifying the server to store the value on or retrieve it from
Memcached bool prepend By Key	returns true on success or false on failure
Memcached bool prepend By Key string $server_key string $key string $value	prepend data to an existing item on a specific server
Memcached replace By Key $key	the key under which to store the value
Memcached replace By Key $expiration	the expiration time defaults to 0
Memcached replace By Key $server_key	the key identifying the server to store the value on or retrieve it from
Memcached replace By Key $value	the value to store
Memcached bool replace By Key	returns true on success or false on failure
Memcached bool replace By Key string $server_key string $key mixed $value int $expiration	replace the item under an existing key on a specific server
Memcached set $key	the key under which to store the value
Memcached set $expiration	the expiration time defaults to 0
Memcached set $value	the value to store
Memcached bool set	returns true on success or false on failure
Memcached bool set string $key mixed $value int $expiration	store an item
Memcached set Multi $expiration	the expiration time defaults to 0
Memcached set Multi $items	an array of key / value pairs to store on the server
Memcached bool set Multi	returns true on success or false on failure
Memcached bool set Multi array $items int $expiration	store multiple items
Memcached bool set Option	returns true on success or false on failure
Memcached bool set Option int $option mixed $value	set a memcached option
Memcached set Options $options	an associative array of options where the key is the option to set and the value is the new value for the option
Memcached bool set Options	returns true on success or false on failure
Memcached bool set Options array $options	set memcached options
Memcached set Sasl Auth Data $password	the password to use for authentication
Memcached set Sasl Auth Data $username	the username to use for authentication
Memcached void set Sasl Auth Data string $username string $password	set the credentials to use for authentication
MessageFormatter create $locale	the locale to use when formatting arguments
MessageFormatter create $pattern	the pattern string to stick arguments into
MessageFormatter MessageFormatter create	the formatter object
MessageFormatter MessageFormatter create string $locale string $pattern	constructs a new message formatter
Mongo string get Slave	the address of the secondary this connection is using for reads
Mongo string get Slave	returns the address being used by this for slaveokay reads
Mongo bool get Slave Okay	returns the value of slaveokay for this instance
Mongo bool get Slave Okay	get slaveokay setting for this connection
Mongo set Slave Okay $ok	if reads should be sent to secondary members of a replica set for all possible queries using this mongoclient instance
Mongo bool set Slave Okay	returns the former value of slaveokay for this instance
Mongo bool set Slave Okay bool $ok	change slaveokay setting for this connection
Mongo string switch Slave	the address of the secondary this connection is using for reads
Mongo string switch Slave	choose a new secondary for slaveokay reads
MongoBinData construct $type	data type
MongoBinData construct $data	binary data
MongoBinData string construct	returns a new binary data object
MongoClient get $dbname	the database name
MongoClient MongoDB get	returns a new db object
MongoClient MongoDB get string $dbname	gets a database
MongoClient array get Connections	an array of open connections
MongoClient array get Connections	return info about all open connections
MongoClient array get Hosts	returns an array of information about the hosts in the set
MongoClient array get Hosts	updates status for all associated hosts
MongoCollection aggregate $pipeline	an array of pipeline operators
MongoCollection aggregate $op	the second pipeline operator
MongoCollection aggregate	additional pipeline operators
MongoCollection aggregate $options	options for the aggregation command
MongoCollection aggregate $op	first pipeline operator
MongoCollection array aggregate	the result of the aggregation as an array
MongoCollection array aggregate array $pipeline array $options	perform an aggregation using the aggregation framework
MongoCollection aggregate Cursor $pipeline	the aggregation framework pipeline to execute
MongoCollection aggregate Cursor $options	options for the aggregation command
MongoCollection MongoCommandCursor aggregate Cursor	returns a mongocommandcursor object
MongoCollection MongoCommandCursor aggregate Cursor array $command array $options	execute an aggregation pipeline command and retrieve results through a cursor
MongoCollection create Index $options	an array of options for the index creation
MongoCollection create Index $keys	an array specifying the indexs fields as its keys
MongoCollection bool create Index	returns an array containing the status of the index creation
MongoCollection distinct $query	an optional query parameters
MongoCollection distinct $key	the key to use
MongoCollection array distinct	returns an array of distinct values or false on failure
MongoCollection array distinct string $key array $query	retrieve a list of distinct values for the given key across a collection
MongoCollection array drop	returns the database response
MongoCollection array drop	drops this collection
MongoCollection find One $options	this parameter is an associative array of the form array( name = > < value >
MongoCollection find One $query	the fields for which to search
MongoCollection find One $fields	fields of the results to return
MongoCollection array find One	returns record matching the search or null
MongoCollection array find One array $query array $fields array $options	queries this collection returning a single element
MongoCollection bool get Slave Okay	returns the value of slaveokay for this instance
MongoCollection bool get Slave Okay	get slaveokay setting for this collection
MongoCollection parallel Collection Scan $num_cursors	the number of cursors to request from the server
MongoCollection array[MongoCommandCursor] parallel Collection Scan	returns an array of mongocommandcursor objects
MongoCollection array[MongoCommandCursor] parallel Collection Scan int $num_cursors	returns an array of cursors to iterator over a full collection in parallel
MongoCollection save $options	options for the save
MongoCollection save $document	array or object to save
MongoCollection mixed save	if w was set returns an array containing the status of the save
MongoCollection mixed save array|object $document array $options	saves a document to this collection
MongoCollection set Slave Okay $ok	if reads should be sent to secondary members of a replica set for all possible queries using this mongocollection instance
MongoCollection bool set Slave Okay	returns the former value of slaveokay for this instance
MongoCollection bool set Slave Okay bool $ok	change slaveokay setting for this collection
MongoCommandCursor batch Size $batchSize	the number of results to return per batch
MongoCommandCursor MongoCommandCursor batch Size	returns this cursor
MongoCommandCursor MongoCommandCursor batch Size int $batchSize	limits the number of elements returned in one batch
MongoCommandCursor array current	the current result document as an associative array
MongoCommandCursor array current	returns the current element
MongoCommandCursor array info	returns the namespace batch size limit skip flags query and projected fields for this cursor
MongoCommandCursor array info	gets information about the cursor's creation and iteration
MongoCommandCursor array rewind	the raw server result document
MongoCommandCursor array rewind	executes the command and resets the cursor to the start of the result set
MongoCursor add Option $value	value to add
MongoCursor add Option $key	fieldname to add
MongoCursor MongoCursor add Option	returns this cursor
MongoCursor MongoCursor add Option string $key mixed $value	adds a top-level key / value pair to a query
MongoCursor await Data $wait	if the cursor should wait for more data to become available
MongoCursor MongoCursor await Data	returns this cursor
MongoCursor MongoCursor await Data bool $wait	sets whether this cursor will wait for a while for a tailable cursor to return more data
MongoCursor count $foundOnly	send cursor limit and skip information to the count function if applicable
MongoCursor int count	the number of documents returned by this cursors query
MongoCursor int count bool $foundOnly	counts the number of results for this query
MongoCursor bool dead	returns true if there are more results that have not yet been sent to the client and false otherwise
MongoCursor bool dead	checks if there are results that have not yet been sent from the database
MongoCursor fields $f	fields to return or not return
MongoCursor MongoCursor fields	returns this cursor
MongoCursor MongoCursor fields array $f	sets the fields for a query
MongoCursor immortal $liveForever	if the cursor should be immortal
MongoCursor MongoCursor immortal	returns this cursor
MongoCursor MongoCursor immortal bool $liveForever	sets whether this cursor will timeout
MongoCursor max Time MS $ms	specifies a cumulative time limit in milliseconds to be allowed by the server for processing operations on the cursor
MongoCursor MongoCursor max Time MS	this cursor
MongoCursor MongoCursor max Time MS int $ms	sets a server-side timeout for this query
MongoCursor partial $okay	if receiving partial results is okay
MongoCursor MongoCursor partial	returns this cursor
MongoCursor MongoCursor partial bool $okay	if this query should fetch partial results from mongos if a shard is down
MongoCursor set Flag $set	whether the flag should be set true or unset false
MongoCursor set Flag $flag	which flag to set
MongoCursor MongoCursor set Flag	returns this cursor
MongoCursor MongoCursor set Flag int $flag bool $set	sets arbitrary flags in case there is no method available the specific flag
MongoCursor MongoCursor snapshot	returns this cursor
MongoCursor tailable $tail	if the cursor should be tailable
MongoCursor MongoCursor tailable	returns this cursor
MongoCursor MongoCursor tailable bool $tail	sets whether this cursor will be left open after fetching the last results
MongoCursor timeout $ms	the number of milliseconds for the cursor to wait for a response
MongoCursor MongoCursor timeout	this cursor
MongoCursor MongoCursor timeout int $ms	sets a client-side timeout for this query
MongoCursorException string get Host	returns the hostname or null if the hostname is unknown
MongoCursorException string get Host	the hostname of the server that encountered the error
MongoCursorInterface batch Size $batchSize	the number of results to return per batch
MongoCursorInterface MongoCursorInterface batch Size	returns this cursor
MongoCursorInterface MongoCursorInterface batch Size int $batchSize	limits the number of elements returned in one batch
MongoCursorInterface bool dead	returns true if there are more results that have not yet been sent to the client and false otherwise
MongoCursorInterface bool dead	checks if there are results that have not yet been sent from the database
MongoCursorInterface array info	returns the namespace batch size limit skip flags query and projected fields for this cursor
MongoCursorInterface array info	gets information about the cursor's creation and iteration
MongoCursorInterface timeout $ms	the number of milliseconds for the cursor to wait for a response
MongoCursorInterface MongoCursorInterface timeout	returns this cursor
MongoCursorInterface MongoCursorInterface timeout int $ms	sets a client-side timeout for this query
MongoDate construct $sec	number of seconds since the epoch i
MongoDate construct $usec	microseconds
MongoDate int construct	returns this new date
MongoDate string to String	this date
MongoDate string to String	returns a string representation of this date
MongoDB\BSON\Serializable array|object bson Serialize	an array or stdclass to be serialized as a bson array or document
MongoDB\BSON\Serializable array|object bson Serialize	provides an array or document to serialize as bson
MongoDB\BSON\Unserializable bson Unserialize $data(array)	properties within the bson array or document
MongoDB\BSON\Unserializable void bson Unserialize array $data	constructs the object from a bson array or document
MongoDB\Driver\BulkWrite delete $filter(array|object)	the search filter
MongoDB\Driver\BulkWrite delete $deleteOptions	deleteoptions option type description default limit bool delete all matching documents limit=0 or only the first matching document limit=1 false
MongoDB\Driver\BulkWrite void delete array|object $filter array $deleteOptions	add a delete operation to the bulk
MongoDB\Driver\BulkWrite update $newObj(array|object)	a document containing either update operators e
MongoDB\Driver\BulkWrite update $filter(array|object)	the search filter
MongoDB\Driver\BulkWrite update $updateOptions	updateoptions option type description default multi bool update only the first matching document multi=false or all matching documents multi=true
MongoDB\Driver\BulkWrite void update array|object $filter array|object $newObj array $updateOptions	add an update operation to the bulk
MongoDB\Driver\Cursor MongoDB\Driver\CursorId get Id	returns the mongodb\driver\cursorid for this cursor
MongoDB\Driver\Cursor MongoDB\Driver\CursorId get Id	returns the id for this cursor
MongoDB\Driver\Cursor MongoDB\Driver\Server get Server	returns the mongodb\driver\server associated with this cursor
MongoDB\Driver\Cursor MongoDB\Driver\Server get Server	returns the server associated with this cursor
MongoDB\Driver\Cursor set Type Map $typeMap(array)	type map configuration
MongoDB\Driver\Cursor void set Type Map array $typemap	sets a type map to use for bson unserialization
MongoDB\Driver\Cursor array to Array	returns an array containing all results for this cursor
MongoDB\Driver\Cursor array to Array	returns an array containing all results for this cursor
MongoDB\Driver\CursorId - construct	create a new cursorid not used
MongoDB\Driver\CursorId string to String	returns the string representation of the cursor id
MongoDB\Driver\CursorId string to String	string representation of the cursor id
MongoDB\Driver\Manager execute Bulk Write $namespace(string)	a fully qualified namespace e
MongoDB\Driver\Manager execute Bulk Write $bulk(MongoDB\Driver\BulkWrite)	the mongodb\driver\bulkwrite to execute
MongoDB\Driver\Manager execute Bulk Write $writeConcern(MongoDB\Driver\WriteConcern)	optionally a mongodb\driver\writeconcern to apply to the write operation
MongoDB\Driver\Manager MongoDB\Driver\WriteResult execute Bulk Write	returns mongodb\driver\writeresult on success
MongoDB\Driver\Manager MongoDB\Driver\WriteResult execute Bulk Write string $namespace MongoDB\Driver\BulkWrite $bulk MongoDB\Driver\WriteConcern $writeConcern	execute one or more write operations
MongoDB\Driver\Manager execute Query $namespace(string)	a fully qualified namespace e
MongoDB\Driver\Manager execute Query $readPreference(MongoDB\Driver\ReadPreference)	optionally a mongodb\driver\readpreference to select the server for this operation
MongoDB\Driver\Manager execute Query $query(MongoDB\Driver\Query)	the mongodb\driver\query to execute
MongoDB\Driver\Manager MongoDB\Driver\Cursor execute Query	returns mongodb\driver\cursor on success
MongoDB\Driver\Manager MongoDB\Driver\Cursor execute Query string $namespace MongoDB\Driver\Query $query MongoDB\Driver\ReadPreference $readPreference	execute a database query
MongoDB\Driver\Manager array get Servers	returns an array of mongodb\driver\server instances to which this manager is connected
MongoDB\Driver\Manager array get Servers	return the servers to which this manager is connected
MongoDB\Driver\Manager select Server $readPreference(MongoDB\Driver\ReadPreference)	optionally a mongodb\driver\readpreference to select the server for this operation
MongoDB\Driver\Manager MongoDB\Driver\Server select Server	returns an mongodb\driver\server matching the read preference
MongoDB\Driver\Manager MongoDB\Driver\Server select Server MongoDB\Driver\ReadPreference $readPreference	select a server matching a read preference
MongoDB\Driver\ReadConcern construct $level	read concern value description mongodb\driver\readconcern::local queries using this read concern will return the nodes most recent copy of the data
MongoDB\Driver\ReadConcern string construct string $level	construct immutable readconcern
MongoDB\Driver\ReadPreference construct $mode	read preference mode value description mongodb\driver\readpreference::rp_primary all operations read from the current replica set primary
MongoDB\Driver\ReadPreference construct $tagSets	tag sets allow you to target read operations to specific members of a replica set
MongoDB\Driver\ReadPreference string construct string $mode array $tagSets	construct immutable readpreference
MongoDB\Driver\Server execute Bulk Write $namespace(string)	a fully qualified namespace e
MongoDB\Driver\Server execute Bulk Write $bulk(MongoDB\Driver\BulkWrite)	the mongodb\driver\bulkwrite to execute
MongoDB\Driver\Server execute Bulk Write $writeConcern(MongoDB\Driver\WriteConcern)	optionally a mongodb\driver\writeconcern to apply to the write operation
MongoDB\Driver\Server MongoDB\Driver\WriteResult execute Bulk Write	returns mongodb\driver\writeresult on success
MongoDB\Driver\Server MongoDB\Driver\WriteResult execute Bulk Write string $namespace MongoDB\Driver\BulkWrite $bulk MongoDB\Driver\WriteConcern $writeConcern	execute one or more write operations on this server
MongoDB\Driver\Server execute Command $readPreference(MongoDB\Driver\ReadPreference)	optionally a mongodb\driver\readpreference to select the server for this operation
MongoDB\Driver\Server execute Command $command(MongoDB\Driver\Command)	the mongodb\driver\command to execute
MongoDB\Driver\Server execute Command $db(string)	the name of the database on which to execute the command
MongoDB\Driver\Server MongoDB\Driver\Cursor execute Command	returns mongodb\driver\cursor on success
MongoDB\Driver\Server MongoDB\Driver\Cursor execute Command string $db MongoDB\Driver\Command $command MongoDB\Driver\ReadPreference $readPreference	execute a database command on this server
MongoDB\Driver\Server int get Port	returns the port on which this server is listening
MongoDB\Driver\Server array get Tags	returns an array of tags used to describe this server in a replica set
MongoDB\Driver\Server array get Tags	returns an array of tags describing this server in a replica set
MongoDB\Driver\Server int get Type	returns an integer denoting the type of this server
MongoDB\Driver\Server bool is Arbiter	returns true if this server is an arbiter member of a replica set and false otherwise
MongoDB\Driver\Server bool is Arbiter	checks if this server is an arbiter member of a replica set
MongoDB\Driver\Server bool is Hidden	returns true if this server is a hidden member of a replica set and false otherwise
MongoDB\Driver\Server bool is Hidden	checks if this server is a hidden member of a replica set
MongoDB\Driver\Server bool is Passive	returns true if this server is a passive member of a replica set and false otherwise
MongoDB\Driver\Server bool is Passive	checks if this server is a passive member of a replica set
MongoDB\Driver\Server bool is Primary	returns true if this server is a primary member of a replica set and false otherwise
MongoDB\Driver\Server bool is Primary	checks if this server is a primary member of a replica set
MongoDB\Driver\Server bool is Secondary	returns true if this server is a secondary member of a replica set and false otherwise
MongoDB\Driver\Server bool is Secondary	checks if this server is a secondary member of a replica set
MongoDB\Driver\WriteConcern construct $wtimeout	how long to wait in milliseconds for secondaries before failing
MongoDB\Driver\WriteConcern construct $journal	wait until mongod has applied the write to the journal
MongoDB\Driver\WriteConcern construct $w	write concern value description 1 requests acknowledgement that the write operation has propagated to the standalone mongod or the primary in a replica set
MongoDB\Driver\WriteConcern string construct string $w integer $wtimeout boolean $journal	construct immutable writeconcern
MongoDB authenticate $username	the username
MongoDB authenticate $password	the password in plaintext
MongoDB array authenticate	returns database response
MongoDB array authenticate string $username string $password	log in to this database
MongoDB create Collection $options	an array containing options for the collections
MongoDB create Collection $max	if the collection is fixed size the maximum number of elements to store in the collection
MongoDB create Collection $autoIndexId	if capped is true you can specify false to disable the automatic index created on the _id field
MongoDB create Collection $capped	if the collection should be a fixed size
MongoDB create Collection $name	the name of the collection
MongoDB create Collection $size	if the collection is fixed size its size in bytes
MongoDB MongoCollection create Collection	returns a collection object representing the new collection
MongoDB MongoCollection create Collection string $name array $options	creates a collection
MongoDB get $name	the name of the collection
MongoDB MongoCollection get	returns the collection
MongoDB MongoCollection get string $name	gets a collection
MongoDB get Collection Info $options	an array of options for listing the collections
MongoDB array get Collection Info	this function returns an array where each element is an array describing a collection
MongoDB array get Collection Info array $options	returns information about collections in this database
MongoDB get Collection Names $options	an array of options for listing the collections
MongoDB array get Collection Names	returns the collection names as an array of strings
MongoDB array get Collection Names array $options	gets an array of names for all collections in this database
MongoDB int get Profiling Level	returns the profiling level
MongoDB int get Profiling Level	gets this database's profiling level
MongoDB bool get Slave Okay	returns the value of slaveokay for this instance
MongoDB bool get Slave Okay	get slaveokay setting for this database
MongoDB array last Error	returns the error if there was one
MongoDB array last Error	check if there was an error on the most recent db operation performed
MongoDB array prev Error	returns the error and the number of operations ago it occurred
MongoDB array prev Error	checks for the last error thrown during a database operation
MongoDB repair $preserve_cloned_files	if cloned files should be kept if the repair fails
MongoDB repair $backup_original_files	if original files should be backed up
MongoDB array repair	returns db response
MongoDB array repair bool $preserve_cloned_files bool $backup_original_files	repairs and compacts this database
MongoDB array reset Error	returns the database response
MongoDB array reset Error	clears any flagged errors on the database
MongoDB set Profiling Level $level	profiling level
MongoDB int set Profiling Level	returns the previous profiling level
MongoDB int set Profiling Level int $level	sets this database's profiling level
MongoDB set Slave Okay $ok	if reads should be sent to secondary members of a replica set for all possible queries using this mongodb instance
MongoDB bool set Slave Okay	returns the former value of slaveokay for this instance
MongoDB bool set Slave Okay bool $ok	change slaveokay setting for this database
MongoDBRef create $collection	collection name without the database name
MongoDBRef create $database	database name
MongoDBRef create $id	the _id field of the object to which to link
MongoDBRef array create	returns the reference
MongoDBRef array create string $collection mixed $id string $database	creates a new database reference
MongoDBRef is Ref $ref	array or object to check
MongoDBRef bool is Ref	returns true on success or false on failure
MongoDBRef bool is Ref mixed $ref	checks if an array is a database reference
MongoDeleteBatch construct $collection	the mongocollection to execute the batch on
MongoDeleteBatch construct $write_options	an array of write options
MongoDeleteBatch MongoCollection construct	a new mongodeletebatch
MongoDeleteBatch MongoCollection construct MongoCollection $collection array $write_options	description
MongoId string get Hostname	returns the hostname
MongoId string get Hostname	gets the hostname being used for this machine's ids
MongoId int get PID	returns the pid of the mongoid
MongoId int get PID	gets the process id
MongoId int get Timestamp	returns the number of seconds since the epoch that this id was created
MongoId int get Timestamp	gets the number of seconds since the epoch that this id was created
MongoId set state $props	theoretically an array of properties used to create the new id
MongoId MongoId set state	a new id with the value 000000000000000000000000
MongoId MongoId set state array $props	create a dummy mongoid
MongoInsertBatch construct $collection	the mongocollection to execute the batch on
MongoInsertBatch construct $write_options	an array of write options
MongoInsertBatch MongoCollection construct	a new mongoinsertbatch
MongoInsertBatch MongoCollection construct MongoCollection $collection array $write_options	description
MongoInt32 construct $value	a number
MongoInt32 string construct	returns a new integer
MongoInt32 string construct string $value	creates a new 32-bit integer
MongoInt64 construct $value	a number
MongoInt64 string construct	returns a new integer
MongoInt64 string construct string $value	creates a new 64-bit integer
MongoLog callable get Callback	returns the callback function or false if not set yet
MongoLog callable get Callback	gets the previously set callback function
MongoLog int get Level	returns the level s currently being logged
MongoLog int get Level	gets the level s currently being logged
MongoLog int get Module	returns the module s currently being logged
MongoLog int get Module	gets the module s currently being logged
MongoPool set Size $size	the max number of connections future pools will be able to create
MongoPool bool set Size	returns the former value of pool size
MongoPool bool set Size int $size	set the size for future connection pools
MongoRegex string to String	this regular expression in the form / expr / flags
MongoRegex string to String	a string representation of this regular expression
MongoTimestamp construct $sec	number of seconds since the epoch i
MongoTimestamp construct $inc	increment
MongoTimestamp int construct	returns this new timestamp
MongoTimestamp string to String	the seconds since epoch represented by this timestamp
MongoTimestamp string to String	returns a string representation of this timestamp
MongoWriteBatch add $item	an array that describes a write operation
MongoWriteBatch bool add	returns true on success and throws an exception on failure
MongoWriteBatch bool add array $item	adds a write operation to a batch
MongoWriteBatch execute $write_options	see mongowritebatch::__construct
MongoWriteBatch array execute	returns an array containing statistical information for the full batch
MongoWriteBatch array execute array $write_options	executes a batch of write operations
MongoWriteConcernException array get Document	a mongodb document if available as an array
MongoWriteConcernException array get Document	get the error document
MultipleIterator attach Iterator $iterator	the new iterator to attach
MultipleIterator attach Iterator $infos	the associative information for the iterator which must be an integer a string or null
MultipleIterator int count Iterators	the number of attached iterator instances as an integer
MultipleIterator detach Iterator $iterator	the iterator to detach
MultipleIterator array key	an array of all registered iterator instances or false if no sub iterator is attached
MultipleIterator array key	gets the registered iterator instances
Mutex create $lock	setting lock to true will lock the mutex for the caller before returning the handle
Mutex long create	a newly created and optionally locked mutex handle
Mutex long create boolean $lock	create a mutex
Mutex destroy $mutex	a handle returned by a previous call to mutex::create()
Mutex boolean destroy	a boolean indication of success
Mutex boolean destroy long $mutex	destroy mutex
Mutex lock $mutex	a handle returned by a previous call to mutex::create()
Mutex boolean lock	a boolean indication of success
Mutex boolean lock long $mutex	acquire mutex
Mutex trylock $mutex	a handle returned by a previous call to mutex::create()
Mutex boolean trylock	a boolean indication of success
Mutex boolean trylock long $mutex	attempt to acquire mutex
function bool mysqli report int $flags	alias of mysqli_driver- > report_mode
MysqlndUhConnection change User $connection	mysqlnd connection handle
MysqlndUhConnection change User $passwd_len	length of the mysql password
MysqlndUhConnection change User $password	the mysql password
MysqlndUhConnection change User $silent	controls if mysqlnd is allowed to emit errors or not
MysqlndUhConnection change User $user	the mysql user name
MysqlndUhConnection change User $database	the mysql database to change to
MysqlndUhConnection bool change User	returns true on success
MysqlndUhConnection charset Name $connection	mysqlnd connection handle
MysqlndUhConnection string charset Name	the default character set
MysqlndUhConnection close $connection	the connection to be closed
MysqlndUhConnection close $close_type	why the connection is to be closed
MysqlndUhConnection bool close	returns true on success
MysqlndUhConnection connect $connection	mysqlnd connection handle
MysqlndUhConnection connect $database	if provided will specify the default database to be used when performing queries
MysqlndUhConnection connect $host	can be either a host name or an ip address
MysqlndUhConnection connect $mysql_flags	connection options
MysqlndUhConnection connect $port	specifies the port number to attempt to connect to the mysql server
MysqlndUhConnection connect $password	if not provided or null the mysql server will attempt to authenticate the user against those user records which have no password only
MysqlndUhConnection connect $socket	specifies the socket or named pipe that should be used
MysqlndUhConnection connect $user	the mysql user name
MysqlndUhConnection bool connect	returns true on success
MysqlndUhConnection escape String $MYSQLND_UH_RES_MYSQLND_NAME	mysqlnd connection handle
MysqlndUhConnection escape String $escape_string	the string to be escaped
MysqlndUhConnection string escape String	the escaped string
MysqlndUhConnection get Affected Rows $connection	mysqlnd connection handle
MysqlndUhConnection int get Affected Rows	number of affected rows
MysqlndUhConnection get Error String $connection	mysqlnd connection handle
MysqlndUhConnection string get Error String	error string for the most recent function call
MysqlndUhConnection get Field Count $connection	mysqlnd connection handle
MysqlndUhConnection int get Field Count	number of columns
MysqlndUhConnection get Host Information $connection	mysqlnd connection handle
MysqlndUhConnection string get Host Information	connection description
MysqlndUhConnection get Last Insert Id $connection	mysqlnd connection handle
MysqlndUhConnection int get Last Insert Id	last insert id
MysqlndUhConnection get Last Message $connection	mysqlnd connection handle
MysqlndUhConnection get Server Statistics $connection	mysqlnd connection handle
MysqlndUhConnection string get Server Statistics	the system status message
MysqlndUhConnection get Server Version $connection	mysqlnd connection handle
MysqlndUhConnection int get Server Version	the mysql version
MysqlndUhConnection get Sqlstate $connection	mysqlnd connection handle
MysqlndUhConnection string get Sqlstate	the sqlstate code
MysqlndUhConnection get Statistics $connection	mysqlnd connection handle
MysqlndUhConnection array get Statistics	connection statistics collected by mysqlnd
MysqlndUhConnection get Warning Count $connection	mysqlnd connection handle
MysqlndUhConnection int get Warning Count	number of warnings
MysqlndUhConnection init $connection	mysqlnd connection handle
MysqlndUhConnection bool init	returns true on success
MysqlndUhConnection kill Connection $connection	mysqlnd connection handle
MysqlndUhConnection kill Connection $pid	thread id of the connection to be killed
MysqlndUhConnection bool kill Connection	returns true on success
MysqlndUhConnection next Result $connection	mysqlnd connection handle
MysqlndUhConnection bool next Result	returns true on success
MysqlndUhConnection ping $connection	mysqlnd connection handle
MysqlndUhConnection bool ping	returns true on success
MysqlndUhConnection query $connection	mysqlnd connection handle
MysqlndUhConnection query $query	the query string
MysqlndUhConnection bool query	returns true on success
MysqlndUhConnection bool query mysqlnd_connection $connection string $query	performs a query on the database
MysqlndUhConnection query Read Resultset Header $connection	mysqlnd connection handle
MysqlndUhConnection query Read Resultset Header $mysqlnd_stmt	mysqlnd statement handle
MysqlndUhConnection bool query Read Resultset Header	returns true on success
MysqlndUhConnection reap Query $connection	mysqlnd connection handle
MysqlndUhConnection bool reap Query	returns true on success
MysqlndUhConnection restart PSession $connection	mysqlnd connection handle
MysqlndUhConnection bool restart PSession	returns true on success
MysqlndUhConnection select Db $connection	mysqlnd connection handle
MysqlndUhConnection select Db $database	the database name
MysqlndUhConnection bool select Db	returns true on success
MysqlndUhConnection send Query $connection	mysqlnd connection handle
MysqlndUhConnection send Query $query	the query string
MysqlndUhConnection bool send Query	returns true on success
MysqlndUhConnection server Dump Debug Information $connection	mysqlnd connection handle
MysqlndUhConnection bool server Dump Debug Information	returns true on success
MysqlndUhConnection set Charset $connection	mysqlnd connection handle
MysqlndUhConnection set Charset $charset	the charset to be set as default
MysqlndUhConnection bool set Charset	returns true on success
MysqlndUhConnection set Client Option $connection	mysqlnd connection handle
MysqlndUhConnection set Client Option $option	the option to be set
MysqlndUhConnection set Client Option $value	optional option value if required
MysqlndUhConnection bool set Client Option	returns true on success
MysqlndUhConnection set Server Option $connection	mysqlnd connection handle
MysqlndUhConnection set Server Option $option	the option to be set
MysqlndUhConnection simple Command $connection	mysqlnd connection handle
MysqlndUhConnection simple Command $arg	optional com command arguments
MysqlndUhConnection simple Command $command	the com command to be send
MysqlndUhConnection simple Command $silent	whether mysqlnd may emit errors
MysqlndUhConnection simple Command $ignore_upsert_status	whether to ignore update / insert status
MysqlndUhConnection simple Command $ok_packet	the ok packet type
MysqlndUhConnection bool simple Command	returns true on success
MysqlndUhConnection bool simple Command mysqlnd_connection $connection int $command string $arg int $ok_packet bool $silent bool $ignore_upsert_status	sends a basic com_* command
MysqlndUhConnection simple Command Handle Response $connection	mysqlnd connection handle
MysqlndUhConnection simple Command Handle Response $ignore_upsert_status	whether to ignore update / insert status
MysqlndUhConnection simple Command Handle Response $command	the com command to process results from
MysqlndUhConnection simple Command Handle Response $silent	whether mysqlnd may emit errors
MysqlndUhConnection simple Command Handle Response $ok_packet	the ok packet type
MysqlndUhConnection bool simple Command Handle Response	returns true on success
MysqlndUhConnection stmt Init $connection	mysqlnd connection handle
MysqlndUhConnection resource stmt Init	resource of type mysqlnd prepared statement internal only - you must not modify it!)
MysqlndUhConnection tx Rollback $connection	mysqlnd connection handle
MysqlndUhConnection bool tx Rollback	returns true on success
MysqlndUhPreparedStatement execute $statement	mysqlnd prepared statement handle
MysqlndUhPreparedStatement bool execute	returns true on success
MysqlndUhPreparedStatement prepare $statement	mysqlnd prepared statement handle
MysqlndUhPreparedStatement prepare $query	the query to be prepared
MysqlndUhPreparedStatement bool prepare	returns true on success
NoRewindIterator construct $iterator	the iterator being used
NoRewindIterator Iterator construct	a norewinditerator() based on the passed in iterator
NoRewindIterator Iterator construct Iterator $iterator	construct a norewinditerator
NoRewindIterator iterator get Inner Iterator	the inner iterator as passed to norewinditerator::__construct()
NoRewindIterator iterator get Inner Iterator	get the inner iterator
NoRewindIterator mixed key	the current key
NoRewindIterator mixed key	get the current key
NoRewindIterator void next	forward to the next element
NoRewindIterator bool valid	returns true on success or false on failure
NoRewindIterator bool valid	validates the iterator
OAuth bool disable Redirects	true
OAuth bool disable Redirects	turn off redirects
OAuth bool disable SSLChecks	true
OAuth bool disable SSLChecks	turn off ssl checks
OAuth bool enable Redirects	true
OAuth bool enable Redirects	turn on redirects
OAuth bool enable SSLChecks	true
OAuth bool enable SSLChecks	turn on ssl checks
OAuth get Access Token $access_token_url	url to the access token api
OAuth get Access Token $auth_session_handle	authorization session handle this parameter does not have any citation in the core oauth 1
OAuth get Access Token $http_method	http method to use e
OAuth get Access Token $verifier_token	for service providers which support 1
OAuth array get Access Token	returns an array containing the parsed oauth response on success or false on failure
OAuth array get Access Token string $access_token_url string $auth_session_handle string $verifier_token string $http_method	fetch an access token
OAuth array get CAPath	an array of certificate authority information specifically as ca_path and ca_info keys within the returned associative array
OAuth array get CAPath	gets ca information
OAuth string get Last Response	returns a string containing the last response
OAuth string get Last Response	get the last response
OAuth array get Last Response Info	returns an array containing the response information for the last request
OAuth get Request Header $extra_parameters	string or array of additional parameters
OAuth get Request Header $http_method	http method for request
OAuth get Request Header $url	url for request
OAuth string get Request Header	a string containing the generated request header or false on failure
OAuth string get Request Header string $http_method string $url mixed $extra_parameters	generate oauth header string signature
OAuth get Request Token $request_token_url	url to the request token api
OAuth get Request Token $http_method	http method to use e
OAuth get Request Token $callback_url	oauth callback url
OAuth array get Request Token	returns an array containing the parsed oauth response on success or false on failure
OAuth array get Request Token string $request_token_url string $callback_url string $http_method	fetch a request token
OAuth set Auth Type $OAUTH_AUTH_TYPE_URI	append the oauth parameters to the request uri
OAuth set Auth Type $OAUTH_AUTH_TYPE_NONE	none
OAuth set Auth Type $OAUTH_AUTH_TYPE_AUTHORIZATION	pass the oauth parameters in the http authorization header
OAuth set Auth Type $OAUTH_AUTH_TYPE_FORM	append the oauth parameters to the http post request body
OAuth set Auth Type $auth_type	auth_type can be one of the following flags in order of decreasing preference as per oauth 1
OAuth mixed set Auth Type	returns true if a parameter is correctly set otherwise false e
OAuth mixed set Auth Type int $auth_type	set authorization type
OAuth set CAPath $ca_info	the ca info being set
OAuth set CAPath $ca_path	the ca path being set
OAuth mixed set CAPath	returns true on success or false if either ca_path or ca_info are considered invalid
OAuth mixed set CAPath string $ca_path string $ca_info	set ca path and info
OAuth set Nonce $nonce	the value for oauth_nonce
OAuth mixed set Nonce	returns true on success or false if the nonce is considered invalid
OAuth mixed set Nonce string $nonce	set the nonce for subsequent requests
OAuth set RSACertificate $cert	the rsa certificate
OAuth mixed set RSACertificate	returns true on success or false on failure e
OAuth mixed set RSACertificate string $cert	set the rsa certificate
OAuth set Timestamp $timestamp	the timestamp
OAuth mixed set Timestamp	returns true unless the timestamp is invalid in which case false is returned
OAuth mixed set Timestamp string $timestamp	set the timestamp
OAuth set Token $token_secret	the oauth token secret
OAuth set Token $token	the oauth token
OAuth bool set Token	true
OAuth bool set Token string $token string $token_secret	sets the token and secret
OAuth set Version $version	oauth version default value is always 1
OAuth bool set Version	returns true on success or false on failure
OAuth bool set Version string $version	set the oauth version
OAuthProvider add Required Parameter $req_params	the required parameters
OAuthProvider bool add Required Parameter	returns true on success or false on failure
OAuthProvider bool add Required Parameter string $req_params	add required parameters
OAuthProvider void callconsumer Handler	calls the consumernoncehandler callback
OAuthProvider void call Timestamp Nonce Handler	calls the timestampnoncehandler callback
OAuthProvider check OAuth Request $method	the http method
OAuthProvider check OAuth Request $uri	the optional uri or endpoint
OAuthProvider void check OAuth Request string $uri string $method	check an oauth request
OAuthProvider construct $params_array	setting these optional parameters is limited to the cli sapi
OAuthProvider array construct	an oauthprovider object
OAuthProvider array construct array $params_array	constructs a new oauthprovider object
OAuthProvider generate Token $size	the desired token length in terms of bytes
OAuthProvider generate Token $strong	setting to true means / dev / random will be used for entropy as otherwise the non-blocking / dev / urandom is used
OAuthProvider string generate Token	the generated token as a string of bytes
OAuthProvider string generate Token int $size bool $strong	generate a random token
OAuthProvider void is2 Legged Endpoint mixed $params_array	is2leggedendpoint
OAuthProvider remove Required Parameter $req_params	the required parameter to be removed
OAuthProvider bool remove Required Parameter	returns true on success or false on failure
OAuthProvider bool remove Required Parameter string $req_params	remove a required parameter
OAuthProvider report Problem $oauthexception	the oauthexception
OAuthProvider string report Problem string $oauthexception bool $send_headers	report a problem
OAuthProvider set Request Token Path $path	the path
OAuthProvider bool set Request Token Path	true
OAuthProvider bool set Request Token Path string $path	set request token path
OAuthProvider timestamp Nonce Handler $callback_function	the callable functions name
OAuthProvider void timestamp Nonce Handler callable $callback_function	set the timestampnoncehandler handler callback
OCI-Collection append $value	the value to be added to the collection
OCI-Collection bool append	returns true on success or false on failure
OCI-Collection bool append mixed $value	appends element to the collection
OCI-Collection assign Elem $value	can be a string or a number
OCI-Collection assign Elem $index	the element index
OCI-Collection bool assign Elem	returns true on success or false on failure
OCI-Collection bool assign Elem int $index mixed $value	assigns a value to the element of the collection
OCI-Collection bool free	returns true on success or false on failure
OCI-Collection get Elem $index	the element index
OCI-Collection mixed get Elem	returns false if such element doesnt exist; null if element is null ; string if element is column of a string datatype or number if element is numeric field
OCI-Collection mixed get Elem int $index	returns value of the element
OCI-Collection int max	returns the maximum number as an integer or false on errors
OCI-Collection int size	returns the number of elements in the collection or false on error
OCI-Collection int size	returns size of the collection
OCI-Collection trim $num	the number of elements to be trimmed
OCI-Collection bool trim	returns true on success or false on failure
OCI-Collection bool trim int $num	trims elements from the end of the collection
OCI-Lob append $lob_from	the copied lob
OCI-Lob bool append	returns true on success or false on failure
OCI-Lob bool append OCI-Lob $lob_from	appends data from the large object to another large object
OCI-Lob bool close	returns true on success or false on failure
OCI-Lob bool close	closes lob descriptor
OCI-Lob bool eof	returns true if internal pointer of large object is at the end of lob
OCI-Lob bool eof	tests for end-of-file on a large object's descriptor
OCI-Lob int erase	returns the actual number of characters / bytes erased or false on failure
OCI-Lob int erase int $offset int $length	erases a specified portion of the internal lob data
OCI-Lob export $start	indicates from where to start exporting
OCI-Lob export $length	indicates the length of data to be exported
OCI-Lob export $filename	path to the file
OCI-Lob bool export	returns true on success or false on failure
OCI-Lob bool export string $filename int $start int $length	exports lob's contents to a file
OCI-Lob flush $flag	by default resources are not freed but using flag oci_lob_buffer_free you can do it explicitly
OCI-Lob bool flush	returns true on success or false on failure
OCI-Lob bool flush int $flag	flushes / writes buffer of the lob to the server
OCI-Lob import $filename	path to the file
OCI-Lob bool import	returns true on success or false on failure
OCI-Lob bool import string $filename	imports file data to the lob
OCI-Lob string load	returns the contents of the object or false on errors
OCI-Lob string load	returns large object's contents
OCI-Lob read $length	the length of data to read in bytes
OCI-Lob string read	returns the contents as a string or false on failure
OCI-Lob string read int $length	reads part of the large object
OCI-Lob bool rewind	returns true on success or false on failure
OCI-Lob bool rewind	moves the internal pointer to the beginning of the large object
OCI-Lob save $offset	can be used to indicate offset from the beginning of the large object
OCI-Lob save $data	the data to be saved
OCI-Lob bool save	returns true on success or false on failure
OCI-Lob seek $whence	may be one of: oci_seek_set - sets the position equal to offset oci_seek_cur - adds offset bytes to the current position oci_seek_end - adds offset bytes to the end of large object use negative value to move to a position before the end of large object
OCI-Lob seek $offset	indicates the amount of bytes on which internal pointer should be moved from the position pointed by whence
OCI-Lob bool seek	returns true on success or false on failure
OCI-Lob set Buffering $on_off	true for on and false for off
OCI-Lob bool set Buffering	returns true on success or false on failure
OCI-Lob bool set Buffering bool $on_off	changes current state of buffering for the large object
OCI-Lob int size	returns length of large object value or false on failure
OCI-Lob int size	returns size of large object
OCI-Lob int tell	returns current position of a lobs internal pointer or false if an error occurred
OCI-Lob int tell	returns the current position of internal pointer of large object
OCI-Lob truncate $length	if provided this method will truncate the lob to length bytes
OCI-Lob bool truncate	returns true on success or false on failure
OCI-Lob bool truncate int $length	truncates large object
OCI-Lob write $data	the data to write in the lob
OCI-Lob write $length	if this parameter is given writing will stop after length bytes have been written or the end of data is reached whichever comes first
OCI-Lob int write	returns the number of bytes written or false on failure
OCI-Lob int write string $data int $length	writes data to the large object
OuterIterator Iterator get Inner Iterator	the inner iterator for the current entry
OuterIterator Iterator get Inner Iterator	returns the inner iterator for the current entry
ParentIterator ParentIterator get Children	an object
ParentIterator ParentIterator get Children	return the inner iterator's children contained in a parentiterator
ParentIterator bool has Children	returns true on success or false on failure
ParentIterator bool has Children	check whether the inner iterator's current element has children
ParentIterator void next	move the iterator forward
PDO bool begin Transaction	returns true on success or false on failure
PDO bool begin Transaction	initiates a transaction
PDO bool commit	returns true on success or false on failure
PDO bool commit	commits a transaction
PDO cubrid schema $table_name	table you want to know the schema of
PDO cubrid schema $col_name	column you want to know the schema of
PDO cubrid schema $schema_type	schema type that you want to know
PDO array cubrid schema	array containing the schema information when process is successful;
PDO array cubrid schema int $schema_type string $table_name string $col_name	get the requested schema information
PDO bool in Transaction	returns true if a transaction is currently active and false if not
PDO bool in Transaction	checks if inside a transaction
PDO last Insert Id $name	name of the sequence object from which the id should be returned
PDO string last Insert Id	if a sequence name was not specified for the name parameter pdo::lastinsertid() returns a string representing the row id of the last row that was inserted into the database
PDO string last Insert Id string $name	returns the id of the last inserted row or sequence value
PDO pgsql Copy From Array $table_name	string containing table name
PDO pgsql Copy From Array $delimiter	delimiter used in rows array
PDO pgsql Copy From Array $rows	array of strings with fields separated by delimiter
PDO pgsql Copy From Array $fields	list of fields to insert
PDO pgsql Copy From Array $null_as	how to interpret null values
PDO bool pgsql Copy From Array	returns true on success or false on failure
PDO bool pgsql Copy From Array string $table_name array $rows string $delimiter string $null_as string $fields	copy data from php array into table
PDO pgsql Copy From File $table_name	string containing table name
PDO pgsql Copy From File $null_as	how to interpret null values
PDO pgsql Copy From File $delimiter	delimiter used in file specified by filename
PDO pgsql Copy From File $fields	list of fields to insert
PDO pgsql Copy From File $filename	filename containing data to import
PDO bool pgsql Copy From File	returns true on success or false on failure
PDO bool pgsql Copy From File string $table_name string $filename string $delimiter string $null_as string $fields	copy data from file into table
PDO pgsql Copy To Array $table_name	string containing table name
PDO pgsql Copy To Array $delimiter	delimiter used in rows array
PDO pgsql Copy To Array $fields	list of fields to export
PDO pgsql Copy To Array $null_as	how to interpret null values
PDO array pgsql Copy To Array	returns an array of rows or false on failure
PDO array pgsql Copy To Array string $table_name array $rows string $delimiter string $null_as string $fields	copy data from database table into php array
PDO pgsql Copy To File $table_name	string containing table name
PDO pgsql Copy To File $null_as	how to interpret null values
PDO pgsql Copy To File $delimiter	delimiter used in file specified by filename
PDO pgsql Copy To File $fields	list of fields to insert
PDO pgsql Copy To File $filename	filename to export data
PDO bool pgsql Copy To File	returns true on success or false on failure
PDO bool pgsql Copy To File string $table_name string $filename string $delimiter string $null_as string $fields	copy data from table into file
PDO pgsql Get Notify $result_type	the format the result set should be returned as represented as a pdo::fetch_* constant
PDO pgsql Get Notify $ms_timeout	the length of time to wait for a response in milliseconds
PDO array pgsql Get Notify	if one or more notifications is pending returns a single row with fields message and pid otherwise returns false
PDO array pgsql Get Notify int $result_type int $ms_timeout	get asynchronous notification
PDO int pgsql Get Pid	the servers pid
PDO int pgsql Get Pid	get the server pid
PDO pgsql LOBOpen $oid	a large object identifier
PDO pgsql LOBOpen $mode	if mode is r open the stream for reading
PDO resource pgsql LOBOpen	returns a stream resource on success or false on failure
PDO resource pgsql LOBOpen string $oid string $mode	opens an existing large object stream
PDO pgsql LOBUnlink $oid	a large object identifier
PDO bool pgsql LOBUnlink	returns true on success or false on failure
PDO bool pgsql LOBUnlink string $oid	deletes the large object
PDO query $statement	the sql statement to prepare and execute
PDO PDOStatement query	pdo::query() returns a pdostatement object or false on failure
PDO PDOStatement query string $statement	executes an sql statement returning a result set as a pdostatement object
PDO quote $string	the string to be quoted
PDO quote $parameter_type	provides a data type hint for drivers that have alternate quoting styles
PDO string quote	returns a quoted string that is theoretically safe to pass into an sql statement
PDO string quote string $string int $parameter_type	quotes a string for use in a query
PDO bool roll Back	returns true on success or false on failure
PDO bool roll Back	rolls back a transaction
PDO bool set Attribute	returns true on success or false on failure
PDO bool set Attribute int $attribute mixed $value	set an attribute
PDOStatement bind Column $param	name of the php variable to which the column will be bound
PDOStatement bind Column $column	number of the column 1-indexed or name of the column in the result set
PDOStatement bind Column $driverdata	optional parameter s for the driver
PDOStatement bind Column $type	data type of the parameter specified by the pdo::param_* constants
PDOStatement bind Column $maxlen	a hint for pre-allocation
PDOStatement bool bind Column	returns true on success or false on failure
PDOStatement bool bind Column mixed $column mixed $param int $type int $maxlen mixed $driverdata	bind a column to a php variable
PDOStatement bind Param $data_type	explicit data type for the parameter using the pdo::param_* constants
PDOStatement bind Param $parameter	parameter identifier
PDOStatement bind Param $length	length of the data type
PDOStatement bind Param $variable	name of the php variable to bind to the sql statement parameter
PDOStatement bool bind Param	returns true on success or false on failure
PDOStatement bool bind Param mixed $parameter mixed $variable int $data_type int $length mixed $driver_options	binds a parameter to the specified variable name
PDOStatement bind Value $value	the value to bind to the parameter
PDOStatement bind Value $data_type	explicit data type for the parameter using the pdo::param_* constants
PDOStatement bind Value $parameter	parameter identifier
PDOStatement bool bind Value	returns true on success or false on failure
PDOStatement bool bind Value mixed $parameter mixed $value int $data_type	binds a value to a parameter
PDOStatement bool close Cursor	returns true on success or false on failure
PDOStatement bool close Cursor	closes the cursor enabling the statement to be executed again
PDOStatement void debug Dump Params	dump an sql prepared command
PDOStatement execute $input_parameters	an array of values with as many elements as there are bound parameters in the sql statement being executed
PDOStatement bool execute	returns true on success or false on failure
PDOStatement bool execute array $input_parameters	executes a prepared statement
PDOStatement fetch $offset	for a pdostatement object representing a scrollable cursor for which the cursor_orientation parameter is set to pdo::fetch_ori_abs this value specifies the absolute number of the row in the result set that shall be fetched
PDOStatement fetch $cursor_orientation	for a pdostatement object representing a scrollable cursor this value determines which row will be returned to the caller
PDOStatement fetch $fetch_style	controls how the next row will be returned to the caller
PDOStatement mixed fetch	the return value of this function on success depends on the fetch type
PDOStatement mixed fetch int $fetch_style int $cursor_orientation int $cursor_offset	fetches the next row from a result set
PDOStatement fetch Object $class_name	name of the created class
PDOStatement fetch Object $ctor_args	elements of this array are passed to the constructor
PDOStatement mixed fetch Object	returns an instance of the required class with property names that correspond to the column names or false on failure
PDOStatement mixed get Attribute	returns the attribute value
PDOStatement mixed get Attribute int $attribute	retrieve a statement attribute
PDOStatement bool next Rowset	returns true on success or false on failure
PDOStatement bool next Rowset	advances to the next rowset in a multi-rowset statement handle
PDOStatement int row Count	returns the number of rows
PDOStatement int row Count	returns the number of rows affected by the last sql statement
PDOStatement bool set Attribute	returns true on success or false on failure
PDOStatement bool set Attribute int $attribute mixed $value	set a statement attribute
Phar string api Version	the api version string as in 1
Phar string api Version	returns the api version
Phar can Compress $type	either phar::gz or phar::bz2 can be used to test whether compression is possible with a specific compression algorithm zlib or bzip2
Phar bool can Compress	true if compression / decompression is available false if not
Phar bool can Compress int $type	returns whether phar extension supports compression using either zlib or bzip2
Phar bool can Write	true if write access is enabled false if it is disabled
Phar bool can Write	returns whether phar extension supports writing and creating phars
Phar string create Default Stub	returns a string containing the contents of a customized bootstrap loader stub that allows the created phar archive to work with or without the phar extension enabled
Phar string create Default Stub string $indexfile string $webindexfile	create a phar-file format specific stub
Phar mixed get Metadata	any php variable that can be serialized and is stored as meta-data for the phar archive or null if no meta-data is stored
Phar mixed get Metadata	returns phar archive meta-data
Phar bool get Modified	true if the phar has been modified since opened false if not
Phar bool get Modified	return whether phar was modified
Phar string get Stub	returns a string containing the contents of the bootstrap loader stub of the current phar archive
Phar string get Stub	return the php loader or bootstrap stub of a phar archive
Phar array get Supported Signatures	returns an array containing any of md5 sha-1 sha-256 sha-512 or openssl
Phar string get Version	the opened archives api version
Phar string get Version	return version info of phar archive
Phar bool has Metadata	returns true if meta-data has been set and false if not
Phar bool has Metadata	returns whether phar has global meta-data
Phar void intercept File Funcs	instructs phar to intercept fopen file_get_contents opendir and all of the stat-related functions
Phar bool is Buffering	returns true if the write operations are being buffer false otherwise
Phar bool is Buffering	used to determine whether phar write operations are being buffered or are flushing directly to disk
Phar is Valid Phar Filename $executable	this parameter determines whether the filename should be treated as a phar executable archive or a data non-executable archive
Phar is Valid Phar Filename $filename	the name or full path to a phar archive not yet created
Phar bool is Valid Phar Filename	returns true if the filename is valid false if not
Phar bool is Valid Phar Filename string $filename bool $executable	returns whether the given filename is a valid phar filename
Phar bool is Writable	returns true if the phar archive can be modified
Phar bool is Writable	returns true if the phar archive can be modified
Phar load Phar $filename	the full or relative path to the phar archive to open
Phar load Phar $alias	the alias that may be used to refer to the phar archive
Phar bool load Phar	returns true on success or false on failure
Phar bool load Phar string $filename string $alias	loads any phar archive with an alias
Phar mount $externalpath	a path or url to an external file or directory to mount within the phar archive
Phar mount $pharpath	the internal path within the phar archive to use as the mounted path location
Phar void mount string $pharpath string $externalpath	mount an external path or file to a virtual location within the phar archive
Phar mung Server $munglist	an array containing as string indices any of request_uri php_self script_name and script_filename
Phar void mung Server array $munglist	defines a list of up to 4 $_server variables that should be modified for execution
Phar offset Get $offset	the filename relative path to look for in a phar
Phar int offset Get	a pharfileinfo object is returned that can be used to iterate over a files contents or to retrieve information about the current file
Phar int offset Get string $offset	gets a pharfileinfo object for a specific file
Phar running $retphar	if false the full path on disk to the phar archive is returned
Phar string running	returns the filename if valid empty string otherwise
Phar string running bool $retphar	returns the full path on disk or full phar url to the currently executing phar archive
Phar void start Buffering	start buffering phar write operations do not modify the phar object on disk
Phar void stop Buffering	stop buffering write requests to the phar archive and save changes to disk
Phar web Phar $f404	the location of the script to run when a file is not found
Phar web Phar $alias	the alias that can be used in phar: / / urls to refer to this archive rather than its full path
Phar web Phar $rewrites	the rewrites function is passed a string as its only parameter and must return a string or false
Phar web Phar $index	the location within the phar of the directory index
Phar web Phar $mimetypes	an array mapping additional file extensions to mime type
Phar void web Phar string $alias string $index string $f404 array $mimetypes callable $rewrites	mapphar for web-based phars
PharData add Empty Dir $dirname	the name of the empty directory to create in the phar archive
PharData bool add Empty Dir	no return value exception is thrown on failure
PharData bool add Empty Dir string $dirname	add an empty directory to the tar / zip archive
Phar add File $localname	path that the file will be stored in the archive
Phar add File $file	full or relative path to a file on disk to be added to the phar archive
Phar void add File string $file string $localname	add a file from the filesystem to the phar archive
PharData add From String $contents	the file contents to store
PharData add From String $localname	path that the file will be stored in the archive
PharData bool add From String	no return value exception is thrown on failure
PharData bool add From String string $localname string $contents	add a file from the filesystem to the tar / zip archive
Phar build From Directory $regex	an optional pcre regular expression that is used to filter the list of files
Phar build From Directory $base_dir	the full or relative path to the directory that contains all files to add to the archive
Phar array build From Directory	phar::buildfromdirectory() returns an associative array mapping internal path of file to the full path of the file on the filesystem
Phar array build From Directory string $base_dir string $regex	construct a phar archive from the files within a directory
PharData build From Iterator $base_directory	for iterators that return splfileinfo objects the portion of each files full path to remove when adding to the tar / zip archive
PharData build From Iterator $iter	any iterator that either associatively maps tar / zip file to location or returns splfileinfo objects
PharData array build From Iterator	phardata::buildfromiterator() returns an associative array mapping internal path of file to the full path of the file on the filesystem
PharData array build From Iterator Iterator $iter string $base_directory	construct a tar or zip archive from an iterator
PharData compress $extension	by default the extension is
PharData compress $compression	compression must be one of phar::gz phar::bz2 to add compression or phar::none to remove compression
PharData object compress	a phardata object is returned
PharData object compress int $compression string $extension	compresses the entire tar / zip archive using gzip or bzip2 compression
PharData delete $entry	path within an archive to the file to delete
PharData bool delete	returns true on success but it is better to check for thrown exception and assume success if none is thrown
PharData bool delete string $entry	delete a file within a tar / zip archive
PharData extract To $overwrite	set to true to enable overwriting existing files
PharData extract To $pathto	path to extract the given files to
PharData extract To $files	the name of a file or directory to extract or an array of files / directories to extract
PharData bool extract To	returns true on success but it is better to check for thrown exception and assume success if none is thrown
PharData bool extract To string $pathto string|array $files bool $overwrite	extract the contents of a tar / zip archive to a directory
PharData bool is Writable	returns true if the tar / zip archive can be modified
PharData bool is Writable	returns true if the tar / zip archive can be modified
PharData offset Set $offset	the filename relative path to modify in a tar or zip archive
PharData offset Set $value	content of the file
PharData void offset Set string $offset string $value	set the contents of a file within the tar / zip to those of an external file or string
PharData offset Unset $offset	the filename relative path to modify in the tar / zip archive
PharData bool offset Unset	returns true on success or false on failure
PharData bool offset Unset string $offset	remove a file from a tar / zip archive
PharData set Default Stub $webindex	relative path within the phar archive to run if accessed through a web browser
PharData set Default Stub $index	relative path within the phar archive to run if accessed on the command-line
PharData bool set Default Stub	returns true on success or false on failure
PharData bool set Default Stub string $index string $webindex	dummy function phar::setdefaultstub is not valid for phardata
PharData set Stub $stub	a string or an open stream handle to use as the executable stub for this phar archive
PharData bool set Stub	returns true on success or false on failure
PharData bool set Stub string $stub int $len	dummy function phar::setstub is not valid for phardata
PharFileInfo chmod $permissions	permissions see chmod()
PharFileInfo void chmod int $permissions	sets file-specific permission bits
PharFileInfo bool compress	returns true on success or false on failure
PharFileInfo bool compress int $compression	compresses the current phar entry with either zlib or bzip2 compression
PharFileInfo construct $entry	the full url to retrieve a file
PharFileInfo string construct string $entry	construct a phar entry object
PharFileInfo bool decompress	returns true on success or false on failure
PharFileInfo bool decompress	decompresses the current phar entry within the phar
PharFileInfo bool del Metadata	returns true if successful false if the entry had no metadata
PharFileInfo bool del Metadata	deletes the metadata of the entry
PharFileInfo mixed get Metadata	any php variable that can be serialized and is stored as meta-data for the file or null if no meta-data is stored
PharFileInfo mixed get Metadata	returns file-specific meta-data saved with a file
PharFileInfo int get Phar Flags	the phar flags always 0 in the current implementation
PharFileInfo int get Phar Flags	returns the phar file entry flags
PharFileInfo bool has Metadata	returns false if no metadata is set or is null true if metadata is not null
PharFileInfo bool has Metadata	returns the metadata of the entry
PharFileInfo set Metadata $metadata	any php variable containing information to store alongside a file
PharFileInfo void set Metadata mixed $metadata	sets file-specific meta-data saved with a file
php_user_filter void on Close	called when closing the filter
Pool resize $size	the maximum number of workers this pool can create
Pool void shutdown	shutdown all workers
QuickHashIntHash add $key	the key of the entry to add
QuickHashIntHash add $value	the optional value of the entry to add
QuickHashIntHash bool add	true when the entry was added and false if the entry was not added
QuickHashIntHash bool add int $key int $value	this method adds a new entry to the hash
QuickHashIntHash construct $options	the options that you can pass in are: quickhashinthash::check_for_dupes which makes sure no duplicate entries are added to the hash; quickhashinthash::do_not_use_zend_alloc to not use phps internal memory manager as well as one of quickhashinthash::hasher_no_hash quickhashinthash::hasher_jenkins1 or quickhashinthash::hasher_jenkins2
QuickHashIntHash construct $size	the amount of bucket lists to configure
QuickHashIntHash int construct	returns a new quickhashinthash object
QuickHashIntHash int construct int $size int $options	creates a new quickhashinthash object
QuickHashIntHash delete $key	the key of the entry to delete
QuickHashIntHash bool delete	true when the entry was deleted and false if the entry was not deleted
QuickHashIntHash bool delete int $key	this method deletes am entry from the hash
QuickHashIntHash get $key	the key of the entry to add
QuickHashIntHash int get	the value if the key exists or null if the key wasnt part of the hash
QuickHashIntHash int get Size	the number of elements in the hash
QuickHashIntHash save To File $filename	the filename of the file to store the hash in
QuickHashIntHash void save To File string $filename	this method stores an in-memory hash to disk
QuickHashIntHash string save To String	this method returns a string containing a serialized format of the hash
QuickHashIntHash string save To String	this method returns a serialized version of the hash
QuickHashIntHash update $key	the key of the entry to add
QuickHashIntHash update $value	the new value to update the entry with
QuickHashIntHash bool update	true when the entry was found and updated and false if the entry was not part of the hash already
QuickHashIntHash bool update int $key int $value	this method updates an entry in the hash with a new value
QuickHashIntSet add $key	the key of the entry to add
QuickHashIntSet bool add	true when the entry was added and false if the entry was not added
QuickHashIntSet bool add int $key	this method adds a new entry to the set
QuickHashIntSet construct $options	the options that you can pass in are: quickhashintset::check_for_dupes which makes sure no duplicate entries are added to the set; quickhashintset::do_not_use_zend_alloc to not use phps internal memory manager as well as one of quickhashintset::hasher_no_hash quickhashintset::hasher_jenkins1 or quickhashintset::hasher_jenkins2
QuickHashIntSet construct $size	the amount of bucket lists to configure
QuickHashIntSet int construct	returns a new quickhashintset object
QuickHashIntSet int construct int $size int $options	creates a new quickhashintset object
QuickHashIntSet exists $key	the key of the entry to check for whether it exists in the set
QuickHashIntSet bool exists	returns true when the entry was found or false when the entry is not found
QuickHashIntSet bool exists int $key	this method checks whether a key is part of the set
QuickHashIntSet int get Size	the number of elements in the set
QuickHashIntSet load From File $size	the amount of bucket lists to configure
QuickHashIntSet load From File $options	the same options that the class constructor takes; except that the size option is ignored
QuickHashIntSet load From File $filename	the filename of the file to read the set from
QuickHashIntSet QuickHashIntSet load From File	returns a new quickhashintset
QuickHashIntSet QuickHashIntSet load From File string $filename int $size int $options	this factory method creates a set from a file
QuickHashIntSet save To File $filename	the filename of the file to store the hash in
QuickHashIntSet void save To File string $filename	this method stores an in-memory set to disk
QuickHashIntSet string save To String	this method returns a string containing a serialized format of the set
QuickHashIntSet string save To String	this method returns a serialized version of the set
QuickHashIntStringHash add $key	the key of the entry to add
QuickHashIntStringHash add $value	the value of the entry to add
QuickHashIntStringHash bool add	true when the entry was added and false if the entry was not added
QuickHashIntStringHash bool add int $key string $value	this method adds a new entry to the hash
QuickHashIntStringHash construct $options	the options that you can pass in are: quickhashintstringhash::check_for_dupes which makes sure no duplicate entries are added to the hash; quickhashintstringhash::do_not_use_zend_alloc to not use phps internal memory manager as well as one of quickhashintstringhash::hasher_no_hash quickhashintstringhash::hasher_jenkins1 or quickhashintstringhash::hasher_jenkins2
QuickHashIntStringHash construct $size	the amount of bucket lists to configure
QuickHashIntStringHash int construct	returns a new quickhashintstringhash object
QuickHashIntStringHash int construct int $size int $options	creates a new quickhashintstringhash object
QuickHashIntStringHash exists $key	the key of the entry to check for whether it exists in the hash
QuickHashIntStringHash bool exists	returns true when the entry was found or false when the entry is not found
QuickHashIntStringHash bool exists int $key	this method checks whether a key is part of the hash
QuickHashIntStringHash load From File $options	the same options that the class constructor takes; except that the size option is ignored
QuickHashIntStringHash load From File $filename	the filename of the file to read the hash from
QuickHashIntStringHash load From File $size	the amount of bucket lists to configure
QuickHashIntStringHash QuickHashIntStringHash load From File	returns a new quickhashintstringhash
QuickHashIntStringHash QuickHashIntStringHash load From File string $filename int $size int $options	this factory method creates a hash from a file
QuickHashIntStringHash load From String $contents	the string containing a serialized format of the hash
QuickHashIntStringHash load From String $options	the same options that the class constructor takes; except that the size option is ignored
QuickHashIntStringHash load From String $size	the amount of bucket lists to configure
QuickHashIntStringHash QuickHashIntStringHash load From String	returns a new quickhashintstringhash
QuickHashIntStringHash QuickHashIntStringHash load From String string $contents int $size int $options	this factory method creates a hash from a string
QuickHashIntStringHash save To File $filename	the filename of the file to store the hash in
QuickHashIntStringHash void save To File string $filename	this method stores an in-memory hash to disk
QuickHashIntStringHash string save To String	this method returns a string containing a serialized format of the hash
QuickHashIntStringHash string save To String	this method returns a serialized version of the hash
QuickHashIntStringHash set $value	the value of the entry to add
QuickHashIntStringHash set $key	the key of the entry to add or update
QuickHashIntStringHash int set	2 if the entry was found and updated 1 if the entry was newly added or 0 if there was an error
QuickHashIntStringHash int set int $key string $value	this method updates an entry in the hash with a new value or adds a new one if the entry doesn't exist
QuickHashStringIntHash add $key	the key of the entry to add
QuickHashStringIntHash add $value	the value of the entry to add
QuickHashStringIntHash bool add	true when the entry was added and false if the entry was not added
QuickHashStringIntHash bool add string $key int $value	this method adds a new entry to the hash
QuickHashStringIntHash construct $options	the options that you can pass in are: quickhashstringinthash::check_for_dupes which makes sure no duplicate entries are added to the hash and quickhashstringinthash::do_not_use_zend_alloc to not use phps internal memory manager
QuickHashStringIntHash construct $size	the amount of bucket lists to configure
QuickHashStringIntHash int construct	returns a new quickhashstringinthash object
QuickHashStringIntHash int construct int $size int $options	creates a new quickhashstringinthash object
QuickHashStringIntHash get $key	the key of the entry to add
QuickHashStringIntHash mixed get	the value if the key exists or null if the key wasnt part of the hash
QuickHashStringIntHash int get Size	the number of elements in the hash
QuickHashStringIntHash load From File $options	the same options that the class constructor takes; except that the size option is ignored
QuickHashStringIntHash load From File $filename	the filename of the file to read the hash from
QuickHashStringIntHash load From File $size	the amount of bucket lists to configure
QuickHashStringIntHash QuickHashStringIntHash load From File	returns a new quickhashstringinthash
QuickHashStringIntHash QuickHashStringIntHash load From File string $filename int $size int $options	this factory method creates a hash from a file
QuickHashStringIntHash load From String $contents	the string containing a serialized format of the hash
QuickHashStringIntHash load From String $options	the same options that the class constructor takes; except that the size option is ignored
QuickHashStringIntHash load From String $size	the amount of bucket lists to configure
QuickHashStringIntHash QuickHashStringIntHash load From String	returns a new quickhashstringinthash
QuickHashStringIntHash QuickHashStringIntHash load From String string $contents int $size int $options	this factory method creates a hash from a string
QuickHashStringIntHash string save To String	this method returns a serialized format of an existing hash in the same format that loadfromstring() can read
QuickHashStringIntHash string save To String	this method returns a serialized version of the hash
QuickHashStringIntHash set $value	the value of the entry to add
QuickHashStringIntHash set $key	the key of the entry to add or update
QuickHashStringIntHash int set	2 if the entry was found and updated 1 if the entry was newly added or 0 if there was an error
QuickHashStringIntHash int set string $key int $value	this method updates an entry in the hash with a new value or adds a new one if the entry doesn't exist
QuickHashStringIntHash update $key	the key of the entry to add
QuickHashStringIntHash update $value	the new value for the entry
QuickHashStringIntHash bool update	true when the entry was found and updated and false if the entry was not part of the hash already
QuickHashStringIntHash bool update string $key int $value	this method updates an entry in the hash with a new value
RarEntry extract $extended_data	if true extended information such as ntfs acls and unix owner information will be set in the extract files as long as its present in the archive
RarEntry extract $password	the password used to encrypt this entry
RarEntry extract $dir	path to the directory where files should be extracted
RarEntry extract $filepath	path relative or absolute containing the directory and filename of the extracted file
RarEntry bool extract	returns true on success or false on failure
RarEntry bool extract string $dir string $filepath string $password bool $extended_data	extract entry from the archive
RarEntry int get Attr	returns the attributes or false on error
RarEntry int get Attr	get attributes of the entry
RarEntry string get Crc	returns the crc of the archive entry or false on error
RarEntry string get Crc	get crc of the entry
RarEntry int get Host Os	returns the code of the host os or false on error
RarEntry int get Host Os	get entry host os
RarEntry int get Method	returns the method number or false on error
RarEntry int get Method	get pack method of the entry
RarEntry get Stream $password	the password used to encrypt this entry
RarEntry resource get Stream	the file handler or false on failure
RarEntry resource get Stream string $password	get file handler for entry
RarEntry int get Unpacked Size	returns the unpacked size or false on error
RarEntry int get Unpacked Size	get unpacked size of the entry
RarEntry int get Version	returns the version or false on error
RarEntry int get Version	get minimum version of rar program required to unpack the entry
RarEntry bool is Directory	returns true if this entry is a directory and false otherwise
RarEntry bool is Directory	test whether an entry represents a directory
RarEntry bool is Encrypted	returns true if the current entry is encrypted and false otherwise
RarEntry bool is Encrypted	test whether an entry is encrypted
RarEntry string to String	a textual representation for the entry
RarEntry string to String	get text representation of entry
RarException bool is Using Exceptions	returns true if exceptions are being used false otherwise
RarException bool is Using Exceptions	check whether error handling with exceptions is in use
RecursiveArrayIterator RecursiveArrayIterator get Children	an iterator for the current entry if it is an array or object
RecursiveArrayIterator RecursiveArrayIterator get Children	returns an iterator for the current entry if it is an array or an object
RecursiveArrayIterator bool has Children	returns true if the current entry is an array or an object otherwise false is returned
RecursiveArrayIterator bool has Children	returns whether current entry is an array or an object
RecursiveCachingIterator construct $iterator	the iterator being used
RecursiveCachingIterator construct $flags	the flags
RecursiveCachingIterator Iterator construct	the recursivecachingiterator
RecursiveCachingIterator Iterator construct Iterator $iterator string $flags	construct
RecursiveCallbackFilterIterator RecursiveCallbackFilterIterator get Children	returns a recursivecallbackfilteriterator containing the children
RecursiveCallbackFilterIterator RecursiveCallbackFilterIterator get Children	return the inner iterator's children contained in a recursivecallbackfilteriterator
RecursiveDirectoryIterator construct $flags	flags may be provided which will affect the behavior of some methods
RecursiveDirectoryIterator construct $path	the path of the directory to be iterated over
RecursiveDirectoryIterator string construct	returns the newly created recursivedirectoryiterator
RecursiveDirectoryIterator string construct string $path int $flags	constructs a recursivedirectoryiterator
RecursiveDirectoryIterator string get Sub Path	the sub path sub directory
RecursiveDirectoryIterator string get Sub Path	get sub path
RecursiveDirectoryIterator string get Sub Pathname	the sub path sub directory and filename
RecursiveDirectoryIterator string get Sub Pathname	get sub path and name
RecursiveFilterIterator construct $iterator	the recursiveiterator to be filtered
RecursiveFilterIterator RecursiveFilterIterator get Children	returns a recursivefilteriterator containing the inner iterators children
RecursiveFilterIterator RecursiveFilterIterator get Children	return the inner iterator's children contained in a recursivefilteriterator
RecursiveFilterIterator bool has Children	true if the inner iterator has children otherwise false
RecursiveFilterIterator bool has Children	check whether the inner iterator's current element has children
RecursiveIterator RecursiveIterator get Children	an iterator for the current entry
RecursiveIterator RecursiveIterator get Children	returns an iterator for the current entry
RecursiveIterator bool has Children	returns true if the current entry can be iterated over otherwise returns false
RecursiveIterator bool has Children	returns if an iterator can be created fot the current entry
RecursiveIteratorIterator void begin Children	begin children
RecursiveIteratorIterator void begin Iteration	begin iteration
RecursiveIteratorIterator bool call Has Children	true if the element has children otherwise false
RecursiveIteratorIterator bool call Has Children	has children
RecursiveIteratorIterator construct $iterator	the iterator being constructed from
RecursiveIteratorIterator construct $flags	optional flag
RecursiveIteratorIterator construct $mode	optional mode
RecursiveIteratorIterator Traversable construct Traversable $iterator int $mode int $flags	construct a recursiveiteratoriterator
RecursiveIteratorIterator void end Children	end children
RecursiveIteratorIterator void end Iteration	end iteration
RecursiveIteratorIterator iterator get Inner Iterator	the current active sub iterator
RecursiveIteratorIterator iterator get Inner Iterator	get inner iterator
RecursiveIteratorIterator mixed get Max Depth	the maximum accepted depth or false if any depth is allowed
RecursiveIteratorIterator mixed get Max Depth	get max depth
RecursiveIteratorIterator void next Element	next element
RecursiveRegexIterator RecursiveRegexIterator get Children	an iterator for the current entry if it can be iterated over by the inner iterator
RecursiveRegexIterator RecursiveRegexIterator get Children	returns an iterator for the current entry
RecursiveRegexIterator bool has Children	returns true if an iterator can be obtained for the current entry otherwise returns false
RecursiveTreeIterator RecursiveIterator begin Iteration	a recursiveiterator
RecursiveTreeIterator RecursiveIterator begin Iteration	begin iteration
RecursiveTreeIterator RecursiveIterator call Get Children	a recursiveiterator
RecursiveTreeIterator RecursiveIterator call Get Children	get children
RecursiveTreeIterator bool call Has Children	true if there are children otherwise false
RecursiveTreeIterator bool call Has Children	has children
RecursiveTreeIterator string current	returns the current element prefixed and postfixed
RecursiveTreeIterator string current	get current element
RecursiveTreeIterator void end Children	end children
RecursiveTreeIterator void get Postfix	get the postfix
RecursiveTreeIterator string get Prefix	returns the string to place in front of current element
RecursiveTreeIterator string get Prefix	get the prefix
RecursiveTreeIterator string key	returns the current key prefixed and postfixed
RecursiveTreeIterator string key	get the key of the current element
RecursiveTreeIterator void rewind	rewind iterator
RecursiveTreeIterator set Prefix Part $part	one of the recursivetreeiterator::prefix_* constants
RecursiveTreeIterator set Prefix Part $value	the value to assign to the part of the prefix specified in part
RecursiveTreeIterator void set Prefix Part int $part string $value	set a part of the prefix
Reflection export $return	setting to true will return the export as opposed to emitting it
Reflection export $reflector	the reflection to export
Reflection string export	if the return parameter is set to true then the export is returned as a string otherwise null is returned
Reflection string export Reflector $reflector bool $return	exports
Reflection get Modifier Names $modifiers	the modifiers to get which is from a numeric value
Reflection array get Modifier Names	an array of modifier names
ReflectionClass construct $argument	either a string containing the name of the class to reflect or an object
ReflectionClass mixed construct mixed $argument	constructs a reflectionclass
ReflectionClass export $return	setting to true will return the export as opposed to emitting it
ReflectionClass export $argument	the reflection to export
ReflectionClass string export	if the return parameter is set to true then the export is returned as a string otherwise null is returned
ReflectionClass string export mixed $argument bool $return	exports a class
ReflectionClass get Constant $name	name of the constant
ReflectionClass mixed get Constant	value of the constant
ReflectionClass mixed get Constant string $name	gets defined constant
ReflectionClass array get Constants	an array of constants
ReflectionClass array get Constants	gets constants
ReflectionClass array get Default Properties	an array of default properties with the key being the name of the property and the value being the default value of the property or null if the property doesnt have a default value
ReflectionClass array get Default Properties	gets default properties
ReflectionClass int get End Line	the ending line number of the user defined class or false if unknown
ReflectionClass int get End Line	gets end line
ReflectionClass ReflectionExtension get Extension	a reflectionextension object representing the extension which defined the class or null for user-defined classes
ReflectionClass array get Interface Names	a numerical array with interface names as the values
ReflectionClass array get Interface Names	gets the interface names
ReflectionClass array get Interfaces	an associative array of interfaces with keys as interface names and the array values as reflectionclass objects
ReflectionClass get Method $name	the method name to reflect
ReflectionClass ReflectionMethod get Method	a reflectionmethod
ReflectionClass get Methods $filter	filter the results to include only methods with certain attributes
ReflectionClass array get Methods	an array of reflectionmethod objects reflecting each method
ReflectionClass array get Methods int $filter	gets an array of methods
ReflectionClass int get Modifiers	returns bitmask of modifier constants
ReflectionClass int get Modifiers	gets modifiers
ReflectionClass get Properties $filter	the optional filter for filtering desired property types
ReflectionClass array get Properties	an array of reflectionproperty objects
ReflectionClass array get Properties int $filter	gets properties
ReflectionClass get Property $name	the property name
ReflectionClass ReflectionProperty get Property	a reflectionproperty
ReflectionClass ReflectionProperty get Property string $name	gets a reflectionproperty for a class's property
ReflectionClass string get Short Name	the class short name
ReflectionClass string get Short Name	gets short name
ReflectionClass int get Start Line	the starting line number as an integer
ReflectionClass int get Start Line	gets starting line number
ReflectionClass has Constant $name	the name of the constant being checked for
ReflectionClass bool has Constant	true if the constant is defined otherwise false
ReflectionClass bool has Constant string $name	checks if constant is defined
ReflectionClass has Method $name	name of the method being checked for
ReflectionClass bool has Method	true if it has the method otherwise false
ReflectionClass bool has Method string $name	checks if method is defined
ReflectionClass bool is Abstract	returns true on success or false on failure
ReflectionClass bool is Abstract	checks if class is abstract
ReflectionClass bool is Anonymous	returns true on success or false on failure
ReflectionClass bool is Anonymous	checks if class is anonymous
ReflectionClass bool is Cloneable	returns true if the class is cloneable false otherwise
ReflectionClass bool is Final	returns true on success or false on failure
ReflectionClass bool is Final	checks if class is final
ReflectionClass is Instance $object	the object being compared to
ReflectionClass bool is Instance	returns true on success or false on failure
ReflectionClass bool is Instance object $object	checks class for instance
ReflectionClass bool is Instantiable	returns true on success or false on failure
ReflectionClass bool is Interface	returns true on success or false on failure
ReflectionClass bool is Interface	checks if the class is an interface
ReflectionClass bool is Internal	returns true on success or false on failure
ReflectionClass bool is Internal	checks if class is defined internally by an extension or the core
ReflectionClass is Subclass Of $class	the class name being checked against
ReflectionClass bool is Subclass Of	returns true on success or false on failure
ReflectionClass bool is Subclass Of string $class	checks if a subclass
ReflectionClass new Instance $args	accepts a variable number of arguments which are passed to the class constructor much like call_user_func()
ReflectionClass object new Instance mixed $args	creates a new class instance from given arguments
ReflectionClass new Instance Args $args	the parameters to be passed to the class constructor as an array
ReflectionClass object new Instance Args	returns a new instance of the class
ReflectionClass object new Instance Args array $args	creates a new class instance from given arguments
ReflectionClass object new Instance Without Constructor	creates a new class instance without invoking the constructor
ReflectionClass set Static Property Value $value	new property value
ReflectionClass set Static Property Value $name	property name
ReflectionClass string to String	a string representation of this reflectionclass instance
ReflectionExtension void clone	clones
ReflectionExtension export $return	setting to true will return the export as opposed to emitting it
ReflectionExtension export $name	the reflection to export
ReflectionExtension string export	if the return parameter is set to true then the export is returned as a string otherwise null is returned
ReflectionExtension string export string $name string $return	export
ReflectionExtension array get Constants	an associative array with constant names as keys
ReflectionExtension array get Constants	gets constants
ReflectionExtension array get Dependencies	an associative array with dependencies as keys and either required optional or conflicts as the values
ReflectionExtension array get Dependencies	gets dependencies
ReflectionExtension array get Functions	an associative array of reflectionfunction objects for each function defined in the extension with the keys being the function names
ReflectionExtension array get Functions	gets extension functions
ReflectionExtension array get INIEntries	an associative array with the ini entries as keys with their defined values as values
ReflectionExtension array get INIEntries	gets extension ini entries
ReflectionExtension string get Name	the extensions name
ReflectionExtension string get Name	gets extension name
ReflectionExtension string get Version	the version of the extension
ReflectionExtension string get Version	gets extension version
ReflectionExtension void info	print extension info
ReflectionExtension string to String	returns the exported extension as a string in the same way as the reflectionextension::export()
ReflectionExtension string to String	to string
ReflectionFunction construct $name	the name of the function to reflect or a closure
ReflectionFunction invoke $args	the passed in argument list
ReflectionFunction mixed invoke	returns the result of the invoked function call
ReflectionFunction mixed invoke mixed $parameter	invokes function
ReflectionFunction invoke Args $args	the passed arguments to the function as an array much like call_user_func_array() works
ReflectionFunction mixed invoke Args	returns the result of the invoked function
ReflectionFunction mixed invoke Args array $args	invokes function args
ReflectionFunction bool is Disabled	true if its disable otherwise false
ReflectionFunction bool is Disabled	checks if function is disabled
ReflectionFunctionAbstract void clone	clones function
ReflectionFunctionAbstract string get Doc Comment	the doc comment if it exists otherwise false
ReflectionFunctionAbstract string get Doc Comment	gets doc comment
ReflectionFunctionAbstract int get End Line	the ending line number of the user defined function or false if unknown
ReflectionFunctionAbstract int get End Line	gets end line number
ReflectionFunctionAbstract ReflectionExtension get Extension	the extension information as a reflectionextension object
ReflectionFunctionAbstract ReflectionExtension get Extension	gets extension info
ReflectionFunctionAbstract string get File Name	the file name
ReflectionFunctionAbstract string get File Name	gets file name
ReflectionFunctionAbstract string get Name	the name of the function
ReflectionFunctionAbstract string get Name	gets function name
ReflectionFunctionAbstract int get Number Of Parameters	the number of parameters
ReflectionFunctionAbstract int get Number Of Parameters	gets number of parameters
ReflectionFunctionAbstract int get Number Of Required Parameters	the number of required parameters
ReflectionFunctionAbstract int get Number Of Required Parameters	gets number of required parameters
ReflectionFunctionAbstract array get Parameters	the parameters as a reflectionparameter object
ReflectionFunctionAbstract array get Parameters	gets parameters
ReflectionFunctionAbstract ReflectionType get Return Type	returns a reflectiontype object if a return type is specified null otherwise
ReflectionFunctionAbstract ReflectionType get Return Type	gets the specified return type of a function
ReflectionFunctionAbstract string get Short Name	the short name of the function
ReflectionFunctionAbstract string get Short Name	gets function short name
ReflectionFunctionAbstract int get Start Line	the starting line number
ReflectionFunctionAbstract int get Start Line	gets starting line number
ReflectionFunctionAbstract array get Static Variables	an array of static variables
ReflectionFunctionAbstract array get Static Variables	gets static variables
ReflectionFunctionAbstract bool in Namespace	true if its in a namespace otherwise false
ReflectionFunctionAbstract bool in Namespace	checks if function in namespace
ReflectionFunctionAbstract bool is Deprecated	true if its deprecated otherwise false
ReflectionFunctionAbstract bool is Deprecated	checks if deprecated
ReflectionFunctionAbstract bool is Internal	true if its internal otherwise false
ReflectionFunctionAbstract bool is Internal	checks if is internal
ReflectionFunctionAbstract bool is User Defined	true if its user-defined otherwise false;
ReflectionFunctionAbstract bool is User Defined	checks if user defined
ReflectionFunctionAbstract bool returns Reference	true if it returns a reference otherwise false
ReflectionFunctionAbstract bool returns Reference	checks if returns reference
ReflectionGenerator construct $generator	a generator object
ReflectionGenerator Generator get Executing Generator	returns the currently executing generator object
ReflectionGenerator Generator get Executing Generator	gets the executing generator object
ReflectionGenerator ReflectionFunctionAbstract get Function	returns a reflectionfunctionabstract class
ReflectionGenerator ReflectionFunctionAbstract get Function	gets the function name of the generator
ReflectionGenerator get Trace $options	the value of options can be any of the following the following flags
ReflectionGenerator array get Trace	returns the trace of the currently executing generator
ReflectionGenerator array get Trace int $options	gets the trace of the executing generator
ReflectionMethod construct $class_method	class name and method name delimited by ::
ReflectionMethod construct $name	name of the method
ReflectionMethod construct $class	classname or object instance of the class that contains the method
ReflectionMethod mixed construct mixed $class string $name	constructs a reflectionmethod
ReflectionMethod ReflectionClass get Declaring Class	a reflectionclass object of the class that the reflected method is part of
ReflectionMethod ReflectionClass get Declaring Class	gets declaring class for the reflected method
ReflectionMethod int get Modifiers	a numeric representation of the modifiers
ReflectionMethod int get Modifiers	gets the method modifiers
ReflectionMethod bool is Constructor	true if the method is a constructor otherwise false
ReflectionMethod bool is Constructor	checks if method is a constructor
ReflectionMethod bool is Destructor	true if the method is a destructor otherwise false
ReflectionMethod bool is Destructor	checks if method is a destructor
ReflectionMethod bool is Private	true if the method is private otherwise false
ReflectionMethod bool is Private	checks if method is private
ReflectionMethod bool is Static	true if the method is static otherwise false
ReflectionMethod bool is Static	checks if method is static
ReflectionMethod set Accessible $accessible	true to allow accessibility or false
ReflectionMethod void set Accessible bool $accessible	set method accessibility
ReflectionMethod string to String	a string representation of this reflectionmethod instance
ReflectionObject construct $argument	an object instance
ReflectionParameter bool allows Null	true if null is allowed otherwise false
ReflectionParameter bool allows Null	checks if null is allowed
ReflectionParameter construct $function	the function to reflect parameters from
ReflectionParameter construct $parameter	the parameter
ReflectionParameter string construct string $function string $parameter	construct
ReflectionParameter ReflectionClass get Class	a reflectionclass object
ReflectionParameter ReflectionClass get Class	get the type hinted class
ReflectionParameter ReflectionFunctionAbstract get Declaring Function	a reflectionfunction object
ReflectionParameter ReflectionFunctionAbstract get Declaring Function	gets declaring function
ReflectionParameter mixed get Default Value	the parameters default value
ReflectionParameter mixed get Default Value	gets default parameter value
ReflectionParameter string get Name	the name of the reflected parameter
ReflectionParameter string get Name	gets parameter name
ReflectionParameter ReflectionType get Type	returns a reflectiontype object if a parameter type is specified null otherwise
ReflectionParameter ReflectionType get Type	gets a parameter's type
ReflectionParameter bool is Array	true if an array is expected false otherwise
ReflectionParameter bool is Array	checks if parameter expects an array
ReflectionParameter bool is Optional	true if the parameter is optional otherwise false
ReflectionParameter bool is Optional	checks if optional
ReflectionParameter bool is Passed By Reference	true if the parameter is passed in by reference otherwise false
ReflectionParameter bool is Passed By Reference	checks if passed by reference
ReflectionProperty export $name	the property name
ReflectionProperty export $return	setting to true will return the export as opposed to emitting it
ReflectionProperty export $argument	the reflection to export
ReflectionProperty string export mixed $class string $name bool $return	export
ReflectionProperty ReflectionClass get Declaring Class	a reflectionclass object
ReflectionProperty ReflectionClass get Declaring Class	gets declaring class
ReflectionProperty string get Doc Comment	the property doc comment
ReflectionProperty string get Doc Comment	gets the property doc comment
ReflectionProperty int get Modifiers	a numeric representation of the modifiers
ReflectionProperty int get Modifiers	gets modifiers
ReflectionProperty string get Name	the name of the reflected property
ReflectionProperty string get Name	gets property name
ReflectionProperty get Value $object	if the property is non-static an object must be provided to fetch the property from
ReflectionProperty mixed get Value	the current value of the property
ReflectionProperty mixed get Value object $object	gets value
ReflectionProperty bool is Public	true if the property is public false otherwise
ReflectionProperty bool is Public	checks if property is public
ReflectionProperty bool is Static	true if the property is static false otherwise
ReflectionProperty bool is Static	checks if property is static
ReflectionProperty set Accessible $accessible	true to allow accessibility or false
ReflectionProperty void set Accessible bool $accessible	set property accessibility
ReflectionType bool allows Null	true if null is allowed otherwise false
ReflectionType bool allows Null	checks if null is allowed
ReflectionType bool is Builtin	true if its a built-in type otherwise false
ReflectionType bool is Builtin	checks if it is a built-in type
RegexIterator int get Mode	returns the operation mode
RegexIterator int get Mode	returns operation mode
RegexIterator int get Preg Flags	returns a bitmask of the regular expression flags
RegexIterator int get Preg Flags	returns the regular expression flags
RegexIterator set Preg Flags $preg_flags	the regular expression flags
RRDCreator add Data Source $description	definition of data source - ds
RRDCreator void add Data Source string $description	adds data source definition for rrd database
RRDCreator bool save	returns true on success or false on failure
RRDCreator bool save	saves the rrd database to a file
RRDGraph construct $path	full path for the newly created image
RRDGraph array save	array with information about generated image is returned false if error occurs
RRDGraph array save	saves the result of query into image
RRDUpdater construct $path	filesystem path for rrd database file which will be updated
RRDUpdater update $time	time value for updating the rrd with a particulat data
RRDUpdater update $values	data for update
RRDUpdater bool update	returns true on success or false on failure
RRDUpdater bool update array $values string $time	update the rrd database file
SAMConnection bool commit	this method returns false if an error occurs
SAMConnection bool commit	commits completes the current unit of work
SAMConnection bool connect	this method returns false if an error occurs
SAMConnection bool connect string $protocol array $properties	establishes a connection to a messaging server
SAMConnection bool disconnect	returns true on success or false on failure
SAMConnection bool disconnect	disconnects from a messaging server
SAMConnection bool is Connected	this method returns true if the samconnection object is successfully connected to a messaging server or false otherwise
SAMConnection bool is Connected	queries whether a connection is established to a messaging server
SAMConnection remove $properties	an optional associative array of properties describing other parameters to control the remove operation
SAMConnection remove $target	the identity of the queue from which to remove the message
SAMConnection SAMMessage remove	this method returns false if an error occurs
SAMConnection SAMMessage remove string $target array $properties	remove a message from a queue
SAMConnection bool rollback	this method returns false if an error occurs
SAMConnection bool rollback	cancels rolls back an in-flight unit of work
SAMConnection subscribe $targetTopic	the identity of the topic topic: / / topicname to subscribe to
SAMConnection string subscribe	a subscription identifier that can be used in a subsequent receive call as a selector to obtain any topic data or false if an error occurred
SAMConnection string subscribe string $targetTopic	create a subscription to a specified topic
SDO_DAS_XML_Document string get Root Element Name	returns root elements name
SDO_DAS_XML_Document string get Root Element Name	returns root element's name
SDO_DAS_XML_Document string get Root Element URI	returns root elements uri string
SDO_DAS_XML_Document string get Root Element URI	returns root element's uri string
SDO_DAS_XML_Document set XMLDeclaration $xmlDeclatation	boolean value to set the xml declaration
SDO_DAS_XML_Document void set XMLDeclaration bool $xmlDeclatation	sets the xml declaration
SDO_DAS_XML add Types $xsd_file	path to xsd schema file
SDO_DAS_XML void add Types string $xsd_file	to load a second or subsequent schema file to a sdo_das_xml object
SDO_DAS_XML create $xsd_file	path to xsd schema file
SDO_DAS_XML SDO_DAS_XML create	returns sdo_das_xml object on success otherwise throws an exception as described below
SDO_DAS_XML SDO_DAS_XML create mixed $xsd_file string $key	to create sdo_das_xml object for a given schema file
SDO_DAS_XML create Data Object $type_name	type name
SDO_DAS_XML create Data Object $namespace_uri	namespace uri of the type name
SDO_DAS_XML SDO_DataObject create Data Object	returns sdo_dataobject on success
SDO_DAS_XML load File $xml_file	path to instance document
SDO_DAS_XML SDO_XMLDocument load File	returns sdo_das_xml_document object on success or throws exception as described
SDO_DAS_XML SDO_XMLDocument load File string $xml_file	returns sdo_das_xml_document object for a given path to xml instance document
SDO_DAS_XML load String $xml_string	xml string
SDO_DAS_XML SDO_DAS_XML_Document load String	returns sdo_das_xml_document object on success or throws exception as described
SDO_DAS_XML SDO_DAS_XML_Document load String string $xml_string	returns sdo_das_xml_document for a given xml instance string
SDO_DAS_XML save File $xml_file	xml file
SDO_DAS_XML save File $indent	optional argument to specify that the xml should be formatted
SDO_DAS_XML save File $xdoc	sdo_das_xml_document object
SDO_DAS_XML save String $indent	optional argument to specify that the xml should be formatted
SDO_DAS_XML save String $xdoc	sdo_das_xml_document object
SDO_DAS_XML string save String	xml string
SDO_DAS_XML string save String SDO_XMLDocument $xdoc int $indent	saves the sdo_das_xml_document object to a string
SeekableIterator seek $position	the position to seek to
SeekableIterator void seek int $position	seeks to a position
Serializable unserialize $serialized	the string representation of the object
Serializable void unserialize string $serialized	constructs the object
SessionHandler bool close	the return value usually true on success false on failure
SessionHandler bool close	close the session
SessionHandler string create sid	a session id valid for the default session handler
SessionHandler string create sid	return a new session id
SessionHandler gc $maxlifetime	sessions that have not updated for the last maxlifetime seconds will be removed
SessionHandler bool gc	the return value usually true on success false on failure
SessionHandler bool gc int $maxlifetime	cleanup old sessions
SessionHandler write $session_id	the session id
SessionHandler write $session_data	the encoded session data
SessionHandler bool write	the return value usually true on success false on failure
SessionHandler bool write string $session_id string $session_data	write session data
SessionHandlerInterface bool close	the return value usually true on success false on failure
SessionHandlerInterface bool close	close the session
SessionHandlerInterface read $session_id	the session id
SessionHandlerInterface string read	returns an encoded string of the read data
SessionHandlerInterface string read string $session_id	read session data
SessionHandlerInterface write $session_id	the session id
SessionHandlerInterface write $session_data	the encoded session data
SessionHandlerInterface bool write	the return value usually true on success false on failure
SessionHandlerInterface bool write string $session_id string $session_data	write session data
SimpleXMLElement add Attribute $name	the name of the attribute to add
SimpleXMLElement add Attribute $value	the value of the attribute
SimpleXMLElement add Attribute $namespace	if specified the namespace to which the attribute belongs
SimpleXMLElement add Child $namespace	if specified the namespace to which the child element belongs
SimpleXMLElement add Child $value	if specified the value of the child element
SimpleXMLElement add Child $name	the name of the child element to add
SimpleXMLElement SimpleXMLElement add Child	the addchild method returns a simplexmlelement object representing the child added to the xml node
SimpleXMLElement SimpleXMLElement add Child string $name string $value string $namespace	adds a child element to the xml node
SimpleXMLElement children $is_prefix	if is_prefix is true ns will be regarded as a prefix
SimpleXMLElement children $ns	an xml namespace
SimpleXMLElement SimpleXMLElement children	returns a simplexmlelement element whether the node has children or not
SimpleXMLElement SimpleXMLElement children string $ns bool $is_prefix	finds children of given node
SimpleXMLElement int count	returns the number of elements of an element
SimpleXMLElement int count	counts the children of an element
SimpleXMLElement get Doc Namespaces $recursive	if specified returns all namespaces declared in parent and child nodes
SimpleXMLElement get Doc Namespaces $from_root	allows you to recursively check namespaces under a child node instead of from the root of the xml doc
SimpleXMLElement array get Doc Namespaces	the getdocnamespaces method returns an array of namespace names with their associated uris
SimpleXMLElement string get Name	the getname method returns as a string the name of the xml tag referenced by the simplexmlelement object
SimpleXMLElement get Namespaces $recursive	if specified returns all namespaces used in parent and child nodes
SimpleXMLElement array get Namespaces	the getnamespaces method returns an array of namespace names with their associated uris
SimpleXMLElement register XPath Namespace $prefix	the namespace prefix to use in the xpath query for the namespace given in ns
SimpleXMLElement register XPath Namespace $ns	the namespace to use for the xpath query
SimpleXMLElement bool register XPath Namespace	returns true on success or false on failure
SimpleXMLElement string to String	returns the string content on success or an empty string on failure
SimpleXMLElement string to String	returns the string content
SimpleXMLElement xpath $path	an xpath path
SimpleXMLElement array xpath	returns an array of simplexmlelement objects or false in case of an error
SimpleXMLElement array xpath string $path	runs xpath query on xml data
SimpleXMLIterator mixed current	returns the current element as a simplexmliterator object or null on failure
SimpleXMLIterator mixed current	returns the current element
SimpleXMLIterator SimpleXMLIterator get Children	returns a simplexmliterator object containing the sub-elements of the current element
SimpleXMLIterator SimpleXMLIterator get Children	returns the sub-elements of the current element
SimpleXMLIterator bool has Children	true if the current element has sub-elements otherwise false
SimpleXMLIterator bool has Children	checks whether the current element has sub elements
SimpleXMLIterator bool valid	returns true if the current element is valid otherwise false
SimpleXMLIterator bool valid	check whether the current element is valid
SNMP bool close	returns true on success or false on failure
SNMP bool close	close snmp session
SNMP get $preserve_keys	when object_id is a array and preserve_keys set to true keys in results will be taken exactly as in object_id otherwise snmp::oid_output_format property is used to determinate the form of keys
SNMP get $object_id	the snmp object oid or objects
SNMP mixed get	returns snmp objects requested as string or array depending on object_id type or false on error
SNMP mixed get mixed $object_id bool $preserve_keys	fetch an snmp object
SNMP string get Error	string describing error from last snmp request
SNMP string get Error	get last error message
SNMP getnext $object_id	the snmp object oid or objects
SNMP mixed getnext	returns snmp objects requested as string or array depending on object_id type or false on error
SNMP mixed getnext mixed $object_id	fetch an snmp object which follows the given object id
SNMP walk $object_id	root of subtree to be fetched
SNMP walk $suffix_as_key	by default full oid notation is used for keys in output array
SNMP walk $non_repeaters	this specifies the number of supplied variables that should not be iterated over
SNMP walk $max_repetitions	this specifies the maximum number of iterations over the repeating variables
SNMP array walk	returns an associative array of the snmp object ids and their values on success or false on error
SNMP array walk string $object_id bool $suffix_as_key int $max_repetitions int $non_repeaters	fetch snmp object subtree
SoapClient mixed call string $function_name string $arguments	calls a soap function deprecated
SoapClient do Request $one_way	if one_way is set to 1 this method returns nothing
SoapClient do Request $action	the soap action
SoapClient do Request $version	the soap version
SoapClient do Request $location	the url to request
SoapClient do Request $request	the xml soap request
SoapClient string do Request	the xml soap response
SoapClient string do Request string $request string $location string $action int $version int $one_way	performs a soap request
SoapClient array get Functions	the array of soap function prototypes detailing the return type the function name and type-hinted paramaters
SoapClient array get Functions	returns list of available soap functions
SoapClient string get Last Response Headers	the last soap response headers
SoapClient set Location $new_location	the new endpoint url
SoapClient string set Location	the old endpoint url
SoapClient string set Location string $new_location	sets the location of the web service to use
SoapClient set Soap Headers $soapheaders	the headers to be set
SoapClient bool set Soap Headers	returns true on success or false on failure
SoapClient bool set Soap Headers mixed $soapheaders	sets soap headers for subsequent calls
SoapClient soap Call $arguments	an array of the arguments to pass to the function
SoapClient soap Call $options	an associative array of options to pass to the client
SoapClient soap Call $output_headers	if supplied this array will be filled with the headers from the soap response
SoapClient soap Call $function_name	the name of the soap function to call
SoapClient soap Call $input_headers	an array of headers to be sent along with the soap request
SoapClient mixed soap Call	soap functions may return one or multiple values
SoapClient mixed soap Call string $function_name array $arguments array $options mixed $input_headers array $output_headers	calls a soap function
SoapClient Soap Client $options	an array of options
SoapClient Soap Client $wsdl	uri of the wsdl file or null if working in non-wsdl mode
SoapClient mixed Soap Client mixed $wsdl array $options	soapclient constructor
SoapFault Soap Fault $faultcode	the error code of the soapfault
SoapFault Soap Fault $headerfault	can be used during soap header handling to report an error in the response header
SoapFault Soap Fault $faultactor	a string identifying the actor that caused the error
SoapFault Soap Fault $faultstring	the error message of the soapfault
SoapFault Soap Fault $detail	more details about the cause of the error
SoapFault Soap Fault $faultname	can be used to select the proper fault encoding from wsdl
SoapFault string Soap Fault string $faultcode string $faultstring string $faultactor string $detail string $faultname string $headerfault	soapfault constructor
SoapFault string to String	a string describing the soapfault
SoapFault string to String	obtain a string representation of a soapfault
SoapHeader Soap Header $data	a soap headers content
SoapHeader Soap Header $namespace	the namespace of the soap header element
SoapHeader Soap Header $mustUnderstand	value of the mustunderstand attribute of the soap header element
SoapHeader Soap Header $name	the name of the soapheader object
SoapHeader Soap Header $actor	value of the actor attribute of the soap header element
SoapHeader string Soap Header string $namespace string $name mixed $data bool $mustunderstand string $actor	soapheader constructor
SoapParam Soap Param $name	the parameter name
SoapParam Soap Param $data	the data to pass or return
SoapParam mixed Soap Param mixed $data string $name	soapparam constructor
SoapServer add Function $functions	to export one function pass the function name into this parameter as a string
SoapServer void add Function mixed $functions	adds one or more functions to handle soap requests
SoapServer add Soap Header $object	the header to be returned
SoapServer void add Soap Header SoapHeader $object	add a soap header to the response
SoapServer fault $name	the name of the fault
SoapServer fault $details	more details of the fault
SoapServer fault $string	a brief description of the error
SoapServer fault $actor	a string identifying the actor that caused the fault
SoapServer fault $code	the error code to return
SoapServer void fault string $code string $string string $actor string $details string $name	issue soapserver fault indicating an error
SoapServer array get Functions	an array of the defined functions
SoapServer array get Functions	returns list of defined functions
SoapServer set Class $args	these optional parameters will be passed to the default class constructor during object creation
SoapServer set Class $class_name	the name of the exported class
SoapServer void set Class string $class_name mixed $args	sets the class which handles soap requests
SoapServer set Object $object	the object to handle the requests
SoapServer void set Object object $object	sets the object which will be used to handle soap requests
SoapServer set Persistence $mode	one of the soap_persistence_xxx constants
SoapServer void set Persistence int $mode	sets soapserver persistence mode
SolrClient add Documents $docs	an array containing the collection of solrinputdocument instances
SolrClient add Documents $overwrite	whether to overwrite existing documents or not
SolrClient add Documents $commitWithin	number of milliseconds within which to auto commit this document
SolrClient void add Documents array $docs bool $overwrite int $commitWithin	adds a collection of solrinputdocument instances to the index
SolrClient delete By Queries $queries	the array of queries
SolrClient SolrUpdateResponse delete By Queries	returns a solrupdateresponse on success and throws a solrclientexception on failure
SolrClient get By Id $id	document id
SolrClient SolrQueryResponse get By Id	solrqueryresponse
SolrClient get By Ids $ids	document ids
SolrClient SolrQueryResponse get By Ids	solrqueryresponse
SolrClient string get Debug	returns a string on success and null if there is nothing to return
SolrClient array get Options	returns an array containing all the options for the solrclient object set internally
SolrClient optimize $waitSearcher	block until a new searcher is opened and registered as the main query searcher making the changes visible
SolrClient optimize $softCommit	this will refresh the view of the index in a more performant manner but without on-disk guarantees
SolrClient optimize $maxSegments	optimizes down to at most this number of segments
SolrClient SolrUpdateResponse optimize	returns a solrupdateresponse on success or throws an exception on failure
SolrClient SolrUpdateResponse optimize int $maxSegments bool $softCommit bool $waitSearcher	defragments the index
SolrClient SolrPingResponse ping	returns a solrpingresponse object on success and throws an exception on failure
SolrClient SolrPingResponse ping	checks if solr server is still up
SolrClient query $query	a solrparams object
SolrClient SolrQueryResponse query	returns a solrqueryresponse object on success and throws an exception on failure
SolrClient request $raw_request	an xml string with the raw request to the server
SolrClient SolrUpdateResponse request	returns a solrupdateresponse on success
SolrClient SolrUpdateResponse request string $raw_request	sends a raw update request
SolrClient SolrUpdateResponse rollback	returns a solrupdateresponse on success or throws a solrclientexception on failure
SolrCollapseFunction string get Null Policy	returns null policy
SolrCollapseFunction integer get Size	returns size parameter
SolrCollapseFunction SolrCollapseFunction set Min	solrcollapsefunction
SolrCollapseFunction SolrCollapseFunction set Null Policy	solrcollapsefunction
SolrCollapseFunction SolrCollapseFunction set Size	solrcollapsefunction
SolrDisMaxQuery SolrDisMaxQuery add Bigram Phrase Field	solrdismaxquery
SolrDisMaxQuery SolrDisMaxQuery add Bigram Phrase Field string $field string $boost string $slop	adds a phrase bigram field pf2 parameter
SolrDisMaxQuery add Query Field $boost	boost value
SolrDisMaxQuery add Query Field $field	field name
SolrDisMaxQuery SolrDisMaxQuery add Query Field	solrdismaxquery
SolrDisMaxQuery add Trigram Phrase Field $slop	field slop
SolrDisMaxQuery add Trigram Phrase Field $boost	field boost
SolrDisMaxQuery add Trigram Phrase Field $field	field name
SolrDisMaxQuery SolrDisMaxQuery add Trigram Phrase Field	solrdismaxquery
SolrDisMaxQuery add User Field $field	field name
SolrDisMaxQuery SolrDisMaxQuery add User Field	solrdismaxquery
SolrDisMaxQuery SolrDisMaxQuery add User Field string $field	adds a field to user fields parameter uf
SolrDisMaxQuery construct $q	search query q parameter
SolrDisMaxQuery string construct string $q	class constructor
SolrDisMaxQuery remove Boost Query $field	field name
SolrDisMaxQuery SolrDisMaxQuery remove Boost Query	solrdismaxquery
SolrDisMaxQuery SolrDisMaxQuery remove Boost Query string $field	removes a boost query partial by field name bq
SolrDisMaxQuery remove Query Field $field	field name
SolrDisMaxQuery SolrDisMaxQuery remove Query Field	solrdismaxquery
SolrDisMaxQuery SolrDisMaxQuery remove Query Field string $field	removes a query field qf parameter
SolrDisMaxQuery remove Trigram Phrase Field $field	field name
SolrDisMaxQuery SolrDisMaxQuery remove Trigram Phrase Field	solrdismaxquery
SolrDisMaxQuery remove User Field $field	field name
SolrDisMaxQuery SolrDisMaxQuery remove User Field	solrdismaxquery
SolrDisMaxQuery set Bigram Phrase Fields $fields	fields boosts slops
SolrDisMaxQuery SolrDisMaxQuery set Bigram Phrase Fields	solrdismaxquery
SolrDisMaxQuery SolrDisMaxQuery set Bigram Phrase Fields string $fields	sets bigram phrase fields and their boosts and slops using pf2 parameter
SolrDisMaxQuery SolrDisMaxQuery set Bigram Phrase Slop	solrdismaxquery
SolrDisMaxQuery SolrDisMaxQuery set Boost Function	solrdismaxquery
SolrDisMaxQuery SolrDisMaxQuery set Boost Function string $function	sets a boost function bf parameter
SolrDisMaxQuery set Boost Query $q	query
SolrDisMaxQuery SolrDisMaxQuery set Boost Query	solrdismaxquery
SolrDisMaxQuery SolrDisMaxQuery set Boost Query string $q	directly sets boost query parameter bq
SolrDisMaxQuery set Minimum Match $value	minimum match value / expression
SolrDisMaxQuery SolrDisMaxQuery set Minimum Match	solrdismaxquery
SolrDisMaxQuery SolrDisMaxQuery set Minimum Match string $value	set minimum should match mm
SolrDisMaxQuery set Phrase Fields $fields	fields boosts [ slops]
SolrDisMaxQuery SolrDisMaxQuery set Phrase Fields	solrdismaxquery
SolrDisMaxQuery SolrDisMaxQuery set Phrase Fields string $fields	sets phrase fields and their boosts and slops using pf2 parameter
SolrDisMaxQuery SolrDisMaxQuery set Phrase Slop	solrdismaxquery
SolrDisMaxQuery SolrDisMaxQuery set Phrase Slop string $slop	sets the default slop on phrase queries ps parameter
SolrDisMaxQuery set Query Alt $q	query string
SolrDisMaxQuery SolrDisMaxQuery set Query Alt	solrdismaxquery
SolrDisMaxQuery set Query Phrase Slop $slop	amount of slop
SolrDisMaxQuery SolrDisMaxQuery set Query Phrase Slop	solrdismaxquery
SolrDisMaxQuery SolrDisMaxQuery set Query Phrase Slop string $slop	specifies the amount of slop permitted on phrase queries explicitly included in the user's query string qf parameter
SolrDisMaxQuery set Tie Breaker $tieBreaker	the tie parameter specifies a float value which should be something much less than 1 to use as tiebreaker in dismax queries
SolrDisMaxQuery SolrDisMaxQuery set Tie Breaker	solrdismaxquery
SolrDisMaxQuery set Trigram Phrase Slop $slop	phrase slop
SolrDisMaxQuery SolrDisMaxQuery set Trigram Phrase Slop	solrdismaxquery
SolrDisMaxQuery set User Fields $fields	fields names separated by space this parameter supports wildcards
SolrDisMaxQuery SolrDisMaxQuery set User Fields	solrdismaxquery
SolrDisMaxQuery SolrDisMaxQuery use Dis Max Query Parser	solrdismaxquery
SolrDisMaxQuery SolrDisMaxQuery use EDis Max Query Parser	solrdismaxquery
SolrDocument add Field $fieldName	the name of the field
SolrDocument add Field $fieldValue	the value of the field
SolrDocument bool add Field	returns true on success or false on failure
SolrDocument bool add Field string $fieldName string $fieldValue	adds a field to the document
SolrDocument bool clear	returns true on success or false on failure
SolrDocument bool clear	drops all the fields in the document
SolrDocument - construct	constructor
SolrDocument SolrDocumentField current	returns the field
SolrDocument field Exists $fieldName	the name of the field
SolrDocument bool field Exists	returns true if the field is present and false if it does not
SolrDocument bool field Exists string $fieldName	checks if a field exists in the document
SolrDocument get $fieldName	the name of the field
SolrDocument SolrDocumentField get	returns a solrdocumentfield instance
SolrDocument SolrDocumentField get string $fieldName	access the field as a property
SolrDocument array get Field Names	returns an array containing the names of the fields in this document
SolrDocument string key	returns the current key
SolrDocument offset Exists $fieldName	the name of the field
SolrDocument bool offset Exists	returns true on success or false on failure
SolrDocument offset Set $fieldName	the name of the field
SolrDocument offset Set $fieldValue	the value for this field
SolrDocument void offset Set string $fieldName string $fieldValue	adds a field to the document
SolrDocument string serialize	returns a string representing the serialized solr document
SolrDocument set $fieldValue	field value
SolrDocument set $fieldName	name of the field
SolrDocument bool set	returns true on success or false on failure
SolrDocument sort $sortOrderBy	the sort criteria
SolrDocument sort $sortDirection	the sort direction
SolrDocument bool sort	returns true on success or false on failure
SolrDocument bool sort int $sortOrderBy int $sortDirection	sorts the fields in the document
SolrDocument array to Array	returns an array representation of the document
SolrDocument unserialize $serialized	an xml representation of the document
SolrDocument unset $fieldName	the name of the field
SolrDocument bool unset	returns true on success or false on failure
SolrDocument bool unset string $fieldName	removes a field from the document
SolrDocument bool valid	returns true on success and false if the current position is no longer valid
SolrException array get Internal Info	returns an array containing internal information where the error was thrown
SolrIllegalArgumentException array get Internal Info	returns an array containing internal information where the error was thrown
SolrInputDocument add Field $fieldName	the name of the field
SolrInputDocument add Field $fieldValue	the value for the field
SolrInputDocument add Field $fieldBoostValue	the index time boost for the field
SolrInputDocument bool add Field	returns true on success or false on failure
SolrInputDocument bool add Field string $fieldName string $fieldValue float $fieldBoostValue	adds a field to the document
SolrInputDocument bool clear	returns true on success or false on failure
SolrInputDocument bool clear	resets the input document
SolrInputDocument void clone	creates a copy of a solrdocument
SolrInputDocument delete Field $fieldName	the name of the field
SolrInputDocument bool delete Field	returns true on success or false on failure
SolrInputDocument field Exists $fieldName	name of the field
SolrInputDocument bool field Exists	returns true if the field was found and false if it was not found
SolrInputDocument float get Boost	returns the boost value on success and false on failure
SolrInputDocument get Field $fieldName	the name of the field
SolrInputDocument SolrDocumentField get Field	returns a solrdocumentfield object on success and false on failure
SolrInputDocument SolrDocumentField get Field string $fieldName	retrieves a field by name
SolrInputDocument get Field Boost $fieldName	the name of the field
SolrInputDocument float get Field Boost	returns the boost value for the field or false if there was an error
SolrInputDocument merge $sourceDoc	the source document
SolrInputDocument merge $overwrite	if this is true it will replace matching fields in the destination document
SolrInputDocument bool merge	returns true on success or false on failure
SolrInputDocument array to Array	returns an array containing the fields
SolrObject array get Property Names	returns an array
SolrObject offset Get $property_name	name of the property
SolrObject mixed offset Get	returns the property value
SolrObject mixed offset Get string $property_name	used to retrieve a property
SolrObject offset Unset $property_name	the name of the property
SolrParams add Param $value	value of parameter
SolrParams add Param $name	name of parameter
SolrParams SolrParams add Param	returns a solrparam object on success and false on failure
SolrParams get Param $param_name	the name of the parameter
SolrParams mixed get Param	returns a string or an array depending on the type of the parameter
SolrParams mixed get Param string $param_name	returns a parameter value
SolrParams array get Params	returns an array of non url-encoded parameters
SolrParams string serialize	used for custom serialization
SolrParams set $value	the parameter value
SolrParams set $name	then name of the parameter
SolrParams set Param $name	name of the parameter
SolrParams set Param $value	value of the parameter
SolrParams SolrParams set Param	returns a solrparam object on success and false on value
SolrParams SolrParams set Param string $name string $value	sets the parameter to the specified value
SolrParams to String $url_encode	whether to return url-encoded values
SolrParams string to String	returns a string on success and false on failure
SolrQuery SolrQuery add Expand Filter Query	solrquery
SolrQuery add Expand Sort Field $order	order asc / desc utilizes solrquery::order_* constants
SolrQuery add Expand Sort Field $field	field name
SolrQuery SolrQuery add Expand Sort Field	solrquery
SolrQuery add Facet Date Field $dateField	the name of the date field
SolrQuery SolrQuery add Facet Date Field	returns a solrquery object
SolrQuery SolrQuery add Facet Date Field string $dateField	maps to facet
SolrQuery add Facet Date Other $value	the value to use
SolrQuery add Facet Date Other $field_override	the field name for the override
SolrQuery SolrQuery add Facet Date Other	returns the current solrquery object if the return value is used
SolrQuery SolrQuery add Facet Date Other string $value string $field_override	adds another facet
SolrQuery add Facet Field $field	the name of the field
SolrQuery SolrQuery add Facet Field	returns the current solrquery object if the return value is used
SolrQuery add Field $field	the name of the field
SolrQuery SolrQuery add Field	returns the current solrquery object
SolrQuery SolrQuery add Field string $field	specifies which fields to return in the result
SolrQuery add Filter Query $fq	the filter query
SolrQuery SolrQuery add Filter Query	returns the current solrquery object
SolrQuery SolrQuery add Group Field string $value	add a field to be used to group results
SolrQuery SolrQuery add Group Query	solrquery
SolrQuery add Mlt Field $field	the name of the field
SolrQuery SolrQuery add Mlt Field	returns the current solrquery object if the return value is used
SolrQuery SolrQuery add Mlt Field string $field	sets a field to use for similarity
SolrQuery add Sort Field $field	the name of the field
SolrQuery add Sort Field $order	the sort direction
SolrQuery SolrQuery add Sort Field	returns the current solrquery object
SolrQuery add Stats Facet $field	the name of the field
SolrQuery SolrQuery add Stats Facet	returns the current solrquery object if the return value is used
SolrQuery add Stats Field $field	the name of the field
SolrQuery SolrQuery add Stats Field	returns the current solrquery object if the return value is used
SolrQuery SolrQuery collapse	returns the current solrquery object
SolrQuery SolrQuery collapse SolrCollapseFunction $collapseFunction	collapses the result set to a single document per group
SolrQuery bool get Expand	returns true if group expanding is enabled
SolrQuery array get Facet Date Fields	returns all the facet
SolrQuery get Facet Date Gap $field_override	the name of the field
SolrQuery string get Facet Date Gap	returns a string on success and null if not set
SolrQuery get Facet Date Other $field_override	the name of the field
SolrQuery array get Facet Date Other	returns a string on success and null if not set
SolrQuery get Facet Date Start $field_override	the name of the field
SolrQuery string get Facet Date Start	returns a string on success and null if not set
SolrQuery get Facet Min Count $field_override	the name of the field
SolrQuery int get Facet Min Count	returns an integer on success and null if not set
SolrQuery get Facet Missing $field_override	the name of the field
SolrQuery bool get Facet Missing	returns a boolean on success and null if not set
SolrQuery get Facet Offset $field_override	the name of the field to override for
SolrQuery int get Facet Offset	returns an integer on success and null if not set
SolrQuery array get Facet Queries	returns an array on success and null if not set
SolrQuery get Facet Sort $field_override	the name of the field
SolrQuery int get Facet Sort	returns an integer solrquery::facet_sort_index or solrquery::facet_sort_count on success or null if not set
SolrQuery int get Facet Sort string $field_override	returns the facet sort type
SolrQuery array get Fields	returns an array on success and null if not set
SolrQuery array get Filter Queries	returns an array on success and null if not set
SolrQuery array get Group Queries	array
SolrQuery bool get Highlight	returns a boolean on success and null if not set
SolrQuery bool get Highlight	returns the state of the hl parameter
SolrQuery get Highlight Alternate Field $field_override	the name of the field
SolrQuery string get Highlight Alternate Field	returns a string on success and null if not set
SolrQuery array get Highlight Fields	returns an array on success and null if not set
SolrQuery get Highlight Formatter $field_override	the name of the field
SolrQuery string get Highlight Formatter	returns a string on success and null if not set
SolrQuery get Highlight Fragmenter $field_override	the name of the field
SolrQuery string get Highlight Fragmenter	returns a string on success and null if not set
SolrQuery get Highlight Fragsize $field_override	the name of the field
SolrQuery int get Highlight Fragsize	returns an integer on success or null if not set
SolrQuery bool get Highlight Highlight Multi Term	returns a boolean on success and null if not set
SolrQuery get Highlight Max Alternate Field Length $field_override	the name of the field
SolrQuery int get Highlight Max Alternate Field Length	returns an integer on success and null if not set
SolrQuery get Highlight Merge Contiguous $field_override	the name of the field
SolrQuery bool get Highlight Merge Contiguous	returns a boolean on success and null if not set
SolrQuery float get Highlight Regex Slop	returns a double on success and null if not set
SolrQuery float get Highlight Regex Slop	returns the deviation factor from the ideal fragment size
SolrQuery get Highlight Snippets $field_override	the name of the field
SolrQuery int get Highlight Snippets	returns an integer on success and null if not set
SolrQuery bool get Highlight Use Phrase Highlighter	returns a boolean on success and null if not set
SolrQuery bool get Highlight Use Phrase Highlighter	returns the state of the hl
SolrQuery bool get Mlt	returns a boolean on success and null if not set
SolrQuery bool get Mlt Boost	returns a boolean on success and null if not set
SolrQuery int get Mlt Count	returns an integer on success and null if not set
SolrQuery array get Mlt Fields	returns an array on success and null if not set
SolrQuery int get Mlt Max Num Query Terms	returns an integer on success and null if not set
SolrQuery int get Mlt Max Num Tokens	returns an integer on success and null if not set
SolrQuery int get Mlt Min Doc Frequency	returns an integer on success and null if not set
SolrQuery int get Mlt Min Term Frequency	returns an integer on success and null if not set
SolrQuery int get Mlt Min Word Length	returns an integer on success and null if not set
SolrQuery string get Query	returns a string on success and null if not set
SolrQuery string get Query	returns the main query
SolrQuery array get Sort Fields	returns an array on success and null if none of the parameters was set
SolrQuery int get Start	returns an integer on success and null if not set
SolrQuery int get Start	returns the offset in the complete result set
SolrQuery array get Stats Facets	returns an array on success and null if not set
SolrQuery array get Stats Fields	returns an array on success and null if not set
SolrQuery bool get Terms	returns a boolean on success and null if not set
SolrQuery bool get Terms Include Lower Bound	returns a boolean on success and null if not set
SolrQuery bool get Terms Include Upper Bound	returns a boolean on success and null if not set
SolrQuery int get Terms Limit	returns an integer on success and null if not set
SolrQuery string get Terms Lower Bound	returns a string on success and null if not set
SolrQuery int get Terms Max Count	returns an integer on success and null if not set
SolrQuery int get Terms Min Count	returns an integer on success and null if not set
SolrQuery bool get Terms Return Raw	returns a boolean on success and null if not set
SolrQuery bool get Terms Return Raw	whether or not to return raw characters
SolrQuery string get Terms Upper Bound	returns a string on success and null if not set
SolrQuery int get Time Allowed	returns and integer on success and null if it is not set
SolrQuery remove Expand Sort Field $field	field name
SolrQuery SolrQuery remove Expand Sort Field	solrquery
SolrQuery remove Facet Date Field $field	the name of the date field to remove
SolrQuery SolrQuery remove Facet Date Field	returns the current solrquery object if the return value is used
SolrQuery SolrQuery remove Facet Date Field string $field	removes one of the facet date fields
SolrQuery remove Facet Date Other $value	the value
SolrQuery remove Facet Date Other $field_override	the name of the field
SolrQuery SolrQuery remove Facet Date Other	returns the current solrquery object if the return value is used
SolrQuery remove Facet Field $field	the name of the field
SolrQuery SolrQuery remove Facet Field	returns the current solrquery object if the return value is used
SolrQuery remove Facet Query $value	the value
SolrQuery SolrQuery remove Facet Query	returns the current solrquery object if the return value is used
SolrQuery remove Field $field	name of the field
SolrQuery SolrQuery remove Field	returns the current solrquery object if the return value is used
SolrQuery remove Mlt Field $field	name of the field
SolrQuery SolrQuery remove Mlt Field	returns the current solrquery object if the return value is used
SolrQuery remove Mlt Query Field $queryField	the query field
SolrQuery SolrQuery remove Mlt Query Field	returns the current solrquery object if the return value is used
SolrQuery remove Sort Field $field	the name of the field
SolrQuery SolrQuery remove Sort Field	returns the current solrquery object if the return value is used
SolrQuery remove Stats Field $field	the name of the field
SolrQuery SolrQuery remove Stats Field	returns the current solrquery object if the return value is used
SolrQuery set Echo Handler $flag	true or false
SolrQuery SolrQuery set Echo Handler	returns the current solrquery object if the return value is used
SolrQuery SolrQuery set Echo Handler bool $flag	toggles the echohandler parameter
SolrQuery set Echo Params $type	the type of parameters to include
SolrQuery SolrQuery set Echo Params	returns the current solrquery object if the return value is used
SolrQuery SolrQuery set Echo Params string $type	determines what kind of parameters to include in the response
SolrQuery set Expand $value	bool flag
SolrQuery SolrQuery set Expand	solrquery
SolrQuery SolrQuery set Expand Query	solrquery
SolrQuery SolrQuery set Expand Rows	solrquery
SolrQuery set Facet $value	true enables faceting and false disables it
SolrQuery SolrQuery set Facet	returns the current solrquery object if the return value is used
SolrQuery SolrQuery set Facet bool $flag	maps to the facet parameter
SolrQuery set Facet Date Gap $field_override	the name of the field
SolrQuery set Facet Date Gap $value	see facet
SolrQuery SolrQuery set Facet Date Gap	returns the current solrquery object if the return value is used
SolrQuery set Facet Date Start $field_override	the name of the field
SolrQuery set Facet Date Start $value	see facet
SolrQuery SolrQuery set Facet Date Start	returns the current solrquery object if the return value is used
SolrQuery set Facet Enum Cache Min Default Frequency $value	the minimum frequency
SolrQuery set Facet Enum Cache Min Default Frequency $field_override	the name of the field
SolrQuery SolrQuery set Facet Enum Cache Min Default Frequency	returns the current solrquery object if the return value is used
SolrQuery set Facet Limit $limit	the maximum number of constraint counts
SolrQuery set Facet Limit $field_override	the name of the field
SolrQuery SolrQuery set Facet Limit	returns the current solrquery object if the return value is used
SolrQuery set Facet Method $field_override	the name of the field
SolrQuery set Facet Method $method	the method to use
SolrQuery SolrQuery set Facet Method	returns the current solrquery object if the return value is used
SolrQuery set Facet Min Count $mincount	the minimum count
SolrQuery set Facet Min Count $field_override	the name of the field
SolrQuery SolrQuery set Facet Min Count	returns the current solrquery object if the return value is used
SolrQuery SolrQuery set Facet Min Count int $mincount string $field_override	maps to facet
SolrQuery set Facet Missing $flag	true turns this feature on
SolrQuery set Facet Missing $field_override	the name of the field
SolrQuery SolrQuery set Facet Missing	returns the current solrquery object if the return value is used
SolrQuery SolrQuery set Facet Missing bool $flag string $field_override	maps to facet
SolrQuery set Facet Offset $offset	the offset
SolrQuery set Facet Offset $field_override	the name of the field
SolrQuery SolrQuery set Facet Offset	returns the current solrquery object if the return value is used
SolrQuery set Facet Prefix $prefix	the prefix string
SolrQuery set Facet Prefix $field_override	the name of the field
SolrQuery SolrQuery set Facet Prefix	returns the current solrquery object if the return value is used
SolrQuery SolrQuery set Group Cache Percent integer $percent	enables caching for result grouping
SolrQuery SolrQuery set Group Format string $value	sets the group format result structure group
SolrQuery set Highlight $flag	enable or disable highlighting
SolrQuery SolrQuery set Highlight	returns the current solrquery object if the return value is used
SolrQuery SolrQuery set Highlight bool $flag	enables or disables highlighting
SolrQuery set Highlight Alternate Field $field	the name of the backup field
SolrQuery set Highlight Alternate Field $field_override	the name of the field we are overriding this setting for
SolrQuery SolrQuery set Highlight Alternate Field	returns the current solrquery object if the return value is used
SolrQuery SolrQuery set Highlight Alternate Field string $field string $field_override	specifies the backup field to use
SolrQuery set Highlight Formatter $formatter	currently the only legal value is simple
SolrQuery set Highlight Formatter $field_override	the name of the field
SolrQuery set Highlight Fragmenter $field_override	the name of the field
SolrQuery set Highlight Fragmenter $fragmenter	the standard fragmenter is gap
SolrQuery SolrQuery set Highlight Fragmenter	returns the current solrquery object if the return value is used
SolrQuery SolrQuery set Highlight Fragmenter string $fragmenter string $field_override	sets a text snippet generator for highlighted text
SolrQuery set Highlight Fragsize $size	the size in characters of fragments to consider for highlighting
SolrQuery set Highlight Fragsize $field_override	the name of the field
SolrQuery SolrQuery set Highlight Fragsize	returns the current solrquery object if the return value is used
SolrQuery SolrQuery set Highlight Fragsize int $size string $field_override	the size of fragments to consider for highlighting
SolrQuery set Highlight Max Alternate Field Length $fieldLength	the length of the field
SolrQuery set Highlight Max Alternate Field Length $field_override	the name of the field
SolrQuery SolrQuery set Highlight Max Alternate Field Length	returns the current solrquery object if the return value is used
SolrQuery SolrQuery set Highlight Max Alternate Field Length int $fieldLength string $field_override	sets the maximum number of characters of the field to return
SolrQuery set Highlight Max Analyzed Chars $value	the number of characters into a document to look for suitable snippets
SolrQuery SolrQuery set Highlight Max Analyzed Chars	returns the current solrquery object if the return value is used
SolrQuery set Highlight Merge Contiguous $value	whether or not to collapse contiguous fragments into a single fragment
SolrQuery set Highlight Merge Contiguous $field_override	the name of the field
SolrQuery SolrQuery set Highlight Merge Contiguous	returns the current solrquery object if the return value is used
SolrQuery set Highlight Regex Pattern $value	the regular expression for fragmenting
SolrQuery SolrQuery set Highlight Regex Pattern	returns the current solrquery object if the return value is used
SolrQuery SolrQuery set Highlight Regex Pattern string $value	specify the regular expression for fragmenting
SolrQuery set Highlight Regex Slop $factor	the factor by which the regex fragmenter can stray from the ideal fragment size
SolrQuery SolrQuery set Highlight Regex Slop	returns the current solrquery object if the return value is used
SolrQuery SolrQuery set Highlight Regex Slop float $factor	sets the factor by which the regex fragmenter can stray from the ideal fragment size
SolrQuery set Highlight Require Field Match $flag	true or false
SolrQuery SolrQuery set Highlight Require Field Match	returns the current solrquery object if the return value is used
SolrQuery SolrQuery set Highlight Require Field Match bool $flag	require field matching during highlighting
SolrQuery set Highlight Simple Post $field_override	the name of the field
SolrQuery set Highlight Simple Post $simplePost	sets the text which appears after a highlighted term the default is < / em >
SolrQuery SolrQuery set Highlight Simple Post string $simplePost string $field_override	sets the text which appears after a highlighted term
SolrQuery set Highlight Simple Pre $simplePre	the text which appears before a highlighted term
SolrQuery set Highlight Simple Pre $field_override	the name of the field
SolrQuery SolrQuery set Highlight Simple Pre	returns the current solrquery object if the return value is used
SolrQuery set Highlight Snippets $field_override	the name of the field
SolrQuery set Highlight Snippets $value	the maximum number of highlighted snippets to generate per field
SolrQuery SolrQuery set Highlight Snippets	returns the current solrquery object if the return value is used
SolrQuery set Highlight Use Phrase Highlighter $value	whether or not to use spanscorer to highlight phrase terms only when they appear within the query phrase in the document
SolrQuery SolrQuery set Highlight Use Phrase Highlighter	returns the current solrquery object if the return value is used
SolrQuery SolrQuery set Highlight Use Phrase Highlighter bool $flag	whether to highlight phrase terms only when they appear within the query phrase
SolrQuery set Mlt Count $count	the number of similar documents to return for each result
SolrQuery SolrQuery set Mlt Count	returns the current solrquery object if the return value is used
SolrQuery set Mlt Max Num Query Terms $value	the maximum number of query terms that will be included in any generated query
SolrQuery SolrQuery set Mlt Max Num Query Terms	returns the current solrquery object if the return value is used
SolrQuery SolrQuery set Mlt Max Num Query Terms int $value	sets the maximum number of query terms included
SolrQuery set Mlt Max Num Tokens $value	the maximum number of tokens to parse
SolrQuery SolrQuery set Mlt Max Num Tokens	returns the current solrquery object if the return value is used
SolrQuery SolrQuery set Mlt Max Num Tokens int $value	specifies the maximum number of tokens to parse
SolrQuery set Mlt Max Word Length $maxWordLength	the maximum word length above which words will be ignored
SolrQuery SolrQuery set Mlt Max Word Length	returns the current solrquery object if the return value is used
SolrQuery SolrQuery set Mlt Max Word Length int $maxWordLength	sets the maximum word length
SolrQuery set Mlt Min Doc Frequency $minDocFrequency	sets the frequency at which words will be ignored which do not occur in at least this many docs
SolrQuery SolrQuery set Mlt Min Doc Frequency	returns the current solrquery object if the return value is used
SolrQuery SolrQuery set Mlt Min Doc Frequency int $minDocFrequency	sets the mltmindoc frequency
SolrQuery set Mlt Min Term Frequency $minTermFrequency	the frequency below which terms will be ignored in the source docs
SolrQuery SolrQuery set Mlt Min Term Frequency	returns the current solrquery object if the return value is used
SolrQuery set Mlt Min Word Length $minWordLength	the minimum word length below which words will be ignored
SolrQuery SolrQuery set Mlt Min Word Length	returns the current solrquery object if the return value is used
SolrQuery SolrQuery set Mlt Min Word Length int $minWordLength	sets the minimum word length
SolrQuery set Omit Header $flag	true excludes the header from the result
SolrQuery SolrQuery set Omit Header	returns the current solrquery object if the return value is used
SolrQuery set Query $query	the search query
SolrQuery SolrQuery set Query	returns the current solrquery object
SolrQuery set Show Debug Info $flag	whether to show debug info
SolrQuery SolrQuery set Show Debug Info	returns the current solrquery object if the return value is used
SolrQuery SolrQuery set Show Debug Info bool $flag	flag to show debug information
SolrQuery set Start $start	the number of rows to skip
SolrQuery SolrQuery set Start	returns the current solrquery object
SolrQuery set Terms $flag	true enables it
SolrQuery SolrQuery set Terms	returns the current solrquery object if the return value is used
SolrQuery set Terms Field $fieldname	the field name
SolrQuery SolrQuery set Terms Field	returns the current solrquery object if the return value is used
SolrQuery SolrQuery set Terms Field string $fieldname	sets the name of the field to get the terms from
SolrQuery set Terms Include Lower Bound $flag	include the lower bound term in the result set
SolrQuery SolrQuery set Terms Include Lower Bound	returns the current solrquery object if the return value is used
SolrQuery set Terms Include Upper Bound $flag	true or false
SolrQuery SolrQuery set Terms Include Upper Bound	returns the current solrquery object if the return value is used
SolrQuery set Terms Limit $limit	the maximum number of terms to return
SolrQuery SolrQuery set Terms Limit	returns the current solrquery object if the return value is used
SolrQuery set Terms Lower Bound $lowerBound	the lower bound term
SolrQuery SolrQuery set Terms Lower Bound	returns the current solrquery object if the return value is used
SolrQuery set Terms Max Count $frequency	the maximum document frequency
SolrQuery SolrQuery set Terms Max Count	returns the current solrquery object if the return value is used
SolrQuery set Terms Min Count $frequency	the minimum frequency
SolrQuery SolrQuery set Terms Min Count	returns the current solrquery object if the return value is used
SolrQuery SolrQuery set Terms Min Count int $frequency	sets the minimum document frequency
SolrQuery set Terms Return Raw $value	true or false
SolrQuery SolrQuery set Terms Return Raw	returns the current solrquery object if the return value is used
SolrQuery SolrQuery set Terms Return Raw bool $flag	return the raw characters of the indexed term
SolrQuery set Terms Sort $sortType	solrquery::terms_sort_index or solrquery::terms_sort_count
SolrQuery SolrQuery set Terms Sort	returns the current solrquery object if the return value is used
SolrQuery SolrQuery set Terms Sort int $sortType	specifies how to sort the returned terms
SolrQuery set Terms Upper Bound $upperBound	the term to stop at
SolrQuery SolrQuery set Terms Upper Bound	returns the current solrquery object if the return value is used
SolrResponse string get Digested Response	returns the xml response as serialized php data
SolrResponse string get Http Status Message	returns more details on the http status
SolrResponse string get Raw Request	returns the raw request sent to the solr server
SolrResponse string get Raw Request Headers	returns the raw request headers sent to the solr server
SolrResponse SolrObject get Response	returns a solrobject representing the xml response from the server
SolrResponse set Parse Mode $parser_mode	solrresponse::parse_solr_doc parses documents in solrdocument instances
SolrResponse bool set Parse Mode	returns true on success or false on failure
SolrServerException array get Internal Info	returns an array containing internal information where the error was thrown
SolrUtils digest Xml Response $xmlresponse	the xml response string from the solr server
SolrUtils digest Xml Response $parse_mode	use solrresponse::parse_solr_obj or solrresponse::parse_solr_doc
SolrUtils SolrObject digest Xml Response	returns the solrobject representing the xml response
SolrUtils SolrObject digest Xml Response string $xmlresponse int $parse_mode	parses an response xml string into a solrobject
SolrUtils escape Query Chars $str	this is the query string to be escaped
SolrUtils string escape Query Chars	returns the escaped string or false on failure
SolrUtils string escape Query Chars string $str	escapes a lucene query string
SolrUtils string get Solr Version	the current version of the apache solr extension
SolrUtils string get Solr Version	returns the current version of the solr extension
SphinxClient add Query $query	query string
SphinxClient add Query $index	an index name or names
SphinxClient int add Query	returns an index in an array of results that will be returned by sphinxclient::runqueries call or false on error
SphinxClient int add Query string $query string $index string $comment	add query to multi-query batch
SphinxClient bool close	returns true on success or false on failure
SphinxClient - construct	create a new sphinxclient object
SphinxClient escape String $string	string to escape
SphinxClient string escape String	returns escaped string
SphinxClient string escape String string $string	escape special characters
SphinxClient string get Last Warning	returns the last warning message or an empty string if there were no warnings
SphinxClient string get Last Warning	get the last warning
SphinxClient bool open	returns true on success or false on failure
SphinxClient query $query	query string
SphinxClient query $index	an index name or names
SphinxClient array query	on success sphinxclient::query() returns a list of found matches and additional per-query statistics
SphinxClient array query string $query string $index string $comment	execute search query
SphinxClient void reset Filters	clear all filters
SphinxClient void reset Group By	clear all group-by settings
SphinxClient array run Queries	returns false on failure and array of result sets on success
SphinxClient array run Queries	run a batch of search queries
SphinxClient set Connect Timeout $timeout	timeout in seconds
SphinxClient bool set Connect Timeout	returns true on success or false on failure
SphinxClient bool set Connect Timeout float $timeout	set connection timeout
SphinxClient set Field Weights $weights	associative array of field names and field weights
SphinxClient bool set Field Weights	returns true on success or false on failure
SphinxClient bool set Field Weights array $weights	set field weights
SphinxClient set Filter $attribute	an attribute name
SphinxClient set Filter $exclude	if set to true matching documents are excluded from the result set
SphinxClient set Filter $values	plain array of integer values
SphinxClient bool set Filter	returns true on success or false on failure
SphinxClient bool set Filter string $attribute array $values bool $exclude	add new integer values set filter
SphinxClient set Filter Float Range $attribute	an attribute name
SphinxClient set Filter Float Range $max	maximum value
SphinxClient set Filter Float Range $min	minimum value
SphinxClient set Filter Float Range $exclude	if set to true matching documents are excluded from the result set
SphinxClient bool set Filter Float Range	returns true on success or false on failure
SphinxClient bool set Filter Float Range string $attribute float $min float $max bool $exclude	add new float range filter
SphinxClient set Filter Range $attribute	an attribute name
SphinxClient set Filter Range $max	maximum value
SphinxClient set Filter Range $min	minimum value
SphinxClient set Filter Range $exclude	if set to true matching documents are excluded from the result set
SphinxClient bool set Filter Range	returns true on success or false on failure
SphinxClient bool set Filter Range string $attribute int $min int $max bool $exclude	add new integer range filter
SphinxClient set Geo Anchor $attrlat	name of a latitude attribute
SphinxClient set Geo Anchor $attrlong	name of a longitude attribute
SphinxClient set Geo Anchor $longitude	anchor longitude in radians
SphinxClient set Geo Anchor $latitude	anchor latitude in radians
SphinxClient bool set Geo Anchor	returns true on success or false on failure
SphinxClient bool set Geo Anchor string $attrlat string $attrlong float $latitude float $longitude	set anchor point for a geosphere distance calculations
SphinxClient set Group Distinct $attribute	a string containing group-by attribute name
SphinxClient bool set Group Distinct	returns true on success or false on failure
SphinxClient bool set Group Distinct string $attribute	set attribute name for per-group distinct values count calculations
SphinxClient set IDRange $max	maximum id value
SphinxClient set IDRange $min	minimum id value
SphinxClient bool set IDRange	returns true on success or false on failure
SphinxClient bool set IDRange int $min int $max	set a range of accepted document ids
SphinxClient set Index Weights $weights	an associative array mapping string index names to integer weights
SphinxClient bool set Index Weights	returns true on success or false on failure
SphinxClient bool set Index Weights array $weights	set per-index weights
SphinxClient set Match Mode $mode	matching mode
SphinxClient bool set Match Mode	returns true on success or false on failure
SphinxClient bool set Match Mode int $mode	set full-text query matching mode
SphinxClient set Max Query Time $qtime	maximum query time in milliseconds
SphinxClient bool set Max Query Time	returns true on success or false on failure
SphinxClient bool set Max Query Time int $qtime	set maximum query time
SphinxClient set Override $attribute	an attribute name
SphinxClient set Override $values	array of attribute values that maps document ids to overridden attribute values
SphinxClient set Override $type	an attribute type
SphinxClient bool set Override	returns true on success or false on failure
SphinxClient bool set Override string $attribute int $type array $values	sets temporary per-document attribute value overrides
SphinxClient set Ranking Mode $ranker	ranking mode
SphinxClient bool set Ranking Mode	returns true on success or false on failure
SphinxClient bool set Ranking Mode int $ranker	set ranking mode
SphinxClient set Select $clause	sql-like clause
SphinxClient bool set Select	returns true on success or false on failure
SphinxClient bool set Select string $clause	set select clause
SphinxClient set Server $port	port number
SphinxClient set Server $server	ip or hostname
SphinxClient bool set Server	returns true on success or false on failure
SphinxClient bool set Server string $server int $port	set searchd host and port
SphinxClient set Sort Mode $mode	sorting mode
SphinxClient bool set Sort Mode	returns true on success or false on failure
SphinxClient bool set Sort Mode int $mode string $sortby	set matches sorting mode
SphinxClient update Attributes $attributes	array of attribute names listing attributes that are updated
SphinxClient update Attributes $values	associative array containing document ids as keys and array of attribute values as values
SphinxClient update Attributes $index	name of the index or indexes to be updated
SphinxClient int update Attributes	returns number of actually updated documents 0 or more on success or false on failure
SphinxClient int update Attributes string $index array $attributes array $values bool $mva	update document attributes
SplDoublyLinkedList add $index	the index where the new value is to be inserted
SplDoublyLinkedList add $newval	the new value for the index
SplDoublyLinkedList void add mixed $index mixed $newval	add / insert a new value at the specified index
SplDoublyLinkedList mixed key	the current node index
SplDoublyLinkedList mixed key	return current node index
SplDoublyLinkedList void next	move to next entry
SplDoublyLinkedList offset Set $index	the index being set
SplDoublyLinkedList offset Set $newval	the new value for the index
SplDoublyLinkedList void offset Set mixed $index mixed $newval	sets the value at the specified $index to $newval
SplDoublyLinkedList offset Unset $index	the index being unset
SplDoublyLinkedList void offset Unset mixed $index	unsets the value at the specified $index
SplDoublyLinkedList void prev	move to previous entry
SplDoublyLinkedList push $value	the value to push
SplDoublyLinkedList void push mixed $value	pushes an element at the end of the doubly linked list
SplDoublyLinkedList void rewind	rewind iterator back to the start
SplDoublyLinkedList unserialize $serialized	the serialized string
SplDoublyLinkedList void unserialize string $serialized	unserializes the storage
SplDoublyLinkedList unshift $value	the value to unshift
SplDoublyLinkedList void unshift mixed $value	prepends the doubly linked list with an element
SplDoublyLinkedList bool valid	returns true if the doubly linked list contains any more nodes false otherwise
SplDoublyLinkedList bool valid	check whether the doubly linked list contains more nodes
SplFileInfo construct $file_name	path to the file
SplFileInfo string construct string $file_name	construct a new splfileinfo object
SplFileInfo int get CTime	the last change time in a unix timestamp
SplFileInfo int get CTime	gets the inode change time
SplFileInfo string get Extension	returns a string containing the file extension or an empty string if the file has no extension
SplFileInfo string get Extension	gets the file extension
SplFileInfo get File Info $class_name	name of an splfileinfo derived class to use
SplFileInfo SplFileInfo get File Info	an splfileinfo object created for the file
SplFileInfo SplFileInfo get File Info string $class_name	gets an splfileinfo object for the file
SplFileInfo string get Filename	the filename
SplFileInfo string get Filename	gets the filename
SplFileInfo int get Inode	returns the inode number for the filesystem object
SplFileInfo int get Inode	gets the inode for the file
SplFileInfo string get Link Target	returns the target of the filesystem link
SplFileInfo string get Link Target	gets the target of a link
SplFileInfo int get MTime	returns the last modified time for the file in a unix timestamp
SplFileInfo int get MTime	gets the last modified time
SplFileInfo int get Owner	the owner id in numerical format
SplFileInfo int get Owner	gets the owner of the file
SplFileInfo string get Path	returns the path to the file
SplFileInfo string get Path	gets the path without filename
SplFileInfo get Path Info $class_name	name of an splfileinfo derived class to use
SplFileInfo SplFileInfo get Path Info	returns an splfileinfo object for the parent path of the file
SplFileInfo SplFileInfo get Path Info string $class_name	gets an splfileinfo object for the path
SplFileInfo string get Pathname	the path to the file
SplFileInfo string get Pathname	gets the path to the file
SplFileInfo string get Real Path	returns the path to the file or false if the file does not exist
SplFileInfo string get Real Path	gets absolute path to file
SplFileInfo int get Size	the filesize in bytes
SplFileInfo int get Size	gets file size
SplFileInfo string get Type	a string representing the type of the entry
SplFileInfo string get Type	gets file type
SplFileInfo bool is Dir	returns true if a directory false otherwise
SplFileInfo bool is Dir	tells if the file is a directory
SplFileInfo bool is Executable	returns true if executable false otherwise
SplFileInfo bool is Executable	tells if the file is executable
SplFileInfo bool is Link	returns true if the file is a link false otherwise
SplFileInfo bool is Link	tells if the file is a link
SplFileInfo bool is Readable	returns true if readable false otherwise
SplFileInfo bool is Readable	tells if file is readable
SplFileInfo bool is Writable	returns true if writable false otherwise;
SplFileInfo bool is Writable	tells if the entry is writable
SplFileInfo open File $context	refer to the context section of the manual for a description of contexts
SplFileInfo open File $use_include_path	when set to true the filename is also searched for within the include_path
SplFileInfo open File $open_mode	the mode for opening the file
SplFileInfo SplFileObject open File	the opened file as an splfileobject object
SplFileInfo SplFileObject open File string $open_mode bool $use_include_path resource $context	gets an splfileobject object for the file
SplFileInfo set Info Class $class_name	the class name to use when splfileinfo::getfileinfo() and splfileinfo::getpathinfo() are called
SplFileInfo void set Info Class string $class_name	sets the class used with splfileinfo::getfileinfo and splfileinfo::getpathinfo
SplFileObject string|array current	retrieves the current line of the file
SplFileObject string|array current	retrieve current line of file
SplFileObject bool eof	returns true if file is at eof false otherwise
SplFileObject bool eof	reached end of file
SplFileObject bool fflush	returns true on success or false on failure
SplFileObject bool fflush	flushes the output to the file
SplFileObject string fgetc	returns a string containing a single character read from the file or false on eof
SplFileObject string fgetc	gets character from file
SplFileObject fgetcsv $delimiter	the field delimiter one character only
SplFileObject fgetcsv $escape	the escape character one character only
SplFileObject fgetcsv $enclosure	the field enclosure character one character only
SplFileObject array fgetcsv	returns an indexed array containing the fields read or false on error
SplFileObject array fgetcsv string $delimiter string $enclosure string $escape	gets line from file and parse as csv fields
SplFileObject fgetss $allowable_tags	optional parameter to specify tags which should not be stripped
SplFileObject string fgetss	returns a string containing the next line of the file with html and php code stripped or false on error
SplFileObject string fgetss string $allowable_tags	gets line from file and strip html tags
SplFileObject flock $wouldblock	set to true if the lock would block ewouldblock errno condition
SplFileObject flock $operation	operation is one of the following: lock_sh to acquire a shared lock reader
SplFileObject bool flock	returns true on success or false on failure
SplFileObject bool flock int $operation int $wouldblock	portable file locking
SplFileObject int fpassthru	returns the number of characters read from handle and passed through to the output
SplFileObject int fpassthru	output all remaining data on a file pointer
SplFileObject fputcsv $escape	the optional escape parameter sets the escape character one character only
SplFileObject fputcsv $enclosure	the optional enclosure parameter sets the field enclosure one character only
SplFileObject fputcsv $delimiter	the optional delimiter parameter sets the field delimiter one character only
SplFileObject fputcsv $fields	an array of values
SplFileObject int fputcsv	returns the length of the written string or false on failure
SplFileObject int fputcsv array $fields string $delimiter string $enclosure string $escape	write a field array as a csv line
SplFileObject fscanf	the optional assigned values
SplFileObject fscanf $format	the specified format as described in the sprintf() documentation
SplFileObject mixed fscanf	if only one parameter is passed to this method the values parsed will be returned as an array
SplFileObject mixed fscanf string $format	parses input from file according to a format
SplFileObject int ftell	returns the position of the file pointer as an integer or false on error
SplFileObject int ftell	return current file position
SplFileObject ftruncate $size	the size to truncate to
SplFileObject bool ftruncate	returns true on success or false on failure
SplFileObject bool ftruncate int $size	truncates the file to a given length
SplFileObject array get Csv Control	returns an indexed array containing the delimiter and enclosure character
SplFileObject array get Csv Control	get the delimiter and enclosure character for csv
SplFileObject int get Flags	returns an integer representing the flags
SplFileObject int get Flags	gets flags for the splfileobject
SplFileObject int get Max Line Len	returns the maximum line length if one has been set with splfileobject::setmaxlinelen() default is 0
SplFileObject int get Max Line Len	get maximum line length
SplFileObject int key	returns the current line number
SplFileObject int key	get line number
SplFileObject void next	read next line
SplFileObject seek $line_pos	the zero-based line number to seek to
SplFileObject void seek int $line_pos	seek to specified line
SplFileObject set Flags $flags	bit mask of the flags to set
SplFileObject void set Flags int $flags	sets flags for the splfileobject
SplFileObject set Max Line Len $max_len	the maximum length of a line
SplFileObject void set Max Line Len int $max_len	set maximum line length
SplFileObject bool valid	returns true if not reached eof false otherwise
SplFileObject bool valid	not at eof
SplFixedArray int count	returns the size of the array
SplFixedArray from Array $save_indexes	try to save the numeric indexes used in the original array
SplFixedArray from Array $array	the array to import
SplFixedArray SplFixedArray from Array	returns an instance of splfixedarray containing the array content
SplFixedArray SplFixedArray from Array array $array bool $save_indexes	import a php array in a splfixedarray instance
SplFixedArray int key	the current array index
SplFixedArray int key	return current array index
SplFixedArray offset Exists $index	the index being checked
SplFixedArray bool offset Exists	true if the requested index exists otherwise false
SplFixedArray bool offset Exists int $index	returns whether the requested index exists
SplFixedArray offset Get $index	the index with the value
SplFixedArray mixed offset Get	the value at the specified index
SplFixedArray mixed offset Get int $index	returns the value at the specified index
SplFixedArray offset Unset $index	the index being unset
SplFixedArray void offset Unset int $index	unsets the value at the specified $index
SplFixedArray void rewind	rewind iterator back to the start
SplFixedArray set Size $size	the new array size
SplFixedArray int set Size int $size	change the size of an array
SplFixedArray bool valid	returns true if the array contains any more elements false otherwise
SplFixedArray bool valid	check whether the array contains more elements
SplHeap mixed current	the current node value
SplHeap mixed current	return current node pointed by the iterator
SplHeap insert $value	the value to insert
SplHeap void insert mixed $value	inserts an element in the heap by sifting it up
SplHeap mixed key	the current node index
SplHeap mixed key	return current node index
SplHeap void rewind	rewind iterator back to the start no-op
SplObjectStorage add All $storage	the storage you want to import
SplObjectStorage void add All SplObjectStorage $storage	adds all objects from another storage
SplObjectStorage attach $data	the data to associate with the object
SplObjectStorage attach $object	the object to add
SplObjectStorage void attach object $object mixed $data	adds an object in the storage
SplObjectStorage contains $object	the object to look for
SplObjectStorage bool contains	returns true if the object is in the storage false otherwise
SplObjectStorage bool contains object $object	checks if the storage contains a specific object
SplObjectStorage object current	the object at the current iterator position
SplObjectStorage detach $object	the object to remove
SplObjectStorage void detach object $object	removes an object from the storage
SplObjectStorage get Hash $object	the object whose identifier is to be calculated
SplObjectStorage string get Hash	a string with the calculated identifier
SplObjectStorage string get Hash object $object	calculate a unique identifier for the contained objects
SplObjectStorage mixed get Info	the data associated with the current iterator position
SplObjectStorage mixed get Info	returns the data associated with the current iterator entry
SplObjectStorage int key	the index corresponding to the position of the iterator
SplObjectStorage void next	move to the next entry
SplObjectStorage offset Get $object	the object to look for
SplObjectStorage mixed offset Get	the data previously associated with the object in the storage
SplObjectStorage mixed offset Get object $object	returns the data associated with an object
SplObjectStorage offset Set $object	the object to associate data with
SplObjectStorage offset Set $data	the data to associate with the object
SplObjectStorage void offset Set object $object mixed $data	associates data to an object in the storage
SplObjectStorage offset Unset $object	the object to remove
SplObjectStorage remove All $storage	the storage containing the elements to remove
SplObjectStorage remove All Except $storage	the storage containing the elements to retain in the current storage
SplObjectStorage string serialize	a string representing the storage
SplObjectStorage string serialize	serializes the storage
SplObjectStorage unserialize $serialized	the serialized representation of a storage
SplObjectStorage void unserialize string $serialized	unserializes a storage from its string representation
SplObjectStorage bool valid	returns true if the iterator entry is valid false otherwise
SplPriorityQueue mixed current	the value or priority or both of the current node depending on the extract flag
SplPriorityQueue mixed current	return current node pointed by the iterator
SplPriorityQueue insert $value	the value to insert
SplPriorityQueue insert $priority	the associated priority
SplPriorityQueue void insert mixed $value mixed $priority	inserts an element in the queue by sifting it up
SplPriorityQueue mixed key	the current node index
SplPriorityQueue mixed key	return current node index
SplPriorityQueue void rewind	rewind iterator back to the start no-op
SplPriorityQueue bool valid	returns true if the queue contains any more nodes false otherwise
SplPriorityQueue bool valid	check whether the queue contains more nodes
SplQueue mixed dequeue	the value of the dequeued node
SplQueue mixed dequeue	dequeues a node from the queue
SplQueue enqueue $value	the value to enqueue
SplQueue void enqueue mixed $value	adds an element to the queue
SplSubject detach $observer	the splobserver to detach
SplSubject void detach SplObserver $observer	detach an observer
SplSubject void notify	notify an observer
SplTempFileObject construct $max_memory	the maximum amount of memory in bytes default is 2 mb for the temporary file to use
SQLite3 busy Timeout $msecs	the milliseconds to sleep
SQLite3 bool busy Timeout	returns true on success false on failure
SQLite3 bool busy Timeout int $msecs	sets the busy connection handler
SQLite3 int changes	returns an integer value corresponding to the number of database rows changed or inserted or deleted by the most recent sql statement
SQLite3 bool close	returns true on success false on failure
SQLite3 create Aggregate $final_callback	the name of a php function or user-defined function to apply as a callback at the end of the aggregate data
SQLite3 create Aggregate $name	name of the sql aggregate to be created or redefined
SQLite3 create Aggregate $step_callback	the name of a php function or user-defined function to apply as a callback for every item in the aggregate
SQLite3 create Aggregate $argument_count	the number of arguments that the sql aggregate takes
SQLite3 bool create Aggregate	returns true upon successful creation of the aggregate false on failure
SQLite3 bool create Aggregate string $name mixed $step_callback mixed $final_callback int $argument_count	registers a php function for use as an sql aggregate function
SQLite3 create Collation $callback	the name of a php function or user-defined function to apply as a callback defining the behavior of the collation
SQLite3 create Collation $name	name of the sql collating function to be created or redefined
SQLite3 bool create Collation	returns true on success or false on failure
SQLite3 bool create Collation string $name callable $callback	registers a php function for use as an sql collating function
SQLite3 create Function $name	name of the sql function to be created or redefined
SQLite3 create Function $callback	the name of a php function or user-defined function to apply as a callback defining the behavior of the sql function
SQLite3 create Function $argument_count	the number of arguments that the sql function takes
SQLite3 bool create Function	returns true upon successful creation of the function false on failure
SQLite3 bool create Function string $name mixed $callback int $argument_count	registers a php function for use as an sql scalar function
SQLite3 escape String $value	the string to be escaped
SQLite3 string escape String	returns a properly escaped string that may be used safely in an sql statement
SQLite3 string escape String string $value	returns a string that has been properly escaped
SQLite3 exec $query	the sql query to execute typically an insert update or delete query)
SQLite3 bool exec	returns true if the query succeeded false on failure
SQLite3 open $flags	optional flags used to determine how to open the sqlite database
SQLite3 open $encryption_key	an optional encryption key used when encrypting and decrypting an sqlite database
SQLite3 open $filename	path to the sqlite database or :memory: to use in-memory database
SQLite3 void open string $filename int $flags string $encryption_key	opens an sqlite database
SQLite3 query $query	the sql query to execute
SQLite3 SQLite3Result query	returns an sqlite3result object if the query returns results
SQLite3 SQLite3Result query string $query	executes an sql query
SQLite3 array version	returns an associative array with the keys versionstring and versionnumber
SQLite3Result column Type $column_number	the numeric zero-based index of the column
SQLite3Result int column Type	returns the data type index of the column identified by column_number one of sqlite3_integer sqlite3_float sqlite3_text sqlite3_blob or sqlite3_null
SQLite3Result int column Type int $column_number	returns the type of the nth column
SQLite3Result fetch Array $mode	controls how the next row will be returned to the caller
SQLite3Result array fetch Array	returns a result row as an associatively or numerically indexed array or both
SQLite3Result bool finalize	returns true
SQLite3Result int num Columns	returns the number of columns in the result set
SQLite3Result bool reset	returns true if the result set is successfully reset back to the first row false on failure
SQLite3Stmt bind Param $type	the data type of the parameter to bind
SQLite3Stmt bind Param $param	the parameter to bind to a statement variable
SQLite3Stmt bind Param $sql_param	an string identifying the statement variable to which the parameter should be bound
SQLite3Stmt bool bind Param	returns true if the parameter is bound to the statement variable false on failure
SQLite3Stmt bind Value $sql_param	an string identifying the statement variable to which the value should be bound
SQLite3Stmt bind Value $type	the data type of the value to bind
SQLite3Stmt bind Value $value	the value to bind to a statement variable
SQLite3Stmt bool bind Value	returns true if the value is bound to the statement variable false on failure
SQLite3Stmt bool clear	returns true on successful clearing of bound parameters false on failure
SQLite3Stmt bool close	returns true
SQLite3Stmt SQLite3Result execute	returns an sqlite3result object on successful execution of the prepared statement false on failure
SQLite3Stmt int param Count	returns the number of parameters within the prepared statement
SQLite3Stmt bool reset	returns true if the statement is successfully reset false on failure
SQLite3Stmt bool reset	resets the prepared statement
streamWrapper - construct	constructs a new stream wrapper
streamWrapper - destruct	destructs an existing stream wrapper
streamWrapper stream open $path	specifies the url that was passed to the original function
streamWrapper stream open $mode	the mode used to open the file as detailed for fopen()
streamWrapper stream open $opened_path	if the path is opened successfully and stream_use_path is set in options opened_path should be set to the full path of the file / resource that was actually opened
streamWrapper stream open $options	holds additional flags set by the streams api
streamWrapper bool stream open	returns true on success or false on failure
streamWrapper bool stream open string $path string $mode int $options string $opened_path	opens file or url
streamWrapper stream set option $arg1	if option is stream_option_blocking : requested blocking mode 1 meaning block 0 not blocking
streamWrapper stream set option $option	one of: stream_option_blocking the method was called in response to stream_set_blocking() stream_option_read_timeout the method was called in response to stream_set_timeout() stream_option_write_buffer the method was called in response to stream_set_write_buffer()
streamWrapper stream set option $arg2	if option is stream_option_blocking : this option is not set
streamWrapper bool stream set option	returns true on success or false on failure
streamWrapper bool stream set option int $option int $arg1 int $arg2	change stream options
streamWrapper stream truncate $new_size	the new size
streamWrapper bool stream truncate	returns true on success or false on failure
streamWrapper bool stream truncate int $new_size	truncate stream
SVM - construct	construct a new svm object
svm crossvalidate $problem	the problem data
svm crossvalidate $number_of_folds	the number of sets the data should be divided into and cross tested
svm float crossvalidate	the correct percentage expressed as a floating point number from 0-1
svm float crossvalidate array $problem int $number_of_folds	test training params on subsets of the training data
SVM array get Options	returns an array of configuration settings
SVM array get Options	return the current training parameters
SVM set Options $params	an array of training parameters keyed on the svm constants
SVM bool set Options	return true on success throws svmexception on error
SVM bool set Options array $params	set training parameters
svm train $weights	weights are an optional set of weighting parameters for the different classes to help account for unbalanced training sets
svm train $problem	the problem can be provided in three different ways
svm SVMModel train	returns an svmmodel that can be used to classify previously unseen data
svm SVMModel train array $problem array $weights	create a svmmodel based on training data
SVMModel construct $filename	the filename for the saved model file this model should load
SVMModel string construct	throws svmexception on error
SVMModel string construct string $filename	construct a new svmmodel
SVMModel array get Labels	return an array of labels
SVMModel array get Labels	get the labels the model was trained on
SVMModel int get Svm Type	return an integer svm type
SVMModel int get Svm Type	get the svm type the model was trained with
SVMModel load $filename	the filename of the model
SVMModel bool load	throws svmexception on error
SVMModel bool load string $filename	load a saved svm model
SVMModel predict $data	the array to be classified
SVMModel float predict	float the predicted value
SVMModel float predict array $data	predict a value for previously unseen data
SVMModel save $filename	the file to save the model to
SVMModel bool save	throws svmexception on error
SVMModel bool save string $filename	save a model to a file
SWFVideoStream int get Num Frames	returns the number of frames as an integer
SWFVideoStream int get Num Frames	returns the number of frames in the video
SWFVideoStream set Dimension $y	height in pixels
SWFVideoStream set Dimension $x	width in pixels
SWFVideoStream void set Dimension int $x int $y	sets video dimension
SyncEvent construct $name	the name of the event if this is a named event object
SyncEvent construct $manual	specifies whether or not the event object must be reset manually
SyncEvent string construct	the new syncevent object
SyncEvent string construct string $name bool $manual	constructs a new syncevent object
SyncEvent bool reset	a boolean value of true if the object was successfully reset false otherwise
SyncEvent bool reset	resets a manual event
SyncMutex construct $name	the name of the mutex if this is a named mutex object
SyncMutex string construct	the new syncmutex object
SyncMutex string construct string $name	constructs a new syncmutex object
SyncMutex lock $wait	the number of milliseconds to wait for the exclusive lock
SyncMutex bool lock	a boolean of true if the lock was obtained false otherwise
SyncMutex bool lock integer $wait	waits for an exclusive lock
SyncReaderWriter readlock $wait	the number of milliseconds to wait for a lock
SyncReaderWriter bool readlock	a boolean of true if the lock was obtained false otherwise
SyncReaderWriter bool readlock integer $wait	waits for a read lock
SyncReaderWriter bool readunlock	a boolean of true if the unlock operation was successful false otherwise
SyncReaderWriter bool readunlock	releases a read lock
SyncReaderWriter writelock $wait	the number of milliseconds to wait for a lock
SyncReaderWriter bool writelock	a boolean of true if the lock was obtained false otherwise
SyncReaderWriter bool writelock integer $wait	waits for an exclusive write lock
SyncReaderWriter bool writeunlock	a boolean of true if the unlock operation was successful false otherwise
SyncReaderWriter bool writeunlock	releases a write lock
SyncSemaphore lock $wait	the number of milliseconds to wait for the semaphore
SyncSemaphore bool lock	a boolean of true if the lock operation was successful false otherwise
SyncSemaphore bool lock integer $wait	decreases the count of the semaphore or waits
Thread integer get Creator Id	a numeric identity
Thread integer get Creator Id	identification
Thread Thread get Current Thread	an object representing the currently executing thread
Thread Thread get Current Thread	identification
Thread integer get Current Thread Id	a numeric identity
Thread integer get Current Thread Id	identification
Thread boolean is Joined	a boolean indication of state
Thread boolean is Joined	state detection
Thread boolean join	a boolean indication of success
Thread boolean join	synchronization
Thread start $options	an optional mask of inheritance constants by default pthreads_inherit_all
Thread boolean start	a boolean indication of success
Thread boolean start integer $options	execution
Threaded integer count	manipulation
Threaded extend $class	the class to extend
Threaded bool extend	a boolean indication of success
Threaded bool extend string $class	runtime manipulation
Threaded from $construct	the constructor to use for anonymous object
Threaded from $args	the arguments to pass to constructor
Threaded from $run	the closure to use for ::run
Threaded Threaded from	a new anonymous threaded object
Threaded Threaded from Closure $run Closure $construct array $args	creation
Threaded boolean lock	a boolean indication of success
Threaded boolean lock	synchronization
Threaded boolean pop	the last item from the objects property table
Threaded boolean pop	manipulation
Threaded void run	execution
Threaded mixed shift	the first item from the objects property table
Threaded mixed shift	manipulation
Threaded synchronized	variable length list of arguments to use as function arguments to the block
Threaded synchronized $block	the block of code to execute
Threaded mixed synchronized	the return value from the block
Threaded mixed synchronized Closure $block	synchronization
Threaded boolean unlock	a boolean indication of success
Threaded boolean unlock	synchronization
Threaded wait $timeout	an optional timeout in microseconds
Threaded boolean wait	a boolean indication of success
Threaded boolean wait integer $timeout	synchronization
Throwable string get File	returns the name of the file from which the object was thrown
Throwable string get File	gets the file in which the exception occurred
Throwable int get Line	returns the line number where the thrown object was instantiated
Throwable int get Line	gets the line on which the object was instantiated
Throwable Throwable get Previous	returns the previous throwable if available or null otherwise
Throwable Throwable get Previous	returns the previous throwable
Throwable array get Trace	returns the stack trace as an array in the same format as debug_backtrace()
Throwable array get Trace	gets the stack trace
tidy construct $config	the config config can be passed either as an array or as a string
tidy construct $filename	if the filename parameter is given this function will also read that file and initialize the object with the file acting like tidy_parse_file()
tidy construct $use_include_path	search for the file in the include_path
tidy construct $encoding	the encoding parameter sets the encoding for input / output documents
tidy string construct	returns the new tidy instance
tidyNode tidyNode get Parent	returns a tidynode if the node has a parent or null otherwise
tidyNode bool has Children	returns true if the node has children false otherwise
tidyNode bool has Children	checks if a node has children
tidyNode bool has Siblings	returns true if the node has siblings false otherwise
tidyNode bool has Siblings	checks if a node has siblings
tidyNode bool is Asp	returns true if the node is asp false otherwise
tidyNode bool is Asp	checks if this node is asp
tidyNode bool is Comment	returns true if the node is a comment false otherwise
tidyNode bool is Comment	checks if a node represents a comment
tidyNode bool is Html	returns true if the node is part of a html document false otherwise
tidyNode bool is Html	checks if a node is part of a html document
tidyNode bool is Jste	returns true if the node is jste false otherwise
tidyNode bool is Jste	checks if this node is jste
tidyNode bool is Php	returns true if the current node is php code false otherwise
tidyNode bool is Php	checks if a node is php
tidyNode bool is Text	returns true if the node represent a text false otherwise
tidyNode bool is Text	checks if a node represents text no markup
TokyoTyrant construct $port	port number
TokyoTyrant construct $host	the hostname
TokyoTyrant construct $options	connection options: timeout default: 5
TokyoTyrant string construct	throws tokyotyrantexception if connection to database fails
TokyoTyrant string construct string $host int $port array $options	construct a new tokyotyrant object
TokyoTyrant fwm Keys $max_recs	maximum records to return
TokyoTyrant fwm Keys $prefix	prefix of the keys
TokyoTyrant array fwm Keys	returns an array of matching keys
TokyoTyrant array fwm Keys string $prefix int $max_recs	returns the forward matching keys
TokyoTyrant get $keys	a string key or an array of string keys
TokyoTyrant mixed get	returns a string or an array based on the given parameters
TokyoTyrant mixed get mixed $keys	the get purpose
TokyoTyrant int num	returns number of records in the database
TokyoTyrant int num	number of records in the database
TokyoTyrant out $keys	a string key or an array of string keys
TokyoTyrant TokyoTyrant out	this method returns the current object and throws tokyotyrantexception on failure
TokyoTyrant TokyoTyrant out mixed $keys	removes records
TokyoTyrant put Cat $value	the value in case a string key is used
TokyoTyrant put Cat $keys	a string key or an array of key-value pairs
TokyoTyrant TokyoTyrant put Cat	this method returns a reference to the current object and throws tokyotyrantexception on failure
TokyoTyrant TokyoTyrant put Cat mixed $keys string $value	concatenates to a record
TokyoTyrant put Nr $value	the value in case a string key is used
TokyoTyrant put Nr $keys	a string key or an array of key-value pairs
TokyoTyrant TokyoTyrant put Nr	this method returns a reference to the current object and throws tokyotyrantexception on failure
TokyoTyrant TokyoTyrant put Nr mixed $keys string $value	puts value
TokyoTyrant put Shl $value	the value to concatenate
TokyoTyrant put Shl $key	a string key
TokyoTyrant put Shl $width	the width of the record
TokyoTyrant mixed put Shl	this method returns a reference to the current object and throws tokyotyrantexception on failure
TokyoTyrant mixed put Shl string $key string $value int $width	concatenates to a record
TokyoTyrant restore $timestamp	beginning timestamp with microseconds
TokyoTyrant restore $log_dir	directory where the log is
TokyoTyrant restore $check_consistency	whether to check consistency: default: true
TokyoTyrant mixed restore	this method returns the current object and throws tokyotyrantexception on failure
TokyoTyrant mixed restore string $log_dir int $timestamp bool $check_consistency	restore the database
TokyoTyrant set Master $host	hostname of the replication master
TokyoTyrant set Master $timestamp	beginning timestamp with microseconds
TokyoTyrant set Master $port	port of the replication master
TokyoTyrant set Master $check_consistency	whether to check consistency
TokyoTyrant mixed set Master	this method returns the current object and throws tokyotyrantexception on failure
TokyoTyrant mixed set Master string $host int $port int $timestamp bool $check_consistency	set the replication master
TokyoTyrant size $key	the key of which size to fetch
TokyoTyrant int size	returns the size of the key or throw tokyotyrantexception on error
TokyoTyrant int size string $key	returns the size of the value
TokyoTyrant array stat	returns an array of key value pairs describing the statistics
TokyoTyrant array stat	get statistics
TokyoTyrant mixed sync	this method returns the current object and throws tokyotyrantexception on failure
TokyoTyrant mixed sync	synchronize the database
TokyoTyrant mixed vanish	this method returns the current object and throws tokyotyrantexception on failure
TokyoTyrant mixed vanish	empties the database
TokyoTyrantIterator mixed construct	throws an exception if iterator initialization fails
TokyoTyrantIterator mixed construct mixed $object	construct an iterator
TokyoTyrantIterator mixed current	returns the current value on success and false on failure
TokyoTyrantIterator mixed current	get the current value
TokyoTyrantIterator mixed key	returns the current key on success and false on failure
TokyoTyrantIterator mixed next	returns the next value on success and false on failure
TokyoTyrantIterator mixed next	move to next key
TokyoTyrantIterator void rewind	rewinds the iterator
TokyoTyrantIterator bool valid	returns true if the current item is valid and false if not
TokyoTyrantIterator bool valid	rewinds the iterator
TokyoTyrantQuery add Cond $name	name of the column in the condition
TokyoTyrantQuery add Cond $op	the operator
TokyoTyrantQuery add Cond $expr	the expression
TokyoTyrantQuery mixed add Cond	this method returns the current object and throws tokyotyrantexception on failure
TokyoTyrantQuery construct $table	tokyotyranttable object with active database connection
TokyoTyrantQuery TokyoTyrantTable construct	returns a new tokyotyrantquery object and throws tokyotyrantexception on error
TokyoTyrantQuery TokyoTyrantTable construct TokyoTyrantTable $table	construct a new query
TokyoTyrantQuery int count	returns a count of matching rows and throws tokyotyrantexception on error
TokyoTyrantQuery int count	counts records
TokyoTyrantQuery array current	returns the current row
TokyoTyrantQuery string hint	this method always returns a string
TokyoTyrantQuery string key	returns the current key and throws tokyotyrantexception on error
TokyoTyrantQuery meta Search $queries	array of tokyotyrantquery objects
TokyoTyrantQuery meta Search $type	one of the tokyotyrant::rdbms_* constants
TokyoTyrantQuery array meta Search	returns the matching rows and throws tokyotyrantexception on error
TokyoTyrantQuery array meta Search array $queries int $type	retrieve records with multiple queries
TokyoTyrantQuery array next	returns the next row and throws tokyotyrantexception on error
TokyoTyrantQuery array next	moves the iterator to next entry
TokyoTyrantQuery bool rewind	returns true
TokyoTyrantQuery bool rewind	rewinds the iterator
TokyoTyrantQuery array search	returns the matching rows and throws tokyotyrantexception on error
TokyoTyrantQuery array search	searches records
TokyoTyrantQuery set Limit $max	maximum amount of records
TokyoTyrantQuery set Limit $skip	how many records to skip from the start
TokyoTyrantQuery mixed set Limit	this method returns the current object and throws tokyotyrantexception on failure
TokyoTyrantQuery mixed set Limit int $max int $skip	limit results
TokyoTyrantTable add $type	tokyotyrant::rdb_recint or tokyotyrant::rdb_recdbl constant
TokyoTyrantTable add $increment	the amount to increment
TokyoTyrantTable add $key	the string key
TokyoTyrantTable void add string $key mixed $increment string $type	adds a record
TokyoTyrantTable get $keys	the primary key can be a string or an integer
TokyoTyrantTable array get	returns the row as an array
TokyoTyrantTable array get mixed $keys	get a row
TokyoTyrantTable TokyoTyrantIterator get Iterator	this method returns tokyotyrantiterator object and throws tokyotyrantexception on failure
TokyoTyrantTable TokyoTyrantIterator get Iterator	get an iterator
TokyoTyrantTable TokyoTyrantQuery get Query	returns tokyotyrantquery on success and throws tokyotyrantexception on error
TokyoTyrantTable TokyoTyrantQuery get Query	get a query object
TokyoTyrantTable put $columns	the row contents
TokyoTyrantTable put $key	the primary key of the row
TokyoTyrantTable int put	returns the primary key on success and throws tokyotyrantexception on error
TokyoTyrantTable int put string $key array $columns	store a row
TokyoTyrantTable put Cat $columns	array of row contents
TokyoTyrantTable put Cat $key	the primary key of the row or null
TokyoTyrantTable void put Cat string $key array $columns	concatenates to a row
TokyoTyrantTable put Nr $value	the value in case a string key is used
TokyoTyrantTable put Nr $keys	a string key or an array of key-value pairs
TokyoTyrantTable void put Nr mixed $keys string $value	puts value
V8Js execute String $identifier	identifier string for the executed code
V8Js execute String $script	the code string to be executed
V8Js execute String $flags	execution flags
V8Js mixed execute String	returns the last variable instantiated in the javascript code converted to matching php variable type
V8Js mixed execute String string $script string $identifier int $flags	execute a string as javascript code
V8Js array get Extensions	returns an array of registered extensions or an empty array if there are none
V8Js array get Extensions	return an array of registered extensions
V8Js register Extension $extension_name	name of the extension to be registered
V8Js register Extension $dependencies	array of extension names the extension to be registered depends on
V8Js register Extension $script	the javascript code to be registered
V8Js register Extension $auto_enable	if set to true the extension will be enabled automatically in all v8js contexts
V8Js bool register Extension	returns true if extension was registered successfully false otherwise
V8Js bool register Extension string $extension_name string $script array $dependencies bool $auto_enable	register javascript extensions for v8js
WeakMap mixed current	the value currently being iterated on
WeakMap mixed current	returns the current value under iteration
WeakMap object key	the object key currently being iterated
WeakMap object key	returns the current key under iteration
WeakMap offset Get $object	some object contained as key in the map
WeakMap mixed offset Get	returns the value associated to the object passed as argument null otherwise
WeakMap offset Set $value	the arbitrary data serving as value of the key-value pair
WeakMap offset Set $object	the object serving as key of the key-value pair
Weakref bool valid	returns true if the object still exists and is thus still accessible via weakref::get() false otherwise
Worker integer get Stacked	an numeric value
Worker integer get Stacked	stack analysis
Worker boolean is Shutdown	a boolean indication of state
Worker boolean is Shutdown	state detection
Worker boolean shutdown	synchronization
XMLDiff\Base construct $nsname	custom namespace name for the diff document
XMLDiff\Base string construct string $nsname	constructor
XMLDiff\Base merge $diff	document produced by the diff method
XMLDiff\Base merge $src	source xml document
XMLDiff\Base mixed merge	implementation dependent
XMLDiff\Base mixed merge mixed $src mixed $diff	produce new xml document based on diff
XMLDiff\DOM diff $to	target domdocument object
XMLDiff\DOM diff $from	source domdocument object
XMLDiff\DOM DOMDocument diff	domdocument with the diff information or null
XMLDiff\DOM DOMDocument diff DOMDocument $from DOMDocument $to	diff two domdocument objects
XMLDiff\File diff $to	path to the target document
XMLDiff\File diff $from	path to the source document
XMLDiff\File string diff	string with the xml document containing the diff information or null
XMLDiff\File string diff string $from string $to	diff two xml files
XMLDiff\Memory merge $diff	xml document containing diff information
XMLDiff\Memory merge $src	source xml document
XMLDiff\Memory string merge	string with the new xml document or null
XMLDiff\Memory string merge string $src string $diff	produce merged xml document
XMLReader expand $basenode	a domnode defining the target domdocument for the created dom object
XMLReader DOMNode expand	the resulting domnode or false on error
XMLReader DOMNode expand DOMNode $basenode	returns a copy of the current node as a dom object
XMLReader get Attribute No $index	the position of the attribute
XMLReader string get Attribute No	the value of the attribute or an empty string before php 5
XMLReader string get Attribute No int $index	get the value of an attribute by index
XMLReader bool is Valid	returns true on success or false on failure
XMLReader bool is Valid	indicates if the parsed document is valid
XMLReader lookup Namespace $prefix	string containing the prefix
XMLReader string lookup Namespace	returns true on success or false on failure
XMLReader string lookup Namespace string $prefix	lookup namespace for a prefix
XMLReader move To Attribute No $index	the position of the attribute
XMLReader bool move To Attribute No	returns true on success or false on failure
XMLReader bool move To Attribute No int $index	move cursor to an attribute by index
XMLReader move To Attribute Ns $localName	the local name
XMLReader move To Attribute Ns $namespaceURI	the namespace uri
XMLReader bool move To Attribute Ns	returns true on success or false on failure
XMLReader bool move To Attribute Ns string $localName string $namespaceURI	move cursor to a named attribute
XMLReader bool move To Element	returns true if successful and false if it fails or not positioned on attribute when this method is called
XMLReader bool move To Element	position cursor on the parent element of current attribute
XMLReader bool move To First Attribute	returns true on success or false on failure
XMLReader bool move To First Attribute	position cursor on the first attribute
XMLReader bool move To Next Attribute	returns true on success or false on failure
XMLReader bool move To Next Attribute	position cursor on the next attribute
XMLReader open $encoding	the document encoding or null
XMLReader open $URI	uri pointing to the document
XMLReader open $options	a bitmask of the libxml_* constants
XMLReader bool open	returns true on success or false on failure
XMLReader bool open string $URI string $encoding int $options	set the uri containing the xml to parse
XMLReader bool read	returns true on success or false on failure
XMLReader bool read	move to next node in document
XMLReader string read Outer XML	returns the contents of current node including itself as a string
XMLReader string read Outer XML	retrieve xml from current node including it self
XMLReader string read String	returns the content of the current node as a string
XMLReader set Parser Property $value	if set to true the option will be enabled otherwise will be disabled
XMLReader set Parser Property $property	one of the parser option constants
XMLReader bool set Parser Property	returns true on success or false on failure
XMLReader set Relax NGSchema $filename	filename or uri pointing to a relaxng schema
XMLReader bool set Relax NGSchema	returns true on success or false on failure
XMLReader bool set Relax NGSchema string $filename	set the filename or uri for a relaxng schema
XMLReader set Relax NGSchema Source $source	string containing the relaxng schema
XMLReader bool set Relax NGSchema Source	returns true on success or false on failure
XMLReader bool set Relax NGSchema Source string $source	set the data containing a relaxng schema
XMLReader set Schema $filename	the filename of the xsd schema
XMLReader bool set Schema	returns true on success or false on failure
XMLReader bool set Schema string $filename	validate document against xsd
XMLReader xml $encoding	the document encoding or null
XMLReader xml $options	a bitmask of the libxml_* constants
XMLReader xml $source	string containing the xml to be parsed
XMLReader bool xml	returns true on success or false on failure
XSLTProcessor get Parameter $namespaceURI	the namespace uri of the xslt parameter
XSLTProcessor get Parameter $localName	the local name of the xslt parameter
XSLTProcessor string get Parameter	the value of the parameter as a string or false if its not set
XSLTProcessor string get Parameter string $namespaceURI string $localName	get value of a parameter
XSLTProcessor import Stylesheet $stylesheet	the imported style sheet as a domdocument or simplexmlelement object
XSLTProcessor bool import Stylesheet	returns true on success or false on failure
XSLTProcessor bool import Stylesheet object $stylesheet	import stylesheet
XSLTProcessor register PHPFunctions $restrict	use this parameter to only allow certain functions to be called from xslt
XSLTProcessor void register PHPFunctions mixed $restrict	enables the ability to use php functions as xslt functions
XSLTProcessor remove Parameter $namespaceURI	the namespace uri of the xslt parameter
XSLTProcessor remove Parameter $localName	the local name of the xslt parameter
XSLTProcessor bool remove Parameter	returns true on success or false on failure
XSLTProcessor bool remove Parameter string $namespaceURI string $localName	remove parameter
XSLTProcessor set Parameter $value	the new value of the xslt parameter
XSLTProcessor set Parameter $name	the local name of the xslt parameter
XSLTProcessor set Parameter $options	an array of name = > value pairs
XSLTProcessor set Parameter $namespace	the namespace uri of the xslt parameter
XSLTProcessor bool set Parameter	returns true on success or false on failure
XSLTProcessor bool set Parameter string $namespace string $name string $value	set value for a parameter
XsltProcessor set Security Prefs $securityPrefs	the new security preferences
XsltProcessor int set Security Prefs	returns the old security preferences
XsltProcessor int set Security Prefs int $securityPrefs	set security preferences
XSLTProcessor transform To Doc $doc	the node to be transformed
XSLTProcessor DOMDocument transform To Doc	the resulting domdocument or false on error
XSLTProcessor DOMDocument transform To Doc DOMNode $doc	transform to a domdocument
XSLTProcessor transform To URI $uri	the target uri for the transformation
XSLTProcessor transform To URI $doc	the document to transform
XSLTProcessor int transform To URI	returns the number of bytes written or false if an error occurred
XSLTProcessor int transform To URI DOMDocument $doc string $uri	transform to uri
XSLTProcessor transform To XML $doc	the domdocument or simplexmlelement object to be transformed
XSLTProcessor string transform To XML	the result of the transformation as a string or false on error
XSLTProcessor string transform To XML object $doc	transform to xml
Yaf_Action_Abstract Yaf_Controller_Abstract get Controller	yaf_controller_abstract instance
Yaf_Action_Abstract Yaf_Controller_Abstract get Controller	retrieve controller object
Yaf_Application void app	retrieve an application instance
Yaf_Application bootstrap $bootstrap	a yaf_bootstrap_abstract instance
Yaf_Application void bootstrap Yaf_Bootstrap_Abstract $bootstrap	call bootstrap
Yaf_Application construct $config	a ini config file path or a config array if is a ini config file there should be a section named as the one defined by yaf
Yaf_Application construct $envrion	which section will be loaded as the final config
Yaf_Application mixed construct mixed $config string $envrion	yaf_application constructor
Yaf_Application void environ	retrive environ
Yaf_Application array get Modules	get defined module names
Yaf_Config_Simple array to Array	returns a php array
Yaf_Controller_Abstract - construct	yaf_controller_abstract constructor
Yaf_Controller_Abstract forward $action	destination action name
Yaf_Controller_Abstract forward $paramters	calling arguments
Yaf_Controller_Abstract forward $module	destination module name if null was given then default module name is assumed
Yaf_Controller_Abstract forward $controller	destination controller name
Yaf_Controller_Abstract void forward string $action array $paramters	foward to another action
Yaf_Controller_Abstract string get Module Name	get module name
Yaf_Controller_Abstract Yaf_Request_Abstract get Request	yaf_request_abstract instance
Yaf_Controller_Abstract Yaf_Request_Abstract get Request	retrieve current request object
Yaf_Controller_Abstract Yaf_Response_Abstract get Response	yaf_response_abstract instance
Yaf_Controller_Abstract Yaf_Response_Abstract get Response	retrieve current response object
Yaf_Controller_Abstract Yaf_View_Interface get View	retrieve the view engine
Yaf_Controller_Abstract redirect $url	a location url
Yaf_Controller_Abstract bool redirect	bool
Yaf_Controller_Abstract bool redirect string $url	redirect to a url
Yaf_Dispatcher catch Exception $flag	bool
Yaf_Dispatcher Yaf_Dispatcher catch Exception bool $flag	switch on / off exception catching
Yaf_Dispatcher bool disable View	disable view rendering
Yaf_Dispatcher Yaf_Response_Abstract dispatch Yaf_Request_Abstract $request	dispatch a request
Yaf_Dispatcher Yaf_Application get Application	retrive the application
Yaf_Dispatcher Yaf_Dispatcher register Plugin Yaf_Plugin_Abstract $plugin	register a plugin
Yaf_Dispatcher throw Exception $flag	bool
Yaf_Dispatcher Yaf_Dispatcher throw Exception bool $flag	switch on / off exception throwing
Yaf_Loader register Local Namespace $prefix	a string or a array of class name prefix
Yaf_Loader void register Local Namespace mixed $prefix	register local class prefix
Yaf_Plugin_Abstract void dispatch Loop Shutdown Yaf_Request_Abstract $request Yaf_Response_Abstract $response	the dispatchloopshutdown purpose
Yaf_Plugin_Abstract void router Startup Yaf_Request_Abstract $request Yaf_Response_Abstract $response	routerstartup hook
Yaf_Request_Abstract set Base Uri $uir	base uri
Yaf_Request_Abstract bool set Base Uri	bool
Yaf_Request_Abstract bool set Base Uri string $uir	set base uri
Yaf_Request_Http get Post $name	the variable name
Yaf_Request_Http get Post $default	if this parameter is provide this will be returned if the varialbe can not be found
Yaf_Request_Http get Query $default	if this parameter is provide this will be returned if the variable can not be found
Yaf_Request_Http get Query $name	the variable name
Yaf_Request_Http mixed get Query string $name string $default	fetch a query parameter
Yaf_Request_Http bool is Xml Http Request	whether a ajax request
Yaf_Response_Abstract append Body $body	content string
Yaf_Response_Abstract append Body $key	the content key you can set a content with a key if you dont specific then yaf_response_abstract::default_body will be used note : this parameter is introduced as of 2
Yaf_Response_Abstract bool append Body	bool
Yaf_Response_Abstract bool append Body string $content string $key	append to body
Yaf_Response_Abstract clear Body $key	the content key if you dont specific then all contents will be cleared
Yaf_Response_Abstract bool clear Body string $key	the clearbody purpose
Yaf_Response_Abstract get Body $key	the content key if you dont specific then yaf_response_abstract::default_body will be used
Yaf_Response_Abstract set Body $body	content string
Yaf_Response_Abstract set Body $key	the content key you can set a content with a key if you dont specific then yaf_response_abstract::default_body will be used note : this parameter is introduced as of 2
Yaf_Route_Interface string assemble array $info array $query	assemble a request
Yaf_Route_Interface route $request	a yaf_request_abstract instance
Yaf_Route_Interface bool route Yaf_Request_Abstract $request	route a request
Yaf_Route_Regex bool route	if the pattern given by the first parameter of yaf_route_regex::_construct() matche the request uri return true otherwise return false
Yaf_Route_Regex bool route Yaf_Request_Abstract $request	the route purpose
Yaf_Route_Simple construct $controller_name	the key name of the controller info
Yaf_Route_Simple construct $action_name	the key name of the action info
Yaf_Route_Simple construct $module_name	the key name of the module info
Yaf_Route_Simple string construct	always return true
Yaf_Route_Simple string construct string $module_name string $controller_name string $action_name	yaf_route_simple constructor
Yaf_Router bool add Config	an yaf_config_abstract instance which should contains one or more valid route configs
Yaf_Router bool add Config Yaf_Config_Abstract $config	add config-defined routes into router
Yaf_Router bool add Route string $name Yaf_Route_Abstract $route	add new route into router
Yaf_Router string get Current Route	string the name of the effective route
Yaf_Router string get Current Route	get the effective route name
Yaf_Router Yaf_Route_Interface get Route string $name	retrieve a route by name
Yaf_View_Interface bool assign string $name string $value	assign value to view engine
Yaf_View_Interface string render string $tpl array $tpl_vars	render a template
Yaf_View_Simple assign $value	mixed value
Yaf_View_Simple assign $name	a string or an array
Yaf_View_Simple bool assign string $name mixed $value	assign values
Yaf_View_Simple clear $name	assigned variable name if empty will clear all assigned variables
Yaf_View_Simple bool clear string $name	clear assigned values
Yaf_View_Simple bool display string $tpl array $tpl_vars	render and display
Yaf_View_Simple get $name	the assigned variable name if this is empty all assigned variables will be returned
Yaf_View_Simple void get string $name	retrieve assigned variable
Yaf_View_Simple string render string $tpl array $tpl_vars	render template
Yar_Client call $method	remote rpc method name
Yar_Client call $parameters	parameters
Yar_Client void call string $method array $parameters	call service
Yar_Client construct $url	yar server url
Yar_Client string construct	yar_client instance
Yar_Client string construct string $url	create a client
Yar_Concurrent_Client call $uri	the rpc server uri( http tcp
Yar_Concurrent_Client call $method	service name aka the method name
Yar_Concurrent_Client call $callback	a function callback which will be called while the response return
Yar_Concurrent_Client call $parameters	parameters
Yar_Concurrent_Client int call	an unique id can be used to identified which call it is
Yar_Concurrent_Client int call string $uri string $method array $parameters callable $callback	register a concurrent call
Yar_Concurrent_Client loop $callback	if this callback is set then yar will call this callback after all calls are sent and before any response return with a $callinfo null
Yar_Concurrent_Client loop $error_callback	if this callback is set then yar will call this callback while error occurred
Yar_Concurrent_Client boolean loop callable $callback callable $error_callback	send all calls
Yar_Server_Exception string get Type	string
Yar_Server_Exception string get Type	the gettype purpose
Yar_Server construct $obj	an object all public methods of its will be registered as rpc services
Yar_Server Object construct	an instance of yar_server
Yar_Server Object construct Object $obj	register a server
Yar_Server boolean handle	boolean
Yar_Server boolean handle	start rpc server
ZipArchive add From String $contents	the contents to use to create the entry
ZipArchive add From String $localname	the name of the entry to create
ZipArchive bool add From String	returns true on success or false on failure
ZipArchive add Pattern $path	the directory that will be scanned
ZipArchive add Pattern $options	an associative array of options accepted by ziparchive::addglob()
ZipArchive add Pattern $pattern	a pcre pattern against which files will be matched
ZipArchive bool add Pattern	returns true on success or false on failure
ZipArchive bool add Pattern string $pattern string $path array $options	add files from a directory by pcre pattern
ZipArchive delete Name $name	name of the entry to delete
ZipArchive bool delete Name	returns true on success or false on failure
ZipArchive bool delete Name string $name	delete an entry in the archive using its name
ZipArchive extract To $destination	location where to extract the files
ZipArchive extract To $entries	the entries to extract
ZipArchive bool extract To	returns true on success or false on failure
ZipArchive bool extract To string $destination mixed $entries	extract the archive contents
ZipArchive get Comment Index $index	index of the entry
ZipArchive get Comment Index $flags	if flags is set to ziparchive::fl_unchanged the original unchanged comment is returned
ZipArchive string get Comment Index	returns the comment on success or false on failure
ZipArchive get Comment Name $flags	if flags is set to ziparchive::fl_unchanged the original unchanged comment is returned
ZipArchive get Comment Name $name	name of the entry
ZipArchive string get Comment Name	returns the comment on success or false on failure
ZipArchive get From Name $flags	the flags to use to find the entry
ZipArchive get From Name $length	the length to be read from the entry
ZipArchive get From Name $name	name of the entry
ZipArchive string get From Name	returns the contents of the entry on success or false on failure
ZipArchive get Name Index $flags	if flags is set to ziparchive::fl_unchanged the original unchanged name is returned
ZipArchive get Name Index $index	index of the entry
ZipArchive string get Name Index	returns the name on success or false on failure
ZipArchive string get Status String	returns a string with the status message on success or false on failure
ZipArchive get Stream $name	the name of the entry to use
ZipArchive resource get Stream	returns a file pointer resource on success or false on failure
ZipArchive resource get Stream string $name	get a file handler to the entry defined by its name read only
ZipArchive open $flags	the mode to use to open the archive
ZipArchive open $filename	the file name of the zip archive to open
ZipArchive mixed open	error codes returns true on success or the error code
ZipArchive mixed open string $filename int $flags	open a zip file archive
ZipArchive rename Name $newname	new name
ZipArchive rename Name $name	name of the entry to rename
ZipArchive bool rename Name	returns true on success or false on failure
ZipArchive set Archive Comment $comment	the contents of the comment
ZipArchive bool set Archive Comment	returns true on success or false on failure
ZipArchive set Comment Index $index	index of the entry
ZipArchive set Comment Index $comment	the contents of the comment
ZipArchive bool set Comment Index	returns true on success or false on failure
ZipArchive set Compression Index $index	index of the entry
ZipArchive set Compression Index $comp_method	the compression method
ZipArchive set Compression Index $comp_flags	compression flags
ZipArchive bool set Compression Index	returns true on success or false on failure
ZipArchive set External Attributes Index $index	index of the entry
ZipArchive set External Attributes Index $opsys	the operating system code defined by one of the ziparchive::opsys_ constants
ZipArchive set External Attributes Index $attr	the external attributes
ZipArchive set External Attributes Index $flags	optional flags
ZipArchive bool set External Attributes Index	returns true on success or false on failure
ZipArchive set External Attributes Name $opsys	the operating system code defined by one of the ziparchive::opsys_ constants
ZipArchive set External Attributes Name $attr	the external attributes
ZipArchive set External Attributes Name $flags	optional flags
ZipArchive set External Attributes Name $name	name of the entry
ZipArchive bool set External Attributes Name	returns true on success or false on failure
ZipArchive stat Index $index	index of the entry
ZipArchive stat Index $flags	ziparchive::fl_unchanged may be ored to it to request information about the original file in the archive ignoring any changes made
ZipArchive array stat Index	returns an array containing the entry details or false on failure
ZipArchive array stat Index int $index int $flags	get the details of an entry defined by its index
ZipArchive bool unchange Archive	returns true on success or false on failure
ZipArchive bool unchange Archive	revert all global changes done in the archive
ZipArchive unchange Index $index	index of the entry
ZipArchive bool unchange Index	returns true on success or false on failure
ZipArchive unchange Name $name	name of the entry
ZipArchive bool unchange Name	returns true on success or false on failure
ZipArchive bool unchange Name string $name	revert all changes done to an entry with the given name
ZMQContext construct $is_persistent	whether the context is persistent
ZMQContext construct $io_threads	number of io-threads in the context
ZMQContext integer construct	throws zmqcontextexception if context initialization fails
ZMQContext integer construct integer $io_threads boolean $is_persistent	construct a new zmqcontext object
ZMQContext get Opt $key	an integer representing the option
ZMQContext mixed get Opt	returns either a string or an integer depending on key
ZMQContext mixed get Opt string $key	get context option
ZMQContext get Socket $persistent_id	if persistent_id is specified the socket will be persisted over multiple requests
ZMQContext get Socket $on_new_socket	callback function which is executed when a new socket structure is created
ZMQContext get Socket $type	zmq::socket_* constant to specify socket type
ZMQContext ZMQSocket get Socket	returns a zmqsocket object on success
ZMQContext ZMQSocket get Socket integer $type string $persistent_id callback $on_new_socket	create a new socket
ZMQContext boolean is Persistent	returns true if the context is persistent and false if the context is non-persistent
ZMQContext set Opt $value	the value of the parameter
ZMQContext set Opt $key	one of the zmq::ctxopt_* constants
ZMQContext ZMQContext set Opt	returns the current object
ZMQContext ZMQContext set Opt integer $key mixed $value	set a socket option
ZMQDevice construct $frontend	frontend parameter for the devices
ZMQDevice construct $backend	backend parameter for the devices
ZMQDevice construct $listener	listener socket which receives a copy of all messages going both directions
ZMQDevice ZMQSocket construct	call to this method will prepare the device
ZMQDevice ZMQSocket construct ZMQSocket $frontend ZMQSocket $backend ZMQSocket $listener	construct a new device
ZMQDevice void run	run the new device
ZMQDevice set Idle Timeout $timeout	the idle callback timeout value
ZMQDevice ZMQDevice set Idle Timeout	on success this method returns the current object
ZMQDevice ZMQDevice set Idle Timeout integer $timeout	set the idle timeout
ZMQDevice set Timer Callback $timeout	how often to invoke the idle callback in milliseconds
ZMQDevice set Timer Callback $user_data	additional data to pass to the callback function
ZMQDevice set Timer Callback $cb_func	callback function to invoke when the device is idle
ZMQDevice ZMQDevice set Timer Callback	on success this method returns the current object
ZMQDevice ZMQDevice set Timer Callback callable $cb_func integer $timeout mixed $user_data	set the timer callback function
ZMQPoll ZMQPoll clear	returns the current object
ZMQPoll ZMQPoll clear	clear the poll set
ZMQPoll integer count	returns an integer representing the amount of items in the poll set
ZMQPoll integer count	count items in the poll set
ZMQPoll array get Last Errors	returns an array containing ids for the items that had errors in the last poll
ZMQPoll array get Last Errors	get poll errors
ZMQPoll remove $item	the zmqsocket object php stream or string id of the item
ZMQPoll boolean remove	returns true if the item was removed and false if the object with given id does not exist in the poll set
ZMQPoll boolean remove mixed $item	remove item from poll set
ZMQSocket connect $force	tries to connect even if the socket has already been connected to given endpoint
ZMQSocket connect $dsn	the connect dsn for example transport: / / address
ZMQSocket ZMQSocket connect	returns the current object
ZMQSocket ZMQSocket connect string $dsn boolean $force	connect the socket
ZMQSocket construct $context	zmqcontext object
ZMQSocket construct $type	the socket type
ZMQSocket construct $on_new_socket	callback function which is executed when a new socket structure is created
ZMQSocket construct $persistent_id	if persistent_id is specified the socket will be persisted over multiple requests
ZMQSocket ZMQContext construct	throws zmqsocketexception on error
ZMQSocket ZMQContext construct ZMQContext $context int $type string $persistent_id callback $on_new_socket	construct a new zmqsocket
ZMQSocket array get Endpoints	returns an array containing elements bind and connect
ZMQSocket array get Endpoints	get list of endpoints
ZMQSocket string get Persistent Id	returns the persistent id string assigned of the object and null if socket is not persistent
ZMQSocket string get Persistent Id	get the persistent id
ZMQSocket boolean is Persistent	returns a boolean based on whether the socket is persistent or not
ZMQSocket boolean is Persistent	whether the socket is persistent
ZMQSocket recv Multi $mode	pass mode flags to receive multipart messages or non-blocking operation
ZMQSocket string recv Multi	returns the array of message parts
ZMQSocket string recv Multi integer $mode	receives a multipart message
ZMQSocket send $mode	pass mode flags to receive multipart messages or non-blocking operation
ZMQSocket send $message	the message to send
ZMQSocket ZMQSocket send	returns the current object
ZMQSocket ZMQSocket send string $message integer $mode	sends a message
ZMQSocket sendmulti $message	the message to send - an array of strings
ZMQSocket sendmulti $mode	pass mode flags to receive multipart messages or non-blocking operation
ZMQSocket ZMQSocket sendmulti	returns the current object
ZMQSocket ZMQSocket sendmulti array $message integer $mode	sends a multipart message
ZMQSocket unbind $dsn	the previously bound dsn for example transport: / / address
ZMQSocket ZMQSocket unbind	returns the current object
ZMQSocket ZMQSocket unbind string $dsn	unbind the socket
