<?xml version="1.0" encoding="UTF-8"?>
<jel>
	<admin creation="Fri Aug 17 15:41:10 CEST 2012" xsdversion="1.0.0" version="1.0.0" />
	<jelclass superclass="Number" visibility="public" package="java.math" serializable="true" superclassfulltype="java.lang.Number" fulltype="java.math.BigDecimal" type="BigDecimal">
		<implements>
			<interface fulltype="java.lang.Comparable" type="Comparable" />
		</implements>
		<comment>
			<description>Immutable, arbitrary-precision signed decimal numbers.  A
 {@code BigDecimal} consists of an arbitrary precision integer
 &lt;i&gt;unscaled value&lt;/i&gt; and a 32-bit integer &lt;i&gt;scale&lt;/i&gt;.  If zero
 or positive, the scale is the number of digits to the right of the
 decimal point.  If negative, the unscaled value of the number is
 multiplied by ten to the power of the negation of the scale.  The
 value of the number represented by the {@code BigDecimal} is
 therefore &lt;tt&gt;(unscaledValue &amp;times; 10&lt;sup&gt;-scale&lt;/sup&gt;)&lt;/tt&gt;.

 &lt;p&gt;The {@code BigDecimal} class provides operations for
 arithmetic, scale manipulation, rounding, comparison, hashing, and
 format conversion.  The {@link #toString} method provides a
 canonical representation of a {@code BigDecimal}.

 &lt;p&gt;The {@code BigDecimal} class gives its user complete control
 over rounding behavior.  If no rounding mode is specified and the
 exact result cannot be represented, an exception is thrown;
 otherwise, calculations can be carried out to a chosen precision
 and rounding mode by supplying an appropriate {@link MathContext}
 object to the operation.  In either case, eight &lt;em&gt;rounding
 modes&lt;/em&gt; are provided for the control of rounding.  Using the
 integer fields in this class (such as {@link #ROUND_HALF_UP}) to
 represent rounding mode is largely obsolete; the enumeration values
 of the {@code RoundingMode} {@code enum}, (such as {@link
 RoundingMode#HALF_UP}) should be used instead.

 &lt;p&gt;When a {@code MathContext} object is supplied with a precision
 setting of 0 (for example, {@link MathContext#UNLIMITED}),
 arithmetic operations are exact, as are the arithmetic methods
 which take no {@code MathContext} object.  (This is the only
 behavior that was supported in releases prior to 5.)  As a
 corollary of computing the exact result, the rounding mode setting
 of a {@code MathContext} object with a precision setting of 0 is
 not used and thus irrelevant.  In the case of divide, the exact
 quotient could have an infinitely long decimal expansion; for
 example, 1 divided by 3.  If the quotient has a nonterminating
 decimal expansion and the operation is specified to return an exact
 result, an {@code ArithmeticException} is thrown.  Otherwise, the
 exact result of the division is returned, as done for other
 operations.

 &lt;p&gt;When the precision setting is not 0, the rules of
 {@code BigDecimal} arithmetic are broadly compatible with selected
 modes of operation of the arithmetic defined in ANSI X3.274-1996
 and ANSI X3.274-1996/AM 1-2000 (section 7.4).  Unlike those
 standards, {@code BigDecimal} includes many rounding modes, which
 were mandatory for division in {@code BigDecimal} releases prior
 to 5.  Any conflicts between these ANSI standards and the
 {@code BigDecimal} specification are resolved in favor of
 {@code BigDecimal}.

 &lt;p&gt;Since the same numerical value can have different
 representations (with different scales), the rules of arithmetic
 and rounding must specify both the numerical result and the scale
 used in the result&apos;s representation.


 &lt;p&gt;In general the rounding modes and precision setting determine
 how operations return results with a limited number of digits when
 the exact result has more digits (perhaps infinitely many in the
 case of division) than the number of digits returned.

 First, the
 total number of digits to return is specified by the
 {@code MathContext}&apos;s {@code precision} setting; this determines
 the result&apos;s &lt;i&gt;precision&lt;/i&gt;.  The digit count starts from the
 leftmost nonzero digit of the exact result.  The rounding mode
 determines how any discarded trailing digits affect the returned
 result.

 &lt;p&gt;For all arithmetic operators , the operation is carried out as
 though an exact intermediate result were first calculated and then
 rounded to the number of digits specified by the precision setting
 (if necessary), using the selected rounding mode.  If the exact
 result is not returned, some digit positions of the exact result
 are discarded.  When rounding increases the magnitude of the
 returned result, it is possible for a new digit position to be
 created by a carry propagating to a leading {@literal &quot;9&quot;} digit.
 For example, rounding the value 999.9 to three digits rounding up
 would be numerically equal to one thousand, represented as
 100&amp;times;10&lt;sup&gt;1&lt;/sup&gt;.  In such cases, the new {@literal &quot;1&quot;} is
 the leading digit position of the returned result.

 &lt;p&gt;Besides a logical exact result, each arithmetic operation has a
 preferred scale for representing a result.  The preferred
 scale for each operation is listed in the table below.

 &lt;table border&gt;
 &lt;caption top&gt;&lt;h3&gt;Preferred Scales for Results of Arithmetic Operations
 &lt;/h3&gt;&lt;/caption&gt;
 &lt;tr&gt;&lt;th&gt;Operation&lt;/th&gt;&lt;th&gt;Preferred Scale of Result&lt;/th&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;Add&lt;/td&gt;&lt;td&gt;max(addend.scale(), augend.scale())&lt;/td&gt;
 &lt;tr&gt;&lt;td&gt;Subtract&lt;/td&gt;&lt;td&gt;max(minuend.scale(), subtrahend.scale())&lt;/td&gt;
 &lt;tr&gt;&lt;td&gt;Multiply&lt;/td&gt;&lt;td&gt;multiplier.scale() + multiplicand.scale()&lt;/td&gt;
 &lt;tr&gt;&lt;td&gt;Divide&lt;/td&gt;&lt;td&gt;dividend.scale() - divisor.scale()&lt;/td&gt;
 &lt;/table&gt;

 These scales are the ones used by the methods which return exact
 arithmetic results; except that an exact divide may have to use a
 larger scale since the exact result may have more digits.  For
 example, {@code 1/32} is {@code 0.03125}.

 &lt;p&gt;Before rounding, the scale of the logical exact intermediate
 result is the preferred scale for that operation.  If the exact
 numerical result cannot be represented in {@code precision}
 digits, rounding selects the set of digits to return and the scale
 of the result is reduced from the scale of the intermediate result
 to the least scale which can represent the {@code precision}
 digits actually returned.  If the exact result can be represented
 with at most {@code precision} digits, the representation
 of the result with the scale closest to the preferred scale is
 returned.  In particular, an exactly representable quotient may be
 represented in fewer than {@code precision} digits by removing
 trailing zeros and decreasing the scale.  For example, rounding to
 three digits using the {@linkplain RoundingMode#FLOOR floor}
 rounding mode, &lt;br&gt;

 {@code 19/100 = 0.19   // integer=19,  scale=2} &lt;br&gt;

 but&lt;br&gt;

 {@code 21/110 = 0.190  // integer=190, scale=3} &lt;br&gt;

 &lt;p&gt;Note that for add, subtract, and multiply, the reduction in
 scale will equal the number of digit positions of the exact result
 which are discarded. If the rounding causes a carry propagation to
 create a new high-order digit position, an additional digit of the
 result is discarded than when no new digit position is created.

 &lt;p&gt;Other methods may have slightly different rounding semantics.
 For example, the result of the {@code pow} method using the
 {@linkplain #pow(int, MathContext) specified algorithm} can
 occasionally differ from the rounded mathematical result by more
 than one unit in the last place, one &lt;i&gt;{@linkplain #ulp() ulp}&lt;/i&gt;.

 &lt;p&gt;Two types of operations are provided for manipulating the scale
 of a {@code BigDecimal}: scaling/rounding operations and decimal
 point motion operations.  Scaling/rounding operations ({@link
 #setScale setScale} and {@link #round round}) return a
 {@code BigDecimal} whose value is approximately (or exactly) equal
 to that of the operand, but whose scale or precision is the
 specified value; that is, they increase or decrease the precision
 of the stored number with minimal effect on its value.  Decimal
 point motion operations ({@link #movePointLeft movePointLeft} and
 {@link #movePointRight movePointRight}) return a
 {@code BigDecimal} created from the operand by moving the decimal
 point a specified distance in the specified direction.

 &lt;p&gt;For the sake of brevity and clarity, pseudo-code is used
 throughout the descriptions of {@code BigDecimal} methods.  The
 pseudo-code expression {@code (i + j)} is shorthand for &quot;a
 {@code BigDecimal} whose value is that of the {@code BigDecimal}
 {@code i} added to that of the {@code BigDecimal}
 {@code j}.&quot; The pseudo-code expression {@code (i == j)} is
 shorthand for &quot;{@code true} if and only if the
 {@code BigDecimal} {@code i} represents the same value as the
 {@code BigDecimal} {@code j}.&quot; Other pseudo-code expressions
 are interpreted similarly.  Square brackets are used to represent
 the particular {@code BigInteger} and scale pair defining a
 {@code BigDecimal} value; for example [19, 2] is the
 {@code BigDecimal} numerically equal to 0.19 having a scale of 2.

 &lt;p&gt;Note: care should be exercised if {@code BigDecimal} objects
 are used as keys in a {@link java.util.SortedMap SortedMap} or
 elements in a {@link java.util.SortedSet SortedSet} since
 {@code BigDecimal}&apos;s &lt;i&gt;natural ordering&lt;/i&gt; is &lt;i&gt;inconsistent
 with equals&lt;/i&gt;.  See {@link Comparable}, {@link
 java.util.SortedMap} or {@link java.util.SortedSet} for more
 information.

 &lt;p&gt;All methods and constructors for this class throw
 {@code NullPointerException} when passed a {@code null} object
 reference for any input parameter.</description>
			<attribute name="@see">
				<description>BigInteger</description>
			</attribute>
			<attribute name="@see">
				<description>MathContext</description>
			</attribute>
			<attribute name="@see">
				<description>RoundingMode</description>
			</attribute>
			<attribute name="@see">
				<description>java.util.SortedMap</description>
			</attribute>
			<attribute name="@see">
				<description>java.util.SortedSet</description>
			</attribute>
			<attribute name="@author">
				<description>Josh Bloch</description>
			</attribute>
			<attribute name="@author">
				<description>Mike Cowlishaw</description>
			</attribute>
			<attribute name="@author">
				<description>Joseph D. Darcy</description>
			</attribute>
		</comment>
		<fields>
			<field volatile="true" visibility="private" name="intVal" fulltype="java.math.BigInteger" type="BigInteger">
				<comment>
					<description>The unscaled value of this BigDecimal, as returned by {@link
 #unscaledValue}.</description>
					<attribute name="@serial" />
					<attribute name="@see">
						<description>#unscaledValue</description>
					</attribute>
				</comment>
			</field>
			<field visibility="private" name="scale" fulltype="int" type="int">
				<comment>
					<description>The scale of this BigDecimal, as returned by {@link #scale}.</description>
					<attribute name="@serial" />
					<attribute name="@see">
						<description>#scale</description>
					</attribute>
				</comment>
			</field>
			<field visibility="private" transient="true" name="precision" fulltype="int" type="int">
				<comment>
					<description>The number of decimal digits in this BigDecimal, or 0 if the
 number of digits are not known (lookaside information).  If
 nonzero, the value is guaranteed correct.  Use the precision()
 method to obtain and set the value if it might be 0.  This
 field is mutable until set nonzero.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
			<field visibility="private" transient="true" name="stringCache" fulltype="java.lang.String" type="String">
				<comment>
					<description>Used to store the canonical string representation, if computed.</description>
				</comment>
			</field>
			<field final="true" static="true" const="-9223372036854775808" visibility="package-private" name="INFLATED" constexpr="-9223372036854775808L" fulltype="long" type="long">
				<comment>
					<description>Sentinel value for {@link #intCompact} indicating the
 significand information is only available from {@code intVal}.</description>
				</comment>
			</field>
			<field visibility="private" transient="true" name="intCompact" fulltype="long" type="long">
				<comment>
					<description>If the absolute value of the significand of this BigDecimal is
 less than or equal to {@code Long.MAX_VALUE}, the value can be
 compactly stored in this field and used in computations.</description>
				</comment>
			</field>
			<field final="true" static="true" const="18" visibility="private" name="MAX_COMPACT_DIGITS" constexpr="18" fulltype="int" type="int" />
			<field final="true" static="true" const="62" visibility="private" name="MAX_BIGINT_BITS" constexpr="62" fulltype="int" type="int" />
			<field final="true" static="true" const="6108874887143696463" visibility="private" name="serialVersionUID" constexpr="6108874887143696463L" fulltype="long" type="long" />
			<field final="true" static="true" visibility="private" name="threadLocalStringBuilderHelper" fulltype="java.lang.ThreadLocal" type="ThreadLocal" />
			<field final="true" static="true" visibility="private" name="zeroThroughTen" fulltype="java.math.BigDecimal[]" type="BigDecimal" />
			<field final="true" static="true" visibility="private" name="ZERO_SCALED_BY" fulltype="java.math.BigDecimal[]" type="BigDecimal" />
			<field final="true" static="true" const="4611686018427387903" visibility="private" name="HALF_LONG_MAX_VALUE" constexpr="4611686018427387903L" fulltype="long" type="long" />
			<field final="true" static="true" const="-4611686018427387904" visibility="private" name="HALF_LONG_MIN_VALUE" constexpr="-4611686018427387904L" fulltype="long" type="long" />
			<field final="true" static="true" visibility="public" name="ZERO" fulltype="java.math.BigDecimal" type="BigDecimal">
				<comment>
					<description>The value 0, with a scale of 0.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="ONE" fulltype="java.math.BigDecimal" type="BigDecimal">
				<comment>
					<description>The value 1, with a scale of 0.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="TEN" fulltype="java.math.BigDecimal" type="BigDecimal">
				<comment>
					<description>The value 10, with a scale of 0.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="0" visibility="public" name="ROUND_UP" constexpr="0" fulltype="int" type="int">
				<comment>
					<description>Rounding mode to round away from zero.  Always increments the
 digit prior to a nonzero discarded fraction.  Note that this rounding
 mode never decreases the magnitude of the calculated value.</description>
				</comment>
			</field>
			<field final="true" static="true" const="1" visibility="public" name="ROUND_DOWN" constexpr="1" fulltype="int" type="int">
				<comment>
					<description>Rounding mode to round towards zero.  Never increments the digit
 prior to a discarded fraction (i.e., truncates).  Note that this
 rounding mode never increases the magnitude of the calculated value.</description>
				</comment>
			</field>
			<field final="true" static="true" const="2" visibility="public" name="ROUND_CEILING" constexpr="2" fulltype="int" type="int">
				<comment>
					<description>Rounding mode to round towards positive infinity.  If the
 {@code BigDecimal} is positive, behaves as for
 {@code ROUND_UP}; if negative, behaves as for
 {@code ROUND_DOWN}.  Note that this rounding mode never
 decreases the calculated value.</description>
				</comment>
			</field>
			<field final="true" static="true" const="3" visibility="public" name="ROUND_FLOOR" constexpr="3" fulltype="int" type="int">
				<comment>
					<description>Rounding mode to round towards negative infinity.  If the
 {@code BigDecimal} is positive, behave as for
 {@code ROUND_DOWN}; if negative, behave as for
 {@code ROUND_UP}.  Note that this rounding mode never
 increases the calculated value.</description>
				</comment>
			</field>
			<field final="true" static="true" const="4" visibility="public" name="ROUND_HALF_UP" constexpr="4" fulltype="int" type="int">
				<comment>
					<description>Rounding mode to round towards {@literal &quot;nearest neighbor&quot;}
 unless both neighbors are equidistant, in which case round up.
 Behaves as for {@code ROUND_UP} if the discarded fraction is
 &amp;ge; 0.5; otherwise, behaves as for {@code ROUND_DOWN}.  Note
 that this is the rounding mode that most of us were taught in
 grade school.</description>
				</comment>
			</field>
			<field final="true" static="true" const="5" visibility="public" name="ROUND_HALF_DOWN" constexpr="5" fulltype="int" type="int">
				<comment>
					<description>Rounding mode to round towards {@literal &quot;nearest neighbor&quot;}
 unless both neighbors are equidistant, in which case round
 down.  Behaves as for {@code ROUND_UP} if the discarded
 fraction is {@literal &gt;} 0.5; otherwise, behaves as for
 {@code ROUND_DOWN}.</description>
				</comment>
			</field>
			<field final="true" static="true" const="6" visibility="public" name="ROUND_HALF_EVEN" constexpr="6" fulltype="int" type="int">
				<comment>
					<description>Rounding mode to round towards the {@literal &quot;nearest neighbor&quot;}
 unless both neighbors are equidistant, in which case, round
 towards the even neighbor.  Behaves as for
 {@code ROUND_HALF_UP} if the digit to the left of the
 discarded fraction is odd; behaves as for
 {@code ROUND_HALF_DOWN} if it&apos;s even.  Note that this is the
 rounding mode that minimizes cumulative error when applied
 repeatedly over a sequence of calculations.</description>
				</comment>
			</field>
			<field final="true" static="true" const="7" visibility="public" name="ROUND_UNNECESSARY" constexpr="7" fulltype="int" type="int">
				<comment>
					<description>Rounding mode to assert that the requested operation has an exact
 result, hence no rounding is necessary.  If this rounding mode is
 specified on an operation that yields an inexact result, an
 {@code ArithmeticException} is thrown.</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="private" name="LONG_TEN_POWERS_TABLE" fulltype="long[]" type="long" />
			<field volatile="true" static="true" visibility="private" name="BIG_TEN_POWERS_TABLE" fulltype="java.math.BigInteger[]" type="BigInteger" />
			<field final="true" static="true" visibility="private" name="BIG_TEN_POWERS_TABLE_INITLEN" fulltype="int" type="int" />
			<field final="true" static="true" visibility="private" name="BIG_TEN_POWERS_TABLE_MAX" fulltype="int" type="int" />
			<field final="true" static="true" visibility="private" name="THRESHOLDS_TABLE" fulltype="long[]" type="long" />
		</fields>
		<methods>
			<constructor visibility="package-private" name="BigDecimal">
				<comment>
					<description>Trusted package private constructor.
 Trusted simply means if val is INFLATED, intVal could not be null and
 if intVal is null, val could not be INFLATED.</description>
				</comment>
				<params>
					<param name="intVal" fulltype="java.math.BigInteger" type="BigInteger" />
					<param name="val" fulltype="long" type="long" />
					<param name="scale" fulltype="int" type="int" />
					<param name="prec" fulltype="int" type="int" />
				</params>
			</constructor>
			<constructor visibility="public" name="BigDecimal">
				<comment>
					<description>Translates a character array representation of a
 {@code BigDecimal} into a {@code BigDecimal}, accepting the
 same sequence of characters as the {@link #BigDecimal(String)}
 constructor, while allowing a sub-array to be specified.

 &lt;p&gt;Note that if the sequence of characters is already available
 within a character array, using this constructor is faster than
 converting the {@code char} array to string and using the
 {@code BigDecimal(String)} constructor .</description>
					<attribute name="@param">
						<description>in {@code char} array that is the source of characters.</description>
					</attribute>
					<attribute name="@param">
						<description>offset first character in the array to inspect.</description>
					</attribute>
					<attribute name="@param">
						<description>len number of characters to consider.</description>
					</attribute>
					<attribute name="@throws">
						<description>NumberFormatException if {@code in} is not a valid
         representation of a {@code BigDecimal} or the defined subarray
         is not wholly within {@code in}.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="in" comment="{@code char} array that is the source of characters." fulltype="char[]" type="char" />
					<param name="offset" comment="first character in the array to inspect." fulltype="int" type="int" />
					<param name="len" comment="number of characters to consider." fulltype="int" type="int" />
				</params>
			</constructor>
			<constructor visibility="public" name="BigDecimal">
				<comment>
					<description>Translates a character array representation of a
 {@code BigDecimal} into a {@code BigDecimal}, accepting the
 same sequence of characters as the {@link #BigDecimal(String)}
 constructor, while allowing a sub-array to be specified and
 with rounding according to the context settings.

 &lt;p&gt;Note that if the sequence of characters is already available
 within a character array, using this constructor is faster than
 converting the {@code char} array to string and using the
 {@code BigDecimal(String)} constructor .</description>
					<attribute name="@param">
						<description>in {@code char} array that is the source of characters.</description>
					</attribute>
					<attribute name="@param">
						<description>offset first character in the array to inspect.</description>
					</attribute>
					<attribute name="@param">
						<description>len number of characters to consider..</description>
					</attribute>
					<attribute name="@param">
						<description>mc the context to use.</description>
					</attribute>
					<attribute name="@throws">
						<description>ArithmeticException if the result is inexact but the
         rounding mode is {@code UNNECESSARY}.</description>
					</attribute>
					<attribute name="@throws">
						<description>NumberFormatException if {@code in} is not a valid
         representation of a {@code BigDecimal} or the defined subarray
         is not wholly within {@code in}.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="in" comment="{@code char} array that is the source of characters." fulltype="char[]" type="char" />
					<param name="offset" comment="first character in the array to inspect." fulltype="int" type="int" />
					<param name="len" comment="number of characters to consider.." fulltype="int" type="int" />
					<param name="mc" comment="the context to use." fulltype="java.math.MathContext" type="MathContext" />
				</params>
			</constructor>
			<constructor visibility="public" name="BigDecimal">
				<comment>
					<description>Translates a character array representation of a
 {@code BigDecimal} into a {@code BigDecimal}, accepting the
 same sequence of characters as the {@link #BigDecimal(String)}
 constructor.

 &lt;p&gt;Note that if the sequence of characters is already available
 as a character array, using this constructor is faster than
 converting the {@code char} array to string and using the
 {@code BigDecimal(String)} constructor .</description>
					<attribute name="@param">
						<description>in {@code char} array that is the source of characters.</description>
					</attribute>
					<attribute name="@throws">
						<description>NumberFormatException if {@code in} is not a valid
         representation of a {@code BigDecimal}.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="in" comment="{@code char} array that is the source of characters." fulltype="char[]" type="char" />
				</params>
			</constructor>
			<constructor visibility="public" name="BigDecimal">
				<comment>
					<description>Translates a character array representation of a
 {@code BigDecimal} into a {@code BigDecimal}, accepting the
 same sequence of characters as the {@link #BigDecimal(String)}
 constructor and with rounding according to the context
 settings.

 &lt;p&gt;Note that if the sequence of characters is already available
 as a character array, using this constructor is faster than
 converting the {@code char} array to string and using the
 {@code BigDecimal(String)} constructor .</description>
					<attribute name="@param">
						<description>in {@code char} array that is the source of characters.</description>
					</attribute>
					<attribute name="@param">
						<description>mc the context to use.</description>
					</attribute>
					<attribute name="@throws">
						<description>ArithmeticException if the result is inexact but the
         rounding mode is {@code UNNECESSARY}.</description>
					</attribute>
					<attribute name="@throws">
						<description>NumberFormatException if {@code in} is not a valid
         representation of a {@code BigDecimal}.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="in" comment="{@code char} array that is the source of characters." fulltype="char[]" type="char" />
					<param name="mc" comment="the context to use." fulltype="java.math.MathContext" type="MathContext" />
				</params>
			</constructor>
			<constructor visibility="public" name="BigDecimal">
				<comment>
					<description>Translates the string representation of a {@code BigDecimal}
 into a {@code BigDecimal}.  The string representation consists
 of an optional sign, {@code &apos;+&apos;} (&lt;tt&gt; &apos;&amp;#92;u002B&apos;&lt;/tt&gt;) or
 {@code &apos;-&apos;} (&lt;tt&gt;&apos;&amp;#92;u002D&apos;&lt;/tt&gt;), followed by a sequence of
 zero or more decimal digits (&quot;the integer&quot;), optionally
 followed by a fraction, optionally followed by an exponent.

 &lt;p&gt;The fraction consists of a decimal point followed by zero
 or more decimal digits.  The string must contain at least one
 digit in either the integer or the fraction.  The number formed
 by the sign, the integer and the fraction is referred to as the
 &lt;i&gt;significand&lt;/i&gt;.

 &lt;p&gt;The exponent consists of the character {@code &apos;e&apos;}
 (&lt;tt&gt;&apos;&amp;#92;u0065&apos;&lt;/tt&gt;) or {@code &apos;E&apos;} (&lt;tt&gt;&apos;&amp;#92;u0045&apos;&lt;/tt&gt;)
 followed by one or more decimal digits.  The value of the
 exponent must lie between -{@link Integer#MAX_VALUE} ({@link
 Integer#MIN_VALUE}+1) and {@link Integer#MAX_VALUE}, inclusive.

 &lt;p&gt;More formally, the strings this constructor accepts are
 described by the following grammar:
 &lt;blockquote&gt;
 &lt;dl&gt;
 &lt;dt&gt;&lt;i&gt;BigDecimalString:&lt;/i&gt;
 &lt;dd&gt;&lt;i&gt;Sign&lt;sub&gt;opt&lt;/sub&gt; Significand Exponent&lt;sub&gt;opt&lt;/sub&gt;&lt;/i&gt;
 &lt;p&gt;
 &lt;dt&gt;&lt;i&gt;Sign:&lt;/i&gt;
 &lt;dd&gt;{@code +}
 &lt;dd&gt;{@code -}
 &lt;p&gt;
 &lt;dt&gt;&lt;i&gt;Significand:&lt;/i&gt;
 &lt;dd&gt;&lt;i&gt;IntegerPart&lt;/i&gt; {@code .} &lt;i&gt;FractionPart&lt;sub&gt;opt&lt;/sub&gt;&lt;/i&gt;
 &lt;dd&gt;{@code .} &lt;i&gt;FractionPart&lt;/i&gt;
 &lt;dd&gt;&lt;i&gt;IntegerPart&lt;/i&gt;
 &lt;p&gt;
 &lt;dt&gt;&lt;i&gt;IntegerPart:
 &lt;dd&gt;Digits&lt;/i&gt;
 &lt;p&gt;
 &lt;dt&gt;&lt;i&gt;FractionPart:
 &lt;dd&gt;Digits&lt;/i&gt;
 &lt;p&gt;
 &lt;dt&gt;&lt;i&gt;Exponent:
 &lt;dd&gt;ExponentIndicator SignedInteger&lt;/i&gt;
 &lt;p&gt;
 &lt;dt&gt;&lt;i&gt;ExponentIndicator:&lt;/i&gt;
 &lt;dd&gt;{@code e}
 &lt;dd&gt;{@code E}
 &lt;p&gt;
 &lt;dt&gt;&lt;i&gt;SignedInteger:
 &lt;dd&gt;Sign&lt;sub&gt;opt&lt;/sub&gt; Digits&lt;/i&gt;
 &lt;p&gt;
 &lt;dt&gt;&lt;i&gt;Digits:
 &lt;dd&gt;Digit
 &lt;dd&gt;Digits Digit&lt;/i&gt;
 &lt;p&gt;
 &lt;dt&gt;&lt;i&gt;Digit:&lt;/i&gt;
 &lt;dd&gt;any character for which {@link Character#isDigit}
 returns {@code true}, including 0, 1, 2 ...
 &lt;/dl&gt;
 &lt;/blockquote&gt;

 &lt;p&gt;The scale of the returned {@code BigDecimal} will be the
 number of digits in the fraction, or zero if the string
 contains no decimal point, subject to adjustment for any
 exponent; if the string contains an exponent, the exponent is
 subtracted from the scale.  The value of the resulting scale
 must lie between {@code Integer.MIN_VALUE} and
 {@code Integer.MAX_VALUE}, inclusive.

 &lt;p&gt;The character-to-digit mapping is provided by {@link
 java.lang.Character#digit} set to convert to radix 10.  The
 String may not contain any extraneous characters (whitespace,
 for example).

 &lt;p&gt;&lt;b&gt;Examples:&lt;/b&gt;&lt;br&gt;
 The value of the returned {@code BigDecimal} is equal to
 &lt;i&gt;significand&lt;/i&gt; &amp;times; 10&lt;sup&gt;&amp;nbsp;&lt;i&gt;exponent&lt;/i&gt;&lt;/sup&gt;.
 For each string on the left, the resulting representation
 [{@code BigInteger}, {@code scale}] is shown on the right.
 &lt;pre&gt;
 &quot;0&quot;            [0,0]
 &quot;0.00&quot;         [0,2]
 &quot;123&quot;          [123,0]
 &quot;-123&quot;         [-123,0]
 &quot;1.23E3&quot;       [123,-1]
 &quot;1.23E+3&quot;      [123,-1]
 &quot;12.3E+7&quot;      [123,-6]
 &quot;12.0&quot;         [120,1]
 &quot;12.3&quot;         [123,1]
 &quot;0.00123&quot;      [123,5]
 &quot;-1.23E-12&quot;    [-123,14]
 &quot;1234.5E-4&quot;    [12345,5]
 &quot;0E+7&quot;         [0,-7]
 &quot;-0&quot;           [0,0]
 &lt;/pre&gt;

 &lt;p&gt;Note: For values other than {@code float} and
 {@code double} NaN and &amp;plusmn;Infinity, this constructor is
 compatible with the values returned by {@link Float#toString}
 and {@link Double#toString}.  This is generally the preferred
 way to convert a {@code float} or {@code double} into a
 BigDecimal, as it doesn&apos;t suffer from the unpredictability of
 the {@link #BigDecimal(double)} constructor.</description>
					<attribute name="@param">
						<description>val String representation of {@code BigDecimal}.</description>
					</attribute>
					<attribute name="@throws">
						<description>NumberFormatException if {@code val} is not a valid
         representation of a {@code BigDecimal}.</description>
					</attribute>
				</comment>
				<params>
					<param name="val" comment="String representation of {@code BigDecimal}." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="BigDecimal">
				<comment>
					<description>Translates the string representation of a {@code BigDecimal}
 into a {@code BigDecimal}, accepting the same strings as the
 {@link #BigDecimal(String)} constructor, with rounding
 according to the context settings.</description>
					<attribute name="@param">
						<description>val string representation of a {@code BigDecimal}.</description>
					</attribute>
					<attribute name="@param">
						<description>mc the context to use.</description>
					</attribute>
					<attribute name="@throws">
						<description>ArithmeticException if the result is inexact but the
         rounding mode is {@code UNNECESSARY}.</description>
					</attribute>
					<attribute name="@throws">
						<description>NumberFormatException if {@code val} is not a valid
         representation of a BigDecimal.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="val" comment="string representation of a {@code BigDecimal}." fulltype="java.lang.String" type="String" />
					<param name="mc" comment="the context to use." fulltype="java.math.MathContext" type="MathContext" />
				</params>
			</constructor>
			<constructor visibility="public" name="BigDecimal">
				<comment>
					<description>Translates a {@code double} into a {@code BigDecimal} which
 is the exact decimal representation of the {@code double}&apos;s
 binary floating-point value.  The scale of the returned
 {@code BigDecimal} is the smallest value such that
 &lt;tt&gt;(10&lt;sup&gt;scale&lt;/sup&gt; &amp;times; val)&lt;/tt&gt; is an integer.
 &lt;p&gt;
 &lt;b&gt;Notes:&lt;/b&gt;
 &lt;ol&gt;
 &lt;li&gt;
 The results of this constructor can be somewhat unpredictable.
 One might assume that writing {@code new BigDecimal(0.1)} in
 Java creates a {@code BigDecimal} which is exactly equal to
 0.1 (an unscaled value of 1, with a scale of 1), but it is
 actually equal to
 0.1000000000000000055511151231257827021181583404541015625.
 This is because 0.1 cannot be represented exactly as a
 {@code double} (or, for that matter, as a binary fraction of
 any finite length).  Thus, the value that is being passed
 &lt;i&gt;in&lt;/i&gt; to the constructor is not exactly equal to 0.1,
 appearances notwithstanding.

 &lt;li&gt;
 The {@code String} constructor, on the other hand, is
 perfectly predictable: writing {@code new BigDecimal(&quot;0.1&quot;)}
 creates a {@code BigDecimal} which is &lt;i&gt;exactly&lt;/i&gt; equal to
 0.1, as one would expect.  Therefore, it is generally
 recommended that the {@linkplain #BigDecimal(String)
 &lt;tt&gt;String&lt;/tt&gt; constructor} be used in preference to this one.

 &lt;li&gt;
 When a {@code double} must be used as a source for a
 {@code BigDecimal}, note that this constructor provides an
 exact conversion; it does not give the same result as
 converting the {@code double} to a {@code String} using the
 {@link Double#toString(double)} method and then using the
 {@link #BigDecimal(String)} constructor.  To get that result,
 use the {@code static} {@link #valueOf(double)} method.
 &lt;/ol&gt;</description>
					<attribute name="@param">
						<description>val {@code double} value to be converted to
        {@code BigDecimal}.</description>
					</attribute>
					<attribute name="@throws">
						<description>NumberFormatException if {@code val} is infinite or NaN.</description>
					</attribute>
				</comment>
				<params>
					<param name="val" comment="{@code double} value to be converted to
        {@code BigDecimal}." fulltype="double" type="double" />
				</params>
			</constructor>
			<constructor visibility="public" name="BigDecimal">
				<comment>
					<description>Translates a {@code double} into a {@code BigDecimal}, with
 rounding according to the context settings.  The scale of the
 {@code BigDecimal} is the smallest value such that
 &lt;tt&gt;(10&lt;sup&gt;scale&lt;/sup&gt; &amp;times; val)&lt;/tt&gt; is an integer.

 &lt;p&gt;The results of this constructor can be somewhat unpredictable
 and its use is generally not recommended; see the notes under
 the {@link #BigDecimal(double)} constructor.</description>
					<attribute name="@param">
						<description>val {@code double} value to be converted to
         {@code BigDecimal}.</description>
					</attribute>
					<attribute name="@param">
						<description>mc the context to use.</description>
					</attribute>
					<attribute name="@throws">
						<description>ArithmeticException if the result is inexact but the
         RoundingMode is UNNECESSARY.</description>
					</attribute>
					<attribute name="@throws">
						<description>NumberFormatException if {@code val} is infinite or NaN.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="val" comment="{@code double} value to be converted to
         {@code BigDecimal}." fulltype="double" type="double" />
					<param name="mc" comment="the context to use." fulltype="java.math.MathContext" type="MathContext" />
				</params>
			</constructor>
			<constructor visibility="public" name="BigDecimal">
				<comment>
					<description>Translates a {@code BigInteger} into a {@code BigDecimal}.
 The scale of the {@code BigDecimal} is zero.</description>
					<attribute name="@param">
						<description>val {@code BigInteger} value to be converted to
            {@code BigDecimal}.</description>
					</attribute>
				</comment>
				<params>
					<param name="val" comment="{@code BigInteger} value to be converted to
            {@code BigDecimal}." fulltype="java.math.BigInteger" type="BigInteger" />
				</params>
			</constructor>
			<constructor visibility="public" name="BigDecimal">
				<comment>
					<description>Translates a {@code BigInteger} into a {@code BigDecimal}
 rounding according to the context settings.  The scale of the
 {@code BigDecimal} is zero.</description>
					<attribute name="@param">
						<description>val {@code BigInteger} value to be converted to
            {@code BigDecimal}.</description>
					</attribute>
					<attribute name="@param">
						<description>mc the context to use.</description>
					</attribute>
					<attribute name="@throws">
						<description>ArithmeticException if the result is inexact but the
         rounding mode is {@code UNNECESSARY}.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="val" comment="{@code BigInteger} value to be converted to
            {@code BigDecimal}." fulltype="java.math.BigInteger" type="BigInteger" />
					<param name="mc" comment="the context to use." fulltype="java.math.MathContext" type="MathContext" />
				</params>
			</constructor>
			<constructor visibility="public" name="BigDecimal">
				<comment>
					<description>Translates a {@code BigInteger} unscaled value and an
 {@code int} scale into a {@code BigDecimal}.  The value of
 the {@code BigDecimal} is
 &lt;tt&gt;(unscaledVal &amp;times; 10&lt;sup&gt;-scale&lt;/sup&gt;)&lt;/tt&gt;.</description>
					<attribute name="@param">
						<description>unscaledVal unscaled value of the {@code BigDecimal}.</description>
					</attribute>
					<attribute name="@param">
						<description>scale scale of the {@code BigDecimal}.</description>
					</attribute>
				</comment>
				<params>
					<param name="unscaledVal" comment="unscaled value of the {@code BigDecimal}." fulltype="java.math.BigInteger" type="BigInteger" />
					<param name="scale" comment="scale of the {@code BigDecimal}." fulltype="int" type="int" />
				</params>
			</constructor>
			<constructor visibility="public" name="BigDecimal">
				<comment>
					<description>Translates a {@code BigInteger} unscaled value and an
 {@code int} scale into a {@code BigDecimal}, with rounding
 according to the context settings.  The value of the
 {@code BigDecimal} is &lt;tt&gt;(unscaledVal &amp;times;
 10&lt;sup&gt;-scale&lt;/sup&gt;)&lt;/tt&gt;, rounded according to the
 {@code precision} and rounding mode settings.</description>
					<attribute name="@param">
						<description>unscaledVal unscaled value of the {@code BigDecimal}.</description>
					</attribute>
					<attribute name="@param">
						<description>scale scale of the {@code BigDecimal}.</description>
					</attribute>
					<attribute name="@param">
						<description>mc the context to use.</description>
					</attribute>
					<attribute name="@throws">
						<description>ArithmeticException if the result is inexact but the
         rounding mode is {@code UNNECESSARY}.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="unscaledVal" comment="unscaled value of the {@code BigDecimal}." fulltype="java.math.BigInteger" type="BigInteger" />
					<param name="scale" comment="scale of the {@code BigDecimal}." fulltype="int" type="int" />
					<param name="mc" comment="the context to use." fulltype="java.math.MathContext" type="MathContext" />
				</params>
			</constructor>
			<constructor visibility="public" name="BigDecimal">
				<comment>
					<description>Translates an {@code int} into a {@code BigDecimal}.  The
 scale of the {@code BigDecimal} is zero.</description>
					<attribute name="@param">
						<description>val {@code int} value to be converted to
            {@code BigDecimal}.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="val" comment="{@code int} value to be converted to
            {@code BigDecimal}." fulltype="int" type="int" />
				</params>
			</constructor>
			<constructor visibility="public" name="BigDecimal">
				<comment>
					<description>Translates an {@code int} into a {@code BigDecimal}, with
 rounding according to the context settings.  The scale of the
 {@code BigDecimal}, before any rounding, is zero.</description>
					<attribute name="@param">
						<description>val {@code int} value to be converted to {@code BigDecimal}.</description>
					</attribute>
					<attribute name="@param">
						<description>mc the context to use.</description>
					</attribute>
					<attribute name="@throws">
						<description>ArithmeticException if the result is inexact but the
         rounding mode is {@code UNNECESSARY}.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="val" comment="{@code int} value to be converted to {@code BigDecimal}." fulltype="int" type="int" />
					<param name="mc" comment="the context to use." fulltype="java.math.MathContext" type="MathContext" />
				</params>
			</constructor>
			<constructor visibility="public" name="BigDecimal">
				<comment>
					<description>Translates a {@code long} into a {@code BigDecimal}.  The
 scale of the {@code BigDecimal} is zero.</description>
					<attribute name="@param">
						<description>val {@code long} value to be converted to {@code BigDecimal}.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="val" comment="{@code long} value to be converted to {@code BigDecimal}." fulltype="long" type="long" />
				</params>
			</constructor>
			<constructor visibility="public" name="BigDecimal">
				<comment>
					<description>Translates a {@code long} into a {@code BigDecimal}, with
 rounding according to the context settings.  The scale of the
 {@code BigDecimal}, before any rounding, is zero.</description>
					<attribute name="@param">
						<description>val {@code long} value to be converted to {@code BigDecimal}.</description>
					</attribute>
					<attribute name="@param">
						<description>mc the context to use.</description>
					</attribute>
					<attribute name="@throws">
						<description>ArithmeticException if the result is inexact but the
         rounding mode is {@code UNNECESSARY}.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="val" comment="{@code long} value to be converted to {@code BigDecimal}." fulltype="long" type="long" />
					<param name="mc" comment="the context to use." fulltype="java.math.MathContext" type="MathContext" />
				</params>
			</constructor>
			<method static="true" visibility="public" name="valueOf" returncomment="a {@code BigDecimal} whose value is
         &lt;tt&gt;(unscaledVal &amp;times; 10&lt;sup&gt;-scale&lt;/sup&gt;)&lt;/tt&gt;." fulltype="java.math.BigDecimal" type="BigDecimal">
				<comment>
					<description>Translates a {@code long} unscaled value and an
 {@code int} scale into a {@code BigDecimal}.  This
 {@literal &quot;static factory method&quot;} is provided in preference to
 a ({@code long}, {@code int}) constructor because it
 allows for reuse of frequently used {@code BigDecimal} values..</description>
					<attribute name="@param">
						<description>unscaledVal unscaled value of the {@code BigDecimal}.</description>
					</attribute>
					<attribute name="@param">
						<description>scale scale of the {@code BigDecimal}.</description>
					</attribute>
					<attribute name="@return">
						<description>a {@code BigDecimal} whose value is
         &lt;tt&gt;(unscaledVal &amp;times; 10&lt;sup&gt;-scale&lt;/sup&gt;)&lt;/tt&gt;.</description>
					</attribute>
				</comment>
				<params>
					<param name="unscaledVal" comment="unscaled value of the {@code BigDecimal}." fulltype="long" type="long" />
					<param name="scale" comment="scale of the {@code BigDecimal}." fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="valueOf" returncomment="a {@code BigDecimal} whose value is {@code val}." fulltype="java.math.BigDecimal" type="BigDecimal">
				<comment>
					<description>Translates a {@code long} value into a {@code BigDecimal}
 with a scale of zero.  This {@literal &quot;static factory method&quot;}
 is provided in preference to a ({@code long}) constructor
 because it allows for reuse of frequently used
 {@code BigDecimal} values.</description>
					<attribute name="@param">
						<description>val value of the {@code BigDecimal}.</description>
					</attribute>
					<attribute name="@return">
						<description>a {@code BigDecimal} whose value is {@code val}.</description>
					</attribute>
				</comment>
				<params>
					<param name="val" comment="value of the {@code BigDecimal}." fulltype="long" type="long" />
				</params>
			</method>
			<method static="true" visibility="public" name="valueOf" returncomment="a {@code BigDecimal} whose value is equal to or approximately
         equal to the value of {@code val}." fulltype="java.math.BigDecimal" type="BigDecimal">
				<comment>
					<description>Translates a {@code double} into a {@code BigDecimal}, using
 the {@code double}&apos;s canonical string representation provided
 by the {@link Double#toString(double)} method.

 &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; This is generally the preferred way to convert
 a {@code double} (or {@code float}) into a
 {@code BigDecimal}, as the value returned is equal to that
 resulting from constructing a {@code BigDecimal} from the
 result of using {@link Double#toString(double)}.</description>
					<attribute name="@param">
						<description>val {@code double} to convert to a {@code BigDecimal}.</description>
					</attribute>
					<attribute name="@return">
						<description>a {@code BigDecimal} whose value is equal to or approximately
         equal to the value of {@code val}.</description>
					</attribute>
					<attribute name="@throws">
						<description>NumberFormatException if {@code val} is infinite or NaN.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="val" comment="{@code double} to convert to a {@code BigDecimal}." fulltype="double" type="double" />
				</params>
			</method>
			<method visibility="public" name="add" returncomment="{@code this + augend}" fulltype="java.math.BigDecimal" type="BigDecimal">
				<comment>
					<description>Returns a {@code BigDecimal} whose value is {@code (this +
 augend)}, and whose scale is {@code max(this.scale(),
 augend.scale())}.</description>
					<attribute name="@param">
						<description>augend value to be added to this {@code BigDecimal}.</description>
					</attribute>
					<attribute name="@return">
						<description>{@code this + augend}</description>
					</attribute>
				</comment>
				<params>
					<param name="augend" comment="value to be added to this {@code BigDecimal}." fulltype="java.math.BigDecimal" type="BigDecimal" />
				</params>
			</method>
			<method visibility="public" name="add" returncomment="{@code this + augend}, rounded as necessary." fulltype="java.math.BigDecimal" type="BigDecimal">
				<comment>
					<description>Returns a {@code BigDecimal} whose value is {@code (this + augend)},
 with rounding according to the context settings.

 If either number is zero and the precision setting is nonzero then
 the other number, rounded if necessary, is used as the result.</description>
					<attribute name="@param">
						<description>augend value to be added to this {@code BigDecimal}.</description>
					</attribute>
					<attribute name="@param">
						<description>mc the context to use.</description>
					</attribute>
					<attribute name="@return">
						<description>{@code this + augend}, rounded as necessary.</description>
					</attribute>
					<attribute name="@throws">
						<description>ArithmeticException if the result is inexact but the
         rounding mode is {@code UNNECESSARY}.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="augend" comment="value to be added to this {@code BigDecimal}." fulltype="java.math.BigDecimal" type="BigDecimal" />
					<param name="mc" comment="the context to use." fulltype="java.math.MathContext" type="MathContext" />
				</params>
			</method>
			<method visibility="private" name="preAlign" fulltype="java.math.BigDecimal[]" type="BigDecimal">
				<comment>
					<description>Returns an array of length two, the sum of whose entries is
 equal to the rounded sum of the {@code BigDecimal} arguments.

 &lt;p&gt;If the digit positions of the arguments have a sufficient
 gap between them, the value smaller in magnitude can be
 condensed into a {@literal &quot;sticky bit&quot;} and the end result will
 round the same way &lt;em&gt;if&lt;/em&gt; the precision of the final
 result does not include the high order digit of the small
 magnitude operand.

 &lt;p&gt;Note that while strictly speaking this is an optimization,
 it makes a much wider range of additions practical.

 &lt;p&gt;This corresponds to a pre-shift operation in a fixed
 precision floating-point adder; this method is complicated by
 variable precision of the result as determined by the
 MathContext.  A more nuanced operation could implement a
 {@literal &quot;right shift&quot;} on the smaller magnitude operand so
 that the number of digits of the smaller operand could be
 reduced even though the significands partially overlapped.</description>
				</comment>
				<params>
					<param name="lhs" fulltype="java.math.BigDecimal" type="BigDecimal" />
					<param name="augend" fulltype="java.math.BigDecimal" type="BigDecimal" />
					<param name="padding" fulltype="long" type="long" />
					<param name="mc" fulltype="java.math.MathContext" type="MathContext" />
				</params>
			</method>
			<method visibility="public" name="subtract" returncomment="{@code this - subtrahend}" fulltype="java.math.BigDecimal" type="BigDecimal">
				<comment>
					<description>Returns a {@code BigDecimal} whose value is {@code (this -
 subtrahend)}, and whose scale is {@code max(this.scale(),
 subtrahend.scale())}.</description>
					<attribute name="@param">
						<description>subtrahend value to be subtracted from this {@code BigDecimal}.</description>
					</attribute>
					<attribute name="@return">
						<description>{@code this - subtrahend}</description>
					</attribute>
				</comment>
				<params>
					<param name="subtrahend" comment="value to be subtracted from this {@code BigDecimal}." fulltype="java.math.BigDecimal" type="BigDecimal" />
				</params>
			</method>
			<method visibility="public" name="subtract" returncomment="{@code this - subtrahend}, rounded as necessary." fulltype="java.math.BigDecimal" type="BigDecimal">
				<comment>
					<description>Returns a {@code BigDecimal} whose value is {@code (this - subtrahend)},
 with rounding according to the context settings.

 If {@code subtrahend} is zero then this, rounded if necessary, is used as the
 result.  If this is zero then the result is {@code subtrahend.negate(mc)}.</description>
					<attribute name="@param">
						<description>subtrahend value to be subtracted from this {@code BigDecimal}.</description>
					</attribute>
					<attribute name="@param">
						<description>mc the context to use.</description>
					</attribute>
					<attribute name="@return">
						<description>{@code this - subtrahend}, rounded as necessary.</description>
					</attribute>
					<attribute name="@throws">
						<description>ArithmeticException if the result is inexact but the
         rounding mode is {@code UNNECESSARY}.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="subtrahend" comment="value to be subtracted from this {@code BigDecimal}." fulltype="java.math.BigDecimal" type="BigDecimal" />
					<param name="mc" comment="the context to use." fulltype="java.math.MathContext" type="MathContext" />
				</params>
			</method>
			<method visibility="public" name="multiply" returncomment="{@code this * multiplicand}" fulltype="java.math.BigDecimal" type="BigDecimal">
				<comment>
					<description>Returns a {@code BigDecimal} whose value is &lt;tt&gt;(this &amp;times;
 multiplicand)&lt;/tt&gt;, and whose scale is {@code (this.scale() +
 multiplicand.scale())}.</description>
					<attribute name="@param">
						<description>multiplicand value to be multiplied by this {@code BigDecimal}.</description>
					</attribute>
					<attribute name="@return">
						<description>{@code this * multiplicand}</description>
					</attribute>
				</comment>
				<params>
					<param name="multiplicand" comment="value to be multiplied by this {@code BigDecimal}." fulltype="java.math.BigDecimal" type="BigDecimal" />
				</params>
			</method>
			<method visibility="public" name="multiply" returncomment="{@code this * multiplicand}, rounded as necessary." fulltype="java.math.BigDecimal" type="BigDecimal">
				<comment>
					<description>Returns a {@code BigDecimal} whose value is &lt;tt&gt;(this &amp;times;
 multiplicand)&lt;/tt&gt;, with rounding according to the context settings.</description>
					<attribute name="@param">
						<description>multiplicand value to be multiplied by this {@code BigDecimal}.</description>
					</attribute>
					<attribute name="@param">
						<description>mc the context to use.</description>
					</attribute>
					<attribute name="@return">
						<description>{@code this * multiplicand}, rounded as necessary.</description>
					</attribute>
					<attribute name="@throws">
						<description>ArithmeticException if the result is inexact but the
         rounding mode is {@code UNNECESSARY}.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="multiplicand" comment="value to be multiplied by this {@code BigDecimal}." fulltype="java.math.BigDecimal" type="BigDecimal" />
					<param name="mc" comment="the context to use." fulltype="java.math.MathContext" type="MathContext" />
				</params>
			</method>
			<method visibility="public" name="divide" returncomment="{@code this / divisor}" fulltype="java.math.BigDecimal" type="BigDecimal">
				<comment>
					<description>Returns a {@code BigDecimal} whose value is {@code (this /
 divisor)}, and whose scale is as specified.  If rounding must
 be performed to generate a result with the specified scale, the
 specified rounding mode is applied.

 &lt;p&gt;The new {@link #divide(BigDecimal, int, RoundingMode)} method
 should be used in preference to this legacy method.</description>
					<attribute name="@param">
						<description>divisor value by which this {@code BigDecimal} is to be divided.</description>
					</attribute>
					<attribute name="@param">
						<description>scale scale of the {@code BigDecimal} quotient to be returned.</description>
					</attribute>
					<attribute name="@param">
						<description>roundingMode rounding mode to apply.</description>
					</attribute>
					<attribute name="@return">
						<description>{@code this / divisor}</description>
					</attribute>
					<attribute name="@throws">
						<description>ArithmeticException if {@code divisor} is zero,
         {@code roundingMode==ROUND_UNNECESSARY} and
         the specified scale is insufficient to represent the result
         of the division exactly.</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalArgumentException if {@code roundingMode} does not
         represent a valid rounding mode.</description>
					</attribute>
					<attribute name="@see">
						<description>#ROUND_UP</description>
					</attribute>
					<attribute name="@see">
						<description>#ROUND_DOWN</description>
					</attribute>
					<attribute name="@see">
						<description>#ROUND_CEILING</description>
					</attribute>
					<attribute name="@see">
						<description>#ROUND_FLOOR</description>
					</attribute>
					<attribute name="@see">
						<description>#ROUND_HALF_UP</description>
					</attribute>
					<attribute name="@see">
						<description>#ROUND_HALF_DOWN</description>
					</attribute>
					<attribute name="@see">
						<description>#ROUND_HALF_EVEN</description>
					</attribute>
					<attribute name="@see">
						<description>#ROUND_UNNECESSARY</description>
					</attribute>
				</comment>
				<params>
					<param name="divisor" comment="value by which this {@code BigDecimal} is to be divided." fulltype="java.math.BigDecimal" type="BigDecimal" />
					<param name="scale" comment="scale of the {@code BigDecimal} quotient to be returned." fulltype="int" type="int" />
					<param name="roundingMode" comment="rounding mode to apply." fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="private" name="divideAndRound" fulltype="java.math.BigDecimal" type="BigDecimal">
				<comment>
					<description>Internally used for division operation. The dividend and divisor are
 passed both in {@code long} format and {@code BigInteger} format. The
 returned {@code BigDecimal} object is the quotient whose scale is set to
 the passed in scale. If the remainder is not zero, it will be rounded
 based on the passed in roundingMode. Also, if the remainder is zero and
 the last parameter, i.e. preferredScale is NOT equal to scale, the
 trailing zeros of the result is stripped to match the preferredScale.</description>
				</comment>
				<params>
					<param name="ldividend" fulltype="long" type="long" />
					<param name="bdividend" fulltype="java.math.BigInteger" type="BigInteger" />
					<param name="ldivisor" fulltype="long" type="long" />
					<param name="bdivisor" fulltype="java.math.BigInteger" type="BigInteger" />
					<param name="scale" fulltype="int" type="int" />
					<param name="roundingMode" fulltype="int" type="int" />
					<param name="preferredScale" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="divide" returncomment="{@code this / divisor}" fulltype="java.math.BigDecimal" type="BigDecimal">
				<comment>
					<description>Returns a {@code BigDecimal} whose value is {@code (this /
 divisor)}, and whose scale is as specified.  If rounding must
 be performed to generate a result with the specified scale, the
 specified rounding mode is applied.</description>
					<attribute name="@param">
						<description>divisor value by which this {@code BigDecimal} is to be divided.</description>
					</attribute>
					<attribute name="@param">
						<description>scale scale of the {@code BigDecimal} quotient to be returned.</description>
					</attribute>
					<attribute name="@param">
						<description>roundingMode rounding mode to apply.</description>
					</attribute>
					<attribute name="@return">
						<description>{@code this / divisor}</description>
					</attribute>
					<attribute name="@throws">
						<description>ArithmeticException if {@code divisor} is zero,
         {@code roundingMode==RoundingMode.UNNECESSARY} and
         the specified scale is insufficient to represent the result
         of the division exactly.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="divisor" comment="value by which this {@code BigDecimal} is to be divided." fulltype="java.math.BigDecimal" type="BigDecimal" />
					<param name="scale" comment="scale of the {@code BigDecimal} quotient to be returned." fulltype="int" type="int" />
					<param name="roundingMode" comment="rounding mode to apply." fulltype="java.math.RoundingMode" type="RoundingMode" />
				</params>
			</method>
			<method visibility="public" name="divide" returncomment="{@code this / divisor}" fulltype="java.math.BigDecimal" type="BigDecimal">
				<comment>
					<description>Returns a {@code BigDecimal} whose value is {@code (this /
 divisor)}, and whose scale is {@code this.scale()}.  If
 rounding must be performed to generate a result with the given
 scale, the specified rounding mode is applied.

 &lt;p&gt;The new {@link #divide(BigDecimal, RoundingMode)} method
 should be used in preference to this legacy method.</description>
					<attribute name="@param">
						<description>divisor value by which this {@code BigDecimal} is to be divided.</description>
					</attribute>
					<attribute name="@param">
						<description>roundingMode rounding mode to apply.</description>
					</attribute>
					<attribute name="@return">
						<description>{@code this / divisor}</description>
					</attribute>
					<attribute name="@throws">
						<description>ArithmeticException if {@code divisor==0}, or
         {@code roundingMode==ROUND_UNNECESSARY} and
         {@code this.scale()} is insufficient to represent the result
         of the division exactly.</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalArgumentException if {@code roundingMode} does not
         represent a valid rounding mode.</description>
					</attribute>
					<attribute name="@see">
						<description>#ROUND_UP</description>
					</attribute>
					<attribute name="@see">
						<description>#ROUND_DOWN</description>
					</attribute>
					<attribute name="@see">
						<description>#ROUND_CEILING</description>
					</attribute>
					<attribute name="@see">
						<description>#ROUND_FLOOR</description>
					</attribute>
					<attribute name="@see">
						<description>#ROUND_HALF_UP</description>
					</attribute>
					<attribute name="@see">
						<description>#ROUND_HALF_DOWN</description>
					</attribute>
					<attribute name="@see">
						<description>#ROUND_HALF_EVEN</description>
					</attribute>
					<attribute name="@see">
						<description>#ROUND_UNNECESSARY</description>
					</attribute>
				</comment>
				<params>
					<param name="divisor" comment="value by which this {@code BigDecimal} is to be divided." fulltype="java.math.BigDecimal" type="BigDecimal" />
					<param name="roundingMode" comment="rounding mode to apply." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="divide" returncomment="{@code this / divisor}" fulltype="java.math.BigDecimal" type="BigDecimal">
				<comment>
					<description>Returns a {@code BigDecimal} whose value is {@code (this /
 divisor)}, and whose scale is {@code this.scale()}.  If
 rounding must be performed to generate a result with the given
 scale, the specified rounding mode is applied.</description>
					<attribute name="@param">
						<description>divisor value by which this {@code BigDecimal} is to be divided.</description>
					</attribute>
					<attribute name="@param">
						<description>roundingMode rounding mode to apply.</description>
					</attribute>
					<attribute name="@return">
						<description>{@code this / divisor}</description>
					</attribute>
					<attribute name="@throws">
						<description>ArithmeticException if {@code divisor==0}, or
         {@code roundingMode==RoundingMode.UNNECESSARY} and
         {@code this.scale()} is insufficient to represent the result
         of the division exactly.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="divisor" comment="value by which this {@code BigDecimal} is to be divided." fulltype="java.math.BigDecimal" type="BigDecimal" />
					<param name="roundingMode" comment="rounding mode to apply." fulltype="java.math.RoundingMode" type="RoundingMode" />
				</params>
			</method>
			<method visibility="public" name="divide" returncomment="{@code this / divisor}" fulltype="java.math.BigDecimal" type="BigDecimal">
				<comment>
					<description>Returns a {@code BigDecimal} whose value is {@code (this /
 divisor)}, and whose preferred scale is {@code (this.scale() -
 divisor.scale())}; if the exact quotient cannot be
 represented (because it has a non-terminating decimal
 expansion) an {@code ArithmeticException} is thrown.</description>
					<attribute name="@param">
						<description>divisor value by which this {@code BigDecimal} is to be divided.</description>
					</attribute>
					<attribute name="@throws">
						<description>ArithmeticException if the exact quotient does not have a
         terminating decimal expansion</description>
					</attribute>
					<attribute name="@return">
						<description>{@code this / divisor}</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
					<attribute name="@author">
						<description>Joseph D. Darcy</description>
					</attribute>
				</comment>
				<params>
					<param name="divisor" comment="value by which this {@code BigDecimal} is to be divided." fulltype="java.math.BigDecimal" type="BigDecimal" />
				</params>
			</method>
			<method visibility="public" name="divide" returncomment="{@code this / divisor}, rounded as necessary." fulltype="java.math.BigDecimal" type="BigDecimal">
				<comment>
					<description>Returns a {@code BigDecimal} whose value is {@code (this /
 divisor)}, with rounding according to the context settings.</description>
					<attribute name="@param">
						<description>divisor value by which this {@code BigDecimal} is to be divided.</description>
					</attribute>
					<attribute name="@param">
						<description>mc the context to use.</description>
					</attribute>
					<attribute name="@return">
						<description>{@code this / divisor}, rounded as necessary.</description>
					</attribute>
					<attribute name="@throws">
						<description>ArithmeticException if the result is inexact but the
         rounding mode is {@code UNNECESSARY} or
         {@code mc.precision == 0} and the quotient has a
         non-terminating decimal expansion.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="divisor" comment="value by which this {@code BigDecimal} is to be divided." fulltype="java.math.BigDecimal" type="BigDecimal" />
					<param name="mc" comment="the context to use." fulltype="java.math.MathContext" type="MathContext" />
				</params>
			</method>
			<method visibility="public" name="divideToIntegralValue" returncomment="The integer part of {@code this / divisor}." fulltype="java.math.BigDecimal" type="BigDecimal">
				<comment>
					<description>Returns a {@code BigDecimal} whose value is the integer part
 of the quotient {@code (this / divisor)} rounded down.  The
 preferred scale of the result is {@code (this.scale() -
 divisor.scale())}.</description>
					<attribute name="@param">
						<description>divisor value by which this {@code BigDecimal} is to be divided.</description>
					</attribute>
					<attribute name="@return">
						<description>The integer part of {@code this / divisor}.</description>
					</attribute>
					<attribute name="@throws">
						<description>ArithmeticException if {@code divisor==0}</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="divisor" comment="value by which this {@code BigDecimal} is to be divided." fulltype="java.math.BigDecimal" type="BigDecimal" />
				</params>
			</method>
			<method visibility="public" name="divideToIntegralValue" returncomment="The integer part of {@code this / divisor}." fulltype="java.math.BigDecimal" type="BigDecimal">
				<comment>
					<description>Returns a {@code BigDecimal} whose value is the integer part
 of {@code (this / divisor)}.  Since the integer part of the
 exact quotient does not depend on the rounding mode, the
 rounding mode does not affect the values returned by this
 method.  The preferred scale of the result is
 {@code (this.scale() - divisor.scale())}.  An
 {@code ArithmeticException} is thrown if the integer part of
 the exact quotient needs more than {@code mc.precision}
 digits.</description>
					<attribute name="@param">
						<description>divisor value by which this {@code BigDecimal} is to be divided.</description>
					</attribute>
					<attribute name="@param">
						<description>mc the context to use.</description>
					</attribute>
					<attribute name="@return">
						<description>The integer part of {@code this / divisor}.</description>
					</attribute>
					<attribute name="@throws">
						<description>ArithmeticException if {@code divisor==0}</description>
					</attribute>
					<attribute name="@throws">
						<description>ArithmeticException if {@code mc.precision} {@literal &gt;} 0 and the result
         requires a precision of more than {@code mc.precision} digits.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
					<attribute name="@author">
						<description>Joseph D. Darcy</description>
					</attribute>
				</comment>
				<params>
					<param name="divisor" comment="value by which this {@code BigDecimal} is to be divided." fulltype="java.math.BigDecimal" type="BigDecimal" />
					<param name="mc" comment="the context to use." fulltype="java.math.MathContext" type="MathContext" />
				</params>
			</method>
			<method visibility="public" name="remainder" returncomment="{@code this % divisor}." fulltype="java.math.BigDecimal" type="BigDecimal">
				<comment>
					<description>Returns a {@code BigDecimal} whose value is {@code (this % divisor)}.

 &lt;p&gt;The remainder is given by
 {@code this.subtract(this.divideToIntegralValue(divisor).multiply(divisor))}.
 Note that this is not the modulo operation (the result can be
 negative).</description>
					<attribute name="@param">
						<description>divisor value by which this {@code BigDecimal} is to be divided.</description>
					</attribute>
					<attribute name="@return">
						<description>{@code this % divisor}.</description>
					</attribute>
					<attribute name="@throws">
						<description>ArithmeticException if {@code divisor==0}</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="divisor" comment="value by which this {@code BigDecimal} is to be divided." fulltype="java.math.BigDecimal" type="BigDecimal" />
				</params>
			</method>
			<method visibility="public" name="remainder" returncomment="{@code this % divisor}, rounded as necessary." fulltype="java.math.BigDecimal" type="BigDecimal">
				<comment>
					<description>Returns a {@code BigDecimal} whose value is {@code (this %
 divisor)}, with rounding according to the context settings.
 The {@code MathContext} settings affect the implicit divide
 used to compute the remainder.  The remainder computation
 itself is by definition exact.  Therefore, the remainder may
 contain more than {@code mc.getPrecision()} digits.

 &lt;p&gt;The remainder is given by
 {@code this.subtract(this.divideToIntegralValue(divisor,
 mc).multiply(divisor))}.  Note that this is not the modulo
 operation (the result can be negative).</description>
					<attribute name="@param">
						<description>divisor value by which this {@code BigDecimal} is to be divided.</description>
					</attribute>
					<attribute name="@param">
						<description>mc the context to use.</description>
					</attribute>
					<attribute name="@return">
						<description>{@code this % divisor}, rounded as necessary.</description>
					</attribute>
					<attribute name="@throws">
						<description>ArithmeticException if {@code divisor==0}</description>
					</attribute>
					<attribute name="@throws">
						<description>ArithmeticException if the result is inexact but the
         rounding mode is {@code UNNECESSARY}, or {@code mc.precision}
         {@literal &gt;} 0 and the result of {@code this.divideToIntgralValue(divisor)} would
         require a precision of more than {@code mc.precision} digits.</description>
					</attribute>
					<attribute name="@see">
						<description>#divideToIntegralValue(java.math.BigDecimal, java.math.MathContext)</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="divisor" comment="value by which this {@code BigDecimal} is to be divided." fulltype="java.math.BigDecimal" type="BigDecimal" />
					<param name="mc" comment="the context to use." fulltype="java.math.MathContext" type="MathContext" />
				</params>
			</method>
			<method visibility="public" name="divideAndRemainder" returncomment="a two element {@code BigDecimal} array: the quotient
         (the result of {@code divideToIntegralValue}) is the initial element
         and the remainder is the final element." fulltype="java.math.BigDecimal[]" type="BigDecimal">
				<comment>
					<description>Returns a two-element {@code BigDecimal} array containing the
 result of {@code divideToIntegralValue} followed by the result of
 {@code remainder} on the two operands.

 &lt;p&gt;Note that if both the integer quotient and remainder are
 needed, this method is faster than using the
 {@code divideToIntegralValue} and {@code remainder} methods
 separately because the division need only be carried out once.</description>
					<attribute name="@param">
						<description>divisor value by which this {@code BigDecimal} is to be divided,
         and the remainder computed.</description>
					</attribute>
					<attribute name="@return">
						<description>a two element {@code BigDecimal} array: the quotient
         (the result of {@code divideToIntegralValue}) is the initial element
         and the remainder is the final element.</description>
					</attribute>
					<attribute name="@throws">
						<description>ArithmeticException if {@code divisor==0}</description>
					</attribute>
					<attribute name="@see">
						<description>#divideToIntegralValue(java.math.BigDecimal, java.math.MathContext)</description>
					</attribute>
					<attribute name="@see">
						<description>#remainder(java.math.BigDecimal, java.math.MathContext)</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="divisor" comment="value by which this {@code BigDecimal} is to be divided,
         and the remainder computed." fulltype="java.math.BigDecimal" type="BigDecimal" />
				</params>
			</method>
			<method visibility="public" name="divideAndRemainder" returncomment="a two element {@code BigDecimal} array: the quotient
         (the result of {@code divideToIntegralValue}) is the
         initial element and the remainder is the final element." fulltype="java.math.BigDecimal[]" type="BigDecimal">
				<comment>
					<description>Returns a two-element {@code BigDecimal} array containing the
 result of {@code divideToIntegralValue} followed by the result of
 {@code remainder} on the two operands calculated with rounding
 according to the context settings.

 &lt;p&gt;Note that if both the integer quotient and remainder are
 needed, this method is faster than using the
 {@code divideToIntegralValue} and {@code remainder} methods
 separately because the division need only be carried out once.</description>
					<attribute name="@param">
						<description>divisor value by which this {@code BigDecimal} is to be divided,
         and the remainder computed.</description>
					</attribute>
					<attribute name="@param">
						<description>mc the context to use.</description>
					</attribute>
					<attribute name="@return">
						<description>a two element {@code BigDecimal} array: the quotient
         (the result of {@code divideToIntegralValue}) is the
         initial element and the remainder is the final element.</description>
					</attribute>
					<attribute name="@throws">
						<description>ArithmeticException if {@code divisor==0}</description>
					</attribute>
					<attribute name="@throws">
						<description>ArithmeticException if the result is inexact but the
         rounding mode is {@code UNNECESSARY}, or {@code mc.precision}
         {@literal &gt;} 0 and the result of {@code this.divideToIntgralValue(divisor)} would
         require a precision of more than {@code mc.precision} digits.</description>
					</attribute>
					<attribute name="@see">
						<description>#divideToIntegralValue(java.math.BigDecimal, java.math.MathContext)</description>
					</attribute>
					<attribute name="@see">
						<description>#remainder(java.math.BigDecimal, java.math.MathContext)</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="divisor" comment="value by which this {@code BigDecimal} is to be divided,
         and the remainder computed." fulltype="java.math.BigDecimal" type="BigDecimal" />
					<param name="mc" comment="the context to use." fulltype="java.math.MathContext" type="MathContext" />
				</params>
			</method>
			<method visibility="public" name="pow" returncomment="&lt;tt&gt;this&lt;sup&gt;n&lt;/sup&gt;&lt;/tt&gt;" fulltype="java.math.BigDecimal" type="BigDecimal">
				<comment>
					<description>Returns a {@code BigDecimal} whose value is
 &lt;tt&gt;(this&lt;sup&gt;n&lt;/sup&gt;)&lt;/tt&gt;, The power is computed exactly, to
 unlimited precision.

 &lt;p&gt;The parameter {@code n} must be in the range 0 through
 999999999, inclusive.  {@code ZERO.pow(0)} returns {@link
 #ONE}.

 Note that future releases may expand the allowable exponent
 range of this method.</description>
					<attribute name="@param">
						<description>n power to raise this {@code BigDecimal} to.</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;tt&gt;this&lt;sup&gt;n&lt;/sup&gt;&lt;/tt&gt;</description>
					</attribute>
					<attribute name="@throws">
						<description>ArithmeticException if {@code n} is out of range.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="n" comment="power to raise this {@code BigDecimal} to." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="pow" returncomment="&lt;tt&gt;this&lt;sup&gt;n&lt;/sup&gt;&lt;/tt&gt; using the ANSI standard X3.274-1996
         algorithm" fulltype="java.math.BigDecimal" type="BigDecimal">
				<comment>
					<description>Returns a {@code BigDecimal} whose value is
 &lt;tt&gt;(this&lt;sup&gt;n&lt;/sup&gt;)&lt;/tt&gt;.  The current implementation uses
 the core algorithm defined in ANSI standard X3.274-1996 with
 rounding according to the context settings.  In general, the
 returned numerical value is within two ulps of the exact
 numerical value for the chosen precision.  Note that future
 releases may use a different algorithm with a decreased
 allowable error bound and increased allowable exponent range.

 &lt;p&gt;The X3.274-1996 algorithm is:

 &lt;ul&gt;
 &lt;li&gt; An {@code ArithmeticException} exception is thrown if
  &lt;ul&gt;
    &lt;li&gt;{@code abs(n) &gt; 999999999}
    &lt;li&gt;{@code mc.precision == 0} and {@code n &lt; 0}
    &lt;li&gt;{@code mc.precision &gt; 0} and {@code n} has more than
    {@code mc.precision} decimal digits
  &lt;/ul&gt;

 &lt;li&gt; if {@code n} is zero, {@link #ONE} is returned even if
 {@code this} is zero, otherwise
 &lt;ul&gt;
   &lt;li&gt; if {@code n} is positive, the result is calculated via
   the repeated squaring technique into a single accumulator.
   The individual multiplications with the accumulator use the
   same math context settings as in {@code mc} except for a
   precision increased to {@code mc.precision + elength + 1}
   where {@code elength} is the number of decimal digits in
   {@code n}.

   &lt;li&gt; if {@code n} is negative, the result is calculated as if
   {@code n} were positive; this value is then divided into one
   using the working precision specified above.

   &lt;li&gt; The final value from either the positive or negative case
   is then rounded to the destination precision.
   &lt;/ul&gt;
 &lt;/ul&gt;</description>
					<attribute name="@param">
						<description>n power to raise this {@code BigDecimal} to.</description>
					</attribute>
					<attribute name="@param">
						<description>mc the context to use.</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;tt&gt;this&lt;sup&gt;n&lt;/sup&gt;&lt;/tt&gt; using the ANSI standard X3.274-1996
         algorithm</description>
					</attribute>
					<attribute name="@throws">
						<description>ArithmeticException if the result is inexact but the
         rounding mode is {@code UNNECESSARY}, or {@code n} is out
         of range.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="n" comment="power to raise this {@code BigDecimal} to." fulltype="int" type="int" />
					<param name="mc" comment="the context to use." fulltype="java.math.MathContext" type="MathContext" />
				</params>
			</method>
			<method visibility="public" name="abs" returncomment="{@code abs(this)}" fulltype="java.math.BigDecimal" type="BigDecimal">
				<comment>
					<description>Returns a {@code BigDecimal} whose value is the absolute value
 of this {@code BigDecimal}, and whose scale is
 {@code this.scale()}.</description>
					<attribute name="@return">
						<description>{@code abs(this)}</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="abs" returncomment="{@code abs(this)}, rounded as necessary." fulltype="java.math.BigDecimal" type="BigDecimal">
				<comment>
					<description>Returns a {@code BigDecimal} whose value is the absolute value
 of this {@code BigDecimal}, with rounding according to the
 context settings.</description>
					<attribute name="@param">
						<description>mc the context to use.</description>
					</attribute>
					<attribute name="@return">
						<description>{@code abs(this)}, rounded as necessary.</description>
					</attribute>
					<attribute name="@throws">
						<description>ArithmeticException if the result is inexact but the
         rounding mode is {@code UNNECESSARY}.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="mc" comment="the context to use." fulltype="java.math.MathContext" type="MathContext" />
				</params>
			</method>
			<method visibility="public" name="negate" returncomment="{@code -this}." fulltype="java.math.BigDecimal" type="BigDecimal">
				<comment>
					<description>Returns a {@code BigDecimal} whose value is {@code (-this)},
 and whose scale is {@code this.scale()}.</description>
					<attribute name="@return">
						<description>{@code -this}.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="negate" returncomment="{@code -this}, rounded as necessary." fulltype="java.math.BigDecimal" type="BigDecimal">
				<comment>
					<description>Returns a {@code BigDecimal} whose value is {@code (-this)},
 with rounding according to the context settings.</description>
					<attribute name="@param">
						<description>mc the context to use.</description>
					</attribute>
					<attribute name="@return">
						<description>{@code -this}, rounded as necessary.</description>
					</attribute>
					<attribute name="@throws">
						<description>ArithmeticException if the result is inexact but the
         rounding mode is {@code UNNECESSARY}.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="mc" comment="the context to use." fulltype="java.math.MathContext" type="MathContext" />
				</params>
			</method>
			<method visibility="public" name="plus" returncomment="{@code this}." fulltype="java.math.BigDecimal" type="BigDecimal">
				<comment>
					<description>Returns a {@code BigDecimal} whose value is {@code (+this)}, and whose
 scale is {@code this.scale()}.

 &lt;p&gt;This method, which simply returns this {@code BigDecimal}
 is included for symmetry with the unary minus method {@link
 #negate()}.</description>
					<attribute name="@return">
						<description>{@code this}.</description>
					</attribute>
					<attribute name="@see">
						<description>#negate()</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="plus" returncomment="{@code this}, rounded as necessary.  A zero result will
         have a scale of 0." fulltype="java.math.BigDecimal" type="BigDecimal">
				<comment>
					<description>Returns a {@code BigDecimal} whose value is {@code (+this)},
 with rounding according to the context settings.

 &lt;p&gt;The effect of this method is identical to that of the {@link
 #round(MathContext)} method.</description>
					<attribute name="@param">
						<description>mc the context to use.</description>
					</attribute>
					<attribute name="@return">
						<description>{@code this}, rounded as necessary.  A zero result will
         have a scale of 0.</description>
					</attribute>
					<attribute name="@throws">
						<description>ArithmeticException if the result is inexact but the
         rounding mode is {@code UNNECESSARY}.</description>
					</attribute>
					<attribute name="@see">
						<description>#round(MathContext)</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="mc" comment="the context to use." fulltype="java.math.MathContext" type="MathContext" />
				</params>
			</method>
			<method visibility="public" name="signum" returncomment="-1, 0, or 1 as the value of this {@code BigDecimal}
         is negative, zero, or positive." fulltype="int" type="int">
				<comment>
					<description>Returns the signum function of this {@code BigDecimal}.</description>
					<attribute name="@return">
						<description>-1, 0, or 1 as the value of this {@code BigDecimal}
         is negative, zero, or positive.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="scale" returncomment="the scale of this {@code BigDecimal}." fulltype="int" type="int">
				<comment>
					<description>Returns the &lt;i&gt;scale&lt;/i&gt; of this {@code BigDecimal}.  If zero
 or positive, the scale is the number of digits to the right of
 the decimal point.  If negative, the unscaled value of the
 number is multiplied by ten to the power of the negation of the
 scale.  For example, a scale of {@code -3} means the unscaled
 value is multiplied by 1000.</description>
					<attribute name="@return">
						<description>the scale of this {@code BigDecimal}.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="precision" returncomment="the precision of this {@code BigDecimal}." fulltype="int" type="int">
				<comment>
					<description>Returns the &lt;i&gt;precision&lt;/i&gt; of this {@code BigDecimal}.  (The
 precision is the number of digits in the unscaled value.)

 &lt;p&gt;The precision of a zero value is 1.</description>
					<attribute name="@return">
						<description>the precision of this {@code BigDecimal}.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="unscaledValue" returncomment="the unscaled value of this {@code BigDecimal}." fulltype="java.math.BigInteger" type="BigInteger">
				<comment>
					<description>Returns a {@code BigInteger} whose value is the &lt;i&gt;unscaled
 value&lt;/i&gt; of this {@code BigDecimal}.  (Computes &lt;tt&gt;(this *
 10&lt;sup&gt;this.scale()&lt;/sup&gt;)&lt;/tt&gt;.)</description>
					<attribute name="@return">
						<description>the unscaled value of this {@code BigDecimal}.</description>
					</attribute>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="round" returncomment="a {@code BigDecimal} rounded according to the
         {@code MathContext} settings." fulltype="java.math.BigDecimal" type="BigDecimal">
				<comment>
					<description>Returns a {@code BigDecimal} rounded according to the
 {@code MathContext} settings.  If the precision setting is 0 then
 no rounding takes place.

 &lt;p&gt;The effect of this method is identical to that of the
 {@link #plus(MathContext)} method.</description>
					<attribute name="@param">
						<description>mc the context to use.</description>
					</attribute>
					<attribute name="@return">
						<description>a {@code BigDecimal} rounded according to the
         {@code MathContext} settings.</description>
					</attribute>
					<attribute name="@throws">
						<description>ArithmeticException if the rounding mode is
         {@code UNNECESSARY} and the
         {@code BigDecimal}  operation would require rounding.</description>
					</attribute>
					<attribute name="@see">
						<description>#plus(MathContext)</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="mc" comment="the context to use." fulltype="java.math.MathContext" type="MathContext" />
				</params>
			</method>
			<method visibility="public" name="setScale" returncomment="a {@code BigDecimal} whose scale is the specified value,
         and whose unscaled value is determined by multiplying or
         dividing this {@code BigDecimal}&apos;s unscaled value by the
         appropriate power of ten to maintain its overall value." fulltype="java.math.BigDecimal" type="BigDecimal">
				<comment>
					<description>Returns a {@code BigDecimal} whose scale is the specified
 value, and whose unscaled value is determined by multiplying or
 dividing this {@code BigDecimal}&apos;s unscaled value by the
 appropriate power of ten to maintain its overall value.  If the
 scale is reduced by the operation, the unscaled value must be
 divided (rather than multiplied), and the value may be changed;
 in this case, the specified rounding mode is applied to the
 division.

 &lt;p&gt;Note that since BigDecimal objects are immutable, calls of
 this method do &lt;i&gt;not&lt;/i&gt; result in the original object being
 modified, contrary to the usual convention of having methods
 named &lt;tt&gt;set&lt;i&gt;X&lt;/i&gt;&lt;/tt&gt; mutate field &lt;i&gt;{@code X}&lt;/i&gt;.
 Instead, {@code setScale} returns an object with the proper
 scale; the returned object may or may not be newly allocated.</description>
					<attribute name="@param">
						<description>newScale scale of the {@code BigDecimal} value to be returned.</description>
					</attribute>
					<attribute name="@param">
						<description>roundingMode The rounding mode to apply.</description>
					</attribute>
					<attribute name="@return">
						<description>a {@code BigDecimal} whose scale is the specified value,
         and whose unscaled value is determined by multiplying or
         dividing this {@code BigDecimal}&apos;s unscaled value by the
         appropriate power of ten to maintain its overall value.</description>
					</attribute>
					<attribute name="@throws">
						<description>ArithmeticException if {@code roundingMode==UNNECESSARY}
         and the specified scaling operation would require
         rounding.</description>
					</attribute>
					<attribute name="@see">
						<description>RoundingMode</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="newScale" comment="scale of the {@code BigDecimal} value to be returned." fulltype="int" type="int" />
					<param name="roundingMode" comment="The rounding mode to apply." fulltype="java.math.RoundingMode" type="RoundingMode" />
				</params>
			</method>
			<method visibility="public" name="setScale" returncomment="a {@code BigDecimal} whose scale is the specified value,
         and whose unscaled value is determined by multiplying or
         dividing this {@code BigDecimal}&apos;s unscaled value by the
         appropriate power of ten to maintain its overall value." fulltype="java.math.BigDecimal" type="BigDecimal">
				<comment>
					<description>Returns a {@code BigDecimal} whose scale is the specified
 value, and whose unscaled value is determined by multiplying or
 dividing this {@code BigDecimal}&apos;s unscaled value by the
 appropriate power of ten to maintain its overall value.  If the
 scale is reduced by the operation, the unscaled value must be
 divided (rather than multiplied), and the value may be changed;
 in this case, the specified rounding mode is applied to the
 division.

 &lt;p&gt;Note that since BigDecimal objects are immutable, calls of
 this method do &lt;i&gt;not&lt;/i&gt; result in the original object being
 modified, contrary to the usual convention of having methods
 named &lt;tt&gt;set&lt;i&gt;X&lt;/i&gt;&lt;/tt&gt; mutate field &lt;i&gt;{@code X}&lt;/i&gt;.
 Instead, {@code setScale} returns an object with the proper
 scale; the returned object may or may not be newly allocated.

 &lt;p&gt;The new {@link #setScale(int, RoundingMode)} method should
 be used in preference to this legacy method.</description>
					<attribute name="@param">
						<description>newScale scale of the {@code BigDecimal} value to be returned.</description>
					</attribute>
					<attribute name="@param">
						<description>roundingMode The rounding mode to apply.</description>
					</attribute>
					<attribute name="@return">
						<description>a {@code BigDecimal} whose scale is the specified value,
         and whose unscaled value is determined by multiplying or
         dividing this {@code BigDecimal}&apos;s unscaled value by the
         appropriate power of ten to maintain its overall value.</description>
					</attribute>
					<attribute name="@throws">
						<description>ArithmeticException if {@code roundingMode==ROUND_UNNECESSARY}
         and the specified scaling operation would require
         rounding.</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalArgumentException if {@code roundingMode} does not
         represent a valid rounding mode.</description>
					</attribute>
					<attribute name="@see">
						<description>#ROUND_UP</description>
					</attribute>
					<attribute name="@see">
						<description>#ROUND_DOWN</description>
					</attribute>
					<attribute name="@see">
						<description>#ROUND_CEILING</description>
					</attribute>
					<attribute name="@see">
						<description>#ROUND_FLOOR</description>
					</attribute>
					<attribute name="@see">
						<description>#ROUND_HALF_UP</description>
					</attribute>
					<attribute name="@see">
						<description>#ROUND_HALF_DOWN</description>
					</attribute>
					<attribute name="@see">
						<description>#ROUND_HALF_EVEN</description>
					</attribute>
					<attribute name="@see">
						<description>#ROUND_UNNECESSARY</description>
					</attribute>
				</comment>
				<params>
					<param name="newScale" comment="scale of the {@code BigDecimal} value to be returned." fulltype="int" type="int" />
					<param name="roundingMode" comment="The rounding mode to apply." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="setScale" returncomment="a {@code BigDecimal} whose scale is the specified value, and
         whose unscaled value is determined by multiplying or dividing
         this {@code BigDecimal}&apos;s unscaled value by the appropriate
         power of ten to maintain its overall value." fulltype="java.math.BigDecimal" type="BigDecimal">
				<comment>
					<description>Returns a {@code BigDecimal} whose scale is the specified
 value, and whose value is numerically equal to this
 {@code BigDecimal}&apos;s.  Throws an {@code ArithmeticException}
 if this is not possible.

 &lt;p&gt;This call is typically used to increase the scale, in which
 case it is guaranteed that there exists a {@code BigDecimal}
 of the specified scale and the correct value.  The call can
 also be used to reduce the scale if the caller knows that the
 {@code BigDecimal} has sufficiently many zeros at the end of
 its fractional part (i.e., factors of ten in its integer value)
 to allow for the rescaling without changing its value.

 &lt;p&gt;This method returns the same result as the two-argument
 versions of {@code setScale}, but saves the caller the trouble
 of specifying a rounding mode in cases where it is irrelevant.

 &lt;p&gt;Note that since {@code BigDecimal} objects are immutable,
 calls of this method do &lt;i&gt;not&lt;/i&gt; result in the original
 object being modified, contrary to the usual convention of
 having methods named &lt;tt&gt;set&lt;i&gt;X&lt;/i&gt;&lt;/tt&gt; mutate field
 &lt;i&gt;{@code X}&lt;/i&gt;.  Instead, {@code setScale} returns an
 object with the proper scale; the returned object may or may
 not be newly allocated.</description>
					<attribute name="@param">
						<description>newScale scale of the {@code BigDecimal} value to be returned.</description>
					</attribute>
					<attribute name="@return">
						<description>a {@code BigDecimal} whose scale is the specified value, and
         whose unscaled value is determined by multiplying or dividing
         this {@code BigDecimal}&apos;s unscaled value by the appropriate
         power of ten to maintain its overall value.</description>
					</attribute>
					<attribute name="@throws">
						<description>ArithmeticException if the specified scaling operation would
         require rounding.</description>
					</attribute>
					<attribute name="@see">
						<description>#setScale(int, int)</description>
					</attribute>
					<attribute name="@see">
						<description>#setScale(int, RoundingMode)</description>
					</attribute>
				</comment>
				<params>
					<param name="newScale" comment="scale of the {@code BigDecimal} value to be returned." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="movePointLeft" returncomment="a {@code BigDecimal} which is equivalent to this one with the
         decimal point moved {@code n} places to the left." fulltype="java.math.BigDecimal" type="BigDecimal">
				<comment>
					<description>Returns a {@code BigDecimal} which is equivalent to this one
 with the decimal point moved {@code n} places to the left.  If
 {@code n} is non-negative, the call merely adds {@code n} to
 the scale.  If {@code n} is negative, the call is equivalent
 to {@code movePointRight(-n)}.  The {@code BigDecimal}
 returned by this call has value &lt;tt&gt;(this &amp;times;
 10&lt;sup&gt;-n&lt;/sup&gt;)&lt;/tt&gt; and scale {@code max(this.scale()+n,
 0)}.</description>
					<attribute name="@param">
						<description>n number of places to move the decimal point to the left.</description>
					</attribute>
					<attribute name="@return">
						<description>a {@code BigDecimal} which is equivalent to this one with the
         decimal point moved {@code n} places to the left.</description>
					</attribute>
					<attribute name="@throws">
						<description>ArithmeticException if scale overflows.</description>
					</attribute>
				</comment>
				<params>
					<param name="n" comment="number of places to move the decimal point to the left." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="movePointRight" returncomment="a {@code BigDecimal} which is equivalent to this one
         with the decimal point moved {@code n} places to the right." fulltype="java.math.BigDecimal" type="BigDecimal">
				<comment>
					<description>Returns a {@code BigDecimal} which is equivalent to this one
 with the decimal point moved {@code n} places to the right.
 If {@code n} is non-negative, the call merely subtracts
 {@code n} from the scale.  If {@code n} is negative, the call
 is equivalent to {@code movePointLeft(-n)}.  The
 {@code BigDecimal} returned by this call has value &lt;tt&gt;(this
 &amp;times; 10&lt;sup&gt;n&lt;/sup&gt;)&lt;/tt&gt; and scale {@code max(this.scale()-n,
 0)}.</description>
					<attribute name="@param">
						<description>n number of places to move the decimal point to the right.</description>
					</attribute>
					<attribute name="@return">
						<description>a {@code BigDecimal} which is equivalent to this one
         with the decimal point moved {@code n} places to the right.</description>
					</attribute>
					<attribute name="@throws">
						<description>ArithmeticException if scale overflows.</description>
					</attribute>
				</comment>
				<params>
					<param name="n" comment="number of places to move the decimal point to the right." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="scaleByPowerOfTen" fulltype="java.math.BigDecimal" type="BigDecimal">
				<comment>
					<description>Returns a BigDecimal whose numerical value is equal to
 ({@code this} * 10&lt;sup&gt;n&lt;/sup&gt;).  The scale of
 the result is {@code (this.scale() - n)}.</description>
					<attribute name="@throws">
						<description>ArithmeticException if the scale would be
         outside the range of a 32-bit integer.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="n" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="stripTrailingZeros" returncomment="a numerically equal {@code BigDecimal} with any
 trailing zeros removed." fulltype="java.math.BigDecimal" type="BigDecimal">
				<comment>
					<description>Returns a {@code BigDecimal} which is numerically equal to
 this one but with any trailing zeros removed from the
 representation.  For example, stripping the trailing zeros from
 the {@code BigDecimal} value {@code 600.0}, which has
 [{@code BigInteger}, {@code scale}] components equals to
 [6000, 1], yields {@code 6E2} with [{@code BigInteger},
 {@code scale}] components equals to [6, -2]</description>
					<attribute name="@return">
						<description>a numerically equal {@code BigDecimal} with any
 trailing zeros removed.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="compareTo" returncomment="-1, 0, or 1 as this {@code BigDecimal} is numerically
          less than, equal to, or greater than {@code val}." fulltype="int" type="int">
				<comment>
					<description>Compares this {@code BigDecimal} with the specified
 {@code BigDecimal}.  Two {@code BigDecimal} objects that are
 equal in value but have a different scale (like 2.0 and 2.00)
 are considered equal by this method.  This method is provided
 in preference to individual methods for each of the six boolean
 comparison operators ({@literal &lt;}, ==,
 {@literal &gt;}, {@literal &gt;=}, !=, {@literal &lt;=}).  The
 suggested idiom for performing these comparisons is:
 {@code (x.compareTo(y)} &amp;lt;&lt;i&gt;op&lt;/i&gt;&amp;gt; {@code 0)}, where
 &amp;lt;&lt;i&gt;op&lt;/i&gt;&amp;gt; is one of the six comparison operators.</description>
					<attribute name="@param">
						<description>val {@code BigDecimal} to which this {@code BigDecimal} is
         to be compared.</description>
					</attribute>
					<attribute name="@return">
						<description>-1, 0, or 1 as this {@code BigDecimal} is numerically
          less than, equal to, or greater than {@code val}.</description>
					</attribute>
				</comment>
				<params>
					<param name="val" comment="{@code BigDecimal} to which this {@code BigDecimal} is
         to be compared." fulltype="java.math.BigDecimal" type="BigDecimal" />
				</params>
			</method>
			<method visibility="private" name="compareMagnitude" fulltype="int" type="int">
				<comment>
					<description>Version of compareTo that ignores sign.</description>
				</comment>
				<params>
					<param name="val" fulltype="java.math.BigDecimal" type="BigDecimal" />
				</params>
			</method>
			<method visibility="public" name="equals" returncomment="{@code true} if and only if the specified {@code Object} is a
         {@code BigDecimal} whose value and scale are equal to this
         {@code BigDecimal}&apos;s." fulltype="boolean" type="boolean">
				<comment>
					<description>Compares this {@code BigDecimal} with the specified
 {@code Object} for equality.  Unlike {@link
 #compareTo(BigDecimal) compareTo}, this method considers two
 {@code BigDecimal} objects equal only if they are equal in
 value and scale (thus 2.0 is not equal to 2.00 when compared by
 this method).</description>
					<attribute name="@param">
						<description>x {@code Object} to which this {@code BigDecimal} is
         to be compared.</description>
					</attribute>
					<attribute name="@return">
						<description>{@code true} if and only if the specified {@code Object} is a
         {@code BigDecimal} whose value and scale are equal to this
         {@code BigDecimal}&apos;s.</description>
					</attribute>
					<attribute name="@see">
						<description>#compareTo(java.math.BigDecimal)</description>
					</attribute>
					<attribute name="@see">
						<description>#hashCode</description>
					</attribute>
				</comment>
				<params>
					<param name="x" comment="{@code Object} to which this {@code BigDecimal} is
         to be compared." fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="min" returncomment="the {@code BigDecimal} whose value is the lesser of this
         {@code BigDecimal} and {@code val}.  If they are equal,
         as defined by the {@link #compareTo(BigDecimal) compareTo}
         method, {@code this} is returned." fulltype="java.math.BigDecimal" type="BigDecimal">
				<comment>
					<description>Returns the minimum of this {@code BigDecimal} and
 {@code val}.</description>
					<attribute name="@param">
						<description>val value with which the minimum is to be computed.</description>
					</attribute>
					<attribute name="@return">
						<description>the {@code BigDecimal} whose value is the lesser of this
         {@code BigDecimal} and {@code val}.  If they are equal,
         as defined by the {@link #compareTo(BigDecimal) compareTo}
         method, {@code this} is returned.</description>
					</attribute>
					<attribute name="@see">
						<description>#compareTo(java.math.BigDecimal)</description>
					</attribute>
				</comment>
				<params>
					<param name="val" comment="value with which the minimum is to be computed." fulltype="java.math.BigDecimal" type="BigDecimal" />
				</params>
			</method>
			<method visibility="public" name="max" returncomment="the {@code BigDecimal} whose value is the greater of this
         {@code BigDecimal} and {@code val}.  If they are equal,
         as defined by the {@link #compareTo(BigDecimal) compareTo}
         method, {@code this} is returned." fulltype="java.math.BigDecimal" type="BigDecimal">
				<comment>
					<description>Returns the maximum of this {@code BigDecimal} and {@code val}.</description>
					<attribute name="@param">
						<description>val value with which the maximum is to be computed.</description>
					</attribute>
					<attribute name="@return">
						<description>the {@code BigDecimal} whose value is the greater of this
         {@code BigDecimal} and {@code val}.  If they are equal,
         as defined by the {@link #compareTo(BigDecimal) compareTo}
         method, {@code this} is returned.</description>
					</attribute>
					<attribute name="@see">
						<description>#compareTo(java.math.BigDecimal)</description>
					</attribute>
				</comment>
				<params>
					<param name="val" comment="value with which the maximum is to be computed." fulltype="java.math.BigDecimal" type="BigDecimal" />
				</params>
			</method>
			<method visibility="public" name="hashCode" returncomment="hash code for this {@code BigDecimal}." fulltype="int" type="int">
				<comment>
					<description>Returns the hash code for this {@code BigDecimal}.  Note that
 two {@code BigDecimal} objects that are numerically equal but
 differ in scale (like 2.0 and 2.00) will generally &lt;i&gt;not&lt;/i&gt;
 have the same hash code.</description>
					<attribute name="@return">
						<description>hash code for this {@code BigDecimal}.</description>
					</attribute>
					<attribute name="@see">
						<description>#equals(Object)</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="toString" returncomment="string representation of this {@code BigDecimal}." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the string representation of this {@code BigDecimal},
 using scientific notation if an exponent is needed.

 &lt;p&gt;A standard canonical string form of the {@code BigDecimal}
 is created as though by the following steps: first, the
 absolute value of the unscaled value of the {@code BigDecimal}
 is converted to a string in base ten using the characters
 {@code &apos;0&apos;} through {@code &apos;9&apos;} with no leading zeros (except
 if its value is zero, in which case a single {@code &apos;0&apos;}
 character is used).

 &lt;p&gt;Next, an &lt;i&gt;adjusted exponent&lt;/i&gt; is calculated; this is the
 negated scale, plus the number of characters in the converted
 unscaled value, less one.  That is,
 {@code -scale+(ulength-1)}, where {@code ulength} is the
 length of the absolute value of the unscaled value in decimal
 digits (its &lt;i&gt;precision&lt;/i&gt;).

 &lt;p&gt;If the scale is greater than or equal to zero and the
 adjusted exponent is greater than or equal to {@code -6}, the
 number will be converted to a character form without using
 exponential notation.  In this case, if the scale is zero then
 no decimal point is added and if the scale is positive a
 decimal point will be inserted with the scale specifying the
 number of characters to the right of the decimal point.
 {@code &apos;0&apos;} characters are added to the left of the converted
 unscaled value as necessary.  If no character precedes the
 decimal point after this insertion then a conventional
 {@code &apos;0&apos;} character is prefixed.

 &lt;p&gt;Otherwise (that is, if the scale is negative, or the
 adjusted exponent is less than {@code -6}), the number will be
 converted to a character form using exponential notation.  In
 this case, if the converted {@code BigInteger} has more than
 one digit a decimal point is inserted after the first digit.
 An exponent in character form is then suffixed to the converted
 unscaled value (perhaps with inserted decimal point); this
 comprises the letter {@code &apos;E&apos;} followed immediately by the
 adjusted exponent converted to a character form.  The latter is
 in base ten, using the characters {@code &apos;0&apos;} through
 {@code &apos;9&apos;} with no leading zeros, and is always prefixed by a
 sign character {@code &apos;-&apos;} (&lt;tt&gt;&apos;&amp;#92;u002D&apos;&lt;/tt&gt;) if the
 adjusted exponent is negative, {@code &apos;+&apos;}
 (&lt;tt&gt;&apos;&amp;#92;u002B&apos;&lt;/tt&gt;) otherwise).

 &lt;p&gt;Finally, the entire string is prefixed by a minus sign
 character {@code &apos;-&apos;} (&lt;tt&gt;&apos;&amp;#92;u002D&apos;&lt;/tt&gt;) if the unscaled
 value is less than zero.  No sign character is prefixed if the
 unscaled value is zero or positive.

 &lt;p&gt;&lt;b&gt;Examples:&lt;/b&gt;
 &lt;p&gt;For each representation [&lt;i&gt;unscaled value&lt;/i&gt;, &lt;i&gt;scale&lt;/i&gt;]
 on the left, the resulting string is shown on the right.
 &lt;pre&gt;
 [123,0]      &quot;123&quot;
 [-123,0]     &quot;-123&quot;
 [123,-1]     &quot;1.23E+3&quot;
 [123,-3]     &quot;1.23E+5&quot;
 [123,1]      &quot;12.3&quot;
 [123,5]      &quot;0.00123&quot;
 [123,10]     &quot;1.23E-8&quot;
 [-123,12]    &quot;-1.23E-10&quot;
 &lt;/pre&gt;

 &lt;b&gt;Notes:&lt;/b&gt;
 &lt;ol&gt;

 &lt;li&gt;There is a one-to-one mapping between the distinguishable
 {@code BigDecimal} values and the result of this conversion.
 That is, every distinguishable {@code BigDecimal} value
 (unscaled value and scale) has a unique string representation
 as a result of using {@code toString}.  If that string
 representation is converted back to a {@code BigDecimal} using
 the {@link #BigDecimal(String)} constructor, then the original
 value will be recovered.

 &lt;li&gt;The string produced for a given number is always the same;
 it is not affected by locale.  This means that it can be used
 as a canonical string representation for exchanging decimal
 data, or as a key for a Hashtable, etc.  Locale-sensitive
 number formatting and parsing is handled by the {@link
 java.text.NumberFormat} class and its subclasses.

 &lt;li&gt;The {@link #toEngineeringString} method may be used for
 presenting numbers with exponents in engineering notation, and the
 {@link #setScale(int,RoundingMode) setScale} method may be used for
 rounding a {@code BigDecimal} so it has a known number of digits after
 the decimal point.

 &lt;li&gt;The digit-to-character mapping provided by
 {@code Character.forDigit} is used.

 &lt;/ol&gt;</description>
					<attribute name="@return">
						<description>string representation of this {@code BigDecimal}.</description>
					</attribute>
					<attribute name="@see">
						<description>Character#forDigit</description>
					</attribute>
					<attribute name="@see">
						<description>#BigDecimal(java.lang.String)</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="toEngineeringString" returncomment="string representation of this {@code BigDecimal}, using
         engineering notation if an exponent is needed." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a string representation of this {@code BigDecimal},
 using engineering notation if an exponent is needed.

 &lt;p&gt;Returns a string that represents the {@code BigDecimal} as
 described in the {@link #toString()} method, except that if
 exponential notation is used, the power of ten is adjusted to
 be a multiple of three (engineering notation) such that the
 integer part of nonzero values will be in the range 1 through
 999.  If exponential notation is used for zero values, a
 decimal point and one or two fractional zero digits are used so
 that the scale of the zero value is preserved.  Note that
 unlike the output of {@link #toString()}, the output of this
 method is &lt;em&gt;not&lt;/em&gt; guaranteed to recover the same [integer,
 scale] pair of this {@code BigDecimal} if the output string is
 converting back to a {@code BigDecimal} using the {@linkplain
 #BigDecimal(String) string constructor}.  The result of this method meets
 the weaker constraint of always producing a numerically equal
 result from applying the string constructor to the method&apos;s output.</description>
					<attribute name="@return">
						<description>string representation of this {@code BigDecimal}, using
         engineering notation if an exponent is needed.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="toPlainString" returncomment="a string representation of this {@code BigDecimal}
 without an exponent field." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a string representation of this {@code BigDecimal}
 without an exponent field.  For values with a positive scale,
 the number of digits to the right of the decimal point is used
 to indicate scale.  For values with a zero or negative scale,
 the resulting string is generated as if the value were
 converted to a numerically equal value with zero scale and as
 if all the trailing zeros of the zero scale value were present
 in the result.

 The entire string is prefixed by a minus sign character &apos;-&apos;
 (&lt;tt&gt;&apos;&amp;#92;u002D&apos;&lt;/tt&gt;) if the unscaled value is less than
 zero. No sign character is prefixed if the unscaled value is
 zero or positive.

 Note that if the result of this method is passed to the
 {@linkplain #BigDecimal(String) string constructor}, only the
 numerical value of this {@code BigDecimal} will necessarily be
 recovered; the representation of the new {@code BigDecimal}
 may have a different scale.  In particular, if this
 {@code BigDecimal} has a negative scale, the string resulting
 from this method will have a scale of zero when processed by
 the string constructor.

 (This method behaves analogously to the {@code toString}
 method in 1.4 and earlier releases.)</description>
					<attribute name="@return">
						<description>a string representation of this {@code BigDecimal}
 without an exponent field.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
					<attribute name="@see">
						<description>#toString()</description>
					</attribute>
					<attribute name="@see">
						<description>#toEngineeringString()</description>
					</attribute>
				</comment>
			</method>
			<method visibility="private" name="getValueString" fulltype="java.lang.String" type="String">
				<params>
					<param name="signum" fulltype="int" type="int" />
					<param name="intString" fulltype="java.lang.String" type="String" />
					<param name="scale" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="toBigInteger" returncomment="this {@code BigDecimal} converted to a {@code BigInteger}." fulltype="java.math.BigInteger" type="BigInteger">
				<comment>
					<description>Converts this {@code BigDecimal} to a {@code BigInteger}.
 This conversion is analogous to a &lt;a
 href=&quot;http://java.sun.com/docs/books/jls/second_edition/html/conversions.doc.html#25363&quot;&gt;&lt;i&gt;narrowing
 primitive conversion&lt;/i&gt;&lt;/a&gt; from {@code double} to
 {@code long} as defined in the &lt;a
 href=&quot;http://java.sun.com/docs/books/jls/html/&quot;&gt;Java Language
 Specification&lt;/a&gt;: any fractional part of this
 {@code BigDecimal} will be discarded.  Note that this
 conversion can lose information about the precision of the
 {@code BigDecimal} value.
 &lt;p&gt;
 To have an exception thrown if the conversion is inexact (in
 other words if a nonzero fractional part is discarded), use the
 {@link #toBigIntegerExact()} method.</description>
					<attribute name="@return">
						<description>this {@code BigDecimal} converted to a {@code BigInteger}.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="toBigIntegerExact" returncomment="this {@code BigDecimal} converted to a {@code BigInteger}." fulltype="java.math.BigInteger" type="BigInteger">
				<comment>
					<description>Converts this {@code BigDecimal} to a {@code BigInteger},
 checking for lost information.  An exception is thrown if this
 {@code BigDecimal} has a nonzero fractional part.</description>
					<attribute name="@return">
						<description>this {@code BigDecimal} converted to a {@code BigInteger}.</description>
					</attribute>
					<attribute name="@throws">
						<description>ArithmeticException if {@code this} has a nonzero
         fractional part.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="longValue" returncomment="this {@code BigDecimal} converted to a {@code long}." fulltype="long" type="long">
				<comment>
					<description>Converts this {@code BigDecimal} to a {@code long}.  This
 conversion is analogous to a &lt;a
 href=&quot;http://java.sun.com/docs/books/jls/second_edition/html/conversions.doc.html#25363&quot;&gt;&lt;i&gt;narrowing
 primitive conversion&lt;/i&gt;&lt;/a&gt; from {@code double} to
 {@code short} as defined in the &lt;a
 href=&quot;http://java.sun.com/docs/books/jls/html/&quot;&gt;Java Language
 Specification&lt;/a&gt;: any fractional part of this
 {@code BigDecimal} will be discarded, and if the resulting
 &quot;{@code BigInteger}&quot; is too big to fit in a
 {@code long}, only the low-order 64 bits are returned.
 Note that this conversion can lose information about the
 overall magnitude and precision of this {@code BigDecimal} value as well
 as return a result with the opposite sign.</description>
					<attribute name="@return">
						<description>this {@code BigDecimal} converted to a {@code long}.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="longValueExact" returncomment="this {@code BigDecimal} converted to a {@code long}." fulltype="long" type="long">
				<comment>
					<description>Converts this {@code BigDecimal} to a {@code long}, checking
 for lost information.  If this {@code BigDecimal} has a
 nonzero fractional part or is out of the possible range for a
 {@code long} result then an {@code ArithmeticException} is
 thrown.</description>
					<attribute name="@return">
						<description>this {@code BigDecimal} converted to a {@code long}.</description>
					</attribute>
					<attribute name="@throws">
						<description>ArithmeticException if {@code this} has a nonzero
         fractional part, or will not fit in a {@code long}.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="intValue" returncomment="this {@code BigDecimal} converted to an {@code int}." fulltype="int" type="int">
				<comment>
					<description>Converts this {@code BigDecimal} to an {@code int}.  This
 conversion is analogous to a &lt;a
 href=&quot;http://java.sun.com/docs/books/jls/second_edition/html/conversions.doc.html#25363&quot;&gt;&lt;i&gt;narrowing
 primitive conversion&lt;/i&gt;&lt;/a&gt; from {@code double} to
 {@code short} as defined in the &lt;a
 href=&quot;http://java.sun.com/docs/books/jls/html/&quot;&gt;Java Language
 Specification&lt;/a&gt;: any fractional part of this
 {@code BigDecimal} will be discarded, and if the resulting
 &quot;{@code BigInteger}&quot; is too big to fit in an
 {@code int}, only the low-order 32 bits are returned.
 Note that this conversion can lose information about the
 overall magnitude and precision of this {@code BigDecimal}
 value as well as return a result with the opposite sign.</description>
					<attribute name="@return">
						<description>this {@code BigDecimal} converted to an {@code int}.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="intValueExact" returncomment="this {@code BigDecimal} converted to an {@code int}." fulltype="int" type="int">
				<comment>
					<description>Converts this {@code BigDecimal} to an {@code int}, checking
 for lost information.  If this {@code BigDecimal} has a
 nonzero fractional part or is out of the possible range for an
 {@code int} result then an {@code ArithmeticException} is
 thrown.</description>
					<attribute name="@return">
						<description>this {@code BigDecimal} converted to an {@code int}.</description>
					</attribute>
					<attribute name="@throws">
						<description>ArithmeticException if {@code this} has a nonzero
         fractional part, or will not fit in an {@code int}.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="shortValueExact" returncomment="this {@code BigDecimal} converted to a {@code short}." fulltype="short" type="short">
				<comment>
					<description>Converts this {@code BigDecimal} to a {@code short}, checking
 for lost information.  If this {@code BigDecimal} has a
 nonzero fractional part or is out of the possible range for a
 {@code short} result then an {@code ArithmeticException} is
 thrown.</description>
					<attribute name="@return">
						<description>this {@code BigDecimal} converted to a {@code short}.</description>
					</attribute>
					<attribute name="@throws">
						<description>ArithmeticException if {@code this} has a nonzero
         fractional part, or will not fit in a {@code short}.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="byteValueExact" returncomment="this {@code BigDecimal} converted to a {@code byte}." fulltype="byte" type="byte">
				<comment>
					<description>Converts this {@code BigDecimal} to a {@code byte}, checking
 for lost information.  If this {@code BigDecimal} has a
 nonzero fractional part or is out of the possible range for a
 {@code byte} result then an {@code ArithmeticException} is
 thrown.</description>
					<attribute name="@return">
						<description>this {@code BigDecimal} converted to a {@code byte}.</description>
					</attribute>
					<attribute name="@throws">
						<description>ArithmeticException if {@code this} has a nonzero
         fractional part, or will not fit in a {@code byte}.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="floatValue" returncomment="this {@code BigDecimal} converted to a {@code float}." fulltype="float" type="float">
				<comment>
					<description>Converts this {@code BigDecimal} to a {@code float}.
 This conversion is similar to the &lt;a
 href=&quot;http://java.sun.com/docs/books/jls/second_edition/html/conversions.doc.html#25363&quot;&gt;&lt;i&gt;narrowing
 primitive conversion&lt;/i&gt;&lt;/a&gt; from {@code double} to
 {@code float} defined in the &lt;a
 href=&quot;http://java.sun.com/docs/books/jls/html/&quot;&gt;Java Language
 Specification&lt;/a&gt;: if this {@code BigDecimal} has too great a
 magnitude to represent as a {@code float}, it will be
 converted to {@link Float#NEGATIVE_INFINITY} or {@link
 Float#POSITIVE_INFINITY} as appropriate.  Note that even when
 the return value is finite, this conversion can lose
 information about the precision of the {@code BigDecimal}
 value.</description>
					<attribute name="@return">
						<description>this {@code BigDecimal} converted to a {@code float}.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="doubleValue" returncomment="this {@code BigDecimal} converted to a {@code double}." fulltype="double" type="double">
				<comment>
					<description>Converts this {@code BigDecimal} to a {@code double}.
 This conversion is similar to the &lt;a
 href=&quot;http://java.sun.com/docs/books/jls/second_edition/html/conversions.doc.html#25363&quot;&gt;&lt;i&gt;narrowing
 primitive conversion&lt;/i&gt;&lt;/a&gt; from {@code double} to
 {@code float} as defined in the &lt;a
 href=&quot;http://java.sun.com/docs/books/jls/html/&quot;&gt;Java Language
 Specification&lt;/a&gt;: if this {@code BigDecimal} has too great a
 magnitude represent as a {@code double}, it will be
 converted to {@link Double#NEGATIVE_INFINITY} or {@link
 Double#POSITIVE_INFINITY} as appropriate.  Note that even when
 the return value is finite, this conversion can lose
 information about the precision of the {@code BigDecimal}
 value.</description>
					<attribute name="@return">
						<description>this {@code BigDecimal} converted to a {@code double}.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="ulp" returncomment="the size of an ulp of {@code this}" fulltype="java.math.BigDecimal" type="BigDecimal">
				<comment>
					<description>Returns the size of an ulp, a unit in the last place, of this
 {@code BigDecimal}.  An ulp of a nonzero {@code BigDecimal}
 value is the positive distance between this value and the
 {@code BigDecimal} value next larger in magnitude with the
 same number of digits.  An ulp of a zero value is numerically
 equal to 1 with the scale of {@code this}.  The result is
 stored with the same scale as {@code this} so the result
 for zero and nonzero values is equal to {@code [1,
 this.scale()]}.</description>
					<attribute name="@return">
						<description>the size of an ulp of {@code this}</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method visibility="private" name="layoutChars" returncomment="string with canonical string representation of this
         {@code BigDecimal}" fulltype="java.lang.String" type="String">
				<comment>
					<description>Lay out this {@code BigDecimal} into a {@code char[]} array.
 The Java 1.2 equivalent to this was called {@code getValueString}.</description>
					<attribute name="@param">
						<description>sci {@code true} for Scientific exponential notation;
          {@code false} for Engineering</description>
					</attribute>
					<attribute name="@return">
						<description>string with canonical string representation of this
         {@code BigDecimal}</description>
					</attribute>
				</comment>
				<params>
					<param name="sci" comment="{@code true} for Scientific exponential notation;
          {@code false} for Engineering" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="private" name="bigTenToThe" returncomment="a {@code BigInteger} with the value (10&lt;sup&gt;n&lt;/sup&gt;)" fulltype="java.math.BigInteger" type="BigInteger">
				<comment>
					<description>Return 10 to the power n, as a {@code BigInteger}.</description>
					<attribute name="@param">
						<description>n the power of ten to be returned (&gt;=0)</description>
					</attribute>
					<attribute name="@return">
						<description>a {@code BigInteger} with the value (10&lt;sup&gt;n&lt;/sup&gt;)</description>
					</attribute>
				</comment>
				<params>
					<param name="n" comment="the power of ten to be returned (&gt;=0)" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="private" name="expandBigIntegerTenPowers" returncomment="a {@code BigDecimal} with the value (10&lt;sup&gt;n&lt;/sup&gt;) and
         in the meantime, the BIG_TEN_POWERS_TABLE array gets
         expanded to the size greater than n." fulltype="java.math.BigInteger" type="BigInteger">
				<comment>
					<description>Expand the BIG_TEN_POWERS_TABLE array to contain at least 10**n.</description>
					<attribute name="@param">
						<description>n the power of ten to be returned (&gt;=0)</description>
					</attribute>
					<attribute name="@return">
						<description>a {@code BigDecimal} with the value (10&lt;sup&gt;n&lt;/sup&gt;) and
         in the meantime, the BIG_TEN_POWERS_TABLE array gets
         expanded to the size greater than n.</description>
					</attribute>
				</comment>
				<params>
					<param name="n" comment="the power of ten to be returned (&gt;=0)" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="private" name="longMultiplyPowerTen" fulltype="long" type="long">
				<comment>
					<description>Compute val * 10 ^ n; return this product if it is
 representable as a long, INFLATED otherwise.</description>
				</comment>
				<params>
					<param name="val" fulltype="long" type="long" />
					<param name="n" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="private" name="bigMultiplyPowerTen" fulltype="java.math.BigInteger" type="BigInteger">
				<comment>
					<description>Compute this * 10 ^ n.
 Needed mainly to allow special casing to trap zero value</description>
				</comment>
				<params>
					<param name="n" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="private" name="inflate" fulltype="java.math.BigInteger" type="BigInteger">
				<comment>
					<description>Assign appropriate BigInteger to intVal field if intVal is
 null, i.e. the compact representation is in use.</description>
				</comment>
			</method>
			<method static="true" visibility="private" name="matchScale" fulltype="void" type="void">
				<comment>
					<description>Match the scales of two {@code BigDecimal}s to align their
 least significant digits.

 &lt;p&gt;If the scales of val[0] and val[1] differ, rescale
 (non-destructively) the lower-scaled {@code BigDecimal} so
 they match.  That is, the lower-scaled reference will be
 replaced by a reference to a new object with the same scale as
 the other {@code BigDecimal}.</description>
					<attribute name="@param">
						<description>val array of two elements referring to the two
         {@code BigDecimal}s to be aligned.</description>
					</attribute>
				</comment>
				<params>
					<param name="val" comment="array of two elements referring to the two
         {@code BigDecimal}s to be aligned." fulltype="java.math.BigDecimal[]" type="BigDecimal" />
				</params>
			</method>
			<method visibility="private" name="readObject" fulltype="void" type="void">
				<comment>
					<description>Reconstitute the {@code BigDecimal} instance from a stream (that is,
 deserialize it).</description>
					<attribute name="@param">
						<description>s the stream being read.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the stream being read." fulltype="java.io.ObjectInputStream" type="ObjectInputStream" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
					<exception fulltype="java.lang.ClassNotFoundException" type="ClassNotFoundException" />
				</exceptions>
			</method>
			<method visibility="private" name="writeObject" fulltype="void" type="void">
				<comment>
					<description>Serialize this {@code BigDecimal} to the stream in question</description>
					<attribute name="@param">
						<description>s the stream to serialize to.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the stream to serialize to." fulltype="java.io.ObjectOutputStream" type="ObjectOutputStream" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method static="true" visibility="private" name="longDigitLength" returncomment="the length of the unscaled value, in deciaml digits." fulltype="int" type="int">
				<comment>
					<description>Returns the length of the absolute value of a {@code long}, in decimal
 digits.</description>
					<attribute name="@param">
						<description>x the {@code long}</description>
					</attribute>
					<attribute name="@return">
						<description>the length of the unscaled value, in deciaml digits.</description>
					</attribute>
				</comment>
				<params>
					<param name="x" comment="the {@code long}" fulltype="long" type="long" />
				</params>
			</method>
			<method static="true" visibility="private" name="bigDigitLength" returncomment="the length of the unscaled value, in decimal digits" fulltype="int" type="int">
				<comment>
					<description>Returns the length of the absolute value of a BigInteger, in
 decimal digits.</description>
					<attribute name="@param">
						<description>b the BigInteger</description>
					</attribute>
					<attribute name="@return">
						<description>the length of the unscaled value, in decimal digits</description>
					</attribute>
				</comment>
				<params>
					<param name="b" comment="the BigInteger" fulltype="java.math.BigInteger" type="BigInteger" />
				</params>
			</method>
			<method visibility="private" name="stripZerosToMatchScale" returncomment="this {@code BigDecimal} with a scale possibly reduced
 to be closed to the preferred scale." fulltype="java.math.BigDecimal" type="BigDecimal">
				<comment>
					<description>Remove insignificant trailing zeros from this
 {@code BigDecimal} until the preferred scale is reached or no
 more zeros can be removed.  If the preferred scale is less than
 Integer.MIN_VALUE, all the trailing zeros will be removed.

 {@code BigInteger} assistance could help, here?

 &lt;p&gt;WARNING: This method should only be called on new objects as
 it mutates the value fields.</description>
					<attribute name="@return">
						<description>this {@code BigDecimal} with a scale possibly reduced
 to be closed to the preferred scale.</description>
					</attribute>
				</comment>
				<params>
					<param name="preferredScale" fulltype="long" type="long" />
				</params>
			</method>
			<method visibility="private" name="checkScale" returncomment="validated scale as an int." fulltype="int" type="int">
				<comment>
					<description>Check a scale for Underflow or Overflow.  If this BigDecimal is
 nonzero, throw an exception if the scale is outof range. If this
 is zero, saturate the scale to the extreme value of the right
 sign if the scale is out of range.</description>
					<attribute name="@param">
						<description>val The new scale.</description>
					</attribute>
					<attribute name="@throws">
						<description>ArithmeticException (overflow or underflow) if the new
         scale is out of range.</description>
					</attribute>
					<attribute name="@return">
						<description>validated scale as an int.</description>
					</attribute>
				</comment>
				<params>
					<param name="val" comment="The new scale." fulltype="long" type="long" />
				</params>
			</method>
			<method visibility="private" name="roundOp" fulltype="java.math.BigDecimal" type="BigDecimal">
				<comment>
					<description>Round an operand; used only if digits &amp;gt; 0.  Does not change
 {@code this}; if rounding is needed a new {@code BigDecimal}
 is created and returned.</description>
					<attribute name="@param">
						<description>mc the context to use.</description>
					</attribute>
					<attribute name="@throws">
						<description>ArithmeticException if the result is inexact but the
         rounding mode is {@code UNNECESSARY}.</description>
					</attribute>
				</comment>
				<params>
					<param name="mc" comment="the context to use." fulltype="java.math.MathContext" type="MathContext" />
				</params>
			</method>
			<method visibility="private" name="roundThis" fulltype="void" type="void">
				<comment>
					<description>Round this BigDecimal according to the MathContext settings;
  used only if precision {@literal &gt;} 0.

 &lt;p&gt;WARNING: This method should only be called on new objects as
 it mutates the value fields.</description>
					<attribute name="@param">
						<description>mc the context to use.</description>
					</attribute>
					<attribute name="@throws">
						<description>ArithmeticException if the rounding mode is
         {@code RoundingMode.UNNECESSARY} and the
         {@code BigDecimal} operation would require rounding.</description>
					</attribute>
				</comment>
				<params>
					<param name="mc" comment="the context to use." fulltype="java.math.MathContext" type="MathContext" />
				</params>
			</method>
			<method static="true" visibility="private" name="doRound" returncomment="a {@code BigDecimal} rounded according to the MathContext
         settings.  May return this, if no rounding needed." fulltype="java.math.BigDecimal" type="BigDecimal">
				<comment>
					<description>Returns a {@code BigDecimal} rounded according to the
 MathContext settings; used only if {@code mc.precision &gt; 0}.
 Does not change {@code this}; if rounding is needed a new
 {@code BigDecimal} is created and returned.</description>
					<attribute name="@param">
						<description>mc the context to use.</description>
					</attribute>
					<attribute name="@return">
						<description>a {@code BigDecimal} rounded according to the MathContext
         settings.  May return this, if no rounding needed.</description>
					</attribute>
					<attribute name="@throws">
						<description>ArithmeticException if the rounding mode is
         {@code RoundingMode.UNNECESSARY} and the
         result is inexact.</description>
					</attribute>
				</comment>
				<params>
					<param name="d" fulltype="java.math.BigDecimal" type="BigDecimal" />
					<param name="mc" comment="the context to use." fulltype="java.math.MathContext" type="MathContext" />
				</params>
			</method>
			<method static="true" visibility="private" name="compactValFor" fulltype="long" type="long">
				<comment>
					<description>Returns the compact value for given {@code BigInteger}, or
 INFLATED if too big. Relies on internal representation of
 {@code BigInteger}.</description>
				</comment>
				<params>
					<param name="b" fulltype="java.math.BigInteger" type="BigInteger" />
				</params>
			</method>
			<method static="true" visibility="private" name="longCompareMagnitude" fulltype="int" type="int">
				<params>
					<param name="x" fulltype="long" type="long" />
					<param name="y" fulltype="long" type="long" />
				</params>
			</method>
			<method static="true" visibility="private" name="saturateLong" fulltype="int" type="int">
				<params>
					<param name="s" fulltype="long" type="long" />
				</params>
			</method>
			<method static="true" visibility="private" name="print" fulltype="void" type="void">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="bd" fulltype="java.math.BigDecimal" type="BigDecimal" />
				</params>
			</method>
			<method visibility="private" name="audit" fulltype="java.math.BigDecimal" type="BigDecimal">
				<comment>
					<description>Check internal invariants of this BigDecimal.  These invariants
 include:

 &lt;ul&gt;

 &lt;li&gt;The object must be initialized; either intCompact must not be
 INFLATED or intVal is non-null.  Both of these conditions may
 be true.

 &lt;li&gt;If both intCompact and intVal and set, their values must be
 consistent.

 &lt;li&gt;If precision is nonzero, it must have the right value.
 &lt;/ul&gt;

 Note: Since this is an audit method, we are not supposed to change the
 state of this BigDecimal object.</description>
				</comment>
			</method>
		</methods>
		<jelclass superclass="Object" visibility="private" package="java.math" superclassfulltype="java.lang.Object" fulltype="java.math.BigDecimal.LongOverflow" type="BigDecimal.LongOverflow">
			<fields>
				<field final="true" static="true" visibility="private" name="LONGMIN" fulltype="java.math.BigInteger" type="BigInteger">
					<comment>
						<description>BigInteger equal to Long.MIN_VALUE.</description>
					</comment>
				</field>
				<field final="true" static="true" visibility="private" name="LONGMAX" fulltype="java.math.BigInteger" type="BigInteger">
					<comment>
						<description>BigInteger equal to Long.MAX_VALUE.</description>
					</comment>
				</field>
			</fields>
			<methods>
				<constructor visibility="private" name="BigDecimal.LongOverflow" />
				<method static="true" visibility="public" name="check" fulltype="void" type="void">
					<params>
						<param name="num" fulltype="java.math.BigDecimal" type="BigDecimal" />
					</params>
				</method>
			</methods>
		</jelclass>
		<jelclass superclass="Object" visibility="package-private" package="java.math" superclassfulltype="java.lang.Object" fulltype="java.math.BigDecimal.StringBuilderHelper" type="BigDecimal.StringBuilderHelper">
			<fields>
				<field final="true" visibility="package-private" name="sb" fulltype="java.lang.StringBuilder" type="StringBuilder" />
				<field final="true" visibility="package-private" name="cmpCharArray" fulltype="char[]" type="char" />
				<field final="true" static="true" visibility="package-private" name="DIGIT_TENS" fulltype="char[]" type="char" />
				<field final="true" static="true" visibility="package-private" name="DIGIT_ONES" fulltype="char[]" type="char" />
			</fields>
			<methods>
				<constructor visibility="package-private" name="BigDecimal.StringBuilderHelper" />
				<method visibility="package-private" name="getStringBuilder" fulltype="java.lang.StringBuilder" type="StringBuilder" />
				<method visibility="package-private" name="getCompactCharArray" fulltype="char[]" type="char" />
				<method visibility="package-private" name="putIntCompact" returncomment="offset to the array where the representation starts.
 Note: intCompact must be greater or equal to zero." fulltype="int" type="int">
					<comment>
						<description>Places characters representing the intCompact in {@code long} into
 cmpCharArray and returns the offset to the array where the
 representation starts.</description>
						<attribute name="@param">
							<description>intCompact the number to put into the cmpCharArray.</description>
						</attribute>
						<attribute name="@return">
							<description>offset to the array where the representation starts.
 Note: intCompact must be greater or equal to zero.</description>
						</attribute>
					</comment>
					<params>
						<param name="intCompact" comment="the number to put into the cmpCharArray." fulltype="long" type="long" />
					</params>
				</method>
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="Object" visibility="private" package="java.math" superclassfulltype="java.lang.Object" fulltype="java.math.BigDecimal.LongOverflow" type="BigDecimal.LongOverflow">
		<fields>
			<field final="true" static="true" visibility="private" name="LONGMIN" fulltype="java.math.BigInteger" type="BigInteger">
				<comment>
					<description>BigInteger equal to Long.MIN_VALUE.</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="private" name="LONGMAX" fulltype="java.math.BigInteger" type="BigInteger">
				<comment>
					<description>BigInteger equal to Long.MAX_VALUE.</description>
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="private" name="BigDecimal.LongOverflow" />
			<method static="true" visibility="public" name="check" fulltype="void" type="void">
				<params>
					<param name="num" fulltype="java.math.BigDecimal" type="BigDecimal" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="package-private" package="java.math" superclassfulltype="java.lang.Object" fulltype="java.math.BigDecimal.StringBuilderHelper" type="BigDecimal.StringBuilderHelper">
		<fields>
			<field final="true" visibility="package-private" name="sb" fulltype="java.lang.StringBuilder" type="StringBuilder" />
			<field final="true" visibility="package-private" name="cmpCharArray" fulltype="char[]" type="char" />
			<field final="true" static="true" visibility="package-private" name="DIGIT_TENS" fulltype="char[]" type="char" />
			<field final="true" static="true" visibility="package-private" name="DIGIT_ONES" fulltype="char[]" type="char" />
		</fields>
		<methods>
			<constructor visibility="package-private" name="BigDecimal.StringBuilderHelper" />
			<method visibility="package-private" name="getStringBuilder" fulltype="java.lang.StringBuilder" type="StringBuilder" />
			<method visibility="package-private" name="getCompactCharArray" fulltype="char[]" type="char" />
			<method visibility="package-private" name="putIntCompact" returncomment="offset to the array where the representation starts.
 Note: intCompact must be greater or equal to zero." fulltype="int" type="int">
				<comment>
					<description>Places characters representing the intCompact in {@code long} into
 cmpCharArray and returns the offset to the array where the
 representation starts.</description>
					<attribute name="@param">
						<description>intCompact the number to put into the cmpCharArray.</description>
					</attribute>
					<attribute name="@return">
						<description>offset to the array where the representation starts.
 Note: intCompact must be greater or equal to zero.</description>
					</attribute>
				</comment>
				<params>
					<param name="intCompact" comment="the number to put into the cmpCharArray." fulltype="long" type="long" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass final="true" superclass="Object" visibility="public" package="java.math" serializable="true" superclassfulltype="java.lang.Object" fulltype="java.math.MathContext" type="MathContext">
		<implements>
			<interface fulltype="java.io.Serializable" type="Serializable" />
		</implements>
		<comment>
			<description>Immutable objects which encapsulate the context settings which
 describe certain rules for numerical operators, such as those
 implemented by the {@link BigDecimal} class.

 &lt;p&gt;The base-independent settings are:
 &lt;ol&gt;
 &lt;li&gt;{@code precision}:
 the number of digits to be used for an operation; results are
 rounded to this precision

 &lt;li&gt;{@code roundingMode}:
 a {@link RoundingMode} object which specifies the algorithm to be
 used for rounding.
 &lt;/ol&gt;</description>
			<attribute name="@see">
				<description>BigDecimal</description>
			</attribute>
			<attribute name="@see">
				<description>RoundingMode</description>
			</attribute>
			<attribute name="@author">
				<description>Mike Cowlishaw</description>
			</attribute>
			<attribute name="@author">
				<description>Joseph D. Darcy</description>
			</attribute>
			<attribute name="@since">
				<description>1.5</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="9" visibility="private" name="DEFAULT_DIGITS" constexpr="9" fulltype="int" type="int" />
			<field final="true" static="true" visibility="private" name="DEFAULT_ROUNDINGMODE" fulltype="java.math.RoundingMode" type="RoundingMode" />
			<field final="true" static="true" const="0" visibility="private" name="MIN_DIGITS" constexpr="0" fulltype="int" type="int" />
			<field final="true" static="true" const="5579720004786848255" visibility="private" name="serialVersionUID" constexpr="5579720004786848255L" fulltype="long" type="long" />
			<field final="true" static="true" visibility="public" name="UNLIMITED" fulltype="java.math.MathContext" type="MathContext">
				<comment>
					<description>A {@code MathContext} object whose settings have the values
  required for unlimited precision arithmetic.
  The values of the settings are:
  &lt;code&gt;
  precision=0 roundingMode=HALF_UP
  &lt;/code&gt;</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="DECIMAL32" fulltype="java.math.MathContext" type="MathContext">
				<comment>
					<description>A {@code MathContext} object with a precision setting
  matching the IEEE 754R Decimal32 format, 7 digits, and a
  rounding mode of {@link RoundingMode#HALF_EVEN HALF_EVEN}, the
  IEEE 754R default.</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="DECIMAL64" fulltype="java.math.MathContext" type="MathContext">
				<comment>
					<description>A {@code MathContext} object with a precision setting
  matching the IEEE 754R Decimal64 format, 16 digits, and a
  rounding mode of {@link RoundingMode#HALF_EVEN HALF_EVEN}, the
  IEEE 754R default.</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="DECIMAL128" fulltype="java.math.MathContext" type="MathContext">
				<comment>
					<description>A {@code MathContext} object with a precision setting
  matching the IEEE 754R Decimal128 format, 34 digits, and a
  rounding mode of {@link RoundingMode#HALF_EVEN HALF_EVEN}, the
  IEEE 754R default.</description>
				</comment>
			</field>
			<field final="true" visibility="package-private" name="precision" fulltype="int" type="int">
				<comment>
					<description>The number of digits to be used for an operation.  A value of 0
 indicates that unlimited precision (as many digits as are
 required) will be used.  Note that leading zeros (in the
 coefficient of a number) are never significant.

 &lt;p&gt;{@code precision} will always be non-negative.</description>
					<attribute name="@serial" />
				</comment>
			</field>
			<field final="true" visibility="package-private" name="roundingMode" fulltype="java.math.RoundingMode" type="RoundingMode">
				<comment>
					<description>The rounding algorithm to be used for an operation.</description>
					<attribute name="@see">
						<description>RoundingMode</description>
					</attribute>
					<attribute name="@serial" />
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="public" name="MathContext">
				<comment>
					<description>Constructs a new {@code MathContext} with the specified
 precision and the {@link RoundingMode#HALF_UP HALF_UP} rounding
 mode.</description>
					<attribute name="@param">
						<description>setPrecision The non-negative {@code int} precision setting.</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalArgumentException if the {@code setPrecision} parameter is less
         than zero.</description>
					</attribute>
				</comment>
				<params>
					<param name="setPrecision" comment="The non-negative {@code int} precision setting." fulltype="int" type="int" />
				</params>
			</constructor>
			<constructor visibility="public" name="MathContext">
				<comment>
					<description>Constructs a new {@code MathContext} with a specified
 precision and rounding mode.</description>
					<attribute name="@param">
						<description>setPrecision The non-negative {@code int} precision setting.</description>
					</attribute>
					<attribute name="@param">
						<description>setRoundingMode The rounding mode to use.</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalArgumentException if the {@code setPrecision} parameter is less
         than zero.</description>
					</attribute>
					<attribute name="@throws">
						<description>NullPointerException if the rounding mode argument is {@code null}</description>
					</attribute>
				</comment>
				<params>
					<param name="setPrecision" comment="The non-negative {@code int} precision setting." fulltype="int" type="int" />
					<param name="setRoundingMode" comment="The rounding mode to use." fulltype="java.math.RoundingMode" type="RoundingMode" />
				</params>
			</constructor>
			<constructor visibility="public" name="MathContext">
				<comment>
					<description>Constructs a new {@code MathContext} from a string.

 The string must be in the same format as that produced by the
 {@link #toString} method.

 &lt;p&gt;An {@code IllegalArgumentException} is thrown if the precision
 section of the string is out of range ({@code &lt; 0}) or the string is
 not in the format created by the {@link #toString} method.</description>
					<attribute name="@param">
						<description>val The string to be parsed</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalArgumentException if the precision section is out of range
 or of incorrect format</description>
					</attribute>
					<attribute name="@throws">
						<description>NullPointerException if the argument is {@code null}</description>
					</attribute>
				</comment>
				<params>
					<param name="val" comment="The string to be parsed" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="getPrecision" returncomment="an {@code int} which is the value of the {@code precision}
         setting" fulltype="int" type="int">
				<comment>
					<description>Returns the {@code precision} setting.
 This value is always non-negative.</description>
					<attribute name="@return">
						<description>an {@code int} which is the value of the {@code precision}
         setting</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getRoundingMode" returncomment="a {@code RoundingMode} object which is the value of the
         {@code roundingMode} setting" fulltype="java.math.RoundingMode" type="RoundingMode">
				<comment>
					<description>Returns the roundingMode setting.
 This will be one of
 {@link  RoundingMode#CEILING},
 {@link  RoundingMode#DOWN},
 {@link  RoundingMode#FLOOR},
 {@link  RoundingMode#HALF_DOWN},
 {@link  RoundingMode#HALF_EVEN},
 {@link  RoundingMode#HALF_UP},
 {@link  RoundingMode#UNNECESSARY}, or
 {@link  RoundingMode#UP}.</description>
					<attribute name="@return">
						<description>a {@code RoundingMode} object which is the value of the
         {@code roundingMode} setting</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="equals" returncomment="{@code true} if and only if the specified {@code Object} is
         a {@code MathContext} object which has exactly the same
         settings as this object" fulltype="boolean" type="boolean">
				<comment>
					<description>Compares this {@code MathContext} with the specified
 {@code Object} for equality.</description>
					<attribute name="@param">
						<description>x {@code Object} to which this {@code MathContext} is to
         be compared.</description>
					</attribute>
					<attribute name="@return">
						<description>{@code true} if and only if the specified {@code Object} is
         a {@code MathContext} object which has exactly the same
         settings as this object</description>
					</attribute>
				</comment>
				<params>
					<param name="x" comment="{@code Object} to which this {@code MathContext} is to
         be compared." fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="hashCode" returncomment="hash code for this {@code MathContext}" fulltype="int" type="int">
				<comment>
					<description>Returns the hash code for this {@code MathContext}.</description>
					<attribute name="@return">
						<description>hash code for this {@code MathContext}</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="toString" returncomment="a {@code String} representing the context settings" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the string representation of this {@code MathContext}.
 The {@code String} returned represents the settings of the
 {@code MathContext} object as two space-delimited words
 (separated by a single space character, &lt;tt&gt;&apos;&amp;#92;u0020&apos;&lt;/tt&gt;,
 and with no leading or trailing white space), as follows:
 &lt;ol&gt;
 &lt;li&gt;
 The string {@code &quot;precision=&quot;}, immediately followed
 by the value of the precision setting as a numeric string as if
 generated by the {@link Integer#toString(int) Integer.toString}
 method.

 &lt;li&gt;
 The string {@code &quot;roundingMode=&quot;}, immediately
 followed by the value of the {@code roundingMode} setting as a
 word.  This word will be the same as the name of the
 corresponding public constant in the {@link RoundingMode}
 enum.
 &lt;/ol&gt;
 &lt;p&gt;
 For example:
 &lt;pre&gt;
 precision=9 roundingMode=HALF_UP
 &lt;/pre&gt;

 Additional words may be appended to the result of
 {@code toString} in the future if more properties are added to
 this class.</description>
					<attribute name="@return">
						<description>a {@code String} representing the context settings</description>
					</attribute>
				</comment>
			</method>
			<method visibility="private" name="readObject" fulltype="void" type="void">
				<comment>
					<description>Reconstitute the {@code MathContext} instance from a stream (that is,
 deserialize it).</description>
					<attribute name="@param">
						<description>s the stream being read.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the stream being read." fulltype="java.io.ObjectInputStream" type="ObjectInputStream" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
					<exception fulltype="java.lang.ClassNotFoundException" type="ClassNotFoundException" />
				</exceptions>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="package-private" package="java.math" superclassfulltype="java.lang.Object" fulltype="java.math.MutableBigInteger" type="MutableBigInteger">
		<fields>
			<field visibility="package-private" name="value" fulltype="int[]" type="int">
				<comment>
					<description>Holds the magnitude of this MutableBigInteger in big endian order.
 The magnitude may start at an offset into the value array, and it may
 end before the length of the value array.</description>
				</comment>
			</field>
			<field visibility="package-private" name="intLen" fulltype="int" type="int">
				<comment>
					<description>The number of ints of the value array that are currently used
 to hold the magnitude of this MutableBigInteger. The magnitude starts
 at an offset and offset + intLen may be less than value.length.</description>
				</comment>
			</field>
			<field visibility="package-private" name="offset" fulltype="int" type="int">
				<comment>
					<description>The offset into the value array where the magnitude of this
 MutableBigInteger begins.</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="package-private" name="ONE" fulltype="java.math.MutableBigInteger" type="MutableBigInteger">
				<comment>
					<description>MutableBigInteger with one element value array with the value 1. Used by
 BigDecimal divideAndRound to increment the quotient. Use this constant
 only when the method is not going to modify this object.</description>
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="package-private" name="MutableBigInteger">
				<comment>
					<description>The default constructor. An empty MutableBigInteger is created with
 a one word capacity.</description>
				</comment>
			</constructor>
			<constructor visibility="package-private" name="MutableBigInteger">
				<comment>
					<description>Construct a new MutableBigInteger with a magnitude specified by
 the int val.</description>
				</comment>
				<params>
					<param name="val" fulltype="int" type="int" />
				</params>
			</constructor>
			<constructor visibility="package-private" name="MutableBigInteger">
				<comment>
					<description>Construct a new MutableBigInteger with the specified value array
 up to the length of the array supplied.</description>
				</comment>
				<params>
					<param name="val" fulltype="int[]" type="int" />
				</params>
			</constructor>
			<constructor visibility="package-private" name="MutableBigInteger">
				<comment>
					<description>Construct a new MutableBigInteger with a magnitude equal to the
 specified BigInteger.</description>
				</comment>
				<params>
					<param name="b" fulltype="java.math.BigInteger" type="BigInteger" />
				</params>
			</constructor>
			<constructor visibility="package-private" name="MutableBigInteger">
				<comment>
					<description>Construct a new MutableBigInteger with a magnitude equal to the
 specified MutableBigInteger.</description>
				</comment>
				<params>
					<param name="val" fulltype="java.math.MutableBigInteger" type="MutableBigInteger" />
				</params>
			</constructor>
			<method visibility="private" name="getMagnitudeArray" fulltype="int[]" type="int">
				<comment>
					<description>Internal helper method to return the magnitude array. The caller is not
 supposed to modify the returned array.</description>
				</comment>
			</method>
			<method visibility="private" name="toLong" fulltype="long" type="long">
				<comment>
					<description>Convert this MutableBigInteger to a long value. The caller has to make
 sure this MutableBigInteger can be fit into long.</description>
				</comment>
			</method>
			<method visibility="package-private" name="toBigInteger" fulltype="java.math.BigInteger" type="BigInteger">
				<comment>
					<description>Convert this MutableBigInteger to a BigInteger object.</description>
				</comment>
				<params>
					<param name="sign" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="package-private" name="toBigDecimal" fulltype="java.math.BigDecimal" type="BigDecimal">
				<comment>
					<description>Convert this MutableBigInteger to BigDecimal object with the specified sign
 and scale.</description>
				</comment>
				<params>
					<param name="sign" fulltype="int" type="int" />
					<param name="scale" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="package-private" name="clear" fulltype="void" type="void">
				<comment>
					<description>Clear out a MutableBigInteger for reuse.</description>
				</comment>
			</method>
			<method visibility="package-private" name="reset" fulltype="void" type="void">
				<comment>
					<description>Set a MutableBigInteger to zero, removing its offset.</description>
				</comment>
			</method>
			<method final="true" visibility="package-private" name="compare" fulltype="int" type="int">
				<comment>
					<description>Compare the magnitude of two MutableBigIntegers. Returns -1, 0 or 1
 as this MutableBigInteger is numerically less than, equal to, or
 greater than &lt;tt&gt;b&lt;/tt&gt;.</description>
				</comment>
				<params>
					<param name="b" fulltype="java.math.MutableBigInteger" type="MutableBigInteger" />
				</params>
			</method>
			<method final="true" visibility="package-private" name="compareHalf" fulltype="int" type="int">
				<comment>
					<description>Compare this against half of a MutableBigInteger object (Needed for
 remainder tests).
 Assumes no leading unnecessary zeros, which holds for results
 from divide().</description>
				</comment>
				<params>
					<param name="b" fulltype="java.math.MutableBigInteger" type="MutableBigInteger" />
				</params>
			</method>
			<method final="true" visibility="private" name="getLowestSetBit" fulltype="int" type="int">
				<comment>
					<description>Return the index of the lowest set bit in this MutableBigInteger. If the
 magnitude of this MutableBigInteger is zero, -1 is returned.</description>
				</comment>
			</method>
			<method final="true" visibility="private" name="getInt" fulltype="int" type="int">
				<comment>
					<description>Return the int in use in this MutableBigInteger at the specified
 index. This method is not used because it is not inlined on all
 platforms.</description>
				</comment>
				<params>
					<param name="index" fulltype="int" type="int" />
				</params>
			</method>
			<method final="true" visibility="private" name="getLong" fulltype="long" type="long">
				<comment>
					<description>Return a long which is equal to the unsigned value of the int in
 use in this MutableBigInteger at the specified index. This method is
 not used because it is not inlined on all platforms.</description>
				</comment>
				<params>
					<param name="index" fulltype="int" type="int" />
				</params>
			</method>
			<method final="true" visibility="package-private" name="normalize" fulltype="void" type="void">
				<comment>
					<description>Ensure that the MutableBigInteger is in normal form, specifically
 making sure that there are no leading zeros, and that if the
 magnitude is zero, then intLen is zero.</description>
				</comment>
			</method>
			<method final="true" visibility="private" name="ensureCapacity" fulltype="void" type="void">
				<comment>
					<description>If this MutableBigInteger cannot hold len words, increase the size
 of the value array to len words.</description>
				</comment>
				<params>
					<param name="len" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="package-private" name="toIntArray" fulltype="int[]" type="int">
				<comment>
					<description>Convert this MutableBigInteger into an int array with no leading
 zeros, of a length that is equal to this MutableBigInteger&apos;s intLen.</description>
				</comment>
			</method>
			<method visibility="package-private" name="setInt" fulltype="void" type="void">
				<comment>
					<description>Sets the int at index+offset in this MutableBigInteger to val.
 This does not get inlined on all platforms so it is not used
 as often as originally intended.</description>
				</comment>
				<params>
					<param name="index" fulltype="int" type="int" />
					<param name="val" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="package-private" name="setValue" fulltype="void" type="void">
				<comment>
					<description>Sets this MutableBigInteger&apos;s value array to the specified array.
 The intLen is set to the specified length.</description>
				</comment>
				<params>
					<param name="val" fulltype="int[]" type="int" />
					<param name="length" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="package-private" name="copyValue" fulltype="void" type="void">
				<comment>
					<description>Sets this MutableBigInteger&apos;s value array to a copy of the specified
 array. The intLen is set to the length of the new array.</description>
				</comment>
				<params>
					<param name="src" fulltype="java.math.MutableBigInteger" type="MutableBigInteger" />
				</params>
			</method>
			<method visibility="package-private" name="copyValue" fulltype="void" type="void">
				<comment>
					<description>Sets this MutableBigInteger&apos;s value array to a copy of the specified
 array. The intLen is set to the length of the specified array.</description>
				</comment>
				<params>
					<param name="val" fulltype="int[]" type="int" />
				</params>
			</method>
			<method visibility="package-private" name="isOne" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true iff this MutableBigInteger has a value of one.</description>
				</comment>
			</method>
			<method visibility="package-private" name="isZero" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true iff this MutableBigInteger has a value of zero.</description>
				</comment>
			</method>
			<method visibility="package-private" name="isEven" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true iff this MutableBigInteger is even.</description>
				</comment>
			</method>
			<method visibility="package-private" name="isOdd" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true iff this MutableBigInteger is odd.</description>
				</comment>
			</method>
			<method visibility="package-private" name="isNormal" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true iff this MutableBigInteger is in normal form. A
 MutableBigInteger is in normal form if it has no leading zeros
 after the offset, and intLen + offset &lt;= value.length.</description>
				</comment>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a String representation of this MutableBigInteger in radix 10.</description>
				</comment>
			</method>
			<method visibility="package-private" name="rightShift" fulltype="void" type="void">
				<comment>
					<description>Right shift this MutableBigInteger n bits. The MutableBigInteger is left
 in normal form.</description>
				</comment>
				<params>
					<param name="n" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="package-private" name="leftShift" fulltype="void" type="void">
				<comment>
					<description>Left shift this MutableBigInteger n bits.</description>
				</comment>
				<params>
					<param name="n" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="private" name="divadd" fulltype="int" type="int">
				<comment>
					<description>A primitive used for division. This method adds in one multiple of the
 divisor a back to the dividend result at a specified offset. It is used
 when qhat was estimated too large, and must be adjusted.</description>
				</comment>
				<params>
					<param name="a" fulltype="int[]" type="int" />
					<param name="result" fulltype="int[]" type="int" />
					<param name="offset" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="private" name="mulsub" fulltype="int" type="int">
				<comment>
					<description>This method is used for division. It multiplies an n word input a by one
 word input x, and subtracts the n word product from q. This is needed
 when subtracting qhat*divisor from dividend.</description>
				</comment>
				<params>
					<param name="q" fulltype="int[]" type="int" />
					<param name="a" fulltype="int[]" type="int" />
					<param name="x" fulltype="int" type="int" />
					<param name="len" fulltype="int" type="int" />
					<param name="offset" fulltype="int" type="int" />
				</params>
			</method>
			<method final="true" visibility="private" name="primitiveRightShift" fulltype="void" type="void">
				<comment>
					<description>Right shift this MutableBigInteger n bits, where n is
 less than 32.
 Assumes that intLen &gt; 0, n &gt; 0 for speed</description>
				</comment>
				<params>
					<param name="n" fulltype="int" type="int" />
				</params>
			</method>
			<method final="true" visibility="private" name="primitiveLeftShift" fulltype="void" type="void">
				<comment>
					<description>Left shift this MutableBigInteger n bits, where n is
 less than 32.
 Assumes that intLen &gt; 0, n &gt; 0 for speed</description>
				</comment>
				<params>
					<param name="n" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="package-private" name="add" fulltype="void" type="void">
				<comment>
					<description>Adds the contents of two MutableBigInteger objects.The result
 is placed within this MutableBigInteger.
 The contents of the addend are not changed.</description>
				</comment>
				<params>
					<param name="addend" fulltype="java.math.MutableBigInteger" type="MutableBigInteger" />
				</params>
			</method>
			<method visibility="package-private" name="subtract" fulltype="int" type="int">
				<comment>
					<description>Subtracts the smaller of this and b from the larger and places the
 result into this MutableBigInteger.</description>
				</comment>
				<params>
					<param name="b" fulltype="java.math.MutableBigInteger" type="MutableBigInteger" />
				</params>
			</method>
			<method visibility="private" name="difference" fulltype="int" type="int">
				<comment>
					<description>Subtracts the smaller of a and b from the larger and places the result
 into the larger. Returns 1 if the answer is in a, -1 if in b, 0 if no
 operation was performed.</description>
				</comment>
				<params>
					<param name="b" fulltype="java.math.MutableBigInteger" type="MutableBigInteger" />
				</params>
			</method>
			<method visibility="package-private" name="multiply" fulltype="void" type="void">
				<comment>
					<description>Multiply the contents of two MutableBigInteger objects. The result is
 placed into MutableBigInteger z. The contents of y are not changed.</description>
				</comment>
				<params>
					<param name="y" fulltype="java.math.MutableBigInteger" type="MutableBigInteger" />
					<param name="z" fulltype="java.math.MutableBigInteger" type="MutableBigInteger" />
				</params>
			</method>
			<method visibility="package-private" name="mul" fulltype="void" type="void">
				<comment>
					<description>Multiply the contents of this MutableBigInteger by the word y. The
 result is placed into z.</description>
				</comment>
				<params>
					<param name="y" fulltype="int" type="int" />
					<param name="z" fulltype="java.math.MutableBigInteger" type="MutableBigInteger" />
				</params>
			</method>
			<method visibility="package-private" name="divideOneWord" returncomment="the remainder of the division is returned." fulltype="int" type="int">
				<comment>
					<description>This method is used for division of an n word dividend by a one word
 divisor. The quotient is placed into quotient. The one word divisor is
 specified by divisor.</description>
					<attribute name="@return">
						<description>the remainder of the division is returned.</description>
					</attribute>
				</comment>
				<params>
					<param name="divisor" fulltype="int" type="int" />
					<param name="quotient" fulltype="java.math.MutableBigInteger" type="MutableBigInteger" />
				</params>
			</method>
			<method visibility="package-private" name="divide" fulltype="java.math.MutableBigInteger" type="MutableBigInteger">
				<comment>
					<description>Calculates the quotient of this div b and places the quotient in the
 provided MutableBigInteger objects and the remainder object is returned.

 Uses Algorithm D in Knuth section 4.3.1.
 Many optimizations to that algorithm have been adapted from the Colin
 Plumb C library.
 It special cases one word divisors for speed. The content of b is not
 changed.</description>
				</comment>
				<params>
					<param name="b" fulltype="java.math.MutableBigInteger" type="MutableBigInteger" />
					<param name="quotient" fulltype="java.math.MutableBigInteger" type="MutableBigInteger" />
				</params>
			</method>
			<method visibility="package-private" name="divide" returncomment="the remainder of the division will be returned." fulltype="long" type="long">
				<comment>
					<description>Internally used  to calculate the quotient of this div v and places the
 quotient in the provided MutableBigInteger object and the remainder is
 returned.</description>
					<attribute name="@return">
						<description>the remainder of the division will be returned.</description>
					</attribute>
				</comment>
				<params>
					<param name="v" fulltype="long" type="long" />
					<param name="quotient" fulltype="java.math.MutableBigInteger" type="MutableBigInteger" />
				</params>
			</method>
			<method visibility="private" name="divideMagnitude" fulltype="java.math.MutableBigInteger" type="MutableBigInteger">
				<comment>
					<description>Divide this MutableBigInteger by the divisor represented by its magnitude
 array. The quotient will be placed into the provided quotient object &amp;
 the remainder object is returned.</description>
				</comment>
				<params>
					<param name="divisor" fulltype="int[]" type="int" />
					<param name="quotient" fulltype="java.math.MutableBigInteger" type="MutableBigInteger" />
				</params>
			</method>
			<method visibility="private" name="unsignedLongCompare" fulltype="boolean" type="boolean">
				<comment>
					<description>Compare two longs as if they were unsigned.
 Returns true iff one is bigger than two.</description>
				</comment>
				<params>
					<param name="one" fulltype="long" type="long" />
					<param name="two" fulltype="long" type="long" />
				</params>
			</method>
			<method visibility="private" name="divWord" fulltype="void" type="void">
				<comment>
					<description>This method divides a long quantity by an int to estimate
 qhat for two multi precision numbers. It is used when
 the signed value of n is less than zero.</description>
				</comment>
				<params>
					<param name="result" fulltype="int[]" type="int" />
					<param name="n" fulltype="long" type="long" />
					<param name="d" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="package-private" name="hybridGCD" fulltype="java.math.MutableBigInteger" type="MutableBigInteger">
				<comment>
					<description>Calculate GCD of this and b. This and b are changed by the computation.</description>
				</comment>
				<params>
					<param name="b" fulltype="java.math.MutableBigInteger" type="MutableBigInteger" />
				</params>
			</method>
			<method visibility="private" name="binaryGCD" fulltype="java.math.MutableBigInteger" type="MutableBigInteger">
				<comment>
					<description>Calculate GCD of this and v.
 Assumes that this and v are not zero.</description>
				</comment>
				<params>
					<param name="v" fulltype="java.math.MutableBigInteger" type="MutableBigInteger" />
				</params>
			</method>
			<method static="true" visibility="package-private" name="binaryGcd" fulltype="int" type="int">
				<comment>
					<description>Calculate GCD of a and b interpreted as unsigned integers.</description>
				</comment>
				<params>
					<param name="a" fulltype="int" type="int" />
					<param name="b" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="package-private" name="mutableModInverse" fulltype="java.math.MutableBigInteger" type="MutableBigInteger">
				<comment>
					<description>Returns the modInverse of this mod p. This and p are not affected by
 the operation.</description>
				</comment>
				<params>
					<param name="p" fulltype="java.math.MutableBigInteger" type="MutableBigInteger" />
				</params>
			</method>
			<method visibility="package-private" name="modInverseMP2" fulltype="java.math.MutableBigInteger" type="MutableBigInteger">
				<params>
					<param name="k" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="package-private" name="inverseMod32" fulltype="int" type="int">
				<params>
					<param name="val" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="package-private" name="modInverseBP2" fulltype="java.math.MutableBigInteger" type="MutableBigInteger">
				<params>
					<param name="mod" fulltype="java.math.MutableBigInteger" type="MutableBigInteger" />
					<param name="k" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="private" name="modInverse" fulltype="java.math.MutableBigInteger" type="MutableBigInteger">
				<comment>
					<description>Calculate the multiplicative inverse of this mod mod, where mod is odd.
 This and mod are not changed by the calculation.

 This method implements an algorithm due to Richard Schroeppel, that uses
 the same intermediate representation as Montgomery Reduction
 (&quot;Montgomery Form&quot;).  The algorithm is described in an unpublished
 manuscript entitled &quot;Fast Modular Reciprocals.&quot;</description>
				</comment>
				<params>
					<param name="mod" fulltype="java.math.MutableBigInteger" type="MutableBigInteger" />
				</params>
			</method>
			<method static="true" visibility="package-private" name="fixup" fulltype="java.math.MutableBigInteger" type="MutableBigInteger">
				<params>
					<param name="c" fulltype="java.math.MutableBigInteger" type="MutableBigInteger" />
					<param name="p" fulltype="java.math.MutableBigInteger" type="MutableBigInteger" />
					<param name="k" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="package-private" name="euclidModInverse" fulltype="java.math.MutableBigInteger" type="MutableBigInteger">
				<comment>
					<description>Uses the extended Euclidean algorithm to compute the modInverse of base
 mod a modulus that is a power of 2. The modulus is 2^k.</description>
				</comment>
				<params>
					<param name="k" fulltype="int" type="int" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="MutableBigInteger" visibility="package-private" package="java.math" superclassfulltype="java.math.MutableBigInteger" fulltype="java.math.SignedMutableBigInteger" type="SignedMutableBigInteger">
		<comment>
			<description>A class used to represent multiprecision integers that makes efficient
 use of allocated space by allowing a number to occupy only part of
 an array so that the arrays do not have to be reallocated as often.
 When performing an operation with many iterations the array used to
 hold a number is only increased when necessary and does not have to
 be the same size as the number it represents. A mutable number allows
 calculations to occur on the same number without having to create
 a new number for every step of the calculation as occurs with
 BigIntegers.

 Note that SignedMutableBigIntegers only support signed addition and
 subtraction. All other operations occur as with MutableBigIntegers.</description>
			<attribute name="@see">
				<description>BigInteger</description>
			</attribute>
			<attribute name="@author">
				<description>Michael McCloskey</description>
			</attribute>
			<attribute name="@since">
				<description>1.3</description>
			</attribute>
		</comment>
		<fields>
			<field visibility="package-private" name="sign" fulltype="int" type="int">
				<comment>
					<description>The sign of this MutableBigInteger.</description>
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="package-private" name="SignedMutableBigInteger">
				<comment>
					<description>The default constructor. An empty MutableBigInteger is created with
 a one word capacity.</description>
				</comment>
			</constructor>
			<constructor visibility="package-private" name="SignedMutableBigInteger">
				<comment>
					<description>Construct a new MutableBigInteger with a magnitude specified by
 the int val.</description>
				</comment>
				<params>
					<param name="val" fulltype="int" type="int" />
				</params>
			</constructor>
			<constructor visibility="package-private" name="SignedMutableBigInteger">
				<comment>
					<description>Construct a new MutableBigInteger with a magnitude equal to the
 specified MutableBigInteger.</description>
				</comment>
				<params>
					<param name="val" fulltype="java.math.MutableBigInteger" type="MutableBigInteger" />
				</params>
			</constructor>
			<method visibility="package-private" name="signedAdd" fulltype="void" type="void">
				<comment>
					<description>Signed addition built upon unsigned add and subtract.</description>
				</comment>
				<params>
					<param name="addend" fulltype="java.math.SignedMutableBigInteger" type="SignedMutableBigInteger" />
				</params>
			</method>
			<method visibility="package-private" name="signedAdd" fulltype="void" type="void">
				<comment>
					<description>Signed addition built upon unsigned add and subtract.</description>
				</comment>
				<params>
					<param name="addend" fulltype="java.math.MutableBigInteger" type="MutableBigInteger" />
				</params>
			</method>
			<method visibility="package-private" name="signedSubtract" fulltype="void" type="void">
				<comment>
					<description>Signed subtraction built upon unsigned add and subtract.</description>
				</comment>
				<params>
					<param name="addend" fulltype="java.math.SignedMutableBigInteger" type="SignedMutableBigInteger" />
				</params>
			</method>
			<method visibility="package-private" name="signedSubtract" fulltype="void" type="void">
				<comment>
					<description>Signed subtraction built upon unsigned add and subtract.</description>
				</comment>
				<params>
					<param name="addend" fulltype="java.math.MutableBigInteger" type="MutableBigInteger" />
				</params>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String">
				<comment>
					<description>Print out the first intLen ints of this MutableBigInteger&apos;s value
 array starting at offset.</description>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Number" visibility="public" package="java.math" serializable="true" superclassfulltype="java.lang.Number" fulltype="java.math.BigInteger" type="BigInteger">
		<implements>
			<interface fulltype="java.lang.Comparable" type="Comparable" />
		</implements>
		<comment>
			<description>Immutable arbitrary-precision integers.  All operations behave as if
 BigIntegers were represented in two&apos;s-complement notation (like Java&apos;s
 primitive integer types).  BigInteger provides analogues to all of Java&apos;s
 primitive integer operators, and all relevant methods from java.lang.Math.
 Additionally, BigInteger provides operations for modular arithmetic, GCD
 calculation, primality testing, prime generation, bit manipulation,
 and a few other miscellaneous operations.

 &lt;p&gt;Semantics of arithmetic operations exactly mimic those of Java&apos;s integer
 arithmetic operators, as defined in &lt;i&gt;The Java Language Specification&lt;/i&gt;.
 For example, division by zero throws an {@code ArithmeticException}, and
 division of a negative by a positive yields a negative (or zero) remainder.
 All of the details in the Spec concerning overflow are ignored, as
 BigIntegers are made as large as necessary to accommodate the results of an
 operation.

 &lt;p&gt;Semantics of shift operations extend those of Java&apos;s shift operators
 to allow for negative shift distances.  A right-shift with a negative
 shift distance results in a left shift, and vice-versa.  The unsigned
 right shift operator ({@code &gt;&gt;&gt;}) is omitted, as this operation makes
 little sense in combination with the &quot;infinite word size&quot; abstraction
 provided by this class.

 &lt;p&gt;Semantics of bitwise logical operations exactly mimic those of Java&apos;s
 bitwise integer operators.  The binary operators ({@code and},
 {@code or}, {@code xor}) implicitly perform sign extension on the shorter
 of the two operands prior to performing the operation.

 &lt;p&gt;Comparison operations perform signed integer comparisons, analogous to
 those performed by Java&apos;s relational and equality operators.

 &lt;p&gt;Modular arithmetic operations are provided to compute residues, perform
 exponentiation, and compute multiplicative inverses.  These methods always
 return a non-negative result, between {@code 0} and {@code (modulus - 1)},
 inclusive.

 &lt;p&gt;Bit operations operate on a single bit of the two&apos;s-complement
 representation of their operand.  If necessary, the operand is sign-
 extended so that it contains the designated bit.  None of the single-bit
 operations can produce a BigInteger with a different sign from the
 BigInteger being operated on, as they affect only a single bit, and the
 &quot;infinite word size&quot; abstraction provided by this class ensures that there
 are infinitely many &quot;virtual sign bits&quot; preceding each BigInteger.

 &lt;p&gt;For the sake of brevity and clarity, pseudo-code is used throughout the
 descriptions of BigInteger methods.  The pseudo-code expression
 {@code (i + j)} is shorthand for &quot;a BigInteger whose value is
 that of the BigInteger {@code i} plus that of the BigInteger {@code j}.&quot;
 The pseudo-code expression {@code (i == j)} is shorthand for
 &quot;{@code true} if and only if the BigInteger {@code i} represents the same
 value as the BigInteger {@code j}.&quot;  Other pseudo-code expressions are
 interpreted similarly.

 &lt;p&gt;All methods and constructors in this class throw
 {@code NullPointerException} when passed
 a null object reference for any input parameter.</description>
			<attribute name="@see">
				<description>BigDecimal</description>
			</attribute>
			<attribute name="@author">
				<description>Josh Bloch</description>
			</attribute>
			<attribute name="@author">
				<description>Michael McCloskey</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.1</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" visibility="package-private" name="signum" fulltype="int" type="int">
				<comment>
					<description>The signum of this BigInteger: -1 for negative, 0 for zero, or
 1 for positive.  Note that the BigInteger zero &lt;i&gt;must&lt;/i&gt; have
 a signum of 0.  This is necessary to ensures that there is exactly one
 representation for each BigInteger value.</description>
					<attribute name="@serial" />
				</comment>
			</field>
			<field final="true" visibility="package-private" name="mag" fulltype="int[]" type="int">
				<comment>
					<description>The magnitude of this BigInteger, in &lt;i&gt;big-endian&lt;/i&gt; order: the
 zeroth element of this array is the most-significant int of the
 magnitude.  The magnitude must be &quot;minimal&quot; in that the most-significant
 int ({@code mag[0]}) must be non-zero.  This is necessary to
 ensure that there is exactly one representation for each BigInteger
 value.  Note that this implies that the BigInteger zero has a
 zero-length mag array.</description>
				</comment>
			</field>
			<field visibility="private" name="bitCount" fulltype="int" type="int">
				<comment>
					<description>One plus the bitCount of this BigInteger. Zeros means unitialized.</description>
					<attribute name="@serial" />
					<attribute name="@see">
						<description>#bitCount</description>
					</attribute>
					<attribute name="@deprecated">
						<description>Deprecated since logical value is offset from stored
 value and correction factor is applied in accessor method.</description>
					</attribute>
				</comment>
			</field>
			<field visibility="private" name="bitLength" fulltype="int" type="int">
				<comment>
					<description>One plus the bitLength of this BigInteger. Zeros means unitialized.
 (either value is acceptable).</description>
					<attribute name="@serial" />
					<attribute name="@see">
						<description>#bitLength()</description>
					</attribute>
					<attribute name="@deprecated">
						<description>Deprecated since logical value is offset from stored
 value and correction factor is applied in accessor method.</description>
					</attribute>
				</comment>
			</field>
			<field visibility="private" name="lowestSetBit" fulltype="int" type="int">
				<comment>
					<description>Two plus the lowest set bit of this BigInteger, as returned by
 getLowestSetBit().</description>
					<attribute name="@serial" />
					<attribute name="@see">
						<description>#getLowestSetBit</description>
					</attribute>
					<attribute name="@deprecated">
						<description>Deprecated since logical value is offset from stored
 value and correction factor is applied in accessor method.</description>
					</attribute>
				</comment>
			</field>
			<field visibility="private" name="firstNonzeroIntNum" fulltype="int" type="int">
				<comment>
					<description>Two plus the index of the lowest-order int in the magnitude of this
 BigInteger that contains a nonzero int, or -2 (either value is acceptable).
 The least significant int has int-number 0, the next int in order of
 increasing significance has int-number 1, and so forth.</description>
					<attribute name="@deprecated">
						<description>Deprecated since logical value is offset from stored
 value and correction factor is applied in accessor method.</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="4294967295" visibility="package-private" name="LONG_MASK" constexpr="4294967295L" fulltype="long" type="long">
				<comment>
					<description>This mask is used to obtain the value of an int as if it were unsigned.</description>
				</comment>
			</field>
			<field static="true" visibility="private" name="bitsPerDigit" fulltype="long[]" type="long" />
			<field final="true" static="true" const="95" visibility="private" name="SMALL_PRIME_THRESHOLD" constexpr="95" fulltype="int" type="int" />
			<field final="true" static="true" const="100" visibility="private" name="DEFAULT_PRIME_CERTAINTY" constexpr="100" fulltype="int" type="int" />
			<field final="true" static="true" visibility="private" name="SMALL_PRIME_PRODUCT" fulltype="java.math.BigInteger" type="BigInteger" />
			<field volatile="true" static="true" visibility="private" name="staticRandom" fulltype="java.util.Random" type="Random" />
			<field final="true" static="true" const="16" visibility="private" name="MAX_CONSTANT" constexpr="16" fulltype="int" type="int">
				<comment>
					<description>Initialize static constant array when class is loaded.</description>
				</comment>
			</field>
			<field static="true" visibility="private" name="posConst" fulltype="java.math.BigInteger[]" type="BigInteger" />
			<field static="true" visibility="private" name="negConst" fulltype="java.math.BigInteger[]" type="BigInteger" />
			<field final="true" static="true" visibility="public" name="ZERO" fulltype="java.math.BigInteger" type="BigInteger">
				<comment>
					<description>The BigInteger constant zero.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="ONE" fulltype="java.math.BigInteger" type="BigInteger">
				<comment>
					<description>The BigInteger constant one.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="private" name="TWO" fulltype="java.math.BigInteger" type="BigInteger">
				<comment>
					<description>The BigInteger constant two.  (Not exported.)</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="TEN" fulltype="java.math.BigInteger" type="BigInteger">
				<comment>
					<description>The BigInteger constant ten.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
			<field static="true" visibility="package-private" name="bnExpModThreshTable" fulltype="int[]" type="int" />
			<field static="true" visibility="private" name="zeros" fulltype="java.lang.String[]" type="String" />
			<field static="true" visibility="private" name="digitsPerLong" fulltype="int[]" type="int" />
			<field static="true" visibility="private" name="longRadix" fulltype="java.math.BigInteger[]" type="BigInteger" />
			<field static="true" visibility="private" name="digitsPerInt" fulltype="int[]" type="int" />
			<field static="true" visibility="private" name="intRadix" fulltype="int[]" type="int" />
			<field final="true" static="true" const="-8287574255936472291" visibility="private" name="serialVersionUID" constexpr="-8287574255936472291L" fulltype="long" type="long">
				<comment>
					<description>use serialVersionUID from JDK 1.1. for interoperability</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="private" name="serialPersistentFields" fulltype="java.io.ObjectStreamField[]" type="ObjectStreamField">
				<comment>
					<description>Serializable fields for BigInteger.</description>
					<attribute name="@serialField">
						<description>signum  int
              signum of this BigInteger.</description>
					</attribute>
					<attribute name="@serialField">
						<description>magnitude int[]
              magnitude array of this BigInteger.</description>
					</attribute>
					<attribute name="@serialField">
						<description>bitCount  int
              number of bits in this BigInteger</description>
					</attribute>
					<attribute name="@serialField">
						<description>bitLength int
              the number of bits in the minimal two&apos;s-complement
              representation of this BigInteger</description>
					</attribute>
					<attribute name="@serialField">
						<description>lowestSetBit int
              lowest set bit in the twos complement representation</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="private" name="unsafe" fulltype="sun.misc.Unsafe" type="Unsafe" />
			<field final="true" static="true" visibility="private" name="signumOffset" fulltype="long" type="long" />
			<field final="true" static="true" visibility="private" name="magOffset" fulltype="long" type="long" />
		</fields>
		<methods>
			<constructor visibility="public" name="BigInteger">
				<comment>
					<description>Translates a byte array containing the two&apos;s-complement binary
 representation of a BigInteger into a BigInteger.  The input array is
 assumed to be in &lt;i&gt;big-endian&lt;/i&gt; byte-order: the most significant
 byte is in the zeroth element.</description>
					<attribute name="@param">
						<description>val big-endian two&apos;s-complement binary representation of
         BigInteger.</description>
					</attribute>
					<attribute name="@throws">
						<description>NumberFormatException {@code val} is zero bytes long.</description>
					</attribute>
				</comment>
				<params>
					<param name="val" comment="big-endian two&apos;s-complement binary representation of
         BigInteger." fulltype="byte[]" type="byte" />
				</params>
			</constructor>
			<constructor visibility="private" name="BigInteger">
				<comment>
					<description>This private constructor translates an int array containing the
 two&apos;s-complement binary representation of a BigInteger into a
 BigInteger. The input array is assumed to be in &lt;i&gt;big-endian&lt;/i&gt;
 int-order: the most significant int is in the zeroth element.</description>
				</comment>
				<params>
					<param name="val" fulltype="int[]" type="int" />
				</params>
			</constructor>
			<constructor visibility="public" name="BigInteger">
				<comment>
					<description>Translates the sign-magnitude representation of a BigInteger into a
 BigInteger.  The sign is represented as an integer signum value: -1 for
 negative, 0 for zero, or 1 for positive.  The magnitude is a byte array
 in &lt;i&gt;big-endian&lt;/i&gt; byte-order: the most significant byte is in the
 zeroth element.  A zero-length magnitude array is permissible, and will
 result in a BigInteger value of 0, whether signum is -1, 0 or 1.</description>
					<attribute name="@param">
						<description>signum signum of the number (-1 for negative, 0 for zero, 1
         for positive).</description>
					</attribute>
					<attribute name="@param">
						<description>magnitude big-endian binary representation of the magnitude of
         the number.</description>
					</attribute>
					<attribute name="@throws">
						<description>NumberFormatException {@code signum} is not one of the three
         legal values (-1, 0, and 1), or {@code signum} is 0 and
         {@code magnitude} contains one or more non-zero bytes.</description>
					</attribute>
				</comment>
				<params>
					<param name="signum" comment="signum of the number (-1 for negative, 0 for zero, 1
         for positive)." fulltype="int" type="int" />
					<param name="magnitude" comment="big-endian binary representation of the magnitude of
         the number." fulltype="byte[]" type="byte" />
				</params>
			</constructor>
			<constructor visibility="private" name="BigInteger">
				<comment>
					<description>A constructor for internal use that translates the sign-magnitude
 representation of a BigInteger into a BigInteger. It checks the
 arguments and copies the magnitude so this constructor would be
 safe for external use.</description>
				</comment>
				<params>
					<param name="signum" fulltype="int" type="int" />
					<param name="magnitude" fulltype="int[]" type="int" />
				</params>
			</constructor>
			<constructor visibility="public" name="BigInteger">
				<comment>
					<description>Translates the String representation of a BigInteger in the
 specified radix into a BigInteger.  The String representation
 consists of an optional minus followed by a sequence of one or
 more digits in the specified radix.  The character-to-digit
 mapping is provided by {@code Character.digit}.  The String may
 not contain any extraneous characters (whitespace, for
 example).</description>
					<attribute name="@param">
						<description>val String representation of BigInteger.</description>
					</attribute>
					<attribute name="@param">
						<description>radix radix to be used in interpreting {@code val}.</description>
					</attribute>
					<attribute name="@throws">
						<description>NumberFormatException {@code val} is not a valid representation
         of a BigInteger in the specified radix, or {@code radix} is
         outside the range from {@link Character#MIN_RADIX} to
         {@link Character#MAX_RADIX}, inclusive.</description>
					</attribute>
					<attribute name="@see">
						<description>Character#digit</description>
					</attribute>
				</comment>
				<params>
					<param name="val" comment="String representation of BigInteger." fulltype="java.lang.String" type="String" />
					<param name="radix" comment="radix to be used in interpreting {@code val}." fulltype="int" type="int" />
				</params>
			</constructor>
			<constructor visibility="package-private" name="BigInteger">
				<params>
					<param name="val" fulltype="char[]" type="char" />
				</params>
			</constructor>
			<constructor visibility="public" name="BigInteger">
				<comment>
					<description>Translates the decimal String representation of a BigInteger into a
 BigInteger.  The String representation consists of an optional minus
 sign followed by a sequence of one or more decimal digits.  The
 character-to-digit mapping is provided by {@code Character.digit}.
 The String may not contain any extraneous characters (whitespace, for
 example).</description>
					<attribute name="@param">
						<description>val decimal String representation of BigInteger.</description>
					</attribute>
					<attribute name="@throws">
						<description>NumberFormatException {@code val} is not a valid representation
         of a BigInteger.</description>
					</attribute>
					<attribute name="@see">
						<description>Character#digit</description>
					</attribute>
				</comment>
				<params>
					<param name="val" comment="decimal String representation of BigInteger." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="BigInteger">
				<comment>
					<description>Constructs a randomly generated BigInteger, uniformly distributed over
 the range {@code 0} to (2&lt;sup&gt;{@code numBits}&lt;/sup&gt; - 1), inclusive.
 The uniformity of the distribution assumes that a fair source of random
 bits is provided in {@code rnd}.  Note that this constructor always
 constructs a non-negative BigInteger.</description>
					<attribute name="@param">
						<description>numBits maximum bitLength of the new BigInteger.</description>
					</attribute>
					<attribute name="@param">
						<description>rnd source of randomness to be used in computing the new
         BigInteger.</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalArgumentException {@code numBits} is negative.</description>
					</attribute>
					<attribute name="@see">
						<description>#bitLength()</description>
					</attribute>
				</comment>
				<params>
					<param name="numBits" comment="maximum bitLength of the new BigInteger." fulltype="int" type="int" />
					<param name="rnd" comment="source of randomness to be used in computing the new
         BigInteger." fulltype="java.util.Random" type="Random" />
				</params>
			</constructor>
			<constructor visibility="public" name="BigInteger">
				<comment>
					<description>Constructs a randomly generated positive BigInteger that is probably
 prime, with the specified bitLength.

 &lt;p&gt;It is recommended that the {@link #probablePrime probablePrime}
 method be used in preference to this constructor unless there
 is a compelling need to specify a certainty.</description>
					<attribute name="@param">
						<description>bitLength bitLength of the returned BigInteger.</description>
					</attribute>
					<attribute name="@param">
						<description>certainty a measure of the uncertainty that the caller is
         willing to tolerate.  The probability that the new BigInteger
         represents a prime number will exceed
         (1 - 1/2&lt;sup&gt;{@code certainty}&lt;/sup&gt;).  The execution time of
         this constructor is proportional to the value of this parameter.</description>
					</attribute>
					<attribute name="@param">
						<description>rnd source of random bits used to select candidates to be
         tested for primality.</description>
					</attribute>
					<attribute name="@throws">
						<description>ArithmeticException {@code bitLength &lt; 2}.</description>
					</attribute>
					<attribute name="@see">
						<description>#bitLength()</description>
					</attribute>
				</comment>
				<params>
					<param name="bitLength" comment="bitLength of the returned BigInteger." fulltype="int" type="int" />
					<param name="certainty" comment="a measure of the uncertainty that the caller is
         willing to tolerate.  The probability that the new BigInteger
         represents a prime number will exceed
         (1 - 1/2&lt;sup&gt;{@code certainty}&lt;/sup&gt;).  The execution time of
         this constructor is proportional to the value of this parameter." fulltype="int" type="int" />
					<param name="rnd" comment="source of random bits used to select candidates to be
         tested for primality." fulltype="java.util.Random" type="Random" />
				</params>
			</constructor>
			<constructor visibility="package-private" name="BigInteger">
				<comment>
					<description>This internal constructor differs from its public cousin
 with the arguments reversed in two ways: it assumes that its
 arguments are correct, and it doesn&apos;t copy the magnitude array.</description>
				</comment>
				<params>
					<param name="magnitude" fulltype="int[]" type="int" />
					<param name="signum" fulltype="int" type="int" />
				</params>
			</constructor>
			<constructor visibility="private" name="BigInteger">
				<comment>
					<description>This private constructor is for internal use and assumes that its
 arguments are correct.</description>
				</comment>
				<params>
					<param name="magnitude" fulltype="byte[]" type="byte" />
					<param name="signum" fulltype="int" type="int" />
				</params>
			</constructor>
			<constructor visibility="private" name="BigInteger">
				<comment>
					<description>Constructs a BigInteger with the specified value, which may not be zero.</description>
				</comment>
				<params>
					<param name="val" fulltype="long" type="long" />
				</params>
			</constructor>
			<method visibility="private" name="parseInt" fulltype="int" type="int">
				<params>
					<param name="source" fulltype="char[]" type="char" />
					<param name="start" fulltype="int" type="int" />
					<param name="end" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="private" name="destructiveMulAdd" fulltype="void" type="void">
				<params>
					<param name="x" fulltype="int[]" type="int" />
					<param name="y" fulltype="int" type="int" />
					<param name="z" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="private" name="randomBits" fulltype="byte[]" type="byte">
				<params>
					<param name="numBits" fulltype="int" type="int" />
					<param name="rnd" fulltype="java.util.Random" type="Random" />
				</params>
			</method>
			<method static="true" visibility="public" name="probablePrime" returncomment="a BigInteger of {@code bitLength} bits that is probably prime" fulltype="java.math.BigInteger" type="BigInteger">
				<comment>
					<description>Returns a positive BigInteger that is probably prime, with the
 specified bitLength. The probability that a BigInteger returned
 by this method is composite does not exceed 2&lt;sup&gt;-100&lt;/sup&gt;.</description>
					<attribute name="@param">
						<description>bitLength bitLength of the returned BigInteger.</description>
					</attribute>
					<attribute name="@param">
						<description>rnd source of random bits used to select candidates to be
         tested for primality.</description>
					</attribute>
					<attribute name="@return">
						<description>a BigInteger of {@code bitLength} bits that is probably prime</description>
					</attribute>
					<attribute name="@throws">
						<description>ArithmeticException {@code bitLength &lt; 2}.</description>
					</attribute>
					<attribute name="@see">
						<description>#bitLength()</description>
					</attribute>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
				<params>
					<param name="bitLength" comment="bitLength of the returned BigInteger." fulltype="int" type="int" />
					<param name="rnd" comment="source of random bits used to select candidates to be
         tested for primality." fulltype="java.util.Random" type="Random" />
				</params>
			</method>
			<method static="true" visibility="private" name="smallPrime" fulltype="java.math.BigInteger" type="BigInteger">
				<comment>
					<description>Find a random number of the specified bitLength that is probably prime.
 This method is used for smaller primes, its performance degrades on
 larger bitlengths.

 This method assumes bitLength &gt; 1.</description>
				</comment>
				<params>
					<param name="bitLength" fulltype="int" type="int" />
					<param name="certainty" fulltype="int" type="int" />
					<param name="rnd" fulltype="java.util.Random" type="Random" />
				</params>
			</method>
			<method static="true" visibility="private" name="largePrime" fulltype="java.math.BigInteger" type="BigInteger">
				<comment>
					<description>Find a random number of the specified bitLength that is probably prime.
 This method is more appropriate for larger bitlengths since it uses
 a sieve to eliminate most composites before using a more expensive
 test.</description>
				</comment>
				<params>
					<param name="bitLength" fulltype="int" type="int" />
					<param name="certainty" fulltype="int" type="int" />
					<param name="rnd" fulltype="java.util.Random" type="Random" />
				</params>
			</method>
			<method visibility="public" name="nextProbablePrime" returncomment="the first integer greater than this {@code BigInteger} that
         is probably prime." fulltype="java.math.BigInteger" type="BigInteger">
				<comment>
					<description>Returns the first integer greater than this {@code BigInteger} that
 is probably prime.  The probability that the number returned by this
 method is composite does not exceed 2&lt;sup&gt;-100&lt;/sup&gt;. This method will
 never skip over a prime when searching: if it returns {@code p}, there
 is no prime {@code q} such that {@code this &lt; q &lt; p}.</description>
					<attribute name="@return">
						<description>the first integer greater than this {@code BigInteger} that
         is probably prime.</description>
					</attribute>
					<attribute name="@throws">
						<description>ArithmeticException {@code this &lt; 0}.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method visibility="package-private" name="primeToCertainty" returncomment="{@code true} if this BigInteger is probably prime,
         {@code false} if it&apos;s definitely composite." fulltype="boolean" type="boolean">
				<comment>
					<description>Returns {@code true} if this BigInteger is probably prime,
 {@code false} if it&apos;s definitely composite.

 This method assumes bitLength &gt; 2.</description>
					<attribute name="@param">
						<description>certainty a measure of the uncertainty that the caller is
         willing to tolerate: if the call returns {@code true}
         the probability that this BigInteger is prime exceeds
         {@code (1 - 1/2&lt;sup&gt;certainty&lt;/sup&gt;)}.  The execution time of
         this method is proportional to the value of this parameter.</description>
					</attribute>
					<attribute name="@return">
						<description>{@code true} if this BigInteger is probably prime,
         {@code false} if it&apos;s definitely composite.</description>
					</attribute>
				</comment>
				<params>
					<param name="certainty" comment="a measure of the uncertainty that the caller is
         willing to tolerate: if the call returns {@code true}
         the probability that this BigInteger is prime exceeds
         {@code (1 - 1/2&lt;sup&gt;certainty&lt;/sup&gt;)}.  The execution time of
         this method is proportional to the value of this parameter." fulltype="int" type="int" />
					<param name="random" fulltype="java.util.Random" type="Random" />
				</params>
			</method>
			<method visibility="private" name="passesLucasLehmer" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true iff this BigInteger is a Lucas-Lehmer probable prime.

 The following assumptions are made:
 This BigInteger is a positive, odd number.</description>
				</comment>
			</method>
			<method static="true" visibility="private" name="jacobiSymbol" fulltype="int" type="int">
				<comment>
					<description>Computes Jacobi(p,n).
 Assumes n positive, odd, n&gt;=3.</description>
				</comment>
				<params>
					<param name="p" fulltype="int" type="int" />
					<param name="n" fulltype="java.math.BigInteger" type="BigInteger" />
				</params>
			</method>
			<method static="true" visibility="private" name="lucasLehmerSequence" fulltype="java.math.BigInteger" type="BigInteger">
				<params>
					<param name="z" fulltype="int" type="int" />
					<param name="k" fulltype="java.math.BigInteger" type="BigInteger" />
					<param name="n" fulltype="java.math.BigInteger" type="BigInteger" />
				</params>
			</method>
			<method static="true" visibility="private" name="getSecureRandom" fulltype="java.util.Random" type="Random" />
			<method visibility="private" name="passesMillerRabin" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true iff this BigInteger passes the specified number of
 Miller-Rabin tests. This test is taken from the DSA spec (NIST FIPS
 186-2).

 The following assumptions are made:
 This BigInteger is a positive, odd number greater than 2.
 iterations&lt;=50.</description>
				</comment>
				<params>
					<param name="iterations" fulltype="int" type="int" />
					<param name="rnd" fulltype="java.util.Random" type="Random" />
				</params>
			</method>
			<method static="true" visibility="public" name="valueOf" returncomment="a BigInteger with the specified value." fulltype="java.math.BigInteger" type="BigInteger">
				<comment>
					<description>Returns a BigInteger whose value is equal to that of the
 specified {@code long}.  This &quot;static factory method&quot; is
 provided in preference to a ({@code long}) constructor
 because it allows for reuse of frequently used BigIntegers.</description>
					<attribute name="@param">
						<description>val value of the BigInteger to return.</description>
					</attribute>
					<attribute name="@return">
						<description>a BigInteger with the specified value.</description>
					</attribute>
				</comment>
				<params>
					<param name="val" comment="value of the BigInteger to return." fulltype="long" type="long" />
				</params>
			</method>
			<method static="true" visibility="private" name="valueOf" fulltype="java.math.BigInteger" type="BigInteger">
				<comment>
					<description>Returns a BigInteger with the given two&apos;s complement representation.
 Assumes that the input array will not be modified (the returned
 BigInteger will reference the input array if feasible).</description>
				</comment>
				<params>
					<param name="val" fulltype="int[]" type="int" />
				</params>
			</method>
			<method visibility="public" name="add" returncomment="{@code this + val}" fulltype="java.math.BigInteger" type="BigInteger">
				<comment>
					<description>Returns a BigInteger whose value is {@code (this + val)}.</description>
					<attribute name="@param">
						<description>val value to be added to this BigInteger.</description>
					</attribute>
					<attribute name="@return">
						<description>{@code this + val}</description>
					</attribute>
				</comment>
				<params>
					<param name="val" comment="value to be added to this BigInteger." fulltype="java.math.BigInteger" type="BigInteger" />
				</params>
			</method>
			<method static="true" visibility="private" name="add" fulltype="int[]" type="int">
				<comment>
					<description>Adds the contents of the int arrays x and y. This method allocates
 a new int array to hold the answer and returns a reference to that
 array.</description>
				</comment>
				<params>
					<param name="x" fulltype="int[]" type="int" />
					<param name="y" fulltype="int[]" type="int" />
				</params>
			</method>
			<method visibility="public" name="subtract" returncomment="{@code this - val}" fulltype="java.math.BigInteger" type="BigInteger">
				<comment>
					<description>Returns a BigInteger whose value is {@code (this - val)}.</description>
					<attribute name="@param">
						<description>val value to be subtracted from this BigInteger.</description>
					</attribute>
					<attribute name="@return">
						<description>{@code this - val}</description>
					</attribute>
				</comment>
				<params>
					<param name="val" comment="value to be subtracted from this BigInteger." fulltype="java.math.BigInteger" type="BigInteger" />
				</params>
			</method>
			<method static="true" visibility="private" name="subtract" fulltype="int[]" type="int">
				<comment>
					<description>Subtracts the contents of the second int arrays (little) from the
 first (big).  The first int array (big) must represent a larger number
 than the second.  This method allocates the space necessary to hold the
 answer.</description>
				</comment>
				<params>
					<param name="big" fulltype="int[]" type="int" />
					<param name="little" fulltype="int[]" type="int" />
				</params>
			</method>
			<method visibility="public" name="multiply" returncomment="{@code this * val}" fulltype="java.math.BigInteger" type="BigInteger">
				<comment>
					<description>Returns a BigInteger whose value is {@code (this * val)}.</description>
					<attribute name="@param">
						<description>val value to be multiplied by this BigInteger.</description>
					</attribute>
					<attribute name="@return">
						<description>{@code this * val}</description>
					</attribute>
				</comment>
				<params>
					<param name="val" comment="value to be multiplied by this BigInteger." fulltype="java.math.BigInteger" type="BigInteger" />
				</params>
			</method>
			<method visibility="package-private" name="multiply" fulltype="java.math.BigInteger" type="BigInteger">
				<comment>
					<description>Package private methods used by BigDecimal code to multiply a BigInteger
 with a long. Assumes v is not equal to INFLATED.</description>
				</comment>
				<params>
					<param name="v" fulltype="long" type="long" />
				</params>
			</method>
			<method visibility="private" name="multiplyToLen" fulltype="int[]" type="int">
				<comment>
					<description>Multiplies int arrays x and y to the specified lengths and places
 the result into z. There will be no leading zeros in the resultant array.</description>
				</comment>
				<params>
					<param name="x" fulltype="int[]" type="int" />
					<param name="xlen" fulltype="int" type="int" />
					<param name="y" fulltype="int[]" type="int" />
					<param name="ylen" fulltype="int" type="int" />
					<param name="z" fulltype="int[]" type="int" />
				</params>
			</method>
			<method visibility="private" name="square" returncomment="{@code this&lt;sup&gt;2&lt;/sup&gt;}" fulltype="java.math.BigInteger" type="BigInteger">
				<comment>
					<description>Returns a BigInteger whose value is {@code (this&lt;sup&gt;2&lt;/sup&gt;)}.</description>
					<attribute name="@return">
						<description>{@code this&lt;sup&gt;2&lt;/sup&gt;}</description>
					</attribute>
				</comment>
			</method>
			<method final="true" static="true" visibility="private" name="squareToLen" fulltype="int[]" type="int">
				<comment>
					<description>Squares the contents of the int array x. The result is placed into the
 int array z.  The contents of x are not changed.</description>
				</comment>
				<params>
					<param name="x" fulltype="int[]" type="int" />
					<param name="len" fulltype="int" type="int" />
					<param name="z" fulltype="int[]" type="int" />
				</params>
			</method>
			<method visibility="public" name="divide" returncomment="{@code this / val}" fulltype="java.math.BigInteger" type="BigInteger">
				<comment>
					<description>Returns a BigInteger whose value is {@code (this / val)}.</description>
					<attribute name="@param">
						<description>val value by which this BigInteger is to be divided.</description>
					</attribute>
					<attribute name="@return">
						<description>{@code this / val}</description>
					</attribute>
					<attribute name="@throws">
						<description>ArithmeticException {@code val==0}</description>
					</attribute>
				</comment>
				<params>
					<param name="val" comment="value by which this BigInteger is to be divided." fulltype="java.math.BigInteger" type="BigInteger" />
				</params>
			</method>
			<method visibility="public" name="divideAndRemainder" returncomment="an array of two BigIntegers: the quotient {@code (this / val)}
         is the initial element, and the remainder {@code (this % val)}
         is the final element." fulltype="java.math.BigInteger[]" type="BigInteger">
				<comment>
					<description>Returns an array of two BigIntegers containing {@code (this / val)}
 followed by {@code (this % val)}.</description>
					<attribute name="@param">
						<description>val value by which this BigInteger is to be divided, and the
         remainder computed.</description>
					</attribute>
					<attribute name="@return">
						<description>an array of two BigIntegers: the quotient {@code (this / val)}
         is the initial element, and the remainder {@code (this % val)}
         is the final element.</description>
					</attribute>
					<attribute name="@throws">
						<description>ArithmeticException {@code val==0}</description>
					</attribute>
				</comment>
				<params>
					<param name="val" comment="value by which this BigInteger is to be divided, and the
         remainder computed." fulltype="java.math.BigInteger" type="BigInteger" />
				</params>
			</method>
			<method visibility="public" name="remainder" returncomment="{@code this % val}" fulltype="java.math.BigInteger" type="BigInteger">
				<comment>
					<description>Returns a BigInteger whose value is {@code (this % val)}.</description>
					<attribute name="@param">
						<description>val value by which this BigInteger is to be divided, and the
         remainder computed.</description>
					</attribute>
					<attribute name="@return">
						<description>{@code this % val}</description>
					</attribute>
					<attribute name="@throws">
						<description>ArithmeticException {@code val==0}</description>
					</attribute>
				</comment>
				<params>
					<param name="val" comment="value by which this BigInteger is to be divided, and the
         remainder computed." fulltype="java.math.BigInteger" type="BigInteger" />
				</params>
			</method>
			<method visibility="public" name="pow" returncomment="&lt;tt&gt;this&lt;sup&gt;exponent&lt;/sup&gt;&lt;/tt&gt;" fulltype="java.math.BigInteger" type="BigInteger">
				<comment>
					<description>Returns a BigInteger whose value is &lt;tt&gt;(this&lt;sup&gt;exponent&lt;/sup&gt;)&lt;/tt&gt;.
 Note that {@code exponent} is an integer rather than a BigInteger.</description>
					<attribute name="@param">
						<description>exponent exponent to which this BigInteger is to be raised.</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;tt&gt;this&lt;sup&gt;exponent&lt;/sup&gt;&lt;/tt&gt;</description>
					</attribute>
					<attribute name="@throws">
						<description>ArithmeticException {@code exponent} is negative.  (This would
         cause the operation to yield a non-integer value.)</description>
					</attribute>
				</comment>
				<params>
					<param name="exponent" comment="exponent to which this BigInteger is to be raised." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="gcd" returncomment="{@code GCD(abs(this), abs(val))}" fulltype="java.math.BigInteger" type="BigInteger">
				<comment>
					<description>Returns a BigInteger whose value is the greatest common divisor of
 {@code abs(this)} and {@code abs(val)}.  Returns 0 if
 {@code this==0 &amp;&amp; val==0}.</description>
					<attribute name="@param">
						<description>val value with which the GCD is to be computed.</description>
					</attribute>
					<attribute name="@return">
						<description>{@code GCD(abs(this), abs(val))}</description>
					</attribute>
				</comment>
				<params>
					<param name="val" comment="value with which the GCD is to be computed." fulltype="java.math.BigInteger" type="BigInteger" />
				</params>
			</method>
			<method static="true" visibility="package-private" name="bitLengthForInt" fulltype="int" type="int">
				<comment>
					<description>Package private method to return bit length for an integer.</description>
				</comment>
				<params>
					<param name="n" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="private" name="leftShift" fulltype="int[]" type="int">
				<comment>
					<description>Left shift int array a up to len by n bits. Returns the array that
 results from the shift since space may have to be reallocated.</description>
				</comment>
				<params>
					<param name="a" fulltype="int[]" type="int" />
					<param name="len" fulltype="int" type="int" />
					<param name="n" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="package-private" name="primitiveRightShift" fulltype="void" type="void">
				<params>
					<param name="a" fulltype="int[]" type="int" />
					<param name="len" fulltype="int" type="int" />
					<param name="n" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="package-private" name="primitiveLeftShift" fulltype="void" type="void">
				<params>
					<param name="a" fulltype="int[]" type="int" />
					<param name="len" fulltype="int" type="int" />
					<param name="n" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="private" name="bitLength" fulltype="int" type="int">
				<comment>
					<description>Calculate bitlength of contents of the first len elements an int array,
 assuming there are no leading zero ints.</description>
				</comment>
				<params>
					<param name="val" fulltype="int[]" type="int" />
					<param name="len" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="abs" returncomment="{@code abs(this)}" fulltype="java.math.BigInteger" type="BigInteger">
				<comment>
					<description>Returns a BigInteger whose value is the absolute value of this
 BigInteger.</description>
					<attribute name="@return">
						<description>{@code abs(this)}</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="negate" returncomment="{@code -this}" fulltype="java.math.BigInteger" type="BigInteger">
				<comment>
					<description>Returns a BigInteger whose value is {@code (-this)}.</description>
					<attribute name="@return">
						<description>{@code -this}</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="signum" returncomment="-1, 0 or 1 as the value of this BigInteger is negative, zero or
         positive." fulltype="int" type="int">
				<comment>
					<description>Returns the signum function of this BigInteger.</description>
					<attribute name="@return">
						<description>-1, 0 or 1 as the value of this BigInteger is negative, zero or
         positive.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="mod" returncomment="{@code this mod m}" fulltype="java.math.BigInteger" type="BigInteger">
				<comment>
					<description>Returns a BigInteger whose value is {@code (this mod m}).  This method
 differs from {@code remainder} in that it always returns a
 &lt;i&gt;non-negative&lt;/i&gt; BigInteger.</description>
					<attribute name="@param">
						<description>m the modulus.</description>
					</attribute>
					<attribute name="@return">
						<description>{@code this mod m}</description>
					</attribute>
					<attribute name="@throws">
						<description>ArithmeticException {@code m &lt;= 0}</description>
					</attribute>
					<attribute name="@see">
						<description>#remainder</description>
					</attribute>
				</comment>
				<params>
					<param name="m" comment="the modulus." fulltype="java.math.BigInteger" type="BigInteger" />
				</params>
			</method>
			<method visibility="public" name="modPow" returncomment="&lt;tt&gt;this&lt;sup&gt;exponent&lt;/sup&gt; mod m&lt;/tt&gt;" fulltype="java.math.BigInteger" type="BigInteger">
				<comment>
					<description>Returns a BigInteger whose value is
 &lt;tt&gt;(this&lt;sup&gt;exponent&lt;/sup&gt; mod m)&lt;/tt&gt;.  (Unlike {@code pow}, this
 method permits negative exponents.)</description>
					<attribute name="@param">
						<description>exponent the exponent.</description>
					</attribute>
					<attribute name="@param">
						<description>m the modulus.</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;tt&gt;this&lt;sup&gt;exponent&lt;/sup&gt; mod m&lt;/tt&gt;</description>
					</attribute>
					<attribute name="@throws">
						<description>ArithmeticException {@code m &lt;= 0}</description>
					</attribute>
					<attribute name="@see">
						<description>#modInverse</description>
					</attribute>
				</comment>
				<params>
					<param name="exponent" comment="the exponent." fulltype="java.math.BigInteger" type="BigInteger" />
					<param name="m" comment="the modulus." fulltype="java.math.BigInteger" type="BigInteger" />
				</params>
			</method>
			<method visibility="private" name="oddModPow" fulltype="java.math.BigInteger" type="BigInteger">
				<comment>
					<description>Returns a BigInteger whose value is x to the power of y mod z.
 Assumes: z is odd &amp;&amp; x &lt; z.</description>
				</comment>
				<params>
					<param name="y" fulltype="java.math.BigInteger" type="BigInteger" />
					<param name="z" fulltype="java.math.BigInteger" type="BigInteger" />
				</params>
			</method>
			<method static="true" visibility="private" name="montReduce" fulltype="int[]" type="int">
				<comment>
					<description>Montgomery reduce n, modulo mod.  This reduces modulo mod and divides
 by 2^(32*mlen). Adapted from Colin Plumb&apos;s C library.</description>
				</comment>
				<params>
					<param name="n" fulltype="int[]" type="int" />
					<param name="mod" fulltype="int[]" type="int" />
					<param name="mlen" fulltype="int" type="int" />
					<param name="inv" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="private" name="intArrayCmpToLen" fulltype="int" type="int">
				<params>
					<param name="arg1" fulltype="int[]" type="int" />
					<param name="arg2" fulltype="int[]" type="int" />
					<param name="len" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="private" name="subN" fulltype="int" type="int">
				<comment>
					<description>Subtracts two numbers of same length, returning borrow.</description>
				</comment>
				<params>
					<param name="a" fulltype="int[]" type="int" />
					<param name="b" fulltype="int[]" type="int" />
					<param name="len" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="package-private" name="mulAdd" fulltype="int" type="int">
				<comment>
					<description>Multiply an array by one word k and add to result, return the carry</description>
				</comment>
				<params>
					<param name="out" fulltype="int[]" type="int" />
					<param name="in" fulltype="int[]" type="int" />
					<param name="offset" fulltype="int" type="int" />
					<param name="len" fulltype="int" type="int" />
					<param name="k" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="package-private" name="addOne" fulltype="int" type="int">
				<comment>
					<description>Add one word to the number a mlen words into a. Return the resulting
 carry.</description>
				</comment>
				<params>
					<param name="a" fulltype="int[]" type="int" />
					<param name="offset" fulltype="int" type="int" />
					<param name="mlen" fulltype="int" type="int" />
					<param name="carry" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="private" name="modPow2" fulltype="java.math.BigInteger" type="BigInteger">
				<comment>
					<description>Returns a BigInteger whose value is (this ** exponent) mod (2**p)</description>
				</comment>
				<params>
					<param name="exponent" fulltype="java.math.BigInteger" type="BigInteger" />
					<param name="p" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="private" name="mod2" fulltype="java.math.BigInteger" type="BigInteger">
				<comment>
					<description>Returns a BigInteger whose value is this mod(2**p).
 Assumes that this {@code BigInteger &gt;= 0} and {@code p &gt; 0}.</description>
				</comment>
				<params>
					<param name="p" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="modInverse" returncomment="{@code this}&lt;sup&gt;-1&lt;/sup&gt; {@code mod m}." fulltype="java.math.BigInteger" type="BigInteger">
				<comment>
					<description>Returns a BigInteger whose value is {@code (this}&lt;sup&gt;-1&lt;/sup&gt; {@code mod m)}.</description>
					<attribute name="@param">
						<description>m the modulus.</description>
					</attribute>
					<attribute name="@return">
						<description>{@code this}&lt;sup&gt;-1&lt;/sup&gt; {@code mod m}.</description>
					</attribute>
					<attribute name="@throws">
						<description>ArithmeticException {@code  m &lt;= 0}, or this BigInteger
         has no multiplicative inverse mod m (that is, this BigInteger
         is not &lt;i&gt;relatively prime&lt;/i&gt; to m).</description>
					</attribute>
				</comment>
				<params>
					<param name="m" comment="the modulus." fulltype="java.math.BigInteger" type="BigInteger" />
				</params>
			</method>
			<method visibility="public" name="shiftLeft" returncomment="{@code this &lt;&lt; n}" fulltype="java.math.BigInteger" type="BigInteger">
				<comment>
					<description>Returns a BigInteger whose value is {@code (this &lt;&lt; n)}.
 The shift distance, {@code n}, may be negative, in which case
 this method performs a right shift.
 (Computes &lt;tt&gt;floor(this * 2&lt;sup&gt;n&lt;/sup&gt;)&lt;/tt&gt;.)</description>
					<attribute name="@param">
						<description>n shift distance, in bits.</description>
					</attribute>
					<attribute name="@return">
						<description>{@code this &lt;&lt; n}</description>
					</attribute>
					<attribute name="@see">
						<description>#shiftRight</description>
					</attribute>
				</comment>
				<params>
					<param name="n" comment="shift distance, in bits." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="shiftRight" returncomment="{@code this &gt;&gt; n}" fulltype="java.math.BigInteger" type="BigInteger">
				<comment>
					<description>Returns a BigInteger whose value is {@code (this &gt;&gt; n)}.  Sign
 extension is performed.  The shift distance, {@code n}, may be
 negative, in which case this method performs a left shift.
 (Computes &lt;tt&gt;floor(this / 2&lt;sup&gt;n&lt;/sup&gt;)&lt;/tt&gt;.)</description>
					<attribute name="@param">
						<description>n shift distance, in bits.</description>
					</attribute>
					<attribute name="@return">
						<description>{@code this &gt;&gt; n}</description>
					</attribute>
					<attribute name="@see">
						<description>#shiftLeft</description>
					</attribute>
				</comment>
				<params>
					<param name="n" comment="shift distance, in bits." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="package-private" name="javaIncrement" fulltype="int[]" type="int">
				<params>
					<param name="val" fulltype="int[]" type="int" />
				</params>
			</method>
			<method visibility="public" name="and" returncomment="{@code this &amp; val}" fulltype="java.math.BigInteger" type="BigInteger">
				<comment>
					<description>Returns a BigInteger whose value is {@code (this &amp; val)}.  (This
 method returns a negative BigInteger if and only if this and val are
 both negative.)</description>
					<attribute name="@param">
						<description>val value to be AND&apos;ed with this BigInteger.</description>
					</attribute>
					<attribute name="@return">
						<description>{@code this &amp; val}</description>
					</attribute>
				</comment>
				<params>
					<param name="val" comment="value to be AND&apos;ed with this BigInteger." fulltype="java.math.BigInteger" type="BigInteger" />
				</params>
			</method>
			<method visibility="public" name="or" returncomment="{@code this | val}" fulltype="java.math.BigInteger" type="BigInteger">
				<comment>
					<description>Returns a BigInteger whose value is {@code (this | val)}.  (This method
 returns a negative BigInteger if and only if either this or val is
 negative.)</description>
					<attribute name="@param">
						<description>val value to be OR&apos;ed with this BigInteger.</description>
					</attribute>
					<attribute name="@return">
						<description>{@code this | val}</description>
					</attribute>
				</comment>
				<params>
					<param name="val" comment="value to be OR&apos;ed with this BigInteger." fulltype="java.math.BigInteger" type="BigInteger" />
				</params>
			</method>
			<method visibility="public" name="xor" returncomment="{@code this ^ val}" fulltype="java.math.BigInteger" type="BigInteger">
				<comment>
					<description>Returns a BigInteger whose value is {@code (this ^ val)}.  (This method
 returns a negative BigInteger if and only if exactly one of this and
 val are negative.)</description>
					<attribute name="@param">
						<description>val value to be XOR&apos;ed with this BigInteger.</description>
					</attribute>
					<attribute name="@return">
						<description>{@code this ^ val}</description>
					</attribute>
				</comment>
				<params>
					<param name="val" comment="value to be XOR&apos;ed with this BigInteger." fulltype="java.math.BigInteger" type="BigInteger" />
				</params>
			</method>
			<method visibility="public" name="not" returncomment="{@code ~this}" fulltype="java.math.BigInteger" type="BigInteger">
				<comment>
					<description>Returns a BigInteger whose value is {@code (~this)}.  (This method
 returns a negative value if and only if this BigInteger is
 non-negative.)</description>
					<attribute name="@return">
						<description>{@code ~this}</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="andNot" returncomment="{@code this &amp; ~val}" fulltype="java.math.BigInteger" type="BigInteger">
				<comment>
					<description>Returns a BigInteger whose value is {@code (this &amp; ~val)}.  This
 method, which is equivalent to {@code and(val.not())}, is provided as
 a convenience for masking operations.  (This method returns a negative
 BigInteger if and only if {@code this} is negative and {@code val} is
 positive.)</description>
					<attribute name="@param">
						<description>val value to be complemented and AND&apos;ed with this BigInteger.</description>
					</attribute>
					<attribute name="@return">
						<description>{@code this &amp; ~val}</description>
					</attribute>
				</comment>
				<params>
					<param name="val" comment="value to be complemented and AND&apos;ed with this BigInteger." fulltype="java.math.BigInteger" type="BigInteger" />
				</params>
			</method>
			<method visibility="public" name="testBit" returncomment="{@code true} if and only if the designated bit is set." fulltype="boolean" type="boolean">
				<comment>
					<description>Returns {@code true} if and only if the designated bit is set.
 (Computes {@code ((this &amp; (1&lt;&lt;n)) != 0)}.)</description>
					<attribute name="@param">
						<description>n index of bit to test.</description>
					</attribute>
					<attribute name="@return">
						<description>{@code true} if and only if the designated bit is set.</description>
					</attribute>
					<attribute name="@throws">
						<description>ArithmeticException {@code n} is negative.</description>
					</attribute>
				</comment>
				<params>
					<param name="n" comment="index of bit to test." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="setBit" returncomment="{@code this | (1&lt;&lt;n)}" fulltype="java.math.BigInteger" type="BigInteger">
				<comment>
					<description>Returns a BigInteger whose value is equivalent to this BigInteger
 with the designated bit set.  (Computes {@code (this | (1&lt;&lt;n))}.)</description>
					<attribute name="@param">
						<description>n index of bit to set.</description>
					</attribute>
					<attribute name="@return">
						<description>{@code this | (1&lt;&lt;n)}</description>
					</attribute>
					<attribute name="@throws">
						<description>ArithmeticException {@code n} is negative.</description>
					</attribute>
				</comment>
				<params>
					<param name="n" comment="index of bit to set." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="clearBit" returncomment="{@code this &amp; ~(1&lt;&lt;n)}" fulltype="java.math.BigInteger" type="BigInteger">
				<comment>
					<description>Returns a BigInteger whose value is equivalent to this BigInteger
 with the designated bit cleared.
 (Computes {@code (this &amp; ~(1&lt;&lt;n))}.)</description>
					<attribute name="@param">
						<description>n index of bit to clear.</description>
					</attribute>
					<attribute name="@return">
						<description>{@code this &amp; ~(1&lt;&lt;n)}</description>
					</attribute>
					<attribute name="@throws">
						<description>ArithmeticException {@code n} is negative.</description>
					</attribute>
				</comment>
				<params>
					<param name="n" comment="index of bit to clear." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="flipBit" returncomment="{@code this ^ (1&lt;&lt;n)}" fulltype="java.math.BigInteger" type="BigInteger">
				<comment>
					<description>Returns a BigInteger whose value is equivalent to this BigInteger
 with the designated bit flipped.
 (Computes {@code (this ^ (1&lt;&lt;n))}.)</description>
					<attribute name="@param">
						<description>n index of bit to flip.</description>
					</attribute>
					<attribute name="@return">
						<description>{@code this ^ (1&lt;&lt;n)}</description>
					</attribute>
					<attribute name="@throws">
						<description>ArithmeticException {@code n} is negative.</description>
					</attribute>
				</comment>
				<params>
					<param name="n" comment="index of bit to flip." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getLowestSetBit" returncomment="index of the rightmost one bit in this BigInteger." fulltype="int" type="int">
				<comment>
					<description>Returns the index of the rightmost (lowest-order) one bit in this
 BigInteger (the number of zero bits to the right of the rightmost
 one bit).  Returns -1 if this BigInteger contains no one bits.
 (Computes {@code (this==0? -1 : log2(this &amp; -this))}.)</description>
					<attribute name="@return">
						<description>index of the rightmost one bit in this BigInteger.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="bitLength" returncomment="number of bits in the minimal two&apos;s-complement
         representation of this BigInteger, &lt;i&gt;excluding&lt;/i&gt; a sign bit." fulltype="int" type="int">
				<comment>
					<description>Returns the number of bits in the minimal two&apos;s-complement
 representation of this BigInteger, &lt;i&gt;excluding&lt;/i&gt; a sign bit.
 For positive BigIntegers, this is equivalent to the number of bits in
 the ordinary binary representation.  (Computes
 {@code (ceil(log2(this &lt; 0 ? -this : this+1)))}.)</description>
					<attribute name="@return">
						<description>number of bits in the minimal two&apos;s-complement
         representation of this BigInteger, &lt;i&gt;excluding&lt;/i&gt; a sign bit.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="bitCount" returncomment="number of bits in the two&apos;s complement representation
         of this BigInteger that differ from its sign bit." fulltype="int" type="int">
				<comment>
					<description>Returns the number of bits in the two&apos;s complement representation
 of this BigInteger that differ from its sign bit.  This method is
 useful when implementing bit-vector style sets atop BigIntegers.</description>
					<attribute name="@return">
						<description>number of bits in the two&apos;s complement representation
         of this BigInteger that differ from its sign bit.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="isProbablePrime" returncomment="{@code true} if this BigInteger is probably prime,
         {@code false} if it&apos;s definitely composite." fulltype="boolean" type="boolean">
				<comment>
					<description>Returns {@code true} if this BigInteger is probably prime,
 {@code false} if it&apos;s definitely composite.  If
 {@code certainty} is {@code  &lt;= 0}, {@code true} is
 returned.</description>
					<attribute name="@param">
						<description>certainty a measure of the uncertainty that the caller is
         willing to tolerate: if the call returns {@code true}
         the probability that this BigInteger is prime exceeds
         (1 - 1/2&lt;sup&gt;{@code certainty}&lt;/sup&gt;).  The execution time of
         this method is proportional to the value of this parameter.</description>
					</attribute>
					<attribute name="@return">
						<description>{@code true} if this BigInteger is probably prime,
         {@code false} if it&apos;s definitely composite.</description>
					</attribute>
				</comment>
				<params>
					<param name="certainty" comment="a measure of the uncertainty that the caller is
         willing to tolerate: if the call returns {@code true}
         the probability that this BigInteger is prime exceeds
         (1 - 1/2&lt;sup&gt;{@code certainty}&lt;/sup&gt;).  The execution time of
         this method is proportional to the value of this parameter." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="compareTo" returncomment="-1, 0 or 1 as this BigInteger is numerically less than, equal
         to, or greater than {@code val}." fulltype="int" type="int">
				<comment>
					<description>Compares this BigInteger with the specified BigInteger.  This
 method is provided in preference to individual methods for each
 of the six boolean comparison operators ({@literal &lt;}, ==,
 {@literal &gt;}, {@literal &gt;=}, !=, {@literal &lt;=}).  The suggested
 idiom for performing these comparisons is: {@code
 (x.compareTo(y)} &amp;lt;&lt;i&gt;op&lt;/i&gt;&amp;gt; {@code 0)}, where
 &amp;lt;&lt;i&gt;op&lt;/i&gt;&amp;gt; is one of the six comparison operators.</description>
					<attribute name="@param">
						<description>val BigInteger to which this BigInteger is to be compared.</description>
					</attribute>
					<attribute name="@return">
						<description>-1, 0 or 1 as this BigInteger is numerically less than, equal
         to, or greater than {@code val}.</description>
					</attribute>
				</comment>
				<params>
					<param name="val" comment="BigInteger to which this BigInteger is to be compared." fulltype="java.math.BigInteger" type="BigInteger" />
				</params>
			</method>
			<method final="true" visibility="package-private" name="compareMagnitude" returncomment="-1, 0 or 1 as this magnitude array is less than, equal to or
         greater than the magnitude aray for the specified BigInteger&apos;s." fulltype="int" type="int">
				<comment>
					<description>Compares the magnitude array of this BigInteger with the specified
 BigInteger&apos;s. This is the version of compareTo ignoring sign.</description>
					<attribute name="@param">
						<description>val BigInteger whose magnitude array to be compared.</description>
					</attribute>
					<attribute name="@return">
						<description>-1, 0 or 1 as this magnitude array is less than, equal to or
         greater than the magnitude aray for the specified BigInteger&apos;s.</description>
					</attribute>
				</comment>
				<params>
					<param name="val" comment="BigInteger whose magnitude array to be compared." fulltype="java.math.BigInteger" type="BigInteger" />
				</params>
			</method>
			<method visibility="public" name="equals" returncomment="{@code true} if and only if the specified Object is a
         BigInteger whose value is numerically equal to this BigInteger." fulltype="boolean" type="boolean">
				<comment>
					<description>Compares this BigInteger with the specified Object for equality.</description>
					<attribute name="@param">
						<description>x Object to which this BigInteger is to be compared.</description>
					</attribute>
					<attribute name="@return">
						<description>{@code true} if and only if the specified Object is a
         BigInteger whose value is numerically equal to this BigInteger.</description>
					</attribute>
				</comment>
				<params>
					<param name="x" comment="Object to which this BigInteger is to be compared." fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="min" returncomment="the BigInteger whose value is the lesser of this BigInteger and
         {@code val}.  If they are equal, either may be returned." fulltype="java.math.BigInteger" type="BigInteger">
				<comment>
					<description>Returns the minimum of this BigInteger and {@code val}.</description>
					<attribute name="@param">
						<description>val value with which the minimum is to be computed.</description>
					</attribute>
					<attribute name="@return">
						<description>the BigInteger whose value is the lesser of this BigInteger and
         {@code val}.  If they are equal, either may be returned.</description>
					</attribute>
				</comment>
				<params>
					<param name="val" comment="value with which the minimum is to be computed." fulltype="java.math.BigInteger" type="BigInteger" />
				</params>
			</method>
			<method visibility="public" name="max" returncomment="the BigInteger whose value is the greater of this and
         {@code val}.  If they are equal, either may be returned." fulltype="java.math.BigInteger" type="BigInteger">
				<comment>
					<description>Returns the maximum of this BigInteger and {@code val}.</description>
					<attribute name="@param">
						<description>val value with which the maximum is to be computed.</description>
					</attribute>
					<attribute name="@return">
						<description>the BigInteger whose value is the greater of this and
         {@code val}.  If they are equal, either may be returned.</description>
					</attribute>
				</comment>
				<params>
					<param name="val" comment="value with which the maximum is to be computed." fulltype="java.math.BigInteger" type="BigInteger" />
				</params>
			</method>
			<method visibility="public" name="hashCode" returncomment="hash code for this BigInteger." fulltype="int" type="int">
				<comment>
					<description>Returns the hash code for this BigInteger.</description>
					<attribute name="@return">
						<description>hash code for this BigInteger.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="toString" returncomment="String representation of this BigInteger in the given radix." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the String representation of this BigInteger in the
 given radix.  If the radix is outside the range from {@link
 Character#MIN_RADIX} to {@link Character#MAX_RADIX} inclusive,
 it will default to 10 (as is the case for
 {@code Integer.toString}).  The digit-to-character mapping
 provided by {@code Character.forDigit} is used, and a minus
 sign is prepended if appropriate.  (This representation is
 compatible with the {@link #BigInteger(String, int) (String,
 int)} constructor.)</description>
					<attribute name="@param">
						<description>radix  radix of the String representation.</description>
					</attribute>
					<attribute name="@return">
						<description>String representation of this BigInteger in the given radix.</description>
					</attribute>
					<attribute name="@see">
						<description>Integer#toString</description>
					</attribute>
					<attribute name="@see">
						<description>Character#forDigit</description>
					</attribute>
					<attribute name="@see">
						<description>#BigInteger(java.lang.String, int)</description>
					</attribute>
				</comment>
				<params>
					<param name="radix" comment="radix of the String representation." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="toString" returncomment="decimal String representation of this BigInteger." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the decimal String representation of this BigInteger.
 The digit-to-character mapping provided by
 {@code Character.forDigit} is used, and a minus sign is
 prepended if appropriate.  (This representation is compatible
 with the {@link #BigInteger(String) (String)} constructor, and
 allows for String concatenation with Java&apos;s + operator.)</description>
					<attribute name="@return">
						<description>decimal String representation of this BigInteger.</description>
					</attribute>
					<attribute name="@see">
						<description>Character#forDigit</description>
					</attribute>
					<attribute name="@see">
						<description>#BigInteger(java.lang.String)</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="toByteArray" returncomment="a byte array containing the two&apos;s-complement representation of
         this BigInteger." fulltype="byte[]" type="byte">
				<comment>
					<description>Returns a byte array containing the two&apos;s-complement
 representation of this BigInteger.  The byte array will be in
 &lt;i&gt;big-endian&lt;/i&gt; byte-order: the most significant byte is in
 the zeroth element.  The array will contain the minimum number
 of bytes required to represent this BigInteger, including at
 least one sign bit, which is {@code (ceil((this.bitLength() +
 1)/8))}.  (This representation is compatible with the
 {@link #BigInteger(byte[]) (byte[])} constructor.)</description>
					<attribute name="@return">
						<description>a byte array containing the two&apos;s-complement representation of
         this BigInteger.</description>
					</attribute>
					<attribute name="@see">
						<description>#BigInteger(byte[])</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="intValue" returncomment="this BigInteger converted to an {@code int}." fulltype="int" type="int">
				<comment>
					<description>Converts this BigInteger to an {@code int}.  This
 conversion is analogous to a &lt;a
 href=&quot;http://java.sun.com/docs/books/jls/second_edition/html/conversions.doc.html#25363&quot;&gt;&lt;i&gt;narrowing
 primitive conversion&lt;/i&gt;&lt;/a&gt; from {@code long} to
 {@code int} as defined in the &lt;a
 href=&quot;http://java.sun.com/docs/books/jls/html/&quot;&gt;Java Language
 Specification&lt;/a&gt;: if this BigInteger is too big to fit in an
 {@code int}, only the low-order 32 bits are returned.
 Note that this conversion can lose information about the
 overall magnitude of the BigInteger value as well as return a
 result with the opposite sign.</description>
					<attribute name="@return">
						<description>this BigInteger converted to an {@code int}.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="longValue" returncomment="this BigInteger converted to a {@code long}." fulltype="long" type="long">
				<comment>
					<description>Converts this BigInteger to a {@code long}.  This
 conversion is analogous to a &lt;a
 href=&quot;http://java.sun.com/docs/books/jls/second_edition/html/conversions.doc.html#25363&quot;&gt;&lt;i&gt;narrowing
 primitive conversion&lt;/i&gt;&lt;/a&gt; from {@code long} to
 {@code int} as defined in the &lt;a
 href=&quot;http://java.sun.com/docs/books/jls/html/&quot;&gt;Java Language
 Specification&lt;/a&gt;: if this BigInteger is too big to fit in a
 {@code long}, only the low-order 64 bits are returned.
 Note that this conversion can lose information about the
 overall magnitude of the BigInteger value as well as return a
 result with the opposite sign.</description>
					<attribute name="@return">
						<description>this BigInteger converted to a {@code long}.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="floatValue" returncomment="this BigInteger converted to a {@code float}." fulltype="float" type="float">
				<comment>
					<description>Converts this BigInteger to a {@code float}.  This
 conversion is similar to the &lt;a
 href=&quot;http://java.sun.com/docs/books/jls/second_edition/html/conversions.doc.html#25363&quot;&gt;&lt;i&gt;narrowing
 primitive conversion&lt;/i&gt;&lt;/a&gt; from {@code double} to
 {@code float} defined in the &lt;a
 href=&quot;http://java.sun.com/docs/books/jls/html/&quot;&gt;Java Language
 Specification&lt;/a&gt;: if this BigInteger has too great a magnitude
 to represent as a {@code float}, it will be converted to
 {@link Float#NEGATIVE_INFINITY} or {@link
 Float#POSITIVE_INFINITY} as appropriate.  Note that even when
 the return value is finite, this conversion can lose
 information about the precision of the BigInteger value.</description>
					<attribute name="@return">
						<description>this BigInteger converted to a {@code float}.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="doubleValue" returncomment="this BigInteger converted to a {@code double}." fulltype="double" type="double">
				<comment>
					<description>Converts this BigInteger to a {@code double}.  This
 conversion is similar to the &lt;a
 href=&quot;http://java.sun.com/docs/books/jls/second_edition/html/conversions.doc.html#25363&quot;&gt;&lt;i&gt;narrowing
 primitive conversion&lt;/i&gt;&lt;/a&gt; from {@code double} to
 {@code float} defined in the &lt;a
 href=&quot;http://java.sun.com/docs/books/jls/html/&quot;&gt;Java Language
 Specification&lt;/a&gt;: if this BigInteger has too great a magnitude
 to represent as a {@code double}, it will be converted to
 {@link Double#NEGATIVE_INFINITY} or {@link
 Double#POSITIVE_INFINITY} as appropriate.  Note that even when
 the return value is finite, this conversion can lose
 information about the precision of the BigInteger value.</description>
					<attribute name="@return">
						<description>this BigInteger converted to a {@code double}.</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="private" name="stripLeadingZeroInts" fulltype="int[]" type="int">
				<comment>
					<description>Returns a copy of the input array stripped of any leading zero bytes.</description>
				</comment>
				<params>
					<param name="val" fulltype="int[]" type="int" />
				</params>
			</method>
			<method static="true" visibility="private" name="trustedStripLeadingZeroInts" fulltype="int[]" type="int">
				<comment>
					<description>Returns the input array stripped of any leading zero bytes.
 Since the source is trusted the copying may be skipped.</description>
				</comment>
				<params>
					<param name="val" fulltype="int[]" type="int" />
				</params>
			</method>
			<method static="true" visibility="private" name="stripLeadingZeroBytes" fulltype="int[]" type="int">
				<comment>
					<description>Returns a copy of the input array stripped of any leading zero bytes.</description>
				</comment>
				<params>
					<param name="a" fulltype="byte[]" type="byte" />
				</params>
			</method>
			<method static="true" visibility="private" name="makePositive" fulltype="int[]" type="int">
				<comment>
					<description>Takes an array a representing a negative 2&apos;s-complement number and
 returns the minimal (no leading zero bytes) unsigned whose value is -a.</description>
				</comment>
				<params>
					<param name="a" fulltype="byte[]" type="byte" />
				</params>
			</method>
			<method static="true" visibility="private" name="makePositive" fulltype="int[]" type="int">
				<comment>
					<description>Takes an array a representing a negative 2&apos;s-complement number and
 returns the minimal (no leading zero ints) unsigned whose value is -a.</description>
				</comment>
				<params>
					<param name="a" fulltype="int[]" type="int" />
				</params>
			</method>
			<method visibility="private" name="intLength" fulltype="int" type="int">
				<comment>
					<description>Returns the length of the two&apos;s complement representation in ints,
 including space for at least one sign bit.</description>
				</comment>
			</method>
			<method visibility="private" name="signBit" fulltype="int" type="int" />
			<method visibility="private" name="signInt" fulltype="int" type="int" />
			<method visibility="private" name="getInt" fulltype="int" type="int">
				<comment>
					<description>Returns the specified int of the little-endian two&apos;s complement
 representation (int 0 is the least significant).  The int number can
 be arbitrarily high (values are logically preceded by infinitely many
 sign ints).</description>
				</comment>
				<params>
					<param name="n" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="private" name="firstNonzeroIntNum" fulltype="int" type="int">
				<comment>
					<description>Returns the index of the int that contains the first nonzero int in the
 little-endian binary representation of the magnitude (int 0 is the
 least significant). If the magnitude is zero, return value is undefined.</description>
				</comment>
			</method>
			<method visibility="private" name="readObject" fulltype="void" type="void">
				<comment>
					<description>Reconstitute the {@code BigInteger} instance from a stream (that is,
 deserialize it). The magnitude is read in as an array of bytes
 for historical reasons, but it is converted to an array of ints
 and the byte array is discarded.
 Note:
 The current convention is to initialize the cache fields, bitCount,
 bitLength and lowestSetBit, to 0 rather than some other marker value.
 Therefore, no explicit action to set these fields needs to be taken in
 readObject because those fields already have a 0 value be default since
 defaultReadObject is not being used.</description>
				</comment>
				<params>
					<param name="s" fulltype="java.io.ObjectInputStream" type="ObjectInputStream" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
					<exception fulltype="java.lang.ClassNotFoundException" type="ClassNotFoundException" />
				</exceptions>
			</method>
			<method visibility="private" name="writeObject" fulltype="void" type="void">
				<comment>
					<description>Save the {@code BigInteger} instance to a stream.
 The magnitude of a BigInteger is serialized as a byte array for
 historical reasons.</description>
					<attribute name="@serialData">
						<description>two necessary fields are written as well as obsolete
             fields for compatibility with older versions.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" fulltype="java.io.ObjectOutputStream" type="ObjectOutputStream" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="private" name="magSerializedForm" fulltype="byte[]" type="byte">
				<comment>
					<description>Returns the mag array as an array of bytes.</description>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass final="true" superclass="Enum" visibility="public" package="java.math" serializable="true" superclassfulltype="java.lang.Enum" fulltype="java.math.RoundingMode" type="RoundingMode">
		<comment>
			<description>Specifies a &lt;i&gt;rounding behavior&lt;/i&gt; for numerical operations
 capable of discarding precision. Each rounding mode indicates how
 the least significant returned digit of a rounded result is to be
 calculated.  If fewer digits are returned than the digits needed to
 represent the exact numerical result, the discarded digits will be
 referred to as the &lt;i&gt;discarded fraction&lt;/i&gt; regardless the digits&apos;
 contribution to the value of the number.  In other words,
 considered as a numerical value, the discarded fraction could have
 an absolute value greater than one.

 &lt;p&gt;Each rounding mode description includes a table listing how
 different two-digit decimal values would round to a one digit
 decimal value under the rounding mode in question.  The result
 column in the tables could be gotten by creating a
 {@code BigDecimal} number with the specified value, forming a
 {@link MathContext} object with the proper settings
 ({@code precision} set to {@code 1}, and the
 {@code roundingMode} set to the rounding mode in question), and
 calling {@link BigDecimal#round round} on this number with the
 proper {@code MathContext}.  A summary table showing the results
 of these rounding operations for all rounding modes appears below.

&lt;p&gt;
&lt;table border&gt;
 &lt;caption top&gt;&lt;h3&gt;Summary of Rounding Operations Under Different Rounding Modes&lt;/h3&gt;&lt;/caption&gt;
 &lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;th colspan=8&gt;Result of rounding input to one digit with the given
                           rounding mode&lt;/th&gt;
 &lt;tr valign=top&gt;
 &lt;th&gt;Input Number&lt;/th&gt;         &lt;th&gt;{@code UP}&lt;/th&gt;
                                           &lt;th&gt;{@code DOWN}&lt;/th&gt;
                                                        &lt;th&gt;{@code CEILING}&lt;/th&gt;
                                                                       &lt;th&gt;{@code FLOOR}&lt;/th&gt;
                                                                                    &lt;th&gt;{@code HALF_UP}&lt;/th&gt;
                                                                                                   &lt;th&gt;{@code HALF_DOWN}&lt;/th&gt;
                                                                                                                    &lt;th&gt;{@code HALF_EVEN}&lt;/th&gt;
                                                                                                                                     &lt;th&gt;{@code UNNECESSARY}&lt;/th&gt;

 &lt;tr align=right&gt;&lt;td&gt;5.5&lt;/td&gt;  &lt;td&gt;6&lt;/td&gt;  &lt;td&gt;5&lt;/td&gt;    &lt;td&gt;6&lt;/td&gt;    &lt;td&gt;5&lt;/td&gt;  &lt;td&gt;6&lt;/td&gt;      &lt;td&gt;5&lt;/td&gt;       &lt;td&gt;6&lt;/td&gt;       &lt;td&gt;throw {@code ArithmeticException}&lt;/td&gt;
 &lt;tr align=right&gt;&lt;td&gt;2.5&lt;/td&gt;  &lt;td&gt;3&lt;/td&gt;  &lt;td&gt;2&lt;/td&gt;    &lt;td&gt;3&lt;/td&gt;    &lt;td&gt;2&lt;/td&gt;  &lt;td&gt;3&lt;/td&gt;      &lt;td&gt;2&lt;/td&gt;       &lt;td&gt;2&lt;/td&gt;       &lt;td&gt;throw {@code ArithmeticException}&lt;/td&gt;
 &lt;tr align=right&gt;&lt;td&gt;1.6&lt;/td&gt;  &lt;td&gt;2&lt;/td&gt;  &lt;td&gt;1&lt;/td&gt;    &lt;td&gt;2&lt;/td&gt;    &lt;td&gt;1&lt;/td&gt;  &lt;td&gt;2&lt;/td&gt;      &lt;td&gt;2&lt;/td&gt;       &lt;td&gt;2&lt;/td&gt;       &lt;td&gt;throw {@code ArithmeticException}&lt;/td&gt;
 &lt;tr align=right&gt;&lt;td&gt;1.1&lt;/td&gt;  &lt;td&gt;2&lt;/td&gt;  &lt;td&gt;1&lt;/td&gt;    &lt;td&gt;2&lt;/td&gt;    &lt;td&gt;1&lt;/td&gt;  &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;       &lt;td&gt;1&lt;/td&gt;       &lt;td&gt;throw {@code ArithmeticException}&lt;/td&gt;
 &lt;tr align=right&gt;&lt;td&gt;1.0&lt;/td&gt;  &lt;td&gt;1&lt;/td&gt;  &lt;td&gt;1&lt;/td&gt;    &lt;td&gt;1&lt;/td&gt;    &lt;td&gt;1&lt;/td&gt;  &lt;td&gt;1&lt;/td&gt;      &lt;td&gt;1&lt;/td&gt;       &lt;td&gt;1&lt;/td&gt;       &lt;td&gt;1&lt;/td&gt;
 &lt;tr align=right&gt;&lt;td&gt;-1.0&lt;/td&gt; &lt;td&gt;-1&lt;/td&gt; &lt;td&gt;-1&lt;/td&gt;   &lt;td&gt;-1&lt;/td&gt;   &lt;td&gt;-1&lt;/td&gt; &lt;td&gt;-1&lt;/td&gt;     &lt;td&gt;-1&lt;/td&gt;      &lt;td&gt;-1&lt;/td&gt;      &lt;td&gt;-1&lt;/td&gt;
 &lt;tr align=right&gt;&lt;td&gt;-1.1&lt;/td&gt; &lt;td&gt;-2&lt;/td&gt; &lt;td&gt;-1&lt;/td&gt;   &lt;td&gt;-1&lt;/td&gt;   &lt;td&gt;-2&lt;/td&gt; &lt;td&gt;-1&lt;/td&gt;     &lt;td&gt;-1&lt;/td&gt;      &lt;td&gt;-1&lt;/td&gt;      &lt;td&gt;throw {@code ArithmeticException}&lt;/td&gt;
 &lt;tr align=right&gt;&lt;td&gt;-1.6&lt;/td&gt; &lt;td&gt;-2&lt;/td&gt; &lt;td&gt;-1&lt;/td&gt;   &lt;td&gt;-1&lt;/td&gt;   &lt;td&gt;-2&lt;/td&gt; &lt;td&gt;-2&lt;/td&gt;     &lt;td&gt;-2&lt;/td&gt;      &lt;td&gt;-2&lt;/td&gt;      &lt;td&gt;throw {@code ArithmeticException}&lt;/td&gt;
 &lt;tr align=right&gt;&lt;td&gt;-2.5&lt;/td&gt; &lt;td&gt;-3&lt;/td&gt; &lt;td&gt;-2&lt;/td&gt;   &lt;td&gt;-2&lt;/td&gt;   &lt;td&gt;-3&lt;/td&gt; &lt;td&gt;-3&lt;/td&gt;     &lt;td&gt;-2&lt;/td&gt;      &lt;td&gt;-2&lt;/td&gt;      &lt;td&gt;throw {@code ArithmeticException}&lt;/td&gt;
 &lt;tr align=right&gt;&lt;td&gt;-5.5&lt;/td&gt; &lt;td&gt;-6&lt;/td&gt; &lt;td&gt;-5&lt;/td&gt;   &lt;td&gt;-5&lt;/td&gt;   &lt;td&gt;-6&lt;/td&gt; &lt;td&gt;-6&lt;/td&gt;     &lt;td&gt;-5&lt;/td&gt;      &lt;td&gt;-6&lt;/td&gt;      &lt;td&gt;throw {@code ArithmeticException}&lt;/td&gt;
&lt;/table&gt;


 &lt;p&gt;This {@code enum} is intended to replace the integer-based
 enumeration of rounding mode constants in {@link BigDecimal}
 ({@link BigDecimal#ROUND_UP}, {@link BigDecimal#ROUND_DOWN},
 etc. ).</description>
			<attribute name="@see">
				<description>BigDecimal</description>
			</attribute>
			<attribute name="@see">
				<description>MathContext</description>
			</attribute>
			<attribute name="@author">
				<description>Josh Bloch</description>
			</attribute>
			<attribute name="@author">
				<description>Mike Cowlishaw</description>
			</attribute>
			<attribute name="@author">
				<description>Joseph D. Darcy</description>
			</attribute>
			<attribute name="@since">
				<description>1.5</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" visibility="public" name="UP" fulltype="java.math.RoundingMode" type="RoundingMode">
				<comment>
					<description>Rounding mode to round away from zero.  Always increments the
 digit prior to a non-zero discarded fraction.  Note that this
 rounding mode never decreases the magnitude of the calculated
 value.

&lt;p&gt;Example:
&lt;table border&gt;
&lt;tr valign=top&gt;&lt;th&gt;Input Number&lt;/th&gt;
    &lt;th&gt;Input rounded to one digit&lt;br&gt; with {@code UP} rounding
&lt;tr align=right&gt;&lt;td&gt;5.5&lt;/td&gt;  &lt;td&gt;6&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;2.5&lt;/td&gt;  &lt;td&gt;3&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;1.6&lt;/td&gt;  &lt;td&gt;2&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;1.1&lt;/td&gt;  &lt;td&gt;2&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;1.0&lt;/td&gt;  &lt;td&gt;1&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;-1.0&lt;/td&gt; &lt;td&gt;-1&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;-1.1&lt;/td&gt; &lt;td&gt;-2&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;-1.6&lt;/td&gt; &lt;td&gt;-2&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;-2.5&lt;/td&gt; &lt;td&gt;-3&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;-5.5&lt;/td&gt; &lt;td&gt;-6&lt;/td&gt;
&lt;/table&gt;</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="DOWN" fulltype="java.math.RoundingMode" type="RoundingMode">
				<comment>
					<description>Rounding mode to round towards zero.  Never increments the digit
 prior to a discarded fraction (i.e., truncates).  Note that this
 rounding mode never increases the magnitude of the calculated value.

&lt;p&gt;Example:
&lt;table border&gt;
&lt;tr valign=top&gt;&lt;th&gt;Input Number&lt;/th&gt;
    &lt;th&gt;Input rounded to one digit&lt;br&gt; with {@code DOWN} rounding
&lt;tr align=right&gt;&lt;td&gt;5.5&lt;/td&gt;  &lt;td&gt;5&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;2.5&lt;/td&gt;  &lt;td&gt;2&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;1.6&lt;/td&gt;  &lt;td&gt;1&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;1.1&lt;/td&gt;  &lt;td&gt;1&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;1.0&lt;/td&gt;  &lt;td&gt;1&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;-1.0&lt;/td&gt; &lt;td&gt;-1&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;-1.1&lt;/td&gt; &lt;td&gt;-1&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;-1.6&lt;/td&gt; &lt;td&gt;-1&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;-2.5&lt;/td&gt; &lt;td&gt;-2&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;-5.5&lt;/td&gt; &lt;td&gt;-5&lt;/td&gt;
&lt;/table&gt;</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="CEILING" fulltype="java.math.RoundingMode" type="RoundingMode">
				<comment>
					<description>Rounding mode to round towards positive infinity.  If the
 result is positive, behaves as for {@code RoundingMode.UP};
 if negative, behaves as for {@code RoundingMode.DOWN}.  Note
 that this rounding mode never decreases the calculated value.

&lt;p&gt;Example:
&lt;table border&gt;
&lt;tr valign=top&gt;&lt;th&gt;Input Number&lt;/th&gt;
    &lt;th&gt;Input rounded to one digit&lt;br&gt; with {@code CEILING} rounding
&lt;tr align=right&gt;&lt;td&gt;5.5&lt;/td&gt;  &lt;td&gt;6&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;2.5&lt;/td&gt;  &lt;td&gt;3&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;1.6&lt;/td&gt;  &lt;td&gt;2&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;1.1&lt;/td&gt;  &lt;td&gt;2&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;1.0&lt;/td&gt;  &lt;td&gt;1&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;-1.0&lt;/td&gt; &lt;td&gt;-1&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;-1.1&lt;/td&gt; &lt;td&gt;-1&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;-1.6&lt;/td&gt; &lt;td&gt;-1&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;-2.5&lt;/td&gt; &lt;td&gt;-2&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;-5.5&lt;/td&gt; &lt;td&gt;-5&lt;/td&gt;
&lt;/table&gt;</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="FLOOR" fulltype="java.math.RoundingMode" type="RoundingMode">
				<comment>
					<description>Rounding mode to round towards negative infinity.  If the
 result is positive, behave as for {@code RoundingMode.DOWN};
 if negative, behave as for {@code RoundingMode.UP}.  Note that
 this rounding mode never increases the calculated value.

&lt;p&gt;Example:
&lt;table border&gt;
&lt;tr valign=top&gt;&lt;th&gt;Input Number&lt;/th&gt;
    &lt;th&gt;Input rounded to one digit&lt;br&gt; with {@code FLOOR} rounding
&lt;tr align=right&gt;&lt;td&gt;5.5&lt;/td&gt;  &lt;td&gt;5&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;2.5&lt;/td&gt;  &lt;td&gt;2&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;1.6&lt;/td&gt;  &lt;td&gt;1&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;1.1&lt;/td&gt;  &lt;td&gt;1&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;1.0&lt;/td&gt;  &lt;td&gt;1&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;-1.0&lt;/td&gt; &lt;td&gt;-1&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;-1.1&lt;/td&gt; &lt;td&gt;-2&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;-1.6&lt;/td&gt; &lt;td&gt;-2&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;-2.5&lt;/td&gt; &lt;td&gt;-3&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;-5.5&lt;/td&gt; &lt;td&gt;-6&lt;/td&gt;
&lt;/table&gt;</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="HALF_UP" fulltype="java.math.RoundingMode" type="RoundingMode">
				<comment>
					<description>Rounding mode to round towards {@literal &quot;nearest neighbor&quot;}
 unless both neighbors are equidistant, in which case round up.
 Behaves as for {@code RoundingMode.UP} if the discarded
 fraction is &amp;ge; 0.5; otherwise, behaves as for
 {@code RoundingMode.DOWN}.  Note that this is the rounding
 mode commonly taught at school.

&lt;p&gt;Example:
&lt;table border&gt;
&lt;tr valign=top&gt;&lt;th&gt;Input Number&lt;/th&gt;
    &lt;th&gt;Input rounded to one digit&lt;br&gt; with {@code HALF_UP} rounding
&lt;tr align=right&gt;&lt;td&gt;5.5&lt;/td&gt;  &lt;td&gt;6&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;2.5&lt;/td&gt;  &lt;td&gt;3&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;1.6&lt;/td&gt;  &lt;td&gt;2&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;1.1&lt;/td&gt;  &lt;td&gt;1&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;1.0&lt;/td&gt;  &lt;td&gt;1&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;-1.0&lt;/td&gt; &lt;td&gt;-1&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;-1.1&lt;/td&gt; &lt;td&gt;-1&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;-1.6&lt;/td&gt; &lt;td&gt;-2&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;-2.5&lt;/td&gt; &lt;td&gt;-3&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;-5.5&lt;/td&gt; &lt;td&gt;-6&lt;/td&gt;
&lt;/table&gt;</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="HALF_DOWN" fulltype="java.math.RoundingMode" type="RoundingMode">
				<comment>
					<description>Rounding mode to round towards {@literal &quot;nearest neighbor&quot;}
 unless both neighbors are equidistant, in which case round
 down.  Behaves as for {@code RoundingMode.UP} if the discarded
 fraction is &amp;gt; 0.5; otherwise, behaves as for
 {@code RoundingMode.DOWN}.

&lt;p&gt;Example:
&lt;table border&gt;
&lt;tr valign=top&gt;&lt;th&gt;Input Number&lt;/th&gt;
    &lt;th&gt;Input rounded to one digit&lt;br&gt; with {@code HALF_DOWN} rounding
&lt;tr align=right&gt;&lt;td&gt;5.5&lt;/td&gt;  &lt;td&gt;5&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;2.5&lt;/td&gt;  &lt;td&gt;2&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;1.6&lt;/td&gt;  &lt;td&gt;2&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;1.1&lt;/td&gt;  &lt;td&gt;1&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;1.0&lt;/td&gt;  &lt;td&gt;1&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;-1.0&lt;/td&gt; &lt;td&gt;-1&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;-1.1&lt;/td&gt; &lt;td&gt;-1&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;-1.6&lt;/td&gt; &lt;td&gt;-2&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;-2.5&lt;/td&gt; &lt;td&gt;-2&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;-5.5&lt;/td&gt; &lt;td&gt;-5&lt;/td&gt;
&lt;/table&gt;</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="HALF_EVEN" fulltype="java.math.RoundingMode" type="RoundingMode">
				<comment>
					<description>Rounding mode to round towards the {@literal &quot;nearest neighbor&quot;}
 unless both neighbors are equidistant, in which case, round
 towards the even neighbor.  Behaves as for
 {@code RoundingMode.HALF_UP} if the digit to the left of the
 discarded fraction is odd; behaves as for
 {@code RoundingMode.HALF_DOWN} if it&apos;s even.  Note that this
 is the rounding mode that statistically minimizes cumulative
 error when applied repeatedly over a sequence of calculations.
 It is sometimes known as {@literal &quot;Banker&apos;s rounding,&quot;} and is
 chiefly used in the USA.  This rounding mode is analogous to
 the rounding policy used for {@code float} and {@code double}
 arithmetic in Java.

&lt;p&gt;Example:
&lt;table border&gt;
&lt;tr valign=top&gt;&lt;th&gt;Input Number&lt;/th&gt;
    &lt;th&gt;Input rounded to one digit&lt;br&gt; with {@code HALF_EVEN} rounding
&lt;tr align=right&gt;&lt;td&gt;5.5&lt;/td&gt;  &lt;td&gt;6&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;2.5&lt;/td&gt;  &lt;td&gt;2&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;1.6&lt;/td&gt;  &lt;td&gt;2&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;1.1&lt;/td&gt;  &lt;td&gt;1&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;1.0&lt;/td&gt;  &lt;td&gt;1&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;-1.0&lt;/td&gt; &lt;td&gt;-1&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;-1.1&lt;/td&gt; &lt;td&gt;-1&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;-1.6&lt;/td&gt; &lt;td&gt;-2&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;-2.5&lt;/td&gt; &lt;td&gt;-2&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;-5.5&lt;/td&gt; &lt;td&gt;-6&lt;/td&gt;
&lt;/table&gt;</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="UNNECESSARY" fulltype="java.math.RoundingMode" type="RoundingMode">
				<comment>
					<description>Rounding mode to assert that the requested operation has an exact
 result, hence no rounding is necessary.  If this rounding mode is
 specified on an operation that yields an inexact result, an
 {@code ArithmeticException} is thrown.
&lt;p&gt;Example:
&lt;table border&gt;
&lt;tr valign=top&gt;&lt;th&gt;Input Number&lt;/th&gt;
    &lt;th&gt;Input rounded to one digit&lt;br&gt; with {@code UNNECESSARY} rounding
&lt;tr align=right&gt;&lt;td&gt;5.5&lt;/td&gt;  &lt;td&gt;throw {@code ArithmeticException}&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;2.5&lt;/td&gt;  &lt;td&gt;throw {@code ArithmeticException}&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;1.6&lt;/td&gt;  &lt;td&gt;throw {@code ArithmeticException}&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;1.1&lt;/td&gt;  &lt;td&gt;throw {@code ArithmeticException}&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;1.0&lt;/td&gt;  &lt;td&gt;1&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;-1.0&lt;/td&gt; &lt;td&gt;-1&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;-1.1&lt;/td&gt; &lt;td&gt;throw {@code ArithmeticException}&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;-1.6&lt;/td&gt; &lt;td&gt;throw {@code ArithmeticException}&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;-2.5&lt;/td&gt; &lt;td&gt;throw {@code ArithmeticException}&lt;/td&gt;
&lt;tr align=right&gt;&lt;td&gt;-5.5&lt;/td&gt; &lt;td&gt;throw {@code ArithmeticException}&lt;/td&gt;
&lt;/table&gt;</description>
				</comment>
			</field>
			<field final="true" visibility="package-private" name="oldMode" fulltype="int" type="int" />
		</fields>
		<methods>
			<constructor visibility="private" name="RoundingMode">
				<comment>
					<description>Constructor</description>
					<attribute name="@param">
						<description>oldMode The {@code BigDecimal} constant corresponding to
        this mode</description>
					</attribute>
				</comment>
				<params>
					<param name="oldMode" comment="The {@code BigDecimal} constant corresponding to
        this mode" fulltype="int" type="int" />
				</params>
			</constructor>
			<method static="true" visibility="public" name="values" fulltype="java.math.RoundingMode[]" type="RoundingMode" />
			<method static="true" visibility="public" name="valueOf" fulltype="java.math.RoundingMode" type="RoundingMode">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="valueOf" returncomment="{@code RoundingMode} corresponding to the given integer." fulltype="java.math.RoundingMode" type="RoundingMode">
				<comment>
					<description>Returns the {@code RoundingMode} object corresponding to a
 legacy integer rounding mode constant in {@link BigDecimal}.</description>
					<attribute name="@param">
						<description>rm legacy integer rounding mode to convert</description>
					</attribute>
					<attribute name="@return">
						<description>{@code RoundingMode} corresponding to the given integer.</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalArgumentException integer is out of range</description>
					</attribute>
				</comment>
				<params>
					<param name="rm" comment="legacy integer rounding mode to convert" fulltype="int" type="int" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="package-private" package="java.math" superclassfulltype="java.lang.Object" fulltype="java.math.BitSieve" type="BitSieve">
		<comment>
			<description>A simple bit sieve used for finding prime number candidates. Allows setting
 and clearing of bits in a storage array. The size of the sieve is assumed to
 be constant to reduce overhead. All the bits of a new bitSieve are zero, and
 bits are removed from it by setting them.

 To reduce storage space and increase efficiency, no even numbers are
 represented in the sieve (each bit in the sieve represents an odd number).
 The relationship between the index of a bit and the number it represents is
 given by
 N = offset + (2*index + 1);
 Where N is the integer represented by a bit in the sieve, offset is some
 even integer offset indicating where the sieve begins, and index is the
 index of a bit in the sieve array.</description>
			<attribute name="@see">
				<description>BigInteger</description>
			</attribute>
			<attribute name="@author">
				<description>Michael McCloskey</description>
			</attribute>
			<attribute name="@since">
				<description>1.3</description>
			</attribute>
		</comment>
		<fields>
			<field visibility="private" name="bits" fulltype="long[]" type="long">
				<comment>
					<description>Stores the bits in this bitSieve.</description>
				</comment>
			</field>
			<field visibility="private" name="length" fulltype="int" type="int">
				<comment>
					<description>Length is how many bits this sieve holds.</description>
				</comment>
			</field>
			<field static="true" visibility="private" name="smallSieve" fulltype="java.math.BitSieve" type="BitSieve">
				<comment>
					<description>A small sieve used to filter out multiples of small primes in a search
 sieve.</description>
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="private" name="BitSieve">
				<comment>
					<description>Construct a &quot;small sieve&quot; with a base of 0.  This constructor is
 used internally to generate the set of &quot;small primes&quot; whose multiples
 are excluded from sieves generated by the main (package private)
 constructor, BitSieve(BigInteger base, int searchLen).  The length
 of the sieve generated by this constructor was chosen for performance;
 it controls a tradeoff between how much time is spent constructing
 other sieves, and how much time is wasted testing composite candidates
 for primality.  The length was chosen experimentally to yield good
 performance.</description>
				</comment>
			</constructor>
			<constructor visibility="package-private" name="BitSieve">
				<comment>
					<description>Construct a bit sieve of searchLen bits used for finding prime number
 candidates. The new sieve begins at the specified base, which must
 be even.</description>
				</comment>
				<params>
					<param name="base" fulltype="java.math.BigInteger" type="BigInteger" />
					<param name="searchLen" fulltype="int" type="int" />
				</params>
			</constructor>
			<method static="true" visibility="private" name="unitIndex" fulltype="int" type="int">
				<comment>
					<description>Given a bit index return unit index containing it.</description>
				</comment>
				<params>
					<param name="bitIndex" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="private" name="bit" fulltype="long" type="long">
				<comment>
					<description>Return a unit that masks the specified bit in its unit.</description>
				</comment>
				<params>
					<param name="bitIndex" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="private" name="get" fulltype="boolean" type="boolean">
				<comment>
					<description>Get the value of the bit at the specified index.</description>
				</comment>
				<params>
					<param name="bitIndex" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="private" name="set" fulltype="void" type="void">
				<comment>
					<description>Set the bit at the specified index.</description>
				</comment>
				<params>
					<param name="bitIndex" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="private" name="sieveSearch" fulltype="int" type="int">
				<comment>
					<description>This method returns the index of the first clear bit in the search
 array that occurs at or after start. It will not search past the
 specified limit. It returns -1 if there is no such clear bit.</description>
				</comment>
				<params>
					<param name="limit" fulltype="int" type="int" />
					<param name="start" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="private" name="sieveSingle" fulltype="void" type="void">
				<comment>
					<description>Sieve a single set of multiples out of the sieve. Begin to remove
 multiples of the specified step starting at the specified start index,
 up to the specified limit.</description>
				</comment>
				<params>
					<param name="limit" fulltype="int" type="int" />
					<param name="start" fulltype="int" type="int" />
					<param name="step" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="package-private" name="retrieve" fulltype="java.math.BigInteger" type="BigInteger">
				<comment>
					<description>Test probable primes in the sieve and return successful candidates.</description>
				</comment>
				<params>
					<param name="initValue" fulltype="java.math.BigInteger" type="BigInteger" />
					<param name="certainty" fulltype="int" type="int" />
					<param name="random" fulltype="java.util.Random" type="Random" />
				</params>
			</method>
		</methods>
	</jelclass>
</jel>
