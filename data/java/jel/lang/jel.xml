<?xml version="1.0" encoding="UTF-8"?>
<jel>
	<admin creation="Fri Aug 17 15:41:09 CEST 2012" xsdversion="1.0.0" version="1.0.0" />
	<jelclass superclass="Exception" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.Exception" fulltype="java.lang.NoSuchFieldException" type="NoSuchFieldException">
		<comment>
			<description>Signals that the class doesn&apos;t have a field of a specified name.</description>
			<attribute name="@author">
				<description>unascribed</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.1</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="NoSuchFieldException">
				<comment>
					<description>Constructor.</description>
				</comment>
			</constructor>
			<constructor visibility="public" name="NoSuchFieldException">
				<comment>
					<description>Constructor with a detail message.</description>
					<attribute name="@param">
						<description>s the detail message</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the detail message" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass superclass="IndexOutOfBoundsException" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.IndexOutOfBoundsException" fulltype="java.lang.StringIndexOutOfBoundsException" type="StringIndexOutOfBoundsException">
		<comment>
			<description>Thrown by &lt;code&gt;String&lt;/code&gt; methods to indicate that an index
 is either negative or greater than the size of the string.  For
 some methods such as the charAt method, this exception also is
 thrown when the index is equal to the size of the string.</description>
			<attribute name="@author">
				<description>unascribed</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.String#charAt(int)</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.0</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="StringIndexOutOfBoundsException">
				<comment>
					<description>Constructs a &lt;code&gt;StringIndexOutOfBoundsException&lt;/code&gt; with no
 detail message.</description>
					<attribute name="@since">
						<description>JDK1.0.</description>
					</attribute>
				</comment>
			</constructor>
			<constructor visibility="public" name="StringIndexOutOfBoundsException">
				<comment>
					<description>Constructs a &lt;code&gt;StringIndexOutOfBoundsException&lt;/code&gt; with
 the specified detail message.</description>
					<attribute name="@param">
						<description>s   the detail message.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the detail message." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="StringIndexOutOfBoundsException">
				<comment>
					<description>Constructs a new &lt;code&gt;StringIndexOutOfBoundsException&lt;/code&gt;
 class with an argument indicating the illegal index.</description>
					<attribute name="@param">
						<description>index   the illegal index.</description>
					</attribute>
				</comment>
				<params>
					<param name="index" comment="the illegal index." fulltype="int" type="int" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass abstract="true" superclass="Object" visibility="public" package="java.lang" superclassfulltype="java.lang.Object" fulltype="java.lang.ClassLoader" type="ClassLoader">
		<comment>
			<description>A class loader is an object that is responsible for loading classes. The
 class &lt;tt&gt;ClassLoader&lt;/tt&gt; is an abstract class.  Given the &lt;a
 href=&quot;#name&quot;&gt;binary name&lt;/a&gt; of a class, a class loader should attempt to
 locate or generate data that constitutes a definition for the class.  A
 typical strategy is to transform the name into a file name and then read a
 &quot;class file&quot; of that name from a file system.

 &lt;p&gt; Every {@link Class &lt;tt&gt;Class&lt;/tt&gt;} object contains a {@link
 Class#getClassLoader() reference} to the &lt;tt&gt;ClassLoader&lt;/tt&gt; that defined
 it.

 &lt;p&gt; &lt;tt&gt;Class&lt;/tt&gt; objects for array classes are not created by class
 loaders, but are created automatically as required by the Java runtime.
 The class loader for an array class, as returned by {@link
 Class#getClassLoader()} is the same as the class loader for its element
 type; if the element type is a primitive type, then the array class has no
 class loader.

 &lt;p&gt; Applications implement subclasses of &lt;tt&gt;ClassLoader&lt;/tt&gt; in order to
 extend the manner in which the Java virtual machine dynamically loads
 classes.

 &lt;p&gt; Class loaders may typically be used by security managers to indicate
 security domains.

 &lt;p&gt; The &lt;tt&gt;ClassLoader&lt;/tt&gt; class uses a delegation model to search for
 classes and resources.  Each instance of &lt;tt&gt;ClassLoader&lt;/tt&gt; has an
 associated parent class loader.  When requested to find a class or
 resource, a &lt;tt&gt;ClassLoader&lt;/tt&gt; instance will delegate the search for the
 class or resource to its parent class loader before attempting to find the
 class or resource itself.  The virtual machine&apos;s built-in class loader,
 called the &quot;bootstrap class loader&quot;, does not itself have a parent but may
 serve as the parent of a &lt;tt&gt;ClassLoader&lt;/tt&gt; instance.

 &lt;p&gt; Normally, the Java virtual machine loads classes from the local file
 system in a platform-dependent manner.  For example, on UNIX systems, the
 virtual machine loads classes from the directory defined by the
 &lt;tt&gt;CLASSPATH&lt;/tt&gt; environment variable.

 &lt;p&gt; However, some classes may not originate from a file; they may originate
 from other sources, such as the network, or they could be constructed by an
 application.  The method {@link #defineClass(String, byte[], int, int)
 &lt;tt&gt;defineClass&lt;/tt&gt;} converts an array of bytes into an instance of class
 &lt;tt&gt;Class&lt;/tt&gt;. Instances of this newly defined class can be created using
 {@link Class#newInstance &lt;tt&gt;Class.newInstance&lt;/tt&gt;}.

 &lt;p&gt; The methods and constructors of objects created by a class loader may
 reference other classes.  To determine the class(es) referred to, the Java
 virtual machine invokes the {@link #loadClass &lt;tt&gt;loadClass&lt;/tt&gt;} method of
 the class loader that originally created the class.

 &lt;p&gt; For example, an application could create a network class loader to
 download class files from a server.  Sample code might look like:

 &lt;blockquote&gt;&lt;pre&gt;
   ClassLoader loader&amp;nbsp;= new NetworkClassLoader(host,&amp;nbsp;port);
   Object main&amp;nbsp;= loader.loadClass(&quot;Main&quot;, true).newInstance();
       &amp;nbsp;.&amp;nbsp;.&amp;nbsp;.
 &lt;/pre&gt;&lt;/blockquote&gt;

 &lt;p&gt; The network class loader subclass must define the methods {@link
 #findClass &lt;tt&gt;findClass&lt;/tt&gt;} and &lt;tt&gt;loadClassData&lt;/tt&gt; to load a class
 from the network.  Once it has downloaded the bytes that make up the class,
 it should use the method {@link #defineClass &lt;tt&gt;defineClass&lt;/tt&gt;} to
 create a class instance.  A sample implementation is:

 &lt;blockquote&gt;&lt;pre&gt;
     class NetworkClassLoader extends ClassLoader {
         String host;
         int port;

         public Class findClass(String name) {
             byte[] b = loadClassData(name);
             return defineClass(name, b, 0, b.length);
         }

         private byte[] loadClassData(String name) {
             // load the class data from the connection
             &amp;nbsp;.&amp;nbsp;.&amp;nbsp;.
         }
     }
 &lt;/pre&gt;&lt;/blockquote&gt;

 &lt;h4&gt; &lt;a name=&quot;name&quot;&gt;Binary names&lt;/a&gt; &lt;/h4&gt;

 &lt;p&gt; Any class name provided as a {@link String} parameter to methods in
 &lt;tt&gt;ClassLoader&lt;/tt&gt; must be a binary name as defined by the &lt;a
 href=&quot;http://java.sun.com/docs/books/jls/&quot;&gt;Java Language Specification&lt;/a&gt;.

 &lt;p&gt; Examples of valid class names include:
 &lt;blockquote&gt;&lt;pre&gt;
   &quot;java.lang.String&quot;
   &quot;javax.swing.JSpinner$DefaultEditor&quot;
   &quot;java.security.KeyStore$Builder$FileBuilder$1&quot;
   &quot;java.net.URLClassLoader$3$1&quot;
 &lt;/pre&gt;&lt;/blockquote&gt;</description>
			<attribute name="@see">
				<description>#resolveClass(Class)</description>
			</attribute>
			<attribute name="@since">
				<description>1.0</description>
			</attribute>
		</comment>
		<fields>
			<field visibility="private" name="parent" fulltype="java.lang.ClassLoader" type="ClassLoader" />
			<field visibility="private" name="package2certs" fulltype="java.util.Hashtable" type="Hashtable" />
			<field visibility="package-private" name="nocerts" fulltype="java.security.cert.Certificate[]" type="Certificate" />
			<field visibility="private" name="classes" fulltype="java.util.Vector" type="Vector" />
			<field visibility="private" name="domains" fulltype="java.util.Set" type="Set" />
			<field visibility="private" name="packages" fulltype="java.util.HashMap" type="HashMap" />
			<field static="true" visibility="private" name="bootstrapClassPath" fulltype="sun.misc.URLClassPath" type="URLClassPath" />
			<field static="true" visibility="private" name="scl" fulltype="java.lang.ClassLoader" type="ClassLoader" />
			<field static="true" visibility="private" name="sclSet" fulltype="boolean" type="boolean" />
			<field visibility="private" name="defaultDomain" fulltype="java.security.ProtectionDomain" type="ProtectionDomain" />
			<field static="true" visibility="private" name="loadedLibraryNames" fulltype="java.util.Vector" type="Vector" />
			<field static="true" visibility="private" name="systemNativeLibraries" fulltype="java.util.Vector" type="Vector" />
			<field visibility="private" name="nativeLibraries" fulltype="java.util.Vector" type="Vector" />
			<field static="true" visibility="private" name="nativeLibraryContext" fulltype="java.util.Stack" type="Stack" />
			<field static="true" visibility="private" name="usr_paths" fulltype="java.lang.String[]" type="String" />
			<field static="true" visibility="private" name="sys_paths" fulltype="java.lang.String[]" type="String" />
			<field visibility="private" name="defaultAssertionStatus" fulltype="boolean" type="boolean" />
			<field visibility="private" name="packageAssertionStatus" fulltype="java.util.Map" type="Map" />
			<field visibility="package-private" name="classAssertionStatus" fulltype="java.util.Map" type="Map" />
		</fields>
		<methods>
			<constructor visibility="private" name="ClassLoader">
				<params>
					<param name="unused" fulltype="java.lang.Void" type="Void" />
					<param name="parent" fulltype="java.lang.ClassLoader" type="ClassLoader" />
				</params>
			</constructor>
			<constructor visibility="protected" name="ClassLoader">
				<comment>
					<description>Creates a new class loader using the specified parent class loader for
 delegation.

 &lt;p&gt; If there is a security manager, its {@link
 SecurityManager#checkCreateClassLoader()
 &lt;tt&gt;checkCreateClassLoader&lt;/tt&gt;} method is invoked.  This may result in
 a security exception.  &lt;/p&gt;</description>
					<attribute name="@param">
						<description>parent
         The parent class loader</description>
					</attribute>
					<attribute name="@throws">
						<description>SecurityException
          If a security manager exists and its
          &lt;tt&gt;checkCreateClassLoader&lt;/tt&gt; method doesn&apos;t allow creation
          of a new class loader.</description>
					</attribute>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
				<params>
					<param name="parent" comment="The parent class loader" fulltype="java.lang.ClassLoader" type="ClassLoader" />
				</params>
			</constructor>
			<constructor visibility="protected" name="ClassLoader">
				<comment>
					<description>Creates a new class loader using the &lt;tt&gt;ClassLoader&lt;/tt&gt; returned by
 the method {@link #getSystemClassLoader()
 &lt;tt&gt;getSystemClassLoader()&lt;/tt&gt;} as the parent class loader.

 &lt;p&gt; If there is a security manager, its {@link
 SecurityManager#checkCreateClassLoader()
 &lt;tt&gt;checkCreateClassLoader&lt;/tt&gt;} method is invoked.  This may result in
 a security exception.  &lt;/p&gt;</description>
					<attribute name="@throws">
						<description>SecurityException
          If a security manager exists and its
          &lt;tt&gt;checkCreateClassLoader&lt;/tt&gt; method doesn&apos;t allow creation
          of a new class loader.</description>
					</attribute>
				</comment>
			</constructor>
			<method static="true" visibility="private" name="registerNatives" fulltype="void" type="void" />
			<method visibility="package-private" name="addClass" fulltype="void" type="void">
				<params>
					<param name="c" fulltype="java.lang.Class" type="Class" />
				</params>
			</method>
			<method static="true" visibility="private" name="checkCreateClassLoader" fulltype="java.lang.Void" type="Void" />
			<method visibility="public" name="loadClass" returncomment="The resulting &lt;tt&gt;Class&lt;/tt&gt; object" fulltype="java.lang.Class" type="Class">
				<comment>
					<description>Loads the class with the specified &lt;a href=&quot;#name&quot;&gt;binary name&lt;/a&gt;.
 This method searches for classes in the same manner as the {@link
 #loadClass(String, boolean)} method.  It is invoked by the Java virtual
 machine to resolve class references.  Invoking this method is equivalent
 to invoking {@link #loadClass(String, boolean) &lt;tt&gt;loadClass(name,
 false)&lt;/tt&gt;}.  &lt;/p&gt;</description>
					<attribute name="@param">
						<description>name
         The &lt;a href=&quot;#name&quot;&gt;binary name&lt;/a&gt; of the class</description>
					</attribute>
					<attribute name="@return">
						<description>The resulting &lt;tt&gt;Class&lt;/tt&gt; object</description>
					</attribute>
					<attribute name="@throws">
						<description>ClassNotFoundException
          If the class was not found</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The &lt;a href=&quot;#name&quot;&gt;binary name&lt;/a&gt; of the class" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception comment="If the class was not found" fulltype="java.lang.ClassNotFoundException" type="ClassNotFoundException" />
				</exceptions>
			</method>
			<method synchronized="true" visibility="protected" name="loadClass" returncomment="The resulting &lt;tt&gt;Class&lt;/tt&gt; object" fulltype="java.lang.Class" type="Class">
				<comment>
					<description>Loads the class with the specified &lt;a href=&quot;#name&quot;&gt;binary name&lt;/a&gt;.  The
 default implementation of this method searches for classes in the
 following order:

 &lt;p&gt;&lt;ol&gt;

   &lt;li&gt;&lt;p&gt; Invoke {@link #findLoadedClass(String)} to check if the class
   has already been loaded.  &lt;/p&gt;&lt;/li&gt;

   &lt;li&gt;&lt;p&gt; Invoke the {@link #loadClass(String) &lt;tt&gt;loadClass&lt;/tt&gt;} method
   on the parent class loader.  If the parent is &lt;tt&gt;null&lt;/tt&gt; the class
   loader built-in to the virtual machine is used, instead.  &lt;/p&gt;&lt;/li&gt;

   &lt;li&gt;&lt;p&gt; Invoke the {@link #findClass(String)} method to find the
   class.  &lt;/p&gt;&lt;/li&gt;

 &lt;/ol&gt;

 &lt;p&gt; If the class was found using the above steps, and the
 &lt;tt&gt;resolve&lt;/tt&gt; flag is true, this method will then invoke the {@link
 #resolveClass(Class)} method on the resulting &lt;tt&gt;Class&lt;/tt&gt; object.

 &lt;p&gt; Subclasses of &lt;tt&gt;ClassLoader&lt;/tt&gt; are encouraged to override {@link
 #findClass(String)}, rather than this method.  &lt;/p&gt;</description>
					<attribute name="@param">
						<description>name
         The &lt;a href=&quot;#name&quot;&gt;binary name&lt;/a&gt; of the class</description>
					</attribute>
					<attribute name="@param">
						<description>resolve
         If &lt;tt&gt;true&lt;/tt&gt; then resolve the class</description>
					</attribute>
					<attribute name="@return">
						<description>The resulting &lt;tt&gt;Class&lt;/tt&gt; object</description>
					</attribute>
					<attribute name="@throws">
						<description>ClassNotFoundException
          If the class could not be found</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The &lt;a href=&quot;#name&quot;&gt;binary name&lt;/a&gt; of the class" fulltype="java.lang.String" type="String" />
					<param name="resolve" comment="If &lt;tt&gt;true&lt;/tt&gt; then resolve the class" fulltype="boolean" type="boolean" />
				</params>
				<exceptions>
					<exception comment="If the class could not be found" fulltype="java.lang.ClassNotFoundException" type="ClassNotFoundException" />
				</exceptions>
			</method>
			<method synchronized="true" visibility="private" name="loadClassInternal" fulltype="java.lang.Class" type="Class">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception fulltype="java.lang.ClassNotFoundException" type="ClassNotFoundException" />
				</exceptions>
			</method>
			<method visibility="private" name="checkPackageAccess" fulltype="void" type="void">
				<params>
					<param name="cls" fulltype="java.lang.Class" type="Class" />
					<param name="pd" fulltype="java.security.ProtectionDomain" type="ProtectionDomain" />
				</params>
			</method>
			<method visibility="protected" name="findClass" returncomment="The resulting &lt;tt&gt;Class&lt;/tt&gt; object" fulltype="java.lang.Class" type="Class">
				<comment>
					<description>Finds the class with the specified &lt;a href=&quot;#name&quot;&gt;binary name&lt;/a&gt;.
 This method should be overridden by class loader implementations that
 follow the delegation model for loading classes, and will be invoked by
 the {@link #loadClass &lt;tt&gt;loadClass&lt;/tt&gt;} method after checking the
 parent class loader for the requested class.  The default implementation
 throws a &lt;tt&gt;ClassNotFoundException&lt;/tt&gt;.  &lt;/p&gt;</description>
					<attribute name="@param">
						<description>name
         The &lt;a href=&quot;#name&quot;&gt;binary name&lt;/a&gt; of the class</description>
					</attribute>
					<attribute name="@return">
						<description>The resulting &lt;tt&gt;Class&lt;/tt&gt; object</description>
					</attribute>
					<attribute name="@throws">
						<description>ClassNotFoundException
          If the class could not be found</description>
					</attribute>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The &lt;a href=&quot;#name&quot;&gt;binary name&lt;/a&gt; of the class" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception comment="If the class could not be found" fulltype="java.lang.ClassNotFoundException" type="ClassNotFoundException" />
				</exceptions>
			</method>
			<method final="true" visibility="protected" name="defineClass" returncomment="The &lt;tt&gt;Class&lt;/tt&gt; object that was created from the specified
          class data" fulltype="java.lang.Class" type="Class">
				<comment>
					<description>Converts an array of bytes into an instance of class &lt;tt&gt;Class&lt;/tt&gt;.
 Before the &lt;tt&gt;Class&lt;/tt&gt; can be used it must be resolved.  This method
 is deprecated in favor of the version that takes a &lt;a
 href=&quot;#name&quot;&gt;binary name&lt;/a&gt; as its first argument, and is more secure.</description>
					<attribute name="@param">
						<description>b
         The bytes that make up the class data.  The bytes in positions
         &lt;tt&gt;off&lt;/tt&gt; through &lt;tt&gt;off+len-1&lt;/tt&gt; should have the format
         of a valid class file as defined by the &lt;a
         href=&quot;http://java.sun.com/docs/books/vmspec/&quot;&gt;Java Virtual
         Machine Specification&lt;/a&gt;.</description>
					</attribute>
					<attribute name="@param">
						<description>off
         The start offset in &lt;tt&gt;b&lt;/tt&gt; of the class data</description>
					</attribute>
					<attribute name="@param">
						<description>len
         The length of the class data</description>
					</attribute>
					<attribute name="@return">
						<description>The &lt;tt&gt;Class&lt;/tt&gt; object that was created from the specified
          class data</description>
					</attribute>
					<attribute name="@throws">
						<description>ClassFormatError
          If the data did not contain a valid class</description>
					</attribute>
					<attribute name="@throws">
						<description>IndexOutOfBoundsException
          If either &lt;tt&gt;off&lt;/tt&gt; or &lt;tt&gt;len&lt;/tt&gt; is negative, or if
          &lt;tt&gt;off+len&lt;/tt&gt; is greater than &lt;tt&gt;b.length&lt;/tt&gt;.</description>
					</attribute>
					<attribute name="@see">
						<description>#loadClass(String, boolean)</description>
					</attribute>
					<attribute name="@see">
						<description>#resolveClass(Class)</description>
					</attribute>
					<attribute name="@deprecated">
						<description>Replaced by {@link #defineClass(String, byte[], int, int)
 defineClass(String, byte[], int, int)}</description>
					</attribute>
				</comment>
				<params>
					<param name="b" comment="The bytes that make up the class data.  The bytes in positions
         &lt;tt&gt;off&lt;/tt&gt; through &lt;tt&gt;off+len-1&lt;/tt&gt; should have the format
         of a valid class file as defined by the &lt;a
         href=&quot;http://java.sun.com/docs/books/vmspec/&quot;&gt;Java Virtual
         Machine Specification&lt;/a&gt;." fulltype="byte[]" type="byte" />
					<param name="off" comment="The start offset in &lt;tt&gt;b&lt;/tt&gt; of the class data" fulltype="int" type="int" />
					<param name="len" comment="The length of the class data" fulltype="int" type="int" />
				</params>
				<exceptions>
					<exception comment="If the data did not contain a valid class" fulltype="java.lang.ClassFormatError" type="ClassFormatError" />
				</exceptions>
			</method>
			<method final="true" visibility="protected" name="defineClass" returncomment="The &lt;tt&gt;Class&lt;/tt&gt; object that was created from the specified
          class data." fulltype="java.lang.Class" type="Class">
				<comment>
					<description>Converts an array of bytes into an instance of class &lt;tt&gt;Class&lt;/tt&gt;.
 Before the &lt;tt&gt;Class&lt;/tt&gt; can be used it must be resolved.

 &lt;p&gt; This method assigns a default {@link java.security.ProtectionDomain
 &lt;tt&gt;ProtectionDomain&lt;/tt&gt;} to the newly defined class.  The
 &lt;tt&gt;ProtectionDomain&lt;/tt&gt; is effectively granted the same set of
 permissions returned when {@link
 java.security.Policy#getPermissions(java.security.CodeSource)
 &lt;tt&gt;Policy.getPolicy().getPermissions(new CodeSource(null, null))&lt;/tt&gt;}
 is invoked.  The default domain is created on the first invocation of
 {@link #defineClass(String, byte[], int, int) &lt;tt&gt;defineClass&lt;/tt&gt;},
 and re-used on subsequent invocations.

 &lt;p&gt; To assign a specific &lt;tt&gt;ProtectionDomain&lt;/tt&gt; to the class, use
 the {@link #defineClass(String, byte[], int, int,
 java.security.ProtectionDomain) &lt;tt&gt;defineClass&lt;/tt&gt;} method that takes a
 &lt;tt&gt;ProtectionDomain&lt;/tt&gt; as one of its arguments.  &lt;/p&gt;</description>
					<attribute name="@param">
						<description>name
         The expected &lt;a href=&quot;#name&quot;&gt;binary name&lt;/a&gt; of the class, or
         &lt;tt&gt;null&lt;/tt&gt; if not known</description>
					</attribute>
					<attribute name="@param">
						<description>b
         The bytes that make up the class data.  The bytes in positions
         &lt;tt&gt;off&lt;/tt&gt; through &lt;tt&gt;off+len-1&lt;/tt&gt; should have the format
         of a valid class file as defined by the &lt;a
         href=&quot;http://java.sun.com/docs/books/vmspec/&quot;&gt;Java Virtual
         Machine Specification&lt;/a&gt;.</description>
					</attribute>
					<attribute name="@param">
						<description>off
         The start offset in &lt;tt&gt;b&lt;/tt&gt; of the class data</description>
					</attribute>
					<attribute name="@param">
						<description>len
         The length of the class data</description>
					</attribute>
					<attribute name="@return">
						<description>The &lt;tt&gt;Class&lt;/tt&gt; object that was created from the specified
          class data.</description>
					</attribute>
					<attribute name="@throws">
						<description>ClassFormatError
          If the data did not contain a valid class</description>
					</attribute>
					<attribute name="@throws">
						<description>IndexOutOfBoundsException
          If either &lt;tt&gt;off&lt;/tt&gt; or &lt;tt&gt;len&lt;/tt&gt; is negative, or if
          &lt;tt&gt;off+len&lt;/tt&gt; is greater than &lt;tt&gt;b.length&lt;/tt&gt;.</description>
					</attribute>
					<attribute name="@throws">
						<description>SecurityException
          If an attempt is made to add this class to a package that
          contains classes that were signed by a different set of
          certificates than this class (which is unsigned), or if
          &lt;tt&gt;name&lt;/tt&gt; begins with &quot;&lt;tt&gt;java.&lt;/tt&gt;&quot;.</description>
					</attribute>
					<attribute name="@see">
						<description>#loadClass(String, boolean)</description>
					</attribute>
					<attribute name="@see">
						<description>#resolveClass(Class)</description>
					</attribute>
					<attribute name="@see">
						<description>java.security.CodeSource</description>
					</attribute>
					<attribute name="@see">
						<description>java.security.SecureClassLoader</description>
					</attribute>
					<attribute name="@since">
						<description>1.1</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The expected &lt;a href=&quot;#name&quot;&gt;binary name&lt;/a&gt; of the class, or
         &lt;tt&gt;null&lt;/tt&gt; if not known" fulltype="java.lang.String" type="String" />
					<param name="b" comment="The bytes that make up the class data.  The bytes in positions
         &lt;tt&gt;off&lt;/tt&gt; through &lt;tt&gt;off+len-1&lt;/tt&gt; should have the format
         of a valid class file as defined by the &lt;a
         href=&quot;http://java.sun.com/docs/books/vmspec/&quot;&gt;Java Virtual
         Machine Specification&lt;/a&gt;." fulltype="byte[]" type="byte" />
					<param name="off" comment="The start offset in &lt;tt&gt;b&lt;/tt&gt; of the class data" fulltype="int" type="int" />
					<param name="len" comment="The length of the class data" fulltype="int" type="int" />
				</params>
				<exceptions>
					<exception comment="If the data did not contain a valid class" fulltype="java.lang.ClassFormatError" type="ClassFormatError" />
				</exceptions>
			</method>
			<method visibility="private" name="preDefineClass" fulltype="java.security.ProtectionDomain" type="ProtectionDomain">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="protectionDomain" fulltype="java.security.ProtectionDomain" type="ProtectionDomain" />
				</params>
			</method>
			<method visibility="private" name="defineClassSourceLocation" fulltype="java.lang.String" type="String">
				<params>
					<param name="protectionDomain" fulltype="java.security.ProtectionDomain" type="ProtectionDomain" />
				</params>
			</method>
			<method visibility="private" name="defineTransformedClass" fulltype="java.lang.Class" type="Class">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="b" fulltype="byte[]" type="byte" />
					<param name="off" fulltype="int" type="int" />
					<param name="len" fulltype="int" type="int" />
					<param name="protectionDomain" fulltype="java.security.ProtectionDomain" type="ProtectionDomain" />
					<param name="cfe" fulltype="java.lang.ClassFormatError" type="ClassFormatError" />
					<param name="source" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception fulltype="java.lang.ClassFormatError" type="ClassFormatError" />
				</exceptions>
			</method>
			<method visibility="private" name="postDefineClass" fulltype="void" type="void">
				<params>
					<param name="c" fulltype="java.lang.Class" type="Class" />
					<param name="protectionDomain" fulltype="java.security.ProtectionDomain" type="ProtectionDomain" />
				</params>
			</method>
			<method final="true" visibility="protected" name="defineClass" returncomment="The &lt;tt&gt;Class&lt;/tt&gt; object created from the data,
          and optional &lt;tt&gt;ProtectionDomain&lt;/tt&gt;." fulltype="java.lang.Class" type="Class">
				<comment>
					<description>Converts an array of bytes into an instance of class &lt;tt&gt;Class&lt;/tt&gt;,
 with an optional &lt;tt&gt;ProtectionDomain&lt;/tt&gt;.  If the domain is
 &lt;tt&gt;null&lt;/tt&gt;, then a default domain will be assigned to the class as
 specified in the documentation for {@link #defineClass(String, byte[],
 int, int)}.  Before the class can be used it must be resolved.

 &lt;p&gt; The first class defined in a package determines the exact set of
 certificates that all subsequent classes defined in that package must
 contain.  The set of certificates for a class is obtained from the
 {@link java.security.CodeSource &lt;tt&gt;CodeSource&lt;/tt&gt;} within the
 &lt;tt&gt;ProtectionDomain&lt;/tt&gt; of the class.  Any classes added to that
 package must contain the same set of certificates or a
 &lt;tt&gt;SecurityException&lt;/tt&gt; will be thrown.  Note that if
 &lt;tt&gt;name&lt;/tt&gt; is &lt;tt&gt;null&lt;/tt&gt;, this check is not performed.
 You should always pass in the &lt;a href=&quot;#name&quot;&gt;binary name&lt;/a&gt; of the
 class you are defining as well as the bytes.  This ensures that the
 class you are defining is indeed the class you think it is.

 &lt;p&gt; The specified &lt;tt&gt;name&lt;/tt&gt; cannot begin with &quot;&lt;tt&gt;java.&lt;/tt&gt;&quot;, since
 all classes in the &quot;&lt;tt&gt;java.*&lt;/tt&gt; packages can only be defined by the
 bootstrap class loader.  If &lt;tt&gt;name&lt;/tt&gt; is not &lt;tt&gt;null&lt;/tt&gt;, it
 must be equal to the &lt;a href=&quot;#name&quot;&gt;binary name&lt;/a&gt; of the class
 specified by the byte array &quot;&lt;tt&gt;b&lt;/tt&gt;&quot;, otherwise a {@link
 &lt;tt&gt;NoClassDefFoundError&lt;/tt&gt;} will be thrown.  &lt;/p&gt;</description>
					<attribute name="@param">
						<description>name
         The expected &lt;a href=&quot;#name&quot;&gt;binary name&lt;/a&gt; of the class, or
         &lt;tt&gt;null&lt;/tt&gt; if not known</description>
					</attribute>
					<attribute name="@param">
						<description>b
         The bytes that make up the class data. The bytes in positions
         &lt;tt&gt;off&lt;/tt&gt; through &lt;tt&gt;off+len-1&lt;/tt&gt; should have the format
         of a valid class file as defined by the &lt;a
         href=&quot;http://java.sun.com/docs/books/vmspec/&quot;&gt;Java Virtual
         Machine Specification&lt;/a&gt;.</description>
					</attribute>
					<attribute name="@param">
						<description>off
         The start offset in &lt;tt&gt;b&lt;/tt&gt; of the class data</description>
					</attribute>
					<attribute name="@param">
						<description>len
         The length of the class data</description>
					</attribute>
					<attribute name="@param">
						<description>protectionDomain
         The ProtectionDomain of the class</description>
					</attribute>
					<attribute name="@return">
						<description>The &lt;tt&gt;Class&lt;/tt&gt; object created from the data,
          and optional &lt;tt&gt;ProtectionDomain&lt;/tt&gt;.</description>
					</attribute>
					<attribute name="@throws">
						<description>ClassFormatError
          If the data did not contain a valid class</description>
					</attribute>
					<attribute name="@throws">
						<description>NoClassDefFoundError
          If &lt;tt&gt;name&lt;/tt&gt; is not equal to the &lt;a href=&quot;#name&quot;&gt;binary
          name&lt;/a&gt; of the class specified by &lt;tt&gt;b&lt;/tt&gt;</description>
					</attribute>
					<attribute name="@throws">
						<description>IndexOutOfBoundsException
          If either &lt;tt&gt;off&lt;/tt&gt; or &lt;tt&gt;len&lt;/tt&gt; is negative, or if
          &lt;tt&gt;off+len&lt;/tt&gt; is greater than &lt;tt&gt;b.length&lt;/tt&gt;.</description>
					</attribute>
					<attribute name="@throws">
						<description>SecurityException
          If an attempt is made to add this class to a package that
          contains classes that were signed by a different set of
          certificates than this class, or if &lt;tt&gt;name&lt;/tt&gt; begins with
          &quot;&lt;tt&gt;java.&lt;/tt&gt;&quot;.</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The expected &lt;a href=&quot;#name&quot;&gt;binary name&lt;/a&gt; of the class, or
         &lt;tt&gt;null&lt;/tt&gt; if not known" fulltype="java.lang.String" type="String" />
					<param name="b" comment="The bytes that make up the class data. The bytes in positions
         &lt;tt&gt;off&lt;/tt&gt; through &lt;tt&gt;off+len-1&lt;/tt&gt; should have the format
         of a valid class file as defined by the &lt;a
         href=&quot;http://java.sun.com/docs/books/vmspec/&quot;&gt;Java Virtual
         Machine Specification&lt;/a&gt;." fulltype="byte[]" type="byte" />
					<param name="off" comment="The start offset in &lt;tt&gt;b&lt;/tt&gt; of the class data" fulltype="int" type="int" />
					<param name="len" comment="The length of the class data" fulltype="int" type="int" />
					<param name="protectionDomain" comment="The ProtectionDomain of the class" fulltype="java.security.ProtectionDomain" type="ProtectionDomain" />
				</params>
				<exceptions>
					<exception comment="If the data did not contain a valid class" fulltype="java.lang.ClassFormatError" type="ClassFormatError" />
				</exceptions>
			</method>
			<method final="true" visibility="protected" name="defineClass" returncomment="The &lt;tt&gt;Class&lt;/tt&gt; object created from the data,
          and optional &lt;tt&gt;ProtectionDomain&lt;/tt&gt;." fulltype="java.lang.Class" type="Class">
				<comment>
					<description>Converts a {@link java.nio.ByteBuffer &lt;tt&gt;ByteBuffer&lt;/tt&gt;}
 into an instance of class &lt;tt&gt;Class&lt;/tt&gt;,
 with an optional &lt;tt&gt;ProtectionDomain&lt;/tt&gt;.  If the domain is
 &lt;tt&gt;null&lt;/tt&gt;, then a default domain will be assigned to the class as
 specified in the documentation for {@link #defineClass(String, byte[],
 int, int)}.  Before the class can be used it must be resolved.

 &lt;p&gt;The rules about the first class defined in a package determining the set of
 certificates for the package, and the restrictions on class names are identical
 to those specified in the documentation for {@link #defineClass(String, byte[],
 int, int, ProtectionDomain)}.

 &lt;p&gt; An invocation of this method of the form
 &lt;i&gt;cl&lt;/i&gt;&lt;tt&gt;.defineClass(&lt;/tt&gt;&lt;i&gt;name&lt;/i&gt;&lt;tt&gt;,&lt;/tt&gt;
 &lt;i&gt;bBuffer&lt;/i&gt;&lt;tt&gt;,&lt;/tt&gt; &lt;i&gt;pd&lt;/i&gt;&lt;tt&gt;)&lt;/tt&gt; yields exactly the same
 result as the statements

 &lt;blockquote&gt;&lt;tt&gt;
 ...&lt;br&gt;
 byte[] temp = new byte[&lt;/tt&gt;&lt;i&gt;bBuffer&lt;/i&gt;&lt;tt&gt;.{@link java.nio.ByteBuffer#remaining
 remaining}()];&lt;br&gt;
     &lt;/tt&gt;&lt;i&gt;bBuffer&lt;/i&gt;&lt;tt&gt;.{@link java.nio.ByteBuffer#get(byte[])
 get}(temp);&lt;br&gt;
     return {@link #defineClass(String, byte[], int, int, ProtectionDomain)
 &lt;/tt&gt;&lt;i&gt;cl&lt;/i&gt;&lt;tt&gt;.defineClass}(&lt;/tt&gt;&lt;i&gt;name&lt;/i&gt;&lt;tt&gt;, temp, 0, temp.length, &lt;/tt&gt;&lt;i&gt;pd&lt;/i&gt;&lt;tt&gt;);&lt;br&gt;
 &lt;/tt&gt;&lt;/blockquote&gt;</description>
					<attribute name="@param">
						<description>name
         The expected &lt;a href=&quot;#name&quot;&gt;binary name&lt;/a. of the class, or
         &lt;tt&gt;null&lt;/tt&gt; if not known</description>
					</attribute>
					<attribute name="@param">
						<description>b
         The bytes that make up the class data. The bytes from positions
         &lt;tt&gt;b.position()&lt;/tt&gt; through &lt;tt&gt;b.position() + b.limit() -1 &lt;/tt&gt;
         should have the format of a valid class file as defined by the &lt;a
         href=&quot;http://java.sun.com/docs/books/vmspec/&quot;&gt;Java Virtual
         Machine Specification&lt;/a&gt;.</description>
					</attribute>
					<attribute name="@param">
						<description>protectionDomain
         The ProtectionDomain of the class, or &lt;tt&gt;null&lt;/tt&gt;.</description>
					</attribute>
					<attribute name="@return">
						<description>The &lt;tt&gt;Class&lt;/tt&gt; object created from the data,
          and optional &lt;tt&gt;ProtectionDomain&lt;/tt&gt;.</description>
					</attribute>
					<attribute name="@throws">
						<description>ClassFormatError
          If the data did not contain a valid class.</description>
					</attribute>
					<attribute name="@throws">
						<description>NoClassDefFoundError
          If &lt;tt&gt;name&lt;/tt&gt; is not equal to the &lt;a href=&quot;#name&quot;&gt;binary
          name&lt;/a&gt; of the class specified by &lt;tt&gt;b&lt;/tt&gt;</description>
					</attribute>
					<attribute name="@throws">
						<description>SecurityException
          If an attempt is made to add this class to a package that
          contains classes that were signed by a different set of
          certificates than this class, or if &lt;tt&gt;name&lt;/tt&gt; begins with
          &quot;&lt;tt&gt;java.&lt;/tt&gt;&quot;.</description>
					</attribute>
					<attribute name="@see">
						<description>#defineClass(String, byte[], int, int, ProtectionDomain)</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The expected &lt;a href=&quot;#name&quot;&gt;binary name&lt;/a. of the class, or
         &lt;tt&gt;null&lt;/tt&gt; if not known" fulltype="java.lang.String" type="String" />
					<param name="b" comment="The bytes that make up the class data. The bytes from positions
         &lt;tt&gt;b.position()&lt;/tt&gt; through &lt;tt&gt;b.position() + b.limit() -1 &lt;/tt&gt;
         should have the format of a valid class file as defined by the &lt;a
         href=&quot;http://java.sun.com/docs/books/vmspec/&quot;&gt;Java Virtual
         Machine Specification&lt;/a&gt;." fulltype="java.nio.ByteBuffer" type="ByteBuffer" />
					<param name="protectionDomain" comment="The ProtectionDomain of the class, or &lt;tt&gt;null&lt;/tt&gt;." fulltype="java.security.ProtectionDomain" type="ProtectionDomain" />
				</params>
				<exceptions>
					<exception comment="If the data did not contain a valid class." fulltype="java.lang.ClassFormatError" type="ClassFormatError" />
				</exceptions>
			</method>
			<method visibility="private" name="defineClass0" fulltype="java.lang.Class" type="Class">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="b" fulltype="byte[]" type="byte" />
					<param name="off" fulltype="int" type="int" />
					<param name="len" fulltype="int" type="int" />
					<param name="pd" fulltype="java.security.ProtectionDomain" type="ProtectionDomain" />
				</params>
			</method>
			<method visibility="private" name="defineClass1" fulltype="java.lang.Class" type="Class">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="b" fulltype="byte[]" type="byte" />
					<param name="off" fulltype="int" type="int" />
					<param name="len" fulltype="int" type="int" />
					<param name="pd" fulltype="java.security.ProtectionDomain" type="ProtectionDomain" />
					<param name="source" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="private" name="defineClass2" fulltype="java.lang.Class" type="Class">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="b" fulltype="java.nio.ByteBuffer" type="ByteBuffer" />
					<param name="off" fulltype="int" type="int" />
					<param name="len" fulltype="int" type="int" />
					<param name="pd" fulltype="java.security.ProtectionDomain" type="ProtectionDomain" />
					<param name="source" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="private" name="checkName" fulltype="boolean" type="boolean">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method synchronized="true" visibility="private" name="checkCerts" fulltype="void" type="void">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="cs" fulltype="java.security.CodeSource" type="CodeSource" />
				</params>
			</method>
			<method visibility="private" name="compareCerts" fulltype="boolean" type="boolean">
				<comment>
					<description>check to make sure the certs for the new class (certs) are the same as
 the certs for the first class inserted in the package (pcerts)</description>
				</comment>
				<params>
					<param name="pcerts" fulltype="java.security.cert.Certificate[]" type="Certificate" />
					<param name="certs" fulltype="java.security.cert.Certificate[]" type="Certificate" />
				</params>
			</method>
			<method final="true" visibility="protected" name="resolveClass" fulltype="void" type="void">
				<comment>
					<description>Links the specified class.  This (misleadingly named) method may be
 used by a class loader to link a class.  If the class &lt;tt&gt;c&lt;/tt&gt; has
 already been linked, then this method simply returns. Otherwise, the
 class is linked as described in the &quot;Execution&quot; chapter of the &lt;a
 href=&quot;http://java.sun.com/docs/books/jls/&quot;&gt;Java Language
 Specification&lt;/a&gt;.
 &lt;/p&gt;</description>
					<attribute name="@param">
						<description>c
         The class to link</description>
					</attribute>
					<attribute name="@throws">
						<description>NullPointerException
          If &lt;tt&gt;c&lt;/tt&gt; is &lt;tt&gt;null&lt;/tt&gt;.</description>
					</attribute>
					<attribute name="@see">
						<description>#defineClass(String, byte[], int, int)</description>
					</attribute>
				</comment>
				<params>
					<param name="c" comment="The class to link" fulltype="java.lang.Class" type="Class" />
				</params>
			</method>
			<method visibility="private" name="resolveClass0" fulltype="void" type="void">
				<params>
					<param name="c" fulltype="java.lang.Class" type="Class" />
				</params>
			</method>
			<method final="true" visibility="protected" name="findSystemClass" returncomment="The &lt;tt&gt;Class&lt;/tt&gt; object for the specified &lt;tt&gt;name&lt;/tt&gt;" fulltype="java.lang.Class" type="Class">
				<comment>
					<description>Finds a class with the specified &lt;a href=&quot;#name&quot;&gt;binary name&lt;/a&gt;,
 loading it if necessary.

 &lt;p&gt; This method loads the class through the system class loader (see
 {@link #getSystemClassLoader()}).  The &lt;tt&gt;Class&lt;/tt&gt; object returned
 might have more than one &lt;tt&gt;ClassLoader&lt;/tt&gt; associated with it.
 Subclasses of &lt;tt&gt;ClassLoader&lt;/tt&gt; need not usually invoke this method,
 because most class loaders need to override just {@link
 #findClass(String)}.  &lt;/p&gt;</description>
					<attribute name="@param">
						<description>name
         The &lt;a href=&quot;#name&quot;&gt;binary name&lt;/a&gt; of the class</description>
					</attribute>
					<attribute name="@return">
						<description>The &lt;tt&gt;Class&lt;/tt&gt; object for the specified &lt;tt&gt;name&lt;/tt&gt;</description>
					</attribute>
					<attribute name="@throws">
						<description>ClassNotFoundException
          If the class could not be found</description>
					</attribute>
					<attribute name="@see">
						<description>#ClassLoader(ClassLoader)</description>
					</attribute>
					<attribute name="@see">
						<description>#getParent()</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The &lt;a href=&quot;#name&quot;&gt;binary name&lt;/a&gt; of the class" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception comment="If the class could not be found" fulltype="java.lang.ClassNotFoundException" type="ClassNotFoundException" />
				</exceptions>
			</method>
			<method visibility="private" name="findBootstrapClass0" fulltype="java.lang.Class" type="Class">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception fulltype="java.lang.ClassNotFoundException" type="ClassNotFoundException" />
				</exceptions>
			</method>
			<method visibility="private" name="findBootstrapClass" fulltype="java.lang.Class" type="Class">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception fulltype="java.lang.ClassNotFoundException" type="ClassNotFoundException" />
				</exceptions>
			</method>
			<method final="true" visibility="protected" name="findLoadedClass" returncomment="The &lt;tt&gt;Class&lt;/tt&gt; object, or &lt;tt&gt;null&lt;/tt&gt; if the class has
          not been loaded" fulltype="java.lang.Class" type="Class">
				<comment>
					<description>Returns the class with the given &lt;a href=&quot;#name&quot;&gt;binary name&lt;/a&gt; if this
 loader has been recorded by the Java virtual machine as an initiating
 loader of a class with that &lt;a href=&quot;#name&quot;&gt;binary name&lt;/a&gt;.  Otherwise
 &lt;tt&gt;null&lt;/tt&gt; is returned.  &lt;/p&gt;</description>
					<attribute name="@param">
						<description>name
         The &lt;a href=&quot;#name&quot;&gt;binary name&lt;/a&gt; of the class</description>
					</attribute>
					<attribute name="@return">
						<description>The &lt;tt&gt;Class&lt;/tt&gt; object, or &lt;tt&gt;null&lt;/tt&gt; if the class has
          not been loaded</description>
					</attribute>
					<attribute name="@since">
						<description>1.1</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The &lt;a href=&quot;#name&quot;&gt;binary name&lt;/a&gt; of the class" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method final="true" visibility="private" name="findLoadedClass0" fulltype="java.lang.Class" type="Class">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method final="true" visibility="protected" name="setSigners" fulltype="void" type="void">
				<comment>
					<description>Sets the signers of a class.  This should be invoked after defining a
 class.  &lt;/p&gt;</description>
					<attribute name="@param">
						<description>c
         The &lt;tt&gt;Class&lt;/tt&gt; object</description>
					</attribute>
					<attribute name="@param">
						<description>signers
         The signers for the class</description>
					</attribute>
					<attribute name="@since">
						<description>1.1</description>
					</attribute>
				</comment>
				<params>
					<param name="c" comment="The &lt;tt&gt;Class&lt;/tt&gt; object" fulltype="java.lang.Class" type="Class" />
					<param name="signers" comment="The signers for the class" fulltype="java.lang.Object[]" type="Object" />
				</params>
			</method>
			<method visibility="public" name="getResource" returncomment="A &lt;tt&gt;URL&lt;/tt&gt; object for reading the resource, or
          &lt;tt&gt;null&lt;/tt&gt; if the resource could not be found or the invoker
          doesn&apos;t have adequate  privileges to get the resource." fulltype="java.net.URL" type="URL">
				<comment>
					<description>Finds the resource with the given name.  A resource is some data
 (images, audio, text, etc) that can be accessed by class code in a way
 that is independent of the location of the code.

 &lt;p&gt; The name of a resource is a &apos;&lt;tt&gt;/&lt;/tt&gt;&apos;-separated path name that
 identifies the resource.

 &lt;p&gt; This method will first search the parent class loader for the
 resource; if the parent is &lt;tt&gt;null&lt;/tt&gt; the path of the class loader
 built-in to the virtual machine is searched.  That failing, this method
 will invoke {@link #findResource(String)} to find the resource.  &lt;/p&gt;</description>
					<attribute name="@param">
						<description>name
         The resource name</description>
					</attribute>
					<attribute name="@return">
						<description>A &lt;tt&gt;URL&lt;/tt&gt; object for reading the resource, or
          &lt;tt&gt;null&lt;/tt&gt; if the resource could not be found or the invoker
          doesn&apos;t have adequate  privileges to get the resource.</description>
					</attribute>
					<attribute name="@since">
						<description>1.1</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The resource name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getResources" returncomment="An enumeration of {@link java.net.URL &lt;tt&gt;URL&lt;/tt&gt;} objects for
          the resource.  If no resources could  be found, the enumeration
          will be empty.  Resources that the class loader doesn&apos;t have
          access to will not be in the enumeration." fulltype="java.util.Enumeration" type="Enumeration">
				<comment>
					<description>Finds all the resources with the given name. A resource is some data
 (images, audio, text, etc) that can be accessed by class code in a way
 that is independent of the location of the code.

 &lt;p&gt;The name of a resource is a &lt;tt&gt;/&lt;/tt&gt;-separated path name that
 identifies the resource.

 &lt;p&gt; The search order is described in the documentation for {@link
 #getResource(String)}.  &lt;/p&gt;</description>
					<attribute name="@param">
						<description>name
         The resource name</description>
					</attribute>
					<attribute name="@return">
						<description>An enumeration of {@link java.net.URL &lt;tt&gt;URL&lt;/tt&gt;} objects for
          the resource.  If no resources could  be found, the enumeration
          will be empty.  Resources that the class loader doesn&apos;t have
          access to will not be in the enumeration.</description>
					</attribute>
					<attribute name="@throws">
						<description>IOException
          If I/O errors occur</description>
					</attribute>
					<attribute name="@see">
						<description>#findResources(String)</description>
					</attribute>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The resource name" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception comment="If I/O errors occur" fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="protected" name="findResource" returncomment="A &lt;tt&gt;URL&lt;/tt&gt; object for reading the resource, or
          &lt;tt&gt;null&lt;/tt&gt; if the resource could not be found" fulltype="java.net.URL" type="URL">
				<comment>
					<description>Finds the resource with the given name. Class loader implementations
 should override this method to specify where to find resources.  &lt;/p&gt;</description>
					<attribute name="@param">
						<description>name
         The resource name</description>
					</attribute>
					<attribute name="@return">
						<description>A &lt;tt&gt;URL&lt;/tt&gt; object for reading the resource, or
          &lt;tt&gt;null&lt;/tt&gt; if the resource could not be found</description>
					</attribute>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The resource name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="protected" name="findResources" returncomment="An enumeration of {@link java.net.URL &lt;tt&gt;URL&lt;/tt&gt;} objects for
          the resources" fulltype="java.util.Enumeration" type="Enumeration">
				<comment>
					<description>Returns an enumeration of {@link java.net.URL &lt;tt&gt;URL&lt;/tt&gt;} objects
 representing all the resources with the given name. Class loader
 implementations should override this method to specify where to load
 resources from.  &lt;/p&gt;</description>
					<attribute name="@param">
						<description>name
         The resource name</description>
					</attribute>
					<attribute name="@return">
						<description>An enumeration of {@link java.net.URL &lt;tt&gt;URL&lt;/tt&gt;} objects for
          the resources</description>
					</attribute>
					<attribute name="@throws">
						<description>IOException
          If I/O errors occur</description>
					</attribute>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The resource name" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception comment="If I/O errors occur" fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="getSystemResource" returncomment="A {@link java.net.URL &lt;tt&gt;URL&lt;/tt&gt;} object for reading the
          resource, or &lt;tt&gt;null&lt;/tt&gt; if the resource could not be found" fulltype="java.net.URL" type="URL">
				<comment>
					<description>Find a resource of the specified name from the search path used to load
 classes.  This method locates the resource through the system class
 loader (see {@link #getSystemClassLoader()}).  &lt;/p&gt;</description>
					<attribute name="@param">
						<description>name
         The resource name</description>
					</attribute>
					<attribute name="@return">
						<description>A {@link java.net.URL &lt;tt&gt;URL&lt;/tt&gt;} object for reading the
          resource, or &lt;tt&gt;null&lt;/tt&gt; if the resource could not be found</description>
					</attribute>
					<attribute name="@since">
						<description>1.1</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The resource name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getSystemResources" returncomment="An enumeration of resource {@link java.net.URL &lt;tt&gt;URL&lt;/tt&gt;}
          objects" fulltype="java.util.Enumeration" type="Enumeration">
				<comment>
					<description>Finds all resources of the specified name from the search path used to
 load classes.  The resources thus found are returned as an
 {@link java.util.Enumeration &lt;tt&gt;Enumeration&lt;/tt&gt;} of {@link
 java.net.URL &lt;tt&gt;URL&lt;/tt&gt;} objects.

 &lt;p&gt; The search order is described in the documentation for {@link
 #getSystemResource(String)}.  &lt;/p&gt;</description>
					<attribute name="@param">
						<description>name
         The resource name</description>
					</attribute>
					<attribute name="@return">
						<description>An enumeration of resource {@link java.net.URL &lt;tt&gt;URL&lt;/tt&gt;}
          objects</description>
					</attribute>
					<attribute name="@throws">
						<description>IOException
          If I/O errors occur</description>
					</attribute>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The resource name" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception comment="If I/O errors occur" fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method static="true" visibility="private" name="getBootstrapResource" fulltype="java.net.URL" type="URL">
				<comment>
					<description>Find resources from the VM&apos;s built-in classloader.</description>
				</comment>
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="private" name="getBootstrapResources" fulltype="java.util.Enumeration" type="Enumeration">
				<comment>
					<description>Find resources from the VM&apos;s built-in classloader.</description>
				</comment>
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method static="true" visibility="package-private" name="getBootstrapClassPath" fulltype="sun.misc.URLClassPath" type="URLClassPath" />
			<method visibility="public" name="getResourceAsStream" returncomment="An input stream for reading the resource, or &lt;tt&gt;null&lt;/tt&gt;
          if the resource could not be found" fulltype="java.io.InputStream" type="InputStream">
				<comment>
					<description>Returns an input stream for reading the specified resource.

 &lt;p&gt; The search order is described in the documentation for {@link
 #getResource(String)}.  &lt;/p&gt;</description>
					<attribute name="@param">
						<description>name
         The resource name</description>
					</attribute>
					<attribute name="@return">
						<description>An input stream for reading the resource, or &lt;tt&gt;null&lt;/tt&gt;
          if the resource could not be found</description>
					</attribute>
					<attribute name="@since">
						<description>1.1</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The resource name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getSystemResourceAsStream" returncomment="An input stream for reading the resource, or &lt;tt&gt;null&lt;/tt&gt;
          if the resource could not be found" fulltype="java.io.InputStream" type="InputStream">
				<comment>
					<description>Open for reading, a resource of the specified name from the search path
 used to load classes.  This method locates the resource through the
 system class loader (see {@link #getSystemClassLoader()}).  &lt;/p&gt;</description>
					<attribute name="@param">
						<description>name
         The resource name</description>
					</attribute>
					<attribute name="@return">
						<description>An input stream for reading the resource, or &lt;tt&gt;null&lt;/tt&gt;
          if the resource could not be found</description>
					</attribute>
					<attribute name="@since">
						<description>1.1</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The resource name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method final="true" visibility="public" name="getParent" returncomment="The parent &lt;tt&gt;ClassLoader&lt;/tt&gt;" fulltype="java.lang.ClassLoader" type="ClassLoader">
				<comment>
					<description>Returns the parent class loader for delegation. Some implementations may
 use &lt;tt&gt;null&lt;/tt&gt; to represent the bootstrap class loader. This method
 will return &lt;tt&gt;null&lt;/tt&gt; in such implementations if this class loader&apos;s
 parent is the bootstrap class loader.

 &lt;p&gt; If a security manager is present, and the invoker&apos;s class loader is
 not &lt;tt&gt;null&lt;/tt&gt; and is not an ancestor of this class loader, then this
 method invokes the security manager&apos;s {@link
 SecurityManager#checkPermission(java.security.Permission)
 &lt;tt&gt;checkPermission&lt;/tt&gt;} method with a {@link
 RuntimePermission#RuntimePermission(String)
 &lt;tt&gt;RuntimePermission(&quot;getClassLoader&quot;)&lt;/tt&gt;} permission to verify
 access to the parent class loader is permitted.  If not, a
 &lt;tt&gt;SecurityException&lt;/tt&gt; will be thrown.  &lt;/p&gt;</description>
					<attribute name="@return">
						<description>The parent &lt;tt&gt;ClassLoader&lt;/tt&gt;</description>
					</attribute>
					<attribute name="@throws">
						<description>SecurityException
          If a security manager exists and its &lt;tt&gt;checkPermission&lt;/tt&gt;
          method doesn&apos;t allow access to this class loader&apos;s parent class
          loader.</description>
					</attribute>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="getSystemClassLoader" returncomment="The system &lt;tt&gt;ClassLoader&lt;/tt&gt; for delegation, or
          &lt;tt&gt;null&lt;/tt&gt; if none" fulltype="java.lang.ClassLoader" type="ClassLoader">
				<comment>
					<description>Returns the system class loader for delegation.  This is the default
 delegation parent for new &lt;tt&gt;ClassLoader&lt;/tt&gt; instances, and is
 typically the class loader used to start the application.

 &lt;p&gt; This method is first invoked early in the runtime&apos;s startup
 sequence, at which point it creates the system class loader and sets it
 as the context class loader of the invoking &lt;tt&gt;Thread&lt;/tt&gt;.

 &lt;p&gt; The default system class loader is an implementation-dependent
 instance of this class.

 &lt;p&gt; If the system property &quot;&lt;tt&gt;java.system.class.loader&lt;/tt&gt;&quot; is defined
 when this method is first invoked then the value of that property is
 taken to be the name of a class that will be returned as the system
 class loader.  The class is loaded using the default system class loader
 and must define a public constructor that takes a single parameter of
 type &lt;tt&gt;ClassLoader&lt;/tt&gt; which is used as the delegation parent.  An
 instance is then created using this constructor with the default system
 class loader as the parameter.  The resulting class loader is defined
 to be the system class loader.

 &lt;p&gt; If a security manager is present, and the invoker&apos;s class loader is
 not &lt;tt&gt;null&lt;/tt&gt; and the invoker&apos;s class loader is not the same as or
 an ancestor of the system class loader, then this method invokes the
 security manager&apos;s {@link
 SecurityManager#checkPermission(java.security.Permission)
 &lt;tt&gt;checkPermission&lt;/tt&gt;} method with a {@link
 RuntimePermission#RuntimePermission(String)
 &lt;tt&gt;RuntimePermission(&quot;getClassLoader&quot;)&lt;/tt&gt;} permission to verify
 access to the system class loader.  If not, a
 &lt;tt&gt;SecurityException&lt;/tt&gt; will be thrown.  &lt;/p&gt;</description>
					<attribute name="@return">
						<description>The system &lt;tt&gt;ClassLoader&lt;/tt&gt; for delegation, or
          &lt;tt&gt;null&lt;/tt&gt; if none</description>
					</attribute>
					<attribute name="@throws">
						<description>SecurityException
          If a security manager exists and its &lt;tt&gt;checkPermission&lt;/tt&gt;
          method doesn&apos;t allow access to the system class loader.</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalStateException
          If invoked recursively during the construction of the class
          loader specified by the &quot;&lt;tt&gt;java.system.class.loader&lt;/tt&gt;&quot;
          property.</description>
					</attribute>
					<attribute name="@throws">
						<description>Error
          If the system property &quot;&lt;tt&gt;java.system.class.loader&lt;/tt&gt;&quot;
          is defined but the named class could not be loaded, the
          provider class does not define the required constructor, or an
          exception is thrown by that constructor when it is invoked. The
          underlying cause of the error can be retrieved via the
          {@link Throwable#getCause()} method.</description>
					</attribute>
					<attribute name="@revised">
						<description>1.4</description>
					</attribute>
				</comment>
			</method>
			<method static="true" synchronized="true" visibility="private" name="initSystemClassLoader" fulltype="void" type="void" />
			<method visibility="package-private" name="isAncestor" fulltype="boolean" type="boolean">
				<params>
					<param name="cl" fulltype="java.lang.ClassLoader" type="ClassLoader" />
				</params>
			</method>
			<method static="true" visibility="package-private" name="getCallerClassLoader" fulltype="java.lang.ClassLoader" type="ClassLoader" />
			<method visibility="protected" name="definePackage" returncomment="The newly defined &lt;tt&gt;Package&lt;/tt&gt; object" fulltype="java.lang.Package" type="Package">
				<comment>
					<description>Defines a package by name in this &lt;tt&gt;ClassLoader&lt;/tt&gt;.  This allows
 class loaders to define the packages for their classes. Packages must
 be created before the class is defined, and package names must be
 unique within a class loader and cannot be redefined or changed once
 created.  &lt;/p&gt;</description>
					<attribute name="@param">
						<description>name
         The package name</description>
					</attribute>
					<attribute name="@param">
						<description>specTitle
         The specification title</description>
					</attribute>
					<attribute name="@param">
						<description>specVersion
         The specification version</description>
					</attribute>
					<attribute name="@param">
						<description>specVendor
         The specification vendor</description>
					</attribute>
					<attribute name="@param">
						<description>implTitle
         The implementation title</description>
					</attribute>
					<attribute name="@param">
						<description>implVersion
         The implementation version</description>
					</attribute>
					<attribute name="@param">
						<description>implVendor
         The implementation vendor</description>
					</attribute>
					<attribute name="@param">
						<description>sealBase
         If not &lt;tt&gt;null&lt;/tt&gt;, then this package is sealed with
         respect to the given code source {@link java.net.URL
         &lt;tt&gt;URL&lt;/tt&gt;}  object.  Otherwise, the package is not sealed.</description>
					</attribute>
					<attribute name="@return">
						<description>The newly defined &lt;tt&gt;Package&lt;/tt&gt; object</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalArgumentException
          If package name duplicates an existing package either in this
          class loader or one of its ancestors</description>
					</attribute>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The package name" fulltype="java.lang.String" type="String" />
					<param name="specTitle" comment="The specification title" fulltype="java.lang.String" type="String" />
					<param name="specVersion" comment="The specification version" fulltype="java.lang.String" type="String" />
					<param name="specVendor" comment="The specification vendor" fulltype="java.lang.String" type="String" />
					<param name="implTitle" comment="The implementation title" fulltype="java.lang.String" type="String" />
					<param name="implVersion" comment="The implementation version" fulltype="java.lang.String" type="String" />
					<param name="implVendor" comment="The implementation vendor" fulltype="java.lang.String" type="String" />
					<param name="sealBase" comment="If not &lt;tt&gt;null&lt;/tt&gt;, then this package is sealed with
         respect to the given code source {@link java.net.URL
         &lt;tt&gt;URL&lt;/tt&gt;}  object.  Otherwise, the package is not sealed." fulltype="java.net.URL" type="URL" />
				</params>
				<exceptions>
					<exception comment="If package name duplicates an existing package either in this
          class loader or one of its ancestors" fulltype="java.lang.IllegalArgumentException" type="IllegalArgumentException" />
				</exceptions>
			</method>
			<method visibility="protected" name="getPackage" returncomment="The &lt;tt&gt;Package&lt;/tt&gt; corresponding to the given name, or
          &lt;tt&gt;null&lt;/tt&gt; if not found" fulltype="java.lang.Package" type="Package">
				<comment>
					<description>Returns a &lt;tt&gt;Package&lt;/tt&gt; that has been defined by this class loader
 or any of its ancestors.  &lt;/p&gt;</description>
					<attribute name="@param">
						<description>name
         The package name</description>
					</attribute>
					<attribute name="@return">
						<description>The &lt;tt&gt;Package&lt;/tt&gt; corresponding to the given name, or
          &lt;tt&gt;null&lt;/tt&gt; if not found</description>
					</attribute>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The package name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="protected" name="getPackages" returncomment="The array of &lt;tt&gt;Package&lt;/tt&gt; objects defined by this
          &lt;tt&gt;ClassLoader&lt;/tt&gt;" fulltype="java.lang.Package[]" type="Package">
				<comment>
					<description>Returns all of the &lt;tt&gt;Packages&lt;/tt&gt; defined by this class loader and
 its ancestors.  &lt;/p&gt;</description>
					<attribute name="@return">
						<description>The array of &lt;tt&gt;Package&lt;/tt&gt; objects defined by this
          &lt;tt&gt;ClassLoader&lt;/tt&gt;</description>
					</attribute>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="protected" name="findLibrary" returncomment="The absolute path of the native library" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the absolute path name of a native library.  The VM invokes this
 method to locate the native libraries that belong to classes loaded with
 this class loader. If this method returns &lt;tt&gt;null&lt;/tt&gt;, the VM
 searches the library along the path specified as the
 &quot;&lt;tt&gt;java.library.path&lt;/tt&gt;&quot; property.  &lt;/p&gt;</description>
					<attribute name="@param">
						<description>libname
         The library name</description>
					</attribute>
					<attribute name="@return">
						<description>The absolute path of the native library</description>
					</attribute>
					<attribute name="@see">
						<description>System#loadLibrary(String)</description>
					</attribute>
					<attribute name="@see">
						<description>System#mapLibraryName(String)</description>
					</attribute>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
				<params>
					<param name="libname" comment="The library name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method synchronized="true" visibility="private" name="getDefaultDomain" fulltype="java.security.ProtectionDomain" type="ProtectionDomain" />
			<method static="true" visibility="private" name="initializePath" fulltype="java.lang.String[]" type="String">
				<params>
					<param name="propname" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="package-private" name="loadLibrary" fulltype="void" type="void">
				<params>
					<param name="fromClass" fulltype="java.lang.Class" type="Class" />
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="isAbsolute" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="private" name="loadLibrary0" fulltype="boolean" type="boolean">
				<params>
					<param name="fromClass" fulltype="java.lang.Class" type="Class" />
					<param name="file" fulltype="java.io.File" type="File" />
				</params>
			</method>
			<method static="true" visibility="package-private" name="findNative" fulltype="long" type="long">
				<params>
					<param name="loader" fulltype="java.lang.ClassLoader" type="ClassLoader" />
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method synchronized="true" visibility="public" name="setDefaultAssertionStatus" fulltype="void" type="void">
				<comment>
					<description>Sets the default assertion status for this class loader.  This setting
 determines whether classes loaded by this class loader and initialized
 in the future will have assertions enabled or disabled by default.
 This setting may be overridden on a per-package or per-class basis by
 invoking {@link #setPackageAssertionStatus(String, boolean)} or {@link
 #setClassAssertionStatus(String, boolean)}.  &lt;/p&gt;</description>
					<attribute name="@param">
						<description>enabled
         &lt;tt&gt;true&lt;/tt&gt; if classes loaded by this class loader will
         henceforth have assertions enabled by default, &lt;tt&gt;false&lt;/tt&gt;
         if they will have assertions disabled by default.</description>
					</attribute>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
				<params>
					<param name="enabled" comment="&lt;tt&gt;true&lt;/tt&gt; if classes loaded by this class loader will
         henceforth have assertions enabled by default, &lt;tt&gt;false&lt;/tt&gt;
         if they will have assertions disabled by default." fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method synchronized="true" visibility="public" name="setPackageAssertionStatus" fulltype="void" type="void">
				<comment>
					<description>Sets the package default assertion status for the named package.  The
 package default assertion status determines the assertion status for
 classes initialized in the future that belong to the named package or
 any of its &quot;subpackages&quot;.

 &lt;p&gt; A subpackage of a package named p is any package whose name begins
 with &quot;&lt;tt&gt;p.&lt;/tt&gt;&quot;.  For example, &lt;tt&gt;javax.swing.text&lt;/tt&gt; is a
 subpackage of &lt;tt&gt;javax.swing&lt;/tt&gt;, and both &lt;tt&gt;java.util&lt;/tt&gt; and
 &lt;tt&gt;java.lang.reflect&lt;/tt&gt; are subpackages of &lt;tt&gt;java&lt;/tt&gt;.

 &lt;p&gt; In the event that multiple package defaults apply to a given class,
 the package default pertaining to the most specific package takes
 precedence over the others.  For example, if &lt;tt&gt;javax.lang&lt;/tt&gt; and
 &lt;tt&gt;javax.lang.reflect&lt;/tt&gt; both have package defaults associated with
 them, the latter package default applies to classes in
 &lt;tt&gt;javax.lang.reflect&lt;/tt&gt;.

 &lt;p&gt; Package defaults take precedence over the class loader&apos;s default
 assertion status, and may be overridden on a per-class basis by invoking
 {@link #setClassAssertionStatus(String, boolean)}.  &lt;/p&gt;</description>
					<attribute name="@param">
						<description>packageName
         The name of the package whose package default assertion status
         is to be set. A &lt;tt&gt;null&lt;/tt&gt; value indicates the unnamed
         package that is &quot;current&quot;
         (&lt;a href=&quot;http://java.sun.com/docs/books/jls/&quot;&gt;Java Language
         Specification&lt;/a&gt;, section 7.4.2).</description>
					</attribute>
					<attribute name="@param">
						<description>enabled
         &lt;tt&gt;true&lt;/tt&gt; if classes loaded by this classloader and
         belonging to the named package or any of its subpackages will
         have assertions enabled by default, &lt;tt&gt;false&lt;/tt&gt; if they will
         have assertions disabled by default.</description>
					</attribute>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
				<params>
					<param name="packageName" comment="The name of the package whose package default assertion status
         is to be set. A &lt;tt&gt;null&lt;/tt&gt; value indicates the unnamed
         package that is &quot;current&quot;
         (&lt;a href=&quot;http://java.sun.com/docs/books/jls/&quot;&gt;Java Language
         Specification&lt;/a&gt;, section 7.4.2)." fulltype="java.lang.String" type="String" />
					<param name="enabled" comment="&lt;tt&gt;true&lt;/tt&gt; if classes loaded by this classloader and
         belonging to the named package or any of its subpackages will
         have assertions enabled by default, &lt;tt&gt;false&lt;/tt&gt; if they will
         have assertions disabled by default." fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method synchronized="true" visibility="public" name="setClassAssertionStatus" fulltype="void" type="void">
				<comment>
					<description>Sets the desired assertion status for the named top-level class in this
 class loader and any nested classes contained therein.  This setting
 takes precedence over the class loader&apos;s default assertion status, and
 over any applicable per-package default.  This method has no effect if
 the named class has already been initialized.  (Once a class is
 initialized, its assertion status cannot change.)

 &lt;p&gt; If the named class is not a top-level class, this invocation will
 have no effect on the actual assertion status of any class. &lt;/p&gt;</description>
					<attribute name="@param">
						<description>className
         The fully qualified class name of the top-level class whose
         assertion status is to be set.</description>
					</attribute>
					<attribute name="@param">
						<description>enabled
         &lt;tt&gt;true&lt;/tt&gt; if the named class is to have assertions
         enabled when (and if) it is initialized, &lt;tt&gt;false&lt;/tt&gt; if the
         class is to have assertions disabled.</description>
					</attribute>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
				<params>
					<param name="className" comment="The fully qualified class name of the top-level class whose
         assertion status is to be set." fulltype="java.lang.String" type="String" />
					<param name="enabled" comment="&lt;tt&gt;true&lt;/tt&gt; if the named class is to have assertions
         enabled when (and if) it is initialized, &lt;tt&gt;false&lt;/tt&gt; if the
         class is to have assertions disabled." fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method synchronized="true" visibility="public" name="clearAssertionStatus" fulltype="void" type="void">
				<comment>
					<description>Sets the default assertion status for this class loader to
 &lt;tt&gt;false&lt;/tt&gt; and discards any package defaults or class assertion
 status settings associated with the class loader.  This method is
 provided so that class loaders can be made to ignore any command line or
 persistent assertion status settings and &quot;start with a clean slate.&quot;
 &lt;/p&gt;</description>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
			</method>
			<method synchronized="true" visibility="package-private" name="desiredAssertionStatus" returncomment="The desired assertion status of the specified class." fulltype="boolean" type="boolean">
				<comment>
					<description>Returns the assertion status that would be assigned to the specified
 class if it were to be initialized at the time this method is invoked.
 If the named class has had its assertion status set, the most recent
 setting will be returned; otherwise, if any package default assertion
 status pertains to this class, the most recent setting for the most
 specific pertinent package default assertion status is returned;
 otherwise, this class loader&apos;s default assertion status is returned.
 &lt;/p&gt;</description>
					<attribute name="@param">
						<description>className
         The fully qualified class name of the class whose desired
         assertion status is being queried.</description>
					</attribute>
					<attribute name="@return">
						<description>The desired assertion status of the specified class.</description>
					</attribute>
					<attribute name="@see">
						<description>#setClassAssertionStatus(String, boolean)</description>
					</attribute>
					<attribute name="@see">
						<description>#setPackageAssertionStatus(String, boolean)</description>
					</attribute>
					<attribute name="@see">
						<description>#setDefaultAssertionStatus(boolean)</description>
					</attribute>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
				<params>
					<param name="className" comment="The fully qualified class name of the class whose desired
         assertion status is being queried." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="private" name="initializeJavaAssertionMaps" fulltype="void" type="void" />
			<method static="true" visibility="private" name="retrieveDirectives" fulltype="java.lang.AssertionStatusDirectives" type="AssertionStatusDirectives" />
		</methods>
		<jelclass superclass="Object" visibility="package-private" package="java.lang" superclassfulltype="java.lang.Object" fulltype="java.lang.ClassLoader.NativeLibrary" type="ClassLoader.NativeLibrary">
			<comment>
				<description>The inner class NativeLibrary denotes a loaded native library instance.
 Every classloader contains a vector of loaded native libraries in the
 private field &lt;tt&gt;nativeLibraries&lt;/tt&gt;.  The native libraries loaded
 into the system are entered into the &lt;tt&gt;systemNativeLibraries&lt;/tt&gt;
 vector.

 &lt;p&gt; Every native library requires a particular version of JNI. This is
 denoted by the private &lt;tt&gt;jniVersion&lt;/tt&gt; field.  This field is set by
 the VM when it loads the library, and used by the VM to pass the correct
 version of JNI to the native methods.  &lt;/p&gt;</description>
				<attribute name="@see">
					<description>ClassLoader</description>
				</attribute>
				<attribute name="@since">
					<description>1.2</description>
				</attribute>
			</comment>
			<fields>
				<field visibility="package-private" name="handle" fulltype="long" type="long" />
				<field visibility="private" name="jniVersion" fulltype="int" type="int" />
				<field visibility="private" name="fromClass" fulltype="java.lang.Class" type="Class" />
				<field visibility="package-private" name="name" fulltype="java.lang.String" type="String" />
			</fields>
			<methods>
				<constructor visibility="public" name="ClassLoader.NativeLibrary">
					<params>
						<param name="fromClass" fulltype="java.lang.Class" type="Class" />
						<param name="name" fulltype="java.lang.String" type="String" />
					</params>
				</constructor>
				<method visibility="package-private" name="load" fulltype="void" type="void">
					<params>
						<param name="name" fulltype="java.lang.String" type="String" />
					</params>
				</method>
				<method visibility="package-private" name="find" fulltype="long" type="long">
					<params>
						<param name="name" fulltype="java.lang.String" type="String" />
					</params>
				</method>
				<method visibility="package-private" name="unload" fulltype="void" type="void" />
				<method visibility="protected" name="finalize" fulltype="void" type="void" />
				<method static="true" visibility="package-private" name="getFromClass" fulltype="java.lang.Class" type="Class" />
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="Object" visibility="package-private" package="java.lang" superclassfulltype="java.lang.Object" fulltype="java.lang.ClassLoader.NativeLibrary" type="ClassLoader.NativeLibrary">
		<comment>
			<description>The inner class NativeLibrary denotes a loaded native library instance.
 Every classloader contains a vector of loaded native libraries in the
 private field &lt;tt&gt;nativeLibraries&lt;/tt&gt;.  The native libraries loaded
 into the system are entered into the &lt;tt&gt;systemNativeLibraries&lt;/tt&gt;
 vector.

 &lt;p&gt; Every native library requires a particular version of JNI. This is
 denoted by the private &lt;tt&gt;jniVersion&lt;/tt&gt; field.  This field is set by
 the VM when it loads the library, and used by the VM to pass the correct
 version of JNI to the native methods.  &lt;/p&gt;</description>
			<attribute name="@see">
				<description>ClassLoader</description>
			</attribute>
			<attribute name="@since">
				<description>1.2</description>
			</attribute>
		</comment>
		<fields>
			<field visibility="package-private" name="handle" fulltype="long" type="long" />
			<field visibility="private" name="jniVersion" fulltype="int" type="int" />
			<field visibility="private" name="fromClass" fulltype="java.lang.Class" type="Class" />
			<field visibility="package-private" name="name" fulltype="java.lang.String" type="String" />
		</fields>
		<methods>
			<constructor visibility="public" name="ClassLoader.NativeLibrary">
				<params>
					<param name="fromClass" fulltype="java.lang.Class" type="Class" />
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="package-private" name="load" fulltype="void" type="void">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="package-private" name="find" fulltype="long" type="long">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="package-private" name="unload" fulltype="void" type="void" />
			<method visibility="protected" name="finalize" fulltype="void" type="void" />
			<method static="true" visibility="package-private" name="getFromClass" fulltype="java.lang.Class" type="Class" />
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="package-private" package="java.lang" superclassfulltype="java.lang.Object" fulltype="java.lang.SystemClassLoaderAction" type="SystemClassLoaderAction">
		<implements>
			<interface fulltype="java.security.PrivilegedExceptionAction" type="PrivilegedExceptionAction" />
		</implements>
		<fields>
			<field visibility="private" name="parent" fulltype="java.lang.ClassLoader" type="ClassLoader" />
		</fields>
		<methods>
			<constructor visibility="package-private" name="SystemClassLoaderAction">
				<params>
					<param name="parent" fulltype="java.lang.ClassLoader" type="ClassLoader" />
				</params>
			</constructor>
			<method visibility="public" name="run" fulltype="java.lang.Object" type="Object">
				<exceptions>
					<exception fulltype="java.lang.Exception" type="Exception" />
				</exceptions>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="java.lang" interface="true" fulltype="java.lang.Override" type="Override">
		<implements>
			<interface fulltype="java.lang.annotation.Annotation" type="Annotation" />
		</implements>
		<comment>
			<description>Indicates that a method declaration is intended to override a
 method declaration in a superclass.  If a method is annotated with
 this annotation type but does not override a superclass method,
 compilers are required to generate an error message.</description>
			<attribute name="@author">
				<description>Joshua Bloch</description>
			</attribute>
			<attribute name="@since">
				<description>1.5</description>
			</attribute>
		</comment>
	</jelclass>
	<jelclass superclass="RuntimeException" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.RuntimeException" fulltype="java.lang.NullPointerException" type="NullPointerException">
		<comment>
			<description>Thrown when an application attempts to use &lt;code&gt;null&lt;/code&gt; in a
 case where an object is required. These include:
 &lt;ul&gt;
 &lt;li&gt;Calling the instance method of a &lt;code&gt;null&lt;/code&gt; object.
 &lt;li&gt;Accessing or modifying the field of a &lt;code&gt;null&lt;/code&gt; object.
 &lt;li&gt;Taking the length of &lt;code&gt;null&lt;/code&gt; as if it were an array.
 &lt;li&gt;Accessing or modifying the slots of &lt;code&gt;null&lt;/code&gt; as if it
     were an array.
 &lt;li&gt;Throwing &lt;code&gt;null&lt;/code&gt; as if it were a &lt;code&gt;Throwable&lt;/code&gt;
     value.
 &lt;/ul&gt;
 &lt;p&gt;
 Applications should throw instances of this class to indicate
 other illegal uses of the &lt;code&gt;null&lt;/code&gt; object.</description>
			<attribute name="@author">
				<description>unascribed</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.0</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="NullPointerException">
				<comment>
					<description>Constructs a &lt;code&gt;NullPointerException&lt;/code&gt; with no detail message.</description>
				</comment>
			</constructor>
			<constructor visibility="public" name="NullPointerException">
				<comment>
					<description>Constructs a &lt;code&gt;NullPointerException&lt;/code&gt; with the specified
 detail message.</description>
					<attribute name="@param">
						<description>s   the detail message.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the detail message." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass abstract="true" superclass="Error" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.Error" fulltype="java.lang.VirtualMachineError" type="VirtualMachineError">
		<comment>
			<description>Thrown to indicate that the Java Virtual Machine is broken or has
 run out of resources necessary for it to continue operating.</description>
			<attribute name="@author">
				<description>Frank Yellin</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.0</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="VirtualMachineError">
				<comment>
					<description>Constructs a &lt;code&gt;VirtualMachineError&lt;/code&gt; with no detail message.</description>
				</comment>
			</constructor>
			<constructor visibility="public" name="VirtualMachineError">
				<comment>
					<description>Constructs a &lt;code&gt;VirtualMachineError&lt;/code&gt; with the specified
 detail message.</description>
					<attribute name="@param">
						<description>s   the detail message.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the detail message." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass final="true" superclass="AbstractStringBuilder" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.AbstractStringBuilder" fulltype="java.lang.StringBuffer" type="StringBuffer">
		<implements>
			<interface fulltype="java.io.Serializable" type="Serializable" />
			<interface fulltype="java.lang.CharSequence" type="CharSequence" />
		</implements>
		<comment>
			<description>A thread-safe, mutable sequence of characters.
 A string buffer is like a {@link String}, but can be modified. At any
 point in time it contains some particular sequence of characters, but
 the length and content of the sequence can be changed through certain
 method calls.
 &lt;p&gt;
 String buffers are safe for use by multiple threads. The methods
 are synchronized where necessary so that all the operations on any
 particular instance behave as if they occur in some serial order
 that is consistent with the order of the method calls made by each of
 the individual threads involved.
 &lt;p&gt;
 The principal operations on a &lt;code&gt;StringBuffer&lt;/code&gt; are the
 &lt;code&gt;append&lt;/code&gt; and &lt;code&gt;insert&lt;/code&gt; methods, which are
 overloaded so as to accept data of any type. Each effectively
 converts a given datum to a string and then appends or inserts the
 characters of that string to the string buffer. The
 &lt;code&gt;append&lt;/code&gt; method always adds these characters at the end
 of the buffer; the &lt;code&gt;insert&lt;/code&gt; method adds the characters at
 a specified point.
 &lt;p&gt;
 For example, if &lt;code&gt;z&lt;/code&gt; refers to a string buffer object
 whose current contents are &quot;&lt;code&gt;start&lt;/code&gt;&quot;, then
 the method call &lt;code&gt;z.append(&quot;le&quot;)&lt;/code&gt; would cause the string
 buffer to contain &quot;&lt;code&gt;startle&lt;/code&gt;&quot;, whereas
 &lt;code&gt;z.insert(4, &quot;le&quot;)&lt;/code&gt; would alter the string buffer to
 contain &quot;&lt;code&gt;starlet&lt;/code&gt;&quot;.
 &lt;p&gt;
 In general, if sb refers to an instance of a &lt;code&gt;StringBuffer&lt;/code&gt;,
 then &lt;code&gt;sb.append(x)&lt;/code&gt; has the same effect as
 &lt;code&gt;sb.insert(sb.length(),&amp;nbsp;x)&lt;/code&gt;.
 &lt;p&gt;
 Whenever an operation occurs involving a source sequence (such as
 appending or inserting from a source sequence) this class synchronizes
 only on the string buffer performing the operation, not on the source.
 &lt;p&gt;
 Every string buffer has a capacity. As long as the length of the
 character sequence contained in the string buffer does not exceed
 the capacity, it is not necessary to allocate a new internal
 buffer array. If the internal buffer overflows, it is
 automatically made larger.

 As of  release JDK 5, this class has been supplemented with an equivalent
 class designed for use by a single thread, {@link StringBuilder}.  The
 &lt;tt&gt;StringBuilder&lt;/tt&gt; class should generally be used in preference to
 this one, as it supports all of the same operations but it is faster, as
 it performs no synchronization.</description>
			<attribute name="@author">
				<description>Arthur van Hoff</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.StringBuilder</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.String</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.0</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="3388685877147921107" visibility="package-private" name="serialVersionUID" constexpr="3388685877147921107L" fulltype="long" type="long">
				<comment>
					<description>use serialVersionUID from JDK 1.0.2 for interoperability</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="private" name="serialPersistentFields" fulltype="java.io.ObjectStreamField[]" type="ObjectStreamField">
				<comment>
					<description>Serializable fields for StringBuffer.</description>
					<attribute name="@serialField">
						<description>value  char[]
              The backing character array of this StringBuffer.</description>
					</attribute>
					<attribute name="@serialField">
						<description>count int
              The number of characters in this StringBuffer.</description>
					</attribute>
					<attribute name="@serialField">
						<description>shared  boolean
              A flag indicating whether the backing array is shared.
              The value is ignored upon deserialization.</description>
					</attribute>
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="public" name="StringBuffer">
				<comment>
					<description>Constructs a string buffer with no characters in it and an
 initial capacity of 16 characters.</description>
				</comment>
			</constructor>
			<constructor visibility="public" name="StringBuffer">
				<comment>
					<description>Constructs a string buffer with no characters in it and
 the specified initial capacity.</description>
					<attribute name="@param">
						<description>capacity  the initial capacity.</description>
					</attribute>
					<attribute name="@exception">
						<description>NegativeArraySizeException  if the &lt;code&gt;capacity&lt;/code&gt;
               argument is less than &lt;code&gt;0&lt;/code&gt;.</description>
					</attribute>
				</comment>
				<params>
					<param name="capacity" comment="the initial capacity." fulltype="int" type="int" />
				</params>
			</constructor>
			<constructor visibility="public" name="StringBuffer">
				<comment>
					<description>Constructs a string buffer initialized to the contents of the
 specified string. The initial capacity of the string buffer is
 &lt;code&gt;16&lt;/code&gt; plus the length of the string argument.</description>
					<attribute name="@param">
						<description>str   the initial contents of the buffer.</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException if &lt;code&gt;str&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="str" comment="the initial contents of the buffer." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="StringBuffer">
				<comment>
					<description>Constructs a string buffer that contains the same characters
 as the specified &lt;code&gt;CharSequence&lt;/code&gt;. The initial capacity of
 the string buffer is &lt;code&gt;16&lt;/code&gt; plus the length of the
 &lt;code&gt;CharSequence&lt;/code&gt; argument.
 &lt;p&gt;
 If the length of the specified &lt;code&gt;CharSequence&lt;/code&gt; is
 less than or equal to zero, then an empty buffer of capacity
 &lt;code&gt;16&lt;/code&gt; is returned.</description>
					<attribute name="@param">
						<description>seq   the sequence to copy.</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException if &lt;code&gt;seq&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="seq" comment="the sequence to copy." fulltype="java.lang.CharSequence" type="CharSequence" />
				</params>
			</constructor>
			<method synchronized="true" visibility="public" name="length" fulltype="int" type="int" />
			<method synchronized="true" visibility="public" name="capacity" fulltype="int" type="int" />
			<method synchronized="true" visibility="public" name="ensureCapacity" fulltype="void" type="void">
				<params>
					<param name="minimumCapacity" fulltype="int" type="int" />
				</params>
			</method>
			<method synchronized="true" visibility="public" name="trimToSize" fulltype="void" type="void">
				<comment>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method synchronized="true" visibility="public" name="setLength" fulltype="void" type="void">
				<comment>
					<attribute name="@throws">
						<description>IndexOutOfBoundsException {@inheritDoc}</description>
					</attribute>
					<attribute name="@see">
						<description>#length()</description>
					</attribute>
				</comment>
				<params>
					<param name="newLength" fulltype="int" type="int" />
				</params>
			</method>
			<method synchronized="true" visibility="public" name="charAt" fulltype="char" type="char">
				<comment>
					<attribute name="@throws">
						<description>IndexOutOfBoundsException {@inheritDoc}</description>
					</attribute>
					<attribute name="@see">
						<description>#length()</description>
					</attribute>
				</comment>
				<params>
					<param name="index" fulltype="int" type="int" />
				</params>
			</method>
			<method synchronized="true" visibility="public" name="codePointAt" fulltype="int" type="int">
				<comment>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="index" fulltype="int" type="int" />
				</params>
			</method>
			<method synchronized="true" visibility="public" name="codePointBefore" fulltype="int" type="int">
				<comment>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="index" fulltype="int" type="int" />
				</params>
			</method>
			<method synchronized="true" visibility="public" name="codePointCount" fulltype="int" type="int">
				<comment>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="beginIndex" fulltype="int" type="int" />
					<param name="endIndex" fulltype="int" type="int" />
				</params>
			</method>
			<method synchronized="true" visibility="public" name="offsetByCodePoints" fulltype="int" type="int">
				<comment>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="index" fulltype="int" type="int" />
					<param name="codePointOffset" fulltype="int" type="int" />
				</params>
			</method>
			<method synchronized="true" visibility="public" name="getChars" fulltype="void" type="void">
				<comment>
					<attribute name="@throws">
						<description>NullPointerException {@inheritDoc}</description>
					</attribute>
					<attribute name="@throws">
						<description>IndexOutOfBoundsException {@inheritDoc}</description>
					</attribute>
				</comment>
				<params>
					<param name="srcBegin" fulltype="int" type="int" />
					<param name="srcEnd" fulltype="int" type="int" />
					<param name="dst" fulltype="char[]" type="char" />
					<param name="dstBegin" fulltype="int" type="int" />
				</params>
			</method>
			<method synchronized="true" visibility="public" name="setCharAt" fulltype="void" type="void">
				<comment>
					<attribute name="@throws">
						<description>IndexOutOfBoundsException {@inheritDoc}</description>
					</attribute>
					<attribute name="@see">
						<description>#length()</description>
					</attribute>
				</comment>
				<params>
					<param name="index" fulltype="int" type="int" />
					<param name="ch" fulltype="char" type="char" />
				</params>
			</method>
			<method synchronized="true" visibility="public" name="append" fulltype="java.lang.StringBuffer" type="StringBuffer">
				<comment>
					<attribute name="@see">
						<description>java.lang.String#valueOf(java.lang.Object)</description>
					</attribute>
					<attribute name="@see">
						<description>#append(java.lang.String)</description>
					</attribute>
				</comment>
				<params>
					<param name="obj" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method synchronized="true" visibility="public" name="append" fulltype="java.lang.StringBuffer" type="StringBuffer">
				<params>
					<param name="str" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method synchronized="true" visibility="public" name="append" returncomment="a reference to this object." fulltype="java.lang.StringBuffer" type="StringBuffer">
				<comment>
					<description>Appends the specified &lt;tt&gt;StringBuffer&lt;/tt&gt; to this sequence.
 &lt;p&gt;
 The characters of the &lt;tt&gt;StringBuffer&lt;/tt&gt; argument are appended,
 in order, to the contents of this &lt;tt&gt;StringBuffer&lt;/tt&gt;, increasing the
 length of this &lt;tt&gt;StringBuffer&lt;/tt&gt; by the length of the argument.
 If &lt;tt&gt;sb&lt;/tt&gt; is &lt;tt&gt;null&lt;/tt&gt;, then the four characters
 &lt;tt&gt;&quot;null&quot;&lt;/tt&gt; are appended to this &lt;tt&gt;StringBuffer&lt;/tt&gt;.
 &lt;p&gt;
 Let &lt;i&gt;n&lt;/i&gt; be the length of the old character sequence, the one
 contained in the &lt;tt&gt;StringBuffer&lt;/tt&gt; just prior to execution of the
 &lt;tt&gt;append&lt;/tt&gt; method. Then the character at index &lt;i&gt;k&lt;/i&gt; in
 the new character sequence is equal to the character at index &lt;i&gt;k&lt;/i&gt;
 in the old character sequence, if &lt;i&gt;k&lt;/i&gt; is less than &lt;i&gt;n&lt;/i&gt;;
 otherwise, it is equal to the character at index &lt;i&gt;k-n&lt;/i&gt; in the
 argument &lt;code&gt;sb&lt;/code&gt;.
 &lt;p&gt;
 This method synchronizes on &lt;code&gt;this&lt;/code&gt; (the destination)
 object but does not synchronize on the source (&lt;code&gt;sb&lt;/code&gt;).</description>
					<attribute name="@param">
						<description>sb   the &lt;tt&gt;StringBuffer&lt;/tt&gt; to append.</description>
					</attribute>
					<attribute name="@return">
						<description>a reference to this object.</description>
					</attribute>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
				<params>
					<param name="sb" comment="the &lt;tt&gt;StringBuffer&lt;/tt&gt; to append." fulltype="java.lang.StringBuffer" type="StringBuffer" />
				</params>
			</method>
			<method visibility="public" name="append" returncomment="a reference to this object." fulltype="java.lang.StringBuffer" type="StringBuffer">
				<comment>
					<description>Appends the specified &lt;code&gt;CharSequence&lt;/code&gt; to this
 sequence.
 &lt;p&gt;
 The characters of the &lt;code&gt;CharSequence&lt;/code&gt; argument are appended,
 in order, increasing the length of this sequence by the length of the
 argument.

 &lt;p&gt;The result of this method is exactly the same as if it were an
 invocation of this.append(s, 0, s.length());

 &lt;p&gt;This method synchronizes on this (the destination)
 object but does not synchronize on the source (&lt;code&gt;s&lt;/code&gt;).

 &lt;p&gt;If &lt;code&gt;s&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, then the four characters
 &lt;code&gt;&quot;null&quot;&lt;/code&gt; are appended.</description>
					<attribute name="@param">
						<description>s the &lt;code&gt;CharSequence&lt;/code&gt; to append.</description>
					</attribute>
					<attribute name="@return">
						<description>a reference to this object.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the &lt;code&gt;CharSequence&lt;/code&gt; to append." fulltype="java.lang.CharSequence" type="CharSequence" />
				</params>
			</method>
			<method synchronized="true" visibility="public" name="append" fulltype="java.lang.StringBuffer" type="StringBuffer">
				<comment>
					<attribute name="@throws">
						<description>IndexOutOfBoundsException {@inheritDoc}</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="s" fulltype="java.lang.CharSequence" type="CharSequence" />
					<param name="start" fulltype="int" type="int" />
					<param name="end" fulltype="int" type="int" />
				</params>
			</method>
			<method synchronized="true" visibility="public" name="append" fulltype="java.lang.StringBuffer" type="StringBuffer">
				<params>
					<param name="str" fulltype="char[]" type="char" />
				</params>
			</method>
			<method synchronized="true" visibility="public" name="append" fulltype="java.lang.StringBuffer" type="StringBuffer">
				<params>
					<param name="str" fulltype="char[]" type="char" />
					<param name="offset" fulltype="int" type="int" />
					<param name="len" fulltype="int" type="int" />
				</params>
			</method>
			<method synchronized="true" visibility="public" name="append" fulltype="java.lang.StringBuffer" type="StringBuffer">
				<comment>
					<attribute name="@see">
						<description>java.lang.String#valueOf(boolean)</description>
					</attribute>
					<attribute name="@see">
						<description>#append(java.lang.String)</description>
					</attribute>
				</comment>
				<params>
					<param name="b" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method synchronized="true" visibility="public" name="append" fulltype="java.lang.StringBuffer" type="StringBuffer">
				<params>
					<param name="c" fulltype="char" type="char" />
				</params>
			</method>
			<method synchronized="true" visibility="public" name="append" fulltype="java.lang.StringBuffer" type="StringBuffer">
				<comment>
					<attribute name="@see">
						<description>java.lang.String#valueOf(int)</description>
					</attribute>
					<attribute name="@see">
						<description>#append(java.lang.String)</description>
					</attribute>
				</comment>
				<params>
					<param name="i" fulltype="int" type="int" />
				</params>
			</method>
			<method synchronized="true" visibility="public" name="appendCodePoint" fulltype="java.lang.StringBuffer" type="StringBuffer">
				<comment>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="codePoint" fulltype="int" type="int" />
				</params>
			</method>
			<method synchronized="true" visibility="public" name="append" fulltype="java.lang.StringBuffer" type="StringBuffer">
				<comment>
					<attribute name="@see">
						<description>java.lang.String#valueOf(long)</description>
					</attribute>
					<attribute name="@see">
						<description>#append(java.lang.String)</description>
					</attribute>
				</comment>
				<params>
					<param name="lng" fulltype="long" type="long" />
				</params>
			</method>
			<method synchronized="true" visibility="public" name="append" fulltype="java.lang.StringBuffer" type="StringBuffer">
				<comment>
					<attribute name="@see">
						<description>java.lang.String#valueOf(float)</description>
					</attribute>
					<attribute name="@see">
						<description>#append(java.lang.String)</description>
					</attribute>
				</comment>
				<params>
					<param name="f" fulltype="float" type="float" />
				</params>
			</method>
			<method synchronized="true" visibility="public" name="append" fulltype="java.lang.StringBuffer" type="StringBuffer">
				<comment>
					<attribute name="@see">
						<description>java.lang.String#valueOf(double)</description>
					</attribute>
					<attribute name="@see">
						<description>#append(java.lang.String)</description>
					</attribute>
				</comment>
				<params>
					<param name="d" fulltype="double" type="double" />
				</params>
			</method>
			<method synchronized="true" visibility="public" name="delete" fulltype="java.lang.StringBuffer" type="StringBuffer">
				<comment>
					<attribute name="@throws">
						<description>StringIndexOutOfBoundsException {@inheritDoc}</description>
					</attribute>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
				<params>
					<param name="start" fulltype="int" type="int" />
					<param name="end" fulltype="int" type="int" />
				</params>
			</method>
			<method synchronized="true" visibility="public" name="deleteCharAt" fulltype="java.lang.StringBuffer" type="StringBuffer">
				<comment>
					<attribute name="@throws">
						<description>StringIndexOutOfBoundsException {@inheritDoc}</description>
					</attribute>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
				<params>
					<param name="index" fulltype="int" type="int" />
				</params>
			</method>
			<method synchronized="true" visibility="public" name="replace" fulltype="java.lang.StringBuffer" type="StringBuffer">
				<comment>
					<attribute name="@throws">
						<description>StringIndexOutOfBoundsException {@inheritDoc}</description>
					</attribute>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
				<params>
					<param name="start" fulltype="int" type="int" />
					<param name="end" fulltype="int" type="int" />
					<param name="str" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method synchronized="true" visibility="public" name="substring" fulltype="java.lang.String" type="String">
				<comment>
					<attribute name="@throws">
						<description>StringIndexOutOfBoundsException {@inheritDoc}</description>
					</attribute>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
				<params>
					<param name="start" fulltype="int" type="int" />
				</params>
			</method>
			<method synchronized="true" visibility="public" name="subSequence" fulltype="java.lang.CharSequence" type="CharSequence">
				<comment>
					<attribute name="@throws">
						<description>IndexOutOfBoundsException {@inheritDoc}</description>
					</attribute>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
				<params>
					<param name="start" fulltype="int" type="int" />
					<param name="end" fulltype="int" type="int" />
				</params>
			</method>
			<method synchronized="true" visibility="public" name="substring" fulltype="java.lang.String" type="String">
				<comment>
					<attribute name="@throws">
						<description>StringIndexOutOfBoundsException {@inheritDoc}</description>
					</attribute>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
				<params>
					<param name="start" fulltype="int" type="int" />
					<param name="end" fulltype="int" type="int" />
				</params>
			</method>
			<method synchronized="true" visibility="public" name="insert" fulltype="java.lang.StringBuffer" type="StringBuffer">
				<comment>
					<attribute name="@throws">
						<description>StringIndexOutOfBoundsException {@inheritDoc}</description>
					</attribute>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
				<params>
					<param name="index" fulltype="int" type="int" />
					<param name="str" fulltype="char[]" type="char" />
					<param name="offset" fulltype="int" type="int" />
					<param name="len" fulltype="int" type="int" />
				</params>
			</method>
			<method synchronized="true" visibility="public" name="insert" fulltype="java.lang.StringBuffer" type="StringBuffer">
				<comment>
					<attribute name="@throws">
						<description>StringIndexOutOfBoundsException {@inheritDoc}</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.String#valueOf(java.lang.Object)</description>
					</attribute>
					<attribute name="@see">
						<description>#insert(int, java.lang.String)</description>
					</attribute>
					<attribute name="@see">
						<description>#length()</description>
					</attribute>
				</comment>
				<params>
					<param name="offset" fulltype="int" type="int" />
					<param name="obj" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method synchronized="true" visibility="public" name="insert" fulltype="java.lang.StringBuffer" type="StringBuffer">
				<comment>
					<attribute name="@throws">
						<description>StringIndexOutOfBoundsException {@inheritDoc}</description>
					</attribute>
					<attribute name="@see">
						<description>#length()</description>
					</attribute>
				</comment>
				<params>
					<param name="offset" fulltype="int" type="int" />
					<param name="str" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method synchronized="true" visibility="public" name="insert" fulltype="java.lang.StringBuffer" type="StringBuffer">
				<comment>
					<attribute name="@throws">
						<description>StringIndexOutOfBoundsException {@inheritDoc}</description>
					</attribute>
				</comment>
				<params>
					<param name="offset" fulltype="int" type="int" />
					<param name="str" fulltype="char[]" type="char" />
				</params>
			</method>
			<method visibility="public" name="insert" fulltype="java.lang.StringBuffer" type="StringBuffer">
				<comment>
					<attribute name="@throws">
						<description>IndexOutOfBoundsException {@inheritDoc}</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="dstOffset" fulltype="int" type="int" />
					<param name="s" fulltype="java.lang.CharSequence" type="CharSequence" />
				</params>
			</method>
			<method synchronized="true" visibility="public" name="insert" fulltype="java.lang.StringBuffer" type="StringBuffer">
				<comment>
					<attribute name="@throws">
						<description>IndexOutOfBoundsException {@inheritDoc}</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="dstOffset" fulltype="int" type="int" />
					<param name="s" fulltype="java.lang.CharSequence" type="CharSequence" />
					<param name="start" fulltype="int" type="int" />
					<param name="end" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="insert" fulltype="java.lang.StringBuffer" type="StringBuffer">
				<comment>
					<attribute name="@throws">
						<description>StringIndexOutOfBoundsException {@inheritDoc}</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.String#valueOf(boolean)</description>
					</attribute>
					<attribute name="@see">
						<description>#insert(int, java.lang.String)</description>
					</attribute>
					<attribute name="@see">
						<description>#length()</description>
					</attribute>
				</comment>
				<params>
					<param name="offset" fulltype="int" type="int" />
					<param name="b" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method synchronized="true" visibility="public" name="insert" fulltype="java.lang.StringBuffer" type="StringBuffer">
				<comment>
					<attribute name="@throws">
						<description>IndexOutOfBoundsException {@inheritDoc}</description>
					</attribute>
					<attribute name="@see">
						<description>#length()</description>
					</attribute>
				</comment>
				<params>
					<param name="offset" fulltype="int" type="int" />
					<param name="c" fulltype="char" type="char" />
				</params>
			</method>
			<method visibility="public" name="insert" fulltype="java.lang.StringBuffer" type="StringBuffer">
				<comment>
					<attribute name="@throws">
						<description>StringIndexOutOfBoundsException {@inheritDoc}</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.String#valueOf(int)</description>
					</attribute>
					<attribute name="@see">
						<description>#insert(int, java.lang.String)</description>
					</attribute>
					<attribute name="@see">
						<description>#length()</description>
					</attribute>
				</comment>
				<params>
					<param name="offset" fulltype="int" type="int" />
					<param name="i" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="insert" fulltype="java.lang.StringBuffer" type="StringBuffer">
				<comment>
					<attribute name="@throws">
						<description>StringIndexOutOfBoundsException {@inheritDoc}</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.String#valueOf(long)</description>
					</attribute>
					<attribute name="@see">
						<description>#insert(int, java.lang.String)</description>
					</attribute>
					<attribute name="@see">
						<description>#length()</description>
					</attribute>
				</comment>
				<params>
					<param name="offset" fulltype="int" type="int" />
					<param name="l" fulltype="long" type="long" />
				</params>
			</method>
			<method visibility="public" name="insert" fulltype="java.lang.StringBuffer" type="StringBuffer">
				<comment>
					<attribute name="@throws">
						<description>StringIndexOutOfBoundsException {@inheritDoc}</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.String#valueOf(float)</description>
					</attribute>
					<attribute name="@see">
						<description>#insert(int, java.lang.String)</description>
					</attribute>
					<attribute name="@see">
						<description>#length()</description>
					</attribute>
				</comment>
				<params>
					<param name="offset" fulltype="int" type="int" />
					<param name="f" fulltype="float" type="float" />
				</params>
			</method>
			<method visibility="public" name="insert" fulltype="java.lang.StringBuffer" type="StringBuffer">
				<comment>
					<attribute name="@throws">
						<description>StringIndexOutOfBoundsException {@inheritDoc}</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.String#valueOf(double)</description>
					</attribute>
					<attribute name="@see">
						<description>#insert(int, java.lang.String)</description>
					</attribute>
					<attribute name="@see">
						<description>#length()</description>
					</attribute>
				</comment>
				<params>
					<param name="offset" fulltype="int" type="int" />
					<param name="d" fulltype="double" type="double" />
				</params>
			</method>
			<method visibility="public" name="indexOf" fulltype="int" type="int">
				<comment>
					<attribute name="@throws">
						<description>NullPointerException {@inheritDoc}</description>
					</attribute>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
				<params>
					<param name="str" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method synchronized="true" visibility="public" name="indexOf" fulltype="int" type="int">
				<comment>
					<attribute name="@throws">
						<description>NullPointerException {@inheritDoc}</description>
					</attribute>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
				<params>
					<param name="str" fulltype="java.lang.String" type="String" />
					<param name="fromIndex" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="lastIndexOf" fulltype="int" type="int">
				<comment>
					<attribute name="@throws">
						<description>NullPointerException {@inheritDoc}</description>
					</attribute>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
				<params>
					<param name="str" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method synchronized="true" visibility="public" name="lastIndexOf" fulltype="int" type="int">
				<comment>
					<attribute name="@throws">
						<description>NullPointerException {@inheritDoc}</description>
					</attribute>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
				<params>
					<param name="str" fulltype="java.lang.String" type="String" />
					<param name="fromIndex" fulltype="int" type="int" />
				</params>
			</method>
			<method synchronized="true" visibility="public" name="reverse" fulltype="java.lang.StringBuffer" type="StringBuffer">
				<comment>
					<attribute name="@since">
						<description>JDK1.0.2</description>
					</attribute>
				</comment>
			</method>
			<method synchronized="true" visibility="public" name="toString" fulltype="java.lang.String" type="String" />
			<method synchronized="true" visibility="private" name="writeObject" fulltype="void" type="void">
				<comment>
					<description>readObject is called to restore the state of the StringBuffer from
 a stream.</description>
				</comment>
				<params>
					<param name="s" fulltype="java.io.ObjectOutputStream" type="ObjectOutputStream" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="private" name="readObject" fulltype="void" type="void">
				<comment>
					<description>readObject is called to restore the state of the StringBuffer from
 a stream.</description>
				</comment>
				<params>
					<param name="s" fulltype="java.io.ObjectInputStream" type="ObjectInputStream" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
					<exception fulltype="java.lang.ClassNotFoundException" type="ClassNotFoundException" />
				</exceptions>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="VirtualMachineError" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.VirtualMachineError" fulltype="java.lang.UnknownError" type="UnknownError">
		<comment>
			<description>Thrown when an unknown but serious exception has occurred in the
 Java Virtual Machine.</description>
			<attribute name="@author">
				<description>unascribed</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.0</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="UnknownError">
				<comment>
					<description>Constructs an &lt;code&gt;UnknownError&lt;/code&gt; with no detail message.</description>
				</comment>
			</constructor>
			<constructor visibility="public" name="UnknownError">
				<comment>
					<description>Constructs an &lt;code&gt;UnknownError&lt;/code&gt; with the specified detail
 message.</description>
					<attribute name="@param">
						<description>s   the detail message.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the detail message." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="java.lang" superclassfulltype="java.lang.Object" fulltype="java.lang.ThreadLocal" type="ThreadLocal">
		<comment>
			<description>This class provides thread-local variables.  These variables differ from
 their normal counterparts in that each thread that accesses one (via its
 &lt;tt&gt;get&lt;/tt&gt; or &lt;tt&gt;set&lt;/tt&gt; method) has its own, independently initialized
 copy of the variable.  &lt;tt&gt;ThreadLocal&lt;/tt&gt; instances are typically private
 static fields in classes that wish to associate state with a thread (e.g.,
 a user ID or Transaction ID).

 &lt;p&gt;For example, the class below generates unique identifiers local to each
 thread.
 A thread&apos;s id is assigned the first time it invokes &lt;tt&gt;ThreadId.get()&lt;/tt&gt;
 and remains unchanged on subsequent calls.
 &lt;pre&gt;
 import java.util.concurrent.atomic.AtomicInteger;

 public class ThreadId {
     // Atomic integer containing the next thread ID to be assigned
     private static final AtomicInteger nextId = new AtomicInteger(0);

     // Thread local variable containing each thread&apos;s ID
     private static final ThreadLocal&amp;lt;Integer&gt; threadId =
         new ThreadLocal&amp;lt;Integer&gt;() {
             &amp;#64;Override protected Integer initialValue() {
                 return nextId.getAndIncrement();
         }
     };

     // Returns the current thread&apos;s unique ID, assigning it if necessary
     public static int get() {
         return threadId.get();
     }
 }
 &lt;/pre&gt;
 &lt;p&gt;Each thread holds an implicit reference to its copy of a thread-local
 variable as long as the thread is alive and the &lt;tt&gt;ThreadLocal&lt;/tt&gt;
 instance is accessible; after a thread goes away, all of its copies of
 thread-local instances are subject to garbage collection (unless other
 references to these copies exist).</description>
			<attribute name="@author">
				<description>Josh Bloch and Doug Lea</description>
			</attribute>
			<attribute name="@since">
				<description>1.2</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" visibility="private" name="threadLocalHashCode" fulltype="int" type="int">
				<comment>
					<description>ThreadLocals rely on per-thread linear-probe hash maps attached
 to each thread (Thread.threadLocals and
 inheritableThreadLocals).  The ThreadLocal objects act as keys,
 searched via threadLocalHashCode.  This is a custom hash code
 (useful only within ThreadLocalMaps) that eliminates collisions
 in the common case where consecutively constructed ThreadLocals
 are used by the same threads, while remaining well-behaved in
 less common cases.</description>
				</comment>
			</field>
			<field static="true" visibility="private" name="nextHashCode" fulltype="java.util.concurrent.atomic.AtomicInteger" type="AtomicInteger">
				<comment>
					<description>The next hash code to be given out. Updated atomically. Starts at
 zero.</description>
				</comment>
			</field>
			<field final="true" static="true" const="1640531527" visibility="private" name="HASH_INCREMENT" constexpr="1640531527" fulltype="int" type="int">
				<comment>
					<description>The difference between successively generated hash codes - turns
 implicit sequential thread-local IDs into near-optimally spread
 multiplicative hash values for power-of-two-sized tables.</description>
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="public" name="ThreadLocal">
				<comment>
					<description>Creates a thread local variable.</description>
				</comment>
			</constructor>
			<method static="true" visibility="private" name="nextHashCode" fulltype="int" type="int">
				<comment>
					<description>Returns the next hash code.</description>
				</comment>
			</method>
			<method visibility="protected" name="initialValue" returncomment="the initial value for this thread-local" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Returns the current thread&apos;s &quot;initial value&quot; for this
 thread-local variable.  This method will be invoked the first
 time a thread accesses the variable with the {@link #get}
 method, unless the thread previously invoked the {@link #set}
 method, in which case the &lt;tt&gt;initialValue&lt;/tt&gt; method will not
 be invoked for the thread.  Normally, this method is invoked at
 most once per thread, but it may be invoked again in case of
 subsequent invocations of {@link #remove} followed by {@link #get}.

 &lt;p&gt;This implementation simply returns &lt;tt&gt;null&lt;/tt&gt;; if the
 programmer desires thread-local variables to have an initial
 value other than &lt;tt&gt;null&lt;/tt&gt;, &lt;tt&gt;ThreadLocal&lt;/tt&gt; must be
 subclassed, and this method overridden.  Typically, an
 anonymous inner class will be used.</description>
					<attribute name="@return">
						<description>the initial value for this thread-local</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="get" returncomment="the current thread&apos;s value of this thread-local" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Returns the value in the current thread&apos;s copy of this
 thread-local variable.  If the variable has no value for the
 current thread, it is first initialized to the value returned
 by an invocation of the {@link #initialValue} method.</description>
					<attribute name="@return">
						<description>the current thread&apos;s value of this thread-local</description>
					</attribute>
				</comment>
			</method>
			<method visibility="private" name="setInitialValue" returncomment="the initial value" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Variant of set() to establish initialValue. Used instead
 of set() in case user has overridden the set() method.</description>
					<attribute name="@return">
						<description>the initial value</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="set" fulltype="void" type="void">
				<comment>
					<description>Sets the current thread&apos;s copy of this thread-local variable
 to the specified value.  Most subclasses will have no need to
 override this method, relying solely on the {@link #initialValue}
 method to set the values of thread-locals.</description>
					<attribute name="@param">
						<description>value the value to be stored in the current thread&apos;s copy of
        this thread-local.</description>
					</attribute>
				</comment>
				<params>
					<param name="value" comment="the value to be stored in the current thread&apos;s copy of
        this thread-local." fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="remove" fulltype="void" type="void">
				<comment>
					<description>Removes the current thread&apos;s value for this thread-local
 variable.  If this thread-local variable is subsequently
 {@linkplain #get read} by the current thread, its value will be
 reinitialized by invoking its {@link #initialValue} method,
 unless its value is {@linkplain #set set} by the current thread
 in the interim.  This may result in multiple invocations of the
 &lt;tt&gt;initialValue&lt;/tt&gt; method in the current thread.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method visibility="package-private" name="getMap" returncomment="the map" fulltype="java.lang.ThreadLocal.ThreadLocalMap" type="ThreadLocal.ThreadLocalMap">
				<comment>
					<description>Get the map associated with a ThreadLocal. Overridden in
 InheritableThreadLocal.</description>
					<attribute name="@param">
						<description>t the current thread</description>
					</attribute>
					<attribute name="@return">
						<description>the map</description>
					</attribute>
				</comment>
				<params>
					<param name="t" comment="the current thread" fulltype="java.lang.Thread" type="Thread" />
				</params>
			</method>
			<method visibility="package-private" name="createMap" fulltype="void" type="void">
				<comment>
					<description>Create the map associated with a ThreadLocal. Overridden in
 InheritableThreadLocal.</description>
					<attribute name="@param">
						<description>t the current thread</description>
					</attribute>
					<attribute name="@param">
						<description>firstValue value for the initial entry of the map</description>
					</attribute>
					<attribute name="@param">
						<description>map the map to store.</description>
					</attribute>
				</comment>
				<params>
					<param name="t" comment="the current thread" fulltype="java.lang.Thread" type="Thread" />
					<param name="firstValue" comment="value for the initial entry of the map" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method static="true" visibility="package-private" name="createInheritedMap" returncomment="a map containing the parent&apos;s inheritable bindings" fulltype="java.lang.ThreadLocal.ThreadLocalMap" type="ThreadLocal.ThreadLocalMap">
				<comment>
					<description>Factory method to create map of inherited thread locals.
 Designed to be called only from Thread constructor.</description>
					<attribute name="@param">
						<description>parentMap the map associated with parent thread</description>
					</attribute>
					<attribute name="@return">
						<description>a map containing the parent&apos;s inheritable bindings</description>
					</attribute>
				</comment>
				<params>
					<param name="parentMap" comment="the map associated with parent thread" fulltype="java.lang.ThreadLocal.ThreadLocalMap" type="ThreadLocal.ThreadLocalMap" />
				</params>
			</method>
			<method visibility="package-private" name="childValue" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Method childValue is visibly defined in subclass
 InheritableThreadLocal, but is internally defined here for the
 sake of providing createInheritedMap factory method without
 needing to subclass the map class in InheritableThreadLocal.
 This technique is preferable to the alternative of embedding
 instanceof tests in methods.</description>
				</comment>
				<params>
					<param name="parentValue" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
		</methods>
		<jelclass superclass="Object" visibility="package-private" package="java.lang" superclassfulltype="java.lang.Object" fulltype="java.lang.ThreadLocal.ThreadLocalMap" type="ThreadLocal.ThreadLocalMap">
			<comment>
				<description>ThreadLocalMap is a customized hash map suitable only for
 maintaining thread local values. No operations are exported
 outside of the ThreadLocal class. The class is package private to
 allow declaration of fields in class Thread.  To help deal with
 very large and long-lived usages, the hash table entries use
 WeakReferences for keys. However, since reference queues are not
 used, stale entries are guaranteed to be removed only when
 the table starts running out of space.</description>
			</comment>
			<fields>
				<field final="true" static="true" const="16" visibility="private" name="INITIAL_CAPACITY" constexpr="16" fulltype="int" type="int">
					<comment>
						<description>The initial capacity -- MUST be a power of two.</description>
					</comment>
				</field>
				<field visibility="private" name="table" fulltype="java.lang.ThreadLocal.ThreadLocalMap.Entry[]" type="ThreadLocal.ThreadLocalMap.Entry">
					<comment>
						<description>The table, resized as necessary.
 table.length MUST always be a power of two.</description>
					</comment>
				</field>
				<field visibility="private" name="size" fulltype="int" type="int">
					<comment>
						<description>The number of entries in the table.</description>
					</comment>
				</field>
				<field visibility="private" name="threshold" fulltype="int" type="int">
					<comment>
						<description>The next size value at which to resize.</description>
					</comment>
				</field>
			</fields>
			<methods>
				<constructor visibility="package-private" name="ThreadLocal.ThreadLocalMap">
					<comment>
						<description>Construct a new map initially containing (firstKey, firstValue).
 ThreadLocalMaps are constructed lazily, so we only create
 one when we have at least one entry to put in it.</description>
					</comment>
					<params>
						<param name="firstKey" fulltype="java.lang.ThreadLocal" type="ThreadLocal" />
						<param name="firstValue" fulltype="java.lang.Object" type="Object" />
					</params>
				</constructor>
				<constructor visibility="private" name="ThreadLocal.ThreadLocalMap">
					<comment>
						<description>Construct a new map including all Inheritable ThreadLocals
 from given parent map. Called only by createInheritedMap.</description>
						<attribute name="@param">
							<description>parentMap the map associated with parent thread.</description>
						</attribute>
					</comment>
					<params>
						<param name="parentMap" comment="the map associated with parent thread." fulltype="java.lang.ThreadLocal.ThreadLocalMap" type="ThreadLocal.ThreadLocalMap" />
					</params>
				</constructor>
				<method visibility="private" name="setThreshold" fulltype="void" type="void">
					<comment>
						<description>Set the resize threshold to maintain at worst a 2/3 load factor.</description>
					</comment>
					<params>
						<param name="len" fulltype="int" type="int" />
					</params>
				</method>
				<method static="true" visibility="private" name="nextIndex" fulltype="int" type="int">
					<comment>
						<description>Increment i modulo len.</description>
					</comment>
					<params>
						<param name="i" fulltype="int" type="int" />
						<param name="len" fulltype="int" type="int" />
					</params>
				</method>
				<method static="true" visibility="private" name="prevIndex" fulltype="int" type="int">
					<comment>
						<description>Decrement i modulo len.</description>
					</comment>
					<params>
						<param name="i" fulltype="int" type="int" />
						<param name="len" fulltype="int" type="int" />
					</params>
				</method>
				<method visibility="private" name="getEntry" returncomment="the entry associated with key, or null if no such" fulltype="java.lang.ThreadLocal.ThreadLocalMap.Entry" type="ThreadLocal.ThreadLocalMap.Entry">
					<comment>
						<description>Get the entry associated with key.  This method
 itself handles only the fast path: a direct hit of existing
 key. It otherwise relays to getEntryAfterMiss.  This is
 designed to maximize performance for direct hits, in part
 by making this method readily inlinable.</description>
						<attribute name="@param">
							<description>key the thread local object</description>
						</attribute>
						<attribute name="@return">
							<description>the entry associated with key, or null if no such</description>
						</attribute>
					</comment>
					<params>
						<param name="key" comment="the thread local object" fulltype="java.lang.ThreadLocal" type="ThreadLocal" />
					</params>
				</method>
				<method visibility="private" name="getEntryAfterMiss" returncomment="the entry associated with key, or null if no such" fulltype="java.lang.ThreadLocal.ThreadLocalMap.Entry" type="ThreadLocal.ThreadLocalMap.Entry">
					<comment>
						<description>Version of getEntry method for use when key is not found in
 its direct hash slot.</description>
						<attribute name="@param">
							<description>key the thread local object</description>
						</attribute>
						<attribute name="@param">
							<description>i the table index for key&apos;s hash code</description>
						</attribute>
						<attribute name="@param">
							<description>e the entry at table[i]</description>
						</attribute>
						<attribute name="@return">
							<description>the entry associated with key, or null if no such</description>
						</attribute>
					</comment>
					<params>
						<param name="key" comment="the thread local object" fulltype="java.lang.ThreadLocal" type="ThreadLocal" />
						<param name="i" comment="the table index for key&apos;s hash code" fulltype="int" type="int" />
						<param name="e" comment="the entry at table[i]" fulltype="java.lang.ThreadLocal.ThreadLocalMap.Entry" type="ThreadLocal.ThreadLocalMap.Entry" />
					</params>
				</method>
				<method visibility="private" name="set" fulltype="void" type="void">
					<comment>
						<description>Set the value associated with key.</description>
						<attribute name="@param">
							<description>key the thread local object</description>
						</attribute>
						<attribute name="@param">
							<description>value the value to be set</description>
						</attribute>
					</comment>
					<params>
						<param name="key" comment="the thread local object" fulltype="java.lang.ThreadLocal" type="ThreadLocal" />
						<param name="value" comment="the value to be set" fulltype="java.lang.Object" type="Object" />
					</params>
				</method>
				<method visibility="private" name="remove" fulltype="void" type="void">
					<comment>
						<description>Remove the entry for key.</description>
					</comment>
					<params>
						<param name="key" fulltype="java.lang.ThreadLocal" type="ThreadLocal" />
					</params>
				</method>
				<method visibility="private" name="replaceStaleEntry" fulltype="void" type="void">
					<comment>
						<description>Replace a stale entry encountered during a set operation
 with an entry for the specified key.  The value passed in
 the value parameter is stored in the entry, whether or not
 an entry already exists for the specified key.

 As a side effect, this method expunges all stale entries in the
 &quot;run&quot; containing the stale entry.  (A run is a sequence of entries
 between two null slots.)</description>
						<attribute name="@param">
							<description>key the key</description>
						</attribute>
						<attribute name="@param">
							<description>value the value to be associated with key</description>
						</attribute>
						<attribute name="@param">
							<description>staleSlot index of the first stale entry encountered while
         searching for key.</description>
						</attribute>
					</comment>
					<params>
						<param name="key" comment="the key" fulltype="java.lang.ThreadLocal" type="ThreadLocal" />
						<param name="value" comment="the value to be associated with key" fulltype="java.lang.Object" type="Object" />
						<param name="staleSlot" comment="index of the first stale entry encountered while
         searching for key." fulltype="int" type="int" />
					</params>
				</method>
				<method visibility="private" name="expungeStaleEntry" returncomment="the index of the next null slot after staleSlot
 (all between staleSlot and this slot will have been checked
 for expunging)." fulltype="int" type="int">
					<comment>
						<description>Expunge a stale entry by rehashing any possibly colliding entries
 lying between staleSlot and the next null slot.  This also expunges
 any other stale entries encountered before the trailing null.  See
 Knuth, Section 6.4</description>
						<attribute name="@param">
							<description>staleSlot index of slot known to have null key</description>
						</attribute>
						<attribute name="@return">
							<description>the index of the next null slot after staleSlot
 (all between staleSlot and this slot will have been checked
 for expunging).</description>
						</attribute>
					</comment>
					<params>
						<param name="staleSlot" comment="index of slot known to have null key" fulltype="int" type="int" />
					</params>
				</method>
				<method visibility="private" name="cleanSomeSlots" returncomment="true if any stale entries have been removed." fulltype="boolean" type="boolean">
					<comment>
						<description>Heuristically scan some cells looking for stale entries.
 This is invoked when either a new element is added, or
 another stale one has been expunged. It performs a
 logarithmic number of scans, as a balance between no
 scanning (fast but retains garbage) and a number of scans
 proportional to number of elements, that would find all
 garbage but would cause some insertions to take O(n) time.</description>
						<attribute name="@param">
							<description>i a position known NOT to hold a stale entry. The
 scan starts at the element after i.</description>
						</attribute>
						<attribute name="@param">
							<description>n scan control: &lt;tt&gt;log2(n)&lt;/tt&gt; cells are scanned,
 unless a stale entry is found, in which case
 &lt;tt&gt;log2(table.length)-1&lt;/tt&gt; additional cells are scanned.
 When called from insertions, this parameter is the number
 of elements, but when from replaceStaleEntry, it is the
 table length. (Note: all this could be changed to be either
 more or less aggressive by weighting n instead of just
 using straight log n. But this version is simple, fast, and
 seems to work well.)</description>
						</attribute>
						<attribute name="@return">
							<description>true if any stale entries have been removed.</description>
						</attribute>
					</comment>
					<params>
						<param name="i" comment="a position known NOT to hold a stale entry. The
 scan starts at the element after i." fulltype="int" type="int" />
						<param name="n" comment="scan control: &lt;tt&gt;log2(n)&lt;/tt&gt; cells are scanned,
 unless a stale entry is found, in which case
 &lt;tt&gt;log2(table.length)-1&lt;/tt&gt; additional cells are scanned.
 When called from insertions, this parameter is the number
 of elements, but when from replaceStaleEntry, it is the
 table length. (Note: all this could be changed to be either
 more or less aggressive by weighting n instead of just
 using straight log n. But this version is simple, fast, and
 seems to work well.)" fulltype="int" type="int" />
					</params>
				</method>
				<method visibility="private" name="rehash" fulltype="void" type="void">
					<comment>
						<description>Re-pack and/or re-size the table. First scan the entire
 table removing stale entries. If this doesn&apos;t sufficiently
 shrink the size of the table, double the table size.</description>
					</comment>
				</method>
				<method visibility="private" name="resize" fulltype="void" type="void">
					<comment>
						<description>Double the capacity of the table.</description>
					</comment>
				</method>
				<method visibility="private" name="expungeStaleEntries" fulltype="void" type="void">
					<comment>
						<description>Expunge all stale entries in the table.</description>
					</comment>
				</method>
			</methods>
			<jelclass superclass="WeakReference" visibility="package-private" package="java.lang" superclassfulltype="java.lang.ref.WeakReference" fulltype="java.lang.ThreadLocal.ThreadLocalMap.Entry" type="ThreadLocal.ThreadLocalMap.Entry">
				<comment>
					<description>The entries in this hash map extend WeakReference, using
 its main ref field as the key (which is always a
 ThreadLocal object).  Note that null keys (i.e. entry.get()
 == null) mean that the key is no longer referenced, so the
 entry can be expunged from table.  Such entries are referred to
 as &quot;stale entries&quot; in the code that follows.</description>
				</comment>
				<fields>
					<field visibility="package-private" name="value" fulltype="java.lang.Object" type="Object">
						<comment>
							<description>The value associated with this ThreadLocal.</description>
						</comment>
					</field>
				</fields>
				<methods>
					<constructor visibility="package-private" name="ThreadLocal.ThreadLocalMap.Entry">
						<params>
							<param name="k" fulltype="java.lang.ThreadLocal" type="ThreadLocal" />
							<param name="v" fulltype="java.lang.Object" type="Object" />
						</params>
					</constructor>
				</methods>
			</jelclass>
		</jelclass>
	</jelclass>
	<jelclass superclass="Object" visibility="package-private" package="java.lang" superclassfulltype="java.lang.Object" fulltype="java.lang.ThreadLocal.ThreadLocalMap" type="ThreadLocal.ThreadLocalMap">
		<comment>
			<description>ThreadLocalMap is a customized hash map suitable only for
 maintaining thread local values. No operations are exported
 outside of the ThreadLocal class. The class is package private to
 allow declaration of fields in class Thread.  To help deal with
 very large and long-lived usages, the hash table entries use
 WeakReferences for keys. However, since reference queues are not
 used, stale entries are guaranteed to be removed only when
 the table starts running out of space.</description>
		</comment>
		<fields>
			<field final="true" static="true" const="16" visibility="private" name="INITIAL_CAPACITY" constexpr="16" fulltype="int" type="int">
				<comment>
					<description>The initial capacity -- MUST be a power of two.</description>
				</comment>
			</field>
			<field visibility="private" name="table" fulltype="java.lang.ThreadLocal.ThreadLocalMap.Entry[]" type="ThreadLocal.ThreadLocalMap.Entry">
				<comment>
					<description>The table, resized as necessary.
 table.length MUST always be a power of two.</description>
				</comment>
			</field>
			<field visibility="private" name="size" fulltype="int" type="int">
				<comment>
					<description>The number of entries in the table.</description>
				</comment>
			</field>
			<field visibility="private" name="threshold" fulltype="int" type="int">
				<comment>
					<description>The next size value at which to resize.</description>
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="package-private" name="ThreadLocal.ThreadLocalMap">
				<comment>
					<description>Construct a new map initially containing (firstKey, firstValue).
 ThreadLocalMaps are constructed lazily, so we only create
 one when we have at least one entry to put in it.</description>
				</comment>
				<params>
					<param name="firstKey" fulltype="java.lang.ThreadLocal" type="ThreadLocal" />
					<param name="firstValue" fulltype="java.lang.Object" type="Object" />
				</params>
			</constructor>
			<constructor visibility="private" name="ThreadLocal.ThreadLocalMap">
				<comment>
					<description>Construct a new map including all Inheritable ThreadLocals
 from given parent map. Called only by createInheritedMap.</description>
					<attribute name="@param">
						<description>parentMap the map associated with parent thread.</description>
					</attribute>
				</comment>
				<params>
					<param name="parentMap" comment="the map associated with parent thread." fulltype="java.lang.ThreadLocal.ThreadLocalMap" type="ThreadLocal.ThreadLocalMap" />
				</params>
			</constructor>
			<method visibility="private" name="setThreshold" fulltype="void" type="void">
				<comment>
					<description>Set the resize threshold to maintain at worst a 2/3 load factor.</description>
				</comment>
				<params>
					<param name="len" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="private" name="nextIndex" fulltype="int" type="int">
				<comment>
					<description>Increment i modulo len.</description>
				</comment>
				<params>
					<param name="i" fulltype="int" type="int" />
					<param name="len" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="private" name="prevIndex" fulltype="int" type="int">
				<comment>
					<description>Decrement i modulo len.</description>
				</comment>
				<params>
					<param name="i" fulltype="int" type="int" />
					<param name="len" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="private" name="getEntry" returncomment="the entry associated with key, or null if no such" fulltype="java.lang.ThreadLocal.ThreadLocalMap.Entry" type="ThreadLocal.ThreadLocalMap.Entry">
				<comment>
					<description>Get the entry associated with key.  This method
 itself handles only the fast path: a direct hit of existing
 key. It otherwise relays to getEntryAfterMiss.  This is
 designed to maximize performance for direct hits, in part
 by making this method readily inlinable.</description>
					<attribute name="@param">
						<description>key the thread local object</description>
					</attribute>
					<attribute name="@return">
						<description>the entry associated with key, or null if no such</description>
					</attribute>
				</comment>
				<params>
					<param name="key" comment="the thread local object" fulltype="java.lang.ThreadLocal" type="ThreadLocal" />
				</params>
			</method>
			<method visibility="private" name="getEntryAfterMiss" returncomment="the entry associated with key, or null if no such" fulltype="java.lang.ThreadLocal.ThreadLocalMap.Entry" type="ThreadLocal.ThreadLocalMap.Entry">
				<comment>
					<description>Version of getEntry method for use when key is not found in
 its direct hash slot.</description>
					<attribute name="@param">
						<description>key the thread local object</description>
					</attribute>
					<attribute name="@param">
						<description>i the table index for key&apos;s hash code</description>
					</attribute>
					<attribute name="@param">
						<description>e the entry at table[i]</description>
					</attribute>
					<attribute name="@return">
						<description>the entry associated with key, or null if no such</description>
					</attribute>
				</comment>
				<params>
					<param name="key" comment="the thread local object" fulltype="java.lang.ThreadLocal" type="ThreadLocal" />
					<param name="i" comment="the table index for key&apos;s hash code" fulltype="int" type="int" />
					<param name="e" comment="the entry at table[i]" fulltype="java.lang.ThreadLocal.ThreadLocalMap.Entry" type="ThreadLocal.ThreadLocalMap.Entry" />
				</params>
			</method>
			<method visibility="private" name="set" fulltype="void" type="void">
				<comment>
					<description>Set the value associated with key.</description>
					<attribute name="@param">
						<description>key the thread local object</description>
					</attribute>
					<attribute name="@param">
						<description>value the value to be set</description>
					</attribute>
				</comment>
				<params>
					<param name="key" comment="the thread local object" fulltype="java.lang.ThreadLocal" type="ThreadLocal" />
					<param name="value" comment="the value to be set" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="private" name="remove" fulltype="void" type="void">
				<comment>
					<description>Remove the entry for key.</description>
				</comment>
				<params>
					<param name="key" fulltype="java.lang.ThreadLocal" type="ThreadLocal" />
				</params>
			</method>
			<method visibility="private" name="replaceStaleEntry" fulltype="void" type="void">
				<comment>
					<description>Replace a stale entry encountered during a set operation
 with an entry for the specified key.  The value passed in
 the value parameter is stored in the entry, whether or not
 an entry already exists for the specified key.

 As a side effect, this method expunges all stale entries in the
 &quot;run&quot; containing the stale entry.  (A run is a sequence of entries
 between two null slots.)</description>
					<attribute name="@param">
						<description>key the key</description>
					</attribute>
					<attribute name="@param">
						<description>value the value to be associated with key</description>
					</attribute>
					<attribute name="@param">
						<description>staleSlot index of the first stale entry encountered while
         searching for key.</description>
					</attribute>
				</comment>
				<params>
					<param name="key" comment="the key" fulltype="java.lang.ThreadLocal" type="ThreadLocal" />
					<param name="value" comment="the value to be associated with key" fulltype="java.lang.Object" type="Object" />
					<param name="staleSlot" comment="index of the first stale entry encountered while
         searching for key." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="private" name="expungeStaleEntry" returncomment="the index of the next null slot after staleSlot
 (all between staleSlot and this slot will have been checked
 for expunging)." fulltype="int" type="int">
				<comment>
					<description>Expunge a stale entry by rehashing any possibly colliding entries
 lying between staleSlot and the next null slot.  This also expunges
 any other stale entries encountered before the trailing null.  See
 Knuth, Section 6.4</description>
					<attribute name="@param">
						<description>staleSlot index of slot known to have null key</description>
					</attribute>
					<attribute name="@return">
						<description>the index of the next null slot after staleSlot
 (all between staleSlot and this slot will have been checked
 for expunging).</description>
					</attribute>
				</comment>
				<params>
					<param name="staleSlot" comment="index of slot known to have null key" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="private" name="cleanSomeSlots" returncomment="true if any stale entries have been removed." fulltype="boolean" type="boolean">
				<comment>
					<description>Heuristically scan some cells looking for stale entries.
 This is invoked when either a new element is added, or
 another stale one has been expunged. It performs a
 logarithmic number of scans, as a balance between no
 scanning (fast but retains garbage) and a number of scans
 proportional to number of elements, that would find all
 garbage but would cause some insertions to take O(n) time.</description>
					<attribute name="@param">
						<description>i a position known NOT to hold a stale entry. The
 scan starts at the element after i.</description>
					</attribute>
					<attribute name="@param">
						<description>n scan control: &lt;tt&gt;log2(n)&lt;/tt&gt; cells are scanned,
 unless a stale entry is found, in which case
 &lt;tt&gt;log2(table.length)-1&lt;/tt&gt; additional cells are scanned.
 When called from insertions, this parameter is the number
 of elements, but when from replaceStaleEntry, it is the
 table length. (Note: all this could be changed to be either
 more or less aggressive by weighting n instead of just
 using straight log n. But this version is simple, fast, and
 seems to work well.)</description>
					</attribute>
					<attribute name="@return">
						<description>true if any stale entries have been removed.</description>
					</attribute>
				</comment>
				<params>
					<param name="i" comment="a position known NOT to hold a stale entry. The
 scan starts at the element after i." fulltype="int" type="int" />
					<param name="n" comment="scan control: &lt;tt&gt;log2(n)&lt;/tt&gt; cells are scanned,
 unless a stale entry is found, in which case
 &lt;tt&gt;log2(table.length)-1&lt;/tt&gt; additional cells are scanned.
 When called from insertions, this parameter is the number
 of elements, but when from replaceStaleEntry, it is the
 table length. (Note: all this could be changed to be either
 more or less aggressive by weighting n instead of just
 using straight log n. But this version is simple, fast, and
 seems to work well.)" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="private" name="rehash" fulltype="void" type="void">
				<comment>
					<description>Re-pack and/or re-size the table. First scan the entire
 table removing stale entries. If this doesn&apos;t sufficiently
 shrink the size of the table, double the table size.</description>
				</comment>
			</method>
			<method visibility="private" name="resize" fulltype="void" type="void">
				<comment>
					<description>Double the capacity of the table.</description>
				</comment>
			</method>
			<method visibility="private" name="expungeStaleEntries" fulltype="void" type="void">
				<comment>
					<description>Expunge all stale entries in the table.</description>
				</comment>
			</method>
		</methods>
		<jelclass superclass="WeakReference" visibility="package-private" package="java.lang" superclassfulltype="java.lang.ref.WeakReference" fulltype="java.lang.ThreadLocal.ThreadLocalMap.Entry" type="ThreadLocal.ThreadLocalMap.Entry">
			<comment>
				<description>The entries in this hash map extend WeakReference, using
 its main ref field as the key (which is always a
 ThreadLocal object).  Note that null keys (i.e. entry.get()
 == null) mean that the key is no longer referenced, so the
 entry can be expunged from table.  Such entries are referred to
 as &quot;stale entries&quot; in the code that follows.</description>
			</comment>
			<fields>
				<field visibility="package-private" name="value" fulltype="java.lang.Object" type="Object">
					<comment>
						<description>The value associated with this ThreadLocal.</description>
					</comment>
				</field>
			</fields>
			<methods>
				<constructor visibility="package-private" name="ThreadLocal.ThreadLocalMap.Entry">
					<params>
						<param name="k" fulltype="java.lang.ThreadLocal" type="ThreadLocal" />
						<param name="v" fulltype="java.lang.Object" type="Object" />
					</params>
				</constructor>
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="WeakReference" visibility="package-private" package="java.lang" superclassfulltype="java.lang.ref.WeakReference" fulltype="java.lang.ThreadLocal.ThreadLocalMap.Entry" type="ThreadLocal.ThreadLocalMap.Entry">
		<comment>
			<description>The entries in this hash map extend WeakReference, using
 its main ref field as the key (which is always a
 ThreadLocal object).  Note that null keys (i.e. entry.get()
 == null) mean that the key is no longer referenced, so the
 entry can be expunged from table.  Such entries are referred to
 as &quot;stale entries&quot; in the code that follows.</description>
		</comment>
		<fields>
			<field visibility="package-private" name="value" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>The value associated with this ThreadLocal.</description>
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="package-private" name="ThreadLocal.ThreadLocalMap.Entry">
				<params>
					<param name="k" fulltype="java.lang.ThreadLocal" type="ThreadLocal" />
					<param name="v" fulltype="java.lang.Object" type="Object" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="java.lang.management" interface="true" fulltype="java.lang.management.MemoryManagerMXBean" type="MemoryManagerMXBean">
		<comment>
			<description>The management interface for a memory manager.
 A memory manager manages one or more memory pools of the
 Java virtual machine.

 &lt;p&gt; A Java virtual machine has one or more memory managers.
 An instance implementing this interface is
 an &lt;a href=&quot;ManagementFactory.html#MXBean&quot;&gt;MXBean&lt;/a&gt;
 that can be obtained by calling
 the {@link ManagementFactory#getMemoryManagerMXBeans} method or
 from the {@link ManagementFactory#getPlatformMBeanServer
 platform &lt;tt&gt;MBeanServer&lt;/tt&gt;} method.

 &lt;p&gt;The &lt;tt&gt;ObjectName&lt;/tt&gt; for uniquely identifying the MXBean for
 a memory manager within an MBeanServer is:
 &lt;blockquote&gt;
   {@link ManagementFactory#MEMORY_MANAGER_MXBEAN_DOMAIN_TYPE
    &lt;tt&gt;java.lang:type=MemoryManager&lt;/tt&gt;}&lt;tt&gt;,name=&lt;/tt&gt;&lt;i&gt;manager&apos;s name&lt;/i&gt;
 &lt;/blockquote&gt;</description>
			<attribute name="@see">
				<description>MemoryMXBean</description>
			</attribute>
			<attribute name="@see">
				<description>&lt;a href=&quot;../../../javax/management/package-summary.html&quot;&gt;
      JMX Specification.&lt;/a&gt;</description>
			</attribute>
			<attribute name="@see">
				<description>&lt;a href=&quot;package-summary.html#examples&quot;&gt;
      Ways to Access MXBeans&lt;/a&gt;</description>
			</attribute>
			<attribute name="@author">
				<description>Mandy Chung</description>
			</attribute>
			<attribute name="@since">
				<description>1.5</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="getName" returncomment="the name of this memory manager." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the name representing this memory manager.</description>
					<attribute name="@return">
						<description>the name of this memory manager.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="isValid" returncomment="&lt;tt&gt;true&lt;/tt&gt; if the memory manager is valid in the
               Java virtual machine;
         &lt;tt&gt;false&lt;/tt&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Tests if this memory manager is valid in the Java virtual
 machine.  A memory manager becomes invalid once the Java virtual
 machine removes it from the memory system.</description>
					<attribute name="@return">
						<description>&lt;tt&gt;true&lt;/tt&gt; if the memory manager is valid in the
               Java virtual machine;
         &lt;tt&gt;false&lt;/tt&gt; otherwise.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getMemoryPoolNames" returncomment="an array of &lt;tt&gt;String&lt;/tt&gt; objects, each is
 the name of a memory pool that this memory manager manages." fulltype="java.lang.String[]" type="String">
				<comment>
					<description>Returns the name of memory pools that this memory manager manages.</description>
					<attribute name="@return">
						<description>an array of &lt;tt&gt;String&lt;/tt&gt; objects, each is
 the name of a memory pool that this memory manager manages.</description>
					</attribute>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="LockInfo" visibility="public" package="java.lang.management" superclassfulltype="java.lang.management.LockInfo" fulltype="java.lang.management.MonitorInfo" type="MonitorInfo">
		<comment>
			<description>Information about an object monitor lock.  An object monitor is locked
 when entering a synchronization block or method on that object.

 &lt;h4&gt;MXBean Mapping&lt;/h4&gt;
 &lt;tt&gt;MonitorInfo&lt;/tt&gt; is mapped to a {@link CompositeData CompositeData}
 with attributes as specified in
 the {@link #from from} method.</description>
			<attribute name="@author">
				<description>Mandy Chung</description>
			</attribute>
			<attribute name="@since">
				<description>1.6</description>
			</attribute>
		</comment>
		<fields>
			<field visibility="private" name="stackDepth" fulltype="int" type="int" />
			<field visibility="private" name="stackFrame" fulltype="java.lang.StackTraceElement" type="StackTraceElement" />
		</fields>
		<methods>
			<constructor visibility="public" name="MonitorInfo">
				<comment>
					<description>Construct a &lt;tt&gt;MonitorInfo&lt;/tt&gt; object.</description>
					<attribute name="@param">
						<description>className the fully qualified name of the class of the lock object.</description>
					</attribute>
					<attribute name="@param">
						<description>identityHashCode the {@link System#identityHashCode
                         identity hash code} of the lock object.</description>
					</attribute>
					<attribute name="@param">
						<description>stackDepth the depth in the stack trace where the object monitor
                   was locked.</description>
					</attribute>
					<attribute name="@param">
						<description>stackFrame the stack frame that locked the object monitor.</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalArgumentException if
    &lt;tt&gt;stackDepth&lt;/tt&gt; &amp;ge; 0 but &lt;tt&gt;stackFrame&lt;/tt&gt; is &lt;tt&gt;null&lt;/tt&gt;,
    or &lt;tt&gt;stackDepth&lt;/tt&gt; &amp;lt; 0 but &lt;tt&gt;stackFrame&lt;/tt&gt; is not
       &lt;tt&gt;null&lt;/tt&gt;.</description>
					</attribute>
				</comment>
				<params>
					<param name="className" comment="the fully qualified name of the class of the lock object." fulltype="java.lang.String" type="String" />
					<param name="identityHashCode" comment="the {@link System#identityHashCode
                         identity hash code} of the lock object." fulltype="int" type="int" />
					<param name="stackDepth" comment="the depth in the stack trace where the object monitor
                   was locked." fulltype="int" type="int" />
					<param name="stackFrame" comment="the stack frame that locked the object monitor." fulltype="java.lang.StackTraceElement" type="StackTraceElement" />
				</params>
			</constructor>
			<method visibility="public" name="getLockedStackDepth" returncomment="the depth in the stack trace where the object monitor
         was locked, or a negative number if not available." fulltype="int" type="int">
				<comment>
					<description>Returns the depth in the stack trace where the object monitor
 was locked.  The depth is the index to the &lt;tt&gt;StackTraceElement&lt;/tt&gt;
 array returned in the {@link ThreadInfo#getStackTrace} method.</description>
					<attribute name="@return">
						<description>the depth in the stack trace where the object monitor
         was locked, or a negative number if not available.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getLockedStackFrame" returncomment="&lt;tt&gt;StackTraceElement&lt;/tt&gt; that locked the object monitor,
         or &lt;tt&gt;null&lt;/tt&gt; if not available." fulltype="java.lang.StackTraceElement" type="StackTraceElement">
				<comment>
					<description>Returns the stack frame that locked the object monitor.</description>
					<attribute name="@return">
						<description>&lt;tt&gt;StackTraceElement&lt;/tt&gt; that locked the object monitor,
         or &lt;tt&gt;null&lt;/tt&gt; if not available.</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="from" returncomment="a &lt;tt&gt;MonitorInfo&lt;/tt&gt; object represented
         by &lt;tt&gt;cd&lt;/tt&gt; if &lt;tt&gt;cd&lt;/tt&gt; is not &lt;tt&gt;null&lt;/tt&gt;;
         &lt;tt&gt;null&lt;/tt&gt; otherwise." fulltype="java.lang.management.MonitorInfo" type="MonitorInfo">
				<comment>
					<description>Returns a &lt;tt&gt;MonitorInfo&lt;/tt&gt; object represented by the
 given &lt;tt&gt;CompositeData&lt;/tt&gt;.
 The given &lt;tt&gt;CompositeData&lt;/tt&gt; must contain the following attributes
 as well as the attributes specified in the
 &lt;a href=&quot;LockInfo.html#MappedType&quot;&gt;
 mapped type&lt;/a&gt; for the {@link LockInfo} class:
 &lt;blockquote&gt;
 &lt;table border&gt;
 &lt;tr&gt;
   &lt;th align=left&gt;Attribute Name&lt;/th&gt;
   &lt;th align=left&gt;Type&lt;/th&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
   &lt;td&gt;lockedStackFrame&lt;/td&gt;
   &lt;td&gt;&lt;tt&gt;CompositeData as specified in the
       &lt;a href=&quot;ThreadInfo.html#StackTrace&quot;&gt;stackTrace&lt;/a&gt;
       attribute defined in the {@link ThreadInfo#from
       ThreadInfo.from} method.
       &lt;/tt&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
   &lt;td&gt;lockedStackDepth&lt;/td&gt;
   &lt;td&gt;&lt;tt&gt;java.lang.Integer&lt;/tt&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/table&gt;
 &lt;/blockquote&gt;</description>
					<attribute name="@param">
						<description>cd &lt;tt&gt;CompositeData&lt;/tt&gt; representing a &lt;tt&gt;MonitorInfo&lt;/tt&gt;</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalArgumentException if &lt;tt&gt;cd&lt;/tt&gt; does not
   represent a &lt;tt&gt;MonitorInfo&lt;/tt&gt; with the attributes described
   above.</description>
					</attribute>
					<attribute name="@return">
						<description>a &lt;tt&gt;MonitorInfo&lt;/tt&gt; object represented
         by &lt;tt&gt;cd&lt;/tt&gt; if &lt;tt&gt;cd&lt;/tt&gt; is not &lt;tt&gt;null&lt;/tt&gt;;
         &lt;tt&gt;null&lt;/tt&gt; otherwise.</description>
					</attribute>
				</comment>
				<params>
					<param name="cd" comment="&lt;tt&gt;CompositeData&lt;/tt&gt; representing a &lt;tt&gt;MonitorInfo&lt;/tt&gt;" fulltype="javax.management.openmbean.CompositeData" type="CompositeData" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="java.lang.management" superclassfulltype="java.lang.Object" fulltype="java.lang.management.ManagementFactory" type="ManagementFactory">
		<comment>
			<description>The &lt;tt&gt;ManagementFactory&lt;/tt&gt; class is a factory class for getting
 managed beans for the Java platform.
 This class consists of static methods each of which returns
 one or more &lt;a href=&quot;#MXBean&quot;&gt;platform MXBean(s)&lt;/a&gt; representing
 the management interface of a component of the Java virtual
 machine.

 &lt;p&gt;
 An application can access a platform MXBean in the following ways:
 &lt;ul&gt;
 &lt;li&gt;&lt;i&gt;Direct access to an MXBean interface&lt;/i&gt;
     &lt;ol type=&quot;a&quot;&gt;
     &lt;li&gt;Get the MXBean instance through the static factory method
         and access the MXBean locally of the running
         virtual machine.
         &lt;/li&gt;
     &lt;li&gt;Construct an MXBean proxy instance that forwards the
         method calls to a given {@link MBeanServer MBeanServer} by calling
         {@link #newPlatformMXBeanProxy newPlatfromMXBeanProxy}.
         A proxy is typically constructed to remotely access
         an MXBean of another running virtual machine.
         &lt;/li&gt;
     &lt;/ol&gt;&lt;/li&gt;
 &lt;li&gt;&lt;i&gt;Indirect access to an MXBean interface via MBeanServer&lt;/i&gt;
     &lt;ol type=&quot;a&quot;&gt;
     &lt;li&gt;Go through the {@link #getPlatformMBeanServer
         platform MBeanServer} to access MXBeans locally or
         a specific &lt;tt&gt;MBeanServerConnection&lt;/tt&gt; to access
         MXBeans remotely.
         The attributes and operations of an MXBean use only
         &lt;em&gt;JMX open types&lt;/em&gt; which include basic data types,
         {@link javax.management.openmbean.CompositeData CompositeData},
         and {@link javax.management.openmbean.TabularData TabularData}
         defined in
         {@link javax.management.openmbean.OpenType OpenType}.
         The mapping is specified below.
        &lt;/li&gt;
     &lt;/ol&gt;&lt;/li&gt;
 &lt;/ul&gt;

 &lt;h4&gt;&lt;a name=&quot;MXBean&quot;&gt;Platform MXBeans&lt;/a&gt;&lt;/h4&gt;
 A platform MXBean is a &lt;i&gt;managed bean&lt;/i&gt; that conforms to
 the JMX Instrumentation Specification and only uses
 a set of basic data types described below.
 See &lt;a href=&quot;../../../javax/management/MXBean.html#MXBean-spec&quot;&gt;
 the specification of MXBeans&lt;/a&gt; for details.
 A JMX management application and the platform &lt;tt&gt;MBeanServer&lt;/tt&gt;
 can interoperate without requiring classes for MXBean specific
 data types.
 The data types being transmitted between the JMX connector
 server and the connector client are
 {@linkplain javax.management.openmbean.OpenType open types}
 and this allows interoperation across versions.
 &lt;p&gt;
 The platform MXBean interfaces use only the following data types:
 &lt;ul&gt;
   &lt;li&gt;Primitive types such as &lt;tt&gt;int&lt;/tt&gt;, &lt;tt&gt;long&lt;/tt&gt;,
       &lt;tt&gt;boolean&lt;/tt&gt;, etc&lt;/li&gt;
   &lt;li&gt;Wrapper classes for primitive types such as
       {@link java.lang.Integer Integer}, {@link java.lang.Long Long},
       {@link java.lang.Boolean Boolean}, etc and
       {@link java.lang.String String}&lt;/li&gt;
   &lt;li&gt;{@link java.lang.Enum Enum} classes&lt;/li&gt;
   &lt;li&gt;Classes that define only getter methods and define a static
       &lt;tt&gt;from&lt;/tt&gt; method with a
       {@link javax.management.openmbean.CompositeData CompositeData}
       argument to convert from an input &lt;tt&gt;CompositeData&lt;/tt&gt; to
       an instance of that class
       &lt;/li&gt;
   &lt;li&gt;{@link java.util.List List&amp;lt;E&amp;gt;}
       where &lt;tt&gt;E&lt;/tt&gt; is a primitive type, a wrapper class,
       an enum class, or a class supporting conversion from a
       &lt;tt&gt;CompositeData&lt;/tt&gt; to its class
       &lt;/li&gt;
   &lt;li&gt;{@link java.util.Map Map&amp;lt;K,V&amp;gt;}
       where &lt;tt&gt;K&lt;/tt&gt; and &lt;tt&gt;V&lt;/tt&gt; are
       a primitive type, a wrapper class,
       an enum class, or a class supporting conversion from a
       &lt;tt&gt;CompositeData&lt;/tt&gt; to its class
       &lt;/li&gt;
 &lt;/ul&gt;

 &lt;p&gt;
 When an attribute or operation of a platform MXBean
 is accessed via an &lt;tt&gt;MBeanServer&lt;/tt&gt;, the data types are mapped
 as follows:
 &lt;ul&gt;
   &lt;li&gt;A primitive type or a wrapper class is mapped
       to the same type.
       &lt;/li&gt;
   &lt;li&gt;An {@link Enum} is mapped to
       &lt;tt&gt;String&lt;/tt&gt; whose value is the name of the enum constant.
   &lt;li&gt;A class that defines only getter methods and a static
       &lt;tt&gt;from&lt;/tt&gt; method with a
       {@link javax.management.openmbean.CompositeData CompositeData}
       argument is mapped to
       {@link javax.management.openmbean.CompositeData CompositeData}.
       &lt;/li&gt;
   &lt;li&gt;&lt;tt&gt;Map&amp;lt;K,V&amp;gt;&lt;/tt&gt; is mapped to
       {@link javax.management.openmbean.TabularData TabularData}
       whose row type is a
       {@link javax.management.openmbean.CompositeType CompositeType} with
       two items whose names are &lt;i&gt;&quot;key&quot;&lt;/i&gt; and &lt;i&gt;&quot;value&quot;&lt;/i&gt;
       and the item types are
       the corresponding mapped type of &lt;tt&gt;K&lt;/tt&gt; and &lt;tt&gt;V&lt;/tt&gt;
       respectively and the &lt;i&gt;&quot;key&quot;&lt;/i&gt; is the index.
       &lt;/li&gt;
   &lt;li&gt;&lt;tt&gt;List&amp;lt;E&amp;gt;&lt;/tt&gt; is mapped to an array with the mapped
       type of &lt;tt&gt;E&lt;/tt&gt; as the element type.
       &lt;/li&gt;
   &lt;li&gt;An array of element type &lt;tt&gt;E&lt;/tt&gt; is mapped to
       an array of the same dimenions with the mapped type of &lt;tt&gt;E&lt;/tt&gt;
       as the element type.&lt;/li&gt;
 &lt;/ul&gt;

 The {@link javax.management.MBeanInfo MBeanInfo}
 for a platform MXBean
 describes the data types of the attributes and operations
 as primitive or open types mapped as specified above.

 &lt;p&gt;
 For example, the {@link MemoryMXBean}
 interface has the following &lt;i&gt;getter&lt;/i&gt; and &lt;i&gt;setter&lt;/i&gt; methods:

 &lt;blockquote&gt;&lt;pre&gt;
 public MemoryUsage getHeapMemoryUsage();
 public boolean isVerbose();
 public void setVerbose(boolean value);
 &lt;/pre&gt;&lt;/blockquote&gt;

 These attributes in the &lt;tt&gt;MBeanInfo&lt;/tt&gt;
 of the &lt;tt&gt;MemoryMXBean&lt;/tt&gt; have the following names and types:

 &lt;blockquote&gt;
 &lt;table border&gt;
 &lt;tr&gt;
   &lt;th&gt;Attribute Name&lt;/th&gt;
   &lt;th&gt;Type&lt;/th&gt;
   &lt;/tr&gt;
 &lt;tr&gt;
   &lt;td&gt;&lt;tt&gt;HeapMemoryUsage&lt;/tt&gt;&lt;/td&gt;
   &lt;td&gt;{@link MemoryUsage#from
              CompositeData representing MemoryUsage}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
   &lt;td&gt;&lt;tt&gt;Verbose&lt;/tt&gt;&lt;/td&gt;
   &lt;td&gt;&lt;tt&gt;boolean&lt;/tt&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/table&gt;
 &lt;/blockquote&gt;

 &lt;h4&gt;&lt;a name=&quot;MXBeanNames&quot;&gt;MXBean Names&lt;/a&gt;&lt;/h4&gt;
 Each platform MXBean for a Java virtual machine has a unique
 {@link javax.management.ObjectName ObjectName} for
 registration in the platform &lt;tt&gt;MBeanServer&lt;/tt&gt;.
 A Java virtual machine has a single instance of the following management
 interfaces:

 &lt;blockquote&gt;
 &lt;table border&gt;
 &lt;tr&gt;
 &lt;th&gt;Management Interface&lt;/th&gt;
 &lt;th&gt;ObjectName&lt;/th&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt; {@link ClassLoadingMXBean} &lt;/td&gt;
 &lt;td&gt; {@link #CLASS_LOADING_MXBEAN_NAME
             &lt;tt&gt;java.lang:type=ClassLoading&lt;/tt&gt;}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt; {@link MemoryMXBean} &lt;/td&gt;
 &lt;td&gt; {@link #MEMORY_MXBEAN_NAME
             &lt;tt&gt;java.lang:type=Memory&lt;/tt&gt;}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt; {@link ThreadMXBean} &lt;/td&gt;
 &lt;td&gt; {@link #THREAD_MXBEAN_NAME
             &lt;tt&gt;java.lang:type=Threading&lt;/tt&gt;}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt; {@link RuntimeMXBean} &lt;/td&gt;
 &lt;td&gt; {@link #RUNTIME_MXBEAN_NAME
             &lt;tt&gt;java.lang:type=Runtime&lt;/tt&gt;}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt; {@link OperatingSystemMXBean} &lt;/td&gt;
 &lt;td&gt; {@link #OPERATING_SYSTEM_MXBEAN_NAME
             &lt;tt&gt;java.lang:type=OperatingSystem&lt;/tt&gt;}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/table&gt;
 &lt;/blockquote&gt;

 &lt;p&gt;
 A Java virtual machine has zero or a single instance of
 the following management interfaces.

 &lt;blockquote&gt;
 &lt;table border&gt;
 &lt;tr&gt;
 &lt;th&gt;Management Interface&lt;/th&gt;
 &lt;th&gt;ObjectName&lt;/th&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt; {@link CompilationMXBean} &lt;/td&gt;
 &lt;td&gt; {@link #COMPILATION_MXBEAN_NAME
             &lt;tt&gt;java.lang:type=Compilation&lt;/tt&gt;}&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/table&gt;
 &lt;/blockquote&gt;

 &lt;p&gt;
 A Java virtual machine may have one or more instances of the following
 management interfaces.
 &lt;blockquote&gt;
 &lt;table border&gt;
 &lt;tr&gt;
 &lt;th&gt;Management Interface&lt;/th&gt;
 &lt;th&gt;ObjectName&lt;/th&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt; {@link GarbageCollectorMXBean} &lt;/td&gt;
 &lt;td&gt; {@link #GARBAGE_COLLECTOR_MXBEAN_DOMAIN_TYPE
    &lt;tt&gt;java.lang:type=GarbageCollector&lt;/tt&gt;}&lt;tt&gt;,name=&lt;/tt&gt;&lt;i&gt;collector&apos;s name&lt;/i&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt; {@link MemoryManagerMXBean} &lt;/td&gt;
 &lt;td&gt; {@link #MEMORY_MANAGER_MXBEAN_DOMAIN_TYPE
    &lt;tt&gt;java.lang:type=MemoryManager&lt;/tt&gt;}&lt;tt&gt;,name=&lt;/tt&gt;&lt;i&gt;manager&apos;s name&lt;/i&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt; {@link MemoryPoolMXBean} &lt;/td&gt;
 &lt;td&gt; {@link #MEMORY_POOL_MXBEAN_DOMAIN_TYPE
    &lt;tt&gt;java.lang:type=MemoryPool&lt;/tt&gt;}&lt;tt&gt;,name=&lt;/tt&gt;&lt;i&gt;pool&apos;s name&lt;/i&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/table&gt;
 &lt;/blockquote&gt;</description>
			<attribute name="@see">
				<description>&lt;a href=&quot;../../../javax/management/package-summary.html&quot;&gt;
      JMX Specification.&lt;/a&gt;</description>
			</attribute>
			<attribute name="@see">
				<description>&lt;a href=&quot;package-summary.html#examples&quot;&gt;
      Ways to Access Management Metrics&lt;/a&gt;</description>
			</attribute>
			<attribute name="@see">
				<description>java.util.logging.LoggingMXBean</description>
			</attribute>
			<attribute name="@see">
				<description>javax.management.MXBean</description>
			</attribute>
			<attribute name="@author">
				<description>Mandy Chung</description>
			</attribute>
			<attribute name="@since">
				<description>1.5</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="java.lang:type=ClassLoading" visibility="public" name="CLASS_LOADING_MXBEAN_NAME" constexpr="&quot;java.lang:type=ClassLoading&quot;" fulltype="java.lang.String" type="String">
				<comment>
					<description>String representation of the
 &lt;tt&gt;ObjectName&lt;/tt&gt; for the {@link ClassLoadingMXBean}.</description>
				</comment>
			</field>
			<field final="true" static="true" const="java.lang:type=Compilation" visibility="public" name="COMPILATION_MXBEAN_NAME" constexpr="&quot;java.lang:type=Compilation&quot;" fulltype="java.lang.String" type="String">
				<comment>
					<description>String representation of the
 &lt;tt&gt;ObjectName&lt;/tt&gt; for the {@link CompilationMXBean}.</description>
				</comment>
			</field>
			<field final="true" static="true" const="java.lang:type=Memory" visibility="public" name="MEMORY_MXBEAN_NAME" constexpr="&quot;java.lang:type=Memory&quot;" fulltype="java.lang.String" type="String">
				<comment>
					<description>String representation of the
 &lt;tt&gt;ObjectName&lt;/tt&gt; for the {@link MemoryMXBean}.</description>
				</comment>
			</field>
			<field final="true" static="true" const="java.lang:type=OperatingSystem" visibility="public" name="OPERATING_SYSTEM_MXBEAN_NAME" constexpr="&quot;java.lang:type=OperatingSystem&quot;" fulltype="java.lang.String" type="String">
				<comment>
					<description>String representation of the
 &lt;tt&gt;ObjectName&lt;/tt&gt; for the {@link OperatingSystemMXBean}.</description>
				</comment>
			</field>
			<field final="true" static="true" const="java.lang:type=Runtime" visibility="public" name="RUNTIME_MXBEAN_NAME" constexpr="&quot;java.lang:type=Runtime&quot;" fulltype="java.lang.String" type="String">
				<comment>
					<description>String representation of the
 &lt;tt&gt;ObjectName&lt;/tt&gt; for the {@link RuntimeMXBean}.</description>
				</comment>
			</field>
			<field final="true" static="true" const="java.lang:type=Threading" visibility="public" name="THREAD_MXBEAN_NAME" constexpr="&quot;java.lang:type=Threading&quot;" fulltype="java.lang.String" type="String">
				<comment>
					<description>String representation of the
 &lt;tt&gt;ObjectName&lt;/tt&gt; for the {@link ThreadMXBean}.</description>
				</comment>
			</field>
			<field final="true" static="true" const="java.lang:type=GarbageCollector" visibility="public" name="GARBAGE_COLLECTOR_MXBEAN_DOMAIN_TYPE" constexpr="&quot;java.lang:type=GarbageCollector&quot;" fulltype="java.lang.String" type="String">
				<comment>
					<description>The domain name and the type key property in
 the &lt;tt&gt;ObjectName&lt;/tt&gt; for a {@link GarbageCollectorMXBean}.
 The unique &lt;tt&gt;ObjectName&lt;/tt&gt; for a &lt;tt&gt;GarbageCollectorMXBean&lt;/tt&gt;
 can be formed by appending this string with
 &quot;&lt;tt&gt;,name=&lt;/tt&gt;&lt;i&gt;collector&apos;s name&lt;/i&gt;&quot;.</description>
				</comment>
			</field>
			<field final="true" static="true" const="java.lang:type=MemoryManager" visibility="public" name="MEMORY_MANAGER_MXBEAN_DOMAIN_TYPE" constexpr="&quot;java.lang:type=MemoryManager&quot;" fulltype="java.lang.String" type="String">
				<comment>
					<description>The domain name and the type key property in
 the &lt;tt&gt;ObjectName&lt;/tt&gt; for a {@link MemoryManagerMXBean}.
 The unique &lt;tt&gt;ObjectName&lt;/tt&gt; for a &lt;tt&gt;MemoryManagerMXBean&lt;/tt&gt;
 can be formed by appending this string with
 &quot;&lt;tt&gt;,name=&lt;/tt&gt;&lt;i&gt;manager&apos;s name&lt;/i&gt;&quot;.</description>
				</comment>
			</field>
			<field final="true" static="true" const="java.lang:type=MemoryPool" visibility="public" name="MEMORY_POOL_MXBEAN_DOMAIN_TYPE" constexpr="&quot;java.lang:type=MemoryPool&quot;" fulltype="java.lang.String" type="String">
				<comment>
					<description>The domain name and the type key property in
 the &lt;tt&gt;ObjectName&lt;/tt&gt; for a {@link MemoryPoolMXBean}.
 The unique &lt;tt&gt;ObjectName&lt;/tt&gt; for a &lt;tt&gt;MemoryPoolMXBean&lt;/tt&gt;
 can be formed by appending this string with
 &lt;tt&gt;,name=&lt;/tt&gt;&lt;i&gt;pool&apos;s name&lt;/i&gt;.</description>
				</comment>
			</field>
			<field static="true" visibility="private" name="platformMBeanServer" fulltype="javax.management.MBeanServer" type="MBeanServer" />
			<field final="true" static="true" const="javax.management.NotificationEmitter" visibility="private" name="NOTIF_EMITTER" constexpr="&quot;javax.management.NotificationEmitter&quot;" fulltype="java.lang.String" type="String" />
		</fields>
		<methods>
			<constructor visibility="private" name="ManagementFactory" />
			<method static="true" visibility="public" name="getClassLoadingMXBean" returncomment="a {@link ClassLoadingMXBean} object for
 the Java virtual machine." fulltype="java.lang.management.ClassLoadingMXBean" type="ClassLoadingMXBean">
				<comment>
					<description>Returns the managed bean for the class loading system of
 the Java virtual machine.</description>
					<attribute name="@return">
						<description>a {@link ClassLoadingMXBean} object for
 the Java virtual machine.</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="getMemoryMXBean" returncomment="a {@link MemoryMXBean} object for the Java virtual machine." fulltype="java.lang.management.MemoryMXBean" type="MemoryMXBean">
				<comment>
					<description>Returns the managed bean for the memory system of
 the Java virtual machine.</description>
					<attribute name="@return">
						<description>a {@link MemoryMXBean} object for the Java virtual machine.</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="getThreadMXBean" returncomment="a {@link ThreadMXBean} object for the Java virtual machine." fulltype="java.lang.management.ThreadMXBean" type="ThreadMXBean">
				<comment>
					<description>Returns the managed bean for the thread system of
 the Java virtual machine.</description>
					<attribute name="@return">
						<description>a {@link ThreadMXBean} object for the Java virtual machine.</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="getRuntimeMXBean" returncomment="a {@link RuntimeMXBean} object for the Java virtual machine." fulltype="java.lang.management.RuntimeMXBean" type="RuntimeMXBean">
				<comment>
					<description>Returns the managed bean for the runtime system of
 the Java virtual machine.</description>
					<attribute name="@return">
						<description>a {@link RuntimeMXBean} object for the Java virtual machine.</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="getCompilationMXBean" returncomment="a {@link CompilationMXBean} object for the Java virtual
   machine or &lt;tt&gt;null&lt;/tt&gt; if the Java virtual machine has
   no compilation system." fulltype="java.lang.management.CompilationMXBean" type="CompilationMXBean">
				<comment>
					<description>Returns the managed bean for the compilation system of
 the Java virtual machine.  This method returns &lt;tt&gt;null&lt;/tt&gt;
 if the Java virtual machine has no compilation system.</description>
					<attribute name="@return">
						<description>a {@link CompilationMXBean} object for the Java virtual
   machine or &lt;tt&gt;null&lt;/tt&gt; if the Java virtual machine has
   no compilation system.</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="getOperatingSystemMXBean" returncomment="an {@link OperatingSystemMXBean} object for
 the Java virtual machine." fulltype="java.lang.management.OperatingSystemMXBean" type="OperatingSystemMXBean">
				<comment>
					<description>Returns the managed bean for the operating system on which
 the Java virtual machine is running.</description>
					<attribute name="@return">
						<description>an {@link OperatingSystemMXBean} object for
 the Java virtual machine.</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="getMemoryPoolMXBeans" returncomment="a list of &lt;tt&gt;MemoryPoolMXBean&lt;/tt&gt; objects." fulltype="java.util.List" type="List">
				<comment>
					<description>Returns a list of {@link MemoryPoolMXBean} objects in the
 Java virtual machine.
 The Java virtual machine can have one or more memory pools.
 It may add or remove memory pools during execution.</description>
					<attribute name="@return">
						<description>a list of &lt;tt&gt;MemoryPoolMXBean&lt;/tt&gt; objects.</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="getMemoryManagerMXBeans" returncomment="a list of &lt;tt&gt;MemoryManagerMXBean&lt;/tt&gt; objects." fulltype="java.util.List" type="List">
				<comment>
					<description>Returns a list of {@link MemoryManagerMXBean} objects
 in the Java virtual machine.
 The Java virtual machine can have one or more memory managers.
 It may add or remove memory managers during execution.</description>
					<attribute name="@return">
						<description>a list of &lt;tt&gt;MemoryManagerMXBean&lt;/tt&gt; objects.</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="getGarbageCollectorMXBeans" returncomment="a list of &lt;tt&gt;GarbageCollectorMXBean&lt;/tt&gt; objects." fulltype="java.util.List" type="List">
				<comment>
					<description>Returns a list of {@link GarbageCollectorMXBean} objects
 in the Java virtual machine.
 The Java virtual machine may have one or more
 &lt;tt&gt;GarbageCollectorMXBean&lt;/tt&gt; objects.
 It may add or remove &lt;tt&gt;GarbageCollectorMXBean&lt;/tt&gt;
 during execution.</description>
					<attribute name="@return">
						<description>a list of &lt;tt&gt;GarbageCollectorMXBean&lt;/tt&gt; objects.</description>
					</attribute>
				</comment>
			</method>
			<method static="true" synchronized="true" visibility="public" name="getPlatformMBeanServer" returncomment="the platform &lt;tt&gt;MBeanServer&lt;/tt&gt;; the platform
         MXBeans are registered into the platform &lt;tt&gt;MBeanServer&lt;/tt&gt;
         at the first time this method is called." fulltype="javax.management.MBeanServer" type="MBeanServer">
				<comment>
					<description>Returns the platform {@link javax.management.MBeanServer MBeanServer}.
 On the first call to this method, it first creates the platform
 &lt;tt&gt;MBeanServer&lt;/tt&gt; by calling the
 {@link javax.management.MBeanServerFactory#createMBeanServer
 MBeanServerFactory.createMBeanServer}
 method and registers the platform MXBeans in this platform
 &lt;tt&gt;MBeanServer&lt;/tt&gt; using the &lt;a href=&quot;#MXBeanNames&quot;&gt;MXBean names&lt;/a&gt;
 defined in the class description.
 This method, in subsequent calls, will simply return the
 initially created platform &lt;tt&gt;MBeanServer&lt;/tt&gt;.
 &lt;p&gt;
 MXBeans that get created and destroyed dynamically, for example,
 memory {@link MemoryPoolMXBean pools} and
 {@link MemoryManagerMXBean managers},
 will automatically be registered and deregistered into the platform
 &lt;tt&gt;MBeanServer&lt;/tt&gt;.
 &lt;p&gt;
 If the system property &lt;tt&gt;javax.management.builder.initial&lt;/tt&gt;
 is set, the platform &lt;tt&gt;MBeanServer&lt;/tt&gt; creation will be done
 by the specified {@link javax.management.MBeanServerBuilder}.
 &lt;p&gt;
 It is recommended that this platform MBeanServer also be used
 to register other application managed beans
 besides the platform MXBeans.
 This will allow all MBeans to be published through the same
 &lt;tt&gt;MBeanServer&lt;/tt&gt; and hence allow for easier network publishing
 and discovery.
 Name conflicts with the platform MXBeans should be avoided.</description>
					<attribute name="@return">
						<description>the platform &lt;tt&gt;MBeanServer&lt;/tt&gt;; the platform
         MXBeans are registered into the platform &lt;tt&gt;MBeanServer&lt;/tt&gt;
         at the first time this method is called.</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException if there is a security manager
 and the caller does not have the permission required by
 {@link javax.management.MBeanServerFactory#createMBeanServer}.</description>
					</attribute>
					<attribute name="@see">
						<description>javax.management.MBeanServerFactory</description>
					</attribute>
					<attribute name="@see">
						<description>javax.management.MBeanServerFactory#createMBeanServer</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="newPlatformMXBeanProxy" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Returns a proxy for a platform MXBean interface of a
 given &lt;a href=&quot;#MXBeanNames&quot;&gt;MXBean name&lt;/a&gt;
 that forwards its method calls through the given
 &lt;tt&gt;MBeanServerConnection&lt;/tt&gt;.

 &lt;p&gt;This method is equivalent to:
 &lt;blockquote&gt;
 {@link java.lang.reflect.Proxy#newProxyInstance
        Proxy.newProxyInstance}&lt;tt&gt;(mxbeanInterface.getClassLoader(),
        new Class[] { mxbeanInterface }, handler)&lt;/tt&gt;
 &lt;/blockquote&gt;

 where &lt;tt&gt;handler&lt;/tt&gt; is an {@link java.lang.reflect.InvocationHandler
 InvocationHandler} to which method invocations to the MXBean interface
 are dispatched. This &lt;tt&gt;handler&lt;/tt&gt; converts an input parameter
 from an MXBean data type to its mapped open type before forwarding
 to the &lt;tt&gt;MBeanServer&lt;/tt&gt; and converts a return value from
 an MXBean method call through the &lt;tt&gt;MBeanServer&lt;/tt&gt;
 from an open type to the corresponding return type declared in
 the MXBean interface.

 &lt;p&gt;
 If the MXBean is a notification emitter (i.e.,
 it implements
 {@link javax.management.NotificationEmitter NotificationEmitter}),
 both the &lt;tt&gt;mxbeanInterface&lt;/tt&gt; and &lt;tt&gt;NotificationEmitter&lt;/tt&gt;
 will be implemented by this proxy.

 &lt;p&gt;
 &lt;b&gt;Notes:&lt;/b&gt;
 &lt;ol&gt;
 &lt;li&gt;Using an MXBean proxy is a convenience remote access to
 a platform MXBean of a running virtual machine.  All method
 calls to the MXBean proxy are forwarded to an
 &lt;tt&gt;MBeanServerConnection&lt;/tt&gt; where
 {@link java.io.IOException IOException} may be thrown
 when the communication problem occurs with the connector server.
 An application remotely accesses the platform MXBeans using
 proxy should prepare to catch &lt;tt&gt;IOException&lt;/tt&gt; as if
 accessing with the &lt;tt&gt;MBeanServerConnector&lt;/tt&gt; interface.&lt;/li&gt;

 &lt;li&gt;When a client application is designed to remotely access MXBeans
 for a running virtual machine whose version is different than
 the version on which the application is running,
 it should prepare to catch
 {@link java.io.InvalidObjectException InvalidObjectException}
 which is thrown when an MXBean proxy receives a name of an
 enum constant which is missing in the enum class loaded in
 the client application. &lt;/li&gt;

 &lt;li&gt;{@link javax.management.MBeanServerInvocationHandler
 MBeanServerInvocationHandler} or its
 {@link javax.management.MBeanServerInvocationHandler#newProxyInstance
 newProxyInstance} method cannot be used to create
 a proxy for a platform MXBean. The proxy object created
 by &lt;tt&gt;MBeanServerInvocationHandler&lt;/tt&gt; does not handle
 the properties of the platform MXBeans described in
 the &lt;a href=&quot;#MXBean&quot;&gt;class specification&lt;/a&gt;.
&lt;/li&gt;
 &lt;/ol&gt;</description>
					<attribute name="@param">
						<description>connection the &lt;tt&gt;MBeanServerConnection&lt;/tt&gt; to forward to.</description>
					</attribute>
					<attribute name="@param">
						<description>mxbeanName the name of a platform MXBean within
 &lt;tt&gt;connection&lt;/tt&gt; to forward to. &lt;tt&gt;mxbeanName&lt;/tt&gt; must be
 in the format of {@link ObjectName ObjectName}.</description>
					</attribute>
					<attribute name="@param">
						<description>mxbeanInterface the MXBean interface to be implemented
 by the proxy.</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalArgumentException if
 &lt;ul&gt;
 &lt;li&gt;&lt;tt&gt;mxbeanName&lt;/tt&gt; is not with a valid
     {@link ObjectName ObjectName} format, or&lt;/li&gt;
 &lt;li&gt;the named MXBean in the &lt;tt&gt;connection&lt;/tt&gt; is
     not a MXBean provided by the platform, or&lt;/li&gt;
 &lt;li&gt;the named MXBean is not registered in the
     &lt;tt&gt;MBeanServerConnection&lt;/tt&gt;, or&lt;/li&gt;
 &lt;li&gt;the named MXBean is not an instance of the given
     &lt;tt&gt;mxbeanInterface&lt;/tt&gt;&lt;/li&gt;
 &lt;/ul&gt;</description>
					</attribute>
					<attribute name="@throws">
						<description>java.io.IOException if a communication problem
 occurred when accessing the &lt;tt&gt;MBeanServerConnection&lt;/tt&gt;.</description>
					</attribute>
				</comment>
				<params>
					<param name="connection" comment="the &lt;tt&gt;MBeanServerConnection&lt;/tt&gt; to forward to." fulltype="javax.management.MBeanServerConnection" type="MBeanServerConnection" />
					<param name="mxbeanName" comment="the name of a platform MXBean within
 &lt;tt&gt;connection&lt;/tt&gt; to forward to. &lt;tt&gt;mxbeanName&lt;/tt&gt; must be
 in the format of {@link ObjectName ObjectName}." fulltype="java.lang.String" type="String" />
					<param name="mxbeanInterface" comment="the MXBean interface to be implemented
 by the proxy." fulltype="java.lang.Class" type="Class" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="java.lang.management" interface="true" fulltype="java.lang.management.OperatingSystemMXBean" type="OperatingSystemMXBean">
		<comment>
			<description>The management interface for the operating system on which
 the Java virtual machine is running.

 &lt;p&gt; A Java virtual machine has a single instance of the implementation
 class of this interface.  This instance implementing this interface is
 an &lt;a href=&quot;ManagementFactory.html#MXBean&quot;&gt;MXBean&lt;/a&gt;
 that can be obtained by calling
 the {@link ManagementFactory#getOperatingSystemMXBean} method or
 from the {@link ManagementFactory#getPlatformMBeanServer
 platform &lt;tt&gt;MBeanServer&lt;/tt&gt;} method.

 &lt;p&gt;The &lt;tt&gt;ObjectName&lt;/tt&gt; for uniquely identifying the MXBean for
 the operating system within an MBeanServer is:
 &lt;blockquote&gt;
    {@link ManagementFactory#OPERATING_SYSTEM_MXBEAN_NAME
      &lt;tt&gt;java.lang:type=OperatingSystem&lt;/tt&gt;}
 &lt;/blockquote&gt;

 &lt;p&gt; This interface defines several convenient methods for accessing
 system properties about the operating system on which the Java
 virtual machine is running.</description>
			<attribute name="@see">
				<description>&lt;a href=&quot;../../../javax/management/package-summary.html&quot;&gt;
      JMX Specification.&lt;/a&gt;</description>
			</attribute>
			<attribute name="@see">
				<description>&lt;a href=&quot;package-summary.html#examples&quot;&gt;
      Ways to Access MXBeans&lt;/a&gt;</description>
			</attribute>
			<attribute name="@author">
				<description>Mandy Chung</description>
			</attribute>
			<attribute name="@since">
				<description>1.5</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="getName" returncomment="the operating system name." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the operating system name.
 This method is equivalent to &lt;tt&gt;System.getProperty(&quot;os.name&quot;)&lt;/tt&gt;.</description>
					<attribute name="@return">
						<description>the operating system name.</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.SecurityException
     if a security manager exists and its
     &lt;code&gt;checkPropertiesAccess&lt;/code&gt; method doesn&apos;t allow access
     to this system property.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.SecurityManager#checkPropertyAccess(java.lang.String)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.System#getProperty</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getArch" returncomment="the operating system architecture." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the operating system architecture.
 This method is equivalent to &lt;tt&gt;System.getProperty(&quot;os.arch&quot;)&lt;/tt&gt;.</description>
					<attribute name="@return">
						<description>the operating system architecture.</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.SecurityException
     if a security manager exists and its
     &lt;code&gt;checkPropertiesAccess&lt;/code&gt; method doesn&apos;t allow access
     to this system property.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.SecurityManager#checkPropertyAccess(java.lang.String)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.System#getProperty</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getVersion" returncomment="the operating system version." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the operating system version.
 This method is equivalent to &lt;tt&gt;System.getProperty(&quot;os.version&quot;)&lt;/tt&gt;.</description>
					<attribute name="@return">
						<description>the operating system version.</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.SecurityException
     if a security manager exists and its
     &lt;code&gt;checkPropertiesAccess&lt;/code&gt; method doesn&apos;t allow access
     to this system property.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.SecurityManager#checkPropertyAccess(java.lang.String)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.System#getProperty</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getAvailableProcessors" returncomment="the number of processors available to the virtual
          machine; never smaller than one." fulltype="int" type="int">
				<comment>
					<description>Returns the number of processors available to the Java virtual machine.
 This method is equivalent to the {@link Runtime#availableProcessors()}
 method.
 &lt;p&gt; This value may change during a particular invocation of
 the virtual machine.</description>
					<attribute name="@return">
						<description>the number of processors available to the virtual
          machine; never smaller than one.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getSystemLoadAverage" returncomment="the system load average; or a negative value if not available." fulltype="double" type="double">
				<comment>
					<description>Returns the system load average for the last minute.
 The system load average is the sum of the number of runnable entities
 queued to the {@linkplain #getAvailableProcessors available processors}
 and the number of runnable entities running on the available processors
 averaged over a period of time.
 The way in which the load average is calculated is operating system
 specific but is typically a damped time-dependent average.
 &lt;p&gt;
 If the load average is not available, a negative value is returned.
 &lt;p&gt;
 This method is designed to provide a hint about the system load
 and may be queried frequently.
 The load average may be unavailable on some platform where it is
 expensive to implement this method.</description>
					<attribute name="@return">
						<description>the system load average; or a negative value if not available.</description>
					</attribute>
					<attribute name="@since">
						<description>1.6</description>
					</attribute>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass final="true" superclass="Enum" visibility="public" package="java.lang.management" serializable="true" superclassfulltype="java.lang.Enum" fulltype="java.lang.management.MemoryType" type="MemoryType">
		<comment>
			<description>Types of {@link MemoryPoolMXBean memory pools}.</description>
			<attribute name="@author">
				<description>Mandy Chung</description>
			</attribute>
			<attribute name="@since">
				<description>1.5</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" visibility="public" name="HEAP" fulltype="java.lang.management.MemoryType" type="MemoryType">
				<comment>
					<description>Heap memory type.
 &lt;p&gt;
 The Java virtual machine has a &lt;i&gt;heap&lt;/i&gt;
 that is the runtime data area from which
 memory for all class instances and arrays are allocated.</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="NON_HEAP" fulltype="java.lang.management.MemoryType" type="MemoryType">
				<comment>
					<description>Non-heap memory type.
 &lt;p&gt;
 The Java virtual machine manages memory other than the heap
 (referred as &lt;i&gt;non-heap memory&lt;/i&gt;).  The non-heap memory includes
 the &lt;i&gt;method area&lt;/i&gt; and memory required for the internal
 processing or optimization for the Java virtual machine.
 It stores per-class structures such as a runtime
 constant pool, field and method data, and the code for
 methods and constructors.</description>
				</comment>
			</field>
			<field final="true" visibility="private" name="description" fulltype="java.lang.String" type="String" />
			<field final="true" static="true" const="6992337162326171013" visibility="private" name="serialVersionUID" constexpr="6992337162326171013L" fulltype="long" type="long" />
		</fields>
		<methods>
			<constructor visibility="private" name="MemoryType">
				<params>
					<param name="s" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method static="true" visibility="public" name="values" fulltype="java.lang.management.MemoryType[]" type="MemoryType" />
			<method static="true" visibility="public" name="valueOf" fulltype="java.lang.management.MemoryType" type="MemoryType">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="toString" returncomment="the string representation of this &lt;tt&gt;MemoryType&lt;/tt&gt;." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the string representation of this &lt;tt&gt;MemoryType&lt;/tt&gt;.</description>
					<attribute name="@return">
						<description>the string representation of this &lt;tt&gt;MemoryType&lt;/tt&gt;.</description>
					</attribute>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="java.lang.management" interface="true" fulltype="java.lang.management.MemoryMXBean" type="MemoryMXBean">
		<comment>
			<description>The management interface for the memory system of
 the Java virtual machine.

 &lt;p&gt; A Java virtual machine has a single instance of the implementation
 class of this interface.  This instance implementing this interface is
 an &lt;a href=&quot;ManagementFactory.html#MXBean&quot;&gt;MXBean&lt;/a&gt;
 that can be obtained by calling
 the {@link ManagementFactory#getMemoryMXBean} method or
 from the {@link ManagementFactory#getPlatformMBeanServer
 platform &lt;tt&gt;MBeanServer&lt;/tt&gt;} method.

 &lt;p&gt;The &lt;tt&gt;ObjectName&lt;/tt&gt; for uniquely identifying the MXBean for
 the memory system within an MBeanServer is:
 &lt;blockquote&gt;
    {@link ManagementFactory#MEMORY_MXBEAN_NAME
           &lt;tt&gt;java.lang:type=Memory&lt;/tt&gt;}
 &lt;/blockquote&gt;

 &lt;h4&gt; Memory &lt;/h4&gt;
 The memory system of the Java virtual machine manages
 the following kinds of memory:

 &lt;h4&gt; 1. Heap &lt;/h4&gt;
 The Java virtual machine has a &lt;i&gt;heap&lt;/i&gt; that is the runtime
 data area from which memory for all class instances and arrays
 are allocated.  It is created at the Java virtual machine start-up.
 Heap memory for objects is reclaimed by an automatic memory management
 system which is known as a &lt;i&gt;garbage collector&lt;/i&gt;.

 &lt;p&gt;The heap may be of a fixed size or may be expanded and shrunk.
 The memory for the heap does not need to be contiguous.

 &lt;h4&gt; 2. Non-Heap Memory&lt;/h4&gt;
 The Java virtual machine manages memory other than the heap
 (referred as &lt;i&gt;non-heap memory&lt;/i&gt;).

 &lt;p&gt; The Java virtual machine has a &lt;i&gt;method area&lt;/i&gt; that is shared
 among all threads.
 The method area belongs to non-heap memory.  It stores per-class structures
 such as a runtime constant pool, field and method data, and the code for
 methods and constructors.  It is created at the Java virtual machine
 start-up.

 &lt;p&gt; The method area is logically part of the heap but a Java virtual
 machine implementation may choose not to either garbage collect
 or compact it.  Similar to the heap, the method area may be of a
 fixed size or may be expanded and shrunk.  The memory for the
 method area does not need to be contiguous.

 &lt;p&gt;In addition to the method area, a Java virtual machine
 implementation may require memory for internal processing or
 optimization which also belongs to non-heap memory.
 For example, the JIT compiler requires memory for storing the native
 machine code translated from the Java virtual machine code for
 high performance.

 &lt;h4&gt;Memory Pools and Memory Managers&lt;/h4&gt;
 {@link MemoryPoolMXBean Memory pools} and
 {@link MemoryManagerMXBean memory managers} are the abstract entities
 that monitor and manage the memory system
 of the Java virtual machine.

 &lt;p&gt;A memory pool represents a memory area that the Java virtual machine
 manages.  The Java virtual machine has at least one memory pool
 and it may create or remove memory pools during execution.
 A memory pool can belong to either the heap or the non-heap memory.

 &lt;p&gt;A memory manager is responsible for managing one or more memory pools.
 The garbage collector is one type of memory manager responsible
 for reclaiming memory occupied by unreachable objects.  A Java virtual
 machine may have one or more memory managers.   It may
 add or remove memory managers during execution.
 A memory pool can be managed by more than one memory manager.

 &lt;h4&gt;Memory Usage Monitoring&lt;/h4&gt;

 Memory usage is a very important monitoring attribute for the memory system.
 The memory usage, for example, could indicate:
 &lt;ul&gt;
   &lt;li&gt;the memory usage of an application,&lt;/li&gt;
   &lt;li&gt;the workload being imposed on the automatic memory management system,&lt;/li&gt;
   &lt;li&gt;potential memory leakage.&lt;/li&gt;
 &lt;/ul&gt;

 &lt;p&gt;
 The memory usage can be monitored in three ways:
 &lt;ul&gt;
   &lt;li&gt;Polling&lt;/li&gt;
   &lt;li&gt;Usage Threshold Notification&lt;/li&gt;
   &lt;li&gt;Collection Usage Threshold Notification&lt;/li&gt;
 &lt;/ul&gt;

 Details are specified in the {@link MemoryPoolMXBean} interface.

 &lt;p&gt;The memory usage monitoring mechanism is intended for load-balancing
 or workload distribution use.  For example, an application would stop
 receiving any new workload when its memory usage exceeds a
 certain threshold. It is not intended for an application to detect
 and recover from a low memory condition.

 &lt;h4&gt;Notifications&lt;/h4&gt;

 &lt;p&gt;This &lt;tt&gt;MemoryMXBean&lt;/tt&gt; is a
 {@link javax.management.NotificationEmitter NotificationEmitter}
 that emits two types of memory {@link javax.management.Notification
 notifications} if any one of the memory pools
 supports a &lt;a href=&quot;MemoryPoolMXBean.html#UsageThreshold&quot;&gt;usage threshold&lt;/a&gt;
 or a &lt;a href=&quot;MemoryPoolMXBean.html#CollectionThreshold&quot;&gt;collection usage
 threshold&lt;/a&gt; which can be determined by calling the
 {@link MemoryPoolMXBean#isUsageThresholdSupported} and
 {@link MemoryPoolMXBean#isCollectionUsageThresholdSupported} methods.
 &lt;ul&gt;
   &lt;li&gt;{@link MemoryNotificationInfo#MEMORY_THRESHOLD_EXCEEDED
       usage threshold exceeded notification} - for notifying that
       the memory usage of a memory pool is increased and has reached
       or exceeded its
       &lt;a href=&quot;MemoryPoolMXBean.html#UsageThreshold&quot;&gt; usage threshold&lt;/a&gt; value.
       &lt;/li&gt;
   &lt;li&gt;{@link MemoryNotificationInfo#MEMORY_COLLECTION_THRESHOLD_EXCEEDED
       collection usage threshold exceeded notification} - for notifying that
       the memory usage of a memory pool is greater than or equal to its
       &lt;a href=&quot;MemoryPoolMXBean.html#CollectionThreshold&quot;&gt;
       collection usage threshold&lt;/a&gt; after the Java virtual machine
       has expended effort in recycling unused objects in that
       memory pool.&lt;/li&gt;
 &lt;/ul&gt;

 &lt;p&gt;
 The notification emitted is a {@link javax.management.Notification}
 instance whose {@link javax.management.Notification#setUserData
 user data} is set to a {@link CompositeData CompositeData}
 that represents a {@link MemoryNotificationInfo} object
 containing information about the memory pool when the notification
 was constructed. The &lt;tt&gt;CompositeData&lt;/tt&gt; contains the attributes
 as described in {@link MemoryNotificationInfo#from
 MemoryNotificationInfo}.

 &lt;hr&gt;
 &lt;h4&gt;NotificationEmitter&lt;/h4&gt;
 The &lt;tt&gt;MemoryMXBean&lt;/tt&gt; object returned by
 {@link ManagementFactory#getMemoryMXBean} implements
 the {@link javax.management.NotificationEmitter NotificationEmitter}
 interface that allows a listener to be registered within the
 &lt;tt&gt;MemoryMXBean&lt;/tt&gt; as a notification listener.

 Below is an example code that registers a &lt;tt&gt;MyListener&lt;/tt&gt; to handle
 notification emitted by the &lt;tt&gt;MemoryMXBean&lt;/tt&gt;.

 &lt;blockquote&gt;&lt;pre&gt;
 class MyListener implements javax.management.NotificationListener {
     public void handleNotification(Notification notif, Object handback) {
         // handle notification
         ....
     }
 }

 MemoryMXBean mbean = ManagementFactory.getMemoryMXBean();
 NotificationEmitter emitter = (NotificationEmitter) mbean;
 MyListener listener = new MyListener();
 emitter.addNotificationListener(listener, null, null);
 &lt;/pre&gt;&lt;/blockquote&gt;</description>
			<attribute name="@see">
				<description>&lt;a href=&quot;../../../javax/management/package-summary.html&quot;&gt;
      JMX Specification.&lt;/a&gt;</description>
			</attribute>
			<attribute name="@see">
				<description>&lt;a href=&quot;package-summary.html#examples&quot;&gt;
      Ways to Access MXBeans&lt;/a&gt;</description>
			</attribute>
			<attribute name="@author">
				<description>Mandy Chung</description>
			</attribute>
			<attribute name="@since">
				<description>1.5</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="getObjectPendingFinalizationCount" returncomment="the approximate number objects for which finalization
 is pending." fulltype="int" type="int">
				<comment>
					<description>Returns the approximate number of objects for which
 finalization is pending.</description>
					<attribute name="@return">
						<description>the approximate number objects for which finalization
 is pending.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getHeapMemoryUsage" returncomment="a {@link MemoryUsage} object representing
 the heap memory usage." fulltype="java.lang.management.MemoryUsage" type="MemoryUsage">
				<comment>
					<description>Returns the current memory usage of the heap that
 is used for object allocation.  The heap consists
 of one or more memory pools.  The &lt;tt&gt;used&lt;/tt&gt;
 and &lt;tt&gt;committed&lt;/tt&gt; size of the returned memory
 usage is the sum of those values of all heap memory pools
 whereas the &lt;tt&gt;init&lt;/tt&gt; and &lt;tt&gt;max&lt;/tt&gt; size of the
 returned memory usage represents the setting of the heap
 memory which may not be the sum of those of all heap
 memory pools.
 &lt;p&gt;
 The amount of used memory in the returned memory usage
 is the amount of memory occupied by both live objects
 and garbage objects that have not been collected, if any.

 &lt;p&gt;
 &lt;b&gt;MBeanServer access&lt;/b&gt;:&lt;br&gt;
 The mapped type of &lt;tt&gt;MemoryUsage&lt;/tt&gt; is
 &lt;tt&gt;CompositeData&lt;/tt&gt; with attributes as specified in
 {@link MemoryUsage#from MemoryUsage}.</description>
					<attribute name="@return">
						<description>a {@link MemoryUsage} object representing
 the heap memory usage.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getNonHeapMemoryUsage" returncomment="a {@link MemoryUsage} object representing
 the non-heap memory usage." fulltype="java.lang.management.MemoryUsage" type="MemoryUsage">
				<comment>
					<description>Returns the current memory usage of non-heap memory that
 is used by the Java virtual machine.
 The non-heap memory consists of one or more memory pools.
 The &lt;tt&gt;used&lt;/tt&gt; and &lt;tt&gt;committed&lt;/tt&gt; size of the
 returned memory usage is the sum of those values of
 all non-heap memory pools whereas the &lt;tt&gt;init&lt;/tt&gt;
 and &lt;tt&gt;max&lt;/tt&gt; size of the returned memory usage
 represents the setting of the non-heap
 memory which may not be the sum of those of all non-heap
 memory pools.

 &lt;p&gt;
 &lt;b&gt;MBeanServer access&lt;/b&gt;:&lt;br&gt;
 The mapped type of &lt;tt&gt;MemoryUsage&lt;/tt&gt; is
 &lt;tt&gt;CompositeData&lt;/tt&gt; with attributes as specified in
 {@link MemoryUsage#from MemoryUsage}.</description>
					<attribute name="@return">
						<description>a {@link MemoryUsage} object representing
 the non-heap memory usage.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="isVerbose" returncomment="&lt;tt&gt;true&lt;/tt&gt; if verbose output for the memory
 system is enabled; &lt;tt&gt;false&lt;/tt&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Tests if verbose output for the memory system is enabled.</description>
					<attribute name="@return">
						<description>&lt;tt&gt;true&lt;/tt&gt; if verbose output for the memory
 system is enabled; &lt;tt&gt;false&lt;/tt&gt; otherwise.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="setVerbose" fulltype="void" type="void">
				<comment>
					<description>Enables or disables verbose output for the memory
 system.  The verbose output information and the output stream
 to which the verbose information is emitted are implementation
 dependent.  Typically, a Java virtual machine implementation
 prints a message whenever it frees memory at garbage collection.

 &lt;p&gt;
 Each invocation of this method enables or disables verbose
 output globally.</description>
					<attribute name="@param">
						<description>value &lt;tt&gt;true&lt;/tt&gt; to enable verbose output;
              &lt;tt&gt;false&lt;/tt&gt; to disable.</description>
					</attribute>
					<attribute name="@exception">
						<description>java.lang.SecurityException if a security manager
             exists and the caller does not have
             ManagementPermission(&quot;control&quot;).</description>
					</attribute>
				</comment>
				<params>
					<param name="value" comment="&lt;tt&gt;true&lt;/tt&gt; to enable verbose output;
              &lt;tt&gt;false&lt;/tt&gt; to disable." fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="gc" fulltype="void" type="void">
				<comment>
					<description>Runs the garbage collector.
 The call &lt;code&gt;gc()&lt;/code&gt; is effectively equivalent to the
 call:
 &lt;blockquote&gt;&lt;pre&gt;
 System.gc()
 &lt;/pre&gt;&lt;/blockquote&gt;</description>
					<attribute name="@see">
						<description>java.lang.System#gc()</description>
					</attribute>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="java.lang.management" interface="true" fulltype="java.lang.management.GarbageCollectorMXBean" type="GarbageCollectorMXBean">
		<implements>
			<interface fulltype="java.lang.management.MemoryManagerMXBean" type="MemoryManagerMXBean" />
		</implements>
		<comment>
			<description>The management interface for the garbage collection of
 the Java virtual machine.  Garbage collection is the process
 that the Java virtual machine uses to find and reclaim unreachable
 objects to free up memory space.  A garbage collector is one type of
 {@link MemoryManagerMXBean memory manager}.

 &lt;p&gt; A Java virtual machine may have one or more instances of
 the implementation class of this interface.
 An instance implementing this interface is
 an &lt;a href=&quot;ManagementFactory.html#MXBean&quot;&gt;MXBean&lt;/a&gt;
 that can be obtained by calling
 the {@link ManagementFactory#getGarbageCollectorMXBeans} method or
 from the {@link ManagementFactory#getPlatformMBeanServer
 platform &lt;tt&gt;MBeanServer&lt;/tt&gt;} method.

 &lt;p&gt;The &lt;tt&gt;ObjectName&lt;/tt&gt; for uniquely identifying the MXBean for
 a garbage collector within an MBeanServer is:
 &lt;blockquote&gt;
   {@link ManagementFactory#GARBAGE_COLLECTOR_MXBEAN_DOMAIN_TYPE
    &lt;tt&gt;java.lang:type=GarbageCollector&lt;/tt&gt;}&lt;tt&gt;,name=&lt;/tt&gt;&lt;i&gt;collector&apos;s name&lt;/i&gt;
 &lt;/blockquote&gt;

 A platform usually includes additional platform-dependent information
 specific to a garbage collection algorithm for monitoring.</description>
			<attribute name="@see">
				<description>MemoryMXBean</description>
			</attribute>
			<attribute name="@see">
				<description>&lt;a href=&quot;../../../javax/management/package-summary.html&quot;&gt;
      JMX Specification.&lt;/a&gt;</description>
			</attribute>
			<attribute name="@see">
				<description>&lt;a href=&quot;package-summary.html#examples&quot;&gt;
      Ways to Access MXBeans&lt;/a&gt;</description>
			</attribute>
			<attribute name="@author">
				<description>Mandy Chung</description>
			</attribute>
			<attribute name="@since">
				<description>1.5</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="getCollectionCount" returncomment="the total number of collections that have occurred." fulltype="long" type="long">
				<comment>
					<description>Returns the total number of collections that have occurred.
 This method returns &lt;tt&gt;-1&lt;/tt&gt; if the collection count is undefined for
 this collector.</description>
					<attribute name="@return">
						<description>the total number of collections that have occurred.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getCollectionTime" returncomment="the approximate accumulated collection elapsed time
 in milliseconds." fulltype="long" type="long">
				<comment>
					<description>Returns the approximate accumulated collection elapsed time
 in milliseconds.  This method returns &lt;tt&gt;-1&lt;/tt&gt; if the collection
 elapsed time is undefined for this collector.
 &lt;p&gt;
 The Java virtual machine implementation may use a high resolution
 timer to measure the elapsed time.  This method may return the
 same value even if the collection count has been incremented
 if the collection elapsed time is very short.</description>
					<attribute name="@return">
						<description>the approximate accumulated collection elapsed time
 in milliseconds.</description>
					</attribute>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="java.lang.management" superclassfulltype="java.lang.Object" fulltype="java.lang.management.LockInfo" type="LockInfo">
		<comment>
			<description>Information about a &lt;em&gt;lock&lt;/em&gt;.  A lock can be a built-in object monitor,
 an &lt;em&gt;ownable synchronizer&lt;/em&gt;, or the {@link Condition Condition}
 object associated with synchronizers.
 &lt;p&gt;
 &lt;a name=&quot;OwnableSynchronizer&quot;&gt;An ownable synchronizer&lt;/a&gt; is
 a synchronizer that may be exclusively owned by a thread and uses
 {@link AbstractOwnableSynchronizer AbstractOwnableSynchronizer}
 (or its subclass) to implement its synchronization property.
 {@link ReentrantLock ReentrantLock} and
 {@link ReentrantReadWriteLock ReentrantReadWriteLock} are
 two examples of ownable synchronizers provided by the platform.

 &lt;h4&gt;&lt;a name=&quot;MappedType&quot;&gt;MXBean Mapping&lt;/a&gt;&lt;/h4&gt;
 &lt;tt&gt;LockInfo&lt;/tt&gt; is mapped to a {@link CompositeData CompositeData}
 as specified in the &lt;a href=&quot;../../../javax/management/MXBean.html#mapping-rules&quot;&gt;
 type mapping rules&lt;/a&gt; of {@linkplain javax.management.MXBean MXBeans}.</description>
			<attribute name="@see">
				<description>java.util.concurrent.locks.AbstractOwnableSynchronizer</description>
			</attribute>
			<attribute name="@see">
				<description>java.util.concurrent.locks.Condition</description>
			</attribute>
			<attribute name="@author">
				<description>Mandy Chung</description>
			</attribute>
			<attribute name="@since">
				<description>1.6</description>
			</attribute>
		</comment>
		<fields>
			<field visibility="private" name="className" fulltype="java.lang.String" type="String" />
			<field visibility="private" name="identityHashCode" fulltype="int" type="int" />
		</fields>
		<methods>
			<constructor visibility="public" name="LockInfo">
				<comment>
					<description>Constructs a &lt;tt&gt;LockInfo&lt;/tt&gt; object.</description>
					<attribute name="@param">
						<description>className the fully qualified name of the class of the lock object.</description>
					</attribute>
					<attribute name="@param">
						<description>identityHashCode the {@link System#identityHashCode
                         identity hash code} of the lock object.</description>
					</attribute>
				</comment>
				<params>
					<param name="className" comment="the fully qualified name of the class of the lock object." fulltype="java.lang.String" type="String" />
					<param name="identityHashCode" comment="the {@link System#identityHashCode
                         identity hash code} of the lock object." fulltype="int" type="int" />
				</params>
			</constructor>
			<constructor visibility="package-private" name="LockInfo">
				<comment>
					<description>package-private constructors</description>
				</comment>
				<params>
					<param name="lock" fulltype="java.lang.Object" type="Object" />
				</params>
			</constructor>
			<method visibility="public" name="getClassName" returncomment="the fully qualified name of the class of the lock object." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the fully qualified name of the class of the lock object.</description>
					<attribute name="@return">
						<description>the fully qualified name of the class of the lock object.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getIdentityHashCode" returncomment="the identity hash code of the lock object." fulltype="int" type="int">
				<comment>
					<description>Returns the identity hash code of the lock object
 returned from the {@link System#identityHashCode} method.</description>
					<attribute name="@return">
						<description>the identity hash code of the lock object.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="toString" returncomment="the string representation of a lock." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a string representation of a lock.  The returned
 string representation consists of the name of the class of the
 lock object, the at-sign character `@&apos;, and the unsigned
 hexadecimal representation of the &lt;em&gt;identity&lt;/em&gt; hash code
 of the object.  This method returns a string equals to the value of:
 &lt;blockquote&gt;
 &lt;pre&gt;
 lock.getClass().getName() + &apos;@&apos; + Integer.toHexString(System.identityHashCode(lock))
 &lt;/pre&gt;&lt;/blockquote&gt;
 where &lt;tt&gt;lock&lt;/tt&gt; is the lock object.</description>
					<attribute name="@return">
						<description>the string representation of a lock.</description>
					</attribute>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="java.lang.management" superclassfulltype="java.lang.Object" fulltype="java.lang.management.MemoryUsage" type="MemoryUsage">
		<comment>
			<description>A &lt;tt&gt;MemoryUsage&lt;/tt&gt; object represents a snapshot of memory usage.
 Instances of the &lt;tt&gt;MemoryUsage&lt;/tt&gt; class are usually constructed
 by methods that are used to obtain memory usage
 information about individual memory pool of the Java virtual machine or
 the heap or non-heap memory of the Java virtual machine as a whole.

 &lt;p&gt; A &lt;tt&gt;MemoryUsage&lt;/tt&gt; object contains four values:
 &lt;ul&gt;
 &lt;table&gt;
 &lt;tr&gt;
 &lt;td valign=top&gt; &lt;tt&gt;init&lt;/tt&gt; &lt;/td&gt;
 &lt;td valign=top&gt; represents the initial amount of memory (in bytes) that
      the Java virtual machine requests from the operating system
      for memory management during startup.  The Java virtual machine
      may request additional memory from the operating system and
      may also release memory to the system over time.
      The value of &lt;tt&gt;init&lt;/tt&gt; may be undefined.
 &lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td valign=top&gt; &lt;tt&gt;used&lt;/tt&gt; &lt;/td&gt;
 &lt;td valign=top&gt; represents the amount of memory currently used (in bytes).
 &lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td valign=top&gt; &lt;tt&gt;committed&lt;/tt&gt; &lt;/td&gt;
 &lt;td valign=top&gt; represents the amount of memory (in bytes) that is
      guaranteed to be available for use by the Java virtual machine.
      The amount of committed memory may change over time (increase
      or decrease).  The Java virtual machine may release memory to
      the system and &lt;tt&gt;committed&lt;/tt&gt; could be less than &lt;tt&gt;init&lt;/tt&gt;.
      &lt;tt&gt;committed&lt;/tt&gt; will always be greater than
      or equal to &lt;tt&gt;used&lt;/tt&gt;.
 &lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td valign=top&gt; &lt;tt&gt;max&lt;/tt&gt; &lt;/td&gt;
 &lt;td valign=top&gt; represents the maximum amount of memory (in bytes)
      that can be used for memory management. Its value may be undefined.
      The maximum amount of memory may change over time if defined.
      The amount of used and committed memory will always be less than
      or equal to &lt;tt&gt;max&lt;/tt&gt; if &lt;tt&gt;max&lt;/tt&gt; is defined.
      A memory allocation may fail if it attempts to increase the
      used memory such that &lt;tt&gt;used &amp;gt committed&lt;/tt&gt; even
      if &lt;tt&gt;used &amp;lt= max&lt;/tt&gt; would still be true (for example,
      when the system is low on virtual memory).
 &lt;/td&gt;
 &lt;/tr&gt;
 &lt;/table&gt;
 &lt;/ul&gt;

 Below is a picture showing an example of a memory pool:
 &lt;p&gt;
 &lt;pre&gt;
        +----------------------------------------------+
        +////////////////           |                  +
        +////////////////           |                  +
        +----------------------------------------------+

        |--------|
           init
        |---------------|
               used
        |---------------------------|
                  committed
        |----------------------------------------------|
                            max
 &lt;/pre&gt;

 &lt;h4&gt;MXBean Mapping&lt;/h4&gt;
 &lt;tt&gt;MemoryUsage&lt;/tt&gt; is mapped to a {@link CompositeData CompositeData}
 with attributes as specified in the {@link #from from} method.</description>
			<attribute name="@author">
				<description>Mandy Chung</description>
			</attribute>
			<attribute name="@since">
				<description>1.5</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" visibility="private" name="init" fulltype="long" type="long" />
			<field final="true" visibility="private" name="used" fulltype="long" type="long" />
			<field final="true" visibility="private" name="committed" fulltype="long" type="long" />
			<field final="true" visibility="private" name="max" fulltype="long" type="long" />
		</fields>
		<methods>
			<constructor visibility="public" name="MemoryUsage">
				<comment>
					<description>Constructs a &lt;tt&gt;MemoryUsage&lt;/tt&gt; object.</description>
					<attribute name="@param">
						<description>init      the initial amount of memory in bytes that
                  the Java virtual machine allocates;
                  or &lt;tt&gt;-1&lt;/tt&gt; if undefined.</description>
					</attribute>
					<attribute name="@param">
						<description>used      the amount of used memory in bytes.</description>
					</attribute>
					<attribute name="@param">
						<description>committed the amount of committed memory in bytes.</description>
					</attribute>
					<attribute name="@param">
						<description>max       the maximum amount of memory in bytes that
                  can be used; or &lt;tt&gt;-1&lt;/tt&gt; if undefined.</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalArgumentException if
 &lt;ul&gt;
 &lt;li&gt; the value of &lt;tt&gt;init&lt;/tt&gt; or &lt;tt&gt;max&lt;/tt&gt; is negative
      but not &lt;tt&gt;-1&lt;/tt&gt;; or&lt;/li&gt;
 &lt;li&gt; the value of &lt;tt&gt;used&lt;/tt&gt; or &lt;tt&gt;committed&lt;/tt&gt; is negative;
      or&lt;/li&gt;
 &lt;li&gt; &lt;tt&gt;used&lt;/tt&gt; is greater than the value of &lt;tt&gt;committed&lt;/tt&gt;;
      or&lt;/li&gt;
 &lt;li&gt; &lt;tt&gt;committed&lt;/tt&gt; is greater than the value of &lt;tt&gt;max&lt;/tt&gt;
      &lt;tt&gt;max&lt;/tt&gt; if defined.&lt;/li&gt;
 &lt;/ul&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="init" comment="the initial amount of memory in bytes that
                  the Java virtual machine allocates;
                  or &lt;tt&gt;-1&lt;/tt&gt; if undefined." fulltype="long" type="long" />
					<param name="used" comment="the amount of used memory in bytes." fulltype="long" type="long" />
					<param name="committed" comment="the amount of committed memory in bytes." fulltype="long" type="long" />
					<param name="max" comment="the maximum amount of memory in bytes that
                  can be used; or &lt;tt&gt;-1&lt;/tt&gt; if undefined." fulltype="long" type="long" />
				</params>
			</constructor>
			<constructor visibility="private" name="MemoryUsage">
				<comment>
					<description>Constructs a &lt;tt&gt;MemoryUsage&lt;/tt&gt; object from a
 {@link CompositeData CompositeData}.</description>
				</comment>
				<params>
					<param name="cd" fulltype="javax.management.openmbean.CompositeData" type="CompositeData" />
				</params>
			</constructor>
			<method visibility="public" name="getInit" returncomment="the initial size of memory in bytes;
 &lt;tt&gt;-1&lt;/tt&gt; if undefined." fulltype="long" type="long">
				<comment>
					<description>Returns the amount of memory in bytes that the Java virtual machine
 initially requests from the operating system for memory management.
 This method returns &lt;tt&gt;-1&lt;/tt&gt; if the initial memory size is undefined.</description>
					<attribute name="@return">
						<description>the initial size of memory in bytes;
 &lt;tt&gt;-1&lt;/tt&gt; if undefined.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getUsed" returncomment="the amount of used memory in bytes." fulltype="long" type="long">
				<comment>
					<description>Returns the amount of used memory in bytes.</description>
					<attribute name="@return">
						<description>the amount of used memory in bytes.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getCommitted" returncomment="the amount of committed memory in bytes." fulltype="long" type="long">
				<comment>
					<description>Returns the amount of memory in bytes that is committed for
 the Java virtual machine to use.  This amount of memory is
 guaranteed for the Java virtual machine to use.</description>
					<attribute name="@return">
						<description>the amount of committed memory in bytes.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getMax" returncomment="the maximum amount of memory in bytes;
 &lt;tt&gt;-1&lt;/tt&gt; if undefined." fulltype="long" type="long">
				<comment>
					<description>Returns the maximum amount of memory in bytes that can be
 used for memory management.  This method returns &lt;tt&gt;-1&lt;/tt&gt;
 if the maximum memory size is undefined.

 &lt;p&gt; This amount of memory is not guaranteed to be available
 for memory management if it is greater than the amount of
 committed memory.  The Java virtual machine may fail to allocate
 memory even if the amount of used memory does not exceed this
 maximum size.</description>
					<attribute name="@return">
						<description>the maximum amount of memory in bytes;
 &lt;tt&gt;-1&lt;/tt&gt; if undefined.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a descriptive representation of this memory usage.</description>
				</comment>
			</method>
			<method static="true" visibility="public" name="from" returncomment="a &lt;tt&gt;MemoryUsage&lt;/tt&gt; object represented by &lt;tt&gt;cd&lt;/tt&gt;
         if &lt;tt&gt;cd&lt;/tt&gt; is not &lt;tt&gt;null&lt;/tt&gt;;
         &lt;tt&gt;null&lt;/tt&gt; otherwise." fulltype="java.lang.management.MemoryUsage" type="MemoryUsage">
				<comment>
					<description>Returns a &lt;tt&gt;MemoryUsage&lt;/tt&gt; object represented by the
 given &lt;tt&gt;CompositeData&lt;/tt&gt;. The given &lt;tt&gt;CompositeData&lt;/tt&gt;
 must contain the following attributes:
 &lt;p&gt;
 &lt;blockquote&gt;
 &lt;table border&gt;
 &lt;tr&gt;
   &lt;th align=left&gt;Attribute Name&lt;/th&gt;
   &lt;th align=left&gt;Type&lt;/th&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
   &lt;td&gt;init&lt;/td&gt;
   &lt;td&gt;&lt;tt&gt;java.lang.Long&lt;/tt&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
   &lt;td&gt;used&lt;/td&gt;
   &lt;td&gt;&lt;tt&gt;java.lang.Long&lt;/tt&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
   &lt;td&gt;committed&lt;/td&gt;
   &lt;td&gt;&lt;tt&gt;java.lang.Long&lt;/tt&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
   &lt;td&gt;max&lt;/td&gt;
   &lt;td&gt;&lt;tt&gt;java.lang.Long&lt;/tt&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/table&gt;
 &lt;/blockquote&gt;</description>
					<attribute name="@param">
						<description>cd &lt;tt&gt;CompositeData&lt;/tt&gt; representing a &lt;tt&gt;MemoryUsage&lt;/tt&gt;</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalArgumentException if &lt;tt&gt;cd&lt;/tt&gt; does not
   represent a &lt;tt&gt;MemoryUsage&lt;/tt&gt; with the attributes described
   above.</description>
					</attribute>
					<attribute name="@return">
						<description>a &lt;tt&gt;MemoryUsage&lt;/tt&gt; object represented by &lt;tt&gt;cd&lt;/tt&gt;
         if &lt;tt&gt;cd&lt;/tt&gt; is not &lt;tt&gt;null&lt;/tt&gt;;
         &lt;tt&gt;null&lt;/tt&gt; otherwise.</description>
					</attribute>
				</comment>
				<params>
					<param name="cd" comment="&lt;tt&gt;CompositeData&lt;/tt&gt; representing a &lt;tt&gt;MemoryUsage&lt;/tt&gt;" fulltype="javax.management.openmbean.CompositeData" type="CompositeData" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="java.lang.management" superclassfulltype="java.lang.Object" fulltype="java.lang.management.MemoryNotificationInfo" type="MemoryNotificationInfo">
		<comment>
			<description>The information about a memory notification.

 &lt;p&gt;
 A memory notification is emitted by {@link MemoryMXBean}
 when the Java virtual machine detects that the memory usage
 of a memory pool is exceeding a threshold value.
 The notification emitted will contain the memory notification
 information about the detected condition:
 &lt;ul&gt;
   &lt;li&gt;The name of the memory pool.&lt;/li&gt;
   &lt;li&gt;The memory usage of the memory pool when the notification
       was constructed.&lt;/li&gt;
   &lt;li&gt;The number of times that the memory usage has crossed
       a threshold when the notification was constructed.
       For usage threshold notifications, this count will be the
       {@link MemoryPoolMXBean#getUsageThresholdCount usage threshold
       count}.  For collection threshold notifications,
       this count will be the
       {@link MemoryPoolMXBean#getCollectionUsageThresholdCount
       collection usage threshold count}.
       &lt;/li&gt;
 &lt;/ul&gt;

 &lt;p&gt;
 A {@link CompositeData CompositeData} representing
 the &lt;tt&gt;MemoryNotificationInfo&lt;/tt&gt; object
 is stored in the
 {@link javax.management.Notification#setUserData user data}
 of a {@link javax.management.Notification notification}.
 The {@link #from from} method is provided to convert from
 a &lt;tt&gt;CompositeData&lt;/tt&gt; to a &lt;tt&gt;MemoryNotificationInfo&lt;/tt&gt;
 object. For example:

 &lt;blockquote&gt;&lt;pre&gt;
      Notification notif;

      // receive the notification emitted by MemoryMXBean and set to notif
      ...

      String notifType = notif.getType();
      if (notifType.equals(MemoryNotificationInfo.MEMORY_THRESHOLD_EXCEEDED) ||
          notifType.equals(MemoryNotificationInfo.MEMORY_COLLECTION_THRESHOLD_EXCEEDED)) {
          // retrieve the memory notification information
          CompositeData cd = (CompositeData) notif.getUserData();
          MemoryNotificationInfo info = MemoryNotificationInfo.from(cd);
          ....
      }
 &lt;/pre&gt;&lt;/blockquote&gt;

 &lt;p&gt;
 The types of notifications emitted by &lt;tt&gt;MemoryMXBean&lt;/tt&gt; are:
 &lt;ul&gt;
   &lt;li&gt;A {@link #MEMORY_THRESHOLD_EXCEEDED
       usage threshold exceeded notification}.
       &lt;br&gt;This notification will be emitted when
       the memory usage of a memory pool is increased and has reached
       or exceeded its
       &lt;a href=&quot;MemoryPoolMXBean.html#UsageThreshold&quot;&gt; usage threshold&lt;/a&gt; value.
       Subsequent crossing of the usage threshold value does not cause
       further notification until the memory usage has returned
       to become less than the usage threshold value.
       &lt;p&gt;&lt;/li&gt;
   &lt;li&gt;A {@link #MEMORY_COLLECTION_THRESHOLD_EXCEEDED
       collection usage threshold exceeded notification}.
       &lt;br&gt;This notification will be emitted when
       the memory usage of a memory pool is greater than or equal to its
       &lt;a href=&quot;MemoryPoolMXBean.html#CollectionThreshold&quot;&gt;
       collection usage threshold&lt;/a&gt; after the Java virtual machine
       has expended effort in recycling unused objects in that
       memory pool.&lt;/li&gt;
 &lt;/ul&gt;</description>
			<attribute name="@author">
				<description>Mandy Chung</description>
			</attribute>
			<attribute name="@since">
				<description>1.5</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" visibility="private" name="poolName" fulltype="java.lang.String" type="String" />
			<field final="true" visibility="private" name="usage" fulltype="java.lang.management.MemoryUsage" type="MemoryUsage" />
			<field final="true" visibility="private" name="count" fulltype="long" type="long" />
			<field final="true" static="true" const="java.management.memory.threshold.exceeded" visibility="public" name="MEMORY_THRESHOLD_EXCEEDED" constexpr="&quot;java.management.memory.threshold.exceeded&quot;" fulltype="java.lang.String" type="String">
				<comment>
					<description>Notification type denoting that
 the memory usage of a memory pool has
 reached or exceeded its
 &lt;a href=&quot;MemoryPoolMXBean.html#UsageThreshold&quot;&gt; usage threshold&lt;/a&gt; value.
 This notification is emitted by {@link MemoryMXBean}.
 Subsequent crossing of the usage threshold value does not cause
 further notification until the memory usage has returned
 to become less than the usage threshold value.
 The value of this notification type is
 &lt;tt&gt;java.management.memory.threshold.exceeded&lt;/tt&gt;.</description>
				</comment>
			</field>
			<field final="true" static="true" const="java.management.memory.collection.threshold.exceeded" visibility="public" name="MEMORY_COLLECTION_THRESHOLD_EXCEEDED" constexpr="&quot;java.management.memory.collection.threshold.exceeded&quot;" fulltype="java.lang.String" type="String">
				<comment>
					<description>Notification type denoting that
 the memory usage of a memory pool is greater than or equal to its
 &lt;a href=&quot;MemoryPoolMXBean.html#CollectionThreshold&quot;&gt;
 collection usage threshold&lt;/a&gt; after the Java virtual machine
 has expended effort in recycling unused objects in that
 memory pool.
 This notification is emitted by {@link MemoryMXBean}.
 The value of this notification type is
 &lt;tt&gt;java.management.memory.collection.threshold.exceeded&lt;/tt&gt;.</description>
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="public" name="MemoryNotificationInfo">
				<comment>
					<description>Constructs a &lt;tt&gt;MemoryNotificationInfo&lt;/tt&gt; object.</description>
					<attribute name="@param">
						<description>poolName The name of the memory pool which triggers this notification.</description>
					</attribute>
					<attribute name="@param">
						<description>usage Memory usage of the memory pool.</description>
					</attribute>
					<attribute name="@param">
						<description>count The threshold crossing count.</description>
					</attribute>
				</comment>
				<params>
					<param name="poolName" comment="The name of the memory pool which triggers this notification." fulltype="java.lang.String" type="String" />
					<param name="usage" comment="Memory usage of the memory pool." fulltype="java.lang.management.MemoryUsage" type="MemoryUsage" />
					<param name="count" comment="The threshold crossing count." fulltype="long" type="long" />
				</params>
			</constructor>
			<constructor visibility="package-private" name="MemoryNotificationInfo">
				<params>
					<param name="cd" fulltype="javax.management.openmbean.CompositeData" type="CompositeData" />
				</params>
			</constructor>
			<method visibility="public" name="getPoolName" returncomment="the name of the memory pool that triggers this notification." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the name of the memory pool that triggers this notification.
 The memory pool usage has crossed a threshold.</description>
					<attribute name="@return">
						<description>the name of the memory pool that triggers this notification.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getUsage" returncomment="the memory usage of the memory pool
 when this notification was constructed." fulltype="java.lang.management.MemoryUsage" type="MemoryUsage">
				<comment>
					<description>Returns the memory usage of the memory pool
 when this notification was constructed.</description>
					<attribute name="@return">
						<description>the memory usage of the memory pool
 when this notification was constructed.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getCount" returncomment="the number of times that the memory usage has crossed
 a threshold when the notification was constructed." fulltype="long" type="long">
				<comment>
					<description>Returns the number of times that the memory usage has crossed
 a threshold when the notification was constructed.
 For usage threshold notifications, this count will be the
 {@link MemoryPoolMXBean#getUsageThresholdCount threshold
 count}.  For collection threshold notifications,
 this count will be the
 {@link MemoryPoolMXBean#getCollectionUsageThresholdCount
 collection usage threshold count}.</description>
					<attribute name="@return">
						<description>the number of times that the memory usage has crossed
 a threshold when the notification was constructed.</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="from" returncomment="a &lt;tt&gt;MemoryNotificationInfo&lt;/tt&gt; object represented
         by &lt;tt&gt;cd&lt;/tt&gt; if &lt;tt&gt;cd&lt;/tt&gt; is not &lt;tt&gt;null&lt;/tt&gt;;
         &lt;tt&gt;null&lt;/tt&gt; otherwise." fulltype="java.lang.management.MemoryNotificationInfo" type="MemoryNotificationInfo">
				<comment>
					<description>Returns a &lt;tt&gt;MemoryNotificationInfo&lt;/tt&gt; object represented by the
 given &lt;tt&gt;CompositeData&lt;/tt&gt;.
 The given &lt;tt&gt;CompositeData&lt;/tt&gt; must contain
 the following attributes:
 &lt;blockquote&gt;
 &lt;table border&gt;
 &lt;tr&gt;
   &lt;th align=left&gt;Attribute Name&lt;/th&gt;
   &lt;th align=left&gt;Type&lt;/th&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
   &lt;td&gt;poolName&lt;/td&gt;
   &lt;td&gt;&lt;tt&gt;java.lang.String&lt;/tt&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
   &lt;td&gt;usage&lt;/td&gt;
   &lt;td&gt;&lt;tt&gt;javax.management.openmbean.CompositeData&lt;/tt&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
   &lt;td&gt;count&lt;/td&gt;
   &lt;td&gt;&lt;tt&gt;java.lang.Long&lt;/tt&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/table&gt;
 &lt;/blockquote&gt;</description>
					<attribute name="@param">
						<description>cd &lt;tt&gt;CompositeData&lt;/tt&gt; representing a
           &lt;tt&gt;MemoryNotificationInfo&lt;/tt&gt;</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalArgumentException if &lt;tt&gt;cd&lt;/tt&gt; does not
   represent a &lt;tt&gt;MemoryNotificationInfo&lt;/tt&gt; object.</description>
					</attribute>
					<attribute name="@return">
						<description>a &lt;tt&gt;MemoryNotificationInfo&lt;/tt&gt; object represented
         by &lt;tt&gt;cd&lt;/tt&gt; if &lt;tt&gt;cd&lt;/tt&gt; is not &lt;tt&gt;null&lt;/tt&gt;;
         &lt;tt&gt;null&lt;/tt&gt; otherwise.</description>
					</attribute>
				</comment>
				<params>
					<param name="cd" comment="&lt;tt&gt;CompositeData&lt;/tt&gt; representing a
           &lt;tt&gt;MemoryNotificationInfo&lt;/tt&gt;" fulltype="javax.management.openmbean.CompositeData" type="CompositeData" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="java.lang.management" interface="true" fulltype="java.lang.management.ThreadMXBean" type="ThreadMXBean">
		<comment>
			<description>The management interface for the thread system of
 the Java virtual machine.

 &lt;p&gt; A Java virtual machine has a single instance of the implementation
 class of this interface.  This instance implementing this interface is
 an &lt;a href=&quot;ManagementFactory.html#MXBean&quot;&gt;MXBean&lt;/a&gt;
 that can be obtained by calling
 the {@link ManagementFactory#getThreadMXBean} method or
 from the {@link ManagementFactory#getPlatformMBeanServer
 platform &lt;tt&gt;MBeanServer&lt;/tt&gt;} method.

 &lt;p&gt;The &lt;tt&gt;ObjectName&lt;/tt&gt; for uniquely identifying the MXBean for
 the thread system within an MBeanServer is:
 &lt;blockquote&gt;
    {@link ManagementFactory#THREAD_MXBEAN_NAME
           &lt;tt&gt;java.lang:type=Threading&lt;/tt&gt;}
 &lt;/blockquote&gt;

 &lt;h4&gt;Thread ID&lt;/h4&gt;
 Thread ID is a positive long value returned by calling the
 {@link java.lang.Thread#getId} method for a thread.
 The thread ID is unique during its lifetime.  When a thread
 is terminated, this thread ID may be reused.

 &lt;p&gt; Some methods in this interface take a thread ID or an array
 of thread IDs as the input parameter and return per-thread information.

 &lt;h4&gt;Thread CPU time&lt;/h4&gt;
 A Java virtual machine implementation may support measuring
 the CPU time for the current thread, for any thread, or for no threads.

 &lt;p&gt;
 The {@link #isThreadCpuTimeSupported} method can be used to determine
 if a Java virtual machine supports measuring of the CPU time for any
 thread.  The {@link #isCurrentThreadCpuTimeSupported} method can
 be used to determine if a Java virtual machine supports measuring of
 the CPU time for the current  thread.
 A Java virtual machine implementation that supports CPU time measurement
 for any thread will also support that for the current thread.

 &lt;p&gt; The CPU time provided by this interface has nanosecond precision
 but not necessarily nanosecond accuracy.

 &lt;p&gt;
 A Java virtual machine may disable CPU time measurement
 by default.
 The {@link #isThreadCpuTimeEnabled} and {@link #setThreadCpuTimeEnabled}
 methods can be used to test if CPU time measurement is enabled
 and to enable/disable this support respectively.
 Enabling thread CPU measurement could be expensive in some
 Java virtual machine implementations.

 &lt;h4&gt;Thread Contention Monitoring&lt;/h4&gt;
 Some Java virtual machines may support thread contention monitoring.
 When thread contention monitoring is enabled, the accumulated elapsed
 time that the thread has blocked for synchronization or waited for
 notification will be collected and returned in the
 &lt;a href=&quot;ThreadInfo.html#SyncStats&quot;&gt;&lt;tt&gt;ThreadInfo&lt;/tt&gt;&lt;/a&gt; object.
 &lt;p&gt;
 The {@link #isThreadContentionMonitoringSupported} method can be used to
 determine if a Java virtual machine supports thread contention monitoring.
 The thread contention monitoring is disabled by default.  The
 {@link #setThreadContentionMonitoringEnabled} method can be used to enable
 thread contention monitoring.

 &lt;h4&gt;Synchronization Information and Deadlock Detection&lt;/h4&gt;
 Some Java virtual machines may support monitoring of
 {@linkplain #isObjectMonitorUsageSupported object monitor usage} and
 {@linkplain #isSynchronizerUsageSupported ownable synchronizer usage}.
 The {@link #getThreadInfo(long[], boolean, boolean)} and
 {@link #dumpAllThreads} methods can be used to obtain the thread stack trace
 and synchronization information including which
 {@linkplain LockInfo &lt;i&gt;lock&lt;/i&gt;} a thread is blocked to
 acquire or waiting on and which locks the thread currently owns.
 &lt;p&gt;
 The &lt;tt&gt;ThreadMXBean&lt;/tt&gt; interface provides the
 {@link #findMonitorDeadlockedThreads} and
 {@link #findDeadlockedThreads} methods to find deadlocks in
 the running application.</description>
			<attribute name="@see">
				<description>&lt;a href=&quot;../../../javax/management/package-summary.html&quot;&gt;
      JMX Specification.&lt;/a&gt;</description>
			</attribute>
			<attribute name="@see">
				<description>&lt;a href=&quot;package-summary.html#examples&quot;&gt;
      Ways to Access MXBeans&lt;/a&gt;</description>
			</attribute>
			<attribute name="@author">
				<description>Mandy Chung</description>
			</attribute>
			<attribute name="@since">
				<description>1.5</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="getThreadCount" returncomment="the current number of live threads." fulltype="int" type="int">
				<comment>
					<description>Returns the current number of live threads including both
 daemon and non-daemon threads.</description>
					<attribute name="@return">
						<description>the current number of live threads.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getPeakThreadCount" returncomment="the peak live thread count." fulltype="int" type="int">
				<comment>
					<description>Returns the peak live thread count since the Java virtual machine
 started or peak was reset.</description>
					<attribute name="@return">
						<description>the peak live thread count.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getTotalStartedThreadCount" returncomment="the total number of threads started." fulltype="long" type="long">
				<comment>
					<description>Returns the total number of threads created and also started
 since the Java virtual machine started.</description>
					<attribute name="@return">
						<description>the total number of threads started.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getDaemonThreadCount" returncomment="the current number of live daemon threads." fulltype="int" type="int">
				<comment>
					<description>Returns the current number of live daemon threads.</description>
					<attribute name="@return">
						<description>the current number of live daemon threads.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getAllThreadIds" returncomment="an array of &lt;tt&gt;long&lt;/tt&gt;, each is a thread ID." fulltype="long[]" type="long">
				<comment>
					<description>Returns all live thread IDs.
 Some threads included in the returned array
 may have been terminated when this method returns.</description>
					<attribute name="@return">
						<description>an array of &lt;tt&gt;long&lt;/tt&gt;, each is a thread ID.</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.SecurityException if a security manager
         exists and the caller does not have
         ManagementPermission(&quot;monitor&quot;).</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getThreadInfo" returncomment="a {@link ThreadInfo} object for the thread of the given ID
 with no stack trace, no locked monitor and no synchronizer info;
 &lt;tt&gt;null&lt;/tt&gt; if the thread of the given ID is not alive or
 it does not exist." fulltype="java.lang.management.ThreadInfo" type="ThreadInfo">
				<comment>
					<description>Returns the thread info for a thread of the specified
 &lt;tt&gt;id&lt;/tt&gt; with no stack trace.
 This method is equivalent to calling:
 &lt;blockquote&gt;
   {@link #getThreadInfo(long, int) getThreadInfo(id, 0);}
 &lt;/blockquote&gt;

 &lt;p&gt;
 This method returns a &lt;tt&gt;ThreadInfo&lt;/tt&gt; object representing
 the thread information for the thread of the specified ID.
 The stack trace, locked monitors, and locked synchronizers
 in the returned &lt;tt&gt;ThreadInfo&lt;/tt&gt; object will
 be empty.

 If a thread of the given ID is not alive or does not exist,
 this method will return &lt;tt&gt;null&lt;/tt&gt;.  A thread is alive if
 it has been started and has not yet died.

 &lt;p&gt;
 &lt;b&gt;MBeanServer access&lt;/b&gt;:&lt;br&gt;
 The mapped type of &lt;tt&gt;ThreadInfo&lt;/tt&gt; is
 &lt;tt&gt;CompositeData&lt;/tt&gt; with attributes as specified in the
 {@link ThreadInfo#from ThreadInfo.from} method.</description>
					<attribute name="@param">
						<description>id the thread ID of the thread. Must be positive.</description>
					</attribute>
					<attribute name="@return">
						<description>a {@link ThreadInfo} object for the thread of the given ID
 with no stack trace, no locked monitor and no synchronizer info;
 &lt;tt&gt;null&lt;/tt&gt; if the thread of the given ID is not alive or
 it does not exist.</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalArgumentException if &lt;tt&gt;id &amp;lt= 0&lt;/tt&gt;.</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.SecurityException if a security manager
         exists and the caller does not have
         ManagementPermission(&quot;monitor&quot;).</description>
					</attribute>
				</comment>
				<params>
					<param name="id" comment="the thread ID of the thread. Must be positive." fulltype="long" type="long" />
				</params>
			</method>
			<method visibility="public" name="getThreadInfo" returncomment="an array of the {@link ThreadInfo} objects, each containing
 information about a thread whose ID is in the corresponding
 element of the input array of IDs
 with no stack trace, no locked monitor and no synchronizer info." fulltype="java.lang.management.ThreadInfo[]" type="ThreadInfo">
				<comment>
					<description>Returns the thread info for each thread
 whose ID is in the input array &lt;tt&gt;ids&lt;/tt&gt; with no stack trace.
 This method is equivalent to calling:
 &lt;blockquote&gt;&lt;pre&gt;
   {@link #getThreadInfo(long[], int) getThreadInfo}(ids, 0);
 &lt;/pre&gt;&lt;/blockquote&gt;

 &lt;p&gt;
 This method returns an array of the &lt;tt&gt;ThreadInfo&lt;/tt&gt; objects.
 The stack trace, locked monitors, and locked synchronizers
 in each &lt;tt&gt;ThreadInfo&lt;/tt&gt; object will be empty.

 If a thread of a given ID is not alive or does not exist,
 the corresponding element in the returned array will
 contain &lt;tt&gt;null&lt;/tt&gt;.  A thread is alive if
 it has been started and has not yet died.

 &lt;p&gt;
 &lt;b&gt;MBeanServer access&lt;/b&gt;:&lt;br&gt;
 The mapped type of &lt;tt&gt;ThreadInfo&lt;/tt&gt; is
 &lt;tt&gt;CompositeData&lt;/tt&gt; with attributes as specified in the
 {@link ThreadInfo#from ThreadInfo.from} method.</description>
					<attribute name="@param">
						<description>ids an array of thread IDs.</description>
					</attribute>
					<attribute name="@return">
						<description>an array of the {@link ThreadInfo} objects, each containing
 information about a thread whose ID is in the corresponding
 element of the input array of IDs
 with no stack trace, no locked monitor and no synchronizer info.</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalArgumentException if any element in the input array
      &lt;tt&gt;ids&lt;/tt&gt; is &lt;tt&gt;&amp;lt= 0&lt;/tt&gt;.</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.SecurityException if a security manager
         exists and the caller does not have
         ManagementPermission(&quot;monitor&quot;).</description>
					</attribute>
				</comment>
				<params>
					<param name="ids" comment="an array of thread IDs." fulltype="long[]" type="long" />
				</params>
			</method>
			<method visibility="public" name="getThreadInfo" returncomment="a {@link ThreadInfo} of the thread of the given ID
 with no locked monitor and synchronizer info.
 &lt;tt&gt;null&lt;/tt&gt; if the thread of the given ID is not alive or
 it does not exist." fulltype="java.lang.management.ThreadInfo" type="ThreadInfo">
				<comment>
					<description>Returns a thread info for a thread of the specified &lt;tt&gt;id&lt;/tt&gt;,
 with stack trace of a specified number of stack trace elements.
 The &lt;tt&gt;maxDepth&lt;/tt&gt; parameter indicates the maximum number of
 {@link StackTraceElement} to be retrieved from the stack trace.
 If &lt;tt&gt;maxDepth == Integer.MAX_VALUE&lt;/tt&gt;, the entire stack trace of
 the thread will be dumped.
 If &lt;tt&gt;maxDepth == 0&lt;/tt&gt;, no stack trace of the thread
 will be dumped.
 This method does not obtain the locked monitors and locked
 synchronizers of the thread.
 &lt;p&gt;
 When the Java virtual machine has no stack trace information
 about a thread or &lt;tt&gt;maxDepth == 0&lt;/tt&gt;,
 the stack trace in the
 &lt;tt&gt;ThreadInfo&lt;/tt&gt; object will be an empty array of
 &lt;tt&gt;StackTraceElement&lt;/tt&gt;.

 &lt;p&gt;
 If a thread of the given ID is not alive or does not exist,
 this method will return &lt;tt&gt;null&lt;/tt&gt;.  A thread is alive if
 it has been started and has not yet died.

 &lt;p&gt;
 &lt;b&gt;MBeanServer access&lt;/b&gt;:&lt;br&gt;
 The mapped type of &lt;tt&gt;ThreadInfo&lt;/tt&gt; is
 &lt;tt&gt;CompositeData&lt;/tt&gt; with attributes as specified in the
 {@link ThreadInfo#from ThreadInfo.from} method.</description>
					<attribute name="@param">
						<description>id the thread ID of the thread. Must be positive.</description>
					</attribute>
					<attribute name="@param">
						<description>maxDepth the maximum number of entries in the stack trace
 to be dumped. &lt;tt&gt;Integer.MAX_VALUE&lt;/tt&gt; could be used to request
 the entire stack to be dumped.</description>
					</attribute>
					<attribute name="@return">
						<description>a {@link ThreadInfo} of the thread of the given ID
 with no locked monitor and synchronizer info.
 &lt;tt&gt;null&lt;/tt&gt; if the thread of the given ID is not alive or
 it does not exist.</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalArgumentException if &lt;tt&gt;id &amp;lt= 0&lt;/tt&gt;.</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalArgumentException if &lt;tt&gt;maxDepth is negative&lt;/tt&gt;.</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.SecurityException if a security manager
         exists and the caller does not have
         ManagementPermission(&quot;monitor&quot;).</description>
					</attribute>
				</comment>
				<params>
					<param name="id" comment="the thread ID of the thread. Must be positive." fulltype="long" type="long" />
					<param name="maxDepth" comment="the maximum number of entries in the stack trace
 to be dumped. &lt;tt&gt;Integer.MAX_VALUE&lt;/tt&gt; could be used to request
 the entire stack to be dumped." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getThreadInfo" returncomment="an array of the {@link ThreadInfo} objects, each containing
 information about a thread whose ID is in the corresponding
 element of the input array of IDs with no locked monitor and
 synchronizer info." fulltype="java.lang.management.ThreadInfo[]" type="ThreadInfo">
				<comment>
					<description>Returns the thread info for each thread
 whose ID is in the input array &lt;tt&gt;ids&lt;/tt&gt;,
 with stack trace of a specified number of stack trace elements.
 The &lt;tt&gt;maxDepth&lt;/tt&gt; parameter indicates the maximum number of
 {@link StackTraceElement} to be retrieved from the stack trace.
 If &lt;tt&gt;maxDepth == Integer.MAX_VALUE&lt;/tt&gt;, the entire stack trace of
 the thread will be dumped.
 If &lt;tt&gt;maxDepth == 0&lt;/tt&gt;, no stack trace of the thread
 will be dumped.
 This method does not obtain the locked monitors and locked
 synchronizers of the threads.
 &lt;p&gt;
 When the Java virtual machine has no stack trace information
 about a thread or &lt;tt&gt;maxDepth == 0&lt;/tt&gt;,
 the stack trace in the
 &lt;tt&gt;ThreadInfo&lt;/tt&gt; object will be an empty array of
 &lt;tt&gt;StackTraceElement&lt;/tt&gt;.
 &lt;p&gt;
 This method returns an array of the &lt;tt&gt;ThreadInfo&lt;/tt&gt; objects,
 each is the thread information about the thread with the same index
 as in the &lt;tt&gt;ids&lt;/tt&gt; array.
 If a thread of the given ID is not alive or does not exist,
 &lt;tt&gt;null&lt;/tt&gt; will be set in the corresponding element
 in the returned array.  A thread is alive if
 it has been started and has not yet died.

 &lt;p&gt;
 &lt;b&gt;MBeanServer access&lt;/b&gt;:&lt;br&gt;
 The mapped type of &lt;tt&gt;ThreadInfo&lt;/tt&gt; is
 &lt;tt&gt;CompositeData&lt;/tt&gt; with attributes as specified in the
 {@link ThreadInfo#from ThreadInfo.from} method.</description>
					<attribute name="@param">
						<description>ids an array of thread IDs</description>
					</attribute>
					<attribute name="@param">
						<description>maxDepth the maximum number of entries in the stack trace
 to be dumped. &lt;tt&gt;Integer.MAX_VALUE&lt;/tt&gt; could be used to request
 the entire stack to be dumped.</description>
					</attribute>
					<attribute name="@return">
						<description>an array of the {@link ThreadInfo} objects, each containing
 information about a thread whose ID is in the corresponding
 element of the input array of IDs with no locked monitor and
 synchronizer info.</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalArgumentException if &lt;tt&gt;maxDepth is negative&lt;/tt&gt;.</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalArgumentException if any element in the input array
      &lt;tt&gt;ids&lt;/tt&gt; is &lt;tt&gt;&amp;lt= 0&lt;/tt&gt;.</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.SecurityException if a security manager
         exists and the caller does not have
         ManagementPermission(&quot;monitor&quot;).</description>
					</attribute>
				</comment>
				<params>
					<param name="ids" comment="an array of thread IDs" fulltype="long[]" type="long" />
					<param name="maxDepth" comment="the maximum number of entries in the stack trace
 to be dumped. &lt;tt&gt;Integer.MAX_VALUE&lt;/tt&gt; could be used to request
 the entire stack to be dumped." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="isThreadContentionMonitoringSupported" returncomment="&lt;tt&gt;true&lt;/tt&gt;
     if the Java virtual machine supports thread contention monitoring;
   &lt;tt&gt;false&lt;/tt&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Tests if the Java virtual machine supports thread contention monitoring.</description>
					<attribute name="@return">
						<description>&lt;tt&gt;true&lt;/tt&gt;
     if the Java virtual machine supports thread contention monitoring;
   &lt;tt&gt;false&lt;/tt&gt; otherwise.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="isThreadContentionMonitoringEnabled" returncomment="&lt;tt&gt;true&lt;/tt&gt; if thread contention monitoring is enabled;
         &lt;tt&gt;false&lt;/tt&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Tests if thread contention monitoring is enabled.</description>
					<attribute name="@return">
						<description>&lt;tt&gt;true&lt;/tt&gt; if thread contention monitoring is enabled;
         &lt;tt&gt;false&lt;/tt&gt; otherwise.</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.UnsupportedOperationException if the Java virtual
 machine does not support thread contention monitoring.</description>
					</attribute>
					<attribute name="@see">
						<description>#isThreadContentionMonitoringSupported</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="setThreadContentionMonitoringEnabled" fulltype="void" type="void">
				<comment>
					<description>Enables or disables thread contention monitoring.
 Thread contention monitoring is disabled by default.</description>
					<attribute name="@param">
						<description>enable &lt;tt&gt;true&lt;/tt&gt; to enable;
               &lt;tt&gt;false&lt;/tt&gt; to disable.</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.UnsupportedOperationException if the Java
 virtual machine does not support thread contention monitoring.</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.SecurityException if a security manager
         exists and the caller does not have
         ManagementPermission(&quot;control&quot;).</description>
					</attribute>
					<attribute name="@see">
						<description>#isThreadContentionMonitoringSupported</description>
					</attribute>
				</comment>
				<params>
					<param name="enable" comment="&lt;tt&gt;true&lt;/tt&gt; to enable;
               &lt;tt&gt;false&lt;/tt&gt; to disable." fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="getCurrentThreadCpuTime" returncomment="the total CPU time for the current thread if CPU time
 measurement is enabled; &lt;tt&gt;-1&lt;/tt&gt; otherwise." fulltype="long" type="long">
				<comment>
					<description>Returns the total CPU time for the current thread in nanoseconds.
 The returned value is of nanoseconds precision but
 not necessarily nanoseconds accuracy.
 If the implementation distinguishes between user mode time and system
 mode time, the returned CPU time is the amount of time that
 the current thread has executed in user mode or system mode.

 &lt;p&gt;
 This is a convenient method for local management use and is
 equivalent to calling:
 &lt;blockquote&gt;&lt;pre&gt;
   {@link #getThreadCpuTime getThreadCpuTime}(Thread.currentThread().getId());
 &lt;/pre&gt;&lt;/blockquote&gt;</description>
					<attribute name="@return">
						<description>the total CPU time for the current thread if CPU time
 measurement is enabled; &lt;tt&gt;-1&lt;/tt&gt; otherwise.</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.UnsupportedOperationException if the Java
 virtual machine does not support CPU time measurement for
 the current thread.</description>
					</attribute>
					<attribute name="@see">
						<description>#getCurrentThreadUserTime</description>
					</attribute>
					<attribute name="@see">
						<description>#isCurrentThreadCpuTimeSupported</description>
					</attribute>
					<attribute name="@see">
						<description>#isThreadCpuTimeEnabled</description>
					</attribute>
					<attribute name="@see">
						<description>#setThreadCpuTimeEnabled</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getCurrentThreadUserTime" returncomment="the user-level CPU time for the current thread if CPU time
 measurement is enabled; &lt;tt&gt;-1&lt;/tt&gt; otherwise." fulltype="long" type="long">
				<comment>
					<description>Returns the CPU time that the current thread has executed
 in user mode in nanoseconds.
 The returned value is of nanoseconds precision but
 not necessarily nanoseconds accuracy.

 &lt;p&gt;
 This is a convenient method for local management use and is
 equivalent to calling:
 &lt;blockquote&gt;&lt;pre&gt;
   {@link #getThreadUserTime getThreadUserTime}(Thread.currentThread().getId());
 &lt;/pre&gt;&lt;/blockquote&gt;</description>
					<attribute name="@return">
						<description>the user-level CPU time for the current thread if CPU time
 measurement is enabled; &lt;tt&gt;-1&lt;/tt&gt; otherwise.</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.UnsupportedOperationException if the Java
 virtual machine does not support CPU time measurement for
 the current thread.</description>
					</attribute>
					<attribute name="@see">
						<description>#getCurrentThreadCpuTime</description>
					</attribute>
					<attribute name="@see">
						<description>#isCurrentThreadCpuTimeSupported</description>
					</attribute>
					<attribute name="@see">
						<description>#isThreadCpuTimeEnabled</description>
					</attribute>
					<attribute name="@see">
						<description>#setThreadCpuTimeEnabled</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getThreadCpuTime" returncomment="the total CPU time for a thread of the specified ID
 if the thread of the specified ID exists, the thread is alive,
 and CPU time measurement is enabled;
 &lt;tt&gt;-1&lt;/tt&gt; otherwise." fulltype="long" type="long">
				<comment>
					<description>Returns the total CPU time for a thread of the specified ID in nanoseconds.
 The returned value is of nanoseconds precision but
 not necessarily nanoseconds accuracy.
 If the implementation distinguishes between user mode time and system
 mode time, the returned CPU time is the amount of time that
 the thread has executed in user mode or system mode.

 &lt;p&gt;
 If the thread of the specified ID is not alive or does not exist,
 this method returns &lt;tt&gt;-1&lt;/tt&gt;. If CPU time measurement
 is disabled, this method returns &lt;tt&gt;-1&lt;/tt&gt;.
 A thread is alive if it has been started and has not yet died.
 &lt;p&gt;
 If CPU time measurement is enabled after the thread has started,
 the Java virtual machine implementation may choose any time up to
 and including the time that the capability is enabled as the point
 where CPU time measurement starts.</description>
					<attribute name="@param">
						<description>id the thread ID of a thread</description>
					</attribute>
					<attribute name="@return">
						<description>the total CPU time for a thread of the specified ID
 if the thread of the specified ID exists, the thread is alive,
 and CPU time measurement is enabled;
 &lt;tt&gt;-1&lt;/tt&gt; otherwise.</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalArgumentException if &lt;tt&gt;id &amp;lt= 0 &lt;/tt&gt;.</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.UnsupportedOperationException if the Java
 virtual machine does not support CPU time measurement for
 other threads.</description>
					</attribute>
					<attribute name="@see">
						<description>#getThreadUserTime</description>
					</attribute>
					<attribute name="@see">
						<description>#isThreadCpuTimeSupported</description>
					</attribute>
					<attribute name="@see">
						<description>#isThreadCpuTimeEnabled</description>
					</attribute>
					<attribute name="@see">
						<description>#setThreadCpuTimeEnabled</description>
					</attribute>
				</comment>
				<params>
					<param name="id" comment="the thread ID of a thread" fulltype="long" type="long" />
				</params>
			</method>
			<method visibility="public" name="getThreadUserTime" returncomment="the user-level CPU time for a thread of the specified ID
 if the thread of the specified ID exists, the thread is alive,
 and CPU time measurement is enabled;
 &lt;tt&gt;-1&lt;/tt&gt; otherwise." fulltype="long" type="long">
				<comment>
					<description>Returns the CPU time that a thread of the specified ID
 has executed in user mode in nanoseconds.
 The returned value is of nanoseconds precision but
 not necessarily nanoseconds accuracy.

 &lt;p&gt;
 If the thread of the specified ID is not alive or does not exist,
 this method returns &lt;tt&gt;-1&lt;/tt&gt;. If CPU time measurement
 is disabled, this method returns &lt;tt&gt;-1&lt;/tt&gt;.
 A thread is alive if it has been started and has not yet died.
 &lt;p&gt;
 If CPU time measurement is enabled after the thread has started,
 the Java virtual machine implementation may choose any time up to
 and including the time that the capability is enabled as the point
 where CPU time measurement starts.</description>
					<attribute name="@param">
						<description>id the thread ID of a thread</description>
					</attribute>
					<attribute name="@return">
						<description>the user-level CPU time for a thread of the specified ID
 if the thread of the specified ID exists, the thread is alive,
 and CPU time measurement is enabled;
 &lt;tt&gt;-1&lt;/tt&gt; otherwise.</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalArgumentException if &lt;tt&gt;id &amp;lt= 0 &lt;/tt&gt;.</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.UnsupportedOperationException if the Java
 virtual machine does not support CPU time measurement for
 other threads.</description>
					</attribute>
					<attribute name="@see">
						<description>#getThreadCpuTime</description>
					</attribute>
					<attribute name="@see">
						<description>#isThreadCpuTimeSupported</description>
					</attribute>
					<attribute name="@see">
						<description>#isThreadCpuTimeEnabled</description>
					</attribute>
					<attribute name="@see">
						<description>#setThreadCpuTimeEnabled</description>
					</attribute>
				</comment>
				<params>
					<param name="id" comment="the thread ID of a thread" fulltype="long" type="long" />
				</params>
			</method>
			<method visibility="public" name="isThreadCpuTimeSupported" returncomment="&lt;tt&gt;true&lt;/tt&gt;
     if the Java virtual machine supports CPU time
     measurement for any thread;
   &lt;tt&gt;false&lt;/tt&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Tests if the Java virtual machine implementation supports CPU time
 measurement for any thread.
 A Java virtual machine implementation that supports CPU time
 measurement for any thread will also support CPU time
 measurement for the current thread.</description>
					<attribute name="@return">
						<description>&lt;tt&gt;true&lt;/tt&gt;
     if the Java virtual machine supports CPU time
     measurement for any thread;
   &lt;tt&gt;false&lt;/tt&gt; otherwise.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="isCurrentThreadCpuTimeSupported" returncomment="&lt;tt&gt;true&lt;/tt&gt;
     if the Java virtual machine supports CPU time
     measurement for current thread;
   &lt;tt&gt;false&lt;/tt&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Tests if the Java virtual machine supports CPU time
 measurement for the current thread.
 This method returns &lt;tt&gt;true&lt;/tt&gt; if {@link #isThreadCpuTimeSupported}
 returns &lt;tt&gt;true&lt;/tt&gt;.</description>
					<attribute name="@return">
						<description>&lt;tt&gt;true&lt;/tt&gt;
     if the Java virtual machine supports CPU time
     measurement for current thread;
   &lt;tt&gt;false&lt;/tt&gt; otherwise.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="isThreadCpuTimeEnabled" returncomment="&lt;tt&gt;true&lt;/tt&gt; if thread CPU time measurement is enabled;
         &lt;tt&gt;false&lt;/tt&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Tests if thread CPU time measurement is enabled.</description>
					<attribute name="@return">
						<description>&lt;tt&gt;true&lt;/tt&gt; if thread CPU time measurement is enabled;
         &lt;tt&gt;false&lt;/tt&gt; otherwise.</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.UnsupportedOperationException if the Java virtual
 machine does not support CPU time measurement for other threads
 nor for the current thread.</description>
					</attribute>
					<attribute name="@see">
						<description>#isThreadCpuTimeSupported</description>
					</attribute>
					<attribute name="@see">
						<description>#isCurrentThreadCpuTimeSupported</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="setThreadCpuTimeEnabled" fulltype="void" type="void">
				<comment>
					<description>Enables or disables thread CPU time measurement.  The default
 is platform dependent.</description>
					<attribute name="@param">
						<description>enable &lt;tt&gt;true&lt;/tt&gt; to enable;
               &lt;tt&gt;false&lt;/tt&gt; to disable.</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.UnsupportedOperationException if the Java
 virtual machine does not support CPU time measurement for
 any threads nor for the current thread.</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.SecurityException if a security manager
         exists and the caller does not have
         ManagementPermission(&quot;control&quot;).</description>
					</attribute>
					<attribute name="@see">
						<description>#isThreadCpuTimeSupported</description>
					</attribute>
					<attribute name="@see">
						<description>#isCurrentThreadCpuTimeSupported</description>
					</attribute>
				</comment>
				<params>
					<param name="enable" comment="&lt;tt&gt;true&lt;/tt&gt; to enable;
               &lt;tt&gt;false&lt;/tt&gt; to disable." fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="findMonitorDeadlockedThreads" returncomment="an array of IDs of the threads that are monitor
 deadlocked, if any; &lt;tt&gt;null&lt;/tt&gt; otherwise." fulltype="long[]" type="long">
				<comment>
					<description>Finds cycles of threads that are in deadlock waiting to acquire
 object monitors. That is, threads that are blocked waiting to enter a
 synchronization block or waiting to reenter a synchronization block
 after an {@link Object#wait Object.wait} call,
 where each thread owns one monitor while
 trying to obtain another monitor already held by another thread
 in a cycle.
 &lt;p&gt;
 More formally, a thread is &lt;em&gt;monitor deadlocked&lt;/em&gt; if it is
 part of a cycle in the relation &quot;is waiting for an object monitor
 owned by&quot;.  In the simplest case, thread A is blocked waiting
 for a monitor owned by thread B, and thread B is blocked waiting
 for a monitor owned by thread A.
 &lt;p&gt;
 This method is designed for troubleshooting use, but not for
 synchronization control.  It might be an expensive operation.
 &lt;p&gt;
 This method finds deadlocks involving only object monitors.
 To find deadlocks involving both object monitors and
 &lt;a href=&quot;LockInfo.html#OwnableSynchronizer&quot;&gt;ownable synchronizers&lt;/a&gt;,
 the {@link #findDeadlockedThreads findDeadlockedThreads} method
 should be used.</description>
					<attribute name="@return">
						<description>an array of IDs of the threads that are monitor
 deadlocked, if any; &lt;tt&gt;null&lt;/tt&gt; otherwise.</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.SecurityException if a security manager
         exists and the caller does not have
         ManagementPermission(&quot;monitor&quot;).</description>
					</attribute>
					<attribute name="@see">
						<description>#findDeadlockedThreads</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="resetPeakThreadCount" fulltype="void" type="void">
				<comment>
					<description>Resets the peak thread count to the current number of
 live threads.</description>
					<attribute name="@throws">
						<description>java.lang.SecurityException if a security manager
         exists and the caller does not have
         ManagementPermission(&quot;control&quot;).</description>
					</attribute>
					<attribute name="@see">
						<description>#getPeakThreadCount</description>
					</attribute>
					<attribute name="@see">
						<description>#getThreadCount</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="findDeadlockedThreads" returncomment="an array of IDs of the threads that are
 deadlocked waiting for object monitors or ownable synchronizers, if any;
 &lt;tt&gt;null&lt;/tt&gt; otherwise." fulltype="long[]" type="long">
				<comment>
					<description>Finds cycles of threads that are in deadlock waiting to acquire
 object monitors or
 &lt;a href=&quot;LockInfo.html#OwnableSynchronizer&quot;&gt;ownable synchronizers&lt;/a&gt;.

 Threads are &lt;em&gt;deadlocked&lt;/em&gt; in a cycle waiting for a lock of
 these two types if each thread owns one lock while
 trying to acquire another lock already held
 by another thread in the cycle.
 &lt;p&gt;
 This method is designed for troubleshooting use, but not for
 synchronization control.  It might be an expensive operation.</description>
					<attribute name="@return">
						<description>an array of IDs of the threads that are
 deadlocked waiting for object monitors or ownable synchronizers, if any;
 &lt;tt&gt;null&lt;/tt&gt; otherwise.</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.SecurityException if a security manager
         exists and the caller does not have
         ManagementPermission(&quot;monitor&quot;).</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.UnsupportedOperationException if the Java virtual
 machine does not support monitoriing of ownable synchronizer usage.</description>
					</attribute>
					<attribute name="@see">
						<description>#isSynchronizerUsageSupported</description>
					</attribute>
					<attribute name="@see">
						<description>#findMonitorDeadlockedThreads</description>
					</attribute>
					<attribute name="@since">
						<description>1.6</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="isObjectMonitorUsageSupported" returncomment="&lt;tt&gt;true&lt;/tt&gt;
     if the Java virtual machine supports monitoring of
     object monitor usage;
   &lt;tt&gt;false&lt;/tt&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Tests if the Java virtual machine supports monitoring of
 object monitor usage.</description>
					<attribute name="@return">
						<description>&lt;tt&gt;true&lt;/tt&gt;
     if the Java virtual machine supports monitoring of
     object monitor usage;
   &lt;tt&gt;false&lt;/tt&gt; otherwise.</description>
					</attribute>
					<attribute name="@see">
						<description>#dumpAllThreads</description>
					</attribute>
					<attribute name="@since">
						<description>1.6</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="isSynchronizerUsageSupported" returncomment="&lt;tt&gt;true&lt;/tt&gt;
     if the Java virtual machine supports monitoring of ownable
     synchronizer usage;
   &lt;tt&gt;false&lt;/tt&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Tests if the Java virtual machine supports monitoring of
 &lt;a href=&quot;LockInfo.html#OwnableSynchronizer&quot;&gt;
 ownable synchronizer&lt;/a&gt; usage.</description>
					<attribute name="@return">
						<description>&lt;tt&gt;true&lt;/tt&gt;
     if the Java virtual machine supports monitoring of ownable
     synchronizer usage;
   &lt;tt&gt;false&lt;/tt&gt; otherwise.</description>
					</attribute>
					<attribute name="@see">
						<description>#dumpAllThreads</description>
					</attribute>
					<attribute name="@since">
						<description>1.6</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getThreadInfo" returncomment="an array of the {@link ThreadInfo} objects, each containing
 information about a thread whose ID is in the corresponding
 element of the input array of IDs." fulltype="java.lang.management.ThreadInfo[]" type="ThreadInfo">
				<comment>
					<description>Returns the thread info for each thread
 whose ID is in the input array &lt;tt&gt;ids&lt;/tt&gt;, with stack trace
 and synchronization information.

 &lt;p&gt;
 This method obtains a snapshot of the thread information
 for each thread including:
 &lt;ul&gt;
    &lt;li&gt;the entire stack trace,&lt;/li&gt;
    &lt;li&gt;the object monitors currently locked by the thread
        if &lt;tt&gt;lockedMonitors&lt;/tt&gt; is &lt;tt&gt;true&lt;/tt&gt;, and&lt;/li&gt;
    &lt;li&gt;the &lt;a href=&quot;LockInfo.html#OwnableSynchronizer&quot;&gt;
        ownable synchronizers&lt;/a&gt; currently locked by the thread
        if &lt;tt&gt;lockedSynchronizers&lt;/tt&gt; is &lt;tt&gt;true&lt;/tt&gt;.&lt;/li&gt;
 &lt;/ul&gt;
 &lt;p&gt;
 This method returns an array of the &lt;tt&gt;ThreadInfo&lt;/tt&gt; objects,
 each is the thread information about the thread with the same index
 as in the &lt;tt&gt;ids&lt;/tt&gt; array.
 If a thread of the given ID is not alive or does not exist,
 &lt;tt&gt;null&lt;/tt&gt; will be set in the corresponding element
 in the returned array.  A thread is alive if
 it has been started and has not yet died.
 &lt;p&gt;
 If a thread does not lock any object monitor or &lt;tt&gt;lockedMonitors&lt;/tt&gt;
 is &lt;tt&gt;false&lt;/tt&gt;, the returned &lt;tt&gt;ThreadInfo&lt;/tt&gt; object will have an
 empty &lt;tt&gt;MonitorInfo&lt;/tt&gt; array.  Similarly, if a thread does not
 lock any synchronizer or &lt;tt&gt;lockedSynchronizers&lt;/tt&gt; is &lt;tt&gt;false&lt;/tt&gt;,
 the returned &lt;tt&gt;ThreadInfo&lt;/tt&gt; object
 will have an empty &lt;tt&gt;LockInfo&lt;/tt&gt; array.

 &lt;p&gt;
 When both &lt;tt&gt;lockedMonitors&lt;/tt&gt; and &lt;tt&gt;lockedSynchronizers&lt;/tt&gt;
 parameters are &lt;tt&gt;false&lt;/tt&gt;, it is equivalent to calling:
 &lt;blockquote&gt;&lt;pre&gt;
     {@link #getThreadInfo(long[], int)  getThreadInfo(ids, Integer.MAX_VALUE)}
 &lt;/pre&gt;&lt;/blockquote&gt;

 &lt;p&gt;
 This method is designed for troubleshooting use, but not for
 synchronization control.  It might be an expensive operation.

 &lt;p&gt;
 &lt;b&gt;MBeanServer access&lt;/b&gt;:&lt;br&gt;
 The mapped type of &lt;tt&gt;ThreadInfo&lt;/tt&gt; is
 &lt;tt&gt;CompositeData&lt;/tt&gt; with attributes as specified in the
 {@link ThreadInfo#from ThreadInfo.from} method.</description>
					<attribute name="@param">
						<description>ids an array of thread IDs.</description>
					</attribute>
					<attribute name="@param">
						<description>lockedMonitors if &lt;tt&gt;true&lt;/tt&gt;, retrieves all locked monitors.</description>
					</attribute>
					<attribute name="@param">
						<description>lockedSynchronizers if &lt;tt&gt;true&lt;/tt&gt;, retrieves all locked
             ownable synchronizers.</description>
					</attribute>
					<attribute name="@return">
						<description>an array of the {@link ThreadInfo} objects, each containing
 information about a thread whose ID is in the corresponding
 element of the input array of IDs.</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.SecurityException if a security manager
         exists and the caller does not have
         ManagementPermission(&quot;monitor&quot;).</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.UnsupportedOperationException
         &lt;ul&gt;
           &lt;li&gt;if &lt;tt&gt;lockedMonitors&lt;/tt&gt; is &lt;tt&gt;true&lt;/tt&gt; but
               the Java virtual machine does not support monitoring
               of {@linkplain #isObjectMonitorUsageSupported
               object monitor usage}; or&lt;/li&gt;
           &lt;li&gt;if &lt;tt&gt;lockedSynchronizers&lt;/tt&gt; is &lt;tt&gt;true&lt;/tt&gt; but
               the Java virtual machine does not support monitoring
               of {@linkplain #isSynchronizerUsageSupported
               ownable synchronizer usage}.&lt;/li&gt;
         &lt;/ul&gt;</description>
					</attribute>
					<attribute name="@see">
						<description>#isObjectMonitorUsageSupported</description>
					</attribute>
					<attribute name="@see">
						<description>#isSynchronizerUsageSupported</description>
					</attribute>
					<attribute name="@since">
						<description>1.6</description>
					</attribute>
				</comment>
				<params>
					<param name="ids" comment="an array of thread IDs." fulltype="long[]" type="long" />
					<param name="lockedMonitors" comment="if &lt;tt&gt;true&lt;/tt&gt;, retrieves all locked monitors." fulltype="boolean" type="boolean" />
					<param name="lockedSynchronizers" comment="if &lt;tt&gt;true&lt;/tt&gt;, retrieves all locked
             ownable synchronizers." fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="dumpAllThreads" returncomment="an array of {@link ThreadInfo} for all live threads." fulltype="java.lang.management.ThreadInfo[]" type="ThreadInfo">
				<comment>
					<description>Returns the thread info for all live threads with stack trace
 and synchronization information.
 Some threads included in the returned array
 may have been terminated when this method returns.

 &lt;p&gt;
 This method returns an array of {@link ThreadInfo} objects
 as specified in the {@link #getThreadInfo(long[], boolean, boolean)}
 method.</description>
					<attribute name="@param">
						<description>lockedMonitors if &lt;tt&gt;true&lt;/tt&gt;, dump all locked monitors.</description>
					</attribute>
					<attribute name="@param">
						<description>lockedSynchronizers if &lt;tt&gt;true&lt;/tt&gt;, dump all locked
             ownable synchronizers.</description>
					</attribute>
					<attribute name="@return">
						<description>an array of {@link ThreadInfo} for all live threads.</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.SecurityException if a security manager
         exists and the caller does not have
         ManagementPermission(&quot;monitor&quot;).</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.UnsupportedOperationException
         &lt;ul&gt;
           &lt;li&gt;if &lt;tt&gt;lockedMonitors&lt;/tt&gt; is &lt;tt&gt;true&lt;/tt&gt; but
               the Java virtual machine does not support monitoring
               of {@linkplain #isObjectMonitorUsageSupported
               object monitor usage}; or&lt;/li&gt;
           &lt;li&gt;if &lt;tt&gt;lockedSynchronizers&lt;/tt&gt; is &lt;tt&gt;true&lt;/tt&gt; but
               the Java virtual machine does not support monitoring
               of {@linkplain #isSynchronizerUsageSupported
               ownable synchronizer usage}.&lt;/li&gt;
         &lt;/ul&gt;</description>
					</attribute>
					<attribute name="@see">
						<description>#isObjectMonitorUsageSupported</description>
					</attribute>
					<attribute name="@see">
						<description>#isSynchronizerUsageSupported</description>
					</attribute>
					<attribute name="@since">
						<description>1.6</description>
					</attribute>
				</comment>
				<params>
					<param name="lockedMonitors" comment="if &lt;tt&gt;true&lt;/tt&gt;, dump all locked monitors." fulltype="boolean" type="boolean" />
					<param name="lockedSynchronizers" comment="if &lt;tt&gt;true&lt;/tt&gt;, dump all locked
             ownable synchronizers." fulltype="boolean" type="boolean" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="java.lang.management" interface="true" fulltype="java.lang.management.CompilationMXBean" type="CompilationMXBean">
		<comment>
			<description>The management interface for the compilation system of
 the Java virtual machine.

 &lt;p&gt; A Java virtual machine has a single instance of the implementation
 class of this interface.  This instance implementing this interface is
 an &lt;a href=&quot;ManagementFactory.html#MXBean&quot;&gt;MXBean&lt;/a&gt;
 that can be obtained by calling
 the {@link ManagementFactory#getCompilationMXBean} method or
 from the {@link ManagementFactory#getPlatformMBeanServer
 platform &lt;tt&gt;MBeanServer&lt;/tt&gt;} method.

 &lt;p&gt;The &lt;tt&gt;ObjectName&lt;/tt&gt; for uniquely identifying the MXBean for
 the compilation system within an MBeanServer is:
 &lt;blockquote&gt;
  {@link ManagementFactory#COMPILATION_MXBEAN_NAME
         &lt;tt&gt;java.lang:type=Compilation&lt;/tt&gt;}
 &lt;/blockquote&gt;</description>
			<attribute name="@see">
				<description>&lt;a href=&quot;../../../javax/management/package-summary.html&quot;&gt;
      JMX Specification.&lt;/a&gt;</description>
			</attribute>
			<attribute name="@see">
				<description>&lt;a href=&quot;package-summary.html#examples&quot;&gt;
      Ways to Access MXBeans&lt;/a&gt;</description>
			</attribute>
			<attribute name="@author">
				<description>Mandy Chung</description>
			</attribute>
			<attribute name="@since">
				<description>1.5</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="getName" returncomment="the name of the JIT compiler." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the name of the Just-in-time (JIT) compiler.</description>
					<attribute name="@return">
						<description>the name of the JIT compiler.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="isCompilationTimeMonitoringSupported" returncomment="&lt;tt&gt;true&lt;/tt&gt; if the monitoring of compilation time is
 supported ; &lt;tt&gt;false&lt;/tt&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Tests if the Java virtual machine supports the monitoring of
 compilation time.</description>
					<attribute name="@return">
						<description>&lt;tt&gt;true&lt;/tt&gt; if the monitoring of compilation time is
 supported ; &lt;tt&gt;false&lt;/tt&gt; otherwise.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getTotalCompilationTime" returncomment="Compilation time in milliseconds" fulltype="long" type="long">
				<comment>
					<description>Returns the approximate accumlated elapsed time (in milliseconds)
 spent in compilation.
 If multiple threads are used for compilation, this value is
 summation of the approximate time that each thread spent in compilation.

 &lt;p&gt;This method is optionally supported by the platform.
 A Java virtual machine implementation may not support the compilation
 time monitoring. The {@link #isCompilationTimeMonitoringSupported}
 method can be used to determine if the Java virtual machine
 supports this operation.

 &lt;p&gt; This value does not indicate the level of performance of
 the Java virtual machine and is not intended for performance comparisons
 of different virtual machine implementations.
 The implementations may have different definitions and different
 measurements of the compilation time.</description>
					<attribute name="@return">
						<description>Compilation time in milliseconds</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.UnsupportedOperationException if the Java
 virtual machine does not support
 this operation.</description>
					</attribute>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="java.lang.management" superclassfulltype="java.lang.Object" fulltype="java.lang.management.ThreadInfo" type="ThreadInfo">
		<comment>
			<description>Thread information. &lt;tt&gt;ThreadInfo&lt;/tt&gt; contains the information
 about a thread including:
 &lt;h4&gt;General thread information&lt;/h4&gt;
 &lt;ul&gt;
   &lt;li&gt;Thread ID.&lt;/li&gt;
   &lt;li&gt;Name of the thread.&lt;/li&gt;
 &lt;/ul&gt;

 &lt;h4&gt;Execution information&lt;/h4&gt;
 &lt;ul&gt;
   &lt;li&gt;Thread state.&lt;/li&gt;
   &lt;li&gt;The object upon which the thread is blocked due to:
       &lt;ul&gt;
       &lt;li&gt;waiting to enter a synchronization block/method, or&lt;/li&gt;
       &lt;li&gt;waiting to be notified in a {@link Object#wait Object.wait} method,
           or&lt;/li&gt;
       &lt;li&gt;parking due to a {@link java.util.concurrent.locks.LockSupport#park
           LockSupport.park} call.&lt;/li&gt;
       &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;The ID of the thread that owns the object
       that the thread is blocked.&lt;/li&gt;
   &lt;li&gt;Stack trace of the thread.&lt;/li&gt;
   &lt;li&gt;List of object monitors locked by the thread.&lt;/li&gt;
   &lt;li&gt;List of &lt;a href=&quot;LockInfo.html#OwnableSynchronizer&quot;&gt;
       ownable synchronizers&lt;/a&gt; locked by the thread.&lt;/li&gt;
 &lt;/ul&gt;

 &lt;h4&gt;&lt;a name=&quot;SyncStats&quot;&gt;Synchronization Statistics&lt;/a&gt;&lt;/h4&gt;
 &lt;ul&gt;
   &lt;li&gt;The number of times that the thread has blocked for
       synchronization or waited for notification.&lt;/li&gt;
   &lt;li&gt;The accumulated elapsed time that the thread has blocked
       for synchronization or waited for notification
       since {@link ThreadMXBean#setThreadContentionMonitoringEnabled
       thread contention monitoring}
       was enabled. Some Java virtual machine implementation
       may not support this.  The
       {@link ThreadMXBean#isThreadContentionMonitoringSupported()}
       method can be used to determine if a Java virtual machine
       supports this.&lt;/li&gt;
 &lt;/ul&gt;

 &lt;p&gt;This thread information class is designed for use in monitoring of
 the system, not for synchronization control.

 &lt;h4&gt;MXBean Mapping&lt;/h4&gt;
 &lt;tt&gt;ThreadInfo&lt;/tt&gt; is mapped to a {@link CompositeData CompositeData}
 with attributes as specified in
 the {@link #from from} method.</description>
			<attribute name="@see">
				<description>ThreadMXBean#getThreadInfo</description>
			</attribute>
			<attribute name="@see">
				<description>ThreadMXBean#dumpAllThreads</description>
			</attribute>
			<attribute name="@author">
				<description>Mandy Chung</description>
			</attribute>
			<attribute name="@since">
				<description>1.5</description>
			</attribute>
		</comment>
		<fields>
			<field visibility="private" name="threadName" fulltype="java.lang.String" type="String" />
			<field visibility="private" name="threadId" fulltype="long" type="long" />
			<field visibility="private" name="blockedTime" fulltype="long" type="long" />
			<field visibility="private" name="blockedCount" fulltype="long" type="long" />
			<field visibility="private" name="waitedTime" fulltype="long" type="long" />
			<field visibility="private" name="waitedCount" fulltype="long" type="long" />
			<field visibility="private" name="lock" fulltype="java.lang.management.LockInfo" type="LockInfo" />
			<field visibility="private" name="lockName" fulltype="java.lang.String" type="String" />
			<field visibility="private" name="lockOwnerId" fulltype="long" type="long" />
			<field visibility="private" name="lockOwnerName" fulltype="java.lang.String" type="String" />
			<field visibility="private" name="inNative" fulltype="boolean" type="boolean" />
			<field visibility="private" name="suspended" fulltype="boolean" type="boolean" />
			<field visibility="private" name="threadState" fulltype="java.lang.Thread.State" type="Thread.State" />
			<field visibility="private" name="stackTrace" fulltype="java.lang.StackTraceElement[]" type="StackTraceElement" />
			<field visibility="private" name="lockedMonitors" fulltype="java.lang.management.MonitorInfo[]" type="MonitorInfo" />
			<field visibility="private" name="lockedSynchronizers" fulltype="java.lang.management.LockInfo[]" type="LockInfo" />
			<field static="true" visibility="private" name="EMPTY_MONITORS" fulltype="java.lang.management.MonitorInfo[]" type="MonitorInfo" />
			<field static="true" visibility="private" name="EMPTY_SYNCS" fulltype="java.lang.management.LockInfo[]" type="LockInfo" />
			<field final="true" static="true" const="8" visibility="private" name="MAX_FRAMES" constexpr="8" fulltype="int" type="int" />
			<field final="true" static="true" visibility="private" name="NO_STACK_TRACE" fulltype="java.lang.StackTraceElement[]" type="StackTraceElement" />
		</fields>
		<methods>
			<constructor visibility="private" name="ThreadInfo">
				<comment>
					<description>Constructor of ThreadInfo created by the JVM</description>
					<attribute name="@param">
						<description>t             Thread</description>
					</attribute>
					<attribute name="@param">
						<description>state         Thread state</description>
					</attribute>
					<attribute name="@param">
						<description>lockObj       Object on which the thread is blocked</description>
					</attribute>
					<attribute name="@param">
						<description>lockOwner     the thread holding the lock</description>
					</attribute>
					<attribute name="@param">
						<description>blockedCount  Number of times blocked to enter a lock</description>
					</attribute>
					<attribute name="@param">
						<description>blockedTime   Approx time blocked to enter a lock</description>
					</attribute>
					<attribute name="@param">
						<description>waitedCount   Number of times waited on a lock</description>
					</attribute>
					<attribute name="@param">
						<description>waitedTime    Approx time waited on a lock</description>
					</attribute>
					<attribute name="@param">
						<description>stackTrace    Thread stack trace</description>
					</attribute>
				</comment>
				<params>
					<param name="t" comment="Thread" fulltype="java.lang.Thread" type="Thread" />
					<param name="state" comment="Thread state" fulltype="int" type="int" />
					<param name="lockObj" comment="Object on which the thread is blocked" fulltype="java.lang.Object" type="Object" />
					<param name="lockOwner" comment="the thread holding the lock" fulltype="java.lang.Thread" type="Thread" />
					<param name="blockedCount" comment="Number of times blocked to enter a lock" fulltype="long" type="long" />
					<param name="blockedTime" comment="Approx time blocked to enter a lock" fulltype="long" type="long" />
					<param name="waitedCount" comment="Number of times waited on a lock" fulltype="long" type="long" />
					<param name="waitedTime" comment="Approx time waited on a lock" fulltype="long" type="long" />
					<param name="stackTrace" comment="Thread stack trace" fulltype="java.lang.StackTraceElement[]" type="StackTraceElement" />
				</params>
			</constructor>
			<constructor visibility="private" name="ThreadInfo">
				<comment>
					<description>Constructor of ThreadInfo created by the JVM
 for {@link ThreadMXBean#getThreadInfo(long[],boolean,boolean)}
 and {@link ThreadMXBean#dumpAllThreads}</description>
					<attribute name="@param">
						<description>t             Thread</description>
					</attribute>
					<attribute name="@param">
						<description>state         Thread state</description>
					</attribute>
					<attribute name="@param">
						<description>lockObj       Object on which the thread is blocked</description>
					</attribute>
					<attribute name="@param">
						<description>lockOwner     the thread holding the lock</description>
					</attribute>
					<attribute name="@param">
						<description>blockedCount  Number of times blocked to enter a lock</description>
					</attribute>
					<attribute name="@param">
						<description>blockedTime   Approx time blocked to enter a lock</description>
					</attribute>
					<attribute name="@param">
						<description>waitedCount   Number of times waited on a lock</description>
					</attribute>
					<attribute name="@param">
						<description>waitedTime    Approx time waited on a lock</description>
					</attribute>
					<attribute name="@param">
						<description>stackTrace    Thread stack trace</description>
					</attribute>
					<attribute name="@param">
						<description>lockedMonitors List of locked monitors</description>
					</attribute>
					<attribute name="@param">
						<description>lockedSynchronizers List of locked synchronizers</description>
					</attribute>
				</comment>
				<params>
					<param name="t" comment="Thread" fulltype="java.lang.Thread" type="Thread" />
					<param name="state" comment="Thread state" fulltype="int" type="int" />
					<param name="lockObj" comment="Object on which the thread is blocked" fulltype="java.lang.Object" type="Object" />
					<param name="lockOwner" comment="the thread holding the lock" fulltype="java.lang.Thread" type="Thread" />
					<param name="blockedCount" comment="Number of times blocked to enter a lock" fulltype="long" type="long" />
					<param name="blockedTime" comment="Approx time blocked to enter a lock" fulltype="long" type="long" />
					<param name="waitedCount" comment="Number of times waited on a lock" fulltype="long" type="long" />
					<param name="waitedTime" comment="Approx time waited on a lock" fulltype="long" type="long" />
					<param name="stackTrace" comment="Thread stack trace" fulltype="java.lang.StackTraceElement[]" type="StackTraceElement" />
					<param name="monitors" fulltype="java.lang.Object[]" type="Object" />
					<param name="stackDepths" fulltype="int[]" type="int" />
					<param name="synchronizers" fulltype="java.lang.Object[]" type="Object" />
				</params>
			</constructor>
			<constructor visibility="private" name="ThreadInfo">
				<params>
					<param name="cd" fulltype="javax.management.openmbean.CompositeData" type="CompositeData" />
				</params>
			</constructor>
			<method visibility="private" name="initialize" fulltype="void" type="void">
				<comment>
					<description>Initialize ThreadInfo object</description>
					<attribute name="@param">
						<description>t             Thread</description>
					</attribute>
					<attribute name="@param">
						<description>state         Thread state</description>
					</attribute>
					<attribute name="@param">
						<description>lockObj       Object on which the thread is blocked</description>
					</attribute>
					<attribute name="@param">
						<description>lockOwner     the thread holding the lock</description>
					</attribute>
					<attribute name="@param">
						<description>blockedCount  Number of times blocked to enter a lock</description>
					</attribute>
					<attribute name="@param">
						<description>blockedTime   Approx time blocked to enter a lock</description>
					</attribute>
					<attribute name="@param">
						<description>waitedCount   Number of times waited on a lock</description>
					</attribute>
					<attribute name="@param">
						<description>waitedTime    Approx time waited on a lock</description>
					</attribute>
					<attribute name="@param">
						<description>stackTrace    Thread stack trace</description>
					</attribute>
					<attribute name="@param">
						<description>lockedMonitors List of locked monitors</description>
					</attribute>
					<attribute name="@param">
						<description>lockedSynchronizers List of locked synchronizers</description>
					</attribute>
				</comment>
				<params>
					<param name="t" comment="Thread" fulltype="java.lang.Thread" type="Thread" />
					<param name="state" comment="Thread state" fulltype="int" type="int" />
					<param name="lockObj" comment="Object on which the thread is blocked" fulltype="java.lang.Object" type="Object" />
					<param name="lockOwner" comment="the thread holding the lock" fulltype="java.lang.Thread" type="Thread" />
					<param name="blockedCount" comment="Number of times blocked to enter a lock" fulltype="long" type="long" />
					<param name="blockedTime" comment="Approx time blocked to enter a lock" fulltype="long" type="long" />
					<param name="waitedCount" comment="Number of times waited on a lock" fulltype="long" type="long" />
					<param name="waitedTime" comment="Approx time waited on a lock" fulltype="long" type="long" />
					<param name="stackTrace" comment="Thread stack trace" fulltype="java.lang.StackTraceElement[]" type="StackTraceElement" />
					<param name="lockedMonitors" comment="List of locked monitors" fulltype="java.lang.management.MonitorInfo[]" type="MonitorInfo" />
					<param name="lockedSynchronizers" comment="List of locked synchronizers" fulltype="java.lang.management.LockInfo[]" type="LockInfo" />
				</params>
			</method>
			<method visibility="public" name="getThreadId" returncomment="the ID of the associated thread." fulltype="long" type="long">
				<comment>
					<description>Returns the ID of the thread associated with this &lt;tt&gt;ThreadInfo&lt;/tt&gt;.</description>
					<attribute name="@return">
						<description>the ID of the associated thread.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getThreadName" returncomment="the name of the associated thread." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the name of the thread associated with this &lt;tt&gt;ThreadInfo&lt;/tt&gt;.</description>
					<attribute name="@return">
						<description>the name of the associated thread.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getThreadState" returncomment="&lt;tt&gt;Thread.State&lt;/tt&gt; of the associated thread." fulltype="java.lang.Thread.State" type="Thread.State">
				<comment>
					<description>Returns the state of the thread associated with this &lt;tt&gt;ThreadInfo&lt;/tt&gt;.</description>
					<attribute name="@return">
						<description>&lt;tt&gt;Thread.State&lt;/tt&gt; of the associated thread.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getBlockedTime" returncomment="the approximate accumulated elapsed time in milliseconds
 that a thread entered the &lt;tt&gt;BLOCKED&lt;/tt&gt; state;
 &lt;tt&gt;-1&lt;/tt&gt; if thread contention monitoring is disabled." fulltype="long" type="long">
				<comment>
					<description>Returns the approximate accumulated elapsed time (in milliseconds)
 that the thread associated with this &lt;tt&gt;ThreadInfo&lt;/tt&gt;
 has blocked to enter or reenter a monitor
 since thread contention monitoring is enabled.
 I.e. the total accumulated time the thread has been in the
 {@link java.lang.Thread.State#BLOCKED BLOCKED} state since thread
 contention monitoring was last enabled.
 This method returns &lt;tt&gt;-1&lt;/tt&gt; if thread contention monitoring
 is disabled.

 &lt;p&gt;The Java virtual machine may measure the time with a high
 resolution timer.  This statistic is reset when
 the thread contention monitoring is reenabled.</description>
					<attribute name="@return">
						<description>the approximate accumulated elapsed time in milliseconds
 that a thread entered the &lt;tt&gt;BLOCKED&lt;/tt&gt; state;
 &lt;tt&gt;-1&lt;/tt&gt; if thread contention monitoring is disabled.</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.UnsupportedOperationException if the Java
 virtual machine does not support this operation.</description>
					</attribute>
					<attribute name="@see">
						<description>ThreadMXBean#isThreadContentionMonitoringSupported</description>
					</attribute>
					<attribute name="@see">
						<description>ThreadMXBean#setThreadContentionMonitoringEnabled</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getBlockedCount" returncomment="the total number of times that the thread
 entered the &lt;tt&gt;BLOCKED&lt;/tt&gt; state." fulltype="long" type="long">
				<comment>
					<description>Returns the total number of times that
 the thread associated with this &lt;tt&gt;ThreadInfo&lt;/tt&gt;
 blocked to enter or reenter a monitor.
 I.e. the number of times a thread has been in the
 {@link java.lang.Thread.State#BLOCKED BLOCKED} state.</description>
					<attribute name="@return">
						<description>the total number of times that the thread
 entered the &lt;tt&gt;BLOCKED&lt;/tt&gt; state.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getWaitedTime" returncomment="the approximate accumulated elapsed time in milliseconds
 that a thread has been in the &lt;tt&gt;WAITING&lt;/tt&gt; or
 &lt;tt&gt;TIMED_WAITING&lt;/tt&gt; state;
 &lt;tt&gt;-1&lt;/tt&gt; if thread contention monitoring is disabled." fulltype="long" type="long">
				<comment>
					<description>Returns the approximate accumulated elapsed time (in milliseconds)
 that the thread associated with this &lt;tt&gt;ThreadInfo&lt;/tt&gt;
 has waited for notification
 since thread contention monitoring is enabled.
 I.e. the total accumulated time the thread has been in the
 {@link java.lang.Thread.State#WAITING WAITING}
 or {@link java.lang.Thread.State#TIMED_WAITING TIMED_WAITING} state
 since thread contention monitoring is enabled.
 This method returns &lt;tt&gt;-1&lt;/tt&gt; if thread contention monitoring
 is disabled.

 &lt;p&gt;The Java virtual machine may measure the time with a high
 resolution timer.  This statistic is reset when
 the thread contention monitoring is reenabled.</description>
					<attribute name="@return">
						<description>the approximate accumulated elapsed time in milliseconds
 that a thread has been in the &lt;tt&gt;WAITING&lt;/tt&gt; or
 &lt;tt&gt;TIMED_WAITING&lt;/tt&gt; state;
 &lt;tt&gt;-1&lt;/tt&gt; if thread contention monitoring is disabled.</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.UnsupportedOperationException if the Java
 virtual machine does not support this operation.</description>
					</attribute>
					<attribute name="@see">
						<description>ThreadMXBean#isThreadContentionMonitoringSupported</description>
					</attribute>
					<attribute name="@see">
						<description>ThreadMXBean#setThreadContentionMonitoringEnabled</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getWaitedCount" returncomment="the total number of times that the thread
 was in the &lt;tt&gt;WAITING&lt;/tt&gt; or &lt;tt&gt;TIMED_WAITING&lt;/tt&gt; state." fulltype="long" type="long">
				<comment>
					<description>Returns the total number of times that
 the thread associated with this &lt;tt&gt;ThreadInfo&lt;/tt&gt;
 waited for notification.
 I.e. the number of times that a thread has been
 in the {@link java.lang.Thread.State#WAITING WAITING}
 or {@link java.lang.Thread.State#TIMED_WAITING TIMED_WAITING} state.</description>
					<attribute name="@return">
						<description>the total number of times that the thread
 was in the &lt;tt&gt;WAITING&lt;/tt&gt; or &lt;tt&gt;TIMED_WAITING&lt;/tt&gt; state.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getLockInfo" returncomment="&lt;tt&gt;LockInfo&lt;/tt&gt; of an object for which the thread
         is blocked waiting if any; &lt;tt&gt;null&lt;/tt&gt; otherwise." fulltype="java.lang.management.LockInfo" type="LockInfo">
				<comment>
					<description>Returns the &lt;tt&gt;LockInfo&lt;/tt&gt; of an object for which
 the thread associated with this &lt;tt&gt;ThreadInfo&lt;/tt&gt;
 is blocked waiting.
 A thread can be blocked waiting for one of the following:
 &lt;ul&gt;
 &lt;li&gt;an object monitor to be acquired for entering or reentering
     a synchronization block/method.
     &lt;br&gt;The thread is in the {@link java.lang.Thread.State#BLOCKED BLOCKED}
     state waiting to enter the &lt;tt&gt;synchronized&lt;/tt&gt; statement
     or method.
     &lt;p&gt;&lt;/li&gt;
 &lt;li&gt;an object monitor to be notified by another thread.
     &lt;br&gt;The thread is in the {@link java.lang.Thread.State#WAITING WAITING}
     or {@link java.lang.Thread.State#TIMED_WAITING TIMED_WAITING} state
     due to a call to the {@link Object#wait Object.wait} method.
     &lt;p&gt;&lt;/li&gt;
 &lt;li&gt;a synchronization object responsible for the thread parking.
     &lt;br&gt;The thread is in the {@link java.lang.Thread.State#WAITING WAITING}
     or {@link java.lang.Thread.State#TIMED_WAITING TIMED_WAITING} state
     due to a call to the
     {@link java.util.concurrent.locks.LockSupport#park(Object)
     LockSupport.park} method.  The synchronization object
     is the object returned from
     {@link java.util.concurrent.locks.LockSupport#getBlocker
     LockSupport.getBlocker} method. Typically it is an
     &lt;a href=&quot;LockInfo.html#OwnableSynchronizer&quot;&gt; ownable synchronizer&lt;/a&gt;
     or a {@link java.util.concurrent.locks.Condition Condition}.&lt;/li&gt;
 &lt;/ul&gt;

 &lt;p&gt;This method returns &lt;tt&gt;null&lt;/tt&gt; if the thread is not in any of
 the above conditions.</description>
					<attribute name="@return">
						<description>&lt;tt&gt;LockInfo&lt;/tt&gt; of an object for which the thread
         is blocked waiting if any; &lt;tt&gt;null&lt;/tt&gt; otherwise.</description>
					</attribute>
					<attribute name="@since">
						<description>1.6</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getLockName" returncomment="the string representation of the object on which
 the thread is blocked if any;
 &lt;tt&gt;null&lt;/tt&gt; otherwise." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the {@link LockInfo#toString string representation}
 of an object for which the thread associated with this
 &lt;tt&gt;ThreadInfo&lt;/tt&gt; is blocked waiting.
 This method is equivalent to calling:
 &lt;blockquote&gt;
 &lt;pre&gt;
 getLockInfo().toString()
 &lt;/pre&gt;&lt;/blockquote&gt;

 &lt;p&gt;This method will return &lt;tt&gt;null&lt;/tt&gt; if this thread is not blocked
 waiting for any object or if the object is not owned by any thread.</description>
					<attribute name="@return">
						<description>the string representation of the object on which
 the thread is blocked if any;
 &lt;tt&gt;null&lt;/tt&gt; otherwise.</description>
					</attribute>
					<attribute name="@see">
						<description>#getLockInfo</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getLockOwnerId" returncomment="the thread ID of the owner thread of the object
 this thread is blocked on;
 &lt;tt&gt;-1&lt;/tt&gt; if this thread is not blocked
 or if the object lis not owned by any thread." fulltype="long" type="long">
				<comment>
					<description>Returns the ID of the thread which owns the object
 for which the thread associated with this &lt;tt&gt;ThreadInfo&lt;/tt&gt;
 is blocked waiting.
 This method will return &lt;tt&gt;-1&lt;/tt&gt; if this thread is not blocked
 waiting for any object or if the object is not owned by any thread.</description>
					<attribute name="@return">
						<description>the thread ID of the owner thread of the object
 this thread is blocked on;
 &lt;tt&gt;-1&lt;/tt&gt; if this thread is not blocked
 or if the object lis not owned by any thread.</description>
					</attribute>
					<attribute name="@see">
						<description>#getLockInfo</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getLockOwnerName" returncomment="the name of the thread that owns the object
 this thread is blocked on;
 &lt;tt&gt;null&lt;/tt&gt; if this thread is not blocked
 or if the object is not owned by any thread." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the name of the thread which owns the object
 for which the thread associated with this &lt;tt&gt;ThreadInfo&lt;/tt&gt;
 is blocked waiting.
 This method will return &lt;tt&gt;null&lt;/tt&gt; if this thread is not blocked
 waiting for any object or if the object is not owned by any thread.</description>
					<attribute name="@return">
						<description>the name of the thread that owns the object
 this thread is blocked on;
 &lt;tt&gt;null&lt;/tt&gt; if this thread is not blocked
 or if the object is not owned by any thread.</description>
					</attribute>
					<attribute name="@see">
						<description>#getLockInfo</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getStackTrace" returncomment="an array of &lt;tt&gt;StackTraceElement&lt;/tt&gt; objects of the thread." fulltype="java.lang.StackTraceElement[]" type="StackTraceElement">
				<comment>
					<description>Returns the stack trace of the thread
 associated with this &lt;tt&gt;ThreadInfo&lt;/tt&gt;.
 If no stack trace was requested for this thread info, this method
 will return a zero-length array.
 If the returned array is of non-zero length then the first element of
 the array represents the top of the stack, which is the most recent
 method invocation in the sequence.  The last element of the array
 represents the bottom of the stack, which is the least recent method
 invocation in the sequence.

 &lt;p&gt;Some Java virtual machines may, under some circumstances, omit one
 or more stack frames from the stack trace.  In the extreme case,
 a virtual machine that has no stack trace information concerning
 the thread associated with this &lt;tt&gt;ThreadInfo&lt;/tt&gt;
 is permitted to return a zero-length array from this method.</description>
					<attribute name="@return">
						<description>an array of &lt;tt&gt;StackTraceElement&lt;/tt&gt; objects of the thread.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="isSuspended" returncomment="&lt;tt&gt;true&lt;/tt&gt; if the thread is suspended;
         &lt;tt&gt;false&lt;/tt&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Tests if the thread associated with this &lt;tt&gt;ThreadInfo&lt;/tt&gt;
 is suspended.  This method returns &lt;tt&gt;true&lt;/tt&gt; if
 {@link Thread#suspend} has been called.</description>
					<attribute name="@return">
						<description>&lt;tt&gt;true&lt;/tt&gt; if the thread is suspended;
         &lt;tt&gt;false&lt;/tt&gt; otherwise.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="isInNative" returncomment="&lt;tt&gt;true&lt;/tt&gt; if the thread is executing native code;
         &lt;tt&gt;false&lt;/tt&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Tests if the thread associated with this &lt;tt&gt;ThreadInfo&lt;/tt&gt;
 is executing native code via the Java Native Interface (JNI).
 The JNI native code does not include
 the virtual machine support code or the compiled native
 code generated by the virtual machine.</description>
					<attribute name="@return">
						<description>&lt;tt&gt;true&lt;/tt&gt; if the thread is executing native code;
         &lt;tt&gt;false&lt;/tt&gt; otherwise.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="toString" returncomment="a string representation of this thread info." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a string representation of this thread info.
 The format of this string depends on the implementation.
 The returned string will typically include
 the {@linkplain #getThreadName thread name},
 the {@linkplain #getThreadId thread ID},
 its {@linkplain #getThreadState state},
 and a {@linkplain #getStackTrace stack trace} if any.</description>
					<attribute name="@return">
						<description>a string representation of this thread info.</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="from" returncomment="a &lt;tt&gt;ThreadInfo&lt;/tt&gt; object represented
         by &lt;tt&gt;cd&lt;/tt&gt; if &lt;tt&gt;cd&lt;/tt&gt; is not &lt;tt&gt;null&lt;/tt&gt;;
         &lt;tt&gt;null&lt;/tt&gt; otherwise." fulltype="java.lang.management.ThreadInfo" type="ThreadInfo">
				<comment>
					<description>Returns a &lt;tt&gt;ThreadInfo&lt;/tt&gt; object represented by the
 given &lt;tt&gt;CompositeData&lt;/tt&gt;.
 The given &lt;tt&gt;CompositeData&lt;/tt&gt; must contain the following attributes
 unless otherwise specified below:
 &lt;blockquote&gt;
 &lt;table border&gt;
 &lt;tr&gt;
   &lt;th align=left&gt;Attribute Name&lt;/th&gt;
   &lt;th align=left&gt;Type&lt;/th&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
   &lt;td&gt;threadId&lt;/td&gt;
   &lt;td&gt;&lt;tt&gt;java.lang.Long&lt;/tt&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
   &lt;td&gt;threadName&lt;/td&gt;
   &lt;td&gt;&lt;tt&gt;java.lang.String&lt;/tt&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
   &lt;td&gt;threadState&lt;/td&gt;
   &lt;td&gt;&lt;tt&gt;java.lang.String&lt;/tt&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
   &lt;td&gt;suspended&lt;/td&gt;
   &lt;td&gt;&lt;tt&gt;java.lang.Boolean&lt;/tt&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
   &lt;td&gt;inNative&lt;/td&gt;
   &lt;td&gt;&lt;tt&gt;java.lang.Boolean&lt;/tt&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
   &lt;td&gt;blockedCount&lt;/td&gt;
   &lt;td&gt;&lt;tt&gt;java.lang.Long&lt;/tt&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
   &lt;td&gt;blockedTime&lt;/td&gt;
   &lt;td&gt;&lt;tt&gt;java.lang.Long&lt;/tt&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
   &lt;td&gt;waitedCount&lt;/td&gt;
   &lt;td&gt;&lt;tt&gt;java.lang.Long&lt;/tt&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
   &lt;td&gt;waitedTime&lt;/td&gt;
   &lt;td&gt;&lt;tt&gt;java.lang.Long&lt;/tt&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
   &lt;td&gt;lockInfo&lt;/td&gt;
   &lt;td&gt;&lt;tt&gt;javax.management.openmbean.CompositeData&lt;/tt&gt;
       - the mapped type for {@link LockInfo} as specified in the
       &lt;a href=&quot;../../../javax/management/MXBean.html#mapping-rules&quot;&gt;
       type mapping rules&lt;/a&gt; of
       {@linkplain javax.management.MXBean MXBeans}.
       &lt;p&gt;
       If &lt;tt&gt;cd&lt;/tt&gt; does not contain this attribute,
       the &lt;tt&gt;LockInfo&lt;/tt&gt; object will be constructed from
       the value of the &lt;tt&gt;lockName&lt;/tt&gt; attribute. &lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
   &lt;td&gt;lockName&lt;/td&gt;
   &lt;td&gt;&lt;tt&gt;java.lang.String&lt;/tt&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
   &lt;td&gt;lockOwnerId&lt;/td&gt;
   &lt;td&gt;&lt;tt&gt;java.lang.Long&lt;/tt&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
   &lt;td&gt;lockOwnerName&lt;/td&gt;
   &lt;td&gt;&lt;tt&gt;java.lang.String&lt;/tt&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
   &lt;td&gt;&lt;a name=&quot;StackTrace&quot;&gt;stackTrace&lt;/a&gt;&lt;/td&gt;
   &lt;td&gt;&lt;tt&gt;javax.management.openmbean.CompositeData[]&lt;/tt&gt;
       &lt;p&gt;
       Each element is a &lt;tt&gt;CompositeData&lt;/tt&gt; representing
       StackTraceElement containing the following attributes:
       &lt;blockquote&gt;
       &lt;table cellspacing=1 cellpadding=0&gt;
       &lt;tr&gt;
         &lt;th align=left&gt;Attribute Name&lt;/th&gt;
         &lt;th align=left&gt;Type&lt;/th&gt;
       &lt;/tr&gt;
       &lt;tr&gt;
         &lt;td&gt;className&lt;/td&gt;
         &lt;td&gt;&lt;tt&gt;java.lang.String&lt;/tt&gt;&lt;/td&gt;
       &lt;/tr&gt;
       &lt;tr&gt;
         &lt;td&gt;methodName&lt;/td&gt;
         &lt;td&gt;&lt;tt&gt;java.lang.String&lt;/tt&gt;&lt;/td&gt;
       &lt;/tr&gt;
       &lt;tr&gt;
         &lt;td&gt;fileName&lt;/td&gt;
         &lt;td&gt;&lt;tt&gt;java.lang.String&lt;/tt&gt;&lt;/td&gt;
       &lt;/tr&gt;
       &lt;tr&gt;
         &lt;td&gt;lineNumber&lt;/td&gt;
         &lt;td&gt;&lt;tt&gt;java.lang.Integer&lt;/tt&gt;&lt;/td&gt;
       &lt;/tr&gt;
       &lt;tr&gt;
         &lt;td&gt;nativeMethod&lt;/td&gt;
         &lt;td&gt;&lt;tt&gt;java.lang.Boolean&lt;/tt&gt;&lt;/td&gt;
       &lt;/tr&gt;
       &lt;/table&gt;
       &lt;/blockquote&gt;
   &lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
   &lt;td&gt;lockedMonitors&lt;/td&gt;
   &lt;td&gt;&lt;tt&gt;javax.management.openmbean.CompositeData[]&lt;/tt&gt;
       whose element type is the mapped type for
       {@link MonitorInfo} as specified in the
       {@link MonitorInfo#from Monitor.from} method.
       &lt;p&gt;
       If &lt;tt&gt;cd&lt;/tt&gt; does not contain this attribute,
       this attribute will be set to an empty array. &lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
   &lt;td&gt;lockedSynchronizers&lt;/td&gt;
   &lt;td&gt;&lt;tt&gt;javax.management.openmbean.CompositeData[]&lt;/tt&gt;
       whose element type is the mapped type for
       {@link LockInfo} as specified in the
       &lt;a href=&quot;../../../javax/management/MXBean.html#mapping-rules&quot;&gt;
       type mapping rules&lt;/a&gt; of
       {@linkplain javax.management.MXBean MXBeans}.
       &lt;p&gt;
       If &lt;tt&gt;cd&lt;/tt&gt; does not contain this attribute,
       this attribute will be set to an empty array. &lt;/td&gt;
 &lt;/tr&gt;
 &lt;/table&gt;
 &lt;/blockquote&gt;</description>
					<attribute name="@param">
						<description>cd &lt;tt&gt;CompositeData&lt;/tt&gt; representing a &lt;tt&gt;ThreadInfo&lt;/tt&gt;</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalArgumentException if &lt;tt&gt;cd&lt;/tt&gt; does not
   represent a &lt;tt&gt;ThreadInfo&lt;/tt&gt; with the attributes described
   above.</description>
					</attribute>
					<attribute name="@return">
						<description>a &lt;tt&gt;ThreadInfo&lt;/tt&gt; object represented
         by &lt;tt&gt;cd&lt;/tt&gt; if &lt;tt&gt;cd&lt;/tt&gt; is not &lt;tt&gt;null&lt;/tt&gt;;
         &lt;tt&gt;null&lt;/tt&gt; otherwise.</description>
					</attribute>
				</comment>
				<params>
					<param name="cd" comment="&lt;tt&gt;CompositeData&lt;/tt&gt; representing a &lt;tt&gt;ThreadInfo&lt;/tt&gt;" fulltype="javax.management.openmbean.CompositeData" type="CompositeData" />
				</params>
			</method>
			<method visibility="public" name="getLockedMonitors" returncomment="an array of &lt;tt&gt;MonitorInfo&lt;/tt&gt; objects representing
         the object monitors locked by the thread." fulltype="java.lang.management.MonitorInfo[]" type="MonitorInfo">
				<comment>
					<description>Returns an array of {@link MonitorInfo} objects, each of which
 represents an object monitor currently locked by the thread
 associated with this &lt;tt&gt;ThreadInfo&lt;/tt&gt;.
 If no locked monitor was requested for this thread info or
 no monitor is locked by the thread, this method
 will return a zero-length array.</description>
					<attribute name="@return">
						<description>an array of &lt;tt&gt;MonitorInfo&lt;/tt&gt; objects representing
         the object monitors locked by the thread.</description>
					</attribute>
					<attribute name="@since">
						<description>1.6</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getLockedSynchronizers" returncomment="an array of &lt;tt&gt;LockInfo&lt;/tt&gt; objects representing
         the ownable synchronizers locked by the thread." fulltype="java.lang.management.LockInfo[]" type="LockInfo">
				<comment>
					<description>Returns an array of {@link LockInfo} objects, each of which
 represents an &lt;a href=&quot;LockInfo.html#OwnableSynchronizer&quot;&gt;ownable
 synchronizer&lt;/a&gt; currently locked by the thread associated with
 this &lt;tt&gt;ThreadInfo&lt;/tt&gt;.  If no locked synchronizer was
 requested for this thread info or no synchronizer is locked by
 the thread, this method will return a zero-length array.</description>
					<attribute name="@return">
						<description>an array of &lt;tt&gt;LockInfo&lt;/tt&gt; objects representing
         the ownable synchronizers locked by the thread.</description>
					</attribute>
					<attribute name="@since">
						<description>1.6</description>
					</attribute>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass final="true" superclass="BasicPermission" visibility="public" package="java.lang.management" serializable="true" superclassfulltype="java.security.BasicPermission" fulltype="java.lang.management.ManagementPermission" type="ManagementPermission">
		<comment>
			<description>The permission which the SecurityManager will check when code
 that is running with a SecurityManager calls methods defined
 in the management interface for the Java platform.
 &lt;P&gt;
 The following table
 provides a summary description of what the permission allows,
 and discusses the risks of granting code the permission.
 &lt;P&gt;

 &lt;table border=1 cellpadding=5 summary=&quot;Table shows permission target name, wh
at the permission allows, and associated risks&quot;&gt;
 &lt;tr&gt;
 &lt;th&gt;Permission Target Name&lt;/th&gt;
 &lt;th&gt;What the Permission Allows&lt;/th&gt;
 &lt;th&gt;Risks of Allowing this Permission&lt;/th&gt;
 &lt;/tr&gt;

 &lt;tr&gt;
   &lt;td&gt;control&lt;/td&gt;
   &lt;td&gt;Ability to control the runtime characteristics of the Java virtual
       machine, for example, setting the -verbose:gc and -verbose:class flag,
       setting the threshold of a memory pool, and enabling and disabling
       the thread contention monitoring support.
   &lt;/td&gt;
   &lt;td&gt;This allows an attacker to control the runtime characteristics
       of the Java virtual machine and cause the system to misbehave.
   &lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
   &lt;td&gt;monitor&lt;/td&gt;
   &lt;td&gt;Ability to retrieve runtime information about
       the Java virtual machine such as thread
       stack trace, a list of all loaded class names, and input arguments
       to the Java virtual machine.&lt;/td&gt;
   &lt;td&gt;This allows malicious code to monitor runtime information and
       uncover vulnerabilities.&lt;/td&gt;
 &lt;/tr&gt;

 &lt;/table&gt;

 &lt;p&gt;
 Programmers do not normally create ManagementPermission objects directly.
 Instead they are created by the security policy code based on reading
 the security policy file.</description>
			<attribute name="@author">
				<description>Mandy Chung</description>
			</attribute>
			<attribute name="@since">
				<description>1.5</description>
			</attribute>
			<attribute name="@see">
				<description>java.security.BasicPermission</description>
			</attribute>
			<attribute name="@see">
				<description>java.security.Permission</description>
			</attribute>
			<attribute name="@see">
				<description>java.security.Permissions</description>
			</attribute>
			<attribute name="@see">
				<description>java.security.PermissionCollection</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.SecurityManager</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="ManagementPermission">
				<comment>
					<description>Constructs a ManagementPermission with the specified name.</description>
					<attribute name="@param">
						<description>name Permission name. Must be either &quot;monitor&quot; or &quot;control&quot;.</description>
					</attribute>
					<attribute name="@throws">
						<description>NullPointerException if &lt;code&gt;name&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalArgumentException if &lt;code&gt;name&lt;/code&gt; is empty or invalid.</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="Permission name. Must be either &quot;monitor&quot; or &quot;control&quot;." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="ManagementPermission">
				<comment>
					<description>Constructs a new ManagementPermission object.</description>
					<attribute name="@param">
						<description>name Permission name. Must be either &quot;monitor&quot; or &quot;control&quot;.</description>
					</attribute>
					<attribute name="@param">
						<description>actions Must be either null or the empty string.</description>
					</attribute>
					<attribute name="@throws">
						<description>NullPointerException if &lt;code&gt;name&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalArgumentException if &lt;code&gt;name&lt;/code&gt; is empty or
 if arguments are invalid.</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="Permission name. Must be either &quot;monitor&quot; or &quot;control&quot;." fulltype="java.lang.String" type="String" />
					<param name="actions" comment="Must be either null or the empty string." fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception comment="if &lt;code&gt;name&lt;/code&gt; is empty or
 if arguments are invalid." fulltype="java.lang.IllegalArgumentException" type="IllegalArgumentException" />
				</exceptions>
			</constructor>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="java.lang.management" interface="true" fulltype="java.lang.management.MemoryPoolMXBean" type="MemoryPoolMXBean">
		<comment>
			<description>The management interface for a memory pool.  A memory pool
 represents the memory resource managed by the Java virtual machine
 and is managed by one or more {@link MemoryManagerMXBean memory managers}.

 &lt;p&gt; A Java virtual machine has one or more instances of the
 implementation class of this interface.  An instance
 implementing this interface is
 an &lt;a href=&quot;ManagementFactory.html#MXBean&quot;&gt;MXBean&lt;/a&gt;
 that can be obtained by calling
 the {@link ManagementFactory#getMemoryPoolMXBeans} method or
 from the {@link ManagementFactory#getPlatformMBeanServer
 platform &lt;tt&gt;MBeanServer&lt;/tt&gt;} method.

 &lt;p&gt;The &lt;tt&gt;ObjectName&lt;/tt&gt; for uniquely identifying the MXBean for
 a memory pool within an &lt;tt&gt;MBeanServer&lt;/tt&gt; is:
 &lt;blockquote&gt;
    {@link ManagementFactory#MEMORY_POOL_MXBEAN_DOMAIN_TYPE
    &lt;tt&gt;java.lang:type=MemoryPool&lt;/tt&gt;}&lt;tt&gt;,name=&lt;/tt&gt;&lt;i&gt;pool&apos;s name&lt;/i&gt;
 &lt;/blockquote&gt;

 &lt;h4&gt;Memory Type&lt;/h4&gt;
 &lt;p&gt;The Java virtual machine has a heap for object allocation and also
 maintains non-heap memory for the method area and the Java virtual
 machine execution.  The Java virtual machine can have one or more
 memory pools.  Each memory pool represents a memory area
 of one of the following types:
 &lt;ul&gt;
   &lt;li&gt;{@link MemoryType#HEAP heap}&lt;/li&gt;
   &lt;li&gt;{@link MemoryType#NON_HEAP non-heap}&lt;/li&gt;
 &lt;/ul&gt;

 &lt;h4&gt;Memory Usage Monitoring&lt;/h4&gt;

 A memory pool has the following attributes:
 &lt;ul&gt;
   &lt;li&gt;&lt;a href=&quot;#Usage&quot;&gt;Memory usage&lt;/a&gt;&lt;/li&gt;
   &lt;li&gt;&lt;a href=&quot;#PeakUsage&quot;&gt;Peak memory usage&lt;/a&gt;&lt;/li&gt;
   &lt;li&gt;&lt;a href=&quot;#UsageThreshold&quot;&gt;Usage Threshold&lt;/a&gt;&lt;/li&gt;
   &lt;li&gt;&lt;a href=&quot;#CollectionThreshold&quot;&gt;Collection Usage Threshold&lt;/a&gt;
       (only supported by some &lt;em&gt;garbage-collected&lt;/em&gt; memory pools)&lt;/li&gt;
 &lt;/ul&gt;

 &lt;h4&gt;&lt;a name=&quot;Usage&quot;&gt;1. Memory Usage&lt;/a&gt;&lt;/h4&gt;

 The {@link #getUsage} method provides an estimate
 of the current usage of a memory pool.
 For a garbage-collected memory pool, the amount of used memory
 includes the memory occupied by all objects in the pool
 including both &lt;em&gt;reachable&lt;/em&gt; and &lt;em&gt;unreachable&lt;/em&gt; objects.

 &lt;p&gt;In general, this method is a lightweight operation for getting
 an approximate memory usage.  For some memory pools, for example,
 when objects are not packed contiguously, this method may be
 an expensive operation that requires some computation to determine
 the current memory usage.  An implementation should document when
 this is the case.

 &lt;h4&gt;&lt;a name=&quot;PeakUsage&quot;&gt;2. Peak Memory Usage&lt;/a&gt;&lt;/h4&gt;

 The Java virtual machine maintains the peak memory usage of a memory
 pool since the virtual machine was started or the peak was reset.
 The peak memory usage is returned by the {@link #getPeakUsage} method
 and reset by calling the {@link #resetPeakUsage} method.

 &lt;h4&gt;&lt;a name=&quot;UsageThreshold&quot;&gt;3. Usage Threshold&lt;/a&gt;&lt;/h4&gt;

 Each memory pool has a manageable attribute
 called the &lt;i&gt;usage threshold&lt;/i&gt; which has a default value supplied
 by the Java virtual machine.  The default value is platform-dependent.
 The usage threshold can be set via the
 {@link #setUsageThreshold setUsageThreshold} method.
 If the threshold is set to a positive value, the usage threshold crossing
 checking is enabled in this memory pool.
 If the usage threshold is set to zero, usage
 threshold crossing checking on this memory pool is disabled.
 The {@link MemoryPoolMXBean#isUsageThresholdSupported} method can
 be used to determine if this functionality is supported.
 &lt;p&gt;
 A Java virtual machine performs usage threshold crossing checking on a
 memory pool basis at its best appropriate time, typically,
 at garbage collection time.
 Each memory pool maintains a {@link #getUsageThresholdCount
 usage threshold count} that will get incremented
 every time when the Java virtual machine
 detects that the memory pool usage is crossing the threshold.
 &lt;p&gt;
 This manageable usage threshold attribute is designed for monitoring the
 increasing trend of memory usage with low overhead.
 Usage threshold may not be appropriate for some memory pools.
 For example, a generational garbage collector, a common garbage collection
 algorithm used in many Java virtual machine implementations,
 manages two or more generations segregating objects by age.
 Most of the objects are allocated in
 the &lt;em&gt;youngest generation&lt;/em&gt; (say a nursery memory pool).
 The nursery memory pool is designed to be filled up and
 collecting the nursery memory pool will free most of its memory space
 since it is expected to contain mostly short-lived objects
 and mostly are unreachable at garbage collection time.
 In this case, it is more appropriate for the nursery memory pool
 not to support a usage threshold.  In addition,
 if the cost of an object allocation
 in one memory pool is very low (for example, just atomic pointer exchange),
 the Java virtual machine would probably not support the usage threshold
 for that memory pool since the overhead in comparing the usage with
 the threshold is higher than the cost of object allocation.

 &lt;p&gt;
 The memory usage of the system can be monitored using
 &lt;a href=&quot;#Polling&quot;&gt;polling&lt;/a&gt; or
 &lt;a href=&quot;#ThresholdNotification&quot;&gt;threshold notification&lt;/a&gt; mechanisms.

 &lt;ol type=&quot;a&quot;&gt;
   &lt;li&gt;&lt;a name=&quot;Polling&quot;&gt;&lt;b&gt;Polling&lt;/b&gt;&lt;/a&gt;
       &lt;p&gt;
       An application can continuously monitor its memory usage
       by calling either the {@link #getUsage} method for all
       memory pools or the {@link #isUsageThresholdExceeded} method
       for those memory pools that support a usage threshold.
       Below is example code that has a thread delicated for
       task distribution and processing.  At every interval,
       it will determine if it should receive and process new tasks based
       on its memory usage.  If the memory usage exceeds its usage threshold,
       it will redistribute all outstanding tasks to other VMs and
       stop receiving new tasks until the memory usage returns
       below its usage threshold.

       &lt;pre&gt;
       // Assume the usage threshold is supported for this pool.
       // Set the threshold to myThreshold above which no new tasks
       // should be taken.
       pool.setUsageThreshold(myThreshold);
       ....

       boolean lowMemory = false;
       while (true) {
          if (pool.isUsageThresholdExceeded()) {
              // potential low memory, so redistribute tasks to other VMs
              lowMemory = true;
              redistributeTasks();
              // stop receiving new tasks
              stopReceivingTasks();
          } else {
              if (lowMemory) {
                  // resume receiving tasks
                  lowMemory = false;
                  resumeReceivingTasks();
              }
              // processing outstanding task
              ...
          }
          // sleep for sometime
          try {
              Thread.sleep(sometime);
          } catch (InterruptedException e) {
              ...
          }
       }
       &lt;/pre&gt;

 &lt;hr&gt;
       The above example does not differentiate the case where
       the memory usage has temporarily dropped below the usage threshold
       from the case where the memory usage remains above the threshould
       between two iterations.  The usage threshold count returned by
       the {@link #getUsageThresholdCount} method
       can be used to determine
       if the memory usage has returned below the threshold
       between two polls.
       &lt;p&gt;
       Below shows another example that takes some action if a
       memory pool is under low memory and ignores the memory usage
       changes during the action processing time.

       &lt;pre&gt;
       // Assume the usage threshold is supported for this pool.
       // Set the threshold to myThreshold which determines if
       // the application will take some action under low memory condition.
       pool.setUsageThreshold(myThreshold);

       int prevCrossingCount = 0;
       while (true) {
           // A busy loop to detect when the memory usage
           // has exceeded the threshold.
           while (!pool.isUsageThresholdExceeded() ||
                  pool.getUsageThresholdCount() == prevCrossingCount) {
               try {
                   Thread.sleep(sometime)
               } catch (InterruptException e) {
                   ....
               }
           }

           // Do some processing such as check for memory usage
           // and issue a warning
           ....

           // Gets the current threshold count. The busy loop will then
           // ignore any crossing of threshold happens during the processing.
           prevCrossingCount = pool.getUsageThresholdCount();
       }
       &lt;/pre&gt;&lt;hr&gt;
   &lt;/li&gt;
   &lt;li&gt;&lt;a name=&quot;ThresholdNotification&quot;&gt;&lt;b&gt;Usage Threshold Notifications&lt;/b&gt;&lt;/a&gt;
       &lt;p&gt;
       Usage threshold notification will be emitted by {@link MemoryMXBean}.
       When the Java virtual machine detects that the memory usage of
       a memory pool has reached or exceeded the usage threshold
       the virtual machine will trigger the &lt;tt&gt;MemoryMXBean&lt;/tt&gt; to emit an
       {@link MemoryNotificationInfo#MEMORY_THRESHOLD_EXCEEDED
       usage threshold exceeded notification}.
       Another usage threshold exceeded notification will not be
       generated until the usage has fallen below the threshold and
       then exceeded it again.
       &lt;p&gt;
       Below is an example code implementing the same logic as the
       first example above but using the usage threshold notification
       mechanism to detect low memory conditions instead of polling.
       In this example code, upon receiving notification, the notification
       listener notifies another thread to perform the actual action
       such as to redistribute outstanding tasks, stop receiving tasks,
       or resume receiving tasks.
       The &lt;tt&gt;handleNotification&lt;/tt&gt; method should be designed to
       do a very minimal amount of work and return without delay to avoid
       causing delay in delivering subsequent notifications.  Time-consuming
       actions should be performed by a separate thread.
       The notification listener may be invoked by multiple threads
       concurrently; so the tasks performed by the listener
       should be properly synchronized.

       &lt;pre&gt;
       class MyListener implements javax.management.NotificationListener {
            public void handleNotification(Notification notification, Object handback)  {
                String notifType = notification.getType();
                if (notifType.equals(MemoryNotificationInfo.MEMORY_THRESHOLD_EXCEEDED)) {
                    // potential low memory, notify another thread
                    // to redistribute outstanding tasks to other VMs
                    // and stop receiving new tasks.
                    lowMemory = true;
                    notifyAnotherThread(lowMemory);
                }
            }
       }

       // Register MyListener with MemoryMXBean
       MemoryMXBean mbean = ManagementFactory.getMemoryMXBean();
       NotificationEmitter emitter = (NotificationEmitter) mbean;
       MyListener listener = new MyListener();
       emitter.addNotificationListener(listener, null, null);

       // Assume this pool supports a usage threshold.
       // Set the threshold to myThreshold above which no new tasks
       // should be taken.
       pool.setUsageThreshold(myThreshold);

       // Usage threshold detection is enabled and notification will be
       // handled by MyListener.  Continue for other processing.
       ....

       &lt;/pre&gt;
 &lt;hr&gt;
       &lt;p&gt;
       There is no guarantee about when the &lt;tt&gt;MemoryMXBean&lt;/tt&gt; will emit
       a threshold notification and when the notification will be delivered.
       When a notification listener is invoked, the memory usage of
       the memory pool may have crossed the usage threshold more
       than once.
       The {@link MemoryNotificationInfo#getCount} method returns the number
       of times that the memory usage has crossed the usage threshold
       at the point in time when the notification was constructed.
       It can be compared with the current usage threshold count returned
       by the {@link #getUsageThresholdCount} method to determine if
       such situation has occurred.
   &lt;/li&gt;
 &lt;/ol&gt;

 &lt;h4&gt;&lt;a name=&quot;CollectionThreshold&quot;&gt;4. Collection Usage Threshold&lt;/a&gt;&lt;/h4&gt;

 Collection usage threshold is a manageable attribute only applicable
 to some garbage-collected memory pools.
 After a Java virtual machine has expended effort in reclaiming memory
 space by recycling unused objects in a memory pool at garbage collection
 time, some number of bytes in the memory pools that are garbaged
 collected will still be in use.  The collection usage threshold
 allows a value to be set for this number of bytes such
 that if the threshold is exceeded,
 a {@link MemoryNotificationInfo#MEMORY_THRESHOLD_EXCEEDED
 collection usage threshold exceeded notification}
 will be emitted by the {@link MemoryMXBean}.
 In addition, the {@link #getCollectionUsageThresholdCount
 collection usage threshold count} will then be incremented.

 &lt;p&gt;
 The {@link MemoryPoolMXBean#isCollectionUsageThresholdSupported} method can
 be used to determine if this functionality is supported.

 &lt;p&gt;
 A Java virtual machine performs collection usage threshold checking
 on a memory pool basis.  This checking is enabled if the collection
 usage threshold is set to a positive value.
 If the collection usage threshold is set to zero, this checking
 is disabled on this memory pool.  Default value is zero.
 The Java virtual machine performs the collection usage threshold
 checking at garbage collection time.

 &lt;p&gt;
 Some garbage-collected memory pools may
 choose not to support the collection usage threshold.  For example,
 a memory pool is only managed by a continuous concurrent garbage
 collector.  Objects can be allocated in this memory pool by some thread
 while the unused objects are reclaimed by the concurrent garbage
 collector simultaneously.  Unless there is a well-defined
 garbage collection time which is the best appropriate time
 to check the memory usage, the collection usage threshold should not
 be supported.

 &lt;p&gt;
 The collection usage threshold is designed for monitoring the memory usage
 after the Java virtual machine has expended effort in reclaiming
 memory space.  The collection usage could also be monitored
 by the polling and threshold notification mechanism
 described above for the &lt;a href=&quot;#UsageThreshold&quot;&gt;usage threshold&lt;/a&gt;
 in a similar fashion.</description>
			<attribute name="@see">
				<description>&lt;a href=&quot;../../../javax/management/package-summary.html&quot;&gt;
      JMX Specification.&lt;/a&gt;</description>
			</attribute>
			<attribute name="@see">
				<description>&lt;a href=&quot;package-summary.html#examples&quot;&gt;
      Ways to Access MXBeans&lt;/a&gt;</description>
			</attribute>
			<attribute name="@author">
				<description>Mandy Chung</description>
			</attribute>
			<attribute name="@since">
				<description>1.5</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="getName" returncomment="the name of this memory pool." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the name representing this memory pool.</description>
					<attribute name="@return">
						<description>the name of this memory pool.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getType" returncomment="the type of this memory pool." fulltype="java.lang.management.MemoryType" type="MemoryType">
				<comment>
					<description>Returns the type of this memory pool.

 &lt;p&gt;
 &lt;b&gt;MBeanServer access&lt;/b&gt;:&lt;br&gt;
 The mapped type of &lt;tt&gt;MemoryType&lt;/tt&gt; is &lt;tt&gt;String&lt;/tt&gt;
 and the value is the name of the &lt;tt&gt;MemoryType&lt;/tt&gt;.</description>
					<attribute name="@return">
						<description>the type of this memory pool.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getUsage" returncomment="a {@link MemoryUsage} object; or &lt;tt&gt;null&lt;/tt&gt; if
 this pool not valid." fulltype="java.lang.management.MemoryUsage" type="MemoryUsage">
				<comment>
					<description>Returns an estimate of the memory usage of this memory pool.
 This method returns &lt;tt&gt;null&lt;/tt&gt;
 if this memory pool is not valid (i.e. no longer exists).

 &lt;p&gt;
 This method requests the Java virtual machine to make
 a best-effort estimate of the current memory usage of this
 memory pool. For some memory pools, this method may be an
 expensive operation that requires some computation to determine
 the estimate.  An implementation should document when
 this is the case.

 &lt;p&gt;This method is designed for use in monitoring system
 memory usage and detecting low memory condition.

 &lt;p&gt;
 &lt;b&gt;MBeanServer access&lt;/b&gt;:&lt;br&gt;
 The mapped type of &lt;tt&gt;MemoryUsage&lt;/tt&gt; is
 &lt;tt&gt;CompositeData&lt;/tt&gt; with attributes as specified in
 {@link MemoryUsage#from MemoryUsage}.</description>
					<attribute name="@return">
						<description>a {@link MemoryUsage} object; or &lt;tt&gt;null&lt;/tt&gt; if
 this pool not valid.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getPeakUsage" returncomment="a {@link MemoryUsage} object representing the peak
 memory usage; or &lt;tt&gt;null&lt;/tt&gt; if this pool is not valid." fulltype="java.lang.management.MemoryUsage" type="MemoryUsage">
				<comment>
					<description>Returns the peak memory usage of this memory pool since the
 Java virtual machine was started or since the peak was reset.
 This method returns &lt;tt&gt;null&lt;/tt&gt;
 if this memory pool is not valid (i.e. no longer exists).

 &lt;p&gt;
 &lt;b&gt;MBeanServer access&lt;/b&gt;:&lt;br&gt;
 The mapped type of &lt;tt&gt;MemoryUsage&lt;/tt&gt; is
 &lt;tt&gt;CompositeData&lt;/tt&gt; with attributes as specified in
 {@link MemoryUsage#from MemoryUsage}.</description>
					<attribute name="@return">
						<description>a {@link MemoryUsage} object representing the peak
 memory usage; or &lt;tt&gt;null&lt;/tt&gt; if this pool is not valid.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="resetPeakUsage" fulltype="void" type="void">
				<comment>
					<description>Resets the peak memory usage statistic of this memory pool
 to the current memory usage.</description>
					<attribute name="@throws">
						<description>java.lang.SecurityException if a security manager
         exists and the caller does not have
         ManagementPermission(&quot;control&quot;).</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="isValid" returncomment="&lt;tt&gt;true&lt;/tt&gt; if the memory pool is valid in the running
              Java virtual machine;
         &lt;tt&gt;false&lt;/tt&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Tests if this memory pool is valid in the Java virtual
 machine.  A memory pool becomes invalid once the Java virtual
 machine removes it from the memory system.</description>
					<attribute name="@return">
						<description>&lt;tt&gt;true&lt;/tt&gt; if the memory pool is valid in the running
              Java virtual machine;
         &lt;tt&gt;false&lt;/tt&gt; otherwise.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getMemoryManagerNames" returncomment="an array of &lt;tt&gt;String&lt;/tt&gt; objects, each is the name of
 a memory manager managing this memory pool." fulltype="java.lang.String[]" type="String">
				<comment>
					<description>Returns the name of memory managers that manages this memory pool.
 Each memory pool will be managed by at least one memory manager.</description>
					<attribute name="@return">
						<description>an array of &lt;tt&gt;String&lt;/tt&gt; objects, each is the name of
 a memory manager managing this memory pool.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getUsageThreshold" returncomment="the usage threshold value of this memory pool in bytes." fulltype="long" type="long">
				<comment>
					<description>Returns the usage threshold value of this memory pool in bytes.
 Each memory pool has a platform-dependent default threshold value.
 The current usage threshold can be changed via the
 {@link #setUsageThreshold setUsageThreshold} method.</description>
					<attribute name="@return">
						<description>the usage threshold value of this memory pool in bytes.</description>
					</attribute>
					<attribute name="@throws">
						<description>UnsupportedOperationException if this memory pool
         does not support a usage threshold.</description>
					</attribute>
					<attribute name="@see">
						<description>#isUsageThresholdSupported</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="setUsageThreshold" fulltype="void" type="void">
				<comment>
					<description>Sets the threshold of this memory pool to the given &lt;tt&gt;threshold&lt;/tt&gt;
 value if this memory pool supports the usage threshold.
 The usage threshold crossing checking is enabled in this memory pool
 if the threshold is set to a positive value.
 The usage threshold crossing checking is disabled
 if it is set to zero.</description>
					<attribute name="@param">
						<description>threshold the new threshold value in bytes. Must be non-negative.</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalArgumentException if &lt;tt&gt;threshold&lt;/tt&gt; is negative
         or greater than the maximum amount of memory for
         this memory pool if defined.</description>
					</attribute>
					<attribute name="@throws">
						<description>UnsupportedOperationException if this memory pool
         does not support a usage threshold.</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.SecurityException if a security manager
         exists and the caller does not have
         ManagementPermission(&quot;control&quot;).</description>
					</attribute>
					<attribute name="@see">
						<description>#isUsageThresholdSupported</description>
					</attribute>
					<attribute name="@see">
						<description>&lt;a href=&quot;#UsageThreshold&quot;&gt;Usage threshold&lt;/a&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="threshold" comment="the new threshold value in bytes. Must be non-negative." fulltype="long" type="long" />
				</params>
			</method>
			<method visibility="public" name="isUsageThresholdExceeded" returncomment="&lt;tt&gt;true&lt;/tt&gt; if the memory usage of
 this memory pool reaches or exceeds the threshold value;
 &lt;tt&gt;false&lt;/tt&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Tests if the memory usage of this memory pool
 reaches or exceeds its usage threshold value.</description>
					<attribute name="@return">
						<description>&lt;tt&gt;true&lt;/tt&gt; if the memory usage of
 this memory pool reaches or exceeds the threshold value;
 &lt;tt&gt;false&lt;/tt&gt; otherwise.</description>
					</attribute>
					<attribute name="@throws">
						<description>UnsupportedOperationException if this memory pool
         does not support a usage threshold.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getUsageThresholdCount" returncomment="the number of times that the memory usage
 has crossed its usage threshold value." fulltype="long" type="long">
				<comment>
					<description>Returns the number of times that the memory usage has crossed
 the usage threshold.</description>
					<attribute name="@return">
						<description>the number of times that the memory usage
 has crossed its usage threshold value.</description>
					</attribute>
					<attribute name="@throws">
						<description>UnsupportedOperationException if this memory pool
 does not support a usage threshold.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="isUsageThresholdSupported" returncomment="&lt;tt&gt;true&lt;/tt&gt; if this memory pool supports usage threshold;
 &lt;tt&gt;false&lt;/tt&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Tests if this memory pool supports usage threshold.</description>
					<attribute name="@return">
						<description>&lt;tt&gt;true&lt;/tt&gt; if this memory pool supports usage threshold;
 &lt;tt&gt;false&lt;/tt&gt; otherwise.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getCollectionUsageThreshold" returncomment="the collection usage threshold of this memory pool in bytes." fulltype="long" type="long">
				<comment>
					<description>Returns the collection usage threshold value of this memory pool
 in bytes.  The default value is zero. The collection usage
 threshold can be changed via the
 {@link #setCollectionUsageThreshold setCollectionUsageThreshold} method.</description>
					<attribute name="@return">
						<description>the collection usage threshold of this memory pool in bytes.</description>
					</attribute>
					<attribute name="@throws">
						<description>UnsupportedOperationException if this memory pool
         does not support a collection usage threshold.</description>
					</attribute>
					<attribute name="@see">
						<description>#isCollectionUsageThresholdSupported</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="setCollectionUsageThreshold" fulltype="void" type="void">
				<comment>
					<description>Sets the collection usage threshold of this memory pool to
 the given &lt;tt&gt;threshold&lt;/tt&gt; value.
 When this threshold is set to positive, the Java virtual machine
 will check the memory usage at its best appropriate time after it has
 expended effort in recycling unused objects in this memory pool.
 &lt;p&gt;
 The collection usage threshold crossing checking is enabled
 in this memory pool if the threshold is set to a positive value.
 The collection usage threshold crossing checking is disabled
 if it is set to zero.</description>
					<attribute name="@param">
						<description>threshold the new collection usage threshold value in bytes.
              Must be non-negative.</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalArgumentException if &lt;tt&gt;threshold&lt;/tt&gt; is negative
         or greater than the maximum amount of memory for
         this memory pool if defined.</description>
					</attribute>
					<attribute name="@throws">
						<description>UnsupportedOperationException if this memory pool
         does not support a collection usage threshold.</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.SecurityException if a security manager
         exists and the caller does not have
         ManagementPermission(&quot;control&quot;).</description>
					</attribute>
					<attribute name="@see">
						<description>#isCollectionUsageThresholdSupported</description>
					</attribute>
					<attribute name="@see">
						<description>&lt;a href=&quot;#CollectionThreshold&quot;&gt;Collection usage threshold&lt;/a&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="threshold" comment="the new collection usage threshold value in bytes.
              Must be non-negative." fulltype="long" type="long" />
				</params>
			</method>
			<method visibility="public" name="isCollectionUsageThresholdExceeded" returncomment="&lt;tt&gt;true&lt;/tt&gt; if the memory usage of this memory pool
 reaches or exceeds the collection usage threshold value
 in the most recent collection;
 &lt;tt&gt;false&lt;/tt&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Tests if the memory usage of this memory pool after
 the most recent collection on which the Java virtual
 machine has expended effort has reached or
 exceeded its collection usage threshold.
 This method does not request the Java virtual
 machine to perform any garbage collection other than its normal
 automatic memory management.</description>
					<attribute name="@return">
						<description>&lt;tt&gt;true&lt;/tt&gt; if the memory usage of this memory pool
 reaches or exceeds the collection usage threshold value
 in the most recent collection;
 &lt;tt&gt;false&lt;/tt&gt; otherwise.</description>
					</attribute>
					<attribute name="@throws">
						<description>UnsupportedOperationException if this memory pool
         does not support a usage threshold.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getCollectionUsageThresholdCount" returncomment="the number of times that the memory
 usage has reached or exceeded the collection usage threshold." fulltype="long" type="long">
				<comment>
					<description>Returns the number of times that the Java virtual machine
 has detected that the memory usage has reached or
 exceeded the collection usage threshold.</description>
					<attribute name="@return">
						<description>the number of times that the memory
 usage has reached or exceeded the collection usage threshold.</description>
					</attribute>
					<attribute name="@throws">
						<description>UnsupportedOperationException if this memory pool
         does not support a collection usage threshold.</description>
					</attribute>
					<attribute name="@see">
						<description>#isCollectionUsageThresholdSupported</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getCollectionUsage" returncomment="a {@link MemoryUsage} representing the memory usage of
 this memory pool after the Java virtual machine most recently
 expended effort in recycling unused objects;
 &lt;tt&gt;null&lt;/tt&gt; if this method is not supported." fulltype="java.lang.management.MemoryUsage" type="MemoryUsage">
				<comment>
					<description>Returns the memory usage after the Java virtual machine
 most recently expended effort in recycling unused objects
 in this memory pool.
 This method does not request the Java virtual
 machine to perform any garbage collection other than its normal
 automatic memory management.
 This method returns &lt;tt&gt;null&lt;/tt&gt; if the Java virtual
 machine does not support this method.

 &lt;p&gt;
 &lt;b&gt;MBeanServer access&lt;/b&gt;:&lt;br&gt;
 The mapped type of &lt;tt&gt;MemoryUsage&lt;/tt&gt; is
 &lt;tt&gt;CompositeData&lt;/tt&gt; with attributes as specified in
 {@link MemoryUsage#from MemoryUsage}.</description>
					<attribute name="@return">
						<description>a {@link MemoryUsage} representing the memory usage of
 this memory pool after the Java virtual machine most recently
 expended effort in recycling unused objects;
 &lt;tt&gt;null&lt;/tt&gt; if this method is not supported.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="isCollectionUsageThresholdSupported" returncomment="&lt;tt&gt;true&lt;/tt&gt; if this memory pool supports the
 collection usage threshold; &lt;tt&gt;false&lt;/tt&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Tests if this memory pool supports a collection usage threshold.</description>
					<attribute name="@return">
						<description>&lt;tt&gt;true&lt;/tt&gt; if this memory pool supports the
 collection usage threshold; &lt;tt&gt;false&lt;/tt&gt; otherwise.</description>
					</attribute>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="java.lang.management" interface="true" fulltype="java.lang.management.ClassLoadingMXBean" type="ClassLoadingMXBean">
		<comment>
			<description>The management interface for the class loading system of
 the Java virtual machine.

 &lt;p&gt; A Java virtual machine has a single instance of the implementation
 class of this interface.  This instance implementing this interface is
 an &lt;a href=&quot;ManagementFactory.html#MXBean&quot;&gt;MXBean&lt;/a&gt;
 that can be obtained by calling
 the {@link ManagementFactory#getClassLoadingMXBean} method or
 from the {@link ManagementFactory#getPlatformMBeanServer
 platform &lt;tt&gt;MBeanServer&lt;/tt&gt;} method.

 &lt;p&gt;The &lt;tt&gt;ObjectName&lt;/tt&gt; for uniquely identifying the MXBean for
 the class loading system within an &lt;tt&gt;MBeanServer&lt;/tt&gt; is:
 &lt;blockquote&gt;
 {@link ManagementFactory#CLASS_LOADING_MXBEAN_NAME
        &lt;tt&gt;java.lang:type=ClassLoading&lt;/tt&gt;}
 &lt;/blockquote&gt;</description>
			<attribute name="@see">
				<description>&lt;a href=&quot;../../../javax/management/package-summary.html&quot;&gt;
      JMX Specification.&lt;/a&gt;</description>
			</attribute>
			<attribute name="@see">
				<description>&lt;a href=&quot;package-summary.html#examples&quot;&gt;
      Ways to Access MXBeans&lt;/a&gt;</description>
			</attribute>
			<attribute name="@author">
				<description>Mandy Chung</description>
			</attribute>
			<attribute name="@since">
				<description>1.5</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="getTotalLoadedClassCount" returncomment="the total number of classes loaded." fulltype="long" type="long">
				<comment>
					<description>Returns the total number of classes that have been loaded since
 the Java virtual machine has started execution.</description>
					<attribute name="@return">
						<description>the total number of classes loaded.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getLoadedClassCount" returncomment="the number of currently loaded classes." fulltype="int" type="int">
				<comment>
					<description>Returns the number of classes that are currently loaded in the
 Java virtual machine.</description>
					<attribute name="@return">
						<description>the number of currently loaded classes.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getUnloadedClassCount" returncomment="the total number of unloaded classes." fulltype="long" type="long">
				<comment>
					<description>Returns the total number of classes unloaded since the Java virtual machine
 has started execution.</description>
					<attribute name="@return">
						<description>the total number of unloaded classes.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="isVerbose" returncomment="&lt;tt&gt;true&lt;/tt&gt; if the verbose output for the class loading
 system is enabled; &lt;tt&gt;false&lt;/tt&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Tests if the verbose output for the class loading system is enabled.</description>
					<attribute name="@return">
						<description>&lt;tt&gt;true&lt;/tt&gt; if the verbose output for the class loading
 system is enabled; &lt;tt&gt;false&lt;/tt&gt; otherwise.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="setVerbose" fulltype="void" type="void">
				<comment>
					<description>Enables or disables the verbose output for the class loading
 system.  The verbose output information and the output stream
 to which the verbose information is emitted are implementation
 dependent.  Typically, a Java virtual machine implementation
 prints a message each time a class file is loaded.

 &lt;p&gt;This method can be called by multiple threads concurrently.
 Each invocation of this method enables or disables the verbose
 output globally.</description>
					<attribute name="@param">
						<description>value &lt;tt&gt;true&lt;/tt&gt; to enable the verbose output;
              &lt;tt&gt;false&lt;/tt&gt; to disable.</description>
					</attribute>
					<attribute name="@exception">
						<description>java.lang.SecurityException if a security manager
             exists and the caller does not have
             ManagementPermission(&quot;control&quot;).</description>
					</attribute>
				</comment>
				<params>
					<param name="value" comment="&lt;tt&gt;true&lt;/tt&gt; to enable the verbose output;
              &lt;tt&gt;false&lt;/tt&gt; to disable." fulltype="boolean" type="boolean" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="java.lang.management" interface="true" fulltype="java.lang.management.RuntimeMXBean" type="RuntimeMXBean">
		<comment>
			<description>The management interface for the runtime system of
 the Java virtual machine.

 &lt;p&gt; A Java virtual machine has a single instance of the implementation
 class of this interface.  This instance implementing this interface is
 an &lt;a href=&quot;ManagementFactory.html#MXBean&quot;&gt;MXBean&lt;/a&gt;
 that can be obtained by calling
 the {@link ManagementFactory#getRuntimeMXBean} method or
 from the {@link ManagementFactory#getPlatformMBeanServer
 platform &lt;tt&gt;MBeanServer&lt;/tt&gt;} method.

 &lt;p&gt;The &lt;tt&gt;ObjectName&lt;/tt&gt; for uniquely identifying the MXBean for
 the runtime system within an MBeanServer is:
 &lt;blockquote&gt;
    {@link ManagementFactory#RUNTIME_MXBEAN_NAME
           &lt;tt&gt;java.lang:type=Runtime&lt;/tt&gt;}
 &lt;/blockquote&gt;

 &lt;p&gt; This interface defines several convenient methods for accessing
 system properties about the Java virtual machine.</description>
			<attribute name="@see">
				<description>&lt;a href=&quot;../../../javax/management/package-summary.html&quot;&gt;
      JMX Specification.&lt;/a&gt;</description>
			</attribute>
			<attribute name="@see">
				<description>&lt;a href=&quot;package-summary.html#examples&quot;&gt;
      Ways to Access MXBeans&lt;/a&gt;</description>
			</attribute>
			<attribute name="@author">
				<description>Mandy Chung</description>
			</attribute>
			<attribute name="@since">
				<description>1.5</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="getName" returncomment="the name representing the running Java virtual machine." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the name representing the running Java virtual machine.
 The returned name string can be any arbitrary string and
 a Java virtual machine implementation can choose
 to embed platform-specific useful information in the
 returned name string.  Each running virtual machine could have
 a different name.</description>
					<attribute name="@return">
						<description>the name representing the running Java virtual machine.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getVmName" returncomment="the Java virtual machine implementation name." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the Java virtual machine implementation name.
 This method is equivalent to {@link System#getProperty
 System.getProperty(&quot;java.vm.name&quot;)}.</description>
					<attribute name="@return">
						<description>the Java virtual machine implementation name.</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.SecurityException
     if a security manager exists and its
     &lt;code&gt;checkPropertiesAccess&lt;/code&gt; method doesn&apos;t allow access
     to this system property.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.SecurityManager#checkPropertyAccess(java.lang.String)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.System#getProperty</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getVmVendor" returncomment="the Java virtual machine implementation vendor." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the Java virtual machine implementation vendor.
 This method is equivalent to {@link System#getProperty
 System.getProperty(&quot;java.vm.vendor&quot;)}.</description>
					<attribute name="@return">
						<description>the Java virtual machine implementation vendor.</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.SecurityException
     if a security manager exists and its
     &lt;code&gt;checkPropertiesAccess&lt;/code&gt; method doesn&apos;t allow access
     to this system property.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.SecurityManager#checkPropertyAccess(java.lang.String)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.System#getProperty</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getVmVersion" returncomment="the Java virtual machine implementation version." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the Java virtual machine implementation version.
 This method is equivalent to {@link System#getProperty
 System.getProperty(&quot;java.vm.version&quot;)}.</description>
					<attribute name="@return">
						<description>the Java virtual machine implementation version.</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.SecurityException
     if a security manager exists and its
     &lt;code&gt;checkPropertiesAccess&lt;/code&gt; method doesn&apos;t allow access
     to this system property.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.SecurityManager#checkPropertyAccess(java.lang.String)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.System#getProperty</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getSpecName" returncomment="the Java virtual machine specification name." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the Java virtual machine specification name.
 This method is equivalent to {@link System#getProperty
 System.getProperty(&quot;java.vm.specification.name&quot;)}.</description>
					<attribute name="@return">
						<description>the Java virtual machine specification name.</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.SecurityException
     if a security manager exists and its
     &lt;code&gt;checkPropertiesAccess&lt;/code&gt; method doesn&apos;t allow access
     to this system property.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.SecurityManager#checkPropertyAccess(java.lang.String)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.System#getProperty</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getSpecVendor" returncomment="the Java virtual machine specification vendor." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the Java virtual machine specification vendor.
 This method is equivalent to {@link System#getProperty
 System.getProperty(&quot;java.vm.specification.vendor&quot;)}.</description>
					<attribute name="@return">
						<description>the Java virtual machine specification vendor.</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.SecurityException
     if a security manager exists and its
     &lt;code&gt;checkPropertiesAccess&lt;/code&gt; method doesn&apos;t allow access
     to this system property.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.SecurityManager#checkPropertyAccess(java.lang.String)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.System#getProperty</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getSpecVersion" returncomment="the Java virtual machine specification version." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the Java virtual machine specification version.
 This method is equivalent to {@link System#getProperty
 System.getProperty(&quot;java.vm.specification.version&quot;)}.</description>
					<attribute name="@return">
						<description>the Java virtual machine specification version.</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.SecurityException
     if a security manager exists and its
     &lt;code&gt;checkPropertiesAccess&lt;/code&gt; method doesn&apos;t allow access
     to this system property.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.SecurityManager#checkPropertyAccess(java.lang.String)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.System#getProperty</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getManagementSpecVersion" returncomment="the version of the specification for the management interface
 implemented by the running Java virtual machine." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the version of the specification for the management interface
 implemented by the running Java virtual machine.</description>
					<attribute name="@return">
						<description>the version of the specification for the management interface
 implemented by the running Java virtual machine.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getClassPath" returncomment="the Java class path." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the Java class path that is used by the system class loader
 to search for class files.
 This method is equivalent to {@link System#getProperty
 System.getProperty(&quot;java.class.path&quot;)}.

 &lt;p&gt; Multiple paths in the Java class path are separated by the
 path separator character of the platform of the Java virtual machine
 being monitored.</description>
					<attribute name="@return">
						<description>the Java class path.</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.SecurityException
     if a security manager exists and its
     &lt;code&gt;checkPropertiesAccess&lt;/code&gt; method doesn&apos;t allow access
     to this system property.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.SecurityManager#checkPropertyAccess(java.lang.String)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.System#getProperty</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getLibraryPath" returncomment="the Java library path." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the Java library path.
 This method is equivalent to {@link System#getProperty
 System.getProperty(&quot;java.library.path&quot;)}.

 &lt;p&gt; Multiple paths in the Java library path are separated by the
 path separator character of the platform of the Java virtual machine
 being monitored.</description>
					<attribute name="@return">
						<description>the Java library path.</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.SecurityException
     if a security manager exists and its
     &lt;code&gt;checkPropertiesAccess&lt;/code&gt; method doesn&apos;t allow access
     to this system property.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.SecurityManager#checkPropertyAccess(java.lang.String)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.System#getProperty</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="isBootClassPathSupported" returncomment="&lt;tt&gt;true&lt;/tt&gt; if the Java virtual machine supports the
 class path mechanism; &lt;tt&gt;false&lt;/tt&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Tests if the Java virtual machine supports the boot class path
 mechanism used by the bootstrap class loader to search for class
 files.</description>
					<attribute name="@return">
						<description>&lt;tt&gt;true&lt;/tt&gt; if the Java virtual machine supports the
 class path mechanism; &lt;tt&gt;false&lt;/tt&gt; otherwise.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getBootClassPath" returncomment="the boot class path." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the boot class path that is used by the bootstrap class loader
 to search for class files.

 &lt;p&gt; Multiple paths in the boot class path are separated by the
 path separator character of the platform on which the Java
 virtual machine is running.

 &lt;p&gt;A Java virtual machine implementation may not support
 the boot class path mechanism for the bootstrap class loader
 to search for class files.
 The {@link #isBootClassPathSupported} method can be used
 to determine if the Java virtual machine supports this method.</description>
					<attribute name="@return">
						<description>the boot class path.</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.UnsupportedOperationException
     if the Java virtual machine does not support this operation.</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.SecurityException
     if a security manager exists and the caller does not have
     ManagementPermission(&quot;monitor&quot;).</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getInputArguments" returncomment="a list of &lt;tt&gt;String&lt;/tt&gt; objects; each element
 is an argument passed to the Java virtual machine." fulltype="java.util.List" type="List">
				<comment>
					<description>Returns the input arguments passed to the Java virtual machine
 which does not include the arguments to the &lt;tt&gt;main&lt;/tt&gt; method.
 This method returns an empty list if there is no input argument
 to the Java virtual machine.
 &lt;p&gt;
 Some Java virtual machine implementations may take input arguments
 from multiple different sources: for examples, arguments passed from
 the application that launches the Java virtual machine such as
 the &apos;java&apos; command, environment variables, configuration files, etc.
 &lt;p&gt;
 Typically, not all command-line options to the &apos;java&apos; command
 are passed to the Java virtual machine.
 Thus, the returned input arguments may not
 include all command-line options.

 &lt;p&gt;
 &lt;b&gt;MBeanServer access&lt;/b&gt;:&lt;br&gt;
 The mapped type of &lt;tt&gt;List&lt;String&gt;&lt;/tt&gt; is &lt;tt&gt;String[]&lt;/tt&gt;.</description>
					<attribute name="@return">
						<description>a list of &lt;tt&gt;String&lt;/tt&gt; objects; each element
 is an argument passed to the Java virtual machine.</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.SecurityException
     if a security manager exists and the caller does not have
     ManagementPermission(&quot;monitor&quot;).</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getUptime" returncomment="uptime of the Java virtual machine in milliseconds." fulltype="long" type="long">
				<comment>
					<description>Returns the uptime of the Java virtual machine in milliseconds.</description>
					<attribute name="@return">
						<description>uptime of the Java virtual machine in milliseconds.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getStartTime" returncomment="start time of the Java virtual machine in milliseconds." fulltype="long" type="long">
				<comment>
					<description>Returns the start time of the Java virtual machine in milliseconds.
 This method returns the approximate time when the Java virtual
 machine started.</description>
					<attribute name="@return">
						<description>start time of the Java virtual machine in milliseconds.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getSystemProperties" returncomment="a map of names and values of all system properties." fulltype="java.util.Map" type="Map">
				<comment>
					<description>Returns a map of names and values of all system properties.
 This method calls {@link System#getProperties} to get all
 system properties.  Properties whose name or value is not
 a &lt;tt&gt;String&lt;/tt&gt; are omitted.

 &lt;p&gt;
 &lt;b&gt;MBeanServer access&lt;/b&gt;:&lt;br&gt;
 The mapped type of &lt;tt&gt;Map&lt;String,String&gt;&lt;/tt&gt; is
 {@link javax.management.openmbean.TabularData TabularData}
 with two items in each row as follows:
 &lt;blockquote&gt;
 &lt;table border&gt;
 &lt;tr&gt;
   &lt;th&gt;Item Name&lt;/th&gt;
   &lt;th&gt;Item Type&lt;/th&gt;
   &lt;/tr&gt;
 &lt;tr&gt;
   &lt;td&gt;&lt;tt&gt;key&lt;/tt&gt;&lt;/td&gt;
   &lt;td&gt;&lt;tt&gt;String&lt;/tt&gt;&lt;/td&gt;
   &lt;/tr&gt;
 &lt;tr&gt;
   &lt;td&gt;&lt;tt&gt;value&lt;/tt&gt;&lt;/td&gt;
   &lt;td&gt;&lt;tt&gt;String&lt;/tt&gt;&lt;/td&gt;
   &lt;/tr&gt;
 &lt;/table&gt;
 &lt;/blockquote&gt;</description>
					<attribute name="@return">
						<description>a map of names and values of all system properties.</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.SecurityException
     if a security manager exists and its
     &lt;code&gt;checkPropertiesAccess&lt;/code&gt; method doesn&apos;t allow access
     to the system properties.</description>
					</attribute>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass final="true" superclass="AbstractStringBuilder" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.AbstractStringBuilder" fulltype="java.lang.StringBuilder" type="StringBuilder">
		<implements>
			<interface fulltype="java.io.Serializable" type="Serializable" />
			<interface fulltype="java.lang.CharSequence" type="CharSequence" />
		</implements>
		<comment>
			<description>A mutable sequence of characters.  This class provides an API compatible
 with &lt;code&gt;StringBuffer&lt;/code&gt;, but with no guarantee of synchronization.
 This class is designed for use as a drop-in replacement for
 &lt;code&gt;StringBuffer&lt;/code&gt; in places where the string buffer was being
 used by a single thread (as is generally the case).   Where possible,
 it is recommended that this class be used in preference to
 &lt;code&gt;StringBuffer&lt;/code&gt; as it will be faster under most implementations.

 &lt;p&gt;The principal operations on a &lt;code&gt;StringBuilder&lt;/code&gt; are the
 &lt;code&gt;append&lt;/code&gt; and &lt;code&gt;insert&lt;/code&gt; methods, which are
 overloaded so as to accept data of any type. Each effectively
 converts a given datum to a string and then appends or inserts the
 characters of that string to the string builder. The
 &lt;code&gt;append&lt;/code&gt; method always adds these characters at the end
 of the builder; the &lt;code&gt;insert&lt;/code&gt; method adds the characters at
 a specified point.
 &lt;p&gt;
 For example, if &lt;code&gt;z&lt;/code&gt; refers to a string builder object
 whose current contents are &quot;&lt;code&gt;start&lt;/code&gt;&quot;, then
 the method call &lt;code&gt;z.append(&quot;le&quot;)&lt;/code&gt; would cause the string
 builder to contain &quot;&lt;code&gt;startle&lt;/code&gt;&quot;, whereas
 &lt;code&gt;z.insert(4, &quot;le&quot;)&lt;/code&gt; would alter the string builder to
 contain &quot;&lt;code&gt;starlet&lt;/code&gt;&quot;.
 &lt;p&gt;
 In general, if sb refers to an instance of a &lt;code&gt;StringBuilder&lt;/code&gt;,
 then &lt;code&gt;sb.append(x)&lt;/code&gt; has the same effect as
 &lt;code&gt;sb.insert(sb.length(),&amp;nbsp;x)&lt;/code&gt;.

 Every string builder has a capacity. As long as the length of the
 character sequence contained in the string builder does not exceed
 the capacity, it is not necessary to allocate a new internal
 buffer. If the internal buffer overflows, it is automatically made larger.

 &lt;p&gt;Instances of &lt;code&gt;StringBuilder&lt;/code&gt; are not safe for
 use by multiple threads. If such synchronization is required then it is
 recommended that {@link java.lang.StringBuffer} be used.</description>
			<attribute name="@author">
				<description>Michael McCloskey</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.StringBuffer</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.String</description>
			</attribute>
			<attribute name="@since">
				<description>1.5</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="4383685877147921099" visibility="package-private" name="serialVersionUID" constexpr="4383685877147921099L" fulltype="long" type="long">
				<comment>
					<description>use serialVersionUID for interoperability</description>
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="public" name="StringBuilder">
				<comment>
					<description>Constructs a string builder with no characters in it and an
 initial capacity of 16 characters.</description>
				</comment>
			</constructor>
			<constructor visibility="public" name="StringBuilder">
				<comment>
					<description>Constructs a string builder with no characters in it and an
 initial capacity specified by the &lt;code&gt;capacity&lt;/code&gt; argument.</description>
					<attribute name="@param">
						<description>capacity  the initial capacity.</description>
					</attribute>
					<attribute name="@throws">
						<description>NegativeArraySizeException  if the &lt;code&gt;capacity&lt;/code&gt;
               argument is less than &lt;code&gt;0&lt;/code&gt;.</description>
					</attribute>
				</comment>
				<params>
					<param name="capacity" comment="the initial capacity." fulltype="int" type="int" />
				</params>
			</constructor>
			<constructor visibility="public" name="StringBuilder">
				<comment>
					<description>Constructs a string builder initialized to the contents of the
 specified string. The initial capacity of the string builder is
 &lt;code&gt;16&lt;/code&gt; plus the length of the string argument.</description>
					<attribute name="@param">
						<description>str   the initial contents of the buffer.</description>
					</attribute>
					<attribute name="@throws">
						<description>NullPointerException if &lt;code&gt;str&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="str" comment="the initial contents of the buffer." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="StringBuilder">
				<comment>
					<description>Constructs a string builder that contains the same characters
 as the specified &lt;code&gt;CharSequence&lt;/code&gt;. The initial capacity of
 the string builder is &lt;code&gt;16&lt;/code&gt; plus the length of the
 &lt;code&gt;CharSequence&lt;/code&gt; argument.</description>
					<attribute name="@param">
						<description>seq   the sequence to copy.</description>
					</attribute>
					<attribute name="@throws">
						<description>NullPointerException if &lt;code&gt;seq&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="seq" comment="the sequence to copy." fulltype="java.lang.CharSequence" type="CharSequence" />
				</params>
			</constructor>
			<method visibility="public" name="append" fulltype="java.lang.StringBuilder" type="StringBuilder">
				<comment>
					<attribute name="@see">
						<description>java.lang.String#valueOf(java.lang.Object)</description>
					</attribute>
					<attribute name="@see">
						<description>#append(java.lang.String)</description>
					</attribute>
				</comment>
				<params>
					<param name="obj" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="append" fulltype="java.lang.StringBuilder" type="StringBuilder">
				<params>
					<param name="str" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="private" name="append" fulltype="java.lang.StringBuilder" type="StringBuilder">
				<params>
					<param name="sb" fulltype="java.lang.StringBuilder" type="StringBuilder" />
				</params>
			</method>
			<method visibility="public" name="append" returncomment="a reference to this object." fulltype="java.lang.StringBuilder" type="StringBuilder">
				<comment>
					<description>Appends the specified &lt;tt&gt;StringBuffer&lt;/tt&gt; to this sequence.
 &lt;p&gt;
 The characters of the &lt;tt&gt;StringBuffer&lt;/tt&gt; argument are appended,
 in order, to this sequence, increasing the
 length of this sequence by the length of the argument.
 If &lt;tt&gt;sb&lt;/tt&gt; is &lt;tt&gt;null&lt;/tt&gt;, then the four characters
 &lt;tt&gt;&quot;null&quot;&lt;/tt&gt; are appended to this sequence.
 &lt;p&gt;
 Let &lt;i&gt;n&lt;/i&gt; be the length of this character sequence just prior to
 execution of the &lt;tt&gt;append&lt;/tt&gt; method. Then the character at index
 &lt;i&gt;k&lt;/i&gt; in the new character sequence is equal to the character at
 index &lt;i&gt;k&lt;/i&gt; in the old character sequence, if &lt;i&gt;k&lt;/i&gt; is less than
 &lt;i&gt;n&lt;/i&gt;; otherwise, it is equal to the character at index &lt;i&gt;k-n&lt;/i&gt;
 in the argument &lt;code&gt;sb&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>sb   the &lt;tt&gt;StringBuffer&lt;/tt&gt; to append.</description>
					</attribute>
					<attribute name="@return">
						<description>a reference to this object.</description>
					</attribute>
				</comment>
				<params>
					<param name="sb" comment="the &lt;tt&gt;StringBuffer&lt;/tt&gt; to append." fulltype="java.lang.StringBuffer" type="StringBuffer" />
				</params>
			</method>
			<method visibility="public" name="append" fulltype="java.lang.StringBuilder" type="StringBuilder">
				<comment>
					<attribute name="@throws">
						<description>IndexOutOfBoundsException {@inheritDoc}</description>
					</attribute>
				</comment>
				<params>
					<param name="s" fulltype="java.lang.CharSequence" type="CharSequence" />
				</params>
			</method>
			<method visibility="public" name="append" fulltype="java.lang.StringBuilder" type="StringBuilder">
				<comment>
					<attribute name="@throws">
						<description>IndexOutOfBoundsException {@inheritDoc}</description>
					</attribute>
				</comment>
				<params>
					<param name="s" fulltype="java.lang.CharSequence" type="CharSequence" />
					<param name="start" fulltype="int" type="int" />
					<param name="end" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="append" fulltype="java.lang.StringBuilder" type="StringBuilder">
				<params>
					<param name="str" fulltype="char[]" type="char" />
				</params>
			</method>
			<method visibility="public" name="append" fulltype="java.lang.StringBuilder" type="StringBuilder">
				<params>
					<param name="str" fulltype="char[]" type="char" />
					<param name="offset" fulltype="int" type="int" />
					<param name="len" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="append" fulltype="java.lang.StringBuilder" type="StringBuilder">
				<comment>
					<attribute name="@see">
						<description>java.lang.String#valueOf(boolean)</description>
					</attribute>
					<attribute name="@see">
						<description>#append(java.lang.String)</description>
					</attribute>
				</comment>
				<params>
					<param name="b" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="append" fulltype="java.lang.StringBuilder" type="StringBuilder">
				<params>
					<param name="c" fulltype="char" type="char" />
				</params>
			</method>
			<method visibility="public" name="append" fulltype="java.lang.StringBuilder" type="StringBuilder">
				<comment>
					<attribute name="@see">
						<description>java.lang.String#valueOf(int)</description>
					</attribute>
					<attribute name="@see">
						<description>#append(java.lang.String)</description>
					</attribute>
				</comment>
				<params>
					<param name="i" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="append" fulltype="java.lang.StringBuilder" type="StringBuilder">
				<comment>
					<attribute name="@see">
						<description>java.lang.String#valueOf(long)</description>
					</attribute>
					<attribute name="@see">
						<description>#append(java.lang.String)</description>
					</attribute>
				</comment>
				<params>
					<param name="lng" fulltype="long" type="long" />
				</params>
			</method>
			<method visibility="public" name="append" fulltype="java.lang.StringBuilder" type="StringBuilder">
				<comment>
					<attribute name="@see">
						<description>java.lang.String#valueOf(float)</description>
					</attribute>
					<attribute name="@see">
						<description>#append(java.lang.String)</description>
					</attribute>
				</comment>
				<params>
					<param name="f" fulltype="float" type="float" />
				</params>
			</method>
			<method visibility="public" name="append" fulltype="java.lang.StringBuilder" type="StringBuilder">
				<comment>
					<attribute name="@see">
						<description>java.lang.String#valueOf(double)</description>
					</attribute>
					<attribute name="@see">
						<description>#append(java.lang.String)</description>
					</attribute>
				</comment>
				<params>
					<param name="d" fulltype="double" type="double" />
				</params>
			</method>
			<method visibility="public" name="appendCodePoint" fulltype="java.lang.StringBuilder" type="StringBuilder">
				<comment>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="codePoint" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="delete" fulltype="java.lang.StringBuilder" type="StringBuilder">
				<comment>
					<attribute name="@throws">
						<description>StringIndexOutOfBoundsException {@inheritDoc}</description>
					</attribute>
				</comment>
				<params>
					<param name="start" fulltype="int" type="int" />
					<param name="end" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="deleteCharAt" fulltype="java.lang.StringBuilder" type="StringBuilder">
				<comment>
					<attribute name="@throws">
						<description>StringIndexOutOfBoundsException {@inheritDoc}</description>
					</attribute>
				</comment>
				<params>
					<param name="index" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="replace" fulltype="java.lang.StringBuilder" type="StringBuilder">
				<comment>
					<attribute name="@throws">
						<description>StringIndexOutOfBoundsException {@inheritDoc}</description>
					</attribute>
				</comment>
				<params>
					<param name="start" fulltype="int" type="int" />
					<param name="end" fulltype="int" type="int" />
					<param name="str" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="insert" fulltype="java.lang.StringBuilder" type="StringBuilder">
				<comment>
					<attribute name="@throws">
						<description>StringIndexOutOfBoundsException {@inheritDoc}</description>
					</attribute>
				</comment>
				<params>
					<param name="index" fulltype="int" type="int" />
					<param name="str" fulltype="char[]" type="char" />
					<param name="offset" fulltype="int" type="int" />
					<param name="len" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="insert" fulltype="java.lang.StringBuilder" type="StringBuilder">
				<comment>
					<attribute name="@throws">
						<description>StringIndexOutOfBoundsException {@inheritDoc}</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.String#valueOf(java.lang.Object)</description>
					</attribute>
					<attribute name="@see">
						<description>#insert(int, java.lang.String)</description>
					</attribute>
					<attribute name="@see">
						<description>#length()</description>
					</attribute>
				</comment>
				<params>
					<param name="offset" fulltype="int" type="int" />
					<param name="obj" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="insert" fulltype="java.lang.StringBuilder" type="StringBuilder">
				<comment>
					<attribute name="@throws">
						<description>StringIndexOutOfBoundsException {@inheritDoc}</description>
					</attribute>
					<attribute name="@see">
						<description>#length()</description>
					</attribute>
				</comment>
				<params>
					<param name="offset" fulltype="int" type="int" />
					<param name="str" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="insert" fulltype="java.lang.StringBuilder" type="StringBuilder">
				<comment>
					<attribute name="@throws">
						<description>StringIndexOutOfBoundsException {@inheritDoc}</description>
					</attribute>
				</comment>
				<params>
					<param name="offset" fulltype="int" type="int" />
					<param name="str" fulltype="char[]" type="char" />
				</params>
			</method>
			<method visibility="public" name="insert" fulltype="java.lang.StringBuilder" type="StringBuilder">
				<comment>
					<attribute name="@throws">
						<description>IndexOutOfBoundsException {@inheritDoc}</description>
					</attribute>
				</comment>
				<params>
					<param name="dstOffset" fulltype="int" type="int" />
					<param name="s" fulltype="java.lang.CharSequence" type="CharSequence" />
				</params>
			</method>
			<method visibility="public" name="insert" fulltype="java.lang.StringBuilder" type="StringBuilder">
				<comment>
					<attribute name="@throws">
						<description>IndexOutOfBoundsException {@inheritDoc}</description>
					</attribute>
				</comment>
				<params>
					<param name="dstOffset" fulltype="int" type="int" />
					<param name="s" fulltype="java.lang.CharSequence" type="CharSequence" />
					<param name="start" fulltype="int" type="int" />
					<param name="end" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="insert" fulltype="java.lang.StringBuilder" type="StringBuilder">
				<comment>
					<attribute name="@throws">
						<description>StringIndexOutOfBoundsException {@inheritDoc}</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.String#valueOf(boolean)</description>
					</attribute>
					<attribute name="@see">
						<description>#insert(int, java.lang.String)</description>
					</attribute>
					<attribute name="@see">
						<description>#length()</description>
					</attribute>
				</comment>
				<params>
					<param name="offset" fulltype="int" type="int" />
					<param name="b" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="insert" fulltype="java.lang.StringBuilder" type="StringBuilder">
				<comment>
					<attribute name="@throws">
						<description>IndexOutOfBoundsException {@inheritDoc}</description>
					</attribute>
					<attribute name="@see">
						<description>#length()</description>
					</attribute>
				</comment>
				<params>
					<param name="offset" fulltype="int" type="int" />
					<param name="c" fulltype="char" type="char" />
				</params>
			</method>
			<method visibility="public" name="insert" fulltype="java.lang.StringBuilder" type="StringBuilder">
				<comment>
					<attribute name="@throws">
						<description>StringIndexOutOfBoundsException {@inheritDoc}</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.String#valueOf(int)</description>
					</attribute>
					<attribute name="@see">
						<description>#insert(int, java.lang.String)</description>
					</attribute>
					<attribute name="@see">
						<description>#length()</description>
					</attribute>
				</comment>
				<params>
					<param name="offset" fulltype="int" type="int" />
					<param name="i" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="insert" fulltype="java.lang.StringBuilder" type="StringBuilder">
				<comment>
					<attribute name="@throws">
						<description>StringIndexOutOfBoundsException {@inheritDoc}</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.String#valueOf(long)</description>
					</attribute>
					<attribute name="@see">
						<description>#insert(int, java.lang.String)</description>
					</attribute>
					<attribute name="@see">
						<description>#length()</description>
					</attribute>
				</comment>
				<params>
					<param name="offset" fulltype="int" type="int" />
					<param name="l" fulltype="long" type="long" />
				</params>
			</method>
			<method visibility="public" name="insert" fulltype="java.lang.StringBuilder" type="StringBuilder">
				<comment>
					<attribute name="@throws">
						<description>StringIndexOutOfBoundsException {@inheritDoc}</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.String#valueOf(float)</description>
					</attribute>
					<attribute name="@see">
						<description>#insert(int, java.lang.String)</description>
					</attribute>
					<attribute name="@see">
						<description>#length()</description>
					</attribute>
				</comment>
				<params>
					<param name="offset" fulltype="int" type="int" />
					<param name="f" fulltype="float" type="float" />
				</params>
			</method>
			<method visibility="public" name="insert" fulltype="java.lang.StringBuilder" type="StringBuilder">
				<comment>
					<attribute name="@throws">
						<description>StringIndexOutOfBoundsException {@inheritDoc}</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.String#valueOf(double)</description>
					</attribute>
					<attribute name="@see">
						<description>#insert(int, java.lang.String)</description>
					</attribute>
					<attribute name="@see">
						<description>#length()</description>
					</attribute>
				</comment>
				<params>
					<param name="offset" fulltype="int" type="int" />
					<param name="d" fulltype="double" type="double" />
				</params>
			</method>
			<method visibility="public" name="indexOf" fulltype="int" type="int">
				<comment>
					<attribute name="@throws">
						<description>NullPointerException {@inheritDoc}</description>
					</attribute>
				</comment>
				<params>
					<param name="str" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="indexOf" fulltype="int" type="int">
				<comment>
					<attribute name="@throws">
						<description>NullPointerException {@inheritDoc}</description>
					</attribute>
				</comment>
				<params>
					<param name="str" fulltype="java.lang.String" type="String" />
					<param name="fromIndex" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="lastIndexOf" fulltype="int" type="int">
				<comment>
					<attribute name="@throws">
						<description>NullPointerException {@inheritDoc}</description>
					</attribute>
				</comment>
				<params>
					<param name="str" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="lastIndexOf" fulltype="int" type="int">
				<comment>
					<attribute name="@throws">
						<description>NullPointerException {@inheritDoc}</description>
					</attribute>
				</comment>
				<params>
					<param name="str" fulltype="java.lang.String" type="String" />
					<param name="fromIndex" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="reverse" fulltype="java.lang.StringBuilder" type="StringBuilder" />
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String" />
			<method visibility="private" name="writeObject" fulltype="void" type="void">
				<comment>
					<description>Save the state of the &lt;tt&gt;StringBuilder&lt;/tt&gt; instance to a stream
 (that is, serialize it).</description>
					<attribute name="@serialData">
						<description>the number of characters currently stored in the string
             builder (&lt;tt&gt;int&lt;/tt&gt;), followed by the characters in the
             string builder (&lt;tt&gt;char[]&lt;/tt&gt;).   The length of the
             &lt;tt&gt;char&lt;/tt&gt; array may be greater than the number of
             characters currently stored in the string builder, in which
             case extra characters are ignored.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" fulltype="java.io.ObjectOutputStream" type="ObjectOutputStream" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="private" name="readObject" fulltype="void" type="void">
				<comment>
					<description>readObject is called to restore the state of the StringBuffer from
 a stream.</description>
				</comment>
				<params>
					<param name="s" fulltype="java.io.ObjectInputStream" type="ObjectInputStream" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
					<exception fulltype="java.lang.ClassNotFoundException" type="ClassNotFoundException" />
				</exceptions>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Error" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.Error" fulltype="java.lang.AssertionError" type="AssertionError">
		<comment>
			<description>Thrown to indicate that an assertion has failed.

 &lt;p&gt;The seven one-argument public constructors provided by this
 class ensure that the assertion error returned by the invocation:
 &lt;pre&gt;
     new AssertionError(&lt;i&gt;expression&lt;/i&gt;)
 &lt;/pre&gt;
 has as its detail message the &lt;i&gt;string conversion&lt;/i&gt; of
 &lt;i&gt;expression&lt;/i&gt; (as defined in &lt;a
 href=&quot;http://java.sun.com/docs/books/jls/second_edition/html/j.title.doc.html&quot;&gt;
 &lt;i&gt;The Java Language Specification, Second Edition&lt;/i&gt;&lt;/a&gt;,
 &lt;a href=&quot;http://java.sun.com/docs/books/jls/second_edition/html/expressions.doc.html#40220&quot;&gt;
 Section  15.18.1.1&lt;/a&gt;), regardless of the type of &lt;i&gt;expression&lt;/i&gt;.</description>
			<attribute name="@since">
				<description>1.4</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="AssertionError">
				<comment>
					<description>Constructs an AssertionError with no detail message.</description>
				</comment>
			</constructor>
			<constructor visibility="private" name="AssertionError">
				<comment>
					<description>This internal constructor does no processing on its string argument,
 even if it is a null reference.  The public constructors will
 never call this constructor with a null argument.</description>
				</comment>
				<params>
					<param name="detailMessage" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="AssertionError">
				<comment>
					<description>Constructs an AssertionError with its detail message derived
 from the specified object, which is converted to a string as
 defined in &lt;i&gt;The Java Language Specification, Second
 Edition&lt;/i&gt;, Section 15.18.1.1.
&lt;p&gt;
 If the specified object is an instance of &lt;tt&gt;Throwable&lt;/tt&gt;, it
 becomes the &lt;i&gt;cause&lt;/i&gt; of the newly constructed assertion error.</description>
					<attribute name="@param">
						<description>detailMessage value to be used in constructing detail message</description>
					</attribute>
					<attribute name="@see">
						<description>Throwable#getCause()</description>
					</attribute>
				</comment>
				<params>
					<param name="detailMessage" comment="value to be used in constructing detail message" fulltype="java.lang.Object" type="Object" />
				</params>
			</constructor>
			<constructor visibility="public" name="AssertionError">
				<comment>
					<description>Constructs an AssertionError with its detail message derived
 from the specified &lt;code&gt;boolean&lt;/code&gt;, which is converted to
 a string as defined in &lt;i&gt;The Java Language Specification,
 Second Edition&lt;/i&gt;, Section 15.18.1.1.</description>
					<attribute name="@param">
						<description>detailMessage value to be used in constructing detail message</description>
					</attribute>
				</comment>
				<params>
					<param name="detailMessage" comment="value to be used in constructing detail message" fulltype="boolean" type="boolean" />
				</params>
			</constructor>
			<constructor visibility="public" name="AssertionError">
				<comment>
					<description>Constructs an AssertionError with its detail message derived
 from the specified &lt;code&gt;char&lt;/code&gt;, which is converted to a
 string as defined in &lt;i&gt;The Java Language Specification, Second
 Edition&lt;/i&gt;, Section 15.18.1.1.</description>
					<attribute name="@param">
						<description>detailMessage value to be used in constructing detail message</description>
					</attribute>
				</comment>
				<params>
					<param name="detailMessage" comment="value to be used in constructing detail message" fulltype="char" type="char" />
				</params>
			</constructor>
			<constructor visibility="public" name="AssertionError">
				<comment>
					<description>Constructs an AssertionError with its detail message derived
 from the specified &lt;code&gt;int&lt;/code&gt;, which is converted to a
 string as defined in &lt;i&gt;The Java Language Specification, Second
 Edition&lt;/i&gt;, Section 15.18.1.1.</description>
					<attribute name="@param">
						<description>detailMessage value to be used in constructing detail message</description>
					</attribute>
				</comment>
				<params>
					<param name="detailMessage" comment="value to be used in constructing detail message" fulltype="int" type="int" />
				</params>
			</constructor>
			<constructor visibility="public" name="AssertionError">
				<comment>
					<description>Constructs an AssertionError with its detail message derived
 from the specified &lt;code&gt;long&lt;/code&gt;, which is converted to a
 string as defined in &lt;i&gt;The Java Language Specification, Second
 Edition&lt;/i&gt;, Section 15.18.1.1.</description>
					<attribute name="@param">
						<description>detailMessage value to be used in constructing detail message</description>
					</attribute>
				</comment>
				<params>
					<param name="detailMessage" comment="value to be used in constructing detail message" fulltype="long" type="long" />
				</params>
			</constructor>
			<constructor visibility="public" name="AssertionError">
				<comment>
					<description>Constructs an AssertionError with its detail message derived
 from the specified &lt;code&gt;float&lt;/code&gt;, which is converted to a
 string as defined in &lt;i&gt;The Java Language Specification, Second
 Edition&lt;/i&gt;, Section 15.18.1.1.</description>
					<attribute name="@param">
						<description>detailMessage value to be used in constructing detail message</description>
					</attribute>
				</comment>
				<params>
					<param name="detailMessage" comment="value to be used in constructing detail message" fulltype="float" type="float" />
				</params>
			</constructor>
			<constructor visibility="public" name="AssertionError">
				<comment>
					<description>Constructs an AssertionError with its detail message derived
 from the specified &lt;code&gt;double&lt;/code&gt;, which is converted to a
 string as defined in &lt;i&gt;The Java Language Specification, Second
 Edition&lt;/i&gt;, Section 15.18.1.1.</description>
					<attribute name="@param">
						<description>detailMessage value to be used in constructing detail message</description>
					</attribute>
				</comment>
				<params>
					<param name="detailMessage" comment="value to be used in constructing detail message" fulltype="double" type="double" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass superclass="LinkageError" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.LinkageError" fulltype="java.lang.ClassFormatError" type="ClassFormatError">
		<comment>
			<description>Thrown when the Java Virtual Machine attempts to read a class
 file and determines that the file is malformed or otherwise cannot
 be interpreted as a class file.</description>
			<attribute name="@author">
				<description>unascribed</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.0</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="ClassFormatError">
				<comment>
					<description>Constructs a &lt;code&gt;ClassFormatError&lt;/code&gt; with no detail message.</description>
				</comment>
			</constructor>
			<constructor visibility="public" name="ClassFormatError">
				<comment>
					<description>Constructs a &lt;code&gt;ClassFormatError&lt;/code&gt; with the specified
 detail message.</description>
					<attribute name="@param">
						<description>s   the detail message.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the detail message." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="java.lang" interface="true" fulltype="java.lang.Readable" type="Readable">
		<comment>
			<description>A &lt;tt&gt;Readable&lt;/tt&gt; is a source of characters. Characters from
 a &lt;tt&gt;Readable&lt;/tt&gt; are made available to callers of the read
 method via a {@link java.nio.CharBuffer CharBuffer}.</description>
			<attribute name="@since">
				<description>1.5</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="read" returncomment="@return The number of &lt;tt&gt;char&lt;/tt&gt; values added to the buffer,
                 or -1 if this source of characters is at its end" fulltype="int" type="int">
				<comment>
					<description>Attempts to read characters into the specified character buffer.
 The buffer is used as a repository of characters as-is: the only
 changes made are the results of a put operation. No flipping or
 rewinding of the buffer is performed.</description>
					<attribute name="@param">
						<description>cb the buffer to read characters into</description>
					</attribute>
					<attribute name="@return">
						<description>@return The number of &lt;tt&gt;char&lt;/tt&gt; values added to the buffer,
                 or -1 if this source of characters is at its end</description>
					</attribute>
					<attribute name="@throws">
						<description>IOException if an I/O error occurs</description>
					</attribute>
					<attribute name="@throws">
						<description>NullPointerException if cb is null</description>
					</attribute>
					<attribute name="@throws">
						<description>ReadOnlyBufferException if cb is a read only buffer</description>
					</attribute>
				</comment>
				<params>
					<param name="cb" comment="the buffer to read characters into" fulltype="java.nio.CharBuffer" type="CharBuffer" />
				</params>
				<exceptions>
					<exception comment="if an I/O error occurs" fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Exception" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.Exception" fulltype="java.lang.IllegalAccessException" type="IllegalAccessException">
		<comment>
			<description>An IllegalAccessException is thrown when an application tries
 to reflectively create an instance (other than an array),
 set or get a field, or invoke a method, but the currently
 executing method does not have access to the definition of
 the specified class, field, method or constructor.</description>
			<attribute name="@author">
				<description>unascribed</description>
			</attribute>
			<attribute name="@see">
				<description>Class#newInstance()</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.reflect.Field#set(Object, Object)</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.reflect.Field#setBoolean(Object, boolean)</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.reflect.Field#setByte(Object, byte)</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.reflect.Field#setShort(Object, short)</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.reflect.Field#setChar(Object, char)</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.reflect.Field#setInt(Object, int)</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.reflect.Field#setLong(Object, long)</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.reflect.Field#setFloat(Object, float)</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.reflect.Field#setDouble(Object, double)</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.reflect.Field#get(Object)</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.reflect.Field#getBoolean(Object)</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.reflect.Field#getByte(Object)</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.reflect.Field#getShort(Object)</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.reflect.Field#getChar(Object)</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.reflect.Field#getInt(Object)</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.reflect.Field#getLong(Object)</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.reflect.Field#getFloat(Object)</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.reflect.Field#getDouble(Object)</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.reflect.Method#invoke(Object, Object[])</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.reflect.Constructor#newInstance(Object[])</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.0</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="IllegalAccessException">
				<comment>
					<description>Constructs an &lt;code&gt;IllegalAccessException&lt;/code&gt; without a
 detail message.</description>
				</comment>
			</constructor>
			<constructor visibility="public" name="IllegalAccessException">
				<comment>
					<description>Constructs an &lt;code&gt;IllegalAccessException&lt;/code&gt; with a detail message.</description>
					<attribute name="@param">
						<description>s   the detail message.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the detail message." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass superclass="LinkageError" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.LinkageError" fulltype="java.lang.ClassCircularityError" type="ClassCircularityError">
		<comment>
			<description>Thrown when a circularity has been detected while initializing a class.</description>
			<attribute name="@author">
				<description>unascribed</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.0</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="ClassCircularityError">
				<comment>
					<description>Constructs a {@code ClassCircularityError} with no detail message.</description>
				</comment>
			</constructor>
			<constructor visibility="public" name="ClassCircularityError">
				<comment>
					<description>Constructs a {@code ClassCircularityError} with the specified detail
 message.</description>
					<attribute name="@param">
						<description>s
         The detail message</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="The detail message" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass superclass="Exception" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.Exception" fulltype="java.lang.InstantiationException" type="InstantiationException">
		<comment>
			<description>Thrown when an application tries to create an instance of a class
 using the {@code newInstance} method in class
 {@code Class}, but the specified class object cannot be
 instantiated.  The instantiation can fail for a variety of
 reasons including but not limited to:

 &lt;ul&gt;
 &lt;li&gt; the class object represents an abstract class, an interface,
      an array class, a primitive type, or {@code void}
 &lt;li&gt; the class has no nullary constructor
&lt;/ul&gt;</description>
			<attribute name="@author">
				<description>unascribed</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.Class#newInstance()</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.0</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="InstantiationException">
				<comment>
					<description>Constructs an {@code InstantiationException} with no detail message.</description>
				</comment>
			</constructor>
			<constructor visibility="public" name="InstantiationException">
				<comment>
					<description>Constructs an {@code InstantiationException} with the
 specified detail message.</description>
					<attribute name="@param">
						<description>s   the detail message.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the detail message." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass superclass="Exception" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.Exception" fulltype="java.lang.RuntimeException" type="RuntimeException">
		<comment>
			<description>&lt;code&gt;RuntimeException&lt;/code&gt; is the superclass of those
 exceptions that can be thrown during the normal operation of the
 Java Virtual Machine.
 &lt;p&gt;
 A method is not required to declare in its &lt;code&gt;throws&lt;/code&gt;
 clause any subclasses of &lt;code&gt;RuntimeException&lt;/code&gt; that might
 be thrown during the execution of the method but not caught.</description>
			<attribute name="@author">
				<description>Frank Yellin</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.0</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="-7034897190745766939" visibility="package-private" name="serialVersionUID" constexpr="-7034897190745766939L" fulltype="long" type="long" />
		</fields>
		<methods>
			<constructor visibility="public" name="RuntimeException">
				<comment>
					<description>Constructs a new runtime exception with &lt;code&gt;null&lt;/code&gt; as its
 detail message.  The cause is not initialized, and may subsequently be
 initialized by a call to {@link #initCause}.</description>
				</comment>
			</constructor>
			<constructor visibility="public" name="RuntimeException">
				<comment>
					<description>Constructs a new runtime exception with the specified detail message.
 The cause is not initialized, and may subsequently be initialized by a
 call to {@link #initCause}.</description>
					<attribute name="@param">
						<description>message   the detail message. The detail message is saved for
          later retrieval by the {@link #getMessage()} method.</description>
					</attribute>
				</comment>
				<params>
					<param name="message" comment="the detail message. The detail message is saved for
          later retrieval by the {@link #getMessage()} method." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="RuntimeException">
				<comment>
					<description>Constructs a new runtime exception with the specified detail message and
 cause.  &lt;p&gt;Note that the detail message associated with
 &lt;code&gt;cause&lt;/code&gt; is &lt;i&gt;not&lt;/i&gt; automatically incorporated in
 this runtime exception&apos;s detail message.</description>
					<attribute name="@param">
						<description>message the detail message (which is saved for later retrieval
         by the {@link #getMessage()} method).</description>
					</attribute>
					<attribute name="@param">
						<description>cause the cause (which is saved for later retrieval by the
         {@link #getCause()} method).  (A &lt;tt&gt;null&lt;/tt&gt; value is
         permitted, and indicates that the cause is nonexistent or
         unknown.)</description>
					</attribute>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
				<params>
					<param name="message" comment="the detail message (which is saved for later retrieval
         by the {@link #getMessage()} method)." fulltype="java.lang.String" type="String" />
					<param name="cause" comment="the cause (which is saved for later retrieval by the
         {@link #getCause()} method).  (A &lt;tt&gt;null&lt;/tt&gt; value is
         permitted, and indicates that the cause is nonexistent or
         unknown.)" fulltype="java.lang.Throwable" type="Throwable" />
				</params>
			</constructor>
			<constructor visibility="public" name="RuntimeException">
				<comment>
					<description>Constructs a new runtime exception with the specified cause and a
 detail message of &lt;tt&gt;(cause==null ? null : cause.toString())&lt;/tt&gt;
 (which typically contains the class and detail message of
 &lt;tt&gt;cause&lt;/tt&gt;).  This constructor is useful for runtime exceptions
 that are little more than wrappers for other throwables.</description>
					<attribute name="@param">
						<description>cause the cause (which is saved for later retrieval by the
         {@link #getCause()} method).  (A &lt;tt&gt;null&lt;/tt&gt; value is
         permitted, and indicates that the cause is nonexistent or
         unknown.)</description>
					</attribute>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
				<params>
					<param name="cause" comment="the cause (which is saved for later retrieval by the
         {@link #getCause()} method).  (A &lt;tt&gt;null&lt;/tt&gt; value is
         permitted, and indicates that the cause is nonexistent or
         unknown.)" fulltype="java.lang.Throwable" type="Throwable" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass superclass="Throwable" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.Throwable" fulltype="java.lang.Error" type="Error">
		<comment>
			<description>An &lt;code&gt;Error&lt;/code&gt; is a subclass of &lt;code&gt;Throwable&lt;/code&gt;
 that indicates serious problems that a reasonable application
 should not try to catch. Most such errors are abnormal conditions.
 The &lt;code&gt;ThreadDeath&lt;/code&gt; error, though a &quot;normal&quot; condition,
 is also a subclass of &lt;code&gt;Error&lt;/code&gt; because most applications
 should not try to catch it.
 &lt;p&gt;
 A method is not required to declare in its &lt;code&gt;throws&lt;/code&gt;
 clause any subclasses of &lt;code&gt;Error&lt;/code&gt; that might be thrown
 during the execution of the method but not caught, since these
 errors are abnormal conditions that should never occur.</description>
			<attribute name="@author">
				<description>Frank Yellin</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.ThreadDeath</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.0</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="4980196508277280342" visibility="package-private" name="serialVersionUID" constexpr="4980196508277280342L" fulltype="long" type="long" />
		</fields>
		<methods>
			<constructor visibility="public" name="Error">
				<comment>
					<description>Constructs a new error with &lt;code&gt;null&lt;/code&gt; as its detail message.
 The cause is not initialized, and may subsequently be initialized by a
 call to {@link #initCause}.</description>
				</comment>
			</constructor>
			<constructor visibility="public" name="Error">
				<comment>
					<description>Constructs a new error with the specified detail message.  The
 cause is not initialized, and may subsequently be initialized by
 a call to {@link #initCause}.</description>
					<attribute name="@param">
						<description>message   the detail message. The detail message is saved for
          later retrieval by the {@link #getMessage()} method.</description>
					</attribute>
				</comment>
				<params>
					<param name="message" comment="the detail message. The detail message is saved for
          later retrieval by the {@link #getMessage()} method." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="Error">
				<comment>
					<description>Constructs a new error with the specified detail message and
 cause.  &lt;p&gt;Note that the detail message associated with
 &lt;code&gt;cause&lt;/code&gt; is &lt;i&gt;not&lt;/i&gt; automatically incorporated in
 this error&apos;s detail message.</description>
					<attribute name="@param">
						<description>message the detail message (which is saved for later retrieval
         by the {@link #getMessage()} method).</description>
					</attribute>
					<attribute name="@param">
						<description>cause the cause (which is saved for later retrieval by the
         {@link #getCause()} method).  (A &lt;tt&gt;null&lt;/tt&gt; value is
         permitted, and indicates that the cause is nonexistent or
         unknown.)</description>
					</attribute>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
				<params>
					<param name="message" comment="the detail message (which is saved for later retrieval
         by the {@link #getMessage()} method)." fulltype="java.lang.String" type="String" />
					<param name="cause" comment="the cause (which is saved for later retrieval by the
         {@link #getCause()} method).  (A &lt;tt&gt;null&lt;/tt&gt; value is
         permitted, and indicates that the cause is nonexistent or
         unknown.)" fulltype="java.lang.Throwable" type="Throwable" />
				</params>
			</constructor>
			<constructor visibility="public" name="Error">
				<comment>
					<description>Constructs a new error with the specified cause and a detail
 message of &lt;tt&gt;(cause==null ? null : cause.toString())&lt;/tt&gt; (which
 typically contains the class and detail message of &lt;tt&gt;cause&lt;/tt&gt;).
 This constructor is useful for errors that are little more than
 wrappers for other throwables.</description>
					<attribute name="@param">
						<description>cause the cause (which is saved for later retrieval by the
         {@link #getCause()} method).  (A &lt;tt&gt;null&lt;/tt&gt; value is
         permitted, and indicates that the cause is nonexistent or
         unknown.)</description>
					</attribute>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
				<params>
					<param name="cause" comment="the cause (which is saved for later retrieval by the
         {@link #getCause()} method).  (A &lt;tt&gt;null&lt;/tt&gt; value is
         permitted, and indicates that the cause is nonexistent or
         unknown.)" fulltype="java.lang.Throwable" type="Throwable" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass abstract="true" superclass="Object" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.Object" fulltype="java.lang.Enum" type="Enum">
		<implements>
			<interface fulltype="java.lang.Comparable" type="Comparable" />
			<interface fulltype="java.io.Serializable" type="Serializable" />
		</implements>
		<comment>
			<description>This is the common base class of all Java language enumeration types.</description>
			<attribute name="@author">
				<description>Josh Bloch</description>
			</attribute>
			<attribute name="@author">
				<description>Neal Gafter</description>
			</attribute>
			<attribute name="@see">
				<description>Class#getEnumConstants()</description>
			</attribute>
			<attribute name="@since">
				<description>1.5</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" visibility="private" name="name" fulltype="java.lang.String" type="String">
				<comment>
					<description>The name of this enum constant, as declared in the enum declaration.
 Most programmers should use the {@link #toString} method rather than
 accessing this field.</description>
				</comment>
			</field>
			<field final="true" visibility="private" name="ordinal" fulltype="int" type="int">
				<comment>
					<description>The ordinal of this enumeration constant (its position
 in the enum declaration, where the initial constant is assigned
 an ordinal of zero).

 Most programmers will have no use for this field.  It is designed
 for use by sophisticated enum-based data structures, such as
 {@link java.util.EnumSet} and {@link java.util.EnumMap}.</description>
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="protected" name="Enum">
				<comment>
					<description>Sole constructor.  Programmers cannot invoke this constructor.
 It is for use by code emitted by the compiler in response to
 enum type declarations.</description>
					<attribute name="@param">
						<description>name - The name of this enum constant, which is the identifier
               used to declare it.</description>
					</attribute>
					<attribute name="@param">
						<description>ordinal - The ordinal of this enumeration constant (its position
         in the enum declaration, where the initial constant is assigned
         an ordinal of zero).</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="- The name of this enum constant, which is the identifier
               used to declare it." fulltype="java.lang.String" type="String" />
					<param name="ordinal" comment="- The ordinal of this enumeration constant (its position
         in the enum declaration, where the initial constant is assigned
         an ordinal of zero)." fulltype="int" type="int" />
				</params>
			</constructor>
			<method final="true" visibility="public" name="name" returncomment="the name of this enum constant" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the name of this enum constant, exactly as declared in its
 enum declaration.

 &lt;b&gt;Most programmers should use the {@link #toString} method in
 preference to this one, as the toString method may return
 a more user-friendly name.&lt;/b&gt;  This method is designed primarily for
 use in specialized situations where correctness depends on getting the
 exact name, which will not vary from release to release.</description>
					<attribute name="@return">
						<description>the name of this enum constant</description>
					</attribute>
				</comment>
			</method>
			<method final="true" visibility="public" name="ordinal" returncomment="the ordinal of this enumeration constant" fulltype="int" type="int">
				<comment>
					<description>Returns the ordinal of this enumeration constant (its position
 in its enum declaration, where the initial constant is assigned
 an ordinal of zero).

 Most programmers will have no use for this method.  It is
 designed for use by sophisticated enum-based data structures, such
 as {@link java.util.EnumSet} and {@link java.util.EnumMap}.</description>
					<attribute name="@return">
						<description>the ordinal of this enumeration constant</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="toString" returncomment="the name of this enum constant" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the name of this enum constant, as contained in the
 declaration.  This method may be overridden, though it typically
 isn&apos;t necessary or desirable.  An enum type should override this
 method when a more &quot;programmer-friendly&quot; string form exists.</description>
					<attribute name="@return">
						<description>the name of this enum constant</description>
					</attribute>
				</comment>
			</method>
			<method final="true" visibility="public" name="equals" returncomment="true if the specified object is equal to this
          enum constant." fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true if the specified object is equal to this
 enum constant.</description>
					<attribute name="@param">
						<description>other the object to be compared for equality with this object.</description>
					</attribute>
					<attribute name="@return">
						<description>true if the specified object is equal to this
          enum constant.</description>
					</attribute>
				</comment>
				<params>
					<param name="other" comment="the object to be compared for equality with this object." fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method final="true" visibility="public" name="hashCode" returncomment="a hash code for this enum constant." fulltype="int" type="int">
				<comment>
					<description>Returns a hash code for this enum constant.</description>
					<attribute name="@return">
						<description>a hash code for this enum constant.</description>
					</attribute>
				</comment>
			</method>
			<method final="true" visibility="protected" name="clone" returncomment="(never returns)" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Throws CloneNotSupportedException.  This guarantees that enums
 are never cloned, which is necessary to preserve their &quot;singleton&quot;
 status.</description>
					<attribute name="@return">
						<description>(never returns)</description>
					</attribute>
				</comment>
				<exceptions>
					<exception fulltype="java.lang.CloneNotSupportedException" type="CloneNotSupportedException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="compareTo" fulltype="int" type="int">
				<comment>
					<description>Compares this enum with the specified object for order.  Returns a
 negative integer, zero, or a positive integer as this object is less
 than, equal to, or greater than the specified object.

 Enum constants are only comparable to other enum constants of the
 same enum type.  The natural order implemented by this
 method is the order in which the constants are declared.</description>
				</comment>
				<params>
					<param name="o" fulltype="java.lang.Enum" type="Enum" />
				</params>
			</method>
			<method final="true" visibility="public" name="getDeclaringClass" returncomment="the Class object corresponding to this enum constant&apos;s
     enum type" fulltype="java.lang.Class" type="Class">
				<comment>
					<description>Returns the Class object corresponding to this enum constant&apos;s
 enum type.  Two enum constants e1 and  e2 are of the
 same enum type if and only if
   e1.getDeclaringClass() == e2.getDeclaringClass().
 (The value returned by this method may differ from the one returned
 by the {@link Object#getClass} method for enum constants with
 constant-specific class bodies.)</description>
					<attribute name="@return">
						<description>the Class object corresponding to this enum constant&apos;s
     enum type</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="valueOf" returncomment="the enum constant of the specified enum type with the
      specified name" fulltype="java.lang.Enum" type="Enum">
				<comment>
					<description>Returns the enum constant of the specified enum type with the
 specified name.  The name must match exactly an identifier used
 to declare an enum constant in this type.  (Extraneous whitespace
 characters are not permitted.)</description>
					<attribute name="@param">
						<description>enumType the {@code Class} object of the enum type from which
      to return a constant</description>
					</attribute>
					<attribute name="@param">
						<description>name the name of the constant to return</description>
					</attribute>
					<attribute name="@return">
						<description>the enum constant of the specified enum type with the
      specified name</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalArgumentException if the specified enum type has
         no constant with the specified name, or the specified
         class object does not represent an enum type</description>
					</attribute>
					<attribute name="@throws">
						<description>NullPointerException if {@code enumType} or {@code name}
         is null</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="enumType" comment="the {@code Class} object of the enum type from which
      to return a constant" fulltype="java.lang.Class" type="Class" />
					<param name="name" comment="the name of the constant to return" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method final="true" visibility="protected" name="finalize" fulltype="void" type="void">
				<comment>
					<description>enum classes cannot have finalize methods.</description>
				</comment>
			</method>
			<method visibility="private" name="readObject" fulltype="void" type="void">
				<comment>
					<description>prevent default deserialization</description>
				</comment>
				<params>
					<param name="in" fulltype="java.io.ObjectInputStream" type="ObjectInputStream" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
					<exception fulltype="java.lang.ClassNotFoundException" type="ClassNotFoundException" />
				</exceptions>
			</method>
			<method visibility="private" name="readObjectNoData" fulltype="void" type="void">
				<exceptions>
					<exception fulltype="java.io.ObjectStreamException" type="ObjectStreamException" />
				</exceptions>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="VirtualMachineError" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.VirtualMachineError" fulltype="java.lang.StackOverflowError" type="StackOverflowError">
		<comment>
			<description>Thrown when a stack overflow occurs because an application
 recurses too deeply.</description>
			<attribute name="@author">
				<description>unascribed</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.0</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="StackOverflowError">
				<comment>
					<description>Constructs a &lt;code&gt;StackOverflowError&lt;/code&gt; with no detail message.</description>
				</comment>
			</constructor>
			<constructor visibility="public" name="StackOverflowError">
				<comment>
					<description>Constructs a &lt;code&gt;StackOverflowError&lt;/code&gt; with the specified
 detail message.</description>
					<attribute name="@param">
						<description>s   the detail message.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the detail message." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass superclass="Exception" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.Exception" fulltype="java.lang.NoSuchMethodException" type="NoSuchMethodException">
		<comment>
			<description>Thrown when a particular method cannot be found.</description>
			<attribute name="@author">
				<description>unascribed</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.0</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="NoSuchMethodException">
				<comment>
					<description>Constructs a &lt;code&gt;NoSuchMethodException&lt;/code&gt; without a detail message.</description>
				</comment>
			</constructor>
			<constructor visibility="public" name="NoSuchMethodException">
				<comment>
					<description>Constructs a &lt;code&gt;NoSuchMethodException&lt;/code&gt; with a detail message.</description>
					<attribute name="@param">
						<description>s   the detail message.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the detail message." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass superclass="Throwable" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.Throwable" fulltype="java.lang.Exception" type="Exception">
		<comment>
			<description>The class &lt;code&gt;Exception&lt;/code&gt; and its subclasses are a form of
 &lt;code&gt;Throwable&lt;/code&gt; that indicates conditions that a reasonable
 application might want to catch.</description>
			<attribute name="@author">
				<description>Frank Yellin</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.Error</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.0</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="-3387516993124229948" visibility="package-private" name="serialVersionUID" constexpr="-3387516993124229948L" fulltype="long" type="long" />
		</fields>
		<methods>
			<constructor visibility="public" name="Exception">
				<comment>
					<description>Constructs a new exception with &lt;code&gt;null&lt;/code&gt; as its detail message.
 The cause is not initialized, and may subsequently be initialized by a
 call to {@link #initCause}.</description>
				</comment>
			</constructor>
			<constructor visibility="public" name="Exception">
				<comment>
					<description>Constructs a new exception with the specified detail message.  The
 cause is not initialized, and may subsequently be initialized by
 a call to {@link #initCause}.</description>
					<attribute name="@param">
						<description>message   the detail message. The detail message is saved for
          later retrieval by the {@link #getMessage()} method.</description>
					</attribute>
				</comment>
				<params>
					<param name="message" comment="the detail message. The detail message is saved for
          later retrieval by the {@link #getMessage()} method." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="Exception">
				<comment>
					<description>Constructs a new exception with the specified detail message and
 cause.  &lt;p&gt;Note that the detail message associated with
 &lt;code&gt;cause&lt;/code&gt; is &lt;i&gt;not&lt;/i&gt; automatically incorporated in
 this exception&apos;s detail message.</description>
					<attribute name="@param">
						<description>message the detail message (which is saved for later retrieval
         by the {@link #getMessage()} method).</description>
					</attribute>
					<attribute name="@param">
						<description>cause the cause (which is saved for later retrieval by the
         {@link #getCause()} method).  (A &lt;tt&gt;null&lt;/tt&gt; value is
         permitted, and indicates that the cause is nonexistent or
         unknown.)</description>
					</attribute>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
				<params>
					<param name="message" comment="the detail message (which is saved for later retrieval
         by the {@link #getMessage()} method)." fulltype="java.lang.String" type="String" />
					<param name="cause" comment="the cause (which is saved for later retrieval by the
         {@link #getCause()} method).  (A &lt;tt&gt;null&lt;/tt&gt; value is
         permitted, and indicates that the cause is nonexistent or
         unknown.)" fulltype="java.lang.Throwable" type="Throwable" />
				</params>
			</constructor>
			<constructor visibility="public" name="Exception">
				<comment>
					<description>Constructs a new exception with the specified cause and a detail
 message of &lt;tt&gt;(cause==null ? null : cause.toString())&lt;/tt&gt; (which
 typically contains the class and detail message of &lt;tt&gt;cause&lt;/tt&gt;).
 This constructor is useful for exceptions that are little more than
 wrappers for other throwables (for example, {@link
 java.security.PrivilegedActionException}).</description>
					<attribute name="@param">
						<description>cause the cause (which is saved for later retrieval by the
         {@link #getCause()} method).  (A &lt;tt&gt;null&lt;/tt&gt; value is
         permitted, and indicates that the cause is nonexistent or
         unknown.)</description>
					</attribute>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
				<params>
					<param name="cause" comment="the cause (which is saved for later retrieval by the
         {@link #getCause()} method).  (A &lt;tt&gt;null&lt;/tt&gt; value is
         permitted, and indicates that the cause is nonexistent or
         unknown.)" fulltype="java.lang.Throwable" type="Throwable" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass superclass="LinkageError" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.LinkageError" fulltype="java.lang.VerifyError" type="VerifyError">
		<comment>
			<description>Thrown when the &quot;verifier&quot; detects that a class file,
 though well formed, contains some sort of internal inconsistency
 or security problem.</description>
			<attribute name="@author">
				<description>unascribed</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.0</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="VerifyError">
				<comment>
					<description>Constructs an &lt;code&gt;VerifyError&lt;/code&gt; with no detail message.</description>
				</comment>
			</constructor>
			<constructor visibility="public" name="VerifyError">
				<comment>
					<description>Constructs an &lt;code&gt;VerifyError&lt;/code&gt; with the specified detail message.</description>
					<attribute name="@param">
						<description>s   the detail message.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the detail message." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass final="true" superclass="Number" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.Number" fulltype="java.lang.Integer" type="Integer">
		<implements>
			<interface fulltype="java.lang.Comparable" type="Comparable" />
		</implements>
		<comment>
			<description>The {@code Integer} class wraps a value of the primitive type
 {@code int} in an object. An object of type {@code Integer}
 contains a single field whose type is {@code int}.

 &lt;p&gt;In addition, this class provides several methods for converting
 an {@code int} to a {@code String} and a {@code String} to an
 {@code int}, as well as other constants and methods useful when
 dealing with an {@code int}.

 &lt;p&gt;Implementation note: The implementations of the &quot;bit twiddling&quot;
 methods (such as {@link #highestOneBit(int) highestOneBit} and
 {@link #numberOfTrailingZeros(int) numberOfTrailingZeros}) are
 based on material from Henry S. Warren, Jr.&apos;s &lt;i&gt;Hacker&apos;s
 Delight&lt;/i&gt;, (Addison Wesley, 2002).</description>
			<attribute name="@author">
				<description>Lee Boynton</description>
			</attribute>
			<attribute name="@author">
				<description>Arthur van Hoff</description>
			</attribute>
			<attribute name="@author">
				<description>Josh Bloch</description>
			</attribute>
			<attribute name="@author">
				<description>Joseph D. Darcy</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.0</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="-2147483648" visibility="public" name="MIN_VALUE" constexpr="-2147483648" fulltype="int" type="int">
				<comment>
					<description>A constant holding the minimum value an {@code int} can
 have, -2&lt;sup&gt;31&lt;/sup&gt;.</description>
				</comment>
			</field>
			<field final="true" static="true" const="2147483647" visibility="public" name="MAX_VALUE" constexpr="2147483647" fulltype="int" type="int">
				<comment>
					<description>A constant holding the maximum value an {@code int} can
 have, 2&lt;sup&gt;31&lt;/sup&gt;-1.</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="TYPE" fulltype="java.lang.Class" type="Class">
				<comment>
					<description>The {@code Class} instance representing the primitive type
 {@code int}.</description>
					<attribute name="@since">
						<description>JDK1.1</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="package-private" name="digits" fulltype="char[]" type="char">
				<comment>
					<description>All possible chars for representing a number as a String</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="package-private" name="DigitTens" fulltype="char[]" type="char" />
			<field final="true" static="true" visibility="package-private" name="DigitOnes" fulltype="char[]" type="char" />
			<field final="true" static="true" visibility="package-private" name="sizeTable" fulltype="int[]" type="int" />
			<field final="true" visibility="private" name="value" fulltype="int" type="int">
				<comment>
					<description>The value of the {@code Integer}.</description>
					<attribute name="@serial" />
				</comment>
			</field>
			<field final="true" static="true" const="32" visibility="public" name="SIZE" constexpr="32" fulltype="int" type="int">
				<comment>
					<description>The number of bits used to represent an {@code int} value in two&apos;s
 complement binary form.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="1360826667806852920" visibility="private" name="serialVersionUID" constexpr="1360826667806852920L" fulltype="long" type="long">
				<comment>
					<description>use serialVersionUID from JDK 1.0.2 for interoperability</description>
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="public" name="Integer">
				<comment>
					<description>Constructs a newly allocated {@code Integer} object that
 represents the specified {@code int} value.</description>
					<attribute name="@param">
						<description>value   the value to be represented by the
                  {@code Integer} object.</description>
					</attribute>
				</comment>
				<params>
					<param name="value" comment="the value to be represented by the
                  {@code Integer} object." fulltype="int" type="int" />
				</params>
			</constructor>
			<constructor visibility="public" name="Integer">
				<comment>
					<description>Constructs a newly allocated {@code Integer} object that
 represents the {@code int} value indicated by the
 {@code String} parameter. The string is converted to an
 {@code int} value in exactly the manner used by the
 {@code parseInt} method for radix 10.</description>
					<attribute name="@param">
						<description>s   the {@code String} to be converted to an
                 {@code Integer}.</description>
					</attribute>
					<attribute name="@exception">
						<description>NumberFormatException  if the {@code String} does not
               contain a parsable integer.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Integer#parseInt(java.lang.String, int)</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the {@code String} to be converted to an
                 {@code Integer}." fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception comment="if the {@code String} does not
               contain a parsable integer." fulltype="java.lang.NumberFormatException" type="NumberFormatException" />
				</exceptions>
			</constructor>
			<method static="true" visibility="public" name="toString" returncomment="a string representation of the argument in the specified radix." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a string representation of the first argument in the
 radix specified by the second argument.

 &lt;p&gt;If the radix is smaller than {@code Character.MIN_RADIX}
 or larger than {@code Character.MAX_RADIX}, then the radix
 {@code 10} is used instead.

 &lt;p&gt;If the first argument is negative, the first element of the
 result is the ASCII minus character {@code &apos;-&apos;}
 (&lt;code&gt;&apos;&amp;#92;u002D&apos;&lt;/code&gt;). If the first argument is not
 negative, no sign character appears in the result.

 &lt;p&gt;The remaining characters of the result represent the magnitude
 of the first argument. If the magnitude is zero, it is
 represented by a single zero character {@code &apos;0&apos;}
 (&lt;code&gt;&apos;&amp;#92;u0030&apos;&lt;/code&gt;); otherwise, the first character of
 the representation of the magnitude will not be the zero
 character.  The following ASCII characters are used as digits:

 &lt;blockquote&gt;
   {@code 0123456789abcdefghijklmnopqrstuvwxyz}
 &lt;/blockquote&gt;

 These are &lt;code&gt;&apos;&amp;#92;u0030&apos;&lt;/code&gt; through
 &lt;code&gt;&apos;&amp;#92;u0039&apos;&lt;/code&gt; and &lt;code&gt;&apos;&amp;#92;u0061&apos;&lt;/code&gt; through
 &lt;code&gt;&apos;&amp;#92;u007A&apos;&lt;/code&gt;. If {@code radix} is
 &lt;var&gt;N&lt;/var&gt;, then the first &lt;var&gt;N&lt;/var&gt; of these characters
 are used as radix-&lt;var&gt;N&lt;/var&gt; digits in the order shown. Thus,
 the digits for hexadecimal (radix 16) are
 {@code 0123456789abcdef}. If uppercase letters are
 desired, the {@link java.lang.String#toUpperCase()} method may
 be called on the result:

 &lt;blockquote&gt;
  {@code Integer.toString(n, 16).toUpperCase()}
 &lt;/blockquote&gt;</description>
					<attribute name="@param">
						<description>i       an integer to be converted to a string.</description>
					</attribute>
					<attribute name="@param">
						<description>radix   the radix to use in the string representation.</description>
					</attribute>
					<attribute name="@return">
						<description>a string representation of the argument in the specified radix.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#MAX_RADIX</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#MIN_RADIX</description>
					</attribute>
				</comment>
				<params>
					<param name="i" comment="an integer to be converted to a string." fulltype="int" type="int" />
					<param name="radix" comment="the radix to use in the string representation." fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="toHexString" returncomment="the string representation of the unsigned integer value
          represented by the argument in hexadecimal (base&amp;nbsp;16)." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a string representation of the integer argument as an
 unsigned integer in base&amp;nbsp;16.

 &lt;p&gt;The unsigned integer value is the argument plus 2&lt;sup&gt;32&lt;/sup&gt;
 if the argument is negative; otherwise, it is equal to the
 argument.  This value is converted to a string of ASCII digits
 in hexadecimal (base&amp;nbsp;16) with no extra leading
 {@code 0}s. If the unsigned magnitude is zero, it is
 represented by a single zero character {@code &apos;0&apos;}
 (&lt;code&gt;&apos;&amp;#92;u0030&apos;&lt;/code&gt;); otherwise, the first character of
 the representation of the unsigned magnitude will not be the
 zero character. The following characters are used as
 hexadecimal digits:

 &lt;blockquote&gt;
  {@code 0123456789abcdef}
 &lt;/blockquote&gt;

 These are the characters &lt;code&gt;&apos;&amp;#92;u0030&apos;&lt;/code&gt; through
 &lt;code&gt;&apos;&amp;#92;u0039&apos;&lt;/code&gt; and &lt;code&gt;&apos;&amp;#92;u0061&apos;&lt;/code&gt; through
 &lt;code&gt;&apos;&amp;#92;u0066&apos;&lt;/code&gt;. If uppercase letters are
 desired, the {@link java.lang.String#toUpperCase()} method may
 be called on the result:

 &lt;blockquote&gt;
  {@code Integer.toHexString(n).toUpperCase()}
 &lt;/blockquote&gt;</description>
					<attribute name="@param">
						<description>i   an integer to be converted to a string.</description>
					</attribute>
					<attribute name="@return">
						<description>the string representation of the unsigned integer value
          represented by the argument in hexadecimal (base&amp;nbsp;16).</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.0.2</description>
					</attribute>
				</comment>
				<params>
					<param name="i" comment="an integer to be converted to a string." fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="toOctalString" returncomment="the string representation of the unsigned integer value
          represented by the argument in octal (base&amp;nbsp;8)." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a string representation of the integer argument as an
 unsigned integer in base&amp;nbsp;8.

 &lt;p&gt;The unsigned integer value is the argument plus 2&lt;sup&gt;32&lt;/sup&gt;
 if the argument is negative; otherwise, it is equal to the
 argument.  This value is converted to a string of ASCII digits
 in octal (base&amp;nbsp;8) with no extra leading {@code 0}s.

 &lt;p&gt;If the unsigned magnitude is zero, it is represented by a
 single zero character {@code &apos;0&apos;}
 (&lt;code&gt;&apos;&amp;#92;u0030&apos;&lt;/code&gt;); otherwise, the first character of
 the representation of the unsigned magnitude will not be the
 zero character. The following characters are used as octal
 digits:

 &lt;blockquote&gt;
 {@code 01234567}
 &lt;/blockquote&gt;

 These are the characters &lt;code&gt;&apos;&amp;#92;u0030&apos;&lt;/code&gt; through
 &lt;code&gt;&apos;&amp;#92;u0037&apos;&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>i   an integer to be converted to a string.</description>
					</attribute>
					<attribute name="@return">
						<description>the string representation of the unsigned integer value
          represented by the argument in octal (base&amp;nbsp;8).</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.0.2</description>
					</attribute>
				</comment>
				<params>
					<param name="i" comment="an integer to be converted to a string." fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="toBinaryString" returncomment="the string representation of the unsigned integer value
          represented by the argument in binary (base&amp;nbsp;2)." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a string representation of the integer argument as an
 unsigned integer in base&amp;nbsp;2.

 &lt;p&gt;The unsigned integer value is the argument plus 2&lt;sup&gt;32&lt;/sup&gt;
 if the argument is negative; otherwise it is equal to the
 argument.  This value is converted to a string of ASCII digits
 in binary (base&amp;nbsp;2) with no extra leading {@code 0}s.
 If the unsigned magnitude is zero, it is represented by a
 single zero character {@code &apos;0&apos;}
 (&lt;code&gt;&apos;&amp;#92;u0030&apos;&lt;/code&gt;); otherwise, the first character of
 the representation of the unsigned magnitude will not be the
 zero character. The characters {@code &apos;0&apos;}
 (&lt;code&gt;&apos;&amp;#92;u0030&apos;&lt;/code&gt;) and {@code &apos;1&apos;}
 (&lt;code&gt;&apos;&amp;#92;u0031&apos;&lt;/code&gt;) are used as binary digits.</description>
					<attribute name="@param">
						<description>i   an integer to be converted to a string.</description>
					</attribute>
					<attribute name="@return">
						<description>the string representation of the unsigned integer value
          represented by the argument in binary (base&amp;nbsp;2).</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.0.2</description>
					</attribute>
				</comment>
				<params>
					<param name="i" comment="an integer to be converted to a string." fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="private" name="toUnsignedString" fulltype="java.lang.String" type="String">
				<comment>
					<description>Convert the integer to an unsigned number.</description>
				</comment>
				<params>
					<param name="i" fulltype="int" type="int" />
					<param name="shift" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="toString" returncomment="a string representation of the argument in base&amp;nbsp;10." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a {@code String} object representing the
 specified integer. The argument is converted to signed decimal
 representation and returned as a string, exactly as if the
 argument and radix 10 were given as arguments to the {@link
 #toString(int, int)} method.</description>
					<attribute name="@param">
						<description>i   an integer to be converted.</description>
					</attribute>
					<attribute name="@return">
						<description>a string representation of the argument in base&amp;nbsp;10.</description>
					</attribute>
				</comment>
				<params>
					<param name="i" comment="an integer to be converted." fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="package-private" name="getChars" fulltype="void" type="void">
				<comment>
					<description>Places characters representing the integer i into the
 character array buf. The characters are placed into
 the buffer backwards starting with the least significant
 digit at the specified index (exclusive), and working
 backwards from there.

 Will fail if i == Integer.MIN_VALUE</description>
				</comment>
				<params>
					<param name="i" fulltype="int" type="int" />
					<param name="index" fulltype="int" type="int" />
					<param name="buf" fulltype="char[]" type="char" />
				</params>
			</method>
			<method static="true" visibility="package-private" name="stringSize" fulltype="int" type="int">
				<params>
					<param name="x" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="parseInt" returncomment="the integer represented by the string argument in the
             specified radix." fulltype="int" type="int">
				<comment>
					<description>Parses the string argument as a signed integer in the radix
 specified by the second argument. The characters in the string
 must all be digits of the specified radix (as determined by
 whether {@link java.lang.Character#digit(char, int)} returns a
 nonnegative value), except that the first character may be an
 ASCII minus sign {@code &apos;-&apos;} (&lt;code&gt;&apos;&amp;#92;u002D&apos;&lt;/code&gt;) to
 indicate a negative value. The resulting integer value is
 returned.

 &lt;p&gt;An exception of type {@code NumberFormatException} is
 thrown if any of the following situations occurs:
 &lt;ul&gt;
 &lt;li&gt;The first argument is {@code null} or is a string of
 length zero.

 &lt;li&gt;The radix is either smaller than
 {@link java.lang.Character#MIN_RADIX} or
 larger than {@link java.lang.Character#MAX_RADIX}.

 &lt;li&gt;Any character of the string is not a digit of the specified
 radix, except that the first character may be a minus sign
 {@code &apos;-&apos;} (&lt;code&gt;&apos;&amp;#92;u002D&apos;&lt;/code&gt;) provided that the
 string is longer than length 1.

 &lt;li&gt;The value represented by the string is not a value of type
 {@code int}.
 &lt;/ul&gt;

 &lt;p&gt;Examples:
 &lt;blockquote&gt;&lt;pre&gt;
 parseInt(&quot;0&quot;, 10) returns 0
 parseInt(&quot;473&quot;, 10) returns 473
 parseInt(&quot;-0&quot;, 10) returns 0
 parseInt(&quot;-FF&quot;, 16) returns -255
 parseInt(&quot;1100110&quot;, 2) returns 102
 parseInt(&quot;2147483647&quot;, 10) returns 2147483647
 parseInt(&quot;-2147483648&quot;, 10) returns -2147483648
 parseInt(&quot;2147483648&quot;, 10) throws a NumberFormatException
 parseInt(&quot;99&quot;, 8) throws a NumberFormatException
 parseInt(&quot;Kona&quot;, 10) throws a NumberFormatException
 parseInt(&quot;Kona&quot;, 27) returns 411787
 &lt;/pre&gt;&lt;/blockquote&gt;</description>
					<attribute name="@param">
						<description>s   the {@code String} containing the integer
                  representation to be parsed</description>
					</attribute>
					<attribute name="@param">
						<description>radix   the radix to be used while parsing {@code s}.</description>
					</attribute>
					<attribute name="@return">
						<description>the integer represented by the string argument in the
             specified radix.</description>
					</attribute>
					<attribute name="@exception">
						<description>NumberFormatException if the {@code String}
             does not contain a parsable {@code int}.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the {@code String} containing the integer
                  representation to be parsed" fulltype="java.lang.String" type="String" />
					<param name="radix" comment="the radix to be used while parsing {@code s}." fulltype="int" type="int" />
				</params>
				<exceptions>
					<exception comment="if the {@code String}
             does not contain a parsable {@code int}." fulltype="java.lang.NumberFormatException" type="NumberFormatException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="parseInt" returncomment="the integer value represented by the argument in decimal." fulltype="int" type="int">
				<comment>
					<description>Parses the string argument as a signed decimal integer. The
 characters in the string must all be decimal digits, except
 that the first character may be an ASCII minus sign {@code &apos;-&apos;}
 (&lt;code&gt;&apos;&amp;#92;u002D&apos;&lt;/code&gt;) to indicate a negative value.  The
 resulting integer value is returned, exactly as if the argument
 and the radix 10 were given as arguments to the {@link
 #parseInt(java.lang.String, int)} method.</description>
					<attribute name="@param">
						<description>s    a {@code String} containing the {@code int}
             representation to be parsed</description>
					</attribute>
					<attribute name="@return">
						<description>the integer value represented by the argument in decimal.</description>
					</attribute>
					<attribute name="@exception">
						<description>NumberFormatException  if the string does not contain a
               parsable integer.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="a {@code String} containing the {@code int}
             representation to be parsed" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception comment="if the string does not contain a
               parsable integer." fulltype="java.lang.NumberFormatException" type="NumberFormatException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="valueOf" returncomment="an {@code Integer} object holding the value
             represented by the string argument in the specified
             radix." fulltype="java.lang.Integer" type="Integer">
				<comment>
					<description>Returns an {@code Integer} object holding the value
 extracted from the specified {@code String} when parsed
 with the radix given by the second argument. The first argument
 is interpreted as representing a signed integer in the radix
 specified by the second argument, exactly as if the arguments
 were given to the {@link #parseInt(java.lang.String, int)}
 method. The result is an {@code Integer} object that
 represents the integer value specified by the string.

 &lt;p&gt;In other words, this method returns an {@code Integer}
 object equal to the value of:

 &lt;blockquote&gt;
  {@code new Integer(Integer.parseInt(s, radix))}
 &lt;/blockquote&gt;</description>
					<attribute name="@param">
						<description>s   the string to be parsed.</description>
					</attribute>
					<attribute name="@param">
						<description>radix the radix to be used in interpreting {@code s}</description>
					</attribute>
					<attribute name="@return">
						<description>an {@code Integer} object holding the value
             represented by the string argument in the specified
             radix.</description>
					</attribute>
					<attribute name="@exception">
						<description>NumberFormatException if the {@code String}
            does not contain a parsable {@code int}.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the string to be parsed." fulltype="java.lang.String" type="String" />
					<param name="radix" comment="the radix to be used in interpreting {@code s}" fulltype="int" type="int" />
				</params>
				<exceptions>
					<exception comment="if the {@code String}
            does not contain a parsable {@code int}." fulltype="java.lang.NumberFormatException" type="NumberFormatException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="valueOf" returncomment="an {@code Integer} object holding the value
             represented by the string argument." fulltype="java.lang.Integer" type="Integer">
				<comment>
					<description>Returns an {@code Integer} object holding the
 value of the specified {@code String}. The argument is
 interpreted as representing a signed decimal integer, exactly
 as if the argument were given to the {@link
 #parseInt(java.lang.String)} method. The result is an
 {@code Integer} object that represents the integer value
 specified by the string.

 &lt;p&gt;In other words, this method returns an {@code Integer}
 object equal to the value of:

 &lt;blockquote&gt;
  {@code new Integer(Integer.parseInt(s))}
 &lt;/blockquote&gt;</description>
					<attribute name="@param">
						<description>s   the string to be parsed.</description>
					</attribute>
					<attribute name="@return">
						<description>an {@code Integer} object holding the value
             represented by the string argument.</description>
					</attribute>
					<attribute name="@exception">
						<description>NumberFormatException  if the string cannot be parsed
             as an integer.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the string to be parsed." fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception comment="if the string cannot be parsed
             as an integer." fulltype="java.lang.NumberFormatException" type="NumberFormatException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="valueOf" returncomment="an {@code Integer} instance representing {@code i}." fulltype="java.lang.Integer" type="Integer">
				<comment>
					<description>Returns an {@code Integer} instance representing the specified
 {@code int} value.  If a new {@code Integer} instance is not
 required, this method should generally be used in preference to
 the constructor {@link #Integer(int)}, as this method is likely
 to yield significantly better space and time performance by
 caching frequently requested values.</description>
					<attribute name="@param">
						<description>i an {@code int} value.</description>
					</attribute>
					<attribute name="@return">
						<description>an {@code Integer} instance representing {@code i}.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="i" comment="an {@code int} value." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="byteValue" fulltype="byte" type="byte">
				<comment>
					<description>Returns the value of this {@code Integer} as a
 {@code byte}.</description>
				</comment>
			</method>
			<method visibility="public" name="shortValue" fulltype="short" type="short">
				<comment>
					<description>Returns the value of this {@code Integer} as a
 {@code short}.</description>
				</comment>
			</method>
			<method visibility="public" name="intValue" fulltype="int" type="int">
				<comment>
					<description>Returns the value of this {@code Integer} as an
 {@code int}.</description>
				</comment>
			</method>
			<method visibility="public" name="longValue" fulltype="long" type="long">
				<comment>
					<description>Returns the value of this {@code Integer} as a
 {@code long}.</description>
				</comment>
			</method>
			<method visibility="public" name="floatValue" fulltype="float" type="float">
				<comment>
					<description>Returns the value of this {@code Integer} as a
 {@code float}.</description>
				</comment>
			</method>
			<method visibility="public" name="doubleValue" fulltype="double" type="double">
				<comment>
					<description>Returns the value of this {@code Integer} as a
 {@code double}.</description>
				</comment>
			</method>
			<method visibility="public" name="toString" returncomment="a string representation of the value of this object in
          base&amp;nbsp;10." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a {@code String} object representing this
 {@code Integer}&apos;s value. The value is converted to signed
 decimal representation and returned as a string, exactly as if
 the integer value were given as an argument to the {@link
 java.lang.Integer#toString(int)} method.</description>
					<attribute name="@return">
						<description>a string representation of the value of this object in
          base&amp;nbsp;10.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="hashCode" returncomment="a hash code value for this object, equal to the
          primitive {@code int} value represented by this
          {@code Integer} object." fulltype="int" type="int">
				<comment>
					<description>Returns a hash code for this {@code Integer}.</description>
					<attribute name="@return">
						<description>a hash code value for this object, equal to the
          primitive {@code int} value represented by this
          {@code Integer} object.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="equals" returncomment="{@code true} if the objects are the same;
          {@code false} otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Compares this object to the specified object.  The result is
 {@code true} if and only if the argument is not
 {@code null} and is an {@code Integer} object that
 contains the same {@code int} value as this object.</description>
					<attribute name="@param">
						<description>obj   the object to compare with.</description>
					</attribute>
					<attribute name="@return">
						<description>{@code true} if the objects are the same;
          {@code false} otherwise.</description>
					</attribute>
				</comment>
				<params>
					<param name="obj" comment="the object to compare with." fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method static="true" visibility="public" name="getInteger" returncomment="the {@code Integer} value of the property." fulltype="java.lang.Integer" type="Integer">
				<comment>
					<description>Determines the integer value of the system property with the
 specified name.

 &lt;p&gt;The first argument is treated as the name of a system property.
 System properties are accessible through the
 {@link java.lang.System#getProperty(java.lang.String)} method. The
 string value of this property is then interpreted as an integer
 value and an {@code Integer} object representing this value is
 returned. Details of possible numeric formats can be found with
 the definition of {@code getProperty}.

 &lt;p&gt;If there is no property with the specified name, if the specified name
 is empty or {@code null}, or if the property does not have
 the correct numeric format, then {@code null} is returned.

 &lt;p&gt;In other words, this method returns an {@code Integer}
 object equal to the value of:

 &lt;blockquote&gt;
  {@code getInteger(nm, null)}
 &lt;/blockquote&gt;</description>
					<attribute name="@param">
						<description>nm   property name.</description>
					</attribute>
					<attribute name="@return">
						<description>the {@code Integer} value of the property.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.System#getProperty(java.lang.String)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.System#getProperty(java.lang.String, java.lang.String)</description>
					</attribute>
				</comment>
				<params>
					<param name="nm" comment="property name." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getInteger" returncomment="the {@code Integer} value of the property." fulltype="java.lang.Integer" type="Integer">
				<comment>
					<description>Determines the integer value of the system property with the
 specified name.

 &lt;p&gt;The first argument is treated as the name of a system property.
 System properties are accessible through the {@link
 java.lang.System#getProperty(java.lang.String)} method. The
 string value of this property is then interpreted as an integer
 value and an {@code Integer} object representing this value is
 returned. Details of possible numeric formats can be found with
 the definition of {@code getProperty}.

 &lt;p&gt;The second argument is the default value. An {@code Integer} object
 that represents the value of the second argument is returned if there
 is no property of the specified name, if the property does not have
 the correct numeric format, or if the specified name is empty or
 {@code null}.

 &lt;p&gt;In other words, this method returns an {@code Integer} object
 equal to the value of:

 &lt;blockquote&gt;
  {@code getInteger(nm, new Integer(val))}
 &lt;/blockquote&gt;

 but in practice it may be implemented in a manner such as:

 &lt;blockquote&gt;&lt;pre&gt;
 Integer result = getInteger(nm, null);
 return (result == null) ? new Integer(val) : result;
 &lt;/pre&gt;&lt;/blockquote&gt;

 to avoid the unnecessary allocation of an {@code Integer}
 object when the default value is not needed.</description>
					<attribute name="@param">
						<description>nm   property name.</description>
					</attribute>
					<attribute name="@param">
						<description>val   default value.</description>
					</attribute>
					<attribute name="@return">
						<description>the {@code Integer} value of the property.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.System#getProperty(java.lang.String)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.System#getProperty(java.lang.String, java.lang.String)</description>
					</attribute>
				</comment>
				<params>
					<param name="nm" comment="property name." fulltype="java.lang.String" type="String" />
					<param name="val" comment="default value." fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="getInteger" returncomment="the {@code Integer} value of the property." fulltype="java.lang.Integer" type="Integer">
				<comment>
					<description>Returns the integer value of the system property with the
 specified name.  The first argument is treated as the name of a
 system property.  System properties are accessible through the
 {@link java.lang.System#getProperty(java.lang.String)} method.
 The string value of this property is then interpreted as an
 integer value, as per the {@code Integer.decode} method,
 and an {@code Integer} object representing this value is
 returned.

 &lt;ul&gt;&lt;li&gt;If the property value begins with the two ASCII characters
         {@code 0x} or the ASCII character {@code #}, not
      followed by a minus sign, then the rest of it is parsed as a
      hexadecimal integer exactly as by the method
      {@link #valueOf(java.lang.String, int)} with radix 16.
 &lt;li&gt;If the property value begins with the ASCII character
     {@code 0} followed by another character, it is parsed as an
     octal integer exactly as by the method
     {@link #valueOf(java.lang.String, int)} with radix 8.
 &lt;li&gt;Otherwise, the property value is parsed as a decimal integer
 exactly as by the method {@link #valueOf(java.lang.String, int)}
 with radix 10.
 &lt;/ul&gt;

 &lt;p&gt;The second argument is the default value. The default value is
 returned if there is no property of the specified name, if the
 property does not have the correct numeric format, or if the
 specified name is empty or {@code null}.</description>
					<attribute name="@param">
						<description>nm   property name.</description>
					</attribute>
					<attribute name="@param">
						<description>val   default value.</description>
					</attribute>
					<attribute name="@return">
						<description>the {@code Integer} value of the property.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.System#getProperty(java.lang.String)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.System#getProperty(java.lang.String, java.lang.String)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Integer#decode</description>
					</attribute>
				</comment>
				<params>
					<param name="nm" comment="property name." fulltype="java.lang.String" type="String" />
					<param name="val" comment="default value." fulltype="java.lang.Integer" type="Integer" />
				</params>
			</method>
			<method static="true" visibility="public" name="decode" returncomment="an {@code Integer} object holding the {@code int}
             value represented by {@code nm}" fulltype="java.lang.Integer" type="Integer">
				<comment>
					<description>Decodes a {@code String} into an {@code Integer}.
 Accepts decimal, hexadecimal, and octal numbers given
 by the following grammar:

 &lt;blockquote&gt;
 &lt;dl&gt;
 &lt;dt&gt;&lt;i&gt;DecodableString:&lt;/i&gt;
 &lt;dd&gt;&lt;i&gt;Sign&lt;sub&gt;opt&lt;/sub&gt; DecimalNumeral&lt;/i&gt;
 &lt;dd&gt;&lt;i&gt;Sign&lt;sub&gt;opt&lt;/sub&gt;&lt;/i&gt; {@code 0x} &lt;i&gt;HexDigits&lt;/i&gt;
 &lt;dd&gt;&lt;i&gt;Sign&lt;sub&gt;opt&lt;/sub&gt;&lt;/i&gt; {@code 0X} &lt;i&gt;HexDigits&lt;/i&gt;
 &lt;dd&gt;&lt;i&gt;Sign&lt;sub&gt;opt&lt;/sub&gt;&lt;/i&gt; {@code #} &lt;i&gt;HexDigits&lt;/i&gt;
 &lt;dd&gt;&lt;i&gt;Sign&lt;sub&gt;opt&lt;/sub&gt;&lt;/i&gt; {@code 0} &lt;i&gt;OctalDigits&lt;/i&gt;
 &lt;p&gt;
 &lt;dt&gt;&lt;i&gt;Sign:&lt;/i&gt;
 &lt;dd&gt;{@code -}
 &lt;/dl&gt;
 &lt;/blockquote&gt;

 &lt;i&gt;DecimalNumeral&lt;/i&gt;, &lt;i&gt;HexDigits&lt;/i&gt;, and &lt;i&gt;OctalDigits&lt;/i&gt;
 are defined in &lt;a href=&quot;http://java.sun.com/docs/books/jls/second_edition/html/lexical.doc.html#48282&quot;&gt;&amp;sect;3.10.1&lt;/a&gt;
 of the &lt;a href=&quot;http://java.sun.com/docs/books/jls/html/&quot;&gt;Java
 Language Specification&lt;/a&gt;.

 &lt;p&gt;The sequence of characters following an (optional) negative
 sign and/or radix specifier (&quot;{@code 0x}&quot;, &quot;{@code 0X}&quot;,
 &quot;{@code #}&quot;, or leading zero) is parsed as by the {@code
 Integer.parseInt} method with the indicated radix (10, 16, or
 8).  This sequence of characters must represent a positive
 value or a {@link NumberFormatException} will be thrown.  The
 result is negated if first character of the specified {@code
 String} is the minus sign.  No whitespace characters are
 permitted in the {@code String}.</description>
					<attribute name="@param">
						<description>nm the {@code String} to decode.</description>
					</attribute>
					<attribute name="@return">
						<description>an {@code Integer} object holding the {@code int}
             value represented by {@code nm}</description>
					</attribute>
					<attribute name="@exception">
						<description>NumberFormatException  if the {@code String} does not
            contain a parsable integer.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Integer#parseInt(java.lang.String, int)</description>
					</attribute>
				</comment>
				<params>
					<param name="nm" comment="the {@code String} to decode." fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception comment="if the {@code String} does not
            contain a parsable integer." fulltype="java.lang.NumberFormatException" type="NumberFormatException" />
				</exceptions>
			</method>
			<method visibility="public" name="compareTo" returncomment="the value {@code 0} if this {@code Integer} is
          equal to the argument {@code Integer}; a value less than
          {@code 0} if this {@code Integer} is numerically less
          than the argument {@code Integer}; and a value greater
          than {@code 0} if this {@code Integer} is numerically
           greater than the argument {@code Integer} (signed
           comparison)." fulltype="int" type="int">
				<comment>
					<description>Compares two {@code Integer} objects numerically.</description>
					<attribute name="@param">
						<description>anotherInteger   the {@code Integer} to be compared.</description>
					</attribute>
					<attribute name="@return">
						<description>the value {@code 0} if this {@code Integer} is
          equal to the argument {@code Integer}; a value less than
          {@code 0} if this {@code Integer} is numerically less
          than the argument {@code Integer}; and a value greater
          than {@code 0} if this {@code Integer} is numerically
           greater than the argument {@code Integer} (signed
           comparison).</description>
					</attribute>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
				<params>
					<param name="anotherInteger" comment="the {@code Integer} to be compared." fulltype="java.lang.Integer" type="Integer" />
				</params>
			</method>
			<method static="true" visibility="public" name="highestOneBit" returncomment="an {@code int} value with a single one-bit, in the position
     of the highest-order one-bit in the specified value, or zero if
     the specified value is itself equal to zero." fulltype="int" type="int">
				<comment>
					<description>Returns an {@code int} value with at most a single one-bit, in the
 position of the highest-order (&quot;leftmost&quot;) one-bit in the specified
 {@code int} value.  Returns zero if the specified value has no
 one-bits in its two&apos;s complement binary representation, that is, if it
 is equal to zero.</description>
					<attribute name="@return">
						<description>an {@code int} value with a single one-bit, in the position
     of the highest-order one-bit in the specified value, or zero if
     the specified value is itself equal to zero.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="i" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="lowestOneBit" returncomment="an {@code int} value with a single one-bit, in the position
     of the lowest-order one-bit in the specified value, or zero if
     the specified value is itself equal to zero." fulltype="int" type="int">
				<comment>
					<description>Returns an {@code int} value with at most a single one-bit, in the
 position of the lowest-order (&quot;rightmost&quot;) one-bit in the specified
 {@code int} value.  Returns zero if the specified value has no
 one-bits in its two&apos;s complement binary representation, that is, if it
 is equal to zero.</description>
					<attribute name="@return">
						<description>an {@code int} value with a single one-bit, in the position
     of the lowest-order one-bit in the specified value, or zero if
     the specified value is itself equal to zero.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="i" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="numberOfLeadingZeros" returncomment="the number of zero bits preceding the highest-order
     (&quot;leftmost&quot;) one-bit in the two&apos;s complement binary representation
     of the specified {@code int} value, or 32 if the value
     is equal to zero." fulltype="int" type="int">
				<comment>
					<description>Returns the number of zero bits preceding the highest-order
 (&quot;leftmost&quot;) one-bit in the two&apos;s complement binary representation
 of the specified {@code int} value.  Returns 32 if the
 specified value has no one-bits in its two&apos;s complement representation,
 in other words if it is equal to zero.

 &lt;p&gt;Note that this method is closely related to the logarithm base 2.
 For all positive {@code int} values x:
 &lt;ul&gt;
 &lt;li&gt;floor(log&lt;sub&gt;2&lt;/sub&gt;(x)) = {@code 31 - numberOfLeadingZeros(x)}
 &lt;li&gt;ceil(log&lt;sub&gt;2&lt;/sub&gt;(x)) = {@code 32 - numberOfLeadingZeros(x - 1)}
 &lt;/ul&gt;</description>
					<attribute name="@return">
						<description>the number of zero bits preceding the highest-order
     (&quot;leftmost&quot;) one-bit in the two&apos;s complement binary representation
     of the specified {@code int} value, or 32 if the value
     is equal to zero.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="i" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="numberOfTrailingZeros" returncomment="the number of zero bits following the lowest-order (&quot;rightmost&quot;)
     one-bit in the two&apos;s complement binary representation of the
     specified {@code int} value, or 32 if the value is equal
     to zero." fulltype="int" type="int">
				<comment>
					<description>Returns the number of zero bits following the lowest-order (&quot;rightmost&quot;)
 one-bit in the two&apos;s complement binary representation of the specified
 {@code int} value.  Returns 32 if the specified value has no
 one-bits in its two&apos;s complement representation, in other words if it is
 equal to zero.</description>
					<attribute name="@return">
						<description>the number of zero bits following the lowest-order (&quot;rightmost&quot;)
     one-bit in the two&apos;s complement binary representation of the
     specified {@code int} value, or 32 if the value is equal
     to zero.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="i" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="bitCount" returncomment="the number of one-bits in the two&apos;s complement binary
     representation of the specified {@code int} value." fulltype="int" type="int">
				<comment>
					<description>Returns the number of one-bits in the two&apos;s complement binary
 representation of the specified {@code int} value.  This function is
 sometimes referred to as the &lt;i&gt;population count&lt;/i&gt;.</description>
					<attribute name="@return">
						<description>the number of one-bits in the two&apos;s complement binary
     representation of the specified {@code int} value.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="i" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="rotateLeft" returncomment="the value obtained by rotating the two&apos;s complement binary
     representation of the specified {@code int} value left by the
     specified number of bits." fulltype="int" type="int">
				<comment>
					<description>Returns the value obtained by rotating the two&apos;s complement binary
 representation of the specified {@code int} value left by the
 specified number of bits.  (Bits shifted out of the left hand, or
 high-order, side reenter on the right, or low-order.)

 &lt;p&gt;Note that left rotation with a negative distance is equivalent to
 right rotation: {@code rotateLeft(val, -distance) == rotateRight(val,
 distance)}.  Note also that rotation by any multiple of 32 is a
 no-op, so all but the last five bits of the rotation distance can be
 ignored, even if the distance is negative: {@code rotateLeft(val,
 distance) == rotateLeft(val, distance &amp; 0x1F)}.</description>
					<attribute name="@return">
						<description>the value obtained by rotating the two&apos;s complement binary
     representation of the specified {@code int} value left by the
     specified number of bits.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="i" fulltype="int" type="int" />
					<param name="distance" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="rotateRight" returncomment="the value obtained by rotating the two&apos;s complement binary
     representation of the specified {@code int} value right by the
     specified number of bits." fulltype="int" type="int">
				<comment>
					<description>Returns the value obtained by rotating the two&apos;s complement binary
 representation of the specified {@code int} value right by the
 specified number of bits.  (Bits shifted out of the right hand, or
 low-order, side reenter on the left, or high-order.)

 &lt;p&gt;Note that right rotation with a negative distance is equivalent to
 left rotation: {@code rotateRight(val, -distance) == rotateLeft(val,
 distance)}.  Note also that rotation by any multiple of 32 is a
 no-op, so all but the last five bits of the rotation distance can be
 ignored, even if the distance is negative: {@code rotateRight(val,
 distance) == rotateRight(val, distance &amp; 0x1F)}.</description>
					<attribute name="@return">
						<description>the value obtained by rotating the two&apos;s complement binary
     representation of the specified {@code int} value right by the
     specified number of bits.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="i" fulltype="int" type="int" />
					<param name="distance" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="reverse" returncomment="the value obtained by reversing order of the bits in the
     specified {@code int} value." fulltype="int" type="int">
				<comment>
					<description>Returns the value obtained by reversing the order of the bits in the
 two&apos;s complement binary representation of the specified {@code int}
 value.</description>
					<attribute name="@return">
						<description>the value obtained by reversing order of the bits in the
     specified {@code int} value.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="i" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="signum" returncomment="the signum function of the specified {@code int} value." fulltype="int" type="int">
				<comment>
					<description>Returns the signum function of the specified {@code int} value.  (The
 return value is -1 if the specified value is negative; 0 if the
 specified value is zero; and 1 if the specified value is positive.)</description>
					<attribute name="@return">
						<description>the signum function of the specified {@code int} value.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="i" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="reverseBytes" returncomment="the value obtained by reversing the bytes in the specified
     {@code int} value." fulltype="int" type="int">
				<comment>
					<description>Returns the value obtained by reversing the order of the bytes in the
 two&apos;s complement representation of the specified {@code int} value.</description>
					<attribute name="@return">
						<description>the value obtained by reversing the bytes in the specified
     {@code int} value.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="i" fulltype="int" type="int" />
				</params>
			</method>
		</methods>
		<jelclass superclass="Object" visibility="private" package="java.lang" superclassfulltype="java.lang.Object" fulltype="java.lang.Integer.IntegerCache" type="Integer.IntegerCache">
			<fields>
				<field final="true" static="true" visibility="package-private" name="cache" fulltype="java.lang.Integer[]" type="Integer" />
			</fields>
			<methods>
				<constructor visibility="private" name="Integer.IntegerCache" />
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="Object" visibility="private" package="java.lang" superclassfulltype="java.lang.Object" fulltype="java.lang.Integer.IntegerCache" type="Integer.IntegerCache">
		<fields>
			<field final="true" static="true" visibility="package-private" name="cache" fulltype="java.lang.Integer[]" type="Integer" />
		</fields>
		<methods>
			<constructor visibility="private" name="Integer.IntegerCache" />
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="java.lang" interface="true" fulltype="java.lang.Comparable" type="Comparable">
		<comment>
			<description>This interface imposes a total ordering on the objects of each class that
 implements it.  This ordering is referred to as the class&apos;s &lt;i&gt;natural
 ordering&lt;/i&gt;, and the class&apos;s &lt;tt&gt;compareTo&lt;/tt&gt; method is referred to as
 its &lt;i&gt;natural comparison method&lt;/i&gt;.&lt;p&gt;

 Lists (and arrays) of objects that implement this interface can be sorted
 automatically by {@link Collections#sort(List) Collections.sort} (and
 {@link Arrays#sort(Object[]) Arrays.sort}).  Objects that implement this
 interface can be used as keys in a {@linkplain SortedMap sorted map} or as
 elements in a {@linkplain SortedSet sorted set}, without the need to
 specify a {@linkplain Comparator comparator}.&lt;p&gt;

 The natural ordering for a class &lt;tt&gt;C&lt;/tt&gt; is said to be &lt;i&gt;consistent
 with equals&lt;/i&gt; if and only if &lt;tt&gt;e1.compareTo(e2) == 0&lt;/tt&gt; has
 the same boolean value as &lt;tt&gt;e1.equals(e2)&lt;/tt&gt; for every
 &lt;tt&gt;e1&lt;/tt&gt; and &lt;tt&gt;e2&lt;/tt&gt; of class &lt;tt&gt;C&lt;/tt&gt;.  Note that &lt;tt&gt;null&lt;/tt&gt;
 is not an instance of any class, and &lt;tt&gt;e.compareTo(null)&lt;/tt&gt; should
 throw a &lt;tt&gt;NullPointerException&lt;/tt&gt; even though &lt;tt&gt;e.equals(null)&lt;/tt&gt;
 returns &lt;tt&gt;false&lt;/tt&gt;.&lt;p&gt;

 It is strongly recommended (though not required) that natural orderings be
 consistent with equals.  This is so because sorted sets (and sorted maps)
 without explicit comparators behave &quot;strangely&quot; when they are used with
 elements (or keys) whose natural ordering is inconsistent with equals.  In
 particular, such a sorted set (or sorted map) violates the general contract
 for set (or map), which is defined in terms of the &lt;tt&gt;equals&lt;/tt&gt;
 method.&lt;p&gt;

 For example, if one adds two keys &lt;tt&gt;a&lt;/tt&gt; and &lt;tt&gt;b&lt;/tt&gt; such that
 &lt;tt&gt;(!a.equals(b) &amp;&amp; a.compareTo(b) == 0)&lt;/tt&gt; to a sorted
 set that does not use an explicit comparator, the second &lt;tt&gt;add&lt;/tt&gt;
 operation returns false (and the size of the sorted set does not increase)
 because &lt;tt&gt;a&lt;/tt&gt; and &lt;tt&gt;b&lt;/tt&gt; are equivalent from the sorted set&apos;s
 perspective.&lt;p&gt;

 Virtually all Java core classes that implement &lt;tt&gt;Comparable&lt;/tt&gt; have natural
 orderings that are consistent with equals.  One exception is
 &lt;tt&gt;java.math.BigDecimal&lt;/tt&gt;, whose natural ordering equates
 &lt;tt&gt;BigDecimal&lt;/tt&gt; objects with equal values and different precisions
 (such as 4.0 and 4.00).&lt;p&gt;

 For the mathematically inclined, the &lt;i&gt;relation&lt;/i&gt; that defines
 the natural ordering on a given class C is:&lt;pre&gt;
       {(x, y) such that x.compareTo(y) &amp;lt;= 0}.
 &lt;/pre&gt; The &lt;i&gt;quotient&lt;/i&gt; for this total order is: &lt;pre&gt;
       {(x, y) such that x.compareTo(y) == 0}.
 &lt;/pre&gt;

 It follows immediately from the contract for &lt;tt&gt;compareTo&lt;/tt&gt; that the
 quotient is an &lt;i&gt;equivalence relation&lt;/i&gt; on &lt;tt&gt;C&lt;/tt&gt;, and that the
 natural ordering is a &lt;i&gt;total order&lt;/i&gt; on &lt;tt&gt;C&lt;/tt&gt;.  When we say that a
 class&apos;s natural ordering is &lt;i&gt;consistent with equals&lt;/i&gt;, we mean that the
 quotient for the natural ordering is the equivalence relation defined by
 the class&apos;s {@link Object#equals(Object) equals(Object)} method:&lt;pre&gt;
     {(x, y) such that x.equals(y)}. &lt;/pre&gt;&lt;p&gt;

 This interface is a member of the
 &lt;a href=&quot;{@docRoot}/../technotes/guides/collections/index.html&quot;&gt;
 Java Collections Framework&lt;/a&gt;.</description>
			<attribute name="@param">
				<description>&lt;T&gt; the type of objects that this object may be compared to</description>
			</attribute>
			<attribute name="@author">
				<description>Josh Bloch</description>
			</attribute>
			<attribute name="@see">
				<description>java.util.Comparator</description>
			</attribute>
			<attribute name="@since">
				<description>1.2</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="compareTo" returncomment="a negative integer, zero, or a positive integer as this object
          is less than, equal to, or greater than the specified object." fulltype="int" type="int">
				<comment>
					<description>Compares this object with the specified object for order.  Returns a
 negative integer, zero, or a positive integer as this object is less
 than, equal to, or greater than the specified object.

 &lt;p&gt;The implementor must ensure &lt;tt&gt;sgn(x.compareTo(y)) ==
 -sgn(y.compareTo(x))&lt;/tt&gt; for all &lt;tt&gt;x&lt;/tt&gt; and &lt;tt&gt;y&lt;/tt&gt;.  (This
 implies that &lt;tt&gt;x.compareTo(y)&lt;/tt&gt; must throw an exception iff
 &lt;tt&gt;y.compareTo(x)&lt;/tt&gt; throws an exception.)

 &lt;p&gt;The implementor must also ensure that the relation is transitive:
 &lt;tt&gt;(x.compareTo(y)&amp;gt;0 &amp;amp;&amp;amp; y.compareTo(z)&amp;gt;0)&lt;/tt&gt; implies
 &lt;tt&gt;x.compareTo(z)&amp;gt;0&lt;/tt&gt;.

 &lt;p&gt;Finally, the implementor must ensure that &lt;tt&gt;x.compareTo(y)==0&lt;/tt&gt;
 implies that &lt;tt&gt;sgn(x.compareTo(z)) == sgn(y.compareTo(z))&lt;/tt&gt;, for
 all &lt;tt&gt;z&lt;/tt&gt;.

 &lt;p&gt;It is strongly recommended, but &lt;i&gt;not&lt;/i&gt; strictly required that
 &lt;tt&gt;(x.compareTo(y)==0) == (x.equals(y))&lt;/tt&gt;.  Generally speaking, any
 class that implements the &lt;tt&gt;Comparable&lt;/tt&gt; interface and violates
 this condition should clearly indicate this fact.  The recommended
 language is &quot;Note: this class has a natural ordering that is
 inconsistent with equals.&quot;

 &lt;p&gt;In the foregoing description, the notation
 &lt;tt&gt;sgn(&lt;/tt&gt;&lt;i&gt;expression&lt;/i&gt;&lt;tt&gt;)&lt;/tt&gt; designates the mathematical
 &lt;i&gt;signum&lt;/i&gt; function, which is defined to return one of &lt;tt&gt;-1&lt;/tt&gt;,
 &lt;tt&gt;0&lt;/tt&gt;, or &lt;tt&gt;1&lt;/tt&gt; according to whether the value of
 &lt;i&gt;expression&lt;/i&gt; is negative, zero or positive.</description>
					<attribute name="@param">
						<description>o the object to be compared.</description>
					</attribute>
					<attribute name="@return">
						<description>a negative integer, zero, or a positive integer as this object
          is less than, equal to, or greater than the specified object.</description>
					</attribute>
					<attribute name="@throws">
						<description>ClassCastException if the specified object&apos;s type prevents it
         from being compared to this object.</description>
					</attribute>
				</comment>
				<params>
					<param name="o" comment="the object to be compared." fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass final="true" superclass="Object" visibility="public" package="java.lang" superclassfulltype="java.lang.Object" fulltype="java.lang.Void" type="Void">
		<comment>
			<description>The {@code Void} class is an uninstantiable placeholder class to hold a
 reference to the {@code Class} object representing the Java keyword
 void.</description>
			<attribute name="@author">
				<description>unascribed</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.1</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" visibility="public" name="TYPE" fulltype="java.lang.Class" type="Class">
				<comment>
					<description>The {@code Class} object representing the pseudo-type corresponding to
 the keyword {@code void}.</description>
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="private" name="Void" />
		</methods>
	</jelclass>
	<jelclass superclass="Error" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.Error" fulltype="java.lang.LinkageError" type="LinkageError">
		<comment>
			<description>Subclasses of &lt;code&gt;LinkageError&lt;/code&gt; indicate that a class has
 some dependency on another class; however, the latter class has
 incompatibly changed after the compilation of the former class.</description>
			<attribute name="@author">
				<description>Frank Yellin</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.0</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="LinkageError">
				<comment>
					<description>Constructs a &lt;code&gt;LinkageError&lt;/code&gt; with no detail message.</description>
				</comment>
			</constructor>
			<constructor visibility="public" name="LinkageError">
				<comment>
					<description>Constructs a &lt;code&gt;LinkageError&lt;/code&gt; with the specified detail
 message.</description>
					<attribute name="@param">
						<description>s   the detail message.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the detail message." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass abstract="true" superclass="Object" visibility="public" package="java.lang" superclassfulltype="java.lang.Object" fulltype="java.lang.Process" type="Process">
		<comment>
			<description>The {@link ProcessBuilder#start()} and
 {@link Runtime#exec(String[],String[],File) Runtime.exec}
 methods create a native process and return an instance of a
 subclass of {@code Process} that can be used to control the process
 and obtain information about it.  The class {@code Process}
 provides methods for performing input from the process, performing
 output to the process, waiting for the process to complete,
 checking the exit status of the process, and destroying (killing)
 the process.

 &lt;p&gt;The methods that create processes may not work well for special
 processes on certain native platforms, such as native windowing
 processes, daemon processes, Win16/DOS processes on Microsoft
 Windows, or shell scripts.  The created subprocess does not have
 its own terminal or console.  All its standard I/O (i.e. stdin,
 stdout, stderr) operations will be redirected to the parent process
 through three streams
 ({@link #getOutputStream()},
 {@link #getInputStream()},
 {@link #getErrorStream()}).
 The parent process uses these streams to feed input to and get output
 from the subprocess.  Because some native platforms only provide
 limited buffer size for standard input and output streams, failure
 to promptly write the input stream or read the output stream of
 the subprocess may cause the subprocess to block, and even deadlock.

 &lt;p&gt;The subprocess is not killed when there are no more references to
 the {@code Process} object, but rather the subprocess
 continues executing asynchronously.

 &lt;p&gt;There is no requirement that a process represented by a {@code
 Process} object execute asynchronously or concurrently with respect
 to the Java process that owns the {@code Process} object.</description>
			<attribute name="@author">
				<description>unascribed</description>
			</attribute>
			<attribute name="@see">
				<description>ProcessBuilder</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.0</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="Process" />
			<method abstract="true" visibility="public" name="getOutputStream" returncomment="the output stream connected to the normal input of the
         subprocess" fulltype="java.io.OutputStream" type="OutputStream">
				<comment>
					<description>Returns the output stream connected to the normal input of the
 subprocess.  Output to the stream is piped into the standard
 input stream of the process represented by this {@code Process}
 object.

 &lt;p&gt;Implementation note: It is a good idea for the returned
 output stream to be buffered.</description>
					<attribute name="@return">
						<description>the output stream connected to the normal input of the
         subprocess</description>
					</attribute>
				</comment>
			</method>
			<method abstract="true" visibility="public" name="getInputStream" returncomment="the input stream connected to the normal output of the
         subprocess" fulltype="java.io.InputStream" type="InputStream">
				<comment>
					<description>Returns the input stream connected to the normal output of the
 subprocess.  The stream obtains data piped from the standard
 output stream of the process represented by this {@code
 Process} object.

 &lt;p&gt;Implementation note: It is a good idea for the returned
 input stream to be buffered.</description>
					<attribute name="@return">
						<description>the input stream connected to the normal output of the
         subprocess</description>
					</attribute>
					<attribute name="@see">
						<description>ProcessBuilder#redirectErrorStream()</description>
					</attribute>
				</comment>
			</method>
			<method abstract="true" visibility="public" name="getErrorStream" returncomment="the input stream connected to the error output stream of
         the subprocess" fulltype="java.io.InputStream" type="InputStream">
				<comment>
					<description>Returns the input stream connected to the error output stream of
 the subprocess.  The stream obtains data piped from the error
 output stream of the process represented by this {@code Process}
 object.

 &lt;p&gt;Implementation note: It is a good idea for the returned
 input stream to be buffered.</description>
					<attribute name="@return">
						<description>the input stream connected to the error output stream of
         the subprocess</description>
					</attribute>
					<attribute name="@see">
						<description>ProcessBuilder#redirectErrorStream()</description>
					</attribute>
				</comment>
			</method>
			<method abstract="true" visibility="public" name="waitFor" returncomment="the exit value of the subprocess represented by this
         {@code Process} object.  By convention, the value
         {@code 0} indicates normal termination." fulltype="int" type="int">
				<comment>
					<description>Causes the current thread to wait, if necessary, until the
 process represented by this {@code Process} object has
 terminated.  This method returns immediately if the subprocess
 has already terminated.  If the subprocess has not yet
 terminated, the calling thread will be blocked until the
 subprocess exits.</description>
					<attribute name="@return">
						<description>the exit value of the subprocess represented by this
         {@code Process} object.  By convention, the value
         {@code 0} indicates normal termination.</description>
					</attribute>
					<attribute name="@throws">
						<description>InterruptedException if the current thread is
         {@linkplain Thread#interrupt() interrupted} by another
         thread while it is waiting, then the wait is ended and
         an {@link InterruptedException} is thrown.</description>
					</attribute>
				</comment>
				<exceptions>
					<exception comment="if the current thread is
         {@linkplain Thread#interrupt() interrupted} by another
         thread while it is waiting, then the wait is ended and
         an {@link InterruptedException} is thrown." fulltype="java.lang.InterruptedException" type="InterruptedException" />
				</exceptions>
			</method>
			<method abstract="true" visibility="public" name="exitValue" returncomment="the exit value of the subprocess represented by this
         {@code Process} object.  By convention, the value
         {@code 0} indicates normal termination." fulltype="int" type="int">
				<comment>
					<description>Returns the exit value for the subprocess.</description>
					<attribute name="@return">
						<description>the exit value of the subprocess represented by this
         {@code Process} object.  By convention, the value
         {@code 0} indicates normal termination.</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalThreadStateException if the subprocess represented
         by this {@code Process} object has not yet terminated</description>
					</attribute>
				</comment>
			</method>
			<method abstract="true" visibility="public" name="destroy" fulltype="void" type="void">
				<comment>
					<description>Kills the subprocess. The subprocess represented by this
 {@code Process} object is forcibly terminated.</description>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="VirtualMachineError" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.VirtualMachineError" fulltype="java.lang.OutOfMemoryError" type="OutOfMemoryError">
		<comment>
			<description>Thrown when the Java Virtual Machine cannot allocate an object
 because it is out of memory, and no more memory could be made
 available by the garbage collector.</description>
			<attribute name="@author">
				<description>unascribed</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.0</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="OutOfMemoryError">
				<comment>
					<description>Constructs an &lt;code&gt;OutOfMemoryError&lt;/code&gt; with no detail message.</description>
				</comment>
			</constructor>
			<constructor visibility="public" name="OutOfMemoryError">
				<comment>
					<description>Constructs an &lt;code&gt;OutOfMemoryError&lt;/code&gt; with the specified
 detail message.</description>
					<attribute name="@param">
						<description>s   the detail message.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the detail message." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass final="true" superclass="Object" visibility="public" package="java.lang" superclassfulltype="java.lang.Object" fulltype="java.lang.StrictMath" type="StrictMath">
		<comment>
			<description>The class {@code StrictMath} contains methods for performing basic
 numeric operations such as the elementary exponential, logarithm,
 square root, and trigonometric functions.

 &lt;p&gt;To help ensure portability of Java programs, the definitions of
 some of the numeric functions in this package require that they
 produce the same results as certain published algorithms. These
 algorithms are available from the well-known network library
 {@code netlib} as the package &quot;Freely Distributable Math
 Library,&quot; &lt;a
 href=&quot;ftp://ftp.netlib.org/fdlibm.tar&quot;&gt;{@code fdlibm}&lt;/a&gt;. These
 algorithms, which are written in the C programming language, are
 then to be understood as executed with all floating-point
 operations following the rules of Java floating-point arithmetic.

 &lt;p&gt;The Java math library is defined with respect to
 {@code fdlibm} version 5.3. Where {@code fdlibm} provides
 more than one definition for a function (such as
 {@code acos}), use the &quot;IEEE 754 core function&quot; version
 (residing in a file whose name begins with the letter
 {@code e}).  The methods which require {@code fdlibm}
 semantics are {@code sin}, {@code cos}, {@code tan},
 {@code asin}, {@code acos}, {@code atan},
 {@code exp}, {@code log}, {@code log10},
 {@code cbrt}, {@code atan2}, {@code pow},
 {@code sinh}, {@code cosh}, {@code tanh},
 {@code hypot}, {@code expm1}, and {@code log1p}.</description>
			<attribute name="@author">
				<description>unascribed</description>
			</attribute>
			<attribute name="@author">
				<description>Joseph D. Darcy</description>
			</attribute>
			<attribute name="@since">
				<description>1.3</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="2.718281828459045" visibility="public" name="E" constexpr="2.718281828459045" fulltype="double" type="double">
				<comment>
					<description>The {@code double} value that is closer than any other to
 &lt;i&gt;e&lt;/i&gt;, the base of the natural logarithms.</description>
				</comment>
			</field>
			<field final="true" static="true" const="3.141592653589793" visibility="public" name="PI" constexpr="3.141592653589793" fulltype="double" type="double">
				<comment>
					<description>The {@code double} value that is closer than any other to
 &lt;i&gt;pi&lt;/i&gt;, the ratio of the circumference of a circle to its
 diameter.</description>
				</comment>
			</field>
			<field static="true" visibility="private" name="randomNumberGenerator" fulltype="java.util.Random" type="Random" />
			<field static="true" visibility="private" name="negativeZeroFloatBits" fulltype="long" type="long" />
			<field static="true" visibility="private" name="negativeZeroDoubleBits" fulltype="long" type="long" />
		</fields>
		<methods>
			<constructor visibility="private" name="StrictMath">
				<comment>
					<description>Don&apos;t let anyone instantiate this class.</description>
				</comment>
			</constructor>
			<method static="true" visibility="public" name="sin" returncomment="the sine of the argument." fulltype="double" type="double">
				<comment>
					<description>Returns the trigonometric sine of an angle. Special cases:
 &lt;ul&gt;&lt;li&gt;If the argument is NaN or an infinity, then the
 result is NaN.
 &lt;li&gt;If the argument is zero, then the result is a zero with the
 same sign as the argument.&lt;/ul&gt;</description>
					<attribute name="@param">
						<description>a   an angle, in radians.</description>
					</attribute>
					<attribute name="@return">
						<description>the sine of the argument.</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="an angle, in radians." fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="cos" returncomment="the cosine of the argument." fulltype="double" type="double">
				<comment>
					<description>Returns the trigonometric cosine of an angle. Special cases:
 &lt;ul&gt;&lt;li&gt;If the argument is NaN or an infinity, then the
 result is NaN.&lt;/ul&gt;</description>
					<attribute name="@param">
						<description>a   an angle, in radians.</description>
					</attribute>
					<attribute name="@return">
						<description>the cosine of the argument.</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="an angle, in radians." fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="tan" returncomment="the tangent of the argument." fulltype="double" type="double">
				<comment>
					<description>Returns the trigonometric tangent of an angle. Special cases:
 &lt;ul&gt;&lt;li&gt;If the argument is NaN or an infinity, then the result
 is NaN.
 &lt;li&gt;If the argument is zero, then the result is a zero with the
 same sign as the argument.&lt;/ul&gt;</description>
					<attribute name="@param">
						<description>a   an angle, in radians.</description>
					</attribute>
					<attribute name="@return">
						<description>the tangent of the argument.</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="an angle, in radians." fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="asin" returncomment="the arc sine of the argument." fulltype="double" type="double">
				<comment>
					<description>Returns the arc sine of a value; the returned angle is in the
 range -&lt;i&gt;pi&lt;/i&gt;/2 through &lt;i&gt;pi&lt;/i&gt;/2.  Special cases:
 &lt;ul&gt;&lt;li&gt;If the argument is NaN or its absolute value is greater
 than 1, then the result is NaN.
 &lt;li&gt;If the argument is zero, then the result is a zero with the
 same sign as the argument.&lt;/ul&gt;</description>
					<attribute name="@param">
						<description>a   the value whose arc sine is to be returned.</description>
					</attribute>
					<attribute name="@return">
						<description>the arc sine of the argument.</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="the value whose arc sine is to be returned." fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="acos" returncomment="the arc cosine of the argument." fulltype="double" type="double">
				<comment>
					<description>Returns the arc cosine of a value; the returned angle is in the
 range 0.0 through &lt;i&gt;pi&lt;/i&gt;.  Special case:
 &lt;ul&gt;&lt;li&gt;If the argument is NaN or its absolute value is greater
 than 1, then the result is NaN.&lt;/ul&gt;</description>
					<attribute name="@param">
						<description>a   the value whose arc cosine is to be returned.</description>
					</attribute>
					<attribute name="@return">
						<description>the arc cosine of the argument.</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="the value whose arc cosine is to be returned." fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="atan" returncomment="the arc tangent of the argument." fulltype="double" type="double">
				<comment>
					<description>Returns the arc tangent of a value; the returned angle is in the
 range -&lt;i&gt;pi&lt;/i&gt;/2 through &lt;i&gt;pi&lt;/i&gt;/2.  Special cases:
 &lt;ul&gt;&lt;li&gt;If the argument is NaN, then the result is NaN.
 &lt;li&gt;If the argument is zero, then the result is a zero with the
 same sign as the argument.&lt;/ul&gt;</description>
					<attribute name="@param">
						<description>a   the value whose arc tangent is to be returned.</description>
					</attribute>
					<attribute name="@return">
						<description>the arc tangent of the argument.</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="the value whose arc tangent is to be returned." fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="toRadians" returncomment="the measurement of the angle {@code angdeg}
          in radians." fulltype="double" type="double">
				<comment>
					<description>Converts an angle measured in degrees to an approximately
 equivalent angle measured in radians.  The conversion from
 degrees to radians is generally inexact.</description>
					<attribute name="@param">
						<description>angdeg   an angle, in degrees</description>
					</attribute>
					<attribute name="@return">
						<description>the measurement of the angle {@code angdeg}
          in radians.</description>
					</attribute>
				</comment>
				<params>
					<param name="angdeg" comment="an angle, in degrees" fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="toDegrees" returncomment="the measurement of the angle {@code angrad}
          in degrees." fulltype="double" type="double">
				<comment>
					<description>Converts an angle measured in radians to an approximately
 equivalent angle measured in degrees.  The conversion from
 radians to degrees is generally inexact; users should
 &lt;i&gt;not&lt;/i&gt; expect {@code cos(toRadians(90.0))} to exactly
 equal {@code 0.0}.</description>
					<attribute name="@param">
						<description>angrad   an angle, in radians</description>
					</attribute>
					<attribute name="@return">
						<description>the measurement of the angle {@code angrad}
          in degrees.</description>
					</attribute>
				</comment>
				<params>
					<param name="angrad" comment="an angle, in radians" fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="exp" returncomment="the value &lt;i&gt;e&lt;/i&gt;&lt;sup&gt;{@code a}&lt;/sup&gt;,
          where &lt;i&gt;e&lt;/i&gt; is the base of the natural logarithms." fulltype="double" type="double">
				<comment>
					<description>Returns Euler&apos;s number &lt;i&gt;e&lt;/i&gt; raised to the power of a
 {@code double} value. Special cases:
 &lt;ul&gt;&lt;li&gt;If the argument is NaN, the result is NaN.
 &lt;li&gt;If the argument is positive infinity, then the result is
 positive infinity.
 &lt;li&gt;If the argument is negative infinity, then the result is
 positive zero.&lt;/ul&gt;</description>
					<attribute name="@param">
						<description>a   the exponent to raise &lt;i&gt;e&lt;/i&gt; to.</description>
					</attribute>
					<attribute name="@return">
						<description>the value &lt;i&gt;e&lt;/i&gt;&lt;sup&gt;{@code a}&lt;/sup&gt;,
          where &lt;i&gt;e&lt;/i&gt; is the base of the natural logarithms.</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="the exponent to raise &lt;i&gt;e&lt;/i&gt; to." fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="log" returncomment="the value ln&amp;nbsp;{@code a}, the natural logarithm of
          {@code a}." fulltype="double" type="double">
				<comment>
					<description>Returns the natural logarithm (base &lt;i&gt;e&lt;/i&gt;) of a {@code double}
 value. Special cases:
 &lt;ul&gt;&lt;li&gt;If the argument is NaN or less than zero, then the result
 is NaN.
 &lt;li&gt;If the argument is positive infinity, then the result is
 positive infinity.
 &lt;li&gt;If the argument is positive zero or negative zero, then the
 result is negative infinity.&lt;/ul&gt;</description>
					<attribute name="@param">
						<description>a   a value</description>
					</attribute>
					<attribute name="@return">
						<description>the value ln&amp;nbsp;{@code a}, the natural logarithm of
          {@code a}.</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="a value" fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="log10" returncomment="the base 10 logarithm of  {@code a}." fulltype="double" type="double">
				<comment>
					<description>Returns the base 10 logarithm of a {@code double} value.
 Special cases:

 &lt;ul&gt;&lt;li&gt;If the argument is NaN or less than zero, then the result
 is NaN.
 &lt;li&gt;If the argument is positive infinity, then the result is
 positive infinity.
 &lt;li&gt;If the argument is positive zero or negative zero, then the
 result is negative infinity.
 &lt;li&gt; If the argument is equal to 10&lt;sup&gt;&lt;i&gt;n&lt;/i&gt;&lt;/sup&gt; for
 integer &lt;i&gt;n&lt;/i&gt;, then the result is &lt;i&gt;n&lt;/i&gt;.
 &lt;/ul&gt;</description>
					<attribute name="@param">
						<description>a   a value</description>
					</attribute>
					<attribute name="@return">
						<description>the base 10 logarithm of  {@code a}.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="a value" fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="sqrt" returncomment="the positive square root of {@code a}." fulltype="double" type="double">
				<comment>
					<description>Returns the correctly rounded positive square root of a
 {@code double} value.
 Special cases:
 &lt;ul&gt;&lt;li&gt;If the argument is NaN or less than zero, then the result
 is NaN.
 &lt;li&gt;If the argument is positive infinity, then the result is positive
 infinity.
 &lt;li&gt;If the argument is positive zero or negative zero, then the
 result is the same as the argument.&lt;/ul&gt;
 Otherwise, the result is the {@code double} value closest to
 the true mathematical square root of the argument value.</description>
					<attribute name="@param">
						<description>a   a value.</description>
					</attribute>
					<attribute name="@return">
						<description>the positive square root of {@code a}.</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="a value." fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="cbrt" returncomment="the cube root of {@code a}." fulltype="double" type="double">
				<comment>
					<description>Returns the cube root of a {@code double} value.  For
 positive finite {@code x}, {@code cbrt(-x) ==
 -cbrt(x)}; that is, the cube root of a negative value is
 the negative of the cube root of that value&apos;s magnitude.
 Special cases:

 &lt;ul&gt;

 &lt;li&gt;If the argument is NaN, then the result is NaN.

 &lt;li&gt;If the argument is infinite, then the result is an infinity
 with the same sign as the argument.

 &lt;li&gt;If the argument is zero, then the result is a zero with the
 same sign as the argument.

 &lt;/ul&gt;</description>
					<attribute name="@param">
						<description>a   a value.</description>
					</attribute>
					<attribute name="@return">
						<description>the cube root of {@code a}.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="a value." fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="IEEEremainder" returncomment="the remainder when {@code f1} is divided by
          {@code f2}." fulltype="double" type="double">
				<comment>
					<description>Computes the remainder operation on two arguments as prescribed
 by the IEEE 754 standard.
 The remainder value is mathematically equal to
 &lt;code&gt;f1&amp;nbsp;-&amp;nbsp;f2&lt;/code&gt;&amp;nbsp;&amp;times;&amp;nbsp;&lt;i&gt;n&lt;/i&gt;,
 where &lt;i&gt;n&lt;/i&gt; is the mathematical integer closest to the exact
 mathematical value of the quotient {@code f1/f2}, and if two
 mathematical integers are equally close to {@code f1/f2},
 then &lt;i&gt;n&lt;/i&gt; is the integer that is even. If the remainder is
 zero, its sign is the same as the sign of the first argument.
 Special cases:
 &lt;ul&gt;&lt;li&gt;If either argument is NaN, or the first argument is infinite,
 or the second argument is positive zero or negative zero, then the
 result is NaN.
 &lt;li&gt;If the first argument is finite and the second argument is
 infinite, then the result is the same as the first argument.&lt;/ul&gt;</description>
					<attribute name="@param">
						<description>f1   the dividend.</description>
					</attribute>
					<attribute name="@param">
						<description>f2   the divisor.</description>
					</attribute>
					<attribute name="@return">
						<description>the remainder when {@code f1} is divided by
          {@code f2}.</description>
					</attribute>
				</comment>
				<params>
					<param name="f1" comment="the dividend." fulltype="double" type="double" />
					<param name="f2" comment="the divisor." fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="ceil" returncomment="the smallest (closest to negative infinity)
          floating-point value that is greater than or equal to
          the argument and is equal to a mathematical integer." fulltype="double" type="double">
				<comment>
					<description>Returns the smallest (closest to negative infinity)
 {@code double} value that is greater than or equal to the
 argument and is equal to a mathematical integer. Special cases:
 &lt;ul&gt;&lt;li&gt;If the argument value is already equal to a
 mathematical integer, then the result is the same as the
 argument.  &lt;li&gt;If the argument is NaN or an infinity or
 positive zero or negative zero, then the result is the same as
 the argument.  &lt;li&gt;If the argument value is less than zero but
 greater than -1.0, then the result is negative zero.&lt;/ul&gt; Note
 that the value of {@code StrictMath.ceil(x)} is exactly the
 value of {@code -StrictMath.floor(-x)}.</description>
					<attribute name="@param">
						<description>a   a value.</description>
					</attribute>
					<attribute name="@return">
						<description>the smallest (closest to negative infinity)
          floating-point value that is greater than or equal to
          the argument and is equal to a mathematical integer.</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="a value." fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="floor" returncomment="the largest (closest to positive infinity)
          floating-point value that less than or equal to the argument
          and is equal to a mathematical integer." fulltype="double" type="double">
				<comment>
					<description>Returns the largest (closest to positive infinity)
 {@code double} value that is less than or equal to the
 argument and is equal to a mathematical integer. Special cases:
 &lt;ul&gt;&lt;li&gt;If the argument value is already equal to a
 mathematical integer, then the result is the same as the
 argument.  &lt;li&gt;If the argument is NaN or an infinity or
 positive zero or negative zero, then the result is the same as
 the argument.&lt;/ul&gt;</description>
					<attribute name="@param">
						<description>a   a value.</description>
					</attribute>
					<attribute name="@return">
						<description>the largest (closest to positive infinity)
          floating-point value that less than or equal to the argument
          and is equal to a mathematical integer.</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="a value." fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="rint" returncomment="the closest floating-point value to {@code a} that is
          equal to a mathematical integer." fulltype="double" type="double">
				<comment>
					<description>Returns the {@code double} value that is closest in value
 to the argument and is equal to a mathematical integer. If two
 {@code double} values that are mathematical integers are
 equally close to the value of the argument, the result is the
 integer value that is even. Special cases:
 &lt;ul&gt;&lt;li&gt;If the argument value is already equal to a mathematical
 integer, then the result is the same as the argument.
 &lt;li&gt;If the argument is NaN or an infinity or positive zero or negative
 zero, then the result is the same as the argument.&lt;/ul&gt;</description>
					<attribute name="@param">
						<description>a   a value.</description>
					</attribute>
					<attribute name="@return">
						<description>the closest floating-point value to {@code a} that is
          equal to a mathematical integer.</description>
					</attribute>
					<attribute name="@author">
						<description>Joseph D. Darcy</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="a value." fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="atan2" returncomment="the &lt;i&gt;theta&lt;/i&gt; component of the point
          (&lt;i&gt;r&lt;/i&gt;,&amp;nbsp;&lt;i&gt;theta&lt;/i&gt;)
          in polar coordinates that corresponds to the point
          (&lt;i&gt;x&lt;/i&gt;,&amp;nbsp;&lt;i&gt;y&lt;/i&gt;) in Cartesian coordinates." fulltype="double" type="double">
				<comment>
					<description>Returns the angle &lt;i&gt;theta&lt;/i&gt; from the conversion of rectangular
 coordinates ({@code x},&amp;nbsp;{@code y}) to polar
 coordinates (r,&amp;nbsp;&lt;i&gt;theta&lt;/i&gt;).
 This method computes the phase &lt;i&gt;theta&lt;/i&gt; by computing an arc tangent
 of {@code y/x} in the range of -&lt;i&gt;pi&lt;/i&gt; to &lt;i&gt;pi&lt;/i&gt;. Special
 cases:
 &lt;ul&gt;&lt;li&gt;If either argument is NaN, then the result is NaN.
 &lt;li&gt;If the first argument is positive zero and the second argument
 is positive, or the first argument is positive and finite and the
 second argument is positive infinity, then the result is positive
 zero.
 &lt;li&gt;If the first argument is negative zero and the second argument
 is positive, or the first argument is negative and finite and the
 second argument is positive infinity, then the result is negative zero.
 &lt;li&gt;If the first argument is positive zero and the second argument
 is negative, or the first argument is positive and finite and the
 second argument is negative infinity, then the result is the
 {@code double} value closest to &lt;i&gt;pi&lt;/i&gt;.
 &lt;li&gt;If the first argument is negative zero and the second argument
 is negative, or the first argument is negative and finite and the
 second argument is negative infinity, then the result is the
 {@code double} value closest to -&lt;i&gt;pi&lt;/i&gt;.
 &lt;li&gt;If the first argument is positive and the second argument is
 positive zero or negative zero, or the first argument is positive
 infinity and the second argument is finite, then the result is the
 {@code double} value closest to &lt;i&gt;pi&lt;/i&gt;/2.
 &lt;li&gt;If the first argument is negative and the second argument is
 positive zero or negative zero, or the first argument is negative
 infinity and the second argument is finite, then the result is the
 {@code double} value closest to -&lt;i&gt;pi&lt;/i&gt;/2.
 &lt;li&gt;If both arguments are positive infinity, then the result is the
 {@code double} value closest to &lt;i&gt;pi&lt;/i&gt;/4.
 &lt;li&gt;If the first argument is positive infinity and the second argument
 is negative infinity, then the result is the {@code double}
 value closest to 3*&lt;i&gt;pi&lt;/i&gt;/4.
 &lt;li&gt;If the first argument is negative infinity and the second argument
 is positive infinity, then the result is the {@code double} value
 closest to -&lt;i&gt;pi&lt;/i&gt;/4.
 &lt;li&gt;If both arguments are negative infinity, then the result is the
 {@code double} value closest to -3*&lt;i&gt;pi&lt;/i&gt;/4.&lt;/ul&gt;</description>
					<attribute name="@param">
						<description>y   the ordinate coordinate</description>
					</attribute>
					<attribute name="@param">
						<description>x   the abscissa coordinate</description>
					</attribute>
					<attribute name="@return">
						<description>the &lt;i&gt;theta&lt;/i&gt; component of the point
          (&lt;i&gt;r&lt;/i&gt;,&amp;nbsp;&lt;i&gt;theta&lt;/i&gt;)
          in polar coordinates that corresponds to the point
          (&lt;i&gt;x&lt;/i&gt;,&amp;nbsp;&lt;i&gt;y&lt;/i&gt;) in Cartesian coordinates.</description>
					</attribute>
				</comment>
				<params>
					<param name="y" comment="the ordinate coordinate" fulltype="double" type="double" />
					<param name="x" comment="the abscissa coordinate" fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="pow" returncomment="the value {@code a}&lt;sup&gt;{@code b}&lt;/sup&gt;." fulltype="double" type="double">
				<comment>
					<description>Returns the value of the first argument raised to the power of the
 second argument. Special cases:

 &lt;ul&gt;&lt;li&gt;If the second argument is positive or negative zero, then the
 result is 1.0.
 &lt;li&gt;If the second argument is 1.0, then the result is the same as the
 first argument.
 &lt;li&gt;If the second argument is NaN, then the result is NaN.
 &lt;li&gt;If the first argument is NaN and the second argument is nonzero,
 then the result is NaN.

 &lt;li&gt;If
 &lt;ul&gt;
 &lt;li&gt;the absolute value of the first argument is greater than 1
 and the second argument is positive infinity, or
 &lt;li&gt;the absolute value of the first argument is less than 1 and
 the second argument is negative infinity,
 &lt;/ul&gt;
 then the result is positive infinity.

 &lt;li&gt;If
 &lt;ul&gt;
 &lt;li&gt;the absolute value of the first argument is greater than 1 and
 the second argument is negative infinity, or
 &lt;li&gt;the absolute value of the
 first argument is less than 1 and the second argument is positive
 infinity,
 &lt;/ul&gt;
 then the result is positive zero.

 &lt;li&gt;If the absolute value of the first argument equals 1 and the
 second argument is infinite, then the result is NaN.

 &lt;li&gt;If
 &lt;ul&gt;
 &lt;li&gt;the first argument is positive zero and the second argument
 is greater than zero, or
 &lt;li&gt;the first argument is positive infinity and the second
 argument is less than zero,
 &lt;/ul&gt;
 then the result is positive zero.

 &lt;li&gt;If
 &lt;ul&gt;
 &lt;li&gt;the first argument is positive zero and the second argument
 is less than zero, or
 &lt;li&gt;the first argument is positive infinity and the second
 argument is greater than zero,
 &lt;/ul&gt;
 then the result is positive infinity.

 &lt;li&gt;If
 &lt;ul&gt;
 &lt;li&gt;the first argument is negative zero and the second argument
 is greater than zero but not a finite odd integer, or
 &lt;li&gt;the first argument is negative infinity and the second
 argument is less than zero but not a finite odd integer,
 &lt;/ul&gt;
 then the result is positive zero.

 &lt;li&gt;If
 &lt;ul&gt;
 &lt;li&gt;the first argument is negative zero and the second argument
 is a positive finite odd integer, or
 &lt;li&gt;the first argument is negative infinity and the second
 argument is a negative finite odd integer,
 &lt;/ul&gt;
 then the result is negative zero.

 &lt;li&gt;If
 &lt;ul&gt;
 &lt;li&gt;the first argument is negative zero and the second argument
 is less than zero but not a finite odd integer, or
 &lt;li&gt;the first argument is negative infinity and the second
 argument is greater than zero but not a finite odd integer,
 &lt;/ul&gt;
 then the result is positive infinity.

 &lt;li&gt;If
 &lt;ul&gt;
 &lt;li&gt;the first argument is negative zero and the second argument
 is a negative finite odd integer, or
 &lt;li&gt;the first argument is negative infinity and the second
 argument is a positive finite odd integer,
 &lt;/ul&gt;
 then the result is negative infinity.

 &lt;li&gt;If the first argument is finite and less than zero
 &lt;ul&gt;
 &lt;li&gt; if the second argument is a finite even integer, the
 result is equal to the result of raising the absolute value of
 the first argument to the power of the second argument

 &lt;li&gt;if the second argument is a finite odd integer, the result
 is equal to the negative of the result of raising the absolute
 value of the first argument to the power of the second
 argument

 &lt;li&gt;if the second argument is finite and not an integer, then
 the result is NaN.
 &lt;/ul&gt;

 &lt;li&gt;If both arguments are integers, then the result is exactly equal
 to the mathematical result of raising the first argument to the power
 of the second argument if that result can in fact be represented
 exactly as a {@code double} value.&lt;/ul&gt;

 &lt;p&gt;(In the foregoing descriptions, a floating-point value is
 considered to be an integer if and only if it is finite and a
 fixed point of the method {@link #ceil ceil} or,
 equivalently, a fixed point of the method {@link #floor
 floor}. A value is a fixed point of a one-argument
 method if and only if the result of applying the method to the
 value is equal to the value.)</description>
					<attribute name="@param">
						<description>a   base.</description>
					</attribute>
					<attribute name="@param">
						<description>b   the exponent.</description>
					</attribute>
					<attribute name="@return">
						<description>the value {@code a}&lt;sup&gt;{@code b}&lt;/sup&gt;.</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="base." fulltype="double" type="double" />
					<param name="b" comment="the exponent." fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="round" returncomment="the value of the argument rounded to the nearest
          {@code int} value." fulltype="int" type="int">
				<comment>
					<description>Returns the closest {@code int} to the argument. The
 result is rounded to an integer by adding 1/2, taking the
 floor of the result, and casting the result to type {@code int}.
 In other words, the result is equal to the value of the expression:
 &lt;p&gt;{@code (int)Math.floor(a + 0.5f)}

 &lt;p&gt;Special cases:
 &lt;ul&gt;&lt;li&gt;If the argument is NaN, the result is 0.
 &lt;li&gt;If the argument is negative infinity or any value less than or
 equal to the value of {@code Integer.MIN_VALUE}, the result is
 equal to the value of {@code Integer.MIN_VALUE}.
 &lt;li&gt;If the argument is positive infinity or any value greater than or
 equal to the value of {@code Integer.MAX_VALUE}, the result is
 equal to the value of {@code Integer.MAX_VALUE}.&lt;/ul&gt;</description>
					<attribute name="@param">
						<description>a   a floating-point value to be rounded to an integer.</description>
					</attribute>
					<attribute name="@return">
						<description>the value of the argument rounded to the nearest
          {@code int} value.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Integer#MAX_VALUE</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Integer#MIN_VALUE</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="a floating-point value to be rounded to an integer." fulltype="float" type="float" />
				</params>
			</method>
			<method static="true" visibility="public" name="round" returncomment="the value of the argument rounded to the nearest
          {@code long} value." fulltype="long" type="long">
				<comment>
					<description>Returns the closest {@code long} to the argument. The result
 is rounded to an integer by adding 1/2, taking the floor of the
 result, and casting the result to type {@code long}. In other
 words, the result is equal to the value of the expression:
 &lt;p&gt;{@code (long)Math.floor(a + 0.5d)}

 &lt;p&gt;Special cases:
 &lt;ul&gt;&lt;li&gt;If the argument is NaN, the result is 0.
 &lt;li&gt;If the argument is negative infinity or any value less than or
 equal to the value of {@code Long.MIN_VALUE}, the result is
 equal to the value of {@code Long.MIN_VALUE}.
 &lt;li&gt;If the argument is positive infinity or any value greater than or
 equal to the value of {@code Long.MAX_VALUE}, the result is
 equal to the value of {@code Long.MAX_VALUE}.&lt;/ul&gt;</description>
					<attribute name="@param">
						<description>a  a floating-point value to be rounded to a
          {@code long}.</description>
					</attribute>
					<attribute name="@return">
						<description>the value of the argument rounded to the nearest
          {@code long} value.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Long#MAX_VALUE</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Long#MIN_VALUE</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="a floating-point value to be rounded to a
          {@code long}." fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" synchronized="true" visibility="private" name="initRNG" fulltype="void" type="void" />
			<method static="true" visibility="public" name="random" returncomment="a pseudorandom {@code double} greater than or equal
 to {@code 0.0} and less than {@code 1.0}." fulltype="double" type="double">
				<comment>
					<description>Returns a {@code double} value with a positive sign, greater
 than or equal to {@code 0.0} and less than {@code 1.0}.
 Returned values are chosen pseudorandomly with (approximately)
 uniform distribution from that range.

 &lt;p&gt;When this method is first called, it creates a single new
 pseudorandom-number generator, exactly as if by the expression
 &lt;blockquote&gt;{@code new java.util.Random}&lt;/blockquote&gt; This
 new pseudorandom-number generator is used thereafter for all
 calls to this method and is used nowhere else.

 &lt;p&gt;This method is properly synchronized to allow correct use by
 more than one thread. However, if many threads need to generate
 pseudorandom numbers at a great rate, it may reduce contention
 for each thread to have its own pseudorandom number generator.</description>
					<attribute name="@return">
						<description>a pseudorandom {@code double} greater than or equal
 to {@code 0.0} and less than {@code 1.0}.</description>
					</attribute>
					<attribute name="@see">
						<description>java.util.Random#nextDouble()</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="abs" returncomment="the absolute value of the argument." fulltype="int" type="int">
				<comment>
					<description>Returns the absolute value of an {@code int} value..
 If the argument is not negative, the argument is returned.
 If the argument is negative, the negation of the argument is returned.

 &lt;p&gt;Note that if the argument is equal to the value of
 {@link Integer#MIN_VALUE}, the most negative representable
 {@code int} value, the result is that same value, which is
 negative.</description>
					<attribute name="@param">
						<description>a   the  argument whose absolute value is to be determined.</description>
					</attribute>
					<attribute name="@return">
						<description>the absolute value of the argument.</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="the  argument whose absolute value is to be determined." fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="abs" returncomment="the absolute value of the argument." fulltype="long" type="long">
				<comment>
					<description>Returns the absolute value of a {@code long} value.
 If the argument is not negative, the argument is returned.
 If the argument is negative, the negation of the argument is returned.

 &lt;p&gt;Note that if the argument is equal to the value of
 {@link Long#MIN_VALUE}, the most negative representable
 {@code long} value, the result is that same value, which
 is negative.</description>
					<attribute name="@param">
						<description>a   the  argument whose absolute value is to be determined.</description>
					</attribute>
					<attribute name="@return">
						<description>the absolute value of the argument.</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="the  argument whose absolute value is to be determined." fulltype="long" type="long" />
				</params>
			</method>
			<method static="true" visibility="public" name="abs" returncomment="the absolute value of the argument." fulltype="float" type="float">
				<comment>
					<description>Returns the absolute value of a {@code float} value.
 If the argument is not negative, the argument is returned.
 If the argument is negative, the negation of the argument is returned.
 Special cases:
 &lt;ul&gt;&lt;li&gt;If the argument is positive zero or negative zero, the
 result is positive zero.
 &lt;li&gt;If the argument is infinite, the result is positive infinity.
 &lt;li&gt;If the argument is NaN, the result is NaN.&lt;/ul&gt;
 In other words, the result is the same as the value of the expression:
 &lt;p&gt;{@code Float.intBitsToFloat(0x7fffffff &amp; Float.floatToIntBits(a))}</description>
					<attribute name="@param">
						<description>a   the argument whose absolute value is to be determined</description>
					</attribute>
					<attribute name="@return">
						<description>the absolute value of the argument.</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="the argument whose absolute value is to be determined" fulltype="float" type="float" />
				</params>
			</method>
			<method static="true" visibility="public" name="abs" returncomment="the absolute value of the argument." fulltype="double" type="double">
				<comment>
					<description>Returns the absolute value of a {@code double} value.
 If the argument is not negative, the argument is returned.
 If the argument is negative, the negation of the argument is returned.
 Special cases:
 &lt;ul&gt;&lt;li&gt;If the argument is positive zero or negative zero, the result
 is positive zero.
 &lt;li&gt;If the argument is infinite, the result is positive infinity.
 &lt;li&gt;If the argument is NaN, the result is NaN.&lt;/ul&gt;
 In other words, the result is the same as the value of the expression:
 &lt;p&gt;{@code Double.longBitsToDouble((Double.doubleToLongBits(a)&lt;&lt;1)&gt;&gt;&gt;1)}</description>
					<attribute name="@param">
						<description>a   the argument whose absolute value is to be determined</description>
					</attribute>
					<attribute name="@return">
						<description>the absolute value of the argument.</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="the argument whose absolute value is to be determined" fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="max" returncomment="the larger of {@code a} and {@code b}." fulltype="int" type="int">
				<comment>
					<description>Returns the greater of two {@code int} values. That is, the
 result is the argument closer to the value of
 {@link Integer#MAX_VALUE}. If the arguments have the same value,
 the result is that same value.</description>
					<attribute name="@param">
						<description>a   an argument.</description>
					</attribute>
					<attribute name="@param">
						<description>b   another argument.</description>
					</attribute>
					<attribute name="@return">
						<description>the larger of {@code a} and {@code b}.</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="an argument." fulltype="int" type="int" />
					<param name="b" comment="another argument." fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="max" returncomment="the larger of {@code a} and {@code b}." fulltype="long" type="long">
				<comment>
					<description>Returns the greater of two {@code long} values. That is, the
 result is the argument closer to the value of
 {@link Long#MAX_VALUE}. If the arguments have the same value,
 the result is that same value.</description>
					<attribute name="@param">
						<description>a   an argument.</description>
					</attribute>
					<attribute name="@param">
						<description>b   another argument.</description>
					</attribute>
					<attribute name="@return">
						<description>the larger of {@code a} and {@code b}.</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="an argument." fulltype="long" type="long" />
					<param name="b" comment="another argument." fulltype="long" type="long" />
				</params>
			</method>
			<method static="true" visibility="public" name="max" returncomment="the larger of {@code a} and {@code b}." fulltype="float" type="float">
				<comment>
					<description>Returns the greater of two {@code float} values.  That is,
 the result is the argument closer to positive infinity. If the
 arguments have the same value, the result is that same
 value. If either value is NaN, then the result is NaN.  Unlike
 the numerical comparison operators, this method considers
 negative zero to be strictly smaller than positive zero. If one
 argument is positive zero and the other negative zero, the
 result is positive zero.</description>
					<attribute name="@param">
						<description>a   an argument.</description>
					</attribute>
					<attribute name="@param">
						<description>b   another argument.</description>
					</attribute>
					<attribute name="@return">
						<description>the larger of {@code a} and {@code b}.</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="an argument." fulltype="float" type="float" />
					<param name="b" comment="another argument." fulltype="float" type="float" />
				</params>
			</method>
			<method static="true" visibility="public" name="max" returncomment="the larger of {@code a} and {@code b}." fulltype="double" type="double">
				<comment>
					<description>Returns the greater of two {@code double} values.  That
 is, the result is the argument closer to positive infinity. If
 the arguments have the same value, the result is that same
 value. If either value is NaN, then the result is NaN.  Unlike
 the numerical comparison operators, this method considers
 negative zero to be strictly smaller than positive zero. If one
 argument is positive zero and the other negative zero, the
 result is positive zero.</description>
					<attribute name="@param">
						<description>a   an argument.</description>
					</attribute>
					<attribute name="@param">
						<description>b   another argument.</description>
					</attribute>
					<attribute name="@return">
						<description>the larger of {@code a} and {@code b}.</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="an argument." fulltype="double" type="double" />
					<param name="b" comment="another argument." fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="min" returncomment="the smaller of {@code a} and {@code b}." fulltype="int" type="int">
				<comment>
					<description>Returns the smaller of two {@code int} values. That is,
 the result the argument closer to the value of
 {@link Integer#MIN_VALUE}.  If the arguments have the same
 value, the result is that same value.</description>
					<attribute name="@param">
						<description>a   an argument.</description>
					</attribute>
					<attribute name="@param">
						<description>b   another argument.</description>
					</attribute>
					<attribute name="@return">
						<description>the smaller of {@code a} and {@code b}.</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="an argument." fulltype="int" type="int" />
					<param name="b" comment="another argument." fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="min" returncomment="the smaller of {@code a} and {@code b}." fulltype="long" type="long">
				<comment>
					<description>Returns the smaller of two {@code long} values. That is,
 the result is the argument closer to the value of
 {@link Long#MIN_VALUE}. If the arguments have the same
 value, the result is that same value.</description>
					<attribute name="@param">
						<description>a   an argument.</description>
					</attribute>
					<attribute name="@param">
						<description>b   another argument.</description>
					</attribute>
					<attribute name="@return">
						<description>the smaller of {@code a} and {@code b}.</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="an argument." fulltype="long" type="long" />
					<param name="b" comment="another argument." fulltype="long" type="long" />
				</params>
			</method>
			<method static="true" visibility="public" name="min" returncomment="the smaller of {@code a} and {@code b.}" fulltype="float" type="float">
				<comment>
					<description>Returns the smaller of two {@code float} values.  That is,
 the result is the value closer to negative infinity. If the
 arguments have the same value, the result is that same
 value. If either value is NaN, then the result is NaN.  Unlike
 the numerical comparison operators, this method considers
 negative zero to be strictly smaller than positive zero.  If
 one argument is positive zero and the other is negative zero,
 the result is negative zero.</description>
					<attribute name="@param">
						<description>a   an argument.</description>
					</attribute>
					<attribute name="@param">
						<description>b   another argument.</description>
					</attribute>
					<attribute name="@return">
						<description>the smaller of {@code a} and {@code b.}</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="an argument." fulltype="float" type="float" />
					<param name="b" comment="another argument." fulltype="float" type="float" />
				</params>
			</method>
			<method static="true" visibility="public" name="min" returncomment="the smaller of {@code a} and {@code b}." fulltype="double" type="double">
				<comment>
					<description>Returns the smaller of two {@code double} values.  That
 is, the result is the value closer to negative infinity. If the
 arguments have the same value, the result is that same
 value. If either value is NaN, then the result is NaN.  Unlike
 the numerical comparison operators, this method considers
 negative zero to be strictly smaller than positive zero. If one
 argument is positive zero and the other is negative zero, the
 result is negative zero.</description>
					<attribute name="@param">
						<description>a   an argument.</description>
					</attribute>
					<attribute name="@param">
						<description>b   another argument.</description>
					</attribute>
					<attribute name="@return">
						<description>the smaller of {@code a} and {@code b}.</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="an argument." fulltype="double" type="double" />
					<param name="b" comment="another argument." fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="ulp" returncomment="the size of an ulp of the argument" fulltype="double" type="double">
				<comment>
					<description>Returns the size of an ulp of the argument.  An ulp of a
 {@code double} value is the positive distance between this
 floating-point value and the {@code double} value next
 larger in magnitude.  Note that for non-NaN &lt;i&gt;x&lt;/i&gt;,
 &lt;code&gt;ulp(-&lt;i&gt;x&lt;/i&gt;) == ulp(&lt;i&gt;x&lt;/i&gt;)&lt;/code&gt;.

 &lt;p&gt;Special Cases:
 &lt;ul&gt;
 &lt;li&gt; If the argument is NaN, then the result is NaN.
 &lt;li&gt; If the argument is positive or negative infinity, then the
 result is positive infinity.
 &lt;li&gt; If the argument is positive or negative zero, then the result is
 {@code Double.MIN_VALUE}.
 &lt;li&gt; If the argument is &amp;plusmn;{@code Double.MAX_VALUE}, then
 the result is equal to 2&lt;sup&gt;971&lt;/sup&gt;.
 &lt;/ul&gt;</description>
					<attribute name="@param">
						<description>d the floating-point value whose ulp is to be returned</description>
					</attribute>
					<attribute name="@return">
						<description>the size of an ulp of the argument</description>
					</attribute>
					<attribute name="@author">
						<description>Joseph D. Darcy</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="d" comment="the floating-point value whose ulp is to be returned" fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="ulp" returncomment="the size of an ulp of the argument" fulltype="float" type="float">
				<comment>
					<description>Returns the size of an ulp of the argument.  An ulp of a
 {@code float} value is the positive distance between this
 floating-point value and the {@code float} value next
 larger in magnitude.  Note that for non-NaN &lt;i&gt;x&lt;/i&gt;,
 &lt;code&gt;ulp(-&lt;i&gt;x&lt;/i&gt;) == ulp(&lt;i&gt;x&lt;/i&gt;)&lt;/code&gt;.

 &lt;p&gt;Special Cases:
 &lt;ul&gt;
 &lt;li&gt; If the argument is NaN, then the result is NaN.
 &lt;li&gt; If the argument is positive or negative infinity, then the
 result is positive infinity.
 &lt;li&gt; If the argument is positive or negative zero, then the result is
 {@code Float.MIN_VALUE}.
 &lt;li&gt; If the argument is &amp;plusmn;{@code Float.MAX_VALUE}, then
 the result is equal to 2&lt;sup&gt;104&lt;/sup&gt;.
 &lt;/ul&gt;</description>
					<attribute name="@param">
						<description>f the floating-point value whose ulp is to be returned</description>
					</attribute>
					<attribute name="@return">
						<description>the size of an ulp of the argument</description>
					</attribute>
					<attribute name="@author">
						<description>Joseph D. Darcy</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="f" comment="the floating-point value whose ulp is to be returned" fulltype="float" type="float" />
				</params>
			</method>
			<method static="true" visibility="public" name="signum" returncomment="the signum function of the argument" fulltype="double" type="double">
				<comment>
					<description>Returns the signum function of the argument; zero if the argument
 is zero, 1.0 if the argument is greater than zero, -1.0 if the
 argument is less than zero.

 &lt;p&gt;Special Cases:
 &lt;ul&gt;
 &lt;li&gt; If the argument is NaN, then the result is NaN.
 &lt;li&gt; If the argument is positive zero or negative zero, then the
      result is the same as the argument.
 &lt;/ul&gt;</description>
					<attribute name="@param">
						<description>d the floating-point value whose signum is to be returned</description>
					</attribute>
					<attribute name="@return">
						<description>the signum function of the argument</description>
					</attribute>
					<attribute name="@author">
						<description>Joseph D. Darcy</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="d" comment="the floating-point value whose signum is to be returned" fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="signum" returncomment="the signum function of the argument" fulltype="float" type="float">
				<comment>
					<description>Returns the signum function of the argument; zero if the argument
 is zero, 1.0f if the argument is greater than zero, -1.0f if the
 argument is less than zero.

 &lt;p&gt;Special Cases:
 &lt;ul&gt;
 &lt;li&gt; If the argument is NaN, then the result is NaN.
 &lt;li&gt; If the argument is positive zero or negative zero, then the
      result is the same as the argument.
 &lt;/ul&gt;</description>
					<attribute name="@param">
						<description>f the floating-point value whose signum is to be returned</description>
					</attribute>
					<attribute name="@return">
						<description>the signum function of the argument</description>
					</attribute>
					<attribute name="@author">
						<description>Joseph D. Darcy</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="f" comment="the floating-point value whose signum is to be returned" fulltype="float" type="float" />
				</params>
			</method>
			<method static="true" visibility="public" name="sinh" returncomment="The hyperbolic sine of {@code x}." fulltype="double" type="double">
				<comment>
					<description>Returns the hyperbolic sine of a {@code double} value.
 The hyperbolic sine of &lt;i&gt;x&lt;/i&gt; is defined to be
 (&lt;i&gt;e&lt;sup&gt;x&lt;/sup&gt;&amp;nbsp;-&amp;nbsp;e&lt;sup&gt;-x&lt;/sup&gt;&lt;/i&gt;)/2
 where &lt;i&gt;e&lt;/i&gt; is {@linkplain Math#E Euler&apos;s number}.

 &lt;p&gt;Special cases:
 &lt;ul&gt;

 &lt;li&gt;If the argument is NaN, then the result is NaN.

 &lt;li&gt;If the argument is infinite, then the result is an infinity
 with the same sign as the argument.

 &lt;li&gt;If the argument is zero, then the result is a zero with the
 same sign as the argument.

 &lt;/ul&gt;</description>
					<attribute name="@param">
						<description>x The number whose hyperbolic sine is to be returned.</description>
					</attribute>
					<attribute name="@return">
						<description>The hyperbolic sine of {@code x}.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="x" comment="The number whose hyperbolic sine is to be returned." fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="cosh" returncomment="The hyperbolic cosine of {@code x}." fulltype="double" type="double">
				<comment>
					<description>Returns the hyperbolic cosine of a {@code double} value.
 The hyperbolic cosine of &lt;i&gt;x&lt;/i&gt; is defined to be
 (&lt;i&gt;e&lt;sup&gt;x&lt;/sup&gt;&amp;nbsp;+&amp;nbsp;e&lt;sup&gt;-x&lt;/sup&gt;&lt;/i&gt;)/2
 where &lt;i&gt;e&lt;/i&gt; is {@linkplain Math#E Euler&apos;s number}.

 &lt;p&gt;Special cases:
 &lt;ul&gt;

 &lt;li&gt;If the argument is NaN, then the result is NaN.

 &lt;li&gt;If the argument is infinite, then the result is positive
 infinity.

 &lt;li&gt;If the argument is zero, then the result is {@code 1.0}.

 &lt;/ul&gt;</description>
					<attribute name="@param">
						<description>x The number whose hyperbolic cosine is to be returned.</description>
					</attribute>
					<attribute name="@return">
						<description>The hyperbolic cosine of {@code x}.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="x" comment="The number whose hyperbolic cosine is to be returned." fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="tanh" returncomment="The hyperbolic tangent of {@code x}." fulltype="double" type="double">
				<comment>
					<description>Returns the hyperbolic tangent of a {@code double} value.
 The hyperbolic tangent of &lt;i&gt;x&lt;/i&gt; is defined to be
 (&lt;i&gt;e&lt;sup&gt;x&lt;/sup&gt;&amp;nbsp;-&amp;nbsp;e&lt;sup&gt;-x&lt;/sup&gt;&lt;/i&gt;)/(&lt;i&gt;e&lt;sup&gt;x&lt;/sup&gt;&amp;nbsp;+&amp;nbsp;e&lt;sup&gt;-x&lt;/sup&gt;&lt;/i&gt;),
 in other words, {@linkplain Math#sinh
 sinh(&lt;i&gt;x&lt;/i&gt;)}/{@linkplain Math#cosh cosh(&lt;i&gt;x&lt;/i&gt;)}.  Note
 that the absolute value of the exact tanh is always less than
 1.

 &lt;p&gt;Special cases:
 &lt;ul&gt;

 &lt;li&gt;If the argument is NaN, then the result is NaN.

 &lt;li&gt;If the argument is zero, then the result is a zero with the
 same sign as the argument.

 &lt;li&gt;If the argument is positive infinity, then the result is
 {@code +1.0}.

 &lt;li&gt;If the argument is negative infinity, then the result is
 {@code -1.0}.

 &lt;/ul&gt;</description>
					<attribute name="@param">
						<description>x The number whose hyperbolic tangent is to be returned.</description>
					</attribute>
					<attribute name="@return">
						<description>The hyperbolic tangent of {@code x}.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="x" comment="The number whose hyperbolic tangent is to be returned." fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="hypot" returncomment="sqrt(&lt;i&gt;x&lt;/i&gt;&lt;sup&gt;2&lt;/sup&gt;&amp;nbsp;+&lt;i&gt;y&lt;/i&gt;&lt;sup&gt;2&lt;/sup&gt;)
 without intermediate overflow or underflow" fulltype="double" type="double">
				<comment>
					<description>Returns sqrt(&lt;i&gt;x&lt;/i&gt;&lt;sup&gt;2&lt;/sup&gt;&amp;nbsp;+&lt;i&gt;y&lt;/i&gt;&lt;sup&gt;2&lt;/sup&gt;)
 without intermediate overflow or underflow.

 &lt;p&gt;Special cases:
 &lt;ul&gt;

 &lt;li&gt; If either argument is infinite, then the result
 is positive infinity.

 &lt;li&gt; If either argument is NaN and neither argument is infinite,
 then the result is NaN.

 &lt;/ul&gt;</description>
					<attribute name="@param">
						<description>x a value</description>
					</attribute>
					<attribute name="@param">
						<description>y a value</description>
					</attribute>
					<attribute name="@return">
						<description>sqrt(&lt;i&gt;x&lt;/i&gt;&lt;sup&gt;2&lt;/sup&gt;&amp;nbsp;+&lt;i&gt;y&lt;/i&gt;&lt;sup&gt;2&lt;/sup&gt;)
 without intermediate overflow or underflow</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="x" comment="a value" fulltype="double" type="double" />
					<param name="y" comment="a value" fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="expm1" returncomment="the value &lt;i&gt;e&lt;/i&gt;&lt;sup&gt;{@code x}&lt;/sup&gt;&amp;nbsp;-&amp;nbsp;1." fulltype="double" type="double">
				<comment>
					<description>Returns &lt;i&gt;e&lt;/i&gt;&lt;sup&gt;x&lt;/sup&gt;&amp;nbsp;-1.  Note that for values of
 &lt;i&gt;x&lt;/i&gt; near 0, the exact sum of
 {@code expm1(x)}&amp;nbsp;+&amp;nbsp;1 is much closer to the true
 result of &lt;i&gt;e&lt;/i&gt;&lt;sup&gt;x&lt;/sup&gt; than {@code exp(x)}.

 &lt;p&gt;Special cases:
 &lt;ul&gt;
 &lt;li&gt;If the argument is NaN, the result is NaN.

 &lt;li&gt;If the argument is positive infinity, then the result is
 positive infinity.

 &lt;li&gt;If the argument is negative infinity, then the result is
 -1.0.

 &lt;li&gt;If the argument is zero, then the result is a zero with the
 same sign as the argument.

 &lt;/ul&gt;</description>
					<attribute name="@param">
						<description>x   the exponent to raise &lt;i&gt;e&lt;/i&gt; to in the computation of
              &lt;i&gt;e&lt;/i&gt;&lt;sup&gt;{@code x}&lt;/sup&gt;&amp;nbsp;-1.</description>
					</attribute>
					<attribute name="@return">
						<description>the value &lt;i&gt;e&lt;/i&gt;&lt;sup&gt;{@code x}&lt;/sup&gt;&amp;nbsp;-&amp;nbsp;1.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="x" comment="the exponent to raise &lt;i&gt;e&lt;/i&gt; to in the computation of
              &lt;i&gt;e&lt;/i&gt;&lt;sup&gt;{@code x}&lt;/sup&gt;&amp;nbsp;-1." fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="log1p" returncomment="the value ln({@code x}&amp;nbsp;+&amp;nbsp;1), the natural
 log of {@code x}&amp;nbsp;+&amp;nbsp;1" fulltype="double" type="double">
				<comment>
					<description>Returns the natural logarithm of the sum of the argument and 1.
 Note that for small values {@code x}, the result of
 {@code log1p(x)} is much closer to the true result of ln(1
 + {@code x}) than the floating-point evaluation of
 {@code log(1.0+x)}.

 &lt;p&gt;Special cases:
 &lt;ul&gt;

 &lt;li&gt;If the argument is NaN or less than -1, then the result is
 NaN.

 &lt;li&gt;If the argument is positive infinity, then the result is
 positive infinity.

 &lt;li&gt;If the argument is negative one, then the result is
 negative infinity.

 &lt;li&gt;If the argument is zero, then the result is a zero with the
 same sign as the argument.

 &lt;/ul&gt;</description>
					<attribute name="@param">
						<description>x   a value</description>
					</attribute>
					<attribute name="@return">
						<description>the value ln({@code x}&amp;nbsp;+&amp;nbsp;1), the natural
 log of {@code x}&amp;nbsp;+&amp;nbsp;1</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="x" comment="a value" fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="copySign" returncomment="a value with the magnitude of {@code magnitude}
 and the sign of {@code sign}." fulltype="double" type="double">
				<comment>
					<description>Returns the first floating-point argument with the sign of the
 second floating-point argument.  For this method, a NaN
 {@code sign} argument is always treated as if it were
 positive.</description>
					<attribute name="@param">
						<description>magnitude  the parameter providing the magnitude of the result</description>
					</attribute>
					<attribute name="@param">
						<description>sign   the parameter providing the sign of the result</description>
					</attribute>
					<attribute name="@return">
						<description>a value with the magnitude of {@code magnitude}
 and the sign of {@code sign}.</description>
					</attribute>
					<attribute name="@since">
						<description>1.6</description>
					</attribute>
				</comment>
				<params>
					<param name="magnitude" comment="the parameter providing the magnitude of the result" fulltype="double" type="double" />
					<param name="sign" comment="the parameter providing the sign of the result" fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="copySign" returncomment="a value with the magnitude of {@code magnitude}
 and the sign of {@code sign}." fulltype="float" type="float">
				<comment>
					<description>Returns the first floating-point argument with the sign of the
 second floating-point argument.  For this method, a NaN
 {@code sign} argument is always treated as if it were
 positive.</description>
					<attribute name="@param">
						<description>magnitude  the parameter providing the magnitude of the result</description>
					</attribute>
					<attribute name="@param">
						<description>sign   the parameter providing the sign of the result</description>
					</attribute>
					<attribute name="@return">
						<description>a value with the magnitude of {@code magnitude}
 and the sign of {@code sign}.</description>
					</attribute>
					<attribute name="@since">
						<description>1.6</description>
					</attribute>
				</comment>
				<params>
					<param name="magnitude" comment="the parameter providing the magnitude of the result" fulltype="float" type="float" />
					<param name="sign" comment="the parameter providing the sign of the result" fulltype="float" type="float" />
				</params>
			</method>
			<method static="true" visibility="public" name="getExponent" fulltype="int" type="int">
				<comment>
					<description>Returns the unbiased exponent used in the representation of a
 {@code float}.  Special cases:

 &lt;ul&gt;
 &lt;li&gt;If the argument is NaN or infinite, then the result is
 {@link Float#MAX_EXPONENT} + 1.
 &lt;li&gt;If the argument is zero or subnormal, then the result is
 {@link Float#MIN_EXPONENT} -1.
 &lt;/ul&gt;</description>
					<attribute name="@param">
						<description>f a {@code float} value</description>
					</attribute>
					<attribute name="@since">
						<description>1.6</description>
					</attribute>
				</comment>
				<params>
					<param name="f" comment="a {@code float} value" fulltype="float" type="float" />
				</params>
			</method>
			<method static="true" visibility="public" name="getExponent" fulltype="int" type="int">
				<comment>
					<description>Returns the unbiased exponent used in the representation of a
 {@code double}.  Special cases:

 &lt;ul&gt;
 &lt;li&gt;If the argument is NaN or infinite, then the result is
 {@link Double#MAX_EXPONENT} + 1.
 &lt;li&gt;If the argument is zero or subnormal, then the result is
 {@link Double#MIN_EXPONENT} -1.
 &lt;/ul&gt;</description>
					<attribute name="@param">
						<description>d a {@code double} value</description>
					</attribute>
					<attribute name="@since">
						<description>1.6</description>
					</attribute>
				</comment>
				<params>
					<param name="d" comment="a {@code double} value" fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="nextAfter" returncomment="The floating-point number adjacent to {@code start} in the
 direction of {@code direction}." fulltype="double" type="double">
				<comment>
					<description>Returns the floating-point number adjacent to the first
 argument in the direction of the second argument.  If both
 arguments compare as equal the second argument is returned.

 &lt;p&gt;Special cases:
 &lt;ul&gt;
 &lt;li&gt; If either argument is a NaN, then NaN is returned.

 &lt;li&gt; If both arguments are signed zeros, {@code direction}
 is returned unchanged (as implied by the requirement of
 returning the second argument if the arguments compare as
 equal).

 &lt;li&gt; If {@code start} is
 &amp;plusmn;{@link Double#MIN_VALUE} and {@code direction}
 has a value such that the result should have a smaller
 magnitude, then a zero with the same sign as {@code start}
 is returned.

 &lt;li&gt; If {@code start} is infinite and
 {@code direction} has a value such that the result should
 have a smaller magnitude, {@link Double#MAX_VALUE} with the
 same sign as {@code start} is returned.

 &lt;li&gt; If {@code start} is equal to &amp;plusmn;
 {@link Double#MAX_VALUE} and {@code direction} has a
 value such that the result should have a larger magnitude, an
 infinity with same sign as {@code start} is returned.
 &lt;/ul&gt;</description>
					<attribute name="@param">
						<description>start  starting floating-point value</description>
					</attribute>
					<attribute name="@param">
						<description>direction value indicating which of
 {@code start}&apos;s neighbors or {@code start} should
 be returned</description>
					</attribute>
					<attribute name="@return">
						<description>The floating-point number adjacent to {@code start} in the
 direction of {@code direction}.</description>
					</attribute>
					<attribute name="@since">
						<description>1.6</description>
					</attribute>
				</comment>
				<params>
					<param name="start" comment="starting floating-point value" fulltype="double" type="double" />
					<param name="direction" comment="value indicating which of
 {@code start}&apos;s neighbors or {@code start} should
 be returned" fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="nextAfter" returncomment="The floating-point number adjacent to {@code start} in the
 direction of {@code direction}." fulltype="float" type="float">
				<comment>
					<description>Returns the floating-point number adjacent to the first
 argument in the direction of the second argument.  If both
 arguments compare as equal a value equivalent to the second argument
 is returned.

 &lt;p&gt;Special cases:
 &lt;ul&gt;
 &lt;li&gt; If either argument is a NaN, then NaN is returned.

 &lt;li&gt; If both arguments are signed zeros, a value equivalent
 to {@code direction} is returned.

 &lt;li&gt; If {@code start} is
 &amp;plusmn;{@link Float#MIN_VALUE} and {@code direction}
 has a value such that the result should have a smaller
 magnitude, then a zero with the same sign as {@code start}
 is returned.

 &lt;li&gt; If {@code start} is infinite and
 {@code direction} has a value such that the result should
 have a smaller magnitude, {@link Float#MAX_VALUE} with the
 same sign as {@code start} is returned.

 &lt;li&gt; If {@code start} is equal to &amp;plusmn;
 {@link Float#MAX_VALUE} and {@code direction} has a
 value such that the result should have a larger magnitude, an
 infinity with same sign as {@code start} is returned.
 &lt;/ul&gt;</description>
					<attribute name="@param">
						<description>start  starting floating-point value</description>
					</attribute>
					<attribute name="@param">
						<description>direction value indicating which of
 {@code start}&apos;s neighbors or {@code start} should
 be returned</description>
					</attribute>
					<attribute name="@return">
						<description>The floating-point number adjacent to {@code start} in the
 direction of {@code direction}.</description>
					</attribute>
					<attribute name="@since">
						<description>1.6</description>
					</attribute>
				</comment>
				<params>
					<param name="start" comment="starting floating-point value" fulltype="float" type="float" />
					<param name="direction" comment="value indicating which of
 {@code start}&apos;s neighbors or {@code start} should
 be returned" fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="nextUp" returncomment="The adjacent floating-point value closer to positive
 infinity." fulltype="double" type="double">
				<comment>
					<description>Returns the floating-point value adjacent to {@code d} in
 the direction of positive infinity.  This method is
 semantically equivalent to {@code nextAfter(d,
 Double.POSITIVE_INFINITY)}; however, a {@code nextUp}
 implementation may run faster than its equivalent
 {@code nextAfter} call.

 &lt;p&gt;Special Cases:
 &lt;ul&gt;
 &lt;li&gt; If the argument is NaN, the result is NaN.

 &lt;li&gt; If the argument is positive infinity, the result is
 positive infinity.

 &lt;li&gt; If the argument is zero, the result is
 {@link Double#MIN_VALUE}

 &lt;/ul&gt;</description>
					<attribute name="@param">
						<description>d starting floating-point value</description>
					</attribute>
					<attribute name="@return">
						<description>The adjacent floating-point value closer to positive
 infinity.</description>
					</attribute>
					<attribute name="@since">
						<description>1.6</description>
					</attribute>
				</comment>
				<params>
					<param name="d" comment="starting floating-point value" fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="nextUp" returncomment="The adjacent floating-point value closer to positive
 infinity." fulltype="float" type="float">
				<comment>
					<description>Returns the floating-point value adjacent to {@code f} in
 the direction of positive infinity.  This method is
 semantically equivalent to {@code nextAfter(f,
 Float.POSITIVE_INFINITY)}; however, a {@code nextUp}
 implementation may run faster than its equivalent
 {@code nextAfter} call.

 &lt;p&gt;Special Cases:
 &lt;ul&gt;
 &lt;li&gt; If the argument is NaN, the result is NaN.

 &lt;li&gt; If the argument is positive infinity, the result is
 positive infinity.

 &lt;li&gt; If the argument is zero, the result is
 {@link Float#MIN_VALUE}

 &lt;/ul&gt;</description>
					<attribute name="@param">
						<description>f starting floating-point value</description>
					</attribute>
					<attribute name="@return">
						<description>The adjacent floating-point value closer to positive
 infinity.</description>
					</attribute>
					<attribute name="@since">
						<description>1.6</description>
					</attribute>
				</comment>
				<params>
					<param name="f" comment="starting floating-point value" fulltype="float" type="float" />
				</params>
			</method>
			<method static="true" visibility="public" name="scalb" returncomment="{@code d} &amp;times; 2&lt;sup&gt;{@code scaleFactor}&lt;/sup&gt;" fulltype="double" type="double">
				<comment>
					<description>Return {@code d} &amp;times;
 2&lt;sup&gt;{@code scaleFactor}&lt;/sup&gt; rounded as if performed
 by a single correctly rounded floating-point multiply to a
 member of the double value set.  See the Java
 Language Specification for a discussion of floating-point
 value sets.  If the exponent of the result is between {@link
 Double#MIN_EXPONENT} and {@link Double#MAX_EXPONENT}, the
 answer is calculated exactly.  If the exponent of the result
 would be larger than {@code Double.MAX_EXPONENT}, an
 infinity is returned.  Note that if the result is subnormal,
 precision may be lost; that is, when {@code scalb(x, n)}
 is subnormal, {@code scalb(scalb(x, n), -n)} may not equal
 &lt;i&gt;x&lt;/i&gt;.  When the result is non-NaN, the result has the same
 sign as {@code d}.

 &lt;p&gt;Special cases:
 &lt;ul&gt;
 &lt;li&gt; If the first argument is NaN, NaN is returned.
 &lt;li&gt; If the first argument is infinite, then an infinity of the
 same sign is returned.
 &lt;li&gt; If the first argument is zero, then a zero of the same
 sign is returned.
 &lt;/ul&gt;</description>
					<attribute name="@param">
						<description>d number to be scaled by a power of two.</description>
					</attribute>
					<attribute name="@param">
						<description>scaleFactor power of 2 used to scale {@code d}</description>
					</attribute>
					<attribute name="@return">
						<description>{@code d} &amp;times; 2&lt;sup&gt;{@code scaleFactor}&lt;/sup&gt;</description>
					</attribute>
					<attribute name="@since">
						<description>1.6</description>
					</attribute>
				</comment>
				<params>
					<param name="d" comment="number to be scaled by a power of two." fulltype="double" type="double" />
					<param name="scaleFactor" comment="power of 2 used to scale {@code d}" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="scalb" returncomment="{@code f} &amp;times; 2&lt;sup&gt;{@code scaleFactor}&lt;/sup&gt;" fulltype="float" type="float">
				<comment>
					<description>Return {@code f} &amp;times;
 2&lt;sup&gt;{@code scaleFactor}&lt;/sup&gt; rounded as if performed
 by a single correctly rounded floating-point multiply to a
 member of the float value set.  See the Java
 Language Specification for a discussion of floating-point
 value sets.  If the exponent of the result is between {@link
 Float#MIN_EXPONENT} and {@link Float#MAX_EXPONENT}, the
 answer is calculated exactly.  If the exponent of the result
 would be larger than {@code Float.MAX_EXPONENT}, an
 infinity is returned.  Note that if the result is subnormal,
 precision may be lost; that is, when {@code scalb(x, n)}
 is subnormal, {@code scalb(scalb(x, n), -n)} may not equal
 &lt;i&gt;x&lt;/i&gt;.  When the result is non-NaN, the result has the same
 sign as {@code f}.

 &lt;p&gt;Special cases:
 &lt;ul&gt;
 &lt;li&gt; If the first argument is NaN, NaN is returned.
 &lt;li&gt; If the first argument is infinite, then an infinity of the
 same sign is returned.
 &lt;li&gt; If the first argument is zero, then a zero of the same
 sign is returned.
 &lt;/ul&gt;</description>
					<attribute name="@param">
						<description>f number to be scaled by a power of two.</description>
					</attribute>
					<attribute name="@param">
						<description>scaleFactor power of 2 used to scale {@code f}</description>
					</attribute>
					<attribute name="@return">
						<description>{@code f} &amp;times; 2&lt;sup&gt;{@code scaleFactor}&lt;/sup&gt;</description>
					</attribute>
					<attribute name="@since">
						<description>1.6</description>
					</attribute>
				</comment>
				<params>
					<param name="f" comment="number to be scaled by a power of two." fulltype="float" type="float" />
					<param name="scaleFactor" comment="power of 2 used to scale {@code f}" fulltype="int" type="int" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass final="true" superclass="Object" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.Object" fulltype="java.lang.Boolean" type="Boolean">
		<implements>
			<interface fulltype="java.io.Serializable" type="Serializable" />
			<interface fulltype="java.lang.Comparable" type="Comparable" />
		</implements>
		<comment>
			<description>The Boolean class wraps a value of the primitive type
 {@code boolean} in an object. An object of type
 {@code Boolean} contains a single field whose type is
 {@code boolean}.
 &lt;p&gt;
 In addition, this class provides many methods for
 converting a {@code boolean} to a {@code String} and a
 {@code String} to a {@code boolean}, as well as other
 constants and methods useful when dealing with a
 {@code boolean}.</description>
			<attribute name="@author">
				<description>Arthur van Hoff</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.0</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" visibility="public" name="TRUE" fulltype="java.lang.Boolean" type="Boolean">
				<comment>
					<description>The {@code Boolean} object corresponding to the primitive
 value {@code true}.</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="FALSE" fulltype="java.lang.Boolean" type="Boolean">
				<comment>
					<description>The {@code Boolean} object corresponding to the primitive
 value {@code false}.</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="TYPE" fulltype="java.lang.Class" type="Class">
				<comment>
					<description>The Class object representing the primitive type boolean.</description>
					<attribute name="@since">
						<description>JDK1.1</description>
					</attribute>
				</comment>
			</field>
			<field final="true" visibility="private" name="value" fulltype="boolean" type="boolean">
				<comment>
					<description>The value of the Boolean.</description>
					<attribute name="@serial" />
				</comment>
			</field>
			<field final="true" static="true" const="-3665804199014368530" visibility="private" name="serialVersionUID" constexpr="-3665804199014368530L" fulltype="long" type="long">
				<comment>
					<description>use serialVersionUID from JDK 1.0.2 for interoperability</description>
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="public" name="Boolean">
				<comment>
					<description>Allocates a {@code Boolean} object representing the
 {@code value} argument.

 &lt;p&gt;&lt;b&gt;Note: It is rarely appropriate to use this constructor.
 Unless a &lt;i&gt;new&lt;/i&gt; instance is required, the static factory
 {@link #valueOf(boolean)} is generally a better choice. It is
 likely to yield significantly better space and time performance.&lt;/b&gt;</description>
					<attribute name="@param">
						<description>value   the value of the {@code Boolean}.</description>
					</attribute>
				</comment>
				<params>
					<param name="value" comment="the value of the {@code Boolean}." fulltype="boolean" type="boolean" />
				</params>
			</constructor>
			<constructor visibility="public" name="Boolean">
				<comment>
					<description>Allocates a {@code Boolean} object representing the value
 {@code true} if the string argument is not {@code null}
 and is equal, ignoring case, to the string {@code &quot;true&quot;}.
 Otherwise, allocate a {@code Boolean} object representing the
 value {@code false}. Examples:&lt;p&gt;
 {@code new Boolean(&quot;True&quot;)} produces a {@code Boolean} object
 that represents {@code true}.&lt;br&gt;
 {@code new Boolean(&quot;yes&quot;)} produces a {@code Boolean} object
 that represents {@code false}.</description>
					<attribute name="@param">
						<description>s   the string to be converted to a {@code Boolean}.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the string to be converted to a {@code Boolean}." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method static="true" visibility="public" name="parseBoolean" returncomment="the boolean represented by the string argument" fulltype="boolean" type="boolean">
				<comment>
					<description>Parses the string argument as a boolean.  The {@code boolean}
 returned represents the value {@code true} if the string argument
 is not {@code null} and is equal, ignoring case, to the string
 {@code &quot;true&quot;}. &lt;p&gt;
 Example: {@code Boolean.parseBoolean(&quot;True&quot;)} returns {@code true}.&lt;br&gt;
 Example: {@code Boolean.parseBoolean(&quot;yes&quot;)} returns {@code false}.</description>
					<attribute name="@param">
						<description>s   the {@code String} containing the boolean
                 representation to be parsed</description>
					</attribute>
					<attribute name="@return">
						<description>the boolean represented by the string argument</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the {@code String} containing the boolean
                 representation to be parsed" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="booleanValue" returncomment="the primitive {@code boolean} value of this object." fulltype="boolean" type="boolean">
				<comment>
					<description>Returns the value of this {@code Boolean} object as a boolean
 primitive.</description>
					<attribute name="@return">
						<description>the primitive {@code boolean} value of this object.</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="valueOf" returncomment="a {@code Boolean} instance representing {@code b}." fulltype="java.lang.Boolean" type="Boolean">
				<comment>
					<description>Returns a {@code Boolean} instance representing the specified
 {@code boolean} value.  If the specified {@code boolean} value
 is {@code true}, this method returns {@code Boolean.TRUE};
 if it is {@code false}, this method returns {@code Boolean.FALSE}.
 If a new {@code Boolean} instance is not required, this method
 should generally be used in preference to the constructor
 {@link #Boolean(boolean)}, as this method is likely to yield
 significantly better space and time performance.</description>
					<attribute name="@param">
						<description>b a boolean value.</description>
					</attribute>
					<attribute name="@return">
						<description>a {@code Boolean} instance representing {@code b}.</description>
					</attribute>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
				<params>
					<param name="b" comment="a boolean value." fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="valueOf" returncomment="the {@code Boolean} value represented by the string." fulltype="java.lang.Boolean" type="Boolean">
				<comment>
					<description>Returns a {@code Boolean} with a value represented by the
 specified string.  The {@code Boolean} returned represents a
 true value if the string argument is not {@code null}
 and is equal, ignoring case, to the string {@code &quot;true&quot;}.</description>
					<attribute name="@param">
						<description>s   a string.</description>
					</attribute>
					<attribute name="@return">
						<description>the {@code Boolean} value represented by the string.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="a string." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="toString" returncomment="the string representation of the specified {@code boolean}" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a {@code String} object representing the specified
 boolean.  If the specified boolean is {@code true}, then
 the string {@code &quot;true&quot;} will be returned, otherwise the
 string {@code &quot;false&quot;} will be returned.</description>
					<attribute name="@param">
						<description>b the boolean to be converted</description>
					</attribute>
					<attribute name="@return">
						<description>the string representation of the specified {@code boolean}</description>
					</attribute>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
				<params>
					<param name="b" comment="the boolean to be converted" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="toString" returncomment="a string representation of this object." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a {@code String} object representing this Boolean&apos;s
 value.  If this object represents the value {@code true},
 a string equal to {@code &quot;true&quot;} is returned. Otherwise, a
 string equal to {@code &quot;false&quot;} is returned.</description>
					<attribute name="@return">
						<description>a string representation of this object.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="hashCode" returncomment="the integer {@code 1231} if this object represents
 {@code true}; returns the integer {@code 1237} if this
 object represents {@code false}." fulltype="int" type="int">
				<comment>
					<description>Returns a hash code for this {@code Boolean} object.</description>
					<attribute name="@return">
						<description>the integer {@code 1231} if this object represents
 {@code true}; returns the integer {@code 1237} if this
 object represents {@code false}.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="equals" returncomment="{@code true} if the Boolean objects represent the
          same value; {@code false} otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Returns {@code true} if and only if the argument is not
 {@code null} and is a {@code Boolean} object that
 represents the same {@code boolean} value as this object.</description>
					<attribute name="@param">
						<description>obj   the object to compare with.</description>
					</attribute>
					<attribute name="@return">
						<description>{@code true} if the Boolean objects represent the
          same value; {@code false} otherwise.</description>
					</attribute>
				</comment>
				<params>
					<param name="obj" comment="the object to compare with." fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method static="true" visibility="public" name="getBoolean" returncomment="the {@code boolean} value of the system property." fulltype="boolean" type="boolean">
				<comment>
					<description>Returns {@code true} if and only if the system property
 named by the argument exists and is equal to the string
 {@code &quot;true&quot;}. (Beginning with version 1.0.2 of the
 Java&lt;small&gt;&lt;sup&gt;TM&lt;/sup&gt;&lt;/small&gt; platform, the test of
 this string is case insensitive.) A system property is accessible
 through {@code getProperty}, a method defined by the
 {@code System} class.
 &lt;p&gt;
 If there is no property with the specified name, or if the specified
 name is empty or null, then {@code false} is returned.</description>
					<attribute name="@param">
						<description>name   the system property name.</description>
					</attribute>
					<attribute name="@return">
						<description>the {@code boolean} value of the system property.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.System#getProperty(java.lang.String)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.System#getProperty(java.lang.String, java.lang.String)</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="the system property name." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="compareTo" returncomment="zero if this object represents the same boolean value as the
          argument; a positive value if this object represents true
          and the argument represents false; and a negative value if
          this object represents false and the argument represents true" fulltype="int" type="int">
				<comment>
					<description>Compares this {@code Boolean} instance with another.</description>
					<attribute name="@param">
						<description>b the {@code Boolean} instance to be compared</description>
					</attribute>
					<attribute name="@return">
						<description>zero if this object represents the same boolean value as the
          argument; a positive value if this object represents true
          and the argument represents false; and a negative value if
          this object represents false and the argument represents true</description>
					</attribute>
					<attribute name="@throws">
						<description>NullPointerException if the argument is {@code null}</description>
					</attribute>
					<attribute name="@see">
						<description>Comparable</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="b" comment="the {@code Boolean} instance to be compared" fulltype="java.lang.Boolean" type="Boolean" />
				</params>
			</method>
			<method static="true" visibility="private" name="toBoolean" fulltype="boolean" type="boolean">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="RuntimeException" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.RuntimeException" fulltype="java.lang.ClassCastException" type="ClassCastException">
		<comment>
			<description>Thrown to indicate that the code has attempted to cast an object
 to a subclass of which it is not an instance. For example, the
 following code generates a &lt;code&gt;ClassCastException&lt;/code&gt;:
 &lt;p&gt;&lt;blockquote&gt;&lt;pre&gt;
     Object x = new Integer(0);
     System.out.println((String)x);
 &lt;/pre&gt;&lt;/blockquote&gt;</description>
			<attribute name="@author">
				<description>unascribed</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.0</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="ClassCastException">
				<comment>
					<description>Constructs a &lt;code&gt;ClassCastException&lt;/code&gt; with no detail message.</description>
				</comment>
			</constructor>
			<constructor visibility="public" name="ClassCastException">
				<comment>
					<description>Constructs a &lt;code&gt;ClassCastException&lt;/code&gt; with the specified
 detail message.</description>
					<attribute name="@param">
						<description>s   the detail message.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the detail message." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.Object" fulltype="java.lang.Throwable" type="Throwable">
		<implements>
			<interface fulltype="java.io.Serializable" type="Serializable" />
		</implements>
		<comment>
			<description>The &lt;code&gt;Throwable&lt;/code&gt; class is the superclass of all errors and
 exceptions in the Java language. Only objects that are instances of this
 class (or one of its subclasses) are thrown by the Java Virtual Machine or
 can be thrown by the Java &lt;code&gt;throw&lt;/code&gt; statement. Similarly, only
 this class or one of its subclasses can be the argument type in a
 &lt;code&gt;catch&lt;/code&gt; clause.

 &lt;p&gt;Instances of two subclasses, {@link java.lang.Error} and
 {@link java.lang.Exception}, are conventionally used to indicate
 that exceptional situations have occurred. Typically, these instances
 are freshly created in the context of the exceptional situation so
 as to include relevant information (such as stack trace data).

 &lt;p&gt;A throwable contains a snapshot of the execution stack of its thread at
 the time it was created. It can also contain a message string that gives
 more information about the error. Finally, it can contain a &lt;i&gt;cause&lt;/i&gt;:
 another throwable that caused this throwable to get thrown.  The cause
 facility is new in release 1.4.  It is also known as the &lt;i&gt;chained
 exception&lt;/i&gt; facility, as the cause can, itself, have a cause, and so on,
 leading to a &quot;chain&quot; of exceptions, each caused by another.

 &lt;p&gt;One reason that a throwable may have a cause is that the class that
 throws it is built atop a lower layered abstraction, and an operation on
 the upper layer fails due to a failure in the lower layer.  It would be bad
 design to let the throwable thrown by the lower layer propagate outward, as
 it is generally unrelated to the abstraction provided by the upper layer.
 Further, doing so would tie the API of the upper layer to the details of
 its implementation, assuming the lower layer&apos;s exception was a checked
 exception.  Throwing a &quot;wrapped exception&quot; (i.e., an exception containing a
 cause) allows the upper layer to communicate the details of the failure to
 its caller without incurring either of these shortcomings.  It preserves
 the flexibility to change the implementation of the upper layer without
 changing its API (in particular, the set of exceptions thrown by its
 methods).

 &lt;p&gt;A second reason that a throwable may have a cause is that the method
 that throws it must conform to a general-purpose interface that does not
 permit the method to throw the cause directly.  For example, suppose
 a persistent collection conforms to the {@link java.util.Collection
 Collection} interface, and that its persistence is implemented atop
 &lt;tt&gt;java.io&lt;/tt&gt;.  Suppose the internals of the &lt;tt&gt;add&lt;/tt&gt; method
 can throw an {@link java.io.IOException IOException}.  The implementation
 can communicate the details of the &lt;tt&gt;IOException&lt;/tt&gt; to its caller
 while conforming to the &lt;tt&gt;Collection&lt;/tt&gt; interface by wrapping the
 &lt;tt&gt;IOException&lt;/tt&gt; in an appropriate unchecked exception.  (The
 specification for the persistent collection should indicate that it is
 capable of throwing such exceptions.)

 &lt;p&gt;A cause can be associated with a throwable in two ways: via a
 constructor that takes the cause as an argument, or via the
 {@link #initCause(Throwable)} method.  New throwable classes that
 wish to allow causes to be associated with them should provide constructors
 that take a cause and delegate (perhaps indirectly) to one of the
 &lt;tt&gt;Throwable&lt;/tt&gt; constructors that takes a cause.  For example:
 &lt;pre&gt;
     try {
         lowLevelOp();
     } catch (LowLevelException le) {
         throw new HighLevelException(le);  // Chaining-aware constructor
     }
 &lt;/pre&gt;
 Because the &lt;tt&gt;initCause&lt;/tt&gt; method is public, it allows a cause to be
 associated with any throwable, even a &quot;legacy throwable&quot; whose
 implementation predates the addition of the exception chaining mechanism to
 &lt;tt&gt;Throwable&lt;/tt&gt;. For example:
 &lt;pre&gt;
     try {
         lowLevelOp();
     } catch (LowLevelException le) {
         throw (HighLevelException)
                 new HighLevelException().initCause(le);  // Legacy constructor
     }
 &lt;/pre&gt;

 &lt;p&gt;Prior to release 1.4, there were many throwables that had their own
 non-standard exception chaining mechanisms (
 {@link ExceptionInInitializerError}, {@link ClassNotFoundException},
 {@link java.lang.reflect.UndeclaredThrowableException},
 {@link java.lang.reflect.InvocationTargetException},
 {@link java.io.WriteAbortedException},
 {@link java.security.PrivilegedActionException},
 {@link java.awt.print.PrinterIOException},
 {@link java.rmi.RemoteException} and
 {@link javax.naming.NamingException}).
 All of these throwables have been retrofitted to
 use the standard exception chaining mechanism, while continuing to
 implement their &quot;legacy&quot; chaining mechanisms for compatibility.

 &lt;p&gt;Further, as of release 1.4, many general purpose &lt;tt&gt;Throwable&lt;/tt&gt;
 classes (for example {@link Exception}, {@link RuntimeException},
 {@link Error}) have been retrofitted with constructors that take
 a cause.  This was not strictly necessary, due to the existence of the
 &lt;tt&gt;initCause&lt;/tt&gt; method, but it is more convenient and expressive to
 delegate to a constructor that takes a cause.

 &lt;p&gt;By convention, class &lt;code&gt;Throwable&lt;/code&gt; and its subclasses have two
 constructors, one that takes no arguments and one that takes a
 &lt;code&gt;String&lt;/code&gt; argument that can be used to produce a detail message.
 Further, those subclasses that might likely have a cause associated with
 them should have two more constructors, one that takes a
 &lt;code&gt;Throwable&lt;/code&gt; (the cause), and one that takes a
 &lt;code&gt;String&lt;/code&gt; (the detail message) and a &lt;code&gt;Throwable&lt;/code&gt; (the
 cause).

 &lt;p&gt;Also introduced in release 1.4 is the {@link #getStackTrace()} method,
 which allows programmatic access to the stack trace information that was
 previously available only in text form, via the various forms of the
 {@link #printStackTrace()} method.  This information has been added to the
 &lt;i&gt;serialized representation&lt;/i&gt; of this class so &lt;tt&gt;getStackTrace&lt;/tt&gt;
 and &lt;tt&gt;printStackTrace&lt;/tt&gt; will operate properly on a throwable that
 was obtained by deserialization.</description>
			<attribute name="@author">
				<description>unascribed</description>
			</attribute>
			<attribute name="@author">
				<description>Josh Bloch (Added exception chaining and programmatic access to
          stack trace in 1.4.)</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.0</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="-3042686055658047285" visibility="private" name="serialVersionUID" constexpr="-3042686055658047285L" fulltype="long" type="long">
				<comment>
					<description>use serialVersionUID from JDK 1.0.2 for interoperability</description>
				</comment>
			</field>
			<field visibility="private" transient="true" name="backtrace" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Native code saves some indication of the stack backtrace in this slot.</description>
				</comment>
			</field>
			<field visibility="private" name="detailMessage" fulltype="java.lang.String" type="String">
				<comment>
					<description>Specific details about the Throwable.  For example, for
 &lt;tt&gt;FileNotFoundException&lt;/tt&gt;, this contains the name of
 the file that could not be found.</description>
					<attribute name="@serial" />
				</comment>
			</field>
			<field visibility="private" name="cause" fulltype="java.lang.Throwable" type="Throwable">
				<comment>
					<description>The throwable that caused this throwable to get thrown, or null if this
 throwable was not caused by another throwable, or if the causative
 throwable is unknown.  If this field is equal to this throwable itself,
 it indicates that the cause of this throwable has not yet been
 initialized.</description>
					<attribute name="@serial" />
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
			</field>
			<field visibility="private" name="stackTrace" fulltype="java.lang.StackTraceElement[]" type="StackTraceElement">
				<comment>
					<description>The stack trace, as returned by {@link #getStackTrace()}.</description>
					<attribute name="@serial" />
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="public" name="Throwable">
				<comment>
					<description>Constructs a new throwable with &lt;code&gt;null&lt;/code&gt; as its detail message.
 The cause is not initialized, and may subsequently be initialized by a
 call to {@link #initCause}.

 &lt;p&gt;The {@link #fillInStackTrace()} method is called to initialize
 the stack trace data in the newly created throwable.</description>
				</comment>
			</constructor>
			<constructor visibility="public" name="Throwable">
				<comment>
					<description>Constructs a new throwable with the specified detail message.  The
 cause is not initialized, and may subsequently be initialized by
 a call to {@link #initCause}.

 &lt;p&gt;The {@link #fillInStackTrace()} method is called to initialize
 the stack trace data in the newly created throwable.</description>
					<attribute name="@param">
						<description>message   the detail message. The detail message is saved for
          later retrieval by the {@link #getMessage()} method.</description>
					</attribute>
				</comment>
				<params>
					<param name="message" comment="the detail message. The detail message is saved for
          later retrieval by the {@link #getMessage()} method." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="Throwable">
				<comment>
					<description>Constructs a new throwable with the specified detail message and
 cause.  &lt;p&gt;Note that the detail message associated with
 &lt;code&gt;cause&lt;/code&gt; is &lt;i&gt;not&lt;/i&gt; automatically incorporated in
 this throwable&apos;s detail message.

 &lt;p&gt;The {@link #fillInStackTrace()} method is called to initialize
 the stack trace data in the newly created throwable.</description>
					<attribute name="@param">
						<description>message the detail message (which is saved for later retrieval
         by the {@link #getMessage()} method).</description>
					</attribute>
					<attribute name="@param">
						<description>cause the cause (which is saved for later retrieval by the
         {@link #getCause()} method).  (A &lt;tt&gt;null&lt;/tt&gt; value is
         permitted, and indicates that the cause is nonexistent or
         unknown.)</description>
					</attribute>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
				<params>
					<param name="message" comment="the detail message (which is saved for later retrieval
         by the {@link #getMessage()} method)." fulltype="java.lang.String" type="String" />
					<param name="cause" comment="the cause (which is saved for later retrieval by the
         {@link #getCause()} method).  (A &lt;tt&gt;null&lt;/tt&gt; value is
         permitted, and indicates that the cause is nonexistent or
         unknown.)" fulltype="java.lang.Throwable" type="Throwable" />
				</params>
			</constructor>
			<constructor visibility="public" name="Throwable">
				<comment>
					<description>Constructs a new throwable with the specified cause and a detail
 message of &lt;tt&gt;(cause==null ? null : cause.toString())&lt;/tt&gt; (which
 typically contains the class and detail message of &lt;tt&gt;cause&lt;/tt&gt;).
 This constructor is useful for throwables that are little more than
 wrappers for other throwables (for example, {@link
 java.security.PrivilegedActionException}).

 &lt;p&gt;The {@link #fillInStackTrace()} method is called to initialize
 the stack trace data in the newly created throwable.</description>
					<attribute name="@param">
						<description>cause the cause (which is saved for later retrieval by the
         {@link #getCause()} method).  (A &lt;tt&gt;null&lt;/tt&gt; value is
         permitted, and indicates that the cause is nonexistent or
         unknown.)</description>
					</attribute>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
				<params>
					<param name="cause" comment="the cause (which is saved for later retrieval by the
         {@link #getCause()} method).  (A &lt;tt&gt;null&lt;/tt&gt; value is
         permitted, and indicates that the cause is nonexistent or
         unknown.)" fulltype="java.lang.Throwable" type="Throwable" />
				</params>
			</constructor>
			<method visibility="public" name="getMessage" returncomment="the detail message string of this &lt;tt&gt;Throwable&lt;/tt&gt; instance
          (which may be &lt;tt&gt;null&lt;/tt&gt;)." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the detail message string of this throwable.</description>
					<attribute name="@return">
						<description>the detail message string of this &lt;tt&gt;Throwable&lt;/tt&gt; instance
          (which may be &lt;tt&gt;null&lt;/tt&gt;).</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getLocalizedMessage" returncomment="The localized description of this throwable." fulltype="java.lang.String" type="String">
				<comment>
					<description>Creates a localized description of this throwable.
 Subclasses may override this method in order to produce a
 locale-specific message.  For subclasses that do not override this
 method, the default implementation returns the same result as
 &lt;code&gt;getMessage()&lt;/code&gt;.</description>
					<attribute name="@return">
						<description>The localized description of this throwable.</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getCause" returncomment="the cause of this throwable or &lt;code&gt;null&lt;/code&gt; if the
          cause is nonexistent or unknown." fulltype="java.lang.Throwable" type="Throwable">
				<comment>
					<description>Returns the cause of this throwable or &lt;code&gt;null&lt;/code&gt; if the
 cause is nonexistent or unknown.  (The cause is the throwable that
 caused this throwable to get thrown.)

 &lt;p&gt;This implementation returns the cause that was supplied via one of
 the constructors requiring a &lt;tt&gt;Throwable&lt;/tt&gt;, or that was set after
 creation with the {@link #initCause(Throwable)} method.  While it is
 typically unnecessary to override this method, a subclass can override
 it to return a cause set by some other means.  This is appropriate for
 a &quot;legacy chained throwable&quot; that predates the addition of chained
 exceptions to &lt;tt&gt;Throwable&lt;/tt&gt;.  Note that it is &lt;i&gt;not&lt;/i&gt;
 necessary to override any of the &lt;tt&gt;PrintStackTrace&lt;/tt&gt; methods,
 all of which invoke the &lt;tt&gt;getCause&lt;/tt&gt; method to determine the
 cause of a throwable.</description>
					<attribute name="@return">
						<description>the cause of this throwable or &lt;code&gt;null&lt;/code&gt; if the
          cause is nonexistent or unknown.</description>
					</attribute>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
			</method>
			<method synchronized="true" visibility="public" name="initCause" returncomment="a reference to this &lt;code&gt;Throwable&lt;/code&gt; instance." fulltype="java.lang.Throwable" type="Throwable">
				<comment>
					<description>Initializes the &lt;i&gt;cause&lt;/i&gt; of this throwable to the specified value.
 (The cause is the throwable that caused this throwable to get thrown.)

 &lt;p&gt;This method can be called at most once.  It is generally called from
 within the constructor, or immediately after creating the
 throwable.  If this throwable was created
 with {@link #Throwable(Throwable)} or
 {@link #Throwable(String,Throwable)}, this method cannot be called
 even once.</description>
					<attribute name="@param">
						<description>cause the cause (which is saved for later retrieval by the
         {@link #getCause()} method).  (A &lt;tt&gt;null&lt;/tt&gt; value is
         permitted, and indicates that the cause is nonexistent or
         unknown.)</description>
					</attribute>
					<attribute name="@return">
						<description>a reference to this &lt;code&gt;Throwable&lt;/code&gt; instance.</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalArgumentException if &lt;code&gt;cause&lt;/code&gt; is this
         throwable.  (A throwable cannot be its own cause.)</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalStateException if this throwable was
         created with {@link #Throwable(Throwable)} or
         {@link #Throwable(String,Throwable)}, or this method has already
         been called on this throwable.</description>
					</attribute>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
				<params>
					<param name="cause" comment="the cause (which is saved for later retrieval by the
         {@link #getCause()} method).  (A &lt;tt&gt;null&lt;/tt&gt; value is
         permitted, and indicates that the cause is nonexistent or
         unknown.)" fulltype="java.lang.Throwable" type="Throwable" />
				</params>
			</method>
			<method visibility="public" name="toString" returncomment="a string representation of this throwable." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a short description of this throwable.
 The result is the concatenation of:
 &lt;ul&gt;
 &lt;li&gt; the {@linkplain Class#getName() name} of the class of this object
 &lt;li&gt; &quot;: &quot; (a colon and a space)
 &lt;li&gt; the result of invoking this object&apos;s {@link #getLocalizedMessage}
      method
 &lt;/ul&gt;
 If &lt;tt&gt;getLocalizedMessage&lt;/tt&gt; returns &lt;tt&gt;null&lt;/tt&gt;, then just
 the class name is returned.</description>
					<attribute name="@return">
						<description>a string representation of this throwable.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="printStackTrace" fulltype="void" type="void">
				<comment>
					<description>Prints this throwable and its backtrace to the
 standard error stream. This method prints a stack trace for this
 &lt;code&gt;Throwable&lt;/code&gt; object on the error output stream that is
 the value of the field &lt;code&gt;System.err&lt;/code&gt;. The first line of
 output contains the result of the {@link #toString()} method for
 this object.  Remaining lines represent data previously recorded by
 the method {@link #fillInStackTrace()}. The format of this
 information depends on the implementation, but the following
 example may be regarded as typical:
 &lt;blockquote&gt;&lt;pre&gt;
 java.lang.NullPointerException
         at MyClass.mash(MyClass.java:9)
         at MyClass.crunch(MyClass.java:6)
         at MyClass.main(MyClass.java:3)
 &lt;/pre&gt;&lt;/blockquote&gt;
 This example was produced by running the program:
 &lt;pre&gt;
 class MyClass {
     public static void main(String[] args) {
         crunch(null);
     }
     static void crunch(int[] a) {
         mash(a);
     }
     static void mash(int[] b) {
         System.out.println(b[0]);
     }
 }
 &lt;/pre&gt;
 The backtrace for a throwable with an initialized, non-null cause
 should generally include the backtrace for the cause.  The format
 of this information depends on the implementation, but the following
 example may be regarded as typical:
 &lt;pre&gt;
 HighLevelException: MidLevelException: LowLevelException
         at Junk.a(Junk.java:13)
         at Junk.main(Junk.java:4)
 Caused by: MidLevelException: LowLevelException
         at Junk.c(Junk.java:23)
         at Junk.b(Junk.java:17)
         at Junk.a(Junk.java:11)
         ... 1 more
 Caused by: LowLevelException
         at Junk.e(Junk.java:30)
         at Junk.d(Junk.java:27)
         at Junk.c(Junk.java:21)
         ... 3 more
 &lt;/pre&gt;
 Note the presence of lines containing the characters &lt;tt&gt;&quot;...&quot;&lt;/tt&gt;.
 These lines indicate that the remainder of the stack trace for this
 exception matches the indicated number of frames from the bottom of the
 stack trace of the exception that was caused by this exception (the
 &quot;enclosing&quot; exception).  This shorthand can greatly reduce the length
 of the output in the common case where a wrapped exception is thrown
 from same method as the &quot;causative exception&quot; is caught.  The above
 example was produced by running the program:
 &lt;pre&gt;
 public class Junk {
     public static void main(String args[]) {
         try {
             a();
         } catch(HighLevelException e) {
             e.printStackTrace();
         }
     }
     static void a() throws HighLevelException {
         try {
             b();
         } catch(MidLevelException e) {
             throw new HighLevelException(e);
         }
     }
     static void b() throws MidLevelException {
         c();
     }
     static void c() throws MidLevelException {
         try {
             d();
         } catch(LowLevelException e) {
             throw new MidLevelException(e);
         }
     }
     static void d() throws LowLevelException {
        e();
     }
     static void e() throws LowLevelException {
         throw new LowLevelException();
     }
 }

 class HighLevelException extends Exception {
     HighLevelException(Throwable cause) { super(cause); }
 }

 class MidLevelException extends Exception {
     MidLevelException(Throwable cause)  { super(cause); }
 }

 class LowLevelException extends Exception {
 }
 &lt;/pre&gt;</description>
				</comment>
			</method>
			<method visibility="public" name="printStackTrace" fulltype="void" type="void">
				<comment>
					<description>Prints this throwable and its backtrace to the specified print stream.</description>
					<attribute name="@param">
						<description>s &lt;code&gt;PrintStream&lt;/code&gt; to use for output</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="&lt;code&gt;PrintStream&lt;/code&gt; to use for output" fulltype="java.io.PrintStream" type="PrintStream" />
				</params>
			</method>
			<method visibility="private" name="printStackTraceAsCause" fulltype="void" type="void">
				<comment>
					<description>Print our stack trace as a cause for the specified stack trace.</description>
				</comment>
				<params>
					<param name="s" fulltype="java.io.PrintStream" type="PrintStream" />
					<param name="causedTrace" fulltype="java.lang.StackTraceElement[]" type="StackTraceElement" />
				</params>
			</method>
			<method visibility="public" name="printStackTrace" fulltype="void" type="void">
				<comment>
					<description>Prints this throwable and its backtrace to the specified
 print writer.</description>
					<attribute name="@param">
						<description>s &lt;code&gt;PrintWriter&lt;/code&gt; to use for output</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.1</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="&lt;code&gt;PrintWriter&lt;/code&gt; to use for output" fulltype="java.io.PrintWriter" type="PrintWriter" />
				</params>
			</method>
			<method visibility="private" name="printStackTraceAsCause" fulltype="void" type="void">
				<comment>
					<description>Print our stack trace as a cause for the specified stack trace.</description>
				</comment>
				<params>
					<param name="s" fulltype="java.io.PrintWriter" type="PrintWriter" />
					<param name="causedTrace" fulltype="java.lang.StackTraceElement[]" type="StackTraceElement" />
				</params>
			</method>
			<method synchronized="true" visibility="public" name="fillInStackTrace" returncomment="a reference to this &lt;code&gt;Throwable&lt;/code&gt; instance." fulltype="java.lang.Throwable" type="Throwable">
				<comment>
					<description>Fills in the execution stack trace. This method records within this
 &lt;code&gt;Throwable&lt;/code&gt; object information about the current state of
 the stack frames for the current thread.</description>
					<attribute name="@return">
						<description>a reference to this &lt;code&gt;Throwable&lt;/code&gt; instance.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Throwable#printStackTrace()</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getStackTrace" returncomment="an array of stack trace elements representing the stack trace
         pertaining to this throwable." fulltype="java.lang.StackTraceElement[]" type="StackTraceElement">
				<comment>
					<description>Provides programmatic access to the stack trace information printed by
 {@link #printStackTrace()}.  Returns an array of stack trace elements,
 each representing one stack frame.  The zeroth element of the array
 (assuming the array&apos;s length is non-zero) represents the top of the
 stack, which is the last method invocation in the sequence.  Typically,
 this is the point at which this throwable was created and thrown.
 The last element of the array (assuming the array&apos;s length is non-zero)
 represents the bottom of the stack, which is the first method invocation
 in the sequence.

 &lt;p&gt;Some virtual machines may, under some circumstances, omit one
 or more stack frames from the stack trace.  In the extreme case,
 a virtual machine that has no stack trace information concerning
 this throwable is permitted to return a zero-length array from this
 method.  Generally speaking, the array returned by this method will
 contain one element for every frame that would be printed by
 &lt;tt&gt;printStackTrace&lt;/tt&gt;.</description>
					<attribute name="@return">
						<description>an array of stack trace elements representing the stack trace
         pertaining to this throwable.</description>
					</attribute>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
			</method>
			<method synchronized="true" visibility="private" name="getOurStackTrace" fulltype="java.lang.StackTraceElement[]" type="StackTraceElement" />
			<method visibility="public" name="setStackTrace" fulltype="void" type="void">
				<comment>
					<description>Sets the stack trace elements that will be returned by
 {@link #getStackTrace()} and printed by {@link #printStackTrace()}
 and related methods.

 This method, which is designed for use by RPC frameworks and other
 advanced systems, allows the client to override the default
 stack trace that is either generated by {@link #fillInStackTrace()}
 when a throwable is constructed or deserialized when a throwable is
 read from a serialization stream.</description>
					<attribute name="@param">
						<description>stackTrace the stack trace elements to be associated with
 this &lt;code&gt;Throwable&lt;/code&gt;.  The specified array is copied by this
 call; changes in the specified array after the method invocation
 returns will have no affect on this &lt;code&gt;Throwable&lt;/code&gt;&apos;s stack
 trace.</description>
					</attribute>
					<attribute name="@throws">
						<description>NullPointerException if &lt;code&gt;stackTrace&lt;/code&gt; is
         &lt;code&gt;null&lt;/code&gt;, or if any of the elements of
         &lt;code&gt;stackTrace&lt;/code&gt; are &lt;code&gt;null&lt;/code&gt;</description>
					</attribute>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
				<params>
					<param name="stackTrace" comment="the stack trace elements to be associated with
 this &lt;code&gt;Throwable&lt;/code&gt;.  The specified array is copied by this
 call; changes in the specified array after the method invocation
 returns will have no affect on this &lt;code&gt;Throwable&lt;/code&gt;&apos;s stack
 trace." fulltype="java.lang.StackTraceElement[]" type="StackTraceElement" />
				</params>
			</method>
			<method visibility="private" name="getStackTraceDepth" fulltype="int" type="int">
				<comment>
					<description>Returns the number of elements in the stack trace (or 0 if the stack
 trace is unavailable).</description>
				</comment>
			</method>
			<method visibility="private" name="getStackTraceElement" fulltype="java.lang.StackTraceElement" type="StackTraceElement">
				<comment>
					<description>Returns the specified element of the stack trace.</description>
					<attribute name="@param">
						<description>index index of the element to return.</description>
					</attribute>
					<attribute name="@throws">
						<description>IndexOutOfBoundsException if &lt;tt&gt;index &amp;lt; 0 ||
         index &amp;gt;= getStackTraceDepth() &lt;/tt&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="index" comment="index of the element to return." fulltype="int" type="int" />
				</params>
			</method>
			<method synchronized="true" visibility="private" name="writeObject" fulltype="void" type="void">
				<params>
					<param name="s" fulltype="java.io.ObjectOutputStream" type="ObjectOutputStream" />
				</params>
				<exceptions>
					<exception fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="package-private" package="java.lang" superclassfulltype="java.lang.Object" fulltype="java.lang.AssertionStatusDirectives" type="AssertionStatusDirectives">
		<comment>
			<description>A collection of assertion status directives (such as &quot;enable assertions
 in package p&quot; or &quot;disable assertions in class c&quot;).  This class is used by
 the JVM to communicate the assertion status directives implied by
 the &lt;tt&gt;java&lt;/tt&gt; command line flags &lt;tt&gt;-enableassertions&lt;/tt&gt;
 (&lt;tt&gt;-ea&lt;/tt&gt;) and &lt;tt&gt;-disableassertions&lt;/tt&gt; (&lt;tt&gt;-da&lt;/tt&gt;).</description>
			<attribute name="@since">
				<description>1.4</description>
			</attribute>
			<attribute name="@author">
				<description>Josh Bloch</description>
			</attribute>
		</comment>
		<fields>
			<field visibility="package-private" name="classes" fulltype="java.lang.String[]" type="String">
				<comment>
					<description>The classes for which assertions are to be enabled or disabled.
 The strings in this array are fully qualified class names (for
 example,&quot;com.xyz.foo.Bar&quot;).</description>
				</comment>
			</field>
			<field visibility="package-private" name="classEnabled" fulltype="boolean[]" type="boolean">
				<comment>
					<description>A parallel array to &lt;tt&gt;classes&lt;/tt&gt;, indicating whether each class
 is to have assertions enabled or disabled.  A value of &lt;tt&gt;true&lt;/tt&gt;
 for &lt;tt&gt;classEnabled[i]&lt;/tt&gt; indicates that the class named by
 &lt;tt&gt;classes[i]&lt;/tt&gt; should have assertions enabled; a value of
 &lt;tt&gt;false&lt;/tt&gt; indicates that it should have classes disabled.
 This array must have the same number of elements as &lt;tt&gt;classes&lt;/tt&gt;.

 &lt;p&gt;In the case of conflicting directives for the same class, the
 last directive for a given class wins.  In other words, if a string
 &lt;tt&gt;s&lt;/tt&gt; appears multiple times in the &lt;tt&gt;classes&lt;/tt&gt; array
 and &lt;tt&gt;i&lt;/tt&gt; is the highest integer for which
 &lt;tt&gt;classes[i].equals(s)&lt;/tt&gt;, then &lt;tt&gt;classEnabled[i]&lt;/tt&gt;
 indicates whether assertions are to be enabled in class &lt;tt&gt;s&lt;/tt&gt;.</description>
				</comment>
			</field>
			<field visibility="package-private" name="packages" fulltype="java.lang.String[]" type="String">
				<comment>
					<description>The package-trees for which assertions are to be enabled or disabled.
 The strings in this array are compete or partial package names
 (for example, &quot;com.xyz&quot; or &quot;com.xyz.foo&quot;).</description>
				</comment>
			</field>
			<field visibility="package-private" name="packageEnabled" fulltype="boolean[]" type="boolean">
				<comment>
					<description>A parallel array to &lt;tt&gt;packages&lt;/tt&gt;, indicating whether each
 package-tree is to have assertions enabled or disabled.  A value of
 &lt;tt&gt;true&lt;/tt&gt; for &lt;tt&gt;packageEnabled[i]&lt;/tt&gt; indicates that the
 package-tree named by &lt;tt&gt;packages[i]&lt;/tt&gt; should have assertions
 enabled; a value of &lt;tt&gt;false&lt;/tt&gt; indicates that it should have
 assertions disabled.  This array must have the same number of
 elements as &lt;tt&gt;packages&lt;/tt&gt;.

 In the case of conflicting directives for the same package-tree, the
 last directive for a given package-tree wins.  In other words, if a
 string &lt;tt&gt;s&lt;/tt&gt; appears multiple times in the &lt;tt&gt;packages&lt;/tt&gt; array
 and &lt;tt&gt;i&lt;/tt&gt; is the highest integer for which
 &lt;tt&gt;packages[i].equals(s)&lt;/tt&gt;, then &lt;tt&gt;packageEnabled[i]&lt;/tt&gt;
 indicates whether assertions are to be enabled in package-tree
 &lt;tt&gt;s&lt;/tt&gt;.</description>
				</comment>
			</field>
			<field visibility="package-private" name="deflt" fulltype="boolean" type="boolean">
				<comment>
					<description>Whether or not assertions in non-system classes are to be enabled
 by default.</description>
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="package-private" name="AssertionStatusDirectives" />
		</methods>
	</jelclass>
	<jelclass superclass="RuntimeException" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.RuntimeException" fulltype="java.lang.IllegalMonitorStateException" type="IllegalMonitorStateException">
		<comment>
			<description>Thrown to indicate that a thread has attempted to wait on an
 object&apos;s monitor or to notify other threads waiting on an object&apos;s
 monitor without owning the specified monitor.</description>
			<attribute name="@author">
				<description>unascribed</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.Object#notify()</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.Object#notifyAll()</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.Object#wait()</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.Object#wait(long)</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.Object#wait(long, int)</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.0</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="IllegalMonitorStateException">
				<comment>
					<description>Constructs an &lt;code&gt;IllegalMonitorStateException&lt;/code&gt; with no
 detail message.</description>
				</comment>
			</constructor>
			<constructor visibility="public" name="IllegalMonitorStateException">
				<comment>
					<description>Constructs an &lt;code&gt;IllegalMonitorStateException&lt;/code&gt; with the
 specified detail message.</description>
					<attribute name="@param">
						<description>s   the detail message.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the detail message." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass superclass="IncompatibleClassChangeError" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.IncompatibleClassChangeError" fulltype="java.lang.NoSuchMethodError" type="NoSuchMethodError">
		<comment>
			<description>Thrown if an application tries to call a specified method of a
 class (either static or instance), and that class no longer has a
 definition of that method.
 &lt;p&gt;
 Normally, this error is caught by the compiler; this error can
 only occur at run time if the definition of a class has
 incompatibly changed.</description>
			<attribute name="@author">
				<description>unascribed</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.0</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="NoSuchMethodError">
				<comment>
					<description>Constructs a &lt;code&gt;NoSuchMethodError&lt;/code&gt; with no detail message.</description>
				</comment>
			</constructor>
			<constructor visibility="public" name="NoSuchMethodError">
				<comment>
					<description>Constructs a &lt;code&gt;NoSuchMethodError&lt;/code&gt; with the
 specified detail message.</description>
					<attribute name="@param">
						<description>s   the detail message.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the detail message." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass final="true" superclass="Object" visibility="public" package="java.lang" superclassfulltype="java.lang.Object" fulltype="java.lang.ProcessBuilder" type="ProcessBuilder">
		<comment>
			<description>This class is used to create operating system processes.

 &lt;p&gt;Each &lt;code&gt;ProcessBuilder&lt;/code&gt; instance manages a collection
 of process attributes.  The {@link #start()} method creates a new
 {@link Process} instance with those attributes.  The {@link
 #start()} method can be invoked repeatedly from the same instance
 to create new subprocesses with identical or related attributes.

 &lt;p&gt;Each process builder manages these process attributes:

 &lt;ul&gt;

 &lt;li&gt;a &lt;i&gt;command&lt;/i&gt;, a list of strings which signifies the
 external program file to be invoked and its arguments, if any.
 Which string lists represent a valid operating system command is
 system-dependent.  For example, it is common for each conceptual
 argument to be an element in this list, but there are operating
 systems where programs are expected to tokenize command line
 strings themselves - on such a system a Java implementation might
 require commands to contain exactly two elements.

 &lt;li&gt;an &lt;i&gt;environment&lt;/i&gt;, which is a system-dependent mapping from
 &lt;i&gt;variables&lt;/i&gt; to &lt;i&gt;values&lt;/i&gt;.  The initial value is a copy of
 the environment of the current process (see {@link System#getenv()}).

 &lt;li&gt;a &lt;i&gt;working directory&lt;/i&gt;.  The default value is the current
 working directory of the current process, usually the directory
 named by the system property &lt;code&gt;user.dir&lt;/code&gt;.

 &lt;li&gt;a &lt;i&gt;redirectErrorStream&lt;/i&gt; property.  Initially, this property
 is &lt;code&gt;false&lt;/code&gt;, meaning that the standard output and error
 output of a subprocess are sent to two separate streams, which can
 be accessed using the {@link Process#getInputStream()} and {@link
 Process#getErrorStream()} methods.  If the value is set to
 &lt;code&gt;true&lt;/code&gt;, the standard error is merged with the standard
 output.  This makes it easier to correlate error messages with the
 corresponding output.  In this case, the merged data can be read
 from the stream returned by {@link Process#getInputStream()}, while
 reading from the stream returned by {@link
 Process#getErrorStream()} will get an immediate end of file.

 &lt;/ul&gt;

 &lt;p&gt;Modifying a process builder&apos;s attributes will affect processes
 subsequently started by that object&apos;s {@link #start()} method, but
 will never affect previously started processes or the Java process
 itself.

 &lt;p&gt;Most error checking is performed by the {@link #start()} method.
 It is possible to modify the state of an object so that {@link
 #start()} will fail.  For example, setting the command attribute to
 an empty list will not throw an exception unless {@link #start()}
 is invoked.

 &lt;p&gt;&lt;strong&gt;Note that this class is not synchronized.&lt;/strong&gt;
 If multiple threads access a &lt;code&gt;ProcessBuilder&lt;/code&gt; instance
 concurrently, and at least one of the threads modifies one of the
 attributes structurally, it &lt;i&gt;must&lt;/i&gt; be synchronized externally.

 &lt;p&gt;Starting a new process which uses the default working directory
 and environment is easy:

 &lt;blockquote&gt;&lt;pre&gt;
 Process p = new ProcessBuilder(&quot;myCommand&quot;, &quot;myArg&quot;).start();
 &lt;/pre&gt;&lt;/blockquote&gt;

 &lt;p&gt;Here is an example that starts a process with a modified working
 directory and environment:

 &lt;blockquote&gt;&lt;pre&gt;
 ProcessBuilder pb = new ProcessBuilder(&quot;myCommand&quot;, &quot;myArg1&quot;, &quot;myArg2&quot;);
 Map&amp;lt;String, String&amp;gt; env = pb.environment();
 env.put(&quot;VAR1&quot;, &quot;myValue&quot;);
 env.remove(&quot;OTHERVAR&quot;);
 env.put(&quot;VAR2&quot;, env.get(&quot;VAR1&quot;) + &quot;suffix&quot;);
 pb.directory(new File(&quot;myDir&quot;));
 Process p = pb.start();
 &lt;/pre&gt;&lt;/blockquote&gt;

 &lt;p&gt;To start a process with an explicit set of environment
 variables, first call {@link java.util.Map#clear() Map.clear()}
 before adding environment variables.</description>
			<attribute name="@since">
				<description>1.5</description>
			</attribute>
		</comment>
		<fields>
			<field visibility="private" name="command" fulltype="java.util.List" type="List" />
			<field visibility="private" name="directory" fulltype="java.io.File" type="File" />
			<field visibility="private" name="environment" fulltype="java.util.Map" type="Map" />
			<field visibility="private" name="redirectErrorStream" fulltype="boolean" type="boolean" />
		</fields>
		<methods>
			<constructor visibility="public" name="ProcessBuilder">
				<comment>
					<description>Constructs a process builder with the specified operating
 system program and arguments.  This constructor does &lt;i&gt;not&lt;/i&gt;
 make a copy of the &lt;code&gt;command&lt;/code&gt; list.  Subsequent
 updates to the list will be reflected in the state of the
 process builder.  It is not checked whether
 &lt;code&gt;command&lt;/code&gt; corresponds to a valid operating system
 command.&lt;/p&gt;</description>
					<attribute name="@param">
						<description>command  The list containing the program and its arguments</description>
					</attribute>
					<attribute name="@throws">
						<description>NullPointerException
          If the argument is &lt;code&gt;null&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="command" comment="The list containing the program and its arguments" fulltype="java.util.List" type="List" />
				</params>
			</constructor>
			<constructor visibility="public" name="ProcessBuilder">
				<comment>
					<description>Constructs a process builder with the specified operating
 system program and arguments.  This is a convenience
 constructor that sets the process builder&apos;s command to a string
 list containing the same strings as the &lt;code&gt;command&lt;/code&gt;
 array, in the same order.  It is not checked whether
 &lt;code&gt;command&lt;/code&gt; corresponds to a valid operating system
 command.&lt;/p&gt;</description>
					<attribute name="@param">
						<description>command  A string array containing the program and its arguments</description>
					</attribute>
				</comment>
				<params>
					<param name="command" comment="A string array containing the program and its arguments" fulltype="java.lang.String[]" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="command" returncomment="This process builder" fulltype="java.lang.ProcessBuilder" type="ProcessBuilder">
				<comment>
					<description>Sets this process builder&apos;s operating system program and
 arguments.  This method does &lt;i&gt;not&lt;/i&gt; make a copy of the
 &lt;code&gt;command&lt;/code&gt; list.  Subsequent updates to the list will
 be reflected in the state of the process builder.  It is not
 checked whether &lt;code&gt;command&lt;/code&gt; corresponds to a valid
 operating system command.&lt;/p&gt;</description>
					<attribute name="@param">
						<description>command  The list containing the program and its arguments</description>
					</attribute>
					<attribute name="@return">
						<description>This process builder</description>
					</attribute>
					<attribute name="@throws">
						<description>NullPointerException
          If the argument is &lt;code&gt;null&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="command" comment="The list containing the program and its arguments" fulltype="java.util.List" type="List" />
				</params>
			</method>
			<method visibility="public" name="command" returncomment="This process builder" fulltype="java.lang.ProcessBuilder" type="ProcessBuilder">
				<comment>
					<description>Sets this process builder&apos;s operating system program and
 arguments.  This is a convenience method that sets the command
 to a string list containing the same strings as the
 &lt;code&gt;command&lt;/code&gt; array, in the same order.  It is not
 checked whether &lt;code&gt;command&lt;/code&gt; corresponds to a valid
 operating system command.&lt;/p&gt;</description>
					<attribute name="@param">
						<description>command  A string array containing the program and its arguments</description>
					</attribute>
					<attribute name="@return">
						<description>This process builder</description>
					</attribute>
				</comment>
				<params>
					<param name="command" comment="A string array containing the program and its arguments" fulltype="java.lang.String[]" type="String" />
				</params>
			</method>
			<method visibility="public" name="command" returncomment="This process builder&apos;s program and its arguments" fulltype="java.util.List" type="List">
				<comment>
					<description>Returns this process builder&apos;s operating system program and
 arguments.  The returned list is &lt;i&gt;not&lt;/i&gt; a copy.  Subsequent
 updates to the list will be reflected in the state of this
 process builder.&lt;/p&gt;</description>
					<attribute name="@return">
						<description>This process builder&apos;s program and its arguments</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="environment" returncomment="This process builder&apos;s environment" fulltype="java.util.Map" type="Map">
				<comment>
					<description>Returns a string map view of this process builder&apos;s environment.

 Whenever a process builder is created, the environment is
 initialized to a copy of the current process environment (see
 {@link System#getenv()}).  Subprocesses subsequently started by
 this object&apos;s {@link #start()} method will use this map as
 their environment.

 &lt;p&gt;The returned object may be modified using ordinary {@link
 java.util.Map Map} operations.  These modifications will be
 visible to subprocesses started via the {@link #start()}
 method.  Two &lt;code&gt;ProcessBuilder&lt;/code&gt; instances always
 contain independent process environments, so changes to the
 returned map will never be reflected in any other
 &lt;code&gt;ProcessBuilder&lt;/code&gt; instance or the values returned by
 {@link System#getenv System.getenv}.

 &lt;p&gt;If the system does not support environment variables, an
 empty map is returned.

 &lt;p&gt;The returned map does not permit null keys or values.
 Attempting to insert or query the presence of a null key or
 value will throw a {@link NullPointerException}.
 Attempting to query the presence of a key or value which is not
 of type {@link String} will throw a {@link ClassCastException}.

 &lt;p&gt;The behavior of the returned map is system-dependent.  A
 system may not allow modifications to environment variables or
 may forbid certain variable names or values.  For this reason,
 attempts to modify the map may fail with
 {@link UnsupportedOperationException} or
 {@link IllegalArgumentException}
 if the modification is not permitted by the operating system.

 &lt;p&gt;Since the external format of environment variable names and
 values is system-dependent, there may not be a one-to-one
 mapping between them and Java&apos;s Unicode strings.  Nevertheless,
 the map is implemented in such a way that environment variables
 which are not modified by Java code will have an unmodified
 native representation in the subprocess.

 &lt;p&gt;The returned map and its collection views may not obey the
 general contract of the {@link Object#equals} and
 {@link Object#hashCode} methods.

 &lt;p&gt;The returned map is typically case-sensitive on all platforms.

 &lt;p&gt;If a security manager exists, its
 {@link SecurityManager#checkPermission checkPermission}
 method is called with a
 &lt;code&gt;{@link RuntimePermission}(&quot;getenv.*&quot;)&lt;/code&gt;
 permission.  This may result in a {@link SecurityException} being
 thrown.

 &lt;p&gt;When passing information to a Java subprocess,
 &lt;a href=System.html#EnvironmentVSSystemProperties&gt;system properties&lt;/a&gt;
 are generally preferred over environment variables.&lt;/p&gt;</description>
					<attribute name="@return">
						<description>This process builder&apos;s environment</description>
					</attribute>
					<attribute name="@throws">
						<description>SecurityException
          If a security manager exists and its
          {@link SecurityManager#checkPermission checkPermission}
          method doesn&apos;t allow access to the process environment</description>
					</attribute>
					<attribute name="@see">
						<description>Runtime#exec(String[],String[],java.io.File)</description>
					</attribute>
					<attribute name="@see">
						<description>System#getenv()</description>
					</attribute>
				</comment>
			</method>
			<method visibility="package-private" name="environment" fulltype="java.lang.ProcessBuilder" type="ProcessBuilder">
				<params>
					<param name="envp" fulltype="java.lang.String[]" type="String" />
				</params>
			</method>
			<method visibility="public" name="directory" returncomment="This process builder&apos;s working directory" fulltype="java.io.File" type="File">
				<comment>
					<description>Returns this process builder&apos;s working directory.

 Subprocesses subsequently started by this object&apos;s {@link
 #start()} method will use this as their working directory.
 The returned value may be &lt;code&gt;null&lt;/code&gt; -- this means to use
 the working directory of the current Java process, usually the
 directory named by the system property &lt;code&gt;user.dir&lt;/code&gt;,
 as the working directory of the child process.&lt;/p&gt;</description>
					<attribute name="@return">
						<description>This process builder&apos;s working directory</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="directory" returncomment="This process builder" fulltype="java.lang.ProcessBuilder" type="ProcessBuilder">
				<comment>
					<description>Sets this process builder&apos;s working directory.

 Subprocesses subsequently started by this object&apos;s {@link
 #start()} method will use this as their working directory.
 The argument may be &lt;code&gt;null&lt;/code&gt; -- this means to use the
 working directory of the current Java process, usually the
 directory named by the system property &lt;code&gt;user.dir&lt;/code&gt;,
 as the working directory of the child process.&lt;/p&gt;</description>
					<attribute name="@param">
						<description>directory  The new working directory</description>
					</attribute>
					<attribute name="@return">
						<description>This process builder</description>
					</attribute>
				</comment>
				<params>
					<param name="directory" comment="The new working directory" fulltype="java.io.File" type="File" />
				</params>
			</method>
			<method visibility="public" name="redirectErrorStream" returncomment="This process builder&apos;s &lt;code&gt;redirectErrorStream&lt;/code&gt; property" fulltype="boolean" type="boolean">
				<comment>
					<description>Tells whether this process builder merges standard error and
 standard output.

 &lt;p&gt;If this property is &lt;code&gt;true&lt;/code&gt;, then any error output
 generated by subprocesses subsequently started by this object&apos;s
 {@link #start()} method will be merged with the standard
 output, so that both can be read using the
 {@link Process#getInputStream()} method.  This makes it easier
 to correlate error messages with the corresponding output.
 The initial value is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;</description>
					<attribute name="@return">
						<description>This process builder&apos;s &lt;code&gt;redirectErrorStream&lt;/code&gt; property</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="redirectErrorStream" returncomment="This process builder" fulltype="java.lang.ProcessBuilder" type="ProcessBuilder">
				<comment>
					<description>Sets this process builder&apos;s &lt;code&gt;redirectErrorStream&lt;/code&gt; property.

 &lt;p&gt;If this property is &lt;code&gt;true&lt;/code&gt;, then any error output
 generated by subprocesses subsequently started by this object&apos;s
 {@link #start()} method will be merged with the standard
 output, so that both can be read using the
 {@link Process#getInputStream()} method.  This makes it easier
 to correlate error messages with the corresponding output.
 The initial value is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;</description>
					<attribute name="@param">
						<description>redirectErrorStream  The new property value</description>
					</attribute>
					<attribute name="@return">
						<description>This process builder</description>
					</attribute>
				</comment>
				<params>
					<param name="redirectErrorStream" comment="The new property value" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="start" returncomment="A new {@link Process} object for managing the subprocess" fulltype="java.lang.Process" type="Process">
				<comment>
					<description>Starts a new process using the attributes of this process builder.

 &lt;p&gt;The new process will
 invoke the command and arguments given by {@link #command()},
 in a working directory as given by {@link #directory()},
 with a process environment as given by {@link #environment()}.

 &lt;p&gt;This method checks that the command is a valid operating
 system command.  Which commands are valid is system-dependent,
 but at the very least the command must be a non-empty list of
 non-null strings.

 &lt;p&gt;If there is a security manager, its
 {@link SecurityManager#checkExec checkExec}
 method is called with the first component of this object&apos;s
 &lt;code&gt;command&lt;/code&gt; array as its argument. This may result in
 a {@link SecurityException} being thrown.

 &lt;p&gt;Starting an operating system process is highly system-dependent.
 Among the many things that can go wrong are:
 &lt;ul&gt;
 &lt;li&gt;The operating system program file was not found.
 &lt;li&gt;Access to the program file was denied.
 &lt;li&gt;The working directory does not exist.
 &lt;/ul&gt;

 &lt;p&gt;In such cases an exception will be thrown.  The exact nature
 of the exception is system-dependent, but it will always be a
 subclass of {@link IOException}.

 &lt;p&gt;Subsequent modifications to this process builder will not
 affect the returned {@link Process}.&lt;/p&gt;</description>
					<attribute name="@return">
						<description>A new {@link Process} object for managing the subprocess</description>
					</attribute>
					<attribute name="@throws">
						<description>NullPointerException
          If an element of the command list is null</description>
					</attribute>
					<attribute name="@throws">
						<description>IndexOutOfBoundsException
          If the command is an empty list (has size &lt;code&gt;0&lt;/code&gt;)</description>
					</attribute>
					<attribute name="@throws">
						<description>SecurityException
          If a security manager exists and its
          {@link SecurityManager#checkExec checkExec}
          method doesn&apos;t allow creation of the subprocess</description>
					</attribute>
					<attribute name="@throws">
						<description>IOException
          If an I/O error occurs</description>
					</attribute>
					<attribute name="@see">
						<description>Runtime#exec(String[], String[], java.io.File)</description>
					</attribute>
					<attribute name="@see">
						<description>SecurityManager#checkExec(String)</description>
					</attribute>
				</comment>
				<exceptions>
					<exception comment="If an I/O error occurs" fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="java.lang" interface="true" fulltype="java.lang.Runnable" type="Runnable">
		<comment>
			<description>The &lt;code&gt;Runnable&lt;/code&gt; interface should be implemented by any
 class whose instances are intended to be executed by a thread. The
 class must define a method of no arguments called &lt;code&gt;run&lt;/code&gt;.
 &lt;p&gt;
 This interface is designed to provide a common protocol for objects that
 wish to execute code while they are active. For example,
 &lt;code&gt;Runnable&lt;/code&gt; is implemented by class &lt;code&gt;Thread&lt;/code&gt;.
 Being active simply means that a thread has been started and has not
 yet been stopped.
 &lt;p&gt;
 In addition, &lt;code&gt;Runnable&lt;/code&gt; provides the means for a class to be
 active while not subclassing &lt;code&gt;Thread&lt;/code&gt;. A class that implements
 &lt;code&gt;Runnable&lt;/code&gt; can run without subclassing &lt;code&gt;Thread&lt;/code&gt;
 by instantiating a &lt;code&gt;Thread&lt;/code&gt; instance and passing itself in
 as the target.  In most cases, the &lt;code&gt;Runnable&lt;/code&gt; interface should
 be used if you are only planning to override the &lt;code&gt;run()&lt;/code&gt;
 method and no other &lt;code&gt;Thread&lt;/code&gt; methods.
 This is important because classes should not be subclassed
 unless the programmer intends on modifying or enhancing the fundamental
 behavior of the class.</description>
			<attribute name="@author">
				<description>Arthur van Hoff</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.Thread</description>
			</attribute>
			<attribute name="@see">
				<description>java.util.concurrent.Callable</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.0</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="run" fulltype="void" type="void">
				<comment>
					<description>When an object implementing interface &lt;code&gt;Runnable&lt;/code&gt; is used
 to create a thread, starting the thread causes the object&apos;s
 &lt;code&gt;run&lt;/code&gt; method to be called in that separately executing
 thread.
 &lt;p&gt;
 The general contract of the method &lt;code&gt;run&lt;/code&gt; is that it may
 take any action whatsoever.</description>
					<attribute name="@see">
						<description>java.lang.Thread#run()</description>
					</attribute>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="IncompatibleClassChangeError" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.IncompatibleClassChangeError" fulltype="java.lang.NoSuchFieldError" type="NoSuchFieldError">
		<comment>
			<description>Thrown if an application tries to access or modify a specified
 field of an object, and that object no longer has that field.
 &lt;p&gt;
 Normally, this error is caught by the compiler; this error can
 only occur at run time if the definition of a class has
 incompatibly changed.</description>
			<attribute name="@author">
				<description>unascribed</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.0</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="NoSuchFieldError">
				<comment>
					<description>Constructs a &lt;code&gt;NoSuchFieldException&lt;/code&gt; with no detail  message.</description>
				</comment>
			</constructor>
			<constructor visibility="public" name="NoSuchFieldError">
				<comment>
					<description>Constructs a &lt;code&gt;NoSuchFieldException&lt;/code&gt; with the specified
 detail message.</description>
					<attribute name="@param">
						<description>s   the detail message.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the detail message." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="java.lang" interface="true" fulltype="java.lang.Iterable" type="Iterable">
		<comment>
			<description>Implementing this interface allows an object to be the target of
  the &quot;foreach&quot; statement.</description>
			<attribute name="@since">
				<description>1.5</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="iterator" returncomment="an Iterator." fulltype="java.util.Iterator" type="Iterator">
				<comment>
					<description>Returns an iterator over a set of elements of type T.</description>
					<attribute name="@return">
						<description>an Iterator.</description>
					</attribute>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="VirtualMachineError" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.VirtualMachineError" fulltype="java.lang.InternalError" type="InternalError">
		<comment>
			<description>Thrown to indicate some unexpected internal error has occurred in
 the Java Virtual Machine.</description>
			<attribute name="@author">
				<description>unascribed</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.0</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="InternalError">
				<comment>
					<description>Constructs an &lt;code&gt;InternalError&lt;/code&gt; with no detail message.</description>
				</comment>
			</constructor>
			<constructor visibility="public" name="InternalError">
				<comment>
					<description>Constructs an &lt;code&gt;InternalError&lt;/code&gt; with the specified
 detail message.</description>
					<attribute name="@param">
						<description>s   the detail message.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the detail message." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass final="true" superclass="Object" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.Object" fulltype="java.lang.String" type="String">
		<implements>
			<interface fulltype="java.io.Serializable" type="Serializable" />
			<interface fulltype="java.lang.Comparable" type="Comparable" />
			<interface fulltype="java.lang.CharSequence" type="CharSequence" />
		</implements>
		<comment>
			<description>The &lt;code&gt;String&lt;/code&gt; class represents character strings. All
 string literals in Java programs, such as &lt;code&gt;&quot;abc&quot;&lt;/code&gt;, are
 implemented as instances of this class.
 &lt;p&gt;
 Strings are constant; their values cannot be changed after they
 are created. String buffers support mutable strings.
 Because String objects are immutable they can be shared. For example:
 &lt;p&gt;&lt;blockquote&gt;&lt;pre&gt;
     String str = &quot;abc&quot;;
 &lt;/pre&gt;&lt;/blockquote&gt;&lt;p&gt;
 is equivalent to:
 &lt;p&gt;&lt;blockquote&gt;&lt;pre&gt;
     char data[] = {&apos;a&apos;, &apos;b&apos;, &apos;c&apos;};
     String str = new String(data);
 &lt;/pre&gt;&lt;/blockquote&gt;&lt;p&gt;
 Here are some more examples of how strings can be used:
 &lt;p&gt;&lt;blockquote&gt;&lt;pre&gt;
     System.out.println(&quot;abc&quot;);
     String cde = &quot;cde&quot;;
     System.out.println(&quot;abc&quot; + cde);
     String c = &quot;abc&quot;.substring(2,3);
     String d = cde.substring(1, 2);
 &lt;/pre&gt;&lt;/blockquote&gt;
 &lt;p&gt;
 The class &lt;code&gt;String&lt;/code&gt; includes methods for examining
 individual characters of the sequence, for comparing strings, for
 searching strings, for extracting substrings, and for creating a
 copy of a string with all characters translated to uppercase or to
 lowercase. Case mapping is based on the Unicode Standard version
 specified by the {@link java.lang.Character Character} class.
 &lt;p&gt;
 The Java language provides special support for the string
 concatenation operator (&amp;nbsp;+&amp;nbsp;), and for conversion of
 other objects to strings. String concatenation is implemented
 through the &lt;code&gt;StringBuilder&lt;/code&gt;(or &lt;code&gt;StringBuffer&lt;/code&gt;)
 class and its &lt;code&gt;append&lt;/code&gt; method.
 String conversions are implemented through the method
 &lt;code&gt;toString&lt;/code&gt;, defined by &lt;code&gt;Object&lt;/code&gt; and
 inherited by all classes in Java. For additional information on
 string concatenation and conversion, see Gosling, Joy, and Steele,
 &lt;i&gt;The Java Language Specification&lt;/i&gt;.

 &lt;p&gt; Unless otherwise noted, passing a &lt;tt&gt;null&lt;/tt&gt; argument to a constructor
 or method in this class will cause a {@link NullPointerException} to be
 thrown.

 &lt;p&gt;A &lt;code&gt;String&lt;/code&gt; represents a string in the UTF-16 format
 in which &lt;em&gt;supplementary characters&lt;/em&gt; are represented by &lt;em&gt;surrogate
 pairs&lt;/em&gt; (see the section &lt;a href=&quot;Character.html#unicode&quot;&gt;Unicode
 Character Representations&lt;/a&gt; in the &lt;code&gt;Character&lt;/code&gt; class for
 more information).
 Index values refer to &lt;code&gt;char&lt;/code&gt; code units, so a supplementary
 character uses two positions in a &lt;code&gt;String&lt;/code&gt;.
 &lt;p&gt;The &lt;code&gt;String&lt;/code&gt; class provides methods for dealing with
 Unicode code points (i.e., characters), in addition to those for
 dealing with Unicode code units (i.e., &lt;code&gt;char&lt;/code&gt; values).</description>
			<attribute name="@author">
				<description>Lee Boynton</description>
			</attribute>
			<attribute name="@author">
				<description>Arthur van Hoff</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.Object#toString()</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.StringBuffer</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.StringBuilder</description>
			</attribute>
			<attribute name="@see">
				<description>java.nio.charset.Charset</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.0</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" visibility="private" name="value" fulltype="char[]" type="char">
				<comment>
					<description>The value is used for character storage.</description>
				</comment>
			</field>
			<field final="true" visibility="private" name="offset" fulltype="int" type="int">
				<comment>
					<description>The offset is the first index of the storage that is used.</description>
				</comment>
			</field>
			<field final="true" visibility="private" name="count" fulltype="int" type="int">
				<comment>
					<description>The count is the number of characters in the String.</description>
				</comment>
			</field>
			<field visibility="private" name="hash" fulltype="int" type="int">
				<comment>
					<description>Cache the hash code for the string</description>
				</comment>
			</field>
			<field final="true" static="true" const="-6849794470754667710" visibility="private" name="serialVersionUID" constexpr="-6849794470754667710L" fulltype="long" type="long">
				<comment>
					<description>use serialVersionUID from JDK 1.0.2 for interoperability</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="private" name="serialPersistentFields" fulltype="java.io.ObjectStreamField[]" type="ObjectStreamField">
				<comment>
					<description>Class String is special cased within the Serialization Stream Protocol.

 A String instance is written initially into an ObjectOutputStream in the
 following format:
 &lt;pre&gt;
      &lt;code&gt;TC_STRING&lt;/code&gt; (utf String)
 &lt;/pre&gt;
 The String is written by method &lt;code&gt;DataOutput.writeUTF&lt;/code&gt;.
 A new handle is generated to  refer to all future references to the
 string instance within the stream.</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="CASE_INSENSITIVE_ORDER" fulltype="java.util.Comparator" type="Comparator">
				<comment>
					<description>A Comparator that orders &lt;code&gt;String&lt;/code&gt; objects as by
 &lt;code&gt;compareToIgnoreCase&lt;/code&gt;. This comparator is serializable.
 &lt;p&gt;
 Note that this Comparator does &lt;em&gt;not&lt;/em&gt; take locale into account,
 and will result in an unsatisfactory ordering for certain locales.
 The java.text package provides &lt;em&gt;Collators&lt;/em&gt; to allow
 locale-sensitive ordering.</description>
					<attribute name="@see">
						<description>java.text.Collator#compare(String, String)</description>
					</attribute>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="public" name="String">
				<comment>
					<description>Initializes a newly created {@code String} object so that it represents
 an empty character sequence.  Note that use of this constructor is
 unnecessary since Strings are immutable.</description>
				</comment>
			</constructor>
			<constructor visibility="public" name="String">
				<comment>
					<description>Initializes a newly created {@code String} object so that it represents
 the same sequence of characters as the argument; in other words, the
 newly created string is a copy of the argument string. Unless an
 explicit copy of {@code original} is needed, use of this constructor is
 unnecessary since Strings are immutable.</description>
					<attribute name="@param">
						<description>original
         A {@code String}</description>
					</attribute>
				</comment>
				<params>
					<param name="original" comment="A {@code String}" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="String">
				<comment>
					<description>Allocates a new {@code String} so that it represents the sequence of
 characters currently contained in the character array argument. The
 contents of the character array are copied; subsequent modification of
 the character array does not affect the newly created string.</description>
					<attribute name="@param">
						<description>value
         The initial value of the string</description>
					</attribute>
				</comment>
				<params>
					<param name="value" comment="The initial value of the string" fulltype="char[]" type="char" />
				</params>
			</constructor>
			<constructor visibility="public" name="String">
				<comment>
					<description>Allocates a new {@code String} that contains characters from a subarray
 of the character array argument. The {@code offset} argument is the
 index of the first character of the subarray and the {@code count}
 argument specifies the length of the subarray. The contents of the
 subarray are copied; subsequent modification of the character array does
 not affect the newly created string.</description>
					<attribute name="@param">
						<description>value
         Array that is the source of characters</description>
					</attribute>
					<attribute name="@param">
						<description>offset
         The initial offset</description>
					</attribute>
					<attribute name="@param">
						<description>count
         The length</description>
					</attribute>
					<attribute name="@throws">
						<description>IndexOutOfBoundsException
          If the {@code offset} and {@code count} arguments index
          characters outside the bounds of the {@code value} array</description>
					</attribute>
				</comment>
				<params>
					<param name="value" comment="Array that is the source of characters" fulltype="char[]" type="char" />
					<param name="offset" comment="The initial offset" fulltype="int" type="int" />
					<param name="count" comment="The length" fulltype="int" type="int" />
				</params>
			</constructor>
			<constructor visibility="public" name="String">
				<comment>
					<description>Allocates a new {@code String} that contains characters from a subarray
 of the &lt;a href=&quot;Character.html#unicode&quot;&gt;Unicode code point&lt;/a&gt; array
 argument.  The {@code offset} argument is the index of the first code
 point of the subarray and the {@code count} argument specifies the
 length of the subarray.  The contents of the subarray are converted to
 {@code char}s; subsequent modification of the {@code int} array does not
 affect the newly created string.</description>
					<attribute name="@param">
						<description>codePoints
         Array that is the source of Unicode code points</description>
					</attribute>
					<attribute name="@param">
						<description>offset
         The initial offset</description>
					</attribute>
					<attribute name="@param">
						<description>count
         The length</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalArgumentException
          If any invalid Unicode code point is found in {@code
          codePoints}</description>
					</attribute>
					<attribute name="@throws">
						<description>IndexOutOfBoundsException
          If the {@code offset} and {@code count} arguments index
          characters outside the bounds of the {@code codePoints} array</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="codePoints" comment="Array that is the source of Unicode code points" fulltype="int[]" type="int" />
					<param name="offset" comment="The initial offset" fulltype="int" type="int" />
					<param name="count" comment="The length" fulltype="int" type="int" />
				</params>
			</constructor>
			<constructor visibility="public" name="String">
				<comment>
					<description>Allocates a new {@code String} constructed from a subarray of an array
 of 8-bit integer values.

 &lt;p&gt; The {@code offset} argument is the index of the first byte of the
 subarray, and the {@code count} argument specifies the length of the
 subarray.

 &lt;p&gt; Each {@code byte} in the subarray is converted to a {@code char} as
 specified in the method above.</description>
					<attribute name="@deprecated">
						<description>This method does not properly convert bytes into characters.
 As of JDK&amp;nbsp;1.1, the preferred way to do this is via the
 {@code String} constructors that take a {@link
 java.nio.charset.Charset}, charset name, or that use the platform&apos;s
 default charset.</description>
					</attribute>
					<attribute name="@param">
						<description>ascii
         The bytes to be converted to characters</description>
					</attribute>
					<attribute name="@param">
						<description>hibyte
         The top 8 bits of each 16-bit Unicode code unit</description>
					</attribute>
					<attribute name="@param">
						<description>offset
         The initial offset</description>
					</attribute>
					<attribute name="@param">
						<description>count
         The length</description>
					</attribute>
					<attribute name="@throws">
						<description>IndexOutOfBoundsException
          If the {@code offset} or {@code count} argument is invalid</description>
					</attribute>
					<attribute name="@see">
						<description>#String(byte[], int)</description>
					</attribute>
					<attribute name="@see">
						<description>#String(byte[], int, int, java.lang.String)</description>
					</attribute>
					<attribute name="@see">
						<description>#String(byte[], int, int, java.nio.charset.Charset)</description>
					</attribute>
					<attribute name="@see">
						<description>#String(byte[], int, int)</description>
					</attribute>
					<attribute name="@see">
						<description>#String(byte[], java.lang.String)</description>
					</attribute>
					<attribute name="@see">
						<description>#String(byte[], java.nio.charset.Charset)</description>
					</attribute>
					<attribute name="@see">
						<description>#String(byte[])</description>
					</attribute>
				</comment>
				<params>
					<param name="ascii" comment="The bytes to be converted to characters" fulltype="byte[]" type="byte" />
					<param name="hibyte" comment="The top 8 bits of each 16-bit Unicode code unit" fulltype="int" type="int" />
					<param name="offset" comment="The initial offset" fulltype="int" type="int" />
					<param name="count" comment="The length" fulltype="int" type="int" />
				</params>
			</constructor>
			<constructor visibility="public" name="String">
				<comment>
					<description>Allocates a new {@code String} containing characters constructed from
 an array of 8-bit integer values. Each character &lt;i&gt;c&lt;/i&gt;in the
 resulting string is constructed from the corresponding component
 &lt;i&gt;b&lt;/i&gt; in the byte array such that:

 &lt;blockquote&gt;&lt;pre&gt;
     &lt;b&gt;&lt;i&gt;c&lt;/i&gt;&lt;/b&gt; == (char)(((hibyte &amp;amp; 0xff) &amp;lt;&amp;lt; 8)
                         | (&lt;b&gt;&lt;i&gt;b&lt;/i&gt;&lt;/b&gt; &amp;amp; 0xff))
 &lt;/pre&gt;&lt;/blockquote&gt;</description>
					<attribute name="@deprecated">
						<description>This method does not properly convert bytes into
 characters.  As of JDK&amp;nbsp;1.1, the preferred way to do this is via the
 {@code String} constructors that take a {@link
 java.nio.charset.Charset}, charset name, or that use the platform&apos;s
 default charset.</description>
					</attribute>
					<attribute name="@param">
						<description>ascii
         The bytes to be converted to characters</description>
					</attribute>
					<attribute name="@param">
						<description>hibyte
         The top 8 bits of each 16-bit Unicode code unit</description>
					</attribute>
					<attribute name="@see">
						<description>#String(byte[], int, int, java.lang.String)</description>
					</attribute>
					<attribute name="@see">
						<description>#String(byte[], int, int, java.nio.charset.Charset)</description>
					</attribute>
					<attribute name="@see">
						<description>#String(byte[], int, int)</description>
					</attribute>
					<attribute name="@see">
						<description>#String(byte[], java.lang.String)</description>
					</attribute>
					<attribute name="@see">
						<description>#String(byte[], java.nio.charset.Charset)</description>
					</attribute>
					<attribute name="@see">
						<description>#String(byte[])</description>
					</attribute>
				</comment>
				<params>
					<param name="ascii" comment="The bytes to be converted to characters" fulltype="byte[]" type="byte" />
					<param name="hibyte" comment="The top 8 bits of each 16-bit Unicode code unit" fulltype="int" type="int" />
				</params>
			</constructor>
			<constructor visibility="public" name="String">
				<comment>
					<description>Constructs a new {@code String} by decoding the specified subarray of
 bytes using the specified charset.  The length of the new {@code String}
 is a function of the charset, and hence may not be equal to the length
 of the subarray.

 &lt;p&gt; The behavior of this constructor when the given bytes are not valid
 in the given charset is unspecified.  The {@link
 java.nio.charset.CharsetDecoder} class should be used when more control
 over the decoding process is required.</description>
					<attribute name="@param">
						<description>bytes
         The bytes to be decoded into characters</description>
					</attribute>
					<attribute name="@param">
						<description>offset
         The index of the first byte to decode</description>
					</attribute>
					<attribute name="@param">
						<description>length
         The number of bytes to decode</description>
					</attribute>
					<attribute name="@param">
						<description>charsetName
         The name of a supported {@linkplain java.nio.charset.Charset
         charset}</description>
					</attribute>
					<attribute name="@throws">
						<description>UnsupportedEncodingException
          If the named charset is not supported</description>
					</attribute>
					<attribute name="@throws">
						<description>IndexOutOfBoundsException
          If the {@code offset} and {@code length} arguments index
          characters outside the bounds of the {@code bytes} array</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.1</description>
					</attribute>
				</comment>
				<params>
					<param name="bytes" comment="The bytes to be decoded into characters" fulltype="byte[]" type="byte" />
					<param name="offset" comment="The index of the first byte to decode" fulltype="int" type="int" />
					<param name="length" comment="The number of bytes to decode" fulltype="int" type="int" />
					<param name="charsetName" comment="The name of a supported {@linkplain java.nio.charset.Charset
         charset}" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception comment="If the named charset is not supported" fulltype="java.io.UnsupportedEncodingException" type="UnsupportedEncodingException" />
				</exceptions>
			</constructor>
			<constructor visibility="public" name="String">
				<comment>
					<description>Constructs a new {@code String} by decoding the specified subarray of
 bytes using the specified {@linkplain java.nio.charset.Charset charset}.
 The length of the new {@code String} is a function of the charset, and
 hence may not be equal to the length of the subarray.

 &lt;p&gt; This method always replaces malformed-input and unmappable-character
 sequences with this charset&apos;s default replacement string.  The {@link
 java.nio.charset.CharsetDecoder} class should be used when more control
 over the decoding process is required.</description>
					<attribute name="@param">
						<description>bytes
         The bytes to be decoded into characters</description>
					</attribute>
					<attribute name="@param">
						<description>offset
         The index of the first byte to decode</description>
					</attribute>
					<attribute name="@param">
						<description>length
         The number of bytes to decode</description>
					</attribute>
					<attribute name="@param">
						<description>charset
         The {@linkplain java.nio.charset.Charset charset} to be used to
         decode the {@code bytes}</description>
					</attribute>
					<attribute name="@throws">
						<description>IndexOutOfBoundsException
          If the {@code offset} and {@code length} arguments index
          characters outside the bounds of the {@code bytes} array</description>
					</attribute>
					<attribute name="@since">
						<description>1.6</description>
					</attribute>
				</comment>
				<params>
					<param name="bytes" comment="The bytes to be decoded into characters" fulltype="byte[]" type="byte" />
					<param name="offset" comment="The index of the first byte to decode" fulltype="int" type="int" />
					<param name="length" comment="The number of bytes to decode" fulltype="int" type="int" />
					<param name="charset" comment="The {@linkplain java.nio.charset.Charset charset} to be used to
         decode the {@code bytes}" fulltype="java.nio.charset.Charset" type="Charset" />
				</params>
			</constructor>
			<constructor visibility="public" name="String">
				<comment>
					<description>Constructs a new {@code String} by decoding the specified array of bytes
 using the specified {@linkplain java.nio.charset.Charset charset}.  The
 length of the new {@code String} is a function of the charset, and hence
 may not be equal to the length of the byte array.

 &lt;p&gt; The behavior of this constructor when the given bytes are not valid
 in the given charset is unspecified.  The {@link
 java.nio.charset.CharsetDecoder} class should be used when more control
 over the decoding process is required.</description>
					<attribute name="@param">
						<description>bytes
         The bytes to be decoded into characters</description>
					</attribute>
					<attribute name="@param">
						<description>charsetName
         The name of a supported {@linkplain java.nio.charset.Charset
         charset}</description>
					</attribute>
					<attribute name="@throws">
						<description>UnsupportedEncodingException
          If the named charset is not supported</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.1</description>
					</attribute>
				</comment>
				<params>
					<param name="bytes" comment="The bytes to be decoded into characters" fulltype="byte[]" type="byte" />
					<param name="charsetName" comment="The name of a supported {@linkplain java.nio.charset.Charset
         charset}" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception comment="If the named charset is not supported" fulltype="java.io.UnsupportedEncodingException" type="UnsupportedEncodingException" />
				</exceptions>
			</constructor>
			<constructor visibility="public" name="String">
				<comment>
					<description>Constructs a new {@code String} by decoding the specified array of
 bytes using the specified {@linkplain java.nio.charset.Charset charset}.
 The length of the new {@code String} is a function of the charset, and
 hence may not be equal to the length of the byte array.

 &lt;p&gt; This method always replaces malformed-input and unmappable-character
 sequences with this charset&apos;s default replacement string.  The {@link
 java.nio.charset.CharsetDecoder} class should be used when more control
 over the decoding process is required.</description>
					<attribute name="@param">
						<description>bytes
         The bytes to be decoded into characters</description>
					</attribute>
					<attribute name="@param">
						<description>charset
         The {@linkplain java.nio.charset.Charset charset} to be used to
         decode the {@code bytes}</description>
					</attribute>
					<attribute name="@since">
						<description>1.6</description>
					</attribute>
				</comment>
				<params>
					<param name="bytes" comment="The bytes to be decoded into characters" fulltype="byte[]" type="byte" />
					<param name="charset" comment="The {@linkplain java.nio.charset.Charset charset} to be used to
         decode the {@code bytes}" fulltype="java.nio.charset.Charset" type="Charset" />
				</params>
			</constructor>
			<constructor visibility="public" name="String">
				<comment>
					<description>Constructs a new {@code String} by decoding the specified subarray of
 bytes using the platform&apos;s default charset.  The length of the new
 {@code String} is a function of the charset, and hence may not be equal
 to the length of the subarray.

 &lt;p&gt; The behavior of this constructor when the given bytes are not valid
 in the default charset is unspecified.  The {@link
 java.nio.charset.CharsetDecoder} class should be used when more control
 over the decoding process is required.</description>
					<attribute name="@param">
						<description>bytes
         The bytes to be decoded into characters</description>
					</attribute>
					<attribute name="@param">
						<description>offset
         The index of the first byte to decode</description>
					</attribute>
					<attribute name="@param">
						<description>length
         The number of bytes to decode</description>
					</attribute>
					<attribute name="@throws">
						<description>IndexOutOfBoundsException
          If the {@code offset} and the {@code length} arguments index
          characters outside the bounds of the {@code bytes} array</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.1</description>
					</attribute>
				</comment>
				<params>
					<param name="bytes" comment="The bytes to be decoded into characters" fulltype="byte[]" type="byte" />
					<param name="offset" comment="The index of the first byte to decode" fulltype="int" type="int" />
					<param name="length" comment="The number of bytes to decode" fulltype="int" type="int" />
				</params>
			</constructor>
			<constructor visibility="public" name="String">
				<comment>
					<description>Constructs a new {@code String} by decoding the specified array of bytes
 using the platform&apos;s default charset.  The length of the new {@code
 String} is a function of the charset, and hence may not be equal to the
 length of the byte array.

 &lt;p&gt; The behavior of this constructor when the given bytes are not valid
 in the default charset is unspecified.  The {@link
 java.nio.charset.CharsetDecoder} class should be used when more control
 over the decoding process is required.</description>
					<attribute name="@param">
						<description>bytes
         The bytes to be decoded into characters</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.1</description>
					</attribute>
				</comment>
				<params>
					<param name="bytes" comment="The bytes to be decoded into characters" fulltype="byte[]" type="byte" />
				</params>
			</constructor>
			<constructor visibility="public" name="String">
				<comment>
					<description>Allocates a new string that contains the sequence of characters
 currently contained in the string buffer argument. The contents of the
 string buffer are copied; subsequent modification of the string buffer
 does not affect the newly created string.</description>
					<attribute name="@param">
						<description>buffer
         A {@code StringBuffer}</description>
					</attribute>
				</comment>
				<params>
					<param name="buffer" comment="A {@code StringBuffer}" fulltype="java.lang.StringBuffer" type="StringBuffer" />
				</params>
			</constructor>
			<constructor visibility="public" name="String">
				<comment>
					<description>Allocates a new string that contains the sequence of characters
 currently contained in the string builder argument. The contents of the
 string builder are copied; subsequent modification of the string builder
 does not affect the newly created string.

 &lt;p&gt; This constructor is provided to ease migration to {@code
 StringBuilder}. Obtaining a string from a string builder via the {@code
 toString} method is likely to run faster and is generally preferred.</description>
					<attribute name="@param">
						<description>builder
          A {@code StringBuilder}</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="builder" comment="A {@code StringBuilder}" fulltype="java.lang.StringBuilder" type="StringBuilder" />
				</params>
			</constructor>
			<constructor visibility="package-private" name="String">
				<params>
					<param name="offset" fulltype="int" type="int" />
					<param name="count" fulltype="int" type="int" />
					<param name="value" fulltype="char[]" type="char" />
				</params>
			</constructor>
			<method static="true" visibility="private" name="checkBounds" fulltype="void" type="void">
				<params>
					<param name="bytes" fulltype="byte[]" type="byte" />
					<param name="offset" fulltype="int" type="int" />
					<param name="length" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="length" returncomment="the length of the sequence of characters represented by this
          object." fulltype="int" type="int">
				<comment>
					<description>Returns the length of this string.
 The length is equal to the number of &lt;a href=&quot;Character.html#unicode&quot;&gt;Unicode
 code units&lt;/a&gt; in the string.</description>
					<attribute name="@return">
						<description>the length of the sequence of characters represented by this
          object.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="isEmpty" returncomment="&lt;tt&gt;true&lt;/tt&gt; if {@link #length()} is &lt;tt&gt;0&lt;/tt&gt;, otherwise
 &lt;tt&gt;false&lt;/tt&gt;" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns &lt;tt&gt;true&lt;/tt&gt; if, and only if, {@link #length()} is &lt;tt&gt;0&lt;/tt&gt;.</description>
					<attribute name="@return">
						<description>&lt;tt&gt;true&lt;/tt&gt; if {@link #length()} is &lt;tt&gt;0&lt;/tt&gt;, otherwise
 &lt;tt&gt;false&lt;/tt&gt;</description>
					</attribute>
					<attribute name="@since">
						<description>1.6</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="charAt" returncomment="the &lt;code&gt;char&lt;/code&gt; value at the specified index of this string.
             The first &lt;code&gt;char&lt;/code&gt; value is at index &lt;code&gt;0&lt;/code&gt;." fulltype="char" type="char">
				<comment>
					<description>Returns the &lt;code&gt;char&lt;/code&gt; value at the
 specified index. An index ranges from &lt;code&gt;0&lt;/code&gt; to
 &lt;code&gt;length() - 1&lt;/code&gt;. The first &lt;code&gt;char&lt;/code&gt; value of the sequence
 is at index &lt;code&gt;0&lt;/code&gt;, the next at index &lt;code&gt;1&lt;/code&gt;,
 and so on, as for array indexing.

 &lt;p&gt;If the &lt;code&gt;char&lt;/code&gt; value specified by the index is a
 &lt;a href=&quot;Character.html#unicode&quot;&gt;surrogate&lt;/a&gt;, the surrogate
 value is returned.</description>
					<attribute name="@param">
						<description>index   the index of the &lt;code&gt;char&lt;/code&gt; value.</description>
					</attribute>
					<attribute name="@return">
						<description>the &lt;code&gt;char&lt;/code&gt; value at the specified index of this string.
             The first &lt;code&gt;char&lt;/code&gt; value is at index &lt;code&gt;0&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@exception">
						<description>IndexOutOfBoundsException  if the &lt;code&gt;index&lt;/code&gt;
             argument is negative or not less than the length of this
             string.</description>
					</attribute>
				</comment>
				<params>
					<param name="index" comment="the index of the &lt;code&gt;char&lt;/code&gt; value." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="codePointAt" returncomment="the code point value of the character at the
             &lt;code&gt;index&lt;/code&gt;" fulltype="int" type="int">
				<comment>
					<description>Returns the character (Unicode code point) at the specified
 index. The index refers to &lt;code&gt;char&lt;/code&gt; values
 (Unicode code units) and ranges from &lt;code&gt;0&lt;/code&gt; to
 {@link #length()}&lt;code&gt; - 1&lt;/code&gt;.

 &lt;p&gt; If the &lt;code&gt;char&lt;/code&gt; value specified at the given index
 is in the high-surrogate range, the following index is less
 than the length of this &lt;code&gt;String&lt;/code&gt;, and the
 &lt;code&gt;char&lt;/code&gt; value at the following index is in the
 low-surrogate range, then the supplementary code point
 corresponding to this surrogate pair is returned. Otherwise,
 the &lt;code&gt;char&lt;/code&gt; value at the given index is returned.</description>
					<attribute name="@param">
						<description>index the index to the &lt;code&gt;char&lt;/code&gt; values</description>
					</attribute>
					<attribute name="@return">
						<description>the code point value of the character at the
             &lt;code&gt;index&lt;/code&gt;</description>
					</attribute>
					<attribute name="@exception">
						<description>IndexOutOfBoundsException  if the &lt;code&gt;index&lt;/code&gt;
             argument is negative or not less than the length of this
             string.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="index" comment="the index to the &lt;code&gt;char&lt;/code&gt; values" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="codePointBefore" returncomment="the Unicode code point value before the given index." fulltype="int" type="int">
				<comment>
					<description>Returns the character (Unicode code point) before the specified
 index. The index refers to &lt;code&gt;char&lt;/code&gt; values
 (Unicode code units) and ranges from &lt;code&gt;1&lt;/code&gt; to {@link
 CharSequence#length() length}.

 &lt;p&gt; If the &lt;code&gt;char&lt;/code&gt; value at &lt;code&gt;(index - 1)&lt;/code&gt;
 is in the low-surrogate range, &lt;code&gt;(index - 2)&lt;/code&gt; is not
 negative, and the &lt;code&gt;char&lt;/code&gt; value at &lt;code&gt;(index -
 2)&lt;/code&gt; is in the high-surrogate range, then the
 supplementary code point value of the surrogate pair is
 returned. If the &lt;code&gt;char&lt;/code&gt; value at &lt;code&gt;index -
 1&lt;/code&gt; is an unpaired low-surrogate or a high-surrogate, the
 surrogate value is returned.</description>
					<attribute name="@param">
						<description>index the index following the code point that should be returned</description>
					</attribute>
					<attribute name="@return">
						<description>the Unicode code point value before the given index.</description>
					</attribute>
					<attribute name="@exception">
						<description>IndexOutOfBoundsException if the &lt;code&gt;index&lt;/code&gt;
            argument is less than 1 or greater than the length
            of this string.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="index" comment="the index following the code point that should be returned" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="codePointCount" returncomment="the number of Unicode code points in the specified text
 range" fulltype="int" type="int">
				<comment>
					<description>Returns the number of Unicode code points in the specified text
 range of this &lt;code&gt;String&lt;/code&gt;. The text range begins at the
 specified &lt;code&gt;beginIndex&lt;/code&gt; and extends to the
 &lt;code&gt;char&lt;/code&gt; at index &lt;code&gt;endIndex - 1&lt;/code&gt;. Thus the
 length (in &lt;code&gt;char&lt;/code&gt;s) of the text range is
 &lt;code&gt;endIndex-beginIndex&lt;/code&gt;. Unpaired surrogates within
 the text range count as one code point each.</description>
					<attribute name="@param">
						<description>beginIndex the index to the first &lt;code&gt;char&lt;/code&gt; of
 the text range.</description>
					</attribute>
					<attribute name="@param">
						<description>endIndex the index after the last &lt;code&gt;char&lt;/code&gt; of
 the text range.</description>
					</attribute>
					<attribute name="@return">
						<description>the number of Unicode code points in the specified text
 range</description>
					</attribute>
					<attribute name="@exception">
						<description>IndexOutOfBoundsException if the
 &lt;code&gt;beginIndex&lt;/code&gt; is negative, or &lt;code&gt;endIndex&lt;/code&gt;
 is larger than the length of this &lt;code&gt;String&lt;/code&gt;, or
 &lt;code&gt;beginIndex&lt;/code&gt; is larger than &lt;code&gt;endIndex&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="beginIndex" comment="the index to the first &lt;code&gt;char&lt;/code&gt; of
 the text range." fulltype="int" type="int" />
					<param name="endIndex" comment="the index after the last &lt;code&gt;char&lt;/code&gt; of
 the text range." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="offsetByCodePoints" returncomment="the index within this &lt;code&gt;String&lt;/code&gt;" fulltype="int" type="int">
				<comment>
					<description>Returns the index within this &lt;code&gt;String&lt;/code&gt; that is
 offset from the given &lt;code&gt;index&lt;/code&gt; by
 &lt;code&gt;codePointOffset&lt;/code&gt; code points. Unpaired surrogates
 within the text range given by &lt;code&gt;index&lt;/code&gt; and
 &lt;code&gt;codePointOffset&lt;/code&gt; count as one code point each.</description>
					<attribute name="@param">
						<description>index the index to be offset</description>
					</attribute>
					<attribute name="@param">
						<description>codePointOffset the offset in code points</description>
					</attribute>
					<attribute name="@return">
						<description>the index within this &lt;code&gt;String&lt;/code&gt;</description>
					</attribute>
					<attribute name="@exception">
						<description>IndexOutOfBoundsException if &lt;code&gt;index&lt;/code&gt;
   is negative or larger then the length of this
   &lt;code&gt;String&lt;/code&gt;, or if &lt;code&gt;codePointOffset&lt;/code&gt; is positive
   and the substring starting with &lt;code&gt;index&lt;/code&gt; has fewer
   than &lt;code&gt;codePointOffset&lt;/code&gt; code points,
   or if &lt;code&gt;codePointOffset&lt;/code&gt; is negative and the substring
   before &lt;code&gt;index&lt;/code&gt; has fewer than the absolute value
   of &lt;code&gt;codePointOffset&lt;/code&gt; code points.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="index" comment="the index to be offset" fulltype="int" type="int" />
					<param name="codePointOffset" comment="the offset in code points" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="package-private" name="getChars" fulltype="void" type="void">
				<comment>
					<description>Copy characters from this string into dst starting at dstBegin.
 This method doesn&apos;t perform any range checking.</description>
				</comment>
				<params>
					<param name="dst" fulltype="char[]" type="char" />
					<param name="dstBegin" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getChars" fulltype="void" type="void">
				<comment>
					<description>Copies characters from this string into the destination character
 array.
 &lt;p&gt;
 The first character to be copied is at index &lt;code&gt;srcBegin&lt;/code&gt;;
 the last character to be copied is at index &lt;code&gt;srcEnd-1&lt;/code&gt;
 (thus the total number of characters to be copied is
 &lt;code&gt;srcEnd-srcBegin&lt;/code&gt;). The characters are copied into the
 subarray of &lt;code&gt;dst&lt;/code&gt; starting at index &lt;code&gt;dstBegin&lt;/code&gt;
 and ending at index:
 &lt;p&gt;&lt;blockquote&gt;&lt;pre&gt;
     dstbegin + (srcEnd-srcBegin) - 1
 &lt;/pre&gt;&lt;/blockquote&gt;</description>
					<attribute name="@param">
						<description>srcBegin   index of the first character in the string
                        to copy.</description>
					</attribute>
					<attribute name="@param">
						<description>srcEnd     index after the last character in the string
                        to copy.</description>
					</attribute>
					<attribute name="@param">
						<description>dst        the destination array.</description>
					</attribute>
					<attribute name="@param">
						<description>dstBegin   the start offset in the destination array.</description>
					</attribute>
					<attribute name="@exception">
						<description>IndexOutOfBoundsException If any of the following
            is true:
            &lt;ul&gt;&lt;li&gt;&lt;code&gt;srcBegin&lt;/code&gt; is negative.
            &lt;li&gt;&lt;code&gt;srcBegin&lt;/code&gt; is greater than &lt;code&gt;srcEnd&lt;/code&gt;
            &lt;li&gt;&lt;code&gt;srcEnd&lt;/code&gt; is greater than the length of this
                string
            &lt;li&gt;&lt;code&gt;dstBegin&lt;/code&gt; is negative
            &lt;li&gt;&lt;code&gt;dstBegin+(srcEnd-srcBegin)&lt;/code&gt; is larger than
                &lt;code&gt;dst.length&lt;/code&gt;&lt;/ul&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="srcBegin" comment="index of the first character in the string
                        to copy." fulltype="int" type="int" />
					<param name="srcEnd" comment="index after the last character in the string
                        to copy." fulltype="int" type="int" />
					<param name="dst" comment="the destination array." fulltype="char[]" type="char" />
					<param name="dstBegin" comment="the start offset in the destination array." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getBytes" fulltype="void" type="void">
				<comment>
					<description>Copies characters from this string into the destination byte array. Each
 byte receives the 8 low-order bits of the corresponding character. The
 eight high-order bits of each character are not copied and do not
 participate in the transfer in any way.

 &lt;p&gt; The first character to be copied is at index {@code srcBegin}; the
 last character to be copied is at index {@code srcEnd-1}.  The total
 number of characters to be copied is {@code srcEnd-srcBegin}. The
 characters, converted to bytes, are copied into the subarray of {@code
 dst} starting at index {@code dstBegin} and ending at index:

 &lt;blockquote&gt;&lt;pre&gt;
     dstbegin + (srcEnd-srcBegin) - 1
 &lt;/pre&gt;&lt;/blockquote&gt;</description>
					<attribute name="@deprecated">
						<description>This method does not properly convert characters into
 bytes.  As of JDK&amp;nbsp;1.1, the preferred way to do this is via the
 {@link #getBytes()} method, which uses the platform&apos;s default charset.</description>
					</attribute>
					<attribute name="@param">
						<description>srcBegin
         Index of the first character in the string to copy</description>
					</attribute>
					<attribute name="@param">
						<description>srcEnd
         Index after the last character in the string to copy</description>
					</attribute>
					<attribute name="@param">
						<description>dst
         The destination array</description>
					</attribute>
					<attribute name="@param">
						<description>dstBegin
         The start offset in the destination array</description>
					</attribute>
					<attribute name="@throws">
						<description>IndexOutOfBoundsException
          If any of the following is true:
          &lt;ul&gt;
            &lt;li&gt; {@code srcBegin} is negative
            &lt;li&gt; {@code srcBegin} is greater than {@code srcEnd}
            &lt;li&gt; {@code srcEnd} is greater than the length of this String
            &lt;li&gt; {@code dstBegin} is negative
            &lt;li&gt; {@code dstBegin+(srcEnd-srcBegin)} is larger than {@code
                 dst.length}
          &lt;/ul&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="srcBegin" comment="Index of the first character in the string to copy" fulltype="int" type="int" />
					<param name="srcEnd" comment="Index after the last character in the string to copy" fulltype="int" type="int" />
					<param name="dst" comment="The destination array" fulltype="byte[]" type="byte" />
					<param name="dstBegin" comment="The start offset in the destination array" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getBytes" returncomment="The resultant byte array" fulltype="byte[]" type="byte">
				<comment>
					<description>Encodes this {@code String} into a sequence of bytes using the named
 charset, storing the result into a new byte array.

 &lt;p&gt; The behavior of this method when this string cannot be encoded in
 the given charset is unspecified.  The {@link
 java.nio.charset.CharsetEncoder} class should be used when more control
 over the encoding process is required.</description>
					<attribute name="@param">
						<description>charsetName
         The name of a supported {@linkplain java.nio.charset.Charset
         charset}</description>
					</attribute>
					<attribute name="@return">
						<description>The resultant byte array</description>
					</attribute>
					<attribute name="@throws">
						<description>UnsupportedEncodingException
          If the named charset is not supported</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.1</description>
					</attribute>
				</comment>
				<params>
					<param name="charsetName" comment="The name of a supported {@linkplain java.nio.charset.Charset
         charset}" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception comment="If the named charset is not supported" fulltype="java.io.UnsupportedEncodingException" type="UnsupportedEncodingException" />
				</exceptions>
			</method>
			<method visibility="public" name="getBytes" returncomment="The resultant byte array" fulltype="byte[]" type="byte">
				<comment>
					<description>Encodes this {@code String} into a sequence of bytes using the given
 {@linkplain java.nio.charset.Charset charset}, storing the result into a
 new byte array.

 &lt;p&gt; This method always replaces malformed-input and unmappable-character
 sequences with this charset&apos;s default replacement byte array.  The
 {@link java.nio.charset.CharsetEncoder} class should be used when more
 control over the encoding process is required.</description>
					<attribute name="@param">
						<description>charset
         The {@linkplain java.nio.charset.Charset} to be used to encode
         the {@code String}</description>
					</attribute>
					<attribute name="@return">
						<description>The resultant byte array</description>
					</attribute>
					<attribute name="@since">
						<description>1.6</description>
					</attribute>
				</comment>
				<params>
					<param name="charset" comment="The {@linkplain java.nio.charset.Charset} to be used to encode
         the {@code String}" fulltype="java.nio.charset.Charset" type="Charset" />
				</params>
			</method>
			<method visibility="public" name="getBytes" returncomment="The resultant byte array" fulltype="byte[]" type="byte">
				<comment>
					<description>Encodes this {@code String} into a sequence of bytes using the
 platform&apos;s default charset, storing the result into a new byte array.

 &lt;p&gt; The behavior of this method when this string cannot be encoded in
 the default charset is unspecified.  The {@link
 java.nio.charset.CharsetEncoder} class should be used when more control
 over the encoding process is required.</description>
					<attribute name="@return">
						<description>The resultant byte array</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="equals" returncomment="{@code true} if the given object represents a {@code String}
          equivalent to this string, {@code false} otherwise" fulltype="boolean" type="boolean">
				<comment>
					<description>Compares this string to the specified object.  The result is {@code
 true} if and only if the argument is not {@code null} and is a {@code
 String} object that represents the same sequence of characters as this
 object.</description>
					<attribute name="@param">
						<description>anObject
         The object to compare this {@code String} against</description>
					</attribute>
					<attribute name="@return">
						<description>{@code true} if the given object represents a {@code String}
          equivalent to this string, {@code false} otherwise</description>
					</attribute>
					<attribute name="@see">
						<description>#compareTo(String)</description>
					</attribute>
					<attribute name="@see">
						<description>#equalsIgnoreCase(String)</description>
					</attribute>
				</comment>
				<params>
					<param name="anObject" comment="The object to compare this {@code String} against" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="contentEquals" returncomment="{@code true} if this {@code String} represents the same
          sequence of characters as the specified {@code StringBuffer},
          {@code false} otherwise" fulltype="boolean" type="boolean">
				<comment>
					<description>Compares this string to the specified {@code StringBuffer}.  The result
 is {@code true} if and only if this {@code String} represents the same
 sequence of characters as the specified {@code StringBuffer}.</description>
					<attribute name="@param">
						<description>sb
         The {@code StringBuffer} to compare this {@code String} against</description>
					</attribute>
					<attribute name="@return">
						<description>{@code true} if this {@code String} represents the same
          sequence of characters as the specified {@code StringBuffer},
          {@code false} otherwise</description>
					</attribute>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
				<params>
					<param name="sb" comment="The {@code StringBuffer} to compare this {@code String} against" fulltype="java.lang.StringBuffer" type="StringBuffer" />
				</params>
			</method>
			<method visibility="public" name="contentEquals" returncomment="{@code true} if this {@code String} represents the same
          sequence of char values as the specified sequence, {@code
          false} otherwise" fulltype="boolean" type="boolean">
				<comment>
					<description>Compares this string to the specified {@code CharSequence}.  The result
 is {@code true} if and only if this {@code String} represents the same
 sequence of char values as the specified sequence.</description>
					<attribute name="@param">
						<description>cs
         The sequence to compare this {@code String} against</description>
					</attribute>
					<attribute name="@return">
						<description>{@code true} if this {@code String} represents the same
          sequence of char values as the specified sequence, {@code
          false} otherwise</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="cs" comment="The sequence to compare this {@code String} against" fulltype="java.lang.CharSequence" type="CharSequence" />
				</params>
			</method>
			<method visibility="public" name="equalsIgnoreCase" returncomment="{@code true} if the argument is not {@code null} and it
          represents an equivalent {@code String} ignoring case; {@code
          false} otherwise" fulltype="boolean" type="boolean">
				<comment>
					<description>Compares this {@code String} to another {@code String}, ignoring case
 considerations.  Two strings are considered equal ignoring case if they
 are of the same length and corresponding characters in the two strings
 are equal ignoring case.

 &lt;p&gt; Two characters {@code c1} and {@code c2} are considered the same
 ignoring case if at least one of the following is true:
 &lt;ul&gt;
   &lt;li&gt; The two characters are the same (as compared by the
        {@code ==} operator)
   &lt;li&gt; Applying the method {@link
        java.lang.Character#toUpperCase(char)} to each character
        produces the same result
   &lt;li&gt; Applying the method {@link
        java.lang.Character#toLowerCase(char)} to each character
        produces the same result
 &lt;/ul&gt;</description>
					<attribute name="@param">
						<description>anotherString
         The {@code String} to compare this {@code String} against</description>
					</attribute>
					<attribute name="@return">
						<description>{@code true} if the argument is not {@code null} and it
          represents an equivalent {@code String} ignoring case; {@code
          false} otherwise</description>
					</attribute>
					<attribute name="@see">
						<description>#equals(Object)</description>
					</attribute>
				</comment>
				<params>
					<param name="anotherString" comment="The {@code String} to compare this {@code String} against" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="compareTo" returncomment="the value &lt;code&gt;0&lt;/code&gt; if the argument string is equal to
          this string; a value less than &lt;code&gt;0&lt;/code&gt; if this string
          is lexicographically less than the string argument; and a
          value greater than &lt;code&gt;0&lt;/code&gt; if this string is
          lexicographically greater than the string argument." fulltype="int" type="int">
				<comment>
					<description>Compares two strings lexicographically.
 The comparison is based on the Unicode value of each character in
 the strings. The character sequence represented by this
 &lt;code&gt;String&lt;/code&gt; object is compared lexicographically to the
 character sequence represented by the argument string. The result is
 a negative integer if this &lt;code&gt;String&lt;/code&gt; object
 lexicographically precedes the argument string. The result is a
 positive integer if this &lt;code&gt;String&lt;/code&gt; object lexicographically
 follows the argument string. The result is zero if the strings
 are equal; &lt;code&gt;compareTo&lt;/code&gt; returns &lt;code&gt;0&lt;/code&gt; exactly when
 the {@link #equals(Object)} method would return &lt;code&gt;true&lt;/code&gt;.
 &lt;p&gt;
 This is the definition of lexicographic ordering. If two strings are
 different, then either they have different characters at some index
 that is a valid index for both strings, or their lengths are different,
 or both. If they have different characters at one or more index
 positions, let &lt;i&gt;k&lt;/i&gt; be the smallest such index; then the string
 whose character at position &lt;i&gt;k&lt;/i&gt; has the smaller value, as
 determined by using the &amp;lt; operator, lexicographically precedes the
 other string. In this case, &lt;code&gt;compareTo&lt;/code&gt; returns the
 difference of the two character values at position &lt;code&gt;k&lt;/code&gt; in
 the two string -- that is, the value:
 &lt;blockquote&gt;&lt;pre&gt;
 this.charAt(k)-anotherString.charAt(k)
 &lt;/pre&gt;&lt;/blockquote&gt;
 If there is no index position at which they differ, then the shorter
 string lexicographically precedes the longer string. In this case,
 &lt;code&gt;compareTo&lt;/code&gt; returns the difference of the lengths of the
 strings -- that is, the value:
 &lt;blockquote&gt;&lt;pre&gt;
 this.length()-anotherString.length()
 &lt;/pre&gt;&lt;/blockquote&gt;</description>
					<attribute name="@param">
						<description>anotherString   the &lt;code&gt;String&lt;/code&gt; to be compared.</description>
					</attribute>
					<attribute name="@return">
						<description>the value &lt;code&gt;0&lt;/code&gt; if the argument string is equal to
          this string; a value less than &lt;code&gt;0&lt;/code&gt; if this string
          is lexicographically less than the string argument; and a
          value greater than &lt;code&gt;0&lt;/code&gt; if this string is
          lexicographically greater than the string argument.</description>
					</attribute>
				</comment>
				<params>
					<param name="anotherString" comment="the &lt;code&gt;String&lt;/code&gt; to be compared." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="compareToIgnoreCase" returncomment="a negative integer, zero, or a positive integer as the
          specified String is greater than, equal to, or less
          than this String, ignoring case considerations." fulltype="int" type="int">
				<comment>
					<description>Compares two strings lexicographically, ignoring case
 differences. This method returns an integer whose sign is that of
 calling &lt;code&gt;compareTo&lt;/code&gt; with normalized versions of the strings
 where case differences have been eliminated by calling
 &lt;code&gt;Character.toLowerCase(Character.toUpperCase(character))&lt;/code&gt; on
 each character.
 &lt;p&gt;
 Note that this method does &lt;em&gt;not&lt;/em&gt; take locale into account,
 and will result in an unsatisfactory ordering for certain locales.
 The java.text package provides &lt;em&gt;collators&lt;/em&gt; to allow
 locale-sensitive ordering.</description>
					<attribute name="@param">
						<description>str   the &lt;code&gt;String&lt;/code&gt; to be compared.</description>
					</attribute>
					<attribute name="@return">
						<description>a negative integer, zero, or a positive integer as the
          specified String is greater than, equal to, or less
          than this String, ignoring case considerations.</description>
					</attribute>
					<attribute name="@see">
						<description>java.text.Collator#compare(String, String)</description>
					</attribute>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
				<params>
					<param name="str" comment="the &lt;code&gt;String&lt;/code&gt; to be compared." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="regionMatches" returncomment="&lt;code&gt;true&lt;/code&gt; if the specified subregion of this string
          exactly matches the specified subregion of the string argument;
          &lt;code&gt;false&lt;/code&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Tests if two string regions are equal.
 &lt;p&gt;
 A substring of this &lt;tt&gt;String&lt;/tt&gt; object is compared to a substring
 of the argument other. The result is true if these substrings
 represent identical character sequences. The substring of this
 &lt;tt&gt;String&lt;/tt&gt; object to be compared begins at index &lt;tt&gt;toffset&lt;/tt&gt;
 and has length &lt;tt&gt;len&lt;/tt&gt;. The substring of other to be compared
 begins at index &lt;tt&gt;ooffset&lt;/tt&gt; and has length &lt;tt&gt;len&lt;/tt&gt;. The
 result is &lt;tt&gt;false&lt;/tt&gt; if and only if at least one of the following
 is true:
 &lt;ul&gt;&lt;li&gt;&lt;tt&gt;toffset&lt;/tt&gt; is negative.
 &lt;li&gt;&lt;tt&gt;ooffset&lt;/tt&gt; is negative.
 &lt;li&gt;&lt;tt&gt;toffset+len&lt;/tt&gt; is greater than the length of this
 &lt;tt&gt;String&lt;/tt&gt; object.
 &lt;li&gt;&lt;tt&gt;ooffset+len&lt;/tt&gt; is greater than the length of the other
 argument.
 &lt;li&gt;There is some nonnegative integer &lt;i&gt;k&lt;/i&gt; less than &lt;tt&gt;len&lt;/tt&gt;
 such that:
 &lt;tt&gt;this.charAt(toffset+&lt;i&gt;k&lt;/i&gt;)&amp;nbsp;!=&amp;nbsp;other.charAt(ooffset+&lt;i&gt;k&lt;/i&gt;)&lt;/tt&gt;
 &lt;/ul&gt;</description>
					<attribute name="@param">
						<description>toffset   the starting offset of the subregion in this string.</description>
					</attribute>
					<attribute name="@param">
						<description>other     the string argument.</description>
					</attribute>
					<attribute name="@param">
						<description>ooffset   the starting offset of the subregion in the string
                    argument.</description>
					</attribute>
					<attribute name="@param">
						<description>len       the number of characters to compare.</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if the specified subregion of this string
          exactly matches the specified subregion of the string argument;
          &lt;code&gt;false&lt;/code&gt; otherwise.</description>
					</attribute>
				</comment>
				<params>
					<param name="toffset" comment="the starting offset of the subregion in this string." fulltype="int" type="int" />
					<param name="other" comment="the string argument." fulltype="java.lang.String" type="String" />
					<param name="ooffset" comment="the starting offset of the subregion in the string
                    argument." fulltype="int" type="int" />
					<param name="len" comment="the number of characters to compare." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="regionMatches" returncomment="&lt;code&gt;true&lt;/code&gt; if the specified subregion of this string
          matches the specified subregion of the string argument;
          &lt;code&gt;false&lt;/code&gt; otherwise. Whether the matching is exact
          or case insensitive depends on the &lt;code&gt;ignoreCase&lt;/code&gt;
          argument." fulltype="boolean" type="boolean">
				<comment>
					<description>Tests if two string regions are equal.
 &lt;p&gt;
 A substring of this &lt;tt&gt;String&lt;/tt&gt; object is compared to a substring
 of the argument &lt;tt&gt;other&lt;/tt&gt;. The result is &lt;tt&gt;true&lt;/tt&gt; if these
 substrings represent character sequences that are the same, ignoring
 case if and only if &lt;tt&gt;ignoreCase&lt;/tt&gt; is true. The substring of
 this &lt;tt&gt;String&lt;/tt&gt; object to be compared begins at index
 &lt;tt&gt;toffset&lt;/tt&gt; and has length &lt;tt&gt;len&lt;/tt&gt;. The substring of
 &lt;tt&gt;other&lt;/tt&gt; to be compared begins at index &lt;tt&gt;ooffset&lt;/tt&gt; and
 has length &lt;tt&gt;len&lt;/tt&gt;. The result is &lt;tt&gt;false&lt;/tt&gt; if and only if
 at least one of the following is true:
 &lt;ul&gt;&lt;li&gt;&lt;tt&gt;toffset&lt;/tt&gt; is negative.
 &lt;li&gt;&lt;tt&gt;ooffset&lt;/tt&gt; is negative.
 &lt;li&gt;&lt;tt&gt;toffset+len&lt;/tt&gt; is greater than the length of this
 &lt;tt&gt;String&lt;/tt&gt; object.
 &lt;li&gt;&lt;tt&gt;ooffset+len&lt;/tt&gt; is greater than the length of the other
 argument.
 &lt;li&gt;&lt;tt&gt;ignoreCase&lt;/tt&gt; is &lt;tt&gt;false&lt;/tt&gt; and there is some nonnegative
 integer &lt;i&gt;k&lt;/i&gt; less than &lt;tt&gt;len&lt;/tt&gt; such that:
 &lt;blockquote&gt;&lt;pre&gt;
 this.charAt(toffset+k) != other.charAt(ooffset+k)
 &lt;/pre&gt;&lt;/blockquote&gt;
 &lt;li&gt;&lt;tt&gt;ignoreCase&lt;/tt&gt; is &lt;tt&gt;true&lt;/tt&gt; and there is some nonnegative
 integer &lt;i&gt;k&lt;/i&gt; less than &lt;tt&gt;len&lt;/tt&gt; such that:
 &lt;blockquote&gt;&lt;pre&gt;
 Character.toLowerCase(this.charAt(toffset+k)) !=
               Character.toLowerCase(other.charAt(ooffset+k))
 &lt;/pre&gt;&lt;/blockquote&gt;
 and:
 &lt;blockquote&gt;&lt;pre&gt;
 Character.toUpperCase(this.charAt(toffset+k)) !=
         Character.toUpperCase(other.charAt(ooffset+k))
 &lt;/pre&gt;&lt;/blockquote&gt;
 &lt;/ul&gt;</description>
					<attribute name="@param">
						<description>ignoreCase   if &lt;code&gt;true&lt;/code&gt;, ignore case when comparing
                       characters.</description>
					</attribute>
					<attribute name="@param">
						<description>toffset      the starting offset of the subregion in this
                       string.</description>
					</attribute>
					<attribute name="@param">
						<description>other        the string argument.</description>
					</attribute>
					<attribute name="@param">
						<description>ooffset      the starting offset of the subregion in the string
                       argument.</description>
					</attribute>
					<attribute name="@param">
						<description>len          the number of characters to compare.</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if the specified subregion of this string
          matches the specified subregion of the string argument;
          &lt;code&gt;false&lt;/code&gt; otherwise. Whether the matching is exact
          or case insensitive depends on the &lt;code&gt;ignoreCase&lt;/code&gt;
          argument.</description>
					</attribute>
				</comment>
				<params>
					<param name="ignoreCase" comment="if &lt;code&gt;true&lt;/code&gt;, ignore case when comparing
                       characters." fulltype="boolean" type="boolean" />
					<param name="toffset" comment="the starting offset of the subregion in this
                       string." fulltype="int" type="int" />
					<param name="other" comment="the string argument." fulltype="java.lang.String" type="String" />
					<param name="ooffset" comment="the starting offset of the subregion in the string
                       argument." fulltype="int" type="int" />
					<param name="len" comment="the number of characters to compare." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="startsWith" returncomment="&lt;code&gt;true&lt;/code&gt; if the character sequence represented by the
          argument is a prefix of the substring of this object starting
          at index &lt;code&gt;toffset&lt;/code&gt;; &lt;code&gt;false&lt;/code&gt; otherwise.
          The result is &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;toffset&lt;/code&gt; is
          negative or greater than the length of this
          &lt;code&gt;String&lt;/code&gt; object; otherwise the result is the same
          as the result of the expression
          &lt;pre&gt;
          this.substring(toffset).startsWith(prefix)
          &lt;/pre&gt;" fulltype="boolean" type="boolean">
				<comment>
					<description>Tests if the substring of this string beginning at the
 specified index starts with the specified prefix.</description>
					<attribute name="@param">
						<description>prefix    the prefix.</description>
					</attribute>
					<attribute name="@param">
						<description>toffset   where to begin looking in this string.</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if the character sequence represented by the
          argument is a prefix of the substring of this object starting
          at index &lt;code&gt;toffset&lt;/code&gt;; &lt;code&gt;false&lt;/code&gt; otherwise.
          The result is &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;toffset&lt;/code&gt; is
          negative or greater than the length of this
          &lt;code&gt;String&lt;/code&gt; object; otherwise the result is the same
          as the result of the expression
          &lt;pre&gt;
          this.substring(toffset).startsWith(prefix)
          &lt;/pre&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="prefix" comment="the prefix." fulltype="java.lang.String" type="String" />
					<param name="toffset" comment="where to begin looking in this string." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="startsWith" returncomment="&lt;code&gt;true&lt;/code&gt; if the character sequence represented by the
          argument is a prefix of the character sequence represented by
          this string; &lt;code&gt;false&lt;/code&gt; otherwise.
          Note also that &lt;code&gt;true&lt;/code&gt; will be returned if the
          argument is an empty string or is equal to this
          &lt;code&gt;String&lt;/code&gt; object as determined by the
          {@link #equals(Object)} method." fulltype="boolean" type="boolean">
				<comment>
					<description>Tests if this string starts with the specified prefix.</description>
					<attribute name="@param">
						<description>prefix   the prefix.</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if the character sequence represented by the
          argument is a prefix of the character sequence represented by
          this string; &lt;code&gt;false&lt;/code&gt; otherwise.
          Note also that &lt;code&gt;true&lt;/code&gt; will be returned if the
          argument is an empty string or is equal to this
          &lt;code&gt;String&lt;/code&gt; object as determined by the
          {@link #equals(Object)} method.</description>
					</attribute>
					<attribute name="@since">
						<description>1. 0</description>
					</attribute>
				</comment>
				<params>
					<param name="prefix" comment="the prefix." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="endsWith" returncomment="&lt;code&gt;true&lt;/code&gt; if the character sequence represented by the
          argument is a suffix of the character sequence represented by
          this object; &lt;code&gt;false&lt;/code&gt; otherwise. Note that the
          result will be &lt;code&gt;true&lt;/code&gt; if the argument is the
          empty string or is equal to this &lt;code&gt;String&lt;/code&gt; object
          as determined by the {@link #equals(Object)} method." fulltype="boolean" type="boolean">
				<comment>
					<description>Tests if this string ends with the specified suffix.</description>
					<attribute name="@param">
						<description>suffix   the suffix.</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if the character sequence represented by the
          argument is a suffix of the character sequence represented by
          this object; &lt;code&gt;false&lt;/code&gt; otherwise. Note that the
          result will be &lt;code&gt;true&lt;/code&gt; if the argument is the
          empty string or is equal to this &lt;code&gt;String&lt;/code&gt; object
          as determined by the {@link #equals(Object)} method.</description>
					</attribute>
				</comment>
				<params>
					<param name="suffix" comment="the suffix." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="hashCode" returncomment="a hash code value for this object." fulltype="int" type="int">
				<comment>
					<description>Returns a hash code for this string. The hash code for a
 &lt;code&gt;String&lt;/code&gt; object is computed as
 &lt;blockquote&gt;&lt;pre&gt;
 s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]
 &lt;/pre&gt;&lt;/blockquote&gt;
 using &lt;code&gt;int&lt;/code&gt; arithmetic, where &lt;code&gt;s[i]&lt;/code&gt; is the
 &lt;i&gt;i&lt;/i&gt;th character of the string, &lt;code&gt;n&lt;/code&gt; is the length of
 the string, and &lt;code&gt;^&lt;/code&gt; indicates exponentiation.
 (The hash value of the empty string is zero.)</description>
					<attribute name="@return">
						<description>a hash code value for this object.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="indexOf" returncomment="the index of the first occurrence of the character in the
          character sequence represented by this object, or
          &lt;code&gt;-1&lt;/code&gt; if the character does not occur." fulltype="int" type="int">
				<comment>
					<description>Returns the index within this string of the first occurrence of
 the specified character. If a character with value
 &lt;code&gt;ch&lt;/code&gt; occurs in the character sequence represented by
 this &lt;code&gt;String&lt;/code&gt; object, then the index (in Unicode
 code units) of the first such occurrence is returned. For
 values of &lt;code&gt;ch&lt;/code&gt; in the range from 0 to 0xFFFF
 (inclusive), this is the smallest value &lt;i&gt;k&lt;/i&gt; such that:
 &lt;blockquote&gt;&lt;pre&gt;
 this.charAt(&lt;i&gt;k&lt;/i&gt;) == ch
 &lt;/pre&gt;&lt;/blockquote&gt;
 is true. For other values of &lt;code&gt;ch&lt;/code&gt;, it is the
 smallest value &lt;i&gt;k&lt;/i&gt; such that:
 &lt;blockquote&gt;&lt;pre&gt;
 this.codePointAt(&lt;i&gt;k&lt;/i&gt;) == ch
 &lt;/pre&gt;&lt;/blockquote&gt;
 is true. In either case, if no such character occurs in this
 string, then &lt;code&gt;-1&lt;/code&gt; is returned.</description>
					<attribute name="@param">
						<description>ch   a character (Unicode code point).</description>
					</attribute>
					<attribute name="@return">
						<description>the index of the first occurrence of the character in the
          character sequence represented by this object, or
          &lt;code&gt;-1&lt;/code&gt; if the character does not occur.</description>
					</attribute>
				</comment>
				<params>
					<param name="ch" comment="a character (Unicode code point)." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="indexOf" returncomment="the index of the first occurrence of the character in the
          character sequence represented by this object that is greater
          than or equal to &lt;code&gt;fromIndex&lt;/code&gt;, or &lt;code&gt;-1&lt;/code&gt;
          if the character does not occur." fulltype="int" type="int">
				<comment>
					<description>Returns the index within this string of the first occurrence of the
 specified character, starting the search at the specified index.
 &lt;p&gt;
 If a character with value &lt;code&gt;ch&lt;/code&gt; occurs in the
 character sequence represented by this &lt;code&gt;String&lt;/code&gt;
 object at an index no smaller than &lt;code&gt;fromIndex&lt;/code&gt;, then
 the index of the first such occurrence is returned. For values
 of &lt;code&gt;ch&lt;/code&gt; in the range from 0 to 0xFFFF (inclusive),
 this is the smallest value &lt;i&gt;k&lt;/i&gt; such that:
 &lt;blockquote&gt;&lt;pre&gt;
 (this.charAt(&lt;i&gt;k&lt;/i&gt;) == ch) &amp;&amp; (&lt;i&gt;k&lt;/i&gt; &amp;gt;= fromIndex)
 &lt;/pre&gt;&lt;/blockquote&gt;
 is true. For other values of &lt;code&gt;ch&lt;/code&gt;, it is the
 smallest value &lt;i&gt;k&lt;/i&gt; such that:
 &lt;blockquote&gt;&lt;pre&gt;
 (this.codePointAt(&lt;i&gt;k&lt;/i&gt;) == ch) &amp;&amp; (&lt;i&gt;k&lt;/i&gt; &amp;gt;= fromIndex)
 &lt;/pre&gt;&lt;/blockquote&gt;
 is true. In either case, if no such character occurs in this
 string at or after position &lt;code&gt;fromIndex&lt;/code&gt;, then
 &lt;code&gt;-1&lt;/code&gt; is returned.

 &lt;p&gt;
 There is no restriction on the value of &lt;code&gt;fromIndex&lt;/code&gt;. If it
 is negative, it has the same effect as if it were zero: this entire
 string may be searched. If it is greater than the length of this
 string, it has the same effect as if it were equal to the length of
 this string: &lt;code&gt;-1&lt;/code&gt; is returned.

 &lt;p&gt;All indices are specified in &lt;code&gt;char&lt;/code&gt; values
 (Unicode code units).</description>
					<attribute name="@param">
						<description>ch          a character (Unicode code point).</description>
					</attribute>
					<attribute name="@param">
						<description>fromIndex   the index to start the search from.</description>
					</attribute>
					<attribute name="@return">
						<description>the index of the first occurrence of the character in the
          character sequence represented by this object that is greater
          than or equal to &lt;code&gt;fromIndex&lt;/code&gt;, or &lt;code&gt;-1&lt;/code&gt;
          if the character does not occur.</description>
					</attribute>
				</comment>
				<params>
					<param name="ch" comment="a character (Unicode code point)." fulltype="int" type="int" />
					<param name="fromIndex" comment="the index to start the search from." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="lastIndexOf" returncomment="the index of the last occurrence of the character in the
          character sequence represented by this object, or
          &lt;code&gt;-1&lt;/code&gt; if the character does not occur." fulltype="int" type="int">
				<comment>
					<description>Returns the index within this string of the last occurrence of
 the specified character. For values of &lt;code&gt;ch&lt;/code&gt; in the
 range from 0 to 0xFFFF (inclusive), the index (in Unicode code
 units) returned is the largest value &lt;i&gt;k&lt;/i&gt; such that:
 &lt;blockquote&gt;&lt;pre&gt;
 this.charAt(&lt;i&gt;k&lt;/i&gt;) == ch
 &lt;/pre&gt;&lt;/blockquote&gt;
 is true. For other values of &lt;code&gt;ch&lt;/code&gt;, it is the
 largest value &lt;i&gt;k&lt;/i&gt; such that:
 &lt;blockquote&gt;&lt;pre&gt;
 this.codePointAt(&lt;i&gt;k&lt;/i&gt;) == ch
 &lt;/pre&gt;&lt;/blockquote&gt;
 is true.  In either case, if no such character occurs in this
 string, then &lt;code&gt;-1&lt;/code&gt; is returned.  The
 &lt;code&gt;String&lt;/code&gt; is searched backwards starting at the last
 character.</description>
					<attribute name="@param">
						<description>ch   a character (Unicode code point).</description>
					</attribute>
					<attribute name="@return">
						<description>the index of the last occurrence of the character in the
          character sequence represented by this object, or
          &lt;code&gt;-1&lt;/code&gt; if the character does not occur.</description>
					</attribute>
				</comment>
				<params>
					<param name="ch" comment="a character (Unicode code point)." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="lastIndexOf" returncomment="the index of the last occurrence of the character in the
          character sequence represented by this object that is less
          than or equal to &lt;code&gt;fromIndex&lt;/code&gt;, or &lt;code&gt;-1&lt;/code&gt;
          if the character does not occur before that point." fulltype="int" type="int">
				<comment>
					<description>Returns the index within this string of the last occurrence of
 the specified character, searching backward starting at the
 specified index. For values of &lt;code&gt;ch&lt;/code&gt; in the range
 from 0 to 0xFFFF (inclusive), the index returned is the largest
 value &lt;i&gt;k&lt;/i&gt; such that:
 &lt;blockquote&gt;&lt;pre&gt;
 (this.charAt(&lt;i&gt;k&lt;/i&gt;) == ch) &amp;&amp; (&lt;i&gt;k&lt;/i&gt; &amp;lt;= fromIndex)
 &lt;/pre&gt;&lt;/blockquote&gt;
 is true. For other values of &lt;code&gt;ch&lt;/code&gt;, it is the
 largest value &lt;i&gt;k&lt;/i&gt; such that:
 &lt;blockquote&gt;&lt;pre&gt;
 (this.codePointAt(&lt;i&gt;k&lt;/i&gt;) == ch) &amp;&amp; (&lt;i&gt;k&lt;/i&gt; &amp;lt;= fromIndex)
 &lt;/pre&gt;&lt;/blockquote&gt;
 is true. In either case, if no such character occurs in this
 string at or before position &lt;code&gt;fromIndex&lt;/code&gt;, then
 &lt;code&gt;-1&lt;/code&gt; is returned.

 &lt;p&gt;All indices are specified in &lt;code&gt;char&lt;/code&gt; values
 (Unicode code units).</description>
					<attribute name="@param">
						<description>ch          a character (Unicode code point).</description>
					</attribute>
					<attribute name="@param">
						<description>fromIndex   the index to start the search from. There is no
          restriction on the value of &lt;code&gt;fromIndex&lt;/code&gt;. If it is
          greater than or equal to the length of this string, it has
          the same effect as if it were equal to one less than the
          length of this string: this entire string may be searched.
          If it is negative, it has the same effect as if it were -1:
          -1 is returned.</description>
					</attribute>
					<attribute name="@return">
						<description>the index of the last occurrence of the character in the
          character sequence represented by this object that is less
          than or equal to &lt;code&gt;fromIndex&lt;/code&gt;, or &lt;code&gt;-1&lt;/code&gt;
          if the character does not occur before that point.</description>
					</attribute>
				</comment>
				<params>
					<param name="ch" comment="a character (Unicode code point)." fulltype="int" type="int" />
					<param name="fromIndex" comment="the index to start the search from. There is no
          restriction on the value of &lt;code&gt;fromIndex&lt;/code&gt;. If it is
          greater than or equal to the length of this string, it has
          the same effect as if it were equal to one less than the
          length of this string: this entire string may be searched.
          If it is negative, it has the same effect as if it were -1:
          -1 is returned." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="indexOf" returncomment="if the string argument occurs as a substring within this
          object, then the index of the first character of the first
          such substring is returned; if it does not occur as a
          substring, &lt;code&gt;-1&lt;/code&gt; is returned." fulltype="int" type="int">
				<comment>
					<description>Returns the index within this string of the first occurrence of the
 specified substring. The integer returned is the smallest value
 &lt;i&gt;k&lt;/i&gt; such that:
 &lt;blockquote&gt;&lt;pre&gt;
 this.startsWith(str, &lt;i&gt;k&lt;/i&gt;)
 &lt;/pre&gt;&lt;/blockquote&gt;
 is &lt;code&gt;true&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>str   any string.</description>
					</attribute>
					<attribute name="@return">
						<description>if the string argument occurs as a substring within this
          object, then the index of the first character of the first
          such substring is returned; if it does not occur as a
          substring, &lt;code&gt;-1&lt;/code&gt; is returned.</description>
					</attribute>
				</comment>
				<params>
					<param name="str" comment="any string." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="indexOf" returncomment="the index within this string of the first occurrence of the
          specified substring, starting at the specified index." fulltype="int" type="int">
				<comment>
					<description>Returns the index within this string of the first occurrence of the
 specified substring, starting at the specified index.  The integer
 returned is the smallest value &lt;tt&gt;k&lt;/tt&gt; for which:
 &lt;blockquote&gt;&lt;pre&gt;
     k &amp;gt;= Math.min(fromIndex, this.length()) &amp;&amp; this.startsWith(str, k)
 &lt;/pre&gt;&lt;/blockquote&gt;
 If no such value of &lt;i&gt;k&lt;/i&gt; exists, then -1 is returned.</description>
					<attribute name="@param">
						<description>str         the substring for which to search.</description>
					</attribute>
					<attribute name="@param">
						<description>fromIndex   the index from which to start the search.</description>
					</attribute>
					<attribute name="@return">
						<description>the index within this string of the first occurrence of the
          specified substring, starting at the specified index.</description>
					</attribute>
				</comment>
				<params>
					<param name="str" comment="the substring for which to search." fulltype="java.lang.String" type="String" />
					<param name="fromIndex" comment="the index from which to start the search." fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="package-private" name="indexOf" fulltype="int" type="int">
				<comment>
					<description>Code shared by String and StringBuffer to do searches. The
 source is the character array being searched, and the target
 is the string being searched for.</description>
					<attribute name="@param">
						<description>source       the characters being searched.</description>
					</attribute>
					<attribute name="@param">
						<description>sourceOffset offset of the source string.</description>
					</attribute>
					<attribute name="@param">
						<description>sourceCount  count of the source string.</description>
					</attribute>
					<attribute name="@param">
						<description>target       the characters being searched for.</description>
					</attribute>
					<attribute name="@param">
						<description>targetOffset offset of the target string.</description>
					</attribute>
					<attribute name="@param">
						<description>targetCount  count of the target string.</description>
					</attribute>
					<attribute name="@param">
						<description>fromIndex    the index to begin searching from.</description>
					</attribute>
				</comment>
				<params>
					<param name="source" comment="the characters being searched." fulltype="char[]" type="char" />
					<param name="sourceOffset" comment="offset of the source string." fulltype="int" type="int" />
					<param name="sourceCount" comment="count of the source string." fulltype="int" type="int" />
					<param name="target" comment="the characters being searched for." fulltype="char[]" type="char" />
					<param name="targetOffset" comment="offset of the target string." fulltype="int" type="int" />
					<param name="targetCount" comment="count of the target string." fulltype="int" type="int" />
					<param name="fromIndex" comment="the index to begin searching from." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="lastIndexOf" returncomment="if the string argument occurs one or more times as a substring
          within this object, then the index of the first character of
          the last such substring is returned. If it does not occur as
          a substring, &lt;code&gt;-1&lt;/code&gt; is returned." fulltype="int" type="int">
				<comment>
					<description>Returns the index within this string of the rightmost occurrence
 of the specified substring.  The rightmost empty string &quot;&quot; is
 considered to occur at the index value &lt;code&gt;this.length()&lt;/code&gt;.
 The returned index is the largest value &lt;i&gt;k&lt;/i&gt; such that
 &lt;blockquote&gt;&lt;pre&gt;
 this.startsWith(str, k)
 &lt;/pre&gt;&lt;/blockquote&gt;
 is true.</description>
					<attribute name="@param">
						<description>str   the substring to search for.</description>
					</attribute>
					<attribute name="@return">
						<description>if the string argument occurs one or more times as a substring
          within this object, then the index of the first character of
          the last such substring is returned. If it does not occur as
          a substring, &lt;code&gt;-1&lt;/code&gt; is returned.</description>
					</attribute>
				</comment>
				<params>
					<param name="str" comment="the substring to search for." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="lastIndexOf" returncomment="the index within this string of the last occurrence of the
          specified substring." fulltype="int" type="int">
				<comment>
					<description>Returns the index within this string of the last occurrence of the
 specified substring, searching backward starting at the specified index.
 The integer returned is the largest value &lt;i&gt;k&lt;/i&gt; such that:
 &lt;blockquote&gt;&lt;pre&gt;
     k &amp;lt;= Math.min(fromIndex, this.length()) &amp;&amp; this.startsWith(str, k)
 &lt;/pre&gt;&lt;/blockquote&gt;
 If no such value of &lt;i&gt;k&lt;/i&gt; exists, then -1 is returned.</description>
					<attribute name="@param">
						<description>str         the substring to search for.</description>
					</attribute>
					<attribute name="@param">
						<description>fromIndex   the index to start the search from.</description>
					</attribute>
					<attribute name="@return">
						<description>the index within this string of the last occurrence of the
          specified substring.</description>
					</attribute>
				</comment>
				<params>
					<param name="str" comment="the substring to search for." fulltype="java.lang.String" type="String" />
					<param name="fromIndex" comment="the index to start the search from." fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="package-private" name="lastIndexOf" fulltype="int" type="int">
				<comment>
					<description>Code shared by String and StringBuffer to do searches. The
 source is the character array being searched, and the target
 is the string being searched for.</description>
					<attribute name="@param">
						<description>source       the characters being searched.</description>
					</attribute>
					<attribute name="@param">
						<description>sourceOffset offset of the source string.</description>
					</attribute>
					<attribute name="@param">
						<description>sourceCount  count of the source string.</description>
					</attribute>
					<attribute name="@param">
						<description>target       the characters being searched for.</description>
					</attribute>
					<attribute name="@param">
						<description>targetOffset offset of the target string.</description>
					</attribute>
					<attribute name="@param">
						<description>targetCount  count of the target string.</description>
					</attribute>
					<attribute name="@param">
						<description>fromIndex    the index to begin searching from.</description>
					</attribute>
				</comment>
				<params>
					<param name="source" comment="the characters being searched." fulltype="char[]" type="char" />
					<param name="sourceOffset" comment="offset of the source string." fulltype="int" type="int" />
					<param name="sourceCount" comment="count of the source string." fulltype="int" type="int" />
					<param name="target" comment="the characters being searched for." fulltype="char[]" type="char" />
					<param name="targetOffset" comment="offset of the target string." fulltype="int" type="int" />
					<param name="targetCount" comment="count of the target string." fulltype="int" type="int" />
					<param name="fromIndex" comment="the index to begin searching from." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="substring" returncomment="the specified substring." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a new string that is a substring of this string. The
 substring begins with the character at the specified index and
 extends to the end of this string. &lt;p&gt;
 Examples:
 &lt;blockquote&gt;&lt;pre&gt;
 &quot;unhappy&quot;.substring(2) returns &quot;happy&quot;
 &quot;Harbison&quot;.substring(3) returns &quot;bison&quot;
 &quot;emptiness&quot;.substring(9) returns &quot;&quot; (an empty string)
 &lt;/pre&gt;&lt;/blockquote&gt;</description>
					<attribute name="@param">
						<description>beginIndex   the beginning index, inclusive.</description>
					</attribute>
					<attribute name="@return">
						<description>the specified substring.</description>
					</attribute>
					<attribute name="@exception">
						<description>IndexOutOfBoundsException  if
             &lt;code&gt;beginIndex&lt;/code&gt; is negative or larger than the
             length of this &lt;code&gt;String&lt;/code&gt; object.</description>
					</attribute>
				</comment>
				<params>
					<param name="beginIndex" comment="the beginning index, inclusive." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="substring" returncomment="the specified substring." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a new string that is a substring of this string. The
 substring begins at the specified &lt;code&gt;beginIndex&lt;/code&gt; and
 extends to the character at index &lt;code&gt;endIndex - 1&lt;/code&gt;.
 Thus the length of the substring is &lt;code&gt;endIndex-beginIndex&lt;/code&gt;.
 &lt;p&gt;
 Examples:
 &lt;blockquote&gt;&lt;pre&gt;
 &quot;hamburger&quot;.substring(4, 8) returns &quot;urge&quot;
 &quot;smiles&quot;.substring(1, 5) returns &quot;mile&quot;
 &lt;/pre&gt;&lt;/blockquote&gt;</description>
					<attribute name="@param">
						<description>beginIndex   the beginning index, inclusive.</description>
					</attribute>
					<attribute name="@param">
						<description>endIndex     the ending index, exclusive.</description>
					</attribute>
					<attribute name="@return">
						<description>the specified substring.</description>
					</attribute>
					<attribute name="@exception">
						<description>IndexOutOfBoundsException  if the
             &lt;code&gt;beginIndex&lt;/code&gt; is negative, or
             &lt;code&gt;endIndex&lt;/code&gt; is larger than the length of
             this &lt;code&gt;String&lt;/code&gt; object, or
             &lt;code&gt;beginIndex&lt;/code&gt; is larger than
             &lt;code&gt;endIndex&lt;/code&gt;.</description>
					</attribute>
				</comment>
				<params>
					<param name="beginIndex" comment="the beginning index, inclusive." fulltype="int" type="int" />
					<param name="endIndex" comment="the ending index, exclusive." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="subSequence" returncomment="the specified subsequence." fulltype="java.lang.CharSequence" type="CharSequence">
				<comment>
					<description>Returns a new character sequence that is a subsequence of this sequence.

 &lt;p&gt; An invocation of this method of the form

 &lt;blockquote&gt;&lt;pre&gt;
 str.subSequence(begin,&amp;nbsp;end)&lt;/pre&gt;&lt;/blockquote&gt;

 behaves in exactly the same way as the invocation

 &lt;blockquote&gt;&lt;pre&gt;
 str.substring(begin,&amp;nbsp;end)&lt;/pre&gt;&lt;/blockquote&gt;

 This method is defined so that the &lt;tt&gt;String&lt;/tt&gt; class can implement
 the {@link CharSequence} interface. &lt;/p&gt;</description>
					<attribute name="@param">
						<description>beginIndex   the begin index, inclusive.</description>
					</attribute>
					<attribute name="@param">
						<description>endIndex     the end index, exclusive.</description>
					</attribute>
					<attribute name="@return">
						<description>the specified subsequence.</description>
					</attribute>
					<attribute name="@throws">
						<description>IndexOutOfBoundsException
          if &lt;tt&gt;beginIndex&lt;/tt&gt; or &lt;tt&gt;endIndex&lt;/tt&gt; are negative,
          if &lt;tt&gt;endIndex&lt;/tt&gt; is greater than &lt;tt&gt;length()&lt;/tt&gt;,
          or if &lt;tt&gt;beginIndex&lt;/tt&gt; is greater than &lt;tt&gt;startIndex&lt;/tt&gt;</description>
					</attribute>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
					<attribute name="@spec">
						<description>JSR-51</description>
					</attribute>
				</comment>
				<params>
					<param name="beginIndex" comment="the begin index, inclusive." fulltype="int" type="int" />
					<param name="endIndex" comment="the end index, exclusive." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="concat" returncomment="a string that represents the concatenation of this object&apos;s
          characters followed by the string argument&apos;s characters." fulltype="java.lang.String" type="String">
				<comment>
					<description>Concatenates the specified string to the end of this string.
 &lt;p&gt;
 If the length of the argument string is &lt;code&gt;0&lt;/code&gt;, then this
 &lt;code&gt;String&lt;/code&gt; object is returned. Otherwise, a new
 &lt;code&gt;String&lt;/code&gt; object is created, representing a character
 sequence that is the concatenation of the character sequence
 represented by this &lt;code&gt;String&lt;/code&gt; object and the character
 sequence represented by the argument string.&lt;p&gt;
 Examples:
 &lt;blockquote&gt;&lt;pre&gt;
 &quot;cares&quot;.concat(&quot;s&quot;) returns &quot;caress&quot;
 &quot;to&quot;.concat(&quot;get&quot;).concat(&quot;her&quot;) returns &quot;together&quot;
 &lt;/pre&gt;&lt;/blockquote&gt;</description>
					<attribute name="@param">
						<description>str   the &lt;code&gt;String&lt;/code&gt; that is concatenated to the end
                of this &lt;code&gt;String&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@return">
						<description>a string that represents the concatenation of this object&apos;s
          characters followed by the string argument&apos;s characters.</description>
					</attribute>
				</comment>
				<params>
					<param name="str" comment="the &lt;code&gt;String&lt;/code&gt; that is concatenated to the end
                of this &lt;code&gt;String&lt;/code&gt;." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="replace" returncomment="a string derived from this string by replacing every
          occurrence of &lt;code&gt;oldChar&lt;/code&gt; with &lt;code&gt;newChar&lt;/code&gt;." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a new string resulting from replacing all occurrences of
 &lt;code&gt;oldChar&lt;/code&gt; in this string with &lt;code&gt;newChar&lt;/code&gt;.
 &lt;p&gt;
 If the character &lt;code&gt;oldChar&lt;/code&gt; does not occur in the
 character sequence represented by this &lt;code&gt;String&lt;/code&gt; object,
 then a reference to this &lt;code&gt;String&lt;/code&gt; object is returned.
 Otherwise, a new &lt;code&gt;String&lt;/code&gt; object is created that
 represents a character sequence identical to the character sequence
 represented by this &lt;code&gt;String&lt;/code&gt; object, except that every
 occurrence of &lt;code&gt;oldChar&lt;/code&gt; is replaced by an occurrence
 of &lt;code&gt;newChar&lt;/code&gt;.
 &lt;p&gt;
 Examples:
 &lt;blockquote&gt;&lt;pre&gt;
 &quot;mesquite in your cellar&quot;.replace(&apos;e&apos;, &apos;o&apos;)
         returns &quot;mosquito in your collar&quot;
 &quot;the war of baronets&quot;.replace(&apos;r&apos;, &apos;y&apos;)
         returns &quot;the way of bayonets&quot;
 &quot;sparring with a purple porpoise&quot;.replace(&apos;p&apos;, &apos;t&apos;)
         returns &quot;starring with a turtle tortoise&quot;
 &quot;JonL&quot;.replace(&apos;q&apos;, &apos;x&apos;) returns &quot;JonL&quot; (no change)
 &lt;/pre&gt;&lt;/blockquote&gt;</description>
					<attribute name="@param">
						<description>oldChar   the old character.</description>
					</attribute>
					<attribute name="@param">
						<description>newChar   the new character.</description>
					</attribute>
					<attribute name="@return">
						<description>a string derived from this string by replacing every
          occurrence of &lt;code&gt;oldChar&lt;/code&gt; with &lt;code&gt;newChar&lt;/code&gt;.</description>
					</attribute>
				</comment>
				<params>
					<param name="oldChar" comment="the old character." fulltype="char" type="char" />
					<param name="newChar" comment="the new character." fulltype="char" type="char" />
				</params>
			</method>
			<method visibility="public" name="matches" returncomment="&lt;tt&gt;true&lt;/tt&gt; if, and only if, this string matches the
          given regular expression" fulltype="boolean" type="boolean">
				<comment>
					<description>Tells whether or not this string matches the given &lt;a
 href=&quot;../util/regex/Pattern.html#sum&quot;&gt;regular expression&lt;/a&gt;.

 &lt;p&gt; An invocation of this method of the form
 &lt;i&gt;str&lt;/i&gt;&lt;tt&gt;.matches(&lt;/tt&gt;&lt;i&gt;regex&lt;/i&gt;&lt;tt&gt;)&lt;/tt&gt; yields exactly the
 same result as the expression

 &lt;blockquote&gt;&lt;tt&gt; {@link java.util.regex.Pattern}.{@link
 java.util.regex.Pattern#matches(String,CharSequence)
 matches}(&lt;/tt&gt;&lt;i&gt;regex&lt;/i&gt;&lt;tt&gt;,&lt;/tt&gt; &lt;i&gt;str&lt;/i&gt;&lt;tt&gt;)&lt;/tt&gt;&lt;/blockquote&gt;</description>
					<attribute name="@param">
						<description>regex
          the regular expression to which this string is to be matched</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;tt&gt;true&lt;/tt&gt; if, and only if, this string matches the
          given regular expression</description>
					</attribute>
					<attribute name="@throws">
						<description>PatternSyntaxException
          if the regular expression&apos;s syntax is invalid</description>
					</attribute>
					<attribute name="@see">
						<description>java.util.regex.Pattern</description>
					</attribute>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
					<attribute name="@spec">
						<description>JSR-51</description>
					</attribute>
				</comment>
				<params>
					<param name="regex" comment="the regular expression to which this string is to be matched" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="contains" returncomment="true if this string contains &lt;code&gt;s&lt;/code&gt;, false otherwise" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true if and only if this string contains the specified
 sequence of char values.</description>
					<attribute name="@param">
						<description>s the sequence to search for</description>
					</attribute>
					<attribute name="@return">
						<description>true if this string contains &lt;code&gt;s&lt;/code&gt;, false otherwise</description>
					</attribute>
					<attribute name="@throws">
						<description>NullPointerException if &lt;code&gt;s&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the sequence to search for" fulltype="java.lang.CharSequence" type="CharSequence" />
				</params>
			</method>
			<method visibility="public" name="replaceFirst" returncomment="The resulting &lt;tt&gt;String&lt;/tt&gt;" fulltype="java.lang.String" type="String">
				<comment>
					<description>Replaces the first substring of this string that matches the given &lt;a
 href=&quot;../util/regex/Pattern.html#sum&quot;&gt;regular expression&lt;/a&gt; with the
 given replacement.

 &lt;p&gt; An invocation of this method of the form
 &lt;i&gt;str&lt;/i&gt;&lt;tt&gt;.replaceFirst(&lt;/tt&gt;&lt;i&gt;regex&lt;/i&gt;&lt;tt&gt;,&lt;/tt&gt; &lt;i&gt;repl&lt;/i&gt;&lt;tt&gt;)&lt;/tt&gt;
 yields exactly the same result as the expression

 &lt;blockquote&gt;&lt;tt&gt;
 {@link java.util.regex.Pattern}.{@link java.util.regex.Pattern#compile
 compile}(&lt;/tt&gt;&lt;i&gt;regex&lt;/i&gt;&lt;tt&gt;).{@link
 java.util.regex.Pattern#matcher(java.lang.CharSequence)
 matcher}(&lt;/tt&gt;&lt;i&gt;str&lt;/i&gt;&lt;tt&gt;).{@link java.util.regex.Matcher#replaceFirst
 replaceFirst}(&lt;/tt&gt;&lt;i&gt;repl&lt;/i&gt;&lt;tt&gt;)&lt;/tt&gt;&lt;/blockquote&gt;

&lt;p&gt;
 Note that backslashes (&lt;tt&gt;\&lt;/tt&gt;) and dollar signs (&lt;tt&gt;$&lt;/tt&gt;) in the
 replacement string may cause the results to be different than if it were
 being treated as a literal replacement string; see
 {@link java.util.regex.Matcher#replaceFirst}.
 Use {@link java.util.regex.Matcher#quoteReplacement} to suppress the special
 meaning of these characters, if desired.</description>
					<attribute name="@param">
						<description>regex
          the regular expression to which this string is to be matched</description>
					</attribute>
					<attribute name="@param">
						<description>replacement
          the string to be substituted for the first match</description>
					</attribute>
					<attribute name="@return">
						<description>The resulting &lt;tt&gt;String&lt;/tt&gt;</description>
					</attribute>
					<attribute name="@throws">
						<description>PatternSyntaxException
          if the regular expression&apos;s syntax is invalid</description>
					</attribute>
					<attribute name="@see">
						<description>java.util.regex.Pattern</description>
					</attribute>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
					<attribute name="@spec">
						<description>JSR-51</description>
					</attribute>
				</comment>
				<params>
					<param name="regex" comment="the regular expression to which this string is to be matched" fulltype="java.lang.String" type="String" />
					<param name="replacement" comment="the string to be substituted for the first match" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="replaceAll" returncomment="The resulting &lt;tt&gt;String&lt;/tt&gt;" fulltype="java.lang.String" type="String">
				<comment>
					<description>Replaces each substring of this string that matches the given &lt;a
 href=&quot;../util/regex/Pattern.html#sum&quot;&gt;regular expression&lt;/a&gt; with the
 given replacement.

 &lt;p&gt; An invocation of this method of the form
 &lt;i&gt;str&lt;/i&gt;&lt;tt&gt;.replaceAll(&lt;/tt&gt;&lt;i&gt;regex&lt;/i&gt;&lt;tt&gt;,&lt;/tt&gt; &lt;i&gt;repl&lt;/i&gt;&lt;tt&gt;)&lt;/tt&gt;
 yields exactly the same result as the expression

 &lt;blockquote&gt;&lt;tt&gt;
 {@link java.util.regex.Pattern}.{@link java.util.regex.Pattern#compile
 compile}(&lt;/tt&gt;&lt;i&gt;regex&lt;/i&gt;&lt;tt&gt;).{@link
 java.util.regex.Pattern#matcher(java.lang.CharSequence)
 matcher}(&lt;/tt&gt;&lt;i&gt;str&lt;/i&gt;&lt;tt&gt;).{@link java.util.regex.Matcher#replaceAll
 replaceAll}(&lt;/tt&gt;&lt;i&gt;repl&lt;/i&gt;&lt;tt&gt;)&lt;/tt&gt;&lt;/blockquote&gt;

&lt;p&gt;
 Note that backslashes (&lt;tt&gt;\&lt;/tt&gt;) and dollar signs (&lt;tt&gt;$&lt;/tt&gt;) in the
 replacement string may cause the results to be different than if it were
 being treated as a literal replacement string; see
 {@link java.util.regex.Matcher#replaceAll Matcher.replaceAll}.
 Use {@link java.util.regex.Matcher#quoteReplacement} to suppress the special
 meaning of these characters, if desired.</description>
					<attribute name="@param">
						<description>regex
          the regular expression to which this string is to be matched</description>
					</attribute>
					<attribute name="@param">
						<description>replacement
          the string to be substituted for each match</description>
					</attribute>
					<attribute name="@return">
						<description>The resulting &lt;tt&gt;String&lt;/tt&gt;</description>
					</attribute>
					<attribute name="@throws">
						<description>PatternSyntaxException
          if the regular expression&apos;s syntax is invalid</description>
					</attribute>
					<attribute name="@see">
						<description>java.util.regex.Pattern</description>
					</attribute>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
					<attribute name="@spec">
						<description>JSR-51</description>
					</attribute>
				</comment>
				<params>
					<param name="regex" comment="the regular expression to which this string is to be matched" fulltype="java.lang.String" type="String" />
					<param name="replacement" comment="the string to be substituted for each match" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="replace" returncomment="The resulting string" fulltype="java.lang.String" type="String">
				<comment>
					<description>Replaces each substring of this string that matches the literal target
 sequence with the specified literal replacement sequence. The
 replacement proceeds from the beginning of the string to the end, for
 example, replacing &quot;aa&quot; with &quot;b&quot; in the string &quot;aaa&quot; will result in
 &quot;ba&quot; rather than &quot;ab&quot;.</description>
					<attribute name="@param">
						<description>target The sequence of char values to be replaced</description>
					</attribute>
					<attribute name="@param">
						<description>replacement The replacement sequence of char values</description>
					</attribute>
					<attribute name="@return">
						<description>The resulting string</description>
					</attribute>
					<attribute name="@throws">
						<description>NullPointerException if &lt;code&gt;target&lt;/code&gt; or
         &lt;code&gt;replacement&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="target" comment="The sequence of char values to be replaced" fulltype="java.lang.CharSequence" type="CharSequence" />
					<param name="replacement" comment="The replacement sequence of char values" fulltype="java.lang.CharSequence" type="CharSequence" />
				</params>
			</method>
			<method visibility="public" name="split" returncomment="the array of strings computed by splitting this string
          around matches of the given regular expression" fulltype="java.lang.String[]" type="String">
				<comment>
					<description>Splits this string around matches of the given
 &lt;a href=&quot;../util/regex/Pattern.html#sum&quot;&gt;regular expression&lt;/a&gt;.

 &lt;p&gt; The array returned by this method contains each substring of this
 string that is terminated by another substring that matches the given
 expression or is terminated by the end of the string.  The substrings in
 the array are in the order in which they occur in this string.  If the
 expression does not match any part of the input then the resulting array
 has just one element, namely this string.

 &lt;p&gt; The &lt;tt&gt;limit&lt;/tt&gt; parameter controls the number of times the
 pattern is applied and therefore affects the length of the resulting
 array.  If the limit &lt;i&gt;n&lt;/i&gt; is greater than zero then the pattern
 will be applied at most &lt;i&gt;n&lt;/i&gt;&amp;nbsp;-&amp;nbsp;1 times, the array&apos;s
 length will be no greater than &lt;i&gt;n&lt;/i&gt;, and the array&apos;s last entry
 will contain all input beyond the last matched delimiter.  If &lt;i&gt;n&lt;/i&gt;
 is non-positive then the pattern will be applied as many times as
 possible and the array can have any length.  If &lt;i&gt;n&lt;/i&gt; is zero then
 the pattern will be applied as many times as possible, the array can
 have any length, and trailing empty strings will be discarded.

 &lt;p&gt; The string &lt;tt&gt;&quot;boo:and:foo&quot;&lt;/tt&gt;, for example, yields the
 following results with these parameters:

 &lt;blockquote&gt;&lt;table cellpadding=1 cellspacing=0 summary=&quot;Split example showing regex, limit, and result&quot;&gt;
 &lt;tr&gt;
     &lt;th&gt;Regex&lt;/th&gt;
     &lt;th&gt;Limit&lt;/th&gt;
     &lt;th&gt;Result&lt;/th&gt;
 &lt;/tr&gt;
 &lt;tr&gt;&lt;td align=center&gt;:&lt;/td&gt;
     &lt;td align=center&gt;2&lt;/td&gt;
     &lt;td&gt;&lt;tt&gt;{ &quot;boo&quot;, &quot;and:foo&quot; }&lt;/tt&gt;&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td align=center&gt;:&lt;/td&gt;
     &lt;td align=center&gt;5&lt;/td&gt;
     &lt;td&gt;&lt;tt&gt;{ &quot;boo&quot;, &quot;and&quot;, &quot;foo&quot; }&lt;/tt&gt;&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td align=center&gt;:&lt;/td&gt;
     &lt;td align=center&gt;-2&lt;/td&gt;
     &lt;td&gt;&lt;tt&gt;{ &quot;boo&quot;, &quot;and&quot;, &quot;foo&quot; }&lt;/tt&gt;&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td align=center&gt;o&lt;/td&gt;
     &lt;td align=center&gt;5&lt;/td&gt;
     &lt;td&gt;&lt;tt&gt;{ &quot;b&quot;, &quot;&quot;, &quot;:and:f&quot;, &quot;&quot;, &quot;&quot; }&lt;/tt&gt;&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td align=center&gt;o&lt;/td&gt;
     &lt;td align=center&gt;-2&lt;/td&gt;
     &lt;td&gt;&lt;tt&gt;{ &quot;b&quot;, &quot;&quot;, &quot;:and:f&quot;, &quot;&quot;, &quot;&quot; }&lt;/tt&gt;&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td align=center&gt;o&lt;/td&gt;
     &lt;td align=center&gt;0&lt;/td&gt;
     &lt;td&gt;&lt;tt&gt;{ &quot;b&quot;, &quot;&quot;, &quot;:and:f&quot; }&lt;/tt&gt;&lt;/td&gt;&lt;/tr&gt;
 &lt;/table&gt;&lt;/blockquote&gt;

 &lt;p&gt; An invocation of this method of the form
 &lt;i&gt;str.&lt;/i&gt;&lt;tt&gt;split(&lt;/tt&gt;&lt;i&gt;regex&lt;/i&gt;&lt;tt&gt;,&lt;/tt&gt;&amp;nbsp;&lt;i&gt;n&lt;/i&gt;&lt;tt&gt;)&lt;/tt&gt;
 yields the same result as the expression

 &lt;blockquote&gt;
 {@link java.util.regex.Pattern}.{@link java.util.regex.Pattern#compile
 compile}&lt;tt&gt;(&lt;/tt&gt;&lt;i&gt;regex&lt;/i&gt;&lt;tt&gt;)&lt;/tt&gt;.{@link
 java.util.regex.Pattern#split(java.lang.CharSequence,int)
 split}&lt;tt&gt;(&lt;/tt&gt;&lt;i&gt;str&lt;/i&gt;&lt;tt&gt;,&lt;/tt&gt;&amp;nbsp;&lt;i&gt;n&lt;/i&gt;&lt;tt&gt;)&lt;/tt&gt;
 &lt;/blockquote&gt;</description>
					<attribute name="@param">
						<description>regex
         the delimiting regular expression</description>
					</attribute>
					<attribute name="@param">
						<description>limit
         the result threshold, as described above</description>
					</attribute>
					<attribute name="@return">
						<description>the array of strings computed by splitting this string
          around matches of the given regular expression</description>
					</attribute>
					<attribute name="@throws">
						<description>PatternSyntaxException
          if the regular expression&apos;s syntax is invalid</description>
					</attribute>
					<attribute name="@see">
						<description>java.util.regex.Pattern</description>
					</attribute>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
					<attribute name="@spec">
						<description>JSR-51</description>
					</attribute>
				</comment>
				<params>
					<param name="regex" comment="the delimiting regular expression" fulltype="java.lang.String" type="String" />
					<param name="limit" comment="the result threshold, as described above" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="split" returncomment="the array of strings computed by splitting this string
          around matches of the given regular expression" fulltype="java.lang.String[]" type="String">
				<comment>
					<description>Splits this string around matches of the given &lt;a
 href=&quot;../util/regex/Pattern.html#sum&quot;&gt;regular expression&lt;/a&gt;.

 &lt;p&gt; This method works as if by invoking the two-argument {@link
 #split(String, int) split} method with the given expression and a limit
 argument of zero.  Trailing empty strings are therefore not included in
 the resulting array.

 &lt;p&gt; The string &lt;tt&gt;&quot;boo:and:foo&quot;&lt;/tt&gt;, for example, yields the following
 results with these expressions:

 &lt;blockquote&gt;&lt;table cellpadding=1 cellspacing=0 summary=&quot;Split examples showing regex and result&quot;&gt;
 &lt;tr&gt;
  &lt;th&gt;Regex&lt;/th&gt;
  &lt;th&gt;Result&lt;/th&gt;
 &lt;/tr&gt;
 &lt;tr&gt;&lt;td align=center&gt;:&lt;/td&gt;
     &lt;td&gt;&lt;tt&gt;{ &quot;boo&quot;, &quot;and&quot;, &quot;foo&quot; }&lt;/tt&gt;&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td align=center&gt;o&lt;/td&gt;
     &lt;td&gt;&lt;tt&gt;{ &quot;b&quot;, &quot;&quot;, &quot;:and:f&quot; }&lt;/tt&gt;&lt;/td&gt;&lt;/tr&gt;
 &lt;/table&gt;&lt;/blockquote&gt;</description>
					<attribute name="@param">
						<description>regex
         the delimiting regular expression</description>
					</attribute>
					<attribute name="@return">
						<description>the array of strings computed by splitting this string
          around matches of the given regular expression</description>
					</attribute>
					<attribute name="@throws">
						<description>PatternSyntaxException
          if the regular expression&apos;s syntax is invalid</description>
					</attribute>
					<attribute name="@see">
						<description>java.util.regex.Pattern</description>
					</attribute>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
					<attribute name="@spec">
						<description>JSR-51</description>
					</attribute>
				</comment>
				<params>
					<param name="regex" comment="the delimiting regular expression" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="toLowerCase" returncomment="the &lt;code&gt;String&lt;/code&gt;, converted to lowercase." fulltype="java.lang.String" type="String">
				<comment>
					<description>Converts all of the characters in this &lt;code&gt;String&lt;/code&gt; to lower
 case using the rules of the given &lt;code&gt;Locale&lt;/code&gt;.  Case mapping is based
 on the Unicode Standard version specified by the {@link java.lang.Character Character}
 class. Since case mappings are not always 1:1 char mappings, the resulting
 &lt;code&gt;String&lt;/code&gt; may be a different length than the original &lt;code&gt;String&lt;/code&gt;.
 &lt;p&gt;
 Examples of lowercase  mappings are in the following table:
 &lt;table border=&quot;1&quot; summary=&quot;Lowercase mapping examples showing language code of locale, upper case, lower case, and description&quot;&gt;
 &lt;tr&gt;
   &lt;th&gt;Language Code of Locale&lt;/th&gt;
   &lt;th&gt;Upper Case&lt;/th&gt;
   &lt;th&gt;Lower Case&lt;/th&gt;
   &lt;th&gt;Description&lt;/th&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
   &lt;td&gt;tr (Turkish)&lt;/td&gt;
   &lt;td&gt;&amp;#92;u0130&lt;/td&gt;
   &lt;td&gt;&amp;#92;u0069&lt;/td&gt;
   &lt;td&gt;capital letter I with dot above -&amp;gt; small letter i&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
   &lt;td&gt;tr (Turkish)&lt;/td&gt;
   &lt;td&gt;&amp;#92;u0049&lt;/td&gt;
   &lt;td&gt;&amp;#92;u0131&lt;/td&gt;
   &lt;td&gt;capital letter I -&amp;gt; small letter dotless i &lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
   &lt;td&gt;(all)&lt;/td&gt;
   &lt;td&gt;French Fries&lt;/td&gt;
   &lt;td&gt;french fries&lt;/td&gt;
   &lt;td&gt;lowercased all chars in String&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
   &lt;td&gt;(all)&lt;/td&gt;
   &lt;td&gt;&lt;img src=&quot;doc-files/capiota.gif&quot; alt=&quot;capiota&quot;&gt;&lt;img src=&quot;doc-files/capchi.gif&quot; alt=&quot;capchi&quot;&gt;
       &lt;img src=&quot;doc-files/captheta.gif&quot; alt=&quot;captheta&quot;&gt;&lt;img src=&quot;doc-files/capupsil.gif&quot; alt=&quot;capupsil&quot;&gt;
       &lt;img src=&quot;doc-files/capsigma.gif&quot; alt=&quot;capsigma&quot;&gt;&lt;/td&gt;
   &lt;td&gt;&lt;img src=&quot;doc-files/iota.gif&quot; alt=&quot;iota&quot;&gt;&lt;img src=&quot;doc-files/chi.gif&quot; alt=&quot;chi&quot;&gt;
       &lt;img src=&quot;doc-files/theta.gif&quot; alt=&quot;theta&quot;&gt;&lt;img src=&quot;doc-files/upsilon.gif&quot; alt=&quot;upsilon&quot;&gt;
       &lt;img src=&quot;doc-files/sigma1.gif&quot; alt=&quot;sigma&quot;&gt;&lt;/td&gt;
   &lt;td&gt;lowercased all chars in String&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/table&gt;</description>
					<attribute name="@param">
						<description>locale use the case transformation rules for this locale</description>
					</attribute>
					<attribute name="@return">
						<description>the &lt;code&gt;String&lt;/code&gt;, converted to lowercase.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.String#toLowerCase()</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.String#toUpperCase()</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.String#toUpperCase(Locale)</description>
					</attribute>
					<attribute name="@since">
						<description>1.1</description>
					</attribute>
				</comment>
				<params>
					<param name="locale" comment="use the case transformation rules for this locale" fulltype="java.util.Locale" type="Locale" />
				</params>
			</method>
			<method visibility="public" name="toLowerCase" returncomment="the &lt;code&gt;String&lt;/code&gt;, converted to lowercase." fulltype="java.lang.String" type="String">
				<comment>
					<description>Converts all of the characters in this &lt;code&gt;String&lt;/code&gt; to lower
 case using the rules of the default locale. This is equivalent to calling
 &lt;code&gt;toLowerCase(Locale.getDefault())&lt;/code&gt;.
 &lt;p&gt;
 &lt;b&gt;Note:&lt;/b&gt; This method is locale sensitive, and may produce unexpected
 results if used for strings that are intended to be interpreted locale
 independently.
 Examples are programming language identifiers, protocol keys, and HTML
 tags.
 For instance, &lt;code&gt;&quot;TITLE&quot;.toLowerCase()&lt;/code&gt; in a Turkish locale
 returns &lt;code&gt;&quot;tıtle&quot;&lt;/code&gt;, where &apos;ı&apos; is the LATIN SMALL
 LETTER DOTLESS I character.
 To obtain correct results for locale insensitive strings, use
 &lt;code&gt;toLowerCase(Locale.ENGLISH)&lt;/code&gt;.
 &lt;p&gt;</description>
					<attribute name="@return">
						<description>the &lt;code&gt;String&lt;/code&gt;, converted to lowercase.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.String#toLowerCase(Locale)</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="toUpperCase" returncomment="the &lt;code&gt;String&lt;/code&gt;, converted to uppercase." fulltype="java.lang.String" type="String">
				<comment>
					<description>Converts all of the characters in this &lt;code&gt;String&lt;/code&gt; to upper
 case using the rules of the given &lt;code&gt;Locale&lt;/code&gt;. Case mapping is based
 on the Unicode Standard version specified by the {@link java.lang.Character Character}
 class. Since case mappings are not always 1:1 char mappings, the resulting
 &lt;code&gt;String&lt;/code&gt; may be a different length than the original &lt;code&gt;String&lt;/code&gt;.
 &lt;p&gt;
 Examples of locale-sensitive and 1:M case mappings are in the following table.
 &lt;p&gt;
 &lt;table border=&quot;1&quot; summary=&quot;Examples of locale-sensitive and 1:M case mappings. Shows Language code of locale, lower case, upper case, and description.&quot;&gt;
 &lt;tr&gt;
   &lt;th&gt;Language Code of Locale&lt;/th&gt;
   &lt;th&gt;Lower Case&lt;/th&gt;
   &lt;th&gt;Upper Case&lt;/th&gt;
   &lt;th&gt;Description&lt;/th&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
   &lt;td&gt;tr (Turkish)&lt;/td&gt;
   &lt;td&gt;&amp;#92;u0069&lt;/td&gt;
   &lt;td&gt;&amp;#92;u0130&lt;/td&gt;
   &lt;td&gt;small letter i -&amp;gt; capital letter I with dot above&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
   &lt;td&gt;tr (Turkish)&lt;/td&gt;
   &lt;td&gt;&amp;#92;u0131&lt;/td&gt;
   &lt;td&gt;&amp;#92;u0049&lt;/td&gt;
   &lt;td&gt;small letter dotless i -&amp;gt; capital letter I&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
   &lt;td&gt;(all)&lt;/td&gt;
   &lt;td&gt;&amp;#92;u00df&lt;/td&gt;
   &lt;td&gt;&amp;#92;u0053 &amp;#92;u0053&lt;/td&gt;
   &lt;td&gt;small letter sharp s -&amp;gt; two letters: SS&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
   &lt;td&gt;(all)&lt;/td&gt;
   &lt;td&gt;Fahrvergn&amp;uuml;gen&lt;/td&gt;
   &lt;td&gt;FAHRVERGN&amp;Uuml;GEN&lt;/td&gt;
   &lt;td&gt;&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/table&gt;</description>
					<attribute name="@param">
						<description>locale use the case transformation rules for this locale</description>
					</attribute>
					<attribute name="@return">
						<description>the &lt;code&gt;String&lt;/code&gt;, converted to uppercase.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.String#toUpperCase()</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.String#toLowerCase()</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.String#toLowerCase(Locale)</description>
					</attribute>
					<attribute name="@since">
						<description>1.1</description>
					</attribute>
				</comment>
				<params>
					<param name="locale" comment="use the case transformation rules for this locale" fulltype="java.util.Locale" type="Locale" />
				</params>
			</method>
			<method visibility="public" name="toUpperCase" returncomment="the &lt;code&gt;String&lt;/code&gt;, converted to uppercase." fulltype="java.lang.String" type="String">
				<comment>
					<description>Converts all of the characters in this &lt;code&gt;String&lt;/code&gt; to upper
 case using the rules of the default locale. This method is equivalent to
 &lt;code&gt;toUpperCase(Locale.getDefault())&lt;/code&gt;.
 &lt;p&gt;
 &lt;b&gt;Note:&lt;/b&gt; This method is locale sensitive, and may produce unexpected
 results if used for strings that are intended to be interpreted locale
 independently.
 Examples are programming language identifiers, protocol keys, and HTML
 tags.
 For instance, &lt;code&gt;&quot;title&quot;.toUpperCase()&lt;/code&gt; in a Turkish locale
 returns &lt;code&gt;&quot;TİTLE&quot;&lt;/code&gt;, where &apos;İ&apos; is the LATIN CAPITAL
 LETTER I WITH DOT ABOVE character.
 To obtain correct results for locale insensitive strings, use
 &lt;code&gt;toUpperCase(Locale.ENGLISH)&lt;/code&gt;.
 &lt;p&gt;</description>
					<attribute name="@return">
						<description>the &lt;code&gt;String&lt;/code&gt;, converted to uppercase.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.String#toUpperCase(Locale)</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="trim" returncomment="A copy of this string with leading and trailing white
          space removed, or this string if it has no leading or
          trailing white space." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a copy of the string, with leading and trailing whitespace
 omitted.
 &lt;p&gt;
 If this &lt;code&gt;String&lt;/code&gt; object represents an empty character
 sequence, or the first and last characters of character sequence
 represented by this &lt;code&gt;String&lt;/code&gt; object both have codes
 greater than &lt;code&gt;&apos;&amp;#92;u0020&apos;&lt;/code&gt; (the space character), then a
 reference to this &lt;code&gt;String&lt;/code&gt; object is returned.
 &lt;p&gt;
 Otherwise, if there is no character with a code greater than
 &lt;code&gt;&apos;&amp;#92;u0020&apos;&lt;/code&gt; in the string, then a new
 &lt;code&gt;String&lt;/code&gt; object representing an empty string is created
 and returned.
 &lt;p&gt;
 Otherwise, let &lt;i&gt;k&lt;/i&gt; be the index of the first character in the
 string whose code is greater than &lt;code&gt;&apos;&amp;#92;u0020&apos;&lt;/code&gt;, and let
 &lt;i&gt;m&lt;/i&gt; be the index of the last character in the string whose code
 is greater than &lt;code&gt;&apos;&amp;#92;u0020&apos;&lt;/code&gt;. A new &lt;code&gt;String&lt;/code&gt;
 object is created, representing the substring of this string that
 begins with the character at index &lt;i&gt;k&lt;/i&gt; and ends with the
 character at index &lt;i&gt;m&lt;/i&gt;-that is, the result of
 &lt;code&gt;this.substring(&lt;i&gt;k&lt;/i&gt;,&amp;nbsp;&lt;i&gt;m&lt;/i&gt;+1)&lt;/code&gt;.
 &lt;p&gt;
 This method may be used to trim whitespace (as defined above) from
 the beginning and end of a string.</description>
					<attribute name="@return">
						<description>A copy of this string with leading and trailing white
          space removed, or this string if it has no leading or
          trailing white space.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="toString" returncomment="the string itself." fulltype="java.lang.String" type="String">
				<comment>
					<description>This object (which is already a string!) is itself returned.</description>
					<attribute name="@return">
						<description>the string itself.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="toCharArray" returncomment="a newly allocated character array whose length is the length
          of this string and whose contents are initialized to contain
          the character sequence represented by this string." fulltype="char[]" type="char">
				<comment>
					<description>Converts this string to a new character array.</description>
					<attribute name="@return">
						<description>a newly allocated character array whose length is the length
          of this string and whose contents are initialized to contain
          the character sequence represented by this string.</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="format" returncomment="A formatted string" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a formatted string using the specified format string and
 arguments.

 &lt;p&gt; The locale always used is the one returned by {@link
 java.util.Locale#getDefault() Locale.getDefault()}.</description>
					<attribute name="@param">
						<description>format
         A &lt;a href=&quot;../util/Formatter.html#syntax&quot;&gt;format string&lt;/a&gt;</description>
					</attribute>
					<attribute name="@param">
						<description>args
         Arguments referenced by the format specifiers in the format
         string.  If there are more arguments than format specifiers, the
         extra arguments are ignored.  The number of arguments is
         variable and may be zero.  The maximum number of arguments is
         limited by the maximum dimension of a Java array as defined by
         the &lt;a href=&quot;http://java.sun.com/docs/books/vmspec/&quot;&gt;Java
         Virtual Machine Specification&lt;/a&gt;.  The behaviour on a
         &lt;tt&gt;null&lt;/tt&gt; argument depends on the &lt;a
         href=&quot;../util/Formatter.html#syntax&quot;&gt;conversion&lt;/a&gt;.</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalFormatException
          If a format string contains an illegal syntax, a format
          specifier that is incompatible with the given arguments,
          insufficient arguments given the format string, or other
          illegal conditions.  For specification of all possible
          formatting errors, see the &lt;a
          href=&quot;../util/Formatter.html#detail&quot;&gt;Details&lt;/a&gt; section of the
          formatter class specification.</description>
					</attribute>
					<attribute name="@throws">
						<description>NullPointerException
          If the &lt;tt&gt;format&lt;/tt&gt; is &lt;tt&gt;null&lt;/tt&gt;</description>
					</attribute>
					<attribute name="@return">
						<description>A formatted string</description>
					</attribute>
					<attribute name="@see">
						<description>java.util.Formatter</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="format" comment="A &lt;a href=&quot;../util/Formatter.html#syntax&quot;&gt;format string&lt;/a&gt;" fulltype="java.lang.String" type="String" />
					<param name="args" comment="Arguments referenced by the format specifiers in the format
         string.  If there are more arguments than format specifiers, the
         extra arguments are ignored.  The number of arguments is
         variable and may be zero.  The maximum number of arguments is
         limited by the maximum dimension of a Java array as defined by
         the &lt;a href=&quot;http://java.sun.com/docs/books/vmspec/&quot;&gt;Java
         Virtual Machine Specification&lt;/a&gt;.  The behaviour on a
         &lt;tt&gt;null&lt;/tt&gt; argument depends on the &lt;a
         href=&quot;../util/Formatter.html#syntax&quot;&gt;conversion&lt;/a&gt;." fulltype="java.lang.Object[]" type="Object" />
				</params>
			</method>
			<method static="true" visibility="public" name="format" returncomment="A formatted string" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a formatted string using the specified locale, format string,
 and arguments.</description>
					<attribute name="@param">
						<description>l
         The {@linkplain java.util.Locale locale} to apply during
         formatting.  If &lt;tt&gt;l&lt;/tt&gt; is &lt;tt&gt;null&lt;/tt&gt; then no localization
         is applied.</description>
					</attribute>
					<attribute name="@param">
						<description>format
         A &lt;a href=&quot;../util/Formatter.html#syntax&quot;&gt;format string&lt;/a&gt;</description>
					</attribute>
					<attribute name="@param">
						<description>args
         Arguments referenced by the format specifiers in the format
         string.  If there are more arguments than format specifiers, the
         extra arguments are ignored.  The number of arguments is
         variable and may be zero.  The maximum number of arguments is
         limited by the maximum dimension of a Java array as defined by
         the &lt;a href=&quot;http://java.sun.com/docs/books/vmspec/&quot;&gt;Java
         Virtual Machine Specification&lt;/a&gt;.  The behaviour on a
         &lt;tt&gt;null&lt;/tt&gt; argument depends on the &lt;a
         href=&quot;../util/Formatter.html#syntax&quot;&gt;conversion&lt;/a&gt;.</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalFormatException
          If a format string contains an illegal syntax, a format
          specifier that is incompatible with the given arguments,
          insufficient arguments given the format string, or other
          illegal conditions.  For specification of all possible
          formatting errors, see the &lt;a
          href=&quot;../util/Formatter.html#detail&quot;&gt;Details&lt;/a&gt; section of the
          formatter class specification</description>
					</attribute>
					<attribute name="@throws">
						<description>NullPointerException
          If the &lt;tt&gt;format&lt;/tt&gt; is &lt;tt&gt;null&lt;/tt&gt;</description>
					</attribute>
					<attribute name="@return">
						<description>A formatted string</description>
					</attribute>
					<attribute name="@see">
						<description>java.util.Formatter</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="l" comment="The {@linkplain java.util.Locale locale} to apply during
         formatting.  If &lt;tt&gt;l&lt;/tt&gt; is &lt;tt&gt;null&lt;/tt&gt; then no localization
         is applied." fulltype="java.util.Locale" type="Locale" />
					<param name="format" comment="A &lt;a href=&quot;../util/Formatter.html#syntax&quot;&gt;format string&lt;/a&gt;" fulltype="java.lang.String" type="String" />
					<param name="args" comment="Arguments referenced by the format specifiers in the format
         string.  If there are more arguments than format specifiers, the
         extra arguments are ignored.  The number of arguments is
         variable and may be zero.  The maximum number of arguments is
         limited by the maximum dimension of a Java array as defined by
         the &lt;a href=&quot;http://java.sun.com/docs/books/vmspec/&quot;&gt;Java
         Virtual Machine Specification&lt;/a&gt;.  The behaviour on a
         &lt;tt&gt;null&lt;/tt&gt; argument depends on the &lt;a
         href=&quot;../util/Formatter.html#syntax&quot;&gt;conversion&lt;/a&gt;." fulltype="java.lang.Object[]" type="Object" />
				</params>
			</method>
			<method static="true" visibility="public" name="valueOf" returncomment="if the argument is &lt;code&gt;null&lt;/code&gt;, then a string equal to
          &lt;code&gt;&quot;null&quot;&lt;/code&gt;; otherwise, the value of
          &lt;code&gt;obj.toString()&lt;/code&gt; is returned." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the string representation of the &lt;code&gt;Object&lt;/code&gt; argument.</description>
					<attribute name="@param">
						<description>obj   an &lt;code&gt;Object&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@return">
						<description>if the argument is &lt;code&gt;null&lt;/code&gt;, then a string equal to
          &lt;code&gt;&quot;null&quot;&lt;/code&gt;; otherwise, the value of
          &lt;code&gt;obj.toString()&lt;/code&gt; is returned.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Object#toString()</description>
					</attribute>
				</comment>
				<params>
					<param name="obj" comment="an &lt;code&gt;Object&lt;/code&gt;." fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method static="true" visibility="public" name="valueOf" returncomment="a newly allocated string representing the same sequence of
          characters contained in the character array argument." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the string representation of the &lt;code&gt;char&lt;/code&gt; array
 argument. The contents of the character array are copied; subsequent
 modification of the character array does not affect the newly
 created string.</description>
					<attribute name="@param">
						<description>data   a &lt;code&gt;char&lt;/code&gt; array.</description>
					</attribute>
					<attribute name="@return">
						<description>a newly allocated string representing the same sequence of
          characters contained in the character array argument.</description>
					</attribute>
				</comment>
				<params>
					<param name="data" comment="a &lt;code&gt;char&lt;/code&gt; array." fulltype="char[]" type="char" />
				</params>
			</method>
			<method static="true" visibility="public" name="valueOf" returncomment="a string representing the sequence of characters contained
          in the subarray of the character array argument." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the string representation of a specific subarray of the
 &lt;code&gt;char&lt;/code&gt; array argument.
 &lt;p&gt;
 The &lt;code&gt;offset&lt;/code&gt; argument is the index of the first
 character of the subarray. The &lt;code&gt;count&lt;/code&gt; argument
 specifies the length of the subarray. The contents of the subarray
 are copied; subsequent modification of the character array does not
 affect the newly created string.</description>
					<attribute name="@param">
						<description>data     the character array.</description>
					</attribute>
					<attribute name="@param">
						<description>offset   the initial offset into the value of the
                  &lt;code&gt;String&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@param">
						<description>count    the length of the value of the &lt;code&gt;String&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@return">
						<description>a string representing the sequence of characters contained
          in the subarray of the character array argument.</description>
					</attribute>
					<attribute name="@exception">
						<description>IndexOutOfBoundsException if &lt;code&gt;offset&lt;/code&gt; is
          negative, or &lt;code&gt;count&lt;/code&gt; is negative, or
          &lt;code&gt;offset+count&lt;/code&gt; is larger than
          &lt;code&gt;data.length&lt;/code&gt;.</description>
					</attribute>
				</comment>
				<params>
					<param name="data" comment="the character array." fulltype="char[]" type="char" />
					<param name="offset" comment="the initial offset into the value of the
                  &lt;code&gt;String&lt;/code&gt;." fulltype="int" type="int" />
					<param name="count" comment="the length of the value of the &lt;code&gt;String&lt;/code&gt;." fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="copyValueOf" returncomment="a &lt;code&gt;String&lt;/code&gt; that contains the characters of the
          specified subarray of the character array." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a String that represents the character sequence in the
 array specified.</description>
					<attribute name="@param">
						<description>data     the character array.</description>
					</attribute>
					<attribute name="@param">
						<description>offset   initial offset of the subarray.</description>
					</attribute>
					<attribute name="@param">
						<description>count    length of the subarray.</description>
					</attribute>
					<attribute name="@return">
						<description>a &lt;code&gt;String&lt;/code&gt; that contains the characters of the
          specified subarray of the character array.</description>
					</attribute>
				</comment>
				<params>
					<param name="data" comment="the character array." fulltype="char[]" type="char" />
					<param name="offset" comment="initial offset of the subarray." fulltype="int" type="int" />
					<param name="count" comment="length of the subarray." fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="copyValueOf" returncomment="a &lt;code&gt;String&lt;/code&gt; that contains the characters of the
          character array." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a String that represents the character sequence in the
 array specified.</description>
					<attribute name="@param">
						<description>data   the character array.</description>
					</attribute>
					<attribute name="@return">
						<description>a &lt;code&gt;String&lt;/code&gt; that contains the characters of the
          character array.</description>
					</attribute>
				</comment>
				<params>
					<param name="data" comment="the character array." fulltype="char[]" type="char" />
				</params>
			</method>
			<method static="true" visibility="public" name="valueOf" returncomment="if the argument is &lt;code&gt;true&lt;/code&gt;, a string equal to
          &lt;code&gt;&quot;true&quot;&lt;/code&gt; is returned; otherwise, a string equal to
          &lt;code&gt;&quot;false&quot;&lt;/code&gt; is returned." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the string representation of the &lt;code&gt;boolean&lt;/code&gt; argument.</description>
					<attribute name="@param">
						<description>b   a &lt;code&gt;boolean&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@return">
						<description>if the argument is &lt;code&gt;true&lt;/code&gt;, a string equal to
          &lt;code&gt;&quot;true&quot;&lt;/code&gt; is returned; otherwise, a string equal to
          &lt;code&gt;&quot;false&quot;&lt;/code&gt; is returned.</description>
					</attribute>
				</comment>
				<params>
					<param name="b" comment="a &lt;code&gt;boolean&lt;/code&gt;." fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="valueOf" returncomment="a string of length &lt;code&gt;1&lt;/code&gt; containing
          as its single character the argument &lt;code&gt;c&lt;/code&gt;." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the string representation of the &lt;code&gt;char&lt;/code&gt;
 argument.</description>
					<attribute name="@param">
						<description>c   a &lt;code&gt;char&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@return">
						<description>a string of length &lt;code&gt;1&lt;/code&gt; containing
          as its single character the argument &lt;code&gt;c&lt;/code&gt;.</description>
					</attribute>
				</comment>
				<params>
					<param name="c" comment="a &lt;code&gt;char&lt;/code&gt;." fulltype="char" type="char" />
				</params>
			</method>
			<method static="true" visibility="public" name="valueOf" returncomment="a string representation of the &lt;code&gt;int&lt;/code&gt; argument." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the string representation of the &lt;code&gt;int&lt;/code&gt; argument.
 &lt;p&gt;
 The representation is exactly the one returned by the
 &lt;code&gt;Integer.toString&lt;/code&gt; method of one argument.</description>
					<attribute name="@param">
						<description>i   an &lt;code&gt;int&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@return">
						<description>a string representation of the &lt;code&gt;int&lt;/code&gt; argument.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Integer#toString(int, int)</description>
					</attribute>
				</comment>
				<params>
					<param name="i" comment="an &lt;code&gt;int&lt;/code&gt;." fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="valueOf" returncomment="a string representation of the &lt;code&gt;long&lt;/code&gt; argument." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the string representation of the &lt;code&gt;long&lt;/code&gt; argument.
 &lt;p&gt;
 The representation is exactly the one returned by the
 &lt;code&gt;Long.toString&lt;/code&gt; method of one argument.</description>
					<attribute name="@param">
						<description>l   a &lt;code&gt;long&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@return">
						<description>a string representation of the &lt;code&gt;long&lt;/code&gt; argument.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Long#toString(long)</description>
					</attribute>
				</comment>
				<params>
					<param name="l" comment="a &lt;code&gt;long&lt;/code&gt;." fulltype="long" type="long" />
				</params>
			</method>
			<method static="true" visibility="public" name="valueOf" returncomment="a string representation of the &lt;code&gt;float&lt;/code&gt; argument." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the string representation of the &lt;code&gt;float&lt;/code&gt; argument.
 &lt;p&gt;
 The representation is exactly the one returned by the
 &lt;code&gt;Float.toString&lt;/code&gt; method of one argument.</description>
					<attribute name="@param">
						<description>f   a &lt;code&gt;float&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@return">
						<description>a string representation of the &lt;code&gt;float&lt;/code&gt; argument.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Float#toString(float)</description>
					</attribute>
				</comment>
				<params>
					<param name="f" comment="a &lt;code&gt;float&lt;/code&gt;." fulltype="float" type="float" />
				</params>
			</method>
			<method static="true" visibility="public" name="valueOf" returncomment="a  string representation of the &lt;code&gt;double&lt;/code&gt; argument." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the string representation of the &lt;code&gt;double&lt;/code&gt; argument.
 &lt;p&gt;
 The representation is exactly the one returned by the
 &lt;code&gt;Double.toString&lt;/code&gt; method of one argument.</description>
					<attribute name="@param">
						<description>d   a &lt;code&gt;double&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@return">
						<description>a  string representation of the &lt;code&gt;double&lt;/code&gt; argument.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Double#toString(double)</description>
					</attribute>
				</comment>
				<params>
					<param name="d" comment="a &lt;code&gt;double&lt;/code&gt;." fulltype="double" type="double" />
				</params>
			</method>
			<method visibility="public" name="intern" returncomment="a string that has the same contents as this string, but is
          guaranteed to be from a pool of unique strings." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a canonical representation for the string object.
 &lt;p&gt;
 A pool of strings, initially empty, is maintained privately by the
 class &lt;code&gt;String&lt;/code&gt;.
 &lt;p&gt;
 When the intern method is invoked, if the pool already contains a
 string equal to this &lt;code&gt;String&lt;/code&gt; object as determined by
 the {@link #equals(Object)} method, then the string from the pool is
 returned. Otherwise, this &lt;code&gt;String&lt;/code&gt; object is added to the
 pool and a reference to this &lt;code&gt;String&lt;/code&gt; object is returned.
 &lt;p&gt;
 It follows that for any two strings &lt;code&gt;s&lt;/code&gt; and &lt;code&gt;t&lt;/code&gt;,
 &lt;code&gt;s.intern()&amp;nbsp;==&amp;nbsp;t.intern()&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;
 if and only if &lt;code&gt;s.equals(t)&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.
 &lt;p&gt;
 All literal strings and string-valued constant expressions are
 interned. String literals are defined in &amp;sect;3.10.5 of the
 &lt;a href=&quot;http://java.sun.com/docs/books/jls/html/&quot;&gt;Java Language
 Specification&lt;/a&gt;</description>
					<attribute name="@return">
						<description>a string that has the same contents as this string, but is
          guaranteed to be from a pool of unique strings.</description>
					</attribute>
				</comment>
			</method>
		</methods>
		<jelclass superclass="Object" visibility="private" package="java.lang" serializable="true" superclassfulltype="java.lang.Object" fulltype="java.lang.String.CaseInsensitiveComparator" type="String.CaseInsensitiveComparator">
			<implements>
				<interface fulltype="java.util.Comparator" type="Comparator" />
				<interface fulltype="java.io.Serializable" type="Serializable" />
			</implements>
			<fields>
				<field final="true" static="true" const="8575799808933029326" visibility="private" name="serialVersionUID" constexpr="8575799808933029326L" fulltype="long" type="long" />
			</fields>
			<methods>
				<constructor visibility="private" name="String.CaseInsensitiveComparator" />
				<method visibility="public" name="compare" fulltype="int" type="int">
					<params>
						<param name="s1" fulltype="java.lang.String" type="String" />
						<param name="s2" fulltype="java.lang.String" type="String" />
					</params>
				</method>
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="Object" visibility="private" package="java.lang" serializable="true" superclassfulltype="java.lang.Object" fulltype="java.lang.String.CaseInsensitiveComparator" type="String.CaseInsensitiveComparator">
		<implements>
			<interface fulltype="java.util.Comparator" type="Comparator" />
			<interface fulltype="java.io.Serializable" type="Serializable" />
		</implements>
		<fields>
			<field final="true" static="true" const="8575799808933029326" visibility="private" name="serialVersionUID" constexpr="8575799808933029326L" fulltype="long" type="long" />
		</fields>
		<methods>
			<constructor visibility="private" name="String.CaseInsensitiveComparator" />
			<method visibility="public" name="compare" fulltype="int" type="int">
				<params>
					<param name="s1" fulltype="java.lang.String" type="String" />
					<param name="s2" fulltype="java.lang.String" type="String" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass final="true" superclass="Number" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.Number" fulltype="java.lang.Double" type="Double">
		<implements>
			<interface fulltype="java.lang.Comparable" type="Comparable" />
		</implements>
		<comment>
			<description>The {@code Double} class wraps a value of the primitive type
 {@code double} in an object. An object of type
 {@code Double} contains a single field whose type is
 {@code double}.

 &lt;p&gt;In addition, this class provides several methods for converting a
 {@code double} to a {@code String} and a
 {@code String} to a {@code double}, as well as other
 constants and methods useful when dealing with a
 {@code double}.</description>
			<attribute name="@author">
				<description>Lee Boynton</description>
			</attribute>
			<attribute name="@author">
				<description>Arthur van Hoff</description>
			</attribute>
			<attribute name="@author">
				<description>Joseph D. Darcy</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.0</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="Infinity" visibility="public" name="POSITIVE_INFINITY" constexpr="1d/0d" fulltype="double" type="double">
				<comment>
					<description>A constant holding the positive infinity of type
 {@code double}. It is equal to the value returned by
 {@code Double.longBitsToDouble(0x7ff0000000000000L)}.</description>
				</comment>
			</field>
			<field final="true" static="true" const="-Infinity" visibility="public" name="NEGATIVE_INFINITY" constexpr="-1d/0d" fulltype="double" type="double">
				<comment>
					<description>A constant holding the negative infinity of type
 {@code double}. It is equal to the value returned by
 {@code Double.longBitsToDouble(0xfff0000000000000L)}.</description>
				</comment>
			</field>
			<field final="true" static="true" const="NaN" visibility="public" name="NaN" constexpr="0d/0d" fulltype="double" type="double">
				<comment>
					<description>A constant holding a Not-a-Number (NaN) value of type
 {@code double}. It is equivalent to the value returned by
 {@code Double.longBitsToDouble(0x7ff8000000000000L)}.</description>
				</comment>
			</field>
			<field final="true" static="true" const="1.7976931348623157E308" visibility="public" name="MAX_VALUE" constexpr="1.7976931348623157E308" fulltype="double" type="double">
				<comment>
					<description>A constant holding the largest positive finite value of type
 {@code double},
 (2-2&lt;sup&gt;-52&lt;/sup&gt;)&amp;middot;2&lt;sup&gt;1023&lt;/sup&gt;.  It is equal to
 the hexadecimal floating-point literal
 {@code 0x1.fffffffffffffP+1023} and also equal to
 {@code Double.longBitsToDouble(0x7fefffffffffffffL)}.</description>
				</comment>
			</field>
			<field final="true" static="true" const="2.2250738585072014E-308" visibility="public" name="MIN_NORMAL" constexpr="2.2250738585072014E-308" fulltype="double" type="double">
				<comment>
					<description>A constant holding the smallest positive normal value of type
 {@code double}, 2&lt;sup&gt;-1022&lt;/sup&gt;.  It is equal to the
 hexadecimal floating-point literal {@code 0x1.0p-1022} and also
 equal to {@code Double.longBitsToDouble(0x0010000000000000L)}.</description>
					<attribute name="@since">
						<description>1.6</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="4.9E-324" visibility="public" name="MIN_VALUE" constexpr="4.9E-324" fulltype="double" type="double">
				<comment>
					<description>A constant holding the smallest positive nonzero value of type
 {@code double}, 2&lt;sup&gt;-1074&lt;/sup&gt;. It is equal to the
 hexadecimal floating-point literal
 {@code 0x0.0000000000001P-1022} and also equal to
 {@code Double.longBitsToDouble(0x1L)}.</description>
				</comment>
			</field>
			<field final="true" static="true" const="1023" visibility="public" name="MAX_EXPONENT" constexpr="1023" fulltype="int" type="int">
				<comment>
					<description>Maximum exponent a finite {@code double} variable may have.
 It is equal to the value returned by
 {@code Math.getExponent(Double.MAX_VALUE)}.</description>
					<attribute name="@since">
						<description>1.6</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="-1022" visibility="public" name="MIN_EXPONENT" constexpr="-1022" fulltype="int" type="int">
				<comment>
					<description>Minimum exponent a normalized {@code double} variable may
 have.  It is equal to the value returned by
 {@code Math.getExponent(Double.MIN_NORMAL)}.</description>
					<attribute name="@since">
						<description>1.6</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="64" visibility="public" name="SIZE" constexpr="64" fulltype="int" type="int">
				<comment>
					<description>The number of bits used to represent a {@code double} value.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="TYPE" fulltype="java.lang.Class" type="Class">
				<comment>
					<description>The {@code Class} instance representing the primitive type
 {@code double}.</description>
					<attribute name="@since">
						<description>JDK1.1</description>
					</attribute>
				</comment>
			</field>
			<field final="true" visibility="private" name="value" fulltype="double" type="double">
				<comment>
					<description>The value of the Double.</description>
					<attribute name="@serial" />
				</comment>
			</field>
			<field final="true" static="true" const="-9172774392245257468" visibility="private" name="serialVersionUID" constexpr="-9172774392245257468L" fulltype="long" type="long">
				<comment>
					<description>use serialVersionUID from JDK 1.0.2 for interoperability</description>
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="public" name="Double">
				<comment>
					<description>Constructs a newly allocated {@code Double} object that
 represents the primitive {@code double} argument.</description>
					<attribute name="@param">
						<description>value   the value to be represented by the {@code Double}.</description>
					</attribute>
				</comment>
				<params>
					<param name="value" comment="the value to be represented by the {@code Double}." fulltype="double" type="double" />
				</params>
			</constructor>
			<constructor visibility="public" name="Double">
				<comment>
					<description>Constructs a newly allocated {@code Double} object that
 represents the floating-point value of type {@code double}
 represented by the string. The string is converted to a
 {@code double} value as if by the {@code valueOf} method.</description>
					<attribute name="@param">
						<description>s  a string to be converted to a {@code Double}.</description>
					</attribute>
					<attribute name="@throws">
						<description>NumberFormatException  if the string does not contain a
            parsable number.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Double#valueOf(java.lang.String)</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="a string to be converted to a {@code Double}." fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception comment="if the string does not contain a
            parsable number." fulltype="java.lang.NumberFormatException" type="NumberFormatException" />
				</exceptions>
			</constructor>
			<method static="true" visibility="public" name="toString" returncomment="a string representation of the argument." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a string representation of the {@code double}
 argument. All characters mentioned below are ASCII characters.
 &lt;ul&gt;
 &lt;li&gt;If the argument is NaN, the result is the string
     &quot;{@code NaN}&quot;.
 &lt;li&gt;Otherwise, the result is a string that represents the sign and
 magnitude (absolute value) of the argument. If the sign is negative,
 the first character of the result is &apos;{@code -}&apos;
 (&lt;code&gt;&apos;&amp;#92;u002D&apos;&lt;/code&gt;); if the sign is positive, no sign character
 appears in the result. As for the magnitude &lt;i&gt;m&lt;/i&gt;:
 &lt;ul&gt;
 &lt;li&gt;If &lt;i&gt;m&lt;/i&gt; is infinity, it is represented by the characters
 {@code &quot;Infinity&quot;}; thus, positive infinity produces the result
 {@code &quot;Infinity&quot;} and negative infinity produces the result
 {@code &quot;-Infinity&quot;}.

 &lt;li&gt;If &lt;i&gt;m&lt;/i&gt; is zero, it is represented by the characters
 {@code &quot;0.0&quot;}; thus, negative zero produces the result
 {@code &quot;-0.0&quot;} and positive zero produces the result
 {@code &quot;0.0&quot;}.

 &lt;li&gt;If &lt;i&gt;m&lt;/i&gt; is greater than or equal to 10&lt;sup&gt;-3&lt;/sup&gt; but less
 than 10&lt;sup&gt;7&lt;/sup&gt;, then it is represented as the integer part of
 &lt;i&gt;m&lt;/i&gt;, in decimal form with no leading zeroes, followed by
 &apos;{@code .}&apos; (&lt;code&gt;&apos;&amp;#92;u002E&apos;&lt;/code&gt;), followed by one or
 more decimal digits representing the fractional part of &lt;i&gt;m&lt;/i&gt;.

 &lt;li&gt;If &lt;i&gt;m&lt;/i&gt; is less than 10&lt;sup&gt;-3&lt;/sup&gt; or greater than or
 equal to 10&lt;sup&gt;7&lt;/sup&gt;, then it is represented in so-called
 &quot;computerized scientific notation.&quot; Let &lt;i&gt;n&lt;/i&gt; be the unique
 integer such that 10&lt;sup&gt;&lt;i&gt;n&lt;/i&gt;&lt;/sup&gt; &amp;le; &lt;i&gt;m&lt;/i&gt; {@literal &lt;}
 10&lt;sup&gt;&lt;i&gt;n&lt;/i&gt;+1&lt;/sup&gt;; then let &lt;i&gt;a&lt;/i&gt; be the
 mathematically exact quotient of &lt;i&gt;m&lt;/i&gt; and
 10&lt;sup&gt;&lt;i&gt;n&lt;/i&gt;&lt;/sup&gt; so that 1 &amp;le; &lt;i&gt;a&lt;/i&gt; {@literal &lt;} 10. The
 magnitude is then represented as the integer part of &lt;i&gt;a&lt;/i&gt;,
 as a single decimal digit, followed by &apos;{@code .}&apos;
 (&lt;code&gt;&apos;&amp;#92;u002E&apos;&lt;/code&gt;), followed by decimal digits
 representing the fractional part of &lt;i&gt;a&lt;/i&gt;, followed by the
 letter &apos;{@code E}&apos; (&lt;code&gt;&apos;&amp;#92;u0045&apos;&lt;/code&gt;), followed
 by a representation of &lt;i&gt;n&lt;/i&gt; as a decimal integer, as
 produced by the method {@link Integer#toString(int)}.
 &lt;/ul&gt;
 &lt;/ul&gt;
 How many digits must be printed for the fractional part of
 &lt;i&gt;m&lt;/i&gt; or &lt;i&gt;a&lt;/i&gt;? There must be at least one digit to represent
 the fractional part, and beyond that as many, but only as many, more
 digits as are needed to uniquely distinguish the argument value from
 adjacent values of type {@code double}. That is, suppose that
 &lt;i&gt;x&lt;/i&gt; is the exact mathematical value represented by the decimal
 representation produced by this method for a finite nonzero argument
 &lt;i&gt;d&lt;/i&gt;. Then &lt;i&gt;d&lt;/i&gt; must be the {@code double} value nearest
 to &lt;i&gt;x&lt;/i&gt;; or if two {@code double} values are equally close
 to &lt;i&gt;x&lt;/i&gt;, then &lt;i&gt;d&lt;/i&gt; must be one of them and the least
 significant bit of the significand of &lt;i&gt;d&lt;/i&gt; must be {@code 0}.

 &lt;p&gt;To create localized string representations of a floating-point
 value, use subclasses of {@link java.text.NumberFormat}.</description>
					<attribute name="@param">
						<description>d   the {@code double} to be converted.</description>
					</attribute>
					<attribute name="@return">
						<description>a string representation of the argument.</description>
					</attribute>
				</comment>
				<params>
					<param name="d" comment="the {@code double} to be converted." fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="toHexString" returncomment="a hex string representation of the argument." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a hexadecimal string representation of the
 {@code double} argument. All characters mentioned below
 are ASCII characters.

 &lt;ul&gt;
 &lt;li&gt;If the argument is NaN, the result is the string
     &quot;{@code NaN}&quot;.
 &lt;li&gt;Otherwise, the result is a string that represents the sign
 and magnitude of the argument. If the sign is negative, the
 first character of the result is &apos;{@code -}&apos;
 (&lt;code&gt;&apos;&amp;#92;u002D&apos;&lt;/code&gt;); if the sign is positive, no sign
 character appears in the result. As for the magnitude &lt;i&gt;m&lt;/i&gt;:

 &lt;ul&gt;
 &lt;li&gt;If &lt;i&gt;m&lt;/i&gt; is infinity, it is represented by the string
 {@code &quot;Infinity&quot;}; thus, positive infinity produces the
 result {@code &quot;Infinity&quot;} and negative infinity produces
 the result {@code &quot;-Infinity&quot;}.

 &lt;li&gt;If &lt;i&gt;m&lt;/i&gt; is zero, it is represented by the string
 {@code &quot;0x0.0p0&quot;}; thus, negative zero produces the result
 {@code &quot;-0x0.0p0&quot;} and positive zero produces the result
 {@code &quot;0x0.0p0&quot;}.

 &lt;li&gt;If &lt;i&gt;m&lt;/i&gt; is a {@code double} value with a
 normalized representation, substrings are used to represent the
 significand and exponent fields.  The significand is
 represented by the characters {@code &quot;0x1.&quot;}
 followed by a lowercase hexadecimal representation of the rest
 of the significand as a fraction.  Trailing zeros in the
 hexadecimal representation are removed unless all the digits
 are zero, in which case a single zero is used. Next, the
 exponent is represented by {@code &quot;p&quot;} followed
 by a decimal string of the unbiased exponent as if produced by
 a call to {@link Integer#toString(int) Integer.toString} on the
 exponent value.

 &lt;li&gt;If &lt;i&gt;m&lt;/i&gt; is a {@code double} value with a subnormal
 representation, the significand is represented by the
 characters {@code &quot;0x0.&quot;} followed by a
 hexadecimal representation of the rest of the significand as a
 fraction.  Trailing zeros in the hexadecimal representation are
 removed. Next, the exponent is represented by
 {@code &quot;p-1022&quot;}.  Note that there must be at
 least one nonzero digit in a subnormal significand.

 &lt;/ul&gt;

 &lt;/ul&gt;

 &lt;table border&gt;
 &lt;caption&gt;&lt;h3&gt;Examples&lt;/h3&gt;&lt;/caption&gt;
 &lt;tr&gt;&lt;th&gt;Floating-point Value&lt;/th&gt;&lt;th&gt;Hexadecimal String&lt;/th&gt;
 &lt;tr&gt;&lt;td&gt;{@code 1.0}&lt;/td&gt; &lt;td&gt;{@code 0x1.0p0}&lt;/td&gt;
 &lt;tr&gt;&lt;td&gt;{@code -1.0}&lt;/td&gt;        &lt;td&gt;{@code -0x1.0p0}&lt;/td&gt;
 &lt;tr&gt;&lt;td&gt;{@code 2.0}&lt;/td&gt; &lt;td&gt;{@code 0x1.0p1}&lt;/td&gt;
 &lt;tr&gt;&lt;td&gt;{@code 3.0}&lt;/td&gt; &lt;td&gt;{@code 0x1.8p1}&lt;/td&gt;
 &lt;tr&gt;&lt;td&gt;{@code 0.5}&lt;/td&gt; &lt;td&gt;{@code 0x1.0p-1}&lt;/td&gt;
 &lt;tr&gt;&lt;td&gt;{@code 0.25}&lt;/td&gt;        &lt;td&gt;{@code 0x1.0p-2}&lt;/td&gt;
 &lt;tr&gt;&lt;td&gt;{@code Double.MAX_VALUE}&lt;/td&gt;
     &lt;td&gt;{@code 0x1.fffffffffffffp1023}&lt;/td&gt;
 &lt;tr&gt;&lt;td&gt;{@code Minimum Normal Value}&lt;/td&gt;
     &lt;td&gt;{@code 0x1.0p-1022}&lt;/td&gt;
 &lt;tr&gt;&lt;td&gt;{@code Maximum Subnormal Value}&lt;/td&gt;
     &lt;td&gt;{@code 0x0.fffffffffffffp-1022}&lt;/td&gt;
 &lt;tr&gt;&lt;td&gt;{@code Double.MIN_VALUE}&lt;/td&gt;
     &lt;td&gt;{@code 0x0.0000000000001p-1022}&lt;/td&gt;
 &lt;/table&gt;</description>
					<attribute name="@param">
						<description>d   the {@code double} to be converted.</description>
					</attribute>
					<attribute name="@return">
						<description>a hex string representation of the argument.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
					<attribute name="@author">
						<description>Joseph D. Darcy</description>
					</attribute>
				</comment>
				<params>
					<param name="d" comment="the {@code double} to be converted." fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="valueOf" returncomment="a {@code Double} object holding the value
             represented by the {@code String} argument." fulltype="java.lang.Double" type="Double">
				<comment>
					<description>Returns a {@code Double} object holding the
 {@code double} value represented by the argument string
 {@code s}.

 &lt;p&gt;If {@code s} is {@code null}, then a
 {@code NullPointerException} is thrown.

 &lt;p&gt;Leading and trailing whitespace characters in {@code s}
 are ignored.  Whitespace is removed as if by the {@link
 String#trim} method; that is, both ASCII space and control
 characters are removed. The rest of {@code s} should
 constitute a &lt;i&gt;FloatValue&lt;/i&gt; as described by the lexical
 syntax rules:

 &lt;blockquote&gt;
 &lt;dl&gt;
 &lt;dt&gt;&lt;i&gt;FloatValue:&lt;/i&gt;
 &lt;dd&gt;&lt;i&gt;Sign&lt;sub&gt;opt&lt;/sub&gt;&lt;/i&gt; {@code NaN}
 &lt;dd&gt;&lt;i&gt;Sign&lt;sub&gt;opt&lt;/sub&gt;&lt;/i&gt; {@code Infinity}
 &lt;dd&gt;&lt;i&gt;Sign&lt;sub&gt;opt&lt;/sub&gt; FloatingPointLiteral&lt;/i&gt;
 &lt;dd&gt;&lt;i&gt;Sign&lt;sub&gt;opt&lt;/sub&gt; HexFloatingPointLiteral&lt;/i&gt;
 &lt;dd&gt;&lt;i&gt;SignedInteger&lt;/i&gt;
 &lt;/dl&gt;

 &lt;p&gt;

 &lt;dl&gt;
 &lt;dt&gt;&lt;i&gt;HexFloatingPointLiteral&lt;/i&gt;:
 &lt;dd&gt; &lt;i&gt;HexSignificand BinaryExponent FloatTypeSuffix&lt;sub&gt;opt&lt;/sub&gt;&lt;/i&gt;
 &lt;/dl&gt;

 &lt;p&gt;

 &lt;dl&gt;
 &lt;dt&gt;&lt;i&gt;HexSignificand:&lt;/i&gt;
 &lt;dd&gt;&lt;i&gt;HexNumeral&lt;/i&gt;
 &lt;dd&gt;&lt;i&gt;HexNumeral&lt;/i&gt; {@code .}
 &lt;dd&gt;{@code 0x} &lt;i&gt;HexDigits&lt;sub&gt;opt&lt;/sub&gt;
     &lt;/i&gt;{@code .}&lt;i&gt; HexDigits&lt;/i&gt;
 &lt;dd&gt;{@code 0X}&lt;i&gt; HexDigits&lt;sub&gt;opt&lt;/sub&gt;
     &lt;/i&gt;{@code .} &lt;i&gt;HexDigits&lt;/i&gt;
 &lt;/dl&gt;

 &lt;p&gt;

 &lt;dl&gt;
 &lt;dt&gt;&lt;i&gt;BinaryExponent:&lt;/i&gt;
 &lt;dd&gt;&lt;i&gt;BinaryExponentIndicator SignedInteger&lt;/i&gt;
 &lt;/dl&gt;

 &lt;p&gt;

 &lt;dl&gt;
 &lt;dt&gt;&lt;i&gt;BinaryExponentIndicator:&lt;/i&gt;
 &lt;dd&gt;{@code p}
 &lt;dd&gt;{@code P}
 &lt;/dl&gt;

 &lt;/blockquote&gt;

 where &lt;i&gt;Sign&lt;/i&gt;, &lt;i&gt;FloatingPointLiteral&lt;/i&gt;,
 &lt;i&gt;HexNumeral&lt;/i&gt;, &lt;i&gt;HexDigits&lt;/i&gt;, &lt;i&gt;SignedInteger&lt;/i&gt; and
 &lt;i&gt;FloatTypeSuffix&lt;/i&gt; are as defined in the lexical structure
 sections of the &lt;a
 href=&quot;http://java.sun.com/docs/books/jls/html/&quot;&gt;Java Language
 Specification&lt;/a&gt;. If {@code s} does not have the form of
 a &lt;i&gt;FloatValue&lt;/i&gt;, then a {@code NumberFormatException}
 is thrown. Otherwise, {@code s} is regarded as
 representing an exact decimal value in the usual
 &quot;computerized scientific notation&quot; or as an exact
 hexadecimal value; this exact numerical value is then
 conceptually converted to an &quot;infinitely precise&quot;
 binary value that is then rounded to type {@code double}
 by the usual round-to-nearest rule of IEEE 754 floating-point
 arithmetic, which includes preserving the sign of a zero
 value. Finally, a {@code Double} object representing this
 {@code double} value is returned.

 &lt;p&gt; To interpret localized string representations of a
 floating-point value, use subclasses of {@link
 java.text.NumberFormat}.

 &lt;p&gt;Note that trailing format specifiers, specifiers that
 determine the type of a floating-point literal
 ({@code 1.0f} is a {@code float} value;
 {@code 1.0d} is a {@code double} value), do
 &lt;em&gt;not&lt;/em&gt; influence the results of this method.  In other
 words, the numerical value of the input string is converted
 directly to the target floating-point type.  The two-step
 sequence of conversions, string to {@code float} followed
 by {@code float} to {@code double}, is &lt;em&gt;not&lt;/em&gt;
 equivalent to converting a string directly to
 {@code double}. For example, the {@code float}
 literal {@code 0.1f} is equal to the {@code double}
 value {@code 0.10000000149011612}; the {@code float}
 literal {@code 0.1f} represents a different numerical
 value than the {@code double} literal
 {@code 0.1}. (The numerical value 0.1 cannot be exactly
 represented in a binary floating-point number.)

 &lt;p&gt;To avoid calling this method on an invalid string and having
 a {@code NumberFormatException} be thrown, the regular
 expression below can be used to screen the input string:

 &lt;code&gt;
 &lt;pre&gt;
  final String Digits     = &quot;(\\p{Digit}+)&quot;;
  final String HexDigits  = &quot;(\\p{XDigit}+)&quot;;
  // an exponent is &apos;e&apos; or &apos;E&apos; followed by an optionally
  // signed decimal integer.
  final String Exp        = &quot;[eE][+-]?&quot;+Digits;
  final String fpRegex    =
      (&quot;[\\x00-\\x20]*&quot;+  // Optional leading &quot;whitespace&quot;
       &quot;[+-]?(&quot; + // Optional sign character
       &quot;NaN|&quot; +           // &quot;NaN&quot; string
       &quot;Infinity|&quot; +      // &quot;Infinity&quot; string

       // A decimal floating-point string representing a finite positive
       // number without a leading sign has at most five basic pieces:
       // Digits . Digits ExponentPart FloatTypeSuffix
       //
       // Since this method allows integer-only strings as input
       // in addition to strings of floating-point literals, the
       // two sub-patterns below are simplifications of the grammar
       // productions from the Java Language Specification, 2nd
       // edition, section 3.10.2.

       // Digits ._opt Digits_opt ExponentPart_opt FloatTypeSuffix_opt
       &quot;(((&quot;+Digits+&quot;(\\.)?(&quot;+Digits+&quot;?)(&quot;+Exp+&quot;)?)|&quot;+

       // . Digits ExponentPart_opt FloatTypeSuffix_opt
       &quot;(\\.(&quot;+Digits+&quot;)(&quot;+Exp+&quot;)?)|&quot;+

       // Hexadecimal strings
       &quot;((&quot; +
        // 0[xX] HexDigits ._opt BinaryExponent FloatTypeSuffix_opt
        &quot;(0[xX]&quot; + HexDigits + &quot;(\\.)?)|&quot; +

        // 0[xX] HexDigits_opt . HexDigits BinaryExponent FloatTypeSuffix_opt
        &quot;(0[xX]&quot; + HexDigits + &quot;?(\\.)&quot; + HexDigits + &quot;)&quot; +

        &quot;)[pP][+-]?&quot; + Digits + &quot;))&quot; +
       &quot;[fFdD]?))&quot; +
       &quot;[\\x00-\\x20]*&quot;);// Optional trailing &quot;whitespace&quot;

  if (Pattern.matches(fpRegex, myString))
      Double.valueOf(myString); // Will not throw NumberFormatException
  else {
      // Perform suitable alternative action
  }
 &lt;/pre&gt;
 &lt;/code&gt;</description>
					<attribute name="@param">
						<description>s   the string to be parsed.</description>
					</attribute>
					<attribute name="@return">
						<description>a {@code Double} object holding the value
             represented by the {@code String} argument.</description>
					</attribute>
					<attribute name="@throws">
						<description>NumberFormatException  if the string does not contain a
             parsable number.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the string to be parsed." fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception comment="if the string does not contain a
             parsable number." fulltype="java.lang.NumberFormatException" type="NumberFormatException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="valueOf" returncomment="a {@code Double} instance representing {@code d}." fulltype="java.lang.Double" type="Double">
				<comment>
					<description>Returns a {@code Double} instance representing the specified
 {@code double} value.
 If a new {@code Double} instance is not required, this method
 should generally be used in preference to the constructor
 {@link #Double(double)}, as this method is likely to yield
 significantly better space and time performance by caching
 frequently requested values.</description>
					<attribute name="@param">
						<description>d a double value.</description>
					</attribute>
					<attribute name="@return">
						<description>a {@code Double} instance representing {@code d}.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="d" comment="a double value." fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="parseDouble" returncomment="the {@code double} value represented by the string
         argument." fulltype="double" type="double">
				<comment>
					<description>Returns a new {@code double} initialized to the value
 represented by the specified {@code String}, as performed
 by the {@code valueOf} method of class
 {@code Double}.</description>
					<attribute name="@param">
						<description>s   the string to be parsed.</description>
					</attribute>
					<attribute name="@return">
						<description>the {@code double} value represented by the string
         argument.</description>
					</attribute>
					<attribute name="@throws">
						<description>NumberFormatException if the string does not contain
         a parsable {@code double}.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Double#valueOf(String)</description>
					</attribute>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the string to be parsed." fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception comment="if the string does not contain
         a parsable {@code double}." fulltype="java.lang.NumberFormatException" type="NumberFormatException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="isNaN" returncomment="{@code true} if the value of the argument is NaN;
          {@code false} otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Returns {@code true} if the specified number is a
 Not-a-Number (NaN) value, {@code false} otherwise.</description>
					<attribute name="@param">
						<description>v   the value to be tested.</description>
					</attribute>
					<attribute name="@return">
						<description>{@code true} if the value of the argument is NaN;
          {@code false} otherwise.</description>
					</attribute>
				</comment>
				<params>
					<param name="v" comment="the value to be tested." fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="isInfinite" returncomment="{@code true} if the value of the argument is positive
          infinity or negative infinity; {@code false} otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Returns {@code true} if the specified number is infinitely
 large in magnitude, {@code false} otherwise.</description>
					<attribute name="@param">
						<description>v   the value to be tested.</description>
					</attribute>
					<attribute name="@return">
						<description>{@code true} if the value of the argument is positive
          infinity or negative infinity; {@code false} otherwise.</description>
					</attribute>
				</comment>
				<params>
					<param name="v" comment="the value to be tested." fulltype="double" type="double" />
				</params>
			</method>
			<method visibility="public" name="isNaN" returncomment="{@code true} if the value represented by this object is
          NaN; {@code false} otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Returns {@code true} if this {@code Double} value is
 a Not-a-Number (NaN), {@code false} otherwise.</description>
					<attribute name="@return">
						<description>{@code true} if the value represented by this object is
          NaN; {@code false} otherwise.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="isInfinite" returncomment="{@code true} if the value represented by this object is
          positive infinity or negative infinity;
          {@code false} otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Returns {@code true} if this {@code Double} value is
 infinitely large in magnitude, {@code false} otherwise.</description>
					<attribute name="@return">
						<description>{@code true} if the value represented by this object is
          positive infinity or negative infinity;
          {@code false} otherwise.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="toString" returncomment="a {@code String} representation of this object." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a string representation of this {@code Double} object.
 The primitive {@code double} value represented by this
 object is converted to a string exactly as if by the method
 {@code toString} of one argument.</description>
					<attribute name="@return">
						<description>a {@code String} representation of this object.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Double#toString(double)</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="byteValue" returncomment="the {@code double} value represented by this object
          converted to type {@code byte}" fulltype="byte" type="byte">
				<comment>
					<description>Returns the value of this {@code Double} as a {@code byte} (by
 casting to a {@code byte}).</description>
					<attribute name="@return">
						<description>the {@code double} value represented by this object
          converted to type {@code byte}</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="shortValue" returncomment="the {@code double} value represented by this object
          converted to type {@code short}" fulltype="short" type="short">
				<comment>
					<description>Returns the value of this {@code Double} as a
 {@code short} (by casting to a {@code short}).</description>
					<attribute name="@return">
						<description>the {@code double} value represented by this object
          converted to type {@code short}</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="intValue" returncomment="the {@code double} value represented by this object
          converted to type {@code int}" fulltype="int" type="int">
				<comment>
					<description>Returns the value of this {@code Double} as an
 {@code int} (by casting to type {@code int}).</description>
					<attribute name="@return">
						<description>the {@code double} value represented by this object
          converted to type {@code int}</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="longValue" returncomment="the {@code double} value represented by this object
          converted to type {@code long}" fulltype="long" type="long">
				<comment>
					<description>Returns the value of this {@code Double} as a
 {@code long} (by casting to type {@code long}).</description>
					<attribute name="@return">
						<description>the {@code double} value represented by this object
          converted to type {@code long}</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="floatValue" returncomment="the {@code double} value represented by this object
          converted to type {@code float}" fulltype="float" type="float">
				<comment>
					<description>Returns the {@code float} value of this
 {@code Double} object.</description>
					<attribute name="@return">
						<description>the {@code double} value represented by this object
          converted to type {@code float}</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.0</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="doubleValue" returncomment="the {@code double} value represented by this object" fulltype="double" type="double">
				<comment>
					<description>Returns the {@code double} value of this
 {@code Double} object.</description>
					<attribute name="@return">
						<description>the {@code double} value represented by this object</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="hashCode" returncomment="a {@code hash code} value for this object." fulltype="int" type="int">
				<comment>
					<description>Returns a hash code for this {@code Double} object. The
 result is the exclusive OR of the two halves of the
 {@code long} integer bit representation, exactly as
 produced by the method {@link #doubleToLongBits(double)}, of
 the primitive {@code double} value represented by this
 {@code Double} object. That is, the hash code is the value
 of the expression:

 &lt;blockquote&gt;
  {@code (int)(v^(v&gt;&gt;&gt;32))}
 &lt;/blockquote&gt;

 where {@code v} is defined by:

 &lt;blockquote&gt;
  {@code long v = Double.doubleToLongBits(this.doubleValue());}
 &lt;/blockquote&gt;</description>
					<attribute name="@return">
						<description>a {@code hash code} value for this object.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="equals" returncomment="{@code true} if the objects are the same;
          {@code false} otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Compares this object against the specified object.  The result
 is {@code true} if and only if the argument is not
 {@code null} and is a {@code Double} object that
 represents a {@code double} that has the same value as the
 {@code double} represented by this object. For this
 purpose, two {@code double} values are considered to be
 the same if and only if the method {@link
 #doubleToLongBits(double)} returns the identical
 {@code long} value when applied to each.

 &lt;p&gt;Note that in most cases, for two instances of class
 {@code Double}, {@code d1} and {@code d2}, the
 value of {@code d1.equals(d2)} is {@code true} if and
 only if

 &lt;blockquote&gt;
  {@code d1.doubleValue() == d2.doubleValue()}
 &lt;/blockquote&gt;

 &lt;p&gt;also has the value {@code true}. However, there are two
 exceptions:
 &lt;ul&gt;
 &lt;li&gt;If {@code d1} and {@code d2} both represent
     {@code Double.NaN}, then the {@code equals} method
     returns {@code true}, even though
     {@code Double.NaN==Double.NaN} has the value
     {@code false}.
 &lt;li&gt;If {@code d1} represents {@code +0.0} while
     {@code d2} represents {@code -0.0}, or vice versa,
     the {@code equal} test has the value {@code false},
     even though {@code +0.0==-0.0} has the value {@code true}.
 &lt;/ul&gt;
 This definition allows hash tables to operate properly.</description>
					<attribute name="@param">
						<description>obj   the object to compare with.</description>
					</attribute>
					<attribute name="@return">
						<description>{@code true} if the objects are the same;
          {@code false} otherwise.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Double#doubleToLongBits(double)</description>
					</attribute>
				</comment>
				<params>
					<param name="obj" comment="the object to compare with." fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method static="true" visibility="public" name="doubleToLongBits" returncomment="the bits that represent the floating-point number." fulltype="long" type="long">
				<comment>
					<description>Returns a representation of the specified floating-point value
 according to the IEEE 754 floating-point &quot;double
 format&quot; bit layout.

 &lt;p&gt;Bit 63 (the bit that is selected by the mask
 {@code 0x8000000000000000L}) represents the sign of the
 floating-point number. Bits
 62-52 (the bits that are selected by the mask
 {@code 0x7ff0000000000000L}) represent the exponent. Bits 51-0
 (the bits that are selected by the mask
 {@code 0x000fffffffffffffL}) represent the significand
 (sometimes called the mantissa) of the floating-point number.

 &lt;p&gt;If the argument is positive infinity, the result is
 {@code 0x7ff0000000000000L}.

 &lt;p&gt;If the argument is negative infinity, the result is
 {@code 0xfff0000000000000L}.

 &lt;p&gt;If the argument is NaN, the result is
 {@code 0x7ff8000000000000L}.

 &lt;p&gt;In all cases, the result is a {@code long} integer that, when
 given to the {@link #longBitsToDouble(long)} method, will produce a
 floating-point value the same as the argument to
 {@code doubleToLongBits} (except all NaN values are
 collapsed to a single &quot;canonical&quot; NaN value).</description>
					<attribute name="@param">
						<description>value   a {@code double} precision floating-point number.</description>
					</attribute>
					<attribute name="@return">
						<description>the bits that represent the floating-point number.</description>
					</attribute>
				</comment>
				<params>
					<param name="value" comment="a {@code double} precision floating-point number." fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="doubleToRawLongBits" returncomment="the bits that represent the floating-point number." fulltype="long" type="long">
				<comment>
					<description>Returns a representation of the specified floating-point value
 according to the IEEE 754 floating-point &quot;double
 format&quot; bit layout, preserving Not-a-Number (NaN) values.

 &lt;p&gt;Bit 63 (the bit that is selected by the mask
 {@code 0x8000000000000000L}) represents the sign of the
 floating-point number. Bits
 62-52 (the bits that are selected by the mask
 {@code 0x7ff0000000000000L}) represent the exponent. Bits 51-0
 (the bits that are selected by the mask
 {@code 0x000fffffffffffffL}) represent the significand
 (sometimes called the mantissa) of the floating-point number.

 &lt;p&gt;If the argument is positive infinity, the result is
 {@code 0x7ff0000000000000L}.

 &lt;p&gt;If the argument is negative infinity, the result is
 {@code 0xfff0000000000000L}.

 &lt;p&gt;If the argument is NaN, the result is the {@code long}
 integer representing the actual NaN value.  Unlike the
 {@code doubleToLongBits} method,
 {@code doubleToRawLongBits} does not collapse all the bit
 patterns encoding a NaN to a single &quot;canonical&quot; NaN
 value.

 &lt;p&gt;In all cases, the result is a {@code long} integer that,
 when given to the {@link #longBitsToDouble(long)} method, will
 produce a floating-point value the same as the argument to
 {@code doubleToRawLongBits}.</description>
					<attribute name="@param">
						<description>value   a {@code double} precision floating-point number.</description>
					</attribute>
					<attribute name="@return">
						<description>the bits that represent the floating-point number.</description>
					</attribute>
					<attribute name="@since">
						<description>1.3</description>
					</attribute>
				</comment>
				<params>
					<param name="value" comment="a {@code double} precision floating-point number." fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="longBitsToDouble" returncomment="the {@code double} floating-point value with the same
          bit pattern." fulltype="double" type="double">
				<comment>
					<description>Returns the {@code double} value corresponding to a given
 bit representation.
 The argument is considered to be a representation of a
 floating-point value according to the IEEE 754 floating-point
 &quot;double format&quot; bit layout.

 &lt;p&gt;If the argument is {@code 0x7ff0000000000000L}, the result
 is positive infinity.

 &lt;p&gt;If the argument is {@code 0xfff0000000000000L}, the result
 is negative infinity.

 &lt;p&gt;If the argument is any value in the range
 {@code 0x7ff0000000000001L} through
 {@code 0x7fffffffffffffffL} or in the range
 {@code 0xfff0000000000001L} through
 {@code 0xffffffffffffffffL}, the result is a NaN.  No IEEE
 754 floating-point operation provided by Java can distinguish
 between two NaN values of the same type with different bit
 patterns.  Distinct values of NaN are only distinguishable by
 use of the {@code Double.doubleToRawLongBits} method.

 &lt;p&gt;In all other cases, let &lt;i&gt;s&lt;/i&gt;, &lt;i&gt;e&lt;/i&gt;, and &lt;i&gt;m&lt;/i&gt; be three
 values that can be computed from the argument:

 &lt;blockquote&gt;&lt;pre&gt;
 int s = ((bits &amp;gt;&amp;gt; 63) == 0) ? 1 : -1;
 int e = (int)((bits &amp;gt;&amp;gt; 52) &amp; 0x7ffL);
 long m = (e == 0) ?
                 (bits &amp; 0xfffffffffffffL) &amp;lt;&amp;lt; 1 :
                 (bits &amp; 0xfffffffffffffL) | 0x10000000000000L;
 &lt;/pre&gt;&lt;/blockquote&gt;

 Then the floating-point result equals the value of the mathematical
 expression &lt;i&gt;s&lt;/i&gt;&amp;middot;&lt;i&gt;m&lt;/i&gt;&amp;middot;2&lt;sup&gt;&lt;i&gt;e&lt;/i&gt;-1075&lt;/sup&gt;.

 &lt;p&gt;Note that this method may not be able to return a
 {@code double} NaN with exactly same bit pattern as the
 {@code long} argument.  IEEE 754 distinguishes between two
 kinds of NaNs, quiet NaNs and &lt;i&gt;signaling NaNs&lt;/i&gt;.  The
 differences between the two kinds of NaN are generally not
 visible in Java.  Arithmetic operations on signaling NaNs turn
 them into quiet NaNs with a different, but often similar, bit
 pattern.  However, on some processors merely copying a
 signaling NaN also performs that conversion.  In particular,
 copying a signaling NaN to return it to the calling method
 may perform this conversion.  So {@code longBitsToDouble}
 may not be able to return a {@code double} with a
 signaling NaN bit pattern.  Consequently, for some
 {@code long} values,
 {@code doubleToRawLongBits(longBitsToDouble(start))} may
 &lt;i&gt;not&lt;/i&gt; equal {@code start}.  Moreover, which
 particular bit patterns represent signaling NaNs is platform
 dependent; although all NaN bit patterns, quiet or signaling,
 must be in the NaN range identified above.</description>
					<attribute name="@param">
						<description>bits   any {@code long} integer.</description>
					</attribute>
					<attribute name="@return">
						<description>the {@code double} floating-point value with the same
          bit pattern.</description>
					</attribute>
				</comment>
				<params>
					<param name="bits" comment="any {@code long} integer." fulltype="long" type="long" />
				</params>
			</method>
			<method visibility="public" name="compareTo" returncomment="the value {@code 0} if {@code anotherDouble} is
          numerically equal to this {@code Double}; a value
          less than {@code 0} if this {@code Double}
          is numerically less than {@code anotherDouble};
          and a value greater than {@code 0} if this
          {@code Double} is numerically greater than
          {@code anotherDouble}." fulltype="int" type="int">
				<comment>
					<description>Compares two {@code Double} objects numerically.  There
 are two ways in which comparisons performed by this method
 differ from those performed by the Java language numerical
 comparison operators ({@code &lt;, &lt;=, ==, &gt;=, &gt;})
 when applied to primitive {@code double} values:
 &lt;ul&gt;&lt;li&gt;
          {@code Double.NaN} is considered by this method
          to be equal to itself and greater than all other
          {@code double} values (including
          {@code Double.POSITIVE_INFINITY}).
 &lt;li&gt;
          {@code 0.0d} is considered by this method to be greater
          than {@code -0.0d}.
 &lt;/ul&gt;
 This ensures that the &lt;i&gt;natural ordering&lt;/i&gt; of
 {@code Double} objects imposed by this method is &lt;i&gt;consistent
 with equals&lt;/i&gt;.</description>
					<attribute name="@param">
						<description>anotherDouble   the {@code Double} to be compared.</description>
					</attribute>
					<attribute name="@return">
						<description>the value {@code 0} if {@code anotherDouble} is
          numerically equal to this {@code Double}; a value
          less than {@code 0} if this {@code Double}
          is numerically less than {@code anotherDouble};
          and a value greater than {@code 0} if this
          {@code Double} is numerically greater than
          {@code anotherDouble}.</description>
					</attribute>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
				<params>
					<param name="anotherDouble" comment="the {@code Double} to be compared." fulltype="java.lang.Double" type="Double" />
				</params>
			</method>
			<method static="true" visibility="public" name="compare" returncomment="the value {@code 0} if {@code d1} is
          numerically equal to {@code d2}; a value less than
          {@code 0} if {@code d1} is numerically less than
          {@code d2}; and a value greater than {@code 0}
          if {@code d1} is numerically greater than
          {@code d2}." fulltype="int" type="int">
				<comment>
					<description>Compares the two specified {@code double} values. The sign
 of the integer value returned is the same as that of the
 integer that would be returned by the call:
 &lt;pre&gt;
    new Double(d1).compareTo(new Double(d2))
 &lt;/pre&gt;</description>
					<attribute name="@param">
						<description>d1        the first {@code double} to compare</description>
					</attribute>
					<attribute name="@param">
						<description>d2        the second {@code double} to compare</description>
					</attribute>
					<attribute name="@return">
						<description>the value {@code 0} if {@code d1} is
          numerically equal to {@code d2}; a value less than
          {@code 0} if {@code d1} is numerically less than
          {@code d2}; and a value greater than {@code 0}
          if {@code d1} is numerically greater than
          {@code d2}.</description>
					</attribute>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
				<params>
					<param name="d1" comment="the first {@code double} to compare" fulltype="double" type="double" />
					<param name="d2" comment="the second {@code double} to compare" fulltype="double" type="double" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass final="true" superclass="Object" visibility="public" package="java.lang" superclassfulltype="java.lang.Object" fulltype="java.lang.Math" type="Math">
		<comment>
			<description>The class {@code Math} contains methods for performing basic
 numeric operations such as the elementary exponential, logarithm,
 square root, and trigonometric functions.

 &lt;p&gt;Unlike some of the numeric methods of class
 {@code StrictMath}, all implementations of the equivalent
 functions of class {@code Math} are not defined to return the
 bit-for-bit same results.  This relaxation permits
 better-performing implementations where strict reproducibility is
 not required.

 &lt;p&gt;By default many of the {@code Math} methods simply call
 the equivalent method in {@code StrictMath} for their
 implementation.  Code generators are encouraged to use
 platform-specific native libraries or microprocessor instructions,
 where available, to provide higher-performance implementations of
 {@code Math} methods.  Such higher-performance
 implementations still must conform to the specification for
 {@code Math}.

 &lt;p&gt;The quality of implementation specifications concern two
 properties, accuracy of the returned result and monotonicity of the
 method.  Accuracy of the floating-point {@code Math} methods
 is measured in terms of &lt;i&gt;ulps&lt;/i&gt;, units in the last place.  For
 a given floating-point format, an ulp of a specific real number
 value is the distance between the two floating-point values
 bracketing that numerical value.  When discussing the accuracy of a
 method as a whole rather than at a specific argument, the number of
 ulps cited is for the worst-case error at any argument.  If a
 method always has an error less than 0.5 ulps, the method always
 returns the floating-point number nearest the exact result; such a
 method is &lt;i&gt;correctly rounded&lt;/i&gt;.  A correctly rounded method is
 generally the best a floating-point approximation can be; however,
 it is impractical for many floating-point methods to be correctly
 rounded.  Instead, for the {@code Math} class, a larger error
 bound of 1 or 2 ulps is allowed for certain methods.  Informally,
 with a 1 ulp error bound, when the exact result is a representable
 number, the exact result should be returned as the computed result;
 otherwise, either of the two floating-point values which bracket
 the exact result may be returned.  For exact results large in
 magnitude, one of the endpoints of the bracket may be infinite.
 Besides accuracy at individual arguments, maintaining proper
 relations between the method at different arguments is also
 important.  Therefore, most methods with more than 0.5 ulp errors
 are required to be &lt;i&gt;semi-monotonic&lt;/i&gt;: whenever the mathematical
 function is non-decreasing, so is the floating-point approximation,
 likewise, whenever the mathematical function is non-increasing, so
 is the floating-point approximation.  Not all approximations that
 have 1 ulp accuracy will automatically meet the monotonicity
 requirements.</description>
			<attribute name="@author">
				<description>unascribed</description>
			</attribute>
			<attribute name="@author">
				<description>Joseph D. Darcy</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.0</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="2.718281828459045" visibility="public" name="E" constexpr="2.718281828459045" fulltype="double" type="double">
				<comment>
					<description>The {@code double} value that is closer than any other to
 &lt;i&gt;e&lt;/i&gt;, the base of the natural logarithms.</description>
				</comment>
			</field>
			<field final="true" static="true" const="3.141592653589793" visibility="public" name="PI" constexpr="3.141592653589793" fulltype="double" type="double">
				<comment>
					<description>The {@code double} value that is closer than any other to
 &lt;i&gt;pi&lt;/i&gt;, the ratio of the circumference of a circle to its
 diameter.</description>
				</comment>
			</field>
			<field static="true" visibility="private" name="randomNumberGenerator" fulltype="java.util.Random" type="Random" />
			<field static="true" visibility="private" name="negativeZeroFloatBits" fulltype="long" type="long" />
			<field static="true" visibility="private" name="negativeZeroDoubleBits" fulltype="long" type="long" />
		</fields>
		<methods>
			<constructor visibility="private" name="Math">
				<comment>
					<description>Don&apos;t let anyone instantiate this class.</description>
				</comment>
			</constructor>
			<method static="true" visibility="public" name="sin" returncomment="the sine of the argument." fulltype="double" type="double">
				<comment>
					<description>Returns the trigonometric sine of an angle.  Special cases:
 &lt;ul&gt;&lt;li&gt;If the argument is NaN or an infinity, then the
 result is NaN.
 &lt;li&gt;If the argument is zero, then the result is a zero with the
 same sign as the argument.&lt;/ul&gt;

 &lt;p&gt;The computed result must be within 1 ulp of the exact result.
 Results must be semi-monotonic.</description>
					<attribute name="@param">
						<description>a   an angle, in radians.</description>
					</attribute>
					<attribute name="@return">
						<description>the sine of the argument.</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="an angle, in radians." fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="cos" returncomment="the cosine of the argument." fulltype="double" type="double">
				<comment>
					<description>Returns the trigonometric cosine of an angle. Special cases:
 &lt;ul&gt;&lt;li&gt;If the argument is NaN or an infinity, then the
 result is NaN.&lt;/ul&gt;

 &lt;p&gt;The computed result must be within 1 ulp of the exact result.
 Results must be semi-monotonic.</description>
					<attribute name="@param">
						<description>a   an angle, in radians.</description>
					</attribute>
					<attribute name="@return">
						<description>the cosine of the argument.</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="an angle, in radians." fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="tan" returncomment="the tangent of the argument." fulltype="double" type="double">
				<comment>
					<description>Returns the trigonometric tangent of an angle.  Special cases:
 &lt;ul&gt;&lt;li&gt;If the argument is NaN or an infinity, then the result
 is NaN.
 &lt;li&gt;If the argument is zero, then the result is a zero with the
 same sign as the argument.&lt;/ul&gt;

 &lt;p&gt;The computed result must be within 1 ulp of the exact result.
 Results must be semi-monotonic.</description>
					<attribute name="@param">
						<description>a   an angle, in radians.</description>
					</attribute>
					<attribute name="@return">
						<description>the tangent of the argument.</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="an angle, in radians." fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="asin" returncomment="the arc sine of the argument." fulltype="double" type="double">
				<comment>
					<description>Returns the arc sine of a value; the returned angle is in the
 range -&lt;i&gt;pi&lt;/i&gt;/2 through &lt;i&gt;pi&lt;/i&gt;/2.  Special cases:
 &lt;ul&gt;&lt;li&gt;If the argument is NaN or its absolute value is greater
 than 1, then the result is NaN.
 &lt;li&gt;If the argument is zero, then the result is a zero with the
 same sign as the argument.&lt;/ul&gt;

 &lt;p&gt;The computed result must be within 1 ulp of the exact result.
 Results must be semi-monotonic.</description>
					<attribute name="@param">
						<description>a   the value whose arc sine is to be returned.</description>
					</attribute>
					<attribute name="@return">
						<description>the arc sine of the argument.</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="the value whose arc sine is to be returned." fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="acos" returncomment="the arc cosine of the argument." fulltype="double" type="double">
				<comment>
					<description>Returns the arc cosine of a value; the returned angle is in the
 range 0.0 through &lt;i&gt;pi&lt;/i&gt;.  Special case:
 &lt;ul&gt;&lt;li&gt;If the argument is NaN or its absolute value is greater
 than 1, then the result is NaN.&lt;/ul&gt;

 &lt;p&gt;The computed result must be within 1 ulp of the exact result.
 Results must be semi-monotonic.</description>
					<attribute name="@param">
						<description>a   the value whose arc cosine is to be returned.</description>
					</attribute>
					<attribute name="@return">
						<description>the arc cosine of the argument.</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="the value whose arc cosine is to be returned." fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="atan" returncomment="the arc tangent of the argument." fulltype="double" type="double">
				<comment>
					<description>Returns the arc tangent of a value; the returned angle is in the
 range -&lt;i&gt;pi&lt;/i&gt;/2 through &lt;i&gt;pi&lt;/i&gt;/2.  Special cases:
 &lt;ul&gt;&lt;li&gt;If the argument is NaN, then the result is NaN.
 &lt;li&gt;If the argument is zero, then the result is a zero with the
 same sign as the argument.&lt;/ul&gt;

 &lt;p&gt;The computed result must be within 1 ulp of the exact result.
 Results must be semi-monotonic.</description>
					<attribute name="@param">
						<description>a   the value whose arc tangent is to be returned.</description>
					</attribute>
					<attribute name="@return">
						<description>the arc tangent of the argument.</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="the value whose arc tangent is to be returned." fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="toRadians" returncomment="the measurement of the angle {@code angdeg}
          in radians." fulltype="double" type="double">
				<comment>
					<description>Converts an angle measured in degrees to an approximately
 equivalent angle measured in radians.  The conversion from
 degrees to radians is generally inexact.</description>
					<attribute name="@param">
						<description>angdeg   an angle, in degrees</description>
					</attribute>
					<attribute name="@return">
						<description>the measurement of the angle {@code angdeg}
          in radians.</description>
					</attribute>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
				<params>
					<param name="angdeg" comment="an angle, in degrees" fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="toDegrees" returncomment="the measurement of the angle {@code angrad}
          in degrees." fulltype="double" type="double">
				<comment>
					<description>Converts an angle measured in radians to an approximately
 equivalent angle measured in degrees.  The conversion from
 radians to degrees is generally inexact; users should
 &lt;i&gt;not&lt;/i&gt; expect {@code cos(toRadians(90.0))} to exactly
 equal {@code 0.0}.</description>
					<attribute name="@param">
						<description>angrad   an angle, in radians</description>
					</attribute>
					<attribute name="@return">
						<description>the measurement of the angle {@code angrad}
          in degrees.</description>
					</attribute>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
				<params>
					<param name="angrad" comment="an angle, in radians" fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="exp" returncomment="the value &lt;i&gt;e&lt;/i&gt;&lt;sup&gt;{@code a}&lt;/sup&gt;,
          where &lt;i&gt;e&lt;/i&gt; is the base of the natural logarithms." fulltype="double" type="double">
				<comment>
					<description>Returns Euler&apos;s number &lt;i&gt;e&lt;/i&gt; raised to the power of a
 {@code double} value.  Special cases:
 &lt;ul&gt;&lt;li&gt;If the argument is NaN, the result is NaN.
 &lt;li&gt;If the argument is positive infinity, then the result is
 positive infinity.
 &lt;li&gt;If the argument is negative infinity, then the result is
 positive zero.&lt;/ul&gt;

 &lt;p&gt;The computed result must be within 1 ulp of the exact result.
 Results must be semi-monotonic.</description>
					<attribute name="@param">
						<description>a   the exponent to raise &lt;i&gt;e&lt;/i&gt; to.</description>
					</attribute>
					<attribute name="@return">
						<description>the value &lt;i&gt;e&lt;/i&gt;&lt;sup&gt;{@code a}&lt;/sup&gt;,
          where &lt;i&gt;e&lt;/i&gt; is the base of the natural logarithms.</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="the exponent to raise &lt;i&gt;e&lt;/i&gt; to." fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="log" returncomment="the value ln&amp;nbsp;{@code a}, the natural logarithm of
          {@code a}." fulltype="double" type="double">
				<comment>
					<description>Returns the natural logarithm (base &lt;i&gt;e&lt;/i&gt;) of a {@code double}
 value.  Special cases:
 &lt;ul&gt;&lt;li&gt;If the argument is NaN or less than zero, then the result
 is NaN.
 &lt;li&gt;If the argument is positive infinity, then the result is
 positive infinity.
 &lt;li&gt;If the argument is positive zero or negative zero, then the
 result is negative infinity.&lt;/ul&gt;

 &lt;p&gt;The computed result must be within 1 ulp of the exact result.
 Results must be semi-monotonic.</description>
					<attribute name="@param">
						<description>a   a value</description>
					</attribute>
					<attribute name="@return">
						<description>the value ln&amp;nbsp;{@code a}, the natural logarithm of
          {@code a}.</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="a value" fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="log10" returncomment="the base 10 logarithm of  {@code a}." fulltype="double" type="double">
				<comment>
					<description>Returns the base 10 logarithm of a {@code double} value.
 Special cases:

 &lt;ul&gt;&lt;li&gt;If the argument is NaN or less than zero, then the result
 is NaN.
 &lt;li&gt;If the argument is positive infinity, then the result is
 positive infinity.
 &lt;li&gt;If the argument is positive zero or negative zero, then the
 result is negative infinity.
 &lt;li&gt; If the argument is equal to 10&lt;sup&gt;&lt;i&gt;n&lt;/i&gt;&lt;/sup&gt; for
 integer &lt;i&gt;n&lt;/i&gt;, then the result is &lt;i&gt;n&lt;/i&gt;.
 &lt;/ul&gt;

 &lt;p&gt;The computed result must be within 1 ulp of the exact result.
 Results must be semi-monotonic.</description>
					<attribute name="@param">
						<description>a   a value</description>
					</attribute>
					<attribute name="@return">
						<description>the base 10 logarithm of  {@code a}.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="a value" fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="sqrt" returncomment="the positive square root of {@code a}.
          If the argument is NaN or less than zero, the result is NaN." fulltype="double" type="double">
				<comment>
					<description>Returns the correctly rounded positive square root of a
 {@code double} value.
 Special cases:
 &lt;ul&gt;&lt;li&gt;If the argument is NaN or less than zero, then the result
 is NaN.
 &lt;li&gt;If the argument is positive infinity, then the result is positive
 infinity.
 &lt;li&gt;If the argument is positive zero or negative zero, then the
 result is the same as the argument.&lt;/ul&gt;
 Otherwise, the result is the {@code double} value closest to
 the true mathematical square root of the argument value.</description>
					<attribute name="@param">
						<description>a   a value.</description>
					</attribute>
					<attribute name="@return">
						<description>the positive square root of {@code a}.
          If the argument is NaN or less than zero, the result is NaN.</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="a value." fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="cbrt" returncomment="the cube root of {@code a}." fulltype="double" type="double">
				<comment>
					<description>Returns the cube root of a {@code double} value.  For
 positive finite {@code x}, {@code cbrt(-x) ==
 -cbrt(x)}; that is, the cube root of a negative value is
 the negative of the cube root of that value&apos;s magnitude.

 Special cases:

 &lt;ul&gt;

 &lt;li&gt;If the argument is NaN, then the result is NaN.

 &lt;li&gt;If the argument is infinite, then the result is an infinity
 with the same sign as the argument.

 &lt;li&gt;If the argument is zero, then the result is a zero with the
 same sign as the argument.

 &lt;/ul&gt;

 &lt;p&gt;The computed result must be within 1 ulp of the exact result.</description>
					<attribute name="@param">
						<description>a   a value.</description>
					</attribute>
					<attribute name="@return">
						<description>the cube root of {@code a}.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="a value." fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="IEEEremainder" returncomment="the remainder when {@code f1} is divided by
          {@code f2}." fulltype="double" type="double">
				<comment>
					<description>Computes the remainder operation on two arguments as prescribed
 by the IEEE 754 standard.
 The remainder value is mathematically equal to
 &lt;code&gt;f1&amp;nbsp;-&amp;nbsp;f2&lt;/code&gt;&amp;nbsp;&amp;times;&amp;nbsp;&lt;i&gt;n&lt;/i&gt;,
 where &lt;i&gt;n&lt;/i&gt; is the mathematical integer closest to the exact
 mathematical value of the quotient {@code f1/f2}, and if two
 mathematical integers are equally close to {@code f1/f2},
 then &lt;i&gt;n&lt;/i&gt; is the integer that is even. If the remainder is
 zero, its sign is the same as the sign of the first argument.
 Special cases:
 &lt;ul&gt;&lt;li&gt;If either argument is NaN, or the first argument is infinite,
 or the second argument is positive zero or negative zero, then the
 result is NaN.
 &lt;li&gt;If the first argument is finite and the second argument is
 infinite, then the result is the same as the first argument.&lt;/ul&gt;</description>
					<attribute name="@param">
						<description>f1   the dividend.</description>
					</attribute>
					<attribute name="@param">
						<description>f2   the divisor.</description>
					</attribute>
					<attribute name="@return">
						<description>the remainder when {@code f1} is divided by
          {@code f2}.</description>
					</attribute>
				</comment>
				<params>
					<param name="f1" comment="the dividend." fulltype="double" type="double" />
					<param name="f2" comment="the divisor." fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="ceil" returncomment="the smallest (closest to negative infinity)
          floating-point value that is greater than or equal to
          the argument and is equal to a mathematical integer." fulltype="double" type="double">
				<comment>
					<description>Returns the smallest (closest to negative infinity)
 {@code double} value that is greater than or equal to the
 argument and is equal to a mathematical integer. Special cases:
 &lt;ul&gt;&lt;li&gt;If the argument value is already equal to a
 mathematical integer, then the result is the same as the
 argument.  &lt;li&gt;If the argument is NaN or an infinity or
 positive zero or negative zero, then the result is the same as
 the argument.  &lt;li&gt;If the argument value is less than zero but
 greater than -1.0, then the result is negative zero.&lt;/ul&gt; Note
 that the value of {@code Math.ceil(x)} is exactly the
 value of {@code -Math.floor(-x)}.</description>
					<attribute name="@param">
						<description>a   a value.</description>
					</attribute>
					<attribute name="@return">
						<description>the smallest (closest to negative infinity)
          floating-point value that is greater than or equal to
          the argument and is equal to a mathematical integer.</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="a value." fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="floor" returncomment="the largest (closest to positive infinity)
          floating-point value that less than or equal to the argument
          and is equal to a mathematical integer." fulltype="double" type="double">
				<comment>
					<description>Returns the largest (closest to positive infinity)
 {@code double} value that is less than or equal to the
 argument and is equal to a mathematical integer. Special cases:
 &lt;ul&gt;&lt;li&gt;If the argument value is already equal to a
 mathematical integer, then the result is the same as the
 argument.  &lt;li&gt;If the argument is NaN or an infinity or
 positive zero or negative zero, then the result is the same as
 the argument.&lt;/ul&gt;</description>
					<attribute name="@param">
						<description>a   a value.</description>
					</attribute>
					<attribute name="@return">
						<description>the largest (closest to positive infinity)
          floating-point value that less than or equal to the argument
          and is equal to a mathematical integer.</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="a value." fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="rint" returncomment="the closest floating-point value to {@code a} that is
          equal to a mathematical integer." fulltype="double" type="double">
				<comment>
					<description>Returns the {@code double} value that is closest in value
 to the argument and is equal to a mathematical integer. If two
 {@code double} values that are mathematical integers are
 equally close, the result is the integer value that is
 even. Special cases:
 &lt;ul&gt;&lt;li&gt;If the argument value is already equal to a mathematical
 integer, then the result is the same as the argument.
 &lt;li&gt;If the argument is NaN or an infinity or positive zero or negative
 zero, then the result is the same as the argument.&lt;/ul&gt;</description>
					<attribute name="@param">
						<description>a   a {@code double} value.</description>
					</attribute>
					<attribute name="@return">
						<description>the closest floating-point value to {@code a} that is
          equal to a mathematical integer.</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="a {@code double} value." fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="atan2" returncomment="the &lt;i&gt;theta&lt;/i&gt; component of the point
          (&lt;i&gt;r&lt;/i&gt;,&amp;nbsp;&lt;i&gt;theta&lt;/i&gt;)
          in polar coordinates that corresponds to the point
          (&lt;i&gt;x&lt;/i&gt;,&amp;nbsp;&lt;i&gt;y&lt;/i&gt;) in Cartesian coordinates." fulltype="double" type="double">
				<comment>
					<description>Returns the angle &lt;i&gt;theta&lt;/i&gt; from the conversion of rectangular
 coordinates ({@code x},&amp;nbsp;{@code y}) to polar
 coordinates (r,&amp;nbsp;&lt;i&gt;theta&lt;/i&gt;).
 This method computes the phase &lt;i&gt;theta&lt;/i&gt; by computing an arc tangent
 of {@code y/x} in the range of -&lt;i&gt;pi&lt;/i&gt; to &lt;i&gt;pi&lt;/i&gt;. Special
 cases:
 &lt;ul&gt;&lt;li&gt;If either argument is NaN, then the result is NaN.
 &lt;li&gt;If the first argument is positive zero and the second argument
 is positive, or the first argument is positive and finite and the
 second argument is positive infinity, then the result is positive
 zero.
 &lt;li&gt;If the first argument is negative zero and the second argument
 is positive, or the first argument is negative and finite and the
 second argument is positive infinity, then the result is negative zero.
 &lt;li&gt;If the first argument is positive zero and the second argument
 is negative, or the first argument is positive and finite and the
 second argument is negative infinity, then the result is the
 {@code double} value closest to &lt;i&gt;pi&lt;/i&gt;.
 &lt;li&gt;If the first argument is negative zero and the second argument
 is negative, or the first argument is negative and finite and the
 second argument is negative infinity, then the result is the
 {@code double} value closest to -&lt;i&gt;pi&lt;/i&gt;.
 &lt;li&gt;If the first argument is positive and the second argument is
 positive zero or negative zero, or the first argument is positive
 infinity and the second argument is finite, then the result is the
 {@code double} value closest to &lt;i&gt;pi&lt;/i&gt;/2.
 &lt;li&gt;If the first argument is negative and the second argument is
 positive zero or negative zero, or the first argument is negative
 infinity and the second argument is finite, then the result is the
 {@code double} value closest to -&lt;i&gt;pi&lt;/i&gt;/2.
 &lt;li&gt;If both arguments are positive infinity, then the result is the
 {@code double} value closest to &lt;i&gt;pi&lt;/i&gt;/4.
 &lt;li&gt;If the first argument is positive infinity and the second argument
 is negative infinity, then the result is the {@code double}
 value closest to 3*&lt;i&gt;pi&lt;/i&gt;/4.
 &lt;li&gt;If the first argument is negative infinity and the second argument
 is positive infinity, then the result is the {@code double} value
 closest to -&lt;i&gt;pi&lt;/i&gt;/4.
 &lt;li&gt;If both arguments are negative infinity, then the result is the
 {@code double} value closest to -3*&lt;i&gt;pi&lt;/i&gt;/4.&lt;/ul&gt;

 &lt;p&gt;The computed result must be within 2 ulps of the exact result.
 Results must be semi-monotonic.</description>
					<attribute name="@param">
						<description>y   the ordinate coordinate</description>
					</attribute>
					<attribute name="@param">
						<description>x   the abscissa coordinate</description>
					</attribute>
					<attribute name="@return">
						<description>the &lt;i&gt;theta&lt;/i&gt; component of the point
          (&lt;i&gt;r&lt;/i&gt;,&amp;nbsp;&lt;i&gt;theta&lt;/i&gt;)
          in polar coordinates that corresponds to the point
          (&lt;i&gt;x&lt;/i&gt;,&amp;nbsp;&lt;i&gt;y&lt;/i&gt;) in Cartesian coordinates.</description>
					</attribute>
				</comment>
				<params>
					<param name="y" comment="the ordinate coordinate" fulltype="double" type="double" />
					<param name="x" comment="the abscissa coordinate" fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="pow" returncomment="the value {@code a}&lt;sup&gt;{@code b}&lt;/sup&gt;." fulltype="double" type="double">
				<comment>
					<description>Returns the value of the first argument raised to the power of the
 second argument. Special cases:

 &lt;ul&gt;&lt;li&gt;If the second argument is positive or negative zero, then the
 result is 1.0.
 &lt;li&gt;If the second argument is 1.0, then the result is the same as the
 first argument.
 &lt;li&gt;If the second argument is NaN, then the result is NaN.
 &lt;li&gt;If the first argument is NaN and the second argument is nonzero,
 then the result is NaN.

 &lt;li&gt;If
 &lt;ul&gt;
 &lt;li&gt;the absolute value of the first argument is greater than 1
 and the second argument is positive infinity, or
 &lt;li&gt;the absolute value of the first argument is less than 1 and
 the second argument is negative infinity,
 &lt;/ul&gt;
 then the result is positive infinity.

 &lt;li&gt;If
 &lt;ul&gt;
 &lt;li&gt;the absolute value of the first argument is greater than 1 and
 the second argument is negative infinity, or
 &lt;li&gt;the absolute value of the
 first argument is less than 1 and the second argument is positive
 infinity,
 &lt;/ul&gt;
 then the result is positive zero.

 &lt;li&gt;If the absolute value of the first argument equals 1 and the
 second argument is infinite, then the result is NaN.

 &lt;li&gt;If
 &lt;ul&gt;
 &lt;li&gt;the first argument is positive zero and the second argument
 is greater than zero, or
 &lt;li&gt;the first argument is positive infinity and the second
 argument is less than zero,
 &lt;/ul&gt;
 then the result is positive zero.

 &lt;li&gt;If
 &lt;ul&gt;
 &lt;li&gt;the first argument is positive zero and the second argument
 is less than zero, or
 &lt;li&gt;the first argument is positive infinity and the second
 argument is greater than zero,
 &lt;/ul&gt;
 then the result is positive infinity.

 &lt;li&gt;If
 &lt;ul&gt;
 &lt;li&gt;the first argument is negative zero and the second argument
 is greater than zero but not a finite odd integer, or
 &lt;li&gt;the first argument is negative infinity and the second
 argument is less than zero but not a finite odd integer,
 &lt;/ul&gt;
 then the result is positive zero.

 &lt;li&gt;If
 &lt;ul&gt;
 &lt;li&gt;the first argument is negative zero and the second argument
 is a positive finite odd integer, or
 &lt;li&gt;the first argument is negative infinity and the second
 argument is a negative finite odd integer,
 &lt;/ul&gt;
 then the result is negative zero.

 &lt;li&gt;If
 &lt;ul&gt;
 &lt;li&gt;the first argument is negative zero and the second argument
 is less than zero but not a finite odd integer, or
 &lt;li&gt;the first argument is negative infinity and the second
 argument is greater than zero but not a finite odd integer,
 &lt;/ul&gt;
 then the result is positive infinity.

 &lt;li&gt;If
 &lt;ul&gt;
 &lt;li&gt;the first argument is negative zero and the second argument
 is a negative finite odd integer, or
 &lt;li&gt;the first argument is negative infinity and the second
 argument is a positive finite odd integer,
 &lt;/ul&gt;
 then the result is negative infinity.

 &lt;li&gt;If the first argument is finite and less than zero
 &lt;ul&gt;
 &lt;li&gt; if the second argument is a finite even integer, the
 result is equal to the result of raising the absolute value of
 the first argument to the power of the second argument

 &lt;li&gt;if the second argument is a finite odd integer, the result
 is equal to the negative of the result of raising the absolute
 value of the first argument to the power of the second
 argument

 &lt;li&gt;if the second argument is finite and not an integer, then
 the result is NaN.
 &lt;/ul&gt;

 &lt;li&gt;If both arguments are integers, then the result is exactly equal
 to the mathematical result of raising the first argument to the power
 of the second argument if that result can in fact be represented
 exactly as a {@code double} value.&lt;/ul&gt;

 &lt;p&gt;(In the foregoing descriptions, a floating-point value is
 considered to be an integer if and only if it is finite and a
 fixed point of the method {@link #ceil ceil} or,
 equivalently, a fixed point of the method {@link #floor
 floor}. A value is a fixed point of a one-argument
 method if and only if the result of applying the method to the
 value is equal to the value.)

 &lt;p&gt;The computed result must be within 1 ulp of the exact result.
 Results must be semi-monotonic.</description>
					<attribute name="@param">
						<description>a   the base.</description>
					</attribute>
					<attribute name="@param">
						<description>b   the exponent.</description>
					</attribute>
					<attribute name="@return">
						<description>the value {@code a}&lt;sup&gt;{@code b}&lt;/sup&gt;.</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="the base." fulltype="double" type="double" />
					<param name="b" comment="the exponent." fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="round" returncomment="the value of the argument rounded to the nearest
          {@code int} value." fulltype="int" type="int">
				<comment>
					<description>Returns the closest {@code int} to the argument. The
 result is rounded to an integer by adding 1/2, taking the
 floor of the result, and casting the result to type {@code int}.
 In other words, the result is equal to the value of the expression:
 &lt;p&gt;{@code (int)Math.floor(a + 0.5f)}
 &lt;p&gt;
 Special cases:
 &lt;ul&gt;&lt;li&gt;If the argument is NaN, the result is 0.
 &lt;li&gt;If the argument is negative infinity or any value less than or
 equal to the value of {@code Integer.MIN_VALUE}, the result is
 equal to the value of {@code Integer.MIN_VALUE}.
 &lt;li&gt;If the argument is positive infinity or any value greater than or
 equal to the value of {@code Integer.MAX_VALUE}, the result is
 equal to the value of {@code Integer.MAX_VALUE}.&lt;/ul&gt;</description>
					<attribute name="@param">
						<description>a   a floating-point value to be rounded to an integer.</description>
					</attribute>
					<attribute name="@return">
						<description>the value of the argument rounded to the nearest
          {@code int} value.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Integer#MAX_VALUE</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Integer#MIN_VALUE</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="a floating-point value to be rounded to an integer." fulltype="float" type="float" />
				</params>
			</method>
			<method static="true" visibility="public" name="round" returncomment="the value of the argument rounded to the nearest
          {@code long} value." fulltype="long" type="long">
				<comment>
					<description>Returns the closest {@code long} to the argument. The result
 is rounded to an integer by adding 1/2, taking the floor of the
 result, and casting the result to type {@code long}. In other
 words, the result is equal to the value of the expression:
 &lt;p&gt;{@code (long)Math.floor(a + 0.5d)}
 &lt;p&gt;
 Special cases:
 &lt;ul&gt;&lt;li&gt;If the argument is NaN, the result is 0.
 &lt;li&gt;If the argument is negative infinity or any value less than or
 equal to the value of {@code Long.MIN_VALUE}, the result is
 equal to the value of {@code Long.MIN_VALUE}.
 &lt;li&gt;If the argument is positive infinity or any value greater than or
 equal to the value of {@code Long.MAX_VALUE}, the result is
 equal to the value of {@code Long.MAX_VALUE}.&lt;/ul&gt;</description>
					<attribute name="@param">
						<description>a   a floating-point value to be rounded to a
          {@code long}.</description>
					</attribute>
					<attribute name="@return">
						<description>the value of the argument rounded to the nearest
          {@code long} value.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Long#MAX_VALUE</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Long#MIN_VALUE</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="a floating-point value to be rounded to a
          {@code long}." fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" synchronized="true" visibility="private" name="initRNG" fulltype="void" type="void" />
			<method static="true" visibility="public" name="random" returncomment="a pseudorandom {@code double} greater than or equal
 to {@code 0.0} and less than {@code 1.0}." fulltype="double" type="double">
				<comment>
					<description>Returns a {@code double} value with a positive sign, greater
 than or equal to {@code 0.0} and less than {@code 1.0}.
 Returned values are chosen pseudorandomly with (approximately)
 uniform distribution from that range.

 &lt;p&gt;When this method is first called, it creates a single new
 pseudorandom-number generator, exactly as if by the expression
 &lt;blockquote&gt;{@code new java.util.Random}&lt;/blockquote&gt; This
 new pseudorandom-number generator is used thereafter for all
 calls to this method and is used nowhere else.

 &lt;p&gt;This method is properly synchronized to allow correct use by
 more than one thread. However, if many threads need to generate
 pseudorandom numbers at a great rate, it may reduce contention
 for each thread to have its own pseudorandom-number generator.</description>
					<attribute name="@return">
						<description>a pseudorandom {@code double} greater than or equal
 to {@code 0.0} and less than {@code 1.0}.</description>
					</attribute>
					<attribute name="@see">
						<description>java.util.Random#nextDouble()</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="abs" returncomment="the absolute value of the argument." fulltype="int" type="int">
				<comment>
					<description>Returns the absolute value of an {@code int} value.
 If the argument is not negative, the argument is returned.
 If the argument is negative, the negation of the argument is returned.

 &lt;p&gt;Note that if the argument is equal to the value of
 {@link Integer#MIN_VALUE}, the most negative representable
 {@code int} value, the result is that same value, which is
 negative.</description>
					<attribute name="@param">
						<description>a   the argument whose absolute value is to be determined</description>
					</attribute>
					<attribute name="@return">
						<description>the absolute value of the argument.</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="the argument whose absolute value is to be determined" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="abs" returncomment="the absolute value of the argument." fulltype="long" type="long">
				<comment>
					<description>Returns the absolute value of a {@code long} value.
 If the argument is not negative, the argument is returned.
 If the argument is negative, the negation of the argument is returned.

 &lt;p&gt;Note that if the argument is equal to the value of
 {@link Long#MIN_VALUE}, the most negative representable
 {@code long} value, the result is that same value, which
 is negative.</description>
					<attribute name="@param">
						<description>a   the argument whose absolute value is to be determined</description>
					</attribute>
					<attribute name="@return">
						<description>the absolute value of the argument.</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="the argument whose absolute value is to be determined" fulltype="long" type="long" />
				</params>
			</method>
			<method static="true" visibility="public" name="abs" returncomment="the absolute value of the argument." fulltype="float" type="float">
				<comment>
					<description>Returns the absolute value of a {@code float} value.
 If the argument is not negative, the argument is returned.
 If the argument is negative, the negation of the argument is returned.
 Special cases:
 &lt;ul&gt;&lt;li&gt;If the argument is positive zero or negative zero, the
 result is positive zero.
 &lt;li&gt;If the argument is infinite, the result is positive infinity.
 &lt;li&gt;If the argument is NaN, the result is NaN.&lt;/ul&gt;
 In other words, the result is the same as the value of the expression:
 &lt;p&gt;{@code Float.intBitsToFloat(0x7fffffff &amp; Float.floatToIntBits(a))}</description>
					<attribute name="@param">
						<description>a   the argument whose absolute value is to be determined</description>
					</attribute>
					<attribute name="@return">
						<description>the absolute value of the argument.</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="the argument whose absolute value is to be determined" fulltype="float" type="float" />
				</params>
			</method>
			<method static="true" visibility="public" name="abs" returncomment="the absolute value of the argument." fulltype="double" type="double">
				<comment>
					<description>Returns the absolute value of a {@code double} value.
 If the argument is not negative, the argument is returned.
 If the argument is negative, the negation of the argument is returned.
 Special cases:
 &lt;ul&gt;&lt;li&gt;If the argument is positive zero or negative zero, the result
 is positive zero.
 &lt;li&gt;If the argument is infinite, the result is positive infinity.
 &lt;li&gt;If the argument is NaN, the result is NaN.&lt;/ul&gt;
 In other words, the result is the same as the value of the expression:
 &lt;p&gt;{@code Double.longBitsToDouble((Double.doubleToLongBits(a)&lt;&lt;1)&gt;&gt;&gt;1)}</description>
					<attribute name="@param">
						<description>a   the argument whose absolute value is to be determined</description>
					</attribute>
					<attribute name="@return">
						<description>the absolute value of the argument.</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="the argument whose absolute value is to be determined" fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="max" returncomment="the larger of {@code a} and {@code b}." fulltype="int" type="int">
				<comment>
					<description>Returns the greater of two {@code int} values. That is, the
 result is the argument closer to the value of
 {@link Integer#MAX_VALUE}. If the arguments have the same value,
 the result is that same value.</description>
					<attribute name="@param">
						<description>a   an argument.</description>
					</attribute>
					<attribute name="@param">
						<description>b   another argument.</description>
					</attribute>
					<attribute name="@return">
						<description>the larger of {@code a} and {@code b}.</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="an argument." fulltype="int" type="int" />
					<param name="b" comment="another argument." fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="max" returncomment="the larger of {@code a} and {@code b}." fulltype="long" type="long">
				<comment>
					<description>Returns the greater of two {@code long} values. That is, the
 result is the argument closer to the value of
 {@link Long#MAX_VALUE}. If the arguments have the same value,
 the result is that same value.</description>
					<attribute name="@param">
						<description>a   an argument.</description>
					</attribute>
					<attribute name="@param">
						<description>b   another argument.</description>
					</attribute>
					<attribute name="@return">
						<description>the larger of {@code a} and {@code b}.</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="an argument." fulltype="long" type="long" />
					<param name="b" comment="another argument." fulltype="long" type="long" />
				</params>
			</method>
			<method static="true" visibility="public" name="max" returncomment="the larger of {@code a} and {@code b}." fulltype="float" type="float">
				<comment>
					<description>Returns the greater of two {@code float} values.  That is,
 the result is the argument closer to positive infinity. If the
 arguments have the same value, the result is that same
 value. If either value is NaN, then the result is NaN.  Unlike
 the numerical comparison operators, this method considers
 negative zero to be strictly smaller than positive zero. If one
 argument is positive zero and the other negative zero, the
 result is positive zero.</description>
					<attribute name="@param">
						<description>a   an argument.</description>
					</attribute>
					<attribute name="@param">
						<description>b   another argument.</description>
					</attribute>
					<attribute name="@return">
						<description>the larger of {@code a} and {@code b}.</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="an argument." fulltype="float" type="float" />
					<param name="b" comment="another argument." fulltype="float" type="float" />
				</params>
			</method>
			<method static="true" visibility="public" name="max" returncomment="the larger of {@code a} and {@code b}." fulltype="double" type="double">
				<comment>
					<description>Returns the greater of two {@code double} values.  That
 is, the result is the argument closer to positive infinity. If
 the arguments have the same value, the result is that same
 value. If either value is NaN, then the result is NaN.  Unlike
 the numerical comparison operators, this method considers
 negative zero to be strictly smaller than positive zero. If one
 argument is positive zero and the other negative zero, the
 result is positive zero.</description>
					<attribute name="@param">
						<description>a   an argument.</description>
					</attribute>
					<attribute name="@param">
						<description>b   another argument.</description>
					</attribute>
					<attribute name="@return">
						<description>the larger of {@code a} and {@code b}.</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="an argument." fulltype="double" type="double" />
					<param name="b" comment="another argument." fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="min" returncomment="the smaller of {@code a} and {@code b}." fulltype="int" type="int">
				<comment>
					<description>Returns the smaller of two {@code int} values. That is,
 the result the argument closer to the value of
 {@link Integer#MIN_VALUE}.  If the arguments have the same
 value, the result is that same value.</description>
					<attribute name="@param">
						<description>a   an argument.</description>
					</attribute>
					<attribute name="@param">
						<description>b   another argument.</description>
					</attribute>
					<attribute name="@return">
						<description>the smaller of {@code a} and {@code b}.</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="an argument." fulltype="int" type="int" />
					<param name="b" comment="another argument." fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="min" returncomment="the smaller of {@code a} and {@code b}." fulltype="long" type="long">
				<comment>
					<description>Returns the smaller of two {@code long} values. That is,
 the result is the argument closer to the value of
 {@link Long#MIN_VALUE}. If the arguments have the same
 value, the result is that same value.</description>
					<attribute name="@param">
						<description>a   an argument.</description>
					</attribute>
					<attribute name="@param">
						<description>b   another argument.</description>
					</attribute>
					<attribute name="@return">
						<description>the smaller of {@code a} and {@code b}.</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="an argument." fulltype="long" type="long" />
					<param name="b" comment="another argument." fulltype="long" type="long" />
				</params>
			</method>
			<method static="true" visibility="public" name="min" returncomment="the smaller of {@code a} and {@code b}." fulltype="float" type="float">
				<comment>
					<description>Returns the smaller of two {@code float} values.  That is,
 the result is the value closer to negative infinity. If the
 arguments have the same value, the result is that same
 value. If either value is NaN, then the result is NaN.  Unlike
 the numerical comparison operators, this method considers
 negative zero to be strictly smaller than positive zero.  If
 one argument is positive zero and the other is negative zero,
 the result is negative zero.</description>
					<attribute name="@param">
						<description>a   an argument.</description>
					</attribute>
					<attribute name="@param">
						<description>b   another argument.</description>
					</attribute>
					<attribute name="@return">
						<description>the smaller of {@code a} and {@code b}.</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="an argument." fulltype="float" type="float" />
					<param name="b" comment="another argument." fulltype="float" type="float" />
				</params>
			</method>
			<method static="true" visibility="public" name="min" returncomment="the smaller of {@code a} and {@code b}." fulltype="double" type="double">
				<comment>
					<description>Returns the smaller of two {@code double} values.  That
 is, the result is the value closer to negative infinity. If the
 arguments have the same value, the result is that same
 value. If either value is NaN, then the result is NaN.  Unlike
 the numerical comparison operators, this method considers
 negative zero to be strictly smaller than positive zero. If one
 argument is positive zero and the other is negative zero, the
 result is negative zero.</description>
					<attribute name="@param">
						<description>a   an argument.</description>
					</attribute>
					<attribute name="@param">
						<description>b   another argument.</description>
					</attribute>
					<attribute name="@return">
						<description>the smaller of {@code a} and {@code b}.</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="an argument." fulltype="double" type="double" />
					<param name="b" comment="another argument." fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="ulp" returncomment="the size of an ulp of the argument" fulltype="double" type="double">
				<comment>
					<description>Returns the size of an ulp of the argument.  An ulp of a
 {@code double} value is the positive distance between this
 floating-point value and the {@code double} value next
 larger in magnitude.  Note that for non-NaN &lt;i&gt;x&lt;/i&gt;,
 &lt;code&gt;ulp(-&lt;i&gt;x&lt;/i&gt;) == ulp(&lt;i&gt;x&lt;/i&gt;)&lt;/code&gt;.

 &lt;p&gt;Special Cases:
 &lt;ul&gt;
 &lt;li&gt; If the argument is NaN, then the result is NaN.
 &lt;li&gt; If the argument is positive or negative infinity, then the
 result is positive infinity.
 &lt;li&gt; If the argument is positive or negative zero, then the result is
 {@code Double.MIN_VALUE}.
 &lt;li&gt; If the argument is &amp;plusmn;{@code Double.MAX_VALUE}, then
 the result is equal to 2&lt;sup&gt;971&lt;/sup&gt;.
 &lt;/ul&gt;</description>
					<attribute name="@param">
						<description>d the floating-point value whose ulp is to be returned</description>
					</attribute>
					<attribute name="@return">
						<description>the size of an ulp of the argument</description>
					</attribute>
					<attribute name="@author">
						<description>Joseph D. Darcy</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="d" comment="the floating-point value whose ulp is to be returned" fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="ulp" returncomment="the size of an ulp of the argument" fulltype="float" type="float">
				<comment>
					<description>Returns the size of an ulp of the argument.  An ulp of a
 {@code float} value is the positive distance between this
 floating-point value and the {@code float} value next
 larger in magnitude.  Note that for non-NaN &lt;i&gt;x&lt;/i&gt;,
 &lt;code&gt;ulp(-&lt;i&gt;x&lt;/i&gt;) == ulp(&lt;i&gt;x&lt;/i&gt;)&lt;/code&gt;.

 &lt;p&gt;Special Cases:
 &lt;ul&gt;
 &lt;li&gt; If the argument is NaN, then the result is NaN.
 &lt;li&gt; If the argument is positive or negative infinity, then the
 result is positive infinity.
 &lt;li&gt; If the argument is positive or negative zero, then the result is
 {@code Float.MIN_VALUE}.
 &lt;li&gt; If the argument is &amp;plusmn;{@code Float.MAX_VALUE}, then
 the result is equal to 2&lt;sup&gt;104&lt;/sup&gt;.
 &lt;/ul&gt;</description>
					<attribute name="@param">
						<description>f the floating-point value whose ulp is to be returned</description>
					</attribute>
					<attribute name="@return">
						<description>the size of an ulp of the argument</description>
					</attribute>
					<attribute name="@author">
						<description>Joseph D. Darcy</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="f" comment="the floating-point value whose ulp is to be returned" fulltype="float" type="float" />
				</params>
			</method>
			<method static="true" visibility="public" name="signum" returncomment="the signum function of the argument" fulltype="double" type="double">
				<comment>
					<description>Returns the signum function of the argument; zero if the argument
 is zero, 1.0 if the argument is greater than zero, -1.0 if the
 argument is less than zero.

 &lt;p&gt;Special Cases:
 &lt;ul&gt;
 &lt;li&gt; If the argument is NaN, then the result is NaN.
 &lt;li&gt; If the argument is positive zero or negative zero, then the
      result is the same as the argument.
 &lt;/ul&gt;</description>
					<attribute name="@param">
						<description>d the floating-point value whose signum is to be returned</description>
					</attribute>
					<attribute name="@return">
						<description>the signum function of the argument</description>
					</attribute>
					<attribute name="@author">
						<description>Joseph D. Darcy</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="d" comment="the floating-point value whose signum is to be returned" fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="signum" returncomment="the signum function of the argument" fulltype="float" type="float">
				<comment>
					<description>Returns the signum function of the argument; zero if the argument
 is zero, 1.0f if the argument is greater than zero, -1.0f if the
 argument is less than zero.

 &lt;p&gt;Special Cases:
 &lt;ul&gt;
 &lt;li&gt; If the argument is NaN, then the result is NaN.
 &lt;li&gt; If the argument is positive zero or negative zero, then the
      result is the same as the argument.
 &lt;/ul&gt;</description>
					<attribute name="@param">
						<description>f the floating-point value whose signum is to be returned</description>
					</attribute>
					<attribute name="@return">
						<description>the signum function of the argument</description>
					</attribute>
					<attribute name="@author">
						<description>Joseph D. Darcy</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="f" comment="the floating-point value whose signum is to be returned" fulltype="float" type="float" />
				</params>
			</method>
			<method static="true" visibility="public" name="sinh" returncomment="The hyperbolic sine of {@code x}." fulltype="double" type="double">
				<comment>
					<description>Returns the hyperbolic sine of a {@code double} value.
 The hyperbolic sine of &lt;i&gt;x&lt;/i&gt; is defined to be
 (&lt;i&gt;e&lt;sup&gt;x&lt;/sup&gt;&amp;nbsp;-&amp;nbsp;e&lt;sup&gt;-x&lt;/sup&gt;&lt;/i&gt;)/2
 where &lt;i&gt;e&lt;/i&gt; is {@linkplain Math#E Euler&apos;s number}.

 &lt;p&gt;Special cases:
 &lt;ul&gt;

 &lt;li&gt;If the argument is NaN, then the result is NaN.

 &lt;li&gt;If the argument is infinite, then the result is an infinity
 with the same sign as the argument.

 &lt;li&gt;If the argument is zero, then the result is a zero with the
 same sign as the argument.

 &lt;/ul&gt;

 &lt;p&gt;The computed result must be within 2.5 ulps of the exact result.</description>
					<attribute name="@param">
						<description>x The number whose hyperbolic sine is to be returned.</description>
					</attribute>
					<attribute name="@return">
						<description>The hyperbolic sine of {@code x}.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="x" comment="The number whose hyperbolic sine is to be returned." fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="cosh" returncomment="The hyperbolic cosine of {@code x}." fulltype="double" type="double">
				<comment>
					<description>Returns the hyperbolic cosine of a {@code double} value.
 The hyperbolic cosine of &lt;i&gt;x&lt;/i&gt; is defined to be
 (&lt;i&gt;e&lt;sup&gt;x&lt;/sup&gt;&amp;nbsp;+&amp;nbsp;e&lt;sup&gt;-x&lt;/sup&gt;&lt;/i&gt;)/2
 where &lt;i&gt;e&lt;/i&gt; is {@linkplain Math#E Euler&apos;s number}.

 &lt;p&gt;Special cases:
 &lt;ul&gt;

 &lt;li&gt;If the argument is NaN, then the result is NaN.

 &lt;li&gt;If the argument is infinite, then the result is positive
 infinity.

 &lt;li&gt;If the argument is zero, then the result is {@code 1.0}.

 &lt;/ul&gt;

 &lt;p&gt;The computed result must be within 2.5 ulps of the exact result.</description>
					<attribute name="@param">
						<description>x The number whose hyperbolic cosine is to be returned.</description>
					</attribute>
					<attribute name="@return">
						<description>The hyperbolic cosine of {@code x}.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="x" comment="The number whose hyperbolic cosine is to be returned." fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="tanh" returncomment="The hyperbolic tangent of {@code x}." fulltype="double" type="double">
				<comment>
					<description>Returns the hyperbolic tangent of a {@code double} value.
 The hyperbolic tangent of &lt;i&gt;x&lt;/i&gt; is defined to be
 (&lt;i&gt;e&lt;sup&gt;x&lt;/sup&gt;&amp;nbsp;-&amp;nbsp;e&lt;sup&gt;-x&lt;/sup&gt;&lt;/i&gt;)/(&lt;i&gt;e&lt;sup&gt;x&lt;/sup&gt;&amp;nbsp;+&amp;nbsp;e&lt;sup&gt;-x&lt;/sup&gt;&lt;/i&gt;),
 in other words, {@linkplain Math#sinh
 sinh(&lt;i&gt;x&lt;/i&gt;)}/{@linkplain Math#cosh cosh(&lt;i&gt;x&lt;/i&gt;)}.  Note
 that the absolute value of the exact tanh is always less than
 1.

 &lt;p&gt;Special cases:
 &lt;ul&gt;

 &lt;li&gt;If the argument is NaN, then the result is NaN.

 &lt;li&gt;If the argument is zero, then the result is a zero with the
 same sign as the argument.

 &lt;li&gt;If the argument is positive infinity, then the result is
 {@code +1.0}.

 &lt;li&gt;If the argument is negative infinity, then the result is
 {@code -1.0}.

 &lt;/ul&gt;

 &lt;p&gt;The computed result must be within 2.5 ulps of the exact result.
 The result of {@code tanh} for any finite input must have
 an absolute value less than or equal to 1.  Note that once the
 exact result of tanh is within 1/2 of an ulp of the limit value
 of &amp;plusmn;1, correctly signed &amp;plusmn;{@code 1.0} should
 be returned.</description>
					<attribute name="@param">
						<description>x The number whose hyperbolic tangent is to be returned.</description>
					</attribute>
					<attribute name="@return">
						<description>The hyperbolic tangent of {@code x}.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="x" comment="The number whose hyperbolic tangent is to be returned." fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="hypot" returncomment="sqrt(&lt;i&gt;x&lt;/i&gt;&lt;sup&gt;2&lt;/sup&gt;&amp;nbsp;+&lt;i&gt;y&lt;/i&gt;&lt;sup&gt;2&lt;/sup&gt;)
 without intermediate overflow or underflow" fulltype="double" type="double">
				<comment>
					<description>Returns sqrt(&lt;i&gt;x&lt;/i&gt;&lt;sup&gt;2&lt;/sup&gt;&amp;nbsp;+&lt;i&gt;y&lt;/i&gt;&lt;sup&gt;2&lt;/sup&gt;)
 without intermediate overflow or underflow.

 &lt;p&gt;Special cases:
 &lt;ul&gt;

 &lt;li&gt; If either argument is infinite, then the result
 is positive infinity.

 &lt;li&gt; If either argument is NaN and neither argument is infinite,
 then the result is NaN.

 &lt;/ul&gt;

 &lt;p&gt;The computed result must be within 1 ulp of the exact
 result.  If one parameter is held constant, the results must be
 semi-monotonic in the other parameter.</description>
					<attribute name="@param">
						<description>x a value</description>
					</attribute>
					<attribute name="@param">
						<description>y a value</description>
					</attribute>
					<attribute name="@return">
						<description>sqrt(&lt;i&gt;x&lt;/i&gt;&lt;sup&gt;2&lt;/sup&gt;&amp;nbsp;+&lt;i&gt;y&lt;/i&gt;&lt;sup&gt;2&lt;/sup&gt;)
 without intermediate overflow or underflow</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="x" comment="a value" fulltype="double" type="double" />
					<param name="y" comment="a value" fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="expm1" returncomment="the value &lt;i&gt;e&lt;/i&gt;&lt;sup&gt;{@code x}&lt;/sup&gt;&amp;nbsp;-&amp;nbsp;1." fulltype="double" type="double">
				<comment>
					<description>Returns &lt;i&gt;e&lt;/i&gt;&lt;sup&gt;x&lt;/sup&gt;&amp;nbsp;-1.  Note that for values of
 &lt;i&gt;x&lt;/i&gt; near 0, the exact sum of
 {@code expm1(x)}&amp;nbsp;+&amp;nbsp;1 is much closer to the true
 result of &lt;i&gt;e&lt;/i&gt;&lt;sup&gt;x&lt;/sup&gt; than {@code exp(x)}.

 &lt;p&gt;Special cases:
 &lt;ul&gt;
 &lt;li&gt;If the argument is NaN, the result is NaN.

 &lt;li&gt;If the argument is positive infinity, then the result is
 positive infinity.

 &lt;li&gt;If the argument is negative infinity, then the result is
 -1.0.

 &lt;li&gt;If the argument is zero, then the result is a zero with the
 same sign as the argument.

 &lt;/ul&gt;

 &lt;p&gt;The computed result must be within 1 ulp of the exact result.
 Results must be semi-monotonic.  The result of
 {@code expm1} for any finite input must be greater than or
 equal to {@code -1.0}.  Note that once the exact result of
 &lt;i&gt;e&lt;/i&gt;&lt;sup&gt;{@code x}&lt;/sup&gt;&amp;nbsp;-&amp;nbsp;1 is within 1/2
 ulp of the limit value -1, {@code -1.0} should be
 returned.</description>
					<attribute name="@param">
						<description>x   the exponent to raise &lt;i&gt;e&lt;/i&gt; to in the computation of
              &lt;i&gt;e&lt;/i&gt;&lt;sup&gt;{@code x}&lt;/sup&gt;&amp;nbsp;-1.</description>
					</attribute>
					<attribute name="@return">
						<description>the value &lt;i&gt;e&lt;/i&gt;&lt;sup&gt;{@code x}&lt;/sup&gt;&amp;nbsp;-&amp;nbsp;1.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="x" comment="the exponent to raise &lt;i&gt;e&lt;/i&gt; to in the computation of
              &lt;i&gt;e&lt;/i&gt;&lt;sup&gt;{@code x}&lt;/sup&gt;&amp;nbsp;-1." fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="log1p" returncomment="the value ln({@code x}&amp;nbsp;+&amp;nbsp;1), the natural
 log of {@code x}&amp;nbsp;+&amp;nbsp;1" fulltype="double" type="double">
				<comment>
					<description>Returns the natural logarithm of the sum of the argument and 1.
 Note that for small values {@code x}, the result of
 {@code log1p(x)} is much closer to the true result of ln(1
 + {@code x}) than the floating-point evaluation of
 {@code log(1.0+x)}.

 &lt;p&gt;Special cases:

 &lt;ul&gt;

 &lt;li&gt;If the argument is NaN or less than -1, then the result is
 NaN.

 &lt;li&gt;If the argument is positive infinity, then the result is
 positive infinity.

 &lt;li&gt;If the argument is negative one, then the result is
 negative infinity.

 &lt;li&gt;If the argument is zero, then the result is a zero with the
 same sign as the argument.

 &lt;/ul&gt;

 &lt;p&gt;The computed result must be within 1 ulp of the exact result.
 Results must be semi-monotonic.</description>
					<attribute name="@param">
						<description>x   a value</description>
					</attribute>
					<attribute name="@return">
						<description>the value ln({@code x}&amp;nbsp;+&amp;nbsp;1), the natural
 log of {@code x}&amp;nbsp;+&amp;nbsp;1</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="x" comment="a value" fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="copySign" returncomment="a value with the magnitude of {@code magnitude}
 and the sign of {@code sign}." fulltype="double" type="double">
				<comment>
					<description>Returns the first floating-point argument with the sign of the
 second floating-point argument.  Note that unlike the {@link
 StrictMath#copySign(double, double) StrictMath.copySign}
 method, this method does not require NaN {@code sign}
 arguments to be treated as positive values; implementations are
 permitted to treat some NaN arguments as positive and other NaN
 arguments as negative to allow greater performance.</description>
					<attribute name="@param">
						<description>magnitude  the parameter providing the magnitude of the result</description>
					</attribute>
					<attribute name="@param">
						<description>sign   the parameter providing the sign of the result</description>
					</attribute>
					<attribute name="@return">
						<description>a value with the magnitude of {@code magnitude}
 and the sign of {@code sign}.</description>
					</attribute>
					<attribute name="@since">
						<description>1.6</description>
					</attribute>
				</comment>
				<params>
					<param name="magnitude" comment="the parameter providing the magnitude of the result" fulltype="double" type="double" />
					<param name="sign" comment="the parameter providing the sign of the result" fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="copySign" returncomment="a value with the magnitude of {@code magnitude}
 and the sign of {@code sign}." fulltype="float" type="float">
				<comment>
					<description>Returns the first floating-point argument with the sign of the
 second floating-point argument.  Note that unlike the {@link
 StrictMath#copySign(float, float) StrictMath.copySign}
 method, this method does not require NaN {@code sign}
 arguments to be treated as positive values; implementations are
 permitted to treat some NaN arguments as positive and other NaN
 arguments as negative to allow greater performance.</description>
					<attribute name="@param">
						<description>magnitude  the parameter providing the magnitude of the result</description>
					</attribute>
					<attribute name="@param">
						<description>sign   the parameter providing the sign of the result</description>
					</attribute>
					<attribute name="@return">
						<description>a value with the magnitude of {@code magnitude}
 and the sign of {@code sign}.</description>
					</attribute>
					<attribute name="@since">
						<description>1.6</description>
					</attribute>
				</comment>
				<params>
					<param name="magnitude" comment="the parameter providing the magnitude of the result" fulltype="float" type="float" />
					<param name="sign" comment="the parameter providing the sign of the result" fulltype="float" type="float" />
				</params>
			</method>
			<method static="true" visibility="public" name="getExponent" returncomment="the unbiased exponent of the argument" fulltype="int" type="int">
				<comment>
					<description>Returns the unbiased exponent used in the representation of a
 {@code float}.  Special cases:

 &lt;ul&gt;
 &lt;li&gt;If the argument is NaN or infinite, then the result is
 {@link Float#MAX_EXPONENT} + 1.
 &lt;li&gt;If the argument is zero or subnormal, then the result is
 {@link Float#MIN_EXPONENT} -1.
 &lt;/ul&gt;</description>
					<attribute name="@param">
						<description>f a {@code float} value</description>
					</attribute>
					<attribute name="@return">
						<description>the unbiased exponent of the argument</description>
					</attribute>
					<attribute name="@since">
						<description>1.6</description>
					</attribute>
				</comment>
				<params>
					<param name="f" comment="a {@code float} value" fulltype="float" type="float" />
				</params>
			</method>
			<method static="true" visibility="public" name="getExponent" returncomment="the unbiased exponent of the argument" fulltype="int" type="int">
				<comment>
					<description>Returns the unbiased exponent used in the representation of a
 {@code double}.  Special cases:

 &lt;ul&gt;
 &lt;li&gt;If the argument is NaN or infinite, then the result is
 {@link Double#MAX_EXPONENT} + 1.
 &lt;li&gt;If the argument is zero or subnormal, then the result is
 {@link Double#MIN_EXPONENT} -1.
 &lt;/ul&gt;</description>
					<attribute name="@param">
						<description>d a {@code double} value</description>
					</attribute>
					<attribute name="@return">
						<description>the unbiased exponent of the argument</description>
					</attribute>
					<attribute name="@since">
						<description>1.6</description>
					</attribute>
				</comment>
				<params>
					<param name="d" comment="a {@code double} value" fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="nextAfter" returncomment="The floating-point number adjacent to {@code start} in the
 direction of {@code direction}." fulltype="double" type="double">
				<comment>
					<description>Returns the floating-point number adjacent to the first
 argument in the direction of the second argument.  If both
 arguments compare as equal the second argument is returned.

 &lt;p&gt;
 Special cases:
 &lt;ul&gt;
 &lt;li&gt; If either argument is a NaN, then NaN is returned.

 &lt;li&gt; If both arguments are signed zeros, {@code direction}
 is returned unchanged (as implied by the requirement of
 returning the second argument if the arguments compare as
 equal).

 &lt;li&gt; If {@code start} is
 &amp;plusmn;{@link Double#MIN_VALUE} and {@code direction}
 has a value such that the result should have a smaller
 magnitude, then a zero with the same sign as {@code start}
 is returned.

 &lt;li&gt; If {@code start} is infinite and
 {@code direction} has a value such that the result should
 have a smaller magnitude, {@link Double#MAX_VALUE} with the
 same sign as {@code start} is returned.

 &lt;li&gt; If {@code start} is equal to &amp;plusmn;
 {@link Double#MAX_VALUE} and {@code direction} has a
 value such that the result should have a larger magnitude, an
 infinity with same sign as {@code start} is returned.
 &lt;/ul&gt;</description>
					<attribute name="@param">
						<description>start  starting floating-point value</description>
					</attribute>
					<attribute name="@param">
						<description>direction value indicating which of
 {@code start}&apos;s neighbors or {@code start} should
 be returned</description>
					</attribute>
					<attribute name="@return">
						<description>The floating-point number adjacent to {@code start} in the
 direction of {@code direction}.</description>
					</attribute>
					<attribute name="@since">
						<description>1.6</description>
					</attribute>
				</comment>
				<params>
					<param name="start" comment="starting floating-point value" fulltype="double" type="double" />
					<param name="direction" comment="value indicating which of
 {@code start}&apos;s neighbors or {@code start} should
 be returned" fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="nextAfter" returncomment="The floating-point number adjacent to {@code start} in the
 direction of {@code direction}." fulltype="float" type="float">
				<comment>
					<description>Returns the floating-point number adjacent to the first
 argument in the direction of the second argument.  If both
 arguments compare as equal a value equivalent to the second argument
 is returned.

 &lt;p&gt;
 Special cases:
 &lt;ul&gt;
 &lt;li&gt; If either argument is a NaN, then NaN is returned.

 &lt;li&gt; If both arguments are signed zeros, a value equivalent
 to {@code direction} is returned.

 &lt;li&gt; If {@code start} is
 &amp;plusmn;{@link Float#MIN_VALUE} and {@code direction}
 has a value such that the result should have a smaller
 magnitude, then a zero with the same sign as {@code start}
 is returned.

 &lt;li&gt; If {@code start} is infinite and
 {@code direction} has a value such that the result should
 have a smaller magnitude, {@link Float#MAX_VALUE} with the
 same sign as {@code start} is returned.

 &lt;li&gt; If {@code start} is equal to &amp;plusmn;
 {@link Float#MAX_VALUE} and {@code direction} has a
 value such that the result should have a larger magnitude, an
 infinity with same sign as {@code start} is returned.
 &lt;/ul&gt;</description>
					<attribute name="@param">
						<description>start  starting floating-point value</description>
					</attribute>
					<attribute name="@param">
						<description>direction value indicating which of
 {@code start}&apos;s neighbors or {@code start} should
 be returned</description>
					</attribute>
					<attribute name="@return">
						<description>The floating-point number adjacent to {@code start} in the
 direction of {@code direction}.</description>
					</attribute>
					<attribute name="@since">
						<description>1.6</description>
					</attribute>
				</comment>
				<params>
					<param name="start" comment="starting floating-point value" fulltype="float" type="float" />
					<param name="direction" comment="value indicating which of
 {@code start}&apos;s neighbors or {@code start} should
 be returned" fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="nextUp" returncomment="The adjacent floating-point value closer to positive
 infinity." fulltype="double" type="double">
				<comment>
					<description>Returns the floating-point value adjacent to {@code d} in
 the direction of positive infinity.  This method is
 semantically equivalent to {@code nextAfter(d,
 Double.POSITIVE_INFINITY)}; however, a {@code nextUp}
 implementation may run faster than its equivalent
 {@code nextAfter} call.

 &lt;p&gt;Special Cases:
 &lt;ul&gt;
 &lt;li&gt; If the argument is NaN, the result is NaN.

 &lt;li&gt; If the argument is positive infinity, the result is
 positive infinity.

 &lt;li&gt; If the argument is zero, the result is
 {@link Double#MIN_VALUE}

 &lt;/ul&gt;</description>
					<attribute name="@param">
						<description>d starting floating-point value</description>
					</attribute>
					<attribute name="@return">
						<description>The adjacent floating-point value closer to positive
 infinity.</description>
					</attribute>
					<attribute name="@since">
						<description>1.6</description>
					</attribute>
				</comment>
				<params>
					<param name="d" comment="starting floating-point value" fulltype="double" type="double" />
				</params>
			</method>
			<method static="true" visibility="public" name="nextUp" returncomment="The adjacent floating-point value closer to positive
 infinity." fulltype="float" type="float">
				<comment>
					<description>Returns the floating-point value adjacent to {@code f} in
 the direction of positive infinity.  This method is
 semantically equivalent to {@code nextAfter(f,
 Float.POSITIVE_INFINITY)}; however, a {@code nextUp}
 implementation may run faster than its equivalent
 {@code nextAfter} call.

 &lt;p&gt;Special Cases:
 &lt;ul&gt;
 &lt;li&gt; If the argument is NaN, the result is NaN.

 &lt;li&gt; If the argument is positive infinity, the result is
 positive infinity.

 &lt;li&gt; If the argument is zero, the result is
 {@link Float#MIN_VALUE}

 &lt;/ul&gt;</description>
					<attribute name="@param">
						<description>f starting floating-point value</description>
					</attribute>
					<attribute name="@return">
						<description>The adjacent floating-point value closer to positive
 infinity.</description>
					</attribute>
					<attribute name="@since">
						<description>1.6</description>
					</attribute>
				</comment>
				<params>
					<param name="f" comment="starting floating-point value" fulltype="float" type="float" />
				</params>
			</method>
			<method static="true" visibility="public" name="scalb" returncomment="{@code d} &amp;times; 2&lt;sup&gt;{@code scaleFactor}&lt;/sup&gt;" fulltype="double" type="double">
				<comment>
					<description>Return {@code d} &amp;times;
 2&lt;sup&gt;{@code scaleFactor}&lt;/sup&gt; rounded as if performed
 by a single correctly rounded floating-point multiply to a
 member of the double value set.  See the Java
 Language Specification for a discussion of floating-point
 value sets.  If the exponent of the result is between {@link
 Double#MIN_EXPONENT} and {@link Double#MAX_EXPONENT}, the
 answer is calculated exactly.  If the exponent of the result
 would be larger than {@code Double.MAX_EXPONENT}, an
 infinity is returned.  Note that if the result is subnormal,
 precision may be lost; that is, when {@code scalb(x, n)}
 is subnormal, {@code scalb(scalb(x, n), -n)} may not equal
 &lt;i&gt;x&lt;/i&gt;.  When the result is non-NaN, the result has the same
 sign as {@code d}.

 &lt;p&gt;Special cases:
 &lt;ul&gt;
 &lt;li&gt; If the first argument is NaN, NaN is returned.
 &lt;li&gt; If the first argument is infinite, then an infinity of the
 same sign is returned.
 &lt;li&gt; If the first argument is zero, then a zero of the same
 sign is returned.
 &lt;/ul&gt;</description>
					<attribute name="@param">
						<description>d number to be scaled by a power of two.</description>
					</attribute>
					<attribute name="@param">
						<description>scaleFactor power of 2 used to scale {@code d}</description>
					</attribute>
					<attribute name="@return">
						<description>{@code d} &amp;times; 2&lt;sup&gt;{@code scaleFactor}&lt;/sup&gt;</description>
					</attribute>
					<attribute name="@since">
						<description>1.6</description>
					</attribute>
				</comment>
				<params>
					<param name="d" comment="number to be scaled by a power of two." fulltype="double" type="double" />
					<param name="scaleFactor" comment="power of 2 used to scale {@code d}" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="scalb" returncomment="{@code f} &amp;times; 2&lt;sup&gt;{@code scaleFactor}&lt;/sup&gt;" fulltype="float" type="float">
				<comment>
					<description>Return {@code f} &amp;times;
 2&lt;sup&gt;{@code scaleFactor}&lt;/sup&gt; rounded as if performed
 by a single correctly rounded floating-point multiply to a
 member of the float value set.  See the Java
 Language Specification for a discussion of floating-point
 value sets.  If the exponent of the result is between {@link
 Float#MIN_EXPONENT} and {@link Float#MAX_EXPONENT}, the
 answer is calculated exactly.  If the exponent of the result
 would be larger than {@code Float.MAX_EXPONENT}, an
 infinity is returned.  Note that if the result is subnormal,
 precision may be lost; that is, when {@code scalb(x, n)}
 is subnormal, {@code scalb(scalb(x, n), -n)} may not equal
 &lt;i&gt;x&lt;/i&gt;.  When the result is non-NaN, the result has the same
 sign as {@code f}.

 &lt;p&gt;Special cases:
 &lt;ul&gt;
 &lt;li&gt; If the first argument is NaN, NaN is returned.
 &lt;li&gt; If the first argument is infinite, then an infinity of the
 same sign is returned.
 &lt;li&gt; If the first argument is zero, then a zero of the same
 sign is returned.
 &lt;/ul&gt;</description>
					<attribute name="@param">
						<description>f number to be scaled by a power of two.</description>
					</attribute>
					<attribute name="@param">
						<description>scaleFactor power of 2 used to scale {@code f}</description>
					</attribute>
					<attribute name="@return">
						<description>{@code f} &amp;times; 2&lt;sup&gt;{@code scaleFactor}&lt;/sup&gt;</description>
					</attribute>
					<attribute name="@since">
						<description>1.6</description>
					</attribute>
				</comment>
				<params>
					<param name="f" comment="number to be scaled by a power of two." fulltype="float" type="float" />
					<param name="scaleFactor" comment="power of 2 used to scale {@code f}" fulltype="int" type="int" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="java.lang" interface="true" fulltype="java.lang.Appendable" type="Appendable">
		<comment>
			<description>An object to which &lt;tt&gt;char&lt;/tt&gt; sequences and values can be appended.  The
 &lt;tt&gt;Appendable&lt;/tt&gt; interface must be implemented by any class whose
 instances are intended to receive formatted output from a {@link
 java.util.Formatter}.

 &lt;p&gt; The characters to be appended should be valid Unicode characters as
 described in &lt;a href=&quot;Character.html#unicode&quot;&gt;Unicode Character
 Representation&lt;/a&gt;.  Note that supplementary characters may be composed of
 multiple 16-bit &lt;tt&gt;char&lt;/tt&gt; values.

 &lt;p&gt; Appendables are not necessarily safe for multithreaded access.  Thread
 safety is the responsibility of classes that extend and implement this
 interface.

 &lt;p&gt; Since this interface may be implemented by existing classes
 with different styles of error handling there is no guarantee that
 errors will be propagated to the invoker.</description>
			<attribute name="@since">
				<description>1.5</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="append" returncomment="A reference to this &lt;tt&gt;Appendable&lt;/tt&gt;" fulltype="java.lang.Appendable" type="Appendable">
				<comment>
					<description>Appends the specified character sequence to this &lt;tt&gt;Appendable&lt;/tt&gt;.

 &lt;p&gt; Depending on which class implements the character sequence
 &lt;tt&gt;csq&lt;/tt&gt;, the entire sequence may not be appended.  For
 instance, if &lt;tt&gt;csq&lt;/tt&gt; is a {@link java.nio.CharBuffer} then
 the subsequence to append is defined by the buffer&apos;s position and limit.</description>
					<attribute name="@param">
						<description>csq
         The character sequence to append.  If &lt;tt&gt;csq&lt;/tt&gt; is
         &lt;tt&gt;null&lt;/tt&gt;, then the four characters &lt;tt&gt;&quot;null&quot;&lt;/tt&gt; are
         appended to this Appendable.</description>
					</attribute>
					<attribute name="@return">
						<description>A reference to this &lt;tt&gt;Appendable&lt;/tt&gt;</description>
					</attribute>
					<attribute name="@throws">
						<description>IOException
          If an I/O error occurs</description>
					</attribute>
				</comment>
				<params>
					<param name="csq" comment="The character sequence to append.  If &lt;tt&gt;csq&lt;/tt&gt; is
         &lt;tt&gt;null&lt;/tt&gt;, then the four characters &lt;tt&gt;&quot;null&quot;&lt;/tt&gt; are
         appended to this Appendable." fulltype="java.lang.CharSequence" type="CharSequence" />
				</params>
				<exceptions>
					<exception comment="If an I/O error occurs" fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="public" name="append" returncomment="A reference to this &lt;tt&gt;Appendable&lt;/tt&gt;" fulltype="java.lang.Appendable" type="Appendable">
				<comment>
					<description>Appends a subsequence of the specified character sequence to this
 &lt;tt&gt;Appendable&lt;/tt&gt;.

 &lt;p&gt; An invocation of this method of the form &lt;tt&gt;out.append(csq, start,
 end)&lt;/tt&gt; when &lt;tt&gt;csq&lt;/tt&gt; is not &lt;tt&gt;null&lt;/tt&gt;, behaves in
 exactly the same way as the invocation

 &lt;pre&gt;
     out.append(csq.subSequence(start, end)) &lt;/pre&gt;</description>
					<attribute name="@param">
						<description>csq
         The character sequence from which a subsequence will be
         appended.  If &lt;tt&gt;csq&lt;/tt&gt; is &lt;tt&gt;null&lt;/tt&gt;, then characters
         will be appended as if &lt;tt&gt;csq&lt;/tt&gt; contained the four
         characters &lt;tt&gt;&quot;null&quot;&lt;/tt&gt;.</description>
					</attribute>
					<attribute name="@param">
						<description>start
         The index of the first character in the subsequence</description>
					</attribute>
					<attribute name="@param">
						<description>end
         The index of the character following the last character in the
         subsequence</description>
					</attribute>
					<attribute name="@return">
						<description>A reference to this &lt;tt&gt;Appendable&lt;/tt&gt;</description>
					</attribute>
					<attribute name="@throws">
						<description>IndexOutOfBoundsException
          If &lt;tt&gt;start&lt;/tt&gt; or &lt;tt&gt;end&lt;/tt&gt; are negative, &lt;tt&gt;start&lt;/tt&gt;
          is greater than &lt;tt&gt;end&lt;/tt&gt;, or &lt;tt&gt;end&lt;/tt&gt; is greater than
          &lt;tt&gt;csq.length()&lt;/tt&gt;</description>
					</attribute>
					<attribute name="@throws">
						<description>IOException
          If an I/O error occurs</description>
					</attribute>
				</comment>
				<params>
					<param name="csq" comment="The character sequence from which a subsequence will be
         appended.  If &lt;tt&gt;csq&lt;/tt&gt; is &lt;tt&gt;null&lt;/tt&gt;, then characters
         will be appended as if &lt;tt&gt;csq&lt;/tt&gt; contained the four
         characters &lt;tt&gt;&quot;null&quot;&lt;/tt&gt;." fulltype="java.lang.CharSequence" type="CharSequence" />
					<param name="start" comment="The index of the first character in the subsequence" fulltype="int" type="int" />
					<param name="end" comment="The index of the character following the last character in the
         subsequence" fulltype="int" type="int" />
				</params>
				<exceptions>
					<exception comment="If an I/O error occurs" fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="public" name="append" returncomment="A reference to this &lt;tt&gt;Appendable&lt;/tt&gt;" fulltype="java.lang.Appendable" type="Appendable">
				<comment>
					<description>Appends the specified character to this &lt;tt&gt;Appendable&lt;/tt&gt;.</description>
					<attribute name="@param">
						<description>c
         The character to append</description>
					</attribute>
					<attribute name="@return">
						<description>A reference to this &lt;tt&gt;Appendable&lt;/tt&gt;</description>
					</attribute>
					<attribute name="@throws">
						<description>IOException
          If an I/O error occurs</description>
					</attribute>
				</comment>
				<params>
					<param name="c" comment="The character to append" fulltype="char" type="char" />
				</params>
				<exceptions>
					<exception comment="If an I/O error occurs" fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="ClassFormatError" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.ClassFormatError" fulltype="java.lang.UnsupportedClassVersionError" type="UnsupportedClassVersionError">
		<comment>
			<description>Thrown when the Java Virtual Machine attempts to read a class
 file and determines that the major and minor version numbers
 in the file are not supported.</description>
			<attribute name="@since">
				<description>1.2</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="UnsupportedClassVersionError">
				<comment>
					<description>Constructs a &lt;code&gt;UnsupportedClassVersionError&lt;/code&gt;
 with no detail message.</description>
				</comment>
			</constructor>
			<constructor visibility="public" name="UnsupportedClassVersionError">
				<comment>
					<description>Constructs a &lt;code&gt;UnsupportedClassVersionError&lt;/code&gt; with
 the specified detail message.</description>
					<attribute name="@param">
						<description>s   the detail message.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the detail message." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="java.lang" superclassfulltype="java.lang.Object" fulltype="java.lang.Package" type="Package">
		<implements>
			<interface fulltype="java.lang.reflect.AnnotatedElement" type="AnnotatedElement" />
		</implements>
		<comment>
			<description>{@code Package} objects contain version information
 about the implementation and specification of a Java package.
 This versioning information is retrieved and made available
 by the {@link ClassLoader} instance that
 loaded the class(es).  Typically, it is stored in the manifest that is
 distributed with the classes.

 &lt;p&gt;The set of classes that make up the package may implement a
 particular specification and if so the specification title, version number,
 and vendor strings identify that specification.
 An application can ask if the package is
 compatible with a particular version, see the {@link
 #isCompatibleWith isCompatibleWith}
 method for details.

 &lt;p&gt;Specification version numbers use a syntax that consists of nonnegative
 decimal integers separated by periods &quot;.&quot;, for example &quot;2.0&quot; or
 &quot;1.2.3.4.5.6.7&quot;.  This allows an extensible number to be used to represent
 major, minor, micro, etc. versions.  The version specification is described
 by the following formal grammar:
 &lt;blockquote&gt;
 &lt;dl&gt;
 &lt;dt&gt;&lt;i&gt;SpecificationVersion:
 &lt;dd&gt;Digits RefinedVersion&lt;sub&gt;opt&lt;/sub&gt;&lt;/i&gt;

 &lt;p&gt;&lt;dt&gt;&lt;i&gt;RefinedVersion:&lt;/i&gt;
 &lt;dd&gt;{@code .} &lt;i&gt;Digits&lt;/i&gt;
 &lt;dd&gt;{@code .} &lt;i&gt;Digits RefinedVersion&lt;/i&gt;

 &lt;p&gt;&lt;dt&gt;&lt;i&gt;Digits:
 &lt;dd&gt;Digit
 &lt;dd&gt;Digits&lt;/i&gt;

 &lt;p&gt;&lt;dt&gt;&lt;i&gt;Digit:&lt;/i&gt;
 &lt;dd&gt;any character for which {@link Character#isDigit} returns {@code true},
 e.g. 0, 1, 2, ...
 &lt;/dl&gt;
 &lt;/blockquote&gt;

 &lt;p&gt;The implementation title, version, and vendor strings identify an
 implementation and are made available conveniently to enable accurate
 reporting of the packages involved when a problem occurs. The contents
 all three implementation strings are vendor specific. The
 implementation version strings have no specified syntax and should
 only be compared for equality with desired version identifiers.

 &lt;p&gt;Within each {@code ClassLoader} instance all classes from the same
 java package have the same Package object.  The static methods allow a package
 to be found by name or the set of all packages known to the current class
 loader to be found.</description>
			<attribute name="@see">
				<description>ClassLoader#definePackage</description>
			</attribute>
		</comment>
		<fields>
			<field static="true" visibility="private" name="pkgs" fulltype="java.util.Map" type="Map" />
			<field static="true" visibility="private" name="urls" fulltype="java.util.Map" type="Map" />
			<field static="true" visibility="private" name="mans" fulltype="java.util.Map" type="Map" />
			<field final="true" visibility="private" name="pkgName" fulltype="java.lang.String" type="String" />
			<field final="true" visibility="private" name="specTitle" fulltype="java.lang.String" type="String" />
			<field final="true" visibility="private" name="specVersion" fulltype="java.lang.String" type="String" />
			<field final="true" visibility="private" name="specVendor" fulltype="java.lang.String" type="String" />
			<field final="true" visibility="private" name="implTitle" fulltype="java.lang.String" type="String" />
			<field final="true" visibility="private" name="implVersion" fulltype="java.lang.String" type="String" />
			<field final="true" visibility="private" name="implVendor" fulltype="java.lang.String" type="String" />
			<field final="true" visibility="private" name="sealBase" fulltype="java.net.URL" type="URL" />
			<field final="true" visibility="private" transient="true" name="loader" fulltype="java.lang.ClassLoader" type="ClassLoader" />
			<field visibility="private" transient="true" name="packageInfo" fulltype="java.lang.Class" type="Class" />
		</fields>
		<methods>
			<constructor visibility="package-private" name="Package">
				<comment>
					<description>Construct a package instance with the specified version
 information.</description>
					<attribute name="@param">
						<description>pkgName the name of the package</description>
					</attribute>
					<attribute name="@param">
						<description>spectitle the title of the specification</description>
					</attribute>
					<attribute name="@param">
						<description>specversion the version of the specification</description>
					</attribute>
					<attribute name="@param">
						<description>specvendor the organization that maintains the specification</description>
					</attribute>
					<attribute name="@param">
						<description>impltitle the title of the implementation</description>
					</attribute>
					<attribute name="@param">
						<description>implversion the version of the implementation</description>
					</attribute>
					<attribute name="@param">
						<description>implvendor the organization that maintains the implementation</description>
					</attribute>
					<attribute name="@return">
						<description>a new package for containing the specified information.</description>
					</attribute>
				</comment>
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="spectitle" comment="the title of the specification" fulltype="java.lang.String" type="String" />
					<param name="specversion" comment="the version of the specification" fulltype="java.lang.String" type="String" />
					<param name="specvendor" comment="the organization that maintains the specification" fulltype="java.lang.String" type="String" />
					<param name="impltitle" comment="the title of the implementation" fulltype="java.lang.String" type="String" />
					<param name="implversion" comment="the version of the implementation" fulltype="java.lang.String" type="String" />
					<param name="implvendor" comment="the organization that maintains the implementation" fulltype="java.lang.String" type="String" />
					<param name="sealbase" fulltype="java.net.URL" type="URL" />
					<param name="loader" fulltype="java.lang.ClassLoader" type="ClassLoader" />
				</params>
			</constructor>
			<constructor visibility="private" name="Package">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="man" fulltype="java.util.jar.Manifest" type="Manifest" />
					<param name="url" fulltype="java.net.URL" type="URL" />
					<param name="loader" fulltype="java.lang.ClassLoader" type="ClassLoader" />
				</params>
			</constructor>
			<method visibility="public" name="getName" returncomment="The fully-qualified name of this package as defined in the
          &lt;em&gt;Java Language Specification, Third Edition&lt;/em&gt;
          &lt;a href=&quot;http://java.sun.com/docs/books/jls/third_edition/html/names.html#6.5.3&quot;&gt;
          &amp;sect;6.5.3&lt;/a&gt;, for example, {@code java.lang}" fulltype="java.lang.String" type="String">
				<comment>
					<description>Return the name of this package.</description>
					<attribute name="@return">
						<description>The fully-qualified name of this package as defined in the
          &lt;em&gt;Java Language Specification, Third Edition&lt;/em&gt;
          &lt;a href=&quot;http://java.sun.com/docs/books/jls/third_edition/html/names.html#6.5.3&quot;&gt;
          &amp;sect;6.5.3&lt;/a&gt;, for example, {@code java.lang}</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getSpecificationTitle" returncomment="the specification title, null is returned if it is not known." fulltype="java.lang.String" type="String">
				<comment>
					<description>Return the title of the specification that this package implements.</description>
					<attribute name="@return">
						<description>the specification title, null is returned if it is not known.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getSpecificationVersion" returncomment="the specification version, null is returned if it is not known." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the version number of the specification
 that this package implements.
 This version string must be a sequence of nonnegative decimal
 integers separated by &quot;.&quot;&apos;s and may have leading zeros.
 When version strings are compared the most significant
 numbers are compared.</description>
					<attribute name="@return">
						<description>the specification version, null is returned if it is not known.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getSpecificationVendor" returncomment="the specification vendor, null is returned if it is not known." fulltype="java.lang.String" type="String">
				<comment>
					<description>Return the name of the organization, vendor,
 or company that owns and maintains the specification
 of the classes that implement this package.</description>
					<attribute name="@return">
						<description>the specification vendor, null is returned if it is not known.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getImplementationTitle" returncomment="the title of the implementation, null is returned if it is not known." fulltype="java.lang.String" type="String">
				<comment>
					<description>Return the title of this package.</description>
					<attribute name="@return">
						<description>the title of the implementation, null is returned if it is not known.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getImplementationVersion" returncomment="the version of the implementation, null is returned if it is not known." fulltype="java.lang.String" type="String">
				<comment>
					<description>Return the version of this implementation. It consists of any string
 assigned by the vendor of this implementation and does
 not have any particular syntax specified or expected by the Java
 runtime. It may be compared for equality with other
 package version strings used for this implementation
 by this vendor for this package.</description>
					<attribute name="@return">
						<description>the version of the implementation, null is returned if it is not known.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getImplementationVendor" returncomment="the vendor that implemented this package.." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the name of the organization,
 vendor or company that provided this implementation.</description>
					<attribute name="@return">
						<description>the vendor that implemented this package..</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="isSealed" returncomment="true if the package is sealed, false otherwise" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true if this package is sealed.</description>
					<attribute name="@return">
						<description>true if the package is sealed, false otherwise</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="isSealed" returncomment="true if this package is sealed with respect to url" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true if this package is sealed with respect to the specified
 code source url.</description>
					<attribute name="@param">
						<description>url the code source url</description>
					</attribute>
					<attribute name="@return">
						<description>true if this package is sealed with respect to url</description>
					</attribute>
				</comment>
				<params>
					<param name="url" comment="the code source url" fulltype="java.net.URL" type="URL" />
				</params>
			</method>
			<method visibility="public" name="isCompatibleWith" returncomment="true if this package&apos;s version number is greater
          than or equal to the desired version number" fulltype="boolean" type="boolean">
				<comment>
					<description>Compare this package&apos;s specification version with a
 desired version. It returns true if
 this packages specification version number is greater than or equal
 to the desired version number. &lt;p&gt;

 Version numbers are compared by sequentially comparing corresponding
 components of the desired and specification strings.
 Each component is converted as a decimal integer and the values
 compared.
 If the specification value is greater than the desired
 value true is returned. If the value is less false is returned.
 If the values are equal the period is skipped and the next pair of
 components is compared.</description>
					<attribute name="@param">
						<description>desired the version string of the desired version.</description>
					</attribute>
					<attribute name="@return">
						<description>true if this package&apos;s version number is greater
          than or equal to the desired version number</description>
					</attribute>
					<attribute name="@exception">
						<description>NumberFormatException if the desired or current version
          is not of the correct dotted form.</description>
					</attribute>
				</comment>
				<params>
					<param name="desired" comment="the version string of the desired version." fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception comment="if the desired or current version
          is not of the correct dotted form." fulltype="java.lang.NumberFormatException" type="NumberFormatException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="getPackage" returncomment="the package of the requested name. It may be null if no package
          information is available from the archive or codebase." fulltype="java.lang.Package" type="Package">
				<comment>
					<description>Find a package by name in the callers {@code ClassLoader} instance.
 The callers {@code ClassLoader} instance is used to find the package
 instance corresponding to the named class. If the callers
 {@code ClassLoader} instance is null then the set of packages loaded
 by the system {@code ClassLoader} instance is searched to find the
 named package. &lt;p&gt;

 Packages have attributes for versions and specifications only if the class
 loader created the package instance with the appropriate attributes. Typically,
 those attributes are defined in the manifests that accompany the classes.</description>
					<attribute name="@param">
						<description>name a package name, for example, java.lang.</description>
					</attribute>
					<attribute name="@return">
						<description>the package of the requested name. It may be null if no package
          information is available from the archive or codebase.</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="a package name, for example, java.lang." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getPackages" returncomment="a new array of packages known to the callers {@code ClassLoader}
 instance.  An zero length array is returned if none are known." fulltype="java.lang.Package[]" type="Package">
				<comment>
					<description>Get all the packages currently known for the caller&apos;s {@code ClassLoader}
 instance.  Those packages correspond to classes loaded via or accessible by
 name to that {@code ClassLoader} instance.  If the caller&apos;s
 {@code ClassLoader} instance is the bootstrap {@code ClassLoader}
 instance, which may be represented by {@code null} in some implementations,
 only packages corresponding to classes loaded by the bootstrap
 {@code ClassLoader} instance will be returned.</description>
					<attribute name="@return">
						<description>a new array of packages known to the callers {@code ClassLoader}
 instance.  An zero length array is returned if none are known.</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="package-private" name="getPackage" returncomment="the package of the class. It may be null if no package
          information is available from the archive or codebase." fulltype="java.lang.Package" type="Package">
				<comment>
					<description>Get the package for the specified class.
 The class&apos;s class loader is used to find the package instance
 corresponding to the specified class. If the class loader
 is the bootstrap class loader, which may be represented by
 {@code null} in some implementations, then the set of packages
 loaded by the bootstrap class loader is searched to find the package.
 &lt;p&gt;
 Packages have attributes for versions and specifications only
 if the class loader created the package
 instance with the appropriate attributes. Typically those
 attributes are defined in the manifests that accompany
 the classes.</description>
					<attribute name="@param">
						<description>class the class to get the package of.</description>
					</attribute>
					<attribute name="@return">
						<description>the package of the class. It may be null if no package
          information is available from the archive or codebase.</description>
					</attribute>
				</comment>
				<params>
					<param name="c" fulltype="java.lang.Class" type="Class" />
				</params>
			</method>
			<method visibility="public" name="hashCode" returncomment="the hash code computed from the package name." fulltype="int" type="int">
				<comment>
					<description>Return the hash code computed from the package name.</description>
					<attribute name="@return">
						<description>the hash code computed from the package name.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="toString" returncomment="the string representation of the package." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the string representation of this Package.
 Its value is the string &quot;package &quot; and the package name.
 If the package title is defined it is appended.
 If the package version is defined it is appended.</description>
					<attribute name="@return">
						<description>the string representation of the package.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="private" name="getPackageInfo" fulltype="java.lang.Class" type="Class" />
			<method visibility="public" name="getAnnotation" fulltype="java.lang.annotation.Annotation" type="Annotation">
				<comment>
					<attribute name="@throws">
						<description>NullPointerException {@inheritDoc}</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="annotationClass" fulltype="java.lang.Class" type="Class" />
				</params>
			</method>
			<method visibility="public" name="isAnnotationPresent" fulltype="boolean" type="boolean">
				<comment>
					<attribute name="@throws">
						<description>NullPointerException {@inheritDoc}</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="annotationClass" fulltype="java.lang.Class" type="Class" />
				</params>
			</method>
			<method visibility="public" name="getAnnotations" fulltype="java.lang.annotation.Annotation[]" type="Annotation">
				<comment>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getDeclaredAnnotations" fulltype="java.lang.annotation.Annotation[]" type="Annotation">
				<comment>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="package-private" name="getSystemPackage" fulltype="java.lang.Package" type="Package">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="package-private" name="getSystemPackages" fulltype="java.lang.Package[]" type="Package" />
			<method static="true" visibility="private" name="defineSystemPackage" fulltype="java.lang.Package" type="Package">
				<params>
					<param name="iname" fulltype="java.lang.String" type="String" />
					<param name="fn" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="private" name="loadManifest" fulltype="java.util.jar.Manifest" type="Manifest">
				<params>
					<param name="fn" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="private" name="getSystemPackage0" fulltype="java.lang.String" type="String">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="private" name="getSystemPackages0" fulltype="java.lang.String[]" type="String" />
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="java.lang" interface="true" fulltype="java.lang.Deprecated" type="Deprecated">
		<implements>
			<interface fulltype="java.lang.annotation.Annotation" type="Annotation" />
		</implements>
		<comment>
			<description>A program element annotated &amp;#64;Deprecated is one that programmers
 are discouraged from using, typically because it is dangerous,
 or because a better alternative exists.  Compilers warn when a
 deprecated program element is used or overridden in non-deprecated code.</description>
			<attribute name="@author">
				<description>Neal Gafter</description>
			</attribute>
			<attribute name="@since">
				<description>1.5</description>
			</attribute>
		</comment>
	</jelclass>
	<jelclass superclass="Exception" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.Exception" fulltype="java.lang.InterruptedException" type="InterruptedException">
		<comment>
			<description>Thrown when a thread is waiting, sleeping, or otherwise occupied,
 and the thread is interrupted, either before or during the activity.
 Occasionally a method may wish to test whether the current
 thread has been interrupted, and if so, to immediately throw
 this exception.  The following code can be used to achieve
 this effect:
 &lt;pre&gt;
  if (Thread.interrupted())  // Clears interrupted status!
      throw new InterruptedException();
 &lt;/pre&gt;</description>
			<attribute name="@author">
				<description>Frank Yellin</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.Object#wait()</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.Object#wait(long)</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.Object#wait(long, int)</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.Thread#sleep(long)</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.Thread#interrupt()</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.Thread#interrupted()</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.0</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="InterruptedException">
				<comment>
					<description>Constructs an &lt;code&gt;InterruptedException&lt;/code&gt; with no detail  message.</description>
				</comment>
			</constructor>
			<constructor visibility="public" name="InterruptedException">
				<comment>
					<description>Constructs an &lt;code&gt;InterruptedException&lt;/code&gt; with the
 specified detail message.</description>
					<attribute name="@param">
						<description>s   the detail message.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the detail message." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass superclass="RuntimeException" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.RuntimeException" fulltype="java.lang.EnumConstantNotPresentException" type="EnumConstantNotPresentException">
		<comment>
			<description>Thrown when an application tries to access an enum constant by name
 and the enum type contains no constant with the specified name.</description>
			<attribute name="@author">
				<description>Josh Bloch</description>
			</attribute>
			<attribute name="@since">
				<description>1.5</description>
			</attribute>
		</comment>
		<fields>
			<field visibility="private" name="enumType" fulltype="java.lang.Class" type="Class">
				<comment>
					<description>The type of the missing enum constant.</description>
				</comment>
			</field>
			<field visibility="private" name="constantName" fulltype="java.lang.String" type="String">
				<comment>
					<description>The name of the missing enum constant.</description>
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="public" name="EnumConstantNotPresentException">
				<comment>
					<description>Constructs an &lt;tt&gt;EnumConstantNotPresentException&lt;/tt&gt; for the
 specified constant.</description>
					<attribute name="@param">
						<description>enumType the type of the missing enum constant</description>
					</attribute>
					<attribute name="@param">
						<description>constantName the name of the missing enum constant</description>
					</attribute>
				</comment>
				<params>
					<param name="enumType" comment="the type of the missing enum constant" fulltype="java.lang.Class" type="Class" />
					<param name="constantName" comment="the name of the missing enum constant" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="enumType" returncomment="the type of the missing enum constant" fulltype="java.lang.Class" type="Class">
				<comment>
					<description>Returns the type of the missing enum constant.</description>
					<attribute name="@return">
						<description>the type of the missing enum constant</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="constantName" returncomment="the name of the missing enum constant" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the name of the missing enum constant.</description>
					<attribute name="@return">
						<description>the name of the missing enum constant</description>
					</attribute>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="java.lang" superclassfulltype="java.lang.Object" fulltype="java.lang.ThreadGroup" type="ThreadGroup">
		<implements>
			<interface fulltype="java.lang.Thread.UncaughtExceptionHandler" type="Thread.UncaughtExceptionHandler" />
		</implements>
		<comment>
			<description>A thread group represents a set of threads. In addition, a thread
 group can also include other thread groups. The thread groups form
 a tree in which every thread group except the initial thread group
 has a parent.
 &lt;p&gt;
 A thread is allowed to access information about its own thread
 group, but not to access information about its thread group&apos;s
 parent thread group or any other thread groups.</description>
			<attribute name="@author">
				<description>unascribed</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.0</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" visibility="private" name="parent" fulltype="java.lang.ThreadGroup" type="ThreadGroup" />
			<field visibility="package-private" name="name" fulltype="java.lang.String" type="String" />
			<field visibility="package-private" name="maxPriority" fulltype="int" type="int" />
			<field visibility="package-private" name="destroyed" fulltype="boolean" type="boolean" />
			<field visibility="package-private" name="daemon" fulltype="boolean" type="boolean" />
			<field visibility="package-private" name="vmAllowSuspension" fulltype="boolean" type="boolean" />
			<field visibility="package-private" name="nUnstartedThreads" fulltype="int" type="int" />
			<field visibility="package-private" name="nthreads" fulltype="int" type="int" />
			<field visibility="package-private" name="threads" fulltype="java.lang.Thread[]" type="Thread" />
			<field visibility="package-private" name="ngroups" fulltype="int" type="int" />
			<field visibility="package-private" name="groups" fulltype="java.lang.ThreadGroup[]" type="ThreadGroup" />
		</fields>
		<methods>
			<constructor visibility="private" name="ThreadGroup">
				<comment>
					<description>Creates an empty Thread group that is not in any Thread group.
 This method is used to create the system Thread group.</description>
				</comment>
			</constructor>
			<constructor visibility="public" name="ThreadGroup">
				<comment>
					<description>Constructs a new thread group. The parent of this new group is
 the thread group of the currently running thread.
 &lt;p&gt;
 The &lt;code&gt;checkAccess&lt;/code&gt; method of the parent thread group is
 called with no arguments; this may result in a security exception.</description>
					<attribute name="@param">
						<description>name   the name of the new thread group.</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException  if the current thread cannot create a
               thread in the specified thread group.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.ThreadGroup#checkAccess()</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.0</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="the name of the new thread group." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="ThreadGroup">
				<comment>
					<description>Creates a new thread group. The parent of this new group is the
 specified thread group.
 &lt;p&gt;
 The &lt;code&gt;checkAccess&lt;/code&gt; method of the parent thread group is
 called with no arguments; this may result in a security exception.</description>
					<attribute name="@param">
						<description>parent   the parent thread group.</description>
					</attribute>
					<attribute name="@param">
						<description>name     the name of the new thread group.</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException  if the thread group argument is
               &lt;code&gt;null&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException  if the current thread cannot create a
               thread in the specified thread group.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.SecurityException</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.ThreadGroup#checkAccess()</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.0</description>
					</attribute>
				</comment>
				<params>
					<param name="parent" comment="the parent thread group." fulltype="java.lang.ThreadGroup" type="ThreadGroup" />
					<param name="name" comment="the name of the new thread group." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="private" name="ThreadGroup">
				<params>
					<param name="unused" fulltype="java.lang.Void" type="Void" />
					<param name="parent" fulltype="java.lang.ThreadGroup" type="ThreadGroup" />
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method static="true" visibility="private" name="checkParentAccess" fulltype="java.lang.Void" type="Void">
				<params>
					<param name="parent" fulltype="java.lang.ThreadGroup" type="ThreadGroup" />
				</params>
			</method>
			<method final="true" visibility="public" name="getName" returncomment="the name of this thread group." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the name of this thread group.</description>
					<attribute name="@return">
						<description>the name of this thread group.</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.0</description>
					</attribute>
				</comment>
			</method>
			<method final="true" visibility="public" name="getParent" returncomment="the parent of this thread group. The top-level thread group
          is the only thread group whose parent is &lt;code&gt;null&lt;/code&gt;." fulltype="java.lang.ThreadGroup" type="ThreadGroup">
				<comment>
					<description>Returns the parent of this thread group.
 &lt;p&gt;
 First, if the parent is not &lt;code&gt;null&lt;/code&gt;, the
 &lt;code&gt;checkAccess&lt;/code&gt; method of the parent thread group is
 called with no arguments; this may result in a security exception.</description>
					<attribute name="@return">
						<description>the parent of this thread group. The top-level thread group
          is the only thread group whose parent is &lt;code&gt;null&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException  if the current thread cannot modify
               this thread group.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.ThreadGroup#checkAccess()</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.SecurityException</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.RuntimePermission</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.0</description>
					</attribute>
				</comment>
			</method>
			<method final="true" visibility="public" name="getMaxPriority" returncomment="the maximum priority that a thread in this thread group
          can have." fulltype="int" type="int">
				<comment>
					<description>Returns the maximum priority of this thread group. Threads that are
 part of this group cannot have a higher priority than the maximum
 priority.</description>
					<attribute name="@return">
						<description>the maximum priority that a thread in this thread group
          can have.</description>
					</attribute>
					<attribute name="@see">
						<description>#setMaxPriority</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.0</description>
					</attribute>
				</comment>
			</method>
			<method final="true" visibility="public" name="isDaemon" returncomment="&lt;code&gt;true&lt;/code&gt; if this thread group is a daemon thread group;
          &lt;code&gt;false&lt;/code&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Tests if this thread group is a daemon thread group. A
 daemon thread group is automatically destroyed when its last
 thread is stopped or its last thread group is destroyed.</description>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if this thread group is a daemon thread group;
          &lt;code&gt;false&lt;/code&gt; otherwise.</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.0</description>
					</attribute>
				</comment>
			</method>
			<method synchronized="true" visibility="public" name="isDestroyed" returncomment="true if this object is destroyed" fulltype="boolean" type="boolean">
				<comment>
					<description>Tests if this thread group has been destroyed.</description>
					<attribute name="@return">
						<description>true if this object is destroyed</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.1</description>
					</attribute>
				</comment>
			</method>
			<method final="true" visibility="public" name="setDaemon" fulltype="void" type="void">
				<comment>
					<description>Changes the daemon status of this thread group.
 &lt;p&gt;
 First, the &lt;code&gt;checkAccess&lt;/code&gt; method of this thread group is
 called with no arguments; this may result in a security exception.
 &lt;p&gt;
 A daemon thread group is automatically destroyed when its last
 thread is stopped or its last thread group is destroyed.</description>
					<attribute name="@param">
						<description>daemon   if &lt;code&gt;true&lt;/code&gt;, marks this thread group as
                      a daemon thread group; otherwise, marks this
                      thread group as normal.</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException  if the current thread cannot modify
               this thread group.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.SecurityException</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.ThreadGroup#checkAccess()</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.0</description>
					</attribute>
				</comment>
				<params>
					<param name="daemon" comment="if &lt;code&gt;true&lt;/code&gt;, marks this thread group as
                      a daemon thread group; otherwise, marks this
                      thread group as normal." fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method final="true" visibility="public" name="setMaxPriority" fulltype="void" type="void">
				<comment>
					<description>Sets the maximum priority of the group. Threads in the thread
 group that already have a higher priority are not affected.
 &lt;p&gt;
 First, the &lt;code&gt;checkAccess&lt;/code&gt; method of this thread group is
 called with no arguments; this may result in a security exception.
 &lt;p&gt;
 If the &lt;code&gt;pri&lt;/code&gt; argument is less than
 {@link Thread#MIN_PRIORITY} or greater than
 {@link Thread#MAX_PRIORITY}, the maximum priority of the group
 remains unchanged.
 &lt;p&gt;
 Otherwise, the priority of this ThreadGroup object is set to the
 smaller of the specified &lt;code&gt;pri&lt;/code&gt; and the maximum permitted
 priority of the parent of this thread group. (If this thread group
 is the system thread group, which has no parent, then its maximum
 priority is simply set to &lt;code&gt;pri&lt;/code&gt;.) Then this method is
 called recursively, with &lt;code&gt;pri&lt;/code&gt; as its argument, for
 every thread group that belongs to this thread group.</description>
					<attribute name="@param">
						<description>pri   the new priority of the thread group.</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException  if the current thread cannot modify
               this thread group.</description>
					</attribute>
					<attribute name="@see">
						<description>#getMaxPriority</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.SecurityException</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.ThreadGroup#checkAccess()</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.0</description>
					</attribute>
				</comment>
				<params>
					<param name="pri" comment="the new priority of the thread group." fulltype="int" type="int" />
				</params>
			</method>
			<method final="true" visibility="public" name="parentOf" returncomment="&lt;code&gt;true&lt;/code&gt; if this thread group is the thread group
          argument or one of its ancestor thread groups;
          &lt;code&gt;false&lt;/code&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Tests if this thread group is either the thread group
 argument or one of its ancestor thread groups.</description>
					<attribute name="@param">
						<description>g   a thread group.</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if this thread group is the thread group
          argument or one of its ancestor thread groups;
          &lt;code&gt;false&lt;/code&gt; otherwise.</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.0</description>
					</attribute>
				</comment>
				<params>
					<param name="g" comment="a thread group." fulltype="java.lang.ThreadGroup" type="ThreadGroup" />
				</params>
			</method>
			<method final="true" visibility="public" name="checkAccess" fulltype="void" type="void">
				<comment>
					<description>Determines if the currently running thread has permission to
 modify this thread group.
 &lt;p&gt;
 If there is a security manager, its &lt;code&gt;checkAccess&lt;/code&gt; method
 is called with this thread group as its argument. This may result
 in throwing a &lt;code&gt;SecurityException&lt;/code&gt;.</description>
					<attribute name="@exception">
						<description>SecurityException  if the current thread is not allowed to
               access this thread group.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.SecurityManager#checkAccess(java.lang.ThreadGroup)</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.0</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="activeCount" returncomment="an estimate of the number of active threads in this thread
          group and in any other thread group that has this thread
          group as an ancestor." fulltype="int" type="int">
				<comment>
					<description>Returns an estimate of the number of active threads in this
 thread group.  The result might not reflect concurrent activity,
 and might be affected by the presence of certain system threads.
 &lt;p&gt;
 Due to the inherently imprecise nature of the result, it is
 recommended that this method only be used for informational purposes.</description>
					<attribute name="@return">
						<description>an estimate of the number of active threads in this thread
          group and in any other thread group that has this thread
          group as an ancestor.</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.0</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="enumerate" returncomment="the number of threads put into the array." fulltype="int" type="int">
				<comment>
					<description>Copies into the specified array every active thread in this
 thread group and its subgroups.
 &lt;p&gt;
 First, the &lt;code&gt;checkAccess&lt;/code&gt; method of this thread group is
 called with no arguments; this may result in a security exception.
 &lt;p&gt;
 An application might use the &lt;code&gt;activeCount&lt;/code&gt; method to
 get an estimate of how big the array should be, however &lt;i&gt;if the
 array is too short to hold all the threads, the extra threads are
 silently ignored.&lt;/i&gt;  If it is critical to obtain every active
 thread in this thread group and its subgroups, the caller should
 verify that the returned int value is strictly less than the length
 of &lt;tt&gt;list&lt;/tt&gt;.
 &lt;p&gt;
 Due to the inherent race condition in this method, it is recommended
 that the method only be used for informational purposes.</description>
					<attribute name="@param">
						<description>list   an array into which to place the list of threads.</description>
					</attribute>
					<attribute name="@return">
						<description>the number of threads put into the array.</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException  if the current thread does not
               have permission to enumerate this thread group.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.ThreadGroup#activeCount()</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.ThreadGroup#checkAccess()</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.0</description>
					</attribute>
				</comment>
				<params>
					<param name="list" comment="an array into which to place the list of threads." fulltype="java.lang.Thread[]" type="Thread" />
				</params>
			</method>
			<method visibility="public" name="enumerate" returncomment="the number of threads placed into the array." fulltype="int" type="int">
				<comment>
					<description>Copies into the specified array every active thread in this
 thread group. If the &lt;code&gt;recurse&lt;/code&gt; flag is
 &lt;code&gt;true&lt;/code&gt;, references to every active thread in this
 thread&apos;s subgroups are also included. If the array is too short to
 hold all the threads, the extra threads are silently ignored.
 &lt;p&gt;
 First, the &lt;code&gt;checkAccess&lt;/code&gt; method of this thread group is
 called with no arguments; this may result in a security exception.
 &lt;p&gt;
 An application might use the &lt;code&gt;activeCount&lt;/code&gt; method to
 get an estimate of how big the array should be, however &lt;i&gt;if the
 array is too short to hold all the threads, the extra threads are
 silently ignored.&lt;/i&gt;  If it is critical to obtain every active thread
 in this thread group, the caller should verify that the returned int
 value is strictly less than the length of &lt;tt&gt;list&lt;/tt&gt;.
 &lt;p&gt;
 Due to the inherent race condition in this method, it is recommended
 that the method only be used for informational purposes.</description>
					<attribute name="@param">
						<description>list      an array into which to place the list of threads.</description>
					</attribute>
					<attribute name="@param">
						<description>recurse   a flag indicating whether also to include threads
                    in thread groups that are subgroups of this
                    thread group.</description>
					</attribute>
					<attribute name="@return">
						<description>the number of threads placed into the array.</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException  if the current thread does not
               have permission to enumerate this thread group.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.ThreadGroup#activeCount()</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.ThreadGroup#checkAccess()</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.0</description>
					</attribute>
				</comment>
				<params>
					<param name="list" comment="an array into which to place the list of threads." fulltype="java.lang.Thread[]" type="Thread" />
					<param name="recurse" comment="a flag indicating whether also to include threads
                    in thread groups that are subgroups of this
                    thread group." fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="private" name="enumerate" fulltype="int" type="int">
				<params>
					<param name="list" fulltype="java.lang.Thread[]" type="Thread" />
					<param name="n" fulltype="int" type="int" />
					<param name="recurse" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="activeGroupCount" returncomment="the number of active thread groups with this thread group as
          an ancestor." fulltype="int" type="int">
				<comment>
					<description>Returns an estimate of the number of active groups in this
 thread group.  The result might not reflect concurrent activity.
 &lt;p&gt;
 Due to the inherently imprecise nature of the result, it is
 recommended that this method only be used for informational purposes.</description>
					<attribute name="@return">
						<description>the number of active thread groups with this thread group as
          an ancestor.</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.0</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="enumerate" returncomment="the number of thread groups put into the array." fulltype="int" type="int">
				<comment>
					<description>Copies into the specified array references to every active
 subgroup in this thread group.
 &lt;p&gt;
 First, the &lt;code&gt;checkAccess&lt;/code&gt; method of this thread group is
 called with no arguments; this may result in a security exception.
 &lt;p&gt;
 An application might use the &lt;code&gt;activeGroupCount&lt;/code&gt; method to
 get an estimate of how big the array should be, however &lt;i&gt;if the
 array is too short to hold all the thread groups, the extra thread
 groups are silently ignored.&lt;/i&gt;  If it is critical to obtain every
 active subgroup in this thread group, the caller should verify that
 the returned int value is strictly less than the length of
 &lt;tt&gt;list&lt;/tt&gt;.
 &lt;p&gt;
 Due to the inherent race condition in this method, it is recommended
 that the method only be used for informational purposes.</description>
					<attribute name="@param">
						<description>list   an array into which to place the list of thread groups.</description>
					</attribute>
					<attribute name="@return">
						<description>the number of thread groups put into the array.</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException  if the current thread does not
               have permission to enumerate this thread group.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.ThreadGroup#activeGroupCount()</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.ThreadGroup#checkAccess()</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.0</description>
					</attribute>
				</comment>
				<params>
					<param name="list" comment="an array into which to place the list of thread groups." fulltype="java.lang.ThreadGroup[]" type="ThreadGroup" />
				</params>
			</method>
			<method visibility="public" name="enumerate" returncomment="the number of thread groups put into the array." fulltype="int" type="int">
				<comment>
					<description>Copies into the specified array references to every active
 subgroup in this thread group. If the &lt;code&gt;recurse&lt;/code&gt; flag is
 &lt;code&gt;true&lt;/code&gt;, references to all active subgroups of the
 subgroups and so forth are also included.
 &lt;p&gt;
 First, the &lt;code&gt;checkAccess&lt;/code&gt; method of this thread group is
 called with no arguments; this may result in a security exception.
 &lt;p&gt;
 An application might use the &lt;code&gt;activeGroupCount&lt;/code&gt; method to
 get an estimate of how big the array should be, however &lt;i&gt;if the
 array is too short to hold all the thread groups, the extra thread
 groups are silently ignored.&lt;/i&gt;  If it is critical to obtain every
 active subgroup in this thread group, the caller should verify that
 the returned int value is strictly less than the length of
 &lt;tt&gt;list&lt;/tt&gt;.
 &lt;p&gt;
 Due to the inherent race condition in this method, it is recommended
 that the method only be used for informational purposes.</description>
					<attribute name="@param">
						<description>list      an array into which to place the list of threads.</description>
					</attribute>
					<attribute name="@param">
						<description>recurse   a flag indicating whether to recursively enumerate
                    all included thread groups.</description>
					</attribute>
					<attribute name="@return">
						<description>the number of thread groups put into the array.</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException  if the current thread does not
               have permission to enumerate this thread group.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.ThreadGroup#activeGroupCount()</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.ThreadGroup#checkAccess()</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.0</description>
					</attribute>
				</comment>
				<params>
					<param name="list" comment="an array into which to place the list of threads." fulltype="java.lang.ThreadGroup[]" type="ThreadGroup" />
					<param name="recurse" comment="a flag indicating whether to recursively enumerate
                    all included thread groups." fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="private" name="enumerate" fulltype="int" type="int">
				<params>
					<param name="list" fulltype="java.lang.ThreadGroup[]" type="ThreadGroup" />
					<param name="n" fulltype="int" type="int" />
					<param name="recurse" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method final="true" visibility="public" name="stop" fulltype="void" type="void">
				<comment>
					<description>Stops all threads in this thread group.
 &lt;p&gt;
 First, the &lt;code&gt;checkAccess&lt;/code&gt; method of this thread group is
 called with no arguments; this may result in a security exception.
 &lt;p&gt;
 This method then calls the &lt;code&gt;stop&lt;/code&gt; method on all the
 threads in this thread group and in all of its subgroups.</description>
					<attribute name="@exception">
						<description>SecurityException  if the current thread is not allowed
               to access this thread group or any of the threads in
               the thread group.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.SecurityException</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Thread#stop()</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.ThreadGroup#checkAccess()</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.0</description>
					</attribute>
					<attribute name="@deprecated">
						<description>This method is inherently unsafe.  See
     {@link Thread#stop} for details.</description>
					</attribute>
				</comment>
			</method>
			<method final="true" visibility="public" name="interrupt" fulltype="void" type="void">
				<comment>
					<description>Interrupts all threads in this thread group.
 &lt;p&gt;
 First, the &lt;code&gt;checkAccess&lt;/code&gt; method of this thread group is
 called with no arguments; this may result in a security exception.
 &lt;p&gt;
 This method then calls the &lt;code&gt;interrupt&lt;/code&gt; method on all the
 threads in this thread group and in all of its subgroups.</description>
					<attribute name="@exception">
						<description>SecurityException  if the current thread is not allowed
               to access this thread group or any of the threads in
               the thread group.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Thread#interrupt()</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.SecurityException</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.ThreadGroup#checkAccess()</description>
					</attribute>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</method>
			<method final="true" visibility="public" name="suspend" fulltype="void" type="void">
				<comment>
					<description>Suspends all threads in this thread group.
 &lt;p&gt;
 First, the &lt;code&gt;checkAccess&lt;/code&gt; method of this thread group is
 called with no arguments; this may result in a security exception.
 &lt;p&gt;
 This method then calls the &lt;code&gt;suspend&lt;/code&gt; method on all the
 threads in this thread group and in all of its subgroups.</description>
					<attribute name="@exception">
						<description>SecurityException  if the current thread is not allowed
               to access this thread group or any of the threads in
               the thread group.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Thread#suspend()</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.SecurityException</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.ThreadGroup#checkAccess()</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.0</description>
					</attribute>
					<attribute name="@deprecated">
						<description>This method is inherently deadlock-prone.  See
     {@link Thread#suspend} for details.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="private" name="stopOrSuspend" fulltype="boolean" type="boolean">
				<comment>
					<description>Helper method: recursively stops or suspends (as directed by the
 boolean argument) all of the threads in this thread group and its
 subgroups, except the current thread.  This method returns true
 if (and only if) the current thread is found to be in this thread
 group or one of its subgroups.</description>
				</comment>
				<params>
					<param name="suspend" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method final="true" visibility="public" name="resume" fulltype="void" type="void">
				<comment>
					<description>Resumes all threads in this thread group.
 &lt;p&gt;
 First, the &lt;code&gt;checkAccess&lt;/code&gt; method of this thread group is
 called with no arguments; this may result in a security exception.
 &lt;p&gt;
 This method then calls the &lt;code&gt;resume&lt;/code&gt; method on all the
 threads in this thread group and in all of its sub groups.</description>
					<attribute name="@exception">
						<description>SecurityException  if the current thread is not allowed to
               access this thread group or any of the threads in the
               thread group.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.SecurityException</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Thread#resume()</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.ThreadGroup#checkAccess()</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.0</description>
					</attribute>
					<attribute name="@deprecated">
						<description>This method is used solely in conjunction with
      &lt;tt&gt;Thread.suspend&lt;/tt&gt; and &lt;tt&gt;ThreadGroup.suspend&lt;/tt&gt;,
       both of which have been deprecated, as they are inherently
       deadlock-prone.  See {@link Thread#suspend} for details.</description>
					</attribute>
				</comment>
			</method>
			<method final="true" visibility="public" name="destroy" fulltype="void" type="void">
				<comment>
					<description>Destroys this thread group and all of its subgroups. This thread
 group must be empty, indicating that all threads that had been in
 this thread group have since stopped.
 &lt;p&gt;
 First, the &lt;code&gt;checkAccess&lt;/code&gt; method of this thread group is
 called with no arguments; this may result in a security exception.</description>
					<attribute name="@exception">
						<description>IllegalThreadStateException  if the thread group is not
               empty or if the thread group has already been destroyed.</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException  if the current thread cannot modify this
               thread group.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.ThreadGroup#checkAccess()</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.0</description>
					</attribute>
				</comment>
			</method>
			<method final="true" visibility="private" name="add" fulltype="void" type="void">
				<comment>
					<description>Adds the specified Thread group to this group.</description>
					<attribute name="@param">
						<description>g the specified Thread group to be added</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalThreadStateException If the Thread group has been destroyed.</description>
					</attribute>
				</comment>
				<params>
					<param name="g" comment="the specified Thread group to be added" fulltype="java.lang.ThreadGroup" type="ThreadGroup" />
				</params>
			</method>
			<method visibility="private" name="remove" returncomment="if this Thread has already been destroyed." fulltype="void" type="void">
				<comment>
					<description>Removes the specified Thread group from this group.</description>
					<attribute name="@param">
						<description>g the Thread group to be removed</description>
					</attribute>
					<attribute name="@return">
						<description>if this Thread has already been destroyed.</description>
					</attribute>
				</comment>
				<params>
					<param name="g" comment="the Thread group to be removed" fulltype="java.lang.ThreadGroup" type="ThreadGroup" />
				</params>
			</method>
			<method visibility="package-private" name="addUnstarted" fulltype="void" type="void">
				<comment>
					<description>Increments the count of unstarted threads in the thread group.
 Unstarted threads are not added to the thread group so that they
 can be collected if they are never started, but they must be
 counted so that daemon thread groups with unstarted threads in
 them are not destroyed.</description>
				</comment>
			</method>
			<method visibility="package-private" name="add" fulltype="void" type="void">
				<comment>
					<description>Adds the specified Thread to this group.</description>
					<attribute name="@param">
						<description>t the Thread to be added</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalThreadStateException If the Thread group has been destroyed.</description>
					</attribute>
				</comment>
				<params>
					<param name="t" comment="the Thread to be added" fulltype="java.lang.Thread" type="Thread" />
				</params>
			</method>
			<method visibility="package-private" name="remove" returncomment="if the Thread has already been destroyed." fulltype="void" type="void">
				<comment>
					<description>Removes the specified Thread from this group.</description>
					<attribute name="@param">
						<description>t the Thread to be removed</description>
					</attribute>
					<attribute name="@return">
						<description>if the Thread has already been destroyed.</description>
					</attribute>
				</comment>
				<params>
					<param name="t" comment="the Thread to be removed" fulltype="java.lang.Thread" type="Thread" />
				</params>
			</method>
			<method visibility="public" name="list" fulltype="void" type="void">
				<comment>
					<description>Prints information about this thread group to the standard
 output. This method is useful only for debugging.</description>
					<attribute name="@since">
						<description>JDK1.0</description>
					</attribute>
				</comment>
			</method>
			<method visibility="package-private" name="list" fulltype="void" type="void">
				<params>
					<param name="out" fulltype="java.io.PrintStream" type="PrintStream" />
					<param name="indent" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="uncaughtException" fulltype="void" type="void">
				<comment>
					<description>Called by the Java Virtual Machine when a thread in this
 thread group stops because of an uncaught exception, and the thread
 does not have a specific {@link Thread.UncaughtExceptionHandler}
 installed.
 &lt;p&gt;
 The &lt;code&gt;uncaughtException&lt;/code&gt; method of
 &lt;code&gt;ThreadGroup&lt;/code&gt; does the following:
 &lt;ul&gt;
 &lt;li&gt;If this thread group has a parent thread group, the
     &lt;code&gt;uncaughtException&lt;/code&gt; method of that parent is called
     with the same two arguments.
 &lt;li&gt;Otherwise, this method checks to see if there is a
     {@linkplain Thread#getDefaultUncaughtExceptionHandler default
     uncaught exception handler} installed, and if so, its
     &lt;code&gt;uncaughtException&lt;/code&gt; method is called with the same
     two arguments.
 &lt;li&gt;Otherwise, this method determines if the &lt;code&gt;Throwable&lt;/code&gt;
     argument is an instance of {@link ThreadDeath}. If so, nothing
     special is done. Otherwise, a message containing the
     thread&apos;s name, as returned from the thread&apos;s {@link
     Thread#getName getName} method, and a stack backtrace,
     using the &lt;code&gt;Throwable&lt;/code&gt;&apos;s {@link
     Throwable#printStackTrace printStackTrace} method, is
     printed to the {@linkplain System#err standard error stream}.
 &lt;/ul&gt;
 &lt;p&gt;
 Applications can override this method in subclasses of
 &lt;code&gt;ThreadGroup&lt;/code&gt; to provide alternative handling of
 uncaught exceptions.</description>
					<attribute name="@param">
						<description>t   the thread that is about to exit.</description>
					</attribute>
					<attribute name="@param">
						<description>e   the uncaught exception.</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.0</description>
					</attribute>
				</comment>
				<params>
					<param name="t" comment="the thread that is about to exit." fulltype="java.lang.Thread" type="Thread" />
					<param name="e" comment="the uncaught exception." fulltype="java.lang.Throwable" type="Throwable" />
				</params>
			</method>
			<method visibility="public" name="allowThreadSuspension" returncomment="true on success" fulltype="boolean" type="boolean">
				<comment>
					<description>Used by VM to control lowmem implicit suspension.</description>
					<attribute name="@param">
						<description>b boolean to allow or disallow suspension</description>
					</attribute>
					<attribute name="@return">
						<description>true on success</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.1</description>
					</attribute>
					<attribute name="@deprecated">
						<description>The definition of this call depends on {@link #suspend},
             which is deprecated.  Further, the behavior of this call
             was never specified.</description>
					</attribute>
				</comment>
				<params>
					<param name="b" comment="boolean to allow or disallow suspension" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="toString" returncomment="a string representation of this thread group." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a string representation of this Thread group.</description>
					<attribute name="@return">
						<description>a string representation of this thread group.</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.0</description>
					</attribute>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="RuntimeException" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.RuntimeException" fulltype="java.lang.ArithmeticException" type="ArithmeticException">
		<comment>
			<description>Thrown when an exceptional arithmetic condition has occurred. For
 example, an integer &quot;divide by zero&quot; throws an
 instance of this class.</description>
			<attribute name="@author">
				<description>unascribed</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.0</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="ArithmeticException">
				<comment>
					<description>Constructs an &lt;code&gt;ArithmeticException&lt;/code&gt; with no detail
 message.</description>
				</comment>
			</constructor>
			<constructor visibility="public" name="ArithmeticException">
				<comment>
					<description>Constructs an &lt;code&gt;ArithmeticException&lt;/code&gt; with the specified
 detail message.</description>
					<attribute name="@param">
						<description>s   the detail message.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the detail message." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="java.lang" interface="true" fulltype="java.lang.Cloneable" type="Cloneable">
		<comment>
			<description>A class implements the &lt;code&gt;Cloneable&lt;/code&gt; interface to
 indicate to the {@link java.lang.Object#clone()} method that it
 is legal for that method to make a
 field-for-field copy of instances of that class.
 &lt;p&gt;
 Invoking Object&apos;s clone method on an instance that does not implement the
 &lt;code&gt;Cloneable&lt;/code&gt; interface results in the exception
 &lt;code&gt;CloneNotSupportedException&lt;/code&gt; being thrown.
 &lt;p&gt;
 By convention, classes that implement this interface should override
 &lt;tt&gt;Object.clone&lt;/tt&gt; (which is protected) with a public method.
 See {@link java.lang.Object#clone()} for details on overriding this
 method.
 &lt;p&gt;
 Note that this interface does &lt;i&gt;not&lt;/i&gt; contain the &lt;tt&gt;clone&lt;/tt&gt; method.
 Therefore, it is not possible to clone an object merely by virtue of the
 fact that it implements this interface.  Even if the clone method is invoked
 reflectively, there is no guarantee that it will succeed.</description>
			<attribute name="@author">
				<description>unascribed</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.CloneNotSupportedException</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.Object#clone()</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.0</description>
			</attribute>
		</comment>
	</jelclass>
	<jelclass superclass="ThreadLocal" visibility="public" package="java.lang" superclassfulltype="java.lang.ThreadLocal" fulltype="java.lang.InheritableThreadLocal" type="InheritableThreadLocal">
		<comment>
			<description>This class extends &lt;tt&gt;ThreadLocal&lt;/tt&gt; to provide inheritance of values
 from parent thread to child thread: when a child thread is created, the
 child receives initial values for all inheritable thread-local variables
 for which the parent has values.  Normally the child&apos;s values will be
 identical to the parent&apos;s; however, the child&apos;s value can be made an
 arbitrary function of the parent&apos;s by overriding the &lt;tt&gt;childValue&lt;/tt&gt;
 method in this class.

 &lt;p&gt;Inheritable thread-local variables are used in preference to
 ordinary thread-local variables when the per-thread-attribute being
 maintained in the variable (e.g., User ID, Transaction ID) must be
 automatically transmitted to any child threads that are created.</description>
			<attribute name="@author">
				<description>Josh Bloch and Doug Lea</description>
			</attribute>
			<attribute name="@see">
				<description>ThreadLocal</description>
			</attribute>
			<attribute name="@since">
				<description>1.2</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="InheritableThreadLocal" />
			<method visibility="protected" name="childValue" returncomment="the child thread&apos;s initial value" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Computes the child&apos;s initial value for this inheritable thread-local
 variable as a function of the parent&apos;s value at the time the child
 thread is created.  This method is called from within the parent
 thread before the child is started.
 &lt;p&gt;
 This method merely returns its input argument, and should be overridden
 if a different behavior is desired.</description>
					<attribute name="@param">
						<description>parentValue the parent thread&apos;s value</description>
					</attribute>
					<attribute name="@return">
						<description>the child thread&apos;s initial value</description>
					</attribute>
				</comment>
				<params>
					<param name="parentValue" comment="the parent thread&apos;s value" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="package-private" name="getMap" fulltype="java.lang.ThreadLocal.ThreadLocalMap" type="ThreadLocal.ThreadLocalMap">
				<comment>
					<description>Get the map associated with a ThreadLocal.</description>
					<attribute name="@param">
						<description>t the current thread</description>
					</attribute>
				</comment>
				<params>
					<param name="t" comment="the current thread" fulltype="java.lang.Thread" type="Thread" />
				</params>
			</method>
			<method visibility="package-private" name="createMap" fulltype="void" type="void">
				<comment>
					<description>Create the map associated with a ThreadLocal.</description>
					<attribute name="@param">
						<description>t the current thread</description>
					</attribute>
					<attribute name="@param">
						<description>firstValue value for the initial entry of the table.</description>
					</attribute>
					<attribute name="@param">
						<description>map the map to store.</description>
					</attribute>
				</comment>
				<params>
					<param name="t" comment="the current thread" fulltype="java.lang.Thread" type="Thread" />
					<param name="firstValue" comment="value for the initial entry of the table." fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Reference" visibility="package-private" package="java.lang.ref" superclassfulltype="java.lang.ref.Reference" fulltype="java.lang.ref.FinalReference" type="FinalReference">
		<methods>
			<constructor visibility="public" name="FinalReference">
				<params>
					<param name="referent" fulltype="java.lang.Object" type="Object" />
					<param name="q" fulltype="java.lang.ref.ReferenceQueue" type="ReferenceQueue" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="java.lang.ref" superclassfulltype="java.lang.Object" fulltype="java.lang.ref.ReferenceQueue" type="ReferenceQueue">
		<comment>
			<description>Reference queues, to which registered reference objects are appended by the
 garbage collector after the appropriate reachability changes are detected.</description>
			<attribute name="@author">
				<description>Mark Reinhold</description>
			</attribute>
			<attribute name="@since">
				<description>1.2</description>
			</attribute>
		</comment>
		<fields>
			<field static="true" visibility="package-private" name="NULL" fulltype="java.lang.ref.ReferenceQueue" type="ReferenceQueue" />
			<field static="true" visibility="package-private" name="ENQUEUED" fulltype="java.lang.ref.ReferenceQueue" type="ReferenceQueue" />
			<field visibility="private" name="lock" fulltype="java.lang.ref.ReferenceQueue.Lock" type="ReferenceQueue.Lock" />
			<field visibility="private" name="head" fulltype="java.lang.ref.Reference" type="Reference" />
			<field visibility="private" name="queueLength" fulltype="long" type="long" />
		</fields>
		<methods>
			<constructor visibility="public" name="ReferenceQueue">
				<comment>
					<description>Constructs a new reference-object queue.</description>
				</comment>
			</constructor>
			<method visibility="package-private" name="enqueue" fulltype="boolean" type="boolean">
				<params>
					<param name="r" fulltype="java.lang.ref.Reference" type="Reference" />
				</params>
			</method>
			<method visibility="private" name="reallyPoll" fulltype="java.lang.ref.Reference" type="Reference" />
			<method visibility="public" name="poll" returncomment="A reference object, if one was immediately available,
          otherwise &lt;code&gt;null&lt;/code&gt;" fulltype="java.lang.ref.Reference" type="Reference">
				<comment>
					<description>Polls this queue to see if a reference object is available.  If one is
 available without further delay then it is removed from the queue and
 returned.  Otherwise this method immediately returns &lt;tt&gt;null&lt;/tt&gt;.</description>
					<attribute name="@return">
						<description>A reference object, if one was immediately available,
          otherwise &lt;code&gt;null&lt;/code&gt;</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="remove" returncomment="A reference object, if one was available within the specified
          timeout period, otherwise &lt;code&gt;null&lt;/code&gt;" fulltype="java.lang.ref.Reference" type="Reference">
				<comment>
					<description>Removes the next reference object in this queue, blocking until either
 one becomes available or the given timeout period expires.

 &lt;p&gt; This method does not offer real-time guarantees: It schedules the
 timeout as if by invoking the {@link Object#wait(long)} method.</description>
					<attribute name="@param">
						<description>timeout  If positive, block for up to &lt;code&gt;timeout&lt;/code&gt;
                  milliseconds while waiting for a reference to be
                  added to this queue.  If zero, block indefinitely.</description>
					</attribute>
					<attribute name="@return">
						<description>A reference object, if one was available within the specified
          timeout period, otherwise &lt;code&gt;null&lt;/code&gt;</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalArgumentException
          If the value of the timeout argument is negative</description>
					</attribute>
					<attribute name="@throws">
						<description>InterruptedException
          If the timeout wait is interrupted</description>
					</attribute>
				</comment>
				<params>
					<param name="timeout" comment="If positive, block for up to &lt;code&gt;timeout&lt;/code&gt;
                  milliseconds while waiting for a reference to be
                  added to this queue.  If zero, block indefinitely." fulltype="long" type="long" />
				</params>
				<exceptions>
					<exception comment="If the value of the timeout argument is negative" fulltype="java.lang.IllegalArgumentException" type="IllegalArgumentException" />
					<exception comment="If the timeout wait is interrupted" fulltype="java.lang.InterruptedException" type="InterruptedException" />
				</exceptions>
			</method>
			<method visibility="public" name="remove" returncomment="A reference object, blocking until one becomes available" fulltype="java.lang.ref.Reference" type="Reference">
				<comment>
					<description>Removes the next reference object in this queue, blocking until one
 becomes available.</description>
					<attribute name="@return">
						<description>A reference object, blocking until one becomes available</description>
					</attribute>
					<attribute name="@throws">
						<description>InterruptedException  If the wait is interrupted</description>
					</attribute>
				</comment>
				<exceptions>
					<exception comment="If the wait is interrupted" fulltype="java.lang.InterruptedException" type="InterruptedException" />
				</exceptions>
			</method>
		</methods>
		<jelclass superclass="ReferenceQueue" visibility="private" package="java.lang.ref" superclassfulltype="java.lang.ref.ReferenceQueue" fulltype="java.lang.ref.ReferenceQueue.Null" type="ReferenceQueue.Null">
			<methods>
				<constructor visibility="private" name="ReferenceQueue.Null" />
				<method visibility="package-private" name="enqueue" fulltype="boolean" type="boolean">
					<params>
						<param name="r" fulltype="java.lang.ref.Reference" type="Reference" />
					</params>
				</method>
			</methods>
		</jelclass>
		<jelclass superclass="Object" visibility="private" package="java.lang.ref" superclassfulltype="java.lang.Object" fulltype="java.lang.ref.ReferenceQueue.Lock" type="ReferenceQueue.Lock">
			<methods>
				<constructor visibility="private" name="ReferenceQueue.Lock" />
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="ReferenceQueue" visibility="private" package="java.lang.ref" superclassfulltype="java.lang.ref.ReferenceQueue" fulltype="java.lang.ref.ReferenceQueue.Null" type="ReferenceQueue.Null">
		<methods>
			<constructor visibility="private" name="ReferenceQueue.Null" />
			<method visibility="package-private" name="enqueue" fulltype="boolean" type="boolean">
				<params>
					<param name="r" fulltype="java.lang.ref.Reference" type="Reference" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="private" package="java.lang.ref" superclassfulltype="java.lang.Object" fulltype="java.lang.ref.ReferenceQueue.Lock" type="ReferenceQueue.Lock">
		<methods>
			<constructor visibility="private" name="ReferenceQueue.Lock" />
		</methods>
	</jelclass>
	<jelclass abstract="true" superclass="Object" visibility="public" package="java.lang.ref" superclassfulltype="java.lang.Object" fulltype="java.lang.ref.Reference" type="Reference">
		<comment>
			<description>Abstract base class for reference objects.  This class defines the
 operations common to all reference objects.  Because reference objects are
 implemented in close cooperation with the garbage collector, this class may
 not be subclassed directly.</description>
			<attribute name="@author">
				<description>Mark Reinhold</description>
			</attribute>
			<attribute name="@since">
				<description>1.2</description>
			</attribute>
		</comment>
		<fields>
			<field visibility="private" name="referent" fulltype="java.lang.Object" type="Object" />
			<field visibility="package-private" name="queue" fulltype="java.lang.ref.ReferenceQueue" type="ReferenceQueue" />
			<field visibility="package-private" name="next" fulltype="java.lang.ref.Reference" type="Reference" />
			<field visibility="private" transient="true" name="discovered" fulltype="java.lang.ref.Reference" type="Reference" />
			<field static="true" visibility="private" name="lock" fulltype="java.lang.ref.Reference.Lock" type="Reference.Lock" />
			<field static="true" visibility="private" name="pending" fulltype="java.lang.ref.Reference" type="Reference" />
		</fields>
		<methods>
			<constructor visibility="package-private" name="Reference">
				<params>
					<param name="referent" fulltype="java.lang.Object" type="Object" />
				</params>
			</constructor>
			<constructor visibility="package-private" name="Reference">
				<params>
					<param name="referent" fulltype="java.lang.Object" type="Object" />
					<param name="queue" fulltype="java.lang.ref.ReferenceQueue" type="ReferenceQueue" />
				</params>
			</constructor>
			<method visibility="public" name="get" returncomment="The object to which this reference refers, or
           &lt;code&gt;null&lt;/code&gt; if this reference object has been cleared" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Returns this reference object&apos;s referent.  If this reference object has
 been cleared, either by the program or by the garbage collector, then
 this method returns &lt;code&gt;null&lt;/code&gt;.</description>
					<attribute name="@return">
						<description>The object to which this reference refers, or
           &lt;code&gt;null&lt;/code&gt; if this reference object has been cleared</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="clear" fulltype="void" type="void">
				<comment>
					<description>Clears this reference object.  Invoking this method will not cause this
 object to be enqueued.

 &lt;p&gt; This method is invoked only by Java code; when the garbage collector
 clears references it does so directly, without invoking this method.</description>
				</comment>
			</method>
			<method visibility="public" name="isEnqueued" returncomment="&lt;code&gt;true&lt;/code&gt; if and only if this reference object has
           been enqueued" fulltype="boolean" type="boolean">
				<comment>
					<description>Tells whether or not this reference object has been enqueued, either by
 the program or by the garbage collector.  If this reference object was
 not registered with a queue when it was created, then this method will
 always return &lt;code&gt;false&lt;/code&gt;.</description>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if and only if this reference object has
           been enqueued</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="enqueue" returncomment="&lt;code&gt;true&lt;/code&gt; if this reference object was successfully
           enqueued; &lt;code&gt;false&lt;/code&gt; if it was already enqueued or if
           it was not registered with a queue when it was created" fulltype="boolean" type="boolean">
				<comment>
					<description>Adds this reference object to the queue with which it is registered,
 if any.

 &lt;p&gt; This method is invoked only by Java code; when the garbage collector
 enqueues references it does so directly, without invoking this method.</description>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if this reference object was successfully
           enqueued; &lt;code&gt;false&lt;/code&gt; if it was already enqueued or if
           it was not registered with a queue when it was created</description>
					</attribute>
				</comment>
			</method>
		</methods>
		<jelclass superclass="Object" visibility="private" package="java.lang.ref" superclassfulltype="java.lang.Object" fulltype="java.lang.ref.Reference.Lock" type="Reference.Lock">
			<methods>
				<constructor visibility="private" name="Reference.Lock" />
			</methods>
		</jelclass>
		<jelclass superclass="Thread" visibility="private" package="java.lang.ref" superclassfulltype="java.lang.Thread" fulltype="java.lang.ref.Reference.ReferenceHandler" type="Reference.ReferenceHandler">
			<methods>
				<constructor visibility="package-private" name="Reference.ReferenceHandler">
					<params>
						<param name="g" fulltype="java.lang.ThreadGroup" type="ThreadGroup" />
						<param name="name" fulltype="java.lang.String" type="String" />
					</params>
				</constructor>
				<method visibility="public" name="run" fulltype="void" type="void" />
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="Object" visibility="private" package="java.lang.ref" superclassfulltype="java.lang.Object" fulltype="java.lang.ref.Reference.Lock" type="Reference.Lock">
		<methods>
			<constructor visibility="private" name="Reference.Lock" />
		</methods>
	</jelclass>
	<jelclass superclass="Thread" visibility="private" package="java.lang.ref" superclassfulltype="java.lang.Thread" fulltype="java.lang.ref.Reference.ReferenceHandler" type="Reference.ReferenceHandler">
		<methods>
			<constructor visibility="package-private" name="Reference.ReferenceHandler">
				<params>
					<param name="g" fulltype="java.lang.ThreadGroup" type="ThreadGroup" />
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="run" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass final="true" superclass="FinalReference" visibility="package-private" package="java.lang.ref" superclassfulltype="java.lang.ref.FinalReference" fulltype="java.lang.ref.Finalizer" type="Finalizer">
		<fields>
			<field static="true" visibility="private" name="queue" fulltype="java.lang.ref.ReferenceQueue" type="ReferenceQueue" />
			<field static="true" visibility="private" name="unfinalized" fulltype="java.lang.ref.Finalizer" type="Finalizer" />
			<field static="true" visibility="private" name="lock" fulltype="java.lang.Object" type="Object" />
			<field visibility="private" name="next" fulltype="java.lang.ref.Finalizer" type="Finalizer" />
			<field visibility="private" name="prev" fulltype="java.lang.ref.Finalizer" type="Finalizer" />
		</fields>
		<methods>
			<constructor visibility="private" name="Finalizer">
				<params>
					<param name="finalizee" fulltype="java.lang.Object" type="Object" />
				</params>
			</constructor>
			<method static="true" visibility="package-private" name="invokeFinalizeMethod" fulltype="void" type="void">
				<params>
					<param name="o" fulltype="java.lang.Object" type="Object" />
				</params>
				<exceptions>
					<exception fulltype="java.lang.Throwable" type="Throwable" />
				</exceptions>
			</method>
			<method visibility="private" name="hasBeenFinalized" fulltype="boolean" type="boolean" />
			<method visibility="private" name="add" fulltype="void" type="void" />
			<method visibility="private" name="remove" fulltype="void" type="void" />
			<method static="true" visibility="package-private" name="register" fulltype="void" type="void">
				<params>
					<param name="finalizee" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="private" name="runFinalizer" fulltype="void" type="void" />
			<method static="true" visibility="private" name="forkSecondaryFinalizer" fulltype="void" type="void">
				<params>
					<param name="proc" fulltype="java.lang.Runnable" type="Runnable" />
				</params>
			</method>
			<method static="true" visibility="package-private" name="runFinalization" fulltype="void" type="void" />
			<method static="true" visibility="package-private" name="runAllFinalizers" fulltype="void" type="void" />
		</methods>
		<jelclass superclass="Thread" visibility="private" package="java.lang.ref" superclassfulltype="java.lang.Thread" fulltype="java.lang.ref.Finalizer.FinalizerThread" type="Finalizer.FinalizerThread">
			<methods>
				<constructor visibility="package-private" name="Finalizer.FinalizerThread">
					<params>
						<param name="g" fulltype="java.lang.ThreadGroup" type="ThreadGroup" />
					</params>
				</constructor>
				<method visibility="public" name="run" fulltype="void" type="void" />
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="Thread" visibility="private" package="java.lang.ref" superclassfulltype="java.lang.Thread" fulltype="java.lang.ref.Finalizer.FinalizerThread" type="Finalizer.FinalizerThread">
		<methods>
			<constructor visibility="package-private" name="Finalizer.FinalizerThread">
				<params>
					<param name="g" fulltype="java.lang.ThreadGroup" type="ThreadGroup" />
				</params>
			</constructor>
			<method visibility="public" name="run" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass superclass="Reference" visibility="public" package="java.lang.ref" superclassfulltype="java.lang.ref.Reference" fulltype="java.lang.ref.SoftReference" type="SoftReference">
		<comment>
			<description>Soft reference objects, which are cleared at the discretion of the garbage
 collector in response to memory demand.  Soft references are most often used
 to implement memory-sensitive caches.

 &lt;p&gt; Suppose that the garbage collector determines at a certain point in time
 that an object is &lt;a href=&quot;package-summary.html#reachability&quot;&gt;softly
 reachable&lt;/a&gt;.  At that time it may choose to clear atomically all soft
 references to that object and all soft references to any other
 softly-reachable objects from which that object is reachable through a chain
 of strong references.  At the same time or at some later time it will
 enqueue those newly-cleared soft references that are registered with
 reference queues.

 &lt;p&gt; All soft references to softly-reachable objects are guaranteed to have
 been cleared before the virtual machine throws an
 &lt;code&gt;OutOfMemoryError&lt;/code&gt;.  Otherwise no constraints are placed upon the
 time at which a soft reference will be cleared or the order in which a set
 of such references to different objects will be cleared.  Virtual machine
 implementations are, however, encouraged to bias against clearing
 recently-created or recently-used soft references.

 &lt;p&gt; Direct instances of this class may be used to implement simple caches;
 this class or derived subclasses may also be used in larger data structures
 to implement more sophisticated caches.  As long as the referent of a soft
 reference is strongly reachable, that is, is actually in use, the soft
 reference will not be cleared.  Thus a sophisticated cache can, for example,
 prevent its most recently used entries from being discarded by keeping
 strong referents to those entries, leaving the remaining entries to be
 discarded at the discretion of the garbage collector.</description>
			<attribute name="@author">
				<description>Mark Reinhold</description>
			</attribute>
			<attribute name="@since">
				<description>1.2</description>
			</attribute>
		</comment>
		<fields>
			<field static="true" visibility="private" name="clock" fulltype="long" type="long" />
			<field visibility="private" name="timestamp" fulltype="long" type="long" />
		</fields>
		<methods>
			<constructor visibility="public" name="SoftReference">
				<comment>
					<description>Creates a new soft reference that refers to the given object.  The new
 reference is not registered with any queue.</description>
					<attribute name="@param">
						<description>referent object the new soft reference will refer to</description>
					</attribute>
				</comment>
				<params>
					<param name="referent" comment="object the new soft reference will refer to" fulltype="java.lang.Object" type="Object" />
				</params>
			</constructor>
			<constructor visibility="public" name="SoftReference">
				<comment>
					<description>Creates a new soft reference that refers to the given object and is
 registered with the given queue.</description>
					<attribute name="@param">
						<description>referent object the new soft reference will refer to</description>
					</attribute>
					<attribute name="@param">
						<description>q the queue with which the reference is to be registered,
          or &lt;tt&gt;null&lt;/tt&gt; if registration is not required</description>
					</attribute>
				</comment>
				<params>
					<param name="referent" comment="object the new soft reference will refer to" fulltype="java.lang.Object" type="Object" />
					<param name="q" comment="the queue with which the reference is to be registered,
          or &lt;tt&gt;null&lt;/tt&gt; if registration is not required" fulltype="java.lang.ref.ReferenceQueue" type="ReferenceQueue" />
				</params>
			</constructor>
			<method visibility="public" name="get" returncomment="The object to which this reference refers, or
           &lt;code&gt;null&lt;/code&gt; if this reference object has been cleared" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Returns this reference object&apos;s referent.  If this reference object has
 been cleared, either by the program or by the garbage collector, then
 this method returns &lt;code&gt;null&lt;/code&gt;.</description>
					<attribute name="@return">
						<description>The object to which this reference refers, or
           &lt;code&gt;null&lt;/code&gt; if this reference object has been cleared</description>
					</attribute>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Reference" visibility="public" package="java.lang.ref" superclassfulltype="java.lang.ref.Reference" fulltype="java.lang.ref.WeakReference" type="WeakReference">
		<comment>
			<description>Weak reference objects, which do not prevent their referents from being
 made finalizable, finalized, and then reclaimed.  Weak references are most
 often used to implement canonicalizing mappings.

 &lt;p&gt; Suppose that the garbage collector determines at a certain point in time
 that an object is &lt;a href=&quot;package-summary.html#reachability&quot;&gt;weakly
 reachable&lt;/a&gt;.  At that time it will atomically clear all weak references to
 that object and all weak references to any other weakly-reachable objects
 from which that object is reachable through a chain of strong and soft
 references.  At the same time it will declare all of the formerly
 weakly-reachable objects to be finalizable.  At the same time or at some
 later time it will enqueue those newly-cleared weak references that are
 registered with reference queues.</description>
			<attribute name="@author">
				<description>Mark Reinhold</description>
			</attribute>
			<attribute name="@since">
				<description>1.2</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="WeakReference">
				<comment>
					<description>Creates a new weak reference that refers to the given object.  The new
 reference is not registered with any queue.</description>
					<attribute name="@param">
						<description>referent object the new weak reference will refer to</description>
					</attribute>
				</comment>
				<params>
					<param name="referent" comment="object the new weak reference will refer to" fulltype="java.lang.Object" type="Object" />
				</params>
			</constructor>
			<constructor visibility="public" name="WeakReference">
				<comment>
					<description>Creates a new weak reference that refers to the given object and is
 registered with the given queue.</description>
					<attribute name="@param">
						<description>referent object the new weak reference will refer to</description>
					</attribute>
					<attribute name="@param">
						<description>q the queue with which the reference is to be registered,
          or &lt;tt&gt;null&lt;/tt&gt; if registration is not required</description>
					</attribute>
				</comment>
				<params>
					<param name="referent" comment="object the new weak reference will refer to" fulltype="java.lang.Object" type="Object" />
					<param name="q" comment="the queue with which the reference is to be registered,
          or &lt;tt&gt;null&lt;/tt&gt; if registration is not required" fulltype="java.lang.ref.ReferenceQueue" type="ReferenceQueue" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass superclass="Reference" visibility="public" package="java.lang.ref" superclassfulltype="java.lang.ref.Reference" fulltype="java.lang.ref.PhantomReference" type="PhantomReference">
		<comment>
			<description>Phantom reference objects, which are enqueued after the collector
 determines that their referents may otherwise be reclaimed.  Phantom
 references are most often used for scheduling pre-mortem cleanup actions in
 a more flexible way than is possible with the Java finalization mechanism.

 &lt;p&gt; If the garbage collector determines at a certain point in time that the
 referent of a phantom reference is &lt;a
 href=&quot;package-summary.html#reachability&quot;&gt;phantom reachable&lt;/a&gt;, then at that
 time or at some later time it will enqueue the reference.

 &lt;p&gt; In order to ensure that a reclaimable object remains so, the referent of
 a phantom reference may not be retrieved: The &lt;code&gt;get&lt;/code&gt; method of a
 phantom reference always returns &lt;code&gt;null&lt;/code&gt;.

 &lt;p&gt; Unlike soft and weak references, phantom references are not
 automatically cleared by the garbage collector as they are enqueued.  An
 object that is reachable via phantom references will remain so until all
 such references are cleared or themselves become unreachable.</description>
			<attribute name="@author">
				<description>Mark Reinhold</description>
			</attribute>
			<attribute name="@since">
				<description>1.2</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="PhantomReference">
				<comment>
					<description>Creates a new phantom reference that refers to the given object and
 is registered with the given queue.

 &lt;p&gt; It is possible to create a phantom reference with a &lt;tt&gt;null&lt;/tt&gt;
 queue, but such a reference is completely useless: Its &lt;tt&gt;get&lt;/tt&gt;
 method will always return null and, since it does not have a queue, it
 will never be enqueued.</description>
					<attribute name="@param">
						<description>referent the object the new phantom reference will refer to</description>
					</attribute>
					<attribute name="@param">
						<description>q the queue with which the reference is to be registered,
          or &lt;tt&gt;null&lt;/tt&gt; if registration is not required</description>
					</attribute>
				</comment>
				<params>
					<param name="referent" comment="the object the new phantom reference will refer to" fulltype="java.lang.Object" type="Object" />
					<param name="q" comment="the queue with which the reference is to be registered,
          or &lt;tt&gt;null&lt;/tt&gt; if registration is not required" fulltype="java.lang.ref.ReferenceQueue" type="ReferenceQueue" />
				</params>
			</constructor>
			<method visibility="public" name="get" returncomment="&lt;code&gt;null&lt;/code&gt;" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Returns this reference object&apos;s referent.  Because the referent of a
 phantom reference is always inaccessible, this method always returns
 &lt;code&gt;null&lt;/code&gt;.</description>
					<attribute name="@return">
						<description>&lt;code&gt;null&lt;/code&gt;</description>
					</attribute>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="IncompatibleClassChangeError" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.IncompatibleClassChangeError" fulltype="java.lang.InstantiationError" type="InstantiationError">
		<comment>
			<description>Thrown when an application tries to use the Java &lt;code&gt;new&lt;/code&gt;
 construct to instantiate an abstract class or an interface.
 &lt;p&gt;
 Normally, this error is caught by the compiler; this error can
 only occur at run time if the definition of a class has
 incompatibly changed.</description>
			<attribute name="@author">
				<description>unascribed</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.0</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="InstantiationError">
				<comment>
					<description>Constructs an &lt;code&gt;InstantiationError&lt;/code&gt; with no detail  message.</description>
				</comment>
			</constructor>
			<constructor visibility="public" name="InstantiationError">
				<comment>
					<description>Constructs an &lt;code&gt;InstantiationError&lt;/code&gt; with the specified
 detail message.</description>
					<attribute name="@param">
						<description>s   the detail message.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the detail message." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass superclass="IllegalArgumentException" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.IllegalArgumentException" fulltype="java.lang.NumberFormatException" type="NumberFormatException">
		<comment>
			<description>Thrown to indicate that the application has attempted to convert
 a string to one of the numeric types, but that the string does not
 have the appropriate format.</description>
			<attribute name="@author">
				<description>unascribed</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.Integer#toString()</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.0</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="-2848938806368998894" visibility="package-private" name="serialVersionUID" constexpr="-2848938806368998894L" fulltype="long" type="long" />
		</fields>
		<methods>
			<constructor visibility="public" name="NumberFormatException">
				<comment>
					<description>Constructs a &lt;code&gt;NumberFormatException&lt;/code&gt; with no detail message.</description>
				</comment>
			</constructor>
			<constructor visibility="public" name="NumberFormatException">
				<comment>
					<description>Constructs a &lt;code&gt;NumberFormatException&lt;/code&gt; with the
 specified detail message.</description>
					<attribute name="@param">
						<description>s   the detail message.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the detail message." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method static="true" visibility="package-private" name="forInputString" fulltype="java.lang.NumberFormatException" type="NumberFormatException">
				<comment>
					<description>Factory method for making a &lt;code&gt;NumberFormatException&lt;/code&gt;
 given the specified input which caused the error.</description>
					<attribute name="@param">
						<description>s   the input causing the error</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the input causing the error" fulltype="java.lang.String" type="String" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="java.lang.instrument" interface="true" fulltype="java.lang.instrument.Instrumentation" type="Instrumentation">
		<comment>
			<description>This class provides services needed to instrument Java
 programming language code.
 Instrumentation is the addition of byte-codes to methods for the
 purpose of gathering data to be utilized by tools.
 Since the changes are purely additive, these tools do not modify
 application state or behavior.
 Examples of such benign tools include monitoring agents, profilers,
 coverage analyzers, and event loggers.

 &lt;P&gt;
 There are two ways to obtain an instance of the
 &lt;code&gt;Instrumentation&lt;/code&gt; interface:

 &lt;ol&gt;
   &lt;li&gt;&lt;p&gt; When a JVM is launched in a way that indicates an agent
     class. In that case an &lt;code&gt;Instrumentation&lt;/code&gt; instance
     is passed to the &lt;code&gt;premain&lt;/code&gt; method of the agent class.
     &lt;/p&gt;&lt;/li&gt;
   &lt;li&gt;&lt;p&gt; When a JVM provides a mechanism to start agents sometime
     after the JVM is launched. In that case an &lt;code&gt;Instrumentation&lt;/code&gt;
     instance is passed to the &lt;code&gt;agentmain&lt;/code&gt; method of the
     agent code. &lt;/p&gt; &lt;/li&gt;
 &lt;/ol&gt;
 &lt;p&gt;
 These mechanisms are described in the
 {@linkplain java.lang.instrument package specification}.
 &lt;p&gt;
 Once an agent acquires an &lt;code&gt;Instrumentation&lt;/code&gt; instance,
 the agent may call methods on the instance at any time.</description>
			<attribute name="@since">
				<description>1.5</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="addTransformer" fulltype="void" type="void">
				<comment>
					<description>Registers the supplied transformer. All future class definitions
 will be seen by the transformer, except definitions of classes upon which any
 registered transformer is dependent.
 The transformer is called when classes are loaded, when they are
 {@linkplain #redefineClasses redefined}. and if &lt;code&gt;canRetransform&lt;/code&gt; is true,
 when they are {@linkplain #retransformClasses retransformed}.
 See {@link java.lang.instrument.ClassFileTransformer#transform
 ClassFileTransformer.transform} for the order
 of transform calls.
 If a transformer throws
 an exception during execution, the JVM will still call the other registered
 transformers in order. The same transformer may be added more than once,
 but it is strongly discouraged -- avoid this by creating a new instance of
 tranformer class.
 &lt;P&gt;
 This method is intended for use in instrumentation, as described in the
 {@linkplain Instrumentation class specification}.</description>
					<attribute name="@param">
						<description>transformer          the transformer to register</description>
					</attribute>
					<attribute name="@param">
						<description>canRetransform       can this transformer&apos;s transformations be retransformed</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.NullPointerException if passed a &lt;code&gt;null&lt;/code&gt; transformer</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.UnsupportedOperationException if &lt;code&gt;canRetransform&lt;/code&gt;
 is true and the current configuration of the JVM does not allow
 retransformation ({@link #isRetransformClassesSupported} is false)</description>
					</attribute>
					<attribute name="@since">
						<description>1.6</description>
					</attribute>
				</comment>
				<params>
					<param name="transformer" comment="the transformer to register" fulltype="java.lang.instrument.ClassFileTransformer" type="ClassFileTransformer" />
					<param name="canRetransform" comment="can this transformer&apos;s transformations be retransformed" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="addTransformer" fulltype="void" type="void">
				<comment>
					<description>Registers the supplied transformer.
 &lt;P&gt;
 Same as &lt;code&gt;addTransformer(transformer, false)&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>transformer          the transformer to register</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.NullPointerException if passed a &lt;code&gt;null&lt;/code&gt; transformer</description>
					</attribute>
					<attribute name="@see">
						<description>#addTransformer(ClassFileTransformer,boolean)</description>
					</attribute>
				</comment>
				<params>
					<param name="transformer" comment="the transformer to register" fulltype="java.lang.instrument.ClassFileTransformer" type="ClassFileTransformer" />
				</params>
			</method>
			<method visibility="public" name="removeTransformer" returncomment="true if the transformer was found and removed, false if the
           transformer was not found" fulltype="boolean" type="boolean">
				<comment>
					<description>Unregisters the supplied transformer. Future class definitions will
 not be shown to the transformer. Removes the most-recently-added matching
 instance of the transformer. Due to the multi-threaded nature of
 class loading, it is possible for a transformer to receive calls
 after it has been removed. Transformers should be written defensively
 to expect this situation.</description>
					<attribute name="@param">
						<description>transformer          the transformer to unregister</description>
					</attribute>
					<attribute name="@return">
						<description>true if the transformer was found and removed, false if the
           transformer was not found</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.NullPointerException if passed a &lt;code&gt;null&lt;/code&gt; transformer</description>
					</attribute>
				</comment>
				<params>
					<param name="transformer" comment="the transformer to unregister" fulltype="java.lang.instrument.ClassFileTransformer" type="ClassFileTransformer" />
				</params>
			</method>
			<method visibility="public" name="isRetransformClassesSupported" returncomment="true if the current JVM configuration supports retransformation of
          classes, false if not." fulltype="boolean" type="boolean">
				<comment>
					<description>Returns whether or not the current JVM configuration supports retransformation
 of classes.
 The ability to retransform an already loaded class is an optional capability
 of a JVM.
 Retransformation will only be supported if the
 &lt;code&gt;Can-Retransform-Classes&lt;/code&gt; manifest attribute is set to
 &lt;code&gt;true&lt;/code&gt; in the agent JAR file (as described in the
 {@linkplain java.lang.instrument package specification}) and the JVM supports
 this capability.
 During a single instantiation of a single JVM, multiple calls to this
 method will always return the same answer.</description>
					<attribute name="@return">
						<description>true if the current JVM configuration supports retransformation of
          classes, false if not.</description>
					</attribute>
					<attribute name="@see">
						<description>#retransformClasses</description>
					</attribute>
					<attribute name="@since">
						<description>1.6</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="retransformClasses" fulltype="void" type="void">
				<comment>
					<description>Retransform the supplied set of classes.

 &lt;P&gt;
 This function facilitates the instrumentation
 of already loaded classes.
 When classes are initially loaded or when they are
 {@linkplain #redefineClasses redefined},
 the initial class file bytes can be transformed with the
 {@link java.lang.instrument.ClassFileTransformer ClassFileTransformer}.
 This function reruns the transformation process
 (whether or not a transformation has previously occurred).
 This retransformation follows these steps:
  &lt;ul&gt;
    &lt;li&gt;starting from the initial class file bytes
    &lt;/li&gt;
    &lt;li&gt;for each transformer that was added with &lt;code&gt;canRetransform&lt;/code&gt;
      false, the bytes returned by
      {@link java.lang.instrument.ClassFileTransformer#transform transform}
      during the last class load or redefine are
      reused as the output of the transformation; note that this is
      equivalent to reapplying the previous transformation, unaltered;
      except that
      {@link java.lang.instrument.ClassFileTransformer#transform transform}
      is not called
    &lt;/li&gt;
    &lt;li&gt;for each transformer that was added with &lt;code&gt;canRetransform&lt;/code&gt;
      true, the
      {@link java.lang.instrument.ClassFileTransformer#transform transform}
      method is called in these transformers
    &lt;/li&gt;
    &lt;li&gt;the transformed class file bytes are installed as the new
      definition of the class
    &lt;/li&gt;
  &lt;/ul&gt;
 &lt;P&gt;

 The order of transformation is described in the
 ({@link java.lang.instrument.ClassFileTransformer#transform transform} method.
 This same order is used in the automatic reapplication of retransformation
 incapable transforms.
 &lt;P&gt;

 The initial class file bytes represent the bytes passed to
 {@link java.lang.ClassLoader#defineClass ClassLoader.defineClass} or
 {@link #redefineClasses redefineClasses}
 (before any transformations
  were applied), however they might not exactly match them.
  The constant pool might not have the same layout or contents.
  The constant pool may have more or fewer entries.
  Constant pool entries may be in a different order; however,
  constant pool indices in the bytecodes of methods will correspond.
  Some attributes may not be present.
  Where order is not meaningful, for example the order of methods,
  order might not be preserved.

 &lt;P&gt;
 This method operates on
 a set in order to allow interdependent changes to more than one class at the same time
 (a retransformation of class A can require a retransformation of class B).

 &lt;P&gt;
 If a retransformed method has active stack frames, those active frames continue to
 run the bytecodes of the original method.
 The retransformed method will be used on new invokes.

 &lt;P&gt;
 This method does not cause any initialization except that which would occur
 under the customary JVM semantics. In other words, redefining a class
 does not cause its initializers to be run. The values of static variables
 will remain as they were prior to the call.

 &lt;P&gt;
 Instances of the retransformed class are not affected.

 &lt;P&gt;
 The retransformation may change method bodies, the constant pool and attributes.
 The retransformation must not add, remove or rename fields or methods, change the
 signatures of methods, or change inheritance.  These restrictions maybe be
 lifted in future versions.  The class file bytes are not checked, verified and installed
 until after the transformations have been applied, if the resultant bytes are in
 error this method will throw an exception.

 &lt;P&gt;
 If this method throws an exception, no classes have been retransformed.
 &lt;P&gt;
 This method is intended for use in instrumentation, as described in the
 {@linkplain Instrumentation class specification}.</description>
					<attribute name="@param">
						<description>classes array of classes to retransform;
                a zero-length array is allowed, in this case, this method does nothing</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.instrument.UnmodifiableClassException if a specified class cannot be modified
 ({@link #isModifiableClass} would return &lt;code&gt;false&lt;/code&gt;)</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.UnsupportedOperationException if the current configuration of the JVM does not allow
 retransformation ({@link #isRetransformClassesSupported} is false) or the retransformation attempted
 to make unsupported changes</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.ClassFormatError if the data did not contain a valid class</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.NoClassDefFoundError if the name in the class file is not equal to the name of the class</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.UnsupportedClassVersionError if the class file version numbers are not supported</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.ClassCircularityError if the new classes contain a circularity</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.LinkageError if a linkage error occurs</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.NullPointerException if the supplied classes  array or any of its components
                                        is &lt;code&gt;null&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@see">
						<description>#isRetransformClassesSupported</description>
					</attribute>
					<attribute name="@see">
						<description>#addTransformer</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.instrument.ClassFileTransformer</description>
					</attribute>
					<attribute name="@since">
						<description>1.6</description>
					</attribute>
				</comment>
				<params>
					<param name="classes" comment="array of classes to retransform;
                a zero-length array is allowed, in this case, this method does nothing" fulltype="java.lang.Class[]" type="Class" />
				</params>
				<exceptions>
					<exception fulltype="java.lang.instrument.UnmodifiableClassException" type="UnmodifiableClassException" />
				</exceptions>
			</method>
			<method visibility="public" name="isRedefineClassesSupported" returncomment="true if the current JVM configuration supports redefinition of classes,
 false if not." fulltype="boolean" type="boolean">
				<comment>
					<description>Returns whether or not the current JVM configuration supports redefinition
 of classes.
 The ability to redefine an already loaded class is an optional capability
 of a JVM.
 Redefinition will only be supported if the
 &lt;code&gt;Can-Redefine-Classes&lt;/code&gt; manifest attribute is set to
 &lt;code&gt;true&lt;/code&gt; in the agent JAR file (as described in the
 {@linkplain java.lang.instrument package specification}) and the JVM supports
 this capability.
 During a single instantiation of a single JVM, multiple calls to this
 method will always return the same answer.</description>
					<attribute name="@return">
						<description>true if the current JVM configuration supports redefinition of classes,
 false if not.</description>
					</attribute>
					<attribute name="@see">
						<description>#redefineClasses</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="redefineClasses" fulltype="void" type="void">
				<comment>
					<description>Redefine the supplied set of classes using the supplied class files.

 &lt;P&gt;
 This method is used to replace the definition of a class without reference
 to the existing class file bytes, as one might do when recompiling from source
 for fix-and-continue debugging.
 Where the existing class file bytes are to be transformed (for
 example in bytecode instrumentation)
 {@link #retransformClasses retransformClasses}
 should be used.

 &lt;P&gt;
 This method operates on
 a set in order to allow interdependent changes to more than one class at the same time
 (a redefinition of class A can require a redefinition of class B).

 &lt;P&gt;
 If a redefined method has active stack frames, those active frames continue to
 run the bytecodes of the original method.
 The redefined method will be used on new invokes.

 &lt;P&gt;
 This method does not cause any initialization except that which would occur
 under the customary JVM semantics. In other words, redefining a class
 does not cause its initializers to be run. The values of static variables
 will remain as they were prior to the call.

 &lt;P&gt;
 Instances of the redefined class are not affected.

 &lt;P&gt;
 The redefinition may change method bodies, the constant pool and attributes.
 The redefinition must not add, remove or rename fields or methods, change the
 signatures of methods, or change inheritance.  These restrictions maybe be
 lifted in future versions.  The class file bytes are not checked, verified and installed
 until after the transformations have been applied, if the resultant bytes are in
 error this method will throw an exception.

 &lt;P&gt;
 If this method throws an exception, no classes have been redefined.
 &lt;P&gt;
 This method is intended for use in instrumentation, as described in the
 {@linkplain Instrumentation class specification}.</description>
					<attribute name="@param">
						<description>definitions array of classes to redefine with corresponding definitions;
                    a zero-length array is allowed, in this case, this method does nothing</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.instrument.UnmodifiableClassException if a specified class cannot be modified
 ({@link #isModifiableClass} would return &lt;code&gt;false&lt;/code&gt;)</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.UnsupportedOperationException if the current configuration of the JVM does not allow
 redefinition ({@link #isRedefineClassesSupported} is false) or the redefinition attempted
 to make unsupported changes</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.ClassFormatError if the data did not contain a valid class</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.NoClassDefFoundError if the name in the class file is not equal to the name of the class</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.UnsupportedClassVersionError if the class file version numbers are not supported</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.ClassCircularityError if the new classes contain a circularity</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.LinkageError if a linkage error occurs</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.NullPointerException if the supplied definitions array or any of its components
 is &lt;code&gt;null&lt;/code&gt;</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.ClassNotFoundException Can never be thrown (present for compatibility reasons only)</description>
					</attribute>
					<attribute name="@see">
						<description>#isRedefineClassesSupported</description>
					</attribute>
					<attribute name="@see">
						<description>#addTransformer</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.instrument.ClassFileTransformer</description>
					</attribute>
				</comment>
				<params>
					<param name="definitions" comment="array of classes to redefine with corresponding definitions;
                    a zero-length array is allowed, in this case, this method does nothing" fulltype="java.lang.instrument.ClassDefinition[]" type="ClassDefinition" />
				</params>
				<exceptions>
					<exception fulltype="java.lang.ClassNotFoundException" type="ClassNotFoundException" />
					<exception fulltype="java.lang.instrument.UnmodifiableClassException" type="UnmodifiableClassException" />
				</exceptions>
			</method>
			<method visibility="public" name="isModifiableClass" fulltype="boolean" type="boolean">
				<comment>
					<description>Determines whether a class is modifiable by
 {@linkplain #retransformClasses retransformation}
 or {@linkplain #redefineClasses redefinition}.
 If a class is modifiable then this method returns &lt;code&gt;true&lt;/code&gt;.
 If a class is not modifiable then this method returns &lt;code&gt;false&lt;/code&gt;.
 &lt;P&gt;
 For a class to be retransformed, {@link #isRetransformClassesSupported} must also be true.
 But the value of &lt;code&gt;isRetransformClassesSupported()&lt;/code&gt; does not influence the value
 returned by this function.
 For a class to be redefined, {@link #isRedefineClassesSupported} must also be true.
 But the value of &lt;code&gt;isRedefineClassesSupported()&lt;/code&gt; does not influence the value
 returned by this function.
 &lt;P&gt;
 Primitive classes (for example, &lt;code&gt;java.lang.Integer.TYPE&lt;/code&gt;)
 and array classes are never modifiable.</description>
					<attribute name="@throws">
						<description>java.lang.NullPointerException if the specified class is &lt;code&gt;null&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@see">
						<description>#retransformClasses</description>
					</attribute>
					<attribute name="@see">
						<description>#isRetransformClassesSupported</description>
					</attribute>
					<attribute name="@see">
						<description>#redefineClasses</description>
					</attribute>
					<attribute name="@see">
						<description>#isRedefineClassesSupported</description>
					</attribute>
					<attribute name="@since">
						<description>1.6</description>
					</attribute>
				</comment>
				<params>
					<param name="theClass" fulltype="java.lang.Class" type="Class" />
				</params>
			</method>
			<method visibility="public" name="getAllLoadedClasses" returncomment="an array containing all the classes loaded by the JVM, zero-length if there are none" fulltype="java.lang.Class[]" type="Class">
				<comment>
					<description>Returns an array of all classes currently loaded by the JVM.</description>
					<attribute name="@return">
						<description>an array containing all the classes loaded by the JVM, zero-length if there are none</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getInitiatedClasses" returncomment="an array containing all the classes for which loader is an initiating loader,
          zero-length if there are none" fulltype="java.lang.Class[]" type="Class">
				<comment>
					<description>Returns an array of all classes for which &lt;code&gt;loader&lt;/code&gt; is an initiating loader.
 If the supplied loader is &lt;code&gt;null&lt;/code&gt;, classes initiated by the bootstrap class
 loader are returned.</description>
					<attribute name="@param">
						<description>loader          the loader whose initiated class list will be returned</description>
					</attribute>
					<attribute name="@return">
						<description>an array containing all the classes for which loader is an initiating loader,
          zero-length if there are none</description>
					</attribute>
				</comment>
				<params>
					<param name="loader" comment="the loader whose initiated class list will be returned" fulltype="java.lang.ClassLoader" type="ClassLoader" />
				</params>
			</method>
			<method visibility="public" name="getObjectSize" returncomment="an implementation-specific approximation of the amount of storage consumed by the specified object" fulltype="long" type="long">
				<comment>
					<description>Returns an implementation-specific approximation of the amount of storage consumed by
 the specified object. The result may include some or all of the object&apos;s overhead,
 and thus is useful for comparison within an implementation but not between implementations.

 The estimate may change during a single invocation of the JVM.</description>
					<attribute name="@param">
						<description>objectToSize     the object to size</description>
					</attribute>
					<attribute name="@return">
						<description>an implementation-specific approximation of the amount of storage consumed by the specified object</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.NullPointerException if the supplied Object is &lt;code&gt;null&lt;/code&gt;.</description>
					</attribute>
				</comment>
				<params>
					<param name="objectToSize" comment="the object to size" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="appendToBootstrapClassLoaderSearch" fulltype="void" type="void">
				<comment>
					<description>Specifies a JAR file with instrumentation classes to be defined by the
 bootstrap class loader.

 &lt;p&gt; When the virtual machine&apos;s built-in class loader, known as the &quot;bootstrap
 class loader&quot;, unsuccessfully searches for a class, the entries in the {@link
 java.util.jar.JarFile JAR file} will be searched as well.

 &lt;p&gt; This method may be used multiple times to add multiple JAR files to be
 searched in the order that this method was invoked.

 &lt;p&gt; The agent should take care to ensure that the JAR does not contain any
 classes or resources other than those to be defined by the bootstrap
 class loader for the purpose of instrumentation.
 Failure to observe this warning could result in unexpected
 behaviour that is difficult to diagnose. For example, suppose there is a
 loader L, and L&apos;s parent for delegation is the bootstrap class loader.
 Furthermore, a method in class C, a class defined by L, makes reference to
 a non-public accessor class C$1. If the JAR file contains a class C$1 then
 the delegation to the bootstrap class loader will cause C$1 to be defined
 by the bootstrap class loader. In this example an &lt;code&gt;IllegalAccessError&lt;/code&gt;
 will be thrown that may cause the application to fail. One approach to
 avoiding these types of issues, is to use a unique package name for the
 instrumentation classes.

 &lt;p&gt; The &lt;a href=&quot;http://java.sun.com/docs/books/vmspec/&quot;&gt;Java Virtual Machine
 Specification&lt;/a&gt; specifies that a subsequent attempt to resolve a symbolic
 reference that the Java virtual machine has previously unsuccessfully attempted
 to resolve always fails with the same error that was thrown as a result of the
 initial resolution attempt. Consequently, if the JAR file contains an entry
 that corresponds to a class for which the Java virtual machine has
 unsuccessfully attempted to resolve a reference, then subsequent attempts to
 resolve that reference will fail with the same error as the initial attempt.</description>
					<attribute name="@param">
						<description>jarfile
          The JAR file to be searched when the bootstrap class loader
          unsuccessfully searches for a class.</description>
					</attribute>
					<attribute name="@throws">
						<description>NullPointerException
          If &lt;code&gt;jarfile&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@see">
						<description>#appendToSystemClassLoaderSearch</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.ClassLoader</description>
					</attribute>
					<attribute name="@see">
						<description>java.util.jar.JarFile</description>
					</attribute>
					<attribute name="@since">
						<description>1.6</description>
					</attribute>
				</comment>
				<params>
					<param name="jarfile" comment="The JAR file to be searched when the bootstrap class loader
          unsuccessfully searches for a class." fulltype="java.util.jar.JarFile" type="JarFile" />
				</params>
			</method>
			<method visibility="public" name="appendToSystemClassLoaderSearch" fulltype="void" type="void">
				<comment>
					<description>Specifies a JAR file with instrumentation classes to be defined by the
 system class loader.

 When the system class loader for delegation (see
 {@link java.lang.ClassLoader#getSystemClassLoader getSystemClassLoader()})
 unsuccessfully searches for a class, the entries in the {@link
 java.util.jar.JarFile JarFile} will be searched as well.

 &lt;p&gt; This method may be used multiple times to add multiple JAR files to be
 searched in the order that this method was invoked.

 &lt;p&gt; The agent should take care to ensure that the JAR does not contain any
 classes or resources other than those to be defined by the system class
 loader for the purpose of instrumentation.
 Failure to observe this warning could result in unexpected
 behaviour that is difficult to diagnose (see
 {@link #appendToBootstrapClassLoaderSearch
 appendToBootstrapClassLoaderSearch}.

 &lt;p&gt; The system class loader supports adding a JAR file to be searched if
 it implements a method named &lt;code&gt;appendToClassPathForInstrumentation&lt;/code&gt;
 which takes a single parameter of type &lt;code&gt;java.lang.String&lt;/code&gt;. The
 method is not required to have &lt;code&gt;public&lt;/code&gt; access. The name of
 the JAR file is obtained by invoking the {@link java.util.zip.ZipFile#getName
 getName()} method on the &lt;code&gt;jarfile&lt;/code&gt; and this is provided as the
 parameter to the &lt;code&gt;appendtoClassPathForInstrumentation&lt;/code&gt; method.

 &lt;p&gt; The &lt;a href=&quot;http://java.sun.com/docs/books/vmspec/&quot;&gt;Java Virtual Machine
 Specification&lt;/a&gt; specifies that a subsequent attempt to resolve a symbolic
 reference that the Java virtual machine has previously unsuccessfully attempted
 to resolve always fails with the same error that was thrown as a result of the
 initial resolution attempt. Consequently, if the JAR file contains an entry
 that corresponds to a class for which the Java virtual machine has
 unsuccessfully attempted to resolve a reference, then subsequent attempts to
 resolve that reference will fail with the same error as the initial attempt.

 &lt;p&gt; This method does not change the value of &lt;code&gt;java.class.path&lt;/code&gt;
 {@link java.lang.System#getProperties system property}.</description>
					<attribute name="@param">
						<description>jarfile
          The JAR file to be searched when the system class loader
          unsuccessfully searches for a class.</description>
					</attribute>
					<attribute name="@throws">
						<description>UnsupportedOperationException
          If the system class loader does not support appending a
          a JAR file to be searched.</description>
					</attribute>
					<attribute name="@throws">
						<description>NullPointerException
          If &lt;code&gt;jarfile&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@see">
						<description>#appendToBootstrapClassLoaderSearch</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.ClassLoader#getSystemClassLoader</description>
					</attribute>
					<attribute name="@see">
						<description>java.util.jar.JarFile</description>
					</attribute>
					<attribute name="@since">
						<description>1.6</description>
					</attribute>
				</comment>
				<params>
					<param name="jarfile" comment="The JAR file to be searched when the system class loader
          unsuccessfully searches for a class." fulltype="java.util.jar.JarFile" type="JarFile" />
				</params>
			</method>
			<method visibility="public" name="isNativeMethodPrefixSupported" returncomment="true if the current JVM configuration supports
 setting a native method prefix, false if not." fulltype="boolean" type="boolean">
				<comment>
					<description>Returns whether the current JVM configuration supports
 {@linkplain #setNativeMethodPrefix(ClassFileTransformer,String)
 setting a native method prefix}.
 The ability to set a native method prefix is an optional
 capability of a JVM.
 Setting a native method prefix will only be supported if the
 &lt;code&gt;Can-Set-Native-Method-Prefix&lt;/code&gt; manifest attribute is set to
 &lt;code&gt;true&lt;/code&gt; in the agent JAR file (as described in the
 {@linkplain java.lang.instrument package specification}) and the JVM supports
 this capability.
 During a single instantiation of a single JVM, multiple
 calls to this method will always return the same answer.</description>
					<attribute name="@return">
						<description>true if the current JVM configuration supports
 setting a native method prefix, false if not.</description>
					</attribute>
					<attribute name="@see">
						<description>#setNativeMethodPrefix</description>
					</attribute>
					<attribute name="@since">
						<description>1.6</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="setNativeMethodPrefix" fulltype="void" type="void">
				<comment>
					<description>This method modifies the failure handling of
 native method resolution by allowing retry
 with a prefix applied to the name.
 When used with the
 {@link java.lang.instrument.ClassFileTransformer ClassFileTransformer},
 it enables native methods to be
 instrumented.
 &lt;p/&gt;
 Since native methods cannot be directly instrumented
 (they have no bytecodes), they must be wrapped with
 a non-native method which can be instrumented.
 For example, if we had:
 &lt;pre&gt;
   native boolean foo(int x);&lt;/pre&gt;
 &lt;p/&gt;
 We could transform the class file (with the
 ClassFileTransformer during the initial definition
 of the class) so that this becomes:
 &lt;pre&gt;
   boolean foo(int x) {
     &lt;i&gt;... record entry to foo ...&lt;/i&gt;
     return wrapped_foo(x);
   }

   native boolean wrapped_foo(int x);&lt;/pre&gt;
 &lt;p/&gt;
 Where &lt;code&gt;foo&lt;/code&gt; becomes a wrapper for the actual native
 method with the appended prefix &quot;wrapped_&quot;.  Note that
 &quot;wrapped_&quot; would be a poor choice of prefix since it
 might conceivably form the name of an existing method
 thus something like &quot;$$$MyAgentWrapped$$$_&quot; would be
 better but would make these examples less readable.
 &lt;p/&gt;
 The wrapper will allow data to be collected on the native
 method call, but now the problem becomes linking up the
 wrapped method with the native implementation.
 That is, the method &lt;code&gt;wrapped_foo&lt;/code&gt; needs to be
 resolved to the native implementation of &lt;code&gt;foo&lt;/code&gt;,
 which might be:
 &lt;pre&gt;
   Java_somePackage_someClass_foo(JNIEnv* env, jint x)&lt;/pre&gt;
 &lt;p/&gt;
 This function allows the prefix to be specified and the
 proper resolution to occur.
 Specifically, when the standard resolution fails, the
 resolution is retried taking the prefix into consideration.
 There are two ways that resolution occurs, explicit
 resolution with the JNI function &lt;code&gt;RegisterNatives&lt;/code&gt;
 and the normal automatic resolution.  For
 &lt;code&gt;RegisterNatives&lt;/code&gt;, the JVM will attempt this
 association:
 &lt;pre&gt;
   method(foo) -&gt; nativeImplementation(foo)&lt;/pre&gt;
 &lt;p/&gt;
 When this fails, the resolution will be retried with
 the specified prefix prepended to the method name,
 yielding the correct resolution:
 &lt;pre&gt;
   method(wrapped_foo) -&gt; nativeImplementation(foo)&lt;/pre&gt;
 &lt;p/&gt;
 For automatic resolution, the JVM will attempt:
 &lt;pre&gt;
   method(wrapped_foo) -&gt; nativeImplementation(wrapped_foo)&lt;/pre&gt;
 &lt;p/&gt;
 When this fails, the resolution will be retried with
 the specified prefix deleted from the implementation name,
 yielding the correct resolution:
 &lt;pre&gt;
   method(wrapped_foo) -&gt; nativeImplementation(foo)&lt;/pre&gt;
 &lt;p/&gt;
 Note that since the prefix is only used when standard
 resolution fails, native methods can be wrapped selectively.
 &lt;p/&gt;
 Since each &lt;code&gt;ClassFileTransformer&lt;/code&gt;
 can do its own transformation of the bytecodes, more
 than one layer of wrappers may be applied. Thus each
 transformer needs its own prefix.  Since transformations
 are applied in order, the prefixes, if applied, will
 be applied in the same order
 (see {@link #addTransformer(ClassFileTransformer,boolean) addTransformer}).
 Thus if three transformers applied
 wrappers, &lt;code&gt;foo&lt;/code&gt; might become
 &lt;code&gt;$trans3_$trans2_$trans1_foo&lt;/code&gt;.  But if, say,
 the second transformer did not apply a wrapper to
 &lt;code&gt;foo&lt;/code&gt; it would be just
 &lt;code&gt;$trans3_$trans1_foo&lt;/code&gt;.  To be able to
 efficiently determine the sequence of prefixes,
 an intermediate prefix is only applied if its non-native
 wrapper exists.  Thus, in the last example, even though
 &lt;code&gt;$trans1_foo&lt;/code&gt; is not a native method, the
 &lt;code&gt;$trans1_&lt;/code&gt; prefix is applied since
 &lt;code&gt;$trans1_foo&lt;/code&gt; exists.</description>
					<attribute name="@param">
						<description>transformer
          The ClassFileTransformer which wraps using this prefix.</description>
					</attribute>
					<attribute name="@param">
						<description>prefix
          The prefix which has been applied to wrapped native methods.</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.NullPointerException if passed a &lt;code&gt;null&lt;/code&gt; transformer.</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.UnsupportedOperationException if the current configuration of
           the JVM does not allow setting a native method prefix
           ({@link #isNativeMethodPrefixSupported} is false).</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.IllegalArgumentException if the transformer is not registered
           (see {@link #addTransformer(ClassFileTransformer,boolean) addTransformer}).</description>
					</attribute>
					<attribute name="@since">
						<description>1.6</description>
					</attribute>
				</comment>
				<params>
					<param name="transformer" comment="The ClassFileTransformer which wraps using this prefix." fulltype="java.lang.instrument.ClassFileTransformer" type="ClassFileTransformer" />
					<param name="prefix" comment="The prefix which has been applied to wrapped native methods." fulltype="java.lang.String" type="String" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass final="true" superclass="Object" visibility="public" package="java.lang.instrument" superclassfulltype="java.lang.Object" fulltype="java.lang.instrument.ClassDefinition" type="ClassDefinition">
		<comment>
			<description>This class serves as a parameter block to the &lt;code&gt;Instrumentation.redefineClasses&lt;/code&gt; method.
 Serves to bind the &lt;code&gt;Class&lt;/code&gt; that needs redefining together with the new class file bytes.</description>
			<attribute name="@see">
				<description>java.lang.instrument.Instrumentation#redefineClasses</description>
			</attribute>
			<attribute name="@since">
				<description>1.5</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" visibility="private" name="mClass" fulltype="java.lang.Class" type="Class">
				<comment>
					<description>The class to redefine</description>
				</comment>
			</field>
			<field final="true" visibility="private" name="mClassFile" fulltype="byte[]" type="byte">
				<comment>
					<description>The replacement class file bytes</description>
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="public" name="ClassDefinition">
				<comment>
					<description>Creates a new &lt;code&gt;ClassDefinition&lt;/code&gt; binding using the supplied
  class and class file bytes. Does not copy the supplied buffer, just captures a reference to it.</description>
					<attribute name="@param">
						<description>theClass the &lt;code&gt;Class&lt;/code&gt; that needs redefining</description>
					</attribute>
					<attribute name="@param">
						<description>theClassFile the new class file bytes</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.NullPointerException if the supplied class or array is &lt;code&gt;null&lt;/code&gt;.</description>
					</attribute>
				</comment>
				<params>
					<param name="theClass" comment="the &lt;code&gt;Class&lt;/code&gt; that needs redefining" fulltype="java.lang.Class" type="Class" />
					<param name="theClassFile" comment="the new class file bytes" fulltype="byte[]" type="byte" />
				</params>
			</constructor>
			<method visibility="public" name="getDefinitionClass" returncomment="the &lt;code&gt;Class&lt;/code&gt; object referred to." fulltype="java.lang.Class" type="Class">
				<comment>
					<description>Returns the class.</description>
					<attribute name="@return">
						<description>the &lt;code&gt;Class&lt;/code&gt; object referred to.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getDefinitionClassFile" returncomment="the class file bytes." fulltype="byte[]" type="byte">
				<comment>
					<description>Returns the array of bytes that contains the new class file.</description>
					<attribute name="@return">
						<description>the class file bytes.</description>
					</attribute>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Exception" visibility="public" package="java.lang.instrument" serializable="true" superclassfulltype="java.lang.Exception" fulltype="java.lang.instrument.IllegalClassFormatException" type="IllegalClassFormatException">
		<comment>
			<description>Thrown by an implementation of
 {@link java.lang.instrument.ClassFileTransformer#transform ClassFileTransformer.transform}
 when its input parameters are invalid.
 This may occur either because the initial class file bytes were
 invalid or a previously applied transform corrupted the bytes.</description>
			<attribute name="@see">
				<description>java.lang.instrument.ClassFileTransformer#transform</description>
			</attribute>
			<attribute name="@since">
				<description>1.5</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="IllegalClassFormatException">
				<comment>
					<description>Constructs an &lt;code&gt;IllegalClassFormatException&lt;/code&gt; with no
 detail message.</description>
				</comment>
			</constructor>
			<constructor visibility="public" name="IllegalClassFormatException">
				<comment>
					<description>Constructs an &lt;code&gt;IllegalClassFormatException&lt;/code&gt; with the
 specified detail message.</description>
					<attribute name="@param">
						<description>s   the detail message.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the detail message." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="java.lang.instrument" interface="true" fulltype="java.lang.instrument.ClassFileTransformer" type="ClassFileTransformer">
		<comment>
			<description>An agent provides an implementation of this interface in order
 to transform class files.
 The transformation occurs before the class is defined by the JVM.
 &lt;P&gt;
 Note the term &lt;i&gt;class file&lt;/i&gt; is used as defined in the chapter
 &lt;a href=&quot;http://java.sun.com/docs/books/vmspec/2nd-edition/html/ClassFile.doc.html#80959&quot;&gt;The class File Format&lt;/a&gt;
 of &lt;i&gt;The Java Virtual Machine Specification&lt;/i&gt;, to mean a sequence
 of bytes in class file format, whether or not they reside in a file.</description>
			<attribute name="@see">
				<description>java.lang.instrument.Instrumentation</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.instrument.Instrumentation#addTransformer</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.instrument.Instrumentation#removeTransformer</description>
			</attribute>
			<attribute name="@since">
				<description>1.5</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="transform" returncomment="a well-formed class file buffer (the result of the transform),
                or &lt;code&gt;null&lt;/code&gt; if no transform is performed." fulltype="byte[]" type="byte">
				<comment>
					<description>The implementation of this method may transform the supplied class file and
 return a new replacement class file.

 &lt;P&gt;
 There are two kinds of transformers, determined by the &lt;code&gt;canRetransform&lt;/code&gt;
 parameter of
 {@link java.lang.instrument.Instrumentation#addTransformer(ClassFileTransformer,boolean)}:
  &lt;ul&gt;
    &lt;li&gt;&lt;i&gt;retransformation capable&lt;/i&gt; transformers that were added with
        &lt;code&gt;canRetransform&lt;/code&gt; as true
    &lt;/li&gt;
    &lt;li&gt;&lt;i&gt;retransformation incapable&lt;/i&gt; transformers that were added with
        &lt;code&gt;canRetransform&lt;/code&gt; as false or where added with
        {@link java.lang.instrument.Instrumentation#addTransformer(ClassFileTransformer)}
    &lt;/li&gt;
  &lt;/ul&gt;

 &lt;P&gt;
 Once a transformer has been registered with
 {@link java.lang.instrument.Instrumentation#addTransformer(ClassFileTransformer,boolean)
 addTransformer},
 the transformer will be called for every new class definition and every class redefinition.
 Retransformation capable transformers will also be called on every class retransformation.
 The request for a new class definition is made with
 {@link java.lang.ClassLoader#defineClass ClassLoader.defineClass}
 or its native equivalents.
 The request for a class redefinition is made with
 {@link java.lang.instrument.Instrumentation#redefineClasses Instrumentation.redefineClasses}
 or its native equivalents.
 The request for a class retransformation is made with
 {@link java.lang.instrument.Instrumentation#retransformClasses Instrumentation.retransformClasses}
 or its native equivalents.
 The transformer is called during the processing of the request, before the class file bytes
 have been verified or applied.
 When there are multiple transformers, transformations are composed by chaining the
 &lt;code&gt;transform&lt;/code&gt; calls.
 That is, the byte array returned by one call to &lt;code&gt;transform&lt;/code&gt; becomes the input
 (via the &lt;code&gt;classfileBuffer&lt;/code&gt; parameter) to the next call.

 &lt;P&gt;
 Transformations are applied in the following order:
  &lt;ul&gt;
    &lt;li&gt;Retransformation incapable transformers
    &lt;/li&gt;
    &lt;li&gt;Retransformation incapable native transformers
    &lt;/li&gt;
    &lt;li&gt;Retransformation capable transformers
    &lt;/li&gt;
    &lt;li&gt;Retransformation capable native transformers
    &lt;/li&gt;
  &lt;/ul&gt;

 &lt;P&gt;
 For retransformations, the retransformation incapable transformers are not
 called, instead the result of the previous transformation is reused.
 In all other cases, this method is called.
 Within each of these groupings, transformers are called in the order registered.
 Native transformers are provided by the &lt;code&gt;ClassFileLoadHook&lt;/code&gt; event
 in the Java Virtual Machine Tool Interface).

 &lt;P&gt;
 The input (via the &lt;code&gt;classfileBuffer&lt;/code&gt; parameter) to the first
 transformer is:
  &lt;ul&gt;
    &lt;li&gt;for new class definition,
        the bytes passed to &lt;code&gt;ClassLoader.defineClass&lt;/code&gt;
    &lt;/li&gt;
    &lt;li&gt;for class redefinition,
        &lt;code&gt;definitions.getDefinitionClassFile()&lt;/code&gt; where
        &lt;code&gt;definitions&lt;/code&gt; is the parameter to
        {@link java.lang.instrument.Instrumentation#redefineClasses
         Instrumentation.redefineClasses}
    &lt;/li&gt;
    &lt;li&gt;for class retransformation,
         the bytes passed to the new class definition or, if redefined,
         the last redefinition, with all transformations made by retransformation
         incapable transformers reapplied automatically and unaltered;
         for details see
         {@link java.lang.instrument.Instrumentation#retransformClasses
          Instrumentation.retransformClasses}
    &lt;/li&gt;
  &lt;/ul&gt;

 &lt;P&gt;
 If the implementing method determines that no transformations are needed,
 it should return &lt;code&gt;null&lt;/code&gt;.
 Otherwise, it should create a new &lt;code&gt;byte[]&lt;/code&gt; array,
 copy the input &lt;code&gt;classfileBuffer&lt;/code&gt; into it,
 along with all desired transformations, and return the new array.
 The input &lt;code&gt;classfileBuffer&lt;/code&gt; must not be modified.

 &lt;P&gt;
 In the retransform and redefine cases,
 the transformer must support the redefinition semantics:
 if a class that the transformer changed during initial definition is later
 retransformed or redefined, the
 transformer must insure that the second class output class file is a legal
 redefinition of the first output class file.

 &lt;P&gt;
 If the transformer throws an exception (which it doesn&apos;t catch),
 subsequent transformers will still be called and the load, redefine
 or retransform will still be attempted.
 Thus, throwing an exception has the same effect as returning &lt;code&gt;null&lt;/code&gt;.
 To prevent unexpected behavior when unchecked exceptions are generated
 in transformer code, a transformer can catch &lt;code&gt;Throwable&lt;/code&gt;.
 If the transformer believes the &lt;code&gt;classFileBuffer&lt;/code&gt; does not
 represent a validly formatted class file, it should throw
 an &lt;code&gt;IllegalClassFormatException&lt;/code&gt;;
 while this has the same effect as returning null. it facilitates the
 logging or debugging of format corruptions.</description>
					<attribute name="@param">
						<description>loader                the defining loader of the class to be transformed,
                              may be &lt;code&gt;null&lt;/code&gt; if the bootstrap loader</description>
					</attribute>
					<attribute name="@param">
						<description>className             the name of the class in the internal form of fully
                              qualified class and interface names as defined in
                              &lt;i&gt;The Java Virtual Machine Specification&lt;/i&gt;.
                              For example, &lt;code&gt;&quot;java/util/List&quot;&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@param">
						<description>classBeingRedefined   if this is triggered by a redefine or retransform,
                              the class being redefined or retransformed;
                              if this is a class load, &lt;code&gt;null&lt;/code&gt;</description>
					</attribute>
					<attribute name="@param">
						<description>protectionDomain      the protection domain of the class being defined or redefined</description>
					</attribute>
					<attribute name="@param">
						<description>classfileBuffer       the input byte buffer in class file format - must not be modified</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalClassFormatException if the input does not represent a well-formed class file</description>
					</attribute>
					<attribute name="@return">
						<description>a well-formed class file buffer (the result of the transform),
                or &lt;code&gt;null&lt;/code&gt; if no transform is performed.</description>
					</attribute>
					<attribute name="@see">
						<description>Instrumentation#redefineClasses</description>
					</attribute>
				</comment>
				<params>
					<param name="loader" comment="the defining loader of the class to be transformed,
                              may be &lt;code&gt;null&lt;/code&gt; if the bootstrap loader" fulltype="java.lang.ClassLoader" type="ClassLoader" />
					<param name="className" comment="the name of the class in the internal form of fully
                              qualified class and interface names as defined in
                              &lt;i&gt;The Java Virtual Machine Specification&lt;/i&gt;.
                              For example, &lt;code&gt;&quot;java/util/List&quot;&lt;/code&gt;." fulltype="java.lang.String" type="String" />
					<param name="classBeingRedefined" comment="if this is triggered by a redefine or retransform,
                              the class being redefined or retransformed;
                              if this is a class load, &lt;code&gt;null&lt;/code&gt;" fulltype="java.lang.Class" type="Class" />
					<param name="protectionDomain" comment="the protection domain of the class being defined or redefined" fulltype="java.security.ProtectionDomain" type="ProtectionDomain" />
					<param name="classfileBuffer" comment="the input byte buffer in class file format - must not be modified" fulltype="byte[]" type="byte" />
				</params>
				<exceptions>
					<exception comment="if the input does not represent a well-formed class file" fulltype="java.lang.instrument.IllegalClassFormatException" type="IllegalClassFormatException" />
				</exceptions>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Exception" visibility="public" package="java.lang.instrument" serializable="true" superclassfulltype="java.lang.Exception" fulltype="java.lang.instrument.UnmodifiableClassException" type="UnmodifiableClassException">
		<comment>
			<description>Thrown by an implementation of
 {@link java.lang.instrument.Instrumentation#redefineClasses Instrumentation.redefineClasses}
 when one of the specified classes cannot be modified.</description>
			<attribute name="@see">
				<description>java.lang.instrument.Instrumentation#redefineClasses</description>
			</attribute>
			<attribute name="@since">
				<description>1.5</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="UnmodifiableClassException">
				<comment>
					<description>Constructs an &lt;code&gt;UnmodifiableClassException&lt;/code&gt; with no
 detail message.</description>
				</comment>
			</constructor>
			<constructor visibility="public" name="UnmodifiableClassException">
				<comment>
					<description>Constructs an &lt;code&gt;UnmodifiableClassException&lt;/code&gt; with the
 specified detail message.</description>
					<attribute name="@param">
						<description>s   the detail message.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the detail message." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="java.lang" superclassfulltype="java.lang.Object" fulltype="java.lang.SecurityManager" type="SecurityManager">
		<comment>
			<description>The security manager is a class that allows
 applications to implement a security policy. It allows an
 application to determine, before performing a possibly unsafe or
 sensitive operation, what the operation is and whether
 it is being attempted in a security context that allows the
 operation to be performed. The
 application can allow or disallow the operation.
 &lt;p&gt;
 The &lt;code&gt;SecurityManager&lt;/code&gt; class contains many methods with
 names that begin with the word &lt;code&gt;check&lt;/code&gt;. These methods
 are called by various methods in the Java libraries before those
 methods perform certain potentially sensitive operations. The
 invocation of such a &lt;code&gt;check&lt;/code&gt; method typically looks like this:
 &lt;p&gt;&lt;blockquote&gt;&lt;pre&gt;
     SecurityManager security = System.getSecurityManager();
     if (security != null) {
         security.check&lt;i&gt;XXX&lt;/i&gt;(argument, &amp;nbsp;.&amp;nbsp;.&amp;nbsp;.&amp;nbsp;);
     }
 &lt;/pre&gt;&lt;/blockquote&gt;
 &lt;p&gt;
 The security manager is thereby given an opportunity to prevent
 completion of the operation by throwing an exception. A security
 manager routine simply returns if the operation is permitted, but
 throws a &lt;code&gt;SecurityException&lt;/code&gt; if the operation is not
 permitted. The only exception to this convention is
 &lt;code&gt;checkTopLevelWindow&lt;/code&gt;, which returns a
 &lt;code&gt;boolean&lt;/code&gt; value.
 &lt;p&gt;
 The current security manager is set by the
 &lt;code&gt;setSecurityManager&lt;/code&gt; method in class
 &lt;code&gt;System&lt;/code&gt;. The current security manager is obtained
 by the &lt;code&gt;getSecurityManager&lt;/code&gt; method.
 &lt;p&gt;
 The special method
 {@link SecurityManager#checkPermission(java.security.Permission)}
 determines whether an access request indicated by a specified
 permission should be granted or denied. The
 default implementation calls

 &lt;pre&gt;
   AccessController.checkPermission(perm);
 &lt;/pre&gt;

 &lt;p&gt;
 If a requested access is allowed,
 &lt;code&gt;checkPermission&lt;/code&gt; returns quietly. If denied, a
 &lt;code&gt;SecurityException&lt;/code&gt; is thrown.
 &lt;p&gt;
 As of Java 2 SDK v1.2, the default implementation of each of the other
 &lt;code&gt;check&lt;/code&gt; methods in &lt;code&gt;SecurityManager&lt;/code&gt; is to
 call the &lt;code&gt;SecurityManager checkPermission&lt;/code&gt; method
 to determine if the calling thread has permission to perform the requested
 operation.
 &lt;p&gt;
 Note that the &lt;code&gt;checkPermission&lt;/code&gt; method with
 just a single permission argument always performs security checks
 within the context of the currently executing thread.
 Sometimes a security check that should be made within a given context
 will actually need to be done from within a
 &lt;i&gt;different&lt;/i&gt; context (for example, from within a worker thread).
 The {@link SecurityManager#getSecurityContext getSecurityContext} method
 and the {@link SecurityManager#checkPermission(java.security.Permission,
 java.lang.Object) checkPermission}
 method that includes a context argument are provided
 for this situation. The
 &lt;code&gt;getSecurityContext&lt;/code&gt; method returns a &quot;snapshot&quot;
 of the current calling context. (The default implementation
 returns an AccessControlContext object.) A sample call is
 the following:

 &lt;pre&gt;
   Object context = null;
   SecurityManager sm = System.getSecurityManager();
   if (sm != null) context = sm.getSecurityContext();
 &lt;/pre&gt;

 &lt;p&gt;
 The &lt;code&gt;checkPermission&lt;/code&gt; method
 that takes a context object in addition to a permission
 makes access decisions based on that context,
 rather than on that of the current execution thread.
 Code within a different context can thus call that method,
 passing the permission and the
 previously-saved context object. A sample call, using the
 SecurityManager &lt;code&gt;sm&lt;/code&gt; obtained as in the previous example,
 is the following:

 &lt;pre&gt;
   if (sm != null) sm.checkPermission(permission, context);
 &lt;/pre&gt;

 &lt;p&gt;Permissions fall into these categories: File, Socket, Net,
 Security, Runtime, Property, AWT, Reflect, and Serializable.
 The classes managing these various
 permission categories are &lt;code&gt;java.io.FilePermission&lt;/code&gt;,
 &lt;code&gt;java.net.SocketPermission&lt;/code&gt;,
 &lt;code&gt;java.net.NetPermission&lt;/code&gt;,
 &lt;code&gt;java.security.SecurityPermission&lt;/code&gt;,
 &lt;code&gt;java.lang.RuntimePermission&lt;/code&gt;,
 &lt;code&gt;java.util.PropertyPermission&lt;/code&gt;,
 &lt;code&gt;java.awt.AWTPermission&lt;/code&gt;,
 &lt;code&gt;java.lang.reflect.ReflectPermission&lt;/code&gt;, and
 &lt;code&gt;java.io.SerializablePermission&lt;/code&gt;.

 &lt;p&gt;All but the first two (FilePermission and SocketPermission) are
 subclasses of &lt;code&gt;java.security.BasicPermission&lt;/code&gt;, which itself
 is an abstract subclass of the
 top-level class for permissions, which is
 &lt;code&gt;java.security.Permission&lt;/code&gt;. BasicPermission defines the
 functionality needed for all permissions that contain a name
 that follows the hierarchical property naming convention
 (for example, &quot;exitVM&quot;, &quot;setFactory&quot;, &quot;queuePrintJob&quot;, etc).
 An asterisk
 may appear at the end of the name, following a &quot;.&quot;, or by itself, to
 signify a wildcard match. For example: &quot;a.*&quot; or &quot;*&quot; is valid,
 &quot;*a&quot; or &quot;a*b&quot; is not valid.

 &lt;p&gt;FilePermission and SocketPermission are subclasses of the
 top-level class for permissions
 (&lt;code&gt;java.security.Permission&lt;/code&gt;). Classes like these
 that have a more complicated name syntax than that used by
 BasicPermission subclass directly from Permission rather than from
 BasicPermission. For example,
 for a &lt;code&gt;java.io.FilePermission&lt;/code&gt; object, the permission name is
 the path name of a file (or directory).

 &lt;p&gt;Some of the permission classes have an &quot;actions&quot; list that tells
 the actions that are permitted for the object.  For example,
 for a &lt;code&gt;java.io.FilePermission&lt;/code&gt; object, the actions list
 (such as &quot;read, write&quot;) specifies which actions are granted for the
 specified file (or for files in the specified directory).

 &lt;p&gt;Other permission classes are for &quot;named&quot; permissions -
 ones that contain a name but no actions list; you either have the
 named permission or you don&apos;t.

 &lt;p&gt;Note: There is also a &lt;code&gt;java.security.AllPermission&lt;/code&gt;
 permission that implies all permissions. It exists to simplify the work
 of system administrators who might need to perform multiple
 tasks that require all (or numerous) permissions.
 &lt;p&gt;
 See &lt;a href =&quot;../../../technotes/guides/security/permissions.html&quot;&gt;
 Permissions in the JDK&lt;/a&gt; for permission-related information.
 This document includes, for example, a table listing the various SecurityManager
 &lt;code&gt;check&lt;/code&gt; methods and the permission(s) the default
 implementation of each such method requires.
 It also contains a table of all the version 1.2 methods
 that require permissions, and for each such method tells
 which permission it requires.
 &lt;p&gt;
 For more information about &lt;code&gt;SecurityManager&lt;/code&gt; changes made in
 the JDK and advice regarding porting of 1.1-style security managers,
 see the &lt;a href=&quot;../../../technotes/guides/security/index.html&quot;&gt;security documentation&lt;/a&gt;.</description>
			<attribute name="@author">
				<description>Arthur van Hoff</description>
			</attribute>
			<attribute name="@author">
				<description>Roland Schemers</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.ClassLoader</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.SecurityException</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.SecurityManager#checkTopLevelWindow(java.lang.Object)
  checkTopLevelWindow</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.System#getSecurityManager() getSecurityManager</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.System#setSecurityManager(java.lang.SecurityManager)
  setSecurityManager</description>
			</attribute>
			<attribute name="@see">
				<description>java.security.AccessController AccessController</description>
			</attribute>
			<attribute name="@see">
				<description>java.security.AccessControlContext AccessControlContext</description>
			</attribute>
			<attribute name="@see">
				<description>java.security.AccessControlException AccessControlException</description>
			</attribute>
			<attribute name="@see">
				<description>java.security.Permission</description>
			</attribute>
			<attribute name="@see">
				<description>java.security.BasicPermission</description>
			</attribute>
			<attribute name="@see">
				<description>java.io.FilePermission</description>
			</attribute>
			<attribute name="@see">
				<description>java.net.SocketPermission</description>
			</attribute>
			<attribute name="@see">
				<description>java.util.PropertyPermission</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.RuntimePermission</description>
			</attribute>
			<attribute name="@see">
				<description>java.awt.AWTPermission</description>
			</attribute>
			<attribute name="@see">
				<description>java.security.Policy Policy</description>
			</attribute>
			<attribute name="@see">
				<description>java.security.SecurityPermission SecurityPermission</description>
			</attribute>
			<attribute name="@see">
				<description>java.security.ProtectionDomain</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.0</description>
			</attribute>
		</comment>
		<fields>
			<field visibility="protected" name="inCheck" fulltype="boolean" type="boolean">
				<comment>
					<description>This field is &lt;code&gt;true&lt;/code&gt; if there is a security check in
 progress; &lt;code&gt;false&lt;/code&gt; otherwise.</description>
					<attribute name="@deprecated">
						<description>This type of security checking is not recommended.
  It is recommended that the &lt;code&gt;checkPermission&lt;/code&gt;
  call be used instead.</description>
					</attribute>
				</comment>
			</field>
			<field visibility="private" name="initialized" fulltype="boolean" type="boolean" />
			<field static="true" visibility="private" name="rootGroup" fulltype="java.lang.ThreadGroup" type="ThreadGroup">
				<comment>
					<description>reference to the root thread group, used for the checkAccess
 methods.</description>
				</comment>
			</field>
			<field static="true" visibility="private" name="packageAccessValid" fulltype="boolean" type="boolean" />
			<field static="true" visibility="private" name="packageAccess" fulltype="java.lang.String[]" type="String" />
			<field final="true" static="true" visibility="private" name="packageAccessLock" fulltype="java.lang.Object" type="Object" />
			<field static="true" visibility="private" name="packageDefinitionValid" fulltype="boolean" type="boolean" />
			<field static="true" visibility="private" name="packageDefinition" fulltype="java.lang.String[]" type="String" />
			<field final="true" static="true" visibility="private" name="packageDefinitionLock" fulltype="java.lang.Object" type="Object" />
		</fields>
		<methods>
			<constructor visibility="public" name="SecurityManager">
				<comment>
					<description>Constructs a new &lt;code&gt;SecurityManager&lt;/code&gt;.

 &lt;p&gt; If there is a security manager already installed, this method first
 calls the security manager&apos;s &lt;code&gt;checkPermission&lt;/code&gt; method
 with the &lt;code&gt;RuntimePermission(&quot;createSecurityManager&quot;)&lt;/code&gt;
 permission to ensure the calling thread has permission to create a new
 security manager.
 This may result in throwing a &lt;code&gt;SecurityException&lt;/code&gt;.</description>
					<attribute name="@exception">
						<description>java.lang.SecurityException if a security manager already
             exists and its &lt;code&gt;checkPermission&lt;/code&gt; method
             doesn&apos;t allow creation of a new security manager.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.System#getSecurityManager()</description>
					</attribute>
					<attribute name="@see">
						<description>#checkPermission(java.security.Permission) checkPermission</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.RuntimePermission</description>
					</attribute>
				</comment>
			</constructor>
			<method visibility="private" name="hasAllPermission" fulltype="boolean" type="boolean">
				<comment>
					<description>returns true if the current context has been granted AllPermission</description>
				</comment>
			</method>
			<method visibility="public" name="getInCheck" returncomment="the value of the &lt;code&gt;inCheck&lt;/code&gt; field. This field
          should contain &lt;code&gt;true&lt;/code&gt; if a security check is
          in progress,
          &lt;code&gt;false&lt;/code&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Tests if there is a security check in progress.</description>
					<attribute name="@return">
						<description>the value of the &lt;code&gt;inCheck&lt;/code&gt; field. This field
          should contain &lt;code&gt;true&lt;/code&gt; if a security check is
          in progress,
          &lt;code&gt;false&lt;/code&gt; otherwise.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.SecurityManager#inCheck</description>
					</attribute>
					<attribute name="@deprecated">
						<description>This type of security checking is not recommended.
  It is recommended that the &lt;code&gt;checkPermission&lt;/code&gt;
  call be used instead.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="protected" name="getClassContext" returncomment="the execution stack." fulltype="java.lang.Class[]" type="Class">
				<comment>
					<description>Returns the current execution stack as an array of classes.
 &lt;p&gt;
 The length of the array is the number of methods on the execution
 stack. The element at index &lt;code&gt;0&lt;/code&gt; is the class of the
 currently executing method, the element at index &lt;code&gt;1&lt;/code&gt; is
 the class of that method&apos;s caller, and so on.</description>
					<attribute name="@return">
						<description>the execution stack.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="protected" name="currentClassLoader" returncomment="the class loader of the most recent occurrence on the stack
          of a method from a class defined using a non-system class
          loader." fulltype="java.lang.ClassLoader" type="ClassLoader">
				<comment>
					<description>Returns the class loader of the most recently executing method from
 a class defined using a non-system class loader. A non-system
 class loader is defined as being a class loader that is not equal to
 the system class loader (as returned
 by {@link ClassLoader#getSystemClassLoader}) or one of its ancestors.
 &lt;p&gt;
 This method will return
 &lt;code&gt;null&lt;/code&gt; in the following three cases:&lt;p&gt;
 &lt;ol&gt;
   &lt;li&gt;All methods on the execution stack are from classes
   defined using the system class loader or one of its ancestors.

   &lt;li&gt;All methods on the execution stack up to the first
   &quot;privileged&quot; caller
   (see {@link java.security.AccessController#doPrivileged})
   are from classes
   defined using the system class loader or one of its ancestors.

   &lt;li&gt; A call to &lt;code&gt;checkPermission&lt;/code&gt; with
   &lt;code&gt;java.security.AllPermission&lt;/code&gt; does not
   result in a SecurityException.

 &lt;/ol&gt;</description>
					<attribute name="@return">
						<description>the class loader of the most recent occurrence on the stack
          of a method from a class defined using a non-system class
          loader.</description>
					</attribute>
					<attribute name="@deprecated">
						<description>This type of security checking is not recommended.
  It is recommended that the &lt;code&gt;checkPermission&lt;/code&gt;
  call be used instead.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.ClassLoader#getSystemClassLoader() getSystemClassLoader</description>
					</attribute>
					<attribute name="@see">
						<description>#checkPermission(java.security.Permission) checkPermission</description>
					</attribute>
				</comment>
			</method>
			<method visibility="private" name="currentClassLoader0" fulltype="java.lang.ClassLoader" type="ClassLoader" />
			<method visibility="protected" name="currentLoadedClass" returncomment="the class  of the most recent occurrence on the stack
          of a method from a class defined using a non-system class
          loader." fulltype="java.lang.Class" type="Class">
				<comment>
					<description>Returns the class of the most recently executing method from
 a class defined using a non-system class loader. A non-system
 class loader is defined as being a class loader that is not equal to
 the system class loader (as returned
 by {@link ClassLoader#getSystemClassLoader}) or one of its ancestors.
 &lt;p&gt;
 This method will return
 &lt;code&gt;null&lt;/code&gt; in the following three cases:&lt;p&gt;
 &lt;ol&gt;
   &lt;li&gt;All methods on the execution stack are from classes
   defined using the system class loader or one of its ancestors.

   &lt;li&gt;All methods on the execution stack up to the first
   &quot;privileged&quot; caller
   (see {@link java.security.AccessController#doPrivileged})
   are from classes
   defined using the system class loader or one of its ancestors.

   &lt;li&gt; A call to &lt;code&gt;checkPermission&lt;/code&gt; with
   &lt;code&gt;java.security.AllPermission&lt;/code&gt; does not
   result in a SecurityException.

 &lt;/ol&gt;</description>
					<attribute name="@return">
						<description>the class  of the most recent occurrence on the stack
          of a method from a class defined using a non-system class
          loader.</description>
					</attribute>
					<attribute name="@deprecated">
						<description>This type of security checking is not recommended.
  It is recommended that the &lt;code&gt;checkPermission&lt;/code&gt;
  call be used instead.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.ClassLoader#getSystemClassLoader() getSystemClassLoader</description>
					</attribute>
					<attribute name="@see">
						<description>#checkPermission(java.security.Permission) checkPermission</description>
					</attribute>
				</comment>
			</method>
			<method visibility="protected" name="classDepth" returncomment="the depth on the stack frame of the first occurrence of a
          method from a class with the specified name;
          &lt;code&gt;-1&lt;/code&gt; if such a frame cannot be found." fulltype="int" type="int">
				<comment>
					<description>Returns the stack depth of the specified class.</description>
					<attribute name="@param">
						<description>name   the fully qualified name of the class to search for.</description>
					</attribute>
					<attribute name="@return">
						<description>the depth on the stack frame of the first occurrence of a
          method from a class with the specified name;
          &lt;code&gt;-1&lt;/code&gt; if such a frame cannot be found.</description>
					</attribute>
					<attribute name="@deprecated">
						<description>This type of security checking is not recommended.
  It is recommended that the &lt;code&gt;checkPermission&lt;/code&gt;
  call be used instead.</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="the fully qualified name of the class to search for." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="protected" name="classLoaderDepth" returncomment="the depth on the stack frame of the most recent occurrence of
          a method from a class defined using a non-system class loader." fulltype="int" type="int">
				<comment>
					<description>Returns the stack depth of the most recently executing method
 from a class defined using a non-system class loader.  A non-system
 class loader is defined as being a class loader that is not equal to
 the system class loader (as returned
 by {@link ClassLoader#getSystemClassLoader}) or one of its ancestors.
 &lt;p&gt;
 This method will return
 -1 in the following three cases:&lt;p&gt;
 &lt;ol&gt;
   &lt;li&gt;All methods on the execution stack are from classes
   defined using the system class loader or one of its ancestors.

   &lt;li&gt;All methods on the execution stack up to the first
   &quot;privileged&quot; caller
   (see {@link java.security.AccessController#doPrivileged})
   are from classes
   defined using the system class loader or one of its ancestors.

   &lt;li&gt; A call to &lt;code&gt;checkPermission&lt;/code&gt; with
   &lt;code&gt;java.security.AllPermission&lt;/code&gt; does not
   result in a SecurityException.

 &lt;/ol&gt;</description>
					<attribute name="@return">
						<description>the depth on the stack frame of the most recent occurrence of
          a method from a class defined using a non-system class loader.</description>
					</attribute>
					<attribute name="@deprecated">
						<description>This type of security checking is not recommended.
  It is recommended that the &lt;code&gt;checkPermission&lt;/code&gt;
  call be used instead.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.ClassLoader#getSystemClassLoader() getSystemClassLoader</description>
					</attribute>
					<attribute name="@see">
						<description>#checkPermission(java.security.Permission) checkPermission</description>
					</attribute>
				</comment>
			</method>
			<method visibility="private" name="classLoaderDepth0" fulltype="int" type="int" />
			<method visibility="protected" name="inClass" returncomment="&lt;code&gt;true&lt;/code&gt; if a method from a class with the specified
         name is on the execution stack; &lt;code&gt;false&lt;/code&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Tests if a method from a class with the specified
         name is on the execution stack.</description>
					<attribute name="@param">
						<description>name   the fully qualified name of the class.</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if a method from a class with the specified
         name is on the execution stack; &lt;code&gt;false&lt;/code&gt; otherwise.</description>
					</attribute>
					<attribute name="@deprecated">
						<description>This type of security checking is not recommended.
  It is recommended that the &lt;code&gt;checkPermission&lt;/code&gt;
  call be used instead.</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="the fully qualified name of the class." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="protected" name="inClassLoader" returncomment="&lt;code&gt;true&lt;/code&gt; if a call to &lt;code&gt;currentClassLoader&lt;/code&gt;
          has a non-null return value." fulltype="boolean" type="boolean">
				<comment>
					<description>Basically, tests if a method from a class defined using a
          class loader is on the execution stack.</description>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if a call to &lt;code&gt;currentClassLoader&lt;/code&gt;
          has a non-null return value.</description>
					</attribute>
					<attribute name="@deprecated">
						<description>This type of security checking is not recommended.
  It is recommended that the &lt;code&gt;checkPermission&lt;/code&gt;
  call be used instead.</description>
					</attribute>
					<attribute name="@see">
						<description>#currentClassLoader() currentClassLoader</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getSecurityContext" returncomment="an implementation-dependent object that encapsulates
          sufficient information about the current execution environment
          to perform some security checks later." fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Creates an object that encapsulates the current execution
 environment. The result of this method is used, for example, by the
 three-argument &lt;code&gt;checkConnect&lt;/code&gt; method and by the
 two-argument &lt;code&gt;checkRead&lt;/code&gt; method.
 These methods are needed because a trusted method may be called
 on to read a file or open a socket on behalf of another method.
 The trusted method needs to determine if the other (possibly
 untrusted) method would be allowed to perform the operation on its
 own.
 &lt;p&gt; The default implementation of this method is to return
 an &lt;code&gt;AccessControlContext&lt;/code&gt; object.</description>
					<attribute name="@return">
						<description>an implementation-dependent object that encapsulates
          sufficient information about the current execution environment
          to perform some security checks later.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.SecurityManager#checkConnect(java.lang.String, int,
   java.lang.Object) checkConnect</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.SecurityManager#checkRead(java.lang.String,
   java.lang.Object) checkRead</description>
					</attribute>
					<attribute name="@see">
						<description>java.security.AccessControlContext AccessControlContext</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="checkPermission" fulltype="void" type="void">
				<comment>
					<description>Throws a &lt;code&gt;SecurityException&lt;/code&gt; if the requested
 access, specified by the given permission, is not permitted based
 on the security policy currently in effect.
 &lt;p&gt;
 This method calls &lt;code&gt;AccessController.checkPermission&lt;/code&gt;
 with the given permission.</description>
					<attribute name="@param">
						<description>perm   the requested permission.</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException if access is not permitted based on
            the current security policy.</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException if the permission argument is
            &lt;code&gt;null&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
				<params>
					<param name="perm" comment="the requested permission." fulltype="java.security.Permission" type="Permission" />
				</params>
			</method>
			<method visibility="public" name="checkPermission" fulltype="void" type="void">
				<comment>
					<description>Throws a &lt;code&gt;SecurityException&lt;/code&gt; if the
 specified security context is denied access to the resource
 specified by the given permission.
 The context must be a security
 context returned by a previous call to
 &lt;code&gt;getSecurityContext&lt;/code&gt; and the access control
 decision is based upon the configured security policy for
 that security context.
 &lt;p&gt;
 If &lt;code&gt;context&lt;/code&gt; is an instance of
 &lt;code&gt;AccessControlContext&lt;/code&gt; then the
 &lt;code&gt;AccessControlContext.checkPermission&lt;/code&gt; method is
 invoked with the specified permission.
 &lt;p&gt;
 If &lt;code&gt;context&lt;/code&gt; is not an instance of
 &lt;code&gt;AccessControlContext&lt;/code&gt; then a
 &lt;code&gt;SecurityException&lt;/code&gt; is thrown.</description>
					<attribute name="@param">
						<description>perm      the specified permission</description>
					</attribute>
					<attribute name="@param">
						<description>context   a system-dependent security context.</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException  if the specified security context
             is not an instance of &lt;code&gt;AccessControlContext&lt;/code&gt;
             (e.g., is &lt;code&gt;null&lt;/code&gt;), or is denied access to the
             resource specified by the given permission.</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException if the permission argument is
             &lt;code&gt;null&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.SecurityManager#getSecurityContext()</description>
					</attribute>
					<attribute name="@see">
						<description>java.security.AccessControlContext#checkPermission(java.security.Permission)</description>
					</attribute>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
				<params>
					<param name="perm" comment="the specified permission" fulltype="java.security.Permission" type="Permission" />
					<param name="context" comment="a system-dependent security context." fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="checkCreateClassLoader" fulltype="void" type="void">
				<comment>
					<description>Throws a &lt;code&gt;SecurityException&lt;/code&gt; if the
 calling thread is not allowed to create a new class loader.
 &lt;p&gt;
 This method calls &lt;code&gt;checkPermission&lt;/code&gt; with the
 &lt;code&gt;RuntimePermission(&quot;createClassLoader&quot;)&lt;/code&gt;
 permission.
 &lt;p&gt;
 If you override this method, then you should make a call to
 &lt;code&gt;super.checkCreateClassLoader&lt;/code&gt;
 at the point the overridden method would normally throw an
 exception.</description>
					<attribute name="@exception">
						<description>SecurityException if the calling thread does not
             have permission
             to create a new class loader.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.ClassLoader#ClassLoader()</description>
					</attribute>
					<attribute name="@see">
						<description>#checkPermission(java.security.Permission) checkPermission</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="private" name="getRootGroup" fulltype="java.lang.ThreadGroup" type="ThreadGroup" />
			<method visibility="public" name="checkAccess" fulltype="void" type="void">
				<comment>
					<description>Throws a &lt;code&gt;SecurityException&lt;/code&gt; if the
 calling thread is not allowed to modify the thread argument.
 &lt;p&gt;
 This method is invoked for the current security manager by the
 &lt;code&gt;stop&lt;/code&gt;, &lt;code&gt;suspend&lt;/code&gt;, &lt;code&gt;resume&lt;/code&gt;,
 &lt;code&gt;setPriority&lt;/code&gt;, &lt;code&gt;setName&lt;/code&gt;, and
 &lt;code&gt;setDaemon&lt;/code&gt; methods of class &lt;code&gt;Thread&lt;/code&gt;.
 &lt;p&gt;
 If the thread argument is a system thread (belongs to
 the thread group with a &lt;code&gt;null&lt;/code&gt; parent) then
 this method calls &lt;code&gt;checkPermission&lt;/code&gt; with the
 &lt;code&gt;RuntimePermission(&quot;modifyThread&quot;)&lt;/code&gt; permission.
 If the thread argument is &lt;i&gt;not&lt;/i&gt; a system thread,
 this method just returns silently.
 &lt;p&gt;
 Applications that want a stricter policy should override this
 method. If this method is overridden, the method that overrides
 it should additionally check to see if the calling thread has the
 &lt;code&gt;RuntimePermission(&quot;modifyThread&quot;)&lt;/code&gt; permission, and
 if so, return silently. This is to ensure that code granted
 that permission (such as the JDK itself) is allowed to
 manipulate any thread.
 &lt;p&gt;
 If this method is overridden, then
 &lt;code&gt;super.checkAccess&lt;/code&gt; should
 be called by the first statement in the overridden method, or the
 equivalent security check should be placed in the overridden method.</description>
					<attribute name="@param">
						<description>t   the thread to be checked.</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException  if the calling thread does not have
             permission to modify the thread.</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException if the thread argument is
             &lt;code&gt;null&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Thread#resume() resume</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Thread#setDaemon(boolean) setDaemon</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Thread#setName(java.lang.String) setName</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Thread#setPriority(int) setPriority</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Thread#stop() stop</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Thread#suspend() suspend</description>
					</attribute>
					<attribute name="@see">
						<description>#checkPermission(java.security.Permission) checkPermission</description>
					</attribute>
				</comment>
				<params>
					<param name="t" comment="the thread to be checked." fulltype="java.lang.Thread" type="Thread" />
				</params>
			</method>
			<method visibility="public" name="checkAccess" fulltype="void" type="void">
				<comment>
					<description>Throws a &lt;code&gt;SecurityException&lt;/code&gt; if the
 calling thread is not allowed to modify the thread group argument.
 &lt;p&gt;
 This method is invoked for the current security manager when a
 new child thread or child thread group is created, and by the
 &lt;code&gt;setDaemon&lt;/code&gt;, &lt;code&gt;setMaxPriority&lt;/code&gt;,
 &lt;code&gt;stop&lt;/code&gt;, &lt;code&gt;suspend&lt;/code&gt;, &lt;code&gt;resume&lt;/code&gt;, and
 &lt;code&gt;destroy&lt;/code&gt; methods of class &lt;code&gt;ThreadGroup&lt;/code&gt;.
 &lt;p&gt;
 If the thread group argument is the system thread group (
 has a &lt;code&gt;null&lt;/code&gt; parent) then
 this method calls &lt;code&gt;checkPermission&lt;/code&gt; with the
 &lt;code&gt;RuntimePermission(&quot;modifyThreadGroup&quot;)&lt;/code&gt; permission.
 If the thread group argument is &lt;i&gt;not&lt;/i&gt; the system thread group,
 this method just returns silently.
 &lt;p&gt;
 Applications that want a stricter policy should override this
 method. If this method is overridden, the method that overrides
 it should additionally check to see if the calling thread has the
 &lt;code&gt;RuntimePermission(&quot;modifyThreadGroup&quot;)&lt;/code&gt; permission, and
 if so, return silently. This is to ensure that code granted
 that permission (such as the JDK itself) is allowed to
 manipulate any thread.
 &lt;p&gt;
 If this method is overridden, then
 &lt;code&gt;super.checkAccess&lt;/code&gt; should
 be called by the first statement in the overridden method, or the
 equivalent security check should be placed in the overridden method.</description>
					<attribute name="@param">
						<description>g   the thread group to be checked.</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException  if the calling thread does not have
             permission to modify the thread group.</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException if the thread group argument is
             &lt;code&gt;null&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.ThreadGroup#destroy() destroy</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.ThreadGroup#resume() resume</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.ThreadGroup#setDaemon(boolean) setDaemon</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.ThreadGroup#setMaxPriority(int) setMaxPriority</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.ThreadGroup#stop() stop</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.ThreadGroup#suspend() suspend</description>
					</attribute>
					<attribute name="@see">
						<description>#checkPermission(java.security.Permission) checkPermission</description>
					</attribute>
				</comment>
				<params>
					<param name="g" comment="the thread group to be checked." fulltype="java.lang.ThreadGroup" type="ThreadGroup" />
				</params>
			</method>
			<method visibility="public" name="checkExit" fulltype="void" type="void">
				<comment>
					<description>Throws a &lt;code&gt;SecurityException&lt;/code&gt; if the
 calling thread is not allowed to cause the Java Virtual Machine to
 halt with the specified status code.
 &lt;p&gt;
 This method is invoked for the current security manager by the
 &lt;code&gt;exit&lt;/code&gt; method of class &lt;code&gt;Runtime&lt;/code&gt;. A status
 of &lt;code&gt;0&lt;/code&gt; indicates success; other values indicate various
 errors.
 &lt;p&gt;
 This method calls &lt;code&gt;checkPermission&lt;/code&gt; with the
 &lt;code&gt;RuntimePermission(&quot;exitVM.&quot;+status)&lt;/code&gt; permission.
 &lt;p&gt;
 If you override this method, then you should make a call to
 &lt;code&gt;super.checkExit&lt;/code&gt;
 at the point the overridden method would normally throw an
 exception.</description>
					<attribute name="@param">
						<description>status   the exit status.</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException if the calling thread does not have
              permission to halt the Java Virtual Machine with
              the specified status.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Runtime#exit(int) exit</description>
					</attribute>
					<attribute name="@see">
						<description>#checkPermission(java.security.Permission) checkPermission</description>
					</attribute>
				</comment>
				<params>
					<param name="status" comment="the exit status." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="checkExec" fulltype="void" type="void">
				<comment>
					<description>Throws a &lt;code&gt;SecurityException&lt;/code&gt; if the
 calling thread is not allowed to create a subprocess.
 &lt;p&gt;
 This method is invoked for the current security manager by the
 &lt;code&gt;exec&lt;/code&gt; methods of class &lt;code&gt;Runtime&lt;/code&gt;.
 &lt;p&gt;
 This method calls &lt;code&gt;checkPermission&lt;/code&gt; with the
 &lt;code&gt;FilePermission(cmd,&quot;execute&quot;)&lt;/code&gt; permission
 if cmd is an absolute path, otherwise it calls
 &lt;code&gt;checkPermission&lt;/code&gt; with
 &lt;code&gt;FilePermission(&quot;&amp;lt;&amp;lt;ALL FILES&amp;gt;&amp;gt;&quot;,&quot;execute&quot;)&lt;/code&gt;.
 &lt;p&gt;
 If you override this method, then you should make a call to
 &lt;code&gt;super.checkExec&lt;/code&gt;
 at the point the overridden method would normally throw an
 exception.</description>
					<attribute name="@param">
						<description>cmd   the specified system command.</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException if the calling thread does not have
             permission to create a subprocess.</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException if the &lt;code&gt;cmd&lt;/code&gt; argument is
             &lt;code&gt;null&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Runtime#exec(java.lang.String)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Runtime#exec(java.lang.String, java.lang.String[])</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Runtime#exec(java.lang.String[])</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Runtime#exec(java.lang.String[], java.lang.String[])</description>
					</attribute>
					<attribute name="@see">
						<description>#checkPermission(java.security.Permission) checkPermission</description>
					</attribute>
				</comment>
				<params>
					<param name="cmd" comment="the specified system command." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="checkLink" fulltype="void" type="void">
				<comment>
					<description>Throws a &lt;code&gt;SecurityException&lt;/code&gt; if the
 calling thread is not allowed to dynamic link the library code
 specified by the string argument file. The argument is either a
 simple library name or a complete filename.
 &lt;p&gt;
 This method is invoked for the current security manager by
 methods &lt;code&gt;load&lt;/code&gt; and &lt;code&gt;loadLibrary&lt;/code&gt; of class
 &lt;code&gt;Runtime&lt;/code&gt;.
 &lt;p&gt;
 This method calls &lt;code&gt;checkPermission&lt;/code&gt; with the
 &lt;code&gt;RuntimePermission(&quot;loadLibrary.&quot;+lib)&lt;/code&gt; permission.
 &lt;p&gt;
 If you override this method, then you should make a call to
 &lt;code&gt;super.checkLink&lt;/code&gt;
 at the point the overridden method would normally throw an
 exception.</description>
					<attribute name="@param">
						<description>lib   the name of the library.</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException if the calling thread does not have
             permission to dynamically link the library.</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException if the &lt;code&gt;lib&lt;/code&gt; argument is
             &lt;code&gt;null&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Runtime#load(java.lang.String)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Runtime#loadLibrary(java.lang.String)</description>
					</attribute>
					<attribute name="@see">
						<description>#checkPermission(java.security.Permission) checkPermission</description>
					</attribute>
				</comment>
				<params>
					<param name="lib" comment="the name of the library." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="checkRead" fulltype="void" type="void">
				<comment>
					<description>Throws a &lt;code&gt;SecurityException&lt;/code&gt; if the
 calling thread is not allowed to read from the specified file
 descriptor.
 &lt;p&gt;
 This method calls &lt;code&gt;checkPermission&lt;/code&gt; with the
 &lt;code&gt;RuntimePermission(&quot;readFileDescriptor&quot;)&lt;/code&gt;
 permission.
 &lt;p&gt;
 If you override this method, then you should make a call to
 &lt;code&gt;super.checkRead&lt;/code&gt;
 at the point the overridden method would normally throw an
 exception.</description>
					<attribute name="@param">
						<description>fd   the system-dependent file descriptor.</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException  if the calling thread does not have
             permission to access the specified file descriptor.</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException if the file descriptor argument is
             &lt;code&gt;null&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@see">
						<description>java.io.FileDescriptor</description>
					</attribute>
					<attribute name="@see">
						<description>#checkPermission(java.security.Permission) checkPermission</description>
					</attribute>
				</comment>
				<params>
					<param name="fd" comment="the system-dependent file descriptor." fulltype="java.io.FileDescriptor" type="FileDescriptor" />
				</params>
			</method>
			<method visibility="public" name="checkRead" fulltype="void" type="void">
				<comment>
					<description>Throws a &lt;code&gt;SecurityException&lt;/code&gt; if the
 calling thread is not allowed to read the file specified by the
 string argument.
 &lt;p&gt;
 This method calls &lt;code&gt;checkPermission&lt;/code&gt; with the
 &lt;code&gt;FilePermission(file,&quot;read&quot;)&lt;/code&gt; permission.
 &lt;p&gt;
 If you override this method, then you should make a call to
 &lt;code&gt;super.checkRead&lt;/code&gt;
 at the point the overridden method would normally throw an
 exception.</description>
					<attribute name="@param">
						<description>file   the system-dependent file name.</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException if the calling thread does not have
             permission to access the specified file.</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException if the &lt;code&gt;file&lt;/code&gt; argument is
             &lt;code&gt;null&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@see">
						<description>#checkPermission(java.security.Permission) checkPermission</description>
					</attribute>
				</comment>
				<params>
					<param name="file" comment="the system-dependent file name." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="checkRead" fulltype="void" type="void">
				<comment>
					<description>Throws a &lt;code&gt;SecurityException&lt;/code&gt; if the
 specified security context is not allowed to read the file
 specified by the string argument. The context must be a security
 context returned by a previous call to
 &lt;code&gt;getSecurityContext&lt;/code&gt;.
 &lt;p&gt; If &lt;code&gt;context&lt;/code&gt; is an instance of
 &lt;code&gt;AccessControlContext&lt;/code&gt; then the
 &lt;code&gt;AccessControlContext.checkPermission&lt;/code&gt; method will
 be invoked with the &lt;code&gt;FilePermission(file,&quot;read&quot;)&lt;/code&gt; permission.
 &lt;p&gt; If &lt;code&gt;context&lt;/code&gt; is not an instance of
 &lt;code&gt;AccessControlContext&lt;/code&gt; then a
 &lt;code&gt;SecurityException&lt;/code&gt; is thrown.
 &lt;p&gt;
 If you override this method, then you should make a call to
 &lt;code&gt;super.checkRead&lt;/code&gt;
 at the point the overridden method would normally throw an
 exception.</description>
					<attribute name="@param">
						<description>file      the system-dependent filename.</description>
					</attribute>
					<attribute name="@param">
						<description>context   a system-dependent security context.</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException  if the specified security context
             is not an instance of &lt;code&gt;AccessControlContext&lt;/code&gt;
             (e.g., is &lt;code&gt;null&lt;/code&gt;), or does not have permission
             to read the specified file.</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException if the &lt;code&gt;file&lt;/code&gt; argument is
             &lt;code&gt;null&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.SecurityManager#getSecurityContext()</description>
					</attribute>
					<attribute name="@see">
						<description>java.security.AccessControlContext#checkPermission(java.security.Permission)</description>
					</attribute>
				</comment>
				<params>
					<param name="file" comment="the system-dependent filename." fulltype="java.lang.String" type="String" />
					<param name="context" comment="a system-dependent security context." fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="checkWrite" fulltype="void" type="void">
				<comment>
					<description>Throws a &lt;code&gt;SecurityException&lt;/code&gt; if the
 calling thread is not allowed to write to the specified file
 descriptor.
 &lt;p&gt;
 This method calls &lt;code&gt;checkPermission&lt;/code&gt; with the
 &lt;code&gt;RuntimePermission(&quot;writeFileDescriptor&quot;)&lt;/code&gt;
 permission.
 &lt;p&gt;
 If you override this method, then you should make a call to
 &lt;code&gt;super.checkWrite&lt;/code&gt;
 at the point the overridden method would normally throw an
 exception.</description>
					<attribute name="@param">
						<description>fd   the system-dependent file descriptor.</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException  if the calling thread does not have
             permission to access the specified file descriptor.</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException if the file descriptor argument is
             &lt;code&gt;null&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@see">
						<description>java.io.FileDescriptor</description>
					</attribute>
					<attribute name="@see">
						<description>#checkPermission(java.security.Permission) checkPermission</description>
					</attribute>
				</comment>
				<params>
					<param name="fd" comment="the system-dependent file descriptor." fulltype="java.io.FileDescriptor" type="FileDescriptor" />
				</params>
			</method>
			<method visibility="public" name="checkWrite" fulltype="void" type="void">
				<comment>
					<description>Throws a &lt;code&gt;SecurityException&lt;/code&gt; if the
 calling thread is not allowed to write to the file specified by
 the string argument.
 &lt;p&gt;
 This method calls &lt;code&gt;checkPermission&lt;/code&gt; with the
 &lt;code&gt;FilePermission(file,&quot;write&quot;)&lt;/code&gt; permission.
 &lt;p&gt;
 If you override this method, then you should make a call to
 &lt;code&gt;super.checkWrite&lt;/code&gt;
 at the point the overridden method would normally throw an
 exception.</description>
					<attribute name="@param">
						<description>file   the system-dependent filename.</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException  if the calling thread does not
             have permission to access the specified file.</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException if the &lt;code&gt;file&lt;/code&gt; argument is
             &lt;code&gt;null&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@see">
						<description>#checkPermission(java.security.Permission) checkPermission</description>
					</attribute>
				</comment>
				<params>
					<param name="file" comment="the system-dependent filename." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="checkDelete" fulltype="void" type="void">
				<comment>
					<description>Throws a &lt;code&gt;SecurityException&lt;/code&gt; if the
 calling thread is not allowed to delete the specified file.
 &lt;p&gt;
 This method is invoked for the current security manager by the
 &lt;code&gt;delete&lt;/code&gt; method of class &lt;code&gt;File&lt;/code&gt;.
 &lt;p&gt;
 This method calls &lt;code&gt;checkPermission&lt;/code&gt; with the
 &lt;code&gt;FilePermission(file,&quot;delete&quot;)&lt;/code&gt; permission.
 &lt;p&gt;
 If you override this method, then you should make a call to
 &lt;code&gt;super.checkDelete&lt;/code&gt;
 at the point the overridden method would normally throw an
 exception.</description>
					<attribute name="@param">
						<description>file   the system-dependent filename.</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException if the calling thread does not
             have permission to delete the file.</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException if the &lt;code&gt;file&lt;/code&gt; argument is
             &lt;code&gt;null&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@see">
						<description>java.io.File#delete()</description>
					</attribute>
					<attribute name="@see">
						<description>#checkPermission(java.security.Permission) checkPermission</description>
					</attribute>
				</comment>
				<params>
					<param name="file" comment="the system-dependent filename." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="checkConnect" fulltype="void" type="void">
				<comment>
					<description>Throws a &lt;code&gt;SecurityException&lt;/code&gt; if the
 calling thread is not allowed to open a socket connection to the
 specified host and port number.
 &lt;p&gt;
 A port number of &lt;code&gt;-1&lt;/code&gt; indicates that the calling
 method is attempting to determine the IP address of the specified
 host name.
 &lt;p&gt;
 This method calls &lt;code&gt;checkPermission&lt;/code&gt; with the
 &lt;code&gt;SocketPermission(host+&quot;:&quot;+port,&quot;connect&quot;)&lt;/code&gt; permission if
 the port is not equal to -1. If the port is equal to -1, then
 it calls &lt;code&gt;checkPermission&lt;/code&gt; with the
 &lt;code&gt;SocketPermission(host,&quot;resolve&quot;)&lt;/code&gt; permission.
 &lt;p&gt;
 If you override this method, then you should make a call to
 &lt;code&gt;super.checkConnect&lt;/code&gt;
 at the point the overridden method would normally throw an
 exception.</description>
					<attribute name="@param">
						<description>host   the host name port to connect to.</description>
					</attribute>
					<attribute name="@param">
						<description>port   the protocol port to connect to.</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException  if the calling thread does not have
             permission to open a socket connection to the specified
               &lt;code&gt;host&lt;/code&gt; and &lt;code&gt;port&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException if the &lt;code&gt;host&lt;/code&gt; argument is
             &lt;code&gt;null&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@see">
						<description>#checkPermission(java.security.Permission) checkPermission</description>
					</attribute>
				</comment>
				<params>
					<param name="host" comment="the host name port to connect to." fulltype="java.lang.String" type="String" />
					<param name="port" comment="the protocol port to connect to." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="checkConnect" fulltype="void" type="void">
				<comment>
					<description>Throws a &lt;code&gt;SecurityException&lt;/code&gt; if the
 specified security context is not allowed to open a socket
 connection to the specified host and port number.
 &lt;p&gt;
 A port number of &lt;code&gt;-1&lt;/code&gt; indicates that the calling
 method is attempting to determine the IP address of the specified
 host name.
 &lt;p&gt; If &lt;code&gt;context&lt;/code&gt; is not an instance of
 &lt;code&gt;AccessControlContext&lt;/code&gt; then a
 &lt;code&gt;SecurityException&lt;/code&gt; is thrown.
 &lt;p&gt;
 Otherwise, the port number is checked. If it is not equal
 to -1, the &lt;code&gt;context&lt;/code&gt;&apos;s &lt;code&gt;checkPermission&lt;/code&gt;
 method is called with a
 &lt;code&gt;SocketPermission(host+&quot;:&quot;+port,&quot;connect&quot;)&lt;/code&gt; permission.
 If the port is equal to -1, then
 the &lt;code&gt;context&lt;/code&gt;&apos;s &lt;code&gt;checkPermission&lt;/code&gt; method
 is called with a
 &lt;code&gt;SocketPermission(host,&quot;resolve&quot;)&lt;/code&gt; permission.
 &lt;p&gt;
 If you override this method, then you should make a call to
 &lt;code&gt;super.checkConnect&lt;/code&gt;
 at the point the overridden method would normally throw an
 exception.</description>
					<attribute name="@param">
						<description>host      the host name port to connect to.</description>
					</attribute>
					<attribute name="@param">
						<description>port      the protocol port to connect to.</description>
					</attribute>
					<attribute name="@param">
						<description>context   a system-dependent security context.</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException if the specified security context
             is not an instance of &lt;code&gt;AccessControlContext&lt;/code&gt;
             (e.g., is &lt;code&gt;null&lt;/code&gt;), or does not have permission
             to open a socket connection to the specified
             &lt;code&gt;host&lt;/code&gt; and &lt;code&gt;port&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException if the &lt;code&gt;host&lt;/code&gt; argument is
             &lt;code&gt;null&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.SecurityManager#getSecurityContext()</description>
					</attribute>
					<attribute name="@see">
						<description>java.security.AccessControlContext#checkPermission(java.security.Permission)</description>
					</attribute>
				</comment>
				<params>
					<param name="host" comment="the host name port to connect to." fulltype="java.lang.String" type="String" />
					<param name="port" comment="the protocol port to connect to." fulltype="int" type="int" />
					<param name="context" comment="a system-dependent security context." fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="checkListen" fulltype="void" type="void">
				<comment>
					<description>Throws a &lt;code&gt;SecurityException&lt;/code&gt; if the
 calling thread is not allowed to wait for a connection request on
 the specified local port number.
 &lt;p&gt;
 If port is not 0, this method calls
 &lt;code&gt;checkPermission&lt;/code&gt; with the
 &lt;code&gt;SocketPermission(&quot;localhost:&quot;+port,&quot;listen&quot;)&lt;/code&gt;.
 If port is zero, this method calls &lt;code&gt;checkPermission&lt;/code&gt;
 with &lt;code&gt;SocketPermission(&quot;localhost:1024-&quot;,&quot;listen&quot;).&lt;/code&gt;
 &lt;p&gt;
 If you override this method, then you should make a call to
 &lt;code&gt;super.checkListen&lt;/code&gt;
 at the point the overridden method would normally throw an
 exception.</description>
					<attribute name="@param">
						<description>port   the local port.</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException  if the calling thread does not have
             permission to listen on the specified port.</description>
					</attribute>
					<attribute name="@see">
						<description>#checkPermission(java.security.Permission) checkPermission</description>
					</attribute>
				</comment>
				<params>
					<param name="port" comment="the local port." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="checkAccept" fulltype="void" type="void">
				<comment>
					<description>Throws a &lt;code&gt;SecurityException&lt;/code&gt; if the
 calling thread is not permitted to accept a socket connection from
 the specified host and port number.
 &lt;p&gt;
 This method is invoked for the current security manager by the
 &lt;code&gt;accept&lt;/code&gt; method of class &lt;code&gt;ServerSocket&lt;/code&gt;.
 &lt;p&gt;
 This method calls &lt;code&gt;checkPermission&lt;/code&gt; with the
 &lt;code&gt;SocketPermission(host+&quot;:&quot;+port,&quot;accept&quot;)&lt;/code&gt; permission.
 &lt;p&gt;
 If you override this method, then you should make a call to
 &lt;code&gt;super.checkAccept&lt;/code&gt;
 at the point the overridden method would normally throw an
 exception.</description>
					<attribute name="@param">
						<description>host   the host name of the socket connection.</description>
					</attribute>
					<attribute name="@param">
						<description>port   the port number of the socket connection.</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException  if the calling thread does not have
             permission to accept the connection.</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException if the &lt;code&gt;host&lt;/code&gt; argument is
             &lt;code&gt;null&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@see">
						<description>java.net.ServerSocket#accept()</description>
					</attribute>
					<attribute name="@see">
						<description>#checkPermission(java.security.Permission) checkPermission</description>
					</attribute>
				</comment>
				<params>
					<param name="host" comment="the host name of the socket connection." fulltype="java.lang.String" type="String" />
					<param name="port" comment="the port number of the socket connection." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="checkMulticast" fulltype="void" type="void">
				<comment>
					<description>Throws a &lt;code&gt;SecurityException&lt;/code&gt; if the
 calling thread is not allowed to use
 (join/leave/send/receive) IP multicast.
 &lt;p&gt;
 This method calls &lt;code&gt;checkPermission&lt;/code&gt; with the
 &lt;code&gt;java.net.SocketPermission(maddr.getHostAddress(),
 &quot;accept,connect&quot;)&lt;/code&gt; permission.
 &lt;p&gt;
 If you override this method, then you should make a call to
 &lt;code&gt;super.checkMulticast&lt;/code&gt;
 at the point the overridden method would normally throw an
 exception.</description>
					<attribute name="@param">
						<description>maddr  Internet group address to be used.</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException  if the calling thread is not allowed to
  use (join/leave/send/receive) IP multicast.</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException if the address argument is
             &lt;code&gt;null&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.1</description>
					</attribute>
					<attribute name="@see">
						<description>#checkPermission(java.security.Permission) checkPermission</description>
					</attribute>
				</comment>
				<params>
					<param name="maddr" comment="Internet group address to be used." fulltype="java.net.InetAddress" type="InetAddress" />
				</params>
			</method>
			<method visibility="public" name="checkMulticast" fulltype="void" type="void">
				<comment>
					<description>Throws a &lt;code&gt;SecurityException&lt;/code&gt; if the
 calling thread is not allowed to use
 (join/leave/send/receive) IP multicast.
 &lt;p&gt;
 This method calls &lt;code&gt;checkPermission&lt;/code&gt; with the
 &lt;code&gt;java.net.SocketPermission(maddr.getHostAddress(),
 &quot;accept,connect&quot;)&lt;/code&gt; permission.
 &lt;p&gt;
 If you override this method, then you should make a call to
 &lt;code&gt;super.checkMulticast&lt;/code&gt;
 at the point the overridden method would normally throw an
 exception.</description>
					<attribute name="@param">
						<description>maddr  Internet group address to be used.</description>
					</attribute>
					<attribute name="@param">
						<description>ttl        value in use, if it is multicast send.
 Note: this particular implementation does not use the ttl
 parameter.</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException  if the calling thread is not allowed to
  use (join/leave/send/receive) IP multicast.</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException if the address argument is
             &lt;code&gt;null&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.1</description>
					</attribute>
					<attribute name="@deprecated">
						<description>Use #checkPermission(java.security.Permission) instead</description>
					</attribute>
					<attribute name="@see">
						<description>#checkPermission(java.security.Permission) checkPermission</description>
					</attribute>
				</comment>
				<params>
					<param name="maddr" comment="Internet group address to be used." fulltype="java.net.InetAddress" type="InetAddress" />
					<param name="ttl" comment="value in use, if it is multicast send.
 Note: this particular implementation does not use the ttl
 parameter." fulltype="byte" type="byte" />
				</params>
			</method>
			<method visibility="public" name="checkPropertiesAccess" fulltype="void" type="void">
				<comment>
					<description>Throws a &lt;code&gt;SecurityException&lt;/code&gt; if the
 calling thread is not allowed to access or modify the system
 properties.
 &lt;p&gt;
 This method is used by the &lt;code&gt;getProperties&lt;/code&gt; and
 &lt;code&gt;setProperties&lt;/code&gt; methods of class &lt;code&gt;System&lt;/code&gt;.
 &lt;p&gt;
 This method calls &lt;code&gt;checkPermission&lt;/code&gt; with the
 &lt;code&gt;PropertyPermission(&quot;*&quot;, &quot;read,write&quot;)&lt;/code&gt; permission.
 &lt;p&gt;
 If you override this method, then you should make a call to
 &lt;code&gt;super.checkPropertiesAccess&lt;/code&gt;
 at the point the overridden method would normally throw an
 exception.
 &lt;p&gt;</description>
					<attribute name="@exception">
						<description>SecurityException  if the calling thread does not have
             permission to access or modify the system properties.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.System#getProperties()</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.System#setProperties(java.util.Properties)</description>
					</attribute>
					<attribute name="@see">
						<description>#checkPermission(java.security.Permission) checkPermission</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="checkPropertyAccess" fulltype="void" type="void">
				<comment>
					<description>Throws a &lt;code&gt;SecurityException&lt;/code&gt; if the
 calling thread is not allowed to access the system property with
 the specified &lt;code&gt;key&lt;/code&gt; name.
 &lt;p&gt;
 This method is used by the &lt;code&gt;getProperty&lt;/code&gt; method of
 class &lt;code&gt;System&lt;/code&gt;.
 &lt;p&gt;
 This method calls &lt;code&gt;checkPermission&lt;/code&gt; with the
 &lt;code&gt;PropertyPermission(key, &quot;read&quot;)&lt;/code&gt; permission.
 &lt;p&gt;
 &lt;p&gt;
 If you override this method, then you should make a call to
 &lt;code&gt;super.checkPropertyAccess&lt;/code&gt;
 at the point the overridden method would normally throw an
 exception.</description>
					<attribute name="@param">
						<description>key   a system property key.</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException  if the calling thread does not have
             permission to access the specified system property.</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException if the &lt;code&gt;key&lt;/code&gt; argument is
             &lt;code&gt;null&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalArgumentException if &lt;code&gt;key&lt;/code&gt; is empty.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.System#getProperty(java.lang.String)</description>
					</attribute>
					<attribute name="@see">
						<description>#checkPermission(java.security.Permission) checkPermission</description>
					</attribute>
				</comment>
				<params>
					<param name="key" comment="a system property key." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="checkTopLevelWindow" returncomment="&lt;code&gt;true&lt;/code&gt; if the calling thread is trusted to put up
             top-level windows; &lt;code&gt;false&lt;/code&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Returns &lt;code&gt;false&lt;/code&gt; if the calling
 thread is not trusted to bring up the top-level window indicated
 by the &lt;code&gt;window&lt;/code&gt; argument. In this case, the caller can
 still decide to show the window, but the window should include
 some sort of visual warning. If the method returns
 &lt;code&gt;true&lt;/code&gt;, then the window can be shown without any
 special restrictions.
 &lt;p&gt;
 See class &lt;code&gt;Window&lt;/code&gt; for more information on trusted and
 untrusted windows.
 &lt;p&gt;
 This method calls
 &lt;code&gt;checkPermission&lt;/code&gt; with the
 &lt;code&gt;AWTPermission(&quot;showWindowWithoutWarningBanner&quot;)&lt;/code&gt; permission,
 and returns &lt;code&gt;true&lt;/code&gt; if a SecurityException is not thrown,
 otherwise it returns &lt;code&gt;false&lt;/code&gt;.
 &lt;p&gt;
 If you override this method, then you should make a call to
 &lt;code&gt;super.checkTopLevelWindow&lt;/code&gt;
 at the point the overridden method would normally return
 &lt;code&gt;false&lt;/code&gt;, and the value of
 &lt;code&gt;super.checkTopLevelWindow&lt;/code&gt; should
 be returned.</description>
					<attribute name="@param">
						<description>window   the new window that is being created.</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if the calling thread is trusted to put up
             top-level windows; &lt;code&gt;false&lt;/code&gt; otherwise.</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException if the &lt;code&gt;window&lt;/code&gt; argument is
             &lt;code&gt;null&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@see">
						<description>java.awt.Window</description>
					</attribute>
					<attribute name="@see">
						<description>#checkPermission(java.security.Permission) checkPermission</description>
					</attribute>
				</comment>
				<params>
					<param name="window" comment="the new window that is being created." fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="checkPrintJobAccess" fulltype="void" type="void">
				<comment>
					<description>Throws a &lt;code&gt;SecurityException&lt;/code&gt; if the
 calling thread is not allowed to initiate a print job request.
 &lt;p&gt;
 This method calls
 &lt;code&gt;checkPermission&lt;/code&gt; with the
 &lt;code&gt;RuntimePermission(&quot;queuePrintJob&quot;)&lt;/code&gt; permission.
 &lt;p&gt;
 If you override this method, then you should make a call to
 &lt;code&gt;super.checkPrintJobAccess&lt;/code&gt;
 at the point the overridden method would normally throw an
 exception.
 &lt;p&gt;</description>
					<attribute name="@exception">
						<description>SecurityException  if the calling thread does not have
             permission to initiate a print job request.</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.1</description>
					</attribute>
					<attribute name="@see">
						<description>#checkPermission(java.security.Permission) checkPermission</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="checkSystemClipboardAccess" fulltype="void" type="void">
				<comment>
					<description>Throws a &lt;code&gt;SecurityException&lt;/code&gt; if the
 calling thread is not allowed to access the system clipboard.
 &lt;p&gt;
 This method calls &lt;code&gt;checkPermission&lt;/code&gt; with the
 &lt;code&gt;AWTPermission(&quot;accessClipboard&quot;)&lt;/code&gt;
 permission.
 &lt;p&gt;
 If you override this method, then you should make a call to
 &lt;code&gt;super.checkSystemClipboardAccess&lt;/code&gt;
 at the point the overridden method would normally throw an
 exception.</description>
					<attribute name="@since">
						<description>JDK1.1</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException  if the calling thread does not have
             permission to access the system clipboard.</description>
					</attribute>
					<attribute name="@see">
						<description>#checkPermission(java.security.Permission) checkPermission</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="checkAwtEventQueueAccess" fulltype="void" type="void">
				<comment>
					<description>Throws a &lt;code&gt;SecurityException&lt;/code&gt; if the
 calling thread is not allowed to access the AWT event queue.
 &lt;p&gt;
 This method calls &lt;code&gt;checkPermission&lt;/code&gt; with the
 &lt;code&gt;AWTPermission(&quot;accessEventQueue&quot;)&lt;/code&gt; permission.
 &lt;p&gt;
 If you override this method, then you should make a call to
 &lt;code&gt;super.checkAwtEventQueueAccess&lt;/code&gt;
 at the point the overridden method would normally throw an
 exception.</description>
					<attribute name="@since">
						<description>JDK1.1</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException  if the calling thread does not have
             permission to access the AWT event queue.</description>
					</attribute>
					<attribute name="@see">
						<description>#checkPermission(java.security.Permission) checkPermission</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="private" name="getPackages" fulltype="java.lang.String[]" type="String">
				<params>
					<param name="p" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="checkPackageAccess" fulltype="void" type="void">
				<comment>
					<description>Throws a &lt;code&gt;SecurityException&lt;/code&gt; if the
 calling thread is not allowed to access the package specified by
 the argument.
 &lt;p&gt;
 This method is used by the &lt;code&gt;loadClass&lt;/code&gt; method of class
 loaders.
 &lt;p&gt;
 This method first gets a list of
 restricted packages by obtaining a comma-separated list from
 a call to
 &lt;code&gt;java.security.Security.getProperty(&quot;package.access&quot;)&lt;/code&gt;,
 and checks to see if &lt;code&gt;pkg&lt;/code&gt; starts with or equals
 any of the restricted packages. If it does, then
 &lt;code&gt;checkPermission&lt;/code&gt; gets called with the
 &lt;code&gt;RuntimePermission(&quot;accessClassInPackage.&quot;+pkg)&lt;/code&gt;
 permission.
 &lt;p&gt;
 If this method is overridden, then
 &lt;code&gt;super.checkPackageAccess&lt;/code&gt; should be called
 as the first line in the overridden method.</description>
					<attribute name="@param">
						<description>pkg   the package name.</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException  if the calling thread does not have
             permission to access the specified package.</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException if the package name argument is
             &lt;code&gt;null&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.ClassLoader#loadClass(java.lang.String, boolean)
  loadClass</description>
					</attribute>
					<attribute name="@see">
						<description>java.security.Security#getProperty getProperty</description>
					</attribute>
					<attribute name="@see">
						<description>#checkPermission(java.security.Permission) checkPermission</description>
					</attribute>
				</comment>
				<params>
					<param name="pkg" comment="the package name." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="checkPackageDefinition" fulltype="void" type="void">
				<comment>
					<description>Throws a &lt;code&gt;SecurityException&lt;/code&gt; if the
 calling thread is not allowed to define classes in the package
 specified by the argument.
 &lt;p&gt;
 This method is used by the &lt;code&gt;loadClass&lt;/code&gt; method of some
 class loaders.
 &lt;p&gt;
 This method first gets a list of restricted packages by
 obtaining a comma-separated list from a call to
 &lt;code&gt;java.security.Security.getProperty(&quot;package.definition&quot;)&lt;/code&gt;,
 and checks to see if &lt;code&gt;pkg&lt;/code&gt; starts with or equals
 any of the restricted packages. If it does, then
 &lt;code&gt;checkPermission&lt;/code&gt; gets called with the
 &lt;code&gt;RuntimePermission(&quot;defineClassInPackage.&quot;+pkg)&lt;/code&gt;
 permission.
 &lt;p&gt;
 If this method is overridden, then
 &lt;code&gt;super.checkPackageDefinition&lt;/code&gt; should be called
 as the first line in the overridden method.</description>
					<attribute name="@param">
						<description>pkg   the package name.</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException  if the calling thread does not have
             permission to define classes in the specified package.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.ClassLoader#loadClass(java.lang.String, boolean)</description>
					</attribute>
					<attribute name="@see">
						<description>java.security.Security#getProperty getProperty</description>
					</attribute>
					<attribute name="@see">
						<description>#checkPermission(java.security.Permission) checkPermission</description>
					</attribute>
				</comment>
				<params>
					<param name="pkg" comment="the package name." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="checkSetFactory" fulltype="void" type="void">
				<comment>
					<description>Throws a &lt;code&gt;SecurityException&lt;/code&gt; if the
 calling thread is not allowed to set the socket factory used by
 &lt;code&gt;ServerSocket&lt;/code&gt; or &lt;code&gt;Socket&lt;/code&gt;, or the stream
 handler factory used by &lt;code&gt;URL&lt;/code&gt;.
 &lt;p&gt;
 This method calls &lt;code&gt;checkPermission&lt;/code&gt; with the
 &lt;code&gt;RuntimePermission(&quot;setFactory&quot;)&lt;/code&gt; permission.
 &lt;p&gt;
 If you override this method, then you should make a call to
 &lt;code&gt;super.checkSetFactory&lt;/code&gt;
 at the point the overridden method would normally throw an
 exception.
 &lt;p&gt;</description>
					<attribute name="@exception">
						<description>SecurityException  if the calling thread does not have
             permission to specify a socket factory or a stream
             handler factory.</description>
					</attribute>
					<attribute name="@see">
						<description>java.net.ServerSocket#setSocketFactory(java.net.SocketImplFactory) setSocketFactory</description>
					</attribute>
					<attribute name="@see">
						<description>java.net.Socket#setSocketImplFactory(java.net.SocketImplFactory) setSocketImplFactory</description>
					</attribute>
					<attribute name="@see">
						<description>java.net.URL#setURLStreamHandlerFactory(java.net.URLStreamHandlerFactory) setURLStreamHandlerFactory</description>
					</attribute>
					<attribute name="@see">
						<description>#checkPermission(java.security.Permission) checkPermission</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="checkMemberAccess" fulltype="void" type="void">
				<comment>
					<description>Throws a &lt;code&gt;SecurityException&lt;/code&gt; if the
 calling thread is not allowed to access members.
 &lt;p&gt;
 The default policy is to allow access to PUBLIC members, as well
 as access to classes that have the same class loader as the caller.
 In all other cases, this method calls &lt;code&gt;checkPermission&lt;/code&gt;
 with the &lt;code&gt;RuntimePermission(&quot;accessDeclaredMembers&quot;)
 &lt;/code&gt; permission.
 &lt;p&gt;
 If this method is overridden, then a call to
 &lt;code&gt;super.checkMemberAccess&lt;/code&gt; cannot be made,
 as the default implementation of &lt;code&gt;checkMemberAccess&lt;/code&gt;
 relies on the code being checked being at a stack depth of
 4.</description>
					<attribute name="@param">
						<description>clazz the class that reflection is to be performed on.</description>
					</attribute>
					<attribute name="@param">
						<description>which type of access, PUBLIC or DECLARED.</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException if the caller does not have
             permission to access members.</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException if the &lt;code&gt;clazz&lt;/code&gt; argument is
             &lt;code&gt;null&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.reflect.Member</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.1</description>
					</attribute>
					<attribute name="@see">
						<description>#checkPermission(java.security.Permission) checkPermission</description>
					</attribute>
				</comment>
				<params>
					<param name="clazz" comment="the class that reflection is to be performed on." fulltype="java.lang.Class" type="Class" />
					<param name="which" comment="type of access, PUBLIC or DECLARED." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="checkSecurityAccess" fulltype="void" type="void">
				<comment>
					<description>Determines whether the permission with the specified permission target
 name should be granted or denied.

 &lt;p&gt; If the requested permission is allowed, this method returns
 quietly. If denied, a SecurityException is raised.

 &lt;p&gt; This method creates a &lt;code&gt;SecurityPermission&lt;/code&gt; object for
 the given permission target name and calls &lt;code&gt;checkPermission&lt;/code&gt;
 with it.

 &lt;p&gt; See the documentation for
 &lt;code&gt;{@link java.security.SecurityPermission}&lt;/code&gt; for
 a list of possible permission target names.

 &lt;p&gt; If you override this method, then you should make a call to
 &lt;code&gt;super.checkSecurityAccess&lt;/code&gt;
 at the point the overridden method would normally throw an
 exception.</description>
					<attribute name="@param">
						<description>target the target name of the &lt;code&gt;SecurityPermission&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException if the calling thread does not have
 permission for the requested access.</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException if &lt;code&gt;target&lt;/code&gt; is null.</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalArgumentException if &lt;code&gt;target&lt;/code&gt; is empty.</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.1</description>
					</attribute>
					<attribute name="@see">
						<description>#checkPermission(java.security.Permission) checkPermission</description>
					</attribute>
				</comment>
				<params>
					<param name="target" comment="the target name of the &lt;code&gt;SecurityPermission&lt;/code&gt;." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="private" name="currentLoadedClass0" fulltype="java.lang.Class" type="Class" />
			<method visibility="public" name="getThreadGroup" returncomment="ThreadGroup that new threads are instantiated into" fulltype="java.lang.ThreadGroup" type="ThreadGroup">
				<comment>
					<description>Returns the thread group into which to instantiate any new
 thread being created at the time this is being called.
 By default, it returns the thread group of the current
 thread. This should be overridden by a specific security
 manager to return the appropriate thread group.</description>
					<attribute name="@return">
						<description>ThreadGroup that new threads are instantiated into</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.1</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.ThreadGroup</description>
					</attribute>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" superclass="Object" visibility="package-private" package="java.lang" superclassfulltype="java.lang.Object" fulltype="java.lang.AbstractStringBuilder" type="AbstractStringBuilder">
		<implements>
			<interface fulltype="java.lang.Appendable" type="Appendable" />
			<interface fulltype="java.lang.CharSequence" type="CharSequence" />
		</implements>
		<comment>
			<description>A mutable sequence of characters.
 &lt;p&gt;
 Implements a modifiable string. At any point in time it contains some
 particular sequence of characters, but the length and content of the
 sequence can be changed through certain method calls.</description>
			<attribute name="@author">
				<description>Michael McCloskey</description>
			</attribute>
			<attribute name="@since">
				<description>1.5</description>
			</attribute>
		</comment>
		<fields>
			<field visibility="package-private" name="value" fulltype="char[]" type="char">
				<comment>
					<description>The value is used for character storage.</description>
				</comment>
			</field>
			<field visibility="package-private" name="count" fulltype="int" type="int">
				<comment>
					<description>The count is the number of characters used.</description>
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="package-private" name="AbstractStringBuilder">
				<comment>
					<description>This no-arg constructor is necessary for serialization of subclasses.</description>
				</comment>
			</constructor>
			<constructor visibility="package-private" name="AbstractStringBuilder">
				<comment>
					<description>Creates an AbstractStringBuilder of the specified capacity.</description>
				</comment>
				<params>
					<param name="capacity" fulltype="int" type="int" />
				</params>
			</constructor>
			<method visibility="public" name="length" returncomment="the length of the sequence of characters currently
          represented by this object" fulltype="int" type="int">
				<comment>
					<description>Returns the length (character count).</description>
					<attribute name="@return">
						<description>the length of the sequence of characters currently
          represented by this object</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="capacity" returncomment="the current capacity" fulltype="int" type="int">
				<comment>
					<description>Returns the current capacity. The capacity is the amount of storage
 available for newly inserted characters, beyond which an allocation
 will occur.</description>
					<attribute name="@return">
						<description>the current capacity</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="ensureCapacity" fulltype="void" type="void">
				<comment>
					<description>Ensures that the capacity is at least equal to the specified minimum.
 If the current capacity is less than the argument, then a new internal
 array is allocated with greater capacity. The new capacity is the
 larger of:
 &lt;ul&gt;
 &lt;li&gt;The &lt;code&gt;minimumCapacity&lt;/code&gt; argument.
 &lt;li&gt;Twice the old capacity, plus &lt;code&gt;2&lt;/code&gt;.
 &lt;/ul&gt;
 If the &lt;code&gt;minimumCapacity&lt;/code&gt; argument is nonpositive, this
 method takes no action and simply returns.</description>
					<attribute name="@param">
						<description>minimumCapacity   the minimum desired capacity.</description>
					</attribute>
				</comment>
				<params>
					<param name="minimumCapacity" comment="the minimum desired capacity." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="package-private" name="expandCapacity" fulltype="void" type="void">
				<comment>
					<description>This implements the expansion semantics of ensureCapacity with no
 size check or synchronization.</description>
				</comment>
				<params>
					<param name="minimumCapacity" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="trimToSize" fulltype="void" type="void">
				<comment>
					<description>Attempts to reduce storage used for the character sequence.
 If the buffer is larger than necessary to hold its current sequence of
 characters, then it may be resized to become more space efficient.
 Calling this method may, but is not required to, affect the value
 returned by a subsequent call to the {@link #capacity()} method.</description>
				</comment>
			</method>
			<method visibility="public" name="setLength" fulltype="void" type="void">
				<comment>
					<description>Sets the length of the character sequence.
 The sequence is changed to a new character sequence
 whose length is specified by the argument. For every nonnegative
 index &lt;i&gt;k&lt;/i&gt; less than &lt;code&gt;newLength&lt;/code&gt;, the character at
 index &lt;i&gt;k&lt;/i&gt; in the new character sequence is the same as the
 character at index &lt;i&gt;k&lt;/i&gt; in the old sequence if &lt;i&gt;k&lt;/i&gt; is less
 than the length of the old character sequence; otherwise, it is the
 null character &lt;code&gt;&apos;&amp;#92;u0000&apos;&lt;/code&gt;.

 In other words, if the &lt;code&gt;newLength&lt;/code&gt; argument is less than
 the current length, the length is changed to the specified length.
 &lt;p&gt;
 If the &lt;code&gt;newLength&lt;/code&gt; argument is greater than or equal
 to the current length, sufficient null characters
 (&lt;code&gt;&apos;&amp;#92;u0000&apos;&lt;/code&gt;) are appended so that
 length becomes the &lt;code&gt;newLength&lt;/code&gt; argument.
 &lt;p&gt;
 The &lt;code&gt;newLength&lt;/code&gt; argument must be greater than or equal
 to &lt;code&gt;0&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>newLength   the new length</description>
					</attribute>
					<attribute name="@throws">
						<description>IndexOutOfBoundsException  if the
               &lt;code&gt;newLength&lt;/code&gt; argument is negative.</description>
					</attribute>
				</comment>
				<params>
					<param name="newLength" comment="the new length" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="charAt" returncomment="the &lt;code&gt;char&lt;/code&gt; value at the specified index." fulltype="char" type="char">
				<comment>
					<description>Returns the &lt;code&gt;char&lt;/code&gt; value in this sequence at the specified index.
 The first &lt;code&gt;char&lt;/code&gt; value is at index &lt;code&gt;0&lt;/code&gt;, the next at index
 &lt;code&gt;1&lt;/code&gt;, and so on, as in array indexing.
 &lt;p&gt;
 The index argument must be greater than or equal to
 &lt;code&gt;0&lt;/code&gt;, and less than the length of this sequence.

 &lt;p&gt;If the &lt;code&gt;char&lt;/code&gt; value specified by the index is a
 &lt;a href=&quot;Character.html#unicode&quot;&gt;surrogate&lt;/a&gt;, the surrogate
 value is returned.</description>
					<attribute name="@param">
						<description>index   the index of the desired &lt;code&gt;char&lt;/code&gt; value.</description>
					</attribute>
					<attribute name="@return">
						<description>the &lt;code&gt;char&lt;/code&gt; value at the specified index.</description>
					</attribute>
					<attribute name="@throws">
						<description>IndexOutOfBoundsException  if &lt;code&gt;index&lt;/code&gt; is
             negative or greater than or equal to &lt;code&gt;length()&lt;/code&gt;.</description>
					</attribute>
				</comment>
				<params>
					<param name="index" comment="the index of the desired &lt;code&gt;char&lt;/code&gt; value." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="codePointAt" returncomment="the code point value of the character at the
             &lt;code&gt;index&lt;/code&gt;" fulltype="int" type="int">
				<comment>
					<description>Returns the character (Unicode code point) at the specified
 index. The index refers to &lt;code&gt;char&lt;/code&gt; values
 (Unicode code units) and ranges from &lt;code&gt;0&lt;/code&gt; to
 {@link #length()}&lt;code&gt; - 1&lt;/code&gt;.

 &lt;p&gt; If the &lt;code&gt;char&lt;/code&gt; value specified at the given index
 is in the high-surrogate range, the following index is less
 than the length of this sequence, and the
 &lt;code&gt;char&lt;/code&gt; value at the following index is in the
 low-surrogate range, then the supplementary code point
 corresponding to this surrogate pair is returned. Otherwise,
 the &lt;code&gt;char&lt;/code&gt; value at the given index is returned.</description>
					<attribute name="@param">
						<description>index the index to the &lt;code&gt;char&lt;/code&gt; values</description>
					</attribute>
					<attribute name="@return">
						<description>the code point value of the character at the
             &lt;code&gt;index&lt;/code&gt;</description>
					</attribute>
					<attribute name="@exception">
						<description>IndexOutOfBoundsException  if the &lt;code&gt;index&lt;/code&gt;
             argument is negative or not less than the length of this
             sequence.</description>
					</attribute>
				</comment>
				<params>
					<param name="index" comment="the index to the &lt;code&gt;char&lt;/code&gt; values" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="codePointBefore" returncomment="the Unicode code point value before the given index." fulltype="int" type="int">
				<comment>
					<description>Returns the character (Unicode code point) before the specified
 index. The index refers to &lt;code&gt;char&lt;/code&gt; values
 (Unicode code units) and ranges from &lt;code&gt;1&lt;/code&gt; to {@link
 #length()}.

 &lt;p&gt; If the &lt;code&gt;char&lt;/code&gt; value at &lt;code&gt;(index - 1)&lt;/code&gt;
 is in the low-surrogate range, &lt;code&gt;(index - 2)&lt;/code&gt; is not
 negative, and the &lt;code&gt;char&lt;/code&gt; value at &lt;code&gt;(index -
 2)&lt;/code&gt; is in the high-surrogate range, then the
 supplementary code point value of the surrogate pair is
 returned. If the &lt;code&gt;char&lt;/code&gt; value at &lt;code&gt;index -
 1&lt;/code&gt; is an unpaired low-surrogate or a high-surrogate, the
 surrogate value is returned.</description>
					<attribute name="@param">
						<description>index the index following the code point that should be returned</description>
					</attribute>
					<attribute name="@return">
						<description>the Unicode code point value before the given index.</description>
					</attribute>
					<attribute name="@exception">
						<description>IndexOutOfBoundsException if the &lt;code&gt;index&lt;/code&gt;
            argument is less than 1 or greater than the length
            of this sequence.</description>
					</attribute>
				</comment>
				<params>
					<param name="index" comment="the index following the code point that should be returned" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="codePointCount" returncomment="the number of Unicode code points in the specified text
 range" fulltype="int" type="int">
				<comment>
					<description>Returns the number of Unicode code points in the specified text
 range of this sequence. The text range begins at the specified
 &lt;code&gt;beginIndex&lt;/code&gt; and extends to the &lt;code&gt;char&lt;/code&gt; at
 index &lt;code&gt;endIndex - 1&lt;/code&gt;. Thus the length (in
 &lt;code&gt;char&lt;/code&gt;s) of the text range is
 &lt;code&gt;endIndex-beginIndex&lt;/code&gt;. Unpaired surrogates within
 this sequence count as one code point each.</description>
					<attribute name="@param">
						<description>beginIndex the index to the first &lt;code&gt;char&lt;/code&gt; of
 the text range.</description>
					</attribute>
					<attribute name="@param">
						<description>endIndex the index after the last &lt;code&gt;char&lt;/code&gt; of
 the text range.</description>
					</attribute>
					<attribute name="@return">
						<description>the number of Unicode code points in the specified text
 range</description>
					</attribute>
					<attribute name="@exception">
						<description>IndexOutOfBoundsException if the
 &lt;code&gt;beginIndex&lt;/code&gt; is negative, or &lt;code&gt;endIndex&lt;/code&gt;
 is larger than the length of this sequence, or
 &lt;code&gt;beginIndex&lt;/code&gt; is larger than &lt;code&gt;endIndex&lt;/code&gt;.</description>
					</attribute>
				</comment>
				<params>
					<param name="beginIndex" comment="the index to the first &lt;code&gt;char&lt;/code&gt; of
 the text range." fulltype="int" type="int" />
					<param name="endIndex" comment="the index after the last &lt;code&gt;char&lt;/code&gt; of
 the text range." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="offsetByCodePoints" returncomment="the index within this sequence" fulltype="int" type="int">
				<comment>
					<description>Returns the index within this sequence that is offset from the
 given &lt;code&gt;index&lt;/code&gt; by &lt;code&gt;codePointOffset&lt;/code&gt; code
 points. Unpaired surrogates within the text range given by
 &lt;code&gt;index&lt;/code&gt; and &lt;code&gt;codePointOffset&lt;/code&gt; count as
 one code point each.</description>
					<attribute name="@param">
						<description>index the index to be offset</description>
					</attribute>
					<attribute name="@param">
						<description>codePointOffset the offset in code points</description>
					</attribute>
					<attribute name="@return">
						<description>the index within this sequence</description>
					</attribute>
					<attribute name="@exception">
						<description>IndexOutOfBoundsException if &lt;code&gt;index&lt;/code&gt;
   is negative or larger then the length of this sequence,
   or if &lt;code&gt;codePointOffset&lt;/code&gt; is positive and the subsequence
   starting with &lt;code&gt;index&lt;/code&gt; has fewer than
   &lt;code&gt;codePointOffset&lt;/code&gt; code points,
   or if &lt;code&gt;codePointOffset&lt;/code&gt; is negative and the subsequence
   before &lt;code&gt;index&lt;/code&gt; has fewer than the absolute value of
   &lt;code&gt;codePointOffset&lt;/code&gt; code points.</description>
					</attribute>
				</comment>
				<params>
					<param name="index" comment="the index to be offset" fulltype="int" type="int" />
					<param name="codePointOffset" comment="the offset in code points" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="getChars" fulltype="void" type="void">
				<comment>
					<description>Characters are copied from this sequence into the
 destination character array &lt;code&gt;dst&lt;/code&gt;. The first character to
 be copied is at index &lt;code&gt;srcBegin&lt;/code&gt;; the last character to
 be copied is at index &lt;code&gt;srcEnd-1&lt;/code&gt;. The total number of
 characters to be copied is &lt;code&gt;srcEnd-srcBegin&lt;/code&gt;. The
 characters are copied into the subarray of &lt;code&gt;dst&lt;/code&gt; starting
 at index &lt;code&gt;dstBegin&lt;/code&gt; and ending at index:
 &lt;p&gt;&lt;blockquote&gt;&lt;pre&gt;
 dstbegin + (srcEnd-srcBegin) - 1
 &lt;/pre&gt;&lt;/blockquote&gt;</description>
					<attribute name="@param">
						<description>srcBegin   start copying at this offset.</description>
					</attribute>
					<attribute name="@param">
						<description>srcEnd     stop copying at this offset.</description>
					</attribute>
					<attribute name="@param">
						<description>dst        the array to copy the data into.</description>
					</attribute>
					<attribute name="@param">
						<description>dstBegin   offset into &lt;code&gt;dst&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@throws">
						<description>NullPointerException if &lt;code&gt;dst&lt;/code&gt; is
             &lt;code&gt;null&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@throws">
						<description>IndexOutOfBoundsException  if any of the following is true:
             &lt;ul&gt;
             &lt;li&gt;&lt;code&gt;srcBegin&lt;/code&gt; is negative
             &lt;li&gt;&lt;code&gt;dstBegin&lt;/code&gt; is negative
             &lt;li&gt;the &lt;code&gt;srcBegin&lt;/code&gt; argument is greater than
             the &lt;code&gt;srcEnd&lt;/code&gt; argument.
             &lt;li&gt;&lt;code&gt;srcEnd&lt;/code&gt; is greater than
             &lt;code&gt;this.length()&lt;/code&gt;.
             &lt;li&gt;&lt;code&gt;dstBegin+srcEnd-srcBegin&lt;/code&gt; is greater than
             &lt;code&gt;dst.length&lt;/code&gt;
             &lt;/ul&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="srcBegin" comment="start copying at this offset." fulltype="int" type="int" />
					<param name="srcEnd" comment="stop copying at this offset." fulltype="int" type="int" />
					<param name="dst" comment="the array to copy the data into." fulltype="char[]" type="char" />
					<param name="dstBegin" comment="offset into &lt;code&gt;dst&lt;/code&gt;." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="setCharAt" fulltype="void" type="void">
				<comment>
					<description>The character at the specified index is set to &lt;code&gt;ch&lt;/code&gt;. This
 sequence is altered to represent a new character sequence that is
 identical to the old character sequence, except that it contains the
 character &lt;code&gt;ch&lt;/code&gt; at position &lt;code&gt;index&lt;/code&gt;.
 &lt;p&gt;
 The index argument must be greater than or equal to
 &lt;code&gt;0&lt;/code&gt;, and less than the length of this sequence.</description>
					<attribute name="@param">
						<description>index   the index of the character to modify.</description>
					</attribute>
					<attribute name="@param">
						<description>ch      the new character.</description>
					</attribute>
					<attribute name="@throws">
						<description>IndexOutOfBoundsException  if &lt;code&gt;index&lt;/code&gt; is
             negative or greater than or equal to &lt;code&gt;length()&lt;/code&gt;.</description>
					</attribute>
				</comment>
				<params>
					<param name="index" comment="the index of the character to modify." fulltype="int" type="int" />
					<param name="ch" comment="the new character." fulltype="char" type="char" />
				</params>
			</method>
			<method visibility="public" name="append" returncomment="a reference to this object." fulltype="java.lang.AbstractStringBuilder" type="AbstractStringBuilder">
				<comment>
					<description>Appends the string representation of the &lt;code&gt;Object&lt;/code&gt;
 argument.
 &lt;p&gt;
 The argument is converted to a string as if by the method
 &lt;code&gt;String.valueOf&lt;/code&gt;, and the characters of that
 string are then appended to this sequence.</description>
					<attribute name="@param">
						<description>obj   an &lt;code&gt;Object&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@return">
						<description>a reference to this object.</description>
					</attribute>
				</comment>
				<params>
					<param name="obj" comment="an &lt;code&gt;Object&lt;/code&gt;." fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="append" returncomment="a reference to this object." fulltype="java.lang.AbstractStringBuilder" type="AbstractStringBuilder">
				<comment>
					<description>Appends the specified string to this character sequence.
 &lt;p&gt;
 The characters of the &lt;code&gt;String&lt;/code&gt; argument are appended, in
 order, increasing the length of this sequence by the length of the
 argument. If &lt;code&gt;str&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, then the four
 characters &lt;code&gt;&quot;null&quot;&lt;/code&gt; are appended.
 &lt;p&gt;
 Let &lt;i&gt;n&lt;/i&gt; be the length of this character sequence just prior to
 execution of the &lt;code&gt;append&lt;/code&gt; method. Then the character at
 index &lt;i&gt;k&lt;/i&gt; in the new character sequence is equal to the character
 at index &lt;i&gt;k&lt;/i&gt; in the old character sequence, if &lt;i&gt;k&lt;/i&gt; is less
 than &lt;i&gt;n&lt;/i&gt;; otherwise, it is equal to the character at index
 &lt;i&gt;k-n&lt;/i&gt; in the argument &lt;code&gt;str&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>str   a string.</description>
					</attribute>
					<attribute name="@return">
						<description>a reference to this object.</description>
					</attribute>
				</comment>
				<params>
					<param name="str" comment="a string." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="append" fulltype="java.lang.AbstractStringBuilder" type="AbstractStringBuilder">
				<params>
					<param name="sb" fulltype="java.lang.StringBuffer" type="StringBuffer" />
				</params>
			</method>
			<method visibility="public" name="append" fulltype="java.lang.AbstractStringBuilder" type="AbstractStringBuilder">
				<params>
					<param name="s" fulltype="java.lang.CharSequence" type="CharSequence" />
				</params>
			</method>
			<method visibility="public" name="append" returncomment="a reference to this object." fulltype="java.lang.AbstractStringBuilder" type="AbstractStringBuilder">
				<comment>
					<description>Appends a subsequence of the specified &lt;code&gt;CharSequence&lt;/code&gt; to this
 sequence.
 &lt;p&gt;
 Characters of the argument &lt;code&gt;s&lt;/code&gt;, starting at
 index &lt;code&gt;start&lt;/code&gt;, are appended, in order, to the contents of
 this sequence up to the (exclusive) index &lt;code&gt;end&lt;/code&gt;. The length
 of this sequence is increased by the value of &lt;code&gt;end - start&lt;/code&gt;.
 &lt;p&gt;
 Let &lt;i&gt;n&lt;/i&gt; be the length of this character sequence just prior to
 execution of the &lt;code&gt;append&lt;/code&gt; method. Then the character at
 index &lt;i&gt;k&lt;/i&gt; in this character sequence becomes equal to the
 character at index &lt;i&gt;k&lt;/i&gt; in this sequence, if &lt;i&gt;k&lt;/i&gt; is less than
 &lt;i&gt;n&lt;/i&gt;; otherwise, it is equal to the character at index
 &lt;i&gt;k+start-n&lt;/i&gt; in the argument &lt;code&gt;s&lt;/code&gt;.
 &lt;p&gt;
 If &lt;code&gt;s&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, then this method appends
 characters as if the s parameter was a sequence containing the four
 characters &lt;code&gt;&quot;null&quot;&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>s the sequence to append.</description>
					</attribute>
					<attribute name="@param">
						<description>start   the starting index of the subsequence to be appended.</description>
					</attribute>
					<attribute name="@param">
						<description>end     the end index of the subsequence to be appended.</description>
					</attribute>
					<attribute name="@return">
						<description>a reference to this object.</description>
					</attribute>
					<attribute name="@throws">
						<description>IndexOutOfBoundsException if
                  &lt;code&gt;start&lt;/code&gt; or &lt;code&gt;end&lt;/code&gt; are negative, or
             &lt;code&gt;start&lt;/code&gt; is greater than &lt;code&gt;end&lt;/code&gt; or
             &lt;code&gt;end&lt;/code&gt; is greater than &lt;code&gt;s.length()&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the sequence to append." fulltype="java.lang.CharSequence" type="CharSequence" />
					<param name="start" comment="the starting index of the subsequence to be appended." fulltype="int" type="int" />
					<param name="end" comment="the end index of the subsequence to be appended." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="append" returncomment="a reference to this object." fulltype="java.lang.AbstractStringBuilder" type="AbstractStringBuilder">
				<comment>
					<description>Appends the string representation of the &lt;code&gt;char&lt;/code&gt; array
 argument to this sequence.
 &lt;p&gt;
 The characters of the array argument are appended, in order, to
 the contents of this sequence. The length of this sequence
 increases by the length of the argument.
 &lt;p&gt;
 The overall effect is exactly as if the argument were converted to
 a string by the method {@link String#valueOf(char[])} and the
 characters of that string were then {@link #append(String) appended}
 to this character sequence.</description>
					<attribute name="@param">
						<description>str   the characters to be appended.</description>
					</attribute>
					<attribute name="@return">
						<description>a reference to this object.</description>
					</attribute>
				</comment>
				<params>
					<param name="str" comment="the characters to be appended." fulltype="char[]" type="char" />
				</params>
			</method>
			<method visibility="public" name="append" returncomment="a reference to this object." fulltype="java.lang.AbstractStringBuilder" type="AbstractStringBuilder">
				<comment>
					<description>Appends the string representation of a subarray of the
 &lt;code&gt;char&lt;/code&gt; array argument to this sequence.
 &lt;p&gt;
 Characters of the &lt;code&gt;char&lt;/code&gt; array &lt;code&gt;str&lt;/code&gt;, starting at
 index &lt;code&gt;offset&lt;/code&gt;, are appended, in order, to the contents
 of this sequence. The length of this sequence increases
 by the value of &lt;code&gt;len&lt;/code&gt;.
 &lt;p&gt;
 The overall effect is exactly as if the arguments were converted to
 a string by the method {@link String#valueOf(char[],int,int)} and the
 characters of that string were then {@link #append(String) appended}
 to this character sequence.</description>
					<attribute name="@param">
						<description>str      the characters to be appended.</description>
					</attribute>
					<attribute name="@param">
						<description>offset   the index of the first &lt;code&gt;char&lt;/code&gt; to append.</description>
					</attribute>
					<attribute name="@param">
						<description>len      the number of &lt;code&gt;char&lt;/code&gt;s to append.</description>
					</attribute>
					<attribute name="@return">
						<description>a reference to this object.</description>
					</attribute>
				</comment>
				<params>
					<param name="str" comment="the characters to be appended." fulltype="char[]" type="char" />
					<param name="offset" comment="the index of the first &lt;code&gt;char&lt;/code&gt; to append." fulltype="int" type="int" />
					<param name="len" comment="the number of &lt;code&gt;char&lt;/code&gt;s to append." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="append" returncomment="a reference to this object." fulltype="java.lang.AbstractStringBuilder" type="AbstractStringBuilder">
				<comment>
					<description>Appends the string representation of the &lt;code&gt;boolean&lt;/code&gt;
 argument to the sequence.
 &lt;p&gt;
 The argument is converted to a string as if by the method
 &lt;code&gt;String.valueOf&lt;/code&gt;, and the characters of that
 string are then appended to this sequence.</description>
					<attribute name="@param">
						<description>b   a &lt;code&gt;boolean&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@return">
						<description>a reference to this object.</description>
					</attribute>
				</comment>
				<params>
					<param name="b" comment="a &lt;code&gt;boolean&lt;/code&gt;." fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="append" returncomment="a reference to this object." fulltype="java.lang.AbstractStringBuilder" type="AbstractStringBuilder">
				<comment>
					<description>Appends the string representation of the &lt;code&gt;char&lt;/code&gt;
 argument to this sequence.
 &lt;p&gt;
 The argument is appended to the contents of this sequence.
 The length of this sequence increases by &lt;code&gt;1&lt;/code&gt;.
 &lt;p&gt;
 The overall effect is exactly as if the argument were converted to
 a string by the method {@link String#valueOf(char)} and the character
 in that string were then {@link #append(String) appended} to this
 character sequence.</description>
					<attribute name="@param">
						<description>c   a &lt;code&gt;char&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@return">
						<description>a reference to this object.</description>
					</attribute>
				</comment>
				<params>
					<param name="c" comment="a &lt;code&gt;char&lt;/code&gt;." fulltype="char" type="char" />
				</params>
			</method>
			<method visibility="public" name="append" returncomment="a reference to this object." fulltype="java.lang.AbstractStringBuilder" type="AbstractStringBuilder">
				<comment>
					<description>Appends the string representation of the &lt;code&gt;int&lt;/code&gt;
 argument to this sequence.
 &lt;p&gt;
 The argument is converted to a string as if by the method
 &lt;code&gt;String.valueOf&lt;/code&gt;, and the characters of that
 string are then appended to this sequence.</description>
					<attribute name="@param">
						<description>i   an &lt;code&gt;int&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@return">
						<description>a reference to this object.</description>
					</attribute>
				</comment>
				<params>
					<param name="i" comment="an &lt;code&gt;int&lt;/code&gt;." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="append" returncomment="a reference to this object." fulltype="java.lang.AbstractStringBuilder" type="AbstractStringBuilder">
				<comment>
					<description>Appends the string representation of the &lt;code&gt;long&lt;/code&gt;
 argument to this sequence.
 &lt;p&gt;
 The argument is converted to a string as if by the method
 &lt;code&gt;String.valueOf&lt;/code&gt;, and the characters of that
 string are then appended to this sequence.</description>
					<attribute name="@param">
						<description>l   a &lt;code&gt;long&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@return">
						<description>a reference to this object.</description>
					</attribute>
				</comment>
				<params>
					<param name="l" comment="a &lt;code&gt;long&lt;/code&gt;." fulltype="long" type="long" />
				</params>
			</method>
			<method visibility="public" name="append" returncomment="a reference to this object." fulltype="java.lang.AbstractStringBuilder" type="AbstractStringBuilder">
				<comment>
					<description>Appends the string representation of the &lt;code&gt;float&lt;/code&gt;
 argument to this sequence.
 &lt;p&gt;
 The argument is converted to a string as if by the method
 &lt;code&gt;String.valueOf&lt;/code&gt;, and the characters of that
 string are then appended to this string sequence.</description>
					<attribute name="@param">
						<description>f   a &lt;code&gt;float&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@return">
						<description>a reference to this object.</description>
					</attribute>
				</comment>
				<params>
					<param name="f" comment="a &lt;code&gt;float&lt;/code&gt;." fulltype="float" type="float" />
				</params>
			</method>
			<method visibility="public" name="append" returncomment="a reference to this object." fulltype="java.lang.AbstractStringBuilder" type="AbstractStringBuilder">
				<comment>
					<description>Appends the string representation of the &lt;code&gt;double&lt;/code&gt;
 argument to this sequence.
 &lt;p&gt;
 The argument is converted to a string as if by the method
 &lt;code&gt;String.valueOf&lt;/code&gt;, and the characters of that
 string are then appended to this sequence.</description>
					<attribute name="@param">
						<description>d   a &lt;code&gt;double&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@return">
						<description>a reference to this object.</description>
					</attribute>
				</comment>
				<params>
					<param name="d" comment="a &lt;code&gt;double&lt;/code&gt;." fulltype="double" type="double" />
				</params>
			</method>
			<method visibility="public" name="delete" returncomment="This object." fulltype="java.lang.AbstractStringBuilder" type="AbstractStringBuilder">
				<comment>
					<description>Removes the characters in a substring of this sequence.
 The substring begins at the specified &lt;code&gt;start&lt;/code&gt; and extends to
 the character at index &lt;code&gt;end - 1&lt;/code&gt; or to the end of the
 sequence if no such character exists. If
 &lt;code&gt;start&lt;/code&gt; is equal to &lt;code&gt;end&lt;/code&gt;, no changes are made.</description>
					<attribute name="@param">
						<description>start  The beginning index, inclusive.</description>
					</attribute>
					<attribute name="@param">
						<description>end    The ending index, exclusive.</description>
					</attribute>
					<attribute name="@return">
						<description>This object.</description>
					</attribute>
					<attribute name="@throws">
						<description>StringIndexOutOfBoundsException  if &lt;code&gt;start&lt;/code&gt;
             is negative, greater than &lt;code&gt;length()&lt;/code&gt;, or
             greater than &lt;code&gt;end&lt;/code&gt;.</description>
					</attribute>
				</comment>
				<params>
					<param name="start" comment="The beginning index, inclusive." fulltype="int" type="int" />
					<param name="end" comment="The ending index, exclusive." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="appendCodePoint" returncomment="a reference to this object." fulltype="java.lang.AbstractStringBuilder" type="AbstractStringBuilder">
				<comment>
					<description>Appends the string representation of the &lt;code&gt;codePoint&lt;/code&gt;
 argument to this sequence.

 &lt;p&gt; The argument is appended to the contents of this sequence.
 The length of this sequence increases by
 {@link Character#charCount(int) Character.charCount(codePoint)}.

 &lt;p&gt; The overall effect is exactly as if the argument were
 converted to a &lt;code&gt;char&lt;/code&gt; array by the method {@link
 Character#toChars(int)} and the character in that array were
 then {@link #append(char[]) appended} to this character
 sequence.</description>
					<attribute name="@param">
						<description>codePoint   a Unicode code point</description>
					</attribute>
					<attribute name="@return">
						<description>a reference to this object.</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalArgumentException if the specified
 &lt;code&gt;codePoint&lt;/code&gt; isn&apos;t a valid Unicode code point</description>
					</attribute>
				</comment>
				<params>
					<param name="codePoint" comment="a Unicode code point" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="deleteCharAt" returncomment="This object." fulltype="java.lang.AbstractStringBuilder" type="AbstractStringBuilder">
				<comment>
					<description>Removes the &lt;code&gt;char&lt;/code&gt; at the specified position in this
 sequence. This sequence is shortened by one &lt;code&gt;char&lt;/code&gt;.

 &lt;p&gt;Note: If the character at the given index is a supplementary
 character, this method does not remove the entire character. If
 correct handling of supplementary characters is required,
 determine the number of &lt;code&gt;char&lt;/code&gt;s to remove by calling
 &lt;code&gt;Character.charCount(thisSequence.codePointAt(index))&lt;/code&gt;,
 where &lt;code&gt;thisSequence&lt;/code&gt; is this sequence.</description>
					<attribute name="@param">
						<description>index  Index of &lt;code&gt;char&lt;/code&gt; to remove</description>
					</attribute>
					<attribute name="@return">
						<description>This object.</description>
					</attribute>
					<attribute name="@throws">
						<description>StringIndexOutOfBoundsException  if the &lt;code&gt;index&lt;/code&gt;
              is negative or greater than or equal to
              &lt;code&gt;length()&lt;/code&gt;.</description>
					</attribute>
				</comment>
				<params>
					<param name="index" comment="Index of &lt;code&gt;char&lt;/code&gt; to remove" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="replace" returncomment="This object." fulltype="java.lang.AbstractStringBuilder" type="AbstractStringBuilder">
				<comment>
					<description>Replaces the characters in a substring of this sequence
 with characters in the specified &lt;code&gt;String&lt;/code&gt;. The substring
 begins at the specified &lt;code&gt;start&lt;/code&gt; and extends to the character
 at index &lt;code&gt;end - 1&lt;/code&gt; or to the end of the
 sequence if no such character exists. First the
 characters in the substring are removed and then the specified
 &lt;code&gt;String&lt;/code&gt; is inserted at &lt;code&gt;start&lt;/code&gt;. (This
 sequence will be lengthened to accommodate the
 specified String if necessary.)</description>
					<attribute name="@param">
						<description>start    The beginning index, inclusive.</description>
					</attribute>
					<attribute name="@param">
						<description>end      The ending index, exclusive.</description>
					</attribute>
					<attribute name="@param">
						<description>str   String that will replace previous contents.</description>
					</attribute>
					<attribute name="@return">
						<description>This object.</description>
					</attribute>
					<attribute name="@throws">
						<description>StringIndexOutOfBoundsException  if &lt;code&gt;start&lt;/code&gt;
             is negative, greater than &lt;code&gt;length()&lt;/code&gt;, or
             greater than &lt;code&gt;end&lt;/code&gt;.</description>
					</attribute>
				</comment>
				<params>
					<param name="start" comment="The beginning index, inclusive." fulltype="int" type="int" />
					<param name="end" comment="The ending index, exclusive." fulltype="int" type="int" />
					<param name="str" comment="String that will replace previous contents." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="substring" returncomment="The new string." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a new &lt;code&gt;String&lt;/code&gt; that contains a subsequence of
 characters currently contained in this character sequence. The
 substring begins at the specified index and extends to the end of
 this sequence.</description>
					<attribute name="@param">
						<description>start    The beginning index, inclusive.</description>
					</attribute>
					<attribute name="@return">
						<description>The new string.</description>
					</attribute>
					<attribute name="@throws">
						<description>StringIndexOutOfBoundsException  if &lt;code&gt;start&lt;/code&gt; is
             less than zero, or greater than the length of this object.</description>
					</attribute>
				</comment>
				<params>
					<param name="start" comment="The beginning index, inclusive." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="subSequence" returncomment="the specified subsequence." fulltype="java.lang.CharSequence" type="CharSequence">
				<comment>
					<description>Returns a new character sequence that is a subsequence of this sequence.

 &lt;p&gt; An invocation of this method of the form

 &lt;blockquote&gt;&lt;pre&gt;
 sb.subSequence(begin,&amp;nbsp;end)&lt;/pre&gt;&lt;/blockquote&gt;

 behaves in exactly the same way as the invocation

 &lt;blockquote&gt;&lt;pre&gt;
 sb.substring(begin,&amp;nbsp;end)&lt;/pre&gt;&lt;/blockquote&gt;

 This method is provided so that this class can
 implement the {@link CharSequence} interface. &lt;/p&gt;</description>
					<attribute name="@param">
						<description>start   the start index, inclusive.</description>
					</attribute>
					<attribute name="@param">
						<description>end     the end index, exclusive.</description>
					</attribute>
					<attribute name="@return">
						<description>the specified subsequence.</description>
					</attribute>
					<attribute name="@throws">
						<description>IndexOutOfBoundsException
          if &lt;tt&gt;start&lt;/tt&gt; or &lt;tt&gt;end&lt;/tt&gt; are negative,
          if &lt;tt&gt;end&lt;/tt&gt; is greater than &lt;tt&gt;length()&lt;/tt&gt;,
          or if &lt;tt&gt;start&lt;/tt&gt; is greater than &lt;tt&gt;end&lt;/tt&gt;</description>
					</attribute>
					<attribute name="@spec">
						<description>JSR-51</description>
					</attribute>
				</comment>
				<params>
					<param name="start" comment="the start index, inclusive." fulltype="int" type="int" />
					<param name="end" comment="the end index, exclusive." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="substring" returncomment="The new string." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a new &lt;code&gt;String&lt;/code&gt; that contains a subsequence of
 characters currently contained in this sequence. The
 substring begins at the specified &lt;code&gt;start&lt;/code&gt; and
 extends to the character at index &lt;code&gt;end - 1&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>start    The beginning index, inclusive.</description>
					</attribute>
					<attribute name="@param">
						<description>end      The ending index, exclusive.</description>
					</attribute>
					<attribute name="@return">
						<description>The new string.</description>
					</attribute>
					<attribute name="@throws">
						<description>StringIndexOutOfBoundsException  if &lt;code&gt;start&lt;/code&gt;
             or &lt;code&gt;end&lt;/code&gt; are negative or greater than
             &lt;code&gt;length()&lt;/code&gt;, or &lt;code&gt;start&lt;/code&gt; is
             greater than &lt;code&gt;end&lt;/code&gt;.</description>
					</attribute>
				</comment>
				<params>
					<param name="start" comment="The beginning index, inclusive." fulltype="int" type="int" />
					<param name="end" comment="The ending index, exclusive." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="insert" returncomment="This object" fulltype="java.lang.AbstractStringBuilder" type="AbstractStringBuilder">
				<comment>
					<description>Inserts the string representation of a subarray of the &lt;code&gt;str&lt;/code&gt;
 array argument into this sequence. The subarray begins at the
 specified &lt;code&gt;offset&lt;/code&gt; and extends &lt;code&gt;len&lt;/code&gt; &lt;code&gt;char&lt;/code&gt;s.
 The characters of the subarray are inserted into this sequence at
 the position indicated by &lt;code&gt;index&lt;/code&gt;. The length of this
 sequence increases by &lt;code&gt;len&lt;/code&gt; &lt;code&gt;char&lt;/code&gt;s.</description>
					<attribute name="@param">
						<description>index    position at which to insert subarray.</description>
					</attribute>
					<attribute name="@param">
						<description>str       A &lt;code&gt;char&lt;/code&gt; array.</description>
					</attribute>
					<attribute name="@param">
						<description>offset   the index of the first &lt;code&gt;char&lt;/code&gt; in subarray to
             be inserted.</description>
					</attribute>
					<attribute name="@param">
						<description>len      the number of &lt;code&gt;char&lt;/code&gt;s in the subarray to
             be inserted.</description>
					</attribute>
					<attribute name="@return">
						<description>This object</description>
					</attribute>
					<attribute name="@throws">
						<description>StringIndexOutOfBoundsException  if &lt;code&gt;index&lt;/code&gt;
             is negative or greater than &lt;code&gt;length()&lt;/code&gt;, or
             &lt;code&gt;offset&lt;/code&gt; or &lt;code&gt;len&lt;/code&gt; are negative, or
             &lt;code&gt;(offset+len)&lt;/code&gt; is greater than
             &lt;code&gt;str.length&lt;/code&gt;.</description>
					</attribute>
				</comment>
				<params>
					<param name="index" comment="position at which to insert subarray." fulltype="int" type="int" />
					<param name="str" comment="A &lt;code&gt;char&lt;/code&gt; array." fulltype="char[]" type="char" />
					<param name="offset" comment="the index of the first &lt;code&gt;char&lt;/code&gt; in subarray to
             be inserted." fulltype="int" type="int" />
					<param name="len" comment="the number of &lt;code&gt;char&lt;/code&gt;s in the subarray to
             be inserted." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="insert" returncomment="a reference to this object." fulltype="java.lang.AbstractStringBuilder" type="AbstractStringBuilder">
				<comment>
					<description>Inserts the string representation of the &lt;code&gt;Object&lt;/code&gt;
 argument into this character sequence.
 &lt;p&gt;
 The second argument is converted to a string as if by the method
 &lt;code&gt;String.valueOf&lt;/code&gt;, and the characters of that
 string are then inserted into this sequence at the indicated
 offset.
 &lt;p&gt;
 The offset argument must be greater than or equal to
 &lt;code&gt;0&lt;/code&gt;, and less than or equal to the length of this
 sequence.</description>
					<attribute name="@param">
						<description>offset   the offset.</description>
					</attribute>
					<attribute name="@param">
						<description>obj      an &lt;code&gt;Object&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@return">
						<description>a reference to this object.</description>
					</attribute>
					<attribute name="@throws">
						<description>StringIndexOutOfBoundsException  if the offset is invalid.</description>
					</attribute>
				</comment>
				<params>
					<param name="offset" comment="the offset." fulltype="int" type="int" />
					<param name="obj" comment="an &lt;code&gt;Object&lt;/code&gt;." fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="insert" returncomment="a reference to this object." fulltype="java.lang.AbstractStringBuilder" type="AbstractStringBuilder">
				<comment>
					<description>Inserts the string into this character sequence.
 &lt;p&gt;
 The characters of the &lt;code&gt;String&lt;/code&gt; argument are inserted, in
 order, into this sequence at the indicated offset, moving up any
 characters originally above that position and increasing the length
 of this sequence by the length of the argument. If
 &lt;code&gt;str&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, then the four characters
 &lt;code&gt;&quot;null&quot;&lt;/code&gt; are inserted into this sequence.
 &lt;p&gt;
 The character at index &lt;i&gt;k&lt;/i&gt; in the new character sequence is
 equal to:
 &lt;ul&gt;
 &lt;li&gt;the character at index &lt;i&gt;k&lt;/i&gt; in the old character sequence, if
 &lt;i&gt;k&lt;/i&gt; is less than &lt;code&gt;offset&lt;/code&gt;
 &lt;li&gt;the character at index &lt;i&gt;k&lt;/i&gt;&lt;code&gt;-offset&lt;/code&gt; in the
 argument &lt;code&gt;str&lt;/code&gt;, if &lt;i&gt;k&lt;/i&gt; is not less than
 &lt;code&gt;offset&lt;/code&gt; but is less than &lt;code&gt;offset+str.length()&lt;/code&gt;
 &lt;li&gt;the character at index &lt;i&gt;k&lt;/i&gt;&lt;code&gt;-str.length()&lt;/code&gt; in the
 old character sequence, if &lt;i&gt;k&lt;/i&gt; is not less than
 &lt;code&gt;offset+str.length()&lt;/code&gt;
 &lt;/ul&gt;&lt;p&gt;
 The offset argument must be greater than or equal to
 &lt;code&gt;0&lt;/code&gt;, and less than or equal to the length of this
 sequence.</description>
					<attribute name="@param">
						<description>offset   the offset.</description>
					</attribute>
					<attribute name="@param">
						<description>str      a string.</description>
					</attribute>
					<attribute name="@return">
						<description>a reference to this object.</description>
					</attribute>
					<attribute name="@throws">
						<description>StringIndexOutOfBoundsException  if the offset is invalid.</description>
					</attribute>
				</comment>
				<params>
					<param name="offset" comment="the offset." fulltype="int" type="int" />
					<param name="str" comment="a string." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="insert" returncomment="a reference to this object." fulltype="java.lang.AbstractStringBuilder" type="AbstractStringBuilder">
				<comment>
					<description>Inserts the string representation of the &lt;code&gt;char&lt;/code&gt; array
 argument into this sequence.
 &lt;p&gt;
 The characters of the array argument are inserted into the
 contents of this sequence at the position indicated by
 &lt;code&gt;offset&lt;/code&gt;. The length of this sequence increases by
 the length of the argument.
 &lt;p&gt;
 The overall effect is exactly as if the argument were converted to
 a string by the method {@link String#valueOf(char[])} and the
 characters of that string were then
 {@link #insert(int,String) inserted} into this
 character sequence at the position indicated by
 &lt;code&gt;offset&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>offset   the offset.</description>
					</attribute>
					<attribute name="@param">
						<description>str      a character array.</description>
					</attribute>
					<attribute name="@return">
						<description>a reference to this object.</description>
					</attribute>
					<attribute name="@throws">
						<description>StringIndexOutOfBoundsException  if the offset is invalid.</description>
					</attribute>
				</comment>
				<params>
					<param name="offset" comment="the offset." fulltype="int" type="int" />
					<param name="str" comment="a character array." fulltype="char[]" type="char" />
				</params>
			</method>
			<method visibility="public" name="insert" returncomment="a reference to this object." fulltype="java.lang.AbstractStringBuilder" type="AbstractStringBuilder">
				<comment>
					<description>Inserts the specified &lt;code&gt;CharSequence&lt;/code&gt; into this sequence.
 &lt;p&gt;
 The characters of the &lt;code&gt;CharSequence&lt;/code&gt; argument are inserted,
 in order, into this sequence at the indicated offset, moving up
 any characters originally above that position and increasing the length
 of this sequence by the length of the argument s.
 &lt;p&gt;
 The result of this method is exactly the same as if it were an
 invocation of this object&apos;s insert(dstOffset, s, 0, s.length()) method.

 &lt;p&gt;If &lt;code&gt;s&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, then the four characters
 &lt;code&gt;&quot;null&quot;&lt;/code&gt; are inserted into this sequence.</description>
					<attribute name="@param">
						<description>dstOffset   the offset.</description>
					</attribute>
					<attribute name="@param">
						<description>s the sequence to be inserted</description>
					</attribute>
					<attribute name="@return">
						<description>a reference to this object.</description>
					</attribute>
					<attribute name="@throws">
						<description>IndexOutOfBoundsException  if the offset is invalid.</description>
					</attribute>
				</comment>
				<params>
					<param name="dstOffset" comment="the offset." fulltype="int" type="int" />
					<param name="s" comment="the sequence to be inserted" fulltype="java.lang.CharSequence" type="CharSequence" />
				</params>
			</method>
			<method visibility="public" name="insert" returncomment="a reference to this object." fulltype="java.lang.AbstractStringBuilder" type="AbstractStringBuilder">
				<comment>
					<description>Inserts a subsequence of the specified &lt;code&gt;CharSequence&lt;/code&gt; into
 this sequence.
 &lt;p&gt;
 The subsequence of the argument &lt;code&gt;s&lt;/code&gt; specified by
 &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; are inserted,
 in order, into this sequence at the specified destination offset, moving
 up any characters originally above that position. The length of this
 sequence is increased by &lt;code&gt;end - start&lt;/code&gt;.
 &lt;p&gt;
 The character at index &lt;i&gt;k&lt;/i&gt; in this sequence becomes equal to:
 &lt;ul&gt;
 &lt;li&gt;the character at index &lt;i&gt;k&lt;/i&gt; in this sequence, if
 &lt;i&gt;k&lt;/i&gt; is less than &lt;code&gt;dstOffset&lt;/code&gt;
 &lt;li&gt;the character at index &lt;i&gt;k&lt;/i&gt;&lt;code&gt;+start-dstOffset&lt;/code&gt; in
 the argument &lt;code&gt;s&lt;/code&gt;, if &lt;i&gt;k&lt;/i&gt; is greater than or equal to
 &lt;code&gt;dstOffset&lt;/code&gt; but is less than &lt;code&gt;dstOffset+end-start&lt;/code&gt;
 &lt;li&gt;the character at index &lt;i&gt;k&lt;/i&gt;&lt;code&gt;-(end-start)&lt;/code&gt; in this
 sequence, if &lt;i&gt;k&lt;/i&gt; is greater than or equal to
 &lt;code&gt;dstOffset+end-start&lt;/code&gt;
 &lt;/ul&gt;&lt;p&gt;
 The dstOffset argument must be greater than or equal to
 &lt;code&gt;0&lt;/code&gt;, and less than or equal to the length of this
 sequence.
 &lt;p&gt;The start argument must be nonnegative, and not greater than
 &lt;code&gt;end&lt;/code&gt;.
 &lt;p&gt;The end argument must be greater than or equal to
 &lt;code&gt;start&lt;/code&gt;, and less than or equal to the length of s.

 &lt;p&gt;If &lt;code&gt;s&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, then this method inserts
 characters as if the s parameter was a sequence containing the four
 characters &lt;code&gt;&quot;null&quot;&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>dstOffset   the offset in this sequence.</description>
					</attribute>
					<attribute name="@param">
						<description>s       the sequence to be inserted.</description>
					</attribute>
					<attribute name="@param">
						<description>start   the starting index of the subsequence to be inserted.</description>
					</attribute>
					<attribute name="@param">
						<description>end     the end index of the subsequence to be inserted.</description>
					</attribute>
					<attribute name="@return">
						<description>a reference to this object.</description>
					</attribute>
					<attribute name="@throws">
						<description>IndexOutOfBoundsException  if &lt;code&gt;dstOffset&lt;/code&gt;
             is negative or greater than &lt;code&gt;this.length()&lt;/code&gt;, or
              &lt;code&gt;start&lt;/code&gt; or &lt;code&gt;end&lt;/code&gt; are negative, or
              &lt;code&gt;start&lt;/code&gt; is greater than &lt;code&gt;end&lt;/code&gt; or
              &lt;code&gt;end&lt;/code&gt; is greater than &lt;code&gt;s.length()&lt;/code&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="dstOffset" comment="the offset in this sequence." fulltype="int" type="int" />
					<param name="s" comment="the sequence to be inserted." fulltype="java.lang.CharSequence" type="CharSequence" />
					<param name="start" comment="the starting index of the subsequence to be inserted." fulltype="int" type="int" />
					<param name="end" comment="the end index of the subsequence to be inserted." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="insert" returncomment="a reference to this object." fulltype="java.lang.AbstractStringBuilder" type="AbstractStringBuilder">
				<comment>
					<description>Inserts the string representation of the &lt;code&gt;boolean&lt;/code&gt;
 argument into this sequence.
 &lt;p&gt;
 The second argument is converted to a string as if by the method
 &lt;code&gt;String.valueOf&lt;/code&gt;, and the characters of that
 string are then inserted into this sequence at the indicated
 offset.
 &lt;p&gt;
 The offset argument must be greater than or equal to
 &lt;code&gt;0&lt;/code&gt;, and less than or equal to the length of this
 sequence.</description>
					<attribute name="@param">
						<description>offset   the offset.</description>
					</attribute>
					<attribute name="@param">
						<description>b        a &lt;code&gt;boolean&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@return">
						<description>a reference to this object.</description>
					</attribute>
					<attribute name="@throws">
						<description>StringIndexOutOfBoundsException  if the offset is invalid.</description>
					</attribute>
				</comment>
				<params>
					<param name="offset" comment="the offset." fulltype="int" type="int" />
					<param name="b" comment="a &lt;code&gt;boolean&lt;/code&gt;." fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="insert" returncomment="a reference to this object." fulltype="java.lang.AbstractStringBuilder" type="AbstractStringBuilder">
				<comment>
					<description>Inserts the string representation of the &lt;code&gt;char&lt;/code&gt;
 argument into this sequence.
 &lt;p&gt;
 The second argument is inserted into the contents of this sequence
 at the position indicated by &lt;code&gt;offset&lt;/code&gt;. The length
 of this sequence increases by one.
 &lt;p&gt;
 The overall effect is exactly as if the argument were converted to
 a string by the method {@link String#valueOf(char)} and the character
 in that string were then {@link #insert(int, String) inserted} into
 this character sequence at the position indicated by
 &lt;code&gt;offset&lt;/code&gt;.
 &lt;p&gt;
 The offset argument must be greater than or equal to
 &lt;code&gt;0&lt;/code&gt;, and less than or equal to the length of this
 sequence.</description>
					<attribute name="@param">
						<description>offset   the offset.</description>
					</attribute>
					<attribute name="@param">
						<description>c        a &lt;code&gt;char&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@return">
						<description>a reference to this object.</description>
					</attribute>
					<attribute name="@throws">
						<description>IndexOutOfBoundsException  if the offset is invalid.</description>
					</attribute>
				</comment>
				<params>
					<param name="offset" comment="the offset." fulltype="int" type="int" />
					<param name="c" comment="a &lt;code&gt;char&lt;/code&gt;." fulltype="char" type="char" />
				</params>
			</method>
			<method visibility="public" name="insert" returncomment="a reference to this object." fulltype="java.lang.AbstractStringBuilder" type="AbstractStringBuilder">
				<comment>
					<description>Inserts the string representation of the second &lt;code&gt;int&lt;/code&gt;
 argument into this sequence.
 &lt;p&gt;
 The second argument is converted to a string as if by the method
 &lt;code&gt;String.valueOf&lt;/code&gt;, and the characters of that
 string are then inserted into this sequence at the indicated
 offset.
 &lt;p&gt;
 The offset argument must be greater than or equal to
 &lt;code&gt;0&lt;/code&gt;, and less than or equal to the length of this
 sequence.</description>
					<attribute name="@param">
						<description>offset   the offset.</description>
					</attribute>
					<attribute name="@param">
						<description>i        an &lt;code&gt;int&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@return">
						<description>a reference to this object.</description>
					</attribute>
					<attribute name="@throws">
						<description>StringIndexOutOfBoundsException  if the offset is invalid.</description>
					</attribute>
				</comment>
				<params>
					<param name="offset" comment="the offset." fulltype="int" type="int" />
					<param name="i" comment="an &lt;code&gt;int&lt;/code&gt;." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="insert" returncomment="a reference to this object." fulltype="java.lang.AbstractStringBuilder" type="AbstractStringBuilder">
				<comment>
					<description>Inserts the string representation of the &lt;code&gt;long&lt;/code&gt;
 argument into this sequence.
 &lt;p&gt;
 The second argument is converted to a string as if by the method
 &lt;code&gt;String.valueOf&lt;/code&gt;, and the characters of that
 string are then inserted into this sequence at the position
 indicated by &lt;code&gt;offset&lt;/code&gt;.
 &lt;p&gt;
 The offset argument must be greater than or equal to
 &lt;code&gt;0&lt;/code&gt;, and less than or equal to the length of this
 sequence.</description>
					<attribute name="@param">
						<description>offset   the offset.</description>
					</attribute>
					<attribute name="@param">
						<description>l        a &lt;code&gt;long&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@return">
						<description>a reference to this object.</description>
					</attribute>
					<attribute name="@throws">
						<description>StringIndexOutOfBoundsException  if the offset is invalid.</description>
					</attribute>
				</comment>
				<params>
					<param name="offset" comment="the offset." fulltype="int" type="int" />
					<param name="l" comment="a &lt;code&gt;long&lt;/code&gt;." fulltype="long" type="long" />
				</params>
			</method>
			<method visibility="public" name="insert" returncomment="a reference to this object." fulltype="java.lang.AbstractStringBuilder" type="AbstractStringBuilder">
				<comment>
					<description>Inserts the string representation of the &lt;code&gt;float&lt;/code&gt;
 argument into this sequence.
 &lt;p&gt;
 The second argument is converted to a string as if by the method
 &lt;code&gt;String.valueOf&lt;/code&gt;, and the characters of that
 string are then inserted into this sequence at the indicated
 offset.
 &lt;p&gt;
 The offset argument must be greater than or equal to
 &lt;code&gt;0&lt;/code&gt;, and less than or equal to the length of this
 sequence.</description>
					<attribute name="@param">
						<description>offset   the offset.</description>
					</attribute>
					<attribute name="@param">
						<description>f        a &lt;code&gt;float&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@return">
						<description>a reference to this object.</description>
					</attribute>
					<attribute name="@throws">
						<description>StringIndexOutOfBoundsException  if the offset is invalid.</description>
					</attribute>
				</comment>
				<params>
					<param name="offset" comment="the offset." fulltype="int" type="int" />
					<param name="f" comment="a &lt;code&gt;float&lt;/code&gt;." fulltype="float" type="float" />
				</params>
			</method>
			<method visibility="public" name="insert" returncomment="a reference to this object." fulltype="java.lang.AbstractStringBuilder" type="AbstractStringBuilder">
				<comment>
					<description>Inserts the string representation of the &lt;code&gt;double&lt;/code&gt;
 argument into this sequence.
 &lt;p&gt;
 The second argument is converted to a string as if by the method
 &lt;code&gt;String.valueOf&lt;/code&gt;, and the characters of that
 string are then inserted into this sequence at the indicated
 offset.
 &lt;p&gt;
 The offset argument must be greater than or equal to
 &lt;code&gt;0&lt;/code&gt;, and less than or equal to the length of this
 sequence.</description>
					<attribute name="@param">
						<description>offset   the offset.</description>
					</attribute>
					<attribute name="@param">
						<description>d        a &lt;code&gt;double&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@return">
						<description>a reference to this object.</description>
					</attribute>
					<attribute name="@throws">
						<description>StringIndexOutOfBoundsException  if the offset is invalid.</description>
					</attribute>
				</comment>
				<params>
					<param name="offset" comment="the offset." fulltype="int" type="int" />
					<param name="d" comment="a &lt;code&gt;double&lt;/code&gt;." fulltype="double" type="double" />
				</params>
			</method>
			<method visibility="public" name="indexOf" returncomment="if the string argument occurs as a substring within this
          object, then the index of the first character of the first
          such substring is returned; if it does not occur as a
          substring, &lt;code&gt;-1&lt;/code&gt; is returned." fulltype="int" type="int">
				<comment>
					<description>Returns the index within this string of the first occurrence of the
 specified substring. The integer returned is the smallest value
 &lt;i&gt;k&lt;/i&gt; such that:
 &lt;blockquote&gt;&lt;pre&gt;
 this.toString().startsWith(str, &lt;i&gt;k&lt;/i&gt;)
 &lt;/pre&gt;&lt;/blockquote&gt;
 is &lt;code&gt;true&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>str   any string.</description>
					</attribute>
					<attribute name="@return">
						<description>if the string argument occurs as a substring within this
          object, then the index of the first character of the first
          such substring is returned; if it does not occur as a
          substring, &lt;code&gt;-1&lt;/code&gt; is returned.</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.NullPointerException if &lt;code&gt;str&lt;/code&gt; is
          &lt;code&gt;null&lt;/code&gt;.</description>
					</attribute>
				</comment>
				<params>
					<param name="str" comment="any string." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="indexOf" returncomment="the index within this string of the first occurrence of the
          specified substring, starting at the specified index." fulltype="int" type="int">
				<comment>
					<description>Returns the index within this string of the first occurrence of the
 specified substring, starting at the specified index.  The integer
 returned is the smallest value &lt;tt&gt;k&lt;/tt&gt; for which:
 &lt;blockquote&gt;&lt;pre&gt;
     k &gt;= Math.min(fromIndex, str.length()) &amp;&amp;
                   this.toString().startsWith(str, k)
 &lt;/pre&gt;&lt;/blockquote&gt;
 If no such value of &lt;i&gt;k&lt;/i&gt; exists, then -1 is returned.</description>
					<attribute name="@param">
						<description>str         the substring for which to search.</description>
					</attribute>
					<attribute name="@param">
						<description>fromIndex   the index from which to start the search.</description>
					</attribute>
					<attribute name="@return">
						<description>the index within this string of the first occurrence of the
          specified substring, starting at the specified index.</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.NullPointerException if &lt;code&gt;str&lt;/code&gt; is
            &lt;code&gt;null&lt;/code&gt;.</description>
					</attribute>
				</comment>
				<params>
					<param name="str" comment="the substring for which to search." fulltype="java.lang.String" type="String" />
					<param name="fromIndex" comment="the index from which to start the search." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="lastIndexOf" returncomment="if the string argument occurs one or more times as a substring
          within this object, then the index of the first character of
          the last such substring is returned. If it does not occur as
          a substring, &lt;code&gt;-1&lt;/code&gt; is returned." fulltype="int" type="int">
				<comment>
					<description>Returns the index within this string of the rightmost occurrence
 of the specified substring.  The rightmost empty string &quot;&quot; is
 considered to occur at the index value &lt;code&gt;this.length()&lt;/code&gt;.
 The returned index is the largest value &lt;i&gt;k&lt;/i&gt; such that
 &lt;blockquote&gt;&lt;pre&gt;
 this.toString().startsWith(str, k)
 &lt;/pre&gt;&lt;/blockquote&gt;
 is true.</description>
					<attribute name="@param">
						<description>str   the substring to search for.</description>
					</attribute>
					<attribute name="@return">
						<description>if the string argument occurs one or more times as a substring
          within this object, then the index of the first character of
          the last such substring is returned. If it does not occur as
          a substring, &lt;code&gt;-1&lt;/code&gt; is returned.</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.NullPointerException  if &lt;code&gt;str&lt;/code&gt; is
          &lt;code&gt;null&lt;/code&gt;.</description>
					</attribute>
				</comment>
				<params>
					<param name="str" comment="the substring to search for." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="lastIndexOf" returncomment="the index within this sequence of the last occurrence of the
          specified substring." fulltype="int" type="int">
				<comment>
					<description>Returns the index within this string of the last occurrence of the
 specified substring. The integer returned is the largest value &lt;i&gt;k&lt;/i&gt;
 such that:
 &lt;blockquote&gt;&lt;pre&gt;
     k &lt;= Math.min(fromIndex, str.length()) &amp;&amp;
                   this.toString().startsWith(str, k)
 &lt;/pre&gt;&lt;/blockquote&gt;
 If no such value of &lt;i&gt;k&lt;/i&gt; exists, then -1 is returned.</description>
					<attribute name="@param">
						<description>str         the substring to search for.</description>
					</attribute>
					<attribute name="@param">
						<description>fromIndex   the index to start the search from.</description>
					</attribute>
					<attribute name="@return">
						<description>the index within this sequence of the last occurrence of the
          specified substring.</description>
					</attribute>
					<attribute name="@throws">
						<description>java.lang.NullPointerException if &lt;code&gt;str&lt;/code&gt; is
          &lt;code&gt;null&lt;/code&gt;.</description>
					</attribute>
				</comment>
				<params>
					<param name="str" comment="the substring to search for." fulltype="java.lang.String" type="String" />
					<param name="fromIndex" comment="the index to start the search from." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="reverse" returncomment="a reference to this object." fulltype="java.lang.AbstractStringBuilder" type="AbstractStringBuilder">
				<comment>
					<description>Causes this character sequence to be replaced by the reverse of
 the sequence. If there are any surrogate pairs included in the
 sequence, these are treated as single characters for the
 reverse operation. Thus, the order of the high-low surrogates
 is never reversed.

 Let &lt;i&gt;n&lt;/i&gt; be the character length of this character sequence
 (not the length in &lt;code&gt;char&lt;/code&gt; values) just prior to
 execution of the &lt;code&gt;reverse&lt;/code&gt; method. Then the
 character at index &lt;i&gt;k&lt;/i&gt; in the new character sequence is
 equal to the character at index &lt;i&gt;n-k-1&lt;/i&gt; in the old
 character sequence.

 &lt;p&gt;Note that the reverse operation may result in producing
 surrogate pairs that were unpaired low-surrogates and
 high-surrogates before the operation. For example, reversing
 &quot;&amp;#92;uDC00&amp;#92;uD800&quot; produces &quot;&amp;#92;uD800&amp;#92;uDC00&quot; which is
 a valid surrogate pair.</description>
					<attribute name="@return">
						<description>a reference to this object.</description>
					</attribute>
				</comment>
			</method>
			<method abstract="true" visibility="public" name="toString" returncomment="a string representation of this sequence of characters." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a string representing the data in this sequence.
 A new &lt;code&gt;String&lt;/code&gt; object is allocated and initialized to
 contain the character sequence currently represented by this
 object. This &lt;code&gt;String&lt;/code&gt; is then returned. Subsequent
 changes to this sequence do not affect the contents of the
 &lt;code&gt;String&lt;/code&gt;.</description>
					<attribute name="@return">
						<description>a string representation of this sequence of characters.</description>
					</attribute>
				</comment>
			</method>
			<method final="true" visibility="package-private" name="getValue" fulltype="char[]" type="char">
				<comment>
					<description>Needed by &lt;tt&gt;String&lt;/tt&gt; for the contentEquals method.</description>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="RuntimeException" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.RuntimeException" fulltype="java.lang.NegativeArraySizeException" type="NegativeArraySizeException">
		<comment>
			<description>Thrown if an application tries to create an array with negative size.</description>
			<attribute name="@author">
				<description>unascribed</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.0</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="NegativeArraySizeException">
				<comment>
					<description>Constructs a &lt;code&gt;NegativeArraySizeException&lt;/code&gt; with no
 detail message.</description>
				</comment>
			</constructor>
			<constructor visibility="public" name="NegativeArraySizeException">
				<comment>
					<description>Constructs a &lt;code&gt;NegativeArraySizeException&lt;/code&gt; with the
 specified detail message.</description>
					<attribute name="@param">
						<description>s   the detail message.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the detail message." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass superclass="RuntimeException" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.RuntimeException" fulltype="java.lang.UnsupportedOperationException" type="UnsupportedOperationException">
		<comment>
			<description>Thrown to indicate that the requested operation is not supported.&lt;p&gt;

 This class is a member of the
 &lt;a href=&quot;{@docRoot}/../technotes/guides/collections/index.html&quot;&gt;
 Java Collections Framework&lt;/a&gt;.</description>
			<attribute name="@author">
				<description>Josh Bloch</description>
			</attribute>
			<attribute name="@since">
				<description>1.2</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="-1242599979055084673" visibility="package-private" name="serialVersionUID" constexpr="-1242599979055084673L" fulltype="long" type="long" />
		</fields>
		<methods>
			<constructor visibility="public" name="UnsupportedOperationException">
				<comment>
					<description>Constructs an UnsupportedOperationException with no detail message.</description>
				</comment>
			</constructor>
			<constructor visibility="public" name="UnsupportedOperationException">
				<comment>
					<description>Constructs an UnsupportedOperationException with the specified
 detail message.</description>
					<attribute name="@param">
						<description>message the detail message</description>
					</attribute>
				</comment>
				<params>
					<param name="message" comment="the detail message" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="UnsupportedOperationException">
				<comment>
					<description>Constructs a new exception with the specified detail message and
 cause.

 &lt;p&gt;Note that the detail message associated with &lt;code&gt;cause&lt;/code&gt; is
 &lt;i&gt;not&lt;/i&gt; automatically incorporated in this exception&apos;s detail
 message.</description>
					<attribute name="@param">
						<description>message the detail message (which is saved for later retrieval
         by the {@link Throwable#getMessage()} method).</description>
					</attribute>
					<attribute name="@param">
						<description>cause the cause (which is saved for later retrieval by the
         {@link Throwable#getCause()} method).  (A &lt;tt&gt;null&lt;/tt&gt; value
         is permitted, and indicates that the cause is nonexistent or
         unknown.)</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="message" comment="the detail message (which is saved for later retrieval
         by the {@link Throwable#getMessage()} method)." fulltype="java.lang.String" type="String" />
					<param name="cause" comment="the cause (which is saved for later retrieval by the
         {@link Throwable#getCause()} method).  (A &lt;tt&gt;null&lt;/tt&gt; value
         is permitted, and indicates that the cause is nonexistent or
         unknown.)" fulltype="java.lang.Throwable" type="Throwable" />
				</params>
			</constructor>
			<constructor visibility="public" name="UnsupportedOperationException">
				<comment>
					<description>Constructs a new exception with the specified cause and a detail
 message of &lt;tt&gt;(cause==null ? null : cause.toString())&lt;/tt&gt; (which
 typically contains the class and detail message of &lt;tt&gt;cause&lt;/tt&gt;).
 This constructor is useful for exceptions that are little more than
 wrappers for other throwables (for example, {@link
 java.security.PrivilegedActionException}).</description>
					<attribute name="@param">
						<description>cause the cause (which is saved for later retrieval by the
         {@link Throwable#getCause()} method).  (A &lt;tt&gt;null&lt;/tt&gt; value is
         permitted, and indicates that the cause is nonexistent or
         unknown.)</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="cause" comment="the cause (which is saved for later retrieval by the
         {@link Throwable#getCause()} method).  (A &lt;tt&gt;null&lt;/tt&gt; value is
         permitted, and indicates that the cause is nonexistent or
         unknown.)" fulltype="java.lang.Throwable" type="Throwable" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass final="true" superclass="Number" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.Number" fulltype="java.lang.Byte" type="Byte">
		<implements>
			<interface fulltype="java.lang.Comparable" type="Comparable" />
		</implements>
		<comment>
			<description>The {@code Byte} class wraps a value of primitive type {@code byte}
 in an object.  An object of type {@code Byte} contains a single
 field whose type is {@code byte}.

 &lt;p&gt;In addition, this class provides several methods for converting
 a {@code byte} to a {@code String} and a {@code String} to a {@code
 byte}, as well as other constants and methods useful when dealing
 with a {@code byte}.</description>
			<attribute name="@author">
				<description>Nakul Saraiya</description>
			</attribute>
			<attribute name="@author">
				<description>Joseph D. Darcy</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.Number</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.1</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="-128" visibility="public" name="MIN_VALUE" constexpr="-128" fulltype="byte" type="byte">
				<comment>
					<description>A constant holding the minimum value a {@code byte} can
 have, -2&lt;sup&gt;7&lt;/sup&gt;.</description>
				</comment>
			</field>
			<field final="true" static="true" const="127" visibility="public" name="MAX_VALUE" constexpr="127" fulltype="byte" type="byte">
				<comment>
					<description>A constant holding the maximum value a {@code byte} can
 have, 2&lt;sup&gt;7&lt;/sup&gt;-1.</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="TYPE" fulltype="java.lang.Class" type="Class">
				<comment>
					<description>The {@code Class} instance representing the primitive type
 {@code byte}.</description>
				</comment>
			</field>
			<field final="true" visibility="private" name="value" fulltype="byte" type="byte">
				<comment>
					<description>The value of the {@code Byte}.</description>
					<attribute name="@serial" />
				</comment>
			</field>
			<field final="true" static="true" const="8" visibility="public" name="SIZE" constexpr="8" fulltype="int" type="int">
				<comment>
					<description>The number of bits used to represent a {@code byte} value in two&apos;s
 complement binary form.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="-7183698231559129828" visibility="private" name="serialVersionUID" constexpr="-7183698231559129828L" fulltype="long" type="long">
				<comment>
					<description>use serialVersionUID from JDK 1.1. for interoperability</description>
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="public" name="Byte">
				<comment>
					<description>Constructs a newly allocated {@code Byte} object that
 represents the specified {@code byte} value.</description>
					<attribute name="@param">
						<description>value     the value to be represented by the
                  {@code Byte}.</description>
					</attribute>
				</comment>
				<params>
					<param name="value" comment="the value to be represented by the
                  {@code Byte}." fulltype="byte" type="byte" />
				</params>
			</constructor>
			<constructor visibility="public" name="Byte">
				<comment>
					<description>Constructs a newly allocated {@code Byte} object that
 represents the {@code byte} value indicated by the
 {@code String} parameter. The string is converted to a
 {@code byte} value in exactly the manner used by the
 {@code parseByte} method for radix 10.</description>
					<attribute name="@param">
						<description>s         the {@code String} to be converted to a
                  {@code Byte}</description>
					</attribute>
					<attribute name="@throws">
						<description>NumberFormatException If the {@code String}
                  does not contain a parsable {@code byte}.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Byte#parseByte(java.lang.String, int)</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the {@code String} to be converted to a
                  {@code Byte}" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception comment="If the {@code String}
                  does not contain a parsable {@code byte}." fulltype="java.lang.NumberFormatException" type="NumberFormatException" />
				</exceptions>
			</constructor>
			<method static="true" visibility="public" name="toString" returncomment="the string representation of the specified {@code byte}" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a new {@code String} object representing the
 specified {@code byte}. The radix is assumed to be 10.</description>
					<attribute name="@param">
						<description>b the {@code byte} to be converted</description>
					</attribute>
					<attribute name="@return">
						<description>the string representation of the specified {@code byte}</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Integer#toString(int)</description>
					</attribute>
				</comment>
				<params>
					<param name="b" comment="the {@code byte} to be converted" fulltype="byte" type="byte" />
				</params>
			</method>
			<method static="true" visibility="public" name="valueOf" returncomment="a {@code Byte} instance representing {@code b}." fulltype="java.lang.Byte" type="Byte">
				<comment>
					<description>Returns a {@code Byte} instance representing the specified
 {@code byte} value.
 If a new {@code Byte} instance is not required, this method
 should generally be used in preference to the constructor
 {@link #Byte(byte)}, as this method is likely to yield
 significantly better space and time performance by caching
 frequently requested values.</description>
					<attribute name="@param">
						<description>b a byte value.</description>
					</attribute>
					<attribute name="@return">
						<description>a {@code Byte} instance representing {@code b}.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="b" comment="a byte value." fulltype="byte" type="byte" />
				</params>
			</method>
			<method static="true" visibility="public" name="parseByte" returncomment="the {@code byte} value represented by the string
                   argument in the specified radix" fulltype="byte" type="byte">
				<comment>
					<description>Parses the string argument as a signed {@code byte} in the
 radix specified by the second argument. The characters in the
 string must all be digits, of the specified radix (as
 determined by whether {@link java.lang.Character#digit(char,
 int)} returns a nonnegative value) except that the first
 character may be an ASCII minus sign {@code &apos;-&apos;}
 (&lt;code&gt;&apos;&amp;#92;u002D&apos;&lt;/code&gt;) to indicate a negative value.  The
 resulting {@code byte} value is returned.

 &lt;p&gt;An exception of type {@code NumberFormatException} is
 thrown if any of the following situations occurs:
 &lt;ul&gt;
 &lt;li&gt; The first argument is {@code null} or is a string of
 length zero.

 &lt;li&gt; The radix is either smaller than {@link
 java.lang.Character#MIN_RADIX} or larger than {@link
 java.lang.Character#MAX_RADIX}.

 &lt;li&gt; Any character of the string is not a digit of the
 specified radix, except that the first character may be a minus
 sign {@code &apos;-&apos;} (&lt;code&gt;&apos;&amp;#92;u002D&apos;&lt;/code&gt;) provided that the
 string is longer than length 1.

 &lt;li&gt; The value represented by the string is not a value of type
 {@code byte}.
 &lt;/ul&gt;</description>
					<attribute name="@param">
						<description>s         the {@code String} containing the
                  {@code byte}
                  representation to be parsed</description>
					</attribute>
					<attribute name="@param">
						<description>radix     the radix to be used while parsing {@code s}</description>
					</attribute>
					<attribute name="@return">
						<description>the {@code byte} value represented by the string
                   argument in the specified radix</description>
					</attribute>
					<attribute name="@throws">
						<description>NumberFormatException If the string does
                  not contain a parsable {@code byte}.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the {@code String} containing the
                  {@code byte}
                  representation to be parsed" fulltype="java.lang.String" type="String" />
					<param name="radix" comment="the radix to be used while parsing {@code s}" fulltype="int" type="int" />
				</params>
				<exceptions>
					<exception comment="If the string does
                  not contain a parsable {@code byte}." fulltype="java.lang.NumberFormatException" type="NumberFormatException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="parseByte" returncomment="the {@code byte} value represented by the
                  argument in decimal" fulltype="byte" type="byte">
				<comment>
					<description>Parses the string argument as a signed decimal {@code
 byte}. The characters in the string must all be decimal digits,
 except that the first character may be an ASCII minus sign
 {@code &apos;-&apos;} (&lt;code&gt;&apos;&amp;#92;u002D&apos;&lt;/code&gt;) to indicate a negative
 value. The resulting {@code byte} value is returned, exactly as
 if the argument and the radix 10 were given as arguments to the
 {@link #parseByte(java.lang.String, int)} method.</description>
					<attribute name="@param">
						<description>s         a {@code String} containing the
                  {@code byte} representation to be parsed</description>
					</attribute>
					<attribute name="@return">
						<description>the {@code byte} value represented by the
                  argument in decimal</description>
					</attribute>
					<attribute name="@throws">
						<description>NumberFormatException if the string does not
                  contain a parsable {@code byte}.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="a {@code String} containing the
                  {@code byte} representation to be parsed" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception comment="if the string does not
                  contain a parsable {@code byte}." fulltype="java.lang.NumberFormatException" type="NumberFormatException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="valueOf" returncomment="a {@code Byte} object holding the value
                  represented by the string argument in the
                  specified radix." fulltype="java.lang.Byte" type="Byte">
				<comment>
					<description>Returns a {@code Byte} object holding the value
 extracted from the specified {@code String} when parsed
 with the radix given by the second argument. The first argument
 is interpreted as representing a signed {@code byte} in
 the radix specified by the second argument, exactly as if the
 argument were given to the {@link #parseByte(java.lang.String,
 int)} method. The result is a {@code Byte} object that
 represents the {@code byte} value specified by the string.

 &lt;p&gt; In other words, this method returns a {@code Byte} object
 equal to the value of:

 &lt;blockquote&gt;
 {@code new Byte(Byte.parseByte(s, radix))}
 &lt;/blockquote&gt;</description>
					<attribute name="@param">
						<description>s         the string to be parsed</description>
					</attribute>
					<attribute name="@param">
						<description>radix     the radix to be used in interpreting {@code s}</description>
					</attribute>
					<attribute name="@return">
						<description>a {@code Byte} object holding the value
                  represented by the string argument in the
                  specified radix.</description>
					</attribute>
					<attribute name="@throws">
						<description>NumberFormatException If the {@code String} does
                  not contain a parsable {@code byte}.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the string to be parsed" fulltype="java.lang.String" type="String" />
					<param name="radix" comment="the radix to be used in interpreting {@code s}" fulltype="int" type="int" />
				</params>
				<exceptions>
					<exception comment="If the {@code String} does
                  not contain a parsable {@code byte}." fulltype="java.lang.NumberFormatException" type="NumberFormatException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="valueOf" returncomment="a {@code Byte} object holding the value
                  represented by the string argument" fulltype="java.lang.Byte" type="Byte">
				<comment>
					<description>Returns a {@code Byte} object holding the value
 given by the specified {@code String}. The argument is
 interpreted as representing a signed decimal {@code byte},
 exactly as if the argument were given to the {@link
 #parseByte(java.lang.String)} method. The result is a
 {@code Byte} object that represents the {@code byte}
 value specified by the string.

 &lt;p&gt; In other words, this method returns a {@code Byte} object
 equal to the value of:

 &lt;blockquote&gt;
 {@code new Byte(Byte.parseByte(s))}
 &lt;/blockquote&gt;</description>
					<attribute name="@param">
						<description>s         the string to be parsed</description>
					</attribute>
					<attribute name="@return">
						<description>a {@code Byte} object holding the value
                  represented by the string argument</description>
					</attribute>
					<attribute name="@throws">
						<description>NumberFormatException If the {@code String} does
                  not contain a parsable {@code byte}.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the string to be parsed" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception comment="If the {@code String} does
                  not contain a parsable {@code byte}." fulltype="java.lang.NumberFormatException" type="NumberFormatException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="decode" returncomment="a {@code Byte} object holding the {@code byte}
          value represented by {@code nm}" fulltype="java.lang.Byte" type="Byte">
				<comment>
					<description>Decodes a {@code String} into a {@code Byte}.
 Accepts decimal, hexadecimal, and octal numbers given by
 the following grammar:

 &lt;blockquote&gt;
 &lt;dl&gt;
 &lt;dt&gt;&lt;i&gt;DecodableString:&lt;/i&gt;
 &lt;dd&gt;&lt;i&gt;Sign&lt;sub&gt;opt&lt;/sub&gt; DecimalNumeral&lt;/i&gt;
 &lt;dd&gt;&lt;i&gt;Sign&lt;sub&gt;opt&lt;/sub&gt;&lt;/i&gt; {@code 0x} &lt;i&gt;HexDigits&lt;/i&gt;
 &lt;dd&gt;&lt;i&gt;Sign&lt;sub&gt;opt&lt;/sub&gt;&lt;/i&gt; {@code 0X} &lt;i&gt;HexDigits&lt;/i&gt;
 &lt;dd&gt;&lt;i&gt;Sign&lt;sub&gt;opt&lt;/sub&gt;&lt;/i&gt; {@code #} &lt;i&gt;HexDigits&lt;/i&gt;
 &lt;dd&gt;&lt;i&gt;Sign&lt;sub&gt;opt&lt;/sub&gt;&lt;/i&gt; {@code 0} &lt;i&gt;OctalDigits&lt;/i&gt;
 &lt;p&gt;
 &lt;dt&gt;&lt;i&gt;Sign:&lt;/i&gt;
 &lt;dd&gt;{@code -}
 &lt;/dl&gt;
 &lt;/blockquote&gt;

 &lt;i&gt;DecimalNumeral&lt;/i&gt;, &lt;i&gt;HexDigits&lt;/i&gt;, and &lt;i&gt;OctalDigits&lt;/i&gt;
 are defined in &lt;a href=&quot;http://java.sun.com/docs/books/jls/second_edition/html/lexical.doc.html#48282&quot;&gt;&amp;sect;3.10.1&lt;/a&gt;
 of the &lt;a href=&quot;http://java.sun.com/docs/books/jls/html/&quot;&gt;Java
 Language Specification&lt;/a&gt;.

 &lt;p&gt;The sequence of characters following an (optional) negative
 sign and/or radix specifier (&quot;{@code 0x}&quot;, &quot;{@code 0X}&quot;,
 &quot;{@code #}&quot;, or leading zero) is parsed as by the {@code
 Byte.parseByte} method with the indicated radix (10, 16, or 8).
 This sequence of characters must represent a positive value or
 a {@link NumberFormatException} will be thrown.  The result is
 negated if first character of the specified {@code String} is
 the minus sign.  No whitespace characters are permitted in the
 {@code String}.</description>
					<attribute name="@param">
						<description>nm the {@code String} to decode.</description>
					</attribute>
					<attribute name="@return">
						<description>a {@code Byte} object holding the {@code byte}
          value represented by {@code nm}</description>
					</attribute>
					<attribute name="@throws">
						<description>NumberFormatException  if the {@code String} does not
            contain a parsable {@code byte}.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Byte#parseByte(java.lang.String, int)</description>
					</attribute>
				</comment>
				<params>
					<param name="nm" comment="the {@code String} to decode." fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception comment="if the {@code String} does not
            contain a parsable {@code byte}." fulltype="java.lang.NumberFormatException" type="NumberFormatException" />
				</exceptions>
			</method>
			<method visibility="public" name="byteValue" fulltype="byte" type="byte">
				<comment>
					<description>Returns the value of this {@code Byte} as a
 {@code byte}.</description>
				</comment>
			</method>
			<method visibility="public" name="shortValue" fulltype="short" type="short">
				<comment>
					<description>Returns the value of this {@code Byte} as a
 {@code short}.</description>
				</comment>
			</method>
			<method visibility="public" name="intValue" fulltype="int" type="int">
				<comment>
					<description>Returns the value of this {@code Byte} as an
 {@code int}.</description>
				</comment>
			</method>
			<method visibility="public" name="longValue" fulltype="long" type="long">
				<comment>
					<description>Returns the value of this {@code Byte} as a
 {@code long}.</description>
				</comment>
			</method>
			<method visibility="public" name="floatValue" fulltype="float" type="float">
				<comment>
					<description>Returns the value of this {@code Byte} as a
 {@code float}.</description>
				</comment>
			</method>
			<method visibility="public" name="doubleValue" fulltype="double" type="double">
				<comment>
					<description>Returns the value of this {@code Byte} as a
 {@code double}.</description>
				</comment>
			</method>
			<method visibility="public" name="toString" returncomment="a string representation of the value of this object in
          base&amp;nbsp;10." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a {@code String} object representing this
 {@code Byte}&apos;s value.  The value is converted to signed
 decimal representation and returned as a string, exactly as if
 the {@code byte} value were given as an argument to the
 {@link java.lang.Byte#toString(byte)} method.</description>
					<attribute name="@return">
						<description>a string representation of the value of this object in
          base&amp;nbsp;10.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="hashCode" fulltype="int" type="int">
				<comment>
					<description>Returns a hash code for this {@code Byte}.</description>
				</comment>
			</method>
			<method visibility="public" name="equals" returncomment="{@code true} if the objects are the same;
                  {@code false} otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Compares this object to the specified object.  The result is
 {@code true} if and only if the argument is not
 {@code null} and is a {@code Byte} object that
 contains the same {@code byte} value as this object.</description>
					<attribute name="@param">
						<description>obj       the object to compare with</description>
					</attribute>
					<attribute name="@return">
						<description>{@code true} if the objects are the same;
                  {@code false} otherwise.</description>
					</attribute>
				</comment>
				<params>
					<param name="obj" comment="the object to compare with" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="compareTo" returncomment="the value {@code 0} if this {@code Byte} is
          equal to the argument {@code Byte}; a value less than
          {@code 0} if this {@code Byte} is numerically less
          than the argument {@code Byte}; and a value greater than
           {@code 0} if this {@code Byte} is numerically
           greater than the argument {@code Byte} (signed
           comparison)." fulltype="int" type="int">
				<comment>
					<description>Compares two {@code Byte} objects numerically.</description>
					<attribute name="@param">
						<description>anotherByte   the {@code Byte} to be compared.</description>
					</attribute>
					<attribute name="@return">
						<description>the value {@code 0} if this {@code Byte} is
          equal to the argument {@code Byte}; a value less than
          {@code 0} if this {@code Byte} is numerically less
          than the argument {@code Byte}; and a value greater than
           {@code 0} if this {@code Byte} is numerically
           greater than the argument {@code Byte} (signed
           comparison).</description>
					</attribute>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
				<params>
					<param name="anotherByte" comment="the {@code Byte} to be compared." fulltype="java.lang.Byte" type="Byte" />
				</params>
			</method>
		</methods>
		<jelclass superclass="Object" visibility="private" package="java.lang" superclassfulltype="java.lang.Object" fulltype="java.lang.Byte.ByteCache" type="Byte.ByteCache">
			<fields>
				<field final="true" static="true" visibility="package-private" name="cache" fulltype="java.lang.Byte[]" type="Byte" />
			</fields>
			<methods>
				<constructor visibility="private" name="Byte.ByteCache" />
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="Object" visibility="private" package="java.lang" superclassfulltype="java.lang.Object" fulltype="java.lang.Byte.ByteCache" type="Byte.ByteCache">
		<fields>
			<field final="true" static="true" visibility="package-private" name="cache" fulltype="java.lang.Byte[]" type="Byte" />
		</fields>
		<methods>
			<constructor visibility="private" name="Byte.ByteCache" />
		</methods>
	</jelclass>
	<jelclass final="true" superclass="Number" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.Number" fulltype="java.lang.Long" type="Long">
		<implements>
			<interface fulltype="java.lang.Comparable" type="Comparable" />
		</implements>
		<comment>
			<description>The {@code Long} class wraps a value of the primitive type {@code
 long} in an object. An object of type {@code Long} contains a
 single field whose type is {@code long}.

 &lt;p&gt; In addition, this class provides several methods for converting
 a {@code long} to a {@code String} and a {@code String} to a {@code
 long}, as well as other constants and methods useful when dealing
 with a {@code long}.

 &lt;p&gt;Implementation note: The implementations of the &quot;bit twiddling&quot;
 methods (such as {@link #highestOneBit(long) highestOneBit} and
 {@link #numberOfTrailingZeros(long) numberOfTrailingZeros}) are
 based on material from Henry S. Warren, Jr.&apos;s &lt;i&gt;Hacker&apos;s
 Delight&lt;/i&gt;, (Addison Wesley, 2002).</description>
			<attribute name="@author">
				<description>Lee Boynton</description>
			</attribute>
			<attribute name="@author">
				<description>Arthur van Hoff</description>
			</attribute>
			<attribute name="@author">
				<description>Josh Bloch</description>
			</attribute>
			<attribute name="@author">
				<description>Joseph D. Darcy</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.0</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="-9223372036854775808" visibility="public" name="MIN_VALUE" constexpr="-9223372036854775808L" fulltype="long" type="long">
				<comment>
					<description>A constant holding the minimum value a {@code long} can
 have, -2&lt;sup&gt;63&lt;/sup&gt;.</description>
				</comment>
			</field>
			<field final="true" static="true" const="9223372036854775807" visibility="public" name="MAX_VALUE" constexpr="9223372036854775807L" fulltype="long" type="long">
				<comment>
					<description>A constant holding the maximum value a {@code long} can
 have, 2&lt;sup&gt;63&lt;/sup&gt;-1.</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="TYPE" fulltype="java.lang.Class" type="Class">
				<comment>
					<description>The {@code Class} instance representing the primitive type
 {@code long}.</description>
					<attribute name="@since">
						<description>JDK1.1</description>
					</attribute>
				</comment>
			</field>
			<field final="true" visibility="private" name="value" fulltype="long" type="long">
				<comment>
					<description>The value of the {@code Long}.</description>
					<attribute name="@serial" />
				</comment>
			</field>
			<field final="true" static="true" const="64" visibility="public" name="SIZE" constexpr="64" fulltype="int" type="int">
				<comment>
					<description>The number of bits used to represent a {@code long} value in two&apos;s
 complement binary form.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="4290774380558885855" visibility="private" name="serialVersionUID" constexpr="4290774380558885855L" fulltype="long" type="long">
				<comment>
					<description>use serialVersionUID from JDK 1.0.2 for interoperability</description>
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="public" name="Long">
				<comment>
					<description>Constructs a newly allocated {@code Long} object that
 represents the specified {@code long} argument.</description>
					<attribute name="@param">
						<description>value   the value to be represented by the
          {@code Long} object.</description>
					</attribute>
				</comment>
				<params>
					<param name="value" comment="the value to be represented by the
          {@code Long} object." fulltype="long" type="long" />
				</params>
			</constructor>
			<constructor visibility="public" name="Long">
				<comment>
					<description>Constructs a newly allocated {@code Long} object that
 represents the {@code long} value indicated by the
 {@code String} parameter. The string is converted to a
 {@code long} value in exactly the manner used by the
 {@code parseLong} method for radix 10.</description>
					<attribute name="@param">
						<description>s   the {@code String} to be converted to a
             {@code Long}.</description>
					</attribute>
					<attribute name="@throws">
						<description>NumberFormatException  if the {@code String} does not
             contain a parsable {@code long}.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Long#parseLong(java.lang.String, int)</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the {@code String} to be converted to a
             {@code Long}." fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception comment="if the {@code String} does not
             contain a parsable {@code long}." fulltype="java.lang.NumberFormatException" type="NumberFormatException" />
				</exceptions>
			</constructor>
			<method static="true" visibility="public" name="toString" returncomment="a string representation of the argument in the specified radix." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a string representation of the first argument in the
 radix specified by the second argument.

 &lt;p&gt;If the radix is smaller than {@code Character.MIN_RADIX}
 or larger than {@code Character.MAX_RADIX}, then the radix
 {@code 10} is used instead.

 &lt;p&gt;If the first argument is negative, the first element of the
 result is the ASCII minus sign {@code &apos;-&apos;}
 (&lt;code&gt;&apos;&amp;#92;u002d&apos;&lt;/code&gt;). If the first argument is not
 negative, no sign character appears in the result.

 &lt;p&gt;The remaining characters of the result represent the magnitude
 of the first argument. If the magnitude is zero, it is
 represented by a single zero character {@code &apos;0&apos;}
 (&lt;code&gt;&apos;&amp;#92;u0030&apos;&lt;/code&gt;); otherwise, the first character of
 the representation of the magnitude will not be the zero
 character.  The following ASCII characters are used as digits:

 &lt;blockquote&gt;
   {@code 0123456789abcdefghijklmnopqrstuvwxyz}
 &lt;/blockquote&gt;

 These are &lt;code&gt;&apos;&amp;#92;u0030&apos;&lt;/code&gt; through
 &lt;code&gt;&apos;&amp;#92;u0039&apos;&lt;/code&gt; and &lt;code&gt;&apos;&amp;#92;u0061&apos;&lt;/code&gt; through
 &lt;code&gt;&apos;&amp;#92;u007a&apos;&lt;/code&gt;. If {@code radix} is
 &lt;var&gt;N&lt;/var&gt;, then the first &lt;var&gt;N&lt;/var&gt; of these characters
 are used as radix-&lt;var&gt;N&lt;/var&gt; digits in the order shown. Thus,
 the digits for hexadecimal (radix 16) are
 {@code 0123456789abcdef}. If uppercase letters are
 desired, the {@link java.lang.String#toUpperCase()} method may
 be called on the result:

 &lt;blockquote&gt;
  {@code Long.toString(n, 16).toUpperCase()}
 &lt;/blockquote&gt;</description>
					<attribute name="@param">
						<description>i       a {@code long} to be converted to a string.</description>
					</attribute>
					<attribute name="@param">
						<description>radix   the radix to use in the string representation.</description>
					</attribute>
					<attribute name="@return">
						<description>a string representation of the argument in the specified radix.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#MAX_RADIX</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#MIN_RADIX</description>
					</attribute>
				</comment>
				<params>
					<param name="i" comment="a {@code long} to be converted to a string." fulltype="long" type="long" />
					<param name="radix" comment="the radix to use in the string representation." fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="toHexString" returncomment="the string representation of the unsigned {@code long}
          value represented by the argument in hexadecimal
          (base&amp;nbsp;16)." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a string representation of the {@code long}
 argument as an unsigned integer in base&amp;nbsp;16.

 &lt;p&gt;The unsigned {@code long} value is the argument plus
 2&lt;sup&gt;64&lt;/sup&gt; if the argument is negative; otherwise, it is
 equal to the argument.  This value is converted to a string of
 ASCII digits in hexadecimal (base&amp;nbsp;16) with no extra
 leading {@code 0}s.  If the unsigned magnitude is zero, it
 is represented by a single zero character {@code &apos;0&apos;}
 (&lt;code&gt;&apos;&amp;#92;u0030&apos;&lt;/code&gt;); otherwise, the first character of
 the representation of the unsigned magnitude will not be the
 zero character. The following characters are used as
 hexadecimal digits:

 &lt;blockquote&gt;
  {@code 0123456789abcdef}
 &lt;/blockquote&gt;

 These are the characters &lt;code&gt;&apos;&amp;#92;u0030&apos;&lt;/code&gt; through
 &lt;code&gt;&apos;&amp;#92;u0039&apos;&lt;/code&gt; and  &lt;code&gt;&apos;&amp;#92;u0061&apos;&lt;/code&gt; through
 &lt;code&gt;&apos;&amp;#92;u0066&apos;&lt;/code&gt;.  If uppercase letters are desired,
 the {@link java.lang.String#toUpperCase()} method may be called
 on the result:

 &lt;blockquote&gt;
  {@code Long.toHexString(n).toUpperCase()}
 &lt;/blockquote&gt;</description>
					<attribute name="@param">
						<description>i   a {@code long} to be converted to a string.</description>
					</attribute>
					<attribute name="@return">
						<description>the string representation of the unsigned {@code long}
          value represented by the argument in hexadecimal
          (base&amp;nbsp;16).</description>
					</attribute>
					<attribute name="@since">
						<description>JDK 1.0.2</description>
					</attribute>
				</comment>
				<params>
					<param name="i" comment="a {@code long} to be converted to a string." fulltype="long" type="long" />
				</params>
			</method>
			<method static="true" visibility="public" name="toOctalString" returncomment="the string representation of the unsigned {@code long}
          value represented by the argument in octal (base&amp;nbsp;8)." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a string representation of the {@code long}
 argument as an unsigned integer in base&amp;nbsp;8.

 &lt;p&gt;The unsigned {@code long} value is the argument plus
 2&lt;sup&gt;64&lt;/sup&gt; if the argument is negative; otherwise, it is
 equal to the argument.  This value is converted to a string of
 ASCII digits in octal (base&amp;nbsp;8) with no extra leading
 {@code 0}s.

 &lt;p&gt;If the unsigned magnitude is zero, it is represented by a
 single zero character {@code &apos;0&apos;}
 (&lt;code&gt;&apos;&amp;#92;u0030&apos;&lt;/code&gt;); otherwise, the first character of
 the representation of the unsigned magnitude will not be the
 zero character. The following characters are used as octal
 digits:

 &lt;blockquote&gt;
  {@code 01234567}
 &lt;/blockquote&gt;

 These are the characters &lt;code&gt;&apos;&amp;#92;u0030&apos;&lt;/code&gt; through
 &lt;code&gt;&apos;&amp;#92;u0037&apos;&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>i   a {@code long} to be converted to a string.</description>
					</attribute>
					<attribute name="@return">
						<description>the string representation of the unsigned {@code long}
          value represented by the argument in octal (base&amp;nbsp;8).</description>
					</attribute>
					<attribute name="@since">
						<description>JDK 1.0.2</description>
					</attribute>
				</comment>
				<params>
					<param name="i" comment="a {@code long} to be converted to a string." fulltype="long" type="long" />
				</params>
			</method>
			<method static="true" visibility="public" name="toBinaryString" returncomment="the string representation of the unsigned {@code long}
          value represented by the argument in binary (base&amp;nbsp;2)." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a string representation of the {@code long}
 argument as an unsigned integer in base&amp;nbsp;2.

 &lt;p&gt;The unsigned {@code long} value is the argument plus
 2&lt;sup&gt;64&lt;/sup&gt; if the argument is negative; otherwise, it is
 equal to the argument.  This value is converted to a string of
 ASCII digits in binary (base&amp;nbsp;2) with no extra leading
 {@code 0}s.  If the unsigned magnitude is zero, it is
 represented by a single zero character {@code &apos;0&apos;}
 (&lt;code&gt;&apos;&amp;#92;u0030&apos;&lt;/code&gt;); otherwise, the first character of
 the representation of the unsigned magnitude will not be the
 zero character. The characters {@code &apos;0&apos;}
 (&lt;code&gt;&apos;&amp;#92;u0030&apos;&lt;/code&gt;) and {@code &apos;1&apos;}
 (&lt;code&gt;&apos;&amp;#92;u0031&apos;&lt;/code&gt;) are used as binary digits.</description>
					<attribute name="@param">
						<description>i   a {@code long} to be converted to a string.</description>
					</attribute>
					<attribute name="@return">
						<description>the string representation of the unsigned {@code long}
          value represented by the argument in binary (base&amp;nbsp;2).</description>
					</attribute>
					<attribute name="@since">
						<description>JDK 1.0.2</description>
					</attribute>
				</comment>
				<params>
					<param name="i" comment="a {@code long} to be converted to a string." fulltype="long" type="long" />
				</params>
			</method>
			<method static="true" visibility="private" name="toUnsignedString" fulltype="java.lang.String" type="String">
				<comment>
					<description>Convert the integer to an unsigned number.</description>
				</comment>
				<params>
					<param name="i" fulltype="long" type="long" />
					<param name="shift" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="toString" returncomment="a string representation of the argument in base&amp;nbsp;10." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a {@code String} object representing the specified
 {@code long}.  The argument is converted to signed decimal
 representation and returned as a string, exactly as if the
 argument and the radix 10 were given as arguments to the {@link
 #toString(long, int)} method.</description>
					<attribute name="@param">
						<description>i   a {@code long} to be converted.</description>
					</attribute>
					<attribute name="@return">
						<description>a string representation of the argument in base&amp;nbsp;10.</description>
					</attribute>
				</comment>
				<params>
					<param name="i" comment="a {@code long} to be converted." fulltype="long" type="long" />
				</params>
			</method>
			<method static="true" visibility="package-private" name="getChars" fulltype="void" type="void">
				<comment>
					<description>Places characters representing the integer i into the
 character array buf. The characters are placed into
 the buffer backwards starting with the least significant
 digit at the specified index (exclusive), and working
 backwards from there.

 Will fail if i == Long.MIN_VALUE</description>
				</comment>
				<params>
					<param name="i" fulltype="long" type="long" />
					<param name="index" fulltype="int" type="int" />
					<param name="buf" fulltype="char[]" type="char" />
				</params>
			</method>
			<method static="true" visibility="package-private" name="stringSize" fulltype="int" type="int">
				<params>
					<param name="x" fulltype="long" type="long" />
				</params>
			</method>
			<method static="true" visibility="public" name="parseLong" returncomment="the {@code long} represented by the string argument in
             the specified radix." fulltype="long" type="long">
				<comment>
					<description>Parses the string argument as a signed {@code long} in the
 radix specified by the second argument. The characters in the
 string must all be digits of the specified radix (as determined
 by whether {@link java.lang.Character#digit(char, int)} returns
 a nonnegative value), except that the first character may be an
 ASCII minus sign {@code &apos;-&apos;} (&lt;code&gt;&apos;&amp;#92;u002D&apos;&lt;/code&gt;) to
 indicate a negative value. The resulting {@code long} value is
 returned.

 &lt;p&gt;Note that neither the character {@code L}
 (&lt;code&gt;&apos;&amp;#92;u004C&apos;&lt;/code&gt;) nor {@code l}
 (&lt;code&gt;&apos;&amp;#92;u006C&apos;&lt;/code&gt;) is permitted to appear at the end
 of the string as a type indicator, as would be permitted in
 Java programming language source code - except that either
 {@code L} or {@code l} may appear as a digit for a
 radix greater than 22.

 &lt;p&gt;An exception of type {@code NumberFormatException} is
 thrown if any of the following situations occurs:
 &lt;ul&gt;

 &lt;li&gt;The first argument is {@code null} or is a string of
 length zero.

 &lt;li&gt;The {@code radix} is either smaller than {@link
 java.lang.Character#MIN_RADIX} or larger than {@link
 java.lang.Character#MAX_RADIX}.

 &lt;li&gt;Any character of the string is not a digit of the specified
 radix, except that the first character may be a minus sign
 {@code &apos;-&apos;} (&lt;code&gt;&apos;&amp;#92;u002d&apos;&lt;/code&gt;) provided that the
 string is longer than length 1.

 &lt;li&gt;The value represented by the string is not a value of type
      {@code long}.
 &lt;/ul&gt;

 &lt;p&gt;Examples:
 &lt;blockquote&gt;&lt;pre&gt;
 parseLong(&quot;0&quot;, 10) returns 0L
 parseLong(&quot;473&quot;, 10) returns 473L
 parseLong(&quot;-0&quot;, 10) returns 0L
 parseLong(&quot;-FF&quot;, 16) returns -255L
 parseLong(&quot;1100110&quot;, 2) returns 102L
 parseLong(&quot;99&quot;, 8) throws a NumberFormatException
 parseLong(&quot;Hazelnut&quot;, 10) throws a NumberFormatException
 parseLong(&quot;Hazelnut&quot;, 36) returns 1356099454469L
 &lt;/pre&gt;&lt;/blockquote&gt;</description>
					<attribute name="@param">
						<description>s       the {@code String} containing the
                     {@code long} representation to be parsed.</description>
					</attribute>
					<attribute name="@param">
						<description>radix   the radix to be used while parsing {@code s}.</description>
					</attribute>
					<attribute name="@return">
						<description>the {@code long} represented by the string argument in
             the specified radix.</description>
					</attribute>
					<attribute name="@throws">
						<description>NumberFormatException  if the string does not contain a
             parsable {@code long}.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the {@code String} containing the
                     {@code long} representation to be parsed." fulltype="java.lang.String" type="String" />
					<param name="radix" comment="the radix to be used while parsing {@code s}." fulltype="int" type="int" />
				</params>
				<exceptions>
					<exception comment="if the string does not contain a
             parsable {@code long}." fulltype="java.lang.NumberFormatException" type="NumberFormatException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="parseLong" returncomment="the {@code long} represented by the argument in
             decimal." fulltype="long" type="long">
				<comment>
					<description>Parses the string argument as a signed decimal {@code long}.
 The characters in the string must all be decimal digits, except
 that the first character may be an ASCII minus sign {@code &apos;-&apos;}
 (&lt;code&gt;&amp;#92;u002D&apos;&lt;/code&gt;) to indicate a negative value.  The
 resulting {@code long} value is returned, exactly as if the
 argument and the radix {@code 10} were given as arguments to
 the {@link #parseLong(java.lang.String, int)} method.

 &lt;p&gt;Note that neither the character {@code L}
 (&lt;code&gt;&apos;&amp;#92;u004C&apos;&lt;/code&gt;) nor {@code l}
 (&lt;code&gt;&apos;&amp;#92;u006C&apos;&lt;/code&gt;) is permitted to appear at the end
 of the string as a type indicator, as would be permitted in
 Java programming language source code.</description>
					<attribute name="@param">
						<description>s   a {@code String} containing the {@code long}
             representation to be parsed</description>
					</attribute>
					<attribute name="@return">
						<description>the {@code long} represented by the argument in
             decimal.</description>
					</attribute>
					<attribute name="@throws">
						<description>NumberFormatException  if the string does not contain a
             parsable {@code long}.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="a {@code String} containing the {@code long}
             representation to be parsed" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception comment="if the string does not contain a
             parsable {@code long}." fulltype="java.lang.NumberFormatException" type="NumberFormatException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="valueOf" returncomment="a {@code Long} object holding the value
             represented by the string argument in the specified
             radix." fulltype="java.lang.Long" type="Long">
				<comment>
					<description>Returns a {@code Long} object holding the value
 extracted from the specified {@code String} when parsed
 with the radix given by the second argument.  The first
 argument is interpreted as representing a signed
 {@code long} in the radix specified by the second
 argument, exactly as if the arguments were given to the {@link
 #parseLong(java.lang.String, int)} method. The result is a
 {@code Long} object that represents the {@code long}
 value specified by the string.

 &lt;p&gt;In other words, this method returns a {@code Long} object equal
 to the value of:

 &lt;blockquote&gt;
  {@code new Long(Long.parseLong(s, radix))}
 &lt;/blockquote&gt;</description>
					<attribute name="@param">
						<description>s       the string to be parsed</description>
					</attribute>
					<attribute name="@param">
						<description>radix   the radix to be used in interpreting {@code s}</description>
					</attribute>
					<attribute name="@return">
						<description>a {@code Long} object holding the value
             represented by the string argument in the specified
             radix.</description>
					</attribute>
					<attribute name="@throws">
						<description>NumberFormatException  If the {@code String} does not
             contain a parsable {@code long}.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the string to be parsed" fulltype="java.lang.String" type="String" />
					<param name="radix" comment="the radix to be used in interpreting {@code s}" fulltype="int" type="int" />
				</params>
				<exceptions>
					<exception comment="If the {@code String} does not
             contain a parsable {@code long}." fulltype="java.lang.NumberFormatException" type="NumberFormatException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="valueOf" returncomment="a {@code Long} object holding the value
             represented by the string argument." fulltype="java.lang.Long" type="Long">
				<comment>
					<description>Returns a {@code Long} object holding the value
 of the specified {@code String}. The argument is
 interpreted as representing a signed decimal {@code long},
 exactly as if the argument were given to the {@link
 #parseLong(java.lang.String)} method. The result is a
 {@code Long} object that represents the integer value
 specified by the string.

 &lt;p&gt;In other words, this method returns a {@code Long} object
 equal to the value of:

 &lt;blockquote&gt;
  {@code new Long(Long.parseLong(s))}
 &lt;/blockquote&gt;</description>
					<attribute name="@param">
						<description>s   the string to be parsed.</description>
					</attribute>
					<attribute name="@return">
						<description>a {@code Long} object holding the value
             represented by the string argument.</description>
					</attribute>
					<attribute name="@throws">
						<description>NumberFormatException  If the string cannot be parsed
             as a {@code long}.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the string to be parsed." fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception comment="If the string cannot be parsed
             as a {@code long}." fulltype="java.lang.NumberFormatException" type="NumberFormatException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="valueOf" returncomment="a {@code Long} instance representing {@code l}." fulltype="java.lang.Long" type="Long">
				<comment>
					<description>Returns a {@code Long} instance representing the specified
 {@code long} value.
 If a new {@code Long} instance is not required, this method
 should generally be used in preference to the constructor
 {@link #Long(long)}, as this method is likely to yield
 significantly better space and time performance by caching
 frequently requested values.</description>
					<attribute name="@param">
						<description>l a long value.</description>
					</attribute>
					<attribute name="@return">
						<description>a {@code Long} instance representing {@code l}.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="l" comment="a long value." fulltype="long" type="long" />
				</params>
			</method>
			<method static="true" visibility="public" name="decode" returncomment="a {@code Long} object holding the {@code long}
            value represented by {@code nm}" fulltype="java.lang.Long" type="Long">
				<comment>
					<description>Decodes a {@code String} into a {@code Long}.
 Accepts decimal, hexadecimal, and octal numbers given by the
 following grammar:

 &lt;blockquote&gt;
 &lt;dl&gt;
 &lt;dt&gt;&lt;i&gt;DecodableString:&lt;/i&gt;
 &lt;dd&gt;&lt;i&gt;Sign&lt;sub&gt;opt&lt;/sub&gt; DecimalNumeral&lt;/i&gt;
 &lt;dd&gt;&lt;i&gt;Sign&lt;sub&gt;opt&lt;/sub&gt;&lt;/i&gt; {@code 0x} &lt;i&gt;HexDigits&lt;/i&gt;
 &lt;dd&gt;&lt;i&gt;Sign&lt;sub&gt;opt&lt;/sub&gt;&lt;/i&gt; {@code 0X} &lt;i&gt;HexDigits&lt;/i&gt;
 &lt;dd&gt;&lt;i&gt;Sign&lt;sub&gt;opt&lt;/sub&gt;&lt;/i&gt; {@code #} &lt;i&gt;HexDigits&lt;/i&gt;
 &lt;dd&gt;&lt;i&gt;Sign&lt;sub&gt;opt&lt;/sub&gt;&lt;/i&gt; {@code 0} &lt;i&gt;OctalDigits&lt;/i&gt;
 &lt;p&gt;
 &lt;dt&gt;&lt;i&gt;Sign:&lt;/i&gt;
 &lt;dd&gt;{@code -}
 &lt;/dl&gt;
 &lt;/blockquote&gt;

 &lt;i&gt;DecimalNumeral&lt;/i&gt;, &lt;i&gt;HexDigits&lt;/i&gt;, and &lt;i&gt;OctalDigits&lt;/i&gt;
 are defined in &lt;a href=&quot;http://java.sun.com/docs/books/jls/second_edition/html/lexical.doc.html#48282&quot;&gt;&amp;sect;3.10.1&lt;/a&gt;
 of the &lt;a href=&quot;http://java.sun.com/docs/books/jls/html/&quot;&gt;Java
 Language Specification&lt;/a&gt;.

 &lt;p&gt;The sequence of characters following an (optional) negative
 sign and/or radix specifier (&quot;{@code 0x}&quot;, &quot;{@code 0X}&quot;,
 &quot;{@code #}&quot;, or leading zero) is parsed as by the {@code
 Long.parseLong} method with the indicated radix (10, 16, or 8).
 This sequence of characters must represent a positive value or
 a {@link NumberFormatException} will be thrown.  The result is
 negated if first character of the specified {@code String} is
 the minus sign.  No whitespace characters are permitted in the
 {@code String}.</description>
					<attribute name="@param">
						<description>nm the {@code String} to decode.</description>
					</attribute>
					<attribute name="@return">
						<description>a {@code Long} object holding the {@code long}
            value represented by {@code nm}</description>
					</attribute>
					<attribute name="@throws">
						<description>NumberFormatException  if the {@code String} does not
            contain a parsable {@code long}.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Long#parseLong(String, int)</description>
					</attribute>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
				<params>
					<param name="nm" comment="the {@code String} to decode." fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception comment="if the {@code String} does not
            contain a parsable {@code long}." fulltype="java.lang.NumberFormatException" type="NumberFormatException" />
				</exceptions>
			</method>
			<method visibility="public" name="byteValue" fulltype="byte" type="byte">
				<comment>
					<description>Returns the value of this {@code Long} as a
 {@code byte}.</description>
				</comment>
			</method>
			<method visibility="public" name="shortValue" fulltype="short" type="short">
				<comment>
					<description>Returns the value of this {@code Long} as a
 {@code short}.</description>
				</comment>
			</method>
			<method visibility="public" name="intValue" fulltype="int" type="int">
				<comment>
					<description>Returns the value of this {@code Long} as an
 {@code int}.</description>
				</comment>
			</method>
			<method visibility="public" name="longValue" fulltype="long" type="long">
				<comment>
					<description>Returns the value of this {@code Long} as a
 {@code long} value.</description>
				</comment>
			</method>
			<method visibility="public" name="floatValue" fulltype="float" type="float">
				<comment>
					<description>Returns the value of this {@code Long} as a
 {@code float}.</description>
				</comment>
			</method>
			<method visibility="public" name="doubleValue" fulltype="double" type="double">
				<comment>
					<description>Returns the value of this {@code Long} as a
 {@code double}.</description>
				</comment>
			</method>
			<method visibility="public" name="toString" returncomment="a string representation of the value of this object in
          base&amp;nbsp;10." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a {@code String} object representing this
 {@code Long}&apos;s value.  The value is converted to signed
 decimal representation and returned as a string, exactly as if
 the {@code long} value were given as an argument to the
 {@link java.lang.Long#toString(long)} method.</description>
					<attribute name="@return">
						<description>a string representation of the value of this object in
          base&amp;nbsp;10.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="hashCode" returncomment="a hash code value for this object." fulltype="int" type="int">
				<comment>
					<description>Returns a hash code for this {@code Long}. The result is
 the exclusive OR of the two halves of the primitive
 {@code long} value held by this {@code Long}
 object. That is, the hashcode is the value of the expression:

 &lt;blockquote&gt;
  {@code (int)(this.longValue()^(this.longValue()&gt;&gt;&gt;32))}
 &lt;/blockquote&gt;</description>
					<attribute name="@return">
						<description>a hash code value for this object.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="equals" returncomment="{@code true} if the objects are the same;
          {@code false} otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Compares this object to the specified object.  The result is
 {@code true} if and only if the argument is not
 {@code null} and is a {@code Long} object that
 contains the same {@code long} value as this object.</description>
					<attribute name="@param">
						<description>obj   the object to compare with.</description>
					</attribute>
					<attribute name="@return">
						<description>{@code true} if the objects are the same;
          {@code false} otherwise.</description>
					</attribute>
				</comment>
				<params>
					<param name="obj" comment="the object to compare with." fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method static="true" visibility="public" name="getLong" returncomment="the {@code Long} value of the property." fulltype="java.lang.Long" type="Long">
				<comment>
					<description>Determines the {@code long} value of the system property
 with the specified name.

 &lt;p&gt;The first argument is treated as the name of a system property.
 System properties are accessible through the {@link
 java.lang.System#getProperty(java.lang.String)} method. The
 string value of this property is then interpreted as a
 {@code long} value and a {@code Long} object
 representing this value is returned.  Details of possible
 numeric formats can be found with the definition of
 {@code getProperty}.

 &lt;p&gt;If there is no property with the specified name, if the
 specified name is empty or {@code null}, or if the
 property does not have the correct numeric format, then
 {@code null} is returned.

 &lt;p&gt;In other words, this method returns a {@code Long} object equal to
 the value of:

 &lt;blockquote&gt;
  {@code getLong(nm, null)}
 &lt;/blockquote&gt;</description>
					<attribute name="@param">
						<description>nm   property name.</description>
					</attribute>
					<attribute name="@return">
						<description>the {@code Long} value of the property.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.System#getProperty(java.lang.String)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.System#getProperty(java.lang.String, java.lang.String)</description>
					</attribute>
				</comment>
				<params>
					<param name="nm" comment="property name." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getLong" returncomment="the {@code Long} value of the property." fulltype="java.lang.Long" type="Long">
				<comment>
					<description>Determines the {@code long} value of the system property
 with the specified name.

 &lt;p&gt;The first argument is treated as the name of a system property.
 System properties are accessible through the {@link
 java.lang.System#getProperty(java.lang.String)} method. The
 string value of this property is then interpreted as a
 {@code long} value and a {@code Long} object
 representing this value is returned.  Details of possible
 numeric formats can be found with the definition of
 {@code getProperty}.

 &lt;p&gt;The second argument is the default value. A {@code Long} object
 that represents the value of the second argument is returned if there
 is no property of the specified name, if the property does not have
 the correct numeric format, or if the specified name is empty or null.

 &lt;p&gt;In other words, this method returns a {@code Long} object equal
 to the value of:

 &lt;blockquote&gt;
  {@code getLong(nm, new Long(val))}
 &lt;/blockquote&gt;

 but in practice it may be implemented in a manner such as:

 &lt;blockquote&gt;&lt;pre&gt;
 Long result = getLong(nm, null);
 return (result == null) ? new Long(val) : result;
 &lt;/pre&gt;&lt;/blockquote&gt;

 to avoid the unnecessary allocation of a {@code Long} object when
 the default value is not needed.</description>
					<attribute name="@param">
						<description>nm    property name.</description>
					</attribute>
					<attribute name="@param">
						<description>val   default value.</description>
					</attribute>
					<attribute name="@return">
						<description>the {@code Long} value of the property.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.System#getProperty(java.lang.String)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.System#getProperty(java.lang.String, java.lang.String)</description>
					</attribute>
				</comment>
				<params>
					<param name="nm" comment="property name." fulltype="java.lang.String" type="String" />
					<param name="val" comment="default value." fulltype="long" type="long" />
				</params>
			</method>
			<method static="true" visibility="public" name="getLong" returncomment="the {@code Long} value of the property." fulltype="java.lang.Long" type="Long">
				<comment>
					<description>Returns the {@code long} value of the system property with
 the specified name.  The first argument is treated as the name
 of a system property.  System properties are accessible through
 the {@link java.lang.System#getProperty(java.lang.String)}
 method. The string value of this property is then interpreted
 as a {@code long} value, as per the
 {@code Long.decode} method, and a {@code Long} object
 representing this value is returned.

 &lt;ul&gt;
 &lt;li&gt;If the property value begins with the two ASCII characters
 {@code 0x} or the ASCII character {@code #}, not followed by
 a minus sign, then the rest of it is parsed as a hexadecimal integer
 exactly as for the method {@link #valueOf(java.lang.String, int)}
 with radix 16.
 &lt;li&gt;If the property value begins with the ASCII character
 {@code 0} followed by another character, it is parsed as
 an octal integer exactly as by the method {@link
 #valueOf(java.lang.String, int)} with radix 8.
 &lt;li&gt;Otherwise the property value is parsed as a decimal
 integer exactly as by the method
 {@link #valueOf(java.lang.String, int)} with radix 10.
 &lt;/ul&gt;

 &lt;p&gt;Note that, in every case, neither {@code L}
 (&lt;code&gt;&apos;&amp;#92;u004C&apos;&lt;/code&gt;) nor {@code l}
 (&lt;code&gt;&apos;&amp;#92;u006C&apos;&lt;/code&gt;) is permitted to appear at the end
 of the property value as a type indicator, as would be
 permitted in Java programming language source code.

 &lt;p&gt;The second argument is the default value. The default value is
 returned if there is no property of the specified name, if the
 property does not have the correct numeric format, or if the
 specified name is empty or {@code null}.</description>
					<attribute name="@param">
						<description>nm   property name.</description>
					</attribute>
					<attribute name="@param">
						<description>val   default value.</description>
					</attribute>
					<attribute name="@return">
						<description>the {@code Long} value of the property.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.System#getProperty(java.lang.String)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.System#getProperty(java.lang.String, java.lang.String)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Long#decode</description>
					</attribute>
				</comment>
				<params>
					<param name="nm" comment="property name." fulltype="java.lang.String" type="String" />
					<param name="val" comment="default value." fulltype="java.lang.Long" type="Long" />
				</params>
			</method>
			<method visibility="public" name="compareTo" returncomment="the value {@code 0} if this {@code Long} is
          equal to the argument {@code Long}; a value less than
          {@code 0} if this {@code Long} is numerically less
          than the argument {@code Long}; and a value greater
          than {@code 0} if this {@code Long} is numerically
           greater than the argument {@code Long} (signed
           comparison)." fulltype="int" type="int">
				<comment>
					<description>Compares two {@code Long} objects numerically.</description>
					<attribute name="@param">
						<description>anotherLong   the {@code Long} to be compared.</description>
					</attribute>
					<attribute name="@return">
						<description>the value {@code 0} if this {@code Long} is
          equal to the argument {@code Long}; a value less than
          {@code 0} if this {@code Long} is numerically less
          than the argument {@code Long}; and a value greater
          than {@code 0} if this {@code Long} is numerically
           greater than the argument {@code Long} (signed
           comparison).</description>
					</attribute>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
				<params>
					<param name="anotherLong" comment="the {@code Long} to be compared." fulltype="java.lang.Long" type="Long" />
				</params>
			</method>
			<method static="true" visibility="public" name="highestOneBit" returncomment="a {@code long} value with a single one-bit, in the position
     of the highest-order one-bit in the specified value, or zero if
     the specified value is itself equal to zero." fulltype="long" type="long">
				<comment>
					<description>Returns a {@code long} value with at most a single one-bit, in the
 position of the highest-order (&quot;leftmost&quot;) one-bit in the specified
 {@code long} value.  Returns zero if the specified value has no
 one-bits in its two&apos;s complement binary representation, that is, if it
 is equal to zero.</description>
					<attribute name="@return">
						<description>a {@code long} value with a single one-bit, in the position
     of the highest-order one-bit in the specified value, or zero if
     the specified value is itself equal to zero.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="i" fulltype="long" type="long" />
				</params>
			</method>
			<method static="true" visibility="public" name="lowestOneBit" returncomment="a {@code long} value with a single one-bit, in the position
     of the lowest-order one-bit in the specified value, or zero if
     the specified value is itself equal to zero." fulltype="long" type="long">
				<comment>
					<description>Returns a {@code long} value with at most a single one-bit, in the
 position of the lowest-order (&quot;rightmost&quot;) one-bit in the specified
 {@code long} value.  Returns zero if the specified value has no
 one-bits in its two&apos;s complement binary representation, that is, if it
 is equal to zero.</description>
					<attribute name="@return">
						<description>a {@code long} value with a single one-bit, in the position
     of the lowest-order one-bit in the specified value, or zero if
     the specified value is itself equal to zero.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="i" fulltype="long" type="long" />
				</params>
			</method>
			<method static="true" visibility="public" name="numberOfLeadingZeros" returncomment="the number of zero bits preceding the highest-order
     (&quot;leftmost&quot;) one-bit in the two&apos;s complement binary representation
     of the specified {@code long} value, or 64 if the value
     is equal to zero." fulltype="int" type="int">
				<comment>
					<description>Returns the number of zero bits preceding the highest-order
 (&quot;leftmost&quot;) one-bit in the two&apos;s complement binary representation
 of the specified {@code long} value.  Returns 64 if the
 specified value has no one-bits in its two&apos;s complement representation,
 in other words if it is equal to zero.

 &lt;p&gt;Note that this method is closely related to the logarithm base 2.
 For all positive {@code long} values x:
 &lt;ul&gt;
 &lt;li&gt;floor(log&lt;sub&gt;2&lt;/sub&gt;(x)) = {@code 63 - numberOfLeadingZeros(x)}
 &lt;li&gt;ceil(log&lt;sub&gt;2&lt;/sub&gt;(x)) = {@code 64 - numberOfLeadingZeros(x - 1)}
 &lt;/ul&gt;</description>
					<attribute name="@return">
						<description>the number of zero bits preceding the highest-order
     (&quot;leftmost&quot;) one-bit in the two&apos;s complement binary representation
     of the specified {@code long} value, or 64 if the value
     is equal to zero.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="i" fulltype="long" type="long" />
				</params>
			</method>
			<method static="true" visibility="public" name="numberOfTrailingZeros" returncomment="the number of zero bits following the lowest-order (&quot;rightmost&quot;)
     one-bit in the two&apos;s complement binary representation of the
     specified {@code long} value, or 64 if the value is equal
     to zero." fulltype="int" type="int">
				<comment>
					<description>Returns the number of zero bits following the lowest-order (&quot;rightmost&quot;)
 one-bit in the two&apos;s complement binary representation of the specified
 {@code long} value.  Returns 64 if the specified value has no
 one-bits in its two&apos;s complement representation, in other words if it is
 equal to zero.</description>
					<attribute name="@return">
						<description>the number of zero bits following the lowest-order (&quot;rightmost&quot;)
     one-bit in the two&apos;s complement binary representation of the
     specified {@code long} value, or 64 if the value is equal
     to zero.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="i" fulltype="long" type="long" />
				</params>
			</method>
			<method static="true" visibility="public" name="bitCount" returncomment="the number of one-bits in the two&apos;s complement binary
     representation of the specified {@code long} value." fulltype="int" type="int">
				<comment>
					<description>Returns the number of one-bits in the two&apos;s complement binary
 representation of the specified {@code long} value.  This function is
 sometimes referred to as the &lt;i&gt;population count&lt;/i&gt;.</description>
					<attribute name="@return">
						<description>the number of one-bits in the two&apos;s complement binary
     representation of the specified {@code long} value.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="i" fulltype="long" type="long" />
				</params>
			</method>
			<method static="true" visibility="public" name="rotateLeft" returncomment="the value obtained by rotating the two&apos;s complement binary
     representation of the specified {@code long} value left by the
     specified number of bits." fulltype="long" type="long">
				<comment>
					<description>Returns the value obtained by rotating the two&apos;s complement binary
 representation of the specified {@code long} value left by the
 specified number of bits.  (Bits shifted out of the left hand, or
 high-order, side reenter on the right, or low-order.)

 &lt;p&gt;Note that left rotation with a negative distance is equivalent to
 right rotation: {@code rotateLeft(val, -distance) == rotateRight(val,
 distance)}.  Note also that rotation by any multiple of 64 is a
 no-op, so all but the last six bits of the rotation distance can be
 ignored, even if the distance is negative: {@code rotateLeft(val,
 distance) == rotateLeft(val, distance &amp; 0x3F)}.</description>
					<attribute name="@return">
						<description>the value obtained by rotating the two&apos;s complement binary
     representation of the specified {@code long} value left by the
     specified number of bits.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="i" fulltype="long" type="long" />
					<param name="distance" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="rotateRight" returncomment="the value obtained by rotating the two&apos;s complement binary
     representation of the specified {@code long} value right by the
     specified number of bits." fulltype="long" type="long">
				<comment>
					<description>Returns the value obtained by rotating the two&apos;s complement binary
 representation of the specified {@code long} value right by the
 specified number of bits.  (Bits shifted out of the right hand, or
 low-order, side reenter on the left, or high-order.)

 &lt;p&gt;Note that right rotation with a negative distance is equivalent to
 left rotation: {@code rotateRight(val, -distance) == rotateLeft(val,
 distance)}.  Note also that rotation by any multiple of 64 is a
 no-op, so all but the last six bits of the rotation distance can be
 ignored, even if the distance is negative: {@code rotateRight(val,
 distance) == rotateRight(val, distance &amp; 0x3F)}.</description>
					<attribute name="@return">
						<description>the value obtained by rotating the two&apos;s complement binary
     representation of the specified {@code long} value right by the
     specified number of bits.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="i" fulltype="long" type="long" />
					<param name="distance" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="reverse" returncomment="the value obtained by reversing order of the bits in the
     specified {@code long} value." fulltype="long" type="long">
				<comment>
					<description>Returns the value obtained by reversing the order of the bits in the
 two&apos;s complement binary representation of the specified {@code long}
 value.</description>
					<attribute name="@return">
						<description>the value obtained by reversing order of the bits in the
     specified {@code long} value.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="i" fulltype="long" type="long" />
				</params>
			</method>
			<method static="true" visibility="public" name="signum" returncomment="the signum function of the specified {@code long} value." fulltype="int" type="int">
				<comment>
					<description>Returns the signum function of the specified {@code long} value.  (The
 return value is -1 if the specified value is negative; 0 if the
 specified value is zero; and 1 if the specified value is positive.)</description>
					<attribute name="@return">
						<description>the signum function of the specified {@code long} value.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="i" fulltype="long" type="long" />
				</params>
			</method>
			<method static="true" visibility="public" name="reverseBytes" returncomment="the value obtained by reversing the bytes in the specified
     {@code long} value." fulltype="long" type="long">
				<comment>
					<description>Returns the value obtained by reversing the order of the bytes in the
 two&apos;s complement representation of the specified {@code long} value.</description>
					<attribute name="@return">
						<description>the value obtained by reversing the bytes in the specified
     {@code long} value.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="i" fulltype="long" type="long" />
				</params>
			</method>
		</methods>
		<jelclass superclass="Object" visibility="private" package="java.lang" superclassfulltype="java.lang.Object" fulltype="java.lang.Long.LongCache" type="Long.LongCache">
			<fields>
				<field final="true" static="true" visibility="package-private" name="cache" fulltype="java.lang.Long[]" type="Long" />
			</fields>
			<methods>
				<constructor visibility="private" name="Long.LongCache" />
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="Object" visibility="private" package="java.lang" superclassfulltype="java.lang.Object" fulltype="java.lang.Long.LongCache" type="Long.LongCache">
		<fields>
			<field final="true" static="true" visibility="package-private" name="cache" fulltype="java.lang.Long[]" type="Long" />
		</fields>
		<methods>
			<constructor visibility="private" name="Long.LongCache" />
		</methods>
	</jelclass>
	<jelclass final="true" superclass="Object" visibility="public" package="java.lang" superclassfulltype="java.lang.Object" fulltype="java.lang.System" type="System">
		<comment>
			<description>The &lt;code&gt;System&lt;/code&gt; class contains several useful class fields
 and methods. It cannot be instantiated.

 &lt;p&gt;Among the facilities provided by the &lt;code&gt;System&lt;/code&gt; class
 are standard input, standard output, and error output streams;
 access to externally defined properties and environment
 variables; a means of loading files and libraries; and a utility
 method for quickly copying a portion of an array.</description>
			<attribute name="@author">
				<description>unascribed</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.0</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" visibility="public" name="in" fulltype="java.io.InputStream" type="InputStream">
				<comment>
					<description>The &quot;standard&quot; input stream. This stream is already
 open and ready to supply input data. Typically this stream
 corresponds to keyboard input or another input source specified by
 the host environment or user.</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="out" fulltype="java.io.PrintStream" type="PrintStream">
				<comment>
					<description>The &quot;standard&quot; output stream. This stream is already
 open and ready to accept output data. Typically this stream
 corresponds to display output or another output destination
 specified by the host environment or user.
 &lt;p&gt;
 For simple stand-alone Java applications, a typical way to write
 a line of output data is:
 &lt;blockquote&gt;&lt;pre&gt;
     System.out.println(data)
 &lt;/pre&gt;&lt;/blockquote&gt;
 &lt;p&gt;
 See the &lt;code&gt;println&lt;/code&gt; methods in class &lt;code&gt;PrintStream&lt;/code&gt;.</description>
					<attribute name="@see">
						<description>java.io.PrintStream#println()</description>
					</attribute>
					<attribute name="@see">
						<description>java.io.PrintStream#println(boolean)</description>
					</attribute>
					<attribute name="@see">
						<description>java.io.PrintStream#println(char)</description>
					</attribute>
					<attribute name="@see">
						<description>java.io.PrintStream#println(char[])</description>
					</attribute>
					<attribute name="@see">
						<description>java.io.PrintStream#println(double)</description>
					</attribute>
					<attribute name="@see">
						<description>java.io.PrintStream#println(float)</description>
					</attribute>
					<attribute name="@see">
						<description>java.io.PrintStream#println(int)</description>
					</attribute>
					<attribute name="@see">
						<description>java.io.PrintStream#println(long)</description>
					</attribute>
					<attribute name="@see">
						<description>java.io.PrintStream#println(java.lang.Object)</description>
					</attribute>
					<attribute name="@see">
						<description>java.io.PrintStream#println(java.lang.String)</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="err" fulltype="java.io.PrintStream" type="PrintStream">
				<comment>
					<description>The &quot;standard&quot; error output stream. This stream is already
 open and ready to accept output data.
 &lt;p&gt;
 Typically this stream corresponds to display output or another
 output destination specified by the host environment or user. By
 convention, this output stream is used to display error messages
 or other information that should come to the immediate attention
 of a user even if the principal output stream, the value of the
 variable &lt;code&gt;out&lt;/code&gt;, has been redirected to a file or other
 destination that is typically not continuously monitored.</description>
				</comment>
			</field>
			<field volatile="true" static="true" visibility="private" name="security" fulltype="java.lang.SecurityManager" type="SecurityManager" />
			<field volatile="true" static="true" visibility="private" name="cons" fulltype="java.io.Console" type="Console" />
			<field static="true" visibility="private" name="props" fulltype="java.util.Properties" type="Properties">
				<comment>
					<description>System properties. The following properties are guaranteed to be defined:
 &lt;dl&gt;
 &lt;dt&gt;java.version         &lt;dd&gt;Java version number
 &lt;dt&gt;java.vendor          &lt;dd&gt;Java vendor specific string
 &lt;dt&gt;java.vendor.url      &lt;dd&gt;Java vendor URL
 &lt;dt&gt;java.home            &lt;dd&gt;Java installation directory
 &lt;dt&gt;java.class.version   &lt;dd&gt;Java class version number
 &lt;dt&gt;java.class.path      &lt;dd&gt;Java classpath
 &lt;dt&gt;os.name              &lt;dd&gt;Operating System Name
 &lt;dt&gt;os.arch              &lt;dd&gt;Operating System Architecture
 &lt;dt&gt;os.version           &lt;dd&gt;Operating System Version
 &lt;dt&gt;file.separator       &lt;dd&gt;File separator (&quot;/&quot; on Unix)
 &lt;dt&gt;path.separator       &lt;dd&gt;Path separator (&quot;:&quot; on Unix)
 &lt;dt&gt;line.separator       &lt;dd&gt;Line separator (&quot;\n&quot; on Unix)
 &lt;dt&gt;user.name            &lt;dd&gt;User account name
 &lt;dt&gt;user.home            &lt;dd&gt;User home directory
 &lt;dt&gt;user.dir             &lt;dd&gt;User&apos;s current working directory
 &lt;/dl&gt;</description>
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="private" name="System">
				<comment>
					<description>Don&apos;t let anyone instantiate this class</description>
				</comment>
			</constructor>
			<method static="true" visibility="private" name="registerNatives" fulltype="void" type="void" />
			<method static="true" visibility="public" name="setIn" fulltype="void" type="void">
				<comment>
					<description>Reassigns the &quot;standard&quot; input stream.

 &lt;p&gt;First, if there is a security manager, its &lt;code&gt;checkPermission&lt;/code&gt;
 method is called with a &lt;code&gt;RuntimePermission(&quot;setIO&quot;)&lt;/code&gt; permission
  to see if it&apos;s ok to reassign the &quot;standard&quot; input stream.
 &lt;p&gt;</description>
					<attribute name="@param">
						<description>in the new standard input stream.</description>
					</attribute>
					<attribute name="@throws">
						<description>SecurityException
        if a security manager exists and its
        &lt;code&gt;checkPermission&lt;/code&gt; method doesn&apos;t allow
        reassigning of the standard input stream.</description>
					</attribute>
					<attribute name="@see">
						<description>SecurityManager#checkPermission</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.RuntimePermission</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.1</description>
					</attribute>
				</comment>
				<params>
					<param name="in" comment="the new standard input stream." fulltype="java.io.InputStream" type="InputStream" />
				</params>
			</method>
			<method static="true" visibility="public" name="setOut" fulltype="void" type="void">
				<comment>
					<description>Reassigns the &quot;standard&quot; output stream.

 &lt;p&gt;First, if there is a security manager, its &lt;code&gt;checkPermission&lt;/code&gt;
 method is called with a &lt;code&gt;RuntimePermission(&quot;setIO&quot;)&lt;/code&gt; permission
  to see if it&apos;s ok to reassign the &quot;standard&quot; output stream.</description>
					<attribute name="@param">
						<description>out the new standard output stream</description>
					</attribute>
					<attribute name="@throws">
						<description>SecurityException
        if a security manager exists and its
        &lt;code&gt;checkPermission&lt;/code&gt; method doesn&apos;t allow
        reassigning of the standard output stream.</description>
					</attribute>
					<attribute name="@see">
						<description>SecurityManager#checkPermission</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.RuntimePermission</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.1</description>
					</attribute>
				</comment>
				<params>
					<param name="out" comment="the new standard output stream" fulltype="java.io.PrintStream" type="PrintStream" />
				</params>
			</method>
			<method static="true" visibility="public" name="setErr" fulltype="void" type="void">
				<comment>
					<description>Reassigns the &quot;standard&quot; error output stream.

 &lt;p&gt;First, if there is a security manager, its &lt;code&gt;checkPermission&lt;/code&gt;
 method is called with a &lt;code&gt;RuntimePermission(&quot;setIO&quot;)&lt;/code&gt; permission
  to see if it&apos;s ok to reassign the &quot;standard&quot; error output stream.</description>
					<attribute name="@param">
						<description>err the new standard error output stream.</description>
					</attribute>
					<attribute name="@throws">
						<description>SecurityException
        if a security manager exists and its
        &lt;code&gt;checkPermission&lt;/code&gt; method doesn&apos;t allow
        reassigning of the standard error output stream.</description>
					</attribute>
					<attribute name="@see">
						<description>SecurityManager#checkPermission</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.RuntimePermission</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.1</description>
					</attribute>
				</comment>
				<params>
					<param name="err" comment="the new standard error output stream." fulltype="java.io.PrintStream" type="PrintStream" />
				</params>
			</method>
			<method static="true" visibility="public" name="console" returncomment="The system console, if any, otherwise &lt;tt&gt;null&lt;/tt&gt;." fulltype="java.io.Console" type="Console">
				<comment>
					<description>Returns the unique {@link java.io.Console Console} object associated
 with the current Java virtual machine, if any.</description>
					<attribute name="@return">
						<description>The system console, if any, otherwise &lt;tt&gt;null&lt;/tt&gt;.</description>
					</attribute>
					<attribute name="@since">
						<description>1.6</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="inheritedChannel" returncomment="The inherited channel, if any, otherwise &lt;tt&gt;null&lt;/tt&gt;." fulltype="java.nio.channels.Channel" type="Channel">
				<comment>
					<description>Returns the channel inherited from the entity that created this
 Java virtual machine.

 &lt;p&gt; This method returns the channel obtained by invoking the
 {@link java.nio.channels.spi.SelectorProvider#inheritedChannel
 inheritedChannel} method of the system-wide default
 {@link java.nio.channels.spi.SelectorProvider} object. &lt;/p&gt;

 &lt;p&gt; In addition to the network-oriented channels described in
 {@link java.nio.channels.spi.SelectorProvider#inheritedChannel
 inheritedChannel}, this method may return other kinds of
 channels in the future.</description>
					<attribute name="@return">
						<description>The inherited channel, if any, otherwise &lt;tt&gt;null&lt;/tt&gt;.</description>
					</attribute>
					<attribute name="@throws">
						<description>IOException
          If an I/O error occurs</description>
					</attribute>
					<attribute name="@throws">
						<description>SecurityException
          If a security manager is present and it does not
          permit access to the channel.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<exceptions>
					<exception comment="If an I/O error occurs" fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method static="true" visibility="private" name="checkIO" fulltype="void" type="void" />
			<method static="true" visibility="private" name="setIn0" fulltype="void" type="void">
				<params>
					<param name="in" fulltype="java.io.InputStream" type="InputStream" />
				</params>
			</method>
			<method static="true" visibility="private" name="setOut0" fulltype="void" type="void">
				<params>
					<param name="out" fulltype="java.io.PrintStream" type="PrintStream" />
				</params>
			</method>
			<method static="true" visibility="private" name="setErr0" fulltype="void" type="void">
				<params>
					<param name="err" fulltype="java.io.PrintStream" type="PrintStream" />
				</params>
			</method>
			<method static="true" visibility="public" name="setSecurityManager" fulltype="void" type="void">
				<comment>
					<description>Sets the System security.

 &lt;p&gt; If there is a security manager already installed, this method first
 calls the security manager&apos;s &lt;code&gt;checkPermission&lt;/code&gt; method
 with a &lt;code&gt;RuntimePermission(&quot;setSecurityManager&quot;)&lt;/code&gt;
 permission to ensure it&apos;s ok to replace the existing
 security manager.
 This may result in throwing a &lt;code&gt;SecurityException&lt;/code&gt;.

 &lt;p&gt; Otherwise, the argument is established as the current
 security manager. If the argument is &lt;code&gt;null&lt;/code&gt; and no
 security manager has been established, then no action is taken and
 the method simply returns.</description>
					<attribute name="@param">
						<description>s   the security manager.</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException  if the security manager has already
             been set and its &lt;code&gt;checkPermission&lt;/code&gt; method
             doesn&apos;t allow it to be replaced.</description>
					</attribute>
					<attribute name="@see">
						<description>#getSecurityManager</description>
					</attribute>
					<attribute name="@see">
						<description>SecurityManager#checkPermission</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.RuntimePermission</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the security manager." fulltype="java.lang.SecurityManager" type="SecurityManager" />
				</params>
			</method>
			<method static="true" synchronized="true" visibility="private" name="setSecurityManager0" fulltype="void" type="void">
				<params>
					<param name="s" fulltype="java.lang.SecurityManager" type="SecurityManager" />
				</params>
			</method>
			<method static="true" visibility="public" name="getSecurityManager" returncomment="if a security manager has already been established for the
          current application, then that security manager is returned;
          otherwise, &lt;code&gt;null&lt;/code&gt; is returned." fulltype="java.lang.SecurityManager" type="SecurityManager">
				<comment>
					<description>Gets the system security interface.</description>
					<attribute name="@return">
						<description>if a security manager has already been established for the
          current application, then that security manager is returned;
          otherwise, &lt;code&gt;null&lt;/code&gt; is returned.</description>
					</attribute>
					<attribute name="@see">
						<description>#setSecurityManager</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="currentTimeMillis" returncomment="the difference, measured in milliseconds, between
          the current time and midnight, January 1, 1970 UTC." fulltype="long" type="long">
				<comment>
					<description>Returns the current time in milliseconds.  Note that
 while the unit of time of the return value is a millisecond,
 the granularity of the value depends on the underlying
 operating system and may be larger.  For example, many
 operating systems measure time in units of tens of
 milliseconds.

 &lt;p&gt; See the description of the class &lt;code&gt;Date&lt;/code&gt; for
 a discussion of slight discrepancies that may arise between
 &quot;computer time&quot; and coordinated universal time (UTC).</description>
					<attribute name="@return">
						<description>the difference, measured in milliseconds, between
          the current time and midnight, January 1, 1970 UTC.</description>
					</attribute>
					<attribute name="@see">
						<description>java.util.Date</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="nanoTime" returncomment="The current value of the system timer, in nanoseconds." fulltype="long" type="long">
				<comment>
					<description>Returns the current value of the most precise available system
 timer, in nanoseconds.

 &lt;p&gt;This method can only be used to measure elapsed time and is
 not related to any other notion of system or wall-clock time.
 The value returned represents nanoseconds since some fixed but
 arbitrary time (perhaps in the future, so values may be
 negative).  This method provides nanosecond precision, but not
 necessarily nanosecond accuracy. No guarantees are made about
 how frequently values change. Differences in successive calls
 that span greater than approximately 292 years (2&lt;sup&gt;63&lt;/sup&gt;
 nanoseconds) will not accurately compute elapsed time due to
 numerical overflow.

 &lt;p&gt; For example, to measure how long some code takes to execute:
 &lt;pre&gt;
   long startTime = System.nanoTime();
   // ... the code being measured ...
   long estimatedTime = System.nanoTime() - startTime;
 &lt;/pre&gt;</description>
					<attribute name="@return">
						<description>The current value of the system timer, in nanoseconds.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="arraycopy" fulltype="void" type="void">
				<comment>
					<description>Copies an array from the specified source array, beginning at the
 specified position, to the specified position of the destination array.
 A subsequence of array components are copied from the source
 array referenced by &lt;code&gt;src&lt;/code&gt; to the destination array
 referenced by &lt;code&gt;dest&lt;/code&gt;. The number of components copied is
 equal to the &lt;code&gt;length&lt;/code&gt; argument. The components at
 positions &lt;code&gt;srcPos&lt;/code&gt; through
 &lt;code&gt;srcPos+length-1&lt;/code&gt; in the source array are copied into
 positions &lt;code&gt;destPos&lt;/code&gt; through
 &lt;code&gt;destPos+length-1&lt;/code&gt;, respectively, of the destination
 array.
 &lt;p&gt;
 If the &lt;code&gt;src&lt;/code&gt; and &lt;code&gt;dest&lt;/code&gt; arguments refer to the
 same array object, then the copying is performed as if the
 components at positions &lt;code&gt;srcPos&lt;/code&gt; through
 &lt;code&gt;srcPos+length-1&lt;/code&gt; were first copied to a temporary
 array with &lt;code&gt;length&lt;/code&gt; components and then the contents of
 the temporary array were copied into positions
 &lt;code&gt;destPos&lt;/code&gt; through &lt;code&gt;destPos+length-1&lt;/code&gt; of the
 destination array.
 &lt;p&gt;
 If &lt;code&gt;dest&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, then a
 &lt;code&gt;NullPointerException&lt;/code&gt; is thrown.
 &lt;p&gt;
 If &lt;code&gt;src&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, then a
 &lt;code&gt;NullPointerException&lt;/code&gt; is thrown and the destination
 array is not modified.
 &lt;p&gt;
 Otherwise, if any of the following is true, an
 &lt;code&gt;ArrayStoreException&lt;/code&gt; is thrown and the destination is
 not modified:
 &lt;ul&gt;
 &lt;li&gt;The &lt;code&gt;src&lt;/code&gt; argument refers to an object that is not an
     array.
 &lt;li&gt;The &lt;code&gt;dest&lt;/code&gt; argument refers to an object that is not an
     array.
 &lt;li&gt;The &lt;code&gt;src&lt;/code&gt; argument and &lt;code&gt;dest&lt;/code&gt; argument refer
     to arrays whose component types are different primitive types.
 &lt;li&gt;The &lt;code&gt;src&lt;/code&gt; argument refers to an array with a primitive
    component type and the &lt;code&gt;dest&lt;/code&gt; argument refers to an array
     with a reference component type.
 &lt;li&gt;The &lt;code&gt;src&lt;/code&gt; argument refers to an array with a reference
    component type and the &lt;code&gt;dest&lt;/code&gt; argument refers to an array
     with a primitive component type.
 &lt;/ul&gt;
 &lt;p&gt;
 Otherwise, if any of the following is true, an
 &lt;code&gt;IndexOutOfBoundsException&lt;/code&gt; is
 thrown and the destination is not modified:
 &lt;ul&gt;
 &lt;li&gt;The &lt;code&gt;srcPos&lt;/code&gt; argument is negative.
 &lt;li&gt;The &lt;code&gt;destPos&lt;/code&gt; argument is negative.
 &lt;li&gt;The &lt;code&gt;length&lt;/code&gt; argument is negative.
 &lt;li&gt;&lt;code&gt;srcPos+length&lt;/code&gt; is greater than
     &lt;code&gt;src.length&lt;/code&gt;, the length of the source array.
 &lt;li&gt;&lt;code&gt;destPos+length&lt;/code&gt; is greater than
     &lt;code&gt;dest.length&lt;/code&gt;, the length of the destination array.
 &lt;/ul&gt;
 &lt;p&gt;
 Otherwise, if any actual component of the source array from
 position &lt;code&gt;srcPos&lt;/code&gt; through
 &lt;code&gt;srcPos+length-1&lt;/code&gt; cannot be converted to the component
 type of the destination array by assignment conversion, an
 &lt;code&gt;ArrayStoreException&lt;/code&gt; is thrown. In this case, let
 &lt;b&gt;&lt;i&gt;k&lt;/i&gt;&lt;/b&gt; be the smallest nonnegative integer less than
 length such that &lt;code&gt;src[srcPos+&lt;/code&gt;&lt;i&gt;k&lt;/i&gt;&lt;code&gt;]&lt;/code&gt;
 cannot be converted to the component type of the destination
 array; when the exception is thrown, source array components from
 positions &lt;code&gt;srcPos&lt;/code&gt; through
 &lt;code&gt;srcPos+&lt;/code&gt;&lt;i&gt;k&lt;/i&gt;&lt;code&gt;-1&lt;/code&gt;
 will already have been copied to destination array positions
 &lt;code&gt;destPos&lt;/code&gt; through
 &lt;code&gt;destPos+&lt;/code&gt;&lt;i&gt;k&lt;/I&gt;&lt;code&gt;-1&lt;/code&gt; and no other
 positions of the destination array will have been modified.
 (Because of the restrictions already itemized, this
 paragraph effectively applies only to the situation where both
 arrays have component types that are reference types.)</description>
					<attribute name="@param">
						<description>src      the source array.</description>
					</attribute>
					<attribute name="@param">
						<description>srcPos   starting position in the source array.</description>
					</attribute>
					<attribute name="@param">
						<description>dest     the destination array.</description>
					</attribute>
					<attribute name="@param">
						<description>destPos  starting position in the destination data.</description>
					</attribute>
					<attribute name="@param">
						<description>length   the number of array elements to be copied.</description>
					</attribute>
					<attribute name="@exception">
						<description>IndexOutOfBoundsException  if copying would cause
               access of data outside array bounds.</description>
					</attribute>
					<attribute name="@exception">
						<description>ArrayStoreException  if an element in the &lt;code&gt;src&lt;/code&gt;
               array could not be stored into the &lt;code&gt;dest&lt;/code&gt; array
               because of a type mismatch.</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException if either &lt;code&gt;src&lt;/code&gt; or
               &lt;code&gt;dest&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.</description>
					</attribute>
				</comment>
				<params>
					<param name="src" comment="the source array." fulltype="java.lang.Object" type="Object" />
					<param name="srcPos" comment="starting position in the source array." fulltype="int" type="int" />
					<param name="dest" comment="the destination array." fulltype="java.lang.Object" type="Object" />
					<param name="destPos" comment="starting position in the destination data." fulltype="int" type="int" />
					<param name="length" comment="the number of array elements to be copied." fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="identityHashCode" returncomment="the hashCode" fulltype="int" type="int">
				<comment>
					<description>Returns the same hash code for the given object as
 would be returned by the default method hashCode(),
 whether or not the given object&apos;s class overrides
 hashCode().
 The hash code for the null reference is zero.</description>
					<attribute name="@param">
						<description>x object for which the hashCode is to be calculated</description>
					</attribute>
					<attribute name="@return">
						<description>the hashCode</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.1</description>
					</attribute>
				</comment>
				<params>
					<param name="x" comment="object for which the hashCode is to be calculated" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method static="true" visibility="private" name="initProperties" fulltype="java.util.Properties" type="Properties">
				<params>
					<param name="props" fulltype="java.util.Properties" type="Properties" />
				</params>
			</method>
			<method static="true" visibility="public" name="getProperties" returncomment="the system properties" fulltype="java.util.Properties" type="Properties">
				<comment>
					<description>Determines the current system properties.
 &lt;p&gt;
 First, if there is a security manager, its
 &lt;code&gt;checkPropertiesAccess&lt;/code&gt; method is called with no
 arguments. This may result in a security exception.
 &lt;p&gt;
 The current set of system properties for use by the
 {@link #getProperty(String)} method is returned as a
 &lt;code&gt;Properties&lt;/code&gt; object. If there is no current set of
 system properties, a set of system properties is first created and
 initialized. This set of system properties always includes values
 for the following keys:
 &lt;table summary=&quot;Shows property keys and associated values&quot;&gt;
 &lt;tr&gt;&lt;th&gt;Key&lt;/th&gt;
     &lt;th&gt;Description of Associated Value&lt;/th&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;&lt;code&gt;java.version&lt;/code&gt;&lt;/td&gt;
     &lt;td&gt;Java Runtime Environment version&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;&lt;code&gt;java.vendor&lt;/code&gt;&lt;/td&gt;
     &lt;td&gt;Java Runtime Environment vendor&lt;/td&gt;&lt;/tr
 &lt;tr&gt;&lt;td&gt;&lt;code&gt;java.vendor.url&lt;/code&gt;&lt;/td&gt;
     &lt;td&gt;Java vendor URL&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;&lt;code&gt;java.home&lt;/code&gt;&lt;/td&gt;
     &lt;td&gt;Java installation directory&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;&lt;code&gt;java.vm.specification.version&lt;/code&gt;&lt;/td&gt;
     &lt;td&gt;Java Virtual Machine specification version&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;&lt;code&gt;java.vm.specification.vendor&lt;/code&gt;&lt;/td&gt;
     &lt;td&gt;Java Virtual Machine specification vendor&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;&lt;code&gt;java.vm.specification.name&lt;/code&gt;&lt;/td&gt;
     &lt;td&gt;Java Virtual Machine specification name&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;&lt;code&gt;java.vm.version&lt;/code&gt;&lt;/td&gt;
     &lt;td&gt;Java Virtual Machine implementation version&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;&lt;code&gt;java.vm.vendor&lt;/code&gt;&lt;/td&gt;
     &lt;td&gt;Java Virtual Machine implementation vendor&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;&lt;code&gt;java.vm.name&lt;/code&gt;&lt;/td&gt;
     &lt;td&gt;Java Virtual Machine implementation name&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;&lt;code&gt;java.specification.version&lt;/code&gt;&lt;/td&gt;
     &lt;td&gt;Java Runtime Environment specification  version&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;&lt;code&gt;java.specification.vendor&lt;/code&gt;&lt;/td&gt;
     &lt;td&gt;Java Runtime Environment specification  vendor&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;&lt;code&gt;java.specification.name&lt;/code&gt;&lt;/td&gt;
     &lt;td&gt;Java Runtime Environment specification  name&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;&lt;code&gt;java.class.version&lt;/code&gt;&lt;/td&gt;
     &lt;td&gt;Java class format version number&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;&lt;code&gt;java.class.path&lt;/code&gt;&lt;/td&gt;
     &lt;td&gt;Java class path&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;&lt;code&gt;java.library.path&lt;/code&gt;&lt;/td&gt;
     &lt;td&gt;List of paths to search when loading libraries&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;&lt;code&gt;java.io.tmpdir&lt;/code&gt;&lt;/td&gt;
     &lt;td&gt;Default temp file path&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;&lt;code&gt;java.compiler&lt;/code&gt;&lt;/td&gt;
     &lt;td&gt;Name of JIT compiler to use&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;&lt;code&gt;java.ext.dirs&lt;/code&gt;&lt;/td&gt;
     &lt;td&gt;Path of extension directory or directories&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;&lt;code&gt;os.name&lt;/code&gt;&lt;/td&gt;
     &lt;td&gt;Operating system name&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;&lt;code&gt;os.arch&lt;/code&gt;&lt;/td&gt;
     &lt;td&gt;Operating system architecture&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;&lt;code&gt;os.version&lt;/code&gt;&lt;/td&gt;
     &lt;td&gt;Operating system version&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;&lt;code&gt;file.separator&lt;/code&gt;&lt;/td&gt;
     &lt;td&gt;File separator (&quot;/&quot; on UNIX)&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;&lt;code&gt;path.separator&lt;/code&gt;&lt;/td&gt;
     &lt;td&gt;Path separator (&quot;:&quot; on UNIX)&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;&lt;code&gt;line.separator&lt;/code&gt;&lt;/td&gt;
     &lt;td&gt;Line separator (&quot;\n&quot; on UNIX)&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;&lt;code&gt;user.name&lt;/code&gt;&lt;/td&gt;
     &lt;td&gt;User&apos;s account name&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;&lt;code&gt;user.home&lt;/code&gt;&lt;/td&gt;
     &lt;td&gt;User&apos;s home directory&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;&lt;code&gt;user.dir&lt;/code&gt;&lt;/td&gt;
     &lt;td&gt;User&apos;s current working directory&lt;/td&gt;&lt;/tr&gt;
 &lt;/table&gt;
 &lt;p&gt;
 Multiple paths in a system property value are separated by the path
 separator character of the platform.
 &lt;p&gt;
 Note that even if the security manager does not permit the
 &lt;code&gt;getProperties&lt;/code&gt; operation, it may choose to permit the
 {@link #getProperty(String)} operation.</description>
					<attribute name="@return">
						<description>the system properties</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException  if a security manager exists and its
             &lt;code&gt;checkPropertiesAccess&lt;/code&gt; method doesn&apos;t allow access
              to the system properties.</description>
					</attribute>
					<attribute name="@see">
						<description>#setProperties</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.SecurityException</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.SecurityManager#checkPropertiesAccess()</description>
					</attribute>
					<attribute name="@see">
						<description>java.util.Properties</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="setProperties" fulltype="void" type="void">
				<comment>
					<description>Sets the system properties to the &lt;code&gt;Properties&lt;/code&gt;
 argument.
 &lt;p&gt;
 First, if there is a security manager, its
 &lt;code&gt;checkPropertiesAccess&lt;/code&gt; method is called with no
 arguments. This may result in a security exception.
 &lt;p&gt;
 The argument becomes the current set of system properties for use
 by the {@link #getProperty(String)} method. If the argument is
 &lt;code&gt;null&lt;/code&gt;, then the current set of system properties is
 forgotten.</description>
					<attribute name="@param">
						<description>props   the new system properties.</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException  if a security manager exists and its
             &lt;code&gt;checkPropertiesAccess&lt;/code&gt; method doesn&apos;t allow access
              to the system properties.</description>
					</attribute>
					<attribute name="@see">
						<description>#getProperties</description>
					</attribute>
					<attribute name="@see">
						<description>java.util.Properties</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.SecurityException</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.SecurityManager#checkPropertiesAccess()</description>
					</attribute>
				</comment>
				<params>
					<param name="props" comment="the new system properties." fulltype="java.util.Properties" type="Properties" />
				</params>
			</method>
			<method static="true" visibility="public" name="getProperty" returncomment="the string value of the system property,
             or &lt;code&gt;null&lt;/code&gt; if there is no property with that key." fulltype="java.lang.String" type="String">
				<comment>
					<description>Gets the system property indicated by the specified key.
 &lt;p&gt;
 First, if there is a security manager, its
 &lt;code&gt;checkPropertyAccess&lt;/code&gt; method is called with the key as
 its argument. This may result in a SecurityException.
 &lt;p&gt;
 If there is no current set of system properties, a set of system
 properties is first created and initialized in the same manner as
 for the &lt;code&gt;getProperties&lt;/code&gt; method.</description>
					<attribute name="@param">
						<description>key   the name of the system property.</description>
					</attribute>
					<attribute name="@return">
						<description>the string value of the system property,
             or &lt;code&gt;null&lt;/code&gt; if there is no property with that key.</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException  if a security manager exists and its
             &lt;code&gt;checkPropertyAccess&lt;/code&gt; method doesn&apos;t allow
              access to the specified system property.</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException if &lt;code&gt;key&lt;/code&gt; is
             &lt;code&gt;null&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalArgumentException if &lt;code&gt;key&lt;/code&gt; is empty.</description>
					</attribute>
					<attribute name="@see">
						<description>#setProperty</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.SecurityException</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.SecurityManager#checkPropertyAccess(java.lang.String)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.System#getProperties()</description>
					</attribute>
				</comment>
				<params>
					<param name="key" comment="the name of the system property." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getProperty" returncomment="the string value of the system property,
             or the default value if there is no property with that key." fulltype="java.lang.String" type="String">
				<comment>
					<description>Gets the system property indicated by the specified key.
 &lt;p&gt;
 First, if there is a security manager, its
 &lt;code&gt;checkPropertyAccess&lt;/code&gt; method is called with the
 &lt;code&gt;key&lt;/code&gt; as its argument.
 &lt;p&gt;
 If there is no current set of system properties, a set of system
 properties is first created and initialized in the same manner as
 for the &lt;code&gt;getProperties&lt;/code&gt; method.</description>
					<attribute name="@param">
						<description>key   the name of the system property.</description>
					</attribute>
					<attribute name="@param">
						<description>def   a default value.</description>
					</attribute>
					<attribute name="@return">
						<description>the string value of the system property,
             or the default value if there is no property with that key.</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException  if a security manager exists and its
             &lt;code&gt;checkPropertyAccess&lt;/code&gt; method doesn&apos;t allow
             access to the specified system property.</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException if &lt;code&gt;key&lt;/code&gt; is
             &lt;code&gt;null&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalArgumentException if &lt;code&gt;key&lt;/code&gt; is empty.</description>
					</attribute>
					<attribute name="@see">
						<description>#setProperty</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.SecurityManager#checkPropertyAccess(java.lang.String)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.System#getProperties()</description>
					</attribute>
				</comment>
				<params>
					<param name="key" comment="the name of the system property." fulltype="java.lang.String" type="String" />
					<param name="def" comment="a default value." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="setProperty" returncomment="the previous value of the system property,
             or &lt;code&gt;null&lt;/code&gt; if it did not have one." fulltype="java.lang.String" type="String">
				<comment>
					<description>Sets the system property indicated by the specified key.
 &lt;p&gt;
 First, if a security manager exists, its
 &lt;code&gt;SecurityManager.checkPermission&lt;/code&gt; method
 is called with a &lt;code&gt;PropertyPermission(key, &quot;write&quot;)&lt;/code&gt;
 permission. This may result in a SecurityException being thrown.
 If no exception is thrown, the specified property is set to the given
 value.
 &lt;p&gt;</description>
					<attribute name="@param">
						<description>key   the name of the system property.</description>
					</attribute>
					<attribute name="@param">
						<description>value the value of the system property.</description>
					</attribute>
					<attribute name="@return">
						<description>the previous value of the system property,
             or &lt;code&gt;null&lt;/code&gt; if it did not have one.</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException  if a security manager exists and its
             &lt;code&gt;checkPermission&lt;/code&gt; method doesn&apos;t allow
             setting of the specified property.</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException if &lt;code&gt;key&lt;/code&gt; or
             &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalArgumentException if &lt;code&gt;key&lt;/code&gt; is empty.</description>
					</attribute>
					<attribute name="@see">
						<description>#getProperty</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.System#getProperty(java.lang.String)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.System#getProperty(java.lang.String, java.lang.String)</description>
					</attribute>
					<attribute name="@see">
						<description>java.util.PropertyPermission</description>
					</attribute>
					<attribute name="@see">
						<description>SecurityManager#checkPermission</description>
					</attribute>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
				<params>
					<param name="key" comment="the name of the system property." fulltype="java.lang.String" type="String" />
					<param name="value" comment="the value of the system property." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="clearProperty" returncomment="the previous string value of the system property,
             or &lt;code&gt;null&lt;/code&gt; if there was no property with that key." fulltype="java.lang.String" type="String">
				<comment>
					<description>Removes the system property indicated by the specified key.
 &lt;p&gt;
 First, if a security manager exists, its
 &lt;code&gt;SecurityManager.checkPermission&lt;/code&gt; method
 is called with a &lt;code&gt;PropertyPermission(key, &quot;write&quot;)&lt;/code&gt;
 permission. This may result in a SecurityException being thrown.
 If no exception is thrown, the specified property is removed.
 &lt;p&gt;</description>
					<attribute name="@param">
						<description>key   the name of the system property to be removed.</description>
					</attribute>
					<attribute name="@return">
						<description>the previous string value of the system property,
             or &lt;code&gt;null&lt;/code&gt; if there was no property with that key.</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException  if a security manager exists and its
             &lt;code&gt;checkPropertyAccess&lt;/code&gt; method doesn&apos;t allow
              access to the specified system property.</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException if &lt;code&gt;key&lt;/code&gt; is
             &lt;code&gt;null&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalArgumentException if &lt;code&gt;key&lt;/code&gt; is empty.</description>
					</attribute>
					<attribute name="@see">
						<description>#getProperty</description>
					</attribute>
					<attribute name="@see">
						<description>#setProperty</description>
					</attribute>
					<attribute name="@see">
						<description>java.util.Properties</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.SecurityException</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.SecurityManager#checkPropertiesAccess()</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="key" comment="the name of the system property to be removed." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="private" name="checkKey" fulltype="void" type="void">
				<params>
					<param name="key" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getenv" returncomment="the string value of the variable, or &lt;code&gt;null&lt;/code&gt;
         if the variable is not defined in the system environment" fulltype="java.lang.String" type="String">
				<comment>
					<description>Gets the value of the specified environment variable. An
 environment variable is a system-dependent external named
 value.

 &lt;p&gt;If a security manager exists, its
 {@link SecurityManager#checkPermission checkPermission}
 method is called with a
 &lt;code&gt;{@link RuntimePermission}(&quot;getenv.&quot;+name)&lt;/code&gt;
 permission.  This may result in a {@link SecurityException}
 being thrown.  If no exception is thrown the value of the
 variable &lt;code&gt;name&lt;/code&gt; is returned.

 &lt;p&gt;&lt;a name=&quot;EnvironmentVSSystemProperties&quot;&gt;&lt;i&gt;System
 properties&lt;/i&gt; and &lt;i&gt;environment variables&lt;/i&gt;&lt;/a&gt; are both
 conceptually mappings between names and values.  Both
 mechanisms can be used to pass user-defined information to a
 Java process.  Environment variables have a more global effect,
 because they are visible to all descendants of the process
 which defines them, not just the immediate Java subprocess.
 They can have subtly different semantics, such as case
 insensitivity, on different operating systems.  For these
 reasons, environment variables are more likely to have
 unintended side effects.  It is best to use system properties
 where possible.  Environment variables should be used when a
 global effect is desired, or when an external system interface
 requires an environment variable (such as &lt;code&gt;PATH&lt;/code&gt;).

 &lt;p&gt;On UNIX systems the alphabetic case of &lt;code&gt;name&lt;/code&gt; is
 typically significant, while on Microsoft Windows systems it is
 typically not.  For example, the expression
 &lt;code&gt;System.getenv(&quot;FOO&quot;).equals(System.getenv(&quot;foo&quot;))&lt;/code&gt;
 is likely to be true on Microsoft Windows.</description>
					<attribute name="@param">
						<description>name the name of the environment variable</description>
					</attribute>
					<attribute name="@return">
						<description>the string value of the variable, or &lt;code&gt;null&lt;/code&gt;
         if the variable is not defined in the system environment</description>
					</attribute>
					<attribute name="@throws">
						<description>NullPointerException if &lt;code&gt;name&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;</description>
					</attribute>
					<attribute name="@throws">
						<description>SecurityException
         if a security manager exists and its
         {@link SecurityManager#checkPermission checkPermission}
         method doesn&apos;t allow access to the environment variable
         &lt;code&gt;name&lt;/code&gt;</description>
					</attribute>
					<attribute name="@see">
						<description>#getenv()</description>
					</attribute>
					<attribute name="@see">
						<description>ProcessBuilder#environment()</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="the name of the environment variable" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="getenv" returncomment="the environment as a map of variable names to values" fulltype="java.util.Map" type="Map">
				<comment>
					<description>Returns an unmodifiable string map view of the current system environment.
 The environment is a system-dependent mapping from names to
 values which is passed from parent to child processes.

 &lt;p&gt;If the system does not support environment variables, an
 empty map is returned.

 &lt;p&gt;The returned map will never contain null keys or values.
 Attempting to query the presence of a null key or value will
 throw a {@link NullPointerException}.  Attempting to query
 the presence of a key or value which is not of type
 {@link String} will throw a {@link ClassCastException}.

 &lt;p&gt;The returned map and its collection views may not obey the
 general contract of the {@link Object#equals} and
 {@link Object#hashCode} methods.

 &lt;p&gt;The returned map is typically case-sensitive on all platforms.

 &lt;p&gt;If a security manager exists, its
 {@link SecurityManager#checkPermission checkPermission}
 method is called with a
 &lt;code&gt;{@link RuntimePermission}(&quot;getenv.*&quot;)&lt;/code&gt;
 permission.  This may result in a {@link SecurityException} being
 thrown.

 &lt;p&gt;When passing information to a Java subprocess,
 &lt;a href=#EnvironmentVSSystemProperties&gt;system properties&lt;/a&gt;
 are generally preferred over environment variables.</description>
					<attribute name="@return">
						<description>the environment as a map of variable names to values</description>
					</attribute>
					<attribute name="@throws">
						<description>SecurityException
         if a security manager exists and its
         {@link SecurityManager#checkPermission checkPermission}
         method doesn&apos;t allow access to the process environment</description>
					</attribute>
					<attribute name="@see">
						<description>#getenv(String)</description>
					</attribute>
					<attribute name="@see">
						<description>ProcessBuilder#environment()</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="exit" fulltype="void" type="void">
				<comment>
					<description>Terminates the currently running Java Virtual Machine. The
 argument serves as a status code; by convention, a nonzero status
 code indicates abnormal termination.
 &lt;p&gt;
 This method calls the &lt;code&gt;exit&lt;/code&gt; method in class
 &lt;code&gt;Runtime&lt;/code&gt;. This method never returns normally.
 &lt;p&gt;
 The call &lt;code&gt;System.exit(n)&lt;/code&gt; is effectively equivalent to
 the call:
 &lt;blockquote&gt;&lt;pre&gt;
 Runtime.getRuntime().exit(n)
 &lt;/pre&gt;&lt;/blockquote&gt;</description>
					<attribute name="@param">
						<description>status   exit status.</description>
					</attribute>
					<attribute name="@throws">
						<description>SecurityException
        if a security manager exists and its &lt;code&gt;checkExit&lt;/code&gt;
        method doesn&apos;t allow exit with the specified status.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Runtime#exit(int)</description>
					</attribute>
				</comment>
				<params>
					<param name="status" comment="exit status." fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="gc" fulltype="void" type="void">
				<comment>
					<description>Runs the garbage collector.
 &lt;p&gt;
 Calling the &lt;code&gt;gc&lt;/code&gt; method suggests that the Java Virtual
 Machine expend effort toward recycling unused objects in order to
 make the memory they currently occupy available for quick reuse.
 When control returns from the method call, the Java Virtual
 Machine has made a best effort to reclaim space from all discarded
 objects.
 &lt;p&gt;
 The call &lt;code&gt;System.gc()&lt;/code&gt; is effectively equivalent to the
 call:
 &lt;blockquote&gt;&lt;pre&gt;
 Runtime.getRuntime().gc()
 &lt;/pre&gt;&lt;/blockquote&gt;</description>
					<attribute name="@see">
						<description>java.lang.Runtime#gc()</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="runFinalization" fulltype="void" type="void">
				<comment>
					<description>Runs the finalization methods of any objects pending finalization.
 &lt;p&gt;
 Calling this method suggests that the Java Virtual Machine expend
 effort toward running the &lt;code&gt;finalize&lt;/code&gt; methods of objects
 that have been found to be discarded but whose &lt;code&gt;finalize&lt;/code&gt;
 methods have not yet been run. When control returns from the
 method call, the Java Virtual Machine has made a best effort to
 complete all outstanding finalizations.
 &lt;p&gt;
 The call &lt;code&gt;System.runFinalization()&lt;/code&gt; is effectively
 equivalent to the call:
 &lt;blockquote&gt;&lt;pre&gt;
 Runtime.getRuntime().runFinalization()
 &lt;/pre&gt;&lt;/blockquote&gt;</description>
					<attribute name="@see">
						<description>java.lang.Runtime#runFinalization()</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="runFinalizersOnExit" fulltype="void" type="void">
				<comment>
					<description>Enable or disable finalization on exit; doing so specifies that the
 finalizers of all objects that have finalizers that have not yet been
 automatically invoked are to be run before the Java runtime exits.
 By default, finalization on exit is disabled.

 &lt;p&gt;If there is a security manager,
 its &lt;code&gt;checkExit&lt;/code&gt; method is first called
 with 0 as its argument to ensure the exit is allowed.
 This could result in a SecurityException.</description>
					<attribute name="@deprecated">
						<description>This method is inherently unsafe.  It may result in
      finalizers being called on live objects while other threads are
      concurrently manipulating those objects, resulting in erratic
      behavior or deadlock.</description>
					</attribute>
					<attribute name="@param">
						<description>value indicating enabling or disabling of finalization</description>
					</attribute>
					<attribute name="@throws">
						<description>SecurityException
        if a security manager exists and its &lt;code&gt;checkExit&lt;/code&gt;
        method doesn&apos;t allow the exit.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Runtime#exit(int)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Runtime#gc()</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.SecurityManager#checkExit(int)</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.1</description>
					</attribute>
				</comment>
				<params>
					<param name="value" comment="indicating enabling or disabling of finalization" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="public" name="load" fulltype="void" type="void">
				<comment>
					<description>Loads a code file with the specified filename from the local file
 system as a dynamic library. The filename
 argument must be a complete path name.
 &lt;p&gt;
 The call &lt;code&gt;System.load(name)&lt;/code&gt; is effectively equivalent
 to the call:
 &lt;blockquote&gt;&lt;pre&gt;
 Runtime.getRuntime().load(name)
 &lt;/pre&gt;&lt;/blockquote&gt;</description>
					<attribute name="@param">
						<description>filename   the file to load.</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException  if a security manager exists and its
             &lt;code&gt;checkLink&lt;/code&gt; method doesn&apos;t allow
             loading of the specified dynamic library</description>
					</attribute>
					<attribute name="@exception">
						<description>UnsatisfiedLinkError  if the file does not exist.</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException if &lt;code&gt;filename&lt;/code&gt; is
             &lt;code&gt;null&lt;/code&gt;</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Runtime#load(java.lang.String)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.SecurityManager#checkLink(java.lang.String)</description>
					</attribute>
				</comment>
				<params>
					<param name="filename" comment="the file to load." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="loadLibrary" fulltype="void" type="void">
				<comment>
					<description>Loads the system library specified by the &lt;code&gt;libname&lt;/code&gt;
 argument. The manner in which a library name is mapped to the
 actual system library is system dependent.
 &lt;p&gt;
 The call &lt;code&gt;System.loadLibrary(name)&lt;/code&gt; is effectively
 equivalent to the call
 &lt;blockquote&gt;&lt;pre&gt;
 Runtime.getRuntime().loadLibrary(name)
 &lt;/pre&gt;&lt;/blockquote&gt;</description>
					<attribute name="@param">
						<description>libname   the name of the library.</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException  if a security manager exists and its
             &lt;code&gt;checkLink&lt;/code&gt; method doesn&apos;t allow
             loading of the specified dynamic library</description>
					</attribute>
					<attribute name="@exception">
						<description>UnsatisfiedLinkError  if the library does not exist.</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException if &lt;code&gt;libname&lt;/code&gt; is
             &lt;code&gt;null&lt;/code&gt;</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Runtime#loadLibrary(java.lang.String)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.SecurityManager#checkLink(java.lang.String)</description>
					</attribute>
				</comment>
				<params>
					<param name="libname" comment="the name of the library." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="mapLibraryName" returncomment="a platform-dependent native library name." fulltype="java.lang.String" type="String">
				<comment>
					<description>Maps a library name into a platform-specific string representing
 a native library.</description>
					<attribute name="@param">
						<description>libname the name of the library.</description>
					</attribute>
					<attribute name="@return">
						<description>a platform-dependent native library name.</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException if &lt;code&gt;libname&lt;/code&gt; is
             &lt;code&gt;null&lt;/code&gt;</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.System#loadLibrary(java.lang.String)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.ClassLoader#findLibrary(java.lang.String)</description>
					</attribute>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
				<params>
					<param name="libname" comment="the name of the library." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="private" name="nullInputStream" fulltype="java.io.InputStream" type="InputStream">
				<comment>
					<description>The following two methods exist because in, out, and err must be
 initialized to null.  The compiler, however, cannot be permitted to
 inline access to them, since they are later set to more sensible values
 by initializeSystemClass().</description>
				</comment>
				<exceptions>
					<exception fulltype="java.lang.NullPointerException" type="NullPointerException" />
				</exceptions>
			</method>
			<method static="true" visibility="private" name="nullPrintStream" fulltype="java.io.PrintStream" type="PrintStream">
				<exceptions>
					<exception fulltype="java.lang.NullPointerException" type="NullPointerException" />
				</exceptions>
			</method>
			<method static="true" visibility="private" name="initializeSystemClass" fulltype="void" type="void">
				<comment>
					<description>Initialize the system class.  Called after thread initialization.</description>
				</comment>
			</method>
			<method static="true" visibility="package-private" name="getCallerClass" fulltype="java.lang.Class" type="Class" />
		</methods>
	</jelclass>
	<jelclass visibility="public" package="java.lang" fulltype="java.lang.Object" type="Object">
		<comment>
			<description>Class &lt;code&gt;Object&lt;/code&gt; is the root of the class hierarchy.
 Every class has &lt;code&gt;Object&lt;/code&gt; as a superclass. All objects,
 including arrays, implement the methods of this class.</description>
			<attribute name="@author">
				<description>unascribed</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.Class</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.0</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="Object" />
			<method static="true" visibility="private" name="registerNatives" fulltype="void" type="void" />
			<method final="true" visibility="public" name="getClass" returncomment="The {@code Class} object that represents the runtime
         class of this object." fulltype="java.lang.Class" type="Class">
				<comment>
					<description>Returns the runtime class of this {@code Object}. The returned
 {@code Class} object is the object that is locked by {@code
 static synchronized} methods of the represented class.

 &lt;p&gt;&lt;b&gt;The actual result type is {@code Class&lt;? extends |X|&gt;}
 where {@code |X|} is the erasure of the static type of the
 expression on which {@code getClass} is called.&lt;/b&gt; For
 example, no cast is required in this code fragment:&lt;/p&gt;

 &lt;p&gt;
 {@code Number n = 0;                             }&lt;br&gt;
 {@code Class&lt;? extends Number&gt; c = n.getClass(); }
 &lt;/p&gt;</description>
					<attribute name="@return">
						<description>The {@code Class} object that represents the runtime
         class of this object.</description>
					</attribute>
					<attribute name="@see">
						<description>&lt;a href=&quot;http://java.sun.com/docs/books/jls/&quot;&gt;The Java
         Language Specification, Third Edition (15.8.2 Class
         Literals)&lt;/a&gt;</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="hashCode" returncomment="a hash code value for this object." fulltype="int" type="int">
				<comment>
					<description>Returns a hash code value for the object. This method is
 supported for the benefit of hashtables such as those provided by
 &lt;code&gt;java.util.Hashtable&lt;/code&gt;.
 &lt;p&gt;
 The general contract of &lt;code&gt;hashCode&lt;/code&gt; is:
 &lt;ul&gt;
 &lt;li&gt;Whenever it is invoked on the same object more than once during
     an execution of a Java application, the &lt;tt&gt;hashCode&lt;/tt&gt; method
     must consistently return the same integer, provided no information
     used in &lt;tt&gt;equals&lt;/tt&gt; comparisons on the object is modified.
     This integer need not remain consistent from one execution of an
     application to another execution of the same application.
 &lt;li&gt;If two objects are equal according to the &lt;tt&gt;equals(Object)&lt;/tt&gt;
     method, then calling the &lt;code&gt;hashCode&lt;/code&gt; method on each of
     the two objects must produce the same integer result.
 &lt;li&gt;It is &lt;em&gt;not&lt;/em&gt; required that if two objects are unequal
     according to the {@link java.lang.Object#equals(java.lang.Object)}
     method, then calling the &lt;tt&gt;hashCode&lt;/tt&gt; method on each of the
     two objects must produce distinct integer results.  However, the
     programmer should be aware that producing distinct integer results
     for unequal objects may improve the performance of hashtables.
 &lt;/ul&gt;
 &lt;p&gt;
 As much as is reasonably practical, the hashCode method defined by
 class &lt;tt&gt;Object&lt;/tt&gt; does return distinct integers for distinct
 objects. (This is typically implemented by converting the internal
 address of the object into an integer, but this implementation
 technique is not required by the
 Java&lt;font size=&quot;-2&quot;&gt;&lt;sup&gt;TM&lt;/sup&gt;&lt;/font&gt; programming language.)</description>
					<attribute name="@return">
						<description>a hash code value for this object.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Object#equals(java.lang.Object)</description>
					</attribute>
					<attribute name="@see">
						<description>java.util.Hashtable</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="equals" returncomment="&lt;code&gt;true&lt;/code&gt; if this object is the same as the obj
          argument; &lt;code&gt;false&lt;/code&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Indicates whether some other object is &quot;equal to&quot; this one.
 &lt;p&gt;
 The &lt;code&gt;equals&lt;/code&gt; method implements an equivalence relation
 on non-null object references:
 &lt;ul&gt;
 &lt;li&gt;It is &lt;i&gt;reflexive&lt;/i&gt;: for any non-null reference value
     &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;x.equals(x)&lt;/code&gt; should return
     &lt;code&gt;true&lt;/code&gt;.
 &lt;li&gt;It is &lt;i&gt;symmetric&lt;/i&gt;: for any non-null reference values
     &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, &lt;code&gt;x.equals(y)&lt;/code&gt;
     should return &lt;code&gt;true&lt;/code&gt; if and only if
     &lt;code&gt;y.equals(x)&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.
 &lt;li&gt;It is &lt;i&gt;transitive&lt;/i&gt;: for any non-null reference values
     &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, and &lt;code&gt;z&lt;/code&gt;, if
     &lt;code&gt;x.equals(y)&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt; and
     &lt;code&gt;y.equals(z)&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;, then
     &lt;code&gt;x.equals(z)&lt;/code&gt; should return &lt;code&gt;true&lt;/code&gt;.
 &lt;li&gt;It is &lt;i&gt;consistent&lt;/i&gt;: for any non-null reference values
     &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, multiple invocations of
     &lt;tt&gt;x.equals(y)&lt;/tt&gt; consistently return &lt;code&gt;true&lt;/code&gt;
     or consistently return &lt;code&gt;false&lt;/code&gt;, provided no
     information used in &lt;code&gt;equals&lt;/code&gt; comparisons on the
     objects is modified.
 &lt;li&gt;For any non-null reference value &lt;code&gt;x&lt;/code&gt;,
     &lt;code&gt;x.equals(null)&lt;/code&gt; should return &lt;code&gt;false&lt;/code&gt;.
 &lt;/ul&gt;
 &lt;p&gt;
 The &lt;tt&gt;equals&lt;/tt&gt; method for class &lt;code&gt;Object&lt;/code&gt; implements
 the most discriminating possible equivalence relation on objects;
 that is, for any non-null reference values &lt;code&gt;x&lt;/code&gt; and
 &lt;code&gt;y&lt;/code&gt;, this method returns &lt;code&gt;true&lt;/code&gt; if and only
 if &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; refer to the same object
 (&lt;code&gt;x == y&lt;/code&gt; has the value &lt;code&gt;true&lt;/code&gt;).
 &lt;p&gt;
 Note that it is generally necessary to override the &lt;tt&gt;hashCode&lt;/tt&gt;
 method whenever this method is overridden, so as to maintain the
 general contract for the &lt;tt&gt;hashCode&lt;/tt&gt; method, which states
 that equal objects must have equal hash codes.</description>
					<attribute name="@param">
						<description>obj   the reference object with which to compare.</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if this object is the same as the obj
          argument; &lt;code&gt;false&lt;/code&gt; otherwise.</description>
					</attribute>
					<attribute name="@see">
						<description>#hashCode()</description>
					</attribute>
					<attribute name="@see">
						<description>java.util.Hashtable</description>
					</attribute>
				</comment>
				<params>
					<param name="obj" comment="the reference object with which to compare." fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="protected" name="clone" returncomment="a clone of this instance." fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Creates and returns a copy of this object.  The precise meaning
 of &quot;copy&quot; may depend on the class of the object. The general
 intent is that, for any object &lt;tt&gt;x&lt;/tt&gt;, the expression:
 &lt;blockquote&gt;
 &lt;pre&gt;
 x.clone() != x&lt;/pre&gt;&lt;/blockquote&gt;
 will be true, and that the expression:
 &lt;blockquote&gt;
 &lt;pre&gt;
 x.clone().getClass() == x.getClass()&lt;/pre&gt;&lt;/blockquote&gt;
 will be &lt;tt&gt;true&lt;/tt&gt;, but these are not absolute requirements.
 While it is typically the case that:
 &lt;blockquote&gt;
 &lt;pre&gt;
 x.clone().equals(x)&lt;/pre&gt;&lt;/blockquote&gt;
 will be &lt;tt&gt;true&lt;/tt&gt;, this is not an absolute requirement.
 &lt;p&gt;
 By convention, the returned object should be obtained by calling
 &lt;tt&gt;super.clone&lt;/tt&gt;.  If a class and all of its superclasses (except
 &lt;tt&gt;Object&lt;/tt&gt;) obey this convention, it will be the case that
 &lt;tt&gt;x.clone().getClass() == x.getClass()&lt;/tt&gt;.
 &lt;p&gt;
 By convention, the object returned by this method should be independent
 of this object (which is being cloned).  To achieve this independence,
 it may be necessary to modify one or more fields of the object returned
 by &lt;tt&gt;super.clone&lt;/tt&gt; before returning it.  Typically, this means
 copying any mutable objects that comprise the internal &quot;deep structure&quot;
 of the object being cloned and replacing the references to these
 objects with references to the copies.  If a class contains only
 primitive fields or references to immutable objects, then it is usually
 the case that no fields in the object returned by &lt;tt&gt;super.clone&lt;/tt&gt;
 need to be modified.
 &lt;p&gt;
 The method &lt;tt&gt;clone&lt;/tt&gt; for class &lt;tt&gt;Object&lt;/tt&gt; performs a
 specific cloning operation. First, if the class of this object does
 not implement the interface &lt;tt&gt;Cloneable&lt;/tt&gt;, then a
 &lt;tt&gt;CloneNotSupportedException&lt;/tt&gt; is thrown. Note that all arrays
 are considered to implement the interface &lt;tt&gt;Cloneable&lt;/tt&gt;.
 Otherwise, this method creates a new instance of the class of this
 object and initializes all its fields with exactly the contents of
 the corresponding fields of this object, as if by assignment; the
 contents of the fields are not themselves cloned. Thus, this method
 performs a &quot;shallow copy&quot; of this object, not a &quot;deep copy&quot; operation.
 &lt;p&gt;
 The class &lt;tt&gt;Object&lt;/tt&gt; does not itself implement the interface
 &lt;tt&gt;Cloneable&lt;/tt&gt;, so calling the &lt;tt&gt;clone&lt;/tt&gt; method on an object
 whose class is &lt;tt&gt;Object&lt;/tt&gt; will result in throwing an
 exception at run time.</description>
					<attribute name="@return">
						<description>a clone of this instance.</description>
					</attribute>
					<attribute name="@exception">
						<description>CloneNotSupportedException  if the object&apos;s class does not
               support the &lt;code&gt;Cloneable&lt;/code&gt; interface. Subclasses
               that override the &lt;code&gt;clone&lt;/code&gt; method can also
               throw this exception to indicate that an instance cannot
               be cloned.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Cloneable</description>
					</attribute>
				</comment>
				<exceptions>
					<exception comment="if the object&apos;s class does not
               support the &lt;code&gt;Cloneable&lt;/code&gt; interface. Subclasses
               that override the &lt;code&gt;clone&lt;/code&gt; method can also
               throw this exception to indicate that an instance cannot
               be cloned." fulltype="java.lang.CloneNotSupportedException" type="CloneNotSupportedException" />
				</exceptions>
			</method>
			<method visibility="public" name="toString" returncomment="a string representation of the object." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a string representation of the object. In general, the
 &lt;code&gt;toString&lt;/code&gt; method returns a string that
 &quot;textually represents&quot; this object. The result should
 be a concise but informative representation that is easy for a
 person to read.
 It is recommended that all subclasses override this method.
 &lt;p&gt;
 The &lt;code&gt;toString&lt;/code&gt; method for class &lt;code&gt;Object&lt;/code&gt;
 returns a string consisting of the name of the class of which the
 object is an instance, the at-sign character `&lt;code&gt;@&lt;/code&gt;&apos;, and
 the unsigned hexadecimal representation of the hash code of the
 object. In other words, this method returns a string equal to the
 value of:
 &lt;blockquote&gt;
 &lt;pre&gt;
 getClass().getName() + &apos;@&apos; + Integer.toHexString(hashCode())
 &lt;/pre&gt;&lt;/blockquote&gt;</description>
					<attribute name="@return">
						<description>a string representation of the object.</description>
					</attribute>
				</comment>
			</method>
			<method final="true" visibility="public" name="notify" fulltype="void" type="void">
				<comment>
					<description>Wakes up a single thread that is waiting on this object&apos;s
 monitor. If any threads are waiting on this object, one of them
 is chosen to be awakened. The choice is arbitrary and occurs at
 the discretion of the implementation. A thread waits on an object&apos;s
 monitor by calling one of the &lt;code&gt;wait&lt;/code&gt; methods.
 &lt;p&gt;
 The awakened thread will not be able to proceed until the current
 thread relinquishes the lock on this object. The awakened thread will
 compete in the usual manner with any other threads that might be
 actively competing to synchronize on this object; for example, the
 awakened thread enjoys no reliable privilege or disadvantage in being
 the next thread to lock this object.
 &lt;p&gt;
 This method should only be called by a thread that is the owner
 of this object&apos;s monitor. A thread becomes the owner of the
 object&apos;s monitor in one of three ways:
 &lt;ul&gt;
 &lt;li&gt;By executing a synchronized instance method of that object.
 &lt;li&gt;By executing the body of a &lt;code&gt;synchronized&lt;/code&gt; statement
     that synchronizes on the object.
 &lt;li&gt;For objects of type &lt;code&gt;Class,&lt;/code&gt; by executing a
     synchronized static method of that class.
 &lt;/ul&gt;
 &lt;p&gt;
 Only one thread at a time can own an object&apos;s monitor.</description>
					<attribute name="@exception">
						<description>IllegalMonitorStateException  if the current thread is not
               the owner of this object&apos;s monitor.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Object#notifyAll()</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Object#wait()</description>
					</attribute>
				</comment>
			</method>
			<method final="true" visibility="public" name="notifyAll" fulltype="void" type="void">
				<comment>
					<description>Wakes up all threads that are waiting on this object&apos;s monitor. A
 thread waits on an object&apos;s monitor by calling one of the
 &lt;code&gt;wait&lt;/code&gt; methods.
 &lt;p&gt;
 The awakened threads will not be able to proceed until the current
 thread relinquishes the lock on this object. The awakened threads
 will compete in the usual manner with any other threads that might
 be actively competing to synchronize on this object; for example,
 the awakened threads enjoy no reliable privilege or disadvantage in
 being the next thread to lock this object.
 &lt;p&gt;
 This method should only be called by a thread that is the owner
 of this object&apos;s monitor. See the &lt;code&gt;notify&lt;/code&gt; method for a
 description of the ways in which a thread can become the owner of
 a monitor.</description>
					<attribute name="@exception">
						<description>IllegalMonitorStateException  if the current thread is not
               the owner of this object&apos;s monitor.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Object#notify()</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Object#wait()</description>
					</attribute>
				</comment>
			</method>
			<method final="true" visibility="public" name="wait" fulltype="void" type="void">
				<comment>
					<description>Causes the current thread to wait until either another thread invokes the
 {@link java.lang.Object#notify()} method or the
 {@link java.lang.Object#notifyAll()} method for this object, or a
 specified amount of time has elapsed.
 &lt;p&gt;
 The current thread must own this object&apos;s monitor.
 &lt;p&gt;
 This method causes the current thread (call it &lt;var&gt;T&lt;/var&gt;) to
 place itself in the wait set for this object and then to relinquish
 any and all synchronization claims on this object. Thread &lt;var&gt;T&lt;/var&gt;
 becomes disabled for thread scheduling purposes and lies dormant
 until one of four things happens:
 &lt;ul&gt;
 &lt;li&gt;Some other thread invokes the &lt;tt&gt;notify&lt;/tt&gt; method for this
 object and thread &lt;var&gt;T&lt;/var&gt; happens to be arbitrarily chosen as
 the thread to be awakened.
 &lt;li&gt;Some other thread invokes the &lt;tt&gt;notifyAll&lt;/tt&gt; method for this
 object.
 &lt;li&gt;Some other thread {@linkplain Thread#interrupt() interrupts}
 thread &lt;var&gt;T&lt;/var&gt;.
 &lt;li&gt;The specified amount of real time has elapsed, more or less.  If
 &lt;tt&gt;timeout&lt;/tt&gt; is zero, however, then real time is not taken into
 consideration and the thread simply waits until notified.
 &lt;/ul&gt;
 The thread &lt;var&gt;T&lt;/var&gt; is then removed from the wait set for this
 object and re-enabled for thread scheduling. It then competes in the
 usual manner with other threads for the right to synchronize on the
 object; once it has gained control of the object, all its
 synchronization claims on the object are restored to the status quo
 ante - that is, to the situation as of the time that the &lt;tt&gt;wait&lt;/tt&gt;
 method was invoked. Thread &lt;var&gt;T&lt;/var&gt; then returns from the
 invocation of the &lt;tt&gt;wait&lt;/tt&gt; method. Thus, on return from the
 &lt;tt&gt;wait&lt;/tt&gt; method, the synchronization state of the object and of
 thread &lt;tt&gt;T&lt;/tt&gt; is exactly as it was when the &lt;tt&gt;wait&lt;/tt&gt; method
 was invoked.
 &lt;p&gt;
 A thread can also wake up without being notified, interrupted, or
 timing out, a so-called &lt;i&gt;spurious wakeup&lt;/i&gt;.  While this will rarely
 occur in practice, applications must guard against it by testing for
 the condition that should have caused the thread to be awakened, and
 continuing to wait if the condition is not satisfied.  In other words,
 waits should always occur in loops, like this one:
 &lt;pre&gt;
     synchronized (obj) {
         while (&amp;lt;condition does not hold&amp;gt;)
             obj.wait(timeout);
         ... // Perform action appropriate to condition
     }
 &lt;/pre&gt;
 (For more information on this topic, see Section 3.2.3 in Doug Lea&apos;s
 &quot;Concurrent Programming in Java (Second Edition)&quot; (Addison-Wesley,
 2000), or Item 50 in Joshua Bloch&apos;s &quot;Effective Java Programming
 Language Guide&quot; (Addison-Wesley, 2001).

 &lt;p&gt;If the current thread is {@linkplain java.lang.Thread#interrupt()
 interrupted} by any thread before or while it is waiting, then an
 &lt;tt&gt;InterruptedException&lt;/tt&gt; is thrown.  This exception is not
 thrown until the lock status of this object has been restored as
 described above.

 &lt;p&gt;
 Note that the &lt;tt&gt;wait&lt;/tt&gt; method, as it places the current thread
 into the wait set for this object, unlocks only this object; any
 other objects on which the current thread may be synchronized remain
 locked while the thread waits.
 &lt;p&gt;
 This method should only be called by a thread that is the owner
 of this object&apos;s monitor. See the &lt;code&gt;notify&lt;/code&gt; method for a
 description of the ways in which a thread can become the owner of
 a monitor.</description>
					<attribute name="@param">
						<description>timeout   the maximum time to wait in milliseconds.</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalArgumentException      if the value of timeout is
               negative.</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalMonitorStateException  if the current thread is not
               the owner of the object&apos;s monitor.</description>
					</attribute>
					<attribute name="@exception">
						<description>InterruptedException if any thread interrupted the
             current thread before or while the current thread
             was waiting for a notification.  The &lt;i&gt;interrupted
             status&lt;/i&gt; of the current thread is cleared when
             this exception is thrown.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Object#notify()</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Object#notifyAll()</description>
					</attribute>
				</comment>
				<params>
					<param name="timeout" comment="the maximum time to wait in milliseconds." fulltype="long" type="long" />
				</params>
				<exceptions>
					<exception comment="if any thread interrupted the
             current thread before or while the current thread
             was waiting for a notification.  The &lt;i&gt;interrupted
             status&lt;/i&gt; of the current thread is cleared when
             this exception is thrown." fulltype="java.lang.InterruptedException" type="InterruptedException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="wait" fulltype="void" type="void">
				<comment>
					<description>Causes the current thread to wait until another thread invokes the
 {@link java.lang.Object#notify()} method or the
 {@link java.lang.Object#notifyAll()} method for this object, or
 some other thread interrupts the current thread, or a certain
 amount of real time has elapsed.
 &lt;p&gt;
 This method is similar to the &lt;code&gt;wait&lt;/code&gt; method of one
 argument, but it allows finer control over the amount of time to
 wait for a notification before giving up. The amount of real time,
 measured in nanoseconds, is given by:
 &lt;blockquote&gt;
 &lt;pre&gt;
 1000000*timeout+nanos&lt;/pre&gt;&lt;/blockquote&gt;
 &lt;p&gt;
 In all other respects, this method does the same thing as the
 method {@link #wait(long)} of one argument. In particular,
 &lt;tt&gt;wait(0, 0)&lt;/tt&gt; means the same thing as &lt;tt&gt;wait(0)&lt;/tt&gt;.
 &lt;p&gt;
 The current thread must own this object&apos;s monitor. The thread
 releases ownership of this monitor and waits until either of the
 following two conditions has occurred:
 &lt;ul&gt;
 &lt;li&gt;Another thread notifies threads waiting on this object&apos;s monitor
     to wake up either through a call to the &lt;code&gt;notify&lt;/code&gt; method
     or the &lt;code&gt;notifyAll&lt;/code&gt; method.
 &lt;li&gt;The timeout period, specified by &lt;code&gt;timeout&lt;/code&gt;
     milliseconds plus &lt;code&gt;nanos&lt;/code&gt; nanoseconds arguments, has
     elapsed.
 &lt;/ul&gt;
 &lt;p&gt;
 The thread then waits until it can re-obtain ownership of the
 monitor and resumes execution.
 &lt;p&gt;
 As in the one argument version, interrupts and spurious wakeups are
 possible, and this method should always be used in a loop:
 &lt;pre&gt;
     synchronized (obj) {
         while (&amp;lt;condition does not hold&amp;gt;)
             obj.wait(timeout, nanos);
         ... // Perform action appropriate to condition
     }
 &lt;/pre&gt;
 This method should only be called by a thread that is the owner
 of this object&apos;s monitor. See the &lt;code&gt;notify&lt;/code&gt; method for a
 description of the ways in which a thread can become the owner of
 a monitor.</description>
					<attribute name="@param">
						<description>timeout   the maximum time to wait in milliseconds.</description>
					</attribute>
					<attribute name="@param">
						<description>nanos      additional time, in nanoseconds range
                       0-999999.</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalArgumentException      if the value of timeout is
                      negative or the value of nanos is
                      not in the range 0-999999.</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalMonitorStateException  if the current thread is not
               the owner of this object&apos;s monitor.</description>
					</attribute>
					<attribute name="@exception">
						<description>InterruptedException if any thread interrupted the
             current thread before or while the current thread
             was waiting for a notification.  The &lt;i&gt;interrupted
             status&lt;/i&gt; of the current thread is cleared when
             this exception is thrown.</description>
					</attribute>
				</comment>
				<params>
					<param name="timeout" comment="the maximum time to wait in milliseconds." fulltype="long" type="long" />
					<param name="nanos" comment="additional time, in nanoseconds range
                       0-999999." fulltype="int" type="int" />
				</params>
				<exceptions>
					<exception comment="if any thread interrupted the
             current thread before or while the current thread
             was waiting for a notification.  The &lt;i&gt;interrupted
             status&lt;/i&gt; of the current thread is cleared when
             this exception is thrown." fulltype="java.lang.InterruptedException" type="InterruptedException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="wait" fulltype="void" type="void">
				<comment>
					<description>Causes the current thread to wait until another thread invokes the
 {@link java.lang.Object#notify()} method or the
 {@link java.lang.Object#notifyAll()} method for this object.
 In other words, this method behaves exactly as if it simply
 performs the call &lt;tt&gt;wait(0)&lt;/tt&gt;.
 &lt;p&gt;
 The current thread must own this object&apos;s monitor. The thread
 releases ownership of this monitor and waits until another thread
 notifies threads waiting on this object&apos;s monitor to wake up
 either through a call to the &lt;code&gt;notify&lt;/code&gt; method or the
 &lt;code&gt;notifyAll&lt;/code&gt; method. The thread then waits until it can
 re-obtain ownership of the monitor and resumes execution.
 &lt;p&gt;
 As in the one argument version, interrupts and spurious wakeups are
 possible, and this method should always be used in a loop:
 &lt;pre&gt;
     synchronized (obj) {
         while (&amp;lt;condition does not hold&amp;gt;)
             obj.wait();
         ... // Perform action appropriate to condition
     }
 &lt;/pre&gt;
 This method should only be called by a thread that is the owner
 of this object&apos;s monitor. See the &lt;code&gt;notify&lt;/code&gt; method for a
 description of the ways in which a thread can become the owner of
 a monitor.</description>
					<attribute name="@exception">
						<description>IllegalMonitorStateException  if the current thread is not
               the owner of the object&apos;s monitor.</description>
					</attribute>
					<attribute name="@exception">
						<description>InterruptedException if any thread interrupted the
             current thread before or while the current thread
             was waiting for a notification.  The &lt;i&gt;interrupted
             status&lt;/i&gt; of the current thread is cleared when
             this exception is thrown.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Object#notify()</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Object#notifyAll()</description>
					</attribute>
				</comment>
				<exceptions>
					<exception comment="if any thread interrupted the
             current thread before or while the current thread
             was waiting for a notification.  The &lt;i&gt;interrupted
             status&lt;/i&gt; of the current thread is cleared when
             this exception is thrown." fulltype="java.lang.InterruptedException" type="InterruptedException" />
				</exceptions>
			</method>
			<method visibility="protected" name="finalize" fulltype="void" type="void">
				<comment>
					<description>Called by the garbage collector on an object when garbage collection
 determines that there are no more references to the object.
 A subclass overrides the &lt;code&gt;finalize&lt;/code&gt; method to dispose of
 system resources or to perform other cleanup.
 &lt;p&gt;
 The general contract of &lt;tt&gt;finalize&lt;/tt&gt; is that it is invoked
 if and when the Java&lt;font size=&quot;-2&quot;&gt;&lt;sup&gt;TM&lt;/sup&gt;&lt;/font&gt; virtual
 machine has determined that there is no longer any
 means by which this object can be accessed by any thread that has
 not yet died, except as a result of an action taken by the
 finalization of some other object or class which is ready to be
 finalized. The &lt;tt&gt;finalize&lt;/tt&gt; method may take any action, including
 making this object available again to other threads; the usual purpose
 of &lt;tt&gt;finalize&lt;/tt&gt;, however, is to perform cleanup actions before
 the object is irrevocably discarded. For example, the finalize method
 for an object that represents an input/output connection might perform
 explicit I/O transactions to break the connection before the object is
 permanently discarded.
 &lt;p&gt;
 The &lt;tt&gt;finalize&lt;/tt&gt; method of class &lt;tt&gt;Object&lt;/tt&gt; performs no
 special action; it simply returns normally. Subclasses of
 &lt;tt&gt;Object&lt;/tt&gt; may override this definition.
 &lt;p&gt;
 The Java programming language does not guarantee which thread will
 invoke the &lt;tt&gt;finalize&lt;/tt&gt; method for any given object. It is
 guaranteed, however, that the thread that invokes finalize will not
 be holding any user-visible synchronization locks when finalize is
 invoked. If an uncaught exception is thrown by the finalize method,
 the exception is ignored and finalization of that object terminates.
 &lt;p&gt;
 After the &lt;tt&gt;finalize&lt;/tt&gt; method has been invoked for an object, no
 further action is taken until the Java virtual machine has again
 determined that there is no longer any means by which this object can
 be accessed by any thread that has not yet died, including possible
 actions by other objects or classes which are ready to be finalized,
 at which point the object may be discarded.
 &lt;p&gt;
 The &lt;tt&gt;finalize&lt;/tt&gt; method is never invoked more than once by a Java
 virtual machine for any given object.
 &lt;p&gt;
 Any exception thrown by the &lt;code&gt;finalize&lt;/code&gt; method causes
 the finalization of this object to be halted, but is otherwise
 ignored.</description>
					<attribute name="@throws">
						<description>Throwable the &lt;code&gt;Exception&lt;/code&gt; raised by this method</description>
					</attribute>
				</comment>
				<exceptions>
					<exception comment="the &lt;code&gt;Exception&lt;/code&gt; raised by this method" fulltype="java.lang.Throwable" type="Throwable" />
				</exceptions>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="LinkageError" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.LinkageError" fulltype="java.lang.IncompatibleClassChangeError" type="IncompatibleClassChangeError">
		<comment>
			<description>Thrown when an incompatible class change has occurred to some class
 definition. The definition of some class, on which the currently
 executing method depends, has since changed.</description>
			<attribute name="@author">
				<description>unascribed</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.0</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="IncompatibleClassChangeError">
				<comment>
					<description>Constructs an &lt;code&gt;IncompatibleClassChangeError&lt;/code&gt; with no
 detail message.</description>
				</comment>
			</constructor>
			<constructor visibility="public" name="IncompatibleClassChangeError">
				<comment>
					<description>Constructs an &lt;code&gt;IncompatibleClassChangeError&lt;/code&gt; with the
 specified detail message.</description>
					<attribute name="@param">
						<description>s   the detail message.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the detail message." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass final="true" superclass="Enum" visibility="public" package="java.lang.annotation" serializable="true" superclassfulltype="java.lang.Enum" fulltype="java.lang.annotation.ElementType" type="ElementType">
		<comment>
			<description>A program element type.  The constants of this enumerated type
 provide a simple classification of the declared elements in a
 Java program.

 &lt;p&gt;These constants are used with the {@link Target} meta-annotation type
 to specify where it is legal to use an annotation type.</description>
			<attribute name="@author">
				<description>Joshua Bloch</description>
			</attribute>
			<attribute name="@since">
				<description>1.5</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" visibility="public" name="TYPE" fulltype="java.lang.annotation.ElementType" type="ElementType">
				<comment>
					<description>Class, interface (including annotation type), or enum declaration</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="FIELD" fulltype="java.lang.annotation.ElementType" type="ElementType">
				<comment>
					<description>Field declaration (includes enum constants)</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="METHOD" fulltype="java.lang.annotation.ElementType" type="ElementType">
				<comment>
					<description>Method declaration</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="PARAMETER" fulltype="java.lang.annotation.ElementType" type="ElementType">
				<comment>
					<description>Parameter declaration</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="CONSTRUCTOR" fulltype="java.lang.annotation.ElementType" type="ElementType">
				<comment>
					<description>Constructor declaration</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="LOCAL_VARIABLE" fulltype="java.lang.annotation.ElementType" type="ElementType">
				<comment>
					<description>Local variable declaration</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="ANNOTATION_TYPE" fulltype="java.lang.annotation.ElementType" type="ElementType">
				<comment>
					<description>Annotation type declaration</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="PACKAGE" fulltype="java.lang.annotation.ElementType" type="ElementType">
				<comment>
					<description>Package declaration</description>
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="private" name="ElementType" />
			<method static="true" visibility="public" name="values" fulltype="java.lang.annotation.ElementType[]" type="ElementType" />
			<method static="true" visibility="public" name="valueOf" fulltype="java.lang.annotation.ElementType" type="ElementType">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="java.lang.annotation" interface="true" fulltype="java.lang.annotation.Target" type="Target">
		<implements>
			<interface fulltype="java.lang.annotation.Annotation" type="Annotation" />
		</implements>
		<comment>
			<description>Indicates the kinds of program element to which an annotation type
 is applicable.  If a Target meta-annotation is not present on an
 annotation type declaration, the declared type may be used on any
 program element.  If such a meta-annotation is present, the compiler
 will enforce the specified usage restriction.

 For example, this meta-annotation indicates that the declared type is
 itself a meta-annotation type.  It can only be used on annotation type
 declarations:
 &lt;pre&gt;
    &amp;#064;Target(ElementType.ANNOTATION_TYPE)
    public &amp;#064;interface MetaAnnotationType {
        ...
    }
 &lt;/pre&gt;
 This meta-annotation indicates that the declared type is intended solely
 for use as a member type in complex annotation type declarations.  It
 cannot be used to annotate anything directly:
 &lt;pre&gt;
    &amp;#064;Target({})
    public &amp;#064;interface MemberType {
        ...
    }
 &lt;/pre&gt;
 It is a compile-time error for a single ElementType constant to
 appear more than once in a Target annotation.  For example, the
 following meta-annotation is illegal:
 &lt;pre&gt;
    &amp;#064;Target({ElementType.FIELD, ElementType.METHOD, ElementType.FIELD})
    public &amp;#064;interface Bogus {
        ...
    }
 &lt;/pre&gt;</description>
		</comment>
		<methods>
			<method visibility="public" name="value" fulltype="java.lang.annotation.ElementType[]" type="ElementType" />
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="java.lang.annotation" interface="true" fulltype="java.lang.annotation.Documented" type="Documented">
		<implements>
			<interface fulltype="java.lang.annotation.Annotation" type="Annotation" />
		</implements>
		<comment>
			<description>Indicates that annotations with a type are to be documented by javadoc
 and similar tools by default.  This type should be used to annotate the
 declarations of types whose annotations affect the use of annotated
 elements by their clients.  If a type declaration is annotated with
 Documented, its annotations become part of the public API
 of the annotated elements.</description>
			<attribute name="@author">
				<description>Joshua Bloch</description>
			</attribute>
			<attribute name="@since">
				<description>1.5</description>
			</attribute>
		</comment>
	</jelclass>
	<jelclass superclass="Error" visibility="public" package="java.lang.annotation" serializable="true" superclassfulltype="java.lang.Error" fulltype="java.lang.annotation.AnnotationFormatError" type="AnnotationFormatError">
		<comment>
			<description>Thrown when the annotation parser attempts to read an annotation
 from a class file and determines that the annotation is malformed.</description>
			<attribute name="@author">
				<description>Josh Bloch</description>
			</attribute>
			<attribute name="@since">
				<description>1.5</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="AnnotationFormatError">
				<comment>
					<description>Constructs a new &lt;tt&gt;AnnotationFormatError&lt;/tt&gt; with the specified
 detail message.</description>
					<attribute name="@param">
						<description>message   the detail message.</description>
					</attribute>
				</comment>
				<params>
					<param name="message" comment="the detail message." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="AnnotationFormatError">
				<comment>
					<description>Constructs a new &lt;tt&gt;AnnotationFormatError&lt;/tt&gt; with the specified
 detail message and cause.  Note that the detail message associated
 with &lt;code&gt;cause&lt;/code&gt; is &lt;i&gt;not&lt;/i&gt; automatically incorporated in
 this error&apos;s detail message.</description>
					<attribute name="@param">
						<description>message the detail message</description>
					</attribute>
					<attribute name="@param">
						<description>cause the cause (A &lt;tt&gt;null&lt;/tt&gt; value is permitted, and
     indicates that the cause is nonexistent or unknown.)</description>
					</attribute>
				</comment>
				<params>
					<param name="message" comment="the detail message" fulltype="java.lang.String" type="String" />
					<param name="cause" comment="the cause (A &lt;tt&gt;null&lt;/tt&gt; value is permitted, and
     indicates that the cause is nonexistent or unknown.)" fulltype="java.lang.Throwable" type="Throwable" />
				</params>
			</constructor>
			<constructor visibility="public" name="AnnotationFormatError">
				<comment>
					<description>Constructs a new &lt;tt&gt;AnnotationFormatError&lt;/tt&gt; with the specified
 cause and a detail message of
 &lt;tt&gt;(cause == null ? null : cause.toString())&lt;/tt&gt; (which
 typically contains the class and detail message of &lt;tt&gt;cause&lt;/tt&gt;).</description>
					<attribute name="@param">
						<description>cause the cause (A &lt;tt&gt;null&lt;/tt&gt; value is permitted, and
     indicates that the cause is nonexistent or unknown.)</description>
					</attribute>
				</comment>
				<params>
					<param name="cause" comment="the cause (A &lt;tt&gt;null&lt;/tt&gt; value is permitted, and
     indicates that the cause is nonexistent or unknown.)" fulltype="java.lang.Throwable" type="Throwable" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass superclass="RuntimeException" visibility="public" package="java.lang.annotation" serializable="true" superclassfulltype="java.lang.RuntimeException" fulltype="java.lang.annotation.AnnotationTypeMismatchException" type="AnnotationTypeMismatchException">
		<comment>
			<description>Thrown to indicate that a program has attempted to access an element of
 an annotation whose type has changed after the annotation was compiled
 (or serialized).</description>
			<attribute name="@author">
				<description>Josh Bloch</description>
			</attribute>
			<attribute name="@since">
				<description>1.5</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" visibility="private" name="element" fulltype="java.lang.reflect.Method" type="Method">
				<comment>
					<description>The &lt;tt&gt;Method&lt;/tt&gt; object for the annotation element.</description>
				</comment>
			</field>
			<field final="true" visibility="private" name="foundType" fulltype="java.lang.String" type="String">
				<comment>
					<description>The (erroneous) type of data found in the annotation.  This string
 may, but is not required to, contain the value as well.  The exact
 format of the string is unspecified.</description>
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="public" name="AnnotationTypeMismatchException">
				<comment>
					<description>Constructs an AnnotationTypeMismatchException for the specified
 annotation type element and found data type.</description>
					<attribute name="@param">
						<description>element the &lt;tt&gt;Method&lt;/tt&gt; object for the annotation element</description>
					</attribute>
					<attribute name="@param">
						<description>foundType the (erroneous) type of data found in the annotation.
        This string may, but is not required to, contain the value
        as well.  The exact format of the string is unspecified.</description>
					</attribute>
				</comment>
				<params>
					<param name="element" comment="the &lt;tt&gt;Method&lt;/tt&gt; object for the annotation element" fulltype="java.lang.reflect.Method" type="Method" />
					<param name="foundType" comment="the (erroneous) type of data found in the annotation.
        This string may, but is not required to, contain the value
        as well.  The exact format of the string is unspecified." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="element" returncomment="the &lt;tt&gt;Method&lt;/tt&gt; object for the incorrectly typed element" fulltype="java.lang.reflect.Method" type="Method">
				<comment>
					<description>Returns the &lt;tt&gt;Method&lt;/tt&gt; object for the incorrectly typed element.</description>
					<attribute name="@return">
						<description>the &lt;tt&gt;Method&lt;/tt&gt; object for the incorrectly typed element</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="foundType" returncomment="the type of data found in the incorrectly typed element" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the type of data found in the incorrectly typed element.
 The returned string may, but is not required to, contain the value
 as well.  The exact format of the string is unspecified.</description>
					<attribute name="@return">
						<description>the type of data found in the incorrectly typed element</description>
					</attribute>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="RuntimeException" visibility="public" package="java.lang.annotation" serializable="true" superclassfulltype="java.lang.RuntimeException" fulltype="java.lang.annotation.IncompleteAnnotationException" type="IncompleteAnnotationException">
		<comment>
			<description>Thrown to indicate that a program has attempted to access an element of
 an annotation type that was added to the annotation type definition after
 the annotation was compiled (or serialized).  This exception will not be
 thrown if the new element has a default value.</description>
			<attribute name="@author">
				<description>Josh Bloch</description>
			</attribute>
			<attribute name="@since">
				<description>1.5</description>
			</attribute>
		</comment>
		<fields>
			<field visibility="private" name="annotationType" fulltype="java.lang.Class" type="Class" />
			<field visibility="private" name="elementName" fulltype="java.lang.String" type="String" />
		</fields>
		<methods>
			<constructor visibility="public" name="IncompleteAnnotationException">
				<comment>
					<description>Constructs an IncompleteAnnotationException to indicate that
 the named element was missing from the specified annotation type.</description>
					<attribute name="@param">
						<description>annotationType the Class object for the annotation type</description>
					</attribute>
					<attribute name="@param">
						<description>elementName the name of the missing element</description>
					</attribute>
				</comment>
				<params>
					<param name="annotationType" comment="the Class object for the annotation type" fulltype="java.lang.Class" type="Class" />
					<param name="elementName" comment="the name of the missing element" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="annotationType" returncomment="the Class object for the annotation type with the
     missing element" fulltype="java.lang.Class" type="Class">
				<comment>
					<description>Returns the Class object for the annotation type with the
 missing element.</description>
					<attribute name="@return">
						<description>the Class object for the annotation type with the
     missing element</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="elementName" returncomment="the name of the missing element" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the name of the missing element.</description>
					<attribute name="@return">
						<description>the name of the missing element</description>
					</attribute>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="java.lang.annotation" interface="true" fulltype="java.lang.annotation.Annotation" type="Annotation">
		<comment>
			<description>The common interface extended by all annotation types.  Note that an
 interface that manually extends this one does &lt;i&gt;not&lt;/i&gt; define
 an annotation type.  Also note that this interface does not itself
 define an annotation type.</description>
			<attribute name="@author">
				<description>Josh Bloch</description>
			</attribute>
			<attribute name="@since">
				<description>1.5</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="equals" returncomment="true if the specified object represents an annotation
     that is logically equivalent to this one, otherwise false" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true if the specified object represents an annotation
 that is logically equivalent to this one.  In other words,
 returns true if the specified object is an instance of the same
 annotation type as this instance, all of whose members are equal
 to the corresponding member of this annotation, as defined below:
 &lt;ul&gt;
    &lt;li&gt;Two corresponding primitive typed members whose values are
    &lt;tt&gt;x&lt;/tt&gt; and &lt;tt&gt;y&lt;/tt&gt; are considered equal if &lt;tt&gt;x == y&lt;/tt&gt;,
    unless their type is &lt;tt&gt;float&lt;/tt&gt; or &lt;tt&gt;double&lt;/tt&gt;.

    &lt;li&gt;Two corresponding &lt;tt&gt;float&lt;/tt&gt; members whose values
    are &lt;tt&gt;x&lt;/tt&gt; and &lt;tt&gt;y&lt;/tt&gt; are considered equal if
    &lt;tt&gt;Float.valueOf(x).equals(Float.valueOf(y))&lt;/tt&gt;.
    (Unlike the &lt;tt&gt;==&lt;/tt&gt; operator, NaN is considered equal
    to itself, and &lt;tt&gt;0.0f&lt;/tt&gt; unequal to &lt;tt&gt;-0.0f&lt;/tt&gt;.)

    &lt;li&gt;Two corresponding &lt;tt&gt;double&lt;/tt&gt; members whose values
    are &lt;tt&gt;x&lt;/tt&gt; and &lt;tt&gt;y&lt;/tt&gt; are considered equal if
    &lt;tt&gt;Double.valueOf(x).equals(Double.valueOf(y))&lt;/tt&gt;.
    (Unlike the &lt;tt&gt;==&lt;/tt&gt; operator, NaN is considered equal
    to itself, and &lt;tt&gt;0.0&lt;/tt&gt; unequal to &lt;tt&gt;-0.0&lt;/tt&gt;.)

    &lt;li&gt;Two corresponding &lt;tt&gt;String&lt;/tt&gt;, &lt;tt&gt;Class&lt;/tt&gt;, enum, or
    annotation typed members whose values are &lt;tt&gt;x&lt;/tt&gt; and &lt;tt&gt;y&lt;/tt&gt;
    are considered equal if &lt;tt&gt;x.equals(y)&lt;/tt&gt;.  (Note that this
    definition is recursive for annotation typed members.)

    &lt;li&gt;Two corresponding array typed members &lt;tt&gt;x&lt;/tt&gt; and &lt;tt&gt;y&lt;/tt&gt;
    are considered equal if &lt;tt&gt;Arrays.equals(x, y)&lt;/tt&gt;, for the
    appropriate overloading of {@link java.util.Arrays#equals}.
 &lt;/ul&gt;</description>
					<attribute name="@return">
						<description>true if the specified object represents an annotation
     that is logically equivalent to this one, otherwise false</description>
					</attribute>
				</comment>
				<params>
					<param name="obj" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="hashCode" returncomment="the hash code of this annotation" fulltype="int" type="int">
				<comment>
					<description>Returns the hash code of this annotation, as defined below:

 &lt;p&gt;The hash code of an annotation is the sum of the hash codes
 of its members (including those with default values), as defined
 below:

 The hash code of an annotation member is (127 times the hash code
 of the member-name as computed by {@link String#hashCode()}) XOR
 the hash code of the member-value, as defined below:

 &lt;p&gt;The hash code of a member-value depends on its type:
 &lt;ul&gt;
 &lt;li&gt;The hash code of a primitive value &lt;tt&gt;&lt;i&gt;v&lt;/i&gt;&lt;/tt&gt; is equal to
     &lt;tt&gt;&lt;i&gt;WrapperType&lt;/i&gt;.valueOf(&lt;i&gt;v&lt;/i&gt;).hashCode()&lt;/tt&gt;, where
     &lt;tt&gt;&lt;i&gt;WrapperType&lt;/i&gt;&lt;/tt&gt; is the wrapper type corresponding
     to the primitive type of &lt;tt&gt;&lt;i&gt;v&lt;/i&gt;&lt;/tt&gt; ({@link Byte},
     {@link Character}, {@link Double}, {@link Float}, {@link Integer},
     {@link Long}, {@link Short}, or {@link Boolean}).

 &lt;li&gt;The hash code of a string, enum, class, or annotation member-value
     I     &lt;tt&gt;&lt;i&gt;v&lt;/i&gt;&lt;/tt&gt; is computed as by calling
     &lt;tt&gt;&lt;i&gt;v&lt;/i&gt;.hashCode()&lt;/tt&gt;.  (In the case of annotation
     member values, this is a recursive definition.)

 &lt;li&gt;The hash code of an array member-value is computed by calling
     the appropriate overloading of
     {@link java.util.Arrays#hashCode(long[]) Arrays.hashCode}
     on the value.  (There is one overloading for each primitive
     type, and one for object reference types.)
 &lt;/ul&gt;</description>
					<attribute name="@return">
						<description>the hash code of this annotation</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="toString" returncomment="a string representation of this annotation" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a string representation of this annotation.  The details
 of the representation are implementation-dependent, but the following
 may be regarded as typical:
 &lt;pre&gt;
   &amp;#064;com.acme.util.Name(first=Alfred, middle=E., last=Neuman)
 &lt;/pre&gt;</description>
					<attribute name="@return">
						<description>a string representation of this annotation</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="annotationType" fulltype="java.lang.Class" type="Class">
				<comment>
					<description>Returns the annotation type of this annotation.</description>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass final="true" superclass="Enum" visibility="public" package="java.lang.annotation" serializable="true" superclassfulltype="java.lang.Enum" fulltype="java.lang.annotation.RetentionPolicy" type="RetentionPolicy">
		<comment>
			<description>Annotation retention policy.  The constants of this enumerated type
 describe the various policies for retaining annotations.  They are used
 in conjunction with the {@link Retention} meta-annotation type to specify
 how long annotations are to be retained.</description>
			<attribute name="@author">
				<description>Joshua Bloch</description>
			</attribute>
			<attribute name="@since">
				<description>1.5</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" visibility="public" name="SOURCE" fulltype="java.lang.annotation.RetentionPolicy" type="RetentionPolicy">
				<comment>
					<description>Annotations are to be discarded by the compiler.</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="CLASS" fulltype="java.lang.annotation.RetentionPolicy" type="RetentionPolicy">
				<comment>
					<description>Annotations are to be recorded in the class file by the compiler
 but need not be retained by the VM at run time.  This is the default
 behavior.</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="RUNTIME" fulltype="java.lang.annotation.RetentionPolicy" type="RetentionPolicy">
				<comment>
					<description>Annotations are to be recorded in the class file by the compiler and
 retained by the VM at run time, so they may be read reflectively.</description>
					<attribute name="@see">
						<description>java.lang.reflect.AnnotatedElement</description>
					</attribute>
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="private" name="RetentionPolicy" />
			<method static="true" visibility="public" name="values" fulltype="java.lang.annotation.RetentionPolicy[]" type="RetentionPolicy" />
			<method static="true" visibility="public" name="valueOf" fulltype="java.lang.annotation.RetentionPolicy" type="RetentionPolicy">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="java.lang.annotation" interface="true" fulltype="java.lang.annotation.Retention" type="Retention">
		<implements>
			<interface fulltype="java.lang.annotation.Annotation" type="Annotation" />
		</implements>
		<comment>
			<description>Indicates how long annotations with the annotated type are to
 be retained.  If no Retention annotation is present on
 an annotation type declaration, the retention policy defaults to
 {@code RetentionPolicy.CLASS}.

 &lt;p&gt;A Retention meta-annotation has effect only if the
 meta-annotated type is used directly for annotation.  It has no
 effect if the meta-annotated type is used as a member type in
 another annotation type.</description>
			<attribute name="@author">
				<description>Joshua Bloch</description>
			</attribute>
			<attribute name="@since">
				<description>1.5</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="value" fulltype="java.lang.annotation.RetentionPolicy" type="RetentionPolicy" />
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="java.lang.annotation" interface="true" fulltype="java.lang.annotation.Inherited" type="Inherited">
		<implements>
			<interface fulltype="java.lang.annotation.Annotation" type="Annotation" />
		</implements>
		<comment>
			<description>Indicates that an annotation type is automatically inherited.  If
 an Inherited meta-annotation is present on an annotation type
 declaration, and the user queries the annotation type on a class
 declaration, and the class declaration has no annotation for this type,
 then the class&apos;s superclass will automatically be queried for the
 annotation type.  This process will be repeated until an annotation for this
 type is found, or the top of the class hierarchy (Object)
 is reached.  If no superclass has an annotation for this type, then
 the query will indicate that the class in question has no such annotation.

 &lt;p&gt;Note that this meta-annotation type has no effect if the annotated
 type is used to annotate anything other than a class.  Note also
 that this meta-annotation only causes annotations to be inherited
 from superclasses; annotations on implemented interfaces have no
 effect.</description>
			<attribute name="@author">
				<description>Joshua Bloch</description>
			</attribute>
			<attribute name="@since">
				<description>1.5</description>
			</attribute>
		</comment>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="java.lang" interface="true" fulltype="java.lang.SuppressWarnings" type="SuppressWarnings">
		<implements>
			<interface fulltype="java.lang.annotation.Annotation" type="Annotation" />
		</implements>
		<comment>
			<description>Indicates that the named compiler warnings should be suppressed in the
 annotated element (and in all program elements contained in the annotated
 element).  Note that the set of warnings suppressed in a given element is
 a superset of the warnings suppressed in all containing elements.  For
 example, if you annotate a class to suppress one warning and annotate a
 method to suppress another, both warnings will be suppressed in the method.

 &lt;p&gt;As a matter of style, programmers should always use this annotation
 on the most deeply nested element where it is effective.  If you want to
 suppress a warning in a particular method, you should annotate that
 method rather than its class.</description>
			<attribute name="@since">
				<description>1.5</description>
			</attribute>
			<attribute name="@author">
				<description>Josh Bloch</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="value" fulltype="java.lang.String[]" type="String">
				<comment>
					<description>The set of warnings that are to be suppressed by the compiler in the
 annotated element.  Duplicate names are permitted.  The second and
 successive occurrences of a name are ignored.  The presence of
 unrecognized warning names is &lt;i&gt;not&lt;/i&gt; an error: Compilers must
 ignore any warning names they do not recognize.  They are, however,
 free to emit a warning if an annotation contains an unrecognized
 warning name.

 &lt;p&gt;Compiler vendors should document the warning names they support in
 conjunction with this annotation type. They are encouraged to cooperate
 to ensure that the same names work across multiple compilers.</description>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass final="true" superclass="Object" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.Object" fulltype="java.lang.Character" type="Character">
		<implements>
			<interface fulltype="java.io.Serializable" type="Serializable" />
			<interface fulltype="java.lang.Comparable" type="Comparable" />
		</implements>
		<comment>
			<description>The &lt;code&gt;Character&lt;/code&gt; class wraps a value of the primitive
 type &lt;code&gt;char&lt;/code&gt; in an object. An object of type
 &lt;code&gt;Character&lt;/code&gt; contains a single field whose type is
 &lt;code&gt;char&lt;/code&gt;.
 &lt;p&gt;
 In addition, this class provides several methods for determining
 a character&apos;s category (lowercase letter, digit, etc.) and for converting
 characters from uppercase to lowercase and vice versa.
 &lt;p&gt;
 Character information is based on the Unicode Standard, version 4.0.
 &lt;p&gt;
 The methods and data of class &lt;code&gt;Character&lt;/code&gt; are defined by
 the information in the &lt;i&gt;UnicodeData&lt;/i&gt; file that is part of the
 Unicode Character Database maintained by the Unicode
 Consortium. This file specifies various properties including name
 and general category for every defined Unicode code point or
 character range.
 &lt;p&gt;
 The file and its description are available from the Unicode Consortium at:
 &lt;ul&gt;
 &lt;li&gt;&lt;a href=&quot;http://www.unicode.org&quot;&gt;http://www.unicode.org&lt;/a&gt;
 &lt;/ul&gt;

 &lt;h4&gt;&lt;a name=&quot;unicode&quot;&gt;Unicode Character Representations&lt;/a&gt;&lt;/h4&gt;

 &lt;p&gt;The &lt;code&gt;char&lt;/code&gt; data type (and therefore the value that a
 &lt;code&gt;Character&lt;/code&gt; object encapsulates) are based on the
 original Unicode specification, which defined characters as
 fixed-width 16-bit entities. The Unicode standard has since been
 changed to allow for characters whose representation requires more
 than 16 bits.  The range of legal &lt;em&gt;code point&lt;/em&gt;s is now
 U+0000 to U+10FFFF, known as &lt;em&gt;Unicode scalar value&lt;/em&gt;.
 (Refer to the &lt;a
 href=&quot;http://www.unicode.org/reports/tr27/#notation&quot;&gt;&lt;i&gt;
 definition&lt;/i&gt;&lt;/a&gt; of the U+&lt;i&gt;n&lt;/i&gt; notation in the Unicode
 standard.)

 &lt;p&gt;The set of characters from U+0000 to U+FFFF is sometimes
 referred to as the &lt;em&gt;Basic Multilingual Plane (BMP)&lt;/em&gt;. &lt;a
 name=&quot;supplementary&quot;&gt;Characters&lt;/a&gt; whose code points are greater
 than U+FFFF are called &lt;em&gt;supplementary character&lt;/em&gt;s.  The Java
 2 platform uses the UTF-16 representation in &lt;code&gt;char&lt;/code&gt;
 arrays and in the &lt;code&gt;String&lt;/code&gt; and &lt;code&gt;StringBuffer&lt;/code&gt;
 classes. In this representation, supplementary characters are
 represented as a pair of &lt;code&gt;char&lt;/code&gt; values, the first from
 the &lt;em&gt;high-surrogates&lt;/em&gt; range, (&amp;#92;uD800-&amp;#92;uDBFF), the
 second from the &lt;em&gt;low-surrogates&lt;/em&gt; range
 (&amp;#92;uDC00-&amp;#92;uDFFF).

 &lt;p&gt;A &lt;code&gt;char&lt;/code&gt; value, therefore, represents Basic
 Multilingual Plane (BMP) code points, including the surrogate
 code points, or code units of the UTF-16 encoding. An
 &lt;code&gt;int&lt;/code&gt; value represents all Unicode code points,
 including supplementary code points. The lower (least significant)
 21 bits of &lt;code&gt;int&lt;/code&gt; are used to represent Unicode code
 points and the upper (most significant) 11 bits must be zero.
 Unless otherwise specified, the behavior with respect to
 supplementary characters and surrogate &lt;code&gt;char&lt;/code&gt; values is
 as follows:

 &lt;ul&gt;
 &lt;li&gt;The methods that only accept a &lt;code&gt;char&lt;/code&gt; value cannot support
 supplementary characters. They treat &lt;code&gt;char&lt;/code&gt; values from the
 surrogate ranges as undefined characters. For example,
 &lt;code&gt;Character.isLetter(&apos;&amp;#92;uD840&apos;)&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;, even though
 this specific value if followed by any low-surrogate value in a string
 would represent a letter.

 &lt;li&gt;The methods that accept an &lt;code&gt;int&lt;/code&gt; value support all
 Unicode characters, including supplementary characters. For
 example, &lt;code&gt;Character.isLetter(0x2F81A)&lt;/code&gt; returns
 &lt;code&gt;true&lt;/code&gt; because the code point value represents a letter
 (a CJK ideograph).
 &lt;/ul&gt;

 &lt;p&gt;In the Java SE API documentation, &lt;em&gt;Unicode code point&lt;/em&gt; is
 used for character values in the range between U+0000 and U+10FFFF,
 and &lt;em&gt;Unicode code unit&lt;/em&gt; is used for 16-bit
 &lt;code&gt;char&lt;/code&gt; values that are code units of the &lt;em&gt;UTF-16&lt;/em&gt;
 encoding. For more information on Unicode terminology, refer to the
 &lt;a href=&quot;http://www.unicode.org/glossary/&quot;&gt;Unicode Glossary&lt;/a&gt;.</description>
			<attribute name="@author">
				<description>Lee Boynton</description>
			</attribute>
			<attribute name="@author">
				<description>Guy Steele</description>
			</attribute>
			<attribute name="@author">
				<description>Akira Tanaka</description>
			</attribute>
			<attribute name="@since">
				<description>1.0</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="2" visibility="public" name="MIN_RADIX" constexpr="2" fulltype="int" type="int">
				<comment>
					<description>The minimum radix available for conversion to and from strings.
 The constant value of this field is the smallest value permitted
 for the radix argument in radix-conversion methods such as the
 &lt;code&gt;digit&lt;/code&gt; method, the &lt;code&gt;forDigit&lt;/code&gt;
 method, and the &lt;code&gt;toString&lt;/code&gt; method of class
 &lt;code&gt;Integer&lt;/code&gt;.</description>
					<attribute name="@see">
						<description>java.lang.Character#digit(char, int)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#forDigit(int, int)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Integer#toString(int, int)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Integer#valueOf(java.lang.String)</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="36" visibility="public" name="MAX_RADIX" constexpr="36" fulltype="int" type="int">
				<comment>
					<description>The maximum radix available for conversion to and from strings.
 The constant value of this field is the largest value permitted
 for the radix argument in radix-conversion methods such as the
 &lt;code&gt;digit&lt;/code&gt; method, the &lt;code&gt;forDigit&lt;/code&gt;
 method, and the &lt;code&gt;toString&lt;/code&gt; method of class
 &lt;code&gt;Integer&lt;/code&gt;.</description>
					<attribute name="@see">
						<description>java.lang.Character#digit(char, int)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#forDigit(int, int)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Integer#toString(int, int)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Integer#valueOf(java.lang.String)</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="0" visibility="public" name="MIN_VALUE" constexpr="0" fulltype="char" type="char">
				<comment>
					<description>The constant value of this field is the smallest value of type
 &lt;code&gt;char&lt;/code&gt;, &lt;code&gt;&apos;&amp;#92;u0000&apos;&lt;/code&gt;.</description>
					<attribute name="@since">
						<description>1.0.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="65535" visibility="public" name="MAX_VALUE" constexpr="65535" fulltype="char" type="char">
				<comment>
					<description>The constant value of this field is the largest value of type
 &lt;code&gt;char&lt;/code&gt;, &lt;code&gt;&apos;&amp;#92;uFFFF&apos;&lt;/code&gt;.</description>
					<attribute name="@since">
						<description>1.0.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="TYPE" fulltype="java.lang.Class" type="Class">
				<comment>
					<description>The &lt;code&gt;Class&lt;/code&gt; instance representing the primitive type
 &lt;code&gt;char&lt;/code&gt;.</description>
					<attribute name="@since">
						<description>1.1</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="0" visibility="public" name="UNASSIGNED" constexpr="0" fulltype="byte" type="byte">
				<comment>
					<description>General category &quot;Cn&quot; in the Unicode specification.</description>
					<attribute name="@since">
						<description>1.1</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="1" visibility="public" name="UPPERCASE_LETTER" constexpr="1" fulltype="byte" type="byte">
				<comment>
					<description>General category &quot;Lu&quot; in the Unicode specification.</description>
					<attribute name="@since">
						<description>1.1</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="2" visibility="public" name="LOWERCASE_LETTER" constexpr="2" fulltype="byte" type="byte">
				<comment>
					<description>General category &quot;Ll&quot; in the Unicode specification.</description>
					<attribute name="@since">
						<description>1.1</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="3" visibility="public" name="TITLECASE_LETTER" constexpr="3" fulltype="byte" type="byte">
				<comment>
					<description>General category &quot;Lt&quot; in the Unicode specification.</description>
					<attribute name="@since">
						<description>1.1</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="4" visibility="public" name="MODIFIER_LETTER" constexpr="4" fulltype="byte" type="byte">
				<comment>
					<description>General category &quot;Lm&quot; in the Unicode specification.</description>
					<attribute name="@since">
						<description>1.1</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="5" visibility="public" name="OTHER_LETTER" constexpr="5" fulltype="byte" type="byte">
				<comment>
					<description>General category &quot;Lo&quot; in the Unicode specification.</description>
					<attribute name="@since">
						<description>1.1</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="6" visibility="public" name="NON_SPACING_MARK" constexpr="6" fulltype="byte" type="byte">
				<comment>
					<description>General category &quot;Mn&quot; in the Unicode specification.</description>
					<attribute name="@since">
						<description>1.1</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="7" visibility="public" name="ENCLOSING_MARK" constexpr="7" fulltype="byte" type="byte">
				<comment>
					<description>General category &quot;Me&quot; in the Unicode specification.</description>
					<attribute name="@since">
						<description>1.1</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="8" visibility="public" name="COMBINING_SPACING_MARK" constexpr="8" fulltype="byte" type="byte">
				<comment>
					<description>General category &quot;Mc&quot; in the Unicode specification.</description>
					<attribute name="@since">
						<description>1.1</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="9" visibility="public" name="DECIMAL_DIGIT_NUMBER" constexpr="9" fulltype="byte" type="byte">
				<comment>
					<description>General category &quot;Nd&quot; in the Unicode specification.</description>
					<attribute name="@since">
						<description>1.1</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="10" visibility="public" name="LETTER_NUMBER" constexpr="10" fulltype="byte" type="byte">
				<comment>
					<description>General category &quot;Nl&quot; in the Unicode specification.</description>
					<attribute name="@since">
						<description>1.1</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="11" visibility="public" name="OTHER_NUMBER" constexpr="11" fulltype="byte" type="byte">
				<comment>
					<description>General category &quot;No&quot; in the Unicode specification.</description>
					<attribute name="@since">
						<description>1.1</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="12" visibility="public" name="SPACE_SEPARATOR" constexpr="12" fulltype="byte" type="byte">
				<comment>
					<description>General category &quot;Zs&quot; in the Unicode specification.</description>
					<attribute name="@since">
						<description>1.1</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="13" visibility="public" name="LINE_SEPARATOR" constexpr="13" fulltype="byte" type="byte">
				<comment>
					<description>General category &quot;Zl&quot; in the Unicode specification.</description>
					<attribute name="@since">
						<description>1.1</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="14" visibility="public" name="PARAGRAPH_SEPARATOR" constexpr="14" fulltype="byte" type="byte">
				<comment>
					<description>General category &quot;Zp&quot; in the Unicode specification.</description>
					<attribute name="@since">
						<description>1.1</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="15" visibility="public" name="CONTROL" constexpr="15" fulltype="byte" type="byte">
				<comment>
					<description>General category &quot;Cc&quot; in the Unicode specification.</description>
					<attribute name="@since">
						<description>1.1</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="16" visibility="public" name="FORMAT" constexpr="16" fulltype="byte" type="byte">
				<comment>
					<description>General category &quot;Cf&quot; in the Unicode specification.</description>
					<attribute name="@since">
						<description>1.1</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="18" visibility="public" name="PRIVATE_USE" constexpr="18" fulltype="byte" type="byte">
				<comment>
					<description>General category &quot;Co&quot; in the Unicode specification.</description>
					<attribute name="@since">
						<description>1.1</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="19" visibility="public" name="SURROGATE" constexpr="19" fulltype="byte" type="byte">
				<comment>
					<description>General category &quot;Cs&quot; in the Unicode specification.</description>
					<attribute name="@since">
						<description>1.1</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="20" visibility="public" name="DASH_PUNCTUATION" constexpr="20" fulltype="byte" type="byte">
				<comment>
					<description>General category &quot;Pd&quot; in the Unicode specification.</description>
					<attribute name="@since">
						<description>1.1</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="21" visibility="public" name="START_PUNCTUATION" constexpr="21" fulltype="byte" type="byte">
				<comment>
					<description>General category &quot;Ps&quot; in the Unicode specification.</description>
					<attribute name="@since">
						<description>1.1</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="22" visibility="public" name="END_PUNCTUATION" constexpr="22" fulltype="byte" type="byte">
				<comment>
					<description>General category &quot;Pe&quot; in the Unicode specification.</description>
					<attribute name="@since">
						<description>1.1</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="23" visibility="public" name="CONNECTOR_PUNCTUATION" constexpr="23" fulltype="byte" type="byte">
				<comment>
					<description>General category &quot;Pc&quot; in the Unicode specification.</description>
					<attribute name="@since">
						<description>1.1</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="24" visibility="public" name="OTHER_PUNCTUATION" constexpr="24" fulltype="byte" type="byte">
				<comment>
					<description>General category &quot;Po&quot; in the Unicode specification.</description>
					<attribute name="@since">
						<description>1.1</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="25" visibility="public" name="MATH_SYMBOL" constexpr="25" fulltype="byte" type="byte">
				<comment>
					<description>General category &quot;Sm&quot; in the Unicode specification.</description>
					<attribute name="@since">
						<description>1.1</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="26" visibility="public" name="CURRENCY_SYMBOL" constexpr="26" fulltype="byte" type="byte">
				<comment>
					<description>General category &quot;Sc&quot; in the Unicode specification.</description>
					<attribute name="@since">
						<description>1.1</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="27" visibility="public" name="MODIFIER_SYMBOL" constexpr="27" fulltype="byte" type="byte">
				<comment>
					<description>General category &quot;Sk&quot; in the Unicode specification.</description>
					<attribute name="@since">
						<description>1.1</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="28" visibility="public" name="OTHER_SYMBOL" constexpr="28" fulltype="byte" type="byte">
				<comment>
					<description>General category &quot;So&quot; in the Unicode specification.</description>
					<attribute name="@since">
						<description>1.1</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="29" visibility="public" name="INITIAL_QUOTE_PUNCTUATION" constexpr="29" fulltype="byte" type="byte">
				<comment>
					<description>General category &quot;Pi&quot; in the Unicode specification.</description>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="30" visibility="public" name="FINAL_QUOTE_PUNCTUATION" constexpr="30" fulltype="byte" type="byte">
				<comment>
					<description>General category &quot;Pf&quot; in the Unicode specification.</description>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="-1" visibility="package-private" name="ERROR" constexpr="-1" fulltype="int" type="int">
				<comment>
					<description>Error flag. Use int (code point) to avoid confusion with U+FFFF.</description>
				</comment>
			</field>
			<field final="true" static="true" const="-1" visibility="public" name="DIRECTIONALITY_UNDEFINED" constexpr="-1" fulltype="byte" type="byte">
				<comment>
					<description>Undefined bidirectional character type. Undefined &lt;code&gt;char&lt;/code&gt;
 values have undefined directionality in the Unicode specification.</description>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="0" visibility="public" name="DIRECTIONALITY_LEFT_TO_RIGHT" constexpr="0" fulltype="byte" type="byte">
				<comment>
					<description>Strong bidirectional character type &quot;L&quot; in the Unicode specification.</description>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="1" visibility="public" name="DIRECTIONALITY_RIGHT_TO_LEFT" constexpr="1" fulltype="byte" type="byte">
				<comment>
					<description>Strong bidirectional character type &quot;R&quot; in the Unicode specification.</description>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="2" visibility="public" name="DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC" constexpr="2" fulltype="byte" type="byte">
				<comment>
					<description>Strong bidirectional character type &quot;AL&quot; in the Unicode specification.</description>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="3" visibility="public" name="DIRECTIONALITY_EUROPEAN_NUMBER" constexpr="3" fulltype="byte" type="byte">
				<comment>
					<description>Weak bidirectional character type &quot;EN&quot; in the Unicode specification.</description>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="4" visibility="public" name="DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR" constexpr="4" fulltype="byte" type="byte">
				<comment>
					<description>Weak bidirectional character type &quot;ES&quot; in the Unicode specification.</description>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="5" visibility="public" name="DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR" constexpr="5" fulltype="byte" type="byte">
				<comment>
					<description>Weak bidirectional character type &quot;ET&quot; in the Unicode specification.</description>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="6" visibility="public" name="DIRECTIONALITY_ARABIC_NUMBER" constexpr="6" fulltype="byte" type="byte">
				<comment>
					<description>Weak bidirectional character type &quot;AN&quot; in the Unicode specification.</description>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="7" visibility="public" name="DIRECTIONALITY_COMMON_NUMBER_SEPARATOR" constexpr="7" fulltype="byte" type="byte">
				<comment>
					<description>Weak bidirectional character type &quot;CS&quot; in the Unicode specification.</description>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="8" visibility="public" name="DIRECTIONALITY_NONSPACING_MARK" constexpr="8" fulltype="byte" type="byte">
				<comment>
					<description>Weak bidirectional character type &quot;NSM&quot; in the Unicode specification.</description>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="9" visibility="public" name="DIRECTIONALITY_BOUNDARY_NEUTRAL" constexpr="9" fulltype="byte" type="byte">
				<comment>
					<description>Weak bidirectional character type &quot;BN&quot; in the Unicode specification.</description>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="10" visibility="public" name="DIRECTIONALITY_PARAGRAPH_SEPARATOR" constexpr="10" fulltype="byte" type="byte">
				<comment>
					<description>Neutral bidirectional character type &quot;B&quot; in the Unicode specification.</description>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="11" visibility="public" name="DIRECTIONALITY_SEGMENT_SEPARATOR" constexpr="11" fulltype="byte" type="byte">
				<comment>
					<description>Neutral bidirectional character type &quot;S&quot; in the Unicode specification.</description>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="12" visibility="public" name="DIRECTIONALITY_WHITESPACE" constexpr="12" fulltype="byte" type="byte">
				<comment>
					<description>Neutral bidirectional character type &quot;WS&quot; in the Unicode specification.</description>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="13" visibility="public" name="DIRECTIONALITY_OTHER_NEUTRALS" constexpr="13" fulltype="byte" type="byte">
				<comment>
					<description>Neutral bidirectional character type &quot;ON&quot; in the Unicode specification.</description>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="14" visibility="public" name="DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING" constexpr="14" fulltype="byte" type="byte">
				<comment>
					<description>Strong bidirectional character type &quot;LRE&quot; in the Unicode specification.</description>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="15" visibility="public" name="DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE" constexpr="15" fulltype="byte" type="byte">
				<comment>
					<description>Strong bidirectional character type &quot;LRO&quot; in the Unicode specification.</description>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="16" visibility="public" name="DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING" constexpr="16" fulltype="byte" type="byte">
				<comment>
					<description>Strong bidirectional character type &quot;RLE&quot; in the Unicode specification.</description>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="17" visibility="public" name="DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE" constexpr="17" fulltype="byte" type="byte">
				<comment>
					<description>Strong bidirectional character type &quot;RLO&quot; in the Unicode specification.</description>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="18" visibility="public" name="DIRECTIONALITY_POP_DIRECTIONAL_FORMAT" constexpr="18" fulltype="byte" type="byte">
				<comment>
					<description>Weak bidirectional character type &quot;PDF&quot; in the Unicode specification.</description>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="55296" visibility="public" name="MIN_HIGH_SURROGATE" constexpr="55296" fulltype="char" type="char">
				<comment>
					<description>The minimum value of a Unicode high-surrogate code unit in the
 UTF-16 encoding. A high-surrogate is also known as a
 &lt;i&gt;leading-surrogate&lt;/i&gt;.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="56319" visibility="public" name="MAX_HIGH_SURROGATE" constexpr="56319" fulltype="char" type="char">
				<comment>
					<description>The maximum value of a Unicode high-surrogate code unit in the
 UTF-16 encoding. A high-surrogate is also known as a
 &lt;i&gt;leading-surrogate&lt;/i&gt;.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="56320" visibility="public" name="MIN_LOW_SURROGATE" constexpr="56320" fulltype="char" type="char">
				<comment>
					<description>The minimum value of a Unicode low-surrogate code unit in the
 UTF-16 encoding. A low-surrogate is also known as a
 &lt;i&gt;trailing-surrogate&lt;/i&gt;.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="57343" visibility="public" name="MAX_LOW_SURROGATE" constexpr="57343" fulltype="char" type="char">
				<comment>
					<description>The maximum value of a Unicode low-surrogate code unit in the
 UTF-16 encoding. A low-surrogate is also known as a
 &lt;i&gt;trailing-surrogate&lt;/i&gt;.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="55296" visibility="public" name="MIN_SURROGATE" constexpr="55296" fulltype="char" type="char">
				<comment>
					<description>The minimum value of a Unicode surrogate code unit in the UTF-16 encoding.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="57343" visibility="public" name="MAX_SURROGATE" constexpr="57343" fulltype="char" type="char">
				<comment>
					<description>The maximum value of a Unicode surrogate code unit in the UTF-16 encoding.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="65536" visibility="public" name="MIN_SUPPLEMENTARY_CODE_POINT" constexpr="65536" fulltype="int" type="int">
				<comment>
					<description>The minimum value of a supplementary code point.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="0" visibility="public" name="MIN_CODE_POINT" constexpr="0" fulltype="int" type="int">
				<comment>
					<description>The minimum value of a Unicode code point.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="1114111" visibility="public" name="MAX_CODE_POINT" constexpr="1114111" fulltype="int" type="int">
				<comment>
					<description>The maximum value of a Unicode code point.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
			<field final="true" visibility="private" name="value" fulltype="char" type="char">
				<comment>
					<description>The value of the &lt;code&gt;Character&lt;/code&gt;.</description>
					<attribute name="@serial" />
				</comment>
			</field>
			<field final="true" static="true" const="3786198910865385080" visibility="private" name="serialVersionUID" constexpr="3786198910865385080L" fulltype="long" type="long">
				<comment>
					<description>use serialVersionUID from JDK 1.0.2 for interoperability</description>
				</comment>
			</field>
			<field final="true" static="true" const="16" visibility="public" name="SIZE" constexpr="16" fulltype="int" type="int">
				<comment>
					<description>The number of bits used to represent a &lt;tt&gt;char&lt;/tt&gt; value in unsigned
 binary form.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="public" name="Character">
				<comment>
					<description>Constructs a newly allocated &lt;code&gt;Character&lt;/code&gt; object that
 represents the specified &lt;code&gt;char&lt;/code&gt; value.</description>
					<attribute name="@param">
						<description>value   the value to be represented by the
                  &lt;code&gt;Character&lt;/code&gt; object.</description>
					</attribute>
				</comment>
				<params>
					<param name="value" comment="the value to be represented by the
                  &lt;code&gt;Character&lt;/code&gt; object." fulltype="char" type="char" />
				</params>
			</constructor>
			<method static="true" visibility="public" name="valueOf" returncomment="a &lt;tt&gt;Character&lt;/tt&gt; instance representing &lt;tt&gt;c&lt;/tt&gt;." fulltype="java.lang.Character" type="Character">
				<comment>
					<description>Returns a &lt;tt&gt;Character&lt;/tt&gt; instance representing the specified
 &lt;tt&gt;char&lt;/tt&gt; value.
 If a new &lt;tt&gt;Character&lt;/tt&gt; instance is not required, this method
 should generally be used in preference to the constructor
 {@link #Character(char)}, as this method is likely to yield
 significantly better space and time performance by caching
 frequently requested values.</description>
					<attribute name="@param">
						<description>c a char value.</description>
					</attribute>
					<attribute name="@return">
						<description>a &lt;tt&gt;Character&lt;/tt&gt; instance representing &lt;tt&gt;c&lt;/tt&gt;.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="c" comment="a char value." fulltype="char" type="char" />
				</params>
			</method>
			<method visibility="public" name="charValue" returncomment="the primitive &lt;code&gt;char&lt;/code&gt; value represented by
          this object." fulltype="char" type="char">
				<comment>
					<description>Returns the value of this &lt;code&gt;Character&lt;/code&gt; object.</description>
					<attribute name="@return">
						<description>the primitive &lt;code&gt;char&lt;/code&gt; value represented by
          this object.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="hashCode" returncomment="a hash code value for this object." fulltype="int" type="int">
				<comment>
					<description>Returns a hash code for this &lt;code&gt;Character&lt;/code&gt;.</description>
					<attribute name="@return">
						<description>a hash code value for this object.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="equals" returncomment="&lt;code&gt;true&lt;/code&gt; if the objects are the same;
          &lt;code&gt;false&lt;/code&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Compares this object against the specified object.
 The result is &lt;code&gt;true&lt;/code&gt; if and only if the argument is not
 &lt;code&gt;null&lt;/code&gt; and is a &lt;code&gt;Character&lt;/code&gt; object that
 represents the same &lt;code&gt;char&lt;/code&gt; value as this object.</description>
					<attribute name="@param">
						<description>obj   the object to compare with.</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if the objects are the same;
          &lt;code&gt;false&lt;/code&gt; otherwise.</description>
					</attribute>
				</comment>
				<params>
					<param name="obj" comment="the object to compare with." fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="toString" returncomment="a string representation of this object." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a &lt;code&gt;String&lt;/code&gt; object representing this
 &lt;code&gt;Character&lt;/code&gt;&apos;s value.  The result is a string of
 length 1 whose sole component is the primitive
 &lt;code&gt;char&lt;/code&gt; value represented by this
 &lt;code&gt;Character&lt;/code&gt; object.</description>
					<attribute name="@return">
						<description>a string representation of this object.</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="toString" returncomment="the string representation of the specified &lt;code&gt;char&lt;/code&gt;" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a &lt;code&gt;String&lt;/code&gt; object representing the
 specified &lt;code&gt;char&lt;/code&gt;.  The result is a string of length
 1 consisting solely of the specified &lt;code&gt;char&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>c the &lt;code&gt;char&lt;/code&gt; to be converted</description>
					</attribute>
					<attribute name="@return">
						<description>the string representation of the specified &lt;code&gt;char&lt;/code&gt;</description>
					</attribute>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
				<params>
					<param name="c" comment="the &lt;code&gt;char&lt;/code&gt; to be converted" fulltype="char" type="char" />
				</params>
			</method>
			<method static="true" visibility="public" name="isValidCodePoint" returncomment="&lt;code&gt;true&lt;/code&gt; if the specified code point value
 is a valid code point value;
 &lt;code&gt;false&lt;/code&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Determines whether the specified code point is a valid Unicode
 code point value in the range of &lt;code&gt;0x0000&lt;/code&gt; to
 &lt;code&gt;0x10FFFF&lt;/code&gt; inclusive. This method is equivalent to
 the expression:

 &lt;blockquote&gt;&lt;pre&gt;
 codePoint &gt;= 0x0000 &amp;&amp; codePoint &lt;= 0x10FFFF
 &lt;/pre&gt;&lt;/blockquote&gt;</description>
					<attribute name="@param">
						<description>codePoint the Unicode code point to be tested</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if the specified code point value
 is a valid code point value;
 &lt;code&gt;false&lt;/code&gt; otherwise.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="codePoint" comment="the Unicode code point to be tested" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="isSupplementaryCodePoint" returncomment="&lt;code&gt;true&lt;/code&gt; if the specified character is in the Unicode
         supplementary character range; &lt;code&gt;false&lt;/code&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Determines whether the specified character (Unicode code point)
 is in the supplementary character range. The method call is
 equivalent to the expression:
 &lt;blockquote&gt;&lt;pre&gt;
 codePoint &gt;= 0x10000 &amp;&amp; codePoint &lt;= 0x10FFFF
 &lt;/pre&gt;&lt;/blockquote&gt;</description>
					<attribute name="@param">
						<description>codePoint the character (Unicode code point) to be tested</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if the specified character is in the Unicode
         supplementary character range; &lt;code&gt;false&lt;/code&gt; otherwise.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="codePoint" comment="the character (Unicode code point) to be tested" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="isHighSurrogate" returncomment="&lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;char&lt;/code&gt; value
          is between &apos;&amp;#92;uD800&apos; and &apos;&amp;#92;uDBFF&apos; inclusive;
          &lt;code&gt;false&lt;/code&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Determines if the given &lt;code&gt;char&lt;/code&gt; value is a
 high-surrogate code unit (also known as &lt;i&gt;leading-surrogate
 code unit&lt;/i&gt;). Such values do not represent characters by
 themselves, but are used in the representation of &lt;a
 href=&quot;#supplementary&quot;&gt;supplementary characters&lt;/a&gt; in the
 UTF-16 encoding.

 &lt;p&gt;This method returns &lt;code&gt;true&lt;/code&gt; if and only if
 &lt;blockquote&gt;&lt;pre&gt;ch &gt;= &apos;&amp;#92;uD800&apos; &amp;&amp; ch &lt;= &apos;&amp;#92;uDBFF&apos;
 &lt;/pre&gt;&lt;/blockquote&gt;
 is &lt;code&gt;true&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>ch   the &lt;code&gt;char&lt;/code&gt; value to be tested.</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;char&lt;/code&gt; value
          is between &apos;&amp;#92;uD800&apos; and &apos;&amp;#92;uDBFF&apos; inclusive;
          &lt;code&gt;false&lt;/code&gt; otherwise.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isLowSurrogate(char)</description>
					</attribute>
					<attribute name="@see">
						<description>Character.UnicodeBlock#of(int)</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="ch" comment="the &lt;code&gt;char&lt;/code&gt; value to be tested." fulltype="char" type="char" />
				</params>
			</method>
			<method static="true" visibility="public" name="isLowSurrogate" returncomment="&lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;char&lt;/code&gt; value
          is between &apos;&amp;#92;uDC00&apos; and &apos;&amp;#92;uDFFF&apos; inclusive;
          &lt;code&gt;false&lt;/code&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Determines if the given &lt;code&gt;char&lt;/code&gt; value is a
 low-surrogate code unit (also known as &lt;i&gt;trailing-surrogate code
 unit&lt;/i&gt;). Such values do not represent characters by themselves,
 but are used in the representation of &lt;a
 href=&quot;#supplementary&quot;&gt;supplementary characters&lt;/a&gt; in the UTF-16 encoding.

 &lt;p&gt; This method returns &lt;code&gt;true&lt;/code&gt; if and only if
 &lt;blockquote&gt;&lt;pre&gt;ch &gt;= &apos;&amp;#92;uDC00&apos; &amp;&amp; ch &lt;= &apos;&amp;#92;uDFFF&apos;
 &lt;/pre&gt;&lt;/blockquote&gt; is &lt;code&gt;true&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>ch   the &lt;code&gt;char&lt;/code&gt; value to be tested.</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;char&lt;/code&gt; value
          is between &apos;&amp;#92;uDC00&apos; and &apos;&amp;#92;uDFFF&apos; inclusive;
          &lt;code&gt;false&lt;/code&gt; otherwise.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isHighSurrogate(char)</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="ch" comment="the &lt;code&gt;char&lt;/code&gt; value to be tested." fulltype="char" type="char" />
				</params>
			</method>
			<method static="true" visibility="public" name="isSurrogatePair" returncomment="&lt;code&gt;true&lt;/code&gt; if the specified high and
 low-surrogate code values represent a valid surrogate pair;
 &lt;code&gt;false&lt;/code&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Determines whether the specified pair of &lt;code&gt;char&lt;/code&gt;
 values is a valid surrogate pair. This method is equivalent to
 the expression:
 &lt;blockquote&gt;&lt;pre&gt;
 isHighSurrogate(high) &amp;&amp; isLowSurrogate(low)
 &lt;/pre&gt;&lt;/blockquote&gt;</description>
					<attribute name="@param">
						<description>high the high-surrogate code value to be tested</description>
					</attribute>
					<attribute name="@param">
						<description>low the low-surrogate code value to be tested</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if the specified high and
 low-surrogate code values represent a valid surrogate pair;
 &lt;code&gt;false&lt;/code&gt; otherwise.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="high" comment="the high-surrogate code value to be tested" fulltype="char" type="char" />
					<param name="low" comment="the low-surrogate code value to be tested" fulltype="char" type="char" />
				</params>
			</method>
			<method static="true" visibility="public" name="charCount" returncomment="2 if the character is a valid supplementary character; 1 otherwise." fulltype="int" type="int">
				<comment>
					<description>Determines the number of &lt;code&gt;char&lt;/code&gt; values needed to
 represent the specified character (Unicode code point). If the
 specified character is equal to or greater than 0x10000, then
 the method returns 2. Otherwise, the method returns 1.

 &lt;p&gt;This method doesn&apos;t validate the specified character to be a
 valid Unicode code point. The caller must validate the
 character value using {@link #isValidCodePoint(int) isValidCodePoint}
 if necessary.</description>
					<attribute name="@param">
						<description>codePoint the character (Unicode code point) to be tested.</description>
					</attribute>
					<attribute name="@return">
						<description>2 if the character is a valid supplementary character; 1 otherwise.</description>
					</attribute>
					<attribute name="@see">
						<description>#isSupplementaryCodePoint(int)</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="codePoint" comment="the character (Unicode code point) to be tested." fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="toCodePoint" returncomment="the supplementary code point composed from the
         specified surrogate pair." fulltype="int" type="int">
				<comment>
					<description>Converts the specified surrogate pair to its supplementary code
 point value. This method does not validate the specified
 surrogate pair. The caller must validate it using {@link
 #isSurrogatePair(char, char) isSurrogatePair} if necessary.</description>
					<attribute name="@param">
						<description>high the high-surrogate code unit</description>
					</attribute>
					<attribute name="@param">
						<description>low the low-surrogate code unit</description>
					</attribute>
					<attribute name="@return">
						<description>the supplementary code point composed from the
         specified surrogate pair.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="high" comment="the high-surrogate code unit" fulltype="char" type="char" />
					<param name="low" comment="the low-surrogate code unit" fulltype="char" type="char" />
				</params>
			</method>
			<method static="true" visibility="public" name="codePointAt" returncomment="the Unicode code point at the given index" fulltype="int" type="int">
				<comment>
					<description>Returns the code point at the given index of the
 &lt;code&gt;CharSequence&lt;/code&gt;. If the &lt;code&gt;char&lt;/code&gt; value at
 the given index in the &lt;code&gt;CharSequence&lt;/code&gt; is in the
 high-surrogate range, the following index is less than the
 length of the &lt;code&gt;CharSequence&lt;/code&gt;, and the
 &lt;code&gt;char&lt;/code&gt; value at the following index is in the
 low-surrogate range, then the supplementary code point
 corresponding to this surrogate pair is returned. Otherwise,
 the &lt;code&gt;char&lt;/code&gt; value at the given index is returned.</description>
					<attribute name="@param">
						<description>seq a sequence of &lt;code&gt;char&lt;/code&gt; values (Unicode code
 units)</description>
					</attribute>
					<attribute name="@param">
						<description>index the index to the &lt;code&gt;char&lt;/code&gt; values (Unicode
 code units) in &lt;code&gt;seq&lt;/code&gt; to be converted</description>
					</attribute>
					<attribute name="@return">
						<description>the Unicode code point at the given index</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException if &lt;code&gt;seq&lt;/code&gt; is null.</description>
					</attribute>
					<attribute name="@exception">
						<description>IndexOutOfBoundsException if the value
 &lt;code&gt;index&lt;/code&gt; is negative or not less than
 {@link CharSequence#length() seq.length()}.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="seq" comment="a sequence of &lt;code&gt;char&lt;/code&gt; values (Unicode code
 units)" fulltype="java.lang.CharSequence" type="CharSequence" />
					<param name="index" comment="the index to the &lt;code&gt;char&lt;/code&gt; values (Unicode
 code units) in &lt;code&gt;seq&lt;/code&gt; to be converted" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="codePointAt" returncomment="the Unicode code point at the given index" fulltype="int" type="int">
				<comment>
					<description>Returns the code point at the given index of the
 &lt;code&gt;char&lt;/code&gt; array. If the &lt;code&gt;char&lt;/code&gt; value at
 the given index in the &lt;code&gt;char&lt;/code&gt; array is in the
 high-surrogate range, the following index is less than the
 length of the &lt;code&gt;char&lt;/code&gt; array, and the
 &lt;code&gt;char&lt;/code&gt; value at the following index is in the
 low-surrogate range, then the supplementary code point
 corresponding to this surrogate pair is returned. Otherwise,
 the &lt;code&gt;char&lt;/code&gt; value at the given index is returned.</description>
					<attribute name="@param">
						<description>a the &lt;code&gt;char&lt;/code&gt; array</description>
					</attribute>
					<attribute name="@param">
						<description>index the index to the &lt;code&gt;char&lt;/code&gt; values (Unicode
 code units) in the &lt;code&gt;char&lt;/code&gt; array to be converted</description>
					</attribute>
					<attribute name="@return">
						<description>the Unicode code point at the given index</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException if &lt;code&gt;a&lt;/code&gt; is null.</description>
					</attribute>
					<attribute name="@exception">
						<description>IndexOutOfBoundsException if the value
 &lt;code&gt;index&lt;/code&gt; is negative or not less than
 the length of the &lt;code&gt;char&lt;/code&gt; array.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="the &lt;code&gt;char&lt;/code&gt; array" fulltype="char[]" type="char" />
					<param name="index" comment="the index to the &lt;code&gt;char&lt;/code&gt; values (Unicode
 code units) in the &lt;code&gt;char&lt;/code&gt; array to be converted" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="codePointAt" returncomment="the Unicode code point at the given index" fulltype="int" type="int">
				<comment>
					<description>Returns the code point at the given index of the
 &lt;code&gt;char&lt;/code&gt; array, where only array elements with
 &lt;code&gt;index&lt;/code&gt; less than &lt;code&gt;limit&lt;/code&gt; can be used. If
 the &lt;code&gt;char&lt;/code&gt; value at the given index in the
 &lt;code&gt;char&lt;/code&gt; array is in the high-surrogate range, the
 following index is less than the &lt;code&gt;limit&lt;/code&gt;, and the
 &lt;code&gt;char&lt;/code&gt; value at the following index is in the
 low-surrogate range, then the supplementary code point
 corresponding to this surrogate pair is returned. Otherwise,
 the &lt;code&gt;char&lt;/code&gt; value at the given index is returned.</description>
					<attribute name="@param">
						<description>a the &lt;code&gt;char&lt;/code&gt; array</description>
					</attribute>
					<attribute name="@param">
						<description>index the index to the &lt;code&gt;char&lt;/code&gt; values (Unicode
 code units) in the &lt;code&gt;char&lt;/code&gt; array to be converted</description>
					</attribute>
					<attribute name="@param">
						<description>limit the index after the last array element that can be used in the
 &lt;code&gt;char&lt;/code&gt; array</description>
					</attribute>
					<attribute name="@return">
						<description>the Unicode code point at the given index</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException if &lt;code&gt;a&lt;/code&gt; is null.</description>
					</attribute>
					<attribute name="@exception">
						<description>IndexOutOfBoundsException if the &lt;code&gt;index&lt;/code&gt;
 argument is negative or not less than the &lt;code&gt;limit&lt;/code&gt;
 argument, or if the &lt;code&gt;limit&lt;/code&gt; argument is negative or
 greater than the length of the &lt;code&gt;char&lt;/code&gt; array.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="the &lt;code&gt;char&lt;/code&gt; array" fulltype="char[]" type="char" />
					<param name="index" comment="the index to the &lt;code&gt;char&lt;/code&gt; values (Unicode
 code units) in the &lt;code&gt;char&lt;/code&gt; array to be converted" fulltype="int" type="int" />
					<param name="limit" comment="the index after the last array element that can be used in the
 &lt;code&gt;char&lt;/code&gt; array" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="package-private" name="codePointAtImpl" fulltype="int" type="int">
				<params>
					<param name="a" fulltype="char[]" type="char" />
					<param name="index" fulltype="int" type="int" />
					<param name="limit" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="codePointBefore" returncomment="the Unicode code point value before the given index." fulltype="int" type="int">
				<comment>
					<description>Returns the code point preceding the given index of the
 &lt;code&gt;CharSequence&lt;/code&gt;. If the &lt;code&gt;char&lt;/code&gt; value at
 &lt;code&gt;(index - 1)&lt;/code&gt; in the &lt;code&gt;CharSequence&lt;/code&gt; is in
 the low-surrogate range, &lt;code&gt;(index - 2)&lt;/code&gt; is not
 negative, and the &lt;code&gt;char&lt;/code&gt; value at &lt;code&gt;(index -
 2)&lt;/code&gt; in the &lt;code&gt;CharSequence&lt;/code&gt; is in the
 high-surrogate range, then the supplementary code point
 corresponding to this surrogate pair is returned. Otherwise,
 the &lt;code&gt;char&lt;/code&gt; value at &lt;code&gt;(index - 1)&lt;/code&gt; is
 returned.</description>
					<attribute name="@param">
						<description>seq the &lt;code&gt;CharSequence&lt;/code&gt; instance</description>
					</attribute>
					<attribute name="@param">
						<description>index the index following the code point that should be returned</description>
					</attribute>
					<attribute name="@return">
						<description>the Unicode code point value before the given index.</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException if &lt;code&gt;seq&lt;/code&gt; is null.</description>
					</attribute>
					<attribute name="@exception">
						<description>IndexOutOfBoundsException if the &lt;code&gt;index&lt;/code&gt;
 argument is less than 1 or greater than {@link
 CharSequence#length() seq.length()}.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="seq" comment="the &lt;code&gt;CharSequence&lt;/code&gt; instance" fulltype="java.lang.CharSequence" type="CharSequence" />
					<param name="index" comment="the index following the code point that should be returned" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="codePointBefore" returncomment="the Unicode code point value before the given index." fulltype="int" type="int">
				<comment>
					<description>Returns the code point preceding the given index of the
 &lt;code&gt;char&lt;/code&gt; array. If the &lt;code&gt;char&lt;/code&gt; value at
 &lt;code&gt;(index - 1)&lt;/code&gt; in the &lt;code&gt;char&lt;/code&gt; array is in
 the low-surrogate range, &lt;code&gt;(index - 2)&lt;/code&gt; is not
 negative, and the &lt;code&gt;char&lt;/code&gt; value at &lt;code&gt;(index -
 2)&lt;/code&gt; in the &lt;code&gt;char&lt;/code&gt; array is in the
 high-surrogate range, then the supplementary code point
 corresponding to this surrogate pair is returned. Otherwise,
 the &lt;code&gt;char&lt;/code&gt; value at &lt;code&gt;(index - 1)&lt;/code&gt; is
 returned.</description>
					<attribute name="@param">
						<description>a the &lt;code&gt;char&lt;/code&gt; array</description>
					</attribute>
					<attribute name="@param">
						<description>index the index following the code point that should be returned</description>
					</attribute>
					<attribute name="@return">
						<description>the Unicode code point value before the given index.</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException if &lt;code&gt;a&lt;/code&gt; is null.</description>
					</attribute>
					<attribute name="@exception">
						<description>IndexOutOfBoundsException if the &lt;code&gt;index&lt;/code&gt;
 argument is less than 1 or greater than the length of the
 &lt;code&gt;char&lt;/code&gt; array</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="the &lt;code&gt;char&lt;/code&gt; array" fulltype="char[]" type="char" />
					<param name="index" comment="the index following the code point that should be returned" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="codePointBefore" returncomment="the Unicode code point value before the given index." fulltype="int" type="int">
				<comment>
					<description>Returns the code point preceding the given index of the
 &lt;code&gt;char&lt;/code&gt; array, where only array elements with
 &lt;code&gt;index&lt;/code&gt; greater than or equal to &lt;code&gt;start&lt;/code&gt;
 can be used. If the &lt;code&gt;char&lt;/code&gt; value at &lt;code&gt;(index -
 1)&lt;/code&gt; in the &lt;code&gt;char&lt;/code&gt; array is in the
 low-surrogate range, &lt;code&gt;(index - 2)&lt;/code&gt; is not less than
 &lt;code&gt;start&lt;/code&gt;, and the &lt;code&gt;char&lt;/code&gt; value at
 &lt;code&gt;(index - 2)&lt;/code&gt; in the &lt;code&gt;char&lt;/code&gt; array is in
 the high-surrogate range, then the supplementary code point
 corresponding to this surrogate pair is returned. Otherwise,
 the &lt;code&gt;char&lt;/code&gt; value at &lt;code&gt;(index - 1)&lt;/code&gt; is
 returned.</description>
					<attribute name="@param">
						<description>a the &lt;code&gt;char&lt;/code&gt; array</description>
					</attribute>
					<attribute name="@param">
						<description>index the index following the code point that should be returned</description>
					</attribute>
					<attribute name="@param">
						<description>start the index of the first array element in the
 &lt;code&gt;char&lt;/code&gt; array</description>
					</attribute>
					<attribute name="@return">
						<description>the Unicode code point value before the given index.</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException if &lt;code&gt;a&lt;/code&gt; is null.</description>
					</attribute>
					<attribute name="@exception">
						<description>IndexOutOfBoundsException if the &lt;code&gt;index&lt;/code&gt;
 argument is not greater than the &lt;code&gt;start&lt;/code&gt; argument or
 is greater than the length of the &lt;code&gt;char&lt;/code&gt; array, or
 if the &lt;code&gt;start&lt;/code&gt; argument is negative or not less than
 the length of the &lt;code&gt;char&lt;/code&gt; array.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="the &lt;code&gt;char&lt;/code&gt; array" fulltype="char[]" type="char" />
					<param name="index" comment="the index following the code point that should be returned" fulltype="int" type="int" />
					<param name="start" comment="the index of the first array element in the
 &lt;code&gt;char&lt;/code&gt; array" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="package-private" name="codePointBeforeImpl" fulltype="int" type="int">
				<params>
					<param name="a" fulltype="char[]" type="char" />
					<param name="index" fulltype="int" type="int" />
					<param name="start" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="toChars" returncomment="1 if the code point is a BMP code point, 2 if the
 code point is a supplementary code point." fulltype="int" type="int">
				<comment>
					<description>Converts the specified character (Unicode code point) to its
 UTF-16 representation. If the specified code point is a BMP
 (Basic Multilingual Plane or Plane 0) value, the same value is
 stored in &lt;code&gt;dst[dstIndex]&lt;/code&gt;, and 1 is returned. If the
 specified code point is a supplementary character, its
 surrogate values are stored in &lt;code&gt;dst[dstIndex]&lt;/code&gt;
 (high-surrogate) and &lt;code&gt;dst[dstIndex+1]&lt;/code&gt;
 (low-surrogate), and 2 is returned.</description>
					<attribute name="@param">
						<description>codePoint the character (Unicode code point) to be converted.</description>
					</attribute>
					<attribute name="@param">
						<description>dst an array of &lt;code&gt;char&lt;/code&gt; in which the
 &lt;code&gt;codePoint&lt;/code&gt;&apos;s UTF-16 value is stored.</description>
					</attribute>
					<attribute name="@param">
						<description>dstIndex the start index into the &lt;code&gt;dst&lt;/code&gt;
 array where the converted value is stored.</description>
					</attribute>
					<attribute name="@return">
						<description>1 if the code point is a BMP code point, 2 if the
 code point is a supplementary code point.</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalArgumentException if the specified
 &lt;code&gt;codePoint&lt;/code&gt; is not a valid Unicode code point.</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException if the specified &lt;code&gt;dst&lt;/code&gt; is null.</description>
					</attribute>
					<attribute name="@exception">
						<description>IndexOutOfBoundsException if &lt;code&gt;dstIndex&lt;/code&gt;
 is negative or not less than &lt;code&gt;dst.length&lt;/code&gt;, or if
 &lt;code&gt;dst&lt;/code&gt; at &lt;code&gt;dstIndex&lt;/code&gt; doesn&apos;t have enough
 array element(s) to store the resulting &lt;code&gt;char&lt;/code&gt;
 value(s). (If &lt;code&gt;dstIndex&lt;/code&gt; is equal to
 &lt;code&gt;dst.length-1&lt;/code&gt; and the specified
 &lt;code&gt;codePoint&lt;/code&gt; is a supplementary character, the
 high-surrogate value is not stored in
 &lt;code&gt;dst[dstIndex]&lt;/code&gt;.)</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="codePoint" comment="the character (Unicode code point) to be converted." fulltype="int" type="int" />
					<param name="dst" comment="an array of &lt;code&gt;char&lt;/code&gt; in which the
 &lt;code&gt;codePoint&lt;/code&gt;&apos;s UTF-16 value is stored." fulltype="char[]" type="char" />
					<param name="dstIndex" comment="the start index into the &lt;code&gt;dst&lt;/code&gt;
 array where the converted value is stored." fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="toChars" returncomment="a &lt;code&gt;char&lt;/code&gt; array having
         &lt;code&gt;codePoint&lt;/code&gt;&apos;s UTF-16 representation." fulltype="char[]" type="char">
				<comment>
					<description>Converts the specified character (Unicode code point) to its
 UTF-16 representation stored in a &lt;code&gt;char&lt;/code&gt; array. If
 the specified code point is a BMP (Basic Multilingual Plane or
 Plane 0) value, the resulting &lt;code&gt;char&lt;/code&gt; array has
 the same value as &lt;code&gt;codePoint&lt;/code&gt;. If the specified code
 point is a supplementary code point, the resulting
 &lt;code&gt;char&lt;/code&gt; array has the corresponding surrogate pair.</description>
					<attribute name="@param">
						<description>codePoint a Unicode code point</description>
					</attribute>
					<attribute name="@return">
						<description>a &lt;code&gt;char&lt;/code&gt; array having
         &lt;code&gt;codePoint&lt;/code&gt;&apos;s UTF-16 representation.</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalArgumentException if the specified
 &lt;code&gt;codePoint&lt;/code&gt; is not a valid Unicode code point.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="codePoint" comment="a Unicode code point" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="package-private" name="toSurrogates" fulltype="void" type="void">
				<params>
					<param name="codePoint" fulltype="int" type="int" />
					<param name="dst" fulltype="char[]" type="char" />
					<param name="index" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="codePointCount" returncomment="the number of Unicode code points in the specified text
 range" fulltype="int" type="int">
				<comment>
					<description>Returns the number of Unicode code points in the text range of
 the specified char sequence. The text range begins at the
 specified &lt;code&gt;beginIndex&lt;/code&gt; and extends to the
 &lt;code&gt;char&lt;/code&gt; at index &lt;code&gt;endIndex - 1&lt;/code&gt;. Thus the
 length (in &lt;code&gt;char&lt;/code&gt;s) of the text range is
 &lt;code&gt;endIndex-beginIndex&lt;/code&gt;. Unpaired surrogates within
 the text range count as one code point each.</description>
					<attribute name="@param">
						<description>seq the char sequence</description>
					</attribute>
					<attribute name="@param">
						<description>beginIndex the index to the first &lt;code&gt;char&lt;/code&gt; of
 the text range.</description>
					</attribute>
					<attribute name="@param">
						<description>endIndex the index after the last &lt;code&gt;char&lt;/code&gt; of
 the text range.</description>
					</attribute>
					<attribute name="@return">
						<description>the number of Unicode code points in the specified text
 range</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException if &lt;code&gt;seq&lt;/code&gt; is null.</description>
					</attribute>
					<attribute name="@exception">
						<description>IndexOutOfBoundsException if the
 &lt;code&gt;beginIndex&lt;/code&gt; is negative, or &lt;code&gt;endIndex&lt;/code&gt;
 is larger than the length of the given sequence, or
 &lt;code&gt;beginIndex&lt;/code&gt; is larger than &lt;code&gt;endIndex&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="seq" comment="the char sequence" fulltype="java.lang.CharSequence" type="CharSequence" />
					<param name="beginIndex" comment="the index to the first &lt;code&gt;char&lt;/code&gt; of
 the text range." fulltype="int" type="int" />
					<param name="endIndex" comment="the index after the last &lt;code&gt;char&lt;/code&gt; of
 the text range." fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="codePointCount" returncomment="the number of Unicode code points in the specified subarray" fulltype="int" type="int">
				<comment>
					<description>Returns the number of Unicode code points in a subarray of the
 &lt;code&gt;char&lt;/code&gt; array argument. The &lt;code&gt;offset&lt;/code&gt;
 argument is the index of the first &lt;code&gt;char&lt;/code&gt; of the
 subarray and the &lt;code&gt;count&lt;/code&gt; argument specifies the
 length of the subarray in &lt;code&gt;char&lt;/code&gt;s. Unpaired
 surrogates within the subarray count as one code point each.</description>
					<attribute name="@param">
						<description>a the &lt;code&gt;char&lt;/code&gt; array</description>
					</attribute>
					<attribute name="@param">
						<description>offset the index of the first &lt;code&gt;char&lt;/code&gt; in the
 given &lt;code&gt;char&lt;/code&gt; array</description>
					</attribute>
					<attribute name="@param">
						<description>count the length of the subarray in &lt;code&gt;char&lt;/code&gt;s</description>
					</attribute>
					<attribute name="@return">
						<description>the number of Unicode code points in the specified subarray</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException if &lt;code&gt;a&lt;/code&gt; is null.</description>
					</attribute>
					<attribute name="@exception">
						<description>IndexOutOfBoundsException if &lt;code&gt;offset&lt;/code&gt; or
 &lt;code&gt;count&lt;/code&gt; is negative, or if &lt;code&gt;offset +
 count&lt;/code&gt; is larger than the length of the given array.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="the &lt;code&gt;char&lt;/code&gt; array" fulltype="char[]" type="char" />
					<param name="offset" comment="the index of the first &lt;code&gt;char&lt;/code&gt; in the
 given &lt;code&gt;char&lt;/code&gt; array" fulltype="int" type="int" />
					<param name="count" comment="the length of the subarray in &lt;code&gt;char&lt;/code&gt;s" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="package-private" name="codePointCountImpl" fulltype="int" type="int">
				<params>
					<param name="a" fulltype="char[]" type="char" />
					<param name="offset" fulltype="int" type="int" />
					<param name="count" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="offsetByCodePoints" returncomment="the index within the char sequence" fulltype="int" type="int">
				<comment>
					<description>Returns the index within the given char sequence that is offset
 from the given &lt;code&gt;index&lt;/code&gt; by &lt;code&gt;codePointOffset&lt;/code&gt;
 code points. Unpaired surrogates within the text range given by
 &lt;code&gt;index&lt;/code&gt; and &lt;code&gt;codePointOffset&lt;/code&gt; count as
 one code point each.</description>
					<attribute name="@param">
						<description>seq the char sequence</description>
					</attribute>
					<attribute name="@param">
						<description>index the index to be offset</description>
					</attribute>
					<attribute name="@param">
						<description>codePointOffset the offset in code points</description>
					</attribute>
					<attribute name="@return">
						<description>the index within the char sequence</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException if &lt;code&gt;seq&lt;/code&gt; is null.</description>
					</attribute>
					<attribute name="@exception">
						<description>IndexOutOfBoundsException if &lt;code&gt;index&lt;/code&gt;
   is negative or larger then the length of the char sequence,
   or if &lt;code&gt;codePointOffset&lt;/code&gt; is positive and the
   subsequence starting with &lt;code&gt;index&lt;/code&gt; has fewer than
   &lt;code&gt;codePointOffset&lt;/code&gt; code points, or if
   &lt;code&gt;codePointOffset&lt;/code&gt; is negative and the subsequence
   before &lt;code&gt;index&lt;/code&gt; has fewer than the absolute value
   of &lt;code&gt;codePointOffset&lt;/code&gt; code points.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="seq" comment="the char sequence" fulltype="java.lang.CharSequence" type="CharSequence" />
					<param name="index" comment="the index to be offset" fulltype="int" type="int" />
					<param name="codePointOffset" comment="the offset in code points" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="offsetByCodePoints" returncomment="the index within the subarray" fulltype="int" type="int">
				<comment>
					<description>Returns the index within the given &lt;code&gt;char&lt;/code&gt; subarray
 that is offset from the given &lt;code&gt;index&lt;/code&gt; by
 &lt;code&gt;codePointOffset&lt;/code&gt; code points. The
 &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;count&lt;/code&gt; arguments specify a
 subarray of the &lt;code&gt;char&lt;/code&gt; array. Unpaired surrogates
 within the text range given by &lt;code&gt;index&lt;/code&gt; and
 &lt;code&gt;codePointOffset&lt;/code&gt; count as one code point each.</description>
					<attribute name="@param">
						<description>a the &lt;code&gt;char&lt;/code&gt; array</description>
					</attribute>
					<attribute name="@param">
						<description>start the index of the first &lt;code&gt;char&lt;/code&gt; of the
 subarray</description>
					</attribute>
					<attribute name="@param">
						<description>count the length of the subarray in &lt;code&gt;char&lt;/code&gt;s</description>
					</attribute>
					<attribute name="@param">
						<description>index the index to be offset</description>
					</attribute>
					<attribute name="@param">
						<description>codePointOffset the offset in code points</description>
					</attribute>
					<attribute name="@return">
						<description>the index within the subarray</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException if &lt;code&gt;a&lt;/code&gt; is null.</description>
					</attribute>
					<attribute name="@exception">
						<description>IndexOutOfBoundsException
   if &lt;code&gt;start&lt;/code&gt; or &lt;code&gt;count&lt;/code&gt; is negative,
   or if &lt;code&gt;start + count&lt;/code&gt; is larger than the length of
   the given array,
   or if &lt;code&gt;index&lt;/code&gt; is less than &lt;code&gt;start&lt;/code&gt; or
   larger then &lt;code&gt;start + count&lt;/code&gt;,
   or if &lt;code&gt;codePointOffset&lt;/code&gt; is positive and the text range
   starting with &lt;code&gt;index&lt;/code&gt; and ending with &lt;code&gt;start
   + count - 1&lt;/code&gt; has fewer than &lt;code&gt;codePointOffset&lt;/code&gt; code
   points,
   or if &lt;code&gt;codePointOffset&lt;/code&gt; is negative and the text range
   starting with &lt;code&gt;start&lt;/code&gt; and ending with &lt;code&gt;index
   - 1&lt;/code&gt; has fewer than the absolute value of
   &lt;code&gt;codePointOffset&lt;/code&gt; code points.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="a" comment="the &lt;code&gt;char&lt;/code&gt; array" fulltype="char[]" type="char" />
					<param name="start" comment="the index of the first &lt;code&gt;char&lt;/code&gt; of the
 subarray" fulltype="int" type="int" />
					<param name="count" comment="the length of the subarray in &lt;code&gt;char&lt;/code&gt;s" fulltype="int" type="int" />
					<param name="index" comment="the index to be offset" fulltype="int" type="int" />
					<param name="codePointOffset" comment="the offset in code points" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="package-private" name="offsetByCodePointsImpl" fulltype="int" type="int">
				<params>
					<param name="a" fulltype="char[]" type="char" />
					<param name="start" fulltype="int" type="int" />
					<param name="count" fulltype="int" type="int" />
					<param name="index" fulltype="int" type="int" />
					<param name="codePointOffset" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="isLowerCase" returncomment="&lt;code&gt;true&lt;/code&gt; if the character is lowercase;
          &lt;code&gt;false&lt;/code&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Determines if the specified character is a lowercase character.
 &lt;p&gt;
 A character is lowercase if its general category type, provided
 by &lt;code&gt;Character.getType(ch)&lt;/code&gt;, is
 &lt;code&gt;LOWERCASE_LETTER&lt;/code&gt;.
 &lt;p&gt;
 The following are examples of lowercase characters:
 &lt;p&gt;&lt;blockquote&gt;&lt;pre&gt;
 a b c d e f g h i j k l m n o p q r s t u v w x y z
 &apos;&amp;#92;u00DF&apos; &apos;&amp;#92;u00E0&apos; &apos;&amp;#92;u00E1&apos; &apos;&amp;#92;u00E2&apos; &apos;&amp;#92;u00E3&apos; &apos;&amp;#92;u00E4&apos; &apos;&amp;#92;u00E5&apos; &apos;&amp;#92;u00E6&apos;
 &apos;&amp;#92;u00E7&apos; &apos;&amp;#92;u00E8&apos; &apos;&amp;#92;u00E9&apos; &apos;&amp;#92;u00EA&apos; &apos;&amp;#92;u00EB&apos; &apos;&amp;#92;u00EC&apos; &apos;&amp;#92;u00ED&apos; &apos;&amp;#92;u00EE&apos;
 &apos;&amp;#92;u00EF&apos; &apos;&amp;#92;u00F0&apos; &apos;&amp;#92;u00F1&apos; &apos;&amp;#92;u00F2&apos; &apos;&amp;#92;u00F3&apos; &apos;&amp;#92;u00F4&apos; &apos;&amp;#92;u00F5&apos; &apos;&amp;#92;u00F6&apos;
 &apos;&amp;#92;u00F8&apos; &apos;&amp;#92;u00F9&apos; &apos;&amp;#92;u00FA&apos; &apos;&amp;#92;u00FB&apos; &apos;&amp;#92;u00FC&apos; &apos;&amp;#92;u00FD&apos; &apos;&amp;#92;u00FE&apos; &apos;&amp;#92;u00FF&apos;
 &lt;/pre&gt;&lt;/blockquote&gt;
 &lt;p&gt; Many other Unicode characters are lowercase too.

 &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; This method cannot handle &lt;a
 href=&quot;#supplementary&quot;&gt; supplementary characters&lt;/a&gt;. To support
 all Unicode characters, including supplementary characters, use
 the {@link #isLowerCase(int)} method.</description>
					<attribute name="@param">
						<description>ch   the character to be tested.</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if the character is lowercase;
          &lt;code&gt;false&lt;/code&gt; otherwise.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isLowerCase(char)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isTitleCase(char)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#toLowerCase(char)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#getType(char)</description>
					</attribute>
				</comment>
				<params>
					<param name="ch" comment="the character to be tested." fulltype="char" type="char" />
				</params>
			</method>
			<method static="true" visibility="public" name="isLowerCase" returncomment="&lt;code&gt;true&lt;/code&gt; if the character is lowercase;
          &lt;code&gt;false&lt;/code&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Determines if the specified character (Unicode code point) is a
 lowercase character.
 &lt;p&gt;
 A character is lowercase if its general category type, provided
 by {@link Character#getType getType(codePoint)}, is
 &lt;code&gt;LOWERCASE_LETTER&lt;/code&gt;.
 &lt;p&gt;
 The following are examples of lowercase characters:
 &lt;p&gt;&lt;blockquote&gt;&lt;pre&gt;
 a b c d e f g h i j k l m n o p q r s t u v w x y z
 &apos;&amp;#92;u00DF&apos; &apos;&amp;#92;u00E0&apos; &apos;&amp;#92;u00E1&apos; &apos;&amp;#92;u00E2&apos; &apos;&amp;#92;u00E3&apos; &apos;&amp;#92;u00E4&apos; &apos;&amp;#92;u00E5&apos; &apos;&amp;#92;u00E6&apos;
 &apos;&amp;#92;u00E7&apos; &apos;&amp;#92;u00E8&apos; &apos;&amp;#92;u00E9&apos; &apos;&amp;#92;u00EA&apos; &apos;&amp;#92;u00EB&apos; &apos;&amp;#92;u00EC&apos; &apos;&amp;#92;u00ED&apos; &apos;&amp;#92;u00EE&apos;
 &apos;&amp;#92;u00EF&apos; &apos;&amp;#92;u00F0&apos; &apos;&amp;#92;u00F1&apos; &apos;&amp;#92;u00F2&apos; &apos;&amp;#92;u00F3&apos; &apos;&amp;#92;u00F4&apos; &apos;&amp;#92;u00F5&apos; &apos;&amp;#92;u00F6&apos;
 &apos;&amp;#92;u00F8&apos; &apos;&amp;#92;u00F9&apos; &apos;&amp;#92;u00FA&apos; &apos;&amp;#92;u00FB&apos; &apos;&amp;#92;u00FC&apos; &apos;&amp;#92;u00FD&apos; &apos;&amp;#92;u00FE&apos; &apos;&amp;#92;u00FF&apos;
 &lt;/pre&gt;&lt;/blockquote&gt;
 &lt;p&gt; Many other Unicode characters are lowercase too.</description>
					<attribute name="@param">
						<description>codePoint the character (Unicode code point) to be tested.</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if the character is lowercase;
          &lt;code&gt;false&lt;/code&gt; otherwise.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isLowerCase(int)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isTitleCase(int)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#toLowerCase(int)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#getType(int)</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="codePoint" comment="the character (Unicode code point) to be tested." fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="isUpperCase" returncomment="&lt;code&gt;true&lt;/code&gt; if the character is uppercase;
          &lt;code&gt;false&lt;/code&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Determines if the specified character is an uppercase character.
 &lt;p&gt;
 A character is uppercase if its general category type, provided by
 &lt;code&gt;Character.getType(ch)&lt;/code&gt;, is &lt;code&gt;UPPERCASE_LETTER&lt;/code&gt;.
 &lt;p&gt;
 The following are examples of uppercase characters:
 &lt;p&gt;&lt;blockquote&gt;&lt;pre&gt;
 A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
 &apos;&amp;#92;u00C0&apos; &apos;&amp;#92;u00C1&apos; &apos;&amp;#92;u00C2&apos; &apos;&amp;#92;u00C3&apos; &apos;&amp;#92;u00C4&apos; &apos;&amp;#92;u00C5&apos; &apos;&amp;#92;u00C6&apos; &apos;&amp;#92;u00C7&apos;
 &apos;&amp;#92;u00C8&apos; &apos;&amp;#92;u00C9&apos; &apos;&amp;#92;u00CA&apos; &apos;&amp;#92;u00CB&apos; &apos;&amp;#92;u00CC&apos; &apos;&amp;#92;u00CD&apos; &apos;&amp;#92;u00CE&apos; &apos;&amp;#92;u00CF&apos;
 &apos;&amp;#92;u00D0&apos; &apos;&amp;#92;u00D1&apos; &apos;&amp;#92;u00D2&apos; &apos;&amp;#92;u00D3&apos; &apos;&amp;#92;u00D4&apos; &apos;&amp;#92;u00D5&apos; &apos;&amp;#92;u00D6&apos; &apos;&amp;#92;u00D8&apos;
 &apos;&amp;#92;u00D9&apos; &apos;&amp;#92;u00DA&apos; &apos;&amp;#92;u00DB&apos; &apos;&amp;#92;u00DC&apos; &apos;&amp;#92;u00DD&apos; &apos;&amp;#92;u00DE&apos;
 &lt;/pre&gt;&lt;/blockquote&gt;
 &lt;p&gt; Many other Unicode characters are uppercase too.&lt;p&gt;

 &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; This method cannot handle &lt;a
 href=&quot;#supplementary&quot;&gt; supplementary characters&lt;/a&gt;. To support
 all Unicode characters, including supplementary characters, use
 the {@link #isUpperCase(int)} method.</description>
					<attribute name="@param">
						<description>ch   the character to be tested.</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if the character is uppercase;
          &lt;code&gt;false&lt;/code&gt; otherwise.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isLowerCase(char)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isTitleCase(char)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#toUpperCase(char)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#getType(char)</description>
					</attribute>
					<attribute name="@since">
						<description>1.0</description>
					</attribute>
				</comment>
				<params>
					<param name="ch" comment="the character to be tested." fulltype="char" type="char" />
				</params>
			</method>
			<method static="true" visibility="public" name="isUpperCase" returncomment="&lt;code&gt;true&lt;/code&gt; if the character is uppercase;
          &lt;code&gt;false&lt;/code&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Determines if the specified character (Unicode code point) is an uppercase character.
 &lt;p&gt;
 A character is uppercase if its general category type, provided by
 {@link Character#getType(int) getType(codePoint)}, is &lt;code&gt;UPPERCASE_LETTER&lt;/code&gt;.
 &lt;p&gt;
 The following are examples of uppercase characters:
 &lt;p&gt;&lt;blockquote&gt;&lt;pre&gt;
 A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
 &apos;&amp;#92;u00C0&apos; &apos;&amp;#92;u00C1&apos; &apos;&amp;#92;u00C2&apos; &apos;&amp;#92;u00C3&apos; &apos;&amp;#92;u00C4&apos; &apos;&amp;#92;u00C5&apos; &apos;&amp;#92;u00C6&apos; &apos;&amp;#92;u00C7&apos;
 &apos;&amp;#92;u00C8&apos; &apos;&amp;#92;u00C9&apos; &apos;&amp;#92;u00CA&apos; &apos;&amp;#92;u00CB&apos; &apos;&amp;#92;u00CC&apos; &apos;&amp;#92;u00CD&apos; &apos;&amp;#92;u00CE&apos; &apos;&amp;#92;u00CF&apos;
 &apos;&amp;#92;u00D0&apos; &apos;&amp;#92;u00D1&apos; &apos;&amp;#92;u00D2&apos; &apos;&amp;#92;u00D3&apos; &apos;&amp;#92;u00D4&apos; &apos;&amp;#92;u00D5&apos; &apos;&amp;#92;u00D6&apos; &apos;&amp;#92;u00D8&apos;
 &apos;&amp;#92;u00D9&apos; &apos;&amp;#92;u00DA&apos; &apos;&amp;#92;u00DB&apos; &apos;&amp;#92;u00DC&apos; &apos;&amp;#92;u00DD&apos; &apos;&amp;#92;u00DE&apos;
 &lt;/pre&gt;&lt;/blockquote&gt;
 &lt;p&gt; Many other Unicode characters are uppercase too.&lt;p&gt;</description>
					<attribute name="@param">
						<description>codePoint the character (Unicode code point) to be tested.</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if the character is uppercase;
          &lt;code&gt;false&lt;/code&gt; otherwise.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isLowerCase(int)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isTitleCase(int)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#toUpperCase(int)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#getType(int)</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="codePoint" comment="the character (Unicode code point) to be tested." fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="isTitleCase" returncomment="&lt;code&gt;true&lt;/code&gt; if the character is titlecase;
          &lt;code&gt;false&lt;/code&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Determines if the specified character is a titlecase character.
 &lt;p&gt;
 A character is a titlecase character if its general
 category type, provided by &lt;code&gt;Character.getType(ch)&lt;/code&gt;,
 is &lt;code&gt;TITLECASE_LETTER&lt;/code&gt;.
 &lt;p&gt;
 Some characters look like pairs of Latin letters. For example, there
 is an uppercase letter that looks like &quot;LJ&quot; and has a corresponding
 lowercase letter that looks like &quot;lj&quot;. A third form, which looks like &quot;Lj&quot;,
 is the appropriate form to use when rendering a word in lowercase
 with initial capitals, as for a book title.
 &lt;p&gt;
 These are some of the Unicode characters for which this method returns
 &lt;code&gt;true&lt;/code&gt;:
 &lt;ul&gt;
 &lt;li&gt;&lt;code&gt;LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON&lt;/code&gt;
 &lt;li&gt;&lt;code&gt;LATIN CAPITAL LETTER L WITH SMALL LETTER J&lt;/code&gt;
 &lt;li&gt;&lt;code&gt;LATIN CAPITAL LETTER N WITH SMALL LETTER J&lt;/code&gt;
 &lt;li&gt;&lt;code&gt;LATIN CAPITAL LETTER D WITH SMALL LETTER Z&lt;/code&gt;
 &lt;/ul&gt;
 &lt;p&gt; Many other Unicode characters are titlecase too.&lt;p&gt;

 &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; This method cannot handle &lt;a
 href=&quot;#supplementary&quot;&gt; supplementary characters&lt;/a&gt;. To support
 all Unicode characters, including supplementary characters, use
 the {@link #isTitleCase(int)} method.</description>
					<attribute name="@param">
						<description>ch   the character to be tested.</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if the character is titlecase;
          &lt;code&gt;false&lt;/code&gt; otherwise.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isLowerCase(char)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isUpperCase(char)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#toTitleCase(char)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#getType(char)</description>
					</attribute>
					<attribute name="@since">
						<description>1.0.2</description>
					</attribute>
				</comment>
				<params>
					<param name="ch" comment="the character to be tested." fulltype="char" type="char" />
				</params>
			</method>
			<method static="true" visibility="public" name="isTitleCase" returncomment="&lt;code&gt;true&lt;/code&gt; if the character is titlecase;
          &lt;code&gt;false&lt;/code&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Determines if the specified character (Unicode code point) is a titlecase character.
 &lt;p&gt;
 A character is a titlecase character if its general
 category type, provided by {@link Character#getType(int) getType(codePoint)},
 is &lt;code&gt;TITLECASE_LETTER&lt;/code&gt;.
 &lt;p&gt;
 Some characters look like pairs of Latin letters. For example, there
 is an uppercase letter that looks like &quot;LJ&quot; and has a corresponding
 lowercase letter that looks like &quot;lj&quot;. A third form, which looks like &quot;Lj&quot;,
 is the appropriate form to use when rendering a word in lowercase
 with initial capitals, as for a book title.
 &lt;p&gt;
 These are some of the Unicode characters for which this method returns
 &lt;code&gt;true&lt;/code&gt;:
 &lt;ul&gt;
 &lt;li&gt;&lt;code&gt;LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON&lt;/code&gt;
 &lt;li&gt;&lt;code&gt;LATIN CAPITAL LETTER L WITH SMALL LETTER J&lt;/code&gt;
 &lt;li&gt;&lt;code&gt;LATIN CAPITAL LETTER N WITH SMALL LETTER J&lt;/code&gt;
 &lt;li&gt;&lt;code&gt;LATIN CAPITAL LETTER D WITH SMALL LETTER Z&lt;/code&gt;
 &lt;/ul&gt;
 &lt;p&gt; Many other Unicode characters are titlecase too.&lt;p&gt;</description>
					<attribute name="@param">
						<description>codePoint the character (Unicode code point) to be tested.</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if the character is titlecase;
          &lt;code&gt;false&lt;/code&gt; otherwise.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isLowerCase(int)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isUpperCase(int)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#toTitleCase(int)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#getType(int)</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="codePoint" comment="the character (Unicode code point) to be tested." fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="isDigit" returncomment="&lt;code&gt;true&lt;/code&gt; if the character is a digit;
          &lt;code&gt;false&lt;/code&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Determines if the specified character is a digit.
 &lt;p&gt;
 A character is a digit if its general category type, provided
 by &lt;code&gt;Character.getType(ch)&lt;/code&gt;, is
 &lt;code&gt;DECIMAL_DIGIT_NUMBER&lt;/code&gt;.
 &lt;p&gt;
 Some Unicode character ranges that contain digits:
 &lt;ul&gt;
 &lt;li&gt;&lt;code&gt;&apos;&amp;#92;u0030&apos;&lt;/code&gt; through &lt;code&gt;&apos;&amp;#92;u0039&apos;&lt;/code&gt;,
     ISO-LATIN-1 digits (&lt;code&gt;&apos;0&apos;&lt;/code&gt; through &lt;code&gt;&apos;9&apos;&lt;/code&gt;)
 &lt;li&gt;&lt;code&gt;&apos;&amp;#92;u0660&apos;&lt;/code&gt; through &lt;code&gt;&apos;&amp;#92;u0669&apos;&lt;/code&gt;,
     Arabic-Indic digits
 &lt;li&gt;&lt;code&gt;&apos;&amp;#92;u06F0&apos;&lt;/code&gt; through &lt;code&gt;&apos;&amp;#92;u06F9&apos;&lt;/code&gt;,
     Extended Arabic-Indic digits
 &lt;li&gt;&lt;code&gt;&apos;&amp;#92;u0966&apos;&lt;/code&gt; through &lt;code&gt;&apos;&amp;#92;u096F&apos;&lt;/code&gt;,
     Devanagari digits
 &lt;li&gt;&lt;code&gt;&apos;&amp;#92;uFF10&apos;&lt;/code&gt; through &lt;code&gt;&apos;&amp;#92;uFF19&apos;&lt;/code&gt;,
     Fullwidth digits
 &lt;/ul&gt;

 Many other character ranges contain digits as well.

 &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; This method cannot handle &lt;a
 href=&quot;#supplementary&quot;&gt; supplementary characters&lt;/a&gt;. To support
 all Unicode characters, including supplementary characters, use
 the {@link #isDigit(int)} method.</description>
					<attribute name="@param">
						<description>ch   the character to be tested.</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if the character is a digit;
          &lt;code&gt;false&lt;/code&gt; otherwise.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#digit(char, int)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#forDigit(int, int)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#getType(char)</description>
					</attribute>
				</comment>
				<params>
					<param name="ch" comment="the character to be tested." fulltype="char" type="char" />
				</params>
			</method>
			<method static="true" visibility="public" name="isDigit" returncomment="&lt;code&gt;true&lt;/code&gt; if the character is a digit;
          &lt;code&gt;false&lt;/code&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Determines if the specified character (Unicode code point) is a digit.
 &lt;p&gt;
 A character is a digit if its general category type, provided
 by {@link Character#getType(int) getType(codePoint)}, is
 &lt;code&gt;DECIMAL_DIGIT_NUMBER&lt;/code&gt;.
 &lt;p&gt;
 Some Unicode character ranges that contain digits:
 &lt;ul&gt;
 &lt;li&gt;&lt;code&gt;&apos;&amp;#92;u0030&apos;&lt;/code&gt; through &lt;code&gt;&apos;&amp;#92;u0039&apos;&lt;/code&gt;,
     ISO-LATIN-1 digits (&lt;code&gt;&apos;0&apos;&lt;/code&gt; through &lt;code&gt;&apos;9&apos;&lt;/code&gt;)
 &lt;li&gt;&lt;code&gt;&apos;&amp;#92;u0660&apos;&lt;/code&gt; through &lt;code&gt;&apos;&amp;#92;u0669&apos;&lt;/code&gt;,
     Arabic-Indic digits
 &lt;li&gt;&lt;code&gt;&apos;&amp;#92;u06F0&apos;&lt;/code&gt; through &lt;code&gt;&apos;&amp;#92;u06F9&apos;&lt;/code&gt;,
     Extended Arabic-Indic digits
 &lt;li&gt;&lt;code&gt;&apos;&amp;#92;u0966&apos;&lt;/code&gt; through &lt;code&gt;&apos;&amp;#92;u096F&apos;&lt;/code&gt;,
     Devanagari digits
 &lt;li&gt;&lt;code&gt;&apos;&amp;#92;uFF10&apos;&lt;/code&gt; through &lt;code&gt;&apos;&amp;#92;uFF19&apos;&lt;/code&gt;,
     Fullwidth digits
 &lt;/ul&gt;

 Many other character ranges contain digits as well.</description>
					<attribute name="@param">
						<description>codePoint the character (Unicode code point) to be tested.</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if the character is a digit;
          &lt;code&gt;false&lt;/code&gt; otherwise.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#forDigit(int, int)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#getType(int)</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="codePoint" comment="the character (Unicode code point) to be tested." fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="isDefined" returncomment="&lt;code&gt;true&lt;/code&gt; if the character has a defined meaning
          in Unicode; &lt;code&gt;false&lt;/code&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Determines if a character is defined in Unicode.
 &lt;p&gt;
 A character is defined if at least one of the following is true:
 &lt;ul&gt;
 &lt;li&gt;It has an entry in the UnicodeData file.
 &lt;li&gt;It has a value in a range defined by the UnicodeData file.
 &lt;/ul&gt;

 &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; This method cannot handle &lt;a
 href=&quot;#supplementary&quot;&gt; supplementary characters&lt;/a&gt;. To support
 all Unicode characters, including supplementary characters, use
 the {@link #isDefined(int)} method.</description>
					<attribute name="@param">
						<description>ch   the character to be tested</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if the character has a defined meaning
          in Unicode; &lt;code&gt;false&lt;/code&gt; otherwise.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isDigit(char)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isLetter(char)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isLetterOrDigit(char)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isLowerCase(char)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isTitleCase(char)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isUpperCase(char)</description>
					</attribute>
					<attribute name="@since">
						<description>1.0.2</description>
					</attribute>
				</comment>
				<params>
					<param name="ch" comment="the character to be tested" fulltype="char" type="char" />
				</params>
			</method>
			<method static="true" visibility="public" name="isDefined" returncomment="&lt;code&gt;true&lt;/code&gt; if the character has a defined meaning
          in Unicode; &lt;code&gt;false&lt;/code&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Determines if a character (Unicode code point) is defined in Unicode.
 &lt;p&gt;
 A character is defined if at least one of the following is true:
 &lt;ul&gt;
 &lt;li&gt;It has an entry in the UnicodeData file.
 &lt;li&gt;It has a value in a range defined by the UnicodeData file.
 &lt;/ul&gt;</description>
					<attribute name="@param">
						<description>codePoint the character (Unicode code point) to be tested.</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if the character has a defined meaning
          in Unicode; &lt;code&gt;false&lt;/code&gt; otherwise.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isDigit(int)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isLetter(int)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isLetterOrDigit(int)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isLowerCase(int)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isTitleCase(int)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isUpperCase(int)</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="codePoint" comment="the character (Unicode code point) to be tested." fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="isLetter" returncomment="&lt;code&gt;true&lt;/code&gt; if the character is a letter;
          &lt;code&gt;false&lt;/code&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Determines if the specified character is a letter.
 &lt;p&gt;
 A character is considered to be a letter if its general
 category type, provided by &lt;code&gt;Character.getType(ch)&lt;/code&gt;,
 is any of the following:
 &lt;ul&gt;
 &lt;li&gt; &lt;code&gt;UPPERCASE_LETTER&lt;/code&gt;
 &lt;li&gt; &lt;code&gt;LOWERCASE_LETTER&lt;/code&gt;
 &lt;li&gt; &lt;code&gt;TITLECASE_LETTER&lt;/code&gt;
 &lt;li&gt; &lt;code&gt;MODIFIER_LETTER&lt;/code&gt;
 &lt;li&gt; &lt;code&gt;OTHER_LETTER&lt;/code&gt;
 &lt;/ul&gt;

 Not all letters have case. Many characters are
 letters but are neither uppercase nor lowercase nor titlecase.

 &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; This method cannot handle &lt;a
 href=&quot;#supplementary&quot;&gt; supplementary characters&lt;/a&gt;. To support
 all Unicode characters, including supplementary characters, use
 the {@link #isLetter(int)} method.</description>
					<attribute name="@param">
						<description>ch   the character to be tested.</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if the character is a letter;
          &lt;code&gt;false&lt;/code&gt; otherwise.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isDigit(char)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isJavaIdentifierStart(char)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isJavaLetter(char)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isJavaLetterOrDigit(char)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isLetterOrDigit(char)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isLowerCase(char)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isTitleCase(char)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isUnicodeIdentifierStart(char)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isUpperCase(char)</description>
					</attribute>
				</comment>
				<params>
					<param name="ch" comment="the character to be tested." fulltype="char" type="char" />
				</params>
			</method>
			<method static="true" visibility="public" name="isLetter" returncomment="&lt;code&gt;true&lt;/code&gt; if the character is a letter;
          &lt;code&gt;false&lt;/code&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Determines if the specified character (Unicode code point) is a letter.
 &lt;p&gt;
 A character is considered to be a letter if its general
 category type, provided by {@link Character#getType(int) getType(codePoint)},
 is any of the following:
 &lt;ul&gt;
 &lt;li&gt; &lt;code&gt;UPPERCASE_LETTER&lt;/code&gt;
 &lt;li&gt; &lt;code&gt;LOWERCASE_LETTER&lt;/code&gt;
 &lt;li&gt; &lt;code&gt;TITLECASE_LETTER&lt;/code&gt;
 &lt;li&gt; &lt;code&gt;MODIFIER_LETTER&lt;/code&gt;
 &lt;li&gt; &lt;code&gt;OTHER_LETTER&lt;/code&gt;
 &lt;/ul&gt;

 Not all letters have case. Many characters are
 letters but are neither uppercase nor lowercase nor titlecase.</description>
					<attribute name="@param">
						<description>codePoint the character (Unicode code point) to be tested.</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if the character is a letter;
          &lt;code&gt;false&lt;/code&gt; otherwise.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isDigit(int)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isJavaIdentifierStart(int)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isLetterOrDigit(int)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isLowerCase(int)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isTitleCase(int)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isUnicodeIdentifierStart(int)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isUpperCase(int)</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="codePoint" comment="the character (Unicode code point) to be tested." fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="isLetterOrDigit" returncomment="&lt;code&gt;true&lt;/code&gt; if the character is a letter or digit;
          &lt;code&gt;false&lt;/code&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Determines if the specified character is a letter or digit.
 &lt;p&gt;
 A character is considered to be a letter or digit if either
 &lt;code&gt;Character.isLetter(char ch)&lt;/code&gt; or
 &lt;code&gt;Character.isDigit(char ch)&lt;/code&gt; returns
 &lt;code&gt;true&lt;/code&gt; for the character.

 &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; This method cannot handle &lt;a
 href=&quot;#supplementary&quot;&gt; supplementary characters&lt;/a&gt;. To support
 all Unicode characters, including supplementary characters, use
 the {@link #isLetterOrDigit(int)} method.</description>
					<attribute name="@param">
						<description>ch   the character to be tested.</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if the character is a letter or digit;
          &lt;code&gt;false&lt;/code&gt; otherwise.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isDigit(char)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isJavaIdentifierPart(char)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isJavaLetter(char)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isJavaLetterOrDigit(char)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isLetter(char)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isUnicodeIdentifierPart(char)</description>
					</attribute>
					<attribute name="@since">
						<description>1.0.2</description>
					</attribute>
				</comment>
				<params>
					<param name="ch" comment="the character to be tested." fulltype="char" type="char" />
				</params>
			</method>
			<method static="true" visibility="public" name="isLetterOrDigit" returncomment="&lt;code&gt;true&lt;/code&gt; if the character is a letter or digit;
          &lt;code&gt;false&lt;/code&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Determines if the specified character (Unicode code point) is a letter or digit.
 &lt;p&gt;
 A character is considered to be a letter or digit if either
 {@link #isLetter(int) isLetter(codePoint)} or
 {@link #isDigit(int) isDigit(codePoint)} returns
 &lt;code&gt;true&lt;/code&gt; for the character.</description>
					<attribute name="@param">
						<description>codePoint the character (Unicode code point) to be tested.</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if the character is a letter or digit;
          &lt;code&gt;false&lt;/code&gt; otherwise.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isDigit(int)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isJavaIdentifierPart(int)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isLetter(int)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isUnicodeIdentifierPart(int)</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="codePoint" comment="the character (Unicode code point) to be tested." fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="isJavaLetter" returncomment="&lt;code&gt;true&lt;/code&gt; if the character may start a Java
          identifier; &lt;code&gt;false&lt;/code&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Determines if the specified character is permissible as the first
 character in a Java identifier.
 &lt;p&gt;
 A character may start a Java identifier if and only if
 one of the following is true:
 &lt;ul&gt;
 &lt;li&gt; {@link #isLetter(char) isLetter(ch)} returns &lt;code&gt;true&lt;/code&gt;
 &lt;li&gt; {@link #getType(char) getType(ch)} returns &lt;code&gt;LETTER_NUMBER&lt;/code&gt;
 &lt;li&gt; ch is a currency symbol (such as &quot;$&quot;)
 &lt;li&gt; ch is a connecting punctuation character (such as &quot;_&quot;).
 &lt;/ul&gt;</description>
					<attribute name="@param">
						<description>ch the character to be tested.</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if the character may start a Java
          identifier; &lt;code&gt;false&lt;/code&gt; otherwise.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isJavaLetterOrDigit(char)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isJavaIdentifierStart(char)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isJavaIdentifierPart(char)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isLetter(char)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isLetterOrDigit(char)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isUnicodeIdentifierStart(char)</description>
					</attribute>
					<attribute name="@since">
						<description>1.02</description>
					</attribute>
					<attribute name="@deprecated">
						<description>Replaced by isJavaIdentifierStart(char).</description>
					</attribute>
				</comment>
				<params>
					<param name="ch" comment="the character to be tested." fulltype="char" type="char" />
				</params>
			</method>
			<method static="true" visibility="public" name="isJavaLetterOrDigit" returncomment="&lt;code&gt;true&lt;/code&gt; if the character may be part of a
          Java identifier; &lt;code&gt;false&lt;/code&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Determines if the specified character may be part of a Java
 identifier as other than the first character.
 &lt;p&gt;
 A character may be part of a Java identifier if and only if any
 of the following are true:
 &lt;ul&gt;
 &lt;li&gt;  it is a letter
 &lt;li&gt;  it is a currency symbol (such as &lt;code&gt;&apos;$&apos;&lt;/code&gt;)
 &lt;li&gt;  it is a connecting punctuation character (such as &lt;code&gt;&apos;_&apos;&lt;/code&gt;)
 &lt;li&gt;  it is a digit
 &lt;li&gt;  it is a numeric letter (such as a Roman numeral character)
 &lt;li&gt;  it is a combining mark
 &lt;li&gt;  it is a non-spacing mark
 &lt;li&gt; &lt;code&gt;isIdentifierIgnorable&lt;/code&gt; returns
 &lt;code&gt;true&lt;/code&gt; for the character.
 &lt;/ul&gt;</description>
					<attribute name="@param">
						<description>ch the character to be tested.</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if the character may be part of a
          Java identifier; &lt;code&gt;false&lt;/code&gt; otherwise.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isJavaLetter(char)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isJavaIdentifierStart(char)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isJavaIdentifierPart(char)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isLetter(char)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isLetterOrDigit(char)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isUnicodeIdentifierPart(char)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isIdentifierIgnorable(char)</description>
					</attribute>
					<attribute name="@since">
						<description>1.02</description>
					</attribute>
					<attribute name="@deprecated">
						<description>Replaced by isJavaIdentifierPart(char).</description>
					</attribute>
				</comment>
				<params>
					<param name="ch" comment="the character to be tested." fulltype="char" type="char" />
				</params>
			</method>
			<method static="true" visibility="public" name="isJavaIdentifierStart" returncomment="&lt;code&gt;true&lt;/code&gt; if the character may start a Java identifier;
          &lt;code&gt;false&lt;/code&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Determines if the specified character is
 permissible as the first character in a Java identifier.
 &lt;p&gt;
 A character may start a Java identifier if and only if
 one of the following conditions is true:
 &lt;ul&gt;
 &lt;li&gt; {@link #isLetter(char) isLetter(ch)} returns &lt;code&gt;true&lt;/code&gt;
 &lt;li&gt; {@link #getType(char) getType(ch)} returns &lt;code&gt;LETTER_NUMBER&lt;/code&gt;
 &lt;li&gt; ch is a currency symbol (such as &quot;$&quot;)
 &lt;li&gt; ch is a connecting punctuation character (such as &quot;_&quot;).
 &lt;/ul&gt;

 &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; This method cannot handle &lt;a
 href=&quot;#supplementary&quot;&gt; supplementary characters&lt;/a&gt;. To support
 all Unicode characters, including supplementary characters, use
 the {@link #isJavaIdentifierStart(int)} method.</description>
					<attribute name="@param">
						<description>ch the character to be tested.</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if the character may start a Java identifier;
          &lt;code&gt;false&lt;/code&gt; otherwise.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isJavaIdentifierPart(char)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isLetter(char)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isUnicodeIdentifierStart(char)</description>
					</attribute>
					<attribute name="@see">
						<description>javax.lang.model.SourceVersion#isIdentifier(CharSequence)</description>
					</attribute>
					<attribute name="@since">
						<description>1.1</description>
					</attribute>
				</comment>
				<params>
					<param name="ch" comment="the character to be tested." fulltype="char" type="char" />
				</params>
			</method>
			<method static="true" visibility="public" name="isJavaIdentifierStart" returncomment="&lt;code&gt;true&lt;/code&gt; if the character may start a Java identifier;
          &lt;code&gt;false&lt;/code&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Determines if the character (Unicode code point) is
 permissible as the first character in a Java identifier.
 &lt;p&gt;
 A character may start a Java identifier if and only if
 one of the following conditions is true:
 &lt;ul&gt;
 &lt;li&gt; {@link #isLetter(int) isLetter(codePoint)}
      returns &lt;code&gt;true&lt;/code&gt;
 &lt;li&gt; {@link #getType(int) getType(codePoint)}
      returns &lt;code&gt;LETTER_NUMBER&lt;/code&gt;
 &lt;li&gt; the referenced character is a currency symbol (such as &quot;$&quot;)
 &lt;li&gt; the referenced character is a connecting punctuation character
      (such as &quot;_&quot;).
 &lt;/ul&gt;</description>
					<attribute name="@param">
						<description>codePoint the character (Unicode code point) to be tested.</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if the character may start a Java identifier;
          &lt;code&gt;false&lt;/code&gt; otherwise.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isJavaIdentifierPart(int)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isLetter(int)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isUnicodeIdentifierStart(int)</description>
					</attribute>
					<attribute name="@see">
						<description>javax.lang.model.SourceVersion#isIdentifier(CharSequence)</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="codePoint" comment="the character (Unicode code point) to be tested." fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="isJavaIdentifierPart" returncomment="&lt;code&gt;true&lt;/code&gt; if the character may be part of a
          Java identifier; &lt;code&gt;false&lt;/code&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Determines if the specified character may be part of a Java
 identifier as other than the first character.
 &lt;p&gt;
 A character may be part of a Java identifier if any of the following
 are true:
 &lt;ul&gt;
 &lt;li&gt;  it is a letter
 &lt;li&gt;  it is a currency symbol (such as &lt;code&gt;&apos;$&apos;&lt;/code&gt;)
 &lt;li&gt;  it is a connecting punctuation character (such as &lt;code&gt;&apos;_&apos;&lt;/code&gt;)
 &lt;li&gt;  it is a digit
 &lt;li&gt;  it is a numeric letter (such as a Roman numeral character)
 &lt;li&gt;  it is a combining mark
 &lt;li&gt;  it is a non-spacing mark
 &lt;li&gt; &lt;code&gt;isIdentifierIgnorable&lt;/code&gt; returns
 &lt;code&gt;true&lt;/code&gt; for the character
 &lt;/ul&gt;

 &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; This method cannot handle &lt;a
 href=&quot;#supplementary&quot;&gt; supplementary characters&lt;/a&gt;. To support
 all Unicode characters, including supplementary characters, use
 the {@link #isJavaIdentifierPart(int)} method.</description>
					<attribute name="@param">
						<description>ch      the character to be tested.</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if the character may be part of a
          Java identifier; &lt;code&gt;false&lt;/code&gt; otherwise.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isIdentifierIgnorable(char)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isJavaIdentifierStart(char)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isLetterOrDigit(char)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isUnicodeIdentifierPart(char)</description>
					</attribute>
					<attribute name="@see">
						<description>javax.lang.model.SourceVersion#isIdentifier(CharSequence)</description>
					</attribute>
					<attribute name="@since">
						<description>1.1</description>
					</attribute>
				</comment>
				<params>
					<param name="ch" comment="the character to be tested." fulltype="char" type="char" />
				</params>
			</method>
			<method static="true" visibility="public" name="isJavaIdentifierPart" returncomment="&lt;code&gt;true&lt;/code&gt; if the character may be part of a
          Java identifier; &lt;code&gt;false&lt;/code&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Determines if the character (Unicode code point) may be part of a Java
 identifier as other than the first character.
 &lt;p&gt;
 A character may be part of a Java identifier if any of the following
 are true:
 &lt;ul&gt;
 &lt;li&gt;  it is a letter
 &lt;li&gt;  it is a currency symbol (such as &lt;code&gt;&apos;$&apos;&lt;/code&gt;)
 &lt;li&gt;  it is a connecting punctuation character (such as &lt;code&gt;&apos;_&apos;&lt;/code&gt;)
 &lt;li&gt;  it is a digit
 &lt;li&gt;  it is a numeric letter (such as a Roman numeral character)
 &lt;li&gt;  it is a combining mark
 &lt;li&gt;  it is a non-spacing mark
 &lt;li&gt; {@link #isIdentifierIgnorable(int)
 isIdentifierIgnorable(codePoint)} returns &lt;code&gt;true&lt;/code&gt; for
 the character
 &lt;/ul&gt;</description>
					<attribute name="@param">
						<description>codePoint the character (Unicode code point) to be tested.</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if the character may be part of a
          Java identifier; &lt;code&gt;false&lt;/code&gt; otherwise.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isIdentifierIgnorable(int)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isJavaIdentifierStart(int)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isLetterOrDigit(int)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isUnicodeIdentifierPart(int)</description>
					</attribute>
					<attribute name="@see">
						<description>javax.lang.model.SourceVersion#isIdentifier(CharSequence)</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="codePoint" comment="the character (Unicode code point) to be tested." fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="isUnicodeIdentifierStart" returncomment="&lt;code&gt;true&lt;/code&gt; if the character may start a Unicode
          identifier; &lt;code&gt;false&lt;/code&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Determines if the specified character is permissible as the
 first character in a Unicode identifier.
 &lt;p&gt;
 A character may start a Unicode identifier if and only if
 one of the following conditions is true:
 &lt;ul&gt;
 &lt;li&gt; {@link #isLetter(char) isLetter(ch)} returns &lt;code&gt;true&lt;/code&gt;
 &lt;li&gt; {@link #getType(char) getType(ch)} returns
      &lt;code&gt;LETTER_NUMBER&lt;/code&gt;.
 &lt;/ul&gt;

 &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; This method cannot handle &lt;a
 href=&quot;#supplementary&quot;&gt; supplementary characters&lt;/a&gt;. To support
 all Unicode characters, including supplementary characters, use
 the {@link #isUnicodeIdentifierStart(int)} method.</description>
					<attribute name="@param">
						<description>ch      the character to be tested.</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if the character may start a Unicode
          identifier; &lt;code&gt;false&lt;/code&gt; otherwise.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isJavaIdentifierStart(char)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isLetter(char)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isUnicodeIdentifierPart(char)</description>
					</attribute>
					<attribute name="@since">
						<description>1.1</description>
					</attribute>
				</comment>
				<params>
					<param name="ch" comment="the character to be tested." fulltype="char" type="char" />
				</params>
			</method>
			<method static="true" visibility="public" name="isUnicodeIdentifierStart" returncomment="&lt;code&gt;true&lt;/code&gt; if the character may start a Unicode
          identifier; &lt;code&gt;false&lt;/code&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Determines if the specified character (Unicode code point) is permissible as the
 first character in a Unicode identifier.
 &lt;p&gt;
 A character may start a Unicode identifier if and only if
 one of the following conditions is true:
 &lt;ul&gt;
 &lt;li&gt; {@link #isLetter(int) isLetter(codePoint)}
      returns &lt;code&gt;true&lt;/code&gt;
 &lt;li&gt; {@link #getType(int) getType(codePoint)}
      returns &lt;code&gt;LETTER_NUMBER&lt;/code&gt;.
 &lt;/ul&gt;</description>
					<attribute name="@param">
						<description>codePoint the character (Unicode code point) to be tested.</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if the character may start a Unicode
          identifier; &lt;code&gt;false&lt;/code&gt; otherwise.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isJavaIdentifierStart(int)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isLetter(int)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isUnicodeIdentifierPart(int)</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="codePoint" comment="the character (Unicode code point) to be tested." fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="isUnicodeIdentifierPart" returncomment="&lt;code&gt;true&lt;/code&gt; if the character may be part of a
          Unicode identifier; &lt;code&gt;false&lt;/code&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Determines if the specified character may be part of a Unicode
 identifier as other than the first character.
 &lt;p&gt;
 A character may be part of a Unicode identifier if and only if
 one of the following statements is true:
 &lt;ul&gt;
 &lt;li&gt;  it is a letter
 &lt;li&gt;  it is a connecting punctuation character (such as &lt;code&gt;&apos;_&apos;&lt;/code&gt;)
 &lt;li&gt;  it is a digit
 &lt;li&gt;  it is a numeric letter (such as a Roman numeral character)
 &lt;li&gt;  it is a combining mark
 &lt;li&gt;  it is a non-spacing mark
 &lt;li&gt; &lt;code&gt;isIdentifierIgnorable&lt;/code&gt; returns
 &lt;code&gt;true&lt;/code&gt; for this character.
 &lt;/ul&gt;

 &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; This method cannot handle &lt;a
 href=&quot;#supplementary&quot;&gt; supplementary characters&lt;/a&gt;. To support
 all Unicode characters, including supplementary characters, use
 the {@link #isUnicodeIdentifierPart(int)} method.</description>
					<attribute name="@param">
						<description>ch      the character to be tested.</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if the character may be part of a
          Unicode identifier; &lt;code&gt;false&lt;/code&gt; otherwise.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isIdentifierIgnorable(char)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isJavaIdentifierPart(char)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isLetterOrDigit(char)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isUnicodeIdentifierStart(char)</description>
					</attribute>
					<attribute name="@since">
						<description>1.1</description>
					</attribute>
				</comment>
				<params>
					<param name="ch" comment="the character to be tested." fulltype="char" type="char" />
				</params>
			</method>
			<method static="true" visibility="public" name="isUnicodeIdentifierPart" returncomment="&lt;code&gt;true&lt;/code&gt; if the character may be part of a
          Unicode identifier; &lt;code&gt;false&lt;/code&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Determines if the specified character (Unicode code point) may be part of a Unicode
 identifier as other than the first character.
 &lt;p&gt;
 A character may be part of a Unicode identifier if and only if
 one of the following statements is true:
 &lt;ul&gt;
 &lt;li&gt;  it is a letter
 &lt;li&gt;  it is a connecting punctuation character (such as &lt;code&gt;&apos;_&apos;&lt;/code&gt;)
 &lt;li&gt;  it is a digit
 &lt;li&gt;  it is a numeric letter (such as a Roman numeral character)
 &lt;li&gt;  it is a combining mark
 &lt;li&gt;  it is a non-spacing mark
 &lt;li&gt; &lt;code&gt;isIdentifierIgnorable&lt;/code&gt; returns
 &lt;code&gt;true&lt;/code&gt; for this character.
 &lt;/ul&gt;</description>
					<attribute name="@param">
						<description>codePoint the character (Unicode code point) to be tested.</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if the character may be part of a
          Unicode identifier; &lt;code&gt;false&lt;/code&gt; otherwise.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isIdentifierIgnorable(int)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isJavaIdentifierPart(int)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isLetterOrDigit(int)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isUnicodeIdentifierStart(int)</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="codePoint" comment="the character (Unicode code point) to be tested." fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="isIdentifierIgnorable" returncomment="&lt;code&gt;true&lt;/code&gt; if the character is an ignorable control
          character that may be part of a Java or Unicode identifier;
           &lt;code&gt;false&lt;/code&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Determines if the specified character should be regarded as
 an ignorable character in a Java identifier or a Unicode identifier.
 &lt;p&gt;
 The following Unicode characters are ignorable in a Java identifier
 or a Unicode identifier:
 &lt;ul&gt;
 &lt;li&gt;ISO control characters that are not whitespace
 &lt;ul&gt;
 &lt;li&gt;&lt;code&gt;&apos;&amp;#92;u0000&apos;&lt;/code&gt; through &lt;code&gt;&apos;&amp;#92;u0008&apos;&lt;/code&gt;
 &lt;li&gt;&lt;code&gt;&apos;&amp;#92;u000E&apos;&lt;/code&gt; through &lt;code&gt;&apos;&amp;#92;u001B&apos;&lt;/code&gt;
 &lt;li&gt;&lt;code&gt;&apos;&amp;#92;u007F&apos;&lt;/code&gt; through &lt;code&gt;&apos;&amp;#92;u009F&apos;&lt;/code&gt;
 &lt;/ul&gt;

 &lt;li&gt;all characters that have the &lt;code&gt;FORMAT&lt;/code&gt; general
 category value
 &lt;/ul&gt;

 &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; This method cannot handle &lt;a
 href=&quot;#supplementary&quot;&gt; supplementary characters&lt;/a&gt;. To support
 all Unicode characters, including supplementary characters, use
 the {@link #isIdentifierIgnorable(int)} method.</description>
					<attribute name="@param">
						<description>ch      the character to be tested.</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if the character is an ignorable control
          character that may be part of a Java or Unicode identifier;
           &lt;code&gt;false&lt;/code&gt; otherwise.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isJavaIdentifierPart(char)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isUnicodeIdentifierPart(char)</description>
					</attribute>
					<attribute name="@since">
						<description>1.1</description>
					</attribute>
				</comment>
				<params>
					<param name="ch" comment="the character to be tested." fulltype="char" type="char" />
				</params>
			</method>
			<method static="true" visibility="public" name="isIdentifierIgnorable" returncomment="&lt;code&gt;true&lt;/code&gt; if the character is an ignorable control
          character that may be part of a Java or Unicode identifier;
          &lt;code&gt;false&lt;/code&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Determines if the specified character (Unicode code point) should be regarded as
 an ignorable character in a Java identifier or a Unicode identifier.
 &lt;p&gt;
 The following Unicode characters are ignorable in a Java identifier
 or a Unicode identifier:
 &lt;ul&gt;
 &lt;li&gt;ISO control characters that are not whitespace
 &lt;ul&gt;
 &lt;li&gt;&lt;code&gt;&apos;&amp;#92;u0000&apos;&lt;/code&gt; through &lt;code&gt;&apos;&amp;#92;u0008&apos;&lt;/code&gt;
 &lt;li&gt;&lt;code&gt;&apos;&amp;#92;u000E&apos;&lt;/code&gt; through &lt;code&gt;&apos;&amp;#92;u001B&apos;&lt;/code&gt;
 &lt;li&gt;&lt;code&gt;&apos;&amp;#92;u007F&apos;&lt;/code&gt; through &lt;code&gt;&apos;&amp;#92;u009F&apos;&lt;/code&gt;
 &lt;/ul&gt;

 &lt;li&gt;all characters that have the &lt;code&gt;FORMAT&lt;/code&gt; general
 category value
 &lt;/ul&gt;</description>
					<attribute name="@param">
						<description>codePoint the character (Unicode code point) to be tested.</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if the character is an ignorable control
          character that may be part of a Java or Unicode identifier;
          &lt;code&gt;false&lt;/code&gt; otherwise.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isJavaIdentifierPart(int)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isUnicodeIdentifierPart(int)</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="codePoint" comment="the character (Unicode code point) to be tested." fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="toLowerCase" returncomment="the lowercase equivalent of the character, if any;
          otherwise, the character itself." fulltype="char" type="char">
				<comment>
					<description>Converts the character argument to lowercase using case
 mapping information from the UnicodeData file.
 &lt;p&gt;
 Note that
 &lt;code&gt;Character.isLowerCase(Character.toLowerCase(ch))&lt;/code&gt;
 does not always return &lt;code&gt;true&lt;/code&gt; for some ranges of
 characters, particularly those that are symbols or ideographs.

 &lt;p&gt;In general, {@link java.lang.String#toLowerCase()} should be used to map
 characters to lowercase. &lt;code&gt;String&lt;/code&gt; case mapping methods
 have several benefits over &lt;code&gt;Character&lt;/code&gt; case mapping methods.
 &lt;code&gt;String&lt;/code&gt; case mapping methods can perform locale-sensitive
 mappings, context-sensitive mappings, and 1:M character mappings, whereas
 the &lt;code&gt;Character&lt;/code&gt; case mapping methods cannot.

 &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; This method cannot handle &lt;a
 href=&quot;#supplementary&quot;&gt; supplementary characters&lt;/a&gt;. To support
 all Unicode characters, including supplementary characters, use
 the {@link #toLowerCase(int)} method.</description>
					<attribute name="@param">
						<description>ch   the character to be converted.</description>
					</attribute>
					<attribute name="@return">
						<description>the lowercase equivalent of the character, if any;
          otherwise, the character itself.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isLowerCase(char)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.String#toLowerCase()</description>
					</attribute>
				</comment>
				<params>
					<param name="ch" comment="the character to be converted." fulltype="char" type="char" />
				</params>
			</method>
			<method static="true" visibility="public" name="toLowerCase" returncomment="the lowercase equivalent of the character (Unicode code
          point), if any; otherwise, the character itself." fulltype="int" type="int">
				<comment>
					<description>Converts the character (Unicode code point) argument to
 lowercase using case mapping information from the UnicodeData
 file.

 &lt;p&gt; Note that
 &lt;code&gt;Character.isLowerCase(Character.toLowerCase(codePoint))&lt;/code&gt;
 does not always return &lt;code&gt;true&lt;/code&gt; for some ranges of
 characters, particularly those that are symbols or ideographs.

 &lt;p&gt;In general, {@link java.lang.String#toLowerCase()} should be used to map
 characters to lowercase. &lt;code&gt;String&lt;/code&gt; case mapping methods
 have several benefits over &lt;code&gt;Character&lt;/code&gt; case mapping methods.
 &lt;code&gt;String&lt;/code&gt; case mapping methods can perform locale-sensitive
 mappings, context-sensitive mappings, and 1:M character mappings, whereas
 the &lt;code&gt;Character&lt;/code&gt; case mapping methods cannot.</description>
					<attribute name="@param">
						<description>codePoint   the character (Unicode code point) to be converted.</description>
					</attribute>
					<attribute name="@return">
						<description>the lowercase equivalent of the character (Unicode code
          point), if any; otherwise, the character itself.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isLowerCase(int)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.String#toLowerCase()</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="codePoint" comment="the character (Unicode code point) to be converted." fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="toUpperCase" returncomment="the uppercase equivalent of the character, if any;
          otherwise, the character itself." fulltype="char" type="char">
				<comment>
					<description>Converts the character argument to uppercase using case mapping
 information from the UnicodeData file.
 &lt;p&gt;
 Note that
 &lt;code&gt;Character.isUpperCase(Character.toUpperCase(ch))&lt;/code&gt;
 does not always return &lt;code&gt;true&lt;/code&gt; for some ranges of
 characters, particularly those that are symbols or ideographs.

 &lt;p&gt;In general, {@link java.lang.String#toUpperCase()} should be used to map
 characters to uppercase. &lt;code&gt;String&lt;/code&gt; case mapping methods
 have several benefits over &lt;code&gt;Character&lt;/code&gt; case mapping methods.
 &lt;code&gt;String&lt;/code&gt; case mapping methods can perform locale-sensitive
 mappings, context-sensitive mappings, and 1:M character mappings, whereas
 the &lt;code&gt;Character&lt;/code&gt; case mapping methods cannot.

 &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; This method cannot handle &lt;a
 href=&quot;#supplementary&quot;&gt; supplementary characters&lt;/a&gt;. To support
 all Unicode characters, including supplementary characters, use
 the {@link #toUpperCase(int)} method.</description>
					<attribute name="@param">
						<description>ch   the character to be converted.</description>
					</attribute>
					<attribute name="@return">
						<description>the uppercase equivalent of the character, if any;
          otherwise, the character itself.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isUpperCase(char)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.String#toUpperCase()</description>
					</attribute>
				</comment>
				<params>
					<param name="ch" comment="the character to be converted." fulltype="char" type="char" />
				</params>
			</method>
			<method static="true" visibility="public" name="toUpperCase" returncomment="the uppercase equivalent of the character, if any;
          otherwise, the character itself." fulltype="int" type="int">
				<comment>
					<description>Converts the character (Unicode code point) argument to
 uppercase using case mapping information from the UnicodeData
 file.

 &lt;p&gt;Note that
 &lt;code&gt;Character.isUpperCase(Character.toUpperCase(codePoint))&lt;/code&gt;
 does not always return &lt;code&gt;true&lt;/code&gt; for some ranges of
 characters, particularly those that are symbols or ideographs.

 &lt;p&gt;In general, {@link java.lang.String#toUpperCase()} should be used to map
 characters to uppercase. &lt;code&gt;String&lt;/code&gt; case mapping methods
 have several benefits over &lt;code&gt;Character&lt;/code&gt; case mapping methods.
 &lt;code&gt;String&lt;/code&gt; case mapping methods can perform locale-sensitive
 mappings, context-sensitive mappings, and 1:M character mappings, whereas
 the &lt;code&gt;Character&lt;/code&gt; case mapping methods cannot.</description>
					<attribute name="@param">
						<description>codePoint   the character (Unicode code point) to be converted.</description>
					</attribute>
					<attribute name="@return">
						<description>the uppercase equivalent of the character, if any;
          otherwise, the character itself.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isUpperCase(int)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.String#toUpperCase()</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="codePoint" comment="the character (Unicode code point) to be converted." fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="toTitleCase" returncomment="the titlecase equivalent of the character, if any;
          otherwise, the character itself." fulltype="char" type="char">
				<comment>
					<description>Converts the character argument to titlecase using case mapping
 information from the UnicodeData file. If a character has no
 explicit titlecase mapping and is not itself a titlecase char
 according to UnicodeData, then the uppercase mapping is
 returned as an equivalent titlecase mapping. If the
 &lt;code&gt;char&lt;/code&gt; argument is already a titlecase
 &lt;code&gt;char&lt;/code&gt;, the same &lt;code&gt;char&lt;/code&gt; value will be
 returned.
 &lt;p&gt;
 Note that
 &lt;code&gt;Character.isTitleCase(Character.toTitleCase(ch))&lt;/code&gt;
 does not always return &lt;code&gt;true&lt;/code&gt; for some ranges of
 characters.

 &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; This method cannot handle &lt;a
 href=&quot;#supplementary&quot;&gt; supplementary characters&lt;/a&gt;. To support
 all Unicode characters, including supplementary characters, use
 the {@link #toTitleCase(int)} method.</description>
					<attribute name="@param">
						<description>ch   the character to be converted.</description>
					</attribute>
					<attribute name="@return">
						<description>the titlecase equivalent of the character, if any;
          otherwise, the character itself.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isTitleCase(char)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#toLowerCase(char)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#toUpperCase(char)</description>
					</attribute>
					<attribute name="@since">
						<description>1.0.2</description>
					</attribute>
				</comment>
				<params>
					<param name="ch" comment="the character to be converted." fulltype="char" type="char" />
				</params>
			</method>
			<method static="true" visibility="public" name="toTitleCase" returncomment="the titlecase equivalent of the character, if any;
          otherwise, the character itself." fulltype="int" type="int">
				<comment>
					<description>Converts the character (Unicode code point) argument to titlecase using case mapping
 information from the UnicodeData file. If a character has no
 explicit titlecase mapping and is not itself a titlecase char
 according to UnicodeData, then the uppercase mapping is
 returned as an equivalent titlecase mapping. If the
 character argument is already a titlecase
 character, the same character value will be
 returned.

 &lt;p&gt;Note that
 &lt;code&gt;Character.isTitleCase(Character.toTitleCase(codePoint))&lt;/code&gt;
 does not always return &lt;code&gt;true&lt;/code&gt; for some ranges of
 characters.</description>
					<attribute name="@param">
						<description>codePoint   the character (Unicode code point) to be converted.</description>
					</attribute>
					<attribute name="@return">
						<description>the titlecase equivalent of the character, if any;
          otherwise, the character itself.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isTitleCase(int)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#toLowerCase(int)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#toUpperCase(int)</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="codePoint" comment="the character (Unicode code point) to be converted." fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="digit" returncomment="the numeric value represented by the character in the
          specified radix." fulltype="int" type="int">
				<comment>
					<description>Returns the numeric value of the character &lt;code&gt;ch&lt;/code&gt; in the
 specified radix.
 &lt;p&gt;
 If the radix is not in the range &lt;code&gt;MIN_RADIX&lt;/code&gt;&amp;nbsp;&amp;lt;=
 &lt;code&gt;radix&lt;/code&gt;&amp;nbsp;&amp;lt;= &lt;code&gt;MAX_RADIX&lt;/code&gt; or if the
 value of &lt;code&gt;ch&lt;/code&gt; is not a valid digit in the specified
 radix, &lt;code&gt;-1&lt;/code&gt; is returned. A character is a valid digit
 if at least one of the following is true:
 &lt;ul&gt;
 &lt;li&gt;The method &lt;code&gt;isDigit&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; of the character
     and the Unicode decimal digit value of the character (or its
     single-character decomposition) is less than the specified radix.
     In this case the decimal digit value is returned.
 &lt;li&gt;The character is one of the uppercase Latin letters
     &lt;code&gt;&apos;A&apos;&lt;/code&gt; through &lt;code&gt;&apos;Z&apos;&lt;/code&gt; and its code is less than
     &lt;code&gt;radix&amp;nbsp;+ &apos;A&apos;&amp;nbsp;-&amp;nbsp;10&lt;/code&gt;.
     In this case, &lt;code&gt;ch&amp;nbsp;- &apos;A&apos;&amp;nbsp;+&amp;nbsp;10&lt;/code&gt;
     is returned.
 &lt;li&gt;The character is one of the lowercase Latin letters
     &lt;code&gt;&apos;a&apos;&lt;/code&gt; through &lt;code&gt;&apos;z&apos;&lt;/code&gt; and its code is less than
     &lt;code&gt;radix&amp;nbsp;+ &apos;a&apos;&amp;nbsp;-&amp;nbsp;10&lt;/code&gt;.
     In this case, &lt;code&gt;ch&amp;nbsp;- &apos;a&apos;&amp;nbsp;+&amp;nbsp;10&lt;/code&gt;
     is returned.
 &lt;/ul&gt;

 &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; This method cannot handle &lt;a
 href=&quot;#supplementary&quot;&gt; supplementary characters&lt;/a&gt;. To support
 all Unicode characters, including supplementary characters, use
 the {@link #digit(int, int)} method.</description>
					<attribute name="@param">
						<description>ch      the character to be converted.</description>
					</attribute>
					<attribute name="@param">
						<description>radix   the radix.</description>
					</attribute>
					<attribute name="@return">
						<description>the numeric value represented by the character in the
          specified radix.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#forDigit(int, int)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isDigit(char)</description>
					</attribute>
				</comment>
				<params>
					<param name="ch" comment="the character to be converted." fulltype="char" type="char" />
					<param name="radix" comment="the radix." fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="digit" returncomment="the numeric value represented by the character in the
          specified radix." fulltype="int" type="int">
				<comment>
					<description>Returns the numeric value of the specified character (Unicode
 code point) in the specified radix.

 &lt;p&gt;If the radix is not in the range &lt;code&gt;MIN_RADIX&lt;/code&gt;&amp;nbsp;&amp;lt;=
 &lt;code&gt;radix&lt;/code&gt;&amp;nbsp;&amp;lt;= &lt;code&gt;MAX_RADIX&lt;/code&gt; or if the
 character is not a valid digit in the specified
 radix, &lt;code&gt;-1&lt;/code&gt; is returned. A character is a valid digit
 if at least one of the following is true:
 &lt;ul&gt;
 &lt;li&gt;The method {@link #isDigit(int) isDigit(codePoint)} is &lt;code&gt;true&lt;/code&gt; of the character
     and the Unicode decimal digit value of the character (or its
     single-character decomposition) is less than the specified radix.
     In this case the decimal digit value is returned.
 &lt;li&gt;The character is one of the uppercase Latin letters
     &lt;code&gt;&apos;A&apos;&lt;/code&gt; through &lt;code&gt;&apos;Z&apos;&lt;/code&gt; and its code is less than
     &lt;code&gt;radix&amp;nbsp;+ &apos;A&apos;&amp;nbsp;-&amp;nbsp;10&lt;/code&gt;.
     In this case, &lt;code&gt;ch&amp;nbsp;- &apos;A&apos;&amp;nbsp;+&amp;nbsp;10&lt;/code&gt;
     is returned.
 &lt;li&gt;The character is one of the lowercase Latin letters
     &lt;code&gt;&apos;a&apos;&lt;/code&gt; through &lt;code&gt;&apos;z&apos;&lt;/code&gt; and its code is less than
     &lt;code&gt;radix&amp;nbsp;+ &apos;a&apos;&amp;nbsp;-&amp;nbsp;10&lt;/code&gt;.
     In this case, &lt;code&gt;ch&amp;nbsp;- &apos;a&apos;&amp;nbsp;+&amp;nbsp;10&lt;/code&gt;
     is returned.
 &lt;/ul&gt;</description>
					<attribute name="@param">
						<description>codePoint the character (Unicode code point) to be converted.</description>
					</attribute>
					<attribute name="@param">
						<description>radix   the radix.</description>
					</attribute>
					<attribute name="@return">
						<description>the numeric value represented by the character in the
          specified radix.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#forDigit(int, int)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isDigit(int)</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="codePoint" comment="the character (Unicode code point) to be converted." fulltype="int" type="int" />
					<param name="radix" comment="the radix." fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="getNumericValue" returncomment="the numeric value of the character, as a nonnegative &lt;code&gt;int&lt;/code&gt;
           value; -2 if the character has a numeric value that is not a
          nonnegative integer; -1 if the character has no numeric value." fulltype="int" type="int">
				<comment>
					<description>Returns the &lt;code&gt;int&lt;/code&gt; value that the specified Unicode
 character represents. For example, the character
 &lt;code&gt;&apos;&amp;#92;u216C&apos;&lt;/code&gt; (the roman numeral fifty) will return
 an int with a value of 50.
 &lt;p&gt;
 The letters A-Z in their uppercase (&lt;code&gt;&apos;&amp;#92;u0041&apos;&lt;/code&gt; through
 &lt;code&gt;&apos;&amp;#92;u005A&apos;&lt;/code&gt;), lowercase
 (&lt;code&gt;&apos;&amp;#92;u0061&apos;&lt;/code&gt; through &lt;code&gt;&apos;&amp;#92;u007A&apos;&lt;/code&gt;), and
 full width variant (&lt;code&gt;&apos;&amp;#92;uFF21&apos;&lt;/code&gt; through
 &lt;code&gt;&apos;&amp;#92;uFF3A&apos;&lt;/code&gt; and &lt;code&gt;&apos;&amp;#92;uFF41&apos;&lt;/code&gt; through
 &lt;code&gt;&apos;&amp;#92;uFF5A&apos;&lt;/code&gt;) forms have numeric values from 10
 through 35. This is independent of the Unicode specification,
 which does not assign numeric values to these &lt;code&gt;char&lt;/code&gt;
 values.
 &lt;p&gt;
 If the character does not have a numeric value, then -1 is returned.
 If the character has a numeric value that cannot be represented as a
 nonnegative integer (for example, a fractional value), then -2
 is returned.

 &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; This method cannot handle &lt;a
 href=&quot;#supplementary&quot;&gt; supplementary characters&lt;/a&gt;. To support
 all Unicode characters, including supplementary characters, use
 the {@link #getNumericValue(int)} method.</description>
					<attribute name="@param">
						<description>ch      the character to be converted.</description>
					</attribute>
					<attribute name="@return">
						<description>the numeric value of the character, as a nonnegative &lt;code&gt;int&lt;/code&gt;
           value; -2 if the character has a numeric value that is not a
          nonnegative integer; -1 if the character has no numeric value.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#forDigit(int, int)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isDigit(char)</description>
					</attribute>
					<attribute name="@since">
						<description>1.1</description>
					</attribute>
				</comment>
				<params>
					<param name="ch" comment="the character to be converted." fulltype="char" type="char" />
				</params>
			</method>
			<method static="true" visibility="public" name="getNumericValue" returncomment="the numeric value of the character, as a nonnegative &lt;code&gt;int&lt;/code&gt;
          value; -2 if the character has a numeric value that is not a
          nonnegative integer; -1 if the character has no numeric value." fulltype="int" type="int">
				<comment>
					<description>Returns the &lt;code&gt;int&lt;/code&gt; value that the specified
 character (Unicode code point) represents. For example, the character
 &lt;code&gt;&apos;&amp;#92;u216C&apos;&lt;/code&gt; (the Roman numeral fifty) will return
 an &lt;code&gt;int&lt;/code&gt; with a value of 50.
 &lt;p&gt;
 The letters A-Z in their uppercase (&lt;code&gt;&apos;&amp;#92;u0041&apos;&lt;/code&gt; through
 &lt;code&gt;&apos;&amp;#92;u005A&apos;&lt;/code&gt;), lowercase
 (&lt;code&gt;&apos;&amp;#92;u0061&apos;&lt;/code&gt; through &lt;code&gt;&apos;&amp;#92;u007A&apos;&lt;/code&gt;), and
 full width variant (&lt;code&gt;&apos;&amp;#92;uFF21&apos;&lt;/code&gt; through
 &lt;code&gt;&apos;&amp;#92;uFF3A&apos;&lt;/code&gt; and &lt;code&gt;&apos;&amp;#92;uFF41&apos;&lt;/code&gt; through
 &lt;code&gt;&apos;&amp;#92;uFF5A&apos;&lt;/code&gt;) forms have numeric values from 10
 through 35. This is independent of the Unicode specification,
 which does not assign numeric values to these &lt;code&gt;char&lt;/code&gt;
 values.
 &lt;p&gt;
 If the character does not have a numeric value, then -1 is returned.
 If the character has a numeric value that cannot be represented as a
 nonnegative integer (for example, a fractional value), then -2
 is returned.</description>
					<attribute name="@param">
						<description>codePoint the character (Unicode code point) to be converted.</description>
					</attribute>
					<attribute name="@return">
						<description>the numeric value of the character, as a nonnegative &lt;code&gt;int&lt;/code&gt;
          value; -2 if the character has a numeric value that is not a
          nonnegative integer; -1 if the character has no numeric value.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#forDigit(int, int)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isDigit(int)</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="codePoint" comment="the character (Unicode code point) to be converted." fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="isSpace" returncomment="&lt;code&gt;true&lt;/code&gt; if the character is ISO-LATIN-1 white
             space; &lt;code&gt;false&lt;/code&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Determines if the specified character is ISO-LATIN-1 white space.
 This method returns &lt;code&gt;true&lt;/code&gt; for the following five
 characters only:
 &lt;table&gt;
 &lt;tr&gt;&lt;td&gt;&lt;code&gt;&apos;\t&apos;&lt;/code&gt;&lt;/td&gt;            &lt;td&gt;&lt;code&gt;&apos;&amp;#92;u0009&apos;&lt;/code&gt;&lt;/td&gt;
     &lt;td&gt;&lt;code&gt;HORIZONTAL TABULATION&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;&lt;code&gt;&apos;\n&apos;&lt;/code&gt;&lt;/td&gt;            &lt;td&gt;&lt;code&gt;&apos;&amp;#92;u000A&apos;&lt;/code&gt;&lt;/td&gt;
     &lt;td&gt;&lt;code&gt;NEW LINE&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;&lt;code&gt;&apos;\f&apos;&lt;/code&gt;&lt;/td&gt;            &lt;td&gt;&lt;code&gt;&apos;&amp;#92;u000C&apos;&lt;/code&gt;&lt;/td&gt;
     &lt;td&gt;&lt;code&gt;FORM FEED&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;&lt;code&gt;&apos;\r&apos;&lt;/code&gt;&lt;/td&gt;            &lt;td&gt;&lt;code&gt;&apos;&amp;#92;u000D&apos;&lt;/code&gt;&lt;/td&gt;
     &lt;td&gt;&lt;code&gt;CARRIAGE RETURN&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;&lt;code&gt;&apos;&amp;nbsp;&apos;&lt;/code&gt;&lt;/td&gt;  &lt;td&gt;&lt;code&gt;&apos;&amp;#92;u0020&apos;&lt;/code&gt;&lt;/td&gt;
     &lt;td&gt;&lt;code&gt;SPACE&lt;/code&gt;&lt;/td&gt;&lt;/tr&gt;
 &lt;/table&gt;</description>
					<attribute name="@param">
						<description>ch   the character to be tested.</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if the character is ISO-LATIN-1 white
             space; &lt;code&gt;false&lt;/code&gt; otherwise.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isSpaceChar(char)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isWhitespace(char)</description>
					</attribute>
					<attribute name="@deprecated">
						<description>Replaced by isWhitespace(char).</description>
					</attribute>
				</comment>
				<params>
					<param name="ch" comment="the character to be tested." fulltype="char" type="char" />
				</params>
			</method>
			<method static="true" visibility="public" name="isSpaceChar" returncomment="&lt;code&gt;true&lt;/code&gt; if the character is a space character;
          &lt;code&gt;false&lt;/code&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Determines if the specified character is a Unicode space character.
 A character is considered to be a space character if and only if
 it is specified to be a space character by the Unicode standard. This
 method returns true if the character&apos;s general category type is any of
 the following:
 &lt;ul&gt;
 &lt;li&gt; &lt;code&gt;SPACE_SEPARATOR&lt;/code&gt;
 &lt;li&gt; &lt;code&gt;LINE_SEPARATOR&lt;/code&gt;
 &lt;li&gt; &lt;code&gt;PARAGRAPH_SEPARATOR&lt;/code&gt;
 &lt;/ul&gt;

 &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; This method cannot handle &lt;a
 href=&quot;#supplementary&quot;&gt; supplementary characters&lt;/a&gt;. To support
 all Unicode characters, including supplementary characters, use
 the {@link #isSpaceChar(int)} method.</description>
					<attribute name="@param">
						<description>ch      the character to be tested.</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if the character is a space character;
          &lt;code&gt;false&lt;/code&gt; otherwise.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isWhitespace(char)</description>
					</attribute>
					<attribute name="@since">
						<description>1.1</description>
					</attribute>
				</comment>
				<params>
					<param name="ch" comment="the character to be tested." fulltype="char" type="char" />
				</params>
			</method>
			<method static="true" visibility="public" name="isSpaceChar" returncomment="&lt;code&gt;true&lt;/code&gt; if the character is a space character;
          &lt;code&gt;false&lt;/code&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Determines if the specified character (Unicode code point) is a
 Unicode space character.  A character is considered to be a
 space character if and only if it is specified to be a space
 character by the Unicode standard. This method returns true if
 the character&apos;s general category type is any of the following:

 &lt;ul&gt;
 &lt;li&gt; {@link #SPACE_SEPARATOR}
 &lt;li&gt; {@link #LINE_SEPARATOR}
 &lt;li&gt; {@link #PARAGRAPH_SEPARATOR}
 &lt;/ul&gt;</description>
					<attribute name="@param">
						<description>codePoint the character (Unicode code point) to be tested.</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if the character is a space character;
          &lt;code&gt;false&lt;/code&gt; otherwise.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isWhitespace(int)</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="codePoint" comment="the character (Unicode code point) to be tested." fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="isWhitespace" returncomment="&lt;code&gt;true&lt;/code&gt; if the character is a Java whitespace
          character; &lt;code&gt;false&lt;/code&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Determines if the specified character is white space according to Java.
 A character is a Java whitespace character if and only if it satisfies
 one of the following criteria:
 &lt;ul&gt;
 &lt;li&gt; It is a Unicode space character (&lt;code&gt;SPACE_SEPARATOR&lt;/code&gt;,
      &lt;code&gt;LINE_SEPARATOR&lt;/code&gt;, or &lt;code&gt;PARAGRAPH_SEPARATOR&lt;/code&gt;)
      but is not also a non-breaking space (&lt;code&gt;&apos;&amp;#92;u00A0&apos;&lt;/code&gt;,
      &lt;code&gt;&apos;&amp;#92;u2007&apos;&lt;/code&gt;, &lt;code&gt;&apos;&amp;#92;u202F&apos;&lt;/code&gt;).
 &lt;li&gt; It is &lt;code&gt;&apos;&amp;#92;u0009&apos;&lt;/code&gt;, HORIZONTAL TABULATION.
 &lt;li&gt; It is &lt;code&gt;&apos;&amp;#92;u000A&apos;&lt;/code&gt;, LINE FEED.
 &lt;li&gt; It is &lt;code&gt;&apos;&amp;#92;u000B&apos;&lt;/code&gt;, VERTICAL TABULATION.
 &lt;li&gt; It is &lt;code&gt;&apos;&amp;#92;u000C&apos;&lt;/code&gt;, FORM FEED.
 &lt;li&gt; It is &lt;code&gt;&apos;&amp;#92;u000D&apos;&lt;/code&gt;, CARRIAGE RETURN.
 &lt;li&gt; It is &lt;code&gt;&apos;&amp;#92;u001C&apos;&lt;/code&gt;, FILE SEPARATOR.
 &lt;li&gt; It is &lt;code&gt;&apos;&amp;#92;u001D&apos;&lt;/code&gt;, GROUP SEPARATOR.
 &lt;li&gt; It is &lt;code&gt;&apos;&amp;#92;u001E&apos;&lt;/code&gt;, RECORD SEPARATOR.
 &lt;li&gt; It is &lt;code&gt;&apos;&amp;#92;u001F&apos;&lt;/code&gt;, UNIT SEPARATOR.
 &lt;/ul&gt;

 &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; This method cannot handle &lt;a
 href=&quot;#supplementary&quot;&gt; supplementary characters&lt;/a&gt;. To support
 all Unicode characters, including supplementary characters, use
 the {@link #isWhitespace(int)} method.</description>
					<attribute name="@param">
						<description>ch the character to be tested.</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if the character is a Java whitespace
          character; &lt;code&gt;false&lt;/code&gt; otherwise.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isSpaceChar(char)</description>
					</attribute>
					<attribute name="@since">
						<description>1.1</description>
					</attribute>
				</comment>
				<params>
					<param name="ch" comment="the character to be tested." fulltype="char" type="char" />
				</params>
			</method>
			<method static="true" visibility="public" name="isWhitespace" returncomment="&lt;code&gt;true&lt;/code&gt; if the character is a Java whitespace
          character; &lt;code&gt;false&lt;/code&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Determines if the specified character (Unicode code point) is
 white space according to Java.  A character is a Java
 whitespace character if and only if it satisfies one of the
 following criteria:
 &lt;ul&gt;
 &lt;li&gt; It is a Unicode space character ({@link #SPACE_SEPARATOR},
      {@link #LINE_SEPARATOR}, or {@link #PARAGRAPH_SEPARATOR})
      but is not also a non-breaking space (&lt;code&gt;&apos;&amp;#92;u00A0&apos;&lt;/code&gt;,
      &lt;code&gt;&apos;&amp;#92;u2007&apos;&lt;/code&gt;, &lt;code&gt;&apos;&amp;#92;u202F&apos;&lt;/code&gt;).
 &lt;li&gt; It is &lt;code&gt;&apos;&amp;#92;u0009&apos;&lt;/code&gt;, HORIZONTAL TABULATION.
 &lt;li&gt; It is &lt;code&gt;&apos;&amp;#92;u000A&apos;&lt;/code&gt;, LINE FEED.
 &lt;li&gt; It is &lt;code&gt;&apos;&amp;#92;u000B&apos;&lt;/code&gt;, VERTICAL TABULATION.
 &lt;li&gt; It is &lt;code&gt;&apos;&amp;#92;u000C&apos;&lt;/code&gt;, FORM FEED.
 &lt;li&gt; It is &lt;code&gt;&apos;&amp;#92;u000D&apos;&lt;/code&gt;, CARRIAGE RETURN.
 &lt;li&gt; It is &lt;code&gt;&apos;&amp;#92;u001C&apos;&lt;/code&gt;, FILE SEPARATOR.
 &lt;li&gt; It is &lt;code&gt;&apos;&amp;#92;u001D&apos;&lt;/code&gt;, GROUP SEPARATOR.
 &lt;li&gt; It is &lt;code&gt;&apos;&amp;#92;u001E&apos;&lt;/code&gt;, RECORD SEPARATOR.
 &lt;li&gt; It is &lt;code&gt;&apos;&amp;#92;u001F&apos;&lt;/code&gt;, UNIT SEPARATOR.
 &lt;/ul&gt;
 &lt;p&gt;</description>
					<attribute name="@param">
						<description>codePoint the character (Unicode code point) to be tested.</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if the character is a Java whitespace
          character; &lt;code&gt;false&lt;/code&gt; otherwise.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isSpaceChar(int)</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="codePoint" comment="the character (Unicode code point) to be tested." fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="isISOControl" returncomment="&lt;code&gt;true&lt;/code&gt; if the character is an ISO control character;
          &lt;code&gt;false&lt;/code&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Determines if the specified character is an ISO control
 character.  A character is considered to be an ISO control
 character if its code is in the range &lt;code&gt;&apos;&amp;#92;u0000&apos;&lt;/code&gt;
 through &lt;code&gt;&apos;&amp;#92;u001F&apos;&lt;/code&gt; or in the range
 &lt;code&gt;&apos;&amp;#92;u007F&apos;&lt;/code&gt; through &lt;code&gt;&apos;&amp;#92;u009F&apos;&lt;/code&gt;.

 &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; This method cannot handle &lt;a
 href=&quot;#supplementary&quot;&gt; supplementary characters&lt;/a&gt;. To support
 all Unicode characters, including supplementary characters, use
 the {@link #isISOControl(int)} method.</description>
					<attribute name="@param">
						<description>ch      the character to be tested.</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if the character is an ISO control character;
          &lt;code&gt;false&lt;/code&gt; otherwise.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isSpaceChar(char)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isWhitespace(char)</description>
					</attribute>
					<attribute name="@since">
						<description>1.1</description>
					</attribute>
				</comment>
				<params>
					<param name="ch" comment="the character to be tested." fulltype="char" type="char" />
				</params>
			</method>
			<method static="true" visibility="public" name="isISOControl" returncomment="&lt;code&gt;true&lt;/code&gt; if the character is an ISO control character;
          &lt;code&gt;false&lt;/code&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Determines if the referenced character (Unicode code point) is an ISO control
 character.  A character is considered to be an ISO control
 character if its code is in the range &lt;code&gt;&apos;&amp;#92;u0000&apos;&lt;/code&gt;
 through &lt;code&gt;&apos;&amp;#92;u001F&apos;&lt;/code&gt; or in the range
 &lt;code&gt;&apos;&amp;#92;u007F&apos;&lt;/code&gt; through &lt;code&gt;&apos;&amp;#92;u009F&apos;&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>codePoint the character (Unicode code point) to be tested.</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if the character is an ISO control character;
          &lt;code&gt;false&lt;/code&gt; otherwise.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isSpaceChar(int)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isWhitespace(int)</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="codePoint" comment="the character (Unicode code point) to be tested." fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="getType" returncomment="a value of type &lt;code&gt;int&lt;/code&gt; representing the
          character&apos;s general category." fulltype="int" type="int">
				<comment>
					<description>Returns a value indicating a character&apos;s general category.

 &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; This method cannot handle &lt;a
 href=&quot;#supplementary&quot;&gt; supplementary characters&lt;/a&gt;. To support
 all Unicode characters, including supplementary characters, use
 the {@link #getType(int)} method.</description>
					<attribute name="@param">
						<description>ch      the character to be tested.</description>
					</attribute>
					<attribute name="@return">
						<description>a value of type &lt;code&gt;int&lt;/code&gt; representing the
          character&apos;s general category.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#COMBINING_SPACING_MARK</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#CONNECTOR_PUNCTUATION</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#CONTROL</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#CURRENCY_SYMBOL</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#DASH_PUNCTUATION</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#DECIMAL_DIGIT_NUMBER</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#ENCLOSING_MARK</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#END_PUNCTUATION</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#FINAL_QUOTE_PUNCTUATION</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#FORMAT</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#INITIAL_QUOTE_PUNCTUATION</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#LETTER_NUMBER</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#LINE_SEPARATOR</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#LOWERCASE_LETTER</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#MATH_SYMBOL</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#MODIFIER_LETTER</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#MODIFIER_SYMBOL</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#NON_SPACING_MARK</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#OTHER_LETTER</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#OTHER_NUMBER</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#OTHER_PUNCTUATION</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#OTHER_SYMBOL</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#PARAGRAPH_SEPARATOR</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#PRIVATE_USE</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#SPACE_SEPARATOR</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#START_PUNCTUATION</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#SURROGATE</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#TITLECASE_LETTER</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#UNASSIGNED</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#UPPERCASE_LETTER</description>
					</attribute>
					<attribute name="@since">
						<description>1.1</description>
					</attribute>
				</comment>
				<params>
					<param name="ch" comment="the character to be tested." fulltype="char" type="char" />
				</params>
			</method>
			<method static="true" visibility="public" name="getType" returncomment="a value of type &lt;code&gt;int&lt;/code&gt; representing the
          character&apos;s general category." fulltype="int" type="int">
				<comment>
					<description>Returns a value indicating a character&apos;s general category.</description>
					<attribute name="@param">
						<description>codePoint the character (Unicode code point) to be tested.</description>
					</attribute>
					<attribute name="@return">
						<description>a value of type &lt;code&gt;int&lt;/code&gt; representing the
          character&apos;s general category.</description>
					</attribute>
					<attribute name="@see">
						<description>Character#COMBINING_SPACING_MARK COMBINING_SPACING_MARK</description>
					</attribute>
					<attribute name="@see">
						<description>Character#CONNECTOR_PUNCTUATION CONNECTOR_PUNCTUATION</description>
					</attribute>
					<attribute name="@see">
						<description>Character#CONTROL CONTROL</description>
					</attribute>
					<attribute name="@see">
						<description>Character#CURRENCY_SYMBOL CURRENCY_SYMBOL</description>
					</attribute>
					<attribute name="@see">
						<description>Character#DASH_PUNCTUATION DASH_PUNCTUATION</description>
					</attribute>
					<attribute name="@see">
						<description>Character#DECIMAL_DIGIT_NUMBER DECIMAL_DIGIT_NUMBER</description>
					</attribute>
					<attribute name="@see">
						<description>Character#ENCLOSING_MARK ENCLOSING_MARK</description>
					</attribute>
					<attribute name="@see">
						<description>Character#END_PUNCTUATION END_PUNCTUATION</description>
					</attribute>
					<attribute name="@see">
						<description>Character#FINAL_QUOTE_PUNCTUATION FINAL_QUOTE_PUNCTUATION</description>
					</attribute>
					<attribute name="@see">
						<description>Character#FORMAT FORMAT</description>
					</attribute>
					<attribute name="@see">
						<description>Character#INITIAL_QUOTE_PUNCTUATION INITIAL_QUOTE_PUNCTUATION</description>
					</attribute>
					<attribute name="@see">
						<description>Character#LETTER_NUMBER LETTER_NUMBER</description>
					</attribute>
					<attribute name="@see">
						<description>Character#LINE_SEPARATOR LINE_SEPARATOR</description>
					</attribute>
					<attribute name="@see">
						<description>Character#LOWERCASE_LETTER LOWERCASE_LETTER</description>
					</attribute>
					<attribute name="@see">
						<description>Character#MATH_SYMBOL MATH_SYMBOL</description>
					</attribute>
					<attribute name="@see">
						<description>Character#MODIFIER_LETTER MODIFIER_LETTER</description>
					</attribute>
					<attribute name="@see">
						<description>Character#MODIFIER_SYMBOL MODIFIER_SYMBOL</description>
					</attribute>
					<attribute name="@see">
						<description>Character#NON_SPACING_MARK NON_SPACING_MARK</description>
					</attribute>
					<attribute name="@see">
						<description>Character#OTHER_LETTER OTHER_LETTER</description>
					</attribute>
					<attribute name="@see">
						<description>Character#OTHER_NUMBER OTHER_NUMBER</description>
					</attribute>
					<attribute name="@see">
						<description>Character#OTHER_PUNCTUATION OTHER_PUNCTUATION</description>
					</attribute>
					<attribute name="@see">
						<description>Character#OTHER_SYMBOL OTHER_SYMBOL</description>
					</attribute>
					<attribute name="@see">
						<description>Character#PARAGRAPH_SEPARATOR PARAGRAPH_SEPARATOR</description>
					</attribute>
					<attribute name="@see">
						<description>Character#PRIVATE_USE PRIVATE_USE</description>
					</attribute>
					<attribute name="@see">
						<description>Character#SPACE_SEPARATOR SPACE_SEPARATOR</description>
					</attribute>
					<attribute name="@see">
						<description>Character#START_PUNCTUATION START_PUNCTUATION</description>
					</attribute>
					<attribute name="@see">
						<description>Character#SURROGATE SURROGATE</description>
					</attribute>
					<attribute name="@see">
						<description>Character#TITLECASE_LETTER TITLECASE_LETTER</description>
					</attribute>
					<attribute name="@see">
						<description>Character#UNASSIGNED UNASSIGNED</description>
					</attribute>
					<attribute name="@see">
						<description>Character#UPPERCASE_LETTER UPPERCASE_LETTER</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="codePoint" comment="the character (Unicode code point) to be tested." fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="forDigit" returncomment="the &lt;code&gt;char&lt;/code&gt; representation of the specified digit
          in the specified radix." fulltype="char" type="char">
				<comment>
					<description>Determines the character representation for a specific digit in
 the specified radix. If the value of &lt;code&gt;radix&lt;/code&gt; is not a
 valid radix, or the value of &lt;code&gt;digit&lt;/code&gt; is not a valid
 digit in the specified radix, the null character
 (&lt;code&gt;&apos;&amp;#92;u0000&apos;&lt;/code&gt;) is returned.
 &lt;p&gt;
 The &lt;code&gt;radix&lt;/code&gt; argument is valid if it is greater than or
 equal to &lt;code&gt;MIN_RADIX&lt;/code&gt; and less than or equal to
 &lt;code&gt;MAX_RADIX&lt;/code&gt;. The &lt;code&gt;digit&lt;/code&gt; argument is valid if
 &lt;code&gt;0&amp;nbsp;&amp;lt;=digit&amp;nbsp;&amp;lt;&amp;nbsp;radix&lt;/code&gt;.
 &lt;p&gt;
 If the digit is less than 10, then
 &lt;code&gt;&apos;0&apos;&amp;nbsp;+ digit&lt;/code&gt; is returned. Otherwise, the value
 &lt;code&gt;&apos;a&apos;&amp;nbsp;+ digit&amp;nbsp;-&amp;nbsp;10&lt;/code&gt; is returned.</description>
					<attribute name="@param">
						<description>digit   the number to convert to a character.</description>
					</attribute>
					<attribute name="@param">
						<description>radix   the radix.</description>
					</attribute>
					<attribute name="@return">
						<description>the &lt;code&gt;char&lt;/code&gt; representation of the specified digit
          in the specified radix.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#MIN_RADIX</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#MAX_RADIX</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#digit(char, int)</description>
					</attribute>
				</comment>
				<params>
					<param name="digit" comment="the number to convert to a character." fulltype="int" type="int" />
					<param name="radix" comment="the radix." fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="getDirectionality" returncomment="the directionality property of the &lt;code&gt;char&lt;/code&gt; value." fulltype="byte" type="byte">
				<comment>
					<description>Returns the Unicode directionality property for the given
 character.  Character directionality is used to calculate the
 visual ordering of text. The directionality value of undefined
 &lt;code&gt;char&lt;/code&gt; values is &lt;code&gt;DIRECTIONALITY_UNDEFINED&lt;/code&gt;.

 &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; This method cannot handle &lt;a
 href=&quot;#supplementary&quot;&gt; supplementary characters&lt;/a&gt;. To support
 all Unicode characters, including supplementary characters, use
 the {@link #getDirectionality(int)} method.</description>
					<attribute name="@param">
						<description>ch &lt;code&gt;char&lt;/code&gt; for which the directionality property
            is requested.</description>
					</attribute>
					<attribute name="@return">
						<description>the directionality property of the &lt;code&gt;char&lt;/code&gt; value.</description>
					</attribute>
					<attribute name="@see">
						<description>Character#DIRECTIONALITY_UNDEFINED</description>
					</attribute>
					<attribute name="@see">
						<description>Character#DIRECTIONALITY_LEFT_TO_RIGHT</description>
					</attribute>
					<attribute name="@see">
						<description>Character#DIRECTIONALITY_RIGHT_TO_LEFT</description>
					</attribute>
					<attribute name="@see">
						<description>Character#DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC</description>
					</attribute>
					<attribute name="@see">
						<description>Character#DIRECTIONALITY_EUROPEAN_NUMBER</description>
					</attribute>
					<attribute name="@see">
						<description>Character#DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR</description>
					</attribute>
					<attribute name="@see">
						<description>Character#DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR</description>
					</attribute>
					<attribute name="@see">
						<description>Character#DIRECTIONALITY_ARABIC_NUMBER</description>
					</attribute>
					<attribute name="@see">
						<description>Character#DIRECTIONALITY_COMMON_NUMBER_SEPARATOR</description>
					</attribute>
					<attribute name="@see">
						<description>Character#DIRECTIONALITY_NONSPACING_MARK</description>
					</attribute>
					<attribute name="@see">
						<description>Character#DIRECTIONALITY_BOUNDARY_NEUTRAL</description>
					</attribute>
					<attribute name="@see">
						<description>Character#DIRECTIONALITY_PARAGRAPH_SEPARATOR</description>
					</attribute>
					<attribute name="@see">
						<description>Character#DIRECTIONALITY_SEGMENT_SEPARATOR</description>
					</attribute>
					<attribute name="@see">
						<description>Character#DIRECTIONALITY_WHITESPACE</description>
					</attribute>
					<attribute name="@see">
						<description>Character#DIRECTIONALITY_OTHER_NEUTRALS</description>
					</attribute>
					<attribute name="@see">
						<description>Character#DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING</description>
					</attribute>
					<attribute name="@see">
						<description>Character#DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE</description>
					</attribute>
					<attribute name="@see">
						<description>Character#DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING</description>
					</attribute>
					<attribute name="@see">
						<description>Character#DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE</description>
					</attribute>
					<attribute name="@see">
						<description>Character#DIRECTIONALITY_POP_DIRECTIONAL_FORMAT</description>
					</attribute>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
				<params>
					<param name="ch" comment="&lt;code&gt;char&lt;/code&gt; for which the directionality property
            is requested." fulltype="char" type="char" />
				</params>
			</method>
			<method static="true" visibility="public" name="getDirectionality" returncomment="the directionality property of the character." fulltype="byte" type="byte">
				<comment>
					<description>Returns the Unicode directionality property for the given
 character (Unicode code point).  Character directionality is
 used to calculate the visual ordering of text. The
 directionality value of undefined character is {@link
 #DIRECTIONALITY_UNDEFINED}.</description>
					<attribute name="@param">
						<description>codePoint the character (Unicode code point) for which
          the directionality property is requested.</description>
					</attribute>
					<attribute name="@return">
						<description>the directionality property of the character.</description>
					</attribute>
					<attribute name="@see">
						<description>Character#DIRECTIONALITY_UNDEFINED DIRECTIONALITY_UNDEFINED</description>
					</attribute>
					<attribute name="@see">
						<description>Character#DIRECTIONALITY_LEFT_TO_RIGHT DIRECTIONALITY_LEFT_TO_RIGHT</description>
					</attribute>
					<attribute name="@see">
						<description>Character#DIRECTIONALITY_RIGHT_TO_LEFT DIRECTIONALITY_RIGHT_TO_LEFT</description>
					</attribute>
					<attribute name="@see">
						<description>Character#DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC</description>
					</attribute>
					<attribute name="@see">
						<description>Character#DIRECTIONALITY_EUROPEAN_NUMBER DIRECTIONALITY_EUROPEAN_NUMBER</description>
					</attribute>
					<attribute name="@see">
						<description>Character#DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR</description>
					</attribute>
					<attribute name="@see">
						<description>Character#DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR</description>
					</attribute>
					<attribute name="@see">
						<description>Character#DIRECTIONALITY_ARABIC_NUMBER DIRECTIONALITY_ARABIC_NUMBER</description>
					</attribute>
					<attribute name="@see">
						<description>Character#DIRECTIONALITY_COMMON_NUMBER_SEPARATOR DIRECTIONALITY_COMMON_NUMBER_SEPARATOR</description>
					</attribute>
					<attribute name="@see">
						<description>Character#DIRECTIONALITY_NONSPACING_MARK DIRECTIONALITY_NONSPACING_MARK</description>
					</attribute>
					<attribute name="@see">
						<description>Character#DIRECTIONALITY_BOUNDARY_NEUTRAL DIRECTIONALITY_BOUNDARY_NEUTRAL</description>
					</attribute>
					<attribute name="@see">
						<description>Character#DIRECTIONALITY_PARAGRAPH_SEPARATOR DIRECTIONALITY_PARAGRAPH_SEPARATOR</description>
					</attribute>
					<attribute name="@see">
						<description>Character#DIRECTIONALITY_SEGMENT_SEPARATOR DIRECTIONALITY_SEGMENT_SEPARATOR</description>
					</attribute>
					<attribute name="@see">
						<description>Character#DIRECTIONALITY_WHITESPACE DIRECTIONALITY_WHITESPACE</description>
					</attribute>
					<attribute name="@see">
						<description>Character#DIRECTIONALITY_OTHER_NEUTRALS DIRECTIONALITY_OTHER_NEUTRALS</description>
					</attribute>
					<attribute name="@see">
						<description>Character#DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING</description>
					</attribute>
					<attribute name="@see">
						<description>Character#DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE</description>
					</attribute>
					<attribute name="@see">
						<description>Character#DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING</description>
					</attribute>
					<attribute name="@see">
						<description>Character#DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE</description>
					</attribute>
					<attribute name="@see">
						<description>Character#DIRECTIONALITY_POP_DIRECTIONAL_FORMAT DIRECTIONALITY_POP_DIRECTIONAL_FORMAT</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="codePoint" comment="the character (Unicode code point) for which
          the directionality property is requested." fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="isMirrored" returncomment="&lt;code&gt;true&lt;/code&gt; if the char is mirrored, &lt;code&gt;false&lt;/code&gt;
         if the &lt;code&gt;char&lt;/code&gt; is not mirrored or is not defined." fulltype="boolean" type="boolean">
				<comment>
					<description>Determines whether the character is mirrored according to the
 Unicode specification.  Mirrored characters should have their
 glyphs horizontally mirrored when displayed in text that is
 right-to-left.  For example, &lt;code&gt;&apos;&amp;#92;u0028&apos;&lt;/code&gt; LEFT
 PARENTHESIS is semantically defined to be an &lt;i&gt;opening
 parenthesis&lt;/i&gt;.  This will appear as a &quot;(&quot; in text that is
 left-to-right but as a &quot;)&quot; in text that is right-to-left.

 &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; This method cannot handle &lt;a
 href=&quot;#supplementary&quot;&gt; supplementary characters&lt;/a&gt;. To support
 all Unicode characters, including supplementary characters, use
 the {@link #isMirrored(int)} method.</description>
					<attribute name="@param">
						<description>ch &lt;code&gt;char&lt;/code&gt; for which the mirrored property is requested</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if the char is mirrored, &lt;code&gt;false&lt;/code&gt;
         if the &lt;code&gt;char&lt;/code&gt; is not mirrored or is not defined.</description>
					</attribute>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
				<params>
					<param name="ch" comment="&lt;code&gt;char&lt;/code&gt; for which the mirrored property is requested" fulltype="char" type="char" />
				</params>
			</method>
			<method static="true" visibility="public" name="isMirrored" returncomment="&lt;code&gt;true&lt;/code&gt; if the character is mirrored, &lt;code&gt;false&lt;/code&gt;
          if the character is not mirrored or is not defined." fulltype="boolean" type="boolean">
				<comment>
					<description>Determines whether the specified character (Unicode code point)
 is mirrored according to the Unicode specification.  Mirrored
 characters should have their glyphs horizontally mirrored when
 displayed in text that is right-to-left.  For example,
 &lt;code&gt;&apos;&amp;#92;u0028&apos;&lt;/code&gt; LEFT PARENTHESIS is semantically
 defined to be an &lt;i&gt;opening parenthesis&lt;/i&gt;.  This will appear
 as a &quot;(&quot; in text that is left-to-right but as a &quot;)&quot; in text
 that is right-to-left.</description>
					<attribute name="@param">
						<description>codePoint the character (Unicode code point) to be tested.</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if the character is mirrored, &lt;code&gt;false&lt;/code&gt;
          if the character is not mirrored or is not defined.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="codePoint" comment="the character (Unicode code point) to be tested." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="compareTo" returncomment="the value &lt;code&gt;0&lt;/code&gt; if the argument &lt;code&gt;Character&lt;/code&gt;
          is equal to this &lt;code&gt;Character&lt;/code&gt;; a value less than
          &lt;code&gt;0&lt;/code&gt; if this &lt;code&gt;Character&lt;/code&gt; is numerically less
          than the &lt;code&gt;Character&lt;/code&gt; argument; and a value greater than
          &lt;code&gt;0&lt;/code&gt; if this &lt;code&gt;Character&lt;/code&gt; is numerically greater
          than the &lt;code&gt;Character&lt;/code&gt; argument (unsigned comparison).
          Note that this is strictly a numerical comparison; it is not
          locale-dependent." fulltype="int" type="int">
				<comment>
					<description>Compares two &lt;code&gt;Character&lt;/code&gt; objects numerically.</description>
					<attribute name="@param">
						<description>anotherCharacter   the &lt;code&gt;Character&lt;/code&gt; to be compared.</description>
					</attribute>
					<attribute name="@return">
						<description>the value &lt;code&gt;0&lt;/code&gt; if the argument &lt;code&gt;Character&lt;/code&gt;
          is equal to this &lt;code&gt;Character&lt;/code&gt;; a value less than
          &lt;code&gt;0&lt;/code&gt; if this &lt;code&gt;Character&lt;/code&gt; is numerically less
          than the &lt;code&gt;Character&lt;/code&gt; argument; and a value greater than
          &lt;code&gt;0&lt;/code&gt; if this &lt;code&gt;Character&lt;/code&gt; is numerically greater
          than the &lt;code&gt;Character&lt;/code&gt; argument (unsigned comparison).
          Note that this is strictly a numerical comparison; it is not
          locale-dependent.</description>
					</attribute>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
				<params>
					<param name="anotherCharacter" comment="the &lt;code&gt;Character&lt;/code&gt; to be compared." fulltype="java.lang.Character" type="Character" />
				</params>
			</method>
			<method static="true" visibility="package-private" name="toUpperCaseEx" returncomment="either the uppercase equivalent of the character, if
          any, or an error flag (&lt;code&gt;Character.ERROR&lt;/code&gt;)
          that indicates that a 1:M &lt;code&gt;char&lt;/code&gt; mapping exists." fulltype="int" type="int">
				<comment>
					<description>Converts the character (Unicode code point) argument to uppercase using
 information from the UnicodeData file.
 &lt;p&gt;</description>
					<attribute name="@param">
						<description>codePoint   the character (Unicode code point) to be converted.</description>
					</attribute>
					<attribute name="@return">
						<description>either the uppercase equivalent of the character, if
          any, or an error flag (&lt;code&gt;Character.ERROR&lt;/code&gt;)
          that indicates that a 1:M &lt;code&gt;char&lt;/code&gt; mapping exists.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isLowerCase(char)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#isUpperCase(char)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#toLowerCase(char)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#toTitleCase(char)</description>
					</attribute>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
				<params>
					<param name="codePoint" comment="the character (Unicode code point) to be converted." fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="package-private" name="toUpperCaseCharArray" returncomment="a &lt;code&gt;char[]&lt;/code&gt; with the uppercased character." fulltype="char[]" type="char">
				<comment>
					<description>Converts the character (Unicode code point) argument to uppercase using case
 mapping information from the SpecialCasing file in the Unicode
 specification. If a character has no explicit uppercase
 mapping, then the &lt;code&gt;char&lt;/code&gt; itself is returned in the
 &lt;code&gt;char[]&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>codePoint   the character (Unicode code point) to be converted.</description>
					</attribute>
					<attribute name="@return">
						<description>a &lt;code&gt;char[]&lt;/code&gt; with the uppercased character.</description>
					</attribute>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
				<params>
					<param name="codePoint" comment="the character (Unicode code point) to be converted." fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="reverseBytes" returncomment="the value obtained by reversing (or, equivalently, swapping)
     the bytes in the specified &lt;tt&gt;char&lt;/tt&gt; value." fulltype="char" type="char">
				<comment>
					<description>Returns the value obtained by reversing the order of the bytes in the
 specified &lt;tt&gt;char&lt;/tt&gt; value.</description>
					<attribute name="@return">
						<description>the value obtained by reversing (or, equivalently, swapping)
     the bytes in the specified &lt;tt&gt;char&lt;/tt&gt; value.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="ch" fulltype="char" type="char" />
				</params>
			</method>
		</methods>
		<jelclass superclass="Object" visibility="public" package="java.lang" superclassfulltype="java.lang.Object" fulltype="java.lang.Character.Subset" type="Character.Subset">
			<comment>
				<description>Instances of this class represent particular subsets of the Unicode
 character set.  The only family of subsets defined in the
 &lt;code&gt;Character&lt;/code&gt; class is &lt;code&gt;{@link Character.UnicodeBlock
 UnicodeBlock}&lt;/code&gt;.  Other portions of the Java API may define other
 subsets for their own purposes.</description>
				<attribute name="@since">
					<description>1.2</description>
				</attribute>
			</comment>
			<fields>
				<field visibility="private" name="name" fulltype="java.lang.String" type="String" />
			</fields>
			<methods>
				<constructor visibility="protected" name="Character.Subset">
					<comment>
						<description>Constructs a new &lt;code&gt;Subset&lt;/code&gt; instance.</description>
						<attribute name="@exception">
							<description>NullPointerException if name is &lt;code&gt;null&lt;/code&gt;</description>
						</attribute>
						<attribute name="@param">
							<description>name  The name of this subset</description>
						</attribute>
					</comment>
					<params>
						<param name="name" comment="The name of this subset" fulltype="java.lang.String" type="String" />
					</params>
				</constructor>
				<method final="true" visibility="public" name="equals" fulltype="boolean" type="boolean">
					<comment>
						<description>Compares two &lt;code&gt;Subset&lt;/code&gt; objects for equality.
 This method returns &lt;code&gt;true&lt;/code&gt; if and only if
 &lt;code&gt;this&lt;/code&gt; and the argument refer to the same
 object; since this method is &lt;code&gt;final&lt;/code&gt;, this
 guarantee holds for all subclasses.</description>
					</comment>
					<params>
						<param name="obj" fulltype="java.lang.Object" type="Object" />
					</params>
				</method>
				<method final="true" visibility="public" name="hashCode" fulltype="int" type="int">
					<comment>
						<description>Returns the standard hash code as defined by the
 &lt;code&gt;{@link Object#hashCode}&lt;/code&gt; method.  This method
 is &lt;code&gt;final&lt;/code&gt; in order to ensure that the
 &lt;code&gt;equals&lt;/code&gt; and &lt;code&gt;hashCode&lt;/code&gt; methods will
 be consistent in all subclasses.</description>
					</comment>
				</method>
				<method final="true" visibility="public" name="toString" fulltype="java.lang.String" type="String">
					<comment>
						<description>Returns the name of this subset.</description>
					</comment>
				</method>
			</methods>
		</jelclass>
		<jelclass final="true" superclass="Character.Subset" visibility="public" package="java.lang" superclassfulltype="java.lang.Character.Subset" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
			<comment>
				<description>A family of character subsets representing the character blocks in the
 Unicode specification. Character blocks generally define characters
 used for a specific script or purpose. A character is contained by
 at most one Unicode block.</description>
				<attribute name="@since">
					<description>1.2</description>
				</attribute>
			</comment>
			<fields>
				<field static="true" visibility="private" name="map" fulltype="java.util.Map" type="Map" />
				<field final="true" static="true" visibility="public" name="BASIC_LATIN" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Basic Latin&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="LATIN_1_SUPPLEMENT" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Latin-1 Supplement&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="LATIN_EXTENDED_A" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Latin Extended-A&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="LATIN_EXTENDED_B" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Latin Extended-B&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="IPA_EXTENSIONS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;IPA Extensions&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="SPACING_MODIFIER_LETTERS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Spacing Modifier Letters&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="COMBINING_DIACRITICAL_MARKS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Combining Diacritical Marks&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="GREEK" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Greek and Coptic&quot; Unicode character block.
 &lt;p&gt;
 This block was previously known as the &quot;Greek&quot; block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="CYRILLIC" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Cyrillic&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="ARMENIAN" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Armenian&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="HEBREW" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Hebrew&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="ARABIC" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Arabic&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="DEVANAGARI" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Devanagari&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="BENGALI" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Bengali&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="GURMUKHI" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Gurmukhi&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="GUJARATI" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Gujarati&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="ORIYA" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Oriya&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="TAMIL" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Tamil&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="TELUGU" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Telugu&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="KANNADA" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Kannada&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="MALAYALAM" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Malayalam&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="THAI" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Thai&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="LAO" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Lao&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="TIBETAN" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Tibetan&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="GEORGIAN" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Georgian&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="HANGUL_JAMO" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Hangul Jamo&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="LATIN_EXTENDED_ADDITIONAL" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Latin Extended Additional&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="GREEK_EXTENDED" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Greek Extended&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="GENERAL_PUNCTUATION" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;General Punctuation&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="SUPERSCRIPTS_AND_SUBSCRIPTS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Superscripts and Subscripts&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="CURRENCY_SYMBOLS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Currency Symbols&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="COMBINING_MARKS_FOR_SYMBOLS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Combining Diacritical Marks for Symbols&quot; Unicode character block.
 &lt;p&gt;
 This block was previously known as &quot;Combining Marks for Symbols&quot;.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="LETTERLIKE_SYMBOLS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Letterlike Symbols&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="NUMBER_FORMS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Number Forms&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="ARROWS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Arrows&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="MATHEMATICAL_OPERATORS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Mathematical Operators&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="MISCELLANEOUS_TECHNICAL" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Miscellaneous Technical&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="CONTROL_PICTURES" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Control Pictures&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="OPTICAL_CHARACTER_RECOGNITION" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Optical Character Recognition&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="ENCLOSED_ALPHANUMERICS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Enclosed Alphanumerics&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="BOX_DRAWING" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Box Drawing&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="BLOCK_ELEMENTS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Block Elements&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="GEOMETRIC_SHAPES" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Geometric Shapes&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="MISCELLANEOUS_SYMBOLS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Miscellaneous Symbols&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="DINGBATS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Dingbats&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="CJK_SYMBOLS_AND_PUNCTUATION" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;CJK Symbols and Punctuation&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="HIRAGANA" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Hiragana&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="KATAKANA" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Katakana&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="BOPOMOFO" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Bopomofo&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="HANGUL_COMPATIBILITY_JAMO" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Hangul Compatibility Jamo&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="KANBUN" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Kanbun&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="ENCLOSED_CJK_LETTERS_AND_MONTHS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Enclosed CJK Letters and Months&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="CJK_COMPATIBILITY" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;CJK Compatibility&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="CJK_UNIFIED_IDEOGRAPHS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;CJK Unified Ideographs&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="HANGUL_SYLLABLES" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Hangul Syllables&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="PRIVATE_USE_AREA" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Private Use Area&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="CJK_COMPATIBILITY_IDEOGRAPHS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;CJK Compatibility Ideographs&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="ALPHABETIC_PRESENTATION_FORMS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Alphabetic Presentation Forms&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="ARABIC_PRESENTATION_FORMS_A" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Arabic Presentation Forms-A&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="COMBINING_HALF_MARKS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Combining Half Marks&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="CJK_COMPATIBILITY_FORMS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;CJK Compatibility Forms&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="SMALL_FORM_VARIANTS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Small Form Variants&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="ARABIC_PRESENTATION_FORMS_B" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Arabic Presentation Forms-B&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="HALFWIDTH_AND_FULLWIDTH_FORMS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Halfwidth and Fullwidth Forms&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="SPECIALS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Specials&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.2</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="SURROGATES_AREA" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<attribute name="@deprecated">
							<description>As of J2SE 5, use {@link #HIGH_SURROGATES},
             {@link #HIGH_PRIVATE_USE_SURROGATES}, and
             {@link #LOW_SURROGATES}. These new constants match
             the block definitions of the Unicode Standard.
             The {@link #of(char)} and {@link #of(int)} methods
             return the new constants, not SURROGATES_AREA.</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="SYRIAC" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Syriac&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.4</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="THAANA" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Thaana&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.4</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="SINHALA" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Sinhala&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.4</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="MYANMAR" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Myanmar&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.4</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="ETHIOPIC" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Ethiopic&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.4</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="CHEROKEE" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Cherokee&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.4</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Unified Canadian Aboriginal Syllabics&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.4</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="OGHAM" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Ogham&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.4</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="RUNIC" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Runic&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.4</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="KHMER" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Khmer&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.4</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="MONGOLIAN" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Mongolian&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.4</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="BRAILLE_PATTERNS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Braille Patterns&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.4</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="CJK_RADICALS_SUPPLEMENT" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;CJK Radicals Supplement&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.4</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="KANGXI_RADICALS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Kangxi Radicals&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.4</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="IDEOGRAPHIC_DESCRIPTION_CHARACTERS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Ideographic Description Characters&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.4</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="BOPOMOFO_EXTENDED" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Bopomofo Extended&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.4</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;CJK Unified Ideographs Extension A&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.4</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="YI_SYLLABLES" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Yi Syllables&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.4</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="YI_RADICALS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Yi Radicals&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.4</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="CYRILLIC_SUPPLEMENTARY" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Cyrillic Supplementary&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.5</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="TAGALOG" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Tagalog&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.5</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="HANUNOO" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Hanunoo&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.5</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="BUHID" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Buhid&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.5</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="TAGBANWA" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Tagbanwa&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.5</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="LIMBU" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Limbu&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.5</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="TAI_LE" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Tai Le&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.5</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="KHMER_SYMBOLS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Khmer Symbols&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.5</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="PHONETIC_EXTENSIONS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Phonetic Extensions&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.5</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Miscellaneous Mathematical Symbols-A&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.5</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="SUPPLEMENTAL_ARROWS_A" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Supplemental Arrows-A&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.5</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="SUPPLEMENTAL_ARROWS_B" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Supplemental Arrows-B&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.5</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Miscellaneous Mathematical Symbols-B&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.5</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="SUPPLEMENTAL_MATHEMATICAL_OPERATORS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Supplemental Mathematical Operators&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.5</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="MISCELLANEOUS_SYMBOLS_AND_ARROWS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Miscellaneous Symbols and Arrows&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.5</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="KATAKANA_PHONETIC_EXTENSIONS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Katakana Phonetic Extensions&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.5</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="YIJING_HEXAGRAM_SYMBOLS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Yijing Hexagram Symbols&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.5</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="VARIATION_SELECTORS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Variation Selectors&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.5</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="LINEAR_B_SYLLABARY" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Linear B Syllabary&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.5</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="LINEAR_B_IDEOGRAMS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Linear B Ideograms&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.5</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="AEGEAN_NUMBERS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Aegean Numbers&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.5</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="OLD_ITALIC" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Old Italic&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.5</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="GOTHIC" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Gothic&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.5</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="UGARITIC" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Ugaritic&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.5</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="DESERET" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Deseret&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.5</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="SHAVIAN" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Shavian&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.5</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="OSMANYA" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Osmanya&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.5</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="CYPRIOT_SYLLABARY" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Cypriot Syllabary&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.5</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="BYZANTINE_MUSICAL_SYMBOLS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Byzantine Musical Symbols&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.5</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="MUSICAL_SYMBOLS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Musical Symbols&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.5</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="TAI_XUAN_JING_SYMBOLS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Tai Xuan Jing Symbols&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.5</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="MATHEMATICAL_ALPHANUMERIC_SYMBOLS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Mathematical Alphanumeric Symbols&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.5</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;CJK Unified Ideographs Extension B&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.5</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;CJK Compatibility Ideographs Supplement&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.5</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="TAGS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Tags&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.5</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="VARIATION_SELECTORS_SUPPLEMENT" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Variation Selectors Supplement&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.5</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="SUPPLEMENTARY_PRIVATE_USE_AREA_A" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Supplementary Private Use Area-A&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.5</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="SUPPLEMENTARY_PRIVATE_USE_AREA_B" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Supplementary Private Use Area-B&quot; Unicode character block.</description>
						<attribute name="@since">
							<description>1.5</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="HIGH_SURROGATES" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;High Surrogates&quot; Unicode character block.
 This block represents codepoint values in the high surrogate
 range: 0xD800 through 0xDB7F</description>
						<attribute name="@since">
							<description>1.5</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="HIGH_PRIVATE_USE_SURROGATES" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;High Private Use Surrogates&quot; Unicode character block.
 This block represents codepoint values in the high surrogate
 range: 0xDB80 through 0xDBFF</description>
						<attribute name="@since">
							<description>1.5</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="LOW_SURROGATES" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Constant for the &quot;Low Surrogates&quot; Unicode character block.
 This block represents codepoint values in the high surrogate
 range: 0xDC00 through 0xDFFF</description>
						<attribute name="@since">
							<description>1.5</description>
						</attribute>
					</comment>
				</field>
				<field final="true" static="true" visibility="private" name="blockStarts" fulltype="int[]" type="int" />
				<field final="true" static="true" visibility="private" name="blocks" fulltype="java.lang.Character.UnicodeBlock[]" type="Character.UnicodeBlock" />
			</fields>
			<methods>
				<constructor visibility="private" name="Character.UnicodeBlock">
					<comment>
						<description>Create a UnicodeBlock with the given identifier name.
 This name must be the same as the block identifier.</description>
					</comment>
					<params>
						<param name="idName" fulltype="java.lang.String" type="String" />
					</params>
				</constructor>
				<constructor visibility="private" name="Character.UnicodeBlock">
					<comment>
						<description>Create a UnicodeBlock with the given identifier name and
 alias name.</description>
					</comment>
					<params>
						<param name="idName" fulltype="java.lang.String" type="String" />
						<param name="alias" fulltype="java.lang.String" type="String" />
					</params>
				</constructor>
				<constructor visibility="private" name="Character.UnicodeBlock">
					<comment>
						<description>Create a UnicodeBlock with the given identifier name and
 alias names.</description>
					</comment>
					<params>
						<param name="idName" fulltype="java.lang.String" type="String" />
						<param name="aliasName" fulltype="java.lang.String[]" type="String" />
					</params>
				</constructor>
				<method static="true" visibility="public" name="of" returncomment="The &lt;code&gt;UnicodeBlock&lt;/code&gt; instance representing the
          Unicode block of which this character is a member, or
          &lt;code&gt;null&lt;/code&gt; if the character is not a member of any
          Unicode block" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Returns the object representing the Unicode block containing the
 given character, or &lt;code&gt;null&lt;/code&gt; if the character is not a
 member of a defined block.

 &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; This method cannot handle &lt;a
 href=&quot;Character.html#supplementary&quot;&gt; supplementary
 characters&lt;/a&gt;. To support all Unicode characters,
 including supplementary characters, use the {@link
 #of(int)} method.</description>
						<attribute name="@param">
							<description>c  The character in question</description>
						</attribute>
						<attribute name="@return">
							<description>The &lt;code&gt;UnicodeBlock&lt;/code&gt; instance representing the
          Unicode block of which this character is a member, or
          &lt;code&gt;null&lt;/code&gt; if the character is not a member of any
          Unicode block</description>
						</attribute>
					</comment>
					<params>
						<param name="c" comment="The character in question" fulltype="char" type="char" />
					</params>
				</method>
				<method static="true" visibility="public" name="of" returncomment="The &lt;code&gt;UnicodeBlock&lt;/code&gt; instance representing the
          Unicode block of which this character is a member, or
          &lt;code&gt;null&lt;/code&gt; if the character is not a member of any
          Unicode block" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Returns the object representing the Unicode block
 containing the given character (Unicode code point), or
 &lt;code&gt;null&lt;/code&gt; if the character is not a member of a
 defined block.</description>
						<attribute name="@param">
							<description>codePoint the character (Unicode code point) in question.</description>
						</attribute>
						<attribute name="@return">
							<description>The &lt;code&gt;UnicodeBlock&lt;/code&gt; instance representing the
          Unicode block of which this character is a member, or
          &lt;code&gt;null&lt;/code&gt; if the character is not a member of any
          Unicode block</description>
						</attribute>
						<attribute name="@exception">
							<description>IllegalArgumentException if the specified
 &lt;code&gt;codePoint&lt;/code&gt; is an invalid Unicode code point.</description>
						</attribute>
						<attribute name="@see">
							<description>Character#isValidCodePoint(int)</description>
						</attribute>
						<attribute name="@since">
							<description>1.5</description>
						</attribute>
					</comment>
					<params>
						<param name="codePoint" comment="the character (Unicode code point) in question." fulltype="int" type="int" />
					</params>
				</method>
				<method final="true" static="true" visibility="public" name="forName" returncomment="The &lt;code&gt;UnicodeBlock&lt;/code&gt; instance identified
         by &lt;code&gt;blockName&lt;/code&gt;" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
					<comment>
						<description>Returns the UnicodeBlock with the given name. Block
 names are determined by The Unicode Standard. The file
 Blocks-&amp;lt;version&amp;gt;.txt defines blocks for a particular
 version of the standard. The {@link Character} class specifies
 the version of the standard that it supports.
 &lt;p&gt;
 This method accepts block names in the following forms:
 &lt;ol&gt;
 &lt;li&gt; Canonical block names as defined by the Unicode Standard.
 For example, the standard defines a &quot;Basic Latin&quot; block. Therefore, this
 method accepts &quot;Basic Latin&quot; as a valid block name. The documentation of
 each UnicodeBlock provides the canonical name.
 &lt;li&gt;Canonical block names with all spaces removed. For example, &quot;BasicLatin&quot;
 is a valid block name for the &quot;Basic Latin&quot; block.
 &lt;li&gt;The text representation of each constant UnicodeBlock identifier.
 For example, this method will return the {@link #BASIC_LATIN} block if
 provided with the &quot;BASIC_LATIN&quot; name. This form replaces all spaces and
  hyphens in the canonical name with underscores.
 &lt;/ol&gt;
 Finally, character case is ignored for all of the valid block name forms.
 For example, &quot;BASIC_LATIN&quot; and &quot;basic_latin&quot; are both valid block names.
 The en_US locale&apos;s case mapping rules are used to provide case-insensitive
 string comparisons for block name validation.
 &lt;p&gt;
 If the Unicode Standard changes block names, both the previous and
 current names will be accepted.</description>
						<attribute name="@param">
							<description>blockName A &lt;code&gt;UnicodeBlock&lt;/code&gt; name.</description>
						</attribute>
						<attribute name="@return">
							<description>The &lt;code&gt;UnicodeBlock&lt;/code&gt; instance identified
         by &lt;code&gt;blockName&lt;/code&gt;</description>
						</attribute>
						<attribute name="@throws">
							<description>IllegalArgumentException if &lt;code&gt;blockName&lt;/code&gt; is an
         invalid name</description>
						</attribute>
						<attribute name="@throws">
							<description>NullPointerException if &lt;code&gt;blockName&lt;/code&gt; is null</description>
						</attribute>
						<attribute name="@since">
							<description>1.5</description>
						</attribute>
					</comment>
					<params>
						<param name="blockName" comment="A &lt;code&gt;UnicodeBlock&lt;/code&gt; name." fulltype="java.lang.String" type="String" />
					</params>
				</method>
			</methods>
		</jelclass>
		<jelclass superclass="Object" visibility="private" package="java.lang" superclassfulltype="java.lang.Object" fulltype="java.lang.Character.CharacterCache" type="Character.CharacterCache">
			<fields>
				<field final="true" static="true" visibility="package-private" name="cache" fulltype="java.lang.Character[]" type="Character" />
			</fields>
			<methods>
				<constructor visibility="private" name="Character.CharacterCache" />
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="java.lang" superclassfulltype="java.lang.Object" fulltype="java.lang.Character.Subset" type="Character.Subset">
		<comment>
			<description>Instances of this class represent particular subsets of the Unicode
 character set.  The only family of subsets defined in the
 &lt;code&gt;Character&lt;/code&gt; class is &lt;code&gt;{@link Character.UnicodeBlock
 UnicodeBlock}&lt;/code&gt;.  Other portions of the Java API may define other
 subsets for their own purposes.</description>
			<attribute name="@since">
				<description>1.2</description>
			</attribute>
		</comment>
		<fields>
			<field visibility="private" name="name" fulltype="java.lang.String" type="String" />
		</fields>
		<methods>
			<constructor visibility="protected" name="Character.Subset">
				<comment>
					<description>Constructs a new &lt;code&gt;Subset&lt;/code&gt; instance.</description>
					<attribute name="@exception">
						<description>NullPointerException if name is &lt;code&gt;null&lt;/code&gt;</description>
					</attribute>
					<attribute name="@param">
						<description>name  The name of this subset</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="The name of this subset" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method final="true" visibility="public" name="equals" fulltype="boolean" type="boolean">
				<comment>
					<description>Compares two &lt;code&gt;Subset&lt;/code&gt; objects for equality.
 This method returns &lt;code&gt;true&lt;/code&gt; if and only if
 &lt;code&gt;this&lt;/code&gt; and the argument refer to the same
 object; since this method is &lt;code&gt;final&lt;/code&gt;, this
 guarantee holds for all subclasses.</description>
				</comment>
				<params>
					<param name="obj" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method final="true" visibility="public" name="hashCode" fulltype="int" type="int">
				<comment>
					<description>Returns the standard hash code as defined by the
 &lt;code&gt;{@link Object#hashCode}&lt;/code&gt; method.  This method
 is &lt;code&gt;final&lt;/code&gt; in order to ensure that the
 &lt;code&gt;equals&lt;/code&gt; and &lt;code&gt;hashCode&lt;/code&gt; methods will
 be consistent in all subclasses.</description>
				</comment>
			</method>
			<method final="true" visibility="public" name="toString" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the name of this subset.</description>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass final="true" superclass="Character.Subset" visibility="public" package="java.lang" superclassfulltype="java.lang.Character.Subset" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
		<comment>
			<description>A family of character subsets representing the character blocks in the
 Unicode specification. Character blocks generally define characters
 used for a specific script or purpose. A character is contained by
 at most one Unicode block.</description>
			<attribute name="@since">
				<description>1.2</description>
			</attribute>
		</comment>
		<fields>
			<field static="true" visibility="private" name="map" fulltype="java.util.Map" type="Map" />
			<field final="true" static="true" visibility="public" name="BASIC_LATIN" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Basic Latin&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="LATIN_1_SUPPLEMENT" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Latin-1 Supplement&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="LATIN_EXTENDED_A" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Latin Extended-A&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="LATIN_EXTENDED_B" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Latin Extended-B&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="IPA_EXTENSIONS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;IPA Extensions&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="SPACING_MODIFIER_LETTERS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Spacing Modifier Letters&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="COMBINING_DIACRITICAL_MARKS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Combining Diacritical Marks&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="GREEK" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Greek and Coptic&quot; Unicode character block.
 &lt;p&gt;
 This block was previously known as the &quot;Greek&quot; block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="CYRILLIC" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Cyrillic&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="ARMENIAN" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Armenian&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="HEBREW" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Hebrew&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="ARABIC" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Arabic&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="DEVANAGARI" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Devanagari&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="BENGALI" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Bengali&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="GURMUKHI" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Gurmukhi&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="GUJARATI" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Gujarati&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="ORIYA" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Oriya&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="TAMIL" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Tamil&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="TELUGU" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Telugu&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="KANNADA" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Kannada&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="MALAYALAM" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Malayalam&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="THAI" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Thai&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="LAO" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Lao&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="TIBETAN" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Tibetan&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="GEORGIAN" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Georgian&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="HANGUL_JAMO" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Hangul Jamo&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="LATIN_EXTENDED_ADDITIONAL" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Latin Extended Additional&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="GREEK_EXTENDED" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Greek Extended&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="GENERAL_PUNCTUATION" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;General Punctuation&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="SUPERSCRIPTS_AND_SUBSCRIPTS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Superscripts and Subscripts&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="CURRENCY_SYMBOLS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Currency Symbols&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="COMBINING_MARKS_FOR_SYMBOLS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Combining Diacritical Marks for Symbols&quot; Unicode character block.
 &lt;p&gt;
 This block was previously known as &quot;Combining Marks for Symbols&quot;.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="LETTERLIKE_SYMBOLS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Letterlike Symbols&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="NUMBER_FORMS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Number Forms&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="ARROWS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Arrows&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="MATHEMATICAL_OPERATORS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Mathematical Operators&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="MISCELLANEOUS_TECHNICAL" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Miscellaneous Technical&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="CONTROL_PICTURES" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Control Pictures&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="OPTICAL_CHARACTER_RECOGNITION" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Optical Character Recognition&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="ENCLOSED_ALPHANUMERICS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Enclosed Alphanumerics&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="BOX_DRAWING" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Box Drawing&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="BLOCK_ELEMENTS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Block Elements&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="GEOMETRIC_SHAPES" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Geometric Shapes&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="MISCELLANEOUS_SYMBOLS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Miscellaneous Symbols&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="DINGBATS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Dingbats&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="CJK_SYMBOLS_AND_PUNCTUATION" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;CJK Symbols and Punctuation&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="HIRAGANA" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Hiragana&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="KATAKANA" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Katakana&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="BOPOMOFO" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Bopomofo&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="HANGUL_COMPATIBILITY_JAMO" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Hangul Compatibility Jamo&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="KANBUN" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Kanbun&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="ENCLOSED_CJK_LETTERS_AND_MONTHS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Enclosed CJK Letters and Months&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="CJK_COMPATIBILITY" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;CJK Compatibility&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="CJK_UNIFIED_IDEOGRAPHS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;CJK Unified Ideographs&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="HANGUL_SYLLABLES" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Hangul Syllables&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="PRIVATE_USE_AREA" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Private Use Area&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="CJK_COMPATIBILITY_IDEOGRAPHS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;CJK Compatibility Ideographs&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="ALPHABETIC_PRESENTATION_FORMS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Alphabetic Presentation Forms&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="ARABIC_PRESENTATION_FORMS_A" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Arabic Presentation Forms-A&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="COMBINING_HALF_MARKS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Combining Half Marks&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="CJK_COMPATIBILITY_FORMS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;CJK Compatibility Forms&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="SMALL_FORM_VARIANTS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Small Form Variants&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="ARABIC_PRESENTATION_FORMS_B" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Arabic Presentation Forms-B&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="HALFWIDTH_AND_FULLWIDTH_FORMS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Halfwidth and Fullwidth Forms&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="SPECIALS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Specials&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="SURROGATES_AREA" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<attribute name="@deprecated">
						<description>As of J2SE 5, use {@link #HIGH_SURROGATES},
             {@link #HIGH_PRIVATE_USE_SURROGATES}, and
             {@link #LOW_SURROGATES}. These new constants match
             the block definitions of the Unicode Standard.
             The {@link #of(char)} and {@link #of(int)} methods
             return the new constants, not SURROGATES_AREA.</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="SYRIAC" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Syriac&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="THAANA" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Thaana&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="SINHALA" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Sinhala&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="MYANMAR" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Myanmar&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="ETHIOPIC" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Ethiopic&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="CHEROKEE" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Cherokee&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Unified Canadian Aboriginal Syllabics&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="OGHAM" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Ogham&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="RUNIC" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Runic&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="KHMER" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Khmer&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="MONGOLIAN" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Mongolian&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="BRAILLE_PATTERNS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Braille Patterns&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="CJK_RADICALS_SUPPLEMENT" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;CJK Radicals Supplement&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="KANGXI_RADICALS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Kangxi Radicals&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="IDEOGRAPHIC_DESCRIPTION_CHARACTERS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Ideographic Description Characters&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="BOPOMOFO_EXTENDED" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Bopomofo Extended&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;CJK Unified Ideographs Extension A&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="YI_SYLLABLES" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Yi Syllables&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="YI_RADICALS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Yi Radicals&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="CYRILLIC_SUPPLEMENTARY" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Cyrillic Supplementary&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="TAGALOG" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Tagalog&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="HANUNOO" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Hanunoo&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="BUHID" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Buhid&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="TAGBANWA" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Tagbanwa&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="LIMBU" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Limbu&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="TAI_LE" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Tai Le&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="KHMER_SYMBOLS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Khmer Symbols&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="PHONETIC_EXTENSIONS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Phonetic Extensions&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Miscellaneous Mathematical Symbols-A&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="SUPPLEMENTAL_ARROWS_A" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Supplemental Arrows-A&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="SUPPLEMENTAL_ARROWS_B" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Supplemental Arrows-B&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Miscellaneous Mathematical Symbols-B&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="SUPPLEMENTAL_MATHEMATICAL_OPERATORS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Supplemental Mathematical Operators&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="MISCELLANEOUS_SYMBOLS_AND_ARROWS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Miscellaneous Symbols and Arrows&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="KATAKANA_PHONETIC_EXTENSIONS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Katakana Phonetic Extensions&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="YIJING_HEXAGRAM_SYMBOLS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Yijing Hexagram Symbols&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="VARIATION_SELECTORS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Variation Selectors&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="LINEAR_B_SYLLABARY" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Linear B Syllabary&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="LINEAR_B_IDEOGRAMS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Linear B Ideograms&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="AEGEAN_NUMBERS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Aegean Numbers&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="OLD_ITALIC" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Old Italic&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="GOTHIC" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Gothic&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="UGARITIC" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Ugaritic&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="DESERET" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Deseret&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="SHAVIAN" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Shavian&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="OSMANYA" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Osmanya&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="CYPRIOT_SYLLABARY" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Cypriot Syllabary&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="BYZANTINE_MUSICAL_SYMBOLS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Byzantine Musical Symbols&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="MUSICAL_SYMBOLS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Musical Symbols&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="TAI_XUAN_JING_SYMBOLS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Tai Xuan Jing Symbols&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="MATHEMATICAL_ALPHANUMERIC_SYMBOLS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Mathematical Alphanumeric Symbols&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;CJK Unified Ideographs Extension B&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;CJK Compatibility Ideographs Supplement&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="TAGS" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Tags&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="VARIATION_SELECTORS_SUPPLEMENT" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Variation Selectors Supplement&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="SUPPLEMENTARY_PRIVATE_USE_AREA_A" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Supplementary Private Use Area-A&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="SUPPLEMENTARY_PRIVATE_USE_AREA_B" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Supplementary Private Use Area-B&quot; Unicode character block.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="HIGH_SURROGATES" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;High Surrogates&quot; Unicode character block.
 This block represents codepoint values in the high surrogate
 range: 0xD800 through 0xDB7F</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="HIGH_PRIVATE_USE_SURROGATES" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;High Private Use Surrogates&quot; Unicode character block.
 This block represents codepoint values in the high surrogate
 range: 0xDB80 through 0xDBFF</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="LOW_SURROGATES" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Constant for the &quot;Low Surrogates&quot; Unicode character block.
 This block represents codepoint values in the high surrogate
 range: 0xDC00 through 0xDFFF</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="private" name="blockStarts" fulltype="int[]" type="int" />
			<field final="true" static="true" visibility="private" name="blocks" fulltype="java.lang.Character.UnicodeBlock[]" type="Character.UnicodeBlock" />
		</fields>
		<methods>
			<constructor visibility="private" name="Character.UnicodeBlock">
				<comment>
					<description>Create a UnicodeBlock with the given identifier name.
 This name must be the same as the block identifier.</description>
				</comment>
				<params>
					<param name="idName" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="private" name="Character.UnicodeBlock">
				<comment>
					<description>Create a UnicodeBlock with the given identifier name and
 alias name.</description>
				</comment>
				<params>
					<param name="idName" fulltype="java.lang.String" type="String" />
					<param name="alias" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="private" name="Character.UnicodeBlock">
				<comment>
					<description>Create a UnicodeBlock with the given identifier name and
 alias names.</description>
				</comment>
				<params>
					<param name="idName" fulltype="java.lang.String" type="String" />
					<param name="aliasName" fulltype="java.lang.String[]" type="String" />
				</params>
			</constructor>
			<method static="true" visibility="public" name="of" returncomment="The &lt;code&gt;UnicodeBlock&lt;/code&gt; instance representing the
          Unicode block of which this character is a member, or
          &lt;code&gt;null&lt;/code&gt; if the character is not a member of any
          Unicode block" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Returns the object representing the Unicode block containing the
 given character, or &lt;code&gt;null&lt;/code&gt; if the character is not a
 member of a defined block.

 &lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; This method cannot handle &lt;a
 href=&quot;Character.html#supplementary&quot;&gt; supplementary
 characters&lt;/a&gt;. To support all Unicode characters,
 including supplementary characters, use the {@link
 #of(int)} method.</description>
					<attribute name="@param">
						<description>c  The character in question</description>
					</attribute>
					<attribute name="@return">
						<description>The &lt;code&gt;UnicodeBlock&lt;/code&gt; instance representing the
          Unicode block of which this character is a member, or
          &lt;code&gt;null&lt;/code&gt; if the character is not a member of any
          Unicode block</description>
					</attribute>
				</comment>
				<params>
					<param name="c" comment="The character in question" fulltype="char" type="char" />
				</params>
			</method>
			<method static="true" visibility="public" name="of" returncomment="The &lt;code&gt;UnicodeBlock&lt;/code&gt; instance representing the
          Unicode block of which this character is a member, or
          &lt;code&gt;null&lt;/code&gt; if the character is not a member of any
          Unicode block" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Returns the object representing the Unicode block
 containing the given character (Unicode code point), or
 &lt;code&gt;null&lt;/code&gt; if the character is not a member of a
 defined block.</description>
					<attribute name="@param">
						<description>codePoint the character (Unicode code point) in question.</description>
					</attribute>
					<attribute name="@return">
						<description>The &lt;code&gt;UnicodeBlock&lt;/code&gt; instance representing the
          Unicode block of which this character is a member, or
          &lt;code&gt;null&lt;/code&gt; if the character is not a member of any
          Unicode block</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalArgumentException if the specified
 &lt;code&gt;codePoint&lt;/code&gt; is an invalid Unicode code point.</description>
					</attribute>
					<attribute name="@see">
						<description>Character#isValidCodePoint(int)</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="codePoint" comment="the character (Unicode code point) in question." fulltype="int" type="int" />
				</params>
			</method>
			<method final="true" static="true" visibility="public" name="forName" returncomment="The &lt;code&gt;UnicodeBlock&lt;/code&gt; instance identified
         by &lt;code&gt;blockName&lt;/code&gt;" fulltype="java.lang.Character.UnicodeBlock" type="Character.UnicodeBlock">
				<comment>
					<description>Returns the UnicodeBlock with the given name. Block
 names are determined by The Unicode Standard. The file
 Blocks-&amp;lt;version&amp;gt;.txt defines blocks for a particular
 version of the standard. The {@link Character} class specifies
 the version of the standard that it supports.
 &lt;p&gt;
 This method accepts block names in the following forms:
 &lt;ol&gt;
 &lt;li&gt; Canonical block names as defined by the Unicode Standard.
 For example, the standard defines a &quot;Basic Latin&quot; block. Therefore, this
 method accepts &quot;Basic Latin&quot; as a valid block name. The documentation of
 each UnicodeBlock provides the canonical name.
 &lt;li&gt;Canonical block names with all spaces removed. For example, &quot;BasicLatin&quot;
 is a valid block name for the &quot;Basic Latin&quot; block.
 &lt;li&gt;The text representation of each constant UnicodeBlock identifier.
 For example, this method will return the {@link #BASIC_LATIN} block if
 provided with the &quot;BASIC_LATIN&quot; name. This form replaces all spaces and
  hyphens in the canonical name with underscores.
 &lt;/ol&gt;
 Finally, character case is ignored for all of the valid block name forms.
 For example, &quot;BASIC_LATIN&quot; and &quot;basic_latin&quot; are both valid block names.
 The en_US locale&apos;s case mapping rules are used to provide case-insensitive
 string comparisons for block name validation.
 &lt;p&gt;
 If the Unicode Standard changes block names, both the previous and
 current names will be accepted.</description>
					<attribute name="@param">
						<description>blockName A &lt;code&gt;UnicodeBlock&lt;/code&gt; name.</description>
					</attribute>
					<attribute name="@return">
						<description>The &lt;code&gt;UnicodeBlock&lt;/code&gt; instance identified
         by &lt;code&gt;blockName&lt;/code&gt;</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalArgumentException if &lt;code&gt;blockName&lt;/code&gt; is an
         invalid name</description>
					</attribute>
					<attribute name="@throws">
						<description>NullPointerException if &lt;code&gt;blockName&lt;/code&gt; is null</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="blockName" comment="A &lt;code&gt;UnicodeBlock&lt;/code&gt; name." fulltype="java.lang.String" type="String" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="private" package="java.lang" superclassfulltype="java.lang.Object" fulltype="java.lang.Character.CharacterCache" type="Character.CharacterCache">
		<fields>
			<field final="true" static="true" visibility="package-private" name="cache" fulltype="java.lang.Character[]" type="Character" />
		</fields>
		<methods>
			<constructor visibility="private" name="Character.CharacterCache" />
		</methods>
	</jelclass>
	<jelclass superclass="IllegalArgumentException" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.IllegalArgumentException" fulltype="java.lang.IllegalThreadStateException" type="IllegalThreadStateException">
		<comment>
			<description>Thrown to indicate that a thread is not in an appropriate state
 for the requested operation. See, for example, the
 &lt;code&gt;suspend&lt;/code&gt; and &lt;code&gt;resume&lt;/code&gt; methods in class
 &lt;code&gt;Thread&lt;/code&gt;.</description>
			<attribute name="@author">
				<description>unascribed</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.Thread#resume()</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.Thread#suspend()</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.0</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="IllegalThreadStateException">
				<comment>
					<description>Constructs an &lt;code&gt;IllegalThreadStateException&lt;/code&gt; with no
 detail message.</description>
				</comment>
			</constructor>
			<constructor visibility="public" name="IllegalThreadStateException">
				<comment>
					<description>Constructs an &lt;code&gt;IllegalThreadStateException&lt;/code&gt; with the
 specified detail message.</description>
					<attribute name="@param">
						<description>s   the detail message.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the detail message." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass final="true" superclass="Object" visibility="package-private" package="java.lang" superclassfulltype="java.lang.Object" fulltype="java.lang.ConditionalSpecialCasing" type="ConditionalSpecialCasing">
		<comment>
			<description>This is a utility class for &lt;code&gt;String.toLowerCase()&lt;/code&gt; and
 &lt;code&gt;String.toUpperCase()&lt;/code&gt;, that handles special casing with
 conditions.  In other words, it handles the mappings with conditions
 that are defined in
 &lt;a href=&quot;http://www.unicode.org/Public/UNIDATA/SpecialCasing.txt&quot;&gt;Special
 Casing Properties&lt;/a&gt; file.
 &lt;p&gt;
 Note that the unconditional case mappings (including 1:M mappings)
 are handled in &lt;code&gt;Character.toLower/UpperCase()&lt;/code&gt;.</description>
		</comment>
		<fields>
			<field final="true" static="true" const="1" visibility="package-private" name="FINAL_CASED" constexpr="1" fulltype="int" type="int" />
			<field final="true" static="true" const="2" visibility="package-private" name="AFTER_SOFT_DOTTED" constexpr="2" fulltype="int" type="int" />
			<field final="true" static="true" const="3" visibility="package-private" name="MORE_ABOVE" constexpr="3" fulltype="int" type="int" />
			<field final="true" static="true" const="4" visibility="package-private" name="AFTER_I" constexpr="4" fulltype="int" type="int" />
			<field final="true" static="true" const="5" visibility="package-private" name="NOT_BEFORE_DOT" constexpr="5" fulltype="int" type="int" />
			<field final="true" static="true" const="230" visibility="package-private" name="COMBINING_CLASS_ABOVE" constexpr="230" fulltype="int" type="int" />
			<field static="true" visibility="package-private" name="entry" fulltype="java.lang.ConditionalSpecialCasing.Entry[]" type="ConditionalSpecialCasing.Entry" />
			<field static="true" visibility="package-private" name="entryTable" fulltype="java.util.Hashtable" type="Hashtable" />
		</fields>
		<methods>
			<constructor visibility="package-private" name="ConditionalSpecialCasing" />
			<method static="true" visibility="package-private" name="toLowerCaseEx" fulltype="int" type="int">
				<params>
					<param name="src" fulltype="java.lang.String" type="String" />
					<param name="index" fulltype="int" type="int" />
					<param name="locale" fulltype="java.util.Locale" type="Locale" />
				</params>
			</method>
			<method static="true" visibility="package-private" name="toUpperCaseEx" fulltype="int" type="int">
				<params>
					<param name="src" fulltype="java.lang.String" type="String" />
					<param name="index" fulltype="int" type="int" />
					<param name="locale" fulltype="java.util.Locale" type="Locale" />
				</params>
			</method>
			<method static="true" visibility="package-private" name="toLowerCaseCharArray" fulltype="char[]" type="char">
				<params>
					<param name="src" fulltype="java.lang.String" type="String" />
					<param name="index" fulltype="int" type="int" />
					<param name="locale" fulltype="java.util.Locale" type="Locale" />
				</params>
			</method>
			<method static="true" visibility="package-private" name="toUpperCaseCharArray" fulltype="char[]" type="char">
				<params>
					<param name="src" fulltype="java.lang.String" type="String" />
					<param name="index" fulltype="int" type="int" />
					<param name="locale" fulltype="java.util.Locale" type="Locale" />
				</params>
			</method>
			<method static="true" visibility="private" name="lookUpTable" fulltype="char[]" type="char">
				<params>
					<param name="src" fulltype="java.lang.String" type="String" />
					<param name="index" fulltype="int" type="int" />
					<param name="locale" fulltype="java.util.Locale" type="Locale" />
					<param name="bLowerCasing" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="private" name="isConditionMet" fulltype="boolean" type="boolean">
				<params>
					<param name="src" fulltype="java.lang.String" type="String" />
					<param name="index" fulltype="int" type="int" />
					<param name="locale" fulltype="java.util.Locale" type="Locale" />
					<param name="condition" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="private" name="isFinalCased" fulltype="boolean" type="boolean">
				<comment>
					<description>Implements the &quot;Final_Cased&quot; condition

 Specification: Within the closest word boundaries containing C, there is a cased
 letter before C, and there is no cased letter after C.

 Regular Expression:
   Before C: [{cased==true}][{wordBoundary!=true}]*
   After C: !([{wordBoundary!=true}]*[{cased}])</description>
				</comment>
				<params>
					<param name="src" fulltype="java.lang.String" type="String" />
					<param name="index" fulltype="int" type="int" />
					<param name="locale" fulltype="java.util.Locale" type="Locale" />
				</params>
			</method>
			<method static="true" visibility="private" name="isAfterI" fulltype="boolean" type="boolean">
				<comment>
					<description>Implements the &quot;After_I&quot; condition

 Specification: The last preceding base character was an uppercase I,
 and there is no intervening combining character class 230 (ABOVE).

 Regular Expression:
   Before C: [I]([{cc!=230}&amp;{cc!=0}])*</description>
				</comment>
				<params>
					<param name="src" fulltype="java.lang.String" type="String" />
					<param name="index" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="private" name="isAfterSoftDotted" fulltype="boolean" type="boolean">
				<comment>
					<description>Implements the &quot;After_Soft_Dotted&quot; condition

 Specification: The last preceding character with combining class
 of zero before C was Soft_Dotted, and there is no intervening
 combining character class 230 (ABOVE).

 Regular Expression:
   Before C: [{Soft_Dotted==true}]([{cc!=230}&amp;{cc!=0}])*</description>
				</comment>
				<params>
					<param name="src" fulltype="java.lang.String" type="String" />
					<param name="index" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="private" name="isMoreAbove" fulltype="boolean" type="boolean">
				<comment>
					<description>Implements the &quot;More_Above&quot; condition

 Specification: C is followed by one or more characters of combining
 class 230 (ABOVE) in the combining character sequence.

 Regular Expression:
   After C: [{cc!=0}]*[{cc==230}]</description>
				</comment>
				<params>
					<param name="src" fulltype="java.lang.String" type="String" />
					<param name="index" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="private" name="isBeforeDot" fulltype="boolean" type="boolean">
				<comment>
					<description>Implements the &quot;Before_Dot&quot; condition

 Specification: C is followed by &lt;code&gt;U+0307 COMBINING DOT ABOVE&lt;/code&gt;.
 Any sequence of characters with a combining class that is
 neither 0 nor 230 may intervene between the current character
 and the combining dot above.

 Regular Expression:
   After C: ([{cc!=230}&amp;{cc!=0}])*[̇]</description>
				</comment>
				<params>
					<param name="src" fulltype="java.lang.String" type="String" />
					<param name="index" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="private" name="isCased" fulltype="boolean" type="boolean">
				<comment>
					<description>Examines whether a character is &apos;cased&apos;.

 A character C is defined to be &apos;cased&apos; if and only if at least one of
 following are true for C: uppercase==true, or lowercase==true, or
 general_category==titlecase_letter.

 The uppercase and lowercase property values are specified in the data
 file DerivedCoreProperties.txt in the Unicode Character Database.</description>
				</comment>
				<params>
					<param name="ch" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="private" name="isSoftDotted" fulltype="boolean" type="boolean">
				<params>
					<param name="ch" fulltype="int" type="int" />
				</params>
			</method>
		</methods>
		<jelclass superclass="Object" visibility="package-private" package="java.lang" superclassfulltype="java.lang.Object" fulltype="java.lang.ConditionalSpecialCasing.Entry" type="ConditionalSpecialCasing.Entry">
			<comment>
				<description>An internal class that represents an entry in the Special Casing Properties.</description>
			</comment>
			<fields>
				<field visibility="package-private" name="ch" fulltype="int" type="int" />
				<field visibility="package-private" name="lower" fulltype="char[]" type="char" />
				<field visibility="package-private" name="upper" fulltype="char[]" type="char" />
				<field visibility="package-private" name="lang" fulltype="java.lang.String" type="String" />
				<field visibility="package-private" name="condition" fulltype="int" type="int" />
			</fields>
			<methods>
				<constructor visibility="package-private" name="ConditionalSpecialCasing.Entry">
					<params>
						<param name="ch" fulltype="int" type="int" />
						<param name="lower" fulltype="char[]" type="char" />
						<param name="upper" fulltype="char[]" type="char" />
						<param name="lang" fulltype="java.lang.String" type="String" />
						<param name="condition" fulltype="int" type="int" />
					</params>
				</constructor>
				<method visibility="package-private" name="getCodePoint" fulltype="int" type="int" />
				<method visibility="package-private" name="getLowerCase" fulltype="char[]" type="char" />
				<method visibility="package-private" name="getUpperCase" fulltype="char[]" type="char" />
				<method visibility="package-private" name="getLanguage" fulltype="java.lang.String" type="String" />
				<method visibility="package-private" name="getCondition" fulltype="int" type="int" />
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="Object" visibility="package-private" package="java.lang" superclassfulltype="java.lang.Object" fulltype="java.lang.ConditionalSpecialCasing.Entry" type="ConditionalSpecialCasing.Entry">
		<comment>
			<description>An internal class that represents an entry in the Special Casing Properties.</description>
		</comment>
		<fields>
			<field visibility="package-private" name="ch" fulltype="int" type="int" />
			<field visibility="package-private" name="lower" fulltype="char[]" type="char" />
			<field visibility="package-private" name="upper" fulltype="char[]" type="char" />
			<field visibility="package-private" name="lang" fulltype="java.lang.String" type="String" />
			<field visibility="package-private" name="condition" fulltype="int" type="int" />
		</fields>
		<methods>
			<constructor visibility="package-private" name="ConditionalSpecialCasing.Entry">
				<params>
					<param name="ch" fulltype="int" type="int" />
					<param name="lower" fulltype="char[]" type="char" />
					<param name="upper" fulltype="char[]" type="char" />
					<param name="lang" fulltype="java.lang.String" type="String" />
					<param name="condition" fulltype="int" type="int" />
				</params>
			</constructor>
			<method visibility="package-private" name="getCodePoint" fulltype="int" type="int" />
			<method visibility="package-private" name="getLowerCase" fulltype="char[]" type="char" />
			<method visibility="package-private" name="getUpperCase" fulltype="char[]" type="char" />
			<method visibility="package-private" name="getLanguage" fulltype="java.lang.String" type="String" />
			<method visibility="package-private" name="getCondition" fulltype="int" type="int" />
		</methods>
	</jelclass>
	<jelclass superclass="RuntimeException" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.RuntimeException" fulltype="java.lang.SecurityException" type="SecurityException">
		<comment>
			<description>Thrown by the security manager to indicate a security violation.</description>
			<attribute name="@author">
				<description>unascribed</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.SecurityManager</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.0</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="6878364983674394167" visibility="private" name="serialVersionUID" constexpr="6878364983674394167L" fulltype="long" type="long" />
		</fields>
		<methods>
			<constructor visibility="public" name="SecurityException">
				<comment>
					<description>Constructs a &lt;code&gt;SecurityException&lt;/code&gt; with no detail  message.</description>
				</comment>
			</constructor>
			<constructor visibility="public" name="SecurityException">
				<comment>
					<description>Constructs a &lt;code&gt;SecurityException&lt;/code&gt; with the specified
 detail message.</description>
					<attribute name="@param">
						<description>s   the detail message.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the detail message." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="SecurityException">
				<comment>
					<description>Creates a &lt;code&gt;SecurityException&lt;/code&gt; with the specified
 detail message and cause.</description>
					<attribute name="@param">
						<description>message the detail message (which is saved for later retrieval
        by the {@link #getMessage()} method).</description>
					</attribute>
					<attribute name="@param">
						<description>cause the cause (which is saved for later retrieval by the
        {@link #getCause()} method).  (A &lt;tt&gt;null&lt;/tt&gt; value is permitted,
        and indicates that the cause is nonexistent or unknown.)</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="message" comment="the detail message (which is saved for later retrieval
        by the {@link #getMessage()} method)." fulltype="java.lang.String" type="String" />
					<param name="cause" comment="the cause (which is saved for later retrieval by the
        {@link #getCause()} method).  (A &lt;tt&gt;null&lt;/tt&gt; value is permitted,
        and indicates that the cause is nonexistent or unknown.)" fulltype="java.lang.Throwable" type="Throwable" />
				</params>
			</constructor>
			<constructor visibility="public" name="SecurityException">
				<comment>
					<description>Creates a &lt;code&gt;SecurityException&lt;/code&gt; with the specified cause
 and a detail message of &lt;tt&gt;(cause==null ? null : cause.toString())&lt;/tt&gt;
 (which typically contains the class and detail message of
 &lt;tt&gt;cause&lt;/tt&gt;).</description>
					<attribute name="@param">
						<description>cause the cause (which is saved for later retrieval by the
        {@link #getCause()} method).  (A &lt;tt&gt;null&lt;/tt&gt; value is permitted,
        and indicates that the cause is nonexistent or unknown.)</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="cause" comment="the cause (which is saved for later retrieval by the
        {@link #getCause()} method).  (A &lt;tt&gt;null&lt;/tt&gt; value is permitted,
        and indicates that the cause is nonexistent or unknown.)" fulltype="java.lang.Throwable" type="Throwable" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass abstract="true" superclass="Object" visibility="package-private" package="java.lang" superclassfulltype="java.lang.Object" fulltype="java.lang.CharacterData" type="CharacterData">
		<methods>
			<constructor visibility="package-private" name="CharacterData" />
			<method abstract="true" visibility="package-private" name="getProperties" fulltype="int" type="int">
				<params>
					<param name="ch" fulltype="int" type="int" />
				</params>
			</method>
			<method abstract="true" visibility="package-private" name="getType" fulltype="int" type="int">
				<params>
					<param name="ch" fulltype="int" type="int" />
				</params>
			</method>
			<method abstract="true" visibility="package-private" name="isWhitespace" fulltype="boolean" type="boolean">
				<params>
					<param name="ch" fulltype="int" type="int" />
				</params>
			</method>
			<method abstract="true" visibility="package-private" name="isMirrored" fulltype="boolean" type="boolean">
				<params>
					<param name="ch" fulltype="int" type="int" />
				</params>
			</method>
			<method abstract="true" visibility="package-private" name="isJavaIdentifierStart" fulltype="boolean" type="boolean">
				<params>
					<param name="ch" fulltype="int" type="int" />
				</params>
			</method>
			<method abstract="true" visibility="package-private" name="isJavaIdentifierPart" fulltype="boolean" type="boolean">
				<params>
					<param name="ch" fulltype="int" type="int" />
				</params>
			</method>
			<method abstract="true" visibility="package-private" name="isUnicodeIdentifierStart" fulltype="boolean" type="boolean">
				<params>
					<param name="ch" fulltype="int" type="int" />
				</params>
			</method>
			<method abstract="true" visibility="package-private" name="isUnicodeIdentifierPart" fulltype="boolean" type="boolean">
				<params>
					<param name="ch" fulltype="int" type="int" />
				</params>
			</method>
			<method abstract="true" visibility="package-private" name="isIdentifierIgnorable" fulltype="boolean" type="boolean">
				<params>
					<param name="ch" fulltype="int" type="int" />
				</params>
			</method>
			<method abstract="true" visibility="package-private" name="toLowerCase" fulltype="int" type="int">
				<params>
					<param name="ch" fulltype="int" type="int" />
				</params>
			</method>
			<method abstract="true" visibility="package-private" name="toUpperCase" fulltype="int" type="int">
				<params>
					<param name="ch" fulltype="int" type="int" />
				</params>
			</method>
			<method abstract="true" visibility="package-private" name="toTitleCase" fulltype="int" type="int">
				<params>
					<param name="ch" fulltype="int" type="int" />
				</params>
			</method>
			<method abstract="true" visibility="package-private" name="digit" fulltype="int" type="int">
				<params>
					<param name="ch" fulltype="int" type="int" />
					<param name="radix" fulltype="int" type="int" />
				</params>
			</method>
			<method abstract="true" visibility="package-private" name="getNumericValue" fulltype="int" type="int">
				<params>
					<param name="ch" fulltype="int" type="int" />
				</params>
			</method>
			<method abstract="true" visibility="package-private" name="getDirectionality" fulltype="byte" type="byte">
				<params>
					<param name="ch" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="package-private" name="toUpperCaseEx" fulltype="int" type="int">
				<params>
					<param name="ch" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="package-private" name="toUpperCaseCharArray" fulltype="char[]" type="char">
				<params>
					<param name="ch" fulltype="int" type="int" />
				</params>
			</method>
			<method final="true" static="true" visibility="package-private" name="of" fulltype="java.lang.CharacterData" type="CharacterData">
				<params>
					<param name="ch" fulltype="int" type="int" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass final="true" superclass="Number" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.Number" fulltype="java.lang.Float" type="Float">
		<implements>
			<interface fulltype="java.lang.Comparable" type="Comparable" />
		</implements>
		<comment>
			<description>The {@code Float} class wraps a value of primitive type
 {@code float} in an object. An object of type
 {@code Float} contains a single field whose type is
 {@code float}.

 &lt;p&gt;In addition, this class provides several methods for converting a
 {@code float} to a {@code String} and a
 {@code String} to a {@code float}, as well as other
 constants and methods useful when dealing with a
 {@code float}.</description>
			<attribute name="@author">
				<description>Lee Boynton</description>
			</attribute>
			<attribute name="@author">
				<description>Arthur van Hoff</description>
			</attribute>
			<attribute name="@author">
				<description>Joseph D. Darcy</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.0</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="Infinity" visibility="public" name="POSITIVE_INFINITY" constexpr="1f/0f" fulltype="float" type="float">
				<comment>
					<description>A constant holding the positive infinity of type
 {@code float}. It is equal to the value returned by
 {@code Float.intBitsToFloat(0x7f800000)}.</description>
				</comment>
			</field>
			<field final="true" static="true" const="-Infinity" visibility="public" name="NEGATIVE_INFINITY" constexpr="-1f/0f" fulltype="float" type="float">
				<comment>
					<description>A constant holding the negative infinity of type
 {@code float}. It is equal to the value returned by
 {@code Float.intBitsToFloat(0xff800000)}.</description>
				</comment>
			</field>
			<field final="true" static="true" const="NaN" visibility="public" name="NaN" constexpr="0f/0f" fulltype="float" type="float">
				<comment>
					<description>A constant holding a Not-a-Number (NaN) value of type
 {@code float}.  It is equivalent to the value returned by
 {@code Float.intBitsToFloat(0x7fc00000)}.</description>
				</comment>
			</field>
			<field final="true" static="true" const="3.4028235E38" visibility="public" name="MAX_VALUE" constexpr="3.4028234663852886E38f" fulltype="float" type="float">
				<comment>
					<description>A constant holding the largest positive finite value of type
 {@code float}, (2-2&lt;sup&gt;-23&lt;/sup&gt;)&amp;middot;2&lt;sup&gt;127&lt;/sup&gt;.
 It is equal to the hexadecimal floating-point literal
 {@code 0x1.fffffeP+127f} and also equal to
 {@code Float.intBitsToFloat(0x7f7fffff)}.</description>
				</comment>
			</field>
			<field final="true" static="true" const="1.17549435E-38" visibility="public" name="MIN_NORMAL" constexpr="1.1754943508222875E-38f" fulltype="float" type="float">
				<comment>
					<description>A constant holding the smallest positive normal value of type
 {@code float}, 2&lt;sup&gt;-126&lt;/sup&gt;.  It is equal to the
 hexadecimal floating-point literal {@code 0x1.0p-126f} and also
 equal to {@code Float.intBitsToFloat(0x00800000)}.</description>
					<attribute name="@since">
						<description>1.6</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="1.4E-45" visibility="public" name="MIN_VALUE" constexpr="1.401298464324817E-45f" fulltype="float" type="float">
				<comment>
					<description>A constant holding the smallest positive nonzero value of type
 {@code float}, 2&lt;sup&gt;-149&lt;/sup&gt;. It is equal to the
 hexadecimal floating-point literal {@code 0x0.000002P-126f}
 and also equal to {@code Float.intBitsToFloat(0x1)}.</description>
				</comment>
			</field>
			<field final="true" static="true" const="127" visibility="public" name="MAX_EXPONENT" constexpr="127" fulltype="int" type="int">
				<comment>
					<description>Maximum exponent a finite {@code float} variable may have.  It
 is equal to the value returned by {@code
 Math.getExponent(Float.MAX_VALUE)}.</description>
					<attribute name="@since">
						<description>1.6</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="-126" visibility="public" name="MIN_EXPONENT" constexpr="-126" fulltype="int" type="int">
				<comment>
					<description>Minimum exponent a normalized {@code float} variable may have.
 It is equal to the value returned by {@code
 Math.getExponent(Float.MIN_NORMAL)}.</description>
					<attribute name="@since">
						<description>1.6</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="32" visibility="public" name="SIZE" constexpr="32" fulltype="int" type="int">
				<comment>
					<description>The number of bits used to represent a {@code float} value.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="TYPE" fulltype="java.lang.Class" type="Class">
				<comment>
					<description>The {@code Class} instance representing the primitive type
 {@code float}.</description>
					<attribute name="@since">
						<description>JDK1.1</description>
					</attribute>
				</comment>
			</field>
			<field final="true" visibility="private" name="value" fulltype="float" type="float">
				<comment>
					<description>The value of the Float.</description>
					<attribute name="@serial" />
				</comment>
			</field>
			<field final="true" static="true" const="-2671257302660747028" visibility="private" name="serialVersionUID" constexpr="-2671257302660747028L" fulltype="long" type="long">
				<comment>
					<description>use serialVersionUID from JDK 1.0.2 for interoperability</description>
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="public" name="Float">
				<comment>
					<description>Constructs a newly allocated {@code Float} object that
 represents the primitive {@code float} argument.</description>
					<attribute name="@param">
						<description>value   the value to be represented by the {@code Float}.</description>
					</attribute>
				</comment>
				<params>
					<param name="value" comment="the value to be represented by the {@code Float}." fulltype="float" type="float" />
				</params>
			</constructor>
			<constructor visibility="public" name="Float">
				<comment>
					<description>Constructs a newly allocated {@code Float} object that
 represents the argument converted to type {@code float}.</description>
					<attribute name="@param">
						<description>value   the value to be represented by the {@code Float}.</description>
					</attribute>
				</comment>
				<params>
					<param name="value" comment="the value to be represented by the {@code Float}." fulltype="double" type="double" />
				</params>
			</constructor>
			<constructor visibility="public" name="Float">
				<comment>
					<description>Constructs a newly allocated {@code Float} object that
 represents the floating-point value of type {@code float}
 represented by the string. The string is converted to a
 {@code float} value as if by the {@code valueOf} method.</description>
					<attribute name="@param">
						<description>s   a string to be converted to a {@code Float}.</description>
					</attribute>
					<attribute name="@throws">
						<description>NumberFormatException  if the string does not contain a
               parsable number.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Float#valueOf(java.lang.String)</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="a string to be converted to a {@code Float}." fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception comment="if the string does not contain a
               parsable number." fulltype="java.lang.NumberFormatException" type="NumberFormatException" />
				</exceptions>
			</constructor>
			<method static="true" visibility="public" name="toString" returncomment="a string representation of the argument." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a string representation of the {@code float}
 argument. All characters mentioned below are ASCII characters.
 &lt;ul&gt;
 &lt;li&gt;If the argument is NaN, the result is the string
 &quot;{@code NaN}&quot;.
 &lt;li&gt;Otherwise, the result is a string that represents the sign and
     magnitude (absolute value) of the argument. If the sign is
     negative, the first character of the result is
     &apos;{@code -}&apos; (&lt;code&gt;&apos;&amp;#92;u002D&apos;&lt;/code&gt;); if the sign is
     positive, no sign character appears in the result. As for
     the magnitude &lt;i&gt;m&lt;/i&gt;:
 &lt;ul&gt;
 &lt;li&gt;If &lt;i&gt;m&lt;/i&gt; is infinity, it is represented by the characters
     {@code &quot;Infinity&quot;}; thus, positive infinity produces
     the result {@code &quot;Infinity&quot;} and negative infinity
     produces the result {@code &quot;-Infinity&quot;}.
 &lt;li&gt;If &lt;i&gt;m&lt;/i&gt; is zero, it is represented by the characters
     {@code &quot;0.0&quot;}; thus, negative zero produces the result
     {@code &quot;-0.0&quot;} and positive zero produces the result
     {@code &quot;0.0&quot;}.
 &lt;li&gt; If &lt;i&gt;m&lt;/i&gt; is greater than or equal to 10&lt;sup&gt;-3&lt;/sup&gt; but
      less than 10&lt;sup&gt;7&lt;/sup&gt;, then it is represented as the
      integer part of &lt;i&gt;m&lt;/i&gt;, in decimal form with no leading
      zeroes, followed by &apos;{@code .}&apos;
      (&lt;code&gt;&apos;&amp;#92;u002E&apos;&lt;/code&gt;), followed by one or more
      decimal digits representing the fractional part of
      &lt;i&gt;m&lt;/i&gt;.
 &lt;li&gt; If &lt;i&gt;m&lt;/i&gt; is less than 10&lt;sup&gt;-3&lt;/sup&gt; or greater than or
      equal to 10&lt;sup&gt;7&lt;/sup&gt;, then it is represented in
      so-called &quot;computerized scientific notation.&quot; Let &lt;i&gt;n&lt;/i&gt;
      be the unique integer such that 10&lt;sup&gt;&lt;i&gt;n&lt;/i&gt; &lt;/sup&gt;&amp;le;
      &lt;i&gt;m&lt;/i&gt; {@literal &lt;} 10&lt;sup&gt;&lt;i&gt;n&lt;/i&gt;+1&lt;/sup&gt;; then let &lt;i&gt;a&lt;/i&gt;
      be the mathematically exact quotient of &lt;i&gt;m&lt;/i&gt; and
      10&lt;sup&gt;&lt;i&gt;n&lt;/i&gt;&lt;/sup&gt; so that 1 &amp;le; &lt;i&gt;a&lt;/i&gt; {@literal &lt;} 10.
      The magnitude is then represented as the integer part of
      &lt;i&gt;a&lt;/i&gt;, as a single decimal digit, followed by
      &apos;{@code .}&apos; (&lt;code&gt;&apos;&amp;#92;u002E&apos;&lt;/code&gt;), followed by
      decimal digits representing the fractional part of
      &lt;i&gt;a&lt;/i&gt;, followed by the letter &apos;{@code E}&apos;
      (&lt;code&gt;&apos;&amp;#92;u0045&apos;&lt;/code&gt;), followed by a representation
      of &lt;i&gt;n&lt;/i&gt; as a decimal integer, as produced by the
      method {@link java.lang.Integer#toString(int)}.

 &lt;/ul&gt;
 &lt;/ul&gt;
 How many digits must be printed for the fractional part of
 &lt;i&gt;m&lt;/i&gt; or &lt;i&gt;a&lt;/i&gt;? There must be at least one digit
 to represent the fractional part, and beyond that as many, but
 only as many, more digits as are needed to uniquely distinguish
 the argument value from adjacent values of type
 {@code float}. That is, suppose that &lt;i&gt;x&lt;/i&gt; is the
 exact mathematical value represented by the decimal
 representation produced by this method for a finite nonzero
 argument &lt;i&gt;f&lt;/i&gt;. Then &lt;i&gt;f&lt;/i&gt; must be the {@code float}
 value nearest to &lt;i&gt;x&lt;/i&gt;; or, if two {@code float} values are
 equally close to &lt;i&gt;x&lt;/i&gt;, then &lt;i&gt;f&lt;/i&gt; must be one of
 them and the least significant bit of the significand of
 &lt;i&gt;f&lt;/i&gt; must be {@code 0}.

 &lt;p&gt;To create localized string representations of a floating-point
 value, use subclasses of {@link java.text.NumberFormat}.</description>
					<attribute name="@param">
						<description>f   the float to be converted.</description>
					</attribute>
					<attribute name="@return">
						<description>a string representation of the argument.</description>
					</attribute>
				</comment>
				<params>
					<param name="f" comment="the float to be converted." fulltype="float" type="float" />
				</params>
			</method>
			<method static="true" visibility="public" name="toHexString" returncomment="a hex string representation of the argument." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a hexadecimal string representation of the
 {@code float} argument. All characters mentioned below are
 ASCII characters.

 &lt;ul&gt;
 &lt;li&gt;If the argument is NaN, the result is the string
     &quot;{@code NaN}&quot;.
 &lt;li&gt;Otherwise, the result is a string that represents the sign and
 magnitude (absolute value) of the argument. If the sign is negative,
 the first character of the result is &apos;{@code -}&apos;
 (&lt;code&gt;&apos;&amp;#92;u002D&apos;&lt;/code&gt;); if the sign is positive, no sign character
 appears in the result. As for the magnitude &lt;i&gt;m&lt;/i&gt;:

 &lt;ul&gt;
 &lt;li&gt;If &lt;i&gt;m&lt;/i&gt; is infinity, it is represented by the string
 {@code &quot;Infinity&quot;}; thus, positive infinity produces the
 result {@code &quot;Infinity&quot;} and negative infinity produces
 the result {@code &quot;-Infinity&quot;}.

 &lt;li&gt;If &lt;i&gt;m&lt;/i&gt; is zero, it is represented by the string
 {@code &quot;0x0.0p0&quot;}; thus, negative zero produces the result
 {@code &quot;-0x0.0p0&quot;} and positive zero produces the result
 {@code &quot;0x0.0p0&quot;}.

 &lt;li&gt;If &lt;i&gt;m&lt;/i&gt; is a {@code float} value with a
 normalized representation, substrings are used to represent the
 significand and exponent fields.  The significand is
 represented by the characters {@code &quot;0x1.&quot;}
 followed by a lowercase hexadecimal representation of the rest
 of the significand as a fraction.  Trailing zeros in the
 hexadecimal representation are removed unless all the digits
 are zero, in which case a single zero is used. Next, the
 exponent is represented by {@code &quot;p&quot;} followed
 by a decimal string of the unbiased exponent as if produced by
 a call to {@link Integer#toString(int) Integer.toString} on the
 exponent value.

 &lt;li&gt;If &lt;i&gt;m&lt;/i&gt; is a {@code float} value with a subnormal
 representation, the significand is represented by the
 characters {@code &quot;0x0.&quot;} followed by a
 hexadecimal representation of the rest of the significand as a
 fraction.  Trailing zeros in the hexadecimal representation are
 removed. Next, the exponent is represented by
 {@code &quot;p-126&quot;}.  Note that there must be at
 least one nonzero digit in a subnormal significand.

 &lt;/ul&gt;

 &lt;/ul&gt;

 &lt;table border&gt;
 &lt;caption&gt;&lt;h3&gt;Examples&lt;/h3&gt;&lt;/caption&gt;
 &lt;tr&gt;&lt;th&gt;Floating-point Value&lt;/th&gt;&lt;th&gt;Hexadecimal String&lt;/th&gt;
 &lt;tr&gt;&lt;td&gt;{@code 1.0}&lt;/td&gt; &lt;td&gt;{@code 0x1.0p0}&lt;/td&gt;
 &lt;tr&gt;&lt;td&gt;{@code -1.0}&lt;/td&gt;        &lt;td&gt;{@code -0x1.0p0}&lt;/td&gt;
 &lt;tr&gt;&lt;td&gt;{@code 2.0}&lt;/td&gt; &lt;td&gt;{@code 0x1.0p1}&lt;/td&gt;
 &lt;tr&gt;&lt;td&gt;{@code 3.0}&lt;/td&gt; &lt;td&gt;{@code 0x1.8p1}&lt;/td&gt;
 &lt;tr&gt;&lt;td&gt;{@code 0.5}&lt;/td&gt; &lt;td&gt;{@code 0x1.0p-1}&lt;/td&gt;
 &lt;tr&gt;&lt;td&gt;{@code 0.25}&lt;/td&gt;        &lt;td&gt;{@code 0x1.0p-2}&lt;/td&gt;
 &lt;tr&gt;&lt;td&gt;{@code Float.MAX_VALUE}&lt;/td&gt;
     &lt;td&gt;{@code 0x1.fffffep127}&lt;/td&gt;
 &lt;tr&gt;&lt;td&gt;{@code Minimum Normal Value}&lt;/td&gt;
     &lt;td&gt;{@code 0x1.0p-126}&lt;/td&gt;
 &lt;tr&gt;&lt;td&gt;{@code Maximum Subnormal Value}&lt;/td&gt;
     &lt;td&gt;{@code 0x0.fffffep-126}&lt;/td&gt;
 &lt;tr&gt;&lt;td&gt;{@code Float.MIN_VALUE}&lt;/td&gt;
     &lt;td&gt;{@code 0x0.000002p-126}&lt;/td&gt;
 &lt;/table&gt;</description>
					<attribute name="@param">
						<description>f   the {@code float} to be converted.</description>
					</attribute>
					<attribute name="@return">
						<description>a hex string representation of the argument.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
					<attribute name="@author">
						<description>Joseph D. Darcy</description>
					</attribute>
				</comment>
				<params>
					<param name="f" comment="the {@code float} to be converted." fulltype="float" type="float" />
				</params>
			</method>
			<method static="true" visibility="public" name="valueOf" returncomment="a {@code Float} object holding the value
          represented by the {@code String} argument." fulltype="java.lang.Float" type="Float">
				<comment>
					<description>Returns a {@code Float} object holding the
 {@code float} value represented by the argument string
 {@code s}.

 &lt;p&gt;If {@code s} is {@code null}, then a
 {@code NullPointerException} is thrown.

 &lt;p&gt;Leading and trailing whitespace characters in {@code s}
 are ignored.  Whitespace is removed as if by the {@link
 String#trim} method; that is, both ASCII space and control
 characters are removed. The rest of {@code s} should
 constitute a &lt;i&gt;FloatValue&lt;/i&gt; as described by the lexical
 syntax rules:

 &lt;blockquote&gt;
 &lt;dl&gt;
 &lt;dt&gt;&lt;i&gt;FloatValue:&lt;/i&gt;
 &lt;dd&gt;&lt;i&gt;Sign&lt;sub&gt;opt&lt;/sub&gt;&lt;/i&gt; {@code NaN}
 &lt;dd&gt;&lt;i&gt;Sign&lt;sub&gt;opt&lt;/sub&gt;&lt;/i&gt; {@code Infinity}
 &lt;dd&gt;&lt;i&gt;Sign&lt;sub&gt;opt&lt;/sub&gt; FloatingPointLiteral&lt;/i&gt;
 &lt;dd&gt;&lt;i&gt;Sign&lt;sub&gt;opt&lt;/sub&gt; HexFloatingPointLiteral&lt;/i&gt;
 &lt;dd&gt;&lt;i&gt;SignedInteger&lt;/i&gt;
 &lt;/dl&gt;

 &lt;p&gt;

 &lt;dl&gt;
 &lt;dt&gt;&lt;i&gt;HexFloatingPointLiteral&lt;/i&gt;:
 &lt;dd&gt; &lt;i&gt;HexSignificand BinaryExponent FloatTypeSuffix&lt;sub&gt;opt&lt;/sub&gt;&lt;/i&gt;
 &lt;/dl&gt;

 &lt;p&gt;

 &lt;dl&gt;
 &lt;dt&gt;&lt;i&gt;HexSignificand:&lt;/i&gt;
 &lt;dd&gt;&lt;i&gt;HexNumeral&lt;/i&gt;
 &lt;dd&gt;&lt;i&gt;HexNumeral&lt;/i&gt; {@code .}
 &lt;dd&gt;{@code 0x} &lt;i&gt;HexDigits&lt;sub&gt;opt&lt;/sub&gt;
     &lt;/i&gt;{@code .}&lt;i&gt; HexDigits&lt;/i&gt;
 &lt;dd&gt;{@code 0X}&lt;i&gt; HexDigits&lt;sub&gt;opt&lt;/sub&gt;
     &lt;/i&gt;{@code .} &lt;i&gt;HexDigits&lt;/i&gt;
 &lt;/dl&gt;

 &lt;p&gt;

 &lt;dl&gt;
 &lt;dt&gt;&lt;i&gt;BinaryExponent:&lt;/i&gt;
 &lt;dd&gt;&lt;i&gt;BinaryExponentIndicator SignedInteger&lt;/i&gt;
 &lt;/dl&gt;

 &lt;p&gt;

 &lt;dl&gt;
 &lt;dt&gt;&lt;i&gt;BinaryExponentIndicator:&lt;/i&gt;
 &lt;dd&gt;{@code p}
 &lt;dd&gt;{@code P}
 &lt;/dl&gt;

 &lt;/blockquote&gt;

 where &lt;i&gt;Sign&lt;/i&gt;, &lt;i&gt;FloatingPointLiteral&lt;/i&gt;,
 &lt;i&gt;HexNumeral&lt;/i&gt;, &lt;i&gt;HexDigits&lt;/i&gt;, &lt;i&gt;SignedInteger&lt;/i&gt; and
 &lt;i&gt;FloatTypeSuffix&lt;/i&gt; are as defined in the lexical structure
 sections of the &lt;a
 href=&quot;http://java.sun.com/docs/books/jls/html/&quot;&gt;Java Language
 Specification&lt;/a&gt;. If {@code s} does not have the form of
 a &lt;i&gt;FloatValue&lt;/i&gt;, then a {@code NumberFormatException}
 is thrown. Otherwise, {@code s} is regarded as
 representing an exact decimal value in the usual
 &quot;computerized scientific notation&quot; or as an exact
 hexadecimal value; this exact numerical value is then
 conceptually converted to an &quot;infinitely precise&quot;
 binary value that is then rounded to type {@code float}
 by the usual round-to-nearest rule of IEEE 754 floating-point
 arithmetic, which includes preserving the sign of a zero
 value. Finally, a {@code Float} object representing this
 {@code float} value is returned.

 &lt;p&gt;To interpret localized string representations of a
 floating-point value, use subclasses of {@link
 java.text.NumberFormat}.

 &lt;p&gt;Note that trailing format specifiers, specifiers that
 determine the type of a floating-point literal
 ({@code 1.0f} is a {@code float} value;
 {@code 1.0d} is a {@code double} value), do
 &lt;em&gt;not&lt;/em&gt; influence the results of this method.  In other
 words, the numerical value of the input string is converted
 directly to the target floating-point type.  In general, the
 two-step sequence of conversions, string to {@code double}
 followed by {@code double} to {@code float}, is
 &lt;em&gt;not&lt;/em&gt; equivalent to converting a string directly to
 {@code float}.  For example, if first converted to an
 intermediate {@code double} and then to
 {@code float}, the string&lt;br&gt;
 {@code &quot;1.00000017881393421514957253748434595763683319091796875001d&quot;}&lt;br&gt;
 results in the {@code float} value
 {@code 1.0000002f}; if the string is converted directly to
 {@code float}, &lt;code&gt;1.000000&lt;b&gt;1&lt;/b&gt;f&lt;/code&gt; results.

 &lt;p&gt;To avoid calling this method on an invalid string and having
 a {@code NumberFormatException} be thrown, the documentation
 for {@link Double#valueOf Double.valueOf} lists a regular
 expression which can be used to screen the input.</description>
					<attribute name="@param">
						<description>s   the string to be parsed.</description>
					</attribute>
					<attribute name="@return">
						<description>a {@code Float} object holding the value
          represented by the {@code String} argument.</description>
					</attribute>
					<attribute name="@throws">
						<description>NumberFormatException  if the string does not contain a
          parsable number.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the string to be parsed." fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception comment="if the string does not contain a
          parsable number." fulltype="java.lang.NumberFormatException" type="NumberFormatException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="valueOf" returncomment="a {@code Float} instance representing {@code f}." fulltype="java.lang.Float" type="Float">
				<comment>
					<description>Returns a {@code Float} instance representing the specified
 {@code float} value.
 If a new {@code Float} instance is not required, this method
 should generally be used in preference to the constructor
 {@link #Float(float)}, as this method is likely to yield
 significantly better space and time performance by caching
 frequently requested values.</description>
					<attribute name="@param">
						<description>f a float value.</description>
					</attribute>
					<attribute name="@return">
						<description>a {@code Float} instance representing {@code f}.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="f" comment="a float value." fulltype="float" type="float" />
				</params>
			</method>
			<method static="true" visibility="public" name="parseFloat" returncomment="the {@code float} value represented by the string
         argument." fulltype="float" type="float">
				<comment>
					<description>Returns a new {@code float} initialized to the value
 represented by the specified {@code String}, as performed
 by the {@code valueOf} method of class {@code Float}.</description>
					<attribute name="@param">
						<description>s   the string to be parsed.</description>
					</attribute>
					<attribute name="@return">
						<description>the {@code float} value represented by the string
         argument.</description>
					</attribute>
					<attribute name="@throws">
						<description>NumberFormatException  if the string does not contain a
               parsable {@code float}.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Float#valueOf(String)</description>
					</attribute>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the string to be parsed." fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception comment="if the string does not contain a
               parsable {@code float}." fulltype="java.lang.NumberFormatException" type="NumberFormatException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="isNaN" returncomment="{@code true} if the argument is NaN;
          {@code false} otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Returns {@code true} if the specified number is a
 Not-a-Number (NaN) value, {@code false} otherwise.</description>
					<attribute name="@param">
						<description>v   the value to be tested.</description>
					</attribute>
					<attribute name="@return">
						<description>{@code true} if the argument is NaN;
          {@code false} otherwise.</description>
					</attribute>
				</comment>
				<params>
					<param name="v" comment="the value to be tested." fulltype="float" type="float" />
				</params>
			</method>
			<method static="true" visibility="public" name="isInfinite" returncomment="{@code true} if the argument is positive infinity or
          negative infinity; {@code false} otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Returns {@code true} if the specified number is infinitely
 large in magnitude, {@code false} otherwise.</description>
					<attribute name="@param">
						<description>v   the value to be tested.</description>
					</attribute>
					<attribute name="@return">
						<description>{@code true} if the argument is positive infinity or
          negative infinity; {@code false} otherwise.</description>
					</attribute>
				</comment>
				<params>
					<param name="v" comment="the value to be tested." fulltype="float" type="float" />
				</params>
			</method>
			<method visibility="public" name="isNaN" returncomment="{@code true} if the value represented by this object is
          NaN; {@code false} otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Returns {@code true} if this {@code Float} value is a
 Not-a-Number (NaN), {@code false} otherwise.</description>
					<attribute name="@return">
						<description>{@code true} if the value represented by this object is
          NaN; {@code false} otherwise.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="isInfinite" returncomment="{@code true} if the value represented by this object is
          positive infinity or negative infinity;
          {@code false} otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Returns {@code true} if this {@code Float} value is
 infinitely large in magnitude, {@code false} otherwise.</description>
					<attribute name="@return">
						<description>{@code true} if the value represented by this object is
          positive infinity or negative infinity;
          {@code false} otherwise.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="toString" returncomment="a {@code String} representation of this object." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a string representation of this {@code Float} object.
 The primitive {@code float} value represented by this object
 is converted to a {@code String} exactly as if by the method
 {@code toString} of one argument.</description>
					<attribute name="@return">
						<description>a {@code String} representation of this object.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Float#toString(float)</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="byteValue" returncomment="the {@code float} value represented by this object
          converted to type {@code byte}" fulltype="byte" type="byte">
				<comment>
					<description>Returns the value of this {@code Float} as a {@code byte} (by
 casting to a {@code byte}).</description>
					<attribute name="@return">
						<description>the {@code float} value represented by this object
          converted to type {@code byte}</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="shortValue" returncomment="the {@code float} value represented by this object
          converted to type {@code short}" fulltype="short" type="short">
				<comment>
					<description>Returns the value of this {@code Float} as a {@code short} (by
 casting to a {@code short}).</description>
					<attribute name="@return">
						<description>the {@code float} value represented by this object
          converted to type {@code short}</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="intValue" returncomment="the {@code float} value represented by this object
          converted to type {@code int}" fulltype="int" type="int">
				<comment>
					<description>Returns the value of this {@code Float} as an {@code int} (by
 casting to type {@code int}).</description>
					<attribute name="@return">
						<description>the {@code float} value represented by this object
          converted to type {@code int}</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="longValue" returncomment="the {@code float} value represented by this object
          converted to type {@code long}" fulltype="long" type="long">
				<comment>
					<description>Returns value of this {@code Float} as a {@code long} (by
 casting to type {@code long}).</description>
					<attribute name="@return">
						<description>the {@code float} value represented by this object
          converted to type {@code long}</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="floatValue" returncomment="the {@code float} value represented by this object" fulltype="float" type="float">
				<comment>
					<description>Returns the {@code float} value of this {@code Float} object.</description>
					<attribute name="@return">
						<description>the {@code float} value represented by this object</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="doubleValue" returncomment="the {@code float} value represented by this
         object is converted to type {@code double} and the
         result of the conversion is returned." fulltype="double" type="double">
				<comment>
					<description>Returns the {@code double} value of this {@code Float} object.</description>
					<attribute name="@return">
						<description>the {@code float} value represented by this
         object is converted to type {@code double} and the
         result of the conversion is returned.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="hashCode" returncomment="a hash code value for this object." fulltype="int" type="int">
				<comment>
					<description>Returns a hash code for this {@code Float} object. The
 result is the integer bit representation, exactly as produced
 by the method {@link #floatToIntBits(float)}, of the primitive
 {@code float} value represented by this {@code Float}
 object.</description>
					<attribute name="@return">
						<description>a hash code value for this object.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="equals" returncomment="{@code true} if the objects are the same;
          {@code false} otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Compares this object against the specified object.  The result
 is {@code true} if and only if the argument is not
 {@code null} and is a {@code Float} object that
 represents a {@code float} with the same value as the
 {@code float} represented by this object. For this
 purpose, two {@code float} values are considered to be the
 same if and only if the method {@link #floatToIntBits(float)}
 returns the identical {@code int} value when applied to
 each.

 &lt;p&gt;Note that in most cases, for two instances of class
 {@code Float}, {@code f1} and {@code f2}, the value
 of {@code f1.equals(f2)} is {@code true} if and only if

 &lt;blockquote&gt;&lt;pre&gt;
   f1.floatValue() == f2.floatValue()
 &lt;/pre&gt;&lt;/blockquote&gt;

 &lt;p&gt;also has the value {@code true}. However, there are two exceptions:
 &lt;ul&gt;
 &lt;li&gt;If {@code f1} and {@code f2} both represent
     {@code Float.NaN}, then the {@code equals} method returns
     {@code true}, even though {@code Float.NaN==Float.NaN}
     has the value {@code false}.
 &lt;li&gt;If {@code f1} represents {@code +0.0f} while
     {@code f2} represents {@code -0.0f}, or vice
     versa, the {@code equal} test has the value
     {@code false}, even though {@code 0.0f==-0.0f}
     has the value {@code true}.
 &lt;/ul&gt;

 This definition allows hash tables to operate properly.</description>
					<attribute name="@param">
						<description>obj the object to be compared</description>
					</attribute>
					<attribute name="@return">
						<description>{@code true} if the objects are the same;
          {@code false} otherwise.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Float#floatToIntBits(float)</description>
					</attribute>
				</comment>
				<params>
					<param name="obj" comment="the object to be compared" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method static="true" visibility="public" name="floatToIntBits" returncomment="the bits that represent the floating-point number." fulltype="int" type="int">
				<comment>
					<description>Returns a representation of the specified floating-point value
 according to the IEEE 754 floating-point &quot;single format&quot; bit
 layout.

 &lt;p&gt;Bit 31 (the bit that is selected by the mask
 {@code 0x80000000}) represents the sign of the floating-point
 number.
 Bits 30-23 (the bits that are selected by the mask
 {@code 0x7f800000}) represent the exponent.
 Bits 22-0 (the bits that are selected by the mask
 {@code 0x007fffff}) represent the significand (sometimes called
 the mantissa) of the floating-point number.

 &lt;p&gt;If the argument is positive infinity, the result is
 {@code 0x7f800000}.

 &lt;p&gt;If the argument is negative infinity, the result is
 {@code 0xff800000}.

 &lt;p&gt;If the argument is NaN, the result is {@code 0x7fc00000}.

 &lt;p&gt;In all cases, the result is an integer that, when given to the
 {@link #intBitsToFloat(int)} method, will produce a floating-point
 value the same as the argument to {@code floatToIntBits}
 (except all NaN values are collapsed to a single
 &quot;canonical&quot; NaN value).</description>
					<attribute name="@param">
						<description>value   a floating-point number.</description>
					</attribute>
					<attribute name="@return">
						<description>the bits that represent the floating-point number.</description>
					</attribute>
				</comment>
				<params>
					<param name="value" comment="a floating-point number." fulltype="float" type="float" />
				</params>
			</method>
			<method static="true" visibility="public" name="floatToRawIntBits" returncomment="the bits that represent the floating-point number." fulltype="int" type="int">
				<comment>
					<description>Returns a representation of the specified floating-point value
 according to the IEEE 754 floating-point &quot;single format&quot; bit
 layout, preserving Not-a-Number (NaN) values.

 &lt;p&gt;Bit 31 (the bit that is selected by the mask
 {@code 0x80000000}) represents the sign of the floating-point
 number.
 Bits 30-23 (the bits that are selected by the mask
 {@code 0x7f800000}) represent the exponent.
 Bits 22-0 (the bits that are selected by the mask
 {@code 0x007fffff}) represent the significand (sometimes called
 the mantissa) of the floating-point number.

 &lt;p&gt;If the argument is positive infinity, the result is
 {@code 0x7f800000}.

 &lt;p&gt;If the argument is negative infinity, the result is
 {@code 0xff800000}.

 &lt;p&gt;If the argument is NaN, the result is the integer representing
 the actual NaN value.  Unlike the {@code floatToIntBits}
 method, {@code floatToRawIntBits} does not collapse all the
 bit patterns encoding a NaN to a single &quot;canonical&quot;
 NaN value.

 &lt;p&gt;In all cases, the result is an integer that, when given to the
 {@link #intBitsToFloat(int)} method, will produce a
 floating-point value the same as the argument to
 {@code floatToRawIntBits}.</description>
					<attribute name="@param">
						<description>value   a floating-point number.</description>
					</attribute>
					<attribute name="@return">
						<description>the bits that represent the floating-point number.</description>
					</attribute>
					<attribute name="@since">
						<description>1.3</description>
					</attribute>
				</comment>
				<params>
					<param name="value" comment="a floating-point number." fulltype="float" type="float" />
				</params>
			</method>
			<method static="true" visibility="public" name="intBitsToFloat" returncomment="the {@code float} floating-point value with the same bit
          pattern." fulltype="float" type="float">
				<comment>
					<description>Returns the {@code float} value corresponding to a given
 bit representation.
 The argument is considered to be a representation of a
 floating-point value according to the IEEE 754 floating-point
 &quot;single format&quot; bit layout.

 &lt;p&gt;If the argument is {@code 0x7f800000}, the result is positive
 infinity.

 &lt;p&gt;If the argument is {@code 0xff800000}, the result is negative
 infinity.

 &lt;p&gt;If the argument is any value in the range
 {@code 0x7f800001} through {@code 0x7fffffff} or in
 the range {@code 0xff800001} through
 {@code 0xffffffff}, the result is a NaN.  No IEEE 754
 floating-point operation provided by Java can distinguish
 between two NaN values of the same type with different bit
 patterns.  Distinct values of NaN are only distinguishable by
 use of the {@code Float.floatToRawIntBits} method.

 &lt;p&gt;In all other cases, let &lt;i&gt;s&lt;/i&gt;, &lt;i&gt;e&lt;/i&gt;, and &lt;i&gt;m&lt;/i&gt; be three
 values that can be computed from the argument:

 &lt;blockquote&gt;&lt;pre&gt;
 int s = ((bits &amp;gt;&amp;gt; 31) == 0) ? 1 : -1;
 int e = ((bits &amp;gt;&amp;gt; 23) &amp; 0xff);
 int m = (e == 0) ?
                 (bits &amp; 0x7fffff) &amp;lt;&amp;lt; 1 :
                 (bits &amp; 0x7fffff) | 0x800000;
 &lt;/pre&gt;&lt;/blockquote&gt;

 Then the floating-point result equals the value of the mathematical
 expression &lt;i&gt;s&lt;/i&gt;&amp;middot;&lt;i&gt;m&lt;/i&gt;&amp;middot;2&lt;sup&gt;&lt;i&gt;e&lt;/i&gt;-150&lt;/sup&gt;.

 &lt;p&gt;Note that this method may not be able to return a
 {@code float} NaN with exactly same bit pattern as the
 {@code int} argument.  IEEE 754 distinguishes between two
 kinds of NaNs, quiet NaNs and &lt;i&gt;signaling NaNs&lt;/i&gt;.  The
 differences between the two kinds of NaN are generally not
 visible in Java.  Arithmetic operations on signaling NaNs turn
 them into quiet NaNs with a different, but often similar, bit
 pattern.  However, on some processors merely copying a
 signaling NaN also performs that conversion.  In particular,
 copying a signaling NaN to return it to the calling method may
 perform this conversion.  So {@code intBitsToFloat} may
 not be able to return a {@code float} with a signaling NaN
 bit pattern.  Consequently, for some {@code int} values,
 {@code floatToRawIntBits(intBitsToFloat(start))} may
 &lt;i&gt;not&lt;/i&gt; equal {@code start}.  Moreover, which
 particular bit patterns represent signaling NaNs is platform
 dependent; although all NaN bit patterns, quiet or signaling,
 must be in the NaN range identified above.</description>
					<attribute name="@param">
						<description>bits   an integer.</description>
					</attribute>
					<attribute name="@return">
						<description>the {@code float} floating-point value with the same bit
          pattern.</description>
					</attribute>
				</comment>
				<params>
					<param name="bits" comment="an integer." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="compareTo" returncomment="the value {@code 0} if {@code anotherFloat} is
          numerically equal to this {@code Float}; a value
          less than {@code 0} if this {@code Float}
          is numerically less than {@code anotherFloat};
          and a value greater than {@code 0} if this
          {@code Float} is numerically greater than
          {@code anotherFloat}." fulltype="int" type="int">
				<comment>
					<description>Compares two {@code Float} objects numerically.  There are
 two ways in which comparisons performed by this method differ
 from those performed by the Java language numerical comparison
 operators ({@code &lt;, &lt;=, ==, &gt;=, &gt;}) when
 applied to primitive {@code float} values:

 &lt;ul&gt;&lt;li&gt;
          {@code Float.NaN} is considered by this method to
          be equal to itself and greater than all other
          {@code float} values
          (including {@code Float.POSITIVE_INFINITY}).
 &lt;li&gt;
          {@code 0.0f} is considered by this method to be greater
          than {@code -0.0f}.
 &lt;/ul&gt;

 This ensures that the &lt;i&gt;natural ordering&lt;/i&gt; of {@code Float}
 objects imposed by this method is &lt;i&gt;consistent with equals&lt;/i&gt;.</description>
					<attribute name="@param">
						<description>anotherFloat   the {@code Float} to be compared.</description>
					</attribute>
					<attribute name="@return">
						<description>the value {@code 0} if {@code anotherFloat} is
          numerically equal to this {@code Float}; a value
          less than {@code 0} if this {@code Float}
          is numerically less than {@code anotherFloat};
          and a value greater than {@code 0} if this
          {@code Float} is numerically greater than
          {@code anotherFloat}.</description>
					</attribute>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
					<attribute name="@see">
						<description>Comparable#compareTo(Object)</description>
					</attribute>
				</comment>
				<params>
					<param name="anotherFloat" comment="the {@code Float} to be compared." fulltype="java.lang.Float" type="Float" />
				</params>
			</method>
			<method static="true" visibility="public" name="compare" returncomment="the value {@code 0} if {@code f1} is
          numerically equal to {@code f2}; a value less than
          {@code 0} if {@code f1} is numerically less than
          {@code f2}; and a value greater than {@code 0}
          if {@code f1} is numerically greater than
          {@code f2}." fulltype="int" type="int">
				<comment>
					<description>Compares the two specified {@code float} values. The sign
 of the integer value returned is the same as that of the
 integer that would be returned by the call:
 &lt;pre&gt;
    new Float(f1).compareTo(new Float(f2))
 &lt;/pre&gt;</description>
					<attribute name="@param">
						<description>f1        the first {@code float} to compare.</description>
					</attribute>
					<attribute name="@param">
						<description>f2        the second {@code float} to compare.</description>
					</attribute>
					<attribute name="@return">
						<description>the value {@code 0} if {@code f1} is
          numerically equal to {@code f2}; a value less than
          {@code 0} if {@code f1} is numerically less than
          {@code f2}; and a value greater than {@code 0}
          if {@code f1} is numerically greater than
          {@code f2}.</description>
					</attribute>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
				<params>
					<param name="f1" comment="the first {@code float} to compare." fulltype="float" type="float" />
					<param name="f2" comment="the second {@code float} to compare." fulltype="float" type="float" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="package-private" package="java.lang" superclassfulltype="java.lang.Object" fulltype="java.lang.ApplicationShutdownHooks" type="ApplicationShutdownHooks">
		<implements>
			<interface fulltype="java.lang.Runnable" type="Runnable" />
		</implements>
		<fields>
			<field static="true" visibility="private" name="instance" fulltype="java.lang.ApplicationShutdownHooks" type="ApplicationShutdownHooks" />
			<field static="true" visibility="private" name="hooks" fulltype="java.util.IdentityHashMap" type="IdentityHashMap" />
		</fields>
		<methods>
			<constructor visibility="private" name="ApplicationShutdownHooks" />
			<method static="true" synchronized="true" visibility="package-private" name="hook" fulltype="java.lang.ApplicationShutdownHooks" type="ApplicationShutdownHooks" />
			<method static="true" synchronized="true" visibility="package-private" name="add" fulltype="void" type="void">
				<params>
					<param name="hook" fulltype="java.lang.Thread" type="Thread" />
				</params>
			</method>
			<method static="true" synchronized="true" visibility="package-private" name="remove" fulltype="boolean" type="boolean">
				<params>
					<param name="hook" fulltype="java.lang.Thread" type="Thread" />
				</params>
			</method>
			<method visibility="public" name="run" fulltype="void" type="void" />
		</methods>
	</jelclass>
	<jelclass superclass="RuntimeException" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.RuntimeException" fulltype="java.lang.TypeNotPresentException" type="TypeNotPresentException">
		<comment>
			<description>Thrown when an application tries to access a type using a string
 representing the type&apos;s name, but no definition for the type with
 the specified name can be found.   This exception differs from
 {@link ClassNotFoundException} in that &lt;tt&gt;ClassNotFoundException&lt;/tt&gt; is a
 checked exception, whereas this exception is unchecked.

 &lt;p&gt;Note that this exception may be used when undefined type variables
 are accessed as well as when types (e.g., classes, interfaces or
 annotation types) are loaded.</description>
			<attribute name="@author">
				<description>Josh Bloch</description>
			</attribute>
			<attribute name="@since">
				<description>1.5</description>
			</attribute>
		</comment>
		<fields>
			<field visibility="private" name="typeName" fulltype="java.lang.String" type="String" />
		</fields>
		<methods>
			<constructor visibility="public" name="TypeNotPresentException">
				<comment>
					<description>Constructs a &lt;tt&gt;TypeNotPresentException&lt;/tt&gt; for the named type
 with the specified cause.</description>
					<attribute name="@param">
						<description>typeName the fully qualified name of the unavailable type</description>
					</attribute>
					<attribute name="@param">
						<description>cause the exception that was thrown when the system attempted to
    load the named type, or &lt;tt&gt;null&lt;/tt&gt; if unavailable or inapplicable</description>
					</attribute>
				</comment>
				<params>
					<param name="typeName" comment="the fully qualified name of the unavailable type" fulltype="java.lang.String" type="String" />
					<param name="cause" comment="the exception that was thrown when the system attempted to
    load the named type, or &lt;tt&gt;null&lt;/tt&gt; if unavailable or inapplicable" fulltype="java.lang.Throwable" type="Throwable" />
				</params>
			</constructor>
			<method visibility="public" name="typeName" returncomment="the fully qualified name of the unavailable type" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the fully qualified name of the unavailable type.</description>
					<attribute name="@return">
						<description>the fully qualified name of the unavailable type</description>
					</attribute>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="RuntimeException" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.RuntimeException" fulltype="java.lang.ArrayStoreException" type="ArrayStoreException">
		<comment>
			<description>Thrown to indicate that an attempt has been made to store the
 wrong type of object into an array of objects. For example, the
 following code generates an &lt;code&gt;ArrayStoreException&lt;/code&gt;:
 &lt;p&gt;&lt;blockquote&gt;&lt;pre&gt;
     Object x[] = new String[3];
     x[0] = new Integer(0);
 &lt;/pre&gt;&lt;/blockquote&gt;</description>
			<attribute name="@author">
				<description>unascribed</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.0</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="ArrayStoreException">
				<comment>
					<description>Constructs an &lt;code&gt;ArrayStoreException&lt;/code&gt; with no detail message.</description>
				</comment>
			</constructor>
			<constructor visibility="public" name="ArrayStoreException">
				<comment>
					<description>Constructs an &lt;code&gt;ArrayStoreException&lt;/code&gt; with the specified
 detail message.</description>
					<attribute name="@param">
						<description>s   the detail message.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the detail message." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass superclass="LinkageError" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.LinkageError" fulltype="java.lang.ExceptionInInitializerError" type="ExceptionInInitializerError">
		<comment>
			<description>Signals that an unexpected exception has occurred in a static initializer.
 An &lt;code&gt;ExceptionInInitializerError&lt;/code&gt; is thrown to indicate that an
 exception occurred during evaluation of a static initializer or the
 initializer for a static variable.

 &lt;p&gt;As of release 1.4, this exception has been retrofitted to conform to
 the general purpose exception-chaining mechanism.  The &quot;saved throwable
 object&quot; that may be provided at construction time and accessed via
 the {@link #getException()} method is now known as the &lt;i&gt;cause&lt;/i&gt;,
 and may be accessed via the {@link Throwable#getCause()} method, as well
 as the aforementioned &quot;legacy method.&quot;</description>
			<attribute name="@author">
				<description>Frank Yellin</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.1</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="1521711792217232256" visibility="private" name="serialVersionUID" constexpr="1521711792217232256L" fulltype="long" type="long">
				<comment>
					<description>Use serialVersionUID from JDK 1.1.X for interoperability</description>
				</comment>
			</field>
			<field visibility="private" name="exception" fulltype="java.lang.Throwable" type="Throwable">
				<comment>
					<description>This field holds the exception if the
 ExceptionInInitializerError(Throwable thrown) constructor was
 used to instantiate the object</description>
					<attribute name="@serial" />
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="public" name="ExceptionInInitializerError">
				<comment>
					<description>Constructs an &lt;code&gt;ExceptionInInitializerError&lt;/code&gt; with
 &lt;code&gt;null&lt;/code&gt; as its detail message string and with no saved
 throwable object.
 A detail message is a String that describes this particular exception.</description>
				</comment>
			</constructor>
			<constructor visibility="public" name="ExceptionInInitializerError">
				<comment>
					<description>Constructs a new &lt;code&gt;ExceptionInInitializerError&lt;/code&gt; class by
 saving a reference to the &lt;code&gt;Throwable&lt;/code&gt; object thrown for
 later retrieval by the {@link #getException()} method. The detail
 message string is set to &lt;code&gt;null&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>thrown The exception thrown</description>
					</attribute>
				</comment>
				<params>
					<param name="thrown" comment="The exception thrown" fulltype="java.lang.Throwable" type="Throwable" />
				</params>
			</constructor>
			<constructor visibility="public" name="ExceptionInInitializerError">
				<comment>
					<description>Constructs an ExceptionInInitializerError with the specified detail
 message string.  A detail message is a String that describes this
 particular exception. The detail message string is saved for later
 retrieval by the {@link Throwable#getMessage()} method. There is no
 saved throwable object.</description>
					<attribute name="@param">
						<description>s the detail message</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the detail message" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="getException" returncomment="the saved throwable object of this
         &lt;code&gt;ExceptionInInitializerError&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;
         if this &lt;code&gt;ExceptionInInitializerError&lt;/code&gt; has no saved
         throwable object." fulltype="java.lang.Throwable" type="Throwable">
				<comment>
					<description>Returns the exception that occurred during a static initialization that
 caused this error to be created.

 &lt;p&gt;This method predates the general-purpose exception chaining facility.
 The {@link Throwable#getCause()} method is now the preferred means of
 obtaining this information.</description>
					<attribute name="@return">
						<description>the saved throwable object of this
         &lt;code&gt;ExceptionInInitializerError&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt;
         if this &lt;code&gt;ExceptionInInitializerError&lt;/code&gt; has no saved
         throwable object.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getCause" returncomment="the cause of this error or &lt;code&gt;null&lt;/code&gt; if the
          cause is nonexistent or unknown." fulltype="java.lang.Throwable" type="Throwable">
				<comment>
					<description>Returns the cause of this error (the exception that occurred
 during a static initialization that caused this error to be created).</description>
					<attribute name="@return">
						<description>the cause of this error or &lt;code&gt;null&lt;/code&gt; if the
          cause is nonexistent or unknown.</description>
					</attribute>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="java.lang.reflect" interface="true" fulltype="java.lang.reflect.InvocationHandler" type="InvocationHandler">
		<comment>
			<description>{@code InvocationHandler} is the interface implemented by
 the &lt;i&gt;invocation handler&lt;/i&gt; of a proxy instance.

 &lt;p&gt;Each proxy instance has an associated invocation handler.
 When a method is invoked on a proxy instance, the method
 invocation is encoded and dispatched to the {@code invoke}
 method of its invocation handler.</description>
			<attribute name="@author">
				<description>Peter Jones</description>
			</attribute>
			<attribute name="@see">
				<description>Proxy</description>
			</attribute>
			<attribute name="@since">
				<description>1.3</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="invoke" returncomment="the value to return from the method invocation on the
 proxy instance.  If the declared return type of the interface
 method is a primitive type, then the value returned by
 this method must be an instance of the corresponding primitive
 wrapper class; otherwise, it must be a type assignable to the
 declared return type.  If the value returned by this method is
 {@code null} and the interface method&apos;s return type is
 primitive, then a {@code NullPointerException} will be
 thrown by the method invocation on the proxy instance.  If the
 value returned by this method is otherwise not compatible with
 the interface method&apos;s declared return type as described above,
 a {@code ClassCastException} will be thrown by the method
 invocation on the proxy instance." fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Processes a method invocation on a proxy instance and returns
 the result.  This method will be invoked on an invocation handler
 when a method is invoked on a proxy instance that it is
 associated with.</description>
					<attribute name="@param">
						<description>proxy the proxy instance that the method was invoked on</description>
					</attribute>
					<attribute name="@param">
						<description>method the {@code Method} instance corresponding to
 the interface method invoked on the proxy instance.  The declaring
 class of the {@code Method} object will be the interface that
 the method was declared in, which may be a superinterface of the
 proxy interface that the proxy class inherits the method through.</description>
					</attribute>
					<attribute name="@param">
						<description>args an array of objects containing the values of the
 arguments passed in the method invocation on the proxy instance,
 or {@code null} if interface method takes no arguments.
 Arguments of primitive types are wrapped in instances of the
 appropriate primitive wrapper class, such as
 {@code java.lang.Integer} or {@code java.lang.Boolean}.</description>
					</attribute>
					<attribute name="@return">
						<description>the value to return from the method invocation on the
 proxy instance.  If the declared return type of the interface
 method is a primitive type, then the value returned by
 this method must be an instance of the corresponding primitive
 wrapper class; otherwise, it must be a type assignable to the
 declared return type.  If the value returned by this method is
 {@code null} and the interface method&apos;s return type is
 primitive, then a {@code NullPointerException} will be
 thrown by the method invocation on the proxy instance.  If the
 value returned by this method is otherwise not compatible with
 the interface method&apos;s declared return type as described above,
 a {@code ClassCastException} will be thrown by the method
 invocation on the proxy instance.</description>
					</attribute>
					<attribute name="@throws">
						<description>Throwable the exception to throw from the method
 invocation on the proxy instance.  The exception&apos;s type must be
 assignable either to any of the exception types declared in the
 {@code throws} clause of the interface method or to the
 unchecked exception types {@code java.lang.RuntimeException}
 or {@code java.lang.Error}.  If a checked exception is
 thrown by this method that is not assignable to any of the
 exception types declared in the {@code throws} clause of
 the interface method, then an
 {@link UndeclaredThrowableException} containing the
 exception that was thrown by this method will be thrown by the
 method invocation on the proxy instance.</description>
					</attribute>
					<attribute name="@see">
						<description>UndeclaredThrowableException</description>
					</attribute>
				</comment>
				<params>
					<param name="proxy" comment="the proxy instance that the method was invoked on" fulltype="java.lang.Object" type="Object" />
					<param name="method" comment="the {@code Method} instance corresponding to
 the interface method invoked on the proxy instance.  The declaring
 class of the {@code Method} object will be the interface that
 the method was declared in, which may be a superinterface of the
 proxy interface that the proxy class inherits the method through." fulltype="java.lang.reflect.Method" type="Method" />
					<param name="args" comment="an array of objects containing the values of the
 arguments passed in the method invocation on the proxy instance,
 or {@code null} if interface method takes no arguments.
 Arguments of primitive types are wrapped in instances of the
 appropriate primitive wrapper class, such as
 {@code java.lang.Integer} or {@code java.lang.Boolean}." fulltype="java.lang.Object[]" type="Object" />
				</params>
				<exceptions>
					<exception comment="the exception to throw from the method
 invocation on the proxy instance.  The exception&apos;s type must be
 assignable either to any of the exception types declared in the
 {@code throws} clause of the interface method or to the
 unchecked exception types {@code java.lang.RuntimeException}
 or {@code java.lang.Error}.  If a checked exception is
 thrown by this method that is not assignable to any of the
 exception types declared in the {@code throws} clause of
 the interface method, then an
 {@link UndeclaredThrowableException} containing the
 exception that was thrown by this method will be thrown by the
 method invocation on the proxy instance." fulltype="java.lang.Throwable" type="Throwable" />
				</exceptions>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="java.lang.reflect" interface="true" fulltype="java.lang.reflect.TypeVariable" type="TypeVariable">
		<implements>
			<interface fulltype="java.lang.reflect.Type" type="Type" />
		</implements>
		<comment>
			<description>TypeVariable is the common superinterface for type variables of kinds.
 A type variable is created the first time it is needed by a reflective
 method, as specified in this package.  If a type variable t is referenced
 by a type (i.e, class, interface or annotation type) T, and T is declared
 by the nth enclosing class of T (see JLS 8.1.2), then the creation of t
 requires the resolution (see JVMS 5) of the ith enclosing class of T,
 for i = 0 to n, inclusive. Creating a type variable must not cause the
 creation of its bounds. Repeated creation of a type variable has no effect.

 &lt;p&gt;Multiple objects may be instantiated at run-time to
 represent a given type variable. Even though a type variable is
 created only once, this does not imply any requirement to cache
 instances representing the type variable. However, all instances
 representing a type variable must be equal() to each other.
 As a consequence, users of type variables must not rely on the identity
 of instances of classes implementing this interface.</description>
			<attribute name="@param">
				<description>&lt;D&gt; the type of generic declaration that declared the
 underlying type variable.</description>
			</attribute>
			<attribute name="@since">
				<description>1.5</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="getBounds" returncomment="an array of {@code Type}s representing the upper
     bound(s) of this type variable" fulltype="java.lang.reflect.Type[]" type="Type">
				<comment>
					<description>Returns an array of {@code Type} objects representing the
 upper bound(s) of this type variable.  Note that if no upper bound is
 explicitly declared, the upper bound is {@code Object}.

 &lt;p&gt;For each upper bound B: &lt;ul&gt; &lt;li&gt;if B is a parameterized
 type or a type variable, it is created, (see {@link
 java.lang.reflect.ParameterizedType ParameterizedType} for the
 details of the creation process for parameterized types).
 &lt;li&gt;Otherwise, B is resolved.  &lt;/ul&gt;</description>
					<attribute name="@throws">
						<description>TypeNotPresentException  if any of the
     bounds refers to a non-existent type declaration</description>
					</attribute>
					<attribute name="@throws">
						<description>MalformedParameterizedTypeException if any of the
     bounds refer to a parameterized type that cannot be instantiated
     for any reason</description>
					</attribute>
					<attribute name="@return">
						<description>an array of {@code Type}s representing the upper
     bound(s) of this type variable</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getGenericDeclaration" returncomment="the generic declaration declared for this type variable." fulltype="java.lang.reflect.GenericDeclaration" type="GenericDeclaration">
				<comment>
					<description>Returns the {@code GenericDeclaration} object representing the
 generic declaration declared this type variable.</description>
					<attribute name="@return">
						<description>the generic declaration declared for this type variable.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getName" returncomment="the name of this type variable, as it appears in the source code" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the name of this type variable, as it occurs in the source code.</description>
					<attribute name="@return">
						<description>the name of this type variable, as it appears in the source code</description>
					</attribute>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="java.lang.reflect" superclassfulltype="java.lang.Object" fulltype="java.lang.reflect.AccessibleObject" type="AccessibleObject">
		<implements>
			<interface fulltype="java.lang.reflect.AnnotatedElement" type="AnnotatedElement" />
		</implements>
		<comment>
			<description>The AccessibleObject class is the base class for Field, Method and
 Constructor objects.  It provides the ability to flag a reflected
 object as suppressing default Java language access control checks
 when it is used.  The access checks--for public, default (package)
 access, protected, and private members--are performed when Fields,
 Methods or Constructors are used to set or get fields, to invoke
 methods, or to create and initialize new instances of classes,
 respectively.

 &lt;p&gt;Setting the {@code accessible} flag in a reflected object
 permits sophisticated applications with sufficient privilege, such
 as Java Object Serialization or other persistence mechanisms, to
 manipulate objects in a manner that would normally be prohibited.</description>
			<attribute name="@see">
				<description>Field</description>
			</attribute>
			<attribute name="@see">
				<description>Method</description>
			</attribute>
			<attribute name="@see">
				<description>Constructor</description>
			</attribute>
			<attribute name="@see">
				<description>ReflectPermission</description>
			</attribute>
			<attribute name="@since">
				<description>1.2</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" visibility="private" name="ACCESS_PERMISSION" fulltype="java.security.Permission" type="Permission">
				<comment>
					<description>The Permission object that is used to check whether a client
 has sufficient privilege to defeat Java language access
 control checks.</description>
				</comment>
			</field>
			<field visibility="package-private" name="override" fulltype="boolean" type="boolean" />
			<field final="true" static="true" visibility="package-private" name="reflectionFactory" fulltype="sun.reflect.ReflectionFactory" type="ReflectionFactory" />
		</fields>
		<methods>
			<constructor visibility="protected" name="AccessibleObject">
				<comment>
					<description>Constructor: only used by the Java Virtual Machine.</description>
				</comment>
			</constructor>
			<method static="true" visibility="public" name="setAccessible" fulltype="void" type="void">
				<comment>
					<description>Convenience method to set the {@code accessible} flag for an
 array of objects with a single security check (for efficiency).

 &lt;p&gt;First, if there is a security manager, its
 {@code checkPermission} method is called with a
 {@code ReflectPermission(&quot;suppressAccessChecks&quot;)} permission.

 &lt;p&gt;A {@code SecurityException} is raised if {@code flag} is
 {@code true} but accessibility of any of the elements of the input
 {@code array} may not be changed (for example, if the element
 object is a {@link Constructor} object for the class {@link
 java.lang.Class}).  In the event of such a SecurityException, the
 accessibility of objects is set to {@code flag} for array elements
 upto (and excluding) the element for which the exception occurred; the
 accessibility of elements beyond (and including) the element for which
 the exception occurred is unchanged.</description>
					<attribute name="@param">
						<description>array the array of AccessibleObjects</description>
					</attribute>
					<attribute name="@param">
						<description>flag  the new value for the {@code accessible} flag
              in each object</description>
					</attribute>
					<attribute name="@throws">
						<description>SecurityException if the request is denied.</description>
					</attribute>
					<attribute name="@see">
						<description>SecurityManager#checkPermission</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.RuntimePermission</description>
					</attribute>
				</comment>
				<params>
					<param name="array" comment="the array of AccessibleObjects" fulltype="java.lang.reflect.AccessibleObject[]" type="AccessibleObject" />
					<param name="flag" comment="the new value for the {@code accessible} flag
              in each object" fulltype="boolean" type="boolean" />
				</params>
				<exceptions>
					<exception comment="if the request is denied." fulltype="java.lang.SecurityException" type="SecurityException" />
				</exceptions>
			</method>
			<method visibility="public" name="setAccessible" fulltype="void" type="void">
				<comment>
					<description>Set the {@code accessible} flag for this object to
 the indicated boolean value.  A value of {@code true} indicates that
 the reflected object should suppress Java language access
 checking when it is used.  A value of {@code false} indicates
 that the reflected object should enforce Java language access checks.

 &lt;p&gt;First, if there is a security manager, its
 {@code checkPermission} method is called with a
 {@code ReflectPermission(&quot;suppressAccessChecks&quot;)} permission.

 &lt;p&gt;A {@code SecurityException} is raised if {@code flag} is
 {@code true} but accessibility of this object may not be changed
 (for example, if this element object is a {@link Constructor} object for
 the class {@link java.lang.Class}).

 &lt;p&gt;A {@code SecurityException} is raised if this object is a {@link
 java.lang.reflect.Constructor} object for the class
 {@code java.lang.Class}, and {@code flag} is true.</description>
					<attribute name="@param">
						<description>flag the new value for the {@code accessible} flag</description>
					</attribute>
					<attribute name="@throws">
						<description>SecurityException if the request is denied.</description>
					</attribute>
					<attribute name="@see">
						<description>SecurityManager#checkPermission</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.RuntimePermission</description>
					</attribute>
				</comment>
				<params>
					<param name="flag" comment="the new value for the {@code accessible} flag" fulltype="boolean" type="boolean" />
				</params>
				<exceptions>
					<exception comment="if the request is denied." fulltype="java.lang.SecurityException" type="SecurityException" />
				</exceptions>
			</method>
			<method static="true" visibility="private" name="setAccessible0" fulltype="void" type="void">
				<params>
					<param name="obj" fulltype="java.lang.reflect.AccessibleObject" type="AccessibleObject" />
					<param name="flag" fulltype="boolean" type="boolean" />
				</params>
				<exceptions>
					<exception fulltype="java.lang.SecurityException" type="SecurityException" />
				</exceptions>
			</method>
			<method visibility="public" name="isAccessible" returncomment="the value of the object&apos;s {@code accessible} flag" fulltype="boolean" type="boolean">
				<comment>
					<description>Get the value of the {@code accessible} flag for this object.</description>
					<attribute name="@return">
						<description>the value of the object&apos;s {@code accessible} flag</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getAnnotation" fulltype="java.lang.annotation.Annotation" type="Annotation">
				<comment>
					<attribute name="@throws">
						<description>NullPointerException {@inheritDoc}</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="annotationClass" fulltype="java.lang.Class" type="Class" />
				</params>
			</method>
			<method visibility="public" name="isAnnotationPresent" fulltype="boolean" type="boolean">
				<comment>
					<attribute name="@throws">
						<description>NullPointerException {@inheritDoc}</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="annotationClass" fulltype="java.lang.Class" type="Class" />
				</params>
			</method>
			<method visibility="public" name="getAnnotations" fulltype="java.lang.annotation.Annotation[]" type="Annotation">
				<comment>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getDeclaredAnnotations" fulltype="java.lang.annotation.Annotation[]" type="Annotation">
				<comment>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Exception" visibility="public" package="java.lang.reflect" serializable="true" superclassfulltype="java.lang.Exception" fulltype="java.lang.reflect.InvocationTargetException" type="InvocationTargetException">
		<comment>
			<description>InvocationTargetException is a checked exception that wraps
 an exception thrown by an invoked method or constructor.

 &lt;p&gt;As of release 1.4, this exception has been retrofitted to conform to
 the general purpose exception-chaining mechanism.  The &quot;target exception&quot;
 that is provided at construction time and accessed via the
 {@link #getTargetException()} method is now known as the &lt;i&gt;cause&lt;/i&gt;,
 and may be accessed via the {@link Throwable#getCause()} method,
 as well as the aforementioned &quot;legacy method.&quot;</description>
			<attribute name="@see">
				<description>Method</description>
			</attribute>
			<attribute name="@see">
				<description>Constructor</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="4085088731926701167" visibility="private" name="serialVersionUID" constexpr="4085088731926701167L" fulltype="long" type="long">
				<comment>
					<description>Use serialVersionUID from JDK 1.1.X for interoperability</description>
				</comment>
			</field>
			<field visibility="private" name="target" fulltype="java.lang.Throwable" type="Throwable">
				<comment>
					<description>This field holds the target if the
 InvocationTargetException(Throwable target) constructor was
 used to instantiate the object</description>
					<attribute name="@serial" />
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="protected" name="InvocationTargetException">
				<comment>
					<description>Constructs an {@code InvocationTargetException} with
 {@code null} as the target exception.</description>
				</comment>
			</constructor>
			<constructor visibility="public" name="InvocationTargetException">
				<comment>
					<description>Constructs a InvocationTargetException with a target exception.</description>
					<attribute name="@param">
						<description>target the target exception</description>
					</attribute>
				</comment>
				<params>
					<param name="target" comment="the target exception" fulltype="java.lang.Throwable" type="Throwable" />
				</params>
			</constructor>
			<constructor visibility="public" name="InvocationTargetException">
				<comment>
					<description>Constructs a InvocationTargetException with a target exception
 and a detail message.</description>
					<attribute name="@param">
						<description>target the target exception</description>
					</attribute>
					<attribute name="@param">
						<description>s      the detail message</description>
					</attribute>
				</comment>
				<params>
					<param name="target" comment="the target exception" fulltype="java.lang.Throwable" type="Throwable" />
					<param name="s" comment="the detail message" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="getTargetException" returncomment="the thrown target exception (cause of this exception)." fulltype="java.lang.Throwable" type="Throwable">
				<comment>
					<description>Get the thrown target exception.

 &lt;p&gt;This method predates the general-purpose exception chaining facility.
 The {@link Throwable#getCause()} method is now the preferred means of
 obtaining this information.</description>
					<attribute name="@return">
						<description>the thrown target exception (cause of this exception).</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getCause" returncomment="the cause of this exception." fulltype="java.lang.Throwable" type="Throwable">
				<comment>
					<description>Returns the cause of this exception (the thrown target exception,
 which may be {@code null}).</description>
					<attribute name="@return">
						<description>the cause of this exception.</description>
					</attribute>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="java.lang.reflect" interface="true" fulltype="java.lang.reflect.Type" type="Type">
		<comment>
			<description>Type is the common superinterface for all types in the Java
 programming language. These include raw types, parameterized types,
 array types, type variables and primitive types.</description>
			<attribute name="@since">
				<description>1.5</description>
			</attribute>
		</comment>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="java.lang.reflect" interface="true" fulltype="java.lang.reflect.Member" type="Member">
		<comment>
			<description>Member is an interface that reflects identifying information about
 a single member (a field or a method) or a constructor.</description>
			<attribute name="@see">
				<description>java.lang.Class</description>
			</attribute>
			<attribute name="@see">
				<description>Field</description>
			</attribute>
			<attribute name="@see">
				<description>Method</description>
			</attribute>
			<attribute name="@see">
				<description>Constructor</description>
			</attribute>
			<attribute name="@author">
				<description>Nakul Saraiya</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="0" visibility="public" name="PUBLIC" constexpr="0" fulltype="int" type="int">
				<comment>
					<description>Identifies the set of all public members of a class or interface,
 including inherited members.</description>
					<attribute name="@see">
						<description>java.lang.SecurityManager#checkMemberAccess</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="1" visibility="public" name="DECLARED" constexpr="1" fulltype="int" type="int">
				<comment>
					<description>Identifies the set of declared members of a class or interface.
 Inherited members are not included.</description>
					<attribute name="@see">
						<description>java.lang.SecurityManager#checkMemberAccess</description>
					</attribute>
				</comment>
			</field>
		</fields>
		<methods>
			<method visibility="public" name="getDeclaringClass" returncomment="an object representing the declaring class of the
 underlying member" fulltype="java.lang.Class" type="Class">
				<comment>
					<description>Returns the Class object representing the class or interface
 that declares the member or constructor represented by this Member.</description>
					<attribute name="@return">
						<description>an object representing the declaring class of the
 underlying member</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getName" returncomment="the simple name of the underlying member" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the simple name of the underlying member or constructor
 represented by this Member.</description>
					<attribute name="@return">
						<description>the simple name of the underlying member</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getModifiers" returncomment="the Java language modifiers for the underlying member" fulltype="int" type="int">
				<comment>
					<description>Returns the Java language modifiers for the member or
 constructor represented by this Member, as an integer.  The
 Modifier class should be used to decode the modifiers in
 the integer.</description>
					<attribute name="@return">
						<description>the Java language modifiers for the underlying member</description>
					</attribute>
					<attribute name="@see">
						<description>Modifier</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="isSynthetic" returncomment="true if and only if this member was introduced by
 the compiler." fulltype="boolean" type="boolean">
				<comment>
					<description>Returns {@code true} if this member was introduced by
 the compiler; returns {@code false} otherwise.</description>
					<attribute name="@return">
						<description>true if and only if this member was introduced by
 the compiler.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="package-private" package="java.lang.reflect" superclassfulltype="java.lang.Object" fulltype="java.lang.reflect.ReflectAccess" type="ReflectAccess">
		<implements>
			<interface fulltype="sun.reflect.LangReflectAccess" type="LangReflectAccess" />
		</implements>
		<comment>
			<description>Package-private class implementing the
    sun.reflect.LangReflectAccess interface, allowing the java.lang
    package to instantiate objects in this package.</description>
		</comment>
		<methods>
			<constructor visibility="package-private" name="ReflectAccess" />
			<method visibility="public" name="newField" fulltype="java.lang.reflect.Field" type="Field">
				<params>
					<param name="declaringClass" fulltype="java.lang.Class" type="Class" />
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="type" fulltype="java.lang.Class" type="Class" />
					<param name="modifiers" fulltype="int" type="int" />
					<param name="slot" fulltype="int" type="int" />
					<param name="signature" fulltype="java.lang.String" type="String" />
					<param name="annotations" fulltype="byte[]" type="byte" />
				</params>
			</method>
			<method visibility="public" name="newMethod" fulltype="java.lang.reflect.Method" type="Method">
				<params>
					<param name="declaringClass" fulltype="java.lang.Class" type="Class" />
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="parameterTypes" fulltype="java.lang.Class[]" type="Class" />
					<param name="returnType" fulltype="java.lang.Class" type="Class" />
					<param name="checkedExceptions" fulltype="java.lang.Class[]" type="Class" />
					<param name="modifiers" fulltype="int" type="int" />
					<param name="slot" fulltype="int" type="int" />
					<param name="signature" fulltype="java.lang.String" type="String" />
					<param name="annotations" fulltype="byte[]" type="byte" />
					<param name="parameterAnnotations" fulltype="byte[]" type="byte" />
					<param name="annotationDefault" fulltype="byte[]" type="byte" />
				</params>
			</method>
			<method visibility="public" name="newConstructor" fulltype="java.lang.reflect.Constructor" type="Constructor">
				<params>
					<param name="declaringClass" fulltype="java.lang.Class" type="Class" />
					<param name="parameterTypes" fulltype="java.lang.Class[]" type="Class" />
					<param name="checkedExceptions" fulltype="java.lang.Class[]" type="Class" />
					<param name="modifiers" fulltype="int" type="int" />
					<param name="slot" fulltype="int" type="int" />
					<param name="signature" fulltype="java.lang.String" type="String" />
					<param name="annotations" fulltype="byte[]" type="byte" />
					<param name="parameterAnnotations" fulltype="byte[]" type="byte" />
				</params>
			</method>
			<method visibility="public" name="getMethodAccessor" fulltype="sun.reflect.MethodAccessor" type="MethodAccessor">
				<params>
					<param name="m" fulltype="java.lang.reflect.Method" type="Method" />
				</params>
			</method>
			<method visibility="public" name="setMethodAccessor" fulltype="void" type="void">
				<params>
					<param name="m" fulltype="java.lang.reflect.Method" type="Method" />
					<param name="accessor" fulltype="sun.reflect.MethodAccessor" type="MethodAccessor" />
				</params>
			</method>
			<method visibility="public" name="getConstructorAccessor" fulltype="sun.reflect.ConstructorAccessor" type="ConstructorAccessor">
				<params>
					<param name="c" fulltype="java.lang.reflect.Constructor" type="Constructor" />
				</params>
			</method>
			<method visibility="public" name="setConstructorAccessor" fulltype="void" type="void">
				<params>
					<param name="c" fulltype="java.lang.reflect.Constructor" type="Constructor" />
					<param name="accessor" fulltype="sun.reflect.ConstructorAccessor" type="ConstructorAccessor" />
				</params>
			</method>
			<method visibility="public" name="getConstructorSlot" fulltype="int" type="int">
				<params>
					<param name="c" fulltype="java.lang.reflect.Constructor" type="Constructor" />
				</params>
			</method>
			<method visibility="public" name="getConstructorSignature" fulltype="java.lang.String" type="String">
				<params>
					<param name="c" fulltype="java.lang.reflect.Constructor" type="Constructor" />
				</params>
			</method>
			<method visibility="public" name="getConstructorAnnotations" fulltype="byte[]" type="byte">
				<params>
					<param name="c" fulltype="java.lang.reflect.Constructor" type="Constructor" />
				</params>
			</method>
			<method visibility="public" name="getConstructorParameterAnnotations" fulltype="byte[]" type="byte">
				<params>
					<param name="c" fulltype="java.lang.reflect.Constructor" type="Constructor" />
				</params>
			</method>
			<method visibility="public" name="copyMethod" fulltype="java.lang.reflect.Method" type="Method">
				<params>
					<param name="arg" fulltype="java.lang.reflect.Method" type="Method" />
				</params>
			</method>
			<method visibility="public" name="copyField" fulltype="java.lang.reflect.Field" type="Field">
				<params>
					<param name="arg" fulltype="java.lang.reflect.Field" type="Field" />
				</params>
			</method>
			<method visibility="public" name="copyConstructor" fulltype="java.lang.reflect.Constructor" type="Constructor">
				<params>
					<param name="arg" fulltype="java.lang.reflect.Constructor" type="Constructor" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="java.lang.reflect" interface="true" fulltype="java.lang.reflect.GenericArrayType" type="GenericArrayType">
		<implements>
			<interface fulltype="java.lang.reflect.Type" type="Type" />
		</implements>
		<comment>
			<description>{@code GenericArrayType} represents an array type whose component
 type is either a parameterized type or a type variable.</description>
			<attribute name="@since">
				<description>1.5</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="getGenericComponentType" returncomment="a {@code Type} object representing the component type
     of this array" fulltype="java.lang.reflect.Type" type="Type">
				<comment>
					<description>Returns a {@code Type} object representing the component type
 of this array. This method creates the component type of the
 array.  See the declaration of {@link
 java.lang.reflect.ParameterizedType ParameterizedType} for the
 semantics of the creation process for parameterized types and
 see {@link java.lang.reflect.TypeVariable TypeVariable} for the
 creation process for type variables.</description>
					<attribute name="@return">
						<description>a {@code Type} object representing the component type
     of this array</description>
					</attribute>
					<attribute name="@throws">
						<description>TypeNotPresentException if the underlying array type&apos;s
     component type refers to a non-existent type declaration</description>
					</attribute>
					<attribute name="@throws">
						<description>MalformedParameterizedTypeException if  the
     underlying array type&apos;s component type refers to a
     parameterized type that cannot be instantiated for any reason</description>
					</attribute>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="java.lang.reflect" interface="true" fulltype="java.lang.reflect.ParameterizedType" type="ParameterizedType">
		<implements>
			<interface fulltype="java.lang.reflect.Type" type="Type" />
		</implements>
		<comment>
			<description>ParameterizedType represents a parameterized type such as
 Collection&amp;lt;String&amp;gt;.

 &lt;p&gt;A parameterized type is created the first time it is needed by a
 reflective method, as specified in this package. When a
 parameterized type p is created, the generic type declaration that
 p instantiates is resolved, and all type arguments of p are created
 recursively. See {@link java.lang.reflect.TypeVariable
 TypeVariable} for details on the creation process for type
 variables. Repeated creation of a parameterized type has no effect.

 &lt;p&gt;Instances of classes that implement this interface must implement
 an equals() method that equates any two instances that share the
 same generic type declaration and have equal type parameters.</description>
			<attribute name="@since">
				<description>1.5</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="getActualTypeArguments" returncomment="an array of {@code Type} objects representing the actual type
     arguments to this type" fulltype="java.lang.reflect.Type[]" type="Type">
				<comment>
					<description>Returns an array of {@code Type} objects representing the actual type
 arguments to this type.

 &lt;p&gt;Note that in some cases, the returned array be empty. This can occur
 if this type represents a non-parameterized type nested within
 a parameterized type.</description>
					<attribute name="@return">
						<description>an array of {@code Type} objects representing the actual type
     arguments to this type</description>
					</attribute>
					<attribute name="@throws">
						<description>TypeNotPresentException if any of the
     actual type arguments refers to a non-existent type declaration</description>
					</attribute>
					<attribute name="@throws">
						<description>MalformedParameterizedTypeException if any of the
     actual type parameters refer to a parameterized type that cannot
     be instantiated for any reason</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getRawType" returncomment="the {@code Type} object representing the class or interface
     that declared this type" fulltype="java.lang.reflect.Type" type="Type">
				<comment>
					<description>Returns the {@code Type} object representing the class or interface
 that declared this type.</description>
					<attribute name="@return">
						<description>the {@code Type} object representing the class or interface
     that declared this type</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getOwnerType" returncomment="a {@code Type} object representing the type that
     this type is a member of. If this type is a top-level type,
     {@code null} is returned" fulltype="java.lang.reflect.Type" type="Type">
				<comment>
					<description>Returns a {@code Type} object representing the type that this type
 is a member of.  For example, if this type is {@code O&lt;T&gt;.I&lt;S&gt;},
 return a representation of {@code O&lt;T&gt;}.

 &lt;p&gt;If this type is a top-level type, {@code null} is returned.</description>
					<attribute name="@return">
						<description>a {@code Type} object representing the type that
     this type is a member of. If this type is a top-level type,
     {@code null} is returned</description>
					</attribute>
					<attribute name="@throws">
						<description>TypeNotPresentException if the owner type
     refers to a non-existent type declaration</description>
					</attribute>
					<attribute name="@throws">
						<description>MalformedParameterizedTypeException if the owner type
     refers to a parameterized type that cannot be instantiated
     for any reason</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="RuntimeException" visibility="public" package="java.lang.reflect" serializable="true" superclassfulltype="java.lang.RuntimeException" fulltype="java.lang.reflect.UndeclaredThrowableException" type="UndeclaredThrowableException">
		<comment>
			<description>Thrown by a method invocation on a proxy instance if its invocation
 handler&apos;s {@link InvocationHandler#invoke invoke} method throws a
 checked exception (a {@code Throwable} that is not assignable
 to {@code RuntimeException} or {@code Error}) that
 is not assignable to any of the exception types declared in the
 {@code throws} clause of the method that was invoked on the
 proxy instance and dispatched to the invocation handler.

 &lt;p&gt;An {@code UndeclaredThrowableException} instance contains
 the undeclared checked exception that was thrown by the invocation
 handler, and it can be retrieved with the
 {@code getUndeclaredThrowable()} method.
 {@code UndeclaredThrowableException} extends
 {@code RuntimeException}, so it is an unchecked exception
 that wraps a checked exception.

 &lt;p&gt;As of release 1.4, this exception has been retrofitted to
 conform to the general purpose exception-chaining mechanism.  The
 &quot;undeclared checked exception that was thrown by the invocation
 handler&quot; that may be provided at construction time and accessed via
 the {@link #getUndeclaredThrowable()} method is now known as the
 &lt;i&gt;cause&lt;/i&gt;, and may be accessed via the {@link
 Throwable#getCause()} method, as well as the aforementioned &quot;legacy
 method.&quot;</description>
			<attribute name="@author">
				<description>Peter Jones</description>
			</attribute>
			<attribute name="@see">
				<description>InvocationHandler</description>
			</attribute>
			<attribute name="@since">
				<description>1.3</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="330127114055056639" visibility="package-private" name="serialVersionUID" constexpr="330127114055056639L" fulltype="long" type="long" />
			<field visibility="private" name="undeclaredThrowable" fulltype="java.lang.Throwable" type="Throwable">
				<comment>
					<description>the undeclared checked exception that was thrown</description>
					<attribute name="@serial" />
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="public" name="UndeclaredThrowableException">
				<comment>
					<description>Constructs an {@code UndeclaredThrowableException} with the
 specified {@code Throwable}.</description>
					<attribute name="@param">
						<description>undeclaredThrowable the undeclared checked exception
          that was thrown</description>
					</attribute>
				</comment>
				<params>
					<param name="undeclaredThrowable" comment="the undeclared checked exception
          that was thrown" fulltype="java.lang.Throwable" type="Throwable" />
				</params>
			</constructor>
			<constructor visibility="public" name="UndeclaredThrowableException">
				<comment>
					<description>Constructs an {@code UndeclaredThrowableException} with the
 specified {@code Throwable} and a detail message.</description>
					<attribute name="@param">
						<description>undeclaredThrowable the undeclared checked exception
          that was thrown</description>
					</attribute>
					<attribute name="@param">
						<description>s the detail message</description>
					</attribute>
				</comment>
				<params>
					<param name="undeclaredThrowable" comment="the undeclared checked exception
          that was thrown" fulltype="java.lang.Throwable" type="Throwable" />
					<param name="s" comment="the detail message" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="public" name="getUndeclaredThrowable" returncomment="the undeclared checked exception that was thrown" fulltype="java.lang.Throwable" type="Throwable">
				<comment>
					<description>Returns the {@code Throwable} instance wrapped in this
 {@code UndeclaredThrowableException}, which may be {@code null}.

 &lt;p&gt;This method predates the general-purpose exception chaining facility.
 The {@link Throwable#getCause()} method is now the preferred means of
 obtaining this information.</description>
					<attribute name="@return">
						<description>the undeclared checked exception that was thrown</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getCause" returncomment="the cause of this exception." fulltype="java.lang.Throwable" type="Throwable">
				<comment>
					<description>Returns the cause of this exception (the {@code Throwable}
 instance wrapped in this {@code UndeclaredThrowableException},
 which may be {@code null}).</description>
					<attribute name="@return">
						<description>the cause of this exception.</description>
					</attribute>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass final="true" superclass="AccessibleObject" visibility="public" package="java.lang.reflect" superclassfulltype="java.lang.reflect.AccessibleObject" fulltype="java.lang.reflect.Field" type="Field">
		<implements>
			<interface fulltype="java.lang.reflect.Member" type="Member" />
		</implements>
		<comment>
			<description>A {@code Field} provides information about, and dynamic access to, a
 single field of a class or an interface.  The reflected field may
 be a class (static) field or an instance field.

 &lt;p&gt;A {@code Field} permits widening conversions to occur during a get or
 set access operation, but throws an {@code IllegalArgumentException} if a
 narrowing conversion would occur.</description>
			<attribute name="@see">
				<description>Member</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.Class</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.Class#getFields()</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.Class#getField(String)</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.Class#getDeclaredFields()</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.Class#getDeclaredField(String)</description>
			</attribute>
			<attribute name="@author">
				<description>Kenneth Russell</description>
			</attribute>
			<attribute name="@author">
				<description>Nakul Saraiya</description>
			</attribute>
		</comment>
		<fields>
			<field visibility="private" name="clazz" fulltype="java.lang.Class" type="Class" />
			<field visibility="private" name="slot" fulltype="int" type="int" />
			<field visibility="private" name="name" fulltype="java.lang.String" type="String" />
			<field visibility="private" name="type" fulltype="java.lang.Class" type="Class" />
			<field visibility="private" name="modifiers" fulltype="int" type="int" />
			<field visibility="private" transient="true" name="signature" fulltype="java.lang.String" type="String" />
			<field visibility="private" transient="true" name="genericInfo" fulltype="sun.reflect.generics.repository.FieldRepository" type="FieldRepository" />
			<field visibility="private" name="annotations" fulltype="byte[]" type="byte" />
			<field visibility="private" name="fieldAccessor" fulltype="sun.reflect.FieldAccessor" type="FieldAccessor" />
			<field visibility="private" name="overrideFieldAccessor" fulltype="sun.reflect.FieldAccessor" type="FieldAccessor" />
			<field visibility="private" name="root" fulltype="java.lang.reflect.Field" type="Field" />
			<field visibility="private" name="securityCheckCache" fulltype="java.lang.Class" type="Class" />
			<field visibility="private" name="securityCheckTargetClassCache" fulltype="java.lang.Class" type="Class" />
			<field final="true" static="true" visibility="private" name="EMPTY_ANNOTATION_ARRAY" fulltype="java.lang.annotation.Annotation[]" type="Annotation" />
			<field visibility="private" transient="true" name="declaredAnnotations" fulltype="java.util.Map" type="Map" />
		</fields>
		<methods>
			<constructor visibility="package-private" name="Field">
				<comment>
					<description>Package-private constructor used by ReflectAccess to enable
 instantiation of these objects in Java code from the java.lang
 package via sun.reflect.LangReflectAccess.</description>
				</comment>
				<params>
					<param name="declaringClass" fulltype="java.lang.Class" type="Class" />
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="type" fulltype="java.lang.Class" type="Class" />
					<param name="modifiers" fulltype="int" type="int" />
					<param name="slot" fulltype="int" type="int" />
					<param name="signature" fulltype="java.lang.String" type="String" />
					<param name="annotations" fulltype="byte[]" type="byte" />
				</params>
			</constructor>
			<method visibility="private" name="getGenericSignature" fulltype="java.lang.String" type="String" />
			<method visibility="private" name="getFactory" fulltype="sun.reflect.generics.factory.GenericsFactory" type="GenericsFactory" />
			<method visibility="private" name="getGenericInfo" fulltype="sun.reflect.generics.repository.FieldRepository" type="FieldRepository" />
			<method visibility="package-private" name="copy" fulltype="java.lang.reflect.Field" type="Field">
				<comment>
					<description>Package-private routine (exposed to java.lang.Class via
 ReflectAccess) which returns a copy of this Field. The copy&apos;s
 &quot;root&quot; field points to this Field.</description>
				</comment>
			</method>
			<method visibility="public" name="getDeclaringClass" fulltype="java.lang.Class" type="Class">
				<comment>
					<description>Returns the {@code Class} object representing the class or interface
 that declares the field represented by this {@code Field} object.</description>
				</comment>
			</method>
			<method visibility="public" name="getName" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the name of the field represented by this {@code Field} object.</description>
				</comment>
			</method>
			<method visibility="public" name="getModifiers" fulltype="int" type="int">
				<comment>
					<description>Returns the Java language modifiers for the field represented
 by this {@code Field} object, as an integer. The {@code Modifier} class should
 be used to decode the modifiers.</description>
					<attribute name="@see">
						<description>Modifier</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="isEnumConstant" returncomment="{@code true} if and only if this field represents an element of
 an enumerated type." fulltype="boolean" type="boolean">
				<comment>
					<description>Returns {@code true} if this field represents an element of
 an enumerated type; returns {@code false} otherwise.</description>
					<attribute name="@return">
						<description>{@code true} if and only if this field represents an element of
 an enumerated type.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="isSynthetic" returncomment="true if and only if this field is a synthetic
 field as defined by the Java Language Specification." fulltype="boolean" type="boolean">
				<comment>
					<description>Returns {@code true} if this field is a synthetic
 field; returns {@code false} otherwise.</description>
					<attribute name="@return">
						<description>true if and only if this field is a synthetic
 field as defined by the Java Language Specification.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getType" returncomment="a {@code Class} object identifying the declared
 type of the field represented by this object" fulltype="java.lang.Class" type="Class">
				<comment>
					<description>Returns a {@code Class} object that identifies the
 declared type for the field represented by this
 {@code Field} object.</description>
					<attribute name="@return">
						<description>a {@code Class} object identifying the declared
 type of the field represented by this object</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getGenericType" returncomment="a {@code Type} object that represents the declared type for
     the field represented by this {@code Field} object" fulltype="java.lang.reflect.Type" type="Type">
				<comment>
					<description>Returns a {@code Type} object that represents the declared type for
 the field represented by this {@code Field} object.

 &lt;p&gt;If the {@code Type} is a parameterized type, the
 {@code Type} object returned must accurately reflect the
 actual type parameters used in the source code.

 &lt;p&gt;If the type of the underlying field is a type variable or a
 parameterized type, it is created. Otherwise, it is resolved.</description>
					<attribute name="@return">
						<description>a {@code Type} object that represents the declared type for
     the field represented by this {@code Field} object</description>
					</attribute>
					<attribute name="@throws">
						<description>GenericSignatureFormatError if the generic field
     signature does not conform to the format specified in the Java
     Virtual Machine Specification, 3rd edition</description>
					</attribute>
					<attribute name="@throws">
						<description>TypeNotPresentException if the generic type
     signature of the underlying field refers to a non-existent
     type declaration</description>
					</attribute>
					<attribute name="@throws">
						<description>MalformedParameterizedTypeException if the generic
     signature of the underlying field refers to a parameterized type
     that cannot be instantiated for any reason</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="equals" fulltype="boolean" type="boolean">
				<comment>
					<description>Compares this {@code Field} against the specified object.  Returns
 true if the objects are the same.  Two {@code Field} objects are the same if
 they were declared by the same class and have the same name
 and type.</description>
				</comment>
				<params>
					<param name="obj" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="hashCode" fulltype="int" type="int">
				<comment>
					<description>Returns a hashcode for this {@code Field}.  This is computed as the
 exclusive-or of the hashcodes for the underlying field&apos;s
 declaring class name and its name.</description>
				</comment>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a string describing this {@code Field}.  The format is
 the access modifiers for the field, if any, followed
 by the field type, followed by a space, followed by
 the fully-qualified name of the class declaring the field,
 followed by a period, followed by the name of the field.
 For example:
 &lt;pre&gt;
    public static final int java.lang.Thread.MIN_PRIORITY
    private int java.io.FileDescriptor.fd
 &lt;/pre&gt;

 &lt;p&gt;The modifiers are placed in canonical order as specified by
 &quot;The Java Language Specification&quot;.  This is {@code public},
 {@code protected} or {@code private} first, and then other
 modifiers in the following order: {@code static}, {@code final},
 {@code transient}, {@code volatile}.</description>
				</comment>
			</method>
			<method visibility="public" name="toGenericString" returncomment="a string describing this {@code Field}, including
 its generic type" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a string describing this {@code Field}, including
 its generic type.  The format is the access modifiers for the
 field, if any, followed by the generic field type, followed by
 a space, followed by the fully-qualified name of the class
 declaring the field, followed by a period, followed by the name
 of the field.

 &lt;p&gt;The modifiers are placed in canonical order as specified by
 &quot;The Java Language Specification&quot;.  This is {@code public},
 {@code protected} or {@code private} first, and then other
 modifiers in the following order: {@code static}, {@code final},
 {@code transient}, {@code volatile}.</description>
					<attribute name="@return">
						<description>a string describing this {@code Field}, including
 its generic type</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="get" returncomment="the value of the represented field in object
 {@code obj}; primitive values are wrapped in an appropriate
 object before being returned" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Returns the value of the field represented by this {@code Field}, on
 the specified object. The value is automatically wrapped in an
 object if it has a primitive type.

 &lt;p&gt;The underlying field&apos;s value is obtained as follows:

 &lt;p&gt;If the underlying field is a static field, the {@code obj} argument
 is ignored; it may be null.

 &lt;p&gt;Otherwise, the underlying field is an instance field.  If the
 specified {@code obj} argument is null, the method throws a
 {@code NullPointerException}. If the specified object is not an
 instance of the class or interface declaring the underlying
 field, the method throws an {@code IllegalArgumentException}.

 &lt;p&gt;If this {@code Field} object enforces Java language access control, and
 the underlying field is inaccessible, the method throws an
 {@code IllegalAccessException}.
 If the underlying field is static, the class that declared the
 field is initialized if it has not already been initialized.

 &lt;p&gt;Otherwise, the value is retrieved from the underlying instance
 or static field.  If the field has a primitive type, the value
 is wrapped in an object before being returned, otherwise it is
 returned as is.

 &lt;p&gt;If the field is hidden in the type of {@code obj},
 the field&apos;s value is obtained according to the preceding rules.</description>
					<attribute name="@param">
						<description>obj object from which the represented field&apos;s value is
 to be extracted</description>
					</attribute>
					<attribute name="@return">
						<description>the value of the represented field in object
 {@code obj}; primitive values are wrapped in an appropriate
 object before being returned</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalAccessException    if the underlying field
              is inaccessible.</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalArgumentException  if the specified object is not an
              instance of the class or interface declaring the underlying
              field (or a subclass or implementor thereof).</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException      if the specified object is null
              and the field is an instance field.</description>
					</attribute>
					<attribute name="@exception">
						<description>ExceptionInInitializerError if the initialization provoked
              by this method fails.</description>
					</attribute>
				</comment>
				<params>
					<param name="obj" comment="object from which the represented field&apos;s value is
 to be extracted" fulltype="java.lang.Object" type="Object" />
				</params>
				<exceptions>
					<exception comment="if the specified object is not an
              instance of the class or interface declaring the underlying
              field (or a subclass or implementor thereof)." fulltype="java.lang.IllegalArgumentException" type="IllegalArgumentException" />
					<exception comment="if the underlying field
              is inaccessible." fulltype="java.lang.IllegalAccessException" type="IllegalAccessException" />
				</exceptions>
			</method>
			<method visibility="public" name="getBoolean" returncomment="the value of the {@code boolean} field" fulltype="boolean" type="boolean">
				<comment>
					<description>Gets the value of a static or instance {@code boolean} field.</description>
					<attribute name="@param">
						<description>obj the object to extract the {@code boolean} value
 from</description>
					</attribute>
					<attribute name="@return">
						<description>the value of the {@code boolean} field</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalAccessException    if the underlying field
              is inaccessible.</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalArgumentException  if the specified object is not
              an instance of the class or interface declaring the
              underlying field (or a subclass or implementor
              thereof), or if the field value cannot be
              converted to the type {@code boolean} by a
              widening conversion.</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException      if the specified object is null
              and the field is an instance field.</description>
					</attribute>
					<attribute name="@exception">
						<description>ExceptionInInitializerError if the initialization provoked
              by this method fails.</description>
					</attribute>
					<attribute name="@see">
						<description>Field#get</description>
					</attribute>
				</comment>
				<params>
					<param name="obj" comment="the object to extract the {@code boolean} value
 from" fulltype="java.lang.Object" type="Object" />
				</params>
				<exceptions>
					<exception comment="if the specified object is not
              an instance of the class or interface declaring the
              underlying field (or a subclass or implementor
              thereof), or if the field value cannot be
              converted to the type {@code boolean} by a
              widening conversion." fulltype="java.lang.IllegalArgumentException" type="IllegalArgumentException" />
					<exception comment="if the underlying field
              is inaccessible." fulltype="java.lang.IllegalAccessException" type="IllegalAccessException" />
				</exceptions>
			</method>
			<method visibility="public" name="getByte" returncomment="the value of the {@code byte} field" fulltype="byte" type="byte">
				<comment>
					<description>Gets the value of a static or instance {@code byte} field.</description>
					<attribute name="@param">
						<description>obj the object to extract the {@code byte} value
 from</description>
					</attribute>
					<attribute name="@return">
						<description>the value of the {@code byte} field</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalAccessException    if the underlying field
              is inaccessible.</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalArgumentException  if the specified object is not
              an instance of the class or interface declaring the
              underlying field (or a subclass or implementor
              thereof), or if the field value cannot be
              converted to the type {@code byte} by a
              widening conversion.</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException      if the specified object is null
              and the field is an instance field.</description>
					</attribute>
					<attribute name="@exception">
						<description>ExceptionInInitializerError if the initialization provoked
              by this method fails.</description>
					</attribute>
					<attribute name="@see">
						<description>Field#get</description>
					</attribute>
				</comment>
				<params>
					<param name="obj" comment="the object to extract the {@code byte} value
 from" fulltype="java.lang.Object" type="Object" />
				</params>
				<exceptions>
					<exception comment="if the specified object is not
              an instance of the class or interface declaring the
              underlying field (or a subclass or implementor
              thereof), or if the field value cannot be
              converted to the type {@code byte} by a
              widening conversion." fulltype="java.lang.IllegalArgumentException" type="IllegalArgumentException" />
					<exception comment="if the underlying field
              is inaccessible." fulltype="java.lang.IllegalAccessException" type="IllegalAccessException" />
				</exceptions>
			</method>
			<method visibility="public" name="getChar" returncomment="the value of the field converted to type {@code char}" fulltype="char" type="char">
				<comment>
					<description>Gets the value of a static or instance field of type
 {@code char} or of another primitive type convertible to
 type {@code char} via a widening conversion.</description>
					<attribute name="@param">
						<description>obj the object to extract the {@code char} value
 from</description>
					</attribute>
					<attribute name="@return">
						<description>the value of the field converted to type {@code char}</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalAccessException    if the underlying field
              is inaccessible.</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalArgumentException  if the specified object is not
              an instance of the class or interface declaring the
              underlying field (or a subclass or implementor
              thereof), or if the field value cannot be
              converted to the type {@code char} by a
              widening conversion.</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException      if the specified object is null
              and the field is an instance field.</description>
					</attribute>
					<attribute name="@exception">
						<description>ExceptionInInitializerError if the initialization provoked
              by this method fails.</description>
					</attribute>
					<attribute name="@see">
						<description>Field#get</description>
					</attribute>
				</comment>
				<params>
					<param name="obj" comment="the object to extract the {@code char} value
 from" fulltype="java.lang.Object" type="Object" />
				</params>
				<exceptions>
					<exception comment="if the specified object is not
              an instance of the class or interface declaring the
              underlying field (or a subclass or implementor
              thereof), or if the field value cannot be
              converted to the type {@code char} by a
              widening conversion." fulltype="java.lang.IllegalArgumentException" type="IllegalArgumentException" />
					<exception comment="if the underlying field
              is inaccessible." fulltype="java.lang.IllegalAccessException" type="IllegalAccessException" />
				</exceptions>
			</method>
			<method visibility="public" name="getShort" returncomment="the value of the field converted to type {@code short}" fulltype="short" type="short">
				<comment>
					<description>Gets the value of a static or instance field of type
 {@code short} or of another primitive type convertible to
 type {@code short} via a widening conversion.</description>
					<attribute name="@param">
						<description>obj the object to extract the {@code short} value
 from</description>
					</attribute>
					<attribute name="@return">
						<description>the value of the field converted to type {@code short}</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalAccessException    if the underlying field
              is inaccessible.</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalArgumentException  if the specified object is not
              an instance of the class or interface declaring the
              underlying field (or a subclass or implementor
              thereof), or if the field value cannot be
              converted to the type {@code short} by a
              widening conversion.</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException      if the specified object is null
              and the field is an instance field.</description>
					</attribute>
					<attribute name="@exception">
						<description>ExceptionInInitializerError if the initialization provoked
              by this method fails.</description>
					</attribute>
					<attribute name="@see">
						<description>Field#get</description>
					</attribute>
				</comment>
				<params>
					<param name="obj" comment="the object to extract the {@code short} value
 from" fulltype="java.lang.Object" type="Object" />
				</params>
				<exceptions>
					<exception comment="if the specified object is not
              an instance of the class or interface declaring the
              underlying field (or a subclass or implementor
              thereof), or if the field value cannot be
              converted to the type {@code short} by a
              widening conversion." fulltype="java.lang.IllegalArgumentException" type="IllegalArgumentException" />
					<exception comment="if the underlying field
              is inaccessible." fulltype="java.lang.IllegalAccessException" type="IllegalAccessException" />
				</exceptions>
			</method>
			<method visibility="public" name="getInt" returncomment="the value of the field converted to type {@code int}" fulltype="int" type="int">
				<comment>
					<description>Gets the value of a static or instance field of type
 {@code int} or of another primitive type convertible to
 type {@code int} via a widening conversion.</description>
					<attribute name="@param">
						<description>obj the object to extract the {@code int} value
 from</description>
					</attribute>
					<attribute name="@return">
						<description>the value of the field converted to type {@code int}</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalAccessException    if the underlying field
              is inaccessible.</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalArgumentException  if the specified object is not
              an instance of the class or interface declaring the
              underlying field (or a subclass or implementor
              thereof), or if the field value cannot be
              converted to the type {@code int} by a
              widening conversion.</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException      if the specified object is null
              and the field is an instance field.</description>
					</attribute>
					<attribute name="@exception">
						<description>ExceptionInInitializerError if the initialization provoked
              by this method fails.</description>
					</attribute>
					<attribute name="@see">
						<description>Field#get</description>
					</attribute>
				</comment>
				<params>
					<param name="obj" comment="the object to extract the {@code int} value
 from" fulltype="java.lang.Object" type="Object" />
				</params>
				<exceptions>
					<exception comment="if the specified object is not
              an instance of the class or interface declaring the
              underlying field (or a subclass or implementor
              thereof), or if the field value cannot be
              converted to the type {@code int} by a
              widening conversion." fulltype="java.lang.IllegalArgumentException" type="IllegalArgumentException" />
					<exception comment="if the underlying field
              is inaccessible." fulltype="java.lang.IllegalAccessException" type="IllegalAccessException" />
				</exceptions>
			</method>
			<method visibility="public" name="getLong" returncomment="the value of the field converted to type {@code long}" fulltype="long" type="long">
				<comment>
					<description>Gets the value of a static or instance field of type
 {@code long} or of another primitive type convertible to
 type {@code long} via a widening conversion.</description>
					<attribute name="@param">
						<description>obj the object to extract the {@code long} value
 from</description>
					</attribute>
					<attribute name="@return">
						<description>the value of the field converted to type {@code long}</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalAccessException    if the underlying field
              is inaccessible.</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalArgumentException  if the specified object is not
              an instance of the class or interface declaring the
              underlying field (or a subclass or implementor
              thereof), or if the field value cannot be
              converted to the type {@code long} by a
              widening conversion.</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException      if the specified object is null
              and the field is an instance field.</description>
					</attribute>
					<attribute name="@exception">
						<description>ExceptionInInitializerError if the initialization provoked
              by this method fails.</description>
					</attribute>
					<attribute name="@see">
						<description>Field#get</description>
					</attribute>
				</comment>
				<params>
					<param name="obj" comment="the object to extract the {@code long} value
 from" fulltype="java.lang.Object" type="Object" />
				</params>
				<exceptions>
					<exception comment="if the specified object is not
              an instance of the class or interface declaring the
              underlying field (or a subclass or implementor
              thereof), or if the field value cannot be
              converted to the type {@code long} by a
              widening conversion." fulltype="java.lang.IllegalArgumentException" type="IllegalArgumentException" />
					<exception comment="if the underlying field
              is inaccessible." fulltype="java.lang.IllegalAccessException" type="IllegalAccessException" />
				</exceptions>
			</method>
			<method visibility="public" name="getFloat" returncomment="the value of the field converted to type {@code float}" fulltype="float" type="float">
				<comment>
					<description>Gets the value of a static or instance field of type
 {@code float} or of another primitive type convertible to
 type {@code float} via a widening conversion.</description>
					<attribute name="@param">
						<description>obj the object to extract the {@code float} value
 from</description>
					</attribute>
					<attribute name="@return">
						<description>the value of the field converted to type {@code float}</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalAccessException    if the underlying field
              is inaccessible.</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalArgumentException  if the specified object is not
              an instance of the class or interface declaring the
              underlying field (or a subclass or implementor
              thereof), or if the field value cannot be
              converted to the type {@code float} by a
              widening conversion.</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException      if the specified object is null
              and the field is an instance field.</description>
					</attribute>
					<attribute name="@exception">
						<description>ExceptionInInitializerError if the initialization provoked
              by this method fails.</description>
					</attribute>
					<attribute name="@see">
						<description>Field#get</description>
					</attribute>
				</comment>
				<params>
					<param name="obj" comment="the object to extract the {@code float} value
 from" fulltype="java.lang.Object" type="Object" />
				</params>
				<exceptions>
					<exception comment="if the specified object is not
              an instance of the class or interface declaring the
              underlying field (or a subclass or implementor
              thereof), or if the field value cannot be
              converted to the type {@code float} by a
              widening conversion." fulltype="java.lang.IllegalArgumentException" type="IllegalArgumentException" />
					<exception comment="if the underlying field
              is inaccessible." fulltype="java.lang.IllegalAccessException" type="IllegalAccessException" />
				</exceptions>
			</method>
			<method visibility="public" name="getDouble" returncomment="the value of the field converted to type {@code double}" fulltype="double" type="double">
				<comment>
					<description>Gets the value of a static or instance field of type
 {@code double} or of another primitive type convertible to
 type {@code double} via a widening conversion.</description>
					<attribute name="@param">
						<description>obj the object to extract the {@code double} value
 from</description>
					</attribute>
					<attribute name="@return">
						<description>the value of the field converted to type {@code double}</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalAccessException    if the underlying field
              is inaccessible.</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalArgumentException  if the specified object is not
              an instance of the class or interface declaring the
              underlying field (or a subclass or implementor
              thereof), or if the field value cannot be
              converted to the type {@code double} by a
              widening conversion.</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException      if the specified object is null
              and the field is an instance field.</description>
					</attribute>
					<attribute name="@exception">
						<description>ExceptionInInitializerError if the initialization provoked
              by this method fails.</description>
					</attribute>
					<attribute name="@see">
						<description>Field#get</description>
					</attribute>
				</comment>
				<params>
					<param name="obj" comment="the object to extract the {@code double} value
 from" fulltype="java.lang.Object" type="Object" />
				</params>
				<exceptions>
					<exception comment="if the specified object is not
              an instance of the class or interface declaring the
              underlying field (or a subclass or implementor
              thereof), or if the field value cannot be
              converted to the type {@code double} by a
              widening conversion." fulltype="java.lang.IllegalArgumentException" type="IllegalArgumentException" />
					<exception comment="if the underlying field
              is inaccessible." fulltype="java.lang.IllegalAccessException" type="IllegalAccessException" />
				</exceptions>
			</method>
			<method visibility="public" name="set" fulltype="void" type="void">
				<comment>
					<description>Sets the field represented by this {@code Field} object on the
 specified object argument to the specified new value. The new
 value is automatically unwrapped if the underlying field has a
 primitive type.

 &lt;p&gt;The operation proceeds as follows:

 &lt;p&gt;If the underlying field is static, the {@code obj} argument is
 ignored; it may be null.

 &lt;p&gt;Otherwise the underlying field is an instance field.  If the
 specified object argument is null, the method throws a
 {@code NullPointerException}.  If the specified object argument is not
 an instance of the class or interface declaring the underlying
 field, the method throws an {@code IllegalArgumentException}.

 &lt;p&gt;If this {@code Field} object enforces Java language access control, and
 the underlying field is inaccessible, the method throws an
 {@code IllegalAccessException}.

 &lt;p&gt;If the underlying field is final, the method throws an
 {@code IllegalAccessException} unless
 {@code setAccessible(true)} has succeeded for this field
 and this field is non-static. Setting a final field in this way
 is meaningful only during deserialization or reconstruction of
 instances of classes with blank final fields, before they are
 made available for access by other parts of a program. Use in
 any other context may have unpredictable effects, including cases
 in which other parts of a program continue to use the original
 value of this field.

 &lt;p&gt;If the underlying field is of a primitive type, an unwrapping
 conversion is attempted to convert the new value to a value of
 a primitive type.  If this attempt fails, the method throws an
 {@code IllegalArgumentException}.

 &lt;p&gt;If, after possible unwrapping, the new value cannot be
 converted to the type of the underlying field by an identity or
 widening conversion, the method throws an
 {@code IllegalArgumentException}.

 &lt;p&gt;If the underlying field is static, the class that declared the
 field is initialized if it has not already been initialized.

 &lt;p&gt;The field is set to the possibly unwrapped and widened new value.

 &lt;p&gt;If the field is hidden in the type of {@code obj},
 the field&apos;s value is set according to the preceding rules.</description>
					<attribute name="@param">
						<description>obj the object whose field should be modified</description>
					</attribute>
					<attribute name="@param">
						<description>value the new value for the field of {@code obj}
 being modified</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalAccessException    if the underlying field
              is inaccessible.</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalArgumentException  if the specified object is not an
              instance of the class or interface declaring the underlying
              field (or a subclass or implementor thereof),
              or if an unwrapping conversion fails.</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException      if the specified object is null
              and the field is an instance field.</description>
					</attribute>
					<attribute name="@exception">
						<description>ExceptionInInitializerError if the initialization provoked
              by this method fails.</description>
					</attribute>
				</comment>
				<params>
					<param name="obj" comment="the object whose field should be modified" fulltype="java.lang.Object" type="Object" />
					<param name="value" comment="the new value for the field of {@code obj}
 being modified" fulltype="java.lang.Object" type="Object" />
				</params>
				<exceptions>
					<exception comment="if the specified object is not an
              instance of the class or interface declaring the underlying
              field (or a subclass or implementor thereof),
              or if an unwrapping conversion fails." fulltype="java.lang.IllegalArgumentException" type="IllegalArgumentException" />
					<exception comment="if the underlying field
              is inaccessible." fulltype="java.lang.IllegalAccessException" type="IllegalAccessException" />
				</exceptions>
			</method>
			<method visibility="public" name="setBoolean" fulltype="void" type="void">
				<comment>
					<description>Sets the value of a field as a {@code boolean} on the specified object.
 This method is equivalent to
 {@code set(obj, zObj)},
 where {@code zObj} is a {@code Boolean} object and
 {@code zObj.booleanValue() == z}.</description>
					<attribute name="@param">
						<description>obj the object whose field should be modified</description>
					</attribute>
					<attribute name="@param">
						<description>z   the new value for the field of {@code obj}
 being modified</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalAccessException    if the underlying field
              is inaccessible.</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalArgumentException  if the specified object is not an
              instance of the class or interface declaring the underlying
              field (or a subclass or implementor thereof),
              or if an unwrapping conversion fails.</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException      if the specified object is null
              and the field is an instance field.</description>
					</attribute>
					<attribute name="@exception">
						<description>ExceptionInInitializerError if the initialization provoked
              by this method fails.</description>
					</attribute>
					<attribute name="@see">
						<description>Field#set</description>
					</attribute>
				</comment>
				<params>
					<param name="obj" comment="the object whose field should be modified" fulltype="java.lang.Object" type="Object" />
					<param name="z" comment="the new value for the field of {@code obj}
 being modified" fulltype="boolean" type="boolean" />
				</params>
				<exceptions>
					<exception comment="if the specified object is not an
              instance of the class or interface declaring the underlying
              field (or a subclass or implementor thereof),
              or if an unwrapping conversion fails." fulltype="java.lang.IllegalArgumentException" type="IllegalArgumentException" />
					<exception comment="if the underlying field
              is inaccessible." fulltype="java.lang.IllegalAccessException" type="IllegalAccessException" />
				</exceptions>
			</method>
			<method visibility="public" name="setByte" fulltype="void" type="void">
				<comment>
					<description>Sets the value of a field as a {@code byte} on the specified object.
 This method is equivalent to
 {@code set(obj, bObj)},
 where {@code bObj} is a {@code Byte} object and
 {@code bObj.byteValue() == b}.</description>
					<attribute name="@param">
						<description>obj the object whose field should be modified</description>
					</attribute>
					<attribute name="@param">
						<description>b   the new value for the field of {@code obj}
 being modified</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalAccessException    if the underlying field
              is inaccessible.</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalArgumentException  if the specified object is not an
              instance of the class or interface declaring the underlying
              field (or a subclass or implementor thereof),
              or if an unwrapping conversion fails.</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException      if the specified object is null
              and the field is an instance field.</description>
					</attribute>
					<attribute name="@exception">
						<description>ExceptionInInitializerError if the initialization provoked
              by this method fails.</description>
					</attribute>
					<attribute name="@see">
						<description>Field#set</description>
					</attribute>
				</comment>
				<params>
					<param name="obj" comment="the object whose field should be modified" fulltype="java.lang.Object" type="Object" />
					<param name="b" comment="the new value for the field of {@code obj}
 being modified" fulltype="byte" type="byte" />
				</params>
				<exceptions>
					<exception comment="if the specified object is not an
              instance of the class or interface declaring the underlying
              field (or a subclass or implementor thereof),
              or if an unwrapping conversion fails." fulltype="java.lang.IllegalArgumentException" type="IllegalArgumentException" />
					<exception comment="if the underlying field
              is inaccessible." fulltype="java.lang.IllegalAccessException" type="IllegalAccessException" />
				</exceptions>
			</method>
			<method visibility="public" name="setChar" fulltype="void" type="void">
				<comment>
					<description>Sets the value of a field as a {@code char} on the specified object.
 This method is equivalent to
 {@code set(obj, cObj)},
 where {@code cObj} is a {@code Character} object and
 {@code cObj.charValue() == c}.</description>
					<attribute name="@param">
						<description>obj the object whose field should be modified</description>
					</attribute>
					<attribute name="@param">
						<description>c   the new value for the field of {@code obj}
 being modified</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalAccessException    if the underlying field
              is inaccessible.</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalArgumentException  if the specified object is not an
              instance of the class or interface declaring the underlying
              field (or a subclass or implementor thereof),
              or if an unwrapping conversion fails.</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException      if the specified object is null
              and the field is an instance field.</description>
					</attribute>
					<attribute name="@exception">
						<description>ExceptionInInitializerError if the initialization provoked
              by this method fails.</description>
					</attribute>
					<attribute name="@see">
						<description>Field#set</description>
					</attribute>
				</comment>
				<params>
					<param name="obj" comment="the object whose field should be modified" fulltype="java.lang.Object" type="Object" />
					<param name="c" comment="the new value for the field of {@code obj}
 being modified" fulltype="char" type="char" />
				</params>
				<exceptions>
					<exception comment="if the specified object is not an
              instance of the class or interface declaring the underlying
              field (or a subclass or implementor thereof),
              or if an unwrapping conversion fails." fulltype="java.lang.IllegalArgumentException" type="IllegalArgumentException" />
					<exception comment="if the underlying field
              is inaccessible." fulltype="java.lang.IllegalAccessException" type="IllegalAccessException" />
				</exceptions>
			</method>
			<method visibility="public" name="setShort" fulltype="void" type="void">
				<comment>
					<description>Sets the value of a field as a {@code short} on the specified object.
 This method is equivalent to
 {@code set(obj, sObj)},
 where {@code sObj} is a {@code Short} object and
 {@code sObj.shortValue() == s}.</description>
					<attribute name="@param">
						<description>obj the object whose field should be modified</description>
					</attribute>
					<attribute name="@param">
						<description>s   the new value for the field of {@code obj}
 being modified</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalAccessException    if the underlying field
              is inaccessible.</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalArgumentException  if the specified object is not an
              instance of the class or interface declaring the underlying
              field (or a subclass or implementor thereof),
              or if an unwrapping conversion fails.</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException      if the specified object is null
              and the field is an instance field.</description>
					</attribute>
					<attribute name="@exception">
						<description>ExceptionInInitializerError if the initialization provoked
              by this method fails.</description>
					</attribute>
					<attribute name="@see">
						<description>Field#set</description>
					</attribute>
				</comment>
				<params>
					<param name="obj" comment="the object whose field should be modified" fulltype="java.lang.Object" type="Object" />
					<param name="s" comment="the new value for the field of {@code obj}
 being modified" fulltype="short" type="short" />
				</params>
				<exceptions>
					<exception comment="if the specified object is not an
              instance of the class or interface declaring the underlying
              field (or a subclass or implementor thereof),
              or if an unwrapping conversion fails." fulltype="java.lang.IllegalArgumentException" type="IllegalArgumentException" />
					<exception comment="if the underlying field
              is inaccessible." fulltype="java.lang.IllegalAccessException" type="IllegalAccessException" />
				</exceptions>
			</method>
			<method visibility="public" name="setInt" fulltype="void" type="void">
				<comment>
					<description>Sets the value of a field as an {@code int} on the specified object.
 This method is equivalent to
 {@code set(obj, iObj)},
 where {@code iObj} is a {@code Integer} object and
 {@code iObj.intValue() == i}.</description>
					<attribute name="@param">
						<description>obj the object whose field should be modified</description>
					</attribute>
					<attribute name="@param">
						<description>i   the new value for the field of {@code obj}
 being modified</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalAccessException    if the underlying field
              is inaccessible.</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalArgumentException  if the specified object is not an
              instance of the class or interface declaring the underlying
              field (or a subclass or implementor thereof),
              or if an unwrapping conversion fails.</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException      if the specified object is null
              and the field is an instance field.</description>
					</attribute>
					<attribute name="@exception">
						<description>ExceptionInInitializerError if the initialization provoked
              by this method fails.</description>
					</attribute>
					<attribute name="@see">
						<description>Field#set</description>
					</attribute>
				</comment>
				<params>
					<param name="obj" comment="the object whose field should be modified" fulltype="java.lang.Object" type="Object" />
					<param name="i" comment="the new value for the field of {@code obj}
 being modified" fulltype="int" type="int" />
				</params>
				<exceptions>
					<exception comment="if the specified object is not an
              instance of the class or interface declaring the underlying
              field (or a subclass or implementor thereof),
              or if an unwrapping conversion fails." fulltype="java.lang.IllegalArgumentException" type="IllegalArgumentException" />
					<exception comment="if the underlying field
              is inaccessible." fulltype="java.lang.IllegalAccessException" type="IllegalAccessException" />
				</exceptions>
			</method>
			<method visibility="public" name="setLong" fulltype="void" type="void">
				<comment>
					<description>Sets the value of a field as a {@code long} on the specified object.
 This method is equivalent to
 {@code set(obj, lObj)},
 where {@code lObj} is a {@code Long} object and
 {@code lObj.longValue() == l}.</description>
					<attribute name="@param">
						<description>obj the object whose field should be modified</description>
					</attribute>
					<attribute name="@param">
						<description>l   the new value for the field of {@code obj}
 being modified</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalAccessException    if the underlying field
              is inaccessible.</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalArgumentException  if the specified object is not an
              instance of the class or interface declaring the underlying
              field (or a subclass or implementor thereof),
              or if an unwrapping conversion fails.</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException      if the specified object is null
              and the field is an instance field.</description>
					</attribute>
					<attribute name="@exception">
						<description>ExceptionInInitializerError if the initialization provoked
              by this method fails.</description>
					</attribute>
					<attribute name="@see">
						<description>Field#set</description>
					</attribute>
				</comment>
				<params>
					<param name="obj" comment="the object whose field should be modified" fulltype="java.lang.Object" type="Object" />
					<param name="l" comment="the new value for the field of {@code obj}
 being modified" fulltype="long" type="long" />
				</params>
				<exceptions>
					<exception comment="if the specified object is not an
              instance of the class or interface declaring the underlying
              field (or a subclass or implementor thereof),
              or if an unwrapping conversion fails." fulltype="java.lang.IllegalArgumentException" type="IllegalArgumentException" />
					<exception comment="if the underlying field
              is inaccessible." fulltype="java.lang.IllegalAccessException" type="IllegalAccessException" />
				</exceptions>
			</method>
			<method visibility="public" name="setFloat" fulltype="void" type="void">
				<comment>
					<description>Sets the value of a field as a {@code float} on the specified object.
 This method is equivalent to
 {@code set(obj, fObj)},
 where {@code fObj} is a {@code Float} object and
 {@code fObj.floatValue() == f}.</description>
					<attribute name="@param">
						<description>obj the object whose field should be modified</description>
					</attribute>
					<attribute name="@param">
						<description>f   the new value for the field of {@code obj}
 being modified</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalAccessException    if the underlying field
              is inaccessible.</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalArgumentException  if the specified object is not an
              instance of the class or interface declaring the underlying
              field (or a subclass or implementor thereof),
              or if an unwrapping conversion fails.</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException      if the specified object is null
              and the field is an instance field.</description>
					</attribute>
					<attribute name="@exception">
						<description>ExceptionInInitializerError if the initialization provoked
              by this method fails.</description>
					</attribute>
					<attribute name="@see">
						<description>Field#set</description>
					</attribute>
				</comment>
				<params>
					<param name="obj" comment="the object whose field should be modified" fulltype="java.lang.Object" type="Object" />
					<param name="f" comment="the new value for the field of {@code obj}
 being modified" fulltype="float" type="float" />
				</params>
				<exceptions>
					<exception comment="if the specified object is not an
              instance of the class or interface declaring the underlying
              field (or a subclass or implementor thereof),
              or if an unwrapping conversion fails." fulltype="java.lang.IllegalArgumentException" type="IllegalArgumentException" />
					<exception comment="if the underlying field
              is inaccessible." fulltype="java.lang.IllegalAccessException" type="IllegalAccessException" />
				</exceptions>
			</method>
			<method visibility="public" name="setDouble" fulltype="void" type="void">
				<comment>
					<description>Sets the value of a field as a {@code double} on the specified object.
 This method is equivalent to
 {@code set(obj, dObj)},
 where {@code dObj} is a {@code Double} object and
 {@code dObj.doubleValue() == d}.</description>
					<attribute name="@param">
						<description>obj the object whose field should be modified</description>
					</attribute>
					<attribute name="@param">
						<description>d   the new value for the field of {@code obj}
 being modified</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalAccessException    if the underlying field
              is inaccessible.</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalArgumentException  if the specified object is not an
              instance of the class or interface declaring the underlying
              field (or a subclass or implementor thereof),
              or if an unwrapping conversion fails.</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException      if the specified object is null
              and the field is an instance field.</description>
					</attribute>
					<attribute name="@exception">
						<description>ExceptionInInitializerError if the initialization provoked
              by this method fails.</description>
					</attribute>
					<attribute name="@see">
						<description>Field#set</description>
					</attribute>
				</comment>
				<params>
					<param name="obj" comment="the object whose field should be modified" fulltype="java.lang.Object" type="Object" />
					<param name="d" comment="the new value for the field of {@code obj}
 being modified" fulltype="double" type="double" />
				</params>
				<exceptions>
					<exception comment="if the specified object is not an
              instance of the class or interface declaring the underlying
              field (or a subclass or implementor thereof),
              or if an unwrapping conversion fails." fulltype="java.lang.IllegalArgumentException" type="IllegalArgumentException" />
					<exception comment="if the underlying field
              is inaccessible." fulltype="java.lang.IllegalAccessException" type="IllegalAccessException" />
				</exceptions>
			</method>
			<method visibility="private" name="getFieldAccessor" fulltype="sun.reflect.FieldAccessor" type="FieldAccessor">
				<params>
					<param name="obj" fulltype="java.lang.Object" type="Object" />
				</params>
				<exceptions>
					<exception fulltype="java.lang.IllegalAccessException" type="IllegalAccessException" />
				</exceptions>
			</method>
			<method visibility="private" name="acquireFieldAccessor" fulltype="sun.reflect.FieldAccessor" type="FieldAccessor">
				<params>
					<param name="overrideFinalCheck" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="private" name="getFieldAccessor" fulltype="sun.reflect.FieldAccessor" type="FieldAccessor">
				<params>
					<param name="overrideFinalCheck" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="private" name="setFieldAccessor" fulltype="void" type="void">
				<params>
					<param name="accessor" fulltype="sun.reflect.FieldAccessor" type="FieldAccessor" />
					<param name="overrideFinalCheck" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="private" name="doSecurityCheck" fulltype="void" type="void">
				<params>
					<param name="obj" fulltype="java.lang.Object" type="Object" />
				</params>
				<exceptions>
					<exception fulltype="java.lang.IllegalAccessException" type="IllegalAccessException" />
				</exceptions>
			</method>
			<method static="true" visibility="package-private" name="getTypeName" fulltype="java.lang.String" type="String">
				<params>
					<param name="type" fulltype="java.lang.Class" type="Class" />
				</params>
			</method>
			<method visibility="public" name="getAnnotation" fulltype="java.lang.annotation.Annotation" type="Annotation">
				<comment>
					<attribute name="@throws">
						<description>NullPointerException {@inheritDoc}</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="annotationClass" fulltype="java.lang.Class" type="Class" />
				</params>
			</method>
			<method visibility="public" name="getDeclaredAnnotations" fulltype="java.lang.annotation.Annotation[]" type="Annotation">
				<comment>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method synchronized="true" visibility="private" name="declaredAnnotations" fulltype="java.util.Map" type="Map" />
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="java.lang.reflect" interface="true" fulltype="java.lang.reflect.WildcardType" type="WildcardType">
		<implements>
			<interface fulltype="java.lang.reflect.Type" type="Type" />
		</implements>
		<comment>
			<description>WildcardType represents a wildcard type expression, such as
 {@code ?}, {@code ? extends Number}, or {@code ? super Integer}.</description>
			<attribute name="@since">
				<description>1.5</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="getUpperBounds" returncomment="an array of Types representing the upper bound(s) of this
     type variable" fulltype="java.lang.reflect.Type[]" type="Type">
				<comment>
					<description>Returns an array of {@code Type} objects representing the  upper
 bound(s) of this type variable.  Note that if no upper bound is
 explicitly declared, the upper bound is {@code Object}.

 &lt;p&gt;For each upper bound B :
 &lt;ul&gt;
  &lt;li&gt;if B is a parameterized type or a type variable, it is created,
  (see {@link java.lang.reflect.ParameterizedType ParameterizedType}
  for the details of the creation process for parameterized types).
  &lt;li&gt;Otherwise, B is resolved.
 &lt;/ul&gt;</description>
					<attribute name="@return">
						<description>an array of Types representing the upper bound(s) of this
     type variable</description>
					</attribute>
					<attribute name="@throws">
						<description>TypeNotPresentException if any of the
     bounds refers to a non-existent type declaration</description>
					</attribute>
					<attribute name="@throws">
						<description>MalformedParameterizedTypeException if any of the
     bounds refer to a parameterized type that cannot be instantiated
     for any reason</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getLowerBounds" returncomment="an array of Types representing the lower bound(s) of this
     type variable" fulltype="java.lang.reflect.Type[]" type="Type">
				<comment>
					<description>Returns an array of {@code Type} objects representing the
 lower bound(s) of this type variable.  Note that if no lower bound is
 explicitly declared, the lower bound is the type of {@code null}.
 In this case, a zero length array is returned.

 &lt;p&gt;For each lower bound B :
 &lt;ul&gt;
   &lt;li&gt;if B is a parameterized type or a type variable, it is created,
  (see {@link java.lang.reflect.ParameterizedType ParameterizedType}
  for the details of the creation process for parameterized types).
   &lt;li&gt;Otherwise, B is resolved.
 &lt;/ul&gt;</description>
					<attribute name="@return">
						<description>an array of Types representing the lower bound(s) of this
     type variable</description>
					</attribute>
					<attribute name="@throws">
						<description>TypeNotPresentException if any of the
     bounds refers to a non-existent type declaration</description>
					</attribute>
					<attribute name="@throws">
						<description>MalformedParameterizedTypeException if any of the
     bounds refer to a parameterized type that cannot be instantiated
     for any reason</description>
					</attribute>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="java.lang.reflect" interface="true" fulltype="java.lang.reflect.GenericDeclaration" type="GenericDeclaration">
		<comment>
			<description>A common interface for all entities that declare type variables.</description>
			<attribute name="@since">
				<description>1.5</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="getTypeParameters" returncomment="an array of {@code TypeVariable} objects that represent
     the type variables declared by this generic declaration" fulltype="java.lang.reflect.TypeVariable[]" type="TypeVariable">
				<comment>
					<description>Returns an array of {@code TypeVariable} objects that
 represent the type variables declared by the generic
 declaration represented by this {@code GenericDeclaration}
 object, in declaration order.  Returns an array of length 0 if
 the underlying generic declaration declares no type variables.</description>
					<attribute name="@return">
						<description>an array of {@code TypeVariable} objects that represent
     the type variables declared by this generic declaration</description>
					</attribute>
					<attribute name="@throws">
						<description>GenericSignatureFormatError if the generic
     signature of this generic declaration does not conform to
     the format specified in the Java Virtual Machine Specification,
     3rd edition</description>
					</attribute>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="java.lang.reflect" interface="true" fulltype="java.lang.reflect.AnnotatedElement" type="AnnotatedElement">
		<comment>
			<description>Represents an annotated element of the program currently running in this
 VM.  This interface allows annotations to be read reflectively.  All
 annotations returned by methods in this interface are immutable and
 serializable.  It is permissible for the caller to modify the
 arrays returned by accessors for array-valued enum members; it will
 have no affect on the arrays returned to other callers.

 &lt;p&gt;If an annotation returned by a method in this interface contains
 (directly or indirectly) a {@link Class}-valued member referring to
 a class that is not accessible in this VM, attempting to read the class
 by calling the relevant Class-returning method on the returned annotation
 will result in a {@link TypeNotPresentException}.

 &lt;p&gt;Similarly, attempting to read an enum-valued member will result in
 a {@link EnumConstantNotPresentException} if the enum constant in the
 annotation is no longer present in the enum type.

 &lt;p&gt;Finally, Attempting to read a member whose definition has evolved
 incompatibly will result in a {@link
 java.lang.annotation.AnnotationTypeMismatchException} or an
 {@link java.lang.annotation.IncompleteAnnotationException}.</description>
			<attribute name="@since">
				<description>1.5</description>
			</attribute>
			<attribute name="@author">
				<description>Josh Bloch</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="isAnnotationPresent" returncomment="true if an annotation for the specified annotation
     type is present on this element, else false" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true if an annotation for the specified type
 is present on this element, else false.  This method
 is designed primarily for convenient access to marker annotations.</description>
					<attribute name="@param">
						<description>annotationClass the Class object corresponding to the
        annotation type</description>
					</attribute>
					<attribute name="@return">
						<description>true if an annotation for the specified annotation
     type is present on this element, else false</description>
					</attribute>
					<attribute name="@throws">
						<description>NullPointerException if the given annotation class is null</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="annotationClass" comment="the Class object corresponding to the
        annotation type" fulltype="java.lang.Class" type="Class" />
				</params>
			</method>
			<method visibility="public" name="getAnnotation" returncomment="this element&apos;s annotation for the specified annotation type if
     present on this element, else null" fulltype="java.lang.annotation.Annotation" type="Annotation">
				<comment>
					<description>Returns this element&apos;s annotation for the specified type if
 such an annotation is present, else null.</description>
					<attribute name="@param">
						<description>annotationClass the Class object corresponding to the
        annotation type</description>
					</attribute>
					<attribute name="@return">
						<description>this element&apos;s annotation for the specified annotation type if
     present on this element, else null</description>
					</attribute>
					<attribute name="@throws">
						<description>NullPointerException if the given annotation class is null</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="annotationClass" comment="the Class object corresponding to the
        annotation type" fulltype="java.lang.Class" type="Class" />
				</params>
			</method>
			<method visibility="public" name="getAnnotations" returncomment="all annotations present on this element" fulltype="java.lang.annotation.Annotation[]" type="Annotation">
				<comment>
					<description>Returns all annotations present on this element.  (Returns an array
 of length zero if this element has no annotations.)  The caller of
 this method is free to modify the returned array; it will have no
 effect on the arrays returned to other callers.</description>
					<attribute name="@return">
						<description>all annotations present on this element</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getDeclaredAnnotations" returncomment="All annotations directly present on this element" fulltype="java.lang.annotation.Annotation[]" type="Annotation">
				<comment>
					<description>Returns all annotations that are directly present on this
 element.  Unlike the other methods in this interface, this method
 ignores inherited annotations.  (Returns an array of length zero if
 no annotations are directly present on this element.)  The caller of
 this method is free to modify the returned array; it will have no
 effect on the arrays returned to other callers.</description>
					<attribute name="@return">
						<description>All annotations directly present on this element</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass final="true" superclass="Object" visibility="public" package="java.lang.reflect" superclassfulltype="java.lang.Object" fulltype="java.lang.reflect.Array" type="Array">
		<comment>
			<description>The {@code Array} class provides static methods to dynamically create and
 access Java arrays.

 &lt;p&gt;{@code Array} permits widening conversions to occur during a get or set
 operation, but throws an {@code IllegalArgumentException} if a narrowing
 conversion would occur.</description>
			<attribute name="@author">
				<description>Nakul Saraiya</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="private" name="Array">
				<comment>
					<description>Constructor.  Class Array is not instantiable.</description>
				</comment>
			</constructor>
			<method static="true" visibility="public" name="newInstance" returncomment="the new array" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Creates a new array with the specified component type and
 length.
 Invoking this method is equivalent to creating an array
 as follows:
 &lt;blockquote&gt;
 &lt;pre&gt;
 int[] x = {length};
 Array.newInstance(componentType, x);
 &lt;/pre&gt;
 &lt;/blockquote&gt;</description>
					<attribute name="@param">
						<description>componentType the {@code Class} object representing the
 component type of the new array</description>
					</attribute>
					<attribute name="@param">
						<description>length the length of the new array</description>
					</attribute>
					<attribute name="@return">
						<description>the new array</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException if the specified
 {@code componentType} parameter is null</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalArgumentException if componentType is {@link Void#TYPE}</description>
					</attribute>
					<attribute name="@exception">
						<description>NegativeArraySizeException if the specified {@code length}
 is negative</description>
					</attribute>
				</comment>
				<params>
					<param name="componentType" comment="the {@code Class} object representing the
 component type of the new array" fulltype="java.lang.Class" type="Class" />
					<param name="length" comment="the length of the new array" fulltype="int" type="int" />
				</params>
				<exceptions>
					<exception comment="if the specified {@code length}
 is negative" fulltype="java.lang.NegativeArraySizeException" type="NegativeArraySizeException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="newInstance" returncomment="the new array" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Creates a new array
 with the specified component type and dimensions.
 If {@code componentType}
 represents a non-array class or interface, the new array
 has {@code dimensions.length} dimensions and
 {@code componentType} as its component type. If
 {@code componentType} represents an array class, the
 number of dimensions of the new array is equal to the sum
 of {@code dimensions.length} and the number of
 dimensions of {@code componentType}. In this case, the
 component type of the new array is the component type of
 {@code componentType}.

 &lt;p&gt;The number of dimensions of the new array must not
 exceed the number of array dimensions supported by the
 implementation (typically 255).</description>
					<attribute name="@param">
						<description>componentType the {@code Class} object representing the component
 type of the new array</description>
					</attribute>
					<attribute name="@param">
						<description>dimensions an array of {@code int} representing the dimensions of
 the new array</description>
					</attribute>
					<attribute name="@return">
						<description>the new array</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException if the specified
 {@code componentType} argument is null</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalArgumentException if the specified {@code dimensions}
 argument is a zero-dimensional array, or if the number of
 requested dimensions exceeds the limit on the number of array dimensions
 supported by the implementation (typically 255), or if componentType
 is {@link Void#TYPE}.</description>
					</attribute>
					<attribute name="@exception">
						<description>NegativeArraySizeException if any of the components in
 the specified {@code dimensions} argument is negative.</description>
					</attribute>
				</comment>
				<params>
					<param name="componentType" comment="the {@code Class} object representing the component
 type of the new array" fulltype="java.lang.Class" type="Class" />
					<param name="dimensions" comment="an array of {@code int} representing the dimensions of
 the new array" fulltype="int[]" type="int" />
				</params>
				<exceptions>
					<exception comment="if the specified {@code dimensions}
 argument is a zero-dimensional array, or if the number of
 requested dimensions exceeds the limit on the number of array dimensions
 supported by the implementation (typically 255), or if componentType
 is {@link Void#TYPE}." fulltype="java.lang.IllegalArgumentException" type="IllegalArgumentException" />
					<exception comment="if any of the components in
 the specified {@code dimensions} argument is negative." fulltype="java.lang.NegativeArraySizeException" type="NegativeArraySizeException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="getLength" returncomment="the length of the array" fulltype="int" type="int">
				<comment>
					<description>Returns the length of the specified array object, as an {@code int}.</description>
					<attribute name="@param">
						<description>array the array</description>
					</attribute>
					<attribute name="@return">
						<description>the length of the array</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalArgumentException if the object argument is not
 an array</description>
					</attribute>
				</comment>
				<params>
					<param name="array" comment="the array" fulltype="java.lang.Object" type="Object" />
				</params>
				<exceptions>
					<exception comment="if the object argument is not
 an array" fulltype="java.lang.IllegalArgumentException" type="IllegalArgumentException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="get" returncomment="the (possibly wrapped) value of the indexed component in
 the specified array" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Returns the value of the indexed component in the specified
 array object.  The value is automatically wrapped in an object
 if it has a primitive type.</description>
					<attribute name="@param">
						<description>array the array</description>
					</attribute>
					<attribute name="@param">
						<description>index the index</description>
					</attribute>
					<attribute name="@return">
						<description>the (possibly wrapped) value of the indexed component in
 the specified array</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException If the specified object is null</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalArgumentException If the specified object is not
 an array</description>
					</attribute>
					<attribute name="@exception">
						<description>ArrayIndexOutOfBoundsException If the specified {@code index}
 argument is negative, or if it is greater than or equal to the
 length of the specified array</description>
					</attribute>
				</comment>
				<params>
					<param name="array" comment="the array" fulltype="java.lang.Object" type="Object" />
					<param name="index" comment="the index" fulltype="int" type="int" />
				</params>
				<exceptions>
					<exception comment="If the specified object is not
 an array" fulltype="java.lang.IllegalArgumentException" type="IllegalArgumentException" />
					<exception comment="If the specified {@code index}
 argument is negative, or if it is greater than or equal to the
 length of the specified array" fulltype="java.lang.ArrayIndexOutOfBoundsException" type="ArrayIndexOutOfBoundsException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="getBoolean" returncomment="the value of the indexed component in the specified array" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns the value of the indexed component in the specified
 array object, as a {@code boolean}.</description>
					<attribute name="@param">
						<description>array the array</description>
					</attribute>
					<attribute name="@param">
						<description>index the index</description>
					</attribute>
					<attribute name="@return">
						<description>the value of the indexed component in the specified array</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException If the specified object is null</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalArgumentException If the specified object is not
 an array, or if the indexed element cannot be converted to the
 return type by an identity or widening conversion</description>
					</attribute>
					<attribute name="@exception">
						<description>ArrayIndexOutOfBoundsException If the specified {@code index}
 argument is negative, or if it is greater than or equal to the
 length of the specified array</description>
					</attribute>
					<attribute name="@see">
						<description>Array#get</description>
					</attribute>
				</comment>
				<params>
					<param name="array" comment="the array" fulltype="java.lang.Object" type="Object" />
					<param name="index" comment="the index" fulltype="int" type="int" />
				</params>
				<exceptions>
					<exception comment="If the specified object is not
 an array, or if the indexed element cannot be converted to the
 return type by an identity or widening conversion" fulltype="java.lang.IllegalArgumentException" type="IllegalArgumentException" />
					<exception comment="If the specified {@code index}
 argument is negative, or if it is greater than or equal to the
 length of the specified array" fulltype="java.lang.ArrayIndexOutOfBoundsException" type="ArrayIndexOutOfBoundsException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="getByte" returncomment="the value of the indexed component in the specified array" fulltype="byte" type="byte">
				<comment>
					<description>Returns the value of the indexed component in the specified
 array object, as a {@code byte}.</description>
					<attribute name="@param">
						<description>array the array</description>
					</attribute>
					<attribute name="@param">
						<description>index the index</description>
					</attribute>
					<attribute name="@return">
						<description>the value of the indexed component in the specified array</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException If the specified object is null</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalArgumentException If the specified object is not
 an array, or if the indexed element cannot be converted to the
 return type by an identity or widening conversion</description>
					</attribute>
					<attribute name="@exception">
						<description>ArrayIndexOutOfBoundsException If the specified {@code index}
 argument is negative, or if it is greater than or equal to the
 length of the specified array</description>
					</attribute>
					<attribute name="@see">
						<description>Array#get</description>
					</attribute>
				</comment>
				<params>
					<param name="array" comment="the array" fulltype="java.lang.Object" type="Object" />
					<param name="index" comment="the index" fulltype="int" type="int" />
				</params>
				<exceptions>
					<exception comment="If the specified object is not
 an array, or if the indexed element cannot be converted to the
 return type by an identity or widening conversion" fulltype="java.lang.IllegalArgumentException" type="IllegalArgumentException" />
					<exception comment="If the specified {@code index}
 argument is negative, or if it is greater than or equal to the
 length of the specified array" fulltype="java.lang.ArrayIndexOutOfBoundsException" type="ArrayIndexOutOfBoundsException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="getChar" returncomment="the value of the indexed component in the specified array" fulltype="char" type="char">
				<comment>
					<description>Returns the value of the indexed component in the specified
 array object, as a {@code char}.</description>
					<attribute name="@param">
						<description>array the array</description>
					</attribute>
					<attribute name="@param">
						<description>index the index</description>
					</attribute>
					<attribute name="@return">
						<description>the value of the indexed component in the specified array</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException If the specified object is null</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalArgumentException If the specified object is not
 an array, or if the indexed element cannot be converted to the
 return type by an identity or widening conversion</description>
					</attribute>
					<attribute name="@exception">
						<description>ArrayIndexOutOfBoundsException If the specified {@code index}
 argument is negative, or if it is greater than or equal to the
 length of the specified array</description>
					</attribute>
					<attribute name="@see">
						<description>Array#get</description>
					</attribute>
				</comment>
				<params>
					<param name="array" comment="the array" fulltype="java.lang.Object" type="Object" />
					<param name="index" comment="the index" fulltype="int" type="int" />
				</params>
				<exceptions>
					<exception comment="If the specified object is not
 an array, or if the indexed element cannot be converted to the
 return type by an identity or widening conversion" fulltype="java.lang.IllegalArgumentException" type="IllegalArgumentException" />
					<exception comment="If the specified {@code index}
 argument is negative, or if it is greater than or equal to the
 length of the specified array" fulltype="java.lang.ArrayIndexOutOfBoundsException" type="ArrayIndexOutOfBoundsException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="getShort" returncomment="the value of the indexed component in the specified array" fulltype="short" type="short">
				<comment>
					<description>Returns the value of the indexed component in the specified
 array object, as a {@code short}.</description>
					<attribute name="@param">
						<description>array the array</description>
					</attribute>
					<attribute name="@param">
						<description>index the index</description>
					</attribute>
					<attribute name="@return">
						<description>the value of the indexed component in the specified array</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException If the specified object is null</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalArgumentException If the specified object is not
 an array, or if the indexed element cannot be converted to the
 return type by an identity or widening conversion</description>
					</attribute>
					<attribute name="@exception">
						<description>ArrayIndexOutOfBoundsException If the specified {@code index}
 argument is negative, or if it is greater than or equal to the
 length of the specified array</description>
					</attribute>
					<attribute name="@see">
						<description>Array#get</description>
					</attribute>
				</comment>
				<params>
					<param name="array" comment="the array" fulltype="java.lang.Object" type="Object" />
					<param name="index" comment="the index" fulltype="int" type="int" />
				</params>
				<exceptions>
					<exception comment="If the specified object is not
 an array, or if the indexed element cannot be converted to the
 return type by an identity or widening conversion" fulltype="java.lang.IllegalArgumentException" type="IllegalArgumentException" />
					<exception comment="If the specified {@code index}
 argument is negative, or if it is greater than or equal to the
 length of the specified array" fulltype="java.lang.ArrayIndexOutOfBoundsException" type="ArrayIndexOutOfBoundsException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="getInt" returncomment="the value of the indexed component in the specified array" fulltype="int" type="int">
				<comment>
					<description>Returns the value of the indexed component in the specified
 array object, as an {@code int}.</description>
					<attribute name="@param">
						<description>array the array</description>
					</attribute>
					<attribute name="@param">
						<description>index the index</description>
					</attribute>
					<attribute name="@return">
						<description>the value of the indexed component in the specified array</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException If the specified object is null</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalArgumentException If the specified object is not
 an array, or if the indexed element cannot be converted to the
 return type by an identity or widening conversion</description>
					</attribute>
					<attribute name="@exception">
						<description>ArrayIndexOutOfBoundsException If the specified {@code index}
 argument is negative, or if it is greater than or equal to the
 length of the specified array</description>
					</attribute>
					<attribute name="@see">
						<description>Array#get</description>
					</attribute>
				</comment>
				<params>
					<param name="array" comment="the array" fulltype="java.lang.Object" type="Object" />
					<param name="index" comment="the index" fulltype="int" type="int" />
				</params>
				<exceptions>
					<exception comment="If the specified object is not
 an array, or if the indexed element cannot be converted to the
 return type by an identity or widening conversion" fulltype="java.lang.IllegalArgumentException" type="IllegalArgumentException" />
					<exception comment="If the specified {@code index}
 argument is negative, or if it is greater than or equal to the
 length of the specified array" fulltype="java.lang.ArrayIndexOutOfBoundsException" type="ArrayIndexOutOfBoundsException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="getLong" returncomment="the value of the indexed component in the specified array" fulltype="long" type="long">
				<comment>
					<description>Returns the value of the indexed component in the specified
 array object, as a {@code long}.</description>
					<attribute name="@param">
						<description>array the array</description>
					</attribute>
					<attribute name="@param">
						<description>index the index</description>
					</attribute>
					<attribute name="@return">
						<description>the value of the indexed component in the specified array</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException If the specified object is null</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalArgumentException If the specified object is not
 an array, or if the indexed element cannot be converted to the
 return type by an identity or widening conversion</description>
					</attribute>
					<attribute name="@exception">
						<description>ArrayIndexOutOfBoundsException If the specified {@code index}
 argument is negative, or if it is greater than or equal to the
 length of the specified array</description>
					</attribute>
					<attribute name="@see">
						<description>Array#get</description>
					</attribute>
				</comment>
				<params>
					<param name="array" comment="the array" fulltype="java.lang.Object" type="Object" />
					<param name="index" comment="the index" fulltype="int" type="int" />
				</params>
				<exceptions>
					<exception comment="If the specified object is not
 an array, or if the indexed element cannot be converted to the
 return type by an identity or widening conversion" fulltype="java.lang.IllegalArgumentException" type="IllegalArgumentException" />
					<exception comment="If the specified {@code index}
 argument is negative, or if it is greater than or equal to the
 length of the specified array" fulltype="java.lang.ArrayIndexOutOfBoundsException" type="ArrayIndexOutOfBoundsException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="getFloat" returncomment="the value of the indexed component in the specified array" fulltype="float" type="float">
				<comment>
					<description>Returns the value of the indexed component in the specified
 array object, as a {@code float}.</description>
					<attribute name="@param">
						<description>array the array</description>
					</attribute>
					<attribute name="@param">
						<description>index the index</description>
					</attribute>
					<attribute name="@return">
						<description>the value of the indexed component in the specified array</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException If the specified object is null</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalArgumentException If the specified object is not
 an array, or if the indexed element cannot be converted to the
 return type by an identity or widening conversion</description>
					</attribute>
					<attribute name="@exception">
						<description>ArrayIndexOutOfBoundsException If the specified {@code index}
 argument is negative, or if it is greater than or equal to the
 length of the specified array</description>
					</attribute>
					<attribute name="@see">
						<description>Array#get</description>
					</attribute>
				</comment>
				<params>
					<param name="array" comment="the array" fulltype="java.lang.Object" type="Object" />
					<param name="index" comment="the index" fulltype="int" type="int" />
				</params>
				<exceptions>
					<exception comment="If the specified object is not
 an array, or if the indexed element cannot be converted to the
 return type by an identity or widening conversion" fulltype="java.lang.IllegalArgumentException" type="IllegalArgumentException" />
					<exception comment="If the specified {@code index}
 argument is negative, or if it is greater than or equal to the
 length of the specified array" fulltype="java.lang.ArrayIndexOutOfBoundsException" type="ArrayIndexOutOfBoundsException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="getDouble" returncomment="the value of the indexed component in the specified array" fulltype="double" type="double">
				<comment>
					<description>Returns the value of the indexed component in the specified
 array object, as a {@code double}.</description>
					<attribute name="@param">
						<description>array the array</description>
					</attribute>
					<attribute name="@param">
						<description>index the index</description>
					</attribute>
					<attribute name="@return">
						<description>the value of the indexed component in the specified array</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException If the specified object is null</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalArgumentException If the specified object is not
 an array, or if the indexed element cannot be converted to the
 return type by an identity or widening conversion</description>
					</attribute>
					<attribute name="@exception">
						<description>ArrayIndexOutOfBoundsException If the specified {@code index}
 argument is negative, or if it is greater than or equal to the
 length of the specified array</description>
					</attribute>
					<attribute name="@see">
						<description>Array#get</description>
					</attribute>
				</comment>
				<params>
					<param name="array" comment="the array" fulltype="java.lang.Object" type="Object" />
					<param name="index" comment="the index" fulltype="int" type="int" />
				</params>
				<exceptions>
					<exception comment="If the specified object is not
 an array, or if the indexed element cannot be converted to the
 return type by an identity or widening conversion" fulltype="java.lang.IllegalArgumentException" type="IllegalArgumentException" />
					<exception comment="If the specified {@code index}
 argument is negative, or if it is greater than or equal to the
 length of the specified array" fulltype="java.lang.ArrayIndexOutOfBoundsException" type="ArrayIndexOutOfBoundsException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="set" fulltype="void" type="void">
				<comment>
					<description>Sets the value of the indexed component of the specified array
 object to the specified new value.  The new value is first
 automatically unwrapped if the array has a primitive component
 type.</description>
					<attribute name="@param">
						<description>array the array</description>
					</attribute>
					<attribute name="@param">
						<description>index the index into the array</description>
					</attribute>
					<attribute name="@param">
						<description>value the new value of the indexed component</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException If the specified object argument
 is null</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalArgumentException If the specified object argument
 is not an array, or if the array component type is primitive and
 an unwrapping conversion fails</description>
					</attribute>
					<attribute name="@exception">
						<description>ArrayIndexOutOfBoundsException If the specified {@code index}
 argument is negative, or if it is greater than or equal to
 the length of the specified array</description>
					</attribute>
				</comment>
				<params>
					<param name="array" comment="the array" fulltype="java.lang.Object" type="Object" />
					<param name="index" comment="the index into the array" fulltype="int" type="int" />
					<param name="value" comment="the new value of the indexed component" fulltype="java.lang.Object" type="Object" />
				</params>
				<exceptions>
					<exception comment="If the specified object argument
 is not an array, or if the array component type is primitive and
 an unwrapping conversion fails" fulltype="java.lang.IllegalArgumentException" type="IllegalArgumentException" />
					<exception comment="If the specified {@code index}
 argument is negative, or if it is greater than or equal to
 the length of the specified array" fulltype="java.lang.ArrayIndexOutOfBoundsException" type="ArrayIndexOutOfBoundsException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="setBoolean" fulltype="void" type="void">
				<comment>
					<description>Sets the value of the indexed component of the specified array
 object to the specified {@code boolean} value.</description>
					<attribute name="@param">
						<description>array the array</description>
					</attribute>
					<attribute name="@param">
						<description>index the index into the array</description>
					</attribute>
					<attribute name="@param">
						<description>z the new value of the indexed component</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException If the specified object argument
 is null</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalArgumentException If the specified object argument
 is not an array, or if the specified value cannot be converted
 to the underlying array&apos;s component type by an identity or a
 primitive widening conversion</description>
					</attribute>
					<attribute name="@exception">
						<description>ArrayIndexOutOfBoundsException If the specified {@code index}
 argument is negative, or if it is greater than or equal to
 the length of the specified array</description>
					</attribute>
					<attribute name="@see">
						<description>Array#set</description>
					</attribute>
				</comment>
				<params>
					<param name="array" comment="the array" fulltype="java.lang.Object" type="Object" />
					<param name="index" comment="the index into the array" fulltype="int" type="int" />
					<param name="z" comment="the new value of the indexed component" fulltype="boolean" type="boolean" />
				</params>
				<exceptions>
					<exception comment="If the specified object argument
 is not an array, or if the specified value cannot be converted
 to the underlying array&apos;s component type by an identity or a
 primitive widening conversion" fulltype="java.lang.IllegalArgumentException" type="IllegalArgumentException" />
					<exception comment="If the specified {@code index}
 argument is negative, or if it is greater than or equal to
 the length of the specified array" fulltype="java.lang.ArrayIndexOutOfBoundsException" type="ArrayIndexOutOfBoundsException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="setByte" fulltype="void" type="void">
				<comment>
					<description>Sets the value of the indexed component of the specified array
 object to the specified {@code byte} value.</description>
					<attribute name="@param">
						<description>array the array</description>
					</attribute>
					<attribute name="@param">
						<description>index the index into the array</description>
					</attribute>
					<attribute name="@param">
						<description>b the new value of the indexed component</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException If the specified object argument
 is null</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalArgumentException If the specified object argument
 is not an array, or if the specified value cannot be converted
 to the underlying array&apos;s component type by an identity or a
 primitive widening conversion</description>
					</attribute>
					<attribute name="@exception">
						<description>ArrayIndexOutOfBoundsException If the specified {@code index}
 argument is negative, or if it is greater than or equal to
 the length of the specified array</description>
					</attribute>
					<attribute name="@see">
						<description>Array#set</description>
					</attribute>
				</comment>
				<params>
					<param name="array" comment="the array" fulltype="java.lang.Object" type="Object" />
					<param name="index" comment="the index into the array" fulltype="int" type="int" />
					<param name="b" comment="the new value of the indexed component" fulltype="byte" type="byte" />
				</params>
				<exceptions>
					<exception comment="If the specified object argument
 is not an array, or if the specified value cannot be converted
 to the underlying array&apos;s component type by an identity or a
 primitive widening conversion" fulltype="java.lang.IllegalArgumentException" type="IllegalArgumentException" />
					<exception comment="If the specified {@code index}
 argument is negative, or if it is greater than or equal to
 the length of the specified array" fulltype="java.lang.ArrayIndexOutOfBoundsException" type="ArrayIndexOutOfBoundsException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="setChar" fulltype="void" type="void">
				<comment>
					<description>Sets the value of the indexed component of the specified array
 object to the specified {@code char} value.</description>
					<attribute name="@param">
						<description>array the array</description>
					</attribute>
					<attribute name="@param">
						<description>index the index into the array</description>
					</attribute>
					<attribute name="@param">
						<description>c the new value of the indexed component</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException If the specified object argument
 is null</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalArgumentException If the specified object argument
 is not an array, or if the specified value cannot be converted
 to the underlying array&apos;s component type by an identity or a
 primitive widening conversion</description>
					</attribute>
					<attribute name="@exception">
						<description>ArrayIndexOutOfBoundsException If the specified {@code index}
 argument is negative, or if it is greater than or equal to
 the length of the specified array</description>
					</attribute>
					<attribute name="@see">
						<description>Array#set</description>
					</attribute>
				</comment>
				<params>
					<param name="array" comment="the array" fulltype="java.lang.Object" type="Object" />
					<param name="index" comment="the index into the array" fulltype="int" type="int" />
					<param name="c" comment="the new value of the indexed component" fulltype="char" type="char" />
				</params>
				<exceptions>
					<exception comment="If the specified object argument
 is not an array, or if the specified value cannot be converted
 to the underlying array&apos;s component type by an identity or a
 primitive widening conversion" fulltype="java.lang.IllegalArgumentException" type="IllegalArgumentException" />
					<exception comment="If the specified {@code index}
 argument is negative, or if it is greater than or equal to
 the length of the specified array" fulltype="java.lang.ArrayIndexOutOfBoundsException" type="ArrayIndexOutOfBoundsException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="setShort" fulltype="void" type="void">
				<comment>
					<description>Sets the value of the indexed component of the specified array
 object to the specified {@code short} value.</description>
					<attribute name="@param">
						<description>array the array</description>
					</attribute>
					<attribute name="@param">
						<description>index the index into the array</description>
					</attribute>
					<attribute name="@param">
						<description>s the new value of the indexed component</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException If the specified object argument
 is null</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalArgumentException If the specified object argument
 is not an array, or if the specified value cannot be converted
 to the underlying array&apos;s component type by an identity or a
 primitive widening conversion</description>
					</attribute>
					<attribute name="@exception">
						<description>ArrayIndexOutOfBoundsException If the specified {@code index}
 argument is negative, or if it is greater than or equal to
 the length of the specified array</description>
					</attribute>
					<attribute name="@see">
						<description>Array#set</description>
					</attribute>
				</comment>
				<params>
					<param name="array" comment="the array" fulltype="java.lang.Object" type="Object" />
					<param name="index" comment="the index into the array" fulltype="int" type="int" />
					<param name="s" comment="the new value of the indexed component" fulltype="short" type="short" />
				</params>
				<exceptions>
					<exception comment="If the specified object argument
 is not an array, or if the specified value cannot be converted
 to the underlying array&apos;s component type by an identity or a
 primitive widening conversion" fulltype="java.lang.IllegalArgumentException" type="IllegalArgumentException" />
					<exception comment="If the specified {@code index}
 argument is negative, or if it is greater than or equal to
 the length of the specified array" fulltype="java.lang.ArrayIndexOutOfBoundsException" type="ArrayIndexOutOfBoundsException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="setInt" fulltype="void" type="void">
				<comment>
					<description>Sets the value of the indexed component of the specified array
 object to the specified {@code int} value.</description>
					<attribute name="@param">
						<description>array the array</description>
					</attribute>
					<attribute name="@param">
						<description>index the index into the array</description>
					</attribute>
					<attribute name="@param">
						<description>i the new value of the indexed component</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException If the specified object argument
 is null</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalArgumentException If the specified object argument
 is not an array, or if the specified value cannot be converted
 to the underlying array&apos;s component type by an identity or a
 primitive widening conversion</description>
					</attribute>
					<attribute name="@exception">
						<description>ArrayIndexOutOfBoundsException If the specified {@code index}
 argument is negative, or if it is greater than or equal to
 the length of the specified array</description>
					</attribute>
					<attribute name="@see">
						<description>Array#set</description>
					</attribute>
				</comment>
				<params>
					<param name="array" comment="the array" fulltype="java.lang.Object" type="Object" />
					<param name="index" comment="the index into the array" fulltype="int" type="int" />
					<param name="i" comment="the new value of the indexed component" fulltype="int" type="int" />
				</params>
				<exceptions>
					<exception comment="If the specified object argument
 is not an array, or if the specified value cannot be converted
 to the underlying array&apos;s component type by an identity or a
 primitive widening conversion" fulltype="java.lang.IllegalArgumentException" type="IllegalArgumentException" />
					<exception comment="If the specified {@code index}
 argument is negative, or if it is greater than or equal to
 the length of the specified array" fulltype="java.lang.ArrayIndexOutOfBoundsException" type="ArrayIndexOutOfBoundsException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="setLong" fulltype="void" type="void">
				<comment>
					<description>Sets the value of the indexed component of the specified array
 object to the specified {@code long} value.</description>
					<attribute name="@param">
						<description>array the array</description>
					</attribute>
					<attribute name="@param">
						<description>index the index into the array</description>
					</attribute>
					<attribute name="@param">
						<description>l the new value of the indexed component</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException If the specified object argument
 is null</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalArgumentException If the specified object argument
 is not an array, or if the specified value cannot be converted
 to the underlying array&apos;s component type by an identity or a
 primitive widening conversion</description>
					</attribute>
					<attribute name="@exception">
						<description>ArrayIndexOutOfBoundsException If the specified {@code index}
 argument is negative, or if it is greater than or equal to
 the length of the specified array</description>
					</attribute>
					<attribute name="@see">
						<description>Array#set</description>
					</attribute>
				</comment>
				<params>
					<param name="array" comment="the array" fulltype="java.lang.Object" type="Object" />
					<param name="index" comment="the index into the array" fulltype="int" type="int" />
					<param name="l" comment="the new value of the indexed component" fulltype="long" type="long" />
				</params>
				<exceptions>
					<exception comment="If the specified object argument
 is not an array, or if the specified value cannot be converted
 to the underlying array&apos;s component type by an identity or a
 primitive widening conversion" fulltype="java.lang.IllegalArgumentException" type="IllegalArgumentException" />
					<exception comment="If the specified {@code index}
 argument is negative, or if it is greater than or equal to
 the length of the specified array" fulltype="java.lang.ArrayIndexOutOfBoundsException" type="ArrayIndexOutOfBoundsException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="setFloat" fulltype="void" type="void">
				<comment>
					<description>Sets the value of the indexed component of the specified array
 object to the specified {@code float} value.</description>
					<attribute name="@param">
						<description>array the array</description>
					</attribute>
					<attribute name="@param">
						<description>index the index into the array</description>
					</attribute>
					<attribute name="@param">
						<description>f the new value of the indexed component</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException If the specified object argument
 is null</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalArgumentException If the specified object argument
 is not an array, or if the specified value cannot be converted
 to the underlying array&apos;s component type by an identity or a
 primitive widening conversion</description>
					</attribute>
					<attribute name="@exception">
						<description>ArrayIndexOutOfBoundsException If the specified {@code index}
 argument is negative, or if it is greater than or equal to
 the length of the specified array</description>
					</attribute>
					<attribute name="@see">
						<description>Array#set</description>
					</attribute>
				</comment>
				<params>
					<param name="array" comment="the array" fulltype="java.lang.Object" type="Object" />
					<param name="index" comment="the index into the array" fulltype="int" type="int" />
					<param name="f" comment="the new value of the indexed component" fulltype="float" type="float" />
				</params>
				<exceptions>
					<exception comment="If the specified object argument
 is not an array, or if the specified value cannot be converted
 to the underlying array&apos;s component type by an identity or a
 primitive widening conversion" fulltype="java.lang.IllegalArgumentException" type="IllegalArgumentException" />
					<exception comment="If the specified {@code index}
 argument is negative, or if it is greater than or equal to
 the length of the specified array" fulltype="java.lang.ArrayIndexOutOfBoundsException" type="ArrayIndexOutOfBoundsException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="setDouble" fulltype="void" type="void">
				<comment>
					<description>Sets the value of the indexed component of the specified array
 object to the specified {@code double} value.</description>
					<attribute name="@param">
						<description>array the array</description>
					</attribute>
					<attribute name="@param">
						<description>index the index into the array</description>
					</attribute>
					<attribute name="@param">
						<description>d the new value of the indexed component</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException If the specified object argument
 is null</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalArgumentException If the specified object argument
 is not an array, or if the specified value cannot be converted
 to the underlying array&apos;s component type by an identity or a
 primitive widening conversion</description>
					</attribute>
					<attribute name="@exception">
						<description>ArrayIndexOutOfBoundsException If the specified {@code index}
 argument is negative, or if it is greater than or equal to
 the length of the specified array</description>
					</attribute>
					<attribute name="@see">
						<description>Array#set</description>
					</attribute>
				</comment>
				<params>
					<param name="array" comment="the array" fulltype="java.lang.Object" type="Object" />
					<param name="index" comment="the index into the array" fulltype="int" type="int" />
					<param name="d" comment="the new value of the indexed component" fulltype="double" type="double" />
				</params>
				<exceptions>
					<exception comment="If the specified object argument
 is not an array, or if the specified value cannot be converted
 to the underlying array&apos;s component type by an identity or a
 primitive widening conversion" fulltype="java.lang.IllegalArgumentException" type="IllegalArgumentException" />
					<exception comment="If the specified {@code index}
 argument is negative, or if it is greater than or equal to
 the length of the specified array" fulltype="java.lang.ArrayIndexOutOfBoundsException" type="ArrayIndexOutOfBoundsException" />
				</exceptions>
			</method>
			<method static="true" visibility="private" name="newArray" fulltype="java.lang.Object" type="Object">
				<params>
					<param name="componentType" fulltype="java.lang.Class" type="Class" />
					<param name="length" fulltype="int" type="int" />
				</params>
				<exceptions>
					<exception fulltype="java.lang.NegativeArraySizeException" type="NegativeArraySizeException" />
				</exceptions>
			</method>
			<method static="true" visibility="private" name="multiNewArray" fulltype="java.lang.Object" type="Object">
				<params>
					<param name="componentType" fulltype="java.lang.Class" type="Class" />
					<param name="dimensions" fulltype="int[]" type="int" />
				</params>
				<exceptions>
					<exception fulltype="java.lang.IllegalArgumentException" type="IllegalArgumentException" />
					<exception fulltype="java.lang.NegativeArraySizeException" type="NegativeArraySizeException" />
				</exceptions>
			</method>
		</methods>
	</jelclass>
	<jelclass final="true" superclass="AccessibleObject" visibility="public" package="java.lang.reflect" superclassfulltype="java.lang.reflect.AccessibleObject" fulltype="java.lang.reflect.Constructor" type="Constructor">
		<implements>
			<interface fulltype="java.lang.reflect.GenericDeclaration" type="GenericDeclaration" />
			<interface fulltype="java.lang.reflect.Member" type="Member" />
		</implements>
		<comment>
			<description>{@code Constructor} provides information about, and access to, a single
 constructor for a class.

 &lt;p&gt;{@code Constructor} permits widening conversions to occur when matching the
 actual parameters to newInstance() with the underlying
 constructor&apos;s formal parameters, but throws an
 {@code IllegalArgumentException} if a narrowing conversion would occur.</description>
			<attribute name="@param">
				<description>&lt;T&gt; the class in which the constructor is declared</description>
			</attribute>
			<attribute name="@see">
				<description>Member</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.Class</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.Class#getConstructors()</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.Class#getConstructor(Class[])</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.Class#getDeclaredConstructors()</description>
			</attribute>
			<attribute name="@author">
				<description>Kenneth Russell</description>
			</attribute>
			<attribute name="@author">
				<description>Nakul Saraiya</description>
			</attribute>
		</comment>
		<fields>
			<field visibility="private" name="clazz" fulltype="java.lang.Class" type="Class" />
			<field visibility="private" name="slot" fulltype="int" type="int" />
			<field visibility="private" name="parameterTypes" fulltype="java.lang.Class[]" type="Class" />
			<field visibility="private" name="exceptionTypes" fulltype="java.lang.Class[]" type="Class" />
			<field visibility="private" name="modifiers" fulltype="int" type="int" />
			<field visibility="private" transient="true" name="signature" fulltype="java.lang.String" type="String" />
			<field visibility="private" transient="true" name="genericInfo" fulltype="sun.reflect.generics.repository.ConstructorRepository" type="ConstructorRepository" />
			<field visibility="private" name="annotations" fulltype="byte[]" type="byte" />
			<field visibility="private" name="parameterAnnotations" fulltype="byte[]" type="byte" />
			<field volatile="true" visibility="private" name="securityCheckCache" fulltype="java.lang.Class" type="Class" />
			<field final="true" static="true" const="7" visibility="private" name="LANGUAGE_MODIFIERS" constexpr="7" fulltype="int" type="int" />
			<field volatile="true" visibility="private" name="constructorAccessor" fulltype="sun.reflect.ConstructorAccessor" type="ConstructorAccessor" />
			<field visibility="private" name="root" fulltype="java.lang.reflect.Constructor" type="Constructor" />
			<field final="true" static="true" visibility="private" name="EMPTY_ANNOTATION_ARRAY" fulltype="java.lang.annotation.Annotation[]" type="Annotation" />
			<field visibility="private" transient="true" name="declaredAnnotations" fulltype="java.util.Map" type="Map" />
		</fields>
		<methods>
			<constructor visibility="package-private" name="Constructor">
				<comment>
					<description>Package-private constructor used by ReflectAccess to enable
 instantiation of these objects in Java code from the java.lang
 package via sun.reflect.LangReflectAccess.</description>
				</comment>
				<params>
					<param name="declaringClass" fulltype="java.lang.Class" type="Class" />
					<param name="parameterTypes" fulltype="java.lang.Class[]" type="Class" />
					<param name="checkedExceptions" fulltype="java.lang.Class[]" type="Class" />
					<param name="modifiers" fulltype="int" type="int" />
					<param name="slot" fulltype="int" type="int" />
					<param name="signature" fulltype="java.lang.String" type="String" />
					<param name="annotations" fulltype="byte[]" type="byte" />
					<param name="parameterAnnotations" fulltype="byte[]" type="byte" />
				</params>
			</constructor>
			<method visibility="private" name="getFactory" fulltype="sun.reflect.generics.factory.GenericsFactory" type="GenericsFactory" />
			<method visibility="private" name="getGenericInfo" fulltype="sun.reflect.generics.repository.ConstructorRepository" type="ConstructorRepository" />
			<method visibility="package-private" name="copy" fulltype="java.lang.reflect.Constructor" type="Constructor">
				<comment>
					<description>Package-private routine (exposed to java.lang.Class via
 ReflectAccess) which returns a copy of this Constructor. The copy&apos;s
 &quot;root&quot; field points to this Constructor.</description>
				</comment>
			</method>
			<method visibility="public" name="getDeclaringClass" fulltype="java.lang.Class" type="Class">
				<comment>
					<description>Returns the {@code Class} object representing the class that declares
 the constructor represented by this {@code Constructor} object.</description>
				</comment>
			</method>
			<method visibility="public" name="getName" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the name of this constructor, as a string.  This is
 always the same as the simple name of the constructor&apos;s declaring
 class.</description>
				</comment>
			</method>
			<method visibility="public" name="getModifiers" fulltype="int" type="int">
				<comment>
					<description>Returns the Java language modifiers for the constructor
 represented by this {@code Constructor} object, as an integer. The
 {@code Modifier} class should be used to decode the modifiers.</description>
					<attribute name="@see">
						<description>Modifier</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getTypeParameters" returncomment="an array of {@code TypeVariable} objects that represent
     the type variables declared by this generic declaration" fulltype="java.lang.reflect.TypeVariable[]" type="TypeVariable">
				<comment>
					<description>Returns an array of {@code TypeVariable} objects that represent the
 type variables declared by the generic declaration represented by this
 {@code GenericDeclaration} object, in declaration order.  Returns an
 array of length 0 if the underlying generic declaration declares no type
 variables.</description>
					<attribute name="@return">
						<description>an array of {@code TypeVariable} objects that represent
     the type variables declared by this generic declaration</description>
					</attribute>
					<attribute name="@throws">
						<description>GenericSignatureFormatError if the generic
     signature of this generic declaration does not conform to
     the format specified in the Java Virtual Machine Specification,
     3rd edition</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getParameterTypes" returncomment="the parameter types for the constructor this object
 represents" fulltype="java.lang.Class[]" type="Class">
				<comment>
					<description>Returns an array of {@code Class} objects that represent the formal
 parameter types, in declaration order, of the constructor
 represented by this {@code Constructor} object.  Returns an array of
 length 0 if the underlying constructor takes no parameters.</description>
					<attribute name="@return">
						<description>the parameter types for the constructor this object
 represents</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getGenericParameterTypes" returncomment="an array of {@code Type}s that represent the formal
     parameter types of the underlying method, in declaration order" fulltype="java.lang.reflect.Type[]" type="Type">
				<comment>
					<description>Returns an array of {@code Type} objects that represent the formal
 parameter types, in declaration order, of the method represented by
 this {@code Constructor} object. Returns an array of length 0 if the
 underlying method takes no parameters.

 &lt;p&gt;If a formal parameter type is a parameterized type,
 the {@code Type} object returned for it must accurately reflect
 the actual type parameters used in the source code.

 &lt;p&gt;If a formal parameter type is a type variable or a parameterized
 type, it is created. Otherwise, it is resolved.</description>
					<attribute name="@return">
						<description>an array of {@code Type}s that represent the formal
     parameter types of the underlying method, in declaration order</description>
					</attribute>
					<attribute name="@throws">
						<description>GenericSignatureFormatError
     if the generic method signature does not conform to the format
     specified in the Java Virtual Machine Specification, 3rd edition</description>
					</attribute>
					<attribute name="@throws">
						<description>TypeNotPresentException if any of the parameter
     types of the underlying method refers to a non-existent type
     declaration</description>
					</attribute>
					<attribute name="@throws">
						<description>MalformedParameterizedTypeException if any of
     the underlying method&apos;s parameter types refer to a parameterized
     type that cannot be instantiated for any reason</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getExceptionTypes" returncomment="the exception types declared as being thrown by the
 constructor this object represents" fulltype="java.lang.Class[]" type="Class">
				<comment>
					<description>Returns an array of {@code Class} objects that represent the types
 of exceptions declared to be thrown by the underlying constructor
 represented by this {@code Constructor} object.  Returns an array of
 length 0 if the constructor declares no exceptions in its {@code throws} clause.</description>
					<attribute name="@return">
						<description>the exception types declared as being thrown by the
 constructor this object represents</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getGenericExceptionTypes" returncomment="an array of Types that represent the exception types
     thrown by the underlying method" fulltype="java.lang.reflect.Type[]" type="Type">
				<comment>
					<description>Returns an array of {@code Type} objects that represent the
 exceptions declared to be thrown by this {@code Constructor} object.
 Returns an array of length 0 if the underlying method declares
 no exceptions in its {@code throws} clause.

 &lt;p&gt;If an exception type is a parameterized type, the {@code Type}
 object returned for it must accurately reflect the actual type
 parameters used in the source code.

 &lt;p&gt;If an exception type is a type variable or a parameterized
 type, it is created. Otherwise, it is resolved.</description>
					<attribute name="@return">
						<description>an array of Types that represent the exception types
     thrown by the underlying method</description>
					</attribute>
					<attribute name="@throws">
						<description>GenericSignatureFormatError
     if the generic method signature does not conform to the format
     specified in the Java Virtual Machine Specification, 3rd edition</description>
					</attribute>
					<attribute name="@throws">
						<description>TypeNotPresentException if the underlying method&apos;s
     {@code throws} clause refers to a non-existent type declaration</description>
					</attribute>
					<attribute name="@throws">
						<description>MalformedParameterizedTypeException if
     the underlying method&apos;s {@code throws} clause refers to a
     parameterized type that cannot be instantiated for any reason</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="equals" fulltype="boolean" type="boolean">
				<comment>
					<description>Compares this {@code Constructor} against the specified object.
 Returns true if the objects are the same.  Two {@code Constructor} objects are
 the same if they were declared by the same class and have the
 same formal parameter types.</description>
				</comment>
				<params>
					<param name="obj" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="hashCode" fulltype="int" type="int">
				<comment>
					<description>Returns a hashcode for this {@code Constructor}. The hashcode is
 the same as the hashcode for the underlying constructor&apos;s
 declaring class name.</description>
				</comment>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a string describing this {@code Constructor}.  The string is
 formatted as the constructor access modifiers, if any,
 followed by the fully-qualified name of the declaring class,
 followed by a parenthesized, comma-separated list of the
 constructor&apos;s formal parameter types.  For example:
 &lt;pre&gt;
    public java.util.Hashtable(int,float)
 &lt;/pre&gt;

 &lt;p&gt;The only possible modifiers for constructors are the access
 modifiers {@code public}, {@code protected} or
 {@code private}.  Only one of these may appear, or none if the
 constructor has default (package) access.</description>
				</comment>
			</method>
			<method visibility="public" name="toGenericString" returncomment="a string describing this {@code Constructor},
 include type parameters" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a string describing this {@code Constructor},
 including type parameters.  The string is formatted as the
 constructor access modifiers, if any, followed by an
 angle-bracketed comma separated list of the constructor&apos;s type
 parameters, if any, followed by the fully-qualified name of the
 declaring class, followed by a parenthesized, comma-separated
 list of the constructor&apos;s generic formal parameter types.

 A space is used to separate access modifiers from one another
 and from the type parameters or return type.  If there are no
 type parameters, the type parameter list is elided; if the type
 parameter list is present, a space separates the list from the
 class name.  If the constructor is declared to throw
 exceptions, the parameter list is followed by a space, followed
 by the word &quot;{@code throws}&quot; followed by a
 comma-separated list of the thrown exception types.

 &lt;p&gt;The only possible modifiers for constructors are the access
 modifiers {@code public}, {@code protected} or
 {@code private}.  Only one of these may appear, or none if the
 constructor has default (package) access.</description>
					<attribute name="@return">
						<description>a string describing this {@code Constructor},
 include type parameters</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="newInstance" returncomment="a new object created by calling the constructor
 this object represents" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Uses the constructor represented by this {@code Constructor} object to
 create and initialize a new instance of the constructor&apos;s
 declaring class, with the specified initialization parameters.
 Individual parameters are automatically unwrapped to match
 primitive formal parameters, and both primitive and reference
 parameters are subject to method invocation conversions as necessary.

 &lt;p&gt;If the number of formal parameters required by the underlying constructor
 is 0, the supplied {@code initargs} array may be of length 0 or null.

 &lt;p&gt;If the constructor&apos;s declaring class is an inner class in a
 non-static context, the first argument to the constructor needs
 to be the enclosing instance; see &lt;i&gt;The Java Language
 Specification&lt;/i&gt;, section 15.9.3.

 &lt;p&gt;If the required access and argument checks succeed and the
 instantiation will proceed, the constructor&apos;s declaring class
 is initialized if it has not already been initialized.

 &lt;p&gt;If the constructor completes normally, returns the newly
 created and initialized instance.</description>
					<attribute name="@param">
						<description>initargs array of objects to be passed as arguments to
 the constructor call; values of primitive types are wrapped in
 a wrapper object of the appropriate type (e.g. a {@code float}
 in a {@link java.lang.Float Float})</description>
					</attribute>
					<attribute name="@return">
						<description>a new object created by calling the constructor
 this object represents</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalAccessException    if this {@code Constructor} object
              enforces Java language access control and the underlying
              constructor is inaccessible.</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalArgumentException  if the number of actual
              and formal parameters differ; if an unwrapping
              conversion for primitive arguments fails; or if,
              after possible unwrapping, a parameter value
              cannot be converted to the corresponding formal
              parameter type by a method invocation conversion; if
              this constructor pertains to an enum type.</description>
					</attribute>
					<attribute name="@exception">
						<description>InstantiationException    if the class that declares the
              underlying constructor represents an abstract class.</description>
					</attribute>
					<attribute name="@exception">
						<description>InvocationTargetException if the underlying constructor
              throws an exception.</description>
					</attribute>
					<attribute name="@exception">
						<description>ExceptionInInitializerError if the initialization provoked
              by this method fails.</description>
					</attribute>
				</comment>
				<params>
					<param name="initargs" comment="array of objects to be passed as arguments to
 the constructor call; values of primitive types are wrapped in
 a wrapper object of the appropriate type (e.g. a {@code float}
 in a {@link java.lang.Float Float})" fulltype="java.lang.Object[]" type="Object" />
				</params>
				<exceptions>
					<exception comment="if the class that declares the
              underlying constructor represents an abstract class." fulltype="java.lang.InstantiationException" type="InstantiationException" />
					<exception comment="if this {@code Constructor} object
              enforces Java language access control and the underlying
              constructor is inaccessible." fulltype="java.lang.IllegalAccessException" type="IllegalAccessException" />
					<exception comment="if the number of actual
              and formal parameters differ; if an unwrapping
              conversion for primitive arguments fails; or if,
              after possible unwrapping, a parameter value
              cannot be converted to the corresponding formal
              parameter type by a method invocation conversion; if
              this constructor pertains to an enum type." fulltype="java.lang.IllegalArgumentException" type="IllegalArgumentException" />
					<exception comment="if the underlying constructor
              throws an exception." fulltype="java.lang.reflect.InvocationTargetException" type="InvocationTargetException" />
				</exceptions>
			</method>
			<method visibility="public" name="isVarArgs" returncomment="{@code true} if an only if this constructor was declared to
 take a variable number of arguments." fulltype="boolean" type="boolean">
				<comment>
					<description>Returns {@code true} if this constructor was declared to take
 a variable number of arguments; returns {@code false}
 otherwise.</description>
					<attribute name="@return">
						<description>{@code true} if an only if this constructor was declared to
 take a variable number of arguments.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="isSynthetic" returncomment="true if and only if this constructor is a synthetic
 constructor as defined by the Java Language Specification." fulltype="boolean" type="boolean">
				<comment>
					<description>Returns {@code true} if this constructor is a synthetic
 constructor; returns {@code false} otherwise.</description>
					<attribute name="@return">
						<description>true if and only if this constructor is a synthetic
 constructor as defined by the Java Language Specification.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method visibility="private" name="acquireConstructorAccessor" fulltype="void" type="void" />
			<method visibility="package-private" name="getConstructorAccessor" fulltype="sun.reflect.ConstructorAccessor" type="ConstructorAccessor" />
			<method visibility="package-private" name="setConstructorAccessor" fulltype="void" type="void">
				<params>
					<param name="accessor" fulltype="sun.reflect.ConstructorAccessor" type="ConstructorAccessor" />
				</params>
			</method>
			<method visibility="package-private" name="getSlot" fulltype="int" type="int" />
			<method visibility="package-private" name="getSignature" fulltype="java.lang.String" type="String" />
			<method visibility="package-private" name="getRawAnnotations" fulltype="byte[]" type="byte" />
			<method visibility="package-private" name="getRawParameterAnnotations" fulltype="byte[]" type="byte" />
			<method visibility="public" name="getAnnotation" fulltype="java.lang.annotation.Annotation" type="Annotation">
				<comment>
					<attribute name="@throws">
						<description>NullPointerException {@inheritDoc}</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="annotationClass" fulltype="java.lang.Class" type="Class" />
				</params>
			</method>
			<method visibility="public" name="getDeclaredAnnotations" fulltype="java.lang.annotation.Annotation[]" type="Annotation">
				<comment>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method synchronized="true" visibility="private" name="declaredAnnotations" fulltype="java.util.Map" type="Map" />
			<method visibility="public" name="getParameterAnnotations" returncomment="an array of arrays that represent the annotations on the formal
    parameters, in declaration order, of the method represented by this
    Constructor object" fulltype="java.lang.annotation.Annotation[][]" type="Annotation">
				<comment>
					<description>Returns an array of arrays that represent the annotations on the formal
 parameters, in declaration order, of the method represented by
 this {@code Constructor} object. (Returns an array of length zero if the
 underlying method is parameterless.  If the method has one or more
 parameters, a nested array of length zero is returned for each parameter
 with no annotations.) The annotation objects contained in the returned
 arrays are serializable.  The caller of this method is free to modify
 the returned arrays; it will have no effect on the arrays returned to
 other callers.</description>
					<attribute name="@return">
						<description>an array of arrays that represent the annotations on the formal
    parameters, in declaration order, of the method represented by this
    Constructor object</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="java.lang.reflect" serializable="true" superclassfulltype="java.lang.Object" fulltype="java.lang.reflect.Proxy" type="Proxy">
		<implements>
			<interface fulltype="java.io.Serializable" type="Serializable" />
		</implements>
		<comment>
			<description>{@code Proxy} provides static methods for creating dynamic proxy
 classes and instances, and it is also the superclass of all
 dynamic proxy classes created by those methods.

 &lt;p&gt;To create a proxy for some interface {@code Foo}:
 &lt;pre&gt;
     InvocationHandler handler = new MyInvocationHandler(...);
     Class proxyClass = Proxy.getProxyClass(
         Foo.class.getClassLoader(), new Class[] { Foo.class });
     Foo f = (Foo) proxyClass.
         getConstructor(new Class[] { InvocationHandler.class }).
         newInstance(new Object[] { handler });
 &lt;/pre&gt;
 or more simply:
 &lt;pre&gt;
     Foo f = (Foo) Proxy.newProxyInstance(Foo.class.getClassLoader(),
                                          new Class[] { Foo.class },
                                          handler);
 &lt;/pre&gt;

 &lt;p&gt;A &lt;i&gt;dynamic proxy class&lt;/i&gt; (simply referred to as a &lt;i&gt;proxy
 class&lt;/i&gt; below) is a class that implements a list of interfaces
 specified at runtime when the class is created, with behavior as
 described below.

 A &lt;i&gt;proxy interface&lt;/i&gt; is such an interface that is implemented
 by a proxy class.

 A &lt;i&gt;proxy instance&lt;/i&gt; is an instance of a proxy class.

 Each proxy instance has an associated &lt;i&gt;invocation handler&lt;/i&gt;
 object, which implements the interface {@link InvocationHandler}.
 A method invocation on a proxy instance through one of its proxy
 interfaces will be dispatched to the {@link InvocationHandler#invoke
 invoke} method of the instance&apos;s invocation handler, passing the proxy
 instance, a {@code java.lang.reflect.Method} object identifying
 the method that was invoked, and an array of type {@code Object}
 containing the arguments.  The invocation handler processes the
 encoded method invocation as appropriate and the result that it
 returns will be returned as the result of the method invocation on
 the proxy instance.

 &lt;p&gt;A proxy class has the following properties:

 &lt;ul&gt;
 &lt;li&gt;Proxy classes are public, final, and not abstract.

 &lt;li&gt;The unqualified name of a proxy class is unspecified.  The space
 of class names that begin with the string {@code &quot;$Proxy&quot;}
 should be, however, reserved for proxy classes.

 &lt;li&gt;A proxy class extends {@code java.lang.reflect.Proxy}.

 &lt;li&gt;A proxy class implements exactly the interfaces specified at its
 creation, in the same order.

 &lt;li&gt;If a proxy class implements a non-public interface, then it will
 be defined in the same package as that interface.  Otherwise, the
 package of a proxy class is also unspecified.  Note that package
 sealing will not prevent a proxy class from being successfully defined
 in a particular package at runtime, and neither will classes already
 defined by the same class loader and the same package with particular
 signers.

 &lt;li&gt;Since a proxy class implements all of the interfaces specified at
 its creation, invoking {@code getInterfaces} on its
 {@code Class} object will return an array containing the same
 list of interfaces (in the order specified at its creation), invoking
 {@code getMethods} on its {@code Class} object will return
 an array of {@code Method} objects that include all of the
 methods in those interfaces, and invoking {@code getMethod} will
 find methods in the proxy interfaces as would be expected.

 &lt;li&gt;The {@link Proxy#isProxyClass Proxy.isProxyClass} method will
 return true if it is passed a proxy class-- a class returned by
 {@code Proxy.getProxyClass} or the class of an object returned by
 {@code Proxy.newProxyInstance}-- and false otherwise.

 &lt;li&gt;The {@code java.security.ProtectionDomain} of a proxy class
 is the same as that of system classes loaded by the bootstrap class
 loader, such as {@code java.lang.Object}, because the code for a
 proxy class is generated by trusted system code.  This protection
 domain will typically be granted
 {@code java.security.AllPermission}.

 &lt;li&gt;Each proxy class has one public constructor that takes one argument,
 an implementation of the interface {@link InvocationHandler}, to set
 the invocation handler for a proxy instance.  Rather than having to use
 the reflection API to access the public constructor, a proxy instance
 can be also be created by calling the {@link Proxy#newProxyInstance
 Proxy.newProxyInstance} method, which combines the actions of calling
 {@link Proxy#getProxyClass Proxy.getProxyClass} with invoking the
 constructor with an invocation handler.
 &lt;/ul&gt;

 &lt;p&gt;A proxy instance has the following properties:

 &lt;ul&gt;
 &lt;li&gt;Given a proxy instance {@code proxy} and one of the
 interfaces implemented by its proxy class {@code Foo}, the
 following expression will return true:
 &lt;pre&gt;
     {@code proxy instanceof Foo}
 &lt;/pre&gt;
 and the following cast operation will succeed (rather than throwing
 a {@code ClassCastException}):
 &lt;pre&gt;
     {@code (Foo) proxy}
 &lt;/pre&gt;

 &lt;li&gt;Each proxy instance has an associated invocation handler, the one
 that was passed to its constructor.  The static
 {@link Proxy#getInvocationHandler Proxy.getInvocationHandler} method
 will return the invocation handler associated with the proxy instance
 passed as its argument.

 &lt;li&gt;An interface method invocation on a proxy instance will be
 encoded and dispatched to the invocation handler&apos;s {@link
 InvocationHandler#invoke invoke} method as described in the
 documentation for that method.

 &lt;li&gt;An invocation of the {@code hashCode},
 {@code equals}, or {@code toString} methods declared in
 {@code java.lang.Object} on a proxy instance will be encoded and
 dispatched to the invocation handler&apos;s {@code invoke} method in
 the same manner as interface method invocations are encoded and
 dispatched, as described above.  The declaring class of the
 {@code Method} object passed to {@code invoke} will be
 {@code java.lang.Object}.  Other public methods of a proxy
 instance inherited from {@code java.lang.Object} are not
 overridden by a proxy class, so invocations of those methods behave
 like they do for instances of {@code java.lang.Object}.
 &lt;/ul&gt;

 &lt;h3&gt;Methods Duplicated in Multiple Proxy Interfaces&lt;/h3&gt;

 &lt;p&gt;When two or more interfaces of a proxy class contain a method with
 the same name and parameter signature, the order of the proxy class&apos;s
 interfaces becomes significant.  When such a &lt;i&gt;duplicate method&lt;/i&gt;
 is invoked on a proxy instance, the {@code Method} object passed
 to the invocation handler will not necessarily be the one whose
 declaring class is assignable from the reference type of the interface
 that the proxy&apos;s method was invoked through.  This limitation exists
 because the corresponding method implementation in the generated proxy
 class cannot determine which interface it was invoked through.
 Therefore, when a duplicate method is invoked on a proxy instance,
 the {@code Method} object for the method in the foremost interface
 that contains the method (either directly or inherited through a
 superinterface) in the proxy class&apos;s list of interfaces is passed to
 the invocation handler&apos;s {@code invoke} method, regardless of the
 reference type through which the method invocation occurred.

 &lt;p&gt;If a proxy interface contains a method with the same name and
 parameter signature as the {@code hashCode}, {@code equals},
 or {@code toString} methods of {@code java.lang.Object},
 when such a method is invoked on a proxy instance, the
 {@code Method} object passed to the invocation handler will have
 {@code java.lang.Object} as its declaring class.  In other words,
 the public, non-final methods of {@code java.lang.Object}
 logically precede all of the proxy interfaces for the determination of
 which {@code Method} object to pass to the invocation handler.

 &lt;p&gt;Note also that when a duplicate method is dispatched to an
 invocation handler, the {@code invoke} method may only throw
 checked exception types that are assignable to one of the exception
 types in the {@code throws} clause of the method in &lt;i&gt;all&lt;/i&gt; of
 the proxy interfaces that it can be invoked through.  If the
 {@code invoke} method throws a checked exception that is not
 assignable to any of the exception types declared by the method in one
 of the proxy interfaces that it can be invoked through, then an
 unchecked {@code UndeclaredThrowableException} will be thrown by
 the invocation on the proxy instance.  This restriction means that not
 all of the exception types returned by invoking
 {@code getExceptionTypes} on the {@code Method} object
 passed to the {@code invoke} method can necessarily be thrown
 successfully by the {@code invoke} method.</description>
			<attribute name="@author">
				<description>Peter Jones</description>
			</attribute>
			<attribute name="@see">
				<description>InvocationHandler</description>
			</attribute>
			<attribute name="@since">
				<description>1.3</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="-2222568056686623797" visibility="private" name="serialVersionUID" constexpr="-2222568056686623797L" fulltype="long" type="long" />
			<field final="true" static="true" const="$Proxy" visibility="private" name="proxyClassNamePrefix" constexpr="&quot;$Proxy&quot;" fulltype="java.lang.String" type="String">
				<comment>
					<description>prefix for all proxy class names</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="private" name="constructorParams" fulltype="java.lang.Class[]" type="Class">
				<comment>
					<description>parameter types of a proxy class constructor</description>
				</comment>
			</field>
			<field static="true" visibility="private" name="loaderToCache" fulltype="java.util.Map" type="Map">
				<comment>
					<description>maps a class loader to the proxy class cache for that loader</description>
				</comment>
			</field>
			<field static="true" visibility="private" name="pendingGenerationMarker" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>marks that a particular proxy class is currently being generated</description>
				</comment>
			</field>
			<field static="true" visibility="private" name="nextUniqueNumber" fulltype="long" type="long">
				<comment>
					<description>next number to use for generation of unique proxy class names</description>
				</comment>
			</field>
			<field static="true" visibility="private" name="nextUniqueNumberLock" fulltype="java.lang.Object" type="Object" />
			<field static="true" visibility="private" name="proxyClasses" fulltype="java.util.Map" type="Map">
				<comment>
					<description>set of all generated proxy classes, for isProxyClass implementation</description>
				</comment>
			</field>
			<field visibility="protected" name="h" fulltype="java.lang.reflect.InvocationHandler" type="InvocationHandler">
				<comment>
					<description>the invocation handler for this proxy instance.</description>
					<attribute name="@serial" />
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="private" name="Proxy">
				<comment>
					<description>Prohibits instantiation.</description>
				</comment>
			</constructor>
			<constructor visibility="protected" name="Proxy">
				<comment>
					<description>Constructs a new {@code Proxy} instance from a subclass
 (typically, a dynamic proxy class) with the specified value
 for its invocation handler.</description>
					<attribute name="@param">
						<description>h the invocation handler for this proxy instance</description>
					</attribute>
				</comment>
				<params>
					<param name="h" comment="the invocation handler for this proxy instance" fulltype="java.lang.reflect.InvocationHandler" type="InvocationHandler" />
				</params>
			</constructor>
			<method static="true" visibility="public" name="getProxyClass" returncomment="a proxy class that is defined in the specified class loader
          and that implements the specified interfaces" fulltype="java.lang.Class" type="Class">
				<comment>
					<description>Returns the {@code java.lang.Class} object for a proxy class
 given a class loader and an array of interfaces.  The proxy class
 will be defined by the specified class loader and will implement
 all of the supplied interfaces.  If a proxy class for the same
 permutation of interfaces has already been defined by the class
 loader, then the existing proxy class will be returned; otherwise,
 a proxy class for those interfaces will be generated dynamically
 and defined by the class loader.

 &lt;p&gt;There are several restrictions on the parameters that may be
 passed to {@code Proxy.getProxyClass}:

 &lt;ul&gt;
 &lt;li&gt;All of the {@code Class} objects in the
 {@code interfaces} array must represent interfaces, not
 classes or primitive types.

 &lt;li&gt;No two elements in the {@code interfaces} array may
 refer to identical {@code Class} objects.

 &lt;li&gt;All of the interface types must be visible by name through the
 specified class loader.  In other words, for class loader
 {@code cl} and every interface {@code i}, the following
 expression must be true:
 &lt;pre&gt;
     Class.forName(i.getName(), false, cl) == i
 &lt;/pre&gt;

 &lt;li&gt;All non-public interfaces must be in the same package;
 otherwise, it would not be possible for the proxy class to
 implement all of the interfaces, regardless of what package it is
 defined in.

 &lt;li&gt;For any set of member methods of the specified interfaces
 that have the same signature:
 &lt;ul&gt;
 &lt;li&gt;If the return type of any of the methods is a primitive
 type or void, then all of the methods must have that same
 return type.
 &lt;li&gt;Otherwise, one of the methods must have a return type that
 is assignable to all of the return types of the rest of the
 methods.
 &lt;/ul&gt;

 &lt;li&gt;The resulting proxy class must not exceed any limits imposed
 on classes by the virtual machine.  For example, the VM may limit
 the number of interfaces that a class may implement to 65535; in
 that case, the size of the {@code interfaces} array must not
 exceed 65535.
 &lt;/ul&gt;

 &lt;p&gt;If any of these restrictions are violated,
 {@code Proxy.getProxyClass} will throw an
 {@code IllegalArgumentException}.  If the {@code interfaces}
 array argument or any of its elements are {@code null}, a
 {@code NullPointerException} will be thrown.

 &lt;p&gt;Note that the order of the specified proxy interfaces is
 significant: two requests for a proxy class with the same combination
 of interfaces but in a different order will result in two distinct
 proxy classes.</description>
					<attribute name="@param">
						<description>loader the class loader to define the proxy class</description>
					</attribute>
					<attribute name="@param">
						<description>interfaces the list of interfaces for the proxy class
          to implement</description>
					</attribute>
					<attribute name="@return">
						<description>a proxy class that is defined in the specified class loader
          and that implements the specified interfaces</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalArgumentException if any of the restrictions on the
          parameters that may be passed to {@code getProxyClass}
          are violated</description>
					</attribute>
					<attribute name="@throws">
						<description>NullPointerException if the {@code interfaces} array
          argument or any of its elements are {@code null}</description>
					</attribute>
				</comment>
				<params>
					<param name="loader" comment="the class loader to define the proxy class" fulltype="java.lang.ClassLoader" type="ClassLoader" />
					<param name="interfaces" comment="the list of interfaces for the proxy class
          to implement" fulltype="java.lang.Class[]" type="Class" />
				</params>
				<exceptions>
					<exception comment="if any of the restrictions on the
          parameters that may be passed to {@code getProxyClass}
          are violated" fulltype="java.lang.IllegalArgumentException" type="IllegalArgumentException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="newProxyInstance" returncomment="a proxy instance with the specified invocation handler of a
          proxy class that is defined by the specified class loader
          and that implements the specified interfaces" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Returns an instance of a proxy class for the specified interfaces
 that dispatches method invocations to the specified invocation
 handler.  This method is equivalent to:
 &lt;pre&gt;
     Proxy.getProxyClass(loader, interfaces).
         getConstructor(new Class[] { InvocationHandler.class }).
         newInstance(new Object[] { handler });
 &lt;/pre&gt;

 &lt;p&gt;{@code Proxy.newProxyInstance} throws
 {@code IllegalArgumentException} for the same reasons that
 {@code Proxy.getProxyClass} does.</description>
					<attribute name="@param">
						<description>loader the class loader to define the proxy class</description>
					</attribute>
					<attribute name="@param">
						<description>interfaces the list of interfaces for the proxy class
          to implement</description>
					</attribute>
					<attribute name="@param">
						<description>h the invocation handler to dispatch method invocations to</description>
					</attribute>
					<attribute name="@return">
						<description>a proxy instance with the specified invocation handler of a
          proxy class that is defined by the specified class loader
          and that implements the specified interfaces</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalArgumentException if any of the restrictions on the
          parameters that may be passed to {@code getProxyClass}
          are violated</description>
					</attribute>
					<attribute name="@throws">
						<description>NullPointerException if the {@code interfaces} array
          argument or any of its elements are {@code null}, or
          if the invocation handler, {@code h}, is
          {@code null}</description>
					</attribute>
				</comment>
				<params>
					<param name="loader" comment="the class loader to define the proxy class" fulltype="java.lang.ClassLoader" type="ClassLoader" />
					<param name="interfaces" comment="the list of interfaces for the proxy class
          to implement" fulltype="java.lang.Class[]" type="Class" />
					<param name="h" comment="the invocation handler to dispatch method invocations to" fulltype="java.lang.reflect.InvocationHandler" type="InvocationHandler" />
				</params>
				<exceptions>
					<exception comment="if any of the restrictions on the
          parameters that may be passed to {@code getProxyClass}
          are violated" fulltype="java.lang.IllegalArgumentException" type="IllegalArgumentException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="isProxyClass" returncomment="{@code true} if the class is a proxy class and
          {@code false} otherwise" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true if and only if the specified class was dynamically
 generated to be a proxy class using the {@code getProxyClass}
 method or the {@code newProxyInstance} method.

 &lt;p&gt;The reliability of this method is important for the ability
 to use it to make security decisions, so its implementation should
 not just test if the class in question extends {@code Proxy}.</description>
					<attribute name="@param">
						<description>cl the class to test</description>
					</attribute>
					<attribute name="@return">
						<description>{@code true} if the class is a proxy class and
          {@code false} otherwise</description>
					</attribute>
					<attribute name="@throws">
						<description>NullPointerException if {@code cl} is {@code null}</description>
					</attribute>
				</comment>
				<params>
					<param name="cl" comment="the class to test" fulltype="java.lang.Class" type="Class" />
				</params>
			</method>
			<method static="true" visibility="public" name="getInvocationHandler" returncomment="the invocation handler for the proxy instance" fulltype="java.lang.reflect.InvocationHandler" type="InvocationHandler">
				<comment>
					<description>Returns the invocation handler for the specified proxy instance.</description>
					<attribute name="@param">
						<description>proxy the proxy instance to return the invocation handler for</description>
					</attribute>
					<attribute name="@return">
						<description>the invocation handler for the proxy instance</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalArgumentException if the argument is not a
          proxy instance</description>
					</attribute>
				</comment>
				<params>
					<param name="proxy" comment="the proxy instance to return the invocation handler for" fulltype="java.lang.Object" type="Object" />
				</params>
				<exceptions>
					<exception comment="if the argument is not a
          proxy instance" fulltype="java.lang.IllegalArgumentException" type="IllegalArgumentException" />
				</exceptions>
			</method>
			<method static="true" visibility="private" name="defineClass0" fulltype="java.lang.Class" type="Class">
				<params>
					<param name="loader" fulltype="java.lang.ClassLoader" type="ClassLoader" />
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="b" fulltype="byte[]" type="byte" />
					<param name="off" fulltype="int" type="int" />
					<param name="len" fulltype="int" type="int" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="RuntimeException" visibility="public" package="java.lang.reflect" serializable="true" superclassfulltype="java.lang.RuntimeException" fulltype="java.lang.reflect.MalformedParameterizedTypeException" type="MalformedParameterizedTypeException">
		<comment>
			<description>Thrown when a semantically malformed parameterized type is
 encountered by a reflective method that needs to instantiate it.
 For example, if the number of type arguments to a parameterized type
 is wrong.</description>
			<attribute name="@since">
				<description>1.5</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="MalformedParameterizedTypeException" />
		</methods>
	</jelclass>
	<jelclass superclass="ClassFormatError" visibility="public" package="java.lang.reflect" serializable="true" superclassfulltype="java.lang.ClassFormatError" fulltype="java.lang.reflect.GenericSignatureFormatError" type="GenericSignatureFormatError">
		<comment>
			<description>Thrown when a syntactically malformed signature attribute is
 encountered by a reflective method that needs to interpret the
 generic signature information for a type, method or constructor.</description>
			<attribute name="@since">
				<description>1.5</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="GenericSignatureFormatError" />
		</methods>
	</jelclass>
	<jelclass final="true" superclass="AccessibleObject" visibility="public" package="java.lang.reflect" superclassfulltype="java.lang.reflect.AccessibleObject" fulltype="java.lang.reflect.Method" type="Method">
		<implements>
			<interface fulltype="java.lang.reflect.GenericDeclaration" type="GenericDeclaration" />
			<interface fulltype="java.lang.reflect.Member" type="Member" />
		</implements>
		<comment>
			<description>A {@code Method} provides information about, and access to, a single method
 on a class or interface.  The reflected method may be a class method
 or an instance method (including an abstract method).

 &lt;p&gt;A {@code Method} permits widening conversions to occur when matching the
 actual parameters to invoke with the underlying method&apos;s formal
 parameters, but it throws an {@code IllegalArgumentException} if a
 narrowing conversion would occur.</description>
			<attribute name="@see">
				<description>Member</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.Class</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.Class#getMethods()</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.Class#getMethod(String, Class[])</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.Class#getDeclaredMethods()</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.Class#getDeclaredMethod(String, Class[])</description>
			</attribute>
			<attribute name="@author">
				<description>Kenneth Russell</description>
			</attribute>
			<attribute name="@author">
				<description>Nakul Saraiya</description>
			</attribute>
		</comment>
		<fields>
			<field visibility="private" name="clazz" fulltype="java.lang.Class" type="Class" />
			<field visibility="private" name="slot" fulltype="int" type="int" />
			<field visibility="private" name="name" fulltype="java.lang.String" type="String" />
			<field visibility="private" name="returnType" fulltype="java.lang.Class" type="Class" />
			<field visibility="private" name="parameterTypes" fulltype="java.lang.Class[]" type="Class" />
			<field visibility="private" name="exceptionTypes" fulltype="java.lang.Class[]" type="Class" />
			<field visibility="private" name="modifiers" fulltype="int" type="int" />
			<field visibility="private" transient="true" name="signature" fulltype="java.lang.String" type="String" />
			<field visibility="private" transient="true" name="genericInfo" fulltype="sun.reflect.generics.repository.MethodRepository" type="MethodRepository" />
			<field visibility="private" name="annotations" fulltype="byte[]" type="byte" />
			<field visibility="private" name="parameterAnnotations" fulltype="byte[]" type="byte" />
			<field visibility="private" name="annotationDefault" fulltype="byte[]" type="byte" />
			<field volatile="true" visibility="private" name="methodAccessor" fulltype="sun.reflect.MethodAccessor" type="MethodAccessor" />
			<field visibility="private" name="root" fulltype="java.lang.reflect.Method" type="Method" />
			<field visibility="private" name="securityCheckCache" fulltype="java.lang.Class" type="Class" />
			<field visibility="private" name="securityCheckTargetClassCache" fulltype="java.lang.Class" type="Class" />
			<field final="true" static="true" const="1343" visibility="private" name="LANGUAGE_MODIFIERS" constexpr="1343" fulltype="int" type="int" />
			<field final="true" static="true" visibility="private" name="EMPTY_ANNOTATION_ARRAY" fulltype="java.lang.annotation.Annotation[]" type="Annotation" />
			<field visibility="private" transient="true" name="declaredAnnotations" fulltype="java.util.Map" type="Map" />
		</fields>
		<methods>
			<constructor visibility="package-private" name="Method">
				<comment>
					<description>Package-private constructor used by ReflectAccess to enable
 instantiation of these objects in Java code from the java.lang
 package via sun.reflect.LangReflectAccess.</description>
				</comment>
				<params>
					<param name="declaringClass" fulltype="java.lang.Class" type="Class" />
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="parameterTypes" fulltype="java.lang.Class[]" type="Class" />
					<param name="returnType" fulltype="java.lang.Class" type="Class" />
					<param name="checkedExceptions" fulltype="java.lang.Class[]" type="Class" />
					<param name="modifiers" fulltype="int" type="int" />
					<param name="slot" fulltype="int" type="int" />
					<param name="signature" fulltype="java.lang.String" type="String" />
					<param name="annotations" fulltype="byte[]" type="byte" />
					<param name="parameterAnnotations" fulltype="byte[]" type="byte" />
					<param name="annotationDefault" fulltype="byte[]" type="byte" />
				</params>
			</constructor>
			<method visibility="private" name="getGenericSignature" fulltype="java.lang.String" type="String" />
			<method visibility="private" name="getFactory" fulltype="sun.reflect.generics.factory.GenericsFactory" type="GenericsFactory" />
			<method visibility="private" name="getGenericInfo" fulltype="sun.reflect.generics.repository.MethodRepository" type="MethodRepository" />
			<method visibility="package-private" name="copy" fulltype="java.lang.reflect.Method" type="Method">
				<comment>
					<description>Package-private routine (exposed to java.lang.Class via
 ReflectAccess) which returns a copy of this Method. The copy&apos;s
 &quot;root&quot; field points to this Method.</description>
				</comment>
			</method>
			<method visibility="public" name="getDeclaringClass" fulltype="java.lang.Class" type="Class">
				<comment>
					<description>Returns the {@code Class} object representing the class or interface
 that declares the method represented by this {@code Method} object.</description>
				</comment>
			</method>
			<method visibility="public" name="getName" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the name of the method represented by this {@code Method}
 object, as a {@code String}.</description>
				</comment>
			</method>
			<method visibility="public" name="getModifiers" fulltype="int" type="int">
				<comment>
					<description>Returns the Java language modifiers for the method represented
 by this {@code Method} object, as an integer. The {@code Modifier} class should
 be used to decode the modifiers.</description>
					<attribute name="@see">
						<description>Modifier</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getTypeParameters" returncomment="an array of {@code TypeVariable} objects that represent
     the type variables declared by this generic declaration" fulltype="java.lang.reflect.TypeVariable[]" type="TypeVariable">
				<comment>
					<description>Returns an array of {@code TypeVariable} objects that represent the
 type variables declared by the generic declaration represented by this
 {@code GenericDeclaration} object, in declaration order.  Returns an
 array of length 0 if the underlying generic declaration declares no type
 variables.</description>
					<attribute name="@return">
						<description>an array of {@code TypeVariable} objects that represent
     the type variables declared by this generic declaration</description>
					</attribute>
					<attribute name="@throws">
						<description>GenericSignatureFormatError if the generic
     signature of this generic declaration does not conform to
     the format specified in the Java Virtual Machine Specification,
     3rd edition</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getReturnType" returncomment="the return type for the method this object represents" fulltype="java.lang.Class" type="Class">
				<comment>
					<description>Returns a {@code Class} object that represents the formal return type
 of the method represented by this {@code Method} object.</description>
					<attribute name="@return">
						<description>the return type for the method this object represents</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getGenericReturnType" returncomment="a {@code Type} object that represents the formal return
     type of the underlying  method" fulltype="java.lang.reflect.Type" type="Type">
				<comment>
					<description>Returns a {@code Type} object that represents the formal return
 type of the method represented by this {@code Method} object.

 &lt;p&gt;If the return type is a parameterized type,
 the {@code Type} object returned must accurately reflect
 the actual type parameters used in the source code.

 &lt;p&gt;If the return type is a type variable or a parameterized type, it
 is created. Otherwise, it is resolved.</description>
					<attribute name="@return">
						<description>a {@code Type} object that represents the formal return
     type of the underlying  method</description>
					</attribute>
					<attribute name="@throws">
						<description>GenericSignatureFormatError
     if the generic method signature does not conform to the format
     specified in the Java Virtual Machine Specification, 3rd edition</description>
					</attribute>
					<attribute name="@throws">
						<description>TypeNotPresentException if the underlying method&apos;s
     return type refers to a non-existent type declaration</description>
					</attribute>
					<attribute name="@throws">
						<description>MalformedParameterizedTypeException if the
     underlying method&apos;s return typed refers to a parameterized
     type that cannot be instantiated for any reason</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getParameterTypes" returncomment="the parameter types for the method this object
 represents" fulltype="java.lang.Class[]" type="Class">
				<comment>
					<description>Returns an array of {@code Class} objects that represent the formal
 parameter types, in declaration order, of the method
 represented by this {@code Method} object.  Returns an array of length
 0 if the underlying method takes no parameters.</description>
					<attribute name="@return">
						<description>the parameter types for the method this object
 represents</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getGenericParameterTypes" returncomment="an array of Types that represent the formal
     parameter types of the underlying method, in declaration order" fulltype="java.lang.reflect.Type[]" type="Type">
				<comment>
					<description>Returns an array of {@code Type} objects that represent the formal
 parameter types, in declaration order, of the method represented by
 this {@code Method} object. Returns an array of length 0 if the
 underlying method takes no parameters.

 &lt;p&gt;If a formal parameter type is a parameterized type,
 the {@code Type} object returned for it must accurately reflect
 the actual type parameters used in the source code.

 &lt;p&gt;If a formal parameter type is a type variable or a parameterized
 type, it is created. Otherwise, it is resolved.</description>
					<attribute name="@return">
						<description>an array of Types that represent the formal
     parameter types of the underlying method, in declaration order</description>
					</attribute>
					<attribute name="@throws">
						<description>GenericSignatureFormatError
     if the generic method signature does not conform to the format
     specified in the Java Virtual Machine Specification, 3rd edition</description>
					</attribute>
					<attribute name="@throws">
						<description>TypeNotPresentException if any of the parameter
     types of the underlying method refers to a non-existent type
     declaration</description>
					</attribute>
					<attribute name="@throws">
						<description>MalformedParameterizedTypeException if any of
     the underlying method&apos;s parameter types refer to a parameterized
     type that cannot be instantiated for any reason</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getExceptionTypes" returncomment="the exception types declared as being thrown by the
 method this object represents" fulltype="java.lang.Class[]" type="Class">
				<comment>
					<description>Returns an array of {@code Class} objects that represent
 the types of the exceptions declared to be thrown
 by the underlying method
 represented by this {@code Method} object.  Returns an array of length
 0 if the method declares no exceptions in its {@code throws} clause.</description>
					<attribute name="@return">
						<description>the exception types declared as being thrown by the
 method this object represents</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getGenericExceptionTypes" returncomment="an array of Types that represent the exception types
     thrown by the underlying method" fulltype="java.lang.reflect.Type[]" type="Type">
				<comment>
					<description>Returns an array of {@code Type} objects that represent the
 exceptions declared to be thrown by this {@code Method} object.
 Returns an array of length 0 if the underlying method declares
 no exceptions in its {@code throws} clause.

 &lt;p&gt;If an exception type is a parameterized type, the {@code Type}
 object returned for it must accurately reflect the actual type
 parameters used in the source code.

 &lt;p&gt;If an exception type is a type variable or a parameterized
 type, it is created. Otherwise, it is resolved.</description>
					<attribute name="@return">
						<description>an array of Types that represent the exception types
     thrown by the underlying method</description>
					</attribute>
					<attribute name="@throws">
						<description>GenericSignatureFormatError
     if the generic method signature does not conform to the format
     specified in the Java Virtual Machine Specification, 3rd edition</description>
					</attribute>
					<attribute name="@throws">
						<description>TypeNotPresentException if the underlying method&apos;s
     {@code throws} clause refers to a non-existent type declaration</description>
					</attribute>
					<attribute name="@throws">
						<description>MalformedParameterizedTypeException if
     the underlying method&apos;s {@code throws} clause refers to a
     parameterized type that cannot be instantiated for any reason</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="equals" fulltype="boolean" type="boolean">
				<comment>
					<description>Compares this {@code Method} against the specified object.  Returns
 true if the objects are the same.  Two {@code Methods} are the same if
 they were declared by the same class and have the same name
 and formal parameter types and return type.</description>
				</comment>
				<params>
					<param name="obj" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="hashCode" fulltype="int" type="int">
				<comment>
					<description>Returns a hashcode for this {@code Method}.  The hashcode is computed
 as the exclusive-or of the hashcodes for the underlying
 method&apos;s declaring class name and the method&apos;s name.</description>
				</comment>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a string describing this {@code Method}.  The string is
 formatted as the method access modifiers, if any, followed by
 the method return type, followed by a space, followed by the
 class declaring the method, followed by a period, followed by
 the method name, followed by a parenthesized, comma-separated
 list of the method&apos;s formal parameter types. If the method
 throws checked exceptions, the parameter list is followed by a
 space, followed by the word throws followed by a
 comma-separated list of the thrown exception types.
 For example:
 &lt;pre&gt;
    public boolean java.lang.Object.equals(java.lang.Object)
 &lt;/pre&gt;

 &lt;p&gt;The access modifiers are placed in canonical order as
 specified by &quot;The Java Language Specification&quot;.  This is
 {@code public}, {@code protected} or {@code private} first,
 and then other modifiers in the following order:
 {@code abstract}, {@code static}, {@code final},
 {@code synchronized}, {@code native}.</description>
				</comment>
			</method>
			<method visibility="public" name="toGenericString" returncomment="a string describing this {@code Method},
 include type parameters" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a string describing this {@code Method}, including
 type parameters.  The string is formatted as the method access
 modifiers, if any, followed by an angle-bracketed
 comma-separated list of the method&apos;s type parameters, if any,
 followed by the method&apos;s generic return type, followed by a
 space, followed by the class declaring the method, followed by
 a period, followed by the method name, followed by a
 parenthesized, comma-separated list of the method&apos;s generic
 formal parameter types.

 A space is used to separate access modifiers from one another
 and from the type parameters or return type.  If there are no
 type parameters, the type parameter list is elided; if the type
 parameter list is present, a space separates the list from the
 class name.  If the method is declared to throw exceptions, the
 parameter list is followed by a space, followed by the word
 throws followed by a comma-separated list of the generic thrown
 exception types.  If there are no type parameters, the type
 parameter list is elided.

 &lt;p&gt;The access modifiers are placed in canonical order as
 specified by &quot;The Java Language Specification&quot;.  This is
 {@code public}, {@code protected} or {@code private} first,
 and then other modifiers in the following order:
 {@code abstract}, {@code static}, {@code final},
 {@code synchronized} {@code native}.</description>
					<attribute name="@return">
						<description>a string describing this {@code Method},
 include type parameters</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="invoke" returncomment="the result of dispatching the method represented by
 this object on {@code obj} with parameters
 {@code args}" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Invokes the underlying method represented by this {@code Method}
 object, on the specified object with the specified parameters.
 Individual parameters are automatically unwrapped to match
 primitive formal parameters, and both primitive and reference
 parameters are subject to method invocation conversions as
 necessary.

 &lt;p&gt;If the underlying method is static, then the specified {@code obj}
 argument is ignored. It may be null.

 &lt;p&gt;If the number of formal parameters required by the underlying method is
 0, the supplied {@code args} array may be of length 0 or null.

 &lt;p&gt;If the underlying method is an instance method, it is invoked
 using dynamic method lookup as documented in The Java Language
 Specification, Second Edition, section 15.12.4.4; in particular,
 overriding based on the runtime type of the target object will occur.

 &lt;p&gt;If the underlying method is static, the class that declared
 the method is initialized if it has not already been initialized.

 &lt;p&gt;If the method completes normally, the value it returns is
 returned to the caller of invoke; if the value has a primitive
 type, it is first appropriately wrapped in an object. However,
 if the value has the type of an array of a primitive type, the
 elements of the array are &lt;i&gt;not&lt;/i&gt; wrapped in objects; in
 other words, an array of primitive type is returned.  If the
 underlying method return type is void, the invocation returns
 null.</description>
					<attribute name="@param">
						<description>obj  the object the underlying method is invoked from</description>
					</attribute>
					<attribute name="@param">
						<description>args the arguments used for the method call</description>
					</attribute>
					<attribute name="@return">
						<description>the result of dispatching the method represented by
 this object on {@code obj} with parameters
 {@code args}</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalAccessException    if this {@code Method} object
              enforces Java language access control and the underlying
              method is inaccessible.</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalArgumentException  if the method is an
              instance method and the specified object argument
              is not an instance of the class or interface
              declaring the underlying method (or of a subclass
              or implementor thereof); if the number of actual
              and formal parameters differ; if an unwrapping
              conversion for primitive arguments fails; or if,
              after possible unwrapping, a parameter value
              cannot be converted to the corresponding formal
              parameter type by a method invocation conversion.</description>
					</attribute>
					<attribute name="@exception">
						<description>InvocationTargetException if the underlying method
              throws an exception.</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException      if the specified object is null
              and the method is an instance method.</description>
					</attribute>
					<attribute name="@exception">
						<description>ExceptionInInitializerError if the initialization
 provoked by this method fails.</description>
					</attribute>
				</comment>
				<params>
					<param name="obj" comment="the object the underlying method is invoked from" fulltype="java.lang.Object" type="Object" />
					<param name="args" comment="the arguments used for the method call" fulltype="java.lang.Object[]" type="Object" />
				</params>
				<exceptions>
					<exception comment="if this {@code Method} object
              enforces Java language access control and the underlying
              method is inaccessible." fulltype="java.lang.IllegalAccessException" type="IllegalAccessException" />
					<exception comment="if the method is an
              instance method and the specified object argument
              is not an instance of the class or interface
              declaring the underlying method (or of a subclass
              or implementor thereof); if the number of actual
              and formal parameters differ; if an unwrapping
              conversion for primitive arguments fails; or if,
              after possible unwrapping, a parameter value
              cannot be converted to the corresponding formal
              parameter type by a method invocation conversion." fulltype="java.lang.IllegalArgumentException" type="IllegalArgumentException" />
					<exception comment="if the underlying method
              throws an exception." fulltype="java.lang.reflect.InvocationTargetException" type="InvocationTargetException" />
				</exceptions>
			</method>
			<method visibility="public" name="isBridge" returncomment="true if and only if this method is a bridge
 method as defined by the Java Language Specification." fulltype="boolean" type="boolean">
				<comment>
					<description>Returns {@code true} if this method is a bridge
 method; returns {@code false} otherwise.</description>
					<attribute name="@return">
						<description>true if and only if this method is a bridge
 method as defined by the Java Language Specification.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="isVarArgs" returncomment="{@code true} if an only if this method was declared to
 take a variable number of arguments." fulltype="boolean" type="boolean">
				<comment>
					<description>Returns {@code true} if this method was declared to take
 a variable number of arguments; returns {@code false}
 otherwise.</description>
					<attribute name="@return">
						<description>{@code true} if an only if this method was declared to
 take a variable number of arguments.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="isSynthetic" returncomment="true if and only if this method is a synthetic
 method as defined by the Java Language Specification." fulltype="boolean" type="boolean">
				<comment>
					<description>Returns {@code true} if this method is a synthetic
 method; returns {@code false} otherwise.</description>
					<attribute name="@return">
						<description>true if and only if this method is a synthetic
 method as defined by the Java Language Specification.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method visibility="private" name="acquireMethodAccessor" fulltype="void" type="void" />
			<method visibility="package-private" name="getMethodAccessor" fulltype="sun.reflect.MethodAccessor" type="MethodAccessor" />
			<method visibility="package-private" name="setMethodAccessor" fulltype="void" type="void">
				<params>
					<param name="accessor" fulltype="sun.reflect.MethodAccessor" type="MethodAccessor" />
				</params>
			</method>
			<method visibility="public" name="getAnnotation" fulltype="java.lang.annotation.Annotation" type="Annotation">
				<comment>
					<attribute name="@throws">
						<description>NullPointerException {@inheritDoc}</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="annotationClass" fulltype="java.lang.Class" type="Class" />
				</params>
			</method>
			<method visibility="public" name="getDeclaredAnnotations" fulltype="java.lang.annotation.Annotation[]" type="Annotation">
				<comment>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method synchronized="true" visibility="private" name="declaredAnnotations" fulltype="java.util.Map" type="Map" />
			<method visibility="public" name="getDefaultValue" returncomment="the default value for the annotation member represented
     by this {@code Method} instance." fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Returns the default value for the annotation member represented by
 this {@code Method} instance.  If the member is of a primitive type,
 an instance of the corresponding wrapper type is returned. Returns
 null if no default is associated with the member, or if the method
 instance does not represent a declared member of an annotation type.</description>
					<attribute name="@return">
						<description>the default value for the annotation member represented
     by this {@code Method} instance.</description>
					</attribute>
					<attribute name="@throws">
						<description>TypeNotPresentException if the annotation is of type
     {@link Class} and no definition can be found for the
     default class value.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getParameterAnnotations" returncomment="an array of arrays that represent the annotations on the formal
    parameters, in declaration order, of the method represented by this
    Method object" fulltype="java.lang.annotation.Annotation[][]" type="Annotation">
				<comment>
					<description>Returns an array of arrays that represent the annotations on the formal
 parameters, in declaration order, of the method represented by
 this {@code Method} object. (Returns an array of length zero if the
 underlying method is parameterless.  If the method has one or more
 parameters, a nested array of length zero is returned for each parameter
 with no annotations.) The annotation objects contained in the returned
 arrays are serializable.  The caller of this method is free to modify
 the returned arrays; it will have no effect on the arrays returned to
 other callers.</description>
					<attribute name="@return">
						<description>an array of arrays that represent the annotations on the formal
    parameters, in declaration order, of the method represented by this
    Method object</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="java.lang.reflect" superclassfulltype="java.lang.Object" fulltype="java.lang.reflect.Modifier" type="Modifier">
		<comment>
			<description>The Modifier class provides {@code static} methods and
 constants to decode class and member access modifiers.  The sets of
 modifiers are represented as integers with distinct bit positions
 representing different modifiers.  The values for the constants
 representing the modifiers are taken from &lt;a
 href=&quot;http://java.sun.com/docs/books/vmspec/2nd-edition/html/VMSpecTOC.doc.html&quot;&gt;&lt;i&gt;The
 Java&lt;/i&gt;&lt;sup&gt;&lt;small&gt;TM&lt;/small&gt;&lt;/sup&gt; &lt;i&gt;Virtual Machine Specification, Second
 edition&lt;/i&gt;&lt;/a&gt; tables
 &lt;a href=&quot;http://java.sun.com/docs/books/vmspec/2nd-edition/html/ClassFile.doc.html#75734&quot;&gt;4.1&lt;/a&gt;,
 &lt;a href=&quot;http://java.sun.com/docs/books/vmspec/2nd-edition/html/ClassFile.doc.html#88358&quot;&gt;4.4&lt;/a&gt;,
 &lt;a href=&quot;http://java.sun.com/docs/books/vmspec/2nd-edition/html/ClassFile.doc.html#75568&quot;&gt;4.5&lt;/a&gt;, and
 &lt;a href=&quot;http://java.sun.com/docs/books/vmspec/2nd-edition/html/ClassFile.doc.html#88478&quot;&gt;4.7&lt;/a&gt;.</description>
			<attribute name="@see">
				<description>Class#getModifiers()</description>
			</attribute>
			<attribute name="@see">
				<description>Member#getModifiers()</description>
			</attribute>
			<attribute name="@author">
				<description>Nakul Saraiya</description>
			</attribute>
			<attribute name="@author">
				<description>Kenneth Russell</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="1" visibility="public" name="PUBLIC" constexpr="1" fulltype="int" type="int">
				<comment>
					<description>The {@code int} value representing the {@code public}
 modifier.</description>
				</comment>
			</field>
			<field final="true" static="true" const="2" visibility="public" name="PRIVATE" constexpr="2" fulltype="int" type="int">
				<comment>
					<description>The {@code int} value representing the {@code private}
 modifier.</description>
				</comment>
			</field>
			<field final="true" static="true" const="4" visibility="public" name="PROTECTED" constexpr="4" fulltype="int" type="int">
				<comment>
					<description>The {@code int} value representing the {@code protected}
 modifier.</description>
				</comment>
			</field>
			<field final="true" static="true" const="8" visibility="public" name="STATIC" constexpr="8" fulltype="int" type="int">
				<comment>
					<description>The {@code int} value representing the {@code static}
 modifier.</description>
				</comment>
			</field>
			<field final="true" static="true" const="16" visibility="public" name="FINAL" constexpr="16" fulltype="int" type="int">
				<comment>
					<description>The {@code int} value representing the {@code final}
 modifier.</description>
				</comment>
			</field>
			<field final="true" static="true" const="32" visibility="public" name="SYNCHRONIZED" constexpr="32" fulltype="int" type="int">
				<comment>
					<description>The {@code int} value representing the {@code synchronized}
 modifier.</description>
				</comment>
			</field>
			<field final="true" static="true" const="64" visibility="public" name="VOLATILE" constexpr="64" fulltype="int" type="int">
				<comment>
					<description>The {@code int} value representing the {@code volatile}
 modifier.</description>
				</comment>
			</field>
			<field final="true" static="true" const="128" visibility="public" name="TRANSIENT" constexpr="128" fulltype="int" type="int">
				<comment>
					<description>The {@code int} value representing the {@code transient}
 modifier.</description>
				</comment>
			</field>
			<field final="true" static="true" const="256" visibility="public" name="NATIVE" constexpr="256" fulltype="int" type="int">
				<comment>
					<description>The {@code int} value representing the {@code native}
 modifier.</description>
				</comment>
			</field>
			<field final="true" static="true" const="512" visibility="public" name="INTERFACE" constexpr="512" fulltype="int" type="int">
				<comment>
					<description>The {@code int} value representing the {@code interface}
 modifier.</description>
				</comment>
			</field>
			<field final="true" static="true" const="1024" visibility="public" name="ABSTRACT" constexpr="1024" fulltype="int" type="int">
				<comment>
					<description>The {@code int} value representing the {@code abstract}
 modifier.</description>
				</comment>
			</field>
			<field final="true" static="true" const="2048" visibility="public" name="STRICT" constexpr="2048" fulltype="int" type="int">
				<comment>
					<description>The {@code int} value representing the {@code strictfp}
 modifier.</description>
				</comment>
			</field>
			<field final="true" static="true" const="64" visibility="package-private" name="BRIDGE" constexpr="64" fulltype="int" type="int" />
			<field final="true" static="true" const="128" visibility="package-private" name="VARARGS" constexpr="128" fulltype="int" type="int" />
			<field final="true" static="true" const="4096" visibility="package-private" name="SYNTHETIC" constexpr="4096" fulltype="int" type="int" />
			<field final="true" static="true" const="8192" visibility="package-private" name="ANNOTATION" constexpr="8192" fulltype="int" type="int" />
			<field final="true" static="true" const="16384" visibility="package-private" name="ENUM" constexpr="16384" fulltype="int" type="int" />
		</fields>
		<methods>
			<constructor visibility="public" name="Modifier" />
			<method static="true" visibility="public" name="isPublic" returncomment="{@code true} if {@code mod} includes the
 {@code public} modifier; {@code false} otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Return {@code true} if the integer argument includes the
 {@code public} modifier, {@code false} otherwise.</description>
					<attribute name="@param">
						<description>mod a set of modifiers</description>
					</attribute>
					<attribute name="@return">
						<description>{@code true} if {@code mod} includes the
 {@code public} modifier; {@code false} otherwise.</description>
					</attribute>
				</comment>
				<params>
					<param name="mod" comment="a set of modifiers" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="isPrivate" returncomment="{@code true} if {@code mod} includes the
 {@code private} modifier; {@code false} otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Return {@code true} if the integer argument includes the
 {@code private} modifier, {@code false} otherwise.</description>
					<attribute name="@param">
						<description>mod a set of modifiers</description>
					</attribute>
					<attribute name="@return">
						<description>{@code true} if {@code mod} includes the
 {@code private} modifier; {@code false} otherwise.</description>
					</attribute>
				</comment>
				<params>
					<param name="mod" comment="a set of modifiers" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="isProtected" returncomment="{@code true} if {@code mod} includes the
 {@code protected} modifier; {@code false} otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Return {@code true} if the integer argument includes the
 {@code protected} modifier, {@code false} otherwise.</description>
					<attribute name="@param">
						<description>mod a set of modifiers</description>
					</attribute>
					<attribute name="@return">
						<description>{@code true} if {@code mod} includes the
 {@code protected} modifier; {@code false} otherwise.</description>
					</attribute>
				</comment>
				<params>
					<param name="mod" comment="a set of modifiers" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="isStatic" returncomment="{@code true} if {@code mod} includes the
 {@code static} modifier; {@code false} otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Return {@code true} if the integer argument includes the
 {@code static} modifier, {@code false} otherwise.</description>
					<attribute name="@param">
						<description>mod a set of modifiers</description>
					</attribute>
					<attribute name="@return">
						<description>{@code true} if {@code mod} includes the
 {@code static} modifier; {@code false} otherwise.</description>
					</attribute>
				</comment>
				<params>
					<param name="mod" comment="a set of modifiers" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="isFinal" returncomment="{@code true} if {@code mod} includes the
 {@code final} modifier; {@code false} otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Return {@code true} if the integer argument includes the
 {@code final} modifier, {@code false} otherwise.</description>
					<attribute name="@param">
						<description>mod a set of modifiers</description>
					</attribute>
					<attribute name="@return">
						<description>{@code true} if {@code mod} includes the
 {@code final} modifier; {@code false} otherwise.</description>
					</attribute>
				</comment>
				<params>
					<param name="mod" comment="a set of modifiers" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="isSynchronized" returncomment="{@code true} if {@code mod} includes the
 {@code synchronized} modifier; {@code false} otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Return {@code true} if the integer argument includes the
 {@code synchronized} modifier, {@code false} otherwise.</description>
					<attribute name="@param">
						<description>mod a set of modifiers</description>
					</attribute>
					<attribute name="@return">
						<description>{@code true} if {@code mod} includes the
 {@code synchronized} modifier; {@code false} otherwise.</description>
					</attribute>
				</comment>
				<params>
					<param name="mod" comment="a set of modifiers" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="isVolatile" returncomment="{@code true} if {@code mod} includes the
 {@code volatile} modifier; {@code false} otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Return {@code true} if the integer argument includes the
 {@code volatile} modifier, {@code false} otherwise.</description>
					<attribute name="@param">
						<description>mod a set of modifiers</description>
					</attribute>
					<attribute name="@return">
						<description>{@code true} if {@code mod} includes the
 {@code volatile} modifier; {@code false} otherwise.</description>
					</attribute>
				</comment>
				<params>
					<param name="mod" comment="a set of modifiers" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="isTransient" returncomment="{@code true} if {@code mod} includes the
 {@code transient} modifier; {@code false} otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Return {@code true} if the integer argument includes the
 {@code transient} modifier, {@code false} otherwise.</description>
					<attribute name="@param">
						<description>mod a set of modifiers</description>
					</attribute>
					<attribute name="@return">
						<description>{@code true} if {@code mod} includes the
 {@code transient} modifier; {@code false} otherwise.</description>
					</attribute>
				</comment>
				<params>
					<param name="mod" comment="a set of modifiers" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="isNative" returncomment="{@code true} if {@code mod} includes the
 {@code native} modifier; {@code false} otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Return {@code true} if the integer argument includes the
 {@code native} modifier, {@code false} otherwise.</description>
					<attribute name="@param">
						<description>mod a set of modifiers</description>
					</attribute>
					<attribute name="@return">
						<description>{@code true} if {@code mod} includes the
 {@code native} modifier; {@code false} otherwise.</description>
					</attribute>
				</comment>
				<params>
					<param name="mod" comment="a set of modifiers" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="isInterface" returncomment="{@code true} if {@code mod} includes the
 {@code interface} modifier; {@code false} otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Return {@code true} if the integer argument includes the
 {@code interface} modifier, {@code false} otherwise.</description>
					<attribute name="@param">
						<description>mod a set of modifiers</description>
					</attribute>
					<attribute name="@return">
						<description>{@code true} if {@code mod} includes the
 {@code interface} modifier; {@code false} otherwise.</description>
					</attribute>
				</comment>
				<params>
					<param name="mod" comment="a set of modifiers" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="isAbstract" returncomment="{@code true} if {@code mod} includes the
 {@code abstract} modifier; {@code false} otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Return {@code true} if the integer argument includes the
 {@code abstract} modifier, {@code false} otherwise.</description>
					<attribute name="@param">
						<description>mod a set of modifiers</description>
					</attribute>
					<attribute name="@return">
						<description>{@code true} if {@code mod} includes the
 {@code abstract} modifier; {@code false} otherwise.</description>
					</attribute>
				</comment>
				<params>
					<param name="mod" comment="a set of modifiers" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="isStrict" returncomment="{@code true} if {@code mod} includes the
 {@code strictfp} modifier; {@code false} otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Return {@code true} if the integer argument includes the
 {@code strictfp} modifier, {@code false} otherwise.</description>
					<attribute name="@param">
						<description>mod a set of modifiers</description>
					</attribute>
					<attribute name="@return">
						<description>{@code true} if {@code mod} includes the
 {@code strictfp} modifier; {@code false} otherwise.</description>
					</attribute>
				</comment>
				<params>
					<param name="mod" comment="a set of modifiers" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="toString" returncomment="a string representation of the set of modifiers
 represented by {@code mod}" fulltype="java.lang.String" type="String">
				<comment>
					<description>Return a string describing the access modifier flags in
 the specified modifier. For example:
 &lt;blockquote&gt;&lt;pre&gt;
    public final synchronized strictfp
 &lt;/pre&gt;&lt;/blockquote&gt;
 The modifier names are returned in an order consistent with the
 suggested modifier orderings given in &lt;a
 href=&quot;http://java.sun.com/docs/books/jls/second_edition/html/j.title.doc.html&quot;&gt;&lt;em&gt;The
 Java Language Specification, Second Edition&lt;/em&gt;&lt;/a&gt; sections
 &lt;a href=&quot;http://java.sun.com/docs/books/jls/second_edition/html/classes.doc.html#21613&quot;&gt;&amp;sect;8.1.1&lt;/a&gt;,
 &lt;a href=&quot;http://java.sun.com/docs/books/jls/second_edition/html/classes.doc.html#78091&quot;&gt;&amp;sect;8.3.1&lt;/a&gt;,
 &lt;a href=&quot;http://java.sun.com/docs/books/jls/second_edition/html/classes.doc.html#78188&quot;&gt;&amp;sect;8.4.3&lt;/a&gt;,
 &lt;a href=&quot;http://java.sun.com/docs/books/jls/second_edition/html/classes.doc.html#42018&quot;&gt;&amp;sect;8.8.3&lt;/a&gt;, and
 &lt;a href=&quot;http://java.sun.com/docs/books/jls/second_edition/html/interfaces.doc.html#235947&quot;&gt;&amp;sect;9.1.1&lt;/a&gt;.
 The full modifier ordering used by this method is:
 &lt;blockquote&gt; {@code
 public protected private abstract static final transient
 volatile synchronized native strictfp
 interface } &lt;/blockquote&gt;
 The {@code interface} modifier discussed in this class is
 not a true modifier in the Java language and it appears after
 all other modifiers listed by this method.  This method may
 return a string of modifiers that are not valid modifiers of a
 Java entity; in other words, no checking is done on the
 possible validity of the combination of modifiers represented
 by the input.</description>
					<attribute name="@param">
						<description>mod a set of modifiers</description>
					</attribute>
					<attribute name="@return">
						<description>a string representation of the set of modifiers
 represented by {@code mod}</description>
					</attribute>
				</comment>
				<params>
					<param name="mod" comment="a set of modifiers" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="package-private" name="isSynthetic" fulltype="boolean" type="boolean">
				<params>
					<param name="mod" fulltype="int" type="int" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass final="true" superclass="BasicPermission" visibility="public" package="java.lang.reflect" serializable="true" superclassfulltype="java.security.BasicPermission" fulltype="java.lang.reflect.ReflectPermission" type="ReflectPermission">
		<comment>
			<description>The Permission class for reflective operations.  A
 ReflectPermission is a &lt;em&gt;named permission&lt;/em&gt; and has no
 actions.  The only name currently defined is {@code suppressAccessChecks},
 which allows suppressing the standard Java language access checks
 -- for public, default (package) access, protected, and private
 members -- performed by reflected objects at their point of use.
 &lt;P&gt;
 The following table
 provides a summary description of what the permission allows,
 and discusses the risks of granting code the permission.
 &lt;P&gt;

 &lt;table border=1 cellpadding=5 summary=&quot;Table shows permission target name, what the permission allows, and associated risks&quot;&gt;
 &lt;tr&gt;
 &lt;th&gt;Permission Target Name&lt;/th&gt;
 &lt;th&gt;What the Permission Allows&lt;/th&gt;
 &lt;th&gt;Risks of Allowing this Permission&lt;/th&gt;
 &lt;/tr&gt;

 &lt;tr&gt;
   &lt;td&gt;suppressAccessChecks&lt;/td&gt;
   &lt;td&gt;ability to access
 fields and invoke methods in a class. Note that this includes
 not only public, but protected and private fields and methods as well.&lt;/td&gt;
   &lt;td&gt;This is dangerous in that information (possibly confidential) and
 methods normally unavailable would be accessible to malicious code.&lt;/td&gt;
 &lt;/tr&gt;

 &lt;/table&gt;</description>
			<attribute name="@see">
				<description>java.security.Permission</description>
			</attribute>
			<attribute name="@see">
				<description>java.security.BasicPermission</description>
			</attribute>
			<attribute name="@see">
				<description>AccessibleObject</description>
			</attribute>
			<attribute name="@see">
				<description>Field#get</description>
			</attribute>
			<attribute name="@see">
				<description>Field#set</description>
			</attribute>
			<attribute name="@see">
				<description>Method#invoke</description>
			</attribute>
			<attribute name="@see">
				<description>Constructor#newInstance</description>
			</attribute>
			<attribute name="@since">
				<description>1.2</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="7412737110241507485" visibility="private" name="serialVersionUID" constexpr="7412737110241507485L" fulltype="long" type="long" />
		</fields>
		<methods>
			<constructor visibility="public" name="ReflectPermission">
				<comment>
					<description>Constructs a ReflectPermission with the specified name.</description>
					<attribute name="@param">
						<description>name the name of the ReflectPermission</description>
					</attribute>
					<attribute name="@throws">
						<description>NullPointerException if {@code name} is {@code null}.</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalArgumentException if {@code name} is empty.</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="the name of the ReflectPermission" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="ReflectPermission">
				<comment>
					<description>Constructs a ReflectPermission with the specified name and actions.
 The actions should be null; they are ignored.</description>
					<attribute name="@param">
						<description>name the name of the ReflectPermission</description>
					</attribute>
					<attribute name="@param">
						<description>actions should be null</description>
					</attribute>
					<attribute name="@throws">
						<description>NullPointerException if {@code name} is {@code null}.</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalArgumentException if {@code name} is empty.</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="the name of the ReflectPermission" fulltype="java.lang.String" type="String" />
					<param name="actions" comment="should be null" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass final="true" superclass="Number" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.Number" fulltype="java.lang.Short" type="Short">
		<implements>
			<interface fulltype="java.lang.Comparable" type="Comparable" />
		</implements>
		<comment>
			<description>The {@code Short} class wraps a value of primitive type {@code
 short} in an object.  An object of type {@code Short} contains a
 single field whose type is {@code short}.

 &lt;p&gt;In addition, this class provides several methods for converting
 a {@code short} to a {@code String} and a {@code String} to a
 {@code short}, as well as other constants and methods useful when
 dealing with a {@code short}.</description>
			<attribute name="@author">
				<description>Nakul Saraiya</description>
			</attribute>
			<attribute name="@author">
				<description>Joseph D. Darcy</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.Number</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.1</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="-32768" visibility="public" name="MIN_VALUE" constexpr="-32768" fulltype="short" type="short">
				<comment>
					<description>A constant holding the minimum value a {@code short} can
 have, -2&lt;sup&gt;15&lt;/sup&gt;.</description>
				</comment>
			</field>
			<field final="true" static="true" const="32767" visibility="public" name="MAX_VALUE" constexpr="32767" fulltype="short" type="short">
				<comment>
					<description>A constant holding the maximum value a {@code short} can
 have, 2&lt;sup&gt;15&lt;/sup&gt;-1.</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="TYPE" fulltype="java.lang.Class" type="Class">
				<comment>
					<description>The {@code Class} instance representing the primitive type
 {@code short}.</description>
				</comment>
			</field>
			<field final="true" visibility="private" name="value" fulltype="short" type="short">
				<comment>
					<description>The value of the {@code Short}.</description>
					<attribute name="@serial" />
				</comment>
			</field>
			<field final="true" static="true" const="16" visibility="public" name="SIZE" constexpr="16" fulltype="int" type="int">
				<comment>
					<description>The number of bits used to represent a {@code short} value in two&apos;s
 complement binary form.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</field>
			<field final="true" static="true" const="7515723908773894738" visibility="private" name="serialVersionUID" constexpr="7515723908773894738L" fulltype="long" type="long">
				<comment>
					<description>use serialVersionUID from JDK 1.1. for interoperability</description>
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="public" name="Short">
				<comment>
					<description>Constructs a newly allocated {@code Short} object that
 represents the specified {@code short} value.</description>
					<attribute name="@param">
						<description>value     the value to be represented by the
                  {@code Short}.</description>
					</attribute>
				</comment>
				<params>
					<param name="value" comment="the value to be represented by the
                  {@code Short}." fulltype="short" type="short" />
				</params>
			</constructor>
			<constructor visibility="public" name="Short">
				<comment>
					<description>Constructs a newly allocated {@code Short} object that
 represents the {@code short} value indicated by the
 {@code String} parameter. The string is converted to a
 {@code short} value in exactly the manner used by the
 {@code parseShort} method for radix 10.</description>
					<attribute name="@param">
						<description>s the {@code String} to be converted to a
          {@code Short}</description>
					</attribute>
					<attribute name="@throws">
						<description>NumberFormatException If the {@code String}
          does not contain a parsable {@code short}.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Short#parseShort(java.lang.String, int)</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the {@code String} to be converted to a
          {@code Short}" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception comment="If the {@code String}
          does not contain a parsable {@code short}." fulltype="java.lang.NumberFormatException" type="NumberFormatException" />
				</exceptions>
			</constructor>
			<method static="true" visibility="public" name="toString" returncomment="the string representation of the specified {@code short}" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a new {@code String} object representing the
 specified {@code short}. The radix is assumed to be 10.</description>
					<attribute name="@param">
						<description>s the {@code short} to be converted</description>
					</attribute>
					<attribute name="@return">
						<description>the string representation of the specified {@code short}</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Integer#toString(int)</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the {@code short} to be converted" fulltype="short" type="short" />
				</params>
			</method>
			<method static="true" visibility="public" name="parseShort" returncomment="the {@code short} represented by the string
                  argument in the specified radix." fulltype="short" type="short">
				<comment>
					<description>Parses the string argument as a signed {@code short} in the
 radix specified by the second argument. The characters in the
 string must all be digits, of the specified radix (as
 determined by whether {@link java.lang.Character#digit(char,
 int)} returns a nonnegative value) except that the first
 character may be an ASCII minus sign {@code &apos;-&apos;}
 (&lt;code&gt;&apos;&amp;#92;u002D&apos;&lt;/code&gt;) to indicate a negative value.  The
 resulting {@code short} value is returned.

 &lt;p&gt;An exception of type {@code NumberFormatException} is
 thrown if any of the following situations occurs:
 &lt;ul&gt;
 &lt;li&gt; The first argument is {@code null} or is a string of
 length zero.

 &lt;li&gt; The radix is either smaller than {@link
 java.lang.Character#MIN_RADIX} or larger than {@link
 java.lang.Character#MAX_RADIX}.

 &lt;li&gt; Any character of the string is not a digit of the
 specified radix, except that the first character may be a minus
 sign {@code &apos;-&apos;} (&lt;code&gt;&apos;&amp;#92;u002D&apos;&lt;/code&gt;) provided that the
 string is longer than length 1.

 &lt;li&gt; The value represented by the string is not a value of type
 {@code short}.
 &lt;/ul&gt;</description>
					<attribute name="@param">
						<description>s         the {@code String} containing the
                  {@code short} representation to be parsed</description>
					</attribute>
					<attribute name="@param">
						<description>radix     the radix to be used while parsing {@code s}</description>
					</attribute>
					<attribute name="@return">
						<description>the {@code short} represented by the string
                  argument in the specified radix.</description>
					</attribute>
					<attribute name="@throws">
						<description>NumberFormatException If the {@code String}
                  does not contain a parsable {@code short}.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the {@code String} containing the
                  {@code short} representation to be parsed" fulltype="java.lang.String" type="String" />
					<param name="radix" comment="the radix to be used while parsing {@code s}" fulltype="int" type="int" />
				</params>
				<exceptions>
					<exception comment="If the {@code String}
                  does not contain a parsable {@code short}." fulltype="java.lang.NumberFormatException" type="NumberFormatException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="parseShort" returncomment="the {@code short} value represented by the
          argument in decimal." fulltype="short" type="short">
				<comment>
					<description>Parses the string argument as a signed decimal {@code
 short}. The characters in the string must all be decimal
 digits, except that the first character may be an ASCII minus
 sign {@code &apos;-&apos;} (&lt;code&gt;&apos;&amp;#92;u002D&apos;&lt;/code&gt;) to indicate a
 negative value.  The resulting {@code short} value is returned,
 exactly as if the argument and the radix 10 were given as
 arguments to the {@link #parseShort(java.lang.String, int)}
 method.</description>
					<attribute name="@param">
						<description>s a {@code String} containing the {@code short}
          representation to be parsed</description>
					</attribute>
					<attribute name="@return">
						<description>the {@code short} value represented by the
          argument in decimal.</description>
					</attribute>
					<attribute name="@throws">
						<description>NumberFormatException If the string does not
          contain a parsable {@code short}.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="a {@code String} containing the {@code short}
          representation to be parsed" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception comment="If the string does not
          contain a parsable {@code short}." fulltype="java.lang.NumberFormatException" type="NumberFormatException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="valueOf" returncomment="a {@code Short} object holding the value
                  represented by the string argument in the
                  specified radix." fulltype="java.lang.Short" type="Short">
				<comment>
					<description>Returns a {@code Short} object holding the value
 extracted from the specified {@code String} when parsed
 with the radix given by the second argument. The first argument
 is interpreted as representing a signed {@code short} in
 the radix specified by the second argument, exactly as if the
 argument were given to the {@link #parseShort(java.lang.String,
 int)} method. The result is a {@code Short} object that
 represents the {@code short} value specified by the string.

 &lt;p&gt;In other words, this method returns a {@code Short} object
 equal to the value of:

 &lt;blockquote&gt;
  {@code new Short(Short.parseShort(s, radix))}
 &lt;/blockquote&gt;</description>
					<attribute name="@param">
						<description>s         the string to be parsed</description>
					</attribute>
					<attribute name="@param">
						<description>radix     the radix to be used in interpreting {@code s}</description>
					</attribute>
					<attribute name="@return">
						<description>a {@code Short} object holding the value
                  represented by the string argument in the
                  specified radix.</description>
					</attribute>
					<attribute name="@throws">
						<description>NumberFormatException If the {@code String} does
                  not contain a parsable {@code short}.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the string to be parsed" fulltype="java.lang.String" type="String" />
					<param name="radix" comment="the radix to be used in interpreting {@code s}" fulltype="int" type="int" />
				</params>
				<exceptions>
					<exception comment="If the {@code String} does
                  not contain a parsable {@code short}." fulltype="java.lang.NumberFormatException" type="NumberFormatException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="valueOf" returncomment="a {@code Short} object holding the value
          represented by the string argument" fulltype="java.lang.Short" type="Short">
				<comment>
					<description>Returns a {@code Short} object holding the
 value given by the specified {@code String}. The argument
 is interpreted as representing a signed decimal
 {@code short}, exactly as if the argument were given to
 the {@link #parseShort(java.lang.String)} method. The result is
 a {@code Short} object that represents the
 {@code short} value specified by the string.

 &lt;p&gt;In other words, this method returns a {@code Short} object
 equal to the value of:

 &lt;blockquote&gt;
  {@code new Short(Short.parseShort(s))}
 &lt;/blockquote&gt;</description>
					<attribute name="@param">
						<description>s the string to be parsed</description>
					</attribute>
					<attribute name="@return">
						<description>a {@code Short} object holding the value
          represented by the string argument</description>
					</attribute>
					<attribute name="@throws">
						<description>NumberFormatException If the {@code String} does
          not contain a parsable {@code short}.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the string to be parsed" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception comment="If the {@code String} does
          not contain a parsable {@code short}." fulltype="java.lang.NumberFormatException" type="NumberFormatException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="valueOf" returncomment="a {@code Short} instance representing {@code s}." fulltype="java.lang.Short" type="Short">
				<comment>
					<description>Returns a {@code Short} instance representing the specified
 {@code short} value.
 If a new {@code Short} instance is not required, this method
 should generally be used in preference to the constructor
 {@link #Short(short)}, as this method is likely to yield
 significantly better space and time performance by caching
 frequently requested values.</description>
					<attribute name="@param">
						<description>s a short value.</description>
					</attribute>
					<attribute name="@return">
						<description>a {@code Short} instance representing {@code s}.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="a short value." fulltype="short" type="short" />
				</params>
			</method>
			<method static="true" visibility="public" name="decode" returncomment="a {@code Short} object holding the {@code short}
            value represented by {@code nm}" fulltype="java.lang.Short" type="Short">
				<comment>
					<description>Decodes a {@code String} into a {@code Short}.
 Accepts decimal, hexadecimal, and octal numbers given by
 the following grammar:

 &lt;blockquote&gt;
 &lt;dl&gt;
 &lt;dt&gt;&lt;i&gt;DecodableString:&lt;/i&gt;
 &lt;dd&gt;&lt;i&gt;Sign&lt;sub&gt;opt&lt;/sub&gt; DecimalNumeral&lt;/i&gt;
 &lt;dd&gt;&lt;i&gt;Sign&lt;sub&gt;opt&lt;/sub&gt;&lt;/i&gt; {@code 0x} &lt;i&gt;HexDigits&lt;/i&gt;
 &lt;dd&gt;&lt;i&gt;Sign&lt;sub&gt;opt&lt;/sub&gt;&lt;/i&gt; {@code 0X} &lt;i&gt;HexDigits&lt;/i&gt;
 &lt;dd&gt;&lt;i&gt;Sign&lt;sub&gt;opt&lt;/sub&gt;&lt;/i&gt; {@code #} &lt;i&gt;HexDigits&lt;/i&gt;
 &lt;dd&gt;&lt;i&gt;Sign&lt;sub&gt;opt&lt;/sub&gt;&lt;/i&gt; {@code 0} &lt;i&gt;OctalDigits&lt;/i&gt;
 &lt;p&gt;
 &lt;dt&gt;&lt;i&gt;Sign:&lt;/i&gt;
 &lt;dd&gt;{@code -}
 &lt;/dl&gt;
 &lt;/blockquote&gt;

 &lt;i&gt;DecimalNumeral&lt;/i&gt;, &lt;i&gt;HexDigits&lt;/i&gt;, and &lt;i&gt;OctalDigits&lt;/i&gt;
 are defined in &lt;a href=&quot;http://java.sun.com/docs/books/jls/second_edition/html/lexical.doc.html#48282&quot;&gt;&amp;sect;3.10.1&lt;/a&gt;
 of the &lt;a href=&quot;http://java.sun.com/docs/books/jls/html/&quot;&gt;Java
 Language Specification&lt;/a&gt;.

 &lt;p&gt;The sequence of characters following an (optional) negative
 sign and/or radix specifier (&quot;{@code 0x}&quot;, &quot;{@code 0X}&quot;,
 &quot;{@code #}&quot;, or leading zero) is parsed as by the {@code
 Short.parseShort} method with the indicated radix (10, 16, or
 8).  This sequence of characters must represent a positive
 value or a {@link NumberFormatException} will be thrown.  The
 result is negated if first character of the specified {@code
 String} is the minus sign.  No whitespace characters are
 permitted in the {@code String}.</description>
					<attribute name="@param">
						<description>nm the {@code String} to decode.</description>
					</attribute>
					<attribute name="@return">
						<description>a {@code Short} object holding the {@code short}
            value represented by {@code nm}</description>
					</attribute>
					<attribute name="@throws">
						<description>NumberFormatException  if the {@code String} does not
            contain a parsable {@code short}.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Short#parseShort(java.lang.String, int)</description>
					</attribute>
				</comment>
				<params>
					<param name="nm" comment="the {@code String} to decode." fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception comment="if the {@code String} does not
            contain a parsable {@code short}." fulltype="java.lang.NumberFormatException" type="NumberFormatException" />
				</exceptions>
			</method>
			<method visibility="public" name="byteValue" fulltype="byte" type="byte">
				<comment>
					<description>Returns the value of this {@code Short} as a
 {@code byte}.</description>
				</comment>
			</method>
			<method visibility="public" name="shortValue" fulltype="short" type="short">
				<comment>
					<description>Returns the value of this {@code Short} as a
 {@code short}.</description>
				</comment>
			</method>
			<method visibility="public" name="intValue" fulltype="int" type="int">
				<comment>
					<description>Returns the value of this {@code Short} as an
 {@code int}.</description>
				</comment>
			</method>
			<method visibility="public" name="longValue" fulltype="long" type="long">
				<comment>
					<description>Returns the value of this {@code Short} as a
 {@code long}.</description>
				</comment>
			</method>
			<method visibility="public" name="floatValue" fulltype="float" type="float">
				<comment>
					<description>Returns the value of this {@code Short} as a
 {@code float}.</description>
				</comment>
			</method>
			<method visibility="public" name="doubleValue" fulltype="double" type="double">
				<comment>
					<description>Returns the value of this {@code Short} as a
 {@code double}.</description>
				</comment>
			</method>
			<method visibility="public" name="toString" returncomment="a string representation of the value of this object in
          base&amp;nbsp;10." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a {@code String} object representing this
 {@code Short}&apos;s value.  The value is converted to signed
 decimal representation and returned as a string, exactly as if
 the {@code short} value were given as an argument to the
 {@link java.lang.Short#toString(short)} method.</description>
					<attribute name="@return">
						<description>a string representation of the value of this object in
          base&amp;nbsp;10.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="hashCode" fulltype="int" type="int">
				<comment>
					<description>Returns a hash code for this {@code Short}.</description>
				</comment>
			</method>
			<method visibility="public" name="equals" returncomment="{@code true} if the objects are the same;
                  {@code false} otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Compares this object to the specified object.  The result is
 {@code true} if and only if the argument is not
 {@code null} and is a {@code Short} object that
 contains the same {@code short} value as this object.</description>
					<attribute name="@param">
						<description>obj       the object to compare with</description>
					</attribute>
					<attribute name="@return">
						<description>{@code true} if the objects are the same;
                  {@code false} otherwise.</description>
					</attribute>
				</comment>
				<params>
					<param name="obj" comment="the object to compare with" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="compareTo" returncomment="the value {@code 0} if this {@code Short} is
          equal to the argument {@code Short}; a value less than
          {@code 0} if this {@code Short} is numerically less
          than the argument {@code Short}; and a value greater than
           {@code 0} if this {@code Short} is numerically
           greater than the argument {@code Short} (signed
           comparison)." fulltype="int" type="int">
				<comment>
					<description>Compares two {@code Short} objects numerically.</description>
					<attribute name="@param">
						<description>anotherShort   the {@code Short} to be compared.</description>
					</attribute>
					<attribute name="@return">
						<description>the value {@code 0} if this {@code Short} is
          equal to the argument {@code Short}; a value less than
          {@code 0} if this {@code Short} is numerically less
          than the argument {@code Short}; and a value greater than
           {@code 0} if this {@code Short} is numerically
           greater than the argument {@code Short} (signed
           comparison).</description>
					</attribute>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
				<params>
					<param name="anotherShort" comment="the {@code Short} to be compared." fulltype="java.lang.Short" type="Short" />
				</params>
			</method>
			<method static="true" visibility="public" name="reverseBytes" returncomment="the value obtained by reversing (or, equivalently, swapping)
     the bytes in the specified {@code short} value." fulltype="short" type="short">
				<comment>
					<description>Returns the value obtained by reversing the order of the bytes in the
 two&apos;s complement representation of the specified {@code short} value.</description>
					<attribute name="@return">
						<description>the value obtained by reversing (or, equivalently, swapping)
     the bytes in the specified {@code short} value.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="i" fulltype="short" type="short" />
				</params>
			</method>
		</methods>
		<jelclass superclass="Object" visibility="private" package="java.lang" superclassfulltype="java.lang.Object" fulltype="java.lang.Short.ShortCache" type="Short.ShortCache">
			<fields>
				<field final="true" static="true" visibility="package-private" name="cache" fulltype="java.lang.Short[]" type="Short" />
			</fields>
			<methods>
				<constructor visibility="private" name="Short.ShortCache" />
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="Object" visibility="private" package="java.lang" superclassfulltype="java.lang.Object" fulltype="java.lang.Short.ShortCache" type="Short.ShortCache">
		<fields>
			<field final="true" static="true" visibility="package-private" name="cache" fulltype="java.lang.Short[]" type="Short" />
		</fields>
		<methods>
			<constructor visibility="private" name="Short.ShortCache" />
		</methods>
	</jelclass>
	<jelclass superclass="IncompatibleClassChangeError" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.IncompatibleClassChangeError" fulltype="java.lang.IllegalAccessError" type="IllegalAccessError">
		<comment>
			<description>Thrown if an application attempts to access or modify a field, or
 to call a method that it does not have access to.
 &lt;p&gt;
 Normally, this error is caught by the compiler; this error can
 only occur at run time if the definition of a class has
 incompatibly changed.</description>
			<attribute name="@author">
				<description>unascribed</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.0</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="IllegalAccessError">
				<comment>
					<description>Constructs an &lt;code&gt;IllegalAccessError&lt;/code&gt; with no detail message.</description>
				</comment>
			</constructor>
			<constructor visibility="public" name="IllegalAccessError">
				<comment>
					<description>Constructs an &lt;code&gt;IllegalAccessError&lt;/code&gt; with the specified
 detail message.</description>
					<attribute name="@param">
						<description>s   the detail message.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the detail message." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="package-private" package="java.lang" superclassfulltype="java.lang.Object" fulltype="java.lang.Shutdown" type="Shutdown">
		<comment>
			<description>Package-private utility class containing data structures and logic
 governing the virtual-machine shutdown sequence.</description>
			<attribute name="@author">
				<description>Mark Reinhold</description>
			</attribute>
			<attribute name="@since">
				<description>1.3</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="0" visibility="private" name="RUNNING" constexpr="0" fulltype="int" type="int" />
			<field final="true" static="true" const="1" visibility="private" name="HOOKS" constexpr="1" fulltype="int" type="int" />
			<field final="true" static="true" const="2" visibility="private" name="FINALIZERS" constexpr="2" fulltype="int" type="int" />
			<field static="true" visibility="private" name="state" fulltype="int" type="int" />
			<field static="true" visibility="private" name="runFinalizersOnExit" fulltype="boolean" type="boolean" />
			<field static="true" visibility="private" name="hooks" fulltype="java.util.ArrayList" type="ArrayList" />
			<field static="true" visibility="private" name="lock" fulltype="java.lang.Object" type="Object" />
			<field static="true" visibility="private" name="haltLock" fulltype="java.lang.Object" type="Object" />
		</fields>
		<methods>
			<constructor visibility="package-private" name="Shutdown" />
			<method static="true" visibility="package-private" name="setRunFinalizersOnExit" fulltype="void" type="void">
				<params>
					<param name="run" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method static="true" visibility="package-private" name="add" fulltype="void" type="void">
				<params>
					<param name="hook" fulltype="java.lang.Runnable" type="Runnable" />
				</params>
			</method>
			<method static="true" visibility="package-private" name="remove" fulltype="boolean" type="boolean">
				<params>
					<param name="hook" fulltype="java.lang.Runnable" type="Runnable" />
				</params>
			</method>
			<method static="true" visibility="private" name="runHooks" fulltype="void" type="void" />
			<method static="true" visibility="package-private" name="halt" fulltype="void" type="void">
				<params>
					<param name="status" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="package-private" name="halt0" fulltype="void" type="void">
				<params>
					<param name="status" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="private" name="runAllFinalizers" fulltype="void" type="void" />
			<method static="true" visibility="private" name="sequence" fulltype="void" type="void" />
			<method static="true" visibility="package-private" name="exit" fulltype="void" type="void">
				<params>
					<param name="status" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="package-private" name="shutdown" fulltype="void" type="void" />
		</methods>
		<jelclass superclass="Object" visibility="private" package="java.lang" superclassfulltype="java.lang.Object" fulltype="java.lang.Shutdown.Lock" type="Shutdown.Lock">
			<methods>
				<constructor visibility="private" name="Shutdown.Lock" />
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="Object" visibility="private" package="java.lang" superclassfulltype="java.lang.Object" fulltype="java.lang.Shutdown.Lock" type="Shutdown.Lock">
		<methods>
			<constructor visibility="private" name="Shutdown.Lock" />
		</methods>
	</jelclass>
	<jelclass superclass="LinkageError" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.LinkageError" fulltype="java.lang.NoClassDefFoundError" type="NoClassDefFoundError">
		<comment>
			<description>Thrown if the Java Virtual Machine or a &lt;code&gt;ClassLoader&lt;/code&gt; instance
 tries to load in the definition of a class (as part of a normal method call
 or as part of creating a new instance using the &lt;code&gt;new&lt;/code&gt; expression)
 and no definition of the class could be found.
 &lt;p&gt;
 The searched-for class definition existed when the currently
 executing class was compiled, but the definition can no longer be
 found.</description>
			<attribute name="@author">
				<description>unascribed</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.0</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="NoClassDefFoundError">
				<comment>
					<description>Constructs a &lt;code&gt;NoClassDefFoundError&lt;/code&gt; with no detail message.</description>
				</comment>
			</constructor>
			<constructor visibility="public" name="NoClassDefFoundError">
				<comment>
					<description>Constructs a &lt;code&gt;NoClassDefFoundError&lt;/code&gt; with the specified
 detail message.</description>
					<attribute name="@param">
						<description>s   the detail message.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the detail message." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass superclass="RuntimeException" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.RuntimeException" fulltype="java.lang.IndexOutOfBoundsException" type="IndexOutOfBoundsException">
		<comment>
			<description>Thrown to indicate that an index of some sort (such as to an array, to a
 string, or to a vector) is out of range.
 &lt;p&gt;
 Applications can subclass this class to indicate similar exceptions.</description>
			<attribute name="@author">
				<description>Frank Yellin</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.0</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="IndexOutOfBoundsException">
				<comment>
					<description>Constructs an &lt;code&gt;IndexOutOfBoundsException&lt;/code&gt; with no
 detail message.</description>
				</comment>
			</constructor>
			<constructor visibility="public" name="IndexOutOfBoundsException">
				<comment>
					<description>Constructs an &lt;code&gt;IndexOutOfBoundsException&lt;/code&gt; with the
 specified detail message.</description>
					<attribute name="@param">
						<description>s   the detail message.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the detail message." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass superclass="Exception" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.Exception" fulltype="java.lang.ClassNotFoundException" type="ClassNotFoundException">
		<comment>
			<description>Thrown when an application tries to load in a class through its
 string name using:
 &lt;ul&gt;
 &lt;li&gt;The &lt;code&gt;forName&lt;/code&gt; method in class &lt;code&gt;Class&lt;/code&gt;.
 &lt;li&gt;The &lt;code&gt;findSystemClass&lt;/code&gt; method in class
     &lt;code&gt;ClassLoader&lt;/code&gt; .
 &lt;li&gt;The &lt;code&gt;loadClass&lt;/code&gt; method in class &lt;code&gt;ClassLoader&lt;/code&gt;.
 &lt;/ul&gt;
 &lt;p&gt;
 but no definition for the class with the specified name could be found.

 &lt;p&gt;As of release 1.4, this exception has been retrofitted to conform to
 the general purpose exception-chaining mechanism.  The &quot;optional exception
 that was raised while loading the class&quot; that may be provided at
 construction time and accessed via the {@link #getException()} method is
 now known as the &lt;i&gt;cause&lt;/i&gt;, and may be accessed via the {@link
 Throwable#getCause()} method, as well as the aforementioned &quot;legacy method.&quot;</description>
			<attribute name="@author">
				<description>unascribed</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.Class#forName(java.lang.String)</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.ClassLoader#findSystemClass(java.lang.String)</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.ClassLoader#loadClass(java.lang.String, boolean)</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.0</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="9176873029745254542" visibility="private" name="serialVersionUID" constexpr="9176873029745254542L" fulltype="long" type="long">
				<comment>
					<description>use serialVersionUID from JDK 1.1.X for interoperability</description>
				</comment>
			</field>
			<field visibility="private" name="ex" fulltype="java.lang.Throwable" type="Throwable">
				<comment>
					<description>This field holds the exception ex if the
 ClassNotFoundException(String s, Throwable ex) constructor was
 used to instantiate the object</description>
					<attribute name="@serial" />
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="public" name="ClassNotFoundException">
				<comment>
					<description>Constructs a &lt;code&gt;ClassNotFoundException&lt;/code&gt; with no detail message.</description>
				</comment>
			</constructor>
			<constructor visibility="public" name="ClassNotFoundException">
				<comment>
					<description>Constructs a &lt;code&gt;ClassNotFoundException&lt;/code&gt; with the
 specified detail message.</description>
					<attribute name="@param">
						<description>s   the detail message.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the detail message." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="ClassNotFoundException">
				<comment>
					<description>Constructs a &lt;code&gt;ClassNotFoundException&lt;/code&gt; with the
 specified detail message and optional exception that was
 raised while loading the class.</description>
					<attribute name="@param">
						<description>s the detail message</description>
					</attribute>
					<attribute name="@param">
						<description>ex the exception that was raised while loading the class</description>
					</attribute>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the detail message" fulltype="java.lang.String" type="String" />
					<param name="ex" comment="the exception that was raised while loading the class" fulltype="java.lang.Throwable" type="Throwable" />
				</params>
			</constructor>
			<method visibility="public" name="getException" returncomment="the &lt;code&gt;Exception&lt;/code&gt; that was raised while loading a class" fulltype="java.lang.Throwable" type="Throwable">
				<comment>
					<description>Returns the exception that was raised if an error occurred while
 attempting to load the class. Otherwise, returns &lt;tt&gt;null&lt;/tt&gt;.

 &lt;p&gt;This method predates the general-purpose exception chaining facility.
 The {@link Throwable#getCause()} method is now the preferred means of
 obtaining this information.</description>
					<attribute name="@return">
						<description>the &lt;code&gt;Exception&lt;/code&gt; that was raised while loading a class</description>
					</attribute>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getCause" returncomment="the cause of this exception." fulltype="java.lang.Throwable" type="Throwable">
				<comment>
					<description>Returns the cause of this exception (the exception that was raised
 if an error occurred while attempting to load the class; otherwise
 &lt;tt&gt;null&lt;/tt&gt;).</description>
					<attribute name="@return">
						<description>the cause of this exception.</description>
					</attribute>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass final="true" superclass="Object" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.Object" fulltype="java.lang.StackTraceElement" type="StackTraceElement">
		<implements>
			<interface fulltype="java.io.Serializable" type="Serializable" />
		</implements>
		<comment>
			<description>An element in a stack trace, as returned by {@link
 Throwable#getStackTrace()}.  Each element represents a single stack frame.
 All stack frames except for the one at the top of the stack represent
 a method invocation.  The frame at the top of the stack represents the
 execution point at which the stack trace was generated.  Typically,
 this is the point at which the throwable corresponding to the stack trace
 was created.</description>
			<attribute name="@since">
				<description>1.4</description>
			</attribute>
			<attribute name="@author">
				<description>Josh Bloch</description>
			</attribute>
		</comment>
		<fields>
			<field visibility="private" name="declaringClass" fulltype="java.lang.String" type="String" />
			<field visibility="private" name="methodName" fulltype="java.lang.String" type="String" />
			<field visibility="private" name="fileName" fulltype="java.lang.String" type="String" />
			<field visibility="private" name="lineNumber" fulltype="int" type="int" />
			<field final="true" static="true" const="6992337162326171013" visibility="private" name="serialVersionUID" constexpr="6992337162326171013L" fulltype="long" type="long" />
		</fields>
		<methods>
			<constructor visibility="public" name="StackTraceElement">
				<comment>
					<description>Creates a stack trace element representing the specified execution
 point.</description>
					<attribute name="@param">
						<description>declaringClass the fully qualified name of the class containing
        the execution point represented by the stack trace element</description>
					</attribute>
					<attribute name="@param">
						<description>methodName the name of the method containing the execution point
        represented by the stack trace element</description>
					</attribute>
					<attribute name="@param">
						<description>fileName the name of the file containing the execution point
         represented by the stack trace element, or &lt;tt&gt;null&lt;/tt&gt; if
         this information is unavailable</description>
					</attribute>
					<attribute name="@param">
						<description>lineNumber the line number of the source line containing the
         execution point represented by this stack trace element, or
         a negative number if this information is unavailable. A value
         of -2 indicates that the method containing the execution point
         is a native method</description>
					</attribute>
					<attribute name="@throws">
						<description>NullPointerException if &lt;tt&gt;declaringClass&lt;/tt&gt; or
         &lt;tt&gt;methodName&lt;/tt&gt; is null</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="declaringClass" comment="the fully qualified name of the class containing
        the execution point represented by the stack trace element" fulltype="java.lang.String" type="String" />
					<param name="methodName" comment="the name of the method containing the execution point
        represented by the stack trace element" fulltype="java.lang.String" type="String" />
					<param name="fileName" comment="the name of the file containing the execution point
         represented by the stack trace element, or &lt;tt&gt;null&lt;/tt&gt; if
         this information is unavailable" fulltype="java.lang.String" type="String" />
					<param name="lineNumber" comment="the line number of the source line containing the
         execution point represented by this stack trace element, or
         a negative number if this information is unavailable. A value
         of -2 indicates that the method containing the execution point
         is a native method" fulltype="int" type="int" />
				</params>
			</constructor>
			<method visibility="public" name="getFileName" returncomment="the name of the file containing the execution point
         represented by this stack trace element, or &lt;tt&gt;null&lt;/tt&gt; if
         this information is unavailable." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the name of the source file containing the execution point
 represented by this stack trace element.  Generally, this corresponds
 to the &lt;tt&gt;SourceFile&lt;/tt&gt; attribute of the relevant &lt;tt&gt;class&lt;/tt&gt;
 file (as per &lt;i&gt;The Java Virtual Machine Specification&lt;/i&gt;, Section
 4.7.7).  In some systems, the name may refer to some source code unit
 other than a file, such as an entry in source repository.</description>
					<attribute name="@return">
						<description>the name of the file containing the execution point
         represented by this stack trace element, or &lt;tt&gt;null&lt;/tt&gt; if
         this information is unavailable.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getLineNumber" returncomment="the line number of the source line containing the execution
         point represented by this stack trace element, or a negative
         number if this information is unavailable." fulltype="int" type="int">
				<comment>
					<description>Returns the line number of the source line containing the execution
 point represented by this stack trace element.  Generally, this is
 derived from the &lt;tt&gt;LineNumberTable&lt;/tt&gt; attribute of the relevant
 &lt;tt&gt;class&lt;/tt&gt; file (as per &lt;i&gt;The Java Virtual Machine
 Specification&lt;/i&gt;, Section 4.7.8).</description>
					<attribute name="@return">
						<description>the line number of the source line containing the execution
         point represented by this stack trace element, or a negative
         number if this information is unavailable.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getClassName" returncomment="the fully qualified name of the &lt;tt&gt;Class&lt;/tt&gt; containing
         the execution point represented by this stack trace element." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the fully qualified name of the class containing the
 execution point represented by this stack trace element.</description>
					<attribute name="@return">
						<description>the fully qualified name of the &lt;tt&gt;Class&lt;/tt&gt; containing
         the execution point represented by this stack trace element.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getMethodName" returncomment="the name of the method containing the execution point
         represented by this stack trace element." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the name of the method containing the execution point
 represented by this stack trace element.  If the execution point is
 contained in an instance or class initializer, this method will return
 the appropriate &lt;i&gt;special method name&lt;/i&gt;, &lt;tt&gt;&amp;lt;init&amp;gt;&lt;/tt&gt; or
 &lt;tt&gt;&amp;lt;clinit&amp;gt;&lt;/tt&gt;, as per Section 3.9 of &lt;i&gt;The Java Virtual
 Machine Specification&lt;/i&gt;.</description>
					<attribute name="@return">
						<description>the name of the method containing the execution point
         represented by this stack trace element.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="isNativeMethod" returncomment="&lt;tt&gt;true&lt;/tt&gt; if the method containing the execution point
         represented by this stack trace element is a native method." fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true if the method containing the execution point
 represented by this stack trace element is a native method.</description>
					<attribute name="@return">
						<description>&lt;tt&gt;true&lt;/tt&gt; if the method containing the execution point
         represented by this stack trace element is a native method.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="toString" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a string representation of this stack trace element.  The
 format of this string depends on the implementation, but the following
 examples may be regarded as typical:
 &lt;ul&gt;
 &lt;li&gt;
   &lt;tt&gt;&quot;MyClass.mash(MyClass.java:9)&quot;&lt;/tt&gt; - Here, &lt;tt&gt;&quot;MyClass&quot;&lt;/tt&gt;
   is the &lt;i&gt;fully-qualified name&lt;/i&gt; of the class containing the
   execution point represented by this stack trace element,
   &lt;tt&gt;&quot;mash&quot;&lt;/tt&gt; is the name of the method containing the execution
   point, &lt;tt&gt;&quot;MyClass.java&quot;&lt;/tt&gt; is the source file containing the
   execution point, and &lt;tt&gt;&quot;9&quot;&lt;/tt&gt; is the line number of the source
   line containing the execution point.
 &lt;li&gt;
   &lt;tt&gt;&quot;MyClass.mash(MyClass.java)&quot;&lt;/tt&gt; - As above, but the line
   number is unavailable.
 &lt;li&gt;
   &lt;tt&gt;&quot;MyClass.mash(Unknown Source)&quot;&lt;/tt&gt; - As above, but neither
   the file name nor the line  number are available.
 &lt;li&gt;
   &lt;tt&gt;&quot;MyClass.mash(Native Method)&quot;&lt;/tt&gt; - As above, but neither
   the file name nor the line  number are available, and the method
   containing the execution point is known to be a native method.
 &lt;/ul&gt;</description>
					<attribute name="@see">
						<description>Throwable#printStackTrace()</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="equals" returncomment="true if the specified object is another
         &lt;tt&gt;StackTraceElement&lt;/tt&gt; instance representing the same
         execution point as this instance." fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true if the specified object is another
 &lt;tt&gt;StackTraceElement&lt;/tt&gt; instance representing the same execution
 point as this instance.  Two stack trace elements &lt;tt&gt;a&lt;/tt&gt; and
 &lt;tt&gt;b&lt;/tt&gt; are equal if and only if:
 &lt;pre&gt;
     equals(a.getFileName(), b.getFileName()) &amp;&amp;
     a.getLineNumber() == b.getLineNumber()) &amp;&amp;
     equals(a.getClassName(), b.getClassName()) &amp;&amp;
     equals(a.getMethodName(), b.getMethodName())
 &lt;/pre&gt;
 where &lt;tt&gt;equals&lt;/tt&gt; is defined as:
 &lt;pre&gt;
     static boolean equals(Object a, Object b) {
         return a==b || (a != null &amp;&amp; a.equals(b));
     }
 &lt;/pre&gt;</description>
					<attribute name="@param">
						<description>obj the object to be compared with this stack trace element.</description>
					</attribute>
					<attribute name="@return">
						<description>true if the specified object is another
         &lt;tt&gt;StackTraceElement&lt;/tt&gt; instance representing the same
         execution point as this instance.</description>
					</attribute>
				</comment>
				<params>
					<param name="obj" comment="the object to be compared with this stack trace element." fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method static="true" visibility="private" name="eq" fulltype="boolean" type="boolean">
				<params>
					<param name="a" fulltype="java.lang.Object" type="Object" />
					<param name="b" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="hashCode" fulltype="int" type="int">
				<comment>
					<description>Returns a hash code value for this stack trace element.</description>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="package-private" package="java.lang" superclassfulltype="java.lang.Object" fulltype="java.lang.StringCoding" type="StringCoding">
		<comment>
			<description>Utility class for string encoding and decoding.</description>
		</comment>
		<fields>
			<field static="true" visibility="private" name="decoder" fulltype="java.lang.ThreadLocal" type="ThreadLocal" />
			<field static="true" visibility="private" name="encoder" fulltype="java.lang.ThreadLocal" type="ThreadLocal" />
			<field static="true" visibility="private" name="warnUnsupportedCharset" fulltype="boolean" type="boolean" />
		</fields>
		<methods>
			<constructor visibility="private" name="StringCoding" />
			<method static="true" visibility="private" name="deref" fulltype="java.lang.Object" type="Object">
				<params>
					<param name="tl" fulltype="java.lang.ThreadLocal" type="ThreadLocal" />
				</params>
			</method>
			<method static="true" visibility="private" name="set" fulltype="void" type="void">
				<params>
					<param name="tl" fulltype="java.lang.ThreadLocal" type="ThreadLocal" />
					<param name="ob" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method static="true" visibility="private" name="safeTrim" fulltype="byte[]" type="byte">
				<params>
					<param name="ba" fulltype="byte[]" type="byte" />
					<param name="len" fulltype="int" type="int" />
					<param name="cs" fulltype="java.nio.charset.Charset" type="Charset" />
				</params>
			</method>
			<method static="true" visibility="private" name="safeTrim" fulltype="char[]" type="char">
				<params>
					<param name="ca" fulltype="char[]" type="char" />
					<param name="len" fulltype="int" type="int" />
					<param name="cs" fulltype="java.nio.charset.Charset" type="Charset" />
				</params>
			</method>
			<method static="true" visibility="private" name="scale" fulltype="int" type="int">
				<params>
					<param name="len" fulltype="int" type="int" />
					<param name="expansionFactor" fulltype="float" type="float" />
				</params>
			</method>
			<method static="true" visibility="private" name="lookupCharset" fulltype="java.nio.charset.Charset" type="Charset">
				<params>
					<param name="csn" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="private" name="warnUnsupportedCharset" fulltype="void" type="void">
				<params>
					<param name="csn" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="package-private" name="decode" fulltype="char[]" type="char">
				<params>
					<param name="charsetName" fulltype="java.lang.String" type="String" />
					<param name="ba" fulltype="byte[]" type="byte" />
					<param name="off" fulltype="int" type="int" />
					<param name="len" fulltype="int" type="int" />
				</params>
				<exceptions>
					<exception fulltype="java.io.UnsupportedEncodingException" type="UnsupportedEncodingException" />
				</exceptions>
			</method>
			<method static="true" visibility="package-private" name="decode" fulltype="char[]" type="char">
				<params>
					<param name="cs" fulltype="java.nio.charset.Charset" type="Charset" />
					<param name="ba" fulltype="byte[]" type="byte" />
					<param name="off" fulltype="int" type="int" />
					<param name="len" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="package-private" name="decode" fulltype="char[]" type="char">
				<params>
					<param name="ba" fulltype="byte[]" type="byte" />
					<param name="off" fulltype="int" type="int" />
					<param name="len" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="package-private" name="encode" fulltype="byte[]" type="byte">
				<params>
					<param name="charsetName" fulltype="java.lang.String" type="String" />
					<param name="ca" fulltype="char[]" type="char" />
					<param name="off" fulltype="int" type="int" />
					<param name="len" fulltype="int" type="int" />
				</params>
				<exceptions>
					<exception fulltype="java.io.UnsupportedEncodingException" type="UnsupportedEncodingException" />
				</exceptions>
			</method>
			<method static="true" visibility="package-private" name="encode" fulltype="byte[]" type="byte">
				<params>
					<param name="cs" fulltype="java.nio.charset.Charset" type="Charset" />
					<param name="ca" fulltype="char[]" type="char" />
					<param name="off" fulltype="int" type="int" />
					<param name="len" fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="package-private" name="encode" fulltype="byte[]" type="byte">
				<params>
					<param name="ca" fulltype="char[]" type="char" />
					<param name="off" fulltype="int" type="int" />
					<param name="len" fulltype="int" type="int" />
				</params>
			</method>
		</methods>
		<jelclass superclass="Object" visibility="private" package="java.lang" superclassfulltype="java.lang.Object" fulltype="java.lang.StringCoding.StringDecoder" type="StringCoding.StringDecoder">
			<fields>
				<field final="true" visibility="private" name="requestedCharsetName" fulltype="java.lang.String" type="String" />
				<field final="true" visibility="private" name="cs" fulltype="java.nio.charset.Charset" type="Charset" />
				<field final="true" visibility="private" name="cd" fulltype="java.nio.charset.CharsetDecoder" type="CharsetDecoder" />
			</fields>
			<methods>
				<constructor visibility="private" name="StringCoding.StringDecoder">
					<params>
						<param name="cs" fulltype="java.nio.charset.Charset" type="Charset" />
						<param name="rcn" fulltype="java.lang.String" type="String" />
					</params>
				</constructor>
				<method visibility="package-private" name="charsetName" fulltype="java.lang.String" type="String" />
				<method final="true" visibility="package-private" name="requestedCharsetName" fulltype="java.lang.String" type="String" />
				<method visibility="package-private" name="decode" fulltype="char[]" type="char">
					<params>
						<param name="ba" fulltype="byte[]" type="byte" />
						<param name="off" fulltype="int" type="int" />
						<param name="len" fulltype="int" type="int" />
					</params>
				</method>
			</methods>
		</jelclass>
		<jelclass superclass="Object" visibility="private" package="java.lang" superclassfulltype="java.lang.Object" fulltype="java.lang.StringCoding.StringEncoder" type="StringCoding.StringEncoder">
			<fields>
				<field visibility="private" name="cs" fulltype="java.nio.charset.Charset" type="Charset" />
				<field visibility="private" name="ce" fulltype="java.nio.charset.CharsetEncoder" type="CharsetEncoder" />
				<field final="true" visibility="private" name="requestedCharsetName" fulltype="java.lang.String" type="String" />
			</fields>
			<methods>
				<constructor visibility="private" name="StringCoding.StringEncoder">
					<params>
						<param name="cs" fulltype="java.nio.charset.Charset" type="Charset" />
						<param name="rcn" fulltype="java.lang.String" type="String" />
					</params>
				</constructor>
				<method visibility="package-private" name="charsetName" fulltype="java.lang.String" type="String" />
				<method final="true" visibility="package-private" name="requestedCharsetName" fulltype="java.lang.String" type="String" />
				<method visibility="package-private" name="encode" fulltype="byte[]" type="byte">
					<params>
						<param name="ca" fulltype="char[]" type="char" />
						<param name="off" fulltype="int" type="int" />
						<param name="len" fulltype="int" type="int" />
					</params>
				</method>
			</methods>
		</jelclass>
	</jelclass>
	<jelclass superclass="Object" visibility="private" package="java.lang" superclassfulltype="java.lang.Object" fulltype="java.lang.StringCoding.StringDecoder" type="StringCoding.StringDecoder">
		<fields>
			<field final="true" visibility="private" name="requestedCharsetName" fulltype="java.lang.String" type="String" />
			<field final="true" visibility="private" name="cs" fulltype="java.nio.charset.Charset" type="Charset" />
			<field final="true" visibility="private" name="cd" fulltype="java.nio.charset.CharsetDecoder" type="CharsetDecoder" />
		</fields>
		<methods>
			<constructor visibility="private" name="StringCoding.StringDecoder">
				<params>
					<param name="cs" fulltype="java.nio.charset.Charset" type="Charset" />
					<param name="rcn" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="package-private" name="charsetName" fulltype="java.lang.String" type="String" />
			<method final="true" visibility="package-private" name="requestedCharsetName" fulltype="java.lang.String" type="String" />
			<method visibility="package-private" name="decode" fulltype="char[]" type="char">
				<params>
					<param name="ba" fulltype="byte[]" type="byte" />
					<param name="off" fulltype="int" type="int" />
					<param name="len" fulltype="int" type="int" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="private" package="java.lang" superclassfulltype="java.lang.Object" fulltype="java.lang.StringCoding.StringEncoder" type="StringCoding.StringEncoder">
		<fields>
			<field visibility="private" name="cs" fulltype="java.nio.charset.Charset" type="Charset" />
			<field visibility="private" name="ce" fulltype="java.nio.charset.CharsetEncoder" type="CharsetEncoder" />
			<field final="true" visibility="private" name="requestedCharsetName" fulltype="java.lang.String" type="String" />
		</fields>
		<methods>
			<constructor visibility="private" name="StringCoding.StringEncoder">
				<params>
					<param name="cs" fulltype="java.nio.charset.Charset" type="Charset" />
					<param name="rcn" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<method visibility="package-private" name="charsetName" fulltype="java.lang.String" type="String" />
			<method final="true" visibility="package-private" name="requestedCharsetName" fulltype="java.lang.String" type="String" />
			<method visibility="package-private" name="encode" fulltype="byte[]" type="byte">
				<params>
					<param name="ca" fulltype="char[]" type="char" />
					<param name="off" fulltype="int" type="int" />
					<param name="len" fulltype="int" type="int" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="RuntimeException" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.RuntimeException" fulltype="java.lang.IllegalArgumentException" type="IllegalArgumentException">
		<comment>
			<description>Thrown to indicate that a method has been passed an illegal or
 inappropriate argument.</description>
			<attribute name="@author">
				<description>unascribed</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.Thread#setPriority(int)</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.0</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="-5365630128856068164" visibility="private" name="serialVersionUID" constexpr="-5365630128856068164L" fulltype="long" type="long" />
		</fields>
		<methods>
			<constructor visibility="public" name="IllegalArgumentException">
				<comment>
					<description>Constructs an &lt;code&gt;IllegalArgumentException&lt;/code&gt; with no
 detail message.</description>
				</comment>
			</constructor>
			<constructor visibility="public" name="IllegalArgumentException">
				<comment>
					<description>Constructs an &lt;code&gt;IllegalArgumentException&lt;/code&gt; with the
 specified detail message.</description>
					<attribute name="@param">
						<description>s   the detail message.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the detail message." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="IllegalArgumentException">
				<comment>
					<description>Constructs a new exception with the specified detail message and
 cause.

 &lt;p&gt;Note that the detail message associated with &lt;code&gt;cause&lt;/code&gt; is
 &lt;i&gt;not&lt;/i&gt; automatically incorporated in this exception&apos;s detail
 message.</description>
					<attribute name="@param">
						<description>message the detail message (which is saved for later retrieval
         by the {@link Throwable#getMessage()} method).</description>
					</attribute>
					<attribute name="@param">
						<description>cause the cause (which is saved for later retrieval by the
         {@link Throwable#getCause()} method).  (A &lt;tt&gt;null&lt;/tt&gt; value
         is permitted, and indicates that the cause is nonexistent or
         unknown.)</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="message" comment="the detail message (which is saved for later retrieval
         by the {@link Throwable#getMessage()} method)." fulltype="java.lang.String" type="String" />
					<param name="cause" comment="the cause (which is saved for later retrieval by the
         {@link Throwable#getCause()} method).  (A &lt;tt&gt;null&lt;/tt&gt; value
         is permitted, and indicates that the cause is nonexistent or
         unknown.)" fulltype="java.lang.Throwable" type="Throwable" />
				</params>
			</constructor>
			<constructor visibility="public" name="IllegalArgumentException">
				<comment>
					<description>Constructs a new exception with the specified cause and a detail
 message of &lt;tt&gt;(cause==null ? null : cause.toString())&lt;/tt&gt; (which
 typically contains the class and detail message of &lt;tt&gt;cause&lt;/tt&gt;).
 This constructor is useful for exceptions that are little more than
 wrappers for other throwables (for example, {@link
 java.security.PrivilegedActionException}).</description>
					<attribute name="@param">
						<description>cause the cause (which is saved for later retrieval by the
         {@link Throwable#getCause()} method).  (A &lt;tt&gt;null&lt;/tt&gt; value is
         permitted, and indicates that the cause is nonexistent or
         unknown.)</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="cause" comment="the cause (which is saved for later retrieval by the
         {@link Throwable#getCause()} method).  (A &lt;tt&gt;null&lt;/tt&gt; value is
         permitted, and indicates that the cause is nonexistent or
         unknown.)" fulltype="java.lang.Throwable" type="Throwable" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass final="true" superclass="Object" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.Object" fulltype="java.lang.Class" type="Class">
		<implements>
			<interface fulltype="java.io.Serializable" type="Serializable" />
			<interface fulltype="java.lang.reflect.GenericDeclaration" type="GenericDeclaration" />
			<interface fulltype="java.lang.reflect.Type" type="Type" />
			<interface fulltype="java.lang.reflect.AnnotatedElement" type="AnnotatedElement" />
		</implements>
		<comment>
			<description>Instances of the class {@code Class} represent classes and
 interfaces in a running Java application.  An enum is a kind of
 class and an annotation is a kind of interface.  Every array also
 belongs to a class that is reflected as a {@code Class} object
 that is shared by all arrays with the same element type and number
 of dimensions.  The primitive Java types ({@code boolean},
 {@code byte}, {@code char}, {@code short},
 {@code int}, {@code long}, {@code float}, and
 {@code double}), and the keyword {@code void} are also
 represented as {@code Class} objects.

 &lt;p&gt; {@code Class} has no public constructor. Instead {@code Class}
 objects are constructed automatically by the Java Virtual Machine as classes
 are loaded and by calls to the {@code defineClass} method in the class
 loader.

 &lt;p&gt; The following example uses a {@code Class} object to print the
 class name of an object:

 &lt;p&gt; &lt;blockquote&gt;&lt;pre&gt;
     void printClassName(Object obj) {
         System.out.println(&quot;The class of &quot; + obj +
                            &quot; is &quot; + obj.getClass().getName());
     }
 &lt;/pre&gt;&lt;/blockquote&gt;

 &lt;p&gt; It is also possible to get the {@code Class} object for a named
 type (or for void) using a class literal
 (JLS Section &lt;A HREF=&quot;http://java.sun.com/docs/books/jls/second_edition/html/expressions.doc.html#251530&quot;&gt;15.8.2&lt;/A&gt;).
 For example:

 &lt;p&gt; &lt;blockquote&gt;
     {@code System.out.println(&quot;The name of class Foo is: &quot;+Foo.class.getName());}
 &lt;/blockquote&gt;</description>
			<attribute name="@param">
				<description>&lt;T&gt; the type of the class modeled by this {@code Class}
 object.  For example, the type of {@code String.class} is {@code
 Class&lt;String&gt;}.  Use {@code Class&lt;?&gt;} if the class being modeled is
 unknown.</description>
			</attribute>
			<attribute name="@author">
				<description>unascribed</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.ClassLoader#defineClass(byte[], int, int)</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.0</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="8192" visibility="private" name="ANNOTATION" constexpr="8192" fulltype="int" type="int" />
			<field final="true" static="true" const="16384" visibility="private" name="ENUM" constexpr="16384" fulltype="int" type="int" />
			<field final="true" static="true" const="4096" visibility="private" name="SYNTHETIC" constexpr="4096" fulltype="int" type="int" />
			<field volatile="true" visibility="private" transient="true" name="cachedConstructor" fulltype="java.lang.reflect.Constructor" type="Constructor" />
			<field volatile="true" visibility="private" transient="true" name="newInstanceCallerCache" fulltype="java.lang.Class" type="Class" />
			<field visibility="private" transient="true" name="name" fulltype="java.lang.String" type="String" />
			<field static="true" visibility="private" name="allPermDomain" fulltype="java.security.ProtectionDomain" type="ProtectionDomain">
				<comment>
					<description>protection domain returned when the internal domain is null</description>
				</comment>
			</field>
			<field static="true" visibility="private" name="useCaches" fulltype="boolean" type="boolean">
				<comment>
					<description>Reflection support.</description>
				</comment>
			</field>
			<field volatile="true" visibility="private" transient="true" name="declaredFields" fulltype="java.lang.ref.SoftReference" type="SoftReference" />
			<field volatile="true" visibility="private" transient="true" name="publicFields" fulltype="java.lang.ref.SoftReference" type="SoftReference" />
			<field volatile="true" visibility="private" transient="true" name="declaredMethods" fulltype="java.lang.ref.SoftReference" type="SoftReference" />
			<field volatile="true" visibility="private" transient="true" name="publicMethods" fulltype="java.lang.ref.SoftReference" type="SoftReference" />
			<field volatile="true" visibility="private" transient="true" name="declaredConstructors" fulltype="java.lang.ref.SoftReference" type="SoftReference" />
			<field volatile="true" visibility="private" transient="true" name="publicConstructors" fulltype="java.lang.ref.SoftReference" type="SoftReference" />
			<field volatile="true" visibility="private" transient="true" name="declaredPublicFields" fulltype="java.lang.ref.SoftReference" type="SoftReference" />
			<field volatile="true" visibility="private" transient="true" name="declaredPublicMethods" fulltype="java.lang.ref.SoftReference" type="SoftReference" />
			<field volatile="true" visibility="private" transient="true" name="classRedefinedCount" fulltype="int" type="int" />
			<field volatile="true" visibility="private" transient="true" name="lastRedefinedCount" fulltype="int" type="int" />
			<field visibility="private" transient="true" name="genericInfo" fulltype="sun.reflect.generics.repository.ClassRepository" type="ClassRepository" />
			<field final="true" static="true" const="3206093459760846163" visibility="private" name="serialVersionUID" constexpr="3206093459760846163L" fulltype="long" type="long">
				<comment>
					<description>use serialVersionUID from JDK 1.1 for interoperability</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="private" name="serialPersistentFields" fulltype="java.io.ObjectStreamField[]" type="ObjectStreamField">
				<comment>
					<description>Class Class is special cased within the Serialization Stream Protocol.

 A Class instance is written initially into an ObjectOutputStream in the
 following format:
 &lt;pre&gt;
      {@code TC_CLASS} ClassDescriptor
      A ClassDescriptor is a special cased serialization of
      a {@code java.io.ObjectStreamClass} instance.
 &lt;/pre&gt;
 A new handle is generated for the initial time the class descriptor
 is written into the stream. Future references to the class descriptor
 are written as references to the initial class descriptor instance.</description>
					<attribute name="@see">
						<description>java.io.ObjectStreamClass</description>
					</attribute>
				</comment>
			</field>
			<field static="true" visibility="private" name="reflectionFactory" fulltype="sun.reflect.ReflectionFactory" type="ReflectionFactory" />
			<field static="true" visibility="private" name="initted" fulltype="boolean" type="boolean" />
			<field volatile="true" visibility="private" transient="true" name="enumConstants" fulltype="java.lang.Object[]" type="Object" />
			<field volatile="true" visibility="private" transient="true" name="enumConstantDirectory" fulltype="java.util.Map" type="Map" />
			<field static="true" visibility="private" name="EMPTY_ANNOTATIONS_ARRAY" fulltype="java.lang.annotation.Annotation[]" type="Annotation" />
			<field visibility="private" transient="true" name="annotations" fulltype="java.util.Map" type="Map" />
			<field visibility="private" transient="true" name="declaredAnnotations" fulltype="java.util.Map" type="Map" />
			<field visibility="private" name="annotationType" fulltype="sun.reflect.annotation.AnnotationType" type="AnnotationType" />
		</fields>
		<methods>
			<constructor visibility="private" name="Class" />
			<method static="true" visibility="private" name="registerNatives" fulltype="void" type="void" />
			<method visibility="public" name="toString" returncomment="a string representation of this class object." fulltype="java.lang.String" type="String">
				<comment>
					<description>Converts the object to a string. The string representation is the
 string &quot;class&quot; or &quot;interface&quot;, followed by a space, and then by the
 fully qualified name of the class in the format returned by
 {@code getName}.  If this {@code Class} object represents a
 primitive type, this method returns the name of the primitive type.  If
 this {@code Class} object represents void this method returns
 &quot;void&quot;.</description>
					<attribute name="@return">
						<description>a string representation of this class object.</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="forName" returncomment="the {@code Class} object for the class with the
             specified name." fulltype="java.lang.Class" type="Class">
				<comment>
					<description>Returns the {@code Class} object associated with the class or
 interface with the given string name.  Invoking this method is
 equivalent to:

 &lt;blockquote&gt;
  {@code Class.forName(className, true, currentLoader)}
 &lt;/blockquote&gt;

 where {@code currentLoader} denotes the defining class loader of
 the current class.

 &lt;p&gt; For example, the following code fragment returns the
 runtime {@code Class} descriptor for the class named
 {@code java.lang.Thread}:

 &lt;blockquote&gt;
   {@code Class t = Class.forName(&quot;java.lang.Thread&quot;)}
 &lt;/blockquote&gt;
 &lt;p&gt;
 A call to {@code forName(&quot;X&quot;)} causes the class named
 {@code X} to be initialized.</description>
					<attribute name="@param">
						<description>className   the fully qualified name of the desired class.</description>
					</attribute>
					<attribute name="@return">
						<description>the {@code Class} object for the class with the
             specified name.</description>
					</attribute>
					<attribute name="@exception">
						<description>LinkageError if the linkage fails</description>
					</attribute>
					<attribute name="@exception">
						<description>ExceptionInInitializerError if the initialization provoked
            by this method fails</description>
					</attribute>
					<attribute name="@exception">
						<description>ClassNotFoundException if the class cannot be located</description>
					</attribute>
				</comment>
				<params>
					<param name="className" comment="the fully qualified name of the desired class." fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception comment="if the class cannot be located" fulltype="java.lang.ClassNotFoundException" type="ClassNotFoundException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="forName" returncomment="class object representing the desired class" fulltype="java.lang.Class" type="Class">
				<comment>
					<description>Returns the {@code Class} object associated with the class or
 interface with the given string name, using the given class loader.
 Given the fully qualified name for a class or interface (in the same
 format returned by {@code getName}) this method attempts to
 locate, load, and link the class or interface.  The specified class
 loader is used to load the class or interface.  If the parameter
 {@code loader} is null, the class is loaded through the bootstrap
 class loader.  The class is initialized only if the
 {@code initialize} parameter is {@code true} and if it has
 not been initialized earlier.

 &lt;p&gt; If {@code name} denotes a primitive type or void, an attempt
 will be made to locate a user-defined class in the unnamed package whose
 name is {@code name}. Therefore, this method cannot be used to
 obtain any of the {@code Class} objects representing primitive
 types or void.

 &lt;p&gt; If {@code name} denotes an array class, the component type of
 the array class is loaded but not initialized.

 &lt;p&gt; For example, in an instance method the expression:

 &lt;blockquote&gt;
  {@code Class.forName(&quot;Foo&quot;)}
 &lt;/blockquote&gt;

 is equivalent to:

 &lt;blockquote&gt;
  {@code Class.forName(&quot;Foo&quot;, true, this.getClass().getClassLoader())}
 &lt;/blockquote&gt;

 Note that this method throws errors related to loading, linking or
 initializing as specified in Sections 12.2, 12.3 and 12.4 of &lt;em&gt;The
 Java Language Specification&lt;/em&gt;.
 Note that this method does not check whether the requested class
 is accessible to its caller.

 &lt;p&gt; If the {@code loader} is {@code null}, and a security
 manager is present, and the caller&apos;s class loader is not null, then this
 method calls the security manager&apos;s {@code checkPermission} method
 with a {@code RuntimePermission(&quot;getClassLoader&quot;)} permission to
 ensure it&apos;s ok to access the bootstrap class loader.</description>
					<attribute name="@param">
						<description>name       fully qualified name of the desired class</description>
					</attribute>
					<attribute name="@param">
						<description>initialize whether the class must be initialized</description>
					</attribute>
					<attribute name="@param">
						<description>loader     class loader from which the class must be loaded</description>
					</attribute>
					<attribute name="@return">
						<description>class object representing the desired class</description>
					</attribute>
					<attribute name="@exception">
						<description>LinkageError if the linkage fails</description>
					</attribute>
					<attribute name="@exception">
						<description>ExceptionInInitializerError if the initialization provoked
            by this method fails</description>
					</attribute>
					<attribute name="@exception">
						<description>ClassNotFoundException if the class cannot be located by
            the specified class loader</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Class#forName(String)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.ClassLoader</description>
					</attribute>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="fully qualified name of the desired class" fulltype="java.lang.String" type="String" />
					<param name="initialize" comment="whether the class must be initialized" fulltype="boolean" type="boolean" />
					<param name="loader" comment="class loader from which the class must be loaded" fulltype="java.lang.ClassLoader" type="ClassLoader" />
				</params>
				<exceptions>
					<exception comment="if the class cannot be located by
            the specified class loader" fulltype="java.lang.ClassNotFoundException" type="ClassNotFoundException" />
				</exceptions>
			</method>
			<method static="true" visibility="private" name="forName0" fulltype="java.lang.Class" type="Class">
				<comment>
					<description>Called after security checks have been made.</description>
				</comment>
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="initialize" fulltype="boolean" type="boolean" />
					<param name="loader" fulltype="java.lang.ClassLoader" type="ClassLoader" />
				</params>
				<exceptions>
					<exception fulltype="java.lang.ClassNotFoundException" type="ClassNotFoundException" />
				</exceptions>
			</method>
			<method visibility="public" name="newInstance" returncomment="a newly allocated instance of the class represented by this
             object." fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Creates a new instance of the class represented by this {@code Class}
 object.  The class is instantiated as if by a {@code new}
 expression with an empty argument list.  The class is initialized if it
 has not already been initialized.

 &lt;p&gt;Note that this method propagates any exception thrown by the
 nullary constructor, including a checked exception.  Use of
 this method effectively bypasses the compile-time exception
 checking that would otherwise be performed by the compiler.
 The {@link
 java.lang.reflect.Constructor#newInstance(java.lang.Object...)
 Constructor.newInstance} method avoids this problem by wrapping
 any exception thrown by the constructor in a (checked) {@link
 java.lang.reflect.InvocationTargetException}.</description>
					<attribute name="@return">
						<description>a newly allocated instance of the class represented by this
             object.</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalAccessException  if the class or its nullary
               constructor is not accessible.</description>
					</attribute>
					<attribute name="@exception">
						<description>InstantiationException
               if this {@code Class} represents an abstract class,
               an interface, an array class, a primitive type, or void;
               or if the class has no nullary constructor;
               or if the instantiation fails for some other reason.</description>
					</attribute>
					<attribute name="@exception">
						<description>ExceptionInInitializerError if the initialization
               provoked by this method fails.</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException
             If a security manager, &lt;i&gt;s&lt;/i&gt;, is present and any of the
             following conditions is met:

             &lt;ul&gt;

             &lt;li&gt; invocation of
             {@link SecurityManager#checkMemberAccess
             s.checkMemberAccess(this, Member.PUBLIC)} denies
             creation of new instances of this class

             &lt;li&gt; the caller&apos;s class loader is not the same as or an
             ancestor of the class loader for the current class and
             invocation of {@link SecurityManager#checkPackageAccess
             s.checkPackageAccess()} denies access to the package
             of this class

             &lt;/ul&gt;</description>
					</attribute>
				</comment>
				<exceptions>
					<exception comment="if this {@code Class} represents an abstract class,
               an interface, an array class, a primitive type, or void;
               or if the class has no nullary constructor;
               or if the instantiation fails for some other reason." fulltype="java.lang.InstantiationException" type="InstantiationException" />
					<exception comment="if the class or its nullary
               constructor is not accessible." fulltype="java.lang.IllegalAccessException" type="IllegalAccessException" />
				</exceptions>
			</method>
			<method visibility="private" name="newInstance0" fulltype="java.lang.Object" type="Object">
				<exceptions>
					<exception fulltype="java.lang.InstantiationException" type="InstantiationException" />
					<exception fulltype="java.lang.IllegalAccessException" type="IllegalAccessException" />
				</exceptions>
			</method>
			<method visibility="public" name="isInstance" returncomment="true if {@code obj} is an instance of this class" fulltype="boolean" type="boolean">
				<comment>
					<description>Determines if the specified {@code Object} is assignment-compatible
 with the object represented by this {@code Class}.  This method is
 the dynamic equivalent of the Java language {@code instanceof}
 operator. The method returns {@code true} if the specified
 {@code Object} argument is non-null and can be cast to the
 reference type represented by this {@code Class} object without
 raising a {@code ClassCastException.} It returns {@code false}
 otherwise.

 &lt;p&gt; Specifically, if this {@code Class} object represents a
 declared class, this method returns {@code true} if the specified
 {@code Object} argument is an instance of the represented class (or
 of any of its subclasses); it returns {@code false} otherwise. If
 this {@code Class} object represents an array class, this method
 returns {@code true} if the specified {@code Object} argument
 can be converted to an object of the array class by an identity
 conversion or by a widening reference conversion; it returns
 {@code false} otherwise. If this {@code Class} object
 represents an interface, this method returns {@code true} if the
 class or any superclass of the specified {@code Object} argument
 implements this interface; it returns {@code false} otherwise. If
 this {@code Class} object represents a primitive type, this method
 returns {@code false}.</description>
					<attribute name="@param">
						<description>obj the object to check</description>
					</attribute>
					<attribute name="@return">
						<description>true if {@code obj} is an instance of this class</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.1</description>
					</attribute>
				</comment>
				<params>
					<param name="obj" comment="the object to check" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="isAssignableFrom" returncomment="the {@code boolean} value indicating whether objects of the
 type {@code cls} can be assigned to objects of this class" fulltype="boolean" type="boolean">
				<comment>
					<description>Determines if the class or interface represented by this
 {@code Class} object is either the same as, or is a superclass or
 superinterface of, the class or interface represented by the specified
 {@code Class} parameter. It returns {@code true} if so;
 otherwise it returns {@code false}. If this {@code Class}
 object represents a primitive type, this method returns
 {@code true} if the specified {@code Class} parameter is
 exactly this {@code Class} object; otherwise it returns
 {@code false}.

 &lt;p&gt; Specifically, this method tests whether the type represented by the
 specified {@code Class} parameter can be converted to the type
 represented by this {@code Class} object via an identity conversion
 or via a widening reference conversion. See &lt;em&gt;The Java Language
 Specification&lt;/em&gt;, sections 5.1.1 and 5.1.4 , for details.</description>
					<attribute name="@param">
						<description>cls the {@code Class} object to be checked</description>
					</attribute>
					<attribute name="@return">
						<description>the {@code boolean} value indicating whether objects of the
 type {@code cls} can be assigned to objects of this class</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException if the specified Class parameter is
            null.</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.1</description>
					</attribute>
				</comment>
				<params>
					<param name="cls" comment="the {@code Class} object to be checked" fulltype="java.lang.Class" type="Class" />
				</params>
			</method>
			<method visibility="public" name="isInterface" returncomment="{@code true} if this object represents an interface;
          {@code false} otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Determines if the specified {@code Class} object represents an
 interface type.</description>
					<attribute name="@return">
						<description>{@code true} if this object represents an interface;
          {@code false} otherwise.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="isArray" returncomment="{@code true} if this object represents an array class;
          {@code false} otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Determines if this {@code Class} object represents an array class.</description>
					<attribute name="@return">
						<description>{@code true} if this object represents an array class;
          {@code false} otherwise.</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="isPrimitive" returncomment="true if and only if this class represents a primitive type" fulltype="boolean" type="boolean">
				<comment>
					<description>Determines if the specified {@code Class} object represents a
 primitive type.

 &lt;p&gt; There are nine predefined {@code Class} objects to represent
 the eight primitive types and void.  These are created by the Java
 Virtual Machine, and have the same names as the primitive types that
 they represent, namely {@code boolean}, {@code byte},
 {@code char}, {@code short}, {@code int},
 {@code long}, {@code float}, and {@code double}.

 &lt;p&gt; These objects may only be accessed via the following public static
 final variables, and are the only {@code Class} objects for which
 this method returns {@code true}.</description>
					<attribute name="@return">
						<description>true if and only if this class represents a primitive type</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Boolean#TYPE</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Character#TYPE</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Byte#TYPE</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Short#TYPE</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Integer#TYPE</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Long#TYPE</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Float#TYPE</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Double#TYPE</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Void#TYPE</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="isAnnotation" returncomment="{@code true} if this class object represents an annotation
      type; {@code false} otherwise" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true if this {@code Class} object represents an annotation
 type.  Note that if this method returns true, {@link #isInterface()}
 would also return true, as all annotation types are also interfaces.</description>
					<attribute name="@return">
						<description>{@code true} if this class object represents an annotation
      type; {@code false} otherwise</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="isSynthetic" returncomment="{@code true} if and only if this class is a synthetic class as
         defined by the Java Language Specification." fulltype="boolean" type="boolean">
				<comment>
					<description>Returns {@code true} if this class is a synthetic class;
 returns {@code false} otherwise.</description>
					<attribute name="@return">
						<description>{@code true} if and only if this class is a synthetic class as
         defined by the Java Language Specification.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getName" returncomment="the name of the class or interface
          represented by this object." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the  name of the entity (class, interface, array class,
 primitive type, or void) represented by this {@code Class} object,
 as a {@code String}.

 &lt;p&gt; If this class object represents a reference type that is not an
 array type then the binary name of the class is returned, as specified
 by the Java Language Specification, Second Edition.

 &lt;p&gt; If this class object represents a primitive type or void, then the
 name returned is a {@code String} equal to the Java language
 keyword corresponding to the primitive type or void.

 &lt;p&gt; If this class object represents a class of arrays, then the internal
 form of the name consists of the name of the element type preceded by
 one or more &apos;{@code [}&apos; characters representing the depth of the array
 nesting.  The encoding of element type names is as follows:

 &lt;blockquote&gt;&lt;table summary=&quot;Element types and encodings&quot;&gt;
 &lt;tr&gt;&lt;th&gt; Element Type &lt;th&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;th&gt; Encoding
 &lt;tr&gt;&lt;td&gt; boolean      &lt;td&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;td align=center&gt; Z
 &lt;tr&gt;&lt;td&gt; byte         &lt;td&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;td align=center&gt; B
 &lt;tr&gt;&lt;td&gt; char         &lt;td&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;td align=center&gt; C
 &lt;tr&gt;&lt;td&gt; class or interface
                       &lt;td&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;td align=center&gt; L&lt;i&gt;classname&lt;/i&gt;;
 &lt;tr&gt;&lt;td&gt; double       &lt;td&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;td align=center&gt; D
 &lt;tr&gt;&lt;td&gt; float        &lt;td&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;td align=center&gt; F
 &lt;tr&gt;&lt;td&gt; int          &lt;td&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;td align=center&gt; I
 &lt;tr&gt;&lt;td&gt; long         &lt;td&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;td align=center&gt; J
 &lt;tr&gt;&lt;td&gt; short        &lt;td&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;td align=center&gt; S
 &lt;/table&gt;&lt;/blockquote&gt;

 &lt;p&gt; The class or interface name &lt;i&gt;classname&lt;/i&gt; is the binary name of
 the class specified above.

 &lt;p&gt; Examples:
 &lt;blockquote&gt;&lt;pre&gt;
 String.class.getName()
     returns &quot;java.lang.String&quot;
 byte.class.getName()
     returns &quot;byte&quot;
 (new Object[3]).getClass().getName()
     returns &quot;[Ljava.lang.Object;&quot;
 (new int[3][4][5][6][7][8][9]).getClass().getName()
     returns &quot;[[[[[[[I&quot;
 &lt;/pre&gt;&lt;/blockquote&gt;</description>
					<attribute name="@return">
						<description>the name of the class or interface
          represented by this object.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="private" name="getName0" fulltype="java.lang.String" type="String" />
			<method visibility="public" name="getClassLoader" returncomment="the class loader that loaded the class or interface
          represented by this object." fulltype="java.lang.ClassLoader" type="ClassLoader">
				<comment>
					<description>Returns the class loader for the class.  Some implementations may use
 null to represent the bootstrap class loader. This method will return
 null in such implementations if this class was loaded by the bootstrap
 class loader.

 &lt;p&gt; If a security manager is present, and the caller&apos;s class loader is
 not null and the caller&apos;s class loader is not the same as or an ancestor of
 the class loader for the class whose class loader is requested, then
 this method calls the security manager&apos;s {@code checkPermission}
 method with a {@code RuntimePermission(&quot;getClassLoader&quot;)}
 permission to ensure it&apos;s ok to access the class loader for the class.

 &lt;p&gt;If this object
 represents a primitive type or void, null is returned.</description>
					<attribute name="@return">
						<description>the class loader that loaded the class or interface
          represented by this object.</description>
					</attribute>
					<attribute name="@throws">
						<description>SecurityException
    if a security manager exists and its
    {@code checkPermission} method denies
    access to the class loader for the class.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.ClassLoader</description>
					</attribute>
					<attribute name="@see">
						<description>SecurityManager#checkPermission</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.RuntimePermission</description>
					</attribute>
				</comment>
			</method>
			<method visibility="package-private" name="getClassLoader0" fulltype="java.lang.ClassLoader" type="ClassLoader" />
			<method visibility="public" name="getTypeParameters" returncomment="an array of {@code TypeVariable} objects that represent
     the type variables declared by this generic declaration" fulltype="java.lang.reflect.TypeVariable[]" type="TypeVariable">
				<comment>
					<description>Returns an array of {@code TypeVariable} objects that represent the
 type variables declared by the generic declaration represented by this
 {@code GenericDeclaration} object, in declaration order.  Returns an
 array of length 0 if the underlying generic declaration declares no type
 variables.</description>
					<attribute name="@return">
						<description>an array of {@code TypeVariable} objects that represent
     the type variables declared by this generic declaration</description>
					</attribute>
					<attribute name="@throws">
						<description>GenericSignatureFormatError if the generic
     signature of this generic declaration does not conform to
     the format specified in the Java Virtual Machine Specification,
     3rd edition</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getSuperclass" returncomment="the superclass of the class represented by this object." fulltype="java.lang.Class" type="Class">
				<comment>
					<description>Returns the {@code Class} representing the superclass of the entity
 (class, interface, primitive type or void) represented by this
 {@code Class}.  If this {@code Class} represents either the
 {@code Object} class, an interface, a primitive type, or void, then
 null is returned.  If this object represents an array class then the
 {@code Class} object representing the {@code Object} class is
 returned.</description>
					<attribute name="@return">
						<description>the superclass of the class represented by this object.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getGenericSuperclass" returncomment="the superclass of the class represented by this object" fulltype="java.lang.reflect.Type" type="Type">
				<comment>
					<description>Returns the {@code Type} representing the direct superclass of
 the entity (class, interface, primitive type or void) represented by
 this {@code Class}.

 &lt;p&gt;If the superclass is a parameterized type, the {@code Type}
 object returned must accurately reflect the actual type
 parameters used in the source code. The parameterized type
 representing the superclass is created if it had not been
 created before. See the declaration of {@link
 java.lang.reflect.ParameterizedType ParameterizedType} for the
 semantics of the creation process for parameterized types.  If
 this {@code Class} represents either the {@code Object}
 class, an interface, a primitive type, or void, then null is
 returned.  If this object represents an array class then the
 {@code Class} object representing the {@code Object} class is
 returned.</description>
					<attribute name="@throws">
						<description>GenericSignatureFormatError if the generic
     class signature does not conform to the format specified in the
     Java Virtual Machine Specification, 3rd edition</description>
					</attribute>
					<attribute name="@throws">
						<description>TypeNotPresentException if the generic superclass
     refers to a non-existent type declaration</description>
					</attribute>
					<attribute name="@throws">
						<description>MalformedParameterizedTypeException if the
     generic superclass refers to a parameterized type that cannot be
     instantiated  for any reason</description>
					</attribute>
					<attribute name="@return">
						<description>the superclass of the class represented by this object</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getPackage" returncomment="the package of the class, or null if no package
         information is available from the archive or codebase." fulltype="java.lang.Package" type="Package">
				<comment>
					<description>Gets the package for this class.  The class loader of this class is used
 to find the package.  If the class was loaded by the bootstrap class
 loader the set of packages loaded from CLASSPATH is searched to find the
 package of the class. Null is returned if no package object was created
 by the class loader of this class.

 &lt;p&gt; Packages have attributes for versions and specifications only if the
 information was defined in the manifests that accompany the classes, and
 if the class loader created the package instance with the attributes
 from the manifest.</description>
					<attribute name="@return">
						<description>the package of the class, or null if no package
         information is available from the archive or codebase.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getInterfaces" returncomment="an array of interfaces implemented by this class." fulltype="java.lang.Class[]" type="Class">
				<comment>
					<description>Determines the interfaces implemented by the class or interface
 represented by this object.

 &lt;p&gt; If this object represents a class, the return value is an array
 containing objects representing all interfaces implemented by the
 class. The order of the interface objects in the array corresponds to
 the order of the interface names in the {@code implements} clause
 of the declaration of the class represented by this object. For
 example, given the declaration:
 &lt;blockquote&gt;
 {@code class Shimmer implements FloorWax, DessertTopping { ... }}
 &lt;/blockquote&gt;
 suppose the value of {@code s} is an instance of
 {@code Shimmer}; the value of the expression:
 &lt;blockquote&gt;
 {@code s.getClass().getInterfaces()[0]}
 &lt;/blockquote&gt;
 is the {@code Class} object that represents interface
 {@code FloorWax}; and the value of:
 &lt;blockquote&gt;
 {@code s.getClass().getInterfaces()[1]}
 &lt;/blockquote&gt;
 is the {@code Class} object that represents interface
 {@code DessertTopping}.

 &lt;p&gt; If this object represents an interface, the array contains objects
 representing all interfaces extended by the interface. The order of the
 interface objects in the array corresponds to the order of the interface
 names in the {@code extends} clause of the declaration of the
 interface represented by this object.

 &lt;p&gt; If this object represents a class or interface that implements no
 interfaces, the method returns an array of length 0.

 &lt;p&gt; If this object represents a primitive type or void, the method
 returns an array of length 0.</description>
					<attribute name="@return">
						<description>an array of interfaces implemented by this class.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getGenericInterfaces" returncomment="an array of interfaces implemented by this class" fulltype="java.lang.reflect.Type[]" type="Type">
				<comment>
					<description>Returns the {@code Type}s representing the interfaces
 directly implemented by the class or interface represented by
 this object.

 &lt;p&gt;If a superinterface is a parameterized type, the
 {@code Type} object returned for it must accurately reflect
 the actual type parameters used in the source code. The
 parameterized type representing each superinterface is created
 if it had not been created before. See the declaration of
 {@link java.lang.reflect.ParameterizedType ParameterizedType}
 for the semantics of the creation process for parameterized
 types.

 &lt;p&gt; If this object represents a class, the return value is an
 array containing objects representing all interfaces
 implemented by the class. The order of the interface objects in
 the array corresponds to the order of the interface names in
 the {@code implements} clause of the declaration of the class
 represented by this object.  In the case of an array class, the
 interfaces {@code Cloneable} and {@code Serializable} are
 returned in that order.

 &lt;p&gt;If this object represents an interface, the array contains
 objects representing all interfaces directly extended by the
 interface.  The order of the interface objects in the array
 corresponds to the order of the interface names in the
 {@code extends} clause of the declaration of the interface
 represented by this object.

 &lt;p&gt;If this object represents a class or interface that
 implements no interfaces, the method returns an array of length
 0.

 &lt;p&gt;If this object represents a primitive type or void, the
 method returns an array of length 0.</description>
					<attribute name="@throws">
						<description>GenericSignatureFormatError
     if the generic class signature does not conform to the format
     specified in the Java Virtual Machine Specification, 3rd edition</description>
					</attribute>
					<attribute name="@throws">
						<description>TypeNotPresentException if any of the generic
     superinterfaces refers to a non-existent type declaration</description>
					</attribute>
					<attribute name="@throws">
						<description>MalformedParameterizedTypeException if any of the
     generic superinterfaces refer to a parameterized type that cannot
     be instantiated  for any reason</description>
					</attribute>
					<attribute name="@return">
						<description>an array of interfaces implemented by this class</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getComponentType" returncomment="the {@code Class} representing the component type of this
 class if this class is an array" fulltype="java.lang.Class" type="Class">
				<comment>
					<description>Returns the {@code Class} representing the component type of an
 array.  If this class does not represent an array class this method
 returns null.</description>
					<attribute name="@return">
						<description>the {@code Class} representing the component type of this
 class if this class is an array</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.reflect.Array</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getModifiers" returncomment="the {@code int} representing the modifiers for this class" fulltype="int" type="int">
				<comment>
					<description>Returns the Java language modifiers for this class or interface, encoded
 in an integer. The modifiers consist of the Java Virtual Machine&apos;s
 constants for {@code public}, {@code protected},
 {@code private}, {@code final}, {@code static},
 {@code abstract} and {@code interface}; they should be decoded
 using the methods of class {@code Modifier}.

 &lt;p&gt; If the underlying class is an array class, then its
 {@code public}, {@code private} and {@code protected}
 modifiers are the same as those of its component type.  If this
 {@code Class} represents a primitive type or void, its
 {@code public} modifier is always {@code true}, and its
 {@code protected} and {@code private} modifiers are always
 {@code false}. If this object represents an array class, a
 primitive type or void, then its {@code final} modifier is always
 {@code true} and its interface modifier is always
 {@code false}. The values of its other modifiers are not determined
 by this specification.

 &lt;p&gt; The modifier encodings are defined in &lt;em&gt;The Java Virtual Machine
 Specification&lt;/em&gt;, table 4.1.</description>
					<attribute name="@return">
						<description>the {@code int} representing the modifiers for this class</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.reflect.Modifier</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getSigners" returncomment="the signers of this class, or null if there are no signers.  In
          particular, this method returns null if this object represents
          a primitive type or void." fulltype="java.lang.Object[]" type="Object">
				<comment>
					<description>Gets the signers of this class.</description>
					<attribute name="@return">
						<description>the signers of this class, or null if there are no signers.  In
          particular, this method returns null if this object represents
          a primitive type or void.</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="package-private" name="setSigners" fulltype="void" type="void">
				<comment>
					<description>Set the signers of this class.</description>
				</comment>
				<params>
					<param name="signers" fulltype="java.lang.Object[]" type="Object" />
				</params>
			</method>
			<method visibility="public" name="getEnclosingMethod" returncomment="the immediately enclosing method of the underlying class, if
     that class is a local or anonymous class; otherwise {@code null}." fulltype="java.lang.reflect.Method" type="Method">
				<comment>
					<description>If this {@code Class} object represents a local or anonymous
 class within a method, returns a {@link
 java.lang.reflect.Method Method} object representing the
 immediately enclosing method of the underlying class. Returns
 {@code null} otherwise.

 In particular, this method returns {@code null} if the underlying
 class is a local or anonymous class immediately enclosed by a type
 declaration, instance initializer or static initializer.</description>
					<attribute name="@return">
						<description>the immediately enclosing method of the underlying class, if
     that class is a local or anonymous class; otherwise {@code null}.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method visibility="private" name="getEnclosingMethod0" fulltype="java.lang.Object[]" type="Object" />
			<method visibility="private" name="getEnclosingMethodInfo" fulltype="java.lang.Class.EnclosingMethodInfo" type="Class.EnclosingMethodInfo" />
			<method static="true" visibility="private" name="toClass" fulltype="java.lang.Class" type="Class">
				<params>
					<param name="o" fulltype="java.lang.reflect.Type" type="Type" />
				</params>
			</method>
			<method visibility="public" name="getEnclosingConstructor" returncomment="the immediately enclosing constructor of the underlying class, if
     that class is a local or anonymous class; otherwise {@code null}." fulltype="java.lang.reflect.Constructor" type="Constructor">
				<comment>
					<description>If this {@code Class} object represents a local or anonymous
 class within a constructor, returns a {@link
 java.lang.reflect.Constructor Constructor} object representing
 the immediately enclosing constructor of the underlying
 class. Returns {@code null} otherwise.  In particular, this
 method returns {@code null} if the underlying class is a local
 or anonymous class immediately enclosed by a type declaration,
 instance initializer or static initializer.</description>
					<attribute name="@return">
						<description>the immediately enclosing constructor of the underlying class, if
     that class is a local or anonymous class; otherwise {@code null}.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getDeclaringClass" returncomment="the declaring class for this class" fulltype="java.lang.Class" type="Class">
				<comment>
					<description>If the class or interface represented by this {@code Class} object
 is a member of another class, returns the {@code Class} object
 representing the class in which it was declared.  This method returns
 null if this class or interface is not a member of any other class.  If
 this {@code Class} object represents an array class, a primitive
 type, or void,then this method returns null.</description>
					<attribute name="@return">
						<description>the declaring class for this class</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getEnclosingClass" returncomment="the immediately enclosing class of the underlying class" fulltype="java.lang.Class" type="Class">
				<comment>
					<description>Returns the immediately enclosing class of the underlying
 class.  If the underlying class is a top level class this
 method returns {@code null}.</description>
					<attribute name="@return">
						<description>the immediately enclosing class of the underlying class</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getSimpleName" returncomment="the simple name of the underlying class" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the simple name of the underlying class as given in the
 source code. Returns an empty string if the underlying class is
 anonymous.

 &lt;p&gt;The simple name of an array is the simple name of the
 component type with &quot;[]&quot; appended.  In particular the simple
 name of an array whose component type is anonymous is &quot;[]&quot;.</description>
					<attribute name="@return">
						<description>the simple name of the underlying class</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="private" name="isAsciiDigit" fulltype="boolean" type="boolean">
				<comment>
					<description>Character.isDigit answers {@code true} to some non-ascii
 digits.  This one does not.</description>
				</comment>
				<params>
					<param name="c" fulltype="char" type="char" />
				</params>
			</method>
			<method visibility="public" name="getCanonicalName" returncomment="the canonical name of the underlying class if it exists, and
 {@code null} otherwise." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the canonical name of the underlying class as
 defined by the Java Language Specification.  Returns null if
 the underlying class does not have a canonical name (i.e., if
 it is a local or anonymous class or an array whose component
 type does not have a canonical name).</description>
					<attribute name="@return">
						<description>the canonical name of the underlying class if it exists, and
 {@code null} otherwise.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="isAnonymousClass" returncomment="{@code true} if and only if this class is an anonymous class." fulltype="boolean" type="boolean">
				<comment>
					<description>Returns {@code true} if and only if the underlying class
 is an anonymous class.</description>
					<attribute name="@return">
						<description>{@code true} if and only if this class is an anonymous class.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="isLocalClass" returncomment="{@code true} if and only if this class is a local class." fulltype="boolean" type="boolean">
				<comment>
					<description>Returns {@code true} if and only if the underlying class
 is a local class.</description>
					<attribute name="@return">
						<description>{@code true} if and only if this class is a local class.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="isMemberClass" returncomment="{@code true} if and only if this class is a member class." fulltype="boolean" type="boolean">
				<comment>
					<description>Returns {@code true} if and only if the underlying class
 is a member class.</description>
					<attribute name="@return">
						<description>{@code true} if and only if this class is a member class.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method visibility="private" name="getSimpleBinaryName" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns the &quot;simple binary name&quot; of the underlying class, i.e.,
 the binary name without the leading enclosing class name.
 Returns {@code null} if the underlying class is a top level
 class.</description>
				</comment>
			</method>
			<method visibility="private" name="isLocalOrAnonymousClass" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns {@code true} if this is a local class or an anonymous
 class.  Returns {@code false} otherwise.</description>
				</comment>
			</method>
			<method visibility="public" name="getClasses" returncomment="the array of {@code Class} objects representing the public
 members of this class" fulltype="java.lang.Class[]" type="Class">
				<comment>
					<description>Returns an array containing {@code Class} objects representing all
 the public classes and interfaces that are members of the class
 represented by this {@code Class} object.  This includes public
 class and interface members inherited from superclasses and public class
 and interface members declared by the class.  This method returns an
 array of length 0 if this {@code Class} object has no public member
 classes or interfaces.  This method also returns an array of length 0 if
 this {@code Class} object represents a primitive type, an array
 class, or void.</description>
					<attribute name="@return">
						<description>the array of {@code Class} objects representing the public
 members of this class</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException
             If a security manager, &lt;i&gt;s&lt;/i&gt;, is present and any of the
             following conditions is met:

             &lt;ul&gt;

             &lt;li&gt; invocation of
             {@link SecurityManager#checkMemberAccess
             s.checkMemberAccess(this, Member.PUBLIC)} method
             denies access to the classes within this class

             &lt;li&gt; the caller&apos;s class loader is not the same as or an
             ancestor of the class loader for the current class and
             invocation of {@link SecurityManager#checkPackageAccess
             s.checkPackageAccess()} denies access to the package
             of this class

             &lt;/ul&gt;</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getFields" returncomment="the array of {@code Field} objects representing the
 public fields" fulltype="java.lang.reflect.Field[]" type="Field">
				<comment>
					<description>Returns an array containing {@code Field} objects reflecting all
 the accessible public fields of the class or interface represented by
 this {@code Class} object.  The elements in the array returned are
 not sorted and are not in any particular order.  This method returns an
 array of length 0 if the class or interface has no accessible public
 fields, or if it represents an array class, a primitive type, or void.

 &lt;p&gt; Specifically, if this {@code Class} object represents a class,
 this method returns the public fields of this class and of all its
 superclasses.  If this {@code Class} object represents an
 interface, this method returns the fields of this interface and of all
 its superinterfaces.

 &lt;p&gt; The implicit length field for array class is not reflected by this
 method. User code should use the methods of class {@code Array} to
 manipulate arrays.

 &lt;p&gt; See &lt;em&gt;The Java Language Specification&lt;/em&gt;, sections 8.2 and 8.3.</description>
					<attribute name="@return">
						<description>the array of {@code Field} objects representing the
 public fields</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException
             If a security manager, &lt;i&gt;s&lt;/i&gt;, is present and any of the
             following conditions is met:

             &lt;ul&gt;

             &lt;li&gt; invocation of
             {@link SecurityManager#checkMemberAccess
             s.checkMemberAccess(this, Member.PUBLIC)} denies
             access to the fields within this class

             &lt;li&gt; the caller&apos;s class loader is not the same as or an
             ancestor of the class loader for the current class and
             invocation of {@link SecurityManager#checkPackageAccess
             s.checkPackageAccess()} denies access to the package
             of this class

             &lt;/ul&gt;</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.1</description>
					</attribute>
				</comment>
				<exceptions>
					<exception comment="If a security manager, &lt;i&gt;s&lt;/i&gt;, is present and any of the
             following conditions is met:

             &lt;ul&gt;

             &lt;li&gt; invocation of
             {@link SecurityManager#checkMemberAccess
             s.checkMemberAccess(this, Member.PUBLIC)} denies
             access to the fields within this class

             &lt;li&gt; the caller&apos;s class loader is not the same as or an
             ancestor of the class loader for the current class and
             invocation of {@link SecurityManager#checkPackageAccess
             s.checkPackageAccess()} denies access to the package
             of this class

             &lt;/ul&gt;" fulltype="java.lang.SecurityException" type="SecurityException" />
				</exceptions>
			</method>
			<method visibility="public" name="getMethods" returncomment="the array of {@code Method} objects representing the
 public methods of this class" fulltype="java.lang.reflect.Method[]" type="Method">
				<comment>
					<description>Returns an array containing {@code Method} objects reflecting all
 the public &lt;em&gt;member&lt;/em&gt; methods of the class or interface represented
 by this {@code Class} object, including those declared by the class
 or interface and those inherited from superclasses and
 superinterfaces.  Array classes return all the (public) member methods
 inherited from the {@code Object} class.  The elements in the array
 returned are not sorted and are not in any particular order.  This
 method returns an array of length 0 if this {@code Class} object
 represents a class or interface that has no public member methods, or if
 this {@code Class} object represents a primitive type or void.

 &lt;p&gt; The class initialization method {@code &lt;clinit&gt;} is not
 included in the returned array. If the class declares multiple public
 member methods with the same parameter types, they are all included in
 the returned array.

 &lt;p&gt; See &lt;em&gt;The Java Language Specification&lt;/em&gt;, sections 8.2 and 8.4.</description>
					<attribute name="@return">
						<description>the array of {@code Method} objects representing the
 public methods of this class</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException
             If a security manager, &lt;i&gt;s&lt;/i&gt;, is present and any of the
             following conditions is met:

             &lt;ul&gt;

             &lt;li&gt; invocation of
             {@link SecurityManager#checkMemberAccess
             s.checkMemberAccess(this, Member.PUBLIC)} denies
             access to the methods within this class

             &lt;li&gt; the caller&apos;s class loader is not the same as or an
             ancestor of the class loader for the current class and
             invocation of {@link SecurityManager#checkPackageAccess
             s.checkPackageAccess()} denies access to the package
             of this class

             &lt;/ul&gt;</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.1</description>
					</attribute>
				</comment>
				<exceptions>
					<exception comment="If a security manager, &lt;i&gt;s&lt;/i&gt;, is present and any of the
             following conditions is met:

             &lt;ul&gt;

             &lt;li&gt; invocation of
             {@link SecurityManager#checkMemberAccess
             s.checkMemberAccess(this, Member.PUBLIC)} denies
             access to the methods within this class

             &lt;li&gt; the caller&apos;s class loader is not the same as or an
             ancestor of the class loader for the current class and
             invocation of {@link SecurityManager#checkPackageAccess
             s.checkPackageAccess()} denies access to the package
             of this class

             &lt;/ul&gt;" fulltype="java.lang.SecurityException" type="SecurityException" />
				</exceptions>
			</method>
			<method visibility="public" name="getConstructors" returncomment="the array of {@code Constructor} objects representing the
  public constructors of this class" fulltype="java.lang.reflect.Constructor[]" type="Constructor">
				<comment>
					<description>Returns an array containing {@code Constructor} objects reflecting
 all the public constructors of the class represented by this
 {@code Class} object.  An array of length 0 is returned if the
 class has no public constructors, or if the class is an array class, or
 if the class reflects a primitive type or void.

 Note that while this method returns an array of {@code
 Constructor&lt;T&gt;} objects (that is an array of constructors from
 this class), the return type of this method is {@code
 Constructor&lt;?&gt;[]} and &lt;em&gt;not&lt;/em&gt; {@code Constructor&lt;T&gt;[]} as
 might be expected.  This less informative return type is
 necessary since after being returned from this method, the
 array could be modified to hold {@code Constructor} objects for
 different classes, which would violate the type guarantees of
 {@code Constructor&lt;T&gt;[]}.</description>
					<attribute name="@return">
						<description>the array of {@code Constructor} objects representing the
  public constructors of this class</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException
             If a security manager, &lt;i&gt;s&lt;/i&gt;, is present and any of the
             following conditions is met:

             &lt;ul&gt;

             &lt;li&gt; invocation of
             {@link SecurityManager#checkMemberAccess
             s.checkMemberAccess(this, Member.PUBLIC)} denies
             access to the constructors within this class

             &lt;li&gt; the caller&apos;s class loader is not the same as or an
             ancestor of the class loader for the current class and
             invocation of {@link SecurityManager#checkPackageAccess
             s.checkPackageAccess()} denies access to the package
             of this class

             &lt;/ul&gt;</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.1</description>
					</attribute>
				</comment>
				<exceptions>
					<exception comment="If a security manager, &lt;i&gt;s&lt;/i&gt;, is present and any of the
             following conditions is met:

             &lt;ul&gt;

             &lt;li&gt; invocation of
             {@link SecurityManager#checkMemberAccess
             s.checkMemberAccess(this, Member.PUBLIC)} denies
             access to the constructors within this class

             &lt;li&gt; the caller&apos;s class loader is not the same as or an
             ancestor of the class loader for the current class and
             invocation of {@link SecurityManager#checkPackageAccess
             s.checkPackageAccess()} denies access to the package
             of this class

             &lt;/ul&gt;" fulltype="java.lang.SecurityException" type="SecurityException" />
				</exceptions>
			</method>
			<method visibility="public" name="getField" returncomment="the {@code Field} object of this class specified by
 {@code name}" fulltype="java.lang.reflect.Field" type="Field">
				<comment>
					<description>Returns a {@code Field} object that reflects the specified public
 member field of the class or interface represented by this
 {@code Class} object. The {@code name} parameter is a
 {@code String} specifying the simple name of the desired field.

 &lt;p&gt; The field to be reflected is determined by the algorithm that
 follows.  Let C be the class represented by this object:
 &lt;OL&gt;
 &lt;LI&gt; If C declares a public field with the name specified, that is the
      field to be reflected.&lt;/LI&gt;
 &lt;LI&gt; If no field was found in step 1 above, this algorithm is applied
      recursively to each direct superinterface of C. The direct
      superinterfaces are searched in the order they were declared.&lt;/LI&gt;
 &lt;LI&gt; If no field was found in steps 1 and 2 above, and C has a
      superclass S, then this algorithm is invoked recursively upon S.
      If C has no superclass, then a {@code NoSuchFieldException}
      is thrown.&lt;/LI&gt;
 &lt;/OL&gt;

 &lt;p&gt; See &lt;em&gt;The Java Language Specification&lt;/em&gt;, sections 8.2 and 8.3.</description>
					<attribute name="@param">
						<description>name the field name</description>
					</attribute>
					<attribute name="@return">
						<description>the {@code Field} object of this class specified by
 {@code name}</description>
					</attribute>
					<attribute name="@exception">
						<description>NoSuchFieldException if a field with the specified name is
              not found.</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException if {@code name} is {@code null}</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException
             If a security manager, &lt;i&gt;s&lt;/i&gt;, is present and any of the
             following conditions is met:

             &lt;ul&gt;

             &lt;li&gt; invocation of
             {@link SecurityManager#checkMemberAccess
             s.checkMemberAccess(this, Member.PUBLIC)} denies
             access to the field

             &lt;li&gt; the caller&apos;s class loader is not the same as or an
             ancestor of the class loader for the current class and
             invocation of {@link SecurityManager#checkPackageAccess
             s.checkPackageAccess()} denies access to the package
             of this class

             &lt;/ul&gt;</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.1</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="the field name" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception comment="if a field with the specified name is
              not found." fulltype="java.lang.NoSuchFieldException" type="NoSuchFieldException" />
					<exception comment="If a security manager, &lt;i&gt;s&lt;/i&gt;, is present and any of the
             following conditions is met:

             &lt;ul&gt;

             &lt;li&gt; invocation of
             {@link SecurityManager#checkMemberAccess
             s.checkMemberAccess(this, Member.PUBLIC)} denies
             access to the field

             &lt;li&gt; the caller&apos;s class loader is not the same as or an
             ancestor of the class loader for the current class and
             invocation of {@link SecurityManager#checkPackageAccess
             s.checkPackageAccess()} denies access to the package
             of this class

             &lt;/ul&gt;" fulltype="java.lang.SecurityException" type="SecurityException" />
				</exceptions>
			</method>
			<method visibility="public" name="getMethod" returncomment="the {@code Method} object that matches the specified
 {@code name} and {@code parameterTypes}" fulltype="java.lang.reflect.Method" type="Method">
				<comment>
					<description>Returns a {@code Method} object that reflects the specified public
 member method of the class or interface represented by this
 {@code Class} object. The {@code name} parameter is a
 {@code String} specifying the simple name of the desired method. The
 {@code parameterTypes} parameter is an array of {@code Class}
 objects that identify the method&apos;s formal parameter types, in declared
 order. If {@code parameterTypes} is {@code null}, it is
 treated as if it were an empty array.

 &lt;p&gt; If the {@code name} is &quot;{@code &lt;init&gt;};&quot;or &quot;{@code &lt;clinit&gt;}&quot; a
 {@code NoSuchMethodException} is raised. Otherwise, the method to
 be reflected is determined by the algorithm that follows.  Let C be the
 class represented by this object:
 &lt;OL&gt;
 &lt;LI&gt; C is searched for any &lt;I&gt;matching methods&lt;/I&gt;. If no matching
      method is found, the algorithm of step 1 is invoked recursively on
      the superclass of C.&lt;/LI&gt;
 &lt;LI&gt; If no method was found in step 1 above, the superinterfaces of C
      are searched for a matching method. If any such method is found, it
      is reflected.&lt;/LI&gt;
 &lt;/OL&gt;

 To find a matching method in a class C:&amp;nbsp; If C declares exactly one
 public method with the specified name and exactly the same formal
 parameter types, that is the method reflected. If more than one such
 method is found in C, and one of these methods has a return type that is
 more specific than any of the others, that method is reflected;
 otherwise one of the methods is chosen arbitrarily.

 &lt;p&gt;Note that there may be more than one matching method in a
 class because while the Java language forbids a class to
 declare multiple methods with the same signature but different
 return types, the Java virtual machine does not.  This
 increased flexibility in the virtual machine can be used to
 implement various language features.  For example, covariant
 returns can be implemented with {@linkplain
 java.lang.reflect.Method#isBridge bridge methods}; the bridge
 method and the method being overridden would have the same
 signature but different return types.

 &lt;p&gt; See &lt;em&gt;The Java Language Specification&lt;/em&gt;, sections 8.2 and 8.4.</description>
					<attribute name="@param">
						<description>name the name of the method</description>
					</attribute>
					<attribute name="@param">
						<description>parameterTypes the list of parameters</description>
					</attribute>
					<attribute name="@return">
						<description>the {@code Method} object that matches the specified
 {@code name} and {@code parameterTypes}</description>
					</attribute>
					<attribute name="@exception">
						<description>NoSuchMethodException if a matching method is not found
            or if the name is &quot;&amp;lt;init&amp;gt;&quot;or &quot;&amp;lt;clinit&amp;gt;&quot;.</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException if {@code name} is {@code null}</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException
             If a security manager, &lt;i&gt;s&lt;/i&gt;, is present and any of the
             following conditions is met:

             &lt;ul&gt;

             &lt;li&gt; invocation of
             {@link SecurityManager#checkMemberAccess
             s.checkMemberAccess(this, Member.PUBLIC)} denies
             access to the method

             &lt;li&gt; the caller&apos;s class loader is not the same as or an
             ancestor of the class loader for the current class and
             invocation of {@link SecurityManager#checkPackageAccess
             s.checkPackageAccess()} denies access to the package
             of this class

             &lt;/ul&gt;</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.1</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="the name of the method" fulltype="java.lang.String" type="String" />
					<param name="parameterTypes" comment="the list of parameters" fulltype="java.lang.Class[]" type="Class" />
				</params>
				<exceptions>
					<exception comment="if a matching method is not found
            or if the name is &quot;&amp;lt;init&amp;gt;&quot;or &quot;&amp;lt;clinit&amp;gt;&quot;." fulltype="java.lang.NoSuchMethodException" type="NoSuchMethodException" />
					<exception comment="If a security manager, &lt;i&gt;s&lt;/i&gt;, is present and any of the
             following conditions is met:

             &lt;ul&gt;

             &lt;li&gt; invocation of
             {@link SecurityManager#checkMemberAccess
             s.checkMemberAccess(this, Member.PUBLIC)} denies
             access to the method

             &lt;li&gt; the caller&apos;s class loader is not the same as or an
             ancestor of the class loader for the current class and
             invocation of {@link SecurityManager#checkPackageAccess
             s.checkPackageAccess()} denies access to the package
             of this class

             &lt;/ul&gt;" fulltype="java.lang.SecurityException" type="SecurityException" />
				</exceptions>
			</method>
			<method visibility="public" name="getConstructor" returncomment="the {@code Constructor} object of the public constructor that
 matches the specified {@code parameterTypes}" fulltype="java.lang.reflect.Constructor" type="Constructor">
				<comment>
					<description>Returns a {@code Constructor} object that reflects the specified
 public constructor of the class represented by this {@code Class}
 object. The {@code parameterTypes} parameter is an array of
 {@code Class} objects that identify the constructor&apos;s formal
 parameter types, in declared order.

 If this {@code Class} object represents an inner class
 declared in a non-static context, the formal parameter types
 include the explicit enclosing instance as the first parameter.

 &lt;p&gt; The constructor to reflect is the public constructor of the class
 represented by this {@code Class} object whose formal parameter
 types match those specified by {@code parameterTypes}.</description>
					<attribute name="@param">
						<description>parameterTypes the parameter array</description>
					</attribute>
					<attribute name="@return">
						<description>the {@code Constructor} object of the public constructor that
 matches the specified {@code parameterTypes}</description>
					</attribute>
					<attribute name="@exception">
						<description>NoSuchMethodException if a matching method is not found.</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException
             If a security manager, &lt;i&gt;s&lt;/i&gt;, is present and any of the
             following conditions is met:

             &lt;ul&gt;

             &lt;li&gt; invocation of
             {@link SecurityManager#checkMemberAccess
             s.checkMemberAccess(this, Member.PUBLIC)} denies
             access to the constructor

             &lt;li&gt; the caller&apos;s class loader is not the same as or an
             ancestor of the class loader for the current class and
             invocation of {@link SecurityManager#checkPackageAccess
             s.checkPackageAccess()} denies access to the package
             of this class

             &lt;/ul&gt;</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.1</description>
					</attribute>
				</comment>
				<params>
					<param name="parameterTypes" comment="the parameter array" fulltype="java.lang.Class[]" type="Class" />
				</params>
				<exceptions>
					<exception comment="if a matching method is not found." fulltype="java.lang.NoSuchMethodException" type="NoSuchMethodException" />
					<exception comment="If a security manager, &lt;i&gt;s&lt;/i&gt;, is present and any of the
             following conditions is met:

             &lt;ul&gt;

             &lt;li&gt; invocation of
             {@link SecurityManager#checkMemberAccess
             s.checkMemberAccess(this, Member.PUBLIC)} denies
             access to the constructor

             &lt;li&gt; the caller&apos;s class loader is not the same as or an
             ancestor of the class loader for the current class and
             invocation of {@link SecurityManager#checkPackageAccess
             s.checkPackageAccess()} denies access to the package
             of this class

             &lt;/ul&gt;" fulltype="java.lang.SecurityException" type="SecurityException" />
				</exceptions>
			</method>
			<method visibility="public" name="getDeclaredClasses" returncomment="the array of {@code Class} objects representing all the
 declared members of this class" fulltype="java.lang.Class[]" type="Class">
				<comment>
					<description>Returns an array of {@code Class} objects reflecting all the
 classes and interfaces declared as members of the class represented by
 this {@code Class} object. This includes public, protected, default
 (package) access, and private classes and interfaces declared by the
 class, but excludes inherited classes and interfaces.  This method
 returns an array of length 0 if the class declares no classes or
 interfaces as members, or if this {@code Class} object represents a
 primitive type, an array class, or void.</description>
					<attribute name="@return">
						<description>the array of {@code Class} objects representing all the
 declared members of this class</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException
             If a security manager, &lt;i&gt;s&lt;/i&gt;, is present and any of the
             following conditions is met:

             &lt;ul&gt;

             &lt;li&gt; invocation of
             {@link SecurityManager#checkMemberAccess
             s.checkMemberAccess(this, Member.DECLARED)} denies
             access to the declared classes within this class

             &lt;li&gt; the caller&apos;s class loader is not the same as or an
             ancestor of the class loader for the current class and
             invocation of {@link SecurityManager#checkPackageAccess
             s.checkPackageAccess()} denies access to the package
             of this class

             &lt;/ul&gt;</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.1</description>
					</attribute>
				</comment>
				<exceptions>
					<exception comment="If a security manager, &lt;i&gt;s&lt;/i&gt;, is present and any of the
             following conditions is met:

             &lt;ul&gt;

             &lt;li&gt; invocation of
             {@link SecurityManager#checkMemberAccess
             s.checkMemberAccess(this, Member.DECLARED)} denies
             access to the declared classes within this class

             &lt;li&gt; the caller&apos;s class loader is not the same as or an
             ancestor of the class loader for the current class and
             invocation of {@link SecurityManager#checkPackageAccess
             s.checkPackageAccess()} denies access to the package
             of this class

             &lt;/ul&gt;" fulltype="java.lang.SecurityException" type="SecurityException" />
				</exceptions>
			</method>
			<method visibility="public" name="getDeclaredFields" returncomment="the array of {@code Field} objects representing all the
 declared fields of this class" fulltype="java.lang.reflect.Field[]" type="Field">
				<comment>
					<description>Returns an array of {@code Field} objects reflecting all the fields
 declared by the class or interface represented by this
 {@code Class} object. This includes public, protected, default
 (package) access, and private fields, but excludes inherited fields.
 The elements in the array returned are not sorted and are not in any
 particular order.  This method returns an array of length 0 if the class
 or interface declares no fields, or if this {@code Class} object
 represents a primitive type, an array class, or void.

 &lt;p&gt; See &lt;em&gt;The Java Language Specification&lt;/em&gt;, sections 8.2 and 8.3.</description>
					<attribute name="@return">
						<description>the array of {@code Field} objects representing all the
 declared fields of this class</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException
             If a security manager, &lt;i&gt;s&lt;/i&gt;, is present and any of the
             following conditions is met:

             &lt;ul&gt;

             &lt;li&gt; invocation of
             {@link SecurityManager#checkMemberAccess
             s.checkMemberAccess(this, Member.DECLARED)} denies
             access to the declared fields within this class

             &lt;li&gt; the caller&apos;s class loader is not the same as or an
             ancestor of the class loader for the current class and
             invocation of {@link SecurityManager#checkPackageAccess
             s.checkPackageAccess()} denies access to the package
             of this class

             &lt;/ul&gt;</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.1</description>
					</attribute>
				</comment>
				<exceptions>
					<exception comment="If a security manager, &lt;i&gt;s&lt;/i&gt;, is present and any of the
             following conditions is met:

             &lt;ul&gt;

             &lt;li&gt; invocation of
             {@link SecurityManager#checkMemberAccess
             s.checkMemberAccess(this, Member.DECLARED)} denies
             access to the declared fields within this class

             &lt;li&gt; the caller&apos;s class loader is not the same as or an
             ancestor of the class loader for the current class and
             invocation of {@link SecurityManager#checkPackageAccess
             s.checkPackageAccess()} denies access to the package
             of this class

             &lt;/ul&gt;" fulltype="java.lang.SecurityException" type="SecurityException" />
				</exceptions>
			</method>
			<method visibility="public" name="getDeclaredMethods" returncomment="the array of {@code Method} objects representing all the
 declared methods of this class" fulltype="java.lang.reflect.Method[]" type="Method">
				<comment>
					<description>Returns an array of {@code Method} objects reflecting all the
 methods declared by the class or interface represented by this
 {@code Class} object. This includes public, protected, default
 (package) access, and private methods, but excludes inherited methods.
 The elements in the array returned are not sorted and are not in any
 particular order.  This method returns an array of length 0 if the class
 or interface declares no methods, or if this {@code Class} object
 represents a primitive type, an array class, or void.  The class
 initialization method {@code &lt;clinit&gt;} is not included in the
 returned array. If the class declares multiple public member methods
 with the same parameter types, they are all included in the returned
 array.

 &lt;p&gt; See &lt;em&gt;The Java Language Specification&lt;/em&gt;, section 8.2.</description>
					<attribute name="@return">
						<description>the array of {@code Method} objects representing all the
 declared methods of this class</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException
             If a security manager, &lt;i&gt;s&lt;/i&gt;, is present and any of the
             following conditions is met:

             &lt;ul&gt;

             &lt;li&gt; invocation of
             {@link SecurityManager#checkMemberAccess
             s.checkMemberAccess(this, Member.DECLARED)} denies
             access to the declared methods within this class

             &lt;li&gt; the caller&apos;s class loader is not the same as or an
             ancestor of the class loader for the current class and
             invocation of {@link SecurityManager#checkPackageAccess
             s.checkPackageAccess()} denies access to the package
             of this class

             &lt;/ul&gt;</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.1</description>
					</attribute>
				</comment>
				<exceptions>
					<exception comment="If a security manager, &lt;i&gt;s&lt;/i&gt;, is present and any of the
             following conditions is met:

             &lt;ul&gt;

             &lt;li&gt; invocation of
             {@link SecurityManager#checkMemberAccess
             s.checkMemberAccess(this, Member.DECLARED)} denies
             access to the declared methods within this class

             &lt;li&gt; the caller&apos;s class loader is not the same as or an
             ancestor of the class loader for the current class and
             invocation of {@link SecurityManager#checkPackageAccess
             s.checkPackageAccess()} denies access to the package
             of this class

             &lt;/ul&gt;" fulltype="java.lang.SecurityException" type="SecurityException" />
				</exceptions>
			</method>
			<method visibility="public" name="getDeclaredConstructors" returncomment="the array of {@code Constructor} objects representing all the
 declared constructors of this class" fulltype="java.lang.reflect.Constructor[]" type="Constructor">
				<comment>
					<description>Returns an array of {@code Constructor} objects reflecting all the
 constructors declared by the class represented by this
 {@code Class} object. These are public, protected, default
 (package) access, and private constructors.  The elements in the array
 returned are not sorted and are not in any particular order.  If the
 class has a default constructor, it is included in the returned array.
 This method returns an array of length 0 if this {@code Class}
 object represents an interface, a primitive type, an array class, or
 void.

 &lt;p&gt; See &lt;em&gt;The Java Language Specification&lt;/em&gt;, section 8.2.</description>
					<attribute name="@return">
						<description>the array of {@code Constructor} objects representing all the
 declared constructors of this class</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException
             If a security manager, &lt;i&gt;s&lt;/i&gt;, is present and any of the
             following conditions is met:

             &lt;ul&gt;

             &lt;li&gt; invocation of
             {@link SecurityManager#checkMemberAccess
             s.checkMemberAccess(this, Member.DECLARED)} denies
             access to the declared constructors within this class

             &lt;li&gt; the caller&apos;s class loader is not the same as or an
             ancestor of the class loader for the current class and
             invocation of {@link SecurityManager#checkPackageAccess
             s.checkPackageAccess()} denies access to the package
             of this class

             &lt;/ul&gt;</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.1</description>
					</attribute>
				</comment>
				<exceptions>
					<exception comment="If a security manager, &lt;i&gt;s&lt;/i&gt;, is present and any of the
             following conditions is met:

             &lt;ul&gt;

             &lt;li&gt; invocation of
             {@link SecurityManager#checkMemberAccess
             s.checkMemberAccess(this, Member.DECLARED)} denies
             access to the declared constructors within this class

             &lt;li&gt; the caller&apos;s class loader is not the same as or an
             ancestor of the class loader for the current class and
             invocation of {@link SecurityManager#checkPackageAccess
             s.checkPackageAccess()} denies access to the package
             of this class

             &lt;/ul&gt;" fulltype="java.lang.SecurityException" type="SecurityException" />
				</exceptions>
			</method>
			<method visibility="public" name="getDeclaredField" returncomment="the {@code Field} object for the specified field in this
 class" fulltype="java.lang.reflect.Field" type="Field">
				<comment>
					<description>Returns a {@code Field} object that reflects the specified declared
 field of the class or interface represented by this {@code Class}
 object. The {@code name} parameter is a {@code String} that
 specifies the simple name of the desired field.  Note that this method
 will not reflect the {@code length} field of an array class.</description>
					<attribute name="@param">
						<description>name the name of the field</description>
					</attribute>
					<attribute name="@return">
						<description>the {@code Field} object for the specified field in this
 class</description>
					</attribute>
					<attribute name="@exception">
						<description>NoSuchFieldException if a field with the specified name is
              not found.</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException if {@code name} is {@code null}</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException
             If a security manager, &lt;i&gt;s&lt;/i&gt;, is present and any of the
             following conditions is met:

             &lt;ul&gt;

             &lt;li&gt; invocation of
             {@link SecurityManager#checkMemberAccess
             s.checkMemberAccess(this, Member.DECLARED)} denies
             access to the declared field

             &lt;li&gt; the caller&apos;s class loader is not the same as or an
             ancestor of the class loader for the current class and
             invocation of {@link SecurityManager#checkPackageAccess
             s.checkPackageAccess()} denies access to the package
             of this class

             &lt;/ul&gt;</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.1</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="the name of the field" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception comment="if a field with the specified name is
              not found." fulltype="java.lang.NoSuchFieldException" type="NoSuchFieldException" />
					<exception comment="If a security manager, &lt;i&gt;s&lt;/i&gt;, is present and any of the
             following conditions is met:

             &lt;ul&gt;

             &lt;li&gt; invocation of
             {@link SecurityManager#checkMemberAccess
             s.checkMemberAccess(this, Member.DECLARED)} denies
             access to the declared field

             &lt;li&gt; the caller&apos;s class loader is not the same as or an
             ancestor of the class loader for the current class and
             invocation of {@link SecurityManager#checkPackageAccess
             s.checkPackageAccess()} denies access to the package
             of this class

             &lt;/ul&gt;" fulltype="java.lang.SecurityException" type="SecurityException" />
				</exceptions>
			</method>
			<method visibility="public" name="getDeclaredMethod" returncomment="the {@code Method} object for the method of this class
 matching the specified name and parameters" fulltype="java.lang.reflect.Method" type="Method">
				<comment>
					<description>Returns a {@code Method} object that reflects the specified
 declared method of the class or interface represented by this
 {@code Class} object. The {@code name} parameter is a
 {@code String} that specifies the simple name of the desired
 method, and the {@code parameterTypes} parameter is an array of
 {@code Class} objects that identify the method&apos;s formal parameter
 types, in declared order.  If more than one method with the same
 parameter types is declared in a class, and one of these methods has a
 return type that is more specific than any of the others, that method is
 returned; otherwise one of the methods is chosen arbitrarily.  If the
 name is &quot;&amp;lt;init&amp;gt;&quot;or &quot;&amp;lt;clinit&amp;gt;&quot; a {@code NoSuchMethodException}
 is raised.</description>
					<attribute name="@param">
						<description>name the name of the method</description>
					</attribute>
					<attribute name="@param">
						<description>parameterTypes the parameter array</description>
					</attribute>
					<attribute name="@return">
						<description>the {@code Method} object for the method of this class
 matching the specified name and parameters</description>
					</attribute>
					<attribute name="@exception">
						<description>NoSuchMethodException if a matching method is not found.</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException if {@code name} is {@code null}</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException
             If a security manager, &lt;i&gt;s&lt;/i&gt;, is present and any of the
             following conditions is met:

             &lt;ul&gt;

             &lt;li&gt; invocation of
             {@link SecurityManager#checkMemberAccess
             s.checkMemberAccess(this, Member.DECLARED)} denies
             access to the declared method

             &lt;li&gt; the caller&apos;s class loader is not the same as or an
             ancestor of the class loader for the current class and
             invocation of {@link SecurityManager#checkPackageAccess
             s.checkPackageAccess()} denies access to the package
             of this class

             &lt;/ul&gt;</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.1</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="the name of the method" fulltype="java.lang.String" type="String" />
					<param name="parameterTypes" comment="the parameter array" fulltype="java.lang.Class[]" type="Class" />
				</params>
				<exceptions>
					<exception comment="if a matching method is not found." fulltype="java.lang.NoSuchMethodException" type="NoSuchMethodException" />
					<exception comment="If a security manager, &lt;i&gt;s&lt;/i&gt;, is present and any of the
             following conditions is met:

             &lt;ul&gt;

             &lt;li&gt; invocation of
             {@link SecurityManager#checkMemberAccess
             s.checkMemberAccess(this, Member.DECLARED)} denies
             access to the declared method

             &lt;li&gt; the caller&apos;s class loader is not the same as or an
             ancestor of the class loader for the current class and
             invocation of {@link SecurityManager#checkPackageAccess
             s.checkPackageAccess()} denies access to the package
             of this class

             &lt;/ul&gt;" fulltype="java.lang.SecurityException" type="SecurityException" />
				</exceptions>
			</method>
			<method visibility="public" name="getDeclaredConstructor" returncomment="The {@code Constructor} object for the constructor with the
 specified parameter list" fulltype="java.lang.reflect.Constructor" type="Constructor">
				<comment>
					<description>Returns a {@code Constructor} object that reflects the specified
 constructor of the class or interface represented by this
 {@code Class} object.  The {@code parameterTypes} parameter is
 an array of {@code Class} objects that identify the constructor&apos;s
 formal parameter types, in declared order.

 If this {@code Class} object represents an inner class
 declared in a non-static context, the formal parameter types
 include the explicit enclosing instance as the first parameter.</description>
					<attribute name="@param">
						<description>parameterTypes the parameter array</description>
					</attribute>
					<attribute name="@return">
						<description>The {@code Constructor} object for the constructor with the
 specified parameter list</description>
					</attribute>
					<attribute name="@exception">
						<description>NoSuchMethodException if a matching method is not found.</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException
             If a security manager, &lt;i&gt;s&lt;/i&gt;, is present and any of the
             following conditions is met:

             &lt;ul&gt;

             &lt;li&gt; invocation of
             {@link SecurityManager#checkMemberAccess
             s.checkMemberAccess(this, Member.DECLARED)} denies
             access to the declared constructor

             &lt;li&gt; the caller&apos;s class loader is not the same as or an
             ancestor of the class loader for the current class and
             invocation of {@link SecurityManager#checkPackageAccess
             s.checkPackageAccess()} denies access to the package
             of this class

             &lt;/ul&gt;</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.1</description>
					</attribute>
				</comment>
				<params>
					<param name="parameterTypes" comment="the parameter array" fulltype="java.lang.Class[]" type="Class" />
				</params>
				<exceptions>
					<exception comment="if a matching method is not found." fulltype="java.lang.NoSuchMethodException" type="NoSuchMethodException" />
					<exception comment="If a security manager, &lt;i&gt;s&lt;/i&gt;, is present and any of the
             following conditions is met:

             &lt;ul&gt;

             &lt;li&gt; invocation of
             {@link SecurityManager#checkMemberAccess
             s.checkMemberAccess(this, Member.DECLARED)} denies
             access to the declared constructor

             &lt;li&gt; the caller&apos;s class loader is not the same as or an
             ancestor of the class loader for the current class and
             invocation of {@link SecurityManager#checkPackageAccess
             s.checkPackageAccess()} denies access to the package
             of this class

             &lt;/ul&gt;" fulltype="java.lang.SecurityException" type="SecurityException" />
				</exceptions>
			</method>
			<method visibility="public" name="getResourceAsStream" returncomment="A {@link java.io.InputStream} object or {@code null} if
              no resource with this name is found" fulltype="java.io.InputStream" type="InputStream">
				<comment>
					<description>Finds a resource with a given name.  The rules for searching resources
 associated with a given class are implemented by the defining
 {@linkplain ClassLoader class loader} of the class.  This method
 delegates to this object&apos;s class loader.  If this object was loaded by
 the bootstrap class loader, the method delegates to {@link
 ClassLoader#getSystemResourceAsStream}.

 &lt;p&gt; Before delegation, an absolute resource name is constructed from the
 given resource name using this algorithm:

 &lt;ul&gt;

 &lt;li&gt; If the {@code name} begins with a {@code &apos;/&apos;}
 (&lt;tt&gt;&apos;&amp;#92;u002f&apos;&lt;/tt&gt;), then the absolute name of the resource is the
 portion of the {@code name} following the {@code &apos;/&apos;}.

 &lt;li&gt; Otherwise, the absolute name is of the following form:

 &lt;blockquote&gt;
   {@code modified_package_name/name}
 &lt;/blockquote&gt;

 &lt;p&gt; Where the {@code modified_package_name} is the package name of this
 object with {@code &apos;/&apos;} substituted for {@code &apos;.&apos;}
 (&lt;tt&gt;&apos;&amp;#92;u002e&apos;&lt;/tt&gt;).

 &lt;/ul&gt;</description>
					<attribute name="@param">
						<description>name name of the desired resource</description>
					</attribute>
					<attribute name="@return">
						<description>A {@link java.io.InputStream} object or {@code null} if
              no resource with this name is found</description>
					</attribute>
					<attribute name="@throws">
						<description>NullPointerException If {@code name} is {@code null}</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.1</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="name of the desired resource" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getResource" returncomment="A  {@link java.net.URL} object or {@code null} if no
              resource with this name is found" fulltype="java.net.URL" type="URL">
				<comment>
					<description>Finds a resource with a given name.  The rules for searching resources
 associated with a given class are implemented by the defining
 {@linkplain ClassLoader class loader} of the class.  This method
 delegates to this object&apos;s class loader.  If this object was loaded by
 the bootstrap class loader, the method delegates to {@link
 ClassLoader#getSystemResource}.

 &lt;p&gt; Before delegation, an absolute resource name is constructed from the
 given resource name using this algorithm:

 &lt;ul&gt;

 &lt;li&gt; If the {@code name} begins with a {@code &apos;/&apos;}
 (&lt;tt&gt;&apos;&amp;#92;u002f&apos;&lt;/tt&gt;), then the absolute name of the resource is the
 portion of the {@code name} following the {@code &apos;/&apos;}.

 &lt;li&gt; Otherwise, the absolute name is of the following form:

 &lt;blockquote&gt;
   {@code modified_package_name/name}
 &lt;/blockquote&gt;

 &lt;p&gt; Where the {@code modified_package_name} is the package name of this
 object with {@code &apos;/&apos;} substituted for {@code &apos;.&apos;}
 (&lt;tt&gt;&apos;&amp;#92;u002e&apos;&lt;/tt&gt;).

 &lt;/ul&gt;</description>
					<attribute name="@param">
						<description>name name of the desired resource</description>
					</attribute>
					<attribute name="@return">
						<description>A  {@link java.net.URL} object or {@code null} if no
              resource with this name is found</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.1</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="name of the desired resource" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getProtectionDomain" returncomment="the ProtectionDomain of this class" fulltype="java.security.ProtectionDomain" type="ProtectionDomain">
				<comment>
					<description>Returns the {@code ProtectionDomain} of this class.  If there is a
 security manager installed, this method first calls the security
 manager&apos;s {@code checkPermission} method with a
 {@code RuntimePermission(&quot;getProtectionDomain&quot;)} permission to
 ensure it&apos;s ok to get the
 {@code ProtectionDomain}.</description>
					<attribute name="@return">
						<description>the ProtectionDomain of this class</description>
					</attribute>
					<attribute name="@throws">
						<description>SecurityException
        if a security manager exists and its
        {@code checkPermission} method doesn&apos;t allow
        getting the ProtectionDomain.</description>
					</attribute>
					<attribute name="@see">
						<description>java.security.ProtectionDomain</description>
					</attribute>
					<attribute name="@see">
						<description>SecurityManager#checkPermission</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.RuntimePermission</description>
					</attribute>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="private" name="getProtectionDomain0" fulltype="java.security.ProtectionDomain" type="ProtectionDomain">
				<comment>
					<description>Returns the ProtectionDomain of this class.</description>
				</comment>
			</method>
			<method visibility="package-private" name="setProtectionDomain0" fulltype="void" type="void">
				<comment>
					<description>Set the ProtectionDomain for this class. Called by
 ClassLoader.defineClass.</description>
				</comment>
				<params>
					<param name="pd" fulltype="java.security.ProtectionDomain" type="ProtectionDomain" />
				</params>
			</method>
			<method static="true" visibility="package-private" name="getPrimitiveClass" fulltype="java.lang.Class" type="Class">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="private" name="checkMemberAccess" fulltype="void" type="void">
				<params>
					<param name="which" fulltype="int" type="int" />
					<param name="ccl" fulltype="java.lang.ClassLoader" type="ClassLoader" />
				</params>
			</method>
			<method visibility="private" name="resolveName" fulltype="java.lang.String" type="String">
				<comment>
					<description>Add a package name prefix if the name is not absolute Remove leading &quot;/&quot;
 if name is absolute</description>
				</comment>
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="private" name="clearCachesOnClassRedefinition" fulltype="void" type="void" />
			<method visibility="private" name="getGenericSignature" fulltype="java.lang.String" type="String" />
			<method visibility="private" name="getFactory" fulltype="sun.reflect.generics.factory.GenericsFactory" type="GenericsFactory" />
			<method visibility="private" name="getGenericInfo" fulltype="sun.reflect.generics.repository.ClassRepository" type="ClassRepository" />
			<method visibility="private" name="getRawAnnotations" fulltype="byte[]" type="byte" />
			<method visibility="package-private" name="getConstantPool" fulltype="sun.reflect.ConstantPool" type="ConstantPool" />
			<method visibility="private" name="privateGetDeclaredFields" fulltype="java.lang.reflect.Field[]" type="Field">
				<params>
					<param name="publicOnly" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="private" name="privateGetPublicFields" fulltype="java.lang.reflect.Field[]" type="Field">
				<params>
					<param name="traversedInterfaces" fulltype="java.util.Set" type="Set" />
				</params>
			</method>
			<method static="true" visibility="private" name="addAll" fulltype="void" type="void">
				<params>
					<param name="c" fulltype="java.util.Collection" type="Collection" />
					<param name="o" fulltype="java.lang.reflect.Field[]" type="Field" />
				</params>
			</method>
			<method visibility="private" name="privateGetDeclaredConstructors" fulltype="java.lang.reflect.Constructor[]" type="Constructor">
				<params>
					<param name="publicOnly" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="private" name="privateGetDeclaredMethods" fulltype="java.lang.reflect.Method[]" type="Method">
				<params>
					<param name="publicOnly" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="private" name="privateGetPublicMethods" fulltype="java.lang.reflect.Method[]" type="Method" />
			<method visibility="private" name="searchFields" fulltype="java.lang.reflect.Field" type="Field">
				<params>
					<param name="fields" fulltype="java.lang.reflect.Field[]" type="Field" />
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="private" name="getField0" fulltype="java.lang.reflect.Field" type="Field">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception fulltype="java.lang.NoSuchFieldException" type="NoSuchFieldException" />
				</exceptions>
			</method>
			<method static="true" visibility="private" name="searchMethods" fulltype="java.lang.reflect.Method" type="Method">
				<params>
					<param name="methods" fulltype="java.lang.reflect.Method[]" type="Method" />
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="parameterTypes" fulltype="java.lang.Class[]" type="Class" />
				</params>
			</method>
			<method visibility="private" name="getMethod0" fulltype="java.lang.reflect.Method" type="Method">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
					<param name="parameterTypes" fulltype="java.lang.Class[]" type="Class" />
				</params>
			</method>
			<method visibility="private" name="getConstructor0" fulltype="java.lang.reflect.Constructor" type="Constructor">
				<params>
					<param name="parameterTypes" fulltype="java.lang.Class[]" type="Class" />
					<param name="which" fulltype="int" type="int" />
				</params>
				<exceptions>
					<exception fulltype="java.lang.NoSuchMethodException" type="NoSuchMethodException" />
				</exceptions>
			</method>
			<method static="true" visibility="private" name="arrayContentsEq" fulltype="boolean" type="boolean">
				<params>
					<param name="a1" fulltype="java.lang.Object[]" type="Object" />
					<param name="a2" fulltype="java.lang.Object[]" type="Object" />
				</params>
			</method>
			<method static="true" visibility="private" name="copyFields" fulltype="java.lang.reflect.Field[]" type="Field">
				<params>
					<param name="arg" fulltype="java.lang.reflect.Field[]" type="Field" />
				</params>
			</method>
			<method static="true" visibility="private" name="copyMethods" fulltype="java.lang.reflect.Method[]" type="Method">
				<params>
					<param name="arg" fulltype="java.lang.reflect.Method[]" type="Method" />
				</params>
			</method>
			<method static="true" visibility="private" name="copyConstructors" fulltype="java.lang.reflect.Constructor[]" type="Constructor">
				<params>
					<param name="arg" fulltype="java.lang.reflect.Constructor[]" type="Constructor" />
				</params>
			</method>
			<method visibility="private" name="getDeclaredFields0" fulltype="java.lang.reflect.Field[]" type="Field">
				<params>
					<param name="publicOnly" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="private" name="getDeclaredMethods0" fulltype="java.lang.reflect.Method[]" type="Method">
				<params>
					<param name="publicOnly" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="private" name="getDeclaredConstructors0" fulltype="java.lang.reflect.Constructor[]" type="Constructor">
				<params>
					<param name="publicOnly" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="private" name="getDeclaredClasses0" fulltype="java.lang.Class[]" type="Class" />
			<method static="true" visibility="private" name="argumentTypesToString" fulltype="java.lang.String" type="String">
				<params>
					<param name="argTypes" fulltype="java.lang.Class[]" type="Class" />
				</params>
			</method>
			<method visibility="public" name="desiredAssertionStatus" returncomment="the desired assertion status of the specified class." fulltype="boolean" type="boolean">
				<comment>
					<description>Returns the assertion status that would be assigned to this
 class if it were to be initialized at the time this method is invoked.
 If this class has had its assertion status set, the most recent
 setting will be returned; otherwise, if any package default assertion
 status pertains to this class, the most recent setting for the most
 specific pertinent package default assertion status is returned;
 otherwise, if this class is not a system class (i.e., it has a
 class loader) its class loader&apos;s default assertion status is returned;
 otherwise, the system class default assertion status is returned.
 &lt;p&gt;
 Few programmers will have any need for this method; it is provided
 for the benefit of the JRE itself.  (It allows a class to determine at
 the time that it is initialized whether assertions should be enabled.)
 Note that this method is not guaranteed to return the actual
 assertion status that was (or will be) associated with the specified
 class when it was (or will be) initialized.</description>
					<attribute name="@return">
						<description>the desired assertion status of the specified class.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.ClassLoader#setClassAssertionStatus</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.ClassLoader#setPackageAssertionStatus</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.ClassLoader#setDefaultAssertionStatus</description>
					</attribute>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="private" name="desiredAssertionStatus0" fulltype="boolean" type="boolean">
				<params>
					<param name="clazz" fulltype="java.lang.Class" type="Class" />
				</params>
			</method>
			<method visibility="public" name="isEnum" returncomment="true if and only if this class was declared as an enum in the
     source code" fulltype="boolean" type="boolean">
				<comment>
					<description>Returns true if and only if this class was declared as an enum in the
 source code.</description>
					<attribute name="@return">
						<description>true if and only if this class was declared as an enum in the
     source code</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="private" name="getReflectionFactory" fulltype="sun.reflect.ReflectionFactory" type="ReflectionFactory" />
			<method static="true" visibility="private" name="checkInitted" fulltype="void" type="void" />
			<method visibility="public" name="getEnumConstants" returncomment="an array containing the values comprising the enum class
     represented by this Class object in the order they&apos;re
     declared, or null if this Class object does not
     represent an enum type" fulltype="java.lang.Object[]" type="Object">
				<comment>
					<description>Returns the elements of this enum class or null if this
 Class object does not represent an enum type.</description>
					<attribute name="@return">
						<description>an array containing the values comprising the enum class
     represented by this Class object in the order they&apos;re
     declared, or null if this Class object does not
     represent an enum type</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method visibility="package-private" name="getEnumConstantsShared" fulltype="java.lang.Object[]" type="Object">
				<comment>
					<description>Returns the elements of this enum class or null if this
 Class object does not represent an enum type;
 identical to getEnumConstantsShared except that
 the result is uncloned, cached, and shared by all callers.</description>
				</comment>
			</method>
			<method visibility="package-private" name="enumConstantDirectory" fulltype="java.util.Map" type="Map">
				<comment>
					<description>Returns a map from simple name to enum constant.  This package-private
 method is used internally by Enum to implement
     public static &lt;T extends Enum&lt;T&gt;&gt; T valueOf(Class&lt;T&gt;, String)
 efficiently.  Note that the map is returned by this method is
 created lazily on first use.  Typically it won&apos;t ever get created.</description>
				</comment>
			</method>
			<method visibility="public" name="cast" returncomment="the object after casting, or null if obj is null" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Casts an object to the class or interface represented
 by this {@code Class} object.</description>
					<attribute name="@param">
						<description>obj the object to be cast</description>
					</attribute>
					<attribute name="@return">
						<description>the object after casting, or null if obj is null</description>
					</attribute>
					<attribute name="@throws">
						<description>ClassCastException if the object is not
 null and is not assignable to the type T.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="obj" comment="the object to be cast" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="private" name="cannotCastMsg" fulltype="java.lang.String" type="String">
				<params>
					<param name="obj" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="asSubclass" returncomment="this {@code Class} object, cast to represent a subclass of
    the specified class object." fulltype="java.lang.Class" type="Class">
				<comment>
					<description>Casts this {@code Class} object to represent a subclass of the class
 represented by the specified class object.  Checks that that the cast
 is valid, and throws a {@code ClassCastException} if it is not.  If
 this method succeeds, it always returns a reference to this class object.

 &lt;p&gt;This method is useful when a client needs to &quot;narrow&quot; the type of
 a {@code Class} object to pass it to an API that restricts the
 {@code Class} objects that it is willing to accept.  A cast would
 generate a compile-time warning, as the correctness of the cast
 could not be checked at runtime (because generic types are implemented
 by erasure).</description>
					<attribute name="@return">
						<description>this {@code Class} object, cast to represent a subclass of
    the specified class object.</description>
					</attribute>
					<attribute name="@throws">
						<description>ClassCastException if this {@code Class} object does not
    represent a subclass of the specified class (here &quot;subclass&quot; includes
    the class itself).</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="clazz" fulltype="java.lang.Class" type="Class" />
				</params>
			</method>
			<method visibility="public" name="getAnnotation" fulltype="java.lang.annotation.Annotation" type="Annotation">
				<comment>
					<attribute name="@throws">
						<description>NullPointerException {@inheritDoc}</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="annotationClass" fulltype="java.lang.Class" type="Class" />
				</params>
			</method>
			<method visibility="public" name="isAnnotationPresent" fulltype="boolean" type="boolean">
				<comment>
					<attribute name="@throws">
						<description>NullPointerException {@inheritDoc}</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="annotationClass" fulltype="java.lang.Class" type="Class" />
				</params>
			</method>
			<method visibility="public" name="getAnnotations" fulltype="java.lang.annotation.Annotation[]" type="Annotation">
				<comment>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getDeclaredAnnotations" fulltype="java.lang.annotation.Annotation[]" type="Annotation">
				<comment>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method synchronized="true" visibility="private" name="initAnnotationsIfNecessary" fulltype="void" type="void" />
			<method visibility="package-private" name="setAnnotationType" fulltype="void" type="void">
				<params>
					<param name="type" fulltype="sun.reflect.annotation.AnnotationType" type="AnnotationType" />
				</params>
			</method>
			<method visibility="package-private" name="getAnnotationType" fulltype="sun.reflect.annotation.AnnotationType" type="AnnotationType" />
		</methods>
		<jelclass final="true" superclass="Object" visibility="private" package="java.lang" superclassfulltype="java.lang.Object" fulltype="java.lang.Class.EnclosingMethodInfo" type="Class.EnclosingMethodInfo">
			<fields>
				<field visibility="private" name="enclosingClass" fulltype="java.lang.Class" type="Class" />
				<field visibility="private" name="name" fulltype="java.lang.String" type="String" />
				<field visibility="private" name="descriptor" fulltype="java.lang.String" type="String" />
			</fields>
			<methods>
				<constructor visibility="private" name="Class.EnclosingMethodInfo">
					<params>
						<param name="enclosingInfo" fulltype="java.lang.Object[]" type="Object" />
					</params>
				</constructor>
				<method visibility="package-private" name="isPartial" fulltype="boolean" type="boolean" />
				<method visibility="package-private" name="isConstructor" fulltype="boolean" type="boolean" />
				<method visibility="package-private" name="isMethod" fulltype="boolean" type="boolean" />
				<method visibility="package-private" name="getEnclosingClass" fulltype="java.lang.Class" type="Class" />
				<method visibility="package-private" name="getName" fulltype="java.lang.String" type="String" />
				<method visibility="package-private" name="getDescriptor" fulltype="java.lang.String" type="String" />
			</methods>
		</jelclass>
		<jelclass superclass="Object" visibility="package-private" package="java.lang" superclassfulltype="java.lang.Object" fulltype="java.lang.Class.MethodArray" type="Class.MethodArray">
			<fields>
				<field visibility="private" name="methods" fulltype="java.lang.reflect.Method[]" type="Method" />
				<field visibility="private" name="length" fulltype="int" type="int" />
			</fields>
			<methods>
				<constructor visibility="package-private" name="Class.MethodArray" />
				<method visibility="package-private" name="add" fulltype="void" type="void">
					<params>
						<param name="m" fulltype="java.lang.reflect.Method" type="Method" />
					</params>
				</method>
				<method visibility="package-private" name="addAll" fulltype="void" type="void">
					<params>
						<param name="ma" fulltype="java.lang.reflect.Method[]" type="Method" />
					</params>
				</method>
				<method visibility="package-private" name="addAll" fulltype="void" type="void">
					<params>
						<param name="ma" fulltype="java.lang.Class.MethodArray" type="Class.MethodArray" />
					</params>
				</method>
				<method visibility="package-private" name="addIfNotPresent" fulltype="void" type="void">
					<params>
						<param name="newMethod" fulltype="java.lang.reflect.Method" type="Method" />
					</params>
				</method>
				<method visibility="package-private" name="addAllIfNotPresent" fulltype="void" type="void">
					<params>
						<param name="newMethods" fulltype="java.lang.Class.MethodArray" type="Class.MethodArray" />
					</params>
				</method>
				<method visibility="package-private" name="length" fulltype="int" type="int" />
				<method visibility="package-private" name="get" fulltype="java.lang.reflect.Method" type="Method">
					<params>
						<param name="i" fulltype="int" type="int" />
					</params>
				</method>
				<method visibility="package-private" name="removeByNameAndSignature" fulltype="void" type="void">
					<params>
						<param name="toRemove" fulltype="java.lang.reflect.Method" type="Method" />
					</params>
				</method>
				<method visibility="package-private" name="compactAndTrim" fulltype="void" type="void" />
				<method visibility="package-private" name="getArray" fulltype="java.lang.reflect.Method[]" type="Method" />
			</methods>
		</jelclass>
	</jelclass>
	<jelclass final="true" superclass="Object" visibility="private" package="java.lang" superclassfulltype="java.lang.Object" fulltype="java.lang.Class.EnclosingMethodInfo" type="Class.EnclosingMethodInfo">
		<fields>
			<field visibility="private" name="enclosingClass" fulltype="java.lang.Class" type="Class" />
			<field visibility="private" name="name" fulltype="java.lang.String" type="String" />
			<field visibility="private" name="descriptor" fulltype="java.lang.String" type="String" />
		</fields>
		<methods>
			<constructor visibility="private" name="Class.EnclosingMethodInfo">
				<params>
					<param name="enclosingInfo" fulltype="java.lang.Object[]" type="Object" />
				</params>
			</constructor>
			<method visibility="package-private" name="isPartial" fulltype="boolean" type="boolean" />
			<method visibility="package-private" name="isConstructor" fulltype="boolean" type="boolean" />
			<method visibility="package-private" name="isMethod" fulltype="boolean" type="boolean" />
			<method visibility="package-private" name="getEnclosingClass" fulltype="java.lang.Class" type="Class" />
			<method visibility="package-private" name="getName" fulltype="java.lang.String" type="String" />
			<method visibility="package-private" name="getDescriptor" fulltype="java.lang.String" type="String" />
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="package-private" package="java.lang" superclassfulltype="java.lang.Object" fulltype="java.lang.Class.MethodArray" type="Class.MethodArray">
		<fields>
			<field visibility="private" name="methods" fulltype="java.lang.reflect.Method[]" type="Method" />
			<field visibility="private" name="length" fulltype="int" type="int" />
		</fields>
		<methods>
			<constructor visibility="package-private" name="Class.MethodArray" />
			<method visibility="package-private" name="add" fulltype="void" type="void">
				<params>
					<param name="m" fulltype="java.lang.reflect.Method" type="Method" />
				</params>
			</method>
			<method visibility="package-private" name="addAll" fulltype="void" type="void">
				<params>
					<param name="ma" fulltype="java.lang.reflect.Method[]" type="Method" />
				</params>
			</method>
			<method visibility="package-private" name="addAll" fulltype="void" type="void">
				<params>
					<param name="ma" fulltype="java.lang.Class.MethodArray" type="Class.MethodArray" />
				</params>
			</method>
			<method visibility="package-private" name="addIfNotPresent" fulltype="void" type="void">
				<params>
					<param name="newMethod" fulltype="java.lang.reflect.Method" type="Method" />
				</params>
			</method>
			<method visibility="package-private" name="addAllIfNotPresent" fulltype="void" type="void">
				<params>
					<param name="newMethods" fulltype="java.lang.Class.MethodArray" type="Class.MethodArray" />
				</params>
			</method>
			<method visibility="package-private" name="length" fulltype="int" type="int" />
			<method visibility="package-private" name="get" fulltype="java.lang.reflect.Method" type="Method">
				<params>
					<param name="i" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="package-private" name="removeByNameAndSignature" fulltype="void" type="void">
				<params>
					<param name="toRemove" fulltype="java.lang.reflect.Method" type="Method" />
				</params>
			</method>
			<method visibility="package-private" name="compactAndTrim" fulltype="void" type="void" />
			<method visibility="package-private" name="getArray" fulltype="java.lang.reflect.Method[]" type="Method" />
		</methods>
	</jelclass>
	<jelclass final="true" superclass="BasicPermission" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.security.BasicPermission" fulltype="java.lang.RuntimePermission" type="RuntimePermission">
		<comment>
			<description>This class is for runtime permissions. A RuntimePermission
 contains a name (also referred to as a &quot;target name&quot;) but
 no actions list; you either have the named permission
 or you don&apos;t.

 &lt;P&gt;
 The target name is the name of the runtime permission (see below). The
 naming convention follows the  hierarchical property naming convention.
 Also, an asterisk
 may appear at the end of the name, following a &quot;.&quot;, or by itself, to
 signify a wildcard match. For example: &quot;loadLibrary.*&quot; or &quot;*&quot; is valid,
 &quot;*loadLibrary&quot; or &quot;a*b&quot; is not valid.
 &lt;P&gt;
 The following table lists all the possible RuntimePermission target names,
 and for each provides a description of what the permission allows
 and a discussion of the risks of granting code the permission.
 &lt;P&gt;

 &lt;table border=1 cellpadding=5 summary=&quot;permission target name,
  what the target allows,and associated risks&quot;&gt;
 &lt;tr&gt;
 &lt;th&gt;Permission Target Name&lt;/th&gt;
 &lt;th&gt;What the Permission Allows&lt;/th&gt;
 &lt;th&gt;Risks of Allowing this Permission&lt;/th&gt;
 &lt;/tr&gt;

 &lt;tr&gt;
   &lt;td&gt;createClassLoader&lt;/td&gt;
   &lt;td&gt;Creation of a class loader&lt;/td&gt;
   &lt;td&gt;This is an extremely dangerous permission to grant.
 Malicious applications that can instantiate their own class
 loaders could then load their own rogue classes into the system.
 These newly loaded classes could be placed into any protection
 domain by the class loader, thereby automatically granting the
 classes the permissions for that domain.&lt;/td&gt;
 &lt;/tr&gt;

 &lt;tr&gt;
   &lt;td&gt;getClassLoader&lt;/td&gt;
   &lt;td&gt;Retrieval of a class loader (e.g., the class loader for the calling
 class)&lt;/td&gt;
   &lt;td&gt;This would grant an attacker permission to get the
 class loader for a particular class. This is dangerous because
 having access to a class&apos;s class loader allows the attacker to
 load other classes available to that class loader. The attacker
 would typically otherwise not have access to those classes.&lt;/td&gt;
 &lt;/tr&gt;

 &lt;tr&gt;
   &lt;td&gt;setContextClassLoader&lt;/td&gt;
   &lt;td&gt;Setting of the context class loader used by a thread&lt;/td&gt;
   &lt;td&gt;The context class loader is used by system code and extensions
 when they need to lookup resources that might not exist in the system
 class loader. Granting setContextClassLoader permission would allow
 code to change which context class loader is used
 for a particular thread, including system threads.&lt;/td&gt;
 &lt;/tr&gt;

 &lt;tr&gt;
   &lt;td&gt;enableContextClassLoaderOverride&lt;/td&gt;
   &lt;td&gt;Subclass implementation of the thread context class loader methods&lt;/td&gt;
   &lt;td&gt;The context class loader is used by system code and extensions
 when they need to lookup resources that might not exist in the system
 class loader. Granting enableContextClassLoaderOverride permission would allow
 a subclass of Thread to override the methods that are used
 to get or set the context class loader for a particular thread.&lt;/td&gt;
 &lt;/tr&gt;

 &lt;tr&gt;
   &lt;td&gt;setSecurityManager&lt;/td&gt;
   &lt;td&gt;Setting of the security manager (possibly replacing an existing one)
 &lt;/td&gt;
   &lt;td&gt;The security manager is a class that allows
 applications to implement a security policy. Granting the setSecurityManager
 permission would allow code to change which security manager is used by
 installing a different, possibly less restrictive security manager,
 thereby bypassing checks that would have been enforced by the original
 security manager.&lt;/td&gt;
 &lt;/tr&gt;

 &lt;tr&gt;
   &lt;td&gt;createSecurityManager&lt;/td&gt;
   &lt;td&gt;Creation of a new security manager&lt;/td&gt;
   &lt;td&gt;This gives code access to protected, sensitive methods that may
 disclose information about other classes or the execution stack.&lt;/td&gt;
 &lt;/tr&gt;

 &lt;tr&gt;
   &lt;td&gt;getenv.{variable name}&lt;/td&gt;
   &lt;td&gt;Reading of the value of the specified environment variable&lt;/td&gt;
   &lt;td&gt;This would allow code to read the value, or determine the
       existence, of a particular environment variable.  This is
       dangerous if the variable contains confidential data.&lt;/td&gt;
 &lt;/tr&gt;

 &lt;tr&gt;
   &lt;td&gt;exitVM.{exit status}&lt;/td&gt;
   &lt;td&gt;Halting of the Java Virtual Machine with the specified exit status&lt;/td&gt;
   &lt;td&gt;This allows an attacker to mount a denial-of-service attack
 by automatically forcing the virtual machine to halt.
 Note: The &quot;exitVM.*&quot; permission is automatically granted to all code
 loaded from the application class path, thus enabling applications
 to terminate themselves. Also, the &quot;exitVM&quot; permission is equivalent to
 &quot;exitVM.*&quot;.&lt;/td&gt;
 &lt;/tr&gt;

 &lt;tr&gt;
   &lt;td&gt;shutdownHooks&lt;/td&gt;
   &lt;td&gt;Registration and cancellation of virtual-machine shutdown hooks&lt;/td&gt;
   &lt;td&gt;This allows an attacker to register a malicious shutdown
 hook that interferes with the clean shutdown of the virtual machine.&lt;/td&gt;
 &lt;/tr&gt;

 &lt;tr&gt;
   &lt;td&gt;setFactory&lt;/td&gt;
   &lt;td&gt;Setting of the socket factory used by ServerSocket or Socket,
 or of the stream handler factory used by URL&lt;/td&gt;
   &lt;td&gt;This allows code to set the actual implementation
 for the socket, server socket, stream handler, or RMI socket factory.
 An attacker may set a faulty implementation which mangles the data
 stream.&lt;/td&gt;
 &lt;/tr&gt;

 &lt;tr&gt;
   &lt;td&gt;setIO&lt;/td&gt;
   &lt;td&gt;Setting of System.out, System.in, and System.err&lt;/td&gt;
   &lt;td&gt;This allows changing the value of the standard system streams.
 An attacker may change System.in to monitor and
 steal user input, or may set System.err to a &quot;null&quot; OutputStream,
 which would hide any error messages sent to System.err. &lt;/td&gt;
 &lt;/tr&gt;

 &lt;tr&gt;
   &lt;td&gt;modifyThread&lt;/td&gt;
   &lt;td&gt;Modification of threads, e.g., via calls to Thread
 &lt;tt&gt;interrupt&lt;/tt&gt;, &lt;tt&gt;stop&lt;/tt&gt;, &lt;tt&gt;suspend&lt;/tt&gt;,
 &lt;tt&gt;resume&lt;/tt&gt;, &lt;tt&gt;setDaemon&lt;/tt&gt;, &lt;tt&gt;setPriority&lt;/tt&gt;,
 &lt;tt&gt;setName&lt;/tt&gt; and &lt;tt&gt;setUncaughtExceptionHandler&lt;/tt&gt;
 methods&lt;/td&gt;
 &lt;td&gt;This allows an attacker to modify the behaviour of
 any thread in the system.&lt;/td&gt;
 &lt;/tr&gt;

 &lt;tr&gt;
   &lt;td&gt;stopThread&lt;/td&gt;
   &lt;td&gt;Stopping of threads via calls to the Thread &lt;code&gt;stop&lt;/code&gt;
 method&lt;/td&gt;
   &lt;td&gt;This allows code to stop any thread in the system provided that it is
 already granted permission to access that thread.
 This poses as a threat, because that code may corrupt the system by
 killing existing threads.&lt;/td&gt;
 &lt;/tr&gt;

 &lt;tr&gt;
   &lt;td&gt;modifyThreadGroup&lt;/td&gt;
   &lt;td&gt;modification of thread groups, e.g., via calls to ThreadGroup
 &lt;code&gt;destroy&lt;/code&gt;, &lt;code&gt;getParent&lt;/code&gt;, &lt;code&gt;resume&lt;/code&gt;,
 &lt;code&gt;setDaemon&lt;/code&gt;, &lt;code&gt;setMaxPriority&lt;/code&gt;, &lt;code&gt;stop&lt;/code&gt;,
 and &lt;code&gt;suspend&lt;/code&gt; methods&lt;/td&gt;
   &lt;td&gt;This allows an attacker to create thread groups and
 set their run priority.&lt;/td&gt;
 &lt;/tr&gt;

 &lt;tr&gt;
   &lt;td&gt;getProtectionDomain&lt;/td&gt;
   &lt;td&gt;Retrieval of the ProtectionDomain for a class&lt;/td&gt;
   &lt;td&gt;This allows code to obtain policy information
 for a particular code source. While obtaining policy information
 does not compromise the security of the system, it does give
 attackers additional information, such as local file names for
 example, to better aim an attack.&lt;/td&gt;
 &lt;/tr&gt;

 &lt;tr&gt;
   &lt;td&gt;getFileSystemAttributes&lt;/td&gt;
   &lt;td&gt;Retrieval of file system attributes&lt;/td&gt;
   &lt;td&gt;This allows code to obtain file system information such as disk usage
       or disk space available to the caller.  This is potentially dangerous
       because it discloses information about the system hardware
       configuration and some information about the caller&apos;s privilege to
       write files.&lt;/td&gt;
 &lt;/tr&gt;

 &lt;tr&gt;
   &lt;td&gt;readFileDescriptor&lt;/td&gt;
   &lt;td&gt;Reading of file descriptors&lt;/td&gt;
   &lt;td&gt;This would allow code to read the particular file associated
       with the file descriptor read. This is dangerous if the file
       contains confidential data.&lt;/td&gt;
 &lt;/tr&gt;

 &lt;tr&gt;
   &lt;td&gt;writeFileDescriptor&lt;/td&gt;
   &lt;td&gt;Writing to file descriptors&lt;/td&gt;
   &lt;td&gt;This allows code to write to a particular file associated
       with the descriptor. This is dangerous because it may allow
       malicious code to plant viruses or at the very least, fill up
       your entire disk.&lt;/td&gt;
 &lt;/tr&gt;

 &lt;tr&gt;
   &lt;td&gt;loadLibrary.{library name}&lt;/td&gt;
   &lt;td&gt;Dynamic linking of the specified library&lt;/td&gt;
   &lt;td&gt;It is dangerous to allow an applet permission to load native code
 libraries, because the Java security architecture is not designed to and
 does not prevent malicious behavior at the level of native code.&lt;/td&gt;
 &lt;/tr&gt;

 &lt;tr&gt;
   &lt;td&gt;accessClassInPackage.{package name}&lt;/td&gt;
   &lt;td&gt;Access to the specified package via a class loader&apos;s
 &lt;code&gt;loadClass&lt;/code&gt; method when that class loader calls
 the SecurityManager &lt;code&gt;checkPackageAccess&lt;/code&gt; method&lt;/td&gt;
   &lt;td&gt;This gives code access to classes in packages
 to which it normally does not have access. Malicious code
 may use these classes to help in its attempt to compromise
 security in the system.&lt;/td&gt;
 &lt;/tr&gt;

 &lt;tr&gt;
   &lt;td&gt;defineClassInPackage.{package name}&lt;/td&gt;
   &lt;td&gt;Definition of classes in the specified package, via a class
 loader&apos;s &lt;code&gt;defineClass&lt;/code&gt; method when that class loader calls
 the SecurityManager &lt;code&gt;checkPackageDefinition&lt;/code&gt; method.&lt;/td&gt;
   &lt;td&gt;This grants code permission to define a class
 in a particular package. This is dangerous because malicious
 code with this permission may define rogue classes in
 trusted packages like &lt;code&gt;java.security&lt;/code&gt; or &lt;code&gt;java.lang&lt;/code&gt;,
 for example.&lt;/td&gt;
 &lt;/tr&gt;

 &lt;tr&gt;
   &lt;td&gt;accessDeclaredMembers&lt;/td&gt;
   &lt;td&gt;Access to the declared members of a class&lt;/td&gt;
   &lt;td&gt;This grants code permission to query a class for its public,
 protected, default (package) access, and private fields and/or
 methods. Although the code would have
 access to the private and protected field and method names, it would not
 have access to the private/protected field data and would not be able
 to invoke any private methods. Nevertheless, malicious code
 may use this information to better aim an attack.
 Additionally, it may invoke any public methods and/or access public fields
 in the class.  This could be dangerous if
 the code would normally not be able to invoke those methods and/or
 access the fields  because
 it can&apos;t cast the object to the class/interface with those methods
 and fields.
&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
   &lt;td&gt;queuePrintJob&lt;/td&gt;
   &lt;td&gt;Initiation of a print job request&lt;/td&gt;
   &lt;td&gt;This could print sensitive information to a printer,
 or simply waste paper.&lt;/td&gt;
 &lt;/tr&gt;

 &lt;tr&gt;
   &lt;td&gt;getStackTrace&lt;/td&gt;
   &lt;td&gt;Retrieval of the stack trace information of another thread.&lt;/td&gt;
   &lt;td&gt;This allows retrieval of the stack trace information of
 another thread.  This might allow malicious code to monitor the
 execution of threads and discover vulnerabilities in applications.&lt;/td&gt;
 &lt;/tr&gt;

 &lt;tr&gt;
   &lt;td&gt;setDefaultUncaughtExceptionHandler&lt;/td&gt;
   &lt;td&gt;Setting the default handler to be used when a thread
   terminates abruptly due to an uncaught exception&lt;/td&gt;
   &lt;td&gt;This allows an attacker to register a malicious
   uncaught exception handler that could interfere with termination
   of a thread&lt;/td&gt;
 &lt;/tr&gt;

 &lt;tr&gt;
   &lt;td&gt;preferences&lt;/td&gt;
   &lt;td&gt;Represents the permission required to get access to the
   java.util.prefs.Preferences implementations user or system root
   which in turn allows retrieval or update operations within the
   Preferences persistent backing store.) &lt;/td&gt;
   &lt;td&gt;This permission allows the user to read from or write to the
   preferences backing store if the user running the code has
   sufficient OS privileges to read/write to that backing store.
   The actual backing store may reside within a traditional filesystem
   directory or within a registry depending on the platform OS&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/table&gt;</description>
			<attribute name="@see">
				<description>java.security.BasicPermission</description>
			</attribute>
			<attribute name="@see">
				<description>java.security.Permission</description>
			</attribute>
			<attribute name="@see">
				<description>java.security.Permissions</description>
			</attribute>
			<attribute name="@see">
				<description>java.security.PermissionCollection</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.SecurityManager</description>
			</attribute>
			<attribute name="@author">
				<description>Marianne Mueller</description>
			</attribute>
			<attribute name="@author">
				<description>Roland Schemers</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="7399184964622342223" visibility="private" name="serialVersionUID" constexpr="7399184964622342223L" fulltype="long" type="long" />
		</fields>
		<methods>
			<constructor visibility="public" name="RuntimePermission">
				<comment>
					<description>Creates a new RuntimePermission with the specified name.
 The name is the symbolic name of the RuntimePermission, such as
 &quot;exit&quot;, &quot;setFactory&quot;, etc. An asterisk
 may appear at the end of the name, following a &quot;.&quot;, or by itself, to
 signify a wildcard match.</description>
					<attribute name="@param">
						<description>name the name of the RuntimePermission.</description>
					</attribute>
					<attribute name="@throws">
						<description>NullPointerException if &lt;code&gt;name&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalArgumentException if &lt;code&gt;name&lt;/code&gt; is empty.</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="the name of the RuntimePermission." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="RuntimePermission">
				<comment>
					<description>Creates a new RuntimePermission object with the specified name.
 The name is the symbolic name of the RuntimePermission, and the
 actions String is currently unused and should be null.</description>
					<attribute name="@param">
						<description>name the name of the RuntimePermission.</description>
					</attribute>
					<attribute name="@param">
						<description>actions should be null.</description>
					</attribute>
					<attribute name="@throws">
						<description>NullPointerException if &lt;code&gt;name&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalArgumentException if &lt;code&gt;name&lt;/code&gt; is empty.</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="the name of the RuntimePermission." fulltype="java.lang.String" type="String" />
					<param name="actions" comment="should be null." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass superclass="RuntimeException" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.RuntimeException" fulltype="java.lang.IllegalStateException" type="IllegalStateException">
		<comment>
			<description>Signals that a method has been invoked at an illegal or
 inappropriate time.  In other words, the Java environment or
 Java application is not in an appropriate state for the requested
 operation.</description>
			<attribute name="@author">
				<description>Jonni Kanerva</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.1</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="-1848914673093119416" visibility="package-private" name="serialVersionUID" constexpr="-1848914673093119416L" fulltype="long" type="long" />
		</fields>
		<methods>
			<constructor visibility="public" name="IllegalStateException">
				<comment>
					<description>Constructs an IllegalStateException with no detail message.
 A detail message is a String that describes this particular exception.</description>
				</comment>
			</constructor>
			<constructor visibility="public" name="IllegalStateException">
				<comment>
					<description>Constructs an IllegalStateException with the specified detail
 message.  A detail message is a String that describes this particular
 exception.</description>
					<attribute name="@param">
						<description>s the String that contains a detailed message</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the String that contains a detailed message" fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="IllegalStateException">
				<comment>
					<description>Constructs a new exception with the specified detail message and
 cause.

 &lt;p&gt;Note that the detail message associated with &lt;code&gt;cause&lt;/code&gt; is
 &lt;i&gt;not&lt;/i&gt; automatically incorporated in this exception&apos;s detail
 message.</description>
					<attribute name="@param">
						<description>message the detail message (which is saved for later retrieval
         by the {@link Throwable#getMessage()} method).</description>
					</attribute>
					<attribute name="@param">
						<description>cause the cause (which is saved for later retrieval by the
         {@link Throwable#getCause()} method).  (A &lt;tt&gt;null&lt;/tt&gt; value
         is permitted, and indicates that the cause is nonexistent or
         unknown.)</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="message" comment="the detail message (which is saved for later retrieval
         by the {@link Throwable#getMessage()} method)." fulltype="java.lang.String" type="String" />
					<param name="cause" comment="the cause (which is saved for later retrieval by the
         {@link Throwable#getCause()} method).  (A &lt;tt&gt;null&lt;/tt&gt; value
         is permitted, and indicates that the cause is nonexistent or
         unknown.)" fulltype="java.lang.Throwable" type="Throwable" />
				</params>
			</constructor>
			<constructor visibility="public" name="IllegalStateException">
				<comment>
					<description>Constructs a new exception with the specified cause and a detail
 message of &lt;tt&gt;(cause==null ? null : cause.toString())&lt;/tt&gt; (which
 typically contains the class and detail message of &lt;tt&gt;cause&lt;/tt&gt;).
 This constructor is useful for exceptions that are little more than
 wrappers for other throwables (for example, {@link
 java.security.PrivilegedActionException}).</description>
					<attribute name="@param">
						<description>cause the cause (which is saved for later retrieval by the
         {@link Throwable#getCause()} method).  (A &lt;tt&gt;null&lt;/tt&gt; value is
         permitted, and indicates that the cause is nonexistent or
         unknown.)</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="cause" comment="the cause (which is saved for later retrieval by the
         {@link Throwable#getCause()} method).  (A &lt;tt&gt;null&lt;/tt&gt; value is
         permitted, and indicates that the cause is nonexistent or
         unknown.)" fulltype="java.lang.Throwable" type="Throwable" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass abstract="true" superclass="Object" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.Object" fulltype="java.lang.Number" type="Number">
		<implements>
			<interface fulltype="java.io.Serializable" type="Serializable" />
		</implements>
		<comment>
			<description>The abstract class &lt;code&gt;Number&lt;/code&gt; is the superclass of classes
 &lt;code&gt;BigDecimal&lt;/code&gt;, &lt;code&gt;BigInteger&lt;/code&gt;,
 &lt;code&gt;Byte&lt;/code&gt;, &lt;code&gt;Double&lt;/code&gt;, &lt;code&gt;Float&lt;/code&gt;,
 &lt;code&gt;Integer&lt;/code&gt;, &lt;code&gt;Long&lt;/code&gt;, and &lt;code&gt;Short&lt;/code&gt;.
 &lt;p&gt;
 Subclasses of &lt;code&gt;Number&lt;/code&gt; must provide methods to convert
 the represented numeric value to &lt;code&gt;byte&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;,
 &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;, and
 &lt;code&gt;short&lt;/code&gt;.</description>
			<attribute name="@author">
				<description>Lee Boynton</description>
			</attribute>
			<attribute name="@author">
				<description>Arthur van Hoff</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.Byte</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.Double</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.Float</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.Integer</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.Long</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.Short</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.0</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" const="-8742448824652078965" visibility="private" name="serialVersionUID" constexpr="-8742448824652078965L" fulltype="long" type="long">
				<comment>
					<description>use serialVersionUID from JDK 1.0.2 for interoperability</description>
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="public" name="Number" />
			<method abstract="true" visibility="public" name="intValue" returncomment="the numeric value represented by this object after conversion
          to type &lt;code&gt;int&lt;/code&gt;." fulltype="int" type="int">
				<comment>
					<description>Returns the value of the specified number as an &lt;code&gt;int&lt;/code&gt;.
 This may involve rounding or truncation.</description>
					<attribute name="@return">
						<description>the numeric value represented by this object after conversion
          to type &lt;code&gt;int&lt;/code&gt;.</description>
					</attribute>
				</comment>
			</method>
			<method abstract="true" visibility="public" name="longValue" returncomment="the numeric value represented by this object after conversion
          to type &lt;code&gt;long&lt;/code&gt;." fulltype="long" type="long">
				<comment>
					<description>Returns the value of the specified number as a &lt;code&gt;long&lt;/code&gt;.
 This may involve rounding or truncation.</description>
					<attribute name="@return">
						<description>the numeric value represented by this object after conversion
          to type &lt;code&gt;long&lt;/code&gt;.</description>
					</attribute>
				</comment>
			</method>
			<method abstract="true" visibility="public" name="floatValue" returncomment="the numeric value represented by this object after conversion
          to type &lt;code&gt;float&lt;/code&gt;." fulltype="float" type="float">
				<comment>
					<description>Returns the value of the specified number as a &lt;code&gt;float&lt;/code&gt;.
 This may involve rounding.</description>
					<attribute name="@return">
						<description>the numeric value represented by this object after conversion
          to type &lt;code&gt;float&lt;/code&gt;.</description>
					</attribute>
				</comment>
			</method>
			<method abstract="true" visibility="public" name="doubleValue" returncomment="the numeric value represented by this object after conversion
          to type &lt;code&gt;double&lt;/code&gt;." fulltype="double" type="double">
				<comment>
					<description>Returns the value of the specified number as a &lt;code&gt;double&lt;/code&gt;.
 This may involve rounding.</description>
					<attribute name="@return">
						<description>the numeric value represented by this object after conversion
          to type &lt;code&gt;double&lt;/code&gt;.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="byteValue" returncomment="the numeric value represented by this object after conversion
          to type &lt;code&gt;byte&lt;/code&gt;." fulltype="byte" type="byte">
				<comment>
					<description>Returns the value of the specified number as a &lt;code&gt;byte&lt;/code&gt;.
 This may involve rounding or truncation.</description>
					<attribute name="@return">
						<description>the numeric value represented by this object after conversion
          to type &lt;code&gt;byte&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.1</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="shortValue" returncomment="the numeric value represented by this object after conversion
          to type &lt;code&gt;short&lt;/code&gt;." fulltype="short" type="short">
				<comment>
					<description>Returns the value of the specified number as a &lt;code&gt;short&lt;/code&gt;.
 This may involve rounding or truncation.</description>
					<attribute name="@return">
						<description>the numeric value represented by this object after conversion
          to type &lt;code&gt;short&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.1</description>
					</attribute>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="Error" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.Error" fulltype="java.lang.ThreadDeath" type="ThreadDeath">
		<comment>
			<description>An instance of {@code ThreadDeath} is thrown in the victim thread
 when the (deprecated) {@link Thread#stop()} method is invoked.

 &lt;p&gt;An application should catch instances of this class only if it
 must clean up after being terminated asynchronously.  If
 {@code ThreadDeath} is caught by a method, it is important that it
 be rethrown so that the thread actually dies.

 &lt;p&gt;The {@linkplain ThreadGroup#uncaughtException top-level error
 handler} does not print out a message if {@code ThreadDeath} is
 never caught.

 &lt;p&gt;The class {@code ThreadDeath} is specifically a subclass of
 {@code Error} rather than {@code Exception}, even though it is a
 &quot;normal occurrence&quot;, because many applications catch all
 occurrences of {@code Exception} and then discard the exception.</description>
			<attribute name="@since">
				<description>JDK1.0</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="ThreadDeath" />
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="java.lang" superclassfulltype="java.lang.Object" fulltype="java.lang.Runtime" type="Runtime">
		<comment>
			<description>Every Java application has a single instance of class
 &lt;code&gt;Runtime&lt;/code&gt; that allows the application to interface with
 the environment in which the application is running. The current
 runtime can be obtained from the &lt;code&gt;getRuntime&lt;/code&gt; method.
 &lt;p&gt;
 An application cannot create its own instance of this class.</description>
			<attribute name="@author">
				<description>unascribed</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.Runtime#getRuntime()</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.0</description>
			</attribute>
		</comment>
		<fields>
			<field static="true" visibility="private" name="currentRuntime" fulltype="java.lang.Runtime" type="Runtime" />
		</fields>
		<methods>
			<constructor visibility="private" name="Runtime">
				<comment>
					<description>Don&apos;t let anyone else instantiate this class</description>
				</comment>
			</constructor>
			<method static="true" visibility="public" name="getRuntime" returncomment="the &lt;code&gt;Runtime&lt;/code&gt; object associated with the current
          Java application." fulltype="java.lang.Runtime" type="Runtime">
				<comment>
					<description>Returns the runtime object associated with the current Java application.
 Most of the methods of class &lt;code&gt;Runtime&lt;/code&gt; are instance
 methods and must be invoked with respect to the current runtime object.</description>
					<attribute name="@return">
						<description>the &lt;code&gt;Runtime&lt;/code&gt; object associated with the current
          Java application.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="exit" fulltype="void" type="void">
				<comment>
					<description>Terminates the currently running Java virtual machine by initiating its
 shutdown sequence.  This method never returns normally.  The argument
 serves as a status code; by convention, a nonzero status code indicates
 abnormal termination.

 &lt;p&gt; The virtual machine&apos;s shutdown sequence consists of two phases.  In
 the first phase all registered {@link #addShutdownHook shutdown hooks},
 if any, are started in some unspecified order and allowed to run
 concurrently until they finish.  In the second phase all uninvoked
 finalizers are run if {@link #runFinalizersOnExit finalization-on-exit}
 has been enabled.  Once this is done the virtual machine {@link #halt
 halts}.

 &lt;p&gt; If this method is invoked after the virtual machine has begun its
 shutdown sequence then if shutdown hooks are being run this method will
 block indefinitely.  If shutdown hooks have already been run and on-exit
 finalization has been enabled then this method halts the virtual machine
 with the given status code if the status is nonzero; otherwise, it
 blocks indefinitely.

 &lt;p&gt; The &lt;tt&gt;{@link System#exit(int) System.exit}&lt;/tt&gt; method is the
 conventional and convenient means of invoking this method. &lt;p&gt;</description>
					<attribute name="@param">
						<description>status
         Termination status.  By convention, a nonzero status code
         indicates abnormal termination.</description>
					</attribute>
					<attribute name="@throws">
						<description>SecurityException
         If a security manager is present and its &lt;tt&gt;{@link
         SecurityManager#checkExit checkExit}&lt;/tt&gt; method does not permit
         exiting with the specified status</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.SecurityException</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.SecurityManager#checkExit(int)</description>
					</attribute>
					<attribute name="@see">
						<description>#addShutdownHook</description>
					</attribute>
					<attribute name="@see">
						<description>#removeShutdownHook</description>
					</attribute>
					<attribute name="@see">
						<description>#runFinalizersOnExit</description>
					</attribute>
					<attribute name="@see">
						<description>#halt(int)</description>
					</attribute>
				</comment>
				<params>
					<param name="status" comment="Termination status.  By convention, a nonzero status code
         indicates abnormal termination." fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="addShutdownHook" fulltype="void" type="void">
				<comment>
					<description>Registers a new virtual-machine shutdown hook.

 &lt;p&gt; The Java virtual machine &lt;i&gt;shuts down&lt;/i&gt; in response to two kinds
 of events:

   &lt;ul&gt;

   &lt;p&gt; &lt;li&gt; The program &lt;i&gt;exits&lt;/i&gt; normally, when the last non-daemon
   thread exits or when the &lt;tt&gt;{@link #exit exit}&lt;/tt&gt; (equivalently,
   &lt;tt&gt;{@link System#exit(int) System.exit}&lt;/tt&gt;) method is invoked, or

   &lt;p&gt; &lt;li&gt; The virtual machine is &lt;i&gt;terminated&lt;/i&gt; in response to a
   user interrupt, such as typing &lt;tt&gt;^C&lt;/tt&gt;, or a system-wide event,
   such as user logoff or system shutdown.

   &lt;/ul&gt;

 &lt;p&gt; A &lt;i&gt;shutdown hook&lt;/i&gt; is simply an initialized but unstarted
 thread.  When the virtual machine begins its shutdown sequence it will
 start all registered shutdown hooks in some unspecified order and let
 them run concurrently.  When all the hooks have finished it will then
 run all uninvoked finalizers if finalization-on-exit has been enabled.
 Finally, the virtual machine will halt.  Note that daemon threads will
 continue to run during the shutdown sequence, as will non-daemon threads
 if shutdown was initiated by invoking the &lt;tt&gt;{@link #exit exit}&lt;/tt&gt;
 method.

 &lt;p&gt; Once the shutdown sequence has begun it can be stopped only by
 invoking the &lt;tt&gt;{@link #halt halt}&lt;/tt&gt; method, which forcibly
 terminates the virtual machine.

 &lt;p&gt; Once the shutdown sequence has begun it is impossible to register a
 new shutdown hook or de-register a previously-registered hook.
 Attempting either of these operations will cause an
 &lt;tt&gt;{@link IllegalStateException}&lt;/tt&gt; to be thrown.

 &lt;p&gt; Shutdown hooks run at a delicate time in the life cycle of a virtual
 machine and should therefore be coded defensively.  They should, in
 particular, be written to be thread-safe and to avoid deadlocks insofar
 as possible.  They should also not rely blindly upon services that may
 have registered their own shutdown hooks and therefore may themselves in
 the process of shutting down.  Attempts to use other thread-based
 services such as the AWT event-dispatch thread, for example, may lead to
 deadlocks.

 &lt;p&gt; Shutdown hooks should also finish their work quickly.  When a
 program invokes &lt;tt&gt;{@link #exit exit}&lt;/tt&gt; the expectation is
 that the virtual machine will promptly shut down and exit.  When the
 virtual machine is terminated due to user logoff or system shutdown the
 underlying operating system may only allow a fixed amount of time in
 which to shut down and exit.  It is therefore inadvisable to attempt any
 user interaction or to perform a long-running computation in a shutdown
 hook.

 &lt;p&gt; Uncaught exceptions are handled in shutdown hooks just as in any
 other thread, by invoking the &lt;tt&gt;{@link ThreadGroup#uncaughtException
 uncaughtException}&lt;/tt&gt; method of the thread&apos;s &lt;tt&gt;{@link
 ThreadGroup}&lt;/tt&gt; object.  The default implementation of this method
 prints the exception&apos;s stack trace to &lt;tt&gt;{@link System#err}&lt;/tt&gt; and
 terminates the thread; it does not cause the virtual machine to exit or
 halt.

 &lt;p&gt; In rare circumstances the virtual machine may &lt;i&gt;abort&lt;/i&gt;, that is,
 stop running without shutting down cleanly.  This occurs when the
 virtual machine is terminated externally, for example with the
 &lt;tt&gt;SIGKILL&lt;/tt&gt; signal on Unix or the &lt;tt&gt;TerminateProcess&lt;/tt&gt; call on
 Microsoft Windows.  The virtual machine may also abort if a native
 method goes awry by, for example, corrupting internal data structures or
 attempting to access nonexistent memory.  If the virtual machine aborts
 then no guarantee can be made about whether or not any shutdown hooks
 will be run. &lt;p&gt;</description>
					<attribute name="@param">
						<description>hook
          An initialized but unstarted &lt;tt&gt;{@link Thread}&lt;/tt&gt; object</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalArgumentException
          If the specified hook has already been registered,
          or if it can be determined that the hook is already running or
          has already been run</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalStateException
          If the virtual machine is already in the process
          of shutting down</description>
					</attribute>
					<attribute name="@throws">
						<description>SecurityException
          If a security manager is present and it denies
          &lt;tt&gt;{@link RuntimePermission}(&quot;shutdownHooks&quot;)&lt;/tt&gt;</description>
					</attribute>
					<attribute name="@see">
						<description>#removeShutdownHook</description>
					</attribute>
					<attribute name="@see">
						<description>#halt(int)</description>
					</attribute>
					<attribute name="@see">
						<description>#exit(int)</description>
					</attribute>
					<attribute name="@since">
						<description>1.3</description>
					</attribute>
				</comment>
				<params>
					<param name="hook" comment="An initialized but unstarted &lt;tt&gt;{@link Thread}&lt;/tt&gt; object" fulltype="java.lang.Thread" type="Thread" />
				</params>
			</method>
			<method visibility="public" name="removeShutdownHook" returncomment="&lt;tt&gt;true&lt;/tt&gt; if the specified hook had previously been
 registered and was successfully de-registered, &lt;tt&gt;false&lt;/tt&gt;
 otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>De-registers a previously-registered virtual-machine shutdown hook. &lt;p&gt;</description>
					<attribute name="@param">
						<description>hook the hook to remove</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;tt&gt;true&lt;/tt&gt; if the specified hook had previously been
 registered and was successfully de-registered, &lt;tt&gt;false&lt;/tt&gt;
 otherwise.</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalStateException
          If the virtual machine is already in the process of shutting
          down</description>
					</attribute>
					<attribute name="@throws">
						<description>SecurityException
          If a security manager is present and it denies
          &lt;tt&gt;{@link RuntimePermission}(&quot;shutdownHooks&quot;)&lt;/tt&gt;</description>
					</attribute>
					<attribute name="@see">
						<description>#addShutdownHook</description>
					</attribute>
					<attribute name="@see">
						<description>#exit(int)</description>
					</attribute>
					<attribute name="@since">
						<description>1.3</description>
					</attribute>
				</comment>
				<params>
					<param name="hook" comment="the hook to remove" fulltype="java.lang.Thread" type="Thread" />
				</params>
			</method>
			<method visibility="public" name="halt" fulltype="void" type="void">
				<comment>
					<description>Forcibly terminates the currently running Java virtual machine.  This
 method never returns normally.

 &lt;p&gt; This method should be used with extreme caution.  Unlike the
 &lt;tt&gt;{@link #exit exit}&lt;/tt&gt; method, this method does not cause shutdown
 hooks to be started and does not run uninvoked finalizers if
 finalization-on-exit has been enabled.  If the shutdown sequence has
 already been initiated then this method does not wait for any running
 shutdown hooks or finalizers to finish their work. &lt;p&gt;</description>
					<attribute name="@param">
						<description>status
         Termination status.  By convention, a nonzero status code
         indicates abnormal termination.  If the &lt;tt&gt;{@link Runtime#exit
         exit}&lt;/tt&gt; (equivalently, &lt;tt&gt;{@link System#exit(int)
         System.exit}&lt;/tt&gt;) method has already been invoked then this
         status code will override the status code passed to that method.</description>
					</attribute>
					<attribute name="@throws">
						<description>SecurityException
         If a security manager is present and its &lt;tt&gt;{@link
         SecurityManager#checkExit checkExit}&lt;/tt&gt; method does not permit
         an exit with the specified status</description>
					</attribute>
					<attribute name="@see">
						<description>#exit</description>
					</attribute>
					<attribute name="@see">
						<description>#addShutdownHook</description>
					</attribute>
					<attribute name="@see">
						<description>#removeShutdownHook</description>
					</attribute>
					<attribute name="@since">
						<description>1.3</description>
					</attribute>
				</comment>
				<params>
					<param name="status" comment="Termination status.  By convention, a nonzero status code
         indicates abnormal termination.  If the &lt;tt&gt;{@link Runtime#exit
         exit}&lt;/tt&gt; (equivalently, &lt;tt&gt;{@link System#exit(int)
         System.exit}&lt;/tt&gt;) method has already been invoked then this
         status code will override the status code passed to that method." fulltype="int" type="int" />
				</params>
			</method>
			<method static="true" visibility="public" name="runFinalizersOnExit" fulltype="void" type="void">
				<comment>
					<description>Enable or disable finalization on exit; doing so specifies that the
 finalizers of all objects that have finalizers that have not yet been
 automatically invoked are to be run before the Java runtime exits.
 By default, finalization on exit is disabled.

 &lt;p&gt;If there is a security manager,
 its &lt;code&gt;checkExit&lt;/code&gt; method is first called
 with 0 as its argument to ensure the exit is allowed.
 This could result in a SecurityException.</description>
					<attribute name="@param">
						<description>value true to enable finalization on exit, false to disable</description>
					</attribute>
					<attribute name="@deprecated">
						<description>This method is inherently unsafe.  It may result in
      finalizers being called on live objects while other threads are
      concurrently manipulating those objects, resulting in erratic
      behavior or deadlock.</description>
					</attribute>
					<attribute name="@throws">
						<description>SecurityException
        if a security manager exists and its &lt;code&gt;checkExit&lt;/code&gt;
        method doesn&apos;t allow the exit.</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Runtime#exit(int)</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Runtime#gc()</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.SecurityManager#checkExit(int)</description>
					</attribute>
					<attribute name="@since">
						<description>JDK1.1</description>
					</attribute>
				</comment>
				<params>
					<param name="value" comment="true to enable finalization on exit, false to disable" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="exec" returncomment="A new {@link Process} object for managing the subprocess" fulltype="java.lang.Process" type="Process">
				<comment>
					<description>Executes the specified string command in a separate process.

 &lt;p&gt;This is a convenience method.  An invocation of the form
 &lt;tt&gt;exec(command)&lt;/tt&gt;
 behaves in exactly the same way as the invocation
 &lt;tt&gt;{@link #exec(String, String[], File) exec}(command, null, null)&lt;/tt&gt;.</description>
					<attribute name="@param">
						<description>command   a specified system command.</description>
					</attribute>
					<attribute name="@return">
						<description>A new {@link Process} object for managing the subprocess</description>
					</attribute>
					<attribute name="@throws">
						<description>SecurityException
          If a security manager exists and its
          {@link SecurityManager#checkExec checkExec}
          method doesn&apos;t allow creation of the subprocess</description>
					</attribute>
					<attribute name="@throws">
						<description>IOException
          If an I/O error occurs</description>
					</attribute>
					<attribute name="@throws">
						<description>NullPointerException
          If &lt;code&gt;command&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalArgumentException
          If &lt;code&gt;command&lt;/code&gt; is empty</description>
					</attribute>
					<attribute name="@see">
						<description>#exec(String[], String[], File)</description>
					</attribute>
					<attribute name="@see">
						<description>ProcessBuilder</description>
					</attribute>
				</comment>
				<params>
					<param name="command" comment="a specified system command." fulltype="java.lang.String" type="String" />
				</params>
				<exceptions>
					<exception comment="If an I/O error occurs" fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="public" name="exec" returncomment="A new {@link Process} object for managing the subprocess" fulltype="java.lang.Process" type="Process">
				<comment>
					<description>Executes the specified string command in a separate process with the
 specified environment.

 &lt;p&gt;This is a convenience method.  An invocation of the form
 &lt;tt&gt;exec(command, envp)&lt;/tt&gt;
 behaves in exactly the same way as the invocation
 &lt;tt&gt;{@link #exec(String, String[], File) exec}(command, envp, null)&lt;/tt&gt;.</description>
					<attribute name="@param">
						<description>command   a specified system command.</description>
					</attribute>
					<attribute name="@param">
						<description>envp      array of strings, each element of which
                    has environment variable settings in the format
                    &lt;i&gt;name&lt;/i&gt;=&lt;i&gt;value&lt;/i&gt;, or
                    &lt;tt&gt;null&lt;/tt&gt; if the subprocess should inherit
                    the environment of the current process.</description>
					</attribute>
					<attribute name="@return">
						<description>A new {@link Process} object for managing the subprocess</description>
					</attribute>
					<attribute name="@throws">
						<description>SecurityException
          If a security manager exists and its
          {@link SecurityManager#checkExec checkExec}
          method doesn&apos;t allow creation of the subprocess</description>
					</attribute>
					<attribute name="@throws">
						<description>IOException
          If an I/O error occurs</description>
					</attribute>
					<attribute name="@throws">
						<description>NullPointerException
          If &lt;code&gt;command&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,
          or one of the elements of &lt;code&gt;envp&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalArgumentException
          If &lt;code&gt;command&lt;/code&gt; is empty</description>
					</attribute>
					<attribute name="@see">
						<description>#exec(String[], String[], File)</description>
					</attribute>
					<attribute name="@see">
						<description>ProcessBuilder</description>
					</attribute>
				</comment>
				<params>
					<param name="command" comment="a specified system command." fulltype="java.lang.String" type="String" />
					<param name="envp" comment="array of strings, each element of which
                    has environment variable settings in the format
                    &lt;i&gt;name&lt;/i&gt;=&lt;i&gt;value&lt;/i&gt;, or
                    &lt;tt&gt;null&lt;/tt&gt; if the subprocess should inherit
                    the environment of the current process." fulltype="java.lang.String[]" type="String" />
				</params>
				<exceptions>
					<exception comment="If an I/O error occurs" fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="public" name="exec" returncomment="A new {@link Process} object for managing the subprocess" fulltype="java.lang.Process" type="Process">
				<comment>
					<description>Executes the specified string command in a separate process with the
 specified environment and working directory.

 &lt;p&gt;This is a convenience method.  An invocation of the form
 &lt;tt&gt;exec(command, envp, dir)&lt;/tt&gt;
 behaves in exactly the same way as the invocation
 &lt;tt&gt;{@link #exec(String[], String[], File) exec}(cmdarray, envp, dir)&lt;/tt&gt;,
 where &lt;code&gt;cmdarray&lt;/code&gt; is an array of all the tokens in
 &lt;code&gt;command&lt;/code&gt;.

 &lt;p&gt;More precisely, the &lt;code&gt;command&lt;/code&gt; string is broken
 into tokens using a {@link StringTokenizer} created by the call
 &lt;code&gt;new {@link StringTokenizer}(command)&lt;/code&gt; with no
 further modification of the character categories.  The tokens
 produced by the tokenizer are then placed in the new string
 array &lt;code&gt;cmdarray&lt;/code&gt;, in the same order.</description>
					<attribute name="@param">
						<description>command   a specified system command.</description>
					</attribute>
					<attribute name="@param">
						<description>envp      array of strings, each element of which
                    has environment variable settings in the format
                    &lt;i&gt;name&lt;/i&gt;=&lt;i&gt;value&lt;/i&gt;, or
                    &lt;tt&gt;null&lt;/tt&gt; if the subprocess should inherit
                    the environment of the current process.</description>
					</attribute>
					<attribute name="@param">
						<description>dir       the working directory of the subprocess, or
                    &lt;tt&gt;null&lt;/tt&gt; if the subprocess should inherit
                    the working directory of the current process.</description>
					</attribute>
					<attribute name="@return">
						<description>A new {@link Process} object for managing the subprocess</description>
					</attribute>
					<attribute name="@throws">
						<description>SecurityException
          If a security manager exists and its
          {@link SecurityManager#checkExec checkExec}
          method doesn&apos;t allow creation of the subprocess</description>
					</attribute>
					<attribute name="@throws">
						<description>IOException
          If an I/O error occurs</description>
					</attribute>
					<attribute name="@throws">
						<description>NullPointerException
          If &lt;code&gt;command&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,
          or one of the elements of &lt;code&gt;envp&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;</description>
					</attribute>
					<attribute name="@throws">
						<description>IllegalArgumentException
          If &lt;code&gt;command&lt;/code&gt; is empty</description>
					</attribute>
					<attribute name="@see">
						<description>ProcessBuilder</description>
					</attribute>
					<attribute name="@since">
						<description>1.3</description>
					</attribute>
				</comment>
				<params>
					<param name="command" comment="a specified system command." fulltype="java.lang.String" type="String" />
					<param name="envp" comment="array of strings, each element of which
                    has environment variable settings in the format
                    &lt;i&gt;name&lt;/i&gt;=&lt;i&gt;value&lt;/i&gt;, or
                    &lt;tt&gt;null&lt;/tt&gt; if the subprocess should inherit
                    the environment of the current process." fulltype="java.lang.String[]" type="String" />
					<param name="dir" comment="the working directory of the subprocess, or
                    &lt;tt&gt;null&lt;/tt&gt; if the subprocess should inherit
                    the working directory of the current process." fulltype="java.io.File" type="File" />
				</params>
				<exceptions>
					<exception comment="If an I/O error occurs" fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="public" name="exec" returncomment="A new {@link Process} object for managing the subprocess" fulltype="java.lang.Process" type="Process">
				<comment>
					<description>Executes the specified command and arguments in a separate process.

 &lt;p&gt;This is a convenience method.  An invocation of the form
 &lt;tt&gt;exec(cmdarray)&lt;/tt&gt;
 behaves in exactly the same way as the invocation
 &lt;tt&gt;{@link #exec(String[], String[], File) exec}(cmdarray, null, null)&lt;/tt&gt;.</description>
					<attribute name="@param">
						<description>cmdarray  array containing the command to call and
                    its arguments.</description>
					</attribute>
					<attribute name="@return">
						<description>A new {@link Process} object for managing the subprocess</description>
					</attribute>
					<attribute name="@throws">
						<description>SecurityException
          If a security manager exists and its
          {@link SecurityManager#checkExec checkExec}
          method doesn&apos;t allow creation of the subprocess</description>
					</attribute>
					<attribute name="@throws">
						<description>IOException
          If an I/O error occurs</description>
					</attribute>
					<attribute name="@throws">
						<description>NullPointerException
          If &lt;code&gt;cmdarray&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,
          or one of the elements of &lt;code&gt;cmdarray&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;</description>
					</attribute>
					<attribute name="@throws">
						<description>IndexOutOfBoundsException
          If &lt;code&gt;cmdarray&lt;/code&gt; is an empty array
          (has length &lt;code&gt;0&lt;/code&gt;)</description>
					</attribute>
					<attribute name="@see">
						<description>ProcessBuilder</description>
					</attribute>
				</comment>
				<params>
					<param name="cmdarray" comment="array containing the command to call and
                    its arguments." fulltype="java.lang.String[]" type="String" />
				</params>
				<exceptions>
					<exception comment="If an I/O error occurs" fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="public" name="exec" returncomment="A new {@link Process} object for managing the subprocess" fulltype="java.lang.Process" type="Process">
				<comment>
					<description>Executes the specified command and arguments in a separate process
 with the specified environment.

 &lt;p&gt;This is a convenience method.  An invocation of the form
 &lt;tt&gt;exec(cmdarray, envp)&lt;/tt&gt;
 behaves in exactly the same way as the invocation
 &lt;tt&gt;{@link #exec(String[], String[], File) exec}(cmdarray, envp, null)&lt;/tt&gt;.</description>
					<attribute name="@param">
						<description>cmdarray  array containing the command to call and
                    its arguments.</description>
					</attribute>
					<attribute name="@param">
						<description>envp      array of strings, each element of which
                    has environment variable settings in the format
                    &lt;i&gt;name&lt;/i&gt;=&lt;i&gt;value&lt;/i&gt;, or
                    &lt;tt&gt;null&lt;/tt&gt; if the subprocess should inherit
                    the environment of the current process.</description>
					</attribute>
					<attribute name="@return">
						<description>A new {@link Process} object for managing the subprocess</description>
					</attribute>
					<attribute name="@throws">
						<description>SecurityException
          If a security manager exists and its
          {@link SecurityManager#checkExec checkExec}
          method doesn&apos;t allow creation of the subprocess</description>
					</attribute>
					<attribute name="@throws">
						<description>IOException
          If an I/O error occurs</description>
					</attribute>
					<attribute name="@throws">
						<description>NullPointerException
          If &lt;code&gt;cmdarray&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,
          or one of the elements of &lt;code&gt;cmdarray&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,
          or one of the elements of &lt;code&gt;envp&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;</description>
					</attribute>
					<attribute name="@throws">
						<description>IndexOutOfBoundsException
          If &lt;code&gt;cmdarray&lt;/code&gt; is an empty array
          (has length &lt;code&gt;0&lt;/code&gt;)</description>
					</attribute>
					<attribute name="@see">
						<description>ProcessBuilder</description>
					</attribute>
				</comment>
				<params>
					<param name="cmdarray" comment="array containing the command to call and
                    its arguments." fulltype="java.lang.String[]" type="String" />
					<param name="envp" comment="array of strings, each element of which
                    has environment variable settings in the format
                    &lt;i&gt;name&lt;/i&gt;=&lt;i&gt;value&lt;/i&gt;, or
                    &lt;tt&gt;null&lt;/tt&gt; if the subprocess should inherit
                    the environment of the current process." fulltype="java.lang.String[]" type="String" />
				</params>
				<exceptions>
					<exception comment="If an I/O error occurs" fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="public" name="exec" returncomment="A new {@link Process} object for managing the subprocess" fulltype="java.lang.Process" type="Process">
				<comment>
					<description>Executes the specified command and arguments in a separate process with
 the specified environment and working directory.

 &lt;p&gt;Given an array of strings &lt;code&gt;cmdarray&lt;/code&gt;, representing the
 tokens of a command line, and an array of strings &lt;code&gt;envp&lt;/code&gt;,
 representing &quot;environment&quot; variable settings, this method creates
 a new process in which to execute the specified command.

 &lt;p&gt;This method checks that &lt;code&gt;cmdarray&lt;/code&gt; is a valid operating
 system command.  Which commands are valid is system-dependent,
 but at the very least the command must be a non-empty list of
 non-null strings.

 &lt;p&gt;If &lt;tt&gt;envp&lt;/tt&gt; is &lt;tt&gt;null&lt;/tt&gt;, the subprocess inherits the
 environment settings of the current process.

 &lt;p&gt;{@link ProcessBuilder#start()} is now the preferred way to
 start a process with a modified environment.

 &lt;p&gt;The working directory of the new subprocess is specified by &lt;tt&gt;dir&lt;/tt&gt;.
 If &lt;tt&gt;dir&lt;/tt&gt; is &lt;tt&gt;null&lt;/tt&gt;, the subprocess inherits the
 current working directory of the current process.

 &lt;p&gt;If a security manager exists, its
 {@link SecurityManager#checkExec checkExec}
 method is invoked with the first component of the array
 &lt;code&gt;cmdarray&lt;/code&gt; as its argument. This may result in a
 {@link SecurityException} being thrown.

 &lt;p&gt;Starting an operating system process is highly system-dependent.
 Among the many things that can go wrong are:
 &lt;ul&gt;
 &lt;li&gt;The operating system program file was not found.
 &lt;li&gt;Access to the program file was denied.
 &lt;li&gt;The working directory does not exist.
 &lt;/ul&gt;

 &lt;p&gt;In such cases an exception will be thrown.  The exact nature
 of the exception is system-dependent, but it will always be a
 subclass of {@link IOException}.</description>
					<attribute name="@param">
						<description>cmdarray  array containing the command to call and
                    its arguments.</description>
					</attribute>
					<attribute name="@param">
						<description>envp      array of strings, each element of which
                    has environment variable settings in the format
                    &lt;i&gt;name&lt;/i&gt;=&lt;i&gt;value&lt;/i&gt;, or
                    &lt;tt&gt;null&lt;/tt&gt; if the subprocess should inherit
                    the environment of the current process.</description>
					</attribute>
					<attribute name="@param">
						<description>dir       the working directory of the subprocess, or
                    &lt;tt&gt;null&lt;/tt&gt; if the subprocess should inherit
                    the working directory of the current process.</description>
					</attribute>
					<attribute name="@return">
						<description>A new {@link Process} object for managing the subprocess</description>
					</attribute>
					<attribute name="@throws">
						<description>SecurityException
          If a security manager exists and its
          {@link SecurityManager#checkExec checkExec}
          method doesn&apos;t allow creation of the subprocess</description>
					</attribute>
					<attribute name="@throws">
						<description>IOException
          If an I/O error occurs</description>
					</attribute>
					<attribute name="@throws">
						<description>NullPointerException
          If &lt;code&gt;cmdarray&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,
          or one of the elements of &lt;code&gt;cmdarray&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;,
          or one of the elements of &lt;code&gt;envp&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;</description>
					</attribute>
					<attribute name="@throws">
						<description>IndexOutOfBoundsException
          If &lt;code&gt;cmdarray&lt;/code&gt; is an empty array
          (has length &lt;code&gt;0&lt;/code&gt;)</description>
					</attribute>
					<attribute name="@see">
						<description>ProcessBuilder</description>
					</attribute>
					<attribute name="@since">
						<description>1.3</description>
					</attribute>
				</comment>
				<params>
					<param name="cmdarray" comment="array containing the command to call and
                    its arguments." fulltype="java.lang.String[]" type="String" />
					<param name="envp" comment="array of strings, each element of which
                    has environment variable settings in the format
                    &lt;i&gt;name&lt;/i&gt;=&lt;i&gt;value&lt;/i&gt;, or
                    &lt;tt&gt;null&lt;/tt&gt; if the subprocess should inherit
                    the environment of the current process." fulltype="java.lang.String[]" type="String" />
					<param name="dir" comment="the working directory of the subprocess, or
                    &lt;tt&gt;null&lt;/tt&gt; if the subprocess should inherit
                    the working directory of the current process." fulltype="java.io.File" type="File" />
				</params>
				<exceptions>
					<exception comment="If an I/O error occurs" fulltype="java.io.IOException" type="IOException" />
				</exceptions>
			</method>
			<method visibility="public" name="availableProcessors" returncomment="the maximum number of processors available to the virtual
          machine; never smaller than one" fulltype="int" type="int">
				<comment>
					<description>Returns the number of processors available to the Java virtual machine.

 &lt;p&gt; This value may change during a particular invocation of the virtual
 machine.  Applications that are sensitive to the number of available
 processors should therefore occasionally poll this property and adjust
 their resource usage appropriately. &lt;/p&gt;</description>
					<attribute name="@return">
						<description>the maximum number of processors available to the virtual
          machine; never smaller than one</description>
					</attribute>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="freeMemory" returncomment="an approximation to the total amount of memory currently
          available for future allocated objects, measured in bytes." fulltype="long" type="long">
				<comment>
					<description>Returns the amount of free memory in the Java Virtual Machine.
 Calling the
 &lt;code&gt;gc&lt;/code&gt; method may result in increasing the value returned
 by &lt;code&gt;freeMemory.&lt;/code&gt;</description>
					<attribute name="@return">
						<description>an approximation to the total amount of memory currently
          available for future allocated objects, measured in bytes.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="totalMemory" returncomment="the total amount of memory currently available for current
          and future objects, measured in bytes." fulltype="long" type="long">
				<comment>
					<description>Returns the total amount of memory in the Java virtual machine.
 The value returned by this method may vary over time, depending on
 the host environment.
 &lt;p&gt;
 Note that the amount of memory required to hold an object of any
 given type may be implementation-dependent.</description>
					<attribute name="@return">
						<description>the total amount of memory currently available for current
          and future objects, measured in bytes.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="maxMemory" returncomment="the maximum amount of memory that the virtual machine will
          attempt to use, measured in bytes" fulltype="long" type="long">
				<comment>
					<description>Returns the maximum amount of memory that the Java virtual machine will
 attempt to use.  If there is no inherent limit then the value {@link
 java.lang.Long#MAX_VALUE} will be returned. &lt;/p&gt;</description>
					<attribute name="@return">
						<description>the maximum amount of memory that the virtual machine will
          attempt to use, measured in bytes</description>
					</attribute>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="gc" fulltype="void" type="void">
				<comment>
					<description>Runs the garbage collector.
 Calling this method suggests that the Java virtual machine expend
 effort toward recycling unused objects in order to make the memory
 they currently occupy available for quick reuse. When control
 returns from the method call, the virtual machine has made
 its best effort to recycle all discarded objects.
 &lt;p&gt;
 The name &lt;code&gt;gc&lt;/code&gt; stands for &quot;garbage
 collector&quot;. The virtual machine performs this recycling
 process automatically as needed, in a separate thread, even if the
 &lt;code&gt;gc&lt;/code&gt; method is not invoked explicitly.
 &lt;p&gt;
 The method {@link System#gc()} is the conventional and convenient
 means of invoking this method.</description>
				</comment>
			</method>
			<method static="true" visibility="private" name="runFinalization0" fulltype="void" type="void" />
			<method visibility="public" name="runFinalization" fulltype="void" type="void">
				<comment>
					<description>Runs the finalization methods of any objects pending finalization.
 Calling this method suggests that the Java virtual machine expend
 effort toward running the &lt;code&gt;finalize&lt;/code&gt; methods of objects
 that have been found to be discarded but whose &lt;code&gt;finalize&lt;/code&gt;
 methods have not yet been run. When control returns from the
 method call, the virtual machine has made a best effort to
 complete all outstanding finalizations.
 &lt;p&gt;
 The virtual machine performs the finalization process
 automatically as needed, in a separate thread, if the
 &lt;code&gt;runFinalization&lt;/code&gt; method is not invoked explicitly.
 &lt;p&gt;
 The method {@link System#runFinalization()} is the conventional
 and convenient means of invoking this method.</description>
					<attribute name="@see">
						<description>java.lang.Object#finalize()</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="traceInstructions" fulltype="void" type="void">
				<comment>
					<description>Enables/Disables tracing of instructions.
 If the &lt;code&gt;boolean&lt;/code&gt; argument is &lt;code&gt;true&lt;/code&gt;, this
 method suggests that the Java virtual machine emit debugging
 information for each instruction in the virtual machine as it
 is executed. The format of this information, and the file or other
 output stream to which it is emitted, depends on the host environment.
 The virtual machine may ignore this request if it does not support
 this feature. The destination of the trace output is system
 dependent.
 &lt;p&gt;
 If the &lt;code&gt;boolean&lt;/code&gt; argument is &lt;code&gt;false&lt;/code&gt;, this
 method causes the virtual machine to stop performing the
 detailed instruction trace it is performing.</description>
					<attribute name="@param">
						<description>on   &lt;code&gt;true&lt;/code&gt; to enable instruction tracing;
               &lt;code&gt;false&lt;/code&gt; to disable this feature.</description>
					</attribute>
				</comment>
				<params>
					<param name="on" comment="&lt;code&gt;true&lt;/code&gt; to enable instruction tracing;
               &lt;code&gt;false&lt;/code&gt; to disable this feature." fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="traceMethodCalls" fulltype="void" type="void">
				<comment>
					<description>Enables/Disables tracing of method calls.
 If the &lt;code&gt;boolean&lt;/code&gt; argument is &lt;code&gt;true&lt;/code&gt;, this
 method suggests that the Java virtual machine emit debugging
 information for each method in the virtual machine as it is
 called. The format of this information, and the file or other output
 stream to which it is emitted, depends on the host environment. The
 virtual machine may ignore this request if it does not support
 this feature.
 &lt;p&gt;
 Calling this method with argument false suggests that the
 virtual machine cease emitting per-call debugging information.</description>
					<attribute name="@param">
						<description>on   &lt;code&gt;true&lt;/code&gt; to enable instruction tracing;
               &lt;code&gt;false&lt;/code&gt; to disable this feature.</description>
					</attribute>
				</comment>
				<params>
					<param name="on" comment="&lt;code&gt;true&lt;/code&gt; to enable instruction tracing;
               &lt;code&gt;false&lt;/code&gt; to disable this feature." fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="load" fulltype="void" type="void">
				<comment>
					<description>Loads the specified filename as a dynamic library. The filename
 argument must be a complete path name,
 (for example
 &lt;code&gt;Runtime.getRuntime().load(&quot;/home/avh/lib/libX11.so&quot;);&lt;/code&gt;).
 &lt;p&gt;
 First, if there is a security manager, its &lt;code&gt;checkLink&lt;/code&gt;
 method is called with the &lt;code&gt;filename&lt;/code&gt; as its argument.
 This may result in a security exception.
 &lt;p&gt;
 This is similar to the method {@link #loadLibrary(String)}, but it
 accepts a general file name as an argument rather than just a library
 name, allowing any file of native code to be loaded.
 &lt;p&gt;
 The method {@link System#load(String)} is the conventional and
 convenient means of invoking this method.</description>
					<attribute name="@param">
						<description>filename   the file to load.</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException  if a security manager exists and its
             &lt;code&gt;checkLink&lt;/code&gt; method doesn&apos;t allow
             loading of the specified dynamic library</description>
					</attribute>
					<attribute name="@exception">
						<description>UnsatisfiedLinkError  if the file does not exist.</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException if &lt;code&gt;filename&lt;/code&gt; is
             &lt;code&gt;null&lt;/code&gt;</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.Runtime#getRuntime()</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.SecurityException</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.SecurityManager#checkLink(java.lang.String)</description>
					</attribute>
				</comment>
				<params>
					<param name="filename" comment="the file to load." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method synchronized="true" visibility="package-private" name="load0" fulltype="void" type="void">
				<params>
					<param name="fromClass" fulltype="java.lang.Class" type="Class" />
					<param name="filename" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="loadLibrary" fulltype="void" type="void">
				<comment>
					<description>Loads the dynamic library with the specified library name.
 A file containing native code is loaded from the local file system
 from a place where library files are conventionally obtained. The
 details of this process are implementation-dependent. The
 mapping from a library name to a specific filename is done in a
 system-specific manner.
 &lt;p&gt;
 First, if there is a security manager, its &lt;code&gt;checkLink&lt;/code&gt;
 method is called with the &lt;code&gt;libname&lt;/code&gt; as its argument.
 This may result in a security exception.
 &lt;p&gt;
 The method {@link System#loadLibrary(String)} is the conventional
 and convenient means of invoking this method. If native
 methods are to be used in the implementation of a class, a standard
 strategy is to put the native code in a library file (call it
 &lt;code&gt;LibFile&lt;/code&gt;) and then to put a static initializer:
 &lt;blockquote&gt;&lt;pre&gt;
 static { System.loadLibrary(&quot;LibFile&quot;); }
 &lt;/pre&gt;&lt;/blockquote&gt;
 within the class declaration. When the class is loaded and
 initialized, the necessary native code implementation for the native
 methods will then be loaded as well.
 &lt;p&gt;
 If this method is called more than once with the same library
 name, the second and subsequent calls are ignored.</description>
					<attribute name="@param">
						<description>libname   the name of the library.</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException  if a security manager exists and its
             &lt;code&gt;checkLink&lt;/code&gt; method doesn&apos;t allow
             loading of the specified dynamic library</description>
					</attribute>
					<attribute name="@exception">
						<description>UnsatisfiedLinkError  if the library does not exist.</description>
					</attribute>
					<attribute name="@exception">
						<description>NullPointerException if &lt;code&gt;libname&lt;/code&gt; is
             &lt;code&gt;null&lt;/code&gt;</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.SecurityException</description>
					</attribute>
					<attribute name="@see">
						<description>java.lang.SecurityManager#checkLink(java.lang.String)</description>
					</attribute>
				</comment>
				<params>
					<param name="libname" comment="the name of the library." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method synchronized="true" visibility="package-private" name="loadLibrary0" fulltype="void" type="void">
				<params>
					<param name="fromClass" fulltype="java.lang.Class" type="Class" />
					<param name="libname" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method visibility="public" name="getLocalizedInputStream" returncomment="a localized input stream" fulltype="java.io.InputStream" type="InputStream">
				<comment>
					<description>Creates a localized version of an input stream. This method takes
 an &lt;code&gt;InputStream&lt;/code&gt; and returns an &lt;code&gt;InputStream&lt;/code&gt;
 equivalent to the argument in all respects except that it is
 localized: as characters in the local character set are read from
 the stream, they are automatically converted from the local
 character set to Unicode.
 &lt;p&gt;
 If the argument is already a localized stream, it may be returned
 as the result.</description>
					<attribute name="@param">
						<description>in InputStream to localize</description>
					</attribute>
					<attribute name="@return">
						<description>a localized input stream</description>
					</attribute>
					<attribute name="@see">
						<description>java.io.InputStream</description>
					</attribute>
					<attribute name="@see">
						<description>java.io.BufferedReader#BufferedReader(java.io.Reader)</description>
					</attribute>
					<attribute name="@see">
						<description>java.io.InputStreamReader#InputStreamReader(java.io.InputStream)</description>
					</attribute>
					<attribute name="@deprecated">
						<description>As of JDK&amp;nbsp;1.1, the preferred way to translate a byte
 stream in the local encoding into a character stream in Unicode is via
 the &lt;code&gt;InputStreamReader&lt;/code&gt; and &lt;code&gt;BufferedReader&lt;/code&gt;
 classes.</description>
					</attribute>
				</comment>
				<params>
					<param name="in" comment="InputStream to localize" fulltype="java.io.InputStream" type="InputStream" />
				</params>
			</method>
			<method visibility="public" name="getLocalizedOutputStream" returncomment="a localized output stream" fulltype="java.io.OutputStream" type="OutputStream">
				<comment>
					<description>Creates a localized version of an output stream. This method
 takes an &lt;code&gt;OutputStream&lt;/code&gt; and returns an
 &lt;code&gt;OutputStream&lt;/code&gt; equivalent to the argument in all respects
 except that it is localized: as Unicode characters are written to
 the stream, they are automatically converted to the local
 character set.
 &lt;p&gt;
 If the argument is already a localized stream, it may be returned
 as the result.</description>
					<attribute name="@deprecated">
						<description>As of JDK&amp;nbsp;1.1, the preferred way to translate a
 Unicode character stream into a byte stream in the local encoding is via
 the &lt;code&gt;OutputStreamWriter&lt;/code&gt;, &lt;code&gt;BufferedWriter&lt;/code&gt;, and
 &lt;code&gt;PrintWriter&lt;/code&gt; classes.</description>
					</attribute>
					<attribute name="@param">
						<description>out OutputStream to localize</description>
					</attribute>
					<attribute name="@return">
						<description>a localized output stream</description>
					</attribute>
					<attribute name="@see">
						<description>java.io.OutputStream</description>
					</attribute>
					<attribute name="@see">
						<description>java.io.BufferedWriter#BufferedWriter(java.io.Writer)</description>
					</attribute>
					<attribute name="@see">
						<description>java.io.OutputStreamWriter#OutputStreamWriter(java.io.OutputStream)</description>
					</attribute>
					<attribute name="@see">
						<description>java.io.PrintWriter#PrintWriter(java.io.OutputStream)</description>
					</attribute>
				</comment>
				<params>
					<param name="out" comment="OutputStream to localize" fulltype="java.io.OutputStream" type="OutputStream" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="IncompatibleClassChangeError" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.IncompatibleClassChangeError" fulltype="java.lang.AbstractMethodError" type="AbstractMethodError">
		<comment>
			<description>Thrown when an application tries to call an abstract method.
 Normally, this error is caught by the compiler; this error can
 only occur at run time if the definition of some class has
 incompatibly changed since the currently executing method was last
 compiled.</description>
			<attribute name="@author">
				<description>unascribed</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.0</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="AbstractMethodError">
				<comment>
					<description>Constructs an &lt;code&gt;AbstractMethodError&lt;/code&gt; with no detail  message.</description>
				</comment>
			</constructor>
			<constructor visibility="public" name="AbstractMethodError">
				<comment>
					<description>Constructs an &lt;code&gt;AbstractMethodError&lt;/code&gt; with the specified
 detail message.</description>
					<attribute name="@param">
						<description>s   the detail message.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the detail message." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass superclass="LinkageError" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.LinkageError" fulltype="java.lang.UnsatisfiedLinkError" type="UnsatisfiedLinkError">
		<comment>
			<description>Thrown if the Java Virtual Machine cannot find an appropriate
 native-language definition of a method declared &lt;code&gt;native&lt;/code&gt;.</description>
			<attribute name="@author">
				<description>unascribed</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.Runtime</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.0</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="UnsatisfiedLinkError">
				<comment>
					<description>Constructs an &lt;code&gt;UnsatisfiedLinkError&lt;/code&gt; with no detail message.</description>
				</comment>
			</constructor>
			<constructor visibility="public" name="UnsatisfiedLinkError">
				<comment>
					<description>Constructs an &lt;code&gt;UnsatisfiedLinkError&lt;/code&gt; with the
 specified detail message.</description>
					<attribute name="@param">
						<description>s   the detail message.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the detail message." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass superclass="Exception" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.Exception" fulltype="java.lang.CloneNotSupportedException" type="CloneNotSupportedException">
		<comment>
			<description>Thrown to indicate that the &lt;code&gt;clone&lt;/code&gt; method in class
 &lt;code&gt;Object&lt;/code&gt; has been called to clone an object, but that
 the object&apos;s class does not implement the &lt;code&gt;Cloneable&lt;/code&gt;
 interface.
 &lt;p&gt;
 Applications that override the &lt;code&gt;clone&lt;/code&gt; method can also
 throw this exception to indicate that an object could not or
 should not be cloned.</description>
			<attribute name="@author">
				<description>unascribed</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.Cloneable</description>
			</attribute>
			<attribute name="@see">
				<description>java.lang.Object#clone()</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.0</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="CloneNotSupportedException">
				<comment>
					<description>Constructs a &lt;code&gt;CloneNotSupportedException&lt;/code&gt; with no
 detail message.</description>
				</comment>
			</constructor>
			<constructor visibility="public" name="CloneNotSupportedException">
				<comment>
					<description>Constructs a &lt;code&gt;CloneNotSupportedException&lt;/code&gt; with the
 specified detail message.</description>
					<attribute name="@param">
						<description>s   the detail message.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the detail message." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass superclass="Object" visibility="public" package="java.lang" superclassfulltype="java.lang.Object" fulltype="java.lang.Thread" type="Thread">
		<implements>
			<interface fulltype="java.lang.Runnable" type="Runnable" />
		</implements>
		<comment>
			<description>A &lt;i&gt;thread&lt;/i&gt; is a thread of execution in a program. The Java
 Virtual Machine allows an application to have multiple threads of
 execution running concurrently.
 &lt;p&gt;
 Every thread has a priority. Threads with higher priority are
 executed in preference to threads with lower priority. Each thread
 may or may not also be marked as a daemon. When code running in
 some thread creates a new &lt;code&gt;Thread&lt;/code&gt; object, the new
 thread has its priority initially set equal to the priority of the
 creating thread, and is a daemon thread if and only if the
 creating thread is a daemon.
 &lt;p&gt;
 When a Java Virtual Machine starts up, there is usually a single
 non-daemon thread (which typically calls the method named
 &lt;code&gt;main&lt;/code&gt; of some designated class). The Java Virtual
 Machine continues to execute threads until either of the following
 occurs:
 &lt;ul&gt;
 &lt;li&gt;The &lt;code&gt;exit&lt;/code&gt; method of class &lt;code&gt;Runtime&lt;/code&gt; has been
     called and the security manager has permitted the exit operation
     to take place.
 &lt;li&gt;All threads that are not daemon threads have died, either by
     returning from the call to the &lt;code&gt;run&lt;/code&gt; method or by
     throwing an exception that propagates beyond the &lt;code&gt;run&lt;/code&gt;
     method.
 &lt;/ul&gt;
 &lt;p&gt;
 There are two ways to create a new thread of execution. One is to
 declare a class to be a subclass of &lt;code&gt;Thread&lt;/code&gt;. This
 subclass should override the &lt;code&gt;run&lt;/code&gt; method of class
 &lt;code&gt;Thread&lt;/code&gt;. An instance of the subclass can then be
 allocated and started. For example, a thread that computes primes
 larger than a stated value could be written as follows:
 &lt;p&gt;&lt;hr&gt;&lt;blockquote&gt;&lt;pre&gt;
     class PrimeThread extends Thread {
         long minPrime;
         PrimeThread(long minPrime) {
             this.minPrime = minPrime;
         }

         public void run() {
             // compute primes larger than minPrime
             &amp;nbsp;.&amp;nbsp;.&amp;nbsp;.
         }
     }
 &lt;/pre&gt;&lt;/blockquote&gt;&lt;hr&gt;
 &lt;p&gt;
 The following code would then create a thread and start it running:
 &lt;p&gt;&lt;blockquote&gt;&lt;pre&gt;
     PrimeThread p = new PrimeThread(143);
     p.start();
 &lt;/pre&gt;&lt;/blockquote&gt;
 &lt;p&gt;
 The other way to create a thread is to declare a class that
 implements the &lt;code&gt;Runnable&lt;/code&gt; interface. That class then
 implements the &lt;code&gt;run&lt;/code&gt; method. An instance of the class can
 then be allocated, passed as an argument when creating
 &lt;code&gt;Thread&lt;/code&gt;, and started. The same example in this other
 style looks like the following:
 &lt;p&gt;&lt;hr&gt;&lt;blockquote&gt;&lt;pre&gt;
     class PrimeRun implements Runnable {
         long minPrime;
         PrimeRun(long minPrime) {
             this.minPrime = minPrime;
         }

         public void run() {
             // compute primes larger than minPrime
             &amp;nbsp;.&amp;nbsp;.&amp;nbsp;.
         }
     }
 &lt;/pre&gt;&lt;/blockquote&gt;&lt;hr&gt;
 &lt;p&gt;
 The following code would then create a thread and start it running:
 &lt;p&gt;&lt;blockquote&gt;&lt;pre&gt;
     PrimeRun p = new PrimeRun(143);
     new Thread(p).start();
 &lt;/pre&gt;&lt;/blockquote&gt;
 &lt;p&gt;
 Every thread has a name for identification purposes. More than
 one thread may have the same name. If a name is not specified when
 a thread is created, a new name is generated for it.</description>
			<attribute name="@author">
				<description>unascribed</description>
			</attribute>
			<attribute name="@see">
				<description>Runnable</description>
			</attribute>
			<attribute name="@see">
				<description>Runtime#exit(int)</description>
			</attribute>
			<attribute name="@see">
				<description>#run()</description>
			</attribute>
			<attribute name="@see">
				<description>#stop()</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.0</description>
			</attribute>
		</comment>
		<fields>
			<field visibility="private" name="name" fulltype="char[]" type="char" />
			<field visibility="private" name="priority" fulltype="int" type="int" />
			<field visibility="private" name="threadQ" fulltype="java.lang.Thread" type="Thread" />
			<field visibility="private" name="eetop" fulltype="long" type="long" />
			<field visibility="private" name="single_step" fulltype="boolean" type="boolean" />
			<field visibility="private" name="daemon" fulltype="boolean" type="boolean" />
			<field visibility="private" name="stillborn" fulltype="boolean" type="boolean" />
			<field visibility="private" name="target" fulltype="java.lang.Runnable" type="Runnable" />
			<field visibility="private" name="group" fulltype="java.lang.ThreadGroup" type="ThreadGroup" />
			<field visibility="private" name="contextClassLoader" fulltype="java.lang.ClassLoader" type="ClassLoader" />
			<field visibility="private" name="inheritedAccessControlContext" fulltype="java.security.AccessControlContext" type="AccessControlContext" />
			<field static="true" visibility="private" name="threadInitNumber" fulltype="int" type="int" />
			<field visibility="package-private" name="threadLocals" fulltype="java.lang.ThreadLocal.ThreadLocalMap" type="ThreadLocal.ThreadLocalMap" />
			<field visibility="package-private" name="inheritableThreadLocals" fulltype="java.lang.ThreadLocal.ThreadLocalMap" type="ThreadLocal.ThreadLocalMap" />
			<field visibility="private" name="stackSize" fulltype="long" type="long" />
			<field visibility="private" name="nativeParkEventPointer" fulltype="long" type="long" />
			<field visibility="private" name="tid" fulltype="long" type="long" />
			<field static="true" visibility="private" name="threadSeqNumber" fulltype="long" type="long" />
			<field visibility="private" name="threadStatus" fulltype="int" type="int" />
			<field volatile="true" visibility="package-private" name="parkBlocker" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>The argument supplied to the current call to
 java.util.concurrent.locks.LockSupport.park.
 Set by (private) java.util.concurrent.locks.LockSupport.setBlocker
 Accessed using java.util.concurrent.locks.LockSupport.getBlocker</description>
				</comment>
			</field>
			<field volatile="true" visibility="private" name="blocker" fulltype="sun.nio.ch.Interruptible" type="Interruptible" />
			<field visibility="private" name="blockerLock" fulltype="java.lang.Object" type="Object" />
			<field final="true" static="true" const="1" visibility="public" name="MIN_PRIORITY" constexpr="1" fulltype="int" type="int">
				<comment>
					<description>The minimum priority that a thread can have.</description>
				</comment>
			</field>
			<field final="true" static="true" const="5" visibility="public" name="NORM_PRIORITY" constexpr="5" fulltype="int" type="int">
				<comment>
					<description>The default priority that is assigned to a thread.</description>
				</comment>
			</field>
			<field final="true" static="true" const="10" visibility="public" name="MAX_PRIORITY" constexpr="10" fulltype="int" type="int">
				<comment>
					<description>The maximum priority that a thread can have.</description>
				</comment>
			</field>
			<field visibility="private" name="stopBeforeStart" fulltype="boolean" type="boolean" />
			<field visibility="private" name="throwableFromStop" fulltype="java.lang.Throwable" type="Throwable" />
			<field volatile="true" visibility="private" name="me" fulltype="java.lang.Thread" type="Thread" />
			<field final="true" static="true" visibility="private" name="EMPTY_STACK_TRACE" fulltype="java.lang.StackTraceElement[]" type="StackTraceElement" />
			<field final="true" static="true" visibility="private" name="SUBCLASS_IMPLEMENTATION_PERMISSION" fulltype="java.lang.RuntimePermission" type="RuntimePermission" />
			<field final="true" static="true" visibility="private" name="subclassAudits" fulltype="sun.misc.SoftCache" type="SoftCache">
				<comment>
					<description>cache of subclass security audit results</description>
				</comment>
			</field>
			<field volatile="true" visibility="private" name="uncaughtExceptionHandler" fulltype="java.lang.Thread.UncaughtExceptionHandler" type="Thread.UncaughtExceptionHandler" />
			<field volatile="true" static="true" visibility="private" name="defaultUncaughtExceptionHandler" fulltype="java.lang.Thread.UncaughtExceptionHandler" type="Thread.UncaughtExceptionHandler" />
		</fields>
		<methods>
			<constructor visibility="public" name="Thread">
				<comment>
					<description>Allocates a new &lt;code&gt;Thread&lt;/code&gt; object. This constructor has
 the same effect as &lt;code&gt;Thread(null, null,&lt;/code&gt;
 &lt;i&gt;gname&lt;/i&gt;&lt;code&gt;)&lt;/code&gt;, where &lt;b&gt;&lt;i&gt;gname&lt;/i&gt;&lt;/b&gt; is
 a newly generated name. Automatically generated names are of the
 form &lt;code&gt;&quot;Thread-&quot;+&lt;/code&gt;&lt;i&gt;n&lt;/i&gt;, where &lt;i&gt;n&lt;/i&gt; is an integer.</description>
					<attribute name="@see">
						<description>#Thread(ThreadGroup, Runnable, String)</description>
					</attribute>
				</comment>
			</constructor>
			<constructor visibility="public" name="Thread">
				<comment>
					<description>Allocates a new &lt;code&gt;Thread&lt;/code&gt; object. This constructor has
 the same effect as &lt;code&gt;Thread(null, target,&lt;/code&gt;
 &lt;i&gt;gname&lt;/i&gt;&lt;code&gt;)&lt;/code&gt;, where &lt;i&gt;gname&lt;/i&gt; is
 a newly generated name. Automatically generated names are of the
 form &lt;code&gt;&quot;Thread-&quot;+&lt;/code&gt;&lt;i&gt;n&lt;/i&gt;, where &lt;i&gt;n&lt;/i&gt; is an integer.</description>
					<attribute name="@param">
						<description>target   the object whose &lt;code&gt;run&lt;/code&gt; method is called.</description>
					</attribute>
					<attribute name="@see">
						<description>#Thread(ThreadGroup, Runnable, String)</description>
					</attribute>
				</comment>
				<params>
					<param name="target" comment="the object whose &lt;code&gt;run&lt;/code&gt; method is called." fulltype="java.lang.Runnable" type="Runnable" />
				</params>
			</constructor>
			<constructor visibility="public" name="Thread">
				<comment>
					<description>Allocates a new &lt;code&gt;Thread&lt;/code&gt; object. This constructor has
 the same effect as &lt;code&gt;Thread(group, target,&lt;/code&gt;
 &lt;i&gt;gname&lt;/i&gt;&lt;code&gt;)&lt;/code&gt;, where &lt;i&gt;gname&lt;/i&gt; is
 a newly generated name. Automatically generated names are of the
 form &lt;code&gt;&quot;Thread-&quot;+&lt;/code&gt;&lt;i&gt;n&lt;/i&gt;, where &lt;i&gt;n&lt;/i&gt; is an integer.</description>
					<attribute name="@param">
						<description>group    the thread group.</description>
					</attribute>
					<attribute name="@param">
						<description>target   the object whose &lt;code&gt;run&lt;/code&gt; method is called.</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException  if the current thread cannot create a
             thread in the specified thread group.</description>
					</attribute>
					<attribute name="@see">
						<description>#Thread(ThreadGroup, Runnable, String)</description>
					</attribute>
				</comment>
				<params>
					<param name="group" comment="the thread group." fulltype="java.lang.ThreadGroup" type="ThreadGroup" />
					<param name="target" comment="the object whose &lt;code&gt;run&lt;/code&gt; method is called." fulltype="java.lang.Runnable" type="Runnable" />
				</params>
			</constructor>
			<constructor visibility="public" name="Thread">
				<comment>
					<description>Allocates a new &lt;code&gt;Thread&lt;/code&gt; object. This constructor has
 the same effect as &lt;code&gt;Thread(null, null, name)&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>name   the name of the new thread.</description>
					</attribute>
					<attribute name="@see">
						<description>#Thread(ThreadGroup, Runnable, String)</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="the name of the new thread." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="Thread">
				<comment>
					<description>Allocates a new &lt;code&gt;Thread&lt;/code&gt; object. This constructor has
 the same effect as &lt;code&gt;Thread(group, null, name)&lt;/code&gt;</description>
					<attribute name="@param">
						<description>group   the thread group.</description>
					</attribute>
					<attribute name="@param">
						<description>name    the name of the new thread.</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException  if the current thread cannot create a
               thread in the specified thread group.</description>
					</attribute>
					<attribute name="@see">
						<description>#Thread(ThreadGroup, Runnable, String)</description>
					</attribute>
				</comment>
				<params>
					<param name="group" comment="the thread group." fulltype="java.lang.ThreadGroup" type="ThreadGroup" />
					<param name="name" comment="the name of the new thread." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="Thread">
				<comment>
					<description>Allocates a new &lt;code&gt;Thread&lt;/code&gt; object. This constructor has
 the same effect as &lt;code&gt;Thread(null, target, name)&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>target   the object whose &lt;code&gt;run&lt;/code&gt; method is called.</description>
					</attribute>
					<attribute name="@param">
						<description>name     the name of the new thread.</description>
					</attribute>
					<attribute name="@see">
						<description>#Thread(ThreadGroup, Runnable, String)</description>
					</attribute>
				</comment>
				<params>
					<param name="target" comment="the object whose &lt;code&gt;run&lt;/code&gt; method is called." fulltype="java.lang.Runnable" type="Runnable" />
					<param name="name" comment="the name of the new thread." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="Thread">
				<comment>
					<description>Allocates a new &lt;code&gt;Thread&lt;/code&gt; object so that it has
 &lt;code&gt;target&lt;/code&gt; as its run object, has the specified
 &lt;code&gt;name&lt;/code&gt; as its name, and belongs to the thread group
 referred to by &lt;code&gt;group&lt;/code&gt;.
 &lt;p&gt;
 If &lt;code&gt;group&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; and there is a
 security manager, the group is determined by the security manager&apos;s
 &lt;code&gt;getThreadGroup&lt;/code&gt; method. If &lt;code&gt;group&lt;/code&gt; is
 &lt;code&gt;null&lt;/code&gt; and there is not a security manager, or the
 security manager&apos;s &lt;code&gt;getThreadGroup&lt;/code&gt; method returns
 &lt;code&gt;null&lt;/code&gt;, the group is set to be the same ThreadGroup
 as the thread that is creating the new thread.

 &lt;p&gt;If there is a security manager, its &lt;code&gt;checkAccess&lt;/code&gt;
 method is called with the ThreadGroup as its argument.
 &lt;p&gt;In addition, its &lt;code&gt;checkPermission&lt;/code&gt;
 method is called with the
 &lt;code&gt;RuntimePermission(&quot;enableContextClassLoaderOverride&quot;)&lt;/code&gt;
 permission when invoked directly or indirectly by the constructor
 of a subclass which overrides the &lt;code&gt;getContextClassLoader&lt;/code&gt;
 or &lt;code&gt;setContextClassLoader&lt;/code&gt; methods.
 This may result in a SecurityException.

 &lt;p&gt;
 If the &lt;code&gt;target&lt;/code&gt; argument is not &lt;code&gt;null&lt;/code&gt;, the
 &lt;code&gt;run&lt;/code&gt; method of the &lt;code&gt;target&lt;/code&gt; is called when
 this thread is started. If the target argument is
 &lt;code&gt;null&lt;/code&gt;, this thread&apos;s &lt;code&gt;run&lt;/code&gt; method is called
 when this thread is started.
 &lt;p&gt;
 The priority of the newly created thread is set equal to the
 priority of the thread creating it, that is, the currently running
 thread. The method &lt;code&gt;setPriority&lt;/code&gt; may be used to
 change the priority to a new value.
 &lt;p&gt;
 The newly created thread is initially marked as being a daemon
 thread if and only if the thread creating it is currently marked
 as a daemon thread. The method &lt;code&gt;setDaemon &lt;/code&gt; may be used
 to change whether or not a thread is a daemon.</description>
					<attribute name="@param">
						<description>group     the thread group.</description>
					</attribute>
					<attribute name="@param">
						<description>target   the object whose &lt;code&gt;run&lt;/code&gt; method is called.</description>
					</attribute>
					<attribute name="@param">
						<description>name     the name of the new thread.</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException  if the current thread cannot create a
               thread in the specified thread group or cannot
               override the context class loader methods.</description>
					</attribute>
					<attribute name="@see">
						<description>Runnable#run()</description>
					</attribute>
					<attribute name="@see">
						<description>#run()</description>
					</attribute>
					<attribute name="@see">
						<description>#setDaemon(boolean)</description>
					</attribute>
					<attribute name="@see">
						<description>#setPriority(int)</description>
					</attribute>
					<attribute name="@see">
						<description>ThreadGroup#checkAccess()</description>
					</attribute>
					<attribute name="@see">
						<description>SecurityManager#checkAccess</description>
					</attribute>
				</comment>
				<params>
					<param name="group" comment="the thread group." fulltype="java.lang.ThreadGroup" type="ThreadGroup" />
					<param name="target" comment="the object whose &lt;code&gt;run&lt;/code&gt; method is called." fulltype="java.lang.Runnable" type="Runnable" />
					<param name="name" comment="the name of the new thread." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
			<constructor visibility="public" name="Thread">
				<comment>
					<description>Allocates a new &lt;code&gt;Thread&lt;/code&gt; object so that it has
 &lt;code&gt;target&lt;/code&gt; as its run object, has the specified
 &lt;code&gt;name&lt;/code&gt; as its name, belongs to the thread group referred to
 by &lt;code&gt;group&lt;/code&gt;, and has the specified &lt;i&gt;stack size&lt;/i&gt;.

 &lt;p&gt;This constructor is identical to {@link
 #Thread(ThreadGroup,Runnable,String)} with the exception of the fact
 that it allows the thread stack size to be specified.  The stack size
 is the approximate number of bytes of address space that the virtual
 machine is to allocate for this thread&apos;s stack.  &lt;b&gt;The effect of the
 &lt;tt&gt;stackSize&lt;/tt&gt; parameter, if any, is highly platform dependent.&lt;/b&gt;

 &lt;p&gt;On some platforms, specifying a higher value for the
 &lt;tt&gt;stackSize&lt;/tt&gt; parameter may allow a thread to achieve greater
 recursion depth before throwing a {@link StackOverflowError}.
 Similarly, specifying a lower value may allow a greater number of
 threads to exist concurrently without throwing an {@link
 OutOfMemoryError} (or other internal error).  The details of
 the relationship between the value of the &lt;tt&gt;stackSize&lt;/tt&gt; parameter
 and the maximum recursion depth and concurrency level are
 platform-dependent.  &lt;b&gt;On some platforms, the value of the
 &lt;tt&gt;stackSize&lt;/tt&gt; parameter may have no effect whatsoever.&lt;/b&gt;

 &lt;p&gt;The virtual machine is free to treat the &lt;tt&gt;stackSize&lt;/tt&gt;
 parameter as a suggestion.  If the specified value is unreasonably low
 for the platform, the virtual machine may instead use some
 platform-specific minimum value; if the specified value is unreasonably
 high, the virtual machine may instead use some platform-specific
 maximum.  Likewise, the virtual machine is free to round the specified
 value up or down as it sees fit (or to ignore it completely).

 &lt;p&gt;Specifying a value of zero for the &lt;tt&gt;stackSize&lt;/tt&gt; parameter will
 cause this constructor to behave exactly like the
 &lt;tt&gt;Thread(ThreadGroup, Runnable, String)&lt;/tt&gt; constructor.

 &lt;p&gt;&lt;i&gt;Due to the platform-dependent nature of the behavior of this
 constructor, extreme care should be exercised in its use.
 The thread stack size necessary to perform a given computation will
 likely vary from one JRE implementation to another.  In light of this
 variation, careful tuning of the stack size parameter may be required,
 and the tuning may need to be repeated for each JRE implementation on
 which an application is to run.&lt;/i&gt;

 &lt;p&gt;Implementation note: Java platform implementers are encouraged to
 document their implementation&apos;s behavior with respect to the
 &lt;tt&gt;stackSize parameter&lt;/tt&gt;.</description>
					<attribute name="@param">
						<description>group    the thread group.</description>
					</attribute>
					<attribute name="@param">
						<description>target   the object whose &lt;code&gt;run&lt;/code&gt; method is called.</description>
					</attribute>
					<attribute name="@param">
						<description>name     the name of the new thread.</description>
					</attribute>
					<attribute name="@param">
						<description>stackSize the desired stack size for the new thread, or
             zero to indicate that this parameter is to be ignored.</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException  if the current thread cannot create a
               thread in the specified thread group.</description>
					</attribute>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
				<params>
					<param name="group" comment="the thread group." fulltype="java.lang.ThreadGroup" type="ThreadGroup" />
					<param name="target" comment="the object whose &lt;code&gt;run&lt;/code&gt; method is called." fulltype="java.lang.Runnable" type="Runnable" />
					<param name="name" comment="the name of the new thread." fulltype="java.lang.String" type="String" />
					<param name="stackSize" comment="the desired stack size for the new thread, or
             zero to indicate that this parameter is to be ignored." fulltype="long" type="long" />
				</params>
			</constructor>
			<method static="true" visibility="private" name="registerNatives" fulltype="void" type="void" />
			<method static="true" synchronized="true" visibility="private" name="nextThreadNum" fulltype="int" type="int" />
			<method static="true" synchronized="true" visibility="private" name="nextThreadID" fulltype="long" type="long" />
			<method visibility="package-private" name="blockedOn" fulltype="void" type="void">
				<params>
					<param name="b" fulltype="sun.nio.ch.Interruptible" type="Interruptible" />
				</params>
			</method>
			<method static="true" visibility="public" name="currentThread" returncomment="the currently executing thread." fulltype="java.lang.Thread" type="Thread">
				<comment>
					<description>Returns a reference to the currently executing thread object.</description>
					<attribute name="@return">
						<description>the currently executing thread.</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="yield" fulltype="void" type="void">
				<comment>
					<description>Causes the currently executing thread object to temporarily pause
 and allow other threads to execute.</description>
				</comment>
			</method>
			<method static="true" visibility="public" name="sleep" fulltype="void" type="void">
				<comment>
					<description>Causes the currently executing thread to sleep (temporarily cease
 execution) for the specified number of milliseconds, subject to
 the precision and accuracy of system timers and schedulers. The thread
 does not lose ownership of any monitors.</description>
					<attribute name="@param">
						<description>millis   the length of time to sleep in milliseconds.</description>
					</attribute>
					<attribute name="@exception">
						<description>InterruptedException if any thread has interrupted
             the current thread.  The &lt;i&gt;interrupted status&lt;/i&gt; of the
             current thread is cleared when this exception is thrown.</description>
					</attribute>
					<attribute name="@see">
						<description>Object#notify()</description>
					</attribute>
				</comment>
				<params>
					<param name="millis" comment="the length of time to sleep in milliseconds." fulltype="long" type="long" />
				</params>
				<exceptions>
					<exception comment="if any thread has interrupted
             the current thread.  The &lt;i&gt;interrupted status&lt;/i&gt; of the
             current thread is cleared when this exception is thrown." fulltype="java.lang.InterruptedException" type="InterruptedException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="sleep" fulltype="void" type="void">
				<comment>
					<description>Causes the currently executing thread to sleep (cease execution)
 for the specified number of milliseconds plus the specified number
 of nanoseconds, subject to the precision and accuracy of system
 timers and schedulers. The thread does not lose ownership of any
 monitors.</description>
					<attribute name="@param">
						<description>millis   the length of time to sleep in milliseconds.</description>
					</attribute>
					<attribute name="@param">
						<description>nanos    0-999999 additional nanoseconds to sleep.</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalArgumentException  if the value of millis is
             negative or the value of nanos is not in the range
             0-999999.</description>
					</attribute>
					<attribute name="@exception">
						<description>InterruptedException if any thread has interrupted
             the current thread.  The &lt;i&gt;interrupted status&lt;/i&gt; of the
             current thread is cleared when this exception is thrown.</description>
					</attribute>
					<attribute name="@see">
						<description>Object#notify()</description>
					</attribute>
				</comment>
				<params>
					<param name="millis" comment="the length of time to sleep in milliseconds." fulltype="long" type="long" />
					<param name="nanos" comment="0-999999 additional nanoseconds to sleep." fulltype="int" type="int" />
				</params>
				<exceptions>
					<exception comment="if any thread has interrupted
             the current thread.  The &lt;i&gt;interrupted status&lt;/i&gt; of the
             current thread is cleared when this exception is thrown." fulltype="java.lang.InterruptedException" type="InterruptedException" />
				</exceptions>
			</method>
			<method visibility="private" name="init" fulltype="void" type="void">
				<comment>
					<description>Initializes a Thread.</description>
					<attribute name="@param">
						<description>g the Thread group</description>
					</attribute>
					<attribute name="@param">
						<description>target the object whose run() method gets called</description>
					</attribute>
					<attribute name="@param">
						<description>name the name of the new Thread</description>
					</attribute>
					<attribute name="@param">
						<description>stackSize the desired stack size for the new thread, or
        zero to indicate that this parameter is to be ignored.</description>
					</attribute>
				</comment>
				<params>
					<param name="g" comment="the Thread group" fulltype="java.lang.ThreadGroup" type="ThreadGroup" />
					<param name="target" comment="the object whose run() method gets called" fulltype="java.lang.Runnable" type="Runnable" />
					<param name="name" comment="the name of the new Thread" fulltype="java.lang.String" type="String" />
					<param name="stackSize" comment="the desired stack size for the new thread, or
        zero to indicate that this parameter is to be ignored." fulltype="long" type="long" />
				</params>
			</method>
			<method visibility="protected" name="clone" returncomment="a clone if the class of this object is {@code Cloneable}" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Returns a clone if the class of this object is {@link Cloneable Cloneable}.</description>
					<attribute name="@return">
						<description>a clone if the class of this object is {@code Cloneable}</description>
					</attribute>
					<attribute name="@throws">
						<description>CloneNotSupportedException
          if this method is invoked on a class that does not
          support {@code Cloneable}</description>
					</attribute>
				</comment>
				<exceptions>
					<exception comment="if this method is invoked on a class that does not
          support {@code Cloneable}" fulltype="java.lang.CloneNotSupportedException" type="CloneNotSupportedException" />
				</exceptions>
			</method>
			<method synchronized="true" visibility="public" name="start" fulltype="void" type="void">
				<comment>
					<description>Causes this thread to begin execution; the Java Virtual Machine
 calls the &lt;code&gt;run&lt;/code&gt; method of this thread.
 &lt;p&gt;
 The result is that two threads are running concurrently: the
 current thread (which returns from the call to the
 &lt;code&gt;start&lt;/code&gt; method) and the other thread (which executes its
 &lt;code&gt;run&lt;/code&gt; method).
 &lt;p&gt;
 It is never legal to start a thread more than once.
 In particular, a thread may not be restarted once it has completed
 execution.</description>
					<attribute name="@exception">
						<description>IllegalThreadStateException  if the thread was already
               started.</description>
					</attribute>
					<attribute name="@see">
						<description>#run()</description>
					</attribute>
					<attribute name="@see">
						<description>#stop()</description>
					</attribute>
				</comment>
			</method>
			<method visibility="private" name="start0" fulltype="void" type="void" />
			<method visibility="public" name="run" fulltype="void" type="void">
				<comment>
					<description>If this thread was constructed using a separate
 &lt;code&gt;Runnable&lt;/code&gt; run object, then that
 &lt;code&gt;Runnable&lt;/code&gt; object&apos;s &lt;code&gt;run&lt;/code&gt; method is called;
 otherwise, this method does nothing and returns.
 &lt;p&gt;
 Subclasses of &lt;code&gt;Thread&lt;/code&gt; should override this method.</description>
					<attribute name="@see">
						<description>#start()</description>
					</attribute>
					<attribute name="@see">
						<description>#stop()</description>
					</attribute>
					<attribute name="@see">
						<description>#Thread(ThreadGroup, Runnable, String)</description>
					</attribute>
				</comment>
			</method>
			<method visibility="private" name="exit" fulltype="void" type="void">
				<comment>
					<description>This method is called by the system to give a Thread
 a chance to clean up before it actually exits.</description>
				</comment>
			</method>
			<method final="true" visibility="public" name="stop" fulltype="void" type="void">
				<comment>
					<description>Forces the thread to stop executing.
 &lt;p&gt;
 If there is a security manager installed, its &lt;code&gt;checkAccess&lt;/code&gt;
 method is called with &lt;code&gt;this&lt;/code&gt;
 as its argument. This may result in a
 &lt;code&gt;SecurityException&lt;/code&gt; being raised (in the current thread).
 &lt;p&gt;
 If this thread is different from the current thread (that is, the current
 thread is trying to stop a thread other than itself), the
 security manager&apos;s &lt;code&gt;checkPermission&lt;/code&gt; method (with a
 &lt;code&gt;RuntimePermission(&quot;stopThread&quot;)&lt;/code&gt; argument) is called in
 addition.
 Again, this may result in throwing a
 &lt;code&gt;SecurityException&lt;/code&gt; (in the current thread).
 &lt;p&gt;
 The thread represented by this thread is forced to stop whatever
 it is doing abnormally and to throw a newly created
 &lt;code&gt;ThreadDeath&lt;/code&gt; object as an exception.
 &lt;p&gt;
 It is permitted to stop a thread that has not yet been started.
 If the thread is eventually started, it immediately terminates.
 &lt;p&gt;
 An application should not normally try to catch
 &lt;code&gt;ThreadDeath&lt;/code&gt; unless it must do some extraordinary
 cleanup operation (note that the throwing of
 &lt;code&gt;ThreadDeath&lt;/code&gt; causes &lt;code&gt;finally&lt;/code&gt; clauses of
 &lt;code&gt;try&lt;/code&gt; statements to be executed before the thread
 officially dies).  If a &lt;code&gt;catch&lt;/code&gt; clause catches a
 &lt;code&gt;ThreadDeath&lt;/code&gt; object, it is important to rethrow the
 object so that the thread actually dies.
 &lt;p&gt;
 The top-level error handler that reacts to otherwise uncaught
 exceptions does not print out a message or otherwise notify the
 application if the uncaught exception is an instance of
 &lt;code&gt;ThreadDeath&lt;/code&gt;.</description>
					<attribute name="@exception">
						<description>SecurityException  if the current thread cannot
               modify this thread.</description>
					</attribute>
					<attribute name="@see">
						<description>#interrupt()</description>
					</attribute>
					<attribute name="@see">
						<description>#checkAccess()</description>
					</attribute>
					<attribute name="@see">
						<description>#run()</description>
					</attribute>
					<attribute name="@see">
						<description>#start()</description>
					</attribute>
					<attribute name="@see">
						<description>ThreadDeath</description>
					</attribute>
					<attribute name="@see">
						<description>ThreadGroup#uncaughtException(Thread,Throwable)</description>
					</attribute>
					<attribute name="@see">
						<description>SecurityManager#checkAccess(Thread)</description>
					</attribute>
					<attribute name="@see">
						<description>SecurityManager#checkPermission</description>
					</attribute>
					<attribute name="@deprecated">
						<description>This method is inherently unsafe.  Stopping a thread with
       Thread.stop causes it to unlock all of the monitors that it
       has locked (as a natural consequence of the unchecked
       &lt;code&gt;ThreadDeath&lt;/code&gt; exception propagating up the stack).  If
       any of the objects previously protected by these monitors were in
       an inconsistent state, the damaged objects become visible to
       other threads, potentially resulting in arbitrary behavior.  Many
       uses of &lt;code&gt;stop&lt;/code&gt; should be replaced by code that simply
       modifies some variable to indicate that the target thread should
       stop running.  The target thread should check this variable
       regularly, and return from its run method in an orderly fashion
       if the variable indicates that it is to stop running.  If the
       target thread waits for long periods (on a condition variable,
       for example), the &lt;code&gt;interrupt&lt;/code&gt; method should be used to
       interrupt the wait.
       For more information, see
       &lt;a href=&quot;{@docRoot}/../technotes/guides/concurrency/threadPrimitiveDeprecation.html&quot;&gt;Why
       are Thread.stop, Thread.suspend and Thread.resume Deprecated?&lt;/a&gt;.</description>
					</attribute>
				</comment>
			</method>
			<method final="true" synchronized="true" visibility="public" name="stop" fulltype="void" type="void">
				<comment>
					<description>Forces the thread to stop executing.
 &lt;p&gt;
 If there is a security manager installed, the &lt;code&gt;checkAccess&lt;/code&gt;
 method of this thread is called, which may result in a
 &lt;code&gt;SecurityException&lt;/code&gt; being raised (in the current thread).
 &lt;p&gt;
 If this thread is different from the current thread (that is, the current
 thread is trying to stop a thread other than itself) or
 &lt;code&gt;obj&lt;/code&gt; is not an instance of &lt;code&gt;ThreadDeath&lt;/code&gt;, the
 security manager&apos;s &lt;code&gt;checkPermission&lt;/code&gt; method (with the
 &lt;code&gt;RuntimePermission(&quot;stopThread&quot;)&lt;/code&gt; argument) is called in
 addition.
 Again, this may result in throwing a
 &lt;code&gt;SecurityException&lt;/code&gt; (in the current thread).
 &lt;p&gt;
 If the argument &lt;code&gt;obj&lt;/code&gt; is null, a
 &lt;code&gt;NullPointerException&lt;/code&gt; is thrown (in the current thread).
 &lt;p&gt;
 The thread represented by this thread is forced to stop
 whatever it is doing abnormally and to throw the
 &lt;code&gt;Throwable&lt;/code&gt; object &lt;code&gt;obj&lt;/code&gt; as an exception. This
 is an unusual action to take; normally, the &lt;code&gt;stop&lt;/code&gt; method
 that takes no arguments should be used.
 &lt;p&gt;
 It is permitted to stop a thread that has not yet been started.
 If the thread is eventually started, it immediately terminates.</description>
					<attribute name="@param">
						<description>obj   the Throwable object to be thrown.</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException  if the current thread cannot modify
               this thread.</description>
					</attribute>
					<attribute name="@throws">
						<description>NullPointerException if obj is &lt;tt&gt;null&lt;/tt&gt;.</description>
					</attribute>
					<attribute name="@see">
						<description>#interrupt()</description>
					</attribute>
					<attribute name="@see">
						<description>#checkAccess()</description>
					</attribute>
					<attribute name="@see">
						<description>#run()</description>
					</attribute>
					<attribute name="@see">
						<description>#start()</description>
					</attribute>
					<attribute name="@see">
						<description>#stop()</description>
					</attribute>
					<attribute name="@see">
						<description>SecurityManager#checkAccess(Thread)</description>
					</attribute>
					<attribute name="@see">
						<description>SecurityManager#checkPermission</description>
					</attribute>
					<attribute name="@deprecated">
						<description>This method is inherently unsafe.  See {@link #stop()}
        for details.  An additional danger of this
        method is that it may be used to generate exceptions that the
        target thread is unprepared to handle (including checked
        exceptions that the thread could not possibly throw, were it
        not for this method).
        For more information, see
        &lt;a href=&quot;{@docRoot}/../technotes/guides/concurrency/threadPrimitiveDeprecation.html&quot;&gt;Why
        are Thread.stop, Thread.suspend and Thread.resume Deprecated?&lt;/a&gt;.</description>
					</attribute>
				</comment>
				<params>
					<param name="obj" comment="the Throwable object to be thrown." fulltype="java.lang.Throwable" type="Throwable" />
				</params>
			</method>
			<method final="true" synchronized="true" visibility="private" name="stop1" fulltype="void" type="void">
				<comment>
					<description>Common impl for stop() and stop(Throwable).</description>
				</comment>
				<params>
					<param name="th" fulltype="java.lang.Throwable" type="Throwable" />
				</params>
			</method>
			<method visibility="public" name="interrupt" fulltype="void" type="void">
				<comment>
					<description>Interrupts this thread.

 &lt;p&gt; Unless the current thread is interrupting itself, which is
 always permitted, the {@link #checkAccess() checkAccess} method
 of this thread is invoked, which may cause a {@link
 SecurityException} to be thrown.

 &lt;p&gt; If this thread is blocked in an invocation of the {@link
 Object#wait() wait()}, {@link Object#wait(long) wait(long)}, or {@link
 Object#wait(long, int) wait(long, int)} methods of the {@link Object}
 class, or of the {@link #join()}, {@link #join(long)}, {@link
 #join(long, int)}, {@link #sleep(long)}, or {@link #sleep(long, int)},
 methods of this class, then its interrupt status will be cleared and it
 will receive an {@link InterruptedException}.

 &lt;p&gt; If this thread is blocked in an I/O operation upon an {@link
 java.nio.channels.InterruptibleChannel &lt;/code&gt;interruptible
 channel&lt;code&gt;} then the channel will be closed, the thread&apos;s interrupt
 status will be set, and the thread will receive a {@link
 java.nio.channels.ClosedByInterruptException}.

 &lt;p&gt; If this thread is blocked in a {@link java.nio.channels.Selector}
 then the thread&apos;s interrupt status will be set and it will return
 immediately from the selection operation, possibly with a non-zero
 value, just as if the selector&apos;s {@link
 java.nio.channels.Selector#wakeup wakeup} method were invoked.

 &lt;p&gt; If none of the previous conditions hold then this thread&apos;s interrupt
 status will be set. &lt;/p&gt;

 &lt;p&gt; Interrupting a thread that is not alive need not have any effect.</description>
					<attribute name="@throws">
						<description>SecurityException
          if the current thread cannot modify this thread</description>
					</attribute>
					<attribute name="@revised">
						<description>6.0</description>
					</attribute>
					<attribute name="@spec">
						<description>JSR-51</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="interrupted" returncomment="&lt;code&gt;true&lt;/code&gt; if the current thread has been interrupted;
          &lt;code&gt;false&lt;/code&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Tests whether the current thread has been interrupted.  The
 &lt;i&gt;interrupted status&lt;/i&gt; of the thread is cleared by this method.  In
 other words, if this method were to be called twice in succession, the
 second call would return false (unless the current thread were
 interrupted again, after the first call had cleared its interrupted
 status and before the second call had examined it).

 &lt;p&gt;A thread interruption ignored because a thread was not alive
 at the time of the interrupt will be reflected by this method
 returning false.</description>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if the current thread has been interrupted;
          &lt;code&gt;false&lt;/code&gt; otherwise.</description>
					</attribute>
					<attribute name="@see">
						<description>#isInterrupted()</description>
					</attribute>
					<attribute name="@revised">
						<description>6.0</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="isInterrupted" returncomment="&lt;code&gt;true&lt;/code&gt; if this thread has been interrupted;
          &lt;code&gt;false&lt;/code&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Tests whether this thread has been interrupted.  The &lt;i&gt;interrupted
 status&lt;/i&gt; of the thread is unaffected by this method.

 &lt;p&gt;A thread interruption ignored because a thread was not alive
 at the time of the interrupt will be reflected by this method
 returning false.</description>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if this thread has been interrupted;
          &lt;code&gt;false&lt;/code&gt; otherwise.</description>
					</attribute>
					<attribute name="@see">
						<description>#interrupted()</description>
					</attribute>
					<attribute name="@revised">
						<description>6.0</description>
					</attribute>
				</comment>
			</method>
			<method visibility="private" name="isInterrupted" fulltype="boolean" type="boolean">
				<comment>
					<description>Tests if some Thread has been interrupted.  The interrupted state
 is reset or not based on the value of ClearInterrupted that is
 passed.</description>
				</comment>
				<params>
					<param name="ClearInterrupted" fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method visibility="public" name="destroy" fulltype="void" type="void">
				<comment>
					<description>Throws {@link NoSuchMethodError}.</description>
					<attribute name="@deprecated">
						<description>This method was originally designed to destroy this
     thread without any cleanup. Any monitors it held would have
     remained locked. However, the method was never implemented.
     If if were to be implemented, it would be deadlock-prone in
     much the manner of {@link #suspend}. If the target thread held
     a lock protecting a critical system resource when it was
     destroyed, no thread could ever access this resource again.
     If another thread ever attempted to lock this resource, deadlock
     would result. Such deadlocks typically manifest themselves as
     &quot;frozen&quot; processes. For more information, see
     &lt;a href=&quot;{@docRoot}/../technotes/guides/concurrency/threadPrimitiveDeprecation.html&quot;&gt;
     Why are Thread.stop, Thread.suspend and Thread.resume Deprecated?&lt;/a&gt;.</description>
					</attribute>
					<attribute name="@throws">
						<description>NoSuchMethodError always</description>
					</attribute>
				</comment>
			</method>
			<method final="true" visibility="public" name="isAlive" returncomment="&lt;code&gt;true&lt;/code&gt; if this thread is alive;
          &lt;code&gt;false&lt;/code&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Tests if this thread is alive. A thread is alive if it has
 been started and has not yet died.</description>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if this thread is alive;
          &lt;code&gt;false&lt;/code&gt; otherwise.</description>
					</attribute>
				</comment>
			</method>
			<method final="true" visibility="public" name="suspend" fulltype="void" type="void">
				<comment>
					<description>Suspends this thread.
 &lt;p&gt;
 First, the &lt;code&gt;checkAccess&lt;/code&gt; method of this thread is called
 with no arguments. This may result in throwing a
 &lt;code&gt;SecurityException &lt;/code&gt;(in the current thread).
 &lt;p&gt;
 If the thread is alive, it is suspended and makes no further
 progress unless and until it is resumed.</description>
					<attribute name="@exception">
						<description>SecurityException  if the current thread cannot modify
               this thread.</description>
					</attribute>
					<attribute name="@see">
						<description>#checkAccess</description>
					</attribute>
					<attribute name="@deprecated">
						<description>This method has been deprecated, as it is
   inherently deadlock-prone.  If the target thread holds a lock on the
   monitor protecting a critical system resource when it is suspended, no
   thread can access this resource until the target thread is resumed. If
   the thread that would resume the target thread attempts to lock this
   monitor prior to calling &lt;code&gt;resume&lt;/code&gt;, deadlock results.  Such
   deadlocks typically manifest themselves as &quot;frozen&quot; processes.
   For more information, see
   &lt;a href=&quot;{@docRoot}/../technotes/guides/concurrency/threadPrimitiveDeprecation.html&quot;&gt;Why
   are Thread.stop, Thread.suspend and Thread.resume Deprecated?&lt;/a&gt;.</description>
					</attribute>
				</comment>
			</method>
			<method final="true" visibility="public" name="resume" fulltype="void" type="void">
				<comment>
					<description>Resumes a suspended thread.
 &lt;p&gt;
 First, the &lt;code&gt;checkAccess&lt;/code&gt; method of this thread is called
 with no arguments. This may result in throwing a
 &lt;code&gt;SecurityException&lt;/code&gt; (in the current thread).
 &lt;p&gt;
 If the thread is alive but suspended, it is resumed and is
 permitted to make progress in its execution.</description>
					<attribute name="@exception">
						<description>SecurityException  if the current thread cannot modify this
               thread.</description>
					</attribute>
					<attribute name="@see">
						<description>#checkAccess</description>
					</attribute>
					<attribute name="@see">
						<description>#suspend()</description>
					</attribute>
					<attribute name="@deprecated">
						<description>This method exists solely for use with {@link #suspend},
     which has been deprecated because it is deadlock-prone.
     For more information, see
     &lt;a href=&quot;{@docRoot}/../technotes/guides/concurrency/threadPrimitiveDeprecation.html&quot;&gt;Why
     are Thread.stop, Thread.suspend and Thread.resume Deprecated?&lt;/a&gt;.</description>
					</attribute>
				</comment>
			</method>
			<method final="true" visibility="public" name="setPriority" fulltype="void" type="void">
				<comment>
					<description>Changes the priority of this thread.
 &lt;p&gt;
 First the &lt;code&gt;checkAccess&lt;/code&gt; method of this thread is called
 with no arguments. This may result in throwing a
 &lt;code&gt;SecurityException&lt;/code&gt;.
 &lt;p&gt;
 Otherwise, the priority of this thread is set to the smaller of
 the specified &lt;code&gt;newPriority&lt;/code&gt; and the maximum permitted
 priority of the thread&apos;s thread group.</description>
					<attribute name="@param">
						<description>newPriority priority to set this thread to</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalArgumentException  If the priority is not in the
               range &lt;code&gt;MIN_PRIORITY&lt;/code&gt; to
               &lt;code&gt;MAX_PRIORITY&lt;/code&gt;.</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException  if the current thread cannot modify
               this thread.</description>
					</attribute>
					<attribute name="@see">
						<description>#getPriority</description>
					</attribute>
					<attribute name="@see">
						<description>#checkAccess()</description>
					</attribute>
					<attribute name="@see">
						<description>#getThreadGroup()</description>
					</attribute>
					<attribute name="@see">
						<description>#MAX_PRIORITY</description>
					</attribute>
					<attribute name="@see">
						<description>#MIN_PRIORITY</description>
					</attribute>
					<attribute name="@see">
						<description>ThreadGroup#getMaxPriority()</description>
					</attribute>
				</comment>
				<params>
					<param name="newPriority" comment="priority to set this thread to" fulltype="int" type="int" />
				</params>
			</method>
			<method final="true" visibility="public" name="getPriority" returncomment="this thread&apos;s priority." fulltype="int" type="int">
				<comment>
					<description>Returns this thread&apos;s priority.</description>
					<attribute name="@return">
						<description>this thread&apos;s priority.</description>
					</attribute>
					<attribute name="@see">
						<description>#setPriority</description>
					</attribute>
				</comment>
			</method>
			<method final="true" visibility="public" name="setName" fulltype="void" type="void">
				<comment>
					<description>Changes the name of this thread to be equal to the argument
 &lt;code&gt;name&lt;/code&gt;.
 &lt;p&gt;
 First the &lt;code&gt;checkAccess&lt;/code&gt; method of this thread is called
 with no arguments. This may result in throwing a
 &lt;code&gt;SecurityException&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>name   the new name for this thread.</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException  if the current thread cannot modify this
               thread.</description>
					</attribute>
					<attribute name="@see">
						<description>#getName</description>
					</attribute>
					<attribute name="@see">
						<description>#checkAccess()</description>
					</attribute>
				</comment>
				<params>
					<param name="name" comment="the new name for this thread." fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method final="true" visibility="public" name="getName" returncomment="this thread&apos;s name." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns this thread&apos;s name.</description>
					<attribute name="@return">
						<description>this thread&apos;s name.</description>
					</attribute>
					<attribute name="@see">
						<description>#setName(String)</description>
					</attribute>
				</comment>
			</method>
			<method final="true" visibility="public" name="getThreadGroup" returncomment="this thread&apos;s thread group." fulltype="java.lang.ThreadGroup" type="ThreadGroup">
				<comment>
					<description>Returns the thread group to which this thread belongs.
 This method returns null if this thread has died
 (been stopped).</description>
					<attribute name="@return">
						<description>this thread&apos;s thread group.</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="activeCount" returncomment="the number of active threads in the current thread&apos;s thread
          group." fulltype="int" type="int">
				<comment>
					<description>Returns the number of active threads in the current thread&apos;s thread
 group.</description>
					<attribute name="@return">
						<description>the number of active threads in the current thread&apos;s thread
          group.</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="enumerate" returncomment="the number of threads put into the array" fulltype="int" type="int">
				<comment>
					<description>Copies into the specified array every active thread in
 the current thread&apos;s thread group and its subgroups. This method simply
 calls the &lt;code&gt;enumerate&lt;/code&gt; method of the current thread&apos;s thread
 group with the array argument.
 &lt;p&gt;
 First, if there is a security manager, that &lt;code&gt;enumerate&lt;/code&gt;
 method calls the security
 manager&apos;s &lt;code&gt;checkAccess&lt;/code&gt; method
 with the thread group as its argument. This may result
 in throwing a &lt;code&gt;SecurityException&lt;/code&gt;.</description>
					<attribute name="@param">
						<description>tarray an array of Thread objects to copy to</description>
					</attribute>
					<attribute name="@return">
						<description>the number of threads put into the array</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException  if a security manager exists and its
             &lt;code&gt;checkAccess&lt;/code&gt; method doesn&apos;t allow the operation.</description>
					</attribute>
					<attribute name="@see">
						<description>ThreadGroup#enumerate(Thread[])</description>
					</attribute>
					<attribute name="@see">
						<description>SecurityManager#checkAccess(ThreadGroup)</description>
					</attribute>
				</comment>
				<params>
					<param name="tarray" comment="an array of Thread objects to copy to" fulltype="java.lang.Thread[]" type="Thread" />
				</params>
			</method>
			<method visibility="public" name="countStackFrames" returncomment="the number of stack frames in this thread." fulltype="int" type="int">
				<comment>
					<description>Counts the number of stack frames in this thread. The thread must
 be suspended.</description>
					<attribute name="@return">
						<description>the number of stack frames in this thread.</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalThreadStateException  if this thread is not
             suspended.</description>
					</attribute>
					<attribute name="@deprecated">
						<description>The definition of this call depends on {@link #suspend},
             which is deprecated.  Further, the results of this call
             were never well-defined.</description>
					</attribute>
				</comment>
			</method>
			<method final="true" synchronized="true" visibility="public" name="join" fulltype="void" type="void">
				<comment>
					<description>Waits at most &lt;code&gt;millis&lt;/code&gt; milliseconds for this thread to
 die. A timeout of &lt;code&gt;0&lt;/code&gt; means to wait forever.</description>
					<attribute name="@param">
						<description>millis   the time to wait in milliseconds.</description>
					</attribute>
					<attribute name="@exception">
						<description>InterruptedException if any thread has interrupted
             the current thread.  The &lt;i&gt;interrupted status&lt;/i&gt; of the
             current thread is cleared when this exception is thrown.</description>
					</attribute>
				</comment>
				<params>
					<param name="millis" comment="the time to wait in milliseconds." fulltype="long" type="long" />
				</params>
				<exceptions>
					<exception comment="if any thread has interrupted
             the current thread.  The &lt;i&gt;interrupted status&lt;/i&gt; of the
             current thread is cleared when this exception is thrown." fulltype="java.lang.InterruptedException" type="InterruptedException" />
				</exceptions>
			</method>
			<method final="true" synchronized="true" visibility="public" name="join" fulltype="void" type="void">
				<comment>
					<description>Waits at most &lt;code&gt;millis&lt;/code&gt; milliseconds plus
 &lt;code&gt;nanos&lt;/code&gt; nanoseconds for this thread to die.</description>
					<attribute name="@param">
						<description>millis   the time to wait in milliseconds.</description>
					</attribute>
					<attribute name="@param">
						<description>nanos    0-999999 additional nanoseconds to wait.</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalArgumentException  if the value of millis is negative
               the value of nanos is not in the range 0-999999.</description>
					</attribute>
					<attribute name="@exception">
						<description>InterruptedException if any thread has interrupted
             the current thread.  The &lt;i&gt;interrupted status&lt;/i&gt; of the
             current thread is cleared when this exception is thrown.</description>
					</attribute>
				</comment>
				<params>
					<param name="millis" comment="the time to wait in milliseconds." fulltype="long" type="long" />
					<param name="nanos" comment="0-999999 additional nanoseconds to wait." fulltype="int" type="int" />
				</params>
				<exceptions>
					<exception comment="if any thread has interrupted
             the current thread.  The &lt;i&gt;interrupted status&lt;/i&gt; of the
             current thread is cleared when this exception is thrown." fulltype="java.lang.InterruptedException" type="InterruptedException" />
				</exceptions>
			</method>
			<method final="true" visibility="public" name="join" fulltype="void" type="void">
				<comment>
					<description>Waits for this thread to die.</description>
					<attribute name="@exception">
						<description>InterruptedException if any thread has interrupted
             the current thread.  The &lt;i&gt;interrupted status&lt;/i&gt; of the
             current thread is cleared when this exception is thrown.</description>
					</attribute>
				</comment>
				<exceptions>
					<exception comment="if any thread has interrupted
             the current thread.  The &lt;i&gt;interrupted status&lt;/i&gt; of the
             current thread is cleared when this exception is thrown." fulltype="java.lang.InterruptedException" type="InterruptedException" />
				</exceptions>
			</method>
			<method static="true" visibility="public" name="dumpStack" fulltype="void" type="void">
				<comment>
					<description>Prints a stack trace of the current thread to the standard error stream.
 This method is used only for debugging.</description>
					<attribute name="@see">
						<description>Throwable#printStackTrace()</description>
					</attribute>
				</comment>
			</method>
			<method final="true" visibility="public" name="setDaemon" fulltype="void" type="void">
				<comment>
					<description>Marks this thread as either a daemon thread or a user thread. The
 Java Virtual Machine exits when the only threads running are all
 daemon threads.
 &lt;p&gt;
 This method must be called before the thread is started.
 &lt;p&gt;
 This method first calls the &lt;code&gt;checkAccess&lt;/code&gt; method
 of this thread
 with no arguments. This may result in throwing a
 &lt;code&gt;SecurityException &lt;/code&gt;(in the current thread).</description>
					<attribute name="@param">
						<description>on   if &lt;code&gt;true&lt;/code&gt;, marks this thread as a
                  daemon thread.</description>
					</attribute>
					<attribute name="@exception">
						<description>IllegalThreadStateException  if this thread is active.</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException  if the current thread cannot modify
               this thread.</description>
					</attribute>
					<attribute name="@see">
						<description>#isDaemon()</description>
					</attribute>
					<attribute name="@see">
						<description>#checkAccess</description>
					</attribute>
				</comment>
				<params>
					<param name="on" comment="if &lt;code&gt;true&lt;/code&gt;, marks this thread as a
                  daemon thread." fulltype="boolean" type="boolean" />
				</params>
			</method>
			<method final="true" visibility="public" name="isDaemon" returncomment="&lt;code&gt;true&lt;/code&gt; if this thread is a daemon thread;
          &lt;code&gt;false&lt;/code&gt; otherwise." fulltype="boolean" type="boolean">
				<comment>
					<description>Tests if this thread is a daemon thread.</description>
					<attribute name="@return">
						<description>&lt;code&gt;true&lt;/code&gt; if this thread is a daemon thread;
          &lt;code&gt;false&lt;/code&gt; otherwise.</description>
					</attribute>
					<attribute name="@see">
						<description>#setDaemon(boolean)</description>
					</attribute>
				</comment>
			</method>
			<method final="true" visibility="public" name="checkAccess" fulltype="void" type="void">
				<comment>
					<description>Determines if the currently running thread has permission to
 modify this thread.
 &lt;p&gt;
 If there is a security manager, its &lt;code&gt;checkAccess&lt;/code&gt; method
 is called with this thread as its argument. This may result in
 throwing a &lt;code&gt;SecurityException&lt;/code&gt;.</description>
					<attribute name="@exception">
						<description>SecurityException  if the current thread is not allowed to
               access this thread.</description>
					</attribute>
					<attribute name="@see">
						<description>SecurityManager#checkAccess(Thread)</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="toString" returncomment="a string representation of this thread." fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a string representation of this thread, including the
 thread&apos;s name, priority, and thread group.</description>
					<attribute name="@return">
						<description>a string representation of this thread.</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getContextClassLoader" returncomment="the context ClassLoader for this Thread" fulltype="java.lang.ClassLoader" type="ClassLoader">
				<comment>
					<description>Returns the context ClassLoader for this Thread. The context
 ClassLoader is provided by the creator of the thread for use
 by code running in this thread when loading classes and resources.
 If not set, the default is the ClassLoader context of the parent
 Thread. The context ClassLoader of the primordial thread is
 typically set to the class loader used to load the application.

 &lt;p&gt;First, if there is a security manager, and the caller&apos;s class
 loader is not null and the caller&apos;s class loader is not the same as or
 an ancestor of the context class loader for the thread whose
 context class loader is being requested, then the security manager&apos;s
 &lt;code&gt;checkPermission&lt;/code&gt;
 method is called with a
 &lt;code&gt;RuntimePermission(&quot;getClassLoader&quot;)&lt;/code&gt; permission
  to see if it&apos;s ok to get the context ClassLoader..</description>
					<attribute name="@return">
						<description>the context ClassLoader for this Thread</description>
					</attribute>
					<attribute name="@throws">
						<description>SecurityException
        if a security manager exists and its
        &lt;code&gt;checkPermission&lt;/code&gt; method doesn&apos;t allow
        getting the context ClassLoader.</description>
					</attribute>
					<attribute name="@see">
						<description>#setContextClassLoader</description>
					</attribute>
					<attribute name="@see">
						<description>SecurityManager#checkPermission</description>
					</attribute>
					<attribute name="@see">
						<description>RuntimePermission</description>
					</attribute>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="setContextClassLoader" fulltype="void" type="void">
				<comment>
					<description>Sets the context ClassLoader for this Thread. The context
 ClassLoader can be set when a thread is created, and allows
 the creator of the thread to provide the appropriate class loader
 to code running in the thread when loading classes and resources.

 &lt;p&gt;First, if there is a security manager, its &lt;code&gt;checkPermission&lt;/code&gt;
 method is called with a
 &lt;code&gt;RuntimePermission(&quot;setContextClassLoader&quot;)&lt;/code&gt; permission
  to see if it&apos;s ok to set the context ClassLoader..</description>
					<attribute name="@param">
						<description>cl the context ClassLoader for this Thread</description>
					</attribute>
					<attribute name="@exception">
						<description>SecurityException  if the current thread cannot set the
 context ClassLoader.</description>
					</attribute>
					<attribute name="@see">
						<description>#getContextClassLoader</description>
					</attribute>
					<attribute name="@see">
						<description>SecurityManager#checkPermission</description>
					</attribute>
					<attribute name="@see">
						<description>RuntimePermission</description>
					</attribute>
					<attribute name="@since">
						<description>1.2</description>
					</attribute>
				</comment>
				<params>
					<param name="cl" comment="the context ClassLoader for this Thread" fulltype="java.lang.ClassLoader" type="ClassLoader" />
				</params>
			</method>
			<method static="true" visibility="public" name="holdsLock" returncomment="&lt;tt&gt;true&lt;/tt&gt; if the current thread holds the monitor lock on
         the specified object." fulltype="boolean" type="boolean">
				<comment>
					<description>Returns &lt;tt&gt;true&lt;/tt&gt; if and only if the current thread holds the
 monitor lock on the specified object.

 &lt;p&gt;This method is designed to allow a program to assert that
 the current thread already holds a specified lock:
 &lt;pre&gt;
     assert Thread.holdsLock(obj);
 &lt;/pre&gt;</description>
					<attribute name="@param">
						<description>obj the object on which to test lock ownership</description>
					</attribute>
					<attribute name="@throws">
						<description>NullPointerException if obj is &lt;tt&gt;null&lt;/tt&gt;</description>
					</attribute>
					<attribute name="@return">
						<description>&lt;tt&gt;true&lt;/tt&gt; if the current thread holds the monitor lock on
         the specified object.</description>
					</attribute>
					<attribute name="@since">
						<description>1.4</description>
					</attribute>
				</comment>
				<params>
					<param name="obj" comment="the object on which to test lock ownership" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="public" name="getStackTrace" returncomment="an array of &lt;tt&gt;StackTraceElement&lt;/tt&gt;,
 each represents one stack frame." fulltype="java.lang.StackTraceElement[]" type="StackTraceElement">
				<comment>
					<description>Returns an array of stack trace elements representing the stack dump
 of this thread.  This method will return a zero-length array if
 this thread has not started or has terminated.
 If the returned array is of non-zero length then the first element of
 the array represents the top of the stack, which is the most recent
 method invocation in the sequence.  The last element of the array
 represents the bottom of the stack, which is the least recent method
 invocation in the sequence.

 &lt;p&gt;If there is a security manager, and this thread is not
 the current thread, then the security manager&apos;s
 &lt;tt&gt;checkPermission&lt;/tt&gt; method is called with a
 &lt;tt&gt;RuntimePermission(&quot;getStackTrace&quot;)&lt;/tt&gt; permission
 to see if it&apos;s ok to get the stack trace.

 &lt;p&gt;Some virtual machines may, under some circumstances, omit one
 or more stack frames from the stack trace.  In the extreme case,
 a virtual machine that has no stack trace information concerning
 this thread is permitted to return a zero-length array from this
 method.</description>
					<attribute name="@return">
						<description>an array of &lt;tt&gt;StackTraceElement&lt;/tt&gt;,
 each represents one stack frame.</description>
					</attribute>
					<attribute name="@throws">
						<description>SecurityException
        if a security manager exists and its
        &lt;tt&gt;checkPermission&lt;/tt&gt; method doesn&apos;t allow
        getting the stack trace of thread.</description>
					</attribute>
					<attribute name="@see">
						<description>SecurityManager#checkPermission</description>
					</attribute>
					<attribute name="@see">
						<description>RuntimePermission</description>
					</attribute>
					<attribute name="@see">
						<description>Throwable#getStackTrace</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="getAllStackTraces" returncomment="a &lt;tt&gt;Map&lt;/tt&gt; from &lt;tt&gt;Thread&lt;/tt&gt; to an array of
 &lt;tt&gt;StackTraceElement&lt;/tt&gt; that represents the stack trace of
 the corresponding thread." fulltype="java.util.Map" type="Map">
				<comment>
					<description>Returns a map of stack traces for all live threads.
 The map keys are threads and each map value is an array of
 &lt;tt&gt;StackTraceElement&lt;/tt&gt; that represents the stack dump
 of the corresponding &lt;tt&gt;Thread&lt;/tt&gt;.
 The returned stack traces are in the format specified for
 the {@link #getStackTrace getStackTrace} method.

 &lt;p&gt;The threads may be executing while this method is called.
 The stack trace of each thread only represents a snapshot and
 each stack trace may be obtained at different time.  A zero-length
 array will be returned in the map value if the virtual machine has
 no stack trace information about a thread.

 &lt;p&gt;If there is a security manager, then the security manager&apos;s
 &lt;tt&gt;checkPermission&lt;/tt&gt; method is called with a
 &lt;tt&gt;RuntimePermission(&quot;getStackTrace&quot;)&lt;/tt&gt; permission as well as
 &lt;tt&gt;RuntimePermission(&quot;modifyThreadGroup&quot;)&lt;/tt&gt; permission
 to see if it is ok to get the stack trace of all threads.</description>
					<attribute name="@return">
						<description>a &lt;tt&gt;Map&lt;/tt&gt; from &lt;tt&gt;Thread&lt;/tt&gt; to an array of
 &lt;tt&gt;StackTraceElement&lt;/tt&gt; that represents the stack trace of
 the corresponding thread.</description>
					</attribute>
					<attribute name="@throws">
						<description>SecurityException
        if a security manager exists and its
        &lt;tt&gt;checkPermission&lt;/tt&gt; method doesn&apos;t allow
        getting the stack trace of thread.</description>
					</attribute>
					<attribute name="@see">
						<description>#getStackTrace</description>
					</attribute>
					<attribute name="@see">
						<description>SecurityManager#checkPermission</description>
					</attribute>
					<attribute name="@see">
						<description>RuntimePermission</description>
					</attribute>
					<attribute name="@see">
						<description>Throwable#getStackTrace</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="private" name="isCCLOverridden" fulltype="boolean" type="boolean">
				<comment>
					<description>Verifies that this (possibly subclass) instance can be constructed
 without violating security constraints: the subclass must not override
 security-sensitive non-final methods, or else the
 &quot;enableContextClassLoaderOverride&quot; RuntimePermission is checked.</description>
				</comment>
				<params>
					<param name="cl" fulltype="java.lang.Class" type="Class" />
				</params>
			</method>
			<method static="true" visibility="private" name="auditSubclass" fulltype="boolean" type="boolean">
				<comment>
					<description>Performs reflective checks on given subclass to verify that it doesn&apos;t
 override security-sensitive non-final methods.  Returns true if the
 subclass overrides any of the methods, false otherwise.</description>
				</comment>
				<params>
					<param name="subcl" fulltype="java.lang.Class" type="Class" />
				</params>
			</method>
			<method static="true" visibility="private" name="dumpThreads" fulltype="java.lang.StackTraceElement[][]" type="StackTraceElement">
				<params>
					<param name="threads" fulltype="java.lang.Thread[]" type="Thread" />
				</params>
			</method>
			<method static="true" visibility="private" name="getThreads" fulltype="java.lang.Thread[]" type="Thread" />
			<method visibility="public" name="getId" returncomment="this thread&apos;s ID." fulltype="long" type="long">
				<comment>
					<description>Returns the identifier of this Thread.  The thread ID is a positive
 &lt;tt&gt;long&lt;/tt&gt; number generated when this thread was created.
 The thread ID is unique and remains unchanged during its lifetime.
 When a thread is terminated, this thread ID may be reused.</description>
					<attribute name="@return">
						<description>this thread&apos;s ID.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getState" returncomment="this thread&apos;s state." fulltype="java.lang.Thread.State" type="Thread.State">
				<comment>
					<description>Returns the state of this thread.
 This method is designed for use in monitoring of the system state,
 not for synchronization control.</description>
					<attribute name="@return">
						<description>this thread&apos;s state.</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method static="true" visibility="public" name="setDefaultUncaughtExceptionHandler" fulltype="void" type="void">
				<comment>
					<description>Set the default handler invoked when a thread abruptly terminates
 due to an uncaught exception, and no other handler has been defined
 for that thread.

 &lt;p&gt;Uncaught exception handling is controlled first by the thread, then
 by the thread&apos;s {@link ThreadGroup} object and finally by the default
 uncaught exception handler. If the thread does not have an explicit
 uncaught exception handler set, and the thread&apos;s thread group
 (including parent thread groups)  does not specialize its
 &lt;tt&gt;uncaughtException&lt;/tt&gt; method, then the default handler&apos;s
 &lt;tt&gt;uncaughtException&lt;/tt&gt; method will be invoked.
 &lt;p&gt;By setting the default uncaught exception handler, an application
 can change the way in which uncaught exceptions are handled (such as
 logging to a specific device, or file) for those threads that would
 already accept whatever &amp;quot;default&amp;quot; behavior the system
 provided.

 &lt;p&gt;Note that the default uncaught exception handler should not usually
 defer to the thread&apos;s &lt;tt&gt;ThreadGroup&lt;/tt&gt; object, as that could cause
 infinite recursion.</description>
					<attribute name="@param">
						<description>eh the object to use as the default uncaught exception handler.
 If &lt;tt&gt;null&lt;/tt&gt; then there is no default handler.</description>
					</attribute>
					<attribute name="@throws">
						<description>SecurityException if a security manager is present and it
         denies &lt;tt&gt;{@link RuntimePermission}
         (&amp;quot;setDefaultUncaughtExceptionHandler&amp;quot;)&lt;/tt&gt;</description>
					</attribute>
					<attribute name="@see">
						<description>#setUncaughtExceptionHandler</description>
					</attribute>
					<attribute name="@see">
						<description>#getUncaughtExceptionHandler</description>
					</attribute>
					<attribute name="@see">
						<description>ThreadGroup#uncaughtException</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="eh" comment="the object to use as the default uncaught exception handler.
 If &lt;tt&gt;null&lt;/tt&gt; then there is no default handler." fulltype="java.lang.Thread.UncaughtExceptionHandler" type="Thread.UncaughtExceptionHandler" />
				</params>
			</method>
			<method static="true" visibility="public" name="getDefaultUncaughtExceptionHandler" fulltype="java.lang.Thread.UncaughtExceptionHandler" type="Thread.UncaughtExceptionHandler">
				<comment>
					<description>Returns the default handler invoked when a thread abruptly terminates
 due to an uncaught exception. If the returned value is &lt;tt&gt;null&lt;/tt&gt;,
 there is no default.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
					<attribute name="@see">
						<description>#setDefaultUncaughtExceptionHandler</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="getUncaughtExceptionHandler" fulltype="java.lang.Thread.UncaughtExceptionHandler" type="Thread.UncaughtExceptionHandler">
				<comment>
					<description>Returns the handler invoked when this thread abruptly terminates
 due to an uncaught exception. If this thread has not had an
 uncaught exception handler explicitly set then this thread&apos;s
 &lt;tt&gt;ThreadGroup&lt;/tt&gt; object is returned, unless this thread
 has terminated, in which case &lt;tt&gt;null&lt;/tt&gt; is returned.</description>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="setUncaughtExceptionHandler" fulltype="void" type="void">
				<comment>
					<description>Set the handler invoked when this thread abruptly terminates
 due to an uncaught exception.
 &lt;p&gt;A thread can take full control of how it responds to uncaught
 exceptions by having its uncaught exception handler explicitly set.
 If no such handler is set then the thread&apos;s &lt;tt&gt;ThreadGroup&lt;/tt&gt;
 object acts as its handler.</description>
					<attribute name="@param">
						<description>eh the object to use as this thread&apos;s uncaught exception
 handler. If &lt;tt&gt;null&lt;/tt&gt; then this thread has no explicit handler.</description>
					</attribute>
					<attribute name="@throws">
						<description>SecurityException  if the current thread is not allowed to
          modify this thread.</description>
					</attribute>
					<attribute name="@see">
						<description>#setDefaultUncaughtExceptionHandler</description>
					</attribute>
					<attribute name="@see">
						<description>ThreadGroup#uncaughtException</description>
					</attribute>
					<attribute name="@since">
						<description>1.5</description>
					</attribute>
				</comment>
				<params>
					<param name="eh" comment="the object to use as this thread&apos;s uncaught exception
 handler. If &lt;tt&gt;null&lt;/tt&gt; then this thread has no explicit handler." fulltype="java.lang.Thread.UncaughtExceptionHandler" type="Thread.UncaughtExceptionHandler" />
				</params>
			</method>
			<method visibility="private" name="dispatchUncaughtException" fulltype="void" type="void">
				<comment>
					<description>Dispatch an uncaught exception to the handler. This method is
 intended to be called only by the JVM.</description>
				</comment>
				<params>
					<param name="e" fulltype="java.lang.Throwable" type="Throwable" />
				</params>
			</method>
			<method visibility="private" name="setPriority0" fulltype="void" type="void">
				<params>
					<param name="newPriority" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="private" name="stop0" fulltype="void" type="void">
				<params>
					<param name="o" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method visibility="private" name="suspend0" fulltype="void" type="void" />
			<method visibility="private" name="resume0" fulltype="void" type="void" />
			<method visibility="private" name="interrupt0" fulltype="void" type="void" />
		</methods>
		<jelclass final="true" superclass="Enum" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.Enum" fulltype="java.lang.Thread.State" type="Thread.State">
			<comment>
				<description>A thread state.  A thread can be in one of the following states:
 &lt;ul&gt;
 &lt;li&gt;{@link #NEW}&lt;br&gt;
     A thread that has not yet started is in this state.
     &lt;/li&gt;
 &lt;li&gt;{@link #RUNNABLE}&lt;br&gt;
     A thread executing in the Java virtual machine is in this state.
     &lt;/li&gt;
 &lt;li&gt;{@link #BLOCKED}&lt;br&gt;
     A thread that is blocked waiting for a monitor lock
     is in this state.
     &lt;/li&gt;
 &lt;li&gt;{@link #WAITING}&lt;br&gt;
     A thread that is waiting indefinitely for another thread to
     perform a particular action is in this state.
     &lt;/li&gt;
 &lt;li&gt;{@link #TIMED_WAITING}&lt;br&gt;
     A thread that is waiting for another thread to perform an action
     for up to a specified waiting time is in this state.
     &lt;/li&gt;
 &lt;li&gt;{@link #TERMINATED}&lt;br&gt;
     A thread that has exited is in this state.
     &lt;/li&gt;
 &lt;/ul&gt;

 &lt;p&gt;
 A thread can be in only one state at a given point in time.
 These states are virtual machine states which do not reflect
 any operating system thread states.</description>
				<attribute name="@since">
					<description>1.5</description>
				</attribute>
				<attribute name="@see">
					<description>#getState</description>
				</attribute>
			</comment>
			<fields>
				<field final="true" static="true" visibility="public" name="NEW" fulltype="java.lang.Thread.State" type="Thread.State">
					<comment>
						<description>Thread state for a thread which has not yet started.</description>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="RUNNABLE" fulltype="java.lang.Thread.State" type="Thread.State">
					<comment>
						<description>Thread state for a runnable thread.  A thread in the runnable
 state is executing in the Java virtual machine but it may
 be waiting for other resources from the operating system
 such as processor.</description>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="BLOCKED" fulltype="java.lang.Thread.State" type="Thread.State">
					<comment>
						<description>Thread state for a thread blocked waiting for a monitor lock.
 A thread in the blocked state is waiting for a monitor lock
 to enter a synchronized block/method or
 reenter a synchronized block/method after calling
 {@link Object#wait() Object.wait}.</description>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="WAITING" fulltype="java.lang.Thread.State" type="Thread.State">
					<comment>
						<description>Thread state for a waiting thread.
 A thread is in the waiting state due to calling one of the
 following methods:
 &lt;ul&gt;
   &lt;li&gt;{@link Object#wait() Object.wait} with no timeout&lt;/li&gt;
   &lt;li&gt;{@link #join() Thread.join} with no timeout&lt;/li&gt;
   &lt;li&gt;{@link LockSupport#park() LockSupport.park}&lt;/li&gt;
 &lt;/ul&gt;

 &lt;p&gt;A thread in the waiting state is waiting for another thread to
 perform a particular action.

 For example, a thread that has called &lt;tt&gt;Object.wait()&lt;/tt&gt;
 on an object is waiting for another thread to call
 &lt;tt&gt;Object.notify()&lt;/tt&gt; or &lt;tt&gt;Object.notifyAll()&lt;/tt&gt; on
 that object. A thread that has called &lt;tt&gt;Thread.join()&lt;/tt&gt;
 is waiting for a specified thread to terminate.</description>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="TIMED_WAITING" fulltype="java.lang.Thread.State" type="Thread.State">
					<comment>
						<description>Thread state for a waiting thread with a specified waiting time.
 A thread is in the timed waiting state due to calling one of
 the following methods with a specified positive waiting time:
 &lt;ul&gt;
   &lt;li&gt;{@link #sleep Thread.sleep}&lt;/li&gt;
   &lt;li&gt;{@link Object#wait(long) Object.wait} with timeout&lt;/li&gt;
   &lt;li&gt;{@link #join(long) Thread.join} with timeout&lt;/li&gt;
   &lt;li&gt;{@link LockSupport#parkNanos LockSupport.parkNanos}&lt;/li&gt;
   &lt;li&gt;{@link LockSupport#parkUntil LockSupport.parkUntil}&lt;/li&gt;
 &lt;/ul&gt;</description>
					</comment>
				</field>
				<field final="true" static="true" visibility="public" name="TERMINATED" fulltype="java.lang.Thread.State" type="Thread.State">
					<comment>
						<description>Thread state for a terminated thread.
 The thread has completed execution.</description>
					</comment>
				</field>
			</fields>
			<methods>
				<constructor visibility="private" name="Thread.State" />
				<method static="true" visibility="public" name="values" fulltype="java.lang.Thread.State[]" type="Thread.State" />
				<method static="true" visibility="public" name="valueOf" fulltype="java.lang.Thread.State" type="Thread.State">
					<params>
						<param name="name" fulltype="java.lang.String" type="String" />
					</params>
				</method>
			</methods>
		</jelclass>
		<jelclass abstract="true" visibility="public" package="java.lang" interface="true" fulltype="java.lang.Thread.UncaughtExceptionHandler" type="Thread.UncaughtExceptionHandler">
			<comment>
				<description>Interface for handlers invoked when a &lt;tt&gt;Thread&lt;/tt&gt; abruptly
 terminates due to an uncaught exception.
 &lt;p&gt;When a thread is about to terminate due to an uncaught exception
 the Java Virtual Machine will query the thread for its
 &lt;tt&gt;UncaughtExceptionHandler&lt;/tt&gt; using
 {@link #getUncaughtExceptionHandler} and will invoke the handler&apos;s
 &lt;tt&gt;uncaughtException&lt;/tt&gt; method, passing the thread and the
 exception as arguments.
 If a thread has not had its &lt;tt&gt;UncaughtExceptionHandler&lt;/tt&gt;
 explicitly set, then its &lt;tt&gt;ThreadGroup&lt;/tt&gt; object acts as its
 &lt;tt&gt;UncaughtExceptionHandler&lt;/tt&gt;. If the &lt;tt&gt;ThreadGroup&lt;/tt&gt; object
 has no
 special requirements for dealing with the exception, it can forward
 the invocation to the {@linkplain #getDefaultUncaughtExceptionHandler
 default uncaught exception handler}.</description>
				<attribute name="@see">
					<description>#setDefaultUncaughtExceptionHandler</description>
				</attribute>
				<attribute name="@see">
					<description>#setUncaughtExceptionHandler</description>
				</attribute>
				<attribute name="@see">
					<description>ThreadGroup#uncaughtException</description>
				</attribute>
				<attribute name="@since">
					<description>1.5</description>
				</attribute>
			</comment>
			<methods>
				<method visibility="public" name="uncaughtException" fulltype="void" type="void">
					<comment>
						<description>Method invoked when the given thread terminates due to the
 given uncaught exception.
 &lt;p&gt;Any exception thrown by this method will be ignored by the
 Java Virtual Machine.</description>
						<attribute name="@param">
							<description>t the thread</description>
						</attribute>
						<attribute name="@param">
							<description>e the exception</description>
						</attribute>
					</comment>
					<params>
						<param name="t" comment="the thread" fulltype="java.lang.Thread" type="Thread" />
						<param name="e" comment="the exception" fulltype="java.lang.Throwable" type="Throwable" />
					</params>
				</method>
			</methods>
		</jelclass>
	</jelclass>
	<jelclass final="true" superclass="Enum" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.Enum" fulltype="java.lang.Thread.State" type="Thread.State">
		<comment>
			<description>A thread state.  A thread can be in one of the following states:
 &lt;ul&gt;
 &lt;li&gt;{@link #NEW}&lt;br&gt;
     A thread that has not yet started is in this state.
     &lt;/li&gt;
 &lt;li&gt;{@link #RUNNABLE}&lt;br&gt;
     A thread executing in the Java virtual machine is in this state.
     &lt;/li&gt;
 &lt;li&gt;{@link #BLOCKED}&lt;br&gt;
     A thread that is blocked waiting for a monitor lock
     is in this state.
     &lt;/li&gt;
 &lt;li&gt;{@link #WAITING}&lt;br&gt;
     A thread that is waiting indefinitely for another thread to
     perform a particular action is in this state.
     &lt;/li&gt;
 &lt;li&gt;{@link #TIMED_WAITING}&lt;br&gt;
     A thread that is waiting for another thread to perform an action
     for up to a specified waiting time is in this state.
     &lt;/li&gt;
 &lt;li&gt;{@link #TERMINATED}&lt;br&gt;
     A thread that has exited is in this state.
     &lt;/li&gt;
 &lt;/ul&gt;

 &lt;p&gt;
 A thread can be in only one state at a given point in time.
 These states are virtual machine states which do not reflect
 any operating system thread states.</description>
			<attribute name="@since">
				<description>1.5</description>
			</attribute>
			<attribute name="@see">
				<description>#getState</description>
			</attribute>
		</comment>
		<fields>
			<field final="true" static="true" visibility="public" name="NEW" fulltype="java.lang.Thread.State" type="Thread.State">
				<comment>
					<description>Thread state for a thread which has not yet started.</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="RUNNABLE" fulltype="java.lang.Thread.State" type="Thread.State">
				<comment>
					<description>Thread state for a runnable thread.  A thread in the runnable
 state is executing in the Java virtual machine but it may
 be waiting for other resources from the operating system
 such as processor.</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="BLOCKED" fulltype="java.lang.Thread.State" type="Thread.State">
				<comment>
					<description>Thread state for a thread blocked waiting for a monitor lock.
 A thread in the blocked state is waiting for a monitor lock
 to enter a synchronized block/method or
 reenter a synchronized block/method after calling
 {@link Object#wait() Object.wait}.</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="WAITING" fulltype="java.lang.Thread.State" type="Thread.State">
				<comment>
					<description>Thread state for a waiting thread.
 A thread is in the waiting state due to calling one of the
 following methods:
 &lt;ul&gt;
   &lt;li&gt;{@link Object#wait() Object.wait} with no timeout&lt;/li&gt;
   &lt;li&gt;{@link #join() Thread.join} with no timeout&lt;/li&gt;
   &lt;li&gt;{@link LockSupport#park() LockSupport.park}&lt;/li&gt;
 &lt;/ul&gt;

 &lt;p&gt;A thread in the waiting state is waiting for another thread to
 perform a particular action.

 For example, a thread that has called &lt;tt&gt;Object.wait()&lt;/tt&gt;
 on an object is waiting for another thread to call
 &lt;tt&gt;Object.notify()&lt;/tt&gt; or &lt;tt&gt;Object.notifyAll()&lt;/tt&gt; on
 that object. A thread that has called &lt;tt&gt;Thread.join()&lt;/tt&gt;
 is waiting for a specified thread to terminate.</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="TIMED_WAITING" fulltype="java.lang.Thread.State" type="Thread.State">
				<comment>
					<description>Thread state for a waiting thread with a specified waiting time.
 A thread is in the timed waiting state due to calling one of
 the following methods with a specified positive waiting time:
 &lt;ul&gt;
   &lt;li&gt;{@link #sleep Thread.sleep}&lt;/li&gt;
   &lt;li&gt;{@link Object#wait(long) Object.wait} with timeout&lt;/li&gt;
   &lt;li&gt;{@link #join(long) Thread.join} with timeout&lt;/li&gt;
   &lt;li&gt;{@link LockSupport#parkNanos LockSupport.parkNanos}&lt;/li&gt;
   &lt;li&gt;{@link LockSupport#parkUntil LockSupport.parkUntil}&lt;/li&gt;
 &lt;/ul&gt;</description>
				</comment>
			</field>
			<field final="true" static="true" visibility="public" name="TERMINATED" fulltype="java.lang.Thread.State" type="Thread.State">
				<comment>
					<description>Thread state for a terminated thread.
 The thread has completed execution.</description>
				</comment>
			</field>
		</fields>
		<methods>
			<constructor visibility="private" name="Thread.State" />
			<method static="true" visibility="public" name="values" fulltype="java.lang.Thread.State[]" type="Thread.State" />
			<method static="true" visibility="public" name="valueOf" fulltype="java.lang.Thread.State" type="Thread.State">
				<params>
					<param name="name" fulltype="java.lang.String" type="String" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="java.lang" interface="true" fulltype="java.lang.Thread.UncaughtExceptionHandler" type="Thread.UncaughtExceptionHandler">
		<comment>
			<description>Interface for handlers invoked when a &lt;tt&gt;Thread&lt;/tt&gt; abruptly
 terminates due to an uncaught exception.
 &lt;p&gt;When a thread is about to terminate due to an uncaught exception
 the Java Virtual Machine will query the thread for its
 &lt;tt&gt;UncaughtExceptionHandler&lt;/tt&gt; using
 {@link #getUncaughtExceptionHandler} and will invoke the handler&apos;s
 &lt;tt&gt;uncaughtException&lt;/tt&gt; method, passing the thread and the
 exception as arguments.
 If a thread has not had its &lt;tt&gt;UncaughtExceptionHandler&lt;/tt&gt;
 explicitly set, then its &lt;tt&gt;ThreadGroup&lt;/tt&gt; object acts as its
 &lt;tt&gt;UncaughtExceptionHandler&lt;/tt&gt;. If the &lt;tt&gt;ThreadGroup&lt;/tt&gt; object
 has no
 special requirements for dealing with the exception, it can forward
 the invocation to the {@linkplain #getDefaultUncaughtExceptionHandler
 default uncaught exception handler}.</description>
			<attribute name="@see">
				<description>#setDefaultUncaughtExceptionHandler</description>
			</attribute>
			<attribute name="@see">
				<description>#setUncaughtExceptionHandler</description>
			</attribute>
			<attribute name="@see">
				<description>ThreadGroup#uncaughtException</description>
			</attribute>
			<attribute name="@since">
				<description>1.5</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="uncaughtException" fulltype="void" type="void">
				<comment>
					<description>Method invoked when the given thread terminates due to the
 given uncaught exception.
 &lt;p&gt;Any exception thrown by this method will be ignored by the
 Java Virtual Machine.</description>
					<attribute name="@param">
						<description>t the thread</description>
					</attribute>
					<attribute name="@param">
						<description>e the exception</description>
					</attribute>
				</comment>
				<params>
					<param name="t" comment="the thread" fulltype="java.lang.Thread" type="Thread" />
					<param name="e" comment="the exception" fulltype="java.lang.Throwable" type="Throwable" />
				</params>
			</method>
		</methods>
	</jelclass>
	<jelclass superclass="IndexOutOfBoundsException" visibility="public" package="java.lang" serializable="true" superclassfulltype="java.lang.IndexOutOfBoundsException" fulltype="java.lang.ArrayIndexOutOfBoundsException" type="ArrayIndexOutOfBoundsException">
		<comment>
			<description>Thrown to indicate that an array has been accessed with an
 illegal index. The index is either negative or greater than or
 equal to the size of the array.</description>
			<attribute name="@author">
				<description>unascribed</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.0</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="public" name="ArrayIndexOutOfBoundsException">
				<comment>
					<description>Constructs an &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; with no
 detail message.</description>
				</comment>
			</constructor>
			<constructor visibility="public" name="ArrayIndexOutOfBoundsException">
				<comment>
					<description>Constructs a new &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt;
 class with an argument indicating the illegal index.</description>
					<attribute name="@param">
						<description>index   the illegal index.</description>
					</attribute>
				</comment>
				<params>
					<param name="index" comment="the illegal index." fulltype="int" type="int" />
				</params>
			</constructor>
			<constructor visibility="public" name="ArrayIndexOutOfBoundsException">
				<comment>
					<description>Constructs an &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; class
 with the specified detail message.</description>
					<attribute name="@param">
						<description>s   the detail message.</description>
					</attribute>
				</comment>
				<params>
					<param name="s" comment="the detail message." fulltype="java.lang.String" type="String" />
				</params>
			</constructor>
		</methods>
	</jelclass>
	<jelclass abstract="true" visibility="public" package="java.lang" interface="true" fulltype="java.lang.CharSequence" type="CharSequence">
		<comment>
			<description>A &lt;tt&gt;CharSequence&lt;/tt&gt; is a readable sequence of &lt;code&gt;char&lt;/code&gt; values. This
 interface provides uniform, read-only access to many different kinds of
 &lt;code&gt;char&lt;/code&gt; sequences.
 A &lt;code&gt;char&lt;/code&gt; value represents a character in the &lt;i&gt;Basic
 Multilingual Plane (BMP)&lt;/i&gt; or a surrogate. Refer to &lt;a
 href=&quot;Character.html#unicode&quot;&gt;Unicode Character Representation&lt;/a&gt; for details.

 &lt;p&gt; This interface does not refine the general contracts of the {@link
 java.lang.Object#equals(java.lang.Object) equals} and {@link
 java.lang.Object#hashCode() hashCode} methods.  The result of comparing two
 objects that implement &lt;tt&gt;CharSequence&lt;/tt&gt; is therefore, in general,
 undefined.  Each object may be implemented by a different class, and there
 is no guarantee that each class will be capable of testing its instances
 for equality with those of the other.  It is therefore inappropriate to use
 arbitrary &lt;tt&gt;CharSequence&lt;/tt&gt; instances as elements in a set or as keys in
 a map. &lt;/p&gt;</description>
			<attribute name="@author">
				<description>Mike McCloskey</description>
			</attribute>
			<attribute name="@since">
				<description>1.4</description>
			</attribute>
			<attribute name="@spec">
				<description>JSR-51</description>
			</attribute>
		</comment>
		<methods>
			<method visibility="public" name="length" returncomment="the number of &lt;code&gt;char&lt;/code&gt;s in this sequence" fulltype="int" type="int">
				<comment>
					<description>Returns the length of this character sequence.  The length is the number
 of 16-bit &lt;code&gt;char&lt;/code&gt;s in the sequence.&lt;/p&gt;</description>
					<attribute name="@return">
						<description>the number of &lt;code&gt;char&lt;/code&gt;s in this sequence</description>
					</attribute>
				</comment>
			</method>
			<method visibility="public" name="charAt" returncomment="the specified &lt;code&gt;char&lt;/code&gt; value" fulltype="char" type="char">
				<comment>
					<description>Returns the &lt;code&gt;char&lt;/code&gt; value at the specified index.  An index ranges from zero
 to &lt;tt&gt;length() - 1&lt;/tt&gt;.  The first &lt;code&gt;char&lt;/code&gt; value of the sequence is at
 index zero, the next at index one, and so on, as for array
 indexing. &lt;/p&gt;

 &lt;p&gt;If the &lt;code&gt;char&lt;/code&gt; value specified by the index is a
 &lt;a href=&quot;Character.html#unicode&quot;&gt;surrogate&lt;/a&gt;, the surrogate
 value is returned.</description>
					<attribute name="@param">
						<description>index   the index of the &lt;code&gt;char&lt;/code&gt; value to be returned</description>
					</attribute>
					<attribute name="@return">
						<description>the specified &lt;code&gt;char&lt;/code&gt; value</description>
					</attribute>
					<attribute name="@throws">
						<description>IndexOutOfBoundsException
          if the &lt;tt&gt;index&lt;/tt&gt; argument is negative or not less than
          &lt;tt&gt;length()&lt;/tt&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="index" comment="the index of the &lt;code&gt;char&lt;/code&gt; value to be returned" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="subSequence" returncomment="the specified subsequence" fulltype="java.lang.CharSequence" type="CharSequence">
				<comment>
					<description>Returns a new &lt;code&gt;CharSequence&lt;/code&gt; that is a subsequence of this sequence.
 The subsequence starts with the &lt;code&gt;char&lt;/code&gt; value at the specified index and
 ends with the &lt;code&gt;char&lt;/code&gt; value at index &lt;tt&gt;end - 1&lt;/tt&gt;.  The length
 (in &lt;code&gt;char&lt;/code&gt;s) of the
 returned sequence is &lt;tt&gt;end - start&lt;/tt&gt;, so if &lt;tt&gt;start == end&lt;/tt&gt;
 then an empty sequence is returned. &lt;/p&gt;</description>
					<attribute name="@param">
						<description>start   the start index, inclusive</description>
					</attribute>
					<attribute name="@param">
						<description>end     the end index, exclusive</description>
					</attribute>
					<attribute name="@return">
						<description>the specified subsequence</description>
					</attribute>
					<attribute name="@throws">
						<description>IndexOutOfBoundsException
          if &lt;tt&gt;start&lt;/tt&gt; or &lt;tt&gt;end&lt;/tt&gt; are negative,
          if &lt;tt&gt;end&lt;/tt&gt; is greater than &lt;tt&gt;length()&lt;/tt&gt;,
          or if &lt;tt&gt;start&lt;/tt&gt; is greater than &lt;tt&gt;end&lt;/tt&gt;</description>
					</attribute>
				</comment>
				<params>
					<param name="start" comment="the start index, inclusive" fulltype="int" type="int" />
					<param name="end" comment="the end index, exclusive" fulltype="int" type="int" />
				</params>
			</method>
			<method visibility="public" name="toString" returncomment="a string consisting of exactly this sequence of characters" fulltype="java.lang.String" type="String">
				<comment>
					<description>Returns a string containing the characters in this sequence in the same
 order as this sequence.  The length of the string will be the length of
 this sequence. &lt;/p&gt;</description>
					<attribute name="@return">
						<description>a string consisting of exactly this sequence of characters</description>
					</attribute>
				</comment>
			</method>
		</methods>
	</jelclass>
	<jelclass final="true" superclass="Object" visibility="public" package="java.lang" superclassfulltype="java.lang.Object" fulltype="java.lang.Compiler" type="Compiler">
		<comment>
			<description>The {@code Compiler} class is provided to support Java-to-native-code
 compilers and related services. By design, the {@code Compiler} class does
 nothing; it serves as a placeholder for a JIT compiler implementation.

 &lt;p&gt; When the Java Virtual Machine first starts, it determines if the system
 property {@code java.compiler} exists. (System properties are accessible
 through {@link System#getProperty(String)} and {@link
 System#getProperty(String, String)}.  If so, it is assumed to be the name of
 a library (with a platform-dependent exact location and type); {@link
 System#loadLibrary} is called to load that library. If this loading
 succeeds, the function named {@code java_lang_Compiler_start()} in that
 library is called.

 &lt;p&gt; If no compiler is available, these methods do nothing.</description>
			<attribute name="@author">
				<description>Frank Yellin</description>
			</attribute>
			<attribute name="@since">
				<description>JDK1.0</description>
			</attribute>
		</comment>
		<methods>
			<constructor visibility="private" name="Compiler" />
			<method static="true" visibility="private" name="initialize" fulltype="void" type="void" />
			<method static="true" visibility="private" name="registerNatives" fulltype="void" type="void" />
			<method static="true" visibility="public" name="compileClass" returncomment="{@code true} if the compilation succeeded; {@code false} if the
          compilation failed or no compiler is available" fulltype="boolean" type="boolean">
				<comment>
					<description>Compiles the specified class.</description>
					<attribute name="@param">
						<description>clazz
         A class</description>
					</attribute>
					<attribute name="@return">
						<description>{@code true} if the compilation succeeded; {@code false} if the
          compilation failed or no compiler is available</description>
					</attribute>
					<attribute name="@throws">
						<description>NullPointerException
          If {@code clazz} is {@code null}</description>
					</attribute>
				</comment>
				<params>
					<param name="clazz" comment="A class" fulltype="java.lang.Class" type="Class" />
				</params>
			</method>
			<method static="true" visibility="public" name="compileClasses" returncomment="{@code true} if the compilation succeeded; {@code false} if the
          compilation failed or no compiler is available" fulltype="boolean" type="boolean">
				<comment>
					<description>Compiles all classes whose name matches the specified string.</description>
					<attribute name="@param">
						<description>string
         The name of the classes to compile</description>
					</attribute>
					<attribute name="@return">
						<description>{@code true} if the compilation succeeded; {@code false} if the
          compilation failed or no compiler is available</description>
					</attribute>
					<attribute name="@throws">
						<description>NullPointerException
          If {@code string} is {@code null}</description>
					</attribute>
				</comment>
				<params>
					<param name="string" comment="The name of the classes to compile" fulltype="java.lang.String" type="String" />
				</params>
			</method>
			<method static="true" visibility="public" name="command" returncomment="A compiler-specific value, or {@code null} if no compiler is
          available" fulltype="java.lang.Object" type="Object">
				<comment>
					<description>Examines the argument type and its fields and perform some documented
 operation.  No specific operations are required.</description>
					<attribute name="@param">
						<description>any
         An argument</description>
					</attribute>
					<attribute name="@return">
						<description>A compiler-specific value, or {@code null} if no compiler is
          available</description>
					</attribute>
					<attribute name="@throws">
						<description>NullPointerException
          If {@code any} is {@code null}</description>
					</attribute>
				</comment>
				<params>
					<param name="any" comment="An argument" fulltype="java.lang.Object" type="Object" />
				</params>
			</method>
			<method static="true" visibility="public" name="enable" fulltype="void" type="void">
				<comment>
					<description>Cause the Compiler to resume operation.</description>
				</comment>
			</method>
			<method static="true" visibility="public" name="disable" fulltype="void" type="void">
				<comment>
					<description>Cause the Compiler to cease operation.</description>
				</comment>
			</method>
		</methods>
	</jelclass>
</jel>
