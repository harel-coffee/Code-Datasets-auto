13	read	b	destination buffer
13	read	off	offset at which to start storing bytes
13	read	len	maximum number of bytes to read
16	mark	readlimit	the maximum limit of bytes that can be read before the mark position becomes invalid
26	write	c	int specifying a character to be written
27	write	buf	Array of characters
27	write	off	Offset from which to start writing characters
27	write	len	Number of characters to write
28	write	buf	Array of characters to be written
29	write	s	A String
29	write	off	Offset from which to start writing characters
29	write	len	Number of characters to write
30	write	s	String to be written
31	print	b	The boolean to be printed
32	print	c	The char to be printed
33	print	i	The int to be printed
34	print	l	The long to be printed
35	print	f	The float to be printed
36	print	d	The double to be printed
37	print	s	The array of chars to be printed
38	print	s	The String to be printed
39	print	obj	The Object to be printed
41	println	x	the boolean value to be printed
42	println	x	the char value to be printed
43	println	x	the int value to be printed
44	println	x	the long value to be printed
45	println	x	the float value to be printed
46	println	x	the double value to be printed
47	println	x	the array of char values to be printed
48	println	x	the String value to be printed
49	println	x	The Object to be printed
50	printf	format	A format string as described in a href
50	printf	args	Arguments referenced by the format specifiers in the format string
51	printf	l	The linkplain java
51	printf	format	A format string as described in a href
51	printf	args	Arguments referenced by the format specifiers in the format string
52	format	format	A format string as described in a href
52	format	args	Arguments referenced by the format specifiers in the format string
53	format	l	The linkplain java
53	format	format	A format string as described in a href
53	format	args	Arguments referenced by the format specifiers in the format string
54	append	csq	The character sequence to append
55	append	csq	The character sequence from which a subsequence will be appended
55	append	start	The index of the first character in the subsequence
55	append	end	The index of the character following the last character in the subsequence
56	append	c	The bit character to append
58	lookup	cl	class for which to get the descriptor
59	lookupAny	cl	class for which to get the descriptor
64	getField	name	the name of the data field to look for
66	lookup	cl	class to look up
66	lookup	all	if true return descriptors for all classes if false only return descriptors for serializable classes
155	write	b	the byte
156	write	b	the data
157	write	b	the data
157	write	off	the start offset in the data
157	write	len	the number of bytes to write
160	init	mask	the actions mask to use
161	implies	p	the permission to check against
162	impliesIgnoreMask	that	the FilePermission to check against
162	impliesIgnoreMask	exact	return immediately if the masks are not equal
163	equals	obj	the object we are testing for equality with this object
165	getMask	action	the action string
172	add	permission	the Permission object to add
173	implies	p	the Permission object to compare
177	read	b	the buffer into which the data is read
177	read	off	the start offset of the data
177	read	len	the maximum number of bytes read
178	skip	n	the number of bytes to be skipped
181	connect	snk	the piped input stream to connect to
182	write	b	the byte to be written
183	write	b	the data
183	write	off	the start offset in the data
183	write	len	the number of bytes to write
188	read	b	the buffer into which the data is read
189	read	b	the buffer into which the data is read
189	read	off	the start offset of the data
189	read	len	the maximum number of bytes read
190	skip	n	the number of bytes to be skipped
197	read	cbuf	Destination buffer
197	read	off	Offset at which to start storing characters
197	read	len	Maximum number of characters to read
198	readLine	ignoreLF	If true the next 'n' will be skipped
200	skip	n	The number of characters to skip
203	mark	readAheadLimit	Limit on the number of characters that may be read while still preserving the mark
206	read	b	the buffer into which the data is read
206	read	off	the start offset of the data
206	read	len	the maximum number of bytes read
207	skip	n	the number of bytes to be skipped
208	setLineNumber	lineNumber	the new line number
211	mark	readlimit	the maximum limit of bytes that can be read before the mark position becomes invalid
215	read	cbuf	Destination buffer
215	read	off	Offset at which to start writing characters
215	read	len	Maximum number of characters to read
216	unread	c	The int value representing a character to be pushed back
217	unread	cbuf	Character array
217	unread	off	Offset of first character to push back
217	unread	len	Number of characters to push back
218	unread	cbuf	Character array to push back
224	skip	n	The number of characters to skip
225	accept	dir	the directory in which the file was found
225	accept	name	the name of the file
226	write	b	the byte to be written
227	write	b	the data
227	write	off	the start offset in the data
227	write	len	the number of bytes to write
228	writeTo	out	the output stream to which to write the data
233	toString	charsetName	the name of a supported linkplain java
234	toString	hibyte	the high byte of each resulting Unicode character
265	write	cbuf	Buffer of characters to be written
265	write	off	Offset from which to start reading characters
265	write	len	Number of characters to be written
266	write	str	String to be written
266	write	off	Offset from which to start reading characters
266	write	len	Number of characters to be written
269	read	b	the buffer into which the data is read
269	read	off	the start offset in the destination array b
269	read	len	the maximum number of bytes read
270	skip	n	the number of bytes to be skipped
276	write	b	the byte to be written
277	write	b	the data
278	write	b	the data
278	write	off	the start offset in the data
278	write	len	the number of bytes to write
279	writeBoolean	v	the boolean to be written
280	writeByte	v	the byte value to be written
281	writeShort	v	the short value to be written
282	writeChar	v	the char value to be written
283	writeInt	v	the int value to be written
284	writeLong	v	the long value to be written
285	writeFloat	v	the float value to be written
286	writeDouble	v	the double value to be written
287	writeBytes	s	the string of bytes to be written
288	writeChars	s	the string value to be written
289	writeUTF	s	the string value to be written
290	write	c	int specifying a character to be written
291	write	cbuf	Array of characters to be written
292	write	cbuf	Array of characters
292	write	off	Offset from which to start writing characters
292	write	len	Number of characters to write
293	write	str	String to be written
294	write	str	A String
294	write	off	Offset from which to start writing characters
294	write	len	Number of characters to write
295	append	csq	The character sequence to append
296	append	csq	The character sequence from which a subsequence will be appended
296	append	start	The index of the first character in the subsequence
296	append	end	The index of the character following the last character in the subsequence
297	append	c	The bit character to append
301	write	b	the byte to be written
302	write	b	the data
302	write	off	the start offset in the data
302	write	len	the number of bytes to write
304	writeBoolean	v	a boolean value to be written
305	writeByte	v	a byte value to be written
306	writeShort	v	a short to be written
307	writeChar	v	a char value to be written
308	writeInt	v	an int to be written
309	writeLong	v	a long to be written
310	writeFloat	v	a float value to be written
311	writeDouble	v	a double value to be written
312	writeBytes	s	a string of bytes to be written
313	writeChars	s	a String value to be written
314	writeUTF	str	a string to be written
315	writeUTF	str	a string to be written
315	writeUTF	out	destination to write to
317	writeObject	obj	the object to be written
318	write	b	the byte
319	write	b	the data to be written
320	write	b	the data to be written
320	write	off	the start offset in the data
320	write	len	the number of bytes that are written
327	write	cbuf	A character array
327	write	off	Offset from which to start reading characters
327	write	len	Number of characters to write
328	write	s	String to be written
328	write	off	Offset from which to start reading characters
328	write	len	Number of characters to be written
331	connect	src	The piped writer to connect to
336	read	cbuf	the buffer into which the data is read
336	read	off	the start offset of the data
336	read	len	the maximum number of characters read
340	read	target	the buffer to read characters into
342	read	cbuf	Destination buffer
343	read	cbuf	Destination buffer
343	read	off	Offset at which to start storing characters
343	read	len	Maximum number of characters to read
344	skip	n	The number of characters to skip
347	mark	readAheadLimit	Limit on the number of characters that may be read while still preserving the mark
352	write	c	the data to be written
352	write	off	the start offset in the data
352	write	len	the number of chars that are written
353	write	str	String to be written from
353	write	off	Offset from which to start reading characters
353	write	len	Number of characters to be written
354	writeTo	out	the output stream to write to
355	append	csq	The character sequence to append
356	append	csq	The character sequence from which a subsequence will be appended
356	append	start	The index of the first character in the subsequence
356	append	end	The index of the character following the last character in the subsequence
357	append	c	The bit character to append
370	write	b	The byte to be written
371	write	buf	A byte array
371	write	off	Offset from which to start taking bytes
371	write	len	Number of bytes to write
372	print	b	The boolean to be printed
373	print	c	The char to be printed
374	print	i	The int to be printed
375	print	l	The long to be printed
376	print	f	The float to be printed
377	print	d	The double to be printed
378	print	s	The array of chars to be printed
379	print	s	The String to be printed
380	print	obj	The Object to be printed
382	println	x	The boolean to be printed
383	println	x	The char to be printed
384	println	x	The int to be printed
385	println	x	a The long to be printed
386	println	x	The float to be printed
387	println	x	The double to be printed
388	println	x	an array of chars to print
389	println	x	The String to be printed
390	println	x	The Object to be printed
391	printf	format	A format string as described in a href
391	printf	args	Arguments referenced by the format specifiers in the format string
392	printf	l	The linkplain java
392	printf	format	A format string as described in a href
392	printf	args	Arguments referenced by the format specifiers in the format string
393	format	format	A format string as described in a href
393	format	args	Arguments referenced by the format specifiers in the format string
394	format	l	The linkplain java
394	format	format	A format string as described in a href
394	format	args	Arguments referenced by the format specifiers in the format string
395	append	csq	The character sequence to append
396	append	csq	The character sequence from which a subsequence will be appended
396	append	start	The index of the first character in the subsequence
396	append	end	The index of the character following the last character in the subsequence
397	append	c	The bit character to append
400	read	cbuf	Destination buffer
400	read	off	Offset at which to start writing characters
400	read	len	Maximum number of characters to read
404	mark	readAheadLimit	Limit on the number of characters that may be read while still preserving the mark
407	write	b	the byte
408	write	b	the data to be written
409	write	b	the data
409	write	off	the start offset in the data
409	write	len	the number of bytes to write
413	read	b	the buffer into which the data is read
414	read	b	the buffer into which the data is read
414	read	off	the start offset in the destination array b
414	read	len	the maximum number of bytes read
418	mark	readlimit	the maximum limit of bytes that can be read before the mark position becomes invalid
424	write	cbuf	Buffer of characters
424	write	off	Offset from which to start writing characters
424	write	len	Number of characters to write
425	write	str	A String
425	write	off	Offset from which to start writing characters
425	write	len	Number of characters to write
427	readFully	b	the buffer into which the data is read
428	readFully	b	the buffer into which the data is read
428	readFully	off	an int specifying the offset into the data
428	readFully	len	an int specifying the number of bytes to read
429	skipBytes	n	the number of bytes to be skipped
442	writeExternal	out	the stream to write the object to
443	readExternal	in	the stream to read data from in order to restore the object
449	setOffset	offset	the offset of the field
456	connect	snk	the piped reader to connect to
457	write	c	the char to be written
458	write	cbuf	the data
458	write	off	the start offset in the data
458	write	len	the number of characters to write
461	open	name	the name of the file
463	readBytes	b	the data to be written
463	readBytes	off	the start offset in the data
463	readBytes	len	the number of bytes that are written
464	read	b	the buffer into which the data is read
465	read	b	the buffer into which the data is read
465	read	off	the start offset in the destination array b
465	read	len	the maximum number of bytes read
466	skip	n	the number of bytes to be skipped
475	read	b	the buffer into which the data is read
475	read	off	the start offset in array b at which the data is written
475	read	len	the maximum number of bytes read
479	format	fmt	A format string as described in a href
479	format	args	Arguments referenced by the format specifiers in the format string
480	printf	format	A format string as described in a href
480	printf	args	Arguments referenced by the format specifiers in the format string
481	readLine	fmt	A format string as described in a href
481	readLine	args	Arguments referenced by the format specifiers in the format string
483	readPassword	fmt	A format string as described in a href
483	readPassword	args	Arguments referenced by the format specifiers in the format string
487	wordChars	low	the low end of the range
487	wordChars	hi	the high end of the range
488	whitespaceChars	low	the low end of the range
488	whitespaceChars	hi	the high end of the range
489	ordinaryChars	low	the low end of the range
489	ordinaryChars	hi	the high end of the range
490	ordinaryChar	ch	the character
491	commentChar	ch	the character
492	quoteChar	ch	the character
494	eolIsSignificant	flag	true indicates that endofline characters are separate tokens false indicates that endofline characters are white space
495	slashStarComments	flag	true indicates to recognize and ignore Cstyle comments
496	slashSlashComments	flag	true indicates to recognize and ignore Cstyle comments
497	lowerCaseMode	fl	true indicates that all word tokens should be lowercased
505	read	b	Destination buffer
505	read	off	Offset at which to start storing characters
505	read	len	Maximum number of characters to read
506	skip	n	The number of characters to skip
509	mark	readAheadLimit	Limit on the number of characters that may be read while still preserving the mark
514	open	name	the name of the file
514	open	mode	the mode flags a combination of the O_ constants defined above
516	readBytes	b	the buffer into which the data is read
516	readBytes	off	the start offset of the data
516	readBytes	len	the number of bytes to read
517	read	b	the buffer into which the data is read
517	read	off	the start offset in array b at which the data is written
517	read	len	the maximum number of bytes read
518	read	b	the buffer into which the data is read
519	readFully	b	the buffer into which the data is read
520	readFully	b	the buffer into which the data is read
520	readFully	off	the start offset of the data
520	readFully	len	the number of bytes to read
521	skipBytes	n	the number of bytes to be skipped
522	write	b	the byte to be written
523	writeBytes	b	the data to be written
523	writeBytes	off	the start offset in the data
523	writeBytes	len	the number of bytes that are written
524	write	b	the data
525	write	b	the data
525	write	off	the start offset in the data
525	write	len	the number of bytes to write
527	seek	pos	the offset position measured in bytes from the beginning of the file at which to set the file pointer
529	setLength	newLength	The desired length of the file
543	writeBoolean	v	a boolean value to be written
544	writeByte	v	a byte value to be written
545	writeShort	v	a short to be written
546	writeChar	v	a char value to be written
547	writeInt	v	an int to be written
548	writeLong	v	a long to be written
549	writeFloat	v	a float value to be written
550	writeDouble	v	a double value to be written
551	writeBytes	s	a string of bytes to be written
552	writeChars	s	a String value to be written
553	writeUTF	str	a string to be written
554	read	b	the buffer into which the data is read
555	read	b	the buffer into which the data is read
555	read	off	the start offset in the destination array b
555	read	len	the maximum number of bytes read
556	readFully	b	the buffer into which the data is read
557	readFully	b	the buffer into which the data is read
557	readFully	off	the start offset of the data
557	readFully	len	the number of bytes to read
558	skipBytes	n	the number of bytes to be skipped
571	readUTF	in	a data input stream
572	setLineNumber	lineNumber	An int specifying the line number
575	read	cbuf	Destination buffer
575	read	off	Offset at which to start storing characters
575	read	len	Maximum number of characters to read
577	skip	n	The number of characters to skip
578	mark	readAheadLimit	Limit on the number of characters that may be read while still preserving the mark
580	open	name	name of file to be opened
581	openAppend	name	name of file to be opened
582	write	b	the byte to be written
583	writeBytes	b	the data to be written
583	writeBytes	off	the start offset in the data
583	writeBytes	len	the number of bytes that are written
584	write	b	the data
585	write	b	the data
585	write	off	the start offset in the data
585	write	len	the number of bytes to write
591	read	b	the buffer into which the data is read
592	read	b	the buffer into which the data is read
592	read	off	the start offset in array b at which the data is written
592	read	len	the maximum number of bytes to read
593	skip	n	the number of bytes to be skipped
596	mark	readlimit	the maximum limit of bytes that can be read before the mark position becomes invalid
600	write	b	the byte to be written
601	write	b	the data
601	write	off	the start offset in the data
601	write	len	the number of bytes to write
605	read	cbuf	Destination buffer
605	read	offset	Offset at which to start storing characters
605	read	length	Maximum number of characters to read
607	connect	src	The piped output stream to connect to
608	receive	b	the byte being received
609	receive	b	the buffer into which the data is received
609	receive	off	the start offset of the data
609	receive	len	the maximum number of bytes received
612	read	b	the buffer into which the data is read
612	read	off	the start offset in the destination array b
612	read	len	the maximum number of bytes read
616	write	cbuf	Array of characters
616	write	off	Offset from which to start writing characters
616	write	len	Number of characters to write
618	write	str	String to be written
618	write	off	Offset from which to start writing characters
618	write	len	Number of characters to write
619	append	csq	The character sequence to append
620	append	csq	The character sequence from which a subsequence will be appended
620	append	start	The index of the first character in the subsequence
620	append	end	The index of the character following the last character in the subsequence
621	append	c	The bit character to append
628	read	b	the buffer into which the data is read
628	read	off	the start offset in the destination array b
628	read	len	the maximum number of bytes read
629	unread	b	the int value whose loworder byte is to be pushed back
630	unread	b	the byte array to push back
630	unread	off	the start offset of the data
630	unread	len	the number of bytes to push back
631	unread	b	the byte array to push back
633	skip	n	inheritDoc
635	mark	readlimit	the maximum limit of bytes that can be read before the mark position becomes invalid
638	useProtocolVersion	version	use ProtocolVersion from java
640	writeObjectOverride	obj	object to be written to the underlying stream
641	writeUnshared	obj	object to write to stream
646	annotateClass	cl	the class to annotate custom data for
647	annotateProxyClass	cl	the proxy class to annotate custom data for
648	replaceObject	obj	the object to be replaced
649	enableReplaceObject	enable	boolean parameter to enable replacement of objects
651	writeClassDescriptor	desc	class descriptor to write to the stream
652	write	val	the byte to be written to the stream
653	write	buf	the data to be written
654	write	buf	the data to be written
654	write	off	the start offset in the data
654	write	len	the number of bytes that are written
658	writeBoolean	val	the boolean to be written
659	writeByte	val	the byte value to be written
660	writeShort	val	the short value to be written
661	writeChar	val	the char value to be written
662	writeInt	val	the integer value to be written
663	writeLong	val	the long value to be written
664	writeFloat	val	the float value to be written
665	writeDouble	val	the double value to be written
666	writeBytes	str	the String of bytes to be written
667	writeChars	str	the String of chars to be written
668	writeUTF	str	the String to be written
691	put	name	the name of the serializable field
691	put	val	the value to assign to the field
692	put	name	the name of the serializable field
692	put	val	the value to assign to the field
693	put	name	the name of the serializable field
693	put	val	the value to assign to the field
694	put	name	the name of the serializable field
694	put	val	the value to assign to the field
695	put	name	the name of the serializable field
695	put	val	the value to assign to the field
696	put	name	the name of the serializable field
696	put	val	the value to assign to the field
697	put	name	the name of the serializable field
697	put	val	the value to assign to the field
698	put	name	the name of the serializable field
698	put	val	the value to assign to the field
699	put	name	the name of the serializable field
699	put	val	the value to assign to the field which may be null
700	write	out	the stream to write the data and fields to
730	put	name	the name of the serializable field
730	put	val	the value to assign to the field
731	put	name	the name of the serializable field
731	put	val	the value to assign to the field
732	put	name	the name of the serializable field
732	put	val	the value to assign to the field
733	put	name	the name of the serializable field
733	put	val	the value to assign to the field
734	put	name	the name of the serializable field
734	put	val	the value to assign to the field
735	put	name	the name of the serializable field
735	put	val	the value to assign to the field
736	put	name	the name of the serializable field
736	put	val	the value to assign to the field
737	put	name	the name of the serializable field
737	put	val	the value to assign to the field
738	put	name	the name of the serializable field
738	put	val	the value to assign to the field which may be null
739	write	out	the stream to write the data and fields to
769	put	name	the name of the serializable field
769	put	val	the value to assign to the field
770	put	name	the name of the serializable field
770	put	val	the value to assign to the field
771	put	name	the name of the serializable field
771	put	val	the value to assign to the field
772	put	name	the name of the serializable field
772	put	val	the value to assign to the field
773	put	name	the name of the serializable field
773	put	val	the value to assign to the field
774	put	name	the name of the serializable field
774	put	val	the value to assign to the field
775	put	name	the name of the serializable field
775	put	val	the value to assign to the field
776	put	name	the name of the serializable field
776	put	val	the value to assign to the field
777	put	name	the name of the serializable field
777	put	val	the value to assign to the field which may be null
778	write	out	the stream to write the data and fields to
813	registerValidation	obj	the object to receive the validation callback
813	registerValidation	prio	controls the order of callbackszero is a good default
814	resolveClass	desc	an instance of class ObjectStreamClass
815	resolveProxyClass	interfaces	the list of interface names that were deserialized in the proxy class descriptor
816	resolveObject	obj	object to be substituted
817	enableResolveObject	enable	true for enabling use of resolveObject for every object being deserialized
821	read	buf	the buffer into which the data is read
821	read	off	the start offset of the data
821	read	len	the maximum number of bytes read
834	readFully	buf	the buffer into which the data is read
835	readFully	buf	the buffer into which the data is read
835	readFully	off	the start offset of the data
835	readFully	len	the maximum number of bytes to read
836	skipBytes	len	the number of bytes to be skipped
866	defaulted	name	the name of the field
867	get	name	the name of the field
867	get	val	the default value to use if name does not have a value
868	get	name	the name of the field
868	get	val	the default value to use if name does not have a value
869	get	name	the name of the field
869	get	val	the default value to use if name does not have a value
870	get	name	the name of the field
870	get	val	the default value to use if name does not have a value
871	get	name	the name of the field
871	get	val	the default value to use if name does not have a value
872	get	name	the name of the field
872	get	val	the default value to use if name does not have a value
873	get	name	the name of the field
873	get	val	the default value to use if name does not have a value
874	get	name	the name of the field
874	get	val	the default value to use if name does not have a value
875	get	name	the name of the field
875	get	val	the default value to use if name does not have a value
906	defaulted	name	the name of the field
907	get	name	the name of the field
907	get	val	the default value to use if name does not have a value
908	get	name	the name of the field
908	get	val	the default value to use if name does not have a value
909	get	name	the name of the field
909	get	val	the default value to use if name does not have a value
910	get	name	the name of the field
910	get	val	the default value to use if name does not have a value
911	get	name	the name of the field
911	get	val	the default value to use if name does not have a value
912	get	name	the name of the field
912	get	val	the default value to use if name does not have a value
913	get	name	the name of the field
913	get	val	the default value to use if name does not have a value
914	get	name	the name of the field
914	get	val	the default value to use if name does not have a value
915	get	name	the name of the field
915	get	val	the default value to use if name does not have a value
946	defaulted	name	the name of the field
947	get	name	the name of the field
947	get	val	the default value to use if name does not have a value
948	get	name	the name of the field
948	get	val	the default value to use if name does not have a value
949	get	name	the name of the field
949	get	val	the default value to use if name does not have a value
950	get	name	the name of the field
950	get	val	the default value to use if name does not have a value
951	get	name	the name of the field
951	get	val	the default value to use if name does not have a value
952	get	name	the name of the field
952	get	val	the default value to use if name does not have a value
953	get	name	the name of the field
953	get	val	the default value to use if name does not have a value
954	get	name	the name of the field
954	get	val	the default value to use if name does not have a value
955	get	name	the name of the field
955	get	val	the default value to use if name does not have a value
1009	list	filter	A filename filter
1011	listFiles	filter	A filename filter
1012	listFiles	filter	A file filter
1015	renameTo	dest	The new abstract pathname for the named file
1016	setLastModified	time	The new lastmodified time measured in milliseconds since the epoch GMT January 
1018	setWritable	writable	If true sets the access permission to allow write operations if false to disallow write operations
1018	setWritable	ownerOnly	If true the write permission applies only to the owner's write permission otherwise it applies to everybody
1019	setWritable	writable	If true sets the access permission to allow write operations if false to disallow write operations
1020	setReadable	readable	If true sets the access permission to allow read operations if false to disallow read operations
1020	setReadable	ownerOnly	If true the read permission applies only to the owner's read permission otherwise it applies to everybody
1021	setReadable	readable	If true sets the access permission to allow read operations if false to disallow read operations
1022	setExecutable	executable	If true sets the access permission to allow execute operations if false to disallow execute operations
1022	setExecutable	ownerOnly	If true the execute permission applies only to the owner's execute permission otherwise it applies to everybody
1023	setExecutable	executable	If true sets the access permission to allow execute operations if false to disallow execute operations
1029	createTempFile	prefix	The prefix string to be used in generating the file's name must be at least three characters long
1029	createTempFile	suffix	The suffix string to be used in generating the file's name may be null in which case the suffix 
1029	createTempFile	directory	The directory in which the file is to be created or null if the default temporaryfile directory is to be used
1030	createTempFile	prefix	The prefix string to be used in generating the file's name must be at least three characters long
1030	createTempFile	suffix	The suffix string to be used in generating the file's name may be null in which case the suffix 
1031	compareTo	pathname	The abstract pathname to be compared to this abstract pathname
1032	equals	obj	The object to be compared with this abstract pathname
1037	accept	pathname	The abstract pathname to be tested
1038	valueOf	unscaledVal	unscaled value of the code BigDecimal
1038	valueOf	scale	scale of the code BigDecimal
1039	valueOf	val	value of the code BigDecimal
1040	valueOf	val	code double to convert to a code BigDecimal
1041	add	augend	value to be added to this code BigDecimal
1042	add	augend	value to be added to this code BigDecimal
1042	add	mc	the context to use
1044	subtract	subtrahend	value to be subtracted from this code BigDecimal
1045	subtract	subtrahend	value to be subtracted from this code BigDecimal
1045	subtract	mc	the context to use
1046	multiply	multiplicand	value to be multiplied by this code BigDecimal
1047	multiply	multiplicand	value to be multiplied by this code BigDecimal
1047	multiply	mc	the context to use
1048	divide	divisor	value by which this code BigDecimal is to be divided
1048	divide	scale	scale of the code BigDecimal quotient to be returned
1048	divide	roundingMode	rounding mode to apply
1050	divide	divisor	value by which this code BigDecimal is to be divided
1050	divide	scale	scale of the code BigDecimal quotient to be returned
1050	divide	roundingMode	rounding mode to apply
1051	divide	divisor	value by which this code BigDecimal is to be divided
1051	divide	roundingMode	rounding mode to apply
1052	divide	divisor	value by which this code BigDecimal is to be divided
1052	divide	roundingMode	rounding mode to apply
1053	divide	divisor	value by which this code BigDecimal is to be divided
1054	divide	divisor	value by which this code BigDecimal is to be divided
1054	divide	mc	the context to use
1055	divideToIntegralValue	divisor	value by which this code BigDecimal is to be divided
1056	divideToIntegralValue	divisor	value by which this code BigDecimal is to be divided
1056	divideToIntegralValue	mc	the context to use
1057	remainder	divisor	value by which this code BigDecimal is to be divided
1058	remainder	divisor	value by which this code BigDecimal is to be divided
1058	remainder	mc	the context to use
1059	divideAndRemainder	divisor	value by which this code BigDecimal is to be divided and the remainder computed
1060	divideAndRemainder	divisor	value by which this code BigDecimal is to be divided and the remainder computed
1060	divideAndRemainder	mc	the context to use
1061	pow	n	power to raise this code BigDecimal to
1062	pow	n	power to raise this code BigDecimal to
1062	pow	mc	the context to use
1064	abs	mc	the context to use
1066	negate	mc	the context to use
1068	plus	mc	the context to use
1073	round	mc	the context to use
1074	setScale	newScale	scale of the code BigDecimal value to be returned
1074	setScale	roundingMode	The rounding mode to apply
1075	setScale	newScale	scale of the code BigDecimal value to be returned
1075	setScale	roundingMode	The rounding mode to apply
1076	setScale	newScale	scale of the code BigDecimal value to be returned
1077	movePointLeft	n	number of places to move the decimal point to the left
1078	movePointRight	n	number of places to move the decimal point to the right
1081	compareTo	val	code BigDecimal to which this code BigDecimal is to be compared
1083	equals	x	code Object to which this code BigDecimal is to be compared
1084	min	val	value with which the minimum is to be computed
1085	max	val	value with which the maximum is to be computed
1101	layoutChars	sci	code true for Scientific exponential notation code false for Engineering
1102	bigTenToThe	n	the power of ten to be returned 
1103	expandBigIntegerTenPowers	n	the power of ten to be returned 
1107	matchScale	val	array of two elements referring to the two code BigDecimals to be aligned
1108	readObject	s	the stream being read
1109	writeObject	s	the stream to serialize to
1110	longDigitLength	x	the code long
1111	bigDigitLength	b	the BigInteger
1113	checkScale	val	The new scale
1114	roundOp	mc	the context to use
1115	roundThis	mc	the context to use
1116	doRound	mc	the context to use
1119	putIntCompact	intCompact	the number to put into the cmpCharArray
1120	putIntCompact	intCompact	the number to put into the cmpCharArray
1121	putIntCompact	intCompact	the number to put into the cmpCharArray
1124	equals	x	code Object to which this code MathContext is to be compared
1127	readObject	s	the stream being read
1180	probablePrime	bitLength	bitLength of the returned BigInteger
1180	probablePrime	rnd	source of random bits used to select candidates to be tested for primality
1184	primeToCertainty	certainty	a measure of the uncertainty that the caller is willing to tolerate if the call returns code true the probability that this BigInteger is prime exceeds code certainty
1188	valueOf	val	value of the BigInteger to return
1190	add	val	value to be added to this BigInteger
1192	subtract	val	value to be subtracted from this BigInteger
1194	multiply	val	value to be multiplied by this BigInteger
1199	divide	val	value by which this BigInteger is to be divided
1200	divideAndRemainder	val	value by which this BigInteger is to be divided and the remainder computed
1201	remainder	val	value by which this BigInteger is to be divided and the remainder computed
1202	pow	exponent	exponent to which this BigInteger is to be raised
1203	gcd	val	value with which the GCD is to be computed
1210	mod	m	the modulus
1211	modPow	exponent	the exponent
1211	modPow	m	the modulus
1219	modInverse	m	the modulus
1220	shiftLeft	n	shift distance in bits
1221	shiftRight	n	shift distance in bits
1222	and	val	value to be AND'ed with this BigInteger
1223	or	val	value to be OR'ed with this BigInteger
1224	xor	val	value to be XOR'ed with this BigInteger
1226	andNot	val	value to be complemented and AND'ed with this BigInteger
1227	testBit	n	index of bit to test
1228	setBit	n	index of bit to set
1229	clearBit	n	index of bit to clear
1230	flipBit	n	index of bit to flip
1234	isProbablePrime	certainty	a measure of the uncertainty that the caller is willing to tolerate if the call returns code true the probability that this BigInteger is prime exceeds code certainty
1235	compareTo	val	BigInteger to which this BigInteger is to be compared
1236	compareMagnitude	val	BigInteger whose magnitude array to be compared
1237	equals	x	Object to which this BigInteger is to be compared
1238	min	val	value with which the minimum is to be computed
1239	max	val	value with which the maximum is to be computed
1241	toString	radix	radix of the String representation
1259	valueOf	rm	legacy integer rounding mode to convert
1267	createContentHandler	mimetype	the MIME type for which a content handler is desired
1268	openConnection	u	the URL that this connects to
1269	openConnection	u	the URL that this connects to
1269	openConnection	p	the proxy through which the connection will be made
1270	parseURL	u	the URL to receive the result of parsing the spec
1270	parseURL	spec	the String representing the URL that must be parsed
1270	parseURL	start	the character index at which to begin parsing
1270	parseURL	limit	the character position to stop parsing at
1272	equals	u1	a URL object
1272	equals	u2	a URL object
1273	hashCode	u	a URL object
1274	sameFile	u1	a URL object
1274	sameFile	u2	a URL object
1275	getHostAddress	u	a URL object
1276	hostsEqual	u1	the URL of the first host to compare
1276	hostsEqual	u2	the URL of the second host to compare
1277	toExternalForm	u	the URL
1278	setURL	u	the URL to modify
1278	setURL	protocol	the protocol name
1278	setURL	host	the remote host value for the URL
1278	setURL	port	the port on the remote machine
1278	setURL	authority	the authority part for the URL
1278	setURL	userInfo	the userInfo part of the URL
1278	setURL	path	the path component of the URL
1278	setURL	query	the query part for the URL
1278	setURL	ref	the reference
1279	setURL	u	the URL to modify
1279	setURL	protocol	the protocol name
1279	setURL	host	the remote host value for the URL
1279	setURL	port	the port on the remote machine
1279	setURL	file	the file
1279	setURL	ref	the reference
1280	set	protocol	the name of the protocol to use
1280	set	host	the name of the host
1280	set	port	the port number on the host
1280	set	file	the file on the host
1280	set	ref	the internal reference in the URL
1281	set	protocol	the name of the protocol to use
1281	set	host	the name of the host
1281	set	port	the port number on the host
1281	set	authority	the authority part for the url
1281	set	userInfo	the username and password
1281	set	path	the file on the host
1281	set	ref	the internal reference in the URL
1281	set	query	the query part of this URL
1292	equals	obj	the URL to compare against
1294	sameFile	other	the URL to compare against
1299	openConnection	proxy	the Proxy through which this connection will be made
1302	getContent	classes	an array of Java types
1303	setURLStreamHandlerFactory	fac	the desired factory
1304	getURLStreamHandler	protocol	the protocol to use
1309	setCookiePolicy	cookiePolicy	the cookie policy
1311	getHeaderFieldKey	n	an index where n 
1312	setFixedLengthStreamingMode	contentLength	The number of bytes which will be written to the OutputStream
1313	setChunkedStreamingMode	chunklen	The number of bytes to write in each chunk
1314	getHeaderField	n	an index where n
1315	setFollowRedirects	set	a boolean indicating whether or not to follow HTTP redirects
1317	setInstanceFollowRedirects	followRedirects	a boolean indicating whether or not to follow HTTP redirects
1319	setRequestMethod	method	the HTTP method
1326	addURL	url	the URL to be added to the search path of URLs
1328	findClass	name	the name of the class
1329	definePackage	name	the package name
1329	definePackage	man	the Manifest containing package version and sealing information
1329	definePackage	url	the code source url for the package or null if none
1330	findResource	name	the name of the resource
1331	findResources	name	the resource name
1332	getPermissions	codesource	the codesource
1333	newInstance	urls	the URLs to search for classes and resources
1333	newInstance	parent	the parent class loader for delegation
1334	newInstance	urls	the URLs to search for classes and resources
1340	setData	buf	the buffer to set for this packet
1340	setData	offset	the offset into the data
1340	setData	length	the length of the data andor the length of the buffer used to receive data
1341	setAddress	iaddr	the InetAddress
1342	setPort	iport	the port number
1343	setSocketAddress	address	the SocketAddress
1345	setData	buf	the buffer to set for this packet
1346	setLength	length	the length to set for this packet
1348	add	uri	the uri this cookie associated with
1348	add	cookie	the cookie to store
1352	remove	uri	the uri this cookie associated with
1352	remove	cookie	the cookie to remove
1354	createImpl	stream	a boolean value true for a TCP socket false for UDP
1357	connect	endpoint	the SocketAddress
1358	connect	endpoint	the SocketAddress
1358	connect	timeout	the timeout value to be used in milliseconds
1359	bind	bindpoint	the SocketAddress to bind to
1370	setTcpNoDelay	on	true to enable TCP_NODELAY false to disable
1372	setSoLinger	on	whether or not to linger on
1372	setSoLinger	linger	how long to linger for if on is true
1374	sendUrgentData	data	The byte of data to send
1375	setOOBInline	on	true to enable OOBINLINE false to disable
1377	setSoTimeout	timeout	the specified timeout in milliseconds
1379	setSendBufferSize	size	the size to which to set the send buffer size
1381	setReceiveBufferSize	size	the size to which to set the receive buffer size
1383	setKeepAlive	on	whether or not to have socket keep alive turned on
1385	setTrafficClass	tc	an int value for the bitset
1387	setReuseAddress	on	whether to enable or disable the socket option
1398	setSocketImplFactory	fac	the desired factory
1399	setPerformancePreferences	connectionTime	An int expressing the relative importance of a short connection time
1399	setPerformancePreferences	latency	An int expressing the relative importance of low latency
1399	setPerformancePreferences	bandwidth	An int expressing the relative importance of high bandwidth
1402	bind	lport	the local port
1402	bind	laddr	the local address
1403	send	p	the packet to be sent
1404	connect	address	the remote InetAddress to connect to
1404	connect	port	the remote port number
1406	peek	i	an InetAddress object
1407	peekData	p	the Packet Received
1408	receive	p	the Packet Received
1409	setTTL	ttl	a byte specifying the TTL value
1411	setTimeToLive	ttl	an int specifying the timetolive value
1413	join	inetaddr	multicast address to join
1414	leave	inetaddr	multicast address to leave
1415	joinGroup	mcastaddr	address to join
1415	joinGroup	netIf	specifies the local interface to receive multicast datagram packets
1416	leaveGroup	mcastaddr	address to leave
1416	leaveGroup	netIf	specified the local interface to leave the group at
1420	shouldAccept	uri	the URI to consult accept policy with
1420	shouldAccept	cookie	the HttpCookie object in question
1425	bind	endpoint	The IP address port number to bind to
1426	bind	endpoint	The IP address port number to bind to
1426	bind	backlog	The listen backlog length
1431	implAccept	s	the Socket
1436	setSoTimeout	timeout	the specified timeout in milliseconds
1438	setReuseAddress	on	whether to enable or disable the socket option
1441	setSocketFactory	fac	the desired factory
1442	setReceiveBufferSize	size	the size to which to set the receive buffer size
1444	setPerformancePreferences	connectionTime	An int expressing the relative importance of a short connection time
1444	setPerformancePreferences	latency	An int expressing the relative importance of low latency
1444	setPerformancePreferences	bandwidth	An int expressing the relative importance of high bandwidth
1445	toASCII	input	the string to be processed
1445	toASCII	flag	process flag can be or any logical OR of possible flags
1446	toASCII	input	the string to be processed
1447	toUnicode	input	the string to be processed
1447	toUnicode	flag	process flag can be or any logical OR of possible flags
1448	toUnicode	input	the string to be processed
1453	setTTL	ttl	the timetolive
1454	setTimeToLive	ttl	the timetolive
1457	joinGroup	mcastaddr	is the multicast address to join
1458	leaveGroup	mcastaddr	is the multicast address to leave
1459	joinGroup	mcastaddr	is the multicast address to join
1459	joinGroup	netIf	specifies the local interface to receive multicast datagram packets or null to defer to the interface set by link MulticastSocketsetInterfaceInetAddress or link MulticastSocketsetNetworkInterfaceNetworkInterface
1460	leaveGroup	mcastaddr	is the multicast address to leave
1460	leaveGroup	netIf	specifies the local interface or null to defer to the interface set by link MulticastSocketsetInterfaceInetAddress or link MulticastSocketsetNetworkInterfaceNetworkInterface
1461	setInterface	inf	the InetAddress
1463	setNetworkInterface	netIf	the interface
1465	setLoopbackMode	disable	true to disable the LoopbackMode
1467	send	p	is the packet to be sent
1467	send	ttl	optional time to live for multicast packet
1470	send	packet	to be sent
1471	connect	address	the remote InetAddress to connect to
1471	connect	port	the remote port number
1473	peek	return	the address which the packet came from
1474	receive	Packet	Received
1475	setTimeToLive	TTL	to be set
1477	setTTL	TTL	to be set
1479	join	multicast	address to join
1480	leave	multicast	address to leave
1481	joinGroup	multicast	address to join
1481	joinGroup	netIf	specifies the local interface to receive multicast datagram packets
1482	leaveGroup	multicast	address to leave
1482	leaveGroup	netIf	specified the local interface to leave the group at
1486	connect	host	the specified host
1486	connect	port	the specified port
1487	connect	address	the address
1487	connect	port	the specified port
1488	connect	address	the address
1488	connect	timeout	the timeout value in milliseconds or zero for no timeout
1490	bind	address	the address
1490	bind	port	the port
1491	listen	count	the amount of time to listen for connections
1492	accept	s	the connection
1510	getByName	name	The name of the network interface
1511	getByIndex	index	an integer the index of the interface
1512	getByInetAddress	addr	The InetAddress to search with
1521	equals	obj	the object to compare against
1522	setOption	optID	identifies the option
1522	setOption	value	the parameter of the socket option
1523	getOption	optID	an int identifying the option to fetch
1524	getContentTypeFor	fileName	the specified file name
1526	setDefault	cHandler	The HTTP cookie handler or null to unset
1527	get	uri	a URI to send cookies to in a request
1527	get	requestHeaders	 a Map from request header field names to lists of field values representing the current request headers
1528	put	uri	a URI where the cookies come from
1528	put	responseHeaders	an immutable map from field names to lists of field values representing the response header fields returned
1540	equals	obj	the object to compare against
1553	isReachable	timeout	the time in milliseconds before the call aborts
1554	isReachable	netif	the NetworkInterface through which the test will be done or null for any interface
1554	isReachable	ttl	the maximum numbers of hops to try or for the default
1554	isReachable	timeout	the time in milliseconds before the call aborts
1556	getHostName	check	make security check if true
1558	getHostFromNameService	check	make security check if true
1562	equals	obj	the object to compare against
1564	getByAddress	host	the specified host
1564	getByAddress	addr	the raw IP address in network byte order
1565	getByName	host	the specified host or null
1566	getAllByName	host	the name of the host or null
1569	getByAddress	addr	the raw IP address in network byte order
1579	getMask	action	the action string
1582	implies	p	the permission to check against
1583	impliesIgnoreMask	p	the incoming permission request
1584	equals	obj	the object to test for equality with this object
1587	getActions	mask	a specific integer action mask to translate into a string
1592	add	permission	the Permission object to add
1593	implies	p	the Permission object to compare
1596	create	str	The string to be parsed into a URI
1599	resolve	uri	The URI to be resolved against this URI
1600	resolve	str	The string to be parsed into a URI
1601	relativize	uri	The URI to be relativized against this URI
1620	equals	ob	The object to which this object is to be compared
1622	compareTo	that	The object to which this URI is to be compared
1625	writeObject	os	The objectoutput stream to which this object is to be written
1626	readObject	is	The objectinput stream from which this object is being read
1630	setDefault	ps	The HTTP proxy selector or null to unset the proxy selector
1631	select	uri	The URI that a connection is required to
1632	connectFailed	uri	The URI that the proxy at sa failed to serve
1632	connectFailed	sa	The socket address of the proxySOCKS server
1632	connectFailed	ioe	The IO exception thrown when the connect failed
1636	equals	obj	the object to compare against
1641	socketWrite0	fd	the FileDescriptor
1641	socketWrite0	b	the data to be written
1641	socketWrite0	off	the start offset in the data
1641	socketWrite0	len	the number of bytes that are written
1642	socketWrite	b	the data to be written
1642	socketWrite	off	the start offset in the data
1642	socketWrite	len	the number of bytes that are written
1643	write	b	the data to be written
1644	write	b	the data to be written
1645	write	b	the data to be written
1645	write	off	the start offset in the data
1645	write	len	the number of bytes that are written
1654	socketRead0	fd	the FileDescriptor
1654	socketRead0	b	the buffer into which the data is read
1654	socketRead0	off	the start offset of the data
1654	socketRead0	len	the maximum number of bytes read
1654	socketRead0	timeout	the read timeout in ms
1655	read	b	the buffer into which the data is read
1656	read	b	the buffer into which the data is read
1656	read	off	the start offset of the data
1656	read	len	the maximum number of bytes read
1658	skip	n	the number of bytes to skip
1675	equals	obj	the object to compare against
1677	createUnresolved	host	the Host name
1677	createUnresolved	port	The port number
1684	equals	obj	the object to compare against
1686	setDefault	a	The authenticator to be set
1687	requestPasswordAuthentication	addr	The InetAddress of the site requesting authorization or null if not known
1687	requestPasswordAuthentication	port	the port for the requested connection
1687	requestPasswordAuthentication	protocol	The protocol that's requesting the connection link java
1687	requestPasswordAuthentication	prompt	A prompt string for the user
1687	requestPasswordAuthentication	scheme	The authentication scheme
1688	requestPasswordAuthentication	host	The hostname of the site requesting authentication
1688	requestPasswordAuthentication	addr	The InetAddress of the site requesting authentication or null if not known
1688	requestPasswordAuthentication	port	the port for the requested connection
1688	requestPasswordAuthentication	protocol	The protocol that's requesting the connection link java
1688	requestPasswordAuthentication	prompt	A prompt string for the user which identifies the authentication realm
1688	requestPasswordAuthentication	scheme	The authentication scheme
1689	requestPasswordAuthentication	host	The hostname of the site requesting authentication
1689	requestPasswordAuthentication	addr	The InetAddress of the site requesting authorization or null if not known
1689	requestPasswordAuthentication	port	the port for the requested connection
1689	requestPasswordAuthentication	protocol	The protocol that's requesting the connection link java
1689	requestPasswordAuthentication	prompt	A prompt string for the user
1689	requestPasswordAuthentication	scheme	The authentication scheme
1689	requestPasswordAuthentication	url	The requesting URL that caused the authentication
1689	requestPasswordAuthentication	reqType	The type server or proxy of the entity requesting authentication
1699	connectInternal	addr	The remote address
1699	connectInternal	port	The remote port
1701	bind	addr	The address port to bind to
1702	connect	address	the remote address for the socket
1702	connect	port	the remote port for the socket
1703	connect	addr	The remote address
1711	send	p	the DatagramPacket to be sent
1712	receive	p	the DatagramPacket into which to place the incoming data
1715	setSoTimeout	timeout	the specified timeout in milliseconds
1717	setSendBufferSize	size	the size to which to set the send buffer size
1719	setReceiveBufferSize	size	the size to which to set the receive buffer size
1721	setReuseAddress	on	whether to enable or disable the
1723	setBroadcast	on	whether or not to have broadcast turned on
1725	setTrafficClass	tc	an int value for the bitset
1730	setDatagramSocketImplFactory	fac	the desired factory
1731	decode	s	the String to decode
1732	decode	s	the String to decode
1732	decode	enc	The name of a supported a href
1734	setFileNameMap	map	the FileNameMap to be set
1736	setConnectTimeout	timeout	an int that specifies the connect timeout value in milliseconds
1738	setReadTimeout	timeout	an int that specifies the timeout value to be used in milliseconds
1747	getHeaderField	name	the name of a header field
1749	getHeaderFieldInt	name	the name of the header field
1749	getHeaderFieldInt	Default	the default value
1750	getHeaderFieldDate	name	the name of the header field
1750	getHeaderFieldDate	Default	a default value
1751	getHeaderFieldKey	n	an index where n
1752	getHeaderField	n	an index where n
1754	getContent	classes	the Class array indicating the requested types
1759	setDoInput	doinput	the new value
1761	setDoOutput	dooutput	the new value
1763	setAllowUserInteraction	allowuserinteraction	the new value
1765	setDefaultAllowUserInteraction	defaultallowuserinteraction	the new value
1767	setUseCaches	usecaches	a boolean indicating whether or not to allow caching
1769	setIfModifiedSince	ifmodifiedsince	the new value
1772	setDefaultUseCaches	defaultusecaches	the new value
1773	setRequestProperty	key	the keyword by which the request is known e
1773	setRequestProperty	value	the value associated with it
1774	addRequestProperty	key	the keyword by which the request is known e
1774	addRequestProperty	value	the value associated with it
1775	getRequestProperty	key	the keyword by which the request is known e
1777	setDefaultRequestProperty	key	the keyword by which the request is known e
1777	setDefaultRequestProperty	value	the value associated with the key
1778	getDefaultRequestProperty	key	the keyword by which the request is known e
1779	setContentHandlerFactory	fac	the desired factory
1780	getContentHandler	connection	the connection to use
1784	guessContentTypeFromName	fname	a filename
1785	guessContentTypeFromStream	is	an input stream that supports marks
1789	encode	s	String to be translated
1790	encode	s	String to be translated
1790	encode	enc	The name of a supported a href
1791	getContent	urlc	a URL connection
1792	getContent	urlc	a URL connection
1792	getContent	classes	an array of types requested
1793	getByAddress	host	the specified host
1793	getByAddress	addr	the raw IP address in network byte order
1793	getByAddress	nif	an interface this address must be associated with
1794	getByAddress	host	the specified host
1794	getByAddress	addr	the raw IP address in network byte order
1794	getByAddress	scope_id	the numeric scope_id for the address
1811	equals	obj	the object to compare against
1816	setDefault	responseCache	The response cache or null to unset the cache
1817	get	uri	a URI used to reference the requested network resource
1817	get	rqstMethod	a String representing the request method
1817	get	rqstHeaders	 a Map from request header field names to lists of field values representing the current request headers
1818	put	uri	a URI used to reference the requested network resource
1818	put	conn	 a URLConnection instance that is used to fetch the response to be cached
1819	createURLStreamHandler	protocol	the protocol ftp http nntp etc
1820	parse	header	a String specifying the setcookie header
1822	setComment	purpose	a String specifying the comment to display to the user
1824	setCommentURL	purpose	a String specifying the comment url to display to the user
1826	setDiscard	discard	true indicates to discard cookie unconditionally
1828	setPortlist	ports	a String specify the port list which is comma seperated series of digits
1830	setDomain	pattern	a String containing the domain name within which this cookie is visible form is according to RFC 
1832	setMaxAge	expiry	an integer specifying the maximum age of the cookie in seconds if zero the cookie should be discarded immediately otherwise the cookie's max age is unspecified
1834	setPath	uri	a String specifying a path
1836	setSecure	flag	if true sends the cookie from the browser to the server using only when using a secure protocol if false sent on any protocol
1839	setValue	newValue	a String specifying the new value
1842	setVersion	v	 if the cookie should comply with the original Netscape specification if the cookie should comply with RFC 
1843	domainMatches	domain	the domain name to check host name with
1843	domainMatches	host	the host name in question
1849	connect	endpoint	the SocketAddress to connect to
1849	connect	timeout	the timeout value in milliseconds
1850	socksBind	addr	the Socket address of the remote host
1851	acceptFrom	s	the accepted connection
1851	acceptFrom	saddr	the socket address of the host we do accept connection from
1854	create	stream	if true create a stream socket otherwise create a datagram socket
1855	connect	host	the name of the remote host
1855	connect	port	the port number
1856	connect	address	the IP address of the remote host
1856	connect	port	the port number
1857	connect	address	the Socket address of the remote host
1857	connect	timeout	the timeout value in milliseconds or zero for no timeout
1858	bind	host	an IP address that belongs to a local interface
1858	bind	port	the port number
1859	listen	backlog	the maximum length of the queue
1860	accept	s	the accepted connection
1871	sendUrgentData	data	The byte of data to send
1874	setPerformancePreferences	connectionTime	An int expressing the relative importance of a short connection time
1874	setPerformancePreferences	latency	An int expressing the relative importance of low latency
1874	setPerformancePreferences	bandwidth	An int expressing the relative importance of high bandwidth
1875	getInstance	locale	the desired locale
1876	getInstance	locale	the desired locale
1877	getInstance	locale	the desired locale
1878	getWordInstance	locale	the desired locale
1879	getLineInstance	locale	the desired locale
1880	getCharacterInstance	locale	the desired locale
1881	getSentenceInstance	locale	the desired locale
1882	getCurrencyInstance	locale	the desired locale
1883	getIntegerInstance	locale	the desired locale
1884	getNumberInstance	locale	the desired locale
1885	getPercentInstance	locale	the desired locale
1886	getTimeInstance	style	the given formatting style
1886	getTimeInstance	locale	the desired locale
1887	getDateInstance	style	the given formatting style
1887	getDateInstance	locale	the desired locale
1888	getDateTimeInstance	dateStyle	the given date formatting style
1888	getDateTimeInstance	timeStyle	the given time formatting style
1888	getDateTimeInstance	locale	the desired locale
1890	getContractValues	ch	the starting character of the contracting string
1892	getMaxExpansion	order	a collation order returned by previous or next
1893	getExpandValueList	idx	the index of the expanding string value list
1896	fillInTables	f2ary	The value for frenchSec the Frenchsecondary flag
1896	fillInTables	swap	The value for SE Asian swapping rule
1896	fillInTables	map	The collator's charactermapping table the value for mapping
1896	fillInTables	cTbl	The collator's contractingcharacter table the value for contractTable
1896	fillInTables	eTbl	The collator's expandingcharacter table the value for expandTable
1896	fillInTables	cFlgs	The hash table of characters that participate in contracting character sequences the value for contractFlags
1896	fillInTables	mso	The value for maxSecOrder
1896	fillInTables	mto	The value for maxTerOrder
1897	fillInTables	f2ary	The value for frenchSec the Frenchsecondary flag
1897	fillInTables	swap	The value for SE Asian swapping rule
1897	fillInTables	map	The collator's charactermapping table the value for mapping
1897	fillInTables	cTbl	The collator's contractingcharacter table the value for contractTable
1897	fillInTables	eTbl	The collator's expandingcharacter table the value for expandTable
1897	fillInTables	cFlgs	The hash table of characters that participate in contracting character sequences the value for contractFlags
1897	fillInTables	mso	The value for maxSecOrder
1897	fillInTables	mto	The value for maxTerOrder
1898	fillInTables	f2ary	The value for frenchSec the Frenchsecondary flag
1898	fillInTables	swap	The value for SE Asian swapping rule
1898	fillInTables	map	The collator's charactermapping table the value for mapping
1898	fillInTables	cTbl	The collator's contractingcharacter table the value for contractTable
1898	fillInTables	eTbl	The collator's expandingcharacter table the value for expandTable
1898	fillInTables	cFlgs	The hash table of characters that participate in contracting character sequences the value for contractFlags
1898	fillInTables	mso	The value for maxSecOrder
1898	fillInTables	mto	The value for maxTerOrder
1900	addAttribute	attribute	the attribute key
1900	addAttribute	value	the value of the attribute may be null
1901	addAttribute	attribute	the attribute key
1901	addAttribute	value	The value of the attribute
1901	addAttribute	beginIndex	Index of the first character of the range
1901	addAttribute	endIndex	Index of the character following the last character of the range
1902	addAttributes	attributes	The attributes to be added to the string
1902	addAttributes	beginIndex	Index of the first character of the range
1902	addAttributes	endIndex	Index of the character following the last character of the range
1905	getIterator	attributes	a list of attributes that the client is interested in
1906	getIterator	attributes	a list of attributes that the client is interested in
1906	getIterator	beginIndex	the index of the first character
1906	getIterator	endIndex	the index of the character following the last character
1910	format	number	the number to format
1910	format	toAppendTo	the StringBuffer to which the formatted text is to be appended
1910	format	pos	On input an alignment field if desired
1911	format	number	The double to format
1911	format	result	where the text is to be appended
1911	format	fieldPosition	On input an alignment field if desired
1912	format	number	The double to format
1912	format	result	where the text is to be appended
1912	format	delegate	notified of locations of sub fields
1913	format	number	The long to format
1913	format	result	where the text is to be appended
1913	format	fieldPosition	On input an alignment field if desired
1914	format	number	The long to format
1914	format	result	where the text is to be appended
1914	format	delegate	notified of locations of sub fields
1915	format	number	The BigDecimal to format
1915	format	result	where the text is to be appended
1915	format	fieldPosition	On input an alignment field if desired
1916	format	number	The BigDecimal to format
1916	format	result	where the text is to be appended
1916	format	delegate	notified of locations of sub fields
1917	format	number	The BigInteger to format
1917	format	result	where the text is to be appended
1917	format	fieldPosition	On input an alignment field if desired
1918	format	number	The BigInteger to format
1918	format	result	where the text is to be appended
1918	format	delegate	notified of locations of sub fields
1919	formatToCharacterIterator	obj	The object to format
1922	parse	text	the string to be parsed
1922	parse	pos	A ParsePosition object with index and error index information as described above
1925	subparse	text	The string to parse
1925	subparse	parsePosition	The position at which to being parsing
1925	subparse	digits	The DigitList to set to the parsed value
1925	subparse	isExponent	If true parse an exponent
1925	subparse	status	Upon return contains boolean status flags indicating whether the value was infinite and whether it was positive
1927	setDecimalFormatSymbols	newSymbols	desired DecimalFormatSymbols
1954	expandAffix	pattern	the nonnull possibly empty pattern
1954	expandAffix	buffer	a scratch StringBuffer its contents will be lost
1955	expandAffix	pattern	the nonnull possibly empty pattern
1956	appendAffix	buffer	the affix string is appended to this
1956	appendAffix	affixPattern	a pattern such as posPrefixPattern may be null
1956	appendAffix	expAffix	a corresponding expanded affix such as positivePrefix
1956	appendAffix	localized	true if the appended pattern should contain localized pattern characters otherwise nonlocalized pattern chars are appended
1971	setCurrency	currency	the new currency to be used by this decimal format
1973	setRoundingMode	roundingMode	The RoundingMode to be used
1976	format	number	the number to format
1976	format	toAppendTo	the StringBuffer to which the formatted text is to be appended
1976	format	pos	On input an alignment field if desired
1977	parseObject	source	A String part of which should be parsed
1977	parseObject	pos	A ParsePosition object with index and error index information as described above
1983	parse	source	A String whose beginning should be parsed
2005	setMaximumIntegerDigits	newValue	the maximum number of integer digits to be shown if less than zero then zero is used
2007	setMinimumIntegerDigits	newValue	the minimum number of integer digits to be shown if less than zero then zero is used
2009	setMaximumFractionDigits	newValue	the maximum number of fraction digits to be shown if less than zero then zero is used
2011	setMinimumFractionDigits	newValue	the minimum number of fraction digits to be shown if less than zero then zero is used
2013	setCurrency	currency	the new currency to be used by this number format
2015	setRoundingMode	roundingMode	The RoundingMode to be used
2028	setText	text	The String to be iterated over
2038	equals	obj	the StringCharacterIterator object to be compared with
2043	getInstance	locale	the given locale
2045	setEras	newEras	the new era strings
2047	setMonths	newMonths	the new month strings
2049	setShortMonths	newShortMonths	the new short month strings
2051	setWeekdays	newWeekdays	the new weekday strings
2053	setShortWeekdays	newShortWeekdays	the new short weekday strings
2055	setAmPmStrings	newAmpms	the new ampm strings
2057	setZoneStrings	newZoneStrings	the new time zone strings
2059	setLocalPatternChars	newLocalPatternChars	the new localized datetime pattern characters
2064	getZoneIndex	ID	the given time zone ID
2066	duplicate	srcArray	the source array to be cloned
2066	duplicate	count	the number of elements in the given source array
2067	copyMembers	src	the source DateFormatSymbols
2067	copyMembers	dst	the target DateFormatSymbols
2068	equals	current	this String array
2068	equals	other	that String array
2073	preceding	offset	The position to begin searching from
2074	following	offset	The position to begin searching forward from
2085	next	n	The number of steps to move
2096	isBoundary	offset	the offset to check
2099	setText	newText	An iterator over the text to analyze
2105	applyPattern	newPattern	See the class description
2107	setChoices	limits	contains the top value that you want parsed with that formatand should be in ascending sorted order
2107	setChoices	formats	are the formats you want to use for each limit
2111	format	number	number to be formatted substituted
2111	format	toAppendTo	where text is appended
2111	format	status	ignore no useful status is returned
2112	parse	text	the source text
2112	parse	status	an inputoutput parameter
2123	next	n	which boundary to return
2126	following	offset	the character offset to begin scanning
2127	preceding	offset	the characater offset to begin scanning
2128	isBoundary	offset	the character offset to check
2131	setText	newText	new text to scan
2132	setText	newText	new text to scan
2134	getWordInstance	locale	the desired locale
2136	getLineInstance	locale	the desired locale
2138	getCharacterInstance	locale	the desired locale
2140	getSentenceInstance	locale	the desired locale
2144	getInstance	locale	the desired locale
2170	setCurrency	currency	the new currency to be used
2176	setExponentSeparator	exp	the exponent separator string
2188	fitsIntoLong	isPositive	true if this number should be regarded as positive
2188	fitsIntoLong	ignoreNegativeZero	true if should be regarded as identical to otherwise they are considered distinct
2189	set	isNegative	Boolean value indicating whether the number is negative
2189	set	source	Value to be converted must not be Inf Inf Nan or a value 
2189	set	maximumFractionDigits	The most fractional digits which should be converted
2190	set	isNegative	Boolean value indicating whether the number is negative
2190	set	source	Value to be converted must not be Inf Inf Nan or a value 
2190	set	maximumDigits	The most fractional or total digits which should be converted
2190	set	fixedPoint	If true then maximumDigits is the maximum fractional digits to be converted
2192	round	maximumDigits	The maximum number of digits to be shown
2193	shouldRoundUp	maximumDigits	the number of digits to keep from to count
2195	set	isNegative	Boolean value indicating whether the number is negative
2195	set	source	Value to be converted must be or Long
2195	set	maximumDigits	The most digits which should be converted
2196	set	isNegative	Boolean value indicating whether the number is negative
2196	set	source	Value to be converted must not be a value 
2196	set	maximumDigits	The most fractional or total digits which should be converted
2196	set	fixedPoint	If true then maximumDigits is the maximum fractional digits to be converted
2197	set	isNegative	Boolean value indicating whether the number is negative
2197	set	source	Value to be converted must be 
2197	set	maximumDigits	The most digits which should be converted
2202	compareTo	target	target RuleBasedCollationKey
2203	equals	target	the RuleBasedCollationKey to compare to
2208	set2DigitYearStart	startDate	During parsing two digit years will be placed in the range startDate to startDate years
2210	format	date	the datetime value to be formatted into a datetime string
2210	format	toAppendTo	where the new datetime text is to be appended
2210	format	pos	the formatting position
2211	formatToCharacterIterator	obj	The object to format
2214	parse	text	A String part of which should be parsed
2214	parse	pos	A ParsePosition object with index and error index information as described above
2215	matchString	text	the time text being parsed
2215	matchString	start	where to start parsing
2215	matchString	field	the date field being parsed
2215	matchString	data	the string array to parsed
2218	subParse	text	the time text to be parsed
2218	subParse	start	where to start parsing
2218	subParse	ch	the pattern character for the date field text to be parsed
2218	subParse	count	the count of a pattern character
2218	subParse	obeyCount	if true then the next field directly abuts this one and we should use the count to know when to stop parsing
2218	subParse	ambiguousYear	return parameter upon return if ambiguousYear is true then a twodigit year was parsed and may need to be readjusted
2218	subParse	origPos	origPos
2222	applyPattern	pattern	the new date and time pattern for this date format
2223	applyLocalizedPattern	pattern	a String to be mapped to the new date and time format pattern for this format
2225	setDateFormatSymbols	newFormatSymbols	the new date and time format symbols
2231	createLineBidi	lineStart	the offset from the start of the paragraph to the start of the line
2231	createLineBidi	lineLimit	the offset from the start of the paragraph to the limit of the line
2238	getLevelAt	offset	the index of the character for which to return the level
2240	getRunLevel	run	the index of the run between and getRunCount
2241	getRunStart	run	the index of the run between and getRunCount
2242	getRunLimit	run	the index of the run between and getRunCount
2243	requiresBidi	text	the text containing the characters to test
2243	requiresBidi	start	the start of the range of characters to test
2243	requiresBidi	limit	the limit of the range of characters to test
2244	reorderVisually	levels	an array representing the bidi level of each object
2244	reorderVisually	levelStart	the start position in the levels array
2244	reorderVisually	objects	the array of objects to be reordered into visual order
2244	reorderVisually	objectStart	the start position in the objects array
2244	reorderVisually	count	the number of objects to reorder
2248	normalize	src	The sequence of char values to normalize
2248	normalize	form	The normalization form one of link java
2249	isNormalized	src	The sequence of char values to be checked
2249	isNormalized	form	The normalization form one of link java
2252	format	obj	The object to format
2253	format	obj	The object to format
2253	format	toAppendTo	where the text is to be appended
2253	format	pos	A FieldPosition identifying a field in the formatted text
2254	formatToCharacterIterator	obj	The object to format
2255	parseObject	source	A String part of which should be parsed
2255	parseObject	pos	A ParsePosition object with index and error index information as described above
2256	parseObject	source	A String whose beginning should be parsed
2258	createAttributedCharacterIterator	s	String to create AttributedCharacterIterator from
2259	createAttributedCharacterIterator	iterators	AttributedCharacterIterators used to create resulting AttributedCharacterIterators
2260	createAttributedCharacterIterator	string	String to create AttributedCharacterIterator from
2260	createAttributedCharacterIterator	key	Key for AttributedCharacterIterator
2260	createAttributedCharacterIterator	value	Value associated with key in AttributedCharacterIterator
2261	createAttributedCharacterIterator	iterator	Initial AttributedCharacterIterator to add arg to
2261	createAttributedCharacterIterator	key	Key for AttributedCharacterIterator
2261	createAttributedCharacterIterator	value	Value associated with key in AttributedCharacterIterator
2262	formatted	attr	Identifies the field matched
2262	formatted	value	Value associated with the field
2262	formatted	start	Beginning location of the field will be 
2262	formatted	end	End of the field will be start and buffer
2262	formatted	buffer	Contains current formatted value receiver should NOT modify it
2263	formatted	fieldID	Identifies the field by integer
2263	formatted	attr	Identifies the field matched
2263	formatted	value	Value associated with the field
2263	formatted	start	Beginning location of the field will be 
2263	formatted	end	End of the field will be start and buffer
2263	formatted	buffer	Contains current formatted value receiver should NOT modify it
2264	formatted	attr	Identifies the field matched
2264	formatted	value	Value associated with the field
2264	formatted	start	Beginning location of the field will be 
2264	formatted	end	End of the field will be start and buffer
2264	formatted	buffer	Contains current formatted value receiver should NOT modify it
2265	formatted	fieldID	Identifies the field by integer
2265	formatted	attr	Identifies the field matched
2265	formatted	value	Value associated with the field
2265	formatted	start	Beginning location of the field will be 
2265	formatted	end	End of the field will be start and buffer
2265	formatted	buffer	Contains current formatted value receiver should NOT modify it
2266	formatted	attr	Identifies the field matched
2266	formatted	value	Value associated with the field
2266	formatted	start	Beginning location of the field will be 
2266	formatted	end	End of the field will be start and buffer
2266	formatted	buffer	Contains current formatted value receiver should NOT modify it
2267	formatted	fieldID	Identifies the field by integer
2267	formatted	attr	Identifies the field matched
2267	formatted	value	Value associated with the field
2267	formatted	start	Beginning location of the field will be 
2267	formatted	end	End of the field will be start and buffer
2267	formatted	buffer	Contains current formatted value receiver should NOT modify it
2286	equals	obj	the tablebased collation object to be compared with this
2290	compareTo	target	target CollationKey
2294	getInstance	desiredLocale	the desired locale
2295	compare	source	the source string
2295	compare	target	the target string
2297	getCollationKey	source	the string to be transformed into a collation key
2298	equals	source	the source string to be compared with
2298	equals	target	the target string to be compared with
2300	setStrength	newStrength	the new strength value
2302	setDecomposition	decompositionMode	the new decomposition mode
2305	equals	that	the Collator to be compared with this
2307	setLocale	locale	the locale to be used when creating or comparing subformats
2309	applyPattern	pattern	the pattern for this message format
2311	setFormatsByArgumentIndex	newFormats	the new formats to use
2312	setFormats	newFormats	the new formats to use
2313	setFormatByArgumentIndex	argumentIndex	the argument index for which to use the new format
2313	setFormatByArgumentIndex	newFormat	the new format to use
2314	setFormat	formatElementIndex	the index of a format element within the pattern
2314	setFormat	newFormat	the format to use for the specified format element
2317	format	arguments	an array of objects to be formatted and substituted
2317	format	result	where text is appended
2317	format	pos	On input an alignment field if desired
2319	format	arguments	an array of objects to be formatted and substituted
2319	format	result	where text is appended
2319	format	pos	On input an alignment field if desired
2320	formatToCharacterIterator	arguments	an array of objects to be formatted and substituted
2322	parse	source	A String whose beginning should be parsed
2323	parseObject	source	A String part of which should be parsed
2323	parseObject	pos	A ParsePosition object with index and error index information as described above
2338	setIndex	position	the position within the text
2346	primaryOrder	order	the collation element
2347	secondaryOrder	order	the collation element
2348	tertiaryOrder	order	the collation element
2349	strengthOrder	order	The order value
2350	setOffset	newOffset	The new character offset into the original text
2352	getMaxExpansion	order	a collation order returned by previous or next
2353	setText	source	the new source text
2354	setText	source	the new source text
2361	nextContractChar	ch	the starting character of a contracting character token
2362	prevContractChar	ch	the starting character of a contracting character token
2370	getAttribute	attribute	the key of the attribute whose value is requested
2388	getPattern	withWhiteSpace	puts spacing around the entries and n before and 
2390	emitPattern	withWhiteSpace	puts spacing around the entries and n before and 
2392	addPattern	pattern	the new pattern to be added
2394	getItemAt	index	the offset of the desired pattern entry
2395	getNextStateFromCharacter	row	The current state
2395	getNextStateFromCharacter	ch	The character whose column we're interested in
2396	getNextState	row	The row number of the current state
2396	getNextState	col	The column number of the input character means not a dictionary character
2398	internalAt	row	The PHYSICAL row number of the cell
2398	internalAt	col	The PHYSICAL column number of the cell
2399	format	obj	must be a Number or a Date
2399	format	toAppendTo	the string buffer for the returning time string
2399	format	fieldPosition	keeps track of the position of the field within the returned string
2400	format	date	a Date to be formatted into a datetime string
2400	format	toAppendTo	the string buffer for the returning datetime string
2400	format	fieldPosition	keeps track of the position of the field within the returned string
2401	format	date	the time value to be formatted into a time string
2402	parse	source	A String whose beginning should be parsed
2403	parse	source	The datetime string to be parsed
2403	parse	pos	On input the position at which to start parsing on output the position at which parsing terminated or the start position if the parse failed
2404	parseObject	source	A String part of which should be parsed
2404	parseObject	pos	A ParsePosition object with index and error index information as described above
2406	getTimeInstance	style	the given formatting style
2407	getTimeInstance	style	the given formatting style
2407	getTimeInstance	aLocale	the given locale
2409	getDateInstance	style	the given formatting style
2410	getDateInstance	style	the given formatting style
2410	getDateInstance	aLocale	the given locale
2412	getDateTimeInstance	dateStyle	the given date formatting style
2412	getDateTimeInstance	timeStyle	the given time formatting style
2413	getDateTimeInstance	dateStyle	the given date formatting style
2413	getDateTimeInstance	timeStyle	the given time formatting style
2413	getDateTimeInstance	aLocale	the given locale
2416	setCalendar	newCalendar	the new Calendar to be used by the date format
2418	setNumberFormat	newNumberFormat	the given new NumberFormat
2420	setTimeZone	zone	the given new time zone
2422	setLenient	lenient	when true parsing is lenient
2427	get	timeStyle	a value from to indicating the time format ignored if flags is 
2427	get	dateStyle	a value from to indicating the time format ignored if flags is 
2427	get	flags	either for a time format for a date format or for a datetime format
2427	get	loc	the locale for the format
2428	ofCalendarField	calendarField	Calendar field constant
2431	ofCalendarField	calendarField	Calendar field constant
2434	ofCalendarField	calendarField	Calendar field constant
2451	getContractValues	ch	the starting character of the contracting string
2454	getSymbol	currencyCode	the ISO currency code which consists of three uppercase letters between 'A' U and 'Z' UA
2454	getSymbol	locale	the desired locale
2455	getDisplayName	currencyCode	the ISO currency code which consists of three uppercase letters between 'A' U and 'Z' UA
2455	getDisplayName	locale	the desired locale
2456	getDisplayLanguage	languageCode	the ISO language code string in the form of two lowercase letters between 'a' U and 'z' UA
2456	getDisplayLanguage	locale	the desired locale
2457	getDisplayCountry	countryCode	the ISO country code string in the form of two uppercase letters between 'A' U and 'Z' UA
2457	getDisplayCountry	locale	the desired locale
2458	getDisplayVariant	variant	the variant string
2458	getDisplayVariant	locale	the desired locale
2460	getDisplayName	ID	a time zone ID string
2460	getDisplayName	daylight	if true return the daylight saving name
2460	getDisplayName	style	either link java
2460	getDisplayName	locale	the desired locale
2461	equals	o	object to be compared for equality with this set
2463	removeAll	c	collection containing elements to be removed from this set
2464	getInstance	currencyCode	the ISO code of the currency
2465	getInstance	locale	the locale for whose country a Currency instance is needed
2469	getSymbol	locale	the locale for which a display name for this currency is needed
2473	getDisplayName	locale	the locale for which a display name for this currency is needed
2478	replaceCurrencyData	pattern	regex pattern for the properties
2478	replaceCurrencyData	ctry	country code
2478	replaceCurrencyData	data	currency data
2482	noneOf	elementType	the class object of the element type for this enum set
2483	allOf	elementType	the class object of the element type for this enum set
2485	copyOf	s	the enum set from which to initialize this enum set
2486	copyOf	c	the collection from which to initialize this enum set
2487	complementOf	s	the enum set from whose complement to initialize this enum set
2488	of	e	the element that this set is to contain initially
2489	of	e1	an element that this set is to contain initially
2489	of	e2	another element that this set is to contain initially
2490	of	e1	an element that this set is to contain initially
2490	of	e2	another element that this set is to contain initially
2490	of	e3	another element that this set is to contain initially
2491	of	e1	an element that this set is to contain initially
2491	of	e2	another element that this set is to contain initially
2491	of	e3	another element that this set is to contain initially
2491	of	e4	another element that this set is to contain initially
2492	of	e1	an element that this set is to contain initially
2492	of	e2	another element that this set is to contain initially
2492	of	e3	another element that this set is to contain initially
2492	of	e4	another element that this set is to contain initially
2492	of	e5	another element that this set is to contain initially
2493	of	first	an element that the set is to contain initially
2493	of	rest	the remaining elements the set is to contain initially
2494	range	from	the first element in the range
2494	range	to	the last element in the range
2502	containsKey	key	key whose presence in this map is to be tested
2503	containsValue	value	value whose presence in this map is to be tested
2504	get	key	the key whose associated value is to be returned
2505	put	key	key with which the specified value is to be associated
2505	put	value	value to be associated with the specified key
2506	remove	key	key whose mapping is to be removed from the map
2507	putAll	m	mappings to be stored in this map
2512	equals	o	object to be compared for equality with this map
2516	setValue	value	new value to be stored in this entry
2517	equals	o	object to be compared for equality with this map entry
2521	setValue	value	new value to be stored in this entry
2522	equals	o	object to be compared for equality with this map entry
2526	setValue	value	new value to be stored in this entry
2527	equals	o	object to be compared for equality with this map entry
2529	setProperty	key	the key to be placed into this property list
2529	setProperty	value	the value corresponding to key
2530	load	reader	the input character stream
2531	load	inStream	the input stream
2532	save	out	an output stream
2532	save	comments	a description of the property list
2533	store	writer	an output character stream writer
2533	store	comments	a description of the property list
2534	store	out	an output stream
2534	store	comments	a description of the property list
2535	loadFromXML	in	the input stream from which to read the XML document
2536	storeToXML	os	the output stream on which to emit the XML document
2536	storeToXML	comment	a description of the property list or null if no comment is desired
2537	storeToXML	os	the output stream on which to emit the XML document
2537	storeToXML	comment	a description of the property list or null if no comment is desired
2538	getProperty	key	the property key
2539	getProperty	key	the hashtable key
2539	getProperty	defaultValue	a default value
2542	list	out	an output stream
2543	list	out	an output stream
2544	enumerate	h	the hashtable
2545	enumerateStringProperties	h	the hashtable
2546	toHex	nibble	the nibble to convert
2549	contains	o	element whose presence in this set is to be tested
2552	toArray	a	the array into which the elements of this set are to be stored if it is big enough otherwise a new array of the same runtime type is allocated for this purpose
2553	add	e	element to be added to this set
2554	remove	o	object to be removed from this set if present
2555	containsAll	c	collection to be checked for containment in this set
2556	addAll	c	collection containing elements to be added to this set
2557	retainAll	c	collection containing elements to be retained in this set
2558	removeAll	c	collection containing elements to be removed from this set
2560	equals	o	object to be compared for equality with this set
2562	copyInto	anArray	the array into which the components get copied
2564	ensureCapacity	minCapacity	the desired minimum capacity
2566	setSize	newSize	the new size of this vector
2571	contains	o	element whose presence in this vector is to be tested
2572	indexOf	o	element to search for
2573	indexOf	o	element to search for
2573	indexOf	index	index to start searching from
2574	lastIndexOf	o	element to search for
2575	lastIndexOf	o	element to search for
2575	lastIndexOf	index	index to start searching backwards from
2576	elementAt	index	an index into this vector
2579	setElementAt	obj	what the component is to be set to
2579	setElementAt	index	the specified index
2580	removeElementAt	index	the index of the object to remove
2581	insertElementAt	obj	the component to insert
2581	insertElementAt	index	where to insert the new component
2582	addElement	obj	the component to be added
2583	removeElement	obj	the component to be removed
2587	toArray	a	the array into which the elements of the Vector are to be stored if it is big enough otherwise a new array of the same runtime type is allocated for this purpose
2588	get	index	index of the element to return
2589	set	index	index of the element to replace
2589	set	element	element to be stored at the specified position
2590	add	e	element to be appended to this Vector
2591	remove	o	element to be removed from this Vector if present
2592	add	index	index at which the specified element is to be inserted
2592	add	element	element to be inserted
2593	remove	index	the index of the element to be removed
2595	containsAll	c	a collection whose elements will be tested for containment in this Vector
2596	addAll	c	elements to be inserted into this Vector
2597	removeAll	c	a collection of elements to be removed from the Vector
2598	retainAll	c	a collection of elements to be retained in this Vector all other elements are removed
2599	addAll	index	index at which to insert the first element from the specified collection
2599	addAll	c	elements to be inserted into this Vector
2600	equals	o	the Object to be compared for equality with this Vector
2603	subList	fromIndex	low endpoint inclusive of the subList
2603	subList	toIndex	high endpoint exclusive of the subList
2613	ensureCapacity	wordsRequired	the minimum acceptable number of words
2614	expandTo	wordIndex	the index to be accommodated
2616	flip	bitIndex	the index of the bit to flip
2617	flip	fromIndex	index of the first bit to flip
2617	flip	toIndex	index after the last bit to flip
2618	set	bitIndex	a bit index
2619	set	bitIndex	a bit index
2619	set	value	a boolean value to set
2620	set	fromIndex	index of the first bit to be set
2620	set	toIndex	index after the last bit to be set
2621	set	fromIndex	index of the first bit to be set
2621	set	toIndex	index after the last bit to be set
2621	set	value	value to set the selected bits to
2622	clear	bitIndex	the index of the bit to be cleared
2623	clear	fromIndex	index of the first bit to be cleared
2623	clear	toIndex	index after the last bit to be cleared
2625	get	bitIndex	the bit index
2626	get	fromIndex	index of the first bit to include
2626	get	toIndex	index after the last bit to include
2627	nextSetBit	fromIndex	the index to start checking from inclusive
2628	nextClearBit	fromIndex	the index to start checking from inclusive
2631	intersects	set	code BitSet to intersect with
2633	and	set	a bit set
2634	or	set	a bit set
2635	xor	set	a bit set
2636	andNot	set	the code BitSet with which to mask this code BitSet
2639	equals	obj	the object to compare with
2647	update	b	the array of bytes to update the checksum with
2650	write	b	the byte to be written
2651	write	b	the data to be written
2651	write	off	the start offset of the data
2651	write	len	the number of bytes to be written
2654	setTime	time	the entry modification time in number of milliseconds since the epoch
2656	setSize	size	the uncompressed size in bytes
2659	setCompressedSize	csize	the compressed size to set to
2660	setCrc	crc	the CRC value
2662	setMethod	method	the compression method either STORED or DEFLATED
2664	setExtra	extra	the extra field data bytes
2666	setComment	comment	the comment string
2672	setInput	b	the input data bytes
2672	setInput	off	the start offset of the input data
2672	setInput	len	the length of the input data
2673	setInput	b	the input data bytes
2674	setDictionary	b	the dictionary data bytes
2674	setDictionary	off	the start offset of the data
2674	setDictionary	len	the length of the data
2675	setDictionary	b	the dictionary data bytes
2680	inflate	b	the buffer for the uncompressed data
2680	inflate	off	the start offset of the data
2680	inflate	len	the maximum number of uncompressed bytes
2681	inflate	b	the buffer for the uncompressed data
2690	write	b	the byte to be written
2691	write	b	the data to be written
2691	write	off	the start offset of the data
2691	write	len	the length of the data
2699	write	b	a single byte of compressed data to decompress and write to the output stream
2700	write	b	buffer containing compressed data to decompress and write to the output stream
2700	write	off	starting offset of the compressed data within code b
2700	write	len	number of bytes to decompress from code b
2701	update	b	the byte to update the checksum with
2702	update	b	the byte array to update the checksum with
2702	update	off	the start offset of the data
2702	update	len	the number of bytes to use for the update
2706	read	buf	the buffer into which the data is read
2706	read	off	the start offset in the destination array b
2706	read	len	the maximum number of bytes read
2709	setComment	comment	the comment string
2710	setMethod	method	the default compression method
2711	setLevel	level	the compression level 
2712	putNextEntry	e	the ZIP entry to be written
2714	write	b	the data to be written
2714	write	off	the start offset in the data
2714	write	len	the number of bytes that are written
2717	getEntry	name	the name of the entry
2718	getInputStream	entry	the zip file entry
2727	read	b	the buffer into which the data is read
2727	read	off	the start offset in the destination array b
2727	read	len	the maximum number of bytes read
2729	skip	n	the number of bytes to skip
2733	mark	readlimit	the maximum limit of bytes that can be read before the mark position becomes invalid
2736	read	buf	the buffer into which the data is read
2736	read	off	the start offset in the destination array b
2736	read	len	the maximum number of bytes read
2737	skip	n	the number of bytes to skip
2743	read	b	the buffer into which the data is read
2743	read	off	the start offset in the destination array b
2743	read	len	the maximum number of bytes read
2744	skip	n	the number of bytes to skip
2746	createZipEntry	name	the ZIP file entry name
2750	read	b	buffer into which the data is read
2750	read	off	starting offset of the data within code b
2750	read	len	maximum number of compressed bytes to read into code b
2751	skip	n	number of bytes to be skipped
2754	mark	limit	maximum bytes that can be read before invalidating the position marker
2756	update	b	an array of bytes
2761	write	buf	the data to be written
2761	write	off	the start offset of the data
2761	write	len	the length of the data
2763	setInput	b	the input data bytes
2763	setInput	off	the start offset of the data
2763	setInput	len	the length of the data
2764	setInput	b	the input data bytes
2765	setDictionary	b	the dictionary data bytes
2765	setDictionary	off	the start offset of the data
2765	setDictionary	len	the length of the data
2766	setDictionary	b	the dictionary data bytes
2767	setStrategy	strategy	the new compression strategy
2768	setLevel	level	the new compression level 
2772	deflate	b	the buffer for the compressed data
2772	deflate	off	the start offset of the data
2772	deflate	len	the maximum number of bytes of compressed data
2773	deflate	b	the buffer for the compressed data
2789	containsKey	key	The key whose presence in this map is to be tested
2791	put	key	key with which the specified value is to be associated
2791	put	value	value to be associated with the specified key
2794	resize	newCapacity	the new capacity MUST be a power of two must be greater than current capacity unless current capacity is MAXIMUM_CAPACITY in which case value is irrelevant
2796	putAll	m	mappings to be stored in this map
2797	remove	key	key whose mapping is to be removed from the map
2801	containsValue	value	value whose presence in this map is to be tested
2822	contains	o	object to be checked for containment in this set
2823	add	e	element to be added to this set
2824	remove	o	object to be removed from this set if present
2826	addAll	c	collection containing elements to be added to this set
2844	init	mask	the actions mask to use
2845	implies	p	the permission to check against
2846	equals	obj	the object we are testing for equality with this object
2848	getMask	action	the action string
2855	add	permission	the Permission object to add
2856	implies	p	the Permission object to compare
2862	ensureCapacity	minCapacity	the desired minimum capacity
2865	contains	o	element whose presence in this list is to be tested
2870	toArray	a	the array into which the elements of the list are to be stored if it is big enough otherwise a new array of the same runtime type is allocated for this purpose
2871	get	index	index of the element to return
2872	set	index	index of the element to replace
2872	set	element	element to be stored at the specified position
2873	add	e	element to be appended to this list
2874	add	index	index at which the specified element is to be inserted
2874	add	element	element to be inserted
2875	remove	index	the index of the element to be removed
2876	remove	o	element to be removed from this list if present
2878	addAll	c	collection containing elements to be added to this list
2879	addAll	index	index at which to insert the first element from the specified collection
2879	addAll	c	collection containing elements to be added to this list
2884	removeAll	c	collection containing elements to be removed from this list
2885	retainAll	c	collection containing elements to be retained in this list
2892	lowerEntry	key	the key
2893	lowerKey	key	the key
2894	floorEntry	key	the key
2895	floorKey	key	the key
2896	ceilingEntry	key	the key
2897	ceilingKey	key	the key
2898	higherEntry	key	the key
2899	higherKey	key	the key
2907	subMap	fromKey	low endpoint of the keys in the returned map
2907	subMap	fromInclusive	code true if the low endpoint is to be included in the returned view
2907	subMap	toKey	high endpoint of the keys in the returned map
2907	subMap	toInclusive	code true if the high endpoint is to be included in the returned view
2908	headMap	toKey	high endpoint of the keys in the returned map
2908	headMap	inclusive	code true if the high endpoint is to be included in the returned view
2909	tailMap	fromKey	low endpoint of the keys in the returned map
2909	tailMap	inclusive	code true if the low endpoint is to be included in the returned view
2918	compare	o1	the first object to be compared
2918	compare	o2	the second object to be compared
2919	equals	obj	the reference object with which to compare
2921	containsKey	key	key whose presence in this map is to be tested
2922	containsValue	value	value whose presence in this map is to be tested
2926	putAll	map	mappings to be stored in this map
2933	put	key	key with which the specified value is to be associated
2933	put	value	value to be associated with the specified key
2934	remove	key	key for which mapping should be removed
2980	buildFromSorted	size	the number of keys or keyvalue pairs to be read from the iterator or stream
2980	buildFromSorted	it	If nonnull new entries are created from entries or keys read from this iterator
2980	buildFromSorted	str	If nonnull new entries are created from keys and possibly values read from this stream in serialized form
2980	buildFromSorted	defaultVal	if nonnull this default value is used for each value in the map
2981	buildFromSorted	level	the current level of tree
2981	buildFromSorted	lo	the first element index of this subtree
2981	buildFromSorted	hi	the last element index of this subtree
2981	buildFromSorted	redLevel	the level at which nodes should be red
3010	listIterator	index	index of first element to be returned from the list iterator by a call to the next method
3017	formatTo	formatter	The link Formatter formatter
3017	formatTo	flags	The flags modify the output format
3017	formatTo	width	The minimum number of characters to be written to the output
3017	formatTo	precision	The maximum number of characters to be written to the output
3018	error	msg	a descriptive string may be null
3018	error	ex	an exception may be null
3018	error	code	an error code defined in ErrorManager
3019	publish	record	description of the log event
3022	setFormatter	newFormatter	the Formatter to use may not be null
3024	setEncoding	encoding	The name of a supported character encoding
3026	setFilter	newFilter	a Filter object may be null
3028	setErrorManager	em	the new ErrorManager
3030	reportError	msg	a descriptive string may be null
3030	reportError	ex	an exception may be null
3030	reportError	code	an error code defined in ErrorManager
3031	setLevel	newLevel	the new value for the log level
3033	isLoggable	record	a LogRecord
3034	publish	record	description of the log event
3038	setPushLevel	newLevel	the new value of the pushLevel
3040	isLoggable	record	a LogRecord
3041	isLoggable	record	a LogRecord
3042	format	record	the log record to be formatted
3043	getHead	h	The target handler can be null
3044	getTail	h	The target handler can be null
3045	format	record	the log record to be formatted
3046	getHead	h	The target handler can be null
3047	getTail	h	The target handler can be null
3048	formatMessage	record	the log record containing the raw message
3054	parse	name	string to be parsed
3058	publish	record	description of the log event
3059	setOutputStream	out	New output stream
3060	setEncoding	encoding	The name of a supported character encoding
3061	publish	record	description of the log event
3062	isLoggable	record	a LogRecord
3065	format	record	the log record to be formatted
3067	addPropertyChangeListener	l	event listener
3068	removePropertyChangeListener	l	event listener can be null
3069	addLogger	logger	the new logger
3070	getLogger	name	name of the logger
3074	readConfiguration	ins	stream to read properties from
3075	getProperty	name	property name
3079	setLoggerName	name	the source logger name may be null
3081	setResourceBundle	bundle	localization bundle may be null
3083	setResourceBundleName	name	localization bundle name may be null
3085	setLevel	level	the logging message level
3089	setSourceClassName	sourceClassName	the source class name may be null
3091	setSourceMethodName	sourceMethodName	the source method name may be null
3093	setMessage	message	the raw message string may be null
3095	setParameters	parameters	the log message parameters
3097	setThreadID	threadID	the thread ID
3099	setMillis	millis	event time in millis since 
3101	setThrown	thrown	a throwable may be null
3103	publish	record	description of the log event
3105	getLogger	name	A name for the logger
3106	getLogger	name	A name for the logger
3106	getLogger	resourceBundleName	name of ResourceBundle to be used for localizing messages for this logger
3108	getAnonymousLogger	resourceBundleName	name of ResourceBundle to be used for localizing messages for this logger
3111	setFilter	newFilter	a filter object may be null
3113	log	record	the LogRecord to be published
3114	log	level	One of the message level identifiers e
3114	log	msg	The string message or a key in the message catalog
3115	log	level	One of the message level identifiers e
3115	log	msg	The string message or a key in the message catalog
3115	log	param1	parameter to the message
3116	log	level	One of the message level identifiers e
3116	log	msg	The string message or a key in the message catalog
3116	log	params	array of parameters to the message
3117	log	level	One of the message level identifiers e
3117	log	msg	The string message or a key in the message catalog
3117	log	thrown	Throwable associated with log message
3118	logp	level	One of the message level identifiers e
3118	logp	sourceClass	name of class that issued the logging request
3118	logp	sourceMethod	name of method that issued the logging request
3118	logp	msg	The string message or a key in the message catalog
3119	logp	level	One of the message level identifiers e
3119	logp	sourceClass	name of class that issued the logging request
3119	logp	sourceMethod	name of method that issued the logging request
3119	logp	msg	The string message or a key in the message catalog
3119	logp	param1	Parameter to the log message
3120	logp	level	One of the message level identifiers e
3120	logp	sourceClass	name of class that issued the logging request
3120	logp	sourceMethod	name of method that issued the logging request
3120	logp	msg	The string message or a key in the message catalog
3120	logp	params	Array of parameters to the message
3121	logp	level	One of the message level identifiers e
3121	logp	sourceClass	name of class that issued the logging request
3121	logp	sourceMethod	name of method that issued the logging request
3121	logp	msg	The string message or a key in the message catalog
3121	logp	thrown	Throwable associated with log message
3122	logrb	level	One of the message level identifiers e
3122	logrb	sourceClass	name of class that issued the logging request
3122	logrb	sourceMethod	name of method that issued the logging request
3122	logrb	bundleName	name of resource bundle to localize msg can be null
3122	logrb	msg	The string message or a key in the message catalog
3123	logrb	level	One of the message level identifiers e
3123	logrb	sourceClass	name of class that issued the logging request
3123	logrb	sourceMethod	name of method that issued the logging request
3123	logrb	bundleName	name of resource bundle to localize msg can be null
3123	logrb	msg	The string message or a key in the message catalog
3123	logrb	param1	Parameter to the log message
3124	logrb	level	One of the message level identifiers e
3124	logrb	sourceClass	name of class that issued the logging request
3124	logrb	sourceMethod	name of method that issued the logging request
3124	logrb	bundleName	name of resource bundle to localize msg can be null
3124	logrb	msg	The string message or a key in the message catalog
3124	logrb	params	Array of parameters to the message
3125	logrb	level	One of the message level identifiers e
3125	logrb	sourceClass	name of class that issued the logging request
3125	logrb	sourceMethod	name of method that issued the logging request
3125	logrb	bundleName	name of resource bundle to localize msg can be null
3125	logrb	msg	The string message or a key in the message catalog
3125	logrb	thrown	Throwable associated with log message
3126	entering	sourceClass	name of class that issued the logging request
3126	entering	sourceMethod	name of method that is being entered
3127	entering	sourceClass	name of class that issued the logging request
3127	entering	sourceMethod	name of method that is being entered
3127	entering	param1	parameter to the method being entered
3128	entering	sourceClass	name of class that issued the logging request
3128	entering	sourceMethod	name of method that is being entered
3128	entering	params	array of parameters to the method being entered
3129	exiting	sourceClass	name of class that issued the logging request
3129	exiting	sourceMethod	name of the method
3130	exiting	sourceClass	name of class that issued the logging request
3130	exiting	sourceMethod	name of the method
3130	exiting	result	Object that is being returned
3131	throwing	sourceClass	name of class that issued the logging request
3131	throwing	sourceMethod	name of the method
3131	throwing	thrown	The Throwable that is being thrown
3132	severe	msg	The string message or a key in the message catalog
3133	warning	msg	The string message or a key in the message catalog
3134	info	msg	The string message or a key in the message catalog
3135	config	msg	The string message or a key in the message catalog
3136	fine	msg	The string message or a key in the message catalog
3137	finer	msg	The string message or a key in the message catalog
3138	finest	msg	The string message or a key in the message catalog
3139	setLevel	newLevel	the new value for the log level may be null
3141	isLoggable	level	a message logging level
3143	addHandler	handler	a logging Handler
3144	removeHandler	handler	a logging Handler
3146	setUseParentHandlers	useParentHandlers	true if output is to be sent to the logger's parent
3149	setParent	parent	the new parent logger
3151	getLoggerLevel	loggerName	The name of the Logger to be retrieved
3152	setLoggerLevel	loggerName	The name of the Logger to be set
3152	setLoggerLevel	levelName	The name of the level to set the specified logger to or null if to set the level to inherit from its nearest ancestor
3153	getParentLoggerName	loggerName	The name of a Logger
3154	publish	record	description of the log event
3157	addFirst	e	the element to add
3158	addLast	e	the element to add
3159	offerFirst	e	the element to add
3160	offerLast	e	the element to add
3169	removeFirstOccurrence	o	element to be removed from this deque if present
3170	removeLastOccurrence	o	element to be removed from this deque if present
3171	add	e	the element to add
3172	offer	e	the element to add
3177	push	e	the element to push
3179	remove	o	element to be removed from this deque if present
3180	contains	o	element whose presence in this deque is to be tested
3188	get	key	a key in this dictionary
3189	put	key	the hashtable key
3189	put	value	the value
3190	remove	key	the key that needs to be removed
3194	tryLock	time	the maximum time to wait for the lock
3194	tryLock	unit	the time unit of the code time argument
3199	awaitNanos	nanosTimeout	the maximum time to wait in nanoseconds
3200	await	time	the maximum time to wait
3200	await	unit	the time unit of the code time argument
3201	awaitUntil	deadline	the absolute time to wait until
3208	unpark	thread	the thread to unpark or code null in which case this operation has no effect
3209	park	blocker	the synchronization object responsible for this thread parking
3210	parkNanos	blocker	the synchronization object responsible for this thread parking
3210	parkNanos	nanos	the maximum number of nanoseconds to wait
3211	parkUntil	blocker	the synchronization object responsible for this thread parking
3211	parkUntil	deadline	the absolute time in milliseconds from the Epoch to wait until
3214	parkNanos	nanos	the maximum number of nanoseconds to wait
3215	parkUntil	deadline	the absolute time in milliseconds from the Epoch to wait until
3217	setState	newState	the new state value
3218	compareAndSetState	expect	the expected value
3218	compareAndSetState	update	the new value
3219	enq	node	the node to insert
3220	addWaiter	mode	Node
3221	setHead	node	the node
3222	unparkSuccessor	node	the node
3224	setHeadAndPropagate	node	the node
3224	setHeadAndPropagate	propagate	the return value from a tryAcquireShared
3225	cancelAcquire	node	the node
3226	shouldParkAfterFailedAcquire	pred	node's predecessor holding status
3226	shouldParkAfterFailedAcquire	node	the node
3229	acquireQueued	node	the node
3229	acquireQueued	arg	the acquire argument
3230	doAcquireInterruptibly	arg	the acquire argument
3231	doAcquireNanos	arg	the acquire argument
3231	doAcquireNanos	nanosTimeout	max wait time
3232	doAcquireShared	arg	the acquire argument
3233	doAcquireSharedInterruptibly	arg	the acquire argument
3234	doAcquireSharedNanos	arg	the acquire argument
3234	doAcquireSharedNanos	nanosTimeout	max wait time
3235	tryAcquire	arg	the acquire argument
3236	tryRelease	arg	the release argument
3237	tryAcquireShared	arg	the acquire argument
3238	tryReleaseShared	arg	the release argument
3240	acquire	arg	the acquire argument
3241	acquireInterruptibly	arg	the acquire argument
3242	tryAcquireNanos	arg	the acquire argument
3242	tryAcquireNanos	nanosTimeout	the maximum number of nanoseconds to wait
3243	release	arg	the release argument
3244	acquireShared	arg	the acquire argument
3245	acquireSharedInterruptibly	arg	the acquire argument This value is conveyed to link tryAcquireShared but is otherwise uninterpreted and can represent anything you like
3246	tryAcquireSharedNanos	arg	the acquire argument
3246	tryAcquireSharedNanos	nanosTimeout	the maximum number of nanoseconds to wait
3247	releaseShared	arg	the release argument
3252	isQueued	thread	the thread
3260	isOnSyncQueue	node	the node
3262	transferForSignal	node	the node
3263	transferAfterCancelledWait	current	the waiting thread
3263	transferAfterCancelledWait	node	its node
3264	fullyRelease	node	the condition node for this wait
3265	owns	condition	the condition
3266	hasWaiters	condition	the condition
3267	getWaitQueueLength	condition	the condition
3268	getWaitingThreads	condition	the condition
3276	doSignal	first	nonnull the first node on condition queue
3277	doSignalAll	first	nonnull the first node on condition queue
3295	doSignal	first	nonnull the first node on condition queue
3296	doSignalAll	first	nonnull the first node on condition queue
3314	doSignal	first	nonnull the first node on condition queue
3315	doSignalAll	first	nonnull the first node on condition queue
3340	hasQueuedThread	thread	the thread
3343	hasWaiters	condition	the condition
3344	getWaitQueueLength	condition	the condition
3345	getWaitingThreads	condition	the condition
3354	readObject	s	the stream
3359	tryLock	timeout	the time to wait for the read lock
3359	tryLock	unit	the time unit of the timeout argument
3366	tryLock	timeout	the time to wait for the write lock
3366	tryLock	unit	the time unit of the timeout argument
3379	readObject	s	the stream
3385	tryLock	timeout	the time to wait for the read lock
3385	tryLock	unit	the time unit of the timeout argument
3392	tryLock	timeout	the time to wait for the write lock
3392	tryLock	unit	the time unit of the timeout argument
3405	readObject	s	the stream
3412	tryLock	timeout	the time to wait for the read lock
3412	tryLock	unit	the time unit of the timeout argument
3419	tryLock	timeout	the time to wait for the write lock
3419	tryLock	unit	the time unit of the timeout argument
3428	tryLock	timeout	the time to wait for the lock
3428	tryLock	unit	the time unit of the timeout argument
3437	hasQueuedThread	thread	the thread
3440	hasWaiters	condition	the condition
3441	getWaitQueueLength	condition	the condition
3442	getWaitingThreads	condition	the condition
3446	readObject	s	the stream
3451	readObject	s	the stream
3456	readObject	s	the stream
3460	setState	newState	the new state value
3461	compareAndSetState	expect	the expected value
3461	compareAndSetState	update	the new value
3462	enq	node	the node to insert
3463	addWaiter	mode	Node
3464	setHead	node	the node
3465	unparkSuccessor	node	the node
3467	setHeadAndPropagate	node	the node
3467	setHeadAndPropagate	propagate	the return value from a tryAcquireShared
3468	cancelAcquire	node	the node
3469	shouldParkAfterFailedAcquire	pred	node's predecessor holding status
3469	shouldParkAfterFailedAcquire	node	the node
3472	acquireQueued	node	the node
3472	acquireQueued	arg	the acquire argument
3473	doAcquireInterruptibly	arg	the acquire argument
3474	doAcquireNanos	arg	the acquire argument
3474	doAcquireNanos	nanosTimeout	max wait time
3475	doAcquireShared	arg	the acquire argument
3476	doAcquireSharedInterruptibly	arg	the acquire argument
3477	doAcquireSharedNanos	arg	the acquire argument
3477	doAcquireSharedNanos	nanosTimeout	max wait time
3478	tryAcquire	arg	the acquire argument
3479	tryRelease	arg	the release argument
3480	tryAcquireShared	arg	the acquire argument
3481	tryReleaseShared	arg	the release argument
3483	acquire	arg	the acquire argument
3484	acquireInterruptibly	arg	the acquire argument
3485	tryAcquireNanos	arg	the acquire argument
3485	tryAcquireNanos	nanosTimeout	the maximum number of nanoseconds to wait
3486	release	arg	the release argument
3487	acquireShared	arg	the acquire argument
3488	acquireSharedInterruptibly	arg	the acquire argument This value is conveyed to link tryAcquireShared but is otherwise uninterpreted and can represent anything you like
3489	tryAcquireSharedNanos	arg	the acquire argument
3489	tryAcquireSharedNanos	nanosTimeout	the maximum number of nanoseconds to wait
3490	releaseShared	arg	the release argument
3495	isQueued	thread	the thread
3503	isOnSyncQueue	node	the node
3505	transferForSignal	node	the node
3506	transferAfterCancelledWait	current	the waiting thread
3506	transferAfterCancelledWait	node	its node
3507	fullyRelease	node	the condition node for this wait
3508	owns	condition	the condition
3509	hasWaiters	condition	the condition
3510	getWaitQueueLength	condition	the condition
3511	getWaitingThreads	condition	the condition
3519	doSignal	first	nonnull the first node on condition queue
3520	doSignalAll	first	nonnull the first node on condition queue
3538	doSignal	first	nonnull the first node on condition queue
3539	doSignalAll	first	nonnull the first node on condition queue
3557	doSignal	first	nonnull the first node on condition queue
3558	doSignalAll	first	nonnull the first node on condition queue
3573	newTaskFor	runnable	the runnable task being wrapped
3573	newTaskFor	value	the default value for the returned future
3574	newTaskFor	callable	the callable task being wrapped
3580	awaitTermination	timeout	the maximum time to wait
3580	awaitTermination	unit	the time unit of the timeout argument
3581	submit	task	the task to submit
3582	submit	task	the task to submit
3582	submit	result	the result to return
3583	submit	task	the task to submit
3584	invokeAll	tasks	the collection of tasks
3585	invokeAll	tasks	the collection of tasks
3585	invokeAll	timeout	the maximum time to wait
3585	invokeAll	unit	the time unit of the timeout argument
3586	invokeAny	tasks	the collection of tasks
3587	invokeAny	tasks	the collection of tasks
3587	invokeAny	timeout	the maximum time to wait
3587	invokeAny	unit	the time unit of the timeout argument
3588	add	e	the element to add
3589	offer	e	the element to add
3590	put	e	the element to add
3591	offer	e	the element to add
3591	offer	timeout	This parameter is ignored as the method never blocks
3591	offer	unit	This parameter is ignored as the method never blocks
3601	toArray	a	the array into which the elements of the queue are to be stored if it is big enough otherwise a new array of the same runtime type is allocated for this purpose
3609	await	timeout	the time to wait for the barrier
3609	await	unit	the time unit of the timeout parameter
3617	add	e	the element to add
3623	remove	o	element to be removed from this queue if present
3624	contains	o	object to be checked for containment in this queue
3626	toArray	a	the array into which the elements of the queue are to be stored if it is big enough otherwise a new array of the same runtime type is allocated for this purpose
3636	offer	e	the element to add
3644	contains	o	the element
3645	remove	o	the element to remove
3646	containsAll	c	the collection
3647	removeAll	c	the collection
3648	retainAll	c	the collection
3652	toArray	a	the array
3655	writeObject	s	the stream
3656	transfer	e	if nonnull the item to be handed to a consumer if null requests that transfer return an item offered by producer
3656	transfer	timed	if this operation should timeout
3656	transfer	nanos	the timeout in nanoseconds
3660	awaitFulfill	s	the waiting node
3660	awaitFulfill	timed	true if timed wait
3660	awaitFulfill	nanos	timeout value
3663	tryMatch	s	the node to match
3669	awaitFulfill	s	the waiting node
3669	awaitFulfill	e	the comparison value for checking match
3669	awaitFulfill	timed	true if timed wait
3669	awaitFulfill	nanos	timeout value
3673	transfer	e	if nonnull the item to be handed to a consumer if null requests that transfer return an item offered by producer
3673	transfer	timed	if this operation should timeout
3673	transfer	nanos	the timeout in nanoseconds
3677	awaitFulfill	s	the waiting node
3677	awaitFulfill	timed	true if timed wait
3677	awaitFulfill	nanos	timeout value
3680	tryMatch	s	the node to match
3682	tryMatch	s	the node to match
3688	awaitFulfill	s	the waiting node
3688	awaitFulfill	e	the comparison value for checking match
3688	awaitFulfill	timed	true if timed wait
3688	awaitFulfill	nanos	timeout value
3694	transfer	e	if nonnull the item to be handed to a consumer if null requests that transfer return an item offered by producer
3694	transfer	timed	if this operation should timeout
3694	transfer	nanos	the timeout in nanoseconds
3698	awaitFulfill	s	the waiting node
3698	awaitFulfill	timed	true if timed wait
3698	awaitFulfill	nanos	timeout value
3701	tryMatch	s	the node to match
3703	tryMatch	s	the node to match
3705	tryMatch	s	the node to match
3711	awaitFulfill	s	the waiting node
3711	awaitFulfill	e	the comparison value for checking match
3711	awaitFulfill	timed	true if timed wait
3711	awaitFulfill	nanos	timeout value
3721	contains	o	element whose presence in this set is to be tested
3723	toArray	a	the array into which the elements of this set are to be stored if it is big enough otherwise a new array of the same runtime type is allocated for this purpose
3725	remove	o	object to be removed from this set if present
3726	add	e	element to be added to this set
3727	containsAll	c	collection to be checked for containment in this set
3728	addAll	c	collection containing elements to be added to this set
3729	removeAll	c	collection containing elements to be removed from this set
3730	retainAll	c	collection containing elements to be retained in this set
3732	equals	o	object to be compared for equality with this set
3734	submit	task	the task to submit
3735	submit	task	the task to submit
3735	submit	result	the result to return upon successful completion
3738	poll	timeout	how long to wait before giving up in units of unit
3738	poll	unit	a TimeUnit determining how to interpret the timeout parameter
3740	set	newValue	the new value
3741	lazySet	newValue	the new value
3742	compareAndSet	expect	the expected value
3742	compareAndSet	update	the new value
3743	weakCompareAndSet	expect	the expected value
3743	weakCompareAndSet	update	the new value
3744	getAndSet	newValue	the new value
3747	get	i	the index
3748	set	i	the index
3748	set	newValue	the new value
3749	lazySet	i	the index
3749	lazySet	newValue	the new value
3750	getAndSet	i	the index
3750	getAndSet	newValue	the new value
3751	compareAndSet	i	the index
3751	compareAndSet	expect	the expected value
3751	compareAndSet	update	the new value
3752	weakCompareAndSet	i	the index
3752	weakCompareAndSet	expect	the expected value
3752	weakCompareAndSet	update	the new value
3754	readObject	s	the stream
3756	get	i	the index
3757	set	i	the index
3757	set	newValue	the new value
3758	lazySet	i	the index
3758	lazySet	newValue	the new value
3759	getAndSet	i	the index
3759	getAndSet	newValue	the new value
3760	compareAndSet	i	the index
3760	compareAndSet	expect	the expected value
3760	compareAndSet	update	the new value
3761	weakCompareAndSet	i	the index
3761	weakCompareAndSet	expect	the expected value
3761	weakCompareAndSet	update	the new value
3762	getAndIncrement	i	the index
3763	getAndDecrement	i	the index
3764	getAndAdd	i	the index
3764	getAndAdd	delta	the value to add
3765	incrementAndGet	i	the index
3766	decrementAndGet	i	the index
3767	addAndGet	i	the index
3767	addAndGet	delta	the value to add
3770	get	i	the index
3771	set	i	the index
3771	set	newValue	the new value
3772	lazySet	i	the index
3772	lazySet	newValue	the new value
3773	getAndSet	i	the index
3773	getAndSet	newValue	the new value
3774	compareAndSet	i	the index
3774	compareAndSet	expect	the expected value
3774	compareAndSet	update	the new value
3775	weakCompareAndSet	i	the index
3775	weakCompareAndSet	expect	the expected value
3775	weakCompareAndSet	update	the new value
3776	getAndIncrement	i	the index
3777	getAndDecrement	i	the index
3778	getAndAdd	i	the index
3778	getAndAdd	delta	the value to add
3779	incrementAndGet	i	the index
3780	decrementAndGet	i	the index
3781	addAndGet	i	the index
3781	addAndGet	delta	the value to add
3783	newUpdater	tclass	the class of the objects holding the field
3783	newUpdater	fieldName	the name of the field to be updated
3784	compareAndSet	obj	An object whose field to conditionally set
3784	compareAndSet	expect	the expected value
3784	compareAndSet	update	the new value
3785	weakCompareAndSet	obj	An object whose field to conditionally set
3785	weakCompareAndSet	expect	the expected value
3785	weakCompareAndSet	update	the new value
3786	set	obj	An object whose field to set
3786	set	newValue	the new value
3787	lazySet	obj	An object whose field to set
3787	lazySet	newValue	the new value
3788	get	obj	An object whose field to get
3789	getAndSet	obj	An object whose field to get and set
3789	getAndSet	newValue	the new value
3790	getAndIncrement	obj	An object whose field to get and set
3791	getAndDecrement	obj	An object whose field to get and set
3792	getAndAdd	obj	An object whose field to get and set
3792	getAndAdd	delta	the value to add
3793	incrementAndGet	obj	An object whose field to get and set
3794	decrementAndGet	obj	An object whose field to get and set
3795	addAndGet	obj	An object whose field to get and set
3795	addAndGet	delta	the value to add
3796	newUpdater	tclass	the class of the objects holding the field
3796	newUpdater	fieldName	the name of the field to be updated
3797	compareAndSet	obj	An object whose field to conditionally set
3797	compareAndSet	expect	the expected value
3797	compareAndSet	update	the new value
3798	weakCompareAndSet	obj	An object whose field to conditionally set
3798	weakCompareAndSet	expect	the expected value
3798	weakCompareAndSet	update	the new value
3799	set	obj	An object whose field to set
3799	set	newValue	the new value
3800	lazySet	obj	An object whose field to set
3800	lazySet	newValue	the new value
3801	get	obj	An object whose field to get
3802	getAndSet	obj	An object whose field to get and set
3802	getAndSet	newValue	the new value
3803	getAndIncrement	obj	An object whose field to get and set
3804	getAndDecrement	obj	An object whose field to get and set
3805	getAndAdd	obj	An object whose field to get and set
3805	getAndAdd	delta	the value to add
3806	incrementAndGet	obj	An object whose field to get and set
3807	decrementAndGet	obj	An object whose field to get and set
3808	addAndGet	obj	An object whose field to get and set
3808	addAndGet	delta	the value to add
3809	newUpdater	tclass	the class of the objects holding the field
3809	newUpdater	vclass	the class of the field
3809	newUpdater	fieldName	the name of the field to be updated
3810	compareAndSet	obj	An object whose field to conditionally set
3810	compareAndSet	expect	the expected value
3810	compareAndSet	update	the new value
3811	weakCompareAndSet	obj	An object whose field to conditionally set
3811	weakCompareAndSet	expect	the expected value
3811	weakCompareAndSet	update	the new value
3812	set	obj	An object whose field to set
3812	set	newValue	the new value
3813	lazySet	obj	An object whose field to set
3813	lazySet	newValue	the new value
3814	get	obj	An object whose field to get
3815	getAndSet	obj	An object whose field to get and set
3815	getAndSet	newValue	the new value
3818	get	markHolder	an array of size of at least one
3819	weakCompareAndSet	expectedReference	the expected value of the reference
3819	weakCompareAndSet	newReference	the new value for the reference
3819	weakCompareAndSet	expectedMark	the expected value of the mark
3819	weakCompareAndSet	newMark	the new value for the mark
3820	compareAndSet	expectedReference	the expected value of the reference
3820	compareAndSet	newReference	the new value for the reference
3820	compareAndSet	expectedMark	the expected value of the mark
3820	compareAndSet	newMark	the new value for the mark
3821	set	newReference	the new value for the reference
3821	set	newMark	the new value for the mark
3822	attemptMark	expectedReference	the expected value of the reference
3822	attemptMark	newMark	the new value for the mark
3824	compareAndSet	expect	the expected value
3824	compareAndSet	update	the new value
3825	weakCompareAndSet	expect	the expected value
3825	weakCompareAndSet	update	the new value
3826	set	newValue	the new value
3827	lazySet	newValue	the new value
3828	getAndSet	newValue	the new value
3831	set	newValue	the new value
3832	lazySet	newValue	the new value
3833	getAndSet	newValue	the new value
3834	compareAndSet	expect	the expected value
3834	compareAndSet	update	the new value
3835	weakCompareAndSet	expect	the expected value
3835	weakCompareAndSet	update	the new value
3838	getAndAdd	delta	the value to add
3841	addAndGet	delta	the value to add
3845	get	stampHolder	an array of size of at least one
3846	weakCompareAndSet	expectedReference	the expected value of the reference
3846	weakCompareAndSet	newReference	the new value for the reference
3846	weakCompareAndSet	expectedStamp	the expected value of the stamp
3846	weakCompareAndSet	newStamp	the new value for the stamp
3847	compareAndSet	expectedReference	the expected value of the reference
3847	compareAndSet	newReference	the new value for the reference
3847	compareAndSet	expectedStamp	the expected value of the stamp
3847	compareAndSet	newStamp	the new value for the stamp
3848	set	newReference	the new value for the reference
3848	set	newStamp	the new value for the stamp
3849	attemptStamp	expectedReference	the expected value of the reference
3849	attemptStamp	newStamp	the new value for the stamp
3852	set	newValue	the new value
3853	lazySet	newValue	the new value
3854	getAndSet	newValue	the new value
3855	compareAndSet	expect	the expected value
3855	compareAndSet	update	the new value
3856	weakCompareAndSet	expect	the expected value
3856	weakCompareAndSet	update	the new value
3859	getAndAdd	delta	the value to add
3862	addAndGet	delta	the value to add
3893	remove	o	element to be removed from this deque if present
3895	contains	o	object to be checked for containment in this deque
3898	toArray	a	the array into which the elements of the deque are to be stored if it is big enough otherwise a new array of the same runtime type is allocated for this purpose
3902	writeObject	s	the stream
3903	readObject	s	the stream
3910	contains	o	object to be checked for containment in this set
3911	add	e	element to be added to this set
3912	remove	o	object to be removed from this set if present
3916	equals	o	the object to be compared for equality with this set
3917	removeAll	c	collection containing elements to be removed from this set
3941	putIfAbsent	key	key with which the specified value is to be associated
3941	putIfAbsent	value	value to be associated with the specified key
3942	remove	key	key with which the specified value is associated
3942	remove	value	value expected to be associated with the specified key
3943	replace	key	key with which the specified value is associated
3943	replace	oldValue	value expected to be associated with the specified key
3943	replace	newValue	value to be associated with the specified key
3944	replace	key	key with which the specified value is associated
3944	replace	value	value to be associated with the specified key
3952	findPredecessor	key	the key
3953	findNode	key	the key
3954	doGet	okey	the key
3955	getUsingFindNode	key	the key
3956	doPut	kkey	the key
3956	doPut	value	the value that must be associated with key
3956	doPut	onlyIfAbsent	if should not insert if already present
3958	insertIndex	z	the node
3958	insertIndex	level	the level of the index
3959	addIndex	idx	the topmost index node being inserted
3959	addIndex	h	the value of head to use to insert
3959	addIndex	indexLevel	the level of the index
3960	doRemove	okey	the key
3960	doRemove	value	if nonnull the value that must be associated with key
3968	findNear	kkey	the key
3968	findNear	rel	the relation OR'ed combination of EQ LT GT
3969	getNear	key	the key
3969	getNear	rel	the relation OR'ed combination of EQ LT GT
3974	containsKey	key	key whose presence in this map is to be tested
3976	put	key	key with which the specified value is to be associated
3976	put	value	value to be associated with the specified key
3977	remove	key	key for which mapping should be removed
3978	containsValue	value	value whose presence in this map is to be tested
3985	equals	o	object to be compared for equality with this map
4000	floorEntry	key	the key
4001	floorKey	key	the key
4004	higherEntry	key	the key
4005	higherKey	key	the key
4012	isMarker	n	a possibly null reference to a node
4014	appendMarker	f	the assumed current successor of this node
4015	helpDelete	b	predecessor
4015	helpDelete	f	successor
4020	link	succ	the expected current successor
4020	link	newSucc	the new successor
4021	unlink	succ	the expected current successor
4032	isMarker	n	a possibly null reference to a node
4034	appendMarker	f	the assumed current successor of this node
4035	helpDelete	b	predecessor
4035	helpDelete	f	successor
4040	link	succ	the expected current successor
4040	link	newSucc	the new successor
4041	unlink	succ	the expected current successor
4052	isMarker	n	a possibly null reference to a node
4054	appendMarker	f	the assumed current successor of this node
4055	helpDelete	b	predecessor
4055	helpDelete	f	successor
4060	link	succ	the expected current successor
4060	link	newSucc	the new successor
4061	unlink	succ	the expected current successor
4071	convert	sourceDuration	the time duration in the given sourceUnit
4071	convert	sourceUnit	the unit of the sourceDuration argument
4072	toNanos	duration	the duration
4073	toMicros	duration	the duration
4074	toMillis	duration	the duration
4075	toSeconds	duration	the duration
4076	toMinutes	duration	the duration
4077	toHours	duration	the duration
4078	toDays	duration	the duration
4079	excessNanos	d	the duration
4079	excessNanos	m	the number of milliseconds
4080	timedWait	obj	the object to wait on
4080	timedWait	timeout	the maximum time to wait
4081	timedJoin	thread	the thread to wait for
4081	timedJoin	timeout	the maximum time to wait
4082	sleep	timeout	the minimum time to sleep
4086	advanceRunState	targetState	the desired state either SHUTDOWN or STOP but not TIDYING or TERMINATED use tryTerminate for that
4090	interruptIdleWorkers	onlyOne	If true interrupt at most one worker
4095	isRunningOrShutdown	shutdownOK	true if should return true if SHUTDOWN
4097	addWorker	firstTask	the task the new thread should run first or null if none
4097	addWorker	core	if true use corePoolSize as bound else maximumPoolSize
4098	processWorkerExit	w	the worker
4098	processWorkerExit	completedAbruptly	if the worker died due to user exception
4100	runWorker	w	the worker
4101	execute	command	the task to execute
4106	setThreadFactory	threadFactory	the new thread factory
4108	setRejectedExecutionHandler	handler	the new handler
4110	setCorePoolSize	corePoolSize	the new core size
4115	allowCoreThreadTimeOut	value	code true if should time out else code false
4116	setMaximumPoolSize	maximumPoolSize	the new maximum
4118	setKeepAliveTime	time	the time to wait
4118	setKeepAliveTime	unit	the time unit of the code time argument
4119	getKeepAliveTime	unit	the desired time unit of the result
4121	remove	task	the task to remove
4128	beforeExecute	t	the thread that will run task code r
4128	beforeExecute	r	the task that will be executed
4129	afterExecute	r	the runnable that has completed
4129	afterExecute	t	the exception that caused termination or null if execution completed normally
4132	rejectedExecution	r	the runnable task requested to be executed
4132	rejectedExecution	e	the executor attempting to execute this task
4133	rejectedExecution	r	the runnable task requested to be executed
4133	rejectedExecution	e	the executor attempting to execute this task
4134	rejectedExecution	r	the runnable task requested to be executed
4134	rejectedExecution	e	the executor attempting to execute this task
4135	rejectedExecution	r	the runnable task requested to be executed
4135	rejectedExecution	e	the executor attempting to execute this task
4137	rejectedExecution	r	the runnable task requested to be executed
4137	rejectedExecution	e	the executor attempting to execute this task
4138	rejectedExecution	r	the runnable task requested to be executed
4138	rejectedExecution	e	the executor attempting to execute this task
4139	rejectedExecution	r	the runnable task requested to be executed
4139	rejectedExecution	e	the executor attempting to execute this task
4140	rejectedExecution	r	the runnable task requested to be executed
4140	rejectedExecution	e	the executor attempting to execute this task
4142	rejectedExecution	r	the runnable task requested to be executed
4142	rejectedExecution	e	the executor attempting to execute this task
4143	rejectedExecution	r	the runnable task requested to be executed
4143	rejectedExecution	e	the executor attempting to execute this task
4144	rejectedExecution	r	the runnable task requested to be executed
4144	rejectedExecution	e	the executor attempting to execute this task
4145	rejectedExecution	r	the runnable task requested to be executed
4145	rejectedExecution	e	the executor attempting to execute this task
4147	getDelay	unit	the time unit
4153	indexOf	o	element to search for
4153	indexOf	elements	the array
4153	indexOf	index	first index to search
4153	indexOf	fence	one past last index to search
4154	lastIndexOf	o	element to search for
4154	lastIndexOf	elements	the array
4154	lastIndexOf	index	first index to search
4155	contains	o	element whose presence in this list is to be tested
4157	indexOf	e	element to search for
4157	indexOf	index	index to start searching from
4159	lastIndexOf	e	element to search for
4159	lastIndexOf	index	index to start searching backwards from
4162	toArray	a	the array into which the elements of the list are to be stored if it is big enough otherwise a new array of the same runtime type is allocated for this purpose
4165	add	e	element to be appended to this list
4168	remove	o	element to be removed from this list if present
4169	removeRange	fromIndex	index of first element to be removed
4169	removeRange	toIndex	index after last element to be removed
4170	addIfAbsent	e	element to be added to this list if absent
4171	containsAll	c	collection to be checked for containment in this list
4172	removeAll	c	collection containing elements to be removed from this list
4173	retainAll	c	collection containing elements to be retained in this list
4174	addAllAbsent	c	collection containing elements to be added to this list
4176	addAll	c	collection containing elements to be added to this list
4177	addAll	index	index at which to insert the first element from the specified collection
4177	addAll	c	collection containing elements to be added to this list
4178	writeObject	s	the stream
4179	readObject	s	the stream
4181	equals	o	the object to be compared for equality with this list
4186	subList	fromIndex	low endpoint inclusive of the subList
4186	subList	toIndex	high endpoint exclusive of the subList
4196	doExchange	item	the nonnull item to exchange
4196	doExchange	timed	true if the wait is timed
4196	doExchange	nanos	if timed the maximum wait time
4198	createSlot	index	the index to add slot at
4199	tryCancel	node	the waiting node
4199	tryCancel	the	slot it is waiting in
4200	spinWait	node	the waiting node
4201	await	node	the waiting node
4202	awaitNanos	node	the waiting node
4202	awaitNanos	nanos	the wait time
4203	scanOnTimeout	node	the waiting node
4204	exchange	x	the object to exchange
4205	exchange	x	the object to exchange
4205	exchange	timeout	the maximum time to wait
4205	exchange	unit	the time unit of the timeout argument
4206	add	e	the element to add
4207	offer	e	the element to add
4208	put	e	the element to add
4209	offer	e	the element to add
4209	offer	timeout	how long to wait before giving up in units of unit
4209	offer	unit	a TimeUnit determining how to interpret the timeout parameter
4211	poll	timeout	how long to wait before giving up in units of unit
4211	poll	unit	a TimeUnit determining how to interpret the timeout parameter
4213	remove	o	element to be removed from this queue if present
4214	contains	o	object to be checked for containment in this queue
4215	drainTo	c	the collection to transfer elements into
4216	drainTo	c	the collection to transfer elements into
4216	drainTo	maxElements	the maximum number of elements to transfer
4217	newThread	r	a runnable to be executed by new thread instance
4221	set	v	the value
4222	setException	t	the cause of failure
4231	schedule	command	the task to execute
4231	schedule	delay	the time from now to delay execution
4231	schedule	unit	the time unit of the delay parameter
4232	schedule	callable	the function to execute
4232	schedule	delay	the time from now to delay execution
4232	schedule	unit	the time unit of the delay parameter
4233	scheduleAtFixedRate	command	the task to execute
4233	scheduleAtFixedRate	initialDelay	the time to delay first execution
4233	scheduleAtFixedRate	period	the period between successive executions
4233	scheduleAtFixedRate	unit	the time unit of the initialDelay and period parameters
4234	scheduleWithFixedDelay	command	the task to execute
4234	scheduleWithFixedDelay	initialDelay	the time to delay first execution
4234	scheduleWithFixedDelay	delay	the delay between the termination of one execution and the commencement of the next
4234	scheduleWithFixedDelay	unit	the time unit of the initialDelay and delay parameters
4240	contains	o	object to be checked for containment in this queue
4241	remove	o	element to be removed from this queue if present
4243	toArray	a	the array into which the elements of the queue are to be stored if it is big enough otherwise a new array of the same runtime type is allocated for this purpose
4245	writeObject	s	the stream
4246	readObject	s	the stream
4253	tryAcquire	timeout	the maximum time to wait for a permit
4253	tryAcquire	unit	the time unit of the code timeout argument
4255	acquire	permits	the number of permits to acquire
4256	acquireUninterruptibly	permits	the number of permits to acquire
4257	tryAcquire	permits	the number of permits to acquire
4258	tryAcquire	permits	the number of permits to acquire
4258	tryAcquire	timeout	the maximum time to wait for the permits
4258	tryAcquire	unit	the time unit of the code timeout argument
4259	release	permits	the number of permits to release
4262	reducePermits	reduction	the number of permits to remove
4268	cancel	mayInterruptIfRunning	true if the thread executing this task should be interrupted otherwise inprogress tasks are allowed to complete
4272	get	timeout	the maximum time to wait
4272	get	unit	the time unit of the timeout argument
4274	await	timeout	the maximum time to wait
4274	await	unit	the time unit of the code timeout argument
4278	add	e	the element to add
4279	offer	e	the element to add
4280	put	e	the element to add
4281	offer	e	the element to add
4281	offer	timeout	This parameter is ignored as the method never blocks
4281	offer	unit	This parameter is ignored as the method never blocks
4284	remove	o	element to be removed from this queue if present
4285	contains	o	object to be checked for containment in this queue
4290	toArray	a	the array into which the elements of the queue are to be stored if it is big enough otherwise a new array of the same runtime type is allocated for this purpose
4293	rejectedExecution	r	the runnable task requested to be executed
4293	rejectedExecution	executor	the executor attempting to execute this task
4295	segmentFor	hash	the hash code for the key
4299	containsKey	key	possible key
4300	containsValue	value	value whose presence in this map is to be tested
4301	contains	value	a value to search for
4302	put	key	key with which the specified value is to be associated
4302	put	value	value to be associated with the specified key
4304	putAll	m	mappings to be stored in this map
4305	remove	key	the key that needs to be removed
4315	writeObject	s	the stream
4316	readObject	s	the stream
4332	execute	command	the runnable task
4334	canRunInCurrentRunState	periodic	true if this task periodic false if delayed
4335	delayedExecute	task	the task
4336	reExecutePeriodic	task	the task
4338	decorateTask	runnable	the submitted Runnable
4338	decorateTask	task	the task created to execute the runnable
4339	decorateTask	callable	the submitted Callable
4339	decorateTask	task	the task created to execute the callable
4341	setContinueExistingPeriodicTasksAfterShutdownPolicy	value	if code true continue after shutdown else don't
4343	setExecuteExistingDelayedTasksAfterShutdownPolicy	value	if code true execute after shutdown else don't
4357	newFixedThreadPool	nThreads	the number of threads in the pool
4358	newFixedThreadPool	nThreads	the number of threads in the pool
4358	newFixedThreadPool	threadFactory	the factory to use when creating new threads
4360	newSingleThreadExecutor	threadFactory	the factory to use when creating new threads
4362	newCachedThreadPool	threadFactory	the factory to use when creating new threads
4364	newSingleThreadScheduledExecutor	threadFactory	the factory to use when creating new threads
4365	newScheduledThreadPool	corePoolSize	the number of threads to keep in the pool even if they are idle
4366	newScheduledThreadPool	corePoolSize	the number of threads to keep in the pool even if they are idle
4366	newScheduledThreadPool	threadFactory	the factory to use when the executor creates a new thread
4367	unconfigurableExecutorService	executor	the underlying implementation
4368	unconfigurableScheduledExecutorService	executor	the underlying implementation
4371	callable	task	the task to run
4371	callable	result	the result to return
4372	callable	task	the task to run
4373	callable	action	the privileged action to run
4374	callable	action	the privileged exception action to run
4375	privilegedCallable	callable	the underlying task
4376	privilegedCallableUsingCurrentClassLoader	callable	the underlying task
4379	insert	x	the item
4388	remove	o	element to be removed from this queue if present
4390	toArray	a	the array into which the elements of the queue are to be stored if it is big enough otherwise a new array of the same runtime type is allocated for this purpose
4395	writeObject	s	the stream
4396	readObject	s	the stream
4397	addFirst	e	the element to add
4398	addLast	e	the element to add
4399	offerFirst	e	the element to add
4400	offerLast	e	the element to add
4401	putFirst	e	the element to add
4402	putLast	e	the element to add
4403	offerFirst	e	the element to add
4403	offerFirst	timeout	how long to wait before giving up in units of unit
4403	offerFirst	unit	a TimeUnit determining how to interpret the timeout parameter
4404	offerLast	e	the element to add
4404	offerLast	timeout	how long to wait before giving up in units of unit
4404	offerLast	unit	a TimeUnit determining how to interpret the timeout parameter
4407	pollFirst	timeout	how long to wait before giving up in units of unit
4407	pollFirst	unit	a TimeUnit determining how to interpret the timeout parameter
4408	pollLast	timeout	how long to wait before giving up in units of unit
4408	pollLast	unit	a TimeUnit determining how to interpret the timeout parameter
4409	removeFirstOccurrence	o	element to be removed from this deque if present
4410	removeLastOccurrence	o	element to be removed from this deque if present
4411	add	e	the element to add
4412	offer	e	the element to add
4413	put	e	the element to add
4414	offer	e	the element to add
4421	remove	o	element to be removed from this deque if present
4422	contains	o	object to be checked for containment in this deque
4428	containsValue	value	value whose presence in this map is to be tested
4433	removeEldestEntry	eldest	The least recently inserted entry in the map or if this is an accessordered map the least recently accessed entry
4443	push	item	the item to be pushed onto this stack
4447	search	o	the desired object
4448	sort	list	the list to be sorted
4449	sort	list	the list to be sorted
4449	sort	c	the comparator to determine the order of the list
4450	binarySearch	list	the list to be searched
4450	binarySearch	key	the key to be searched for
4452	binarySearch	list	the list to be searched
4452	binarySearch	key	the key to be searched for
4452	binarySearch	c	the comparator by which the list is ordered
4453	reverse	list	the list whose elements are to be reversed
4454	shuffle	list	the list to be shuffled
4455	shuffle	list	the list to be shuffled
4455	shuffle	rnd	the source of randomness to use to shuffle the list
4456	swap	list	The list in which to swap elements
4456	swap	i	the index of one element to be swapped
4456	swap	j	the index of the other element to be swapped
4458	fill	list	the list to be filled with the specified element
4458	fill	obj	The element with which to fill the specified list
4459	copy	dest	The destination list
4459	copy	src	The source list
4460	min	coll	the collection whose minimum element is to be determined
4461	min	coll	the collection whose minimum element is to be determined
4461	min	comp	the comparator with which to determine the minimum element
4462	max	coll	the collection whose maximum element is to be determined
4463	max	coll	the collection whose maximum element is to be determined
4463	max	comp	the comparator with which to determine the maximum element
4464	rotate	list	the list to be rotated
4464	rotate	distance	the distance to rotate the list
4465	replaceAll	list	the list in which replacement is to occur
4465	replaceAll	oldVal	the old value to be replaced
4465	replaceAll	newVal	the new value with which oldVal is to be replaced
4466	indexOfSubList	source	the list in which to search for the first occurrence of target
4466	indexOfSubList	target	the list to search for as a subList of source
4467	lastIndexOfSubList	source	the list in which to search for the last occurrence of target
4467	lastIndexOfSubList	target	the list to search for as a subList of source
4468	unmodifiableCollection	c	the collection for which an unmodifiable view is to be returned
4469	unmodifiableSet	s	the set for which an unmodifiable view is to be returned
4470	unmodifiableSortedSet	s	the sorted set for which an unmodifiable view is to be returned
4471	unmodifiableList	list	the list for which an unmodifiable view is to be returned
4472	unmodifiableMap	m	the map for which an unmodifiable view is to be returned
4473	unmodifiableSortedMap	m	the sorted map for which an unmodifiable view is to be returned
4474	synchronizedCollection	c	the collection to be wrapped in a synchronized collection
4475	synchronizedSet	s	the set to be wrapped in a synchronized set
4476	synchronizedSortedSet	s	the sorted set to be wrapped in a synchronized sorted set
4477	synchronizedList	list	the list to be wrapped in a synchronized list
4478	synchronizedMap	m	the map to be wrapped in a synchronized map
4479	synchronizedSortedMap	m	the sorted map to be wrapped in a synchronized sorted map
4480	checkedCollection	c	the collection for which a dynamically typesafe view is to be returned
4480	checkedCollection	type	the type of element that code c is permitted to hold
4481	checkedSet	s	the set for which a dynamically typesafe view is to be returned
4481	checkedSet	type	the type of element that code s is permitted to hold
4482	checkedSortedSet	s	the sorted set for which a dynamically typesafe view is to be returned
4482	checkedSortedSet	type	the type of element that code s is permitted to hold
4483	checkedList	list	the list for which a dynamically typesafe view is to be returned
4483	checkedList	type	the type of element that code list is permitted to hold
4484	checkedMap	m	the map for which a dynamically typesafe view is to be returned
4484	checkedMap	keyType	the type of key that code m is permitted to hold
4484	checkedMap	valueType	the type of value that code m is permitted to hold
4485	checkedSortedMap	m	the map for which a dynamically typesafe view is to be returned
4485	checkedSortedMap	keyType	the type of key that code m is permitted to hold
4485	checkedSortedMap	valueType	the type of value that code m is permitted to hold
4492	singleton	o	the sole object to be stored in the returned set
4493	singletonList	o	the sole object to be stored in the returned list
4494	singletonMap	key	the sole key to be stored in the returned map
4494	singletonMap	value	the value to which the returned map maps key
4495	nCopies	n	the number of elements in the returned list
4495	nCopies	o	the element to appear repeatedly in the returned list
4498	enumeration	c	the collection for which an enumeration is to be returned
4499	list	e	enumeration providing elements for the returned array list
4501	frequency	c	the collection in which to determine the frequency of o
4501	frequency	o	the object whose frequency is to be determined
4502	disjoint	c1	a collection
4502	disjoint	c2	a collection
4503	addAll	c	the collection into which elements are to be inserted
4503	addAll	elements	the elements to insert into c
4504	newSetFromMap	map	the backing map
4505	asLifoQueue	deque	the deque
4542	compile	regex	The expression to be compiled
4543	compile	regex	The expression to be compiled
4543	compile	flags	Match flags a bit mask that may include link CASE_INSENSITIVE link MULTILINE link DOTALL link UNICODE_CASE link CANON_EQ link UNIX_LINES link LITERAL and link COMMENTS
4546	matcher	input	The character sequence to be matched
4548	matches	regex	The expression to be compiled
4548	matches	input	The character sequence to be matched
4549	split	input	The character sequence to be split
4549	split	limit	The result threshold as described above
4550	split	input	The character sequence to be split
4551	quote	s	The string to be literalized
4620	start	group	The index of a capturing group in this matcher's pattern
4622	end	group	The index of a capturing group in this matcher's pattern
4624	group	group	The index of a capturing group in this matcher's pattern
4632	usePattern	newPattern	The new pattern used by this matcher
4634	reset	input	The new input character sequence
4636	start	group	The index of a capturing group in this matcher's pattern
4638	end	group	The index of a capturing group in this matcher's pattern
4640	group	group	The index of a capturing group in this matcher's pattern
4646	quoteReplacement	s	The string to be literalized
4647	appendReplacement	sb	The target string buffer
4647	appendReplacement	replacement	The replacement string
4648	appendTail	sb	The target string buffer
4649	replaceAll	replacement	The replacement string
4650	replaceFirst	replacement	The replacement string
4651	region	start	The index to start searching at inclusive
4651	region	end	The index to end searching at exclusive
4655	useTransparentBounds	b	a boolean indicating whether to use opaque or transparent regions
4657	useAnchoringBounds	b	a boolean indicating whether or not to use anchoring bounds
4664	getSubSequence	beginIndex	the beginning index inclusive
4664	getSubSequence	endIndex	the ending index exclusive
4666	schedule	task	task to be scheduled
4666	schedule	delay	delay in milliseconds before task is to be executed
4667	schedule	task	task to be scheduled
4667	schedule	time	time at which task is to be executed
4668	schedule	task	task to be scheduled
4668	schedule	delay	delay in milliseconds before task is to be executed
4668	schedule	period	time in milliseconds between successive task executions
4669	schedule	task	task to be scheduled
4669	schedule	firstTime	First time at which task is to be executed
4669	schedule	period	time in milliseconds between successive task executions
4670	scheduleAtFixedRate	task	task to be scheduled
4670	scheduleAtFixedRate	delay	delay in milliseconds before task is to be executed
4670	scheduleAtFixedRate	period	time in milliseconds between successive task executions
4671	scheduleAtFixedRate	task	task to be scheduled
4671	scheduleAtFixedRate	firstTime	First time at which task is to be executed
4671	scheduleAtFixedRate	period	time in milliseconds between successive task executions
4689	subSet	fromElement	low endpoint inclusive of the returned set
4689	subSet	toElement	high endpoint exclusive of the returned set
4690	headSet	toElement	high endpoint exclusive of the returned set
4691	tailSet	fromElement	low endpoint inclusive of the returned set
4694	setStartYear	year	The daylight saving starting year
4695	setStartRule	startMonth	The daylight saving time starting month
4695	setStartRule	startDay	The day of the month on which the daylight saving time starts
4695	setStartRule	startDayOfWeek	The daylight saving time starting dayofweek
4695	setStartRule	startTime	The daylight saving time starting time in local wall clock time which is local standard time in this case
4696	setStartRule	startMonth	The daylight saving time starting month
4696	setStartRule	startDay	The day of the month on which the daylight saving time starts
4696	setStartRule	startTime	The daylight saving time starting time in local wall clock time which is local standard time in this case
4697	setStartRule	startMonth	The daylight saving time starting month
4697	setStartRule	startDay	The day of the month on which the daylight saving time starts
4697	setStartRule	startDayOfWeek	The daylight saving time starting dayofweek
4697	setStartRule	startTime	The daylight saving time starting time in local wall clock time which is local standard time in this case
4697	setStartRule	after	If true this rule selects the first dayOfWeek on or after dayOfMonth
4698	setEndRule	endMonth	The daylight saving time ending month
4698	setEndRule	endDay	The day of the month on which the daylight saving time ends
4698	setEndRule	endDayOfWeek	The daylight saving time ending dayofweek
4698	setEndRule	endTime	The daylight saving ending time in local wall clock time in milliseconds within the day which is local daylight time in this case
4699	setEndRule	endMonth	The daylight saving time ending month
4699	setEndRule	endDay	The day of the month on which the daylight saving time ends
4699	setEndRule	endTime	The daylight saving ending time in local wall clock time in milliseconds within the day which is local daylight time in this case
4700	setEndRule	endMonth	The daylight saving time ending month
4700	setEndRule	endDay	The day of the month on which the daylight saving time ends
4700	setEndRule	endDayOfWeek	The daylight saving time ending dayofweek
4700	setEndRule	endTime	The daylight saving ending time in local wall clock time in milliseconds within the day which is local daylight time in this case
4700	setEndRule	after	If true this rule selects the first endDayOfWeek on or after endDay
4701	getOffset	date	the time at which the time zone offset is found
4703	getOffset	era	The era of the given date
4703	getOffset	year	The year in the given date
4703	getOffset	month	The month in the given date
4703	getOffset	day	The dayinmonth of the given date
4703	getOffset	dayOfWeek	The dayofweek of the given date
4703	getOffset	millis	The milliseconds in day in standard local time
4706	setDSTSavings	millisSavedDuringDST	the number of milliseconds the time is advanced with respect to standard time when the daylight saving time rules are in effect
4712	equals	obj	The SimpleTimeZone object to be compared with
4713	hasSameRules	other	the TimeZone object to be compared with
4725	setGregorianChange	date	the given Gregorian cutover date
4727	isLeapYear	year	the given year
4728	equals	obj	the object to compare with
4730	add	field	the calendar field
4730	add	amount	the amount of date or time to be added to the field
4731	roll	up	indicates if the value of the specified calendar field is to be rolled up or rolled down
4732	roll	field	the calendar field
4732	roll	amount	the signed amount to add to field
4733	getMinimum	field	the calendar field
4734	getMaximum	field	the calendar field
4735	getGreatestMinimum	field	the calendar field
4736	getLeastMaximum	field	the calendar field
4737	getActualMinimum	field	the calendar field
4738	getActualMaximum	field	the calendar field
4741	computeFields	fieldMask	a bit mask to specify which fields to change the setting state
4741	computeFields	tzMask	a bit mask to specify which time zone offset fields to be used for time calculations
4742	getWeekNumber	fixedDay1	the fixed date of the first day of the period
4742	getWeekNumber	fixedDate	the fixed date of the last day of the period
4744	getFixedDate	cal	the CalendarSystem to be used for the date calculation
4744	getFixedDate	year	the normalized year number with indicating the year BCE indicating BCE etc
4744	getFixedDate	fieldMask	the calendar fields to be used for the date calculation
4749	getFixedDateJan1	date	the date for which the first day of the year is calculated
4749	getFixedDateJan1	fixedDate	the fixed date representation of the date
4750	getFixedDateMonth1	date	the date for which the first day of the month is calculated
4750	getFixedDateMonth1	fixedDate	the fixed date representation of the date
4751	getCalendarDate	fd	the fixed date
4766	contains	o	element whose presence in this set is to be tested
4767	add	e	element to be added to this set
4768	remove	o	object to be removed from this set if present
4775	contains	o	element whose presence in this collection is to be tested
4778	toArray	a	the array into which the elements of this collection are to be stored if it is big enough otherwise a new array of the same runtime type is allocated for this purpose
4779	add	e	element whose presence in this collection is to be ensured
4780	remove	o	element to be removed from this collection if present
4781	containsAll	c	collection to be checked for containment in this collection
4782	addAll	c	collection containing elements to be added to this collection
4783	removeAll	c	collection containing elements to be removed from this collection
4784	retainAll	c	collection containing elements to be retained in this collection
4786	equals	o	object to be compared for equality with this collection
4800	put	key	key with which the specified value is to be associated
4800	put	value	value to be associated with the specified key
4801	get	key	key whose associated value is to be returned
4801	get	def	the value to be returned in the event that this preference node has no value associated with key
4802	remove	key	key whose mapping is to be removed from the preference node
4804	putInt	key	key with which the string form of value is to be associated
4804	putInt	value	value whose string form is to be associated with key
4805	getInt	key	key whose associated value is to be returned as an int
4805	getInt	def	the value to be returned in the event that this preference node has no value associated with key or the associated value cannot be interpreted as an int
4806	putLong	key	key with which the string form of value is to be associated
4806	putLong	value	value whose string form is to be associated with key
4807	getLong	key	key whose associated value is to be returned as a long
4807	getLong	def	the value to be returned in the event that this preference node has no value associated with key or the associated value cannot be interpreted as a long
4808	putBoolean	key	key with which the string form of value is to be associated
4808	putBoolean	value	value whose string form is to be associated with key
4809	getBoolean	key	key whose associated value is to be returned as a boolean
4809	getBoolean	def	the value to be returned in the event that this preference node has no value associated with key or the associated value cannot be interpreted as a boolean
4810	putFloat	key	key with which the string form of value is to be associated
4810	putFloat	value	value whose string form is to be associated with key
4811	getFloat	key	key whose associated value is to be returned as a float
4811	getFloat	def	the value to be returned in the event that this preference node has no value associated with key or the associated value cannot be interpreted as a float
4812	putDouble	key	key with which the string form of value is to be associated
4812	putDouble	value	value whose string form is to be associated with key
4813	getDouble	key	key whose associated value is to be returned as a double
4813	getDouble	def	the value to be returned in the event that this preference node has no value associated with key or the associated value cannot be interpreted as a double
4814	putByteArray	key	key with which the string form of value is to be associated
4814	putByteArray	value	value whose string form is to be associated with key
4815	getByteArray	key	key whose associated value is to be returned as a byte array
4815	getByteArray	def	the value to be returned in the event that this preference node has no value associated with key or the associated value cannot be interpreted as a byte array
4820	node	path	the path name of the preference node to return
4822	nodeExists	path	the path name of the node whose existence is to be checked
4834	getChild	nodeName	name of the child to be searched for
4835	childSpi	name	The name of the child node to return relative to this preference node
4847	exportNode	os	the output stream on which to emit the XML document
4848	exportSubtree	os	the output stream on which to emit the XML document
4849	childAdded	evt	A node change event object describing the parent and child node
4850	childRemoved	evt	A node change event object describing the parent and child node
4851	preferenceChange	evt	A PreferenceChangeEvent object describing the event source and the preference that has changed
4862	userNodeForPackage	c	the class for whose package a user preference node is desired
4863	systemNodeForPackage	c	the class for whose package a system preference node is desired
4867	put	key	key with which the specified value is to be associated
4867	put	value	value to be associated with the specified key
4868	get	key	key whose associated value is to be returned
4868	get	def	the value to be returned in the event that this preference node has no value associated with key
4869	remove	key	key whose mapping is to be removed from the preference node
4871	putInt	key	key with which the string form of value is to be associated
4871	putInt	value	value whose string form is to be associated with key
4872	getInt	key	key whose associated value is to be returned as an int
4872	getInt	def	the value to be returned in the event that this preference node has no value associated with key or the associated value cannot be interpreted as an int or the backing store is inaccessible
4873	putLong	key	key with which the string form of value is to be associated
4873	putLong	value	value whose string form is to be associated with key
4874	getLong	key	key whose associated value is to be returned as a long
4874	getLong	def	the value to be returned in the event that this preference node has no value associated with key or the associated value cannot be interpreted as a long or the backing store is inaccessible
4875	putBoolean	key	key with which the string form of value is to be associated
4875	putBoolean	value	value whose string form is to be associated with key
4876	getBoolean	key	key whose associated value is to be returned as a boolean
4876	getBoolean	def	the value to be returned in the event that this preference node has no value associated with key or the associated value cannot be interpreted as a boolean or the backing store is inaccessible
4877	putFloat	key	key with which the string form of value is to be associated
4877	putFloat	value	value whose string form is to be associated with key
4878	getFloat	key	key whose associated value is to be returned as a float
4878	getFloat	def	the value to be returned in the event that this preference node has no value associated with key or the associated value cannot be interpreted as a float or the backing store is inaccessible
4879	putDouble	key	key with which the string form of value is to be associated
4879	putDouble	value	value whose string form is to be associated with key
4880	getDouble	key	key whose associated value is to be returned as a double
4880	getDouble	def	the value to be returned in the event that this preference node has no value associated with key or the associated value cannot be interpreted as a double or the backing store is inaccessible
4881	putByteArray	key	key with which the string form of value is to be associated
4881	putByteArray	value	value whose string form is to be associated with key
4882	getByteArray	key	key whose associated value is to be returned as a byte array
4882	getByteArray	def	the value to be returned in the event that this preference node has no value associated with key or the associated value cannot be interpreted as a byte array or the backing store is inaccessible
4886	node	pathName	the path name of the preference node to return
4887	nodeExists	pathName	the path name of the node whose existence is to be checked
4895	addPreferenceChangeListener	pcl	The preference change listener to add
4896	removePreferenceChangeListener	pcl	The preference change listener to remove
4897	addNodeChangeListener	ncl	The NodeChangeListener to add
4898	removeNodeChangeListener	ncl	The NodeChangeListener to remove
4899	exportNode	os	the output stream on which to emit the XML document
4900	exportSubtree	os	the output stream on which to emit the XML document
4901	importPreferences	is	the input stream from which to read the XML document
4906	setSeed	seed	the initial seed
4907	next	bits	random bits
4908	nextBytes	bytes	the byte array to fill with random bytes
4910	nextInt	n	the bound on the random number to be returned
4924	format	format	A format string as described in Format string syntax
4924	format	args	Arguments referenced by the format specifiers in the format string
4925	format	l	The linkplain java
4925	format	format	A format string as described in Format string syntax
4925	format	args	Arguments referenced by the format specifiers in the format string
4928	subMap	fromKey	low endpoint inclusive of the keys in the returned map
4928	subMap	toKey	high endpoint exclusive of the keys in the returned map
4929	headMap	toKey	high endpoint exclusive of the keys in the returned map
4930	tailMap	fromKey	low endpoint inclusive of the keys in the returned map
4938	lower	e	the value to match
4939	floor	e	the value to match
4940	ceiling	e	the value to match
4941	higher	e	the value to match
4947	subSet	fromElement	low endpoint of the returned set
4947	subSet	fromInclusive	code true if the low endpoint is to be included in the returned view
4947	subSet	toElement	high endpoint of the returned set
4947	subSet	toInclusive	code true if the high endpoint is to be included in the returned view
4948	headSet	toElement	high endpoint of the returned set
4948	headSet	inclusive	code true if the high endpoint is to be included in the returned view
4949	tailSet	fromElement	low endpoint of the returned set
4949	tailSet	inclusive	code true if the low endpoint is to be included in the returned view
4955	getOffset	era	the era of the given date
4955	getOffset	year	the year in the given date
4955	getOffset	month	the month in the given date
4955	getOffset	day	the dayinmonth of the given date
4955	getOffset	dayOfWeek	the dayofweek of the given date
4955	getOffset	milliseconds	the milliseconds in day in standard local time
4956	getOffset	date	the date represented in milliseconds since January GMT
4957	getOffsets	date	the milliseconds since January 
4957	getOffsets	offset	an array of int where the raw GMT offset offset and daylight saving amount offset are stored or null if those values are not needed
4958	setRawOffset	offsetMillis	the given base time zone offset to GMT
4961	setID	ID	the new time zone ID
4963	getDisplayName	locale	the locale in which to supply the display name
4964	getDisplayName	daylight	if true return the daylight savings name
4964	getDisplayName	style	either LONG or SHORT
4965	getDisplayName	daylight	if true return the daylight savings name
4965	getDisplayName	style	either LONG or SHORT
4965	getDisplayName	locale	the locale in which to supply the display name
4968	inDaylightTime	date	the given Date
4969	getTimeZone	ID	the ID for a TimeZone either an abbreviation such as PST a full name such as AmericaLos_Angeles or a custom ID such as GMT
4970	getAvailableIDs	rawOffset	the given time zone GMT offset in milliseconds
4976	setDefault	zone	the new default time zone
4979	hasSameRules	other	the TimeZone object to be compared with
4981	parseCustomTimeZone	id	a string of the custom ID form
4982	equals	obj	the object to compare with
4984	add	field	the calendar field
4984	add	amount	the amount of date or time to be added to the field
4985	roll	field	the calendar field
4985	roll	amount	the signed amount to add to field
4986	getMinimum	field	the calendar field
4987	getMaximum	field	the calendar field
4988	getGreatestMinimum	field	the calendar field
4989	getLeastMaximum	field	the calendar field
4990	getActualMinimum	field	the calendar field
4991	getActualMaximum	field	the calendar field
4994	computeFields	fieldMask	a bit mask to specify which fields to change the setting state
4994	computeFields	tzMask	a bit mask to specify which time zone offset fields to be used for time calculations
4995	getWeekNumber	fixedDay1	the fixed date of the first day of the period
4995	getWeekNumber	fixedDate	the fixed date of the last day of the period
4997	getFixedDate	cal	the CalendarSystem to be used for the date calculation
4997	getFixedDate	year	the normalized year number with indicating the year BCE indicating BCE etc
4997	getFixedDate	fieldMask	the calendar fields to be used for the date calculation
4998	getFixedDateJan1	date	the date for which the first day of the year is calculated
4998	getFixedDateJan1	fixedDate	the fixed date representation of the date
4999	getFixedDateMonth1	date	the date for which the first day of the month is calculated
4999	getFixedDateMonth1	fixedDate	the fixed date representation of the date
5000	getCalendarDate	fd	the fixed date
5010	nameUUIDFromBytes	name	A byte array to be used to construct a code UUID
5011	fromString	name	A string that specifies a code UUID
5022	equals	obj	The object to be compared
5023	compareTo	val	code UUID to which this code UUID is to be compared
5031	addFirst	e	the element to add
5032	addLast	e	the element to add
5033	contains	o	element whose presence in this list is to be tested
5035	add	e	element to be appended to this list
5036	remove	o	element to be removed from this list if present
5037	addAll	c	collection containing elements to be added to this list
5038	addAll	index	index at which to insert the first element from the specified collection
5038	addAll	c	collection containing elements to be added to this list
5040	get	index	index of the element to return
5041	set	index	index of the element to replace
5041	set	element	element to be stored at the specified position
5042	add	index	index at which the specified element is to be inserted
5042	add	element	element to be inserted
5043	remove	index	the index of the element to be removed
5045	indexOf	o	element to search for
5046	lastIndexOf	o	element to search for
5051	offer	e	the element to add
5052	offerFirst	e	the element to insert
5053	offerLast	e	the element to insert
5058	push	e	the element to push
5060	removeFirstOccurrence	o	element to be removed from this list if present
5061	removeLastOccurrence	o	element to be removed from this list if present
5062	listIterator	index	index of the first element to be returned from the listiterator by a call to next
5066	toArray	a	the array into which the elements of the list are to be stored if it is big enough otherwise a new array of the same runtime type is allocated for this purpose
5074	nextToken	delim	the new delimiters
5086	set	e	the element with which to replace the last element returned by code next or code previous
5087	add	e	the element to insert
5089	getJarEntry	name	the jar file entry name
5090	getEntry	name	the jar file entry name
5092	getInputStream	ze	the zip file entry
5093	get	name	the attribute name
5094	getValue	name	the attribute name as a string
5095	getValue	name	the Attributes
5096	put	name	the attribute name
5096	put	value	the attribute value
5097	putValue	name	the attribute name as a string
5097	putValue	value	the attribute value
5098	remove	name	attribute name
5099	containsValue	value	the attribute value
5100	containsKey	name	the attribute name
5101	putAll	attr	the Attributes to be stored in this map
5108	equals	o	the Object to be compared
5111	equals	o	the object to compare
5114	equals	o	the object to compare
5117	equals	o	the object to compare
5134	pack	in	a JarFile
5134	pack	out	an OutputStream
5135	pack	in	a JarInputStream
5135	pack	out	an OutputStream
5136	addPropertyChangeListener	listener	An object to be invoked when a property is changed
5137	removePropertyChangeListener	listener	The PropertyChange listener to be removed
5139	unpack	in	an InputStream
5139	unpack	out	a JarOutputStream
5140	unpack	in	a File
5140	unpack	out	a JarOutputStream
5141	addPropertyChangeListener	listener	An object to be invoked when a property is changed
5142	removePropertyChangeListener	listener	The PropertyChange listener to be removed
5144	pack	in	a JarFile
5144	pack	out	an OutputStream
5145	pack	in	a JarInputStream
5145	pack	out	an OutputStream
5146	addPropertyChangeListener	listener	An object to be invoked when a property is changed
5147	removePropertyChangeListener	listener	The PropertyChange listener to be removed
5149	unpack	in	an InputStream
5149	unpack	out	a JarOutputStream
5150	unpack	in	a File
5150	unpack	out	a JarOutputStream
5151	addPropertyChangeListener	listener	An object to be invoked when a property is changed
5152	removePropertyChangeListener	listener	The PropertyChange listener to be removed
5154	pack	in	a JarFile
5154	pack	out	an OutputStream
5155	pack	in	a JarInputStream
5155	pack	out	an OutputStream
5156	addPropertyChangeListener	listener	An object to be invoked when a property is changed
5157	removePropertyChangeListener	listener	The PropertyChange listener to be removed
5159	unpack	in	an InputStream
5159	unpack	out	a JarOutputStream
5160	unpack	in	a File
5160	unpack	out	a JarOutputStream
5161	addPropertyChangeListener	listener	An object to be invoked when a property is changed
5162	removePropertyChangeListener	listener	The PropertyChange listener to be removed
5165	getAttributes	name	entry name
5167	write	out	the output stream
5169	read	is	the input stream
5170	equals	o	the object to be compared
5176	read	b	the buffer into which the data is read
5176	read	off	the start offset in the destination array b
5176	read	len	the maximum number of bytes to read
5177	createZipEntry	name	the name of the JARZIP file entry
5178	putNextEntry	ze	the ZIPJAR entry to be written
5180	getInstance	language	lowercase twoletter ISO code
5180	getInstance	country	uppercase twoletter ISO code
5180	getInstance	variant	vendor and browser specific code
5182	setDefault	newLocale	the new default locale
5203	getDisplayVariantArray	bundle	the ResourceBundle to use to get the display names
5204	formatList	stringList	the list of strings to be formatted
5204	formatList	listPattern	should create a MessageFormat taking arguments and formatting them into a list
5204	formatList	listCompositionPattern	should take arguments and is used by composeList
5205	composeList	format	a format which takes two arguments
5205	composeList	list	a list of strings
5216	containsKey	key	The key whose presence in this map is to be tested
5218	put	key	key with which the specified value is to be associated
5218	put	value	value to be associated with the specified key
5219	resize	newCapacity	the new capacity MUST be a power of two must be greater than current capacity unless current capacity is MAXIMUM_CAPACITY in which case value is irrelevant
5221	putAll	m	mappings to be stored in this map
5222	remove	key	key whose mapping is to be removed from the map
5225	containsValue	value	value whose presence in this map is to be tested
5244	equals	o	object to be compared for equality with this map
5251	setValue	value	new value to be stored in this entry
5252	equals	o	object to be compared for equality with this map entry
5257	setValue	value	new value to be stored in this entry
5258	equals	o	object to be compared for equality with this map entry
5263	setValue	value	new value to be stored in this entry
5264	equals	o	object to be compared for equality with this map entry
5269	setValue	value	new value to be stored in this entry
5270	equals	o	object to be compared for equality with this map entry
5275	setValue	value	new value to be stored in this entry
5276	equals	o	object to be compared for equality with this map entry
5281	setValue	value	new value to be stored in this entry
5282	equals	o	object to be compared for equality with this map entry
5285	getString	key	the key for the desired string
5286	getStringArray	key	the key for the desired string array
5287	getObject	key	the key for the desired object
5289	setParent	parent	this bundle's parent bundle
5290	getBundle	baseName	the base name of the resource bundle a fully qualified class name
5291	getBundle	baseName	the base name of the resource bundle a fully qualified class name
5291	getBundle	control	the control which gives information for the resource bundle loading process
5292	getBundle	baseName	the base name of the resource bundle a fully qualified class name
5292	getBundle	locale	the locale for which a resource bundle is desired
5293	getBundle	baseName	the base name of the resource bundle a fully qualified class name
5293	getBundle	targetLocale	the locale for which a resource bundle is desired
5293	getBundle	control	the control which gives information for the resource bundle loading process
5294	getBundle	baseName	the base name of the resource bundle a fully qualified class name
5294	getBundle	locale	the locale for which a resource bundle is desired
5294	getBundle	loader	the class loader from which to load the resource bundle
5295	getBundle	baseName	the base name of the resource bundle a fully qualified class name
5295	getBundle	targetLocale	the locale for which a resource bundle is desired
5295	getBundle	loader	the class loader from which to load the resource bundle
5295	getBundle	control	the control which gives information for the resource bundle loading process
5301	findBundleInCache	cacheKey	the key to look up the cache
5301	findBundleInCache	control	the Control to be used for the expiration control
5302	putBundleInCache	cacheKey	the key for the resource bundle
5302	putBundleInCache	bundle	the resource bundle to be put in the cache
5304	clearCache	loader	the class loader
5305	handleGetObject	key	the key for the desired object
5307	containsKey	key	the resource key
5310	getControl	formats	the formats to be returned by the ResourceBundle
5311	getNoFallbackControl	formats	the formats to be returned by the ResourceBundle
5312	getFormats	baseName	the base name of the resource bundle a fully qualified class name
5313	getCandidateLocales	baseName	the base name of the resource bundle a fully qualified class name
5313	getCandidateLocales	locale	the locale for which a resource bundle is desired
5314	getFallbackLocale	baseName	the base name of the resource bundle a fully qualified class name for which ResourceBundle
5314	getFallbackLocale	locale	the Locale for which ResourceBundle
5315	newBundle	baseName	the base bundle name of the resource bundle a fully qualified class name
5315	newBundle	locale	the locale for which the resource bundle should be instantiated
5315	newBundle	format	the resource bundle format to be loaded
5315	newBundle	loader	the ClassLoader to use to load the bundle
5315	newBundle	reload	the flag to indicate bundle reloading true if reloading an expired resource bundle false otherwise
5316	getTimeToLive	baseName	the base name of the resource bundle for which the expiration value is specified
5316	getTimeToLive	locale	the locale of the resource bundle for which the expiration value is specified
5317	needsReload	baseName	the base bundle name of the resource bundle a fully qualified class name
5317	needsReload	locale	the locale for which the resource bundle should be instantiated
5317	needsReload	format	the resource bundle format to be loaded
5317	needsReload	loader	the ClassLoader to use to load the bundle
5317	needsReload	bundle	the resource bundle instance that has been expired in the cache
5317	needsReload	loadTime	the time when bundle was loaded and put in the cache
5318	toBundleName	baseName	the base name of the resource bundle a fully qualified class name
5318	toBundleName	locale	the locale for which a resource bundle should be loaded
5319	toResourceName	bundleName	the bundle name
5319	toResourceName	suffix	the file type suffix
5320	getControl	formats	the formats to be returned by the ResourceBundle
5321	getNoFallbackControl	formats	the formats to be returned by the ResourceBundle
5322	getFormats	baseName	the base name of the resource bundle a fully qualified class name
5323	getCandidateLocales	baseName	the base name of the resource bundle a fully qualified class name
5323	getCandidateLocales	locale	the locale for which a resource bundle is desired
5324	getFallbackLocale	baseName	the base name of the resource bundle a fully qualified class name for which ResourceBundle
5324	getFallbackLocale	locale	the Locale for which ResourceBundle
5325	newBundle	baseName	the base bundle name of the resource bundle a fully qualified class name
5325	newBundle	locale	the locale for which the resource bundle should be instantiated
5325	newBundle	format	the resource bundle format to be loaded
5325	newBundle	loader	the ClassLoader to use to load the bundle
5325	newBundle	reload	the flag to indicate bundle reloading true if reloading an expired resource bundle false otherwise
5326	getTimeToLive	baseName	the base name of the resource bundle for which the expiration value is specified
5326	getTimeToLive	locale	the locale of the resource bundle for which the expiration value is specified
5327	needsReload	baseName	the base bundle name of the resource bundle a fully qualified class name
5327	needsReload	locale	the locale for which the resource bundle should be instantiated
5327	needsReload	format	the resource bundle format to be loaded
5327	needsReload	loader	the ClassLoader to use to load the bundle
5327	needsReload	bundle	the resource bundle instance that has been expired in the cache
5327	needsReload	loadTime	the time when bundle was loaded and put in the cache
5328	toBundleName	baseName	the base name of the resource bundle a fully qualified class name
5328	toBundleName	locale	the locale for which a resource bundle should be loaded
5329	toResourceName	bundleName	the bundle name
5329	toResourceName	suffix	the file type suffix
5330	getControl	formats	the formats to be returned by the ResourceBundle
5331	getNoFallbackControl	formats	the formats to be returned by the ResourceBundle
5332	getFormats	baseName	the base name of the resource bundle a fully qualified class name
5333	getCandidateLocales	baseName	the base name of the resource bundle a fully qualified class name
5333	getCandidateLocales	locale	the locale for which a resource bundle is desired
5334	getFallbackLocale	baseName	the base name of the resource bundle a fully qualified class name for which ResourceBundle
5334	getFallbackLocale	locale	the Locale for which ResourceBundle
5335	newBundle	baseName	the base bundle name of the resource bundle a fully qualified class name
5335	newBundle	locale	the locale for which the resource bundle should be instantiated
5335	newBundle	format	the resource bundle format to be loaded
5335	newBundle	loader	the ClassLoader to use to load the bundle
5335	newBundle	reload	the flag to indicate bundle reloading true if reloading an expired resource bundle false otherwise
5336	getTimeToLive	baseName	the base name of the resource bundle for which the expiration value is specified
5336	getTimeToLive	locale	the locale of the resource bundle for which the expiration value is specified
5337	needsReload	baseName	the base bundle name of the resource bundle a fully qualified class name
5337	needsReload	locale	the locale for which the resource bundle should be instantiated
5337	needsReload	format	the resource bundle format to be loaded
5337	needsReload	loader	the ClassLoader to use to load the bundle
5337	needsReload	bundle	the resource bundle instance that has been expired in the cache
5337	needsReload	loadTime	the time when bundle was loaded and put in the cache
5338	toBundleName	baseName	the base name of the resource bundle a fully qualified class name
5338	toBundleName	locale	the locale for which a resource bundle should be loaded
5339	toResourceName	bundleName	the bundle name
5339	toResourceName	suffix	the file type suffix
5341	add	e	element to be appended to this list
5354	equals	o	the object to be compared for equality with this list
5356	removeRange	fromIndex	index of first element to be removed
5356	removeRange	toIndex	index after last element to be removed
5359	contains	o	element whose presence in this list is to be tested
5362	toArray	a	the array into which the elements of this list are to be stored if it is big enough otherwise a new array of the same runtime type is allocated for this purpose
5363	add	e	element to be appended to this list
5364	remove	o	element to be removed from this list if present
5365	containsAll	c	collection to be checked for containment in this list
5366	addAll	c	collection containing elements to be added to this list
5367	addAll	index	index at which to insert the first element from the specified collection
5367	addAll	c	collection containing elements to be added to this list
5368	removeAll	c	collection containing elements to be removed from this list
5369	retainAll	c	collection containing elements to be retained in this list
5371	equals	o	the object to be compared for equality with this list
5373	get	index	index of the element to return
5374	set	index	index of the element to replace
5374	set	element	element to be stored at the specified position
5375	add	index	index at which the specified element is to be inserted
5375	add	element	element to be inserted
5376	remove	index	the index of the element to be removed
5377	indexOf	o	element to search for
5378	lastIndexOf	o	element to search for
5380	listIterator	index	index of the first element to be returned from the list iterator by a call to link ListIteratornext next
5381	subList	fromIndex	low endpoint inclusive of the subList
5381	subList	toIndex	high endpoint exclusive of the subList
5385	contains	e	element to be checked for containment in this collection
5386	add	e	element to be added to this set
5387	remove	e	element to be removed from this set if present
5388	containsAll	c	collection to be checked for containment in this set
5389	addAll	c	collection whose elements are to be added to this set
5390	removeAll	c	elements to be removed from this set
5391	retainAll	c	elements to be retained in this set
5393	equals	e	object to be compared for equality with this set
5396	UTC	year	the year minus 
5396	UTC	month	the month between 
5396	UTC	date	the day of the month between 
5396	UTC	hrs	the hours between 
5396	UTC	min	the minutes between 
5396	UTC	sec	the seconds between 
5397	parse	s	a string to be parsed as a date
5399	setYear	year	the year value
5401	setMonth	month	the month value between 
5403	setDate	date	the day of the month value between 
5406	setHours	hours	the hour value
5408	setMinutes	minutes	the value of the minutes
5410	setSeconds	seconds	the seconds value
5412	setTime	time	the number of milliseconds
5413	before	when	a date
5414	after	when	a date
5415	equals	obj	the object to compare with
5417	compareTo	anotherDate	the Date to be compared
5424	getCalendarSystem	year	normalized calendar year not 
5429	load	service	The interface or abstract class representing the service
5429	load	loader	The class loader to be used to load providerconfiguration files and provider classes or null if the system class loader or failing that the bootstrap class loader is to be used
5430	load	service	The interface or abstract class representing the service
5431	loadInstalled	service	The interface or abstract class representing the service
5437	contains	value	a value to search for
5438	containsValue	value	value whose presence in this hashtable is to be tested
5439	containsKey	key	possible key
5440	get	key	the key whose associated value is to be returned
5442	put	key	the hashtable key
5442	put	value	the value
5443	remove	key	the key that needs to be removed
5444	putAll	t	mappings to be stored in this map
5451	equals	o	object to be compared for equality with this hashtable
5456	initFromCollection	c	the collection
5457	grow	minCapacity	the desired minimum capacity
5460	remove	o	element to be removed from this queue if present
5461	removeEq	o	element to be removed from this queue if present
5462	contains	o	object to be checked for containment in this queue
5464	toArray	a	the array into which the elements of the queue are to be stored if it is big enough otherwise a new array of the same runtime type is allocated for this purpose
5468	siftUp	k	the position to fill
5468	siftUp	x	the item to insert
5469	siftDown	k	the position to fill
5469	siftDown	x	the item to insert
5472	writeObject	s	the stream
5473	readObject	s	the stream
5474	add	e	the element to add
5478	addAll	c	collection containing elements to be added to this queue
5479	sort	a	the array to be sorted
5480	sort	a	the array to be sorted
5480	sort	fromIndex	the index of the first element inclusive to be sorted
5480	sort	toIndex	the index of the last element exclusive to be sorted
5481	sort	a	the array to be sorted
5482	sort	a	the array to be sorted
5482	sort	fromIndex	the index of the first element inclusive to be sorted
5482	sort	toIndex	the index of the last element exclusive to be sorted
5483	sort	a	the array to be sorted
5484	sort	a	the array to be sorted
5484	sort	fromIndex	the index of the first element inclusive to be sorted
5484	sort	toIndex	the index of the last element exclusive to be sorted
5485	sort	a	the array to be sorted
5486	sort	a	the array to be sorted
5486	sort	fromIndex	the index of the first element inclusive to be sorted
5486	sort	toIndex	the index of the last element exclusive to be sorted
5487	sort	a	the array to be sorted
5488	sort	a	the array to be sorted
5488	sort	fromIndex	the index of the first element inclusive to be sorted
5488	sort	toIndex	the index of the last element exclusive to be sorted
5489	sort	a	the array to be sorted
5490	sort	a	the array to be sorted
5490	sort	fromIndex	the index of the first element inclusive to be sorted
5490	sort	toIndex	the index of the last element exclusive to be sorted
5491	sort	a	the array to be sorted
5492	sort	a	the array to be sorted
5492	sort	fromIndex	the index of the first element inclusive to be sorted
5492	sort	toIndex	the index of the last element exclusive to be sorted
5521	sort	a	the array to be sorted
5522	sort	a	the array to be sorted
5522	sort	fromIndex	the index of the first element inclusive to be sorted
5522	sort	toIndex	the index of the last element exclusive to be sorted
5525	sort	a	the array to be sorted
5525	sort	c	the comparator to determine the order of the array
5526	sort	a	the array to be sorted
5526	sort	fromIndex	the index of the first element inclusive to be sorted
5526	sort	toIndex	the index of the last element exclusive to be sorted
5526	sort	c	the comparator to determine the order of the array
5529	binarySearch	a	the array to be searched
5529	binarySearch	key	the value to be searched for
5530	binarySearch	a	the array to be searched
5530	binarySearch	fromIndex	the index of the first element inclusive to be searched
5530	binarySearch	toIndex	the index of the last element exclusive to be searched
5530	binarySearch	key	the value to be searched for
5531	binarySearch	a	the array to be searched
5531	binarySearch	key	the value to be searched for
5532	binarySearch	a	the array to be searched
5532	binarySearch	fromIndex	the index of the first element inclusive to be searched
5532	binarySearch	toIndex	the index of the last element exclusive to be searched
5532	binarySearch	key	the value to be searched for
5533	binarySearch	a	the array to be searched
5533	binarySearch	key	the value to be searched for
5534	binarySearch	a	the array to be searched
5534	binarySearch	fromIndex	the index of the first element inclusive to be searched
5534	binarySearch	toIndex	the index of the last element exclusive to be searched
5534	binarySearch	key	the value to be searched for
5535	binarySearch	a	the array to be searched
5535	binarySearch	key	the value to be searched for
5536	binarySearch	a	the array to be searched
5536	binarySearch	fromIndex	the index of the first element inclusive to be searched
5536	binarySearch	toIndex	the index of the last element exclusive to be searched
5536	binarySearch	key	the value to be searched for
5537	binarySearch	a	the array to be searched
5537	binarySearch	key	the value to be searched for
5538	binarySearch	a	the array to be searched
5538	binarySearch	fromIndex	the index of the first element inclusive to be searched
5538	binarySearch	toIndex	the index of the last element exclusive to be searched
5538	binarySearch	key	the value to be searched for
5539	binarySearch	a	the array to be searched
5539	binarySearch	key	the value to be searched for
5540	binarySearch	a	the array to be searched
5540	binarySearch	fromIndex	the index of the first element inclusive to be searched
5540	binarySearch	toIndex	the index of the last element exclusive to be searched
5540	binarySearch	key	the value to be searched for
5541	binarySearch	a	the array to be searched
5541	binarySearch	key	the value to be searched for
5542	binarySearch	a	the array to be searched
5542	binarySearch	fromIndex	the index of the first element inclusive to be searched
5542	binarySearch	toIndex	the index of the last element exclusive to be searched
5542	binarySearch	key	the value to be searched for
5543	binarySearch	a	the array to be searched
5543	binarySearch	key	the value to be searched for
5544	binarySearch	a	the array to be searched
5544	binarySearch	fromIndex	the index of the first element inclusive to be searched
5544	binarySearch	toIndex	the index of the last element exclusive to be searched
5544	binarySearch	key	the value to be searched for
5545	binarySearch	a	the array to be searched
5545	binarySearch	key	the value to be searched for
5545	binarySearch	c	the comparator by which the array is ordered
5546	binarySearch	a	the array to be searched
5546	binarySearch	fromIndex	the index of the first element inclusive to be searched
5546	binarySearch	toIndex	the index of the last element exclusive to be searched
5546	binarySearch	key	the value to be searched for
5546	binarySearch	c	the comparator by which the array is ordered
5547	equals	a	one array to be tested for equality
5547	equals	a2	the other array to be tested for equality
5548	equals	a	one array to be tested for equality
5548	equals	a2	the other array to be tested for equality
5549	equals	a	one array to be tested for equality
5549	equals	a2	the other array to be tested for equality
5550	equals	a	one array to be tested for equality
5550	equals	a2	the other array to be tested for equality
5551	equals	a	one array to be tested for equality
5551	equals	a2	the other array to be tested for equality
5552	equals	a	one array to be tested for equality
5552	equals	a2	the other array to be tested for equality
5553	equals	a	one array to be tested for equality
5553	equals	a2	the other array to be tested for equality
5554	equals	a	one array to be tested for equality
5554	equals	a2	the other array to be tested for equality
5555	equals	a	one array to be tested for equality
5555	equals	a2	the other array to be tested for equality
5556	fill	a	the array to be filled
5556	fill	val	the value to be stored in all elements of the array
5557	fill	a	the array to be filled
5557	fill	fromIndex	the index of the first element inclusive to be filled with the specified value
5557	fill	toIndex	the index of the last element exclusive to be filled with the specified value
5557	fill	val	the value to be stored in all elements of the array
5558	fill	a	the array to be filled
5558	fill	val	the value to be stored in all elements of the array
5559	fill	a	the array to be filled
5559	fill	fromIndex	the index of the first element inclusive to be filled with the specified value
5559	fill	toIndex	the index of the last element exclusive to be filled with the specified value
5559	fill	val	the value to be stored in all elements of the array
5560	fill	a	the array to be filled
5560	fill	val	the value to be stored in all elements of the array
5561	fill	a	the array to be filled
5561	fill	fromIndex	the index of the first element inclusive to be filled with the specified value
5561	fill	toIndex	the index of the last element exclusive to be filled with the specified value
5561	fill	val	the value to be stored in all elements of the array
5562	fill	a	the array to be filled
5562	fill	val	the value to be stored in all elements of the array
5563	fill	a	the array to be filled
5563	fill	fromIndex	the index of the first element inclusive to be filled with the specified value
5563	fill	toIndex	the index of the last element exclusive to be filled with the specified value
5563	fill	val	the value to be stored in all elements of the array
5564	fill	a	the array to be filled
5564	fill	val	the value to be stored in all elements of the array
5565	fill	a	the array to be filled
5565	fill	fromIndex	the index of the first element inclusive to be filled with the specified value
5565	fill	toIndex	the index of the last element exclusive to be filled with the specified value
5565	fill	val	the value to be stored in all elements of the array
5566	fill	a	the array to be filled
5566	fill	val	the value to be stored in all elements of the array
5567	fill	a	the array to be filled
5567	fill	fromIndex	the index of the first element inclusive to be filled with the specified value
5567	fill	toIndex	the index of the last element exclusive to be filled with the specified value
5567	fill	val	the value to be stored in all elements of the array
5568	fill	a	the array to be filled
5568	fill	val	the value to be stored in all elements of the array
5569	fill	a	the array to be filled
5569	fill	fromIndex	the index of the first element inclusive to be filled with the specified value
5569	fill	toIndex	the index of the last element exclusive to be filled with the specified value
5569	fill	val	the value to be stored in all elements of the array
5570	fill	a	the array to be filled
5570	fill	val	the value to be stored in all elements of the array
5571	fill	a	the array to be filled
5571	fill	fromIndex	the index of the first element inclusive to be filled with the specified value
5571	fill	toIndex	the index of the last element exclusive to be filled with the specified value
5571	fill	val	the value to be stored in all elements of the array
5572	fill	a	the array to be filled
5572	fill	val	the value to be stored in all elements of the array
5573	fill	a	the array to be filled
5573	fill	fromIndex	the index of the first element inclusive to be filled with the specified value
5573	fill	toIndex	the index of the last element exclusive to be filled with the specified value
5573	fill	val	the value to be stored in all elements of the array
5574	copyOf	original	the array to be copied
5574	copyOf	newLength	the length of the copy to be returned
5575	copyOf	original	the array to be copied
5575	copyOf	newLength	the length of the copy to be returned
5575	copyOf	newType	the class of the copy to be returned
5576	copyOf	original	the array to be copied
5576	copyOf	newLength	the length of the copy to be returned
5577	copyOf	original	the array to be copied
5577	copyOf	newLength	the length of the copy to be returned
5578	copyOf	original	the array to be copied
5578	copyOf	newLength	the length of the copy to be returned
5579	copyOf	original	the array to be copied
5579	copyOf	newLength	the length of the copy to be returned
5580	copyOf	original	the array to be copied
5580	copyOf	newLength	the length of the copy to be returned
5581	copyOf	original	the array to be copied
5581	copyOf	newLength	the length of the copy to be returned
5582	copyOf	original	the array to be copied
5582	copyOf	newLength	the length of the copy to be returned
5583	copyOf	original	the array to be copied
5583	copyOf	newLength	the length of the copy to be returned
5584	copyOfRange	original	the array from which a range is to be copied
5584	copyOfRange	from	the initial index of the range to be copied inclusive
5584	copyOfRange	to	the final index of the range to be copied exclusive
5585	copyOfRange	original	the array from which a range is to be copied
5585	copyOfRange	from	the initial index of the range to be copied inclusive
5585	copyOfRange	to	the final index of the range to be copied exclusive
5585	copyOfRange	newType	the class of the copy to be returned
5586	copyOfRange	original	the array from which a range is to be copied
5586	copyOfRange	from	the initial index of the range to be copied inclusive
5586	copyOfRange	to	the final index of the range to be copied exclusive
5587	copyOfRange	original	the array from which a range is to be copied
5587	copyOfRange	from	the initial index of the range to be copied inclusive
5587	copyOfRange	to	the final index of the range to be copied exclusive
5588	copyOfRange	original	the array from which a range is to be copied
5588	copyOfRange	from	the initial index of the range to be copied inclusive
5588	copyOfRange	to	the final index of the range to be copied exclusive
5589	copyOfRange	original	the array from which a range is to be copied
5589	copyOfRange	from	the initial index of the range to be copied inclusive
5589	copyOfRange	to	the final index of the range to be copied exclusive
5590	copyOfRange	original	the array from which a range is to be copied
5590	copyOfRange	from	the initial index of the range to be copied inclusive
5590	copyOfRange	to	the final index of the range to be copied exclusive
5591	copyOfRange	original	the array from which a range is to be copied
5591	copyOfRange	from	the initial index of the range to be copied inclusive
5591	copyOfRange	to	the final index of the range to be copied exclusive
5592	copyOfRange	original	the array from which a range is to be copied
5592	copyOfRange	from	the initial index of the range to be copied inclusive
5592	copyOfRange	to	the final index of the range to be copied exclusive
5593	copyOfRange	original	the array from which a range is to be copied
5593	copyOfRange	from	the initial index of the range to be copied inclusive
5593	copyOfRange	to	the final index of the range to be copied exclusive
5594	asList	a	the array by which the list will be backed
5595	hashCode	a	the array whose hash value to compute
5596	hashCode	a	the array whose hash value to compute
5597	hashCode	a	the array whose hash value to compute
5598	hashCode	a	the array whose hash value to compute
5599	hashCode	a	the array whose hash value to compute
5600	hashCode	a	the array whose hash value to compute
5601	hashCode	a	the array whose hash value to compute
5602	hashCode	a	the array whose hash value to compute
5603	hashCode	a	the array whose contentbased hash code to compute
5604	deepHashCode	a	the array whose deepcontentbased hash code to compute
5605	deepEquals	a1	one array to be tested for equality
5605	deepEquals	a2	the other array to be tested for equality
5606	toString	a	the array whose string representation to return
5607	toString	a	the array whose string representation to return
5608	toString	a	the array whose string representation to return
5609	toString	a	the array whose string representation to return
5610	toString	a	the array whose string representation to return
5611	toString	a	the array whose string representation to return
5612	toString	a	the array whose string representation to return
5613	toString	a	the array whose string representation to return
5614	toString	a	the array whose string representation to return
5615	deepToString	a	the array whose string representation to return
5617	update	o	the observable object
5617	update	arg	an argument passed to the notifyObservers method
5621	contains	e	element to be checked for containment in this collection
5622	add	e	element to be added to this set
5623	remove	e	element to be removed from this set if present
5624	containsAll	c	collection to be checked for containment in this set
5625	addAll	c	collection whose elements are to be added to this set
5626	removeAll	c	elements to be removed from this set
5627	retainAll	c	elements to be retained in this set
5629	equals	e	object to be compared for equality with this set
5631	getInstance	zone	the time zone to use
5632	getInstance	aLocale	the locale for the week data
5633	getInstance	zone	the time zone to use
5633	getInstance	aLocale	the locale for the week data
5638	setTime	date	the given Date
5640	setTimeInMillis	millis	the new time in UTC milliseconds from the epoch
5641	get	field	the given calendar field
5642	internalGet	field	the given calendar field
5644	set	field	the given calendar field
5644	set	value	the value to be set for the given calendar field
5645	set	year	the value used to set the YEAR calendar field
5645	set	month	the value used to set the MONTH calendar field
5645	set	date	the value used to set the DAY_OF_MONTH calendar field
5646	set	year	the value used to set the YEAR calendar field
5646	set	month	the value used to set the MONTH calendar field
5646	set	date	the value used to set the DAY_OF_MONTH calendar field
5646	set	hourOfDay	the value used to set the HOUR_OF_DAY calendar field
5646	set	minute	the value used to set the MINUTE calendar field
5647	set	year	the value used to set the YEAR calendar field
5647	set	month	the value used to set the MONTH calendar field
5647	set	date	the value used to set the DAY_OF_MONTH calendar field
5647	set	hourOfDay	the value used to set the HOUR_OF_DAY calendar field
5647	set	minute	the value used to set the MINUTE calendar field
5647	set	second	the value used to set the SECOND calendar field
5649	clear	field	the calendar field to be cleared
5651	getDisplayName	field	the calendar field for which the string representation is returned
5651	getDisplayName	style	the style applied to the string representation one of link SHORT or link LONG
5651	getDisplayName	locale	the locale for the string representation
5652	getDisplayNames	field	the calendar field for which the display names are returned
5652	getDisplayNames	style	the style applied to the display names one of link SHORT link LONG or link ALL_STYLES
5652	getDisplayNames	locale	the locale for the display names
5656	setFieldsComputed	fieldMask	the field to be marked as computed
5657	setFieldsNormalized	fieldMask	the field mask indicating which calendar fields are in sync with the time value
5664	equals	obj	the object to compare with
5666	before	when	the Object to be compared
5667	after	when	the Object to be compared
5668	compareTo	anotherCalendar	the Calendar to be compared
5669	add	field	the calendar field
5669	add	amount	the amount of date or time to be added to the field
5670	roll	field	the time field
5670	roll	up	indicates if the value of the specified time field is to be rolled up or rolled down
5671	roll	field	the calendar field
5671	roll	amount	the signed amount to add to the calendar field
5672	setTimeZone	value	the given time zone
5676	setLenient	lenient	true if the lenient mode is to be turned on false if it is to be turned off
5678	setFirstDayOfWeek	value	the given first day of the week
5680	setMinimalDaysInFirstWeek	value	the given minimal days required in the first week of the year
5682	getMinimum	field	the calendar field
5683	getMaximum	field	the calendar field
5684	getGreatestMinimum	field	the calendar field
5685	getLeastMaximum	field	the calendar field
5686	getActualMinimum	field	the calendar field
5687	getActualMaximum	field	the calendar field
5689	getFieldName	field	the calendar field
5691	setWeekCountData	desiredLocale	the given locale
5699	containsValue	value	the value whose presence in this map is to be tested
5700	containsKey	key	the key whose presence in this map is to be tested
5702	put	key	the key with which the specified value is to be associated
5702	put	value	the value to be associated with the specified key
5703	remove	key	the key whose mapping is to be removed from the map
5705	putAll	m	the mappings to be stored in this map
5710	equals	o	the object to be compared for equality with this map
5719	useDelimiter	pattern	A delimiting pattern
5720	useDelimiter	pattern	A string specifying a delimiting pattern
5722	useLocale	locale	A string specifying the locale to use
5724	useRadix	radix	The radix to use when scanning numbers
5730	hasNext	pattern	a string specifying the pattern to scan
5731	next	pattern	a string specifying the pattern to scan
5732	hasNext	pattern	the pattern to scan for
5733	next	pattern	the pattern to scan for
5736	findInLine	pattern	a string specifying the pattern to search for
5737	findInLine	pattern	the pattern to scan for
5738	findWithinHorizon	pattern	a string specifying the pattern to search for
5739	findWithinHorizon	pattern	the pattern to scan for
5740	skip	pattern	a string specifying the pattern to skip over
5741	skip	pattern	a string specifying the pattern to skip over
5745	hasNextByte	radix	the radix used to interpret the token as a byte value
5747	nextByte	radix	the radix used to interpret the token as a byte value
5749	hasNextShort	radix	the radix used to interpret the token as a short value
5751	nextShort	radix	the radix used to interpret the token as a short value
5753	hasNextInt	radix	the radix used to interpret the token as an int value
5756	nextInt	radix	the radix used to interpret the token as an int value
5758	hasNextLong	radix	the radix used to interpret the token as a long value
5760	nextLong	radix	the radix used to interpret the token as an int value
5767	hasNextBigInteger	radix	the radix used to interpret the token as an integer
5769	nextBigInteger	radix	the radix used to interpret the token
5775	allocateElements	numElements	the number of elements to hold
5778	addFirst	e	the element to add
5779	addLast	e	the element to add
5780	offerFirst	e	the element to add
5781	offerLast	e	the element to add
5786	removeFirstOccurrence	o	element to be removed from this deque if present
5787	removeLastOccurrence	o	element to be removed from this deque if present
5788	add	e	the element to add
5789	offer	e	the element to add
5794	push	e	the element to push
5800	contains	o	object to be checked for containment in this deque
5801	remove	o	element to be removed from this deque if present
5804	toArray	a	the array into which the elements of the deque are to be stored if it is big enough otherwise a new array of the same runtime type is allocated for this purpose
5817	containsKey	key	possible key
5818	containsValue	value	value whose presence in this map is to be tested
5819	containsMapping	key	possible key
5819	containsMapping	value	possible value
5820	put	key	the key with which the specified value is to be associated
5820	put	value	the value to be associated with the specified key
5821	resize	newCapacity	the new capacity must be a power of two
5822	putAll	m	mappings to be stored in this map
5823	remove	key	key whose mapping is to be removed from the map
5824	removeMapping	key	possible key
5824	removeMapping	value	possible value
5825	closeDeletion	d	the index of a newly empty deleted slot
5827	equals	o	object to be compared for equality with this map
5841	finishToArray	r	the array replete with previously stored elements
5841	finishToArray	it	the inprogress iterator over this collection
5850	addObserver	o	an observer to be added
5851	deleteObserver	o	the observer to be deleted
5853	notifyObservers	arg	any object
5862	add	e	the element to add
5863	offer	e	the element to add
5868	loadClass	name	The binary name of the class
5869	loadClass	name	The binary name of the class
5869	loadClass	resolve	If true then resolve the class
5870	findClass	name	The binary name of the class
5871	defineClass	b	The bytes that make up the class data
5871	defineClass	off	The start offset in b of the class data
5871	defineClass	len	The length of the class data
5872	defineClass	name	The expected binary name of the class or null if not known
5872	defineClass	b	The bytes that make up the class data
5872	defineClass	off	The start offset in b of the class data
5872	defineClass	len	The length of the class data
5873	defineClass	name	The expected binary name of the class or null if not known
5873	defineClass	b	The bytes that make up the class data
5873	defineClass	off	The start offset in b of the class data
5873	defineClass	len	The length of the class data
5873	defineClass	protectionDomain	The ProtectionDomain of the class
5874	defineClass	name	The expected binary namea
5874	defineClass	b	The bytes that make up the class data
5874	defineClass	protectionDomain	The ProtectionDomain of the class or null
5876	resolveClass	c	The class to link
5877	findSystemClass	name	The binary name of the class
5878	findLoadedClass	name	The binary name of the class
5879	setSigners	c	The Class object
5879	setSigners	signers	The signers for the class
5880	getResource	name	The resource name
5881	getResources	name	The resource name
5882	findResource	name	The resource name
5883	findResources	name	The resource name
5884	getSystemResource	name	The resource name
5885	getSystemResources	name	The resource name
5888	getResourceAsStream	name	The resource name
5889	getSystemResourceAsStream	name	The resource name
5892	definePackage	name	The package name
5892	definePackage	specTitle	The specification title
5892	definePackage	specVersion	The specification version
5892	definePackage	specVendor	The specification vendor
5892	definePackage	implTitle	The implementation title
5892	definePackage	implVersion	The implementation version
5892	definePackage	implVendor	The implementation vendor
5892	definePackage	sealBase	If not null then this package is sealed with respect to the given code source link java
5893	getPackage	name	The package name
5895	findLibrary	libname	The library name
5896	setDefaultAssertionStatus	enabled	true if classes loaded by this class loader will henceforth have assertions enabled by default false if they will have assertions disabled by default
5897	setPackageAssertionStatus	packageName	The name of the package whose package default assertion status is to be set
5897	setPackageAssertionStatus	enabled	true if classes loaded by this classloader and belonging to the named package or any of its subpackages will have assertions enabled by default false if they will have assertions disabled by default
5898	setClassAssertionStatus	className	The fully qualified class name of the toplevel class whose assertion status is to be set
5898	setClassAssertionStatus	enabled	true if the named class is to have assertions enabled when and if it is initialized false if the class is to have assertions disabled
5900	desiredAssertionStatus	className	The fully qualified class name of the class whose desired assertion status is being queried
5911	append	sb	the StringBuffer to append
5912	append	s	the CharSequence to append
5949	set	value	the value to be stored in the current thread's copy of this threadlocal
5951	getMap	t	the current thread
5952	createMap	t	the current thread
5952	createMap	firstValue	value for the initial entry of the map
5952	createMap	map	the map to store
5953	createInheritedMap	parentMap	the map associated with parent thread
5958	getEntry	key	the thread local object
5959	getEntryAfterMiss	key	the thread local object
5959	getEntryAfterMiss	i	the table index for key's hash code
5959	getEntryAfterMiss	e	the entry at tablei
5960	set	key	the thread local object
5960	set	value	the value to be set
5962	replaceStaleEntry	key	the key
5962	replaceStaleEntry	value	the value to be associated with key
5962	replaceStaleEntry	staleSlot	index of the first stale entry encountered while searching for key
5963	expungeStaleEntry	staleSlot	index of slot known to have null key
5964	cleanSomeSlots	i	a position known NOT to hold a stale entry
5964	cleanSomeSlots	n	scan control logn cells are scanned unless a stale entry is found in which case logtable
5971	getEntry	key	the thread local object
5972	getEntryAfterMiss	key	the thread local object
5972	getEntryAfterMiss	i	the table index for key's hash code
5972	getEntryAfterMiss	e	the entry at tablei
5973	set	key	the thread local object
5973	set	value	the value to be set
5975	replaceStaleEntry	key	the key
5975	replaceStaleEntry	value	the value to be associated with key
5975	replaceStaleEntry	staleSlot	index of the first stale entry encountered while searching for key
5976	expungeStaleEntry	staleSlot	index of slot known to have null key
5977	cleanSomeSlots	i	a position known NOT to hold a stale entry
5977	cleanSomeSlots	n	scan control logn cells are scanned unless a stale entry is found in which case logtable
5984	getEntry	key	the thread local object
5985	getEntryAfterMiss	key	the thread local object
5985	getEntryAfterMiss	i	the table index for key's hash code
5985	getEntryAfterMiss	e	the entry at tablei
5986	set	key	the thread local object
5986	set	value	the value to be set
5988	replaceStaleEntry	key	the key
5988	replaceStaleEntry	value	the value to be associated with key
5988	replaceStaleEntry	staleSlot	index of the first stale entry encountered while searching for key
5989	expungeStaleEntry	staleSlot	index of slot known to have null key
5990	cleanSomeSlots	i	a position known NOT to hold a stale entry
5990	cleanSomeSlots	n	scan control logn cells are scanned unless a stale entry is found in which case logtable
5999	from	cd	CompositeData representing a MonitorInfo
6010	newPlatformMXBeanProxy	connection	the MBeanServerConnection to forward to
6010	newPlatformMXBeanProxy	mxbeanName	the name of a platform MXBean within connection to forward to
6010	newPlatformMXBeanProxy	mxbeanInterface	the MXBean interface to be implemented by the proxy
6021	setVerbose	value	true to enable verbose output false to disable
6033	from	cd	CompositeData representing a MemoryUsage
6037	from	cd	CompositeData representing a MemoryNotificationInfo
6043	getThreadInfo	id	the thread ID of the thread
6044	getThreadInfo	ids	an array of thread IDs
6045	getThreadInfo	id	the thread ID of the thread
6045	getThreadInfo	maxDepth	the maximum number of entries in the stack trace to be dumped
6046	getThreadInfo	ids	an array of thread IDs
6046	getThreadInfo	maxDepth	the maximum number of entries in the stack trace to be dumped
6049	setThreadContentionMonitoringEnabled	enable	true to enable false to disable
6052	getThreadCpuTime	id	the thread ID of a thread
6053	getThreadUserTime	id	the thread ID of a thread
6057	setThreadCpuTimeEnabled	enable	true to enable false to disable
6063	getThreadInfo	ids	an array of thread IDs
6063	getThreadInfo	lockedMonitors	if true retrieves all locked monitors
6063	getThreadInfo	lockedSynchronizers	if true retrieves all locked ownable synchronizers
6064	dumpAllThreads	lockedMonitors	if true dump all locked monitors
6064	dumpAllThreads	lockedSynchronizers	if true dump all locked ownable synchronizers
6068	initialize	t	Thread
6068	initialize	state	Thread state
6068	initialize	lockObj	Object on which the thread is blocked
6068	initialize	lockOwner	the thread holding the lock
6068	initialize	blockedCount	Number of times blocked to enter a lock
6068	initialize	blockedTime	Approx time blocked to enter a lock
6068	initialize	waitedCount	Number of times waited on a lock
6068	initialize	waitedTime	Approx time waited on a lock
6068	initialize	stackTrace	Thread stack trace
6068	initialize	lockedMonitors	List of locked monitors
6068	initialize	lockedSynchronizers	List of locked synchronizers
6084	from	cd	CompositeData representing a ThreadInfo
6095	setUsageThreshold	threshold	the new threshold value in bytes
6100	setCollectionUsageThreshold	threshold	the new collection usage threshold value in bytes
6109	setVerbose	value	true to enable the verbose output false to disable
6127	append	sb	the StringBuffer to append
6157	read	cb	the buffer to read characters into
6161	equals	other	the object to be compared for equality with this object
6166	valueOf	enumType	the code Class object of the enum type from which to return a constant
6166	valueOf	name	the name of the constant to return
6169	toString	i	an integer to be converted to a string
6169	toString	radix	the radix to use in the string representation
6170	toHexString	i	an integer to be converted to a string
6171	toOctalString	i	an integer to be converted to a string
6172	toBinaryString	i	an integer to be converted to a string
6174	toString	i	an integer to be converted
6176	parseInt	s	the code String containing the integer representation to be parsed
6176	parseInt	radix	the radix to be used while parsing code s
6177	parseInt	s	a code String containing the code int representation to be parsed
6178	valueOf	s	the string to be parsed
6178	valueOf	radix	the radix to be used in interpreting code s
6179	valueOf	s	the string to be parsed
6180	valueOf	i	an code int value
6189	equals	obj	the object to compare with
6190	getInteger	nm	property name
6191	getInteger	nm	property name
6191	getInteger	val	default value
6192	getInteger	nm	property name
6192	getInteger	val	default value
6193	decode	nm	the code String to decode
6194	compareTo	anotherInteger	the code Integer to be compared
6205	compareTo	o	the object to be compared
6212	sin	a	an angle in radians
6213	cos	a	an angle in radians
6214	tan	a	an angle in radians
6215	asin	a	the value whose arc sine is to be returned
6216	acos	a	the value whose arc cosine is to be returned
6217	atan	a	the value whose arc tangent is to be returned
6218	toRadians	angdeg	an angle in degrees
6219	toDegrees	angrad	an angle in radians
6220	exp	a	the exponent to raise e to
6221	log	a	a value
6222	log10	a	a value
6223	sqrt	a	a value
6224	cbrt	a	a value
6225	IEEEremainder	f1	the dividend
6225	IEEEremainder	f2	the divisor
6226	ceil	a	a value
6227	floor	a	a value
6228	rint	a	a value
6229	atan2	y	the ordinate coordinate
6229	atan2	x	the abscissa coordinate
6230	pow	a	base
6230	pow	b	the exponent
6231	round	a	a floatingpoint value to be rounded to an integer
6232	round	a	a floatingpoint value to be rounded to a code long
6234	abs	a	the argument whose absolute value is to be determined
6235	abs	a	the argument whose absolute value is to be determined
6236	abs	a	the argument whose absolute value is to be determined
6237	abs	a	the argument whose absolute value is to be determined
6238	max	a	an argument
6238	max	b	another argument
6239	max	a	an argument
6239	max	b	another argument
6240	max	a	an argument
6240	max	b	another argument
6241	max	a	an argument
6241	max	b	another argument
6242	min	a	an argument
6242	min	b	another argument
6243	min	a	an argument
6243	min	b	another argument
6244	min	a	an argument
6244	min	b	another argument
6245	min	a	an argument
6245	min	b	another argument
6246	ulp	d	the floatingpoint value whose ulp is to be returned
6247	ulp	f	the floatingpoint value whose ulp is to be returned
6248	signum	d	the floatingpoint value whose signum is to be returned
6249	signum	f	the floatingpoint value whose signum is to be returned
6250	sinh	x	The number whose hyperbolic sine is to be returned
6251	cosh	x	The number whose hyperbolic cosine is to be returned
6252	tanh	x	The number whose hyperbolic tangent is to be returned
6253	hypot	x	a value
6253	hypot	y	a value
6254	expm1	x	the exponent to raise e to in the computation of ecode xnbsp
6255	log1p	x	a value
6256	copySign	magnitude	the parameter providing the magnitude of the result
6256	copySign	sign	the parameter providing the sign of the result
6257	copySign	magnitude	the parameter providing the magnitude of the result
6257	copySign	sign	the parameter providing the sign of the result
6258	getExponent	f	a code float value
6259	getExponent	d	a code double value
6260	nextAfter	start	starting floatingpoint value
6260	nextAfter	direction	value indicating which of code start's neighbors or code start should be returned
6261	nextAfter	start	starting floatingpoint value
6261	nextAfter	direction	value indicating which of code start's neighbors or code start should be returned
6262	nextUp	d	starting floatingpoint value
6263	nextUp	f	starting floatingpoint value
6264	scalb	d	number to be scaled by a power of two
6264	scalb	scaleFactor	power of used to scale code d
6265	scalb	f	number to be scaled by a power of two
6265	scalb	scaleFactor	power of used to scale code f
6266	parseBoolean	s	the code String containing the boolean representation to be parsed
6268	valueOf	b	a boolean value
6269	valueOf	s	a string
6270	toString	b	the boolean to be converted
6273	equals	obj	the object to compare with
6274	getBoolean	name	the system property name
6275	compareTo	b	the code Boolean instance to be compared
6279	initCause	cause	the cause which is saved for later retrieval by the link getCause method
6282	printStackTrace	s	PrintStream to use for output
6284	printStackTrace	s	PrintWriter to use for output
6288	setStackTrace	stackTrace	the stack trace elements to be associated with this Throwable
6290	getStackTraceElement	index	index of the element to return
6291	command	command	The list containing the program and its arguments
6292	command	command	A string array containing the program and its arguments
6296	directory	directory	The new working directory
6298	redirectErrorStream	redirectErrorStream	The new property value
6304	charAt	index	the index of the char value
6305	codePointAt	index	the index to the char values
6306	codePointBefore	index	the index following the code point that should be returned
6307	codePointCount	beginIndex	the index to the first char of the text range
6307	codePointCount	endIndex	the index after the last char of the text range
6308	offsetByCodePoints	index	the index to be offset
6308	offsetByCodePoints	codePointOffset	the offset in code points
6310	getChars	srcBegin	index of the first character in the string to copy
6310	getChars	srcEnd	index after the last character in the string to copy
6310	getChars	dst	the destination array
6310	getChars	dstBegin	the start offset in the destination array
6311	getBytes	srcBegin	Index of the first character in the string to copy
6311	getBytes	srcEnd	Index after the last character in the string to copy
6311	getBytes	dst	The destination array
6311	getBytes	dstBegin	The start offset in the destination array
6312	getBytes	charsetName	The name of a supported linkplain java
6313	getBytes	charset	The linkplain java
6315	equals	anObject	The object to compare this code String against
6316	contentEquals	sb	The code StringBuffer to compare this code String against
6317	contentEquals	cs	The sequence to compare this code String against
6318	equalsIgnoreCase	anotherString	The code String to compare this code String against
6319	compareTo	anotherString	the String to be compared
6320	compareToIgnoreCase	str	the String to be compared
6321	regionMatches	toffset	the starting offset of the subregion in this string
6321	regionMatches	other	the string argument
6321	regionMatches	ooffset	the starting offset of the subregion in the string argument
6321	regionMatches	len	the number of characters to compare
6322	regionMatches	ignoreCase	if true ignore case when comparing characters
6322	regionMatches	toffset	the starting offset of the subregion in this string
6322	regionMatches	other	the string argument
6322	regionMatches	ooffset	the starting offset of the subregion in the string argument
6322	regionMatches	len	the number of characters to compare
6323	startsWith	prefix	the prefix
6323	startsWith	toffset	where to begin looking in this string
6324	startsWith	prefix	the prefix
6325	endsWith	suffix	the suffix
6327	indexOf	ch	a character Unicode code point
6328	indexOf	ch	a character Unicode code point
6328	indexOf	fromIndex	the index to start the search from
6329	lastIndexOf	ch	a character Unicode code point
6330	lastIndexOf	ch	a character Unicode code point
6330	lastIndexOf	fromIndex	the index to start the search from
6331	indexOf	str	any string
6332	indexOf	str	the substring for which to search
6332	indexOf	fromIndex	the index from which to start the search
6333	indexOf	source	the characters being searched
6333	indexOf	sourceOffset	offset of the source string
6333	indexOf	sourceCount	count of the source string
6333	indexOf	target	the characters being searched for
6333	indexOf	targetOffset	offset of the target string
6333	indexOf	targetCount	count of the target string
6333	indexOf	fromIndex	the index to begin searching from
6334	lastIndexOf	str	the substring to search for
6335	lastIndexOf	str	the substring to search for
6335	lastIndexOf	fromIndex	the index to start the search from
6336	lastIndexOf	source	the characters being searched
6336	lastIndexOf	sourceOffset	offset of the source string
6336	lastIndexOf	sourceCount	count of the source string
6336	lastIndexOf	target	the characters being searched for
6336	lastIndexOf	targetOffset	offset of the target string
6336	lastIndexOf	targetCount	count of the target string
6336	lastIndexOf	fromIndex	the index to begin searching from
6337	substring	beginIndex	the beginning index inclusive
6338	substring	beginIndex	the beginning index inclusive
6338	substring	endIndex	the ending index exclusive
6339	subSequence	beginIndex	the begin index inclusive
6339	subSequence	endIndex	the end index exclusive
6340	concat	str	the String that is concatenated to the end of this String
6341	replace	oldChar	the old character
6341	replace	newChar	the new character
6342	matches	regex	the regular expression to which this string is to be matched
6343	contains	s	the sequence to search for
6344	replaceFirst	regex	the regular expression to which this string is to be matched
6344	replaceFirst	replacement	the string to be substituted for the first match
6345	replaceAll	regex	the regular expression to which this string is to be matched
6345	replaceAll	replacement	the string to be substituted for each match
6346	replace	target	The sequence of char values to be replaced
6346	replace	replacement	The replacement sequence of char values
6347	split	regex	the delimiting regular expression
6347	split	limit	the result threshold as described above
6348	split	regex	the delimiting regular expression
6349	toLowerCase	locale	use the case transformation rules for this locale
6351	toUpperCase	locale	use the case transformation rules for this locale
6356	format	format	A a href
6356	format	args	Arguments referenced by the format specifiers in the format string
6357	format	l	The linkplain java
6357	format	format	A a href
6357	format	args	Arguments referenced by the format specifiers in the format string
6358	valueOf	obj	an Object
6359	valueOf	data	a char array
6360	valueOf	data	the character array
6360	valueOf	offset	the initial offset into the value of the String
6360	valueOf	count	the length of the value of the String
6361	copyValueOf	data	the character array
6361	copyValueOf	offset	initial offset of the subarray
6361	copyValueOf	count	length of the subarray
6362	copyValueOf	data	the character array
6363	valueOf	b	a boolean
6364	valueOf	c	a char
6365	valueOf	i	an int
6366	valueOf	l	a long
6367	valueOf	f	a float
6368	valueOf	d	a double
6370	toString	d	the code double to be converted
6371	toHexString	d	the code double to be converted
6372	valueOf	s	the string to be parsed
6373	valueOf	d	a double value
6374	parseDouble	s	the string to be parsed
6375	isNaN	v	the value to be tested
6376	isInfinite	v	the value to be tested
6387	equals	obj	the object to compare with
6388	doubleToLongBits	value	a code double precision floatingpoint number
6389	doubleToRawLongBits	value	a code double precision floatingpoint number
6390	longBitsToDouble	bits	any code long integer
6391	compareTo	anotherDouble	the code Double to be compared
6392	compare	d1	the first code double to compare
6392	compare	d2	the second code double to compare
6393	sin	a	an angle in radians
6394	cos	a	an angle in radians
6395	tan	a	an angle in radians
6396	asin	a	the value whose arc sine is to be returned
6397	acos	a	the value whose arc cosine is to be returned
6398	atan	a	the value whose arc tangent is to be returned
6399	toRadians	angdeg	an angle in degrees
6400	toDegrees	angrad	an angle in radians
6401	exp	a	the exponent to raise e to
6402	log	a	a value
6403	log10	a	a value
6404	sqrt	a	a value
6405	cbrt	a	a value
6406	IEEEremainder	f1	the dividend
6406	IEEEremainder	f2	the divisor
6407	ceil	a	a value
6408	floor	a	a value
6409	rint	a	a code double value
6410	atan2	y	the ordinate coordinate
6410	atan2	x	the abscissa coordinate
6411	pow	a	the base
6411	pow	b	the exponent
6412	round	a	a floatingpoint value to be rounded to an integer
6413	round	a	a floatingpoint value to be rounded to a code long
6415	abs	a	the argument whose absolute value is to be determined
6416	abs	a	the argument whose absolute value is to be determined
6417	abs	a	the argument whose absolute value is to be determined
6418	abs	a	the argument whose absolute value is to be determined
6419	max	a	an argument
6419	max	b	another argument
6420	max	a	an argument
6420	max	b	another argument
6421	max	a	an argument
6421	max	b	another argument
6422	max	a	an argument
6422	max	b	another argument
6423	min	a	an argument
6423	min	b	another argument
6424	min	a	an argument
6424	min	b	another argument
6425	min	a	an argument
6425	min	b	another argument
6426	min	a	an argument
6426	min	b	another argument
6427	ulp	d	the floatingpoint value whose ulp is to be returned
6428	ulp	f	the floatingpoint value whose ulp is to be returned
6429	signum	d	the floatingpoint value whose signum is to be returned
6430	signum	f	the floatingpoint value whose signum is to be returned
6431	sinh	x	The number whose hyperbolic sine is to be returned
6432	cosh	x	The number whose hyperbolic cosine is to be returned
6433	tanh	x	The number whose hyperbolic tangent is to be returned
6434	hypot	x	a value
6434	hypot	y	a value
6435	expm1	x	the exponent to raise e to in the computation of ecode xnbsp
6436	log1p	x	a value
6437	copySign	magnitude	the parameter providing the magnitude of the result
6437	copySign	sign	the parameter providing the sign of the result
6438	copySign	magnitude	the parameter providing the magnitude of the result
6438	copySign	sign	the parameter providing the sign of the result
6439	getExponent	f	a code float value
6440	getExponent	d	a code double value
6441	nextAfter	start	starting floatingpoint value
6441	nextAfter	direction	value indicating which of code start's neighbors or code start should be returned
6442	nextAfter	start	starting floatingpoint value
6442	nextAfter	direction	value indicating which of code start's neighbors or code start should be returned
6443	nextUp	d	starting floatingpoint value
6444	nextUp	f	starting floatingpoint value
6445	scalb	d	number to be scaled by a power of two
6445	scalb	scaleFactor	power of used to scale code d
6446	scalb	f	number to be scaled by a power of two
6446	scalb	scaleFactor	power of used to scale code f
6447	append	csq	The character sequence to append
6448	append	csq	The character sequence from which a subsequence will be appended
6448	append	start	The index of the first character in the subsequence
6448	append	end	The index of the character following the last character in the subsequence
6449	append	c	The character to append
6458	isSealed	url	the code source url
6459	isCompatibleWith	desired	the version string of the desired version
6460	getPackage	name	a package name for example java
6462	getPackage	class	the class to get the package of
6476	setDaemon	daemon	if true marks this thread group as a daemon thread group otherwise marks this thread group as normal
6477	setMaxPriority	pri	the new priority of the thread group
6478	parentOf	g	a thread group
6481	enumerate	list	an array into which to place the list of threads
6482	enumerate	list	an array into which to place the list of threads
6482	enumerate	recurse	a flag indicating whether also to include threads in thread groups that are subgroups of this thread group
6484	enumerate	list	an array into which to place the list of thread groups
6485	enumerate	list	an array into which to place the list of threads
6485	enumerate	recurse	a flag indicating whether to recursively enumerate all included thread groups
6492	add	g	the specified Thread group to be added
6493	remove	g	the Thread group to be removed
6495	add	t	the Thread to be added
6496	remove	t	the Thread to be removed
6498	uncaughtException	t	the thread that is about to exit
6498	uncaughtException	e	the uncaught exception
6499	allowThreadSuspension	b	boolean to allow or disallow suspension
6501	childValue	parentValue	the parent thread's value
6502	getMap	t	the current thread
6503	createMap	t	the current thread
6503	createMap	firstValue	value for the initial entry of the table
6503	createMap	map	the map to store
6505	remove	timeout	If positive block for up to timeout milliseconds while waiting for a reference to be added to this queue
6513	forInputString	s	the input causing the error
6514	addTransformer	transformer	the transformer to register
6514	addTransformer	canRetransform	can this transformer's transformations be retransformed
6515	addTransformer	transformer	the transformer to register
6516	removeTransformer	transformer	the transformer to unregister
6518	retransformClasses	classes	array of classes to retransform a zerolength array is allowed in this case this method does nothing
6520	redefineClasses	definitions	array of classes to redefine with corresponding definitions a zerolength array is allowed in this case this method does nothing
6523	getInitiatedClasses	loader	the loader whose initiated class list will be returned
6524	getObjectSize	objectToSize	the object to size
6525	appendToBootstrapClassLoaderSearch	jarfile	The JAR file to be searched when the bootstrap class loader unsuccessfully searches for a class
6526	appendToSystemClassLoaderSearch	jarfile	The JAR file to be searched when the system class loader unsuccessfully searches for a class
6528	setNativeMethodPrefix	transformer	The ClassFileTransformer which wraps using this prefix
6528	setNativeMethodPrefix	prefix	The prefix which has been applied to wrapped native methods
6531	transform	loader	the defining loader of the class to be transformed may be null if the bootstrap loader
6531	transform	className	the name of the class in the internal form of fully qualified class and interface names as defined in The Java Virtual Machine Specification
6531	transform	classBeingRedefined	if this is triggered by a redefine or retransform the class being redefined or retransformed if this is a class load null
6531	transform	protectionDomain	the protection domain of the class being defined or redefined
6531	transform	classfileBuffer	the input byte buffer in class file format must not be modified
6537	classDepth	name	the fully qualified name of the class to search for
6539	inClass	name	the fully qualified name of the class
6542	checkPermission	perm	the requested permission
6543	checkPermission	perm	the specified permission
6543	checkPermission	context	a systemdependent security context
6545	checkAccess	t	the thread to be checked
6546	checkAccess	g	the thread group to be checked
6547	checkExit	status	the exit status
6548	checkExec	cmd	the specified system command
6549	checkLink	lib	the name of the library
6550	checkRead	fd	the systemdependent file descriptor
6551	checkRead	file	the systemdependent file name
6552	checkRead	file	the systemdependent filename
6552	checkRead	context	a systemdependent security context
6553	checkWrite	fd	the systemdependent file descriptor
6554	checkWrite	file	the systemdependent filename
6555	checkDelete	file	the systemdependent filename
6556	checkConnect	host	the host name port to connect to
6556	checkConnect	port	the protocol port to connect to
6557	checkConnect	host	the host name port to connect to
6557	checkConnect	port	the protocol port to connect to
6557	checkConnect	context	a systemdependent security context
6558	checkListen	port	the local port
6559	checkAccept	host	the host name of the socket connection
6559	checkAccept	port	the port number of the socket connection
6560	checkMulticast	maddr	Internet group address to be used
6561	checkMulticast	maddr	Internet group address to be used
6561	checkMulticast	ttl	value in use if it is multicast send
6563	checkPropertyAccess	key	a system property key
6564	checkTopLevelWindow	window	the new window that is being created
6568	checkPackageAccess	pkg	the package name
6569	checkPackageDefinition	pkg	the package name
6571	checkMemberAccess	clazz	the class that reflection is to be performed on
6571	checkMemberAccess	which	type of access PUBLIC or DECLARED
6572	checkSecurityAccess	target	the target name of the SecurityPermission
6576	ensureCapacity	minimumCapacity	the minimum desired capacity
6579	setLength	newLength	the new length
6580	charAt	index	the index of the desired char value
6581	codePointAt	index	the index to the char values
6582	codePointBefore	index	the index following the code point that should be returned
6583	codePointCount	beginIndex	the index to the first char of the text range
6583	codePointCount	endIndex	the index after the last char of the text range
6584	offsetByCodePoints	index	the index to be offset
6584	offsetByCodePoints	codePointOffset	the offset in code points
6585	getChars	srcBegin	start copying at this offset
6585	getChars	srcEnd	stop copying at this offset
6585	getChars	dst	the array to copy the data into
6585	getChars	dstBegin	offset into dst
6586	setCharAt	index	the index of the character to modify
6586	setCharAt	ch	the new character
6587	append	obj	an Object
6588	append	str	a string
6589	append	s	the sequence to append
6589	append	start	the starting index of the subsequence to be appended
6589	append	end	the end index of the subsequence to be appended
6590	append	str	the characters to be appended
6591	append	str	the characters to be appended
6591	append	offset	the index of the first char to append
6591	append	len	the number of chars to append
6592	append	b	a boolean
6593	append	c	a char
6594	append	i	an int
6595	append	l	a long
6596	append	f	a float
6597	append	d	a double
6598	delete	start	The beginning index inclusive
6598	delete	end	The ending index exclusive
6599	appendCodePoint	codePoint	a Unicode code point
6600	deleteCharAt	index	Index of char to remove
6601	replace	start	The beginning index inclusive
6601	replace	end	The ending index exclusive
6601	replace	str	String that will replace previous contents
6602	substring	start	The beginning index inclusive
6603	subSequence	start	the start index inclusive
6603	subSequence	end	the end index exclusive
6604	substring	start	The beginning index inclusive
6604	substring	end	The ending index exclusive
6605	insert	index	position at which to insert subarray
6605	insert	str	A char array
6605	insert	offset	the index of the first char in subarray to be inserted
6605	insert	len	the number of chars in the subarray to be inserted
6606	insert	offset	the offset
6606	insert	obj	an Object
6607	insert	offset	the offset
6607	insert	str	a string
6608	insert	offset	the offset
6608	insert	str	a character array
6609	insert	dstOffset	the offset
6609	insert	s	the sequence to be inserted
6610	insert	dstOffset	the offset in this sequence
6610	insert	s	the sequence to be inserted
6610	insert	start	the starting index of the subsequence to be inserted
6610	insert	end	the end index of the subsequence to be inserted
6611	insert	offset	the offset
6611	insert	b	a boolean
6612	insert	offset	the offset
6612	insert	c	a char
6613	insert	offset	the offset
6613	insert	i	an int
6614	insert	offset	the offset
6614	insert	l	a long
6615	insert	offset	the offset
6615	insert	f	a float
6616	insert	offset	the offset
6616	insert	d	a double
6617	indexOf	str	any string
6618	indexOf	str	the substring for which to search
6618	indexOf	fromIndex	the index from which to start the search
6619	lastIndexOf	str	the substring to search for
6620	lastIndexOf	str	the substring to search for
6620	lastIndexOf	fromIndex	the index to start the search from
6624	toString	b	the code byte to be converted
6625	valueOf	b	a byte value
6626	parseByte	s	the code String containing the code byte representation to be parsed
6626	parseByte	radix	the radix to be used while parsing code s
6627	parseByte	s	a code String containing the code byte representation to be parsed
6628	valueOf	s	the string to be parsed
6628	valueOf	radix	the radix to be used in interpreting code s
6629	valueOf	s	the string to be parsed
6630	decode	nm	the code String to decode
6639	equals	obj	the object to compare with
6640	compareTo	anotherByte	the code Byte to be compared
6641	toString	i	a code long to be converted to a string
6641	toString	radix	the radix to use in the string representation
6642	toHexString	i	a code long to be converted to a string
6643	toOctalString	i	a code long to be converted to a string
6644	toBinaryString	i	a code long to be converted to a string
6646	toString	i	a code long to be converted
6648	parseLong	s	the code String containing the code long representation to be parsed
6648	parseLong	radix	the radix to be used while parsing code s
6649	parseLong	s	a code String containing the code long representation to be parsed
6650	valueOf	s	the string to be parsed
6650	valueOf	radix	the radix to be used in interpreting code s
6651	valueOf	s	the string to be parsed
6652	valueOf	l	a long value
6653	decode	nm	the code String to decode
6662	equals	obj	the object to compare with
6663	getLong	nm	property name
6664	getLong	nm	property name
6664	getLong	val	default value
6665	getLong	nm	property name
6665	getLong	val	default value
6666	compareTo	anotherLong	the code Long to be compared
6677	setIn	in	the new standard input stream
6678	setOut	out	the new standard output stream
6679	setErr	err	the new standard error output stream
6682	setSecurityManager	s	the security manager
6686	arraycopy	src	the source array
6686	arraycopy	srcPos	starting position in the source array
6686	arraycopy	dest	the destination array
6686	arraycopy	destPos	starting position in the destination data
6686	arraycopy	length	the number of array elements to be copied
6687	identityHashCode	x	object for which the hashCode is to be calculated
6689	setProperties	props	the new system properties
6690	getProperty	key	the name of the system property
6691	getProperty	key	the name of the system property
6691	getProperty	def	a default value
6692	setProperty	key	the name of the system property
6692	setProperty	value	the value of the system property
6693	clearProperty	key	the name of the system property to be removed
6694	getenv	name	the name of the environment variable
6696	exit	status	exit status
6699	runFinalizersOnExit	value	indicating enabling or disabling of finalization
6700	load	filename	the file to load
6701	loadLibrary	libname	the name of the library
6702	mapLibraryName	libname	the name of the library
6707	equals	obj	the reference object with which to compare
6712	wait	timeout	the maximum time to wait in milliseconds
6713	wait	timeout	the maximum time to wait in milliseconds
6713	wait	nanos	additional time in nanoseconds range 
6725	valueOf	c	a char value
6728	equals	obj	the object to compare with
6730	toString	c	the char to be converted
6731	isValidCodePoint	codePoint	the Unicode code point to be tested
6732	isSupplementaryCodePoint	codePoint	the character Unicode code point to be tested
6733	isHighSurrogate	ch	the char value to be tested
6734	isLowSurrogate	ch	the char value to be tested
6735	isSurrogatePair	high	the highsurrogate code value to be tested
6735	isSurrogatePair	low	the lowsurrogate code value to be tested
6736	charCount	codePoint	the character Unicode code point to be tested
6737	toCodePoint	high	the highsurrogate code unit
6737	toCodePoint	low	the lowsurrogate code unit
6738	codePointAt	seq	a sequence of char values Unicode code units
6738	codePointAt	index	the index to the char values Unicode code units in seq to be converted
6739	codePointAt	a	the char array
6739	codePointAt	index	the index to the char values Unicode code units in the char array to be converted
6740	codePointAt	a	the char array
6740	codePointAt	index	the index to the char values Unicode code units in the char array to be converted
6740	codePointAt	limit	the index after the last array element that can be used in the char array
6741	codePointBefore	seq	the CharSequence instance
6741	codePointBefore	index	the index following the code point that should be returned
6742	codePointBefore	a	the char array
6742	codePointBefore	index	the index following the code point that should be returned
6743	codePointBefore	a	the char array
6743	codePointBefore	index	the index following the code point that should be returned
6743	codePointBefore	start	the index of the first array element in the char array
6744	toChars	codePoint	the character Unicode code point to be converted
6744	toChars	dst	an array of char in which the codePoint's UTF value is stored
6744	toChars	dstIndex	the start index into the dst array where the converted value is stored
6745	toChars	codePoint	a Unicode code point
6746	codePointCount	seq	the char sequence
6746	codePointCount	beginIndex	the index to the first char of the text range
6746	codePointCount	endIndex	the index after the last char of the text range
6747	codePointCount	a	the char array
6747	codePointCount	offset	the index of the first char in the given char array
6747	codePointCount	count	the length of the subarray in chars
6748	offsetByCodePoints	seq	the char sequence
6748	offsetByCodePoints	index	the index to be offset
6748	offsetByCodePoints	codePointOffset	the offset in code points
6749	offsetByCodePoints	a	the char array
6749	offsetByCodePoints	start	the index of the first char of the subarray
6749	offsetByCodePoints	count	the length of the subarray in chars
6749	offsetByCodePoints	index	the index to be offset
6749	offsetByCodePoints	codePointOffset	the offset in code points
6750	isLowerCase	ch	the character to be tested
6751	isLowerCase	codePoint	the character Unicode code point to be tested
6752	isUpperCase	ch	the character to be tested
6753	isUpperCase	codePoint	the character Unicode code point to be tested
6754	isTitleCase	ch	the character to be tested
6755	isTitleCase	codePoint	the character Unicode code point to be tested
6756	isDigit	ch	the character to be tested
6757	isDigit	codePoint	the character Unicode code point to be tested
6758	isDefined	ch	the character to be tested
6759	isDefined	codePoint	the character Unicode code point to be tested
6760	isLetter	ch	the character to be tested
6761	isLetter	codePoint	the character Unicode code point to be tested
6762	isLetterOrDigit	ch	the character to be tested
6763	isLetterOrDigit	codePoint	the character Unicode code point to be tested
6764	isJavaLetter	ch	the character to be tested
6765	isJavaLetterOrDigit	ch	the character to be tested
6766	isJavaIdentifierStart	ch	the character to be tested
6767	isJavaIdentifierStart	codePoint	the character Unicode code point to be tested
6768	isJavaIdentifierPart	ch	the character to be tested
6769	isJavaIdentifierPart	codePoint	the character Unicode code point to be tested
6770	isUnicodeIdentifierStart	ch	the character to be tested
6771	isUnicodeIdentifierStart	codePoint	the character Unicode code point to be tested
6772	isUnicodeIdentifierPart	ch	the character to be tested
6773	isUnicodeIdentifierPart	codePoint	the character Unicode code point to be tested
6774	isIdentifierIgnorable	ch	the character to be tested
6775	isIdentifierIgnorable	codePoint	the character Unicode code point to be tested
6776	toLowerCase	ch	the character to be converted
6777	toLowerCase	codePoint	the character Unicode code point to be converted
6778	toUpperCase	ch	the character to be converted
6779	toUpperCase	codePoint	the character Unicode code point to be converted
6780	toTitleCase	ch	the character to be converted
6781	toTitleCase	codePoint	the character Unicode code point to be converted
6782	digit	ch	the character to be converted
6782	digit	radix	the radix
6783	digit	codePoint	the character Unicode code point to be converted
6783	digit	radix	the radix
6784	getNumericValue	ch	the character to be converted
6785	getNumericValue	codePoint	the character Unicode code point to be converted
6786	isSpace	ch	the character to be tested
6787	isSpaceChar	ch	the character to be tested
6788	isSpaceChar	codePoint	the character Unicode code point to be tested
6789	isWhitespace	ch	the character to be tested
6790	isWhitespace	codePoint	the character Unicode code point to be tested
6791	isISOControl	ch	the character to be tested
6792	isISOControl	codePoint	the character Unicode code point to be tested
6793	getType	ch	the character to be tested
6794	getType	codePoint	the character Unicode code point to be tested
6795	forDigit	digit	the number to convert to a character
6795	forDigit	radix	the radix
6796	getDirectionality	ch	char for which the directionality property is requested
6797	getDirectionality	codePoint	the character Unicode code point for which the directionality property is requested
6798	isMirrored	ch	char for which the mirrored property is requested
6799	isMirrored	codePoint	the character Unicode code point to be tested
6800	compareTo	anotherCharacter	the Character to be compared
6801	toUpperCaseEx	codePoint	the character Unicode code point to be converted
6802	toUpperCaseCharArray	codePoint	the character Unicode code point to be converted
6807	of	c	The character in question
6808	of	codePoint	the character Unicode code point in question
6809	forName	blockName	A UnicodeBlock name
6813	of	c	The character in question
6814	of	codePoint	the character Unicode code point in question
6815	forName	blockName	A UnicodeBlock name
6819	of	c	The character in question
6820	of	codePoint	the character Unicode code point in question
6821	forName	blockName	A UnicodeBlock name
6828	toString	f	the float to be converted
6829	toHexString	f	the code float to be converted
6830	valueOf	s	the string to be parsed
6831	valueOf	f	a float value
6832	parseFloat	s	the string to be parsed
6833	isNaN	v	the value to be tested
6834	isInfinite	v	the value to be tested
6845	equals	obj	the object to be compared
6846	floatToIntBits	value	a floatingpoint number
6847	floatToRawIntBits	value	a floatingpoint number
6848	intBitsToFloat	bits	an integer
6849	compareTo	anotherFloat	the code Float to be compared
6850	compare	f1	the first code float to compare
6850	compare	f2	the second code float to compare
6854	invoke	proxy	the proxy instance that the method was invoked on
6854	invoke	method	the code Method instance corresponding to the interface method invoked on the proxy instance
6854	invoke	args	an array of objects containing the values of the arguments passed in the method invocation on the proxy instance or code null if interface method takes no arguments
6858	setAccessible	array	the array of AccessibleObjects
6858	setAccessible	flag	the new value for the code accessible flag in each object
6859	setAccessible	flag	the new value for the code accessible flag
6889	get	obj	object from which the represented field's value is to be extracted
6890	getBoolean	obj	the object to extract the code boolean value from
6891	getByte	obj	the object to extract the code byte value from
6892	getChar	obj	the object to extract the code char value from
6893	getShort	obj	the object to extract the code short value from
6894	getInt	obj	the object to extract the code int value from
6895	getLong	obj	the object to extract the code long value from
6896	getFloat	obj	the object to extract the code float value from
6897	getDouble	obj	the object to extract the code double value from
6898	set	obj	the object whose field should be modified
6898	set	value	the new value for the field of code obj being modified
6899	setBoolean	obj	the object whose field should be modified
6899	setBoolean	z	the new value for the field of code obj being modified
6900	setByte	obj	the object whose field should be modified
6900	setByte	b	the new value for the field of code obj being modified
6901	setChar	obj	the object whose field should be modified
6901	setChar	c	the new value for the field of code obj being modified
6902	setShort	obj	the object whose field should be modified
6902	setShort	s	the new value for the field of code obj being modified
6903	setInt	obj	the object whose field should be modified
6903	setInt	i	the new value for the field of code obj being modified
6904	setLong	obj	the object whose field should be modified
6904	setLong	l	the new value for the field of code obj being modified
6905	setFloat	obj	the object whose field should be modified
6905	setFloat	f	the new value for the field of code obj being modified
6906	setDouble	obj	the object whose field should be modified
6906	setDouble	d	the new value for the field of code obj being modified
6912	isAnnotationPresent	annotationClass	the Class object corresponding to the annotation type
6913	getAnnotation	annotationClass	the Class object corresponding to the annotation type
6916	newInstance	componentType	the code Class object representing the component type of the new array
6916	newInstance	length	the length of the new array
6917	newInstance	componentType	the code Class object representing the component type of the new array
6917	newInstance	dimensions	an array of code int representing the dimensions of the new array
6918	getLength	array	the array
6919	get	array	the array
6919	get	index	the index
6920	getBoolean	array	the array
6920	getBoolean	index	the index
6921	getByte	array	the array
6921	getByte	index	the index
6922	getChar	array	the array
6922	getChar	index	the index
6923	getShort	array	the array
6923	getShort	index	the index
6924	getInt	array	the array
6924	getInt	index	the index
6925	getLong	array	the array
6925	getLong	index	the index
6926	getFloat	array	the array
6926	getFloat	index	the index
6927	getDouble	array	the array
6927	getDouble	index	the index
6928	set	array	the array
6928	set	index	the index into the array
6928	set	value	the new value of the indexed component
6929	setBoolean	array	the array
6929	setBoolean	index	the index into the array
6929	setBoolean	z	the new value of the indexed component
6930	setByte	array	the array
6930	setByte	index	the index into the array
6930	setByte	b	the new value of the indexed component
6931	setChar	array	the array
6931	setChar	index	the index into the array
6931	setChar	c	the new value of the indexed component
6932	setShort	array	the array
6932	setShort	index	the index into the array
6932	setShort	s	the new value of the indexed component
6933	setInt	array	the array
6933	setInt	index	the index into the array
6933	setInt	i	the new value of the indexed component
6934	setLong	array	the array
6934	setLong	index	the index into the array
6934	setLong	l	the new value of the indexed component
6935	setFloat	array	the array
6935	setFloat	index	the index into the array
6935	setFloat	f	the new value of the indexed component
6936	setDouble	array	the array
6936	setDouble	index	the index into the array
6936	setDouble	d	the new value of the indexed component
6950	newInstance	initargs	array of objects to be passed as arguments to the constructor call values of primitive types are wrapped in a wrapper object of the appropriate type e
6956	getProxyClass	loader	the class loader to define the proxy class
6956	getProxyClass	interfaces	the list of interfaces for the proxy class to implement
6957	newProxyInstance	loader	the class loader to define the proxy class
6957	newProxyInstance	interfaces	the list of interfaces for the proxy class to implement
6957	newProxyInstance	h	the invocation handler to dispatch method invocations to
6958	isProxyClass	cl	the class to test
6959	getInvocationHandler	proxy	the proxy instance to return the invocation handler for
6975	invoke	obj	the object the underlying method is invoked from
6975	invoke	args	the arguments used for the method call
6983	isPublic	mod	a set of modifiers
6984	isPrivate	mod	a set of modifiers
6985	isProtected	mod	a set of modifiers
6986	isStatic	mod	a set of modifiers
6987	isFinal	mod	a set of modifiers
6988	isSynchronized	mod	a set of modifiers
6989	isVolatile	mod	a set of modifiers
6990	isTransient	mod	a set of modifiers
6991	isNative	mod	a set of modifiers
6992	isInterface	mod	a set of modifiers
6993	isAbstract	mod	a set of modifiers
6994	isStrict	mod	a set of modifiers
6995	toString	mod	a set of modifiers
6996	toString	s	the code short to be converted
6997	parseShort	s	the code String containing the code short representation to be parsed
6997	parseShort	radix	the radix to be used while parsing code s
6998	parseShort	s	a code String containing the code short representation to be parsed
6999	valueOf	s	the string to be parsed
6999	valueOf	radix	the radix to be used in interpreting code s
7000	valueOf	s	the string to be parsed
7001	valueOf	s	a short value
7002	decode	nm	the code String to decode
7011	equals	obj	the object to compare with
7012	compareTo	anotherShort	the code Short to be compared
7022	equals	obj	the object to be compared with this stack trace element
7025	forName	className	the fully qualified name of the desired class
7026	forName	name	fully qualified name of the desired class
7026	forName	initialize	whether the class must be initialized
7026	forName	loader	class loader from which the class must be loaded
7029	isInstance	obj	the object to check
7030	isAssignableFrom	cls	the code Class object to be checked
7064	getField	name	the field name
7065	getMethod	name	the name of the method
7065	getMethod	parameterTypes	the list of parameters
7066	getConstructor	parameterTypes	the parameter array
7071	getDeclaredField	name	the name of the field
7072	getDeclaredMethod	name	the name of the method
7072	getDeclaredMethod	parameterTypes	the parameter array
7073	getDeclaredConstructor	parameterTypes	the parameter array
7074	getResourceAsStream	name	name of the desired resource
7075	getResource	name	name of the desired resource
7085	cast	obj	the object to be cast
7098	exit	status	Termination status
7099	addShutdownHook	hook	An initialized but unstarted link Thread object
7100	removeShutdownHook	hook	the hook to remove
7101	halt	status	Termination status
7102	runFinalizersOnExit	value	true to enable finalization on exit false to disable
7103	exec	command	a specified system command
7104	exec	command	a specified system command
7104	exec	envp	array of strings each element of which has environment variable settings in the format namevalue or null if the subprocess should inherit the environment of the current process
7105	exec	command	a specified system command
7105	exec	envp	array of strings each element of which has environment variable settings in the format namevalue or null if the subprocess should inherit the environment of the current process
7105	exec	dir	the working directory of the subprocess or null if the subprocess should inherit the working directory of the current process
7106	exec	cmdarray	array containing the command to call and its arguments
7107	exec	cmdarray	array containing the command to call and its arguments
7107	exec	envp	array of strings each element of which has environment variable settings in the format namevalue or null if the subprocess should inherit the environment of the current process
7108	exec	cmdarray	array containing the command to call and its arguments
7108	exec	envp	array of strings each element of which has environment variable settings in the format namevalue or null if the subprocess should inherit the environment of the current process
7108	exec	dir	the working directory of the subprocess or null if the subprocess should inherit the working directory of the current process
7115	traceInstructions	on	true to enable instruction tracing false to disable this feature
7116	traceMethodCalls	on	true to enable instruction tracing false to disable this feature
7117	load	filename	the file to load
7118	loadLibrary	libname	the name of the library
7119	getLocalizedInputStream	in	InputStream to localize
7120	getLocalizedOutputStream	out	OutputStream to localize
7123	sleep	millis	the length of time to sleep in milliseconds
7124	sleep	millis	the length of time to sleep in milliseconds
7124	sleep	nanos	 additional nanoseconds to sleep
7125	init	g	the Thread group
7125	init	target	the object whose run method gets called
7125	init	name	the name of the new Thread
7125	init	stackSize	the desired stack size for the new thread or zero to indicate that this parameter is to be ignored
7131	stop	obj	the Throwable object to be thrown
7141	setPriority	newPriority	priority to set this thread to
7143	setName	name	the new name for this thread
7147	enumerate	tarray	an array of Thread objects to copy to
7149	join	millis	the time to wait in milliseconds
7150	join	millis	the time to wait in milliseconds
7150	join	nanos	 additional nanoseconds to wait
7153	setDaemon	on	if true marks this thread as a daemon thread
7158	setContextClassLoader	cl	the context ClassLoader for this Thread
7159	holdsLock	obj	the object on which to test lock ownership
7166	setDefaultUncaughtExceptionHandler	eh	the object to use as the default uncaught exception handler
7169	setUncaughtExceptionHandler	eh	the object to use as this thread's uncaught exception handler
7171	uncaughtException	t	the thread
7171	uncaughtException	e	the exception
7172	uncaughtException	t	the thread
7172	uncaughtException	e	the exception
7173	uncaughtException	t	the thread
7173	uncaughtException	e	the exception
7175	charAt	index	the index of the char value to be returned
7176	subSequence	start	the start index inclusive
7176	subSequence	end	the end index exclusive
7178	compileClass	clazz	A class
7179	compileClasses	string	The name of the classes to compile
7180	command	any	An argument
