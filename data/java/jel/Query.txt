Reads a single character
Reads characters into a portion of an array
Skips characters
Tells whether this stream is ready to be read
Tells whether this stream supports the mark operation
Marks the present position in the stream
Resets the stream
Closes this stream and releases any system resources associated with it
Check to make sure that underlying input stream has not been nulled out due to close if not return it
Check to make sure that buffer has not been nulled out due to close if not return it
Fills the buffer with more data taking into account shuffling and other tricks for dealing with marks
See the general contract of the read method of InputStream
Read characters into a portion of an array reading from the underlying stream at most once if necessary
Reads bytes from this byteinput stream into the specified byte array starting at the given offset
See the general contract of the skip method of InputStream
Returns an estimate of the number of bytes that can be read or skipped over from this input stream without blocking by the next invocation of a method for this input stream
See the general contract of the mark method of InputStream
See the general contract of the reset method of InputStream
Tests if this input stream supports the mark and reset methods
Closes this input stream and releases any system resources associated with the stream
Checks to make sure that the stream has not been closed
Flushes the stream
Closes the stream and releases any system resources associated with it
Flushes the stream if it's not closed and checks its error state
Indicates that an error has occurred
Clears the error state of this stream
Writes a single character
Writes A Portion of an array of characters
Writes an array of characters
Writes a portion of a string
Writes a string
Prints a boolean value
Prints a character
Prints an integer
Prints a long integer
Prints a floatingpoint number
Prints a doubleprecision floatingpoint number
Prints an array of characters
Prints a string
Prints an object
Terminates the current line by writing the line separator string
Prints a boolean value and then terminates the line
Prints a character and then terminates the line
Prints an integer and then terminates the line
Prints a long integer and then terminates the line
Prints a floatingpoint number and then terminates the line
Prints a doubleprecision floatingpoint number and then terminates the line
Prints an array of characters and then terminates the line
Prints a String and then terminates the line
Prints an Object and then terminates the line
A convenience method to write a formatted string to this writer using the specified format string and arguments
A convenience method to write a formatted string to this writer using the specified format string and arguments
Writes a formatted string to this writer using the specified format string and arguments
Writes a formatted string to this writer using the specified format string and arguments
Appends the specified character sequence to this writer
Appends a subsequence of the specified character sequence to this writer
Appends the specified character to this writer
Initializes native code
Find the descriptor for a class that can be serialized
Returns the descriptor for any class regardless of whether it implements link Serializable
Returns the name of the class described by this descriptor
Return the serialVersionUID for this class
Return the class in the local VM that this version is mapped to
Return an array of the fields of this serializable class
Get the field of this class by name
Return a string describing this ObjectStreamClass
Looks up and returns class descriptor for given class or null if class is nonserializable and all is set to false
Initializes class descriptor representing a proxy class
Initializes class descriptor representing a nonproxy class
Reads nonproxy class descriptor information from given input stream
Writes nonproxy class descriptor information to given output stream
Returns ClassNotFoundException if any thrown while attempting to resolve local class corresponding to this class descriptor
Throws an InvalidClassException if object instances referencing this class descriptor should not be allowed to deserialize
Throws an InvalidClassException if objects whose class is represented by this descriptor should not be allowed to serialize
Throws an InvalidClassException if objects whose class is represented by this descriptor should not be permitted to use default serialization e
Returns superclass descriptor
Returns the local class descriptor for the class associated with this class descriptor i
Returns arrays of ObjectStreamFields representing the serializable fields of the represented class
Looks up a serializable field of the represented class by name and type
Returns true if class descriptor represents a dynamic proxy class false otherwise
Returns true if class descriptor represents an enum type false otherwise
Returns true if represented class implements Externalizable false otherwise
Returns true if represented class implements Serializable false otherwise
Returns true if class descriptor represents externalizable class that has written its data in
Returns true if class descriptor represents serializable but not externalizable class which has written its data via a custom writeObject method false otherwise
Returns true if represented class is serializableexternalizable and can be instantiated by the serialization runtimei
Returns true if represented class is serializable but not externalizable and defines a conformant writeObject method
Returns true if represented class is serializable but not externalizable and defines a conformant readObject method
Returns true if represented class is serializable but not externalizable and defines a conformant readObjectNoData method
Returns true if represented class is serializable or externalizable and defines a conformant writeReplace method
Returns true if represented class is serializable or externalizable and defines a conformant readResolve method
Creates a new instance of the represented class
Invokes the writeObject method of the represented serializable class
Invokes the readObject method of the represented serializable class
Invokes the readObjectNoData method of the represented serializable class
Invokes the writeReplace method of the represented serializable class and returns the result
Invokes the readResolve method of the represented serializable class and returns the result
Returns array of ClassDataSlot instances representing the data layout including superclass data for serialized objects described by this class descriptor
Returns aggregate size in bytes of marshalled primitive field values for represented class
Returns number of nonprimitive serializable fields of represented class
Fetches the serializable primitive field values of object obj and marshals them into byte array buf starting at offset
Sets the serializable primitive fields of object obj using values unmarshalled from byte array buf starting at offset
Fetches the serializable object field values of object obj and stores them in array vals starting at offset
Sets the serializable object fields of object obj using values from array vals starting at offset
Calculates and sets serializable field offsets as well as primitive data size and object field count totals
If given class is the same as the class associated with this class descriptor returns reference to this class descriptor
Returns public noarg constructor of given class or null if none found
Returns subclassaccessible noarg constructor of first nonserializable superclass or null if none found
Returns nonstatic nonabstract method with given signature provided it is defined by or accessible via inheritance by the given class or null if no match found
Returns nonstatic private method with given signature defined by given class or null if none found
Returns true if classes are defined in the same runtime package false otherwise
Returns package name of given class
Compares class names for equality ignoring package names
Returns JVM type signature for given class
Returns JVM type signature for given list of parameters and return type
Convenience method for throwing an exception that is either a RuntimeException Error or of some unexpected type in which case it is wrapped inside an IOException
Returns ObjectStreamField array describing the serializable fields of the given class
Returns serializable fields of given class as defined explicitly by a serialPersistentFields field or null if no appropriate serialPersistentFields field is defined
Returns array of ObjectStreamFields corresponding to all nonstatic nontransient fields declared by given class
Returns explicit serial version UID value declared by given class or null if none
Computes the default serial version UID value for the given class
Returns true if the given class defines a static initializer method false otherwise
Matches given set of serializable fields with serializable fields described by the given local class descriptor and returns a FieldReflector instance capable of settinggetting values from the subset of fields that match nonmatching fields are treated as filler for which get operations return default values and set operations discard given values
Matches given set of serializable fields with serializable fields obtained from the given local class descriptor which contain bindings to reflective Field objects
Removes from the specified map any keys that have been enqueued on the specified reference queue
Attempts to set the value contained by this EntryFuture
Returns the value contained by this EntryFuture blocking if necessary until a value is set
Returns the thread that created this EntryFuture
Returns list of ObjectStreamFields representing fields operated on by this reflector
Fetches the serializable primitive field values of object obj and marshals them into byte array buf starting at offset
Sets the serializable primitive fields of object obj using values unmarshalled from byte array buf starting at offset
Fetches the serializable object field values of object obj and stores them in array vals starting at offset
Sets the serializable object fields of object obj using values from array vals starting at offset
Returns the identity hash code of the original referent
Returns true if the given object is this identical WeakClassKey instance or if this object's referent has not been cleared if the given object is another WeakClassKey instance with the identical nonnull referent as this one
Attempts to set the value contained by this EntryFuture
Returns the value contained by this EntryFuture blocking if necessary until a value is set
Returns the thread that created this EntryFuture
Returns list of ObjectStreamFields representing fields operated on by this reflector
Fetches the serializable primitive field values of object obj and marshals them into byte array buf starting at offset
Sets the serializable primitive fields of object obj using values unmarshalled from byte array buf starting at offset
Fetches the serializable object field values of object obj and stores them in array vals starting at offset
Sets the serializable object fields of object obj using values from array vals starting at offset
Returns the identity hash code of the original referent
Returns true if the given object is this identical WeakClassKey instance or if this object's referent has not been cleared if the given object is another WeakClassKey instance with the identical nonnull referent as this one
Attempts to set the value contained by this EntryFuture
Returns the value contained by this EntryFuture blocking if necessary until a value is set
Returns the thread that created this EntryFuture
Returns list of ObjectStreamFields representing fields operated on by this reflector
Fetches the serializable primitive field values of object obj and marshals them into byte array buf starting at offset
Sets the serializable primitive fields of object obj using values unmarshalled from byte array buf starting at offset
Fetches the serializable object field values of object obj and stores them in array vals starting at offset
Sets the serializable object fields of object obj using values from array vals starting at offset
Returns the identity hash code of the original referent
Returns true if the given object is this identical WeakClassKey instance or if this object's referent has not been cleared if the given object is another WeakClassKey instance with the identical nonnull referent as this one
Writes the specified byte to this output stream
Writes b
Writes len bytes from the specified byte array starting at offset off to this output stream
Flushes this output stream and forces any buffered output bytes to be written out
Closes this output stream and releases any system resources associated with this stream
initialize a FilePermission object
Checks if this FilePermission object implies the specified permission
Checks if the Permission's actions are a proper subset of the this object's actions
Checks two FilePermission objects for equality
Returns the hash code value for this object
Converts an actions String to an actions mask
Return the current action mask
Return the canonical string representation of the actions
Returns the canonical string representation of the actions
Returns a new PermissionCollection object for storing FilePermission objects
WriteObject is called to save the state of the FilePermission to a stream
readObject is called to restore the state of the FilePermission from a stream
Adds a permission to the FilePermissions
Check and see if this set of permissions implies the permissions expressed in permission
Returns an enumeration of all the FilePermission objects in the container
permissions field a Vector containing the FilePermissions
Reads the next byte of data from this input stream
Reads up to len bytes of data from this input stream into an array of bytes
Skips n bytes of input from this input stream
Returns the number of bytes that can be read from the input stream without blocking
Resets the input stream to begin reading from the first character of this input stream's underlying buffer
Connects this piped output stream to a receiver
Writes the specified byte to the piped output stream
Writes len bytes from the specified byte array starting at offset off to this piped output stream
Flushes this output stream and forces any buffered output bytes to be written out
Closes this piped output stream and releases any system resources associated with this stream
Read and return an object
Reads a byte of data
Reads into an array of bytes
Reads into an array of bytes
Skips n bytes of input
Returns the number of bytes that can be read without blocking
Closes the input stream
Checks to make sure that the stream has not been closed
Fills the input buffer taking the mark into account if it is valid
Reads a single character
Reads characters into a portion of an array reading from the underlying stream if necessary
Reads characters into a portion of an array
Reads a line of text
Reads a line of text
Skips characters
Tells whether this stream is ready to be read
Tells whether this stream supports the mark operation which it does
Marks the present position in the stream
Resets the stream to the most recent mark
Reads the next byte of data from this input stream
Reads up to len bytes of data from this input stream into an array of bytes
Skips over and discards n bytes of data from this input stream
Sets the line number to the specified argument
Returns the current line number
Returns the number of bytes that can be read from this input stream without blocking
Marks the current position in this input stream
Repositions this stream to the position at the time the mark method was last called on this input stream
Checks to make sure that the stream has not been closed
Reads a single character
Reads characters into a portion of an array
Pushes back a single character by copying it to the front of the pushback buffer
Pushes back a portion of an array of characters by copying it to the front of the pushback buffer
Pushes back an array of characters by copying it to the front of the pushback buffer
Tells whether this stream is ready to be read
Marks the present position in the stream
Resets the stream
Tells whether this stream supports the mark operation which it does not
Closes the stream and releases any system resources associated with it
Skips characters
Tests if a specified file should be included in a file list
Writes the specified byte to this byte array output stream
Writes len bytes from the specified byte array starting at offset off to this byte array output stream
Writes the complete contents of this byte array output stream to the specified output stream argument as if by calling the output stream's write method using out
Resets the count field of this byte array output stream to zero so that all currently accumulated output in the output stream is discarded
Creates a newly allocated byte array
Returns the current size of the buffer
Converts the buffer's contents into a string decoding bytes using the platform's default character set
Converts the buffer's contents into a string by decoding the bytes using the specified link java
Creates a newly allocated string
Closing a ByteArrayOutputStream has no effect
Produce the message and include the message from the nested exception if there is one
Returns the exception that terminated the operation the cause
Flushes this stream by writing any buffered output to the underlying stream
Return the FileSystem object representing this platform's local filesystem
Return the local filesystem's nameseparator character
Return the local filesystem's pathseparator character
Convert the given pathname string to normal form
Compute the length of this pathname string's prefix
Resolve the child pathname string against the parent
Return the parent pathname string to be used when the parentdirectory argument in one of the twoargument File constructors is the empty pathname
Postprocess the given URI path string if necessary
Tell whether or not the given abstract pathname is absolute
Resolve the given abstract pathname into absolute form
Return the simple boolean attributes for the file or directory denoted by the given abstract pathname or zero if it does not exist or some other IO error occurs
Check whether the file or directory denoted by the given abstract pathname may be accessed by this process
Set on or off the access permission to owner only or to all to the file or directory denoted by the given abstract pathname based on the parameters enable access and oweronly
Return the time at which the file or directory denoted by the given abstract pathname was last modified or zero if it does not exist or some other IO error occurs
Return the length in bytes of the file denoted by the given abstract pathname or zero if it does not exist is a directory or some other IO error occurs
Create a new empty file with the given pathname
Delete the file or directory denoted by the given abstract pathname returning true if and only if the operation succeeds
List the elements of the directory denoted by the given abstract pathname
Create a new directory denoted by the given abstract pathname returning true if and only if the operation succeeds
Rename the file or directory denoted by the first abstract pathname to the second abstract pathname returning true if and only if the operation succeeds
Set the lastmodified time of the file or directory denoted by the given abstract pathname returning true if and only if the operation succeeds
Mark the file or directory denoted by the given abstract pathname as readonly returning true if and only if the operation succeeds
List the available filesystem roots
Compare two abstract pathnames lexicographically
Compute the hash code of an abstract pathname
Writes a single character
Writes a portion of an array of characters
Writes a portion of a string
Flushes the stream
Reads the next byte of data from this input stream
Reads up to len bytes of data into an array of bytes from this input stream
Skips n bytes of input from this input stream
Returns the number of remaining bytes that can be read or skipped over from this input stream
Tests if this InputStream supports markreset
Set the current marked position in the stream
Resets the buffer to the marked position
Closing a ByteArrayInputStream has no effect
Writes to the output stream the eight loworder bits of the argument b
Writes to the output stream all the bytes in array b
Writes len bytes from array b in order to the output stream
Writes a boolean value to this output stream
Writes to the output stream the eight low order bits of the argument v
Writes two bytes to the output stream to represent the value of the argument
Writes a char value which is comprised of two bytes to the output stream
Writes an int value which is comprised of four bytes to the output stream
Writes a long value which is comprised of eight bytes to the output stream
Writes a float value which is comprised of four bytes to the output stream
Writes a double value which is comprised of eight bytes to the output stream
Writes a string to the output stream
Writes every character in the string s to the output stream in order two bytes per character
Writes two bytes of length information to the output stream followed by the a hrefDataInput
Writes a single character
Writes an array of characters
Writes a portion of an array of characters
Writes a string
Writes a portion of a string
Appends the specified character sequence to this writer
Appends a subsequence of the specified character sequence to this writer
Appends the specified character to this writer
Flushes the stream
Closes the stream flushing it first
Increases the written counter by the specified value until it reaches Integer
Writes the specified byte the low eight bits of the argument b to the underlying output stream
Writes len bytes from the specified byte array starting at offset off to the underlying output stream
Flushes this data output stream
Writes a boolean to the underlying output stream as a byte value
Writes out a byte to the underlying output stream as a byte value
Writes a short to the underlying output stream as two bytes high byte first
Writes a char to the underlying output stream as a byte value high byte first
Writes an int to the underlying output stream as four bytes high byte first
Writes a long to the underlying output stream as eight bytes high byte first
Converts the float argument to an int using the floatToIntBits method in class Float and then writes that int value to the underlying output stream as a byte quantity high byte first
Converts the double argument to a long using the doubleToLongBits method in class Double and then writes that long value to the underlying output stream as an byte quantity high byte first
Writes out the string to the underlying output stream as a sequence of bytes
Writes a string to the underlying output stream as a sequence of characters
Writes a string to the underlying output stream using a hrefDataInput
Writes a string to the specified DataOutput using a hrefDataInput
Returns the current value of the counter written the number of bytes written to this data output stream so far
Write an object to the underlying storage or stream
Writes a byte
Writes an array of bytes
Writes a sub array of bytes
Flushes the stream
Closes the stream
Checks to make sure that the stream has not been closed
Flushes the output buffer to the underlying character stream without flushing the stream itself
Writes a single character
Our own little min method to avoid loading java
Writes a portion of an array of characters
Writes a portion of a String
Writes a line separator
Flushes the stream
Causes this piped reader to be connected to the piped writer src
Receives a char of data
Receives data into an array of characters
Notifies all waiting threads that the last character of data has been received
Reads the next character of data from this piped stream
Reads up to len characters of data from this piped stream into an array of characters
Tell whether this stream is ready to be read
Closes this piped stream and releases any system resources associated with the stream
Validates the object
Attempts to read characters into the specified character buffer
Reads a single character
Reads characters into an array
Reads characters into a portion of an array
Skips characters
Tells whether this stream is ready to be read
Tells whether this stream supports the mark operation
Marks the present position in the stream
Resets the stream
Closes the stream and releases any system resources associated with it
Produce the message and include the classname if present
Writes a character to the buffer
Writes characters to the buffer
Write a portion of a string to the buffer
Writes the contents of the buffer to another character stream
Appends the specified character sequence to this writer
Appends a subsequence of the specified character sequence to this writer
Appends the specified character to this writer
Resets the buffer so that you can use it again without throwing away the already allocated buffer
Returns a copy of the input data
Returns the current size of the buffer
Converts input data to a string
Flush the stream
Close the stream
Check to make sure that the stream has not been closed
Flushes the stream
Closes the stream
Flushes the stream and checks its error state
Sets the error state of the stream to true
Clears the internal error state of this stream
Writes the specified byte to this stream
Writes len bytes from the specified byte array starting at offset off to this stream
Prints a boolean value
Prints a character
Prints an integer
Prints a long integer
Prints a floatingpoint number
Prints a doubleprecision floatingpoint number
Prints an array of characters
Prints a string
Prints an object
Terminates the current line by writing the line separator string
Prints a boolean and then terminate the line
Prints a character and then terminate the line
Prints an integer and then terminate the line
Prints a long and then terminate the line
Prints a float and then terminate the line
Prints a double and then terminate the line
Prints an array of characters and then terminate the line
Prints a String and then terminate the line
Prints an Object and then terminate the line
A convenience method to write a formatted string to this output stream using the specified format string and arguments
A convenience method to write a formatted string to this output stream using the specified format string and arguments
Writes a formatted string to this output stream using the specified format string and arguments
Writes a formatted string to this output stream using the specified format string and arguments
Appends the specified character sequence to this output stream
Appends a subsequence of the specified character sequence to this output stream
Appends the specified character to this output stream
Check to make sure that the stream has not been closed
Reads a single character
Reads characters into a portion of an array
Skips the specified number of characters in the stream
Tells whether this stream is ready to be read
Tells whether this stream supports the mark operation which it does
Marks the present position in the stream
Resets the stream to the most recent mark or to the beginning of the string if it has never been marked
Closes the stream and releases any system resources associated with it
Writes the specified byte to this output stream
Writes b
Writes len bytes from the specified byte array starting at offset off to this output stream
Flushes this output stream and forces any buffered output bytes to be written out to the stream
Closes this output stream and releases any system resources associated with the stream
Reads the next byte of data from this input stream
Reads up to byte
Reads up to len bytes of data from this input stream into an array of bytes
inheritDoc This method simply performs in
Returns an estimate of the number of bytes that can be read or skipped over from this input stream without blocking by the next caller of a method for this input stream
Closes this input stream and releases any system resources associated with the stream
Marks the current position in this input stream
Repositions this stream to the position at the time the mark method was last called on this input stream
Tests if this input stream supports the mark and reset methods
Returns the name of the character encoding being used by this stream
Flushes the output buffer to the underlying byte stream without flushing the byte stream itself
Writes a single character
Writes a portion of an array of characters
Writes a portion of a string
Flushes the stream
Reads some bytes from an input stream and stores them into the buffer array b
Reads len bytes from an input stream
Makes an attempt to skip over n bytes of data from the input stream discarding the skipped bytes
Reads one input byte and returns true if that byte is nonzero false if that byte is zero
Reads and returns one input byte
Reads one input byte zeroextends it to type int and returns the result which is therefore in the range through
Reads two input bytes and returns a short value
Reads two input bytes and returns an int value in the range through
Reads two input bytes and returns a char value
Reads four input bytes and returns an int value
Reads eight input bytes and returns a long value
Reads four input bytes and returns a float value
Reads eight input bytes and returns a double value
Reads the next line of text from the input stream
Reads in a string that has been encoded using a modified UTF format
The object implements the writeExternal method to save its contents by calling the methods of DataOutput for its primitive values or calling the writeObject method of ObjectOutput for objects strings and arrays
The object implements the readExternal method to restore its contents by calling the methods of DataInput for primitive types and readObject for objects strings and arrays
Get the name of this field
Get the type of the field
Returns character encoding of field type
Return the JVM type signature
Offset of field within instance data
Offset within instance data
Return true if this field has a primitive type
Returns boolean value indicating whether or not the serializable field represented by this ObjectStreamField instance is unshared
Compare this field with another ObjectStreamField
Return a string that describes this field
Returns field represented by this ObjectStreamField or null if ObjectStreamField is not associated with an actual field
Returns JVM type signature of field similar to getTypeString except that signature strings are returned for primitive fields as well
Connects this piped writer to a receiver
Writes the specified char to the piped output stream
Writes len characters from the specified character array starting at offset off to this piped output stream
Flushes this output stream and forces any buffered output characters to be written out
Closes this piped output stream and releases any system resources associated with this stream
Opens the specified file for reading
Reads a byte of data from this input stream
Reads a subarray as a sequence of bytes
Reads up to b
Reads up to len bytes of data from this input stream into an array of bytes
Skips over and discards n bytes of data from the input stream
Returns an estimate of the number of remaining bytes that can be read or skipped over from this input stream without blocking by the next invocation of a method for this input stream
Closes this file input stream and releases any system resources associated with the stream
Returns the FileDescriptor object that represents the connection to the actual file in the file system being used by this FileInputStream
Returns the unique link java
Ensures that the close method of this file input stream is called when there are no more references to it
Continues reading in the next stream if an EOF is reached
Returns an estimate of the number of bytes that can be read or skipped over from the current underlying input stream without blocking by the next invocation of a method for the current underlying input stream
Reads the next byte of data from this input stream
Reads up to len bytes of data from this input stream into an array of bytes
Closes this input stream and releases any system resources associated with the stream
Retrieves the unique link java
Retrieves the unique link java
Writes a formatted string to this console's output stream using the specified format string and arguments
A convenience method to write a formatted string to this console's output stream using the specified format string and arguments
Provides a formatted prompt then reads a single line of text from the console
Reads a single line of text from the console
Provides a formatted prompt then reads a password or passphrase from the console with echoing disabled
Reads a password or passphrase from the console with echoing disabled
Flushes the console and forces any buffered output to be written immediately
Resets this tokenizer's syntax table so that all characters are ordinary
Specifies that all characters c in the range lownbspltnbspcnbspltnbsphigh are word constituents
Specifies that all characters c in the range lownbspltnbspcnbspltnbsphigh are white space characters
Specifies that all characters c in the range lownbspltnbspcnbspltnbsphigh are ordinary in this tokenizer
Specifies that the character argument is ordinary in this tokenizer
Specified that the character argument starts a singleline comment
Specifies that matching pairs of this character delimit string constants in this tokenizer
Specifies that numbers should be parsed by this tokenizer
Determines whether or not ends of line are treated as tokens
Determines whether or not the tokenizer recognizes Cstyle comments
Determines whether or not the tokenizer recognizes Cstyle comments
Determines whether or not word token are automatically lowercased
Read the next character
Parses the next token from the input stream of this tokenizer
Causes the next call to the nextToken method of this tokenizer to return the current value in the ttype field and not to modify the value in the nval or sval field
Return the current line number
Returns the string representation of the current stream token and the line number it occurs on
Checks to make sure that the stream has not been closed
Reads a single character
Reads characters into a portion of an array
Skips characters
Tells whether this stream is ready to be read
Tells whether this stream supports the mark operation which it does
Marks the present position in the stream
Resets the stream to the most recent mark or to the beginning if it has never been marked
Closes the stream and releases any system resources associated with it
Returns the opaque file descriptor object associated with this stream
Returns the unique link java
Opens a file and returns the file descriptor
Reads a byte of data from this file
Reads a sub array as a sequence of bytes
Reads up to len bytes of data from this file into an array of bytes
Reads up to b
Reads b
Reads exactly len bytes from this file into the byte array starting at the current file pointer
Attempts to skip over n bytes of input discarding the skipped bytes
Writes the specified byte to this file
Writes a sub array as a sequence of bytes
Writes b
Writes len bytes from the specified byte array starting at offset off to this file
Returns the current offset in this file
Sets the filepointer offset measured from the beginning of this file at which the next read or write occurs
Returns the length of this file
Sets the length of this file
Closes this random access file stream and releases any system resources associated with the stream
Reads a boolean from this file
Reads a signed eightbit value from this file
Reads an unsigned eightbit number from this file
Reads a signed bit number from this file
Reads an unsigned bit number from this file
Reads a character from this file
Reads a signed bit integer from this file
Reads a signed bit integer from this file
Reads a float from this file
Reads a double from this file
Reads the next line of text from this file
Reads in a string from this file
Writes a boolean to the file as a onebyte value
Writes a byte to the file as a onebyte value
Writes a short to the file as two bytes high byte first
Writes a char to the file as a twobyte value high byte first
Writes an int to the file as four bytes high byte first
Writes a long to the file as eight bytes high byte first
Converts the float argument to an int using the floatToIntBits method in class Float and then writes that int value to the file as a fourbyte quantity high byte first
Converts the double argument to a long using the doubleToLongBits method in class Double and then writes that long value to the file as an eightbyte quantity high byte first
Writes the string to the file as a sequence of bytes
Writes a string to the file as a sequence of characters
Writes a string to the file using a hrefDataInput
Reads some number of bytes from the contained input stream and stores them into the buffer array b
Reads up to len bytes of data from the contained input stream into an array of bytes
See the general contract of the readFully method of DataInput
See the general contract of the readFully method of DataInput
See the general contract of the skipBytes method of DataInput
See the general contract of the readBoolean method of DataInput
See the general contract of the readByte method of DataInput
See the general contract of the readUnsignedByte method of DataInput
See the general contract of the readShort method of DataInput
See the general contract of the readUnsignedShort method of DataInput
See the general contract of the readChar method of DataInput
See the general contract of the readInt method of DataInput
See the general contract of the readLong method of DataInput
See the general contract of the readFloat method of DataInput
See the general contract of the readDouble method of DataInput
See the general contract of the readLine method of DataInput
See the general contract of the readUTF method of DataInput
Reads from the stream in a representation of a Unicode character string encoded in a hrefDataInput
Set the current line number
Get the current line number
Read a single character
Read characters into a portion of an array
Read a line of text
Skip characters
Mark the present position in the stream
Reset the stream to the most recent mark
Opens a file with the specified name for writing
Opens a file with the specified name for appending
Writes the specified byte to this file output stream
Writes a sub array as a sequence of bytes
Writes b
Writes len bytes from the specified byte array starting at offset off to this file output stream
Closes this file output stream and releases any system resources associated with this stream
Returns the file descriptor associated with this stream
Returns the unique link java
Cleans up the connection to the file and ensures that the close method of this file output stream is called when there are no more references to this stream
Reads the next byte of data from the input stream
Reads some number of bytes from the input stream and stores them into the buffer array b
Reads up to len bytes of data from the input stream into an array of bytes
Skips over and discards n bytes of data from this input stream
Returns an estimate of the number of bytes that can be read or skipped over from this input stream without blocking by the next invocation of a method for this input stream
Closes this input stream and releases any system resources associated with the stream
Marks the current position in this input stream
Repositions this stream to the position at the time the mark method was last called on this input stream
Tests if this input stream supports the mark and reset methods
Flush the internal buffer
Writes the specified byte to this buffered output stream
Writes len bytes from the specified byte array starting at offset off to this buffered output stream
Flushes this buffered output stream
Returns the name of the character encoding being used by this stream
Reads a single character
Reads characters into a portion of an array
Tells whether this stream is ready to be read
Causes this piped input stream to be connected to the piped output stream src
Receives a byte of data
Receives data into an array of bytes
Notifies all waiting threads that the last byte of data has been received
Reads the next byte of data from this piped input stream
Reads up to len bytes of data from this piped input stream into an array of bytes
Returns the number of bytes that can be read from this input stream without blocking
Closes this piped input stream and releases any system resources associated with the stream
Write a single character
Write a portion of an array of characters
Write a string
Write a portion of a string
Appends the specified character sequence to this writer
Appends a subsequence of the specified character sequence to this writer
Appends the specified character to this writer
Return the buffer's current value as a string
Return the string buffer itself
Flush the stream
Closing a StringWriter has no effect
Check to make sure that this stream has not been closed
Reads the next byte of data from this input stream
Reads up to len bytes of data from this input stream into an array of bytes
Pushes back a byte by copying it to the front of the pushback buffer
Pushes back a portion of an array of bytes by copying it to the front of the pushback buffer
Pushes back an array of bytes by copying it to the front of the pushback buffer
Returns an estimate of the number of bytes that can be read or skipped over from this input stream without blocking by the next invocation of a method for this input stream
Skips over and discards n bytes of data from this input stream
Tests if this input stream supports the mark and reset methods which it does not
Marks the current position in this input stream
Repositions this stream to the position at the time the mark method was last called on this input stream
Closes this input stream and releases any system resources associated with the stream
Specify stream protocol version to use when writing the stream
Write the specified object to the ObjectOutputStream
Method used by subclasses to override the default writeObject method
Writes an unshared object to the ObjectOutputStream
Write the nonstatic and nontransient fields of the current class to this stream
Retrieve the object used to buffer persistent fields to be written to the stream
Write the buffered fields to the stream
Reset will disregard the state of any objects already written to the stream
Subclasses may implement this method to allow class data to be stored in the stream
Subclasses may implement this method to store custom data in the stream along with descriptors for dynamic proxy classes
This method will allow trusted subclasses of ObjectOutputStream to substitute one object for another during serialization
Enable the stream to do replacement of objects in the stream
The writeStreamHeader method is provided so subclasses can append or prepend their own header to the stream
Write the specified class descriptor to the ObjectOutputStream
Writes a byte
Writes an array of bytes
Writes a sub array of bytes
Flushes the stream
Drain any buffered data in ObjectOutputStream
Closes the stream
Writes a boolean
Writes an bit byte
Writes a bit short
Writes a bit char
Writes a bit int
Writes a bit long
Writes a bit float
Writes a bit double
Writes a String as a sequence of bytes
Writes a String as a sequence of chars
Primitive data write of this String in a hrefDataInput
Returns protocol version in use
Writes string without allowing it to be replaced in stream
Verifies that this possibly subclass instance can be constructed without violating security constraints the subclass must not override securitysensitive nonfinal methods or else the enableSubclassImplementation SerializablePermission is checked
Performs reflective checks on given subclass to verify that it doesn't override securitysensitive nonfinal methods
Clears internal data structures
Underlying writeObjectwriteUnshared implementation
Writes null code to stream
Writes given object handle to stream
Writes representation of given class to stream
Writes representation of given class descriptor to stream
Writes class descriptor representing a dynamic proxy class to stream
Writes class descriptor representing a standard i
Writes given string to stream using standard or long UTF format depending on string length
Writes given array object to stream
Writes given enum constant to stream
Writes representation of a ordinary i
Writes externalizable data of given object by invoking its writeExternal method
Writes instance data for each serializable class of given object from superclass to subclass
Fetches and writes values of serializable fields of given object to stream
Attempts to write to stream fatal IOException that has caused serialization to abort
Converts specified span of float values into byte values
Converts specified span of double values into byte values
Put the value of the named boolean field into the persistent field
Put the value of the named byte field into the persistent field
Put the value of the named char field into the persistent field
Put the value of the named short field into the persistent field
Put the value of the named int field into the persistent field
Put the value of the named long field into the persistent field
Put the value of the named float field into the persistent field
Put the value of the named double field into the persistent field
Put the value of the named Object field into the persistent field
Write the data and fields to the specified ObjectOutput stream which must be the same stream that produced this PutField object
Writes buffered primitive data and object fields to stream
Returns offset of field with given name and type
Sets block data mode to the given mode true on false off and returns the previous mode value
Returns true if the stream is currently in block data mode false otherwise
Writes specified span of byte values from given array
Writes all buffered data from this stream to the underlying stream but does not flush underlying stream
Writes block data header
Returns the length in bytes of the UTF encoding of the given string
Writes the given string in UTF format
Writes given string in long UTF format
Writes given string in long UTF format where the UTF encoding length of the string is already known
Writes the body i
Assigns next available handle to given object and returns handle value
Looks up and returns handle associated with given object or if no mapping found
Resets table to its initial empty state
Returns the number of mappings currently in table
Inserts mapping object handle mapping into table
Expands the hash spine equivalent to increasing the number of buckets in a conventional hash table
Increases hash table capacity by lengthening entry arrays
Returns hash value for given object
Enters mapping from object to replacement object
Looks up and returns replacement for given object
Resets table to its initial empty state
Returns the number of mappings currently in table
Increases table capacity
Removes all of the elements from enclosed list
Removes the object at the top of enclosed list
Pushes a String onto the top of enclosed list
Returns a string representation of this object
Put the value of the named boolean field into the persistent field
Put the value of the named byte field into the persistent field
Put the value of the named char field into the persistent field
Put the value of the named short field into the persistent field
Put the value of the named int field into the persistent field
Put the value of the named long field into the persistent field
Put the value of the named float field into the persistent field
Put the value of the named double field into the persistent field
Put the value of the named Object field into the persistent field
Write the data and fields to the specified ObjectOutput stream which must be the same stream that produced this PutField object
Writes buffered primitive data and object fields to stream
Returns offset of field with given name and type
Sets block data mode to the given mode true on false off and returns the previous mode value
Returns true if the stream is currently in block data mode false otherwise
Writes specified span of byte values from given array
Writes all buffered data from this stream to the underlying stream but does not flush underlying stream
Writes block data header
Returns the length in bytes of the UTF encoding of the given string
Writes the given string in UTF format
Writes given string in long UTF format
Writes given string in long UTF format where the UTF encoding length of the string is already known
Writes the body i
Assigns next available handle to given object and returns handle value
Looks up and returns handle associated with given object or if no mapping found
Resets table to its initial empty state
Returns the number of mappings currently in table
Inserts mapping object handle mapping into table
Expands the hash spine equivalent to increasing the number of buckets in a conventional hash table
Increases hash table capacity by lengthening entry arrays
Returns hash value for given object
Enters mapping from object to replacement object
Looks up and returns replacement for given object
Resets table to its initial empty state
Returns the number of mappings currently in table
Increases table capacity
Removes all of the elements from enclosed list
Removes the object at the top of enclosed list
Pushes a String onto the top of enclosed list
Returns a string representation of this object
Put the value of the named boolean field into the persistent field
Put the value of the named byte field into the persistent field
Put the value of the named char field into the persistent field
Put the value of the named short field into the persistent field
Put the value of the named int field into the persistent field
Put the value of the named long field into the persistent field
Put the value of the named float field into the persistent field
Put the value of the named double field into the persistent field
Put the value of the named Object field into the persistent field
Write the data and fields to the specified ObjectOutput stream which must be the same stream that produced this PutField object
Writes buffered primitive data and object fields to stream
Returns offset of field with given name and type
Sets block data mode to the given mode true on false off and returns the previous mode value
Returns true if the stream is currently in block data mode false otherwise
Writes specified span of byte values from given array
Writes all buffered data from this stream to the underlying stream but does not flush underlying stream
Writes block data header
Returns the length in bytes of the UTF encoding of the given string
Writes the given string in UTF format
Writes given string in long UTF format
Writes given string in long UTF format where the UTF encoding length of the string is already known
Writes the body i
Assigns next available handle to given object and returns handle value
Looks up and returns handle associated with given object or if no mapping found
Resets table to its initial empty state
Returns the number of mappings currently in table
Inserts mapping object handle mapping into table
Expands the hash spine equivalent to increasing the number of buckets in a conventional hash table
Increases hash table capacity by lengthening entry arrays
Returns hash value for given object
Enters mapping from object to replacement object
Looks up and returns replacement for given object
Resets table to its initial empty state
Returns the number of mappings currently in table
Increases table capacity
Removes all of the elements from enclosed list
Removes the object at the top of enclosed list
Pushes a String onto the top of enclosed list
Returns a string representation of this object
Read an object from the ObjectInputStream
This method is called by trusted subclasses of ObjectOutputStream that constructed ObjectOutputStream using the protected noarg constructor
Reads an unshared object from the ObjectInputStream
Read the nonstatic and nontransient fields of the current class from this stream
Reads the persistent fields from the stream and makes them available by name
Register an object to be validated before the graph is returned
Load the local class equivalent of the specified stream class description
Returns a proxy class that implements the interfaces named in a proxy class descriptor subclasses may implement this method to read custom data from the stream along with the descriptors for dynamic proxy classes allowing them to use an alternate loading mechanism for the interfaces and the proxy class
This method will allow trusted subclasses of ObjectInputStream to substitute one object for another during deserialization
Enable the stream to allow objects read from the stream to be replaced
The readStreamHeader method is provided to allow subclasses to read and verify their own stream headers
Read a class descriptor from the serialization stream
Reads a byte of data
Reads into an array of bytes
Returns the number of bytes that can be read without blocking
Closes the input stream
Reads in a boolean
Reads an bit byte
Reads an unsigned bit byte
Reads a bit char
Reads a bit short
Reads an unsigned bit short
Reads a bit int
Reads a bit long
Reads a bit float
Reads a bit double
Reads bytes blocking until all bytes are read
Reads bytes blocking until all bytes are read
Skips bytes
Reads in a line that has been terminated by a n r rn or EOF
Reads a String in a hrefDataInput
Verifies that this possibly subclass instance can be constructed without violating security constraints the subclass must not override securitysensitive nonfinal methods or else the enableSubclassImplementation SerializablePermission is checked
Performs reflective checks on given subclass to verify that it doesn't override securitysensitive nonfinal methods
Clears internal data structures
Underlying readObject implementation
If resolveObject has been enabled and given object does not have an exception associated with it calls resolveObject to determine replacement for object and updates handle table accordingly
Reads string without allowing it to be replaced in stream
Reads in null code sets passHandle to NULL_HANDLE and returns null
Reads in object handle sets passHandle to the read handle and returns object associated with the handle
Reads in and returns class object
Reads in and returns possibly null class descriptor
Reads in and returns class descriptor for a dynamic proxy class
Reads in and returns class descriptor for a class that is not a dynamic proxy class
Reads in and returns new string
Reads in and returns array object or null if array class is unresolvable
Reads in and returns enum constant or null if enum type is unresolvable
Reads and returns ordinary i
If obj is nonnull reads externalizable data by invoking readExternal method of obj otherwise attempts to skip over externalizable data
Reads or attempts to skip if obj is null or is tagged with a ClassNotFoundException instance data for each serializable class of object in stream from superclass to subclass
Skips over all block data and objects until TC_ENDBLOCKDATA is encountered
Reads in values of serializable fields declared by given class descriptor
Reads in and returns IOException that caused serialization to abort
If recursion depth is clears internal data structures otherwise throws a StreamCorruptedException
Converts specified span of bytes into float values
Converts specified span of bytes into double values
Returns the first nonnull class loader not counting class loaders of generated reflection implementation classes up the execution stack or null if only code from the null class loader is on the stack
Method for cloning arrays in case of using unsharing reading
Get the ObjectStreamClass that describes the fields in the stream
Return true if the named field is defaulted and has no value in this stream
Get the value of the named boolean field from the persistent field
Get the value of the named byte field from the persistent field
Get the value of the named char field from the persistent field
Get the value of the named short field from the persistent field
Get the value of the named int field from the persistent field
Get the value of the named long field from the persistent field
Get the value of the named float field from the persistent field
Get the value of the named double field from the persistent field
Get the value of the named Object field from the persistent field
Reads primitive and object field values from stream
Returns offset of field with given name and type
Registers callback
Invokes all registered callbacks and clears the callback list
Resets the callback list to its initial empty state
Peeks at next byte value in stream
Sets block data mode to the given mode true on false off and returns the previous mode value
Returns true if the stream is currently in block data mode false otherwise
If in block data mode skips to the end of the current group of data blocks but does not unset block data mode
Attempts to read in the next block data header if any
Refills internal buffer buf with block data
If in block data mode returns the number of unconsumed bytes remaining in the current data block
Peeks at but does not consume and returns the next byte value in the stream or if the end of the streamblock data if in block data mode has been reached
Peeks at but does not consume and returns the next byte value in the stream or throws EOFException if end of streamblock data has been reached
Attempts to read len bytes into byte array b at offset off
Reads in string written in long UTF format
Reads in the body i
Reads span of UTFencoded characters out of internal buffer starting at offset pos and ending at or before offset end consuming no more than utflen bytes
Reads in single UTFencoded character one byte at a time appends the character to sbuf and returns the number of bytes consumed
Assigns next available handle to given object and returns assigned handle
Registers a dependency in exception status of one handle on another
Associates a ClassNotFoundException if one not already associated with the currently active handle and propagates it to other referencing objects as appropriate
Marks given handle as finished meaning that no new dependencies will be marked for handle
Assigns a new object to the given handle
Looks up and returns object associated with the given handle
Looks up and returns ClassNotFoundException associated with the given handle
Resets table to its initial state
Returns number of handles registered in table
Expands capacity of internal arrays
Get the ObjectStreamClass that describes the fields in the stream
Return true if the named field is defaulted and has no value in this stream
Get the value of the named boolean field from the persistent field
Get the value of the named byte field from the persistent field
Get the value of the named char field from the persistent field
Get the value of the named short field from the persistent field
Get the value of the named int field from the persistent field
Get the value of the named long field from the persistent field
Get the value of the named float field from the persistent field
Get the value of the named double field from the persistent field
Get the value of the named Object field from the persistent field
Reads primitive and object field values from stream
Returns offset of field with given name and type
Registers callback
Invokes all registered callbacks and clears the callback list
Resets the callback list to its initial empty state
Peeks at next byte value in stream
Sets block data mode to the given mode true on false off and returns the previous mode value
Returns true if the stream is currently in block data mode false otherwise
If in block data mode skips to the end of the current group of data blocks but does not unset block data mode
Attempts to read in the next block data header if any
Refills internal buffer buf with block data
If in block data mode returns the number of unconsumed bytes remaining in the current data block
Peeks at but does not consume and returns the next byte value in the stream or if the end of the streamblock data if in block data mode has been reached
Peeks at but does not consume and returns the next byte value in the stream or throws EOFException if end of streamblock data has been reached
Attempts to read len bytes into byte array b at offset off
Reads in string written in long UTF format
Reads in the body i
Reads span of UTFencoded characters out of internal buffer starting at offset pos and ending at or before offset end consuming no more than utflen bytes
Reads in single UTFencoded character one byte at a time appends the character to sbuf and returns the number of bytes consumed
Assigns next available handle to given object and returns assigned handle
Registers a dependency in exception status of one handle on another
Associates a ClassNotFoundException if one not already associated with the currently active handle and propagates it to other referencing objects as appropriate
Marks given handle as finished meaning that no new dependencies will be marked for handle
Assigns a new object to the given handle
Looks up and returns object associated with the given handle
Looks up and returns ClassNotFoundException associated with the given handle
Resets table to its initial state
Returns number of handles registered in table
Expands capacity of internal arrays
Get the ObjectStreamClass that describes the fields in the stream
Return true if the named field is defaulted and has no value in this stream
Get the value of the named boolean field from the persistent field
Get the value of the named byte field from the persistent field
Get the value of the named char field from the persistent field
Get the value of the named short field from the persistent field
Get the value of the named int field from the persistent field
Get the value of the named long field from the persistent field
Get the value of the named float field from the persistent field
Get the value of the named double field from the persistent field
Get the value of the named Object field from the persistent field
Reads primitive and object field values from stream
Returns offset of field with given name and type
Registers callback
Invokes all registered callbacks and clears the callback list
Resets the callback list to its initial empty state
Peeks at next byte value in stream
Sets block data mode to the given mode true on false off and returns the previous mode value
Returns true if the stream is currently in block data mode false otherwise
If in block data mode skips to the end of the current group of data blocks but does not unset block data mode
Attempts to read in the next block data header if any
Refills internal buffer buf with block data
If in block data mode returns the number of unconsumed bytes remaining in the current data block
Peeks at but does not consume and returns the next byte value in the stream or if the end of the streamblock data if in block data mode has been reached
Peeks at but does not consume and returns the next byte value in the stream or throws EOFException if end of streamblock data has been reached
Attempts to read len bytes into byte array b at offset off
Reads in string written in long UTF format
Reads in the body i
Reads span of UTFencoded characters out of internal buffer starting at offset pos and ending at or before offset end consuming no more than utflen bytes
Reads in single UTFencoded character one byte at a time appends the character to sbuf and returns the number of bytes consumed
Assigns next available handle to given object and returns assigned handle
Registers a dependency in exception status of one handle on another
Associates a ClassNotFoundException if one not already associated with the currently active handle and propagates it to other referencing objects as appropriate
Marks given handle as finished meaning that no new dependencies will be marked for handle
Assigns a new object to the given handle
Looks up and returns object associated with the given handle
Looks up and returns ClassNotFoundException associated with the given handle
Resets table to its initial state
Returns number of handles registered in table
Expands capacity of internal arrays
Returns the length of this abstract pathname's prefix
Returns the name of the file or directory denoted by this abstract pathname
Returns the pathname string of this abstract pathname's parent or null if this pathname does not name a parent directory
Returns the abstract pathname of this abstract pathname's parent or null if this pathname does not name a parent directory
Converts this abstract pathname into a pathname string
Tests whether this abstract pathname is absolute
Returns the absolute pathname string of this abstract pathname
Returns the absolute form of this abstract pathname
Returns the canonical pathname string of this abstract pathname
Returns the canonical form of this abstract pathname
Converts this abstract pathname into a file URL
Constructs a file URI that represents this abstract pathname
Tests whether the application can read the file denoted by this abstract pathname
Tests whether the application can modify the file denoted by this abstract pathname
Tests whether the file or directory denoted by this abstract pathname exists
Tests whether the file denoted by this abstract pathname is a directory
Tests whether the file denoted by this abstract pathname is a normal file
Tests whether the file named by this abstract pathname is a hidden file
Returns the time that the file denoted by this abstract pathname was last modified
Returns the length of the file denoted by this abstract pathname
Atomically creates a new empty file named by this abstract pathname if and only if a file with this name does not yet exist
Deletes the file or directory denoted by this abstract pathname
Requests that the file or directory denoted by this abstract pathname be deleted when the virtual machine terminates
Returns an array of strings naming the files and directories in the directory denoted by this abstract pathname
Returns an array of strings naming the files and directories in the directory denoted by this abstract pathname that satisfy the specified filter
Returns an array of abstract pathnames denoting the files in the directory denoted by this abstract pathname
Returns an array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname that satisfy the specified filter
Returns an array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname that satisfy the specified filter
Creates the directory named by this abstract pathname
Creates the directory named by this abstract pathname including any necessary but nonexistent parent directories
Renames the file denoted by this abstract pathname
Sets the lastmodified time of the file or directory named by this abstract pathname
Marks the file or directory named by this abstract pathname so that only read operations are allowed
Sets the owner's or everybody's write permission for this abstract pathname
A convenience method to set the owner's write permission for this abstract pathname
Sets the owner's or everybody's read permission for this abstract pathname
A convenience method to set the owner's read permission for this abstract pathname
Sets the owner's or everybody's execute permission for this abstract pathname
A convenience method to set the owner's execute permission for this abstract pathname
Tests whether the application can execute the file denoted by this abstract pathname
List the available filesystem roots
Returns the size of the partition named by this abstract pathname
Returns the number of unallocated bytes in the partition a hrefpartNamenamed by this abstract path name
Returns the number of bytes available to this virtual machine on the partition named by this abstract pathname
Creates a new empty file in the specified directory using the given prefix and suffix strings to generate its name
Creates an empty file in the default temporaryfile directory using the given prefix and suffix to generate its name
Compares two abstract pathnames lexicographically
Tests this abstract pathname for equality with the given object
Computes a hash code for this abstract pathname
Returns the pathname string of this abstract pathname
WriteObject is called to save this filename
readObject is called to restore this filename
Tests whether or not the specified abstract pathname should be included in a pathname list
Translates a code long unscaled value and an code int scale into a code BigDecimal
Translates a code long value into a code BigDecimal with a scale of zero
Translates a code double into a code BigDecimal using the code double's canonical string representation provided by the link DoubletoStringdouble method
Returns a code BigDecimal whose value is code this augend and whose scale is code maxthis
Returns a code BigDecimal whose value is code this augend with rounding according to the context settings
Returns an array of length two the sum of whose entries is equal to the rounded sum of the code BigDecimal arguments
Returns a code BigDecimal whose value is code this subtrahend and whose scale is code maxthis
Returns a code BigDecimal whose value is code this subtrahend with rounding according to the context settings
Returns a code BigDecimal whose value is this times multiplicand and whose scale is code this
Returns a code BigDecimal whose value is this times multiplicand with rounding according to the context settings
Returns a code BigDecimal whose value is code this divisor and whose scale is as specified
Internally used for division operation
Returns a code BigDecimal whose value is code this divisor and whose scale is as specified
Returns a code BigDecimal whose value is code this divisor and whose scale is code this
Returns a code BigDecimal whose value is code this divisor and whose scale is code this
Returns a code BigDecimal whose value is code this divisor and whose preferred scale is code this
Returns a code BigDecimal whose value is code this divisor with rounding according to the context settings
Returns a code BigDecimal whose value is the integer part of the quotient code this divisor rounded down
Returns a code BigDecimal whose value is the integer part of code this divisor
Returns a code BigDecimal whose value is code this divisor
Returns a code BigDecimal whose value is code this divisor with rounding according to the context settings
Returns a twoelement code BigDecimal array containing the result of code divideToIntegralValue followed by the result of code remainder on the two operands
Returns a twoelement code BigDecimal array containing the result of code divideToIntegralValue followed by the result of code remainder on the two operands calculated with rounding according to the context settings
Returns a code BigDecimal whose value is thisn The power is computed exactly to unlimited precision
Returns a code BigDecimal whose value is thisn
Returns a code BigDecimal whose value is the absolute value of this code BigDecimal and whose scale is code this
Returns a code BigDecimal whose value is the absolute value of this code BigDecimal with rounding according to the context settings
Returns a code BigDecimal whose value is code this and whose scale is code this
Returns a code BigDecimal whose value is code this with rounding according to the context settings
Returns a code BigDecimal whose value is code this and whose scale is code this
Returns a code BigDecimal whose value is code this with rounding according to the context settings
Returns the signum function of this code BigDecimal
Returns the scale of this code BigDecimal
Returns the precision of this code BigDecimal
Returns a code BigInteger whose value is the unscaled value of this code BigDecimal
Returns a code BigDecimal rounded according to the code MathContext settings
Returns a code BigDecimal whose scale is the specified value and whose unscaled value is determined by multiplying or dividing this code BigDecimal's unscaled value by the appropriate power of ten to maintain its overall value
Returns a code BigDecimal whose scale is the specified value and whose unscaled value is determined by multiplying or dividing this code BigDecimal's unscaled value by the appropriate power of ten to maintain its overall value
Returns a code BigDecimal whose scale is the specified value and whose value is numerically equal to this code BigDecimal's
Returns a code BigDecimal which is equivalent to this one with the decimal point moved code n places to the left
Returns a code BigDecimal which is equivalent to this one with the decimal point moved code n places to the right
Returns a BigDecimal whose numerical value is equal to code this n
Returns a code BigDecimal which is numerically equal to this one but with any trailing zeros removed from the representation
Compares this code BigDecimal with the specified code BigDecimal
Version of compareTo that ignores sign
Compares this code BigDecimal with the specified code Object for equality
Returns the minimum of this code BigDecimal and code val
Returns the maximum of this code BigDecimal and code val
Returns the hash code for this code BigDecimal
Returns the string representation of this code BigDecimal using scientific notation if an exponent is needed
Returns a string representation of this code BigDecimal using engineering notation if an exponent is needed
Returns a string representation of this code BigDecimal without an exponent field
Converts this code BigDecimal to a code BigInteger
Converts this code BigDecimal to a code BigInteger checking for lost information
Converts this code BigDecimal to a code long
Converts this code BigDecimal to a code long checking for lost information
Converts this code BigDecimal to an code int
Converts this code BigDecimal to an code int checking for lost information
Converts this code BigDecimal to a code short checking for lost information
Converts this code BigDecimal to a code byte checking for lost information
Converts this code BigDecimal to a code float
Converts this code BigDecimal to a code double
Returns the size of an ulp a unit in the last place of this code BigDecimal
Lay out this code BigDecimal into a code char array
Return to the power n as a code BigInteger
Expand the BIG_TEN_POWERS_TABLE array to contain at least n
Compute val ^ n return this product if it is representable as a long INFLATED otherwise
Compute this ^ n
Assign appropriate BigInteger to intVal field if intVal is null i
Match the scales of two code BigDecimals to align their least significant digits
Reconstitute the code BigDecimal instance from a stream that is deserialize it
Serialize this code BigDecimal to the stream in question
Returns the length of the absolute value of a code long in decimal digits
Returns the length of the absolute value of a BigInteger in decimal digits
Remove insignificant trailing zeros from this code BigDecimal until the preferred scale is reached or no more zeros can be removed
Check a scale for Underflow or Overflow
Round an operand used only if digits
Round this BigDecimal according to the MathContext settings used only if precision literal
Returns a code BigDecimal rounded according to the MathContext settings used only if code mc
Returns the compact value for given code BigInteger or INFLATED if too big
Check internal invariants of this BigDecimal
Places characters representing the intCompact in code long into cmpCharArray and returns the offset to the array where the representation starts
Places characters representing the intCompact in code long into cmpCharArray and returns the offset to the array where the representation starts
Places characters representing the intCompact in code long into cmpCharArray and returns the offset to the array where the representation starts
Returns the code precision setting
Returns the roundingMode setting
Compares this code MathContext with the specified code Object for equality
Returns the hash code for this code MathContext
Returns the string representation of this code MathContext
Reconstitute the code MathContext instance from a stream that is deserialize it
Internal helper method to return the magnitude array
Convert this MutableBigInteger to a long value
Convert this MutableBigInteger to a BigInteger object
Convert this MutableBigInteger to BigDecimal object with the specified sign and scale
Clear out a MutableBigInteger for reuse
Set a MutableBigInteger to zero removing its offset
Compare the magnitude of two MutableBigIntegers
Compare this against half of a MutableBigInteger object Needed for remainder tests
Return the index of the lowest set bit in this MutableBigInteger
Return the int in use in this MutableBigInteger at the specified index
Return a long which is equal to the unsigned value of the int in use in this MutableBigInteger at the specified index
Ensure that the MutableBigInteger is in normal form specifically making sure that there are no leading zeros and that if the magnitude is zero then intLen is zero
If this MutableBigInteger cannot hold len words increase the size of the value array to len words
Convert this MutableBigInteger into an int array with no leading zeros of a length that is equal to this MutableBigInteger's intLen
Sets the int at indexoffset in this MutableBigInteger to val
Sets this MutableBigInteger's value array to the specified array
Sets this MutableBigInteger's value array to a copy of the specified array
Sets this MutableBigInteger's value array to a copy of the specified array
Returns true iff this MutableBigInteger has a value of one
Returns true iff this MutableBigInteger has a value of zero
Returns true iff this MutableBigInteger is even
Returns true iff this MutableBigInteger is odd
Returns true iff this MutableBigInteger is in normal form
Returns a String representation of this MutableBigInteger in radix
Right shift this MutableBigInteger n bits
Left shift this MutableBigInteger n bits
A primitive used for division
This method is used for division
Right shift this MutableBigInteger n bits where n is less than
Left shift this MutableBigInteger n bits where n is less than
Adds the contents of two MutableBigInteger objects
Subtracts the smaller of this and b from the larger and places the result into this MutableBigInteger
Subtracts the smaller of a and b from the larger and places the result into the larger
Multiply the contents of two MutableBigInteger objects
Multiply the contents of this MutableBigInteger by the word y
This method is used for division of an n word dividend by a one word divisor
Calculates the quotient of this div b and places the quotient in the provided MutableBigInteger objects and the remainder object is returned
Internally used to calculate the quotient of this div v and places the quotient in the provided MutableBigInteger object and the remainder is returned
Divide this MutableBigInteger by the divisor represented by its magnitude array
Compare two longs as if they were unsigned
This method divides a long quantity by an int to estimate qhat for two multi precision numbers
Calculate GCD of this and b
Calculate GCD of this and v
Calculate GCD of a and b interpreted as unsigned integers
Returns the modInverse of this mod p
Calculate the multiplicative inverse of this mod mod where mod is odd
Uses the extended Euclidean algorithm to compute the modInverse of base mod a modulus that is a power of
Signed addition built upon unsigned add and subtract
Signed addition built upon unsigned add and subtract
Signed subtraction built upon unsigned add and subtract
Signed subtraction built upon unsigned add and subtract
Print out the first intLen ints of this MutableBigInteger's value array starting at offset
Returns a positive BigInteger that is probably prime with the specified bitLength
Find a random number of the specified bitLength that is probably prime
Find a random number of the specified bitLength that is probably prime
Returns the first integer greater than this code BigInteger that is probably prime
Returns code true if this BigInteger is probably prime code false if it's definitely composite
Returns true iff this BigInteger is a LucasLehmer probable prime
Computes Jacobipn
Returns true iff this BigInteger passes the specified number of MillerRabin tests
Returns a BigInteger whose value is equal to that of the specified code long
Returns a BigInteger with the given two's complement representation
Returns a BigInteger whose value is code this val
Adds the contents of the int arrays x and y
Returns a BigInteger whose value is code this val
Subtracts the contents of the second int arrays little from the first big
Returns a BigInteger whose value is code this val
Package private methods used by BigDecimal code to multiply a BigInteger with a long
Multiplies int arrays x and y to the specified lengths and places the result into z
Returns a BigInteger whose value is code this
Squares the contents of the int array x
Returns a BigInteger whose value is code this val
Returns an array of two BigIntegers containing code this val followed by code this val
Returns a BigInteger whose value is code this val
Returns a BigInteger whose value is thisexponent
Returns a BigInteger whose value is the greatest common divisor of code absthis and code absval
Package private method to return bit length for an integer
Left shift int array a up to len by n bits
Calculate bitlength of contents of the first len elements an int array assuming there are no leading zero ints
Returns a BigInteger whose value is the absolute value of this BigInteger
Returns a BigInteger whose value is code this
Returns the signum function of this BigInteger
Returns a BigInteger whose value is code this mod m
Returns a BigInteger whose value is thisexponent mod m
Returns a BigInteger whose value is x to the power of y mod z
Montgomery reduce n modulo mod
Subtracts two numbers of same length returning borrow
Multiply an array by one word k and add to result return the carry
Add one word to the number a mlen words into a
Returns a BigInteger whose value is this exponent mod p
Returns a BigInteger whose value is this modp
Returns a BigInteger whose value is code this code mod m
Returns a BigInteger whose value is code this n
Returns a BigInteger whose value is code this n
Returns a BigInteger whose value is code this val
Returns a BigInteger whose value is code this | val
Returns a BigInteger whose value is code this ^ val
Returns a BigInteger whose value is code ~this
Returns a BigInteger whose value is code this ~val
Returns code true if and only if the designated bit is set
Returns a BigInteger whose value is equivalent to this BigInteger with the designated bit set
Returns a BigInteger whose value is equivalent to this BigInteger with the designated bit cleared
Returns a BigInteger whose value is equivalent to this BigInteger with the designated bit flipped
Returns the index of the rightmost lowestorder one bit in this BigInteger the number of zero bits to the right of the rightmost one bit
Returns the number of bits in the minimal two'scomplement representation of this BigInteger excluding a sign bit
Returns the number of bits in the two's complement representation of this BigInteger that differ from its sign bit
Returns code true if this BigInteger is probably prime code false if it's definitely composite
Compares this BigInteger with the specified BigInteger
Compares the magnitude array of this BigInteger with the specified BigInteger's
Compares this BigInteger with the specified Object for equality
Returns the minimum of this BigInteger and code val
Returns the maximum of this BigInteger and code val
Returns the hash code for this BigInteger
Returns the String representation of this BigInteger in the given radix
Returns the decimal String representation of this BigInteger
Returns a byte array containing the two'scomplement representation of this BigInteger
Converts this BigInteger to an code int
Converts this BigInteger to a code long
Converts this BigInteger to a code float
Converts this BigInteger to a code double
Returns a copy of the input array stripped of any leading zero bytes
Returns the input array stripped of any leading zero bytes
Returns a copy of the input array stripped of any leading zero bytes
Takes an array a representing a negative 'scomplement number and returns the minimal no leading zero bytes unsigned whose value is a
Takes an array a representing a negative 'scomplement number and returns the minimal no leading zero ints unsigned whose value is a
Returns the length of the two's complement representation in ints including space for at least one sign bit
Returns the specified int of the littleendian two's complement representation int is the least significant
Returns the index of the int that contains the first nonzero int in the littleendian binary representation of the magnitude int is the least significant
Reconstitute the code BigInteger instance from a stream that is deserialize it
Save the code BigInteger instance to a stream
Returns the mag array as an array of bytes
Returns the code RoundingMode object corresponding to a legacy integer rounding mode constant in link BigDecimal
Given a bit index return unit index containing it
Return a unit that masks the specified bit in its unit
Get the value of the bit at the specified index
Set the bit at the specified index
This method returns the index of the first clear bit in the search array that occurs at or after start
Sieve a single set of multiples out of the sieve
Test probable primes in the sieve and return successful candidates
Creates a new ContentHandler to read an object from a URLStreamHandler
Opens a connection to the object referenced by the URL argument
Same as openConnectionURL except that the connection will be made through the specified proxy Protocol handlers that do not support proxying will ignore the proxy parameter and make a normal connection
Parses the string representation of a URL into a URL object
Returns the default port for a URL parsed by this handler
Provides the default equals calculation
Provides the default hash calculation
Compare two urls to see whether they refer to the same file i
Get the IP address of our host
Compares the host components of two URLs
Converts a URL of a specific protocol to a String
Sets the fields of the URL argument to the indicated values
Sets the fields of the URL argument to the indicated values
Sets the fields of the URL
Sets the specified fields of the URL
Gets the query part of this URL
Gets the path part of this URL
Gets the userInfo part of this URL
Gets the authority part of this URL
Gets the port number of this URL
Gets the default port number of the protocol associated with this URL
Gets the protocol name of this URL
Gets the host name of this URL if applicable
Gets the file name of this URL
Gets the anchor also known as the reference of this URL
Compares this URL for equality with another object
Creates an integer suitable for hash table indexing
Compares two URLs excluding the fragment component
Constructs a string representation of this URL
Constructs a string representation of this URL
Returns a link java
Returns a URLConnection object that represents a connection to the remote object referred to by the URL
Same as openConnection except that the connection will be made through the specified proxy Protocol handlers that do not support proxing will ignore the proxy parameter and make a normal connection
Opens a connection to this URL and returns an InputStream for reading from that connection
Gets the contents of this URL
Gets the contents of this URL
Sets an application's URLStreamHandlerFactory
Returns the Stream Handler
WriteObject is called to save the state of the URL to an ObjectOutputStream
readObject is called to restore the state of the URL from the stream
Returns an OutputStream to which the response body can be written
Aborts the attempt to cache the response
To set the cookie policy of this cookie manager
To retrieve current cookie store
Returns the key for the nth header field
This method is used to enable streaming of a HTTP request body without internal buffering when the content length is known in advance
This method is used to enable streaming of a HTTP request body without internal buffering when the content length is not known in advance
Returns the value for the nth header field
Sets whether HTTP redirects requests with response code xx should be automatically followed by this class
Returns a boolean indicating whether or not HTTP redirects xx should be automatically followed
Sets whether HTTP redirects requests with response code xx should be automatically followed by this HttpURLConnection instance
Returns the value of this HttpURLConnection's instanceFollowRedirects field
Set the method for the URL request one of GET POST HEAD OPTIONS PUT DELETE TRACE are legal subject to protocol restrictions
Get the request method
Gets the status code from an HTTP response message
Gets the HTTP response message if any returned along with the response code from a server
Indicates that other requests to the server are unlikely in the near future
Indicates if the connection is going through a proxy
Returns the error stream if the connection failed but the server sent useful data nonetheless
Appends the specified URL to the list of URLs to search for classes and resources
Returns the search path of URLs for loading classes and resources
Finds and loads the class with the specified name from the URL search path
Defines a new package by name in this ClassLoader
Finds the resource with the specified name on the URL search path
Returns an Enumeration of URLs representing all of the resources on the URL search path having the specified name
Returns the permissions for the given codesource object
Creates a new instance of URLClassLoader for the specified URLs and parent class loader
Creates a new instance of URLClassLoader for the specified URLs and default parent class loader
Returns the IP address of the machine to which this datagram is being sent or from which the datagram was received
Returns the port number on the remote host to which this datagram is being sent or from which the datagram was received
Returns the data buffer
Returns the offset of the data to be sent or the offset of the data received
Returns the length of the data to be sent or the length of the data received
Set the data buffer for this packet
Sets the IP address of the machine to which this datagram is being sent
Sets the port number on the remote host to which this datagram is being sent
Sets the SocketAddress usually IP address port number of the remote host to which this datagram is being sent
Gets the SocketAddress usually IP address port number of the remote host that this packet is being sent to or is coming from
Set the data buffer for this packet
Set the length for this packet
Perform class loadtime initializations
Adds one HTTP cookie to the store
Retrieve cookies associated with given URI or whose domain matches the given URI
Get all notexpired cookies in cookie store
Get all URIs which identify the cookies in this cookie store
Remove a cookie from store
Remove all cookies in this cookie store
Creates the socket implementation
Sets impl to the systemdefault type of SocketImpl
Get the SocketImpl attached to this socket creating it if necessary
Connects this socket to the server
Connects this socket to the server with a specified timeout value
Binds the socket to a local address
set the flags after an accept call
Returns the address to which the socket is connected
Gets the local address to which the socket is bound
Returns the remote port number to which this socket is connected
Returns the local port number to which this socket is bound
Returns the address of the endpoint this socket is connected to or null if it is unconnected
Returns the address of the endpoint this socket is bound to or null if it is not bound yet
Returns the unique link java
Returns an input stream for this socket
Returns an output stream for this socket
Enabledisable TCP_NODELAY disableenable Nagle's algorithm
Tests if TCP_NODELAY is enabled
Enabledisable SO_LINGER with the specified linger time in seconds
Returns setting for SO_LINGER
Send one byte of urgent data on the socket
Enabledisable OOBINLINE receipt of TCP urgent data By default this option is disabled and TCP urgent data received on a socket is silently discarded
Tests if OOBINLINE is enabled
Enabledisable SO_TIMEOUT with the specified timeout in milliseconds
Returns setting for SO_TIMEOUT
Sets the SO_SNDBUF option to the specified value for this Socket
Get value of the SO_SNDBUF option for this Socket that is the buffer size used by the platform for output on this Socket
Sets the SO_RCVBUF option to the specified value for this Socket
Gets the value of the SO_RCVBUF option for this Socket that is the buffer size used by the platform for input on this Socket
Enabledisable SO_KEEPALIVE
Tests if SO_KEEPALIVE is enabled
Sets traffic class or typeofservice octet in the IP header for packets sent from this Socket
Gets traffic class or typeofservice in the IP header for packets sent from this Socket As the underlying network implementation may ignore the traffic class or typeofservice set using link setTrafficClassint this method may return a different value than was previously set using the link setTrafficClassint method on this Socket
Enabledisable the SO_REUSEADDR socket option
Tests if SO_REUSEADDR is enabled
Closes this socket
Places the input stream for this socket at end of stream
Disables the output stream for this socket
Converts this socket to a String
Returns the connection state of the socket
Returns the binding state of the socket
Returns the closed state of the socket
Returns whether the readhalf of the socket connection is closed
Returns whether the writehalf of the socket connection is closed
Sets the client socket implementation factory for the application
Sets performance preferences for this socket
Creates a new DatagramSocketImpl instance
Creates a datagram socket
Binds a datagram socket to a local port and address
Sends a datagram packet
Connects a datagram socket to a remote destination
Disconnects a datagram socket from its remote destination
Peek at the packet to see who it is from
Peek at the packet to see who it is from
Receive the datagram packet
Set the TTL timetolive option
Retrieve the TTL timetolive option
Set the TTL timetolive option
Retrieve the TTL timetolive option
Join the multicast group
Leave the multicast group
Join the multicast group
Leave the multicast group
Close the socket
Gets the local port
Gets the datagram socket file descriptor
Will be called to see whether or not this cookie should be accepted
Returns the response headers as a Map
Returns the response body as an InputStream
Get the SocketImpl attached to this socket creating it if necessary
Creates the socket implementation
Binds the ServerSocket to a specific address IP address and port number
Binds the ServerSocket to a specific address IP address and port number
Returns the local address of this server socket
Returns the port number on which this socket is listening
Returns the address of the endpoint this socket is bound to or null if it is not bound yet
Listens for a connection to be made to this socket and accepts it
Subclasses of ServerSocket use this method to override accept to return their own subclass of socket
Closes this socket
Returns the unique link java
Returns the binding state of the ServerSocket
Returns the closed state of the ServerSocket
Enabledisable SO_TIMEOUT with the specified timeout in milliseconds
Retrieve setting for SO_TIMEOUT
Enabledisable the SO_REUSEADDR socket option
Tests if SO_REUSEADDR is enabled
Returns the implementation address and implementation port of this socket as a String
Sets the server socket implementation factory for the application
Sets a default proposed value for the SO_RCVBUF option for sockets accepted from this ServerSocket
Gets the value of the SO_RCVBUF option for this ServerSocket that is the proposed buffer size that will be used for Sockets accepted from this ServerSocket
Sets performance preferences for this ServerSocket
Translates a string from Unicode to ASCII Compatible Encoding ACE as defined by the ToASCII operation of a hrefhttpwww
Translates a string from Unicode to ASCII Compatible Encoding ACE as defined by the ToASCII operation of a hrefhttpwww
Translates a string from ASCII Compatible Encoding ACE to Unicode as defined by the ToUnicode operation of a hrefhttpwww
Translates a string from ASCII Compatible Encoding ACE to Unicode as defined by the ToUnicode operation of a hrefhttpwww
Returns the input string
Returns a string explaining why the input string could not be parsed
Returns an index into the input string of the position at which the parse error occurred or if this position is not known
Returns a string describing the parse error
Set the default timetolive for multicast packets sent out on this MulticastSocket in order to control the scope of the multicasts
Set the default timetolive for multicast packets sent out on this code MulticastSocket in order to control the scope of the multicasts
Get the default timetolive for multicast packets sent out on the socket
Get the default timetolive for multicast packets sent out on the socket
Joins a multicast group
Leave a multicast group
Joins the specified multicast group at the specified interface
Leave a multicast group on a specified local interface
Set the multicast network interface used by methods whose behavior would be affected by the value of the network interface
Retrieve the address of the network interface used for multicast packets
Specify the network interface for outgoing multicast datagrams sent on this socket
Get the multicast network interface set
DisableEnable local loopback of multicast datagrams The option is used by the platform's networking code as a hint for setting whether multicast data will be looped back to the local socket
Get the setting for local loopback of multicast datagrams
Sends a datagram packet to the destination with a TTL time tolive other than the default for the socket
Creates a datagram socket
Binds a datagram socket to a local port
Sends a datagram packet
Connects a datagram socket to a remote destination
Disconnects a previously connected socket
Peek at the packet to see who it is from
Receive the datagram packet
Set the TTL timetolive option
Get the TTL timetolive option
Set the TTL timetolive option
Get the TTL timetolive option
Join the multicast group
Leave the multicast group
Join the multicast group
Leave the multicast group
Close the socket
set a value since we only support setting binary options here o must be a Boolean
Creates a socket with a boolean that specifies whether this is a stream socket true or an unconnected UDP socket false
Creates a socket and connects it to the specified port on the specified host
Creates a socket and connects it to the specified address on the specified port
Creates a socket and connects it to the specified address on the specified port
The workhorse of the connection operation
Binds the socket to the specified address of the specified local port
Listens for a specified amount of time for connections
Accepts connections
Gets an InputStream for this socket
Gets an OutputStream for this socket
Returns the number of bytes that can be read without blocking
Closes the socket
Shutdown readhalf of the socket connection
Shutdown writehalf of the socket connection
Cleans up if the user forgets to close it
Returns the http response code
Returns a string explaining why the http request could not be retried
Returns the value of the Location header field if the error resulted from redirection
Get the name of this network interface
Convenience method to return an Enumeration with all or a subset of the InetAddresses bound to this network interface
Get a List of all or a subset of the InterfaceAddresses of this network interface
Get an Enumeration with all the subinterfaces also known as virtual interfaces attached to this network interface
Returns the parent NetworkInterface of this interface if this is a subinterface or null if it is a physical non virtual interface or has no parent
Get the index of this network interface
Get the display name of this network interface
Searches for the network interface with the specified name
Get a network interface given its index
Convenience method to search for a network interface that has the specified Internet Protocol IP address bound to it
Returns all the interfaces on this machine
Returns whether a network interface is up and running
Returns whether a network interface is a loopback interface
Returns whether a network interface is a point to point interface
Returns whether a network interface supports multicasting or not
Returns the hardware address usually MAC of the interface if it has one and if it can be accessed given the current privileges
Returns the Maximum Transmission Unit MTU of this interface
Returns whether this interface is a virtual interface also called subinterface
Compares this object against the specified object
Enabledisable the option specified by optID
Fetch the value of an option
Gets the MIME type for the specified file name
Gets the systemwide cookie handler
Sets or unsets the systemwide cookie handler
Gets all the applicable cookies from a cookie cache for the specified uri in the request header
Sets all the applicable cookies examples are response header fields that are named SetCookie present in the response headers into a cookie cache
Returns the URL for the Jar file for this connection
Return the entry name for this connection
Return the JAR file for this connection
Returns the Manifest for this connection or null if none
Return the JAR entry object for this connection if any
Return the Attributes object for this connection if the URL for it points to a JAR file entry null otherwise
Returns the main Attributes for the JAR file for this connection
Return the Certificate object for this connection if the URL for it points to a JAR file entry null otherwise
Returns the proxy type
Returns the socket address of the proxy or null if its a direct connection
Constructs a string representation of this Proxy
Compares this object against the specified object
Returns a hashcode for this Proxy
Replaces the deserialized object with an InetAddress object
Utility routine to check if the InetAddress is an IP multicast address
Utility routine to check if the InetAddress in a wildcard address
Utility routine to check if the InetAddress is a loopback address
Utility routine to check if the InetAddress is an link local address
Utility routine to check if the InetAddress is a site local address
Utility routine to check if the multicast address has global scope
Utility routine to check if the multicast address has node scope
Utility routine to check if the multicast address has link scope
Utility routine to check if the multicast address has site scope
Utility routine to check if the multicast address has organization scope
Test whether that address is reachable
Test whether that address is reachable
Gets the host name for this IP address
Returns the hostname for this address
Gets the fully qualified domain name for this IP address
Returns the hostname for this address
Returns the raw IP address of this InetAddress object
Returns the IP address string in textual presentation
Returns a hashcode for this IP address
Compares this object against the specified object
Converts this IP address to a String
Create an InetAddress based on the provided host name and IP address No name service is checked for the validity of the address
Determines the IP address of a host given the host's name
Given the name of a host returns an array of its IP addresses based on the configured name service on the system
check if the literal address string has nn appended returns if not or the numeric value otherwise
package private so SocketPermission can call it
Returns an InetAddress object given the raw IP address
Returns the address of the local host
Perform class loadtime initializations
Add an entry to the cache
Query the cache for the specific host
Add an entry to the cache
Query the cache for the specific host
Add an entry to the cache
Query the cache for the specific host
Initialize the SocketPermission object
Convert an action string to an integer actions mask
attempt to get the fully qualified domain name
get IP addresses
Checks if this socket permission object implies the specified permission
Checks if the incoming Permission's action are a proper subset of the this object's actions
Checks two SocketPermission objects for equality
Returns the hash code value for this object
Return the current action mask
Returns the canonical string representation of the actions in the specified mask
Returns the canonical string representation of the actions
Returns a new PermissionCollection object for storing SocketPermission objects
WriteObject is called to save the state of the SocketPermission to a stream
readObject is called to restore the state of the SocketPermission from a stream
Adds a permission to the SocketPermissions
Check and see if this collection of permissions implies the permissions expressed in permission
Returns an enumeration of all the SocketPermission objects in the container
permissions field a Vector containing the SocketPermissions
Creates a URI by parsing the given string
Attempts to parse this URI's authority component if defined into userinformation host and port components
Normalizes this URI's path
Resolves the given URI against this URI
Constructs a new URI by parsing the given string and then resolving it against this URI
Relativizes the given URI against this URI
Constructs a URL from this URI
Returns the scheme component of this URI
Tells whether or not this URI is absolute
Tells whether or not this URI is opaque
Returns the raw schemespecific part of this URI
Returns the decoded schemespecific part of this URI
Returns the raw authority component of this URI
Returns the decoded authority component of this URI
Returns the raw userinformation component of this URI
Returns the decoded userinformation component of this URI
Returns the host component of this URI
Returns the port number of this URI
Returns the raw path component of this URI
Returns the decoded path component of this URI
Returns the raw query component of this URI
Returns the decoded query component of this URI
Returns the raw fragment component of this URI
Returns the decoded fragment component of this URI
Tests this URI for equality with another object
Returns a hashcode value for this URI
Compares this URI to another object which must be a URI
Returns the content of this URI as a string
Returns the content of this URI as a USASCII string
Saves the content of this URI to the given serial stream
Reconstitutes a URI from the given serial stream
Returns the user name
Returns the user password
Gets the systemwide proxy selector
Sets or unsets the systemwide proxy selector
Selects all the applicable proxies based on the protocol to access the resource with and a destination address to access the resource at
Called to indicate that a connection could not be established to a proxysocks server
Returns an InetAddress for this address
Returns an InetAddress for the brodcast address for this InterfaceAddress
Returns the network prefix length for this address
Compares this object against the specified object
Returns a hashcode for this Interface address
Converts this Interface address to a String
Creates a new SocketImpl instance
Returns the unique link java
Writes to the socket
Writes to the socket with appropriate locking of the FileDescriptor
Writes a byte to the socket
Writes the contents of the buffer b to the socket
Writes length bytes from buffer b starting at offset len
Overrides finalize the fd is closed by the Socket
Perform class loadtime initializations
Returns the cipher suite in use on the original connection that retrieved the network resource
Returns the certificate chain that were sent to the server during handshaking of the original connection that retrieved the network resource
Returns the server's certificate chain which was established as part of defining the session in the original connection that retrieved the network resource from cache
Returns the server's principal which was established as part of defining the session during the original connection that retrieved the network resource
Returns the principal that was sent to the server during handshaking in the original connection that retrieved the network resource
Returns the unique link java
Reads into an array of bytes at the specified offset using the received socket primitive
Reads into a byte array data from the socket
Reads into a byte array b at offset off length bytes of data
Reads a single byte from the socket
Skips n bytes of input
Returns the number of bytes that can be read without blocking
Overrides finalize the fd is closed by the Socket
Perform class loadtime initializations
Replaces the object to be serialized with an InetAddress object
Utility routine to check if the InetAddress is an IP multicast address
Utility routine to check if the InetAddress in a wildcard address
Utility routine to check if the InetAddress is an link local address
Utility routine to check if the InetAddress is a site local address
Utility routine to check if the multicast address has global scope
Utility routine to check if the multicast address has node scope
Utility routine to check if the multicast address has link scope
Utility routine to check if the multicast address has site scope
Utility routine to check if the multicast address has organization scope
Returns the raw IP address of this InetAddress object
Returns the IP address string in textual presentation form
Returns a hashcode for this IP address
Compares this object against the specified object
Perform class loadtime initializations
Creates an unresolved socket address from a hostname and a port number
Gets the port number
Gets the InetAddress
Gets the hostname
Returns the hostname or the String form of the address if it doesn't have a hostname it was created using a literal
Checks whether the address has been resolved or not
Constructs a string representation of this InetSocketAddress
Compares this object against the specified object
Returns a hashcode for this socket address
Sets the authenticator that will be used by the networking code when a proxy or an HTTP server asks for authentication
Ask the authenticator that has been registered with the system for a password
Ask the authenticator that has been registered with the system for a password
Ask the authenticator that has been registered with the system for a password
Gets the hostname of the site or proxy requesting authentication or null if not available
Gets the InetAddress of the site requesting authorization or null if not available
Gets the port number for the requested connection
Give the protocol that's requesting the connection
Gets the prompt string given by the requestor
Gets the scheme of the requestor the HTTP scheme for an HTTP firewall for example
Called when password authorization is needed
Returns the URL that resulted in this request for authentication
Returns whether the requestor is a Proxy or a Server
Connects this socket to a remote socket address IP address port number
Get the DatagramSocketImpl attached to this socket creating it if necessary
Binds this DatagramSocket to a specific address port
Connects the socket to a remote address for this socket
Connects this socket to a remote socket address IP address port number
Disconnects the socket
Returns the binding state of the socket
Returns the connection state of the socket
Returns the address to which this socket is connected
Returns the port number to which this socket is connected
Returns the address of the endpoint this socket is connected to or null if it is unconnected
Returns the address of the endpoint this socket is bound to or null if it is not bound yet
Sends a datagram packet from this socket
Receives a datagram packet from this socket
Gets the local address to which the socket is bound
Returns the port number on the local host to which this socket is bound
Enabledisable SO_TIMEOUT with the specified timeout in milliseconds
Retrieve setting for SO_TIMEOUT
Sets the SO_SNDBUF option to the specified value for this DatagramSocket
Get value of the SO_SNDBUF option for this DatagramSocket that is the buffer size used by the platform for output on this DatagramSocket
Sets the SO_RCVBUF option to the specified value for this DatagramSocket
Get value of the SO_RCVBUF option for this DatagramSocket that is the buffer size used by the platform for input on this DatagramSocket
Enabledisable the SO_REUSEADDR socket option
Tests if SO_REUSEADDR is enabled
Enabledisable SO_BROADCAST
Tests if SO_BROADCAST is enabled
Sets traffic class or typeofservice octet in the IP datagram header for datagrams sent from this DatagramSocket
Gets traffic class or typeofservice in the IP datagram header for packets sent from this DatagramSocket
Closes this datagram socket
Returns whether the socket is closed or not
Returns the unique link java
Sets the datagram socket implementation factory for the application
Decodes a xwwwformurlencoded string
Decodes a applicationxwwwformurlencoded string using a specific encoding scheme
Loads filename map a mimetable from a data file
Sets the FileNameMap
Opens a communications link to the resource referenced by this URL if such a connection has not already been established
Sets a specified timeout value in milliseconds to be used when opening a communications link to the resource referenced by this URLConnection
Returns setting for connect timeout
Sets the read timeout to a specified timeout in milliseconds
Returns setting for read timeout
Returns the value of this URLConnection's URL field
Returns the value of the contentlength header field
Returns the value of the contenttype header field
Returns the value of the contentencoding header field
Returns the value of the expires header field
Returns the value of the date header field
Returns the value of the lastmodified header field
Returns the value of the named header field
Returns an unmodifiable Map of the header fields
Returns the value of the named field parsed as a number
Returns the value of the named field parsed as date
Returns the key for the nth header field
Returns the value for the nth header field
Retrieves the contents of this URL connection
Retrieves the contents of this URL connection
Returns a permission object representing the permission necessary to make the connection represented by this object
Returns an input stream that reads from this open connection
Returns an output stream that writes to this connection
Returns a String representation of this URL connection
Sets the value of the doInput field for this URLConnection to the specified value
Returns the value of this URLConnection's doInput flag
Sets the value of the doOutput field for this URLConnection to the specified value
Returns the value of this URLConnection's doOutput flag
Set the value of the allowUserInteraction field of this URLConnection
Returns the value of the allowUserInteraction field for this object
Sets the default value of the allowUserInteraction field for all future URLConnection objects to the specified value
Returns the default value of the allowUserInteraction field
Sets the value of the useCaches field of this URLConnection to the specified value
Returns the value of this URLConnection's useCaches field
Sets the value of the ifModifiedSince field of this URLConnection to the specified value
Returns the value of this object's ifModifiedSince field
Returns the default value of a URLConnection's useCaches flag
Sets the default value of the useCaches field to the specified value
Sets the general request property
Adds a general request property specified by a keyvalue pair
Returns the value of the named general request property for this connection
Returns an unmodifiable Map of general request properties for this connection
Sets the default value of a general request property
Returns the value of the default request property
Sets the ContentHandlerFactory of an application
Gets the Content Handler appropriate for this connection
Looks for a content handler in a userdefineable set of places
Utility function to map a MIME content type into an equivalent pair of class name components
Returns a vertical bar separated list of package prefixes for potential content handlers
Tries to determine the content type of an object based on the specified file component of a URL
Tries to determine the type of an input stream based on the characters at the beginning of the input stream
Check for FlashPix image data in InputStream is
Tries to read the specified number of bytes from the stream Returns If EOF is reached before len bytes are read returns otherwise
Skips through the specified number of bytes from the stream until either EOF is reached or the specified number of bytes have been skipped
Translates a string into xwwwformurlencoded format
Translates a string into applicationxwwwformurlencoded format using a specific encoding scheme
Given a URL connect stream positioned at the beginning of the representation of an object this method reads that stream and creates an object from it
Given a URL connect stream positioned at the beginning of the representation of an object this method reads that stream and creates an object that matches one of the types specified
Create an InetAddress in the exact manner of link InetAddressgetByAddressStringbyte except that the IPv scope_id is set to the value corresponding to the given interface for the address type specified in addr
Create an InetAddress in the exact manner of link InetAddressgetByAddressStringbyte except that the IPv scope_id is set to the given numeric value
restore the state of this object from stream including the scope information only if the scoped interface name is valid on this system
Utility routine to check if the InetAddress is an IP multicast address
Utility routine to check if the InetAddress in a wildcard address
Utility routine to check if the InetAddress is a loopback address
Utility routine to check if the InetAddress is an link local address
Utility routine to check if the InetAddress is a site local address
Utility routine to check if the multicast address has global scope
Utility routine to check if the multicast address has node scope
Utility routine to check if the multicast address has link scope
Utility routine to check if the multicast address has site scope
Utility routine to check if the multicast address has organization scope
Returns the raw IP address of this InetAddress object
Returns the numeric scopeId if this instance is associated with an interface
Returns the scoped interface if this instance was created with with a scoped interface
Returns the IP address string in textual presentation
Returns a hashcode for this IP address
Compares this object against the specified object
Utility routine to check if the InetAddress is an IPv compatible IPv address
Perform class loadtime initializations
default behavior is overridden in order to write the scope_ifname field as a String rather than a NetworkInterface which is not serializable
Gets the systemwide response cache
Sets or unsets the systemwide cache
Retrieve the cached response based on the requesting uri request method and request headers
The protocol handler calls this method after a resource has been retrieved and the ResponseCache must decide whether or not to store the resource in its cache
Creates a new URLStreamHandler instance with the specified protocol
Constructs cookies from setcookie or setcookie header string
Reports whether this http cookie has expired or not
Specifies a comment that describes a cookie's purpose
Returns the comment describing the purpose of this cookie or null if the cookie has no comment
Specifies a comment url that describes a cookie's purpose
Returns the comment url describing the purpose of this cookie or null if the cookie has no comment url
Specify whether user agent should discard the cookie unconditionally
Return the discard attribute of the cookie
Specify the portlist of the cookie which restricts the ports to which a cookie may be sent back in a Cookie header
Return the port list attribute of the cookie
Specifies the domain within which this cookie should be presented
Returns the domain name set for this cookie
Sets the maximum age of the cookie in seconds
Returns the maximum age of the cookie specified in seconds
Specifies a path for the cookie to which the client should return the cookie
Returns the path on the server to which the browser returns this cookie
Indicates to the browser whether the cookie should only be sent using a secure protocol such as HTTPS or SSL
Returns true if the browser is sending cookies only over a secure protocol or false if the browser can send cookies using any protocol
Returns the name of the cookie
Assigns a new value to a cookie after the cookie is created
Returns the value of the cookie
Returns the version of the protocol this cookie complies with
Sets the version of the cookie protocol this cookie complies with
The utility method to check whether a host name is in a domain or not
Constructs a cookie header string representation of this cookie which is in the format defined by corresponding cookie specification but without the leading Cookie token
Test the equality of two http cookies
Return hash code of this http cookie
Create and return a copy of this object
Provides the authentication machanism required by the proxy
Connects the Socks Socket to the specified endpoint
Sends the Bind request to the SOCKS proxy
Accepts a connection from a specific host
Returns the value of this socket's address field
Returns the value of this socket's port field
Creates either a stream or a datagram socket
Connects this socket to the specified port on the named host
Connects this socket to the specified port number on the specified host
Connects this socket to the specified port number on the specified host
Binds this socket to the specified local IP address and port number
Sets the maximum queue length for incoming connection indications a request to connect to the count argument
Accepts a connection
Returns an input stream for this socket
Returns an output stream for this socket
Returns the number of bytes that can be read from this socket without blocking
Closes this socket
Places the input stream for this socket at end of stream
Disables the output stream for this socket
Returns the value of this socket's fd field
Returns the value of this socket's address field
Returns the value of this socket's port field
Returns whether or not this SocketImpl supports sending urgent data
Send one byte of urgent data on the socket
Returns the value of this socket's localport field
Returns the address and port of this socket as a String
Sets performance preferences for this socket
Returns a new DateFormatSymbols instance for the specified locale
Returns a new Collator instance for the specified locale
Returns a new DecimalFormatSymbols instance for the specified locale
Returns a new BreakIterator instance for a href
Returns a new BreakIterator instance for a href
Returns a new BreakIterator instance for a href
Returns a new BreakIterator instance for a href
Returns a new NumberFormat instance which formats monetary values for the specified locale
Returns a new NumberFormat instance which formats integer values for the specified locale
Returns a new generalpurpose NumberFormat instance for the specified locale
Returns a new NumberFormat instance which formats percentage values for the specified locale
Returns a new DateFormat instance which formats time with the given formatting style for the specified locale
Returns a new DateFormat instance which formats date with the given formatting style for the specified locale
Returns a new DateFormat instance which formats date and time with the given formatting style for the specified locale
Gets the tablebased rules for the collation object
Get the entry of hash table of the contracting string in the collation table
Returns true if this character appears anywhere in a contracting character sequence
Return the maximum length of any expansion sequences that end with the specified comparison order
Get the entry of hash table of the expanding string in the collation table
Get the comarison order of a character from the collation table
Reverse a string
This function is used by RBTableBuilder to fill in all the members of this object
This function is used by RBTableBuilder to fill in all the members of this object
This function is used by RBTableBuilder to fill in all the members of this object
Returns an AttributedCharacterIterator that can be used to iterate over the resulting formatted String
Adds an attribute to the entire string
Adds an attribute to a subrange of the string
Adds a set of attributes to a subrange of the string
Ensures there is a run break at offset returning the index of the run
Creates an AttributedCharacterIterator instance that provides access to the entire contents of this string
Creates an AttributedCharacterIterator instance that provides access to selected contents of this string
Creates an AttributedCharacterIterator instance that provides access to selected contents of this string
Appends the contents of the CharacterIterator iterator into the StringBuffer buf
Sets the attributes for the range from offset to the next run break typically the end of the text to the ones specified in attrs
Returns true if the attributes specified in last and attrs differ
Formats a number and appends the resulting text to the given string buffer
Formats a double to produce a string
Formats a double to produce a string
Format a long to produce a string
Format a long to produce a string
Formats a BigDecimal to produce a string
Formats a BigDecimal to produce a string
Format a BigInteger to produce a string
Format a BigInteger to produce a string
Formats an Object producing an AttributedCharacterIterator
Complete the formatting of a finite number
Appends the String string to result
Parses text from a string to produce a Number
Return a BigInteger multiplier
Return a BigDecimal multiplier
Parse the given text into a number
Returns a copy of the decimal format symbols which is generally not changed by the programmer or user
Sets the decimal format symbols which is generally not changed by the programmer or user
Get the positive prefix
Set the positive prefix
Returns the FieldPositions of the fields in the prefix used for positive numbers
Get the negative prefix
Set the negative prefix
Returns the FieldPositions of the fields in the prefix used for negative numbers
Get the positive suffix
Set the positive suffix
Returns the FieldPositions of the fields in the suffix used for positive numbers
Get the negative suffix
Set the negative suffix
Returns the FieldPositions of the fields in the suffix used for negative numbers
Gets the multiplier for use in percent per mille and similar formats
Sets the multiplier for use in percent per mille and similar formats
Return the grouping size
Set the grouping size
Allows you to get the behavior of the decimal separator with integers
Allows you to set the behavior of the decimal separator with integers
Returns whether the link parsejava
Sets whether the link parsejava
Standard override no change in semantics
Overrides equals
Overrides hashCode
Synthesizes a pattern string that represents the current state of this Format object
Synthesizes a localized pattern string that represents the current state of this Format object
Expand the affix pattern strings into the expanded affix strings
Expand an affix pattern into an affix string
Expand an affix pattern into an array of FieldPositions describing how the pattern would be expanded
Appends an affix pattern to the given StringBuffer quoting special characters as needed
Append an affix to the given StringBuffer using quotes if there are special characters
Does the real work of generating a pattern
Apply the given pattern to this Format object
Apply the given pattern to this Format object
Does the real work of applying a pattern
Sets the maximum number of digits allowed in the integer portion of a number
Sets the minimum number of digits allowed in the integer portion of a number
Sets the maximum number of digits allowed in the fraction portion of a number
Sets the minimum number of digits allowed in the fraction portion of a number
Gets the maximum number of digits allowed in the integer portion of a number
Gets the minimum number of digits allowed in the integer portion of a number
Gets the maximum number of digits allowed in the fraction portion of a number
Gets the minimum number of digits allowed in the fraction portion of a number
Gets the currency used by this decimal format when formatting currency values
Sets the currency used by this number format when formatting currency values
Gets the link java
Sets the link java
Adjusts the minimum and maximum fraction digits to values that are reasonable for the currency's default fraction digits
Reads the default serializable fields from the stream and performs validations and adjustments for older serialized versions
Formats a number and appends the resulting text to the given string buffer
Parses text from a string to produce a Number
Specialization of format
Specialization of format
Specialization of format
Specialization of format
Returns a Long if possible e
Parses text from the beginning of the given string to produce a number
Returns true if this format will parse numbers as integers only
Sets whether or not numbers should be parsed as integers only
Returns a generalpurpose number format for the current default locale
Returns a generalpurpose number format for the specified locale
Returns a generalpurpose number format for the current default locale
Returns a generalpurpose number format for the specified locale
Returns an integer number format for the current default locale
Returns an integer number format for the specified locale
Returns a currency format for the current default locale
Returns a currency format for the specified locale
Returns a percentage format for the current default locale
Returns a percentage format for the specified locale
Returns a scientific format for the current default locale
Returns a scientific format for the specified locale
Returns an array of all locales for which the getInstance methods of this class can return localized instances
Overrides hashCode
Overrides equals
Overrides Cloneable
Returns true if grouping is used in this format
Set whether or not grouping will be used in this format
Returns the maximum number of digits allowed in the integer portion of a number
Sets the maximum number of digits allowed in the integer portion of a number
Returns the minimum number of digits allowed in the integer portion of a number
Sets the minimum number of digits allowed in the integer portion of a number
Returns the maximum number of digits allowed in the fraction portion of a number
Sets the maximum number of digits allowed in the fraction portion of a number
Returns the minimum number of digits allowed in the fraction portion of a number
Sets the minimum number of digits allowed in the fraction portion of a number
Gets the currency used by this number format when formatting currency values
Sets the currency used by this number format when formatting currency values
Gets the link java
Sets the link java
First read in the default serializable data
Write out the default serializable data after first setting the byte fields such as maxIntegerDigits to be equal to the int fields such as maximumIntegerDigits or to Byte
Resolves instances being deserialized to the predefined constants
Resolves instances being deserialized to the predefined constants
Resolves instances being deserialized to the predefined constants
Gets the current extension quoted
Gets the current chars quoted
WARNING this is used for searching in a Vector
For debugging
Gets the strength of the entry
Gets the expanding characters of the entry
Gets the core characters of the entry
Reset this iterator to point to a new string
Implements CharacterIterator
Implements CharacterIterator
Implements CharacterIterator
Implements CharacterIterator
Implements CharacterIterator
Implements CharacterIterator
Implements CharacterIterator
Implements CharacterIterator
Implements CharacterIterator
Compares the equality of two StringCharacterIterator objects
Computes a hashcode for this iterator
Creates a copy of this iterator
Returns an array of all locales for which the getInstance methods of this class can return localized instances
Gets the DateFormatSymbols instance for the default locale
Gets the DateFormatSymbols instance for the specified locale
Gets era strings
Sets era strings
Gets month strings
Sets month strings
Gets short month strings
Sets short month strings
Gets weekday strings
Sets weekday strings
Gets short weekday strings
Sets short weekday strings
Gets ampm strings
Sets ampm strings
Gets time zone strings
Sets time zone strings
Gets localized datetime pattern characters
Sets localized datetime pattern characters
Overrides Cloneable
Override hashCode
Override equals
Look up resource data for the desiredLocale in the cache update the cache if necessary
Package private used by SimpleDateFormat Gets the index for the given time zone ID to obtain the time zone strings for formatting
Wrapper method to the getZoneStrings which is called from inside the java
Clones an array of Strings
Clones all the data members from the source DateFormatSymbols to the target DateFormatSymbols
Compares the equality of the two arrays of String
Write out the default serializable data after ensuring the zoneStrings field is initialized in order to make sure the backward compatibility
Sets the current iteration position to the beginning of the text
Sets the current iteration position to the end of the text
Advances the iterator one step backwards
Sets the current iteration position to the last boundary position before the specified position
Sets the current iteration position to the first boundary position after the specified position
This is the implementation function for next
Looks up a character category for a character
This is the function that actually implements the dictionarybased algorithm
Read datafile
Clones this iterator
Returns true if both BreakIterators are of the same class have the same rules and iterate over the same text
Returns text
Compute a hashcode for this BreakIterator
Sets the current iteration position to the beginning of the text
Sets the current iteration position to the end of the text
Advances the iterator either forward or backward the specified number of steps
Advances the iterator to the next boundary position
Advances the iterator backwards to the last boundary preceding this one
Returns previous character
Returns current character
Returns the count of next character
Returns next character
Returns the position of next character
Throw IllegalArgumentException unless begin offset end
Sets the iterator to refer to the first boundary position following the specified position
Sets the iterator to refer to the last boundary position before the specified position
Returns true if the specfied position is a boundary position
Returns the current iteration position
Return a CharacterIterator over the text being analyzed
Set the iterator to analyze a new piece of text
This method is the actual implementation of the next method
This method backs the iterator back up to a safe position in the text
Looks up a character's category i
Given a current state and a character category looks up the next state to transition to in the state table
Given a current state and a character category looks up the next state to transition to in the backwards state table
Sets the pattern
Gets the pattern
Set the choices to be used in formatting
Get the limits passed in the constructor
Get the formats passed in the constructor
Specialization of format
Returns pattern with formatted double
Parses a Number from the input text
Finds the least double greater than d
Finds the greatest double less than d
Overrides Cloneable
Generates a hash code for the message format object
Equality comparision between two
After reading an object from the input stream do a simple verification to maintain class invariants
Finds the least double greater than d if positive true or the greatest double less than d if positive false
Create a copy of this iterator
Returns the first boundary
Returns the last boundary
Returns the nth boundary from the current boundary
Returns the boundary following the current boundary
Returns the boundary preceding the current boundary
Returns the first boundary following the specified character offset
Returns the last boundary preceding the specified character offset
Returns true if the specified character offset is a text boundary
Returns character index of the text boundary that was most recently returned by next nextint previous first last followingint or precedingint
Get the text being scanned
Set a new text string to be scanned
Set a new text for scanning
Returns a new BreakIterator instance for word breaks for the linkplain LocalegetDefault default locale
Returns a new BreakIterator instance for word breaks for the given locale
Returns a new BreakIterator instance for line breaks for the linkplain LocalegetDefault default locale
Returns a new BreakIterator instance for line breaks for the given locale
Returns a new BreakIterator instance for character breaks for the linkplain LocalegetDefault default locale
Returns a new BreakIterator instance for character breaks for the given locale
Returns a new BreakIterator instance for sentence breaks for the linkplain LocalegetDefault default locale
Returns a new BreakIterator instance for sentence breaks for the given locale
Returns an array of all locales for which the getInstance methods of this class can return localized instances
Returns an array of all locales for which the getInstance methods of this class can return localized instances
Gets the DecimalFormatSymbols instance for the default locale
Gets the DecimalFormatSymbols instance for the specified locale
Gets the character used for zero
Sets the character used for zero
Gets the character used for thousands separator
Sets the character used for thousands separator
Gets the character used for decimal sign
Sets the character used for decimal sign
Gets the character used for per mille sign
Sets the character used for per mille sign
Gets the character used for percent sign
Sets the character used for percent sign
Gets the character used for a digit in a pattern
Sets the character used for a digit in a pattern
Gets the character used to separate positive and negative subpatterns in a pattern
Sets the character used to separate positive and negative subpatterns in a pattern
Gets the string used to represent infinity
Sets the string used to represent infinity
Gets the string used to represent not a number
Sets the string used to represent not a number
Gets the character used to represent minus sign
Sets the character used to represent minus sign
Returns the currency symbol for the currency of these DecimalFormatSymbols in their locale
Sets the currency symbol for the currency of these DecimalFormatSymbols in their locale
Returns the ISO currency code of the currency of these DecimalFormatSymbols
Sets the ISO currency code of the currency of these DecimalFormatSymbols
Gets the currency of these DecimalFormatSymbols
Sets the currency of these DecimalFormatSymbols
Returns the monetary decimal separator
Sets the monetary decimal separator
Returns the character used to separate the mantissa from the exponent
Returns the string used to separate the mantissa from the exponent
Sets the character used to separate the mantissa from the exponent
Sets the string used to separate the mantissa from the exponent
Standard override
Override equals
Override hashCode
Initializes the symbols from the FormatData resource bundle
Reads the default serializable fields provides default values for objects in older serial versions and initializes nonserializable fields
Return true if the represented number is zero
Set the rounding mode
Clears out the digits
Appends a digit to the list extending the list when necessary
Utility routine to get the value of the digit list If count this throws a NumberFormatException which mimics Long
Utility routine to get the value of the digit list
Return true if the number represented by this object can fit into a long
Set the digit list to a representation of the given double value
Set the digit list to a representation of the given double value
Generate a representation of the form DDDDD DDDDD
Round the representation to the given number of digits
Return true if truncating the representation to the given number of digits will result in an increment to the last digit
Utility routine to set the value of the digit list from a long
Set the digit list to a representation of the given long value
Set the digit list to a representation of the given BigDecimal value
Set the digit list to a representation of the given BigInteger value
equality test between two digit lists
Generates the hash code for the digit list
Creates a copy of this object
Returns true if this DigitList represents Long
Compare this RuleBasedCollationKey to target
Compare this RuleBasedCollationKey and the target for equality
Creates a hash code for this RuleBasedCollationKey
Converts the RuleBasedCollationKey to a sequence of bits
Returns the compiled form of the given pattern
Encodes the given tag and length and puts encoded chars into buffer
Sets the year period digit years will be interpreted as being in to begin on the date the user specifies
Returns the beginning date of the year period digit years are interpreted as being within
Formats the given Date into a datetime string and appends the result to the given StringBuffer
Formats an Object producing an AttributedCharacterIterator
Private member function that does the real datetime formatting
Formats a number with the specified minimum and maximum number of digits
Parses text from a string to produce a Date
Private codesize reduction function used by subParse
Performs the same thing as matchStringString int int String
find time zone 'text' matched zoneStrings and set to internal calendar
Private member function that converts the parsed date strings into timeFields
Translates a pattern mapping each character in the from string to the corresponding character in the to string
Returns a pattern string describing this date format
Returns a localized pattern string describing this date format
Applies the given pattern string to this date format
Applies the given localized pattern string to this date format
Gets a copy of the date and time format symbols of this date format
Sets the date and time format symbols of this date format
Creates a copy of this SimpleDateFormat
Returns the hash code value for this SimpleDateFormat object
Compares the given object with this SimpleDateFormat for equality
After reading an object from the input stream the format pattern in the object is verified
Private mutator used by native code
Create a Bidi object representing the bidi information on a line of text within the paragraph represented by the current Bidi
Return true if the line is not lefttoright or righttoleft
Return true if the line is all lefttoright text and the base direction is lefttoright
Return true if the line is all righttoleft text and the base direction is righttoleft
Return the length of text in the line
Return true if the base direction is lefttoright
Return the base level if lefttoright if righttoleft
Return the resolved level of the character at offset
Return the number of level runs
Return the level of the nth logical run in this line
Return the index of the character at the start of the nth logical run in this line as an offset from the start of the line
Return the index of the character past the end of the nth logical run in this line as an offset from the start of the line
Return true if the specified text requires bidi analysis
Reorder the objects in the array into visual order based on their levels
Access native bidi implementation
Access native bidi implementation
Display the bidi internal state used in debugging
Normalize a sequence of char values
Determines if the given sequence of char values is normalized
Returns the value of the attribute which may be null
Returns the String representation of this Annotation
Formats an object to produce a string
Formats an object and appends the resulting text to a given string buffer
Formats an Object producing an AttributedCharacterIterator
Parses text from a string to produce an object
Parses text from the beginning of the given string to produce an object
Creates and returns a copy of this object
Creates an AttributedCharacterIterator for the String s
Creates an AttributedCharacterIterator containg the concatenated contents of the passed in AttributedCharacterIterators
Returns an AttributedCharacterIterator with the String string and additional keyvalue pair key value
Creates an AttributedCharacterIterator with the contents of iterator and the additional attribute key value
Notified when a particular region of the String is formatted
Notified when a particular region of the String is formatted
Notified when a particular region of the String is formatted
Notified when a particular region of the String is formatted
Notified when a particular region of the String is formatted
Notified when a particular region of the String is formatted
Returns the field identifier as an attribute constant from one of the Field subclasses
Retrieves the field identifier
Retrieves the index of the first character in the requested field
Retrieves the index of the character following the last character in the requested field
Sets the begin index
Sets the end index
Returns a Format
Overrides equals
Returns a hash code for this FieldPosition
Return a string representation of this FieldPosition
Return true if the receiver wants a Format
Return true if the receiver wants a Format
Gets the tablebased rules for the collation object
Return a CollationElementIterator for the given String
Return a CollationElementIterator for the given String
Compares the character data stored in two different strings based on the collation rules
Transforms the string into a series of characters that can be compared with CollationKey
Standard override no change in semantics
Compares the equality of two collation objects
Generates the hash code for the tablebased collation object
Allows CollationElementIterator access to the tables object
Returns the position where the error was found
Compare this CollationKey to the target CollationKey
Returns the String that this CollationKey represents
Converts the CollationKey to a sequence of bits
Gets the Collator for the current default locale
Gets the Collator for the desired locale
Compares the source string to the target string according to the collation rules for this Collator
Compares its two arguments for order
Transforms the String into a series of bits that can be compared bitwise to other CollationKeys
Convenience method for comparing the equality of two strings based on this Collator's collation rules
Returns this Collator's strength property
Sets this Collator's strength property
Get the decomposition mode of this Collator
Set the decomposition mode of this Collator
Returns an array of all locales for which the getInstance methods of this class can return localized instances
Overrides Cloneable
Compares the equality of two Collators
Generates the hash code for this Collator
Sets the locale to be used when creating or comparing subformats
Gets the locale that's used when creating or comparing subformats
Sets the pattern used by this message format
Returns a pattern representing the current state of the message format
Sets the formats to use for the values passed into format methods or returned from parse methods
Sets the formats to use for the format elements in the previously set pattern string
Sets the format to use for the format elements within the previously set pattern string that use the given argument index
Sets the format to use for the format element with the given format element index within the previously set pattern string
Gets the formats used for the values passed into format methods or returned from parse methods
Gets the formats used for the format elements in the previously set pattern string
Formats an array of objects and appends the MessageFormat's pattern with format elements replaced by the formatted objects to the provided StringBuffer
Creates a MessageFormat with the given pattern and uses it to format the given arguments
Formats an array of objects and appends the MessageFormat's pattern with format elements replaced by the formatted objects to the provided StringBuffer
Formats an array of objects and inserts them into the MessageFormat's pattern producing an AttributedCharacterIterator
Parses the string
Parses text from the beginning of the given string to produce an object array
Parses text from a string to produce an object array
Creates and returns a copy of this object
Equality comparison between two message format objects
Generates a hash code for the message format object
Internal routine used by format
Convenience method to append all the characters in iterator to the StringBuffer result
After reading an object from the input stream do a simple verification to maintain class invariants
Resolves instances being deserialized to the predefined constants
Resolves instances being deserialized to the predefined constants
Resolves instances being deserialized to the predefined constants
Sets the position to getBeginIndex and returns the character at that position
Sets the position to getEndIndex getEndIndex if the text is empty and returns the character at that position
Gets the character at the current position as returned by getIndex
Increments the iterator's index by one and returns the character at the new index
Decrements the iterator's index by one and returns the character at the new index
Sets the position to the specified position in the text and returns that character
Returns the start index of the text
Returns the end index of the text
Returns the current index
Create a copy of this iterator
Resets the cursor to the beginning of the string
Get the next collation element in the string
Get the previous collation element in the string
Return the primary component of a collation element
Return the secondary component of a collation element
Return the tertiary component of a collation element
Get the comparison order in the desired strength
Sets the iterator to point to the collation element corresponding to the specified character the parameter is a CHARACTER offset in the original string not an offset into its corresponding sequence of collation elements
Returns the character offset in the original text corresponding to the next collation element
Return the maximum length of any expansion sequences that end with the specified comparison order
Set a new string over which to iterate
Set a new string over which to iterate
Determine if a character is a Thai vowel which sorts after its base consonant
Determine if a character is a Thai base consonant
Determine if a character is a Lao vowel which sorts after its base consonant
Determine if a character is a Lao base consonant
This method produces a buffer which contains the collation elements for the two characters with colFirst's values preceding another character's
Check if a comparison order is ignorable
Get the ordering priority of the next contracting character in the string
Get the ordering priority of the previous contracting character in the string
Returns the index of the first character of the run with respect to all attributes containing the current character
Returns the index of the first character of the run with respect to the given attribute containing the current character
Returns the index of the first character of the run with respect to the given attributes containing the current character
Returns the index of the first character following the run with respect to all attributes containing the current character
Returns the index of the first character following the run with respect to the given attribute containing the current character
Returns the index of the first character following the run with respect to the given attributes containing the current character
Returns a map with the attributes defined on the current character
Returns the value of the named attribute for the current character
Returns the keys of all attributes defined on the iterator's text range
Compares two objects for equality
Returns a hash code value for the object
Returns a string representation of the object
Returns the name of the attribute
Resolves instances being deserialized to the predefined constants
Compares two objects for equality
Returns a hash code value for the object
Returns a string representation of the object
Returns the name of the attribute
Resolves instances being deserialized to the predefined constants
Compares two objects for equality
Returns a hash code value for the object
Returns a string representation of the object
Returns the name of the attribute
Resolves instances being deserialized to the predefined constants
recovers current pattern
recovers current pattern
emits the pattern for collation builder
emits the pattern for collation builder
sets the pattern
adds a pattern to the current one
gets count of separate entries
gets count of separate entries
Uses the column map to map the character to a column number then passes the row and column number to getNextState
Returns the value in the cell with the specified logical row and column numbers
Given logical row and column numbers returns true if the cell in that position is populated
Implementation of getNextState when we know the specified cell is populated
Overrides Format
Formats a Date into a datetime string
Formats a Date into a datetime string
Parses text from the beginning of the given string to produce a date
Parse a datetime string according to the given parse position
Parses text from a string to produce a Date
Gets the time formatter with the default formatting style for the default locale
Gets the time formatter with the given formatting style for the default locale
Gets the time formatter with the given formatting style for the given locale
Gets the date formatter with the default formatting style for the default locale
Gets the date formatter with the given formatting style for the default locale
Gets the date formatter with the given formatting style for the given locale
Gets the datetime formatter with the default formatting style for the default locale
Gets the datetime formatter with the given date and time formatting styles for the default locale
Gets the datetime formatter with the given formatting styles for the given locale
Get a default datetime formatter that uses the SHORT style for both the date and the time
Returns an array of all locales for which the getInstance methods of this class can return localized instances
Set the calendar to be used by this date format
Gets the calendar associated with this datetime formatter
Allows you to set the number formatter
Gets the number formatter which this datetime formatter uses to format and parse a time
Sets the time zone for the calendar of this DateFormat object
Gets the time zone
Specify whether or not datetime parsing is to be lenient
Tell whether datetime parsing is to be lenient
Overrides hashCode
Overrides equals
Overrides Cloneable
Creates a DateFormat with the given time andor date style in the given locale
Returns the Field constant that corresponds to the Calendar constant calendarField
Returns the Calendar field associated with this attribute
Resolves instances being deserialized to the predefined constants
Returns the Field constant that corresponds to the Calendar constant calendarField
Returns the Calendar field associated with this attribute
Resolves instances being deserialized to the predefined constants
Returns the Field constant that corresponds to the Calendar constant calendarField
Returns the Calendar field associated with this attribute
Resolves instances being deserialized to the predefined constants
Retrieve the current parse position
Set the current parse position
Set the index at which a parse error occurred
Retrieve the index at which an error occurred or if the error index has not been set
Overrides equals
Returns a hash code for this ParsePosition
Return a string representation of this ParsePosition
Create a tablebased collation object with the given rules
Add expanding entries for precomposed unicode characters so that this collator can be used reasonably well with decomposition turned off
Look up for unmapped values in the expanded character table
Increment of the last order based on the comparison level
Adds a character and its designated order into the collation table
Adds the contracting string into the collation table
If the given string has been specified as a contracting string in this collation table return its ordering
Get the entry of hash table of the contracting string in the collation table
Adds the expanding string into the collation table
Create a new entry in the expansion table that contains the orderings for the given characers
Gets the symbol of the given currency code for the specified locale
Returns a name for the currency that is appropriate for display to the user
Returns a localized name for the given ISO language code and the given locale that is appropriate for display to the user
Returns a localized name for the given ISO country code and the given locale that is appropriate for display to the user
Returns a localized name for the given variant code and the given locale that is appropriate for display to the user
Returns an array of all locales for which this locale service provider can provide localized objects or names
Returns a name for the given time zone ID that's suitable for presentation to the user in the specified locale
Compares the specified object with this set for equality
Returns the hash code value for this set
Removes from this set all of its elements that are contained in the specified collection optional operation
Returns the Currency instance for the given currency code
Returns the Currency instance for the country of the given locale
Gets the set of available currencies
Gets the ISO currency code of this currency
Gets the symbol of this currency for the default locale
Gets the symbol of this currency for the specified locale
Gets the default number of fraction digits used with this currency
Returns the ISO numeric code of this currency
Gets the name that is suitable for displaying this currency for the default locale
Gets the name that is suitable for displaying this currency for the specified locale
Returns the ISO currency code of this currency
Resolves instances being deserialized to a single instance per currency
Gets the main table entry for the country whose country code consists of char and char
Sets the main table entry for the country whose country code consists of char and char
Replaces currency data found in the currencydata
Tests if this enumeration contains more elements
Returns the next element of this enumeration if this enumeration object has at least one more element to provide
The listener associated with this proxy
Creates an empty enum set with the specified element type
Creates an enum set containing all of the elements in the specified element type
Adds all of the elements from the appropriate enum type to this enum set which is empty prior to the call
Creates an enum set with the same element type as the specified enum set initially containing the same elements if any
Creates an enum set initialized from the specified collection
Creates an enum set with the same element type as the specified enum set initially containing all the elements of this type that are not contained in the specified set
Creates an enum set initially containing the specified element
Creates an enum set initially containing the specified elements
Creates an enum set initially containing the specified elements
Creates an enum set initially containing the specified elements
Creates an enum set initially containing the specified elements
Creates an enum set initially containing the specified elements
Creates an enum set initially containing all of the elements in the range defined by the two specified endpoints
Adds the specified range to this enum set which is empty prior to the call
Returns a copy of this set
Complements the contents of this enum set
Throws an exception if e is not of the correct type for this enum set
Returns all of the values comprising E
Returns the number of keyvalue mappings in this map
Returns true if this map contains no keyvalue mappings
Returns true if this map contains a mapping for the specified key
Returns true if this map maps one or more keys to the specified value
Returns the value to which the specified key is mapped or code null if this map contains no mapping for the key
Associates the specified value with the specified key in this map optional operation
Removes the mapping for a key from this map if it is present optional operation
Copies all of the mappings from the specified map to this map optional operation
Removes all of the mappings from this map optional operation
Returns a link Set view of the keys contained in this map
Returns a link Collection view of the values contained in this map
Returns a link Set view of the mappings contained in this map
Compares the specified object with this map for equality
Returns the hash code value for this map
Returns the key corresponding to this entry
Returns the value corresponding to this entry
Replaces the value corresponding to this entry with the specified value optional operation
Compares the specified object with this entry for equality
Returns the hash code value for this map entry
Returns the key corresponding to this entry
Returns the value corresponding to this entry
Replaces the value corresponding to this entry with the specified value optional operation
Compares the specified object with this entry for equality
Returns the hash code value for this map entry
Returns the key corresponding to this entry
Returns the value corresponding to this entry
Replaces the value corresponding to this entry with the specified value optional operation
Compares the specified object with this entry for equality
Returns the hash code value for this map entry
Calls the Hashtable method put
Reads a property list key and element pairs from the input character stream in a simple lineoriented format
Reads a property list key and element pairs from the input byte stream
Calls the storeOutputStream out String comments method and suppresses IOExceptions that were thrown
Writes this property list key and element pairs in this Properties table to the output character stream in a format suitable for using the link loadjava
Writes this property list key and element pairs in this Properties table to the output stream in a format suitable for loading into a Properties table using the link loadInputStream loadInputStream method
Loads all of the properties represented by the XML document on the specified input stream into this properties table
Emits an XML document representing all of the properties contained in this table
Emits an XML document representing all of the properties contained in this table using the specified encoding
Searches for the property with the specified key in this property list
Searches for the property with the specified key in this property list
Returns an enumeration of all the keys in this property list including distinct keys in the default property list if a key of the same name has not already been found from the main properties list
Returns a set of keys in this property list where the key and its corresponding value are strings including distinct keys in the default property list if a key of the same name has not already been found from the main properties list
Prints this property list out to the specified output stream
Prints this property list out to the specified output stream
Enumerates all keyvalue pairs in the specified hashtable
Enumerates all keyvalue pairs in the specified hashtable and omits the property if the key or value is not a string
Convert a nibble to a hex character
Returns the number of elements in this set its cardinality
Returns true if this set contains no elements
Returns true if this set contains the specified element
Returns an iterator over the elements in this set
Returns an array containing all of the elements in this set
Returns an array containing all of the elements in this set the runtime type of the returned array is that of the specified array
Adds the specified element to this set if it is not already present optional operation
Removes the specified element from this set if it is present optional operation
Returns true if this set contains all of the elements of the specified collection
Adds all of the elements in the specified collection to this set if they're not already present optional operation
Retains only the elements in this set that are contained in the specified collection optional operation
Removes from this set all of its elements that are contained in the specified collection optional operation
Removes all of the elements from this set optional operation
Compares the specified object with this set for equality
Returns the hash code value for this set
Copies the components of this vector into the specified array
Trims the capacity of this vector to be the vector's current size
Increases the capacity of this vector if necessary to ensure that it can hold at least the number of components specified by the minimum capacity argument
This implements the unsynchronized semantics of ensureCapacity
Sets the size of this vector
Returns the current capacity of this vector
Returns the number of components in this vector
Tests if this vector has no components
Returns an enumeration of the components of this vector
Returns code true if this vector contains the specified element
Returns the index of the first occurrence of the specified element in this vector or if this vector does not contain the element
Returns the index of the first occurrence of the specified element in this vector searching forwards from code index or returns if the element is not found
Returns the index of the last occurrence of the specified element in this vector or if this vector does not contain the element
Returns the index of the last occurrence of the specified element in this vector searching backwards from code index or returns if the element is not found
Returns the component at the specified index
Returns the first component the item at index code of this vector
Returns the last component of the vector
Sets the component at the specified code index of this vector to be the specified object
Deletes the component at the specified index
Inserts the specified object as a component in this vector at the specified code index
Adds the specified component to the end of this vector increasing its size by one
Removes the first lowestindexed occurrence of the argument from this vector
Removes all components from this vector and sets its size to zero
Returns a clone of this vector
Returns an array containing all of the elements in this Vector in the correct order
Returns an array containing all of the elements in this Vector in the correct order the runtime type of the returned array is that of the specified array
Returns the element at the specified position in this Vector
Replaces the element at the specified position in this Vector with the specified element
Appends the specified element to the end of this Vector
Removes the first occurrence of the specified element in this Vector If the Vector does not contain the element it is unchanged
Inserts the specified element at the specified position in this Vector
Removes the element at the specified position in this Vector
Removes all of the elements from this Vector
Returns true if this Vector contains all of the elements in the specified Collection
Appends all of the elements in the specified Collection to the end of this Vector in the order that they are returned by the specified Collection's Iterator
Removes from this Vector all of its elements that are contained in the specified Collection
Retains only the elements in this Vector that are contained in the specified Collection
Inserts all of the elements in the specified Collection into this Vector at the specified position
Compares the specified Object with this Vector for equality
Returns the hash code value for this Vector
Returns a string representation of this Vector containing the String representation of each element
Returns a view of the portion of this List between fromIndex inclusive and toIndex exclusive
Removes from this list all of the elements whose index is between code fromIndex inclusive and code toIndex exclusive
Save the state of the code Vector instance to a stream that is serialize it
Returns a list iterator over the elements in this list in proper sequence starting at the specified position in the list
Returns a list iterator over the elements in this list in proper sequence
Returns an iterator over the elements in this list in proper sequence
Returns the unknown conversion
Given a bit index return word index containing it
Every public method must preserve these invariants
Sets the field wordsInUse to the logical size in words of the bit set
Ensures that the BitSet can hold enough words
Ensures that the BitSet can accommodate a given wordIndex temporarily violating the invariants
Checks that fromIndex
Sets the bit at the specified index to the complement of its current value
Sets each bit from the specified code fromIndex inclusive to the specified code toIndex exclusive to the complement of its current value
Sets the bit at the specified index to code true
Sets the bit at the specified index to the specified value
Sets the bits from the specified code fromIndex inclusive to the specified code toIndex exclusive to code true
Sets the bits from the specified code fromIndex inclusive to the specified code toIndex exclusive to the specified value
Sets the bit specified by the index to code false
Sets the bits from the specified code fromIndex inclusive to the specified code toIndex exclusive to code false
Sets all of the bits in this BitSet to code false
Returns the value of the bit with the specified index
Returns a new code BitSet composed of bits from this code BitSet from code fromIndex inclusive to code toIndex exclusive
Returns the index of the first bit that is set to code true that occurs on or after the specified starting index
Returns the index of the first bit that is set to code false that occurs on or after the specified starting index
Returns the logical size of this code BitSet the index of the highest set bit in the code BitSet plus one
Returns true if this code BitSet contains no bits that are set to code true
Returns true if the specified code BitSet has any bits set to code true that are also set to code true in this code BitSet
Returns the number of bits set to code true in this code BitSet
Performs a logical AND of this target bit set with the argument bit set
Performs a logical OR of this bit set with the bit set argument
Performs a logical XOR of this bit set with the bit set argument
Clears all of the bits in this code BitSet whose corresponding bit is set in the specified code BitSet
Returns a hash code value for this bit set
Returns the number of bits of space actually in use by this code BitSet to represent bit values
Compares this object against the specified object
Cloning this code BitSet produces a new code BitSet that is equal to it
Attempts to reduce internal storage used for the bits in this bit set
Save the state of the code BitSet instance to a stream i
Reconstitute the code BitSet instance from a stream i
Returns a string representation of this bit set
Updates CRC with specified byte
Updates CRC with specified array of bytes
Updates checksum with specified array of bytes
Resets CRC to initial value
Returns CRC value
Writes a byte
Writes an array of bytes
Returns the Checksum for this output stream
Returns the name of the entry
Sets the modification time of the entry
Returns the modification time of the entry or if not specified
Sets the uncompressed size of the entry data
Returns the uncompressed size of the entry data or if not known
Returns the size of the compressed entry data or if not known
Sets the size of the compressed entry data
Sets the CRC checksum of the uncompressed entry data
Returns the CRC checksum of the uncompressed entry data or if not known
Sets the compression method for the entry
Returns the compression method of the entry or if not specified
Sets the optional extra field data for the entry
Returns the extra field data for the entry or null if none
Sets the optional comment string for the entry
Returns the comment string for the entry or null if none
Returns true if this is a directory entry
Returns a string representation of the ZIP entry
Returns the hash code value for this entry
Returns a copy of this entry
Sets input data for decompression
Sets input data for decompression
Sets the preset dictionary to the given array of bytes
Sets the preset dictionary to the given array of bytes
Returns the total number of bytes remaining in the input buffer
Returns true if no data remains in the input buffer
Returns true if a preset dictionary is needed for decompression
Returns true if the end of the compressed data stream has been reached
Uncompresses bytes into specified buffer
Uncompresses bytes into specified buffer
Returns the ADLER value of the uncompressed data
Returns the total number of compressed bytes input so far
Returns the total number of compressed bytes input so far
Returns the total number of uncompressed bytes output so far
Returns the total number of uncompressed bytes output so far
Resets inflater so that a new set of input data can be processed
Closes the decompressor and discards any unprocessed input
Closes the decompressor when garbage is collected
Writes a byte to the compressed output stream
Writes an array of bytes to the compressed output stream
Finishes writing compressed data to the output stream without closing the underlying stream
Writes remaining compressed data to the output stream and closes the underlying stream
Writes next block of compressed data to the output stream
Checks to make sure that this stream has not been closed
Writes any remaining uncompressed data to the output stream and closes the underlying output stream
Flushes this output stream forcing any pending buffered output bytes to be written
Finishes writing uncompressed data to the output stream without closing the underlying stream
Writes a byte to the uncompressed output stream
Writes an array of bytes to the uncompressed output stream
Updates the current checksum with the specified byte
Updates the current checksum with the specified array of bytes
Returns the current checksum value
Resets the checksum to its initial value
Check to make sure that this stream has not been closed
Reads uncompressed data into an array of bytes
Closes this input stream and releases any system resources associated with the stream
Checks to make sure that this stream has not been closed
Sets the ZIP file comment
Sets the default compression method for subsequent entries
Sets the compression level for subsequent entries which are DEFLATED
Begins writing a new ZIP file entry and positions the stream to the start of the entry data
Closes the current ZIP entry and positions the stream for writing the next entry
Writes an array of bytes to the current ZIP entry data
Finishes writing the contents of the ZIP output stream without closing the underlying stream
Closes the ZIP output stream as well as the stream being filtered
Returns the zip file entry for the specified name or null if not found
Returns an input stream for reading the contents of the specified zip file entry
Returns an input stream for reading the contents of the specified entry or null if the entry was not found
Returns the path name of the ZIP file
Returns an enumeration of the ZIP file entries
Returns the number of entries in the ZIP file
Closes the ZIP file
Ensures that the close method of this ZIP file is called when there are no more references to it
Check to make sure that this stream has not been closed
Reads a byte of uncompressed data
Reads uncompressed data into an array of bytes
Returns after EOF has been reached otherwise always return
Skips specified number of bytes of uncompressed data
Closes this input stream and releases any system resources associated with the stream
Fills input buffer with more data to decompress
Tests if this input stream supports the mark and reset methods
Marks the current position in this input stream
Repositions this stream to the position at the time the mark method was last called on this input stream
Reads a byte
Reads into an array of bytes
Skips specified number of bytes of input
Returns the Checksum for this input stream
Check to make sure that this stream has not been closed
Reads the next ZIP file entry and positions the stream at the beginning of the entry data
Closes the current ZIP entry and positions the stream for reading the next entry
Returns after EOF has reached for the current entry data otherwise always return
Reads from the current ZIP entry into an array of bytes
Skips specified number of bytes in the current ZIP entry
Closes this input stream and releases any system resources associated with the stream
Creates a new ZipEntry object for the specified entry name
Check to make sure that this stream has not been closed
Closes this input stream and its underlying input stream discarding any pending uncompressed data
Reads a single byte of compressed data from the input stream
Reads compressed data into a byte array
Skips over and discards data from the input stream
Returns after EOF has been reached otherwise always return
Always returns code false because this input stream does not support the link mark mark and link reset reset methods
This operation is not supported
This operation is not supported
Updates checksum with specified byte
Updates checksum with specified array of bytes
Updates checksum with specified array of bytes
Resets checksum to initial value
Returns checksum value
Writes array of bytes to the compressed output stream
Finishes writing compressed data to the output stream without closing the underlying stream
Sets input data for compression
Sets input data for compression
Sets preset dictionary for compression
Sets preset dictionary for compression
Sets the compression strategy to the specified value
Sets the current compression level to the specified value
Returns true if the input data buffer is empty and setInput should be called in order to provide more input
When called indicates that compression should end with the current contents of the input buffer
Returns true if the end of the compressed data output stream has been reached
Fills specified buffer with compressed data
Fills specified buffer with compressed data
Returns the ADLER value of the uncompressed data
Returns the total number of uncompressed bytes input so far
Returns the total number of uncompressed bytes input so far
Returns the total number of compressed bytes output so far
Returns the total number of compressed bytes output so far
Resets deflater so that a new set of input data can be processed
Closes the compressor and discards any unprocessed input
Closes the compressor when garbage is collected
Initialization hook for subclasses
Applies a supplemental hash function to a given hashCode which defends against poor quality hash functions
Returns index for hash code h
Returns the number of keyvalue mappings in this map
Returns true if this map contains no keyvalue mappings
Returns the value to which the specified key is mapped or code null if this map contains no mapping for the key
Offloaded version of get to look up null keys
Returns true if this map contains a mapping for the specified key
Returns the entry associated with the specified key in the HashMap
Associates the specified value with the specified key in this map
Offloaded version of put for null keys
This method is used instead of put by constructors and pseudoconstructors clone readObject
Rehashes the contents of this map into a new array with a larger capacity
Transfers all entries from current table to newTable
Copies all of the mappings from the specified map to this map
Removes the mapping for the specified key from this map if present
Removes and returns the entry associated with the specified key in the HashMap
Special version of remove for EntrySet
Removes all of the mappings from this map
Returns true if this map maps one or more keys to the specified value
Specialcase code for containsValue with null argument
Returns a shallow copy of this HashMap instance the keys and values themselves are not cloned
Adds a new entry with the specified key value and hash code to the specified bucket
Like addEntry except that this version is used when creating entries as part of Map construction or pseudoconstruction cloning deserialization
Returns a link Set view of the keys contained in this map
Returns a link Collection view of the values contained in this map
Returns a link Set view of the mappings contained in this map
Save the state of the HashMap instance to a stream i
Reconstitute the HashMap instance from a stream i
This method is invoked whenever the value in an entry is overwritten by an invocation of putkv for a key k that's already in the HashMap
This method is invoked whenever the entry is removed from the table
This method is invoked whenever the value in an entry is overwritten by an invocation of putkv for a key k that's already in the HashMap
This method is invoked whenever the entry is removed from the table
This method is invoked whenever the value in an entry is overwritten by an invocation of putkv for a key k that's already in the HashMap
This method is invoked whenever the entry is removed from the table
Returns an iterator over the elements in this set in ascending order
Returns an iterator over the elements in this set in descending order

Returns the number of elements in this set its cardinality
Returns code true if this set contains no elements
Returns code true if this set contains the specified element
Adds the specified element to this set if it is not already present
Removes the specified element from this set if it is present
Removes all of the elements from this set
Adds all of the elements in the specified collection to this set
ClassCastException inheritDoc
ClassCastException inheritDoc
ClassCastException inheritDoc
ClassCastException inheritDoc
ClassCastException inheritDoc
ClassCastException inheritDoc
NoSuchElementException inheritDoc
NoSuchElementException inheritDoc
ClassCastException inheritDoc
ClassCastException inheritDoc
ClassCastException inheritDoc
ClassCastException inheritDoc


Returns a shallow copy of this code TreeSet instance
Save the state of the code TreeSet instance to a stream that is serialize it
Reconstitute the code TreeSet instance from a stream that is deserialize it
initialize a PropertyPermission object
Checks if this PropertyPermission object implies the specified permission
Checks two PropertyPermission objects for equality
Returns the hash code value for this object
Converts an actions String to an actions mask
Return the canonical string representation of the actions
Returns the canonical string representation of the actions
Return the current action mask
Returns a new PermissionCollection object for storing PropertyPermission objects
WriteObject is called to save the state of the PropertyPermission to a stream
readObject is called to restore the state of the PropertyPermission from a stream
Adds a permission to the PropertyPermissions
Check and see if this set of permissions implies the permissions expressed in permission
Returns an enumeration of all the PropertyPermission objects in the container
Default fields
Returns the incompatible flag
Returns the incompatible conversion
Trims the capacity of this ArrayList instance to be the list's current size
Increases the capacity of this ArrayList instance if necessary to ensure that it can hold at least the number of elements specified by the minimum capacity argument
Returns the number of elements in this list
Returns true if this list contains no elements
Returns true if this list contains the specified element
Returns the index of the first occurrence of the specified element in this list or if this list does not contain the element
Returns the index of the last occurrence of the specified element in this list or if this list does not contain the element
Returns a shallow copy of this ArrayList instance
Returns an array containing all of the elements in this list in proper sequence from first to last element
Returns an array containing all of the elements in this list in proper sequence from first to last element the runtime type of the returned array is that of the specified array
Returns the element at the specified position in this list
Replaces the element at the specified position in this list with the specified element
Appends the specified element to the end of this list
Inserts the specified element at the specified position in this list
Removes the element at the specified position in this list
Removes the first occurrence of the specified element from this list if it is present
Removes all of the elements from this list
Appends all of the elements in the specified collection to the end of this list in the order that they are returned by the specified collection's Iterator
Inserts all of the elements in the specified collection into this list starting at the specified position
Removes from this list all of the elements whose index is between code fromIndex inclusive and code toIndex exclusive
Checks if the given index is in range
A version of rangeCheck used by add and addAll
Constructs an IndexOutOfBoundsException detail message
Removes from this list all of its elements that are contained in the specified collection
Retains only the elements in this list that are contained in the specified collection
Save the state of the ArrayList instance to a stream that is serialize it
Reconstitute the ArrayList instance from a stream that is deserialize it
Returns a list iterator over the elements in this list in proper sequence starting at the specified position in the list
Returns a list iterator over the elements in this list in proper sequence
Returns an iterator over the elements in this list in proper sequence
Returns a view of the portion of this list between the specified code fromIndex inclusive and code toIndex exclusive
Returns a keyvalue mapping associated with the greatest key strictly less than the given key or code null if there is no such key
Returns the greatest key strictly less than the given key or code null if there is no such key
Returns a keyvalue mapping associated with the greatest key less than or equal to the given key or code null if there is no such key
Returns the greatest key less than or equal to the given key or code null if there is no such key
Returns a keyvalue mapping associated with the least key greater than or equal to the given key or code null if there is no such key
Returns the least key greater than or equal to the given key or code null if there is no such key
Returns a keyvalue mapping associated with the least key strictly greater than the given key or code null if there is no such key
Returns the least key strictly greater than the given key or code null if there is no such key
Returns a keyvalue mapping associated with the least key in this map or code null if the map is empty
Returns a keyvalue mapping associated with the greatest key in this map or code null if the map is empty
Removes and returns a keyvalue mapping associated with the least key in this map or code null if the map is empty
Removes and returns a keyvalue mapping associated with the greatest key in this map or code null if the map is empty
Returns a reverse order view of the mappings contained in this map
Returns a link NavigableSet view of the keys contained in this map
Returns a reverse order link NavigableSet view of the keys contained in this map
Returns a view of the portion of this map whose keys range from code fromKey to code toKey
Returns a view of the portion of this map whose keys are less than or equal to if code inclusive is true code toKey
Returns a view of the portion of this map whose keys are greater than or equal to if code inclusive is true code fromKey
inheritDoc Equivalent to code subMapfromKey true toKey false
inheritDoc Equivalent to code headMaptoKey false
inheritDoc Equivalent to code tailMapfromKey true
Returns an Enumeration of the keys contained in this ResourceBundle and its parent bundles
Returns a Set of the keys contained only in this ResourceBundle
Returns an array in which each item is a pair of objects in an Object array
We lazily load the lookup hashtable
Returns the set of flags which contains a duplicate flag
Compares its two arguments for order
Indicates whether some other object is quotequal toquot this comparator
Returns the number of keyvalue mappings in this map
Returns true if this map contains a mapping for the specified key
Returns true if this map maps one or more keys to the specified value
Returns the value to which the specified key is mapped or code null if this map contains no mapping for the key
NoSuchElementException inheritDoc
NoSuchElementException inheritDoc
Copies all of the mappings from the specified map to this map
Returns this map's entry for the given key or null if the map does not contain an entry for the key
Version of getEntry using comparator
Gets the entry corresponding to the specified key if no such entry exists returns the entry for the least key greater than the specified key if no such entry exists i
Gets the entry corresponding to the specified key if no such entry exists returns the entry for the greatest key less than the specified key if no such entry exists returns null
Gets the entry for the least key greater than the specified key if no such entry exists returns the entry for the least key greater than the specified key if no such entry exists returns null
Returns the entry for the greatest key less than the specified key if no such entry exists i
Associates the specified value with the specified key in this map
Removes the mapping for this key from this TreeMap if present
Removes all of the mappings from this map
Returns a shallow copy of this TreeMap instance




ClassCastException inheritDoc
ClassCastException inheritDoc
ClassCastException inheritDoc
ClassCastException inheritDoc
ClassCastException inheritDoc
ClassCastException inheritDoc
ClassCastException inheritDoc
ClassCastException inheritDoc
Returns a link Set view of the keys contained in this map


Returns a link Collection view of the values contained in this map
Returns a link Set view of the mappings contained in this map

ClassCastException inheritDoc
ClassCastException inheritDoc
ClassCastException inheritDoc
ClassCastException inheritDoc
ClassCastException inheritDoc
ClassCastException inheritDoc
Compares two keys using the correct comparison method for this TreeMap
Test two values for equality
Return SimpleImmutableEntry for entry or null if null
Return key for entry or null if null
Returns the key corresponding to the specified Entry
Returns the first Entry in the TreeMap according to the TreeMap's keysort function
Returns the last Entry in the TreeMap according to the TreeMap's keysort function
Returns the successor of the specified Entry or null if no such
Returns the predecessor of the specified Entry or null if no such
Balancing operations
From CLR
From CLR
From CLR
Delete node p and then rebalance the tree
From CLR
Save the state of the TreeMap instance to a stream i
Reconstitute the TreeMap instance from a stream i
Intended to be called only from TreeSet
Intended to be called only from TreeSet
Linear time tree building algorithm from sorted data
Recursive helper method that does the real work of the previous method
Find the level down to which to assign all nodes BLACK
Returns the absolute high fence for ascending traversal
Return the absolute low fence for descending traversal
Returns ascending iterator from the perspective of this submap
Returns descending iterator from the perspective of this submap
Returns the key
Returns the value associated with the key
Replaces the value currently associated with the key with the given value
Returns the absolute high fence for ascending traversal
Return the absolute low fence for descending traversal
Returns ascending iterator from the perspective of this submap
Returns descending iterator from the perspective of this submap
Returns the key
Returns the value associated with the key
Replaces the value currently associated with the key with the given value
Returns the absolute high fence for ascending traversal
Return the absolute low fence for descending traversal
Returns ascending iterator from the perspective of this submap
Returns descending iterator from the perspective of this submap
Returns the key
Returns the value associated with the key
Replaces the value currently associated with the key with the given value
Returns the element at the specified position in this list
Replaces the element at the specified position in this list with the specified element optional operation
Inserts the specified element at the specified position in this list optional operation
Removes the element at the specified position in this list optional operation
Inserts all of the elements in the specified collection into this list at the specified position optional operation
Returns an iterator over the elements in this list in proper sequence
Returns a list iterator over the elements in this list in proper sequence
Returns the precision
Gets parameter passed by constructor
Gets parameter passed by constructor
The action to be performed by this timer task
Cancels this timer task
Returns the scheduled execution time of the most recent actual execution of this task
Formats the object using the provided link Formatter formatter
The error method is called when a Handler failure occurs
Publish a LogRecord
Flush any buffered output
Close the Handler and free all associated resources
Set a Formatter
Return the Formatter for this Handler
Set the character encoding used by this Handler
Return the character encoding for this Handler
Set a Filter to control output on this Handler
Get the current Filter for this Handler
Define an ErrorManager for this Handler
Retrieves the ErrorManager for this Handler
Protected convenience method to report an error to this Handler's ErrorManager
Set the log level specifying which message levels will be logged by this Handler
Get the log level specifying which messages will be logged by this Handler
Check if this Handler would actually log a given LogRecord
Store a LogRecord in an internal buffer
Push any buffered output to the target Handler
Causes a flush on the target Handler
Close the Handler and free all associated resources
Set the pushLevel
Get the pushLevel
Check if this Handler would actually log a given LogRecord into its internal buffer
Check if a given log record should be published
Format the given message to XML
Return the header string for a set of XML formatted records
Return the tail string for a set of XML formatted records
Format the given log record and return the formatted string
Return the header string for a set of formatted records
Return the tail string for a set of formatted records
Localize and format the message string from a log record
Return the level's localization resource bundle name or null if no localization bundle is defined
Return the nonlocalized string name of the Level
Return the localized string name of the Level for the current default locale
the nonlocalized name of the Level for example INFO
Get the integer value for this level
Parse a level name string into a Level
Compare two objects for value equality
Generate a hashcode
Close this output stream
Format and publish a LogRecord
Change the output stream
Set or change the character encoding used by this Handler
Format and publish a LogRecord
Check if this Handler would actually log a given LogRecord
Flush any buffered messages
Close the current output stream
Format the given LogRecord
Return the global LogManager object
Adds an event listener to be invoked when the logging properties are reread
Removes an event listener for property change events
Add a named logger
Method to find a named logger
Get an enumeration of known logger names
Reinitialize the logging properties and reread the logging configuration
Reset the logging configuration
Reinitialize the logging properties and reread the logging configuration from the given stream which should be in java
Get the value of a logging property
Check that the current context is trusted to modify the logging configuration
Returns LoggingMXBean for managing loggers
Get the source Logger name's
Set the source Logger name
Get the localization resource bundle This is the ResourceBundle that should be used to localize the message string before formatting it
Set the localization resource bundle
Get the localization resource bundle name This is the name for the ResourceBundle that should be used to localize the message string before formatting it
Set the localization resource bundle name
Get the logging message level for example Level
Set the logging message level for example Level
Get the sequence number
Set the sequence number
Get the name of the class that allegedly issued the logging request
Set the name of the class that allegedly issued the logging request
Get the name of the method that allegedly issued the logging request
Set the name of the method that allegedly issued the logging request
Get the raw log message before localization or formatting
Set the raw log message before localization or formatting
Get the parameters to the log message
Set the parameters to the log message
Get an identifier for the thread where the message originated
Set an identifier for the thread where the message originated
Get event time in milliseconds since
Set event time
Get any throwable associated with the log record
Set a throwable associated with the log event
Default fields followed by a two byte version number major byte followed by minor byte followed by information on the log record parameter array
Format and publish a LogRecord
Close all the files
Find or create a logger for a named subsystem
Find or create a logger for a named subsystem
Create an anonymous Logger
Create an anonymous Logger
Retrieve the localization resource bundle for this logger for the current default locale
Retrieve the localization resource bundle name for this logger
Set a filter to control output on this Logger
Get the current filter for this Logger
Log a LogRecord
Log a message with no arguments
Log a message with one object parameter
Log a message with an array of object arguments
Log a message with associated Throwable information
Log a message specifying source class and method with no arguments
Log a message specifying source class and method with a single object parameter to the log message
Log a message specifying source class and method with an array of object arguments
Log a message specifying source class and method with associated Throwable information
Log a message specifying source class method and resource bundle name with no arguments
Log a message specifying source class method and resource bundle name with a single object parameter to the log message
Log a message specifying source class method and resource bundle name with an array of object arguments
Log a message specifying source class method and resource bundle name with associated Throwable information
Log a method entry
Log a method entry with one parameter
Log a method entry with an array of parameters
Log a method return
Log a method return with result object
Log throwing an exception
Log a SEVERE message
Log a WARNING message
Log an INFO message
Log a CONFIG message
Log a FINE message
Log a FINER message
Log a FINEST message
Set the log level specifying which message levels will be logged by this logger
Get the log Level that has been specified for this Logger
Check if a message of the given level would actually be logged by this logger
Get the name for this logger
Add a log Handler to receive logging messages
Remove a log Handler
Get the Handlers associated with this logger
Specify whether or not this logger should send its output to it's parent Logger
Discover whether or not this logger is sending its output to its parent logger
Return the parent for this Logger
Set the parent for this Logger
Returns the list of currently registered loggers
Gets the name of the log level associated with the specified logger
Sets the specified logger to the specified new level
Returns the name of the parent for the specified logger
Publish a LogRecord
Override StreamHandler
Returns the set of flags which contains an illegal combination
Inserts the specified element at the front of this deque if it is possible to do so immediately without violating capacity restrictions
Inserts the specified element at the end of this deque if it is possible to do so immediately without violating capacity restrictions
Inserts the specified element at the front of this deque unless it would violate capacity restrictions
Inserts the specified element at the end of this deque unless it would violate capacity restrictions
Retrieves and removes the first element of this deque
Retrieves and removes the last element of this deque
Retrieves and removes the first element of this deque or returns null if this deque is empty
Retrieves and removes the last element of this deque or returns null if this deque is empty
Retrieves but does not remove the first element of this deque
Retrieves but does not remove the last element of this deque
Retrieves but does not remove the first element of this deque or returns null if this deque is empty
Retrieves but does not remove the last element of this deque or returns null if this deque is empty
Removes the first occurrence of the specified element from this deque
Removes the last occurrence of the specified element from this deque
Inserts the specified element into the queue represented by this deque in other words at the tail of this deque if it is possible to do so immediately without violating capacity restrictions returning true upon success and throwing an IllegalStateException if no space is currently available
Inserts the specified element into the queue represented by this deque in other words at the tail of this deque if it is possible to do so immediately without violating capacity restrictions returning true upon success and false if no space is currently available
Retrieves and removes the head of the queue represented by this deque in other words the first element of this deque
Retrieves and removes the head of the queue represented by this deque in other words the first element of this deque or returns null if this deque is empty
Retrieves but does not remove the head of the queue represented by this deque in other words the first element of this deque
Retrieves but does not remove the head of the queue represented by this deque in other words the first element of this deque or returns null if this deque is empty
Pushes an element onto the stack represented by this deque in other words at the head of this deque if it is possible to do so immediately without violating capacity restrictions returning true upon success and throwing an IllegalStateException if no space is currently available
Pops an element from the stack represented by this deque
Removes the first occurrence of the specified element from this deque
Returns true if this deque contains the specified element
Returns the number of elements in this deque
Returns an iterator over the elements in this deque in proper sequence
Returns an iterator over the elements in this deque in reverse sequential order
Returns the number of entries distinct keys in this dictionary
Tests if this dictionary maps no keys to value
Returns an enumeration of the keys in this dictionary
Returns an enumeration of the values in this dictionary
Returns the value to which the key is mapped in this dictionary
Maps the specified key to the specified value in this dictionary
Removes the key and its corresponding value from this dictionary
Acquires the lock
Acquires the lock unless the current thread is linkplain Threadinterrupt interrupted
Acquires the lock only if it is free at the time of invocation
Acquires the lock if it is free within the given waiting time and the current thread has not been linkplain Threadinterrupt interrupted
Releases the lock
Returns a new link Condition instance that is bound to this code Lock instance
Causes the current thread to wait until it is signalled or linkplain Threadinterrupt interrupted
Causes the current thread to wait until it is signalled
Causes the current thread to wait until it is signalled or interrupted or the specified waiting time elapses
Causes the current thread to wait until it is signalled or interrupted or the specified waiting time elapses
Causes the current thread to wait until it is signalled or interrupted or the specified deadline elapses
Wakes up one waiting thread
Wakes up all waiting threads
Sets the thread that currently owns exclusive access
Returns the thread last set by setExclusiveOwnerThread or null if never set
Returns the lock used for reading
Returns the lock used for writing
Makes available the permit for the given thread if it was not already available
Disables the current thread for thread scheduling purposes unless the permit is available
Disables the current thread for thread scheduling purposes for up to the specified waiting time unless the permit is available
Disables the current thread for thread scheduling purposes until the specified deadline unless the permit is available
Returns the blocker object supplied to the most recent invocation of a park method that has not yet unblocked or null if not blocked
Disables the current thread for thread scheduling purposes unless the permit is available
Disables the current thread for thread scheduling purposes for up to the specified waiting time unless the permit is available
Disables the current thread for thread scheduling purposes until the specified deadline unless the permit is available
Returns the current value of synchronization state
Sets the value of synchronization state
Atomically sets synchronization state to the given updated value if the current state value equals the expected value
Inserts node into queue initializing if necessary
Creates and enqueues node for current thread and given mode
Sets head of queue to be node thus dequeuing
Wakes up node's successor if one exists
Release action for shared mode signal successor and ensure propagation
Sets head of queue and checks if successor may be waiting in shared mode if so propagating if either propagate or PROPAGATE status was set
Cancels an ongoing attempt to acquire
Checks and updates status for a node that failed to acquire
Convenience method to interrupt current thread
Convenience method to park and then check if interrupted
Acquires in exclusive uninterruptible mode for thread already in queue
Acquires in exclusive interruptible mode
Acquires in exclusive timed mode
Acquires in shared uninterruptible mode
Acquires in shared interruptible mode
Acquires in shared timed mode
Attempts to acquire in exclusive mode
Attempts to set the state to reflect a release in exclusive mode
Attempts to acquire in shared mode
Attempts to set the state to reflect a release in shared mode
Returns code true if synchronization is held exclusively with respect to the current calling thread
Acquires in exclusive mode ignoring interrupts
Acquires in exclusive mode aborting if interrupted
Attempts to acquire in exclusive mode aborting if interrupted and failing if the given timeout elapses
Releases in exclusive mode
Acquires in shared mode ignoring interrupts
Acquires in shared mode aborting if interrupted
Attempts to acquire in shared mode aborting if interrupted and failing if the given timeout elapses
Releases in shared mode
Queries whether any threads are waiting to acquire
Queries whether any threads have ever contended to acquire this synchronizer that is if an acquire method has ever blocked
Returns the first longestwaiting thread in the queue or code null if no threads are currently queued
Version of getFirstQueuedThread called when fastpath fails
Returns true if the given thread is currently queued
Returns code true if the apparent first queued thread if one exists is waiting in exclusive mode
Queries whether any threads have been waiting to acquire longer than the current thread
Returns an estimate of the number of threads waiting to acquire
Returns a collection containing threads that may be waiting to acquire
Returns a collection containing threads that may be waiting to acquire in exclusive mode
Returns a collection containing threads that may be waiting to acquire in shared mode
Returns a string identifying this synchronizer as well as its state
Returns true if a node always one that was initially placed on a condition queue is now waiting to reacquire on sync queue
Returns true if node is on sync queue by searching backwards from tail
Transfers a node from a condition queue onto sync queue
Transfers node if necessary to sync queue after a cancelled wait
Invokes release with current state value returns saved state
Queries whether the given ConditionObject uses this synchronizer as its lock
Queries whether any threads are waiting on the given condition associated with this synchronizer
Returns an estimate of the number of threads waiting on the given condition associated with this synchronizer
Returns a collection containing those threads that may be waiting on the given condition associated with this synchronizer
CAS head field
CAS tail field
CAS waitStatus field of a node
CAS next field of a node
Returns true if node is waiting in shared mode
Returns previous node or throws NullPointerException if null
Adds a new waiter to wait queue
Removes and transfers nodes until hit noncancelled one or null
Removes and transfers all nodes
Unlinks cancelled waiter nodes from condition queue
Moves the longestwaiting thread if one exists from the wait queue for this condition to the wait queue for the owning lock
Moves all threads from the wait queue for this condition to the wait queue for the owning lock
Implements uninterruptible condition wait
Checks for interrupt returning THROW_IE if interrupted before signalled REINTERRUPT if after signalled or if not interrupted
Throws InterruptedException reinterrupts current thread or does nothing depending on mode
Implements interruptible condition wait
Implements timed condition wait
Implements absolute timed condition wait
Implements timed condition wait
Returns true if this condition was created by the given synchronization object
Queries whether any threads are waiting on this condition
Returns an estimate of the number of threads waiting on this condition
Returns a collection containing those threads that may be waiting on this Condition
Returns true if node is waiting in shared mode
Returns previous node or throws NullPointerException if null
Adds a new waiter to wait queue
Removes and transfers nodes until hit noncancelled one or null
Removes and transfers all nodes
Unlinks cancelled waiter nodes from condition queue
Moves the longestwaiting thread if one exists from the wait queue for this condition to the wait queue for the owning lock
Moves all threads from the wait queue for this condition to the wait queue for the owning lock
Implements uninterruptible condition wait
Checks for interrupt returning THROW_IE if interrupted before signalled REINTERRUPT if after signalled or if not interrupted
Throws InterruptedException reinterrupts current thread or does nothing depending on mode
Implements interruptible condition wait
Implements timed condition wait
Implements absolute timed condition wait
Implements timed condition wait
Returns true if this condition was created by the given synchronization object
Queries whether any threads are waiting on this condition
Returns an estimate of the number of threads waiting on this condition
Returns a collection containing those threads that may be waiting on this Condition
Returns true if node is waiting in shared mode
Returns previous node or throws NullPointerException if null
Adds a new waiter to wait queue
Removes and transfers nodes until hit noncancelled one or null
Removes and transfers all nodes
Unlinks cancelled waiter nodes from condition queue
Moves the longestwaiting thread if one exists from the wait queue for this condition to the wait queue for the owning lock
Moves all threads from the wait queue for this condition to the wait queue for the owning lock
Implements uninterruptible condition wait
Checks for interrupt returning THROW_IE if interrupted before signalled REINTERRUPT if after signalled or if not interrupted
Throws InterruptedException reinterrupts current thread or does nothing depending on mode
Implements interruptible condition wait
Implements timed condition wait
Implements absolute timed condition wait
Implements timed condition wait
Returns true if this condition was created by the given synchronization object
Queries whether any threads are waiting on this condition
Returns an estimate of the number of threads waiting on this condition
Returns a collection containing those threads that may be waiting on this Condition
Returns code true if this lock has fairness set true
Returns the thread that currently owns the write lock or code null if not owned
Queries the number of read locks held for this lock
Queries if the write lock is held by any thread
Queries if the write lock is held by the current thread
Queries the number of reentrant write holds on this lock by the current thread
Queries the number of reentrant read holds on this lock by the current thread
Returns a collection containing threads that may be waiting to acquire the write lock
Returns a collection containing threads that may be waiting to acquire the read lock
Queries whether any threads are waiting to acquire the read or write lock
Queries whether the given thread is waiting to acquire either the read or write lock
Returns an estimate of the number of threads waiting to acquire either the read or write lock
Returns a collection containing threads that may be waiting to acquire either the read or write lock
Queries whether any threads are waiting on the given condition associated with the write lock
Returns an estimate of the number of threads waiting on the given condition associated with the write lock
Returns a collection containing those threads that may be waiting on the given condition associated with the write lock
Returns a string identifying this lock as well as its lock state
Returns the number of shared holds represented in count
Returns the number of exclusive holds represented in count
Returns true if the current thread when trying to acquire the read lock and otherwise eligible to do so should block because of policy for overtaking other waiting threads
Returns true if the current thread when trying to acquire the write lock and otherwise eligible to do so should block because of policy for overtaking other waiting threads
Full version of acquire for reads that handles CAS misses and reentrant reads not dealt with in tryAcquireShared
Performs tryLock for write enabling barging in both modes
Performs tryLock for read enabling barging in both modes
Reconstitute this lock instance from a stream
Decrement if positive return previous value
Acquires the read lock
Acquires the read lock unless the current thread is linkplain Threadinterrupt interrupted
Acquires the read lock only if the write lock is not held by another thread at the time of invocation
Acquires the read lock if the write lock is not held by another thread within the given waiting time and the current thread has not been linkplain Threadinterrupt interrupted
Attempts to release this lock
Throws code UnsupportedOperationException because code ReadLocks do not support conditions
Returns a string identifying this lock as well as its lock state
Acquires the write lock
Acquires the write lock unless the current thread is linkplain Threadinterrupt interrupted
Acquires the write lock only if it is not held by another thread at the time of invocation
Acquires the write lock if it is not held by another thread within the given waiting time and the current thread has not been linkplain Threadinterrupt interrupted
Attempts to release this lock
Returns a link Condition instance for use with this link Lock instance
Returns a string identifying this lock as well as its lock state
Queries if this write lock is held by the current thread
Queries the number of holds on this write lock by the current thread
Returns the number of shared holds represented in count
Returns the number of exclusive holds represented in count
Returns true if the current thread when trying to acquire the read lock and otherwise eligible to do so should block because of policy for overtaking other waiting threads
Returns true if the current thread when trying to acquire the write lock and otherwise eligible to do so should block because of policy for overtaking other waiting threads
Full version of acquire for reads that handles CAS misses and reentrant reads not dealt with in tryAcquireShared
Performs tryLock for write enabling barging in both modes
Performs tryLock for read enabling barging in both modes
Reconstitute this lock instance from a stream
Decrement if positive return previous value
Decrement if positive return previous value
Acquires the read lock
Acquires the read lock unless the current thread is linkplain Threadinterrupt interrupted
Acquires the read lock only if the write lock is not held by another thread at the time of invocation
Acquires the read lock if the write lock is not held by another thread within the given waiting time and the current thread has not been linkplain Threadinterrupt interrupted
Attempts to release this lock
Throws code UnsupportedOperationException because code ReadLocks do not support conditions
Returns a string identifying this lock as well as its lock state
Acquires the write lock
Acquires the write lock unless the current thread is linkplain Threadinterrupt interrupted
Acquires the write lock only if it is not held by another thread at the time of invocation
Acquires the write lock if it is not held by another thread within the given waiting time and the current thread has not been linkplain Threadinterrupt interrupted
Attempts to release this lock
Returns a link Condition instance for use with this link Lock instance
Returns a string identifying this lock as well as its lock state
Queries if this write lock is held by the current thread
Queries the number of holds on this write lock by the current thread
Returns the number of shared holds represented in count
Returns the number of exclusive holds represented in count
Returns true if the current thread when trying to acquire the read lock and otherwise eligible to do so should block because of policy for overtaking other waiting threads
Returns true if the current thread when trying to acquire the write lock and otherwise eligible to do so should block because of policy for overtaking other waiting threads
Full version of acquire for reads that handles CAS misses and reentrant reads not dealt with in tryAcquireShared
Performs tryLock for write enabling barging in both modes
Performs tryLock for read enabling barging in both modes
Reconstitute this lock instance from a stream
Decrement if positive return previous value
Decrement if positive return previous value
Decrement if positive return previous value
Acquires the read lock
Acquires the read lock unless the current thread is linkplain Threadinterrupt interrupted
Acquires the read lock only if the write lock is not held by another thread at the time of invocation
Acquires the read lock if the write lock is not held by another thread within the given waiting time and the current thread has not been linkplain Threadinterrupt interrupted
Attempts to release this lock
Throws code UnsupportedOperationException because code ReadLocks do not support conditions
Returns a string identifying this lock as well as its lock state
Acquires the write lock
Acquires the write lock unless the current thread is linkplain Threadinterrupt interrupted
Acquires the write lock only if it is not held by another thread at the time of invocation
Acquires the write lock if it is not held by another thread within the given waiting time and the current thread has not been linkplain Threadinterrupt interrupted
Attempts to release this lock
Returns a link Condition instance for use with this link Lock instance
Returns a string identifying this lock as well as its lock state
Queries if this write lock is held by the current thread
Queries the number of holds on this write lock by the current thread
Acquires the lock
Acquires the lock unless the current thread is linkplain Threadinterrupt interrupted
Acquires the lock only if it is not held by another thread at the time of invocation
Acquires the lock if it is not held by another thread within the given waiting time and the current thread has not been linkplain Threadinterrupt interrupted
Attempts to release this lock
Returns a link Condition instance for use with this link Lock instance
Queries the number of holds on this lock by the current thread
Queries if this lock is held by the current thread
Queries if this lock is held by any thread
Returns code true if this lock has fairness set true
Returns the thread that currently owns this lock or code null if not owned
Queries whether any threads are waiting to acquire this lock
Queries whether the given thread is waiting to acquire this lock
Returns an estimate of the number of threads waiting to acquire this lock
Returns a collection containing threads that may be waiting to acquire this lock
Queries whether any threads are waiting on the given condition associated with this lock
Returns an estimate of the number of threads waiting on the given condition associated with this lock
Returns a collection containing those threads that may be waiting on the given condition associated with this lock
Returns a string identifying this lock as well as its lock state
Performs link Locklock
Performs nonfair tryLock
Reconstitutes this lock instance from a stream
Performs lock
Fair version of tryAcquire
Performs link Locklock
Performs nonfair tryLock
Reconstitutes this lock instance from a stream
Performs lock
Fair version of tryAcquire
Performs link Locklock
Performs nonfair tryLock
Reconstitutes this lock instance from a stream
Performs lock
Fair version of tryAcquire
Returns the current value of synchronization state
Sets the value of synchronization state
Atomically sets synchronization state to the given updated value if the current state value equals the expected value
Inserts node into queue initializing if necessary
Creates and enqueues node for current thread and given mode
Sets head of queue to be node thus dequeuing
Wakes up node's successor if one exists
Release action for shared mode signal successor and ensure propagation
Sets head of queue and checks if successor may be waiting in shared mode if so propagating if either propagate or PROPAGATE status was set
Cancels an ongoing attempt to acquire
Checks and updates status for a node that failed to acquire
Convenience method to interrupt current thread
Convenience method to park and then check if interrupted
Acquires in exclusive uninterruptible mode for thread already in queue
Acquires in exclusive interruptible mode
Acquires in exclusive timed mode
Acquires in shared uninterruptible mode
Acquires in shared interruptible mode
Acquires in shared timed mode
Attempts to acquire in exclusive mode
Attempts to set the state to reflect a release in exclusive mode
Attempts to acquire in shared mode
Attempts to set the state to reflect a release in shared mode
Returns code true if synchronization is held exclusively with respect to the current calling thread
Acquires in exclusive mode ignoring interrupts
Acquires in exclusive mode aborting if interrupted
Attempts to acquire in exclusive mode aborting if interrupted and failing if the given timeout elapses
Releases in exclusive mode
Acquires in shared mode ignoring interrupts
Acquires in shared mode aborting if interrupted
Attempts to acquire in shared mode aborting if interrupted and failing if the given timeout elapses
Releases in shared mode
Queries whether any threads are waiting to acquire
Queries whether any threads have ever contended to acquire this synchronizer that is if an acquire method has ever blocked
Returns the first longestwaiting thread in the queue or code null if no threads are currently queued
Version of getFirstQueuedThread called when fastpath fails
Returns true if the given thread is currently queued
Returns code true if the apparent first queued thread if one exists is waiting in exclusive mode
Queries whether any threads have been waiting to acquire longer than the current thread
Returns an estimate of the number of threads waiting to acquire
Returns a collection containing threads that may be waiting to acquire
Returns a collection containing threads that may be waiting to acquire in exclusive mode
Returns a collection containing threads that may be waiting to acquire in shared mode
Returns a string identifying this synchronizer as well as its state
Returns true if a node always one that was initially placed on a condition queue is now waiting to reacquire on sync queue
Returns true if node is on sync queue by searching backwards from tail
Transfers a node from a condition queue onto sync queue
Transfers node if necessary to sync queue after a cancelled wait
Invokes release with current state value returns saved state
Queries whether the given ConditionObject uses this synchronizer as its lock
Queries whether any threads are waiting on the given condition associated with this synchronizer
Returns an estimate of the number of threads waiting on the given condition associated with this synchronizer
Returns a collection containing those threads that may be waiting on the given condition associated with this synchronizer
CAS head field
CAS tail field
CAS waitStatus field of a node
CAS next field of a node
Returns true if node is waiting in shared mode
Returns previous node or throws NullPointerException if null
Adds a new waiter to wait queue
Removes and transfers nodes until hit noncancelled one or null
Removes and transfers all nodes
Unlinks cancelled waiter nodes from condition queue
Moves the longestwaiting thread if one exists from the wait queue for this condition to the wait queue for the owning lock
Moves all threads from the wait queue for this condition to the wait queue for the owning lock
Implements uninterruptible condition wait
Checks for interrupt returning THROW_IE if interrupted before signalled REINTERRUPT if after signalled or if not interrupted
Throws InterruptedException reinterrupts current thread or does nothing depending on mode
Implements interruptible condition wait
Implements timed condition wait
Implements absolute timed condition wait
Implements timed condition wait
Returns true if this condition was created by the given synchronization object
Queries whether any threads are waiting on this condition
Returns an estimate of the number of threads waiting on this condition
Returns a collection containing those threads that may be waiting on this Condition
Returns true if node is waiting in shared mode
Returns previous node or throws NullPointerException if null
Adds a new waiter to wait queue
Removes and transfers nodes until hit noncancelled one or null
Removes and transfers all nodes
Unlinks cancelled waiter nodes from condition queue
Moves the longestwaiting thread if one exists from the wait queue for this condition to the wait queue for the owning lock
Moves all threads from the wait queue for this condition to the wait queue for the owning lock
Implements uninterruptible condition wait
Checks for interrupt returning THROW_IE if interrupted before signalled REINTERRUPT if after signalled or if not interrupted
Throws InterruptedException reinterrupts current thread or does nothing depending on mode
Implements interruptible condition wait
Implements timed condition wait
Implements absolute timed condition wait
Implements timed condition wait
Returns true if this condition was created by the given synchronization object
Queries whether any threads are waiting on this condition
Returns an estimate of the number of threads waiting on this condition
Returns a collection containing those threads that may be waiting on this Condition
Returns true if node is waiting in shared mode
Returns previous node or throws NullPointerException if null
Adds a new waiter to wait queue
Removes and transfers nodes until hit noncancelled one or null
Removes and transfers all nodes
Unlinks cancelled waiter nodes from condition queue
Moves the longestwaiting thread if one exists from the wait queue for this condition to the wait queue for the owning lock
Moves all threads from the wait queue for this condition to the wait queue for the owning lock
Implements uninterruptible condition wait
Checks for interrupt returning THROW_IE if interrupted before signalled REINTERRUPT if after signalled or if not interrupted
Throws InterruptedException reinterrupts current thread or does nothing depending on mode
Implements interruptible condition wait
Implements timed condition wait
Implements absolute timed condition wait
Implements timed condition wait
Returns true if this condition was created by the given synchronization object
Queries whether any threads are waiting on this condition
Returns an estimate of the number of threads waiting on this condition
Returns a collection containing those threads that may be waiting on this Condition
Returns a RunnableFuture for the given runnable and default value
Returns a RunnableFuture for the given callable task
the main mechanics of invokeAny
Initiates an orderly shutdown in which previously submitted tasks are executed but no new tasks will be accepted
Attempts to stop all actively executing tasks halts the processing of waiting tasks and returns a list of the tasks that were awaiting execution
Returns true if this executor has been shut down
Returns true if all tasks have completed following shut down
Blocks until all tasks have completed execution after a shutdown request or the timeout occurs or the current thread is interrupted whichever happens first
Submits a valuereturning task for execution and returns a Future representing the pending results of the task
Submits a Runnable task for execution and returns a Future representing that task
Submits a Runnable task for execution and returns a Future representing that task
Executes the given tasks returning a list of Futures holding their status and results when all complete
Executes the given tasks returning a list of Futures holding their status and results when all complete or the timeout expires whichever happens first
Executes the given tasks returning the result of one that has completed successfully i
Executes the given tasks returning the result of one that has completed successfully i
Inserts the specified element into this delay queue
Inserts the specified element into this delay queue
Inserts the specified element into this delay queue
Inserts the specified element into this delay queue
Retrieves and removes the head of this queue or returns null if this queue has no elements with an expired delay
Retrieves and removes the head of this queue waiting if necessary until an element with an expired delay is available on this queue
Retrieves and removes the head of this queue waiting if necessary until an element with an expired delay is available on this queue or the specified wait time expires
Retrieves but does not remove the head of this queue or returns null if this queue is empty
UnsupportedOperationException inheritDoc
UnsupportedOperationException inheritDoc
Atomically removes all of the elements from this delay queue
Always returns Integer
Returns an array containing all of the elements in this queue
Returns an array containing all of the elements in this queue the runtime type of the returned array is that of the specified array
Removes a single instance of the specified element from this queue if it is present whether or not it has expired
Returns an iterator over all the elements both expired and unexpired in this queue
Updates state on barrier trip and wakes up everyone
Sets current barrier generation as broken and wakes up everyone
Main barrier code covering the various policies
Returns the number of parties required to trip this barrier
Waits until all linkplain getParties parties have invoked await on this barrier
Waits until all linkplain getParties parties have invoked await on this barrier or the specified waiting time elapses
Queries if this barrier is in a broken state
Resets the barrier to its initial state
Returns the number of parties currently waiting at the barrier
Circularly increment i
Inserts element at current put position advances and signals
Extracts element at current take position advances and signals
Utility for remove and iterator
Inserts the specified element at the tail of this queue if it is possible to do so immediately without exceeding the queue's capacity returning true upon success and throwing an IllegalStateException if this queue is full
Inserts the specified element at the tail of this queue if it is possible to do so immediately without exceeding the queue's capacity returning true upon success and false if this queue is full
Inserts the specified element at the tail of this queue waiting for space to become available if the queue is full
Inserts the specified element at the tail of this queue waiting up to the specified wait time for space to become available if the queue is full
Returns the number of elements in this queue
Returns the number of additional elements that this queue can ideally in the absence of memory or resource constraints accept without blocking
Removes a single instance of the specified element from this queue if it is present
Returns true if this queue contains the specified element
Returns an array containing all of the elements in this queue in proper sequence
Returns an array containing all of the elements in this queue in proper sequence the runtime type of the returned array is that of the specified array
Atomically removes all of the elements from this queue
UnsupportedOperationException inheritDoc
UnsupportedOperationException inheritDoc
Returns an iterator over the elements in this queue in proper sequence
Checks whether nextIndex is valid if so setting nextItem
Checks whether nextIndex is valid if so setting nextItem
Checks whether nextIndex is valid if so setting nextItem
Adds the specified element to this queue waiting if necessary for another thread to receive it
Inserts the specified element into this queue waiting if necessary up to the specified wait time for another thread to receive it
Inserts the specified element into this queue if another thread is waiting to receive it
Retrieves and removes the head of this queue waiting if necessary for another thread to insert it
Retrieves and removes the head of this queue waiting if necessary up to the specified wait time for another thread to insert it
Retrieves and removes the head of this queue if another thread is currently making an element available
Always returns true
Always returns zero
Always returns zero
Does nothing
Always returns false
Always returns false
Returns false unless the given collection is empty
Always returns false
Always returns false
Always returns null
Returns an empty iterator in which hasNext always returns false
Returns a zerolength array
Sets the zeroeth element of the specified array to null if the array has nonzero length and returns it
UnsupportedOperationException inheritDoc
UnsupportedOperationException inheritDoc
Save the state to a stream that is serialize it
Performs a put or take
Return true if m has fulfilling bit set
Creates or resets fields of a node
Puts or takes an item
Spinsblocks until node s is matched by a fulfill operation
Returns true if node s is at head or there is an active fulfiller
Unlinks s from the stack
Tries to match node s to this node if so waking up thread
Tries to cancel a wait by matching node to itself
Tries to cas nh as new head if successful unlink old head's next node to avoid garbage retention
Tries to cas nt as new tail
Tries to CAS cleanMe slot
Puts or takes an item
Spinsblocks until node s is fulfilled
Gets rid of cancelled node s with original predecessor pred
Tries to cancel by CAS'ing ref to this as item
Returns true if this node is known to be off the queue because its next pointer has been forgotten due to an advanceHead operation
Performs a put or take
Return true if m has fulfilling bit set
Creates or resets fields of a node
Puts or takes an item
Spinsblocks until node s is matched by a fulfill operation
Returns true if node s is at head or there is an active fulfiller
Unlinks s from the stack
Tries to match node s to this node if so waking up thread
Tries to cancel a wait by matching node to itself
Tries to match node s to this node if so waking up thread
Tries to cancel a wait by matching node to itself
Tries to cas nh as new head if successful unlink old head's next node to avoid garbage retention
Tries to cas nt as new tail
Tries to CAS cleanMe slot
Puts or takes an item
Spinsblocks until node s is fulfilled
Gets rid of cancelled node s with original predecessor pred
Tries to cancel by CAS'ing ref to this as item
Returns true if this node is known to be off the queue because its next pointer has been forgotten due to an advanceHead operation
Tries to cancel by CAS'ing ref to this as item
Returns true if this node is known to be off the queue because its next pointer has been forgotten due to an advanceHead operation
Performs a put or take
Return true if m has fulfilling bit set
Creates or resets fields of a node
Puts or takes an item
Spinsblocks until node s is matched by a fulfill operation
Returns true if node s is at head or there is an active fulfiller
Unlinks s from the stack
Tries to match node s to this node if so waking up thread
Tries to cancel a wait by matching node to itself
Tries to match node s to this node if so waking up thread
Tries to cancel a wait by matching node to itself
Tries to match node s to this node if so waking up thread
Tries to cancel a wait by matching node to itself
Tries to cas nh as new head if successful unlink old head's next node to avoid garbage retention
Tries to cas nt as new tail
Tries to CAS cleanMe slot
Puts or takes an item
Spinsblocks until node s is fulfilled
Gets rid of cancelled node s with original predecessor pred
Tries to cancel by CAS'ing ref to this as item
Returns true if this node is known to be off the queue because its next pointer has been forgotten due to an advanceHead operation
Tries to cancel by CAS'ing ref to this as item
Returns true if this node is known to be off the queue because its next pointer has been forgotten due to an advanceHead operation
Tries to cancel by CAS'ing ref to this as item
Returns true if this node is known to be off the queue because its next pointer has been forgotten due to an advanceHead operation
Returns the number of elements in this set
Returns true if this set contains no elements
Returns true if this set contains the specified element
Returns an array containing all of the elements in this set
Returns an array containing all of the elements in this set the runtime type of the returned array is that of the specified array
Removes all of the elements from this set
Removes the specified element from this set if it is present
Adds the specified element to this set if it is not already present
Returns true if this set contains all of the elements of the specified collection
Adds all of the elements in the specified collection to this set if they're not already present
Removes from this set all of its elements that are contained in the specified collection
Retains only the elements in this set that are contained in the specified collection
Returns an iterator over the elements contained in this set in the order in which these elements were added
Compares the specified object with this set for equality
Test for equality coping with nulls
Submits a valuereturning task for execution and returns a Future representing the pending results of the task
Submits a Runnable task for execution and returns a Future representing that task
Retrieves and removes the Future representing the next completed task waiting if none are yet present
Retrieves and removes the Future representing the next completed task or null if none are present
Retrieves and removes the Future representing the next completed task waiting if necessary up to the specified wait time if none are yet present
Gets the current value
Sets to the given value
Eventually sets to the given value
Atomically sets the value to the given updated value if the current value code the expected value
Atomically sets the value to the given updated value if the current value code the expected value
Atomically sets to the given value and returns the old value
Returns the String representation of the current value
Returns the length of the array
Gets the current value at position code i
Sets the element at position code i to the given value
Eventually sets the element at position code i to the given value
Atomically sets the element at position code i to the given value and returns the old value
Atomically sets the element at position code i to the given updated value if the current value code the expected value
Atomically sets the element at position code i to the given updated value if the current value code the expected value
Returns the String representation of the current values of array
Reconstitutes the instance from a stream that is deserializes it
Returns the length of the array
Gets the current value at position code i
Sets the element at position code i to the given value
Eventually sets the element at position code i to the given value
Atomically sets the element at position code i to the given value and returns the old value
Atomically sets the element at position code i to the given updated value if the current value code the expected value
Atomically sets the element at position code i to the given updated value if the current value code the expected value
Atomically increments by one the element at index code i
Atomically decrements by one the element at index code i
Atomically adds the given value to the element at index code i
Atomically increments by one the element at index code i
Atomically decrements by one the element at index code i
Atomically adds the given value to the element at index code i
Returns the String representation of the current values of array
Returns the length of the array
Gets the current value at position code i
Sets the element at position code i to the given value
Eventually sets the element at position code i to the given value
Atomically sets the element at position code i to the given value and returns the old value
Atomically sets the value to the given updated value if the current value code the expected value
Atomically sets the value to the given updated value if the current value code the expected value
Atomically increments by one the element at index code i
Atomically decrements by one the element at index code i
Atomically adds the given value to the element at index code i
Atomically increments by one the element at index code i
Atomically decrements by one the element at index code i
Atomically adds the given value to the element at index code i
Returns the String representation of the current values of array
Creates and returns an updater for objects with the given field
Atomically sets the field of the given object managed by this updater to the given updated value if the current value code the expected value
Atomically sets the field of the given object managed by this updater to the given updated value if the current value code the expected value
Sets the field of the given object managed by this updater to the given updated value
Eventually sets the field of the given object managed by this updater to the given updated value
Gets the current value held in the field of the given object managed by this updater
Atomically sets the field of the given object managed by this updater to the given value and returns the old value
Atomically increments by one the current value of the field of the given object managed by this updater
Atomically decrements by one the current value of the field of the given object managed by this updater
Atomically adds the given value to the current value of the field of the given object managed by this updater
Atomically increments by one the current value of the field of the given object managed by this updater
Atomically decrements by one the current value of the field of the given object managed by this updater
Atomically adds the given value to the current value of the field of the given object managed by this updater
Creates and returns an updater for objects with the given field
Atomically sets the field of the given object managed by this updater to the given updated value if the current value code the expected value
Atomically sets the field of the given object managed by this updater to the given updated value if the current value code the expected value
Sets the field of the given object managed by this updater to the given updated value
Eventually sets the field of the given object managed by this updater to the given updated value
Gets the current value held in the field of the given object managed by this updater
Atomically sets the field of the given object managed by this updater to the given value and returns the old value
Atomically increments by one the current value of the field of the given object managed by this updater
Atomically decrements by one the current value of the field of the given object managed by this updater
Atomically adds the given value to the current value of the field of the given object managed by this updater
Atomically increments by one the current value of the field of the given object managed by this updater
Atomically decrements by one the current value of the field of the given object managed by this updater
Atomically adds the given value to the current value of the field of the given object managed by this updater
Creates and returns an updater for objects with the given field
Atomically sets the field of the given object managed by this updater to the given updated value if the current value code the expected value
Atomically sets the field of the given object managed by this updater to the given updated value if the current value code the expected value
Sets the field of the given object managed by this updater to the given updated value
Eventually sets the field of the given object managed by this updater to the given updated value
Gets the current value held in the field of the given object managed by this updater
Atomically sets the field of the given object managed by this updater to the given value and returns the old value
Returns the current value of the reference
Returns the current value of the mark
Returns the current values of both the reference and the mark
Atomically sets the value of both the reference and mark to the given update values if the current reference is code to the expected reference and the current mark is equal to the expected mark
Atomically sets the value of both the reference and mark to the given update values if the current reference is code to the expected reference and the current mark is equal to the expected mark
Unconditionally sets the value of both the reference and mark
Atomically sets the value of the mark to the given update value if the current reference is code to the expected reference
Returns the current value
Atomically sets the value to the given updated value if the current value code the expected value
Atomically sets the value to the given updated value if the current value code the expected value
Unconditionally sets to the given value
Eventually sets to the given value
Atomically sets to the given value and returns the previous value
Returns the String representation of the current value
Gets the current value
Sets to the given value
Eventually sets to the given value
Atomically sets to the given value and returns the old value
Atomically sets the value to the given updated value if the current value code the expected value
Atomically sets the value to the given updated value if the current value code the expected value
Atomically increments by one the current value
Atomically decrements by one the current value
Atomically adds the given value to the current value
Atomically increments by one the current value
Atomically decrements by one the current value
Atomically adds the given value to the current value
Returns the String representation of the current value
Returns the current value of the reference
Returns the current value of the stamp
Returns the current values of both the reference and the stamp
Atomically sets the value of both the reference and stamp to the given update values if the current reference is code to the expected reference and the current stamp is equal to the expected stamp
Atomically sets the value of both the reference and stamp to the given update values if the current reference is code to the expected reference and the current stamp is equal to the expected stamp
Unconditionally sets the value of both the reference and stamp
Atomically sets the value of the stamp to the given update value if the current reference is code to the expected reference
Returns whether underlying JVM supports lockless CompareAndSet for longs
Gets the current value
Sets to the given value
Eventually sets to the given value
Atomically sets to the given value and returns the old value
Atomically sets the value to the given updated value if the current value code the expected value
Atomically sets the value to the given updated value if the current value code the expected value
Atomically increments by one the current value
Atomically decrements by one the current value
Atomically adds the given value to the current value
Atomically increments by one the current value
Atomically decrements by one the current value
Atomically adds the given value to the current value
Returns the String representation of the current value
Computes a result or throws an exception if unable to do so
Links e as first element or returns false if full
Links e as last element or returns false if full
Removes and returns first element or null if empty
Removes and returns last element or null if empty
Unlink e
IllegalStateException inheritDoc
IllegalStateException inheritDoc
NullPointerException inheritDoc
NullPointerException inheritDoc
NullPointerException inheritDoc
NullPointerException inheritDoc
NullPointerException inheritDoc
NullPointerException inheritDoc
NoSuchElementException inheritDoc
NoSuchElementException inheritDoc
NoSuchElementException inheritDoc
NoSuchElementException inheritDoc
Inserts the specified element at the end of this deque unless it would violate capacity restrictions
NullPointerException if the specified element is null
NullPointerException inheritDoc
NullPointerException inheritDoc
Retrieves and removes the head of the queue represented by this deque
Retrieves but does not remove the head of the queue represented by this deque
Returns the number of additional elements that this deque can ideally in the absence of memory or resource constraints accept without blocking
UnsupportedOperationException inheritDoc
UnsupportedOperationException inheritDoc
IllegalStateException inheritDoc
NoSuchElementException inheritDoc
Removes the first occurrence of the specified element from this deque
Returns the number of elements in this deque
Returns true if this deque contains the specified element
Variant of removeFirstOccurrence needed by iterator
Returns an array containing all of the elements in this deque in proper sequence from first to last element
Returns an array containing all of the elements in this deque in proper sequence the runtime type of the returned array is that of the specified array
Atomically removes all of the elements from this deque
Returns an iterator over the elements in this deque in proper sequence
Returns an iterator over the elements in this deque in reverse sequential order
Save the state of this deque to a stream that is serialize it
Reconstitute this deque from a stream that is deserialize it
Advances next or if not yet initialized sets to first node
Advances next or if not yet initialized sets to first node
Advances next or if not yet initialized sets to first node
Returns a shallow copy of this ConcurrentSkipListSet instance
Returns the number of elements in this set
Returns true if this set contains no elements
Returns true if this set contains the specified element
Adds the specified element to this set if it is not already present
Removes the specified element from this set if it is present
Removes all of the elements from this set
Returns an iterator over the elements in this set in ascending order
Returns an iterator over the elements in this set in descending order
Compares the specified object with this set for equality
Removes from this set all of its elements that are contained in the specified collection
ClassCastException inheritDoc
ClassCastException inheritDoc
ClassCastException inheritDoc
ClassCastException inheritDoc
NoSuchElementException inheritDoc
NoSuchElementException inheritDoc
ClassCastException inheritDoc
ClassCastException inheritDoc
ClassCastException inheritDoc
ClassCastException inheritDoc
ClassCastException inheritDoc
ClassCastException inheritDoc
Returns a reverse order view of the elements contained in this set
ClassCastException inheritDoc
ClassCastException inheritDoc
ClassCastException inheritDoc
ClassCastException inheritDoc
ClassCastException inheritDoc
ClassCastException inheritDoc
Returns a reverse order view of the mappings contained in this map
Returns a link NavigableSet view of the keys contained in this map
Returns a link NavigableSet view of the keys contained in this map
Returns a reverse order link NavigableSet view of the keys contained in this map
If the specified key is not already associated with a value associate it with the given value
Removes the entry for a key only if currently mapped to a given value
Replaces the entry for a key only if currently mapped to a given value
Replaces the entry for a key only if currently mapped to some value
Sets this Future to the result of its computation unless it has been cancelled
Initializes or resets state
compareAndSet head node
If using comparator return a ComparableUsingComparator else cast key as Comparable which may cause ClassCastException which is propagated back to caller
Compares using comparator or natural ordering
Returns true if given key greater than or equal to least and strictly less than fence bypassing either test if least or fence are null
Returns true if given key greater than or equal to least and less or equal to fence
Returns a baselevel node with key strictly less than given key or the baselevel header if there is no such node
Returns node holding key or null if no such clearing out any deleted nodes seen along the way
Specialized variant of findNode to perform Map
Performs map
Main insertion method
Returns a random level for inserting a new node
Creates and adds index nodes for the given node
Adds given index nodes from given level down to
Main deletion method
Possibly reduce head level if it has no nodes
Specialized variant of findNode to get first valid node
Removes first entry returns its snapshot
Clears out index nodes associated with deleted first entry
Specialized version of find to get last valid node
Specialized variant of findPredecessor to get predecessor of last valid node
Removes last entry returns its snapshot
Utility for ceiling floor lower higher methods
Returns SimpleImmutableEntry for results of findNear
Returns a shallow copy of this ConcurrentSkipListMap instance
Streamlined bulk insertion to initialize from elements of given sorted map
Save the state of this map to a stream
Reconstitute the map from a stream
Returns true if this map contains a mapping for the specified key
Returns the value to which the specified key is mapped or code null if this map contains no mapping for the key
Associates the specified value with the specified key in this map
Removes the mapping for the specified key from this map if present
Returns true if this map maps one or more keys to the specified value
Returns the number of keyvalue mappings in this map
Returns true if this map contains no keyvalue mappings
Removes all of the mappings from this map
Returns a link NavigableSet view of the keys contained in this map
Returns a link Collection view of the values contained in this map
Returns a link Set view of the mappings contained in this map
Compares the specified object with this map for equality
inheritDoc
inheritDoc
inheritDoc
inheritDoc
NoSuchElementException inheritDoc
NoSuchElementException inheritDoc
ClassCastException inheritDoc
ClassCastException inheritDoc
ClassCastException inheritDoc
ClassCastException inheritDoc
ClassCastException inheritDoc
ClassCastException inheritDoc
Returns a keyvalue mapping associated with the greatest key strictly less than the given key or null if there is no such key
ClassCastException inheritDoc
Returns a keyvalue mapping associated with the greatest key less than or equal to the given key or null if there is no such key
key the key
Returns a keyvalue mapping associated with the least key greater than or equal to the given key or null if there is no such entry
ClassCastException inheritDoc
Returns a keyvalue mapping associated with the least key strictly greater than the given key or null if there is no such key
key the key
Returns a keyvalue mapping associated with the least key in this map or null if the map is empty
Returns a keyvalue mapping associated with the greatest key in this map or null if the map is empty
Removes and returns a keyvalue mapping associated with the least key in this map or null if the map is empty
Removes and returns a keyvalue mapping associated with the greatest key in this map or null if the map is empty
compareAndSet value field
compareAndSet next field
Returns true if this node is a marker
Returns true if this node is the header of baselevel list
Tries to append a deletion marker to this node
Helps out a deletion by appending marker or unlinking from predecessor
Returns value if this node contains a valid keyvalue pair else null
Creates and returns a new SimpleImmutableEntry holding current mapping if this node holds a valid value else null
compareAndSet right field
Returns true if the node this indexes has been deleted
Tries to CAS newSucc as successor
Tries to CAS right field to skip over apparent successor succ
Advances next to higher entry
Returns true if node key is less than upper bound of range
Returns lowest node
Returns highest node
Returns lowest absolute key ignoring directonality
Returns highest absolute key ignoring directonality
Submap version of ConcurrentSkipListMap
Utility to create submaps where given bounds override unboundednull ones andor are checked against bounded ones
compareAndSet value field
compareAndSet next field
Returns true if this node is a marker
Returns true if this node is the header of baselevel list
Tries to append a deletion marker to this node
Helps out a deletion by appending marker or unlinking from predecessor
Returns value if this node contains a valid keyvalue pair else null
Creates and returns a new SimpleImmutableEntry holding current mapping if this node holds a valid value else null
compareAndSet right field
Returns true if the node this indexes has been deleted
Tries to CAS newSucc as successor
Tries to CAS right field to skip over apparent successor succ
Advances next to higher entry
Returns true if node key is less than upper bound of range
Returns lowest node
Returns highest node
Returns lowest absolute key ignoring directonality
Returns highest absolute key ignoring directonality
Submap version of ConcurrentSkipListMap
Utility to create submaps where given bounds override unboundednull ones andor are checked against bounded ones
compareAndSet value field
compareAndSet next field
Returns true if this node is a marker
Returns true if this node is the header of baselevel list
Tries to append a deletion marker to this node
Helps out a deletion by appending marker or unlinking from predecessor
Returns value if this node contains a valid keyvalue pair else null
Creates and returns a new SimpleImmutableEntry holding current mapping if this node holds a valid value else null
compareAndSet right field
Returns true if the node this indexes has been deleted
Tries to CAS newSucc as successor
Tries to CAS right field to skip over apparent successor succ
Advances next to higher entry
Returns true if node key is less than upper bound of range
Returns lowest node
Returns highest node
Returns lowest absolute key ignoring directonality
Returns highest absolute key ignoring directonality
Submap version of ConcurrentSkipListMap
Utility to create submaps where given bounds override unboundednull ones andor are checked against bounded ones
Scale d by m checking for overflow
Convert the given time duration in the given unit to this unit
Equivalent to NANOSECONDS
Equivalent to MICROSECONDS
Equivalent to MILLISECONDS
Equivalent to SECONDS
Equivalent to MINUTES
Equivalent to HOURS
Equivalent to DAYS
Utility to compute the excessnanosecond argument to wait sleep join
Performs a timed Object
Performs a timed Thread
Performs a Thread
Attempt to CASincrement the workerCount field of ctl
Attempt to CASdecrement the workerCount field of ctl
Decrements the workerCount field of ctl
Transitions runState to given target or leaves it alone if already at least the given target
Transitions to TERMINATED state if either SHUTDOWN and pool and queue empty or STOP and pool empty
If there is a security manager makes sure caller has permission to shut down threads in general see shutdownPerm
Interrupts all threads even if active
Interrupts threads that might be waiting for tasks as indicated by not being locked so they can check for termination or configuration changes
Common form of interruptIdleWorkers to avoid having to remember what the boolean argument means
Ensures that unless the pool is stopping the current thread does not have its interrupt set
Invokes the rejected execution handler for the given command
Performs any further cleanup following run state transition on invocation of shutdown
State check needed by ScheduledThreadPoolExecutor to enable running tasks during shutdown
Drains the task queue into a new list normally using drainTo
Checks if a new worker can be added with respect to current pool state and the given bound either core or maximum
Performs cleanup and bookkeeping for a dying worker
Performs blocking or timed wait for a task depending on current configuration settings or returns null if this worker must exit because of any of
Main worker run loop
Executes the given task sometime in the future
Initiates an orderly shutdown in which previously submitted tasks are executed but no new tasks will be accepted
Attempts to stop all actively executing tasks halts the processing of waiting tasks and returns a list of the tasks that were awaiting execution
Returns true if this executor is in the process of terminating after link shutdown or link shutdownNow but has not completely terminated
Invokes code shutdown when this executor is no longer referenced and it has no threads
Sets the thread factory used to create new threads
Returns the thread factory used to create new threads
Sets a new handler for unexecutable tasks
Returns the current handler for unexecutable tasks
Sets the core number of threads
Returns the core number of threads
Starts a core thread causing it to idly wait for work
Starts all core threads causing them to idly wait for work
Returns true if this pool allows core threads to time out and terminate if no tasks arrive within the keepAlive time being replaced if needed when new tasks arrive
Sets the policy governing whether core threads may time out and terminate if no tasks arrive within the keepalive time being replaced if needed when new tasks arrive
Sets the maximum allowed number of threads
Returns the maximum allowed number of threads
Sets the time limit for which threads may remain idle before being terminated
Returns the thread keepalive time which is the amount of time that threads in excess of the core pool size may remain idle before being terminated
Returns the task queue used by this executor
Removes this task from the executor's internal queue if it is present thus causing it not to be run if it has not already started
Tries to remove from the work queue all link Future tasks that have been cancelled
Returns the current number of threads in the pool
Returns the approximate number of threads that are actively executing tasks
Returns the largest number of threads that have ever simultaneously been in the pool
Returns the approximate total number of tasks that have ever been scheduled for execution
Returns the approximate total number of tasks that have completed execution
Method invoked prior to executing the given Runnable in the given thread
Method invoked upon completion of execution of the given Runnable
Method invoked when the Executor has terminated
Delegates main run loop to outer runWorker
Executes task r in the caller's thread unless the executor has been shut down in which case the task is discarded
Always throws RejectedExecutionException
Does nothing which has the effect of discarding task r
Obtains and ignores the next task that the executor would otherwise execute if one is immediately available and then retries execution of task r unless the executor is shut down in which case task r is instead discarded
Delegates main run loop to outer runWorker
Executes task r in the caller's thread unless the executor has been shut down in which case the task is discarded
Always throws RejectedExecutionException
Does nothing which has the effect of discarding task r
Obtains and ignores the next task that the executor would otherwise execute if one is immediately available and then retries execution of task r unless the executor is shut down in which case task r is instead discarded
Delegates main run loop to outer runWorker
Executes task r in the caller's thread unless the executor has been shut down in which case the task is discarded
Always throws RejectedExecutionException
Does nothing which has the effect of discarding task r
Obtains and ignores the next task that the executor would otherwise execute if one is immediately available and then retries execution of task r unless the executor is shut down in which case task r is instead discarded
Returns true if this is a periodic task
Returns the remaining delay associated with this object in the given time unit
Gets the array
Sets the array
Returns the number of elements in this list
Returns true if this list contains no elements
Test for equality coping with nulls
static version of indexOf to allow repeated calls without needing to reacquire array each time
static version of lastIndexOf
Returns true if this list contains the specified element
inheritDoc
Returns the index of the first occurrence of the specified element in this list searching forwards from index or returns if the element is not found
inheritDoc
Returns the index of the last occurrence of the specified element in this list searching backwards from index or returns if the element is not found
Returns a shallow copy of this list
Returns an array containing all of the elements in this list in proper sequence from first to last element
Returns an array containing all of the elements in this list in proper sequence from first to last element the runtime type of the returned array is that of the specified array
inheritDoc
Replaces the element at the specified position in this list with the specified element
Appends the specified element to the end of this list
Inserts the specified element at the specified position in this list
Removes the element at the specified position in this list
Removes the first occurrence of the specified element from this list if it is present
Removes from this list all of the elements whose index is between fromIndex inclusive and toIndex exclusive
Append the element if not present
Returns true if this list contains all of the elements of the specified collection
Removes from this list all of its elements that are contained in the specified collection
Retains only the elements in this list that are contained in the specified collection
Appends all of the elements in the specified collection that are not already contained in this list to the end of this list in the order that they are returned by the specified collection's iterator
Removes all of the elements from this list
Appends all of the elements in the specified collection to the end of this list in the order that they are returned by the specified collection's iterator
Inserts all of the elements in the specified collection into this list starting at the specified position
Save the state of the list to a stream i
Reconstitute the list from a stream i
Returns a string representation of this list
Compares the specified object with this list for equality
Returns the hash code value for this list
Returns an iterator over the elements in this list in proper sequence
inheritDoc The returned iterator provides a snapshot of the state of the list when the iterator was constructed
inheritDoc The returned iterator provides a snapshot of the state of the list when the iterator was constructed
Returns a view of the portion of this list between fromIndex inclusive and toIndex exclusive
Not supported
Not supported
Not supported
Not supported
Not supported
Not supported
Not supported
Not supported
Not supported
Main exchange function handling the different policy variants
Returns a hash index for the current thread
Creates a new slot at given index
Tries to cancel a wait for the given node waiting in the given slot if so helping clear the node from its slot to avoid garbage retention
Spinwaits for hole for a non slot
Waits for by spinning andor blocking and gets the hole filled in by another thread
Waits for at index and gets the hole filled in by another thread
Sweeps through arena checking for any waiting threads
Waits for another thread to arrive at this exchange point unless the current thread is linkplain Threadinterrupt interrupted and then transfers the given object to it receiving its object in return
Waits for another thread to arrive at this exchange point unless the current thread is linkplain Threadinterrupt interrupted or the specified waiting time elapses and then transfers the given object to it receiving its object in return
Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions returning true upon success and throwing an IllegalStateException if no space is currently available
Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions returning true upon success and false if no space is currently available
Inserts the specified element into this queue waiting if necessary for space to become available
Inserts the specified element into this queue waiting up to the specified wait time if necessary for space to become available
Retrieves and removes the head of this queue waiting if necessary until an element becomes available
Retrieves and removes the head of this queue waiting up to the specified wait time if necessary for an element to become available
Returns the number of additional elements that this queue can ideally in the absence of memory or resource constraints accept without blocking or Integer
Removes a single instance of the specified element from this queue if it is present
Returns true if this queue contains the specified element
Removes all available elements from this queue and adds them to the given collection
Removes at most the given number of available elements from this queue and adds them to the given collection
Constructs a new code Thread
CancellationException inheritDoc
CancellationException inheritDoc
Protected method invoked when this task transitions to state isDone whether normally or via cancellation
Sets the result of this Future to the given value unless this future has already been set or has been cancelled
Causes this future to report an ExecutionException with the given throwable as its cause unless this Future has already been set or has been cancelled
Sets this Future to the result of its computation unless it has been cancelled
Executes the computation without setting its result and then resets this Future to initial state failing to do so if the computation encounters an exception or is cancelled
Implements AQS base acquire to succeed if ran or cancelled
Implements AQS base release to always signal after setting final done status by nulling runner thread
Implements AQS base acquire to succeed if ran or cancelled
Implements AQS base release to always signal after setting final done status by nulling runner thread
Implements AQS base acquire to succeed if ran or cancelled
Implements AQS base release to always signal after setting final done status by nulling runner thread
Creates and executes a oneshot action that becomes enabled after the given delay
Creates and executes a ScheduledFuture that becomes enabled after the given delay
Creates and executes a periodic action that becomes enabled first after the given initial delay and subsequently with the given period that is executions will commence after initialDelay then initialDelayperiod then initialDelay period and so on
Creates and executes a periodic action that becomes enabled first after the given initial delay and subsequently with the given delay between the termination of one execution and the commencement of the next
Inserts the specified element at the tail of this queue
Inserts the specified element at the tail of this queue
Returns the first actual nonheader node on list
Returns true if this queue contains no elements
Returns the number of elements in this queue
Returns true if this queue contains the specified element
Removes a single instance of the specified element from this queue if it is present
Returns an array containing all of the elements in this queue in proper sequence
Returns an array containing all of the elements in this queue in proper sequence the runtime type of the returned array is that of the specified array
Returns an iterator over the elements in this queue in proper sequence
Save the state to a stream that is serialize it
Reconstitute the Queue instance from a stream that is deserialize it
Moves to next valid node and returns item to return for next or null if no such
Moves to next valid node and returns item to return for next or null if no such
Moves to next valid node and returns item to return for next or null if no such
Acquires a permit from this semaphore blocking until one is available or the thread is linkplain Threadinterrupt interrupted
Acquires a permit from this semaphore blocking until one is available
Acquires a permit from this semaphore only if one is available at the time of invocation
Acquires a permit from this semaphore if one becomes available within the given waiting time and the current thread has not been linkplain Threadinterrupt interrupted
Releases a permit returning it to the semaphore
Acquires the given number of permits from this semaphore blocking until all are available or the thread is linkplain Threadinterrupt interrupted
Acquires the given number of permits from this semaphore blocking until all are available
Acquires the given number of permits from this semaphore only if all are available at the time of invocation
Acquires the given number of permits from this semaphore if all become available within the given waiting time and the current thread has not been linkplain Threadinterrupt interrupted
Releases the given number of permits returning them to the semaphore
Returns the current number of permits available in this semaphore
Acquires and returns all permits that are immediately available
Shrinks the number of available permits by the indicated reduction
Returns code true if this semaphore has fairness set true
Queries whether any threads are waiting to acquire
Returns an estimate of the number of threads waiting to acquire
Returns a collection containing threads that may be waiting to acquire
Returns a string identifying this semaphore as well as its state
Attempts to cancel execution of this task
Returns true if this task was cancelled before it completed normally
Returns true if this task completed
Waits if necessary for the computation to complete and then retrieves its result
Waits if necessary for at most the given time for the computation to complete and then retrieves its result if available
Causes the current thread to wait until the latch has counted down to zero unless the thread is linkplain Threadinterrupt interrupted
Causes the current thread to wait until the latch has counted down to zero unless the thread is linkplain Threadinterrupt interrupted or the specified waiting time elapses
Decrements the count of the latch releasing all waiting threads if the count reaches zero
Returns the current count
Returns a string identifying this latch as well as its state
Inserts the specified element into this priority queue
Inserts the specified element into this priority queue
Inserts the specified element into this priority queue
Inserts the specified element into this priority queue
Returns the comparator used to order the elements in this queue or null if this queue uses the linkplain Comparable natural ordering of its elements
Always returns Integer
Removes a single instance of the specified element from this queue if it is present
Returns code true if this queue contains the specified element
Returns an array containing all of the elements in this queue
UnsupportedOperationException inheritDoc
UnsupportedOperationException inheritDoc
Atomically removes all of the elements from this queue
Returns an array containing all of the elements in this queue the runtime type of the returned array is that of the specified array
Returns an iterator over the elements in this queue
Saves the state to a stream that is serializes it
Method that may be invoked by a link ThreadPoolExecutor when link ThreadPoolExecutorexecute execute cannot accept a task
Applies a supplemental hash function to a given hashCode which defends against poor quality hash functions
Returns the segment that should be used for key with given hash
Returns true if this map contains no keyvalue mappings
Returns the number of keyvalue mappings in this map
Returns the value to which the specified key is mapped or code null if this map contains no mapping for the key
Tests if the specified object is a key in this table
Returns true if this map maps one or more keys to the specified value
Legacy method testing if some key maps into the specified value in this table
Maps the specified key to the specified value in this table
inheritDoc
Copies all of the mappings from the specified map to this one
Removes the key and its corresponding value from this map
inheritDoc
inheritDoc
inheritDoc
Removes all of the mappings from this map
Returns a link Set view of the keys contained in this map
Returns a link Collection view of the values contained in this map
Returns a link Set view of the mappings contained in this map
Returns an enumeration of the keys in this table
Returns an enumeration of the values in this table
Save the state of the ConcurrentHashMap instance to a stream i
Reconstitute the ConcurrentHashMap instance from a stream i
Sets table to new HashEntry array
Returns properly casted first entry of bin for given hash
Reads value field of an entry under lock
Remove match on key only if value null else match both
Set our entry's value and write through to the map
Sets table to new HashEntry array
Returns properly casted first entry of bin for given hash
Reads value field of an entry under lock
Remove match on key only if value null else match both
Set our entry's value and write through to the map
Sets table to new HashEntry array
Returns properly casted first entry of bin for given hash
Reads value field of an entry under lock
Remove match on key only if value null else match both
Set our entry's value and write through to the map
Executes the given command at some time in the future
Returns current nanosecond time
Returns true if can run a task given current run state and runaftershutdown parameters
Main execution method for delayed or periodic tasks
Requeues a periodic task unless current run state precludes it
Cancels and clears the queue of all tasks that should not be run due to shutdown policy
Modifies or replaces the task used to execute a runnable
Modifies or replaces the task used to execute a callable
Executes code command with zero required delay
Sets the policy on whether to continue executing existing periodic tasks even when this executor has been code shutdown
Gets the policy on whether to continue executing existing periodic tasks even when this executor has been code shutdown
Sets the policy on whether to execute existing delayed tasks even when this executor has been code shutdown
Gets the policy on whether to execute existing delayed tasks even when this executor has been code shutdown
Initiates an orderly shutdown in which previously submitted tasks are executed but no new tasks will be accepted
Attempts to stop all actively executing tasks halts the processing of waiting tasks and returns a list of the tasks that were awaiting execution
Returns the task queue used by this executor
Returns true if this is a periodic not a oneshot action
Sets the next time to run for a periodic task
Overrides FutureTask version so as to resetrequeue if periodic
Returns true if this is a periodic not a oneshot action
Sets the next time to run for a periodic task
Overrides FutureTask version so as to resetrequeue if periodic
Returns true if this is a periodic not a oneshot action
Sets the next time to run for a periodic task
Overrides FutureTask version so as to resetrequeue if periodic
Creates a thread pool that reuses a fixed number of threads operating off a shared unbounded queue
Creates a thread pool that reuses a fixed number of threads operating off a shared unbounded queue using the provided ThreadFactory to create new threads when needed
Creates an Executor that uses a single worker thread operating off an unbounded queue
Creates an Executor that uses a single worker thread operating off an unbounded queue and uses the provided ThreadFactory to create a new thread when needed
Creates a thread pool that creates new threads as needed but will reuse previously constructed threads when they are available
Creates a thread pool that creates new threads as needed but will reuse previously constructed threads when they are available and uses the provided ThreadFactory to create new threads when needed
Creates a singlethreaded executor that can schedule commands to run after a given delay or to execute periodically
Creates a singlethreaded executor that can schedule commands to run after a given delay or to execute periodically
Creates a thread pool that can schedule commands to run after a given delay or to execute periodically
Creates a thread pool that can schedule commands to run after a given delay or to execute periodically
Returns an object that delegates all defined link ExecutorService methods to the given executor but not any other methods that might otherwise be accessible using casts
Returns an object that delegates all defined link ScheduledExecutorService methods to the given executor but not any other methods that might otherwise be accessible using casts
Returns a default thread factory used to create new threads
Returns a thread factory used to create new threads that have the same permissions as the current thread
Returns a link Callable object that when called runs the given task and returns the given result
Returns a link Callable object that when called runs the given task and returns null
Returns a link Callable object that when called runs the given privileged action and returns its result
Returns a link Callable object that when called runs the given privileged exception action and returns its result
Returns a link Callable object that will when called execute the given callable under the current access control context
Returns a link Callable object that will when called execute the given callable under the current access control context with the current context class loader as the context class loader
Signals a waiting take
Signals a waiting put
Creates a node and links it at end of queue
Removes a node from head of queue
Lock to prevent both puts and takes
Unlock to allow both puts and takes
Returns the number of elements in this queue
Returns the number of additional elements that this queue can ideally in the absence of memory or resource constraints accept without blocking
Inserts the specified element at the tail of this queue waiting if necessary for space to become available
Inserts the specified element at the tail of this queue waiting if necessary up to the specified wait time for space to become available
Inserts the specified element at the tail of this queue if it is possible to do so immediately without exceeding the queue's capacity returning true upon success and false if this queue is full
Removes a single instance of the specified element from this queue if it is present
Returns an array containing all of the elements in this queue in proper sequence
Returns an array containing all of the elements in this queue in proper sequence the runtime type of the returned array is that of the specified array
Atomically removes all of the elements from this queue
UnsupportedOperationException inheritDoc
UnsupportedOperationException inheritDoc
Returns an iterator over the elements in this queue in proper sequence
Save the state to a stream that is serialize it
Reconstitute this queue instance from a stream that is deserialize it
Inserts the specified element at the front of this deque if it is possible to do so immediately without violating capacity restrictions throwing an IllegalStateException if no space is currently available
Inserts the specified element at the end of this deque if it is possible to do so immediately without violating capacity restrictions throwing an IllegalStateException if no space is currently available
Inserts the specified element at the front of this deque if it is possible to do so immediately without violating capacity restrictions returning true upon success and false if no space is currently available
Inserts the specified element at the end of this deque if it is possible to do so immediately without violating capacity restrictions returning true upon success and false if no space is currently available
Inserts the specified element at the front of this deque waiting if necessary for space to become available
Inserts the specified element at the end of this deque waiting if necessary for space to become available
Inserts the specified element at the front of this deque waiting up to the specified wait time if necessary for space to become available
Inserts the specified element at the end of this deque waiting up to the specified wait time if necessary for space to become available
Retrieves and removes the first element of this deque waiting if necessary until an element becomes available
Retrieves and removes the last element of this deque waiting if necessary until an element becomes available
Retrieves and removes the first element of this deque waiting up to the specified wait time if necessary for an element to become available
Retrieves and removes the last element of this deque waiting up to the specified wait time if necessary for an element to become available
Removes the first occurrence of the specified element from this deque
Removes the last occurrence of the specified element from this deque
Inserts the specified element into the queue represented by this deque in other words at the tail of this deque if it is possible to do so immediately without violating capacity restrictions returning true upon success and throwing an IllegalStateException if no space is currently available
Inserts the specified element into the queue represented by this deque in other words at the tail of this deque if it is possible to do so immediately without violating capacity restrictions returning true upon success and false if no space is currently available
Inserts the specified element into the queue represented by this deque in other words at the tail of this deque waiting if necessary for space to become available
Inserts the specified element into the queue represented by this deque in other words at the tail of this deque waiting up to the specified wait time if necessary for space to become available
Retrieves and removes the head of the queue represented by this deque in other words the first element of this deque
Retrieves and removes the head of the queue represented by this deque in other words the first element of this deque or returns null if this deque is empty
Retrieves and removes the head of the queue represented by this deque in other words the first element of this deque waiting if necessary until an element becomes available
Retrieves and removes the head of the queue represented by this deque in other words the first element of this deque waiting up to the specified wait time if necessary for an element to become available
Retrieves but does not remove the head of the queue represented by this deque in other words the first element of this deque
Retrieves but does not remove the head of the queue represented by this deque in other words the first element of this deque or returns null if this deque is empty
Removes the first occurrence of the specified element from this deque
Returns true if this deque contains the specified element
Returns the number of elements in this deque
Returns an iterator over the elements in this deque in proper sequence
Pushes an element onto the stack represented by this deque
Called by superclass constructors and pseudoconstructors clone readObject before any entries are inserted into the map
Transfers all entries to new table array
Returns true if this map maps one or more keys to the specified value
Returns the value to which the specified key is mapped or code null if this map contains no mapping for the key
Removes all of the mappings from this map
This override alters behavior of superclass put method
This override differs from addEntry in that it doesn't resize the table or remove the eldest entry
Returns true if this map should remove its eldest entry
Removes this entry from the linked list
Inserts this entry before the specified existing entry in the list
This method is invoked by the superclass whenever the value of a preexisting entry is read by Map
Removes this entry from the linked list
Inserts this entry before the specified existing entry in the list
This method is invoked by the superclass whenever the value of a preexisting entry is read by Map
Removes this entry from the linked list
Inserts this entry before the specified existing entry in the list
This method is invoked by the superclass whenever the value of a preexisting entry is read by Map
Pushes an item onto the top of this stack
Removes the object at the top of this stack and returns that object as the value of this function
Looks at the object at the top of this stack without removing it from the stack
Tests if this stack is empty
Returns the based position where an object is on this stack
Sorts the specified list into ascending order according to the natural ordering of its elements
Sorts the specified list according to the order induced by the specified comparator
Searches the specified list for the specified object using the binary search algorithm
Gets the ith element from the given list by repositioning the specified list listIterator
Searches the specified list for the specified object using the binary search algorithm
Reverses the order of the elements in the specified list
Randomly permutes the specified list using a default source of randomness
Randomly permute the specified list using the specified source of randomness
Swaps the elements at the specified positions in the specified list
Swaps the two specified elements in the specified array
Replaces all of the elements of the specified list with the specified element
Copies all of the elements from one list into another
Returns the minimum element of the given collection according to the natural ordering of its elements
Returns the minimum element of the given collection according to the order induced by the specified comparator
Returns the maximum element of the given collection according to the natural ordering of its elements
Returns the maximum element of the given collection according to the order induced by the specified comparator
Rotates the elements in the specified list by the specified distance
Replaces all occurrences of one specified value in a list with another
Returns the starting position of the first occurrence of the specified target list within the specified source list or if there is no such occurrence
Returns the starting position of the last occurrence of the specified target list within the specified source list or if there is no such occurrence
Returns an unmodifiable view of the specified collection
Returns an unmodifiable view of the specified set
Returns an unmodifiable view of the specified sorted set
Returns an unmodifiable view of the specified list
Returns an unmodifiable view of the specified map
Returns an unmodifiable view of the specified sorted map
Returns a synchronized threadsafe collection backed by the specified collection
Returns a synchronized threadsafe set backed by the specified set
Returns a synchronized threadsafe sorted set backed by the specified sorted set
Returns a synchronized threadsafe list backed by the specified list
Returns a synchronized threadsafe map backed by the specified map
Returns a synchronized threadsafe sorted map backed by the specified sorted map
Returns a dynamically typesafe view of the specified collection
Returns a dynamically typesafe view of the specified set
Returns a dynamically typesafe view of the specified sorted set
Returns a dynamically typesafe view of the specified list
Returns a dynamically typesafe view of the specified map
Returns a dynamically typesafe view of the specified sorted map
Returns an iterator that has no elements
Returns a list iterator that has no elements
Returns an enumeration that has no elements
Returns the empty set immutable
Returns the empty list immutable
Returns the empty map immutable
Returns an immutable set containing only the specified object
Returns an immutable list containing only the specified object
Returns an immutable map mapping only the specified key to the specified value
Returns an immutable list consisting of n copies of the specified object
Returns a comparator that imposes the reverse of the natural ordering on a collection of objects that implement the Comparable interface
Returns a comparator that imposes the reverse ordering of the specified comparator
Returns an enumeration over the specified collection
Returns an array list containing the elements returned by the specified enumeration in the order they are returned by the enumeration
Returns true if the specified arguments are equal or both null
Returns the number of elements in the specified collection equal to the specified object
Returns true if the two specified collections have no elements in common
Adds all of the specified elements to the specified collection
Returns a set backed by the specified map
Returns a view of a link Deque as a Lastinfirstout Lifo link Queue
UnmodifiableRandomAccessList instances are serialized as UnmodifiableList instances to allow them to be deserialized in pre
Allows instances to be deserialized in pre
This method is overridden to protect the backing set against an object with a nefarious equals function that senses that the equalitycandidate is Map
The next two methods are overridden to protect against an unscrupulous List whose containsObject o method senses when o is a Map
SynchronizedRandomAccessList instances are serialized as SynchronizedList instances to allow them to be deserialized in pre
Allows instances to be deserialized in pre
This method is overridden to protect the backing set against an object with a nefarious equals function that senses that the equalitycandidate is Map
The bulk collection methods are overridden to protect against an unscrupulous collection whose containsObject o method senses when o is a Map
UnmodifiableRandomAccessList instances are serialized as UnmodifiableList instances to allow them to be deserialized in pre
Allows instances to be deserialized in pre
This method is overridden to protect the backing set against an object with a nefarious equals function that senses that the equalitycandidate is Map
The next two methods are overridden to protect against an unscrupulous List whose containsObject o method senses when o is a Map
This method is overridden to protect the backing set against an object with a nefarious equals function that senses that the equalitycandidate is Map
The next two methods are overridden to protect against an unscrupulous List whose containsObject o method senses when o is a Map
SynchronizedRandomAccessList instances are serialized as SynchronizedList instances to allow them to be deserialized in pre
Allows instances to be deserialized in pre
This method is overridden to protect the backing set against an object with a nefarious equals function that senses that the equalitycandidate is Map
The bulk collection methods are overridden to protect against an unscrupulous collection whose containsObject o method senses when o is a Map
This method is overridden to protect the backing set against an object with a nefarious equals function that senses that the equalitycandidate is Map
The bulk collection methods are overridden to protect against an unscrupulous collection whose containsObject o method senses when o is a Map
UnmodifiableRandomAccessList instances are serialized as UnmodifiableList instances to allow them to be deserialized in pre
Allows instances to be deserialized in pre
This method is overridden to protect the backing set against an object with a nefarious equals function that senses that the equalitycandidate is Map
The next two methods are overridden to protect against an unscrupulous List whose containsObject o method senses when o is a Map
This method is overridden to protect the backing set against an object with a nefarious equals function that senses that the equalitycandidate is Map
The next two methods are overridden to protect against an unscrupulous List whose containsObject o method senses when o is a Map
This method is overridden to protect the backing set against an object with a nefarious equals function that senses that the equalitycandidate is Map
The next two methods are overridden to protect against an unscrupulous List whose containsObject o method senses when o is a Map
SynchronizedRandomAccessList instances are serialized as SynchronizedList instances to allow them to be deserialized in pre
Allows instances to be deserialized in pre
This method is overridden to protect the backing set against an object with a nefarious equals function that senses that the equalitycandidate is Map
The bulk collection methods are overridden to protect against an unscrupulous collection whose containsObject o method senses when o is a Map
This method is overridden to protect the backing set against an object with a nefarious equals function that senses that the equalitycandidate is Map
The bulk collection methods are overridden to protect against an unscrupulous collection whose containsObject o method senses when o is a Map
This method is overridden to protect the backing set against an object with a nefarious equals function that senses that the equalitycandidate is Map
The bulk collection methods are overridden to protect against an unscrupulous collection whose containsObject o method senses when o is a Map
Compiles the given regular expression into a pattern
Compiles the given regular expression into a pattern with the given flags
Returns the regular expression from which this pattern was compiled
Returns the string representation of this pattern
Creates a matcher that will match the given input against this pattern
Returns this pattern's match flags
Compiles the given regular expression and attempts to match the given input against it
Splits the given input sequence around matches of this pattern
Splits the given input sequence around matches of this pattern
Returns a literal pattern String for the specified String
Recompile the Pattern instance from a stream
The pattern is converted to normalizedD form and then a pure group is constructed to match canonical equivalences of the characters
Complete the character class being parsed and add a set of alternations to it that will match the canonical equivalences of the characters within the class
Given a specific sequence composed of a regular character and combining marks that follow it produce the alternation that will match all canonical equivalences of that sequence
Returns an array of strings that have all the possible permutations of the characters in the input string
Attempts to compose input by combining the first character with the first combining mark following it
Preprocess any Q
Copies regular expression to an int array and invokes the parsing of the expression which will create the object tree
Used to print out a subtree of the Pattern to help with debugging
Indicates whether a particular flag is set or not
Match next character signal error if failed
Mark the end of pattern with a specific character
Peek the next character and do not advance the cursor
Read the next character and advance the cursor by one
Read the next character and advance the cursor by one ignoring the COMMENTS setting
Advance the cursor by one and peek the next character
Advance the cursor by one and peek the next character ignoring the COMMENTS setting
If in xmode peek past whitespace and comments
If in xmode parse past whitespace and comments
xmode parse past comment to end of line
xmode peek past comment to end of line
Determines if character is a line separator in the current mode
Read the character after the next one and advance the cursor by two
Unread one next character and retreat cursor by one
Internal method used for handling all syntax errors
Determines if there is any supplementary character or unpaired surrogate in the specified range
Determines if the specified code point is a supplementary character or unpaired surrogate
The expression is parsed with branch nodes added for alternations
Parsing of sequences between alternations
Parse and add a new Single or Slice
Parses a backref greedily taking as many numbers as it can
Parses an escape sequence to determine the actual value that needs to be matched
Parse a character class and return the node that matches it
Parse a single character or a character range in a character class and return its representative node
Parses a Unicode character family and returns its representative node
Returns a CharProperty matching all characters in a UnicodeBlock
Returns a CharProperty matching all characters in a named property
Parses a group and returns the head node of a set of nodes that process the group
Create group head and tail nodes using double return
Parses inlined match flags and set them appropriately
Parses the second part of inlined match flags and turns off flags appropriately
Processes repetition
Utility method for parsing control escape sequences
Utility method for parsing octal escape sequences
Utility method for parsing hexadecimal escape sequences
Utility method for parsing unicode escape sequences
Tests a surrogate value
Returns a suitably optimized single character matcher
Utility method for creating a string slice matcher
Returns node for matching characters within an explicit value range
Returns node for matching characters within an explicit value range in a case insensitive manner
Returns the set union of two CharProperty nodes
Returns the set intersection of two CharProperty nodes
Returns the set difference of two CharProperty nodes
Non spacing marks only count as word characters in bounds calculations if they have a base character
This method implements the classic accept node
This method is good for all zero length assertions
This method implements the classic accept node with the addition of a check to see if the match occurred using all of the input
Pre calculates arrays needed to generate the bad character shift and the good suffix shift
This method implements the classic accept node
This method is good for all zero length assertions
This method implements the classic accept node with the addition of a check to see if the match occurred using all of the input
Pre calculates arrays needed to generate the bad character shift and the good suffix shift
This method implements the classic accept node
This method is good for all zero length assertions
This method implements the classic accept node with the addition of a check to see if the match occurred using all of the input
Pre calculates arrays needed to generate the bad character shift and the good suffix shift
Returns the start index of the match
Returns the start index of the subsequence captured by the given group during this match
Returns the offset after the last character matched
Returns the offset after the last character of the subsequence captured by the given group during this match
Returns the input subsequence matched by the previous match
Returns the input subsequence captured by the given group during the previous match operation
Returns the number of capturing groups in this match result's pattern
Retrieves the error index
Retrieves the description of the error
Retrieves the erroneous regularexpression pattern
Returns a multiline string containing the description of the syntax error and its index the erroneous regularexpression pattern and a visual indication of the error index within the pattern
Returns the pattern that is interpreted by this matcher
Returns the match state of this matcher as a link MatchResult
Changes the Pattern that this Matcher uses to find matches with
Resets this matcher
Resets this matcher with a new input sequence
Returns the start index of the previous match
Returns the start index of the subsequence captured by the given group during the previous match operation
Returns the offset after the last character matched
Returns the offset after the last character of the subsequence captured by the given group during the previous match operation
Returns the input subsequence matched by the previous match
Returns the input subsequence captured by the given group during the previous match operation
Returns the number of capturing groups in this matcher's pattern
Attempts to match the entire region against the pattern
Attempts to find the next subsequence of the input sequence that matches the pattern
Resets this matcher and then attempts to find the next subsequence of the input sequence that matches the pattern starting at the specified index
Attempts to match the input sequence starting at the beginning of the region against the pattern
Returns a literal replacement String for the specified String
Implements a nonterminal appendandreplace step
Implements a terminal appendandreplace step
Replaces every subsequence of the input sequence that matches the pattern with the given replacement string
Replaces the first subsequence of the input sequence that matches the pattern with the given replacement string
Sets the limits of this matcher's region
Reports the start index of this matcher's region
Reports the end index exclusive of this matcher's region
Queries the transparency of region bounds for this matcher
Sets the transparency of region bounds for this matcher
Queries the anchoring of region bounds for this matcher
Sets the anchoring of region bounds for this matcher
Returns the string representation of this matcher
Returns true if the end of input was hit by the search engine in the last match operation performed by this matcher
Returns true if more input could change a positive match into a negative one
Initiates a search to find a Pattern within the given bounds
Initiates a search for an anchored match to a Pattern within the given bounds
Returns the end index of the text
Generates a String from this Matcher's input in the specified range
Returns this Matcher's input character at index i
Schedules the specified task for execution after the specified delay
Schedules the specified task for execution at the specified time
Schedules the specified task for repeated fixeddelay execution beginning after the specified delay
Schedules the specified task for repeated fixeddelay execution beginning at the specified time
Schedules the specified task for repeated fixedrate execution beginning after the specified delay
Schedules the specified task for repeated fixedrate execution beginning at the specified time
Schedule the specified timer task for execution at the specified time with the specified period in milliseconds
Terminates this timer discarding any currently scheduled tasks
Removes all cancelled tasks from this timer's task queue
The main timer loop
Returns the number of tasks currently on the queue
Adds a new task to the priority queue
Return the head task of the priority queue
Return the ith task in the priority queue where i ranges from the head task which is returned by getMin to the number of tasks on the queue inclusive
Remove the head task from the priority queue
Removes the ith element from queue without regard for maintaining the heap invariant
Sets the nextExecutionTime associated with the head task to the specified value and adjusts priority queue accordingly
Returns true if the priority queue contains no elements
Removes all elements from the priority queue
Establishes the heap invariant described above assuming the heap satisfies the invariant except possibly for the leafnode indexed by k which may have a nextExecutionTime less than its parent's
Establishes the heap invariant described above in the subtree rooted at k which is assumed to satisfy the heap invariant except possibly for node k itself which may have a nextExecutionTime greater than its children's
Establishes the heap invariant described above in the entire tree assuming nothing about the order of the elements prior to the call
Returns the comparator used to order the elements in this set or null if this set uses the linkplain Comparable natural ordering of its elements
Returns a view of the portion of this set whose elements range from fromElement inclusive to toElement exclusive
Returns a view of the portion of this set whose elements are strictly less than toElement
Returns a view of the portion of this set whose elements are greater than or equal to fromElement
Returns the first lowest element currently in this set
Returns the last highest element currently in this set
Sets the daylight saving time starting year
Sets the daylight saving time start rule
Sets the daylight saving time start rule to a fixed date within a month
Sets the daylight saving time start rule to a weekday before or after the given date within a month e
Sets the daylight saving time end rule
Sets the daylight saving time end rule to a fixed date within a month
Sets the daylight saving time end rule to a weekday before or after the given date within a month e
Returns the offset of this time zone from UTC at the given time
TimeZonegetOffsets
Returns the difference in milliseconds between local time and UTC taking into account both the raw offset and the effect of daylight saving for the specified date and time
Gets the GMT offset for this time zone
Sets the base time zone offset to GMT
Sets the amount of time in milliseconds that the clock is advanced during daylight saving time
Returns the amount of time in milliseconds that the clock is advanced during daylight saving time
Queries if this time zone uses daylight saving time
Queries if the given date is in daylight saving time
Returns a clone of this SimpleTimeZone instance
Generates the hash code for the SimpleDateFormat object
Compares the equality of two SimpleTimeZone objects
Returns true if this zone has the same rules and offset as another zone
Returns a string representation of this time zone
Given a set of encoded rules in startDay and startDayOfMonth decode them and set the startMode appropriately
Decode the start rule and validate the parameters
Decode the end rule and validate the parameters
Make rules compatible to
Pack the start and end rules into an array of bytes
Given an array of bytes produced by packRules interpret them as the start and end rules
Pack the start and end times into an array of bytes
Unpack the start and end times from an array of bytes
Save the state of this object to a stream i
Reconstitute this object from a stream i
Sets the GregorianCalendar change date
Gets the Gregorian Calendar change date
Determines if the given year is a leap year
Compares this GregorianCalendar to the specified Object
Generates the hash code for this GregorianCalendar object
Adds the specified signed amount of time to the given calendar field based on the calendar's rules
Adds or subtracts updown a single unit of time on the given time field without changing larger fields
Adds a signed amount to the specified calendar field without changing larger fields
Returns the minimum value for the given calendar field of this GregorianCalendar instance
Returns the maximum value for the given calendar field of this GregorianCalendar instance
Returns the highest minimum value for the given calendar field of this GregorianCalendar instance
Returns the lowest maximum value for the given calendar field of this GregorianCalendar instance
Returns the minimum value that this calendar field could have taking into consideration the given time value and the current values of the link CalendargetFirstDayOfWeek getFirstDayOfWeek link CalendargetMinimalDaysInFirstWeek getMinimalDaysInFirstWeek link getGregorianChange getGregorianChange and link CalendargetTimeZone getTimeZone methods
Returns the maximum value that this calendar field could have taking into consideration the given time value and the current values of the link CalendargetFirstDayOfWeek getFirstDayOfWeek link CalendargetMinimalDaysInFirstWeek getMinimalDaysInFirstWeek link getGregorianChange getGregorianChange and link CalendargetTimeZone getTimeZone methods
Returns the millisecond offset from the beginning of this year
Converts the time value millisecond offset from the a hrefCalendar
This computeFields implements the conversion from UTC millisecond offset from the Epoch to calendar field values
Returns the number of weeks in a period between fixedDay and fixedDate
Converts calendar field values to the time value millisecond offset from the a hrefCalendar
Computes the fixed date under either the Gregorian or the Julian calendar using the given year and the specified calendar fields
Returns this object if it's normalized all fields and time are in sync
Returns the Julian calendar system instance singleton
Returns the calendar system for dates before the cutover date in the cutover year
Determines if the specified year normalized is the Gregorian cutover year
Returns the fixed date of the first day of the year usually January before the specified date
Returns the fixed date of the first date of the month usually the st of the month before the specified date
Returns a CalendarDate produced from the specified fixed date
Returns the Gregorian cutover date as a BaseCalendar
Returns the day before the Gregorian cutover date as a BaseCalendar
Returns the length of the specified month in the specified year
Returns the length of the specified month in the year provided by internalGetYEAR
Returns the length in days of the specified year
Returns the length in days of the year provided by internalGetYEAR
After adjustments such as addMONTH addYEAR we don't want the month to jump around
Returns the fixed date value of this object
Returns the new value after 'roll'ing the specified value and amount
Returns the ERA
Updates internal state
Returns an iterator over the elements in this set
Returns the number of elements in this set its cardinality
Returns true if this set contains no elements
Returns true if this set contains the specified element
Adds the specified element to this set if it is not already present
Removes the specified element from this set if it is present
Removes all of the elements from this set
Returns a shallow copy of this HashSet instance the elements themselves are not cloned
Save the state of this HashSet instance to a stream that is serialize it
Reconstitute the HashSet instance from a stream that is deserialize it
Returns the number of elements in this collection
Returns true if this collection contains no elements
Returns true if this collection contains the specified element
Returns an iterator over the elements in this collection
Returns an array containing all of the elements in this collection
Returns an array containing all of the elements in this collection the runtime type of the returned array is that of the specified array
Ensures that this collection contains the specified element optional operation
Removes a single instance of the specified element from this collection if it is present optional operation
Returns true if this collection contains all of the elements in the specified collection
Adds all of the elements in the specified collection to this collection optional operation
Removes all of this collection's elements that are also contained in the specified collection optional operation
Retains only the elements in this collection that are contained in the specified collection optional operation
Removes all of the elements from this collection optional operation
Compares the specified object with this collection for equality
Returns the hash code value for this collection
Returns the system root preference node
Returns the user root preference node corresponding to the calling user
Export the specified preferences node and if subTree is true all subnodes to the specified output stream
Put the preferences in the specified Preferences node into the specified XML element which is assumed to represent a node in the specified XML document which is assumed to conform to PREFS_DTD
Import preferences from the specified input stream which is assumed to contain an XML document in the format described in the Preferences spec
Create a new prefs XML document
Load an XML document from specified input stream which must have the requisite DTD URI
Write XML document to the specified output stream
Recursively traverse the specified preferences node and store the described preferences into the system or current user preferences tree as appropriate
Import the preferences described by the specified XML element a map from a preferences document into the specified preferences node
Export the specified Map to a map document on the specified OutputStream as per the prefs DTD
Import Map from the specified input stream which is assumed to contain a map document as per the prefs DTD
Implements the put method as per the specification in link PreferencesputStringString
Implements the get method as per the specification in link PreferencesgetStringString
Implements the removeString method as per the specification in link PreferencesremoveString
Implements the clear method as per the specification in link Preferencesclear
Implements the putInt method as per the specification in link PreferencesputIntStringint
Implements the getInt method as per the specification in link PreferencesgetIntStringint
Implements the putLong method as per the specification in link PreferencesputLongStringlong
Implements the getLong method as per the specification in link PreferencesgetLongStringlong
Implements the putBoolean method as per the specification in link PreferencesputBooleanStringboolean
Implements the getBoolean method as per the specification in link PreferencesgetBooleanStringboolean
Implements the putFloat method as per the specification in link PreferencesputFloatStringfloat
Implements the getFloat method as per the specification in link PreferencesgetFloatStringfloat
Implements the putDouble method as per the specification in link PreferencesputDoubleStringdouble
Implements the getDouble method as per the specification in link PreferencesgetDoubleStringdouble
Implements the putByteArray method as per the specification in link PreferencesputByteArrayStringbyte
Implements the getByteArray method as per the specification in link PreferencesgetByteArrayStringbyte
Implements the keys method as per the specification in link Preferenceskeys
Implements the children method as per the specification in link PreferenceschildrenNames
Returns all known unremoved children of this node
Implements the parent method as per the specification in link Preferencesparent
Implements the node method as per the specification in link PreferencesnodeString
tokenizer contains ''
Implements the nodeExists method as per the specification in link PreferencesnodeExistsString
tokenizer contains ''
Implements the removeNode method as per the specification in link PreferencesremoveNode
Implements the name method as per the specification in link Preferencesname
Implements the absolutePath method as per the specification in link PreferencesabsolutePath
Implements the isUserNode method as per the specification in link PreferencesisUserNode
Put the given keyvalue association into this preference node
Return the value associated with the specified key at this preference node or null if there is no association for this key or the association cannot be determined at this time
Remove the association if any for the specified key at this preference node
Removes this preference node invalidating it and any preferences that it contains
Returns all of the keys that have an associated value in this preference node
Returns the names of the children of this preference node
Returns the named child if it exists or null if it does not
Returns the named child of this preference node creating it if it does not already exist
Returns the absolute path name of this preferences node
Implements the sync method as per the specification in link Preferencessync
This method is invoked with this node locked
Implements the flush method as per the specification in link Preferencesflush
This method is invoked with this node locked
Returns true iff this node or an ancestor has been removed with the link removeNode method
This method starts the event dispatch thread the first time it is called
Return this node's preferencenode change listeners
Enqueue a preference change event for delivery to registered preference change listeners unless there are no registered listeners
Enqueue a node added event for delivery to registered node change listeners unless there are no registered listeners
Enqueue a node removed event for delivery to registered node change listeners unless there are no registered listeners
Implements the exportNode method as per the specification in link PreferencesexportNodeOutputStream
Implements the exportSubtree method as per the specification in link PreferencesexportSubtreeOutputStream
This method gets called when a child node is added
This method gets called when a child node is removed
This method gets called when a preference is added removed or when its value is changed
Returns the preference node that emitted the event
Returns the key of the preference that was changed
Returns the new value for the preference
Throws NotSerializableException since NodeChangeEvent objects are not intended to be serializable
Throws NotSerializableException since PreferenceChangeEvent objects are not intended to be serializable
Translates the specified byte array into a Base string as per Preferences
Translates the specified byte array into an alternate representation Base string
Translates the specified Base string as per Preferences
Translates the specified alternate representation Base string into a byte array
Translates the specified character which is assumed to be in the Base Alphabet into its equivalent bit positive integer
Returns the preference node from the calling user's preference tree that is associated by convention with the specified class's package
Returns the preference node from the system preference tree that is associated by convention with the specified class's package
Returns the absolute path name of the node corresponding to the package of the specified object
Returns the root preference node for the calling user
Returns the root preference node for the system
Associates the specified value with the specified key in this preference node
Returns the value associated with the specified key in this preference node
Removes the value associated with the specified key in this preference node if any
Removes all of the preferences keyvalue associations in this preference node
Associates a string representing the specified int value with the specified key in this preference node
Returns the int value represented by the string associated with the specified key in this preference node
Associates a string representing the specified long value with the specified key in this preference node
Returns the long value represented by the string associated with the specified key in this preference node
Associates a string representing the specified boolean value with the specified key in this preference node
Returns the boolean value represented by the string associated with the specified key in this preference node
Associates a string representing the specified float value with the specified key in this preference node
Returns the float value represented by the string associated with the specified key in this preference node
Associates a string representing the specified double value with the specified key in this preference node
Returns the double value represented by the string associated with the specified key in this preference node
Associates a string representing the specified byte array with the specified key in this preference node
Returns the byte array value represented by the string associated with the specified key in this preference node
Returns all of the keys that have an associated value in this preference node
Returns the names of the children of this preference node relative to this node
Returns the parent of this preference node or null if this is the root
Returns the named preference node in the same tree as this node creating it and any of its ancestors if they do not already exist
Returns true if the named preference node exists in the same tree as this node
Removes this preference node and all of its descendants invalidating any preferences contained in the removed nodes
Returns this preference node's name relative to its parent
Returns this preference node's absolute path name
Returns true if this preference node is in the user preference tree false if it's in the system preference tree
Returns a string representation of this preferences node as if computed by the expressionthis
Forces any changes in the contents of this preference node and its descendants to the persistent store
Ensures that future reads from this preference node and its descendants reflect any changes that were committed to the persistent store from any VM prior to the sync invocation
Registers the specified listener to receive preference change events for this preference node
Removes the specified preference change listener so it no longer receives preference change events
Registers the specified listener to receive node change events for this node
Removes the specified NodeChangeListener so it no longer receives change events
Emits on the specified output stream an XML document representing all of the preferences contained in this node but not its descendants
Emits an XML document representing all of the preferences contained in this node and all of its descendants
Imports all of the preferences represented by the XML document on the specified input stream
Returns the parent of the node that was added or removed
Returns the node that was added or removed
Throws NotSerializableException since NodeChangeEvent objects are not intended to be serializable
Throws NotSerializableException since NodeChangeEvent objects are not intended to be serializable
Sets the seed of this random number generator using a single code long seed
Generates the next pseudorandom number
Generates random bytes and places them into a usersupplied byte array
Returns the next pseudorandom uniformly distributed code int value from this random number generator's sequence
Returns a pseudorandom uniformly distributed code int value between inclusive and the specified value exclusive drawn from this random number generator's sequence
Returns the next pseudorandom uniformly distributed code long value from this random number generator's sequence
Returns the next pseudorandom uniformly distributed code boolean value from this random number generator's sequence
Returns the next pseudorandom uniformly distributed code float value between code
Returns the next pseudorandom uniformly distributed code double value between code
Returns the next pseudorandom Gaussian normally distributed code double value with mean code
Reconstitute the code Random instance from a stream that is deserialize it
Save the code Random instance to a stream
Returns the locale set by the construction of this formatter
Returns the destination for the output
Returns the result of invoking toString on the destination for the output
Flushes this formatter
Closes this formatter
Returns the IOException last thrown by this formatter's link Appendable
Writes a formatted string to this object's destination using the specified format string and arguments
Writes a formatted string to this object's destination using the specified locale format string and arguments
Returns the illegal code point as defined by link CharacterisValidCodePoint
Returns the comparator used to order the keys in this map or null if this map uses the linkplain Comparable natural ordering of its keys
Returns a view of the portion of this map whose keys range from fromKey inclusive to toKey exclusive
Returns a view of the portion of this map whose keys are strictly less than toKey
Returns a view of the portion of this map whose keys are greater than or equal to fromKey
Returns the first lowest key currently in this map
Returns the last highest key currently in this map
Returns a link Set view of the keys contained in this map
Returns a link Collection view of the values contained in this map
Returns a link Set view of the mappings contained in this map
Returns an Enumeration of the keys contained in this ResourceBundle and its parent bundles
Returns a Set of the keys contained only in this ResourceBundle
Returns the greatest element in this set strictly less than the given element or code null if there is no such element
Returns the greatest element in this set less than or equal to the given element or code null if there is no such element
Returns the least element in this set greater than or equal to the given element or code null if there is no such element
Returns the least element in this set strictly greater than the given element or code null if there is no such element
Retrieves and removes the first lowest element or returns code null if this set is empty
Retrieves and removes the last highest element or returns code null if this set is empty
Returns an iterator over the elements in this set in ascending order
Returns a reverse order view of the elements contained in this set
Returns an iterator over the elements in this set in descending order
Returns a view of the portion of this set whose elements range from code fromElement to code toElement
Returns a view of the portion of this set whose elements are less than or equal to if code inclusive is true code toElement
Returns a view of the portion of this set whose elements are greater than or equal to if code inclusive is true code fromElement
inheritDoc Equivalent to code subSetfromElement true toElement false
inheritDoc Equivalent to code headSettoElement false
inheritDoc Equivalent to code tailSetfromElement true
The object on which the Event initially occurred
Returns a String representation of this EventObject
Gets the time zone offset for current date modified in case of daylight savings
Returns the offset of this time zone from UTC at the specified date
Gets the raw GMT offset and the amount of daylight saving of this time zone at the given time
Sets the base time zone offset to GMT
Returns the amount of time in milliseconds to add to UTC to get standard time in this time zone
Gets the ID of this time zone
Sets the time zone ID
Returns a name of this time zone suitable for presentation to the user in the default locale
Returns a name of this time zone suitable for presentation to the user in the specified locale
Returns a name of this time zone suitable for presentation to the user in the default locale
Returns a name of this time zone suitable for presentation to the user in the specified locale
Returns the amount of time to be added to local standard time to get local wall clock time
Queries if this time zone uses daylight savings time
Queries if the given date is in daylight savings time in this time zone
Gets the TimeZone for the given ID
Gets the available IDs according to the given time zone offset in milliseconds
Gets all the available IDs supported
Gets the platform defined TimeZone ID
Gets the custom time zone ID based on the GMT offset of the platform
Gets the default TimeZone for this host
Returns the reference to the default TimeZone object
Sets the TimeZone that is returned by the getDefault method
Returns the default TimeZone in an AppContext if any AppContext has ever used
Sets the default TimeZone in the AppContext to the given tz
Returns true if this zone has the same rule and offset as another zone
Creates a copy of this TimeZone
Parses a custom time zone identifier and returns a corresponding zone
Compares this JapaneseImperialCalendar to the specified Object
Generates the hash code for this JapaneseImperialCalendar object
Adds the specified signed amount of time to the given calendar field based on the calendar's rules
Adds a signed amount to the specified calendar field without changing larger fields
Returns the minimum value for the given calendar field of this Calendar instance
Returns the maximum value for the given calendar field of this GregorianCalendar instance
Returns the highest minimum value for the given calendar field of this GregorianCalendar instance
Returns the lowest maximum value for the given calendar field of this GregorianCalendar instance
Returns the minimum value that this calendar field could have taking into consideration the given time value and the current values of the link CalendargetFirstDayOfWeek getFirstDayOfWeek link CalendargetMinimalDaysInFirstWeek getMinimalDaysInFirstWeek and link CalendargetTimeZone getTimeZone methods
Returns the maximum value that this calendar field could have taking into consideration the given time value and the current values of the link CalendargetFirstDayOfWeek getFirstDayOfWeek link CalendargetMinimalDaysInFirstWeek getMinimalDaysInFirstWeek and link CalendargetTimeZone getTimeZone methods
Returns the millisecond offset from the beginning of the year
Converts the time value millisecond offset from the a hrefCalendar
This computeFields implements the conversion from UTC millisecond offset from the Epoch to calendar field values
Returns the number of weeks in a period between fixedDay and fixedDate
Converts calendar field values to the time value millisecond offset from the a hrefCalendar
Computes the fixed date under either the Gregorian or the Julian calendar using the given year and the specified calendar fields
Returns the fixed date of the first day of the year usually January before the specified date
Returns the fixed date of the first date of the month usually the st of the month before the specified date
Returns a LocalGregorianCalendar
Returns the length of the specified month in the specified Gregorian year
Returns the length of the specified month in the year provided by internalGetYEAR
Returns the index to the new era if the given date is in a transition month
Returns this object if it's normalized all fields and time are in sync
After adjustments such as addMONTH addYEAR we don't want the month to jump around
Returns the new value after 'roll'ing the specified value and amount
Returns the ERA
Updates internal state
Static factory to retrieve a type pseudo randomly generated UUID
Static factory to retrieve a type name based code UUID based on the specified byte array
Creates a code UUID from the string standard representation as described in the link toString method
Returns the least significant bits of this UUID's bit value
Returns the most significant bits of this UUID's bit value
The version number associated with this code UUID
The variant number associated with this code UUID
The timestamp value associated with this UUID
The clock sequence value associated with this UUID
The node value associated with this UUID
Returns a code String object representing this code UUID
Returns val represented by the specified number of hex digits
Returns a hash code for this code UUID
Compares this object to the specified object
Compares this UUID with the specified UUID
Reconstitute the code UUID instance from a stream that is deserialize it
Throws NotSerializableException since InvalidPropertiesFormatException objects are not intended to be serializable
Throws NotSerializableException since InvalidPropertiesFormatException objects are not intended to be serializable
Returns the first element in this list
Returns the last element in this list
Removes and returns the first element from this list
Removes and returns the last element from this list
Inserts the specified element at the beginning of this list
Appends the specified element to the end of this list
Returns true if this list contains the specified element
Returns the number of elements in this list
Appends the specified element to the end of this list
Removes the first occurrence of the specified element from this list if it is present
Appends all of the elements in the specified collection to the end of this list in the order that they are returned by the specified collection's iterator
Inserts all of the elements in the specified collection into this list starting at the specified position
Removes all of the elements from this list
Returns the element at the specified position in this list
Replaces the element at the specified position in this list with the specified element
Inserts the specified element at the specified position in this list
Removes the element at the specified position in this list
Returns the indexed entry
Returns the index of the first occurrence of the specified element in this list or if this list does not contain the element
Returns the index of the last occurrence of the specified element in this list or if this list does not contain the element
Retrieves but does not remove the head first element of this list
Retrieves but does not remove the head first element of this list
Retrieves and removes the head first element of this list
Retrieves and removes the head first element of this list
Adds the specified element as the tail last element of this list
Inserts the specified element at the front of this list
Inserts the specified element at the end of this list
Retrieves but does not remove the first element of this list or returns null if this list is empty
Retrieves but does not remove the last element of this list or returns null if this list is empty
Retrieves and removes the first element of this list or returns null if this list is empty
Retrieves and removes the last element of this list or returns null if this list is empty
Pushes an element onto the stack represented by this list
Pops an element from the stack represented by this list
Removes the first occurrence of the specified element in this list when traversing the list from head to tail
Removes the last occurrence of the specified element in this list when traversing the list from head to tail
Returns a listiterator of the elements in this list in proper sequence starting at the specified position in the list

Returns a shallow copy of this LinkedList
Returns an array containing all of the elements in this list in proper sequence from first to last element
Returns an array containing all of the elements in this list in proper sequence from first to last element the runtime type of the returned array is that of the specified array
Save the state of this LinkedList instance to a stream that is serialize it
Reconstitute this LinkedList instance from a stream that is deserialize it
Set maxDelimCodePoint to the highest char in the delimiter set
Skips delimiters starting from the specified position
Skips ahead from startPos and returns the index of the next delimiter character encountered or maxPosition if no such delimiter is found
Tests if there are more tokens available from this tokenizer's string
Returns the next token from this string tokenizer
Returns the next token in this string tokenizer's string
Returns the same value as the hasMoreTokens method
Returns the same value as the nextToken method except that its declared return value is Object rather than String
Calculates the number of times that this tokenizer's nextToken method can be called before it generates an exception
Returns the unmatched format specifier
Returns code true if this list iterator has more elements when traversing the list in the forward direction
Returns the next element in the list and advances the cursor position
Returns code true if this list iterator has more elements when traversing the list in the reverse direction
Returns the previous element in the list and moves the cursor position backwards
Returns the index of the element that would be returned by a subsequent call to link next
Returns the index of the element that would be returned by a subsequent call to link previous
Removes from the list the last element that was returned by link next or link previous optional operation
Replaces the last element returned by link next or link previous with the specified element optional operation
Inserts the specified element into the list optional operation
Returns the jar file manifest or null if none
Returns the JarEntry for the given entry name or null if not found
Returns the ZipEntry for the given entry name or null if not found
Returns an enumeration of the zip file entries
Returns an input stream for reading the contents of the specified zip file entry
Returns the value of the specified attribute name or null if the attribute name was not found
Returns the value of the specified attribute name specified as a string or null if the attribute was not found
Returns the value of the specified Attributes
Associates the specified value with the specified attribute name key in this Map
Associates the specified value with the specified attribute name specified as a String
Removes the attribute with the specified name key from this Map
Returns true if this Map maps one or more attribute names keys to the specified value
Returns true if this Map contains the specified attribute name key
Copies all of the attribute namevalue mappings from the specified Attributes to this Map
Removes all attributes from this Map
Returns the number of attributes in this Map
Returns true if this Map contains no attributes
Returns a Set view of the attribute names keys contained in this Map
Returns a Collection view of the attribute values contained in this Map
Returns a Collection view of the attribute namevalue mappings contained in this Map
Compares the specified Attributes object with this Map for equality
Returns the hash code value for this Map
Returns a copy of the Attributes implemented as follows public Object clone return new Attributesthis Since the attribute names and values are themselves immutable the Attributes returned can be safely modified without affecting the original
Compares this attribute name to another for equality
Computes the hash value for this attribute name
Returns the attribute name as a String
Compares this attribute name to another for equality
Computes the hash value for this attribute name
Returns the attribute name as a String
Compares this attribute name to another for equality
Computes the hash value for this attribute name
Returns the attribute name as a String
This method scans to see which entry we're parsing and keeps various state information depending on what type of file is being parsed
update a single byte
update an array of bytes
called when we reach the end of entry in one of the read methods
Return an array of java
return an array of CodeSigner objects for the given file in the jar
returns true if there no files to verify
called to let us know we have processed all the METAINF entries and if we reread one of them don't reprocess it
Returns the Manifest Attributes for this entry or null if none
Returns the Certificate objects for this entry or null if none
Returns the CodeSigner objects for this entry or null if none
Obtain new instance of a class that implements Packer
Obtain new instance of a class that implements Unpacker
Get the set of this engine's properties
Takes a JarFile and converts it into a Pack archive
Takes a JarInputStream and converts it into a Pack archive
Registers a listener for PropertyChange events on the properties map
Remove a listener for PropertyChange events added by the link addPropertyChangeListener
Get the set of this engine's properties
Read a Pack archive and write the encoded JAR to a JarOutputStream
Read a Pack archive and write the encoded JAR to a JarOutputStream
Registers a listener for PropertyChange events on the properties map
Remove a listener for PropertyChange events added by the link addPropertyChangeListener
Get the set of this engine's properties
Takes a JarFile and converts it into a Pack archive
Takes a JarInputStream and converts it into a Pack archive
Registers a listener for PropertyChange events on the properties map
Remove a listener for PropertyChange events added by the link addPropertyChangeListener
Get the set of this engine's properties
Read a Pack archive and write the encoded JAR to a JarOutputStream
Read a Pack archive and write the encoded JAR to a JarOutputStream
Registers a listener for PropertyChange events on the properties map
Remove a listener for PropertyChange events added by the link addPropertyChangeListener
Get the set of this engine's properties
Takes a JarFile and converts it into a Pack archive
Takes a JarInputStream and converts it into a Pack archive
Registers a listener for PropertyChange events on the properties map
Remove a listener for PropertyChange events added by the link addPropertyChangeListener
Get the set of this engine's properties
Read a Pack archive and write the encoded JAR to a JarOutputStream
Read a Pack archive and write the encoded JAR to a JarOutputStream
Registers a listener for PropertyChange events on the properties map
Remove a listener for PropertyChange events added by the link addPropertyChangeListener
Returns the main Attributes for the Manifest
Returns a Map of the entries contained in this Manifest
Returns the Attributes for the specified entry name
Clears the main Attributes as well as the entries in this Manifest
Writes the Manifest to the specified OutputStream
Adds line breaks to enforce a maximum bytes per line
Reads the Manifest from the specified InputStream
Returns true if the specified Object is also a Manifest and has the same main Attributes and entries
Returns the hash code for this Manifest
Returns a shallow copy of this Manifest
Returns the Manifest for this JAR file or null if none
Reads the next ZIP file entry and positions the stream at the beginning of the entry data
Reads the next JAR file entry and positions the stream at the beginning of the entry data
Reads from the current JAR file entry into an array of bytes
Creates a new JarEntry ZipEntry for the specified JAR file entry name
Begins writing a new JAR file entry and positions the stream to the start of the entry data
Creates a Locale instance with the given language and counry and puts the instance under the given key in the cache
Returns a Locale constructed from the given language country and variant
Gets the current value of the default locale for this instance of the Java Virtual Machine
Sets the default locale for this instance of the Java Virtual Machine
Returns an array of all installed locales
Returns a list of all letter country codes defined in ISO
Returns a list of all letter language codes defined in ISO
Returns the language code for this locale which will either be the empty string or a lowercase ISO code
Returns the countryregion code for this locale which will either be the empty string or an uppercase ISO letter code
Returns the variant code for this locale
Getter for the programmatic name of the entire locale with the language country and variant separated by underbars
Returns a threeletter abbreviation for this locale's language
Returns a threeletter abbreviation for this locale's country
Returns a name for the locale's language that is appropriate for display to the user
Returns a name for the locale's language that is appropriate for display to the user
Returns a name for the locale's country that is appropriate for display to the user
Returns a name for the locale's country that is appropriate for display to the user
Returns a name for the locale's variant code that is appropriate for display to the user
Returns a name for the locale's variant code that is appropriate for display to the user
Returns a name for the locale that is appropriate for display to the user
Returns a name for the locale that is appropriate for display to the user
Overrides Cloneable
Override hashCode
Returns true if this Locale is equal to another object
Return an array of the display names of the variant
Format a list using given pattern strings
Given a list of strings return a list shortened to three elements
Replace the deserialized Locale object with a newly created object
Use NULL_KEY for key if it is null
Returns internal representation of null key back to caller as null
Checks for equality of nonnull reference x and possiblynull y
Returns index for hash code h
Expunges stale entries from the table
Returns the table after first expunging stale entries
Returns the number of keyvalue mappings in this map
Returns true if this map contains no keyvalue mappings
Returns the value to which the specified key is mapped or code null if this map contains no mapping for the key
Returns true if this map contains a mapping for the specified key
Returns the entry associated with the specified key in this map
Associates the specified value with the specified key in this map
Rehashes the contents of this map into a new array with a larger capacity
Transfers all entries from src to dest tables
Copies all of the mappings from the specified map to this map
Removes the mapping for a key from this weak hash map if it is present
Special version of remove needed by Entry set
Removes all of the mappings from this map
Returns true if this map maps one or more keys to the specified value
Specialcase code for containsValue with null argument
Returns a link Set view of the keys contained in this map
Returns a link Collection view of the values contained in this map
Returns a link Set view of the mappings contained in this map
The common parts of next across different types of iterators
The common parts of next across different types of iterators
The common parts of next across different types of iterators
inheritDoc This implementation returns entrySet
inheritDoc This implementation returns size
inheritDoc This implementation iterates over entrySet searching for an entry with the specified value
inheritDoc This implementation iterates over entrySet searching for an entry with the specified key
inheritDoc This implementation iterates over entrySet searching for an entry with the specified key
inheritDoc This implementation always throws an UnsupportedOperationException
inheritDoc This implementation iterates over entrySet searching for an entry with the specified key
inheritDoc This implementation iterates over the specified map's entrySet collection and calls this map's put operation once for each entry returned by the iteration
inheritDoc This implementation calls entrySet
inheritDoc This implementation returns a set that subclasses link AbstractSet
inheritDoc This implementation returns a collection that subclasses link AbstractCollection
Compares the specified object with this map for equality
Returns the hash code value for this map
Returns a string representation of this map
Returns a shallow copy of this AbstractMap instance the keys and values themselves are not cloned
Utility method for SimpleEntry and SimpleImmutableEntry
Returns the key corresponding to this entry
Returns the value corresponding to this entry
Replaces the value corresponding to this entry with the specified value
Compares the specified object with this entry for equality
Returns the hash code value for this map entry
Returns a String representation of this map entry
Returns the key corresponding to this entry
Returns the value corresponding to this entry
Replaces the value corresponding to this entry with the specified value optional operation
Compares the specified object with this entry for equality
Returns the hash code value for this map entry
Returns a String representation of this map entry
Returns the key corresponding to this entry
Returns the value corresponding to this entry
Replaces the value corresponding to this entry with the specified value
Compares the specified object with this entry for equality
Returns the hash code value for this map entry
Returns a String representation of this map entry
Returns the key corresponding to this entry
Returns the value corresponding to this entry
Replaces the value corresponding to this entry with the specified value optional operation
Compares the specified object with this entry for equality
Returns the hash code value for this map entry
Returns a String representation of this map entry
Returns the key corresponding to this entry
Returns the value corresponding to this entry
Replaces the value corresponding to this entry with the specified value
Compares the specified object with this entry for equality
Returns the hash code value for this map entry
Returns a String representation of this map entry
Returns the key corresponding to this entry
Returns the value corresponding to this entry
Replaces the value corresponding to this entry with the specified value optional operation
Compares the specified object with this entry for equality
Returns the hash code value for this map entry
Returns a String representation of this map entry
Gets a string for the given key from this resource bundle or one of its parents
Gets a string array for the given key from this resource bundle or one of its parents
Gets an object for the given key from this resource bundle or one of its parents
Returns the locale of this resource bundle
Sets the parent bundle of this bundle
Gets a resource bundle using the specified base name the default locale and the caller's class loader
Returns a resource bundle using the specified base name the default locale and the specified control
Gets a resource bundle using the specified base name and locale and the caller's class loader
Returns a resource bundle using the specified base name target locale and control and the caller's class loader
Gets a resource bundle using the specified base name locale and class loader
Returns a resource bundle using the specified base name target locale class loader and control
Checks if the given List is not null not empty not having null in its elements
Determines whether any of resource bundles in the parent chain including the leaf have expired
Declares the beginning of actual resource bundle loading
Declares the end of the bundle loading
Throw a MissingResourceException with proper message
Finds a bundle in the cache
Put a new bundle in the cache
Removes all resource bundles from the cache that have been loaded using the caller's class loader
Removes all resource bundles from the cache that have been loaded using the given class loader
Gets an object for the given key from this resource bundle
Returns an enumeration of the keys
Determines whether the given key is contained in this ResourceBundle or its parent bundles
Returns a Set of all keys contained in this ResourceBundle and its parent bundles
Returns a Set of the keys contained only in this ResourceBundle
Returns a ResourceBundle
Returns a ResourceBundle
Returns a List of Strings containing formats to be used to load resource bundles for the given baseName
Returns a List of Locales as candidate locales for baseName and locale
Returns a Locale to be used as a fallback locale for further resource bundle searches by the ResourceBundle
Instantiates a resource bundle for the given bundle name of the given format and locale using the given class loader if necessary
Returns the timetolive TTL value for resource bundles that are loaded under this ResourceBundle
Determines if the expired bundle in the cache needs to be reloaded based on the loading time given by loadTime or some other criteria
Converts the given baseName and locale to the bundle name
Converts the given bundleName to the form required by the link ClassLoadergetResource ClassLoader
Returns a ResourceBundle
Returns a ResourceBundle
Returns a List of Strings containing formats to be used to load resource bundles for the given baseName
Returns a List of Locales as candidate locales for baseName and locale
Returns a Locale to be used as a fallback locale for further resource bundle searches by the ResourceBundle
Instantiates a resource bundle for the given bundle name of the given format and locale using the given class loader if necessary
Returns the timetolive TTL value for resource bundles that are loaded under this ResourceBundle
Determines if the expired bundle in the cache needs to be reloaded based on the loading time given by loadTime or some other criteria
Converts the given baseName and locale to the bundle name
Converts the given bundleName to the form required by the link ClassLoadergetResource ClassLoader
Returns a ResourceBundle
Returns a ResourceBundle
Returns a List of Strings containing formats to be used to load resource bundles for the given baseName
Returns a List of Locales as candidate locales for baseName and locale
Returns a Locale to be used as a fallback locale for further resource bundle searches by the ResourceBundle
Instantiates a resource bundle for the given bundle name of the given format and locale using the given class loader if necessary
Returns the timetolive TTL value for resource bundles that are loaded under this ResourceBundle
Determines if the expired bundle in the cache needs to be reloaded based on the loading time given by loadTime or some other criteria
Converts the given baseName and locale to the bundle name
Converts the given bundleName to the form required by the link ClassLoadergetResource ClassLoader
Returns the format specifier which does not have a width
Appends the specified element to the end of this list optional operation
inheritDoc
inheritDoc This implementation always throws an code UnsupportedOperationException
inheritDoc This implementation always throws an code UnsupportedOperationException
inheritDoc This implementation always throws an code UnsupportedOperationException
inheritDoc This implementation first gets a list iterator with code listIterator
inheritDoc This implementation first gets a list iterator that points to the end of the list with code listIteratorsize
Removes all of the elements from this list optional operation
inheritDoc This implementation gets an iterator over the specified collection and iterates over it inserting the elements obtained from the iterator into this list at the appropriate position one at a time using code addint E
Returns an iterator over the elements in this list in proper sequence
inheritDoc This implementation returns code listIterator
inheritDoc This implementation returns a straightforward implementation of the code ListIterator interface that extends the implementation of the code Iterator interface returned by the code iterator method
inheritDoc This implementation returns a list that subclasses code AbstractList
Compares the specified object with this list for equality
Returns the hash code value for this list
Removes from this list all of the elements whose index is between code fromIndex inclusive and code toIndex exclusive
Returns the number of elements in this list
Returns true if this list contains no elements
Returns true if this list contains the specified element
Returns an iterator over the elements in this list in proper sequence
Returns an array containing all of the elements in this list in proper sequence from first to last element
Returns an array containing all of the elements in this list in proper sequence from first to last element the runtime type of the returned array is that of the specified array
Appends the specified element to the end of this list optional operation
Removes the first occurrence of the specified element from this list if it is present optional operation
Returns true if this list contains all of the elements of the specified collection
Appends all of the elements in the specified collection to the end of this list in the order that they are returned by the specified collection's iterator optional operation
Inserts all of the elements in the specified collection into this list at the specified position optional operation
Removes from this list all of its elements that are contained in the specified collection optional operation
Retains only the elements in this list that are contained in the specified collection optional operation
Removes all of the elements from this list optional operation
Compares the specified object with this list for equality
Returns the hash code value for this list
Returns the element at the specified position in this list
Replaces the element at the specified position in this list with the specified element optional operation
Inserts the specified element at the specified position in this list optional operation
Removes the element at the specified position in this list optional operation
Returns the index of the first occurrence of the specified element in this list or if this list does not contain the element
Returns the index of the last occurrence of the specified element in this list or if this list does not contain the element
Returns a list iterator over the elements in this list in proper sequence
Returns a list iterator over the elements in this list in proper sequence starting at the specified position in the list
Returns a view of the portion of this list between the specified fromIndex inclusive and toIndex exclusive
Returns an iterator over the elements contained in this set
Returns the number of elements in this set
Returns true if this set contains no elements
Returns true if this set contains the specified element
Adds the specified element to this set if it is not already present
Removes the specified element from this set if it is present
Returns true if this set contains all of the elements in the specified collection
Adds all of the elements in the specified collection to this set
Removes from this set all of its elements that are contained in the specified collection
Retains only the elements in this set that are contained in the specified collection
Removes all of the elements from this set
Compares the specified object with this set for equality
Recalculates the size of the set
Return a copy of this object
Determines the date and time based on the arguments
Attempts to interpret the string s as a representation of a date and time
Returns a value that is the result of subtracting from the year that contains or begins with the instant in time represented by this Date object as interpreted in the local time zone
Sets the year of this Date object to be the specified value plus
Returns a number representing the month that contains or begins with the instant in time represented by this Date object
Sets the month of this date to the specified value
Returns the day of the month represented by this Date object
Sets the day of the month of this Date object to the specified value
Returns the day of the week represented by this date
Returns the hour represented by this Date object
Sets the hour of this Date object to the specified value
Returns the number of minutes past the hour represented by this date as interpreted in the local time zone
Sets the minutes of this Date object to the specified value
Returns the number of seconds past the minute represented by this date
Sets the seconds of this Date to the specified value
Returns the number of milliseconds since January GMT represented by this Date object
Sets this Date object to represent a point in time that is time milliseconds after January GMT
Tests if this date is before the specified date
Tests if this date is after the specified date
Compares two dates for equality
Returns the millisecond value of this Date object without affecting its internal state
Compares two Dates for ordering
Returns a hash code value for this object
Converts this Date object to a String of the form dow mon dd hhmmss zzz yyyy where dow is the day of the week Sun Mon Tue Wed Thu Fri Sat
Converts the given name to its letter abbreviation e
Creates a string representation of this Date object in an implementationdependent form
Creates a string representation of this Date object of the form d mon yyyy hhmmss GMT where d is the day of the month through as one or two decimal digits
Returns the offset measured in minutes for the local time zone relative to UTC that is appropriate for the time represented by this Date object
Returns the Gregorian or Julian calendar system to use with the given date
Save the state of this object to a stream i
Reconstitute this object from a stream i
Clear this loader's provider cache so that all providers will be reloaded
Lazily loads the available providers of this loader's service
Creates a new service loader for the given service type and class loader
Creates a new service loader for the given service type using the current thread's linkplain java
Creates a new service loader for the given service type using the extension class loader
Returns a string describing this service
Returns the number of keys in this hashtable
Tests if this hashtable maps no keys to values
Returns an enumeration of the keys in this hashtable
Returns an enumeration of the values in this hashtable
Tests if some key maps into the specified value in this hashtable
Returns true if this hashtable maps one or more keys to this value
Tests if the specified object is a key in this hashtable
Returns the value to which the specified key is mapped or code null if this map contains no mapping for the key
Increases the capacity of and internally reorganizes this hashtable in order to accommodate and access its entries more efficiently
Maps the specified key to the specified value in this hashtable
Removes the key and its corresponding value from this hashtable
Copies all of the mappings from the specified map to this hashtable
Clears this hashtable so that it contains no keys
Creates a shallow copy of this hashtable
Returns a string representation of this Hashtable object in the form of a set of entries enclosed in braces and separated by the ASCII characters nbsp comma and space
Returns a link Set view of the keys contained in this map
Returns a link Set view of the mappings contained in this map
Returns a link Collection view of the values contained in this map
Compares the specified Object with this Map for equality as per the definition in the Map interface
Returns the hash code value for this Map as per the definition in the Map interface
Save the state of the Hashtable to a stream i
Reconstitute the Hashtable from a stream i
The put method used by readObject
Initializes queue array with elements from the given Collection
Increases the capacity of the array
Inserts the specified element into this priority queue
Inserts the specified element into this priority queue
Removes a single instance of the specified element from this queue if it is present
Version of remove using reference equality not equals
Returns code true if this queue contains the specified element
Returns an array containing all of the elements in this queue
Returns an array containing all of the elements in this queue the runtime type of the returned array is that of the specified array
Returns an iterator over the elements in this queue
Removes all of the elements from this priority queue
Removes the ith element from queue
Inserts item x at position k maintaining heap invariant by promoting x up the tree until it is greater than or equal to its parent or is the root
Inserts item x at position k maintaining heap invariant by demoting x down the tree repeatedly until it is less than or equal to its children or is a leaf
Establishes the heap invariant described above in the entire tree assuming nothing about the order of the elements prior to the call
Returns the comparator used to order the elements in this queue or code null if this queue is sorted according to the linkplain Comparable natural ordering of its elements
Saves the state of the instance to a stream that is serializes it
Reconstitutes the code PriorityQueue instance from a stream that is deserializes it
Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions returning true upon success and throwing an IllegalStateException if no space is currently available
Retrieves and removes the head of this queue
Retrieves but does not remove the head of this queue
Removes all of the elements from this queue
Adds all of the elements in the specified collection to this queue
Sorts the specified array of longs into ascending numerical order
Sorts the specified range of the specified array of longs into ascending numerical order
Sorts the specified array of ints into ascending numerical order
Sorts the specified range of the specified array of ints into ascending numerical order
Sorts the specified array of shorts into ascending numerical order
Sorts the specified range of the specified array of shorts into ascending numerical order
Sorts the specified array of chars into ascending numerical order
Sorts the specified range of the specified array of chars into ascending numerical order
Sorts the specified array of bytes into ascending numerical order
Sorts the specified range of the specified array of bytes into ascending numerical order
Sorts the specified array of doubles into ascending numerical order
Sorts the specified range of the specified array of doubles into ascending numerical order
Sorts the specified array of floats into ascending numerical order
Sorts the specified range of the specified array of floats into ascending numerical order
Sorts the specified subarray of longs into ascending order
Swaps xa with xb
Swaps xa
Returns the index of the median of the three indexed longs
Sorts the specified subarray of integers into ascending order
Swaps xa with xb
Swaps xa
Returns the index of the median of the three indexed integers
Sorts the specified subarray of shorts into ascending order
Swaps xa with xb
Swaps xa
Returns the index of the median of the three indexed shorts
Sorts the specified subarray of chars into ascending order
Swaps xa with xb
Swaps xa
Returns the index of the median of the three indexed chars
Sorts the specified subarray of bytes into ascending order
Swaps xa with xb
Swaps xa
Returns the index of the median of the three indexed bytes
Sorts the specified subarray of doubles into ascending order
Swaps xa with xb
Swaps xa
Returns the index of the median of the three indexed doubles
Sorts the specified subarray of floats into ascending order
Swaps xa with xb
Swaps xa
Returns the index of the median of the three indexed floats
Sorts the specified array of objects into ascending order according to the linkplain Comparable natural ordering of its elements
Sorts the specified range of the specified array of objects into ascending order according to the linkplain Comparable natural ordering of its elements
Src is the source array that starts at index Dest is the possibly larger array destination with a possible offset low is the index in dest to start sorting high is the end index in dest to end sorting off is the offset to generate corresponding low high in src
Swaps xa with xb
Sorts the specified array of objects according to the order induced by the specified comparator
Sorts the specified range of the specified array of objects according to the order induced by the specified comparator
Src is the source array that starts at index Dest is the possibly larger array destination with a possible offset low is the index in dest to start sorting high is the end index in dest to end sorting off is the offset into src corresponding to low in dest
Check that fromIndex and toIndex are in range and throw an appropriate exception if they aren't
Searches the specified array of longs for the specified value using the binary search algorithm
Searches a range of the specified array of longs for the specified value using the binary search algorithm
Searches the specified array of ints for the specified value using the binary search algorithm
Searches a range of the specified array of ints for the specified value using the binary search algorithm
Searches the specified array of shorts for the specified value using the binary search algorithm
Searches a range of the specified array of shorts for the specified value using the binary search algorithm
Searches the specified array of chars for the specified value using the binary search algorithm
Searches a range of the specified array of chars for the specified value using the binary search algorithm
Searches the specified array of bytes for the specified value using the binary search algorithm
Searches a range of the specified array of bytes for the specified value using the binary search algorithm
Searches the specified array of doubles for the specified value using the binary search algorithm
Searches a range of the specified array of doubles for the specified value using the binary search algorithm
Searches the specified array of floats for the specified value using the binary search algorithm
Searches a range of the specified array of floats for the specified value using the binary search algorithm
Searches the specified array for the specified object using the binary search algorithm
Searches a range of the specified array for the specified object using the binary search algorithm
Searches the specified array for the specified object using the binary search algorithm
Searches a range of the specified array for the specified object using the binary search algorithm
Returns true if the two specified arrays of longs are equal to one another
Returns true if the two specified arrays of ints are equal to one another
Returns true if the two specified arrays of shorts are equal to one another
Returns true if the two specified arrays of chars are equal to one another
Returns true if the two specified arrays of bytes are equal to one another
Returns true if the two specified arrays of booleans are equal to one another
Returns true if the two specified arrays of doubles are equal to one another
Returns true if the two specified arrays of floats are equal to one another
Returns true if the two specified arrays of Objects are equal to one another
Assigns the specified long value to each element of the specified array of longs
Assigns the specified long value to each element of the specified range of the specified array of longs
Assigns the specified int value to each element of the specified array of ints
Assigns the specified int value to each element of the specified range of the specified array of ints
Assigns the specified short value to each element of the specified array of shorts
Assigns the specified short value to each element of the specified range of the specified array of shorts
Assigns the specified char value to each element of the specified array of chars
Assigns the specified char value to each element of the specified range of the specified array of chars
Assigns the specified byte value to each element of the specified array of bytes
Assigns the specified byte value to each element of the specified range of the specified array of bytes
Assigns the specified boolean value to each element of the specified array of booleans
Assigns the specified boolean value to each element of the specified range of the specified array of booleans
Assigns the specified double value to each element of the specified array of doubles
Assigns the specified double value to each element of the specified range of the specified array of doubles
Assigns the specified float value to each element of the specified array of floats
Assigns the specified float value to each element of the specified range of the specified array of floats
Assigns the specified Object reference to each element of the specified array of Objects
Assigns the specified Object reference to each element of the specified range of the specified array of Objects
Copies the specified array truncating or padding with nulls if necessary so the copy has the specified length
Copies the specified array truncating or padding with nulls if necessary so the copy has the specified length
Copies the specified array truncating or padding with zeros if necessary so the copy has the specified length
Copies the specified array truncating or padding with zeros if necessary so the copy has the specified length
Copies the specified array truncating or padding with zeros if necessary so the copy has the specified length
Copies the specified array truncating or padding with zeros if necessary so the copy has the specified length
Copies the specified array truncating or padding with null characters if necessary so the copy has the specified length
Copies the specified array truncating or padding with zeros if necessary so the copy has the specified length
Copies the specified array truncating or padding with zeros if necessary so the copy has the specified length
Copies the specified array truncating or padding with false if necessary so the copy has the specified length
Copies the specified range of the specified array into a new array
Copies the specified range of the specified array into a new array
Copies the specified range of the specified array into a new array
Copies the specified range of the specified array into a new array
Copies the specified range of the specified array into a new array
Copies the specified range of the specified array into a new array
Copies the specified range of the specified array into a new array
Copies the specified range of the specified array into a new array
Copies the specified range of the specified array into a new array
Copies the specified range of the specified array into a new array
Returns a fixedsize list backed by the specified array
Returns a hash code based on the contents of the specified array
Returns a hash code based on the contents of the specified array
Returns a hash code based on the contents of the specified array
Returns a hash code based on the contents of the specified array
Returns a hash code based on the contents of the specified array
Returns a hash code based on the contents of the specified array
Returns a hash code based on the contents of the specified array
Returns a hash code based on the contents of the specified array
Returns a hash code based on the contents of the specified array
Returns a hash code based on the deep contents of the specified array
Returns true if the two specified arrays are deeply equal to one another
Returns a string representation of the contents of the specified array
Returns a string representation of the contents of the specified array
Returns a string representation of the contents of the specified array
Returns a string representation of the contents of the specified array
Returns a string representation of the contents of the specified array
Returns a string representation of the contents of the specified array
Returns a string representation of the contents of the specified array
Returns a string representation of the contents of the specified array
Returns a string representation of the contents of the specified array
Returns a string representation of the deep contents of the specified array
Returns the set of flags which contains an unknown flag
This method is called whenever the observed object is changed
Returns an iterator over the elements contained in this set
Returns the number of elements in this set
Returns true if this set contains no elements
Returns true if this set contains the specified element
Adds the specified element to this set if it is not already present
Removes the specified element from this set if it is present
Returns true if this set contains all of the elements in the specified collection
Adds all of the elements in the specified collection to this set
Removes from this set all of its elements that are contained in the specified collection
Retains only the elements in this set that are contained in the specified collection
Removes all of the elements from this set
Compares the specified object with this set for equality
Gets a calendar using the default time zone and locale
Gets a calendar using the specified time zone and default locale
Gets a calendar using the default time zone and specified locale
Gets a calendar with the specified time zone and locale
Returns an array of all locales for which the getInstance methods of this class can return localized instances
Converts the current calendar field values in link fields fields to the millisecond time value link time
Converts the current millisecond time value link time to calendar field values in link fields fields
Returns a Date object representing this Calendar's time value millisecond offset from the a hrefEpochEpoch
Sets this Calendar's time with the given Date
Returns this Calendar's time value in milliseconds
Sets this Calendar's current time from the given long value
Returns the value of the given calendar field
Returns the value of the given calendar field
Sets the value of the given calendar field
Sets the given calendar field to the given value
Sets the values for the calendar fields YEAR MONTH and DAY_OF_MONTH
Sets the values for the calendar fields YEAR MONTH DAY_OF_MONTH HOUR_OF_DAY and MINUTE
Sets the values for the fields YEAR MONTH DAY_OF_MONTH HOUR MINUTE and SECOND
Sets all the calendar field values and the time value millisecond offset from the Epoch of this Calendar undefined
Sets the given calendar field value and the time value millisecond offset from the Epoch of this Calendar undefined
Determines if the given calendar field has a value set including cases that the value has been set by internal fields calculations triggered by a get method call
Returns the string representation of the calendar field value in the given style and locale
Returns a Map containing all names of the calendar field in the given style and locale and their corresponding field values
Fills in any unset fields in the calendar fields
Returns whether the value of the specified calendar field has been set externally by calling one of the setter methods rather than by the internal time calculation
Returns a field mask bit mask indicating all calendar fields that have the state of externally or internally set
Sets the state of the specified calendar fields to computed
Sets the state of the calendar fields that are not specified by fieldMask to unset
Returns whether the calendar fields are partially in sync with the time value or fully in sync but not stamp values are not normalized yet
Returns whether the calendar fields are fully in sync with the time value
Marks this Calendar as not sync'd
Returns whether the specified field is on in the fieldMask
Returns a field mask indicating which calendar field values to be used to calculate the time value
Returns the pseudotimestamp for two fields given their individual pseudotimestamps
Compares this Calendar to the specified Object
Returns a hash code for this calendar
Returns whether this Calendar represents a time before the time represented by the specified Object
Returns whether this Calendar represents a time after the time represented by the specified Object
Compares the time values millisecond offsets from the a hrefEpochEpoch represented by two Calendar objects
Adds or subtracts the specified amount of time to the given calendar field based on the calendar's rules
Adds or subtracts updown a single unit of time on the given time field without changing larger fields
Adds the specified signed amount to the specified calendar field without changing larger fields
Sets the time zone with the given time zone value
Gets the time zone
Returns the time zone without cloning
Sets the sharedZone flag to shared
Specifies whether or not datetime interpretation is to be lenient
Tells whether datetime interpretation is to be lenient
Sets what the first day of the week is e
Gets what the first day of the week is e
Sets what the minimal days required in the first week of the year are For example if the first week is defined as one that contains the first day of the first month of a year call this method with value
Gets what the minimal days required in the first week of the year are e
Returns the minimum value for the given calendar field of this Calendar instance
Returns the maximum value for the given calendar field of this Calendar instance
Returns the highest minimum value for the given calendar field of this Calendar instance
Returns the lowest maximum value for the given calendar field of this Calendar instance
Returns the minimum value that the specified calendar field could have given the time value of this Calendar
Returns the maximum value that the specified calendar field could have given the time value of this Calendar
Creates and returns a copy of this object
Returns the name of the specified calendar field
Return a string representation of this calendar
Both firstDayOfWeek and minimalDaysInFirstWeek are localedependent
Recomputes the time and updates the status fields isTimeSet and areFieldsSet
Adjusts the stamp values before nextStamp overflow
Sets the WEEK_OF_MONTH and WEEK_OF_YEAR fields to new values with the new parameter value if they have been calculated internally
Save the state of this object to a stream i
Reconstitutes this object from a stream i
Returns the width
Returns the number of keyvalue mappings in this map
Returns true if this map maps one or more keys to the specified value
Returns true if this map contains a mapping for the specified key
Returns the value to which the specified key is mapped or code null if this map contains no mapping for the key
Associates the specified value with the specified key in this map
Removes the mapping for this key from this map if present
Returns true if key is of the proper type to be a key in this enum map
Copies all of the mappings from the specified map to this map
Removes all mappings from this map
Returns a link Set view of the keys contained in this map
Returns a link Collection view of the values contained in this map
Returns a link Set view of the mappings contained in this map
Compares the specified object with this map for equality
Returns a shallow copy of this enum map
Throws an exception if e is not of the correct type for this enum set
Returns all of the values comprising K
Save the state of the EnumMap instance to a stream i
Reconstitute the EnumMap instance from a stream i
Closes this scanner
Returns the IOException last thrown by this Scanner's underlying Readable
Returns the Pattern this Scanner is currently using to match delimiters
Sets this scanner's delimiting pattern to the specified pattern
Sets this scanner's delimiting pattern to a pattern constructed from the specified String
Returns this scanner's locale
Sets this scanner's locale to the specified locale
Returns this scanner's default radix
Sets this scanner's default radix to the specified radix
Returns the match result of the last scanning operation performed by this scanner
Returns the string representation of this Scanner
Returns true if this scanner has another token in its input
Finds and returns the next complete token from this scanner
The remove operation is not supported by this implementation of Iterator
Returns true if the next token matches the pattern constructed from the specified string
Returns the next token if it matches the pattern constructed from the specified string
Returns true if the next complete token matches the specified pattern
Returns the next token if it matches the specified pattern
Returns true if there is another line in the input of this scanner
Advances this scanner past the current line and returns the input that was skipped
Attempts to find the next occurrence of a pattern constructed from the specified string ignoring delimiters
Attempts to find the next occurrence of the specified pattern ignoring delimiters
Attempts to find the next occurrence of a pattern constructed from the specified string ignoring delimiters
Attempts to find the next occurrence of the specified pattern
Skips input that matches the specified pattern ignoring delimiters
Skips input that matches a pattern constructed from the specified string
Returns true if the next token in this scanner's input can be interpreted as a boolean value using a case insensitive pattern created from the string true|false
Scans the next token of the input into a boolean value and returns that value
Returns true if the next token in this scanner's input can be interpreted as a byte value in the default radix using the link nextByte method
Returns true if the next token in this scanner's input can be interpreted as a byte value in the specified radix using the link nextByte method
Scans the next token of the input as a byte
Scans the next token of the input as a byte
Returns true if the next token in this scanner's input can be interpreted as a short value in the default radix using the link nextShort method
Returns true if the next token in this scanner's input can be interpreted as a short value in the specified radix using the link nextShort method
Scans the next token of the input as a short
Scans the next token of the input as a short
Returns true if the next token in this scanner's input can be interpreted as an int value in the default radix using the link nextInt method
Returns true if the next token in this scanner's input can be interpreted as an int value in the specified radix using the link nextInt method
The integer token must be stripped of prefixes group separators and suffixes non ascii digits must be converted into ascii digits before parse will accept it
Scans the next token of the input as an int
Scans the next token of the input as an int
Returns true if the next token in this scanner's input can be interpreted as a long value in the default radix using the link nextLong method
Returns true if the next token in this scanner's input can be interpreted as a long value in the specified radix using the link nextLong method
Scans the next token of the input as a long
Scans the next token of the input as a long
The float token must be stripped of prefixes group separators and suffixes non ascii digits must be converted into ascii digits before parseFloat will accept it
Returns true if the next token in this scanner's input can be interpreted as a float value using the link nextFloat method
Scans the next token of the input as a float
Returns true if the next token in this scanner's input can be interpreted as a double value using the link nextDouble method
Scans the next token of the input as a double
Returns true if the next token in this scanner's input can be interpreted as a BigInteger in the default radix using the link nextBigInteger method
Returns true if the next token in this scanner's input can be interpreted as a BigInteger in the specified radix using the link nextBigInteger method
Scans the next token of the input as a link java
Scans the next token of the input as a link java
Returns true if the next token in this scanner's input can be interpreted as a BigDecimal using the link nextBigDecimal method
Scans the next token of the input as a link java
Resets this scanner
Returns the inapplicable conversion
Returns the class of the mismatched argument
Allocate empty array to hold the given number of elements
Double the capacity of this deque
Copies the elements from our element array into the specified array in order from first to last element in the deque
Inserts the specified element at the front of this deque
Inserts the specified element at the end of this deque
Inserts the specified element at the front of this deque
Inserts the specified element at the end of this deque
NoSuchElementException inheritDoc
NoSuchElementException inheritDoc
NoSuchElementException inheritDoc
NoSuchElementException inheritDoc
Removes the first occurrence of the specified element in this deque when traversing the deque from head to tail
Removes the last occurrence of the specified element in this deque when traversing the deque from head to tail
Inserts the specified element at the end of this deque
Inserts the specified element at the end of this deque
Retrieves and removes the head of the queue represented by this deque
Retrieves and removes the head of the queue represented by this deque in other words the first element of this deque or returns null if this deque is empty
Retrieves but does not remove the head of the queue represented by this deque
Retrieves but does not remove the head of the queue represented by this deque or returns null if this deque is empty
Pushes an element onto the stack represented by this deque
Pops an element from the stack represented by this deque
Removes the element at the specified position in the elements array adjusting head and tail as necessary
Returns the number of elements in this deque
Returns true if this deque contains no elements
Returns an iterator over the elements in this deque
Returns true if this deque contains the specified element
Removes a single instance of the specified element from this deque
Removes all of the elements from this deque
Returns an array containing all of the elements in this deque in proper sequence from first to last element
Returns an array containing all of the elements in this deque in proper sequence from first to last element the runtime type of the returned array is that of the specified array
Returns a copy of this deque
Serialize this deque
Deserialize this deque
Use NULL_KEY for key if it is null
Returns internal representation of null key back to caller as null
Returns the appropriate capacity for the specified expected maximum size
Initializes object to be an empty map with the specified initial capacity which is assumed to be a power of two between MINIMUM_CAPACITY and MAXIMUM_CAPACITY inclusive
Returns the number of keyvalue mappings in this identity hash map
Returns true if this identity hash map contains no keyvalue mappings
Returns index for Object x
Circularly traverses table of size len
Returns the value to which the specified key is mapped or code null if this map contains no mapping for the key
Tests whether the specified object reference is a key in this identity hash map
Tests whether the specified object reference is a value in this identity hash map
Tests if the specified keyvalue mapping is in the map
Associates the specified value with the specified key in this identity hash map
Resize the table to hold given capacity
Copies all of the mappings from the specified map to this map
Removes the mapping for this key from this map if present
Removes the specified keyvalue mapping from the map if it is present
Rehash all possiblycolliding entries following a deletion
Removes all of the mappings from this map
Compares the specified object with this map for equality
Returns the hash code value for this map
Returns a shallow copy of this identity hash map the keys and values themselves are not cloned
Returns an identitybased set view of the keys contained in this map
Returns a link Collection view of the values contained in this map
Returns a link Set view of the mappings contained in this map
Save the state of the IdentityHashMap instance to a stream i
Reconstitute the IdentityHashMap instance from a stream i
The put method for readObject
Returns an iterator over the elements contained in this collection
inheritDoc This implementation returns size
inheritDoc This implementation iterates over the elements in the collection checking each element in turn for equality with the specified element
inheritDoc This implementation returns an array containing all the elements returned by this collection's iterator in the same order stored in consecutive elements of the array starting with index code
inheritDoc This implementation returns an array containing all the elements returned by this collection's iterator in the same order stored in consecutive elements of the array starting with index code
Reallocates the array being used within toArray when the iterator returned more elements than expected and finishes filling it from the iterator
inheritDoc This implementation always throws an UnsupportedOperationException
inheritDoc This implementation iterates over the collection looking for the specified element
inheritDoc This implementation iterates over the specified collection checking each element returned by the iterator in turn to see if it's contained in this collection
inheritDoc This implementation iterates over the specified collection and adds each object returned by the iterator to this collection in turn
inheritDoc This implementation iterates over this collection checking each element returned by the iterator in turn to see if it's contained in the specified collection
inheritDoc This implementation iterates over this collection checking each element returned by the iterator in turn to see if it's contained in the specified collection
inheritDoc This implementation iterates over this collection removing each element using the Iterator
Returns a string representation of this collection
Adds an observer to the set of observers for this object provided that it is not the same as some observer already in the set
Deletes an observer from the set of observers of this object
If this object has changed as indicated by the hasChanged method then notify all of its observers and then call the clearChanged method to indicate that this object has no longer changed
If this object has changed as indicated by the hasChanged method then notify all of its observers and then call the clearChanged method to indicate that this object has no longer changed
Clears the observer list so that this object no longer has any observers
Marks this Observable object as having been changed the hasChanged method will now return true
Indicates that this object has no longer changed or that it has already notified all of its observers of its most recent change so that the hasChanged method will now return false
Tests if this object has changed
Returns the number of observers of this Observable object
Returns code true if the iteration has more elements
Returns the next element in the iteration
Removes from the underlying collection the last element returned by this iterator optional operation
Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions returning true upon success and throwing an IllegalStateException if no space is currently available
Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions
Retrieves and removes the head of this queue
Retrieves and removes the head of this queue or returns null if this queue is empty
Retrieves but does not remove the head of this queue
Retrieves but does not remove the head of this queue or returns null if this queue is empty
Loads the class with the specified binary name
Loads the class with the specified binary name
Finds the class with the specified binary name
Converts an array of bytes into an instance of class Class
Converts an array of bytes into an instance of class Class
Converts an array of bytes into an instance of class Class with an optional ProtectionDomain
Converts a link java
check to make sure the certs for the new class certs are the same as the certs for the first class inserted in the package pcerts
Links the specified class
Finds a class with the specified binary name loading it if necessary
Returns the class with the given binary name if this loader has been recorded by the Java virtual machine as an initiating loader of a class with that binary name
Sets the signers of a class
Finds the resource with the given name
Finds all the resources with the given name
Finds the resource with the given name
Returns an enumeration of link java
Find a resource of the specified name from the search path used to load classes
Finds all resources of the specified name from the search path used to load classes
Find resources from the VM's builtin classloader
Find resources from the VM's builtin classloader
Returns an input stream for reading the specified resource
Open for reading a resource of the specified name from the search path used to load classes
Returns the parent class loader for delegation
Returns the system class loader for delegation
Defines a package by name in this ClassLoader
Returns a Package that has been defined by this class loader or any of its ancestors
Returns all of the Packages defined by this class loader and its ancestors
Returns the absolute path name of a native library
Sets the default assertion status for this class loader
Sets the package default assertion status for the named package
Sets the desired assertion status for the named toplevel class in this class loader and any nested classes contained therein
Sets the default assertion status for this class loader to false and discards any package defaults or class assertion status settings associated with the class loader
Returns the assertion status that would be assigned to the specified class if it were to be initialized at the time this method is invoked

IndexOutOfBoundsException inheritDoc
IndexOutOfBoundsException inheritDoc




NullPointerException inheritDoc
IndexOutOfBoundsException inheritDoc
java
Appends the specified StringBuffer to this sequence
Appends the specified CharSequence to this sequence
IndexOutOfBoundsException inheritDoc
java
java

java
java
java
StringIndexOutOfBoundsException inheritDoc
StringIndexOutOfBoundsException inheritDoc
StringIndexOutOfBoundsException inheritDoc
StringIndexOutOfBoundsException inheritDoc
IndexOutOfBoundsException inheritDoc
StringIndexOutOfBoundsException inheritDoc
StringIndexOutOfBoundsException inheritDoc
StringIndexOutOfBoundsException inheritDoc
StringIndexOutOfBoundsException inheritDoc
StringIndexOutOfBoundsException inheritDoc
IndexOutOfBoundsException inheritDoc
IndexOutOfBoundsException inheritDoc
StringIndexOutOfBoundsException inheritDoc
IndexOutOfBoundsException inheritDoc
StringIndexOutOfBoundsException inheritDoc
StringIndexOutOfBoundsException inheritDoc
StringIndexOutOfBoundsException inheritDoc
StringIndexOutOfBoundsException inheritDoc
NullPointerException inheritDoc
NullPointerException inheritDoc
NullPointerException inheritDoc
NullPointerException inheritDoc
JDK
readObject is called to restore the state of the StringBuffer from a stream
readObject is called to restore the state of the StringBuffer from a stream
Returns the next hash code
Returns the current thread's initial value for this threadlocal variable
Returns the value in the current thread's copy of this threadlocal variable
Variant of set to establish initialValue
Sets the current thread's copy of this threadlocal variable to the specified value
Removes the current thread's value for this threadlocal variable
Get the map associated with a ThreadLocal
Create the map associated with a ThreadLocal
Factory method to create map of inherited thread locals
Method childValue is visibly defined in subclass InheritableThreadLocal but is internally defined here for the sake of providing createInheritedMap factory method without needing to subclass the map class in InheritableThreadLocal
Set the resize threshold to maintain at worst a load factor
Increment i modulo len
Decrement i modulo len
Get the entry associated with key
Version of getEntry method for use when key is not found in its direct hash slot
Set the value associated with key
Remove the entry for key
Replace a stale entry encountered during a set operation with an entry for the specified key
Expunge a stale entry by rehashing any possibly colliding entries lying between staleSlot and the next null slot
Heuristically scan some cells looking for stale entries
Repack andor resize the table
Double the capacity of the table
Expunge all stale entries in the table
Set the resize threshold to maintain at worst a load factor
Increment i modulo len
Decrement i modulo len
Get the entry associated with key
Version of getEntry method for use when key is not found in its direct hash slot
Set the value associated with key
Remove the entry for key
Replace a stale entry encountered during a set operation with an entry for the specified key
Expunge a stale entry by rehashing any possibly colliding entries lying between staleSlot and the next null slot
Heuristically scan some cells looking for stale entries
Repack andor resize the table
Double the capacity of the table
Expunge all stale entries in the table
Set the resize threshold to maintain at worst a load factor
Increment i modulo len
Decrement i modulo len
Get the entry associated with key
Version of getEntry method for use when key is not found in its direct hash slot
Set the value associated with key
Remove the entry for key
Replace a stale entry encountered during a set operation with an entry for the specified key
Expunge a stale entry by rehashing any possibly colliding entries lying between staleSlot and the next null slot
Heuristically scan some cells looking for stale entries
Repack andor resize the table
Double the capacity of the table
Expunge all stale entries in the table
Returns the name representing this memory manager
Tests if this memory manager is valid in the Java virtual machine
Returns the name of memory pools that this memory manager manages
Returns the depth in the stack trace where the object monitor was locked
Returns the stack frame that locked the object monitor
Returns a MonitorInfo object represented by the given CompositeData
Returns the managed bean for the class loading system of the Java virtual machine
Returns the managed bean for the memory system of the Java virtual machine
Returns the managed bean for the thread system of the Java virtual machine
Returns the managed bean for the runtime system of the Java virtual machine
Returns the managed bean for the compilation system of the Java virtual machine
Returns the managed bean for the operating system on which the Java virtual machine is running
Returns a list of link MemoryPoolMXBean objects in the Java virtual machine
Returns a list of link MemoryManagerMXBean objects in the Java virtual machine
Returns a list of link GarbageCollectorMXBean objects in the Java virtual machine
Returns the platform link javax
Returns a proxy for a platform MXBean interface of a given MXBean name that forwards its method calls through the given MBeanServerConnection
Returns the operating system name
Returns the operating system architecture
Returns the operating system version
Returns the number of processors available to the Java virtual machine
Returns the system load average for the last minute
Returns the string representation of this MemoryType
Returns the approximate number of objects for which finalization is pending
Returns the current memory usage of the heap that is used for object allocation
Returns the current memory usage of nonheap memory that is used by the Java virtual machine
Tests if verbose output for the memory system is enabled
Enables or disables verbose output for the memory system
Runs the garbage collector
Returns the total number of collections that have occurred
Returns the approximate accumulated collection elapsed time in milliseconds
Returns the fully qualified name of the class of the lock object
Returns the identity hash code of the lock object returned from the link SystemidentityHashCode method
Returns a string representation of a lock
Returns the amount of memory in bytes that the Java virtual machine initially requests from the operating system for memory management
Returns the amount of used memory in bytes
Returns the amount of memory in bytes that is committed for the Java virtual machine to use
Returns the maximum amount of memory in bytes that can be used for memory management
Returns a descriptive representation of this memory usage
Returns a MemoryUsage object represented by the given CompositeData
Returns the name of the memory pool that triggers this notification
Returns the memory usage of the memory pool when this notification was constructed
Returns the number of times that the memory usage has crossed a threshold when the notification was constructed
Returns a MemoryNotificationInfo object represented by the given CompositeData
Returns the current number of live threads including both daemon and nondaemon threads
Returns the peak live thread count since the Java virtual machine started or peak was reset
Returns the total number of threads created and also started since the Java virtual machine started
Returns the current number of live daemon threads
Returns all live thread IDs
Returns the thread info for a thread of the specified id with no stack trace
Returns the thread info for each thread whose ID is in the input array ids with no stack trace
Returns a thread info for a thread of the specified id with stack trace of a specified number of stack trace elements
Returns the thread info for each thread whose ID is in the input array ids with stack trace of a specified number of stack trace elements
Tests if the Java virtual machine supports thread contention monitoring
Tests if thread contention monitoring is enabled
Enables or disables thread contention monitoring
Returns the total CPU time for the current thread in nanoseconds
Returns the CPU time that the current thread has executed in user mode in nanoseconds
Returns the total CPU time for a thread of the specified ID in nanoseconds
Returns the CPU time that a thread of the specified ID has executed in user mode in nanoseconds
Tests if the Java virtual machine implementation supports CPU time measurement for any thread
Tests if the Java virtual machine supports CPU time measurement for the current thread
Tests if thread CPU time measurement is enabled
Enables or disables thread CPU time measurement
Finds cycles of threads that are in deadlock waiting to acquire object monitors
Resets the peak thread count to the current number of live threads
Finds cycles of threads that are in deadlock waiting to acquire object monitors or a hrefLockInfo
Tests if the Java virtual machine supports monitoring of object monitor usage
Tests if the Java virtual machine supports monitoring of a hrefLockInfo
Returns the thread info for each thread whose ID is in the input array ids with stack trace and synchronization information
Returns the thread info for all live threads with stack trace and synchronization information
Returns the name of the Justintime JIT compiler
Tests if the Java virtual machine supports the monitoring of compilation time
Returns the approximate accumlated elapsed time in milliseconds spent in compilation
Initialize ThreadInfo object
Returns the ID of the thread associated with this ThreadInfo
Returns the name of the thread associated with this ThreadInfo
Returns the state of the thread associated with this ThreadInfo
Returns the approximate accumulated elapsed time in milliseconds that the thread associated with this ThreadInfo has blocked to enter or reenter a monitor since thread contention monitoring is enabled
Returns the total number of times that the thread associated with this ThreadInfo blocked to enter or reenter a monitor
Returns the approximate accumulated elapsed time in milliseconds that the thread associated with this ThreadInfo has waited for notification since thread contention monitoring is enabled
Returns the total number of times that the thread associated with this ThreadInfo waited for notification
Returns the LockInfo of an object for which the thread associated with this ThreadInfo is blocked waiting
Returns the link LockInfotoString string representation of an object for which the thread associated with this ThreadInfo is blocked waiting
Returns the ID of the thread which owns the object for which the thread associated with this ThreadInfo is blocked waiting
Returns the name of the thread which owns the object for which the thread associated with this ThreadInfo is blocked waiting
Returns the stack trace of the thread associated with this ThreadInfo
Tests if the thread associated with this ThreadInfo is suspended
Tests if the thread associated with this ThreadInfo is executing native code via the Java Native Interface JNI
Returns a string representation of this thread info
Returns a ThreadInfo object represented by the given CompositeData
Returns an array of link MonitorInfo objects each of which represents an object monitor currently locked by the thread associated with this ThreadInfo
Returns an array of link LockInfo objects each of which represents an a hrefLockInfo
Returns the name representing this memory pool
Returns the type of this memory pool
Returns an estimate of the memory usage of this memory pool
Returns the peak memory usage of this memory pool since the Java virtual machine was started or since the peak was reset
Resets the peak memory usage statistic of this memory pool to the current memory usage
Tests if this memory pool is valid in the Java virtual machine
Returns the name of memory managers that manages this memory pool
Returns the usage threshold value of this memory pool in bytes
Sets the threshold of this memory pool to the given threshold value if this memory pool supports the usage threshold
Tests if the memory usage of this memory pool reaches or exceeds its usage threshold value
Returns the number of times that the memory usage has crossed the usage threshold
Tests if this memory pool supports usage threshold
Returns the collection usage threshold value of this memory pool in bytes
Sets the collection usage threshold of this memory pool to the given threshold value
Tests if the memory usage of this memory pool after the most recent collection on which the Java virtual machine has expended effort has reached or exceeded its collection usage threshold
Returns the number of times that the Java virtual machine has detected that the memory usage has reached or exceeded the collection usage threshold
Returns the memory usage after the Java virtual machine most recently expended effort in recycling unused objects in this memory pool
Tests if this memory pool supports a collection usage threshold
Returns the total number of classes that have been loaded since the Java virtual machine has started execution
Returns the number of classes that are currently loaded in the Java virtual machine
Returns the total number of classes unloaded since the Java virtual machine has started execution
Tests if the verbose output for the class loading system is enabled
Enables or disables the verbose output for the class loading system
Returns the name representing the running Java virtual machine
Returns the Java virtual machine implementation name
Returns the Java virtual machine implementation vendor
Returns the Java virtual machine implementation version
Returns the Java virtual machine specification name
Returns the Java virtual machine specification vendor
Returns the Java virtual machine specification version
Returns the version of the specification for the management interface implemented by the running Java virtual machine
Returns the Java class path that is used by the system class loader to search for class files
Returns the Java library path
Tests if the Java virtual machine supports the boot class path mechanism used by the bootstrap class loader to search for class files
Returns the boot class path that is used by the bootstrap class loader to search for class files
Returns the input arguments passed to the Java virtual machine which does not include the arguments to the main method
Returns the uptime of the Java virtual machine in milliseconds
Returns the start time of the Java virtual machine in milliseconds
Returns a map of names and values of all system properties
java
Appends the specified StringBuffer to this sequence
IndexOutOfBoundsException inheritDoc
IndexOutOfBoundsException inheritDoc
java
java
java
java
java

StringIndexOutOfBoundsException inheritDoc
StringIndexOutOfBoundsException inheritDoc
StringIndexOutOfBoundsException inheritDoc
StringIndexOutOfBoundsException inheritDoc
StringIndexOutOfBoundsException inheritDoc
StringIndexOutOfBoundsException inheritDoc
StringIndexOutOfBoundsException inheritDoc
IndexOutOfBoundsException inheritDoc
IndexOutOfBoundsException inheritDoc
StringIndexOutOfBoundsException inheritDoc
IndexOutOfBoundsException inheritDoc
StringIndexOutOfBoundsException inheritDoc
StringIndexOutOfBoundsException inheritDoc
StringIndexOutOfBoundsException inheritDoc
StringIndexOutOfBoundsException inheritDoc
NullPointerException inheritDoc
NullPointerException inheritDoc
NullPointerException inheritDoc
NullPointerException inheritDoc
Save the state of the StringBuilder instance to a stream that is serialize it
readObject is called to restore the state of the StringBuffer from a stream
Attempts to read characters into the specified character buffer
Returns the name of this enum constant exactly as declared in its enum declaration
Returns the ordinal of this enumeration constant its position in its enum declaration where the initial constant is assigned an ordinal of zero
Returns the name of this enum constant as contained in the declaration
Returns true if the specified object is equal to this enum constant
Returns a hash code for this enum constant
Throws CloneNotSupportedException
Compares this enum with the specified object for order
Returns the Class object corresponding to this enum constant's enum type
Returns the enum constant of the specified enum type with the specified name
enum classes cannot have finalize methods
prevent default deserialization
Returns a string representation of the first argument in the radix specified by the second argument
Returns a string representation of the integer argument as an unsigned integer in basenbsp
Returns a string representation of the integer argument as an unsigned integer in basenbsp
Returns a string representation of the integer argument as an unsigned integer in basenbsp
Convert the integer to an unsigned number
Returns a code String object representing the specified integer
Places characters representing the integer i into the character array buf
Parses the string argument as a signed integer in the radix specified by the second argument
Parses the string argument as a signed decimal integer
Returns an code Integer object holding the value extracted from the specified code String when parsed with the radix given by the second argument
Returns an code Integer object holding the value of the specified code String
Returns an code Integer instance representing the specified code int value
Returns the value of this code Integer as a code byte
Returns the value of this code Integer as a code short
Returns the value of this code Integer as an code int
Returns the value of this code Integer as a code long
Returns the value of this code Integer as a code float
Returns the value of this code Integer as a code double
Returns a code String object representing this code Integer's value
Returns a hash code for this code Integer
Compares this object to the specified object
Determines the integer value of the system property with the specified name
Determines the integer value of the system property with the specified name
Returns the integer value of the system property with the specified name
Decodes a code String into an code Integer
Compares two code Integer objects numerically
Returns an code int value with at most a single onebit in the position of the highestorder leftmost onebit in the specified code int value
Returns an code int value with at most a single onebit in the position of the lowestorder rightmost onebit in the specified code int value
Returns the number of zero bits preceding the highestorder leftmost onebit in the two's complement binary representation of the specified code int value
Returns the number of zero bits following the lowestorder rightmost onebit in the two's complement binary representation of the specified code int value
Returns the number of onebits in the two's complement binary representation of the specified code int value
Returns the value obtained by rotating the two's complement binary representation of the specified code int value left by the specified number of bits
Returns the value obtained by rotating the two's complement binary representation of the specified code int value right by the specified number of bits
Returns the value obtained by reversing the order of the bits in the two's complement binary representation of the specified code int value
Returns the signum function of the specified code int value
Returns the value obtained by reversing the order of the bytes in the two's complement representation of the specified code int value
Compares this object with the specified object for order
Returns the output stream connected to the normal input of the subprocess
Returns the input stream connected to the normal output of the subprocess
Returns the input stream connected to the error output stream of the subprocess
Causes the current thread to wait if necessary until the process represented by this code Process object has terminated
Returns the exit value for the subprocess
Kills the subprocess
Returns the trigonometric sine of an angle
Returns the trigonometric cosine of an angle
Returns the trigonometric tangent of an angle
Returns the arc sine of a value the returned angle is in the range pi through pi
Returns the arc cosine of a value the returned angle is in the range
Returns the arc tangent of a value the returned angle is in the range pi through pi
Converts an angle measured in degrees to an approximately equivalent angle measured in radians
Converts an angle measured in radians to an approximately equivalent angle measured in degrees
Returns Euler's number e raised to the power of a code double value
Returns the natural logarithm base e of a code double value
Returns the base logarithm of a code double value
Returns the correctly rounded positive square root of a code double value
Returns the cube root of a code double value
Computes the remainder operation on two arguments as prescribed by the IEEE standard
Returns the smallest closest to negative infinity code double value that is greater than or equal to the argument and is equal to a mathematical integer
Returns the largest closest to positive infinity code double value that is less than or equal to the argument and is equal to a mathematical integer
Returns the code double value that is closest in value to the argument and is equal to a mathematical integer
Returns the angle theta from the conversion of rectangular coordinates code xnbspcode y to polar coordinates rnbsptheta
Returns the value of the first argument raised to the power of the second argument
Returns the closest code int to the argument
Returns the closest code long to the argument
Returns a code double value with a positive sign greater than or equal to code
Returns the absolute value of an code int value
Returns the absolute value of a code long value
Returns the absolute value of a code float value
Returns the absolute value of a code double value
Returns the greater of two code int values
Returns the greater of two code long values
Returns the greater of two code float values
Returns the greater of two code double values
Returns the smaller of two code int values
Returns the smaller of two code long values
Returns the smaller of two code float values
Returns the smaller of two code double values
Returns the size of an ulp of the argument
Returns the size of an ulp of the argument
Returns the signum function of the argument zero if the argument is zero
Returns the signum function of the argument zero if the argument is zero
Returns the hyperbolic sine of a code double value
Returns the hyperbolic cosine of a code double value
Returns the hyperbolic tangent of a code double value
Returns sqrtxnbspy without intermediate overflow or underflow
Returns exnbsp
Returns the natural logarithm of the sum of the argument and
Returns the first floatingpoint argument with the sign of the second floatingpoint argument
Returns the first floatingpoint argument with the sign of the second floatingpoint argument
Returns the unbiased exponent used in the representation of a code float
Returns the unbiased exponent used in the representation of a code double
Returns the floatingpoint number adjacent to the first argument in the direction of the second argument
Returns the floatingpoint number adjacent to the first argument in the direction of the second argument
Returns the floatingpoint value adjacent to code d in the direction of positive infinity
Returns the floatingpoint value adjacent to code f in the direction of positive infinity
Return code d times code scaleFactor rounded as if performed by a single correctly rounded floatingpoint multiply to a member of the double value set
Return code f times code scaleFactor rounded as if performed by a single correctly rounded floatingpoint multiply to a member of the float value set
Parses the string argument as a boolean
Returns the value of this code Boolean object as a boolean primitive
Returns a code Boolean instance representing the specified code boolean value
Returns a code Boolean with a value represented by the specified string
Returns a code String object representing the specified boolean
Returns a code String object representing this Boolean's value
Returns a hash code for this code Boolean object
Returns code true if and only if the argument is not code null and is a code Boolean object that represents the same code boolean value as this object
Returns code true if and only if the system property named by the argument exists and is equal to the string code true
Compares this code Boolean instance with another
Returns the detail message string of this throwable
Creates a localized description of this throwable
Returns the cause of this throwable or null if the cause is nonexistent or unknown
Initializes the cause of this throwable to the specified value
Returns a short description of this throwable
Prints this throwable and its backtrace to the standard error stream
Prints this throwable and its backtrace to the specified print stream
Print our stack trace as a cause for the specified stack trace
Prints this throwable and its backtrace to the specified print writer
Print our stack trace as a cause for the specified stack trace
Fills in the execution stack trace
Provides programmatic access to the stack trace information printed by link printStackTrace
Sets the stack trace elements that will be returned by link getStackTrace and printed by link printStackTrace and related methods
Returns the number of elements in the stack trace or if the stack trace is unavailable
Returns the specified element of the stack trace
Sets this process builder's operating system program and arguments
Sets this process builder's operating system program and arguments
Returns this process builder's operating system program and arguments
Returns a string map view of this process builder's environment
Returns this process builder's working directory
Sets this process builder's working directory
Tells whether this process builder merges standard error and standard output
Sets this process builder's redirectErrorStream property
Starts a new process using the attributes of this process builder
When an object implementing interface Runnable is used to create a thread starting the thread causes the object's run method to be called in that separately executing thread
Returns an iterator over a set of elements of type T
Returns the length of this string
Returns true if and only if link length is
Returns the char value at the specified index
Returns the character Unicode code point at the specified index
Returns the character Unicode code point before the specified index
Returns the number of Unicode code points in the specified text range of this String
Returns the index within this String that is offset from the given index by codePointOffset code points
Copy characters from this string into dst starting at dstBegin
Copies characters from this string into the destination character array
Copies characters from this string into the destination byte array
Encodes this code String into a sequence of bytes using the named charset storing the result into a new byte array
Encodes this code String into a sequence of bytes using the given linkplain java
Encodes this code String into a sequence of bytes using the platform's default charset storing the result into a new byte array
Compares this string to the specified object
Compares this string to the specified code StringBuffer
Compares this string to the specified code CharSequence
Compares this code String to another code String ignoring case considerations
Compares two strings lexicographically
Compares two strings lexicographically ignoring case differences
Tests if two string regions are equal
Tests if two string regions are equal
Tests if the substring of this string beginning at the specified index starts with the specified prefix
Tests if this string starts with the specified prefix
Tests if this string ends with the specified suffix
Returns a hash code for this string
Returns the index within this string of the first occurrence of the specified character
Returns the index within this string of the first occurrence of the specified character starting the search at the specified index
Returns the index within this string of the last occurrence of the specified character
Returns the index within this string of the last occurrence of the specified character searching backward starting at the specified index
Returns the index within this string of the first occurrence of the specified substring
Returns the index within this string of the first occurrence of the specified substring starting at the specified index
Code shared by String and StringBuffer to do searches
Returns the index within this string of the rightmost occurrence of the specified substring
Returns the index within this string of the last occurrence of the specified substring searching backward starting at the specified index
Code shared by String and StringBuffer to do searches
Returns a new string that is a substring of this string
Returns a new string that is a substring of this string
Returns a new character sequence that is a subsequence of this sequence
Concatenates the specified string to the end of this string
Returns a new string resulting from replacing all occurrences of oldChar in this string with newChar
Tells whether or not this string matches the given a href
Returns true if and only if this string contains the specified sequence of char values
Replaces the first substring of this string that matches the given a href
Replaces each substring of this string that matches the given a href
Replaces each substring of this string that matches the literal target sequence with the specified literal replacement sequence
Splits this string around matches of the given a href
Splits this string around matches of the given a href
Converts all of the characters in this String to lower case using the rules of the given Locale
Converts all of the characters in this String to lower case using the rules of the default locale
Converts all of the characters in this String to upper case using the rules of the given Locale
Converts all of the characters in this String to upper case using the rules of the default locale
Returns a copy of the string with leading and trailing whitespace omitted
This object which is already a string is itself returned
Converts this string to a new character array
Returns a formatted string using the specified format string and arguments
Returns a formatted string using the specified locale format string and arguments
Returns the string representation of the Object argument
Returns the string representation of the char array argument
Returns the string representation of a specific subarray of the char array argument
Returns a String that represents the character sequence in the array specified
Returns a String that represents the character sequence in the array specified
Returns the string representation of the boolean argument
Returns the string representation of the char argument
Returns the string representation of the int argument
Returns the string representation of the long argument
Returns the string representation of the float argument
Returns the string representation of the double argument
Returns a canonical representation for the string object
Returns a string representation of the code double argument
Returns a hexadecimal string representation of the code double argument
Returns a code Double object holding the code double value represented by the argument string code s
Returns a code Double instance representing the specified code double value
Returns a new code double initialized to the value represented by the specified code String as performed by the code valueOf method of class code Double
Returns code true if the specified number is a NotaNumber NaN value code false otherwise
Returns code true if the specified number is infinitely large in magnitude code false otherwise
Returns code true if this code Double value is a NotaNumber NaN code false otherwise
Returns code true if this code Double value is infinitely large in magnitude code false otherwise
Returns a string representation of this code Double object
Returns the value of this code Double as a code byte by casting to a code byte
Returns the value of this code Double as a code short by casting to a code short
Returns the value of this code Double as an code int by casting to type code int
Returns the value of this code Double as a code long by casting to type code long
Returns the code float value of this code Double object
Returns the code double value of this code Double object
Returns a hash code for this code Double object
Compares this object against the specified object
Returns a representation of the specified floatingpoint value according to the IEEE floatingpoint double format bit layout
Returns a representation of the specified floatingpoint value according to the IEEE floatingpoint double format bit layout preserving NotaNumber NaN values
Returns the code double value corresponding to a given bit representation
Compares two code Double objects numerically
Compares the two specified code double values
Returns the trigonometric sine of an angle
Returns the trigonometric cosine of an angle
Returns the trigonometric tangent of an angle
Returns the arc sine of a value the returned angle is in the range pi through pi
Returns the arc cosine of a value the returned angle is in the range
Returns the arc tangent of a value the returned angle is in the range pi through pi
Converts an angle measured in degrees to an approximately equivalent angle measured in radians
Converts an angle measured in radians to an approximately equivalent angle measured in degrees
Returns Euler's number e raised to the power of a code double value
Returns the natural logarithm base e of a code double value
Returns the base logarithm of a code double value
Returns the correctly rounded positive square root of a code double value
Returns the cube root of a code double value
Computes the remainder operation on two arguments as prescribed by the IEEE standard
Returns the smallest closest to negative infinity code double value that is greater than or equal to the argument and is equal to a mathematical integer
Returns the largest closest to positive infinity code double value that is less than or equal to the argument and is equal to a mathematical integer
Returns the code double value that is closest in value to the argument and is equal to a mathematical integer
Returns the angle theta from the conversion of rectangular coordinates code xnbspcode y to polar coordinates rnbsptheta
Returns the value of the first argument raised to the power of the second argument
Returns the closest code int to the argument
Returns the closest code long to the argument
Returns a code double value with a positive sign greater than or equal to code
Returns the absolute value of an code int value
Returns the absolute value of a code long value
Returns the absolute value of a code float value
Returns the absolute value of a code double value
Returns the greater of two code int values
Returns the greater of two code long values
Returns the greater of two code float values
Returns the greater of two code double values
Returns the smaller of two code int values
Returns the smaller of two code long values
Returns the smaller of two code float values
Returns the smaller of two code double values
Returns the size of an ulp of the argument
Returns the size of an ulp of the argument
Returns the signum function of the argument zero if the argument is zero
Returns the signum function of the argument zero if the argument is zero
Returns the hyperbolic sine of a code double value
Returns the hyperbolic cosine of a code double value
Returns the hyperbolic tangent of a code double value
Returns sqrtxnbspy without intermediate overflow or underflow
Returns exnbsp
Returns the natural logarithm of the sum of the argument and
Returns the first floatingpoint argument with the sign of the second floatingpoint argument
Returns the first floatingpoint argument with the sign of the second floatingpoint argument
Returns the unbiased exponent used in the representation of a code float
Returns the unbiased exponent used in the representation of a code double
Returns the floatingpoint number adjacent to the first argument in the direction of the second argument
Returns the floatingpoint number adjacent to the first argument in the direction of the second argument
Returns the floatingpoint value adjacent to code d in the direction of positive infinity
Returns the floatingpoint value adjacent to code f in the direction of positive infinity
Return code d times code scaleFactor rounded as if performed by a single correctly rounded floatingpoint multiply to a member of the double value set
Return code f times code scaleFactor rounded as if performed by a single correctly rounded floatingpoint multiply to a member of the float value set
Appends the specified character sequence to this Appendable
Appends a subsequence of the specified character sequence to this Appendable
Appends the specified character to this Appendable
Return the name of this package
Return the title of the specification that this package implements
Returns the version number of the specification that this package implements
Return the name of the organization vendor or company that owns and maintains the specification of the classes that implement this package
Return the title of this package
Return the version of this implementation
Returns the name of the organization vendor or company that provided this implementation
Returns true if this package is sealed
Returns true if this package is sealed with respect to the specified code source url
Compare this package's specification version with a desired version
Find a package by name in the callers code ClassLoader instance
Get all the packages currently known for the caller's code ClassLoader instance
Get the package for the specified class
Return the hash code computed from the package name
Returns the string representation of this Package
NullPointerException inheritDoc
NullPointerException inheritDoc


Returns the type of the missing enum constant
Returns the name of the missing enum constant
Returns the name of this thread group
Returns the parent of this thread group
Returns the maximum priority of this thread group
Tests if this thread group is a daemon thread group
Tests if this thread group has been destroyed
Changes the daemon status of this thread group
Sets the maximum priority of the group
Tests if this thread group is either the thread group argument or one of its ancestor thread groups
Determines if the currently running thread has permission to modify this thread group
Returns an estimate of the number of active threads in this thread group
Copies into the specified array every active thread in this thread group and its subgroups
Copies into the specified array every active thread in this thread group
Returns an estimate of the number of active groups in this thread group
Copies into the specified array references to every active subgroup in this thread group
Copies into the specified array references to every active subgroup in this thread group
Stops all threads in this thread group
Interrupts all threads in this thread group
Suspends all threads in this thread group
Helper method recursively stops or suspends as directed by the boolean argument all of the threads in this thread group and its subgroups except the current thread
Resumes all threads in this thread group
Destroys this thread group and all of its subgroups
Adds the specified Thread group to this group
Removes the specified Thread group from this group
Increments the count of unstarted threads in the thread group
Adds the specified Thread to this group
Removes the specified Thread from this group
Prints information about this thread group to the standard output
Called by the Java Virtual Machine when a thread in this thread group stops because of an uncaught exception and the thread does not have a specific link Thread
Used by VM to control lowmem implicit suspension
Returns a string representation of this Thread group
Computes the child's initial value for this inheritable threadlocal variable as a function of the parent's value at the time the child thread is created
Get the map associated with a ThreadLocal
Create the map associated with a ThreadLocal
Polls this queue to see if a reference object is available
Removes the next reference object in this queue blocking until either one becomes available or the given timeout period expires
Removes the next reference object in this queue blocking until one becomes available
Returns this reference object's referent
Clears this reference object
Tells whether or not this reference object has been enqueued either by the program or by the garbage collector
Adds this reference object to the queue with which it is registered if any
Returns this reference object's referent
Returns this reference object's referent
Factory method for making a NumberFormatException given the specified input which caused the error
Registers the supplied transformer
Registers the supplied transformer
Unregisters the supplied transformer
Returns whether or not the current JVM configuration supports retransformation of classes
Retransform the supplied set of classes
Returns whether or not the current JVM configuration supports redefinition of classes
Redefine the supplied set of classes using the supplied class files
Determines whether a class is modifiable by linkplain retransformClasses retransformation or linkplain redefineClasses redefinition
Returns an array of all classes currently loaded by the JVM
Returns an array of all classes for which loader is an initiating loader
Returns an implementationspecific approximation of the amount of storage consumed by the specified object
Specifies a JAR file with instrumentation classes to be defined by the bootstrap class loader
Specifies a JAR file with instrumentation classes to be defined by the system class loader
Returns whether the current JVM configuration supports linkplain setNativeMethodPrefixClassFileTransformerString setting a native method prefix
This method modifies the failure handling of native method resolution by allowing retry with a prefix applied to the name
Returns the class
Returns the array of bytes that contains the new class file
The implementation of this method may transform the supplied class file and return a new replacement class file
returns true if the current context has been granted AllPermission
Tests if there is a security check in progress
Returns the current execution stack as an array of classes
Returns the class loader of the most recently executing method from a class defined using a nonsystem class loader
Returns the class of the most recently executing method from a class defined using a nonsystem class loader
Returns the stack depth of the specified class
Returns the stack depth of the most recently executing method from a class defined using a nonsystem class loader
Tests if a method from a class with the specified name is on the execution stack
Basically tests if a method from a class defined using a class loader is on the execution stack
Creates an object that encapsulates the current execution environment
Throws a SecurityException if the requested access specified by the given permission is not permitted based on the security policy currently in effect
Throws a SecurityException if the specified security context is denied access to the resource specified by the given permission
Throws a SecurityException if the calling thread is not allowed to create a new class loader
Throws a SecurityException if the calling thread is not allowed to modify the thread argument
Throws a SecurityException if the calling thread is not allowed to modify the thread group argument
Throws a SecurityException if the calling thread is not allowed to cause the Java Virtual Machine to halt with the specified status code
Throws a SecurityException if the calling thread is not allowed to create a subprocess
Throws a SecurityException if the calling thread is not allowed to dynamic link the library code specified by the string argument file
Throws a SecurityException if the calling thread is not allowed to read from the specified file descriptor
Throws a SecurityException if the calling thread is not allowed to read the file specified by the string argument
Throws a SecurityException if the specified security context is not allowed to read the file specified by the string argument
Throws a SecurityException if the calling thread is not allowed to write to the specified file descriptor
Throws a SecurityException if the calling thread is not allowed to write to the file specified by the string argument
Throws a SecurityException if the calling thread is not allowed to delete the specified file
Throws a SecurityException if the calling thread is not allowed to open a socket connection to the specified host and port number
Throws a SecurityException if the specified security context is not allowed to open a socket connection to the specified host and port number
Throws a SecurityException if the calling thread is not allowed to wait for a connection request on the specified local port number
Throws a SecurityException if the calling thread is not permitted to accept a socket connection from the specified host and port number
Throws a SecurityException if the calling thread is not allowed to use joinleavesendreceive IP multicast
Throws a SecurityException if the calling thread is not allowed to use joinleavesendreceive IP multicast
Throws a SecurityException if the calling thread is not allowed to access or modify the system properties
Throws a SecurityException if the calling thread is not allowed to access the system property with the specified key name
Returns false if the calling thread is not trusted to bring up the toplevel window indicated by the window argument
Throws a SecurityException if the calling thread is not allowed to initiate a print job request
Throws a SecurityException if the calling thread is not allowed to access the system clipboard
Throws a SecurityException if the calling thread is not allowed to access the AWT event queue
Throws a SecurityException if the calling thread is not allowed to access the package specified by the argument
Throws a SecurityException if the calling thread is not allowed to define classes in the package specified by the argument
Throws a SecurityException if the calling thread is not allowed to set the socket factory used by ServerSocket or Socket or the stream handler factory used by URL
Throws a SecurityException if the calling thread is not allowed to access members
Determines whether the permission with the specified permission target name should be granted or denied
Returns the thread group into which to instantiate any new thread being created at the time this is being called
Returns the length character count
Returns the current capacity
Ensures that the capacity is at least equal to the specified minimum
This implements the expansion semantics of ensureCapacity with no size check or synchronization
Attempts to reduce storage used for the character sequence
Sets the length of the character sequence
Returns the char value in this sequence at the specified index
Returns the character Unicode code point at the specified index
Returns the character Unicode code point before the specified index
Returns the number of Unicode code points in the specified text range of this sequence
Returns the index within this sequence that is offset from the given index by codePointOffset code points
Characters are copied from this sequence into the destination character array dst
The character at the specified index is set to ch
Appends the string representation of the Object argument
Appends the specified string to this character sequence
Appends a subsequence of the specified CharSequence to this sequence
Appends the string representation of the char array argument to this sequence
Appends the string representation of a subarray of the char array argument to this sequence
Appends the string representation of the boolean argument to the sequence
Appends the string representation of the char argument to this sequence
Appends the string representation of the int argument to this sequence
Appends the string representation of the long argument to this sequence
Appends the string representation of the float argument to this sequence
Appends the string representation of the double argument to this sequence
Removes the characters in a substring of this sequence
Appends the string representation of the codePoint argument to this sequence
Removes the char at the specified position in this sequence
Replaces the characters in a substring of this sequence with characters in the specified String
Returns a new String that contains a subsequence of characters currently contained in this character sequence
Returns a new character sequence that is a subsequence of this sequence
Returns a new String that contains a subsequence of characters currently contained in this sequence
Inserts the string representation of a subarray of the str array argument into this sequence
Inserts the string representation of the Object argument into this character sequence
Inserts the string into this character sequence
Inserts the string representation of the char array argument into this sequence
Inserts the specified CharSequence into this sequence
Inserts a subsequence of the specified CharSequence into this sequence
Inserts the string representation of the boolean argument into this sequence
Inserts the string representation of the char argument into this sequence
Inserts the string representation of the second int argument into this sequence
Inserts the string representation of the long argument into this sequence
Inserts the string representation of the float argument into this sequence
Inserts the string representation of the double argument into this sequence
Returns the index within this string of the first occurrence of the specified substring
Returns the index within this string of the first occurrence of the specified substring starting at the specified index
Returns the index within this string of the rightmost occurrence of the specified substring
Returns the index within this string of the last occurrence of the specified substring
Causes this character sequence to be replaced by the reverse of the sequence
Returns a string representing the data in this sequence
Needed by String for the contentEquals method
Returns a new code String object representing the specified code byte
Returns a code Byte instance representing the specified code byte value
Parses the string argument as a signed code byte in the radix specified by the second argument
Parses the string argument as a signed decimal code byte
Returns a code Byte object holding the value extracted from the specified code String when parsed with the radix given by the second argument
Returns a code Byte object holding the value given by the specified code String
Decodes a code String into a code Byte
Returns the value of this code Byte as a code byte
Returns the value of this code Byte as a code short
Returns the value of this code Byte as an code int
Returns the value of this code Byte as a code long
Returns the value of this code Byte as a code float
Returns the value of this code Byte as a code double
Returns a code String object representing this code Byte's value
Returns a hash code for this code Byte
Compares this object to the specified object
Compares two code Byte objects numerically
Returns a string representation of the first argument in the radix specified by the second argument
Returns a string representation of the code long argument as an unsigned integer in basenbsp
Returns a string representation of the code long argument as an unsigned integer in basenbsp
Returns a string representation of the code long argument as an unsigned integer in basenbsp
Convert the integer to an unsigned number
Returns a code String object representing the specified code long
Places characters representing the integer i into the character array buf
Parses the string argument as a signed code long in the radix specified by the second argument
Parses the string argument as a signed decimal code long
Returns a code Long object holding the value extracted from the specified code String when parsed with the radix given by the second argument
Returns a code Long object holding the value of the specified code String
Returns a code Long instance representing the specified code long value
Decodes a code String into a code Long
Returns the value of this code Long as a code byte
Returns the value of this code Long as a code short
Returns the value of this code Long as an code int
Returns the value of this code Long as a code long value
Returns the value of this code Long as a code float
Returns the value of this code Long as a code double
Returns a code String object representing this code Long's value
Returns a hash code for this code Long
Compares this object to the specified object
Determines the code long value of the system property with the specified name
Determines the code long value of the system property with the specified name
Returns the code long value of the system property with the specified name
Compares two code Long objects numerically
Returns a code long value with at most a single onebit in the position of the highestorder leftmost onebit in the specified code long value
Returns a code long value with at most a single onebit in the position of the lowestorder rightmost onebit in the specified code long value
Returns the number of zero bits preceding the highestorder leftmost onebit in the two's complement binary representation of the specified code long value
Returns the number of zero bits following the lowestorder rightmost onebit in the two's complement binary representation of the specified code long value
Returns the number of onebits in the two's complement binary representation of the specified code long value
Returns the value obtained by rotating the two's complement binary representation of the specified code long value left by the specified number of bits
Returns the value obtained by rotating the two's complement binary representation of the specified code long value right by the specified number of bits
Returns the value obtained by reversing the order of the bits in the two's complement binary representation of the specified code long value
Returns the signum function of the specified code long value
Returns the value obtained by reversing the order of the bytes in the two's complement representation of the specified code long value
Reassigns the standard input stream
Reassigns the standard output stream
Reassigns the standard error output stream
Returns the unique link java
Returns the channel inherited from the entity that created this Java virtual machine
Sets the System security
Gets the system security interface
Returns the current time in milliseconds
Returns the current value of the most precise available system timer in nanoseconds
Copies an array from the specified source array beginning at the specified position to the specified position of the destination array
Returns the same hash code for the given object as would be returned by the default method hashCode whether or not the given object's class overrides hashCode
Determines the current system properties
Sets the system properties to the Properties argument
Gets the system property indicated by the specified key
Gets the system property indicated by the specified key
Sets the system property indicated by the specified key
Removes the system property indicated by the specified key
Gets the value of the specified environment variable
Returns an unmodifiable string map view of the current system environment
Terminates the currently running Java Virtual Machine
Runs the garbage collector
Runs the finalization methods of any objects pending finalization
Enable or disable finalization on exit doing so specifies that the finalizers of all objects that have finalizers that have not yet been automatically invoked are to be run before the Java runtime exits
Loads a code file with the specified filename from the local file system as a dynamic library
Loads the system library specified by the libname argument
Maps a library name into a platformspecific string representing a native library
The following two methods exist because in out and err must be initialized to null
Initialize the system class
Returns the runtime class of this code Object
Returns a hash code value for the object
Indicates whether some other object is equal to this one
Creates and returns a copy of this object
Returns a string representation of the object
Wakes up a single thread that is waiting on this object's monitor
Wakes up all threads that are waiting on this object's monitor
Causes the current thread to wait until either another thread invokes the link java
Causes the current thread to wait until another thread invokes the link java
Causes the current thread to wait until another thread invokes the link java
Called by the garbage collector on an object when garbage collection determines that there are no more references to the object
Returns the Method object for the incorrectly typed element
Returns the type of data found in the incorrectly typed element
Returns the Class object for the annotation type with the missing element
Returns the name of the missing element
Returns true if the specified object represents an annotation that is logically equivalent to this one
Returns the hash code of this annotation as defined below The hash code of an annotation is the sum of the hash codes of its members including those with default values as defined below The hash code of an annotation member is times the hash code of the membername as computed by link StringhashCode XOR the hash code of the membervalue as defined below The hash code of a membervalue depends on its type The hash code of a primitive value v is equal to WrapperType
Returns a string representation of this annotation
Returns the annotation type of this annotation
The set of warnings that are to be suppressed by the compiler in the annotated element
Returns a Character instance representing the specified char value
Returns the value of this Character object
Returns a hash code for this Character
Compares this object against the specified object
Returns a String object representing this Character's value
Returns a String object representing the specified char
Determines whether the specified code point is a valid Unicode code point value in the range of x to xFFFF inclusive
Determines whether the specified character Unicode code point is in the supplementary character range
Determines if the given char value is a highsurrogate code unit also known as leadingsurrogate code unit
Determines if the given char value is a lowsurrogate code unit also known as trailingsurrogate code unit
Determines whether the specified pair of char values is a valid surrogate pair
Determines the number of char values needed to represent the specified character Unicode code point
Converts the specified surrogate pair to its supplementary code point value
Returns the code point at the given index of the CharSequence
Returns the code point at the given index of the char array
Returns the code point at the given index of the char array where only array elements with index less than limit can be used
Returns the code point preceding the given index of the CharSequence
Returns the code point preceding the given index of the char array
Returns the code point preceding the given index of the char array where only array elements with index greater than or equal to start can be used
Converts the specified character Unicode code point to its UTF representation
Converts the specified character Unicode code point to its UTF representation stored in a char array
Returns the number of Unicode code points in the text range of the specified char sequence
Returns the number of Unicode code points in a subarray of the char array argument
Returns the index within the given char sequence that is offset from the given index by codePointOffset code points
Returns the index within the given char subarray that is offset from the given index by codePointOffset code points
Determines if the specified character is a lowercase character
Determines if the specified character Unicode code point is a lowercase character
Determines if the specified character is an uppercase character
Determines if the specified character Unicode code point is an uppercase character
Determines if the specified character is a titlecase character
Determines if the specified character Unicode code point is a titlecase character
Determines if the specified character is a digit
Determines if the specified character Unicode code point is a digit
Determines if a character is defined in Unicode
Determines if a character Unicode code point is defined in Unicode
Determines if the specified character is a letter
Determines if the specified character Unicode code point is a letter
Determines if the specified character is a letter or digit
Determines if the specified character Unicode code point is a letter or digit
Determines if the specified character is permissible as the first character in a Java identifier
Determines if the specified character may be part of a Java identifier as other than the first character
Determines if the specified character is permissible as the first character in a Java identifier
Determines if the character Unicode code point is permissible as the first character in a Java identifier
Determines if the specified character may be part of a Java identifier as other than the first character
Determines if the character Unicode code point may be part of a Java identifier as other than the first character
Determines if the specified character is permissible as the first character in a Unicode identifier
Determines if the specified character Unicode code point is permissible as the first character in a Unicode identifier
Determines if the specified character may be part of a Unicode identifier as other than the first character
Determines if the specified character Unicode code point may be part of a Unicode identifier as other than the first character
Determines if the specified character should be regarded as an ignorable character in a Java identifier or a Unicode identifier
Determines if the specified character Unicode code point should be regarded as an ignorable character in a Java identifier or a Unicode identifier
Converts the character argument to lowercase using case mapping information from the UnicodeData file
Converts the character Unicode code point argument to lowercase using case mapping information from the UnicodeData file
Converts the character argument to uppercase using case mapping information from the UnicodeData file
Converts the character Unicode code point argument to uppercase using case mapping information from the UnicodeData file
Converts the character argument to titlecase using case mapping information from the UnicodeData file
Converts the character Unicode code point argument to titlecase using case mapping information from the UnicodeData file
Returns the numeric value of the character ch in the specified radix
Returns the numeric value of the specified character Unicode code point in the specified radix
Returns the int value that the specified Unicode character represents
Returns the int value that the specified character Unicode code point represents
Determines if the specified character is ISOLATIN white space
Determines if the specified character is a Unicode space character
Determines if the specified character Unicode code point is a Unicode space character
Determines if the specified character is white space according to Java
Determines if the specified character Unicode code point is white space according to Java
Determines if the specified character is an ISO control character
Determines if the referenced character Unicode code point is an ISO control character
Returns a value indicating a character's general category
Returns a value indicating a character's general category
Determines the character representation for a specific digit in the specified radix
Returns the Unicode directionality property for the given character
Returns the Unicode directionality property for the given character Unicode code point
Determines whether the character is mirrored according to the Unicode specification
Determines whether the specified character Unicode code point is mirrored according to the Unicode specification
Compares two Character objects numerically
Converts the character Unicode code point argument to uppercase using information from the UnicodeData file
Converts the character Unicode code point argument to uppercase using case mapping information from the SpecialCasing file in the Unicode specification
Returns the value obtained by reversing the order of the bytes in the specified char value
Compares two Subset objects for equality
Returns the standard hash code as defined by the link ObjecthashCode method
Returns the name of this subset
Returns the object representing the Unicode block containing the given character or null if the character is not a member of a defined block
Returns the object representing the Unicode block containing the given character Unicode code point or null if the character is not a member of a defined block
Returns the UnicodeBlock with the given name
Compares two Subset objects for equality
Returns the standard hash code as defined by the link ObjecthashCode method
Returns the name of this subset
Returns the object representing the Unicode block containing the given character or null if the character is not a member of a defined block
Returns the object representing the Unicode block containing the given character Unicode code point or null if the character is not a member of a defined block
Returns the UnicodeBlock with the given name
Compares two Subset objects for equality
Returns the standard hash code as defined by the link ObjecthashCode method
Returns the name of this subset
Returns the object representing the Unicode block containing the given character or null if the character is not a member of a defined block
Returns the object representing the Unicode block containing the given character Unicode code point or null if the character is not a member of a defined block
Returns the UnicodeBlock with the given name
Implements the Final_Cased condition Specification Within the closest word boundaries containing C there is a cased letter before C and there is no cased letter after C
Implements the After_I condition Specification The last preceding base character was an uppercase I and there is no intervening combining character class ABOVE
Implements the After_Soft_Dotted condition Specification The last preceding character with combining class of zero before C was Soft_Dotted and there is no intervening combining character class ABOVE
Implements the More_Above condition Specification C is followed by one or more characters of combining class ABOVE in the combining character sequence
Implements the Before_Dot condition Specification C is followed by U COMBINING DOT ABOVE
Examines whether a character is 'cased'
Returns a string representation of the code float argument
Returns a hexadecimal string representation of the code float argument
Returns a code Float object holding the code float value represented by the argument string code s
Returns a code Float instance representing the specified code float value
Returns a new code float initialized to the value represented by the specified code String as performed by the code valueOf method of class code Float
Returns code true if the specified number is a NotaNumber NaN value code false otherwise
Returns code true if the specified number is infinitely large in magnitude code false otherwise
Returns code true if this code Float value is a NotaNumber NaN code false otherwise
Returns code true if this code Float value is infinitely large in magnitude code false otherwise
Returns a string representation of this code Float object
Returns the value of this code Float as a code byte by casting to a code byte
Returns the value of this code Float as a code short by casting to a code short
Returns the value of this code Float as an code int by casting to type code int
Returns value of this code Float as a code long by casting to type code long
Returns the code float value of this code Float object
Returns the code double value of this code Float object
Returns a hash code for this code Float object
Compares this object against the specified object
Returns a representation of the specified floatingpoint value according to the IEEE floatingpoint single format bit layout
Returns a representation of the specified floatingpoint value according to the IEEE floatingpoint single format bit layout preserving NotaNumber NaN values
Returns the code float value corresponding to a given bit representation
Compares two code Float objects numerically
Compares the two specified code float values
Returns the fully qualified name of the unavailable type
Returns the exception that occurred during a static initialization that caused this error to be created
Returns the cause of this error the exception that occurred during a static initialization that caused this error to be created
Processes a method invocation on a proxy instance and returns the result
Returns an array of code Type objects representing the upper bounds of this type variable
Returns the code GenericDeclaration object representing the generic declaration declared this type variable
Returns the name of this type variable as it occurs in the source code
Convenience method to set the code accessible flag for an array of objects with a single security check for efficiency
Set the code accessible flag for this object to the indicated boolean value
Get the value of the code accessible flag for this object
NullPointerException inheritDoc
NullPointerException inheritDoc


Get the thrown target exception
Returns the cause of this exception the thrown target exception which may be code null
Returns the Class object representing the class or interface that declares the member or constructor represented by this Member
Returns the simple name of the underlying member or constructor represented by this Member
Returns the Java language modifiers for the member or constructor represented by this Member as an integer
Returns code true if this member was introduced by the compiler returns code false otherwise
Returns a code Type object representing the component type of this array
Returns an array of code Type objects representing the actual type arguments to this type
Returns the code Type object representing the class or interface that declared this type
Returns a code Type object representing the type that this type is a member of
Returns the code Throwable instance wrapped in this code UndeclaredThrowableException which may be code null
Returns the cause of this exception the code Throwable instance wrapped in this code UndeclaredThrowableException which may be code null
Packageprivate routine exposed to java
Returns the code Class object representing the class or interface that declares the field represented by this code Field object
Returns the name of the field represented by this code Field object
Returns the Java language modifiers for the field represented by this code Field object as an integer
Returns code true if this field represents an element of an enumerated type returns code false otherwise
Returns code true if this field is a synthetic field returns code false otherwise
Returns a code Class object that identifies the declared type for the field represented by this code Field object
Returns a code Type object that represents the declared type for the field represented by this code Field object
Compares this code Field against the specified object
Returns a hashcode for this code Field
Returns a string describing this code Field
Returns a string describing this code Field including its generic type
Returns the value of the field represented by this code Field on the specified object
Gets the value of a static or instance code boolean field
Gets the value of a static or instance code byte field
Gets the value of a static or instance field of type code char or of another primitive type convertible to type code char via a widening conversion
Gets the value of a static or instance field of type code short or of another primitive type convertible to type code short via a widening conversion
Gets the value of a static or instance field of type code int or of another primitive type convertible to type code int via a widening conversion
Gets the value of a static or instance field of type code long or of another primitive type convertible to type code long via a widening conversion
Gets the value of a static or instance field of type code float or of another primitive type convertible to type code float via a widening conversion
Gets the value of a static or instance field of type code double or of another primitive type convertible to type code double via a widening conversion
Sets the field represented by this code Field object on the specified object argument to the specified new value
Sets the value of a field as a code boolean on the specified object
Sets the value of a field as a code byte on the specified object
Sets the value of a field as a code char on the specified object
Sets the value of a field as a code short on the specified object
Sets the value of a field as an code int on the specified object
Sets the value of a field as a code long on the specified object
Sets the value of a field as a code float on the specified object
Sets the value of a field as a code double on the specified object
NullPointerException inheritDoc

Returns an array of code Type objects representing the upper bounds of this type variable
Returns an array of code Type objects representing the lower bounds of this type variable
Returns an array of code TypeVariable objects that represent the type variables declared by the generic declaration represented by this code GenericDeclaration object in declaration order
Returns true if an annotation for the specified type is present on this element else false
Returns this element's annotation for the specified type if such an annotation is present else null
Returns all annotations present on this element
Returns all annotations that are directly present on this element
Creates a new array with the specified component type and length
Creates a new array with the specified component type and dimensions
Returns the length of the specified array object as an code int
Returns the value of the indexed component in the specified array object
Returns the value of the indexed component in the specified array object as a code boolean
Returns the value of the indexed component in the specified array object as a code byte
Returns the value of the indexed component in the specified array object as a code char
Returns the value of the indexed component in the specified array object as a code short
Returns the value of the indexed component in the specified array object as an code int
Returns the value of the indexed component in the specified array object as a code long
Returns the value of the indexed component in the specified array object as a code float
Returns the value of the indexed component in the specified array object as a code double
Sets the value of the indexed component of the specified array object to the specified new value
Sets the value of the indexed component of the specified array object to the specified code boolean value
Sets the value of the indexed component of the specified array object to the specified code byte value
Sets the value of the indexed component of the specified array object to the specified code char value
Sets the value of the indexed component of the specified array object to the specified code short value
Sets the value of the indexed component of the specified array object to the specified code int value
Sets the value of the indexed component of the specified array object to the specified code long value
Sets the value of the indexed component of the specified array object to the specified code float value
Sets the value of the indexed component of the specified array object to the specified code double value
Packageprivate routine exposed to java
Returns the code Class object representing the class that declares the constructor represented by this code Constructor object
Returns the name of this constructor as a string
Returns the Java language modifiers for the constructor represented by this code Constructor object as an integer
Returns an array of code TypeVariable objects that represent the type variables declared by the generic declaration represented by this code GenericDeclaration object in declaration order
Returns an array of code Class objects that represent the formal parameter types in declaration order of the constructor represented by this code Constructor object
Returns an array of code Type objects that represent the formal parameter types in declaration order of the method represented by this code Constructor object
Returns an array of code Class objects that represent the types of exceptions declared to be thrown by the underlying constructor represented by this code Constructor object
Returns an array of code Type objects that represent the exceptions declared to be thrown by this code Constructor object
Compares this code Constructor against the specified object
Returns a hashcode for this code Constructor
Returns a string describing this code Constructor
Returns a string describing this code Constructor including type parameters
Uses the constructor represented by this code Constructor object to create and initialize a new instance of the constructor's declaring class with the specified initialization parameters
Returns code true if this constructor was declared to take a variable number of arguments returns code false otherwise
Returns code true if this constructor is a synthetic constructor returns code false otherwise
NullPointerException inheritDoc

Returns an array of arrays that represent the annotations on the formal parameters in declaration order of the method represented by this code Constructor object
Returns the code java
Returns an instance of a proxy class for the specified interfaces that dispatches method invocations to the specified invocation handler
Returns true if and only if the specified class was dynamically generated to be a proxy class using the code getProxyClass method or the code newProxyInstance method
Returns the invocation handler for the specified proxy instance
Packageprivate routine exposed to java
Returns the code Class object representing the class or interface that declares the method represented by this code Method object
Returns the name of the method represented by this code Method object as a code String
Returns the Java language modifiers for the method represented by this code Method object as an integer
Returns an array of code TypeVariable objects that represent the type variables declared by the generic declaration represented by this code GenericDeclaration object in declaration order
Returns a code Class object that represents the formal return type of the method represented by this code Method object
Returns a code Type object that represents the formal return type of the method represented by this code Method object
Returns an array of code Class objects that represent the formal parameter types in declaration order of the method represented by this code Method object
Returns an array of code Type objects that represent the formal parameter types in declaration order of the method represented by this code Method object
Returns an array of code Class objects that represent the types of the exceptions declared to be thrown by the underlying method represented by this code Method object
Returns an array of code Type objects that represent the exceptions declared to be thrown by this code Method object
Compares this code Method against the specified object
Returns a hashcode for this code Method
Returns a string describing this code Method
Returns a string describing this code Method including type parameters
Invokes the underlying method represented by this code Method object on the specified object with the specified parameters
Returns code true if this method is a bridge method returns code false otherwise
Returns code true if this method was declared to take a variable number of arguments returns code false otherwise
Returns code true if this method is a synthetic method returns code false otherwise
NullPointerException inheritDoc

Returns the default value for the annotation member represented by this code Method instance
Returns an array of arrays that represent the annotations on the formal parameters in declaration order of the method represented by this code Method object
Return code true if the integer argument includes the code public modifier code false otherwise
Return code true if the integer argument includes the code private modifier code false otherwise
Return code true if the integer argument includes the code protected modifier code false otherwise
Return code true if the integer argument includes the code static modifier code false otherwise
Return code true if the integer argument includes the code final modifier code false otherwise
Return code true if the integer argument includes the code synchronized modifier code false otherwise
Return code true if the integer argument includes the code volatile modifier code false otherwise
Return code true if the integer argument includes the code transient modifier code false otherwise
Return code true if the integer argument includes the code native modifier code false otherwise
Return code true if the integer argument includes the code interface modifier code false otherwise
Return code true if the integer argument includes the code abstract modifier code false otherwise
Return code true if the integer argument includes the code strictfp modifier code false otherwise
Return a string describing the access modifier flags in the specified modifier
Returns a new code String object representing the specified code short
Parses the string argument as a signed code short in the radix specified by the second argument
Parses the string argument as a signed decimal code short
Returns a code Short object holding the value extracted from the specified code String when parsed with the radix given by the second argument
Returns a code Short object holding the value given by the specified code String
Returns a code Short instance representing the specified code short value
Decodes a code String into a code Short
Returns the value of this code Short as a code byte
Returns the value of this code Short as a code short
Returns the value of this code Short as an code int
Returns the value of this code Short as a code long
Returns the value of this code Short as a code float
Returns the value of this code Short as a code double
Returns a code String object representing this code Short's value
Returns a hash code for this code Short
Compares this object to the specified object
Compares two code Short objects numerically
Returns the value obtained by reversing the order of the bytes in the two's complement representation of the specified code short value
Returns the exception that was raised if an error occurred while attempting to load the class
Returns the cause of this exception the exception that was raised if an error occurred while attempting to load the class otherwise null
Returns the name of the source file containing the execution point represented by this stack trace element
Returns the line number of the source line containing the execution point represented by this stack trace element
Returns the fully qualified name of the class containing the execution point represented by this stack trace element
Returns the name of the method containing the execution point represented by this stack trace element
Returns true if the method containing the execution point represented by this stack trace element is a native method
Returns a string representation of this stack trace element
Returns true if the specified object is another StackTraceElement instance representing the same execution point as this instance
Returns a hash code value for this stack trace element
Converts the object to a string
Returns the code Class object associated with the class or interface with the given string name
Returns the code Class object associated with the class or interface with the given string name using the given class loader
Called after security checks have been made
Creates a new instance of the class represented by this code Class object
Determines if the specified code Object is assignmentcompatible with the object represented by this code Class
Determines if the class or interface represented by this code Class object is either the same as or is a superclass or superinterface of the class or interface represented by the specified code Class parameter
Determines if the specified code Class object represents an interface type
Determines if this code Class object represents an array class
Determines if the specified code Class object represents a primitive type
Returns true if this code Class object represents an annotation type
Returns code true if this class is a synthetic class returns code false otherwise
Returns the name of the entity class interface array class primitive type or void represented by this code Class object as a code String
Returns the class loader for the class
Returns an array of code TypeVariable objects that represent the type variables declared by the generic declaration represented by this code GenericDeclaration object in declaration order
Returns the code Class representing the superclass of the entity class interface primitive type or void represented by this code Class
Returns the code Type representing the direct superclass of the entity class interface primitive type or void represented by this code Class
Gets the package for this class
Determines the interfaces implemented by the class or interface represented by this object
Returns the code Types representing the interfaces directly implemented by the class or interface represented by this object
Returns the code Class representing the component type of an array
Returns the Java language modifiers for this class or interface encoded in an integer
Gets the signers of this class
Set the signers of this class
If this code Class object represents a local or anonymous class within a method returns a link java
If this code Class object represents a local or anonymous class within a constructor returns a link java
If the class or interface represented by this code Class object is a member of another class returns the code Class object representing the class in which it was declared
Returns the immediately enclosing class of the underlying class
Returns the simple name of the underlying class as given in the source code
Character
Returns the canonical name of the underlying class as defined by the Java Language Specification
Returns code true if and only if the underlying class is an anonymous class
Returns code true if and only if the underlying class is a local class
Returns code true if and only if the underlying class is a member class
Returns the simple binary name of the underlying class i
Returns code true if this is a local class or an anonymous class
Returns an array containing code Class objects representing all the public classes and interfaces that are members of the class represented by this code Class object
Returns an array containing code Field objects reflecting all the accessible public fields of the class or interface represented by this code Class object
Returns an array containing code Method objects reflecting all the public member methods of the class or interface represented by this code Class object including those declared by the class or interface and those inherited from superclasses and superinterfaces
Returns an array containing code Constructor objects reflecting all the public constructors of the class represented by this code Class object
Returns a code Field object that reflects the specified public member field of the class or interface represented by this code Class object
Returns a code Method object that reflects the specified public member method of the class or interface represented by this code Class object
Returns a code Constructor object that reflects the specified public constructor of the class represented by this code Class object
Returns an array of code Class objects reflecting all the classes and interfaces declared as members of the class represented by this code Class object
Returns an array of code Field objects reflecting all the fields declared by the class or interface represented by this code Class object
Returns an array of code Method objects reflecting all the methods declared by the class or interface represented by this code Class object
Returns an array of code Constructor objects reflecting all the constructors declared by the class represented by this code Class object
Returns a code Field object that reflects the specified declared field of the class or interface represented by this code Class object
Returns a code Method object that reflects the specified declared method of the class or interface represented by this code Class object
Returns a code Constructor object that reflects the specified constructor of the class or interface represented by this code Class object
Finds a resource with a given name
Finds a resource with a given name
Returns the code ProtectionDomain of this class
Returns the ProtectionDomain of this class
Set the ProtectionDomain for this class
Add a package name prefix if the name is not absolute Remove leading if name is absolute
Returns the assertion status that would be assigned to this class if it were to be initialized at the time this method is invoked
Returns true if and only if this class was declared as an enum in the source code
Returns the elements of this enum class or null if this Class object does not represent an enum type
Returns the elements of this enum class or null if this Class object does not represent an enum type identical to getEnumConstantsShared except that the result is uncloned cached and shared by all callers
Returns a map from simple name to enum constant
Casts an object to the class or interface represented by this code Class object
Casts this code Class object to represent a subclass of the class represented by the specified class object
NullPointerException inheritDoc
NullPointerException inheritDoc


Returns the value of the specified number as an int
Returns the value of the specified number as a long
Returns the value of the specified number as a float
Returns the value of the specified number as a double
Returns the value of the specified number as a byte
Returns the value of the specified number as a short
Returns the runtime object associated with the current Java application
Terminates the currently running Java virtual machine by initiating its shutdown sequence
Registers a new virtualmachine shutdown hook
Deregisters a previouslyregistered virtualmachine shutdown hook
Forcibly terminates the currently running Java virtual machine
Enable or disable finalization on exit doing so specifies that the finalizers of all objects that have finalizers that have not yet been automatically invoked are to be run before the Java runtime exits
Executes the specified string command in a separate process
Executes the specified string command in a separate process with the specified environment
Executes the specified string command in a separate process with the specified environment and working directory
Executes the specified command and arguments in a separate process
Executes the specified command and arguments in a separate process with the specified environment
Executes the specified command and arguments in a separate process with the specified environment and working directory
Returns the number of processors available to the Java virtual machine
Returns the amount of free memory in the Java Virtual Machine
Returns the total amount of memory in the Java virtual machine
Returns the maximum amount of memory that the Java virtual machine will attempt to use
Runs the garbage collector
Runs the finalization methods of any objects pending finalization
EnablesDisables tracing of instructions
EnablesDisables tracing of method calls
Loads the specified filename as a dynamic library
Loads the dynamic library with the specified library name
Creates a localized version of an input stream
Creates a localized version of an output stream
Returns a reference to the currently executing thread object
Causes the currently executing thread object to temporarily pause and allow other threads to execute
Causes the currently executing thread to sleep temporarily cease execution for the specified number of milliseconds subject to the precision and accuracy of system timers and schedulers
Causes the currently executing thread to sleep cease execution for the specified number of milliseconds plus the specified number of nanoseconds subject to the precision and accuracy of system timers and schedulers
Initializes a Thread
Returns a clone if the class of this object is link Cloneable Cloneable
Causes this thread to begin execution the Java Virtual Machine calls the run method of this thread
If this thread was constructed using a separate Runnable run object then that Runnable object's run method is called otherwise this method does nothing and returns
This method is called by the system to give a Thread a chance to clean up before it actually exits
Forces the thread to stop executing
Forces the thread to stop executing
Common impl for stop and stopThrowable
Interrupts this thread
Tests whether the current thread has been interrupted
Tests whether this thread has been interrupted
Tests if some Thread has been interrupted
Throws link NoSuchMethodError
Tests if this thread is alive
Suspends this thread
Resumes a suspended thread
Changes the priority of this thread
Returns this thread's priority
Changes the name of this thread to be equal to the argument name
Returns this thread's name
Returns the thread group to which this thread belongs
Returns the number of active threads in the current thread's thread group
Copies into the specified array every active thread in the current thread's thread group and its subgroups
Counts the number of stack frames in this thread
Waits at most millis milliseconds for this thread to die
Waits at most millis milliseconds plus nanos nanoseconds for this thread to die
Waits for this thread to die
Prints a stack trace of the current thread to the standard error stream
Marks this thread as either a daemon thread or a user thread
Tests if this thread is a daemon thread
Determines if the currently running thread has permission to modify this thread
Returns a string representation of this thread including the thread's name priority and thread group
Returns the context ClassLoader for this Thread
Sets the context ClassLoader for this Thread
Returns true if and only if the current thread holds the monitor lock on the specified object
Returns an array of stack trace elements representing the stack dump of this thread
Returns a map of stack traces for all live threads
Verifies that this possibly subclass instance can be constructed without violating security constraints the subclass must not override securitysensitive nonfinal methods or else the enableContextClassLoaderOverride RuntimePermission is checked
Performs reflective checks on given subclass to verify that it doesn't override securitysensitive nonfinal methods
Returns the identifier of this Thread
Returns the state of this thread
Set the default handler invoked when a thread abruptly terminates due to an uncaught exception and no other handler has been defined for that thread
Returns the default handler invoked when a thread abruptly terminates due to an uncaught exception
Returns the handler invoked when this thread abruptly terminates due to an uncaught exception
Set the handler invoked when this thread abruptly terminates due to an uncaught exception
Dispatch an uncaught exception to the handler
Method invoked when the given thread terminates due to the given uncaught exception
Method invoked when the given thread terminates due to the given uncaught exception
Method invoked when the given thread terminates due to the given uncaught exception
Returns the length of this character sequence
Returns the char value at the specified index
Returns a new CharSequence that is a subsequence of this sequence
Returns a string containing the characters in this sequence in the same order as this sequence
Compiles the specified class
Compiles all classes whose name matches the specified string
Examines the argument type and its fields and perform some documented operation
Cause the Compiler to resume operation
Cause the Compiler to cease operation
