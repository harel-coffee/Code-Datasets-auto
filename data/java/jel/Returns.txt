11	read	int	the next byte of data or if the end of the stream is reached
13	read	int	the number of bytes read or if the end of the stream has been reached
15	available	int	an estimate of the number of bytes that can be read or skipped over from this input stream without blocking
18	markSupported	boolean	a boolean indicating if this stream type supports the mark and reset methods
23	checkError	boolean	true if the print stream has encountered an error either on the underlying output stream or during a format conversion
50	printf	PrintWriter	This writer
51	printf	PrintWriter	This writer
52	format	PrintWriter	This writer
53	format	PrintWriter	This writer
54	append	PrintWriter	This writer
55	append	PrintWriter	This writer
56	append	PrintWriter	This writer
58	lookup	ObjectStreamClass	the class descriptor for the specified class
59	lookupAny	ObjectStreamClass	the class descriptor for the specified class
60	getName	String	a string representing the name of the class
61	getSerialVersionUID	long	the SUID of the class described by this descriptor
62	forClass	Class	the Class instance that this descriptor represents
63	getFields	ObjectStreamField	an array containing an element for each persistent field of this class
64	getField	ObjectStreamField	The ObjectStreamField object of the named field or null if there is no such named field
161	implies	boolean	true if the specified permission is not null and is implied by this object false otherwise
162	impliesIgnoreMask	boolean	the effective mask
163	equals	boolean	true if obj is a FilePermission and has the same pathname and actions as this FilePermission object false otherwise
164	hashCode	int	a hash code value for this object
165	getMask	int	the actions mask
166	getMask	int	the actions mask
167	getActions	String	the canonical string representation of the actions
168	getActions	String	the canonical string representation of the actions
169	newPermissionCollection	PermissionCollection	a new PermissionCollection object suitable for storing FilePermissions
173	implies	boolean	true if permission is a proper subset of a permission in the set false if not
174	elements	Enumeration	an enumeration of all the FilePermission objects
176	read	int	the next byte of data or if the end of the stream is reached
177	read	int	the total number of bytes read into the buffer or if there is no more data because the end of the stream has been reached
178	skip	long	the actual number of bytes skipped
179	available	int	the value of countnbspnbsppos which is the number of bytes remaining to be read from the input buffer
186	readObject	Object	the object read from the stream
187	read	int	the byte read or if the end of the stream is reached
188	read	int	the actual number of bytes read is returned when the end of the stream is reached
189	read	int	the actual number of bytes read is returned when the end of the stream is reached
190	skip	long	the actual number of bytes skipped
191	available	int	the number of available bytes
195	read	int	The character read as an integer in the range to xxffff or if the end of the stream has been reached
197	read	int	The number of characters read or if the end of the stream has been reached
198	readLine	String	A String containing the contents of the line not including any linetermination characters or null if the end of the stream has been reached
199	readLine	String	A String containing the contents of the line not including any linetermination characters or null if the end of the stream has been reached
200	skip	long	The number of characters actually skipped
205	read	int	the next byte of data or if the end of this stream is reached
206	read	int	the total number of bytes read into the buffer or if there is no more data because the end of this stream has been reached
207	skip	long	the actual number of bytes skipped
209	getLineNumber	int	the current line number
210	available	int	the number of bytes that can be read from this input stream without blocking
214	read	int	The character read or if the end of the stream has been reached
215	read	int	The number of characters read or if the end of the stream has been reached
224	skip	long	The number of characters actually skipped
225	accept	boolean	true if and only if the name should be included in the file list false otherwise
230	toByteArray	byte	the current contents of this output stream as a byte array
231	size	int	the value of the count field which is the number of valid bytes in this output stream
232	toString	String	String decoded from the buffer's contents
233	toString	String	String decoded from the buffer's contents
234	toString	String	the current contents of the output stream as a string
237	getCause	Throwable	the exception that terminated the operation the cause which may be null
268	read	int	the next byte of data or if the end of the stream has been reached
269	read	int	the total number of bytes read into the buffer or if there is no more data because the end of the stream has been reached
270	skip	long	the actual number of bytes skipped
271	available	int	the number of remaining bytes that can be read or skipped over from this input stream without blocking
295	append	Writer	This writer
296	append	Writer	This writer
297	append	Writer	This writer
315	writeUTF	int	The number of bytes written out
316	size	int	the value of the written field
335	read	int	the next character of data or if the end of the stream is reached
336	read	int	the total number of characters read into the buffer or if there is no more data because the end of the stream has been reached
340	read	int	The number of characters added to the buffer or if this source of characters is at its end
341	read	int	The character read as an integer in the range to xxffff or if the end of the stream has been reached
342	read	int	The number of characters read or if the end of the stream has been reached
343	read	int	The number of characters read or if the end of the stream has been reached
344	skip	long	The number of characters actually skipped
345	ready	boolean	True if the next read is guaranteed not to block for input false otherwise
346	markSupported	boolean	true if and only if this stream supports the mark operation
355	append	CharArrayWriter	This writer
356	append	CharArrayWriter	This writer
357	append	CharArrayWriter	This writer
359	toCharArray	char	an array of chars copied from the input data
360	size	int	an int representing the current size of the buffer
361	toString	String	the string
367	checkError	boolean	true if and only if this stream has encountered an IOException other than InterruptedIOException or the setError method has been invoked
391	printf	PrintStream	This output stream
392	printf	PrintStream	This output stream
393	format	PrintStream	This output stream
394	format	PrintStream	This output stream
395	append	PrintStream	This output stream
396	append	PrintStream	This output stream
397	append	PrintStream	This output stream
399	read	int	The character read or if the end of the stream has been reached
400	read	int	The number of characters read or if the end of the stream has been reached
402	ready	boolean	True if the next read is guaranteed not to block for input
412	read	int	the next byte of data or if the end of the stream is reached
413	read	int	the total number of bytes read into the buffer or if there is no more data because the end of the stream has been reached
414	read	int	the total number of bytes read into the buffer or if there is no more data because the end of the stream has been reached
416	available	int	an estimate of the number of bytes that can be read or skipped over from this input stream without blocking
420	markSupported	boolean	true if this stream type supports the mark and reset method false otherwise
421	getEncoding	String	The historical name of this encoding or possibly null if the stream has been closed
429	skipBytes	int	the number of bytes actually skipped
430	readBoolean	boolean	the boolean value read
431	readByte	byte	the bit value read
432	readUnsignedByte	int	the unsigned bit value read
433	readShort	short	the bit value read
434	readUnsignedShort	int	the unsigned bit value read
435	readChar	char	the char value read
436	readInt	int	the int value read
437	readLong	long	the long value read
438	readFloat	float	the float value read
439	readDouble	double	the double value read
440	readLine	String	the next line of text from the input stream or null if the end of file is encountered before a byte can be read
441	readUTF	String	a Unicode string
444	getName	String	a String representing the name of the serializable field
445	getType	Class	a Class object representing the type of the serializable field
446	getTypeCode	char	the typecode of the serializable field
447	getTypeString	String	null if this field has a primitive type
448	getOffset	int	the offset of this field
450	isPrimitive	boolean	true if and only if this field corresponds to a primitive type
462	read	int	the next byte of data or if the end of the file is reached
464	read	int	the total number of bytes read into the buffer or if there is no more data because the end of the file has been reached
465	read	int	the total number of bytes read into the buffer or if there is no more data because the end of the file has been reached
466	skip	long	the actual number of bytes skipped
467	available	int	an estimate of the number of remaining bytes that can be read or skipped over from this input stream without blocking
469	getFD	FileDescriptor	the file descriptor object associated with this stream
470	getChannel	FileChannel	the file channel associated with this file input stream
473	available	int	an estimate of the number of bytes that can be read or skipped over from the current underlying input stream without blocking or code if this input stream has been closed by invoking its link close method
474	read	int	the next byte of data or if the end of the stream is reached
475	read	int	int the number of bytes read
477	writer	PrintWriter	The printwriter associated with this console
478	reader	Reader	The reader associated with this console
479	format	Console	This console
480	printf	Console	This console
481	readLine	String	A string containing the line read from the console not including any linetermination characters or null if an end of stream has been reached
482	readLine	String	A string containing the line read from the console not including any linetermination characters or null if an end of stream has been reached
483	readPassword	char	A character array containing the password or passphrase read from the console not including any linetermination characters or null if an end of stream has been reached
484	readPassword	char	A character array containing the password or passphrase read from the console not including any linetermination characters or null if an end of stream has been reached
499	nextToken	int	the value of the ttype field
501	lineno	int	the current line number of this stream tokenizer
502	toString	String	a string representation of the token
505	read	int	The actual number of characters read or if the end of the stream has been reached
506	skip	long	The number of characters actually skipped
512	getFD	FileDescriptor	the file descriptor object associated with this stream
513	getChannel	FileChannel	the file channel associated with this file
515	read	int	the next byte of data or if the end of the file has been reached
517	read	int	the total number of bytes read into the buffer or if there is no more data because the end of the file has been reached
518	read	int	the total number of bytes read into the buffer or if there is no more data because the end of this file has been reached
521	skipBytes	int	the actual number of bytes skipped
526	getFilePointer	long	the offset from the beginning of the file in bytes at which the next read or write occurs
528	length	long	the length of this file measured in bytes
531	readBoolean	boolean	the boolean value read
532	readByte	byte	the next byte of this file as a signed eightbit byte
533	readUnsignedByte	int	the next byte of this file interpreted as an unsigned eightbit number
534	readShort	short	the next two bytes of this file interpreted as a signed bit number
535	readUnsignedShort	int	the next two bytes of this file interpreted as an unsigned bit integer
536	readChar	char	the next two bytes of this file interpreted as a char
537	readInt	int	the next four bytes of this file interpreted as an int
538	readLong	long	the next eight bytes of this file interpreted as a long
539	readFloat	float	the next four bytes of this file interpreted as a float
540	readDouble	double	the next eight bytes of this file interpreted as a double
541	readLine	String	the next line of text from this file or null if end of file is encountered before even one byte is read
542	readUTF	String	a Unicode string
554	read	int	the total number of bytes read into the buffer or if there is no more data because the end of the stream has been reached
555	read	int	the total number of bytes read into the buffer or if there is no more data because the end of the stream has been reached
558	skipBytes	int	the actual number of bytes skipped
559	readBoolean	boolean	the boolean value read
560	readByte	byte	the next byte of this input stream as a signed bit byte
561	readUnsignedByte	int	the next byte of this input stream interpreted as an unsigned bit number
562	readShort	short	the next two bytes of this input stream interpreted as a signed bit number
563	readUnsignedShort	int	the next two bytes of this input stream interpreted as an unsigned bit integer
564	readChar	char	the next two bytes of this input stream interpreted as a char
565	readInt	int	the next four bytes of this input stream interpreted as an int
566	readLong	long	the next eight bytes of this input stream interpreted as a long
567	readFloat	float	the next four bytes of this input stream interpreted as a float
568	readDouble	double	the next eight bytes of this input stream interpreted as a double
569	readLine	String	the next line of text from this input stream
570	readUTF	String	a Unicode string
571	readUTF	String	a Unicode string
573	getLineNumber	int	The current line number
574	read	int	The character read or if the end of the stream has been reached
575	read	int	The number of bytes read or if the end of the stream has already been reached
576	readLine	String	A String containing the contents of the line not including any line termination characters or null if the end of the stream has been reached
577	skip	long	The number of characters actually skipped
587	getFD	FileDescriptor	the FileDescriptor object that represents the connection to the file in the file system being used by this FileOutputStream object
588	getChannel	FileChannel	the file channel associated with this file output stream
590	read	int	the next byte of data or if the end of the stream is reached
591	read	int	the total number of bytes read into the buffer or is there is no more data because the end of the stream has been reached
592	read	int	the total number of bytes read into the buffer or if there is no more data because the end of the stream has been reached
593	skip	long	the actual number of bytes skipped
594	available	int	an estimate of the number of bytes that can be read or skipped over from this input stream without blocking or code when it reaches the end of the input stream
598	markSupported	boolean	true if this stream instance supports the mark and reset methods false otherwise
603	getEncoding	String	The historical name of this encoding or null if the stream has been closed
604	read	int	The character read or if the end of the stream has been reached
605	read	int	The number of characters read or if the end of the stream has been reached
611	read	int	the next byte of data or if the end of the stream is reached
612	read	int	the total number of bytes read into the buffer or if there is no more data because the end of the stream has been reached
613	available	int	the number of bytes that can be read from this input stream without blocking or code if this input stream has been closed by invoking its link close method or if the pipe is link connectjava
619	append	StringWriter	This writer
620	append	StringWriter	This writer
621	append	StringWriter	This writer
623	getBuffer	StringBuffer	StringBuffer holding the current buffer value
627	read	int	the next byte of data or if the end of the stream has been reached
628	read	int	the total number of bytes read into the buffer or if there is no more data because the end of the stream has been reached
632	available	int	the number of bytes that can be read or skipped over from the input stream without blocking
633	skip	long	inheritDoc
634	markSupported	boolean	false since this class does not support the mark and reset methods
643	putFields	ObjectOutputStream.PutField	an instance of the class Putfield that holds the serializable fields
648	replaceObject	Object	the alternate object that replaced the specified one
649	enableReplaceObject	boolean	the previous setting before this method was invoked
809	readObjectOverride	Object	the Object read from the stream
810	readUnshared	Object	reference to deserialized object
812	readFields	ObjectInputStream.GetField	the GetField object representing the persistent fields of the object being deserialized
814	resolveClass	Class	a Class object corresponding to desc
815	resolveProxyClass	Class	a proxy class for the specified interfaces
816	resolveObject	Object	the substituted object
817	enableResolveObject	boolean	the previous setting before this method was invoked
819	readClassDescriptor	ObjectStreamClass	the class descriptor read
820	read	int	the byte read or if the end of the stream is reached
821	read	int	the actual number of bytes read is returned when the end of the stream is reached
822	available	int	the number of available bytes
824	readBoolean	boolean	the boolean read
825	readByte	byte	the bit byte read
826	readUnsignedByte	int	the bit byte read
827	readChar	char	the bit char read
828	readShort	short	the bit short read
829	readUnsignedShort	int	the bit short read
830	readInt	int	the bit integer read
831	readLong	long	the read bit long
832	readFloat	float	the bit float read
833	readDouble	double	the bit double read
836	skipBytes	int	the actual number of bytes skipped
837	readLine	String	a String copy of the line
838	readUTF	String	the String
865	getObjectStreamClass	ObjectStreamClass	the descriptor class that describes the serializable fields
866	defaulted	boolean	true if and only if the named field is defaulted
867	get	boolean	the value of the named boolean field
868	get	byte	the value of the named byte field
869	get	char	the value of the named char field
870	get	short	the value of the named short field
871	get	int	the value of the named int field
872	get	long	the value of the named long field
873	get	float	the value of the named float field
874	get	double	the value of the named double field
875	get	Object	the value of the named Object field
905	getObjectStreamClass	ObjectStreamClass	the descriptor class that describes the serializable fields
906	defaulted	boolean	true if and only if the named field is defaulted
907	get	boolean	the value of the named boolean field
908	get	byte	the value of the named byte field
909	get	char	the value of the named char field
910	get	short	the value of the named short field
911	get	int	the value of the named int field
912	get	long	the value of the named long field
913	get	float	the value of the named float field
914	get	double	the value of the named double field
915	get	Object	the value of the named Object field
945	getObjectStreamClass	ObjectStreamClass	the descriptor class that describes the serializable fields
946	defaulted	boolean	true if and only if the named field is defaulted
947	get	boolean	the value of the named boolean field
948	get	byte	the value of the named byte field
949	get	char	the value of the named char field
950	get	short	the value of the named short field
951	get	int	the value of the named int field
952	get	long	the value of the named long field
953	get	float	the value of the named float field
954	get	double	the value of the named double field
955	get	Object	the value of the named Object field
986	getName	String	The name of the file or directory denoted by this abstract pathname or the empty string if this pathname's name sequence is empty
987	getParent	String	The pathname string of the parent directory named by this abstract pathname or null if this pathname does not name a parent
988	getParentFile	File	The abstract pathname of the parent directory named by this abstract pathname or null if this pathname does not name a parent
989	getPath	String	The string form of this abstract pathname
990	isAbsolute	boolean	true if this abstract pathname is absolute false otherwise
991	getAbsolutePath	String	The absolute pathname string denoting the same file or directory as this abstract pathname
992	getAbsoluteFile	File	The absolute abstract pathname denoting the same file or directory as this abstract pathname
993	getCanonicalPath	String	The canonical pathname string denoting the same file or directory as this abstract pathname
994	getCanonicalFile	File	The canonical pathname string denoting the same file or directory as this abstract pathname
995	toURL	URL	A URL object representing the equivalent file URL
996	toURI	URI	An absolute hierarchical URI with a scheme equal to file a path representing this abstract pathname and undefined authority query and fragment components
997	canRead	boolean	true if and only if the file specified by this abstract pathname exists and can be read by the application false otherwise
998	canWrite	boolean	true if and only if the file system actually contains a file denoted by this abstract pathname and the application is allowed to write to the file false otherwise
999	exists	boolean	true if and only if the file or directory denoted by this abstract pathname exists false otherwise
1000	isDirectory	boolean	true if and only if the file denoted by this abstract pathname exists and is a directory false otherwise
1001	isFile	boolean	true if and only if the file denoted by this abstract pathname exists and is a normal file false otherwise
1002	isHidden	boolean	true if and only if the file denoted by this abstract pathname is hidden according to the conventions of the underlying platform
1003	lastModified	long	A long value representing the time the file was last modified measured in milliseconds since the epoch GMT January or L if the file does not exist or if an IO error occurs
1004	length	long	The length in bytes of the file denoted by this abstract pathname or L if the file does not exist
1005	createNewFile	boolean	true if the named file does not exist and was successfully created false if the named file already exists
1006	delete	boolean	true if and only if the file or directory is successfully deleted false otherwise
1008	list	String	An array of strings naming the files and directories in the directory denoted by this abstract pathname
1009	list	String	An array of strings naming the files and directories in the directory denoted by this abstract pathname that were accepted by the given code filter
1010	listFiles	File	An array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname
1011	listFiles	File	An array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname
1012	listFiles	File	An array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname
1013	mkdir	boolean	true if and only if the directory was created false otherwise
1014	mkdirs	boolean	true if and only if the directory was created along with all necessary parent directories false otherwise
1015	renameTo	boolean	true if and only if the renaming succeeded false otherwise
1016	setLastModified	boolean	true if and only if the operation succeeded false otherwise
1017	setReadOnly	boolean	true if and only if the operation succeeded false otherwise
1018	setWritable	boolean	true if and only if the operation succeeded
1019	setWritable	boolean	true if and only if the operation succeeded
1020	setReadable	boolean	true if and only if the operation succeeded
1021	setReadable	boolean	true if and only if the operation succeeded
1022	setExecutable	boolean	true if and only if the operation succeeded
1023	setExecutable	boolean	true if and only if the operation succeeded
1024	canExecute	boolean	true if and only if the abstract pathname exists and the application is allowed to execute the file
1025	listRoots	File	An array of code File objects denoting the available filesystem roots or code null if the set of roots could not be determined
1026	getTotalSpace	long	The size in bytes of the partition or L if this abstract pathname does not name a partition
1027	getFreeSpace	long	The number of unallocated bytes on the partition L if the abstract pathname does not name a partition
1028	getUsableSpace	long	The number of available bytes on the partition or L if the abstract pathname does not name a partition
1029	createTempFile	File	An abstract pathname denoting a newlycreated empty file
1030	createTempFile	File	An abstract pathname denoting a newlycreated empty file
1031	compareTo	int	Zero if the argument is equal to this abstract pathname a value less than zero if this abstract pathname is lexicographically less than the argument or a value greater than zero if this abstract pathname is lexicographically greater than the argument
1032	equals	boolean	true if and only if the objects are the same false otherwise
1033	hashCode	int	A hash code for this abstract pathname
1034	toString	String	The string form of this abstract pathname
1037	accept	boolean	true if and only if pathname should be included
1038	valueOf	BigDecimal	a code BigDecimal whose value is unscaledVal times scale
1039	valueOf	BigDecimal	a code BigDecimal whose value is code val
1040	valueOf	BigDecimal	a code BigDecimal whose value is equal to or approximately equal to the value of code val
1041	add	BigDecimal	code this augend
1042	add	BigDecimal	code this augend rounded as necessary
1044	subtract	BigDecimal	code this subtrahend
1045	subtract	BigDecimal	code this subtrahend rounded as necessary
1046	multiply	BigDecimal	code this multiplicand
1047	multiply	BigDecimal	code this multiplicand rounded as necessary
1048	divide	BigDecimal	code this divisor
1050	divide	BigDecimal	code this divisor
1051	divide	BigDecimal	code this divisor
1052	divide	BigDecimal	code this divisor
1053	divide	BigDecimal	code this divisor
1054	divide	BigDecimal	code this divisor rounded as necessary
1055	divideToIntegralValue	BigDecimal	The integer part of code this divisor
1056	divideToIntegralValue	BigDecimal	The integer part of code this divisor
1057	remainder	BigDecimal	code this divisor
1058	remainder	BigDecimal	code this divisor rounded as necessary
1059	divideAndRemainder	BigDecimal	a two element code BigDecimal array the quotient the result of code divideToIntegralValue is the initial element and the remainder is the final element
1060	divideAndRemainder	BigDecimal	a two element code BigDecimal array the quotient the result of code divideToIntegralValue is the initial element and the remainder is the final element
1061	pow	BigDecimal	thisn
1062	pow	BigDecimal	thisn using the ANSI standard X
1063	abs	BigDecimal	code absthis
1064	abs	BigDecimal	code absthis rounded as necessary
1065	negate	BigDecimal	code this
1066	negate	BigDecimal	code this rounded as necessary
1067	plus	BigDecimal	code this
1068	plus	BigDecimal	code this rounded as necessary
1069	signum	int	 or as the value of this code BigDecimal is negative zero or positive
1070	scale	int	the scale of this code BigDecimal
1071	precision	int	the precision of this code BigDecimal
1072	unscaledValue	BigInteger	the unscaled value of this code BigDecimal
1073	round	BigDecimal	a code BigDecimal rounded according to the code MathContext settings
1074	setScale	BigDecimal	a code BigDecimal whose scale is the specified value and whose unscaled value is determined by multiplying or dividing this code BigDecimal's unscaled value by the appropriate power of ten to maintain its overall value
1075	setScale	BigDecimal	a code BigDecimal whose scale is the specified value and whose unscaled value is determined by multiplying or dividing this code BigDecimal's unscaled value by the appropriate power of ten to maintain its overall value
1076	setScale	BigDecimal	a code BigDecimal whose scale is the specified value and whose unscaled value is determined by multiplying or dividing this code BigDecimal's unscaled value by the appropriate power of ten to maintain its overall value
1077	movePointLeft	BigDecimal	a code BigDecimal which is equivalent to this one with the decimal point moved code n places to the left
1078	movePointRight	BigDecimal	a code BigDecimal which is equivalent to this one with the decimal point moved code n places to the right
1080	stripTrailingZeros	BigDecimal	a numerically equal code BigDecimal with any trailing zeros removed
1081	compareTo	int	 or as this code BigDecimal is numerically less than equal to or greater than code val
1083	equals	boolean	code true if and only if the specified code Object is a code BigDecimal whose value and scale are equal to this code BigDecimal's
1084	min	BigDecimal	the code BigDecimal whose value is the lesser of this code BigDecimal and code val
1085	max	BigDecimal	the code BigDecimal whose value is the greater of this code BigDecimal and code val
1086	hashCode	int	hash code for this code BigDecimal
1087	toString	String	string representation of this code BigDecimal
1088	toEngineeringString	String	string representation of this code BigDecimal using engineering notation if an exponent is needed
1089	toPlainString	String	a string representation of this code BigDecimal without an exponent field
1090	toBigInteger	BigInteger	this code BigDecimal converted to a code BigInteger
1091	toBigIntegerExact	BigInteger	this code BigDecimal converted to a code BigInteger
1092	longValue	long	this code BigDecimal converted to a code long
1093	longValueExact	long	this code BigDecimal converted to a code long
1094	intValue	int	this code BigDecimal converted to an code int
1095	intValueExact	int	this code BigDecimal converted to an code int
1096	shortValueExact	short	this code BigDecimal converted to a code short
1097	byteValueExact	byte	this code BigDecimal converted to a code byte
1098	floatValue	float	this code BigDecimal converted to a code float
1099	doubleValue	double	this code BigDecimal converted to a code double
1100	ulp	BigDecimal	the size of an ulp of code this
1101	layoutChars	String	string with canonical string representation of this code BigDecimal
1102	bigTenToThe	BigInteger	a code BigInteger with the value n
1103	expandBigIntegerTenPowers	BigInteger	a code BigDecimal with the value n and in the meantime the BIG_TEN_POWERS_TABLE array gets expanded to the size greater than n
1110	longDigitLength	int	the length of the unscaled value in deciaml digits
1111	bigDigitLength	int	the length of the unscaled value in decimal digits
1112	stripZerosToMatchScale	BigDecimal	this code BigDecimal with a scale possibly reduced to be closed to the preferred scale
1113	checkScale	int	validated scale as an int
1116	doRound	BigDecimal	a code BigDecimal rounded according to the MathContext settings
1119	putIntCompact	int	offset to the array where the representation starts
1120	putIntCompact	int	offset to the array where the representation starts
1121	putIntCompact	int	offset to the array where the representation starts
1122	getPrecision	int	an code int which is the value of the code precision setting
1123	getRoundingMode	RoundingMode	a code RoundingMode object which is the value of the code roundingMode setting
1124	equals	boolean	code true if and only if the specified code Object is a code MathContext object which has exactly the same settings as this object
1125	hashCode	int	hash code for this code MathContext
1126	toString	String	a code String representing the context settings
1163	divideOneWord	int	the remainder of the division is returned
1165	divide	long	the remainder of the division will be returned
1180	probablePrime	BigInteger	a BigInteger of code bitLength bits that is probably prime
1183	nextProbablePrime	BigInteger	the first integer greater than this code BigInteger that is probably prime
1184	primeToCertainty	boolean	code true if this BigInteger is probably prime code false if it's definitely composite
1188	valueOf	BigInteger	a BigInteger with the specified value
1190	add	BigInteger	code this val
1192	subtract	BigInteger	code this val
1194	multiply	BigInteger	code this val
1197	square	BigInteger	code this
1199	divide	BigInteger	code this val
1200	divideAndRemainder	BigInteger	an array of two BigIntegers the quotient code this val is the initial element and the remainder code this val is the final element
1201	remainder	BigInteger	code this val
1202	pow	BigInteger	thisexponent
1203	gcd	BigInteger	code GCDabsthis absval
1207	abs	BigInteger	code absthis
1208	negate	BigInteger	code this
1209	signum	int	 or as the value of this BigInteger is negative zero or positive
1210	mod	BigInteger	code this mod m
1211	modPow	BigInteger	thisexponent mod m
1219	modInverse	BigInteger	code this code mod m
1220	shiftLeft	BigInteger	code this n
1221	shiftRight	BigInteger	code this n
1222	and	BigInteger	code this val
1223	or	BigInteger	code this | val
1224	xor	BigInteger	code this ^ val
1225	not	BigInteger	code ~this
1226	andNot	BigInteger	code this ~val
1227	testBit	boolean	code true if and only if the designated bit is set
1228	setBit	BigInteger	code this | n
1229	clearBit	BigInteger	code this ~n
1230	flipBit	BigInteger	code this ^ n
1231	getLowestSetBit	int	index of the rightmost one bit in this BigInteger
1232	bitLength	int	number of bits in the minimal two'scomplement representation of this BigInteger excluding a sign bit
1233	bitCount	int	number of bits in the two's complement representation of this BigInteger that differ from its sign bit
1234	isProbablePrime	boolean	code true if this BigInteger is probably prime code false if it's definitely composite
1235	compareTo	int	 or as this BigInteger is numerically less than equal to or greater than code val
1236	compareMagnitude	int	 or as this magnitude array is less than equal to or greater than the magnitude aray for the specified BigInteger's
1237	equals	boolean	code true if and only if the specified Object is a BigInteger whose value is numerically equal to this BigInteger
1238	min	BigInteger	the BigInteger whose value is the lesser of this BigInteger and code val
1239	max	BigInteger	the BigInteger whose value is the greater of this and code val
1240	hashCode	int	hash code for this BigInteger
1241	toString	String	String representation of this BigInteger in the given radix
1242	toString	String	decimal String representation of this BigInteger
1243	toByteArray	byte	a byte array containing the two'scomplement representation of this BigInteger
1244	intValue	int	this BigInteger converted to an code int
1245	longValue	long	this BigInteger converted to a code long
1246	floatValue	float	this BigInteger converted to a code float
1247	doubleValue	double	this BigInteger converted to a code double
1259	valueOf	RoundingMode	code RoundingMode corresponding to the given integer
1267	createContentHandler	ContentHandler	a new ContentHandler to read an object from a URLStreamHandler
1268	openConnection	URLConnection	a URLConnection object for the URL
1269	openConnection	URLConnection	a URLConnection object for the URL
1271	getDefaultPort	int	the default port for a URL parsed by this handler
1272	equals	boolean	true if the two urls are considered equal ie
1273	hashCode	int	an int suitable for hash table indexing
1274	sameFile	boolean	true if u and u refer to the same file
1275	getHostAddress	InetAddress	an InetAddress representing the host IP address
1276	hostsEqual	boolean	true if and only if they are equal false otherwise
1277	toExternalForm	String	a string representation of the URL argument
1282	getQuery	String	the query part of this URL or null if one does not exist
1283	getPath	String	the path part of this URL or an empty string if one does not exist
1284	getUserInfo	String	the userInfo part of this URL or null if one does not exist
1285	getAuthority	String	the authority part of this URL
1286	getPort	int	the port number or if the port is not set
1287	getDefaultPort	int	the port number
1288	getProtocol	String	the protocol of this URL
1289	getHost	String	the host name of this URL
1290	getFile	String	the file name of this URL or an empty string if one does not exist
1291	getRef	String	the anchor also known as the reference of this URL or null if one does not exist
1292	equals	boolean	true if the objects are the same false otherwise
1293	hashCode	int	a hash code for this URL
1294	sameFile	boolean	true if they reference the same remote object false otherwise
1295	toString	String	a string representation of this object
1296	toExternalForm	String	a string representation of this object
1297	toURI	URI	a URI instance equivalent to this URL
1298	openConnection	URLConnection	a URLConnection to the URL
1299	openConnection	URLConnection	a URLConnection to the URL
1300	openStream	InputStream	an input stream for reading from the URL connection
1301	getContent	Object	the contents of this URL
1302	getContent	Object	the content object of this URL that is the first match of the types specified in the classes array
1307	getBody	OutputStream	an OutputStream to which the response body can be written
1310	getCookieStore	CookieStore	the cookie store currently used by cookie manager
1311	getHeaderFieldKey	String	the key for the nth header field or null if the key does not exist
1314	getHeaderField	String	the value of the nth header field or null if the value does not exist
1316	getFollowRedirects	boolean	true if HTTP redirects should be automatically followed false if not
1318	getInstanceFollowRedirects	boolean	the value of this HttpURLConnection's instanceFollowRedirects field
1320	getRequestMethod	String	the HTTP request method
1321	getResponseCode	int	the HTTP StatusCode or 
1322	getResponseMessage	String	the HTTP response message or null
1324	usingProxy	boolean	a boolean indicating if the connection is using a proxy
1325	getErrorStream	InputStream	an error stream if any null if there have been no errors the connection is not connected or the server sent no useful data
1327	getURLs	URL	the search path of URLs for loading classes and resources
1328	findClass	Class	the resulting class
1329	definePackage	Package	the newly defined Package object
1330	findResource	URL	a URL for the resource or null if the resource could not be found
1331	findResources	Enumeration	an Enumeration of URLs
1332	getPermissions	PermissionCollection	the permissions granted to the codesource
1333	newInstance	URLClassLoader	the resulting class loader
1334	newInstance	URLClassLoader	the resulting class loader
1335	getAddress	InetAddress	the IP address of the machine to which this datagram is being sent or from which the datagram was received
1336	getPort	int	the port number on the remote host to which this datagram is being sent or from which the datagram was received
1337	getData	byte	the buffer used to receive or send data
1338	getOffset	int	the offset of the data to be sent or the offset of the data received
1339	getLength	int	the length of the data to be sent or the length of the data received
1344	getSocketAddress	SocketAddress	the SocketAddress
1349	get	List	an immutable list of HttpCookie return empty list if no cookies match the given URI
1350	getCookies	List	an immutable list of http cookies return empty list if there's no http cookie in store
1351	getURIs	List	an immutable list of URIs return empty list if no cookie in this cookie store is associated with an URI
1352	remove	boolean	true if this store contained the specified cookie
1353	removeAll	boolean	true if this store changed as a result of the call
1356	getImpl	SocketImpl	the SocketImpl attached to that ServerSocket
1361	getInetAddress	InetAddress	the remote IP address to which this socket is connected or null if the socket is not connected
1362	getLocalAddress	InetAddress	the local address to which the socket is bound or InetAddress
1363	getPort	int	the remote port number to which this socket is connected or if the socket is not connected yet
1364	getLocalPort	int	the local port number to which this socket is bound or if the socket is not bound yet
1365	getRemoteSocketAddress	SocketAddress	a SocketAddress reprensenting the remote endpoint of this socket or null if it is not connected yet
1366	getLocalSocketAddress	SocketAddress	a SocketAddress representing the local endpoint of this socket or null if it is not bound yet
1367	getChannel	SocketChannel	the socket channel associated with this socket or null if this socket was not created for a channel
1368	getInputStream	InputStream	an input stream for reading bytes from this socket
1369	getOutputStream	OutputStream	an output stream for writing bytes to this socket
1371	getTcpNoDelay	boolean	a boolean indicating whether or not TCP_NODELAY is enabled
1373	getSoLinger	int	the setting for SO_LINGER
1376	getOOBInline	boolean	a boolean indicating whether or not OOBINLINE is enabled
1378	getSoTimeout	int	the setting for SO_TIMEOUT
1380	getSendBufferSize	int	the value of the SO_SNDBUF option for this Socket
1382	getReceiveBufferSize	int	the value of the SO_RCVBUF option for this Socket
1384	getKeepAlive	boolean	a boolean indicating whether or not SO_KEEPALIVE is enabled
1386	getTrafficClass	int	the traffic class or typeofservice already set
1388	getReuseAddress	boolean	a boolean indicating whether or not SO_REUSEADDR is enabled
1392	toString	String	a string representation of this socket
1393	isConnected	boolean	true if the socket successfuly connected to a server
1394	isBound	boolean	true if the socket successfuly bound to an address
1395	isClosed	boolean	true if the socket has been closed
1396	isInputShutdown	boolean	true if the input of the socket has been shutdown
1397	isOutputShutdown	boolean	true if the output of the socket has been shutdown
1400	createDatagramSocketImpl	DatagramSocketImpl	a new instance of DatagramSocketImpl
1406	peek	int	the port number which the packet came from
1407	peekData	int	the port number which the packet came from
1410	getTTL	byte	a byte representing the TTL value
1412	getTimeToLive	int	an int representing the timetolive value
1418	getLocalPort	int	an int representing the local port value
1419	getFileDescriptor	FileDescriptor	a FileDescriptor object representing the datagram socket file descriptor
1420	shouldAccept	boolean	true if this cookie should be accepted otherwise false
1421	getHeaders	Map	An immutable Map from response header field names to lists of field values
1422	getBody	InputStream	an InputStream from which the response body can be accessed
1423	getImpl	SocketImpl	the SocketImpl attached to that ServerSocket
1427	getInetAddress	InetAddress	the address to which this socket is bound or null if the socket is unbound
1428	getLocalPort	int	the port number to which this socket is listening or if the socket is not bound yet
1429	getLocalSocketAddress	SocketAddress	a SocketAddress representing the local endpoint of this socket or null if it is not bound yet
1430	accept	Socket	the new Socket
1433	getChannel	ServerSocketChannel	the serversocket channel associated with this socket or null if this socket was not created for a channel
1434	isBound	boolean	true if the ServerSocket succesfuly bound to an address
1435	isClosed	boolean	true if the socket has been closed
1437	getSoTimeout	int	the SO_TIMEOUT value
1439	getReuseAddress	boolean	a boolean indicating whether or not SO_REUSEADDR is enabled
1440	toString	String	a string representation of this socket
1443	getReceiveBufferSize	int	the value of the SO_RCVBUF option for this Socket
1445	toASCII	String	the translated String
1446	toASCII	String	the translated String
1447	toUnicode	String	the translated String
1448	toUnicode	String	the translated String
1449	getInput	String	The input string
1450	getReason	String	The reason string
1451	getIndex	int	The error index
1452	getMessage	String	A string describing the parse error
1455	getTTL	byte	the default timetolive value
1456	getTimeToLive	int	the default timetolive value
1462	getInterface	InetAddress	An InetAddress representing the address of the network interface used for multicast packets
1464	getNetworkInterface	NetworkInterface	the multicast NetworkInterface currently set
1466	getLoopbackMode	boolean	true if the LoopbackMode has been disabled
1500	responseCode	int	The http response code
1501	getReason	String	The reason string
1502	getLocation	String	The location string
1503	getName	String	the name of this network interface
1504	getInetAddresses	Enumeration	an Enumeration object with all or a subset of the InetAddresses bound to this network interface
1505	getInterfaceAddresses	List	a List object with all or a subset of the InterfaceAddresss of this network interface
1506	getSubInterfaces	Enumeration	an Enumeration object with all of the subinterfaces of this network interface
1507	getParent	NetworkInterface	The NetworkInterface this interface is attached to
1508	getIndex	int	the index of this network interface
1509	getDisplayName	String	the display name of this network interface or null if no display name is available
1510	getByName	NetworkInterface	A NetworkInterface with the specified name or null if there is no network interface with the specified name
1511	getByIndex	NetworkInterface	the NetworkInterface obtained from its index
1512	getByInetAddress	NetworkInterface	A NetworkInterface or null if there is no network interface with the specified IP address
1513	getNetworkInterfaces	Enumeration	an Enumeration of NetworkInterfaces found on this machine
1514	isUp	boolean	true if the interface is up and running
1515	isLoopback	boolean	true if the interface is a loopback interface
1516	isPointToPoint	boolean	true if the interface is a point to point interface
1517	supportsMulticast	boolean	true if the interface supports Multicasting
1518	getHardwareAddress	byte	a byte array containing the address or null if the address doesn't exist or is not accessible
1519	getMTU	int	the value of the MTU for that interface
1520	isVirtual	boolean	true if this interface is a virtual interface
1521	equals	boolean	true if the objects are the same false otherwise
1523	getOption	Object	the value of the option
1524	getContentTypeFor	String	a String indicating the MIME type for the specified file name
1525	getDefault	CookieHandler	the systemwide cookie handler A null return means there is no systemwide cookie handler currently set
1527	get	Map	an immutable map from state management headers with field names Cookie or Cookie to a list of cookies containing state information
1529	getJarFileURL	URL	the URL for the Jar file for this connection
1530	getEntryName	String	the entry name for this connection if any
1531	getJarFile	JarFile	the JAR file for this connection
1532	getManifest	Manifest	the manifest object corresponding to the JAR file object for this connection
1533	getJarEntry	JarEntry	the JAR entry object for this connection or null if the JAR URL for this connection points to a JAR file
1534	getAttributes	Attributes	the Attributes object for this connection if the URL for it points to a JAR file entry null otherwise
1535	getMainAttributes	Attributes	the main Attributes for the JAR file for this connection
1536	getCertificates	Certificate	the Certificate object for this connection if the URL for it points to a JAR file entry null otherwise
1537	type	Proxy.Type	a Type representing the proxy type
1538	address	SocketAddress	a SocketAddress representing the socket end point of the proxy
1539	toString	String	a string representation of this object
1540	equals	boolean	true if the objects are the same false otherwise
1541	hashCode	int	a hash code value for this Proxy
1542	readResolve	Object	the alternate object to the deserialized object
1543	isMulticastAddress	boolean	a boolean indicating if the InetAddress is an IP multicast address
1544	isAnyLocalAddress	boolean	a boolean indicating if the Inetaddress is a wildcard address
1545	isLoopbackAddress	boolean	a boolean indicating if the InetAddress is a loopback address or false otherwise
1546	isLinkLocalAddress	boolean	a boolean indicating if the InetAddress is a link local address or false if address is not a link local unicast address
1547	isSiteLocalAddress	boolean	a boolean indicating if the InetAddress is a site local address or false if address is not a site local unicast address
1548	isMCGlobal	boolean	a boolean indicating if the address has is a multicast address of global scope false if it is not of global scope or it is not a multicast address
1549	isMCNodeLocal	boolean	a boolean indicating if the address has is a multicast address of nodelocal scope false if it is not of nodelocal scope or it is not a multicast address
1550	isMCLinkLocal	boolean	a boolean indicating if the address has is a multicast address of linklocal scope false if it is not of linklocal scope or it is not a multicast address
1551	isMCSiteLocal	boolean	a boolean indicating if the address has is a multicast address of sitelocal scope false if it is not of sitelocal scope or it is not a multicast address
1552	isMCOrgLocal	boolean	a boolean indicating if the address has is a multicast address of organizationlocal scope false if it is not of organizationlocal scope or it is not a multicast address
1553	isReachable	boolean	a boolean indicating if the address is reachable
1554	isReachable	boolean	a booleanindicating if the address is reachable
1555	getHostName	String	the host name for this IP address or if the operation is not allowed by the security check the textual representation of the IP address
1556	getHostName	String	the host name for this IP address or if the operation is not allowed by the security check the textual representation of the IP address
1557	getCanonicalHostName	String	the fully qualified domain name for this IP address or if the operation is not allowed by the security check the textual representation of the IP address
1558	getHostFromNameService	String	the host name for this IP address or if the operation is not allowed by the security check the textual representation of the IP address
1559	getAddress	byte	the raw IP address of this object
1560	getHostAddress	String	the raw IP address in a string format
1561	hashCode	int	a hash code value for this IP address
1562	equals	boolean	true if the objects are the same false otherwise
1563	toString	String	a string representation of this IP address
1564	getByAddress	InetAddress	an InetAddress object created from the raw IP address
1565	getByName	InetAddress	an IP address for the given host name
1566	getAllByName	InetAddress	an array of all the IP addresses for a given host name
1569	getByAddress	InetAddress	an InetAddress object created from the raw IP address
1570	getLocalHost	InetAddress	the address of the local host
1579	getMask	int	the action mask
1582	implies	boolean	true if the specified permission is implied by this object false if not
1583	impliesIgnoreMask	boolean	true if permission is a proper subset of the current object false if not
1584	equals	boolean	true if obj is a SocketPermission and has the same hostname port range and actions as this SocketPermission object
1585	hashCode	int	a hash code value for this object
1586	getMask	int	the actions mask
1587	getActions	String	the canonical string representation of the actions
1588	getActions	String	the canonical string representation of the actions
1589	newPermissionCollection	PermissionCollection	a new PermissionCollection object suitable for storing SocketPermissions
1593	implies	boolean	true if permission is a proper subset of a permission in the collection false if not
1594	elements	Enumeration	an enumeration of all the SocketPermission objects
1596	create	URI	The new URI
1597	parseServerAuthority	URI	A URI whose authority field has been parsed as a serverbased authority
1598	normalize	URI	A URI equivalent to this URI but whose path is in normal form
1599	resolve	URI	The resulting URI
1600	resolve	URI	The resulting URI
1601	relativize	URI	The resulting URI
1602	toURL	URL	A URL constructed from this URI
1603	getScheme	String	The scheme component of this URI or null if the scheme is undefined
1604	isAbsolute	boolean	true if and only if this URI is absolute
1605	isOpaque	boolean	true if and only if this URI is opaque
1606	getRawSchemeSpecificPart	String	The raw schemespecific part of this URI never null
1607	getSchemeSpecificPart	String	The decoded schemespecific part of this URI never null
1608	getRawAuthority	String	The raw authority component of this URI or null if the authority is undefined
1609	getAuthority	String	The decoded authority component of this URI or null if the authority is undefined
1610	getRawUserInfo	String	The raw userinformation component of this URI or null if the user information is undefined
1611	getUserInfo	String	The decoded userinformation component of this URI or null if the user information is undefined
1612	getHost	String	The host component of this URI or null if the host is undefined
1613	getPort	int	The port component of this URI or if the port is undefined
1614	getRawPath	String	The path component of this URI or null if the path is undefined
1615	getPath	String	The decoded path component of this URI or null if the path is undefined
1616	getRawQuery	String	The raw query component of this URI or null if the query is undefined
1617	getQuery	String	The decoded query component of this URI or null if the query is undefined
1618	getRawFragment	String	The raw fragment component of this URI or null if the fragment is undefined
1619	getFragment	String	The decoded fragment component of this URI or null if the fragment is undefined
1620	equals	boolean	true if and only if the given object is a URI that is identical to this URI
1621	hashCode	int	A hashcode value for this URI
1622	compareTo	int	A negative integer zero or a positive integer as this URI is less than equal to or greater than the given URI
1623	toString	String	The string form of this URI
1624	toASCIIString	String	The string form of this URI encoded as needed so that it only contains characters in the USASCII charset
1627	getUserName	String	the user name
1628	getPassword	char	the password
1629	getDefault	ProxySelector	the systemwide ProxySelector
1631	select	List	a List of Proxies
1633	getAddress	InetAddress	the InetAddress for this address
1634	getBroadcast	InetAddress	the InetAddress representing the broadcast address or null if there is no broadcast address
1635	getNetworkPrefixLength	short	a short representing the prefix length for the subnet of that address
1636	equals	boolean	true if the objects are the same false otherwise
1637	hashCode	int	a hash code value for this Interface address
1638	toString	String	a string representation of this Interface address
1639	createSocketImpl	SocketImpl	a new instance of SocketImpl
1640	getChannel	FileChannel	the file channel associated with this file output stream
1648	getCipherSuite	String	a string representing the cipher suite
1649	getLocalCertificateChain	List	an immutable List of Certificate representing the certificate chain that was sent to the server
1650	getServerCertificateChain	List	an immutable List of Certificate representing the server's certificate chain
1651	getPeerPrincipal	Principal	the server's principal
1652	getLocalPrincipal	Principal	the principal sent to the server
1653	getChannel	FileChannel	the file channel associated with this file input stream
1654	socketRead0	int	the actual number of bytes read is returned when the end of the stream is reached
1655	read	int	the actual number of bytes read is returned when the end of the stream is reached
1656	read	int	the actual number of bytes read is returned when the end of the stream is reached
1658	skip	long	the actual number of bytes skipped
1659	available	int	the number of immediately available bytes
1662	writeReplace	Object	the alternate object to be serialized
1663	isMulticastAddress	boolean	a boolean indicating if the InetAddress is an IP multicast address
1664	isAnyLocalAddress	boolean	a boolean indicating if the Inetaddress is a wildcard address
1665	isLinkLocalAddress	boolean	a boolean indicating if the InetAddress is a link local address or false if address is not a link local unicast address
1666	isSiteLocalAddress	boolean	a boolean indicating if the InetAddress is a site local address or false if address is not a site local unicast address
1667	isMCGlobal	boolean	a boolean indicating if the address has is a multicast address of global scope false if it is not of global scope or it is not a multicast address
1668	isMCNodeLocal	boolean	a boolean indicating if the address has is a multicast address of nodelocal scope false if it is not of nodelocal scope or it is not a multicast address
1669	isMCLinkLocal	boolean	a boolean indicating if the address has is a multicast address of linklocal scope false if it is not of linklocal scope or it is not a multicast address
1670	isMCSiteLocal	boolean	a boolean indicating if the address has is a multicast address of sitelocal scope false if it is not of sitelocal scope or it is not a multicast address
1671	isMCOrgLocal	boolean	a boolean indicating if the address has is a multicast address of organizationlocal scope false if it is not of organizationlocal scope or it is not a multicast address
1672	getAddress	byte	the raw IP address of this object
1673	getHostAddress	String	the raw IP address in a string format
1674	hashCode	int	a hash code value for this IP address
1675	equals	boolean	true if the objects are the same false otherwise
1677	createUnresolved	InetSocketAddress	a InetSocketAddress representing the unresolved socket address
1678	getPort	int	the port number
1679	getAddress	InetAddress	the InetAdress or null if it is unresolved
1680	getHostName	String	the hostname part of the address
1681	getHostString	String	the hostname or String representation of the address
1682	isUnresolved	boolean	true if the hostname couldn't be resolved into an InetAddress
1683	toString	String	a string representation of this object
1684	equals	boolean	true if the objects are the same false otherwise
1685	hashCode	int	a hash code value for this socket address
1687	requestPasswordAuthentication	PasswordAuthentication	The usernamepassword or null if one can't be gotten
1688	requestPasswordAuthentication	PasswordAuthentication	The usernamepassword or null if one can't be gotten
1689	requestPasswordAuthentication	PasswordAuthentication	The usernamepassword or null if one can't be gotten
1690	getRequestingHost	String	the hostname of the connection requiring authentication or null if it's not available
1691	getRequestingSite	InetAddress	the InetAddress of the site requesting authorization or null if it's not available
1692	getRequestingPort	int	an int indicating the port for the requested connection
1693	getRequestingProtocol	String	the protcol optionally followed by version where version is a version number
1694	getRequestingPrompt	String	the prompt string given by the requestor realm for http requests
1695	getRequestingScheme	String	the scheme of the requestor
1696	getPasswordAuthentication	PasswordAuthentication	The PasswordAuthentication collected from the user or null if none is provided
1697	getRequestingURL	URL	the requesting URL
1698	getRequestorType	Authenticator.RequestorType	the authentication type of the requestor
1700	getImpl	DatagramSocketImpl	the DatagramSocketImpl attached to that DatagramSocket
1705	isBound	boolean	true if the socket successfully bound to an address
1706	isConnected	boolean	true if the socket successfully connected to a server
1707	getInetAddress	InetAddress	the address to which this socket is connected
1708	getPort	int	the port number to which this socket is connected
1709	getRemoteSocketAddress	SocketAddress	a SocketAddress representing the remote endpoint of this socket or null if it is not connected yet
1710	getLocalSocketAddress	SocketAddress	a SocketAddress representing the local endpoint of this socket or null if it is not bound yet
1713	getLocalAddress	InetAddress	the local address to which the socket is bound or an InetAddress representing any local address if either the socket is not bound or the security manager checkConnect method does not allow the operation
1714	getLocalPort	int	the port number on the local host to which this socket is bound
1716	getSoTimeout	int	the setting for SO_TIMEOUT
1718	getSendBufferSize	int	the value of the SO_SNDBUF option for this DatagramSocket
1720	getReceiveBufferSize	int	the value of the SO_RCVBUF option for this DatagramSocket
1722	getReuseAddress	boolean	a boolean indicating whether or not SO_REUSEADDR is enabled
1724	getBroadcast	boolean	a boolean indicating whether or not SO_BROADCAST is enabled
1726	getTrafficClass	int	the traffic class or typeofservice already set
1728	isClosed	boolean	true if the socket has been closed
1729	getChannel	DatagramChannel	the datagram channel associated with this datagram socket or null if this socket was not created for a channel
1731	decode	String	the newly decoded String
1732	decode	String	the newly decoded String
1733	getFileNameMap	FileNameMap	the FileNameMap
1737	getConnectTimeout	int	an int that indicates the connect timeout value in milliseconds
1739	getReadTimeout	int	an int that indicates the read timeout value in milliseconds
1740	getURL	URL	the value of this URLConnection's URL field
1741	getContentLength	int	the content length of the resource that this connection's URL references or if the content length is not known
1742	getContentType	String	the content type of the resource that the URL references or null if not known
1743	getContentEncoding	String	the content encoding of the resource that the URL references or null if not known
1744	getExpiration	long	the expiration date of the resource that this URL references or if not known
1745	getDate	long	the sending date of the resource that the URL references or if not known
1746	getLastModified	long	the date the resource referenced by this URLConnection was last modified or if not known
1747	getHeaderField	String	the value of the named header field or null if there is no such field in the header
1748	getHeaderFields	Map	a Map of header fields
1749	getHeaderFieldInt	int	the value of the named field parsed as an integer
1750	getHeaderFieldDate	long	the value of the field parsed as a date
1751	getHeaderFieldKey	String	the key for the nth header field or null if there are fewer than n fields
1752	getHeaderField	String	the value of the nth header field or null if there are fewer than n fields
1753	getContent	Object	the object fetched
1754	getContent	Object	the object fetched that is the first match of the type specified in the classes array
1755	getPermission	Permission	the permission object representing the permission necessary to make the connection represented by this URLConnection
1756	getInputStream	InputStream	an input stream that reads from this open connection
1757	getOutputStream	OutputStream	an output stream that writes to this connection
1758	toString	String	a string representation of this URLConnection
1760	getDoInput	boolean	the value of this URLConnection's doInput flag
1762	getDoOutput	boolean	the value of this URLConnection's doOutput flag
1764	getAllowUserInteraction	boolean	the value of the allowUserInteraction field for this object
1766	getDefaultAllowUserInteraction	boolean	the default value of the allowUserInteraction field
1768	getUseCaches	boolean	the value of this URLConnection's useCaches field
1770	getIfModifiedSince	long	the value of this object's ifModifiedSince field
1771	getDefaultUseCaches	boolean	the default value of a URLConnection's useCaches flag
1775	getRequestProperty	String	the value of the named general request property for this connection
1776	getRequestProperties	Map	a Map of the general request properties for this connection
1778	getDefaultRequestProperty	String	the value of the default request property for the specified key
1784	guessContentTypeFromName	String	a guess as to what the content type of the object is based upon its file name
1785	guessContentTypeFromStream	String	a guess at the content type or null if none can be determined
1789	encode	String	the translated String
1790	encode	String	the translated String
1791	getContent	Object	the object read by the ContentHandler
1792	getContent	Object	the object read by the ContentHandler that is the first match of the suggested types
1793	getByAddress	Inet6Address	an InetAddress object created from the raw IP address
1794	getByAddress	Inet6Address	an InetAddress object created from the raw IP address
1796	isMulticastAddress	boolean	a boolean indicating if the InetAddress is an IP multicast address
1797	isAnyLocalAddress	boolean	a boolean indicating if the Inetaddress is a wildcard address
1798	isLoopbackAddress	boolean	a boolean indicating if the InetAddress is a loopback address or false otherwise
1799	isLinkLocalAddress	boolean	a boolean indicating if the InetAddress is a link local address or false if address is not a link local unicast address
1800	isSiteLocalAddress	boolean	a boolean indicating if the InetAddress is a site local address or false if address is not a site local unicast address
1801	isMCGlobal	boolean	a boolean indicating if the address has is a multicast address of global scope false if it is not of global scope or it is not a multicast address
1802	isMCNodeLocal	boolean	a boolean indicating if the address has is a multicast address of nodelocal scope false if it is not of nodelocal scope or it is not a multicast address
1803	isMCLinkLocal	boolean	a boolean indicating if the address has is a multicast address of linklocal scope false if it is not of linklocal scope or it is not a multicast address
1804	isMCSiteLocal	boolean	a boolean indicating if the address has is a multicast address of sitelocal scope false if it is not of sitelocal scope or it is not a multicast address
1805	isMCOrgLocal	boolean	a boolean indicating if the address has is a multicast address of organizationlocal scope false if it is not of organizationlocal scope or it is not a multicast address
1806	getAddress	byte	the raw IP address of this object
1807	getScopeId	int	the scopeId or zero if not set
1808	getScopedInterface	NetworkInterface	the scoped interface or null if not set
1809	getHostAddress	String	the raw IP address in a string format
1810	hashCode	int	a hash code value for this IP address
1811	equals	boolean	true if the objects are the same false otherwise
1812	isIPv4CompatibleAddress	boolean	a boolean indicating if the InetAddress is an IPv compatible IPv address or false if address is IPv address
1815	getDefault	ResponseCache	the systemwide ResponseCache
1817	get	CacheResponse	a CacheResponse instance if available from cache or null otherwise
1818	put	CacheRequest	a CacheRequest for recording the response to be cached
1819	createURLStreamHandler	URLStreamHandler	a URLStreamHandler for the specific protocol
1820	parse	List	a List of cookie parsed from header line string
1821	hasExpired	boolean	true to indicate this http cookie has expired otherwise false
1823	getComment	String	a String containing the comment or null if none
1825	getCommentURL	String	a String containing the comment url or null if none
1827	getDiscard	boolean	a boolean to represent this cookie's discard attribute
1829	getPortlist	String	a String contains the port list or null if none
1831	getDomain	String	a String containing the domain name
1833	getMaxAge	long	an integer specifying the maximum age of the cookie in seconds
1835	getPath	String	a String specifying a path that contains a servlet name for example catalog
1837	getSecure	boolean	true if the browser can use any standard protocol otherwise false
1838	getName	String	a String specifying the cookie's name
1840	getValue	String	a String containing the cookie's present value
1841	getVersion	int	 if the cookie complies with the original Netscape specification if the cookie complies with RFC 
1843	domainMatches	boolean	true if they domainmatches false if not
1844	toString	String	a string form of the cookie
1845	equals	boolean	true if http cookies equal to each other otherwise false
1846	hashCode	int	this http cookie's hash code
1847	clone	Object	a clone of this http cookie
1852	getInetAddress	InetAddress	the value of this socket's address field
1853	getPort	int	the value of this socket's port field
1861	getInputStream	InputStream	a stream for reading from this socket
1862	getOutputStream	OutputStream	an output stream for writing to this socket
1863	available	int	the number of bytes that can be read from this socket without blocking
1867	getFileDescriptor	FileDescriptor	the value of this socket's fd field
1868	getInetAddress	InetAddress	the value of this socket's address field
1869	getPort	int	the value of this socket's port field
1870	supportsUrgentData	boolean	true if urgent data supported
1872	getLocalPort	int	the value of this socket's localport field
1873	toString	String	a string representation of this socket
1875	getInstance	DateFormatSymbols	a DateFormatSymbols instance
1876	getInstance	Collator	the Collator for the desired locale
1877	getInstance	DecimalFormatSymbols	a DecimalFormatSymbols instance
1878	getWordInstance	BreakIterator	A break iterator for word breaks
1879	getLineInstance	BreakIterator	A break iterator for line breaks
1880	getCharacterInstance	BreakIterator	A break iterator for character breaks
1881	getSentenceInstance	BreakIterator	A break iterator for sentence breaks
1882	getCurrencyInstance	NumberFormat	a currency formatter
1883	getIntegerInstance	NumberFormat	a number format for integer values
1884	getNumberInstance	NumberFormat	a generalpurpose number formatter
1885	getPercentInstance	NumberFormat	a percent formatter
1886	getTimeInstance	DateFormat	a time formatter
1887	getDateInstance	DateFormat	a date formatter
1888	getDateTimeInstance	DateFormat	a datetime formatter
1889	getRules	String	returns the collation rules that the table collation object was created from
1892	getMaxExpansion	int	the maximum length of any expansion seuences ending with the specified order
1894	getUnicodeOrder	int	the comparison order of a character
1904	getIterator	AttributedCharacterIterator	An iterator providing access to the text and its attributes
1905	getIterator	AttributedCharacterIterator	an iterator providing access to the entire text and its selected attributes
1906	getIterator	AttributedCharacterIterator	an iterator providing access to the text and its attributes
1910	format	StringBuffer	the value passed in as toAppendTo
1911	format	StringBuffer	The formatted number string
1912	format	StringBuffer	The formatted number string
1913	format	StringBuffer	The formatted number string
1914	format	StringBuffer	The formatted number string
1915	format	StringBuffer	The formatted number string
1916	format	StringBuffer	The formatted number string
1917	format	StringBuffer	The formatted number string
1918	format	StringBuffer	The formatted number string
1919	formatToCharacterIterator	AttributedCharacterIterator	AttributedCharacterIterator describing the formatted value
1922	parse	Number	the parsed value or null if the parse fails
1926	getDecimalFormatSymbols	DecimalFormatSymbols	a copy of the desired DecimalFormatSymbols
1930	getPositivePrefixFieldPositions	FieldPosition	FieldPositions in positive prefix
1933	getNegativePrefixFieldPositions	FieldPosition	FieldPositions in positive prefix
1936	getPositiveSuffixFieldPositions	FieldPosition	FieldPositions in positive prefix
1939	getNegativeSuffixFieldPositions	FieldPosition	FieldPositions in positive prefix
1954	expandAffix	String	the expanded equivalent of pattern
1955	expandAffix	FieldPosition	FieldPosition array of the resulting fields
1970	getCurrency	Currency	the currency used by this decimal format or null
1972	getRoundingMode	RoundingMode	The RoundingMode used for this DecimalFormat
1976	format	StringBuffer	the value passed in as toAppendTo
1977	parseObject	Object	A Number parsed from the string
1983	parse	Number	A Number parsed from the string
1990	getIntegerInstance	NumberFormat	a number format for integer values
1991	getIntegerInstance	NumberFormat	a number format for integer values
1998	getAvailableLocales	Locale	An array of locales for which localized NumberFormat instances are available
2012	getCurrency	Currency	the currency used by this number format or null
2014	getRoundingMode	RoundingMode	The RoundingMode used for this NumberFormat
2018	readResolve	Object	resolved NumberFormat
2019	readResolve	Object	resolved NumberFormat
2020	readResolve	Object	resolved NumberFormat
2038	equals	boolean	true if the given obj is the same as this StringCharacterIterator object false otherwise
2039	hashCode	int	A hash code
2040	clone	Object	A copy of this
2041	getAvailableLocales	Locale	An array of locales for which localized DateFormatSymbols instances are available
2042	getInstance	DateFormatSymbols	a DateFormatSymbols instance
2043	getInstance	DateFormatSymbols	a DateFormatSymbols instance
2044	getEras	String	the era strings
2046	getMonths	String	the month strings
2048	getShortMonths	String	the short month strings
2050	getWeekdays	String	the weekday strings
2052	getShortWeekdays	String	the short weekday strings
2054	getAmPmStrings	String	the ampm strings
2056	getZoneStrings	String	the time zone strings
2058	getLocalPatternChars	String	the localized datetime pattern characters
2064	getZoneIndex	int	the index of the given time zone ID
2066	duplicate	String	a cloned array
2070	first	int	The offset of the beginning of the text
2071	last	int	The text's pasttheend offset
2072	previous	int	The position of the last boundary position before the current iteration position
2073	preceding	int	The position of the last boundary before offset
2074	following	int	The position of the first boundary after offset
2079	clone	Object	A newlyconstructed RuleBasedBreakIterator with the same behavior as this one
2082	hashCode	int	A hash code
2083	first	int	The offset of the beginning of the text
2084	last	int	The text's pasttheend offset
2085	next	int	The character offset of the boundary position n boundaries away from the current one
2086	next	int	The position of the first boundary after this one
2087	previous	int	The position of the last boundary position preceding this one
2094	following	int	The position of the first break after the current position
2095	preceding	int	The position of the last boundary before the starting position
2096	isBoundary	boolean	True if offset is a boundary position
2097	current	int	The current iteration position
2098	getText	CharacterIterator	An iterator over the text being analyzed
2108	getLimits	double	the limits
2109	getFormats	Object	the formats
2112	parse	Number	A Number representing the value of the number parsed
2120	clone	Object	A copy of this
2121	first	int	The character index of the first text boundary
2122	last	int	The character index of the last text boundary
2123	next	int	The character index of the nth boundary from the current position or BreakIterator
2124	next	int	The character index of the next text boundary or BreakIterator
2125	previous	int	The character index of the previous text boundary or BreakIterator
2126	following	int	The first boundary after the specified offset or BreakIterator
2127	preceding	int	The last boundary before the specified offset or BreakIterator
2128	isBoundary	boolean	true if offset is a boundary position false otherwise
2129	current	int	The text boundary returned from the above methods first or last text boundary
2130	getText	CharacterIterator	the text being scanned
2133	getWordInstance	BreakIterator	A break iterator for word breaks
2134	getWordInstance	BreakIterator	A break iterator for word breaks
2135	getLineInstance	BreakIterator	A break iterator for line breaks
2136	getLineInstance	BreakIterator	A break iterator for line breaks
2137	getCharacterInstance	BreakIterator	A break iterator for character breaks
2138	getCharacterInstance	BreakIterator	A break iterator for character breaks
2139	getSentenceInstance	BreakIterator	A break iterator for sentence breaks
2140	getSentenceInstance	BreakIterator	A break iterator for sentence breaks
2141	getAvailableLocales	Locale	An array of locales for which localized BreakIterator instances are available
2142	getAvailableLocales	Locale	An array of locales for which localized DecimalFormatSymbols instances are available
2143	getInstance	DecimalFormatSymbols	a DecimalFormatSymbols instance
2144	getInstance	DecimalFormatSymbols	a DecimalFormatSymbols instance
2169	getCurrency	Currency	the currency used or null
2174	getExponentSeparator	String	the exponent separator string
2188	fitsIntoLong	boolean	true if this number fits into a Java long
2193	shouldRoundUp	boolean	true if digit maximumDigits should be incremented
2200	clone	Object	a clone of this instance
2202	compareTo	int	Returns an integer value
2203	equals	boolean	Returns true if two objects are equal false otherwise
2204	hashCode	int	the hash value based on the string's collation order
2209	get2DigitYearStart	Date	the start of the year period into which two digit years are parsed
2210	format	StringBuffer	the formatted datetime string
2211	formatToCharacterIterator	AttributedCharacterIterator	AttributedCharacterIterator describing the formatted value
2214	parse	Date	A Date parsed from the string
2215	matchString	int	the new start position if matching succeeded a negative number indicating matching failure otherwise
2218	subParse	int	the new start position if matching succeeded indicating matching failure otherwise
2220	toPattern	String	a pattern string describing this date format
2221	toLocalizedPattern	String	a localized pattern string describing this date format
2224	getDateFormatSymbols	DateFormatSymbols	the date and time format symbols of this date format
2226	clone	Object	a clone of this SimpleDateFormat
2227	hashCode	int	the hash code value for this SimpleDateFormat object
2228	equals	boolean	true if the given object is equal to this SimpleDateFormat
2232	isMixed	boolean	true if the line is not lefttoright or righttoleft
2233	isLeftToRight	boolean	true if the line is all lefttoright text and the base direction is lefttoright
2234	isRightToLeft	boolean	true if the line is all righttoleft text and the base direction is righttoleft
2235	getLength	int	the length of text in the line
2236	baseIsLeftToRight	boolean	true if the base direction is lefttoright
2237	getBaseLevel	int	the base level
2238	getLevelAt	int	the resolved level of the character at offset
2239	getRunCount	int	the number of level runs
2240	getRunLevel	int	the level of the run
2241	getRunStart	int	the start of the run
2242	getRunLimit	int	limit the limit of the run
2243	requiresBidi	boolean	true if the range of characters requires bidi analysis
2248	normalize	String	The normalized String
2249	isNormalized	boolean	true if the sequence of char values is normalized false otherwise
2252	format	String	Formatted string
2253	format	StringBuffer	the string buffer passed in as toAppendTo with formatted text appended
2254	formatToCharacterIterator	AttributedCharacterIterator	AttributedCharacterIterator describing the formatted value
2255	parseObject	Object	An Object parsed from the string
2256	parseObject	Object	An Object parsed from the string
2257	clone	Object	a clone of this instance
2258	createAttributedCharacterIterator	AttributedCharacterIterator	AttributedCharacterIterator wrapping s
2259	createAttributedCharacterIterator	AttributedCharacterIterator	AttributedCharacterIterator wrapping passed in AttributedCharacterIterators
2260	createAttributedCharacterIterator	AttributedCharacterIterator	AttributedCharacterIterator wrapping args
2261	createAttributedCharacterIterator	AttributedCharacterIterator	AttributedCharacterIterator wrapping args
2268	getFieldAttribute	Format.Field	Identifier for the field
2276	hashCode	int	a hash code value for this object
2277	toString	String	a string representation of this object
2280	getRules	String	returns the collation rules that the table collation object was created from
2286	equals	boolean	true if the current tablebased collation object is the same as the tablebased collation object obj false otherwise
2290	compareTo	int	Returns an integer value
2293	getInstance	Collator	the Collator for the default locale
2294	getInstance	Collator	the Collator for the desired locale
2295	compare	int	Returns an integer value
2296	compare	int	a negative integer zero or a positive integer as the first argument is less than equal to or greater than the second
2297	getCollationKey	CollationKey	the CollationKey for the given String based on this Collator's collation rules
2298	equals	boolean	true if the strings are equal according to the collation rules
2299	getStrength	int	this Collator's current strength property
2301	getDecomposition	int	the decomposition mode
2303	getAvailableLocales	Locale	An array of locales for which localized Collator instances are available
2305	equals	boolean	true if this Collator is the same as that Collator false otherwise
2308	getLocale	Locale	the locale used when creating or comparing subformats
2310	toPattern	String	a pattern representing the current state of the message format
2315	getFormatsByArgumentIndex	Format	the formats used for the arguments within the pattern
2316	getFormats	Format	the formats used for the format elements in the pattern
2320	formatToCharacterIterator	AttributedCharacterIterator	AttributedCharacterIterator describing the formatted value
2322	parse	Object	An Object array parsed from the string
2323	parseObject	Object	An Object array parsed from the string
2324	clone	Object	a clone of this instance
2330	readResolve	Object	resolved MessageFormat
2331	readResolve	Object	resolved MessageFormat
2332	readResolve	Object	resolved MessageFormat
2333	first	char	the first character in the text or DONE if the text is empty
2334	last	char	the last character in the text or DONE if the text is empty
2335	current	char	the character at the current position or DONE if the current position is off the end of the text
2336	next	char	the character at the new position or DONE if the new position is off the end of the text range
2337	previous	char	the character at the new position or DONE if the current position is equal to getBeginIndex
2338	setIndex	char	the character at the specified position or DONE if the specified position is equal to getEndIndex
2339	getBeginIndex	int	the index at which the text begins
2340	getEndIndex	int	the index after the last character in the text
2341	getIndex	int	the current index
2342	clone	Object	A copy of this
2346	primaryOrder	int	the element's primary component
2347	secondaryOrder	short	the element's secondary component
2348	tertiaryOrder	short	the element's tertiary component
2351	getOffset	int	The character offset in the original text corresponding to the collation element that will be returned by the next call to next
2352	getMaxExpansion	int	the maximum length of any expansion sequences ending with the specified order
2360	isIgnorable	boolean	true if a character is ignorable false otherwise
2361	nextContractChar	int	the next contracting character's ordering
2362	prevContractChar	int	the next contracting character's ordering
2389	emitPattern	String	emits the string in the format understable to the collation builder
2390	emitPattern	String	emits the string in the format understable to the collation builder
2393	getCount	int	the size of pattern entries
2394	getItemAt	PatternEntry	the requested pattern entry
2395	getNextStateFromCharacter	short	The new state to transition to
2396	getNextState	short	The row number of the new state to transition to
2398	internalAt	short	The value stored in the cell
2399	format	StringBuffer	the string buffer passed in as toAppendTo with formatted text appended
2400	format	StringBuffer	the string buffer passed in as toAppendTo with formatted text appended
2401	format	String	the formatted time string
2402	parse	Date	A Date parsed from the string
2403	parse	Date	A Date or null if the input could not be parsed
2404	parseObject	Object	A Date parsed from the string
2405	getTimeInstance	DateFormat	a time formatter
2406	getTimeInstance	DateFormat	a time formatter
2407	getTimeInstance	DateFormat	a time formatter
2408	getDateInstance	DateFormat	a date formatter
2409	getDateInstance	DateFormat	a date formatter
2410	getDateInstance	DateFormat	a date formatter
2411	getDateTimeInstance	DateFormat	a datetime formatter
2412	getDateTimeInstance	DateFormat	a datetime formatter
2413	getDateTimeInstance	DateFormat	a datetime formatter
2415	getAvailableLocales	Locale	An array of locales for which localized DateFormat instances are available
2417	getCalendar	Calendar	the calendar associated with this datetime formatter
2419	getNumberFormat	NumberFormat	the number formatter which this datetime formatter uses
2421	getTimeZone	TimeZone	the time zone associated with the calendar of DateFormat
2428	ofCalendarField	DateFormat.Field	Field instance representing calendarField
2429	getCalendarField	int	Calendar constant for this field
2430	readResolve	Object	resolved DateFormat
2431	ofCalendarField	DateFormat.Field	Field instance representing calendarField
2432	getCalendarField	int	Calendar constant for this field
2433	readResolve	Object	resolved DateFormat
2434	ofCalendarField	DateFormat.Field	Field instance representing calendarField
2435	getCalendarField	int	Calendar constant for this field
2436	readResolve	Object	resolved DateFormat
2442	hashCode	int	a hash code value for this object
2443	toString	String	a string representation of this object
2454	getSymbol	String	the symbol of the given currency code for the specified locale or null if the symbol is not available for the locale
2455	getDisplayName	String	the name for the currency that is appropriate for display to the user or null if the name is not available for the locale
2456	getDisplayLanguage	String	the name of the given language code for the specified locale or null if it's not available
2457	getDisplayCountry	String	the name of the given country code for the specified locale or null if it's not available
2458	getDisplayVariant	String	the name of the given variant string for the specified locale or null if it's not available
2459	getAvailableLocales	Locale	An array of all locales for which this locale service provider can provide localized objects or names
2460	getDisplayName	String	the humanreadable name of the given time zone in the given locale or null if it's not available
2461	equals	boolean	true if the specified object is equal to this set
2462	hashCode	int	the hash code value for this set
2463	removeAll	boolean	true if this set changed as a result of the call
2464	getInstance	Currency	the Currency instance for the given currency code
2465	getInstance	Currency	the Currency instance for the country of the given locale or null
2466	getAvailableCurrencies	Set	the set of available currencies
2467	getCurrencyCode	String	the ISO currency code of this currency
2468	getSymbol	String	the symbol of this currency for the default locale
2469	getSymbol	String	the symbol of this currency for the specified locale
2470	getDefaultFractionDigits	int	the default number of fraction digits used with this currency
2471	getNumericCode	int	the ISO numeric code of this currency
2472	getDisplayName	String	the display name of this currency for the default locale
2473	getDisplayName	String	the display name of this currency for the specified locale
2474	toString	String	the ISO currency code of this currency
2479	hasMoreElements	boolean	true if and only if this enumeration object contains at least one more element to provide false otherwise
2480	nextElement	Object	the next element of this enumeration
2481	getListener	EventListener	The listener associated with this proxy
2488	of	EnumSet	an enum set initially containing the specified element
2489	of	EnumSet	an enum set initially containing the specified elements
2490	of	EnumSet	an enum set initially containing the specified elements
2491	of	EnumSet	an enum set initially containing the specified elements
2492	of	EnumSet	an enum set initially containing the specified elements
2493	of	EnumSet	an enum set initially containing the specified elements
2494	range	EnumSet	an enum set initially containing all of the elements in the range defined by the two specified endpoints
2496	clone	EnumSet	a copy of this set
2500	size	int	the number of keyvalue mappings in this map
2501	isEmpty	boolean	true if this map contains no keyvalue mappings
2502	containsKey	boolean	true if this map contains a mapping for the specified key
2503	containsValue	boolean	true if this map maps one or more keys to the specified value
2504	get	Object	the value to which the specified key is mapped or code null if this map contains no mapping for the key
2505	put	Object	the previous value associated with key or null if there was no mapping for key
2506	remove	Object	the previous value associated with key or null if there was no mapping for key
2509	keySet	Set	a set view of the keys contained in this map
2510	values	Collection	a collection view of the values contained in this map
2511	entrySet	Set	a set view of the mappings contained in this map
2512	equals	boolean	true if the specified object is equal to this map
2513	hashCode	int	the hash code value for this map
2514	getKey	Object	the key corresponding to this entry
2515	getValue	Object	the value corresponding to this entry
2516	setValue	Object	old value corresponding to the entry
2517	equals	boolean	true if the specified object is equal to this map entry
2518	hashCode	int	the hash code value for this map entry
2519	getKey	Object	the key corresponding to this entry
2520	getValue	Object	the value corresponding to this entry
2521	setValue	Object	old value corresponding to the entry
2522	equals	boolean	true if the specified object is equal to this map entry
2523	hashCode	int	the hash code value for this map entry
2524	getKey	Object	the key corresponding to this entry
2525	getValue	Object	the value corresponding to this entry
2526	setValue	Object	old value corresponding to the entry
2527	equals	boolean	true if the specified object is equal to this map entry
2528	hashCode	int	the hash code value for this map entry
2529	setProperty	Object	the previous value of the specified key in this property list or null if it did not have one
2538	getProperty	String	the value in this property list with the specified key value
2539	getProperty	String	the value in this property list with the specified key value
2540	propertyNames	Enumeration	an enumeration of all the keys in this property list including the keys in the default property list
2541	stringPropertyNames	Set	a set of keys in this property list where the key and its corresponding value are strings including the keys in the default property list
2547	size	int	the number of elements in this set its cardinality
2548	isEmpty	boolean	true if this set contains no elements
2549	contains	boolean	true if this set contains the specified element
2550	iterator	Iterator	an iterator over the elements in this set
2551	toArray	Object	an array containing all the elements in this set
2552	toArray	Object	an array containing all the elements in this set
2553	add	boolean	true if this set did not already contain the specified element
2554	remove	boolean	true if this set contained the specified element
2555	containsAll	boolean	true if this set contains all of the elements of the specified collection
2556	addAll	boolean	true if this set changed as a result of the call
2557	retainAll	boolean	true if this set changed as a result of the call
2558	removeAll	boolean	true if this set changed as a result of the call
2560	equals	boolean	true if the specified object is equal to this set
2561	hashCode	int	the hash code value for this set
2567	capacity	int	the current capacity the length of its internal data array kept in the field code elementData of this vector
2568	size	int	the number of components in this vector
2569	isEmpty	boolean	code true if and only if this vector has no components that is its size is zero code false otherwise
2570	elements	Enumeration	an enumeration of the components of this vector
2571	contains	boolean	code true if this vector contains the specified element
2572	indexOf	int	the index of the first occurrence of the specified element in this vector or if this vector does not contain the element
2573	indexOf	int	the index of the first occurrence of the element in this vector at position code index or later in the vector code if the element is not found
2574	lastIndexOf	int	the index of the last occurrence of the specified element in this vector or if this vector does not contain the element
2575	lastIndexOf	int	the index of the last occurrence of the element at position less than or equal to code index in this vector if the element is not found
2576	elementAt	Object	the component at the specified index
2577	firstElement	Object	the first component of this vector
2578	lastElement	Object	the last component of the vector i
2583	removeElement	boolean	code true if the argument was a component of this vector code false otherwise
2585	clone	Object	a clone of this vector
2587	toArray	Object	an array containing the elements of the Vector
2588	get	Object	object at the specified index
2589	set	Object	the element previously at the specified position
2590	add	boolean	code true as specified by link Collectionadd
2591	remove	boolean	true if the Vector contained the specified element
2593	remove	Object	element that was removed
2595	containsAll	boolean	true if this Vector contains all of the elements in the specified collection
2596	addAll	boolean	code true if this Vector changed as a result of the call
2597	removeAll	boolean	true if this Vector changed as a result of the call
2598	retainAll	boolean	true if this Vector changed as a result of the call
2599	addAll	boolean	code true if this Vector changed as a result of the call
2600	equals	boolean	true if the specified Object is equal to this Vector
2603	subList	List	a view of the specified range within this List
2608	iterator	Iterator	an iterator over the elements in this list in proper sequence
2609	getConversion	String	The unknown conversion
2625	get	boolean	the value of the bit with the specified index
2626	get	BitSet	a new code BitSet from a range of this code BitSet
2627	nextSetBit	int	the index of the next set bit or code if there is no such bit
2628	nextClearBit	int	the index of the next clear bit
2629	length	int	the logical size of this code BitSet
2630	isEmpty	boolean	boolean indicating whether this code BitSet is empty
2631	intersects	boolean	boolean indicating whether this code BitSet intersects the specified code BitSet
2632	cardinality	int	the number of bits set to code true in this code BitSet
2637	hashCode	int	a hash code value for this bit set
2638	size	int	the number of bits currently in this bit set
2639	equals	boolean	code true if the objects are the same code false otherwise
2640	clone	Object	a clone of this bit set
2644	toString	String	a string representation of this bit set
2652	getChecksum	Checksum	the Checksum
2653	getName	String	the name of the entry
2655	getTime	long	the modification time of the entry or if not specified
2657	getSize	long	the uncompressed size of the entry data or if not known
2658	getCompressedSize	long	the size of the compressed entry data or if not known
2661	getCrc	long	the CRC checksum of the uncompressed entry data or if not known
2663	getMethod	int	the compression method of the entry or if not specified
2665	getExtra	byte	the extra field data for the entry or null if none
2667	getComment	String	the comment string for the entry or null if none
2668	isDirectory	boolean	true if this is a directory entry
2676	getRemaining	int	the total number of bytes remaining in the input buffer
2677	needsInput	boolean	true if no data remains in the input buffer
2678	needsDictionary	boolean	true if a preset dictionary is needed for decompression
2679	finished	boolean	true if the end of the compressed data stream has been reached
2680	inflate	int	the actual number of uncompressed bytes
2681	inflate	int	the actual number of uncompressed bytes
2682	getAdler	int	the ADLER value of the uncompressed data
2683	getTotalIn	int	the total number of compressed bytes input so far
2684	getBytesRead	long	the total nonnegative number of compressed bytes input so far
2685	getTotalOut	int	the total number of uncompressed bytes output so far
2686	getBytesWritten	long	the total nonnegative number of uncompressed bytes output so far
2703	getValue	long	the current checksum value
2706	read	int	the actual number of bytes read or if the end of the compressed input stream is reached
2717	getEntry	ZipEntry	the zip file entry or null if not found
2718	getInputStream	InputStream	the input stream for reading the contents of the specified zip file entry
2720	getName	String	the path name of the ZIP file
2721	entries	Enumeration	an enumeration of the ZIP file entries
2722	size	int	the number of entries in the ZIP file
2726	read	int	the byte read or if end of compressed input is reached
2727	read	int	the actual number of bytes read or if the end of the compressed input is reached or a preset dictionary is needed
2728	available	int	 before EOF and after EOF
2729	skip	long	the actual number of bytes skipped
2732	markSupported	boolean	a boolean indicating if this stream type supports the mark and reset methods
2735	read	int	the byte read or if the end of the stream is reached
2736	read	int	the actual number of bytes read or if the end of the stream is reached
2737	skip	long	the actual number of bytes skipped
2738	getChecksum	Checksum	the Checksum value
2740	getNextEntry	ZipEntry	the next ZIP file entry or null if there are no more entries
2742	available	int	 before EOF and after EOF has reached for current entry
2743	read	int	the actual number of bytes read or if the end of the entry is reached
2744	skip	long	the actual number of bytes skipped
2746	createZipEntry	ZipEntry	the ZipEntry just created
2749	read	int	a single byte of compressed data or if the end of the uncompressed input stream is reached
2750	read	int	the actual number of bytes read or if the end of the uncompressed input stream is reached
2751	skip	long	the actual number of bytes skipped
2752	available	int	zero after the end of the underlying input stream has been reached otherwise always returns 
2753	markSupported	boolean	false always
2769	needsInput	boolean	true if the input data buffer is empty and setInput should be called in order to provide more input
2771	finished	boolean	true if the end of the compressed data output stream has been reached
2772	deflate	int	the actual number of bytes of compressed data
2773	deflate	int	the actual number of bytes of compressed data
2774	getAdler	int	the ADLER value of the uncompressed data
2775	getTotalIn	int	the total number of uncompressed bytes input so far
2776	getBytesRead	long	the total nonnegative number of uncompressed bytes input so far
2777	getTotalOut	int	the total number of compressed bytes output so far
2778	getBytesWritten	long	the total nonnegative number of compressed bytes output so far
2785	size	int	the number of keyvalue mappings in this map
2786	isEmpty	boolean	true if this map contains no keyvalue mappings
2789	containsKey	boolean	true if this map contains a mapping for the specified key
2791	put	Object	the previous value associated with key or null if there was no mapping for key
2797	remove	Object	the previous value associated with key or null if there was no mapping for key
2801	containsValue	boolean	true if this map maps one or more keys to the specified value
2803	clone	Object	a shallow copy of this map
2808	entrySet	Set	a set view of the mappings contained in this map
2817	iterator	Iterator	an iterator over the elements in this set in ascending order
2818	descendingIterator	Iterator	an iterator over the elements in this set in descending order
2820	size	int	the number of elements in this set its cardinality
2821	isEmpty	boolean	code true if this set contains no elements
2822	contains	boolean	code true if this set contains the specified element
2823	add	boolean	code true if this set did not already contain the specified element
2824	remove	boolean	code true if this set contained the specified element
2826	addAll	boolean	code true if this set changed as a result of the call
2841	clone	Object	a shallow copy of this set
2845	implies	boolean	true if the specified permission is implied by this object false if not
2846	equals	boolean	true if obj is a PropertyPermission and has the same name and actions as this PropertyPermission object
2847	hashCode	int	a hash code value for this object
2848	getMask	int	the actions mask
2849	getActions	String	the canonical string representation of the actions
2850	getActions	String	the canonical string representation of the actions
2851	getMask	int	the actions mask
2852	newPermissionCollection	PermissionCollection	a new PermissionCollection object suitable for storing PropertyPermissions
2856	implies	boolean	true if permission is a proper subset of a permission in the set false if not
2857	elements	Enumeration	an enumeration of all the PropertyPermission objects
2859	getFlags	String	The flag
2860	getConversion	char	The conversion
2863	size	int	the number of elements in this list
2864	isEmpty	boolean	true if this list contains no elements
2865	contains	boolean	true if this list contains the specified element
2868	clone	Object	a clone of this ArrayList instance
2869	toArray	Object	an array containing all of the elements in this list in proper sequence
2870	toArray	Object	an array containing the elements of the list
2871	get	Object	the element at the specified position in this list
2872	set	Object	the element previously at the specified position
2873	add	boolean	true as specified by link Collectionadd
2875	remove	Object	the element that was removed from the list
2876	remove	boolean	true if this list contained the specified element
2878	addAll	boolean	true if this list changed as a result of the call
2879	addAll	boolean	true if this list changed as a result of the call
2884	removeAll	boolean	code true if this list changed as a result of the call
2885	retainAll	boolean	code true if this list changed as a result of the call
2890	iterator	Iterator	an iterator over the elements in this list in proper sequence
2892	lowerEntry	Map.Entry	an entry with the greatest key less than code key or code null if there is no such key
2893	lowerKey	Object	the greatest key less than code key or code null if there is no such key
2894	floorEntry	Map.Entry	an entry with the greatest key less than or equal to code key or code null if there is no such key
2895	floorKey	Object	the greatest key less than or equal to code key or code null if there is no such key
2896	ceilingEntry	Map.Entry	an entry with the least key greater than or equal to code key or code null if there is no such key
2897	ceilingKey	Object	the least key greater than or equal to code key or code null if there is no such key
2898	higherEntry	Map.Entry	an entry with the least key greater than code key or code null if there is no such key
2899	higherKey	Object	the least key greater than code key or code null if there is no such key
2900	firstEntry	Map.Entry	an entry with the least key or code null if this map is empty
2901	lastEntry	Map.Entry	an entry with the greatest key or code null if this map is empty
2902	pollFirstEntry	Map.Entry	the removed first entry of this map or code null if this map is empty
2903	pollLastEntry	Map.Entry	the removed last entry of this map or code null if this map is empty
2904	descendingMap	NavigableMap	a reverse order view of this map
2905	navigableKeySet	NavigableSet	a navigable set view of the keys in this map
2906	descendingKeySet	NavigableSet	a reverse order navigable set view of the keys in this map
2907	subMap	NavigableMap	a view of the portion of this map whose keys range from code fromKey to code toKey
2908	headMap	NavigableMap	a view of the portion of this map whose keys are less than or equal to if code inclusive is true code toKey
2909	tailMap	NavigableMap	a view of the portion of this map whose keys are greater than or equal to if code inclusive is true code fromKey
2913	getKeys	Enumeration	an Enumeration of the keys contained in this ResourceBundle and its parent bundles
2914	handleKeySet	Set	a Set of the keys contained only in this ResourceBundle
2915	getContents	Object	an array of an Object array representing a keyvalue pair
2917	getFlags	String	The flags
2918	compare	int	a negative integer zero or a positive integer as the first argument is less than equal to or greater than the second
2919	equals	boolean	true only if the specified object is also a comparator and it imposes the same ordering as this comparator
2920	size	int	the number of keyvalue mappings in this map
2921	containsKey	boolean	true if this map contains a mapping for the specified key
2922	containsValue	boolean	true if a mapping to value exists false otherwise
2927	getEntry	TreeMap.Entry	this map's entry for the given key or null if the map does not contain an entry for the key
2933	put	Object	the previous value associated with key or null if there was no mapping for key
2934	remove	Object	the previous value associated with key or null if there was no mapping for key
2936	clone	Object	a shallow copy of this map
2987	getKey	Object	the key
2988	getValue	Object	the value associated with the key
2989	setValue	Object	the value associated with the key before this method was called
2994	getKey	Object	the key
2995	getValue	Object	the value associated with the key
2996	setValue	Object	the value associated with the key before this method was called
3001	getKey	Object	the key
3002	getValue	Object	the value associated with the key
3003	setValue	Object	the value associated with the key before this method was called
3009	iterator	Iterator	an iterator over the elements in this list in proper sequence
3010	listIterator	ListIterator	a list iterator over the elements in this list in proper sequence
3011	getPrecision	int	The precision
3012	getClassName	String	the name of the resource class
3013	getKey	String	the key for the missing resource
3015	cancel	boolean	true if this task is scheduled for onetime execution and has not yet run or this task is scheduled for repeated execution
3016	scheduledExecutionTime	long	the time at which the most recent execution of this task was scheduled to occur in the format returned by Date
3023	getFormatter	Formatter	the Formatter may be null
3025	getEncoding	String	The encoding name
3027	getFilter	Filter	a Filter object may be null
3032	getLevel	Level	the level of messages being logged
3033	isLoggable	boolean	true if the LogRecord would be logged
3039	getPushLevel	Level	the value of the pushLevel
3040	isLoggable	boolean	true if the LogRecord would be logged
3041	isLoggable	boolean	true if the log record should be published
3042	format	String	a formatted log record
3043	getHead	String	a valid XML string
3044	getTail	String	a valid XML string
3045	format	String	the formatted log record
3046	getHead	String	header string
3047	getTail	String	tail string
3048	formatMessage	String	a localized and formatted message
3049	getResourceBundleName	String	localization resource bundle name
3050	getName	String	nonlocalized name
3051	getLocalizedName	String	localized name
3052	toString	String	the nonlocalized name of the Level for example INFO
3053	intValue	int	the integer value for this level
3054	parse	Level	The parsed value
3055	equals	boolean	true if and only if the two objects have the same level value
3056	hashCode	int	a hashcode based on the level value
3062	isLoggable	boolean	true if the LogRecord would be logged
3065	format	String	a formatted log record
3069	addLogger	boolean	true if the argument logger was registered successfully false if a logger of that name already exists
3070	getLogger	Logger	matching logger or null if none is found
3071	getLoggerNames	Enumeration	enumeration of logger name strings
3075	getProperty	String	property value
3077	getLoggingMXBean	LoggingMXBean	a link LoggingMXBean object
3078	getLoggerName	String	source logger name may be null
3084	getLevel	Level	the logging message level
3086	getSequenceNumber	long	the sequence number
3088	getSourceClassName	String	the source class name
3090	getSourceMethodName	String	the source method name
3092	getMessage	String	the raw message string
3094	getParameters	Object	the log message parameters
3096	getThreadID	int	thread ID
3098	getMillis	long	event time in millis since 
3100	getThrown	Throwable	a throwable
3105	getLogger	Logger	a suitable Logger
3106	getLogger	Logger	a suitable Logger
3107	getAnonymousLogger	Logger	a newly created private Logger
3108	getAnonymousLogger	Logger	a newly created private Logger
3109	getResourceBundle	ResourceBundle	localization bundle may be null
3110	getResourceBundleName	String	localization bundle name may be null
3112	getFilter	Filter	a filter object may be null
3140	getLevel	Level	this Logger's level
3141	isLoggable	boolean	true if the given message level is currently being logged
3142	getName	String	logger name
3145	getHandlers	Handler	an array of all registered Handlers
3147	getUseParentHandlers	boolean	true if output is to be sent to the logger's parent
3148	getParent	Logger	nearest existing parent Logger
3150	getLoggerNames	List	A list of String each of which is a currently registered Logger name
3151	getLoggerLevel	String	The name of the log level of the specified logger or an empty string if the log level of the specified logger is null
3153	getParentLoggerName	String	the name of the nearest existing parent logger an empty string if the specified logger is the root logger
3156	getFlags	String	The flags
3159	offerFirst	boolean	true if the element was added to this deque else false
3160	offerLast	boolean	true if the element was added to this deque else false
3161	removeFirst	Object	the head of this deque
3162	removeLast	Object	the tail of this deque
3163	pollFirst	Object	the head of this deque or null if this deque is empty
3164	pollLast	Object	the tail of this deque or null if this deque is empty
3165	getFirst	Object	the head of this deque
3166	getLast	Object	the tail of this deque
3167	peekFirst	Object	the head of this deque or null if this deque is empty
3168	peekLast	Object	the tail of this deque or null if this deque is empty
3169	removeFirstOccurrence	boolean	true if an element was removed as a result of this call
3170	removeLastOccurrence	boolean	true if an element was removed as a result of this call
3171	add	boolean	true as specified by link Collectionadd
3172	offer	boolean	true if the element was added to this deque else false
3173	remove	Object	the head of the queue represented by this deque
3174	poll	Object	the first element of this deque or null if this deque is empty
3175	element	Object	the head of the queue represented by this deque
3176	peek	Object	the head of the queue represented by this deque or null if this deque is empty
3178	pop	Object	the element at the front of this deque which is the top of the stack represented by this deque
3179	remove	boolean	true if an element was removed as a result of this call
3180	contains	boolean	true if this deque contains the specified element
3181	size	int	the number of elements in this deque
3182	iterator	Iterator	an iterator over the elements in this deque in proper sequence
3183	descendingIterator	Iterator	an iterator over the elements in this deque in reverse sequence
3184	size	int	the number of keys in this dictionary
3185	isEmpty	boolean	true if this dictionary maps no keys to values false otherwise
3186	keys	Enumeration	an enumeration of the keys in this dictionary
3187	elements	Enumeration	an enumeration of the values in this dictionary
3188	get	Object	the value to which the key is mapped in this dictionary
3189	put	Object	the previous value to which the key was mapped in this dictionary or null if the key did not have a previous mapping
3190	remove	Object	the value to which the key had been mapped in this dictionary or null if the key did not have a mapping
3193	tryLock	boolean	code true if the lock was acquired and code false otherwise
3194	tryLock	boolean	code true if the lock was acquired and code false if the waiting time elapsed before the lock was acquired
3196	newCondition	Condition	A new link Condition instance for this code Lock instance
3199	awaitNanos	long	an estimate of the code nanosTimeout value minus the time spent waiting upon return from this method
3200	await	boolean	code false if the waiting time detectably elapsed before return from the method else code true
3201	awaitUntil	boolean	code false if the deadline has elapsed upon return else code true
3205	getExclusiveOwnerThread	Thread	the owner thread
3206	readLock	Lock	the lock used for reading
3207	writeLock	Lock	the lock used for writing
3212	getBlocker	Object	the blocker
3216	getState	int	current state value
3218	compareAndSetState	boolean	true if successful
3219	enq	AbstractQueuedSynchronizer.Node	node's predecessor
3220	addWaiter	AbstractQueuedSynchronizer.Node	the new node
3226	shouldParkAfterFailedAcquire	boolean	code true if thread should block
3228	parkAndCheckInterrupt	boolean	code true if interrupted
3229	acquireQueued	boolean	code true if interrupted while waiting
3231	doAcquireNanos	boolean	code true if acquired
3234	doAcquireSharedNanos	boolean	code true if acquired
3235	tryAcquire	boolean	code true if successful
3236	tryRelease	boolean	code true if this object is now in a fully released state so that any waiting threads may attempt to acquire and code false otherwise
3237	tryAcquireShared	int	a negative value on failure zero if acquisition in shared mode succeeded but no subsequent sharedmode acquire can succeed and a positive value if acquisition in shared mode succeeded and subsequent sharedmode acquires might also succeed in which case a subsequent waiting thread must check availability
3238	tryReleaseShared	boolean	code true if this release of shared mode may permit a waiting acquire shared or exclusive to succeed and code false otherwise
3239	isHeldExclusively	boolean	code true if synchronization is held exclusively code false otherwise
3242	tryAcquireNanos	boolean	code true if acquired code false if timed out
3243	release	boolean	the value returned from link tryRelease
3246	tryAcquireSharedNanos	boolean	code true if acquired code false if timed out
3247	releaseShared	boolean	the value returned from link tryReleaseShared
3248	hasQueuedThreads	boolean	code true if there may be other threads waiting to acquire
3249	hasContended	boolean	code true if there has ever been contention
3250	getFirstQueuedThread	Thread	the first longestwaiting thread in the queue or code null if no threads are currently queued
3252	isQueued	boolean	code true if the given thread is on the queue
3254	hasQueuedPredecessors	boolean	code true if there is a queued thread preceding the current thread and code false if the current thread is at the head of the queue or the queue is empty
3255	getQueueLength	int	the estimated number of threads waiting to acquire
3256	getQueuedThreads	Collection	the collection of threads
3257	getExclusiveQueuedThreads	Collection	the collection of threads
3258	getSharedQueuedThreads	Collection	the collection of threads
3259	toString	String	a string identifying this synchronizer as well as its state
3260	isOnSyncQueue	boolean	true if is reacquiring
3261	findNodeFromTail	boolean	true if present
3262	transferForSignal	boolean	true if successfully transferred else the node was cancelled before signal
3263	transferAfterCancelledWait	boolean	true if cancelled before the node was signalled
3264	fullyRelease	int	previous sync state
3265	owns	boolean	true if owned
3266	hasWaiters	boolean	true if there are any waiting threads
3267	getWaitQueueLength	int	the estimated number of waiting threads
3268	getWaitingThreads	Collection	the collection of threads
3274	predecessor	AbstractQueuedSynchronizer.Node	the predecessor of this node
3275	addConditionWaiter	AbstractQueuedSynchronizer.Node	its new wait node
3288	isOwnedBy	boolean	code true if owned
3289	hasWaiters	boolean	code true if there are any waiting threads
3290	getWaitQueueLength	int	the estimated number of waiting threads
3291	getWaitingThreads	Collection	the collection of threads
3293	predecessor	AbstractQueuedSynchronizer.Node	the predecessor of this node
3294	addConditionWaiter	AbstractQueuedSynchronizer.Node	its new wait node
3307	isOwnedBy	boolean	code true if owned
3308	hasWaiters	boolean	code true if there are any waiting threads
3309	getWaitQueueLength	int	the estimated number of waiting threads
3310	getWaitingThreads	Collection	the collection of threads
3312	predecessor	AbstractQueuedSynchronizer.Node	the predecessor of this node
3313	addConditionWaiter	AbstractQueuedSynchronizer.Node	its new wait node
3326	isOwnedBy	boolean	code true if owned
3327	hasWaiters	boolean	code true if there are any waiting threads
3328	getWaitQueueLength	int	the estimated number of waiting threads
3329	getWaitingThreads	Collection	the collection of threads
3330	isFair	boolean	code true if this lock has fairness set true
3331	getOwner	Thread	the owner or code null if not owned
3332	getReadLockCount	int	the number of read locks held
3333	isWriteLocked	boolean	code true if any thread holds the write lock and code false otherwise
3334	isWriteLockedByCurrentThread	boolean	code true if the current thread holds the write lock and code false otherwise
3335	getWriteHoldCount	int	the number of holds on the write lock by the current thread or zero if the write lock is not held by the current thread
3336	getReadHoldCount	int	the number of holds on the read lock by the current thread or zero if the read lock is not held by the current thread
3337	getQueuedWriterThreads	Collection	the collection of threads
3338	getQueuedReaderThreads	Collection	the collection of threads
3339	hasQueuedThreads	boolean	code true if there may be other threads waiting to acquire the lock
3340	hasQueuedThread	boolean	code true if the given thread is queued waiting for this lock
3341	getQueueLength	int	the estimated number of threads waiting for this lock
3342	getQueuedThreads	Collection	the collection of threads
3343	hasWaiters	boolean	code true if there are any waiting threads
3344	getWaitQueueLength	int	the estimated number of waiting threads
3345	getWaitingThreads	Collection	the collection of threads
3346	toString	String	a string identifying this lock as well as its lock state
3358	tryLock	boolean	code true if the read lock was acquired
3359	tryLock	boolean	code true if the read lock was acquired
3362	toString	String	a string identifying this lock as well as its lock state
3365	tryLock	boolean	code true if the lock was free and was acquired by the current thread or the write lock was already held by the current thread and code false otherwise
3366	tryLock	boolean	code true if the lock was free and was acquired by the current thread or the write lock was already held by the current thread and code false if the waiting time elapsed before the lock could be acquired
3368	newCondition	Condition	the Condition object
3369	toString	String	a string identifying this lock as well as its lock state
3370	isHeldByCurrentThread	boolean	code true if the current thread holds this lock and code false otherwise
3371	getHoldCount	int	the number of holds on this lock by the current thread or zero if this lock is not held by the current thread
3384	tryLock	boolean	code true if the read lock was acquired
3385	tryLock	boolean	code true if the read lock was acquired
3388	toString	String	a string identifying this lock as well as its lock state
3391	tryLock	boolean	code true if the lock was free and was acquired by the current thread or the write lock was already held by the current thread and code false otherwise
3392	tryLock	boolean	code true if the lock was free and was acquired by the current thread or the write lock was already held by the current thread and code false if the waiting time elapsed before the lock could be acquired
3394	newCondition	Condition	the Condition object
3395	toString	String	a string identifying this lock as well as its lock state
3396	isHeldByCurrentThread	boolean	code true if the current thread holds this lock and code false otherwise
3397	getHoldCount	int	the number of holds on this lock by the current thread or zero if this lock is not held by the current thread
3411	tryLock	boolean	code true if the read lock was acquired
3412	tryLock	boolean	code true if the read lock was acquired
3415	toString	String	a string identifying this lock as well as its lock state
3418	tryLock	boolean	code true if the lock was free and was acquired by the current thread or the write lock was already held by the current thread and code false otherwise
3419	tryLock	boolean	code true if the lock was free and was acquired by the current thread or the write lock was already held by the current thread and code false if the waiting time elapsed before the lock could be acquired
3421	newCondition	Condition	the Condition object
3422	toString	String	a string identifying this lock as well as its lock state
3423	isHeldByCurrentThread	boolean	code true if the current thread holds this lock and code false otherwise
3424	getHoldCount	int	the number of holds on this lock by the current thread or zero if this lock is not held by the current thread
3427	tryLock	boolean	code true if the lock was free and was acquired by the current thread or the lock was already held by the current thread and code false otherwise
3428	tryLock	boolean	code true if the lock was free and was acquired by the current thread or the lock was already held by the current thread and code false if the waiting time elapsed before the lock could be acquired
3430	newCondition	Condition	the Condition object
3431	getHoldCount	int	the number of holds on this lock by the current thread or zero if this lock is not held by the current thread
3432	isHeldByCurrentThread	boolean	code true if current thread holds this lock and code false otherwise
3433	isLocked	boolean	code true if any thread holds this lock and code false otherwise
3434	isFair	boolean	code true if this lock has fairness set true
3435	getOwner	Thread	the owner or code null if not owned
3436	hasQueuedThreads	boolean	code true if there may be other threads waiting to acquire the lock
3437	hasQueuedThread	boolean	code true if the given thread is queued waiting for this lock
3438	getQueueLength	int	the estimated number of threads waiting for this lock
3439	getQueuedThreads	Collection	the collection of threads
3440	hasWaiters	boolean	code true if there are any waiting threads
3441	getWaitQueueLength	int	the estimated number of waiting threads
3442	getWaitingThreads	Collection	the collection of threads
3443	toString	String	a string identifying this lock as well as its lock state
3459	getState	long	current state value
3461	compareAndSetState	boolean	true if successful
3462	enq	AbstractQueuedLongSynchronizer.Node	node's predecessor
3463	addWaiter	AbstractQueuedLongSynchronizer.Node	the new node
3469	shouldParkAfterFailedAcquire	boolean	code true if thread should block
3471	parkAndCheckInterrupt	boolean	code true if interrupted
3472	acquireQueued	boolean	code true if interrupted while waiting
3474	doAcquireNanos	boolean	code true if acquired
3477	doAcquireSharedNanos	boolean	code true if acquired
3478	tryAcquire	boolean	code true if successful
3479	tryRelease	boolean	code true if this object is now in a fully released state so that any waiting threads may attempt to acquire and code false otherwise
3480	tryAcquireShared	long	a negative value on failure zero if acquisition in shared mode succeeded but no subsequent sharedmode acquire can succeed and a positive value if acquisition in shared mode succeeded and subsequent sharedmode acquires might also succeed in which case a subsequent waiting thread must check availability
3481	tryReleaseShared	boolean	code true if this release of shared mode may permit a waiting acquire shared or exclusive to succeed and code false otherwise
3482	isHeldExclusively	boolean	code true if synchronization is held exclusively code false otherwise
3485	tryAcquireNanos	boolean	code true if acquired code false if timed out
3486	release	boolean	the value returned from link tryRelease
3489	tryAcquireSharedNanos	boolean	code true if acquired code false if timed out
3490	releaseShared	boolean	the value returned from link tryReleaseShared
3491	hasQueuedThreads	boolean	code true if there may be other threads waiting to acquire
3492	hasContended	boolean	code true if there has ever been contention
3493	getFirstQueuedThread	Thread	the first longestwaiting thread in the queue or code null if no threads are currently queued
3495	isQueued	boolean	code true if the given thread is on the queue
3497	hasQueuedPredecessors	boolean	code true if there is a queued thread preceding the current thread and code false if the current thread is at the head of the queue or the queue is empty
3498	getQueueLength	int	the estimated number of threads waiting to acquire
3499	getQueuedThreads	Collection	the collection of threads
3500	getExclusiveQueuedThreads	Collection	the collection of threads
3501	getSharedQueuedThreads	Collection	the collection of threads
3502	toString	String	a string identifying this synchronizer as well as its state
3503	isOnSyncQueue	boolean	true if is reacquiring
3504	findNodeFromTail	boolean	true if present
3505	transferForSignal	boolean	true if successfully transferred else the node was cancelled before signal
3506	transferAfterCancelledWait	boolean	true if cancelled before the node was signalled
3507	fullyRelease	long	previous sync state
3508	owns	boolean	true if owned
3509	hasWaiters	boolean	true if there are any waiting threads
3510	getWaitQueueLength	int	the estimated number of waiting threads
3511	getWaitingThreads	Collection	the collection of threads
3517	predecessor	AbstractQueuedLongSynchronizer.Node	the predecessor of this node
3518	addConditionWaiter	AbstractQueuedLongSynchronizer.Node	its new wait node
3531	isOwnedBy	boolean	code true if owned
3532	hasWaiters	boolean	code true if there are any waiting threads
3533	getWaitQueueLength	int	the estimated number of waiting threads
3534	getWaitingThreads	Collection	the collection of threads
3536	predecessor	AbstractQueuedLongSynchronizer.Node	the predecessor of this node
3537	addConditionWaiter	AbstractQueuedLongSynchronizer.Node	its new wait node
3550	isOwnedBy	boolean	code true if owned
3551	hasWaiters	boolean	code true if there are any waiting threads
3552	getWaitQueueLength	int	the estimated number of waiting threads
3553	getWaitingThreads	Collection	the collection of threads
3555	predecessor	AbstractQueuedLongSynchronizer.Node	the predecessor of this node
3556	addConditionWaiter	AbstractQueuedLongSynchronizer.Node	its new wait node
3569	isOwnedBy	boolean	code true if owned
3570	hasWaiters	boolean	code true if there are any waiting threads
3571	getWaitQueueLength	int	the estimated number of waiting threads
3572	getWaitingThreads	Collection	the collection of threads
3573	newTaskFor	RunnableFuture	a RunnableFuture which when run will run the underlying runnable and which as a Future will yield the given value as its result and provide for cancellation of the underlying task
3574	newTaskFor	RunnableFuture	a RunnableFuture which when run will call the underlying callable and which as a Future will yield the callable's result as its result and provide for cancellation of the underlying task
3577	shutdownNow	List	list of tasks that never commenced execution
3578	isShutdown	boolean	true if this executor has been shut down
3579	isTerminated	boolean	true if all tasks have completed following shut down
3580	awaitTermination	boolean	true if this executor terminated and false if the timeout elapsed before termination
3581	submit	Future	a Future representing pending completion of the task
3582	submit	Future	a Future representing pending completion of the task
3583	submit	Future	a Future representing pending completion of the task
3584	invokeAll	List	A list of Futures representing the tasks in the same sequential order as produced by the iterator for the given task list each of which has completed
3585	invokeAll	List	a list of Futures representing the tasks in the same sequential order as produced by the iterator for the given task list
3586	invokeAny	Object	the result returned by one of the tasks
3587	invokeAny	Object	the result returned by one of the tasks
3588	add	boolean	true as specified by link Collectionadd
3589	offer	boolean	true
3591	offer	boolean	true
3592	poll	Delayed	the head of this queue or null if this queue has no elements with an expired delay
3593	take	Delayed	the head of this queue
3594	poll	Delayed	the head of this queue or null if the specified waiting time elapses before an element with an expired delay becomes available
3595	peek	Delayed	the head of this queue or null if this queue is empty
3599	remainingCapacity	int	Integer
3600	toArray	Object	an array containing all of the elements in this queue
3601	toArray	Object	an array containing all of the elements in this queue
3603	iterator	Iterator	an iterator over the elements in this queue
3607	getParties	int	the number of parties required to trip this barrier
3608	await	int	the arrival index of the current thread where index link getParties indicates the first to arrive and zero indicates the last to arrive
3609	await	int	the arrival index of the current thread where index link getParties indicates the first to arrive and zero indicates the last to arrive
3610	isBroken	boolean	code true if one or more parties broke out of this barrier due to interruption or timeout since construction or the last reset or a barrier action failed due to an exception code false otherwise
3612	getNumberWaiting	int	the number of parties currently blocked in link await
3617	add	boolean	true as specified by link Collectionadd
3621	size	int	the number of elements in this queue
3623	remove	boolean	true if this queue changed as a result of the call
3624	contains	boolean	true if this queue contains the specified element
3625	toArray	Object	an array containing all of the elements in this queue
3626	toArray	Object	an array containing all of the elements in this queue
3630	iterator	Iterator	an iterator over the elements in this queue in proper sequence
3635	offer	boolean	true if successful or false if the specified waiting time elapses before a consumer appears
3636	offer	boolean	true if the element was added to this queue else false
3637	take	Object	the head of this queue
3638	poll	Object	the head of this queue or null if the specified waiting time elapses before an element is present
3639	poll	Object	the head of this queue or null if no element is available
3640	isEmpty	boolean	true
3641	size	int	zero
3642	remainingCapacity	int	zero
3644	contains	boolean	false
3645	remove	boolean	false
3646	containsAll	boolean	false unless given collection is empty
3647	removeAll	boolean	false
3648	retainAll	boolean	false
3649	peek	Object	null
3650	iterator	Iterator	an empty iterator
3651	toArray	Object	a zerolength array
3652	toArray	Object	the specified array
3656	transfer	Object	if nonnull the item provided or received if null the operation failed due to timeout or interrupt the caller can distinguish which of these occurred by checking Thread
3660	awaitFulfill	SynchronousQueue.TransferStack.SNode	matched node or s if cancelled
3663	tryMatch	boolean	true if successfully matched to s
3669	awaitFulfill	Object	matched item or s if cancelled
3673	transfer	Object	if nonnull the item provided or received if null the operation failed due to timeout or interrupt the caller can distinguish which of these occurred by checking Thread
3677	awaitFulfill	SynchronousQueue.TransferStack.SNode	matched node or s if cancelled
3680	tryMatch	boolean	true if successfully matched to s
3682	tryMatch	boolean	true if successfully matched to s
3688	awaitFulfill	Object	matched item or s if cancelled
3694	transfer	Object	if nonnull the item provided or received if null the operation failed due to timeout or interrupt the caller can distinguish which of these occurred by checking Thread
3698	awaitFulfill	SynchronousQueue.TransferStack.SNode	matched node or s if cancelled
3701	tryMatch	boolean	true if successfully matched to s
3703	tryMatch	boolean	true if successfully matched to s
3705	tryMatch	boolean	true if successfully matched to s
3711	awaitFulfill	Object	matched item or s if cancelled
3719	size	int	the number of elements in this set
3720	isEmpty	boolean	true if this set contains no elements
3721	contains	boolean	true if this set contains the specified element
3722	toArray	Object	an array containing all the elements in this set
3723	toArray	Object	an array containing all the elements in this set
3725	remove	boolean	true if this set contained the specified element
3726	add	boolean	true if this set did not already contain the specified element
3727	containsAll	boolean	true if this set contains all of the elements of the specified collection
3728	addAll	boolean	true if this set changed as a result of the call
3729	removeAll	boolean	true if this set changed as a result of the call
3730	retainAll	boolean	true if this set changed as a result of the call
3731	iterator	Iterator	an iterator over the elements in this set
3732	equals	boolean	code true if the specified object is equal to this set
3734	submit	Future	a Future representing pending completion of the task
3735	submit	Future	a Future representing pending completion of the task and whose get method will return the given result value upon completion
3736	take	Future	the Future representing the next completed task
3737	poll	Future	the Future representing the next completed task or null if none are present
3738	poll	Future	the Future representing the next completed task or null if the specified waiting time elapses before one is present
3739	get	Object	the current value
3742	compareAndSet	boolean	true if successful
3743	weakCompareAndSet	boolean	true if successful
3744	getAndSet	Object	the previous value
3745	toString	String	the String representation of the current value
3746	length	int	the length of the array
3747	get	Object	the current value
3750	getAndSet	Object	the previous value
3751	compareAndSet	boolean	true if successful
3752	weakCompareAndSet	boolean	true if successful
3753	toString	String	the String representation of the current values of array
3755	length	int	the length of the array
3756	get	int	the current value
3759	getAndSet	int	the previous value
3760	compareAndSet	boolean	true if successful
3761	weakCompareAndSet	boolean	true if successful
3762	getAndIncrement	int	the previous value
3763	getAndDecrement	int	the previous value
3764	getAndAdd	int	the previous value
3765	incrementAndGet	int	the updated value
3766	decrementAndGet	int	the updated value
3767	addAndGet	int	the updated value
3768	toString	String	the String representation of the current values of array
3769	length	int	the length of the array
3770	get	long	the current value
3773	getAndSet	long	the previous value
3774	compareAndSet	boolean	true if successful
3775	weakCompareAndSet	boolean	true if successful
3776	getAndIncrement	long	the previous value
3777	getAndDecrement	long	the previous value
3778	getAndAdd	long	the previous value
3779	incrementAndGet	long	the updated value
3780	decrementAndGet	long	the updated value
3781	addAndGet	long	the updated value
3782	toString	String	the String representation of the current values of array
3783	newUpdater	AtomicIntegerFieldUpdater	the updater
3784	compareAndSet	boolean	true if successful
3785	weakCompareAndSet	boolean	true if successful
3788	get	int	the current value
3789	getAndSet	int	the previous value
3790	getAndIncrement	int	the previous value
3791	getAndDecrement	int	the previous value
3792	getAndAdd	int	the previous value
3793	incrementAndGet	int	the updated value
3794	decrementAndGet	int	the updated value
3795	addAndGet	int	the updated value
3796	newUpdater	AtomicLongFieldUpdater	the updater
3797	compareAndSet	boolean	true if successful
3798	weakCompareAndSet	boolean	true if successful
3801	get	long	the current value
3802	getAndSet	long	the previous value
3803	getAndIncrement	long	the previous value
3804	getAndDecrement	long	the previous value
3805	getAndAdd	long	the previous value
3806	incrementAndGet	long	the updated value
3807	decrementAndGet	long	the updated value
3808	addAndGet	long	the updated value
3809	newUpdater	AtomicReferenceFieldUpdater	the updater
3810	compareAndSet	boolean	true if successful
3811	weakCompareAndSet	boolean	true if successful
3814	get	Object	the current value
3815	getAndSet	Object	the previous value
3816	getReference	Object	the current value of the reference
3817	isMarked	boolean	the current value of the mark
3818	get	Object	the current value of the reference
3819	weakCompareAndSet	boolean	true if successful
3820	compareAndSet	boolean	true if successful
3822	attemptMark	boolean	true if successful
3823	get	boolean	the current value
3824	compareAndSet	boolean	true if successful
3825	weakCompareAndSet	boolean	true if successful
3828	getAndSet	boolean	the previous value
3829	toString	String	the String representation of the current value
3830	get	int	the current value
3833	getAndSet	int	the previous value
3834	compareAndSet	boolean	true if successful
3835	weakCompareAndSet	boolean	true if successful
3836	getAndIncrement	int	the previous value
3837	getAndDecrement	int	the previous value
3838	getAndAdd	int	the previous value
3839	incrementAndGet	int	the updated value
3840	decrementAndGet	int	the updated value
3841	addAndGet	int	the updated value
3842	toString	String	the String representation of the current value
3843	getReference	Object	the current value of the reference
3844	getStamp	int	the current value of the stamp
3845	get	Object	the current value of the reference
3846	weakCompareAndSet	boolean	true if successful
3847	compareAndSet	boolean	true if successful
3849	attemptStamp	boolean	true if successful
3851	get	long	the current value
3854	getAndSet	long	the previous value
3855	compareAndSet	boolean	true if successful
3856	weakCompareAndSet	boolean	true if successful
3857	getAndIncrement	long	the previous value
3858	getAndDecrement	long	the previous value
3859	getAndAdd	long	the previous value
3860	incrementAndGet	long	the updated value
3861	decrementAndGet	long	the updated value
3862	addAndGet	long	the updated value
3863	toString	String	the String representation of the current value
3864	call	Object	computed result
3886	remove	Object	the head of the queue represented by this deque
3887	element	Object	the head of the queue represented by this deque
3893	remove	boolean	true if this deque changed as a result of the call
3894	size	int	the number of elements in this deque
3895	contains	boolean	true if this deque contains the specified element
3897	toArray	Object	an array containing all of the elements in this deque
3898	toArray	Object	an array containing all of the elements in this deque
3900	iterator	Iterator	an iterator over the elements in this deque in proper sequence
3907	clone	ConcurrentSkipListSet	a shallow copy of this set
3908	size	int	the number of elements in this set
3909	isEmpty	boolean	true if this set contains no elements
3910	contains	boolean	true if this set contains the specified element
3911	add	boolean	true if this set did not already contain the specified element
3912	remove	boolean	true if this set contained the specified element
3914	iterator	Iterator	an iterator over the elements in this set in ascending order
3915	descendingIterator	Iterator	an iterator over the elements in this set in descending order
3916	equals	boolean	true if the specified object is equal to this set
3917	removeAll	boolean	true if this set changed as a result of the call
3930	descendingSet	NavigableSet	a reverse order view of this set
3937	descendingMap	ConcurrentNavigableMap	a reverse order view of this map
3938	navigableKeySet	NavigableSet	a navigable set view of the keys in this map
3939	keySet	NavigableSet	a navigable set view of the keys in this map
3940	descendingKeySet	NavigableSet	a reverse order navigable set view of the keys in this map
3941	putIfAbsent	Object	the previous value associated with the specified key or null if there was no mapping for the key
3942	remove	boolean	true if the value was removed
3943	replace	boolean	true if the value was replaced
3944	replace	Object	the previous value associated with the specified key or null if there was no mapping for the key
3952	findPredecessor	ConcurrentSkipListMap.Node	a predecessor of key
3953	findNode	ConcurrentSkipListMap.Node	node holding key or null if no such
3954	doGet	Object	the value or null if absent
3955	getUsingFindNode	Object	the value or null if absent
3956	doPut	Object	the old value or null if newly inserted
3960	doRemove	Object	the node or null if not found
3962	findFirst	ConcurrentSkipListMap.Node	first node or null if empty
3963	doRemoveFirstEntry	Map.Entry	null if empty else snapshot of first entry
3965	findLast	ConcurrentSkipListMap.Node	last node or null if empty
3966	findPredecessorOfLast	ConcurrentSkipListMap.Node	likely predecessor of last node
3967	doRemoveLastEntry	Map.Entry	null if empty else snapshot of last entry
3968	findNear	ConcurrentSkipListMap.Node	nearest node fitting relation or null if no such
3969	getNear	AbstractMap.SimpleImmutableEntry	Entry fitting relation or null if no such
3970	clone	ConcurrentSkipListMap	a shallow copy of this map
3974	containsKey	boolean	true if this map contains a mapping for the specified key
3976	put	Object	the previous value associated with the specified key or null if there was no mapping for the key
3977	remove	Object	the previous value associated with the specified key or null if there was no mapping for the key
3978	containsValue	boolean	true if a mapping to value exists false otherwise
3979	size	int	the number of elements in this map
3980	isEmpty	boolean	true if this map contains no keyvalue mappings
3982	keySet	NavigableSet	a navigable set view of the keys in this map
3984	entrySet	Set	a set view of the mappings contained in this map sorted in ascending key order
3985	equals	boolean	true if the specified object is equal to this map
3986	putIfAbsent	Object	the previous value associated with the specified key or null if there was no mapping for the key
3989	replace	Object	the previous value associated with the specified key or null if there was no mapping for the key
4012	isMarker	boolean	true if this node is a marker node
4013	isBaseHeader	boolean	true if this node is header node
4014	appendMarker	boolean	true if successful
4016	getValidValue	Object	this node's value if it isn't a marker or header or is deleted else null
4017	createSnapshot	AbstractMap.SimpleImmutableEntry	new entry or null
4019	indexesDeletedNode	boolean	true if indexed node is known to be deleted
4020	link	boolean	true if successful
4021	unlink	boolean	true if successful
4032	isMarker	boolean	true if this node is a marker node
4033	isBaseHeader	boolean	true if this node is header node
4034	appendMarker	boolean	true if successful
4036	getValidValue	Object	this node's value if it isn't a marker or header or is deleted else null
4037	createSnapshot	AbstractMap.SimpleImmutableEntry	new entry or null
4039	indexesDeletedNode	boolean	true if indexed node is known to be deleted
4040	link	boolean	true if successful
4041	unlink	boolean	true if successful
4052	isMarker	boolean	true if this node is a marker node
4053	isBaseHeader	boolean	true if this node is header node
4054	appendMarker	boolean	true if successful
4056	getValidValue	Object	this node's value if it isn't a marker or header or is deleted else null
4057	createSnapshot	AbstractMap.SimpleImmutableEntry	new entry or null
4059	indexesDeletedNode	boolean	true if indexed node is known to be deleted
4060	link	boolean	true if successful
4061	unlink	boolean	true if successful
4071	convert	long	the converted duration in this unit or Long
4072	toNanos	long	the converted duration or Long
4073	toMicros	long	the converted duration or Long
4074	toMillis	long	the converted duration or Long
4075	toSeconds	long	the converted duration or Long
4076	toMinutes	long	the converted duration or Long
4077	toHours	long	the converted duration or Long
4078	toDays	long	the converted duration
4079	excessNanos	int	the number of nanoseconds
4097	addWorker	boolean	true if successful
4099	getTask	Runnable	task or null if the worker must exit in which case workerCount is decremented
4104	isTerminating	boolean	true if terminating but not yet terminated
4107	getThreadFactory	ThreadFactory	the current thread factory
4109	getRejectedExecutionHandler	RejectedExecutionHandler	the current handler
4111	getCorePoolSize	int	the core number of threads
4112	prestartCoreThread	boolean	code true if a thread was started
4113	prestartAllCoreThreads	int	the number of threads started
4114	allowsCoreThreadTimeOut	boolean	code true if core threads are allowed to time out else code false
4117	getMaximumPoolSize	int	the maximum allowed number of threads
4119	getKeepAliveTime	long	the time limit
4120	getQueue	BlockingQueue	the task queue
4121	remove	boolean	true if the task was removed
4123	getPoolSize	int	the number of threads
4124	getActiveCount	int	the number of threads
4125	getLargestPoolSize	int	the number of threads
4126	getTaskCount	long	the number of tasks
4127	getCompletedTaskCount	long	the number of tasks
4146	isPeriodic	boolean	true if this task is periodic
4147	getDelay	long	the remaining delay zero or negative values indicate that the delay has already elapsed
4150	size	int	the number of elements in this list
4151	isEmpty	boolean	true if this list contains no elements
4153	indexOf	int	index of element or if absent
4154	lastIndexOf	int	index of element or if absent
4155	contains	boolean	true if this list contains the specified element
4157	indexOf	int	the index of the first occurrence of the element in this list at position index or later in the list if the element is not found
4159	lastIndexOf	int	the index of the last occurrence of the element at position less than or equal to index in this list if the element is not found
4160	clone	Object	a clone of this list
4161	toArray	Object	an array containing all the elements in this list
4162	toArray	Object	an array containing all the elements in this list
4165	add	boolean	true as specified by link Collectionadd
4168	remove	boolean	true if this list contained the specified element
4170	addIfAbsent	boolean	true if the element was added
4171	containsAll	boolean	true if this list contains all of the elements of the specified collection
4172	removeAll	boolean	true if this list changed as a result of the call
4173	retainAll	boolean	true if this list changed as a result of the call
4174	addAllAbsent	int	the number of elements added
4176	addAll	boolean	true if this list changed as a result of the call
4177	addAll	boolean	true if this list changed as a result of the call
4180	toString	String	a string representation of this list
4181	equals	boolean	code true if the specified object is equal to this list
4182	hashCode	int	the hash code value for this list
4183	iterator	Iterator	an iterator over the elements in this list in proper sequence
4186	subList	List	a view of the specified range within this list
4196	doExchange	Object	the other thread's item or CANCEL if interrupted or timed out
4197	hashIndex	int	a perthreadrandom index index max
4199	tryCancel	boolean	true if successfully cancelled
4200	spinWait	Object	on success the hole on failure CANCEL
4201	await	Object	on success the hole on failure CANCEL
4202	awaitNanos	Object	on success the hole on failure CANCEL
4203	scanOnTimeout	Object	another thread's item or CANCEL
4204	exchange	Object	the object provided by the other thread
4205	exchange	Object	the object provided by the other thread
4206	add	boolean	true as specified by link Collectionadd
4207	offer	boolean	true if the element was added to this queue else false
4209	offer	boolean	true if successful or false if the specified waiting time elapses before space is available
4210	take	Object	the head of this queue
4211	poll	Object	the head of this queue or null if the specified waiting time elapses before an element is available
4212	remainingCapacity	int	the remaining capacity
4213	remove	boolean	true if this queue changed as a result of the call
4214	contains	boolean	true if this queue contains the specified element
4215	drainTo	int	the number of elements transferred
4216	drainTo	int	the number of elements transferred
4217	newThread	Thread	constructed thread or code null if the request to create a thread is rejected
4224	runAndReset	boolean	true if successfully run and reset
4231	schedule	ScheduledFuture	a ScheduledFuture representing pending completion of the task and whose get method will return null upon completion
4232	schedule	ScheduledFuture	a ScheduledFuture that can be used to extract result or cancel
4233	scheduleAtFixedRate	ScheduledFuture	a ScheduledFuture representing pending completion of the task and whose get method will throw an exception upon cancellation
4234	scheduleWithFixedDelay	ScheduledFuture	a ScheduledFuture representing pending completion of the task and whose get method will throw an exception upon cancellation
4235	add	boolean	true as specified by link Collectionadd
4236	offer	boolean	true as specified by link Queueoffer
4238	isEmpty	boolean	true if this queue contains no elements
4239	size	int	the number of elements in this queue
4240	contains	boolean	true if this queue contains the specified element
4241	remove	boolean	true if this queue changed as a result of the call
4242	toArray	Object	an array containing all of the elements in this queue
4243	toArray	Object	an array containing all of the elements in this queue
4244	iterator	Iterator	an iterator over the elements in this queue in proper sequence
4252	tryAcquire	boolean	code true if a permit was acquired and code false otherwise
4253	tryAcquire	boolean	code true if a permit was acquired and code false if the waiting time elapsed before a permit was acquired
4257	tryAcquire	boolean	code true if the permits were acquired and code false otherwise
4258	tryAcquire	boolean	code true if all permits were acquired and code false if the waiting time elapsed before all permits were acquired
4260	availablePermits	int	the number of permits available in this semaphore
4261	drainPermits	int	the number of permits acquired
4263	isFair	boolean	code true if this semaphore has fairness set true
4264	hasQueuedThreads	boolean	code true if there may be other threads waiting to acquire the lock
4265	getQueueLength	int	the estimated number of threads waiting for this lock
4266	getQueuedThreads	Collection	the collection of threads
4267	toString	String	a string identifying this semaphore as well as its state
4268	cancel	boolean	false if the task could not be cancelled typically because it has already completed normally true otherwise
4269	isCancelled	boolean	true if this task was cancelled before it completed
4270	isDone	boolean	true if this task completed
4271	get	Object	the computed result
4272	get	Object	the computed result
4274	await	boolean	code true if the count reached zero and code false if the waiting time elapsed before the count reached zero
4276	getCount	long	the current count
4277	toString	String	a string identifying this latch as well as its state
4278	add	boolean	true as specified by link Collectionadd
4279	offer	boolean	true as specified by link Queueoffer
4281	offer	boolean	true
4282	comparator	Comparator	the comparator used to order the elements in this queue or null if this queue uses the natural ordering of its elements
4283	remainingCapacity	int	Integer
4284	remove	boolean	true if this queue changed as a result of the call
4285	contains	boolean	true if this queue contains the specified element
4286	toArray	Object	an array containing all of the elements in this queue
4290	toArray	Object	an array containing all of the elements in this queue
4291	iterator	Iterator	an iterator over the elements in this queue
4295	segmentFor	ConcurrentHashMap.Segment	the segment
4296	isEmpty	boolean	true if this map contains no keyvalue mappings
4297	size	int	the number of keyvalue mappings in this map
4299	containsKey	boolean	true if and only if the specified object is a key in this table as determined by the equals method false otherwise
4300	containsValue	boolean	true if this map maps one or more keys to the specified value
4301	contains	boolean	true if and only if some key maps to the value argument in this table as determined by the equals method false otherwise
4302	put	Object	the previous value associated with key or null if there was no mapping for key
4303	putIfAbsent	Object	the previous value associated with the specified key or null if there was no mapping for the key
4305	remove	Object	the previous value associated with key or null if there was no mapping for key
4308	replace	Object	the previous value associated with the specified key or null if there was no mapping for the key
4313	keys	Enumeration	an enumeration of the keys in this table
4314	elements	Enumeration	an enumeration of the values in this table
4338	decorateTask	RunnableScheduledFuture	a task that can execute the runnable
4339	decorateTask	RunnableScheduledFuture	a task that can execute the callable
4342	getContinueExistingPeriodicTasksAfterShutdownPolicy	boolean	code true if will continue after shutdown
4344	getExecuteExistingDelayedTasksAfterShutdownPolicy	boolean	code true if will execute after shutdown
4346	shutdownNow	List	list of tasks that never commenced execution
4347	getQueue	BlockingQueue	the task queue
4348	isPeriodic	boolean	true if periodic
4351	isPeriodic	boolean	true if periodic
4354	isPeriodic	boolean	true if periodic
4357	newFixedThreadPool	ExecutorService	the newly created thread pool
4358	newFixedThreadPool	ExecutorService	the newly created thread pool
4359	newSingleThreadExecutor	ExecutorService	the newly created singlethreaded Executor
4360	newSingleThreadExecutor	ExecutorService	the newly created singlethreaded Executor
4361	newCachedThreadPool	ExecutorService	the newly created thread pool
4362	newCachedThreadPool	ExecutorService	the newly created thread pool
4363	newSingleThreadScheduledExecutor	ScheduledExecutorService	the newly created scheduled executor
4364	newSingleThreadScheduledExecutor	ScheduledExecutorService	a newly created scheduled executor
4365	newScheduledThreadPool	ScheduledExecutorService	a newly created scheduled thread pool
4366	newScheduledThreadPool	ScheduledExecutorService	a newly created scheduled thread pool
4367	unconfigurableExecutorService	ExecutorService	an ExecutorService instance
4368	unconfigurableScheduledExecutorService	ScheduledExecutorService	a ScheduledExecutorService instance
4369	defaultThreadFactory	ThreadFactory	a thread factory
4370	privilegedThreadFactory	ThreadFactory	a thread factory
4371	callable	Callable	a callable object
4372	callable	Callable	a callable object
4373	callable	Callable	a callable object
4374	callable	Callable	a callable object
4375	privilegedCallable	Callable	a callable object
4376	privilegedCallableUsingCurrentClassLoader	Callable	a callable object
4380	extract	Object	the node
4383	size	int	the number of elements in this queue
4386	offer	boolean	true if successful or false if the specified waiting time elapses before space is available
4388	remove	boolean	true if this queue changed as a result of the call
4389	toArray	Object	an array containing all of the elements in this queue
4390	toArray	Object	an array containing all of the elements in this queue
4394	iterator	Iterator	an iterator over the elements in this queue in proper sequence
4403	offerFirst	boolean	true if successful or false if the specified waiting time elapses before space is available
4404	offerLast	boolean	true if successful or false if the specified waiting time elapses before space is available
4405	takeFirst	Object	the head of this deque
4406	takeLast	Object	the tail of this deque
4407	pollFirst	Object	the head of this deque or null if the specified waiting time elapses before an element is available
4408	pollLast	Object	the tail of this deque or null if the specified waiting time elapses before an element is available
4409	removeFirstOccurrence	boolean	true if an element was removed as a result of this call
4410	removeLastOccurrence	boolean	true if an element was removed as a result of this call
4414	offer	boolean	true if the element was added to this deque else false
4415	remove	Object	the head of the queue represented by this deque
4416	poll	Object	the head of this deque or null if this deque is empty
4417	take	Object	the head of this deque
4418	poll	Object	the head of this deque or null if the specified waiting time elapses before an element is available
4419	element	Object	the head of this deque
4420	peek	Object	the head of this deque or null if this deque is empty
4421	remove	boolean	true if this deque changed as a result of the call
4422	contains	boolean	true if this deque contains the specified element
4423	size	int	the number of elements in this deque
4424	iterator	Iterator	an iterator over the elements in this deque in proper sequence
4428	containsValue	boolean	true if this map maps one or more keys to the specified value
4433	removeEldestEntry	boolean	true if the eldest entry should be removed from the map false if it should be retained
4443	push	Object	the item argument
4444	pop	Object	The object at the top of this stack the last item of the Vector object
4445	peek	Object	the object at the top of this stack the last item of the Vector object
4446	empty	boolean	true if and only if this stack contains no items false otherwise
4447	search	int	the based position from the top of the stack where the object is located the return value indicates that the object is not on the stack
4450	binarySearch	int	the index of the search key if it is contained in the list otherwise insertion point 
4452	binarySearch	int	the index of the search key if it is contained in the list otherwise insertion point 
4460	min	Object	the minimum element of the given collection according to the natural ordering of its elements
4461	min	Object	the minimum element of the given collection according to the specified comparator
4462	max	Object	the maximum element of the given collection according to the natural ordering of its elements
4463	max	Object	the maximum element of the given collection according to the specified comparator
4465	replaceAll	boolean	true if list contained one or more elements e such that oldValnull enull oldVal
4466	indexOfSubList	int	the starting position of the first occurrence of the specified target list within the specified source list or if there is no such occurrence
4467	lastIndexOfSubList	int	the starting position of the last occurrence of the specified target list within the specified source list or if there is no such occurrence
4468	unmodifiableCollection	Collection	an unmodifiable view of the specified collection
4469	unmodifiableSet	Set	an unmodifiable view of the specified set
4470	unmodifiableSortedSet	SortedSet	an unmodifiable view of the specified sorted set
4471	unmodifiableList	List	an unmodifiable view of the specified list
4472	unmodifiableMap	Map	an unmodifiable view of the specified map
4473	unmodifiableSortedMap	SortedMap	an unmodifiable view of the specified sorted map
4474	synchronizedCollection	Collection	a synchronized view of the specified collection
4475	synchronizedSet	Set	a synchronized view of the specified set
4476	synchronizedSortedSet	SortedSet	a synchronized view of the specified sorted set
4477	synchronizedList	List	a synchronized view of the specified list
4478	synchronizedMap	Map	a synchronized view of the specified map
4479	synchronizedSortedMap	SortedMap	a synchronized view of the specified sorted map
4480	checkedCollection	Collection	a dynamically typesafe view of the specified collection
4481	checkedSet	Set	a dynamically typesafe view of the specified set
4482	checkedSortedSet	SortedSet	a dynamically typesafe view of the specified sorted set
4483	checkedList	List	a dynamically typesafe view of the specified list
4484	checkedMap	Map	a dynamically typesafe view of the specified map
4485	checkedSortedMap	SortedMap	a dynamically typesafe view of the specified map
4486	emptyIterator	Iterator	an empty iterator
4487	emptyListIterator	ListIterator	an empty list iterator
4488	emptyEnumeration	Enumeration	an empty enumeration
4492	singleton	Set	an immutable set containing only the specified object
4493	singletonList	List	an immutable list containing only the specified object
4494	singletonMap	Map	an immutable map containing only the specified keyvalue mapping
4495	nCopies	List	an immutable list consisting of n copies of the specified object
4496	reverseOrder	Comparator	a comparator that imposes the reverse of the natural ordering on a collection of objects that implement the Comparable interface
4497	reverseOrder	Comparator	a comparator that imposes the reverse ordering of the specified comparator
4498	enumeration	Enumeration	an enumeration over the specified collection
4499	list	ArrayList	an array list containing the elements returned by the specified enumeration
4503	addAll	boolean	true if the collection changed as a result of the call
4504	newSetFromMap	Set	the set backed by the map
4505	asLifoQueue	Queue	the queue
4544	pattern	String	The source of this pattern
4545	toString	String	The string representation of this pattern
4546	matcher	Matcher	A new matcher for this pattern
4547	flags	int	The match flags specified when this pattern was compiled
4549	split	String	The array of strings computed by splitting the input around matches of this pattern
4550	split	String	The array of strings computed by splitting the input around matches of this pattern
4551	quote	String	A literal string replacement
4619	start	int	The index of the first character matched
4620	start	int	The index of the first character captured by the group or if the match was successful but the group itself did not match anything
4621	end	int	return The offset after the last character matched
4622	end	int	The offset after the last character captured by the group or if the match was successful but the group itself did not match anything
4623	group	String	The possibly empty subsequence matched by the previous match in string form
4624	group	String	The possibly empty subsequence captured by the group during the previous match or null if the group failed to match part of the input
4625	groupCount	int	The number of capturing groups in this matcher's pattern
4626	getIndex	int	The approximate index in the pattern of the error or if the index is not known
4627	getDescription	String	The description of the error
4628	getPattern	String	The erroneous pattern
4629	getMessage	String	The full detail message
4630	pattern	Pattern	The pattern for which this matcher was created
4631	toMatchResult	MatchResult	a MatchResult with the state of this matcher
4632	usePattern	Matcher	This matcher
4633	reset	Matcher	This matcher
4634	reset	Matcher	This matcher
4635	start	int	The index of the first character matched
4636	start	int	The index of the first character captured by the group or if the match was successful but the group itself did not match anything
4637	end	int	The offset after the last character matched
4638	end	int	The offset after the last character captured by the group or if the match was successful but the group itself did not match anything
4639	group	String	The possibly empty subsequence matched by the previous match in string form
4640	group	String	The possibly empty subsequence captured by the group during the previous match or null if the group failed to match part of the input
4641	groupCount	int	The number of capturing groups in this matcher's pattern
4642	matches	boolean	true if and only if the entire region sequence matches this matcher's pattern
4643	find	boolean	true if and only if a subsequence of the input sequence matches this matcher's pattern
4644	find	boolean	true if and only if a subsequence of the input sequence starting at the given index matches this matcher's pattern
4645	lookingAt	boolean	true if and only if a prefix of the input sequence matches this matcher's pattern
4646	quoteReplacement	String	A literal string replacement
4647	appendReplacement	Matcher	This matcher
4648	appendTail	StringBuffer	The target string buffer
4649	replaceAll	String	The string constructed by replacing each matching subsequence by the replacement string substituting captured subsequences as needed
4650	replaceFirst	String	The string constructed by replacing the first matching subsequence by the replacement string substituting captured subsequences as needed
4651	region	Matcher	this matcher
4652	regionStart	int	The starting point of this matcher's region
4653	regionEnd	int	the ending point of this matcher's region
4654	hasTransparentBounds	boolean	true iff this matcher is using transparent bounds false otherwise
4655	useTransparentBounds	Matcher	this matcher
4656	hasAnchoringBounds	boolean	true iff this matcher is using anchoring bounds false otherwise
4657	useAnchoringBounds	Matcher	this matcher
4658	toString	String	The string representation of this matcher
4659	hitEnd	boolean	true iff the end of input was hit in the last match false otherwise
4660	requireEnd	boolean	true iff more input could change a positive match into a negative one
4663	getTextLength	int	the index after the last character in the text
4664	getSubSequence	CharSequence	A String generated from this Matcher's input
4665	charAt	char	A char from the specified index
4674	purge	int	the number of tasks removed from the queue
4688	comparator	Comparator	the comparator used to order the elements in this set or null if this set uses the natural ordering of its elements
4689	subSet	SortedSet	a view of the portion of this set whose elements range from fromElement inclusive to toElement exclusive
4690	headSet	SortedSet	a view of the portion of this set whose elements are strictly less than toElement
4691	tailSet	SortedSet	a view of the portion of this set whose elements are greater than or equal to fromElement
4692	first	Object	the first lowest element currently in this set
4693	last	Object	the last highest element currently in this set
4701	getOffset	int	the amount of time in milliseconds to add to UTC to get local time
4703	getOffset	int	The milliseconds to add to UTC to get local time
4704	getRawOffset	int	the GMT offset value in milliseconds
4707	getDSTSavings	int	the number of milliseconds the time is advanced with respect to standard time when the daylight saving rules are in effect or zero if this time zone doesn't observe daylight saving time
4708	useDaylightTime	boolean	true if this time zone uses daylight saving time false otherwise
4709	inDaylightTime	boolean	true if daylight saving time is in effective at the given date false otherwise
4710	clone	Object	a clone of this instance
4711	hashCode	int	the hash code for this object
4712	equals	boolean	True if the given obj is the same as this SimpleTimeZone object false otherwise
4713	hasSameRules	boolean	true if the given zone is a SimpleTimeZone and has the same rules and offset as this one
4714	toString	String	a string representation of this time zone
4726	getGregorianChange	Date	the Gregorian cutover date for this GregorianCalendar object
4727	isLeapYear	boolean	true if the given year is a leap year false otherwise
4728	equals	boolean	true if this object is equal to obj false otherwise
4733	getMinimum	int	the minimum value for the given calendar field
4734	getMaximum	int	the maximum value for the given calendar field
4735	getGreatestMinimum	int	the highest minimum value for the given calendar field
4736	getLeastMaximum	int	the lowest maximum value for the given calendar field
4737	getActualMinimum	int	the minimum of the given field for the time value of this GregorianCalendar
4738	getActualMaximum	int	the maximum of the given field for the time value of this GregorianCalendar
4741	computeFields	int	a new field mask that indicates what field values have actually been set
4742	getWeekNumber	int	the number of weeks of the given period
4744	getFixedDate	long	the fixed date
4763	iterator	Iterator	an Iterator over the elements in this set
4764	size	int	the number of elements in this set its cardinality
4765	isEmpty	boolean	true if this set contains no elements
4766	contains	boolean	true if this set contains the specified element
4767	add	boolean	true if this set did not already contain the specified element
4768	remove	boolean	true if the set contained the specified element
4770	clone	Object	a shallow copy of this set
4773	size	int	the number of elements in this collection
4774	isEmpty	boolean	true if this collection contains no elements
4775	contains	boolean	true if this collection contains the specified element
4776	iterator	Iterator	an Iterator over the elements in this collection
4777	toArray	Object	an array containing all of the elements in this collection
4778	toArray	Object	an array containing all of the elements in this collection
4779	add	boolean	true if this collection changed as a result of the call
4780	remove	boolean	true if an element was removed as a result of this call
4781	containsAll	boolean	true if this collection contains all of the elements in the specified collection
4782	addAll	boolean	true if this collection changed as a result of the call
4783	removeAll	boolean	true if this collection changed as a result of the call
4784	retainAll	boolean	true if this collection changed as a result of the call
4786	equals	boolean	true if the specified object is equal to this collection
4787	hashCode	int	the hash code value for this collection
4801	get	String	the value associated with key or def if no value is associated with key
4805	getInt	int	the int value represented by the string associated with key in this preference node or def if the associated value does not exist or cannot be interpreted as an int
4807	getLong	long	the long value represented by the string associated with key in this preference node or def if the associated value does not exist or cannot be interpreted as a long
4809	getBoolean	boolean	the boolean value represented by the string associated with key in this preference node or def if the associated value does not exist or cannot be interpreted as a boolean
4811	getFloat	float	the float value represented by the string associated with key in this preference node or def if the associated value does not exist or cannot be interpreted as a float
4813	getDouble	double	the double value represented by the string associated with key in this preference node or def if the associated value does not exist or cannot be interpreted as a double
4815	getByteArray	byte	the byte array value represented by the string associated with key in this preference node or def if the associated value does not exist or cannot be interpreted as a byte array
4816	keys	String	an array of the keys that have an associated value in this preference node
4817	childrenNames	String	the names of the children of this preference node
4818	cachedChildren	AbstractPreferences	all known unremoved children of this node
4819	parent	Preferences	the parent of this preference node
4820	node	Preferences	the specified preference node
4822	nodeExists	boolean	true if the specified node exists
4825	name	String	this preference node's name relative to its parent
4826	absolutePath	String	this preference node's absolute path name
4827	isUserNode	boolean	true if this preference node is in the user preference tree false if it's in the system preference tree
4829	getSpi	String	the value associated with the specified key at this preference node or null if there is no association for this key or the association cannot be determined at this time
4832	keysSpi	String	an array of the keys that have an associated value in this preference node
4833	childrenNamesSpi	String	an array containing the names of the children of this preference node
4834	getChild	AbstractPreferences	the named child if it exists or null if it does not
4835	childSpi	AbstractPreferences	The named child node
4841	isRemoved	boolean	true iff this node or an ancestor has been removed with the link removeNode method
4852	getNode	Preferences	The preference node that emitted the event
4853	getKey	String	The key of the preference that was changed
4854	getNewValue	String	The new value for the preference or null if the preference was removed
4862	userNodeForPackage	Preferences	the user preference node associated with the package of which c is a member
4863	systemNodeForPackage	Preferences	the system preference node associated with the package of which c is a member
4865	userRoot	Preferences	the root preference node for the calling user
4866	systemRoot	Preferences	the root preference node for the system
4868	get	String	the value associated with key or def if no value is associated with key or the backing store is inaccessible
4872	getInt	int	the int value represented by the string associated with key in this preference node or def if the associated value does not exist or cannot be interpreted as an int
4874	getLong	long	the long value represented by the string associated with key in this preference node or def if the associated value does not exist or cannot be interpreted as a long
4876	getBoolean	boolean	the boolean value represented by the string associated with key in this preference node or def if the associated value does not exist or cannot be interpreted as a boolean
4878	getFloat	float	the float value represented by the string associated with key in this preference node or def if the associated value does not exist or cannot be interpreted as a float
4880	getDouble	double	the double value represented by the string associated with key in this preference node or def if the associated value does not exist or cannot be interpreted as a double
4882	getByteArray	byte	the byte array value represented by the string associated with key in this preference node or def if the associated value does not exist or cannot be interpreted as a byte array
4883	keys	String	an array of the keys that have an associated value in this preference node
4884	childrenNames	String	the names of the children of this preference node
4885	parent	Preferences	the parent of this preference node
4886	node	Preferences	the specified preference node
4887	nodeExists	boolean	true if the specified node exists
4889	name	String	this preference node's name relative to its parent
4890	absolutePath	String	this preference node's absolute path name
4891	isUserNode	boolean	true if this preference node is in the user preference tree false if it's in the system preference tree
4902	getParent	Preferences	The parent Preferences node whose child was added or removed
4903	getChild	Preferences	The node that was added or removed
4907	next	int	the next pseudorandom value from this random number generator's sequence
4909	nextInt	int	the next pseudorandom uniformly distributed code int value from this random number generator's sequence
4910	nextInt	int	the next pseudorandom uniformly distributed code int value between code inclusive and code n exclusive from this random number generator's sequence
4911	nextLong	long	the next pseudorandom uniformly distributed code long value from this random number generator's sequence
4912	nextBoolean	boolean	the next pseudorandom uniformly distributed code boolean value from this random number generator's sequence
4913	nextFloat	float	the next pseudorandom uniformly distributed code float value between code 
4914	nextDouble	double	the next pseudorandom uniformly distributed code double value between code 
4915	nextGaussian	double	the next pseudorandom Gaussian normally distributed code double value with mean code 
4918	locale	Locale	null if no localization is applied otherwise a locale
4919	out	Appendable	The destination for the output
4920	toString	String	The result of invoking toString on the destination for the output
4923	ioException	IOException	The last exception thrown by the Appendable or null if no such exception exists
4924	format	Formatter	This formatter
4925	format	Formatter	This formatter
4926	getCodePoint	int	The illegal Unicode code point
4927	comparator	Comparator	the comparator used to order the keys in this map or null if this map uses the natural ordering of its keys
4928	subMap	SortedMap	a view of the portion of this map whose keys range from fromKey inclusive to toKey exclusive
4929	headMap	SortedMap	a view of the portion of this map whose keys are strictly less than toKey
4930	tailMap	SortedMap	a view of the portion of this map whose keys are greater than or equal to fromKey
4931	firstKey	Object	the first lowest key currently in this map
4932	lastKey	Object	the last highest key currently in this map
4933	keySet	Set	a set view of the keys contained in this map sorted in ascending order
4934	values	Collection	a collection view of the values contained in this map sorted in ascending key order
4935	entrySet	Set	a set view of the mappings contained in this map sorted in ascending key order
4936	getKeys	Enumeration	an Enumeration of the keys contained in this ResourceBundle and its parent bundles
4937	handleKeySet	Set	a Set of the keys contained only in this ResourceBundle
4938	lower	Object	the greatest element less than code e or code null if there is no such element
4939	floor	Object	the greatest element less than or equal to code e or code null if there is no such element
4940	ceiling	Object	the least element greater than or equal to code e or code null if there is no such element
4941	higher	Object	the least element greater than code e or code null if there is no such element
4942	pollFirst	Object	the first element or code null if this set is empty
4943	pollLast	Object	the last element or code null if this set is empty
4944	iterator	Iterator	an iterator over the elements in this set in ascending order
4945	descendingSet	NavigableSet	a reverse order view of this set
4946	descendingIterator	Iterator	an iterator over the elements in this set in descending order
4947	subSet	NavigableSet	a view of the portion of this set whose elements range from code fromElement inclusive to code toElement exclusive
4948	headSet	NavigableSet	a view of the portion of this set whose elements are less than or equal to if code inclusive is true code toElement
4949	tailSet	NavigableSet	a view of the portion of this set whose elements are greater than or equal to code fromElement
4953	getSource	Object	The object on which the Event initially occurred
4954	toString	String	A a String representation of this EventObject
4955	getOffset	int	the offset in milliseconds to add to GMT to get local time
4956	getOffset	int	the amount of time in milliseconds to add to UTC to get local time
4957	getOffsets	int	the total amount of the raw GMT offset and daylight saving at the specified date
4959	getRawOffset	int	the amount of raw offset time in milliseconds to add to UTC
4960	getID	String	the ID of this time zone
4962	getDisplayName	String	the humanreadable name of this time zone in the default locale
4963	getDisplayName	String	the humanreadable name of this time zone in the given locale
4964	getDisplayName	String	the humanreadable name of this time zone in the default locale
4965	getDisplayName	String	the humanreadable name of this time zone in the given locale
4966	getDSTSavings	int	the amount of saving time in milliseconds
4967	useDaylightTime	boolean	true if this time zone uses daylight savings time false otherwise
4968	inDaylightTime	boolean	true if the given date is in daylight savings time false otherwise
4969	getTimeZone	TimeZone	the specified TimeZone or the GMT zone if the given ID cannot be understood
4970	getAvailableIDs	String	an array of IDs where the time zone for that ID has the specified GMT offset
4971	getAvailableIDs	String	an array of IDs
4974	getDefault	TimeZone	a default TimeZone
4979	hasSameRules	boolean	true if the other zone is not null and is the same as this one with the possible exception of the ID
4980	clone	Object	a clone of this TimeZone
4981	parseCustomTimeZone	TimeZone	a newly created TimeZone with the given offset and no daylight saving time or null if the id cannot be parsed
4982	equals	boolean	true if this object is equal to obj false otherwise
4986	getMinimum	int	the minimum value for the given calendar field
4987	getMaximum	int	the maximum value for the given calendar field
4988	getGreatestMinimum	int	the highest minimum value for the given calendar field
4989	getLeastMaximum	int	the lowest maximum value for the given calendar field
4990	getActualMinimum	int	the minimum of the given field for the time value of this JapaneseImperialCalendar
4991	getActualMaximum	int	the maximum of the given field for the time value of this JapaneseImperialCalendar
4994	computeFields	int	a new field mask that indicates what field values have actually been set
4995	getWeekNumber	int	the number of weeks of the given period
4997	getFixedDate	long	the fixed date
5009	randomUUID	UUID	A randomly generated code UUID
5010	nameUUIDFromBytes	UUID	A code UUID generated from the specified array
5011	fromString	UUID	A code UUID with the specified value
5012	getLeastSignificantBits	long	The least significant bits of this UUID's bit value
5013	getMostSignificantBits	long	The most significant bits of this UUID's bit value
5014	version	int	The version number of this code UUID
5015	variant	int	The variant number of this code UUID
5017	clockSequence	int	The clock sequence of this code UUID
5018	node	long	The node value of this code UUID
5019	toString	String	A string representation of this code UUID
5021	hashCode	int	A hash code value for this code UUID
5022	equals	boolean	code true if the objects are the same code false otherwise
5023	compareTo	int	 or as this code UUID is less than equal to or greater than code val
5027	getFirst	Object	the first element in this list
5028	getLast	Object	the last element in this list
5029	removeFirst	Object	the first element from this list
5030	removeLast	Object	the last element from this list
5033	contains	boolean	true if this list contains the specified element
5034	size	int	the number of elements in this list
5035	add	boolean	true as specified by link Collectionadd
5036	remove	boolean	true if this list contained the specified element
5037	addAll	boolean	true if this list changed as a result of the call
5038	addAll	boolean	true if this list changed as a result of the call
5040	get	Object	the element at the specified position in this list
5041	set	Object	the element previously at the specified position
5043	remove	Object	the element previously at the specified position
5045	indexOf	int	the index of the first occurrence of the specified element in this list or if this list does not contain the element
5046	lastIndexOf	int	the index of the last occurrence of the specified element in this list or if this list does not contain the element
5047	peek	Object	the head of this list or null if this list is empty
5048	element	Object	the head of this list
5049	poll	Object	the head of this list or null if this list is empty
5050	remove	Object	the head of this list
5051	offer	boolean	true as specified by link Queueoffer
5052	offerFirst	boolean	true as specified by link DequeofferFirst
5053	offerLast	boolean	true as specified by link DequeofferLast
5054	peekFirst	Object	the first element of this list or null if this list is empty
5055	peekLast	Object	the last element of this list or null if this list is empty
5056	pollFirst	Object	the first element of this list or null if this list is empty
5057	pollLast	Object	the last element of this list or null if this list is empty
5059	pop	Object	the element at the front of this list which is the top of the stack represented by this list
5060	removeFirstOccurrence	boolean	true if the list contained the specified element
5061	removeLastOccurrence	boolean	true if the list contained the specified element
5062	listIterator	ListIterator	a ListIterator of the elements in this list in proper sequence starting at the specified position in the list
5064	clone	Object	a shallow copy of this LinkedList instance
5065	toArray	Object	an array containing all of the elements in this list in proper sequence
5066	toArray	Object	an array containing the elements of the list
5072	hasMoreTokens	boolean	true if and only if there is at least one token in the string after the current position false otherwise
5073	nextToken	String	the next token from this string tokenizer
5074	nextToken	String	the next token after switching to the new delimiter set
5075	hasMoreElements	boolean	true if there are more tokens false otherwise
5076	nextElement	Object	the next token in the string
5077	countTokens	int	the number of tokens remaining in the string using the current delimiter set
5078	getFormatSpecifier	String	The unmatched format specifier
5079	hasNext	boolean	code true if the list iterator has more elements when traversing the list in the forward direction
5080	next	Object	the next element in the list
5081	hasPrevious	boolean	code true if the list iterator has more elements when traversing the list in the reverse direction
5082	previous	Object	the previous element in the list
5083	nextIndex	int	the index of the element that would be returned by a subsequent call to code next or list size if the list iterator is at the end of the list
5084	previousIndex	int	the index of the element that would be returned by a subsequent call to code previous or if the list iterator is at the beginning of the list
5088	getManifest	Manifest	the jar file manifest or null if none
5089	getJarEntry	JarEntry	the JarEntry for the given entry name or null if not found
5090	getEntry	ZipEntry	the ZipEntry for the given entry name or null if not found
5092	getInputStream	InputStream	an input stream for reading the contents of the specified zip file entry
5093	get	Object	the value of the specified attribute name or null if not found
5094	getValue	String	the String value of the specified attribute name or null if not found
5095	getValue	String	the String value of the specified Attribute
5096	put	Object	the previous value of the attribute or null if none
5097	putValue	String	the previous value of the attribute or null if none
5098	remove	Object	the previous value of the attribute or null if none
5099	containsValue	boolean	true if this Map maps one or more attribute names to the specified value
5100	containsKey	boolean	true if this Map contains the specified attribute name
5108	equals	boolean	true if the specified Object is equal to this Map
5111	equals	boolean	true if this attribute name is equal to the specified attribute object
5114	equals	boolean	true if this attribute name is equal to the specified attribute object
5117	equals	boolean	true if this attribute name is equal to the specified attribute object
5128	getAttributes	Attributes	the Manifest Attributes for this entry or null if none
5129	getCertificates	Certificate	the Certificate objects for this entry or null if none
5130	getCodeSigners	CodeSigner	the CodeSigner objects for this entry or null if none
5131	newPacker	Pack200.Packer	A newly allocated Packer engine
5132	newUnpacker	Pack200.Unpacker	A newly allocated Unpacker engine
5133	properties	SortedMap	A sorted association of property key strings to property values
5138	properties	SortedMap	A sorted association of option key strings to option values
5143	properties	SortedMap	A sorted association of property key strings to property values
5148	properties	SortedMap	A sorted association of option key strings to option values
5153	properties	SortedMap	A sorted association of property key strings to property values
5158	properties	SortedMap	A sorted association of option key strings to option values
5163	getMainAttributes	Attributes	the main Attributes for the Manifest
5164	getEntries	Map	a Map of the entries contained in this Manifest
5165	getAttributes	Attributes	the Attributes for the specified entry name
5170	equals	boolean	true if the specified Object is also a Manifest and has the same main Attributes and entries
5172	clone	Object	a shallow copy of this Manifest
5173	getManifest	Manifest	the Manifest for this JAR file or null if none
5175	getNextJarEntry	JarEntry	the next JAR file entry or null if there are no more entries
5176	read	int	the actual number of bytes read or if the end of the entry is reached
5177	createZipEntry	ZipEntry	the JarEntry object just created
5180	getInstance	Locale	the Locale instance requested
5181	getDefault	Locale	the default locale for this instance of the Java Virtual Machine
5183	getAvailableLocales	Locale	An array of installed locales
5202	equals	boolean	true if this Locale is equal to the specified object
5203	getDisplayVariantArray	String	an array of display names possible of zero length
5204	formatList	String	a string representing the list
5205	composeList	String	if the list is three elements or shorter the same list otherwise a new list of three elements
5216	containsKey	boolean	true if there is a mapping for key false otherwise
5218	put	Object	the previous value associated with key or null if there was no mapping for key
5222	remove	Object	the previous value associated with key or null if there was no mapping for key
5225	containsValue	boolean	true if this map maps one or more keys to the specified value
5244	equals	boolean	true if the specified object is equal to this map
5245	hashCode	int	the hash code value for this map
5246	toString	String	a string representation of this map
5247	clone	Object	a shallow copy of this map
5249	getKey	Object	the key corresponding to this entry
5250	getValue	Object	the value corresponding to this entry
5251	setValue	Object	the old value corresponding to the entry
5252	equals	boolean	code true if the specified object is equal to this map entry
5253	hashCode	int	the hash code value for this map entry
5254	toString	String	a String representation of this map entry
5255	getKey	Object	the key corresponding to this entry
5256	getValue	Object	the value corresponding to this entry
5257	setValue	Object	Does not return
5258	equals	boolean	code true if the specified object is equal to this map entry
5259	hashCode	int	the hash code value for this map entry
5260	toString	String	a String representation of this map entry
5261	getKey	Object	the key corresponding to this entry
5262	getValue	Object	the value corresponding to this entry
5263	setValue	Object	the old value corresponding to the entry
5264	equals	boolean	code true if the specified object is equal to this map entry
5265	hashCode	int	the hash code value for this map entry
5266	toString	String	a String representation of this map entry
5267	getKey	Object	the key corresponding to this entry
5268	getValue	Object	the value corresponding to this entry
5269	setValue	Object	Does not return
5270	equals	boolean	code true if the specified object is equal to this map entry
5271	hashCode	int	the hash code value for this map entry
5272	toString	String	a String representation of this map entry
5273	getKey	Object	the key corresponding to this entry
5274	getValue	Object	the value corresponding to this entry
5275	setValue	Object	the old value corresponding to the entry
5276	equals	boolean	code true if the specified object is equal to this map entry
5277	hashCode	int	the hash code value for this map entry
5278	toString	String	a String representation of this map entry
5279	getKey	Object	the key corresponding to this entry
5280	getValue	Object	the value corresponding to this entry
5281	setValue	Object	Does not return
5282	equals	boolean	code true if the specified object is equal to this map entry
5283	hashCode	int	the hash code value for this map entry
5284	toString	String	a String representation of this map entry
5285	getString	String	the string for the given key
5286	getStringArray	String	the string array for the given key
5287	getObject	Object	the object for the given key
5288	getLocale	Locale	the locale of this resource bundle
5290	getBundle	ResourceBundle	a resource bundle for the given base name and the default locale
5291	getBundle	ResourceBundle	a resource bundle for the given base name and the default locale
5292	getBundle	ResourceBundle	a resource bundle for the given base name and locale
5293	getBundle	ResourceBundle	a resource bundle for the given base name and a Locale in locales
5294	getBundle	ResourceBundle	a resource bundle for the given base name and locale
5295	getBundle	ResourceBundle	a resource bundle for the given base name and locale
5301	findBundleInCache	ResourceBundle	the cached bundle or null if the bundle is not found in the cache or its parent has expired
5302	putBundleInCache	ResourceBundle	the ResourceBundle for the cacheKey if someone has put the bundle before this call the one found in the cache is returned
5305	handleGetObject	Object	the object for the given key or null
5306	getKeys	Enumeration	an Enumeration of the keys contained in this ResourceBundle and its parent bundles
5307	containsKey	boolean	true if the given key is contained in this ResourceBundle or its parent bundles false otherwise
5308	keySet	Set	a Set of all keys contained in this ResourceBundle and its parent bundles
5309	handleKeySet	Set	a Set of the keys contained only in this ResourceBundle
5310	getControl	ResourceBundle.Control	a ResourceBundle
5311	getNoFallbackControl	ResourceBundle.Control	a ResourceBundle
5312	getFormats	List	a List of Strings containing formats for loading resource bundles
5313	getCandidateLocales	List	a List of candidate Locales for the given locale
5314	getFallbackLocale	Locale	a Locale for the fallback search or null if no further fallback search is desired
5315	newBundle	ResourceBundle	the resource bundle instance or null if none could be found
5316	getTimeToLive	long	the time or a positive millisecond offset from the cached time to get loaded bundles expired in the cache link TTL_NO_EXPIRATION_CONTROL to disable the expiration control or link TTL_DONT_CACHE to disable caching
5317	needsReload	boolean	true if the expired bundle needs to be reloaded false otherwise
5318	toBundleName	String	the bundle name for the resource bundle
5319	toResourceName	String	the converted resource name
5320	getControl	ResourceBundle.Control	a ResourceBundle
5321	getNoFallbackControl	ResourceBundle.Control	a ResourceBundle
5322	getFormats	List	a List of Strings containing formats for loading resource bundles
5323	getCandidateLocales	List	a List of candidate Locales for the given locale
5324	getFallbackLocale	Locale	a Locale for the fallback search or null if no further fallback search is desired
5325	newBundle	ResourceBundle	the resource bundle instance or null if none could be found
5326	getTimeToLive	long	the time or a positive millisecond offset from the cached time to get loaded bundles expired in the cache link TTL_NO_EXPIRATION_CONTROL to disable the expiration control or link TTL_DONT_CACHE to disable caching
5327	needsReload	boolean	true if the expired bundle needs to be reloaded false otherwise
5328	toBundleName	String	the bundle name for the resource bundle
5329	toResourceName	String	the converted resource name
5330	getControl	ResourceBundle.Control	a ResourceBundle
5331	getNoFallbackControl	ResourceBundle.Control	a ResourceBundle
5332	getFormats	List	a List of Strings containing formats for loading resource bundles
5333	getCandidateLocales	List	a List of candidate Locales for the given locale
5334	getFallbackLocale	Locale	a Locale for the fallback search or null if no further fallback search is desired
5335	newBundle	ResourceBundle	the resource bundle instance or null if none could be found
5336	getTimeToLive	long	the time or a positive millisecond offset from the cached time to get loaded bundles expired in the cache link TTL_NO_EXPIRATION_CONTROL to disable the expiration control or link TTL_DONT_CACHE to disable caching
5337	needsReload	boolean	true if the expired bundle needs to be reloaded false otherwise
5338	toBundleName	String	the bundle name for the resource bundle
5339	toResourceName	String	the converted resource name
5340	getFormatSpecifier	String	The format specifier which does not have a width
5341	add	boolean	code true as specified by link Collectionadd
5350	iterator	Iterator	an iterator over the elements in this list in proper sequence
5354	equals	boolean	code true if the specified object is equal to this list
5355	hashCode	int	the hash code value for this list
5357	size	int	the number of elements in this list
5358	isEmpty	boolean	true if this list contains no elements
5359	contains	boolean	true if this list contains the specified element
5360	iterator	Iterator	an iterator over the elements in this list in proper sequence
5361	toArray	Object	an array containing all of the elements in this list in proper sequence
5362	toArray	Object	an array containing the elements of this list
5363	add	boolean	true as specified by link Collectionadd
5364	remove	boolean	true if this list contained the specified element
5365	containsAll	boolean	true if this list contains all of the elements of the specified collection
5366	addAll	boolean	true if this list changed as a result of the call
5367	addAll	boolean	true if this list changed as a result of the call
5368	removeAll	boolean	true if this list changed as a result of the call
5369	retainAll	boolean	true if this list changed as a result of the call
5371	equals	boolean	true if the specified object is equal to this list
5372	hashCode	int	the hash code value for this list
5373	get	Object	the element at the specified position in this list
5374	set	Object	the element previously at the specified position
5376	remove	Object	the element previously at the specified position
5377	indexOf	int	the index of the first occurrence of the specified element in this list or if this list does not contain the element
5378	lastIndexOf	int	the index of the last occurrence of the specified element in this list or if this list does not contain the element
5379	listIterator	ListIterator	a list iterator over the elements in this list in proper sequence
5380	listIterator	ListIterator	a list iterator over the elements in this list in proper sequence starting at the specified position in the list
5381	subList	List	a view of the specified range within this list
5382	iterator	Iterator	an iterator over the elements contained in this set
5383	size	int	the number of elements in this set
5384	isEmpty	boolean	true if this set contains no elements
5385	contains	boolean	true if this set contains the specified element
5386	add	boolean	true if the set changed as a result of the call
5387	remove	boolean	true if the set contained the specified element
5388	containsAll	boolean	true if this set contains all of the elements in the specified collection
5389	addAll	boolean	true if this set changed as a result of the call
5390	removeAll	boolean	true if this set changed as a result of the call
5391	retainAll	boolean	true if this set changed as a result of the call
5393	equals	boolean	true if the specified object is equal to this set
5396	UTC	long	the number of milliseconds since January GMT for the date and time specified by the arguments
5397	parse	long	the number of milliseconds since January GMT represented by the string argument
5398	getYear	int	the year represented by this date minus 
5400	getMonth	int	the month represented by this date
5402	getDate	int	the day of the month represented by this date
5404	getDay	int	the day of the week represented by this date
5405	getHours	int	the hour represented by this date
5407	getMinutes	int	the number of minutes past the hour represented by this date
5409	getSeconds	int	the number of seconds past the minute represented by this date
5411	getTime	long	the number of milliseconds since January GMT represented by this date
5413	before	boolean	true if and only if the instant of time represented by this Date object is strictly earlier than the instant represented by when false otherwise
5414	after	boolean	true if and only if the instant represented by this Date object is strictly later than the instant represented by when false otherwise
5415	equals	boolean	true if the objects are the same false otherwise
5417	compareTo	int	the value if the argument Date is equal to this Date a value less than if this Date is before the Date argument and a value greater than if this Date is after the Date argument
5418	hashCode	int	a hash code value for this object
5419	toString	String	a string representation of this date
5421	toLocaleString	String	a string representation of this date using the locale conventions
5422	toGMTString	String	a string representation of this date using the Internet GMT conventions
5423	getTimezoneOffset	int	the timezone offset in minutes for the current time zone
5424	getCalendarSystem	BaseCalendar	the CalendarSystem to use for the specified date
5428	iterator	Iterator	An iterator that lazily loads providers for this loader's service
5429	load	ServiceLoader	A new service loader
5430	load	ServiceLoader	A new service loader
5431	loadInstalled	ServiceLoader	A new service loader
5432	toString	String	A descriptive string
5433	size	int	the number of keys in this hashtable
5434	isEmpty	boolean	true if this hashtable maps no keys to values false otherwise
5435	keys	Enumeration	an enumeration of the keys in this hashtable
5436	elements	Enumeration	an enumeration of the values in this hashtable
5437	contains	boolean	true if and only if some key maps to the value argument in this hashtable as determined by the equals method false otherwise
5438	containsValue	boolean	true if this map maps one or more keys to the specified value
5439	containsKey	boolean	true if and only if the specified object is a key in this hashtable as determined by the equals method false otherwise
5440	get	Object	the value to which the specified key is mapped or code null if this map contains no mapping for the key
5442	put	Object	the previous value of the specified key in this hashtable or null if it did not have one
5443	remove	Object	the value to which the key had been mapped in this hashtable or null if the key did not have a mapping
5446	clone	Object	a clone of the hashtable
5447	toString	String	a string representation of this hashtable
5451	equals	boolean	true if the specified Object is equal to this Map
5458	add	boolean	code true as specified by link Collectionadd
5459	offer	boolean	code true as specified by link Queueoffer
5460	remove	boolean	code true if this queue changed as a result of the call
5461	removeEq	boolean	code true if removed
5462	contains	boolean	code true if this queue contains the specified element
5463	toArray	Object	an array containing all of the elements in this queue
5464	toArray	Object	an array containing all of the elements in this queue
5465	iterator	Iterator	an iterator over the elements in this queue
5471	comparator	Comparator	the comparator used to order this queue or code null if this queue is sorted according to the natural ordering of its elements
5474	add	boolean	true as specified by link Collectionadd
5475	remove	Object	the head of this queue
5476	element	Object	the head of this queue
5478	addAll	boolean	true if this queue changed as a result of the call
5529	binarySearch	int	index of the search key if it is contained in the array otherwise insertion point 
5530	binarySearch	int	index of the search key if it is contained in the array within the specified range otherwise insertion point 
5531	binarySearch	int	index of the search key if it is contained in the array otherwise insertion point 
5532	binarySearch	int	index of the search key if it is contained in the array within the specified range otherwise insertion point 
5533	binarySearch	int	index of the search key if it is contained in the array otherwise insertion point 
5534	binarySearch	int	index of the search key if it is contained in the array within the specified range otherwise insertion point 
5535	binarySearch	int	index of the search key if it is contained in the array otherwise insertion point 
5536	binarySearch	int	index of the search key if it is contained in the array within the specified range otherwise insertion point 
5537	binarySearch	int	index of the search key if it is contained in the array otherwise insertion point 
5538	binarySearch	int	index of the search key if it is contained in the array within the specified range otherwise insertion point 
5539	binarySearch	int	index of the search key if it is contained in the array otherwise insertion point 
5540	binarySearch	int	index of the search key if it is contained in the array within the specified range otherwise insertion point 
5541	binarySearch	int	index of the search key if it is contained in the array otherwise insertion point 
5542	binarySearch	int	index of the search key if it is contained in the array within the specified range otherwise insertion point 
5543	binarySearch	int	index of the search key if it is contained in the array otherwise insertion point 
5544	binarySearch	int	index of the search key if it is contained in the array within the specified range otherwise insertion point 
5545	binarySearch	int	index of the search key if it is contained in the array otherwise insertion point 
5546	binarySearch	int	index of the search key if it is contained in the array within the specified range otherwise insertion point 
5547	equals	boolean	true if the two arrays are equal
5548	equals	boolean	true if the two arrays are equal
5549	equals	boolean	true if the two arrays are equal
5550	equals	boolean	true if the two arrays are equal
5551	equals	boolean	true if the two arrays are equal
5552	equals	boolean	true if the two arrays are equal
5553	equals	boolean	true if the two arrays are equal
5554	equals	boolean	true if the two arrays are equal
5555	equals	boolean	true if the two arrays are equal
5574	copyOf	Object	a copy of the original array truncated or padded with nulls to obtain the specified length
5575	copyOf	Object	a copy of the original array truncated or padded with nulls to obtain the specified length
5576	copyOf	byte	a copy of the original array truncated or padded with zeros to obtain the specified length
5577	copyOf	short	a copy of the original array truncated or padded with zeros to obtain the specified length
5578	copyOf	int	a copy of the original array truncated or padded with zeros to obtain the specified length
5579	copyOf	long	a copy of the original array truncated or padded with zeros to obtain the specified length
5580	copyOf	char	a copy of the original array truncated or padded with null characters to obtain the specified length
5581	copyOf	float	a copy of the original array truncated or padded with zeros to obtain the specified length
5582	copyOf	double	a copy of the original array truncated or padded with zeros to obtain the specified length
5583	copyOf	boolean	a copy of the original array truncated or padded with false elements to obtain the specified length
5584	copyOfRange	Object	a new array containing the specified range from the original array truncated or padded with nulls to obtain the required length
5585	copyOfRange	Object	a new array containing the specified range from the original array truncated or padded with nulls to obtain the required length
5586	copyOfRange	byte	a new array containing the specified range from the original array truncated or padded with zeros to obtain the required length
5587	copyOfRange	short	a new array containing the specified range from the original array truncated or padded with zeros to obtain the required length
5588	copyOfRange	int	a new array containing the specified range from the original array truncated or padded with zeros to obtain the required length
5589	copyOfRange	long	a new array containing the specified range from the original array truncated or padded with zeros to obtain the required length
5590	copyOfRange	char	a new array containing the specified range from the original array truncated or padded with null characters to obtain the required length
5591	copyOfRange	float	a new array containing the specified range from the original array truncated or padded with zeros to obtain the required length
5592	copyOfRange	double	a new array containing the specified range from the original array truncated or padded with zeros to obtain the required length
5593	copyOfRange	boolean	a new array containing the specified range from the original array truncated or padded with false elements to obtain the required length
5594	asList	List	a list view of the specified array
5595	hashCode	int	a contentbased hash code for a
5596	hashCode	int	a contentbased hash code for a
5597	hashCode	int	a contentbased hash code for a
5598	hashCode	int	a contentbased hash code for a
5599	hashCode	int	a contentbased hash code for a
5600	hashCode	int	a contentbased hash code for a
5601	hashCode	int	a contentbased hash code for a
5602	hashCode	int	a contentbased hash code for a
5603	hashCode	int	a contentbased hash code for a
5604	deepHashCode	int	a deepcontentbased hash code for a
5605	deepEquals	boolean	true if the two arrays are equal
5606	toString	String	a string representation of a
5607	toString	String	a string representation of a
5608	toString	String	a string representation of a
5609	toString	String	a string representation of a
5610	toString	String	a string representation of a
5611	toString	String	a string representation of a
5612	toString	String	a string representation of a
5613	toString	String	a string representation of a
5614	toString	String	a string representation of a
5615	deepToString	String	a string representation of a
5616	getFlags	String	The flags
5618	iterator	Iterator	an iterator over the elements contained in this set
5619	size	int	the number of elements in this set
5620	isEmpty	boolean	true if this set contains no elements
5621	contains	boolean	true if this set contains the specified element
5622	add	boolean	true if the set changed as a result of the call
5623	remove	boolean	true if the set contained the specified element
5624	containsAll	boolean	true if this set contains all of the elements in the specified collection
5625	addAll	boolean	true if this set changed as a result of the call
5626	removeAll	boolean	true if this set changed as a result of the call
5627	retainAll	boolean	true if this set changed as a result of the call
5629	equals	boolean	true if the specified object is equal to this set
5630	getInstance	Calendar	a Calendar
5631	getInstance	Calendar	a Calendar
5632	getInstance	Calendar	a Calendar
5633	getInstance	Calendar	a Calendar
5634	getAvailableLocales	Locale	An array of locales for which localized Calendar instances are available
5637	getTime	Date	a Date representing the time value
5639	getTimeInMillis	long	the current time as UTC milliseconds from the epoch
5641	get	int	the value for the given calendar field
5642	internalGet	int	the value for the given calendar field
5650	isSet	boolean	true if the given calendar field has a value set false otherwise
5651	getDisplayName	String	the string representation of the given field in the given style or null if no string representation is applicable
5652	getDisplayNames	Map	a Map containing all display names in style and locale and their field values or null if no display names are defined for field
5654	isExternallySet	boolean	true if the field has been set externally false otherwise
5655	getSetStateFields	int	a bit mask indicating set state fields
5662	selectFields	int	a bit mask of selected fields
5664	equals	boolean	true if this object is equal to obj false otherwise
5665	hashCode	int	a hash code value for this object
5666	before	boolean	true if the time of this Calendar is before the time represented by when false otherwise
5667	after	boolean	true if the time of this Calendar is after the time represented by when false otherwise
5668	compareTo	int	the value if the time represented by the argument is equal to the time represented by this Calendar a value less than if the time of this Calendar is before the time represented by the argument and a value greater than if the time of this Calendar is after the time represented by the argument
5673	getTimeZone	TimeZone	the time zone object associated with this calendar
5677	isLenient	boolean	true if the interpretation mode of this calendar is lenient false otherwise
5679	getFirstDayOfWeek	int	the first day of the week
5681	getMinimalDaysInFirstWeek	int	the minimal days required in the first week of the year
5682	getMinimum	int	the minimum value for the given calendar field
5683	getMaximum	int	the maximum value for the given calendar field
5684	getGreatestMinimum	int	the highest minimum value for the given calendar field
5685	getLeastMaximum	int	the lowest maximum value for the given calendar field
5686	getActualMinimum	int	the minimum of the given calendar field for the time value of this Calendar
5687	getActualMaximum	int	the maximum of the given calendar field for the time value of this Calendar
5688	clone	Object	a copy of this object
5689	getFieldName	String	the calendar field name
5690	toString	String	a string representation of this calendar
5697	getWidth	int	The width
5698	size	int	the number of keyvalue mappings in this map
5699	containsValue	boolean	true if this map maps one or more keys to this value
5700	containsKey	boolean	true if this map contains a mapping for the specified key
5702	put	Object	the previous value associated with specified key or null if there was no mapping for key
5703	remove	Object	the previous value associated with specified key or null if there was no entry for key
5707	keySet	Set	a set view of the keys contained in this enum map
5708	values	Collection	a collection view of the values contained in this map
5709	entrySet	Set	a set view of the mappings contained in this enum map
5710	equals	boolean	true if the specified object is equal to this map
5711	clone	EnumMap	a shallow copy of this enum map
5717	ioException	IOException	the last exception thrown by this scanner's readable
5718	delimiter	Pattern	this scanner's delimiting pattern
5719	useDelimiter	Scanner	this scanner
5720	useDelimiter	Scanner	this scanner
5721	locale	Locale	this scanner's locale
5722	useLocale	Scanner	this scanner
5723	radix	int	the default radix of this scanner
5724	useRadix	Scanner	this scanner
5725	match	MatchResult	a match result for the last match operation
5726	toString	String	The string representation of this scanner
5727	hasNext	boolean	true if and only if this scanner has another token
5728	next	String	the next token
5730	hasNext	boolean	true if and only if this scanner has another token matching the specified pattern
5731	next	String	the next token
5732	hasNext	boolean	true if and only if this scanner has another token matching the specified pattern
5733	next	String	the next token
5734	hasNextLine	boolean	true if and only if this scanner has another line of input
5735	nextLine	String	the line that was skipped
5736	findInLine	String	the text that matched the specified pattern
5737	findInLine	String	the text that matched the specified pattern
5738	findWithinHorizon	String	the text that matched the specified pattern
5739	findWithinHorizon	String	the text that matched the specified pattern
5740	skip	Scanner	this scanner
5741	skip	Scanner	this scanner
5742	hasNextBoolean	boolean	true if and only if this scanner's next token is a valid boolean value
5743	nextBoolean	boolean	the boolean scanned from the input
5744	hasNextByte	boolean	true if and only if this scanner's next token is a valid byte value
5745	hasNextByte	boolean	true if and only if this scanner's next token is a valid byte value
5746	nextByte	byte	the byte scanned from the input
5747	nextByte	byte	the byte scanned from the input
5748	hasNextShort	boolean	true if and only if this scanner's next token is a valid short value in the default radix
5749	hasNextShort	boolean	true if and only if this scanner's next token is a valid short value in the specified radix
5750	nextShort	short	the short scanned from the input
5751	nextShort	short	the short scanned from the input
5752	hasNextInt	boolean	true if and only if this scanner's next token is a valid int value
5753	hasNextInt	boolean	true if and only if this scanner's next token is a valid int value
5755	nextInt	int	the int scanned from the input
5756	nextInt	int	the int scanned from the input
5757	hasNextLong	boolean	true if and only if this scanner's next token is a valid long value
5758	hasNextLong	boolean	true if and only if this scanner's next token is a valid long value
5759	nextLong	long	the long scanned from the input
5760	nextLong	long	the long scanned from the input
5762	hasNextFloat	boolean	true if and only if this scanner's next token is a valid float value
5763	nextFloat	float	the float scanned from the input
5764	hasNextDouble	boolean	true if and only if this scanner's next token is a valid double value
5765	nextDouble	double	the double scanned from the input
5766	hasNextBigInteger	boolean	true if and only if this scanner's next token is a valid BigInteger
5767	hasNextBigInteger	boolean	true if and only if this scanner's next token is a valid BigInteger
5768	nextBigInteger	BigInteger	the BigInteger scanned from the input
5769	nextBigInteger	BigInteger	the BigInteger scanned from the input
5770	hasNextBigDecimal	boolean	true if and only if this scanner's next token is a valid BigDecimal
5771	nextBigDecimal	BigDecimal	the BigDecimal scanned from the input
5772	reset	Scanner	this scanner
5773	getConversion	char	The inapplicable conversion
5774	getArgumentClass	Class	The class of the mismatched argument
5777	copyElements	Object	its argument
5780	offerFirst	boolean	true as specified by link DequeofferFirst
5781	offerLast	boolean	true as specified by link DequeofferLast
5786	removeFirstOccurrence	boolean	true if the deque contained the specified element
5787	removeLastOccurrence	boolean	true if the deque contained the specified element
5788	add	boolean	true as specified by link Collectionadd
5789	offer	boolean	true as specified by link Queueoffer
5790	remove	Object	the head of the queue represented by this deque
5791	poll	Object	the head of the queue represented by this deque or null if this deque is empty
5792	element	Object	the head of the queue represented by this deque
5793	peek	Object	the head of the queue represented by this deque or null if this deque is empty
5795	pop	Object	the element at the front of this deque which is the top of the stack represented by this deque
5796	delete	boolean	true if elements moved backwards
5797	size	int	the number of elements in this deque
5798	isEmpty	boolean	true if this deque contains no elements
5799	iterator	Iterator	an iterator over the elements in this deque
5800	contains	boolean	true if this deque contains the specified element
5801	remove	boolean	true if this deque contained the specified element
5803	toArray	Object	an array containing all of the elements in this deque
5804	toArray	Object	an array containing all of the elements in this deque
5805	clone	ArrayDeque	a copy of this deque
5812	size	int	the number of keyvalue mappings in this map
5813	isEmpty	boolean	true if this identity hash map contains no keyvalue mappings
5817	containsKey	boolean	true if the specified object reference is a key in this map
5818	containsValue	boolean	true if this map maps one or more keys to the specified object reference
5819	containsMapping	boolean	true if and only if the specified keyvalue mapping is in the map
5820	put	Object	the previous value associated with key or null if there was no mapping for key
5823	remove	Object	the previous value associated with key or null if there was no mapping for key
5824	removeMapping	boolean	true if and only if the specified keyvalue mapping was in the map
5827	equals	boolean	true if the specified object is equal to this map
5828	hashCode	int	the hash code value for this map
5829	clone	Object	a shallow copy of this map
5830	keySet	Set	an identitybased set view of the keys contained in this map
5832	entrySet	Set	a set view of the identitymappings contained in this map
5836	iterator	Iterator	an iterator over the elements contained in this collection
5841	finishToArray	Object	array containing the elements in the given array plus any further elements returned by the iterator trimmed to size
5849	toString	String	a string representation of this collection
5857	hasChanged	boolean	true if and only if the setChanged method has been called more recently than the clearChanged method on this object false otherwise
5858	countObservers	int	the number of observers of this object
5859	hasNext	boolean	code true if the iteration has more elements
5860	next	Object	the next element in the iteration
5862	add	boolean	true as specified by link Collectionadd
5863	offer	boolean	true if the element was added to this queue else false
5864	remove	Object	the head of this queue
5865	poll	Object	the head of this queue or null if this queue is empty
5866	element	Object	the head of this queue
5867	peek	Object	the head of this queue or null if this queue is empty
5868	loadClass	Class	The resulting Class object
5869	loadClass	Class	The resulting Class object
5870	findClass	Class	The resulting Class object
5871	defineClass	Class	The Class object that was created from the specified class data
5872	defineClass	Class	The Class object that was created from the specified class data
5873	defineClass	Class	The Class object created from the data and optional ProtectionDomain
5874	defineClass	Class	The Class object created from the data and optional ProtectionDomain
5877	findSystemClass	Class	The Class object for the specified name
5878	findLoadedClass	Class	The Class object or null if the class has not been loaded
5880	getResource	URL	A URL object for reading the resource or null if the resource could not be found or the invoker doesn't have adequate privileges to get the resource
5881	getResources	Enumeration	An enumeration of link java
5882	findResource	URL	A URL object for reading the resource or null if the resource could not be found
5883	findResources	Enumeration	An enumeration of link java
5884	getSystemResource	URL	A link java
5885	getSystemResources	Enumeration	An enumeration of resource link java
5888	getResourceAsStream	InputStream	An input stream for reading the resource or null if the resource could not be found
5889	getSystemResourceAsStream	InputStream	An input stream for reading the resource or null if the resource could not be found
5890	getParent	ClassLoader	The parent ClassLoader
5891	getSystemClassLoader	ClassLoader	The system ClassLoader for delegation or null if none
5892	definePackage	Package	The newly defined Package object
5893	getPackage	Package	The Package corresponding to the given name or null if not found
5894	getPackages	Package	The array of Package objects defined by this ClassLoader
5895	findLibrary	String	The absolute path of the native library
5900	desiredAssertionStatus	boolean	The desired assertion status of the specified class
5911	append	StringBuffer	a reference to this object
5912	append	StringBuffer	a reference to this object
5946	initialValue	Object	the initial value for this threadlocal
5947	get	Object	the current thread's value of this threadlocal
5948	setInitialValue	Object	the initial value
5951	getMap	ThreadLocal.ThreadLocalMap	the map
5953	createInheritedMap	ThreadLocal.ThreadLocalMap	a map containing the parent's inheritable bindings
5958	getEntry	ThreadLocal.ThreadLocalMap.Entry	the entry associated with key or null if no such
5959	getEntryAfterMiss	ThreadLocal.ThreadLocalMap.Entry	the entry associated with key or null if no such
5963	expungeStaleEntry	int	the index of the next null slot after staleSlot all between staleSlot and this slot will have been checked for expunging
5964	cleanSomeSlots	boolean	true if any stale entries have been removed
5971	getEntry	ThreadLocal.ThreadLocalMap.Entry	the entry associated with key or null if no such
5972	getEntryAfterMiss	ThreadLocal.ThreadLocalMap.Entry	the entry associated with key or null if no such
5976	expungeStaleEntry	int	the index of the next null slot after staleSlot all between staleSlot and this slot will have been checked for expunging
5977	cleanSomeSlots	boolean	true if any stale entries have been removed
5984	getEntry	ThreadLocal.ThreadLocalMap.Entry	the entry associated with key or null if no such
5985	getEntryAfterMiss	ThreadLocal.ThreadLocalMap.Entry	the entry associated with key or null if no such
5989	expungeStaleEntry	int	the index of the next null slot after staleSlot all between staleSlot and this slot will have been checked for expunging
5990	cleanSomeSlots	boolean	true if any stale entries have been removed
5994	getName	String	the name of this memory manager
5995	isValid	boolean	true if the memory manager is valid in the Java virtual machine false otherwise
5996	getMemoryPoolNames	String	an array of String objects each is the name of a memory pool that this memory manager manages
5997	getLockedStackDepth	int	the depth in the stack trace where the object monitor was locked or a negative number if not available
5998	getLockedStackFrame	StackTraceElement	StackTraceElement that locked the object monitor or null if not available
5999	from	MonitorInfo	a MonitorInfo object represented by cd if cd is not null null otherwise
6000	getClassLoadingMXBean	ClassLoadingMXBean	a link ClassLoadingMXBean object for the Java virtual machine
6001	getMemoryMXBean	MemoryMXBean	a link MemoryMXBean object for the Java virtual machine
6002	getThreadMXBean	ThreadMXBean	a link ThreadMXBean object for the Java virtual machine
6003	getRuntimeMXBean	RuntimeMXBean	a link RuntimeMXBean object for the Java virtual machine
6004	getCompilationMXBean	CompilationMXBean	a link CompilationMXBean object for the Java virtual machine or null if the Java virtual machine has no compilation system
6005	getOperatingSystemMXBean	OperatingSystemMXBean	an link OperatingSystemMXBean object for the Java virtual machine
6006	getMemoryPoolMXBeans	List	a list of MemoryPoolMXBean objects
6007	getMemoryManagerMXBeans	List	a list of MemoryManagerMXBean objects
6008	getGarbageCollectorMXBeans	List	a list of GarbageCollectorMXBean objects
6009	getPlatformMBeanServer	MBeanServer	the platform MBeanServer the platform MXBeans are registered into the platform MBeanServer at the first time this method is called
6011	getName	String	the operating system name
6012	getArch	String	the operating system architecture
6013	getVersion	String	the operating system version
6014	getAvailableProcessors	int	the number of processors available to the virtual machine never smaller than one
6015	getSystemLoadAverage	double	the system load average or a negative value if not available
6016	toString	String	the string representation of this MemoryType
6017	getObjectPendingFinalizationCount	int	the approximate number objects for which finalization is pending
6018	getHeapMemoryUsage	MemoryUsage	a link MemoryUsage object representing the heap memory usage
6019	getNonHeapMemoryUsage	MemoryUsage	a link MemoryUsage object representing the nonheap memory usage
6020	isVerbose	boolean	true if verbose output for the memory system is enabled false otherwise
6023	getCollectionCount	long	the total number of collections that have occurred
6024	getCollectionTime	long	the approximate accumulated collection elapsed time in milliseconds
6025	getClassName	String	the fully qualified name of the class of the lock object
6026	getIdentityHashCode	int	the identity hash code of the lock object
6027	toString	String	the string representation of a lock
6028	getInit	long	the initial size of memory in bytes if undefined
6029	getUsed	long	the amount of used memory in bytes
6030	getCommitted	long	the amount of committed memory in bytes
6031	getMax	long	the maximum amount of memory in bytes if undefined
6033	from	MemoryUsage	a MemoryUsage object represented by cd if cd is not null null otherwise
6034	getPoolName	String	the name of the memory pool that triggers this notification
6035	getUsage	MemoryUsage	the memory usage of the memory pool when this notification was constructed
6036	getCount	long	the number of times that the memory usage has crossed a threshold when the notification was constructed
6037	from	MemoryNotificationInfo	a MemoryNotificationInfo object represented by cd if cd is not null null otherwise
6038	getThreadCount	int	the current number of live threads
6039	getPeakThreadCount	int	the peak live thread count
6040	getTotalStartedThreadCount	long	the total number of threads started
6041	getDaemonThreadCount	int	the current number of live daemon threads
6042	getAllThreadIds	long	an array of long each is a thread ID
6043	getThreadInfo	ThreadInfo	a link ThreadInfo object for the thread of the given ID with no stack trace no locked monitor and no synchronizer info null if the thread of the given ID is not alive or it does not exist
6044	getThreadInfo	ThreadInfo	an array of the link ThreadInfo objects each containing information about a thread whose ID is in the corresponding element of the input array of IDs with no stack trace no locked monitor and no synchronizer info
6045	getThreadInfo	ThreadInfo	a link ThreadInfo of the thread of the given ID with no locked monitor and synchronizer info
6046	getThreadInfo	ThreadInfo	an array of the link ThreadInfo objects each containing information about a thread whose ID is in the corresponding element of the input array of IDs with no locked monitor and synchronizer info
6047	isThreadContentionMonitoringSupported	boolean	true if the Java virtual machine supports thread contention monitoring false otherwise
6048	isThreadContentionMonitoringEnabled	boolean	true if thread contention monitoring is enabled false otherwise
6050	getCurrentThreadCpuTime	long	the total CPU time for the current thread if CPU time measurement is enabled otherwise
6051	getCurrentThreadUserTime	long	the userlevel CPU time for the current thread if CPU time measurement is enabled otherwise
6052	getThreadCpuTime	long	the total CPU time for a thread of the specified ID if the thread of the specified ID exists the thread is alive and CPU time measurement is enabled otherwise
6053	getThreadUserTime	long	the userlevel CPU time for a thread of the specified ID if the thread of the specified ID exists the thread is alive and CPU time measurement is enabled otherwise
6054	isThreadCpuTimeSupported	boolean	true if the Java virtual machine supports CPU time measurement for any thread false otherwise
6055	isCurrentThreadCpuTimeSupported	boolean	true if the Java virtual machine supports CPU time measurement for current thread false otherwise
6056	isThreadCpuTimeEnabled	boolean	true if thread CPU time measurement is enabled false otherwise
6058	findMonitorDeadlockedThreads	long	an array of IDs of the threads that are monitor deadlocked if any null otherwise
6060	findDeadlockedThreads	long	an array of IDs of the threads that are deadlocked waiting for object monitors or ownable synchronizers if any null otherwise
6061	isObjectMonitorUsageSupported	boolean	true if the Java virtual machine supports monitoring of object monitor usage false otherwise
6062	isSynchronizerUsageSupported	boolean	true if the Java virtual machine supports monitoring of ownable synchronizer usage false otherwise
6063	getThreadInfo	ThreadInfo	an array of the link ThreadInfo objects each containing information about a thread whose ID is in the corresponding element of the input array of IDs
6064	dumpAllThreads	ThreadInfo	an array of link ThreadInfo for all live threads
6065	getName	String	the name of the JIT compiler
6066	isCompilationTimeMonitoringSupported	boolean	true if the monitoring of compilation time is supported false otherwise
6067	getTotalCompilationTime	long	Compilation time in milliseconds
6069	getThreadId	long	the ID of the associated thread
6070	getThreadName	String	the name of the associated thread
6071	getThreadState	Thread.State	Thread
6072	getBlockedTime	long	the approximate accumulated elapsed time in milliseconds that a thread entered the BLOCKED state if thread contention monitoring is disabled
6073	getBlockedCount	long	the total number of times that the thread entered the BLOCKED state
6074	getWaitedTime	long	the approximate accumulated elapsed time in milliseconds that a thread has been in the WAITING or TIMED_WAITING state if thread contention monitoring is disabled
6075	getWaitedCount	long	the total number of times that the thread was in the WAITING or TIMED_WAITING state
6076	getLockInfo	LockInfo	LockInfo of an object for which the thread is blocked waiting if any null otherwise
6077	getLockName	String	the string representation of the object on which the thread is blocked if any null otherwise
6078	getLockOwnerId	long	the thread ID of the owner thread of the object this thread is blocked on if this thread is not blocked or if the object lis not owned by any thread
6079	getLockOwnerName	String	the name of the thread that owns the object this thread is blocked on null if this thread is not blocked or if the object is not owned by any thread
6080	getStackTrace	StackTraceElement	an array of StackTraceElement objects of the thread
6081	isSuspended	boolean	true if the thread is suspended false otherwise
6082	isInNative	boolean	true if the thread is executing native code false otherwise
6083	toString	String	a string representation of this thread info
6084	from	ThreadInfo	a ThreadInfo object represented by cd if cd is not null null otherwise
6085	getLockedMonitors	MonitorInfo	an array of MonitorInfo objects representing the object monitors locked by the thread
6086	getLockedSynchronizers	LockInfo	an array of LockInfo objects representing the ownable synchronizers locked by the thread
6087	getName	String	the name of this memory pool
6088	getType	MemoryType	the type of this memory pool
6089	getUsage	MemoryUsage	a link MemoryUsage object or null if this pool not valid
6090	getPeakUsage	MemoryUsage	a link MemoryUsage object representing the peak memory usage or null if this pool is not valid
6092	isValid	boolean	true if the memory pool is valid in the running Java virtual machine false otherwise
6093	getMemoryManagerNames	String	an array of String objects each is the name of a memory manager managing this memory pool
6094	getUsageThreshold	long	the usage threshold value of this memory pool in bytes
6096	isUsageThresholdExceeded	boolean	true if the memory usage of this memory pool reaches or exceeds the threshold value false otherwise
6097	getUsageThresholdCount	long	the number of times that the memory usage has crossed its usage threshold value
6098	isUsageThresholdSupported	boolean	true if this memory pool supports usage threshold false otherwise
6099	getCollectionUsageThreshold	long	the collection usage threshold of this memory pool in bytes
6101	isCollectionUsageThresholdExceeded	boolean	true if the memory usage of this memory pool reaches or exceeds the collection usage threshold value in the most recent collection false otherwise
6102	getCollectionUsageThresholdCount	long	the number of times that the memory usage has reached or exceeded the collection usage threshold
6103	getCollectionUsage	MemoryUsage	a link MemoryUsage representing the memory usage of this memory pool after the Java virtual machine most recently expended effort in recycling unused objects null if this method is not supported
6104	isCollectionUsageThresholdSupported	boolean	true if this memory pool supports the collection usage threshold false otherwise
6105	getTotalLoadedClassCount	long	the total number of classes loaded
6106	getLoadedClassCount	int	the number of currently loaded classes
6107	getUnloadedClassCount	long	the total number of unloaded classes
6108	isVerbose	boolean	true if the verbose output for the class loading system is enabled false otherwise
6110	getName	String	the name representing the running Java virtual machine
6111	getVmName	String	the Java virtual machine implementation name
6112	getVmVendor	String	the Java virtual machine implementation vendor
6113	getVmVersion	String	the Java virtual machine implementation version
6114	getSpecName	String	the Java virtual machine specification name
6115	getSpecVendor	String	the Java virtual machine specification vendor
6116	getSpecVersion	String	the Java virtual machine specification version
6117	getManagementSpecVersion	String	the version of the specification for the management interface implemented by the running Java virtual machine
6118	getClassPath	String	the Java class path
6119	getLibraryPath	String	the Java library path
6120	isBootClassPathSupported	boolean	true if the Java virtual machine supports the class path mechanism false otherwise
6121	getBootClassPath	String	the boot class path
6122	getInputArguments	List	a list of String objects each element is an argument passed to the Java virtual machine
6123	getUptime	long	uptime of the Java virtual machine in milliseconds
6124	getStartTime	long	start time of the Java virtual machine in milliseconds
6125	getSystemProperties	Map	a map of names and values of all system properties
6127	append	StringBuilder	a reference to this object
6157	read	int	return The number of char values added to the buffer or if this source of characters is at its end
6158	name	String	the name of this enum constant
6159	ordinal	int	the ordinal of this enumeration constant
6160	toString	String	the name of this enum constant
6161	equals	boolean	true if the specified object is equal to this enum constant
6162	hashCode	int	a hash code for this enum constant
6163	clone	Object	never returns
6165	getDeclaringClass	Class	the Class object corresponding to this enum constant's enum type
6166	valueOf	Enum	the enum constant of the specified enum type with the specified name
6169	toString	String	a string representation of the argument in the specified radix
6170	toHexString	String	the string representation of the unsigned integer value represented by the argument in hexadecimal basenbsp
6171	toOctalString	String	the string representation of the unsigned integer value represented by the argument in octal basenbsp
6172	toBinaryString	String	the string representation of the unsigned integer value represented by the argument in binary basenbsp
6174	toString	String	a string representation of the argument in basenbsp
6176	parseInt	int	the integer represented by the string argument in the specified radix
6177	parseInt	int	the integer value represented by the argument in decimal
6178	valueOf	Integer	an code Integer object holding the value represented by the string argument in the specified radix
6179	valueOf	Integer	an code Integer object holding the value represented by the string argument
6180	valueOf	Integer	an code Integer instance representing code i
6187	toString	String	a string representation of the value of this object in basenbsp
6188	hashCode	int	a hash code value for this object equal to the primitive code int value represented by this code Integer object
6189	equals	boolean	code true if the objects are the same code false otherwise
6190	getInteger	Integer	the code Integer value of the property
6191	getInteger	Integer	the code Integer value of the property
6192	getInteger	Integer	the code Integer value of the property
6193	decode	Integer	an code Integer object holding the code int value represented by code nm
6194	compareTo	int	the value code if this code Integer is equal to the argument code Integer a value less than code if this code Integer is numerically less than the argument code Integer and a value greater than code if this code Integer is numerically greater than the argument code Integer signed comparison
6195	highestOneBit	int	an code int value with a single onebit in the position of the highestorder onebit in the specified value or zero if the specified value is itself equal to zero
6196	lowestOneBit	int	an code int value with a single onebit in the position of the lowestorder onebit in the specified value or zero if the specified value is itself equal to zero
6197	numberOfLeadingZeros	int	the number of zero bits preceding the highestorder leftmost onebit in the two's complement binary representation of the specified code int value or if the value is equal to zero
6198	numberOfTrailingZeros	int	the number of zero bits following the lowestorder rightmost onebit in the two's complement binary representation of the specified code int value or if the value is equal to zero
6199	bitCount	int	the number of onebits in the two's complement binary representation of the specified code int value
6200	rotateLeft	int	the value obtained by rotating the two's complement binary representation of the specified code int value left by the specified number of bits
6201	rotateRight	int	the value obtained by rotating the two's complement binary representation of the specified code int value right by the specified number of bits
6202	reverse	int	the value obtained by reversing order of the bits in the specified code int value
6203	signum	int	the signum function of the specified code int value
6204	reverseBytes	int	the value obtained by reversing the bytes in the specified code int value
6205	compareTo	int	a negative integer zero or a positive integer as this object is less than equal to or greater than the specified object
6206	getOutputStream	OutputStream	the output stream connected to the normal input of the subprocess
6207	getInputStream	InputStream	the input stream connected to the normal output of the subprocess
6208	getErrorStream	InputStream	the input stream connected to the error output stream of the subprocess
6209	waitFor	int	the exit value of the subprocess represented by this code Process object
6210	exitValue	int	the exit value of the subprocess represented by this code Process object
6212	sin	double	the sine of the argument
6213	cos	double	the cosine of the argument
6214	tan	double	the tangent of the argument
6215	asin	double	the arc sine of the argument
6216	acos	double	the arc cosine of the argument
6217	atan	double	the arc tangent of the argument
6218	toRadians	double	the measurement of the angle code angdeg in radians
6219	toDegrees	double	the measurement of the angle code angrad in degrees
6220	exp	double	the value ecode a where e is the base of the natural logarithms
6221	log	double	the value lnnbspcode a the natural logarithm of code a
6222	log10	double	the base logarithm of code a
6223	sqrt	double	the positive square root of code a
6224	cbrt	double	the cube root of code a
6225	IEEEremainder	double	the remainder when code f is divided by code f
6226	ceil	double	the smallest closest to negative infinity floatingpoint value that is greater than or equal to the argument and is equal to a mathematical integer
6227	floor	double	the largest closest to positive infinity floatingpoint value that less than or equal to the argument and is equal to a mathematical integer
6228	rint	double	the closest floatingpoint value to code a that is equal to a mathematical integer
6229	atan2	double	the theta component of the point rnbsptheta in polar coordinates that corresponds to the point xnbspy in Cartesian coordinates
6230	pow	double	the value code acode b
6231	round	int	the value of the argument rounded to the nearest code int value
6232	round	long	the value of the argument rounded to the nearest code long value
6233	random	double	a pseudorandom code double greater than or equal to code 
6234	abs	int	the absolute value of the argument
6235	abs	long	the absolute value of the argument
6236	abs	float	the absolute value of the argument
6237	abs	double	the absolute value of the argument
6238	max	int	the larger of code a and code b
6239	max	long	the larger of code a and code b
6240	max	float	the larger of code a and code b
6241	max	double	the larger of code a and code b
6242	min	int	the smaller of code a and code b
6243	min	long	the smaller of code a and code b
6244	min	float	the smaller of code a and code b
6245	min	double	the smaller of code a and code b
6246	ulp	double	the size of an ulp of the argument
6247	ulp	float	the size of an ulp of the argument
6248	signum	double	the signum function of the argument
6249	signum	float	the signum function of the argument
6250	sinh	double	The hyperbolic sine of code x
6251	cosh	double	The hyperbolic cosine of code x
6252	tanh	double	The hyperbolic tangent of code x
6253	hypot	double	sqrtxnbspy without intermediate overflow or underflow
6254	expm1	double	the value ecode xnbspnbsp
6255	log1p	double	the value lncode xnbspnbsp the natural log of code xnbspnbsp
6256	copySign	double	a value with the magnitude of code magnitude and the sign of code sign
6257	copySign	float	a value with the magnitude of code magnitude and the sign of code sign
6260	nextAfter	double	The floatingpoint number adjacent to code start in the direction of code direction
6261	nextAfter	float	The floatingpoint number adjacent to code start in the direction of code direction
6262	nextUp	double	The adjacent floatingpoint value closer to positive infinity
6263	nextUp	float	The adjacent floatingpoint value closer to positive infinity
6264	scalb	double	code d times code scaleFactor
6265	scalb	float	code f times code scaleFactor
6266	parseBoolean	boolean	the boolean represented by the string argument
6267	booleanValue	boolean	the primitive code boolean value of this object
6268	valueOf	Boolean	a code Boolean instance representing code b
6269	valueOf	Boolean	the code Boolean value represented by the string
6270	toString	String	the string representation of the specified code boolean
6271	toString	String	a string representation of this object
6272	hashCode	int	the integer code if this object represents code true returns the integer code if this object represents code false
6273	equals	boolean	code true if the Boolean objects represent the same value code false otherwise
6274	getBoolean	boolean	the code boolean value of the system property
6275	compareTo	int	zero if this object represents the same boolean value as the argument a positive value if this object represents true and the argument represents false and a negative value if this object represents false and the argument represents true
6276	getMessage	String	the detail message string of this Throwable instance which may be null
6277	getLocalizedMessage	String	The localized description of this throwable
6278	getCause	Throwable	the cause of this throwable or null if the cause is nonexistent or unknown
6279	initCause	Throwable	a reference to this Throwable instance
6280	toString	String	a string representation of this throwable
6286	fillInStackTrace	Throwable	a reference to this Throwable instance
6287	getStackTrace	StackTraceElement	an array of stack trace elements representing the stack trace pertaining to this throwable
6291	command	ProcessBuilder	This process builder
6292	command	ProcessBuilder	This process builder
6293	command	List	This process builder's program and its arguments
6294	environment	Map	This process builder's environment
6295	directory	File	This process builder's working directory
6296	directory	ProcessBuilder	This process builder
6297	redirectErrorStream	boolean	This process builder's redirectErrorStream property
6298	redirectErrorStream	ProcessBuilder	This process builder
6299	start	Process	A new link Process object for managing the subprocess
6301	iterator	Iterator	an Iterator
6302	length	int	the length of the sequence of characters represented by this object
6303	isEmpty	boolean	true if link length is otherwise false
6304	charAt	char	the char value at the specified index of this string
6305	codePointAt	int	the code point value of the character at the index
6306	codePointBefore	int	the Unicode code point value before the given index
6307	codePointCount	int	the number of Unicode code points in the specified text range
6308	offsetByCodePoints	int	the index within this String
6312	getBytes	byte	The resultant byte array
6313	getBytes	byte	The resultant byte array
6314	getBytes	byte	The resultant byte array
6315	equals	boolean	code true if the given object represents a code String equivalent to this string code false otherwise
6316	contentEquals	boolean	code true if this code String represents the same sequence of characters as the specified code StringBuffer code false otherwise
6317	contentEquals	boolean	code true if this code String represents the same sequence of char values as the specified sequence code false otherwise
6318	equalsIgnoreCase	boolean	code true if the argument is not code null and it represents an equivalent code String ignoring case code false otherwise
6319	compareTo	int	the value if the argument string is equal to this string a value less than if this string is lexicographically less than the string argument and a value greater than if this string is lexicographically greater than the string argument
6320	compareToIgnoreCase	int	a negative integer zero or a positive integer as the specified String is greater than equal to or less than this String ignoring case considerations
6321	regionMatches	boolean	true if the specified subregion of this string exactly matches the specified subregion of the string argument false otherwise
6322	regionMatches	boolean	true if the specified subregion of this string matches the specified subregion of the string argument false otherwise
6323	startsWith	boolean	true if the character sequence represented by the argument is a prefix of the substring of this object starting at index toffset false otherwise
6324	startsWith	boolean	true if the character sequence represented by the argument is a prefix of the character sequence represented by this string false otherwise
6325	endsWith	boolean	true if the character sequence represented by the argument is a suffix of the character sequence represented by this object false otherwise
6326	hashCode	int	a hash code value for this object
6327	indexOf	int	the index of the first occurrence of the character in the character sequence represented by this object or if the character does not occur
6328	indexOf	int	the index of the first occurrence of the character in the character sequence represented by this object that is greater than or equal to fromIndex or if the character does not occur
6329	lastIndexOf	int	the index of the last occurrence of the character in the character sequence represented by this object or if the character does not occur
6330	lastIndexOf	int	the index of the last occurrence of the character in the character sequence represented by this object that is less than or equal to fromIndex or if the character does not occur before that point
6331	indexOf	int	if the string argument occurs as a substring within this object then the index of the first character of the first such substring is returned if it does not occur as a substring is returned
6332	indexOf	int	the index within this string of the first occurrence of the specified substring starting at the specified index
6334	lastIndexOf	int	if the string argument occurs one or more times as a substring within this object then the index of the first character of the last such substring is returned
6335	lastIndexOf	int	the index within this string of the last occurrence of the specified substring
6337	substring	String	the specified substring
6338	substring	String	the specified substring
6339	subSequence	CharSequence	the specified subsequence
6340	concat	String	a string that represents the concatenation of this object's characters followed by the string argument's characters
6341	replace	String	a string derived from this string by replacing every occurrence of oldChar with newChar
6342	matches	boolean	true if and only if this string matches the given regular expression
6343	contains	boolean	true if this string contains s false otherwise
6344	replaceFirst	String	The resulting String
6345	replaceAll	String	The resulting String
6346	replace	String	The resulting string
6347	split	String	the array of strings computed by splitting this string around matches of the given regular expression
6348	split	String	the array of strings computed by splitting this string around matches of the given regular expression
6349	toLowerCase	String	the String converted to lowercase
6350	toLowerCase	String	the String converted to lowercase
6351	toUpperCase	String	the String converted to uppercase
6352	toUpperCase	String	the String converted to uppercase
6353	trim	String	A copy of this string with leading and trailing white space removed or this string if it has no leading or trailing white space
6354	toString	String	the string itself
6355	toCharArray	char	a newly allocated character array whose length is the length of this string and whose contents are initialized to contain the character sequence represented by this string
6356	format	String	A formatted string
6357	format	String	A formatted string
6358	valueOf	String	if the argument is null then a string equal to null otherwise the value of obj
6359	valueOf	String	a newly allocated string representing the same sequence of characters contained in the character array argument
6360	valueOf	String	a string representing the sequence of characters contained in the subarray of the character array argument
6361	copyValueOf	String	a String that contains the characters of the specified subarray of the character array
6362	copyValueOf	String	a String that contains the characters of the character array
6363	valueOf	String	if the argument is true a string equal to true is returned otherwise a string equal to false is returned
6364	valueOf	String	a string of length containing as its single character the argument c
6365	valueOf	String	a string representation of the int argument
6366	valueOf	String	a string representation of the long argument
6367	valueOf	String	a string representation of the float argument
6368	valueOf	String	a string representation of the double argument
6369	intern	String	a string that has the same contents as this string but is guaranteed to be from a pool of unique strings
6370	toString	String	a string representation of the argument
6371	toHexString	String	a hex string representation of the argument
6372	valueOf	Double	a code Double object holding the value represented by the code String argument
6373	valueOf	Double	a code Double instance representing code d
6374	parseDouble	double	the code double value represented by the string argument
6375	isNaN	boolean	code true if the value of the argument is NaN code false otherwise
6376	isInfinite	boolean	code true if the value of the argument is positive infinity or negative infinity code false otherwise
6377	isNaN	boolean	code true if the value represented by this object is NaN code false otherwise
6378	isInfinite	boolean	code true if the value represented by this object is positive infinity or negative infinity code false otherwise
6379	toString	String	a code String representation of this object
6380	byteValue	byte	the code double value represented by this object converted to type code byte
6381	shortValue	short	the code double value represented by this object converted to type code short
6382	intValue	int	the code double value represented by this object converted to type code int
6383	longValue	long	the code double value represented by this object converted to type code long
6384	floatValue	float	the code double value represented by this object converted to type code float
6385	doubleValue	double	the code double value represented by this object
6386	hashCode	int	a code hash code value for this object
6387	equals	boolean	code true if the objects are the same code false otherwise
6388	doubleToLongBits	long	the bits that represent the floatingpoint number
6389	doubleToRawLongBits	long	the bits that represent the floatingpoint number
6390	longBitsToDouble	double	the code double floatingpoint value with the same bit pattern
6391	compareTo	int	the value code if code anotherDouble is numerically equal to this code Double a value less than code if this code Double is numerically less than code anotherDouble and a value greater than code if this code Double is numerically greater than code anotherDouble
6392	compare	int	the value code if code d is numerically equal to code d a value less than code if code d is numerically less than code d and a value greater than code if code d is numerically greater than code d
6393	sin	double	the sine of the argument
6394	cos	double	the cosine of the argument
6395	tan	double	the tangent of the argument
6396	asin	double	the arc sine of the argument
6397	acos	double	the arc cosine of the argument
6398	atan	double	the arc tangent of the argument
6399	toRadians	double	the measurement of the angle code angdeg in radians
6400	toDegrees	double	the measurement of the angle code angrad in degrees
6401	exp	double	the value ecode a where e is the base of the natural logarithms
6402	log	double	the value lnnbspcode a the natural logarithm of code a
6403	log10	double	the base logarithm of code a
6404	sqrt	double	the positive square root of code a
6405	cbrt	double	the cube root of code a
6406	IEEEremainder	double	the remainder when code f is divided by code f
6407	ceil	double	the smallest closest to negative infinity floatingpoint value that is greater than or equal to the argument and is equal to a mathematical integer
6408	floor	double	the largest closest to positive infinity floatingpoint value that less than or equal to the argument and is equal to a mathematical integer
6409	rint	double	the closest floatingpoint value to code a that is equal to a mathematical integer
6410	atan2	double	the theta component of the point rnbsptheta in polar coordinates that corresponds to the point xnbspy in Cartesian coordinates
6411	pow	double	the value code acode b
6412	round	int	the value of the argument rounded to the nearest code int value
6413	round	long	the value of the argument rounded to the nearest code long value
6414	random	double	a pseudorandom code double greater than or equal to code 
6415	abs	int	the absolute value of the argument
6416	abs	long	the absolute value of the argument
6417	abs	float	the absolute value of the argument
6418	abs	double	the absolute value of the argument
6419	max	int	the larger of code a and code b
6420	max	long	the larger of code a and code b
6421	max	float	the larger of code a and code b
6422	max	double	the larger of code a and code b
6423	min	int	the smaller of code a and code b
6424	min	long	the smaller of code a and code b
6425	min	float	the smaller of code a and code b
6426	min	double	the smaller of code a and code b
6427	ulp	double	the size of an ulp of the argument
6428	ulp	float	the size of an ulp of the argument
6429	signum	double	the signum function of the argument
6430	signum	float	the signum function of the argument
6431	sinh	double	The hyperbolic sine of code x
6432	cosh	double	The hyperbolic cosine of code x
6433	tanh	double	The hyperbolic tangent of code x
6434	hypot	double	sqrtxnbspy without intermediate overflow or underflow
6435	expm1	double	the value ecode xnbspnbsp
6436	log1p	double	the value lncode xnbspnbsp the natural log of code xnbspnbsp
6437	copySign	double	a value with the magnitude of code magnitude and the sign of code sign
6438	copySign	float	a value with the magnitude of code magnitude and the sign of code sign
6439	getExponent	int	the unbiased exponent of the argument
6440	getExponent	int	the unbiased exponent of the argument
6441	nextAfter	double	The floatingpoint number adjacent to code start in the direction of code direction
6442	nextAfter	float	The floatingpoint number adjacent to code start in the direction of code direction
6443	nextUp	double	The adjacent floatingpoint value closer to positive infinity
6444	nextUp	float	The adjacent floatingpoint value closer to positive infinity
6445	scalb	double	code d times code scaleFactor
6446	scalb	float	code f times code scaleFactor
6447	append	Appendable	A reference to this Appendable
6448	append	Appendable	A reference to this Appendable
6449	append	Appendable	A reference to this Appendable
6450	getName	String	The fullyqualified name of this package as defined in the Java Language Specification Third Edition a hrefhttpjava
6451	getSpecificationTitle	String	the specification title null is returned if it is not known
6452	getSpecificationVersion	String	the specification version null is returned if it is not known
6453	getSpecificationVendor	String	the specification vendor null is returned if it is not known
6454	getImplementationTitle	String	the title of the implementation null is returned if it is not known
6455	getImplementationVersion	String	the version of the implementation null is returned if it is not known
6456	getImplementationVendor	String	the vendor that implemented this package
6457	isSealed	boolean	true if the package is sealed false otherwise
6458	isSealed	boolean	true if this package is sealed with respect to url
6459	isCompatibleWith	boolean	true if this package's version number is greater than or equal to the desired version number
6460	getPackage	Package	the package of the requested name
6461	getPackages	Package	a new array of packages known to the callers code ClassLoader instance
6462	getPackage	Package	the package of the class
6463	hashCode	int	the hash code computed from the package name
6464	toString	String	the string representation of the package
6469	enumType	Class	the type of the missing enum constant
6470	constantName	String	the name of the missing enum constant
6471	getName	String	the name of this thread group
6472	getParent	ThreadGroup	the parent of this thread group
6473	getMaxPriority	int	the maximum priority that a thread in this thread group can have
6474	isDaemon	boolean	true if this thread group is a daemon thread group false otherwise
6475	isDestroyed	boolean	true if this object is destroyed
6478	parentOf	boolean	true if this thread group is the thread group argument or one of its ancestor thread groups false otherwise
6480	activeCount	int	an estimate of the number of active threads in this thread group and in any other thread group that has this thread group as an ancestor
6481	enumerate	int	the number of threads put into the array
6482	enumerate	int	the number of threads placed into the array
6483	activeGroupCount	int	the number of active thread groups with this thread group as an ancestor
6484	enumerate	int	the number of thread groups put into the array
6485	enumerate	int	the number of thread groups put into the array
6493	remove	void	if this Thread has already been destroyed
6496	remove	void	if the Thread has already been destroyed
6499	allowThreadSuspension	boolean	true on success
6500	toString	String	a string representation of this thread group
6501	childValue	Object	the child thread's initial value
6504	poll	Reference	A reference object if one was immediately available otherwise null
6505	remove	Reference	A reference object if one was available within the specified timeout period otherwise null
6506	remove	Reference	A reference object blocking until one becomes available
6507	get	Object	The object to which this reference refers or null if this reference object has been cleared
6509	isEnqueued	boolean	true if and only if this reference object has been enqueued
6510	enqueue	boolean	true if this reference object was successfully enqueued false if it was already enqueued or if it was not registered with a queue when it was created
6511	get	Object	The object to which this reference refers or null if this reference object has been cleared
6512	get	Object	null
6516	removeTransformer	boolean	true if the transformer was found and removed false if the transformer was not found
6517	isRetransformClassesSupported	boolean	true if the current JVM configuration supports retransformation of classes false if not
6519	isRedefineClassesSupported	boolean	true if the current JVM configuration supports redefinition of classes false if not
6522	getAllLoadedClasses	Class	an array containing all the classes loaded by the JVM zerolength if there are none
6523	getInitiatedClasses	Class	an array containing all the classes for which loader is an initiating loader zerolength if there are none
6524	getObjectSize	long	an implementationspecific approximation of the amount of storage consumed by the specified object
6527	isNativeMethodPrefixSupported	boolean	true if the current JVM configuration supports setting a native method prefix false if not
6529	getDefinitionClass	Class	the Class object referred to
6530	getDefinitionClassFile	byte	the class file bytes
6531	transform	byte	a wellformed class file buffer the result of the transform or null if no transform is performed
6533	getInCheck	boolean	the value of the inCheck field
6534	getClassContext	Class	the execution stack
6535	currentClassLoader	ClassLoader	the class loader of the most recent occurrence on the stack of a method from a class defined using a nonsystem class loader
6536	currentLoadedClass	Class	the class of the most recent occurrence on the stack of a method from a class defined using a nonsystem class loader
6537	classDepth	int	the depth on the stack frame of the first occurrence of a method from a class with the specified name if such a frame cannot be found
6538	classLoaderDepth	int	the depth on the stack frame of the most recent occurrence of a method from a class defined using a nonsystem class loader
6539	inClass	boolean	true if a method from a class with the specified name is on the execution stack false otherwise
6540	inClassLoader	boolean	true if a call to currentClassLoader has a nonnull return value
6541	getSecurityContext	Object	an implementationdependent object that encapsulates sufficient information about the current execution environment to perform some security checks later
6564	checkTopLevelWindow	boolean	true if the calling thread is trusted to put up toplevel windows false otherwise
6573	getThreadGroup	ThreadGroup	ThreadGroup that new threads are instantiated into
6574	length	int	the length of the sequence of characters currently represented by this object
6575	capacity	int	the current capacity
6580	charAt	char	the char value at the specified index
6581	codePointAt	int	the code point value of the character at the index
6582	codePointBefore	int	the Unicode code point value before the given index
6583	codePointCount	int	the number of Unicode code points in the specified text range
6584	offsetByCodePoints	int	the index within this sequence
6587	append	AbstractStringBuilder	a reference to this object
6588	append	AbstractStringBuilder	a reference to this object
6589	append	AbstractStringBuilder	a reference to this object
6590	append	AbstractStringBuilder	a reference to this object
6591	append	AbstractStringBuilder	a reference to this object
6592	append	AbstractStringBuilder	a reference to this object
6593	append	AbstractStringBuilder	a reference to this object
6594	append	AbstractStringBuilder	a reference to this object
6595	append	AbstractStringBuilder	a reference to this object
6596	append	AbstractStringBuilder	a reference to this object
6597	append	AbstractStringBuilder	a reference to this object
6598	delete	AbstractStringBuilder	This object
6599	appendCodePoint	AbstractStringBuilder	a reference to this object
6600	deleteCharAt	AbstractStringBuilder	This object
6601	replace	AbstractStringBuilder	This object
6602	substring	String	The new string
6603	subSequence	CharSequence	the specified subsequence
6604	substring	String	The new string
6605	insert	AbstractStringBuilder	This object
6606	insert	AbstractStringBuilder	a reference to this object
6607	insert	AbstractStringBuilder	a reference to this object
6608	insert	AbstractStringBuilder	a reference to this object
6609	insert	AbstractStringBuilder	a reference to this object
6610	insert	AbstractStringBuilder	a reference to this object
6611	insert	AbstractStringBuilder	a reference to this object
6612	insert	AbstractStringBuilder	a reference to this object
6613	insert	AbstractStringBuilder	a reference to this object
6614	insert	AbstractStringBuilder	a reference to this object
6615	insert	AbstractStringBuilder	a reference to this object
6616	insert	AbstractStringBuilder	a reference to this object
6617	indexOf	int	if the string argument occurs as a substring within this object then the index of the first character of the first such substring is returned if it does not occur as a substring is returned
6618	indexOf	int	the index within this string of the first occurrence of the specified substring starting at the specified index
6619	lastIndexOf	int	if the string argument occurs one or more times as a substring within this object then the index of the first character of the last such substring is returned
6620	lastIndexOf	int	the index within this sequence of the last occurrence of the specified substring
6621	reverse	AbstractStringBuilder	a reference to this object
6622	toString	String	a string representation of this sequence of characters
6624	toString	String	the string representation of the specified code byte
6625	valueOf	Byte	a code Byte instance representing code b
6626	parseByte	byte	the code byte value represented by the string argument in the specified radix
6627	parseByte	byte	the code byte value represented by the argument in decimal
6628	valueOf	Byte	a code Byte object holding the value represented by the string argument in the specified radix
6629	valueOf	Byte	a code Byte object holding the value represented by the string argument
6630	decode	Byte	a code Byte object holding the code byte value represented by code nm
6637	toString	String	a string representation of the value of this object in basenbsp
6639	equals	boolean	code true if the objects are the same code false otherwise
6640	compareTo	int	the value code if this code Byte is equal to the argument code Byte a value less than code if this code Byte is numerically less than the argument code Byte and a value greater than code if this code Byte is numerically greater than the argument code Byte signed comparison
6641	toString	String	a string representation of the argument in the specified radix
6642	toHexString	String	the string representation of the unsigned code long value represented by the argument in hexadecimal basenbsp
6643	toOctalString	String	the string representation of the unsigned code long value represented by the argument in octal basenbsp
6644	toBinaryString	String	the string representation of the unsigned code long value represented by the argument in binary basenbsp
6646	toString	String	a string representation of the argument in basenbsp
6648	parseLong	long	the code long represented by the string argument in the specified radix
6649	parseLong	long	the code long represented by the argument in decimal
6650	valueOf	Long	a code Long object holding the value represented by the string argument in the specified radix
6651	valueOf	Long	a code Long object holding the value represented by the string argument
6652	valueOf	Long	a code Long instance representing code l
6653	decode	Long	a code Long object holding the code long value represented by code nm
6660	toString	String	a string representation of the value of this object in basenbsp
6661	hashCode	int	a hash code value for this object
6662	equals	boolean	code true if the objects are the same code false otherwise
6663	getLong	Long	the code Long value of the property
6664	getLong	Long	the code Long value of the property
6665	getLong	Long	the code Long value of the property
6666	compareTo	int	the value code if this code Long is equal to the argument code Long a value less than code if this code Long is numerically less than the argument code Long and a value greater than code if this code Long is numerically greater than the argument code Long signed comparison
6667	highestOneBit	long	a code long value with a single onebit in the position of the highestorder onebit in the specified value or zero if the specified value is itself equal to zero
6668	lowestOneBit	long	a code long value with a single onebit in the position of the lowestorder onebit in the specified value or zero if the specified value is itself equal to zero
6669	numberOfLeadingZeros	int	the number of zero bits preceding the highestorder leftmost onebit in the two's complement binary representation of the specified code long value or if the value is equal to zero
6670	numberOfTrailingZeros	int	the number of zero bits following the lowestorder rightmost onebit in the two's complement binary representation of the specified code long value or if the value is equal to zero
6671	bitCount	int	the number of onebits in the two's complement binary representation of the specified code long value
6672	rotateLeft	long	the value obtained by rotating the two's complement binary representation of the specified code long value left by the specified number of bits
6673	rotateRight	long	the value obtained by rotating the two's complement binary representation of the specified code long value right by the specified number of bits
6674	reverse	long	the value obtained by reversing order of the bits in the specified code long value
6675	signum	int	the signum function of the specified code long value
6676	reverseBytes	long	the value obtained by reversing the bytes in the specified code long value
6680	console	Console	The system console if any otherwise null
6681	inheritedChannel	Channel	The inherited channel if any otherwise null
6683	getSecurityManager	SecurityManager	if a security manager has already been established for the current application then that security manager is returned otherwise null is returned
6684	currentTimeMillis	long	the difference measured in milliseconds between the current time and midnight January UTC
6685	nanoTime	long	The current value of the system timer in nanoseconds
6687	identityHashCode	int	the hashCode
6688	getProperties	Properties	the system properties
6690	getProperty	String	the string value of the system property or null if there is no property with that key
6691	getProperty	String	the string value of the system property or the default value if there is no property with that key
6692	setProperty	String	the previous value of the system property or null if it did not have one
6693	clearProperty	String	the previous string value of the system property or null if there was no property with that key
6694	getenv	String	the string value of the variable or null if the variable is not defined in the system environment
6695	getenv	Map	the environment as a map of variable names to values
6702	mapLibraryName	String	a platformdependent native library name
6705	getClass	Class	The code Class object that represents the runtime class of this object
6706	hashCode	int	a hash code value for this object
6707	equals	boolean	true if this object is the same as the obj argument false otherwise
6708	clone	Object	a clone of this instance
6709	toString	String	a string representation of the object
6716	element	Method	the Method object for the incorrectly typed element
6717	foundType	String	the type of data found in the incorrectly typed element
6718	annotationType	Class	the Class object for the annotation type with the missing element
6719	elementName	String	the name of the missing element
6720	equals	boolean	true if the specified object represents an annotation that is logically equivalent to this one otherwise false
6721	hashCode	int	the hash code of this annotation
6722	toString	String	a string representation of this annotation
6725	valueOf	Character	a Character instance representing c
6726	charValue	char	the primitive char value represented by this object
6727	hashCode	int	a hash code value for this object
6728	equals	boolean	true if the objects are the same false otherwise
6729	toString	String	a string representation of this object
6730	toString	String	the string representation of the specified char
6731	isValidCodePoint	boolean	true if the specified code point value is a valid code point value false otherwise
6732	isSupplementaryCodePoint	boolean	true if the specified character is in the Unicode supplementary character range false otherwise
6733	isHighSurrogate	boolean	true if the char value is between 'uD' and 'uDBFF' inclusive false otherwise
6734	isLowSurrogate	boolean	true if the char value is between 'uDC' and 'uDFFF' inclusive false otherwise
6735	isSurrogatePair	boolean	true if the specified high and lowsurrogate code values represent a valid surrogate pair false otherwise
6736	charCount	int	 if the character is a valid supplementary character otherwise
6737	toCodePoint	int	the supplementary code point composed from the specified surrogate pair
6738	codePointAt	int	the Unicode code point at the given index
6739	codePointAt	int	the Unicode code point at the given index
6740	codePointAt	int	the Unicode code point at the given index
6741	codePointBefore	int	the Unicode code point value before the given index
6742	codePointBefore	int	the Unicode code point value before the given index
6743	codePointBefore	int	the Unicode code point value before the given index
6744	toChars	int	 if the code point is a BMP code point if the code point is a supplementary code point
6745	toChars	char	a char array having codePoint's UTF representation
6746	codePointCount	int	the number of Unicode code points in the specified text range
6747	codePointCount	int	the number of Unicode code points in the specified subarray
6748	offsetByCodePoints	int	the index within the char sequence
6749	offsetByCodePoints	int	the index within the subarray
6750	isLowerCase	boolean	true if the character is lowercase false otherwise
6751	isLowerCase	boolean	true if the character is lowercase false otherwise
6752	isUpperCase	boolean	true if the character is uppercase false otherwise
6753	isUpperCase	boolean	true if the character is uppercase false otherwise
6754	isTitleCase	boolean	true if the character is titlecase false otherwise
6755	isTitleCase	boolean	true if the character is titlecase false otherwise
6756	isDigit	boolean	true if the character is a digit false otherwise
6757	isDigit	boolean	true if the character is a digit false otherwise
6758	isDefined	boolean	true if the character has a defined meaning in Unicode false otherwise
6759	isDefined	boolean	true if the character has a defined meaning in Unicode false otherwise
6760	isLetter	boolean	true if the character is a letter false otherwise
6761	isLetter	boolean	true if the character is a letter false otherwise
6762	isLetterOrDigit	boolean	true if the character is a letter or digit false otherwise
6763	isLetterOrDigit	boolean	true if the character is a letter or digit false otherwise
6764	isJavaLetter	boolean	true if the character may start a Java identifier false otherwise
6765	isJavaLetterOrDigit	boolean	true if the character may be part of a Java identifier false otherwise
6766	isJavaIdentifierStart	boolean	true if the character may start a Java identifier false otherwise
6767	isJavaIdentifierStart	boolean	true if the character may start a Java identifier false otherwise
6768	isJavaIdentifierPart	boolean	true if the character may be part of a Java identifier false otherwise
6769	isJavaIdentifierPart	boolean	true if the character may be part of a Java identifier false otherwise
6770	isUnicodeIdentifierStart	boolean	true if the character may start a Unicode identifier false otherwise
6771	isUnicodeIdentifierStart	boolean	true if the character may start a Unicode identifier false otherwise
6772	isUnicodeIdentifierPart	boolean	true if the character may be part of a Unicode identifier false otherwise
6773	isUnicodeIdentifierPart	boolean	true if the character may be part of a Unicode identifier false otherwise
6774	isIdentifierIgnorable	boolean	true if the character is an ignorable control character that may be part of a Java or Unicode identifier false otherwise
6775	isIdentifierIgnorable	boolean	true if the character is an ignorable control character that may be part of a Java or Unicode identifier false otherwise
6776	toLowerCase	char	the lowercase equivalent of the character if any otherwise the character itself
6777	toLowerCase	int	the lowercase equivalent of the character Unicode code point if any otherwise the character itself
6778	toUpperCase	char	the uppercase equivalent of the character if any otherwise the character itself
6779	toUpperCase	int	the uppercase equivalent of the character if any otherwise the character itself
6780	toTitleCase	char	the titlecase equivalent of the character if any otherwise the character itself
6781	toTitleCase	int	the titlecase equivalent of the character if any otherwise the character itself
6782	digit	int	the numeric value represented by the character in the specified radix
6783	digit	int	the numeric value represented by the character in the specified radix
6784	getNumericValue	int	the numeric value of the character as a nonnegative int value if the character has a numeric value that is not a nonnegative integer if the character has no numeric value
6785	getNumericValue	int	the numeric value of the character as a nonnegative int value if the character has a numeric value that is not a nonnegative integer if the character has no numeric value
6786	isSpace	boolean	true if the character is ISOLATIN white space false otherwise
6787	isSpaceChar	boolean	true if the character is a space character false otherwise
6788	isSpaceChar	boolean	true if the character is a space character false otherwise
6789	isWhitespace	boolean	true if the character is a Java whitespace character false otherwise
6790	isWhitespace	boolean	true if the character is a Java whitespace character false otherwise
6791	isISOControl	boolean	true if the character is an ISO control character false otherwise
6792	isISOControl	boolean	true if the character is an ISO control character false otherwise
6793	getType	int	a value of type int representing the character's general category
6794	getType	int	a value of type int representing the character's general category
6795	forDigit	char	the char representation of the specified digit in the specified radix
6796	getDirectionality	byte	the directionality property of the char value
6797	getDirectionality	byte	the directionality property of the character
6798	isMirrored	boolean	true if the char is mirrored false if the char is not mirrored or is not defined
6799	isMirrored	boolean	true if the character is mirrored false if the character is not mirrored or is not defined
6800	compareTo	int	the value if the argument Character is equal to this Character a value less than if this Character is numerically less than the Character argument and a value greater than if this Character is numerically greater than the Character argument unsigned comparison
6801	toUpperCaseEx	int	either the uppercase equivalent of the character if any or an error flag Character
6802	toUpperCaseCharArray	char	a char with the uppercased character
6803	reverseBytes	char	the value obtained by reversing or equivalently swapping the bytes in the specified char value
6807	of	Character.UnicodeBlock	The UnicodeBlock instance representing the Unicode block of which this character is a member or null if the character is not a member of any Unicode block
6808	of	Character.UnicodeBlock	The UnicodeBlock instance representing the Unicode block of which this character is a member or null if the character is not a member of any Unicode block
6809	forName	Character.UnicodeBlock	The UnicodeBlock instance identified by blockName
6813	of	Character.UnicodeBlock	The UnicodeBlock instance representing the Unicode block of which this character is a member or null if the character is not a member of any Unicode block
6814	of	Character.UnicodeBlock	The UnicodeBlock instance representing the Unicode block of which this character is a member or null if the character is not a member of any Unicode block
6815	forName	Character.UnicodeBlock	The UnicodeBlock instance identified by blockName
6819	of	Character.UnicodeBlock	The UnicodeBlock instance representing the Unicode block of which this character is a member or null if the character is not a member of any Unicode block
6820	of	Character.UnicodeBlock	The UnicodeBlock instance representing the Unicode block of which this character is a member or null if the character is not a member of any Unicode block
6821	forName	Character.UnicodeBlock	The UnicodeBlock instance identified by blockName
6828	toString	String	a string representation of the argument
6829	toHexString	String	a hex string representation of the argument
6830	valueOf	Float	a code Float object holding the value represented by the code String argument
6831	valueOf	Float	a code Float instance representing code f
6832	parseFloat	float	the code float value represented by the string argument
6833	isNaN	boolean	code true if the argument is NaN code false otherwise
6834	isInfinite	boolean	code true if the argument is positive infinity or negative infinity code false otherwise
6835	isNaN	boolean	code true if the value represented by this object is NaN code false otherwise
6836	isInfinite	boolean	code true if the value represented by this object is positive infinity or negative infinity code false otherwise
6837	toString	String	a code String representation of this object
6838	byteValue	byte	the code float value represented by this object converted to type code byte
6839	shortValue	short	the code float value represented by this object converted to type code short
6840	intValue	int	the code float value represented by this object converted to type code int
6841	longValue	long	the code float value represented by this object converted to type code long
6842	floatValue	float	the code float value represented by this object
6843	doubleValue	double	the code float value represented by this object is converted to type code double and the result of the conversion is returned
6844	hashCode	int	a hash code value for this object
6845	equals	boolean	code true if the objects are the same code false otherwise
6846	floatToIntBits	int	the bits that represent the floatingpoint number
6847	floatToRawIntBits	int	the bits that represent the floatingpoint number
6848	intBitsToFloat	float	the code float floatingpoint value with the same bit pattern
6849	compareTo	int	the value code if code anotherFloat is numerically equal to this code Float a value less than code if this code Float is numerically less than code anotherFloat and a value greater than code if this code Float is numerically greater than code anotherFloat
6850	compare	int	the value code if code f is numerically equal to code f a value less than code if code f is numerically less than code f and a value greater than code if code f is numerically greater than code f
6851	typeName	String	the fully qualified name of the unavailable type
6852	getException	Throwable	the saved throwable object of this ExceptionInInitializerError or null if this ExceptionInInitializerError has no saved throwable object
6853	getCause	Throwable	the cause of this error or null if the cause is nonexistent or unknown
6854	invoke	Object	the value to return from the method invocation on the proxy instance
6855	getBounds	Type	an array of code Types representing the upper bounds of this type variable
6856	getGenericDeclaration	GenericDeclaration	the generic declaration declared for this type variable
6857	getName	String	the name of this type variable as it appears in the source code
6860	isAccessible	boolean	the value of the object's code accessible flag
6865	getTargetException	Throwable	the thrown target exception cause of this exception
6866	getCause	Throwable	the cause of this exception
6867	getDeclaringClass	Class	an object representing the declaring class of the underlying member
6868	getName	String	the simple name of the underlying member
6869	getModifiers	int	the Java language modifiers for the underlying member
6870	isSynthetic	boolean	true if and only if this member was introduced by the compiler
6871	getGenericComponentType	Type	a code Type object representing the component type of this array
6872	getActualTypeArguments	Type	an array of code Type objects representing the actual type arguments to this type
6873	getRawType	Type	the code Type object representing the class or interface that declared this type
6874	getOwnerType	Type	a code Type object representing the type that this type is a member of
6875	getUndeclaredThrowable	Throwable	the undeclared checked exception that was thrown
6876	getCause	Throwable	the cause of this exception
6881	isEnumConstant	boolean	code true if and only if this field represents an element of an enumerated type
6882	isSynthetic	boolean	true if and only if this field is a synthetic field as defined by the Java Language Specification
6883	getType	Class	a code Class object identifying the declared type of the field represented by this object
6884	getGenericType	Type	a code Type object that represents the declared type for the field represented by this code Field object
6888	toGenericString	String	a string describing this code Field including its generic type
6889	get	Object	the value of the represented field in object code obj primitive values are wrapped in an appropriate object before being returned
6890	getBoolean	boolean	the value of the code boolean field
6891	getByte	byte	the value of the code byte field
6892	getChar	char	the value of the field converted to type code char
6893	getShort	short	the value of the field converted to type code short
6894	getInt	int	the value of the field converted to type code int
6895	getLong	long	the value of the field converted to type code long
6896	getFloat	float	the value of the field converted to type code float
6897	getDouble	double	the value of the field converted to type code double
6909	getUpperBounds	Type	an array of Types representing the upper bounds of this type variable
6910	getLowerBounds	Type	an array of Types representing the lower bounds of this type variable
6911	getTypeParameters	TypeVariable	an array of code TypeVariable objects that represent the type variables declared by this generic declaration
6912	isAnnotationPresent	boolean	true if an annotation for the specified annotation type is present on this element else false
6913	getAnnotation	Annotation	this element's annotation for the specified annotation type if present on this element else null
6914	getAnnotations	Annotation	all annotations present on this element
6915	getDeclaredAnnotations	Annotation	All annotations directly present on this element
6916	newInstance	Object	the new array
6917	newInstance	Object	the new array
6918	getLength	int	the length of the array
6919	get	Object	the possibly wrapped value of the indexed component in the specified array
6920	getBoolean	boolean	the value of the indexed component in the specified array
6921	getByte	byte	the value of the indexed component in the specified array
6922	getChar	char	the value of the indexed component in the specified array
6923	getShort	short	the value of the indexed component in the specified array
6924	getInt	int	the value of the indexed component in the specified array
6925	getLong	long	the value of the indexed component in the specified array
6926	getFloat	float	the value of the indexed component in the specified array
6927	getDouble	double	the value of the indexed component in the specified array
6941	getTypeParameters	TypeVariable	an array of code TypeVariable objects that represent the type variables declared by this generic declaration
6942	getParameterTypes	Class	the parameter types for the constructor this object represents
6943	getGenericParameterTypes	Type	an array of code Types that represent the formal parameter types of the underlying method in declaration order
6944	getExceptionTypes	Class	the exception types declared as being thrown by the constructor this object represents
6945	getGenericExceptionTypes	Type	an array of Types that represent the exception types thrown by the underlying method
6949	toGenericString	String	a string describing this code Constructor include type parameters
6950	newInstance	Object	a new object created by calling the constructor this object represents
6951	isVarArgs	boolean	code true if an only if this constructor was declared to take a variable number of arguments
6952	isSynthetic	boolean	true if and only if this constructor is a synthetic constructor as defined by the Java Language Specification
6955	getParameterAnnotations	Annotation	an array of arrays that represent the annotations on the formal parameters in declaration order of the method represented by this Constructor object
6956	getProxyClass	Class	a proxy class that is defined in the specified class loader and that implements the specified interfaces
6957	newProxyInstance	Object	a proxy instance with the specified invocation handler of a proxy class that is defined by the specified class loader and that implements the specified interfaces
6958	isProxyClass	boolean	code true if the class is a proxy class and code false otherwise
6959	getInvocationHandler	InvocationHandler	the invocation handler for the proxy instance
6964	getTypeParameters	TypeVariable	an array of code TypeVariable objects that represent the type variables declared by this generic declaration
6965	getReturnType	Class	the return type for the method this object represents
6966	getGenericReturnType	Type	a code Type object that represents the formal return type of the underlying method
6967	getParameterTypes	Class	the parameter types for the method this object represents
6968	getGenericParameterTypes	Type	an array of Types that represent the formal parameter types of the underlying method in declaration order
6969	getExceptionTypes	Class	the exception types declared as being thrown by the method this object represents
6970	getGenericExceptionTypes	Type	an array of Types that represent the exception types thrown by the underlying method
6974	toGenericString	String	a string describing this code Method include type parameters
6975	invoke	Object	the result of dispatching the method represented by this object on code obj with parameters code args
6976	isBridge	boolean	true if and only if this method is a bridge method as defined by the Java Language Specification
6977	isVarArgs	boolean	code true if an only if this method was declared to take a variable number of arguments
6978	isSynthetic	boolean	true if and only if this method is a synthetic method as defined by the Java Language Specification
6981	getDefaultValue	Object	the default value for the annotation member represented by this code Method instance
6982	getParameterAnnotations	Annotation	an array of arrays that represent the annotations on the formal parameters in declaration order of the method represented by this Method object
6983	isPublic	boolean	code true if code mod includes the code public modifier code false otherwise
6984	isPrivate	boolean	code true if code mod includes the code private modifier code false otherwise
6985	isProtected	boolean	code true if code mod includes the code protected modifier code false otherwise
6986	isStatic	boolean	code true if code mod includes the code static modifier code false otherwise
6987	isFinal	boolean	code true if code mod includes the code final modifier code false otherwise
6988	isSynchronized	boolean	code true if code mod includes the code synchronized modifier code false otherwise
6989	isVolatile	boolean	code true if code mod includes the code volatile modifier code false otherwise
6990	isTransient	boolean	code true if code mod includes the code transient modifier code false otherwise
6991	isNative	boolean	code true if code mod includes the code native modifier code false otherwise
6992	isInterface	boolean	code true if code mod includes the code interface modifier code false otherwise
6993	isAbstract	boolean	code true if code mod includes the code abstract modifier code false otherwise
6994	isStrict	boolean	code true if code mod includes the code strictfp modifier code false otherwise
6995	toString	String	a string representation of the set of modifiers represented by code mod
6996	toString	String	the string representation of the specified code short
6997	parseShort	short	the code short represented by the string argument in the specified radix
6998	parseShort	short	the code short value represented by the argument in decimal
6999	valueOf	Short	a code Short object holding the value represented by the string argument in the specified radix
7000	valueOf	Short	a code Short object holding the value represented by the string argument
7001	valueOf	Short	a code Short instance representing code s
7002	decode	Short	a code Short object holding the code short value represented by code nm
7009	toString	String	a string representation of the value of this object in basenbsp
7011	equals	boolean	code true if the objects are the same code false otherwise
7012	compareTo	int	the value code if this code Short is equal to the argument code Short a value less than code if this code Short is numerically less than the argument code Short and a value greater than code if this code Short is numerically greater than the argument code Short signed comparison
7013	reverseBytes	short	the value obtained by reversing or equivalently swapping the bytes in the specified code short value
7014	getException	Throwable	the Exception that was raised while loading a class
7015	getCause	Throwable	the cause of this exception
7016	getFileName	String	the name of the file containing the execution point represented by this stack trace element or null if this information is unavailable
7017	getLineNumber	int	the line number of the source line containing the execution point represented by this stack trace element or a negative number if this information is unavailable
7018	getClassName	String	the fully qualified name of the Class containing the execution point represented by this stack trace element
7019	getMethodName	String	the name of the method containing the execution point represented by this stack trace element
7020	isNativeMethod	boolean	true if the method containing the execution point represented by this stack trace element is a native method
7022	equals	boolean	true if the specified object is another StackTraceElement instance representing the same execution point as this instance
7024	toString	String	a string representation of this class object
7025	forName	Class	the code Class object for the class with the specified name
7026	forName	Class	class object representing the desired class
7028	newInstance	Object	a newly allocated instance of the class represented by this object
7029	isInstance	boolean	true if code obj is an instance of this class
7030	isAssignableFrom	boolean	the code boolean value indicating whether objects of the type code cls can be assigned to objects of this class
7031	isInterface	boolean	code true if this object represents an interface code false otherwise
7032	isArray	boolean	code true if this object represents an array class code false otherwise
7033	isPrimitive	boolean	true if and only if this class represents a primitive type
7034	isAnnotation	boolean	code true if this class object represents an annotation type code false otherwise
7035	isSynthetic	boolean	code true if and only if this class is a synthetic class as defined by the Java Language Specification
7036	getName	String	the name of the class or interface represented by this object
7037	getClassLoader	ClassLoader	the class loader that loaded the class or interface represented by this object
7038	getTypeParameters	TypeVariable	an array of code TypeVariable objects that represent the type variables declared by this generic declaration
7039	getSuperclass	Class	the superclass of the class represented by this object
7040	getGenericSuperclass	Type	the superclass of the class represented by this object
7041	getPackage	Package	the package of the class or null if no package information is available from the archive or codebase
7042	getInterfaces	Class	an array of interfaces implemented by this class
7043	getGenericInterfaces	Type	an array of interfaces implemented by this class
7044	getComponentType	Class	the code Class representing the component type of this class if this class is an array
7045	getModifiers	int	the code int representing the modifiers for this class
7046	getSigners	Object	the signers of this class or null if there are no signers
7048	getEnclosingMethod	Method	the immediately enclosing method of the underlying class if that class is a local or anonymous class otherwise code null
7049	getEnclosingConstructor	Constructor	the immediately enclosing constructor of the underlying class if that class is a local or anonymous class otherwise code null
7050	getDeclaringClass	Class	the declaring class for this class
7051	getEnclosingClass	Class	the immediately enclosing class of the underlying class
7052	getSimpleName	String	the simple name of the underlying class
7054	getCanonicalName	String	the canonical name of the underlying class if it exists and code null otherwise
7055	isAnonymousClass	boolean	code true if and only if this class is an anonymous class
7056	isLocalClass	boolean	code true if and only if this class is a local class
7057	isMemberClass	boolean	code true if and only if this class is a member class
7060	getClasses	Class	the array of code Class objects representing the public members of this class
7061	getFields	Field	the array of code Field objects representing the public fields
7062	getMethods	Method	the array of code Method objects representing the public methods of this class
7063	getConstructors	Constructor	the array of code Constructor objects representing the public constructors of this class
7064	getField	Field	the code Field object of this class specified by code name
7065	getMethod	Method	the code Method object that matches the specified code name and code parameterTypes
7066	getConstructor	Constructor	the code Constructor object of the public constructor that matches the specified code parameterTypes
7067	getDeclaredClasses	Class	the array of code Class objects representing all the declared members of this class
7068	getDeclaredFields	Field	the array of code Field objects representing all the declared fields of this class
7069	getDeclaredMethods	Method	the array of code Method objects representing all the declared methods of this class
7070	getDeclaredConstructors	Constructor	the array of code Constructor objects representing all the declared constructors of this class
7071	getDeclaredField	Field	the code Field object for the specified field in this class
7072	getDeclaredMethod	Method	the code Method object for the method of this class matching the specified name and parameters
7073	getDeclaredConstructor	Constructor	The code Constructor object for the constructor with the specified parameter list
7074	getResourceAsStream	InputStream	A link java
7075	getResource	URL	A link java
7076	getProtectionDomain	ProtectionDomain	the ProtectionDomain of this class
7080	desiredAssertionStatus	boolean	the desired assertion status of the specified class
7081	isEnum	boolean	true if and only if this class was declared as an enum in the source code
7082	getEnumConstants	Object	an array containing the values comprising the enum class represented by this Class object in the order they're declared or null if this Class object does not represent an enum type
7085	cast	Object	the object after casting or null if obj is null
7086	asSubclass	Class	this code Class object cast to represent a subclass of the specified class object
7091	intValue	int	the numeric value represented by this object after conversion to type int
7092	longValue	long	the numeric value represented by this object after conversion to type long
7093	floatValue	float	the numeric value represented by this object after conversion to type float
7094	doubleValue	double	the numeric value represented by this object after conversion to type double
7095	byteValue	byte	the numeric value represented by this object after conversion to type byte
7096	shortValue	short	the numeric value represented by this object after conversion to type short
7097	getRuntime	Runtime	the Runtime object associated with the current Java application
7100	removeShutdownHook	boolean	true if the specified hook had previously been registered and was successfully deregistered false otherwise
7103	exec	Process	A new link Process object for managing the subprocess
7104	exec	Process	A new link Process object for managing the subprocess
7105	exec	Process	A new link Process object for managing the subprocess
7106	exec	Process	A new link Process object for managing the subprocess
7107	exec	Process	A new link Process object for managing the subprocess
7108	exec	Process	A new link Process object for managing the subprocess
7109	availableProcessors	int	the maximum number of processors available to the virtual machine never smaller than one
7110	freeMemory	long	an approximation to the total amount of memory currently available for future allocated objects measured in bytes
7111	totalMemory	long	the total amount of memory currently available for current and future objects measured in bytes
7112	maxMemory	long	the maximum amount of memory that the virtual machine will attempt to use measured in bytes
7119	getLocalizedInputStream	InputStream	a localized input stream
7120	getLocalizedOutputStream	OutputStream	a localized output stream
7121	currentThread	Thread	the currently executing thread
7126	clone	Object	a clone if the class of this object is code Cloneable
7134	interrupted	boolean	true if the current thread has been interrupted false otherwise
7135	isInterrupted	boolean	true if this thread has been interrupted false otherwise
7138	isAlive	boolean	true if this thread is alive false otherwise
7142	getPriority	int	this thread's priority
7144	getName	String	this thread's name
7145	getThreadGroup	ThreadGroup	this thread's thread group
7146	activeCount	int	the number of active threads in the current thread's thread group
7147	enumerate	int	the number of threads put into the array
7148	countStackFrames	int	the number of stack frames in this thread
7154	isDaemon	boolean	true if this thread is a daemon thread false otherwise
7156	toString	String	a string representation of this thread
7157	getContextClassLoader	ClassLoader	the context ClassLoader for this Thread
7159	holdsLock	boolean	true if the current thread holds the monitor lock on the specified object
7160	getStackTrace	StackTraceElement	an array of StackTraceElement each represents one stack frame
7161	getAllStackTraces	Map	a Map from Thread to an array of StackTraceElement that represents the stack trace of the corresponding thread
7164	getId	long	this thread's ID
7165	getState	Thread.State	this thread's state
7174	length	int	the number of chars in this sequence
7175	charAt	char	the specified char value
7176	subSequence	CharSequence	the specified subsequence
7177	toString	String	a string consisting of exactly this sequence of characters
7178	compileClass	boolean	code true if the compilation succeeded code false if the compilation failed or no compiler is available
7179	compileClasses	boolean	code true if the compilation succeeded code false if the compilation failed or no compiler is available
7180	command	Object	A compilerspecific value or code null if no compiler is available
