ArrayAccess offset Set $offset	der offset-punkt dem ein wert zugewiesen werden soll
ArrayAccess offset Set $value	der zuzuweisende wert
ArrayAccess void offset Set mixed $offset mixed $value	zuweisen eines wertes an angegebenen offset
ArrayAccess offset Unset $offset	der zu löschende offset-punkt
ArrayAccess void offset Unset mixed $offset	l&ouml;schen eines offsets
DateInterval create From Date String $time	ein datum mit relativen teilen
DateInterval DateInterval create From Date String	gibt ein neues dateinterval exemplar zurück
DateInterval DateInterval create From Date String string $time	bildet ein dateinterval aus relativen teilen des strings
Directory string read resource $dir_handle	liest einen eintrag vom verzeichnis-handle
Directory void rewind resource $dir_handle	setzt das verzeichnis-handle zur&uuml;ck
EventBuffer write $howmuch	die maximale anzahl der zu schreibenen bytes
EventBuffer write $fd	socket-ressource stream oder numerischer datei-deskriptor normalerweise verbunden mit einem socket
EventBuffer int write	gibt die anzahl der geschriebenen bytes oder false bei einem fehler zurück
EventBuffer int write mixed $fd int $howmuch	schreibt den inhalt des puffers in eine datei oder ein socket
EventBufferEvent write $data	die zum zugrundeliegenden puffer hinzuzufügenden daten
EventBufferEvent bool write	gibt true bei erfolg sonst false zurück
EventBufferEvent bool write string $data	f&uuml;gt daten zum ausgabepuffer eines pufferereignises hinzu
Exception mixed get Code	exception selbst gibt den fehlercode als integer zurück
Exception mixed get Code	gibt die fehlernummer der exception zur&uuml;ck
Exception string get File	gibt den namen der datei zurück in der die exception ausgelöst wurde
Exception string get File	gibt den namen der datei zur&uuml;ck in der die exception aufgetreten ist
Exception int get Line	gibt die zeile zurück in der die exception ausgelöst wurde
Exception int get Line	gibt die zeile zur&uuml;ck in der die exception auftrat
Exception Exception get Previous	gibt die vorhergehende exception zurück falls vorhanden anderenfalls null
Exception Exception get Previous	gibt die vorhergehende exception zur&uuml;ck
Exception array get Trace	gibt den stacktrace der exception als array zurück
Exception array get Trace	gibt den stacktrace zur&uuml;ck
Exception string get Trace As String	gibt den stacktrace als string zurück
Exception string get Trace As String	gibt den stacktrace als string zur&uuml;ck
Exception string to String	gibt die string repräsentation der exception zurück
Exception string to String	stringrepr&auml;sentation der exception
function abs $number	der zu bearbeitende wert
function number abs	der betrag des wertes number
function number abs mixed $number	absolutwert bzw
function acos $arg	der zu verarbeitende wert
function float acos	der arkuskosinus von arg in bogenmaß
function float acos float $arg	arkuskosinus
function acosh $arg	der zu verarbeitende wert
function float acosh	der areakosinus hyperbolikus von arg
function float acosh float $arg	areakosinus hyperbolikus
function addcslashes $str	die zu escapende zeichenkette
function addcslashes $charlist	eine liste der zu escapenden zeichen
function string addcslashes	gibt die maskierte zeichenkette zurück
function string addcslashes string $str string $charlist	stellt bestimmten zeichen eines strings ein \ voran wie in c
function addslashes $str	die zu maskierende zeichenkette
function string addslashes	gibt die maskierte zeichenkette zurück
function string addslashes string $str	stellt bestimmten zeichen eines strings ein \ voran
function bool apache child terminate	gibt true zurück wenn php als modul unter apache 1 läuft die apacheversion nicht multithreaded läuft und die php-direktive child_terminate eingeschaltet ist diese ist standardmäßig ausgeschaltet
function bool apache child terminate	beendet einen apacheprozess nach der anfrage
function apache getenv $variable	die apache-umgebungsvariable
function apache getenv $walk_to_top	legt fest ob die geholte toplevel-variable allen apache-layern verfügbar gemacht werden soll
function string apache getenv	der wert der apache-umgebungsvariablen im erfolgsfall; im fehlerfall wird false zurückgegeben
function string apache getenv string $variable bool $walk_to_top	liefert eine apache-subprocess_env-variable
function apache note $note_value	der wert der note
function apache note $note_name	der name der note
function string apache note	wenn die funktion mit einem argument aufgerufen wird gibt sie den aktuellen wert der note note_name zurück
function string apache note string $note_name string $note_value	setzt und liest apache request notes
function array apache request headers	ein assoziatives array aller http-header der aktuellen anfrage im fehlerfall wird false zurückgegeben
function array apache request headers	liefert alle http-requestheader
function bool apache reset timeout	gibt bei erfolg true zurück
function bool apache reset timeout	setzt den apache write-time zur&uuml;ck
function array apache response headers	ein array aller apache-responseheader im erfolgsfall
function array apache response headers	liefert alle http-responseheader
function apache setenv $variable	die neu zu setzende umgebungsvariable
function apache setenv $value	der neue wert von variable
function apache setenv $walk_to_top	legt fest ob die gesetzte toplevel-variable für alle apachelayer verfügbar gemacht werden soll
function bool apache setenv	gibt bei erfolg true zurück
function bool apache setenv string $variable string $value bool $walk_to_top	setzt eine apache-subprocess_env-variable
function apc compile file $filename	absoluter oder relativer pfad zu einer php datei die kompiliert und im bytecode cache abgelegt werden soll
function mixed apc compile file	gibt bei erfolg true zurück
function mixed apc compile file string $filename bool $atomic	speichert eine datei im bytecode cache unter umgehung aller filter
function array change key case $array	das eingabe-array
function array change key case $case	entweder case_upper oder case_lower standard
function array array change key case	gibt ein array zurück dessen schlüssel in klein- oder großbuchstaben umgewandelt wurden oder false wenn array kein array ist
function array array change key case array $array int $case	&auml;ndert die gro&szlig;- oder kleinschreibung aller schl&uuml;ssel in einem array
function array combine $keys	array mit den zu verwendenden schlüsseln
function array combine $values	array mit den zu verwendenden werten
function array array combine	gibt das kombinierte array oder false zurück wenn die anzahl von elementen nicht in beiden arrays identisch ist
function array array combine array $keys array $values	erzeugt ein array indem es ein array f&uuml;r die schl&uuml;ssel und ein anderes f&uuml;r die werte verwendet
function array diff assoc $array2	das array mit dem verglichen werden soll
function array diff assoc	weitere arrays mit denen vergleichen werden soll
function array diff assoc $array1	das array das verglichen werden soll
function array array diff assoc	gibt ein array zurück das alle werte aus array1 enthält die in keinem der anderen arrays vorhanden ist
function array array diff assoc array $array1 array $array2	berechnet den unterschied zwischen arrays mit zus&auml;tzlicher indexpr&uuml;fung
function array diff key $array2	das array mit dem verglichen werden soll
function array diff key	weitere arrays mit denen verglichen werden soll
function array diff key $array1	das array das verglichen werden soll
function array array diff key	gibt ein array mit allen einträgen von array1 zurück deren schlüssel in keinem der anderen arrays vorhanden sind
function array array diff key array $array1 array $array2	berechnet den unterschied zwischen arrays indem es die schl&uuml;ssel vergleicht
function array diff uassoc	weitere arrays die damit verglichen werden
function array diff uassoc $array1	das array für den vergleich
function array diff uassoc $key_compare_func	die vergleichsfunktion muss einen integer kleiner als gleich oder größer als null zurückgeben wenn das erste argument respektive kleiner gleich oder größer als das zweite ist
function array diff uassoc $array2	das array das damit verglichen wird
function array array diff uassoc	gibt ein array zurück welches alle werte aus array1 enthält die in keinem der anderen arrays enthalten sind
function array array diff uassoc array $array1 array $array2 callable $key_compare_func	berechnet den unterschied von arrays mit zus&auml;tzlicher indexpr&uuml;fung welche durch eine benutzerdefinierte callback-funktion vorgenommen wird
function array diff ukey $array2	das array mit dem verglichen werden soll
function array diff ukey	weitere arrays mit denen verglichen werden soll
function array diff ukey $key_compare_func	die vergleichsfunktion muss einen integer kleiner als gleich oder größer als null zurückgeben wenn das erste argument respektive kleiner gleich oder größer als das zweite ist
function array diff ukey $array1	das array das verglichen werden soll
function array array diff ukey	gibt ein array mit allen einträgen von array1 zurück die in keinem der anderen arrays vorhanden sind
function array array diff ukey array $array1 array $array2 callable $key_compare_func	berechnet den unterschied zwischen arrays mittels einer callbackfunktion f&uuml;r den vergleich der schl&uuml;ssel
function array fill keys $value	der wert der zum befüllen des arrays verwendet wird
function array fill keys $keys	ein array mit den werten die als schlüssel verwendet werden
function array array fill keys	gibt das befüllte array zurück
function array array fill keys array $keys mixed $value	bef&uuml;llt ein array mit werten mit den &uuml;bergebenen schl&uuml;sseln
function array filter $flag	flag welches bestimmt welche parameter an callback gesendet werden: array_filter_use_key - nur der schlüssel wird als einziger parameter an callback gesendet statt des werte
function array filter $array	das array über das iteriert werden soll
function array filter $callback	die zu verwendende callbackfunktion falls die funktion callback nicht angegeben wurde werden alle einträge aus array entfernt die false sind
function array array filter	gibt das gefilterte array zurück
function array array filter array $array callable $callback int $flag	filtert elemente eines arrays mittels einer callback-funktion
function array flip $array	ein array mit schlüssel / wertpaaren die vertauscht werden sollen
function array array flip	gibt im erfolgsfall das vertauschte array zurück und im fehlerfall null
function array array flip array $array	vertauscht alle schl&uuml;ssel mit ihren zugeh&ouml;rigen werten in einem array
function array intersect key $array2	ein array gegen welches die schlüssel geprüft werden
function array intersect key	eine variable liste zu vergleichender arrays
function array intersect key $array1	das array mit den hauptschlüsseln auf die geprüft werden soll
function array array intersect key	gibt ein assoziatives array zurück welches alle einträge von array1 enthält deren schlüssel in allen weiteren arrays vorhanden sind
function array array intersect key array $array1 array $array2	ermittelt die schnittmenge von arrays indem es die schl&uuml;ssel vergleicht
function array intersect uassoc $array2	erstes array gegen das die schlüssel verglichen werden sollen
function array intersect uassoc $key_compare_func	die vergleichsfunktion muss einen integer kleiner als gleich oder größer als null zurückgeben wenn das erste argument respektive kleiner gleich oder größer als das zweite ist
function array intersect uassoc $array1	eingabe-array für den vergleich der arrays
function array intersect uassoc	variable liste von array-argumenten gegen die die werte verglichen werden sollen
function array array intersect uassoc	gibt alle werte von array1 zurück deren werte in allen argumenten existieren
function array array intersect uassoc array $array1 array $array2 callable $key_compare_func	ermittelt die schnittmenge von arrays mit indexpr&uuml;fung; vergleicht indizes mit einer callbackfunktion
function array intersect ukey $array2	erstes array gegen das die schlüssel verglichen werden sollen
function array intersect ukey $key_compare_func	die vergleichsfunktion muss einen integer kleiner als gleich oder größer als null zurückgeben wenn das erste argument respektive kleiner gleich oder größer als das zweite ist
function array intersect ukey	variable liste von array-argumenten gegen die die schlüssel verglichen werden sollen
function array intersect ukey $array1	eingabe-array für den vergleich der arrays
function array array intersect ukey	gibt alle werte von array1 zurück deren schlüssel in allen argumenten existieren
function array array intersect ukey array $array1 array $array2 callable $key_compare_func	ermittelt die schnittmenge zweier arrays mittels eines durch eine callbackfunktion durchgef&uuml;hrten schl&uuml;sselvergleiches
function array intersect $array2	ein array mit dessen werten verglichen wird
function array intersect	eine variable liste von arrays mit denen verglichen wird
function array intersect $array1	das array mit den hauptwerten auf die überprüft werden soll
function array array intersect	gibt ein array mit allen werten von array1 zurück die auch in allen anderen argumenten enthalten sind
function array array intersect array $array1 array $array2	ermittelt die schnittmenge von arrays
function array key exists $array	ein array mit den zu prüfenden schlüsseln
function array key exists $key	der zu prüfende wert
function bool array key exists	gibt bei erfolg true zurück
function bool array key exists mixed $key array $array	pr&uuml;ft ob ein schl&uuml;ssel in einem array existiert
function array map $array1	ein array auf das die callback -funktion angewendet werden soll
function array map $callback	callback-funktion die für jedes element in jedem array aufgerufen werden soll
function array map	variable liste von array-argumenten auf die die callback -funktion angewendet werden soll
function array array map	gibt ein array zurück dass alle elemente von array1 enthält nachdem die callback -funktion auf jedes element angewendet wurde
function array array map callable $callback array $array1	wendet eine callback-funktion auf die elemente von arrays an
function array merge recursive $array1	das startarray für das zusammenführen
function array merge recursive	variable liste der arrays die rekursiv zusammengeführt werden sollen
function array array merge recursive	ein array mit werten die aus dem zusammenführen der argumente resultieren
function array array merge recursive array $array1	f&uuml;hrt ein oder mehrere arrays rekursiv zusammen
function array merge	variable liste von zusammenzufügenden arrays
function array merge $array1	erstes array zum zusammenfügen
function array array merge	gibt das resultierende array zurück
function array array merge array $array1	f&uuml;hrt zwei oder mehr arrays zusammen
function array multisort $array1_sort_order	die reihenfolge die verwendet wird um das vorangehende array argument zu sortieren
function array multisort	weitere arrays optional gefolgt von sortierreihenfolge und -flags
function array multisort $array1_sort_flags	sortieroptionen für das vorangehende array argument: sortier-flags: sort_regular - vergleiche elemente normal ändere nicht die typen sort_numeric - vergleiche elemente numerisch sort_string - vergleiche elemente als zeichenketten sort_locale_string - vergleiche elemente als zeichenketten basierend auf dem aktuellen gebietschema
function array multisort $array1	ein zu sortierendes array
function bool array multisort	gibt bei erfolg true zurück
function bool array multisort array $array1 mixed $array1_sort_order mixed $array1_sort_flags	sortiert mehrere oder multidimensionale arrays
function array pad $value	der wert mit dem das array array aufgefüllt wird falls es kleiner als size ist
function array pad $array	das array das aufgefüllt werden soll
function array pad $size	die neue größe des arrays
function array array pad	gibt eine kopie von array zurück welche auf die mit size angegebene größe mit dem wert value aufgefüllt wurde
function array array pad array $array int $size mixed $value	f&uuml;llt ein array bis auf die angegebene l&auml;nge mit einem wert auf
function array pop $array	das array aus dem der wert geholt werden soll
function mixed array pop	gibt den letzten wert von array zurück
function mixed array pop array $array	liefert und entfernt das letzte element eines arrays
function array product $array	das array
function number array product	gibt das produkt als integer oder float zurück
function number array product array $array	ermittelt das produkt von werten in einem array
function array push $value1	der erste wert der an das ende von array angefügt werden soll
function array push $array	das eingabe-array
function int array push	liefert die neue anzahl elemente des arrays
function int array push array $array mixed $value1	f&uuml;gt ein oder mehr elemente an das ende eines arrays an
function array rand $array	das eingabe-array
function array rand $num	gibt an wie viele einträge ausgewählt werden sollen
function mixed array rand	wenn nur ein eintrag ausgewählt wird liefert array_rand() den schlüssel eines zufälligen eintrages
function mixed array rand array $array int $num	liefert einen oder mehrere zuf&auml;llige eintr&auml;ge eines arrays
function array reduce $initial	ist der optionale parameter intial angegeben wird er am anfang des prozesses benutzt oder als resultat verwendet sollte das array leer sein
function array reduce $carry	enthält den rückgabewert des vorherigen durchgangs
function array reduce $array	das eingabe-array
function array reduce $item	enthält den wert des aktuellen durchgangs
function array reduce $callback	mixed callback mixed $carry mixed $item carry enthält den rückgabewert des vorherigen durchgangs
function mixed array reduce	gibt den sich ergebenden wert zurück
function mixed array reduce array $array callable $callback mixed $initial	iterative reduktion eines arrays zu einem wert mittels einer callbackfunktion
function array replace $array1	das array in welchem die elemente ersetzt werden
function array replace	weitere arrays aus denen elemente extrahiert werden
function array replace $array2	das array aus dem elemente extrahiert werden
function array array replace	gibt ein array zurück oder null falls ein fehler auftritt
function array array replace array $array1 array $array2	ersetzt elemente von &uuml;bergebenen arrays im ersten array
function array shift $array	das zu verarbeitende array
function mixed array shift	gibt den ersten wert zurück oder null wenn array leer oder kein array ist
function mixed array shift array $array	liefert und entfernt das erste element eines arrays
function array slice $preserve_keys	beachten sie dass array_slice() standardmäßig numerische schlüssel des arrays zurücksetzt und neu vergibt
function array slice $array	das eingabe-array
function array slice $offset	ist offset nicht negativ beginnt die sequenz bei diesem offset in dem array
function array slice $length	ist length angegeben und positiv enthält die sequenz bis zu so viele elemente
function array array slice	gibt den ausschnitt zurück
function array array slice array $array int $offset int $length bool $preserve_keys	extrahiert einen ausschnitt eines arrays
function array splice $offset	ist offset positiv beginnt der zu entfernende bereich bei diesem offset vom anfang des arrays input
function array splice $length	ist length nicht angegeben wird alles von offset bis zum ende des arrays entfernt
function array splice $input	das eingabe-array
function array splice $replacement	ist das array replacement angegeben werden die entfernten elemente durch die elemente dieses arrays ersetzt
function array array splice	gibt ein array zurück das aus den ausgeschnittenen elementen besteht
function array array splice array $input int $offset int $length mixed $replacement	entfernt einen teil eines arrays und ersetzt ihn durch etwas anderes
function array sum $array	das eingabearray
function number array sum	liefert die summe der elemente als integer oder float
function number array sum array $array	liefert die summe der werte in einem array
function array udiff assoc $array2	das zweite array
function array udiff assoc $value_compare_func	die vergleichsfunktion muss einen integer kleiner als gleich oder größer als null zurückgeben wenn das erste argument respektive kleiner gleich oder größer als das zweite ist
function array udiff assoc $array1	das erste array
function array array udiff assoc	array_udiff_assoc() gibt ein array mit allen werten von array1 welche in keinem der anderen argumente enthalten sind zurück
function array array udiff assoc array $array1 array $array2 callable $value_compare_func	ermittelt den unterschied zwischen arrays mit zus&auml;tzlicher indexpr&uuml;fung vergleicht mittels einer callbackfunktion
function array udiff uassoc $array2	das zweite array
function array udiff uassoc $key_compare_func	ebenso wird der vergleich der schlüssel indizes von der benutzerdefinierten callbackfunktion data_compare_func durchgeführt
function array udiff uassoc $value_compare_func	die vergleichsfunktion muss einen integer kleiner als gleich oder größer als null zurückgeben wenn das erste argument respektive kleiner gleich oder größer als das zweite ist
function array udiff uassoc $array1	das erste array
function array array udiff uassoc	gibt ein array mit allen werten von array1 welche in keinem der anderen argumente enthalten sind zurück
function array array udiff uassoc array $array1 array $array2 callable $value_compare_func callable $key_compare_func	ermittelt den unterschied zwischen arrays mit zus&auml;tzlicher indexpr&uuml;fung vergleicht daten und indizes mittels einer callbackfunktion
function array uintersect assoc $array2	das zweite array
function array uintersect assoc $value_compare_func	die vergleichsfunktion muss einen integer kleiner als gleich oder größer als null zurückgeben wenn das erste argument respektive kleiner gleich oder größer als das zweite ist
function array uintersect assoc $array1	das erste array
function array array uintersect assoc	gibt ein array mit allen werten aus array1 zurück die ebenfalls in allen anderen argumenten enthalten sind
function array array uintersect assoc array $array1 array $array2 callable $value_compare_func	ermittelt die schnittmenge von arrays mit zus&auml;tzlicher indexpr&uuml;fung vergleicht daten mittels einer callbackfunktion
function array uintersect uassoc $array2	das zweite array
function array uintersect uassoc $key_compare_func	callbackfunktion für den schlüssel-vergleich
function array uintersect uassoc $value_compare_func	die vergleichsfunktion muss einen integer kleiner als gleich oder größer als null zurückgeben wenn das erste argument respektive kleiner gleich oder größer als das zweite ist
function array uintersect uassoc $array1	das erste array
function array array uintersect uassoc	gibt ein array mit allen werten aus array1 zurück die ebenfalls in allen anderen argumenten enthalten sind
function array array uintersect uassoc array $array1 array $array2 callable $value_compare_func callable $key_compare_func	ermittelt die schnittmenge von arrays mit zus&auml;tzlicher indexpr&uuml;fung vergleicht daten und schl&uuml;ssel mittels separaten callbackfunktionen
function array unique $array	das eingabe-array
function array array unique	gibt das gefilterte array zurück
function array array unique array $array int $sort_flags	entfernt doppelte werte aus einem array
function array unshift $value1	der erste einzufügende wert
function array unshift $array	das eingabe-array
function int array unshift	gibt die neue anzahl der in array enthaltenen elemente zurück
function int array unshift array $array mixed $value1	f&uuml;gt ein oder mehr elemente am anfang eines arrays ein
function array walk recursive $callback	üblicherweise benötigt callback zwei parameter
function array walk recursive $array	das eingabe-array
function array walk recursive $userdata	ist der optionale parameter userdata angegeben so wird er als dritter parameter an die funktion callback übergeben
function bool array walk recursive	gibt bei erfolg true zurück
function bool array walk recursive array $array callable $callback mixed $userdata	wendet eine benutzerfunktion rekursiv auf jedes element eines arrays an
function arsort $sort_flags	sie können das verhalten der sortierung mittels dem optionalen parameter sort_flags beeinflussen für details siehe sort()
function arsort $array	das eingabe-array
function bool arsort	gibt bei erfolg true zurück
function bool arsort array $array int $sort_flags	sortiert ein array in umgekehrter reihenfolge und erh&auml;lt die index-assoziation
function asin $arg	der zu verarbeitende wert
function float asin	der arkussinus von arg in bogenmaß
function float asin float $arg	arkussinus
function asinh $arg	der zu verarbeitende wert
function float asinh	der areasinus hyperbolikus von arg
function float asinh float $arg	areasinus hyperbolikus
function asort $sort_flags	sie können das verhalten der sortierung mittels dem optionalen parameter sort_flags beeinflussen für details siehe sort()
function asort $array	das eingabe-array
function bool asort	gibt bei erfolg true zurück
function bool asort array $array int $sort_flags	sortiert ein array und erh&auml;lt die index-assoziation
function assert options $value	an optional new value for the option
function assert options $what	assert optionen option parameter in
function mixed assert options	assert_options() gibt die einstellung der gesetzten optionen zurück oder liefert den wert false bei auftreten eines fehlers zurück
function mixed assert options int $what mixed $value	setzt oder liefert die assert-optionen
function atan $arg	der zu verarbeitende wert
function float atan	der arkustangens von arg in bogenmaß
function float atan float $arg	arkustangens
function atanh $arg	der zu verarbeitende wert
function float atanh	der areatangens hyperbolikus von arg
function float atanh float $arg	areatangens hyperbolikus
function base64 decode $strict	gibt false zurück wenn der input zeichen enthält die nicht im base64-alphabet enthalten sind
function base64 decode $data	die zu dekodierenden daten
function string base64 decode	gibt die originaldaten zurück
function string base64 decode string $data bool $strict	dekodiertmime base64-kodierte daten
function basename $suffix	wenn der namensteil mit suffix endet wird dieser ebenfalls abgetrennt
function basename $path	ein pfad
function string basename	gibt den abschließenden namen des übergebenen path zurück
function string basename string $path string $suffix	gibt letzten namensteil einer pfadangabe zur&uuml;ck
function bbcode add smiley $smiley	das smiley der ersetzt werden soll
function bbcode add smiley $bbcode_container	bbcode_container ressource die von bbcode_create() zurückgegeben wird
function bbcode add smiley $replace_by	der html code durch das das textsmiley ersetzt werden soll
function bool bbcode add smiley	gibt bei erfolg true zurück
function bool bbcode add smiley resource $bbcode_container string $smiley string $replace_by	f&uuml;gt dem parser ein smiley hinzu
function bbcode destroy $bbcode_container	eine bbcode_container ressource die von bbcode_create() zurückgegeben wird
function bool bbcode destroy	gibt bei erfolg true zurück
function bool bbcode destroy resource $bbcode_container	schliesst eine vorhandene bbcode_container ressource
function bbcode parse $bbcode_container	eine bbcode_container ressource die von bbcode_create() zurückgegeben wurde
function bbcode parse $to_parse	der string der geparst werden soll
function string bbcode parse	gibt den geparsten string zurück im fehlerfall wird false zurückgegeben
function string bbcode parse resource $bbcode_container string $to_parse	parst einen string anhand einem vorgegeben regelsatz
function bcadd $left_operand	der linke operand in stringform
function bcadd $right_operand	der rechte operand in stringform
function bcadd $scale	dieser optionale parameter kann benutzt werden um die anzahl der nachkommastellen im ergebnis festzulegen
function string bcadd	die summe beider operanden in stringform
function string bcadd string $left_operand string $right_operand int $scale	addition zweier zahlen beliebiger genauigkeit
function bccomp $left_operand	der linke operand in stringform
function bccomp $right_operand	der rechte operand in stringform
function bccomp $scale	der optionale scale -parameter wird verwendet um die anzahl der dezimalstellen nach dem komma anzugeben die für den vergleich herangezogen werden sollen
function int bccomp	gibt 0 zurück wenn beide operatoren gleich sind 1 wenn left_operand größer ist als right_operand und andernfalls -1
function int bccomp string $left_operand string $right_operand int $scale	vergleich zweier zahlen beliebiger genauigkeit
function bcmod $left_operand	der linke operand in stringform
function bcmod $modulus	der modulo-wert in stringform
function string bcmod	gibt den modulo als string zurück
function string bcmod string $left_operand string $modulus	modulo zweier zahlen mit beliebiger genauigkeit
function bcmul $left_operand	der linke operand in stringform
function bcmul $right_operand	der rechte operand in stringform
function bcmul $scale	dieser optionale parameter kann benutzt werden um die anzahl der nachkommastellen im ergebnis festzulegen
function string bcmul	gibt das ergebnis als string zurück
function string bcmul string $left_operand string $right_operand int $scale	multiplikation zweier zahlen beliebiger genauigkeit
function bcpowmod $left_operand	der linke operand in stringform
function bcpowmod $right_operand	der rechte operand in stringform
function bcpowmod $scale	dieser optionale parameter kann benutzt werden um die anzahl der nachkommastellen im ergebnis festzulegen
function bcpowmod $modulus	modulo in stringform
function string bcpowmod	gibt das ergebnis als string zurück
function string bcpowmod string $left_operand string $right_operand string $modulus int $scale	potenz einer zahl beliebiger genauigkeit vermindert um ein angegebenen modulo
function bcscale $scale	die genauigkeitsangabe
function bool bcscale	gibt bei erfolg true zurück
function bool bcscale int $scale	setzt die genauigkeit aller bcmath-funktionen
function bcsqrt $operand	der operand in stringform
function bcsqrt $scale	dieser optionale parameter kann benutzt werden um die anzahl der nachkommastellen im ergebnis festzulegen
function string bcsqrt	gibt die quadratwurzel als string zurück
function string bcsqrt string $operand int $scale	ermittelt die quadratwurzel einer zahl beliebiger genauigkeit
function bcsub $left_operand	der linke operand in stringform
function bcsub $right_operand	der rechte operand in stringform
function bcsub $scale	dieser optionale parameter kann benutzt werden um die anzahl der nachkommastellen im ergebnis festzulegen
function string bcsub	das ergebnis der subtraktion in stringform
function string bcsub string $left_operand string $right_operand int $scale	subtrahiert zwei zahlen beliebiger genauigkeit
function bin2hex $str	eine zeichenenkette
function string bin2hex	gibt die hexadezimale darstellung des übergebenen strings zurück
function string bin2hex string $str	wandelt bin&auml;r-daten in ihre hexadezimale entsprechung um
function bind textdomain codeset $domain	die domain
function bind textdomain codeset $codeset	das codeset
function string bind textdomain codeset	bei erfolg ein string
function string bind textdomain codeset string $domain string $codeset	gibt das encoding an in dem texte aus der &uuml;bersetzungstabelle der domain zur&uuml;ckgegeben werden
function bindec $binary_string	der zu konvertierende binärstring
function number bindec	der dezimalwert von binary_string
function number bindec string $binary_string	umwandlung von bin&auml;r zu dezimal
function bindtextdomain $domain	die domain
function bindtextdomain $directory	der verzeichnispfad
function string bindtextdomain	der vollständige pfadname für die aktuell gesetzte domain
function string bindtextdomain string $domain string $directory	setzt den pfad f&uuml;r eine domain
function bzclose $bz	der dateizeiger
function int bzclose	gibt bei erfolg true zurück
function int bzclose resource $bz	schlie&szlig;t eine bzip2-datei
function bzcompress $workfactor	bestimmt wie die funktion sich im schlimmsten fall sich stark wiederholender eingabedaten verhält
function bzcompress $source	die zu komprimierende zeichenkette
function bzcompress $blocksize	spezifiziert die blockgröße während der komprierung und darf zwischen 1 und 9 liegen
function mixed bzcompress	die komprimierte zeichenkette oder die fehlernummer im falle eines fehlers
function mixed bzcompress string $source int $blocksize int $workfactor	komprimiert eine zeichenkette in bzip2-encodierte daten
function bzerrno $bz	zeiger auf eine erfolgreich mittels bzopen() geöffnete datei
function int bzerrno	gibt die fehlernummer als integer zurück
function int bzerrno resource $bz	gibt eine bzip2-fehlernummer zur&uuml;ck
function bzerror $bz	zeiger auf eine erfolgreich mittels bzopen() geöffnete datei
function array bzerror	gibt ein assoziatives array zurück das die fehlernummer im errno -eintrag und die fehlermeldung im errstr -eintrag enthält
function array bzerror resource $bz	gibt die bzip2-fehlernummer und die -fehlermeldung in einem array zur&uuml;ck
function bzread $bz	der dateizeiger
function bzread $length	wenn nichts angegeben ist liest bzread() 1024 unkomprimierte bytes auf einmal
function string bzread	gibt die unkomprimierten daten oder im fehlerfall false zurück
function string bzread resource $bz int $length	bin&auml;r-sicheres lesen aus einer bzip2-datei
function bzwrite $bz	der dateizeiger
function bzwrite $length	wird dieser parameter übergeben stoppt das schreiben nach length unkomprimiert geschriebenen bytes oder wenn alle bytes aus data geschrieben wurden je nachdem welcher fall zuerst auftritt
function bzwrite $data	die zu schreibenden daten
function int bzwrite	gibt die anzahl der geschriebenen bytes bzw
function int bzwrite resource $bz string $data int $length	bin&auml;r-sicheres schreiben einer bzip2-datei
function cal days in month $month	der monat im gewünschten kalender
function cal days in month $calendar	der zu benutzende kalender
function cal days in month $year	das jahr im gewünschten kalender
function int cal days in month	die länge des monats im gewünschten kalender in tagen
function int cal days in month int $calendar int $month int $year	gibt die anzahl der tage eines bestimmten monats in einem bestimmten jahr in einem bestimmten kalender zur&uuml;ck
function cal from jd $jd	julian tag als integer ganzzahl
function cal from jd $calendar	zu konvertierender kalender
function array cal from jd	gibt ein array zurück das kalenderinformationen enthält wie z
function array cal from jd int $jd int $calendar	konvertiert von julian day count zu einem unterst&uuml;tzten kalender
function cal to jd $calendar	der zu konvertierende kalender einer aus cal_gregorian cal_julian cal_jewish oder cal_french
function cal to jd $month	der monat als nummer die gültige begrenzung ist abhängig von calendar
function cal to jd $year	jahr als nummer die gültige begrenzung hängt ab von calendar
function cal to jd $day	der tag als nummer die gültige begrenzung ist abhängig von calendar
function int cal to jd	die julian tag-nummer
function int cal to jd int $calendar int $month int $day int $year	konvertiert von einem unterst&uuml;tzten kalenderformat in julian-format
function chdir $directory	das neue aktuelle verzeichnis
function bool chdir	gibt bei erfolg true zurück
function bool chdir string $directory	wechseln des verzeichnisses
function checkdate $year	die jahresangabe ist eine zahl zwischen 1 und 32767 inklusive
function checkdate $day	der tag ist in der erlaubten anzahl von tagen für den angegebenen monat month
function checkdate $month	die monatsangabe umfasst werte von 1 bis 12 inklusive
function bool checkdate	gibt true zurück wenn das übergebene datum gültig ist andernfalls false
function bool checkdate int $month int $day int $year	pr&uuml;ft ein gregorianisches datum auf g&uuml;ltigkeit
function chr $ascii	der ascii-code
function string chr	gibt das angegebene zeichen zurück
function string chr int $ascii	gibt ein einzelnes zeichen zur&uuml;ck
function class exists $class_name	der klassenname
function class exists $autoload	gibt an ob __autoload genutzt werden soll
function bool class exists	gibt true zurück falls die klasse class_name definiert ist sonst false
function bool class exists string $class_name bool $autoload	checks if the class has been defined
function clearstatcache $filename	leere den realpath und den stat zwischenspeicher nur für einen bestimmten dateinamen; wird nur genutzt wenn clear_realpath_cache true ist
function clearstatcache $clear_realpath_cache	ob der realpath zwischenspeicher geleert werden soll
function void clearstatcache bool $clear_realpath_cache string $filename	l&ouml;scht den status cache
function closedir $dir_handle	das verzeichnis-handle resource das zuvor mit opendir() geöffnet wurde
function void closedir resource $dir_handle	schlie&szlig;en eines verzeichnis-handles
function com load typelib $case_insensitive	der parameter case_insensitive verhält sich wie der gleichnamige parameter der define() -funktion
function com load typelib $typelib_name	typelib_name kann eine der folgenden angaben sein: der dateiname der
function bool com load typelib	gibt bei erfolg true zurück
function bool com load typelib string $typelib_name bool $case_insensitive	l&auml;dt eine typelib
function compact $varname1	compact() übernimmt eine variable anzahl von parametern
function array compact	gibt ein array mit allen variablen zurück
function array compact mixed $varname1	erstellt ein array mit variablen und deren werten
function int connection aborted	gibt 1 zurück falls die verbindung zum client beendet wurde und andernfalls 0
function int connection aborted	&uuml;berpr&uuml;ft ob die verbindung zum client beendet wurde
function int connection status	der verbindungsstatus als bitfeld der zusammen mit den connection_xxx -konstanten verwendet werden kann um den verbindungsstatus zu ermitteln
function int connection status	liefert den verbindungsstatus als bitfeld
function convert uuencode $data	die zu kodierenden daten
function string convert uuencode	gibt die uu-kodierten daten zurück
function string convert uuencode string $data	uu-kodiert eine zeichenkette
function copy $source	pfad zu der quelldatei
function copy $context	eine gültige context ressource die mit stream_context_create() erzeugt wurde
function copy $dest	der zielpfad
function bool copy	gibt bei erfolg true zurück
function bool copy string $source string $dest resource $context	kopiert eine datei
function cos $arg	ein winkel in bogenmaß
function float cos	der kosinus des winkels arg
function float cos float $arg	kosinus
function count chars $string	die zu untersuchende zeichenkette
function count chars $mode	siehe rückgabewerte
function mixed count chars	abhängig von mode gibt count_chars() eine der folgenden möglichkeiten zurück: 0 - ein array mit den byte-werten als schlüssel und deren jeweiliger häufigkeit als wert
function mixed count chars string $string int $mode	gibt informationen &uuml;ber die in einem string enthaltenen zeichen zur&uuml;ck
function count $array_or_countable	ein array oder countable objekt
function count $mode	wenn der optionale parameter mode auf count_recursive oder 1 gesetzt ist wird count() rekursiv durch das array zählen
function int count	liefert die anzahl von elementen in array_or_countable
function int count mixed $array_or_countable int $mode	z&auml;hlt alle elemente eines arrays oder etwas in einem objekt
function crack check $password	das überprüfte passwort
function crack check $dictionary	das cracklib-wörterbuch
function bool crack check	gibt true zurück wenn password stark ist
function bool crack check resource $dictionary string $password	f&uuml;hrt eine &uuml;berpr&uuml;fung des &uuml;bergebenen passwortes durch
function crack closedict $dictionary	das zu schließende wörterbuch
function bool crack closedict	gibt bei erfolg true zurück
function bool crack closedict resource $dictionary	schlie&szlig;t ein cracklib-w&ouml;rterbuch
function string crack getlastmessage	die nachricht der letzen passwortüberprüfung oder false wenn bislang keine passwortüberprüfung statt gefunden hat
function string crack getlastmessage	gibt die nachricht der letzten &uuml;berpr&uuml;fung zur&uuml;ck
function ctype alnum $text	der zu prüfende string
function bool ctype alnum	liefert true wenn jedes zeichen in text ein buchstabe oder eine ziffer ist sonst false
function bool ctype alnum string $text	auf alphanumerische zeichen &uuml;berpr&uuml;fen
function ctype alpha $text	der zu prüfende string
function bool ctype alpha	liefert true wenn jedes zeichen in text ein buchstabe ist sonst false
function bool ctype alpha string $text	auf buchstabe n &uuml;berpr&uuml;fen
function ctype cntrl $text	der zu prüfende string
function bool ctype cntrl	liefert true wenn jedes zeichen in text ein steuerzeichen ist sonst false
function bool ctype cntrl string $text	auf steuerzeichen &uuml;berpr&uuml;fen
function ctype digit $text	der zu prüfende string
function bool ctype digit	liefert true wenn jedes zeichen in text eine ziffer ist ansonsten false
function bool ctype digit string $text	auf ziffern &uuml;berpr&uuml;fen
function ctype graph $text	der zu prüfende string
function bool ctype graph	liefert true wenn jedes zeichen in text druckbar ist und eine sichtbare ausgabe produziert keine leerzeichen ansonsten false
function bool ctype graph string $text	auf druckbare zeichen au&szlig;er leerzeichen &uuml;berpr&uuml;fen
function ctype lower $text	der zu prüfende string
function bool ctype lower	liefert true wenn jedes zeichen in text in den aktuellen locale-einstellungen ein kleinbuchstabe ist
function bool ctype lower string $text	auf kleinbuchstaben &uuml;berpr&uuml;fen
function ctype print $text	der zu prüfende string
function bool ctype print	liefert true wenn alle zeichen in text druckbar sind sonst false
function bool ctype print string $text	auf druckbare zeichen &uuml;berpr&uuml;fen
function ctype space $text	der zu prüfende string
function bool ctype space	liefert true wenn jedes zeichen in text ein leerzeichen ist space tab linefeed
function bool ctype space string $text	auf leerzeichen &uuml;berpr&uuml;fen
function ctype xdigit $text	der zu prüfende string
function bool ctype xdigit	liefert true wenn jedes zeichen in text eine hexadezimalziffer ist sonst false
function bool ctype xdigit string $text	auf hexadezimalziffern &uuml;berpr&uuml;fen
function curl close $ch	ein von curl_init() zurückgegebenes curl-handle
function void curl close resource $ch	eine curl-session beenden
function curl copy handle $ch	ein von curl_init() zurückgegebenes curl-handle
function resource curl copy handle	gibt ein neues curl-handle zurück
function resource curl copy handle resource $ch	kopieren eines curl-handles inklusiver aller voreinstellungen
function curl errno $ch	ein von curl_init() zurückgegebenes curl-handle
function int curl errno	gibt die fehlernummer zurück oder 0 null wenn kein fehler aufgetreten ist
function int curl errno resource $ch	gibt die letzte fehlernummer zur&uuml;ck
function curl error $ch	ein von curl_init() zurückgegebenes curl-handle
function string curl error	gibt die fehlermeldung oder falls kein fehler aufgetreten ist den leeren string zurück
function string curl error resource $ch	gibt einen string zur&uuml;ck der den letzten fehler der aktuellen session enth&auml;lt
function curl escape $ch	ein von curl_init() zurückgegebenes curl-handle
function curl escape $str	der zu kodierende string
function string curl escape	gibt den kodierten string zurück
function string curl escape resource $ch string $str	url-kodiert den angegebenen string
function curl exec $ch	ein von curl_init() zurückgegebenes curl-handle
function mixed curl exec	gibt bei erfolg true zurück
function mixed curl exec resource $ch	eine curl-session ausf&uuml;hren
function curl getinfo $ch	ein von curl_init() zurückgegebenes curl-handle
function mixed curl getinfo	wird der parameter opt angegeben wird der entsprechende wert zurückgegeben
function mixed curl getinfo resource $ch int $opt	informationen zu einem bestimmten transfer abfragen
function curl init $url	sofern angegeben wird die option curlopt_url mit dem entsprechenden wert initialisiert
function resource curl init	gibt ein curl-handle im erfolgsfall zurück false im fehlerfall
function resource curl init string $url	eine curl-session initialisieren
function curl multi close $mh	ein von curl_multi_init() zurückgegebenes curl-multihandle
function void curl multi close resource $mh	eine gruppe von curl-handlern schlie&szlig;en
function curl multi info read $mh	ein von curl_multi_init() zurückgegebenes curl-multihandle
function curl multi info read $msgs_in_queue	anzahl der verbleibenden informationen
function array curl multi info read	gibt im erfolgfall ein assoziatives array zurück andernfalls false
function array curl multi info read resource $mh int $msgs_in_queue	informationen &uuml;ber die aktuellen transfers abrufen
function resource curl multi init	gibt im erfolgsfall ein curl-handle zurück andernfalls false
function resource curl multi init	gibt einen curl-multi-handle zur&uuml;ck
function curl multi remove handle $mh	ein von curl_multi_init() zurückgegebenes curl-multihandle
function curl multi remove handle $ch	ein von curl_init() zurückgegebenes curl-handle
function int curl multi remove handle	gibt im erfolgsfall 0 zurück andernfalls einen der curlm_xxx fehler-codes
function int curl multi remove handle resource $mh resource $ch	einen multi-handle von einer menge aus curl-handles entfernen
function curl multi select $mh	ein von curl_multi_init() zurückgegebenes curl-multihandle
function curl multi select $timeout	zeit in sekunden die auf eine antwort gewartet wird
function int curl multi select	gibt bei erfolgreicher ausführung die anzahl der bezeichner in der bezeichner-sammlung zurück
function int curl multi select resource $mh float $timeout	alle sockets abfragen die mit der curl erweiterung assoziiert sind und ausgew&auml;hlt werden k&ouml;nnen
function curl multi strerror $errornum	eine der curlm fehlercode konstanten
function string curl multi strerror	gibt einen fehler-string für eienn gültigen fehlercode zurück andernfalls null
function string curl multi strerror int $errornum	gibt einen den fehler beschreibenden string zur&uuml;ck
function curl setopt $value	der wert für value value sollte ein boolean für die folgenden werte des parameters option sein: option wert für value anmerkungen curlopt_autoreferer true um automatisch den referer: in abfragen zu setzen die einem redirect per location: folgen curlopt_binarytransfer true um die unbearbeiteten daten zurüchzugeben wenn curlopt_returntransfer gesetzt ist
function curl setopt $ch	ein von curl_init() zurückgegebenes curl-handle
function curl setopt $option	die zu setzende curlopt_xxx -option
function bool curl setopt	gibt bei erfolg true zurück
function bool curl setopt resource $ch int $option mixed $value	eine option f&uuml;r einen curl transfer setzen
function array curl version int $age	gibt die curl-version zur&uuml;ck
function current $array	das array
function mixed current	die funktion current() liefert den wert des array elements auf das gerade vom internen zeiger gezeigt wird
function mixed current array $array	liefert das aktuelle element eines arrays
function date $timestamp	der optionale parameter timestamp ist ein unix timestamp als integer oder die aktuelle lokale zeit wenn kein timestamp übergeben wurde
function date $format	das muster des auszugebenden datums- / zeit- string
function string date	gibt eine formatierte datums-zeichenkette zurück
function string date string $format int $timestamp	formatiert ein e angegebene s ortszeit / datum
function dba delete $key	der schlüssel des zu löschenden eintrags
function dba delete $handle	die datenbank-verbindungskennung die von dba_open() oder dba_popen() zurückgegeben wurde
function bool dba delete	gibt bei erfolg true zurück
function bool dba delete string $key resource $handle	l&ouml;scht den zum angegebenen schl&uuml;ssel geh&ouml;rigen dba-eintrag
function dba exists $handle	die datenbank-verbindungskennung die von dba_open() oder dba_popen() zurückgegeben wurde
function dba exists $key	der schlüssel für den die überprüfung durchgeführt wird
function bool dba exists	gibt true zurück falls der schlüssel existiert und andernfalls false
function bool dba exists string $key resource $handle	&uuml;berpr&uuml;ft ob ein angegebener schl&uuml;ssel existiert
function dba fetch $key	der schlüssel durch den die daten bestimmt sind
function dba fetch $handle	die datenbank-verbindungskennung die von dba_open() oder dba_popen() zurückgegeben wurde
function dba fetch $skip	die anzahl der schlüssel-wert-paare die bei cdb-datenbanken ignoriert werden sollen
function string dba fetch	falls das schlüssel / wert-paar gefunden wird wird die zugehörige zeichenkette zurückgegeben andernfalls false
function string dba fetch string $key resource $handle	liest die daten zu einem angegebenen schl&uuml;ssel aus
function dba firstkey $handle	die datenbank-verbindungskennung die von dba_open() oder dba_popen() zurückgegeben wurde
function string dba firstkey	gibt bei erfolg den schlüssel zurück
function string dba firstkey resource $handle	liefert den ersten schl&uuml;ssel
function dba handlers $full_info	schaltet die anzeige der kompletten information im ergebnis ein / aus
function array dba handlers	gibt ein array mit datenbank-handlern zurück
function array dba handlers bool $full_info	listet alle verf&uuml;gbaren handler auf
function dba insert $value	der wert der eingefügt werden soll
function dba insert $handle	die datenbank-verbindungskennung die von dba_open() oder dba_popen() zurückgegeben wurde
function dba insert $key	der schlüssel des einzufügenden eintrags
function bool dba insert	gibt bei erfolg true zurück
function bool dba insert string $key string $value resource $handle	f&uuml;gt einen eintrag ein
function array dba list	ein assoziatives array der form ressource-id = > dateiname
function array dba list	listet alle offenen datenbank-dateien auf
function dba nextkey $handle	die datenbank-verbindungskennung die von dba_open() oder dba_popen() zurückgegeben wurde
function string dba nextkey	gibt bei erfolg den schlüssel zurück
function string dba nextkey resource $handle	liefert den nachfolgenden schl&uuml;ssel
function dba optimize $handle	die datenbank-verbindungskennung die von dba_open() oder dba_popen() zurückgegeben wurde
function bool dba optimize	gibt bei erfolg true zurück
function bool dba optimize resource $handle	optimiert eine datenbank
function dba replace $value	der wert der ersetzt werden soll
function dba replace $key	der schlüssel des zu ersetzenden eintrags
function dba replace $Verbindungskennung	die datenbank-verbindungskennung die von dba_open() oder dba_popen() zurückgegeben wurde
function bool dba replace	gibt bei erfolg true zurück
function bool dba replace string $key string $value resource $handle	ersetzt einen eintrag oder f&uuml;gt ihn ein
function dba sync $handle	die datenbank-verbindungskennung die von dba_open() oder dba_popen() zurückgegeben wurde
function bool dba sync	gibt bei erfolg true zurück
function bool dba sync resource $handle	synchronisiert eine datenbank
function dbase add record $dbase_identifier	die datenbank-verbindungskennung die von dbase_open() oder dbase_create() zurückgegeben wurde
function dbase add record $record	ein indiziertes datenarray
function bool dbase add record	gibt bei erfolg true zurück
function bool dbase add record int $dbase_identifier array $record	h&auml;ngt einen datensatz an eine datenbank an
function dbase close $dbase_identifier	die datenbank-verbindungskennung die von dbase_open() oder dbase_create() zurückgegeben wurde
function bool dbase close	gibt bei erfolg true zurück
function bool dbase close int $dbase_identifier	schlie&szlig;t eine datenbank
function dbase delete record $dbase_identifier	die datenbank-verbindungskennung die von dbase_open() oder dbase_create() zurückgegeben wurde
function dbase delete record $record_number	eine ganzzahl die von 1 bis zur anzahl der datensätze in der datenbank wie von dbase_numrecords() zurückgegeben geht
function bool dbase delete record	gibt bei erfolg true zurück
function bool dbase delete record int $dbase_identifier int $record_number	markiert einen datensatz als gel&ouml;scht
function dbase get header info $dbase_identifier	die datenbank-verbindungskennung die von dbase_open() oder dbase_create() zurückgegeben wurde
function array dbase get header info	ein indiziertes array mit einem eintrag für jedes feld der datenbank
function array dbase get header info int $dbase_identifier	liefert informationen des dateikopfs einer datenbank
function dbase get record with names $dbase_identifier	die datenbank-verbindungskennung die von dbase_open() oder dbase_create() zurückgegeben wurde
function dbase get record with names $record_number	der index des datensatzes
function array dbase get record with names	ein assoziatives array mit dem datensatz
function array dbase get record with names int $dbase_identifier int $record_number	liefert einen datensatz aus einer datenbank als assoziatives array
function dbase get record $dbase_identifier	die datenbank-verbindungskennung die von dbase_open() oder dbase_create() zurückgegeben wurde
function dbase get record $record_number	der index des datensatzes
function array dbase get record	ein indiziertes array mit dem datensatz
function array dbase get record int $dbase_identifier int $record_number	liefert einen datensatz aus einer datenbank als indiziertes array
function dbase numrecords $dbase_identifier	die datenbank-verbindungskennung die von dbase_open() oder dbase_create() zurückgegeben wurde
function int dbase numrecords	die anzahl der datensätze in der datenbank oder false falls ein fehler auftrat
function int dbase numrecords int $dbase_identifier	liefert die anzahl der datens&auml;tze einer datenbank
function dbase open $mode	eine ganzzahl die denen des open() -systemaufrufs entspricht typischerweise bedeutet 0 nur lesen 1 nur schreiben und 2 lesen und schreiben
function dbase open $filename	der name der datenbank
function int dbase open	gibt eine datenbank-verbindungskennung für die geöffnete datenbank zurück oder false falls ein fehler auftrat
function int dbase open string $filename int $mode	&ouml;ffnet eine datenbank
function dbase pack $dbase_identifier	die datenbank-verbindungskennung die von dbase_open() oder dbase_create() zurückgegeben wurde
function bool dbase pack	gibt bei erfolg true zurück
function bool dbase pack int $dbase_identifier	entfernt die als gel&ouml;scht markierten datens&auml;tze aus einer datenbank
function dbase replace record $dbase_identifier	die datenbank-verbindungskennung die von dbase_open() oder dbase_create() zurückgegeben wurde
function dbase replace record $record	ein indiziertes datenarray
function dbase replace record $record_number	eine ganzzahl die von 1 bis zur anzahl der datensätze in der datenbank wie von dbase_numrecords() zurückgegeben geht
function bool dbase replace record	gibt bei erfolg true zurück
function bool dbase replace record int $dbase_identifier array $record int $record_number	ersetzt einen datensatz in einer datenbank
function dbx compare $row_a	erste reihe
function dbx compare $row_b	zweite reihe
function dbx compare $column_key	die verglichene spalte
function int dbx compare	gibt 0 zurück wenn row_a[$column_key] gleich row_b[$column_key] ist
function int dbx compare array $row_a array $row_b string $column_key int $flags	vergleicht zwei reihen f&uuml;r sortierzwecke
function dbx escape string $link_identifier	das dbx-link-objekt das von dbx_connect() zurückgegeben wurde
function dbx escape string $text	der zu maskierende string
function string dbx escape string	gibt den text zurück an dessen notwendigen stellen hochkommata backslashes etc
function string dbx escape string object $link_identifier string $text	maskiert einen string so dass er sicher in einem sql-statement verwendet werden kann
function dbx fetch row $result_identifier	ein resultset das von dbx_query() zurückgegeben wurde
function mixed dbx fetch row	gibt bei erfolg ein objekt zurück das die selben informationen enthält wie eine reihe der dbx_query() -ergebniseigenschaft data sie haben würde
function mixed dbx fetch row object $result_identifier	liest zeilen aus einem abfrageergebnis das das dbx_result_unbuffered-flag gesetzt hat
function dbx sort $user_compare_function	die benutzerdefinierte vergleichsfunktion
function dbx sort $result	ein resultset das von dbx_query() zurückgegeben wurde
function bool dbx sort	gibt bei erfolg true zurück
function bool dbx sort object $result string $user_compare_function	sortiert das ergebnis eines dbx_query mittels einer benutzerdefinierten sortierfunktion
function dcgettext $domain	die domain
function dcgettext $message	die mitteilung
function dcgettext $category	die kategorie
function string dcgettext	bei erfolg ein string
function string dcgettext string $domain string $message int $category	&uuml;berschreibt die gesetzte domain f&uuml;r eine einzelne abfrage
function dcngettext $domain	die domain
function string dcngettext	bei erfolg ein string
function string dcngettext string $domain string $msgid1 string $msgid2 int $n int $category	pluralversion von dcgettext
function debug backtrace $limit	ab php 5
function debug backtrace $options	ab 5
function array debug backtrace	gibt ein assoziatives array zurück
function array debug backtrace int $options int $limit	erzeugt daten zur ablaufverfolgung
function decbin $number	der umzuwandelnde dezimalwert
function string decbin	binärrepresentation von number als string
function string decbin int $number	dezimal zu bin&auml;r konvertierung
function dechex $number	der umzuwandelnde wert da der integer -type von php vorzeichenbehaftet ist aber dechex() nur vorzeichenlose ganzzahlen kovertiert werden negative ganzzahlen behandelt als wären sie vorzeichenlos
function string dechex	die hexadezimale stringdarstellung von number
function string dechex int $number	dezimal zu hexadezimal umwandlung
function decoct $number	der zu konvertierende wert
function string decoct	oktale stringdarstellung von number
function string decoct int $number	dezimal zu oktal umwandlung
function void define syslog variables	initialisiert alle syslog-bezogenen variablen
function defined $name	der name der konstante
function bool defined	wenn die durch name angegebene konstante definiert ist wird true zurückgegeben ansonsten false
function bool defined string $name	pr&uuml;ft ob eine benannte konstante existiert
function deg2rad $number	ein winkel in grad
function float deg2rad	der equivalente wert zu number in bogenmaß
function float deg2rad float $number	rechnet einen winkel von grad in bogenma&szlig; um
function dgettext $domain	die domain
function dgettext $message	die mitteilung
function string dgettext	bei erfolg ein string
function string dgettext string $domain string $message	&uuml;berschreibt die aktuelle domain
function dio close $fd	eine von dio_open() zurückgegebene dateideskriptorresource
function void dio close resource $fd	schlie&szlig;t eine datei
function dio fcntl $cmd	eine der folgenden operationen: f_setlk - setzt oder löscht eine dateisperre
function dio fcntl $fd	ein von dio_open() zurückgegebener dateideskriptor
function mixed dio fcntl	gibt das ergebnis des entsprechenden c-aufrufs zurück
function mixed dio fcntl resource $fd int $cmd mixed $args	modifiziert einen dateideskriptor
function dio seek $fd	der von dio_open() zurückgegebene dateideskriptor
function dio seek $whence	gibt an wie die position pos interpretiert werden soll: seek_set - gibt an dass pos die position vom anfang der datei ist seek_cur - gibt an dass pos die position relativ von der momentanen dateizeigerposition ist
function dio seek $pos	die neue position
function int dio seek resource $fd int $pos int $whence	setzt den dateizeiger
function dio stat $fd	ein von dio_open() zurückgegebener dateideskriptor
function array dio stat resource $fd	liefert statusinformationen &uuml;ber einen dateideskriptor
function dio truncate $offset	der offset in bytes
function dio truncate $fd	ein von dio_open() zurückgegebener dateideskriptor
function bool dio truncate	gibt bei erfolg true zurück
function bool dio truncate resource $fd int $offset	schneidet eine datei ab
function dio write $len	die anzahl der zu schreibenden bytes
function dio write $data	die zu schreibenden daten
function dio write $fd	ein von dio_open() zurückgegebener dateideskriptor
function int dio write	gibt die anzahl der tatsächlich geschriebenen bytes zurück
function int dio write resource $fd string $data int $len	schreibt daten in eine datei
function dir $directory	das zu öffnende verzeichnis
function dir $context	hinweis : die kontext-unterstützung gibt es seit php 5
function Directory dir	gibt eine instanz der directory klasse zurück oder null bei falschen parametern oder false im falle eines anderen fehlers
function Directory dir string $directory resource $context	gibt eine instanz der directory klasse zur&uuml;ck
function dirname $path	ein pfad
function string dirname	gibt den pfad des übergeordneten verzeichnisses zurück
function string dirname string $path	beschreibung
function disk free space $directory	ein verzeichnis des dateisystemes oder der platten-partition
function float disk free space	gibt der die anzahl der freien bytes als gleitkommazahl float zurück
function float disk free space string $directory	gibt verf&uuml;gbaren platz auf dateisystem oder partition zur&uuml;ck
function disk total space $directory	ein verzeichnis des dateisystemes oder der platten-partition
function float disk total space	gibt die gesamtanzahl bytes als gleitkommazahl float zurück
function float disk total space string $directory	gibt die gesamtgr&ouml;&szlig;e eines dateisystemes oder einer partition zur&uuml;ck
function dngettext $domain	die domain
function string dngettext	bei erfolg ein string
function string dngettext string $domain string $msgid1 string $msgid2 int $n	pluralversion von dgettext
function bool eio event loop	eio_event_loop() returns true on success or false on error
function bool eio event loop	polls libeio until all requests proceeded
function void eio init	re- initialize eio
function empty $var	die zu prüfende variable
function bool empty	gibt false zurück wenn var existiert und einen nicht-leeren von 0 verschiedenen wert hat
function bool empty mixed $var	pr&uuml;ft ob eine variable einen wert enth&auml;lt
function end $array	das array
function mixed end	gibt den wert des letzten arrayelements zurück oder false bei einem leeren array
function mixed end array $array	positioniert den internen zeiger eines arrays auf dessen letztes element
function eregi replace $pattern	ein posix-erweiterter regulärer ausdruck
function eregi replace $replacement	wenn pattern eingeklammerte teilzeichenketten enthält darf replacement teilzeichenketten der form \ ziffer enthalten die dann durch die zifferste teilzeichenkette ersetzt werden
function eregi replace $string	die zu durchsuchende zeichenkette
function string eregi replace	zurückgegeben wird die geänderte zeichenkette
function string eregi replace string $pattern string $replacement string $string	ersetzt einen regul&auml;ren ausdr&uuml;ck ohne ber&uuml;cksichtigung von gro&szlig;- / kleinschreibung
function array error get last	gibt ein assoziatives array zurück das den zuletzt aufgetretenen fehler mit den elementen type für die art des fehlers message für die fehlermeldung sowie file und line für den ort an dem der fehler aufgetreten ist beschreibt
function array error get last	liefert den zuletzt aufgetretenen fehler
function error log $message	die fehlermeldung die protokolliert werden soll
function error log $destination	das ziel
function error log $extra_headers	die zusätzlichen kopfzeilen
function error log $message_type	sagt wohin der fehler gehen soll
function bool error log	gibt bei erfolg true zurück
function bool error log string $message int $message_type string $destination string $extra_headers	sendet eine fehlermeldung an die definierten fehlerbehandlungsroutinen
function escapeshellcmd $command	das zu maskierende kommando
function string escapeshellcmd	die maskierte zeichenkette
function string escapeshellcmd string $befehl	maskiert shell-metazeichen
function eval $code	gültiger php-code der ausgewertet werden soll
function mixed eval	eval() gibt null zurück außer wenn im ausgewerteten code return aufgerufen wird dann aber wird der an return übergebene wert zurückgegeben
function mixed eval string $code	wertet eine zeichenkette als php-code aus
function exit $status	falls status eine zeichenkette ist gibt diese funktion beim beenden den status aus
function void exit string $status	gibt eine meldung aus und beendet das aktuelle skript
function exp $arg	der zu verarbeitende exponent
function float exp	e hoch arg
function float exp float $arg	exponentialfunktion
function explode $limit	ist der parameter limit angegeben und positiv enthält das zurückgegebene array maximal limit elemente wobei das letzte element den rest von string beinhaltet
function explode $string	die eingabezeichenkette
function explode $delimiter	die begrenzungszeichenkette
function array explode	gibt ein array von string s zurück die durch aufsplitten des string parameters an begrenzungen durch delimiter erzeugt werden
function array explode string $delimiter string $string int $limit	teilt einen string anhand einer zeichenkette
function expm1 $arg	der zu verarbeitende wert
function float expm1	e hoch arg minus eins
function float expm1 float $arg	exponentialfunktion mit erh&ouml;hter genauigkeit
function extract $EXTR_REFS	extrahiert variablen als referenzen
function extract $prefix	beachten sie dass prefix nur dann nötig ist wenn flags extr_prefix_same extr_prefix_all extr_prefix_invalid or extr_prefix_if_exists ist
function extract $array	ein assoziatives array
function extract $EXTR_OVERWRITE	im falle einer kollision wird die existierende variable überschrieben
function extract $EXTR_SKIP	im falle einer kollision wird die existierende variable nicht überschrieben
function extract $EXTR_PREFIX_SAME	im falle einer kollision wird dem variablennamen prefix vorangestellt
function extract $EXTR_PREFIX_IF_EXISTS	erstellt nur variablennamen mit präfix wenn die version ohne präfix der selben variable in der aktuellen symboltabelle existiert
function extract $EXTR_PREFIX_ALL	allen variablennamen wird prefix vorangestellt
function extract $EXTR_IF_EXISTS	überschreibt die variable nur wenn sie bereits in der aktuellen symboltabelle existiert sonst geschieht nichts
function extract $EXTR_PREFIX_INVALID	nur ungültigen / numerischen variablennamen wird prefix vorangestellt
function extract $flags	die art wie ungültige / numerische schlüssel und kollisionen behandelt werden wird durch flags bestimmt
function int extract	extract() gibt die anzahl erfolgreich in die symboltabelle importierter variablen zurück
function int extract array $array int $flags string $prefix	importiert variablen eines arrays in die aktuelle symboltabelle
function fbsql autocommit $OnOff	wird dieser optionale parameter angegeben wird der autocommit-status geändert
function fbsql autocommit $link_identifier	eine von fbsql_connect() oder fbsql_pconnect() zurückgegebe frontbase-verbindung
function bool fbsql autocommit	gibt den derzeitigen autocommit-status als booleschen wert zurück
function bool fbsql autocommit resource $link_identifier bool $OnOff	aktiviert oder deaktiviert autocommit
function fbsql change user $user	der neue benutzername
function fbsql change user $database	wenn angegeben wird dies zur standardmäßigen oder aktuellen datenbank nachdem der benutzer gewechselt wurde
function fbsql change user $password	das neue benutzerpasswort
function fbsql change user $link_identifier	eine von fbsql_connect() oder fbsql_pconnect() zurückgegebe frontbase-verbindung
function bool fbsql change user	gibt bei erfolg true zurück
function bool fbsql change user string $user string $password string $database resource $link_identifier	wechselt den eingeloggten benutzer der aktiven verbindung
function fbsql commit $link_identifier	eine von fbsql_connect() oder fbsql_pconnect() zurückgegebe frontbase-verbindung
function bool fbsql commit	gibt bei erfolg true zurück
function bool fbsql commit resource $link_identifier	wendet eine transaktion auf die datenbank an
function fbsql connect $password	das passwort für die verbindung
function fbsql connect $username	der benutzername für die verbindung
function fbsql connect $hostname	der server-hostname
function resource fbsql connect	liefert bei erfolg eine positive frontbase-verbindungskennung oder false im fehlerfall
function resource fbsql connect string $hostname string $username string $password	&ouml;ffnet eine verbindung zu einem frontbase-server
function fbsql create db $database_name	der datenbankname als zeichenkette
function fbsql create db $link_identifier	eine von fbsql_connect() oder fbsql_pconnect() zurückgegebe frontbase-verbindung
function bool fbsql create db	gibt bei erfolg true zurück
function bool fbsql create db string $database_name resource $link_identifier string $database_options	erstellt eine frontbase-datenbank
function fbsql data seek $row_number	die datensatznummer
function fbsql data seek $result	ein von fbsql_query() zurückgegebenes erebnishandle
function bool fbsql data seek	gibt bei erfolg true zurück
function bool fbsql data seek resource $result int $row_number	bewegt den internen ergebnis-zeiger
function fbsql database $database	der datenbankname
function fbsql database $link_identifier	eine von fbsql_connect() oder fbsql_pconnect() zurückgegebe frontbase-verbindung
function string fbsql database	gibt den namen der datenbank zurück die mit dieser verbindung verwendet wird
function string fbsql database resource $link_identifier string $database	lesen oder setzen des datenbanknamens der mit einer verbindung verwendet wird
function fbsql db query $query	die auszuführende sql-abfrage
function fbsql db query $database	die auszuwählende datenbank
function fbsql db query $link_identifier	eine von fbsql_connect() oder fbsql_pconnect() zurückgegebe frontbase-verbindung
function resource fbsql db query	liefert die positive frontbase-ergebniskennung des abfrageergebnisses oder false bei einem fehler
function resource fbsql db query string $database string $query resource $link_identifier	absetzen einer anfrage an die datenbank
function fbsql db status $database_name	der datenbankname
function fbsql db status $link_identifier	eine von fbsql_connect() oder fbsql_pconnect() zurückgegebe frontbase-verbindung
function int fbsql db status	gibt einen integerwert mit dem momentanen status zurück
function int fbsql db status string $database_name resource $link_identifier	ermittelt den status einer angegebenen datenbank
function fbsql drop db $database_name	der datenbankname als zeichenkette
function fbsql drop db $link_identifier	eine von fbsql_connect() oder fbsql_pconnect() zurückgegebe frontbase-verbindung
function bool fbsql drop db	gibt bei erfolg true zurück
function bool fbsql drop db string $database_name resource $link_identifier	l&ouml;schen drop einer frontbase-datenbank
function fbsql error $link_identifier	eine von fbsql_connect() oder fbsql_pconnect() zurückgegebe frontbase-verbindung
function string fbsql error	liefert den fehlertext der zuletzt ausgeführten fbsql-funktion oder eine leere zeichenkette falls kein fehler aufgetreten ist
function string fbsql error resource $link_identifier	liefert den fehlertext der zuvor ausgef&uuml;hrten operation
function fbsql field name $field_index	der numerische offset des felds
function fbsql field name $result	eine ergebniskennung die von fbsql_list_fields() zurückgeliefert wurde
function string fbsql field name	liefert den namen als zeichenkette zurück oder false wenn das feld nicht existiert
function string fbsql field name resource $result int $field_index	liefert den namen des angegebenen feldes im ergebnis
function fbsql field table $result	ein von fbsql_query() zurückgegebenes erebnishandle
function fbsql field table $field_offset	der numerische offset des felds
function string fbsql field table	liefert den namen der tabelle als zeichenkette zurück
function string fbsql field table resource $result int $field_offset	liefert den namen der tabelle die das genannte feld enth&auml;lt
function fbsql field type $result	ein von fbsql_query() zurückgegebenes erebnishandle
function fbsql field type $field_offset	der numerische offset des felds
function string fbsql field type	liefert den feldtyp als zeichenkette zurück
function string fbsql field type resource $result int $field_offset	liefert den typ des angegebenen feldes in einem ergebnis
function fbsql free result $result	ein von fbsql_query() zurückgegebenes erebnishandle
function bool fbsql free result	gibt bei erfolg true zurück
function bool fbsql free result resource $result	gibt vom ergebnis belegten speicher wieder frei
function fbsql hostname $host_name	wenn angegeben wird dies der neue hostname der verbindung
function fbsql hostname $link_identifier	eine von fbsql_connect() oder fbsql_pconnect() zurückgegebe frontbase-verbindung
function string fbsql hostname	gibt den derzeitigen hostnamen der von der verbindung verwendet wird zürück
function string fbsql hostname resource $link_identifier string $host_name	ermittelt oder setzt den mit einer verbindung verwendeten hostnamen
function fbsql num fields $result	ein von fbsql_query() zurückgegebenes erebnishandle
function int fbsql num fields	liefert die anzahl der felder als integer zurück
function int fbsql num fields resource $result	ermittelt anzahl der felder im ergebnis
function fbsql start db $database_name	der datenbankname
function fbsql start db $link_identifier	eine von fbsql_connect() oder fbsql_pconnect() zurückgegebe frontbase-verbindung
function bool fbsql start db	gibt bei erfolg true zurück
function bool fbsql start db string $database_name resource $link_identifier string $database_options	startet eine datenbank auf einem lokalen oder entfernten server
function fbsql table name $index	integer-index für die aktuelle tabelle
function fbsql table name $result	eine von fbsql_list_tables() zurückgegebe ergebnis-kennung
function string fbsql table name	liefert den tabellennamen als zeichenkette zurück
function string fbsql table name resource $result int $index	liefert den tabellennamen eines felds
function fbsql warnings $OnOff	ob warnungen aktiviert werden sollen oder nicht
function bool fbsql warnings	liefert bei eingeschalteten warnmeldungen true zurück andernfalls false
function bool fbsql warnings bool $OnOff	aktivieren oder deaktivieren von frontbase-warnungen
function fdf close $fdf_document	das fdf-dokument-handle das von fdf_create() fdf_open() oder fdf_open_string() zurückgegeben wurde
function void fdf close resource $fdf_document	schlie&szlig;t ein fdf dokument
function int fdf errno	gibt den fehlercode als integer zurück oder 0 wenn kein fehler aufgetreten ist
function int fdf errno	gibt den fehlercode der letzten fdf operation zur&uuml;ck
function fdf get encoding $fdf_document	eine fdf dokumentresource wie von fdf_create() fdf_open() oder fdf_open_string() zurückgegeben
function string fdf get encoding	gibt das encoding als string zurück
function string fdf get encoding resource $fdf_document	liefert den wert des / encoding schl&uuml;ssels
function fdf get file $fdf_document	das fdf-dokument-handle das von fdf_create() fdf_open() oder fdf_open_string() zurückgegeben wurde
function string fdf get file	gibt den wert des schlüssels als zeichenkette zurück
function string fdf get file resource $fdf_document	gibt den wert des / f schl&uuml;ssels zur&uuml;ck
function fdf get status $fdf_document	das fdf-dokument-handle das von fdf_create() fdf_open() oder fdf_open_string() zurückgegeben wurde
function string fdf get status	gibt den wert des schlüssels als zeichenkette zurück
function string fdf get status resource $fdf_document	gibt den wert des / status schl&uuml;ssels zur&uuml;ck
function void fdf header	setzt fdf-spezifische header
function fdf next field name $fieldname	name des fdf-felds als zeichenkette
function fdf next field name $fdf_document	das fdf-dokument-handle das von fdf_create() fdf_open() oder fdf_open_string() zurückgegeben wurde
function string fdf next field name	gibt den feldnamen als zeichenkette zurück
function string fdf next field name resource $fdf_document string $fieldname	gibt den namen des n&auml;chsten feldes zur&uuml;ck
function fdf open $filename	pfad zur fdf-datei
function resource fdf open	gibt ein fdf-dokument-handle zurück oder false im fehlerfall
function resource fdf open string $filename	&ouml;ffnet ein fdf dokument
function fdf set encoding $encoding	der name der zeichenkodierung
function fdf set encoding $fdf_document	das fdf-dokument-handle das von fdf_create() fdf_open() oder fdf_open_string() zurückgegeben wurde
function bool fdf set encoding	gibt bei erfolg true zurück
function bool fdf set encoding resource $fdf_document string $encoding	legt die fdf zeichenkodierung fest
function fdf set status $fdf_document	das fdf-dokument-handle das von fdf_create() fdf_open() oder fdf_open_string() zurückgegeben wurde
function bool fdf set status	gibt bei erfolg true zurück
function bool fdf set status resource $fdf_document string $status	setzt den wert des / status schl&uuml;ssels
function feof $handle	der zeiger auf eine datei muss gültig sein und auf eine datei verweisen die vorher erfolgreich mit fopen() oder fsockopen() geöffnet und nicht bereits von fclose() geschlossen wurde
function bool feof	gibt true zurück wenn der dateizeiger an eof dateiende steht oder ein fehler auftritt inklusive socket zeitüberschreitung ; ansonsten wird false zurückgegeben
function bool feof resource $handle	pr&uuml;ft ob ein dateizeiger am ende der datei steht
function fgetss $length	länge der zu lesende eingabe
function fgetss $allowable_tags	über den optionalen dritten parameter können tags angegeben werden die nicht entfernt werden sollen
function fgetss $handle	der zeiger auf eine datei muss gültig sein und auf eine datei verweisen die vorher erfolgreich mit fopen() oder fsockopen() geöffnet und nicht bereits von fclose() geschlossen wurde
function string fgetss	returns a string of up to length - 1 bytes read from the file pointed to by handle with all html and php code striped
function string fgetss resource $handle int $length string $allowable_tags	liest eine zeile von der position des dateizeigers und entfernt html tags
function file get contents $filename	name der zu lesenden datei
function file get contents $use_include_path	hinweis : seit php 5 kann die konstante file_use_include_path genutzt werden um eine suche im include path auszulösen
function file get contents $maxlen	maximale länge der zu lesenden daten
function file get contents $offset	die position an der das lesen im originalstream beginnt
function file get contents $context	eine gültige context-ressource die mit stream_context_create() erstellt wurde
function string file get contents	die funktion gibt die gelesenen daten zurück
function string file get contents string $filename bool $use_include_path resource $context int $offset int $maxlen	liest die gesamte datei in einen string
function file put contents $filename	pfad zur datei in die die daten geschrieben werden sollen
function file put contents $data	die zu schreibenden daten
function file put contents $context	eine gültige kontakt-ressource erstellt mit der funktion stream_context_create()
function file put contents $flags	der wert von flags kann eine kombination der folgenden flags sein verbunden mit dem binären or( | -operator
function int file put contents	diese funktion gibt die anzahl der geschriebenen bytes oder false bei einem fehler zurück
function int file put contents string $filename mixed $data int $flags resource $context	schreibt einen string in eine datei
function file $context	eine context-ressource die mit der stream_context_create() -funktion erstellt wurde
function file $FILE_SKIP_EMPTY_LINES	leere zeilen überspringen
function file $FILE_USE_INCLUDE_PATH	suche nach der datei im include_path
function file $filename	pfad zur datei
function file $flags	der optionale parameter flags kann aus einer oder mehreren der folgenden konstanten bestehen: file_use_include_path suche nach der datei im include_path file_ignore_new_lines zeilenende nicht am ende jedes array-elements einfügen file_skip_empty_lines leere zeilen überspringen
function file $FILE_IGNORE_NEW_LINES	zeilenende nicht am ende jedes array-elements einfügen
function array file	gibt die datei in einem array zurück
function array file string $filename int $flags resource $context	liest eine komplette datei in ein array
function filectime $filename	pfad zu der datei
function int filectime	gibt datum und uhrzeit der letzten änderung einer datei zurück im fehlerfall wird false zurückgegeben
function int filectime string $filename	liefert datum und uhrzeit der letzten &auml;nderung des datei inode
function fileinode $filename	pfad zu der datei
function int fileinode	gibt die inode nummer der datei zurück im fehlerfall wird false zurückgegeben
function int fileinode string $filename	liefert die inode-nummer einer datei
function filemtime $filename	pfad zu der datei
function int filemtime	gibt datum und uhrzeit zurück wann die datei das letzte mal modifiziert wurde im fehlerfall wird false zurückgegeben
function int filemtime string $filename	liefert datum und uhrzeit der letzten datei&auml;nderung
function fileowner $filename	pfad zu der datei
function int fileowner	gibt die benutzer id des eigentümers einer datei zurück im fehlerfall wird false zurückgegeben
function int fileowner string $filename	liefert den dateieigent&uuml;mer
function fileperms $filename	pfad zu der datei
function int fileperms	gibt die zugriffsrechte einer datei als numerischen modus zurück
function int fileperms string $filename	liefert die zugriffsrechte einer datei
function filepro fieldname $field_number	die feldnummer
function string filepro fieldname	gibt den namen des feldes als string oder im fehlerfall false zurück
function string filepro fieldname int $field_number	ermittelt den namen eines feldes
function filepro fieldwidth $field_number	die feldnummer
function int filepro fieldwidth	gibt die feldlänge als integer oder im fehlerfall false zurück
function int filepro fieldwidth int $field_number	ermittelt die l&auml;nge eines feldes
function filepro retrieve $row_number	die zeilennummer
function filepro retrieve $field_number	die feldnummer
function string filepro retrieve	gibt die angegebenen daten oder im fehlerfall false zurück
function string filepro retrieve int $row_number int $field_number	holt daten aus einer filepro-datenbank
function int filepro rowcount	gibt die anzahl der zeilen in der geöffneten filepro-datenbank oder im fehlerfall false zurück
function int filepro rowcount	bestimmt wieviele zeilen eine filepro-datenbank enth&auml;lt
function filepro $directory	das map-verzeichnis
function bool filepro	gibt bei erfolg true zurück
function bool filepro string $directory	liest und &uuml;berpr&uuml;ft die map-datei
function filter input array $type	einer von input_get input_post input_cookie input_server input_session oder input_env
function filter input array $definition	array dass die argumente enthält
function filter input array $add_empty	füge dem rückgabewert fehlende keys als null hinzu
function mixed filter input array	bei erfolg wird ein array zurückgegeben welches alle werte der angefragten variablen enthält oder false im fehlerfall
function mixed filter input array int $type mixed $definition bool $add_empty	nimmt mehrere variablen von au&szlig;en entgegen und filtert sie optional
function filter var array $definition	array dass die argumente enthält
function filter var array $data	ein array mit string-keys welches die zu filternden daten enthält
function mixed filter var array	bei erfolg wird ein array zurückgegeben welches alle werte der angefragten variablen enthält oder false im fehlerfall
function mixed filter var array array $data mixed $definition	nimmt mehrere variablen entgegen und filtert sie optional
function finfo close $finfo	die von finfo_open() zurückgegebene fileinfo-ressource
function bool finfo close	gibt bei erfolg true zurück
function bool finfo close resource $finfo	schlie&szlig;t eine fileinfo ressource
function void flush	leert sendet den ausgabepuffer
function fmod $y	der divisor
function fmod $x	der dividend
function float fmod	der fließkommarest der division x / y
function float fmod float $x float $y	rest einer flie&szlig;kommadivision
function fopen $filename	hat filename die form schema: / /
function fopen $mode	der mode parameter spezifiziert den zugriffstyp den sie auf den stream anfordern
function fopen $context	hinweis : die kontext-unterstützung gibt es seit php 5
function fopen $use_include_path	der optionale dritte parameter use_include_path kann auf 1 oder true gesetzt werden wenn sie wollen dass nach der datei auch im include_path gesucht wird
function resource fopen	gibt bei erfolg eine dateizeiger ressource zurück oder false bei fehlern
function resource fopen string $filename string $mode bool $use_include_path resource $context	&ouml;ffnet eine datei oder url
function fpassthru $handle	der zeiger auf eine datei muss gültig sein und auf eine datei verweisen die vorher erfolgreich mit fopen() oder fsockopen() geöffnet und nicht bereits von fclose() geschlossen wurde
function int fpassthru	wenn ein fehler auftritt gibt fpassthru() false zurück
function int fpassthru resource $handle	gibt alle verbleibenden daten eines dateizeigers direkt aus
function fread $handle	eine dateisystemressource resource wie sie in der regel von fopen() zurückgegeben wird
function fread $length	bis zu length bytes lesen
function string fread	gibt die ausgelesene zeichenkette zurück
function string fread resource $handle int $length	liest bin&auml;rdaten aus einer datei
function frenchtojd $day	der tag als zahl von 1 bis 30
function frenchtojd $year	das jahr als zahl von 1 bis 14
function frenchtojd $month	der monat als zahl von 1 für vendémiaire bis 13 für den zeitraum von 5-6 tagen am ende jeden jahres
function int frenchtojd	der julianische tag für das übergebene französische revolutionsdatum als integer
function int frenchtojd int $month int $day int $year	konvertiert ein datum des franz&ouml;sischen revolutionskalenders zu einer julianischen tageszahl
function fseek $offset	der offset
function fseek $handle	eine dateisystemressource resource wie sie in der regel von fopen() zurückgegeben wird
function fseek $whence	whence werte sind: seek_set - setzt position gleich offset bytes seek_cur - setzt position auf die aktuelle stelle plus offset
function int fseek	bei erfolg wird 0 zurückgegeben andernfalls -1
function int fseek resource $handle int $offset int $whence	positioniert den dateizeiger
function fsockopen $timeout	der connection-timeout in sekunden
function fsockopen $port	die portnummer
function fsockopen $errstr	die fehlermeldung als string
function fsockopen $hostname	ist openssl-support installiert können sie dem parameter hostname entweder ein ssl: / / oder ein tls: / / voranstellen um eine ssl- oder tls-verbindung aufzubauen die via tcp / ip mit dem entfernten server verbunden wird
function fsockopen $errno	sofern unterstützt enthält der parameter die fehlernummer des systemlevels die beim aufruf der connect() -funktion auftrat
function resource fsockopen	die funktion fsockopen() gibt einen zeiger auf eine datei zurück der zusammen mit den anderen dateifunktionen wie fgets() fgetss() fwrite() fclose() und feof() verwendet werden kann
function resource fsockopen string $hostname int $port int $errno string $errstr float $timeout	stellt eine internet- oder unix-domain-socket-verbindung her
function ftok $pathname	pfad zu einer existierenden datei
function ftok $proj	einbuchstabige projekt-id
function int ftok	bei erfolg wird der erzeugte schlüssel zurückgegeben im fehlerfall ist der rückgabewert stattdessen -1
function int ftok string $pathname string $proj	erzeugt aus einem dateipfad und einem projektbezeichner einen system v ipc schl&uuml;ssel
function ftp alloc $ftp_stream	der verbindungshandler der ftp-verbindung
function ftp alloc $filesize	die anzahl der zu reservierenden bytes
function ftp alloc $result	eine textrepräsentation der serverantwort wird als referenz in result zurückgegeben wenn eine variable übergeben wird
function bool ftp alloc	gibt bei erfolg true zurück
function bool ftp alloc resource $ftp_stream int $filesize string $result	reserviert platz f&uuml;r eine hochzuladende datei
function ftp chdir $ftp_stream	der verbindungshandler der ftp-verbindung
function ftp chdir $directory	das verzeichnis in das gewechselt werden soll
function bool ftp chdir	gibt bei erfolg true zurück
function bool ftp chdir resource $ftp_stream string $directory	verzeichnis-wechsel auf einem ftp-server
function ftp chmod $ftp_stream	der verbindungshandler der ftp-verbindung
function ftp chmod $mode	die neuen zugriffsrechte als octal -wert
function ftp chmod $filename	der name der datei auf dem ftp-server
function int ftp chmod	gibt die neuen zugriffsrechte oder im fehlerfall false zurück
function int ftp chmod resource $ftp_stream int $mode string $filename	&auml;ndert die zugriffsrechte einer datei &uuml;ber ftp
function ftp close $ftp_stream	der verbindungshandler der ftp-verbindung
function bool ftp close	gibt bei erfolg true zurück
function bool ftp close resource $ftp_stream	schlie&szlig;t eine ftp-verbindung
function ftp connect $port	gibt einen alternativen port für die verbindung an
function ftp connect $host	die adresse des ftp-servers
function ftp connect $timeout	dieser parameter bestimmt den timeout für alle nachfolgenden netzwerktätigkeiten
function resource ftp connect	gibt bei erfolg einen ftp-stream zurück oder false falls ein fehler auftrat
function resource ftp connect string $host int $port int $timeout	stellt eine ftp-verbindung her
function ftp exec $ftp_stream	der verbindungshandler der ftp-verbindung
function ftp exec $command	das auszuführende kommando
function bool ftp exec	gibt true zurück wenn das kommando erfolgreich war d
function bool ftp exec resource $ftp_stream string $command	fordert die ausf&uuml;hrung eines programmes auf dem ftp-server an
function ftp fput $startpos	die startposition für den upload in der entfernten datei
function ftp fput $ftp_stream	der verbindungshandler der ftp-verbindung
function ftp fput $mode	der transfer-modus
function ftp fput $handle	ein geöffneter dateizeiger der lokalen datei
function ftp fput $remote_file	der pfad zur datei auf dem server
function bool ftp fput	gibt bei erfolg true zurück
function bool ftp fput resource $ftp_stream string $remote_file resource $handle int $mode int $startpos	&uuml;bertr&auml;gt eine ge&ouml;ffnete datei auf einen ftp-server
function ftp get option $ftp_stream	der verbindungshandler der ftp-verbindung
function ftp get option $option	zur zeit werden die folgenden optionen unterstützt: unterstützte ftp-laufzeitoptionen ftp_timeout_sec gibt den aktuellen timeout für alle netzwerkoperationen zurück
function mixed ftp get option	gibt den wert bei erfolg zurück oder false wenn die angegebene option option nicht unterstützt wird
function mixed ftp get option resource $ftp_stream int $option	ruft diverse laufzeitoptionen des angegebenen ftp-streams ab
function ftp login $ftp_stream	der verbindungshandler der ftp-verbindung
function ftp login $password	das passwort pass
function ftp login $username	der benutzername user
function bool ftp login	gibt bei erfolg true zurück
function bool ftp login resource $ftp_stream string $username string $password	anmelden einer ftp-verbindung login
function ftp mdtm $ftp_stream	der verbindungshandler der ftp-verbindung
function ftp mdtm $remote_file	die datei von der der zeitpunkt der letzten änderung ermittelt werden soll
function int ftp mdtm	gibt den zeitpunkt der letzten änderung als unix-timestamp bei erfolg zurück oder -1 im fehlerfall
function int ftp mdtm resource $ftp_stream string $remote_file	gibt den zeitpunkt der letzten &auml;nderung der angegebenen datei zur&uuml;ck
function ftp mkdir $directory	der name des zu erzeugenden verzeichnissen
function ftp mkdir $ftp_stream	der verbindungshandler der ftp-verbindung
function string ftp mkdir	gibt den neu erzeugten verzeichnisnamen zurück oder false im fehlerfall
function string ftp mkdir resource $ftp_stream string $directory	erzeugt ein verzeichnis
function ftp nb continue $ftp_stream	der verbindungshandler der ftp-verbindung
function int ftp nb continue	gibt ftp_failed oder ftp_finished oder ftp_moredata zurück
function int ftp nb continue resource $ftp_stream	nimmt die &uuml;bertragung einer datei wieder auf nicht-blockierend
function ftp nb fget $resumepos	die position in der entfernten datei an der der download beginnen soll
function ftp nb fget $ftp_stream	der verbindungshandler der ftp-verbindung
function ftp nb fget $mode	der transfer-modus
function ftp nb fget $handle	ein geöffneter dateizeiger in dem die daten gespeichert werden
function ftp nb fget $remote_file	der pfad zur datei auf dem server
function int ftp nb fget	gibt ftp_failed oder ftp_finished oder ftp_moredata zurück
function int ftp nb fget resource $ftp_stream resource $handle string $remote_file int $mode int $resumepos	l&auml;dt eine datei vom ftp-server und schreibt sie in eine lokale datei nicht-blockierend
function ftp nb put $startpos	die startposition für den upload in der entfernten datei
function ftp nb put $ftp_stream	der verbindungshandler der ftp-verbindung
function ftp nb put $local_file	der pfad zur lokalen datei
function ftp nb put $mode	der transfer-modus
function ftp nb put $remote_file	der pfad zur datei auf dem server
function int ftp nb put	gibt ftp_failed oder ftp_finished oder ftp_moredata zurück
function int ftp nb put resource $ftp_stream string $remote_file string $local_file int $mode int $startpos	speichert eine datei auf dem ftp-server nicht-blockierend
function ftp pasv $pasv	wenn true wird der passive modus aktiviert sonst wird der deaktiviert
function ftp pasv $ftp_stream	der verbindungshandler der ftp-verbindung
function bool ftp pasv	gibt bei erfolg true zurück
function bool ftp pasv resource $ftp_stream bool $pasv	schaltet den passiven modus ein oder aus
function ftp put $startpos	die startposition für den upload in der entfernten datei
function ftp put $ftp_stream	der verbindungshandler der ftp-verbindung
function ftp put $local_file	der pfad zur lokalen datei
function ftp put $mode	der transfer-modus
function ftp put $remote_file	der pfad zur datei auf dem server
function bool ftp put	gibt bei erfolg true zurück
function bool ftp put resource $ftp_stream string $remote_file string $local_file int $mode int $startpos	l&auml;dt eine datei auf einen ftp-server
function ftp raw $ftp_stream	der verbindungshandler der ftp-verbindung
function ftp raw $command	das auszuführende kommando
function array ftp raw	gibt die serverantwort als ein array von zeichenketten zurück
function array ftp raw resource $ftp_stream string $command	sendet ein beliebiges kommando an den ftp-server
function ftp rename $ftp_stream	der verbindungshandler der ftp-verbindung
function ftp rename $oldname	der alte datei- / verzeichnisname
function ftp rename $newname	der neue name
function bool ftp rename	gibt bei erfolg true zurück
function bool ftp rename resource $ftp_stream string $oldname string $newname	benennt eine datei auf dem ftp-server um
function ftp rmdir $directory	das zu löschende verzeichnis
function ftp rmdir $ftp_stream	der verbindungshandler der ftp-verbindung
function bool ftp rmdir	gibt bei erfolg true zurück
function bool ftp rmdir resource $ftp_stream string $directory	l&ouml;scht ein verzeichnis
function ftp set option $ftp_stream	der verbindungshandler der ftp-verbindung
function ftp set option $value	dieser parameter hängt davon ab welche option für die änderung ausgewählt wurde
function ftp set option $option	zur zeit werden folgende optionen unterstützt: unterstützte ftp-laufzeitoptionen ftp_timeout_sec ändert den timeout in sekunden für alle folgenden netzwerkoperationen
function bool ftp set option	gibt true zurück wenn die option gesetzt werden konnte sonst false
function bool ftp set option resource $ftp_stream int $option mixed $value	setzt diverse ftp-laufzeitoptionen
function ftp site $ftp_stream	der verbindungshandler der ftp-verbindung
function ftp site $command	das site-kommando
function bool ftp site	gibt bei erfolg true zurück
function bool ftp site resource $ftp_stream string $command	sendet ein site-kommando zum server
function ftp size $ftp_stream	der verbindungshandler der ftp-verbindung
function ftp size $remote_file	die entfernte datei
function int ftp size	gibt bei erfolg die dateigröße zurück sonst -1
function int ftp size resource $ftp_stream string $remote_file	gibt die gr&ouml;&szlig;e der angegebenen datei zur&uuml;ck
function ftp ssl connect $port	gibt einen alternativen port für die verbindung an
function ftp ssl connect $host	die adresse des ftp-servers
function ftp ssl connect $timeout	dieser parameter bestimmt den timeout für alle nachfolgenden netzwerktätigkeiten
function resource ftp ssl connect	gibt bei erfolg einen ssl-ftp-stream zurück oder false falls ein fehler auftrat
function resource ftp ssl connect string $host int $port int $timeout	&ouml;ffnet eine sichere ssl-ftp-verbindung
function ftruncate $size	die länge auf die gekürzt werden soll
function ftruncate $handle	der dateizeiger
function bool ftruncate	gibt bei erfolg true zurück
function bool ftruncate resource $handle int $size	k&uuml;rzt eine datei auf die angegebene l&auml;nge
function func get arg $arg_num	der offset des arguments
function mixed func get arg	liefert das gewünschte argument oder false bei fehlern
function mixed func get arg int $arg_num	liefert ein bestimmtes funktionsargument
function array func get args	liefert ein array mit kopien aller argumente mit denen die aufrufende funktion aufgerufen wurde
function array func get args	liefert funktionsargumente als array
function int func num args	liefert die anzahl der argumente die beim aufruf an die aufrufenden funktion übergeben wurden
function int func num args	liefert die anzahl der an eine funktion &uuml;bergebenen argumente
function function exists $function_name	der funktionsname als string
function bool function exists	gibt true zurück wenn function_name existiert und es sich um eine funktion handelt sonst false
function bool function exists string $function_name	falls die angegebene funktion definiert ist wird true zur&uuml;ck gegeben
function array gd info	gibt ein assoziatives array zurück
function array gd info	ruft informationen &uuml;ber die aktuell verwendete gd-bibliothek ab
function get browser $user_agent	der user-agent der analysiert werden soll
function get browser $return_array	falls dieser parameter auf true gesetzt wird gibt die funktion statt eines objekts ein array zurück
function mixed get browser	die informationen werden in einem objekt oder array zurückgegeben das verschiedene datenelemente enthält
function mixed get browser string $user_agent bool $return_array	ermittelt die f&auml;higkeiten des browsers eines benutzers
function get class $object	das gewünschte objekt
function string get class	liefert den namen der klasse deren instanz object ist
function string get class object $object	ermittelt den klassennamen eines objekts
function array get declared classes	liefert ein array mit den namen der zur zeit definierten klassen
function array get declared classes	ermittelt die namen der definierten klassen
function array get declared interfaces	gibt ein array der namen aller definierten interfaces des aktuellen scripts zurück
function array get declared interfaces	gibt ein array mit allen definierten interfaces zur&uuml;ck
function array get defined functions	liefert ein multidimensionales array mit der liste aller definierten internen und benutzerdefinierten funktionen
function array get defined functions	liefert ein array aller definierten funktionen
function array get defined vars	ein mehrdimensionales array mit allen variablen
function array get defined vars	gibt ein array aller definierten variablen zur&uuml;ck
function get extension funcs $module_name	der extensionname
function array get extension funcs	gibt ein array mit den namen aller funktionen zurück oder false wenn keine extension mit dem namen module_name geladen ist
function array get extension funcs string $module_name	liefert die namen der funktionen einer extension
function get headers $url	der ziel-url
function get headers $format	wenn der optionale parameter format auf eine wert ungleich 0 gesetzt wird parst get_headers() die serverantwort und setzt entsprechende arrayschlüssel
function array get headers	gibt ein indexbasiertes oder ein assoziatives array zurück das die übermittelten header enthält
function array get headers string $url int $format	ruft alle header ab die der server als antwort auf einen http-request versendet
function array get included files	gibt ein array mit dateinamen zurück
function array get included files	liefert ein array mit den namen der includierten dateien
function get loaded extensions $zend_extensions	legt fest ob nur zend extensions zurückgegeben werden sollen
function array get loaded extensions	gibt ein array mit den namen aller extensions zurück
function array get loaded extensions bool $zend_extensions	liefert ein array mit den namen aller einkompilierten und geladenen extensions
function get meta tags $use_include_path	ist use_include_path auf true gesetzt wird php immer versuchen die gesuchte datei innerhalb des standard-include-pfades wie er via include_path -direktive angegeben ist zu finden
function get meta tags $filename	der pfad zur html-datei im stringformat
function array get meta tags	gibt ein array mit allen geparsten metatags zurück
function array get meta tags string $filename bool $use_include_path	liest alle content-attribute der meta-tags einer datei aus und gibt ein array zur&uuml;ck
function get object vars $object	eine objektinstanz
function array get object vars	gibt ein assoziatives array der definierten nicht-statischen elemente des mit object spezifizierten objekts zurück auf die im aktuellen sichtbarkeitsbereich zugegriffen werden kann
function array get object vars object $object	liefert die &ouml;ffentlichen elemente eines objekts
function get parent class $object	das untersuchte objekt oder der untersuchte klassenname
function string get parent class	gibt den namen der elternklasse der klasse zurück von der object eine instanz oder der name ist
function string get parent class mixed $object	gibt den namen der elternklasse eines objektes zur&uuml;ck
function get resource type $handle	ein resource handle
function string get resource type	ist der parameter handle eine resource so gibt die funktion eine textuelle repräsentation des resource-typen zurück
function string get resource type resource $handle	liefert den typ einer resource
function array getallheaders	ein assoziatives array aller http-header der aktuellen anfrage; im fehlerfall wird false zurückgegeben
function array getallheaders	liefert alle http-request-header
function string getcwd	gibt bei erfolg das aktuelle arbeitsverzeichnis zurück im fehlerfall false
function string getcwd	ermittelt das aktuelle arbeitsverzeichnis
function getdate $timestamp	der optionale parameter timestamp ist ein unix timestamp als integer oder die aktuelle lokale zeit wenn kein timestamp übergeben wurde
function array getdate	gibt ein assoziatives array mit informationen zum timestamp zurück
function array getdate int $timestamp	gibt datums- und zeitinformationen zur&uuml;ck
function getenv $varname	der variablenname
function string getenv	gibt den wert der umgebungsvariable varname zurück oder false wenn die umgebungsvariable varname nicht existiert
function string getenv string $varname	liefert den wert einer umgebungsvariable
function gethostbyaddr $ip_address	die ip-adresse des hosts
function string gethostbyaddr	gibt bei erfolg den hostnamen oder im fehlerfall die unmodifizierte ip_address zurück oder false bei missgestalteter eingabe
function string gethostbyaddr string $ip_address	ermittelt den zur angegebenen ip-adresse passenden internet-hostnamen
function gethostbyname $hostname	der hostname
function string gethostbyname	gibt die ipv4-adresse oder im fehlerfall einen string zurück der den unveränderten hostname enthält
function string gethostbyname string $hostname	ermittelt die zum angegebenen internet-hostnamen passende ipv4-adresse
function gethostbynamel $hostname	der hostname
function array gethostbynamel	gibt ein array von ipv4-adressen zurück
function array gethostbynamel string $hostname	ermittelt eine liste von ipv4-adressen passend zum angegebenen internet-hostnamen
function getimagesize $imageinfo	dieser optionale parameter erlaubt es erweiterte informationen aus der datei zu ermitteln
function getimagesize $filename	die zu überprüfende datei
function array getimagesize	gibt ein array mit bis zu sieben elementen zurück
function array getimagesize string $filename array $imageinfo	ermittelt die gr&ouml;&szlig;e einer grafik
function int getlastmod	liefert die zeit der letzten änderung des auseführten skripts
function int getlastmod	uhrzeit der letzten &auml;nderung eines scripts
function getmxrr $weight	wenn ein weight -array übergeben wurde werden darin die gewichtungsinformationen gesammelt
function getmxrr $mxhosts	eine liste der gefundenen mx-einträge wird im array mxhosts abgelegt
function getmxrr $hostname	der internet-hostname
function bool getmxrr	gibt true zurück wenn mindestens ein datensatz gefunden wurde
function bool getmxrr string $hostname array $mxhosts array $weight	ermittelt die zu einem internet-hostnamen passenden mx-records
function int getmyinode	gibt die inode-nummer der aktuellen skriptdatei als integer zurück oder false bei fehlern
function int getmyinode	ermittelt den inode eines skripts
function int getmypid	liefert die prozess-id unter der das skript ausgeführt wird oder false bei fehlern
function int getmypid	prozess-id eines scripts
function getprotobyname $name	der protokollname
function int getprotobyname	gibt die protokollnummer zurück
function int getprotobyname string $name	ermittelt die protokollnummer anhand des protokollnamens
function getservbyname $service	der internet-service-name als string
function getservbyname $protocol	protocol ist entweder tcp or udp in kleinschreibung
function int getservbyname	gibt die portnummer zurück
function int getservbyname string $service string $protocol	ermittelt die portnummer passend zu einem internet-dienst und protokoll
function getservbyport $port	die portnummer
function getservbyport $protocol	protocol ist entweder tcp oder udp in kleinschreibung
function string getservbyport	gibt den internet-service-namen als string zurück
function string getservbyport int $port string $protocol	ermittelt einen internet-dienst passend zu einem port und protokoll
function gettext $message	die zu übersetzende mitteilung
function string gettext	diese funktion gibt einen übersetzten string zurück falls einer in der übersetzungstabelle gefunden wird andernfalls den übergebenen originalstring
function string gettext string $message	sucht einen text in der aktuellen domain
function gettimeofday $return_float	sofern auf true gesetzt wird eine fließkommazahl anstelle des arrays zurückgegeben
function mixed gettimeofday	standardmäßig wird ein array zurückgegeben
function mixed gettimeofday bool $return_float	ermittelt die aktuelle zeit
function gettype $var	die variable deren typ ermittelt werden soll
function string gettype	mögliche werte der zurückgegebenen zeichenkette sind: boolean integer double aus historischen gründen wird double im fall eines float zurückgegeben und nicht einfach float
function string gettype mixed $var	liefert den datentyp einer variablen
function gmmktime $is_dst	parameter repräsentieren immer ein gmt-datum so dass is_dst keinen einfluss auf das ergebnis nimmt
function gmmktime $hour	die zahl der stunden relativ zum beginn des tages der durch month day und year bestimmt ist
function gmmktime $month	die zahl des monats relativ zum ende des vorherigen jahres
function gmmktime $year	das jahr
function gmmktime $second	die zahl der sekunden relativ zum beginn der minute
function gmmktime $day	die zahl des tages relativ zum ende des vorherigen monats
function gmmktime $minute	die zahl der minuten relativ zum beginn der hour
function int gmmktime	gibt einen unix timestamp im integer -format zurück
function int gmmktime int $hour int $minute int $second int $month int $day int $year int $is_dst	gibt einen unix-timestamp zeitstempel f&uuml;r ein gmt datum zur&uuml;ck
function gnupg decrypt $text	der zu entschlüsselnde text
function gnupg decrypt $identifier	eine von gnupg_init() oder der klasse gnupg zurückgegebene gnupg-ressource
function string gnupg decrypt	bei erfolg gibt diese funktion den entschlüsselten text zurück
function string gnupg decrypt resource $identifier string $text	entschl&uuml;sselt einen gegebenen text
function gnupg encryptsign $plaintext	der zu verschlüsselnde text
function gnupg encryptsign $identifier	eine von gnupg_init() oder der klasse gnupg zurückgegebene gnupg-ressource
function string gnupg encryptsign	bei erfolg gibt diese funktionn den verschlüsselten und signierten text zurück bei einem fehler gibt diese funktion false zurück
function string gnupg encryptsign resource $identifier string $plaintext	verschl&uuml;sselt und signiert einen gegebenen text
function gnupg export $fingerprint	der fingerprint-schlüssel
function gnupg export $identifier	eine von gnupg_init() oder der klasse gnupg zurückgegebene gnupg-ressource
function string gnupg export	bei erfolg gibt diese funktion die schlüssel-daten zurück
function string gnupg export resource $identifier string $fingerprint	exportiert einen schl&uuml;ssel
function gnupg setarmor $armor	übergibt einen nicht-null integer-wert zu dieser funktion um die gepanzerte ausgabe zu aktivieren standard
function gnupg setarmor $identifier	eine von gnupg_init() oder der klasse gnupg zurückgegebene gnupg-ressource
function bool gnupg setarmor	gibt bei erfolg true zurück
function bool gnupg setarmor resource $identifier int $armor	gepanzerte ausgabe umschalten
function gnupg seterrormode $errormode	der fehler-modus
function gnupg seterrormode $identifier	eine von gnupg_init() oder der klasse gnupg zurückgegebene gnupg-ressource
function void gnupg seterrormode resource $identifier int $errormode	setzt den modus f&uuml;r error_reporting
function gnupg verify $signature	die signatur
function gnupg verify $plaintext	der klare text
function gnupg verify $signed_text	der signierte text
function gnupg verify $identifier	eine von gnupg_init() oder der klasse gnupg zurückgegebene gnupg-ressource
function array gnupg verify	bei erfolg gibt diese funktion informationen über die signatur bei einem fehler false zurück
function array gnupg verify resource $identifier string $signed_text string $signature string $plaintext	verifiziert einen signierten text
function gregoriantojd $month	der monat als zahl zwischen 1 für januar und 12 für dezember
function gregoriantojd $day	der tag als zahl zwischen 1 und 31
function gregoriantojd $year	das jahr als zahl zwischen -4714 und 9999
function int gregoriantojd	der julianische tag für das gegebene gregorianische datum als integer
function int gregoriantojd int $month int $day int $year	konvertierung vom gregorianischen kalender zum julianischen datum
function gzclose $zp	die gz-datei resource
function bool gzclose	gibt bei erfolg true zurück
function bool gzclose resource $zp	schlie&szlig;t eine ge&ouml;ffnete gz-datei
function gzdeflate $encoding	eine der zlib_encoding_* konstanten
function gzdeflate $level	der komprimierungsfaktor
function gzdeflate $data	die zu komprimierenden deflate == entleeren daten
function string gzdeflate	die komprimierte entleerte zeichenkette oder false wenn ein fehler auftrat
function string gzdeflate string $data int $level int $encoding	komprimiert eine zeichenkette
function gzeof $zp	der gz-datei deskriptor
function int gzeof	gibt true zurück wenn der gz-datei deskriptor an eof dateiende ist oder ein fehler auftritt; gibt ansonst false zurück
function int gzeof resource $zp	pr&uuml;fe auf eof bei einem gz-datei descriptor
function gzfile $use_include_path	sie können diesen optionalen parameter auf 1 setzen wenn sie die datei auch im include_path suchen lassen wollen
function gzfile $filename	der dateiname
function array gzfile	ein array das die zeilen der datei als elemente enthält
function array gzfile string $filename int $use_include_path	read entire gz-file into an array
function gzgetc $zp	der gz-datei deskriptor
function string gzgetc	das unkomprimierte zeichen oder false bei eof ungleich gzeof()
function string gzgetc resource $zp	hole zeichen von gz-datei deskriptor
function gzgetss $zp	der gz-datei deskriptor
function gzgetss $allowable_tags	dieser optionale parameter kann genutzt werden um tags anzugeben die nicht entfernt werden sollen
function gzgetss $length	die länge der zu erhaltenden daten
function string gzgetss	die unkomprimierte und bereinigte zeichenkette oder false bei fehlern
function string gzgetss resource $zp int $length string $allowable_tags	get line from gz-file pointer and strip html tags
function gzinflate $data	die daten die mit gzdeflate() komprimiert wurden
function gzinflate $length	die maximale länge der zu dekodierenden daten
function string gzinflate	die originalen unkomprimierten daten oder false bei fehlern
function string gzinflate string $data int $length	dekomprimiere inflate eine komprimierte deflate zeichenkette
function gzopen $use_include_path	sie können diesen optionalen parameter auf 1 setzen um die datei auch im include_path suchen zu lassen
function gzopen $mode	wie in fopen() rb oder wb allerdings kann auch der kompressionsgrad wb9 oder die strategie angegeben werden: f für gefilterte daten wb6f oder h für huffman-kompression wb1h
function gzopen $filename	der dateiname
function resource gzopen	gibt einen dateidescriptor auf die geöffnete datei zurück
function resource gzopen string $filename string $mode int $use_include_path	&ouml;ffnet gz-dateien
function gzread $zp	die gz-datei ressource
function gzread $length	die anzahl der zu lesenden bytes
function string gzread	die gelesenen daten
function string gzread resource $zp int $length	liest binary-safe aus einer gz-datei
function gzrewind $zp	die gz-datei resource
function bool gzrewind	gibt bei erfolg true zurück
function bool gzrewind resource $zp	setzt die dateiposition auf den anfang zur&uuml;ck
function gzseek $offset	die gewünschte position
function gzseek $whence	whence gibt an auf welche anfangsposition sich offset bezieht
function gzseek $zp	die gz-datei resource
function int gzseek	gibt 0 bei erfolg und -1 bei fehlern zurück
function int gzseek resource $zp int $offset int $whence	positioniert innerhalb einer gz-datei
function gztell $zp	die gz-datei resource
function int gztell	die aktuelle dateiposition oder false bei fehlern
function int gztell resource $zp	ermittelt die aktuelle position in einer gz-datei
function gzuncompress $data	mit gzcompress() komprimierte daten
function gzuncompress $length	die maximale länge der dekodierten daten
function string gzuncompress	die ursprünglichen nicht komprimierten daten oder false bei fehlern
function string gzuncompress string $data int $length	dekomprimiert einen komprimierten string
function gzwrite $length	die anzahl unkomprimierter bytes die ausgegeben werden soll
function gzwrite $string	der auszugebende string
function gzwrite $zp	eine gz-datei resource
function int gzwrite	gibt die anzahl der unkomprimierten bytes zurück die auf den gegebenen gz-stream ausgegeben wurden
function int gzwrite resource $zp string $string int $length	ausgabe in gz-komprimierte dateien
function header $http_response_code	forciert einen http-response-code des angegebenen wertes
function header $replace	der optionale parameter replace gibt an ob der header einen vorhergehenden gleichartigen header ersetzten soll oder ob ein zweiter header des selben typs hinzugefügt werden soll
function header $string	der header-string
function void header string $string bool $replace int $http_response_code	sendet einen http-header in rohform
function array headers list	gibt ein numerisch indeziertes array der header zurück
function array headers list	gibt eine liste der gesendeten oder zum senden vorbereiteten response header zur&uuml;ck
function headers sent $line	die zeilennummer an der die ausgabe begann
function headers sent $file	sind die optionalen parameter file und line angegeben schreibt headers_sent() den php-dateinamen und die zeilennummer an denen die ausgabe begann in die variablen file und line
function bool headers sent	headers_sent() gibt false zurück wenn noch keine http-header gesendet wurden ansonsten true
function bool headers sent string $file int $line	pr&uuml;ft ob oder wo die header bereits gesendet wurden
function hebrev $hebrew_text	eine hebräische eingabezeichenkette
function hebrev $max_chars_per_line	der optionale parameter gibt die maximale zeichenanzahl pro ausgabe-zeile an
function string hebrev	gibt eine sichtbare zeichenkette zurück
function string hebrev string $hebrew_text int $max_chars_per_line	konvertiert logischen hebr&auml;ischen text in sichtbaren text
function hebrevc $hebrew_text	eine hebräische eingabezeichenkette
function hebrevc $max_chars_per_line	der optionale parameter gibt die maximale zeichenanzahl pro ausgabe-zeile an
function string hebrevc	gibt eine sichtbare zeichenkette zurück
function string hebrevc string $hebrew_text int $max_chars_per_line	konvertiert nat&uuml;rlichen hebr&auml;ischen text in sichtbaren text inkl
function hexdec $hex_string	der zu konvertierende hexadezimalstring
function number hexdec	dezimaldarstellung von hex_string
function number hexdec string $hex_string	hexadezimal zu dezimal umwandlung
function highlight file $return	wenn dieser parameter auf true gesetzt wird gibt die funktion den hervorgehobenen code zurück
function highlight file $Dateiname	der pfad zur php-datei deren code hervorgehoben werden soll
function mixed highlight file	falls return auf true gesetzt ist wird der hervorgehobene code nicht direkt ausgegeben sondern als zeichenkette zurückgegeben
function mixed highlight file string $filename bool $return	syntax-hervorhebung f&uuml;r eine datei
function html entity decode $flags	eine bitmaske von einem oder mehreren der folgenden flags die die behandlung von anführungszeichen sowie den zu nutzenden dokumententyp festlegen
function html entity decode $encoding	ein optionaler parameter der die zeichenkodierung für eine konvertierung definiert
function html entity decode $string	die eingabezeichenkette
function string html entity decode	gibt die dekodierte zeichenkette zurück
function string html entity decode string $string int $flags string $encoding	konvertiert alle benannten html-zeichen in ihre entsprechenden ursprungszeichen
function htmlentities $flags	eine bitmaske von einem oder mehreren der folgenden flags die die behandlung von anführungszeichen ungültigen zeichenfolgen und den genutzten dokumententyp festlegen
function htmlentities $double_encode	wenn double_encode ausgeschaltet ist verändert php keine bereits vorhandenen html-entities
function htmlentities $encoding	ein optionaler parameter der die zeichenkodierung für eine konvertierung definiert
function htmlentities $string	die eingabezeichenkette
function string htmlentities	gibt die kodierte zeichenkette zurück
function string htmlentities string $string int $flags string $encoding bool $double_encode	wandelt alle geeigneten zeichen in entsprechende html-codes um
function htmlspecialchars decode $string	der zu dekodierende string
function htmlspecialchars decode $flags	eine bitmaske von einem oder mehreren der folgenden flags die die behandlung von anführungszeichen sowie den zu nutzenden dokumententyp festlegen
function string htmlspecialchars decode	gibt den dekodierten string zurück
function string htmlspecialchars decode string $string int $flags	konvertiert besondere html-auszeichnungen zur&uuml;ck in buchstaben
function ibase close $connection_id	eine interbase verbindungs-id die von ibase_connect() zurückgegeben wurde
function bool ibase close	gibt bei erfolg true zurück
function bool ibase close resource $connection_id	schlie&szlig;t eine verbindung zu einer interbase-datenbank
function ibase execute $query	eine per ibase_prepare() vorbereite interbase-abfrage
function resource ibase execute	erzeugt die abfrage einen fehler wird false zurückgegeben
function resource ibase execute resource $query mixed $bind_arg	ausf&uuml;hren einer vorbereiteten abfrage
function ibase fetch row $fetch_flag	fetch_flag ist eine oder-verknüpfung der konstanten ibase_text und ibase_unixtime
function ibase fetch row $result_identifier	eine interbase ergebniskennung
function array ibase fetch row	gibt ein array zurück das der abgerufenen zeile entspricht oder false wenn es keine weiteren zeilen gibt
function array ibase fetch row resource $result_identifier int $fetch_flag	ruft eine zeile aus einer interbase-datenbank ab
function ibase free query $query	eine mit ibase_prepare() vorbereitete abfrage
function bool ibase free query	gibt bei erfolg true zurück
function bool ibase free query resource $query	gibt den speicher einer vorbereiteten abfrage wieder frei
function iconv get encoding $type	der wert des optionalen parameters type kann sein: all input_encoding output_encoding internal_encoding
function mixed iconv get encoding	returns the current value of the internal configuration variable if successful gibt den aktuellen wert der konfigurations-variable zurück
function mixed iconv get encoding string $type	aktuelle einstellung f&uuml;r zeichensatz-konvertierung auslesen
function iconv $in_charset	der eingabe-zeichensatz
function iconv $out_charset	der ausgabe-zeichensatz
function iconv $str	die zu konvertierende zeichenkette
function string iconv	gibt die konvertierte zeichenkette zurück
function string iconv string $in_charset string $out_charset string $str	konvertiert zeichenketten in einen anderen zeichensatz
function ignore user abort $value	sofern dieser parameter angegeben wird überschreibt diese funktion die aktuelle einstellung von ignore_user_abort mit dem übergebenen value
function int ignore user abort	gibt das vorhergehende setting als ganzzahl integer zurück
function int ignore user abort string $value	stellt ein ob der verbindungsabbruch eines clients die skript-ausf&uuml;hrung abbrechen soll
function imagechar $image	eine von den verschiedenen erzeugungsfunktionen wie imagecreatetruecolor() gelieferte grafikressource
function imagechar $font	ein wert zwischen 1 und 5 für eingebaute schriftarten in latin2-kodierung wobei größere werte größeren schriften entsprechen oder einer ihrer mit imageloadfont() selbst registrierten schrifteinträge
function imagechar $c	das darzustellende zeichen
function imagechar $x	x-koordinate des startpunkts
function imagechar $color	eine mittels imagecolorallocate() erstellte farbe
function imagechar $y	y-koordinate des startpunkts
function bool imagechar	gibt bei erfolg true zurück
function bool imagechar resource $image int $font int $x int $y string $c int $color	stellt ein zeichen horizontal dar
function imagecreatefromgif $filename	pfad zum gif bild
function resource imagecreatefromgif	gibt im erfolgsfall eine bildresource zurück im fehlerfall false
function resource imagecreatefromgif string $filename	erzeugt ein neues bild aus einer datei oder url
function imagegif $image	eine von den verschiedenen erzeugungsfunktionen wie imagecreatetruecolor() gelieferte grafikressource
function imagegif $filename	der pfad unter dem das bild gespeichert werden soll
function bool imagegif	gibt bei erfolg true zurück
function bool imagegif resource $image string $filename	gibt das bild im browser oder einer datei aus
function imagejpeg $quality	quality ist optional und es kann ein wert zwischen 0 schlechteste qualität kleine datei und 100 beste qualität größte datei übergeben werden
function imagejpeg $image	eine von den verschiedenen erzeugungsfunktionen wie imagecreatetruecolor() gelieferte grafikressource
function imagejpeg $filename	der pfad unter dem das bild gespeichert werden soll
function bool imagejpeg	gibt bei erfolg true zurück
function bool imagejpeg resource $image string $filename int $quality	gibt das bild im browser oder einer datei aus
function imagepng $quality	kompressionsstufe: von 0 keine kompression bis 9
function imagepng $image	eine von den verschiedenen erzeugungsfunktionen wie imagecreatetruecolor() gelieferte grafikressource
function imagepng $filename	der pfad unter dem das bild gespeichert werden soll
function imagepng $filters	erlaubt einer verkleinerung der png-dateigröße
function bool imagepng	gibt bei erfolg true zurück
function bool imagepng resource $image string $filename int $quality int $filters	ausgabe eines bildes im browser oder als datei im png-format
function imagetruecolortopalette $dither	indicates if the image should be dithered - if it is true then dithering will be used which will result in a more speckled image but with better color approximation
function imagetruecolortopalette $ncolors	sets the maximum number of colors that should be retained in the palette
function imagetruecolortopalette $image	eine von den verschiedenen erzeugungsfunktionen wie imagecreatetruecolor() gelieferte grafikressource
function bool imagetruecolortopalette	gibt bei erfolg true zurück
function bool imagetruecolortopalette resource $image bool $dither int $ncolors	convert a true color image to a palette image
function imap 8bit $string	der zu konvertierende 8bit string
function string imap 8bit	der eingabestring in quoted-ptrintable kodierung
function string imap 8bit string $string	konvertiert einen 8bit string in einen quoted-printable string
function array imap alerts	liefert ein array mit allen alarmmeldungstexten seit dem letzen aufruf oder false wenn keine meldungen vorliegen
function array imap alerts	liefert alle aufgetretenen imap alarmnachrichten
function imap append $internal_date	wenn dieser parameter angegeben wird wird das internaldate für die hinzugefügte nachricht gesetzt
function imap append $message	die anzufügende nachricht als string bei verbindungen mit dem cyrus imap server ist es zwingend erforderlich \r\n als zeilenende zu benutzen mit einem einfachen n schlägt die operation fehl
function imap append $imap_stream	eine von imap_open() zurückgegebene imap-verbindung
function imap append $mailbox	der name des postfachs siehe imap_open() für nähere informationen
function imap append $options	wenn angegeben werden die in options gesetzten optionen der nachricht bei der anlage gesetzt
function bool imap append	gibt bei erfolg true zurück
function bool imap append resource $imap_stream string $mailbox string $message string $options string $internal_date	string als nachricht in einem postfach ablegen
function imap base64 $text	der zu dekodierende text
function string imap base64	liefert den dekodierten text als string
function string imap base64 string $text	dekodiert base-64 kodierten text
function imap binary $string	der zu konvertierende 8 bit string
function string imap binary	liefert einen base64 kodierten string
function string imap binary string $string	konvertiert einen 8 bit string in einen base64 codierten string
function imap body $msg_number	die nachrichtennummer
function imap body $imap_stream	eine von imap_open() zurückgegebene imap-verbindung
function imap body $options	der optionale parameter options kann eine bitmaske mit folgenden optionen enthalten: ft_uid - msg_number ist eine uid ft_peek - das \seen flag wird nicht gesetzt ft_internal - rückgabe im internen format ohne umwandlung der zeilenenden
function string imap body	liefert den körper der gewünschten nachricht als string
function string imap body resource $imap_stream int $msg_number int $options	liefert den k&ouml;rper einer nachricht
function imap bodystruct $msg_number	die nachrichtennummer
function imap bodystruct $imap_stream	eine von imap_open() zurückgegebene imap-verbindung
function imap bodystruct $section	der gewünschte nachrichtenteil
function object imap bodystruct	liefert ein objekt mit den gewünschten informationen zum aufbau des objekts und seiner eigenschaften siehe imap_fetchstructure()
function object imap bodystruct resource $imap_stream int $msg_number string $section	liefert die struktur eines bestimmten nachrichtenteils
function imap clearflag full $imap_stream	eine von imap_open() zurückgegebene imap-verbindung
function imap clearflag full $sequence	eine sequenz von nachrichtennummern diese können als aufzählung in der form x y oder als interval in der form x:y angegeben werden
function imap clearflag full $options	options ist eine bitmaske zur zeit ist nur ein wert definiert: st_uid - sequence besteht aus uids an stelle von nachrichtennummern
function imap clearflag full $flag	die folgenden flags werden unterstüzt: \\seen \\answered \\flagged \\deleted und \\draft siehe auch rfc2060
function bool imap clearflag full	gibt bei erfolg true zurück
function bool imap clearflag full resource $imap_stream string $sequence string $flag int $options	l&ouml;scht flags einer nachricht
function imap delete $msg_number	die nachrichtennummer
function imap delete $imap_stream	eine von imap_open() zurückgegebene imap-verbindung
function imap delete $options	mit hilfe der option ft_uid kann festgelegt werden das msg_number an stelle von nachrichtennummern uid s enthält
function bool imap delete	returns true
function bool imap delete resource $imap_stream int $msg_number int $options	nachrichten im aktuellen postfach zur l&ouml;schung markieren
function array imap errors	diese funktion liefert ein array aller imap fehlermeldungen seit dem letzten aufruf von imap_errors() oder seit dem begin der scriptausführung
function array imap errors	diese funktion liefert alle bisher aufgetretenen fehlermeldungen
function imap expunge $imap_stream	eine von imap_open() zurückgegebene imap-verbindung
function bool imap expunge	liefert true
function bool imap expunge resource $imap_stream	l&ouml;scht alle zum l&ouml;schen markierte nachrichten
function imap fetchbody $msg_number	die nachrichtennummer
function imap fetchbody $imap_stream	eine von imap_open() zurückgegebene imap-verbindung
function imap fetchbody $options	eine bitmaske die sich aus folgenden werten zusammensetzen kann: ft_uid - die nachrichtennummer ist eine uid ft_peek - das \seen-flag der nachricht wird nicht verändert ft_internal - string im internen format ohne zeilenendenumwandlung zurückgeben
function imap fetchbody $section	die nummer des gewünschten nachrichtenteils
function string imap fetchbody	liefert einen bestimmten teil des körpers der angegebenen nachricht als textstring
function string imap fetchbody resource $imap_stream int $msg_number string $section int $options	liefert einen bestimmten abschnitt aus dem k&ouml;rper einer nachricht
function imap fetchheader $options	folgende flags können in options gesetzt werden: ft_uid - msgno ist eine uid ft_internal - rückgaben im internen format ohne jede umwandlung von zeilenenden ft_prefetchtext der körper der nachricht wird zusammen mit dem kopf zum client übertragen
function imap fetchheader $msg_number	die nachrichtennummer
function imap fetchheader $imap_stream	eine von imap_open() zurückgegebene imap-verbindung
function string imap fetchheader	gibt den kopf der angegebenen nachricht als zeichenkette zurück
function string imap fetchheader resource $imap_stream int $msg_number int $options	liefert den kopf einer nachricht
function imap fetchstructure $imap_stream	eine von imap_open() zurückgegebene imap-verbindung
function imap fetchstructure $options	dieser optionale parameter hat nur eine einzige option ft_uid die angibt dass msg_number als uid behandelt werden soll
function imap fetchstructure $msg_number	die gewünschte nachrichtennummer
function object imap fetchstructure	gibt ein objekt mit dem envelope dem internen datum der größe den flags und der body-struktur zusammen mit ähnlichen objekten für jeden mime-anhang zurück
function object imap fetchstructure resource $imap_stream int $msg_number int $options	ermittelt die struktur einer nachricht
function imap gc $imap_stream	eine von imap_open() zurückgegebene imap-verbindung
function imap gc $caches	der zu löschende cache
function bool imap gc	gibt bei erfolg true zurück
function bool imap gc resource $imap_stream int $caches	leert den imap cache
function imap get quota $quota_root	quota_root sollte normalerweise in der form user
function imap get quota $imap_stream	eine von imap_open() zurückgegebene imap-verbindung
function array imap get quota	liefert ein array mit zwei integer-elementen limit und usage die den insgesamt verfügbaren und den zur zeit vom postfach genutzten speicherplatz angeben
function array imap get quota resource $imap_stream string $quota_root	liefert quota-beschr&auml;nkungen und nutzungsstatistik der postf&auml;cher
function imap getsubscribed $pattern	legt fest ab welchem punkt der postfachhierachie gesucht werden soll
function imap getsubscribed $imap_stream	eine von imap_open() zurückgegebene imap-verbindung
function imap getsubscribed $ref	spezifiziert den gewünschten server wie in imap_open() beschrieben
function array imap getsubscribed	liefert ein array das objekte mit postfachbeschreibungen enthält
function array imap getsubscribed resource $imap_stream string $ref string $pattern	liste aller abonnierten postf&auml;cher
function imap headerinfo $subjectlength	maximale anzahl zeichen für die subject eigenschaft muß größer als null sein
function imap headerinfo $imap_stream	eine von imap_open() zurückgegebene imap-verbindung
function imap headerinfo $fromlength	maximale anzahl zeichen für die fetchfrom eigenschaft muß größer als null sein
function imap headerinfo $msg_number	die gewünschte nachrichtennummer
function object imap headerinfo	die ergebnisse werden in einem objekt mit folgenden eigenschaften zurückgegeben: toaddress - inhalt des to: felds max
function object imap headerinfo resource $imap_stream int $msg_number int $fromlength int $subjectlength string $defaulthost	liest die kopfdaten einer nachricht
function imap headers $imap_stream	eine von imap_open() zurückgegebene imap-verbindung
function array imap headers	liefert ein array aus strings mit formatierten headerinformationen
function array imap headers resource $imap_stream	liefert eine zusammenfassung aller nachrichtenk&ouml;pfe eines postfachs
function string imap last error	liefert den vollständigen text der letzten imap fehlermeldung falls vorhanden sonst false
function string imap last error	liefert die letzte imap-fehlermeldung f&uuml;r dieses script
function imap listscan $pattern	startpunkt für die suche innerhalb der postfachhierachie
function imap listscan $content	der zu suchende text
function imap listscan $imap_stream	eine von imap_open() zurückgegebene imap-verbindung
function imap listscan $ref	serverspezifikation wie in imap_open() beschrieben
function array imap listscan	returns an array containing the names of the mailboxes that have content in the text of the mailbox
function array imap listscan resource $imap_stream string $ref string $pattern string $content	listet postf&auml;cher nach suchkriterien
function imap mail compose $envelope	ein assoziatives array von kopfzeilenfeldern
function imap mail compose $body	die teile des mailkörpers als indiziertes array
function string imap mail compose	liefert eine mime-konforme nachricht
function string imap mail compose array $envelope array $body	erzeugt eine mime-nachricht aus kopf- und nachrichtenelementen
function imap mail copy $mailbox	das zielpostfach für weitere informationen siehe imap_open()
function imap mail copy $imap_stream	eine von imap_open() zurückgegebene imap-verbindung
function imap mail copy $msglist	der zu verschiebende nachrichtenbereich für formatbeschreibungen siehe rfc2060
function imap mail copy $options	options ist eine bitmaske die sich aus einem oder mehreren der folgenden flags zusammensetzen kann cp_uid - die nachrichtennummern sind uids cp_move - nachrichten nach dem kopieren aus dem aktuellen postfach entfernen
function bool imap mail copy	gibt bei erfolg true zurück
function bool imap mail copy resource $imap_stream string $msglist string $mailbox int $options	kopiert nachrichten in ein postfach
function imap mail move $mailbox	das zielpostfach für weitere informationen siehe imap_open()
function imap mail move $options	options kann zur zeit nur eine option enthalten: cp_uid - die nachrichtennummern sind uids
function imap mail move $imap_stream	eine von imap_open() zurückgegebene imap-verbindung
function imap mail move $msglist	der zu verschiebende nachrichtenbereich für formatbeschreibungen siehe rfc2060
function bool imap mail move	gibt bei erfolg true zurück
function bool imap mail move resource $imap_stream string $msglist string $mailbox int $options	verschiebt nachrichten in ein anderes postfach
function imap mail $to	der empfänger der nachricht
function imap mail $rpath	rückgabeadresse bei felgeschlagener zustellung der nachricht
function imap mail $bcc	die mit bcc angegebenen weiteren empfänger der nachricht erhalten diese werden aber nicht im nachrichtenkopf aufgeführt
function imap mail $subject	die betreffzeile der nachricht
function imap mail $additional_headers	ein textstring mit zusätzlichen kopfzeilen
function imap mail $message	der inhalt der nachricht siehe imap_mail_compose()
function bool imap mail	gibt bei erfolg true zurück
function bool imap mail string $to string $subject string $message string $additional_headers string $cc string $bcc string $rpath	sendet eine email nachricht
function imap mailboxmsginfo $imap_stream	eine von imap_open() zurückgegebene imap-verbindung
function object imap mailboxmsginfo resource $imap_stream	informationen zum aktuellen postfach
function imap mime header decode $text	der mime-codierte text
function array imap mime header decode	die dekodierten textteile werden als ein array von objekten zurückgegeben die jeweils ein text und ein charset property enthalten
function array imap mime header decode string $text	dekodiert mime-codierte headerzeilen
function imap msgno $imap_stream	eine von imap_open() zurückgegebene imap-verbindung
function imap msgno $uid	die uid der nachricht
function int imap msgno	die nachrichtennummer der nachricht mit der gegebenen uid
function int imap msgno resource $imap_stream int $uid	liefert die nachrichtennummer f&uuml;r eine gegebene uid
function imap open $options	der parameter options kann sich als bitmaske aus folgenden werten zusammensetzen: op_readonly - nur lesende zugriffe op_anonymous - ein existierendes
function imap open $username	der benutzername
function imap open $n_retries	maximale anzahl verbindungsversuche
function imap open $mailbox	ein postfachname besteht aus einer angabe des servers und aus dem pfad zum postfach auf diesem server
function imap open $password	das passwort zum benutzernamen
function resource imap open	liefert einen imap stream oder false bei fehlern
function resource imap open string $mailbox string $username string $password int $options int $n_retries	&ouml;ffnet eine verbindung zu einem mailserver-postfach
function imap qprint $string	ein quoted-printable kodierter string
function string imap qprint	liefert einen 8 bit string
function string imap qprint string $string	konvertiert einen quoted-printable kodierten string in einen 8 bit string
function imap renamemailbox $new_mbox	der neue name des postfachs siehe imap_open() für weitere informationen
function imap renamemailbox $imap_stream	eine von imap_open() zurückgegebene imap-verbindung
function imap renamemailbox $old_mbox	der bisherige name des postfachs siehe imap_open() für weitere informationen
function bool imap renamemailbox	gibt bei erfolg true zurück
function bool imap renamemailbox resource $imap_stream string $old_mbox string $new_mbox	&auml;ndert den namen eines postfachs
function imap reopen $options	der parameter options kann als bitmaske einen oder mehrere der folgenden werte enthalten: op_readonly - öffnet das postfach nur für lesezugriffe op_anonymous - die
function imap reopen $imap_stream	eine von imap_open() zurückgegebene imap-verbindung
function imap reopen $mailbox	der postfachname siehe imap_open() für weitere informationen
function imap reopen $n_retries	number of maximum connect attempts
function bool imap reopen	gibt bei erfolg true zurück
function bool imap reopen resource $imap_stream string $mailbox int $options int $n_retries	wechselt das aktuelle postfach der verbindung
function imap rfc822 parse adrlist $address	ein string aus mailadressen
function imap rfc822 parse adrlist $default_host	ein defaulthostname
function array imap rfc822 parse adrlist	ein array aus objekten mit folgenden properties wird zurückgegeben:
function array imap rfc822 parse adrlist string $address string $default_host	zerlegt einen mailadressstring
function imap savebody $part_number	nummer des gewünschten nachrichtenteils gemäß der imap4 spezifikation
function imap savebody $imap_stream	eine von imap_open() zurückgegebene imap-verbindung
function imap savebody $file	name der zieldatei oder ein gültiger von fopen() zurückgegebener dateideskriptor
function imap savebody $options	eine bitmaske aus einem oder mehrereren der folgenden werte: a bitmask with one or more of the following: ft_uid - die msg_number ist eine uid ft_peek - das \seen flag wird nicht modifiziert ft_internal - keine zeilenendenmodifikation durchführen
function imap savebody $msg_number	nachrichtennummer der gewünschten nachricht
function bool imap savebody	gibt bei erfolg true zurück
function bool imap savebody resource $imap_stream mixed $file int $msg_number string $part_number int $options	speichert einen bestimmten body-abschnitt einer nachricht als datei
function imap setacl $rights	die zu setzenden rechte oder ein leerer string um alle rechte zu entziehen
function imap setacl $imap_stream	eine von imap_open() zurückgegebene imap-verbindung
function imap setacl $mailbox	der name des postfachs siehe imap_open() für nähere informationen
function imap setacl $id	der benutzer dessen rechte geändert werden sollen
function bool imap setacl	gibt bei erfolg true zurück
function bool imap setacl resource $imap_stream string $mailbox string $id string $rights	setzen der acl f&uuml;r ein postfach
function imap setflag full $options	eine bitmaske mit optionen zur zeit wird nur eine option unterstützt: st_uid - die nachrichtenliste sequence enthält uids anstelle von nachrichtennummern
function imap setflag full $sequence	eine liste von nachrichtennummern
function imap setflag full $imap_stream	eine von imap_open() zurückgegebene imap-verbindung
function imap setflag full $flag	die möglichen flags die gesetzt werden können sind \seen \answered \flagged \deleted und \draft wie in rfc2060 definiert
function bool imap setflag full	gibt bei erfolg true zurück
function bool imap setflag full resource $imap_stream string $sequence string $flag int $options	setzt nachrichtenflags
function imap sort $imap_stream	eine von imap_open() zurückgegebene imap-verbindung
function imap sort $criteria	eines der folgenden sortierkriterien: sortdate - sendedatum sortarrival - empfangsdatum sortfrom - absender sortsubject - betreff sortto - erster empfänger sortcc - erster cc empfänger sortsize - größe der nachricht in bytes
function imap sort $options	der parameter options enthält eine bitmaske mit folgenden möglichen werten: following: se_uid - es werden uids an stelle von nachrichtennummern zurückgegeben se_noprefetch - nachrichten werden nicht auf vorrat abgerufen
function imap sort $reverse	sortierung in umgekehrter reihenfolge wenn true
function array imap sort	liefert ein array mit nach den angegebenen sortierkriterien sortierten nachrichtennummern
function array imap sort resource $imap_stream int $criteria int $reverse int $options string $search_criteria string $charset	sortiert nachrichten eines postfachs
function imap status $imap_stream	eine von imap_open() zurückgegebene imap-verbindung
function imap status $mailbox	der postfachname siehe imap_open() für weitere informationen
function object imap status	die funktion liefert ein objekt mit statusinformationen in den properties messages recent unseen uidnext und uidvalidity
function object imap status resource $imap_stream string $mailbox int $options	liefert statusinformationen zum angegebenen postfach
function imap thread $imap_stream	eine von imap_open() zurückgegebene imap-verbindung
function array imap thread	imap_thread() liefert ein assoziatives array von nachrichten die über references verknüpft sind oder false bei fehlern
function array imap thread resource $imap_stream int $options	liefert einen baum zusammenh&auml;ngender nachrichten
function imap uid $msg_number	die nachrichtennummer
function imap uid $imap_stream	eine von imap_open() zurückgegebene imap-verbindung
function int imap uid	die uid der gewünschten nachricht
function int imap uid resource $imap_stream int $msg_number	liefert die uid f&uuml;r die gegebene nachrichtennummer
function imap unsubscribe $imap_stream	eine von imap_open() zurückgegebene imap-verbindung
function imap unsubscribe $mailbox	der postfachname mehr informationen finden sie unter imap_open()
function bool imap unsubscribe	gibt bei erfolg true zurück
function bool imap unsubscribe resource $imap_stream string $mailbox	abonnement eines postfachs beenden
function imap utf7 encode $data	ein iso-8859-1-string
function string imap utf7 encode	liefert data kodiert im modifizierten utf-7-format wie in rfc 2060 abschnitt 5
function string imap utf7 encode string $data	kodiert iso-8859-1 text im modifizieren utf-7-format
function imap utf8 $mime_encoded_text	ein mime-codierter string
function string imap utf8	liefert einen utf-8 codierten string
function string imap utf8 string $mime_encoded_text	konvertiert text zu utf8
function implode $glue	standardmäßig eine leere zeichenkette
function implode $pieces	das array mit den zusammenzufügenden zeichenketten
function string implode	gibt einen string mit einer string-repräsentation aller array-elemente in der gleichen reihenfolge wie in dem array zurück bei dem die einzelnen array-elemente mit dem im parameter glue angegebenen string verbunden werden
function string implode string $glue array $pieces	verbindet array-elemente zu einem string
function array inclued get data	die inclued-daten
function array inclued get data	gibt die inclued-daten aus
function ingres autocommit $link	die verbindungskennung
function bool ingres autocommit	gibt bei erfolg true zurück
function bool ingres autocommit resource $link	schaltet den autocommit-modus an oder aus
function ingres charset $link	die verbindungskennung
function string ingres charset	gibt den wert von ii_charsetxx zurück oder null falls der wert von ii_charsetxx nicht ermittelt werden konnte
function string ingres charset resource $link	gibt den verwendeten zeichensatz der installation zur&uuml;ck
function ingres close $link	die verbindungskennung
function bool ingres close	gibt bei erfolg true zurück
function bool ingres close resource $link	schlie&szlig;t eine ingres-ii-datenbankverbindung
function ingres commit $link	die verbindungskennung
function bool ingres commit	gibt bei erfolg true zurück
function bool ingres commit resource $link	beendet eine transaktion
function ingres connect $options	ingres_connect() -optionen name der option typ beschreibung beispiel date_century_boundary integer der schwellwert anhand dessen geprüft wird ob eine zweistellige jahreszahl im aktuellen oder im kommenden jahrhundert liegt
function ingres connect $password	das passwort zu username
function ingres connect $database	der name der datenbank
function ingres connect $username	der ingres-benutzername
function resource ingres connect	gibt bei erfolg eine ingres-verbindungskennung zurück oder false bei einem fehler
function resource ingres connect string $database string $username string $password array $options	&ouml;ffnet eine verbindung zu einem ingres-ii-datenbankserver
function ingres error $link	die verbindungskennung
function string ingres error	gibt einen string mit der letzten fehlermeldung zurück
function string ingres error resource $link	gibt eine textuelle beschreibung des letzten fehlercodes zur&uuml;ck
function ingres errsqlstate $link	die verbindungskennung
function string ingres errsqlstate	gibt einen string zurück der den letzten fehlercode von sqlstate enthält oder null falls es keinen fehler gab
function string ingres errsqlstate resource $link	gibt den letzten fehlercode von sqlstate zur&uuml;ck
function ingres escape string $link	die verbindungskennung
function ingres escape string $source_string	der string der geparst werden soll
function string ingres escape string	gibt einen string zurück dessen sonderzeichen maskiert wurden
function string ingres escape string resource $link string $source_string	maskiert sonderzeichen in datenbankabfragen
function ingres fetch array $result	die ergebniskennung
function ingres fetch array $result_type	der ergebnistyp
function array ingres fetch array	gibt eine gelesene zeile aus einem ergebnis in einem array zurück oder false wenn keine zeilen mehr gelesen werden können
function array ingres fetch array resource $result int $result_type	liest eine zeile der ergebnismenge in ein array ein
function ingres fetch object $result_type	das optionale argument result_type ist eine konstante und kannd die werte ingres_assoc ingres_num und ingres_both annehmen
function ingres fetch object $link	die ergebniskennung
function object ingres fetch object	gibt die daten einer zeile der ergebnismenge in einem objekt zurück oder false wenn es keine zeilen mehr gibt
function object ingres fetch object resource $result int $result_type	gibt eine zeile der ergebnismenge als objekt zur&uuml;ck
function ingres fetch row $result	die ergebniskennung
function array ingres fetch row	gibt eine gelesene zeile aus einem ergebnis in einem array zurück oder false wenn keine zeilen mehr gelesen werden können
function array ingres fetch row resource $result	holt eine zeile aus einer ergebnismenge in ein numerisches array
function ingres field name $result	die ergebniskennung
function ingres field name $index	index gibt das zu prüfende feld an
function string ingres field name	gibt den namen eines feldes in einer ergebnismenge zurück
function string ingres field name resource $result int $index	holt den namen eines feldes in einer ergebnismenge
function ingres field precision $result	die ergebniskennung
function ingres field precision $index	index ist die feldnummer und muss zwischen 1 und dem wert liegen den ingres_num_fields() zurückgibt
function int ingres field precision	gibt die genauigkeit eines feldes als integerwert zurück
function int ingres field precision resource $result int $index	gibt die genauigkeit eines feldes zur&uuml;ck
function ingres field scale $result	die ergebniskennung
function ingres field scale $index	index ist die feldnummer und muss zwischen 1 und dem wert liegen den ingres_num_fields() zurückgibt
function int ingres field scale	gibt die größe eines skalaren feldes als integerwert zurück
function int ingres field scale resource $result int $index	gibt die gr&ouml;&szlig;e eines skalaren feldes zur&uuml;ck
function ingres next error $link	die verbindungskennung
function bool ingres next error	ingres_next_error() gibt true zurück wenn weitere fehler abzufragen sind und false wenn es keine fehler mehr gibt
function bool ingres next error resource $link	ermittelt den n&auml;chsten ingres-fehler
function ingres num rows $result	die ergebniskennung
function int ingres num rows	bei delete- insert- or update-abfragen gibt ingres_num_rows() die anzahl der durch diese abfragen betroffenen datensätze zurück
function int ingres num rows resource $result	gibt die anzahl der datens&auml;tze der ergebnismenge oder die anzahl der von der letzten abfrage betroffenen datens&auml;tze zur&uuml;ck
function ingres pconnect $options	bei ingres_connect() finden sie eine liste der optionen die übergeben werden können
function ingres pconnect $password	das passwort von username
function ingres pconnect $username	der ingres-benutzername
function ingres pconnect $database	der datenbankname
function resource ingres pconnect	bei erfolg wird eine ingres-verbindungskennung zurückgegeben
function resource ingres pconnect string $database string $username string $password array $options	&ouml;ffnet eine persistente verbindung zu einer ingres-datenbank
function ingres prepare $link	die verbindungskennung
function ingres prepare $query	eine gültige sql-abfrage siehe im sql reference guide der ingres-dokumentation
function mixed ingres prepare	ingres_prepare() gibt eine ergebniskennung zurück die in der funktion ingres_execute() verwendet wird um die abfrage auszuführen
function mixed ingres prepare resource $link string $query	bereitet eine abfrage zur sp&auml;teren ausf&uuml;hrung vor
function ingres query $link	die verbindungskennung
function ingres query $types	ein string der eine folge von datentypen für die übergebenen parameterwerte enthält
function ingres query $query	eine gültige sql-abfrage mehr im ingres sql reference guide der ingres-dokumentation
function ingres query $params	ein array mit parameterwerten die in der abfrage verwendet werden
function mixed ingres query	ingres_query() gibt eine ergebniskennung für die abfrage zurück sofern zeilen geholt werden können
function mixed ingres query resource $link string $query array $params string $types	sendet eine sql-abfrage an den ingres-server
function ingres result seek $position	die zeilenposition auf die der cursor gesetzt werden soll
function ingres result seek $result	die ergebniskennung einer abfrage
function bool ingres result seek	gibt bei erfolg true zurück
function bool ingres result seek resource $result int $position	positioniert den datensatzzeiger bevor daten geholt werden
function ingres rollback $link	die verbindungskennung
function bool ingres rollback	gibt bei erfolg true zurück
function bool ingres rollback resource $link	setzt eine transaktion zur&uuml;ck
function ingres set environment $options	ein numerisches array mit name-wert-paaren für die optionen
function ingres set environment $link	die verbindungskennung
function bool ingres set environment	gibt bei erfolg true zurück
function bool ingres set environment resource $link array $options	setzt eigenschaften der umgebung zur ausgabesteuerung
function ingres unbuffered query $link	die verbindungskennung
function ingres unbuffered query $types	ein string der eine folge von datentypen für die übergebenen parameterwerte enthält
function ingres unbuffered query $params	ein array mit den parameterwerten für die abfrage
function ingres unbuffered query $query	eine gültige sql-abfrage siehe im sql reference guide der ingres-dokumentation
function mixed ingres unbuffered query	ingres_unbuffered_query() gibt eine ergebniskennung zurück sofern zeilen gelesen werden können anderenfalls wird false zurückgegeben
function mixed ingres unbuffered query resource $link string $query array $params string $types	sendet eine sql-abfrage an ingres ohne die ergebniszeilen zu puffern
function interface exists $autoload	bestimmt ob __autoload automatisch ausgeführt werden soll
function interface exists $interface_name	name des interface
function bool interface exists	gibt true zurück wenn das durch interface_name bezeichnete interface definiert ist sonst false
function bool interface exists string $interface_name bool $autoload	pr&uuml;ft ob ein bestimmtes interface definiert wurde
function ip2long $ip_address	eine adresse im standardformat
function int ip2long	gibt die ipv4-adresse zurück
function int ip2long string $ip_address	verwandelt eine gem&auml;&szlig; ipv4-protokoll angegebene internet-adresse vom punkt-format in die ausgeschriebene adress-angabe
function is array $var	die zu untersuchende variable
function bool is array	gibt true zurück wenn var vom typ array ist andernfalls false
function bool is array mixed $var	pr&uuml;ft ob die variable ein array ist
function is bool $var	die zu untersuchende variable
function bool is bool	gibt true zurück wenn var vom typ boolean ist ansonsten false
function bool is bool mixed $var	pr&uuml;ft ob eine variable vom typ boolean ist
function is callable $callable_name	hier wird der aufrufbare name abgelegt
function is callable $var	kann entweder der name einer funktion als string oder ein objekt und der name einer seiner methoden als array in der form array($someobject methodname sein
function is callable $syntax_only	wenn dieser parameter auf true gesetzt wird so prüft die funktion nur ob var möglicherweise eine funktion oder methode enthält
function bool is callable	liefet true wenn var aufrufbar is sonst false
function bool is callable mixed $var bool $syntax_only string $callable_name	pr&uuml;ft ob der inhalt einer variable als funktion aufgerufen werden kann
function is file $filename	pfad zur datei
function bool is file	gibt true zurück wenn der dateiname existiert und eine reguläre datei ist sonst false
function bool is file string $filename	pr&uuml;ft ob der dateiname eine regul&auml;re datei ist
function bool is finite	liefert true falls val ein gültiger endlicher wert innerhalb des zulässigen wertebereichs für einen php float auf der gegebenen plattform
function bool is finite float $val	pr&uuml;ft auf einen g&uuml;ltigen endlichen wert
function is float $var	die auszuwertende variable
function bool is float	gibt true zurück wenn var vom typ float ist sonst false
function bool is float mixed $var	pr&uuml;ft ob eine variable vom typ float ist
function is infinite $val	der zu prüfende wert
function bool is infinite	true wenn val nicht endlich ist sonst false
function bool is infinite float $val	pr&uuml;ft ob ein wert unendlich ist
function is int $var	die auszuwertende variable
function bool is int	gibt true zurück wenn var vom typ int ist sonst false
function bool is int mixed $var	pr&uuml;ft ob eine variable vom typ int ist
function is nan $val	der zu prüfende wert
function bool is nan	liefert true wenn val keine darstellbare zahl ist sonst false
function bool is nan float $val	pr&uuml;ft ob ein wert keine zahl ist
function is numeric $var	die zu untersuchende variable
function bool is numeric	gibt true zurück wenn var eine zahl oder ein numerischer string ist ansonsten false
function bool is numeric mixed $var	pr&uuml;ft ob eine variable eine zahl oder ein numerischer string ist
function is object $var	die zu untersuchende variable
function bool is object	gibt true zurück wenn var vom typ object ist ansonsten false
function bool is object mixed $var	pr&uuml;ft ob eine variable vom typ object ist
function is readable $filename	pfad zur datei
function bool is readable	gibt true zurück wenn die datei oder das verzeichnis angegeben durch filename existiert und lesbar ist sonst false
function bool is readable string $filename	pr&uuml;ft ob eine datei existiert und lesbar ist
function is resource $var	die zu untersuchende variable
function bool is resource	gibt true zurück wenn var vom typ resource ist andernfalls false
function bool is resource mixed $var	pr&uuml;ft ob eine variable vom typ resource ist
function is scalar $var	die zu prüfende variable
function bool is scalar	liefert true wenn var skalar ist sonst false
function bool is scalar mixed $var	pr&uuml;ft ob eine variable skalar ist
function is soap fault $object	das zu testende objekt
function bool is soap fault	die funktion gibt im fehlerfall true ansonsten false zurück
function bool is soap fault mixed $object	pr&uuml;ft ob ein soap-aufruf fehlgeschlagen ist
function is string $var	die zu untersuchende variable
function bool is string	gibt true zurück wenn var vom typ string ist andernfalls false
function bool is string mixed $var	pr&uuml;ft ob variable vom typ string ist
function is subclass of $object	ein klassenname oder eine objektinstanz
function is subclass of $class_name	ein klassenname
function is subclass of $allow_string	wenn dieser parameter false ist ist ein zeichenketten-klassenname als object nicht erlaubt
function bool is subclass of	die funktion liefert true wenn die klasse des objekts object eine unterklasse von class_name ist sonst false
function bool is subclass of mixed $object string $class_name bool $allow_string	pr&uuml;ft ob ein objekt von der angegebenen klasse abstammt
function is writable $filename	der zu prüfende dateiname
function bool is writable	gibt true zurück wenn filename existiert und schreibbar ist
function bool is writable string $filename	pr&uuml;ft ob in eine datei geschrieben werden kann
function jdmonthname $jday	ein julianischer tag als integer
function jdmonthname $calendar	der zu verwendende kalender
function string jdmonthname	der monatsname für den gegebenen julianischen tag im gewünschten calendar
function string jdmonthname int $julianday int $mode	bestimmt den monat aus dem julianischen datum
function jdtofrench $julianday	ein julianischer tag als integer
function string jdtofrench	ein französisches revolutionsdatum als string in der form monat / tag / yahr
function string jdtofrench int $juliandaycount	konvertiert ein julianisches datum zum kalender der franz&ouml;sischen revolution
function jdtogregorian $julianday	ein julianischer tag als integer
function string jdtogregorian	ein gregorianisches datum als string der form monat / tag / jahr
function string jdtogregorian int $julianday	konvertierung vom julianischen datum zum gregorianischen kalender
function jdtojulian $julianday	ein julianischer tag als integer
function string jdtojulian	ein julianisches datum als string in der form monat / tag / jahr
function string jdtojulian int $julianday	konvertierung vom julianischen datum zum julianischen kalender
function jdtounix $jday	ein julianischer tag zwischen 2440588 and 2465342
function int jdtounix	der unix-timestamp für den anfang des gegebenen julianischen tages
function int jdtounix int $jday	konvertiert julianisches datum in unix-timestamp
function jewishtojd $month	der monat als zahl zwischen 1 und 13
function jewishtojd $year	das jahr als zahl zwischen 1 und 9999
function jewishtojd $day	der tag als zahl zwischen 1 und 30
function int jewishtojd	der julianische tag für das gegebene jüdische datum als integer
function int jewishtojd int $month int $day int $year	konvertiert vom j&uuml;dischen kalender zum julianischen datum
function jpeg2wbmp $threshold	schwellenwert zwischen 0 und 8 inklusive
function jpeg2wbmp $wbmpname	pfad zur wbmp-datei
function jpeg2wbmp $dest_height	höhe des zielbildes
function jpeg2wbmp $dest_width	breite des zielbildes
function jpeg2wbmp $jpegname	pfad zur jpeg-datei
function bool jpeg2wbmp	gibt bei erfolg true zurück
function bool jpeg2wbmp string $jpegname string $wbmpname int $dest_height int $dest_width int $threshold	konvertiert eine jpeg-bilddatei in eine wbmp-bilddatei
function json decode $json	der zu dekodierende json - string in utf-8-kodierung
function json decode $depth	benutzerspezifische verschachtelungstiefe
function json decode $assoc	wenn true werden zurückgegebene objekte in assoziative array s konvertiert
function json decode $options	bitmaske mit json-dekodieroptionen
function mixed json decode	gibt den wert von json im passenden php-typ zurück
function mixed json decode string $json bool $assoc int $depth int $options	dekodiert eine json-zeichenkette
function json encode $options	bitmaske bestehend aus json_hex_quot json_hex_tag json_hex_amp json_hex_apos json_numeric_check json_pretty_print json_unescaped_slashes json_force_object json_preserve_zero_fraction json_unescaped_unicode
function json encode $value	der zu kodierende value
function json encode $depth	setzt die maximale tiefe
function string json encode	gibt einen json-kodierten string zurück oder im fehlerfall wird false zurückgegeben
function string json encode mixed $value int $options int $depth	gibt die json-repr&auml;sentation eines wertes zur&uuml;ck
function juliantojd $day	der tag als zahl von 1 bis 31
function juliantojd $month	der monat als zahl von 1 für januar bis 12 für dezember
function juliantojd $year	das jahr als zahl zwischen -4713 und 9999
function int juliantojd	der julianische tag für das angegebene julianische datum als integer
function int juliantojd int $month int $day int $year	konvertierung vom julianischen kalender zum julianischen datum
function krsort $sort_flags	sie können das verhalten der sortierung mittels dem optionalen parameter sort_flags beeinflussen für details siehe sort()
function krsort $array	das eingabe-array
function bool krsort	gibt bei erfolg true zurück
function bool krsort array $array int $sort_flags	sortiert ein array nach schl&uuml;sseln in umgekehrter reihenfolge
function ksort $sort_flags	sie können das verhalten der sortierung mittels dem optionalen parameter sort_flags beeinflussen für details siehe sort()
function ksort $array	das eingabe-array
function bool ksort	gibt bei erfolg true zurück
function bool ksort array $array int $sort_flags	sortiert ein array nach schl&uuml;sseln
function float lcg value	eine pseudozufallszahl zwischen null und eins als float
function float lcg value	kongruenzgenerator f&uuml;r pseudozufallszahlen
function ldap bind $link_identifier	eine ldap-verbindung die durch ldap_connect() zurückgegeben wurde
function bool ldap bind	gibt bei erfolg true zurück
function bool ldap bind resource $link_identifier string $bind_rdn string $bind_password	bindung zu einem ldap verzeichnis
function ldap connect $hostname	bei verwendung von openldap 2
function ldap connect $port	der port zu dem eine verbindung aufgebaut werden soll
function resource ldap connect	gibt eine positive verbindungs-kennung im erfolgsfall oder false im fehlerfall zurück
function resource ldap connect string $hostname int $port	verbindet zu einem ldap server
function ldap modify $dn	der distinguished name des ldap-eintrags
function ldap modify $link_identifier	eine ldap-verbindung die durch ldap_connect() zurückgegeben wurde
function bool ldap modify	gibt bei erfolg true zurück
function bool ldap modify resource $link_identifier string $dn array $entry	ver&auml;ndern eines ldap-eintrags
function linkinfo $path	pfad zum link
function int linkinfo	linkinfo() gibt das st_dev -feld der unix-c-stat-struktur die vom lstat -systemaufruf zurückgegeben wird zurück
function int linkinfo string $path	liefert informationen &uuml;ber einen link
function list $var1	eine variable
function array list	gibt das zugewiesene array zurück
function array list mixed $var1	weist variablen zu als w&auml;ren sie ein array
function array localeconv	localeconv() gibt daten basierend auf den aktuellen locale-einstellungen wie sie mittels setlocale() festgelegt werden können zurück
function array localeconv	ermittelt die formatierungsinformationen f&uuml;r zahlen
function log $arg	der zu verarbeitende wert
function log $base	optionale basis für die berechnung des logarithmus der vorgabewert ist e für den natürlichen logarithmus
function float log	der logarithmus von arg zur basis base bzw
function float log float $arg float $base	logarithmus
function lstat $filename	pfad zur datei oder zum symbolischen link
function array lstat	bitte lesen sie die handbuchseite zu stat() für informationen über die struktur des arrays das lstat() zurückgibt
function array lstat string $filename	sammelt informationen &uuml;ber eine datei oder einen symbolischen link
function ltrim $str	die eingabezeichenkette
function ltrim $character_mask	sie können mittels des character_mask -parameters eigene zeichen angeben die sie entfernen lassen möchten
function string ltrim	diese funktion gibt den string str zurück von dessen anfang alle whitespaces entfernt wurden
function string ltrim string $str string $character_mask	entfernt leerraum oder andere zeichen vom anfang eines strings
function mail $to	empfänger einer oder mehrere der e-mail
function mail $additional_headers(optional)	string der am ende des e-mail-headers eingefügt werden soll
function mail $additional_parameters(optional)	der additional_parameters -parameter kann benutzt werden um zusätzliche parameter an das programm zu senden das für den e-mail-versand konfiguriert ist wenn die sendmail_path -einstellung verwendet wird
function mail $subject	betreff der e-mail
function mail $message	die zu sendende nachricht
function bool mail	gibt true zurück wenn die e-mail erfolgreich für den versand akzeptiert wurde sonst false
function bool mail string $to string $subject string $message string $additional_headers string $additional_parameters	e-mails senden
function bool maxdb more results	always false
function bool maxdb more results resource $link	check if there any more query results from a multi query
function string mcrypt cbc int $cipher string $key string $data int $mode string $iv	entschl&uuml;sselt / verschl&uuml;sselt daten im cbc modus
function md5 file $raw_output	sofern true wird der md5-wert im raw binary format mit einer länge von 16 zeichen zurückgegeben
function md5 file $filename	der dateiname
function string md5 file	gibt bei erfolg einen string zurück sonst false
function string md5 file string $filename bool $raw_output	berechnet den md5-code einer datei
function metaphone $str	die eingabezeichenkette
function metaphone $phonemes	dieser parameter begrenzt den zurückgegebenen metaphone schlüssel auf phonemes zeichen länge
function string metaphone	gibt den metaphon-schlüssel als zeichenkette zurück im fehlerfall wird false zurückgegeben
function string metaphone string $str int $phonemes	berechnet den metaphone-schl&uuml;ssel eines strings
function method exists $method_name	der gewünschte methodenname
function method exists $object	eine objektinstanz oder ein klassenname
function bool method exists	liefert true wenn die methode method_name im objekt objekt definiert ist sonst false
function bool method exists mixed $object string $method_name	pr&uuml;ft ob eine methode innerhalb eines objekts existiert
function int mhash count	gibt die höchste verfügbare hash-id zurück
function int mhash count	gibt die h&ouml;chstm&ouml;glichen hash-id zur&uuml;ck
function microtime $get_as_float	wenn auf true gesetzt gibt microtime() einen float anstatt einem string zurück wie in der rückgabewert-sektion unten genauer erläutert wird
function mixed microtime	standardmäßig gibt microtime() einen string im format mikrosekunden sekunden zurück wobei sekunden die sekunden seit beginn der unix epoche 01
function mixed microtime bool $get_as_float	gibt den aktuellen unix-timestamp / zeitstempel mit mikrosekunden zur&uuml;ck
function min	ein vergleichbarer wert
function min $value2	ein vergleichbarer wert
function min $value1	ein vergleichbarer wert
function min $values	ein die werte enthaltendes array
function mixed min	min() liefert den gemäß den standard-vergleichen als kleinsten angesehenen parameter-wert zurück
function mixed min array $values	minimalwert bestimmen
function mkdir $pathname	der verzeichnispfad
function mkdir $recursive	erlaubt die erstellung von im pathname angegebenen verschachtelten verzeichnissen
function mkdir $mode	der modus ist standardmäßig 0777 was den größtmöglichen zugang umfasst
function mkdir $context	hinweis : die kontext-unterstützung gibt es seit php 5
function bool mkdir	gibt bei erfolg true zurück
function bool mkdir string $pathname int $mode bool $recursive resource $context	erstellt ein verzeichnis
function mktime $hour	die zahl der stunden relativ zum beginn des tages der durch month day und year bestimmt ist
function mktime $month	die zahl des monats relativ zum ende des vorherigen jahres
function mktime $year	die jahreszahl die zwei- oder vierstellig angegeben werden kann
function mktime $second	die zahl der sekunden relativ zum beginn der minute
function mktime $day	die zahl des tages relativ zum ende des vorherigen monats
function mktime $is_dst	is_dst kann bei sommerzeit dst auf 1 gesetzt werden der wert 0 steht für winter- / normalzeit und -1 standardwert heißt dass unbekannt ist ob gerade sommer- oder winterzeit herrscht
function mktime $minute	die zahl der minuten relativ zum beginn der hour
function int mktime	mktime() gibt den zu den übergebenen argumenten passenden unix-timestamp zurück
function int mktime int $hour int $minute int $second int $month int $day int $year int $is_dst	gibt den unix-timestamp / zeitstempel f&uuml;r ein datum zur&uuml;ck
function money format f $	das zeichen = gefolgt von einem single byte zeichen f wird als numerisches füllzeichen benutzt
function money format $n	the number is formatted according to the locales national currency format e
function money format $number	the number to be formatted
function money format $format	die formatangabe besteht aus folgenden schritten: ein % zeichen optionaler flag optionale feldbreite optionale links-genauigkeit optionale rechts-genauigkeit ein erforderliches umwandlungszeichen flags folgende optionale flags können benutzt werden: = f das zeichen = gefolgt von einem single byte zeichen f wird als numerisches füllzeichen benutzt
function money format $^	deaktiviert die verwendung von gruppierungszeichen wie in der aktuellen locale-einstellung definiert
function money format $-	falls vorhanden werden alle felder linksbündig angeordnet im gegensatz zum standardverhalten welches die felder rechtsbündig anordnet
function money format $+or(	gibt den formatierungsstil für positive und negative zahlen an
function money format $#n	the maximum number of digits n expected to the left of the decimal character e
function money format $w	a decimal digit string specifying a minimum field width
function money format $.p	a period followed by the number of digits p after the decimal character
function money format $i	the number is formatted according to the locales international currency format e
function money format $!	unterdrückt das währungssymbol aus dem ausgabestring
function money format $%	returns the % character
function string money format	returns the formatted string
function string money format string $format float $number	formatiert eine zahl als w&auml;hrungs-zeichenkette
function move uploaded file $destination	das ziel der zu verschiebenden datei
function move uploaded file $filename	der dateiname der hochgeladenen datei
function bool move uploaded file	gibt bei erfolg true zurück
function bool move uploaded file string $filename string $destination	verschiebt eine hochgeladene datei an einen neuen ort
function msg get queue $perms	zugriffsrechte der queue
function msg get queue $key	numerische id der message queue
function resource msg get queue	liefert ein resourcehandle für den zugriff auf eine system v message queue
function resource msg get queue int $key int $perms	message queue anlegen oder an existierende queue anbinden
function msg remove queue $queue	message queue resourcehandle
function bool msg remove queue	gibt bei erfolg true zurück
function bool msg remove queue resource $queue	entfernt eine message queue
function msg set queue $queue	message queue resourcehandle
function msg set queue $data	die gewünschten neuen werte werden als schlüssel / wert paare im data array übergeben
function bool msg set queue	gibt bei erfolg true zurück
function bool msg set queue resource $queue array $data	setzt metadaten in dermessage queue datenstruktur
function msg stat queue $queue	message queue resourcehandle
function array msg stat queue	der rückgabewert ist ein array dessen schlüssel und werte die folgende bedeutung haben: array-struktur für msg_stat_queue msg_perm
function array msg stat queue resource $queue	liefert informationen zu einer message queue
function msql affected rows $Ergebnis	das ergebnis ressource das ausgewertet wird
function int msql affected rows	returns the number of affected rows on success or false on error
function int msql affected rows resource $result	gibt die anzahl der betroffenen datens&auml;tze zur&uuml;ck
function msql connect $hostname	der hostname kann auch eine portnummer einschließen z
function resource msql connect	bei erfolg wird eine positive msql-verbindungskennung zurückgegeben oder false falls ein fehler auftrat
function resource msql connect string $hostname	&ouml;ffnet eine msql-verbindung
function msql data seek $row_number	die nummer der ausgewählten zeile
function msql data seek $Ergebnis	das ergebnis ressource das ausgewertet wird
function bool msql data seek	gibt bei erfolg true zurück
function bool msql data seek resource $result int $row_number	bewegt den internen datensatzzeiger
function msql db query $query	sie sql abfrage
function msql db query $Verbindungskennung	die msql-verbindung
function msql db query $database	der name der msql datenbank
function resource msql db query	gibt bei erfolg eine positive ergebniskennung zurück oder false falls ein fehler auftrat
function resource msql db query string $database string $query resource $link_identifier	sendet eine msql abfrage an den server
function msql drop db $database_name	der name der datenbank
function msql drop db $Verbindungskennung	die msql-verbindung
function bool msql drop db	gibt bei erfolg true zurück
function bool msql drop db string $database_name resource $link_identifier	l&ouml;scht eine msql datenbank
function string msql error	die letzte fehlermeldung oder ein leerer string falls es keinen fehler gab
function string msql error	gibt die letzte msql-fehlermeldung zur&uuml;ck
function msql fetch array $result_type	eine konstante die die folgenden werte annehmen kann: msql_assoc msql_num und msql_both
function msql fetch array $Ergebnis	das ergebnis ressource das ausgewertet wird
function array msql fetch array	gibt die inhalte des gelesenen datensatzes in einem array zurück oder false wenn es keinen datensatz mehr zu lesen gibt
function array msql fetch array resource $result int $result_type	holt eine zeile als array
function msql fetch field $field_offset	der feld-offset
function msql fetch field $Ergebnis	das ergebnis ressource das ausgewertet wird
function object msql fetch field	gibt ein objekt zurück das informationen über ein feld enthält
function object msql fetch field resource $result int $field_offset	gibt feldinformationen in einem objekt zur&uuml;ck
function msql field flags $Ergebnis	das ergebnis ressource das ausgewertet wird
function msql field flags $Feldoffset	der numerische offset des feldes
function string msql field flags	gibt einen string zurück der die flags des angegebenen feldes enthält
function string msql field flags resource $result int $field_offset	gibt alle flags f&uuml;r das angegebene feld zur&uuml;ck
function msql field seek $Ergebnis	das ergebnis ressource das ausgewertet wird
function msql field seek $Feldoffset	der numerische offset des feldes
function bool msql field seek	gibt bei erfolg true zurück
function bool msql field seek resource $result int $field_offset	setzt den internen feld-zeiger auf den angegebenen feldindex
function msql field table $Ergebnis	das ergebnis ressource das ausgewertet wird
function msql field table $Feldoffset	der numerische offset des feldes
function int msql field table	der name der tabelle im erfolgsfall
function int msql field table resource $result int $field_offset	gibt den tabellennamen f&uuml;r ein feld zur&uuml;ck
function msql free result $Ergebnis	das ergebnis ressource das ausgewertet wird
function bool msql free result	gibt bei erfolg true zurück
function bool msql free result resource $result	gibt den durch ergebnisse belegten speicher frei
function msql list dbs $Verbindungskennung	die msql-verbindung
function resource msql list dbs	gibt eine ergebnismenge zurück die mit allen funktionen mit denen man zeilen aus abfrageergebnissen lesen kann durchlaufen werden kann wie etwa msql_fetch_array()
function resource msql list dbs resource $link_identifier	listet alle msql datenbanken auf dem server auf
function msql list fields $tablename	der name der tabelle
function msql list fields $database	der name der datenbank
function msql list fields $Verbindungskennung	die msql-verbindung
function resource msql list fields	gibt eine ergebnismenge zurück die mit allen funktionen mit denen man zeilen aus abfrageergebnissen lesen kann durchlaufen werden kann wie etwa msql_fetch_array()
function resource msql list fields string $database string $tablename resource $link_identifier	listet alle felder einer tabelle auf
function msql list tables $database	der name der datenbank
function msql list tables $Verbindungskennung	die msql-verbindung
function resource msql list tables	gibt eine ergebnismenge zurück die mit allen funktionen mit denen man zeilen aus abfrageergebnissen lesen kann durchlaufen werden kann wie etwa msql_fetch_array()
function resource msql list tables string $database resource $link_identifier	listet alle tabellen einer msql-datenbank auf
function msql num fields $Ergebnis	das ergebnis ressource das ausgewertet wird
function int msql num fields	gibt die anzahl der felder in einem abfrageergebnis zurück
function int msql num fields resource $result	gibt die anzahl der felder in einem abfrageergebnis zur&uuml;ck
function msql num rows $Ergebnis	das ergebnis ressource das ausgewertet wird
function int msql num rows	gibt die anzahl der zeilen in einem abfrageergebnis zurück
function int msql num rows resource $query_identifier	gibt die anzahl der zeilen in einem abfrageergebnis zur&uuml;ck
function msql pconnect $hostname	der hostname kann auch eine portnummer enthalten z
function resource msql pconnect	bei erfolg wird eine positive msql-verbindungskennung zurückgegeben oder false falls ein fehler auftrat
function resource msql pconnect string $hostname	&ouml;ffnet eine persistente msql-verbindung
function msql query $query	die sql-abfrage
function msql query $Verbindungskennung	die msql-verbindung
function resource msql query	gibt bei erfolg eine positive zahl als msql-verbindungskennung zurück oder false bei einem fehler
function resource msql query string $query resource $link_identifier	schickt eine msql-abfrage zum server
function msql result $row	die zeilennummer
function msql result $Ergebnis	das ergebnis ressource das ausgewertet wird
function msql result $field	dies kann sowohl der numerische index als auch der feldname sein oder ein mit dem tabellennamen qualifizierter feldname tabellenname
function string msql result	gibt den wert zurück der in der übergebenen zeile und spalte des bezeichneten msql-abfrageergebnisses steht
function string msql result resource $result int $row mixed $field	holt den wert eines einzelnen feldes
function mssql bind $maxlen	wird bei char / varchar-werten verwendet
function mssql bind $param_name	der name des parameters als zeichenkette hinweis : sie müssen das zeichen @ der syntax von t-sql entsprechend einfügen
function mssql bind $is_null	ob der parameter null ist oder nicht
function mssql bind $var	die php-variable an die sie den ms sql-parameter binden
function mssql bind $type	mögliche werte: sqltext sqlvarchar sqlchar sqlint1 sqlint2 sqlint4 sqlbit sqlflt4 sqlflt8 sqlfltn
function mssql bind $is_output	ob der parameter ein output-parameter ist oder nicht
function mssql bind $stmt	der mittels mssql_init() erhaltene bezeichner der anweisung
function bool mssql bind	gibt bei erfolg true zurück
function bool mssql bind resource $stmt string $param_name mixed $var int $type bool $is_output bool $is_null int $maxlen	f&uuml;gt einer stored procedure oder einer remote stored procedure einen parameter hinzu
function mssql close $link_identifier	der von mssql_connect() zurückgegebene bezeichner einer ms sql-verbindung diese funktion schließt keine mittels mssql_pconnect() aufgebauten persistenten verbindungen
function bool mssql close	gibt bei erfolg true zurück
function bool mssql close resource $link_identifier	schlie&szlig;t die verbindung zum ms sql server
function mssql connect $new_link	falls mssql_connect() zum zweiten mal mit denselben argumenten aufgerufen wird wird keine neue verbindung aufgebaut sondern stattdessen die verbindungskennung der bereits bestehenden verbindung zurückgegeben
function mssql connect $username	der benutzername
function mssql connect $servername	der ms sql-server
function mssql connect $password	das passwort
function resource mssql connect	gibt bei erfolg eine ms sql verbindungskennung oder bei auftreten eines fehlers false zurück
function resource mssql connect string $servername string $username string $password bool $new_link	baut eine verbindung zum ms sql server auf
function mssql fetch array $result	der bezeichner des ergebnisses das ausgewertet wird
function mssql fetch array $result_type	der typ des arrays das abgerufen werden soll
function array mssql fetch array	gibt ein array mit dem gelieferten datensatz zurück oder false wenn es keinen weiteren datensatz gibt
function array mssql fetch array resource $result int $result_type	liefert einen ergebnis-datensatz als assoziatives array als numerisches array oder beides
function mssql fetch assoc $result_id	der bezeichner des ergebnisses das ausgewertet wird
function array mssql fetch assoc	gibt ein assoziatives array mit dem gelieferten datensatz zurück oder false wenn es keinen weiteren datensatz gibt
function array mssql fetch assoc resource $result_id	liefert ein assoziatives array des aktuellen datensatzes aus dem ergebnis das durch die ergebniskennung bestimmt ist
function mssql fetch batch $result	der bezeichner des ergebnisses das ausgewertet wird
function int mssql fetch batch	gibt die anzahl der datensätze im zurückgegeben stapel zurück
function int mssql fetch batch resource $result	liefert den n&auml;chsten stapel von datens&auml;tzen
function mssql fetch row $result	der bezeichner des ergebnisses das ausgewertet wird
function array mssql fetch row	gibt ein array mit dem gelieferten datensatz zurück oder false wenn es keinen weiteren datensatz gibt
function array mssql fetch row resource $result	liefert einen datensatz als indiziertes array
function mssql field length $result	der bezeichner des ergebnisses das ausgewertet wird
function mssql field length $offset	der offset des feldes beginnend bei 0
function int mssql field length	gibt die länge des angegebenen feldes zurück
function int mssql field length resource $result int $offset	liefert die l&auml;nge eines feldes
function mssql field name $result	der bezeichner des ergebnisses das ausgewertet wird
function mssql field name $offset	der offset des feldes beginnend bei 0
function string mssql field name	gibt den namen des angegebenen feldes zurück
function string mssql field name resource $result int $offset	liefert den namen eines feldes
function mssql field seek $result	der bezeichner des ergebnisses das ausgewertet wird
function mssql field seek $field_offset	der offset des feldes beginnend bei 0
function bool mssql field seek	gibt bei erfolg true zurück
function bool mssql field seek resource $result int $field_offset	setzt einen feld-offset
function mssql field type $result	der bezeichner des ergebnisses das ausgewertet wird
function mssql field type $offset	der offset des feldes beginnend bei 0
function string mssql field type	gibt den typ des angegebenen feldes zurück
function string mssql field type resource $result int $offset	liefert den typ eines feldes
function mssql free result $result	der bezeichner des ergebnisses das freigegeben werden soll
function bool mssql free result	gibt bei erfolg true zurück
function bool mssql free result resource $result	gibt den ergebnisspeicher frei
function string mssql get last message	gibt die letzte meldung des servers zurück oder eine leere zeichenkette falls von mssql keine meldungen zurückgegeben wurden
function string mssql get last message	gibt die letzte meldung des servers zur&uuml;ck
function mssql guid string $short_format	bestimmt ob das kurzformat verwendet werden soll
function mssql guid string $binary	eine binäre guid mit 16 bytes
function string mssql guid string	gibt bei erfolg die umgewandelte zeichenkette zurück
function string mssql guid string string $binary bool $short_format	wandelt eine bin&auml;re guid mit 16 bytes in eine zeichenkette um
function mssql min error severity $severity	die neue fehlerschwelle
function void mssql min error severity int $severity	setzt die untere fehlerschwelle
function mssql next result $result_id	der bezeichner des ergebnisses das ausgewertet wird
function bool mssql next result	gibt true zurück falls ein weiteres ergebnis vorliegt andernfalls false
function bool mssql next result resource $result_id	bewegt den internen ergebnis-zeiger zum n&auml;chsten ergebnis
function mssql num fields $result	der bezeichner des ergebnisses das ausgewertet wird
function int mssql num fields	gibt die anzahl der felder als ganzzahl zurück
function int mssql num fields resource $result	liefert die anzahl der felder eines ergebnisses
function mssql num rows $result	der bezeichner des ergebnisses das ausgewertet wird
function int mssql num rows	gibt die anzahl der datensätze als ganzzahl zurück
function int mssql num rows resource $result	liefert die anzahl der datens&auml;tze eines ergebnisses
function mssql pconnect $new_link	falls mssql_pconnect() zum zweiten mal mit denselben argumenten aufgerufen wird wird keine neue verbindung aufgebaut sondern stattdessen die verbindungskennung der bereits bestehenden verbindung zurückgegeben
function mssql pconnect $username	der benutzername
function mssql pconnect $servername	der ms sql-server
function mssql pconnect $password	das passwort
function resource mssql pconnect	gibt bei erfolg eine positive persistente ms sql verbindungskennung oder bei auftreten eines fehlers false zurück
function resource mssql pconnect string $servername string $username string $password bool $new_link	baut eine persistente ms sql verbindung auf
function mssql query $query	eine sql-anfrage
function mssql query $link_identifier	der von mssql_connect() oder mssql_pconnect() zurückgegebene bezeichner einer ms sql-verbindung falls keine verbindungskennung angegeben wird wird von der zuletzt geöffneten verbindung ausgegangen
function mssql query $batch_size	die anzahl der datensätze die im puffer abgelegt werden sollen
function mixed mssql query	gibt bei erfolg eine ergebniskennung zurück true falls kein datensatz zurückgegeben wurde oder false bei auftreten eines fehlers
function mixed mssql query string $query resource $link_identifier int $batch_size	sendet eine ms sql anfrage
function mssql result $result	der bezeichner des ergebnisses das ausgewertet wird
function mssql result $row	die nummer des datensatzes
function mssql result $field	kann der feld-offset der feldname oder vom format tabellenname
function string mssql result	gibt den inhalt der angegebenen zelle zurück
function string mssql result resource $result int $row mixed $field	liefert die bei einer abfrage gefundenen daten
function mssql select db $link_identifier	der von mssql_connect() oder mssql_pconnect() zurückgegebene bezeichner einer ms sql-verbindung falls keine verbindungskennung angegeben wird wird von der zuletzt geöffneten verbindung ausgegangen
function mssql select db $database_name	der name der datenbank um einen datenbanknamen der leerzeichen bindestriche oder irgendwelche andere ungewöhnliche zeichen enthält zu maskieren muss er wie im folgenden beispiel gezeigt in klammern gesetzt werden
function bool mssql select db	gibt bei erfolg true zurück
function bool mssql select db string $database_name resource $link_identifier	w&auml;hlt eine ms sql datenbank aus
function mt srand $seed	ein optionaler seed-wert
function void mt srand int $seed	setzt den besseren zufallszahlengenerator
function mysql affected rows $Verbindungs-Kennung	die mysql-verbindung
function int mysql affected rows	gibt bei erfolg die anzahl betroffener datensätze und -1 falls die letzte abfrage fehlschlug zurück
function int mysql affected rows resource $link_identifier	liefert die anzahl betroffener datens&auml;tze einer vorhergehenden mysql operation
function mysql data seek $row_number	die gewünschte zeilennummer des neuen ergebnis-zeigers
function mysql data seek $Ergebnis	das ergebnis ressource das ausgewertet wird
function bool mysql data seek	gibt bei erfolg true zurück
function bool mysql data seek resource $result int $row_number	bewegt den internen ergebnis-zeiger
function mysql db name $field	der feldname spaltenname
function mysql db name $row	der index in der ergebnismenge
function mysql db name $result	der ergebnis zeiger von einem aufruf von mysql_list_dbs()
function string mysql db name	gibt bei erfolg den schema namen zurück und false bei fehlern
function string mysql db name resource $result int $row mixed $field	liefert schema namen vom aufruf von mysql_list_dbs
function mysql errno $Verbindungs-Kennung	die mysql-verbindung
function int mysql errno	liefert die fehlernummer der letzten mysql funktion oder 0 null wenn kein fehler auftrat
function int mysql errno resource $link_identifier	liefert die nummer einer fehlermeldung einer zuvor ausgef&uuml;hrten mysql operation
function mysql fetch assoc $Ergebnis	das ergebnis ressource das ausgewertet wird
function array mysql fetch assoc	gibt ein array von zeichenketten zurück das der gelesenen zeile entspricht oder false falls keine weiteren zeilen vorhanden sind
function array mysql fetch assoc resource $result	liefert einen datensatz als assoziatives array
function mysql fetch field $field_offset	der numerische feldoffset
function mysql fetch field $Ergebnis	das ergebnis ressource das ausgewertet wird
function object mysql fetch field	liefert ein object mit feldinformationen
function object mysql fetch field resource $result int $field_offset	liefert ein objekt mit feldinformationen aus einem anfrageergebnis
function mysql fetch lengths $Ergebnis	das ergebnis ressource das ausgewertet wird
function array mysql fetch lengths	bei erfolg ein array mit längenwerten im fehlerfall wird false zurückgegeben
function array mysql fetch lengths resource $result	liefert die l&auml;nge eines jeden feldes in einem ergebnis
function mysql field len $Ergebnis	das ergebnis ressource das ausgewertet wird
function mysql field len $Feldoffset	der numerische offset des feldes
function int mysql field len	die länge des feldes das dem übergebenen index entspricht im fehlerfall wird false zurückgegeben
function int mysql field len resource $result int $field_offset	liefert die l&auml;nge des angegebenen feldes
function mysql field table $Ergebnis	das ergebnis ressource das ausgewertet wird
function mysql field table $Feldoffset	der numerische offset des feldes
function string mysql field table	der name der tabelle bei erfolg
function string mysql field table resource $result int $field_offset	liefert den namen der tabelle die das genannte feld enth&auml;lt
function mysql field type $Ergebnis	das ergebnis ressource das ausgewertet wird
function mysql field type $Feldoffset	der numerische offset des feldes
function string mysql field type	der zurückgegebene feldtyp ist einer von int real string blob und anderen wie in der mysql dokumentation weiter ausgeführt
function string mysql field type resource $result int $field_offset	liefert den typ des spezifizierten feldes in einem ergebnis
function mysql free result $Ergebnis	das ergebnis ressource das ausgewertet wird
function bool mysql free result	gibt bei erfolg true zurück
function bool mysql free result resource $result	gibt belegten speicher wieder frei
function mysql get host info $Verbindungs-Kennung	die mysql-verbindung
function string mysql get host info	gibt eine zeichenkette zurück die den typ der benutzten mysql verbindung für die aktuelle verbindung beschreibt im fehlerfall wird false zurückgegeben
function string mysql get host info resource $link_identifier	liefert mysql host informationen
function mysql get proto info $Verbindungs-Kennung	die mysql-verbindung
function int mysql get proto info	gibt bei erfolg das mysql protokoll zurück im fehlerfall wird false zurückgegeben
function int mysql get proto info resource $link_identifier	liefert mysql protokollinformationen
function mysql get server info $Verbindungs-Kennung	die mysql-verbindung
function string mysql get server info	gibt die mysql server version bei erfolg zurückim fehlerfall wird false zurückgegeben
function string mysql get server info resource $link_identifier	liefert mysql server informationen
function mysql info $Verbindungs-Kennung	die mysql-verbindung
function string mysql info	gibt bei erfolg informationen über die abfrage zurück oder false bei fehlern
function string mysql info resource $link_identifier	liefert informationen &uuml;ber die zuletzt ausgef&uuml;hrte anfrage zur&uuml;ck
function mysql insert id $Verbindungs-Kennung	die mysql-verbindung
function int mysql insert id	die id die für eine auto_increment spalte durch die vorherige abfrage bei erfolg 0 falls die vorherige abfrage keinen auto_increment wert erzeugt hatte oder false falls keine mysql verbindung existierte
function int mysql insert id resource $link_identifier	liefert die id die in der vorherigen abfrage erzeugt wurde
function mysql list dbs $Verbindungs-Kennung	die mysql-verbindung
function resource mysql list dbs	gibt bei erfolg eine ergebnis-kennung resource zurück oder false bei fehlern
function resource mysql list dbs resource $link_identifier	auflistung der verf&uuml;gbaren datenbanken schemata auf einem mysql server
function mysql list fields $database_name	der name der abgefragten datenbank
function mysql list fields $table_name	der name der abgefragten tabelle
function mysql list fields $Verbindungs-Kennung	die mysql-verbindung
function resource mysql list fields	ein zeiger auf ein resultat resource bei erfolg oder false bei fehlern
function resource mysql list fields string $database_name string $table_name resource $link_identifier	listet mysql tabellenfelder auf
function mysql list tables $database	der name der datenbank
function mysql list tables $Verbindungs-Kennung	die mysql-verbindung
function resource mysql list tables	ein zeiger auf ein resultat resource bei erfolgim fehlerfall wird false zurückgegeben
function resource mysql list tables string $database resource $link_identifier	listet tabellen in einer mysql datenbank auf
function mysql num fields $Ergebnis	das ergebnis ressource das ausgewertet wird
function int mysql num fields	gibt die anzahl der felder in dem ergebnis resource bei erfolg zurückim fehlerfall wird false zurückgegeben
function int mysql num fields resource $result	liefert die anzahl der felder in einem ergebnis
function mysql pconnect $server	der mysql server
function mysql pconnect $password	das passwort
function mysql pconnect $client_flags	der parameter client_flags kann eine kombination der folgenden konstanten sein: 128 erlaube load data local nutzung mysql_client_ssl mysql_client_compress mysql_client_ignore_space oder mysql_client_interactive
function mysql pconnect $username	der nutzername
function resource mysql pconnect	gibt eine persitente mysql verbindungs-kennung im erfolgsfall zurück oder im fehlerfall wird false zurückgegeben
function resource mysql pconnect string $server string $username string $password int $client_flags	&ouml;ffnet eine persistente verbindung zum mysql server
function mysql ping $Verbindungs-Kennung	die mysql-verbindung
function bool mysql ping	gibt true zurück wenn die verbindung zum mysql server noch besteht ansonsten false
function bool mysql ping resource $link_identifier	ping a server connection or reconnect if there is no connection
function mysql query $Verbindungs-Kennung	die mysql-verbindung
function mysql query $query	eine sql anweisung die anweisung sollte nicht mit einem semikolon abgeschlossen werden
function mixed mysql query	für select show describe explain und andere anweisungen die eine ergebnismenge zurückgeben gibt mysql_query() eine kennung resource bei erfolg zurück oder false bei fehlern
function mixed mysql query string $query resource $link_identifier	sendet eine anfrage an mysql
function mysql real escape string $unescaped_string	der zu maskierende string
function mysql real escape string $Verbindungs-Kennung	die mysql-verbindung
function string mysql real escape string	gibt einen maskierten string oder im fehlerfall false zurück
function string mysql real escape string string $unescaped_string resource $link_identifier	maskiert spezielle zeichen innerhalb eines strings f&uuml;r die verwendung in einer sql-anweisung
function mysql result $field	der name oder der offset der zu erhaltenden spalte feld
function mysql result $row	die zeilennummer des erhaltenen ergebnisses
function mysql result $Ergebnis	das ergebnis ressource das ausgewertet wird
function string mysql result	die inhalte einer spalte einer mysql ergebnismenge bei erfolg oder false bei fehlern
function string mysql result resource $result int $row mixed $field	liefert ergebnis
function mysql select db $database_name	der name der zu selektierenden datenbank
function mysql select db $Verbindungs-Kennung	die mysql-verbindung
function bool mysql select db	gibt bei erfolg true zurück
function bool mysql select db string $database_name resource $link_identifier	auswahl einer mysql datenbank
function mysql set charset $Verbindungs-Kennung	die mysql-verbindung
function mysql set charset $charset	ein gültiger zeichensatzname
function bool mysql set charset	gibt bei erfolg true zurück
function bool mysql set charset string $charset resource $link_identifier	setzt den verbindungszeichensatz
function mysql tablename $i	der integer-index zeilen- / tabellennummer
function mysql tablename $result	ein ergebniszeiger resource der von mysql_list_tables() zurückgegeben wird
function string mysql tablename	der tabellenname bei erfolg
function string mysql tablename resource $result int $i	liefert den namen einer tabelle
function mysql thread id $Verbindungs-Kennung	die mysql-verbindung
function int mysql thread id	die thread id bei erfolgim fehlerfall wird false zurückgegeben
function int mysql thread id resource $link_identifier	zeigt die aktuelle thread id an
function natsort $array	das eingabe-array
function bool natsort	gibt bei erfolg true zurück
function bool natsort array $array	sortiert ein array in nat&uuml;rlicher reihenfolge
function next $array	das zu beeinflussende array
function mixed next	gibt den wert des nächsten elements des arrays zurück auf das der interne zeiger des arrays gerade zeigt
function mixed next array $array	r&uuml;ckt den internen zeiger eines arrays vor
function string ngettext	gibt die korrekte pluralform zurück die mittels msgid1 und msgid2 für die anzahl n bestimmt wurde
function string ngettext string $msgid1 string $msgid2 int $n	pluralversion von gettext
function nl2br $is_xhtml	bestimmt ob xhtml-kompatible zeilenumbrüche verwendet werden sollen oder nicht
function nl2br $string	die eingabezeichenkette
function string nl2br	gibt die veränderte zeichenkette zurück
function string nl2br string $string bool $is_xhtml	f&uuml;gt vor allen zeilenumbr&uuml;chen eines strings html-zeilenumbr&uuml;che ein
function number format $thousands_sep	bestimmt das tausendertrennzeichen
function number format $number	die zu formatierende zahl
function number format $dec_point	bestimmt das trennzeichen für die nachkommastellen
function number format $decimals	bestimmt die anzahl an nachkommastellen
function string number format	eine formatierte version von number
function string number format float $number int $decimals	formatiert eine zahl mit tausender-trennzeichen
function oauth urlencode $uri	uri die kodiert werden soll
function string oauth urlencode	returnt einen mach rfc 3986 kodierten string
function string oauth urlencode string $uri	kodiert eine uri nach rfc 3986
function void ob clean	l&ouml;scht den ausgabepuffer
function bool ob end clean	die funktion gibt true zurück wenn ein ausgabepuffer entfernt wurde false wenn kein aktiver puffer vorhanden war oder der aktuelle puffer nicht deaktiviert werden konnte dies ist bei speziellen puffern möglich
function bool ob end clean	l&ouml;scht den ausgabe-puffer und deaktiviert die ausgabe-pufferung
function void ob flush	leert sendet den ausgabepuffer
function string ob get contents	ob_get_contents() gibt den inhalt des ausgabepuffers zurück ohne ihn zu löschen oder false wenn die ausgabe-pufferung nicht aktiv ist
function string ob get contents	gibt den inhalt des ausgabe-puffers zur&uuml;ck
function int ob get level	gibt die anzahle der aktiven ausgabepuffer zurück
function int ob get level	anzahl der aktiven ausgabepuffer
function ob implicit flush $flag	true schaltet implizite ausgabe ein false schaltet sie aus
function void ob implicit flush int $flag	schaltet die implizite ausgabe ein bzw
function ob start $buffer	contents of the output buffer
function ob start $phase	bitmask of php_output_handler_* constants
function ob start $output_callback	an optional output_callback function may be specified
function ob start $chunk_size	if the optional parameter chunk_size is passed the buffer will be flushed after any output call which causes the buffers length to equal or exceed chunk_size
function ob start $flags	the flags parameter is a bitmask that controls the operations that can be performed on the output buffer
function bool ob start	gibt bei erfolg true zurück
function bool ob start callable $output_callback int $chunk_size int $flags	ausgabepufferung aktivieren
function oci bind array by name $var_array	ein array
function oci bind array by name $statement	ein gültiger zeiger auf ein oci-statement
function oci bind array by name $max_item_length	setzt die maximale länge für array-elemente
function oci bind array by name $type	sollte benutzt werden um den typ der pl / sql-array-elemente zu bestimmen
function oci bind array by name $name	der oracle-platzhalter
function oci bind array by name $max_table_length	setzt die maximale länge sowohl für die eingabe- als auch die ergebnis-arrays
function bool oci bind array by name	gibt bei erfolg true zurück
function bool oci bind array by name resource $statement string $name array $var_array int $max_table_length int $max_item_length int $type	bindet ein php-array namentlich an ein oracle-pl / sql-array
function oci bind by name $type	wenn ein abstrakter datentyp wie lob / rowid / bfile gebunden werden soll muss zuerst oci_new_descriptor() verwendet werden
function oci bind by name $variable	die php-variable
function oci bind by name $maxlength	setzt die maximale größe des binds
function oci bind by name $ph_name	ein platzhalter
function oci bind by name $statement	ein oci-statement
function bool oci bind by name	gibt bei erfolg true zurück
function bool oci bind by name resource $statement string $ph_name mixed $variable int $maxlength int $type	bindet eine php-variable an einen oracle platzhalter
function oci cancel $statement	ein oci-statement
function bool oci cancel	gibt bei erfolg true zurück
function bool oci cancel resource $statement	bricht das lesen eines zeigers ab
function oci fetch array $statement	ein zeiger auf eine gültige oci-anweisung
function oci fetch array $mode	der optionale zweite parameter kann eine beliebige kombination aus dem folgenden konstanten sein: oci_both - liefert ein array sowohl mit assoziativen als auch numerischem index gleichzusetzen mit oci_assoc + oci_num
function array oci fetch array	liefert ein array sowohl mit assoziativem wie numerischem index oder false wenn es keine weiteren zeilen für das statement gibt
function array oci fetch array resource $statement int $mode	liefert die n&auml;chste zeile der ergebnisdaten als assoziatives und / oder numerisches array
function oci fetch assoc $statement	ein gültiger zeiger auf ein oci-statement
function array oci fetch assoc	liefert ein assoziatives array oder false wenn es keine weiteren zeilen für das statement gibt
function array oci fetch assoc resource $statement	liefert die n&auml;chste zeile der ergebnisdaten als assoziatives array
function oci fetch row $statement	ein gültiger zeiger auf ein oci-statement
function array oci fetch row	liefert ein indiziertes array oder false wenn es keine weiteren zeilen für das statement gibt
function array oci fetch row resource $statement	liefert die n&auml;chste zeile der ergebnisdaten als numerisches array
function oci fetch $statement	ein zeiger auf eine gültige oci-anweisung
function bool oci fetch	gibt im erfolgsfall true zurück false wird zurückgegeben wenn keine weiteren zeilen mehr in statement vorhanden sind
function bool oci fetch resource $statement	holt die n&auml;chste reihe in den ergebnispuffer
function oci free statement $statement	ein gültiger zeiger auf ein oci-statement
function bool oci free statement	gibt bei erfolg true zurück
function bool oci free statement resource $statement	gibt alle verkn&uuml;pften ressourcen eines statements oder zeigers frei
function octdec $octal_string	der umzuwandelnde oktalstring
function number octdec	dezimaldarstellung von octal_string
function number octdec string $octal_string	oktal zu dezimal umwandlung
function odbc fetch into $rownumber	die zeilennummer
function odbc fetch into $result_array	das array welches das ergebnis aufnehmen soll
function odbc fetch into $result_id	die resource die das abfrageergebnis beinhaltet
function int odbc fetch into	gibt die anzahl der spalten im ergebnis zurück false bei einem fehler
function int odbc fetch into resource $result_id array $result_array int $rownumber	eine ergebniszeile in ein array stellen
function boolean opcache reset	gibt true zurück wenn der opcode cache resettet wurde oder false wenn der cache deaktiviert ist
function boolean opcache reset	resettet den inhalt des opcode caches
function opendir $path	der zu öffnende verzeichnis-pfad
function opendir $context	für die beschreibung des context -parameters konsultieren sie bitte das kapitel streams des manuals
function resource opendir	gibt bei erfolg ein verzeichnis-handle resource zurück im fehlerfalle false
function resource opendir string $path resource $context	&ouml;ffnen eines verzeichnis-handles
function openlog $option	der parameter option wird verwendet um anzuzeigen welchen loggingoptionen bei der generierung einer logmessage verwendet wurden
function openlog $facility	das argument facility wird verwendet um die art des programmes festzulegen das die nachricht loggt
function openlog $ident	die zeichenkette ident wird jeder message hinzugefügt
function bool openlog	gibt bei erfolg true zurück
function bool openlog string $ident int $option int $facility	stellt eine verbindung zum log-dienst des systems her
function openssl csr export to file $outfilename	pfad zur ausgabedatei
function openssl csr export to file $notext	der optionale parameter notext beinflusst die ausführlichkeit der ausgabe
function bool openssl csr export to file	gibt bei erfolg true zurück
function bool openssl csr export to file resource $csr string $outfilename bool $notext	exportiert ein csr in eine datei
function openssl csr export $notext	der optionale parameter notext beinflusst die ausführlichkeit der ausgabe
function bool openssl csr export	gibt bei erfolg true zurück
function bool openssl csr export resource $csr string $out bool $notext	exportiert einen csr als zeichenkette
function openssl csr new $dn	der distinguished name der im zertifikat genutzt werden soll
function openssl csr new $privkey	privkey sollte auf einen privaten schlüssel zeigen der vorher mit openssl_pkey_new() erzeugt wurde oder den sie auf andere weise von der familie der openssl_pkey funktionen erhalten haben
function openssl csr new $configargs	configargs können sie benutzen um zusätzliche konfigurationsoptionen für den csr anzugeben
function mixed openssl csr new	gibt den csr zurück
function mixed openssl csr new array $dn resource $privkey array $configargs array $extraattribs	erzeugt einen csr
function openssl encrypt $raw_output	wenn true übergeben wurde erfolgt die rückgabe unbearbeitet ansonsten wird die rückgabe base64 enkodiert
function openssl encrypt $iv	initialisierungsvektor darf nicht null sein
function openssl encrypt $data	die zu verschlüsselnden daten
function openssl encrypt $method	verschlüsselungsmethode
function openssl encrypt $password	passwort
function string openssl encrypt	gibt nach erfolgreicher verarbeitung die verschlüsselte zeichenkette zurück
function string openssl encrypt string $data string $method string $password bool $raw_output string $iv	verschl&uuml;sselt daten
function string openssl error string	gibt eine fehlermeldung als string zurück oder false sofern keine weiteren fehlermeldungen vorliegen
function string openssl error string	gibt eine openssl fehlermeldung zur&uuml;ck
function void openssl free key resource $key_identifier	free key resource
function openssl open $open_data	bei erfolgreicher ausführung werden die gelesenen daten in diesem parameter zurückgegeben
function bool openssl open	gibt bei erfolg true zurück
function bool openssl open string $sealed_data string $open_data string $env_key mixed $priv_key_id	&ouml;ffnet versiegelte daten
function openssl pkcs12 read $certs	enthält im erfolgsfall die zertifikatsdaten als array
function openssl pkcs12 read $pass	passwort zum entschlüsseln der pkcs#12-datei
function bool openssl pkcs12 read	gibt bei erfolg true zurück
function bool openssl pkcs12 read mixed $PKCS12 array $certs string $pass	speichert ein pkcs#12 zertifikat in einem array
function openssl pkcs7 encrypt $recipcerts	entweder ein einzelnes x
function openssl pkcs7 encrypt $flags	mittels flags können optionen angegeben werden die den verschlüsselungsprozeß beeinflussen
function openssl pkcs7 encrypt $headers	headers ist ein array von headern die den daten nach der verschlüsselung vorangestellt werden
function openssl pkcs7 encrypt $cipherid	mittels cipherid kann seit php5 der schlüssel bestimmt werden
function bool openssl pkcs7 encrypt	gibt bei erfolg true zurück
function bool openssl pkcs7 encrypt string $infile string $outfile mixed $recipcerts array $headers int $flags int $cipherid	verschl&uuml;sseln einer s / mime nachricht
function openssl pkcs7 sign $extracerts	der parameter extracerts gibt den namen einer datei an die ein oder mehrere extra zertifikate enthält die in die unterschrift mit eingefügt werden
function openssl pkcs7 sign $flags	der parameter flags kann zur änderung der ausgabe benutzt werden - siehe pkcs7 konstanten - falls nicht angegeben ist die vorgabe pkcs7_detached
function openssl pkcs7 sign $headers	headers ist ein array aus headern die den daten vorangestellt werden nachdem diese signiert wurden für mehr informationen über das format dieses parameters schauen sie bei der funktion openssl_pkcs7_encrypt() nach
function bool openssl pkcs7 sign	gibt bei erfolg true zurück
function bool openssl pkcs7 sign string $infilename string $outfilename mixed $signcert mixed $privkey array $headers int $flags string $extracerts	signieren einer s / mime message
function openssl pkcs7 verify $outfilename	wird der parameter outfilename angegeben sollte dies eine zeichenkette sein die den namen einer datei enthält in der das zertifikat der unterzeichnenden person im pem format gespeichert wird
function openssl pkcs7 verify $cainfo	der parameter cainfo sollte sofern angegeben informationen über die vertrauenswürdigen ca zertifikate enthalten die für den überprüfungsprozess benutzt werden
function openssl pkcs7 verify $filename	pfad zur datei
function openssl pkcs7 verify $extracerts	wird der parameter extracerts angegeben ist es der name einer datei die ein mehrere extra zertifikate enthält die als nicht vertrauenswürdige cas genutzt werden
function openssl pkcs7 verify $content	content ist der name einer datei die mit den verifizierten daten gefüllt wird jedoch ohne signaturinformationen
function openssl pkcs7 verify $flags	mit dem parameter flags wird beeinflusst auf welche art die signatur verifiziert wird
function mixed openssl pkcs7 verify	gibt true zurück wenn die signatur verifiziert werden konnte false wenn die signatur nicht korrekt ist die daten wurden verändert oder das signierende zertifikat ist ungültig
function mixed openssl pkcs7 verify string $filename int $flags string $outfilename array $cainfo string $extracerts string $content	&uuml;berpr&uuml;ft die unterschrift einer mit s / mime unterschriebenen nachricht
function openssl pkey export to file $configargs	configargs können sie benutzen um den export feiner abzustimmen
function openssl pkey export to file $outfilename	der pfad zur ausgabedatei
function openssl pkey export to file $passphrase	der schlüssel wird optional von einer passphrase geschützt
function bool openssl pkey export to file	gibt bei erfolg true zurück
function bool openssl pkey export to file mixed $key string $outfilename string $passphrase array $configargs	liefert eine exportierbare representation eines schl&uuml;ssels in einer datei
function openssl pkey free $key	die resource die den schlüssel enthält
function void openssl pkey free resource $key	gibt einen privaten schl&uuml;ssel frei
function openssl pkey get details $key	die resource die den schlüssel enthält
function array openssl pkey get details	gibt bei erfolg ein array mit den schlüssel-details zurück oder false im fehlerfall
function array openssl pkey get details resource $key	gibt ein array mit den schl&uuml;ssel-details zur&uuml;ck
function openssl pkey get private $key	als key kann angegeben werden: eine zeichenkette im format file: / / path / to / file
function openssl pkey get private $passphrase	der optionale parameter passphrase muß angegeben werden falls der schlüssel selbst verschlüsselt ist durch eine passphrase geschützt
function resource openssl pkey get private	gibt bei erfolg eine schlüssel-resource zurück false wenn ein fehler auftritt
function resource openssl pkey get private mixed $key string $passphrase	liefert einen privaten schl&uuml;ssel
function openssl pkey get public $certificate	certificate kann folgendes sein: eine x
function resource openssl pkey get public	gibt bei erfolg eine schlüssel-resource zurück false wenn ein fehler auftritt
function resource openssl pkey get public mixed $certificate	extrahiert einen &ouml;ffentlichen schl&uuml;ssel aus einem zertifikat und bereitet diesen zur nutzung vor
function openssl pkey new $configargs	die schlüsselerzeugung können sie mit configargs feiner abstimmen z
function resource openssl pkey new	gibt eine resource für den privaten schlüssel im erfolgsfall zurück andernfalls false
function resource openssl pkey new array $configargs	erzeugt einen neuen privaten schl&uuml;ssel
function openssl public encrypt $key	der öffentliche schlüssel
function openssl public encrypt $padding	für padding ist als standard openssl_pkcs1_padding voreingestellt aber auch openssl_sslv23_padding openssl_pkcs1_oaep_padding oder openssl_no_padding sind zulässige werte
function openssl public encrypt $crypted	hier werden die verschlüsselten daten abgelegt
function bool openssl public encrypt	gibt bei erfolg true zurück
function bool openssl public encrypt string $data string $crypted mixed $key int $padding	verschl&uuml;sselt daten mit einem &ouml;ffentlichen schl&uuml;ssel
function int openssl seal	gibt bei erfolg die länge der verschlüsselten daten zurück; in diesem fall sind die verschlüsselten daten in sealed_data enthalten und env_keys enthält die umschlagschlüssel
function int openssl seal string $data string $sealed_data array $env_keys array $pub_key_ids string $method	versiegelt verschl&uuml;sselt daten
function openssl verify $signature_alg	int - einer von diesen signatur-algorithmen
function openssl verify $signature	ein roher binär-string erzeugt durch openssl_sign() oder ähnliche mittel
function openssl verify $pub_key_id	resource - ein von openssl_get_publickey() zurück gegebener schlüssel string - ein pem formatierter schlüssel zum beispiel -----begin public key----- miibcgk
function openssl verify $data	der daten-string der verwendet wurde um die signatur zuvor zu erstellen
function int openssl verify	gibt für eine korrekte signatur 1 zurück 0 für eine unkorrekte und -1 falls ein fehler aufgetreten ist
function int openssl verify string $data string $signature mixed $pub_key_id mixed $signature_alg	&uuml;berpr&uuml;ft eine signatur
function openssl x509 check private key $key	der private schlüssel
function openssl x509 check private key $cert	das zertifikat
function bool openssl x509 check private key	gibt true zurück wenn key der private schlüssel zum zertifikat cert ist andernfalls false
function bool openssl x509 check private key mixed $cert mixed $key	&uuml;berpr&uuml;ft ob ein privater schl&uuml;ssel zu einem zertifikat passt
function openssl x509 checkpurpose $cainfo	cainfo sollte ein array von vertrauenswürdigen ca-dateien / -verzeichnissen sein wie in zertifikatprüfung beschrieben
function openssl x509 checkpurpose $untrustedfile	wenn angegeben sollte dies der name einer pem-kodierten datei sein die zertifikate enthält die bei der prüfung des zertifikats helfen können
function openssl x509 checkpurpose $x509cert	das zu prüfende zertifikat
function int openssl x509 checkpurpose	gibt true zurück wenn das zertifikat für den angegebenen zweck benutzt werden kann ansonsten false ; im falle eines fehlers wird -1 zurückgegeben
function int openssl x509 checkpurpose mixed $x509cert int $purpose array $cainfo string $untrustedfile	&uuml;berpr&uuml;ft ob ein zertifikat f&uuml;r einen bestimmten zweck benutzt werden kann
function openssl x509 export to file $notext	der optionale parameter notext beinflusst die ausführlichkeit der ausgabe
function openssl x509 export to file $x509	siehe schlüssel- / zertifikatsparameter für eine auflistung der gültigen werte
function openssl x509 export to file $outfilename	pfad zur ausgabe-datei
function bool openssl x509 export to file	gibt bei erfolg true zurück
function bool openssl x509 export to file mixed $x509 string $outfilename bool $notext	exportiert ein zertifikat in eine datei
function openssl x509 parse $shortnames	der parameter shortnames kontrolliert wie die daten im array indiziert werden
function array openssl x509 parse	die struktur der zurückgegeben daten ist absichtlich noch nicht dokumentiert da es noch änderungen geben wird
function array openssl x509 parse mixed $x509cert bool $shortnames	parst ein x
function resource openssl x509 read	gibt im erfolgsfall eine ressource zurück
function resource openssl x509 read mixed $x509certdata	parst ein x
function ord $string	ein zeichen
function int ord	gibt den ascii-wert als integer zurück
function int ord string $string	gibt den ascii-wert eines zeichens zur&uuml;ck
function pack $format	die zeichenkette format besteht aus format-codes gefolgt von einem optionalen wiederholungs-argument
function string pack	gibt die daten als binär-zeichenkette zurück
function string pack string $format mixed $args	packt daten in eine bin&auml;r-zeichenkette
function parse ini file $scanner_mode	kann entweder ini_scanner_normal standard oder ini_scanner_raw sein
function parse ini file $filename	der dateiname der zu ladenden ini-datei
function parse ini file $process_sections	setzt man den parameter process_sections auf true erhält man ein mehrdimensionales array mit den gruppennamen und einstellungen
function array parse ini file	im erfolgsfall werden die einstellungen als assoziatives array zurückgegeben ansonsten false
function array parse ini file string $filename bool $process_sections int $scanner_mode	parst eine konfigurationsdatei
function parse ini string $scanner_mode	kann entweder ini_scanner_normal normal oder ini_scanner_raw sein
function parse ini string $ini	der inhalt der ini-datei die analysiert wird
function parse ini string $process_sections	ist der parameter process_sections als true gesetzt werden sie ein mehrdimensionales array zurückbekommen welches die abschnitte und einstellungen enthält
function array parse ini string	die einstellungen werden als assoziatives array bei erfolg und false bei einem fehler zurückgegeben
function array parse ini string string $ini bool $process_sections int $scanner_mode	analysiert einen konfigurations-string
function passthru $command	das auszuführende programm
function passthru $return_var	ist der parameter return_var angegeben wird der rückgabestatus des unix-befehls hier abgelegt
function void passthru string $command int $return_var	f&uuml;hrt ein externes programm aus und zeigt dessen ausgabe an
function password get info $hash	ein hash der durch password_hash() erzeugt wurde
function array password get info	gibt ein assoziatives array mit drei elementen zurück: algo dies ist eine der passwort-algorithmus-konstanten algoname dies ist der lesbare name des algorithmus options dies enthält die optionen die password_hash() übergeben wurden
function array password get info string $hash	gibt informationen &uuml;ber einen hash zur&uuml;ck
function password hash $algo	eine konstante für den passwort-algorithmus die den algorithmus zum hashen des passwortes angibt
function password hash $options	ein assoziatives array mit optionen
function password hash $password	das passwort des benutzers
function string password hash	returns the hashed password im fehlerfall wird false zurückgegeben
function string password hash string $password integer $algo array $options	erstellt einen passwort-hash
function password needs rehash $algo	eine konstante für den passwort-algorithmus die den algorithmus zum hashen des passwortes angibt
function password needs rehash $options	ein assoziatives array mit optionen
function password needs rehash $hash	ein hash der durch password_hash() erzeugt wurde
function boolean password needs rehash	gibt true zurück falls der hash erneut gehasht werden muss damit die übergebenen parameter algo und options übereinstimmen sonst false
function boolean password needs rehash string $hash string $algo string $options	&uuml;berpr&uuml;ft ob der &uuml;bergebene hash mit den &uuml;bergebenen optionen &uuml;bereinstimmt
function password verify $password	das passwort des benutzers
function password verify $hash	ein hash der durch password_hash() erzeugt wurde
function boolean password verify	gibt true zurück falls password und hash zusammenpassen sonst false
function boolean password verify string $password string $hash	&uuml;berpr&uuml;ft ob ein passwort und ein hash zusammenpassen
function pathinfo $options	falls angegeben wird nur dieses eine element zurückgegeben
function pathinfo $path	der zu analysierende dateipfad
function mixed pathinfo	falls der options -parameter nicht angegeben wird wird ein assoziatives array mit den folgenden elementen zurückgegeben: dirname basename extension falls vorhanden und filename
function mixed pathinfo string $path int $options	liefert informationen &uuml;ber einen dateipfad
function pclose $handle	der dateizeiger muss gültig und durch einen erfolgreichen funktionsaufruf von popen() zurückgegeben worden sein
function int pclose	gibt den end-status des ausgeführten prozesses zurück
function int pclose resource $handle	schlie&szlig;t einen prozess-dateizeiger
function pcntl wstopsig $status	der status -parameter entspricht dem statusparameter der für einen erfolgreichen aufruf von pcntl_waitpid() verwendet wird
function int pcntl wstopsig	gibt die signalnummer als integer zurück
function int pcntl wstopsig int $status	gibt das signal zur&uuml;ck welches das anhalten des kindes verursachte
function pcntl wtermsig $status	der status -parameter entspricht dem statusparameter der für einen erfolgreichen aufruf von pcntl_waitpid() verwendet wird
function int pcntl wtermsig	gibt die signalnummer als integer zurück
function int pcntl wtermsig int $status	gibt das signal zur&uuml;ck welches das beenden des kindes verursachte
function bool PDF activate item resource $pdfdoc int $id	aktiviert ein strukturelement oder einen anderen dokumentbestandteil
function bool PDF add locallink resource $pdfdoc float $lowerleftx float $lowerlefty float $upperrightx float $upperrighty int $page string $dest	f&uuml;gt verkn&uuml;pfung auf aktueller seite ein [veraltet nicht empfohlen]
function int PDF add textflow resource $pdfdoc int $textflow string $text string $optlist	erzeugt ein textflussobjekt oder f&uuml;gt text zu einem textflussobjekt hinzu
function bool PDF add thumbnail resource $pdfdoc int $image	f&uuml;gt ein verkleinertes bild auf der aktuellen seite ein
function bool PDF add weblink resource $pdfdoc float $lowerleftx float $lowerlefty float $upperrightx float $upperrighty string $url	f&uuml;gt web-verkn&uuml;pfung auf der aktuellen seite ein [veraltet nicht empfohlen]
function bool PDF arc resource $p float $x float $y float $r float $alpha float $beta	zeichnet kreissegment gegen uhrzeigersinn
function int PDF begin item resource $pdfdoc string $tag string $optlist	&ouml;ffnet ein strukturelement oder anderen dokumentbestandteil
function bool PDF begin page ext resource $pdfdoc float $width float $height string $optlist	beginnt neue seite
function int PDF begin pattern resource $pdfdoc float $width float $height float $xstep float $ystep int $painttype	beginnt eine f&uuml;llmusterdefinition
function int PDF begin template ext resource $pdfdoc float $width float $height string $optlist	beginnt eine templatedefinition
function int PDF begin template resource $pdfdoc float $width float $height	beginnt templatedefinition [veraltet nicht empfohlen]
function bool PDF clip resource $p	setzt den aktuellen pfad als clipping-pfad
function bool PDF close pdi page resource $p int $page	schlie&szlig;t das seitenhandle
function bool PDF close pdi resource $p int $doc	schlie&szlig;t das pdf-importdokument [veraltet nicht empfohlen]
function bool PDF close resource $p	schlie&szlig;t die pdf-ressource [veraltet nicht empfohlen]
function bool PDF closepath resource $p	schlie&szlig;t den aktuellen pfad
function bool PDF concat resource $p float $a float $b float $c float $d float $e float $f	verkn&uuml;pft eine matrix mit der ctm
function bool PDF continue text resource $p string $text	gibt text in der n&auml;chsten zeile aus
function bool PDF create annotation resource $pdfdoc float $llx float $lly float $urx float $ury string $type string $optlist	erzeugt eine rechteckige anmerkung
function int PDF create bookmark resource $pdfdoc string $text string $optlist	erstellt ein lesezeichen
function int PDF create gstate resource $pdfdoc string $optlist	erzeugt grafikzustandsobjekt
function int PDF create textflow resource $pdfdoc string $text string $optlist	erzeugt textflussobjekt
function bool PDF curveto resource $p float $x1 float $y1 float $x2 float $y2 float $x3 float $y3	zeichnet b&eacute;zier-kurve
function int PDF define layer resource $pdfdoc string $name string $optlist	erzeugt ebenendefinition
function int PDF delete pvf resource $pdfdoc string $filename	l&ouml;scht virtuelle pdflib-datei
function int PDF delete table resource $pdfdoc int $table string $optlist	l&ouml;scht tabellenobjekt
function bool PDF delete resource $pdfdoc	l&ouml;scht pdflib-objekt
function bool PDF encoding set char resource $pdfdoc string $encoding int $slot string $glyphname int $uv	f&uuml;gt glyphennamen und / oder unicode-wert hinzu
function bool PDF end document resource $pdfdoc string $optlist	schlie&szlig;t pdf-datei
function bool PDF end font resource $pdfdoc	beendet type-3-schriftdefinition
function bool PDF end glyph resource $pdfdoc	beendet type-3-glyphendefinition
function bool PDF end item resource $pdfdoc int $id	schlie&szlig;t strukturelement oder anderen dokumentbestandteil
function bool PDF end layer resource $pdfdoc	deaktiviert alle aktiven ebenen
function bool PDF end page ext resource $pdfdoc string $optlist	beendet seite
function bool PDF end page resource $p	beendet seite
function bool PDF end pattern resource $p	beendet f&uuml;llmuster
function bool PDF endpath resource $p	beendet aktuellen pfad
function int PDF fill pdfblock resource $pdfdoc int $page string $blockname int $contents string $optlist	f&uuml;llt pdf-block mit variablen daten
function int PDF fill textblock resource $pdfdoc int $page string $blockname string $text string $optlist	f&uuml;llt text-block mit variablen daten
function bool PDF fit image resource $pdfdoc int $image float $x float $y string $optlist	platziert bild oder template
function string PDF fit table resource $pdfdoc int $table float $llx float $lly float $urx float $ury string $optlist	platziert tabelle auf der seite
function string PDF fit textflow resource $pdfdoc int $textflow float $llx float $lly float $urx float $ury string $optlist	passt textfluss in rechteckigen bereich ein
function bool PDF fit textline resource $pdfdoc int $text float $x float $y string $optlist	platziert einzelne textzeile
function string PDF get apiname resource $pdfdoc	ermittelt namen von gescheiterter api-funktion
function string PDF get errmsg resource $pdfdoc	ermittelt fehlertext
function int PDF get majorversion	ermittelt hauptversionsnummer veraltet
function int PDF get minorversion	ermittelt unterversionsnummer veraltet
function string PDF get parameter resource $p string $key float $modifier	ermittelt string-parameter
function string PDF get pdi parameter resource $p string $key int $doc int $page int $reserved	ermittelt pdi string-parameter veraltet
function float PDF get pdi value resource $p string $key int $doc int $page int $reserved	ermittelt numerischen pdi-parameter veraltet
function float PDF info matchbox resource $pdfdoc string $boxname int $num string $keyword	fragt matchbox-informationen ab
function float PDF info table resource $pdfdoc int $table string $keyword	fragt tabellen-informationen ab
function float PDF info textline resource $pdfdoc string $text string $keyword string $optlist	formatiert textzeile und ermittelt metrikdaten
function bool PDF initgraphics resource $p	setzt grafikzustand zur&uuml;ck
function bool PDF lineto resource $p float $x float $y	zeichnet linie
function int PDF load font resource $pdfdoc string $fontname string $encoding string $optlist	sucht und bereitet schrift vor
function int PDF makespotcolor resource $p string $spotname	erstellt schmuckfarbe
function bool PDF open file resource $p string $filename	erzeugt pdf-datei veraltet
function int PDF open pdi document resource $p string $filename string $optlist	bereited ein pdi dokument vor
function int PDF open pdi resource $pdfdoc string $filename string $optlist int $len	&ouml;ffnet pdf-datei veraltet
function double PDF pcos get number resource $pdfdoc long $doc string $path	ermittelt wert eines pcos-pfades vom typ zahl oder boolean
function string PDF pcos get stream resource $pdfdoc long $doc string $optlist string $path	ermittelt inhalt eines pcos-pfades vom typ stream fstream oder string
function string PDF pcos get string resource $p int $doc string $path	ermittelt wert eines pcos-pfades vom typ name string oder boolean
function bool PDF place pdi page resource $pdfdoc int $page float $x float $y float $sx float $sy	platziert pdf-seite veraltet
function int PDF process pdi resource $pdfdoc int $doc int $page string $optlist	verarbeitet importiertes pdf-dokument
function bool PDF rect resource $p float $x float $y float $width float $height	zeichnet rechteck
function bool PDF restore resource $p	stellt grafikzustand wieder her
function bool PDF resume page resource $pdfdoc string $optlist	setzt seite fort
function bool PDF rotate resource $p float $phi	dreht koordinatensystem
function bool PDF save resource $p	speichert grafikzustand
function bool PDF scale resource $p float $sx float $sy	skaliert koordinatensystem
function bool PDF set border color resource $p float $red float $green float $blue	legt randfarbe von anmerkungen fest veraltet
function bool PDF set border dash resource $pdfdoc float $black float $white	legt strichmuster f&uuml;r rand von anmerkungen fest veraltet
function bool PDF set border style resource $pdfdoc string $style float $width	legt randstil von anmerkungen fest veraltet
function bool PDF set gstate resource $pdfdoc int $gstate	aktiviert grafikzustandsobjekt
function bool PDF set info resource $p string $key string $value	f&uuml;llt dokumentinfofeld
function bool PDF set layer dependency resource $pdfdoc string $type string $optlist	definiert beziehungen zwischen ebenen
function bool PDF set parameter resource $p string $key string $value	legt string-parameter fest
function bool PDF set text pos resource $p float $x float $y	legt aktuelle textposition fest
function bool PDF set value resource $p string $key float $value	legt numerischen parameter fest
function bool PDF setcolor resource $p string $fstype string $colorspace float $c1 float $c2 float $c3 float $c4	legt f&uuml;ll- und zeichenfarbe fest
function bool PDF setdashpattern resource $pdfdoc string $optlist	legt strichmuster fest
function bool PDF setflat resource $pdfdoc float $flatness	legt flatness-parameter fest
function bool PDF setfont resource $pdfdoc int $font float $fontsize	legt aktuelle schrift fest
function bool PDF setgray fill resource $p float $g	legt f&uuml;llfarbe als grauwert fest veraltet
function bool PDF setgray stroke resource $p float $g	left zeichenfarbe als grauwert fest veraltet
function bool PDF setlinecap resource $p int $linecap	legt linecap-parameter fest
function bool PDF setlinejoin resource $p int $value	legt linejoin-parameter fest
function bool PDF setlinewidth resource $p float $width	legt aktuelle strichst&auml;rke fest
function bool PDF setmatrix resource $p float $a float $b float $c float $d float $e float $f	legt aktuelle transformationsmatrix fest
function bool PDF setmiterlimit resource $pdfdoc float $miter	legt gehrungsgrenzwert fest
function bool PDF setrgbcolor fill resource $p float $red float $green float $blue	legt f&uuml;llfarbe in rgb fest veraltet
function bool PDF setrgbcolor resource $p float $red float $green float $blue	legt f&uuml;ll- und zeichenfarbe in rgb fest veraltet
function int PDF shading pattern resource $pdfdoc int $shading string $optlist	definiert farbverlaufsmuster
function bool PDF shfill resource $pdfdoc int $shading	f&uuml;llt bereich mit farbverlauf
function bool PDF show xy resource $p string $text float $x float $y	gibt text an der angegebenen position aus
function bool PDF show resource $pdfdoc string $text	gibt text an der aktueller position aus
function bool PDF skew resource $p float $alpha float $beta	verzerrt koordinatensystem
function float PDF stringwidth resource $p string $text int $font float $fontsize	gibt textbreite zur&uuml;ck
function bool PDF stroke resource $p	zeichnet pfad
function string PDF utf16 to utf8 resource $pdfdoc string $utf16string	konvertiert string von utf-16 nach utf-8
function string PDF utf32 to utf16 resource $pdfdoc string $utf32string string $ordering	konvertiert string von utf-32 nach utf-16
function pg cancel query $connection	postgresql verbindungskennung
function bool pg cancel query	gibt bei erfolg true zurück
function bool pg cancel query resource $connection	l&ouml;scht eine asynchrone abfrage
function pg client encoding $connection	postgresql verbindungskennung
function string pg client encoding	die kodierung des clients oder false bei einem fehler
function string pg client encoding resource $connection	gibt die kodierung des clients zur&uuml;ck
function pg connect $connect_type	wenn pgsql_connect_force_new übergeben wird wird eine neue verbindung aufgebaut auch wenn der connection_string identisch zu der aktuell geöffneten verbindung ist
function pg connect $connection_string	der connection_string darf leer sein dann werden standard-parameter benutzt
function resource pg connect	bei erfolg wird eine postgresql-verbindungskennung zurückgegeben oder false bei einem fehler
function resource pg connect string $connection_string int $connect_type	&ouml;ffnet eine postgresql-verbindung
function pg connection busy $connection	postgresql verbindungskennung
function bool pg connection busy	gibt true zurück falls die verbindung gerade benutzt wird ansonsten false
function bool pg connection busy resource $connection	gibt den status der verbindung zur&uuml;ck busy / not busy)
function pg connection reset $connection	postgresql verbindungskennung
function bool pg connection reset	gibt bei erfolg true zurück
function bool pg connection reset resource $connection	setzt die verbindung zur&uuml;ck und verbindet neu
function pg convert $table_name	name der tabelle für die die arrayelemente konvertiert werden
function pg convert $connection	postgresql verbindungskennung
function pg convert $assoc_array	die daten die konvertiert werden
function pg convert $options	beliebige kombination der konstanten pgsql_conv_ignore_default pgsql_conv_force_null oder pgsql_conv_ignore_not_null
function array pg convert	ein array mit den konvertierten werten oder false falls ein fehler auftrat
function array pg convert resource $connection string $table_name array $assoc_array int $options	konvertiert die werte eines assoziativen arrays in passende werte f&uuml;r sql-kommandos
function pg copy from $connection	postgresql verbindungskennung
function pg copy from $delimiter	der feldbegrenzer mit dem die werte in den elementen von rows separiert werden
function pg copy from $null_as	bestimmt wie sql null werte in rows dargestellt werden
function pg copy from $table_name	name der tabelle in die die rows eingefügt werden
function pg copy from $rows	ein array mit werten die in die table_name eingefügt werden
function bool pg copy from	gibt bei erfolg true zurück
function bool pg copy from resource $connection string $table_name array $rows string $delimiter string $null_as	f&uuml;gt datens&auml;tze aus einem array in eine tabelle ein
function pg copy to $table_name	name der tabelle aus der die daten in das array rows kopiert werden
function pg copy to $connection	postgresql verbindungskennung
function pg copy to $delimiter	der feldbegrenzer mit dem die werte in den elementen von rows separiert werden
function pg copy to $null_as	bestimmt wie sql null werte in rows dargestellt werden
function array pg copy to	die funktion gibt ein array zurück in dem jedes element eine zeile der mit copy erzeugten daten enthält
function array pg copy to resource $connection string $table_name string $delimiter string $null_as	kopiert eine tabelle in ein array
function pg dbname $connection	postgresql verbindungskennung
function string pg dbname	ein string mit dem namen der datenbank zu der eine connection besteht oder false falls ein fehler auftrat
function string pg dbname resource $connection	gibt den namen der datenbank zur&uuml;ck
function pg delete $connection	postgresql verbindungskennung
function pg delete $table_name	name der tabelle aus der zeilen gelöscht werden
function pg delete $assoc_array	ein array dessen schlüssel den feldnamen der tabelle table_name entsprechen und dessen werte den zu löschenden spaltenwerten entsprechen
function pg delete $options	jede kombination aus pgsql_conv_force_null pgsql_dml_no_conv pgsql_dml_escape pgsql_dml_exec pgsql_dml_async oder pgsql_dml_string
function mixed pg delete	gibt bei erfolg true zurück
function mixed pg delete resource $connection string $table_name array $assoc_array int $options	l&ouml;scht datens&auml;tze
function pg escape bytea $connection	postgresql verbindungskennung
function pg escape bytea $data	ein string der text oder binärdaten enthält die in eine spalte vom typ bytea eingefügt werden sollen
function string pg escape bytea	ein string mit den maskierten daten
function string pg escape bytea resource $connection string $data	maskiert zeichenketten zum einf&uuml;gen in ein feld vom typ bytea
function pg escape literal $connection	postgresql database connection resource
function pg escape literal $data	a string containing text to be escaped
function string pg escape literal	a string containing the escaped data
function string pg escape literal resource $connection string $data	escape a literal for insertion into a text field
function pg execute $connection	postgresql verbindungskennung
function pg execute $stmtname	der name der vorbereiteten abfrage die ausgeführt werden soll
function pg execute $params	ein array das die parameter enthält mit denen die platzhalter $1 $2 usw
function resource pg execute	bei erfolg wird eine ergebniskennung zurückgegeben
function resource pg execute resource $connection string $stmtname array $params	fordert den datenankserver auf eine vorbereitete anfrage mit den angegebenen parametern auszuf&uuml;hren und wartet auf das ergebnis
function pg fetch all $result	postgresql-verbindungskennung die unter anderem von den funktionen pg_query() pg_query_params() oder pg_execute() zurückgegeben wurde
function array pg fetch all	ein array mit allen zeilen des abfrageergebnisses
function array pg fetch all resource $result	gibt alle zeilen eines abfrageergebnisses als array zur&uuml;ck
function pg fetch result $result	postgresql verbindungskennung die unter anderem von den funktionen pg_query() pg_query_params() oder pg_execute() zurückgegeben wurde
function pg fetch result $row	die nummer der zeile des abfrageergebnisses die geholt werden soll
function pg fetch result $field	ein string der den feldnamen des gewünschten feldes enthält oder dessen numerischen feldindex beginnend bei 0
function string pg fetch result	boolesche werte werden als t oder f zurückgegeben
function string pg fetch result resource $result int $row mixed $field	liefert werte aus einer ergebnismenge
function pg fetch row $result	postgresql verbindungskennung die unter anderem von den funktionen pg_query() pg_query_params() oder pg_execute() zurückgegeben wurde
function pg fetch row $row	die nummer der zeile des abfrageergebnisses die geholt werden soll
function array pg fetch row	die gelesene zeile des abfrageergebnisses datensatz wird als numerisches array beginnend bei offset 0 zurückgegeben das die spaltenwerte in den arraykomponenten enthält
function array pg fetch row resource $result int $row	holt einen datensatz als numerisches array
function pg field name $result	postgresql verbindungskennung die unter anderem von den funktionen pg_query() pg_query_params() oder pg_execute() zurückgegeben wurde
function pg field name $field_number	die feldnummer beginnend bei 0
function string pg field name	der feldname oder false falls ein fehler auftrat
function string pg field name resource $result int $field_number	gibt den namen eines feldes zur&uuml;ck
function pg field num $field_name	der feldname
function pg field num $result	postgresql verbindungskennung die unter anderem von den funktionen pg_query() pg_query_params() oder pg_execute() zurückgegeben wurde
function int pg field num	die feldnummer beginnend bei 0 oder -1 falls ein fehler auftrat
function int pg field num resource $result string $field_name	gibt die feldnummer des angegebenen feldes zur&uuml;ck
function pg field size $result	postgresql verbindungskennung die unter anderem von den funktionen pg_query() pg_query_params() oder pg_execute() zurückgegeben wurde
function pg field size $field_number	die feldnummer beginnend bei 0
function int pg field size	die interne größe des feldes in byte
function int pg field size resource $result int $field_number	gibt den belegten speicher f&uuml;r ein feld zur&uuml;ck
function pg field table $field_number	index des feldes beginnend bei 0
function pg field table $result	postgresql-verbindungskennung die unter anderem von den funktionen pg_query() pg_query_params() oder pg_execute() zurückgegeben wurde
function pg field table $oid_only	in der standardeinstellung wird der name der tabelle zurückgegeben zu der dieses feld gehört
function mixed pg field table	bei erfolg wird entweder der name oder der oid der tabelle zurückgegeben
function mixed pg field table resource $result int $field_number bool $oid_only	gibt zu einem feldnamen den namen der tabelle oder deren oid zur&uuml;ck in der das feld definiert ist
function pg field type oid $result	postgresql verbindungskennung die unter anderem von den funktionen pg_query() pg_query_params() oder pg_execute() zurückgegeben wurde
function pg field type oid $field_number	die feldnummer beginnend bei 0
function int pg field type oid	den oid object identifier des basistyps dieses feldes oder false falls ein fehler auftritt
function int pg field type oid resource $result int $field_number	gibt die id des postgresql-datentyps oid eines feldes zur&uuml;ck
function pg field type $field_number	die feldnummer beginnend bei 0
function pg field type $result	postgresql verbindungskennung die unter anderenm von den funktionen pg_query() pg_query_params() oder pg_execute() zurückgegeben wurde
function string pg field type	ein string der den datentyp des feldes enthält oder false; falls ein fehler auftrat
function string pg field type resource $result int $field_number	gibt den datentyp eines feldes zur&uuml;ck
function pg get result $connection	postgresql verbindungskennung
function resource pg get result	die ergebniskennung als resource or false falls es keine ergebnisse gibt
function resource pg get result resource $connection	gibt asynchrone abfrageergebnisse zur&uuml;ck
function pg host $connection	postgresql verbindungskennung die unter anderem von den funktionen pg_query() pg_query_params() oder pg_execute() zurückgegeben wurde
function string pg host	ein string der den namen des hosts enthält zu dem die connection besteht oder false falls ein fehler auftrat
function string pg host resource $connection	gibt den namen des host zur&uuml;ck zu dem verbunden wurde
function pg insert $table_name	name der tabelle in die die zeilen eingefügt werden sollen
function pg insert $connection	postgresql verbindungskennung
function pg insert $assoc_array	ein array dessen indizes feldnamen von table_name sind und dessen werte in die entprechenden spalten eingefügt werden
function pg insert $options	jede kombination aus pgsql_conv_opts pgsql_dml_no_conv pgsql_dml_escape pgsql_dml_exec pgsql_dml_async oder pgsql_dml_string
function mixed pg insert	gibt bei erfolg true zurück
function mixed pg insert resource $connection string $table_name array $assoc_array int $options	&uuml;bertr&auml;gt werte aus einem array in eine tabelle
function pg last error $connection	postgresql verbindungkennung
function string pg last error	ein string der die letzte fehlermeldung der aktuellen connection enthält oder false falls ein fehler auftrat
function string pg last error resource $connection	gibt die letzte fehlermeldung einer verbindung zur&uuml;ck
function pg last notice $connection	postgresql verbindungskennung
function string pg last notice	ein string der die letzte notice-meldung für die übergebene connection enthält oder false falls ein fehler auftrat
function string pg last notice resource $connection	gibt die letzte notice-meldung des postgresql-servers zur&uuml;ck
function pg last oid $result	postgresql abfrageergebnis das unter anderem von pg_query() pg_query_params() oder pg_execute() zurückgegeben wurde
function string pg last oid	ein string mit der oid des zuletzt eingefügten datensatzes für die angegebene connection oder false falls ein fehler auftrat oder falls es keine oid gibt
function string pg last oid resource $result	gibt den objektbezeichner oid des zuletzt eingef&uuml;gten datensatzes zur&uuml;ck
function pg lo create $connection	postgresql verbindungkennung
function pg lo create $object_id	wenn es einen parameter object_id gibt wird diese funktion versuchen ein large object mit dieser id zu erzeugen
function int pg lo create	ein large object oid oder false falls ein fehler auftrat
function int pg lo create resource $connection mixed $object_id	erzeugt ein large object
function pg lo import $connection	postgresql verbindungskennung
function pg lo import $pathname	der vollständige pfad- und dateiname der datei im lokalen dateisystem des clients aus der die daten des large objects gelesen werden
function pg lo import $object_id	wenn es einen parameter object_id gibt wird diese funktion versuchen ein large object mit dieser id zu erzeugen
function int pg lo import	der oid des neu erzeugten large objects oder false wenn ein fehler auftrat
function int pg lo import resource $connection string $pathname mixed $object_id	importiert ein large object aus einer datei
function pg lo read all $large_object	postgresql large object ressource lob die von der funktion pg_lo_open() zurückgegeben wurde
function int pg lo read all	die anzahl der gelesenen bytes oder false falls ein fehler auftrat
function int pg lo read all resource $large_object	liest ein large object vollst&auml;ndig und reicht es direkt an den browser weiter
function pg lo read $len	die optionale maximale anzahl der zu lesenden bytes
function pg lo read $large_object	postgresql large object ressource lob die von der funktion pg_lo_open() zurückgegeben wurde
function string pg lo read	ein string der len bytes aus dem large object enthält oder false falls ein fehler auftritt
function string pg lo read resource $large_object int $len	liest ein large object
function pg lo seek $offset	die anzahl der bytes hinter die der interne zeiger gesetzt wird
function pg lo seek $large_object	postgresql large object ressource lob die von der funktion pg_lo_open() zurückgegeben wurde
function pg lo seek $whence	eine der konstanten pgsql_seek_set bewegt den internen zeiger vom anfang ausgehend pgsql_seek_cur bewegt den internen zeiger ab der aktuellen position oder pgsql_seek_end bewegt den internen zeiger vom ende ausgehend
function bool pg lo seek	gibt bei erfolg true zurück
function bool pg lo seek resource $large_object int $offset int $whence	setzt die lese- oder schreibposition in einem large object
function pg lo tell $large_object	postgresql large object ressource lob die von der funktion pg_lo_open() zurückgegeben wurde
function int pg lo tell	die aktuelle lese- oder schreibposition in einem in bytes vom anfang des large objects aus
function int pg lo tell resource $large_object	gibt die aktuelle lese- oder schreibposition in einem large object zur&uuml;ck
function pg lo unlink $connection	postgresql verbindungkennung
function pg lo unlink $oid	der oid des large objects in der datenbank
function bool pg lo unlink	gibt bei erfolg true zurück
function bool pg lo unlink resource $connection int $oid	l&ouml;scht ein large object
function pg lo write $len	die maximale anzahl der bytes die geschrieben werden
function pg lo write $large_object	postgresql large object ressource lob die von der funktion pg_lo_open() zurückgegeben wurde
function pg lo write $data	die daten die in das large object geschrieben werden
function int pg lo write	die anzahl der bytes die in das large object geschrieben wurden oder false falls ein fehler auftrat
function int pg lo write resource $large_object string $data int $len	schreibt in ein large object
function pg meta data $connection	postgresql verbindungskennung
function pg meta data $extended	flag um erweiterte metadaten zurückzugeben
function pg meta data $table_name	der tabellenname
function array pg meta data	ein array das die tabellendefinition enthält oder false falls ein fehler auftrat
function array pg meta data resource $connection string $table_name bool $extended	gibt metadaten einer tabelle als array zur&uuml;ck
function pg num fields $result	postgresql ergebniskennung für eine abfrage die unter anderem von pg_query() pg_query_params() oder pg_execute() zurückgegeben wurde
function int pg num fields	die anzahl der felder spalten in einem abfrageergebnis
function int pg num fields resource $result	gibt die anzahl der felder in einem abfrageergebnis zur&uuml;ck
function pg num rows $result	postgresql ergebniskennung für eine abfrage die unter anderem von pg_query() pg_query_params() oder pg_execute() zurückgegeben wurde
function int pg num rows	die anzahl der zeilen in einem abfrageergebnis
function int pg num rows resource $result	gibt die anzahl der zeilen in einem abfrageergebnis zur&uuml;ck
function pg options $connection	postgresql verbindungkennung
function string pg options	ein string der die verbindungsoptionen von connection enthält oder false falls ein fehler auftritt
function string pg options resource $connection	gibt die verbindungsoptionen der aktuellen verbindung zur&uuml;ck
function pg pconnect $connect_type	falls pgsql_connect_force_new übergeben wurde wird eine neue verbindung aufgebaut auch wenn der connection_string identisch zu dem einer existierenden verbindung ist
function pg pconnect $connection_string	der connection_string kann leer sein um die standardwerte für die parameter zu benutzen
function resource pg pconnect	bei erfolg wird eine postgresql-verbindungskennung zurückgegeben oder false falls ein fehler auftrat
function resource pg pconnect string $connection_string int $connect_type	&ouml;ffnet eine persistente postgresql-verbindung
function pg ping $connection	postgresql verbindungkennung
function bool pg ping	gibt bei erfolg true zurück
function bool pg ping resource $connection	pr&uuml;ft die datenbankverbindung
function pg port $connection	postgresql verbindungkennung
function int pg port	ein ganzzahliger wert vom typ int der die portnummer angibt über die die connection zum postgresql datenbankserver aufgebaut wurde oder false falls ein fehler auftrat
function int pg port resource $connection	gibt die portnummer zur&uuml;ck &uuml;ber die die verbindung aufgebaut wurde
function pg prepare $stmtname	der name unter dem die vorbereitete abfrage gespeichert wird
function pg prepare $connection	postgresql verbindungskennung
function pg prepare $query	die parametrisierte vorbereitete abfrage
function resource pg prepare	bei erfolg wird eine ergebniskennung zurückgegeben
function resource pg prepare resource $connection string $stmtname string $query	sendet eine aufforderung an den server eine vorbereitete anfrage mit den &uuml;bergebenen parametern zu erzeugen und wartet auf ihre beendigung
function pg query params $params	ein array mit parameterwerten mit denen die platzhalter $1 $2 usw
function pg query params $connection	postgresql verbindungskennung
function pg query params $query	die parametrisierte abfrage
function resource pg query params	bei erfolg wird eine ergebniskennung zurückgegeben
function resource pg query params resource $connection string $query array $params	sendet ein kommando zum server und wartet seine ausf&uuml;hrung ab
function pg result seek $result	postgresql ergebniskennung die unter anderem von pg_query() pg_query_params() oder pg_execute() zurückgegeben wurde
function pg result seek $offset	zeile in result auf die der interne datensatzzeiger gesetzt werden soll
function bool pg result seek	gibt bei erfolg true zurück
function bool pg result seek resource $result int $offset	setzt den internen datensatzzeiger auf die angegebene position in einem abfrageergebnis
function pg result status $result	postgresql ergebniskennung die unter anderem von den funktionen pg_query() pg_query_params() oder pg_execute() zurückgegeben wurde
function pg result status $type	entweder pgsql_status_long um die statusnummer von result zu erhalten oder pgsql_status_string um das postgresql kommando-tag für das result zu erhalten
function mixed pg result status	mögliche rückgabewerte sind pgsql_empty_query pgsql_command_ok pgsql_tuples_ok pgsql_copy_out pgsql_copy_in pgsql_bad_response pgsql_nonfatal_error und pgsql_fatal_error falls pgsql_status_long angegeben wurde
function mixed pg result status resource $result int $type	gibt den status eines abfrageergebnisses zur&uuml;ck
function pg send execute $stmtname	der name der auszuführenden vorbereiteten abfrage
function pg send execute $params	ein array mit parameterwerten mit denen die platzhalter $1 $2 usw
function pg send execute $connection	postgresql verbindungkennung
function bool pg send execute	gibt bei erfolg true zurück oder false falls ein fehler auftrat
function bool pg send execute resource $connection string $stmtname array $params	sendet eine aufforderung an den server eine vorbereitete abfrage mit den &uuml;bergebenen parametern auszuf&uuml;hren ohne auf die ergebnisse zu warten
function pg send prepare $connection	postgresql verbindungskennung
function pg send prepare $query	die parametrisierte abfrage
function pg send prepare $stmtname	der name der vorbereiteten abfrage
function bool pg send prepare	gibt bei erfolg true zurück und false falls ein fehler auftrat
function bool pg send prepare resource $connection string $stmtname string $query	sendet eine aufforderung an den server eine vorbereitete abfrage mit den &uuml;bergebenen parametern zu erzeugen ohne auf ihre beendigung zu warten
function pg send query params $params	ein array mit parameterwerten mit denen die platzhalter $1 $2 usw
function pg send query params $query	die parametrisierte abfrage
function pg send query params $connection	postgresql-verbindungskennung
function bool pg send query params	gibt bei erfolg true zurück
function bool pg send query params resource $connection string $query array $params	sendet ein kommando und separate parameter zum server ohne auf die r&uuml;ckgabe der ergebnisse zu warten
function pg send query $query	das oder die sql-anweisung en die ausgeführt werden sollen
function pg send query $connection	postgresql verbindungkennung
function bool pg send query	gibt bei erfolg true zurück
function bool pg send query resource $connection string $query	sendet eine asynchrone abfrage
function pg set client encoding $connection	postgresql verbindungskennung
function pg set client encoding $encoding	die gewünschte kodierung des clients
function int pg set client encoding	gibt bei erfolg 0 zurück oder -1 bei einem fehler
function int pg set client encoding resource $connection string $encoding	setzt die kodierung des clients
function pg set error verbosity $connection	postgresql verbindungskennung
function pg set error verbosity $verbosity	der gewünschte detaillierungsgrad: pgsql_errors_terse pgsql_errors_default oder pgsql_errors_verbose
function int pg set error verbosity	der vorher eingestellte detaillierungsgrad: pgsql_errors_terse pgsql_errors_default oder pgsql_errors_verbose
function int pg set error verbosity resource $connection int $verbosity	bestimmt den detaillierungsgrad von fehlermeldungen die von pg_last_error und pg_result_error zur&uuml;ckgegeben werden
function pg transaction status $connection	postgresql-verbindungskennung
function int pg transaction status	mögliche stati sind: pgsql_transaction_idle zur zeit untätig pgsql_transaction_active ein kommando wird abgearbeitet pgsql_transaction_intrans untätig aber innerhalb eines gültigen transaktionsblocks oder pgsql_transaction_inerror untätig innerhalb einer fehlgeschlagenen transaktion
function int pg transaction status resource $connection	gibt den aktuellen transaktionsstatus des servers zur&uuml;ck
function pg tty $connection	postgresql verbindungkennung
function string pg tty	ein string der die tty debugmeldungen für die connection enthält oder false falls ein fehler auftrat
function string pg tty resource $connection	gibt den tty namen f&uuml;r die verbindung zur&uuml;ck
function pg unescape bytea $data	ein string der daten vom postgresql typ bytea enthält die in einen php-binärstring konvertiert werden
function string pg unescape bytea	ein string der die unmaskierten daten enthält
function string pg unescape bytea string $data	entfernt maskierungen f&uuml;r den typ bytea
function pg update $options	jede kombination aus pgsql_conv_force_null pgsql_dml_no_conv pgsql_dml_escape pgsql_dml_exec pgsql_dml_async oder pgsql_dml_string
function pg update $connection	postgresql verbindungskennung
function pg update $data	ein array dessen schlüssel feldnamen von table_name sind und mit dessen werten die tabelle aktualisiert wird
function pg update $condition	ein array dessen schlüssel feldnamen von table_name sind und das die werte enthält die in table_name überschrieben werden sollen
function pg update $table_name	name der tabelle die aktualisiert werden soll
function mixed pg update	gibt bei erfolg true zurück
function mixed pg update resource $connection string $table_name array $data array $condition int $options	aktualisiert eine tabelle
function php check syntax $error_message	wenn der error_message parameter genutzt wird enthält dieser die fehlernachrichten die durch den syntax check erzeugt wurden
function php check syntax $filename	der name der datei die überprüft werden soll
function bool php check syntax	gibt true zurück wenn die datei die überprüfung bestanden hat und false wenn fehler aufgetreten sind oder wenn filename nicht geöffnet werden konnte
function bool php check syntax string $filename string $error_message	&uuml;berpr&uuml;ft die php syntax der angegebenen datei und f&uuml;hrt sie aus
function phpinfo $what	die ausgabe kann durch die bitweise summierte angabe von einer oder mehrerer der folgenden konstanten im optionalen what -parameter angepasst werden
function bool phpinfo	gibt bei erfolg true zurück
function bool phpinfo int $what	gibt informationen zur php-konfiguration aus
function phpversion $extension	ein optionaler extensionname
function string phpversion	wenn der optionale parameter extension angegeben wurde wird die versionsnummer dieser extension zurückgegeben oder false falls die extension nicht geladen ist oder keine versionsinformation enthält
function string phpversion string $extension	liefert die aktuelle php-version
function posix access $mode	eine maske die aus einer oder mehr der konstanten posix_f_ok posix_r_ok posix_w_ok und posix_x_ok besteht
function posix access $file	der name der zu überprüfenden datei
function bool posix access	gibt bei erfolg true zurück
function bool posix access string $file int $mode	ermittelt die zugriffsberechtigungen einer datei
function int posix get last error	gibt die errno fehlernummer zurück die von der letzten fehlgeschlagenen posix-funktion gesetzt wurde
function int posix get last error	liefert die von der letzten fehlgeschlagenen posix-funktion gesetzte fehlernummer
function int posix getegid	gibt die effektive gruppen-id als ganzzahl zurück
function int posix getegid	liefert die effektive gruppen-id des aktuellen prozesses
function int posix geteuid	gibt die benutzer-id als ganzzahl zurück
function int posix geteuid	liefert die effektive benutzer-id des aktuellen prozesses
function int posix getgid	gibt die reale gruppen-id als ganzzahl zurück
function int posix getgid	liefert die reale gruppen-id des aktuellen prozesses
function array posix getgroups	gibt ein array von ganzzahlen zurück das die numerischen gruppen-ids der gruppenliste des aktuellen prozesses enthält
function array posix getgroups	liefert die gruppenliste des aktuellen prozesses
function string posix getlogin	gibt den loginnamen der benutzerin als zeichenkette zurück
function string posix getlogin	liefert den loginnamen
function int posix getpgrp	gibt die kennung als ganzzahl zurück
function int posix getpgrp	liefert die prozessgruppenkennung des aktuellen prozesses
function int posix getpid	gibt die kennung als ganzzahl zurück
function int posix getpid	liefert die aktuelle prozesskennung
function int posix getppid	gibt die kennung als ganzzahl zurück
function int posix getppid	liefert die prozesskennung des elternprozesses
function posix getpwnam $username	ein alphanumerischer benutzername
function array posix getpwnam	bei erfolg wird ein array mit den folgenden elementen zurückgegeben andernfalls false : das benutzerinformation-array element beschreibung name das name-element enthält den benutzernamen
function array posix getpwnam string $username	liefert zu einem benutzernamen informationen &uuml;ber diesen benutzer
function posix getpwuid $uid	die benutzerkennung
function array posix getpwuid	gibt ein assoziatives array mit den folgenden elementen zurück: das benutzerinformation-array element beschreibung name das name-element enthält den benutzernamen
function array posix getpwuid int $uid	liefert zu einer benutzer-id informationen &uuml;ber diesen benutzer
function posix getsid $pid	die prozesskennung
function int posix getsid	gibt die kennung als ganzzahl zurück
function int posix getsid int $pid	liefert die aktuelle session-id sid des prozesses
function posix initgroups $name	der benutzer für den die liste ermittelt werden soll
function posix initgroups $base_group_id	üblicherweise die gruppennummer aus der passwort-datei
function bool posix initgroups	gibt bei erfolg true zurück
function bool posix initgroups string $name int $base_group_id	ermittelt die gruppenzugriffsliste
function posix isatty $fd	der datei-deskriptor welcher entweder eine datei- resource oder ein integer sein sollte
function bool posix isatty	gibt true zurück falls fd ein offener deskriptor ist der mit einem terminal verbunden ist und andernfalls false
function bool posix isatty mixed $fd	ermittelt ob ein dateideskriptor ein interaktives terminal ist
function posix mkfifo $mode	der zweite parameter mode muss in oktaler schreibweise angegeben werden z
function posix mkfifo $pathname	der pfad zur fifo -datei
function bool posix mkfifo	gibt bei erfolg true zurück
function bool posix mkfifo string $pathname int $mode	erzeugt eine fifo special-datei named pipe
function posix mknod $mode	dieser parameter wird zusammengesetzt aus einer bitweisen oder-verknüpfung zwischen dem dateityp eine der folgenden konstanten: posix_s_ifreg posix_s_ifchr posix_s_ifblk posix_s_ififo oder posix_s_ifsock und den zugriffsberechtigungen
function posix mknod $minor	die minor-device-nummer untergerätenummer
function posix mknod $pathname	die zu erzeugende datei
function posix mknod $major	die major-device-nummer hauptgerätenummer ; wird bei der verwendung von s_ifchr oder s_ifblk benötigt
function bool posix mknod	gibt bei erfolg true zurück
function bool posix mknod string $pathname int $mode int $major int $minor	erzeugt eine spezielle oder eine gew&ouml;hnliche datei posix
function posix setegid $gid	die gruppen-id
function bool posix setegid	gibt bei erfolg true zurück
function bool posix setegid int $gid	setzt die effektive gruppen-id des aktuellen prozesses
function posix setgid $gid	die gruppen-id
function bool posix setgid	gibt bei erfolg true zurück
function bool posix setgid int $gid	setzt die gruppen-id des aktuellen prozesses
function posix setpgid $pgid	die prozessgruppen-id
function posix setpgid $pid	die prozess-id
function bool posix setpgid	gibt bei erfolg true zurück
function bool posix setpgid int $pid int $pgid	setzt die prozessgruppenkennung process group id f&uuml;r die job-kontrolle
function int posix setsid	gibt die session-id zurück oder -1 falls ein fehler auftrat
function int posix setsid	macht den aktuellen prozess zum prozessgruppen-f&uuml;hrer
function array posix times	gibt eine reihe von zahlenwerten mit informationen über die auslastung der cpu durch den aktuellen prozess zurück
function array posix times	liefert rechenzeiten
function array posix uname	gibt eine reihe von daten mit informationen über das system zurück
function array posix uname	liefert auskunft &uuml;ber das system
function pow $base	die zu potenzierende basis
function pow $exp	der exponent
function number pow	base in der potenz exp
function number pow number $base number $exp	potenzfunktion
function preg grep $input	das eingabe-array
function preg grep $pattern	der ausdruck nach dem gesucht werden soll als zeichenkette
function preg grep $flags	falls auf preg_grep_invert gesetzt gibt die funktion die elemente des eingabe-arrays zurück die nicht auf das angegebene suchmuster pattern passen
function array preg grep	gibt ein array zurück das mit den schlüsseln des input -arrays indiziert ist
function array preg grep string $pattern array $input int $flags	liefert array-elemente die auf ein suchmuster passen
function preg match $matches	falls der parameter matches angegeben wurde wird er mit den suchergebnissen gefüllt
function preg match $subject	die zu durchsuchende zeichenkette
function preg match $offset	normalerweise beginnt die suche am anfang der zeichenkette
function preg match $pattern	der ausdruck nach dem gesucht werden soll als zeichenkette
function preg match $PREG_OFFSET_CAPTURE	wenn dieses flag gesetzt ist wird mit jeder gefundenen übereinstimmung der dazugehörige versatz in der zeichenkette zurückgegeben
function preg match $flags	flags kann das folgende flag sein: preg_offset_capture wenn dieses flag gesetzt ist wird mit jeder gefundenen übereinstimmung der dazugehörige versatz in der zeichenkette zurückgegeben
function int preg match	preg_match() gibt 1 zurück falls eine übereinstimmung zwischen pattern und subject gefunden wurde 0 falls nicht oder false falls ein fehler auftrat
function int preg match string $pattern string $subject array $matches int $flags int $offset	f&uuml;hrt eine suche mit einem regul&auml;ren ausdruck durch
function preg quote $delimiter	falls der optionale delimiter angegeben wurde wird dieser ebenfalls maskiert
function preg quote $str	die zu durchsuchende zeichenkette
function string preg quote	gibt die maskierte zeichenkette zurück
function string preg quote string $str string $delimiter	maskiert zeichen regul&auml;rer ausdr&uuml;cke
function preg replace $count	falls angegeben wird dieser variable die anzahl vorgenommener ersetzungen zugewiesen
function preg replace $pattern	der ausdruck nach dem gesucht wird
function preg replace $subject	die zeichenkette oder ein array mit zeichenketten zum durchsuchen
function preg replace $replacement	die zeichenkette oder das array mit zeichenketten zum ersetzen
function preg replace $limit	die maximal mögliche anzahl von ersetzungen für jedes suchmuster in jeder subject
function mixed preg replace	preg_replace() gibt ein array zurück falls subject ein array ist andernfalls eine zeichenkette
function mixed preg replace mixed $pattern mixed $replacement mixed $subject int $limit int $count	sucht und ersetzt mit regul&auml;ren ausdr&uuml;cken
function preg split $limit	falls angegeben werden maximal limit teilzeichenketten zurückgegeben wobei der rest der zeichenkette in der letzten teilzeichenkette abgelegt wird
function preg split $subject	die zu zerlegende zeichenkette
function preg split $flags	flags kann jede kombination der folgenden flags sein verknüpft mit dem bitweisen | operator : preg_split_no_empty falls dieses flag gesetzt ist werden von preg_split() nur die teile zurückgegeben die nicht leer sind
function preg split $PREG_SPLIT_DELIM_CAPTURE	falls dieses flag gesetzt ist werden auch die eingeklammerten ausdrücke des trennsymbol-suchmusters erfasst und zurückgegeben
function preg split $PREG_SPLIT_OFFSET_CAPTURE	falls dieses flag gesetzt ist wird mit jeder gefundenen übereinstimmung der dazugehörige versatz in der zeichenkette zurückgegeben
function preg split $pattern	der ausdruck nach dem gesucht werden soll als zeichenkette
function preg split $PREG_SPLIT_NO_EMPTY	falls dieses flag gesetzt ist werden von preg_split() nur die teile zurückgegeben die nicht leer sind
function array preg split	gibt ein array zurück bestehend aus teilzeichenketten der zeichenkette subject die an den auf das suchmuster pattern passenden stellen zerlegt wurde
function array preg split string $pattern string $subject int $limit int $flags	zerlegt eine zeichenkette anhand eines regul&auml;ren ausdrucks
function print $arg	die eingabedaten
function int print	gibt immer 1 zurück
function int print string $arg	ausgabe eines strings
function proc close $process	die zu schließende proc_open() - ressource
function int proc close	gibt den termination-status des gelaufenen prozesses zurück
function int proc close resource $process	schlie&szlig;t einen prozess der mit proc_open gestartet wurde und gibt den exitcode dieses prozesses zur&uuml;ck
function proc get status $process	die zu untersuchende proc_open() - ressource
function array proc get status	im erfolgsfall wird ein array der gesammelten informationen zurückgeliefert im fehlerfall false
function array proc get status resource $process	liefert informationen &uuml;ber einen mit proc_open gestarteten prozess
function proc nice $increment	der betrag um den die priorität verändert wird
function bool proc nice	gibt bei erfolg true zurück
function bool proc nice int $increment	&auml;ndert die priorit&auml;t des aktuellen prozesses
function proc open $other_options	erlaubt ihnen zusätzliche optionen anzugeben
function proc open $cwd	das initiale arbeitsverzeichnis des kommandos
function proc open $pipes	enthält ein numerisches array von dateizeigern die der php-seite jeder erstellten pipe entsprechen
function proc open $descriptorspec	ein indexiertes array in dem die schlüssel die descriptornummer und die werte die art und weise repräsentieren in der php die descriptoren an die child-prozesse übergibt
function proc open $cmd	das auszuführende kommando
function proc open $env	ein array mit den umgebungsvariablen für das auszuführende kommando oder null wenn sie das gleiche environment wie der aktuelle php-prozess nutzen wollen
function resource proc open	gibt eine ressource zurück die den prozess repräsentiert der unter verwendung von proc_close() freigegeben werden soll wenn sie ihn beenden
function resource proc open string $cmd array $descriptorspec array $pipes string $cwd array $env array $other_options	f&uuml;hrt ein kommando aus und &ouml;ffnet dateizeiger f&uuml;r die ein- und ausgabe
function proc terminate $signal	dieser optionale parameter ist nur sinnvoll auf posix -basierten betriebssystemen; sie können ein signal angeben das unter verwendung des kill 2 -systemaufrufs an den prozess gesendet wird
function proc terminate $process	die proc_open() - ressource die geschlossen werden soll
function bool proc terminate	gibt den terminationstatus des laufenden prozesses zurück
function bool proc terminate resource $process int $signal	beendet einen von proc_open gestarteten prozess
function property exists $class	objektinstanz oder name einer klasse
function property exists $property	name der zu prüfenden eigenschaft
function bool property exists	gibt true zurück wenn die eigenschaft existiert false wenn nicht und null im fehlerfall
function bool property exists mixed $class string $property	pr&uuml;ft auf die existenz einer eigenschaft eines objektes bzw
function pspell config create $language	der sprachencode der aus dem zweibuchstabigen iso 639-sprachencode und nach einem binde- oder unterstrich einem optionalen zweibuchstabigen iso 3166-ländercode besteht
function pspell config create $spelling	die angeforderte schreibweise für sprachen mit mehr als einer schreibweise wie zum beispiel englisch
function pspell config create $encoding	die kodierung in der die wörter voraussichtlich sind
function pspell config create $jargon	enthält zusätzliche informationen um zwischen zwei wortlisten mit der selben sprache und den selben parametern für die schreibweise zu unterscheiden
function int pspell config create	gibt eine pspell-konfigurationskennung zurück oder false falls ein fehler auftrat
function int pspell config create string $language string $spelling string $jargon string $encoding	erzeugt eine konfiguration zum &ouml;ffnen eines w&ouml;rterbuchs
function pspell config repl $file	die datei sollte für denjenigen unter dem php läuft z
function bool pspell config repl	gibt bei erfolg true zurück
function bool pspell config repl int $dictionary_link string $file	legt die datei fest welche die ersetzen-paare enth&auml;lt
function pspell config runtogether $flag	true falls zusammengesetzte wörter als gültige verbindungen betrachtet werden sollen andernfalls false
function bool pspell config runtogether	gibt bei erfolg true zurück
function bool pspell config runtogether int $dictionary_link bool $flag	betrachtet zusammengesetzte w&ouml;rter als g&uuml;ltige verbindungen
function pspell config save repl $flag	true falls ersetzen-paare gespeichert werden sollen andernfalls false
function bool pspell config save repl	gibt bei erfolg true zurück
function bool pspell config save repl int $dictionary_link bool $flag	bestimmt ob ersetzen-paare zusammen mit der wortliste gespeichert werden
function quoted printable decode $str	die eingabezeichenkette
function string quoted printable decode	gibt den 8-bit-binärstring zurück
function string quoted printable decode string $str	konvertiert einen quoted-printable-string in einen 8-bit-string
function rad2deg $number	ein winkel in bogenmaß
function float rad2deg	der zu number equivalente wert in grad
function float rad2deg float $number	umrechnung von bogenma&szlig; in grad
function range $start	erster wert der sequenz
function range $end	die sequenz endet wenn der end wert erreicht ist
function range $step	ist ein step wert angegeben wird er schrittweite zwischen den elementen in der sequenz verwendet
function array range	gibt ein array mit elementen im bereich von start bis einschließlich end zurück
function array range mixed $start mixed $end number $step	erstellt ein array mit einem bereich von elementen
function rawurldecode $str	der zu dekodierende url
function string rawurldecode	gibt den dekodierten url im stringformat zurück
function string rawurldecode string $str	dekodiert url-kodierte strings
function rawurlencode $str	der zu kodierende url
function string rawurlencode	gibt einen string zurück in dem alle nicht-alphanumerischen zeichen außer -_
function string rawurlencode string $str	url-kodierung nach rfc 3986
function readfile $context	eine stream-kontext resource
function readfile $use_include_path	sie können optional den zweiten parameter benutzen und diesen auf true setzen wenn sie auch im include_path nach der datei suchen möchten
function readfile $filename	der name der datei die gelesen werden soll
function int readfile	gibt die anzahl der gelesenen bytes einer datei zurück
function int readfile string $filename bool $use_include_path resource $context	gibt eine datei aus
function readgzfile $use_include_path	sie können diesen parameter auf 1 setzen wenn die datei auch im include_path gesucht werden soll
function readgzfile $filename	der dateiname
function int readgzfile	gibt die anzahl der ausgegebenen zeichen zurück
function int readgzfile string $filename int $use_include_path	gibt eine gz-komprimierte datei aus
function readline add history $line	die zur history hinzuzufügende zeile
function bool readline add history	gibt bei erfolg true zurück
function bool readline add history string $line	f&uuml;gt eine zeile zur history hinzu
function readline callback handler install $callback	die callback -funktion benötigt einen parameter; die benutzereingabe wird zurückgegeben
function readline callback handler install $prompt	die prompt-message
function bool readline callback handler install	gibt bei erfolg true zurück
function bool readline callback handler install string $prompt callable $callback	initialisiert das readline-callback-interface und das terminal gibt den prompt aus und springt direkt zur&uuml;ck
function bool readline callback handler remove	gibt true zurück wenn der letztdefinierte callbackhandler zurückgesetzt wurde; falls dieser nicht gefunden wurde wird false zurückgegeben
function bool readline callback handler remove	entfernt den letztdefinierten callbackhandler und setzt die terminalumgebung auf die ursprungswerte zur&uuml;ck
function void readline callback read char	liest ein zeichen und informiert das readline-callback-interface wenn die eingabezeile abgeschlossen wurde
function bool readline clear history	gibt bei erfolg true zurück
function bool readline clear history	l&ouml;scht die history
function readline completion function $function	sie müssen den namen einer existierenden funktion angeben die einen teil einer kommandozeile akzeptiert und ein array möglicher übereinstimmungen zurückgibt
function bool readline completion function	gibt bei erfolg true zurück
function bool readline completion function callable $function	registriert eine vervollst&auml;ndigungsfunktion
function readline info $varname	ein variablenname
function readline info $newvalue	sofern unterstützt entspricht der parameter dem neuen gesetzten wert
function mixed readline info	wenn diese funktion ohne parameter aufgerufen wird gibt sie einen array von werten für alle einstellungen zurück die readline benutzt
function mixed readline info string $varname string $newvalue	liest / setzt verschiedene interne readline-variablen
function array readline list history	diese funktion gibt ein array der gesamten kommandozeilen-history zurück
function array readline list history	auflistung der history
function void readline on new line	informiert readline dass der cursor in eine neue zeile bewegt wurde
function readline read history $filename	pfad zur datei die die kommandozeilen-history enthält
function bool readline read history	gibt bei erfolg true zurück
function bool readline read history string $filename	liest die history
function void readline redisplay	zeichnet den bildschirm neu
function readline write history $filename	pfad zur datei in der gespeichert werden soll
function bool readline write history	gibt bei erfolg true zurück
function bool readline write history string $filename	schreibt die history
function readline $prompt	sie können eine zeichenkette angeben mit dem sie den benutzer zur eingabe auffordern
function string readline	gibt eine einzelne zeile des benutzers zurück
function string readline string $prompt	liest eine zeile
function readlink $path	der pfad des symbolischen links
function string readlink	gibt den inhalt des pfades des symbolischen links zurück oder false im fehlerfall
function string readlink string $path	liefert das ziel eines symbolischen links
function recode file $input	ein lokaler dateizeiger vom typ resource für den input -parameter
function recode file $request	der gewünschte recode-requesttyp
function recode file $output	ein lokaler dateizeiger vom typ resource für den output -parameter
function bool recode file	gibt false zurück wenn es nicht möglich ist die anweisung durchzuführen andernfalls true
function bool recode file string $request resource $input resource $output	umkodierung von dateien entsprechend der recode-anweisung
function recode string $request	der gewünschte recode-requesttyp
function recode string $string	der umzukodierende string
function string recode string	gibt den umkodierten string oder false zurück wenn es nicht möglich ist den recode-request auszuführen
function string recode string string $request string $string	umkodierung eines strings entsprechend einer recode-anweisung
function register shutdown function $parameter	alle weiteren argumente die dieser funktion übergeben werden werden auch den callbacks beim aufruf übergeben
function register shutdown function $callback	das shutdown callback welches registriert werden soll
function void register shutdown function callable $callback mixed $parameter	registriert eine funktion zur ausf&uuml;hrung beim skript-abschluss
function rename $newname	der neue name
function rename $oldname	hinweis : der alte name
function rename $context	hinweis : die kontext-unterstützung gibt es seit php 5
function bool rename	gibt bei erfolg true zurück
function bool rename string $oldname string $newname resource $context	benennt eine datei oder ein verzeichnis um
function reset $array	das eingabearray
function mixed reset	gibt das erste element des arrays zurück oder false wenn das array leer ist
function mixed reset array $array	setzt den internen zeiger eines arrays auf sein erstes element
function bool restore error handler	diese funktion gibt immer true zurück
function bool restore error handler	rekonstruiert die zuvor benutzte fehlerbehandlungsfunktion
function rewind $handle	der dateizeiger muss gültig sein und auf eine datei zeigen die zuvor erfolgreich durch fopen() geöffnet wurde
function bool rewind	gibt bei erfolg true zurück
function bool rewind resource $handle	setzt die position eines dateizeigers auf den anfang
function rewinddir $dir_handle	das verzeichnis-handle resource das zuvor mit opendir() geöffnet wurde
function void rewinddir resource $dir_handle	zur&uuml;cksetzen des verzeichnis-handles
function round $precision	auf wie viele nachkommastellen gerundet werden soll
function round $mode	php_round_half_up php_round_half_down php_round_half_even oder php_round_half_odd
function round $val	der zu rundende wert
function float round	der gerundete wert
function float round float $val int $precision int $mode	rundet einen flie&szlig;kommawert
function scandir $directory	das zu untersuchende verzeichnis
function scandir $context	für die beschreibung des context -parameters konsultieren sie bitte das kapitel streams des manuals
function scandir $sorting_order	standardmäßig ist die sortierreihenfolge alphabetisch in aufsteigender reihenfolge
function array scandir	gibt bei erfolg ein array von dateinamen zurück im fehlerfall false
function array scandir string $directory int $sorting_order resource $context	listet dateien und verzeichnisse innerhalb eines angegebenen pfades auf
function sem acquire $sem_identifier	sem_identifier ist ein von sem_get() geliefertes resourcehandle
function bool sem acquire	gibt bei erfolg true zurück
function bool sem acquire resource $sem_identifier	zugriff auf semaphor anfordern
function sem get $max_acquire	die anzahl der prozesse die gleichzeitig zugriff auf den semaphor erhalten können wird durch den parameter max_acquire festgelegt
function sem get $auto_release	legt fest ob der semaphor am skriptende automatisch freigegeben werden soll
function sem get $perm	die zugriffsrechte für den semaphore
function resource sem get	gibt einen positiven semaphor identifier zrück oder false bei fehlern
function resource sem get int $key int $max_acquire int $perm int $auto_release	zugriff auf ein semaphor anfordern
function sem release $sem_identifier	ein semaphor-ressourcehandle wie von sem_get() geliefert
function bool sem release	gibt bei erfolg true zurück
function bool sem release resource $sem_identifier	semaphor freigeben
function sem remove $sem_identifier	ein semaphor resourcehandle wie von sem_get() zurückgegeben
function bool sem remove	gibt bei erfolg true zurück
function bool sem remove resource $sem_identifier	semaphor entfernen
function session cache limiter $cache_limiter	wenn cache_limiter angegeben wurde wird diese dem neuen wert entsprechend geändert
function string session cache limiter	gibt die bezeichnung der aktuellen cacheverwaltung zurück
function string session cache limiter string $cache_limiter	liefert und / oder setzt die aktuelle cacheverwaltung
function session decode $data	die kodierten daten die gespeichert werden sollen
function bool session decode	gibt bei erfolg true zurück
function bool session decode string $data	dekodiert die daten einer session aus einer session-kodierten zeichenkette
function string session encode	gibt inhalt der aktuellen session kodiert zurück
function string session encode	kodiert die daten der aktuellen session als session-kodierte zeichenkette
function session is registered $name	der variablenname
function bool session is registered	falls in der aktuellen session eine globale variable mit dem namen name registriert ist gibt session_is_registered() true zurück andernfalls false
function bool session is registered string $name	&uuml;berpr&uuml;ft ob eine globale variable in einer session registriert ist
function session module name $module	wenn module angegeben wird wird stattdessen dieses modul verwendet
function string session module name	gibt den namen des aktuellen session-moduls zurück
function string session module name string $module	liefert und / oder setzt das aktuelle session-modul
function session regenerate id $delete_old_session	legt fest ob die zugehörige alte sessiondatei gelöscht werden soll oder nicht
function bool session regenerate id	gibt bei erfolg true zurück
function bool session regenerate id bool $delete_old_session	ersetzt die aktuelle session-id durch eine neu erzeugte
function void session register shutdown	funktion zum schlie&szlig;en von sitzungen
function session set cookie params $lifetime	die lebensdauer des session-cookies in sekunden
function session set cookie params $path	der pfad der domain in dem das cookie zu verfügung steht
function session set cookie params $secure	falls auf true gesetzt wird das cookie nur über sichere verbindungen gesendet
function session set cookie params $domain	die cookie- domain z
function session set cookie params $httponly	falls auf true gesetzt versucht php das httponly -flag zu senden wenn das session-cookie gesetzt wird
function void session set cookie params int $lifetime string $path string $domain bool $secure bool $httponly	setzt die session-cookie-parameter
function int session status	php_session_disabled wenn die sitzung deaktiviert ist
function int session status	gibt den status der aktuellen sitzung zur&uuml;ck
function session unregister $name	der variablenname
function bool session unregister	gibt bei erfolg true zurück
function bool session unregister string $name	hebt die registrierung einer globalen variablen in der aktuellen session auf
function void session unset	l&ouml;scht alle session-variablen
function set exception handler $exception_handler	name der funktion die aufgerufen werden soll wenn eine nicht aufgefangene exception auftritt
function callable set exception handler	gibt den namen des zuvor definierten exceptionhandlers zurück oder null bei fehlern oder wenn kein vorheriger exceptionhandler installiert war
function callable set exception handler callable $exception_handler	installiert einen benutzerdefinierten exceptionhandler
function set time limit $seconds	die maximale ausführungszeit in sekunden oder 0 wenn die ausführungszeit nicht limitiert werden soll
function bool set time limit	gibt true im erfolgsfall zurück oder false bei einem fehler
function bool set time limit int $seconds	beschr&auml;nkt die maximale ausf&uuml;hrungszeit
function setcookie $domain	die domain der das cookie zur verfügung steht
function setcookie $value	der wert des cookies
function setcookie $httponly	wenn auf true gesetzt ist das cookie nur via http-protokoll zugreifbar
function setcookie $path	der pfad auf dem server für welchen das cookie verfügbar sein wird
function setcookie $name	der name des cookies
function setcookie $expire	der zeitpunkt an dem das cookie ungültig wird
function setcookie $secure	gibt an dass das cookie vom client nur über eine sichere https-verbindung übertragen werden soll
function bool setcookie	erfolgt eine ausgabe vor dem aufruf dieser funktion wird setcookie() fehlschlagen und false zurückgeben
function bool setcookie string $name string $value int $expire string $path string $domain bool $secure bool $httponly	sendet ein cookie
function settype $type	mögliche werte für type sind: boolean oder seit php 4
function settype $var	the variable being converted
function bool settype	gibt bei erfolg true zurück
function bool settype mixed $var string $type	legt den typ einer variablen fest
function shell exec $cmd	das auszuführende kommando
function string shell exec	die ausgabe des ausgeführten kommandos oder null wenn ein fehler auftrat oder das kommando keine ausgabe erzeugt
function string shell exec string $cmd	f&uuml;hrt ein kommando auf der shell aus und gibt den kompletten output als string zur&uuml;ck
function shm detach $shm_identifier	ein shared memory-ressourcehandle wie es von shm_attach() zurückgegeben wird
function bool shm detach	shm_detach() gibt immer true zurück
function bool shm detach resource $shm_identifier	anbindung an ein shared memory-segment beenden
function shm get var $variable_key	der variablenschlüssel
function shm get var $shm_identifier	ein shared memory resource handle wie von shm_attach() geliefert
function mixed shm get var	gibt die variable mit dem gegebenen schlüssel zurück
function mixed shm get var resource $shm_identifier int $variable_key	liest eine variable aus dem shared memory
function shm put var $shm_identifier	ein shared memory-ressourcehandle wie es von shm_attach() zurückgegeben wird
function shm put var $variable_key	der variablenschlüssel
function shm put var $variable	die variable
function bool shm put var	gibt bei erfolg true zurück
function bool shm put var resource $shm_identifier int $variable_key mixed $variable	aktualisiert eine variable im shared memory
function shm remove var $shm_identifier	ein shared memory resourcehandle wie von shm_attach() geliefert
function shm remove var $variable_key	der schlüssel der zu löschenden variable
function bool shm remove var	gibt bei erfolg true zurück
function bool shm remove var resource $shm_identifier int $variable_key	entfernt eine variable aus dem shared memory
function shmop close $shmid	der bezeichner für den gemeinsamen speicherblock der von shmop_open() erzeugt wurde
function void shmop close int $shmid	schlie&szlig;t einen gemeinsamen speicherblock
function shmop delete $shmid	der bezeichner für den gemeinsamen speicherblock der von shmop_open() erzeugt wurde
function bool shmop delete	gibt bei erfolg true zurück
function bool shmop delete int $shmid	einen gemeinsamen speicherblock l&ouml;schen
function shmop open $key	die system-id des gemeinsam genutzten speicherblocks dieser parameter kann als dezimal- oder hexadezimalzahl übergeben werden
function shmop open $mode	die zugriffsberechtigungen für die gemeinsamen speichersegmente sind dieselben wie für dateien
function shmop open $flags	folgende flags können benutzt werden: a zum zugriff access auf einen gemeinsamen speicherblock setzt shm_rdonly für shmat
function shmop open $size	die größe des erzeugten gemeinsam genutzten speicherbereichs in byte
function int shmop open	bei erfolg liefert die funktion shmop_open() eine id zurück die sie zum zugriff auf den erstellten gemeinsamen speicher benutzen können
function int shmop open int $key string $flags int $mode int $size	erstellt oder &ouml;ffnet einen gemeinsamen speicherblock
function shuffle $array	das zu modifizierende array
function bool shuffle	gibt bei erfolg true zurück
function bool shuffle array $array	mischt die elemente eines arrays
function similar text $first	die erste zeichenkette
function similar text $percent	falls sie als referenz ein drittes argument angeben wird similar_text() ihnen die ähnlichkeit als prozentwert errechnen
function similar text $second	die zweite zeichenkette
function int similar text	gibt die anzahl übereinstimmender zeichen in beiden zeichenketten zurück
function int similar text string $first string $second float $percent	berechnet die &auml;hnlichkeit zweier zeichenketten
function simplexml import dom $class_name	sie können diesen optionalen parameter verwenden damit simplexml_import_dom() ein objekt der angegebenen klasse zurückgibt
function simplexml import dom $node	ein dom -element-knoten
function SimpleXMLElement simplexml import dom	gibt ein simplexmlelement zurück
function SimpleXMLElement simplexml import dom DOMNode $node string $class_name	erzeugt ein simplexmlelement-objekt aus einem dom-knoten
function simplexml load string $ns	namespace präfix oder uri
function simplexml load string $options	seit php 5
function simplexml load string $is_prefix	true wenn ns ein präfix ist false wenn er eine uri ist
function simplexml load string $class_name	sie können den optionalen parameter class_name verwenden wenn simple_load_string() ein objekt der spezifischen klasse zurückgeben soll
function simplexml load string $data	ein wohlgeformter xml-string
function SimpleXMLElement simplexml load string	gibt ein objekt der klasse simplexmlelement zurück dessen eigenschaften die daten beinhalten wie sie im xml-dokument abgebildet sind
function SimpleXMLElement simplexml load string string $data string $class_name int $options string $ns bool $is_prefix	&uuml;bersetzt einen xml-string in ein objekt
function sin $arg	ein winkel in bogenmaß
function float sin	der sinus von arg
function float sin float $arg	sinus
function sinh $arg	der zu verarbeitende wert
function float sinh	der sinus hyperbolikus von arg
function float sinh float $arg	sinus hyperbolikus
function socket close $socket	ein gültiger socket-deskriptor der mit socket_create() oder socket_accept() erzeugt wurde
function void socket close resource $socket	schlie&szlig;t eine socket-verbindung
function socket create listen $port	der port den alle schnittstellen abhören
function socket create listen $backlog	der parameter backlog gibt an wie groß die warteschlange mit wartenden verbindungen maximal werden darf
function resource socket create listen	socket_create_listen() gibt bei erfolg einen neuen socket-deskriptor zurück oder false falls ein fehler aufgetreten ist
function resource socket create listen int $port int $backlog	&ouml;ffnet einen socket um verbindungen &uuml;ber einem gegebenen port aufzubauen
function socket get option $optname	mögliche socket-optionen option beschreibung typ so_debug gibt an ob debug-informationen mitgeschrieben wurden
function socket get option $level	der parameter level enthält die protokollebene für die die option gilt
function socket get option $socket	ein gültiger socket-deskriptor der von der funktion socket_create() oder socket_accept() erzeugt wurde
function mixed socket get option	gibt den wert der angegebenen option zurück oder false falls ein fehler auftrat
function mixed socket get option resource $socket int $level int $optname	holt die socket-optionen f&uuml;r einen socket
function socket listen $backlog	maximal werden backlog hereinkommende verbindungsanforderungen zur späteren verarbeitung in die warteschlange gestellt
function socket listen $socket	ein gültiger socket-deskriptor der von socket_create() erzeugt wurde
function bool socket listen	gibt bei erfolg true zurück
function bool socket listen resource $socket int $backlog	h&ouml;rt einen socket nach verbindungsanforderungen ab
function socket read $socket	ein gültiger socket-deskriptor der von socket_create() oder socket_accept() erzeugt wurde
function socket read $length	die anzahl bytes die höchstens gelesen wird wird in dem parameter length angegeben
function socket read $type	der optionale parameter type ist eine vordefinierte konstante: php_binary_read standardwert - benutzt die systemfunktion recv()
function string socket read	socket_read() gibt bei erfolg die daten als string zurück oder false falls ein fehler aufgetreten ist oder auch wenn der entfernte host die verbindung abgebrochen hat
function string socket read resource $socket int $length int $type	liest h&ouml;chstens die angegebene anzahl bytes von einem socket
function socket recv $buf	empfangene daten werden in die variable geschrieben die durch buf spezifiziert ist
function socket recv $socket	der socket muss eine socket ressource sein die zuvor mit socket_create() erzeugt wurde
function socket recv $len	maximal len bytes werden von dem entfernten system abgerufen
function socket recv $flags	der wert von flags kann jede beliebige kombination der folgenden flags sein verknüpft mit dem binären oder | operator
function int socket recv	socket_recvfrom() gibt die anzahl der empfangenen bytes zurück oder false falls ein fehler auftrat
function int socket recv resource $socket string $buf int $len int $flags	empf&auml;ngt daten von einem verbundenen socket
function socket recvfrom $name	wenn der socket vom typ af_unix ist enthält name den pfad zu einer datei
function socket recvfrom $flags	der wert von flags kann eine beliebige kombination der folgenden flags sein die mit dem binären or | verknüpft werden
function socket recvfrom $port	dieses argument gilt nur für sockets vom typ af_inet und af_inet6 und gibt den entfernten port an über den daten empfangen werden
function socket recvfrom $len	bis zu len bytes werden vom entfernten host gelesen
function socket recvfrom $buf	die empfangenen daten werden in die variable buf eingelesen
function socket recvfrom $socket	socket muss ein socket-deskriptor sein der zuvor von socket_create() erzeugt wurde
function int socket recvfrom	socket_recvfrom() gibt die anzahl der empfangenen bytes zurück oder false falls ein fehler auftrat
function int socket recvfrom resource $socket string $buf int $len int $flags string $name int $port	empf&auml;ngt daten von einem socket egal ob verbindungsorientiert oder nicht
function socket select $write	die sockets die im write -array aufgelistet sind werden daraufhin überwacht ob ein schreibvorgang blockiert
function socket select $read	die sockets die im read -array aufgelistet sind werden daraufhin überwacht ob zeichen zum auslesen zur verfügung gestellt werden
function socket select $tv_sec	tv_sec und tv_usec bilden zusammen den timeout -parameter
function socket select $except	die sockets die im except -array aufgelistet sind werden auf ausnahmen überwacht
function int socket select	bei erfolg gibt socket_select() die anzahl der socket-deskriptoren zurück die in den aktualisierten arrays enthalten sind
function int socket select array $read array $write array $except int $tv_sec int $tv_usec	f&uuml;hrt einen select()-systemaufruf auf den gegebenen socket-arrays aus wobei ein zeitlimit bestimmt wird
function socket send $flags	der parameter flags kann beliebige kombinationen der folgenden flags enthalten die mit einem binären or | verknüpft werden
function socket send $socket	ein gültiger socket-deskriptor der von socket_create() oder socket_accept() erzeugt wurde
function socket send $buf	ein puffer der die daten enthält die an den entfernten host gesendet werden
function socket send $len	die anzahl bytes die aus dem puffer buf an den entfernten host gesendet werden
function int socket send	socket_send() gibt die anzahl der gesendeten bytes zurück oder false falls ein fehler auftrat
function int socket send resource $socket string $buf int $len int $flags	sendet daten an einen verbundenen socket
function socket set block $socket	ein gültiger socket-deskriptor der von socket_create() oder socket_accept() erzeugt wurde
function bool socket set block	gibt bei erfolg true zurück
function bool socket set block resource $socket	setzt einen socket auf den blockieren-modus
function socket set nonblock $socket	ein gültiger socket-deskriptor der von socket_create() oder socket_accept() erzeugt wurde
function bool socket set nonblock	gibt bei erfolg true zurück
function bool socket set nonblock resource $socket	setzt den nonblocking-modus f&uuml;r den datei-deskriptor fd
function socket set option $optval	der wert der option
function socket set option $socket	ein gültiger socket-deskriptor der von socket_create() oder socket_accept() erzeugt wurde
function socket set option $optname	es sind dieselben socket-optionen verfügbar wie bei der funktion socket_get_option() beschrieben
function socket set option $level	der parameter level gibt die protokollebene an auf der diese option gilt
function bool socket set option	gibt bei erfolg true zurück
function bool socket set option resource $socket int $level int $optname mixed $optval	setzt die optionen f&uuml;r einen socket
function socket strerror $errno	ein gültiger fehlercode eines socket-fehlers ähnlich der funktion socket_last_error()
function string socket strerror	zurückgegeben wird die fehlermeldung die dem fehlercode errno entspricht
function string socket strerror int $errno	gibt einen string zur&uuml;ck der einen socket-fehler beschreibt
function socket write $length	mit dem optionalen parameter length kann man alternativ eine anzahl von bytes angeben die in den socket geschrieben werden sollen
function socket write $buffer	der puffer dessen inhalt geschrieben werden soll
function int socket write	gibt die anzahl der erfolgreich in den socket geschriebenen bytes zurück im fehlerfall wird false zurückgegeben
function int socket write resource $socket string $buffer int $length	schreibt in einen socket
function soundex $str	die eingabezeichenkette
function string soundex	gibt den soundex-schlüssel als zeichenkette zurück
function string soundex string $str	berechnet die laut-&auml;hnlichkeit eines strings
function spl autoload extensions $file_extensions	wenn die funktion ohne parameter aufgerufen wird werden alle aktuellen endungen komma separiert zurück gegeben
function string spl autoload extensions	eine durch kommata getrennte liste mit den voreingestellten dateiendungen für spl_autoload()
function string spl autoload extensions string $file_extensions	registriert und gibt die voreingestellten dateiendungen f&uuml;r spl_autoload zur&uuml;ck
function array spl autoload functions	ein array aller registrierten __autoload funktionen
function array spl autoload functions	liefert alle registrierten __autoload() funktionen
function split $limit	wenn limit gesetzt wurde enthält das zurückgegebene array höchstens limit elemente von denen das letzte den ganzen rest von string enthält
function split $string	die zu durchsuchende zeichenkette
function split $pattern	regulärer ausdruck mit berücksichtigung der groß- und kleinschreibung wenn sie eine zerlegung an zeichen vornehmen die in regulären ausdrücken als besondere zeichen betrachtet werden müssen sie diese entsprechend kennzeichnen
function array split	gibt ein array mit zeichenketten zurück die jeweils eine teilzeichenkette von string sind
function array split string $pattern string $string int $limit	zerlegt eine zeichenkette anhand eines regul&auml;ren ausdrucks in ein array
function spliti $pattern	regulärer ausdruck ohne berücksichtigung der groß- und kleinschreibung wenn sie eine zerlegung an zeichen vornehmen die in regulären ausdrücken als besondere zeichen betrachtet werden müssen sie diese entsprechend kennzeichnen
function spliti $limit	wenn limit gesetzt wurde enthält das zurückgegebene array höchstens limit elemente von denen das letzte den ganzen rest von string enthält
function spliti $string	die zu durchsuchende zeichenkette
function array spliti	gibt ein array mit zeichenketten zurück die jeweils eine teilzeichenkette von string sind
function array spliti string $pattern string $string int $limit	zerlegt eine zeichenkette anhand eines regul&auml;ren ausdrucks ohne ber&uuml;cksichtigung von gro&szlig;- / kleinschreibung in ein array
function sprintf $format	der formatierungs-string wird aus null oder mehreren anweisungen gebildet: gewöhnliche zeichen außer % die direkt in das ergebnis übertragen werden und umsetzungs-anweisungen
function string sprintf	gibt eine an hand des formatierungs-strings format gebildete zeichenkette zurück
function string sprintf string $format mixed $args	gibt einen formatierten string zur&uuml;ck
function sqlite close $dbhandle	die sqlite-datenbankressource erzeugt durch sqlite_open() wenn im prozeduralem kontext genutzt
function void sqlite close resource $dbhandle	schlie&szlig;t eine sqlite-datenbankverbindung
function sqlite factory $error_message	wird als referenz übergeben und gesetzt um bei einem fehler eine ausführliche fehlermeldung zu erhalten die erklärt warum sich die datenbank nicht öffnen lässt
function sqlite factory $mode	der parameter mode spezifiziert den modus der datei und sollte genutzt werden wenn die datenbank nur lesezugriff erlauben soll
function sqlite factory $filename	der dateiname der sqlite-datenbank
function SQLiteDatabase sqlite factory	liefert ein sqlitedatabase-objekt bei einer erfolgreichen verbindung sonst null
function SQLiteDatabase sqlite factory string $filename int $mode string $error_message	&ouml;ffnet eine sqlite-datenbank und gibt ein sqlitedatabase-objekt zur&uuml;ck
function sqlite has more $result	die sqlite-ergebnisressource
function bool sqlite has more	liefert true zurück wenn noch reihen im ergebnis result zur verfügung stehen oder false wenn nicht
function bool sqlite has more resource $result	findet heraus ob noch reihen im ergebnis vorhanden sind
function string sqlite libencoding	liefert die kodierung der bibliothek
function string sqlite libencoding	liefert die kodierung der verwendeten sqlite-bibliothek zur&uuml;ck
function string sqlite libversion	liefert die version der bibliothek als zeichenkette
function string sqlite libversion	liefert die version der genutzten sqlite-bibliothek
function sqlite udf encode binary $data	die zu codierende zeichenkette string
function string sqlite udf encode binary	die codierte zeichenkette string
function string sqlite udf encode binary string $data	kodiert bin&auml;rdaten bevor sie von einer benutzerdefinierten funktion udf zur&uuml;ckgegeben werden
function srand $seed	optionaler startwert
function void srand int $seed	anfangswert f&uuml;r zufallsgenerator festlegen
function stat $filename	pfad zur datei
function array stat string $filename	sammelt informationen &uuml;ber eine datei
function str getcsv $input	die zu parsende zeichenkette
function str getcsv $enclosure	bestimmt das textmarkierungszeichen nur ein zeichen
function str getcsv $delimiter	bestimmt das feldtrennzeichen nur ein zeichen
function str getcsv $escape	bestimmt das maskierungszeichen nur ein zeichen
function array str getcsv	gibt ein indexiertes array zurück das die eingelesenen felder enthält
function array str getcsv string $input string $delimiter string $enclosure string $escape	parst einen csv-string in ein array
function str pad $pad_type	das optionale argument pad_type kann str_pad_right str_pad_left oder str_pad_both sein
function str pad $pad_string	hinweis : pad_string wird abgeschnitten falls die benötigte anzahl der zu ergänzenden zeichen nicht gleichmäßig durch die länge von pad_string geteilt werden kann
function str pad $input	die eingabezeichenkette
function str pad $pad_length	wenn der wert von pad_length negativ kürzer als oder gleich der länge der eingabezeichenkette ist wird keine erweiterung durchgeführt
function string str pad	gibt die erweiterte zeichenkette zurück
function string str pad string $input int $pad_length string $pad_string int $pad_type	erweitert einen string unter verwendung eines anderen strings auf eine bestimmte l&auml;nge
function str repeat $input	die zu wiederholende zeichenkette
function str repeat $multiplier	die anzahl der wiederholungen die auf input angewendet werden sollen
function string str repeat	gibt die wiederholte zeichenkette zurück
function string str repeat string $input int $multiplier	wiederholt einen string
function str rot13 $str	die eingabezeichenkette
function string str rot13	gibt die rot13-version der angegebenen zeichenkette zurück
function string str rot13 string $str	f&uuml;hrt die rot13-transformation auf einen string aus
function str split $split_length	maximale länge eines teilstücks
function str split $string	die eingabezeichenkette
function array str split	wenn der optionale parameter split_length angegeben ist enthält das zurückgegebene array elemente mit der in split_length definierten länge andernfalls enthält jedes element ein einzelnes zeichen
function array str split string $string int $split_length	konvertiert einen string in ein array
function str word count $charlist	eine liste zusätzlicher zeichen die ebenfalls als wort betrachtet werden
function str word count $format	gibt den rückgabewert der funktion an
function str word count $string	die zeichenkette
function mixed str word count	gibt abhängig vom gewählten format ein array oder ein integer zurück
function mixed str word count string $string int $format string $charlist	gibt informationen &uuml;ber in einem string verwendete worte zur&uuml;ck
function strcoll $str2	die zweite zeichenkette
function strcoll $str1	die erste zeichenkette
function int strcoll	gibt einen wert < 0 zurück wenn str1 kleiner ist als str2 einen wert > 0 wenn str1 größer ist als str2 und 0 wenn sie gleich sind
function int strcoll string $str1 string $str2	locale-basierter zeichenkettenvergleich
function strcspn $str2	die zweite zeichenkette
function strcspn $length	die länge der zu untersuchenden zeichenkette
function strcspn $str1	die erste zeichenkette
function strcspn $start	die anfangsposition der zu untersuchenden zeichenkette
function int strcspn	gibt die länge des gefundenen segments als integerwert zurück
function int strcspn string $str1 string $str2 int $start int $length	ermittelt die anzahl der nicht &uuml;bereinstimmenden zeichen
function strip tags $str	die eingabezeichenkette
function strip tags $allowable_tags	sie können den optionalen zweiten parameter verwenden um die tags anzugeben die nicht entfernt werden sollen
function string strip tags	gibt die reduzierte zeichenkette zurück
function string strip tags string $str string $allowable_tags	entfernt html- und php-tags aus einem string
function stripslashes $str	die eingabezeichenkette
function string stripslashes	gibt einen string zurück aus dem alle backslashes \ entfernt wurden
function string stripslashes string $str	entfernt maskierungszeichen aus einem string
function strnatcmp $str2	die zweite zeichenkette
function strnatcmp $str1	die erste zeichenkette
function int strnatcmp	gibt einen wert < 0 zurück wenn str1 in der natürlichen sortierung vor str2 steht einen wert > 0 wenn str1 in der natürlichen sortierung hinter str2 steht und 0 wenn sie gleich sind
function int strnatcmp string $str1 string $str2	string-vergleich unter verwendung einer nat&uuml;rlichen ordnung
function strncasecmp $str2	die zweite zeichenkette
function strncasecmp $str1	die erste zeichenkette
function strncasecmp $len	die länge der zeichenkette die für den vergleich herangezogen werden soll
function int strncasecmp	gibt einen wert < 0 zurück wenn str1 kürzer ist als str2 einen wert > 0 wenn str1 länger ist als str2 und 0 wenn sie gleich sind
function int strncasecmp string $str1 string $str2 int $len	bin&auml;rdaten-sicherer und gro&szlig;- und kleinschreibungs-unabh&auml;ngiger stringvergleich der ersten n zeichen
function strncmp $str2	die zweite zeichenkette
function strncmp $len	die anzahl der zeichen die für den vergleich herangezogen werden soll
function strncmp $str1	die erste zeichenkette
function int strncmp	ist str1 kleiner als str2 wird < 0 zurückgegeben ist str1 größer als str2 > 0 und bei gleichheit gibt die funktion 0 zurück
function int strncmp string $str1 string $str2 int $len	string-vergleich der ersten n zeichen binary safe
function strpbrk $haystack	die zeichenkette in der char_list gesucht werden soll
function strpbrk $char_list	dieser parameter berücksichtigt groß- und kleinschreibung
function string strpbrk	gibt den rest des strings beginnend bei der ersten fundstelle zurück; falls kein zeichen gefunden wird jedoch false
function string strpbrk string $haystack string $char_list	durchsucht einen string nach einem zeichen aus einer gruppe von zeichen
function strpos $needle	ist needle kein string wird der parameter in einen integerwert konvertiert der dem ordinalwert des zeichens entspricht
function strpos $offset	der optionale parameter offset ermöglicht es ihnen die startposition für die suche innerhalb von haystack anzugeben
function strpos $haystack	die zeichenkette in der gesucht werden soll
function mixed strpos	gibt die position als integerwert zurück
function mixed strpos string $haystack mixed $needle int $offset	sucht das erste vorkommen des suchstrings
function strrchr $needle	enthält needle mehr als ein zeichen wird nur das erste zeichen verwendet
function strrchr $haystack	die zeichenkette in der gesucht werden soll
function string strrchr	die funktion gibt den einen teil der zeichenkette zurück wird needle nicht gefunden ist der rückgabewert false
function string strrchr string $haystack mixed $needle	sucht das letzte vorkommen eines zeichens in einem string
function strrev $string	die umzukehrende zeichenkette
function string strrev	gibt die umgekehrte zeichenfolge zurück
function string strrev string $string	kehrt einen string um
function strripos $needle	ist needle kein string wird der parameter in einen integerwert konvertiert der dem ordinalwert des zeichens entspricht
function strripos $haystack	die zeichenkette in der gesucht werden soll
function strripos $offset	wenn angegeben wird die suche diese anzahl an buchstaben vom anfang des strings gezählt stoppen
function int strripos	gibt die numerische position des letzten vorkommens von needle zurück
function int strripos string $haystack string $needle int $offset	findet das letzte vorkommen der gesuchten zeichenkette in einem string unabh&auml;ngig von gro&szlig;- und kleinschreibung
function strrpos $needle	ist needle kein string wird der parameter in einen integerwert konvertiert der dem ordinalwert des zeichens entspricht
function strrpos $offset	wenn angegeben wird die suche diese anzahl an buchstaben vom anfang des strings gezählt stoppen
function strrpos $haystack	die zeichenkette in der gesucht werden soll
function int strrpos	gibt die position des vorkommens des gesuchten teilstrings relativ zum anfang der zeichenkette haystack unabhängig von suchrichtung oder offset zurück
function int strrpos string $haystack string $needle int $offset	findet die position des letzten vorkommens eines teilstrings innerhalb einer zeichenkette
function strspn $length	die zu untersuchende länge des abschnitts von subject
function strspn $subject	die zu untersuchende zeichenkette
function strspn $mask	die menge der erlaubten zeichen
function strspn $start	die position in subject an der die suche startet
function int strspn	gibt die länge des abschnittes am anfang von subject zurück der vollständig aus in mask angegebenen zeichen besteht
function int strspn string $subject string $mask int $start int $length	ermittelt die l&auml;nge des initialen abschnitts einer zeichenkette der ausschlie&szlig;lich aus zeichen besteht die in einer &uuml;bergebenen maske enthalten sind
function strstr $needle	ist needle kein string wird der parameter in einen integerwert konvertiert der dem ordinalwert des zeichens entspricht
function strstr $haystack	die eingabezeichenkette
function strstr $before_needle	ist der wert auf true gesetzt gibt strstr() den teil von haystack zurück der sich vor dem ersten vorkommen von needle befindet ohne needle selbst
function string strstr	gibt einen teil der zeichenkette zurück
function string strstr string $haystack mixed $needle bool $before_needle	findet das erste vorkommen eines strings
function strtok $token	die trennzeichen die auf str angewendet werden sollen
function strtok $str	der string der in kleinere zeichenketten token zerlegt werden soll
function string strtok	der aktuelle string -token
function string strtok string $str string $token	zerlegt einen string
function strtolower $string	die eingabezeichenkette
function string strtolower	gibt die zeichenkette in kleinbuchstaben zurück
function string strtolower string $string	setzt einen string in kleinbuchstaben um
function strtoupper $string	die eingabezeichenkette
function string strtoupper	gibt die zeichenkette in großbuchstaben zurück
function string strtoupper string $string	wandelt alle zeichen eines strings in gro&szlig;buchstaben um
function strtr $to	der string der from ersetzen soll
function strtr $replace_pairs	der replace_pairs -parameter kann anstatt der parameter to und from verwendet werden
function strtr $str	der string in dem die ersetzungen vorgenommen werden sollen
function strtr $from	der string der gegen to ausgetauscht werden soll
function string strtr	gibt den übersetzten string zurück
function string strtr string $str string $from string $to	tauscht zeichen aus oder ersetzt zeichenketten
function substr compare $offset	die anfangsposition für den vergleich
function substr compare $length	die länge der zu vergleichenden zeichensequenz
function substr compare $str	die zweite zu vergleichende zeichenkette
function substr compare $case_insensitivity	wenn case_insensitivity den wert true hat wird der vergleich ohne berücksichtigung der groß- und kleinschreibung durchgeführt
function substr compare $main_str	die zu vergleichende hauptzeichenkette
function int substr compare	gibt eine zahl < 0 zurück wenn main_str ab der in offset festgelegten position kürzer ist als str eine zahl > 0 wenn der ermittelte string länger ist als str und 0 wenn sie gleich sind
function int substr compare string $main_str string $str int $offset int $length bool $case_insensitivity	bin&auml;rdaten-sicherer vergleich zweier strings beginnend an einer bestimmten position und endend nach einer festgelegten l&auml;nge
function substr count $needle	der substring nach dem gesucht werden soll
function substr count $offset	die zeichenposition an der die zählung begonnen werden soll
function substr count $haystack	der string in dem gesucht werden soll
function substr count $length	die maximale länge nach dem angegebenen offset in der nach dem substring gesucht werden soll
function int substr count	die funktion gibt einen wert vom typ integer zurück
function int substr count string $haystack string $needle int $offset int $length	ermittelt wie oft eine zeichenkette in einem string vorkommt
function substr replace $start	ist start positiv beginnt die ersetzung ab der im offset-parameter start definierten stelle innerhalb von string
function substr replace $replacement	die ersetzungszeichenkette
function substr replace $length	ist der parameter angegeben und positiv stellt dieser parameter die länge des auszuwechselnden teils von string dar
function substr replace $string	die eingabezeichenkette
function mixed substr replace	der entstehende string wird zurückgegeben
function mixed substr replace mixed $string mixed $replacement mixed $start mixed $length	ersetzt text innerhalb einer zeichenkette
function substr $length	ist length angegeben und positiv enthält der zurückgegebene string höchstens length zeichen ab start abhängig von der länge von string
function substr $start	wenn start nicht negativ ist beginnt der zurückgegebene string an der start -position von string angefangen bei 0 null
function substr $string	die eingabezeichenkette
function string substr	gibt den extrahierten teil von string zurück
function string substr string $string int $start int $length	gibt einen teil eines strings zur&uuml;ck
function symlink $target	ziel des links
function symlink $link	der linkname
function bool symlink	gibt bei erfolg true zurück
function bool symlink string $target string $link	erzeugt einen symbolischen link
function array sys getloadavg	gibt ein array mit den drei messwerten der letzten 1 5 und 15 minuten zurück
function array sys getloadavg	ermittelt durchschnittliche systemlast
function syslog $message	die zu sendende nachricht in der die beiden zeichen %m durch den fehlertext strerror ersetzt werden der dem wert errno entspricht
function syslog $priority	der parameter priority ist eine kombination der system-möglichkeiten und dem level
function bool syslog	gibt bei erfolg true zurück
function bool syslog int $priority string $message	erzeugt eine meldung im system-logging
function system $return_var	ist das return_var -argument angegeben wird der rückgabewert des ausgeführten befehls in diese variable geschrieben
function system $command	das auszuführende kommando
function string system	gibt bei erfolg die letzte zeile der ausgabe des befehls zurück im fehlerfall hingegen false
function string system string $command int $return_var	f&uuml;hrt ein externes programm aus und zeigt dessen ausgabe an
function tanh $arg	der zu verarbeitende wert
function float tanh	der tangens hyperbolikus von arg
function float tanh float $arg	tangens hyperbolikus
function tempnam $dir	das verzeichnis in dem die temporäre datei erstellt werden soll
function tempnam $prefix	der präfix des genererierten temporären dateinamens
function string tempnam	gibt den neuen temporären dateinamen mit pfad zurück oder im fehlerfall false
function string tempnam string $dir string $prefix	erzeugt eine datei mit eindeutigem dateinamen
function time nanosleep $nanoseconds	muss eine nicht negative ganzzahl kleiner eine milliarde sein
function time nanosleep $seconds	muss eine nicht negative ganzzahl sein
function mixed time nanosleep	gibt bei erfolg true zurück
function mixed time nanosleep int $seconds int $nanoseconds	verz&ouml;gert die ausf&uuml;hrung um die gegebene anzahl sekunden und nanosekunden
function time sleep until $timestamp	der unix-timestamp zu dem die ausführung des skripts wieder aufgenommen werden soll
function bool time sleep until	gibt bei erfolg true zurück
function bool time sleep until float $timestamp	l&auml;sst das skript bis zur angegebenen zeit schlafen
function int time	gibt den aktuellen unix-timestamp / zeitstempel zur&uuml;ck
function resource tmpfile	gibt einen dateizeiger für die neue datei zurück der ähnlich zu dem zeiger ist den fopen() zurückgibt
function resource tmpfile	erstellt eine tempor&auml;re datei
function token name $token	der tokenwert
function string token name	der bezeichner für den angegebenen token
function string token name int $token	gibt bezeichner f&uuml;r ein php-token zur&uuml;ck
function touch $filename	der name der zu ändernden datei
function touch $atime	falls angegeben wird die zugriffszeit der angegebenen datei auf atime gesetzt
function touch $time	die modifikationszeit
function bool touch	gibt bei erfolg true zurück
function bool touch string $filename int $time int $atime	setzt die zugriffs- und modifikationszeit einer datei
function trigger error $error_msg	die gewünschte fehlermeldung für diesen fehler
function trigger error $error_type	der gewünschte fehlertyp für diesen fehler
function bool trigger error	die funktion gibt false zurück wenn ein falscher error_type übergeben wurde sonst true
function bool trigger error string $error_msg int $error_type	erzeugt eine benutzerdefinierte fehlermeldung / warnung / benachrichtigung
function trim $str	string erwartet die zu trimmende zeichenkette
function trim $character_mask	optional kann die liste der zeichen angegeben werden die an anfang und ende der zeichenkette entfernt werden sollen
function string trim	der gekürzte string
function string trim string $str string $character_mask	entfernt whitespaces oder andere zeichen am anfang und ende eines strings
function uasort $value_compare_func	siehe usort() und uksort() für beispiele benutzerdefinierter vergleichsfunktionen
function uasort $array	das zu sortierende array
function bool uasort	gibt bei erfolg true zurück
function bool uasort array $array callable $value_compare_func	sortiert ein array mittels einer benutzerdefinierten vergleichsfunktion und beh&auml;lt indexassoziationen bei
function ucwords $str	die eingabezeichenkette
function ucwords $delimiters	der optionale delimiters parameter enthält die wort-trenzeichen
function string ucwords	gibt die modifizierte zeichenkette zurück
function string ucwords string $str string $delimiters	wandelt jeden ersten buchstaben eines wortes innerhalb eines strings in einen gro&szlig;buchstaben
function udm free agent $agent	zeiger auf einen agenten erhalten nach einem aufruf von udm_alloc_agent()
function int udm free agent	gibt bei erfolg true zurück
function int udm free agent resource $agent	l&ouml;scht eine mnogosearch session
function udm free ispell data $agent	zeiger auf einen agenten der mit einem aufruf von udm_alloc_agent() erstellt wurde
function bool udm free ispell data	udm_free_ispell_data() liefert stets true zurück
function bool udm free ispell data int $agent	gibt den speicher frei der f&uuml;r ispell alloziiert wurde
function udm get doc count $agent	zeiger auf einen agenten erhalten nach einem aufruf von udm_alloc_agent()
function int udm get doc count	die anzahl der gefundenen dokumente
function int udm get doc count resource $agent	liefert die anzahl aller dokumente in der datenbank zur&uuml;ck
function uksort $key_compare_func	die vergleichsfunktion muss einen integer kleiner als gleich oder größer als null zurückgeben wenn das erste argument respektive kleiner gleich oder größer als das zweite ist
function uksort $array	das zu sortierende array
function bool uksort	gibt bei erfolg true zurück
function bool uksort array $array callable $key_compare_func	sortiert ein array nach schl&uuml;sseln mittels einer benutzerdefinierten vergleichsfunktion
function umask $mask	die neue umask
function int umask	umask() ohne parameter gibt nur die aktuelle umask zurück; andernfalls wird die alte umask zurückgegeben
function int umask int $mask	changes the current umask
function uniqid $more_entropy	falls dieser parameter auf true gesetzt ist wird uniqid() am ende des rückgabewertes zusätzliche mit dem kongruenzgenerator für pseudozufallszahlen combined linear congruential generator erzeugte entropie anfügen wodurch die wahrscheinlichkeit erhöht wird dass das ergebnis eindeutig ist
function uniqid $prefix	kann z
function string uniqid	gibt eine eindeutige id als zeichenkette zurück
function string uniqid string $prefix bool $more_entropy	erzeugt eine eindeutige id
function unixtojd $timestamp	ein zu konvertierender unix timestamp
function int unixtojd	ein julianischer tag als integer
function int unixtojd int $timestamp	konvertiert unix-timestamp in julianisches datum
function unlink $context	hinweis : die kontext-unterstützung gibt es seit php 5
function unlink $filename	pfad zur datei
function bool unlink	gibt bei erfolg true zurück
function bool unlink string $filename resource $context	l&ouml;scht eine datei
function unpack $format	die format-codes werden unter pack() näher erläutert
function unpack $data	die gepackten daten
function array unpack	gibt ein assoziatives array zurück dass die entpackten elemente als binärzeichenkette enthält
function array unpack string $format string $data	entpackt die daten eines bin&auml;r-strings
function urldecode $str	der zu dekodierende string
function string urldecode	gibt den dekodierten string zurück
function string urldecode string $str	dekodiert eine url-kodierte zeichenkette
function urlencode $str	der zu kodierende string
function string urlencode	gibt einen string zurück in dem alle nicht-alphanumerischen zeichen außer -_
function string urlencode string $str	url-kodiert einen string
function use soap error handler $handler	muss auf true gesetzt werden um fehlerdetails an clients zu senden
function bool use soap error handler	gibt den ursprünglichen wert zurück
function bool use soap error handler bool $handler	definiert ob soap-errorhandler benutzt werden soll
function usleep $micro_seconds	die anhaltezeit in mikrosekunden
function void usleep int $micro_seconds	programm-verz&ouml;gerung in mikrosekunden
function usort $array	das zu sortierende array
function usort $value_compare_func	die vergleichsfunktion muss einen integer kleiner als gleich oder größer als null zurückgeben wenn das erste argument respektive kleiner gleich oder größer als das zweite ist
function bool usort	gibt bei erfolg true zurück
function bool usort array $array callable $value_compare_func	sortiert ein array nach werten mittels einer benutzerdefinierten vergleichsfunktion
function utf8 decode $data	eine utf-8-kodierte zeichenkette
function string utf8 decode	gibt die iso-8859-1-übersetzung von data zurück
function string utf8 decode string $data	konvertiert eine als utf-8 kodierte iso-8859-1-zeichenkette in eine einfache iso-8859-1-zeichenkette
function utf8 encode $data	eine iso-8859-1 -kodierte zeichenkette
function string utf8 encode	gibt die utf-8-übersetzung von data zurück
function string utf8 encode string $data	konvertiert eine iso-8859-1-zeichenkette in utf-8
function vfprintf $format	die möglichen format -anweisungen sind in der funktion sprintf() dokumentiert
function int vfprintf	gibt die länge des ausgabestrings zurück
function int vfprintf resource $handle string $format array $args	schreibt einen formatierten string in einen stream
function virtual $filename	die datei die das virtuelle kommando ausführen soll
function bool virtual	führt bei erfolg ein virtuelles kommando aus im fehlerfall wird false zurückgegeben
function bool virtual string $filename	f&uuml;hrt eine apache-unteranfrage durch
function vsprintf $format	die dokumentation der sprintf() enthält die vollständige beschreibung des format -parameters
function string vsprintf	gibt array-werte als formatierten string entsprechend der format anweisung siehe beschreibung der formatierungsmöglichkeiten der funktion sprintf() zurück
function string vsprintf string $format array $args	gibt einen formatierten string zur&uuml;ck
function wordwrap $str	die eingabezeichenkette
function wordwrap $break	der optionale parameter break wird als zeichen kette für den zeilenumbruch verwendet
function wordwrap $width	die anzahl von zeichen nach denen die zeichenkette umgebrochen wird
function wordwrap $cut	wenn der parameter cut auf true gesetzt ist wird die zeichenkette spätestens nach der angegebenen width umgebrochen
function string wordwrap	gibt die übergebene zeichenkette zurück die an der angegebenen trennstelle umgebrochen wurde
function string wordwrap string $str int $width string $break bool $cut	bricht einen string nach einer bestimmten anzahl zeichen um
function array yp next	gibt das nächste schlüssel-wert-paar als array oder false im fehlerfall zurück
function array yp next string $domain string $map string $key	gibt das n&auml;chste schl&uuml;ssel-wert-paar in der angegebenen map zur&uuml;ck
function string zend logo guid	gibt phpe9568f35-d428-11d2-a769-00aa001acf42 zurück
function string zend logo guid	die guid des zend logos
function zip close $zip	eine zip-datei die zuvor mittels zip_open() geöffnet wurde
function void zip close resource $zip	schlie&szlig;t ein zip-archiv
function zip entry compressedsize $zip_entry	ein von zip_read() zurückgegebener verzeichniseintrag
function int zip entry compressedsize	die komprimierte größe
function int zip entry compressedsize resource $zip_entry	ermittelt die komprimierte gr&ouml;&szlig;e eines verzeichniseintrages
function zip entry filesize $zip_entry	ein von zip_read() zurückgegebener verzeichniseintrag
function int zip entry filesize	die größe des verzeichniseintrags
function int zip entry filesize resource $zip_entry	ermittelt die effektive gr&ouml;&szlig;e eines verzeichniseintrages
function zip entry read $zip_entry	ein von zip_read() zurückgegebener verzeichniseintrag
function zip entry read $length	die anzahl der zurückzugebenden bytes
function string zip entry read	gibt die gelesenen daten zurück oder einen leeren string wenn das ende der datei erreicht ist oder false bei einem fehler
function string zip entry read resource $zip_entry int $length	liest einen ge&ouml;ffneten verzeichniseintrag aus
function zip open $filename	der name der zu öffnenden zip-datei
function resource zip open	gibt einen dateizeiger für die spätere verwendung mit zip_read() und zip_close() zurück
function resource zip open string $filename	&ouml;ffnet ein zip-archiv
function string zlib encode string $data string $encoding string $level	komprimiert daten mit der gew&auml;hlten kodierung
function string zlib get coding type	mögliche ergebnisse sind gzip deflate oder false
function string zlib get coding type	gibt die f&uuml;r ausgabekomprimierung genutze methode zur&uuml;ck
Imagick get Image Channel Distortions $reference	imagick object containing the reference image
Imagick get Image Channel Distortions $channel	übergeben sie eine channel-konstante die für ihren channel-moduls gültig ist
Imagick get Image Channel Distortions $metric	refer to this list of metric type constants
Imagick float get Image Channel Distortions	returns a double describing the channel distortion
Imagick float get Image Channel Distortions Imagick $reference int $metric int $channel	gets channel distortions
Iterator scalar key	gibt bei erfolg einen skalar zurück im fehlerfall wird null zurückgegeben
Iterator scalar key	gibt den schl&uuml;ssel des aktuellen elements zur&uuml;ck
Iterator void next	r&uuml;ckt den zeiger auf das n&auml;chste element vor
IteratorAggregate Traversable get Iterator	eine instanz eines objektes das iterator oder traversable implementiert
IteratorAggregate Traversable get Iterator	holt einen externen iterator
JsonSerializable mixed json Serialize	gibt daten zurück die von json_encode() serialisiert werden können welche ein wert eines beliebigen typs der nicht resource ist
JsonSerializable mixed json Serialize	angegebene daten die in json serialisiert werden sollen
PDO exec $statement	das sql statement welches ausgeführt werden soll
PDO int exec	pdo::exec() gibt die anzahl von zeilen zurück welche durch diese abfrage geändert oder gelöscht wurden
PDO int exec string $statement	f&uuml;hrt ein sql statement aus und gibt die zahl der betroffenen zeilen zur&uuml;ck
Serializable string serialize	gibt die stringrepräsentation des objekts oder null zurück
Serializable string serialize	stringrepr&auml;sentation eines objekts
Serializable unserialize $serialized	die das objekt repräsentierende zeichenkette
Serializable void unserialize string $serialized	erstellt das objekt
SoapClient mixed call string $function_name string $arguments	ruft eine soap-funktion auf veraltet
SoapClient do Request $location	der anzufragende url
SoapClient do Request $action	die soap-aktion
SoapClient do Request $one_way	wenn one_way auf 1 gesetzt ist gibt diese methode nichts zurück
SoapClient do Request $version	die soap-version
SoapClient do Request $request	die xml-soap-anfrage
SoapClient string do Request	die xml-soap-antwort
SoapClient string do Request string $request string $location string $action int $version int $one_way	f&uuml;hrt eine soap-anfrage aus
SoapClient string get Last Request	die letzte soap-anfrage als xml-zeichenkette
SoapClient string get Last Request	gibt die letzte soap-anfrage zur&uuml;ck
SoapClient string get Last Response	die letzte soap-antwort als xml-zeichenkette
SoapClient string get Last Response	gibt die letzte soap-antwort zur&uuml;ck
SoapClient array get Types	das array der soap-typen mit detaillierter angabe aller strukturen und typen
SoapClient array get Types	gibt eine liste der soap-typen zur&uuml;ck
SoapClient set Location $new_location	der neue ziel-url
SoapClient string set Location	der alte ziel-url
SoapClient string set Location string $new_location	bestimmt die adresse des zu nutzenden webservices
SoapClient set Soap Headers $soapheaders	die zu setzenden header
SoapClient bool set Soap Headers	gibt bei erfolg true zurück
SoapClient bool set Soap Headers mixed $soapheaders	setzt soap-header f&uuml;r nachfolgende aufrufe
SoapClient soap Call $input_headers	ein array von mit dem soap-request zu sendenden headern
SoapClient soap Call $options	ein assoziatives array von optionen die an den client übergeben werden sollen
SoapClient soap Call $output_headers	sofern vorhanden wird dieses array mit den headern des soap-response gefüllt
SoapClient soap Call $arguments	ein array aus argumenten die an die funktion übergeben werden sollen
SoapClient soap Call $function_name	der name der aufzurufenden soap-funktion
SoapClient mixed soap Call	soap-funktionen können einen oder mehrere werte zurückgeben
SoapClient mixed soap Call string $function_name array $arguments array $options mixed $input_headers array $output_headers	ruft eine soap-funktion auf
SoapServer add Function $Funktionen	funktionsname als string übergeben um eine funktion hinzuzufügen
SoapServer void add Function mixed $functions	f&uuml;gt eine oder mehrere funktionen hinzu die soap-anfragen bearbeiten sollen
SoapServer handle $soap_request	soap-anfrage
SoapServer void handle string $soap_request	verarbeitet soap-anfragen
SoapServer set Class $args	die optionalen parameter werden zur laufzeit dem standardkonstruktor der klasse übergeben
SoapServer set Class $class_name	name der zu exportierenden klasse
SoapServer void set Class string $class_name mixed $args	setzt die klasse welche soap-anfragen verarbeitet
SoapServer set Persistence $mode	eine der soap_persistence_xxx konstanten
SoapServer void set Persistence int $mode	versetzt einen soapserver in den persistenz-modus
SoapVar Soap Var $type_name	der type-name
SoapVar Soap Var $encoding	die encoding-id eine der xsd_
SoapVar Soap Var $type_namespace	der type-namespace
SoapVar Soap Var $data	die zu übergebenden oder zurückzugebenden daten
SoapVar Soap Var $node_namespace	der xml-node-namespace
SoapVar Soap Var $node_name	der xml-nodename
SoapVar mixed Soap Var mixed $data string $encoding string $type_name string $type_namespace string $node_name string $node_namespace	soapvar-konstruktor
SolrQuery array get Group Functions	returns group functions group
SQLite3 bool close	gibt bei erfolg true sonst false zurück
SQLite3 bool close	beendet eine datenbankverbindung
SQLite3 construct $Schalter	optionale schalter die die art bestimmen wie die sqlite-datenbank geöffnet wird
SQLite3 construct $Dateiname	pfad zur sqlite-datenbank oder :memory: um eine im speicher befindliche datenbank zu nutzen
SQLite3 construct $Verschlüsselungs-Phrase	eine optionale verschlüsselungs-phrase die zur ver- und entschlüsselung der datenbank genutzt wird
SQLite3 string construct	gibt im erfolgsfall das sqlite-datenbank-objekt zurück
SQLite3 string construct string $Dateiname int $Schalter string $Verschlüsselungs-Phrase	instantiiert ein sqlite3 objekt und &ouml;ffnet eine sqlite3 datenbank
SQLite3 create Function $argument_count	die anzahl an argumenten die die sql-funktion entgegen nimmt
SQLite3 create Function $name	name der sql-funktion die erstellt oder neu definiert werden soll
SQLite3 create Function $callback	der name der php- oder benutzerdefinierten funktion welche als callback-funktion agieren soll und das verhalten der sql-funktion definiert
SQLite3 bool create Function	gibt true zurück wenn die funktion erfolgreich erstellt wurde
SQLite3 bool create Function string $name mixed $callback int $argument_count	registriert eine php-funktion die als sql-skalar-funktion genutzt werden kann
SQLite3 int last Error Code	liefert einen integerwert der das numerische ergebnis der letzten fehlgeschlagenen sqlite-anweisung repräsentiert
SQLite3 int last Error Code	gibt den numerischen ergebniscode der letzten fehlgeschlagenen sqlite-anweisung zur&uuml;ck
SQLite3 int last Insert Row ID	gibt die datensatz-id des zuletzt getätigten insert in die datenbank zurück
SQLite3 int last Insert Row ID	gibt die datensatz-id des zuletzt get&auml;tigten insert in die datenbank zur&uuml;ck
SQLite3 load Extension $shared_library	name der zu ladenden bibliothek
SQLite3 bool load Extension	gibt true zurück wenn die erweiterung erfolgreich geladen wurde und false im fehlerfall
SQLite3 bool load Extension string $shared_library	attempts to load an sqlite extension library
SQLite3 open $filename	pfad zu der sqlite datenbank oder :memory: um eine im arbeitsspeicher liegende datenbank zu erstellen
SQLite3 open $flags	optionale parameter zur bestimmung wie die sqlite datenbank geöffnet werden soll
SQLite3 open $encryption_key	ein optionaler schlüssel zur verschlüsselung der datenbank
SQLite3 void open string $filename int $flags string $encryption_key	&ouml;ffnet eine sqlite datenbank
SQLite3 prepare $query	die vorzubereitende sql-anfrage
SQLite3 SQLite3Stmt prepare	gibt im erfolgsfall ein sqlite3stmt -objekt zurück oder im fehlerfall wird false zurückgegeben
SQLite3 SQLite3Stmt prepare string $query	bereitet eine sql-anweisung f&uuml;r die ausf&uuml;hrung vor
V8Js construct $report_uncaught_exceptions	steuert ob ungefangene javascript-exceptions sofort berichtet werden sollen oder nicht
V8Js construct $variables	zuweisung von php-variablen die in javascript verfügbar sein sollen
V8Js construct $object_name	der name des objekts dass an javascript übergeben wird
V8Js construct $extensions	liste von erweiterungen die mit v8js::registerextension() registriert wurden und im javascript-kontext des erstellten v8js -objekts verfügbar sein sollen
V8Js string construct	gibt ein neues v8js-kontextobjekt zurück
V8Js string construct string $object_name array $variables array $extensions bool $report_uncaught_exceptions	erstellt ein neues v8js-objekt
V8Js execute String $identifier	identifizierende zeichenkette für den code zu fehlersuchzwecken
V8Js execute String $script	der code der ausgeführt werden soll
V8Js execute String $flags	parameter für die ausführung
V8Js mixed execute String	gibt die letzte im javascript-code instanziierte variable in den passenden php-variablentyp umgewandelt zurück
V8Js mixed execute String string $script string $identifier int $flags	f&uuml;hrt javascript-code aus
V8Js array get Extensions	gibt ein array von registrierten erweiterungen zurück oder ein leeres array wenn keine registriert sind
V8Js array get Extensions	gibt ein array der registrierten erweiterungen zur&uuml;ck
V8Js V8JsException get Pending Exception	entweder eine v8jsexception oder null
V8Js V8JsException get Pending Exception	gibt ausstehende ungefangene javascript-exception zur&uuml;ck
V8Js register Extension $script	javascript-code der registriert werden soll
V8Js register Extension $dependencies	array mit namen von erweiterungen von denen diese erweiterung abhängt
V8Js register Extension $auto_enable	ist dieser wert true standard: false so wird die erweiterung automatisch in allen v8js -kontexten aktiviert
V8Js register Extension $extension_name	name der erweiterung die registriert werden soll
V8Js bool register Extension	gibt bei erfolg true zurück ansonsten false
V8Js bool register Extension string $extension_name string $script array $dependencies bool $auto_enable	registriert javascript-erweiterungen f&uuml;r v8js
XMLReader bool close	gibt bei erfolg true zurück
XMLReader bool close	xmlreader-eingabe beenden
XMLReader expand $basenode	ein domnode der das domdocument ziel für das erzeugte dom objekt definiert
XMLReader DOMNode expand	entsprechendes domnode oder false bei fehlern
XMLReader DOMNode expand DOMNode $basenode	gibt eine kopie des aktuellen knotens als dom-objekt zur&uuml;ck
XMLReader get Attribute $name	der name des attributes
XMLReader string get Attribute	der wert des attributes oder null wenn kein attribut name im aktuellen element gefunden wurde oder der cursor derzeitig nicht über einem elementknoten positioniert ist
XMLReader string get Attribute string $name	gibt den wert eines attributes nach namen zur&uuml;ck
XMLReader get Attribute No $index	position des attributes
XMLReader string get Attribute No	der wert des attributes oder eine leere zeichenkette vor php 5
XMLReader string get Attribute No int $index	gibt den wert eines attributes nach position zur&uuml;ck
XMLReader get Attribute Ns $localName	der lokale name des attributes
XMLReader get Attribute Ns $namespaceURI	die uri des namensraum
XMLReader string get Attribute Ns	der wert des attributes oder eine leere zeichenkette vor php 5
XMLReader string get Attribute Ns string $localName string $namespaceURI	gibt den wert eines attributes nach lokalem namen und uri zur&uuml;ck
XMLReader get Parser Property $property	eine der parser-optionskonstanten
XMLReader bool get Parser Property	gibt bei erfolg true zurück
XMLReader bool get Parser Property int $property	zeigt an ob die angegebene eigenschaft gesetzt wurde
XMLReader bool is Valid	gibt bei erfolg true zurück
XMLReader bool is Valid	zeigt an ob das geparste dokument valide ist
XMLReader lookup Namespace $prefix	zeichenkette mit präfix
XMLReader bool lookup Namespace	gibt bei erfolg true zurück
XMLReader bool lookup Namespace string $prefix	pr&uuml;fen ob ein namensbereich f&uuml;r einen pr&auml;fix vorhanden ist
XMLReader bool move To Element	gibt bei erfolg true zurück und false wenn es fehlgeschlagen ist oder die methode aufgerufen wird wenn der zeiger nicht auf ein attribut zeigt
XMLReader bool move To Element	zeiger positionieren auf das elternelement des aktuellen attributes
XMLReader bool move To First Attribute	gibt bei erfolg true zurück
XMLReader bool move To First Attribute	zeiger auf erstes attribut setzen
XMLReader bool move To Next Attribute	gibt bei erfolg true zurück
XMLReader bool move To Next Attribute	zeiger auf n&auml;chstes attribut setzen
XMLReader open $options	bitmaske bestehend aus libxml_* konstanten
XMLReader open $encoding	dokumentkodierung oder null
XMLReader open $URI	uri die auf den xml-inhalt verweist
XMLReader bool open	gibt bei erfolg true zurück
XMLReader bool open string $URI string $encoding int $options	uri angeben die auf xml-inhalt verweist der geparst werden soll
XMLReader bool read	gibt bei erfolg true zurück
XMLReader bool read	zeiger auf das n&auml;chste element setzen
XMLReader string read Inner XML	gibt inhalt des aktuellen knotens als zeichenkette zurück; im fehlerfall eine leere zeichenkette
XMLReader string read Inner XML	erhalte xml des aktuellen knotens
XMLReader string read Outer XML	gibt inhalt des aktuellen knotens inklusive dem knoten selbst als zeichenkette zurück; im fehlerfall eine leere zeichenkette
XMLReader string read Outer XML	erhalte xml des aktuellen knotens inklusive den knoten selbst
XMLReader set Parser Property $property	eine der parser-optionskonstanten
XMLReader set Parser Property $value	wenn die option auf true gesetzt wird sie aktiviert sonst deaktiviert
XMLReader bool set Parser Property	gibt bei erfolg true zurück
XMLReader bool set Parser Property int $property bool $value	parser-optionen setzen
XMLReader xml $options	bitmaske bestehend aus libxml_* konstanten
XMLReader xml $source	zeichenkette mit xml-inhalt der geparst werden soll
XMLReader xml $encoding	dokumentkodierung oder null
XMLReader bool xml	gibt bei erfolg true zurück
XMLReader bool xml string $source string $encoding int $options	zeichenkette setzen deren inhalt geparst werden soll
XsltProcessor int get Security Prefs	eine bitmaske bestehend aus xsl_secpref_read_file xsl_secpref_write_file xsl_secpref_create_directory xsl_secpref_read_network xsl_secpref_write_network
XsltProcessor int get Security Prefs	liefert die sicherheitseinstellungen
XSLTProcessor bool has Exslt Support	gibt bei erfolg true zurück
XSLTProcessor bool has Exslt Support	pr&uuml;ft ob die exslt-unterst&uuml;tzung aktiviert ist
XSLTProcessor import Stylesheet $stylesheet	das zu importierende stylesheet in form eines domdocument - oder simplexmlelement -objekts
XSLTProcessor bool import Stylesheet	gibt bei erfolg true zurück
XSLTProcessor bool import Stylesheet object $stylesheet	importiert ein stylesheet
XSLTProcessor remove Parameter $localName	der lokale name des parameters
XSLTProcessor remove Parameter $namespaceURI	die namespace-uri des xslt-parameters
XSLTProcessor bool remove Parameter	gibt bei erfolg true zurück
XSLTProcessor bool remove Parameter string $namespaceURI string $localName	l&ouml;scht einen parameter
XSLTProcessor set Parameter $options	ein assoziatives array mit name = > wert -paaren
XSLTProcessor set Parameter $name	der lokale name des parameters
XSLTProcessor set Parameter $namespace	die namespace-uri des xslt-parameters
XSLTProcessor set Parameter $value	der neue wert für den xslt-parameter
XSLTProcessor bool set Parameter	gibt bei erfolg true zurück
XSLTProcessor bool set Parameter string $namespace string $name string $value	setzt den wert f&uuml;r einen parameter
XSLTProcessor set Profiling $filename	pfad zur datei in die die informationen geschrieben werden
XSLTProcessor bool set Profiling	gibt bei erfolg true zurück
XSLTProcessor bool set Profiling string $filename	setzt den dateinamen f&uuml;r die ausgaben des profilers
XsltProcessor set Security Prefs $securityPrefs	die neue sicherheitseinstellung
XsltProcessor int set Security Prefs	liefert die vorherige sicherheitseinstellung zurück
XsltProcessor int set Security Prefs int $securityPrefs	setzt die sicherheitseinstellungen
XSLTProcessor transform To URI $doc	das zu verarbeitende dokument
XSLTProcessor transform To URI $uri	die uri für das ziel der transformation
XSLTProcessor int transform To URI	liefert die anzahl geschriebener bytes zurück oder false falls ein fehler aufgetreten ist
XSLTProcessor int transform To URI DOMDocument $doc string $uri	transformierung zu einer uri
ZipArchive add File $start	dieser parameter wird nicht genutzt aber benötigt um ziparchive zu erweitern
ZipArchive add File $filename	der pfad zur hinzuzufügenden datei
ZipArchive add File $localname	falls übergeben ist dies der lokale name innerhalb des zip-archives der den filename überschreibt
ZipArchive add File $length	dieser parameter wird nicht genutzt aber benötigt um ziparchive zu erweitern
ZipArchive bool add File	gibt bei erfolg true zurück
ZipArchive bool add File string $filename string $localname int $start int $length	f&uuml;gt eine datei von einem gegebenen pfad zu einem zip-archiv hinzu
ZipArchive add From String $contents	der inhalt der zum erstellen des eintrags verwendet werden soll
ZipArchive add From String $localname	der name des anzulegenden eintrags
ZipArchive bool add From String	gibt bei erfolg true zurück
ZipArchive bool add From String string $localname string $contents	f&uuml;gt eine datei unter verwendung ihres inhalts zu einem zip-archiv hinzu
ZipArchive bool close	gibt bei erfolg true zurück
ZipArchive bool close	schlie&szlig;t das aktive archiv ge&ouml;ffnet oder neu erstellt
ZipArchive delete Index $index	index des zu löschenden eintrags
ZipArchive bool delete Index	gibt bei erfolg true zurück
ZipArchive bool delete Index int $index	l&ouml;scht einen archiveintrag unter verwendung seines index
ZipArchive get Archive Comment $flags	ist flags auf ziparchive::fl_unchanged gesetzt wird der originale unveränderte kommentar zurückgegeben
ZipArchive string get Archive Comment	gibt bei erfolg den zip-archiv-kommentar zurück
ZipArchive string get Archive Comment int $flags	gibt den zip-archiv-kommentar zur&uuml;ck
ZipArchive get Comment Name $name	name des eintrags
ZipArchive get Comment Name $flags	wenn das flag auf ziparchive::fl_unchanged gesetzt ist wird der originale kommentar unverändert zurückgegeben
ZipArchive string get Comment Name	gibt bei erfolg den kommentar zurück
ZipArchive string get Comment Name string $name int $flags	gibt den kommentar zu einem eintrag unter verwendung des eintragsnamens zur&uuml;ck
ZipArchive get From Index $length	die von dem eintrag zu lesende länge
ZipArchive get From Index $flags	die flags die beim öffnen des archivs verwendet werden können
ZipArchive get From Index $index	index des eintrags
ZipArchive string get From Index	gibt im erfolgsfall den inhalt des eintrags zurück
ZipArchive string get From Index int $index int $length int $flags	gibt den inhalt eines eintrags unter verwendung seines index zur&uuml;ck
ZipArchive locate Name $flags	die funktion gibt den index der datei namens fname im archiv zurück
ZipArchive locate Name $name	der name des eintrags nach dem gesucht werden soll
ZipArchive int locate Name	gibt im erfolgsfall den index eines eintrags zurück
ZipArchive int locate Name string $name int $flags	gibt den index eines archiveintrags zur&uuml;ck
ZipArchive rename Index $newname	neuer name
ZipArchive rename Index $index	index des umzubenennenden eintrags
ZipArchive bool rename Index	gibt bei erfolg true zurück
ZipArchive bool rename Index int $index string $newname	benennt einen durch seinen index bestimmten eintrag um
ZipArchive rename Name $name	name des umzubenennenden eintrags
ZipArchive rename Name $newname	neuer name
ZipArchive bool rename Name	gibt bei erfolg true zurück
ZipArchive bool rename Name string $name string $newname	benennt einen durch seinen namen bestimmten eintrag um
ZipArchive set Comment Name $comment	der inhalt des kommentars
ZipArchive set Comment Name $name	name des eintrags
ZipArchive bool set Comment Name	gibt bei erfolg true zurück
ZipArchive bool set Comment Name string $name string $comment	setzt einen eintragskommentar der via eintragsnamen bestimmt wird
ZipArchive stat Index $index	index des eintrags
ZipArchive stat Index $flags	ziparchive::fl_unchanged kann angewendet werden um ohne berücksichtigung eventueller veränderungen informationen über die originale datei im archiv zu erhalten
ZipArchive array stat Index	gibt ein array zurück das die eintragsdetails enthält
ZipArchive array stat Index int $index int $flags	gibt die details eines via index bestimmten eintrags zur&uuml;ck
ZipArchive stat Name $flags	das flags-argument gibt an wie die namensauflösung durchgeführt werden soll
ZipArchive stat Name $name	name des eintrags
ZipArchive array stat Name	gibt ein array zurück das die eintragsdetails enthält
ZipArchive array stat Name string $name int $flags	gibt die details eines via namen bestimmten eintrags zur&uuml;ck
ZipArchive bool unchange All	gibt bei erfolg true zurück
ZipArchive bool unchange All	setzt alle im archiv durchgef&uuml;hrten &auml;nderungen zur&uuml;ck
ZipArchive bool unchange Archive	gibt bei erfolg true zurück
ZipArchive bool unchange Archive	nimmt alle globalen &auml;nderungen zur&uuml;ck die im archiv durchgef&uuml;hrt wurden
ZipArchive unchange Index $index	index des eintrags
ZipArchive bool unchange Index	gibt bei erfolg true zurück
ZipArchive bool unchange Index int $index	nimmt alle &auml;nderungen zur&uuml;ck die auf dem eintrag mit dem gegebenen index gemacht wurden
