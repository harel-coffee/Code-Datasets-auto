clojure.core (* x y &amp; more)
clojure.core (*' x y &amp; more)
clojure.core (+ x y &amp; more)
clojure.core (+' x y &amp; more)
clojure.core (- x y &amp; more)
clojure.core (-' x y &amp; more)
clojure.core (-&gt; x &amp; forms)
clojure.core (-&gt;&gt; x &amp; forms)
clojure.core (-&gt;ArrayChunk am arr off end)
clojure.core (-&gt;Eduction xform coll)
clojure.core (-&gt;Vec am cnt shift root tail _meta)
clojure.core (-&gt;VecNode edit arr)
clojure.core (-&gt;VecSeq am vec anode i offset)
clojure.core (.. x form &amp; more)
clojure.core (/ x y &amp; more)
clojure.core (&lt; x y &amp; more)
clojure.core (&lt;= x y &amp; more)
clojure.core (== x y &amp; more)
clojure.core (&gt; x y &amp; more)
clojure.core (&gt;= x y &amp; more)
clojure.core (Throwable-&gt;map o)
clojure.core (accessor s key)
clojure.core (aclone array)
clojure.core (add-classpath url)
clojure.core (add-watch reference key fn)
clojure.core (agent state &amp; options)
clojure.core (agent-error a)
clojure.core (aget array idx &amp; idxs)
clojure.core (alength array)
clojure.core (alias alias namespace-sym)
clojure.core (all-ns)
clojure.core (alter ref fun &amp; args)
clojure.core (alter-meta! iref f &amp; args)
clojure.core (alter-var-root v f &amp; args)
clojure.core (amap a idx ret expr)
clojure.core (ancestors h tag)
clojure.core (and x &amp; next)
clojure.core (apply f a b c d &amp; args)
clojure.core (areduce a idx ret init expr)
clojure.core (array-map &amp; keyvals)
clojure.core (as-&gt; expr name &amp; forms)
clojure.core (aset array idx idx2 &amp; idxv)
clojure.core (aset-boolean array idx idx2 &amp; idxv)
clojure.core (aset-byte array idx idx2 &amp; idxv)
clojure.core (aset-char array idx idx2 &amp; idxv)
clojure.core (aset-double array idx idx2 &amp; idxv)
clojure.core (aset-float array idx idx2 &amp; idxv)
clojure.core (aset-int array idx idx2 &amp; idxv)
clojure.core (aset-long array idx idx2 &amp; idxv)
clojure.core (aset-short array idx idx2 &amp; idxv)
clojure.core (assert x message)
clojure.core (assoc! coll key val &amp; kvs)
clojure.core (assoc-in m [k &amp; ks] v)
clojure.core (associative? coll)
clojure.core (atom x &amp; options)
clojure.core (await &amp; agents)
clojure.core (await-for timeout-ms &amp; agents)
clojure.core (bases c)
clojure.core (bean x)
clojure.core (bigdec x)
clojure.core (bigint x)
clojure.core (biginteger x)
clojure.core (binding bindings &amp; body)
clojure.core (bit-and x y &amp; more)
clojure.core (bit-and-not x y &amp; more)
clojure.core (bit-clear x n)
clojure.core (bit-flip x n)
clojure.core (bit-not x)
clojure.core (bit-or x y &amp; more)
clojure.core (bit-set x n)
clojure.core (bit-shift-left x n)
clojure.core (bit-shift-right x n)
clojure.core (bit-test x n)
clojure.core (bit-xor x y &amp; more)
clojure.core (boolean x)
clojure.core (boolean-array size init-val-or-seq)
clojure.core (booleans xs)
clojure.core (bound-fn &amp; fntail)
clojure.core (bound-fn* f)
clojure.core (bound? &amp; vars)
clojure.core (butlast coll)
clojure.core (byte x)
clojure.core (byte-array size init-val-or-seq)
clojure.core (bytes xs)
clojure.core (case e &amp; clauses)
clojure.core (cast c x)
clojure.core (cat rf)
clojure.core (char x)
clojure.core (char-array size init-val-or-seq)
clojure.core (char? x)
clojure.core (chars xs)
clojure.core (class x)
clojure.core (class? x)
clojure.core (clojure-version)
clojure.core (coll? x)
clojure.core (comment &amp; body)
clojure.core (commute ref fun &amp; args)
clojure.core (comp f g &amp; fs)
clojure.core (comparator pred)
clojure.core (compare-and-set! atom oldval newval)
clojure.core (compile lib)
clojure.core (complement f)
clojure.core (completing f cf)
clojure.core (concat x y &amp; zs)
clojure.core (cond &amp; clauses)
clojure.core (cond-&gt; expr &amp; clauses)
clojure.core (cond-&gt;&gt; expr &amp; clauses)
clojure.core (condp pred expr &amp; clauses)
clojure.core (conj! coll x)
clojure.core (cons x seq)
clojure.core (constantly x)
clojure.core (construct-proxy c &amp; ctor-args)
clojure.core (contains? coll key)
clojure.core (count coll)
clojure.core (counted? coll)
clojure.core (create-ns sym)
clojure.core (create-struct &amp; keys)
clojure.core (cycle coll)
clojure.core (dec x)
clojure.core (dec' x)
clojure.core (decimal? n)
clojure.core (declare &amp; names)
clojure.core (dedupe coll)
clojure.core (def symbol doc-string? init?)
clojure.core (definterface name &amp; sigs)
clojure.core (defmacro name doc-string? attr-map? ([params*] body) + attr-map?)
clojure.core (defmethod multifn dispatch-val &amp; fn-tail)
clojure.core (defmulti name docstring? attr-map? dispatch-fn &amp; options)
clojure.core (defn- name &amp; decls)
clojure.core (defonce name expr)
clojure.core (defprotocol name &amp; opts+sigs)
clojure.core (delay &amp; body)
clojure.core (delay? x)
clojure.core (deliver promise val)
clojure.core (denominator r)
clojure.core (deref ref timeout-ms timeout-val)
clojure.core (derive h tag parent)
clojure.core (descendants h tag)
clojure.core (dissoc! map key &amp; ks)
clojure.core (distinct coll)
clojure.core (distinct? x y &amp; more)
clojure.core (do exprs*)
clojure.core (doall n coll)
clojure.core (dorun n coll)
clojure.core (doseq seq-exprs &amp; body)
clojure.core (dosync &amp; exprs)
clojure.core (dotimes bindings &amp; body)
clojure.core (doto x &amp; forms)
clojure.core (double x)
clojure.core (double-array size init-val-or-seq)
clojure.core (doubles xs)
clojure.core (drop n coll)
clojure.core (drop-last n s)
clojure.core (drop-while pred coll)
clojure.core (eduction xform* coll)
clojure.core (empty coll)
clojure.core (empty? coll)
clojure.core (ensure ref)
clojure.core (ensure-reduced x)
clojure.core (enumeration-seq e)
clojure.core (error-handler a)
clojure.core (error-mode a)
clojure.core (eval form)
clojure.core (even? n)
clojure.core (every-pred p1 p2 p3 &amp; ps)
clojure.core (every? pred coll)
clojure.core (ex-data ex)
clojure.core (ex-info msg map cause)
clojure.core (extend atype &amp; proto+mmaps)
clojure.core (extend-protocol p &amp; specs)
clojure.core (extend-type t &amp; specs)
clojure.core (extenders protocol)
clojure.core (extends? protocol atype)
clojure.core (false? x)
clojure.core (file-seq dir)
clojure.core (filter pred coll)
clojure.core (filterv pred coll)
clojure.core (find map key)
clojure.core (find-keyword ns name)
clojure.core (find-ns sym)
clojure.core (find-var sym)
clojure.core (first coll)
clojure.core (flatten x)
clojure.core (float x)
clojure.core (float-array size init-val-or-seq)
clojure.core (float? n)
clojure.core (floats xs)
clojure.core (flush)
clojure.core (fn name? ([params*] exprs*) +)
clojure.core (fn? x)
clojure.core (fnil f x y z)
clojure.core (for seq-exprs body-expr)
clojure.core (force x)
clojure.core (format fmt &amp; args)
clojure.core (frequencies coll)
clojure.core (future &amp; body)
clojure.core (future-call f)
clojure.core (future-cancel f)
clojure.core (future-cancelled? f)
clojure.core (future-done? f)
clojure.core (future? x)
clojure.core (gen-class &amp; options)
clojure.core (gen-interface &amp; options)
clojure.core (gensym prefix-string)
clojure.core (get map key not-found)
clojure.core (get-in m ks not-found)
clojure.core (get-method multifn dispatch-val)
clojure.core (get-proxy-class &amp; bases)
clojure.core (get-thread-bindings)
clojure.core (get-validator iref)
clojure.core (group-by f coll)
clojure.core (hash x)
clojure.core (hash-map &amp; keyvals)
clojure.core (hash-ordered-coll coll)
clojure.core (hash-set &amp; keys)
clojure.core (hash-unordered-coll coll)
clojure.core (identical? x y)
clojure.core (identity x)
clojure.core (if test then else?)
clojure.core (if-let bindings then else &amp; oldform)
clojure.core (if-not test then else)
clojure.core (if-some bindings then else &amp; oldform)
clojure.core (ifn? x)
clojure.core (import &amp; import-symbols-or-lists)
clojure.core (in-ns name)
clojure.core (inc x)
clojure.core (inc' x)
clojure.core (init-proxy proxy mappings)
clojure.core (instance? c x)
clojure.core (int x)
clojure.core (int-array size init-val-or-seq)
clojure.core (integer? n)
clojure.core (interleave c1 c2 &amp; colls)
clojure.core (intern ns name val)
clojure.core (interpose sep coll)
clojure.core (into to xform from)
clojure.core (into-array type aseq)
clojure.core (ints xs)
clojure.core (io! &amp; body)
clojure.core (isa? h child parent)
clojure.core (iterate f x)
clojure.core (iterator-seq iter)
clojure.core (juxt f g h &amp; fs)
clojure.core (keep f coll)
clojure.core (keep-indexed f coll)
clojure.core (key e)
clojure.core (keys map)
clojure.core (keyword ns name)
clojure.core (keyword? x)
clojure.core (last coll)
clojure.core (lazy-cat &amp; colls)
clojure.core (lazy-seq &amp; body)
clojure.core (let [bindings*] exprs*)
clojure.core (letfn [fnspecs*] exprs*)
clojure.core (line-seq rdr)
clojure.core (list &amp; items)
clojure.core (list* a b c d &amp; more)
clojure.core (list? x)
clojure.core (load &amp; paths)
clojure.core (load-file name)
clojure.core (load-reader rdr)
clojure.core (load-string s)
clojure.core (loaded-libs)
clojure.core (locking x &amp; body)
clojure.core (long x)
clojure.core (long-array size init-val-or-seq)
clojure.core (longs xs)
clojure.core (loop [bindings*] exprs*)
clojure.core (macroexpand form)
clojure.core (macroexpand-1 form)
clojure.core (make-array type dim &amp; more-dims)
clojure.core (make-hierarchy)
clojure.core (map f c1 c2 c3 &amp; colls)
clojure.core (map-entry? x)
clojure.core (map-indexed f coll)
clojure.core (map? x)
clojure.core (mapcat f &amp; colls)
clojure.core (mapv f c1 c2 c3 &amp; colls)
clojure.core (max x y &amp; more)
clojure.core (max-key k x y &amp; more)
clojure.core (memfn name &amp; args)
clojure.core (memoize f)
clojure.core (merge &amp; maps)
clojure.core (merge-with f &amp; maps)
clojure.core (meta obj)
clojure.core (methods multifn)
clojure.core (min x y &amp; more)
clojure.core (min-key k x y &amp; more)
clojure.core (mix-collection-hash hash-basis count)
clojure.core (mod num div)
clojure.core (monitor-enter x)
clojure.core (monitor-exit x)
clojure.core (name x)
clojure.core (namespace x)
clojure.core (namespace-munge ns)
clojure.core (neg? x)
clojure.core (new Classname args*)
clojure.core (newline)
clojure.core (next coll)
clojure.core (nil? x)
clojure.core (not x)
clojure.core (not-any? pred coll)
clojure.core (not-empty coll)
clojure.core (not-every? pred coll)
clojure.core (ns name docstring? attr-map? references*)
clojure.core (ns-aliases ns)
clojure.core (ns-imports ns)
clojure.core (ns-interns ns)
clojure.core (ns-map ns)
clojure.core (ns-name ns)
clojure.core (ns-publics ns)
clojure.core (ns-refers ns)
clojure.core (ns-resolve ns env sym)
clojure.core (ns-unalias ns sym)
clojure.core (ns-unmap ns sym)
clojure.core (nth coll index not-found)
clojure.core (nthnext coll n)
clojure.core (nthrest coll n)
clojure.core (num x)
clojure.core (number? x)
clojure.core (numerator r)
clojure.core (object-array size-or-seq)
clojure.core (odd? n)
clojure.core (or x &amp; next)
clojure.core (parents h tag)
clojure.core (partial f arg1 arg2 arg3 &amp; more)
clojure.core (partition n step pad coll)
clojure.core (partition-all n step coll)
clojure.core (partition-by f coll)
clojure.core (pcalls &amp; fns)
clojure.core (peek coll)
clojure.core (persistent! coll)
clojure.core (pmap f coll &amp; colls)
clojure.core (pop coll)
clojure.core (pop! coll)
clojure.core (pop-thread-bindings)
clojure.core (pos? x)
clojure.core (pr x &amp; more)
clojure.core (pr-str &amp; xs)
clojure.core (prefer-method multifn dispatch-val-x dispatch-val-y)
clojure.core (prefers multifn)
clojure.core (print &amp; more)
clojure.core (print-str &amp; xs)
clojure.core (printf fmt &amp; args)
clojure.core (println-str &amp; xs)
clojure.core (prn-str &amp; xs)
clojure.core (promise)
clojure.core (proxy class-and-interfaces args &amp; fs)
clojure.core (proxy-mappings proxy)
clojure.core (proxy-super meth &amp; args)
clojure.core (push-thread-bindings bindings)
clojure.core (pvalues &amp; exprs)
clojure.core (quot num div)
clojure.core (quote form)
clojure.core (rand n)
clojure.core (rand-int n)
clojure.core (rand-nth coll)
clojure.core (random-sample prob coll)
clojure.core (range start end step)
clojure.core (ratio? n)
clojure.core (rational? n)
clojure.core (rationalize num)
clojure.core (re-find re s)
clojure.core (re-groups m)
clojure.core (re-matcher re s)
clojure.core (re-matches re s)
clojure.core (re-pattern s)
clojure.core (re-seq re s)
clojure.core (read opts stream)
clojure.core (read-line)
clojure.core (read-string opts s)
clojure.core (reader-conditional form splicing?)
clojure.core (reader-conditional? value)
clojure.core (realized? x)
clojure.core (record? x)
clojure.core (recur exprs*)
clojure.core (reduce f val coll)
clojure.core (reduce-kv f init coll)
clojure.core (reduced x)
clojure.core (reduced? x)
clojure.core (reductions f init coll)
clojure.core (ref x &amp; options)
clojure.core (ref-history-count ref)
clojure.core (ref-max-history ref n)
clojure.core (ref-min-history ref n)
clojure.core (ref-set ref val)
clojure.core (refer ns-sym &amp; filters)
clojure.core (reify &amp; opts+specs)
clojure.core (release-pending-sends)
clojure.core (rem num div)
clojure.core (remove pred coll)
clojure.core (remove-all-methods multifn)
clojure.core (remove-method multifn dispatch-val)
clojure.core (remove-ns sym)
clojure.core (remove-watch reference key)
clojure.core (repeat n x)
clojure.core (repeatedly n f)
clojure.core (replace smap coll)
clojure.core (require &amp; args)
clojure.core (reset! atom newval)
clojure.core (reset-meta! iref metadata-map)
clojure.core (resolve env sym)
clojure.core (rest coll)
clojure.core (restart-agent a new-state &amp; options)
clojure.core (resultset-seq rs)
clojure.core (reverse coll)
clojure.core (reversible? coll)
clojure.core (rseq rev)
clojure.core (rsubseq sc start-test start-key end-test end-key)
clojure.core (run! proc coll)
clojure.core (satisfies? protocol x)
clojure.core (select-keys map keyseq)
clojure.core (send a f &amp; args)
clojure.core (send-off a f &amp; args)
clojure.core (send-via executor a f &amp; args)
clojure.core (seq coll)
clojure.core (seq? x)
clojure.core (seque n-or-q s)
clojure.core (sequence xform coll &amp; colls)
clojure.core (sequential? coll)
clojure.core (set coll)
clojure.core (set! (. Classname-symbol staticFieldName-symbol) expr)
clojure.core (set-agent-send-executor! executor)
clojure.core (set-agent-send-off-executor! executor)
clojure.core (set-error-handler! a handler-fn)
clojure.core (set-error-mode! a mode-keyword)
clojure.core (set-validator! iref validator-fn)
clojure.core (set? x)
clojure.core (short x)
clojure.core (short-array size init-val-or-seq)
clojure.core (shorts xs)
clojure.core (shuffle coll)
clojure.core (shutdown-agents)
clojure.core (slurp f &amp; opts)
clojure.core (some pred coll)
clojure.core (some-&gt; expr &amp; forms)
clojure.core (some-&gt;&gt; expr &amp; forms)
clojure.core (some-fn p1 p2 p3 &amp; ps)
clojure.core (some? x)
clojure.core (sort comp coll)
clojure.core (sort-by keyfn comp coll)
clojure.core (sorted-map &amp; keyvals)
clojure.core (sorted-map-by comparator &amp; keyvals)
clojure.core (sorted-set &amp; keys)
clojure.core (sorted-set-by comparator &amp; keys)
clojure.core (sorted? coll)
clojure.core (special-symbol? s)
clojure.core (spit f content &amp; options)
clojure.core (split-at n coll)
clojure.core (split-with pred coll)
clojure.core (str x &amp; ys)
clojure.core (string? x)
clojure.core (struct s &amp; vals)
clojure.core (struct-map s &amp; inits)
clojure.core (subs s start end)
clojure.core (subseq sc start-test start-key end-test end-key)
clojure.core (subvec v start end)
clojure.core (supers class)
clojure.core (swap! atom f x y &amp; args)
clojure.core (symbol ns name)
clojure.core (symbol? x)
clojure.core (sync flags-ignored-for-now &amp; body)
clojure.core (tagged-literal tag form)
clojure.core (tagged-literal? value)
clojure.core (take n coll)
clojure.core (take-last n coll)
clojure.core (take-nth n coll)
clojure.core (take-while pred coll)
clojure.core (test v)
clojure.core (the-ns x)
clojure.core (thread-bound? &amp; vars)
clojure.core (throw expr)
clojure.core (time expr)
clojure.core (to-array coll)
clojure.core (to-array-2d coll)
clojure.core (trampoline f &amp; args)
clojure.core (transduce xform f init coll)
clojure.core (transient coll)
clojure.core (tree-seq branch? children root)
clojure.core (true? x)
clojure.core (try expr* catch-clause* finally-clause?)
clojure.core (type x)
clojure.core (unchecked-add x y)
clojure.core (unchecked-add-int x y)
clojure.core (unchecked-byte x)
clojure.core (unchecked-char x)
clojure.core (unchecked-dec x)
clojure.core (unchecked-dec-int x)
clojure.core (unchecked-divide-int x y)
clojure.core (unchecked-double x)
clojure.core (unchecked-float x)
clojure.core (unchecked-inc x)
clojure.core (unchecked-inc-int x)
clojure.core (unchecked-int x)
clojure.core (unchecked-long x)
clojure.core (unchecked-multiply x y)
clojure.core (unchecked-multiply-int x y)
clojure.core (unchecked-negate x)
clojure.core (unchecked-negate-int x)
clojure.core (unchecked-remainder-int x y)
clojure.core (unchecked-short x)
clojure.core (unchecked-subtract x y)
clojure.core (unchecked-subtract-int x y)
clojure.core (underive h tag parent)
clojure.core (unreduced x)
clojure.core (unsigned-bit-shift-right x n)
clojure.core (update m k f x y z &amp; more)
clojure.core (update-in m [k &amp; ks] f &amp; args)
clojure.core (update-proxy proxy mappings)
clojure.core (use &amp; args)
clojure.core (val e)
clojure.core (vals map)
clojure.core (var symbol)
clojure.core (var-get x)
clojure.core (var-set x val)
clojure.core (var? v)
clojure.core (vary-meta obj f &amp; args)
clojure.core (vec coll)
clojure.core (vector a b c d e f &amp; args)
clojure.core (vector-of t &amp; elements)
clojure.core (vector? x)
clojure.core (volatile! val)
clojure.core (volatile? x)
clojure.core (vreset! vol newval)
clojure.core (vswap! vol f &amp; args)
clojure.core (when test &amp; body)
clojure.core (when-first bindings &amp; body)
clojure.core (when-let bindings &amp; body)
clojure.core (when-not test &amp; body)
clojure.core (when-some bindings &amp; body)
clojure.core (while test &amp; body)
clojure.core (with-bindings binding-map &amp; body)
clojure.core (with-bindings* binding-map f &amp; args)
clojure.core (with-in-str s &amp; body)
clojure.core (with-local-vars name-vals-vec &amp; body)
clojure.core (with-meta obj m)
clojure.core (with-open bindings &amp; body)
clojure.core (with-out-str &amp; body)
clojure.core (with-precision precision &amp; exprs)
clojure.core (with-redefs bindings &amp; body)
clojure.core (with-redefs-fn binding-map func)
clojure.core (xml-seq root)
clojure.core (zero? x)
clojure.core (zipmap keys vals)
clojure.data (diff a b)
clojure.edn (read opts stream)
clojure.edn (read-string opts s)
clojure.inspector (inspect x)
clojure.inspector (inspect-table data)
clojure.inspector (inspect-tree data)
clojure.instant (validated new-instance)
clojure.java.browse (browse-url url)
clojure.java.io (as-relative-path x)
clojure.java.io (copy input output &amp; opts)
clojure.java.io (delete-file f &amp; [silently])
clojure.java.io (file parent child &amp; more)
clojure.java.io (input-stream x &amp; opts)
clojure.java.io (make-parents f &amp; more)
clojure.java.io (output-stream x &amp; opts)
clojure.java.io (reader x &amp; opts)
clojure.java.io (resource n loader)
clojure.java.io (writer x &amp; opts)
clojure.java.javadoc (add-local-javadoc path)
clojure.java.javadoc (add-remote-javadoc package-prefix url)
clojure.java.javadoc (javadoc class-or-object)
clojure.java.shell (sh &amp; args)
clojure.java.shell (with-sh-dir dir &amp; forms)
clojure.java.shell (with-sh-env env &amp; forms)
clojure.main (demunge fn-name)
clojure.main (load-script path)
clojure.main (repl &amp; options)
clojure.main (repl-caught e)
clojure.main (repl-exception throwable)
clojure.main (repl-prompt)
clojure.main (repl-read request-prompt request-exit)
clojure.main (root-cause t)
clojure.main (skip-if-eol s)
clojure.main (skip-whitespace s)
clojure.main (stack-element-str el)
clojure.main (with-bindings &amp; body)
clojure.main (with-read-known &amp; body)
clojure.pprint (cl-format writer format-in &amp; args)
clojure.pprint (code-dispatch object)
clojure.pprint (formatter format-in)
clojure.pprint (formatter-out format-in)
clojure.pprint (fresh-line)
clojure.pprint (get-pretty-writer writer)
clojure.pprint (pp)
clojure.pprint (pprint object writer)
clojure.pprint (pprint-indent relative-to n)
clojure.pprint (pprint-logical-block options* body)
clojure.pprint (pprint-newline kind)
clojure.pprint (pprint-tab kind colnum colinc)
clojure.pprint (print-length-loop bindings &amp; body)
clojure.pprint (print-table rows)
clojure.pprint (set-pprint-dispatch function)
clojure.pprint (simple-dispatch object)
clojure.pprint (with-pprint-dispatch function &amp; body)
clojure.pprint (write object &amp; kw-args)
clojure.pprint (write-out object)
clojure.reflect (-&gt;AsmReflector class-resolver)
clojure.reflect (-&gt;Constructor name declaring-class parameter-types exception-types flags)
clojure.reflect (-&gt;Field name type declaring-class flags)
clojure.reflect (-&gt;JavaReflector classloader)
clojure.reflect (-&gt;Method name return-type declaring-class parameter-types exception-types flags)
clojure.reflect (map-&gt;Constructor m#)
clojure.reflect (map-&gt;Field m#)
clojure.reflect (map-&gt;Method m#)
clojure.repl (apropos str-or-pattern)
clojure.repl (demunge fn-name)
clojure.repl (dir nsname)
clojure.repl (dir-fn ns)
clojure.repl (doc name)
clojure.repl (find-doc re-string-or-pattern)
clojure.repl (pst e depth)
clojure.repl (root-cause t)
clojure.repl (set-break-handler! f)
clojure.repl (source n)
clojure.repl (source-fn x)
clojure.repl (stack-element-str el)
clojure.repl (thread-stopper thread)
clojure.set (difference s1 s2 &amp; sets)
clojure.set (index xrel ks)
clojure.set (intersection s1 s2 &amp; sets)
clojure.set (join xrel yrel km)
clojure.set (map-invert m)
clojure.set (project xrel ks)
clojure.set (rename xrel kmap)
clojure.set (rename-keys map kmap)
clojure.set (select pred xset)
clojure.set (subset? set1 set2)
clojure.set (superset? set1 set2)
clojure.set (union s1 s2 &amp; sets)
clojure.stacktrace (e)
clojure.stacktrace (print-cause-trace tr n)
clojure.stacktrace (print-stack-trace tr n)
clojure.stacktrace (print-throwable tr)
clojure.stacktrace (print-trace-element e)
clojure.stacktrace (root-cause tr)
clojure.string (blank? s)
clojure.string (capitalize s)
clojure.string (ends-with? s substr)
clojure.string (escape s cmap)
clojure.string (includes? s substr)
clojure.string (index-of s value from-index)
clojure.string (join separator coll)
clojure.string (last-index-of s value from-index)
clojure.string (lower-case s)
clojure.string (re-quote-replacement replacement)
clojure.string (replace s match replacement)
clojure.string (replace-first s match replacement)
clojure.string (reverse s)
clojure.string (split s re limit)
clojure.string (split-lines s)
clojure.string (starts-with? s substr)
clojure.string (trim s)
clojure.string (trim-newline s)
clojure.string (triml s)
clojure.string (trimr s)
clojure.string (upper-case s)
clojure.template (apply-template argv expr values)
clojure.template (do-template argv expr &amp; values)
clojure.test (are argv expr &amp; args)
clojure.test (assert-any msg form)
clojure.test (assert-predicate msg form)
clojure.test (compose-fixtures f1 f2)
clojure.test (deftest- name &amp; body)
clojure.test (do-report m)
clojure.test (file-position n)
clojure.test (function? x)
clojure.test (get-possibly-unbound-var v)
clojure.test (inc-report-counter name)
clojure.test (is form msg)
clojure.test (join-fixtures fixtures)
clojure.test (run-all-tests re)
clojure.test (run-tests &amp; namespaces)
clojure.test (successful? summary)
clojure.test (test-all-vars ns)
clojure.test (test-ns ns)
clojure.test (test-var v)
clojure.test (test-vars vars)
clojure.test (testing string &amp; body)
clojure.test (testing-contexts-str)
clojure.test (testing-vars-str m)
clojure.test (try-expr msg form)
clojure.test (with-test definition &amp; body)
clojure.test (with-test-out &amp; body)
clojure.walk (keywordize-keys m)
clojure.walk (macroexpand-all form)
clojure.walk (postwalk f form)
clojure.walk (postwalk-demo form)
clojure.walk (postwalk-replace smap form)
clojure.walk (prewalk f form)
clojure.walk (prewalk-demo form)
clojure.walk (prewalk-replace smap form)
clojure.walk (stringify-keys m)
clojure.walk (walk inner outer form)
clojure.xml (parse s startparse)
clojure.zip (append-child loc item)
clojure.zip (branch? loc)
clojure.zip (children loc)
clojure.zip (down loc)
clojure.zip (edit loc f &amp; args)
clojure.zip (end? loc)
clojure.zip (insert-child loc item)
clojure.zip (insert-left loc item)
clojure.zip (insert-right loc item)
clojure.zip (left loc)
clojure.zip (leftmost loc)
clojure.zip (lefts loc)
clojure.zip (make-node loc node children)
clojure.zip (next loc)
clojure.zip (node loc)
clojure.zip (path loc)
clojure.zip (prev loc)
clojure.zip (remove loc)
clojure.zip (replace loc node)
clojure.zip (right loc)
clojure.zip (rightmost loc)
clojure.zip (rights loc)
clojure.zip (root loc)
clojure.zip (seq-zip root)
clojure.zip (up loc)
clojure.zip (vector-zip root)
clojure.zip (xml-zip root)
clojure.zip (zipper branch? children make-node root)
clojure.algo.generic.arithmetic (* x y &amp; more)
clojure.algo.generic.arithmetic (+ x y &amp; more)
clojure.algo.generic.arithmetic (- x y &amp; more)
clojure.algo.generic.arithmetic (-&gt;one-type)
clojure.algo.generic.arithmetic (-&gt;zero-type)
clojure.algo.generic.arithmetic (/ x y &amp; more)
clojure.algo.generic.arithmetic (defmethod* ns name &amp; args)
clojure.algo.generic.arithmetic (map-&gt;one-type m#)
clojure.algo.generic.arithmetic (map-&gt;zero-type m#)
clojure.algo.generic.arithmetic (qsym ns sym)
clojure.algo.generic.collection (assoc coll &amp; key-val-pairs)
clojure.algo.generic.collection (conj coll &amp; xs)
clojure.algo.generic.collection (dissoc coll &amp; keys)
clojure.algo.generic.collection (empty coll)
clojure.algo.generic.collection (get coll key not-found)
clojure.algo.generic.collection (into to from)
clojure.algo.generic.collection (seq s)
clojure.algo.generic.functor (fmap f s)
clojure.algo.generic.math-functions (abs x math-context)
clojure.algo.generic.math-functions (acos x)
clojure.algo.generic.math-functions (approx= x y eps)
clojure.algo.generic.math-functions (asin x)
clojure.algo.generic.math-functions (atan x)
clojure.algo.generic.math-functions (atan2 x y)
clojure.algo.generic.math-functions (ceil x)
clojure.algo.generic.math-functions (conjugate x)
clojure.algo.generic.math-functions (cos x)
clojure.algo.generic.math-functions (exp x)
clojure.algo.generic.math-functions (floor x)
clojure.algo.generic.math-functions (log x)
clojure.algo.generic.math-functions (pow x y)
clojure.algo.generic.math-functions (rint x)
clojure.algo.generic.math-functions (sgn x)
clojure.algo.generic.math-functions (sin x)
clojure.algo.generic.math-functions (sqr x)
clojure.algo.generic.math-functions (sqrt x)
clojure.algo.generic.math-functions (tan x)
clojure.algo.graph (add-loops g)
clojure.algo.graph (component-graph g sccs)
clojure.algo.graph (dependency-list g)
clojure.algo.graph (fixed-point data fun max equal)
clojure.algo.graph (get-neighbors g n)
clojure.algo.graph (lazy-walk g ns v)
clojure.algo.graph (post-ordered-nodes g)
clojure.algo.graph (recursive-component? g ns)
clojure.algo.graph (remove-loops g)
clojure.algo.graph (reverse-graph g)
clojure.algo.graph (scc g)
clojure.algo.graph (self-recursive-sets g)
clojure.algo.graph (stratification-list g1 g2)
clojure.algo.graph (transitive-closure g)
clojure.algo.generic.comparison (&lt; x y &amp; more)
clojure.algo.generic.comparison (&lt;= x y &amp; more)
clojure.algo.generic.comparison (= x y &amp; more)
clojure.algo.generic.comparison (&gt; x y &amp; more)
clojure.algo.generic.comparison (&gt;= x y &amp; more)
clojure.algo.generic.comparison (max x y &amp; more)
clojure.algo.generic.comparison (min x y &amp; more)
clojure.algo.generic.comparison (neg? x)
clojure.algo.generic.comparison (not= &amp; args)
clojure.algo.generic.comparison (pos? x)
clojure.algo.generic.comparison (zero? x)
clojure.algo.monads (ask)
clojure.algo.monads (asks f)
clojure.algo.monads (call-cc f)
clojure.algo.monads (cond-statement expr mexpr continuation)
clojure.algo.monads (defmonad name operations)
clojure.algo.monads (defmonadfn name docstring? attr-map? (args expr) ...)
clojure.algo.monads (fetch-state)
clojure.algo.monads (fetch-val key)
clojure.algo.monads (local f g)
clojure.algo.monads (m-lift n f)
clojure.algo.monads (m-when test m-expr)
clojure.algo.monads (m-when-not test m-expr)
clojure.algo.monads (maybe-t m nothing which-m-plus)
clojure.algo.monads (monad operations)
clojure.algo.monads (monad-transformer base which-m-plus operations)
clojure.algo.monads (run-cont c)
clojure.algo.monads (sequence-t m which-m-plus)
clojure.algo.monads (set-state s)
clojure.algo.monads (set-val key val)
clojure.algo.monads (state-m-until p f x)
clojure.algo.monads (state-t m)
clojure.algo.monads (update-state f)
clojure.algo.monads (update-val key f)
clojure.algo.monads (with-monad monad &amp; exprs)
clojure.algo.monads (with-state-field key statement)
clojure.algo.monads (writer-m empty-accumulator)
clojure.core.async (&lt;! port)
clojure.core.async (&lt;!! port)
clojure.core.async (&gt;! port val)
clojure.core.async (&gt;!! port val)
clojure.core.async (admix mix ch)
clojure.core.async (alt! &amp; clauses)
clojure.core.async (alt!! &amp; clauses)
clojure.core.async (buffer n)
clojure.core.async (chan buf-or-n xform ex-handler)
clojure.core.async (close! chan)
clojure.core.async (do-alts fret ports opts)
clojure.core.async (dropping-buffer n)
clojure.core.async (go &amp; body)
clojure.core.async (go-loop bindings &amp; body)
clojure.core.async (into coll ch)
clojure.core.async (map f chs buf-or-n)
clojure.core.async (merge chs buf-or-n)
clojure.core.async (mix out)
clojure.core.async (mult ch)
clojure.core.async (offer! port val)
clojure.core.async (onto-chan ch coll close?)
clojure.core.async (pipe from to close?)
clojure.core.async (pipeline n to xf from close? ex-handler)
clojure.core.async (pipeline-async n to af from close?)
clojure.core.async (pipeline-blocking n to xf from close? ex-handler)
clojure.core.async (poll! port)
clojure.core.async (promise-chan xform ex-handler)
clojure.core.async (pub ch topic-fn buf-fn)
clojure.core.async (put! port val fn1 on-caller?)
clojure.core.async (reduce f init ch)
clojure.core.async (sliding-buffer n)
clojure.core.async (solo-mode mix mode)
clojure.core.async (split p ch t-buf-or-n f-buf-or-n)
clojure.core.async (sub p topic ch close?)
clojure.core.async (take n ch buf-or-n)
clojure.core.async (take! port fn1 on-caller?)
clojure.core.async (tap mult ch close?)
clojure.core.async (thread &amp; body)
clojure.core.async (thread-call f)
clojure.core.async (timeout msecs)
clojure.core.async (to-chan coll)
clojure.core.async (toggle mix state-map)
clojure.core.async (unblocking-buffer? buff)
clojure.core.async (unmix mix ch)
clojure.core.async (unmix-all mix)
clojure.core.async (unsub p topic ch)
clojure.core.async (unsub-all p topic)
clojure.core.async (untap mult ch)
clojure.core.async (untap-all mult)
clojure.core.cache (-&gt;BasicCache cache)
clojure.core.cache (-&gt;FIFOCache cache q limit)
clojure.core.cache (-&gt;FnCache cache f)
clojure.core.cache (-&gt;LIRSCache cache lruS lruQ tick limitS limitQ)
clojure.core.cache (-&gt;LRUCache cache lru tick limit)
clojure.core.cache (-&gt;LUCache cache lu limit)
clojure.core.cache (-&gt;SoftCache cache rcache rq)
clojure.core.cache (-&gt;TTLCache cache ttl ttl-ms)
clojure.core.cache (basic-cache-factory base)
clojure.core.cache (soft-cache-factory base)
clojure.core.cache (through wrap-fn value-fn cache item)
clojure.core.contracts (provide &amp; kontracts)
clojure.core.contracts (with-constraints f c &amp; more)
clojure.core.incubator (dissoc-in m [k &amp; ks :as keys])
clojure.core.incubator (new-by-name class-name &amp; args)
clojure.core.incubator (seqable? x)
clojure.core.logic (-&gt;AnswerCache ansl anss _meta)
clojure.core.logic (-&gt;Choice a f)
clojure.core.logic (-&gt;ConstraintStore km cm cid running)
clojure.core.logic (-&gt;LCons a d cache meta)
clojure.core.logic (-&gt;LVar id unique name oname hash meta)
clojure.core.logic (-&gt;PMap)
clojure.core.logic (-&gt;Pair lhs rhs)
clojure.core.logic (-&gt;SubstValue v doms eset)
clojure.core.logic (-&gt;Substitutions s vs ts cs cq cqs oc _meta)
clojure.core.logic (-&gt;SuspendedStream cache ansv* f)
clojure.core.logic (== u v)
clojure.core.logic (all &amp; goals)
clojure.core.logic (and* goals)
clojure.core.logic (appendo x y z)
clojure.core.logic (conde &amp; clauses)
clojure.core.logic (conjo coll &amp; args)
clojure.core.logic (conso a d l)
clojure.core.logic (copy-term u v)
clojure.core.logic (defna &amp; rest)
clojure.core.logic (defne &amp; rest)
clojure.core.logic (defnu &amp; rest)
clojure.core.logic (distincto l)
clojure.core.logic (emptyo a)
clojure.core.logic (everyg g coll)
clojure.core.logic (fail a)
clojure.core.logic (featurec x fs)
clojure.core.logic (firsto l a)
clojure.core.logic (fix-constraints a)
clojure.core.logic (fna &amp; rest)
clojure.core.logic (fnc args &amp; body)
clojure.core.logic (fne &amp; rest)
clojure.core.logic (fnu &amp; rest)
clojure.core.logic (fresh [&amp; lvars] &amp; goals)
clojure.core.logic (is u v op)
clojure.core.logic (lcons a d)
clojure.core.logic (llist f s &amp; rest)
clojure.core.logic (log &amp; s)
clojure.core.logic (lvaro v)
clojure.core.logic (map-&gt;PMap m#)
clojure.core.logic (map-&gt;SubstValue m#)
clojure.core.logic (map-&gt;SuspendedStream m#)
clojure.core.logic (master argv cache)
clojure.core.logic (matcha xs &amp; cs)
clojure.core.logic (matche xs &amp; cs)
clojure.core.logic (matchu xs &amp; cs)
clojure.core.logic (member1o x l)
clojure.core.logic (membero x l)
clojure.core.logic (nafc c &amp; args)
clojure.core.logic (nilo a)
clojure.core.logic (nonlvaro v)
clojure.core.logic (or* goals)
clojure.core.logic (partial-map m)
clojure.core.logic (permuteo xl yl)
clojure.core.logic (pred v f)
clojure.core.logic (project [&amp; vars] &amp; goals)
clojure.core.logic (rembero x l o)
clojure.core.logic (resto l d)
clojure.core.logic (run n bindings &amp; goals)
clojure.core.logic (run* bindings &amp; goals)
clojure.core.logic (run-db n db bindings &amp; goals)
clojure.core.logic (run-db* db bindings &amp; goals)
clojure.core.logic (run-nc n bindings &amp; goals)
clojure.core.logic (run-nc* &amp; goals)
clojure.core.logic (succeed a)
clojure.core.logic (tabled args &amp; grest)
clojure.core.logic (trace-lvars title &amp; lvars)
clojure.core.logic (trace-s)
clojure.core.logic (waiting-stream-check w success-cont failure-cont)
clojure.core.match (-&gt;AppPattern p form _meta)
clojure.core.match (-&gt;BindNode bindings node)
clojure.core.match (-&gt;FailNode)
clojure.core.match (-&gt;GuardPattern p gs _meta)
clojure.core.match (-&gt;LeafNode value bindings)
clojure.core.match (-&gt;LiteralPattern l _meta)
clojure.core.match (-&gt;MapKeyPattern p)
clojure.core.match (-&gt;MapPattern m _meta)
clojure.core.match (-&gt;OrPattern ps _meta)
clojure.core.match (-&gt;PatternMatrix rows ocrs)
clojure.core.match (-&gt;PatternRow ps action bindings)
clojure.core.match (-&gt;PredicatePattern p gs _meta)
clojure.core.match (-&gt;RestPattern p)
clojure.core.match (-&gt;SeqPattern s _meta)
clojure.core.match (-&gt;SwitchNode occurrence cases default)
clojure.core.match (-&gt;VectorPattern v t size offset rest? _meta)
clojure.core.match (-&gt;WildcardPattern sym named _meta)
clojure.core.match (emit-matrix vars clauses default)
clojure.core.match (empty-rows-case)
clojure.core.match (first-column-chosen-case matrix col ocrs)
clojure.core.match (first-row-empty-case rows ocr)
clojure.core.match (first-row-wildcards-case rows ocrs)
clojure.core.match (group-keywords pattern)
clojure.core.match (map-&gt;BindNode m#)
clojure.core.match (map-&gt;FailNode m#)
clojure.core.match (map-&gt;LeafNode m#)
clojure.core.match (map-&gt;MapKeyPattern m#)
clojure.core.match (map-&gt;PatternMatrix m#)
clojure.core.match (map-&gt;RestPattern m#)
clojure.core.match (map-&gt;SwitchNode m#)
clojure.core.match (match vars &amp; clauses)
clojure.core.match (other-column-chosen-case matrix col)
clojure.core.match (process-vars vars)
clojure.core.match (to-pattern-row pat action)
clojure.core.match (wildcards-and-duplicates patterns)
clojure.core.memoize (-&gt;PluggableMemoization f cache)
clojure.core.memoize (-&gt;RetryingDelay fun available? value)
clojure.core.memoize (build-memoizer cache-factory f &amp; args)
clojure.core.memoize (fifo f base key threshold)
clojure.core.memoize (lru f base key threshold)
clojure.core.memoize (lu f base key threshold)
clojure.core.memoize (memo f seed)
clojure.core.memoize (memo-clear! f args)
clojure.core.memoize (memo-swap! f base)
clojure.core.memoize (memoized? f)
clojure.core.memoize (snapshot memoized-fn)
clojure.core.memoize (ttl f base key threshold)
clojure.core.rrb-vector (catvec v1 v2 v3 v4 &amp; vn)
clojure.core.rrb-vector (subvec v start end)
clojure.core.rrb-vector (vec coll)
clojure.core.rrb-vector (vector x1 x2 x3 x4 &amp; xn)
clojure.core.rrb-vector (vector-of t x1 x2 x3 x4 &amp; xn)
clojure.core.typed (ASeq t)
clojure.core.typed (AVec t)
clojure.core.typed (Agent1 t)
clojure.core.typed (Agent2 t t)
clojure.core.typed (All binder type)
clojure.core.typed (Assoc type type-pairs*)
clojure.core.typed (Atom1 t)
clojure.core.typed (Atom2 t)
clojure.core.typed (BlockingDeref t)
clojure.core.typed (Coll t)
clojure.core.typed (CountRange Integer Integer)
clojure.core.typed (Delay t)
clojure.core.typed (Deref t)
clojure.core.typed (Difference type type type*)
clojure.core.typed (Dissoc type type*)
clojure.core.typed (EmptySeqable t)
clojure.core.typed (ExactCount Integer)
clojure.core.typed (Future t)
clojure.core.typed (Get type type type)
clojure.core.typed (HSeq [fixed* drest ... bound] :filter-sets [FS*] :objects [obj*])
clojure.core.typed (HSequential [fixed* drest ... bound] :filter-sets [FS*] :objects [obj*])
clojure.core.typed (quote [fixed* type ... bound])
clojure.core.typed (I type*)
clojure.core.typed (IFn ArityVec+)
clojure.core.typed (List t)
clojure.core.typed (Map t t)
clojure.core.typed (Nilable t)
clojure.core.typed (NilableNonEmptyASeq t)
clojure.core.typed (NilableNonEmptySeq t)
clojure.core.typed (NonEmptyASeq t)
clojure.core.typed (NonEmptyAVec t)
clojure.core.typed (NonEmptyColl t)
clojure.core.typed (NonEmptyLazySeq t)
clojure.core.typed (NonEmptySeq t)
clojure.core.typed (NonEmptySeqable t)
clojure.core.typed (NonEmptyVec t)
clojure.core.typed (Option t)
clojure.core.typed (Pred type)
clojure.core.typed (Promise t)
clojure.core.typed (Rec binder type)
clojure.core.typed (Ref1 t)
clojure.core.typed (Ref2 w r)
clojure.core.typed (Reversible t)
clojure.core.typed (Seq t)
clojure.core.typed (Seqable t)
clojure.core.typed (SequentialSeq t)
clojure.core.typed (SequentialSeqable t)
clojure.core.typed (Set t)
clojure.core.typed (SortedSet t)
clojure.core.typed (Stack t)
clojure.core.typed (TFn binder type)
clojure.core.typed (U type*)
clojure.core.typed (quote Constant)
clojure.core.typed (Var1 t)
clojure.core.typed (Var2 w r)
clojure.core.typed (Vec t)
clojure.core.typed (ann varsym typesyn)
clojure.core.typed (ann-datatype binder dname [field :- type*] opts*)
clojure.core.typed (ann-form form ty)
clojure.core.typed (ann-interface varsym &amp; methods)
clojure.core.typed (ann-many t &amp; vs)
clojure.core.typed (ann-protocol varsym &amp; methods)
clojure.core.typed (ann-record binder dname [field :- type*] opts*)
clojure.core.typed (atom &amp; args)
clojure.core.typed (cast t x opt)
clojure.core.typed (cf form expected)
clojure.core.typed (check-form* form expected type-provided?)
clojure.core.typed (check-form-info form &amp; opt)
clojure.core.typed (check-ns ns-or-syms &amp; opt)
clojure.core.typed (declare-alias-kind sym ty)
clojure.core.typed (declare-datatypes &amp; syms)
clojure.core.typed (declare-names &amp; syms)
clojure.core.typed (declare-protocols &amp; syms)
clojure.core.typed (def name docstring? :- type? expr)
clojure.core.typed (defalias sym t)
clojure.core.typed (defn kw-args? name docstring? attr-map? [param :- type *] :- type exprs*)
clojure.core.typed (defprotocol &amp; body)
clojure.core.typed (doseq seq-exprs &amp; body)
clojure.core.typed (dotimes bindings &amp; body)
clojure.core.typed (envs)
clojure.core.typed (fn name? [param :- type* &amp; param :- type * ?] :- type? exprs*)
clojure.core.typed (for seq-exprs &amp; maybe-ann-body-expr)
clojure.core.typed (inst inst-of &amp; types)
clojure.core.typed (inst-ctor inst-of &amp; types)
clojure.core.typed (install features)
clojure.core.typed (into-array&gt; into-array-syn javat cljt coll)
clojure.core.typed (let [binding :- type? init*] exprs*)
clojure.core.typed (letfn&gt; [fn-spec-or-annotation*] expr*)
clojure.core.typed (load-if-needed)
clojure.core.typed (loop [binding :- type? init*] exprs*)
clojure.core.typed (method-type mname)
clojure.core.typed (nilable-param msym mmap)
clojure.core.typed (non-nil-return msym arities)
clojure.core.typed (override-constructor ctorsym typesyn)
clojure.core.typed (override-method methodsym typesyn)
clojure.core.typed (pfn&gt; &amp; forms)
clojure.core.typed (pred t)
clojure.core.typed (print-env debug-str)
clojure.core.typed (print-filterset debug-string frm)
clojure.core.typed (ref &amp; args)
clojure.core.typed (reset-caches)
clojure.core.typed (statistics nsyms)
clojure.core.typed (tc-ignore &amp; body)
clojure.core.typed (typed-deps &amp; args)
clojure.core.typed (untyped-var varsym typesyn)
clojure.core.typed (var-coverage nsyms-or-nsym)
clojure.core.typed (var&gt; sym)
clojure.core.typed (warn-on-unannotated-vars)
clojure.core.typed (when-let-fail b &amp; body)
clojure.core.unify (extract-lvars lv-fn form)
clojure.core.unify (flatten-bindings variable? binds)
clojure.core.unify (make-occurs-subst-fn variable-fn)
clojure.core.unify (make-occurs-unifier-fn variable-fn)
clojure.core.unify (make-occurs-unify-fn variable-fn)
clojure.core.unify (make-subst-fn variable-fn)
clojure.core.unify (make-unifier-fn variable-fn)
clojure.core.unify (make-unify-fn variable-fn)
clojure.core.unify (subst expression bindings)
clojure.core.unify (unifier- expression1 expression2)
clojure.core.unify (unify- expression1 expression2)
clojure.data.avl (merge m1 m2 m3 &amp; more)
clojure.data.avl (merge-with f m1 m2 m3 &amp; more)
clojure.data.avl (nearest coll test x)
clojure.data.avl (rank-of coll x)
clojure.data.avl (sorted-map &amp; keyvals)
clojure.data.avl (sorted-map-by comparator &amp; keyvals)
clojure.data.avl (sorted-set &amp; keys)
clojure.data.avl (sorted-set-by comparator &amp; keys)
clojure.data.avl (split-key k coll)
clojure.data.avl (subrange coll start-test start end-test end)
clojure.data.avl (union s1 s2 s3 &amp; more)
clojure.data.avl (unsafe-join coll1 coll2 coll3 &amp; more)
clojure.data.codec.base64 (dec-length in-length pad-length)
clojure.data.codec.base64 (decode input offset length)
clojure.data.codec.base64 (decode! input offset length output)
clojure.data.codec.base64 (decoding-transfer input-stream output-stream &amp; opts)
clojure.data.codec.base64 (enc-length n)
clojure.data.codec.base64 (encode input offset length)
clojure.data.codec.base64 (encode! input offset length output)
clojure.data.codec.base64 (encoding-transfer input-stream output-stream &amp; opts)
clojure.data.codec.base64 (pad-length input offset length)
clojure.data.csv (read-csv input &amp; options)
clojure.data.csv (write-csv writer data &amp; options)
clojure.data.finger-tree (-&gt;CountedDoubleList tree mdata)
clojure.data.finger-tree (-&gt;CountedSortedSet cmpr tree mdata)
clojure.data.finger-tree (-&gt;DeepTree meter-obj pre mid suf mval)
clojure.data.finger-tree (-&gt;DelayedTree tree-ref mval)
clojure.data.finger-tree (-&gt;Digit1 a meter-obj measure-ref)
clojure.data.finger-tree (-&gt;Digit2 a b meter-obj measure-ref)
clojure.data.finger-tree (-&gt;Digit3 a b c meter-obj measure-ref)
clojure.data.finger-tree (-&gt;Digit4 a b c d meter-obj measure-ref)
clojure.data.finger-tree (-&gt;DoubleList tree mdata)
clojure.data.finger-tree (-&gt;EmptyTree meter-obj)
clojure.data.finger-tree (-&gt;Len-Right-Meter len right)
clojure.data.finger-tree (-&gt;SingleTree meter-obj x)
clojure.data.finger-tree (map-&gt;Len-Right-Meter m#)
clojure.data.fressian (associative-lookup o)
clojure.data.fressian (begin-closed-list writer)
clojure.data.fressian (end-list writer)
clojure.data.fressian (field-caching-writer cache-pred)
clojure.data.fressian (inheritance-lookup lookup)
clojure.data.fressian (read readable &amp; options)
clojure.data.fressian (read-object rdr)
clojure.data.fressian (tag obj)
clojure.data.fressian (tagged-object? o)
clojure.data.fressian (tagged-value obj)
clojure.data.fressian (write obj &amp; options)
clojure.data.fressian (write-object writer obj)
clojure.data.generators (anything)
clojure.data.generators (boolean)
clojure.data.generators (boolean-array f sizer)
clojure.data.generators (byte)
clojure.data.generators (byte-array f sizer)
clojure.data.generators (char)
clojure.data.generators (char-array f sizer)
clojure.data.generators (collection)
clojure.data.generators (date base)
clojure.data.generators (default-sizer)
clojure.data.generators (double)
clojure.data.generators (double-array f sizer)
clojure.data.generators (float)
clojure.data.generators (float-array f sizer)
clojure.data.generators (geometric p)
clojure.data.generators (hash-map fk fv sizer)
clojure.data.generators (int)
clojure.data.generators (int-array f sizer)
clojure.data.generators (keyword sizer)
clojure.data.generators (list f sizer)
clojure.data.generators (long-array f sizer)
clojure.data.generators (one-of &amp; specs)
clojure.data.generators (printable-ascii-char)
clojure.data.generators (rand-nth coll)
clojure.data.generators (ratio num-gen denom-gen)
clojure.data.generators (reps sizer f)
clojure.data.generators (reservoir-sample ct coll)
clojure.data.generators (scalar)
clojure.data.generators (set f sizer)
clojure.data.generators (short)
clojure.data.generators (short-array f sizer)
clojure.data.generators (shuffle coll)
clojure.data.generators (string f sizer)
clojure.data.generators (symbol sizer)
clojure.data.generators (tuple &amp; generators)
clojure.data.generators (uniform lo hi)
clojure.data.generators (uuid)
clojure.data.generators (vec f sizer)
clojure.data.generators (weighted m)
clojure.data.json (json-str x &amp; options)
clojure.data.json (pprint x &amp; options)
clojure.data.json (pprint-json x &amp; options)
clojure.data.json (print-json x &amp; options)
clojure.data.json (read reader &amp; options)
clojure.data.json (read-json input keywordize? eof-error? eof-value)
clojure.data.json (read-str string &amp; options)
clojure.data.json (write x writer &amp; options)
clojure.data.json (write-json x out escape-unicode?)
clojure.data.json (write-str x &amp; options)
clojure.data.priority-map (-&gt;PersistentPriorityMap priority-&gt;set-of-items item-&gt;priority _meta keyfn)
clojure.data.priority-map (priority-map &amp; keyvals)
clojure.data.priority-map (priority-map-by comparator &amp; keyvals)
clojure.data.priority-map (priority-map-keyfn keyfn &amp; keyvals)
clojure.data.priority-map (priority-map-keyfn-by keyfn comparator &amp; keyvals)
clojure.data.zip (ancestors loc)
clojure.data.zip (children loc)
clojure.data.zip (children-auto loc)
clojure.data.zip (descendants loc)
clojure.data.zip (left-locs loc)
clojure.data.zip (leftmost? loc)
clojure.data.zip (right-locs loc)
clojure.data.zip (rightmost? loc)
clojure.java.classpath (classpath)
clojure.java.classpath (classpath-directories)
clojure.java.classpath (classpath-jarfiles)
clojure.java.classpath (filenames-in-jar jar-file)
clojure.java.classpath (get-urls loader)
clojure.java.classpath (jar-file? f)
clojure.java.classpath (loader-classpath loader)
clojure.java.classpath (system-classpath)
clojure.java.jdbc (as-sql-name f x)
clojure.java.jdbc (create-table-ddl table &amp; specs)
clojure.java.jdbc (db-connection db)
clojure.java.jdbc (db-do-commands db-spec transaction? sql-command &amp; sql-commands)
clojure.java.jdbc (db-do-prepared db-spec transaction? sql &amp; param-groups)
clojure.java.jdbc (db-do-prepared-return-keys db transaction? sql param-group)
clojure.java.jdbc (db-find-connection db)
clojure.java.jdbc (db-is-rollback-only db)
clojure.java.jdbc (db-query-with-resultset db-spec [options-map sql-string &amp; params] func)
clojure.java.jdbc (db-set-rollback-only! db)
clojure.java.jdbc (db-transaction binding &amp; body)
clojure.java.jdbc (db-unset-rollback-only! db)
clojure.java.jdbc (execute! db-spec [sql &amp; param-groups] :multi? true :transaction? true)
clojure.java.jdbc (insert! db-spec table row-map :transaction? true :entities identity)
clojure.java.jdbc (metadata-query meta-query &amp; opt-args)
clojure.java.jdbc (print-sql-exception exception)
clojure.java.jdbc (print-sql-exception-chain exception)
clojure.java.jdbc (print-update-counts exception)
clojure.java.jdbc (query db-spec [option-map sql-string &amp; params])
clojure.java.jdbc (quoted q x)
clojure.java.jdbc (with-db-connection binding &amp; body)
clojure.java.jdbc (with-db-metadata binding &amp; body)
clojure.java.jdbc (with-db-transaction binding &amp; body)
clojure.java.jmx (-&gt;Bean state-ref)
clojure.java.jmx (attribute-names n)
clojure.java.jmx (create-bean state-ref)
clojure.java.jmx (invoke n op &amp; args)
clojure.java.jmx (invoke-signature n op signature &amp; args)
clojure.java.jmx (mbean n)
clojure.java.jmx (mbean-names n)
clojure.java.jmx (operation-names n)
clojure.java.jmx (readable? n attr)
clojure.java.jmx (register-mbean mbean mbean-name)
clojure.java.jmx (unregister-mbean mbean-name)
clojure.java.jmx (with-connection opts &amp; body)
clojure.java.jmx (write! n attr value)
clojure.math.combinatorics (assert-with-message x message)
clojure.math.combinatorics (cartesian-product &amp; seqs)
clojure.math.combinatorics (combinations items t)
clojure.math.combinatorics (count-combinations items t)
clojure.math.combinatorics (count-permutations l)
clojure.math.combinatorics (count-subsets items)
clojure.math.combinatorics (drop-permutations items n)
clojure.math.combinatorics (nth-combination items t n)
clojure.math.combinatorics (nth-permutation items n)
clojure.math.combinatorics (partitions items &amp; args)
clojure.math.combinatorics (permutation-index items)
clojure.math.combinatorics (permutations items)
clojure.math.combinatorics (selections items n)
clojure.math.combinatorics (subsets items)
clojure.math.numeric-tower (abs n)
clojure.math.numeric-tower (expt base pow)
clojure.math.numeric-tower (gcd a b)
clojure.math.numeric-tower (lcm a b)
clojure.test.generative (defspec name fn-to-test args &amp; validator-body)
clojure.tools.logging (debug throwable message &amp; more)
clojure.tools.logging (debugf throwable fmt &amp; fmt-args)
clojure.tools.logging (enabled? level logger-ns)
clojure.tools.logging (error throwable message &amp; more)
clojure.tools.logging (errorf throwable fmt &amp; fmt-args)
clojure.tools.logging (fatal throwable message &amp; more)
clojure.tools.logging (fatalf throwable fmt &amp; fmt-args)
clojure.tools.logging (info throwable message &amp; more)
clojure.tools.logging (infof throwable fmt &amp; fmt-args)
clojure.tools.logging (log logger-factory logger-ns level throwable message)
clojure.tools.logging (log* logger level throwable message)
clojure.tools.logging (log-capture! logger-ns out-level err-level)
clojure.tools.logging (log-stream level logger-ns)
clojure.tools.logging (log-uncapture!)
clojure.tools.logging (logf level throwable fmt &amp; fmt-args)
clojure.tools.logging (logp level throwable message &amp; more)
clojure.tools.logging (spy level expr)
clojure.tools.logging (spyf level fmt expr)
clojure.tools.logging (trace throwable message &amp; more)
clojure.tools.logging (tracef throwable fmt &amp; fmt-args)
clojure.tools.logging (warn throwable message &amp; more)
clojure.tools.logging (warnf throwable fmt &amp; fmt-args)
clojure.tools.logging (with-logs [logger-ns out-level err-level] &amp; body)
clojure.tools.analyzer (-&gt;Const literal? val meta type op form env children)
clojure.tools.analyzer (-&gt;Local assignable? name op form env)
clojure.tools.analyzer (-&gt;Map keys vals op form env children)
clojure.tools.analyzer (-&gt;MaybeClass class op form env)
clojure.tools.analyzer (-&gt;MaybeHostForm class field op form env)
clojure.tools.analyzer (-&gt;Set items op form env children)
clojure.tools.analyzer (-&gt;TransientConst literal? val meta type op form env children extmap)
clojure.tools.analyzer (-&gt;TransientLocal assignable? name op form env extmap)
clojure.tools.analyzer (-&gt;TransientMap keys vals op form env children extmap)
clojure.tools.analyzer (-&gt;TransientMaybeClass class op form env extmap)
clojure.tools.analyzer (-&gt;TransientMaybeHostForm class field op form env extmap)
clojure.tools.analyzer (-&gt;TransientSet items op form env children extmap)
clojure.tools.analyzer (-&gt;TransientVar assignable? var meta op form env extmap)
clojure.tools.analyzer (-&gt;TransientVector items op form env children extmap)
clojure.tools.analyzer (-&gt;TransientWithMeta meta expr op form env children extmap)
clojure.tools.analyzer (-&gt;Var assignable? var meta op form env)
clojure.tools.analyzer (-&gt;Vector items op form env children)
clojure.tools.analyzer (-&gt;WithMeta meta expr op form env children)
clojure.tools.analyzer (analyze form env)
clojure.tools.analyzer (analyze-in-env env)
clojure.tools.analyzer (create-var sym env)
clojure.tools.analyzer (empty-env)
clojure.tools.analyzer (macroexpand form env)
clojure.tools.analyzer (macroexpand-1 form env)
clojure.tools.analyzer (map-&gt;Const m#)
clojure.tools.analyzer (map-&gt;Local m#)
clojure.tools.analyzer (map-&gt;Map m#)
clojure.tools.analyzer (map-&gt;MaybeClass m#)
clojure.tools.analyzer (map-&gt;MaybeHostForm m#)
clojure.tools.analyzer (map-&gt;Set m#)
clojure.tools.analyzer (map-&gt;Var m#)
clojure.tools.analyzer (map-&gt;Vector m#)
clojure.tools.analyzer (map-&gt;WithMeta m#)
clojure.tools.analyzer (parse [op &amp; args] env)
clojure.tools.analyzer (var? obj)
clojure.tools.analyzer.jvm (-&gt;ExceptionThrown e)
clojure.tools.analyzer.jvm (analyze form env opts)
clojure.tools.analyzer.jvm (analyze+eval form env opts)
clojure.tools.analyzer.jvm (analyze-ns ns env opts)
clojure.tools.analyzer.jvm (empty-env)
clojure.tools.analyzer.jvm (macroexpand-1 form env)
clojure.tools.analyzer.jvm (macroexpand-all form env opts)
clojure.tools.analyzer.jvm (parse form env)
clojure.tools.analyzer.jvm (run-passes ast)
clojure.tools.cli (get-default-options option-specs)
clojure.tools.cli (parse-opts args option-specs &amp; options)
clojure.tools.cli (summarize specs)
clojure.tools.emitter.jvm (eval form)
clojure.tools.emitter.jvm (load res)
clojure.tools.macro (defsymbolmacro symbol expansion)
clojure.tools.macro (deftemplate name params &amp; forms)
clojure.tools.macro (macrolet fn-bindings &amp; exprs)
clojure.tools.macro (mexpand form)
clojure.tools.macro (mexpand-1 form)
clojure.tools.macro (mexpand-all form)
clojure.tools.macro (name-with-attributes name macro-args)
clojure.tools.macro (symbol-macrolet symbol-bindings &amp; exprs)
clojure.tools.macro (with-symbol-macros &amp; exprs)
clojure.tools.namespace (clojure-source-file? file)
clojure.tools.namespace (clojure-sources-in-jar jar-file)
clojure.tools.namespace (comment? form)
clojure.tools.namespace (find-clojure-sources-in-dir dir)
clojure.tools.namespace (find-namespaces-in-dir dir)
clojure.tools.namespace (find-namespaces-in-jarfile jarfile)
clojure.tools.namespace (find-namespaces-on-classpath)
clojure.tools.namespace (find-ns-decls-in-dir dir)
clojure.tools.namespace (find-ns-decls-in-jarfile jarfile)
clojure.tools.namespace (find-ns-decls-on-classpath)
clojure.tools.namespace (ns-decl? form)
clojure.tools.namespace (read-file-ns-decl file)
clojure.tools.namespace (read-ns-decl rdr)
clojure.tools.namespace (read-ns-decl-from-jarfile-entry jarfile entry-name)
clojure.tools.nrepl (client transport response-timeout)
clojure.tools.nrepl (code &amp; body)
clojure.tools.nrepl (code* &amp; expressions)
clojure.tools.nrepl (combine-responses responses)
clojure.tools.nrepl (response-seq transport timeout)
clojure.tools.nrepl (response-values responses)
clojure.tools.reader (map-func coll)
clojure.tools.reader (read reader eof-error? eof-value)
clojure.tools.reader (read-string opts s)
clojure.tools.reader (resolve-symbol s)
clojure.tools.reader (syntax-quote form)
clojure.tools.trace (deftrace name &amp; definition)
clojure.tools.trace (dotrace fnames &amp; exprs)
clojure.tools.trace (trace name value)
clojure.tools.trace (trace-forms &amp; body)
clojure.tools.trace (trace-ns n)
clojure.tools.trace (trace-vars &amp; vs)
clojure.tools.trace (traceable? v)
clojure.tools.trace (traced? v)
clojure.tools.trace (untrace-ns n)
clojure.tools.trace (untrace-vars &amp; vs)
clojure.tools.analyzer.passes.js.annotate-tag (annotate-tag ast)
clojure.tools.analyzer.passes.js.collect-keywords (collect-keywords ast)
clojure.tools.analyzer.passes.js.emit-form (emit-form ast opts)
clojure.tools.analyzer.passes.js.emit-form (emit-hygienic-form ast)
clojure.tools.analyzer.passes.js.validate (validate ast)
clojure.tools.analyzer.passes.jvm.constant-lifter (constant-lift ast)
clojure.tools.analyzer.passes.jvm.emit-form (emit-form ast opts)
clojure.tools.analyzer.passes.jvm.emit-form (emit-hygienic-form ast)
clojure.tools.analyzer.passes.jvm.fix-case-test (fix-case-test ast)
clojure.tools.analyzer.passes.jvm.validate-loop-locals (validate-loop-locals analyze)
gloss (bit-map & args)
gloss (bit-seq & bit-lengths)
gloss (byte-count b)
gloss (compile-frame frame)(compile-frame frame pre-encoder post-decoder)
gloss (defcodec- name frame & coders)
gloss (delimited-block delimiters strip-delimiters?)
gloss (delimited-frame delimiters frame)
gloss (enum primitive-type & map-or-seq)
gloss (finite-block prefix-or-len)
gloss (finite-frame prefix-or-len frame)
gloss (header frame header->body body->header)
gloss (ordered-map & key-value-pairs)
gloss (prefix primitive)(prefix signature to-count from-count)
gloss (repeated frame & {:as options})
gloss (sizeof this)
gloss (string charset & {:as options})
gloss.io (contiguous buf-seq)
gloss.io (decode frame bytes)(decode frame bytes no-remainder?)
gloss.io (decode-all frame bytes)
gloss.io (decode-stream src frame)
gloss.io (decode-stream-headers src & frames)
gloss.io (encode frame val)
gloss.io (encode-all frame vals)
gloss.io (encode-to-buffer frame buf vals)
gloss.io (encode-to-stream frame output-stream vals)
gloss.io (lazy-decode-all frame bytes)
gloss.io (to-buf-seq x)
gloss.io (to-byte-buffer x)
medley (abs x)
medley (assoc-some m k v)(assoc-some m k v & kvs)
medley (boolean? x)
medley (deref-reset! atom newval)
medley (deref-swap! atom f & args)
medley (dissoc-in m ks)
medley (distinct-by f)(distinct-by f coll)
medley (drop-upto pred)(drop-upto pred coll)
medley (ex-cause ex)
medley (ex-message ex)
medley (filter-keys pred coll)
medley (filter-kv pred coll)
medley (filter-vals pred coll)
medley (find-first pred coll)
medley (greatest & xs)
medley (indexed coll)
medley (interleave-all & colls)
medley (least & xs)
medley (map-entry k v)
medley (map-keys f coll)
medley (map-kv f coll)
medley (map-vals f coll)
medley (mapply f & args)
medley (queue)(queue coll)
medley (queue? x)
medley (random-uuid)
medley (remove-keys pred coll)
medley (remove-kv pred coll)
medley (remove-vals pred coll)
medley (take-upto pred)(take-upto pred coll)
medley (uuid s)
medley (uuid? x)
fs.compression (bunzip2 source target)
fs.compression (gunzip source target)
fs.compression (make-zip-stream & filename-content-pairs)
fs.compression (untar source target)
fs.compression (unxz source target)
fs.compression (unzip source target-dir)
fs.compression (zip filename & filename-content-pairs)
fs (absolute path)
fs (absolute? path)
fs (base-name path trim-ext)
fs (chdir path)
fs (child-of? p c)
fs (chmod mode path)
fs (copy from to)
fs (copy+ src dest)
fs (copy-dir from to)
fs (create f)
fs (delete path)
fs (delete-dir root)
fs (directory? path)
fs (exec & body)
fs (executable? path)
fs (exists? path)
fs (expand-home path)
fs (extension path)
fs (file path & paths)
fs (file? path)
fs (find-files path pattern)
fs (find-files* path pred)
fs (glob root pattern)
fs (hidden? path)
fs (home user)
fs (iterate-dir path)
fs (link path target)
fs (link? path)
fs (list-dir path)
fs (mkdir path)
fs (mkdirs path)
fs (mod-time path)
fs (name path)
fs (normalized path)
fs (ns-path n)
fs (parent path)
fs (parents f)
fs (path-ns path)
fs (read-sym-link path)
fs (readable? path)
fs (rename old-path new-path)
fs (size path)
fs (split path)
fs (split-ext path)
fs (sym-link path target)
fs (temp-dir prefix suffix tries)
fs (temp-file prefix suffix tries)
fs (temp-name prefix suffix)
fs (tmpdir)
fs (touch path & [time])
fs (walk func path)
fs (with-cwd cwd & body)
fs (with-mutable-cwd & body)
fs (writeable? path)
plumbing (-unless-update body)
plumbing (<- & body)
plumbing (?> arg do-it? & rest)
plumbing (?>> do-it? & args)
plumbing (aconcat s)
plumbing (as->> name & forms-and-expr)
plumbing (assoc-when m & kvs)
plumbing (conj-when coll x & xs)
plumbing (cons-when x s)
plumbing (count-when pred xs)
plumbing (dissoc-in m [k & ks])
plumbing (distinct-by f xs)
plumbing (distinct-id xs)
plumbing (fnk & args)
plumbing (for-map m-sym seq-exprs key-expr val-expr)
plumbing (get-and-set! a new-val)
plumbing (grouped-map key-fn map-fn coll)
plumbing (if-letk bindings then else)
plumbing (indexed s)
plumbing (keywordize-map x)
plumbing (lazy-get m k d)
plumbing (letk bindings & body)
plumbing (map-from-keys f ks)
plumbing (map-from-vals f vs)
plumbing (map-keys f m)
plumbing (map-vals f m)
plumbing (mapply f arg & args)
plumbing (memoized-fn name args & body)
plumbing (positions f s)
plumbing (safe-get m k)
plumbing (safe-get-in m ks)
plumbing (singleton xs)
plumbing (sum xs)
plumbing (swap-pair! a f & args)
plumbing (unchunk s)
plumbing (update m k f x1 x2 & xs)
plumbing (update-in-when m key-seq f & args)
plumbing (when-letk bindings & body)
plumbing.fnk.impl (efficient-call-forms fnk arg-form-map)
plumbing.fnk.impl (fnk-form env name? bind body)
plumbing.fnk.impl (letk-arg-bind-sym-and-body-form env map-sym binding key-path body-form)
plumbing.fnk.impl (letk-input-schema-and-body-form env binding-form key-path body-form)
plumbing.fnk.impl (name-sym x)
plumbing.fnk.impl (positional-arg-bind-sym-and-body env binding body-form)
plumbing.fnk.impl (positional-arg-bind-syms-and-body env bind body-form)
plumbing.fnk.impl (positional-fn fnk arg-ks)
plumbing.fnk.impl (positional-fnk-form fn-name external-input-schema ordered-ks->opt arg-sym-map body)
plumbing.fnk.impl (positional-info fnk)
plumbing.fnk.impl (qualified-sym x)
plumbing.fnk.pfnk (fn->fnk f [input-schema output-schema :as io])
plumbing.fnk.pfnk (io-schemata this)
plumbing.fnk.schema (assert-distinct things)
plumbing.fnk.schema (assert-iae form & format-args)
plumbing.fnk.schema (guess-expr-output-schema expr)
plumbing.fnk.schema (non-map-diff s1 s2)
plumbing.fnk.schema (safe-get m k key-path)
plumbing.fnk.schema (schema-diff input-schema output-schema)
plumbing.graph-async (asyncify f)
plumbing.graph (->graph graph-nodes)
plumbing.graph (check-comp-partial! g instance-fn)
plumbing.graph (comp-partial-fn f other)
plumbing.graph (compile g)
plumbing.graph (eager-compile g)
plumbing.graph (graph & nodes)
plumbing.graph (interpreted-eager-compile g)
plumbing.graph (lazy-compile g)
plumbing.graph (positional-eager-compile g arg-ks)
plumbing.graph (profiled profile-key g)
plumbing.graph (restricted-call f in-m)
plumbing.graph (run g input)
plumbing.graph (simple-flat-compile g check-input? make-map assoc-f)
plumbing.graph (simple-hierarchical-compile g check-input? make-map assoc-f)
plumbing.graph (working-array-map & args)
plumbing.graph.positional (def-graph-record g record-type-name)
plumbing.graph.positional (eval-bound form bindings)
plumbing.graph.positional (graph-form g arg-keywords)
plumbing.graph.positional (graph-let-bindings g g-value-syms)
plumbing.graph.positional (positional-flat-compile g)
plumbing.map (collate flat-counts)
plumbing.map (deep-collate nested-counts)
plumbing.map (flatten m)
plumbing.map (get! m k default-expr)
plumbing.map (inc-key! m k d)
plumbing.map (inc-key-in! m ks d)
plumbing.map (keep-leaves f m)
plumbing.map (keep-leaves-and-path f ks m)
plumbing.map (keyword-map & syms)
plumbing.map (map-leaves f m)
plumbing.map (map-leaves-and-path f ks m)
plumbing.map (merge-disjoint m1 m2 & maps)
plumbing.map (merge-with-key f & maps)
plumbing.map (safe-select-keys m ks)
plumbing.map (topological-sort child-map & [include-leaves?])
plumbing.map (unflatten s)
plumbing.map (update-key! m k f & args)
clj-time (abuts? i-a i-b)
clj-time (ago period)
clj-time (date-midnight year month day)
clj-time (date-time year month day hour minute second millis)
clj-time (after? this that)
clj-time (before? this that)
clj-time (day this)
clj-time (day-of-week this)
clj-time (hour this)
clj-time (milli this)
clj-time (minus- this period)
clj-time (minute this)
clj-time (month this)
clj-time (plus- this period)
clj-time (sec this)
clj-time (second this)
clj-time (year this)
clj-time (days n)
clj-time (days? val)
clj-time (default-time-zone)
clj-time (earliest dts)
clj-time (end in)
clj-time (epoch)
clj-time (extend in & by)
clj-time (from-now period)
clj-time (from-time-zone dt tz)
clj-time (hours n)
clj-time (hours? val)
clj-time (in-days in)
clj-time (in-hours in)
clj-time (in-millis in)
clj-time (in-minutes in)
clj-time (in-months in)
clj-time (in-msecs in)
clj-time (in-seconds in)
clj-time (in-secs in)
clj-time (in-weeks in)
clj-time (in-years in)
clj-time (interval dt-a dt-b)
clj-time (latest dts)
clj-time (local-date year month day)
clj-time (local-date-time year month day hour minute second millis)
clj-time (millis n)
clj-time (minus dt p & ps)
clj-time (minutes n)
clj-time (minutes? val)
clj-time (months n)
clj-time (months? val)
clj-time (now)
clj-time (overlaps? start-a end-a start-b end-b)
clj-time (plus dt p & ps)
clj-time (seconds n)
clj-time (seconds? val)
clj-time (start in)
clj-time (time-zone-for-id id)
clj-time (time-zone-for-offset hours minutes)
clj-time (to-time-zone dt tz)
clj-time (today)
clj-time (today-at-midnight tz)
clj-time (weeks n)
clj-time (weeks? val)
clj-time (within? start end test)
clj-time (year-month year month)
clj-time (years n)
clj-time (years? val)
clj-time (yesterday)
clj-time.coerce (from-date date)
clj-time.coerce (from-long millis)
clj-time.coerce (from-sql-date sql-date)
clj-time.coerce (from-sql-time sql-time)
clj-time.coerce (from-string s)
clj-time.coerce (to-date-time obj)
clj-time.coerce (to-date obj)
clj-time.coerce (to-epoch obj)
clj-time.coerce (to-local-date obj)
clj-time.coerce (to-local-date-time obj)
clj-time.coerce (to-long obj)
clj-time.coerce (to-sql-date obj)
clj-time.coerce (to-sql-time obj)
clj-time.coerce (to-string obj)
clj-time.coerce (to-timestamp obj)
clj-time.format (formatter dtz fmts & more)
clj-time.format (formatter-local fmt)
clj-time.format (instant->map instant)
clj-time.format (parse s)
clj-time.format (parse-local s)
clj-time.format (parse-local-date s)
clj-time.format (show-formatters dt)
clj-time.format (unparse fmt dt)
clj-time.format (unparse-local fmt dt)
clj-time.format (unparse-local-date fmt ld)
clj-time.format (with-chronology f c)
clj-time.format (with-locale f l)
clj-time.format (with-pivot-year f pivot-year)
clj-time.format (with-zone f dtz)
clj-time.local (format-local-time obj format-key)
clj-time.local (to-local-date-time obj)
clj-time.local (local-now)
clj-time.predicates (same-date? this-date-time that-date-time)
clj-time.periodic (periodic-seq start period-like)
