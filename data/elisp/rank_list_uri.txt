<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/A-Sample-Function-Description.html#index-foo'>foo</a>(integer1,integer2,integers)</tt>	the function foo subtracts integer1 from integer2 then adds all the rest of the arguments to the result
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Abbrev-Expansion.html#index-abbrev_002dsymbol'>abbrev-symbol</a>(abbrev,table)</tt>	this function returns the symbol representing the abbrev named abbrev
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Abbrev-Expansion.html#index-abbrev_002dexpansion'>abbrev-expansion</a>(abbrev,table)</tt>	this function returns the string that abbrev would expand into as defined by the abbrev tables used for the current buffer 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Abbrev-Expansion.html#index-expand_002dabbrev'>expand-abbrev</a>()</tt>	this command expands the abbrev before point if any
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Abbrev-Expansion.html#index-abbrev_002dinsert'>abbrev-insert</a>(abbrev,name,start,end)</tt>	this function inserts the abbrev expansion of abbrev replacing the text between start and end
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Abbrev-Expansion.html#index-abbrev_002dprefix_002dmark'>abbrev-prefix-mark</a>(arg)</tt>	this command marks the current location of point as the beginning of an abbrev
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Abbrev-Expansion.html#index-abbrev_002dall_002dcaps'>abbrev-all-caps</a>()</tt>	when this is set non-nil an abbrev entered entirely in upper case is expanded using all upper case
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Abbrev-Files.html#index-abbrev_002dfile_002dname'>abbrev-file-name</a>()</tt>	this is the default file name for reading and saving abbrevs
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Abbrev-Files.html#index-quietly_002dread_002dabbrev_002dfile'>quietly-read-abbrev-file</a>(filename)</tt>	this function reads abbrev definitions from a file named filename previously written with write-abbrev-file
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Abbrev-Files.html#index-save_002dabbrevs'>save-abbrevs</a>()</tt>	a non-nil value for save-abbrevs means that emacs should offer to save abbrevs if any have changed when files are saved
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Abbrev-Files.html#index-write_002dabbrev_002dfile'>write-abbrev-file</a>(filename)</tt>	save all abbrev definitions except system abbrevs for all abbrev tables listed in abbrev-table-name-list in the file filename in the form of a lisp program that when loaded will define the same abbrevs
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Abbrev-Properties.html#index-abbrev_002dput'>abbrev-put</a>(abbrev,prop,val)</tt>	set the property prop of abbrev to value val
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Abbrev-Properties.html#index-abbrev_002dget'>abbrev-get</a>(abbrev,prop)</tt>	return the property prop of abbrev or nil if the abbrev has no such property
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Abbrev-Table-Properties.html#index-abbrev_002dtable_002dput'>abbrev-table-put</a>(table,prop,val)</tt>	set the property prop of abbrev table table to value val
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Abbrev-Table-Properties.html#index-abbrev_002dtable_002dget'>abbrev-table-get</a>(table,prop)</tt>	return the property prop of abbrev table table or nil if the abbrev has no such property
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Abbrev-Tables.html#index-make_002dabbrev_002dtable'>make-abbrev-table</a>(props)</tt>	this function creates and returns a new empty abbrev table—an obarray containing no symbols
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Abbrev-Tables.html#index-abbrev_002dtable_002dp'>abbrev-table-p</a>(object)</tt>	this function returns a non-nil value if object is an abbrev table
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Abbrev-Tables.html#index-clear_002dabbrev_002dtable'>clear-abbrev-table</a>(abbrev-table)</tt>	this function undefines all the abbrevs in abbrev-table leaving it empty
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Abbrev-Tables.html#index-copy_002dabbrev_002dtable'>copy-abbrev-table</a>(abbrev-table)</tt>	this function returns a copy of abbrev-table—a new abbrev table containing the same abbrev definitions
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Abbrev-Tables.html#index-define_002dabbrev_002dtable'>define-abbrev-table</a>(tabname,definitions,docstring,props)</tt>	this function defines tabname a symbol as an abbrev table name i
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Abbrev-Tables.html#index-insert_002dabbrev_002dtable_002ddescription'>insert-abbrev-table-description</a>(name,human)</tt>	this function inserts before point a description of the abbrev table named name
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Abstract-Display-Functions.html#index-ewoc_002dcreate'>ewoc-create</a>(pretty-printer,header,footer,nosep)</tt>	this constructs and returns a new ewoc with no nodes and thus no data elements 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Abstract-Display-Functions.html#index-ewoc_002dbuffer'>ewoc-buffer</a>(ewoc)</tt>	this returns the buffer where ewoc maintains its text
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Abstract-Display-Functions.html#index-ewoc_002dget_002dhf'>ewoc-get-hf</a>(ewoc)</tt>	this returns a cons cell (header 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Abstract-Display-Functions.html#index-ewoc_002dset_002dhf'>ewoc-set-hf</a>(ewoc,header,footer)</tt>	this sets the header and footer of ewoc to the strings header and footer respectively
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Abstract-Display-Functions.html#index-ewoc_002denter_002dfirst'>ewoc-enter-first</a>(ewoc,data)</tt>	these add a new node encapsulating data putting it respectively at the beginning or end of ewoc’s chain of nodes
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Abstract-Display-Functions.html#index-ewoc_002denter_002dbefore'>ewoc-enter-before</a>(ewoc,node,data)</tt>	these add a new node encapsulating data adding it to ewoc before or after node respectively
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Abstract-Display-Functions.html#index-ewoc_002dprev'>ewoc-prev</a>(ewoc,node)</tt>	these return respectively the previous node and the next node of node in ewoc
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Abstract-Display-Functions.html#index-ewoc_002dnth'>ewoc-nth</a>(ewoc,n)</tt>	this returns the node in ewoc found at zero-based index n
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Abstract-Display-Functions.html#index-ewoc_002ddata'>ewoc-data</a>(node)</tt>	this extracts the data encapsulated by node and returns it
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Abstract-Display-Functions.html#index-ewoc_002dset_002ddata'>ewoc-set-data</a>(node,data)</tt>	this sets the data encapsulated by node to data
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Abstract-Display-Functions.html#index-ewoc_002dlocate'>ewoc-locate</a>(ewoc,pos,guess)</tt>	this determines the node in ewoc which contains point or pos if specified and returns that node
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Abstract-Display-Functions.html#index-ewoc_002dlocation'>ewoc-location</a>(node)</tt>	this returns the start position of node
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Abstract-Display-Functions.html#index-ewoc_002dgoto_002dprev'>ewoc-goto-prev</a>(ewoc,arg)</tt>	these move point to the previous or next respectively argth node in ewoc
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Abstract-Display-Functions.html#index-ewoc_002dgoto_002dnode'>ewoc-goto-node</a>(ewoc,node)</tt>	this moves point to the start of node in ewoc
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Abstract-Display-Functions.html#index-ewoc_002drefresh'>ewoc-refresh</a>(ewoc)</tt>	this function regenerates the text of ewoc
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Abstract-Display-Functions.html#index-ewoc_002dinvalidate'>ewoc-invalidate</a>(ewoc,nodes)</tt>	this is similar to ewoc-refresh except that only nodes in ewoc are updated instead of the entire set
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Abstract-Display-Functions.html#index-ewoc_002ddelete'>ewoc-delete</a>(ewoc,nodes)</tt>	this deletes each node in nodes from ewoc
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Abstract-Display-Functions.html#index-ewoc_002dfilter'>ewoc-filter</a>(ewoc,predicate,args)</tt>	this calls predicate for each data element in ewoc and deletes those nodes for which predicate returns nil
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Abstract-Display-Functions.html#index-ewoc_002dcollect'>ewoc-collect</a>(ewoc,predicate,args)</tt>	this calls predicate for each data element in ewoc and returns a list of those elements for which predicate returns non-nil
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Abstract-Display-Functions.html#index-ewoc_002dmap'>ewoc-map</a>(map-function,ewoc,args)</tt>	this calls map-function for each data element in ewoc and updates those nodes for which map-function returns non-nil
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Accepting-Output.html#index-accept_002dprocess_002doutput'>accept-process-output</a>(process,seconds,millisec,just-this-one)</tt>	this function allows emacs to read pending output from processes
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Accessing-Documentation.html#index-documentation_002dproperty'>documentation-property</a>(symbol,property,verbatim)</tt>	this function returns the documentation string recorded in symbol’s property list under property property
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Accessing-Documentation.html#index-documentation'>documentation</a>(function,verbatim)</tt>	this function returns the documentation string of function
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Accessing-Documentation.html#index-face_002ddocumentation'>face-documentation</a>(face)</tt>	this function returns the documentation string of face as a face
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Accessing-Documentation.html#index-Snarf_002ddocumentation'>Snarf-documentation</a>(filename)</tt>	this function is used when building emacs just before the runnable emacs is dumped
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Accessing-Mouse.html#index-event_002dstart'>event-start</a>(event)</tt>	this returns the starting position of event
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Accessing-Mouse.html#index-event_002dend'>event-end</a>(event)</tt>	this returns the ending position of event
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Accessing-Mouse.html#index-posnp'>posnp</a>(object)</tt>	this function returns non-nil if object is a mouse position list in either of the formats documented in click events); and nil otherwise
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Accessing-Mouse.html#index-posn_002dwindow'>posn-window</a>(position)</tt>	return the window that position is in
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Accessing-Mouse.html#index-posn_002darea'>posn-area</a>(position)</tt>	return the window area recorded in position
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Accessing-Mouse.html#index-posn_002dpoint'>posn-point</a>(position)</tt>	return the buffer position in position
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Accessing-Mouse.html#index-posn_002dx_002dy'>posn-x-y</a>(position)</tt>	return the pixel-based x and y coordinates in position as a cons cell (x 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Accessing-Mouse.html#index-posn_002dcol_002drow'>posn-col-row</a>(position)</tt>	this function returns a cons cell (col 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Accessing-Mouse.html#index-posn_002dactual_002dcol_002drow'>posn-actual-col-row</a>(position)</tt>	return the actual row and column in position as a cons cell (col 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Accessing-Mouse.html#index-posn_002dstring'>posn-string</a>(position)</tt>	return the string object in position either nil or a cons cell (string 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Accessing-Mouse.html#index-posn_002dimage'>posn-image</a>(position)</tt>	return the image object in position either nil or an image (image 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Accessing-Mouse.html#index-posn_002dobject'>posn-object</a>(position)</tt>	return the image or string object in position either nil an image (image 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Accessing-Mouse.html#index-posn_002dobject_002dx_002dy'>posn-object-x-y</a>(position)</tt>	return the pixel-based x and y coordinates relative to the upper left corner of the object in position as a cons cell (dx 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Accessing-Mouse.html#index-posn_002dobject_002dwidth_002dheight'>posn-object-width-height</a>(position)</tt>	return the pixel width and height of the object in position as a cons cell (width 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Accessing-Mouse.html#index-posn_002dtimestamp'>posn-timestamp</a>(position)</tt>	return the timestamp in position
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Accessing-Mouse.html#index-posn_002dat_002dpoint'>posn-at-point</a>(pos,window)</tt>	this function returns a position list for position pos in window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Accessing-Mouse.html#index-posn_002dat_002dx_002dy'>posn-at-x-y</a>(x,y,frame-or-window,whole)</tt>	this function returns position information corresponding to pixel coordinates x and y in a specified frame or window frame-or-window which defaults to the selected window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Accessing-Scroll.html#index-scroll_002dbar_002devent_002dratio'>scroll-bar-event-ratio</a>(event)</tt>	this function returns the fractional vertical position of a scroll bar event within the scroll bar
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Accessing-Scroll.html#index-scroll_002dbar_002dscale'>scroll-bar-scale</a>(ratio,total)</tt>	this function multiplies in effect ratio by total rounding the result to an integer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Accessing-Variables.html#index-symbol_002dvalue'>symbol-value</a>(symbol)</tt>	this function returns the value stored in symbol’s value cell
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Active-Display-Table.html#index-window_002ddisplay_002dtable'>window-display-table</a>(window)</tt>	this function returns window’s display table or nil if there is none
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Active-Display-Table.html#index-set_002dwindow_002ddisplay_002dtable'>set-window-display-table</a>(window,table)</tt>	this function sets the display table of window to table
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Active-Keymaps.html#index-current_002dactive_002dmaps'>current-active-maps</a>(olp,position)</tt>	this returns the list of active keymaps that would be used by the command loop in the current circumstances to look up a key sequence
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Active-Keymaps.html#index-key_002dbinding'>key-binding</a>(key,accept-defaults,no-remap,position)</tt>	this function returns the binding for key according to the current active keymaps
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Adaptive-Fill.html#index-adaptive_002dfill_002dmode'>adaptive-fill-mode</a>()</tt>	adaptive fill mode is enabled when this variable is non-nil
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Adaptive-Fill.html#index-fill_002dcontext_002dprefix'>fill-context-prefix</a>(from,to)</tt>	this function implements the heart of adaptive fill mode it chooses a fill prefix based on the text between from and to typically the start and end of a paragraph
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Adaptive-Fill.html#index-adaptive_002dfill_002dregexp'>adaptive-fill-regexp</a>()</tt>	adaptive fill mode matches this regular expression against the text starting after the left margin whitespace if any on a line the characters it matches are that line’s candidate for the fill prefix
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Adaptive-Fill.html#index-adaptive_002dfill_002dfirst_002dline_002dregexp'>adaptive-fill-first-line-regexp</a>()</tt>	used only in one-line paragraphs this regular expression acts as an additional check of the validity of the one available candidate fill prefix the candidate must match this regular expression or match comment-start-skip
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Adaptive-Fill.html#index-adaptive_002dfill_002dfunction'>adaptive-fill-function</a>()</tt>	you can specify more complex ways of choosing a fill prefix automatically by setting this variable to a function
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Adding-Generalized-Variables.html#index-gv_002ddefine_002dsimple_002dsetter'>gv-define-simple-setter</a>(name,setter,fix-return)</tt>	this macro enables you to easily define setf methods for simple cases
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Adding-Generalized-Variables.html#index-gv_002ddefine_002dsetter'>gv-define-setter</a>(name,arglist,body)</tt>	this macro allows for more complex setf expansions than the previous form
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Advising-Named-Functions.html#index-advice_002dadd'>advice-add</a>(symbol,where,function,props)</tt>	add the advice function to the named function symbol
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Advising-Named-Functions.html#index-advice_002dremove'>advice-remove</a>(symbol,function)</tt>	remove the advice function from the named function symbol
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Advising-Named-Functions.html#index-advice_002dmember_002dp'>advice-member-p</a>(function,symbol)</tt>	return non-nil if the advice function is already in the named function symbol
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Advising-Named-Functions.html#index-advice_002dmapc'>advice-mapc</a>(function,symbol)</tt>	call function for every advice that was added to the named function symbol
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Anonymous-Functions.html#index-function'>function</a>(function-object)</tt>	 this special form returns function-object without evaluating it
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Applying-Customizations.html#index-custom_002dset_002dvariables'>custom-set-variables</a>(args)</tt>	this function installs the variable customizations specified by args
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Applying-Customizations.html#index-custom_002dset_002dfaces'>custom-set-faces</a>(args)</tt>	this function installs the face customizations specified by args
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Arithmetic-Operations.html#index-1_002b'>1+</a>(number-or-marker)</tt>	this function returns number-or-marker plus 1
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Arithmetic-Operations.html#index-1_002d'>1-</a>(number-or-marker)</tt>	this function returns number-or-marker minus 1
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Arithmetic-Operations.html#index-_002b'>+</a>(numbers-or-markers)</tt>	this function adds its arguments together
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Arithmetic-Operations.html#index-_002d'>-</a>(number-or-marker,more-numbers-or-markers)</tt>	the - function serves two purposes negation and subtraction
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Arithmetic-Operations.html#index-_002a'>*</a>(numbers-or-markers)</tt>	this function multiplies its arguments together and returns the product
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Arithmetic-Operations.html#index-_002f'>/</a>(dividend,divisor,divisors)</tt>	this function divides dividend by divisor and returns the quotient
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Arithmetic-Operations.html#index-_0025'>%</a>(dividend,divisor)</tt>	 this function returns the integer remainder after division of dividend by divisor
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Arithmetic-Operations.html#index-mod'>mod</a>(dividend,divisor)</tt>	 this function returns the value of dividend modulo divisor in other words the remainder after division of dividend by divisor but with the same sign as divisor
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Array-Functions.html#index-arrayp'>arrayp</a>(object)</tt>	this function returns t if object is an array 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Array-Functions.html#index-aref'>aref</a>(array,index)</tt>	 this function returns the indexth element of array
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Array-Functions.html#index-aset'>aset</a>(array,index,object)</tt>	this function sets the indexth element of array to be object
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Array-Functions.html#index-fillarray'>fillarray</a>(array,object)</tt>	this function fills the array array with object so that each element of array is object
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Association-Lists.html#index-assoc'>assoc</a>(key,alist)</tt>	this function returns the first association for key in alist comparing key against the alist elements using equal see equality predicates 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Association-Lists.html#index-rassoc'>rassoc</a>(value,alist)</tt>	this function returns the first association with value value in alist
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Association-Lists.html#index-assq'>assq</a>(key,alist)</tt>	this function is like assoc in that it returns the first association for key in alist but it makes the comparison using eq instead of equal
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Association-Lists.html#index-rassq'>rassq</a>(value,alist)</tt>	this function returns the first association with value value in alist
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Association-Lists.html#index-assoc_002ddefault'>assoc-default</a>(key,alist,test,default)</tt>	this function searches alist for a match for key
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Association-Lists.html#index-copy_002dalist'>copy-alist</a>(alist)</tt>	 this function returns a two-level deep copy of alist it creates a new copy of each association so that you can alter the associations of the new alist without changing the old one
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Association-Lists.html#index-assq_002ddelete_002dall'>assq-delete-all</a>(key,alist)</tt>	this function deletes from alist all the elements whose car is eq to key much as if you used delq to delete each such element one by one
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Association-Lists.html#index-rassq_002ddelete_002dall'>rassq-delete-all</a>(value,alist)</tt>	this function deletes from alist all the elements whose cdr is eq to value
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Asynchronous-Processes.html#index-start_002dprocess'>start-process</a>(name,buffer-or-name,program,args)</tt>	this function creates a new asynchronous subprocess and starts the program program running in it
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Asynchronous-Processes.html#index-start_002dfile_002dprocess'>start-file-process</a>(name,buffer-or-name,program,args)</tt>	like start-process this function starts a new asynchronous subprocess running program in it and returns its process object
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Asynchronous-Processes.html#index-start_002dprocess_002dshell_002dcommand'>start-process-shell-command</a>(name,buffer-or-name,command)</tt>	this function is like start-process except that it uses a shell to execute the specified command
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Asynchronous-Processes.html#index-start_002dfile_002dprocess_002dshell_002dcommand'>start-file-process-shell-command</a>(name,buffer-or-name,command)</tt>	this function is like start-process-shell-command but uses start-file-process internally
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Atomic-Changes.html#index-prepare_002dchange_002dgroup'>prepare-change-group</a>(buffer)</tt>	this function sets up a change group for buffer buffer which defaults to the current buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Atomic-Changes.html#index-activate_002dchange_002dgroup'>activate-change-group</a>(handle)</tt>	this function activates the change group that handle designates
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Atomic-Changes.html#index-accept_002dchange_002dgroup'>accept-change-group</a>(handle)</tt>	this function accepts all the changes in the change group specified by handle making them final
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Atomic-Changes.html#index-cancel_002dchange_002dgroup'>cancel-change-group</a>(handle)</tt>	this function cancels and undoes all the changes in the change group specified by handle
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Attribute-Functions.html#index-face_002dattribute'>face-attribute</a>(face,attribute,frame,inherit)</tt>	this function returns the value of the attribute attribute for face on frame
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Attribute-Functions.html#index-face_002dattribute_002drelative_002dp'>face-attribute-relative-p</a>(attribute,value)</tt>	this function returns non-nil if value when used as the value of the face attribute attribute is relative
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Attribute-Functions.html#index-face_002dall_002dattributes'>face-all-attributes</a>(face,frame)</tt>	this function returns an alist of attributes of face
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Attribute-Functions.html#index-merge_002dface_002dattribute'>merge-face-attribute</a>(attribute,value1,value2)</tt>	if value1 is a relative value for the face attribute attribute returns it merged with the underlying value value2 otherwise if value1 is an absolute value for the face attribute attribute returns value1 unchanged
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Attribute-Functions.html#index-set_002dface_002dattribute'>set-face-attribute</a>(face,frame,arguments)</tt>	this function sets one or more attributes of face for frame
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Attribute-Functions.html#index-set_002dface_002dforeground'>set-face-foreground</a>(face,color,frame)</tt>	these set the :foreground attribute (or :background attribute respectively) of face to color
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Attribute-Functions.html#index-set_002dface_002dstipple'>set-face-stipple</a>(face,pattern,frame)</tt>	this sets the :stipple attribute of face to pattern
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Attribute-Functions.html#index-set_002dface_002dfont'>set-face-font</a>(face,font,frame)</tt>	this sets the :font attribute of face to font
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Attribute-Functions.html#index-set_002dface_002dbold'>set-face-bold</a>(face,bold-p,frame)</tt>	this sets the :weight attribute of face to normal if bold-p is nil and to bold otherwise
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Attribute-Functions.html#index-set_002dface_002ditalic'>set-face-italic</a>(face,italic-p,frame)</tt>	this sets the :slant attribute of face to normal if italic-p is nil and to italic otherwise
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Attribute-Functions.html#index-set_002dface_002dunderline'>set-face-underline</a>(face,underline,frame)</tt>	this sets the :underline attribute of face to underline
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Attribute-Functions.html#index-set_002dface_002dinverse_002dvideo'>set-face-inverse-video</a>(face,inverse-video-p,frame)</tt>	this sets the :inverse-video attribute of face to inverse-video-p
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Attribute-Functions.html#index-invert_002dface'>invert-face</a>(face,frame)</tt>	this swaps the foreground and background colors of face face
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Attribute-Functions.html#index-face_002dfont'>face-font</a>(face,frame)</tt>	this function returns the name of the font of face face
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Attribute-Functions.html#index-face_002dforeground'>face-foreground</a>(face,frame,inherit)</tt>	these functions return the foreground color or background color respectively of face face as a string
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Attribute-Functions.html#index-face_002dstipple'>face-stipple</a>(face,frame,inherit)</tt>	this function returns the name of the background stipple pattern of face face or nil if it doesn’t have one
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Attribute-Functions.html#index-face_002dbold_002dp'>face-bold-p</a>(face,frame,inherit)</tt>	this function returns a non-nil value if the :weight attribute of face is bolder than normal 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Attribute-Functions.html#index-face_002ditalic_002dp'>face-italic-p</a>(face,frame,inherit)</tt>	this function returns a non-nil value if the :slant attribute of face is italic or oblique and nil otherwise
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Attribute-Functions.html#index-face_002dunderline_002dp'>face-underline-p</a>(face,frame,inherit)</tt>	this function returns non-nil if face face specifies a non-nil :underline attribute
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Attribute-Functions.html#index-face_002dinverse_002dvideo_002dp'>face-inverse-video-p</a>(face,frame,inherit)</tt>	this function returns non-nil if face face specifies a non-nil :inverse-video attribute
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Auto-Major-Mode.html#index-normal_002dmode'>normal-mode</a>(find-file)</tt>	this function establishes the proper major mode and buffer-local variable bindings for the current buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Auto-Major-Mode.html#index-set_002dauto_002dmode'>set-auto-mode</a>(keep-mode-if-same)</tt>	 this function selects the major mode that is appropriate for the current buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Auto-Major-Mode.html#index-set_002dbuffer_002dmajor_002dmode'>set-buffer-major-mode</a>(buffer)</tt>	this function sets the major mode of buffer to the default value of major-mode if that is nil it uses the current buffer’s major mode if that is suitable 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Auto-Major-Mode.html#index-initial_002dmajor_002dmode'>initial-major-mode</a>()</tt>	 the value of this variable determines the major mode of the initial *scratch* buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Auto_002dSaving.html#index-auto_002dsave_002dmode'>auto-save-mode</a>(arg)</tt>	this is the mode command for auto save mode a buffer-local minor mode
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Auto_002dSaving.html#index-auto_002dsave_002dfile_002dname_002dp'>auto-save-file-name-p</a>(filename)</tt>	this function returns a non-nil value if filename is a string that could be the name of an auto-save file
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Auto_002dSaving.html#index-make_002dauto_002dsave_002dfile_002dname'>make-auto-save-file-name</a>()</tt>	this function returns the file name to use for auto-saving the current buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Auto_002dSaving.html#index-auto_002dsave_002dvisited_002dfile_002dname'>auto-save-visited-file-name</a>()</tt>	if this variable is non-nil emacs auto-saves buffers in the files they are visiting
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Auto_002dSaving.html#index-recent_002dauto_002dsave_002dp'>recent-auto-save-p</a>()</tt>	this function returns t if the current buffer has been auto-saved since the last time it was read in or saved
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Auto_002dSaving.html#index-set_002dbuffer_002dauto_002dsaved'>set-buffer-auto-saved</a>()</tt>	this function marks the current buffer as auto-saved
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Auto_002dSaving.html#index-auto_002dsave_002dinterval'>auto-save-interval</a>()</tt>	the value of this variable specifies how often to do auto-saving in terms of number of input events
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Auto_002dSaving.html#index-auto_002dsave_002dtimeout'>auto-save-timeout</a>()</tt>	the value of this variable is the number of seconds of idle time that should cause auto-saving
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Auto_002dSaving.html#index-auto_002dsave_002ddefault'>auto-save-default</a>()</tt>	if this variable is non-nil buffers that are visiting files have auto-saving enabled by default
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Auto_002dSaving.html#index-do_002dauto_002dsave'>do-auto-save</a>(no-message,current-only)</tt>	this function auto-saves all buffers that need to be auto-saved
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Auto_002dSaving.html#index-delete_002dauto_002dsave_002dfile_002dif_002dnecessary'>delete-auto-save-file-if-necessary</a>(force)</tt>	this function deletes the current buffer’s auto-save file if delete-auto-save-files is non-nil
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Auto_002dSaving.html#index-delete_002dauto_002dsave_002dfiles'>delete-auto-save-files</a>()</tt>	this variable is used by the function delete-auto-save-file-if-necessary
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Auto_002dSaving.html#index-rename_002dauto_002dsave_002dfile'>rename-auto-save-file</a>()</tt>	this function adjusts the current buffer’s auto-save file name if the visited file name has changed
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Auto_002dSaving.html#index-auto_002dsave_002dlist_002dfile_002dprefix'>auto-save-list-file-prefix</a>()</tt>	after emacs reads your init file it initializes auto-save-list-file-name if you have not already set it non-nil based on this prefix adding the host name and process id
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Autoload.html#index-autoload-1'>autoload</a>(function,filename,docstring,interactive,type)</tt>	this function defines the function or macro named function so as to load automatically from filename
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Autoload.html#index-autoloadp'>autoloadp</a>(object)</tt>	this function returns non-nil if object is an autoload object
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Autoload.html#index-autoload_002ddo_002dload'>autoload-do-load</a>(autoload,name,macro-only)</tt>	this function performs the loading specified by autoload which should be an autoload object
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Backup-Names.html#index-backup_002dfile_002dname_002dp'>backup-file-name-p</a>(filename)</tt>	this function returns a non-nil value if filename is a possible name for a backup file
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Backup-Names.html#index-make_002dbackup_002dfile_002dname'>make-backup-file-name</a>(filename)</tt>	this function returns a string that is the name to use for a non-numbered backup file for file filename
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Backup-Names.html#index-find_002dbackup_002dfile_002dname'>find-backup-file-name</a>(filename)</tt>	this function computes the file name for a new backup file for filename
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Backup-Names.html#index-file_002dnewest_002dbackup'>file-newest-backup</a>(filename)</tt>	this function returns the name of the most recent backup file for filename or nil if that file has no backup files
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Base-64.html#index-base64_002dencode_002dregion'>base64-encode-region</a>(beg,end,no-line-break)</tt>	this function converts the region from beg to end into base 64 code
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Base-64.html#index-base64_002dencode_002dstring'>base64-encode-string</a>(string,no-line-break)</tt>	this function converts the string string into base 64 code
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Base-64.html#index-base64_002ddecode_002dregion'>base64-decode-region</a>(beg,end)</tt>	this function converts the region from beg to end from base 64 code into the corresponding decoded text
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Base-64.html#index-base64_002ddecode_002dstring'>base64-decode-string</a>(string)</tt>	this function converts the string string from base 64 code into the corresponding decoded text
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Basic-Completion.html#index-try_002dcompletion'>try-completion</a>(string,collection,predicate)</tt>	this function returns the longest common substring of all possible completions of string in collection
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Basic-Completion.html#index-all_002dcompletions'>all-completions</a>(string,collection,predicate)</tt>	this function returns a list of all possible completions of string
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Basic-Completion.html#index-test_002dcompletion'>test-completion</a>(string,collection,predicate)</tt>	this function returns non-nil if string is a valid completion alternative specified by collection and predicate
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Basic-Completion.html#index-completion_002dboundaries'>completion-boundaries</a>(string,collection,predicate,suffix)</tt>	this function returns the boundaries of the field on which collection will operate assuming that string holds the text before point and suffix holds the text after point
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Basic-Completion.html#index-lazy_002dcompletion_002dtable'>lazy-completion-table</a>(var,fun)</tt>	this macro provides a way to initialize the variable var as a collection for completion in a lazy way not computing its actual contents until they are first needed
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Basic-Major-Modes.html#index-text_002dmode'>text-mode</a>()</tt>	text mode is a major mode for editing human languages
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Basic-Major-Modes.html#index-prog_002dmode'>prog-mode</a>()</tt>	prog mode is a basic major mode for buffers containing programming language source code
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Basic-Major-Modes.html#index-special_002dmode'>special-mode</a>()</tt>	special mode is a basic major mode for buffers containing text that is produced specially by emacs rather than directly from a file
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Basic-Windows.html#index-windowp'>windowp</a>(object)</tt>	this function returns t if object is a window whether or not it displays a buffer 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Basic-Windows.html#index-window_002dlive_002dp'>window-live-p</a>(object)</tt>	this function returns t if object is a live window and nil otherwise
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Basic-Windows.html#index-window_002dvalid_002dp'>window-valid-p</a>(object)</tt>	this function returns t if object is a live window or an internal window in a window tree
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Basic-Windows.html#index-selected_002dwindow'>selected-window</a>()</tt>	this function returns the selected window which is always a live window 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Beeping.html#index-ding'>ding</a>(do-not-terminate)</tt>	 this function beeps or flashes the screen see visible-bell below 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Beeping.html#index-beep'>beep</a>(do-not-terminate)</tt>	this is a synonym for ding
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Beeping.html#index-visible_002dbell'>visible-bell</a>()</tt>	this variable determines whether emacs should flash the screen to represent a bell
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Bidirectional-Display.html#index-current_002dbidi_002dparagraph_002ddirection'>current-bidi-paragraph-direction</a>(buffer)</tt>	this function returns the paragraph direction at point in the named buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Bidirectional-Display.html#index-move_002dpoint_002dvisually'>move-point-visually</a>(direction)</tt>	this function moves point of the currently selected window to the buffer position that appears immediately to the right or to the left of point on the screen
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Bidirectional-Display.html#index-bidi_002dstring_002dmark_002dleft_002dto_002dright'>bidi-string-mark-left-to-right</a>(string)</tt>	this function returns its argument string possibly modified such that the result can be safely concatenated with another string or juxtaposed with another string in a buffer without disrupting the relative layout of this string and the next one on display
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Bindat-Functions.html#index-bindat_002dunpack'>bindat-unpack</a>(spec,bindat-raw,bindat-idx)</tt>	this function unpacks data from the unibyte string or byte array bindat-raw according to spec
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Bindat-Functions.html#index-bindat_002dget_002dfield'>bindat-get-field</a>(struct,name)</tt>	this function selects a field’s data from the nested alist struct
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Bindat-Functions.html#index-bindat_002dlength'>bindat-length</a>(spec,struct)</tt>	this function returns the total length of the data in struct according to spec
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Bindat-Functions.html#index-bindat_002dpack'>bindat-pack</a>(spec,struct,bindat-raw,bindat-idx)</tt>	this function returns a byte array packed according to spec from the data in the alist struct
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Bindat-Functions.html#index-bindat_002dip_002dto_002dstring'>bindat-ip-to-string</a>(ip)</tt>	convert the internet address vector ip to a string in the usual dotted notation
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Bitwise-Operations.html#index-lsh'>lsh</a>(integer1,count)</tt>	 lsh which is an abbreviation for logical shift shifts the bits in integer1 to the left count places or to the right if count is negative bringing zeros into the vacated bits
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Bitwise-Operations.html#index-ash'>ash</a>(integer1,count)</tt>	 ash arithmetic shift shifts the bits in integer1 to the left count places or to the right if count is negative
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Bitwise-Operations.html#index-logand'>logand</a>(ints-or-markers)</tt>	this function returns the “logical and” of the arguments the nth bit is set in the result if and only if the nth bit is set in all the arguments
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Bitwise-Operations.html#index-logior'>logior</a>(ints-or-markers)</tt>	this function returns the “inclusive or” of its arguments the nth bit is set in the result if and only if the nth bit is set in at least one of the arguments
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Bitwise-Operations.html#index-logxor'>logxor</a>(ints-or-markers)</tt>	this function returns the “exclusive or” of its arguments the nth bit is set in the result if and only if the nth bit is set in an odd number of the arguments
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Bitwise-Operations.html#index-lognot'>lognot</a>(integer)</tt>	this function returns the logical complement of its argument the nth bit is one in the result if and only if the nth bit is zero in integer and vice-versa
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Blinking.html#index-blink_002dmatching_002dparen'>blink-matching-paren</a>()</tt>	if this variable is nil then blink-matching-open does nothing
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Blinking.html#index-blink_002dmatching_002dparen_002ddistance'>blink-matching-paren-distance</a>()</tt>	this variable specifies the maximum distance to scan for a matching parenthesis before giving up
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Blinking.html#index-blink_002dmatching_002ddelay'>blink-matching-delay</a>()</tt>	this variable specifies the number of seconds to keep indicating the matching parenthesis
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Blinking.html#index-blink_002dmatching_002dopen'>blink-matching-open</a>()</tt>	this function is the default value of blink-paren-function
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Bool_002dVectors.html#index-make_002dbool_002dvector'>make-bool-vector</a>(length,initial)</tt>	return a new bool-vector of length elements each one initialized to initial
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Bool_002dVectors.html#index-bool_002dvector_002dp'>bool-vector-p</a>(object)</tt>	this returns t if object is a bool-vector and nil otherwise
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Bool_002dVectors.html#index-bool_002dvector_002dexclusive_002dor'>bool-vector-exclusive-or</a>(a,b,c)</tt>	return bitwise exclusive or of bool vectors a and b
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Bool_002dVectors.html#index-bool_002dvector_002dunion'>bool-vector-union</a>(a,b,c)</tt>	return bitwise or of bool vectors a and b
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Bool_002dVectors.html#index-bool_002dvector_002dintersection'>bool-vector-intersection</a>(a,b,c)</tt>	return bitwise and of bool vectors a and b
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Bool_002dVectors.html#index-bool_002dvector_002dset_002ddifference'>bool-vector-set-difference</a>(a,b,c)</tt>	return set difference of bool vectors a and b
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Bool_002dVectors.html#index-bool_002dvector_002dnot'>bool-vector-not</a>(a,b)</tt>	return set complement of bool vector a
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Bool_002dVectors.html#index-bool_002dvector_002dsubsetp'>bool-vector-subsetp</a>(a,b)</tt>	return t if every t value in a is also t in b nil otherwise
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Bool_002dVectors.html#index-bool_002dvector_002dcount_002dconsecutive'>bool-vector-count-consecutive</a>(a,b,i)</tt>	return the number of consecutive elements in a equal b starting at i
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Bool_002dVectors.html#index-bool_002dvector_002dcount_002dpopulation'>bool-vector-count-population</a>(a)</tt>	return the number of elements that are t in bool vector a
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Buffer-Basics.html#index-bufferp'>bufferp</a>(object)</tt>	this function returns t if object is a buffer nil otherwise
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Buffer-Contents.html#index-buffer_002dsubstring'>buffer-substring</a>(start,end)</tt>	this function returns a string containing a copy of the text of the region defined by positions start and end in the current buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Buffer-Contents.html#index-buffer_002dsubstring_002dno_002dproperties'>buffer-substring-no-properties</a>(start,end)</tt>	this is like buffer-substring except that it does not copy text properties just the characters themselves
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Buffer-Contents.html#index-buffer_002dstring'>buffer-string</a>()</tt>	this function returns the contents of the entire accessible portion of the current buffer as a string
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Buffer-Contents.html#index-filter_002dbuffer_002dsubstring'>filter-buffer-substring</a>(start,end,delete)</tt>	this function filters the buffer text between start and end using a function specified by the variable filter-buffer-substring-function and returns the result
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Buffer-Contents.html#index-current_002dword'>current-word</a>(strict,really-word)</tt>	this function returns the symbol or word at or near point as a string
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Buffer-Contents.html#index-thing_002dat_002dpoint'>thing-at-point</a>(thing)</tt>	return the thing around or next to point as a string
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Buffer-End-Motion.html#index-beginning_002dof_002dbuffer'>beginning-of-buffer</a>(n)</tt>	this function moves point to the beginning of the buffer or the limits of the accessible portion when narrowing is in effect setting the mark at the previous position (except in transient mark mode if the mark is already active it does not set the mark
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Buffer-End-Motion.html#index-end_002dof_002dbuffer'>end-of-buffer</a>(n)</tt>	this function moves point to the end of the buffer or the limits of the accessible portion when narrowing is in effect setting the mark at the previous position except in transient mark mode when the mark is already active 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Buffer-File-Name.html#index-buffer_002dfile_002dname'>buffer-file-name</a>(buffer)</tt>	this function returns the absolute file name of the file that buffer is visiting
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Buffer-File-Name.html#index-get_002dfile_002dbuffer'>get-file-buffer</a>(filename)</tt>	this function returns the buffer visiting file filename
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Buffer-File-Name.html#index-find_002dbuffer_002dvisiting'>find-buffer-visiting</a>(filename,predicate)</tt>	this is like get-file-buffer except that it can return any buffer visiting the file possibly under a different name
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Buffer-File-Name.html#index-set_002dvisited_002dfile_002dname'>set-visited-file-name</a>(filename,no-query,along-with-file)</tt>	if filename is a non-empty string this function changes the name of the file visited in the current buffer to filename
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Buffer-Gap.html#index-gap_002dposition'>gap-position</a>()</tt>	this function returns the current gap position in the current buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Buffer-Gap.html#index-gap_002dsize'>gap-size</a>()</tt>	this function returns the current gap size of the current buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Buffer-List.html#index-buffer_002dlist'>buffer-list</a>(frame)</tt>	this function returns the buffer list including all buffers even those whose names begin with a space
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Buffer-List.html#index-other_002dbuffer'>other-buffer</a>(buffer,visible-ok,frame)</tt>	this function returns the first buffer in the buffer list other than buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Buffer-List.html#index-last_002dbuffer'>last-buffer</a>(buffer,visible-ok,frame)</tt>	this function returns the last buffer in frame’s buffer list other than buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Buffer-List.html#index-bury_002dbuffer'>bury-buffer</a>(buffer-or-name)</tt>	this command puts buffer-or-name at the end of the buffer list without changing the order of any of the other buffers on the list
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Buffer-List.html#index-unbury_002dbuffer'>unbury-buffer</a>()</tt>	this command switches to the last buffer in the local buffer list of the selected frame
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Buffer-Modification.html#index-buffer_002dmodified_002dp'>buffer-modified-p</a>(buffer)</tt>	this function returns t if the buffer buffer has been modified since it was last read in from a file or saved or nil otherwise
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Buffer-Modification.html#index-set_002dbuffer_002dmodified_002dp'>set-buffer-modified-p</a>(flag)</tt>	this function marks the current buffer as modified if flag is non-nil or as unmodified if the flag is nil
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Buffer-Modification.html#index-restore_002dbuffer_002dmodified_002dp'>restore-buffer-modified-p</a>(flag)</tt>	like set-buffer-modified-p but does not force redisplay of mode lines
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Buffer-Modification.html#index-not_002dmodified'>not-modified</a>(arg)</tt>	this command marks the current buffer as unmodified and not needing to be saved
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Buffer-Modification.html#index-buffer_002dmodified_002dtick'>buffer-modified-tick</a>(buffer)</tt>	this function returns buffer’s modification-count
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Buffer-Modification.html#index-buffer_002dchars_002dmodified_002dtick'>buffer-chars-modified-tick</a>(buffer)</tt>	this function returns buffer’s character-change modification-count
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Buffer-Names.html#index-buffer_002dname'>buffer-name</a>(buffer)</tt>	this function returns the name of buffer as a string
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Buffer-Names.html#index-rename_002dbuffer'>rename-buffer</a>(newname,unique)</tt>	this function renames the current buffer to newname
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Buffer-Names.html#index-get_002dbuffer'>get-buffer</a>(buffer-or-name)</tt>	this function returns the buffer specified by buffer-or-name
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Buffer-Names.html#index-generate_002dnew_002dbuffer_002dname'>generate-new-buffer-name</a>(starting-name,ignore)</tt>	this function returns a name that would be unique for a new buffer—but does not create the buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Buffers-and-Windows.html#index-window_002dbuffer'>window-buffer</a>(window)</tt>	this function returns the buffer that window is displaying
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Buffers-and-Windows.html#index-set_002dwindow_002dbuffer'>set-window-buffer</a>(window,buffer-or-name,keep-margins)</tt>	this function makes window display buffer-or-name
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Buffers-and-Windows.html#index-get_002dbuffer_002dwindow'>get-buffer-window</a>(buffer-or-name,all-frames)</tt>	this function returns the first window displaying buffer-or-name in the cyclic ordering of windows starting from the selected window see cyclic window ordering 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Buffers-and-Windows.html#index-get_002dbuffer_002dwindow_002dlist'>get-buffer-window-list</a>(buffer-or-name,minibuf,all-frames)</tt>	this function returns a list of all windows currently displaying buffer-or-name
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Buffers-and-Windows.html#index-replace_002dbuffer_002din_002dwindows'>replace-buffer-in-windows</a>(buffer-or-name)</tt>	this command replaces buffer-or-name with some other buffer in all windows displaying it
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Building-Emacs.html#index-custom_002dinitialize_002ddelay'>custom-initialize-delay</a>(symbol,value)</tt>	this function delays the initialization of symbol to the next emacs start
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Building-Emacs.html#index-dump_002demacs'>dump-emacs</a>(to-file,from-file)</tt>	 this function dumps the current state of emacs into an executable file to-file
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Building-Lists.html#index-cons'>cons</a>(object1,object2)</tt>	this function is the most basic function for building new list structure
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Building-Lists.html#index-list'>list</a>(objects)</tt>	this function creates a list with objects as its elements
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Building-Lists.html#index-make_002dlist'>make-list</a>(length,object)</tt>	this function creates a list of length elements in which each element is object
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Building-Lists.html#index-append'>append</a>(sequences)</tt>	 this function returns a list containing all the elements of sequences
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Building-Lists.html#index-reverse'>reverse</a>(list)</tt>	this function creates a new list whose elements are the elements of list but in reverse order
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Building-Lists.html#index-copy_002dtree'>copy-tree</a>(tree,vecp)</tt>	this function returns a copy of the tree tree
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Building-Lists.html#index-number_002dsequence'>number-sequence</a>(from,to,separation)</tt>	this returns a list of numbers starting with from and incrementing by separation and ending at or just before to
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Button-Buffer-Commands.html#index-push_002dbutton'>push-button</a>(pos,use-mouse-action)</tt>	perform the action specified by a button at location pos
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Button-Buffer-Commands.html#index-forward_002dbutton'>forward-button</a>(n,wrap,display-message)</tt>	move to the nth next button or nth previous button if n is negative
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Button-Buffer-Commands.html#index-backward_002dbutton'>backward-button</a>(n,wrap,display-message)</tt>	move to the nth previous button or nth next button if n is negative
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Button-Buffer-Commands.html#index-next_002dbutton'>next-button</a>(pos,count-current)</tt>	return the next button after for next-button or before for previous-button position pos in the current buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Button-Types.html#index-define_002dbutton_002dtype'>define-button-type</a>(name,properties)</tt>	define a ‘button type’ called name a symbol 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Byte_002dCode-Objects.html#index-make_002dbyte_002dcode'>make-byte-code</a>(elements)</tt>	this function constructs and returns a byte-code function object with elements as its elements
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Calling-Functions.html#index-funcall'>funcall</a>(function,arguments)</tt>	funcall calls function with arguments and returns whatever function returns
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Calling-Functions.html#index-apply'>apply</a>(function,arguments)</tt>	apply calls function with arguments just like funcall but with one difference the last of arguments is a list of objects which are passed to function as separate arguments rather than a single list
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Calling-Functions.html#index-apply_002dpartially'>apply-partially</a>(func,args)</tt>	this function returns a new function which when called will call func with the list of arguments composed from args and additional arguments specified at the time of the call
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Calling-Functions.html#index-identity'>identity</a>(arg)</tt>	this function returns arg and has no side effects
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Calling-Functions.html#index-ignore'>ignore</a>(args)</tt>	this function ignores any arguments and returns nil
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Case-Changes.html#index-capitalize_002dregion'>capitalize-region</a>(start,end)</tt>	this function capitalizes all words in the region defined by start and end
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Case-Changes.html#index-downcase_002dregion'>downcase-region</a>(start,end)</tt>	this function converts all of the letters in the region defined by start and end to lower case
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Case-Changes.html#index-upcase_002dregion'>upcase-region</a>(start,end)</tt>	this function converts all of the letters in the region defined by start and end to upper case
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Case-Changes.html#index-capitalize_002dword'>capitalize-word</a>(count)</tt>	this function capitalizes count words after point moving point over as it does
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Case-Changes.html#index-downcase_002dword'>downcase-word</a>(count)</tt>	this function converts the count words after point to all lower case moving point over as it does
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Case-Changes.html#index-upcase_002dword'>upcase-word</a>(count)</tt>	this function converts the count words after point to all upper case moving point over as it does
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Case-Conversion.html#index-downcase'>downcase</a>(string-or-char)</tt>	this function converts string-or-char which should be either a character or a string to lower case
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Case-Conversion.html#index-upcase'>upcase</a>(string-or-char)</tt>	this function converts string-or-char which should be either a character or a string to upper case
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Case-Conversion.html#index-capitalize'>capitalize</a>(string-or-char)</tt>	 this function capitalizes strings or characters
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Case-Conversion.html#index-upcase_002dinitials'>upcase-initials</a>(string-or-char)</tt>	if string-or-char is a string this function capitalizes the initials of the words in string-or-char without altering any letters other than the initials
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Case-Tables.html#index-case_002dtable_002dp'>case-table-p</a>(object)</tt>	this predicate returns non-nil if object is a valid case table
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Case-Tables.html#index-set_002dstandard_002dcase_002dtable'>set-standard-case-table</a>(table)</tt>	this function makes table the standard case table so that it will be used in any buffers created subsequently
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Case-Tables.html#index-standard_002dcase_002dtable'>standard-case-table</a>()</tt>	this returns the standard case table
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Case-Tables.html#index-current_002dcase_002dtable'>current-case-table</a>()</tt>	this function returns the current buffer’s case table
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Case-Tables.html#index-set_002dcase_002dtable'>set-case-table</a>(table)</tt>	this sets the current buffer’s case table to table
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Case-Tables.html#index-set_002dcase_002dsyntax_002dpair'>set-case-syntax-pair</a>(uc,lc,case-table)</tt>	this function specifies a pair of corresponding letters one upper case and one lower case
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Case-Tables.html#index-set_002dcase_002dsyntax_002ddelims'>set-case-syntax-delims</a>(l,r,case-table)</tt>	this function makes characters l and r a matching pair of case-invariant delimiters
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Case-Tables.html#index-set_002dcase_002dsyntax'>set-case-syntax</a>(char,syntax,case-table)</tt>	this function makes char case-invariant with syntax syntax
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Case-Tables.html#index-describe_002dbuffer_002dcase_002dtable'>describe-buffer-case-table</a>()</tt>	this command displays a description of the contents of the current buffer’s case table
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Catch-and-Throw.html#index-throw'>throw</a>(tag,value)</tt>	the purpose of throw is to return from a return point previously established with catch
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Categories.html#index-define_002dcategory'>define-category</a>(char,docstring,table)</tt>	this function defines a new category with name char and documentation docstring for the category table table
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Categories.html#index-category_002ddocstring'>category-docstring</a>(category,table)</tt>	this function returns the documentation string of category category in category table table
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Categories.html#index-get_002dunused_002dcategory'>get-unused-category</a>(table)</tt>	this function returns a category name a character which is not currently defined in table
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Categories.html#index-category_002dtable'>category-table</a>()</tt>	this function returns the current buffer’s category table
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Categories.html#index-category_002dtable_002dp'>category-table-p</a>(object)</tt>	this function returns t if object is a category table otherwise nil
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Categories.html#index-standard_002dcategory_002dtable'>standard-category-table</a>()</tt>	this function returns the standard category table
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Categories.html#index-copy_002dcategory_002dtable'>copy-category-table</a>(table)</tt>	this function constructs a copy of table and returns it
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Categories.html#index-set_002dcategory_002dtable'>set-category-table</a>(table)</tt>	this function makes table the category table for the current buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Categories.html#index-make_002dcategory_002dtable'>make-category-table</a>()</tt>	this creates and returns an empty category table
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Categories.html#index-make_002dcategory_002dset'>make-category-set</a>(categories)</tt>	this function returns a new category set—a bool-vector—whose initial contents are the categories listed in the string categories
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Categories.html#index-char_002dcategory_002dset'>char-category-set</a>(char)</tt>	this function returns the category set for character char in the current buffer’s category table
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Categories.html#index-category_002dset_002dmnemonics'>category-set-mnemonics</a>(category-set)</tt>	this function converts the category set category-set into a string containing the characters that designate the categories that are members of the set
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Categories.html#index-modify_002dcategory_002dentry'>modify-category-entry</a>(char,category,table,reset)</tt>	this function modifies the category set of char in category table table (which defaults to the current buffer’s category table)
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Categories.html#index-describe_002dcategories'>describe-categories</a>(buffer-or-name)</tt>	this function describes the category specifications in the current category table
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Changing-Files.html#index-add_002dname_002dto_002dfile'>add-name-to-file</a>(oldname,newname,ok-if-already-exists)</tt>	 this function gives the file named oldname the additional name newname
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Changing-Files.html#index-rename_002dfile'>rename-file</a>(filename,newname,ok-if-already-exists)</tt>	this command renames the file filename as newname
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Changing-Files.html#index-copy_002dfile'>copy-file</a>(oldname,newname,ok-if-exists,time,preserve-uid-gid,preserve-extended-attributes)</tt>	this command copies the file oldname to newname
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Changing-Files.html#index-make_002dsymbolic_002dlink'>make-symbolic-link</a>(filename,newname,ok-if-exists)</tt>	 this command makes a symbolic link to filename named newname
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Changing-Files.html#index-delete_002dfile'>delete-file</a>(filename,trash)</tt>	 this command deletes the file filename
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Changing-Files.html#index-set_002dfile_002dmodes'>set-file-modes</a>(filename,mode)</tt>	this function sets the file mode or permissions of filename to mode
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Changing-Files.html#index-set_002ddefault_002dfile_002dmodes'>set-default-file-modes</a>(mode)</tt>	 this function sets the default permissions for new files created by emacs and its subprocesses
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Changing-Files.html#index-default_002dfile_002dmodes'>default-file-modes</a>()</tt>	this function returns the default file permissions as an integer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Changing-Files.html#index-read_002dfile_002dmodes'>read-file-modes</a>(prompt,base-file)</tt>	this function reads a set of file mode bits from the minibuffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Changing-Files.html#index-file_002dmodes_002dsymbolic_002dto_002dnumber'>file-modes-symbolic-to-number</a>(modes,base-modes)</tt>	this function converts a symbolic file mode specification in modes into the equivalent integer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Changing-Files.html#index-set_002dfile_002dtimes'>set-file-times</a>(filename,time)</tt>	this function sets the access and modification times of filename to time
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Changing-Files.html#index-set_002dfile_002dextended_002dattributes'>set-file-extended-attributes</a>(filename,attribute-alist)</tt>	this function sets the emacs-recognized extended file attributes for filename
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Changing-Files.html#index-set_002dfile_002dselinux_002dcontext'>set-file-selinux-context</a>(filename,context)</tt>	this function sets the selinux security context for filename to context
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Changing-Files.html#index-set_002dfile_002dacl'>set-file-acl</a>(filename,acl)</tt>	this function sets the access control list for filename to acl
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Changing-Key-Bindings.html#index-define_002dkey'>define-key</a>(keymap,key,binding)</tt>	this function sets the binding for key in keymap
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Changing-Key-Bindings.html#index-substitute_002dkey_002ddefinition'>substitute-key-definition</a>(olddef,newdef,keymap,oldmap)</tt>	 this function replaces olddef with newdef for any keys in keymap that were bound to olddef
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Changing-Key-Bindings.html#index-suppress_002dkeymap'>suppress-keymap</a>(keymap,nodigits)</tt>	 this function changes the contents of the full keymap keymap by remapping self-insert-command to the command undefined see remapping commands 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Changing-Properties.html#index-put_002dtext_002dproperty'>put-text-property</a>(start,end,prop,value,object)</tt>	this function sets the prop property to value for the text between start and end in the string or buffer object
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Changing-Properties.html#index-add_002dtext_002dproperties'>add-text-properties</a>(start,end,props,object)</tt>	this function adds or overrides text properties for the text between start and end in the string or buffer object
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Changing-Properties.html#index-remove_002dtext_002dproperties'>remove-text-properties</a>(start,end,props,object)</tt>	this function deletes specified text properties from the text between start and end in the string or buffer object
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Changing-Properties.html#index-remove_002dlist_002dof_002dtext_002dproperties'>remove-list-of-text-properties</a>(start,end,list-of-properties,object)</tt>	like remove-text-properties except that list-of-properties is a list of property names only not an alternating list of property names and values
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Changing-Properties.html#index-set_002dtext_002dproperties'>set-text-properties</a>(start,end,props,object)</tt>	this function completely replaces the text property list for the text between start and end in the string or buffer object
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Changing-Properties.html#index-add_002dface_002dtext_002dproperty'>add-face-text-property</a>(start,end,face,appendp,object)</tt>	this function acts on the text between start and end adding the face face to the face text property
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Changing-Properties.html#index-propertize'>propertize</a>(string,properties)</tt>	this function returns a copy of string with the text properties properties added
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Char_002dTables.html#index-make_002dchar_002dtable'>make-char-table</a>(subtype,init)</tt>	return a newly-created char-table with subtype subtype a symbol 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Char_002dTables.html#index-char_002dtable_002dp'>char-table-p</a>(object)</tt>	this function returns t if object is a char-table and nil otherwise
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Char_002dTables.html#index-char_002dtable_002dsubtype'>char-table-subtype</a>(char-table)</tt>	this function returns the subtype symbol of char-table
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Char_002dTables.html#index-char_002dtable_002dparent'>char-table-parent</a>(char-table)</tt>	this function returns the parent of char-table
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Char_002dTables.html#index-set_002dchar_002dtable_002dparent'>set-char-table-parent</a>(char-table,new-parent)</tt>	this function sets the parent of char-table to new-parent
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Char_002dTables.html#index-char_002dtable_002dextra_002dslot'>char-table-extra-slot</a>(char-table,n)</tt>	this function returns the contents of extra slot n of char-table
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Char_002dTables.html#index-set_002dchar_002dtable_002dextra_002dslot'>set-char-table-extra-slot</a>(char-table,n,value)</tt>	this function stores value in extra slot n of char-table
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Char_002dTables.html#index-char_002dtable_002drange'>char-table-range</a>(char-table,range)</tt>	this returns the value specified in char-table for a range of characters range
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Char_002dTables.html#index-set_002dchar_002dtable_002drange'>set-char-table-range</a>(char-table,range,value)</tt>	this function sets the value in char-table for a range of characters range
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Char_002dTables.html#index-map_002dchar_002dtable'>map-char-table</a>(function,char-table)</tt>	this function calls its argument function for each element of char-table that has a non-nil value
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Character-Codes.html#index-characterp'>characterp</a>(charcode)</tt>	this returns t if charcode is a valid character and nil otherwise
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Character-Codes.html#index-max_002dchar'>max-char</a>()</tt>	this function returns the largest value that a valid character codepoint can have
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Character-Codes.html#index-get_002dbyte'>get-byte</a>(pos,string)</tt>	this function returns the byte at character position pos in the current buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Character-Motion.html#index-goto_002dchar'>goto-char</a>(position)</tt>	this function sets point in the current buffer to the value position
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Character-Motion.html#index-forward_002dchar'>forward-char</a>(count)</tt>	this function moves point count characters forward towards the end of the buffer or backward towards the beginning of the buffer if count is negative 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Character-Motion.html#index-backward_002dchar'>backward-char</a>(count)</tt>	this is just like forward-char except that it moves in the opposite direction
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Character-Properties.html#index-get_002dchar_002dcode_002dproperty'>get-char-code-property</a>(char,propname)</tt>	this function returns the value of char’s propname property
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Character-Properties.html#index-char_002dcode_002dproperty_002ddescription'>char-code-property-description</a>(prop,value)</tt>	this function returns the description string of property prop’s value or nil if value has no description
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Character-Properties.html#index-put_002dchar_002dcode_002dproperty'>put-char-code-property</a>(char,propname,value)</tt>	this function stores value as the value of the property propname for the character char
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Character-Sets.html#index-charsetp'>charsetp</a>(object)</tt>	returns t if object is a symbol that names a character set nil otherwise
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Character-Sets.html#index-charset_002dpriority_002dlist'>charset-priority-list</a>(highestp)</tt>	this function returns a list of all defined character sets ordered by their priority
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Character-Sets.html#index-set_002dcharset_002dpriority'>set-charset-priority</a>(charsets)</tt>	this function makes charsets the highest priority character sets
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Character-Sets.html#index-char_002dcharset'>char-charset</a>(character,restriction)</tt>	this function returns the name of the character set of highest priority that character belongs to
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Character-Sets.html#index-charset_002dplist'>charset-plist</a>(charset)</tt>	this function returns the property list of the character set charset
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Character-Sets.html#index-put_002dcharset_002dproperty'>put-charset-property</a>(charset,propname,value)</tt>	this function sets the propname property of charset to the given value
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Character-Sets.html#index-get_002dcharset_002dproperty'>get-charset-property</a>(charset,propname)</tt>	this function returns the value of charsets property propname
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Character-Sets.html#index-list_002dcharset_002dchars'>list-charset-chars</a>(charset)</tt>	this command displays a list of characters in the character set charset
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Character-Sets.html#index-decode_002dchar'>decode-char</a>(charset,code-point)</tt>	this function decodes a character that is assigned a code-point in charset to the corresponding emacs character and returns it
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Character-Sets.html#index-encode_002dchar'>encode-char</a>(char,charset)</tt>	this function returns the code point assigned to the character char in charset
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Character-Sets.html#index-map_002dcharset_002dchars'>map-charset-chars</a>(function,charset,arg,from-code,to-code)</tt>	call function for characters in charset
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Checksum_002fHash.html#index-secure_002dhash'>secure-hash</a>(algorithm,object,start,end,binary)</tt>	this function returns a hash for object
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Checksum_002fHash.html#index-md5'>md5</a>(object,start,end,coding-system,noerror)</tt>	this function returns an md5 hash
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Choosing-Window-Options.html#index-pop_002dup_002dwindows'>pop-up-windows</a>()</tt>	if the value of this variable is non-nil display-buffer is allowed to split an existing window to make a new window for displaying in
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Choosing-Window-Options.html#index-split_002dwindow_002dpreferred_002dfunction'>split-window-preferred-function</a>()</tt>	this variable specifies a function for splitting a window in order to make a new window for displaying a buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Choosing-Window-Options.html#index-split_002dwindow_002dsensibly'>split-window-sensibly</a>(window)</tt>	this function tries to split window and return the newly created window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Choosing-Window-Options.html#index-split_002dheight_002dthreshold'>split-height-threshold</a>()</tt>	this variable used by split-window-sensibly specifies whether to split the window placing the new window below
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Choosing-Window-Options.html#index-split_002dwidth_002dthreshold'>split-width-threshold</a>()</tt>	this variable used by split-window-sensibly specifies whether to split the window placing the new window to the right
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Choosing-Window-Options.html#index-pop_002dup_002dframes'>pop-up-frames</a>()</tt>	if the value of this variable is non-nil that means display-buffer may display buffers by making new frames
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Choosing-Window-Options.html#index-pop_002dup_002dframe_002dfunction'>pop-up-frame-function</a>()</tt>	this variable specifies a function for creating a new frame in order to make a new window for displaying a buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Choosing-Window-Options.html#index-pop_002dup_002dframe_002dalist'>pop-up-frame-alist</a>()</tt>	this variable holds an alist of frame parameters see frame parameters which is used by the default function in pop-up-frame-function to make a new frame
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Choosing-Window-Options.html#index-same_002dwindow_002dbuffer_002dnames'>same-window-buffer-names</a>()</tt>	a list of buffer names for buffers that should be displayed in the selected window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Choosing-Window-Options.html#index-same_002dwindow_002dregexps'>same-window-regexps</a>()</tt>	a list of regular expressions that specify buffers that should be displayed in the selected window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Choosing-Window-Options.html#index-same_002dwindow_002dp'>same-window-p</a>(buffer-name)</tt>	this function returns t if displaying a buffer named buffer-name with display-buffer would put it in the selected window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Choosing-Window.html#index-display_002dbuffer'>display-buffer</a>(buffer-or-name,action,frame)</tt>	this command makes buffer-or-name appear in some window without selecting the window or making the buffer current
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Choosing-Window.html#index-display_002dbuffer_002dalist'>display-buffer-alist</a>()</tt>	the value of this option is an alist mapping conditions to display actions
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Choosing-Window.html#index-display_002dbuffer_002dbase_002daction'>display-buffer-base-action</a>()</tt>	the value of this option should be a display action
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Classifying-Events.html#index-event_002dmodifiers'>event-modifiers</a>(event)</tt>	this function returns a list of the modifiers that event has
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Classifying-Events.html#index-event_002dbasic_002dtype'>event-basic-type</a>(event)</tt>	this function returns the key or mouse button that event describes with all modifiers removed
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Classifying-Events.html#index-mouse_002dmovement_002dp'>mouse-movement-p</a>(object)</tt>	this function returns non-nil if object is a mouse movement event
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Classifying-Events.html#index-event_002dconvert_002dlist'>event-convert-list</a>(list)</tt>	this function converts a list of modifier names and a basic event type to an event type which specifies all of them
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Clickable-Text.html#index-mouse_002don_002dlink_002dp'>mouse-on-link-p</a>(pos)</tt>	this function returns non-nil if position pos in the current buffer is on a link
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Coding-System-Basics.html#index-coding_002dsystem_002dget'>coding-system-get</a>(coding-system,property)</tt>	this function returns the specified property of the coding system coding-system
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Coding-System-Basics.html#index-coding_002dsystem_002daliases'>coding-system-aliases</a>(coding-system)</tt>	this function returns the list of aliases of coding-system
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Color-Names.html#index-color_002ddefined_002dp'>color-defined-p</a>(color,frame)</tt>	this function reports whether a color name is meaningful
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Color-Names.html#index-defined_002dcolors'>defined-colors</a>(frame)</tt>	this function returns a list of the color names that are defined and supported on frame frame default the selected frame 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Color-Names.html#index-color_002dsupported_002dp'>color-supported-p</a>(color,frame,background-p)</tt>	this returns t if frame can really display the color color or at least something close to it 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Color-Names.html#index-color_002dgray_002dp'>color-gray-p</a>(color,frame)</tt>	this returns t if color is a shade of gray as defined on frame’s display
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Color-Names.html#index-color_002dvalues'>color-values</a>(color,frame)</tt>	 this function returns a value that describes what color should ideally look like on frame
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Columns.html#index-current_002dcolumn'>current-column</a>()</tt>	this function returns the horizontal position of point measured in columns counting from 0 at the left margin
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Columns.html#index-move_002dto_002dcolumn'>move-to-column</a>(column,force)</tt>	this function moves point to column in the current line
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Combining-Conditions.html#index-not'>not</a>(condition)</tt>	this function tests for the falsehood of condition
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Command-Loop-Info.html#index-this_002dcommand_002dkeys'>this-command-keys</a>()</tt>	this function returns a string or vector containing the key sequence that invoked the present command plus any previous commands that generated the prefix argument for this command
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Command-Loop-Info.html#index-this_002dcommand_002dkeys_002dvector'>this-command-keys-vector</a>()</tt>	like this-command-keys except that it always returns the events in a vector so you don’t need to deal with the complexities of storing input events in a string see strings of events 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Command-Loop-Info.html#index-clear_002dthis_002dcommand_002dkeys'>clear-this-command-keys</a>(keep-record)</tt>	this function empties out the table of events for this-command-keys to return
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Command_002dLine-Arguments.html#index-command_002dline'>command-line</a>()</tt>	this function parses the command line that emacs was called with processes it and amongst other things loads the user’s init file and displays the startup messages
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Commands-for-Insertion.html#index-insert_002dbuffer'>insert-buffer</a>(from-buffer-or-name)</tt>	this command inserts the entire accessible contents of from-buffer-or-name which must exist into the current buffer after point
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Commands-for-Insertion.html#index-self_002dinsert_002dcommand'>self-insert-command</a>(count)</tt>	 this command inserts the last character typed it does so count times before point and returns nil
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Commands-for-Insertion.html#index-newline-1'>newline</a>(number-of-newlines)</tt>	this command inserts newlines into the current buffer before point
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Comparing-Text.html#index-compare_002dbuffer_002dsubstrings'>compare-buffer-substrings</a>(buffer1,start1,end1,buffer2,start2,end2)</tt>	this function lets you compare two substrings of the same buffer or two different buffers
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Comparison-of-Numbers.html#index-_003d'>=</a>(number-or-marker,number-or-markers)</tt>	this function tests whether all its arguments are numerically equal and returns t if so nil otherwise
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Comparison-of-Numbers.html#index-eql'>eql</a>(value1,value2)</tt>	this function acts like eq except when both arguments are numbers
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Comparison-of-Numbers.html#index-_002f_003d'>/=</a>(number-or-marker1,number-or-marker2)</tt>	this function tests whether its arguments are numerically equal and returns t if they are not and nil if they are
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Comparison-of-Numbers.html#index-_003c'><</a>(number-or-marker,number-or-markers)</tt>	this function tests whether each argument is strictly less than the following argument
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Comparison-of-Numbers.html#index-_003c_003d'><=</a>(number-or-marker,number-or-markers)</tt>	this function tests whether each argument is less than or equal to the following argument
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Comparison-of-Numbers.html#index-_003e'>></a>(number-or-marker,number-or-markers)</tt>	this function tests whether each argument is strictly greater than the following argument
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Comparison-of-Numbers.html#index-_003e_003d'>>=</a>(number-or-marker,number-or-markers)</tt>	this function tests whether each argument is greater than or equal to the following argument
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Comparison-of-Numbers.html#index-max'>max</a>(number-or-marker,numbers-or-markers)</tt>	this function returns the largest of its arguments
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Comparison-of-Numbers.html#index-min'>min</a>(number-or-marker,numbers-or-markers)</tt>	this function returns the smallest of its arguments
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Comparison-of-Numbers.html#index-abs'>abs</a>(number)</tt>	this function returns the absolute value of number
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Compilation-Functions.html#index-byte_002dcompile'>byte-compile</a>(symbol)</tt>	this function byte-compiles the function definition of symbol replacing the previous definition with the compiled one
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Compilation-Functions.html#index-compile_002ddefun'>compile-defun</a>(arg)</tt>	this command reads the defun containing point compiles it and evaluates the result
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Compilation-Functions.html#index-byte_002dcompile_002dfile'>byte-compile-file</a>(filename,load)</tt>	this function compiles a file of lisp code named filename into a file of byte-code
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Compilation-Functions.html#index-byte_002drecompile_002ddirectory'>byte-recompile-directory</a>(directory,flag,force)</tt>	 this command recompiles every ‘
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Compilation-Functions.html#index-batch_002dbyte_002dcompile'>batch-byte-compile</a>(noforce)</tt>	this function runs byte-compile-file on files specified on the command line
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Completion-Commands.html#index-minibuffer_002dcomplete_002dword'>minibuffer-complete-word</a>()</tt>	this function completes the minibuffer contents by at most a single word
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Completion-Commands.html#index-minibuffer_002dcomplete'>minibuffer-complete</a>()</tt>	this function completes the minibuffer contents as far as possible
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Completion-Commands.html#index-minibuffer_002dcomplete_002dand_002dexit'>minibuffer-complete-and-exit</a>()</tt>	this function completes the minibuffer contents and exits if confirmation is not required i
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Completion-Commands.html#index-minibuffer_002dcompletion_002dhelp'>minibuffer-completion-help</a>()</tt>	this function creates a list of the possible completions of the current minibuffer contents
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Completion-Commands.html#index-display_002dcompletion_002dlist'>display-completion-list</a>(completions)</tt>	this function displays completions to the stream in standard-output usually a buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Completion-Commands.html#index-completion_002dauto_002dhelp'>completion-auto-help</a>()</tt>	if this variable is non-nil the completion commands automatically display a list of possible completions whenever nothing can be completed because the next character is not uniquely determined
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Completion-in-Buffers.html#index-completion_002din_002dregion'>completion-in-region</a>(start,end,collection,predicate)</tt>	this function completes the text in the current buffer between the positions start and end using collection
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Completion-Variables.html#index-completion_002dstyles'>completion-styles</a>()</tt>	the value of this variable is a list of completion style symbols to use for performing completion
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Completion-Variables.html#index-completion_002dcategory_002doverrides'>completion-category-overrides</a>()</tt>	this variable specifies special completion styles and other completion behaviors to use when completing certain types of text
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Constant-Variables.html#index-keywordp'>keywordp</a>(object)</tt>	function returns t if object is a symbol whose name starts with ‘:’, interned in the standard obarray and returns nil otherwise
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Contents-of-Directories.html#index-directory_002dfiles'>directory-files</a>(directory,full-name,match-regexp,nosort)</tt>	this function returns a list of the names of the files in the directory directory
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Contents-of-Directories.html#index-directory_002dfiles_002dand_002dattributes'>directory-files-and-attributes</a>(directory,full-name,match-regexp,nosort,id-format)</tt>	this is similar to directory-files in deciding which files to report on and how to report their names
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Contents-of-Directories.html#index-file_002dexpand_002dwildcards'>file-expand-wildcards</a>(pattern,full)</tt>	this function expands the wildcard pattern pattern returning a list of file names that match it
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Contents-of-Directories.html#index-insert_002ddirectory'>insert-directory</a>(file,switches,wildcard,full-directory-p)</tt>	this function inserts in the current buffer a directory listing for directory file formatted with ls according to switches
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Control-Parsing.html#index-parse_002dsexp_002dignore_002dcomments'>parse-sexp-ignore-comments</a>()</tt>	 if the value is non-nil then comments are treated as whitespace by the functions in this section and by forward-sexp scan-lists and scan-sexps
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Controlling-Active-Maps.html#index-current_002dglobal_002dmap'>current-global-map</a>()</tt>	this function returns the current global keymap
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Controlling-Active-Maps.html#index-current_002dlocal_002dmap'>current-local-map</a>()</tt>	this function returns the current buffer’s local keymap or nil if it has none
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Controlling-Active-Maps.html#index-current_002dminor_002dmode_002dmaps'>current-minor-mode-maps</a>()</tt>	this function returns a list of the keymaps of currently enabled minor modes
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Controlling-Active-Maps.html#index-use_002dglobal_002dmap'>use-global-map</a>(keymap)</tt>	this function makes keymap the new current global keymap
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Controlling-Active-Maps.html#index-use_002dlocal_002dmap'>use-local-map</a>(keymap)</tt>	this function makes keymap the new local keymap of the current buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Controlling-Active-Maps.html#index-set_002dtransient_002dmap'>set-transient-map</a>(keymap,keep)</tt>	this function adds keymap as a transient keymap which takes precedence over other keymaps for one or more subsequent keys
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Converting-Representations.html#index-string_002dto_002dmultibyte'>string-to-multibyte</a>(string)</tt>	this function returns a multibyte string containing the same sequence of characters as string
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Converting-Representations.html#index-string_002dto_002dunibyte'>string-to-unibyte</a>(string)</tt>	this function returns a unibyte string containing the same sequence of characters as string
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Converting-Representations.html#index-byte_002dto_002dstring'>byte-to-string</a>(byte)</tt>	 this function returns a unibyte string containing a single byte of character data character
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Converting-Representations.html#index-multibyte_002dchar_002dto_002dunibyte'>multibyte-char-to-unibyte</a>(char)</tt>	this converts the multibyte character char to a unibyte character and returns that character
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Converting-Representations.html#index-unibyte_002dchar_002dto_002dmultibyte'>unibyte-char-to-multibyte</a>(char)</tt>	this convert the unibyte character char to a multibyte character assuming char is either ascii or raw 8-bit byte
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Coordinates-and-Windows.html#index-window_002dedges'>window-edges</a>(window)</tt>	this function returns a list of the edge coordinates of window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Coordinates-and-Windows.html#index-window_002dinside_002dedges'>window-inside-edges</a>(window)</tt>	this function is similar to window-edges but the returned edge values are for the text area of the window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Coordinates-and-Windows.html#index-window_002dtop_002dline'>window-top-line</a>(window)</tt>	this function returns the y coordinate of the topmost row of window equivalent to the top entry in the list returned by window-edges
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Coordinates-and-Windows.html#index-window_002dleft_002dcolumn'>window-left-column</a>(window)</tt>	this function returns the x coordinate of the leftmost column of window equivalent to the left entry in the list returned by window-edges
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Coordinates-and-Windows.html#index-window_002dat'>window-at</a>(x,y,frame)</tt>	this function returns the live window at the frame-relative coordinates x and y on frame frame
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Coordinates-and-Windows.html#index-coordinates_002din_002dwindow_002dp'>coordinates-in-window-p</a>(coordinates,window)</tt>	this function checks whether a window window occupies the frame-relative coordinates coordinates and if so which part of the window that is
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Coordinates-and-Windows.html#index-window_002dpixel_002dedges'>window-pixel-edges</a>(window)</tt>	this function returns a list of pixel coordinates for the edges of window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Coordinates-and-Windows.html#index-window_002dinside_002dpixel_002dedges'>window-inside-pixel-edges</a>(window)</tt>	this function is like window-pixel-edges except that it returns the pixel coordinates for the edges of the window’s text area rather than the pixel coordinates for the edges of the window itself
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Coordinates-and-Windows.html#index-window_002dabsolute_002dpixel_002dedges'>window-absolute-pixel-edges</a>(window)</tt>	this function is like window-pixel-edges except that it returns the edge pixel coordinates relative to the top left corner of the display screen
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Coordinates-and-Windows.html#index-window_002dinside_002dabsolute_002dpixel_002dedges'>window-inside-absolute-pixel-edges</a>(window)</tt>	this function is like window-inside-pixel-edges except that it returns the edge pixel coordinates relative to the top left corner of the display screen
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Coordinates-and-Windows.html#index-window_002dpixel_002dleft'>window-pixel-left</a>(window)</tt>	this function returns the left pixel edge of window window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Coordinates-and-Windows.html#index-window_002dpixel_002dtop'>window-pixel-top</a>(window)</tt>	this function returns the top pixel edge of window window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Core-Advising-Primitives.html#index-add_002dfunction'>add-function</a>(where,place,function,props)</tt>	this macro is the handy way to add the advice function to the function stored in place see generalized variables 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Core-Advising-Primitives.html#index-remove_002dfunction'>remove-function</a>(place,function)</tt>	this macro removes function from the function stored in place
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Core-Advising-Primitives.html#index-advice_002dfunction_002dmember_002dp'>advice-function-member-p</a>(advice,function-def)</tt>	return non-nil if advice is already in function-def
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Core-Advising-Primitives.html#index-advice_002dfunction_002dmapc'>advice-function-mapc</a>(f,function-def)</tt>	call the function f for every advice that was added to function-def
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Core-Advising-Primitives.html#index-advice_002deval_002dinteractive_002dspec'>advice-eval-interactive-spec</a>(spec)</tt>	evaluate the interactive spec just like an interactive call to a function with such a spec would and then return the corresponding list of arguments that was built
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Coverage-Testing.html#index-edebug_002ddisplay_002dfreq_002dcount'>edebug-display-freq-count</a>()</tt>	this command displays the frequency count data for each line of the current definition
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Create_002fDelete-Dirs.html#index-make_002ddirectory'>make-directory</a>(dirname,parents)</tt>	this command creates a directory named dirname
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Create_002fDelete-Dirs.html#index-copy_002ddirectory'>copy-directory</a>(dirname,newname,keep-time,parents,copy-contents)</tt>	this command copies the directory named dirname to newname
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Create_002fDelete-Dirs.html#index-delete_002ddirectory'>delete-directory</a>(dirname,recursive,trash)</tt>	this command deletes the directory named dirname
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Buffer_002dLocal.html#index-make_002dlocal_002dvariable'>make-local-variable</a>(variable)</tt>	this function creates a buffer-local binding in the current buffer for variable a symbol 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Buffer_002dLocal.html#index-setq_002dlocal'>setq-local</a>(variable,value)</tt>	this macro creates a buffer-local binding in the current buffer for variable and gives it the buffer-local value value
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Buffer_002dLocal.html#index-make_002dvariable_002dbuffer_002dlocal'>make-variable-buffer-local</a>(variable)</tt>	this function marks variable a symbol automatically buffer-local so that any subsequent attempt to set it will make it local to the current buffer at the time
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Buffer_002dLocal.html#index-defvar_002dlocal'>defvar-local</a>(variable,value,docstring)</tt>	this macro defines variable as a variable with initial value value and docstring and marks it as automatically buffer-local
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Buffer_002dLocal.html#index-local_002dvariable_002dp'>local-variable-p</a>(variable,buffer)</tt>	this returns t if variable is buffer-local in buffer buffer which defaults to the current buffer ; otherwise nil
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Buffer_002dLocal.html#index-local_002dvariable_002dif_002dset_002dp'>local-variable-if-set-p</a>(variable,buffer)</tt>	this returns t if variable either has a buffer-local value in buffer buffer or is automatically buffer-local
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Buffer_002dLocal.html#index-buffer_002dlocal_002dvalue'>buffer-local-value</a>(variable,buffer)</tt>	this function returns the buffer-local binding of variable a symbol in buffer buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Buffer_002dLocal.html#index-buffer_002dlocal_002dvariables'>buffer-local-variables</a>(buffer)</tt>	this function returns a list describing the buffer-local variables in buffer buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Buffer_002dLocal.html#index-kill_002dlocal_002dvariable'>kill-local-variable</a>(variable)</tt>	this function deletes the buffer-local binding if any for variable a symbol in the current buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Buffer_002dLocal.html#index-kill_002dall_002dlocal_002dvariables'>kill-all-local-variables</a>()</tt>	this function eliminates all the buffer-local variable bindings of the current buffer except for variables marked as “permanent” and local hook functions that have a non-nil permanent-local-hook property see setting hooks 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Buffers.html#index-get_002dbuffer_002dcreate'>get-buffer-create</a>(buffer-or-name)</tt>	this function returns a buffer named buffer-or-name
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Buffers.html#index-generate_002dnew_002dbuffer'>generate-new-buffer</a>(name)</tt>	this function returns a newly created empty buffer but does not make it current
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Frames.html#index-make_002dframe'>make-frame</a>(alist)</tt>	this function creates and returns a new frame displaying the current buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Hash.html#index-make_002dhash_002dtable'>make-hash-table</a>(keyword-args)</tt>	this function creates a new hash table according to the specified arguments
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Hash.html#index-makehash'>makehash</a>(test)</tt>	this is equivalent to make-hash-table but with a different style argument list
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Keymaps.html#index-make_002dsparse_002dkeymap'>make-sparse-keymap</a>(prompt)</tt>	this function creates and returns a new sparse keymap with no entries
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Keymaps.html#index-make_002dkeymap'>make-keymap</a>(prompt)</tt>	this function creates and returns a new full keymap
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Keymaps.html#index-copy_002dkeymap'>copy-keymap</a>(keymap)</tt>	this function returns a copy of keymap
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Markers.html#index-make_002dmarker'>make-marker</a>()</tt>	this function returns a newly created marker that does not point anywhere
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Markers.html#index-point_002dmarker'>point-marker</a>()</tt>	this function returns a new marker that points to the present position of point in the current buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Markers.html#index-point_002dmin_002dmarker'>point-min-marker</a>()</tt>	this function returns a new marker that points to the beginning of the accessible portion of the buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Markers.html#index-point_002dmax_002dmarker'>point-max-marker</a>()</tt>	this function returns a new marker that points to the end of the accessible portion of the buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Markers.html#index-copy_002dmarker'>copy-marker</a>(marker-or-integer,insertion-type)</tt>	if passed a marker as its argument copy-marker returns a new marker that points to the same place and the same buffer as does marker-or-integer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Strings.html#index-make_002dstring'>make-string</a>(count,character)</tt>	this function returns a string made up of count repetitions of character
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Strings.html#index-string'>string</a>(characters)</tt>	this returns a string containing the characters characters
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Strings.html#index-substring'>substring</a>(string,start,end)</tt>	this function returns a new string which consists of those characters from string in the range from and including the character at the index start up to but excluding the character at the index end
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Strings.html#index-substring_002dno_002dproperties'>substring-no-properties</a>(string,start,end)</tt>	this works like substring but discards all text properties from the value
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Strings.html#index-concat'>concat</a>(sequences)</tt>	 this function returns a new string consisting of the characters in the arguments passed to it along with their text properties if any 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Strings.html#index-split_002dstring'>split-string</a>(string,separators,omit-nulls,trim)</tt>	this function splits string into substrings based on the regular expression separators see regular expressions 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Symbols.html#index-symbol_002dname'>symbol-name</a>(symbol)</tt>	this function returns the string that is symbol’s name
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Symbols.html#index-make_002dsymbol'>make-symbol</a>(name)</tt>	this function returns a newly-allocated uninterned symbol whose name is name which must be a string 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Symbols.html#index-intern'>intern</a>(name,obarray)</tt>	this function returns the interned symbol whose name is name
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Symbols.html#index-intern_002dsoft'>intern-soft</a>(name,obarray)</tt>	this function returns the symbol in obarray whose name is name or nil if obarray has no symbol with that name
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Symbols.html#index-mapatoms'>mapatoms</a>(function,obarray)</tt>	this function calls function once with each symbol in the obarray obarray
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Creating-Symbols.html#index-unintern'>unintern</a>(symbol,obarray)</tt>	this function deletes symbol from the obarray obarray
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Current-Buffer.html#index-current_002dbuffer'>current-buffer</a>()</tt>	this function returns the current buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Current-Buffer.html#index-set_002dbuffer'>set-buffer</a>(buffer-or-name)</tt>	this function makes buffer-or-name the current buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Cursor-Parameters.html#index-cursor_002din_002dnon_002dselected_002dwindows'>cursor-in-non-selected-windows</a>()</tt>	this buffer-local variable controls how the cursor looks in a window that is not selected
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Cursor-Parameters.html#index-blink_002dcursor_002dalist'>blink-cursor-alist</a>()</tt>	this variable specifies how to blink the cursor
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Custom-Themes.html#index-deftheme'>deftheme</a>(theme,doc)</tt>	this macro declares theme a symbol as the name of a custom theme
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Custom-Themes.html#index-provide_002dtheme'>provide-theme</a>(theme)</tt>	this macro declares that the theme named theme has been fully specified
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Custom-Themes.html#index-custom_002dtheme_002dset_002dvariables'>custom-theme-set-variables</a>(theme,args)</tt>	this function specifies the custom theme theme’s variable settings
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Custom-Themes.html#index-custom_002dtheme_002dset_002dfaces'>custom-theme-set-faces</a>(theme,args)</tt>	this function specifies the custom theme theme’s face settings
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Custom-Themes.html#index-custom_002dtheme_002dp'>custom-theme-p</a>(theme)</tt>	this function return a non-nil value if theme a symbol is the name of a custom theme 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Custom-Themes.html#index-load_002dtheme'>load-theme</a>(theme,no-confirm,no-enable)</tt>	this function loads the custom theme named theme from its source file looking for the source file in the directories specified by the variable custom-theme-load-path
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Custom-Themes.html#index-enable_002dtheme'>enable-theme</a>(theme)</tt>	this function enables the custom theme named theme
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Custom-Themes.html#index-disable_002dtheme'>disable-theme</a>(theme)</tt>	this function disables the custom theme named theme
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Customizing-Bitmaps.html#index-define_002dfringe_002dbitmap'>define-fringe-bitmap</a>(bitmap,bits,height,width,align)</tt>	this function defines the symbol bitmap as a new fringe bitmap or replaces an existing bitmap with that name
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Customizing-Bitmaps.html#index-destroy_002dfringe_002dbitmap'>destroy-fringe-bitmap</a>(bitmap)</tt>	this function destroy the fringe bitmap identified by bitmap
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Customizing-Bitmaps.html#index-set_002dfringe_002dbitmap_002dface'>set-fringe-bitmap-face</a>(bitmap,face)</tt>	this sets the face for the fringe bitmap bitmap to face
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Customizing-Keywords.html#index-font_002dlock_002dadd_002dkeywords'>font-lock-add-keywords</a>(mode,keywords,how)</tt>	this function adds highlighting keywords for the current buffer or for major mode mode
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Customizing-Keywords.html#index-font_002dlock_002dremove_002dkeywords'>font-lock-remove-keywords</a>(mode,keywords)</tt>	this function removes keywords from font-lock-keywords for the current buffer or for major mode mode
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Cyclic-Window-Ordering.html#index-next_002dwindow'>next-window</a>(window,minibuf,all-frames)</tt>	 this function returns a live window the one following window in the cyclic ordering of windows
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Cyclic-Window-Ordering.html#index-previous_002dwindow'>previous-window</a>(window,minibuf,all-frames)</tt>	this function returns a live window the one preceding window in the cyclic ordering of windows
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Cyclic-Window-Ordering.html#index-other_002dwindow'>other-window</a>(count,all-frames)</tt>	this function selects a live window one count places from the selected window in the cyclic ordering of windows
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Cyclic-Window-Ordering.html#index-walk_002dwindows'>walk-windows</a>(fun,minibuf,all-frames)</tt>	this function calls the function fun once for each live window with the window as the argument
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Cyclic-Window-Ordering.html#index-one_002dwindow_002dp'>one-window-p</a>(no-mini,all-frames)</tt>	this function returns t if the selected window is the only live window and nil otherwise
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Cyclic-Window-Ordering.html#index-get_002dlru_002dwindow'>get-lru-window</a>(all-frames,dedicated,not-selected)</tt>	this function returns a live window which is heuristically the “least recently used” window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Cyclic-Window-Ordering.html#index-get_002dlargest_002dwindow'>get-largest-window</a>(all-frames,dedicated,not-selected)</tt>	this function returns the window with the largest area height times width 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Cyclic-Window-Ordering.html#index-get_002dwindow_002dwith_002dpredicate'>get-window-with-predicate</a>(predicate,minibuf,all-frames,default)</tt>	this function calls the function predicate for each of the windows in the cyclic order of windows in turn passing it the window as an argument
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Datagrams.html#index-process_002ddatagram_002daddress'>process-datagram-address</a>(process)</tt>	if process is a datagram connection or server this function returns its remote peer address
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Datagrams.html#index-set_002dprocess_002ddatagram_002daddress'>set-process-datagram-address</a>(process,address)</tt>	if process is a datagram connection or server this function sets its remote peer address to address
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Declaring-Functions.html#index-declare_002dfunction-1'>declare-function</a>(function,file,arglist,fileonly)</tt>	tell the byte compiler to assume that function is defined with arguments arglist and that the definition should come from the file file
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Decompression.html#index-zlib_002davailable_002dp'>zlib-available-p</a>()</tt>	this function returns non-nil if built-in zlib decompression is available
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Decompression.html#index-zlib_002ddecompress_002dregion'>zlib-decompress-region</a>(start,end)</tt>	this function decompresses the region between start and end using built-in zlib decompression
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Dedicated-Windows.html#index-window_002ddedicated_002dp'>window-dedicated-p</a>(window)</tt>	this function returns non-nil if window is dedicated to its buffer and nil otherwise
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Dedicated-Windows.html#index-set_002dwindow_002ddedicated_002dp'>set-window-dedicated-p</a>(window,flag)</tt>	this function marks window as dedicated to its buffer if flag is non-nil and non-dedicated otherwise
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Default-Coding-Systems.html#index-auto_002dcoding_002dregexp_002dalist'>auto-coding-regexp-alist</a>()</tt>	this variable is an alist of text patterns and corresponding coding systems
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Default-Coding-Systems.html#index-file_002dcoding_002dsystem_002dalist'>file-coding-system-alist</a>()</tt>	this variable is an alist that specifies the coding systems to use for reading and writing particular files
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Default-Coding-Systems.html#index-auto_002dcoding_002dalist'>auto-coding-alist</a>()</tt>	this variable is an alist that specifies the coding systems to use for reading and writing particular files
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Default-Coding-Systems.html#index-auto_002dcoding_002dfunctions'>auto-coding-functions</a>()</tt>	this variable holds a list of functions that try to determine a coding system for a file based on its undecoded contents
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Default-Coding-Systems.html#index-find_002dauto_002dcoding'>find-auto-coding</a>(filename,size)</tt>	this function tries to determine a suitable coding system for filename
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Default-Coding-Systems.html#index-set_002dauto_002dcoding'>set-auto-coding</a>(filename,size)</tt>	this function returns a suitable coding system for file filename
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Default-Coding-Systems.html#index-find_002doperation_002dcoding_002dsystem'>find-operation-coding-system</a>(operation,arguments)</tt>	this function returns the coding system to use by default for performing operation with arguments
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Default-Value.html#index-default_002dvalue'>default-value</a>(symbol)</tt>	this function returns symbol’s default value
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Default-Value.html#index-default_002dboundp'>default-boundp</a>(symbol)</tt>	the function default-boundp tells you whether symbol’s default value is nonvoid
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Default-Value.html#index-set_002ddefault'>set-default</a>(symbol,value)</tt>	this function is like setq-default except that symbol is an ordinary evaluated argument
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Defining-Abbrevs.html#index-define_002dabbrev'>define-abbrev</a>(abbrev-table,name,expansion,hook,props)</tt>	this function defines an abbrev named name in abbrev-table to expand to expansion and call hook with properties props see abbrev properties 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Defining-Abbrevs.html#index-only_002dglobal_002dabbrevs'>only-global-abbrevs</a>()</tt>	if this variable is non-nil it means that the user plans to use global abbrevs only
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Defining-Faces.html#index-face_002dspec_002dset'>face-spec-set</a>(face,spec,spec-type)</tt>	this function applies spec as a face spec for face
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Defining-Functions.html#index-defalias'>defalias</a>(name,definition,doc)</tt>	this function defines the symbol name as a function with definition definition which can be any valid lisp function 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Defining-Hash.html#index-define_002dhash_002dtable_002dtest'>define-hash-table-test</a>(name,test-fn,hash-fn)</tt>	this function defines a new hash table test named name
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Defining-Hash.html#index-sxhash'>sxhash</a>(obj)</tt>	this function returns a hash code for lisp object obj
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Defining-Images.html#index-create_002dimage'>create-image</a>(file-or-data,type,data-p,props)</tt>	this function creates and returns an image descriptor which uses the data in file-or-data
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Defining-Images.html#index-defimage'>defimage</a>(symbol,specs,doc)</tt>	this macro defines symbol as an image name
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Defining-Images.html#index-find_002dimage'>find-image</a>(specs)</tt>	this function provides a convenient way to find an image satisfying one of a list of image specifications specs
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Defining-Images.html#index-image_002dload_002dpath_002dfor_002dlibrary'>image-load-path-for-library</a>(library,image,path,no-error)</tt>	this function returns a suitable search path for images used by the lisp package library
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Defining-Menus.html#index-keymap_002dprompt'>keymap-prompt</a>(keymap)</tt>	this function returns the overall prompt string of keymap or nil if it has none
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Defining-Variables.html#index-defvar'>defvar</a>(symbol,value,doc-string)</tt>	this special form defines symbol as a variable
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Defining-Variables.html#index-defconst'>defconst</a>(symbol,value,doc-string)</tt>	this special form defines symbol as a value and initializes it
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Deleting-Frames.html#index-delete_002dframe'>delete-frame</a>(frame,force)</tt>	 this function deletes the frame frame
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Deleting-Frames.html#index-frame_002dlive_002dp'>frame-live-p</a>(frame)</tt>	the function frame-live-p returns non-nil if the frame frame has not been deleted
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Deleting-Processes.html#index-delete_002dexited_002dprocesses'>delete-exited-processes</a>()</tt>	this variable controls automatic deletion of processes that have terminated due to calling exit or to a signal 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Deleting-Processes.html#index-delete_002dprocess'>delete-process</a>(process)</tt>	this function deletes a process killing it with a sigkill signal
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Deleting-Windows.html#index-delete_002dwindow'>delete-window</a>(window)</tt>	this function removes window from display and returns nil
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Deleting-Windows.html#index-delete_002dother_002dwindows'>delete-other-windows</a>(window)</tt>	this function makes window fill its frame by deleting other windows as necessary
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Deleting-Windows.html#index-delete_002dwindows_002don'>delete-windows-on</a>(buffer-or-name,frame)</tt>	this function deletes all windows showing buffer-or-name by calling delete-window on those windows
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Deletion.html#index-erase_002dbuffer'>erase-buffer</a>()</tt>	this function deletes the entire text of the current buffer not just the accessible portion leaving it empty
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Deletion.html#index-delete_002dregion'>delete-region</a>(start,end)</tt>	this command deletes the text between positions start and end in the current buffer and returns nil
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Deletion.html#index-delete_002dand_002dextract_002dregion'>delete-and-extract-region</a>(start,end)</tt>	this function deletes the text between positions start and end in the current buffer and returns a string containing the text just deleted
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Deletion.html#index-delete_002dchar'>delete-char</a>(count,killp)</tt>	this command deletes count characters directly after point or before point if count is negative
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Deletion.html#index-delete_002dbackward_002dchar'>delete-backward-char</a>(count,killp)</tt>	 this command deletes count characters directly before point or after point if count is negative
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Deletion.html#index-backward_002ddelete_002dchar_002duntabify'>backward-delete-char-untabify</a>(count,killp)</tt>	 this command deletes count characters backward changing tabs into spaces
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Deletion.html#index-backward_002ddelete_002dchar_002duntabify_002dmethod'>backward-delete-char-untabify-method</a>()</tt>	this option specifies how backward-delete-char-untabify should deal with whitespace
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Derived-Modes.html#index-derived_002dmode_002dp'>derived-mode-p</a>(modes)</tt>	this function returns non-nil if the current major mode is derived from any of the major modes given by the symbols modes
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Describing-Characters.html#index-key_002ddescription'>key-description</a>(sequence,prefix)</tt>	 this function returns a string containing the emacs standard notation for the input events in sequence
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Describing-Characters.html#index-single_002dkey_002ddescription'>single-key-description</a>(event,no-angles)</tt>	 this function returns a string describing event in the standard emacs notation for keyboard input
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Describing-Characters.html#index-text_002dchar_002ddescription'>text-char-description</a>(character)</tt>	this function returns a string describing character in the standard emacs notation for characters that appear in text—like single-key-description except that control characters are represented with a leading caret which is how control characters in emacs buffers are usually displayed 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Describing-Characters.html#index-read_002dkbd_002dmacro'>read-kbd-macro</a>(string,need-vector)</tt>	this function is used mainly for operating on keyboard macros but it can also be used as a rough inverse for key-description
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Desktop-Notifications.html#index-notifications_002dnotify'>notifications-notify</a>(params)</tt>	this function sends a notification to the desktop via d-bus consisting of the parameters specified by the params arguments
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Desktop-Notifications.html#index-notifications_002dclose_002dnotification'>notifications-close-notification</a>(id,bus)</tt>	this function closes a notification with identifier id
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Desktop-Notifications.html#index-notifications_002dget_002dcapabilities'>notifications-get-capabilities</a>(bus)</tt>	returns the capabilities of the notification server a list of symbols
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Desktop-Notifications.html#index-notifications_002dget_002dserver_002dinformation'>notifications-get-server-information</a>(bus)</tt>	return information on the notification server a list of strings
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Dialog-Boxes.html#index-x_002dpopup_002ddialog'>x-popup-dialog</a>(position,contents,header)</tt>	this function displays a pop-up dialog box and returns an indication of what selection the user makes
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Directory-Local-Variables.html#index-hack_002ddir_002dlocal_002dvariables'>hack-dir-local-variables</a>()</tt>	this function reads the 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Directory-Local-Variables.html#index-hack_002ddir_002dlocal_002dvariables_002dnon_002dfile_002dbuffer'>hack-dir-local-variables-non-file-buffer</a>()</tt>	this function looks for directory-local variables and immediately applies them in the current buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Directory-Local-Variables.html#index-dir_002dlocals_002dset_002dclass_002dvariables'>dir-locals-set-class-variables</a>(class,variables)</tt>	this function defines a set of variable settings for the named class which is a symbol
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Directory-Local-Variables.html#index-dir_002dlocals_002dset_002ddirectory_002dclass'>dir-locals-set-directory-class</a>(directory,class,mtime)</tt>	this function assigns class to all the files in directory and its subdirectories
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Directory-Names.html#index-file_002dname_002das_002ddirectory'>file-name-as-directory</a>(filename)</tt>	this function returns a string representing filename in a form that the operating system will interpret as the name of a directory
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Directory-Names.html#index-directory_002dfile_002dname'>directory-file-name</a>(dirname)</tt>	this function returns a string representing dirname in a form that the operating system will interpret as the name of a file
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Directory-Names.html#index-abbreviate_002dfile_002dname'>abbreviate-file-name</a>(filename)</tt>	this function returns an abbreviated form of filename
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Disabling-Commands.html#index-enable_002dcommand'>enable-command</a>(command)</tt>	allow command a symbol to be executed without special confirmation from now on and alter the user’s init file see init file so that this will apply to future sessions
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Disabling-Commands.html#index-disable_002dcommand'>disable-command</a>(command)</tt>	require special confirmation to execute command from now on and alter the user’s init file so that this will apply to future sessions
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Disassembly.html#index-disassemble'>disassemble</a>(object,buffer-or-name)</tt>	this command displays the disassembled code for object
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Display-Action-Functions.html#index-display_002dbuffer_002dsame_002dwindow'>display-buffer-same-window</a>(buffer,alist)</tt>	this function tries to display buffer in the selected window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Display-Action-Functions.html#index-display_002dbuffer_002dreuse_002dwindow'>display-buffer-reuse-window</a>(buffer,alist)</tt>	this function tries to “display” buffer by finding a window that is already displaying it
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Display-Action-Functions.html#index-display_002dbuffer_002dpop_002dup_002dframe'>display-buffer-pop-up-frame</a>(buffer,alist)</tt>	this function creates a new frame and displays the buffer in that frame’s window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Display-Action-Functions.html#index-display_002dbuffer_002dpop_002dup_002dwindow'>display-buffer-pop-up-window</a>(buffer,alist)</tt>	this function tries to display buffer by splitting the largest or least recently-used window typically one on the selected frame 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Display-Action-Functions.html#index-display_002dbuffer_002dbelow_002dselected'>display-buffer-below-selected</a>(buffer,alist)</tt>	this function tries to display buffer in a window below the selected window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Display-Action-Functions.html#index-display_002dbuffer_002din_002dprevious_002dwindow'>display-buffer-in-previous-window</a>(buffer,alist)</tt>	this function tries to display buffer in a window previously showing it
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Display-Action-Functions.html#index-display_002dbuffer_002dat_002dbottom'>display-buffer-at-bottom</a>(buffer,alist)</tt>	this function tries to display buffer in a window at the bottom of the selected frame
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Display-Action-Functions.html#index-display_002dbuffer_002duse_002dsome_002dwindow'>display-buffer-use-some-window</a>(buffer,alist)</tt>	this function tries to display buffer by choosing an existing window and displaying the buffer in that window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Display-Action-Functions.html#index-display_002dbuffer_002dno_002dwindow'>display-buffer-no-window</a>(buffer,alist)</tt>	if alist has a non-nil allow-no-window entry then this function does not display buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Display-Feature-Testing.html#index-display_002dpopup_002dmenus_002dp'>display-popup-menus-p</a>(display)</tt>	this function returns t if popup menus are supported on display nil if not
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Display-Feature-Testing.html#index-display_002dgraphic_002dp'>display-graphic-p</a>(display)</tt>	this function returns t if display is a graphic display capable of displaying several frames and several different fonts at once
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Display-Feature-Testing.html#index-display_002dmouse_002dp'>display-mouse-p</a>(display)</tt>	 this function returns t if display has a mouse available nil if not
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Display-Feature-Testing.html#index-display_002dcolor_002dp'>display-color-p</a>(display)</tt>	 this function returns t if the screen is a color screen
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Display-Feature-Testing.html#index-display_002dgrayscale_002dp'>display-grayscale-p</a>(display)</tt>	this function returns t if the screen can display shades of gray
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Display-Feature-Testing.html#index-display_002dsupports_002dface_002dattributes_002dp'>display-supports-face-attributes-p</a>(attributes,display)</tt>	this function returns non-nil if all the face attributes in attributes are supported see face attributes 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Display-Feature-Testing.html#index-display_002dselections_002dp'>display-selections-p</a>(display)</tt>	this function returns t if display supports selections
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Display-Feature-Testing.html#index-display_002dimages_002dp'>display-images-p</a>(display)</tt>	this function returns t if display can display images
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Display-Feature-Testing.html#index-display_002dscreens'>display-screens</a>(display)</tt>	this function returns the number of screens associated with the display
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Display-Feature-Testing.html#index-display_002dpixel_002dheight'>display-pixel-height</a>(display)</tt>	this function returns the height of the screen in pixels
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Display-Feature-Testing.html#index-display_002dpixel_002dwidth'>display-pixel-width</a>(display)</tt>	this function returns the width of the screen in pixels
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Display-Feature-Testing.html#index-display_002dmm_002dheight'>display-mm-height</a>(display)</tt>	this function returns the height of the screen in millimeters or nil if emacs cannot get that information
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Display-Feature-Testing.html#index-display_002dmm_002dwidth'>display-mm-width</a>(display)</tt>	this function returns the width of the screen in millimeters or nil if emacs cannot get that information
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Display-Feature-Testing.html#index-display_002dmm_002ddimensions_002dalist'>display-mm-dimensions-alist</a>()</tt>	this variable allows the user to specify the dimensions of graphical displays returned by display-mm-height and display-mm-width in case the system provides incorrect values
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Display-Feature-Testing.html#index-display_002dbacking_002dstore'>display-backing-store</a>(display)</tt>	this function returns the backing store capability of the display
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Display-Feature-Testing.html#index-display_002dsave_002dunder'>display-save-under</a>(display)</tt>	this function returns non-nil if the display supports the saveunder feature
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Display-Feature-Testing.html#index-display_002dplanes'>display-planes</a>(display)</tt>	this function returns the number of planes the display supports
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Display-Feature-Testing.html#index-display_002dvisual_002dclass'>display-visual-class</a>(display)</tt>	this function returns the visual class for the screen
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Display-Feature-Testing.html#index-display_002dcolor_002dcells'>display-color-cells</a>(display)</tt>	this function returns the number of color cells the screen supports
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Display-Feature-Testing.html#index-x_002dserver_002dversion'>x-server-version</a>(display)</tt>	this function returns the list of version numbers of the gui window system running on display such as the x server on gnu and unix systems
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Display-Feature-Testing.html#index-x_002dserver_002dvendor'>x-server-vendor</a>(display)</tt>	this function returns the “vendor” that provided the window system software as a string 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Display-Margins.html#index-set_002dwindow_002dmargins'>set-window-margins</a>(window,left,right)</tt>	this function specifies the margin widths for window window in character cell units
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Display-Margins.html#index-window_002dmargins'>window-margins</a>(window)</tt>	this function returns the width of the left and right margins of window as a cons cell of the form (left 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Display-Tables.html#index-make_002ddisplay_002dtable'>make-display-table</a>()</tt>	this creates and returns a display table
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Display-Tables.html#index-display_002dtable_002dslot'>display-table-slot</a>(display-table,slot)</tt>	this function returns the value of the extra slot slot of display-table
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Display-Tables.html#index-set_002ddisplay_002dtable_002dslot'>set-display-table-slot</a>(display-table,slot,value)</tt>	this function stores value in the extra slot slot of display-table
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Display-Tables.html#index-describe_002ddisplay_002dtable'>describe-display-table</a>(display-table)</tt>	this function displays a description of the display table display-table in a help buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Display-Tables.html#index-describe_002dcurrent_002ddisplay_002dtable'>describe-current-display-table</a>()</tt>	this command displays a description of the current display table in a help buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Displaying-Messages.html#index-message'>message</a>(format-string,arguments)</tt>	this function displays a message in the echo area
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Displaying-Messages.html#index-with_002dtemp_002dmessage'>with-temp-message</a>(message,body)</tt>	this construct displays a message in the echo area temporarily during the execution of body
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Displaying-Messages.html#index-message_002dor_002dbox'>message-or-box</a>(format-string,arguments)</tt>	this function displays a message like message but may display it in a dialog box instead of the echo area
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Displaying-Messages.html#index-message_002dbox'>message-box</a>(format-string,arguments)</tt>	this function displays a message like message but uses a dialog box or a pop-up menu whenever that is possible
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Displaying-Messages.html#index-display_002dmessage_002dor_002dbuffer'>display-message-or-buffer</a>(message,buffer-name,not-this-window,frame)</tt>	this function displays the message message which may be either a string or a buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Displaying-Messages.html#index-current_002dmessage'>current-message</a>()</tt>	this function returns the message currently being displayed in the echo area or nil if there is none
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Distinguish-Interactive.html#index-called_002dinteractively_002dp'>called-interactively-p</a>(kind)</tt>	this function returns t when the calling function was called using call-interactively
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Docs-and-Compilation.html#index-byte_002dcompile_002ddynamic_002ddocstrings'>byte-compile-dynamic-docstrings</a>()</tt>	if this is non-nil the byte compiler generates compiled files that are set up for dynamic loading of documentation strings
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Dynamic-Loading.html#index-fetch_002dbytecode'>fetch-bytecode</a>(function)</tt>	if function is a byte-code function object this immediately finishes loading the byte code of function from its byte-compiled file if it is not fully loaded already
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Easy-Menu.html#index-easy_002dmenu_002ddefine'>easy-menu-define</a>(symbol,maps,doc,menu)</tt>	this macro defines a pop-up menu and/or menu bar submenu whose contents are given by menu
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Echo-Area-Customization.html#index-echo_002dkeystrokes'>echo-keystrokes</a>()</tt>	this variable determines how much time should elapse before command characters echo
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Edebug-Execution-Modes.html#index-edebug_002dsit_002dfor_002dseconds'>edebug-sit-for-seconds</a>()</tt>	this option specifies how many seconds to wait between execution steps in trace mode or continue mode
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Edebug-Options.html#index-edebug_002dsetup_002dhook'>edebug-setup-hook</a>()</tt>	functions to call before edebug is used
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Edebug-Options.html#index-edebug_002dall_002ddefs'>edebug-all-defs</a>()</tt>	if this is non-nil normal evaluation of defining forms such as defun and defmacro instruments them for edebug
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Edebug-Options.html#index-edebug_002dall_002dforms'>edebug-all-forms</a>()</tt>	if this is non-nil the commands eval-defun eval-region eval-buffer and eval-current-buffer instrument all forms even those that don’t define anything
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Edebug-Options.html#index-edebug_002dsave_002dwindows'>edebug-save-windows</a>()</tt>	if this is non-nil edebug saves and restores the window configuration
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Edebug-Options.html#index-edebug_002dsave_002ddisplayed_002dbuffer_002dpoints'>edebug-save-displayed-buffer-points</a>()</tt>	if this is non-nil edebug saves and restores point in all displayed buffers
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Edebug-Options.html#index-edebug_002dinitial_002dmode'>edebug-initial-mode</a>()</tt>	if this variable is non-nil it specifies the initial execution mode for edebug when it is first activated
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Edebug-Options.html#index-edebug_002dtrace-1'>edebug-trace</a>()</tt>	if this is non-nil trace each function entry and exit
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Edebug-Options.html#index-edebug_002dtest_002dcoverage'>edebug-test-coverage</a>()</tt>	if non-nil edebug tests coverage of all expressions debugged
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Edebug-Options.html#index-edebug_002dcontinue_002dkbd_002dmacro'>edebug-continue-kbd-macro</a>()</tt>	if non-nil continue defining or executing any keyboard macro that is executing outside of edebug
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Edebug-Options.html#index-edebug_002dunwrap_002dresults'>edebug-unwrap-results</a>()</tt>	if non-nil edebug tries to remove any of its own instrumentation when showing the results of expressions
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Edebug-Options.html#index-edebug_002don_002derror'>edebug-on-error</a>()</tt>	edebug binds debug-on-error to this value if debug-on-error was previously nil
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Edebug-Options.html#index-edebug_002don_002dquit'>edebug-on-quit</a>()</tt>	edebug binds debug-on-quit to this value if debug-on-quit was previously nil
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Edebug-Options.html#index-edebug_002dglobal_002dbreak_002dcondition'>edebug-global-break-condition</a>()</tt>	if non-nil an expression to test for at every stop point
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Emulating-Mode-Line.html#index-format_002dmode_002dline'>format-mode-line</a>(format,face,window,buffer)</tt>	this function formats a line of text according to format as if it were generating the mode line for window but it also returns the text as a string
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Entire-Match-Data.html#index-match_002ddata'>match-data</a>(integers,reuse,reseat)</tt>	this function returns a list of positions markers or integers that record all the information on the text that the last search matched
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Entire-Match-Data.html#index-set_002dmatch_002ddata'>set-match-data</a>(match-list,reseat)</tt>	this function sets the match data from the elements of match-list which should be a list that was the value of a previous call to match-data
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Equality-Predicates.html#index-eq'>eq</a>(object1,object2)</tt>	this function returns t if object1 and object2 are the same object and nil otherwise
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Equality-Predicates.html#index-equal'>equal</a>(object1,object2)</tt>	this function returns t if object1 and object2 have equal components and nil otherwise
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Equality-Predicates.html#index-equal_002dincluding_002dproperties'>equal-including-properties</a>(object1,object2)</tt>	this function behaves like equal in all cases but also requires that for two strings to be equal they have the same text properties
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Error-Debugging.html#index-debug_002don_002derror'>debug-on-error</a>()</tt>	this variable determines whether the debugger is called when an error is signaled and not handled
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Error-Debugging.html#index-debug_002dignored_002derrors'>debug-ignored-errors</a>()</tt>	this variable specifies errors which should not enter the debugger regardless of the value of debug-on-error
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Error-Debugging.html#index-eval_002dexpression_002ddebug_002don_002derror'>eval-expression-debug-on-error</a>()</tt>	if this variable has a non-nil value the default running the command eval-expression causes debug-on-error to be temporarily bound to to t
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Error-Debugging.html#index-debug_002don_002devent'>debug-on-event</a>()</tt>	if you set debug-on-event to a special event see special events emacs will try to enter the debugger as soon as it receives this event bypassing special-event-map
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Error-Symbols.html#index-define_002derror'>define-error</a>(name,message,parent)</tt>	in order for a symbol to be an error symbol it must be defined with define-error which takes a parent condition defaults to error 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Eval.html#index-eval'>eval</a>(form,lexical)</tt>	this is the basic function for evaluating an expression
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Eval.html#index-eval_002dregion'>eval-region</a>(start,end,stream,read-function)</tt>	this function evaluates the forms in the current buffer in the region defined by the positions start and end
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Eval.html#index-eval_002dbuffer'>eval-buffer</a>(buffer-or-name,stream,filename,unibyte,print)</tt>	this is similar to eval-region but the arguments provide different optional features
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Eval.html#index-max_002dlisp_002deval_002ddepth'>max-lisp-eval-depth</a>()</tt>	this variable defines the maximum depth allowed in calls to eval apply and funcall before an error is signaled (with error message "lisp nesting exceeds max-lisp-eval-depth")
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Event-Input-Misc.html#index-listify_002dkey_002dsequence'>listify-key-sequence</a>(key)</tt>	this function converts the string or vector key to a list of individual events which you can put in unread-command-events
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Event-Input-Misc.html#index-input_002dpending_002dp'>input-pending-p</a>(check-timers)</tt>	 this function determines whether any command input is currently available to be read
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Event-Input-Misc.html#index-discard_002dinput'>discard-input</a>()</tt>	 this function discards the contents of the terminal input buffer and cancels any keyboard macro that might be in the process of definition
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Event-Mod.html#index-keyboard_002dtranslate'>keyboard-translate</a>(from,to)</tt>	this function modifies keyboard-translate-table to translate character code from into character code to
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Examining-Properties.html#index-get_002dtext_002dproperty'>get-text-property</a>(pos,prop,object)</tt>	this function returns the value of the prop property of the character after position pos in object a buffer or string 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Examining-Properties.html#index-get_002dchar_002dproperty'>get-char-property</a>(position,prop,object)</tt>	this function is like get-text-property except that it checks overlays first and then text properties
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Examining-Properties.html#index-get_002dpos_002dproperty'>get-pos-property</a>(position,prop,object)</tt>	this function is like get-char-property except that it pays attention to properties’ stickiness and overlays’ advancement settings instead of the property of the character at 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Examining-Properties.html#index-get_002dchar_002dproperty_002dand_002doverlay'>get-char-property-and-overlay</a>(position,prop,object)</tt>	this is like get-char-property but gives extra information about the overlay that the property value comes from
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Examining-Properties.html#index-text_002dproperties_002dat'>text-properties-at</a>(position,object)</tt>	this function returns the entire property list of the character at position in the string or buffer object
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Expansion.html#index-macroexpand'>macroexpand</a>(form,environment)</tt>	 this function expands form if it is a macro call
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Expansion.html#index-macroexpand_002dall'>macroexpand-all</a>(form,environment)</tt>	macroexpand-all expands macros like macroexpand but will look for and expand all macros in form not just at the top-level
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Explicit-Encoding.html#index-encode_002dcoding_002dregion'>encode-coding-region</a>(start,end,coding-system,destination)</tt>	this command encodes the text from start to end according to coding system coding-system
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Explicit-Encoding.html#index-encode_002dcoding_002dstring'>encode-coding-string</a>(string,coding-system,nocopy,buffer)</tt>	this function encodes the text in string according to coding system coding-system
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Explicit-Encoding.html#index-decode_002dcoding_002dregion'>decode-coding-region</a>(start,end,coding-system,destination)</tt>	this command decodes the text from start to end according to coding system coding-system
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Explicit-Encoding.html#index-decode_002dcoding_002dstring'>decode-coding-string</a>(string,coding-system,nocopy,buffer)</tt>	this function decodes the text in string according to coding-system
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Explicit-Encoding.html#index-decode_002dcoding_002dinserted_002dregion'>decode-coding-inserted-region</a>(from,to,filename,visit,beg,end,replace)</tt>	this function decodes the text from from to to as if it were being read from file filename using insert-file-contents using the rest of the arguments provided
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Extended-Attributes.html#index-file_002dacl'>file-acl</a>(filename)</tt>	this function returns the acl for the file filename
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Extended-Attributes.html#index-file_002dselinux_002dcontext'>file-selinux-context</a>(filename)</tt>	this function returns the selinux context of the file filename as a list of the form user role type range 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Extended-Attributes.html#index-file_002dextended_002dattributes'>file-extended-attributes</a>(filename)</tt>	this function returns an alist of the emacs-recognized extended attributes of file filename
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Face-Attributes.html#index-font_002dfamily_002dlist'>font-family-list</a>(frame)</tt>	this function returns a list of available font family names
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Face-Attributes.html#index-underline_002dminimum_002doffset'>underline-minimum-offset</a>()</tt>	this variable specifies the minimum distance between the baseline and the underline in pixels when displaying underlined text
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Face-Attributes.html#index-x_002dbitmap_002dfile_002dpath'>x-bitmap-file-path</a>()</tt>	this variable specifies a list of directories for searching for bitmap files for the :stipple attribute
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Face-Attributes.html#index-bitmap_002dspec_002dp'>bitmap-spec-p</a>(object)</tt>	this returns t if object is a valid bitmap specification suitable for use with :stipple see above 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Face-Functions.html#index-face_002dlist'>face-list</a>()</tt>	this function returns a list of all defined face names
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Face-Functions.html#index-face_002did'>face-id</a>(face)</tt>	this function returns the face number of face face
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Face-Functions.html#index-face_002ddocumentation-1'>face-documentation</a>(face)</tt>	this function returns the documentation string of face face or nil if none was specified for it
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Face-Functions.html#index-face_002dequal'>face-equal</a>(face1,face2,frame)</tt>	this returns t if the faces face1 and face2 have the same attributes for display
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Face-Functions.html#index-face_002ddiffers_002dfrom_002ddefault_002dp'>face-differs-from-default-p</a>(face,frame)</tt>	this returns non-nil if the face face displays differently from the default face
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Face-Functions.html#index-define_002dobsolete_002dface_002dalias'>define-obsolete-face-alias</a>(obsolete-face,current-face,when)</tt>	this macro defines obsolete-face as an alias for current-face and also marks it as obsolete indicating that it may be removed in future
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Face-Remapping.html#index-face_002dremap_002dadd_002drelative'>face-remap-add-relative</a>(face,specs)</tt>	this function adds the face spec in specs as relative remappings for face face in the current buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Face-Remapping.html#index-face_002dremap_002dremove_002drelative'>face-remap-remove-relative</a>(cookie)</tt>	this function removes a relative remapping previously added by face-remap-add-relative
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Face-Remapping.html#index-face_002dremap_002dset_002dbase'>face-remap-set-base</a>(face,specs)</tt>	this function sets the base remapping of face in the current buffer to specs
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Face-Remapping.html#index-face_002dremap_002dreset_002dbase'>face-remap-reset-base</a>(face)</tt>	this function sets the base remapping of face to its default value which inherits from face’s global definition
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Faces.html#index-facep'>facep</a>(object)</tt>	this function returns a non-nil value if object is a named face a lisp symbol or string which serves as a face name
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Fields.html#index-field_002dbeginning'>field-beginning</a>(pos,escape-from-edge,limit)</tt>	this function returns the beginning of the field specified by pos
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Fields.html#index-field_002dend'>field-end</a>(pos,escape-from-edge,limit)</tt>	this function returns the end of the field specified by pos
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Fields.html#index-field_002dstring'>field-string</a>(pos)</tt>	this function returns the contents of the field specified by pos as a string
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Fields.html#index-field_002dstring_002dno_002dproperties'>field-string-no-properties</a>(pos)</tt>	this function returns the contents of the field specified by pos as a string discarding text properties
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Fields.html#index-delete_002dfield'>delete-field</a>(pos)</tt>	this function deletes the text of the field specified by pos
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Fields.html#index-constrain_002dto_002dfield'>constrain-to-field</a>(new-pos,old-pos,escape-from-edge,only-in-line,inhibit-capture-property)</tt>	this function “constrains” new-pos to the field that old-pos belongs to—in other words it returns the position closest to new-pos that is in the same field as old-pos
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/File-Attributes.html#index-file_002dnewer_002dthan_002dfile_002dp'>file-newer-than-file-p</a>(filename1,filename2)</tt>	 this function returns t if the file filename1 is newer than file filename2
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/File-Attributes.html#index-file_002dattributes'>file-attributes</a>(filename,id-format)</tt>	this function returns a list of attributes of file filename
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/File-Attributes.html#index-file_002dnlinks'>file-nlinks</a>(filename)</tt>	this function returns the number of names 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/File-Local-Variables.html#index-enable_002dlocal_002dvariables'>enable-local-variables</a>()</tt>	this variable controls whether to process file-local variables
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/File-Local-Variables.html#index-hack_002dlocal_002dvariables'>hack-local-variables</a>(mode-only)</tt>	this function parses and binds or evaluates as appropriate any local variables specified by the contents of the current buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/File-Local-Variables.html#index-safe_002dlocal_002dvariable_002dvalues'>safe-local-variable-values</a>()</tt>	this variable provides another way to mark some variable values as safe
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/File-Local-Variables.html#index-safe_002dlocal_002dvariable_002dp'>safe-local-variable-p</a>(sym,val)</tt>	this function returns non-nil if it is safe to give sym the value val based on the above criteria
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/File-Local-Variables.html#index-risky_002dlocal_002dvariable_002dp'>risky-local-variable-p</a>(sym)</tt>	this function returns non-nil if sym is a risky variable based on the above criteria
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/File-Local-Variables.html#index-enable_002dlocal_002deval'>enable-local-eval</a>()</tt>	this variable controls processing of ‘eval ’ in ‘-*-’ lines or local variables lists in files being visited
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/File-Local-Variables.html#index-safe_002dlocal_002deval_002dforms'>safe-local-eval-forms</a>()</tt>	this variable holds a list of expressions that are safe to evaluate when found in the ‘eval ’ “variable” in a file local variables list
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/File-Locks.html#index-file_002dlocked_002dp'>file-locked-p</a>(filename)</tt>	this function returns nil if the file filename is not locked
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/File-Locks.html#index-lock_002dbuffer'>lock-buffer</a>(filename)</tt>	this function locks the file filename if the current buffer is modified
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/File-Locks.html#index-unlock_002dbuffer'>unlock-buffer</a>()</tt>	this function unlocks the file being visited in the current buffer if the buffer is modified
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/File-Locks.html#index-create_002dlockfiles'>create-lockfiles</a>()</tt>	if this variable is nil emacs does not lock files
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/File-Locks.html#index-ask_002duser_002dabout_002dlock'>ask-user-about-lock</a>(file,other-user)</tt>	this function is called when the user tries to modify file but it is locked by another user named other-user
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/File-Name-Completion.html#index-file_002dname_002dall_002dcompletions'>file-name-all-completions</a>(partial-filename,directory)</tt>	this function returns a list of all possible completions for a file whose name starts with partial-filename in directory directory
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/File-Name-Completion.html#index-file_002dname_002dcompletion'>file-name-completion</a>(filename,directory,predicate)</tt>	this function completes the file name filename in directory directory
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/File-Name-Completion.html#index-completion_002dignored_002dextensions'>completion-ignored-extensions</a>()</tt>	file-name-completion usually ignores file names that end in any string in this list
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/File-Name-Components.html#index-file_002dname_002ddirectory'>file-name-directory</a>(filename)</tt>	this function returns the directory part of filename as a directory name see directory names or nil if filename does not include a directory part
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/File-Name-Components.html#index-file_002dname_002dnondirectory'>file-name-nondirectory</a>(filename)</tt>	this function returns the nondirectory part of filename
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/File-Name-Components.html#index-file_002dname_002dsans_002dversions'>file-name-sans-versions</a>(filename,keep-backup-version)</tt>	this function returns filename with any file version numbers backup version numbers or trailing tildes discarded
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/File-Name-Components.html#index-file_002dname_002dextension'>file-name-extension</a>(filename,period)</tt>	this function returns filename’s final “extension”, if any after applying file-name-sans-versions to remove any version/backup part
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/File-Name-Components.html#index-file_002dname_002dsans_002dextension'>file-name-sans-extension</a>(filename)</tt>	this function returns filename minus its extension if any
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/File-Name-Components.html#index-file_002dname_002dbase'>file-name-base</a>(filename)</tt>	this function is the composition of file-name-sans-extension and file-name-nondirectory
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/File-Name-Expansion.html#index-expand_002dfile_002dname'>expand-file-name</a>(filename,directory)</tt>	this function converts filename to an absolute file name
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/File-Name-Expansion.html#index-substitute_002din_002dfile_002dname'>substitute-in-file-name</a>(filename)</tt>	this function replaces environment variable references in filename with the environment variable values
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/File-Notifications.html#index-file_002dnotify_002dadd_002dwatch'>file-notify-add-watch</a>(file,flags,callback)</tt>	add a watch for filesystem events pertaining to file
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/File-Notifications.html#index-file_002dnotify_002drm_002dwatch'>file-notify-rm-watch</a>(descriptor)</tt>	removes an existing file watch specified by its descriptor
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Filling.html#index-fill_002dparagraph'>fill-paragraph</a>(justify,region)</tt>	this command fills the paragraph at or after point
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Filling.html#index-fill_002dregion'>fill-region</a>(start,end,justify,nosqueeze,to-eop)</tt>	this command fills each of the paragraphs in the region from start to end
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Filling.html#index-fill_002dindividual_002dparagraphs'>fill-individual-paragraphs</a>(start,end,justify,citation-regexp)</tt>	this command fills each paragraph in the region according to its individual fill prefix
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Filling.html#index-fill_002dindividual_002dvarying_002dindent'>fill-individual-varying-indent</a>()</tt>	this variable alters the action of fill-individual-paragraphs as described above
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Filling.html#index-fill_002dregion_002das_002dparagraph'>fill-region-as-paragraph</a>(start,end,justify,nosqueeze,squeeze-after)</tt>	this command considers a region of text as a single paragraph and fills it
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Filling.html#index-justify_002dcurrent_002dline'>justify-current-line</a>(how,eop,nosqueeze)</tt>	this command inserts spaces between the words of the current line so that the line ends exactly at fill-column
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Filling.html#index-default_002djustification'>default-justification</a>()</tt>	this variable’s value specifies the style of justification to use for text that doesn’t specify a style with a text property
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Filling.html#index-current_002djustification'>current-justification</a>()</tt>	this function returns the proper justification style to use for filling the text around point
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Filling.html#index-sentence_002dend_002ddouble_002dspace'>sentence-end-double-space</a>()</tt>	if this variable is non-nil a period followed by just one space does not count as the end of a sentence and the filling functions avoid breaking the line at such a place
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Filling.html#index-sentence_002dend_002dwithout_002dperiod'>sentence-end-without-period</a>()</tt>	if this variable is non-nil a sentence can end without a period
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Filling.html#index-sentence_002dend_002dwithout_002dspace'>sentence-end-without-space</a>()</tt>	if this variable is non-nil it should be a string of characters that can end a sentence without following spaces
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Filter-Functions.html#index-set_002dprocess_002dfilter'>set-process-filter</a>(process,filter)</tt>	this function gives process the filter function filter
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Filter-Functions.html#index-process_002dfilter'>process-filter</a>(process)</tt>	this function returns the filter function of process
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Finding-All-Frames.html#index-frame_002dlist'>frame-list</a>()</tt>	this function returns a list of all the live frames i
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Finding-All-Frames.html#index-visible_002dframe_002dlist'>visible-frame-list</a>()</tt>	this function returns a list of just the currently visible frames
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Finding-All-Frames.html#index-next_002dframe'>next-frame</a>(frame,minibuf)</tt>	this function lets you cycle conveniently through all the frames on the current display from an arbitrary starting point
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Finding-All-Frames.html#index-previous_002dframe'>previous-frame</a>(frame,minibuf)</tt>	like next-frame but cycles through all frames in the opposite direction
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Finding-Overlays.html#index-overlays_002dat'>overlays-at</a>(pos,sorted)</tt>	this function returns a list of all the overlays that cover the character at position pos in the current buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Finding-Overlays.html#index-overlays_002din'>overlays-in</a>(beg,end)</tt>	this function returns a list of the overlays that overlap the region beg through end
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Finding-Overlays.html#index-next_002doverlay_002dchange'>next-overlay-change</a>(pos)</tt>	this function returns the buffer position of the next beginning or end of an overlay after pos
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Finding-Overlays.html#index-previous_002doverlay_002dchange'>previous-overlay-change</a>(pos)</tt>	this function returns the buffer position of the previous beginning or end of an overlay before pos
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Float-Basics.html#index-isnan'>isnan</a>(x)</tt>	this predicate returns t if its floating-point argument is a nan nil otherwise
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Float-Basics.html#index-frexp'>frexp</a>(x)</tt>	this function returns a cons cell (s 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Float-Basics.html#index-ldexp'>ldexp</a>(sig,exp)</tt>	this function returns a floating-point number corresponding to the significand sig and exponent exp
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Float-Basics.html#index-copysign'>copysign</a>(x1,x2)</tt>	this function copies the sign of x2 to the value of x1 and returns the result
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Float-Basics.html#index-logb'>logb</a>(x)</tt>	this function returns the binary exponent of x
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Font-Lookup.html#index-x_002dlist_002dfonts'>x-list-fonts</a>(name,reference-face,frame,maximum,width)</tt>	this function returns a list of available font names that match name
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Font-Lookup.html#index-x_002dfamily_002dfonts'>x-family-fonts</a>(family,frame)</tt>	this function returns a list describing the available fonts for family family on frame
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Font-Selection.html#index-face_002dfont_002dfamily_002dalternatives'>face-font-family-alternatives</a>()</tt>	if a given family is specified but does not exist this variable specifies alternative font families to try
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Font-Selection.html#index-face_002dfont_002dselection_002dorder'>face-font-selection-order</a>()</tt>	if there is no font that exactly matches all desired face attributes (:width :height :weight and :slant), this variable specifies the order in which these attributes should be considered when selecting the closest matching font
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Font-Selection.html#index-face_002dfont_002dregistry_002dalternatives'>face-font-registry-alternatives</a>()</tt>	this variable lets you specify alternative font registries to try if a given registry is specified and doesn’t exist
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Font-Selection.html#index-scalable_002dfonts_002dallowed'>scalable-fonts-allowed</a>()</tt>	this variable controls which scalable fonts to use
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Fontsets.html#index-create_002dfontset_002dfrom_002dfontset_002dspec'>create-fontset-from-fontset-spec</a>(fontset-spec,style-variant-p,noerror)</tt>	this function defines a new fontset according to the specification string fontset-spec
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Fontsets.html#index-set_002dfontset_002dfont'>set-fontset-font</a>(name,character,font-spec,frame,add)</tt>	this function modifies the existing fontset name to use the font matching with font-spec for the character character
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Fontsets.html#index-char_002ddisplayable_002dp'>char-displayable-p</a>(char)</tt>	this function returns t if emacs ought to be able to display char
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Forcing-Redisplay.html#index-redisplay'>redisplay</a>(force)</tt>	this function tries immediately to redisplay
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Forcing-Redisplay.html#index-force_002dwindow_002dupdate'>force-window-update</a>(object)</tt>	this function forces some or all windows to be updated the next time emacs does a redisplay
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Format-Conversion-Round_002dTrip.html#index-format_002dwrite_002dfile'>format-write-file</a>(file,format,confirm)</tt>	this command writes the current buffer contents into the file file in a format based on format which is a list of format names
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Format-Conversion-Round_002dTrip.html#index-format_002dfind_002dfile'>format-find-file</a>(file,format)</tt>	this command finds the file file converting it according to format format
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Format-Conversion-Round_002dTrip.html#index-format_002dinsert_002dfile'>format-insert-file</a>(file,format,beg,end)</tt>	this command inserts the contents of file file converting it according to format format
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Format-of-Keymaps.html#index-keymapp'>keymapp</a>(object)</tt>	this function returns t if object is a keymap nil otherwise
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Formatting-Strings.html#index-format'>format</a>(string,objects)</tt>	this function returns a new string that is made by copying string and then replacing any format specification in the copy with encodings of the corresponding objects
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Frame-Configurations.html#index-current_002dframe_002dconfiguration'>current-frame-configuration</a>()</tt>	this function returns a frame configuration list that describes the current arrangement of frames and their contents
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Frame-Configurations.html#index-set_002dframe_002dconfiguration'>set-frame-configuration</a>(configuration,nodelete)</tt>	this function restores the state of frames described in configuration
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Frames.html#index-framep'>framep</a>(object)</tt>	this predicate returns a non-nil value if object is a frame and nil otherwise
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Frames.html#index-frame_002dterminal'>frame-terminal</a>(frame)</tt>	this function returns the terminal object that displays frame
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Frames.html#index-terminal_002dlive_002dp'>terminal-live-p</a>(object)</tt>	this predicate returns a non-nil value if object is a terminal that is live 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Fringe-Bitmaps.html#index-fringe_002dbitmaps_002dat_002dpos'>fringe-bitmaps-at-pos</a>(pos,window)</tt>	this function returns the fringe bitmaps of the display line containing position pos in window window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Fringe-Cursors.html#index-overflow_002dnewline_002dinto_002dfringe'>overflow-newline-into-fringe</a>()</tt>	if this is non-nil lines exactly as wide as the window not counting the final newline character are not continued
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Fringe-Indicators.html#index-indicate_002dempty_002dlines'>indicate-empty-lines</a>()</tt>	 when this is non-nil emacs displays a special glyph in the fringe of each empty line at the end of the buffer on graphical displays
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Fringe-Indicators.html#index-indicate_002dbuffer_002dboundaries'>indicate-buffer-boundaries</a>()</tt>	 this buffer-local variable controls how the buffer boundaries and window scrolling are indicated in the window fringes
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Fringe-Size_002fPos.html#index-set_002dwindow_002dfringes'>set-window-fringes</a>(window,left,right,outside-margins)</tt>	this function sets the fringe widths of window window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Fringe-Size_002fPos.html#index-window_002dfringes'>window-fringes</a>(window)</tt>	this function returns information about the fringes of a window window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Function-Cells.html#index-symbol_002dfunction'>symbol-function</a>(symbol)</tt>	 this returns the object in the function cell of symbol
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Function-Cells.html#index-fboundp'>fboundp</a>(symbol)</tt>	this function returns t if the symbol has an object in its function cell nil otherwise
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Function-Cells.html#index-fmakunbound'>fmakunbound</a>(symbol)</tt>	this function makes symbol’s function cell void so that a subsequent attempt to access this cell will cause a void-function error
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Function-Cells.html#index-fset'>fset</a>(symbol,definition)</tt>	this function stores definition in the function cell of symbol
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Function-Debugging.html#index-debug_002don_002dentry'>debug-on-entry</a>(function-name)</tt>	this function requests function-name to invoke the debugger each time it is called
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Function-Debugging.html#index-cancel_002ddebug_002don_002dentry'>cancel-debug-on-entry</a>(function-name)</tt>	this function undoes the effect of debug-on-entry on function-name
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Function-Indirection.html#index-indirect_002dfunction'>indirect-function</a>(function,noerror)</tt>	this function returns the meaning of function as a function
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Function-Safety.html#index-unsafep'>unsafep</a>(form,unsafep-vars)</tt>	returns nil if form is a safe lisp expression or returns a list that describes why it might be unsafe
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Functions-for-Key-Lookup.html#index-lookup_002dkey'>lookup-key</a>(keymap,key,accept-defaults)</tt>	this function returns the definition of key in keymap
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Functions-for-Key-Lookup.html#index-undefined'>undefined</a>()</tt>	used in keymaps to undefine keys
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Functions-for-Key-Lookup.html#index-local_002dkey_002dbinding'>local-key-binding</a>(key,accept-defaults)</tt>	this function returns the binding for key in the current local keymap or nil if it is undefined there
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Functions-for-Key-Lookup.html#index-global_002dkey_002dbinding'>global-key-binding</a>(key,accept-defaults)</tt>	this function returns the binding for command key in the current global keymap or nil if it is undefined there
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Functions-for-Key-Lookup.html#index-minor_002dmode_002dkey_002dbinding'>minor-mode-key-binding</a>(key,accept-defaults)</tt>	this function returns a list of all the active minor mode bindings of key
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Functions-for-Key-Lookup.html#index-meta_002dprefix_002dchar'>meta-prefix-char</a>()</tt>	 this variable is the meta-prefix character code
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Garbage-Collection.html#index-garbage_002dcollect'>garbage-collect</a>()</tt>	this command runs a garbage collection and returns information on the amount of space in use
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Garbage-Collection.html#index-garbage_002dcollection_002dmessages'>garbage-collection-messages</a>()</tt>	if this variable is non-nil emacs displays a message at the beginning and end of garbage collection
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Garbage-Collection.html#index-gc_002dcons_002dthreshold'>gc-cons-threshold</a>()</tt>	the value of this variable is the number of bytes of storage that must be allocated for lisp objects after one garbage collection in order to trigger another garbage collection
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Garbage-Collection.html#index-gc_002dcons_002dpercentage'>gc-cons-percentage</a>()</tt>	the value of this variable specifies the amount of consing before a garbage collection occurs as a fraction of the current heap size
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Garbage-Collection.html#index-memory_002dlimit'>memory-limit</a>()</tt>	this function returns the address of the last byte emacs has allocated divided by 1024
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Garbage-Collection.html#index-memory_002duse_002dcounts'>memory-use-counts</a>()</tt>	this returns a list of numbers that count the number of objects created in this emacs session
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Generic-Commands.html#index-define_002dalternatives'>define-alternatives</a>(command,customizations)</tt>	define the new command command a symbol
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Generic-Modes.html#index-define_002dgeneric_002dmode'>define-generic-mode</a>(mode,comment-list,keyword-list,font-lock-list,auto-mode-list,function-list,docstring)</tt>	this macro defines a generic mode command named mode a symbol not quoted 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Geometry.html#index-x_002dparse_002dgeometry'>x-parse-geometry</a>(geom)</tt>	 the function x-parse-geometry converts a standard x window geometry string to an alist that you can use as part of the argument to make-frame
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Glyphless-Chars.html#index-glyphless_002dchar_002ddisplay_002dcontrol'>glyphless-char-display-control</a>()</tt>	this user option provides a convenient way to set glyphless-char-display for groups of similar characters
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Glyphs.html#index-make_002dglyph_002dcode'>make-glyph-code</a>(char,face)</tt>	this function returns a glyph code representing char char with face face
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Glyphs.html#index-glyph_002dchar'>glyph-char</a>(glyph)</tt>	this function returns the character of glyph code glyph
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Glyphs.html#index-glyph_002dface'>glyph-face</a>(glyph)</tt>	this function returns face of glyph code glyph or nil if glyph uses the default face
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Group-Definitions.html#index-custom_002dunlispify_002dremove_002dprefixes'>custom-unlispify-remove-prefixes</a>()</tt>	if this variable is non-nil the prefixes specified by a group’s :prefix keyword are omitted from tag names whenever the user customizes the group
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Handling-Errors.html#index-error_002dmessage_002dstring'>error-message-string</a>(error-descriptor)</tt>	this function returns the error message string for a given error descriptor
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Hash-Access.html#index-gethash'>gethash</a>(key,table,default)</tt>	this function looks up key in table and returns its associated value—or default if key has no association in table
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Hash-Access.html#index-puthash'>puthash</a>(key,value,table)</tt>	this function enters an association for key in table with value value
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Hash-Access.html#index-remhash'>remhash</a>(key,table)</tt>	this function removes the association for key from table if there is one
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Hash-Access.html#index-clrhash'>clrhash</a>(table)</tt>	this function removes all the associations from hash table table so that it becomes empty
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Hash-Access.html#index-maphash'>maphash</a>(function,table)</tt>	this function calls function once for each of the associations in table
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Header-Lines.html#index-window_002dheader_002dline_002dheight'>window-header-line-height</a>(window)</tt>	this function returns the height in pixels of window’s header line
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Help-Functions.html#index-apropos'>apropos</a>(pattern,do-all)</tt>	this function finds all “meaningful” symbols whose names contain a match for the apropos pattern pattern
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Help-Functions.html#index-help_002dchar'>help-char</a>()</tt>	the value of this variable is the help character—the character that emacs recognizes as meaning help
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Help-Functions.html#index-help_002devent_002dlist'>help-event-list</a>()</tt>	the value of this variable is a list of event types that serve as alternative “help characters”
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Help-Functions.html#index-describe_002dprefix_002dbindings'>describe-prefix-bindings</a>()</tt>	this function calls describe-bindings to display a list of all the subcommands of the prefix key of the most recent key sequence
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Help-Functions.html#index-Helper_002ddescribe_002dbindings'>Helper-describe-bindings</a>()</tt>	this command pops up a window displaying a help buffer containing a listing of all of the key bindings from both the local and global keymaps
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Help-Functions.html#index-Helper_002dhelp'>Helper-help</a>()</tt>	this command provides help for the current mode
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Help-Functions.html#index-help_002dbuffer'>help-buffer</a>()</tt>	this function returns the name of the help buffer which is normally *help*; if such a buffer does not exist it is first created
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Help-Functions.html#index-help_002dsetup_002dxref'>help-setup-xref</a>(item,interactive-p)</tt>	this function updates the cross reference data in the *help* buffer which is used to regenerate the help information when the user clicks on the ‘back’ or ‘forward’ buttons
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Help-Functions.html#index-make_002dhelp_002dscreen'>make-help-screen</a>(fname,help-line,help-text,help-map)</tt>	this macro defines a help command named fname that acts like a prefix key that shows a list of the subcommands it offers
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Help-Functions.html#index-three_002dstep_002dhelp'>three-step-help</a>()</tt>	if this variable is non-nil commands defined with make-help-screen display their help-line strings in the echo area at first and display the longer help-text strings only if the user types the help character again
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/High_002dLevel-Completion.html#index-read_002dbuffer'>read-buffer</a>(prompt,default,require-match)</tt>	this function reads the name of a buffer and returns it as a string
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/High_002dLevel-Completion.html#index-read_002dbuffer_002dfunction'>read-buffer-function</a>()</tt>	this variable if non-nil specifies a function for reading buffer names
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/High_002dLevel-Completion.html#index-read_002dbuffer_002dcompletion_002dignore_002dcase'>read-buffer-completion-ignore-case</a>()</tt>	if this variable is non-nil read-buffer ignores case when performing completion
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/High_002dLevel-Completion.html#index-read_002dcommand'>read-command</a>(prompt,default)</tt>	this function reads the name of a command and returns it as a lisp symbol
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/High_002dLevel-Completion.html#index-read_002dvariable'>read-variable</a>(prompt,default)</tt>	this function reads the name of a customizable variable and returns it as a symbol
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/High_002dLevel-Completion.html#index-read_002dcolor'>read-color</a>(prompt,convert,allow-empty,display)</tt>	this function reads a string that is a color specification either the color’s name or an rgb hex value such as #rrrgggbbb
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Horizontal-Scrolling.html#index-scroll_002dleft'>scroll-left</a>(count,set-minimum)</tt>	this function scrolls the selected window count columns to the left or to the right if count is negative 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Horizontal-Scrolling.html#index-scroll_002dright'>scroll-right</a>(count,set-minimum)</tt>	this function scrolls the selected window count columns to the right or to the left if count is negative 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Horizontal-Scrolling.html#index-window_002dhscroll'>window-hscroll</a>(window)</tt>	this function returns the total leftward horizontal scrolling of window—the number of columns by which the text in window is scrolled left past the left margin
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Horizontal-Scrolling.html#index-set_002dwindow_002dhscroll'>set-window-hscroll</a>(window,columns)</tt>	this function sets horizontal scrolling of window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/How-Programs-Do-Loading.html#index-load'>load</a>(filename,missing-ok,nomessage,nosuffix,must-suffix)</tt>	this function finds and opens a file of lisp code evaluates all the forms in it and closes the file
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/How-Programs-Do-Loading.html#index-load_002dfile'>load-file</a>(filename)</tt>	this command loads the file filename
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/How-Programs-Do-Loading.html#index-load_002dlibrary'>load-library</a>(library)</tt>	this command loads the library named library
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Idle-Timers.html#index-run_002dwith_002didle_002dtimer'>run-with-idle-timer</a>(secs,repeat,function,args)</tt>	set up a timer which runs the next time emacs is idle for secs seconds
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Idle-Timers.html#index-current_002didle_002dtime'>current-idle-time</a>()</tt>	if emacs is idle this function returns the length of time emacs has been idle as a list of four integers sec-high sec-low microsec picosec using the same format as current-time see time of day 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Image-Cache.html#index-image_002dflush'>image-flush</a>(spec,frame)</tt>	this function removes the image with specification spec from the image cache of frame frame
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Image-Cache.html#index-clear_002dimage_002dcache'>clear-image-cache</a>(filter)</tt>	this function clears an image cache removing all the images stored in it
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Image-Descriptors.html#index-image_002dmask_002dp'>image-mask-p</a>(spec,frame)</tt>	this function returns t if image spec has a mask bitmap
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Image-Formats.html#index-image_002dtype_002davailable_002dp'>image-type-available-p</a>(type)</tt>	this function returns non-nil if images of type type can be loaded and displayed
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/ImageMagick-Images.html#index-imagemagick_002dtypes'>imagemagick-types</a>()</tt>	this function returns a list of image file extensions supported by the current imagemagick installation
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/ImageMagick-Images.html#index-imagemagick_002denabled_002dtypes'>imagemagick-enabled-types</a>()</tt>	the value of this variable is a list of imagemagick image types which emacs may attempt to render using imagemagick
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/ImageMagick-Images.html#index-imagemagick_002dtypes_002dinhibit'>imagemagick-types-inhibit</a>()</tt>	the value of this variable lists the imagemagick image types which should never be rendered using imagemagick regardless of the value of imagemagick-enabled-types
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Imenu.html#index-imenu_002dadd_002dto_002dmenubar'>imenu-add-to-menubar</a>(name)</tt>	this function defines a local menu bar item named name to run imenu
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Indent-Tabs.html#index-tab_002dto_002dtab_002dstop'>tab-to-tab-stop</a>()</tt>	this command inserts spaces or tabs before point up to the next tab stop column defined by tab-stop-list
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Indent-Tabs.html#index-tab_002dstop_002dlist'>tab-stop-list</a>()</tt>	this variable defines the tab stop columns used by tab-to-tab-stop
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Indirect-Buffers.html#index-make_002dindirect_002dbuffer'>make-indirect-buffer</a>(base-buffer,name,clone)</tt>	this creates and returns an indirect buffer named name whose base buffer is base-buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Indirect-Buffers.html#index-clone_002dindirect_002dbuffer'>clone-indirect-buffer</a>(newname,display-flag,norecord)</tt>	this function creates and returns a new indirect buffer that shares the current buffer’s base buffer and copies the rest of the current buffer’s attributes
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Indirect-Buffers.html#index-buffer_002dbase_002dbuffer'>buffer-base-buffer</a>(buffer)</tt>	this function returns the base buffer of buffer which defaults to the current buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Infinite-Loops.html#index-debug_002don_002dquit'>debug-on-quit</a>()</tt>	this variable determines whether the debugger is called when quit is signaled and not handled
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Information-from-Markers.html#index-marker_002dposition'>marker-position</a>(marker)</tt>	this function returns the position that marker points to or nil if it points nowhere
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Information-from-Markers.html#index-marker_002dbuffer'>marker-buffer</a>(marker)</tt>	this function returns the buffer that marker points into or nil if it points nowhere
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Inheritance-and-Keymaps.html#index-keymap_002dparent'>keymap-parent</a>(keymap)</tt>	this returns the parent keymap of keymap
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Inheritance-and-Keymaps.html#index-set_002dkeymap_002dparent'>set-keymap-parent</a>(keymap,parent)</tt>	this sets the parent keymap of keymap to parent and returns parent
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Inheritance-and-Keymaps.html#index-make_002dcomposed_002dkeymap'>make-composed-keymap</a>(maps,parent)</tt>	this function returns a new keymap composed of the existing keymap s maps and optionally inheriting from a parent keymap parent
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Init-File.html#index-site_002drun_002dfile'>site-run-file</a>()</tt>	this variable specifies the site-customization file to load before the user’s init file
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Init-File.html#index-inhibit_002ddefault_002dinit'>inhibit-default-init</a>()</tt>	if this variable is non-nil it prevents emacs from loading the default initialization library file
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Initial-Parameters.html#index-initial_002dframe_002dalist'>initial-frame-alist</a>()</tt>	this variable’s value is an alist of parameter values used when creating the initial frame
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Initial-Parameters.html#index-minibuffer_002dframe_002dalist'>minibuffer-frame-alist</a>()</tt>	this variable’s value is an alist of parameter values used when creating an initial minibuffer-only frame 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Initial-Parameters.html#index-default_002dframe_002dalist'>default-frame-alist</a>()</tt>	this is an alist specifying default values of frame parameters for all emacs frames—the first frame and subsequent frames
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Input-Events.html#index-eventp'>eventp</a>(object)</tt>	this function returns non-nil if object is an input event or event type
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Input-Focus.html#index-selected_002dframe'>selected-frame</a>()</tt>	this function returns the selected frame
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Input-Focus.html#index-select_002dframe_002dset_002dinput_002dfocus'>select-frame-set-input-focus</a>(frame,norecord)</tt>	this function selects frame raises it should it happen to be obscured by other frames and tries to give it the x server’s focus
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Input-Focus.html#index-select_002dframe'>select-frame</a>(frame,norecord)</tt>	this function selects frame frame temporarily disregarding the focus of the x server if any
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Input-Focus.html#index-handle_002dswitch_002dframe'>handle-switch-frame</a>(frame)</tt>	this function handles a focus event by selecting frame frame
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Input-Focus.html#index-redirect_002dframe_002dfocus'>redirect-frame-focus</a>(frame,focus-frame)</tt>	this function redirects focus from frame to focus-frame
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Input-Focus.html#index-focus_002dfollows_002dmouse'>focus-follows-mouse</a>()</tt>	this option is how you inform emacs whether the window manager transfers focus when the user moves the mouse
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Input-Functions.html#index-read'>read</a>(stream)</tt>	this function reads one textual lisp expression from stream returning it as a lisp object
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Input-Functions.html#index-read_002dfrom_002dstring'>read-from-string</a>(string,start,end)</tt>	 this function reads the first textual lisp expression from the text in string
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Input-Methods.html#index-default_002dinput_002dmethod'>default-input-method</a>()</tt>	this variable holds the default input method for commands that choose an input method
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Input-Methods.html#index-set_002dinput_002dmethod'>set-input-method</a>(input-method)</tt>	this command activates input method input-method for the current buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Input-Methods.html#index-read_002dinput_002dmethod_002dname'>read-input-method-name</a>(prompt,default,inhibit-null)</tt>	this function reads an input method name with the minibuffer prompting with prompt
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Input-Modes.html#index-set_002dinput_002dmode'>set-input-mode</a>(interrupt,flow,meta,quit-char)</tt>	this function sets the mode for reading keyboard input
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Input-Modes.html#index-current_002dinput_002dmode'>current-input-mode</a>()</tt>	this function returns the current mode for reading keyboard input
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Input-to-Processes.html#index-process_002dsend_002dstring'>process-send-string</a>(process,string)</tt>	this function sends process the contents of string as standard input
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Input-to-Processes.html#index-process_002dsend_002dregion'>process-send-region</a>(process,start,end)</tt>	this function sends the text in the region defined by start and end as standard input to process
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Input-to-Processes.html#index-process_002dsend_002deof'>process-send-eof</a>(process)</tt>	this function makes process see an end-of-file in its input
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Input-to-Processes.html#index-process_002drunning_002dchild_002dp'>process-running-child-p</a>(process)</tt>	this function will tell you whether a process has given control of its terminal to its own child process
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Insertion.html#index-insert'>insert</a>(args)</tt>	this function inserts the strings and/or characters args into the current buffer at point moving point forward
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Insertion.html#index-insert_002dbefore_002dmarkers'>insert-before-markers</a>(args)</tt>	this function inserts the strings and/or characters args into the current buffer at point moving point forward
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Insertion.html#index-insert_002dchar'>insert-char</a>(character,count,inherit)</tt>	this command inserts count instances of character into the current buffer before point
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Insertion.html#index-insert_002dbuffer_002dsubstring'>insert-buffer-substring</a>(from-buffer-or-name,start,end)</tt>	this function inserts a portion of buffer from-buffer-or-name into the current buffer before point
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Insertion.html#index-insert_002dbuffer_002dsubstring_002dno_002dproperties'>insert-buffer-substring-no-properties</a>(from-buffer-or-name,start,end)</tt>	this is like insert-buffer-substring except that it does not copy any text properties
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Instrumenting-Macro-Calls.html#index-def_002dedebug_002dspec'>def-edebug-spec</a>(macro,specification)</tt>	specify which expressions of a call to macro macro are forms to be evaluated
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Instrumenting-Macro-Calls.html#index-edebug_002deval_002dmacro_002dargs'>edebug-eval-macro-args</a>()</tt>	this controls the way edebug treats macro arguments with no explicit edebug specification
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Interactive-Call.html#index-commandp'>commandp</a>(object,for-call-interactively)</tt>	this function returns t if object is a command
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Interactive-Call.html#index-call_002dinteractively'>call-interactively</a>(command,record-flag,keys)</tt>	this function calls the interactively callable function command providing arguments according to its interactive calling specifications
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Interactive-Call.html#index-command_002dexecute'>command-execute</a>(command,record-flag,keys,special)</tt>	 this function executes command
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Interactive-Call.html#index-execute_002dextended_002dcommand'>execute-extended-command</a>(prefix-argument)</tt>	 this function reads a command name from the minibuffer using completing-read see completion 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Internals-of-Debugger.html#index-backtrace'>backtrace</a>()</tt>	 this function prints a trace of lisp function calls currently active
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Internals-of-Debugger.html#index-backtrace_002ddebug'>backtrace-debug</a>(level,flag)</tt>	this function sets the debug-on-exit flag of the stack frame level levels down the stack giving it the value flag
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Internals-of-Debugger.html#index-backtrace_002dframe'>backtrace-frame</a>(frame-number)</tt>	the function backtrace-frame is intended for use in lisp debuggers
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Internals-of-Kill-Ring.html#index-kill_002dring_002dmax'>kill-ring-max</a>()</tt>	the value of this variable is the maximum length to which the kill ring can grow before elements are thrown away at the end
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Invisible-Text.html#index-add_002dto_002dinvisibility_002dspec'>add-to-invisibility-spec</a>(element)</tt>	this function adds the element element to buffer-invisibility-spec
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Invisible-Text.html#index-remove_002dfrom_002dinvisibility_002dspec'>remove-from-invisibility-spec</a>(element)</tt>	this removes the element element from buffer-invisibility-spec
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Invisible-Text.html#index-invisible_002dp'>invisible-p</a>(pos-or-prop)</tt>	if pos-or-prop is a marker or number this function returns a non-nil value if the text at that position is invisible
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Invoking-the-Debugger.html#index-debug'>debug</a>(debugger-args)</tt>	this function enters the debugger
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Key-Binding-Commands.html#index-global_002dset_002dkey'>global-set-key</a>(key,binding)</tt>	this function sets the binding of key in the current global map to binding
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Key-Binding-Commands.html#index-global_002dunset_002dkey'>global-unset-key</a>(key)</tt>	 this function removes the binding of key from the current global map
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Key-Binding-Commands.html#index-local_002dset_002dkey'>local-set-key</a>(key,binding)</tt>	this function sets the binding of key in the current local keymap to binding
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Key-Binding-Commands.html#index-local_002dunset_002dkey'>local-unset-key</a>(key)</tt>	this function removes the binding of key from the current local map
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Key-Sequence-Input.html#index-read_002dkey_002dsequence'>read-key-sequence</a>(prompt,continue-echo,dont-downcase-last,switch-frame-ok,command-loop)</tt>	this function reads a key sequence and returns it as a string or vector
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Key-Sequence-Input.html#index-read_002dkey_002dsequence_002dvector'>read-key-sequence-vector</a>(prompt,continue-echo,dont-downcase-last,switch-frame-ok,command-loop)</tt>	this is like read-key-sequence except that it always returns the key sequence as a vector never as a string
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Key-Sequences.html#index-kbd'>kbd</a>(keyseq-text)</tt>	this function converts the text keyseq-text a string constant into a key sequence a string or vector constant 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Keyboard-Macros.html#index-execute_002dkbd_002dmacro'>execute-kbd-macro</a>(kbdmacro,count,loopfunc)</tt>	this function executes kbdmacro as a sequence of events
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Keys-in-Documentation.html#index-substitute_002dcommand_002dkeys'>substitute-command-keys</a>(string)</tt>	this function scans string for the above special sequences and replaces them by what they stand for returning the result as a string
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Kill-Functions.html#index-kill_002dregion'>kill-region</a>(start,end)</tt>	this function kills the text in the region defined by start and end
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Kill-Functions.html#index-kill_002dread_002donly_002dok'>kill-read-only-ok</a>()</tt>	if this option is non-nil kill-region does not signal an error if the buffer or text is read-only
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Kill-Functions.html#index-copy_002dregion_002das_002dkill'>copy-region-as-kill</a>(start,end)</tt>	this command saves the region defined by start and end on the kill ring including text properties but does not delete the text from the buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Killing-Buffers.html#index-kill_002dbuffer'>kill-buffer</a>(buffer-or-name)</tt>	this function kills the buffer buffer-or-name freeing all its memory for other uses or to be returned to the operating system
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Killing-Buffers.html#index-buffer_002doffer_002dsave'>buffer-offer-save</a>()</tt>	this variable if non-nil in a particular buffer tells save-buffers-kill-emacs and save-some-buffers if the second optional argument to that function is t to offer to save that buffer just as they offer to save file-visiting buffers
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Killing-Buffers.html#index-buffer_002dlive_002dp'>buffer-live-p</a>(object)</tt>	this function returns t if object is a live buffer a buffer which has not been killed nil otherwise
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Killing-Emacs.html#index-kill_002demacs'>kill-emacs</a>(exit-data)</tt>	this command calls the hook kill-emacs-hook then exits the emacs process and kills it
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Kinds-of-Files.html#index-file_002dsymlink_002dp'>file-symlink-p</a>(filename)</tt>	 if the file filename is a symbolic link the file-symlink-p function returns its non-recursive link target as a string
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Kinds-of-Files.html#index-file_002ddirectory_002dp'>file-directory-p</a>(filename)</tt>	this function returns t if filename is the name of an existing directory nil otherwise
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Kinds-of-Files.html#index-file_002dregular_002dp'>file-regular-p</a>(filename)</tt>	this function returns t if the file filename exists and is a regular file (not a directory named pipe terminal or other i/o device)
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Library-Search.html#index-locate_002dlibrary'>locate-library</a>(library,nosuffix,path,interactive-call)</tt>	this command finds the precise file name for library library
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Library-Search.html#index-list_002dload_002dpath_002dshadows'>list-load-path-shadows</a>(stringp)</tt>	this command shows a list of shadowed emacs lisp files
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Lisp-and-Coding-Systems.html#index-coding_002dsystem_002dlist'>coding-system-list</a>(base-only)</tt>	this function returns a list of all coding system names symbols 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Lisp-and-Coding-Systems.html#index-coding_002dsystem_002dp'>coding-system-p</a>(object)</tt>	this function returns t if object is a coding system name or nil
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Lisp-and-Coding-Systems.html#index-check_002dcoding_002dsystem'>check-coding-system</a>(coding-system)</tt>	this function checks the validity of coding-system
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Lisp-and-Coding-Systems.html#index-coding_002dsystem_002deol_002dtype'>coding-system-eol-type</a>(coding-system)</tt>	this function returns the type of end-of-line (a
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Lisp-and-Coding-Systems.html#index-coding_002dsystem_002dchange_002deol_002dconversion'>coding-system-change-eol-conversion</a>(coding-system,eol-type)</tt>	this function returns a coding system which is like coding-system except for its eol conversion which is specified by eol-type
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Lisp-and-Coding-Systems.html#index-coding_002dsystem_002dchange_002dtext_002dconversion'>coding-system-change-text-conversion</a>(eol-coding,text-coding)</tt>	this function returns a coding system which uses the end-of-line conversion of eol-coding and the text conversion of text-coding
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Lisp-and-Coding-Systems.html#index-find_002dcoding_002dsystems_002dregion'>find-coding-systems-region</a>(from,to)</tt>	this function returns a list of coding systems that could be used to encode a text between from and to
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Lisp-and-Coding-Systems.html#index-find_002dcoding_002dsystems_002dstring'>find-coding-systems-string</a>(string)</tt>	this function returns a list of coding systems that could be used to encode the text of string
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Lisp-and-Coding-Systems.html#index-find_002dcoding_002dsystems_002dfor_002dcharsets'>find-coding-systems-for-charsets</a>(charsets)</tt>	this function returns a list of coding systems that could be used to encode all the character sets in the list charsets
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Lisp-and-Coding-Systems.html#index-check_002dcoding_002dsystems_002dregion'>check-coding-systems-region</a>(start,end,coding-system-list)</tt>	this function checks whether coding systems in the list coding-system-list can encode all the characters in the region between start and end
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Lisp-and-Coding-Systems.html#index-detect_002dcoding_002dregion'>detect-coding-region</a>(start,end,highest)</tt>	this function chooses a plausible coding system for decoding the text from start to end
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Lisp-and-Coding-Systems.html#index-detect_002dcoding_002dstring'>detect-coding-string</a>(string,highest)</tt>	this function is like detect-coding-region except that it operates on the contents of string instead of bytes in the buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Lisp-and-Coding-Systems.html#index-coding_002dsystem_002dcharset_002dlist'>coding-system-charset-list</a>(coding-system)</tt>	this function returns the list of character sets see character sets supported by coding-system
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/List-Elements.html#index-car'>car</a>(cons-cell)</tt>	this function returns the value referred to by the first slot of the cons cell cons-cell
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/List-Elements.html#index-cdr'>cdr</a>(cons-cell)</tt>	this function returns the value referred to by the second slot of the cons cell cons-cell
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/List-Elements.html#index-car_002dsafe'>car-safe</a>(object)</tt>	this function lets you take the car of a cons cell while avoiding errors for other data types
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/List-Elements.html#index-cdr_002dsafe'>cdr-safe</a>(object)</tt>	this function lets you take the cdr of a cons cell while avoiding errors for other data types
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/List-Elements.html#index-pop'>pop</a>(listname)</tt>	this macro provides a convenient way to examine the car of a list and take it off the list all at once
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/List-Elements.html#index-nth'>nth</a>(n,list)</tt>	this function returns the nth element of list
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/List-Elements.html#index-nthcdr'>nthcdr</a>(n,list)</tt>	this function returns the nth cdr of list
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/List-Elements.html#index-last'>last</a>(list,n)</tt>	this function returns the last link of list
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/List-Elements.html#index-safe_002dlength'>safe-length</a>(list)</tt>	this function returns the length of list with no risk of either an error or an infinite loop
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/List-Elements.html#index-caar'>caar</a>(cons-cell)</tt>	this is the same as (car car cons-cell 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/List-Elements.html#index-cadr'>cadr</a>(cons-cell)</tt>	this is the same as (car cdr cons-cell or nth 1 cons-cell 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/List-Elements.html#index-cdar'>cdar</a>(cons-cell)</tt>	this is the same as (cdr car cons-cell 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/List-Elements.html#index-cddr'>cddr</a>(cons-cell)</tt>	this is the same as (cdr cdr cons-cell or nthcdr 2 cons-cell 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/List-Elements.html#index-butlast'>butlast</a>(x,n)</tt>	this function returns the list x with the last element or the last n elements removed
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/List-Elements.html#index-nbutlast'>nbutlast</a>(x,n)</tt>	this is a version of butlast that works by destructively modifying the cdr of the appropriate element rather than making a copy of the list
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/List-Motion.html#index-forward_002dlist'>forward-list</a>(arg)</tt>	this function moves forward across arg default 1 balanced groups of parentheses
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/List-Motion.html#index-backward_002dlist'>backward-list</a>(arg)</tt>	this function moves backward across arg default 1 balanced groups of parentheses
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/List-Motion.html#index-up_002dlist'>up-list</a>(arg)</tt>	this function moves forward out of arg default 1 levels of parentheses
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/List-Motion.html#index-down_002dlist'>down-list</a>(arg)</tt>	this function moves forward into arg default 1 levels of parentheses
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/List-Motion.html#index-forward_002dsexp'>forward-sexp</a>(arg)</tt>	this function moves forward across arg default 1 balanced expressions
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/List-Motion.html#index-backward_002dsexp'>backward-sexp</a>(arg)</tt>	this function moves backward across arg default 1 balanced expressions
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/List-Motion.html#index-beginning_002dof_002ddefun'>beginning-of-defun</a>(arg)</tt>	this function moves back to the argth beginning of a defun
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/List-Motion.html#index-end_002dof_002ddefun'>end-of-defun</a>(arg)</tt>	this function moves forward to the argth end of a defun
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/List-Motion.html#index-defun_002dprompt_002dregexp'>defun-prompt-regexp</a>()</tt>	if non-nil this buffer-local variable holds a regular expression that specifies what text can appear before the open-parenthesis that starts a defun
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/List-Motion.html#index-open_002dparen_002din_002dcolumn_002d0_002dis_002ddefun_002dstart'>open-paren-in-column-0-is-defun-start</a>()</tt>	if this variable’s value is non-nil an open parenthesis in column 0 is considered to be the start of a defun
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/List-Variables.html#index-push'>push</a>(element,listname)</tt>	this macro creates a new list whose car is element and whose cdr is the list specified by listname and saves that list in listname
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/List-Variables.html#index-add_002dto_002dlist'>add-to-list</a>(symbol,element,append,compare-fn)</tt>	this function sets the variable symbol by consing element onto the old value if element is not already a member of that value
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/List-Variables.html#index-add_002dto_002dordered_002dlist'>add-to-ordered-list</a>(symbol,element,order)</tt>	this function sets the variable symbol by inserting element into the old value which must be a list at the position specified by order
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/List_002drelated-Predicates.html#index-consp'>consp</a>(object)</tt>	this function returns t if object is a cons cell nil otherwise
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/List_002drelated-Predicates.html#index-atom'>atom</a>(object)</tt>	this function returns t if object is an atom nil otherwise
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/List_002drelated-Predicates.html#index-listp'>listp</a>(object)</tt>	this function returns t if object is a cons cell or nil
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/List_002drelated-Predicates.html#index-nlistp'>nlistp</a>(object)</tt>	this function is the opposite of listp it returns t if object is not a list
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/List_002drelated-Predicates.html#index-null'>null</a>(object)</tt>	this function returns t if object is nil and returns nil otherwise
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Load-Suffixes.html#index-get_002dload_002dsuffixes'>get-load-suffixes</a>()</tt>	this function returns the list of all suffixes that load should try in order when its must-suffix argument is non-nil
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Load-Suffixes.html#index-load_002dprefer_002dnewer'>load-prefer-newer</a>()</tt>	if this option is non-nil then rather than stopping at the first suffix that exists load tests them all and uses whichever file is the newest
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Local-Variables.html#index-max_002dspecpdl_002dsize'>max-specpdl-size</a>()</tt>	 this variable defines the limit on the total number of local variable bindings and unwind-protect cleanups see cleaning up from nonlocal exits that are allowed before emacs signals an error (with data "variable binding depth exceeds max-specpdl-size")
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Locales.html#index-locale_002dinfo'>locale-info</a>(item)</tt>	this function returns locale data item for the current posix locale if available
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Locating-Files.html#index-locate_002dfile'>locate-file</a>(filename,path,suffixes,predicate)</tt>	this function searches for a file whose name is filename in a list of directories given by path trying the suffixes in suffixes
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Locating-Files.html#index-executable_002dfind'>executable-find</a>(program)</tt>	this function searches for the executable file of the named program and returns the absolute file name of the executable including its file-name extensions if any
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Logging-Messages.html#index-messages_002dbuffer'>messages-buffer</a>()</tt>	this function returns the *messages* buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Logging-Messages.html#index-message_002dlog_002dmax'>message-log-max</a>()</tt>	this variable specifies how many lines to keep in the *messages* buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Low_002dLevel-Font.html#index-fontp'>fontp</a>(object,type)</tt>	return t if object is a font object font spec or font entity
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Low_002dLevel-Font.html#index-font_002dat'>font-at</a>(position,window,string)</tt>	return the font object that is being used to display the character at position position in the window window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Low_002dLevel-Font.html#index-font_002dspec'>font-spec</a>(arguments)</tt>	return a new font spec using the specifications in arguments which should come in property-value pairs
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Low_002dLevel-Font.html#index-font_002dput'>font-put</a>(font-spec,property,value)</tt>	set the font property property in the font-spec font-spec to value
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Low_002dLevel-Font.html#index-find_002dfont'>find-font</a>(font-spec,frame)</tt>	this function returns a font entity that best matches the font spec font-spec on frame frame
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Low_002dLevel-Font.html#index-list_002dfonts'>list-fonts</a>(font-spec,frame,num,prefer)</tt>	this function returns a list of all font entities that match the font spec font-spec
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Low_002dLevel-Font.html#index-font_002dget'>font-get</a>(font,property)</tt>	this function returns the value of the font property property for font
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Low_002dLevel-Font.html#index-font_002dface_002dattributes'>font-face-attributes</a>(font,frame)</tt>	this function returns a list of face attributes corresponding to font
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Low_002dLevel-Font.html#index-font_002dxlfd_002dname'>font-xlfd-name</a>(font,fold-wildcards)</tt>	this function returns the xlfd x logical font descriptor a string matching font
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Low_002dLevel-Kill-Ring.html#index-current_002dkill'>current-kill</a>(n,do-not-move)</tt>	the function current-kill rotates the yanking pointer which designates the “front” of the kill ring by n places from newer kills to older ones and returns the text at that place in the ring
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Low_002dLevel-Kill-Ring.html#index-kill_002dnew'>kill-new</a>(string,replace)</tt>	this function pushes the text string onto the kill ring and makes the yanking pointer point to it
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Low_002dLevel-Kill-Ring.html#index-kill_002dappend'>kill-append</a>(string,before-p)</tt>	this function appends the text string to the first entry in the kill ring and makes the yanking pointer point to the combined entry
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Low_002dLevel-Parsing.html#index-parse_002dpartial_002dsexp'>parse-partial-sexp</a>(start,limit,target-depth,stop-before,state,stop-comment)</tt>	this function parses a sexp in the current buffer starting at start not scanning past limit
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Magic-File-Names.html#index-find_002dfile_002dname_002dhandler'>find-file-name-handler</a>(file,operation)</tt>	this function returns the handler function for file name file or nil if there is none
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Magic-File-Names.html#index-file_002dlocal_002dcopy'>file-local-copy</a>(filename)</tt>	this function copies file filename to an ordinary non-magic file on the local machine if it isn’t on the local machine already
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Magic-File-Names.html#index-file_002dremote_002dp'>file-remote-p</a>(filename,identification,connected)</tt>	this function tests whether filename is a remote file
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Magic-File-Names.html#index-unhandled_002dfile_002dname_002ddirectory'>unhandled-file-name-directory</a>(filename)</tt>	this function returns the name of a directory that is not magic
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Magic-File-Names.html#index-remote_002dfile_002dname_002dinhibit_002dcache'>remote-file-name-inhibit-cache</a>()</tt>	the attributes of remote files can be cached for better performance
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Maintaining-Undo.html#index-buffer_002denable_002dundo'>buffer-enable-undo</a>(buffer-or-name)</tt>	this command enables recording undo information for buffer buffer-or-name so that subsequent changes can be undone
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Maintaining-Undo.html#index-buffer_002ddisable_002dundo'>buffer-disable-undo</a>(buffer-or-name)</tt>	 this function discards the undo list of buffer-or-name and disables further recording of undo information
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Maintaining-Undo.html#index-undo_002dlimit'>undo-limit</a>()</tt>	this is the soft limit for the acceptable size of an undo list
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Maintaining-Undo.html#index-undo_002dstrong_002dlimit'>undo-strong-limit</a>()</tt>	this is the upper limit for the acceptable size of an undo list
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Maintaining-Undo.html#index-undo_002douter_002dlimit'>undo-outer-limit</a>()</tt>	if at garbage collection time the undo info for the current command exceeds this limit emacs discards the info and displays a warning
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Maintaining-Undo.html#index-undo_002dask_002dbefore_002ddiscard'>undo-ask-before-discard</a>()</tt>	if this variable is non-nil when the undo info exceeds undo-outer-limit emacs asks in the echo area whether to discard the info
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Major-Modes.html#index-fundamental_002dmode'>fundamental-mode</a>()</tt>	this is the major mode command for fundamental mode
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Major-Modes.html#index-major_002dmode'>major-mode</a>()</tt>	the buffer-local value of this variable holds the symbol for the current major mode
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Making-Backups.html#index-backup_002dbuffer'>backup-buffer</a>()</tt>	this function makes a backup of the file visited by the current buffer if appropriate
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Making-Backups.html#index-make_002dbackup_002dfiles'>make-backup-files</a>()</tt>	this variable determines whether or not to make backup files
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Making-Backups.html#index-backup_002ddirectory_002dalist'>backup-directory-alist</a>()</tt>	this variable’s value is an alist of filename patterns and backup directory names
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Making-Backups.html#index-make_002dbackup_002dfile_002dname_002dfunction'>make-backup-file-name-function</a>()</tt>	this variable’s value is a function to use for making backup file names
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Making-Buttons.html#index-make_002dbutton'>make-button</a>(beg,end,properties)</tt>	this makes a button from beg to end in the current buffer and returns it
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Making-Buttons.html#index-insert_002dbutton'>insert-button</a>(label,properties)</tt>	this insert a button with the label label at point and returns it
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Making-Buttons.html#index-make_002dtext_002dbutton'>make-text-button</a>(beg,end,properties)</tt>	this makes a button from beg to end in the current buffer using text properties
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Making-Buttons.html#index-insert_002dtext_002dbutton'>insert-text-button</a>(label,properties)</tt>	this inserts a button with the label label at point using text properties
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Managing-Overlays.html#index-overlayp'>overlayp</a>(object)</tt>	this function returns t if object is an overlay
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Managing-Overlays.html#index-make_002doverlay'>make-overlay</a>(start,end,buffer,front-advance,rear-advance)</tt>	this function creates and returns an overlay that belongs to buffer and ranges from start to end
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Managing-Overlays.html#index-overlay_002dstart'>overlay-start</a>(overlay)</tt>	this function returns the position at which overlay starts as an integer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Managing-Overlays.html#index-overlay_002dend'>overlay-end</a>(overlay)</tt>	this function returns the position at which overlay ends as an integer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Managing-Overlays.html#index-overlay_002dbuffer'>overlay-buffer</a>(overlay)</tt>	this function returns the buffer that overlay belongs to
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Managing-Overlays.html#index-delete_002doverlay'>delete-overlay</a>(overlay)</tt>	this function deletes overlay
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Managing-Overlays.html#index-move_002doverlay'>move-overlay</a>(overlay,start,end,buffer)</tt>	this function moves overlay to buffer and places its bounds at start and end
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Managing-Overlays.html#index-remove_002doverlays'>remove-overlays</a>(start,end,name,value)</tt>	this function removes all the overlays between start and end whose property name has the value value
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Managing-Overlays.html#index-copy_002doverlay'>copy-overlay</a>(overlay)</tt>	this function returns a copy of overlay
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Managing-Overlays.html#index-overlay_002drecenter'>overlay-recenter</a>(pos)</tt>	this function recenters the overlays of the current buffer around position pos
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Manipulating-Buttons.html#index-button_002dstart'>button-start</a>(button)</tt>	return the position at which button starts
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Manipulating-Buttons.html#index-button_002dend'>button-end</a>(button)</tt>	return the position at which button ends
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Manipulating-Buttons.html#index-button_002dget'>button-get</a>(button,prop)</tt>	get the property of button button named prop
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Manipulating-Buttons.html#index-button_002dput'>button-put</a>(button,prop,val)</tt>	set button’s prop property to val
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Manipulating-Buttons.html#index-button_002dactivate'>button-activate</a>(button,use-mouse-action)</tt>	call button’s action property 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Manipulating-Buttons.html#index-button_002dlabel'>button-label</a>(button)</tt>	return button’s text label
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Manipulating-Buttons.html#index-button_002dtype'>button-type</a>(button)</tt>	return button’s button-type
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Manipulating-Buttons.html#index-button_002dhas_002dtype_002dp'>button-has-type-p</a>(button,type)</tt>	return t if button has button-type type or one of type’s subtypes
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Manipulating-Buttons.html#index-button_002dat'>button-at</a>(pos)</tt>	return the button at position pos in the current buffer or nil
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Manipulating-Buttons.html#index-button_002dtype_002dput'>button-type-put</a>(type,prop,val)</tt>	set the button-type type’s prop property to val
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Manipulating-Buttons.html#index-button_002dtype_002dget'>button-type-get</a>(type,prop)</tt>	get the property of button-type type named prop
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Manipulating-Buttons.html#index-button_002dtype_002dsubtype_002dp'>button-type-subtype-p</a>(type,supertype)</tt>	return t if button-type type is a subtype of supertype
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Mapping-Functions.html#index-mapcar'>mapcar</a>(function,sequence)</tt>	mapcar applies function to each element of sequence in turn and returns a list of the results
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Mapping-Functions.html#index-mapc'>mapc</a>(function,sequence)</tt>	mapc is like mapcar except that function is used for side-effects only—the values it returns are ignored not collected into a list
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Mapping-Functions.html#index-mapconcat'>mapconcat</a>(function,sequence,separator)</tt>	mapconcat applies function to each element of sequence the results which must be strings are concatenated
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Margins.html#index-fill_002dprefix'>fill-prefix</a>()</tt>	this buffer-local variable if non-nil specifies a string of text that appears at the beginning of normal text lines and should be disregarded when filling them
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Margins.html#index-fill_002dcolumn'>fill-column</a>()</tt>	this buffer-local variable specifies the maximum width of filled lines
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Margins.html#index-set_002dleft_002dmargin'>set-left-margin</a>(from,to,margin)</tt>	this sets the left-margin property on the text from from to to to the value margin
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Margins.html#index-set_002dright_002dmargin'>set-right-margin</a>(from,to,margin)</tt>	this sets the right-margin property on the text from from to to to the value margin
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Margins.html#index-current_002dleft_002dmargin'>current-left-margin</a>()</tt>	this function returns the proper left margin value to use for filling the text around point
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Margins.html#index-current_002dfill_002dcolumn'>current-fill-column</a>()</tt>	this function returns the proper fill column value to use for filling the text around point
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Margins.html#index-move_002dto_002dleft_002dmargin'>move-to-left-margin</a>(n,force)</tt>	this function moves point to the left margin of the current line
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Margins.html#index-delete_002dto_002dleft_002dmargin'>delete-to-left-margin</a>(from,to)</tt>	this function removes left margin indentation from the text between from and to
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Margins.html#index-indent_002dto_002dleft_002dmargin'>indent-to-left-margin</a>()</tt>	this function adjusts the indentation at the beginning of the current line to the value specified by the variable left-margin
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Margins.html#index-left_002dmargin'>left-margin</a>()</tt>	this variable specifies the base left margin column
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Margins.html#index-fill_002dnobreak_002dpredicate'>fill-nobreak-predicate</a>()</tt>	this variable gives major modes a way to specify not to break a line at certain places
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Marker-Insertion-Types.html#index-set_002dmarker_002dinsertion_002dtype'>set-marker-insertion-type</a>(marker,type)</tt>	this function sets the insertion type of marker marker to type
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Marker-Insertion-Types.html#index-marker_002dinsertion_002dtype'>marker-insertion-type</a>(marker)</tt>	this function reports the current insertion type of marker
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Math-Functions.html#index-sin'>sin</a>(arg)</tt>	these are the basic trigonometric functions with argument arg measured in radians
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Math-Functions.html#index-asin'>asin</a>(arg)</tt>	the value of asin arg is a number between -pi/2 and pi/2 inclusive whose sine is arg
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Math-Functions.html#index-acos'>acos</a>(arg)</tt>	the value of acos arg is a number between 0 and pi inclusive whose cosine is arg
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Math-Functions.html#index-atan'>atan</a>(y,x)</tt>	the value of atan y is a number between -pi/2 and pi/2 exclusive whose tangent is y
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Math-Functions.html#index-exp'>exp</a>(arg)</tt>	this is the exponential function it returns e to the power arg
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Math-Functions.html#index-log'>log</a>(arg,base)</tt>	this function returns the logarithm of arg with base base
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Math-Functions.html#index-expt'>expt</a>(x,y)</tt>	this function returns x raised to power y
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Math-Functions.html#index-sqrt'>sqrt</a>(arg)</tt>	this returns the square root of arg
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Minibuffer-Commands.html#index-exit_002dminibuffer'>exit-minibuffer</a>()</tt>	this command exits the active minibuffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Minibuffer-Commands.html#index-self_002dinsert_002dand_002dexit'>self-insert-and-exit</a>()</tt>	this command exits the active minibuffer after inserting the last character typed on the keyboard found in last-command-event see command loop info 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Minibuffer-Commands.html#index-previous_002dhistory_002delement'>previous-history-element</a>(n)</tt>	this command replaces the minibuffer contents with the value of the nth previous older history element
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Minibuffer-Commands.html#index-next_002dhistory_002delement'>next-history-element</a>(n)</tt>	this command replaces the minibuffer contents with the value of the nth more recent history element
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Minibuffer-Commands.html#index-previous_002dmatching_002dhistory_002delement'>previous-matching-history-element</a>(pattern,n)</tt>	this command replaces the minibuffer contents with the value of the nth previous older history element that matches pattern a regular expression 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Minibuffer-Commands.html#index-next_002dmatching_002dhistory_002delement'>next-matching-history-element</a>(pattern,n)</tt>	this command replaces the minibuffer contents with the value of the nth next newer history element that matches pattern a regular expression 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Minibuffer-Commands.html#index-previous_002dcomplete_002dhistory_002delement'>previous-complete-history-element</a>(n)</tt>	this command replaces the minibuffer contents with the value of the nth previous older history element that completes the current contents of the minibuffer before the point
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Minibuffer-Commands.html#index-next_002dcomplete_002dhistory_002delement'>next-complete-history-element</a>(n)</tt>	this command replaces the minibuffer contents with the value of the nth next newer history element that completes the current contents of the minibuffer before the point
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Minibuffer-Completion.html#index-completing_002dread'>completing-read</a>(prompt,collection,predicate,require-match,initial,history,default,inherit-input-method)</tt>	this function reads a string in the minibuffer assisting the user by providing completion
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Minibuffer-Contents.html#index-minibuffer_002dprompt'>minibuffer-prompt</a>()</tt>	this function returns the prompt string of the currently active minibuffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Minibuffer-Contents.html#index-minibuffer_002dprompt_002dend'>minibuffer-prompt-end</a>()</tt>	this function returns the current position of the end of the minibuffer prompt if a minibuffer is current
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Minibuffer-Contents.html#index-minibuffer_002dprompt_002dwidth'>minibuffer-prompt-width</a>()</tt>	this function returns the current display-width of the minibuffer prompt if a minibuffer is current
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Minibuffer-Contents.html#index-minibuffer_002dcontents'>minibuffer-contents</a>()</tt>	this function returns the editable contents of the minibuffer that is everything except the prompt as a string if a minibuffer is current
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Minibuffer-Contents.html#index-minibuffer_002dcontents_002dno_002dproperties'>minibuffer-contents-no-properties</a>()</tt>	this is like minibuffer-contents except that it does not copy text properties just the characters themselves
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Minibuffer-Contents.html#index-delete_002dminibuffer_002dcontents'>delete-minibuffer-contents</a>()</tt>	this function erases the editable contents of the minibuffer that is everything except the prompt if a minibuffer is current
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Minibuffer-History.html#index-add_002dto_002dhistory'>add-to-history</a>(history-var,newelt,maxelt,keep-all)</tt>	this function adds a new element newelt if it isn’t the empty string to the history list stored in the variable history-var and returns the updated history list
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Minibuffer-History.html#index-history_002dlength'>history-length</a>()</tt>	the value of this variable specifies the maximum length for all history lists that don’t specify their own maximum lengths
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Minibuffer-History.html#index-history_002ddelete_002dduplicates'>history-delete-duplicates</a>()</tt>	if the value of this variable is t that means when adding a new history element all previous identical elements are deleted
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Minibuffer-Misc.html#index-minibufferp'>minibufferp</a>(buffer-or-name)</tt>	this function returns non-nil if buffer-or-name is a minibuffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Minibuffer-Misc.html#index-minibuffer_002dselected_002dwindow'>minibuffer-selected-window</a>()</tt>	this function returns the window that was selected when the minibuffer was entered
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Minibuffer-Misc.html#index-max_002dmini_002dwindow_002dheight'>max-mini-window-height</a>()</tt>	this variable specifies the maximum height for resizing minibuffer windows
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Minibuffer-Misc.html#index-minibuffer_002dmessage'>minibuffer-message</a>(string,args)</tt>	this function displays string temporarily at the end of the minibuffer text for a few seconds or until the next input event arrives whichever comes first
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Minibuffer-Misc.html#index-minibuffer_002dinactive_002dmode'>minibuffer-inactive-mode</a>()</tt>	this is the major mode used in inactive minibuffers
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Minibuffer-Windows.html#index-active_002dminibuffer_002dwindow'>active-minibuffer-window</a>()</tt>	this function returns the currently active minibuffer window or nil if there is none
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Minibuffer-Windows.html#index-minibuffer_002dwindow'>minibuffer-window</a>(frame)</tt>	this function returns the minibuffer window used for frame frame
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Minibuffer-Windows.html#index-set_002dminibuffer_002dwindow'>set-minibuffer-window</a>(window)</tt>	this function specifies window as the minibuffer window to use
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Minibuffer-Windows.html#index-window_002dminibuffer_002dp'>window-minibuffer-p</a>(window)</tt>	this function returns non-nil if window is a minibuffer window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Minibuffer-Windows.html#index-minibuffer_002dwindow_002dactive_002dp'>minibuffer-window-active-p</a>(window)</tt>	this function returns non-nil if window is the currently active minibuffer window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Misc-Network.html#index-network_002dinterface_002dlist'>network-interface-list</a>()</tt>	this function returns a list describing the network interfaces of the machine you are using
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Misc-Network.html#index-network_002dinterface_002dinfo'>network-interface-info</a>(ifname)</tt>	this function returns information about the network interface named ifname
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Misc-Network.html#index-format_002dnetwork_002daddress'>format-network-address</a>(address,omit-port)</tt>	this function converts the lisp representation of a network address to a string
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Mode-Help.html#index-describe_002dmode'>describe-mode</a>(buffer)</tt>	this command displays the documentation of the current buffer’s major mode and minor modes
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Mode-Hooks.html#index-run_002dmode_002dhooks'>run-mode-hooks</a>(hookvars)</tt>	major modes should run their mode hook using this function
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Mode-Line-Basics.html#index-force_002dmode_002dline_002dupdate'>force-mode-line-update</a>(all)</tt>	this function forces emacs to update the current buffer’s mode line and header line based on the latest values of all relevant variables during its next redisplay cycle
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Mode-Line-Top.html#index-mode_002dline_002dformat'>mode-line-format</a>()</tt>	the value of this variable is a mode line construct that controls the contents of the mode-line
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Mode-Line-Variables.html#index-mode_002dline_002dposition'>mode-line-position</a>()</tt>	this variable indicates the position in the buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Mode-Line-Variables.html#index-mode_002dline_002dmodes'>mode-line-modes</a>()</tt>	this variable displays the buffer’s major and minor modes
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Mode_002dSpecific-Indent.html#index-indent_002dfor_002dtab_002dcommand'>indent-for-tab-command</a>(rigid)</tt>	this is the command bound to tab in most editing modes
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Mode_002dSpecific-Indent.html#index-indent_002daccording_002dto_002dmode'>indent-according-to-mode</a>()</tt>	this command calls the function in indent-line-function to indent the current line in a way appropriate for the current major mode
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Mode_002dSpecific-Indent.html#index-newline_002dand_002dindent'>newline-and-indent</a>()</tt>	this function inserts a newline then indents the new line the one following the newline just inserted according to the major mode
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Mode_002dSpecific-Indent.html#index-reindent_002dthen_002dnewline_002dand_002dindent'>reindent-then-newline-and-indent</a>()</tt>	this command reindents the current line inserts a newline at point and then indents the new line the one following the newline just inserted 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Mode_002dSpecific-Indent.html#index-tab_002dalways_002dindent'>tab-always-indent</a>()</tt>	this variable can be used to customize the behavior of the tab indent-for-tab-command command
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Modification-Time.html#index-verify_002dvisited_002dfile_002dmodtime'>verify-visited-file-modtime</a>(buffer)</tt>	this function compares what buffer by default the current-buffer has recorded for the modification time of its visited file against the actual modification time of the file as recorded by the operating system
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Modification-Time.html#index-clear_002dvisited_002dfile_002dmodtime'>clear-visited-file-modtime</a>()</tt>	this function clears out the record of the last modification time of the file being visited by the current buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Modification-Time.html#index-visited_002dfile_002dmodtime'>visited-file-modtime</a>()</tt>	this function returns the current buffer’s recorded last file modification time as a list of the form high low microsec picosec 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Modification-Time.html#index-set_002dvisited_002dfile_002dmodtime'>set-visited-file-modtime</a>(time)</tt>	this function updates the buffer’s record of the last modification time of the visited file to the value specified by time if time is not nil and otherwise to the last modification time of the visited file
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Modification-Time.html#index-ask_002duser_002dabout_002dsupersession_002dthreat'>ask-user-about-supersession-threat</a>(filename)</tt>	this function is used to ask a user how to proceed after an attempt to modify an buffer visiting file filename when the file is newer than the buffer text
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Modifying-Menus.html#index-define_002dkey_002dafter'>define-key-after</a>(map,key,binding,after)</tt>	define a binding in map for key with value binding just like define-key but position the binding in map after the binding for the event after
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Modifying-Strings.html#index-store_002dsubstring'>store-substring</a>(string,idx,obj)</tt>	this function alters part of the contents of the string string by storing obj starting at index idx
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Modifying-Strings.html#index-clear_002dstring'>clear-string</a>(string)</tt>	this makes string a unibyte string and clears its contents to zeros
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Motion-and-Syntax.html#index-skip_002dsyntax_002dforward'>skip-syntax-forward</a>(syntaxes,limit)</tt>	this function moves point forward across characters having syntax classes mentioned in syntaxes a string of syntax class characters 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Motion-and-Syntax.html#index-skip_002dsyntax_002dbackward'>skip-syntax-backward</a>(syntaxes,limit)</tt>	this function moves point backward across characters whose syntax classes are mentioned in syntaxes
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Motion-and-Syntax.html#index-backward_002dprefix_002dchars'>backward-prefix-chars</a>()</tt>	this function moves point backward over any number of characters with expression prefix syntax
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Motion-by-Indent.html#index-back_002dto_002dindentation'>back-to-indentation</a>()</tt>	this command moves point to the first non-whitespace character in the current line which is the line in which point is located 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Motion-by-Indent.html#index-backward_002dto_002dindentation'>backward-to-indentation</a>(arg)</tt>	this command moves point backward arg lines and then to the first nonblank character on that line
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Motion-by-Indent.html#index-forward_002dto_002dindentation'>forward-to-indentation</a>(arg)</tt>	this command moves point forward arg lines and then to the first nonblank character on that line
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Motion-via-Parsing.html#index-scan_002dlists'>scan-lists</a>(from,count,depth)</tt>	this function scans forward count balanced parenthetical groupings from position from
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Motion-via-Parsing.html#index-scan_002dsexps'>scan-sexps</a>(from,count)</tt>	this function scans forward count sexps from position from
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Motion-via-Parsing.html#index-forward_002dcomment'>forward-comment</a>(count)</tt>	this function moves point forward across count complete comments that is including the starting delimiter and the terminating delimiter if any plus any whitespace encountered on the way
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Mouse-Position.html#index-mouse_002dposition'>mouse-position</a>()</tt>	this function returns a description of the position of the mouse
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Mouse-Position.html#index-set_002dmouse_002dposition'>set-mouse-position</a>(frame,x,y)</tt>	this function warps the mouse to position x y in frame frame
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Mouse-Position.html#index-mouse_002dpixel_002dposition'>mouse-pixel-position</a>()</tt>	this function is like mouse-position except that it returns coordinates in units of pixels rather than units of characters
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Mouse-Position.html#index-set_002dmouse_002dpixel_002dposition'>set-mouse-pixel-position</a>(frame,x,y)</tt>	this function warps the mouse like set-mouse-position except that x and y are in units of pixels rather than units of characters
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Mouse-Position.html#index-frame_002dpointer_002dvisible_002dp'>frame-pointer-visible-p</a>(frame)</tt>	this predicate function returns non-nil if the mouse pointer displayed on frame is visible otherwise it returns nil
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Moving-Markers.html#index-set_002dmarker'>set-marker</a>(marker,position,buffer)</tt>	this function moves marker to position in buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Moving-Markers.html#index-move_002dmarker'>move-marker</a>(marker,position,buffer)</tt>	this is another name for set-marker
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Multi_002dfile-Packages.html#index-define_002dpackage'>define-package</a>(name,version,docstring,requirements)</tt>	this function defines a package
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Multi_002dFrame-Images.html#index-image_002dmulti_002dframe_002dp'>image-multi-frame-p</a>(image)</tt>	this function returns non-nil if image contains more than one frame
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Multi_002dFrame-Images.html#index-image_002dcurrent_002dframe'>image-current-frame</a>(image)</tt>	this function returns the index of the current frame number for image counting from 0
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Multi_002dFrame-Images.html#index-image_002dshow_002dframe'>image-show-frame</a>(image,n,nocheck)</tt>	this function switches image to frame number n
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Multi_002dFrame-Images.html#index-image_002danimate'>image-animate</a>(image,index,limit)</tt>	this function animates image
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Multi_002dFrame-Images.html#index-image_002danimate_002dtimer'>image-animate-timer</a>(image)</tt>	this function returns the timer responsible for animating image if there is one
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Multiple-Queries.html#index-map_002dy_002dor_002dn_002dp'>map-y-or-n-p</a>(prompter,actor,list,help,action-alist,no-cursor-in-echo-area)</tt>	this function asks the user a series of questions reading a single-character answer in the echo area for each one
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Multiple-Terminals.html#index-terminal_002dname'>terminal-name</a>(terminal)</tt>	this function returns the file name of the device used by terminal
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Multiple-Terminals.html#index-terminal_002dlist'>terminal-list</a>()</tt>	this function returns a list of all live terminal objects
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Multiple-Terminals.html#index-get_002ddevice_002dterminal'>get-device-terminal</a>(device)</tt>	this function returns a terminal whose device name is given by device
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Multiple-Terminals.html#index-delete_002dterminal'>delete-terminal</a>(terminal,force)</tt>	this function deletes all frames on terminal and frees the resources used by it
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Multiple-Terminals.html#index-make_002dframe_002don_002ddisplay'>make-frame-on-display</a>(display,parameters)</tt>	this function creates and returns a new frame on display taking the other frame parameters from the alist parameters
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Multiple-Terminals.html#index-x_002ddisplay_002dlist'>x-display-list</a>()</tt>	this function returns a list that indicates which x displays emacs has a connection to
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Multiple-Terminals.html#index-x_002dopen_002dconnection'>x-open-connection</a>(display,xrm-string,must-succeed)</tt>	this function opens a connection to the x display display without creating a frame on that display
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Multiple-Terminals.html#index-x_002dclose_002dconnection'>x-close-connection</a>(display)</tt>	this function closes the connection to display display
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Multiple-Terminals.html#index-display_002dmonitor_002dattributes_002dlist'>display-monitor-attributes-list</a>(display)</tt>	this function returns a list of physical monitor attributes on display which can be a display name a string a terminal or a frame if omitted or nil it defaults to the selected frame’s display
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Multiple-Terminals.html#index-frame_002dmonitor_002dattributes'>frame-monitor-attributes</a>(frame)</tt>	this function returns the attributes of the physical monitor dominating see above frame which defaults to the selected frame
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Named-Features.html#index-provide'>provide</a>(feature,subfeatures)</tt>	this function announces that feature is now loaded or being loaded into the current emacs session
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Named-Features.html#index-require'>require</a>(feature,filename,noerror)</tt>	this function checks whether feature is present in the current emacs session (using featurep feature ; see below)
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Named-Features.html#index-featurep'>featurep</a>(feature,subfeature)</tt>	this function returns t if feature has been provided in the current emacs session 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Narrowing.html#index-narrow_002dto_002dregion'>narrow-to-region</a>(start,end)</tt>	this function sets the accessible portion of the current buffer to start at start and end at end
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Narrowing.html#index-narrow_002dto_002dpage'>narrow-to-page</a>(move-count)</tt>	this function sets the accessible portion of the current buffer to include just the current page
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Narrowing.html#index-widen'>widen</a>()</tt>	 this function cancels any narrowing in the current buffer so that the entire contents are accessible
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Narrowing.html#index-buffer_002dnarrowed_002dp'>buffer-narrowed-p</a>()</tt>	this function returns non-nil if the buffer is narrowed and nil otherwise
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Near-Point.html#index-char_002dafter'>char-after</a>(position)</tt>	this function returns the character in the current buffer at 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Near-Point.html#index-char_002dbefore'>char-before</a>(position)</tt>	this function returns the character in the current buffer immediately before position position
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Near-Point.html#index-following_002dchar'>following-char</a>()</tt>	this function returns the character following point in the current buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Near-Point.html#index-preceding_002dchar'>preceding-char</a>()</tt>	this function returns the character preceding point in the current buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Near-Point.html#index-bobp'>bobp</a>()</tt>	this function returns t if point is at the beginning of the buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Near-Point.html#index-eobp'>eobp</a>()</tt>	this function returns t if point is at the end of the buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Near-Point.html#index-bolp'>bolp</a>()</tt>	this function returns t if point is at the beginning of a line
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Near-Point.html#index-eolp'>eolp</a>()</tt>	this function returns t if point is at the end of a line
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Network-Options.html#index-set_002dnetwork_002dprocess_002doption'>set-network-process-option</a>(process,option,value,no-error)</tt>	this function sets or modifies a network option for network process process
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Network-Processes.html#index-make_002dnetwork_002dprocess'>make-network-process</a>(args)</tt>	this function creates a network connection or server and returns the process object that represents it
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Network.html#index-open_002dnetwork_002dstream'>open-network-stream</a>(name,buffer,host,service,parameters)</tt>	this function opens a tcp connection with optional encryption and returns a process object that represents the connection
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/nil-and-t.html#index-booleanp'>booleanp</a>(object)</tt>	return non-nil if object is one of the two canonical boolean values t or nil
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Numbered-Backups.html#index-version_002dcontrol'>version-control</a>()</tt>	this variable controls whether to make a single non-numbered backup file or multiple numbered backups
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Numbered-Backups.html#index-kept_002dnew_002dversions'>kept-new-versions</a>()</tt>	the value of this variable is the number of newest versions to keep when a new numbered backup is made
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Numbered-Backups.html#index-kept_002dold_002dversions'>kept-old-versions</a>()</tt>	the value of this variable is the number of oldest versions to keep when a new numbered backup is made
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Numbered-Backups.html#index-delete_002dold_002dversions'>delete-old-versions</a>()</tt>	if this variable is t then saving a file deletes excess backup versions silently
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Numbered-Backups.html#index-dired_002dkept_002dversions'>dired-kept-versions</a>()</tt>	this variable specifies how many of the newest backup versions to keep in the dired command 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Numeric-Conversions.html#index-float'>float</a>(number)</tt>	this returns number converted to floating point
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Numeric-Conversions.html#index-truncate'>truncate</a>(number,divisor)</tt>	this returns number converted to an integer by rounding towards zero
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Numeric-Conversions.html#index-floor'>floor</a>(number,divisor)</tt>	this returns number converted to an integer by rounding downward towards negative infinity 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Numeric-Conversions.html#index-ceiling'>ceiling</a>(number,divisor)</tt>	this returns number converted to an integer by rounding upward towards positive infinity 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Numeric-Conversions.html#index-round'>round</a>(number,divisor)</tt>	this returns number converted to an integer by rounding towards the nearest integer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Object-from-Minibuffer.html#index-read_002dminibuffer'>read-minibuffer</a>(prompt,initial)</tt>	this function reads a lisp object using the minibuffer and returns it without evaluating it
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Object-from-Minibuffer.html#index-eval_002dminibuffer'>eval-minibuffer</a>(prompt,initial)</tt>	this function reads a lisp expression using the minibuffer evaluates it then returns the result
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Object-from-Minibuffer.html#index-edit_002dand_002deval_002dcommand'>edit-and-eval-command</a>(prompt,form)</tt>	this function reads a lisp expression in the minibuffer evaluates it then returns the result
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Obsolete-Functions.html#index-make_002dobsolete'>make-obsolete</a>(obsolete-name,current-name,when)</tt>	this function marks obsolete-name as obsolete
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Obsolete-Functions.html#index-define_002dobsolete_002dfunction_002dalias'>define-obsolete-function-alias</a>(obsolete-name,current-name,when,doc)</tt>	this convenience macro marks the function obsolete-name obsolete and also defines it as an alias for the function current-name
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Obsolete-Functions.html#index-set_002dadvertised_002dcalling_002dconvention'>set-advertised-calling-convention</a>(function,signature,when)</tt>	this function specifies the argument list signature as the correct way to call function
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Operator-Precedence-Grammars.html#index-smie_002dprec2_002d_003egrammar'>smie-prec2->grammar</a>(table)</tt>	this function takes a prec2 grammar table and returns an alist suitable for use in smie-setup
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Operator-Precedence-Grammars.html#index-smie_002dmerge_002dprec2s'>smie-merge-prec2s</a>(tables)</tt>	this function takes several prec2 tables and merges them into a new prec2 table
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Operator-Precedence-Grammars.html#index-smie_002dprecs_002d_003eprec2'>smie-precs->prec2</a>(precs)</tt>	this function builds a prec2 table from a table of precedences precs
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Operator-Precedence-Grammars.html#index-smie_002dbnf_002d_003eprec2'>smie-bnf->prec2</a>(bnf,resolvers)</tt>	this function lets you specify the grammar using a bnf notation
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Other-Font-Lock-Variables.html#index-jit_002dlock_002dregister'>jit-lock-register</a>(function,contextual)</tt>	this function tells font lock mode to run the lisp function function any time it has to fontify or refontify part of the current buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Other-Font-Lock-Variables.html#index-jit_002dlock_002dunregister'>jit-lock-unregister</a>(function)</tt>	if function was previously registered as a fontification function using jit-lock-register this function unregisters it
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Other-Hash.html#index-hash_002dtable_002dp'>hash-table-p</a>(table)</tt>	this returns non-nil if table is a hash table object
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Other-Hash.html#index-copy_002dhash_002dtable'>copy-hash-table</a>(table)</tt>	this function creates and returns a copy of table
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Other-Hash.html#index-hash_002dtable_002dcount'>hash-table-count</a>(table)</tt>	this function returns the actual number of entries in table
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Other-Hash.html#index-hash_002dtable_002dtest'>hash-table-test</a>(table)</tt>	this returns the test value that was given when table was created to specify how to hash and compare keys
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Other-Hash.html#index-hash_002dtable_002dweakness'>hash-table-weakness</a>(table)</tt>	this function returns the weak value that was specified for hash table table
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Other-Hash.html#index-hash_002dtable_002drehash_002dsize'>hash-table-rehash-size</a>(table)</tt>	this returns the rehash size of table
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Other-Hash.html#index-hash_002dtable_002drehash_002dthreshold'>hash-table-rehash-threshold</a>(table)</tt>	this returns the rehash threshold of table
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Other-Hash.html#index-hash_002dtable_002dsize'>hash-table-size</a>(table)</tt>	this returns the current nominal size of table
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Output-Functions.html#index-print'>print</a>(object,stream)</tt>	 the print function is a convenient way of printing
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Output-Functions.html#index-prin1'>prin1</a>(object,stream)</tt>	this function outputs the printed representation of object to stream
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Output-Functions.html#index-princ'>princ</a>(object,stream)</tt>	this function outputs the printed representation of object to stream
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Output-Functions.html#index-terpri'>terpri</a>(stream)</tt>	 this function outputs a newline to stream
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Output-Functions.html#index-write_002dchar'>write-char</a>(character,stream)</tt>	this function outputs character to stream
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Output-Functions.html#index-prin1_002dto_002dstring'>prin1-to-string</a>(object,noescape)</tt>	 this function returns a string containing the text that prin1 would have printed for the same argument
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Output-Functions.html#index-pp'>pp</a>(object,stream)</tt>	this function outputs object to stream just like prin1 but does it in a more “pretty” way
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Output-Variables.html#index-eval_002dexpression_002dprint_002dlength'>eval-expression-print-length</a>()</tt>	these are the values for print-length and print-level used by eval-expression and thus indirectly by many interactive evaluation commands see evaluating emacs-lisp expressions in the gnu emacs manual 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Overlay-Properties.html#index-overlay_002dget'>overlay-get</a>(overlay,prop)</tt>	this function returns the value of property prop recorded in overlay if any
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Overlay-Properties.html#index-overlay_002dput'>overlay-put</a>(overlay,prop,value)</tt>	this function sets the value of property prop recorded in overlay to value
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Overlay-Properties.html#index-overlay_002dproperties'>overlay-properties</a>(overlay)</tt>	this returns a copy of the property list of overlay
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Package-Archives.html#index-package_002darchives'>package-archives</a>()</tt>	the value of this variable is an alist of package archives recognized by the emacs package manager
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Package-Archives.html#index-package_002darchive_002dupload_002dbase'>package-archive-upload-base</a>()</tt>	the value of this variable is the base location of a package archive as a directory name
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Package-Archives.html#index-package_002dupload_002dfile'>package-upload-file</a>(filename)</tt>	this command prompts for filename a file name and uploads that file to package-archive-upload-base
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Package-Archives.html#index-package_002dupload_002dbuffer'>package-upload-buffer</a>()</tt>	this command is similar to package-upload-file but instead of prompting for a package file it uploads the contents of the current buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Packaging-Basics.html#index-package_002dinitialize'>package-initialize</a>(no-activate)</tt>	this function initializes emacs’ internal record of which packages are installed and loads them
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Parameter-Access.html#index-frame_002dparameter'>frame-parameter</a>(frame,parameter)</tt>	this function returns the value of the parameter parameter a symbol of frame
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Parameter-Access.html#index-frame_002dparameters'>frame-parameters</a>(frame)</tt>	the function frame-parameters returns an alist listing all the parameters of frame and their values
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Parameter-Access.html#index-modify_002dframe_002dparameters'>modify-frame-parameters</a>(frame,alist)</tt>	this function alters the parameters of frame frame based on the elements of alist
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Parameter-Access.html#index-set_002dframe_002dparameter'>set-frame-parameter</a>(frame,parm,value)</tt>	this function sets the frame parameter parm to the specified value
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Parameter-Access.html#index-modify_002dall_002dframes_002dparameters'>modify-all-frames-parameters</a>(alist)</tt>	this function alters the frame parameters of all existing frames according to alist then modifies default-frame-alist and if necessary initial-frame-alist to apply the same parameter values to frames that will be created henceforth
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Parser-State.html#index-syntax_002dppss_002dtoplevel_002dpos'>syntax-ppss-toplevel-pos</a>(state)</tt>	this function extracts from parser state state the last position scanned in the parse which was at top level in grammatical structure
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Parsing-HTML_002fXML.html#index-libxml_002dparse_002dhtml_002dregion'>libxml-parse-html-region</a>(start,end,base-url)</tt>	this function parses the text between start and end as html and returns a list representing the html parse tree
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Parsing-HTML_002fXML.html#index-shr_002dinsert_002ddocument'>shr-insert-document</a>(dom)</tt>	this function renders the parsed html in dom into the current buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Parsing-HTML_002fXML.html#index-libxml_002dparse_002dxml_002dregion'>libxml-parse-xml-region</a>(start,end,base-url)</tt>	this function is the same as libxml-parse-html-region except that it parses the text as xml rather than html so it is stricter about syntax 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Plist-Access.html#index-plist_002dget'>plist-get</a>(plist,property)</tt>	this returns the value of the property property stored in the property list plist
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Plist-Access.html#index-plist_002dput'>plist-put</a>(plist,property,value)</tt>	this stores value as the value of the property property in the property list plist
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Plist-Access.html#index-lax_002dplist_002dget'>lax-plist-get</a>(plist,property)</tt>	like plist-get except that it compares properties using equal instead of eq
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Plist-Access.html#index-lax_002dplist_002dput'>lax-plist-put</a>(plist,property,value)</tt>	like plist-put except that it compares properties using equal instead of eq
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Plist-Access.html#index-plist_002dmember'>plist-member</a>(plist,property)</tt>	this returns non-nil if plist contains the given property
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Point.html#index-point-1'>point</a>()</tt>	 this function returns the value of point in the current buffer as an integer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Point.html#index-point_002dmin'>point-min</a>()</tt>	this function returns the minimum accessible value of point in the current buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Point.html#index-point_002dmax'>point-max</a>()</tt>	this function returns the maximum accessible value of point in the current buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Point.html#index-buffer_002dend'>buffer-end</a>(flag)</tt>	this function returns point-max if flag is greater than 0 point-min otherwise
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Point.html#index-buffer_002dsize'>buffer-size</a>(buffer)</tt>	this function returns the total number of characters in the current buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Pointer-Shape.html#index-void_002dtext_002darea_002dpointer'>void-text-area-pointer</a>()</tt>	this variable specifies the mouse pointer style for void text areas
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Pop_002dUp-Menus.html#index-x_002dpopup_002dmenu'>x-popup-menu</a>(position,menu)</tt>	this function displays a pop-up menu and returns an indication of what selection the user makes
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Position-Parse.html#index-syntax_002dppss'>syntax-ppss</a>(pos)</tt>	this function returns the parser state that the parser would reach at position pos starting from the beginning of the buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Position-Parse.html#index-syntax_002dppss_002dflush_002dcache'>syntax-ppss-flush-cache</a>(beg,ignored-args)</tt>	this function flushes the cache used by syntax-ppss starting at position beg
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/POSIX-Regexps.html#index-posix_002dsearch_002dforward'>posix-search-forward</a>(regexp,limit,noerror,repeat)</tt>	this is like re-search-forward except that it performs the full backtracking specified by the posix standard for regular expression matching
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/POSIX-Regexps.html#index-posix_002dsearch_002dbackward'>posix-search-backward</a>(regexp,limit,noerror,repeat)</tt>	this is like re-search-backward except that it performs the full backtracking specified by the posix standard for regular expression matching
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/POSIX-Regexps.html#index-posix_002dlooking_002dat'>posix-looking-at</a>(regexp)</tt>	this is like looking-at except that it performs the full backtracking specified by the posix standard for regular expression matching
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/POSIX-Regexps.html#index-posix_002dstring_002dmatch'>posix-string-match</a>(regexp,string,start)</tt>	this is like string-match except that it performs the full backtracking specified by the posix standard for regular expression matching
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Predicates-for-Strings.html#index-stringp'>stringp</a>(object)</tt>	this function returns t if object is a string nil otherwise
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Predicates-for-Strings.html#index-string_002dor_002dnull_002dp'>string-or-null-p</a>(object)</tt>	this function returns t if object is a string or nil
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Predicates-for-Strings.html#index-char_002dor_002dstring_002dp'>char-or-string-p</a>(object)</tt>	this function returns t if object is a string or a character 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Predicates-on-Markers.html#index-markerp'>markerp</a>(object)</tt>	this function returns t if object is a marker nil otherwise
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Predicates-on-Markers.html#index-integer_002dor_002dmarker_002dp'>integer-or-marker-p</a>(object)</tt>	this function returns t if object is an integer or a marker nil otherwise
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Predicates-on-Markers.html#index-number_002dor_002dmarker_002dp'>number-or-marker-p</a>(object)</tt>	this function returns t if object is a number either integer or floating point or a marker nil otherwise
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Predicates-on-Numbers.html#index-floatp'>floatp</a>(object)</tt>	this predicate tests whether its argument is floating point and returns t if so nil otherwise
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Predicates-on-Numbers.html#index-integerp'>integerp</a>(object)</tt>	this predicate tests whether its argument is an integer and returns t if so nil otherwise
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Predicates-on-Numbers.html#index-numberp'>numberp</a>(object)</tt>	this predicate tests whether its argument is a number either integer or floating point and returns t if so nil otherwise
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Predicates-on-Numbers.html#index-natnump'>natnump</a>(object)</tt>	 this predicate (whose name comes from the phrase “natural number”) tests to see whether its argument is a nonnegative integer and returns t if so nil otherwise
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Predicates-on-Numbers.html#index-zerop'>zerop</a>(number)</tt>	this predicate tests whether its argument is zero and returns t if so nil otherwise
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Prefix-Command-Arguments.html#index-prefix_002dnumeric_002dvalue'>prefix-numeric-value</a>(arg)</tt>	this function returns the numeric meaning of a valid raw prefix argument value arg
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Prefix-Command-Arguments.html#index-universal_002dargument'>universal-argument</a>()</tt>	this command reads input and specifies a prefix argument for the following command
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Prefix-Command-Arguments.html#index-digit_002dargument'>digit-argument</a>(arg)</tt>	this command adds to the prefix argument for the following command
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Prefix-Command-Arguments.html#index-negative_002dargument'>negative-argument</a>(arg)</tt>	this command adds to the numeric argument for the next command
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Prefix-Keys.html#index-define_002dprefix_002dcommand'>define-prefix-command</a>(symbol,mapvar,prompt)</tt>	 this function prepares symbol for use as a prefix key’s binding it creates a sparse keymap and stores it as symbol’s function definition
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Primitive-Indent.html#index-current_002dindentation'>current-indentation</a>()</tt>	this function returns the indentation of the current line which is the horizontal position of the first nonblank character
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Primitive-Indent.html#index-indent_002dto'>indent-to</a>(column,minimum)</tt>	this function indents from point with tabs and spaces until column is reached
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Primitive-Indent.html#index-indent_002dtabs_002dmode'>indent-tabs-mode</a>()</tt>	if this variable is non-nil indentation functions can insert tabs as well as spaces
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Printing-in-Edebug.html#index-edebug_002dprint_002dlength'>edebug-print-length</a>()</tt>	if non-nil edebug binds print-length to this value while printing results
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Printing-in-Edebug.html#index-edebug_002dprint_002dlevel'>edebug-print-level</a>()</tt>	if non-nil edebug binds print-level to this value while printing results
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Printing-in-Edebug.html#index-edebug_002dprint_002dcircle'>edebug-print-circle</a>()</tt>	if non-nil edebug binds print-circle to this value while printing results
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Process-Buffers.html#index-process_002dbuffer'>process-buffer</a>(process)</tt>	this function returns the associated buffer of the process process
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Process-Buffers.html#index-process_002dmark'>process-mark</a>(process)</tt>	this function returns the process marker for process which is the marker that says where to insert output from the process
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Process-Buffers.html#index-set_002dprocess_002dbuffer'>set-process-buffer</a>(process,buffer)</tt>	this function sets the buffer associated with process to buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Process-Buffers.html#index-get_002dbuffer_002dprocess'>get-buffer-process</a>(buffer-or-name)</tt>	this function returns a nondeleted process associated with the buffer specified by buffer-or-name
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Process-Information.html#index-list_002dprocesses'>list-processes</a>(query-only,buffer)</tt>	this command displays a listing of all living processes
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Process-Information.html#index-process_002dlist'>process-list</a>()</tt>	this function returns a list of all processes that have not been deleted
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Process-Information.html#index-get_002dprocess'>get-process</a>(name)</tt>	this function returns the process named name a string or nil if there is none
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Process-Information.html#index-process_002dcommand'>process-command</a>(process)</tt>	this function returns the command that was executed to start process
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Process-Information.html#index-process_002dcontact'>process-contact</a>(process,key)</tt>	 this function returns information about how a network or serial process was set up
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Process-Information.html#index-process_002did'>process-id</a>(process)</tt>	this function returns the pid of process
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Process-Information.html#index-process_002dname'>process-name</a>(process)</tt>	this function returns the name of process as a string
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Process-Information.html#index-process_002dstatus'>process-status</a>(process-name)</tt>	this function returns the status of process-name as a symbol
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Process-Information.html#index-process_002dlive_002dp'>process-live-p</a>(process)</tt>	this function returns non-nil if process is alive
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Process-Information.html#index-process_002dtype'>process-type</a>(process)</tt>	this function returns the symbol network for a network connection or server serial for a serial port connection or real for a real subprocess
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Process-Information.html#index-process_002dexit_002dstatus'>process-exit-status</a>(process)</tt>	this function returns the exit status of process or the signal number that killed it
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Process-Information.html#index-process_002dtty_002dname'>process-tty-name</a>(process)</tt>	this function returns the terminal name that process is using for its communication with emacs—or nil if it is using pipes instead of a terminal see process-connection-type in asynchronous processes 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Process-Information.html#index-process_002dcoding_002dsystem'>process-coding-system</a>(process)</tt>	this function returns a cons cell (decode 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Process-Information.html#index-set_002dprocess_002dcoding_002dsystem'>set-process-coding-system</a>(process,decoding-system,encoding-system)</tt>	this function specifies the coding systems to use for subsequent output from and input to process
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Process-Information.html#index-process_002dget'>process-get</a>(process,propname)</tt>	this function returns the value of the propname property of process
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Process-Information.html#index-process_002dput'>process-put</a>(process,propname,value)</tt>	this function sets the value of the propname property of process to value
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Process-Information.html#index-process_002dplist'>process-plist</a>(process)</tt>	this function returns the process plist of process
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Process-Information.html#index-set_002dprocess_002dplist'>set-process-plist</a>(process,plist)</tt>	this function sets the process plist of process to plist
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Processes.html#index-processp'>processp</a>(object)</tt>	this function returns t if object represents an emacs subprocess nil otherwise
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Processor-Run-Time.html#index-emacs_002duptime'>emacs-uptime</a>(format)</tt>	 this function returns a string representing the emacs uptime—the elapsed wall-clock time this instance of emacs is running
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Processor-Run-Time.html#index-get_002dinternal_002drun_002dtime'>get-internal-run-time</a>()</tt>	this function returns the processor run time used by emacs as a list of four integers high low microsec picosec using the same format as current-time see time of day 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Processor-Run-Time.html#index-emacs_002dinit_002dtime'>emacs-init-time</a>()</tt>	this function returns the duration of the emacs initialization see startup summary in seconds as a string
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Programmed-Completion.html#index-completion_002dtable_002ddynamic'>completion-table-dynamic</a>(function)</tt>	this function is a convenient way to write a function that can act as a programmed completion function
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Programmed-Completion.html#index-completion_002dtable_002dwith_002dcache'>completion-table-with-cache</a>(function,ignore-case)</tt>	this is a wrapper for completion-table-dynamic that saves the last argument-result pair
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Progress.html#index-make_002dprogress_002dreporter'>make-progress-reporter</a>(message,min-value,max-value,current-value,min-change,min-time)</tt>	this function creates and returns a progress reporter object which you will use as an argument for the other functions listed below
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Progress.html#index-progress_002dreporter_002dupdate'>progress-reporter-update</a>(reporter,value)</tt>	this function does the main work of reporting progress of your operation
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Progress.html#index-progress_002dreporter_002dforce_002dupdate'>progress-reporter-force-update</a>(reporter,value,new-message)</tt>	this function is similar to progress-reporter-update except that it prints a message in the echo area unconditionally
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Progress.html#index-progress_002dreporter_002ddone'>progress-reporter-done</a>(reporter)</tt>	this function should be called when the operation is finished
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Property-Search.html#index-next_002dproperty_002dchange'>next-property-change</a>(pos,object,limit)</tt>	the function scans the text forward from position pos in the string or buffer object until it finds a change in some text property then returns the position of the change
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Property-Search.html#index-previous_002dproperty_002dchange'>previous-property-change</a>(pos,object,limit)</tt>	this is like next-property-change but scans back from pos instead of forward
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Property-Search.html#index-next_002dsingle_002dproperty_002dchange'>next-single-property-change</a>(pos,prop,object,limit)</tt>	the function scans text for a change in the prop property then returns the position of the change
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Property-Search.html#index-previous_002dsingle_002dproperty_002dchange'>previous-single-property-change</a>(pos,prop,object,limit)</tt>	this is like next-single-property-change but scans back from pos instead of forward
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Property-Search.html#index-next_002dchar_002dproperty_002dchange'>next-char-property-change</a>(pos,limit)</tt>	this is like next-property-change except that it considers overlay properties as well as text properties and if no change is found before the end of the buffer it returns the maximum buffer position rather than nil in this sense it resembles the corresponding overlay function next-overlay-change rather than next-property-change 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Property-Search.html#index-previous_002dchar_002dproperty_002dchange'>previous-char-property-change</a>(pos,limit)</tt>	this is like next-char-property-change but scans back from pos instead of forward and returns the minimum buffer position if no change is found
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Property-Search.html#index-next_002dsingle_002dchar_002dproperty_002dchange'>next-single-char-property-change</a>(pos,prop,object,limit)</tt>	this is like next-single-property-change except that it considers overlay properties as well as text properties and if no change is found before the end of the object it returns the maximum valid position in object rather than nil
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Property-Search.html#index-previous_002dsingle_002dchar_002dproperty_002dchange'>previous-single-char-property-change</a>(pos,prop,object,limit)</tt>	this is like next-single-char-property-change but scans back from pos instead of forward and returns the minimum valid position in object if no change is found
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Property-Search.html#index-text_002dproperty_002dany'>text-property-any</a>(start,end,prop,value,object)</tt>	this function returns non-nil if at least one character between start and end has a property prop whose value is value
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Property-Search.html#index-text_002dproperty_002dnot_002dall'>text-property-not-all</a>(start,end,prop,value,object)</tt>	this function returns non-nil if at least one character between start and end does not have a property prop with value value
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Pure-Storage.html#index-purecopy'>purecopy</a>(object)</tt>	this function makes a copy in pure storage of object and returns it
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Query-Before-Exit.html#index-process_002dquery_002don_002dexit_002dflag'>process-query-on-exit-flag</a>(process)</tt>	this returns the query flag of process
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Query-Before-Exit.html#index-set_002dprocess_002dquery_002don_002dexit_002dflag'>set-process-query-on-exit-flag</a>(process,flag)</tt>	this function sets the query flag of process to flag
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Quitting-Windows.html#index-quit_002dwindow'>quit-window</a>(kill,window)</tt>	this command quits window and buries its buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Quitting-Windows.html#index-quit_002drestore_002dwindow'>quit-restore-window</a>(window,bury-or-kill)</tt>	this function tries to restore the state of window that existed before its buffer was displayed in it
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Quitting-Windows.html#index-frame_002dauto_002dhide_002dfunction'>frame-auto-hide-function</a>()</tt>	the function specified by this option is called to automatically hide frames
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Quitting.html#index-keyboard_002dquit'>keyboard-quit</a>()</tt>	this function signals the quit condition with (signal 'quit nil)
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Quoted-Character-Input.html#index-read_002dquoted_002dchar'>read-quoted-char</a>(prompt)</tt>	 this function is like read-char except that if the first character read is an octal digit (0–7), it reads any number of octal digits but stopping if a non-octal digit is found and returns the character represented by that numeric character code
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Quoting.html#index-quote'>quote</a>(object)</tt>	this special form returns object without evaluating it
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Raising-and-Lowering.html#index-raise_002dframe'>raise-frame</a>(frame)</tt>	this function raises frame frame default the selected frame 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Raising-and-Lowering.html#index-lower_002dframe'>lower-frame</a>(frame)</tt>	this function lowers frame frame default the selected frame 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Raising-and-Lowering.html#index-minibuffer_002dauto_002draise'>minibuffer-auto-raise</a>()</tt>	if this is non-nil activation of the minibuffer raises the frame that the minibuffer window is in
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Raising-and-Lowering.html#index-tty_002dtop_002dframe'>tty-top-frame</a>(terminal)</tt>	this function returns the top frame on terminal
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Random-Numbers.html#index-random'>random</a>(limit)</tt>	this function returns a pseudo-random integer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Read-Only-Buffers.html#index-read_002donly_002dmode'>read-only-mode</a>(arg)</tt>	this is the mode command for read only minor mode a buffer-local minor mode
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Read-Only-Buffers.html#index-barf_002dif_002dbuffer_002dread_002donly'>barf-if-buffer-read-only</a>()</tt>	this function signals a buffer-read-only error if the current buffer is read-only
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Reading-a-Password.html#index-read_002dpasswd'>read-passwd</a>(prompt,confirm,default)</tt>	this function reads a password prompting with prompt
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Reading-File-Names.html#index-read_002dfile_002dname'>read-file-name</a>(prompt,directory,default,require-match,initial,predicate)</tt>	this function reads a file name prompting with prompt and providing completion
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Reading-File-Names.html#index-read_002dfile_002dname_002dcompletion_002dignore_002dcase'>read-file-name-completion-ignore-case</a>()</tt>	if this variable is non-nil read-file-name ignores case when performing completion
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Reading-File-Names.html#index-read_002ddirectory_002dname'>read-directory-name</a>(prompt,directory,default,require-match,initial)</tt>	this function is like read-file-name but allows only directory names as completion alternatives
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Reading-File-Names.html#index-insert_002ddefault_002ddirectory'>insert-default-directory</a>()</tt>	this variable is used by read-file-name and thus indirectly by most commands reading file names
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Reading-File-Names.html#index-read_002dshell_002dcommand'>read-shell-command</a>(prompt,initial,history,args)</tt>	this function reads a shell command from the minibuffer prompting with prompt and providing intelligent completion
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Reading-from-Files.html#index-insert_002dfile_002dcontents'>insert-file-contents</a>(filename,visit,beg,end,replace)</tt>	this function inserts the contents of file filename into the current buffer after point
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Reading-from-Files.html#index-insert_002dfile_002dcontents_002dliterally'>insert-file-contents-literally</a>(filename,visit,beg,end,replace)</tt>	this function works like insert-file-contents except that it does not run find-file-hook and does not do format decoding character code conversion automatic uncompression and so on
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Reading-One-Event.html#index-read_002devent'>read-event</a>(prompt,inherit-input-method,seconds)</tt>	this function reads and returns the next event of command input waiting if necessary until an event is available
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Reading-One-Event.html#index-read_002dchar'>read-char</a>(prompt,inherit-input-method,seconds)</tt>	this function reads and returns a character of command input
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Reading-One-Event.html#index-read_002dchar_002dexclusive'>read-char-exclusive</a>(prompt,inherit-input-method,seconds)</tt>	this function reads and returns a character of command input
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Reading-One-Event.html#index-read_002dkey'>read-key</a>(prompt)</tt>	this function reads a single key
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Reading-One-Event.html#index-read_002dchar_002dchoice'>read-char-choice</a>(prompt,chars,inhibit-quit)</tt>	this function uses read-key to read and return a single character
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Rearrangement.html#index-nconc'>nconc</a>(lists)</tt>	 this function returns a list containing all the elements of lists
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Rearrangement.html#index-nreverse'>nreverse</a>(list)</tt>	 this function reverses the order of the elements of list
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Rearrangement.html#index-sort'>sort</a>(list,predicate)</tt>	 this function sorts list stably though destructively and returns the sorted list
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Recombining-Windows.html#index-window_002dcombination_002dlimit-1'>window-combination-limit</a>()</tt>	this variable controls whether splitting a window shall make a new parent window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Recombining-Windows.html#index-set_002dwindow_002dcombination_002dlimit'>set-window-combination-limit</a>(window,limit)</tt>	this function sets the combination limit of the window window to limit
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Recombining-Windows.html#index-window_002dcombination_002dlimit'>window-combination-limit</a>(window)</tt>	this function returns the combination limit for window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Recombining-Windows.html#index-window_002dcombination_002dresize'>window-combination-resize</a>()</tt>	if this variable is nil split-window can only split a window denoted by window if window’s screen area is large enough to accommodate both itself and the new window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Recording-Input.html#index-recent_002dkeys'>recent-keys</a>()</tt>	this function returns a vector containing the last 300 input events from the keyboard or mouse
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Recording-Input.html#index-open_002ddribble_002dfile'>open-dribble-file</a>(filename)</tt>	 this function opens a dribble file named filename
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Recursive-Editing.html#index-recursive_002dedit'>recursive-edit</a>()</tt>	 this function invokes the editor command loop
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Recursive-Editing.html#index-exit_002drecursive_002dedit'>exit-recursive-edit</a>()</tt>	this function exits from the innermost recursive edit including minibuffer input 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Recursive-Editing.html#index-abort_002drecursive_002dedit'>abort-recursive-edit</a>()</tt>	this function aborts the command that requested the innermost recursive edit including minibuffer input by signaling quit after exiting the recursive edit
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Recursive-Editing.html#index-top_002dlevel'>top-level</a>()</tt>	this function exits all recursive editing levels it does not return a value as it jumps completely out of any computation directly back to the main command loop
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Recursive-Editing.html#index-recursion_002ddepth'>recursion-depth</a>()</tt>	this function returns the current depth of recursive edits
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Recursive-Mini.html#index-minibuffer_002ddepth'>minibuffer-depth</a>()</tt>	this function returns the current depth of activations of the minibuffer a nonnegative integer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Recursive-Mini.html#index-enable_002drecursive_002dminibuffers'>enable-recursive-minibuffers</a>()</tt>	if this variable is non-nil you can invoke commands such as find-file that use minibuffers even while the minibuffer window is active
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Refresh-Screen.html#index-redraw_002dframe'>redraw-frame</a>(frame)</tt>	this function clears and redisplays frame frame
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Refresh-Screen.html#index-redraw_002ddisplay'>redraw-display</a>()</tt>	this function clears and redisplays all visible frames
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Refresh-Screen.html#index-no_002dredraw_002don_002dreenter'>no-redraw-on-reenter</a>()</tt>	 this variable controls whether emacs redraws the entire screen after it has been suspended and resumed
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Regexp-Functions.html#index-regexp_002dquote'>regexp-quote</a>(string)</tt>	this function returns a regular expression whose only exact match is string
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Regexp-Functions.html#index-regexp_002dopt'>regexp-opt</a>(strings,paren)</tt>	this function returns an efficient regular expression that will match any of the strings in the list strings
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Regexp-Functions.html#index-regexp_002dopt_002ddepth'>regexp-opt-depth</a>(regexp)</tt>	this function returns the total number of grouping constructs parenthesized expressions in regexp
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Regexp-Functions.html#index-regexp_002dopt_002dcharset'>regexp-opt-charset</a>(chars)</tt>	this function returns a regular expression matching a character in the list of characters chars
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Regexp-Search.html#index-re_002dsearch_002dforward'>re-search-forward</a>(regexp,limit,noerror,repeat)</tt>	this function searches forward in the current buffer for a string of text that is matched by the regular expression regexp
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Regexp-Search.html#index-re_002dsearch_002dbackward'>re-search-backward</a>(regexp,limit,noerror,repeat)</tt>	this function searches backward in the current buffer for a string of text that is matched by the regular expression regexp leaving point at the beginning of the first text found
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Regexp-Search.html#index-string_002dmatch'>string-match</a>(regexp,string,start)</tt>	this function returns the index of the start of the first match for the regular expression regexp in string or nil if there is no match
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Regexp-Search.html#index-string_002dmatch_002dp'>string-match-p</a>(regexp,string,start)</tt>	this predicate function does what string-match does but it avoids modifying the match data
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Regexp-Search.html#index-looking_002dat'>looking-at</a>(regexp)</tt>	this function determines whether the text in the current buffer directly following point matches the regular expression regexp
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Regexp-Search.html#index-looking_002dback'>looking-back</a>(regexp,limit,greedy)</tt>	this function returns t if regexp matches the text immediately before point 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Regexp-Search.html#index-looking_002dat_002dp'>looking-at-p</a>(regexp)</tt>	this predicate function works like looking-at but without updating the match data
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Region-Indent.html#index-indent_002dregion'>indent-region</a>(start,end,to-column)</tt>	this command indents each nonblank line starting between start inclusive and end exclusive 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Region-Indent.html#index-indent_002drigidly'>indent-rigidly</a>(start,end,count)</tt>	this function indents all lines starting between start inclusive and end exclusive sideways by count columns
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Region-Indent.html#index-indent_002dcode_002drigidly'>indent-code-rigidly</a>(start,end,columns,nochange-regexp)</tt>	this is like indent-rigidly except that it doesn’t alter lines that start within strings or comments
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Registers.html#index-get_002dregister'>get-register</a>(reg)</tt>	this function returns the contents of the register reg or nil if it has no contents
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Registers.html#index-set_002dregister'>set-register</a>(reg,value)</tt>	this function sets the contents of register reg to value
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Registers.html#index-view_002dregister'>view-register</a>(reg)</tt>	this command displays what is contained in register reg
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Registers.html#index-insert_002dregister'>insert-register</a>(reg,beforep)</tt>	this command inserts contents of register reg into the current buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Registers.html#index-register_002dread_002dwith_002dpreview'>register-read-with-preview</a>(prompt)</tt>	 this function reads and returns a register name prompting with prompt and possibly showing a preview of the existing registers and their contents
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Relative-File-Names.html#index-file_002dname_002dabsolute_002dp'>file-name-absolute-p</a>(filename)</tt>	this function returns t if file filename is an absolute file name nil otherwise
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Relative-File-Names.html#index-file_002drelative_002dname'>file-relative-name</a>(filename,directory)</tt>	this function tries to return a relative name that is equivalent to filename assuming the result will be interpreted relative to directory an absolute directory name or directory file name 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Relative-Indent.html#index-indent_002drelative'>indent-relative</a>(unindented-ok)</tt>	this command inserts whitespace at point extending to the same column as the next indent point of the previous nonblank line
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Relative-Indent.html#index-indent_002drelative_002dmaybe'>indent-relative-maybe</a>()</tt>	this command indents the current line like the previous nonblank line by calling indent-relative with t as the unindented-ok argument
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Remapping-Commands.html#index-command_002dremapping'>command-remapping</a>(command,position,keymaps)</tt>	this function returns the remapping for command a symbol given the current active keymaps
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Rename-or-Copy.html#index-backup_002dby_002dcopying'>backup-by-copying</a>()</tt>	if this variable is non-nil emacs always makes backup files by copying
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Rename-or-Copy.html#index-backup_002dby_002dcopying_002dwhen_002dlinked'>backup-by-copying-when-linked</a>()</tt>	if this variable is non-nil emacs makes backups by copying for files with multiple names hard links 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Rename-or-Copy.html#index-backup_002dby_002dcopying_002dwhen_002dmismatch'>backup-by-copying-when-mismatch</a>()</tt>	if this variable is non-nil the default emacs makes backups by copying in cases where renaming would change either the owner or the group of the file
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Rename-or-Copy.html#index-backup_002dby_002dcopying_002dwhen_002dprivileged_002dmismatch'>backup-by-copying-when-privileged-mismatch</a>()</tt>	this variable if non-nil specifies the same behavior as backup-by-copying-when-mismatch but only for certain user-id values namely those less than or equal to a certain number
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Repeat-Events.html#index-event_002dclick_002dcount'>event-click-count</a>(event)</tt>	this function returns the number of consecutive button presses that led up to event
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Repeat-Events.html#index-double_002dclick_002dfuzz'>double-click-fuzz</a>()</tt>	to generate repeat events successive mouse button presses must be at approximately the same screen position
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Repeat-Events.html#index-double_002dclick_002dtime'>double-click-time</a>()</tt>	to generate repeat events the number of milliseconds between successive button presses must be less than the value of double-click-time
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Replacing-Match.html#index-replace_002dmatch'>replace-match</a>(replacement,fixedcase,literal,string,subexp)</tt>	this function performs a replacement operation on a buffer or string
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Replacing-Match.html#index-match_002dsubstitute_002dreplacement'>match-substitute-replacement</a>(replacement,fixedcase,literal,string,subexp)</tt>	this function returns the text that would be inserted into the buffer by replace-match but without modifying the buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Resizing-Windows.html#index-window_002dresizable'>window-resizable</a>(window,delta,horizontal,ignore,pixelwise)</tt>	this function returns delta if the size of window can be changed vertically by delta lines
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Resizing-Windows.html#index-window_002dresize'>window-resize</a>(window,delta,horizontal,ignore,pixelwise)</tt>	this function resizes window by delta increments
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Resizing-Windows.html#index-adjust_002dwindow_002dtrailing_002dedge'>adjust-window-trailing-edge</a>(window,delta,horizontal,pixelwise)</tt>	this function moves window’s bottom edge by delta lines
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Resizing-Windows.html#index-window_002dresize_002dpixelwise'>window-resize-pixelwise</a>()</tt>	if the value of this option is non-nil emacs resizes windows in units of pixels
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Resizing-Windows.html#index-fit_002dwindow_002dto_002dbuffer'>fit-window-to-buffer</a>(window,max-height,min-height,max-width,min-width)</tt>	this command adjusts the height or width of window to fit the text in it
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Resizing-Windows.html#index-fit_002dwindow_002dto_002dbuffer_002dhorizontally'>fit-window-to-buffer-horizontally</a>()</tt>	if this is non-nil fit-window-to-buffer can resize windows horizontally
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Resizing-Windows.html#index-fit_002dframe_002dto_002dbuffer-1'>fit-frame-to-buffer</a>()</tt>	if this option is non-nil fit-window-to-buffer can fit a frame to its buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Resizing-Windows.html#index-shrink_002dwindow_002dif_002dlarger_002dthan_002dbuffer'>shrink-window-if-larger-than-buffer</a>(window)</tt>	this command attempts to reduce window’s height as much as possible while still showing its full buffer but no less than window-min-height lines
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Resizing-Windows.html#index-balance_002dwindows'>balance-windows</a>(window-or-frame)</tt>	this function balances windows in a way that gives more space to full-width and/or full-height windows
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Resizing-Windows.html#index-balance_002dwindows_002darea'>balance-windows-area</a>()</tt>	this function attempts to give all windows on the selected frame approximately the same share of the screen area
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Resizing-Windows.html#index-maximize_002dwindow'>maximize-window</a>(window)</tt>	this function attempts to make window as large as possible in both dimensions without resizing its frame or deleting other windows
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Resizing-Windows.html#index-minimize_002dwindow'>minimize-window</a>(window)</tt>	this function attempts to make window as small as possible in both dimensions without deleting it or resizing its frame
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Resources.html#index-x_002dget_002dresource'>x-get-resource</a>(attribute,class,component,subclass)</tt>	the function x-get-resource retrieves a resource value from the x window defaults database
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Reverting.html#index-revert_002dbuffer'>revert-buffer</a>(ignore-auto,noconfirm,preserve-modes)</tt>	this command replaces the buffer text with the text of the visited file on disk
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Reverting.html#index-revert_002dwithout_002dquery'>revert-without-query</a>()</tt>	this variable holds a list of files that should be reverted without query
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Rings.html#index-make_002dring'>make-ring</a>(size)</tt>	this returns a new ring capable of holding size objects
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Rings.html#index-ring_002dp'>ring-p</a>(object)</tt>	this returns t if object is a ring nil otherwise
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Rings.html#index-ring_002dsize'>ring-size</a>(ring)</tt>	this returns the maximum capacity of the ring
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Rings.html#index-ring_002dlength'>ring-length</a>(ring)</tt>	this returns the number of objects that ring currently contains
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Rings.html#index-ring_002delements'>ring-elements</a>(ring)</tt>	this returns a list of the objects in ring in order newest first
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Rings.html#index-ring_002dcopy'>ring-copy</a>(ring)</tt>	this returns a new ring which is a copy of ring
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Rings.html#index-ring_002dempty_002dp'>ring-empty-p</a>(ring)</tt>	this returns t if ring is empty nil otherwise
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Rings.html#index-ring_002dref'>ring-ref</a>(ring,index)</tt>	this returns the object in ring found at index index
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Rings.html#index-ring_002dinsert'>ring-insert</a>(ring,object)</tt>	this inserts object into ring making it the newest element and returns object
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Rings.html#index-ring_002dremove'>ring-remove</a>(ring,index)</tt>	remove an object from ring and return that object
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Rings.html#index-ring_002dinsert_002dat_002dbeginning'>ring-insert-at-beginning</a>(ring,object)</tt>	this inserts object into ring treating it as the oldest element
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Rounding-Operations.html#index-ffloor'>ffloor</a>(float)</tt>	this function rounds float to the next lower integral value and returns that value as a floating-point number
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Rounding-Operations.html#index-fceiling'>fceiling</a>(float)</tt>	this function rounds float to the next higher integral value and returns that value as a floating-point number
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Rounding-Operations.html#index-ftruncate'>ftruncate</a>(float)</tt>	this function rounds float towards zero to an integral value and returns that value as a floating-point number
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Rounding-Operations.html#index-fround'>fround</a>(float)</tt>	this function rounds float to the nearest integral value and returns that value as a floating-point number
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Running-Hooks.html#index-run_002dhooks'>run-hooks</a>(hookvars)</tt>	this function takes one or more normal hook variable names as arguments and runs each hook in turn
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Running-Hooks.html#index-run_002dhook_002dwith_002dargs'>run-hook-with-args</a>(hook,args)</tt>	this function runs an abnormal hook by calling all the hook functions in hook passing each one the arguments args
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Running-Hooks.html#index-run_002dhook_002dwith_002dargs_002duntil_002dfailure'>run-hook-with-args-until-failure</a>(hook,args)</tt>	this function runs an abnormal hook by calling each hook function in turn stopping if one of them “fails” by returning nil
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Running-Hooks.html#index-run_002dhook_002dwith_002dargs_002duntil_002dsuccess'>run-hook-with-args-until-success</a>(hook,args)</tt>	this function runs an abnormal hook by calling each hook function stopping if one of them “succeeds” by returning a non-nil value
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Saving-Buffers.html#index-save_002dbuffer'>save-buffer</a>(backup-option)</tt>	this function saves the contents of the current buffer in its visited file if the buffer has been modified since it was last visited or saved
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Saving-Buffers.html#index-save_002dsome_002dbuffers'>save-some-buffers</a>(save-silently-p,pred)</tt>	this command saves some modified file-visiting buffers
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Saving-Buffers.html#index-write_002dfile'>write-file</a>(filename,confirm)</tt>	this function writes the current buffer into file filename makes the buffer visit that file and marks it not modified
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Saving-Buffers.html#index-before_002dsave_002dhook'>before-save-hook</a>()</tt>	this normal hook runs before a buffer is saved in its visited file regardless of whether that is done normally or by one of the hooks described above
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Saving-Buffers.html#index-after_002dsave_002dhook'>after-save-hook</a>()</tt>	this normal hook runs after a buffer has been saved in its visited file
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Saving-Buffers.html#index-file_002dprecious_002dflag'>file-precious-flag</a>()</tt>	if this variable is non-nil then save-buffer protects against i/o errors while saving by writing the new file to a temporary name instead of the name it is supposed to have and then renaming it to the intended name after it is clear there are no errors
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Saving-Buffers.html#index-require_002dfinal_002dnewline'>require-final-newline</a>()</tt>	this variable determines whether files may be written out that do not end with a newline
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Scanning-Charsets.html#index-charset_002dafter'>charset-after</a>(pos)</tt>	this function returns the charset of highest priority containing the character at position pos in the current buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Scanning-Charsets.html#index-find_002dcharset_002dregion'>find-charset-region</a>(beg,end,translation)</tt>	this function returns a list of the character sets of highest priority that contain characters in the current buffer between positions beg and end
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Scanning-Charsets.html#index-find_002dcharset_002dstring'>find-charset-string</a>(string,translation)</tt>	this function returns a list of character sets of highest priority that contain characters in string
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Scanning-Keymaps.html#index-accessible_002dkeymaps'>accessible-keymaps</a>(keymap,prefix)</tt>	this function returns a list of all the keymaps that can be reached via zero or more prefix keys from keymap
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Scanning-Keymaps.html#index-map_002dkeymap'>map-keymap</a>(function,keymap)</tt>	the function map-keymap calls function once for each binding in keymap
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Scanning-Keymaps.html#index-where_002dis_002dinternal'>where-is-internal</a>(command,keymap,firstonly,noindirect,no-remap)</tt>	this function is a subroutine used by the where-is command see help in the gnu emacs manual 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Scanning-Keymaps.html#index-describe_002dbindings'>describe-bindings</a>(prefix,buffer-or-name)</tt>	this function creates a listing of all current key bindings and displays it in a buffer named *help*
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Screen-Lines.html#index-vertical_002dmotion'>vertical-motion</a>(count,window)</tt>	this function moves point to the start of the screen line count screen lines down from the screen line containing point
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Screen-Lines.html#index-count_002dscreen_002dlines'>count-screen-lines</a>(beg,end,count-final-newline,window)</tt>	this function returns the number of screen lines in the text from beg to end
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Screen-Lines.html#index-move_002dto_002dwindow_002dline'>move-to-window-line</a>(count)</tt>	this function moves point with respect to the text currently displayed in the selected window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Screen-Lines.html#index-compute_002dmotion'>compute-motion</a>(from,frompos,to,topos,width,offsets,window)</tt>	this function scans the current buffer calculating screen positions
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Scroll-Bars.html#index-frame_002dcurrent_002dscroll_002dbars'>frame-current-scroll-bars</a>(frame)</tt>	this function reports the scroll bar type settings for frame frame
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Scroll-Bars.html#index-set_002dwindow_002dscroll_002dbars'>set-window-scroll-bars</a>(window,width,vertical-type,horizontal-type)</tt>	this function sets the width and type of scroll bars for window window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Scroll-Bars.html#index-window_002dscroll_002dbars'>window-scroll-bars</a>(window)</tt>	report the width and type of scroll bars specified for window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Scroll-Bars.html#index-window_002dscroll_002dbar_002dwidth'>window-scroll-bar-width</a>(window)</tt>	this function returns the width in pixels of window’s vertical scrollbar
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Scroll-Bars.html#index-scroll_002dbar_002dmode'>scroll-bar-mode</a>()</tt>	this variable always local in all buffers controls whether and where to put scroll bars in windows displaying the buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Scroll-Bars.html#index-window_002dcurrent_002dscroll_002dbars'>window-current-scroll-bars</a>(window)</tt>	this function reports the scroll bar type for window window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Search-and-Replace.html#index-replace_002dregexp_002din_002dstring'>replace-regexp-in-string</a>(regexp,rep,string,fixedcase,literal,subexp,start)</tt>	this function copies string and searches it for matches for regexp and replaces them with rep
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Search-and-Replace.html#index-perform_002dreplace'>perform-replace</a>(from-string,replacements,query-flag,regexp-flag,delimited-flag,repeat-count,map,start,end)</tt>	this function is the guts of query-replace and related commands
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Searching-and-Case.html#index-case_002dfold_002dsearch'>case-fold-search</a>()</tt>	this buffer-local variable determines whether searches should ignore case
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Searching-and-Case.html#index-case_002dreplace'>case-replace</a>()</tt>	this variable determines whether the higher-level replacement functions should preserve case
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Selecting-a-Representation.html#index-set_002dbuffer_002dmultibyte'>set-buffer-multibyte</a>(multibyte)</tt>	set the representation type of the current buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Selecting-a-Representation.html#index-string_002das_002dunibyte'>string-as-unibyte</a>(string)</tt>	if string is already a unibyte string this function returns string itself
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Selecting-a-Representation.html#index-string_002das_002dmultibyte'>string-as-multibyte</a>(string)</tt>	if string is a multibyte string this function returns string itself
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Selecting-Windows.html#index-select_002dwindow'>select-window</a>(window,norecord)</tt>	this function makes window the selected window and the window selected within its frame see basic windows and selects that frame
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Selecting-Windows.html#index-frame_002dselected_002dwindow'>frame-selected-window</a>(frame)</tt>	this function returns the window on frame that is selected within that frame
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Selecting-Windows.html#index-set_002dframe_002dselected_002dwindow'>set-frame-selected-window</a>(frame,window,norecord)</tt>	this function makes window the window selected within the frame frame
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Selective-Display.html#index-selective_002ddisplay_002dellipses'>selective-display-ellipses</a>()</tt>	if this buffer-local variable is non-nil then emacs displays ‘…’ at the end of a line that is followed by hidden text
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Sentinels.html#index-set_002dprocess_002dsentinel'>set-process-sentinel</a>(process,sentinel)</tt>	this function associates sentinel with process
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Sentinels.html#index-process_002dsentinel'>process-sentinel</a>(process)</tt>	this function returns the sentinel of process
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Sentinels.html#index-waiting_002dfor_002duser_002dinput_002dp'>waiting-for-user-input-p</a>()</tt>	while a sentinel or filter function is running this function returns non-nil if emacs was waiting for keyboard input from the user at the time the sentinel or filter function was called or nil if it was not
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Sequence-Functions.html#index-sequencep'>sequencep</a>(object)</tt>	this function returns t if object is a list vector string bool-vector or char-table nil otherwise
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Sequence-Functions.html#index-length'>length</a>(sequence)</tt>	 this function returns the number of elements in sequence
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Sequence-Functions.html#index-elt'>elt</a>(sequence,index)</tt>	 this function returns the element of sequence indexed by index
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Sequence-Functions.html#index-copy_002dsequence'>copy-sequence</a>(sequence)</tt>	 this function returns a copy of sequence
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Serial-Ports.html#index-serial_002dterm'>serial-term</a>(port,speed)</tt>	start a terminal-emulator for a serial port in a new buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Serial-Ports.html#index-make_002dserial_002dprocess'>make-serial-process</a>(args)</tt>	this function creates a process and a buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Serial-Ports.html#index-serial_002dprocess_002dconfigure'>serial-process-configure</a>(args)</tt>	 this function configures a serial port connection
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Setcar.html#index-setcar'>setcar</a>(cons,object)</tt>	this function stores object as the new car of cons replacing its previous car
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Setcdr.html#index-setcdr'>setcdr</a>(cons,object)</tt>	this function stores object as the new cdr of cons replacing its previous cdr
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Sets-And-Lists.html#index-memq'>memq</a>(object,list)</tt>	 this function tests to see whether object is a member of list
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Sets-And-Lists.html#index-delq'>delq</a>(object,list)</tt>	 this function destructively removes all elements eq to object from list and returns the resulting list
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Sets-And-Lists.html#index-remq'>remq</a>(object,list)</tt>	this function returns a copy of list with all elements removed which are eq to object
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Sets-And-Lists.html#index-memql'>memql</a>(object,list)</tt>	the function memql tests to see whether object is a member of list comparing members with object using eql so floating-point elements are compared by value
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Sets-And-Lists.html#index-member'>member</a>(object,list)</tt>	the function member tests to see whether object is a member of list comparing members with object using equal
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Sets-And-Lists.html#index-delete'>delete</a>(object,sequence)</tt>	this function removes all elements equal to object from sequence and returns the resulting sequence
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Sets-And-Lists.html#index-remove'>remove</a>(object,sequence)</tt>	this function is the non-destructive counterpart of delete
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Sets-And-Lists.html#index-member_002dignore_002dcase'>member-ignore-case</a>(object,list)</tt>	this function is like member except that object should be a string and that it ignores differences in letter-case and text representation upper-case and lower-case letters are treated as equal and unibyte strings are converted to multibyte prior to comparison
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Sets-And-Lists.html#index-delete_002ddups'>delete-dups</a>(list)</tt>	this function destructively removes all equal duplicates from list stores the result in list and returns it
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Setting-Hooks.html#index-add_002dhook'>add-hook</a>(hook,function,append,local)</tt>	this function is the handy way to add function function to hook variable hook
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Setting-Hooks.html#index-remove_002dhook'>remove-hook</a>(hook,function,local)</tt>	this function removes function from the hook variable hook
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Setting-Variables.html#index-set'>set</a>(symbol,value)</tt>	this function puts value in the value cell of symbol
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Shell-Arguments.html#index-shell_002dquote_002dargument'>shell-quote-argument</a>(argument)</tt>	this function returns a string that represents in shell syntax an argument whose actual contents are argument
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Shell-Arguments.html#index-split_002dstring_002dand_002dunquote'>split-string-and-unquote</a>(string,separators)</tt>	this function splits string into substrings at matches for the regular expression separators like split-string does see creating strings ; in addition it removes quoting from the substrings
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Shell-Arguments.html#index-combine_002dand_002dquote_002dstrings'>combine-and-quote-strings</a>(list-of-strings,separator)</tt>	this function concatenates list-of-strings into a single string quoting each string as necessary
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Showing-Images.html#index-insert_002dimage'>insert-image</a>(image,string,area,slice)</tt>	this function inserts image in the current buffer at point
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Showing-Images.html#index-insert_002dsliced_002dimage'>insert-sliced-image</a>(image,string,area,rows,cols)</tt>	this function inserts image in the current buffer at point like insert-image but splits the image into rowsxcols equally sized slices
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Showing-Images.html#index-put_002dimage'>put-image</a>(image,pos,string,area)</tt>	this function puts image image in front of pos in the current buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Showing-Images.html#index-remove_002dimages'>remove-images</a>(start,end,buffer)</tt>	this function removes images in buffer between positions start and end
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Showing-Images.html#index-image_002dsize'>image-size</a>(spec,pixels,frame)</tt>	 this function returns the size of an image as a pair (width 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Signaling-Errors.html#index-error'>error</a>(format-string,args)</tt>	this function signals an error with an error message constructed by applying format see formatting strings to format-string and args
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Signaling-Errors.html#index-signal'>signal</a>(error-symbol,data)</tt>	this function signals an error named by error-symbol
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Signaling-Errors.html#index-user_002derror'>user-error</a>(format-string,args)</tt>	this function behaves exactly like error except that it uses the error symbol user-error rather than error
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Signals-to-Processes.html#index-interrupt_002dprocess'>interrupt-process</a>(process,current-group)</tt>	this function interrupts the process process by sending the signal sigint
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Signals-to-Processes.html#index-kill_002dprocess'>kill-process</a>(process,current-group)</tt>	this function kills the process process by sending the signal sigkill
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Signals-to-Processes.html#index-quit_002dprocess'>quit-process</a>(process,current-group)</tt>	this function sends the signal sigquit to the process process
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Signals-to-Processes.html#index-stop_002dprocess'>stop-process</a>(process,current-group)</tt>	this function stops the process process by sending the signal sigtstp
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Signals-to-Processes.html#index-continue_002dprocess'>continue-process</a>(process,current-group)</tt>	this function resumes execution of the process process by sending it the signal sigcont
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Signals-to-Processes.html#index-signal_002dprocess'>signal-process</a>(process,signal)</tt>	this function sends a signal to process process
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Simple-Macro.html#index-macrop'>macrop</a>(object)</tt>	this predicate tests whether its argument is a macro and returns t if so nil otherwise
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Simple-Match-Data.html#index-match_002dstring'>match-string</a>(count,in-string)</tt>	this function returns as a string the text matched in the last search or match operation
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Simple-Match-Data.html#index-match_002dstring_002dno_002dproperties'>match-string-no-properties</a>(count,in-string)</tt>	this function is like match-string except that the result has no text properties
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Simple-Match-Data.html#index-match_002dbeginning'>match-beginning</a>(count)</tt>	this function returns the position of the start of the text matched by the last regular expression searched for or a subexpression of it
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Simple-Match-Data.html#index-match_002dend'>match-end</a>(count)</tt>	this function is like match-beginning except that it returns the position of the end of the match rather than the position of the beginning
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Size-and-Position.html#index-set_002dframe_002dposition'>set-frame-position</a>(frame,left,top)</tt>	this function sets the position of the top left corner of frame to left and top
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Size-and-Position.html#index-frame_002dheight'>frame-height</a>(frame)</tt>	these functions return the height and width of frame measured in lines and columns
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Size-and-Position.html#index-frame_002dpixel_002dheight'>frame-pixel-height</a>(frame)</tt>	these functions return the height and width of the main display area of frame measured in pixels
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Size-and-Position.html#index-frame_002dchar_002dheight'>frame-char-height</a>(frame)</tt>	these functions return the height and width of a character in frame measured in pixels
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Size-and-Position.html#index-frame_002dresize_002dpixelwise'>frame-resize-pixelwise</a>()</tt>	if this option is nil a frame’s size is usually rounded to a multiple of the current values of that frame’s frame-char-height and frame-char-width
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Size-and-Position.html#index-set_002dframe_002dsize'>set-frame-size</a>(frame,width,height,pixelwise)</tt>	this function sets the size of frame measured in characters width and height specify the new width in columns and the new height in lines
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Size-and-Position.html#index-set_002dframe_002dheight'>set-frame-height</a>(frame,height,pretend,pixelwise)</tt>	this function resizes frame to a height of height lines
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Size-and-Position.html#index-set_002dframe_002dwidth'>set-frame-width</a>(frame,width,pretend,pixelwise)</tt>	this function sets the width of frame measured in characters
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Size-and-Position.html#index-fit_002dframe_002dto_002dbuffer'>fit-frame-to-buffer</a>(frame,max-height,min-height,max-width,min-width,only)</tt>	this command adjusts the size of frame to display the contents of its buffer exactly
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Size-and-Position.html#index-fit_002dframe_002dto_002dbuffer_002dmargins'>fit-frame-to-buffer-margins</a>()</tt>	this option can be used to specify margins around frames to be fit by fit-frame-to-buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Size-and-Position.html#index-fit_002dframe_002dto_002dbuffer_002dsizes'>fit-frame-to-buffer-sizes</a>()</tt>	this option specifies size boundaries for fit-frame-to-buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Size-of-Displayed-Text.html#index-char_002dwidth'>char-width</a>(char)</tt>	this function returns the width in columns of the character char if it were displayed in the current buffer 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Size-of-Displayed-Text.html#index-string_002dwidth'>string-width</a>(string)</tt>	this function returns the width in columns of the string string if it were displayed in the current buffer and the selected window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Size-of-Displayed-Text.html#index-truncate_002dstring_002dto_002dwidth'>truncate-string-to-width</a>(string,width,start-column,padding,ellipsis)</tt>	this function returns the part of string that fits within width columns as a new string
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Size-of-Displayed-Text.html#index-window_002dtext_002dpixel_002dsize'>window-text-pixel-size</a>(window,from,to,x-limit,y-limit,mode-and-header-line)</tt>	this function returns the size of the text of window’s buffer in pixels
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Skipping-Characters.html#index-skip_002dchars_002dforward'>skip-chars-forward</a>(character-set,limit)</tt>	this function moves point in the current buffer forward skipping over a given set of characters
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Skipping-Characters.html#index-skip_002dchars_002dbackward'>skip-chars-backward</a>(character-set,limit)</tt>	this function moves point backward skipping characters that match character-set until limit
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/SMIE-Customization.html#index-smie_002dconfig'>smie-config</a>()</tt>	this option lets you customize indentation on a per-mode basis
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/SMIE-Customization.html#index-smie_002dconfig_002dguess'>smie-config-guess</a>()</tt>	this command tries to work out appropriate settings to produce your preferred style of indentation
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/SMIE-Customization.html#index-smie_002dconfig_002dsave'>smie-config-save</a>()</tt>	call this command after using smie-config-guess to save your settings for future sessions
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/SMIE-Customization.html#index-smie_002dconfig_002dshow_002dindent'>smie-config-show-indent</a>(move)</tt>	this command displays the rules that are used to indent the current line
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/SMIE-Customization.html#index-smie_002dconfig_002dset_002dindent'>smie-config-set-indent</a>()</tt>	this command adds a local rule to adjust the indentation of the current line
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/SMIE-Customization.html#index-smie_002dconfig_002dlocal'>smie-config-local</a>(rules)</tt>	this function adds rules as indentation rules for the current buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/SMIE-Indentation-Helpers.html#index-smie_002drule_002dbolp'>smie-rule-bolp</a>()</tt>	return non-nil if the current token is the first on the line
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/SMIE-Indentation-Helpers.html#index-smie_002drule_002dhanging_002dp'>smie-rule-hanging-p</a>()</tt>	return non-nil if the current token is hanging
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/SMIE-Indentation-Helpers.html#index-smie_002drule_002dnext_002dp'>smie-rule-next-p</a>(tokens)</tt>	return non-nil if the next token is among tokens
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/SMIE-Indentation-Helpers.html#index-smie_002drule_002dprev_002dp'>smie-rule-prev-p</a>(tokens)</tt>	return non-nil if the previous token is among tokens
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/SMIE-Indentation-Helpers.html#index-smie_002drule_002dparent_002dp'>smie-rule-parent-p</a>(parents)</tt>	return non-nil if the current token’s parent is among parents
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/SMIE-Indentation-Helpers.html#index-smie_002drule_002dsibling_002dp'>smie-rule-sibling-p</a>()</tt>	return non-nil if the current token’s parent is actually a sibling
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/SMIE-Indentation-Helpers.html#index-smie_002drule_002dparent'>smie-rule-parent</a>(offset)</tt>	return the proper offset to align the current token with the parent
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/SMIE-Indentation-Helpers.html#index-smie_002drule_002dseparator'>smie-rule-separator</a>(method)</tt>	indent current token as a separator
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/SMIE-setup.html#index-smie_002dsetup'>smie-setup</a>(grammar,rules-function,keywords)</tt>	setup smie navigation and indentation
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/SMIE-setup.html#index-smie_002dclose_002dblock'>smie-close-block</a>()</tt>	this command closes the most recently opened and not yet closed block
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/SMIE-setup.html#index-smie_002ddown_002dlist'>smie-down-list</a>(arg)</tt>	this command is like down-list but it also pays attention to nesting of tokens other than parentheses such as begin
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Sorting.html#index-sort_002dsubr'>sort-subr</a>(reverse,nextrecfun,endrecfun,startkeyfun,endkeyfun,predicate)</tt>	this function is the general text-sorting routine that subdivides a buffer into records and then sorts them
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Sorting.html#index-sort_002dfold_002dcase'>sort-fold-case</a>()</tt>	if this variable is non-nil sort-subr and the other buffer sorting functions ignore case when comparing strings
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Sorting.html#index-sort_002dregexp_002dfields'>sort-regexp-fields</a>(reverse,record-regexp,key-regexp,start,end)</tt>	this command sorts the region between start and end alphabetically as specified by record-regexp and key-regexp
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Sorting.html#index-sort_002dlines'>sort-lines</a>(reverse,start,end)</tt>	this command alphabetically sorts lines in the region between start and end
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Sorting.html#index-sort_002dparagraphs'>sort-paragraphs</a>(reverse,start,end)</tt>	this command alphabetically sorts paragraphs in the region between start and end
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Sorting.html#index-sort_002dpages'>sort-pages</a>(reverse,start,end)</tt>	this command alphabetically sorts pages in the region between start and end
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Sorting.html#index-sort_002dfields'>sort-fields</a>(field,start,end)</tt>	this command sorts lines in the region between start and end comparing them alphabetically by the fieldth field of each line
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Sorting.html#index-sort_002dnumeric_002dfields'>sort-numeric-fields</a>(field,start,end)</tt>	this command sorts lines in the region between start and end comparing them numerically by the fieldth field of each line
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Sorting.html#index-sort_002dnumeric_002dbase'>sort-numeric-base</a>()</tt>	this variable specifies the default radix for sort-numeric-fields to parse numbers
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Sorting.html#index-sort_002dcolumns'>sort-columns</a>(reverse,beg,end)</tt>	this command sorts the lines in the region between beg and end comparing them alphabetically by a certain range of columns
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Sound-Output.html#index-play_002dsound'>play-sound</a>(sound)</tt>	this function plays a specified sound
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Sound-Output.html#index-play_002dsound_002dfile'>play-sound-file</a>(file,volume,device)</tt>	this function is an alternative interface to playing a sound file specifying an optional volume and device
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Special-Forms.html#index-special_002dform_002dp'>special-form-p</a>(object)</tt>	this predicate tests whether its argument is a special form and returns t if so nil otherwise
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Specifying-Coding-Systems.html#index-inhibit_002deol_002dconversion'>inhibit-eol-conversion</a>()</tt>	when this variable is non-nil no end-of-line conversion is done no matter which coding system is specified
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Specifying-Coding-Systems.html#index-coding_002dsystem_002dpriority_002dlist'>coding-system-priority-list</a>(highestp)</tt>	this function returns the list of coding systems in the order of their current priorities
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Specifying-Coding-Systems.html#index-set_002dcoding_002dsystem_002dpriority'>set-coding-system-priority</a>(coding-systems)</tt>	this function puts coding-systems at the beginning of the priority list for coding systems thus making their priority higher than all the rest
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Splitting-Windows.html#index-split_002dwindow'>split-window</a>(window,size,side,pixelwise)</tt>	this function creates a new live window next to the window window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Splitting-Windows.html#index-split_002dwindow_002dright'>split-window-right</a>(size)</tt>	this function splits the selected window into two side-by-side windows putting the selected window on the left
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Splitting-Windows.html#index-split_002dwindow_002dbelow'>split-window-below</a>(size)</tt>	this function splits the selected window into two windows one above the other leaving the upper window selected
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Splitting-Windows.html#index-split_002dwindow_002dkeep_002dpoint'>split-window-keep-point</a>()</tt>	if the value of this variable is non-nil the default split-window-below behaves as described above
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Standard-File-Names.html#index-locate_002duser_002demacs_002dfile'>locate-user-emacs-file</a>(base-name,old-name)</tt>	this function returns an absolute file name for an emacs-specific configuration or data file
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Standard-File-Names.html#index-convert_002dstandard_002dfilename'>convert-standard-filename</a>(filename)</tt>	this function returns a file name based on filename which fits the conventions of the current operating system
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Standard-Regexps.html#index-page_002ddelimiter'>page-delimiter</a>()</tt>	this is the regular expression describing line-beginnings that separate pages
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Standard-Regexps.html#index-paragraph_002dseparate'>paragraph-separate</a>()</tt>	this is the regular expression for recognizing the beginning of a line that separates paragraphs
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Standard-Regexps.html#index-paragraph_002dstart'>paragraph-start</a>()</tt>	this is the regular expression for recognizing the beginning of a line that starts or separates paragraphs
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Standard-Regexps.html#index-sentence_002dend'>sentence-end</a>()</tt>	this function returns the value of the variable sentence-end if non-nil
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Startup-Summary.html#index-inhibit_002dstartup_002dscreen'>inhibit-startup-screen</a>()</tt>	this variable if non-nil inhibits the startup screen
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Startup-Summary.html#index-initial_002dbuffer_002dchoice'>initial-buffer-choice</a>()</tt>	if non-nil this variable is a string that specifies a file or directory for emacs to display after starting up instead of the startup screen
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Startup-Summary.html#index-inhibit_002dstartup_002decho_002darea_002dmessage'>inhibit-startup-echo-area-message</a>()</tt>	this variable controls the display of the startup echo area message
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Startup-Summary.html#index-initial_002dscratch_002dmessage'>initial-scratch-message</a>()</tt>	this variable if non-nil should be a string which is inserted into the *scratch* buffer when emacs starts up
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Sticky-Properties.html#index-insert_002dand_002dinherit'>insert-and-inherit</a>(strings)</tt>	insert the strings strings just like the function insert but inherit any sticky properties from the adjoining text
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Sticky-Properties.html#index-insert_002dbefore_002dmarkers_002dand_002dinherit'>insert-before-markers-and-inherit</a>(strings)</tt>	insert the strings strings just like the function insert-before-markers but inherit any sticky properties from the adjoining text
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/String-Conversion.html#index-number_002dto_002dstring'>number-to-string</a>(number)</tt>	 this function returns a string consisting of the printed base-ten representation of number
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/String-Conversion.html#index-string_002dto_002dnumber'>string-to-number</a>(string,base)</tt>	 this function returns the numeric value of the characters in string
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/String-Conversion.html#index-char_002dto_002dstring'>char-to-string</a>(character)</tt>	 this function returns a new string containing one character character
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/String-Conversion.html#index-string_002dto_002dchar'>string-to-char</a>(string)</tt>	this function returns the first character in string
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/String-Search.html#index-search_002dforward'>search-forward</a>(string,limit,noerror,repeat)</tt>	this function searches forward from point for an exact match for string
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/String-Search.html#index-search_002dbackward'>search-backward</a>(string,limit,noerror,repeat)</tt>	this function searches backward from point for string
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/String-Search.html#index-word_002dsearch_002dforward'>word-search-forward</a>(string,limit,noerror,repeat)</tt>	this function searches forward from point for a “word” match for string
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/String-Search.html#index-word_002dsearch_002dforward_002dlax'>word-search-forward-lax</a>(string,limit,noerror,repeat)</tt>	this command is identical to word-search-forward except that the beginning or the end of string need not match a word boundary unless string begins or ends in whitespace
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/String-Search.html#index-word_002dsearch_002dbackward'>word-search-backward</a>(string,limit,noerror,repeat)</tt>	this function searches backward from point for a word match to string
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/String-Search.html#index-word_002dsearch_002dbackward_002dlax'>word-search-backward-lax</a>(string,limit,noerror,repeat)</tt>	this command is identical to word-search-backward except that the beginning or the end of string need not match a word boundary unless string begins or ends in whitespace
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Subprocess-Creation.html#index-exec_002dsuffixes'>exec-suffixes</a>()</tt>	this variable is a list of suffixes strings to try adding to the specified program file name
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Subprocess-Creation.html#index-exec_002dpath'>exec-path</a>()</tt>	the value of this variable is a list of directories to search for programs to run in subprocesses
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Subroutines-of-Visiting.html#index-create_002dfile_002dbuffer'>create-file-buffer</a>(filename)</tt>	this function creates a suitably named buffer for visiting filename and returns it
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Subroutines-of-Visiting.html#index-after_002dfind_002dfile'>after-find-file</a>(error,warn,noauto,after-find-file-from-revert-buffer,nomodes)</tt>	this function sets the buffer major mode and parses local variables see auto major mode 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Substitution.html#index-subst_002dchar_002din_002dregion'>subst-char-in-region</a>(start,end,old-char,new-char,noundo)</tt>	 this function replaces all occurrences of the character old-char with the character new-char in the region of the current buffer defined by start and end
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Substitution.html#index-translate_002dregion'>translate-region</a>(start,end,table)</tt>	this function applies a translation table to the characters in the buffer between positions start and end
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Suspending-Emacs.html#index-suspend_002demacs'>suspend-emacs</a>(string)</tt>	this function stops emacs and returns control to the superior process
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Suspending-Emacs.html#index-suspend_002dtty'>suspend-tty</a>(tty)</tt>	if tty specifies a terminal device used by emacs this function relinquishes the device and restores it to its prior state
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Suspending-Emacs.html#index-resume_002dtty'>resume-tty</a>(tty)</tt>	this function resumes the previously suspended terminal device tty where tty has the same possible values as it does for suspend-tty
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Suspending-Emacs.html#index-controlling_002dtty_002dp'>controlling-tty-p</a>(tty)</tt>	this function returns non-nil if tty is the controlling terminal of the emacs session tty can be a terminal object a frame meaning the terminal for that frame or nil meaning the terminal for the selected frame 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Suspending-Emacs.html#index-suspend_002dframe'>suspend-frame</a>()</tt>	this command suspends a frame
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Swapping-Text.html#index-buffer_002dswap_002dtext'>buffer-swap-text</a>(buffer)</tt>	this function swaps the text of the current buffer and that of its argument buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Switching-Buffers.html#index-switch_002dto_002dbuffer'>switch-to-buffer</a>(buffer-or-name,norecord,force-same-window)</tt>	this command attempts to display buffer-or-name in the selected window and make it the current buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Switching-Buffers.html#index-switch_002dto_002dbuffer_002dpreserve_002dwindow_002dpoint'>switch-to-buffer-preserve-window-point</a>()</tt>	if this variable is nil switch-to-buffer displays the buffer specified by buffer-or-name at the position of that buffer’s point
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Switching-Buffers.html#index-switch_002dto_002dbuffer_002dother_002dwindow'>switch-to-buffer-other-window</a>(buffer-or-name,norecord)</tt>	this function displays the buffer specified by buffer-or-name in some window other than the selected window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Switching-Buffers.html#index-switch_002dto_002dbuffer_002dother_002dframe'>switch-to-buffer-other-frame</a>(buffer-or-name,norecord)</tt>	this function displays the buffer specified by buffer-or-name in a new frame
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Switching-Buffers.html#index-pop_002dto_002dbuffer'>pop-to-buffer</a>(buffer-or-name,action,norecord)</tt>	this function makes buffer-or-name the current buffer and displays it in some window preferably not the window previously selected
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Symbol-Plists.html#index-get'>get</a>(symbol,property)</tt>	this function returns the value of the property named property in symbol’s property list
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Symbol-Plists.html#index-put'>put</a>(symbol,property,value)</tt>	this function puts value onto symbol’s property list under the property name property replacing any previous property value
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Symbol-Plists.html#index-symbol_002dplist'>symbol-plist</a>(symbol)</tt>	this function returns the property list of symbol
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Symbol-Plists.html#index-setplist'>setplist</a>(symbol,plist)</tt>	this function sets symbol’s property list to plist
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Symbol-Plists.html#index-function_002dget'>function-get</a>(symbol,property)</tt>	this function is identical to get except that if symbol is the name of a function alias it looks in the property list of the symbol naming the actual function
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Symbols.html#index-symbolp'>symbolp</a>(object)</tt>	this function returns t if object is a symbol nil otherwise
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Synchronous-Processes.html#index-call_002dprocess'>call-process</a>(program,infile,destination,display,args)</tt>	this function calls program and waits for it to finish
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Synchronous-Processes.html#index-process_002dfile'>process-file</a>(program,infile,buffer,display,args)</tt>	this function processes files synchronously in a separate process
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Synchronous-Processes.html#index-call_002dprocess_002dregion'>call-process-region</a>(start,end,program,delete,destination,display,args)</tt>	this function sends the text from start to end as standard input to a process running program
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Synchronous-Processes.html#index-call_002dprocess_002dshell_002dcommand'>call-process-shell-command</a>(command,infile,destination,display)</tt>	this function executes the shell command command synchronously
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Synchronous-Processes.html#index-process_002dfile_002dshell_002dcommand'>process-file-shell-command</a>(command,infile,destination,display)</tt>	this function is like call-process-shell-command but uses process-file internally
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Synchronous-Processes.html#index-shell_002dcommand_002dto_002dstring'>shell-command-to-string</a>(command)</tt>	this function executes command a string as a shell command then returns the command’s output as a string
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Synchronous-Processes.html#index-process_002dlines'>process-lines</a>(program,args)</tt>	this function runs program waits for it to finish and returns its output as a list of strings
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Syntax-Basics.html#index-syntax_002dtable_002dp'>syntax-table-p</a>(object)</tt>	this function returns t if object is a syntax table
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Syntax-Basics.html#index-standard_002dsyntax_002dtable'>standard-syntax-table</a>()</tt>	this function returns the standard syntax table which is the syntax table used in fundamental mode
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Syntax-Table-Functions.html#index-make_002dsyntax_002dtable'>make-syntax-table</a>(table)</tt>	this function creates a new syntax table
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Syntax-Table-Functions.html#index-copy_002dsyntax_002dtable'>copy-syntax-table</a>(table)</tt>	this function constructs a copy of table and returns it
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Syntax-Table-Functions.html#index-modify_002dsyntax_002dentry'>modify-syntax-entry</a>(char,syntax-descriptor,table)</tt>	 this function sets the syntax entry for char according to syntax-descriptor
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Syntax-Table-Functions.html#index-char_002dsyntax'>char-syntax</a>(character)</tt>	this function returns the syntax class of character represented by its designator character see syntax class table 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Syntax-Table-Functions.html#index-set_002dsyntax_002dtable'>set-syntax-table</a>(table)</tt>	this function makes table the syntax table for the current buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Syntax-Table-Functions.html#index-syntax_002dtable'>syntax-table</a>()</tt>	this function returns the current syntax table which is the table for the current buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Syntax-Table-Functions.html#index-describe_002dsyntax'>describe-syntax</a>(buffer)</tt>	this command displays the contents of the syntax table of buffer by default the current buffer in a help buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Syntax-Table-Internals.html#index-string_002dto_002dsyntax'>string-to-syntax</a>(desc)</tt>	given a syntax descriptor desc a string this function returns the corresponding raw syntax descriptor
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Syntax-Table-Internals.html#index-syntax_002dafter'>syntax-after</a>(pos)</tt>	this function returns the raw syntax descriptor for the character in the buffer after position pos taking account of syntax properties as well as the syntax table
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Syntax-Table-Internals.html#index-syntax_002dclass'>syntax-class</a>(syntax)</tt>	this function returns the syntax code for the raw syntax descriptor syntax
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/System-Environment.html#index-system_002dname'>system-name</a>()</tt>	this function returns the name of the machine you are running on as a string
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/System-Environment.html#index-mail_002dhost_002daddress'>mail-host-address</a>()</tt>	if this variable is non-nil it is used instead of system-name for purposes of generating email addresses
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/System-Environment.html#index-getenv'>getenv</a>(var,frame)</tt>	 this function returns the value of the environment variable var as a string
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/System-Environment.html#index-setenv'>setenv</a>(variable,value,substitute)</tt>	this command sets the value of the environment variable named variable to value
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/System-Environment.html#index-parse_002dcolon_002dpath'>parse-colon-path</a>(path)</tt>	this function takes a search path string such as the value of the path environment variable and splits it at the separators returning a list of directory names
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/System-Environment.html#index-load_002daverage'>load-average</a>(use-float)</tt>	this function returns the current 1-minute 5-minute and 15-minute system load averages in a list
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/System-Environment.html#index-emacs_002dpid'>emacs-pid</a>()</tt>	this function returns the process id of the emacs process as an integer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/System-Processes.html#index-list_002dsystem_002dprocesses'>list-system-processes</a>()</tt>	this function returns a list of all the processes running on the system
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/System-Processes.html#index-process_002dattributes'>process-attributes</a>(pid)</tt>	this function returns an alist of attributes for the process specified by its process id pid
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Tabulated-List-Mode.html#index-tabulated_002dlist_002dinit_002dheader'>tabulated-list-init-header</a>()</tt>	this function computes and sets header-line-format for the tabulated list buffer see header lines and assigns a keymap to the header line to allow sort entries by clicking on column headers
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Tabulated-List-Mode.html#index-tabulated_002dlist_002dprint'>tabulated-list-print</a>(remember-pos)</tt>	this function populates the current buffer with entries
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Temporary-Displays.html#index-temp_002dbuffer_002dshow_002dfunction'>temp-buffer-show-function</a>()</tt>	if this variable is non-nil with-output-to-temp-buffer calls it as a function to do the job of displaying a help buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Temporary-Displays.html#index-momentary_002dstring_002ddisplay'>momentary-string-display</a>(string,position,char,message)</tt>	this function momentarily displays string in the current buffer at position
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Terminal-I_002fO-Encoding.html#index-keyboard_002dcoding_002dsystem'>keyboard-coding-system</a>(terminal)</tt>	this function returns the coding system used for decoding keyboard input from terminal
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Terminal-I_002fO-Encoding.html#index-set_002dkeyboard_002dcoding_002dsystem'>set-keyboard-coding-system</a>(coding-system,terminal)</tt>	this command specifies coding-system as the coding system to use for decoding keyboard input from terminal
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Terminal-I_002fO-Encoding.html#index-terminal_002dcoding_002dsystem'>terminal-coding-system</a>(terminal)</tt>	this function returns the coding system that is in use for encoding terminal output from terminal
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Terminal-I_002fO-Encoding.html#index-set_002dterminal_002dcoding_002dsystem'>set-terminal-coding-system</a>(coding-system,terminal)</tt>	this command specifies coding-system as the coding system to use for encoding terminal output from terminal
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Terminal-Output.html#index-baud_002drate'>baud-rate</a>()</tt>	this variable’s value is the output speed of the terminal as far as emacs knows
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Terminal-Output.html#index-send_002dstring_002dto_002dterminal'>send-string-to-terminal</a>(string,terminal)</tt>	this function sends string to terminal without alteration
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Terminal-Output.html#index-open_002dtermscript'>open-termscript</a>(filename)</tt>	 this function is used to open a termscript file that will record all the characters sent by emacs to the terminal
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Terminal-Parameters.html#index-terminal_002dparameters'>terminal-parameters</a>(terminal)</tt>	this function returns an alist listing all the parameters of terminal and their values
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Terminal-Parameters.html#index-terminal_002dparameter'>terminal-parameter</a>(terminal,parameter)</tt>	this function returns the value of the parameter parameter a symbol of terminal
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Terminal-Parameters.html#index-set_002dterminal_002dparameter'>set-terminal-parameter</a>(terminal,parameter,value)</tt>	this function sets the parameter parm of terminal to the specified value and returns the previous value of that parameter
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Test-Coverage.html#index-1value'>1value</a>(form)</tt>	evaluate form and return its value but inform coverage testing that form’s value should always be the same
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Test-Coverage.html#index-noreturn'>noreturn</a>(form)</tt>	evaluate form informing coverage testing that form should never return
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Testing-Accessibility.html#index-file_002dexists_002dp'>file-exists-p</a>(filename)</tt>	this function returns t if a file named filename appears to exist
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Testing-Accessibility.html#index-file_002dreadable_002dp'>file-readable-p</a>(filename)</tt>	this function returns t if a file named filename exists and you can read it
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Testing-Accessibility.html#index-file_002dexecutable_002dp'>file-executable-p</a>(filename)</tt>	this function returns t if a file named filename exists and you can execute it
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Testing-Accessibility.html#index-file_002dwritable_002dp'>file-writable-p</a>(filename)</tt>	this function returns t if the file filename can be written or created by you and nil otherwise
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Testing-Accessibility.html#index-file_002daccessible_002ddirectory_002dp'>file-accessible-directory-p</a>(dirname)</tt>	this function returns t if you have permission to open existing files in the directory whose name as a file is dirname otherwise or if there is no such directory it returns nil
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Testing-Accessibility.html#index-access_002dfile'>access-file</a>(filename,string)</tt>	this function opens file filename for reading then closes it and returns nil
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Testing-Accessibility.html#index-file_002downership_002dpreserved_002dp'>file-ownership-preserved-p</a>(filename,group)</tt>	this function returns t if deleting the file filename and then creating it anew would keep the file’s owner unchanged
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Testing-Accessibility.html#index-file_002dmodes'>file-modes</a>(filename)</tt>	 this function returns the mode bits of filename—an integer summarizing its read write and execution permissions
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Text-Comparison.html#index-char_002dequal'>char-equal</a>(character1,character2)</tt>	this function returns t if the arguments represent the same character nil otherwise
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Text-Comparison.html#index-string_003d'>string=</a>(string1,string2)</tt>	this function returns t if the characters of the two strings match exactly
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Text-Comparison.html#index-string_002dequal'>string-equal</a>(string1,string2)</tt>	string-equal is another name for string=
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Text-Comparison.html#index-string_003c'>string<</a>(string1,string2)</tt>	this function compares two strings a character at a time
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Text-Comparison.html#index-string_002dlessp'>string-lessp</a>(string1,string2)</tt>	string-lessp is another name for string<
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Text-Comparison.html#index-string_002dprefix_002dp'>string-prefix-p</a>(string1,string2,ignore-case)</tt>	this function returns non-nil if string1 is a prefix of string2 i
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Text-Comparison.html#index-string_002dsuffix_002dp'>string-suffix-p</a>(suffix,string,ignore-case)</tt>	this function returns non-nil if suffix is a suffix of string i
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Text-Comparison.html#index-compare_002dstrings'>compare-strings</a>(string1,start1,end1,string2,start2,end2,ignore-case)</tt>	this function compares a specified part of string1 with a specified part of string2
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Text-Comparison.html#index-assoc_002dstring'>assoc-string</a>(key,alist,case-fold)</tt>	this function works like assoc except that key must be a string or symbol and comparison is done using compare-strings
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Text-from-Minibuffer.html#index-read_002dfrom_002dminibuffer'>read-from-minibuffer</a>(prompt,initial,keymap,read,history,default,inherit-input-method)</tt>	this function is the most general way to get input from the minibuffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Text-from-Minibuffer.html#index-read_002dstring'>read-string</a>(prompt,initial,history,default,inherit-input-method)</tt>	this function reads a string from the minibuffer and returns it
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Text-from-Minibuffer.html#index-read_002dregexp'>read-regexp</a>(prompt,defaults,history)</tt>	this function reads a regular expression as a string from the minibuffer and returns it
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Text-from-Minibuffer.html#index-read_002dno_002dblanks_002dinput'>read-no-blanks-input</a>(prompt,initial,inherit-input-method)</tt>	this function reads a string from the minibuffer but does not allow whitespace characters as part of the input instead those characters terminate the input
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Text-Lines.html#index-beginning_002dof_002dline'>beginning-of-line</a>(count)</tt>	this function moves point to the beginning of the current line
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Text-Lines.html#index-line_002dbeginning_002dposition'>line-beginning-position</a>(count)</tt>	return the position that beginning-of-line count would move to
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Text-Lines.html#index-end_002dof_002dline'>end-of-line</a>(count)</tt>	this function moves point to the end of the current line
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Text-Lines.html#index-line_002dend_002dposition'>line-end-position</a>(count)</tt>	return the position that end-of-line count would move to
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Text-Lines.html#index-forward_002dline'>forward-line</a>(count)</tt>	 this function moves point forward count lines to the beginning of the line
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Text-Lines.html#index-count_002dlines'>count-lines</a>(start,end)</tt>	 this function returns the number of lines between the positions start and end in the current buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Text-Lines.html#index-count_002dwords'>count-words</a>(start,end)</tt>	 this function returns the number of words between the positions start and end in the current buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Text-Lines.html#index-line_002dnumber_002dat_002dpos'>line-number-at-pos</a>(pos)</tt>	 this function returns the line number in the current buffer corresponding to the buffer position pos
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Text-Representations.html#index-position_002dbytes'>position-bytes</a>(position)</tt>	buffer positions are measured in character units
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Text-Representations.html#index-byte_002dto_002dposition'>byte-to-position</a>(byte-position)</tt>	return the buffer position in character units corresponding to given byte-position in the current buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Text-Representations.html#index-multibyte_002dstring_002dp'>multibyte-string-p</a>(string)</tt>	return t if string is a multibyte string nil otherwise
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Text-Representations.html#index-string_002dbytes'>string-bytes</a>(string)</tt>	 this function returns the number of bytes in string
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Text-Representations.html#index-unibyte_002dstring'>unibyte-string</a>(bytes)</tt>	this function concatenates all its argument bytes and makes the result a unibyte string
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Text-Terminal-Colors.html#index-tty_002dcolor_002ddefine'>tty-color-define</a>(name,number,rgb,frame)</tt>	this function associates the color name name with color number number on the terminal
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Text-Terminal-Colors.html#index-tty_002dcolor_002dclear'>tty-color-clear</a>(frame)</tt>	this function clears the table of defined colors for a text terminal
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Text-Terminal-Colors.html#index-tty_002dcolor_002dalist'>tty-color-alist</a>(frame)</tt>	this function returns an alist recording the known colors supported by a text terminal
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Text-Terminal-Colors.html#index-tty_002dcolor_002dapproximate'>tty-color-approximate</a>(rgb,frame)</tt>	this function finds the closest color among the known colors supported for display to that described by the rgb value rgb a list of color values 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Text-Terminal-Colors.html#index-tty_002dcolor_002dtranslate'>tty-color-translate</a>(color,frame)</tt>	this function finds the closest color to color among the known colors supported for display and returns its index an integer 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Textual-Scrolling.html#index-scroll_002dup'>scroll-up</a>(count)</tt>	this function scrolls forward by count lines in the selected window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Textual-Scrolling.html#index-scroll_002ddown'>scroll-down</a>(count)</tt>	this function scrolls backward by count lines in the selected window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Textual-Scrolling.html#index-scroll_002dup_002dcommand'>scroll-up-command</a>(count)</tt>	this behaves like scroll-up except that if the selected window cannot be scrolled any further and the value of the variable scroll-error-top-bottom is t it tries to move to the end of the buffer instead
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Textual-Scrolling.html#index-scroll_002ddown_002dcommand'>scroll-down-command</a>(count)</tt>	this behaves like scroll-down except that if the selected window cannot be scrolled any further and the value of the variable scroll-error-top-bottom is t it tries to move to the beginning of the buffer instead
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Textual-Scrolling.html#index-scroll_002dother_002dwindow'>scroll-other-window</a>(count)</tt>	this function scrolls the text in another window upward count lines
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Textual-Scrolling.html#index-scroll_002dmargin'>scroll-margin</a>()</tt>	this option specifies the size of the scroll margin—a minimum number of lines between point and the top or bottom of a window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Textual-Scrolling.html#index-scroll_002dconservatively'>scroll-conservatively</a>()</tt>	this variable controls how scrolling is done automatically when point moves off the screen or into the scroll margin 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Textual-Scrolling.html#index-scroll_002ddown_002daggressively'>scroll-down-aggressively</a>()</tt>	the value of this variable should be either nil or a fraction f between 0 and 1
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Textual-Scrolling.html#index-scroll_002dup_002daggressively'>scroll-up-aggressively</a>()</tt>	likewise for scrolling up
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Textual-Scrolling.html#index-scroll_002dstep'>scroll-step</a>()</tt>	this variable is an older variant of scroll-conservatively
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Textual-Scrolling.html#index-scroll_002dpreserve_002dscreen_002dposition'>scroll-preserve-screen-position</a>()</tt>	if this option is t whenever a scrolling command moves point off-window emacs tries to adjust point to keep the cursor at its old vertical position in the window rather than the window edge
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Textual-Scrolling.html#index-next_002dscreen_002dcontext_002dlines'>next-screen-context-lines</a>()</tt>	the value of this variable is the number of lines of continuity to retain when scrolling by full screens
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Textual-Scrolling.html#index-scroll_002derror_002dtop_002dbottom'>scroll-error-top-bottom</a>()</tt>	if this option is nil the default scroll-up-command and scroll-down-command simply signal an error when no more scrolling is possible
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Textual-Scrolling.html#index-recenter'>recenter</a>(count)</tt>	 this function scrolls the text in the selected window so that point is displayed at a specified vertical position within the window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Textual-Scrolling.html#index-recenter_002dredisplay'>recenter-redisplay</a>()</tt>	if this variable is non-nil calling recenter with a nil argument redraws the frame
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Textual-Scrolling.html#index-recenter_002dtop_002dbottom'>recenter-top-bottom</a>(count)</tt>	this command which is the default binding for c-l acts like recenter except if called with no argument
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Textual-Scrolling.html#index-recenter_002dpositions'>recenter-positions</a>()</tt>	this variable controls how recenter-top-bottom behaves when called with no argument
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/The-Mark.html#index-mark'>mark</a>(force)</tt>	 this function returns the current buffer’s mark position as an integer or nil if no mark has ever been set in this buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/The-Mark.html#index-mark_002dmarker'>mark-marker</a>()</tt>	this function returns the marker that represents the current buffer’s mark
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/The-Mark.html#index-set_002dmark'>set-mark</a>(position)</tt>	this function sets the mark to position and activates the mark
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/The-Mark.html#index-push_002dmark'>push-mark</a>(position,nomsg,activate)</tt>	this function sets the current buffer’s mark to position and pushes a copy of the previous mark onto mark-ring
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/The-Mark.html#index-pop_002dmark'>pop-mark</a>()</tt>	this function pops off the top element of mark-ring and makes that mark become the buffer’s actual mark
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/The-Mark.html#index-transient_002dmark_002dmode'>transient-mark-mode</a>()</tt>	this variable if non-nil enables transient mark mode
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/The-Mark.html#index-mark_002deven_002dif_002dinactive'>mark-even-if-inactive</a>()</tt>	if this is non-nil lisp programs and the emacs user can use the mark even when it is inactive
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/The-Mark.html#index-deactivate_002dmark'>deactivate-mark</a>(force)</tt>	if transient mark mode is enabled or force is non-nil this function deactivates the mark and runs the normal hook deactivate-mark-hook
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/The-Mark.html#index-handle_002dshift_002dselection'>handle-shift-selection</a>()</tt>	this function implements the “shift-selection” behavior of point-motion commands
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/The-Mark.html#index-mark_002dring_002dmax'>mark-ring-max</a>()</tt>	the value of this variable is the maximum size of mark-ring
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/The-Region.html#index-region_002dbeginning'>region-beginning</a>()</tt>	this function returns the position of the beginning of the region as an integer 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/The-Region.html#index-region_002dend'>region-end</a>()</tt>	this function returns the position of the end of the region as an integer 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/The-Region.html#index-use_002dregion_002dp'>use-region-p</a>()</tt>	this function returns t if transient mark mode is enabled the mark is active and there is a valid region in the buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Time-Calculations.html#index-time_002dless_002dp'>time-less-p</a>(t1,t2)</tt>	this returns t if time value t1 is less than time value t2
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Time-Calculations.html#index-time_002dsubtract'>time-subtract</a>(t1,t2)</tt>	this returns the time difference t1 - t2 between two time values in the same format as a time value
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Time-Calculations.html#index-time_002dadd'>time-add</a>(t1,t2)</tt>	this returns the sum of two time values one of which ought to represent a time difference rather than a point in time
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Time-Calculations.html#index-time_002dto_002ddays'>time-to-days</a>(time)</tt>	this function returns the number of days between the beginning of year 1 and time
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Time-Calculations.html#index-time_002dto_002dday_002din_002dyear'>time-to-day-in-year</a>(time)</tt>	this returns the day number within the year corresponding to time
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Time-Calculations.html#index-date_002dleap_002dyear_002dp'>date-leap-year-p</a>(year)</tt>	this function returns t if year is a leap year
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Time-Conversion.html#index-decode_002dtime'>decode-time</a>(time)</tt>	this function converts a time value into calendrical information
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Time-Conversion.html#index-encode_002dtime'>encode-time</a>(seconds,minutes,hour,day,month,year,zone)</tt>	this function is the inverse of decode-time
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Time-of-Day.html#index-current_002dtime_002dstring'>current-time-string</a>(time-value)</tt>	this function returns the current time and date as a human-readable string
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Time-of-Day.html#index-current_002dtime'>current-time</a>()</tt>	this function returns the current time represented as a list of four integers sec-high sec-low microsec picosec 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Time-of-Day.html#index-float_002dtime'>float-time</a>(time-value)</tt>	this function returns the current time as a floating-point number of seconds since the epoch
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Time-of-Day.html#index-current_002dtime_002dzone'>current-time-zone</a>(time-value)</tt>	 this function returns a list describing the time zone that the user is in
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Time-Parsing.html#index-date_002dto_002dtime'>date-to-time</a>(string)</tt>	this function parses the time-string string and returns the corresponding time value
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Time-Parsing.html#index-format_002dtime_002dstring'>format-time-string</a>(format-string,time,universal)</tt>	this function converts time or the current time if time is omitted to a string according to format-string
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Time-Parsing.html#index-seconds_002dto_002dtime'>seconds-to-time</a>(seconds)</tt>	this function converts seconds the number of seconds since the epoch to a time value and returns that
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Time-Parsing.html#index-format_002dseconds'>format-seconds</a>(format-string,seconds)</tt>	this function converts its argument seconds into a string of years days hours etc
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Timers.html#index-run_002dat_002dtime'>run-at-time</a>(time,repeat,function,args)</tt>	this sets up a timer that calls the function function with arguments args at time time
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Timers.html#index-timer_002dmax_002drepeats'>timer-max-repeats</a>()</tt>	this variable’s value specifies the maximum number of times to repeat calling a timer function in a row when many previously scheduled calls were unavoidably delayed
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Timers.html#index-cancel_002dtimer'>cancel-timer</a>(timer)</tt>	this cancels the requested action for timer which should be a timer—usually one previously returned by run-at-time or run-with-idle-timer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Tool-Bar.html#index-tool_002dbar_002dadd_002ditem'>tool-bar-add-item</a>(icon,def,key,props)</tt>	this function adds an item to the tool bar by modifying tool-bar-map
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Tool-Bar.html#index-tool_002dbar_002dadd_002ditem_002dfrom_002dmenu'>tool-bar-add-item-from-menu</a>(command,icon,map,props)</tt>	this function is a convenience for defining tool bar items which are consistent with existing menu bar bindings
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Tool-Bar.html#index-tool_002dbar_002dlocal_002ditem_002dfrom_002dmenu'>tool-bar-local-item-from-menu</a>(command,icon,in-map,from-map,props)</tt>	this function is used for making non-global tool bar items
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Trace-Buffer.html#index-edebug_002dtrace'>edebug-trace</a>(format-string,format-args)</tt>	this function inserts text in the trace buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Transaction-Queues.html#index-tq_002dcreate'>tq-create</a>(process)</tt>	this function creates and returns a transaction queue communicating with process
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Transaction-Queues.html#index-tq_002denqueue'>tq-enqueue</a>(queue,question,regexp,closure,fn,delay-question)</tt>	this function sends a transaction to queue queue
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Transaction-Queues.html#index-tq_002dclose'>tq-close</a>(queue)</tt>	shut down transaction queue queue waiting for all pending transactions to complete and then terminate the connection or child process
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Translation-of-Characters.html#index-make_002dtranslation_002dtable'>make-translation-table</a>(translations)</tt>	this function returns a translation table based on the argument translations
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Translation-of-Characters.html#index-make_002dtranslation_002dtable_002dfrom_002dvector'>make-translation-table-from-vector</a>(vec)</tt>	this function returns a translation table made from vec that is an array of 256 elements to map bytes (values 0 through #xff) to characters
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Translation-of-Characters.html#index-make_002dtranslation_002dtable_002dfrom_002dalist'>make-translation-table-from-alist</a>(alist)</tt>	this function is similar to make-translation-table but returns a complex translation table rather than a simple one-to-one mapping
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Transposition.html#index-transpose_002dregions'>transpose-regions</a>(start1,end1,start2,end2,leave-markers)</tt>	this function exchanges two nonoverlapping portions of the buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Truenames.html#index-file_002dtruename'>file-truename</a>(filename)</tt>	this function returns the truename of the file filename
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Truenames.html#index-file_002dchase_002dlinks'>file-chase-links</a>(filename,limit)</tt>	this function follows symbolic links starting with filename until it finds a file name which is not the name of a symbolic link
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Truenames.html#index-file_002dequal_002dp'>file-equal-p</a>(file1,file2)</tt>	this function returns t if the files file1 and file2 name the same file
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Truenames.html#index-file_002din_002ddirectory_002dp'>file-in-directory-p</a>(file,dir)</tt>	this function returns t if file is a file in directory dir or in a subdirectory of dir
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Truncation.html#index-truncate_002dlines'>truncate-lines</a>()</tt>	if this buffer-local variable is non-nil lines that extend beyond the right edge of the window are truncated otherwise they are continued
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Truncation.html#index-truncate_002dpartial_002dwidth_002dwindows'>truncate-partial-width-windows</a>()</tt>	 this variable controls line truncation in partial-width windows
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Type-Predicates.html#index-type_002dof'>type-of</a>(object)</tt>	this function returns a symbol naming the primitive type of object
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Undo.html#index-undo_002dboundary'>undo-boundary</a>()</tt>	this function places a boundary element in the undo list
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Undo.html#index-primitive_002dundo'>primitive-undo</a>(count,list)</tt>	this is the basic function for undoing elements of an undo list
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Unique-File-Names.html#index-make_002dtemp_002dfile'>make-temp-file</a>(prefix,dir-flag,suffix)</tt>	this function creates a temporary file and returns its name
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Unique-File-Names.html#index-temporary_002dfile_002ddirectory'>temporary-file-directory</a>()</tt>	 this variable specifies the directory name for creating temporary files
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Unique-File-Names.html#index-small_002dtemporary_002dfile_002ddirectory'>small-temporary-file-directory</a>()</tt>	this variable specifies the directory name for creating certain temporary files which are likely to be small
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Unique-File-Names.html#index-make_002dtemp_002dname'>make-temp-name</a>(base-name)</tt>	this function generates a string that can be used as a unique file name
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Unloading.html#index-unload_002dfeature'>unload-feature</a>(feature,force)</tt>	this command unloads the library that provided feature feature
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/User-Identification.html#index-user_002dmail_002daddress'>user-mail-address</a>()</tt>	this holds the nominal email address of the user who is using emacs
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/User-Identification.html#index-user_002dlogin_002dname'>user-login-name</a>(uid)</tt>	this function returns the name under which the user is logged in
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/User-Identification.html#index-user_002dreal_002dlogin_002dname'>user-real-login-name</a>()</tt>	this function returns the user name corresponding to emacs’s real uid
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/User-Identification.html#index-user_002dfull_002dname'>user-full-name</a>(uid)</tt>	this function returns the full name of the logged-in user—or the value of the environment variable name if that is set
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/User-Identification.html#index-user_002dreal_002duid'>user-real-uid</a>()</tt>	this function returns the real uid of the user
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/User-Identification.html#index-user_002duid'>user-uid</a>()</tt>	this function returns the effective uid of the user
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/User-Identification.html#index-group_002dgid'>group-gid</a>()</tt>	this function returns the effective gid of the emacs process
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/User-Identification.html#index-group_002dreal_002dgid'>group-real-gid</a>()</tt>	this function returns the real gid of the emacs process
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/User-Identification.html#index-system_002dusers'>system-users</a>()</tt>	this function returns a list of strings listing the user names on the system
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/User-Identification.html#index-system_002dgroups'>system-groups</a>()</tt>	this function returns a list of strings listing the names of user groups on the system
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/User_002dChosen-Coding-Systems.html#index-select_002dsafe_002dcoding_002dsystem'>select-safe-coding-system</a>(from,to,default-coding-system,accept-default-p,file)</tt>	this function selects a coding system for encoding specified text asking the user to choose if necessary
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/User_002dChosen-Coding-Systems.html#index-read_002dcoding_002dsystem'>read-coding-system</a>(prompt,default)</tt>	this function reads a coding system using the minibuffer prompting with string prompt and returns the coding system name as a symbol
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/User_002dChosen-Coding-Systems.html#index-read_002dnon_002dnil_002dcoding_002dsystem'>read-non-nil-coding-system</a>(prompt)</tt>	this function reads a coding system using the minibuffer prompting with string prompt and returns the coding system name as a symbol
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/User_002dLevel-Deletion.html#index-delete_002dhorizontal_002dspace'>delete-horizontal-space</a>(backward-only)</tt>	 this function deletes all spaces and tabs around point
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/User_002dLevel-Deletion.html#index-delete_002dindentation'>delete-indentation</a>(join-following-p)</tt>	this function joins the line point is on to the previous line deleting any whitespace at the join and in some cases replacing it with one space
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/User_002dLevel-Deletion.html#index-fixup_002dwhitespace'>fixup-whitespace</a>()</tt>	this function replaces all the horizontal whitespace surrounding point with either one space or no space according to the context
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/User_002dLevel-Deletion.html#index-just_002done_002dspace'>just-one-space</a>(n)</tt>	this command replaces any spaces and tabs around point with a single space or n spaces if n is specified
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/User_002dLevel-Deletion.html#index-delete_002dblank_002dlines'>delete-blank-lines</a>()</tt>	this function deletes blank lines surrounding point
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/User_002dLevel-Deletion.html#index-delete_002dtrailing_002dwhitespace'>delete-trailing-whitespace</a>(start,end)</tt>	delete trailing whitespace in the region defined by start and end
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Using-Interactive.html#index-interactive'>interactive</a>(arg-descriptor)</tt>	this special form declares that a function is a command and that it may therefore be called interactively via m-x or by entering a key sequence bound to it 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Using-Interactive.html#index-interactive_002dform'>interactive-form</a>(function)</tt>	this function returns the interactive form of function
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Using-Lexical-Binding.html#index-special_002dvariable_002dp'>special-variable-p</a>(symbol)</tt>	this function returns non-nil if symbol is a special variable 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Usual-Display.html#index-ctl_002darrow'>ctl-arrow</a>()</tt>	 this buffer-local variable controls how control characters are displayed
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Usual-Display.html#index-tab_002dwidth'>tab-width</a>()</tt>	the value of this buffer-local variable is the spacing between tab stops used for displaying tab characters in emacs buffers
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Variable-Aliases.html#index-defvaralias'>defvaralias</a>(new-alias,base-variable,docstring)</tt>	this function defines the symbol new-alias as a variable alias for symbol base-variable
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Variable-Aliases.html#index-make_002dobsolete_002dvariable'>make-obsolete-variable</a>(obsolete-name,current-name,when,access-type)</tt>	this function makes the byte compiler warn that the variable obsolete-name is obsolete
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Variable-Aliases.html#index-define_002dobsolete_002dvariable_002dalias'>define-obsolete-variable-alias</a>(obsolete-name,current-name,when,docstring)</tt>	this macro marks the variable obsolete-name as obsolete and also makes it an alias for the variable current-name
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Variable-Aliases.html#index-indirect_002dvariable'>indirect-variable</a>(variable)</tt>	this function returns the variable at the end of the chain of aliases of variable
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Variable-Definitions.html#index-custom_002dadd_002dfrequent_002dvalue'>custom-add-frequent-value</a>(symbol,value)</tt>	for the customization option symbol add value to the list of reasonable values
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Variable-Definitions.html#index-custom_002dreevaluate_002dsetting'>custom-reevaluate-setting</a>(symbol)</tt>	this function re-evaluates the standard value of symbol which should be a user option declared via defcustom
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Variable-Definitions.html#index-custom_002dvariable_002dp'>custom-variable-p</a>(arg)</tt>	this function returns non-nil if arg is a customizable variable
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Vector-Functions.html#index-vectorp'>vectorp</a>(object)</tt>	this function returns t if object is a vector
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Vector-Functions.html#index-vector'>vector</a>(objects)</tt>	this function creates and returns a vector whose elements are the arguments objects
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Vector-Functions.html#index-make_002dvector'>make-vector</a>(length,object)</tt>	this function returns a new vector consisting of length elements each initialized to object
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Vector-Functions.html#index-vconcat'>vconcat</a>(sequences)</tt>	 this function returns a new vector containing all the elements of sequences
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Version-Info.html#index-emacs_002dversion'>emacs-version</a>(here)</tt>	this function returns a string describing the version of emacs that is running
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Vertical-Scrolling.html#index-window_002dvscroll'>window-vscroll</a>(window,pixels-p)</tt>	this function returns the current vertical scroll position of window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Vertical-Scrolling.html#index-set_002dwindow_002dvscroll'>set-window-vscroll</a>(window,lines,pixels-p)</tt>	this function sets window’s vertical scroll position to lines
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Visibility-of-Frames.html#index-frame_002dvisible_002dp'>frame-visible-p</a>(frame)</tt>	this function returns the visibility status of frame frame
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Visibility-of-Frames.html#index-iconify_002dframe'>iconify-frame</a>(frame)</tt>	this function iconifies frame frame
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Visibility-of-Frames.html#index-make_002dframe_002dvisible'>make-frame-visible</a>(frame)</tt>	this function makes frame frame visible
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Visibility-of-Frames.html#index-make_002dframe_002dinvisible'>make-frame-invisible</a>(frame,force)</tt>	this function makes frame frame invisible
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Visiting-Functions.html#index-find_002dfile'>find-file</a>(filename,wildcards)</tt>	this command selects a buffer visiting the file filename using an existing buffer if there is one and otherwise creating a new buffer and reading the file into it
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Visiting-Functions.html#index-find_002dfile_002dliterally'>find-file-literally</a>(filename)</tt>	this command visits filename like find-file does but it does not perform any format conversions see format conversion character code conversions see coding systems or end-of-line conversions see end of line conversion 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Visiting-Functions.html#index-find_002dfile_002dnoselect'>find-file-noselect</a>(filename,nowarn,rawfile,wildcards)</tt>	this function is the guts of all the file-visiting functions
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Visiting-Functions.html#index-find_002dfile_002dother_002dwindow'>find-file-other-window</a>(filename,wildcards)</tt>	this command selects a buffer visiting the file filename but does so in a window other than the selected window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Visiting-Functions.html#index-find_002dfile_002dread_002donly'>find-file-read-only</a>(filename,wildcards)</tt>	this command selects a buffer visiting the file filename like find-file but it marks the buffer as read-only
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Visiting-Functions.html#index-find_002dfile_002dwildcards'>find-file-wildcards</a>()</tt>	if this variable is non-nil then the various find-file commands check for wildcard characters and visit all the files that match them when invoked interactively or when their wildcards argument is non-nil 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Visiting-Functions.html#index-find_002dfile_002dhook'>find-file-hook</a>()</tt>	the value of this variable is a list of functions to be called after a file is visited
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Void-Variables.html#index-makunbound'>makunbound</a>(symbol)</tt>	this function empties out the value cell of symbol making the variable void
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Void-Variables.html#index-boundp'>boundp</a>(variable)</tt>	this function returns t if variable a symbol is not void and nil if it is void
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Waiting.html#index-sit_002dfor'>sit-for</a>(seconds,nodisp)</tt>	this function performs redisplay provided there is no pending input from the user then waits seconds seconds or until input is available
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Waiting.html#index-sleep_002dfor'>sleep-for</a>(seconds,millisec)</tt>	this function simply pauses for seconds seconds without updating the display
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Warning-Basics.html#index-display_002dwarning'>display-warning</a>(type,message,level,buffer-name)</tt>	this function reports a warning using message as the message and type as the warning type
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Warning-Basics.html#index-lwarn'>lwarn</a>(type,level,message,args)</tt>	this function reports a warning using the value of (format message args
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Warning-Basics.html#index-warn'>warn</a>(message,args)</tt>	this function reports a warning using the value of (format message args
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Warning-Options.html#index-warning_002dminimum_002dlevel'>warning-minimum-level</a>()</tt>	this user option specifies the minimum severity level that should be shown immediately to the user
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Warning-Options.html#index-warning_002dminimum_002dlog_002dlevel'>warning-minimum-log-level</a>()</tt>	this user option specifies the minimum severity level that should be logged in the warnings buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Warning-Options.html#index-warning_002dsuppress_002dtypes'>warning-suppress-types</a>()</tt>	this list specifies which warning types should not be displayed immediately for the user
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Warning-Options.html#index-warning_002dsuppress_002dlog_002dtypes'>warning-suppress-log-types</a>()</tt>	this list specifies which warning types should not be logged in the warnings buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/What-Is-a-Function.html#index-functionp'>functionp</a>(object)</tt>	this function returns t if object is any kind of function i
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/What-Is-a-Function.html#index-subrp'>subrp</a>(object)</tt>	this function returns t if object is a built-in function 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/What-Is-a-Function.html#index-byte_002dcode_002dfunction_002dp'>byte-code-function-p</a>(object)</tt>	this function returns t if object is a byte-code function
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/What-Is-a-Function.html#index-subr_002darity'>subr-arity</a>(subr)</tt>	this function provides information about the argument list of a primitive subr
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Where-Defined.html#index-symbol_002dfile'>symbol-file</a>(symbol,type)</tt>	this function returns the name of the file that defined symbol
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Window-Configurations.html#index-current_002dwindow_002dconfiguration'>current-window-configuration</a>(frame)</tt>	this function returns a new object representing frame’s current window configuration
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Window-Configurations.html#index-set_002dwindow_002dconfiguration'>set-window-configuration</a>(configuration)</tt>	this function restores the configuration of windows and buffers as specified by configuration for the frame that configuration was created for
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Window-Configurations.html#index-window_002dconfiguration_002dp'>window-configuration-p</a>(object)</tt>	this function returns t if object is a window configuration
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Window-Configurations.html#index-compare_002dwindow_002dconfigurations'>compare-window-configurations</a>(config1,config2)</tt>	this function compares two window configurations as regards the structure of windows but ignores the values of point and mark and the saved scrolling positions—it can return t even if those aspects differ
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Window-Configurations.html#index-window_002dconfiguration_002dframe'>window-configuration-frame</a>(config)</tt>	this function returns the frame for which the window configuration config was made
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Window-Configurations.html#index-window_002dstate_002dget'>window-state-get</a>(window,writable)</tt>	this function returns the state of window as a lisp object
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Window-Configurations.html#index-window_002dstate_002dput'>window-state-put</a>(state,window,ignore)</tt>	this function puts the window state state into window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Window-Dividers.html#index-window_002dright_002ddivider_002dwidth'>window-right-divider-width</a>(window)</tt>	return the width thickness in pixels of window’s right divider
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Window-Dividers.html#index-window_002dbottom_002ddivider_002dwidth'>window-bottom-divider-width</a>(window)</tt>	return the width thickness in pixels of window’s bottom divider
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Window-History.html#index-window_002dprev_002dbuffers'>window-prev-buffers</a>(window)</tt>	this function returns a list specifying the previous contents of window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Window-History.html#index-set_002dwindow_002dprev_002dbuffers'>set-window-prev-buffers</a>(window,prev-buffers)</tt>	this function sets window’s previous buffers to the value of prev-buffers
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Window-History.html#index-window_002dnext_002dbuffers'>window-next-buffers</a>(window)</tt>	this function returns the list of buffers recently re-shown in window via switch-to-prev-buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Window-History.html#index-set_002dwindow_002dnext_002dbuffers'>set-window-next-buffers</a>(window,next-buffers)</tt>	this function sets the next buffer list of window to next-buffers
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Window-History.html#index-switch_002dto_002dprev_002dbuffer'>switch-to-prev-buffer</a>(window,bury-or-kill)</tt>	this command displays the previous buffer in window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Window-History.html#index-switch_002dto_002dnext_002dbuffer'>switch-to-next-buffer</a>(window)</tt>	this command switches to the next buffer in window thus undoing the effect of the last switch-to-prev-buffer command in window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Window-History.html#index-switch_002dto_002dvisible_002dbuffer'>switch-to-visible-buffer</a>()</tt>	if this variable is non-nil switch-to-prev-buffer and switch-to-next-buffer may switch to a buffer that is already visible on the same frame provided the buffer was shown in the relevant window before
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Window-Parameters.html#index-window_002dparameter'>window-parameter</a>(window,parameter)</tt>	this function returns window’s value for parameter
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Window-Parameters.html#index-window_002dparameters'>window-parameters</a>(window)</tt>	this function returns all parameters of window and their values
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Window-Parameters.html#index-set_002dwindow_002dparameter'>set-window-parameter</a>(window,parameter,value)</tt>	this function sets window’s value of parameter to value and returns value
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Window-Point.html#index-window_002dpoint'>window-point</a>(window)</tt>	this function returns the current position of point in window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Window-Point.html#index-set_002dwindow_002dpoint'>set-window-point</a>(window,position)</tt>	this function positions point in window at position position in window’s buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Window-Sizes.html#index-window_002dtotal_002dheight'>window-total-height</a>(window,round)</tt>	this function returns the total height in lines of the window window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Window-Sizes.html#index-window_002dtotal_002dwidth'>window-total-width</a>(window,round)</tt>	this function returns the total width in columns of the window window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Window-Sizes.html#index-window_002dtotal_002dsize'>window-total-size</a>(window,horizontal,round)</tt>	this function returns either the total height in lines or the total width in columns of the window window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Window-Sizes.html#index-window_002dpixel_002dheight'>window-pixel-height</a>(window)</tt>	this function returns the total height of window window in pixels
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Window-Sizes.html#index-window_002dpixel_002dwidth'>window-pixel-width</a>(Lisp_Object,window)</tt>	this function returns the width of window window in pixels
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Window-Sizes.html#index-window_002dfull_002dheight_002dp'>window-full-height-p</a>(window)</tt>	this function returns non-nil if window has no other window above or below it in its frame i
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Window-Sizes.html#index-window_002dfull_002dwidth_002dp'>window-full-width-p</a>(window)</tt>	this function returns non-nil if window has no other window to the left or right in its frame i
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Window-Sizes.html#index-window_002dbody_002dheight'>window-body-height</a>(window,pixelwise)</tt>	this function returns the height in lines of the body of window window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Window-Sizes.html#index-window_002dbody_002dwidth'>window-body-width</a>(window,pixelwise)</tt>	this function returns the width in columns of the body of window window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Window-Sizes.html#index-window_002dbody_002dsize'>window-body-size</a>(window,horizontal,pixelwise)</tt>	this function returns the body height or body width of window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Window-Sizes.html#index-window_002dmode_002dline_002dheight'>window-mode-line-height</a>(window)</tt>	this function returns the height in pixels of window’s mode line
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Window-Sizes.html#index-window_002dheader_002dline_002dheight-1'>window-header-line-height</a>(window)</tt>	this function returns the height in pixels of window’s header line
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Window-Sizes.html#index-window_002dmin_002dheight-1'>window-min-height</a>()</tt>	this option specifies the minimum total height in lines of any window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Window-Sizes.html#index-window_002dmin_002dwidth-1'>window-min-width</a>()</tt>	this option specifies the minimum total width in columns of any window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Window-Sizes.html#index-window_002dmin_002dsize'>window-min-size</a>(window,horizontal,ignore,pixelwise)</tt>	this function returns the minimum size of window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Window-Start-and-End.html#index-window_002dstart'>window-start</a>(window)</tt>	 this function returns the display-start position of window window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Window-Start-and-End.html#index-window_002dend'>window-end</a>(window,update)</tt>	this function returns the position where display of its buffer ends in window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Window-Start-and-End.html#index-set_002dwindow_002dstart'>set-window-start</a>(window,position,noforce)</tt>	this function sets the display-start position of window to position in window’s buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Window-Start-and-End.html#index-pos_002dvisible_002din_002dwindow_002dp'>pos-visible-in-window-p</a>(position,window,partially)</tt>	this function returns non-nil if position is within the range of text currently visible on the screen in window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Window-Start-and-End.html#index-window_002dline_002dheight'>window-line-height</a>(line,window)</tt>	this function returns the height of text line line in window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Window-System-Selections.html#index-x_002dset_002dselection'>x-set-selection</a>(type,data)</tt>	this function sets an x selection
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Window-System-Selections.html#index-x_002dget_002dselection'>x-get-selection</a>(type,data-type)</tt>	this function accesses selections set up by emacs or by other x clients
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Window-System-Selections.html#index-selection_002dcoding_002dsystem'>selection-coding-system</a>()</tt>	this variable specifies the coding system to use when reading and writing selections or the clipboard
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Window-Systems.html#index-window_002dsystem'>window-system</a>(frame)</tt>	this function returns a symbol whose name tells what window system is used for displaying frame which defaults to the currently selected frame 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Windows-and-Frames.html#index-window_002dframe'>window-frame</a>(window)</tt>	this function returns the frame that the window window belongs to
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Windows-and-Frames.html#index-window_002dlist'>window-list</a>(frame,minibuffer,window)</tt>	this function returns a list of live windows belonging to the frame frame
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Windows-and-Frames.html#index-frame_002droot_002dwindow'>frame-root-window</a>(frame-or-window)</tt>	this function returns the root window for frame-or-window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Windows-and-Frames.html#index-window_002dparent'>window-parent</a>(window)</tt>	this function returns the parent window of window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Windows-and-Frames.html#index-window_002dtop_002dchild'>window-top-child</a>(window)</tt>	this function returns the topmost child window of window if window is an internal window whose children form a vertical combination
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Windows-and-Frames.html#index-window_002dleft_002dchild'>window-left-child</a>(window)</tt>	this function returns the leftmost child window of window if window is an internal window whose children form a horizontal combination
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Windows-and-Frames.html#index-window_002dchild'>window-child</a>(window)</tt>	this function returns the first child window of the internal window window—the topmost child window for a vertical combination or the leftmost child window for a horizontal combination
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Windows-and-Frames.html#index-window_002dcombined_002dp'>window-combined-p</a>(window,horizontal)</tt>	this function returns a non-nil value if and only if window is part of a vertical combination
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Windows-and-Frames.html#index-window_002dnext_002dsibling'>window-next-sibling</a>(window)</tt>	this function returns the next sibling of the window window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Windows-and-Frames.html#index-window_002dprev_002dsibling'>window-prev-sibling</a>(window)</tt>	this function returns the previous sibling of the window window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Windows-and-Frames.html#index-frame_002dfirst_002dwindow'>frame-first-window</a>(frame-or-window)</tt>	this function returns the live window at the upper left corner of the frame specified by frame-or-window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Windows-and-Frames.html#index-window_002din_002ddirection'>window-in-direction</a>(direction,window,ignore,sign,wrap,mini)</tt>	this function returns the nearest live window in direction direction as seen from the position of window-point in window window
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Windows-and-Frames.html#index-window_002dtree'>window-tree</a>(frame)</tt>	this function returns a list representing the window tree for frame frame
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Word-Motion.html#index-forward_002dword'>forward-word</a>(count)</tt>	this function moves point forward count words or backward if count is negative 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Word-Motion.html#index-backward_002dword'>backward-word</a>(count)</tt>	this function is just like forward-word except that it moves backward until encountering the front of a word rather than forward
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Word-Motion.html#index-words_002dinclude_002descapes'>words-include-escapes</a>()</tt>	this variable affects the behavior of forward-word and everything that uses it
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Writing-to-Files.html#index-append_002dto_002dfile'>append-to-file</a>(start,end,filename)</tt>	this function appends the contents of the region delimited by start and end in the current buffer to the end of file filename
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Writing-to-Files.html#index-write_002dregion'>write-region</a>(start,end,filename,append,visit,lockname,mustbenew)</tt>	this function writes the region delimited by start and end in the current buffer into the file specified by filename
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Yank-Commands.html#index-yank'>yank</a>(arg)</tt>	 this command inserts before point the text at the front of the kill ring
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Yank-Commands.html#index-yank_002dpop'>yank-pop</a>(arg)</tt>	this command replaces the just-yanked entry from the kill ring with a different entry from the kill ring
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Yanking.html#index-insert_002dfor_002dyank'>insert-for-yank</a>(string)</tt>	this function works like insert except that it processes the text in string according to the yank-handler text property as well as the variables yank-handled-properties and yank-excluded-properties see below before inserting the result into the current buffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Yanking.html#index-insert_002dbuffer_002dsubstring_002das_002dyank'>insert-buffer-substring-as-yank</a>(buf,start,end)</tt>	this function resembles insert-buffer-substring except that it processes the text according to yank-handled-properties and yank-excluded-properties
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Yanking.html#index-yank_002dhandled_002dproperties'>yank-handled-properties</a>()</tt>	this variable specifies special text property handling conditions for yanked text
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Yanking.html#index-yank_002dexcluded_002dproperties'>yank-excluded-properties</a>()</tt>	the value of this variable is the list of properties to remove from inserted text
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Yes_002dor_002dNo-Queries.html#index-y_002dor_002dn_002dp'>y-or-n-p</a>(prompt)</tt>	this function asks the user a question expecting input in the echo area
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Yes_002dor_002dNo-Queries.html#index-y_002dor_002dn_002dp_002dwith_002dtimeout'>y-or-n-p-with-timeout</a>(prompt,seconds,default)</tt>	like y-or-n-p except that if the user fails to answer within seconds seconds this function stops waiting and returns default
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/elisp/Yes_002dor_002dNo-Queries.html#index-yes_002dor_002dno_002dp'>yes-or-no-p</a>(prompt)</tt>	this function asks the user a question expecting input in the minibuffer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-trim</a>(s)</tt>	remove whitespace at the beginning and end of s
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-trim-left</a>(s)</tt>	remove whitespace at the beginning of s
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-trim-right</a>(s)</tt>	remove whitespace at the end of s
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-chomp</a>(s)</tt>	remove one trailing \n \r or \r\n from s
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-collapse-whitespace</a>(s)</tt>	convert all adjacent whitespace characters to a single space
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-word-wrap</a>(len,s)</tt>	if s is longer than len wrap the words with newlines
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-center</a>(len,s)</tt>	if s is shorter than len pad it with spaces so it is centered
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-pad-left</a>(len,padding,s)</tt>	if s is shorter than len pad it with padding on the left
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-pad-right</a>(len,padding,s)</tt>	if s is shorter than len pad it with padding on the right
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-truncate</a>(len,s)</tt>	if s is longer than len cut it down to len - 3 and add at the end
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-left</a>(len,s)</tt>	returns up to the len first chars of s
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-right</a>(len,s)</tt>	returns up to the len last chars of s
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-chop-suffix</a>(suffix,s)</tt>	remove suffix if it is at end of s
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-chop-suffixes</a>(suffixes,s)</tt>	remove suffixes one by one in order if they are at the end of s
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-chop-prefix</a>(prefix,s)</tt>	remove prefix if it is at the start of s
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-chop-prefixes</a>(prefixes,s)</tt>	remove prefixes one by one in order if they are at the start of s
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-shared-start</a>(s1,s2)</tt>	returns the longest prefix s1 and s2 have in common
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-shared-end</a>(s1,s2)</tt>	returns the longest suffix s1 and s2 have in common
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-repeat</a>(num,s)</tt>	make a string of s repeated num times
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-concat</a>(&rest,strings)</tt>	join all the string arguments into one string
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-prepend</a>(prefix,s)</tt>	concatenate prefix and s
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-append</a>(suffix,s)</tt>	concatenate s and suffix
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-lines</a>(s)</tt>	splits s into a list of strings on newline characters
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-match</a>(regexp,s,&optional,start)</tt>	when the given expression matches the string this function returns a list
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-match-strings-all</a>(regex,string)</tt>	return a list of matches for regex in string
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-matched-positions-all</a>(regexp,string,&optional,subexp-depth)</tt>	return a list of matched positions for regexp in string
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-slice-at</a>(regexp,s)</tt>	slices s up at every index matching regexp
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-split</a>(separator,s,&optional,omit-nulls)</tt>	split s into substrings bounded by matches for regexp separator
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-split-up-to</a>(separator,s,n,&optional,omit-nulls)</tt>	split s up to n times into substrings bounded by matches for regexp separator
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-join</a>(separator,strings)</tt>	join all the strings in strings with separator in between
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-equals?</a>(s1,s2)</tt>	is s1 equal to s2
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-less?</a>(s1,s2)</tt>	is s1 less than s2
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-matches?</a>(regexp,s,&optional,start)</tt>	does regexp match s
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-blank?</a>(s)</tt>	is s nil or the empty string
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-present?</a>(s)</tt>	is s anything but nil or the empty string
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-ends-with?</a>(suffix,s,&optional,ignore-case)</tt>	does s end with suffix
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-starts-with?</a>(prefix,s,&optional,ignore-case)</tt>	does s start with prefix
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-contains?</a>(needle,s,&optional,ignore-case)</tt>	does s contain needle
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-lowercase?</a>(s)</tt>	are all the letters in s in lower case
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-uppercase?</a>(s)</tt>	are all the letters in s in upper case
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-mixedcase?</a>(s)</tt>	are there both lower case and upper case letters in s
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-capitalized?</a>(s)</tt>	in s is the first letter upper case and all other letters lower case
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-numeric?</a>(s)</tt>	is s a number
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-replace</a>(old,new,s)</tt>	replaces old with new in s
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-replace-all</a>(replacements,s)</tt>	replacements is a list of cons-cells each car is replaced with cdr in s
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-downcase</a>(s)</tt>	convert s to lower case
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-upcase</a>(s)</tt>	convert s to upper case
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-capitalize</a>(s)</tt>	convert the first word's first character to upper case and the rest to lower case in s
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-titleize</a>(s)</tt>	convert each word's first character to upper case and the rest to lower case in s
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-with</a>(s,form,&rest,more)</tt>	threads s through the forms inserts s as the last item
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-index-of</a>(needle,s,&optional,ignore-case)</tt>	returns first index of needle in s or nil
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-reverse</a>(s)</tt>	return the reverse of s
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-presence</a>(s)</tt>	return s if it's s-present otherwise return nil
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-format</a>(template,replacer,&optional,extra)</tt>	format template with the function replacer
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-lex-format</a>(format-str)</tt>	s-format with the current environment
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-count-matches</a>(regexp,s,&optional,start,end)</tt>	count occurrences of regexp in s'
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-wrap</a>(s,prefix,&optional,suffix)</tt>	wrap string s with prefix and optionally suffix
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-split-words</a>(s)</tt>	split s into list of words
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-lower-camel-case</a>(s)</tt>	convert s to lowercamelcase
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-upper-camel-case</a>(s)</tt>	convert s to uppercamelcase
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-snake-case</a>(s)</tt>	convert s to snake_case
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-dashed-words</a>(s)</tt>	convert s to dashed-words
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-capitalized-words</a>(s)</tt>	convert s to capitalized words
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-titleized-words</a>(s)</tt>	convert s to titleized words
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/s.el'>s-word-initials</a>(s)</tt>	convert s to its initials
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-map</a>(fn,list)</tt>	return a new list consisting of the result of applying fn to the items in list
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-map-when</a>(pred,rep,list)</tt>	return a new list where the elements in list that do not match the pred function
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-map-first</a>(pred,rep,list)</tt>	replace first item in list satisfying pred with result of rep called on this item
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-map-last</a>(pred,rep,list)</tt>	replace first item in list satisfying pred with result of rep called on this item
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-map-indexed</a>(fn,list)</tt>	return a new list consisting of the result of fn index item for each item in list
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-annotate</a>(fn,list)</tt>	return a list of cons cells where each cell is fn applied to each
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-splice</a>(pred,fun,list)</tt>	splice lists generated by fun in place of elements matching pred in list
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-splice-list</a>(pred,new-list,list)</tt>	splice new-list in place of elements matching pred in list
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-mapcat</a>(fn,list)</tt>	return the concatenation of the result of mapping fn over list
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-copy</a>(arg)</tt>	create a shallow copy of list
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-filter</a>(pred,list)</tt>	return a new list of the items in list for which pred returns a non-nil value
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-remove</a>(pred,list)</tt>	return a new list of the items in list for which pred returns nil
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-remove-first</a>(pred,list)</tt>	return a new list with the first item matching pred removed
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-remove-last</a>(pred,list)</tt>	return a new list with the last item matching pred removed
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-remove-item</a>(item,list)</tt>	remove all occurences of item from list
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-non-nil</a>(list)</tt>	return all non-nil elements of list
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-slice</a>(list,from,&optional,to,step)</tt>	return copy of list starting from index from to index to
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-take</a>(n,list)</tt>	return a new list of the first n items in list or all items if there are fewer than n
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-take-last</a>(n,list)</tt>	return the last n items of list in order
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-drop</a>(n,list)</tt>	return the tail of list without the first n items
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-drop-last</a>(n,list)</tt>	remove the last n items of list and return a copy
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-take-while</a>(pred,list)</tt>	return a new list of successive items from list while pred item returns a non-nil value
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-drop-while</a>(pred,list)</tt>	return the tail of list starting from the first item for which pred item returns nil
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-select-by-indices</a>(indices,list)</tt>	return a list whose elements are elements from list selected
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-select-columns</a>(columns,table)</tt>	select columns from table
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-select-column</a>(column,table)</tt>	select column from table
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-keep</a>(fn,list)</tt>	return a new list of the non-nil results of applying fn to the items in list
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-concat</a>(&rest,lists)</tt>	return a new list with the concatenation of the elements in the supplied lists
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-flatten</a>(l)</tt>	take a nested list l and return its contents as a single flat list
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-flatten-n</a>(num,list)</tt>	flatten num levels of a nested list
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-replace</a>(old,new,list)</tt>	replace all old items in list with new
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-replace-first</a>(old,new,list)</tt>	replace the first occurence of old with new in list
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-replace-last</a>(old,new,list)</tt>	replace the last occurence of old with new in list
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-insert-at</a>(n,x,list)</tt>	return a list with x inserted into list at position n
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-replace-at</a>(n,x,list)</tt>	return a list with element at nth position in list replaced with x
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-update-at</a>(n,func,list)</tt>	return a list with element at nth position in list replaced with (func nth n list 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-remove-at</a>(n,list)</tt>	return a list with element at nth position in list removed
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-remove-at-indices</a>(indices,list)</tt>	return a list whose elements are elements from list without
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-reduce-from</a>(fn,initial-value,list)</tt>	return the result of applying fn to initial-value and the
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-reduce-r-from</a>(fn,initial-value,list)</tt>	replace conses with fn nil with initial-value and evaluate
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-reduce</a>(fn,list)</tt>	return the result of applying fn to the first 2 items in list 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-reduce-r</a>(fn,list)</tt>	replace conses with fn and evaluate the resulting expression
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-count</a>(pred,list)</tt>	counts the number of items in list where pred item is non-nil
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-sum</a>(list)</tt>	return the sum of list
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-product</a>(list)</tt>	return the product of list
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-min</a>(list)</tt>	return the smallest value from list of numbers or markers
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-min-by</a>(comparator,list)</tt>	take a comparison function comparator and a list and return
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-max</a>(list)</tt>	return the largest value from list of numbers or markers
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-max-by</a>(comparator,list)</tt>	take a comparison function comparator and a list and return
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-iterate</a>(fun,init,n)</tt>	return a list of iterated applications of fun to init
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-unfold</a>(fun,seed)</tt>	build a list from seed using fun
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-any?</a>(pred,list)</tt>	return t if pred x is non-nil for any x in list else nil
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-all?</a>(pred,list)</tt>	return t if pred x is non-nil for all x in list else nil
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-none?</a>(pred,list)</tt>	return t if pred x is nil for all x in list else nil
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-only-some?</a>(pred,list)</tt>	return t if at least one item of list matches pred and at least one item of list does not match pred
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-contains?</a>(list,element)</tt>	return non-nil if list contains element
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-same-items?</a>(list,list2)</tt>	return true if list and list2 has the same items
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-is-prefix?</a>(prefix,list)</tt>	return non-nil if prefix is prefix of list
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-is-suffix?</a>(suffix,list)</tt>	return non-nil if suffix is suffix of list
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-is-infix?</a>(infix,list)</tt>	return non-nil if infix is infix of list
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-split-at</a>(n,list)</tt>	return a list of -take n list -drop n list ), in no more than one pass through the list
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-split-with</a>(pred,list)</tt>	return a list of -take-while pred list -drop-while pred list ), in no more than one pass through the list
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-split-on</a>(item,list)</tt>	split the list each time item is found
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-split-when</a>(fn,list)</tt>	split the list on each element where fn returns non-nil
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-separate</a>(pred,list)</tt>	return a list of -filter pred list -remove pred list ), in one pass through the list
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-partition</a>(n,list)</tt>	return a new list with the items in list grouped into n-sized sublists
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-partition-all</a>(n,list)</tt>	return a new list with the items in list grouped into n-sized sublists
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-partition-in-steps</a>(n,step,list)</tt>	return a new list with the items in list grouped into n-sized sublists at offsets step apart
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-partition-all-in-steps</a>(n,step,list)</tt>	return a new list with the items in list grouped into n-sized sublists at offsets step apart
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-partition-by</a>(fn,list)</tt>	apply fn to each item in list splitting it each time fn returns a new value
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-partition-by-header</a>(fn,list)</tt>	apply fn to the first item in list that is the header
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-group-by</a>(fn,list)</tt>	separate list into an alist whose keys are fn applied to the
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-elem-index</a>(elem,list)</tt>	return the index of the first element in the given list which
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-elem-indices</a>(elem,list)</tt>	return the indices of all elements in list equal to the query
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-find-index</a>(pred,list)</tt>	take a predicate pred and a list and return the index of the
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-find-last-index</a>(pred,list)</tt>	take a predicate pred and a list and return the index of the
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-find-indices</a>(pred,list)</tt>	return the indices of all elements in list satisfying the
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-grade-up</a>(comparator,list)</tt>	grade elements of list using comparator relation yielding a
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-grade-down</a>(comparator,list)</tt>	grade elements of list using comparator relation yielding a
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-union</a>(list,list2)</tt>	return a new list containing the elements of list and elements of list2 that are not in list
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-difference</a>(list,list2)</tt>	return a new list with only the members of list that are not in list2
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-intersection</a>(list,list2)</tt>	return a new list containing only the elements that are members of both list and list2
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-distinct</a>(list)</tt>	return a new list with all duplicates removed
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-rotate</a>(n,list)</tt>	rotate list n places to the right with n negative rotate to the left
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-repeat</a>(n,x)</tt>	return a list with x repeated n times
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-cons*</a>(&rest,args)</tt>	make a new list from the elements of args
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-snoc</a>(list,elem,&rest,elements)</tt>	append elem to the end of the list
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-interpose</a>(sep,list)</tt>	return a new list of all elements in list separated by sep
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-interleave</a>(&rest,lists)</tt>	return a new list of the first item in each list then the second etc
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-zip-with</a>(fn,list1,list2)</tt>	zip the two lists list1 and list2 using a function fn this
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-zip</a>(&rest,lists)</tt>	zip lists together group the head of each list followed by the
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-zip-fill</a>(fill-value,&rest,lists)</tt>	zip lists with fill-value padded onto the shorter lists the
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-unzip</a>(lists)</tt>	unzip lists
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-cycle</a>(list)</tt>	return an infinite copy of list that will cycle through the
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-pad</a>(fill-value,&rest,lists)</tt>	appends fill-value to the end of each list in lists such that they
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-table</a>(fn,&rest,lists)</tt>	compute outer product of lists using function fn
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-table-flat</a>(fn,&rest,lists)</tt>	compute flat outer product of lists using function fn
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-first</a>(pred,list)</tt>	return the first x in list where pred x is non-nil else nil
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-some</a>(pred,list)</tt>	return pred x for the first list item where pred x is non-nil else nil
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-last</a>(pred,list)</tt>	return the last x in list where pred x is non-nil else nil
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-first-item</a>(list)</tt>	return the first item of list or nil on an empty list
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-last-item</a>(list)</tt>	return the last item of list or nil on an empty list
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-butlast</a>(list)</tt>	return a list of all items in list except for the last
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-sort</a>(comparator,list)</tt>	sort list stably comparing elements using comparator
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-list</a>(&rest,args)</tt>	return a list with args
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-fix</a>(fn,list)</tt>	compute the least fixpoint of fn with initial input list
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-tree-seq</a>(branch,children,tree)</tt>	return a sequence of the nodes in tree in depth-first search order
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-tree-map</a>(fn,tree)</tt>	apply fn to each element of tree while preserving the tree structure
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-tree-map-nodes</a>(pred,fun,tree)</tt>	call fun on each node of tree that satisfies pred
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-tree-reduce</a>(fn,tree)</tt>	use fn to reduce elements of list tree
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-tree-reduce-from</a>(fn,init-value,tree)</tt>	use fn to reduce elements of list tree
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-tree-mapreduce</a>(fn,folder,tree)</tt>	apply fn to each element of tree and make a list of the results
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-tree-mapreduce-from</a>(fn,folder,init-value,tree)</tt>	apply fn to each element of tree and make a list of the results
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-clone</a>(list)</tt>	create a deep copy of list
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-></a>(x,&optional,form,&rest,more)</tt>	thread the expr through the forms insert x as the second item
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>->></a>(x,&optional,form,&rest,more)</tt>	thread the expr through the forms insert x as the last item
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>--></a>(x,form,&rest,more)</tt>	thread the expr through the forms insert x at the position
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-some--></a>(x,&optional,form,&rest,more)</tt>	when expr in non-nil thread it through the first form (via [-->](#---x-form-rest-more)),
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-some->></a>(x,&optional,form,&rest,more)</tt>	when expr is non-nil thread it through the first form (via [->>](#--x-optional-form-rest-more)),
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-when-let</a>(var-val,&rest,body)</tt>	if val evaluates to non-nil bind it to var and execute body
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-when-let*</a>(vars-vals,&rest,body)</tt>	if all vals evaluate to true bind them to their corresponding
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-if-let</a>(var-val,then,&rest,else)</tt>	if val evaluates to non-nil bind it to var and do then 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-if-let*</a>(vars-vals,then,&rest,else)</tt>	if all vals evaluate to true bind them to their corresponding
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-let</a>(varlist,&rest,body)</tt>	bind variables according to varlist then eval body
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-let*</a>(varlist,&rest,body)</tt>	bind variables according to varlist then eval body
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-lambda</a>(match-form,&rest,body)</tt>	return a lambda which destructures its input as match-form and executes body
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-each</a>(list,fn)</tt>	call fn with every item in list return nil used for side-effects only
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-each-while</a>(list,pred,fn)</tt>	call fn with every item in list while pred item is non-nil
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-each-indexed</a>(list,fn)</tt>	call fn index item for each item in list
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-dotimes</a>(num,fn)</tt>	repeatedly calls fn presumably for side-effects passing in integers from 0 through num-1
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-doto</a>(eval-initial-value,&rest,forms)</tt>	eval a form then insert that form as the 2nd argument to other forms
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>!cons</a>(car,cdr)</tt>	destructive set cdr to the cons of car and cdr
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>!cdr</a>(list)</tt>	destructive set list to the cdr of list
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-partial</a>(fn,&rest,args)</tt>	takes a function fn and fewer than the normal arguments to fn 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-rpartial</a>(fn,&rest,args)</tt>	takes a function fn and fewer than the normal arguments to fn 
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-juxt</a>(&rest,fns)</tt>	takes a list of functions and returns a fn that is the
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-compose</a>(&rest,fns)</tt>	takes a list of functions and returns a fn that is the
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-applify</a>(fn)</tt>	changes an n-arity function fn to a 1-arity function that
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-on</a>(operator,transformer)</tt>	return a function of two arguments that first applies
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-flip</a>(func)</tt>	swap the order of arguments for binary function func
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-const</a>(c)</tt>	return a function that returns c ignoring any additional arguments
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-cut</a>(&rest,params)</tt>	take n-ary function and n arguments and specialize some of them
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-not</a>(pred)</tt>	take a unary predicate pred and return a unary predicate
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-orfn</a>(&rest,preds)</tt>	take list of unary predicates preds and return a unary
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-andfn</a>(&rest,preds)</tt>	take list of unary predicates preds and return a unary
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-iteratefn</a>(fn,n)</tt>	return a function fn composed n times with itself
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-fixfn</a>(fn,&optional,equal-test,halt-test)</tt>	return a function that computes the least fixpoint of fn
<tt style='background-color:#E8E8E8;'><a href='https://www.gnu.org/software/emacs/manual/html_node/https://github.com/magnars/dash.el/blob/master/README.md'>-prodfn</a>(&rest,fns)</tt>	take a list of n functions and return a function that takes a
