class	return a dict of ||| magics manager	count=1
class	deprecated write [class] string ||| [class]	count=1
function	factory that ||| seq pprinter factory	count=1
function_arg	[function_1] cmd in ||| [arg_2] [function_1]	count=1
function	app ||| app	count=1
function	[function_1] nodes the ||| [function_2] [function_1]	count=3
function_arg	[function_1] in object ||| [function_1] property [arg_2]	count=1
function	[function_1] loop running ||| [function_1] [function_2]	count=2
class	this [class_2] ||| [class_2] [class_1]	count=1
arg	and ?) ||| pattern raw search_raw output	count=1
arg	warning_class ||| warning_class	count=1
class	history from ||| history manager	count=1
function	[function_1] user ||| [function_2] [function_1]	count=1
function	readline is history previous ||| history	count=1
function	the banner ||| banner	count=1
class	of the parameter ||| parameter	count=1
function	a comment [function_2] ||| [function_2] [function_1]	count=3
class	oldest ||| display hook	count=1
function	to their minimum defaults ||| user ns	count=1
function	ctrl+c ||| ctrl c	count=1
class	display ||| terminal	count=1
function	has ||| has	count=1
class	input ||| ipython input	count=1
class	the ||| ipython app	count=2
module	a class ignore its ||| utils	count=1
function	reload all modules ||| reload	count=1
class	display [class_2] ||| [class_1] [class_2]	count=2
function	a format ||| format	count=1
function	method called before executing ||| pre cmd	count=1
function	returns [function] locals of ||| [function]	count=1
class	this object's information ||| arg	count=1
module	status message about the ||| core	count=1
function_arg	[function_1] profile ||| [function_1] file name [arg_2]	count=1
class	is ||| shim module	count=1
module	and return the ||| core	count=1
function	for ipy or ||| ipy	count=1
function	the image file ||| image	count=1
function_arg	module [arg_2] ||| [arg_2] [function_1]	count=2
function	/psearch call from a ||| make help call	count=1
function	shell aliases ||| aliases	count=1
function	effective number of cpus ||| cpus	count=1
class	some ||| terminal interactive	count=1
module	seek pointer back ||| lib	count=1
module	the [module_2] ||| [module_1] [module_2]	count=20
function	default arguments ||| default arguments	count=2
module	for [module] line_info ||| [module]	count=1
function	[function_1] a figure ||| [function_1] [function_2] fig fmt bbox_inches	count=1
function	[function_1] multiple paragraphs ||| [function_1] [function_2]	count=1
function	fully stop ||| logstop	count=1
module	the namespace dictionaries ||| core	count=1
function	[function_1] config file ||| [function_1] [function_2]	count=1
function	handle input ||| handle	count=1
module	of commit hash given ||| utils	count=1
module_class	the user's namespace ||| core interactive shell	count=1
function	[function_1] hash from ||| [function_2] [function_1]	count=4
arg	associated with [arg_2] ||| [arg_2] [arg_1]	count=2
function	of all the modules ||| modules	count=1
function	find [function_2] ||| [function_1] [function_2]	count=1
module	the user if called ||| core	count=1
function	comment [function_2] ||| [function_2] [function_1]	count=3
function	current ||| current	count=1
arg	[arg_1] output ||| [arg_1] input_lines [arg_2]	count=2
function_arg	data [arg_2] ||| [function_1] obj [arg_2]	count=3
class	history to ||| history	count=1
arg	print your currently ||| parameter_s	count=1
function	currently active [function] scheme ||| [function]	count=1
class	dict ||| manager	count=1
function	one block and re-execute ||| again	count=1
class	new history manager ||| history manager	count=1
class	have ||| terminal interactive shell	count=2
function	for ipy or ipynb ||| execfile ipy	count=1
arg	[arg_1] callable ||| [arg_2] [arg_1]	count=3
function	remove leading indentation ||| leading indent	count=2
function	token [function_2] ||| [function_1] [function_2]	count=6
function	shortcuts for ipython ||| ipython shortcuts	count=1
module_class	the given ||| core event manager	count=1
function	a directory to which ||| dir	count=1
function	running the script in ||| run script	count=1
function_arg	[function_1] code will ||| [function_1] [arg_2]	count=1
arg	deprecated equivalent to warn(msg ||| msg exit_val	count=1
function	configuration ||| update	count=1
arg	run a cell ||| cell	count=1
function_arg	[function_1] target name ||| [function_1] [arg_2]	count=2
function	and return a cell ||| cell	count=1
function_arg	[function_1] with ||| [arg_2] [function_1]	count=3
arg	to columnize ||| row_first	count=1
module_class	for [module_1] [class_2] ||| [module_1] [class_2]	count=2
function	can accept ||| push accepts	count=1
module_class	show the [class_2] ||| [module_1] [class_2]	count=2
class	for a re computation ||| shell	count=1
module	the main thread to ||| core	count=1
module	the user ||| core	count=2
function	subprocess using os system ||| system	count=1
function	lines ||| lines	count=3
function	ast ||| transform ast	count=1
module	in [module] compilation process ||| [module]	count=1
class	have changed ||| terminal interactive	count=1
function	filter for deprecation warning ||| deprecation warnings	count=1
arg	line [arg_2] ||| [arg_1] [arg_2]	count=1
function	get a handler ||| get handler	count=4
module	return the next possible ||| core	count=1
arg	[arg_1] subname fullname ||| [arg_2] [arg_1]	count=1
function	a format [function_2] ||| [function_1] [function_2]	count=1
class	execute ||| interactive shell	count=2
module_class	the database ||| core history accessor	count=2
function	match latex characters back ||| back latex	count=1
class	display ||| ipython app	count=2
function	edit ||| edit	count=2
arg	callback from ||| function	count=1
arg	a handler instance by ||| handler	count=2
arg	ipython shell ||| shell	count=1
function	last ||| last	count=1
module	of the content ||| core	count=1
function	full copy ||| copy	count=1
function	two [function_2] ||| [function_1] [function_2]	count=1
class	create ||| prefilter manager	count=2
class	that is left ||| pretty printer	count=1
class	object's [class_2] ||| [class_2] [class_1]	count=2
function	set ||| precision	count=1
class	object to be displayed ||| display	count=1
function_arg	arguments [arg_2] ||| [function_1] [arg_2]	count=3
function	publish ||| publish display	count=1
function	[function_1] [function_2] ||| [function_1] latex name [function_2]	count=4
function	check that a ||| check	count=1
function	pretty printer for a ||| for	count=1
module	the object ||| core	count=1
function	for a ||| update	count=1
function	internal ||| reset	count=1
module	the value ||| core	count=1
function	[function_1] unicode ||| [function_1] name [function_2]	count=2
arg	convert [arg] an ||| [arg]	count=1
class	optionally display ||| app	count=1
arg	from an oinfo dict ||| oinfo format_call	count=1
function	but for ipy or ||| execfile ipy	count=1
arg	without importing ||| api	count=2
function	load ||| load	count=3
module_class	all the [class_2] ||| [module_1] [class_2]	count=2
class	computation of the ||| shell	count=1
function_arg	[function_1] an object ||| [function_1] [arg_2]	count=2
arg	given size ||| size	count=1
function	have ||| update	count=1
module	the default figure size ||| core	count=1
function	[function_1] lines ||| [function_1] [function_2]	count=2
arg	find/create a ||| cls profile_dir	count=1
function_arg	parent [arg_2] ||| [arg_2] [function_1]	count=5
arg	block ||| output_prompt	count=1
function	qt ||| qt	count=1
function_arg	[function_1] and upgrade ||| [arg_2] [function_1]	count=4
class	ipython extension ||| extension	count=2
arg	fit ||| text ncols	count=1
arg	mod subname [arg_2] ||| [arg_2] [arg_1]	count=1
function	commit hash ||| commit hash	count=2
class	changed ||| interactive	count=1
arg	for a single line ||| line	count=1
class	some configuration options have ||| interactive shell	count=1
function	database output ||| store output	count=1
function	is history ||| history	count=1
function	find what to ||| find	count=1
module	for [module] command line ||| [module]	count=1
module_class	[module_1] database using ||| [module_1] [class_2]	count=2
class	move the seek ||| demo	count=1
function	ensures that ||| ensure	count=1
arg	as a block of ||| line	count=1
function	the status [function_2] ||| [function_1] [function_2]	count=1
class	active profile ||| profile	count=1
class	ask for ||| terminal interactive	count=1
class	a ||| interactive	count=1
class	existing ||| basic	count=1
class	re computation ||| terminal interactive shell	count=1
function	report summary for a ||| group report	count=1
function	register a ||| register handler	count=1
function	check ||| check	count=3
arg	remove matching input ||| prompt_re initial_re turnoff_re	count=1
module	on screen block by ||| lib	count=1
arg	at most one ||| rgxin rgxout fmtin	count=1
function	next ||| next	count=1
arg	check if ||| check	count=1
module	the new one ||| core	count=1
function	__stderr__, ||| err	count=1
class	pointer back one ||| demo	count=1
arg	a line of ||| line	count=2
function	that make ||| make	count=1
arg	and format ||| formatter	count=1
function	python source code to ||| source to	count=1
class	ranges of input history ||| history	count=1
class	have changed ||| shell	count=1
class	a variable from ||| interactive shell	count=1
arg	cell as a block ||| line cell	count=1
function	their minimum defaults ||| user ns	count=1
function	from [function_2] ||| [function_2] [function_1]	count=3
function	up all displayhook activities ||| displayhook	count=1
class	some configuration options have ||| terminal	count=1
function_arg	code of [arg_2] ||| [function_1] [arg_2]	count=3
class	for example ||| interactive shell	count=1
function	return ||| get pager	count=1
function	return a cell ||| cell	count=1
function	of ast [function_2] ||| [function_1] [function_2]	count=2
class	color ||| color	count=1
class	is ||| module	count=1
function	extension [function_2] ||| [function_2] [function_1]	count=8
module	of the main ||| core	count=1
function	[function_1] module ||| [function_2] [function_1]	count=4
class	write [class] string to ||| [class]	count=1
class	job ||| background job manager	count=2
module	if [module] transformer ||| [module]	count=1
module	pager the ||| core	count=1
class	database ||| history accessor	count=4
function	latex-like syntax for unicode ||| unicode	count=1
class	transformed [class_2] ||| [class_2] [class_1]	count=1
class	some configuration options have ||| terminal interactive shell	count=1
function	find absolute path to ||| find	count=1
function	ranges ||| ranges	count=1
arg	data block ||| data input_prompt	count=1
function	get the [function_2] ||| [function_2] [function_1]	count=10
function	render latex [function_2] ||| [function_1] [function_2]	count=2
function	update [function_2] ||| [function_2] [function_1]	count=3
function	style [function_1] [function_2] ||| [function_1] [function_2]	count=9
class	execution of a ||| execution	count=1
arg	[arg_1] (i ||| [arg_2] [arg_1]	count=1
function	a gui string return ||| find	count=1
arg	block ||| input_prompt lineno	count=1
function	get the clipboard's text ||| clipboard get	count=2
function	filter ||| filter	count=1
class	=> import modules ||| autoreload	count=1
function	print function ||| pprint	count=1
function	from a [function_2] ||| style [function_1] [function_2]	count=3
module	a dict ||| core	count=1
function	the last session ||| last session	count=2
class	tb [class_2] ||| [class_2] [class_1]	count=2
class	from ||| interactive	count=2
function	user [function_2] ||| [function_1] [function_2]	count=1
function	property ||| property	count=1
function	status of ||| status	count=1
class	is always ||| shim	count=1
arg	and output ||| output	count=1
arg	[arg_1] with esc_strings ||| [arg_1] [arg_2]	count=4
function	class with ||| with	count=1
arg	items ||| items	count=1
function	[function_1] [function_2] to ||| [function_1] [function_2]	count=8
function_arg	[function_1] [arg_2] ||| [function_1] data metadata [arg_2]	count=1
module	and ||| utils	count=1
arg	for code for caching ||| code	count=1
function	get lines ||| get range	count=1
module	print ||| magics	count=1
arg	turn a string ||| ranges_str	count=1
function	[function_1] the status ||| [function_1] [function_2]	count=1
function	module and ||| module	count=2
arg	pager piping through ||| data start screen_lines pager_cmd	count=1
module	if any of the ||| core	count=1
module	list ||| core	count=1
module_class	[module_1] user's ||| [module_1] [class_2]	count=4
function	[function_1] status ||| [function_1] [function_2]	count=1
function	[function_1] print function ||| [function_1] [function_2]	count=1
function	last session id currently ||| last session id	count=1
function	ipy ||| execfile ipy	count=1
module	cursor at the ||| core	count=1
function_arg	[function_1] cocoa ||| [arg_2] [function_1]	count=1
function	because of ';'? ||| quiet	count=1
function	figure to ||| figure	count=1
arg	dict for an object ||| obj include exclude	count=1
class	re ||| terminal interactive shell	count=2
module	of the ||| core	count=15
class	changed ||| terminal	count=1
function	given ||| type	count=1
class	database using unix ||| history accessor	count=1
function	of default arguments of ||| default arguments	count=1
function	format a ||| format	count=2
function	wrap [function_2] ||| [function_2] [function_1]	count=2
module	for ||| magics	count=2
function	class ||| class	count=1
module	back ||| lib	count=1
function	the pprint [function_2] ||| [function_2] [function_1]	count=2
function	save a set ||| save	count=1
function	force exit with ||| force exit	count=1
function	check to ||| check	count=1
function	find a ||| find	count=1
arg	import the mirrored ||| fullname	count=1
module_class	the database using ||| core history accessor	count=1
function	ends ||| ends	count=1
module	the raw ||| core	count=2
function	alias ||| alias	count=1
module	to [module] ||| [module]	count=10
function	base class with ||| with	count=1
function	current layout option for ||| layout options	count=1
class	lines marked by python-mode ||| emacs handler	count=1
class	ipython ||| ipython	count=1
class	start logging ||| logging	count=1
function_arg	[function_1] to fit ||| [arg_2] [function_1]	count=3
function	check that a return ||| check	count=1
module	for a ||| terminal	count=1
function	current error state and ||| err state	count=1
module	for %%load into 2-tuples ||| magics	count=1
function	[function_1] data dict ||| [function_1] [function_2]	count=3
function	call from a ||| make help call	count=1
function_arg	[function_1] name ||| [arg_2] [function_1]	count=2
module	a ||| terminal	count=1
arg	an oinfo dict ||| oinfo format_call	count=1
function_arg	store [arg_2] ||| [arg_2] [function_1]	count=3
arg	if ||| group	count=1
class	options have ||| interactive	count=1
class	ask for a ||| terminal interactive	count=1
module	the input source ends ||| core	count=2
module	of the content splitted ||| core	count=1
module	the ipython user ||| core	count=1
function	the format [function_2] ||| [function_2] [function_1]	count=3
arg	pyside2 [arg] submodules ||| [arg]	count=1
function	level=3) ||| error	count=1
arg	show_all ||| show_all	count=1
arg	an ipython shell ||| shell backend	count=1
function	[function_1] by its ||| [function_2] [function_1]	count=6
class	with detailed information ||| inspector	count=2
arg	piping through a pager ||| start screen_lines pager_cmd	count=1
function	skip reloading ||| skipped	count=1
module	of lines on the ||| core	count=1
class	some configuration ||| terminal	count=1
class	options have ||| terminal interactive shell	count=1
function	store a user-created object ||| ns refs	count=1
module	the python code ||| core magics	count=1
module	a file ||| utils	count=1
function	magic ||| magic	count=3
function_arg	[function_1] of obj ||| [arg_2] [function_1]	count=4
function	page ||| page	count=2
function	parse [function_2] ||| [function_2] [function_1]	count=1
function	get object info as ||| object	count=1
function	run code ||| run cmd line code	count=1
function_arg	optimal [arg_2] ||| [function_1] rlist [arg_2]	count=2
function	of a class ||| class	count=1
function_arg	[function_1] data ||| [arg_2] [function_1]	count=2
class	chain ||| chain dispatcher	count=1
function	add this object's information ||| add	count=1
function	running ||| running	count=2
arg	dict [arg_2] ||| [arg_2] [arg_1]	count=2
function_arg	[function_1] code will ||| [arg_2] [function_1]	count=5
function_arg	[function_1] fit ||| [function_1] [arg_2]	count=3
module	range for ||| magics	count=1
function	[function_1] session ||| [function_1] [function_2]	count=3
class	code into ||| code	count=1
class	alias [class] ||| alias [class]	count=1
class	options have changed ||| interactive shell	count=1
class	options ||| terminal	count=1
function	source code ||| source	count=1
arg	a function ||| func	count=1
function	2 /psearch call ||| make help call	count=1
function	remove all comments from ||| remove comments	count=1
function	from a block of ||| strip	count=1
function_arg	multiple paragraphs [arg_2] ||| [function_1] [arg_2]	count=1
function_arg	class [arg_2] ||| [function_1] [arg_2]	count=1
module	the command to ||| core	count=1
function	flush data ||| flush	count=1
function	find absolute path ||| find	count=1
class	delete ||| namespace magics	count=1
class	manager ||| manager	count=1
function	to a log ||| log	count=1
arg	that just redirects to ||| obj p cycle	count=1
function	a function ||| update function	count=1
function	qt4 [function_2] ||| [function_2] running [function_1]	count=1
class	example some configuration ||| interactive shell	count=1
class	transformed [class] none if ||| coroutine [class]	count=1
class	history manager ||| history manager	count=1
class	for ||| terminal	count=2
function	application layout if ||| layout	count=1
arg	for cocoa nsapp ||| context	count=1
function	[function_1] at a ||| [function_2] [function_1]	count=3
function	filenames ||| frame records filenames	count=1
function	print [function_2] ||| [function_2] [function_1]	count=3
function	token at a given ||| token at	count=1
function	excepthook ||| excepthook	count=1
function	for ipy ||| safe execfile ipy	count=1
function_arg	[function_1] block ||| [arg_2] [function_1]	count=1
arg	text ||| text	count=3
class	changed ||| terminal interactive	count=1
function	[function_1] input ||| [function_2] [function_1]	count=4
function	[function_1] [function_2] for ||| [function_2] [function_1]	count=4
function	[function_1] executing ||| [function_1] [function_2]	count=2
function	the number ||| num	count=3
function	create a new ||| init	count=2
arg	pprint function useful for ||| start end basetype	count=1
function	transform [function] commands ||| [function]	count=1
class	re ||| interactive shell	count=2
function	markdown representation of ||| markdown	count=1
module	for a re computation ||| terminal	count=1
module	the implementation ||| core	count=1
function	module ||| load module	count=1
function	copy a [function_2] ||| [function_1] [function_2]	count=2
function	in [1]:/ : prompts ||| ipy prompt	count=1
function	call for ||| call	count=1
function	insertion ||| mci	count=1
function	[function_1] loop ||| [function_1] [function_2]	count=3
function	[function_1] hash from ||| [function_1] [function_2]	count=4
function	factory that returns ||| factory	count=2
function	[function_1] event ||| [function_2] loop running [function_1]	count=2
module	print the ||| core magics	count=2
arg	as a block ||| line	count=1
arg	mod altmod ||| mod altmod	count=2
function	module and [function_2] ||| [function_2] [function_1]	count=2
function_arg	[function_1] a name ||| [function_1] [arg_2]	count=3
module	the delimiters for ||| core	count=1
module	the currently active ||| core magics	count=2
class	some ||| interactive	count=1
class	reload ||| extension manager	count=1
function	to [function_2] ||| [function_1] [function_2]	count=2
function	markdown representation ||| markdown	count=1
class	re computation ||| terminal interactive	count=1
function	a type ||| type	count=1
function	yield pasted [function_2] ||| [function_1] [function_2]	count=3
arg	to warn(msg ||| msg exit_val	count=1
class	traceback a ||| tb	count=1
function	stdin read ||| stdin	count=1
function	[function_1] input ||| [function_1] [function_2]	count=4
module	line has the ||| core	count=1
function	jpeg representation of an ||| jpeg	count=1
function_arg	info about [arg_2] ||| [arg_2] [function_1]	count=1
arg	object ||| obj	count=11
function	module and insert it ||| module	count=1
function	source code to ||| source to	count=2
function	dir by ||| dir by name	count=4
function	ensure __all__ is always ||| all	count=1
function	delete a variable trying ||| xdel	count=1
class	the parameter ||| parameter	count=1
class	return ||| manager	count=1
function	new wx app or ||| get app wx	count=1
function_arg	options passed ||| options arg_str opt_str	count=1
class	configuration options have changed ||| terminal interactive	count=1
function	register a ||| register	count=1
arg	to be reloaded ||| check_all do_reload	count=1
arg	[arg_1] by callable ||| external decorators assert warns [arg_1] [arg_2]	count=3
function	state of hooks in ||| state	count=1
function	get a reasonable method ||| get	count=1
function	[function_1] unicode ||| [function_2] [function_1]	count=8
class	for example some configuration ||| interactive	count=1
module	value of an expression ||| utils	count=1
arg	mirrored ||| fullname	count=2
function	find module ||| find mod	count=2
arg	[arg_1] block for ||| [arg_2] [arg_1]	count=2
function	ask ||| update	count=1
class	back one block ||| demo	count=1
function	type of an instance ||| type	count=1
module_class	[module_1] object to ||| [module_1] [class_2]	count=2
function	check whether some modules ||| check	count=1
function_arg	[function_1] line ||| [arg_2] [function_1]	count=6
function_arg	paragraphs to fit ||| paragraphs text ncols	count=2
function	message without ||| show	count=1
function	back to ||| back	count=1
function	the last ||| last	count=1
class	for example ||| terminal interactive shell	count=1
module	unique elements [module] the ||| [module]	count=1
module	the ||| core magics	count=18
arg	number ||| conn	count=1
class	the seek pointer ||| demo	count=1
function	methods ||| method magic marker	count=1
function	flush ||| flush	count=2
class	list ||| slist	count=1
function	repr ||| safe repr	count=2
function	input line [function] i ||| [function]	count=1
function	fix ||| fix frame	count=1
arg	handler which ||| handler	count=1
class	given job ||| background job manager	count=1
class	optionally ||| terminal	count=1
module_class	[module_1] chain ||| [module_1] [class_2]	count=4
module	simply execute [module] line (regardless ||| [module]	count=1
function_arg	[function_1] columnize ||| [arg_2] [function_1]	count=1
arg	if active ||| kind	count=1
function_arg	tip data [arg_2] ||| [arg_2] [function_1]	count=1
arg	as an ||| line	count=1
arg	[arg_1] metadata to ||| [arg_2] [arg_1]	count=2
class	find ||| code magics	count=1
function	embedded ipython this function ||| embedded	count=1
function	sys excepthook ||| excepthook	count=1
function_arg	[function_1] [arg_2] ||| [function_1] obj [arg_2]	count=12
function	[function_1] profiler ||| [function_2] [function_1]	count=1
function	[function_1] [function_2] ||| [function_1] sys module [function_2]	count=4
arg	line or cell ||| line	count=1
function	return a format ||| format	count=1
class	the ||| terminal ipython	count=1
function	history previous unlike default ||| history	count=1
function_arg	or within [arg_2] ||| [function_1] string [arg_2]	count=1
arg	a block ||| block	count=1
function	the ||| init	count=1
module	on screen block ||| lib	count=1
arg	unless a warning of [arg_1] [arg_2] ||| [arg_1] [arg_2]	count=9
module	of the main statement ||| core	count=1
arg	mod [arg_2] ||| [arg_1] [arg_2]	count=5
class	a new history ||| history	count=1
function_arg	[function_1] mpl ||| [arg_2] [function_1]	count=1
module	initialise the ||| core	count=1
class	traceback ||| tb	count=4
module	a ||| utils	count=17
function	spaces ||| spaces	count=2
arg	the cell ||| cell	count=1
class	changed ||| shell	count=1
function	[function_1] or ||| [function_1] [function_2]	count=7
arg	the line ||| line	count=1
function	set the ||| set	count=2
function	or within ||| or	count=1
arg	print your currently active ||| parameter_s	count=1
module	statement through the python ||| core	count=1
function	code or file specified ||| code	count=1
arg	an ipython shell ||| shell	count=1
function	next command ||| set next	count=1
arg	altmod [arg_2] ||| [arg_2] [arg_1]	count=2
function	line [function] i ||| [function]	count=1
function	at a [function_2] ||| [function_1] [function_2]	count=2
arg	and [arg_2] ||| [arg_2] [arg_1]	count=8
function	[function_1] by ||| [function_1] [function_2]	count=2
arg	by callable ||| func	count=1
class	history [class_2] ||| [class_2] [class_1]	count=1
module	the various namespaces ||| core	count=1
function	given ||| get hist	count=1
function	profiler used ||| profiler	count=1
module_class	[module_1] profile directory ||| [module_1] [class_2]	count=2
function	readline is history ||| history	count=1
class	configuration options ||| shell	count=1
arg	find/create ||| profile_dir config	count=1
class	display hook ||| display hook	count=2
module	[module_1] current ||| [module_1] [module_2]	count=10
class	=> import ||| autoreload magics	count=1
function	[function_1] format ||| [function_2] [function_1]	count=2
function_arg	[function_1] a name ||| [arg_2] [function_1]	count=3
arg	possibly including stderr from ||| cmd split depth	count=1
class	user's namespace ||| interactive shell	count=1
function	name ||| name	count=7
class	color [class_2] ||| [class_2] [class_1]	count=1
arg	of obj if ||| obj	count=1
class	configuration options have changed ||| interactive	count=1
class	cmd chain ||| command chain dispatcher	count=1
function	from a style name ||| from name	count=1
class	stdin ||| win32shell command controller	count=1
function	the last [function_2] ||| [function_2] [function_1]	count=3
module	list of parameter ||| utils	count=1
function	default config [function_2] ||| [function_1] [function_2]	count=1
function_arg	[function_1] called by ||| [function_1] [arg_2]	count=1
function	latex characters [function_2] ||| [function_2] [function_1]	count=4
function	unicode ||| matches	count=1
class	initialize ||| base ipython application	count=1
function	object info as a ||| object	count=1
function	from a block ||| strip	count=1
function	turn ||| extract code ranges	count=1
arg	[arg_1] by callable ||| [arg_2] [arg_1]	count=3
function	ranges as used by ||| by	count=1
function	wx [function_2] ||| [function_2] loop [function_1]	count=1
function_arg	generator [arg_2] ||| [arg_2] [function_1]	count=2
function	the clipboard's text ||| clipboard	count=2
arg	print your ||| parameter_s	count=1
function	list of shell aliases ||| default aliases	count=1
arg	be reloaded ||| check_all do_reload	count=1
arg	string piping through ||| start screen_lines pager_cmd	count=1
function	or ||| or	count=3
function	[function_1] files ||| [function_2] [function_1]	count=1
function	copy [function_2] ||| [function_2] [function_1]	count=2
function	module and namespace ||| module	count=1
module	calls the enabled transformers ||| core	count=1
function	state of ||| state	count=1
class	embedded ipython ||| embedded	count=1
module	optionally display ||| terminal	count=1
class	return a ||| magics	count=1
arg	find/create ||| profile_dir	count=1
class	register ||| event manager	count=1
module	the next possible ||| core	count=1
function	for ||| update	count=2
module	of a ||| utils	count=1
function	give the current session ||| session	count=1
module	the delimiters ||| core	count=1
function	update user_ns with ||| update	count=1
arg	data block for ||| data input_prompt lineno	count=2
function_arg	/psearch call [arg_2] ||| [arg_2] [function_1]	count=2
function	from a ||| from	count=1
arg	a string piping through ||| start screen_lines pager_cmd	count=1
function	fields for exception reporting ||| exception colors	count=1
function	by ||| by	count=3
function	user input ||| user input	count=2
class	for example some configuration ||| terminal	count=1
function	handle an exception call ||| call	count=1
function	[function_1] loop running ||| [function_2] [function_1]	count=2
arg	[arg_1] shell ||| [arg_2] [arg_1]	count=1
function_arg	call for [arg_2] ||| [arg_2] [function_1]	count=4
class	have changed ||| terminal	count=1
function	we get the commit ||| commit	count=1
arg	password and salt for ||| passphrase algorithm	count=1
module	pointer back one block ||| lib	count=1
function	named magic ||| magic	count=1
class	a dict ||| magics	count=1
function	to import [function] given a ||| [function]	count=1
function	[function_1] tip ||| [function_2] [function_1]	count=2
function_arg	config file [arg_2] ||| [function_1] [arg_2]	count=1
module	by the ||| core	count=2
class	create [class_1] [class_2] ||| [class_1] [class_2] init	count=1
function	completer ||| completer	count=3
arg	all exceptions ||| obj p cycle	count=1
arg	[arg_1] name buf ||| [arg_1] [arg_2]	count=2
function	transform assignment [function] commands ||| assign [function]	count=1
class	configuration ||| terminal interactive	count=1
arg	path into ||| path	count=1
function	default [function_2] ||| [function_2] [function_1]	count=6
arg	associated with a shell ||| shell config	count=1
function	python code profiler ||| prun	count=1
arg	handler which will ||| handler	count=1
function	system standard i/o ||| stdio	count=1
arg	lines ||| lines	count=3
function	pager ||| pager page	count=2
function	pasted lines until ||| get pasted lines	count=2
class	example some ||| terminal interactive	count=1
function	unicode [function_2] ||| [function_2] [function_1]	count=8
module_class	[module_1] [class_2] ||| [module_1] [class_2]	count=180
function	assignment [function] ||| assign [function]	count=1
function	to fix ||| fix frame	count=1
module	for %%load ||| magics	count=1
function	add this object's ||| add	count=2
function	a directory ||| dir	count=1
function	matplotlib and inline ||| matplotlib	count=1
class	logging ||| logger	count=2
arg	[arg_1] token ||| [arg_2] [arg_1]	count=4
function	exit_val=exit_val level=4) ||| fatal	count=1
function	version ||| check version	count=1
class	always ||| shim module	count=1
arg	code ||| code opts	count=1
arg	[arg_1] as ||| [arg_2] [arg_1]	count=4
function	all comments from ||| comments	count=1
class	traceback ||| syntax tb	count=1
function	ensure __all__ is ||| all	count=1
module	dict of ||| core	count=1
function	import [function] given a ||| [function]	count=1
function	[function_1] files into ||| [function_1] [function_2]	count=1
class	active formatters ||| display formatter	count=1
function	the current session ||| name session	count=1
function	the named module in ||| module	count=2
function	[function_1] by its ||| [function_1] [function_2]	count=6
class	a re ||| terminal interactive	count=1
arg	result_html_prefix ||| result_html_prefix	count=1
module	wake ||| terminal pt_inputhooks	count=1
class	computation of the ||| interactive	count=1
function	line [function] i e ||| [function]	count=1
function	loop [function_2] ||| [function_1] [function_2]	count=2
function	of ||| update	count=1
function	list of default ||| default	count=1
function	run code or file ||| run cmd line code	count=1
module	matching 'pattern' a ||| utils	count=1
function	args ||| args	count=1
class	options have ||| terminal interactive	count=1
class	code into ||| code magics	count=1
function	[function_1] arguments of ||| [function_1] [function_2]	count=3
function	[function_1] blanks ||| [function_2] [function_1]	count=1
function	from ||| strip	count=1
function	pprint ||| exception pprint	count=1
module	current dir on ||| magics	count=1
module	depends on [module] ||| [module]	count=2
class	changed ||| terminal interactive shell	count=2
function	an ||| import	count=1
function	class ignore its methods ||| method	count=1
function	the status of ||| status	count=1
arg	[arg_1] callable ||| external decorators assert warns [arg_1] [arg_2]	count=3
function	block of html ||| html	count=1
function	factory ||| factory	count=2
arg	data block for ||| data output_prompt	count=2
class	traceback a list ||| tb	count=1
function	rerun a ||| rerun	count=1
function_arg	print function [arg_2] ||| [arg_2] [function_1]	count=2
function	list of lines ||| lines	count=1
module	test ||| external decorators	count=1
class	callable without having ||| auto	count=2
arg	given [arg] optionally ||| [arg]	count=1
module	the implementation ||| core magics	count=1
function	get [function_2] ||| [function_1] [function_2]	count=6
function	copy a ||| copy	count=1
function	of shell aliases to ||| aliases	count=1
module	configuration options have changed ||| terminal	count=1
class	input buffer ||| ipython input	count=1
function	pdb interactive debugger ||| pdb	count=1
function	[function_1] comment or ||| [function_2] [function_1]	count=5
module	is like the ||| core	count=1
function	in a comment ||| in comment	count=3
function_arg	which user [arg_2] ||| [function_1] module [arg_2]	count=3
function	mode code insertion ||| get mci	count=1
arg	escape ||| esc	count=1
function_arg	[function_1] scheme ||| [function_1] [arg_2]	count=1
class	a sequence ||| interactive shell	count=1
module	calling of the ||| core	count=1
function	get a [function_2] ||| [function_1] [function_2]	count=4
module	call the ||| core	count=1
function	add a [function_2] ||| [function_2] [function_1]	count=2
function	of a function ||| update function	count=1
arg	as ||| line	count=2
function_arg	[function_1] upgrade ||| [arg_2] [function_1]	count=3
function	split user [function_2] ||| [function_1] [function_2]	count=1
function	[function_1] to ||| [function_2] [function_1]	count=5
module	configuration ||| terminal	count=1
function	2 /psearch call from ||| call	count=1
class	[class_1] directory ||| [class_2] [class_1]	count=2
arg	code to ||| source	count=1
arg	reload ||| reload	count=1
arg	executing cmd in ||| cmd	count=1
arg	level return ||| level	count=1
arg	the [arg] ||| seq [arg]	count=1
function	of a property ||| update property	count=1
function	the normal repr ||| repr	count=1
module	range for %%load into ||| magics	count=1
function	float_precision changed ||| changed	count=1
arg	from a target ||| target	count=1
function	returning [function] with shape ||| data and [function]	count=1
function_arg	[function_1] a target ||| [function_1] [arg_2]	count=3
arg	and metadata ||| metadata source	count=2
function	the commit ||| commit	count=1
class	object to be ||| display hook	count=1
function	shortcuts ||| shortcuts	count=1
arg	level return the ||| level	count=1
function	[function_1] tip data ||| [function_2] [function_1]	count=2
arg	block ||| block	count=1
arg	code to ||| source filename	count=1
function	extract call [function_2] ||| [function_2] [function_1]	count=4
function	wx event loop in ||| event loop wx	count=1
arg	a name ||| name	count=1
function_arg	the [function_1] [arg_2] ||| utils [function_1] [arg_2]	count=2
arg	data block [arg_2] ||| [arg_1] [arg_2]	count=1
arg	target name ||| target	count=1
class	in ||| interactive	count=1
function_arg	register a [arg_2] ||| [function_1] [arg_2]	count=2
function	format a list ||| format list	count=3
function	gui string return ||| find	count=1
arg	lines which can be ||| line_info	count=1
function	be used to set ||| set	count=1
function	actually show ||| showtraceback	count=1
function	store it in ||| store	count=1
module	dropped the ||| core	count=1
function	qt4 event loop running ||| event loop running qt4	count=1
function	[function_1] paragraphs to ||| [function_1] [function_2]	count=1
arg	the currently ||| case_sensitive	count=1
function_arg	parse options [arg_2] ||| [arg_2] [function_1]	count=4
function_arg	[function_1] magic_kind ||| [arg_2] [function_1]	count=1
function	profile dir and return ||| profile dir	count=1
arg	os path ||| path	count=1
class	a re computation of ||| terminal interactive shell	count=1
module	any of the ||| core	count=1
module	is always defined ||| utils	count=1
arg	callable when invoked ||| func	count=1
function	add a breakable ||| breakable	count=1
function_arg	unregister a [arg_2] ||| [function_1] name [arg_2]	count=1
arg	mod altmod [arg_2] ||| [arg_1] [arg_2]	count=2
class	ask for a re ||| terminal interactive shell	count=1
module	statement through the ||| core magics	count=1
class	shell ||| sphinx shell	count=1
arg	a cell via ||| cell	count=1
module	for %load ||| core magics	count=1
function	[function_1] which user ||| [function_2] [function_1]	count=2
function	session id currently ||| session id	count=2
function_arg	[function_1] source and ||| [arg_2] [function_1]	count=1
function	[function_1] at ||| [function_2] [function_1]	count=3
function	ends [function_2] ||| [function_2] [function_1]	count=6
arg	line ||| line cell	count=1
function_arg	[function_1] [arg_2] input ||| [function_1] [arg_2]	count=1
function	a pager after ||| pager	count=1
class	computation ||| terminal interactive	count=1
function	markdown representation of an ||| markdown	count=1
function	integration taking [function] into ||| init gui [function]	count=1
function	call tip data ||| call tip	count=2
function	the status ||| status	count=2
function	for a re computation ||| update	count=1
arg	warning_class is thrown by ||| warning_class	count=1
function_arg	[function_1] [arg_2] ||| [function_1] string [arg_2]	count=24
arg	possibly including stderr from ||| split depth	count=1
function	wrap multiple ||| wrap	count=1
function	at a ||| at	count=1
arg	name with esc_strings ||| name handler esc_strings	count=2
function_arg	class and [arg_2] ||| [function_1] [arg_2]	count=1
function	ipython extension ||| extension	count=3
function_arg	a class [arg_2] ||| [arg_2] [function_1]	count=1
function_arg	[function_1] a session ||| [arg_2] [function_1]	count=2
class	for a given job ||| background job manager	count=1
function_arg	optimal info [arg_2] ||| [function_1] rlist [arg_2]	count=3
class	load ||| extension manager	count=1
function	filenames ||| filenames	count=1
function	report summary for a ||| report	count=1
class	functions ||| basic magics	count=1
module	through the python ||| core magics	count=1
module_class	of history ||| core history accessor	count=1
function	a pager after ||| pager page	count=1
function	[function_1] [function_2] ||| [function_1] output error [function_2]	count=2
function_arg	[function_1] and upgrade ||| [function_1] [arg_2]	count=4
function	prompts from a ||| strip prompts	count=2
function	pprint function ||| pattern pprint	count=1
function	yield pasted lines ||| pasted lines	count=1
arg	[arg_1] object ||| [arg_2] [arg_1]	count=8
arg	an object ||| obj oname	count=5
module_class	[module_1] desired ||| [module_1] [class_2]	count=2
arg	[arg_1] a shell ||| init [arg_2] [arg_1]	count=1
function	token at a ||| token at	count=2
function	[function_1] for ipython ||| [function_2] [function_1]	count=2
function	[function_1] to html ||| [function_1] [function_2]	count=1
module	dict_key_matches matching the ||| core	count=1
module	store [module] macro value ||| [module]	count=1
class	hook ||| display trap	count=2
class	stdin ||| command controller	count=1
class	database using unix glob-style ||| history accessor	count=1
module	and close log ||| core	count=1
function_arg	add [arg_2] ||| [arg_2] [function_1]	count=2
function	wake the ||| wake	count=1
arg	be fed to eval() ||| expression glob loc	count=1
arg	altmod name [arg_2] ||| [arg_2] [arg_1]	count=1
function	image file to ||| save image	count=1
function	time ||| time	count=1
module	the implementation in ||| core	count=1
arg	a line of input ||| line	count=2
class	and change directory ||| osmagics	count=1
function_arg	given magic_kind ||| type magic_kind	count=1
function	the string to stdout ||| stdout raw	count=1
function	config files into ||| config files	count=2
function_arg	paragraphs [arg_2] ||| [function_1] [arg_2]	count=1
function	marquee ||| marquee	count=1
function	for input ||| input	count=1
function	reset ||| reset	count=4
arg	data block for ||| data input_prompt	count=1
class	for example some configuration ||| terminal interactive shell	count=1
arg	execute a ||| code_obj result	count=1
function	figure to an ||| figure	count=1
function	[function_1] status of ||| [function_1] [function_2]	count=1
arg	usage in [arg] ||| [arg]	count=1
arg	cmd in a ||| cmd	count=1
function	find the [function_1] [function_2] ||| core [function_2] [function_1]	count=3
module	in ||| utils	count=1
function	/psearch call ||| call	count=1
arg	send a line of ||| line	count=2
class	some configuration options have ||| terminal interactive	count=1
function	reload all ||| reload	count=1
function_arg	[function_1] to columnize ||| [function_1] rlist [arg_2]	count=1
arg	mpl ||| gui_select	count=1
module_class	show the whole ||| core inspector	count=1
arg	magic ||| magic_name magic_kind	count=1
function	safely stop ||| stop	count=1
function	base pprint ||| exception pprint	count=1
arg	output [arg_2] ||| [arg_2] [arg_1]	count=2
function_arg	execute [arg_2] ||| [arg_2] [function_1]	count=1
function	python source code ||| source	count=1
module	the value if so ||| core	count=1
module_class	of ipython input ||| core ipython input	count=1
class	history from a string ||| history	count=1
function	cpus in ||| cpus	count=1
function	reload the named module ||| module	count=1
function	ipythonapp exec_files ||| exec	count=1
arg	a magic ||| magic_name	count=1
function	filter for deprecation warning ||| init deprecation warnings	count=1
function	[function_1] config ||| [function_2] [function_1]	count=1
function_arg	current session [arg_2] ||| [arg_2] [function_1]	count=3
function	nodes the ||| nodes	count=1
function	path to an ||| path	count=1
function	[function_1] print function ||| [function_2] [function_1]	count=1
function	create ||| init	count=5
function	the input ||| input	count=1
class	a format ||| base formatter	count=1
function	the banner ||| init banner	count=1
function	to find [function_2] ||| [function_1] [function_2]	count=1
function	pager after a certain ||| pager	count=1
module_class	[module_1] command-line ||| [module_1] [class_2]	count=8
class	computation ||| terminal interactive shell	count=2
module	through the python code ||| core magics	count=1
function	warning ||| warnings	count=1
function	[function_1] ipythonapp exec_files ||| [function_2] [function_1]	count=2
class	for a re computation ||| interactive	count=1
function	[function_1] list of ||| [function_1] [function_2]	count=1
function_arg	call from [arg_2] ||| [function_1] [arg_2]	count=2
module	the list ||| core	count=1
arg	cmd in ||| cmd	count=1
module	of the character ||| core	count=1
arg	turn a ||| ranges_str	count=1
function	cache [function_2] ||| [function_2] [function_1]	count=2
arg	a pager piping through ||| screen_lines pager_cmd	count=1
class	formatter for a ||| formatter	count=2
class	computation ||| interactive	count=1
function	list item number or ||| get or	count=1
function	hashed ||| passwd	count=1
module_class	the display ||| core display	count=2
function	[function_1] data ||| [function_1] [function_2]	count=8
class	return a dict of ||| magics	count=1
module	defined ||| utils	count=1
arg	pyside2 without importing ||| api	count=1
arg	simply call the object ||| src title arg_str auto_all	count=1
module	for adding ||| magics	count=1
module	lines on the ||| core	count=1
function_arg	pprint [arg_2] ||| [function_1] [arg_2]	count=3
class	a re ||| terminal interactive shell	count=1
function_arg	for the [function_1] [arg_2] ||| [function_1] file name [arg_2]	count=1
function_arg	[function_1] [arg_2] ||| [function_1] data [arg_2]	count=4
class	back one ||| demo	count=1
arg	and metadata to all ||| metadata source	count=1
class	pdb ||| execution magics	count=1
function	and message ||| show	count=1
class	re ||| shell	count=1
function_arg	options passed to ||| options arg_str opt_str	count=1
function	[function_1] [function_2] ||| [function_1] bundled [function_2]	count=1
arg	metadata ||| metadata	count=1
arg	text ||| continue_prompt	count=1
function	return ||| find	count=1
arg	prefix ||| prefix	count=1
class	transformers ||| input splitter	count=1
function	the modules ||| modules	count=1
class	chain ||| command chain dispatcher	count=2
function_arg	[function_1] a block ||| [function_1] [arg_2]	count=1
function_arg	[function_1] code will ||| [function_1] module [arg_2]	count=4
module	of an expression from ||| utils	count=1
module	at the given ||| core	count=1
function	define [function_2] ||| [function_1] [function_2]	count=3
arg	a line [arg_2] ||| [arg_2] [arg_1]	count=1
function	exception reporting ||| exception colors	count=1
arg	shell ||| shell	count=1
module	the default ||| core	count=2
class	for [class_2] ||| [class_2] [class_1]	count=2
function	[function_1] entire ||| [function_1] [function_2]	count=1
arg	[arg_1] data ||| [arg_2] [arg_1]	count=2
function	in a comment or ||| in comment or	count=1
function	with ||| with	count=2
arg	altmod name buf ||| altmod name buf	count=3
module	the user if ||| core magics	count=1
arg	level ||| level	count=1
function_arg	[function_1] compatible with ||| [arg_2] [function_1]	count=3
arg	[arg] submodules ||| [arg]	count=1
function	get the current block ||| get	count=1
function	[function_1] args ||| [function_2] [function_1]	count=1
module_class	[module_1] pdb ||| [module_1] [class_2]	count=6
class	compute ||| ipython display formatter	count=1
arg	a string piping ||| pager_cmd	count=1
function	current session ||| session	count=2
function	find what ||| find	count=1
arg	if the given class ||| cls	count=1
function	[function_1] user input ||| [function_2] [function_1]	count=1
arg	code will ||| user_module user_ns	count=1
function	factory that returns a ||| set pprinter factory	count=1
class	having to type parentheses ||| auto magics	count=1
function	remove an [function_2] ||| [function_1] [function_2]	count=1
function	[function_1] [function_2] ||| lib [function_2] [function_1]	count=2
function_arg	[function_1] re-set ||| [arg_2] [function_1]	count=3
function	type ||| type	count=3
function	a completer ||| reset completer	count=1
function_arg	code [arg_2] ||| [arg_2] [function_1]	count=2
module	of an expression ||| utils	count=1
class	hook ||| hook	count=1
class	get ||| history accessor	count=1
class	history ||| history	count=4
function	save the [function_2] ||| [function_2] [function_1]	count=4
function	return [function_2] ||| [function_1] output error [function_2]	count=2
function	id currently in ||| id	count=1
function	example some configuration ||| update	count=1
arg	thrown by callable when ||| func	count=1
function_arg	an [arg_2] ||| [function_1] [arg_2]	count=1
module	a dict of ||| core	count=1
function	function ||| pattern	count=1
module	object to run the ||| lib	count=1
module	range for %%load ||| magics	count=1
class	configuration options have ||| shell	count=1
function	translate lines escaped with ||| tr	count=2
function	find [function_2] ||| [function_2] [function_1]	count=1
function_arg	to html [arg_2] ||| [arg_2] [function_1]	count=1
function	get input ||| get range	count=2
class	script ||| script	count=1
function	[function_1] the last ||| [function_2] [function_1]	count=1
function	get the last session ||| get last session	count=1
arg	val should be only ||| val	count=1
function	copy a default ||| copy	count=1
class	for a ||| interactive shell	count=1
class	ask ||| terminal	count=1
function	changed ||| update	count=1
function	of shell aliases ||| default aliases	count=1
function	[function_1] arguments ||| [function_2] [function_1]	count=3
function	for returning [function] with shape ||| data and [function]	count=1
arg	[arg_1] output ||| [arg_2] [arg_1]	count=2
class	dict with detailed information ||| inspector	count=2
function	the deferred type registry ||| deferred	count=1
module	move the seek pointer ||| lib	count=1
module	calling of the ||| core magics	count=1
arg	mod subname ||| mod subname	count=2
function_arg	[function_1] input source ||| [arg_2] [function_1]	count=2
class	by priority ||| manager	count=1
arg	expand a path into ||| path	count=1
class	fill in ||| template filler	count=1
class	re computation ||| terminal	count=1
function_arg	ast [arg_2] ||| [arg_2] [function_1]	count=1
class	return a dict ||| magics manager	count=1
class	execution of a ||| execution magics	count=1
function	wx [function_2] ||| [function_2] running [function_1]	count=1
function	object of a function ||| function	count=1
function	[function_1] at a ||| [function_1] [function_2]	count=3
function	back to [function_2] ||| [function_1] latex name [function_2]	count=1
function	skip reloading the named ||| skipped	count=1
class	for a ||| terminal	count=1
function_arg	[function_1] all exceptions ||| [arg_2] [function_1]	count=2
function	with profiler used by ||| with profiler	count=1
function	javascript representation of ||| javascript	count=1
function	used by ||| by	count=1
class	options ||| terminal interactive	count=1
function	a repr ||| safe repr	count=1
function_arg	[function_1] [arg_2] ||| [function_1] [arg_2]	count=521
arg	block for [arg_2] ||| [arg_1] [arg_2]	count=1
function	in ||| get	count=2
function	event loop in a ||| event loop	count=1
function	default filter for deprecation ||| deprecation	count=1
function	application layout if for ||| layout	count=1
arg	name = get_parent globals ||| globals	count=1
function_arg	format [arg_2] ||| [arg_2] [function_1]	count=1
module	through the python ||| core	count=1
class	transformed any lines that ||| input	count=1
function	a builtin and ||| builtin	count=1
class	object ||| display	count=1
function	the token [function_2] ||| [function_2] [function_1]	count=6
arg	through ||| start screen_lines	count=2
function	[function_1] [function_2] ||| [function_1] name [function_2]	count=4
function	a handler [function_2] ||| [function_1] [function_2]	count=2
function	files into profile dir ||| files	count=1
arg	text is ||| text	count=1
function	return a copy ||| copy	count=1
module	the default output ||| core	count=1
class	a given job ||| background job	count=1
function	of default [function_2] ||| [function_1] [function_2]	count=2
function	a handler [function_2] ||| [function_2] [function_1]	count=2
function	returns [function] locals ||| [function]	count=1
function_arg	parent [arg_2] ||| [function_1] [arg_2]	count=5
function	state ||| state	count=1
function	the token [function_2] ||| [function_1] [function_2]	count=6
module	the parsing part of ||| core	count=1
module	re computation of the ||| terminal	count=1
arg	contents ||| fname	count=1
arg	obj if it ||| obj	count=1
function	some configuration ||| update	count=1
function	interactive input can accept ||| push accepts	count=1
arg	thrown by callable ||| func	count=1
module_class	with the [class_2] ||| [module_1] [class_2]	count=2
class	from the parent class ||| terminal interactive	count=1
module_class	use the raw win32 [module_1] [class_2] ||| [module_1] [class_2]	count=2
arg	[arg_1] level return ||| [arg_2] [arg_1]	count=1
arg	cell ||| cell	count=5
arg	a string piping through ||| screen_lines pager_cmd	count=1
arg	target ||| target	count=1
function	ipy ||| safe execfile ipy	count=1
class	return ||| magics	count=1
function	jpeg representation of ||| jpeg	count=1
function	[function_1] to edit ||| [function_2] [function_1]	count=2
class	computation of the ||| terminal interactive shell	count=1
function	jpeg representation ||| jpeg	count=1
function_arg	return code [arg_2] ||| [arg_2] [function_1]	count=2
module	re computation of ||| terminal	count=1
arg	to fit ||| text ncols	count=1
function	macro ||| macro	count=1
function	default shutdown hook ||| shutdown hook	count=2
class	transformed input ||| stateless input	count=2
class	re computation of the ||| terminal interactive shell	count=1
function	factory that returns a ||| seq pprinter factory	count=1
function	write the [function_2] ||| [function_2] [function_1]	count=4
function	completer for ||| completer	count=1
module	statement through the ||| core	count=1
function	from a [function_2] ||| [function_2] [function_1]	count=3
function	[function] comment if ||| [function]	count=1
module	handler for [module] line_info by ||| [module]	count=1
arg	paging ||| start	count=1
arg	info dict and ||| info	count=1
arg	filename ||| filename	count=2
arg	associated with ||| config	count=1
class	ipython [class_2] ||| [class_1] [class_2]	count=1
function_arg	[function_1] data to ||| [function_1] [arg_2]	count=1
arg	through ||| data start screen_lines	count=1
class	ask for ||| terminal interactive shell	count=1
module	and the ||| core	count=1
function_arg	[function_1] oinfo dict ||| [arg_2] [function_1]	count=3
function	partially ||| partial	count=1
class	input or ||| input	count=1
module	back one ||| lib	count=1
function	a class and ||| update class	count=1
function_arg	getattr to [arg_2] ||| [function_1] property [arg_2]	count=1
module	buf = ||| lib	count=1
function	methods ||| method	count=1
function	characters back [function_2] ||| [function_1] latex name [function_2]	count=1
arg	through a ||| start screen_lines	count=2
function	default to a ||| default	count=1
function	what to edit ||| edit target	count=1
arg	contents of ||| fname	count=1
function	namespace in which user ||| user	count=1
function	register the ||| register	count=1
function	pasted [function_2] ||| [function_2] [function_1]	count=3
function	activate ||| activate matplotlib	count=1
class	print ||| list	count=1
function_arg	[function_1] dict for ||| [arg_2] [function_1]	count=4
arg	print or ||| arg	count=2
class	input ||| input	count=9
class	signature ||| signature	count=3
function_arg	to html with ||| to html s	count=1
function	a re computation of ||| update	count=1
class	user's ||| interactive shell	count=4
arg	pager piping through ||| start screen_lines pager_cmd	count=1
function	a ||| update	count=1
function	layout ||| layout	count=1
function	event [function_2] ||| [function_1] [function_2]	count=8
function	code object ||| code	count=1
function	simple exception dict ||| user obj error	count=2
function	characters back to ||| back	count=1
function	builtin and ||| builtin	count=1
function	find and [function_2] ||| [function_2] [function_1]	count=1
function	get the ||| get	count=4
arg	a pager piping through ||| start screen_lines pager_cmd	count=1
function	'_' variable by hand ||| for underscore	count=1
class	writes the ||| win32shell command controller	count=1
function	code ||| code	count=5
function	a default config file ||| config file	count=1
arg	token ||| input_lines	count=1
function	check if ||| check	count=1
function	profiler ||| profiler	count=1
function	object ||| object	count=1
arg	[arg_1] subname ||| [arg_2] [arg_1]	count=1
function	of ast nodes the ||| ast nodes	count=1
arg	api ||| api	count=1
arg	traceback ||| etype evalue	count=1
class	list ||| list	count=1
function	profile ||| profile	count=3
class	of ||| manager	count=1
arg	text is a ||| text	count=1
class	all ||| manager	count=1
class	example some ||| interactive	count=1
arg	background ||| p cell	count=1
function	[function_1] cell ||| [function_2] [function_1]	count=1
function	[function] do non-blocking ||| [function] raw	count=1
class	tee ||| tee	count=1
arg	[arg_1] altmod ||| [arg_1] [arg_2]	count=1
function	escaped ||| escaped	count=1
arg	each element in args ||| args	count=1
function	pprint [function_2] ||| [function_2] [function_1]	count=2
function	[function_1] [function_2] ||| [function_1] latex [function_2]	count=16
function	delete a ||| xdel	count=1
class	for a re ||| interactive	count=1
function	translate lines escaped ||| tr	count=2
class	embedded ipython ||| embedded sphinx	count=1
function	set whether ||| set	count=1
arg	converts ||| txt errors skip_encoding_cookie	count=1
module	none if [module] transformer is ||| [module]	count=1
arg	[arg_1] level ||| [arg_2] [arg_1]	count=1
function	sequence of ast nodes ||| ast nodes	count=1
class	dict ||| magics manager	count=1
arg	through ||| strng start screen_lines	count=1
function_arg	getattr [arg_2] ||| [function_1] property [arg_2]	count=1
arg	[arg_1] returning ||| [arg_2] [arg_1]	count=2
function	filter for deprecation ||| deprecation	count=1
function	changed ||| changed	count=2
function	__all__ ||| all	count=1
arg	contents of a ||| fname	count=1
function	base pprint ||| pprint	count=1
function	factory that returns ||| pprinter factory	count=2
arg	cell as an ||| line cell	count=2
class	a format ||| formatter	count=1
function	[function_1] hook ||| [function_2] [function_1]	count=1
function	pager ||| pager	count=1
function	module ||| module	count=7
class	always defined ||| shim	count=1
module	[module] exception that ||| [module]	count=2
function_arg	[function_1] [arg_2] ||| [function_1] lineno session [arg_2]	count=4
arg	for an import line ||| line	count=1
function	activate pylab support ||| pylab	count=1
function	[function_1] unicode name ||| [function_1] latex [function_2]	count=2
arg	show_all is true ||| show_all	count=1
class	delete a variable from ||| interactive shell	count=1
class	object's information ||| arg decorator	count=1
function	display the ||| init	count=1
arg	path ||| cls path	count=1
module	the user if ||| core	count=1
function	blank ||| blank	count=1
module	pointer ||| lib	count=1
function_arg	[function_1] [arg_2] to ||| [function_1] [arg_2]	count=6
function	split [function_2] ||| [function_1] [function_2]	count=2
function	file ||| file	count=3
function	database output ||| output	count=1
class	optionally ||| ipython app	count=2
function	compute format [function_2] ||| [function_1] [function_2]	count=1
function	[function] commands ||| assign [function]	count=1
arg	last ||| s	count=1
class	ask ||| shell	count=1
arg	[arg_1] through a ||| [arg_2] [arg_1]	count=16
function	code or file specified ||| cmd line code	count=1
module	register ||| terminal pt_inputhooks	count=1
module	the parsing ||| core	count=1
class	[class_1] manager ||| [class_1] [class_2] init	count=4
class	for ||| script magics	count=1
module_class	the input buffer ||| core input splitter	count=1
arg	[arg_1] altmod name ||| [arg_2] [arg_1]	count=1
module	into the [module_2] ||| [module_1] [module_2]	count=2
function	process ||| process output	count=1
function_arg	[function_1] session ||| [arg_2] [function_1]	count=3
function	directory [function] if ||| ensure dir [function]	count=1
function	to the normal repr ||| repr	count=1
function_arg	nodes the [arg_2] ||| [arg_2] [function_1]	count=1
class	for ||| terminal interactive shell	count=4
module_class	[module_1] given ||| [module_1] [class_2]	count=4
class	show ||| pylab magics	count=1
module	current ||| magics	count=3
arg	name return its profiledir ||| name config	count=1
module_class	[module_1] transformed ||| [module_1] [class_2]	count=2
function	transform [function] commands - ||| [function]	count=1
arg	columnize ||| row_first	count=1
module	the currently active exception ||| core magics	count=1
function	handler [function_2] ||| [function_2] [function_1]	count=2
function	for deprecation warning ||| init deprecation warnings	count=2
class	re computation of ||| terminal	count=1
module_class	the oldest ||| core display hook	count=1
module	the python ||| core	count=1
arg	block [arg_2] ||| [arg_2] [arg_1]	count=2
class	configuration options have ||| interactive shell	count=1
function	unregister ||| unregister handler	count=1
function	[function_1] back to ||| [function_2] [function_1]	count=4
class	computation of ||| interactive shell	count=1
function	ast nodes ||| ast nodes	count=2
function	number of cpus in ||| cpus	count=1
function	ipy or ipynb ||| execfile ipy	count=1
function	read from ||| read	count=1
function_arg	color table [arg_2] ||| [function_1] [arg_2]	count=1
arg	for output ||| output	count=1
function	return ||| get	count=4
module	the enabled transformers in ||| core	count=1
function	extension in [function_2] ||| [function_2] [function_1]	count=8
function	or list ||| list	count=1
arg	block for output ||| output_prompt input_lines output	count=2
class	=> import modules for ||| autoreload	count=1
module_class	of history from ||| core history accessor	count=1
class	code ||| code magics	count=1
arg	prefix to a list ||| prefix delims	count=1
class	format ||| verbose tb	count=1
arg	string ||| strng	count=1
module	for use by the ||| core	count=1
arg	mod altmod name ||| mod altmod name	count=3
function	[function] logging ||| [function]	count=2
arg	a line [arg_2] ||| [arg_1] [arg_2]	count=1
arg	entry tuples ||| extracted_list	count=1
class	a ||| interactive shell	count=11
class	object ||| display hook	count=1
function	[function] completer for ||| [function]	count=1
function	print a ||| print	count=1
function	function ||| update function	count=1
module	return a dict of ||| core	count=1
module_class	the [class_2] ||| [module_1] input [class_2]	count=1
function	example some configuration options ||| update	count=1
function	compute [function_2] ||| [function_2] [function_1]	count=2
module	the current ||| core magics	count=6
arg	text is a simple ||| text	count=1
function	optimal ||| optimal	count=1
function	[function_1] files into ||| [function_2] [function_1]	count=1
arg	files with an offset ||| pager	count=1
function	new wx app or ||| app wx	count=1
function_arg	[function_1] line returning ||| [function_1] [arg_2]	count=1
function	wrap multiple [function_2] ||| [function_2] [function_1]	count=2
function	in the ||| in	count=1
function	print [function] ||| raw print [function]	count=1
function	file as a list ||| file	count=1
arg	directory pkg_path we get ||| pkg_path	count=1
arg	password and salt ||| passphrase algorithm	count=1
arg	send a line ||| line	count=2
function	create ||| create	count=1
function	blank marquee ||| marquee	count=1
function	magics ||| magics	count=1
arg	current ||| index	count=1
class	a ||| terminal interactive shell	count=2
function	page as ||| page	count=1
function	config file ||| config file	count=2
function	list ||| default	count=1
function_arg	[function_1] compatible ||| [function_1] [arg_2]	count=3
function	of a named file ||| file	count=1
function	with profiler used ||| with profiler	count=2
module	the source ||| core	count=1
arg	piping through a ||| screen_lines pager_cmd	count=2
function_arg	class [arg_2] ||| [arg_2] [function_1]	count=1
function	object that [function] maps ||| bind [function]	count=1
arg	or not [arg] has been ||| [arg]	count=1
function	[function_1] event loop ||| [function_2] [function_1]	count=4
class	overridden from [class_2] ||| [class_2] [class_1]	count=8
function	the state of hooks ||| state	count=1
class	set ||| interactive shell	count=1
module	the namespace ||| core	count=1
function	path to ||| path	count=1
arg	group of variables into ||| variables	count=1
arg	code ||| source filename	count=1
function	check to see if ||| check	count=1
class	a re ||| interactive	count=1
function	get input and ||| get range	count=2
function	return html ||| repr html	count=2
function	a property ||| update property	count=1
arg	string piping through a ||| strng start screen_lines pager_cmd	count=1
function	transform assignment [function_1] [function_2] commands (e g files ||| core assign [function_1] [function_2]	count=1
function	a handler by its ||| handler by	count=2
function	ends in [function_2] ||| [function_1] [function_2]	count=4
module	with [module] exception that ||| [module]	count=1
module	[module] strip ||| [module]	count=1
function	thread to safely stop ||| stop	count=1
function	transformers ||| transforms	count=1
function	for example ||| update	count=1
class	block and ||| demo	count=1
module	called from the main ||| core	count=1
arg	print information about ||| parameter_s	count=1
function	[function_1] arguments ||| [function_1] [function_2]	count=3
function	print a figure to ||| print figure	count=1
arg	function ||| func	count=2
module	update the ||| core	count=1
class	fill in ||| filler	count=1
function	to catch ||| catch	count=1
class	ipython extensions in ipythonapp ||| interactive shell app	count=1
function	[function_1] id currently ||| [function_2] [function_1]	count=4
module	the main thread ||| core	count=1
function	event loop running ||| event loop running	count=6
arg	for compatible ||| etype evalue etb	count=1
function	factory that returns a ||| pprinter factory	count=2
arg	part is ||| part	count=1
function	on the name ||| name	count=1
function	split user [function_2] ||| [function_2] [function_1]	count=1
module	user has set the ||| core	count=1
class	split ||| completion splitter	count=1
function	return the format ||| format	count=1
class	database ||| history manager	count=2
function	current error state ||| err state	count=1
function	cursor used for introspection ||| cursor	count=1
function	[function_1] builtin and ||| [function_2] [function_1]	count=1
arg	code for caching ||| code	count=1
module	always defined ||| utils	count=1
function_arg	execute a block ||| execute block name	count=2
class	object ||| interactive shell	count=1
function_arg	[function_1] executing cmd ||| [arg_2] [function_1]	count=3
function	a handler ||| handler	count=2
function	[function_1] paragraphs ||| [function_1] [function_2]	count=1
class	ipython into ||| interactive shell	count=1
function	show ||| show	count=2
arg	line of input ||| line	count=2
function	banner ||| init banner	count=1
arg	variables into ||| variables interactive	count=1
class	handlers ||| prefilter manager	count=1
function	[function_1] paragraphs ||| [function_2] [function_1]	count=1
class	is always ||| shim module	count=1
function	transform ||| transform	count=1
function	abbreviated version of cwd ||| cwd	count=1
class	command-line ||| interactive shell app	count=1
module	in the ||| core	count=2
arg	not [arg] has ||| [arg]	count=1
class	for example some ||| shell	count=1
function	script [function_2] ||| [function_2] [function_1]	count=1
class	computation ||| shell	count=1
function	exists ||| exists	count=1
function	[function_1] figure ||| [function_1] [function_2] fig fmt bbox_inches	count=1
class	of input history to ||| history	count=1
module	of the same structure ||| core	count=1
class	formatter for a ||| base formatter	count=2
module	optionally ||| terminal	count=1
function	[function_1] id currently ||| [function_1] [function_2]	count=4
arg	[arg_1] through ||| [arg_2] [arg_1]	count=16
function	[function_1] module in ||| [function_2] [function_1]	count=2
class	options have ||| terminal	count=1
function	dict into jsonable dict ||| jsonable	count=1
function	default print function used ||| default pprint	count=1
function	if database output ||| output	count=1
function	factory that returns ||| seq pprinter factory	count=1
function	[function_1] at ||| [function_1] [function_2]	count=3
class	always ||| module	count=1
arg	to columnize a list ||| row_first	count=1
function	returning [function] with ||| data and [function]	count=1
function	string or list ||| list	count=1
arg	find/create a ||| cls profile_dir config	count=1
function	but for ipy ||| ipy	count=1
arg	code will be ||| user_module user_ns	count=1
module_class	from the given ||| core event manager	count=1
function	ranges as used by ||| range by	count=1
module	name buf = ||| lib	count=1
class	a re computation of ||| terminal interactive	count=1
function	back [function_2] ||| [function_1] latex name [function_2]	count=1
function	some ||| update	count=1
function	style name we ||| name	count=1
module	as ||| utils	count=2
function	turn ||| code ranges	count=1
function	shortcuts for ||| shortcuts	count=1
function	embedded ipython this ||| embedded	count=1
function_arg	name for [arg_2] ||| [function_1] [arg_2]	count=3
class	a re computation ||| interactive shell	count=1
function_arg	[function_1] code ||| [function_1] [arg_2]	count=1
arg	associated with [arg_2] ||| init [arg_2] [arg_1]	count=2
arg	piping through a pager ||| data start screen_lines pager_cmd	count=1
function	get a ||| get	count=3
class	have been [class] by ||| [class]	count=1
function	exception ||| exception	count=1
arg	uniq_stable [arg] -> ||| [arg]	count=1
function	code insertion ||| mci	count=1
class	of the ||| interactive	count=1
function	but for ipy ||| execfile ipy	count=1
class	from the ||| terminal interactive shell	count=2
function	[function_1] hook ||| [function_1] [function_2]	count=1
function	getattr to use ||| getattr	count=1
class	configuration options ||| interactive shell	count=1
function_arg	code of [arg_2] ||| [arg_2] [function_1]	count=3
function	default to a common ||| default	count=1
arg	group ||| group	count=1
module	store [module] macro ||| [module]	count=1
function	with [function_2] ||| [function_1] [function_2]	count=4
function	initialize all user-visible namespaces ||| init	count=1
class	signature from ||| signature	count=1
function	add this [function_2] ||| [function_1] [function_2]	count=1
function	os system on ||| system	count=1
function	ipython profile ||| profile	count=1
arg	escape [arg_2] ||| [arg_1] [arg_2]	count=1
module	the input source ||| core	count=2
module_class	from the [class_2] ||| [module_1] [class_2]	count=2
arg	scheme ||| scheme	count=1
function	sys module ||| sys module	count=2
function	session [function_2] ||| [function_1] [function_2]	count=2
arg	re-set ||| key orig	count=1
function	pasted lines until ||| pasted lines	count=1
function	flag ||| flag	count=1
arg	cocoa nsapp ||| context	count=1
function	event loop ||| event loop	count=6
class	logging ||| logging	count=2
function_arg	load_next [arg_2] ||| [function_1] [arg_2]	count=4
arg	block ||| block name	count=1
arg	at runtime ||| gui import_all welcome_message	count=1
module	execute [module] line (regardless ||| [module]	count=1
module	the same ||| core	count=1
function	directory to which ||| dir	count=1
function	is history previous ||| next history	count=1
function	[function_1] lines ||| [function_2] [function_1]	count=2
arg	code ||| source	count=1
function	active [function] scheme ||| [function]	count=1
function	[function_1] and clear ||| [function_2] [function_1]	count=2
class	is always ||| module	count=1
module	simply execute [module] line ||| [module]	count=1
function	[function_1] system ||| core assign [function_1] [function_2]	count=1
class	display the ||| app	count=1
module	through pager the ||| core	count=1
function	files from ipythonapp exec_files ||| exec files	count=1
class	transformed [class_2] ||| [class_1] [class_2]	count=1
function_arg	[function_1] func ||| [arg_2] [function_1]	count=1
function	[function_1] loop ||| [function_2] [function_1]	count=3
function_arg	[function_1] func ||| [function_1] [arg_2]	count=1
function_arg	and [arg_2] ||| [arg_2] [function_1]	count=1
function_arg	format [arg_2] ||| [function_1] lineno session [arg_2]	count=1
function	sys [function] ||| [function] raw	count=1
arg	a line returning ||| line continue_prompt	count=2
arg	convert [arg] an iterable ||| [arg]	count=1
class	some ||| shell	count=1
module	of the way and ||| core	count=1
module	about the ||| core	count=2
function	select ||| select	count=1
function	a pretty printer for ||| for	count=1
function	3-tuple mode code insertion ||| mci	count=1
function_arg	user [arg_2] ||| [function_1] module [arg_2]	count=3
function	the script ||| script	count=1
class	a re computation ||| terminal interactive shell	count=1
function	[function_1] the status ||| [function_2] [function_1]	count=1
function	save the [function_2] ||| [function_1] sys module [function_2]	count=4
arg	a block ||| block name	count=1
class	of the ||| interactive shell	count=1
function	pinfo 2 /psearch call ||| make help call	count=1
module	the content ||| core	count=1
function	token at [function_2] ||| [function_1] [function_2]	count=1
arg	a string ||| s	count=1
arg	like safe_execfile but ||| fname shell_futures raise_exceptions	count=1
arg	tokens ||| tokens	count=1
arg	the last ||| s	count=1
module	on ||| lib	count=5
class	been [class] by ||| [class]	count=1
function_arg	for the [function_1] [arg_2] ||| [function_1] [arg_2]	count=1
arg	whether path is ||| path	count=1
class	a re computation ||| interactive	count=1
arg	is_type(obj typestr_or_type) verifies ||| typestr_or_type	count=1
function	get info about ||| get session info	count=1
class	traceback a list to ||| syntax tb	count=1
class	ask for a ||| terminal	count=1
class	functions callable without having ||| auto magics	count=2
module_class	the current [class_2] ||| [module_1] [class_2]	count=2
function	hash from ||| hash	count=1
module	auto-define ||| core	count=1
function	render latex to ||| latex to	count=2
function	[function_1] warning ||| [function_2] [function_1]	count=4
arg	block for ||| input_prompt	count=1
arg	pager piping through a ||| data start screen_lines pager_cmd	count=1
function	for example some ||| update	count=1
function	is a ||| is	count=1
function	useful information about ipython ||| sys info	count=2
function	delete a variable ||| xdel	count=1
function	import the module ||| find module	count=1
class	[class_1] reference ||| [class_2] [class_1]	count=2
function	a class ||| update class	count=1
function	ask for a ||| update	count=1
class	a display [class_2] ||| [class_2] [class_1]	count=1
function	optionally display ||| init	count=1
arg	in args ||| args	count=1
arg	a target name ||| target	count=1
function	png representation of an ||| png	count=1
function	doctest ||| float doctest	count=1
function	prompts from a block ||| strip prompts	count=1
function_arg	[function_1] to fit ||| [function_1] [arg_2]	count=3
function	current layout option ||| layout options	count=1
class	information ||| arg decorator	count=1
function	wrap multiple paragraphs to ||| wrap paragraphs	count=1
function	remove leading [function_2] ||| [function_2] [function_1]	count=1
class	string [class] allows quick ||| [class]	count=1
function	update the status ||| update status	count=3
module	whether the ||| core	count=1
function	to stdout ||| stdout	count=1
function_arg	[function_1] at runtime ||| [function_1] [arg_2]	count=2
function	in a [function_2] ||| [function_1] [function_2]	count=4
function	status [function_2] ||| [function_1] [function_2]	count=1
function	a list ||| list	count=1
class	find ||| prefilter manager	count=1
function	[function_1] nodes ||| [function_2] [function_1]	count=3
arg	pkg_path we get the ||| pkg_path	count=1
function	cpus in the ||| num cpus	count=1
function_arg	to format [arg_2] ||| [function_1] lineno session [arg_2]	count=1
function	set a ||| set	count=1
function	call from ||| help call	count=1
module	return the current ||| core magics	count=2
class	the parent class to ||| terminal	count=1
module	a class ||| utils	count=1
class	tb ||| tb	count=1
function	[function_1] hash ||| [function_1] [function_2]	count=4
function	try to fix ||| fix frame records	count=1
module	for example some ||| terminal	count=1
function	pdf representation of an ||| pdf	count=1
class	optionally display ||| terminal ipython	count=1
module	one block and ||| lib	count=1
arg	run a cell via ||| cell	count=1
module	one ||| lib	count=1
function	built-in [function] ||| get display [function]	count=1
function	in [function_2] ||| [function_1] [function_2]	count=5
class	example ||| terminal	count=1
function	print function used if ||| pprint	count=1
function	named module ||| module	count=2
function	print a [function_2] ||| [function_2] [function_1]	count=4
function	item number or ||| get or	count=1
function	inputhook ||| inputhook	count=2
function	shell aliases to ||| aliases	count=1
class	re ||| terminal	count=1
class	for ||| terminal interactive	count=2
class	signature from the ||| signature	count=1
module	calls the enabled ||| core	count=1
function_arg	find module [arg_2] ||| [arg_2] [function_1]	count=2
function	of shell aliases to ||| default aliases	count=1
arg	[arg_1] for output ||| [arg_2] [arg_1]	count=2
function	list [function_2] ||| [function_1] bundled [function_2]	count=1
function	[function_1] input and ||| [function_1] [function_2]	count=1
function	data dict ||| data	count=1
function_arg	data [arg_2] ||| [arg_2] [function_1]	count=9
module	the state of ||| core	count=1
function	class ||| update class	count=1
function	info about a ||| info	count=1
function	script args ||| script args	count=2
function	strings as input ||| strings	count=1
class	having ||| auto	count=2
arg	through a pager after ||| start screen_lines	count=1
function	the encoding ||| encoding	count=1
class	database using ||| history accessor	count=1
arg	compatible with sys excepthook ||| etype evalue etb	count=1
function_arg	execute a [arg_2] ||| [function_1] [arg_2]	count=1
arg	through ||| screen_lines	count=2
function	of default arguments ||| default arguments	count=2
function	characters back [function_2] ||| [function_1] latex [function_2]	count=4
arg	[arg_1] fullname ||| [arg_1] [arg_2]	count=2
function	optionally ||| init	count=1
function	javascript representation of an ||| javascript	count=1
module	a sequence ||| utils	count=1
arg	a magic ||| magic_name magic_kind	count=1
class	a display [class_2] ||| [class_1] [class_2]	count=1
function	tip data from an ||| tip	count=1
arg	cell via a ||| cell	count=1
arg	magic_kind ||| magic_kind	count=1
function	safe version ||| safe	count=2
function	store it in a ||| store	count=1
function	get [function_2] ||| [function_2] [function_1]	count=12
function	profile dir ||| profile dir	count=2
function	the commit hash ||| commit hash	count=2
function	prompt ||| prompt	count=1
function_arg	[function_1] called by ||| [arg_2] [function_1]	count=1
arg	string piping through ||| screen_lines pager_cmd	count=1
class	inputsplitter ||| input splitter	count=2
module	on the ||| core	count=1
class	a re ||| interactive shell	count=1
function	name ||| mirror name	count=1
class	add ||| argument group	count=1
module	ending with [module] exception ||| [module]	count=1
function	editor at ||| editor	count=1
function	clear the output ||| clear	count=1
arg	name return ||| name config	count=1
function	compute format [function_2] ||| [function_2] [function_1]	count=1
arg	[arg_1] (i ||| [arg_1] [arg_2]	count=1
function	assignment [function] commands ||| assign [function]	count=1
module	the inspector ||| core	count=1
function	the commit [function_2] ||| [function_1] [function_2]	count=4
arg	input source ||| src	count=1
function	just display ||| display	count=1
class	optionally display ||| terminal ipython app	count=1
function_arg	base pprint [arg_2] ||| [function_1] [arg_2]	count=1
arg	and path ||| cls path	count=1
class	in history and ||| history	count=1
function	to html ||| to html	count=2
function	find the [function_1] [function_2] ||| [function_2] [function_1]	count=3
arg	name buf ||| name buf	count=2
function	a profile [function_2] ||| [function_1] [function_2]	count=3
function	in a blank ||| blank	count=1
function	get ||| get	count=14
function	format data dict ||| format data	count=1
function	ignore ||| ignore	count=1
class	configuration options ||| terminal interactive shell	count=1
class	unload ||| extension manager	count=1
function	ipy or ipynb files ||| safe execfile ipy	count=1
module	be called from the ||| core	count=1
function	default transformers ||| transformers	count=1
function_arg	default arguments [arg_2] ||| [arg_2] [function_1]	count=3
function	define [function_2] ||| [function_2] [function_1]	count=3
class	configuration ||| terminal	count=1
function	get ||| get session	count=1
function	[function_1] to unicode ||| [function_1] [function_2]	count=3
function	auto-define ||| default	count=1
function	pasted lines ||| pasted lines	count=1
function	next command line ||| set next	count=1
function_arg	info about [arg_2] ||| [function_1] [arg_2]	count=1
function	information about ||| info	count=2
function	initial spaces in a ||| ini spaces	count=2
arg	metadata to ||| metadata	count=1
function	a pprint ||| pprint	count=1
class	for a re ||| terminal interactive shell	count=1
module	a cursor at the ||| core	count=1
function	return a repr of ||| repr	count=1
function	report summary for ||| group report	count=1
class	active profile directory ||| profile dir	count=2
function	type [function] ||| [function] exception	count=3
module	changed ||| terminal	count=1
function	[function_1] dir and ||| [function_2] [function_1]	count=2
module	a sequence of paths ||| utils	count=1
function	getattr to ||| getattr	count=1
function	update ||| update	count=2
module	string of range for ||| magics	count=1
function	active ||| active	count=1
function_arg	or [arg_2] ||| [function_1] string [arg_2]	count=1
arg	given backend and set ||| backend	count=1
function	to unicode name ||| name matches	count=2
function	repr of an ||| repr	count=1
class	info system ||| basic	count=1
function	find absolute ||| find	count=1
class	a sequence of ||| interactive shell	count=1
class	return a ||| manager	count=1
arg	frontend ||| arg_s	count=1
function	[function_1] list ||| [function_1] [function_2]	count=1
class	computation of ||| interactive	count=1
arg	salt for use in ||| passphrase algorithm	count=1
function	name this does ->\sqrt ||| name	count=1
class	configuration options have ||| interactive	count=1
function	for ipy or ipynb ||| ipy	count=1
function	this is sys excepthook ||| excepthook	count=1
function	[function_1] files ||| [function_1] [function_2]	count=1
function_arg	[function_1] line ||| [function_1] [arg_2]	count=2
arg	[arg_1] screen_lines ||| [arg_2] [arg_1]	count=1
module	in the system as ||| utils	count=1
class	return ||| magics manager	count=1
arg	parses the line ||| line	count=1
module	and close log file ||| core	count=1
function	type of ||| type	count=1
function	[function_1] profiles ||| [function_1] bundled [function_2]	count=1
function_arg	unregister a [arg_2] ||| [arg_2] [function_1]	count=3
function	list ||| list	count=3
function	return the number ||| num	count=3
function	functions of a property ||| property	count=1
module	a class ignore ||| utils	count=1
module	for a re ||| terminal	count=1
function	with ?/?? ||| help	count=1
function	a copy ||| copy	count=1
arg	string piping through a ||| start screen_lines pager_cmd	count=1
function_arg	tip data [arg_2] ||| [function_1] [arg_2]	count=1
class	functions ||| magics	count=1
module_class	[module_1] tb reference ||| [module_1] [class_2]	count=2
function_arg	#! [arg_2] ||| [function_1] [arg_2]	count=2
function	add this ||| add	count=3
class	input ||| input splitter	count=4
class	having to type ||| auto magics	count=2
module	ending with [module] ||| [module]	count=1
function	multiple paragraphs ||| paragraphs	count=1
arg	and ||| source	count=1
arg	pager piping through a ||| start screen_lines pager_cmd	count=1
function	code or file specified ||| line code	count=1
class	[class_1] manager ||| [class_2] [class_1]	count=4
function_arg	[function_1] api ||| [arg_2] [function_1]	count=1
class	call ||| crash handler	count=1
arg	name [arg_2] ||| [arg_2] [arg_1]	count=5
function	the generate_tokens() [function] requires ||| generate [function]	count=1
function	3-tuple mode code insertion ||| get mci	count=1
class	with various ||| display hook	count=1
function	[function_1] in ||| [function_2] [function_1]	count=4
class	breakable ||| pretty printer	count=1
module	lines of ||| core	count=1
function_arg	transform a [arg_2] ||| [arg_2] [function_1]	count=2
function	module in this ||| module	count=1
arg	salt for use ||| passphrase algorithm	count=1
function	is history previous unlike ||| next history	count=1
class	delete a variable from ||| interactive	count=1
function_arg	data [arg_2] ||| [function_1] data metadata [arg_2]	count=1
function	[function_1] using tkinter ||| [function_2] [function_1]	count=6
class	this thread ||| history saving thread	count=2
module	[module] an integer ||| [module]	count=3
function_arg	[function_1] [arg_2] ||| [function_1] property [arg_2]	count=4
arg	mod altmod name buf ||| mod altmod name buf	count=1
class	optionally display the ||| ipython	count=1
function	[function_1] figure ||| [function_2] [function_1]	count=2
function	item number or ||| or	count=1
module	currently ||| magics	count=1
function	set up matplotlib to ||| matplotlib	count=1
function	remove leading ||| leading	count=1
class	pointer back one block ||| demo	count=1
function	current [function_2] ||| [function_2] [function_1]	count=4
class	python ||| python	count=1
function	token [function_2] ||| [function_2] [function_1]	count=6
arg	[arg_1] [arg_2] ||| [arg_1] [arg_2]	count=92
module	the splitter ||| core	count=1
function	function ||| function	count=1
module	equivalent of ||| utils	count=1
module	unique elements [module] the input ||| [module]	count=1
arg	[arg] has ||| [arg]	count=2
module	by dict_key_matches matching the ||| core	count=1
class	get ||| prefilter manager	count=2
module	change the ||| core	count=1
module	have changed ||| terminal	count=1
module	the input ||| core	count=2
class	or dead job ||| job	count=1
function_arg	[function_1] scheme ||| [arg_2] [function_1]	count=1
class	for a re ||| interactive shell	count=1
function_arg	given [arg_2] ||| [function_1] file name [arg_2]	count=1
module_class	[module_1] ipython input ||| [module_1] [class_2]	count=2
function	[function_1] of newly ||| [function_2] [function_1]	count=3
function	directory [function] if it ||| ensure dir [function]	count=1
arg	[arg_1] output token ||| [arg_1] [arg_2]	count=2
module	and dropped the ||| core magics	count=1
arg	cell via a shell ||| cell	count=1
function	default to ||| default	count=1
class	example some ||| interactive shell	count=1
arg	or pyside2 [arg] submodules supports ||| [arg]	count=1
class	=> ||| autoreload magics	count=2
arg	[arg_1] subname ||| [arg_1] [arg_2]	count=1
function_arg	optimal info [arg_2] ||| [arg_2] [function_1]	count=3
function	print ||| print	count=2
function	that make an ipython ||| make	count=1
function	render latex ||| latex	count=1
class	history manager ||| history manager init	count=1
class	configuration options have ||| terminal interactive	count=1
function	profiles ||| profiles	count=1
arg	current ||| parameter_s	count=1
class	re computation of ||| terminal interactive	count=1
arg	import line ||| line	count=1
function_arg	[function_1] code for ||| [arg_2] [function_1]	count=1
function	config [function_2] ||| [function_1] [function_2]	count=5
arg	called ||| start stop raw	count=1
arg	if obj is ||| obj name	count=1
arg	an object ||| obj	count=4
function	the [function_1] [function_2] ||| [function_2] [function_1]	count=16
arg	to a magic ||| magic_name	count=1
function	for ipy ||| execfile ipy	count=1
function	pasted lines until the ||| get pasted lines	count=1
function_arg	call [arg_2] ||| [function_1] [arg_2]	count=2
module	back one block ||| lib	count=1
function	entire ||| all	count=1
arg	warning_class [arg_2] ||| [arg_2] [arg_1]	count=1
module	the python code ||| core	count=1
module	return a dict ||| core	count=1
arg	for compatible with sys ||| etype evalue etb	count=1
class	example some ||| terminal	count=1
function	which user ||| user	count=1
function	import ||| import	count=1
arg	show_all is ||| show_all	count=1
function_arg	[function_1] mpl ||| [function_1] backend gui [arg_2]	count=1
module	return ||| core	count=2
arg	existing ||| ipython_dir	count=1
arg	source and ||| line_num source	count=1
function	wx [function_2] ||| [function_2] loop running [function_1]	count=1
arg	[arg_1] shell ||| init [arg_2] [arg_1]	count=1
function	dir by ||| dir by	count=2
function	print a [function_2] ||| [function_1] [function_2] fig fmt bbox_inches	count=4
function	wx event loop running ||| event loop running wx	count=1
class	[class] none if ||| coroutine [class]	count=1
function	returns the strings in ||| get	count=1
function	a line ||| line info	count=1
class	info system and exception ||| basic	count=1
module	to ||| core	count=1
function_arg	call for [arg_2] ||| [function_1] [arg_2]	count=4
class	find an object in ||| interactive	count=1
arg	subname ||| subname	count=1
class	this thread ||| saving thread	count=1
arg	prefix to a list ||| prefix	count=1
class	configuration options have ||| terminal	count=1
function	[function_1] [function_2] ||| [function_1] [function_2]	count=776
class	display [class_2] ||| [class_2] [class_1]	count=2
arg	dict for an ||| include exclude	count=1
function	remove leading [function_2] ||| [function_1] [function_2]	count=1
function	sort ||| sort	count=1
function_arg	macro parameters ||| macro name themacro	count=1
function	[function_1] style name ||| style [function_1] [function_2]	count=1
function	multiple paragraphs to ||| paragraphs	count=1
function	copy ||| copy	count=2
function_arg	[function_1] and metadata ||| [arg_2] [function_1]	count=1
arg	retrieve an info dict ||| info	count=1
function	figure ||| figure	count=3
class	of ||| terminal interactive	count=1
class	traceback ||| verbose tb	count=1
module	the seek pointer ||| lib	count=1
function	[function_1] back ||| [function_2] [function_1]	count=4
function	load_next ||| load next	count=1
module_class	the interactive ||| terminal interactive shell	count=1
class	the ||| app	count=1
function	[function_1] nodes the ||| [function_1] [function_2]	count=3
arg	of executing cmd in ||| cmd	count=1
module	back one block and ||| lib	count=1
arg	[arg_1] handler which ||| [arg_2] [arg_1]	count=1
arg	dict for ||| include exclude	count=1
function	handler ||| handler	count=2
class	input buffer and ||| input splitter	count=2
arg	[arg] as ||| line [arg]	count=2
function	number or ||| get or	count=1
function	number of cpus in ||| num cpus	count=1
module_class	[module_1] display hook ||| [module_1] [class_2]	count=8
function	of history [function] into ||| extract hist [function]	count=1
class	of ||| terminal interactive shell	count=2
arg	and path ||| path	count=1
function	deprecation ||| deprecation	count=1
function	commit [function_2] ||| [function_2] [function_1]	count=4
arg	parameters ||| name themacro	count=1
module	sys stdout/err as ||| utils	count=1
module	currently active ||| magics	count=1
arg	the current ||| parameter_s	count=1
class	execution of ||| execution magics	count=1
function	[function_1] figure to ||| [function_2] [function_1]	count=1
function	a style name we ||| name	count=1
function_arg	[function_1] [arg_2] raw input ||| [function_1] [arg_2]	count=1
class	a given job ||| background job manager	count=1
module	set the delimiters ||| core	count=1
function	cache ||| cache	count=2
module	calls the ||| core	count=1
arg	[arg] seek ||| [arg]	count=2
function	the pprint ||| pprint	count=1
function	a code object ||| run code	count=1
function	to fix ||| fix frame records	count=1
class	of ||| terminal	count=1
arg	of at most one ||| rgxin rgxout fmtin	count=1
module	the current dir on ||| core magics	count=1
module	of ||| core	count=8
function	object ||| do	count=1
class	whole ||| inspector	count=1
function_arg	name for code ||| code name code	count=2
function	pprint function for ||| pattern pprint	count=1
module	[module] resulting ||| [module]	count=2
function	[function_1] ; ||| [function_2] [function_1]	count=1
function	prompts from ||| strip prompts	count=2
arg	[arg_1] [arg_2] instance ||| [arg_2] [arg_1]	count=2
function	default shutdown [function_2] ||| [function_2] [function_1]	count=1
function	an alias but ||| alias	count=1
function	the status [function_2] ||| [function_2] [function_1]	count=1
function_arg	paragraphs to [arg_2] ||| [arg_2] [function_1]	count=1
module	logging ||| core magics	count=1
function_arg	[function_1] [arg_2] ||| [function_1] module [arg_2]	count=12
function	ipy or ipynb ||| safe execfile ipy	count=1
function	pylab ||| pylab	count=1
function	in the [function_2] ||| [function_2] [function_1]	count=1
function	svg representation of an ||| svg	count=1
module	cursor at the given ||| core	count=1
function	from [function_2] ||| core assign [function_1] [function_2]	count=1
function	config files into profile ||| config files	count=1
class	the ||| shell	count=1
function	[function_1] characters back ||| [function_2] [function_1]	count=4
function	from internal ||| reset	count=1
arg	replace ||| old new	count=1
arg	of obj if it ||| obj	count=1
function	[function_1] arguments of ||| [function_2] [function_1]	count=3
module	set the default figure ||| core	count=1
class	a ||| terminal interactive	count=1
function	call ||| make help call	count=1
arg	matching input ||| prompt_re initial_re turnoff_re	count=1
function	inputhook for ||| inputhook	count=1
function	and message without a ||| show	count=1
class	user_ns with various ||| display	count=1
function	set _ip point ||| set	count=1
arg	a color formatted string ||| value elist tb_offset	count=1
function_arg	add a [arg_2] ||| [arg_2] [function_1]	count=1
arg	cocoa ||| context	count=1
class	extensions in ipythonapp ||| interactive shell app	count=1
class	move the seek pointer ||| demo	count=1
arg	the line and returns ||| line	count=1
class	always ||| shim	count=1
module_class	[module_1] [class_2] ||| [module_1] input [class_2]	count=1
function	of a class and ||| update class	count=1
function	once ||| timing	count=1
function	/psearch call ||| make help call	count=1
class	display ||| display	count=3
function_arg	user [arg_2] ||| [arg_2] [function_1]	count=3
function	exit ||| exit	count=1
function	default shutdown [function_2] ||| [function_1] [function_2]	count=1
function	[function_1] name ||| [function_2] [function_1]	count=5
function	ends in [function_2] ||| [function_2] [function_1]	count=4
class	for a ||| interactive	count=1
class	some configuration ||| shell	count=1
function	the string to stdout ||| stdout	count=1
function	ast ||| ast	count=3
class	object in ||| interactive	count=1
module	of commit ||| utils	count=1
module	move the seek ||| lib	count=1
arg	name ||| name config	count=1
function	store it ||| store	count=1
function	return which [function] is ||| loaded [function]	count=1
function	translate ||| tr	count=1
module	at the given position ||| core	count=1
function	to find what ||| find	count=1
function	method calls to catch ||| catch	count=1
module	the enabled ||| core	count=1
class	given job ||| job	count=1
arg	mirrored module ||| fullname	count=1
function	cpus in ||| num cpus	count=1
class	input buffer and associated ||| ipython input splitter	count=1
class	for example some ||| terminal interactive shell	count=1
function	[function_1] indentation ||| [function_2] [function_1]	count=1
class	color schemes ||| color scheme	count=2
module	a statement through the ||| core	count=1
class	input to the transformer ||| transformer	count=1
function	print a figure ||| print figure	count=1
arg	passed ||| arg_str opt_str	count=1
function	qt4 [function_2] ||| [function_2] [function_1]	count=4
arg	the given class ||| cls	count=1
module	strings matching 'pattern' a ||| utils	count=1
function	[function_1] tip data ||| [function_1] [function_2]	count=2
module	creates a ||| utils	count=2
module	the given list of ||| utils	count=1
class	color [class_2] ||| [class_1] [class_2]	count=1
arg	callable ||| func	count=1
module	flexibility and dropped the ||| core	count=1
module	a string a ||| utils	count=1
arg	warning_class [arg_2] ||| external decorators assert warns [arg_1] [arg_2]	count=1
function	write the format data ||| write format data	count=1
arg	piping through ||| data start screen_lines pager_cmd	count=1
arg	session ||| session start stop	count=1
arg	with ||| s	count=1
function	[function_1] to unicode ||| [function_1] latex name [function_2]	count=2
arg	find/create ||| cls profile_dir config	count=1
function	print function used ||| pprint	count=1
class	a re computation of ||| terminal	count=1
function	[function_1] blanks ||| [function_1] [function_2]	count=1
class	computation ||| terminal	count=1
arg	exception ||| exc_tuple	count=1
module	return true for ||| utils	count=1
function_arg	register a [arg_2] ||| [arg_2] [function_1]	count=3
module	the format for ||| core	count=1
class	ask for ||| shell	count=1
module	with [module] exception ||| [module]	count=1
function	[function_1] an alias ||| [function_2] [function_1]	count=1
module	for example some configuration ||| terminal	count=1
function	a string or list ||| list	count=1
function	pprint for ||| exception pprint	count=1
module	string to [module] default ||| [module]	count=1
arg	line and returns a ||| line	count=1
class	in ||| base formatter	count=1
arg	group ||| group name	count=1
function_arg	[function_1] magic_kind ||| [function_1] [arg_2]	count=1
class	job ||| background job	count=2
function	a safe version ||| safe	count=2
function	matplotlib and inline figure ||| matplotlib	count=1
class	options have changed ||| shell	count=1
function	from a style ||| from	count=1
arg	single line ||| line	count=1
arg	or pyside2 [arg] ||| [arg]	count=1
class	a given job ||| job manager	count=1
function	commit hash from ||| commit hash	count=2
module	type the ||| core magics	count=1
function	a figure ||| figure	count=1
function	the module ||| module	count=1
function	a builtin and save ||| builtin	count=1
class	ask for a re ||| shell	count=1
function	log ||| log	count=2
class	a re computation ||| terminal interactive	count=1
function	return which [function] is loaded ||| loaded [function]	count=1
function	format data ||| format data	count=4
module	optionally display the ||| terminal	count=1
arg	line ||| line	count=9
module	example ||| terminal	count=1
module	of the ||| terminal	count=1
class	add a format ||| formatter	count=1
class	for a given job ||| job	count=1
arg	event ||| event	count=2
arg	warning_class is thrown ||| warning_class	count=1
class	computation ||| interactive shell	count=2
function	be ||| init	count=2
module	to run the ||| lib	count=1
arg	path ||| path	count=5
arg	to columnize a ||| row_first	count=1
function	in a [function_2] ||| [function_2] [function_1]	count=4
function	status ||| status	count=2
arg	upgrade the ||| old new	count=1
class	for a re computation ||| interactive shell	count=1
class	some configuration options ||| terminal interactive	count=1
class	example some configuration options ||| shell	count=1
class	transformed [class] ||| coroutine [class]	count=1
function	fix ||| fix	count=1
function_arg	[function_1] object ||| [function_1] property [arg_2]	count=1
class	initialize ||| interactive shell	count=2
arg	a single line ||| line	count=1
function_arg	inputhook for [arg_2] ||| [arg_2] [function_1]	count=2
function	[function_1] a list ||| [function_1] [function_2]	count=1
class	execution ||| execution	count=1
module	the currently ||| core magics	count=2
arg	dict ||| include exclude	count=1
arg	?) ||| pattern raw search_raw output	count=1
class	re computation of ||| terminal interactive shell	count=1
module	some configuration ||| terminal	count=1
function	format [function_2] ||| [function_2] [function_1]	count=7
function	message ||| show	count=1
class	and ||| demo	count=1
arg	of class [arg] ||| [arg]	count=3
arg	pkg_path ||| pkg_path	count=1
class	optionally ||| ipython	count=1
function	print [function] otherwise ||| raw print [function]	count=1
class	create [class_1] [class_2] ||| [class_1] [class_2]	count=1
function	encoding ||| encoding	count=2
function	[function_1] event ||| [function_2] loop [function_1]	count=1
function	call from a ||| call	count=1
class	any python ||| python	count=1
arg	screen_lines ||| screen_lines	count=1
function	on readline is history ||| next history	count=1
function	exception call ||| call	count=1
class	of ||| magics	count=1
class	some configuration ||| terminal interactive	count=1
function_arg	comment or [arg_2] ||| [function_1] string [arg_2]	count=1
function	store ||| store inputs	count=2
function	output ||| output	count=3
function_arg	[function_1] [arg_2] ||| [function_1] active scheme scheme [arg_2]	count=1
class	this object's ||| method wrapper	count=1
arg	an object ||| obj oname formatter	count=2
function	of cpus in the ||| cpus	count=1
function	for deprecation [function_2] ||| [function_2] [function_1]	count=1
function	current level of indentation ||| indent current	count=1
arg	for cocoa ||| context	count=1
function	of newly ||| new	count=1
function	computation ||| update	count=1
function	activate pylab support ||| enable pylab	count=1
module	name and the ||| core	count=1
function_arg	[function_1] an object ||| [arg_2] [function_1]	count=2
function	[function_1] module ||| [function_1] [function_2]	count=2
class	input buffer ||| input	count=2
class	dict of ||| magics	count=1
function_arg	which user [arg_2] ||| [arg_2] [function_1]	count=3
module	through the ||| core	count=1
function_arg	color table scheme ||| colors scheme	count=1
function	of a class and ||| class	count=1
function	update [function_2] ||| [function_1] [function_2]	count=3
class	computation of ||| terminal interactive shell	count=1
class	configuration options have ||| terminal interactive shell	count=1
module	ipynb for [module] %run command ||| [module]	count=1
function	match latex characters ||| latex	count=1
class	of the ||| terminal	count=1
module	print [module_2] ||| [module_1] [module_2]	count=1
class	object to be ||| display	count=1
function	cell magic ||| magic	count=1
arg	piping through a ||| strng start screen_lines pager_cmd	count=1
arg	block for [arg_2] ||| [arg_1] input_lines [arg_2]	count=1
function_arg	[function_1] into ||| [function_1] [arg_2]	count=5
function	latex [function_2] ||| [function_2] [function_1]	count=4
class	ipython input ||| ipython input	count=2
arg	[arg_1] buf ||| [arg_1] [arg_2]	count=3
function	helper function to format ||| format	count=1
arg	content ||| content	count=1
function	add this [function_2] ||| [function_2] [function_1]	count=1
function_arg	find module [arg_2] ||| [function_1] [arg_2]	count=2
class	object to ||| display	count=1
function_arg	current session [arg_2] ||| [function_1] [arg_2]	count=3
class	save ||| code magics	count=1
module	block ||| lib	count=1
function_arg	[function_1] object ||| [arg_2] [function_1]	count=1
function	to format ||| format	count=1
class	[class_1] hook ||| [class_2] [class_1]	count=1
function	[function_1] profiler ||| [function_1] [function_2]	count=1
class	from string [class] allows quick ||| [class]	count=1
function	the current layout option ||| layout options	count=1
arg	info to columnize a ||| row_first	count=1
arg	turn a string of ||| ranges_str	count=1
function	the module ||| find module	count=1
arg	paging screen_lines ||| start screen_lines	count=2
function	yield pasted ||| get pasted	count=1
function	back ||| back	count=1
function	to unicode [function_2] ||| [function_2] [function_1]	count=8
module	seek ||| lib	count=1
arg	info dict ||| info	count=1
function	merge two structs with ||| merge	count=1
arg	name and path ||| cls path name	count=3
module_class	use the raw [module_1] [class_2] ||| [module_1] [class_2]	count=2
function	formatter function ||| formatter	count=1
class	job ||| job	count=3
arg	if obj is ||| obj	count=1
function	execute ||| execute	count=1
function	/psearch call from a ||| call	count=1
module	apply the ||| core	count=1
function	[function_1] config ||| [function_1] [function_2]	count=1
function	/psearch call from ||| make help call	count=1
function	named file as a ||| file	count=1
function	module ||| mod	count=1
function	keys ||| match dict keys	count=1
module	for [module] command ||| [module]	count=1
class	[class_1] input ||| [class_1] [class_2]	count=2
function	lines until the ||| lines	count=1
function_arg	data [arg_2] ||| [function_1] [arg_2]	count=1
function	a base class with ||| with	count=1
function_arg	pprint [arg_2] ||| [arg_2] [function_1]	count=3
function	of the ||| update	count=1
function	the commit [function_2] ||| [function_2] [function_1]	count=4
function	sys [function] do ||| [function] raw	count=1
function	a repr of an ||| repr	count=1
function	deprecation [function_2] ||| [function_2] [function_1]	count=1
class	options ||| interactive shell	count=2
function	two ||| two	count=1
arg	line of ||| line	count=3
function	a function ||| function	count=1
function	added builtin and ||| builtin	count=1
function	deprecation warning ||| init deprecation warnings	count=2
function	given cursor used for ||| cursor	count=1
arg	cell [arg_2] ||| [arg_2] [arg_1]	count=12
module	[module] sys ||| [module]	count=1
function	mode code insertion ||| mci	count=1
class	a dict ||| magics manager	count=1
class	execution of a python ||| execution	count=1
function_arg	[function_1] and ||| [arg_2] [function_1]	count=1
module	return ||| utils	count=2
class	dict ||| magics	count=1
function	cache of ||| cache	count=1
function	repr of an object ||| repr	count=1
class	parser ||| parser	count=1
class	defined ||| shim	count=1
module	move ||| lib	count=1
function	a figure to ||| figure	count=1
arg	session ||| session start stop raw	count=1
function	get short form ||| pkg	count=1
function	[function_1] a comment ||| [function_2] [function_1]	count=5
function	deprecation [function_2] ||| [function_1] [function_2]	count=1
function	select [function_2] ||| [function_2] [function_1]	count=1
module	line is like the ||| core	count=1
function	wrap [function_2] ||| [function_1] [function_2]	count=2
function	the current session a ||| session	count=1
class	ask ||| terminal interactive	count=1
arg	a multiline ||| src	count=1
function	function ||| python func	count=1
module	in a list ||| utils	count=1
function	source code [function_2] ||| [function_1] [function_2]	count=2
module	and ||| core	count=4
function	last session ||| last session	count=2
module_class	[module_1] history database ||| [module_1] [class_2]	count=2
arg	in object ||| obj	count=1
function_arg	[function_1] columnize a ||| [function_1] rlist [arg_2]	count=1
function	return all objects in ||| iter	count=1
function	the token at ||| token at	count=2
arg	code for ||| code	count=1
function_arg	[function_1] re-set ||| [function_1] [arg_2]	count=3
arg	[arg_1] altmod ||| [arg_2] [arg_1]	count=1
function	part ||| block parser	count=1
arg	passed to an ||| arg_str opt_str	count=1
function_arg	code [arg_2] ||| [function_1] [arg_2]	count=2
function_arg	and [arg_2] ||| [function_1] backend gui [arg_2]	count=1
module	the ||| lib	count=9
function_arg	[function_1] obj if ||| [function_1] [arg_2]	count=4
module	win32 [module] sys ||| [module]	count=1
function	arguments ||| arguments	count=1
arg	block for ||| output_prompt	count=1
arg	session ||| session start	count=1
function	to return a repr ||| repr	count=1
class	display the ||| terminal ipython	count=1
function_arg	an [arg_2] ||| [arg_2] [function_1]	count=1
class	input buffer and associated ||| input splitter	count=2
function	pager after ||| pager page	count=1
function	svg representation ||| svg	count=1
function	call from a ||| help call	count=1
function	object that [function] maps the ||| bind [function]	count=1
arg	[arg] has been ||| [arg]	count=2
arg	simply call ||| src title arg_str auto_all	count=1
function_arg	to html [arg_2] ||| [function_1] [arg_2]	count=1
function	by ||| by name	count=4
function_arg	execute a [arg_2] ||| [arg_2] [function_1]	count=1
module_class	[module_1] object ||| [module_1] [class_2]	count=2
function	pdb interactive ||| pdb	count=1
class	history from a ||| history accessor	count=1
function	of default [function_2] ||| [function_2] [function_1]	count=2
class	execution ||| execution magics	count=1
class	=> ||| autoreload	count=1
module	[module_1] currently active ||| [module_1] [module_2]	count=2
class	example ||| terminal interactive	count=1
arg	the mirrored ||| fullname	count=1
module	computation of the ||| terminal	count=1
function	translate lines escaped with ||| tr magic	count=1
function	print [function] otherwise identical ||| raw print [function]	count=1
function	format data ||| format display data	count=2
module	slice of the content ||| core	count=1
function	clear the ||| clear	count=1
function	render latex to html ||| latex to html	count=1
module	options have changed ||| terminal	count=1
function_arg	[function_1] profile ||| [arg_2] [function_1]	count=1
function_arg	[function_1] input source ||| [function_1] [arg_2]	count=2
arg	code ||| code opts namespace	count=1
function	default filter for deprecation ||| init deprecation	count=1
function	[function_1] unicode name ||| [function_1] [function_2]	count=2
class	run ||| shell app	count=2
function_arg	module [arg_2] ||| [function_1] [arg_2]	count=2
module	the various ||| core	count=1
function	of shell aliases ||| aliases	count=1
function	[function_1] a comment ||| [function_1] [function_2]	count=5
function	[function_1] format data ||| [function_2] [function_1]	count=2
function	display ||| display	count=6
arg	contents of a named ||| fname	count=1
function	for terminal ||| terminal	count=1
function	system ||| system	count=1
function_arg	[function_1] all exceptions ||| [function_1] [arg_2]	count=2
function_arg	set the [arg_2] ||| [arg_2] [function_1]	count=1
function	readline is history ||| next history	count=1
function	remove [function_2] ||| [function_2] [function_1]	count=2
function	deferred type registry ||| deferred types	count=1
function	[function_1] named module ||| [function_2] [function_1]	count=2
module	a re computation ||| terminal	count=1
class	a display object ||| display object	count=2
function_arg	[function_1] line ||| [function_1] lineno session [arg_2]	count=4
function	options ||| options	count=1
function	compute [function_2] ||| [function_1] [function_2]	count=2
function	integration taking [function] into account ||| init gui [function]	count=1
function	cwd ||| cwd	count=1
function	initial % ||| automagic	count=1
function	write the format ||| write format	count=2
function_arg	arguments of [arg_2] ||| [arg_2] [function_1]	count=4
class	various ||| display hook	count=1
class	computation of the ||| interactive shell	count=1
function	dir [function_2] ||| [function_2] [function_1]	count=2
module	render the ||| core magics	count=1
module	[module_1] currently ||| [module_1] [module_2]	count=2
class	prepare ||| interactive shell	count=1
function	that make an ||| make	count=1
arg	for code for ||| code	count=1
class	[class_1] thread ||| [class_2] [class_1]	count=1
module	save the ||| core	count=1
function	base pprint for ||| exception pprint	count=1
class	example some configuration options ||| terminal interactive	count=1
function	skip reloading [function_2] ||| [function_2] [function_1]	count=4
arg	[arg_1] path ||| [arg_2] [arg_1]	count=2
function_arg	[function_1] [arg_2] ||| [function_1] rlist [arg_2]	count=9
function	[function_1] user ||| [function_1] [function_2]	count=1
function	completion machinery ||| completer	count=1
arg	[arg] as a ||| line [arg]	count=2
arg	compatible ||| etype evalue etb	count=1
class	after init_crashhandler ||| base ipython application	count=1
arg	[arg_1] callable when ||| [arg_2] [arg_1]	count=3
arg	code ||| code	count=2
module_class	switch to [module_1] [class_2] ||| [module_1] [class_2]	count=2
arg	print the last ||| s	count=1
class	table ||| table	count=1
arg	a path ||| path	count=1
module	options have ||| terminal	count=1
function	a comment or within ||| comment or	count=1
function	2 /psearch call ||| call	count=1
module	handler for [module] line_info ||| [module]	count=1
function	shortcuts for [function_2] ||| [function_2] [function_1]	count=2
class	history from ||| history	count=2
function_arg	[function_1] code ||| [arg_2] [function_1]	count=1
arg	[arg_1] block ||| [arg_1] [arg_2]	count=2
arg	print or run through ||| arg	count=1
class	input ||| ipython input splitter	count=1
class	add ||| builtin trap	count=1
function	find and [function_2] ||| [function_1] [function_2]	count=1
function_arg	[function_1] obj ||| [arg_2] [function_1]	count=4
function	output ||| store output	count=1
module	of an ||| utils	count=1
function_arg	html [arg_2] ||| [arg_2] [function_1]	count=1
function_arg	[function_1] a func ||| [arg_2] [function_1]	count=1
function	get ||| get range	count=1
class	example some configuration ||| terminal interactive	count=1
function	environment ||| environment	count=1
arg	readline which must ||| readline	count=1
function	repr function ||| repr	count=1
class	captured ||| captured	count=2
class	is always defined ||| module	count=1
class	various ||| display	count=1
function	optimal info ||| optimal	count=1
function	version ||| version	count=1
function	a completer for ||| reset completer	count=1
function_arg	[function_1] called ||| [function_1] [arg_2]	count=1
class	having to ||| auto magics	count=2
function_arg	exception call [arg_2] ||| [arg_2] [function_1]	count=3
function	assignment [function] commands (e ||| assign [function]	count=1
arg	associated with a ||| config	count=1
class	url information if defined ||| audio	count=1
function	nodes ||| nodes	count=1
function	a figure to an ||| figure	count=1
function	standard output standard error ||| output error	count=1
function	[function_1] default config ||| [function_2] [function_1]	count=1
arg	don't exist ||| mylist i	count=1
class	[class_1] object ||| [class_1] [class_2]	count=2
function	a re ||| update	count=1
arg	given directory pkg_path ||| pkg_path	count=1
class	transformed [class] none ||| coroutine [class]	count=1
function	call ||| help call	count=1
module	dropped the ||| core magics	count=1
function	optimal info to ||| optimal	count=1
class	new history manager ||| history manager init	count=1
module	at the ||| core	count=3
module	the next ||| core	count=1
function	check version ||| check version	count=1
module	get information about the ||| core	count=1
function	the strings in ||| get	count=1
module	the namespace dictionaries in ||| core	count=1
function	syntax for unicode ||| unicode	count=1
function	translate lines ||| tr	count=1
function	to sys __stderr__, ||| err	count=1
function	/psearch call ||| help call	count=1
class	the parent class ||| terminal	count=1
function	history previous ||| next history	count=1
arg	render the cell ||| cell	count=1
function	keys ||| dict keys	count=1
function	with [function_2] ||| [function_2] [function_1]	count=4
function	get object info ||| object	count=1
module	handle of ||| utils	count=1
function_arg	[function_1] code for ||| [function_1] [arg_2]	count=1
function	[function_1] loop in ||| [function_2] [function_1]	count=1
function	the image file ||| save image	count=1
function	call [function_2] ||| [function_1] [function_2]	count=4
arg	[arg_1] format ||| [arg_2] [arg_1]	count=4
arg	info dict and format ||| formatter info	count=1
arg	reload() ||| m	count=1
class	return a dict of ||| manager	count=1
class	of script ||| script	count=1
function_arg	a class [arg_2] ||| [function_1] [arg_2]	count=1
function	in which user ||| user	count=1
arg	:func os path ||| path	count=1
arg	a warning of class [arg_1] [arg_2] ||| external decorators assert warns [arg_1] [arg_2]	count=10
module	none if [module] transformer ||| [module]	count=1
module	is like the ||| core magics	count=1
function	default print ||| default pprint	count=2
arg	for an object ||| obj	count=3
function	render latex [function_2] ||| [function_2] [function_1]	count=2
function	[function_1] edit ||| [function_2] [function_1]	count=2
class	configuration options have changed ||| interactive shell	count=1
module	the new ||| core	count=1
arg	by callable when invoked ||| func	count=1
module	to type the ||| core magics	count=1
class	callback for ||| magics	count=1
arg	for sets and frozensets ||| start end basetype	count=1
function	float_precision changed [function_2] ||| [function_2] [function_1]	count=2
class	having to ||| auto	count=2
class	example some configuration options ||| terminal	count=1
class	completed or dead job ||| job	count=1
module	configuration options have ||| terminal	count=1
class	interactiveshell ||| interactive shell	count=2
function	a completer for %reset ||| reset completer	count=1
function	handler by its ||| handler by	count=4
arg	construct ||| file_or_name mode channel	count=1
module	the implementation in ||| core magics	count=1
arg	move the current ||| index	count=1
module_class	all the handlers ||| core prefilter manager	count=1
arg	name return its profiledir ||| name	count=1
module	for adding ||| core magics	count=1
module	save the original ||| core	count=1
function	to set _ip point ||| set	count=1
function	options ||| update	count=1
function	wrap multiple paragraphs ||| wrap paragraphs	count=3
function	user ||| user	count=2
arg	data block [arg_2] ||| [arg_1] input_lines [arg_2]	count=1
function	pylab support ||| pylab	count=1
function_arg	[function_1] string ||| [arg_2] [function_1]	count=2
class	move ||| demo	count=1
class	specify traceback ||| tb	count=1
function	[function_1] unicode ||| [function_1] [function_2]	count=4
function	getattr ||| getattr	count=1
function_arg	[function_1] source and ||| [function_1] [arg_2] source_raw	count=1
class	added ||| builtin trap	count=1
function	number of cpus ||| num cpus	count=1
function	getattr to use in ||| getattr	count=1
function	indentation ||| indent	count=1
arg	mod [arg_2] ||| [arg_2] [arg_1]	count=5
function	remove an ||| remove	count=1
arg	cell via ||| cell	count=1
class	the parent ||| terminal	count=1
function_arg	[function_1] dict for ||| [function_1] obj [arg_2]	count=4
arg	entry tuples for printing ||| extracted_list	count=1
function_arg	comment or [arg_2] ||| [arg_2] [function_1]	count=1
function	loop ||| loop	count=3
function	unregister a ||| unregister	count=1
function	some configuration options ||| update	count=1
module_class	[module_1] oldest ||| [module_1] [class_2]	count=2
arg	re-set ||| orig	count=1
function	[function_1] encoding ||| [function_2] [function_1]	count=1
function	a code object ||| code	count=1
module_class	the state [class_2] ||| [module_1] [class_2]	count=2
function	[function_1] profiler used ||| [function_2] [function_1]	count=1
function	of references to all ||| all	count=1
function	a new ||| init	count=1
function	initialize ||| init	count=3
function	is history previous ||| history	count=1
function	completer for %reset ||| reset completer	count=1
function	a list of ||| list	count=1
module	historymanager to dump the ||| core	count=1
class	the embedded ipython ||| embedded	count=1
class	writes the string to ||| win32shell command controller	count=1
function	register the function ||| register	count=1
arg	a probably unique ||| number	count=1
function	skip reloading the ||| skipped	count=1
class	active profile [class_2] ||| [class_2] [class_1]	count=1
module	run the ||| core	count=4
arg	a string ||| strng	count=1
module_class	[module_1] tb ||| [module_1] [class_2]	count=1
arg	warn(msg ||| msg exit_val	count=1
arg	paging [arg_2] ||| [arg_2] [arg_1]	count=1
module	of all the ||| core	count=1
function	save ||| save	count=2
function	the current session ||| session	count=1
class	the embedded ipython ||| embedded sphinx	count=1
function	ipy or ||| execfile ipy	count=1
arg	use in object ||| obj	count=1
class	an ||| embedded magics	count=1
class	register ||| prefilter manager	count=1
function	for unicode ||| unicode	count=1
arg	parses the line and ||| line	count=1
function	of main modules ||| main mod	count=1
class	parameter ||| parameter	count=1
class	state of this inputsplitter ||| input splitter	count=1
class	url information if ||| audio	count=1
module_class	the whole ||| core inspector	count=1
function	completer for %reset magic ||| completer	count=1
function	copy [function_2] ||| [function_1] [function_2]	count=2
arg	[arg_1] [arg_2] ||| init [arg_2] [arg_1]	count=1
function_arg	a pprint [arg_2] ||| [arg_2] [function_1]	count=2
module	one block ||| lib	count=1
function	an alias but don't ||| alias	count=1
function	hook ||| hook	count=1
class	seek ||| demo	count=1
module_class	[module_1] transformer ||| [module_1] input [class_2]	count=1
module	[module] resulting file ||| [module]	count=2
function	factory ||| set pprinter factory	count=1
function	regular expression patterns ||| re	count=1
function_arg	color table [arg_2] ||| [arg_2] [function_1]	count=1
module	ask ||| terminal	count=1
class	for example some configuration ||| interactive shell	count=1
arg	a cell ||| cell	count=1
module	run through pager the ||| core	count=1
class	new job ||| background job	count=1
arg	mod subname fullname ||| mod subname fullname	count=3
function	[function_1] print ||| [function_2] [function_1]	count=1
arg	mod subname [arg_2] ||| [arg_1] [arg_2]	count=1
module	value of ||| utils	count=1
function	write the ||| write	count=1
class	callback for ||| script magics	count=1
class	argument list ||| magic argument parser	count=1
function	files into ||| files	count=1
class	pexpect calls ||| process handler	count=1
arg	for output [arg_2] ||| [arg_2] [arg_1]	count=2
class	=> import modules ||| autoreload magics	count=1
class	ask for a ||| terminal interactive shell	count=1
function	split user input ||| split user input	count=3
module	the current dir ||| core magics	count=2
function_arg	[function_1] dict ||| [arg_2] [function_1]	count=4
module	print the value of ||| utils	count=1
class	a ||| terminal	count=1
class	a ||| manager	count=1
module	of parameter objects and ||| utils	count=1
module	a string a given ||| utils	count=1
function	given ||| raw	count=1
function_arg	[function_1] to columnize ||| [arg_2] [function_1]	count=1
class	some ||| interactive shell	count=2
function	source code to unicode ||| source to unicode	count=1
arg	[arg] a callable ||| [arg]	count=1
function	define ||| define	count=1
function	string ||| string	count=1
function	call from ||| call	count=1
arg	name return its ||| name config	count=1
function	pdf representation ||| pdf	count=1
class	fill in ||| timeit template filler	count=1
function	executing ||| cmd	count=2
function	indent ||| indent	count=2
module	the format for an ||| core	count=1
arg	altmod name ||| altmod name	count=2
arg	class [arg] ||| [arg]	count=3
class	interactiveshell to do nothing ||| interactive shell	count=1
arg	handler instance by name ||| name handler	count=2
arg	into ||| config_file path overwrite	count=1
arg	object for the ||| obj	count=1
function	[function_1] print ||| [function_1] [function_2]	count=1
module	dict ||| core	count=1
class	without having to type ||| auto magics	count=2
module_class	the hook ||| core display trap	count=2
function	module ||| extract module	count=1
class	traceback ||| list tb	count=1
class	re ||| interactive	count=1
class	create ||| profile dir	count=1
function	back to [function_2] ||| [function_2] [function_1]	count=5
function	class and ||| class	count=1
function_arg	options [arg_2] ||| [arg_2] [function_1]	count=4
arg	[arg] to ||| [arg]	count=1
function	the token ||| token	count=1
module	the current ||| core	count=1
module	'pattern' a ||| utils	count=1
arg	line [arg_2] ||| [arg_2] [arg_1]	count=1
function	re ||| update	count=1
function	ask for ||| update	count=1
function	the deferred type registry ||| deferred types	count=1
function	its methods ||| method	count=1
class	completed or dead job ||| job manager	count=1
function	code ||| run code	count=1
function	[function_1] loop in ||| [function_1] [function_2]	count=1
function	completer for ||| reset completer	count=1
arg	print or run ||| arg	count=1
function	status of newly ||| status new	count=2
class	example some configuration ||| interactive	count=1
module	a sequence of ||| utils	count=1
function	toolkit ||| or next completion	count=1
function	[function_1] with ?/?? ||| [function_2] [function_1]	count=1
function_arg	[function_1] a string ||| [arg_2] [function_1]	count=2
class	logging and ||| logging	count=1
arg	fail unless a warning [arg_1] [arg_2] ||| [arg_1] [arg_2]	count=9
arg	columnize a list ||| row_first	count=1
arg	one argment readline ||| readline	count=1
arg	requires [arg] ||| [arg]	count=2
arg	callable when invoked with ||| func	count=1
function	string return ||| find	count=1
function	[function_1] ; ||| [function_1] [function_2]	count=1
class	optionally ||| terminal ipython	count=1
function	named file as ||| file	count=1
class	this object's information ||| arg method wrapper	count=2
function	return [function_2] ||| [function_2] [function_1]	count=4
class	a ||| magics manager	count=1
function_arg	[function_1] [arg_2] ||| [function_1] name [arg_2]	count=2
class	runs ||| win32shell command controller	count=1
module	the seek ||| lib	count=1
class	info system and ||| basic	count=1
class	options have changed ||| interactive	count=1
function	[function_1] profiles ||| [function_2] [function_1]	count=1
function	to find [function_2] ||| [function_2] [function_1]	count=1
module	the ||| core	count=170
function	register ||| register	count=2
arg	fail unless a warning [arg_1] [arg_2] ||| external decorators assert warns [arg_1] [arg_2]	count=9
function	repr ||| repr	count=2
module	in a list of ||| utils	count=1
function	tip ||| tip	count=1
function	yield pasted [function_2] ||| [function_2] [function_1]	count=3
function	commit hash from in ||| commit hash	count=1
class	the seek pointer back ||| demo	count=1
class	options have changed ||| terminal interactive shell	count=1
function	files ||| files	count=1
arg	variables into ||| variables	count=1
function_arg	[function_1] executing cmd ||| [function_1] [arg_2]	count=3
function	for ipython ||| ipython	count=1
function_arg	[function_1] a multiline ||| [arg_2] [function_1]	count=8
function_arg	pprint for [arg_2] ||| [function_1] [arg_2]	count=1
arg	[arg_1] returning ||| [arg_1] [arg_2]	count=2
class	a re computation ||| terminal	count=1
function	two [function_2] ||| [function_2] [function_1]	count=1
class	a re computation ||| shell	count=1
module	inputhook ||| terminal pt_inputhooks	count=2
function	using tkinter ||| tkinter	count=1
function	ends in ||| ends in	count=2
arg	fed to eval() ||| expression glob loc	count=1
function	set up matplotlib ||| matplotlib	count=1
function	characters back ||| back	count=1
module_class	[module_1] this inputsplitter ||| [module_1] [class_2]	count=2
arg	one argment readline which ||| readline	count=1
function	level of indentation ||| indent	count=1
module	list of parameter objects ||| utils	count=1
function	and ||| and	count=1
class	options have ||| interactive shell	count=1
function_arg	[function_1] currently ||| [arg_2] [function_1]	count=1
module	value of an ||| utils	count=1
function	[function_1] running ||| [function_2] [function_1]	count=4
module	given list of parameter ||| utils	count=1
function	write the [function_2] ||| [function_1] [function_2]	count=4
class	some configuration options ||| terminal	count=1
function	flags ||| flags	count=1
arg	through a pager ||| start screen_lines	count=1
arg	salt ||| passphrase algorithm	count=1
function	and re-execute ||| again	count=1
function	[function_1] code of ||| [function_1] output error [function_2]	count=1
arg	t_total execute a function ||| func	count=1
arg	given name ||| name	count=1
function	repr of an ||| safe repr	count=1
function	[function_1] paragraphs to ||| [function_2] [function_1]	count=1
function	latex ||| latex	count=2
function	history previous unlike default ||| next history	count=1
function	name this ||| name	count=1
module	a common list of ||| core	count=1
class	for a re computation ||| terminal	count=1
function	image file to disk ||| save image	count=1
class	profiler ||| execution magics	count=1
arg	not [arg] has been ||| [arg]	count=1
class	re computation of the ||| terminal	count=1
module_class	[module_1] handlers ||| [module_1] [class_2]	count=8
module	pointer back ||| lib	count=1
function_arg	[function_1] and ||| [function_1] data metadata [arg_2]	count=1
arg	name and path ||| path name	count=1
function	png representation of ||| png	count=1
module	by the user ||| core	count=1
class	create [class] ||| [class]	count=1
function_arg	[function_1] currently ||| [function_1] active scheme scheme [arg_2]	count=1
class	parser with ||| parser	count=1
module	history ||| core magics	count=1
function	of ast [function_2] ||| [function_2] [function_1]	count=2
function	read ||| read	count=1
function	list of shell aliases ||| aliases	count=1
arg	piping through a pager ||| screen_lines pager_cmd	count=1
arg	editor ||| exe	count=1
function	generate built-in [function] ||| get display [function]	count=1
function	2 /psearch call from ||| help call	count=1
function_arg	name for [arg_2] ||| [arg_2] [function_1]	count=3
function	name ||| code name	count=1
function	default config [function_2] ||| [function_2] [function_1]	count=1
arg	[arg_1] subname fullname ||| [arg_1] [arg_2]	count=1
class	execute ||| interactive	count=1
function_arg	transform a line ||| transform line	count=1
arg	lines which can ||| line_info	count=1
function	__dict__ of a class ||| update class	count=1
arg	exception handler which will ||| exc_tuple handler	count=1
function	[function] otherwise ||| raw print [function]	count=2
function	>= ||| new	count=1
function	certain type it ||| type	count=1
function_arg	write data ||| write data	count=1
function	profiler used by ||| profiler	count=1
class	for a re computation ||| terminal interactive	count=1
arg	execute ||| code_obj result	count=1
class	pretty printing ||| basic	count=1
arg	string ||| s	count=1
class	display ||| terminal ipython	count=1
arg	an object [arg_2] ||| [arg_1] [arg_2]	count=1
arg	terminal title ||| title	count=1
function	shell aliases ||| default aliases	count=1
function	add a ||| add	count=2
function	matches ||| matches	count=2
class	pretty ||| basic	count=1
function	information to ||| to	count=1
function	lines until ||| lines	count=1
arg	module_name on sys path ||| module_name	count=1
arg	val ||| val	count=1
class	formatters ||| display formatter	count=2
function	filter for deprecation ||| init deprecation	count=1
function	traceback ||| structured traceback	count=1
module	of range for ||| magics	count=1
function	id currently ||| id	count=1
class	compiler flags active ||| caching compiler	count=1
module_class	of [class_2] ||| [module_1] [class_2]	count=16
function_arg	the generate_tokens() [function_1] [arg_2] ||| utils generate [function_1] [arg_2]	count=2
arg	altmod name [arg_2] ||| [arg_1] [arg_2]	count=1
class	logging and close log ||| logging	count=1
module	the inspector system ||| core	count=1
module	for [module] %run ||| [module]	count=1
module	print [module_2] ||| [module_2] [module_1]	count=1
function	update the [function_2] ||| [function_1] [function_2]	count=3
function	default editor ||| editor	count=1
class	always defined ||| module	count=1
module_class	the active profile ||| core profile	count=2
function	factory that returns a ||| factory	count=2
function	for input token ||| input	count=1
class	one ||| demo	count=1
arg	func ||| func	count=1
function	property ||| update property	count=2
function_arg	[function_1] line of ||| [function_1] [arg_2]	count=1
function	config files ||| config files	count=2
function	optionally display the ||| init	count=1
function	transform a ||| transform	count=1
function	[function_1] html ||| [function_2] [function_1]	count=3
function	the system standard i/o ||| stdio	count=1
function	float_precision changed set ||| precision changed	count=2
function	use for terminal ||| terminal	count=1
function	object info ||| object	count=1
function	last [function_2] ||| [function_1] [function_2]	count=3
class	formatter for ||| formatter	count=2
class	have ||| terminal	count=1
class	optionally display the ||| terminal ipython	count=1
class	for example ||| interactive	count=1
arg	[arg] raw input ||| [arg]	count=1
module	single decorator for adding ||| core magics	count=1
arg	pager piping through a ||| screen_lines pager_cmd	count=1
class	finish ||| display hook	count=1
arg	existing ||| cls ipython_dir	count=1
function	files from profile ||| files	count=1
function	string to stdout ||| stdout	count=1
class	a variable from ||| interactive	count=1
function	select [function_2] ||| [function_1] [function_2]	count=1
arg	[arg] raw ||| [arg]	count=1
class	much any python ||| python	count=1
function	get the name ||| name	count=1
function	ipython [function] ||| get ipython [function]	count=3
arg	data ||| data single	count=1
function	find ||| find	count=6
arg	formatted string with ||| value elist tb_offset	count=1
function	repr of ||| repr	count=1
function	qt ||| load qt	count=1
function	prompts ||| prompts	count=1
class	the embedded ipython shell ||| embedded sphinx shell	count=1
arg	name return its ||| name	count=1
module	of ||| terminal	count=1
function	a default config ||| config	count=1
function	profile dir and ||| profile dir	count=1
function	module and ||| load module	count=1
arg	callback ||| function	count=1
class	to file ||| file	count=1
function	cell ||| cell	count=1
class	for ||| shell	count=2
function	a class ||| class	count=1
arg	text ||| text formatter	count=1
class	configuration ||| terminal interactive shell	count=2
function	in [function_2] ||| [function_2] [function_1]	count=5
module_class	at the [class_2] ||| [module_1] [class_2]	count=2
function	clear it ||| clear	count=1
module	a slice of the ||| core	count=1
module	hooks in the ||| core	count=1
arg	deprecated equivalent to warn(msg ||| msg	count=2
function	to catch [function_2] ||| [function_2] [function_1]	count=1
arg	directory pkg_path we ||| pkg_path	count=1
arg	data [arg_2] ||| [arg_1] [arg_2]	count=6
module	of the input ||| core	count=1
module	run the ||| core magics	count=1
class	some configuration options have ||| interactive	count=1
function	next ||| set next	count=1
class	changed ||| interactive shell	count=2
class	re ||| terminal interactive	count=1
module_class	of ipython ||| core ipython	count=1
class	interactiveshell to ||| interactive shell	count=1
function_arg	[function_1] mod altmod ||| [arg_2] [function_1]	count=1
module	to type the ||| core	count=1
function	name for ||| code name	count=1
arg	piping through a ||| data start screen_lines pager_cmd	count=1
function	status [function_2] ||| [function_2] [function_1]	count=1
arg	terminal title in ||| title	count=1
function	the default editor ||| editor	count=1
function	simple exception ||| error	count=1
arg	input text ||| text	count=1
function	changed set ||| precision changed	count=2
function	function to format ||| format	count=1
arg	escape (i ||| esc lspace next_input	count=2
function	update the status of ||| update status	count=1
function	stdin ||| stdin	count=1
module	to dump the ||| core	count=1
arg	a callback from ||| function	count=1
arg	through a pager ||| screen_lines	count=1
function	version of cwd ||| cwd	count=1
module	the python ||| core magics	count=1
function	format a [function_2] ||| [function_2] [function_1]	count=2
function	format a list of ||| format list	count=1
function	image file to disk ||| image	count=1
function	data ||| display data	count=2
class	link ||| link	count=1
arg	[arg_1] with esc_strings ||| [arg_2] [arg_1]	count=6
function	input ||| input	count=4
class	example some configuration ||| terminal	count=1
function	directory to which the ||| dir	count=1
function	all the modules ||| modules	count=1
arg	given raw data ||| data url filename	count=2
function	by its ||| by	count=2
class	traceback a ||| syntax tb	count=1
function	of default ||| default	count=1
module_class	in the database ||| core history accessor	count=1
arg	[arg] a ||| [arg]	count=1
function	return simple exception dict ||| user obj error	count=1
function	source code [function_2] ||| [function_2] [function_1]	count=2
class	history database ||| history accessor	count=1
function	get the current ||| get	count=1
class	this ||| saving	count=1
class	run ||| execution magics	count=1
function	the format [function_2] ||| [function_1] [function_2]	count=3
function	the status of the ||| status	count=1
class	optionally ||| app	count=1
function	selective ||| selective	count=1
class	overridden from the parent ||| terminal interactive	count=1
class	return a dict ||| magics	count=1
function_arg	the [function_1] [arg_2] ||| [function_1] [arg_2]	count=2
function	call tip ||| call tip	count=2
function	a directory [function] if it ||| ensure dir [function]	count=1
module	the string ||| core	count=1
class	history from ||| history accessor	count=1
arg	dict for [arg_2] ||| [arg_2] [arg_1]	count=2
function	[function_1] with ?/?? ||| [function_1] [function_2]	count=1
function	to use for terminal ||| terminal	count=1
arg	or not [arg] has ||| [arg]	count=1
function	remove an [function_2] ||| [function_2] [function_1]	count=1
arg	prefix to ||| prefix	count=1
class	have ||| terminal interactive	count=1
function	merge ||| merge	count=1
class	some configuration options have ||| shell	count=1
module	raw win32 [module] ||| [module]	count=1
module	a file in read ||| utils	count=1
function	add a builtin and ||| add builtin	count=1
arg	[arg_1] block for ||| [arg_1] [arg_2]	count=2
class	display object ||| display object	count=2
class	defined ||| shim module	count=1
function	code or ||| code	count=1
class	argument ||| magic argument parser	count=1
module	a specified ||| utils	count=1
module	in [module] compilation ||| [module]	count=1
function	shell aliases to ||| default aliases	count=1
class	get ||| interactive shell	count=1
arg	part ||| part	count=1
function	cursor used for ||| cursor	count=1
function	format ||| format	count=10
module_class	[module_1] tb ||| [module_1] verbose [class_2]	count=1
module	opposed to [module] ||| [module]	count=3
arg	mod ||| mod	count=2
module	example some configuration ||| terminal	count=1
module	execute [module] line ||| [module]	count=1
function	parse ||| parse	count=1
class	traceback a list to ||| tb	count=1
module	the source code ||| core	count=1
function	latex characters back to ||| back latex	count=1
function	all ||| all	count=1
class	input history ||| history	count=1
class	file ||| file	count=1
class	for pexpect calls ||| process handler	count=1
module	compute the ||| core	count=1
class	logging and close ||| logging	count=1
class	list of ||| list	count=1
arg	simply call the ||| src title arg_str auto_all	count=1
class	an object in ||| interactive	count=1
module_class	[module_1] history from ||| [module_1] [class_2]	count=4
function	rerun ||| rerun	count=1
function	file as [function_2] ||| [function_1] [function_2]	count=1
function_arg	base pprint [arg_2] ||| [arg_2] [function_1]	count=1
function	a breakable ||| breakable	count=1
function	state of hooks ||| state	count=1
module	from the ||| core	count=3
function_arg	call from [arg_2] ||| [arg_2] [function_1]	count=2
function	pinfo 2 /psearch call ||| call	count=1
function	for ipy or ||| execfile ipy	count=1
arg	handler instance by ||| handler	count=2
function_arg	given [arg_2] ||| [arg_2] [function_1]	count=5
function	number of cpus ||| cpus	count=1
function	method called before ||| pre	count=1
arg	with given priority ||| priority	count=1
function	loop in a ||| loop	count=1
arg	passed to ||| arg_str opt_str	count=1
function_arg	default arguments [arg_2] ||| [function_1] [arg_2]	count=3
class	some configuration options ||| shell	count=1
module	raw win32 [module] sys ||| [module]	count=1
function	set _ip ||| set	count=1
function	to import [function] given ||| [function]	count=1
module	example some configuration options ||| terminal	count=1
function	save a set of ||| save	count=1
function	yield pasted lines until ||| get pasted lines	count=1
module	does the opposite of ||| core	count=1
module_class	[module_1] interactive ||| [module_1] [class_2]	count=4
function_arg	[function_1] compatible ||| [arg_2] [function_1]	count=3
module	the exception handlers ||| core	count=1
class	of this inputsplitter ||| input splitter	count=1
function	remove ||| remove	count=3
function	code ||| cmd line code	count=1
module	automatic calling of the ||| core magics	count=1
arg	lines which ||| line_info	count=1
class	block ||| demo	count=1
function	loop running ||| loop running	count=4
function	matplotlib ||| matplotlib	count=2
function	unicode name this does ||| name matches	count=1
function	[function_1] a cell ||| [function_1] [function_2]	count=1
arg	an object [arg_2] ||| [arg_2] [arg_1]	count=1
class	to the transformer ||| transformer	count=1
arg	executing cmd ||| cmd	count=1
function	find the [function] ||| get ipython module [function]	count=2
class	optionally display the ||| ipython app	count=1
arg	[arg_1] and path ||| [arg_2] [arg_1]	count=2
function	file as [function_2] ||| [function_2] [function_1]	count=1
function	for deprecation warning ||| deprecation warnings	count=1
function	[function_1] or ||| [function_2] [function_1]	count=7
class	object's information ||| arg	count=1
arg	given text and line ||| text	count=1
function	given ||| unregister	count=1
module	of the ||| core magics	count=2
function	a repr of ||| safe repr	count=1
function	unicode name ||| name matches	count=2
function	breakable ||| breakable	count=1
function	deprecation ||| init deprecation	count=1
class	return a ||| magics manager	count=1
module_class	[module_1] formatter for ||| [module_1] [class_2]	count=2
function	check version ||| version	count=1
class	system ||| basic magics	count=1
function	to find ||| find	count=1
function	page as ipython ||| page	count=1
class	lines that ||| input	count=1
class	object ||| object	count=1
class	example some configuration ||| terminal interactive shell	count=1
function	a code ||| run code	count=1
function	split ||| split	count=2
function	store ||| store	count=2
function	or store it in ||| store or	count=1
function	in a ||| in	count=1
module	the color ||| core	count=1
arg	profile ||| profile	count=1
class	options have changed ||| terminal interactive	count=1
function	edit ||| edit target	count=2
class	traceback a list ||| syntax tb	count=1
module	in a ||| utils	count=1
function	normal repr function ||| repr	count=1
class	by that ||| manager	count=1
function	script [function_2] ||| [function_1] [function_2]	count=1
arg	readline which ||| readline	count=1
function	[function_1] cursor used ||| [function_2] [function_1]	count=4
arg	[arg_1] [arg_2] ||| [arg_1] handler [arg_2]	count=2
function	pprint for ||| pprint	count=1
class	display ||| ipython	count=1
function_arg	#! [arg_2] ||| [arg_2] [function_1]	count=2
class	with various ||| display	count=1
module_class	[module_1] formatters ||| [module_1] [class_2]	count=2
module	subclasses of the ||| core	count=1
function	current session a ||| session	count=1
module	the seek pointer back ||| lib	count=1
arg	to warn(msg ||| msg	count=2
arg	string piping through ||| strng start screen_lines pager_cmd	count=1
function	extract call ||| call	count=1
arg	pager piping ||| pager_cmd	count=1
function	profile [function_2] ||| [function_1] [function_2]	count=4
arg	if an object ||| obj	count=1
function	tip data ||| tip	count=1
arg	cmd in a subprocess ||| cmd	count=1
function	[function_1] last session ||| [function_2] [function_1]	count=1
function_arg	[function_1] target name ||| [arg_2] [function_1]	count=2
function	completer ||| reset completer	count=2
function	[function_1] format ||| [function_1] [function_2]	count=2
function_arg	exception call [arg_2] ||| [function_1] [arg_2]	count=3
function	if database output ||| store output	count=1
function_arg	getattr [arg_2] ||| [arg_2] [function_1]	count=1
module	matching the ||| core	count=1
class	example ||| terminal interactive shell	count=2
arg	path is a ||| path	count=1
function	unload ||| unload	count=1
class	this [class_2] ||| [class_1] [class_2]	count=1
arg	transformations from self ast_transformers ||| node	count=1
module	the folders of the ||| core	count=1
class	have changed ||| interactive	count=1
function	a user-created object ||| ns refs	count=1
function_arg	[function_1] a func ||| [function_1] [arg_2]	count=1
arg	[arg_1] with esc_strings ||| [arg_1] handler [arg_2]	count=2
function	like %who but gives ||| whos	count=1
function	the name ||| name	count=2
function	name this does ||| name	count=1
module	set the delimiters for ||| core	count=1
function	traceback with ||| tb	count=1
module	the value of ||| utils	count=1
class	colored source ||| parser	count=1
function	named module in ||| module	count=2
class	options ||| shell	count=1
function	[function_1] args ||| [function_1] [function_2]	count=1
module	run the pre-flight ||| core	count=1
arg	pkg_path we get ||| pkg_path	count=1
arg	a string piping through ||| strng start screen_lines pager_cmd	count=1
arg	callable when ||| func	count=1
function	force exit with a ||| force exit	count=1
class	display the ||| ipython	count=1
function	event ||| event	count=3
function	cache of main modules ||| main mod cache	count=1
class	a dict of ||| magics manager	count=1
module	the command ||| core	count=1
class	a ||| shell	count=5
class	by ||| prefilter manager	count=1
function	a list of lines ||| lines	count=1
function	simple exception [function_2] ||| [function_2] [function_1]	count=2
class	the ||| terminal interactive shell	count=2
module_class	[module_1] stdin ||| [module_1] [class_2]	count=6
function	latex characters ||| latex	count=1
module	list of ||| utils	count=1
function	[function_1] of lines ||| [function_2] [function_1]	count=1
function	some configuration options have ||| update	count=1
function	to edit ||| edit	count=1
class	stack and change directory ||| osmagics	count=1
module	ask for a ||| terminal	count=1
class	input buffer and associated ||| input	count=2
class	interactive ||| interactive	count=2
module_class	of input ||| core input splitter	count=1
function	reload() ||| reload hook	count=1
arg	data block ||| data input_prompt lineno	count=2
arg	block [arg_2] ||| [arg_1] [arg_2]	count=1
class	the ||| terminal interactive	count=1
class	for a re computation ||| terminal interactive shell	count=1
arg	metadata to all ||| metadata	count=1
arg	up the prompt_toolkit keyboard ||| registry shell	count=1
module	for ||| core magics	count=1
function	hash ||| hash	count=1
function	that [function] maps the ||| bind [function]	count=1
arg	hash given directory pkg_path ||| pkg_path	count=1
function	a profile ||| profile	count=1
arg	name [arg_2] ||| [arg_1] [arg_2]	count=1
module	of ||| utils	count=7
function	factory ||| pprinter factory	count=2
function	[function_1] an alias ||| [function_1] [function_2]	count=1
function	current ||| current str	count=1
module_class	of the [class_2] ||| [module_1] [class_2]	count=12
function	[function_1] to unicode ||| [function_2] [function_1]	count=7
class	given job ||| job manager	count=1
function	sys [function_2] ||| [function_1] [function_2]	count=1
function	to return a repr ||| safe repr	count=1
function	of history [function] into 3-tuples ||| extract hist [function]	count=1
class	=> import modules for ||| autoreload magics	count=1
function	code or ||| line code	count=1
arg	block for output token ||| output_prompt input_lines output	count=1
function	ends in a comment ||| ends in comment	count=1
class	new history ||| history	count=1
function	[1]:/ : prompts ||| ipy prompt	count=1
class	execution of ||| execution	count=1
function	[function_1] system ||| [function_2] [function_1]	count=1
class	information ||| arg	count=2
class	example some configuration options ||| interactive shell	count=1
class	this object's information ||| arg decorator	count=1
function	configuration options ||| update	count=1
arg	frozensets ||| start end basetype	count=1
function	[function] logging is ||| [function]	count=2
class	[class_1] [class_2] ||| [class_1] [class_2]	count=21
function	image file to ||| image	count=1
module_class	the transformed ||| core stateless	count=1
class	move the ||| demo	count=1
function	[function_1] figure to ||| [function_1] [function_2] fig fmt bbox_inches	count=1
class	overridden from ||| interactive	count=1
function	last [function_2] ||| [function_2] [function_1]	count=3
function_arg	[function_1] with ||| [function_1] [arg_2]	count=3
function	for deprecation ||| deprecation	count=1
function	hashed version ||| passwd	count=1
module	ask for a re ||| terminal	count=1
function	changed [function_2] ||| [function_2] [function_1]	count=2
class	[class] operator ||| [class] ops	count=3
function	[function_1] data dict ||| [function_2] [function_1]	count=3
module	the state of this ||| core	count=1
function	ipython ||| register ipython	count=1
function	an input line ends ||| ends	count=1
arg	block for ||| input_prompt lineno	count=1
arg	argment readline which must ||| readline	count=1
module	is ||| external	count=1
function_arg	[function_1] passed ||| [arg_2] [function_1]	count=2
class	format ||| formatter	count=1
arg	for all exceptions ||| obj p cycle	count=1
arg	or not [arg] ||| [arg]	count=1
arg	at most one input ||| rgxin rgxout fmtin	count=1
arg	switch ||| parameter_s	count=1
module_class	silence the display ||| core display	count=1
module	return the list of ||| core	count=1
class	re computation ||| interactive	count=1
class	this inputsplitter ||| input splitter	count=1
function	[function_1] state of ||| [function_2] [function_1]	count=1
function	active ipython profile ||| profile	count=1
function	[function_1] format data ||| [function_1] [function_2]	count=2
class	optionally display ||| ipython app	count=1
function	repr of an object ||| safe repr	count=1
function	deferred type registry ||| deferred	count=1
arg	need to be reloaded ||| check_all do_reload	count=1
class	reload ||| display object	count=1
class	rerun ||| terminal magics	count=1
function	determine if ||| last	count=1
function	list of ||| list	count=1
function	get the commit hash ||| commit hash	count=1
function	info about a ||| session info	count=1
function	page a ||| page	count=1
module_class	[module_1] database ||| [module_1] [class_2]	count=8
arg	pprint function useful ||| start end basetype	count=1
function	optionally display the banner ||| init banner	count=1
function	show a single ||| show	count=1
function	update user_ns ||| update	count=1
module	the color table ||| core	count=1
class	formatter for ||| base formatter	count=2
function	type it ||| type	count=1
arg	object for ||| obj	count=1
arg	part is a string ||| part	count=1
function	module and insert ||| module	count=1
function	[function_1] last ||| [function_2] [function_1]	count=1
arg	or pyside2 [arg] submodules ||| [arg]	count=1
function_arg	add a [arg_2] ||| [function_1] [arg_2]	count=1
function	[function_1] indentation ||| [function_1] [function_2]	count=1
function	commit [function_2] ||| [function_1] [function_2]	count=4
function	[function_1] to edit ||| [function_1] [function_2]	count=2
function	sys __stderr__, ||| err	count=1
class	of ||| magics manager	count=1
function	to safely stop ||| stop	count=1
class	have changed ||| terminal interactive shell	count=1
arg	in a pager piping ||| pager_cmd	count=1
function	[function_1] main modules ||| [function_2] [function_1]	count=2
function_arg	paragraphs to [arg_2] ||| [function_1] [arg_2]	count=1
module	with the ||| core	count=2
arg	new event callback parameters ||| event function	count=1
function	translate ||| tr magic	count=2
class	pointer back ||| demo	count=1
function	dir [function_2] ||| [function_1] [function_2]	count=2
class	input buffer ||| ipython input splitter	count=1
class	new history [class_2] ||| [class_1] [class_2] init	count=1
function	in ||| in	count=3
class	configuration ||| interactive	count=1
arg	[arg_1] level ||| [arg_1] [arg_2]	count=1
arg	a warning of class [arg_1] [arg_2] ||| [arg_1] [arg_2]	count=10
class	the ||| terminal	count=3
arg	info dict [arg_2] ||| [arg_2] [arg_1]	count=2
class	new history [class_2] ||| [class_2] [class_1]	count=1
function	doctest ||| doctest	count=2
function	in ipython ||| ipython	count=4
function	report summary for ||| report	count=1
function	history previous unlike ||| next history	count=1
function	a style name ||| name	count=1
function	image file ||| image	count=1
function	ipython [function] of ||| get ipython [function]	count=1
function	token ||| token	count=1
module	the rest ||| core	count=1
function	factory that ||| factory	count=2
class	options ||| terminal interactive shell	count=2
function	[function_1] comment ||| [function_2] [function_1]	count=5
class	a traceback ||| tb	count=1
function	code of ||| code	count=1
class	in history ||| history manager	count=1
arg	output token ||| input_lines output	count=2
function	[function_1] unicode name ||| [function_2] [function_1]	count=4
function	check whether some ||| check	count=1
function	find the [function_1] [function_2] of ipython ||| core [function_2] [function_1]	count=1
function	[function_1] style name ||| [function_2] [function_1]	count=1
function	[function] handler for ||| [function]	count=1
function	an exception call for ||| call	count=1
arg	[arg_1] block ||| [arg_2] [arg_1]	count=2
arg	text and line ||| text	count=1
class	ask for a re ||| terminal	count=1
function	type of an ||| type	count=1
function	comment or within a ||| comment or	count=1
class	in history and ||| history manager	count=1
module	is ||| utils	count=1
function	history ||| history	count=1
module_class	activate the interactive ||| terminal interactive shell	count=1
function	[function_1] event ||| [function_2] [function_1]	count=3
arg	exception [arg_2] ||| [arg_2] [arg_1]	count=4
function	code or ||| cmd line code	count=1
function_arg	name [arg_2] ||| [function_1] [arg_2]	count=3
function	find the [function_1] [function_2] ipython ||| [function_2] [function_1]	count=1
class	that is left in ||| pretty printer	count=1
class	overridden from the parent ||| terminal interactive shell	count=1
function	[function] of ||| get ipython [function]	count=1
function	the [function] ipython ||| get ipython module [function]	count=1
function	history [function] into 3-tuples ||| extract hist [function]	count=1
function	completer for %reset magic ||| reset completer	count=1
function	ensure __all__ ||| all	count=1
function	screen ||| screen	count=1
arg	class ||| cls	count=1
function	wx event loop ||| event loop wx	count=2
function_arg	[function_1] cocoa nsapp ||| [function_1] [arg_2]	count=1
class	=> import ||| autoreload	count=1
class	for a ||| shell	count=1
function	is a directory ||| dir	count=1
function	print [function_2] ||| [function_1] [function_2] fig fmt bbox_inches	count=3
arg	prompt_toolkit keyboard ||| registry shell	count=1
class	the seek ||| demo	count=1
module	extract [module] set of ||| [module]	count=2
class	of the ||| terminal interactive	count=1
function_arg	pprint for [arg_2] ||| [arg_2] [function_1]	count=1
function	but for ipy or ||| safe execfile ipy	count=1
module	execution ||| core magics	count=1
class	seek pointer back one ||| demo	count=1
function	comment or within ||| comment or	count=2
function	[function_1] code ||| [function_1] [function_2]	count=1
module	[module_1] [module_2] ||| [module_2] [module_1]	count=2
function	current session a ||| name session	count=1
function	line ends [function_2] ||| [function_1] [function_2]	count=6
function	files from ||| files	count=1
function	a completer for %reset ||| completer	count=1
function	sequence of ast ||| ast	count=1
class	for ||| interactive	count=2
function	match latex ||| latex	count=1
arg	an ||| oname formatter	count=1
function	set ||| set	count=7
function	return [function_2] ||| [function_1] [function_2]	count=2
function	object info as ||| object	count=1
class	in ipythonapp ||| interactive shell app	count=1
function_arg	transform a [arg_2] ||| [function_1] [arg_2]	count=2
arg	warning_class is ||| warning_class	count=1
module	seek pointer back one ||| lib	count=1
module	the pre-flight ||| core	count=1
function_arg	arguments [arg_2] ||| [arg_2] [function_1]	count=3
module	options ||| terminal	count=1
module	the splitter and ||| core	count=1
class	configuration options have changed ||| terminal interactive shell	count=1
arg	given raw [arg_2] ||| [arg_2] [arg_1]	count=2
module	the cmd ||| core	count=1
arg	line returning ||| line continue_prompt	count=2
arg	does not provide one ||| p cycle	count=1
function	unicode name this ||| name matches	count=2
function	of a function ||| function	count=1
class	having ||| auto magics	count=3
arg	for output token ||| input_lines output	count=2
module	a ||| core	count=1
function	function ||| func	count=1
function	return ||| repr	count=1
class	for pretty printing ||| basic magics	count=2
function	calls to catch ||| catch	count=1
function_arg	[function_1] target ||| [function_1] [arg_2]	count=2
function	wake ||| wake	count=1
function	using os system on ||| system	count=1
function	[function_1] store it ||| [function_2] [function_1]	count=2
class	given ||| event manager	count=1
function	to catch [function_2] ||| [function_1] [function_2]	count=1
function	environment ||| init environment	count=1
function_arg	[function_1] [arg_2] ||| [function_1] [arg_2] source_raw	count=1
arg	[arg] context ||| [arg] line_buffer	count=2
function	of cpus ||| cpus	count=1
function	effective number of cpus ||| num cpus	count=1
function	metadata ||| metadata	count=2
function	input and ||| range	count=1
class	find ||| interactive shell	count=1
arg	remove a callback from ||| function	count=1
function	sqlite ||| sqlite	count=1
function	of cwd ||| cwd	count=1
function	[function_1] by ||| [function_2] [function_1]	count=2
class	configuration options have changed ||| shell	count=1
class	remove ||| builtin trap	count=1
arg	to eval() ||| expression glob loc	count=1
class	options have ||| shell	count=1
module	like the ||| core magics	count=1
arg	oinfo dict ||| oinfo format_call	count=1
class	url ||| audio	count=2
function	name for ||| name	count=1
function	user [function_2] ||| [function_2] [function_1]	count=1
function_arg	the generate_tokens() [function_1] [arg_2] ||| [function_1] [arg_2]	count=2
function_arg	parse options [arg_2] ||| [function_1] [arg_2]	count=4
function	factory ||| seq pprinter factory	count=1
function	/psearch call from ||| call	count=1
function	to all ||| all	count=1
function_arg	/psearch call [arg_2] ||| [function_1] [arg_2]	count=2
class	for example ||| terminal	count=1
function	wrap ||| wrap	count=1
function	recursively [function] ||| [function]	count=3
function	input line ends in ||| ends in	count=1
function	module in ||| module	count=3
class	for example some ||| terminal	count=1
function	object of a function ||| update function	count=1
module	the enabled transformers ||| core	count=1
function	for ipy or ipynb ||| safe execfile ipy	count=1
function	ast [function_2] ||| [function_2] [function_1]	count=2
function	line ||| line	count=1
function	code insertion ||| get mci	count=1
function	stdout ||| stdout raw	count=2
module	having ||| core magics	count=1
class	script ||| script magics	count=1
function	[function] otherwise identical ||| raw print [function]	count=2
module	extract [module] set ||| [module]	count=2
class	without a traceback ||| tb	count=1
function	a line ||| line	count=1
function	current level of indentation ||| indent current str	count=1
function	example some ||| update	count=1
function	svg representation of ||| svg	count=1
function	[function_1] file ||| [function_1] [function_2]	count=4
arg	prefix to a ||| prefix delims	count=1
arg	exception handler ||| exc_tuple handler	count=2
function	extract call tip data ||| call tip	count=1
class	is always defined ||| shim module	count=1
function	for ||| for	count=1
function	error ||| err	count=2
module	active in [module] compilation ||| [module]	count=1
function	find what to edit ||| find edit target	count=1
function	as used by ||| by	count=1
module	return the ||| lib	count=1
class	ipython into a running ||| interactive shell	count=1
arg	[arg_1] as a ||| [arg_2] [arg_1]	count=2
arg	path is ||| path	count=1
function	open ||| open	count=1
class	[class_1] schemes ||| [class_1] [class_2]	count=1
class	the ||| demo	count=1
arg	data block ||| data output_prompt	count=2
arg	upgrade the code object ||| old new	count=1
function	the current session a ||| name session	count=1
arg	through a ||| data start screen_lines	count=1
function	for a re ||| update	count=1
class	ask for ||| interactive	count=1
arg	name ||| name	count=7
function	compute ||| call	count=1
class	all jobs ||| background job manager	count=1
module	the user ||| core magics	count=1
class	back one block and ||| demo	count=1
arg	frame ||| frame	count=1
function	code object ||| run code	count=1
function_arg	[function_1] mod altmod ||| [function_1] [arg_2]	count=1
function	[function_1] [function_2] comment if found in ||| [function_1] [function_2] cookie	count=1
class	overridden from the ||| terminal interactive	count=1
function	report summary ||| group report	count=1
function	[function_1] warning ||| [function_1] [function_2]	count=4
function	token at [function_2] ||| [function_2] [function_1]	count=1
module	second line has the ||| core	count=1
class	[class_1] object ||| [class_2] [class_1]	count=2
class	some ||| terminal interactive shell	count=2
function	to set ||| set	count=1
arg	readline which must be ||| readline	count=1
function	module and insert ||| load module	count=1
class	from the parent ||| terminal interactive	count=1
arg	an [arg_2] ||| [arg_2] [arg_1]	count=6
function	[function_1] name this ||| [function_2] [function_1]	count=4
function	of ||| default	count=1
module	set the default ||| core	count=1
module	the user if called ||| core magics	count=1
function	[function_1] [function_2] ||| [function_2] loop [function_1]	count=1
function	[function_1] file ||| [function_2] [function_1]	count=4
module_class	need to make to [module_1] [class_2] ||| [module_1] [class_2]	count=2
function	line ||| line info	count=2
function	named module in the ||| module	count=2
function	image file ||| save image	count=1
arg	turn ||| ranges_str	count=1
function	wx [function_2] ||| [function_2] [function_1]	count=13
arg	handler which will be ||| handler	count=1
function	__dict__ of a class ||| class	count=1
function	[function_1] in a ||| [function_2] [function_1]	count=4
class	a given job ||| job	count=1
class	a new history manager ||| history manager	count=1
class	one block and ||| demo	count=1
class	for a given job ||| background job	count=1
class	always defined ||| shim module	count=1
class	the colored source ||| parser	count=1
arg	information ||| arg	count=2
function	info about ||| session info	count=1
class	dead job ||| job manager	count=1
arg	frontend ||| format_dict md_dict	count=1
module	completer for [module] command line ||| [module]	count=1
function	[function_1] in ||| [function_1] [function_2]	count=4
class	have ||| interactive shell	count=2
function	get the commit ||| commit	count=1
function	history previous ||| history	count=1
module	pointer back one ||| lib	count=1
arg	in [arg] ||| [arg]	count=1
function	and clear ||| clear	count=1
function	a block of html ||| html	count=1
class	example some ||| terminal interactive shell	count=1
module	automatic calling of the ||| core	count=1
class	some configuration ||| interactive shell	count=1
function	check if the user ||| check	count=1
function	sort by ||| sort	count=1
module	[module] exception ||| [module]	count=2
class	of ||| shell	count=1
function_arg	getattr to [arg_2] ||| [arg_2] [function_1]	count=1
function	[function_1] event loop ||| [function_2] running [function_1]	count=2
function	that [function] maps ||| bind [function]	count=1
arg	generic ||| msg oname	count=1
class	configuration ||| shell	count=1
function_arg	[function_1] parameters ||| [arg_2] [function_1]	count=1
module	with [module] ||| [module]	count=1
function	[function_1] [function_2] ||| [function_2] [function_1]	count=139
function	a safe version of ||| safe	count=1
class	ask ||| interactive shell	count=2
module	the ipython ||| core	count=1
function	[function_1] set ||| [function_2] [function_1]	count=4
function	display the banner ||| init banner	count=1
function	pager after a certain ||| pager page	count=1
function	get object ||| object	count=1
arg	[arg_1] buf ||| [arg_2] [arg_1]	count=3
arg	for good the current ||| parameter_s	count=1
function_arg	given cmd in ||| raw cmd	count=1
function	find and return ||| find	count=1
class	of traceback ||| list tb	count=1
function	or ||| get or	count=1
module	a statement through the ||| core magics	count=1
arg	a callback ||| function	count=1
function	module and namespace in ||| module	count=1
function	a format [function_2] ||| [function_2] [function_1]	count=1
function	module in this version ||| module	count=1
arg	saves the ||| image_file	count=1
class	back ||| demo	count=1
class	without having to ||| auto magics	count=2
function	pdf representation of ||| pdf	count=1
arg	session ||| session	count=2
class	a new job ||| background job	count=1
module	if [module] transformer is ||| [module]	count=1
function_arg	[function_1] obj if ||| [arg_2] [function_1]	count=4
class	computation of the ||| terminal	count=1
module_class	[module_1] [class_2] ||| [module_1] verbose [class_2]	count=1
function	exception call for ||| call	count=1
class	overridden from the ||| terminal interactive shell	count=2
function	[function_1] hash ||| [function_2] [function_1]	count=4
arg	and frozensets ||| start end basetype	count=1
function	the application layout if ||| update layout	count=1
arg	format ||| formatter	count=1
function_arg	#! line of ||| shebang line	count=1
function	data ||| data	count=2
arg	compute a probably unique ||| number	count=1
function	the [function] ||| get ipython module [function]	count=2
function	ipy ||| ipy	count=1
arg	compatible with sys ||| etype evalue etb	count=1
function	file as a ||| file	count=1
function	yield pasted lines until ||| pasted lines	count=1
function	of cpus in ||| num cpus	count=1
class	a re computation of ||| interactive	count=1
function	file as ||| file	count=1
function	of cpus ||| num cpus	count=1
function	pasted ||| get pasted	count=1
function_arg	ast [arg_2] ||| [function_1] [arg_2]	count=1
class	variable from ||| interactive	count=1
class	ask for a re ||| interactive	count=1
function	but for ipy or ||| ipy	count=1
function	profile dir and ||| find profile dir	count=2
class	or dead job ||| job manager	count=1
function	script ||| script	count=2
function	is history ||| next history	count=1
function	[function_1] input and ||| [function_2] [function_1]	count=1
arg	for compatible with ||| etype evalue etb	count=1
function	have changed ||| update	count=1
module_class	[module_1] inputsplitter ||| [module_1] [class_2]	count=2
function	get lines ||| get	count=1
function	line ends in a ||| ends in	count=1
class	example ||| interactive	count=1
module	the original ||| core	count=2
class	transform ||| prefilter transformer	count=1
function	for example some configuration ||| update	count=1
module_class	the transformed input ||| core stateless input	count=1
function	[function_1] the last ||| [function_1] [function_2]	count=1
function	pretty printer for ||| for	count=1
arg	parameters ||| themacro	count=1
class	seek pointer ||| demo	count=1
function	[function_1] lines until ||| [function_1] [function_2]	count=2
function	class and ||| update class	count=1
function_arg	[function_1] [arg_2] input ||| [function_1] [arg_2] source_raw	count=1
function_arg	write [arg_2] ||| [function_1] [arg_2]	count=3
module	silence the ||| core	count=1
arg	a path into ||| path	count=1
function	ast with ||| ast	count=1
function	[function_1] config file ||| [function_2] [function_1]	count=1
module	of a certain ||| utils	count=1
class	having to type parentheses ||| auto	count=1
function	[function_1] options ||| [function_2] [function_1]	count=1
arg	converts a bytes string ||| txt errors skip_encoding_cookie	count=1
function	in the [function_2] ||| [function_1] [function_2]	count=1
arg	find/create ||| cls profile_dir	count=1
function	check if the ||| check	count=1
function	ask for a re ||| update	count=1
module	slice of the ||| core	count=1
arg	[arg_1] if obj ||| [arg_2] [arg_1]	count=2
module	from the main thread ||| core	count=1
class	transformer ||| transformer	count=2
function_arg	[function_1] for compatible ||| [arg_2] [function_1]	count=3
class	a dict of ||| magics	count=1
arg	lines ||| line_info	count=1
module	and close ||| core	count=1
class	the transformer ||| transformer	count=1
function	return a repr ||| safe repr	count=1
function	[function_1] name ||| style [function_1] [function_2]	count=1
function	[function_1] builtin and ||| [function_1] [function_2]	count=1
function	base on the name ||| name	count=1
arg	a session ||| session	count=1
function_arg	file [arg_2] ||| [arg_2] [function_1]	count=1
module	common list of ||| core	count=1
arg	upgrade ||| old new	count=2
class	a re computation of ||| shell	count=1
module	the exception ||| core	count=1
module	of commit hash ||| utils	count=1
function	import [function] given ||| [function]	count=1
arg	and salt for ||| passphrase algorithm	count=1
function	cpus in the system ||| num cpus	count=1
function	active [function] scheme and ||| [function]	count=1
arg	piping through ||| screen_lines pager_cmd	count=2
function	cpus ||| cpus	count=1
function_arg	[function_1] obj ||| [function_1] [arg_2]	count=4
class	object to ||| display hook	count=1
function	[function_1] dir ||| [function_1] [function_2]	count=1
function_arg	html [arg_2] ||| [function_1] [arg_2]	count=1
function_arg	arguments of [arg_2] ||| [function_1] [arg_2]	count=4
function	object's information to ||| to	count=1
arg	a target ||| target	count=1
function	2 /psearch call from ||| make help call	count=1
function	get the token at ||| token at	count=1
function	from [function_2] ||| style [function_1] [function_2]	count=2
class	the ||| interactive	count=1
function	raw ||| raw	count=1
function_arg	data [arg_2] ||| [function_1] data [arg_2]	count=4
class	embedded ipython shell ||| embedded sphinx shell	count=1
function	the application layout if ||| layout	count=1
function	[function_1] unicode ||| [function_1] latex name [function_2]	count=2
function	handle input lines ||| handle	count=1
class	directory ||| dir	count=1
function	is sys excepthook ||| excepthook	count=1
class	display ||| terminal ipython app	count=2
module	of the main ||| core magics	count=1
class	for a re ||| terminal interactive	count=1
class	computation of the ||| terminal interactive	count=1
function	config ||| config	count=2
arg	a given name ||| name	count=1
function_arg	pylab support [arg_2] ||| [arg_2] [function_1]	count=1
function	a log ||| log	count=1
arg	[arg_1] fullname ||| [arg_2] [arg_1]	count=2
class	example some configuration ||| shell	count=1
arg	altmod [arg_2] ||| [arg_1] [arg_2]	count=2
function_arg	options [arg_2] ||| [function_1] [arg_2]	count=4
function	next command line ||| next	count=1
function	enable ||| enable	count=1
class	history from a string ||| history accessor	count=1
function_arg	call [arg_2] ||| [arg_2] [function_1]	count=2
function	module in the ||| module	count=2
function	place ||| pushd	count=1
function	make a new ||| init	count=1
arg	of spaces or tabstops ||| instr nspaces ntabs flatten	count=1
module_class	[module_1] transformer ||| [module_1] [class_2]	count=1
arg	executing cmd in a ||| cmd	count=1
arg	readline ||| readline	count=1
module	has set the ||| core	count=1
function	name we need that ||| name	count=1
class	of the ||| terminal interactive shell	count=1
class	unregister ||| prefilter manager	count=1
function	[function_1] dir ||| [function_2] [function_1]	count=1
arg	from a target name ||| target	count=1
function	mode ||| mode	count=1
module	with the current ||| core	count=1
function	tip data from ||| tip	count=1
function	loop in ||| loop	count=1
function	clipboard's text ||| clipboard	count=2
function	factory that ||| pprinter factory	count=2
module	in [module] ||| [module]	count=1
function	of ast nodes ||| ast nodes	count=2
function	repr of ||| safe repr	count=1
arg	with customizable conflict resolution ||| __loc_data__ __conflict_solve	count=1
function	call [function_2] ||| [function_2] [function_1]	count=4
module	display the ||| terminal	count=1
module	print the ||| core	count=1
function	setup ||| visit function def	count=1
function	os system on windows ||| system	count=1
function_arg	[function_1] for code ||| [function_1] [arg_2]	count=1
function	remove [function_2] ||| [function_1] [function_2] cookie	count=1
function	cursor used ||| cursor	count=1
arg	not [arg] ||| [arg]	count=1
module_class	[module_1] input ||| [module_1] [class_2]	count=10
function	profiler used by %prun ||| profiler	count=1
function	return simple exception ||| error	count=1
function	sys [function] do non-blocking ||| [function] raw	count=1
arg	piping ||| pager_cmd	count=2
function	event [function_2] ||| [function_2] [function_1]	count=8
function_arg	[function_1] passed to ||| [arg_2] [function_1]	count=2
function	finish ||| finish	count=1
arg	block ||| input_prompt	count=1
function	try to fix ||| fix	count=1
arg	color formatted string ||| value elist tb_offset	count=1
function	matplotlib and ||| matplotlib	count=1
module	output of the ||| core	count=1
class	in history and create ||| history	count=1
function	path ||| path	count=1
module	for example ||| terminal	count=1
function	to stdout ||| stdout raw	count=1
function	used to set ||| set	count=1
module	the state ||| core	count=1
class	return a dict ||| manager	count=1
module	into the ||| core	count=1
function_arg	[function_1] columnize ||| [function_1] rlist [arg_2]	count=1
function	search ||| search	count=1
class	of input history ||| history	count=1
module	into the current ||| core magics	count=2
arg	given raw ||| url filename	count=1
arg	given backend and ||| backend	count=1
class	system ||| basic	count=1
class	configuration ||| interactive shell	count=2
class	store ||| terminal magics	count=1
function	pasted ||| pasted	count=1
module	ending with [module] exception that ||| [module]	count=1
class	[class] operator we ||| [class] ops	count=3
function	the image file to ||| image	count=1
arg	compatible with ||| etype evalue etb	count=1
module	currently active exception mode ||| magics	count=1
function	update the [function_2] ||| [function_2] [function_1]	count=3
arg	val should ||| val	count=1
class	transformers ||| ipython input splitter	count=1
function_arg	[function_1] string ||| [function_1] [arg_2]	count=2
arg	[arg] submodules supports ||| [arg]	count=1
module	run the ||| lib	count=1
module	information about the ||| core	count=1
function	options have changed ||| update	count=1
function	shortcuts for ipython ||| register ipython shortcuts	count=3
function	startup directory ||| startup	count=1
function	event loop in ||| event loop	count=2
function	to ||| to	count=5
module	to [module] default ||| [module]	count=1
module	of the active ||| core	count=1
arg	exception handler which ||| exc_tuple handler	count=2
module	a newline the ||| core	count=1
function	for ipython ||| register ipython	count=1
class	shell ||| shell	count=1
arg	module ||| module	count=1
module_class	the active [class_2] ||| [module_1] [class_2]	count=4
function	[function_1] cursor used ||| [function_1] [function_2]	count=4
function	path ||| path name	count=1
arg	eval() ||| expression glob loc	count=1
arg	[arg_1] screen_lines ||| [arg_1] [arg_2]	count=1
function	for [function] ||| [function] pattern	count=1
class	computation of ||| terminal	count=1
module	use a ||| utils	count=1
arg	number of ||| num	count=1
module_class	of the object ||| core display hook	count=1
arg	buf ||| buf	count=1
function	[function_1] [function_2] comment if found in ||| [function_1] [function_2]	count=1
module	return a ||| core	count=1
function	the name ||| mirror name	count=1
class	re computation of ||| interactive shell	count=1
function	display the banner ||| banner	count=1
arg	spaces or tabstops ||| instr nspaces ntabs flatten	count=1
function	[function_1] return ||| [function_2] [function_1]	count=2
module_class	silence the [class_2] ||| [module_1] [class_2]	count=4
class	ask for a ||| shell	count=1
function	generate_tokens() [function] requires ||| generate [function]	count=1
function_arg	[function_1] mod ||| [function_1] [arg_2]	count=1
function	filenames ||| records filenames	count=1
class	input buffer and ||| input	count=2
function	the format data dict ||| format data	count=1
arg	and upgrade ||| old new	count=1
function	to import the module ||| find module	count=1
class	pretty much any python ||| python	count=1
class	[class_1] [class_2] ||| [class_2] [class_1]	count=24
arg	[arg_1] [arg_2] ||| [arg_2] [arg_1]	count=113
arg	fullname ||| fullname	count=1
function	color table ||| colors	count=1
function	at a given ||| at	count=1
function	yield pasted lines ||| get pasted lines	count=2
class	tb reference ||| verbose tb	count=2
arg	to a magic ||| magic_name magic_kind	count=1
function	cache of [function_2] ||| [function_2] [function_1]	count=2
module	the main ||| core	count=1
function	[function_1] state of ||| [function_1] sys module [function_2]	count=1
function_arg	a pprint [arg_2] ||| [function_1] [arg_2]	count=2
class	one ||| splitter	count=2
class	writes ||| win32shell command controller	count=1
module	the inline ||| core	count=2
arg	through a pager after ||| data start screen_lines	count=1
module	stdout/err as ||| utils	count=1
function	deprecation warning ||| deprecation warnings	count=1
class	formatter for a given ||| formatter	count=1
arg	[arg_1] handler ||| [arg_2] [arg_1]	count=1
function	split a ||| split	count=1
function	a repr of an ||| safe repr	count=1
arg	the line and ||| line	count=1
function	define an alias ||| define alias	count=2
function_arg	[function_1] cmd in ||| [function_1] [arg_2]	count=1
function	find the [function_1] [function_2] ipython ||| core [function_2] [function_1]	count=1
function	extensions ||| init extensions	count=1
class	from ||| interactive shell	count=2
function	default [function_2] ||| [function_1] [function_2]	count=6
class	object to be displayed ||| display hook	count=1
function_arg	[function_1] a target ||| [arg_2] [function_1]	count=3
function	if it is imported ||| reloadable	count=1
class	'', ||| interactive shell app	count=1
function	from ||| from	count=2
arg	an info dict and ||| info	count=1
function	[function_1] tip ||| [function_1] [function_2]	count=2
function	characters back [function_2] ||| [function_2] [function_1]	count=5
arg	pager piping through ||| screen_lines pager_cmd	count=1
function	errors from a corrupt ||| corrupt	count=1
module	move the ||| lib	count=1
module	render the ||| core	count=1
function	currently active ipython profile ||| profile	count=1
class	functions callable without having ||| auto	count=2
class	object's information ||| arg method wrapper	count=2
arg	mod altmod [arg_2] ||| [arg_2] [arg_1]	count=2
function	list item number or ||| or	count=1
function	session ||| session	count=2
module_class	in the [class_2] ||| [module_1] [class_2]	count=2
arg	line of input to ||| line	count=2
module_class	[module_1] cmd chain ||| [module_1] [class_2]	count=2
function_arg	generator [arg_2] ||| utils generate [function_1] [arg_2]	count=2
arg	sets and frozensets ||| start end basetype	count=1
class	from the parent class ||| terminal interactive shell	count=1
module	for line ||| magics	count=1
arg	display a string piping ||| pager_cmd	count=1
module	current dir ||| magics	count=1
function	os system ||| system	count=1
function	a group if ||| group	count=1
function	new ||| init	count=2
function	re-execute ||| again	count=1
function	[function_1] list of ||| [function_2] [function_1]	count=1
function	toggle doctest mode on ||| doctest mode	count=1
function	for ipy ||| ipy	count=1
function	[function_1] multiple paragraphs ||| [function_2] [function_1]	count=1
function	hash from in order ||| hash	count=1
class	of ||| interactive shell	count=2
arg	of executing cmd ||| cmd	count=1
arg	upgrade the code ||| old new	count=1
function	[function_1] comment ||| [function_1] [function_2]	count=5
function	completer for %reset ||| completer	count=1
class	flags ||| caching	count=1
class	re computation of the ||| terminal interactive	count=1
arg	store ||| store	count=1
function	the state ||| state	count=1
function	ipy or ||| ipy	count=1
function	call tip data from ||| call tip	count=1
module	system as ||| utils	count=1
function	sigint ||| posix	count=2
class	profile ||| basic magics	count=1
function	loop in a consistent ||| loop	count=1
module	of the way ||| core	count=1
module	has the ||| core	count=1
function	ast [function_2] ||| [function_1] [function_2]	count=2
class	process ||| sphinx shell	count=4
function	returning ||| push	count=1
arg	that just redirects ||| obj p cycle	count=1
class	a dict of ||| manager	count=1
function_arg	[function_1] target ||| [arg_2] [function_1]	count=2
function	add ||| add	count=5
function	name we need ||| name	count=1
module	example some ||| terminal	count=1
function	pre-flight code ||| code	count=1
class	set ||| ipy autocall	count=1
function	given cursor used ||| cursor	count=1
function	but for ipy ||| safe execfile ipy	count=1
function	default shutdown ||| shutdown	count=1
function	retrieve input by ||| get range	count=1
class	reference ||| verbose	count=1
class	any lines that ||| input	count=1
function	embedded ipython ||| embedded	count=1
function	ipy or ipynb files ||| ipy	count=1
arg	through a pager after ||| screen_lines	count=1
function	a profile ||| find profile	count=1
function	computation of the ||| update	count=1
module	on screen ||| lib	count=2
function	default ||| default	count=4
function	[function] comment ||| [function]	count=1
class	clear ||| interactive shell	count=1
class	pointer ||| demo	count=1
function_arg	[function_1] a string ||| [function_1] [arg_2]	count=2
arg	prompt-toolkit is idle call ||| context	count=1
module	the next possible completion ||| core	count=1
class	set ||| scheme table	count=1
function	paragraphs ||| paragraphs	count=1
arg	cell as ||| line cell	count=4
function	wake the application ||| wake	count=1
function	a blank ||| blank	count=1
function	main modules ||| main mod	count=1
function	of html ||| html	count=1
function	[function] completer ||| [function]	count=1
function	default print function ||| default pprint	count=2
class	a dict ||| manager	count=1
module	some configuration options ||| terminal	count=1
function	parse ||| parse argstring	count=2
class	without having ||| auto magics	count=2
arg	(i ||| lspace next_input	count=1
function_arg	format data [arg_2] ||| [function_1] [arg_2]	count=1
function	app ||| get app	count=1
module	return the next ||| core	count=1
function	loop [function_2] ||| [function_2] [function_1]	count=2
arg	[arg_1] name ||| [arg_2] [arg_1]	count=10
function_arg	[function_1] api ||| [function_1] [arg_2]	count=1
module	for [module] ||| [module]	count=3
arg	filename and ||| filename	count=1
function	ipy or ||| safe execfile ipy	count=1
function	catch [function_2] ||| [function_1] [function_2]	count=1
function	get the token ||| token	count=1
function	shortcuts [function_2] ||| [function_2] [function_1]	count=2
class	history ||| history accessor	count=2
class	profile [class_2] ||| [class_1] [class_2]	count=1
arg	with esc_strings ||| esc_strings	count=2
function	the normal repr function ||| repr	count=1
function	open the default editor ||| editor	count=1
function	strings it is unedited ||| pure python	count=1
class	without having to ||| auto	count=2
module	use by the ||| core	count=1
class	the signature ||| signature	count=1
function	remove ||| strip	count=1
module	all subclasses of the ||| core	count=1
class	ask for a re ||| terminal interactive	count=1
class	display the ||| ipython app	count=1
class	a ||| magics	count=1
class	deprecated write [class] string to ||| [class]	count=1
module	should we silence the ||| core	count=1
arg	traceback ||| etype	count=1
function	of ast ||| ast	count=1
function	the last [function_2] ||| [function_1] [function_2]	count=3
function	code ||| line code	count=1
module	win32 [module] ||| [module]	count=1
function	a named file ||| file	count=1
function	style [function] ||| make style [function] name or	count=2
class	input buffer ||| input splitter	count=2
function	of cpus in the ||| num cpus	count=1
class	clear ||| syntax tb	count=1
arg	remove a callback ||| function	count=1
module	the content splitted ||| core	count=1
module	sys stdout/err as appropriate ||| utils	count=1
class	optionally display ||| terminal	count=1
function	[function] ipython ||| get ipython module [function]	count=1
function	optionally display the banner ||| banner	count=1
function	initialize all user-visible ||| init	count=1
function	qt4 [function_2] ||| [function_2] loop running [function_1]	count=1
module	populate the ||| core	count=1
function	taking [function] into ||| init gui [function]	count=1
function	backend ||| backend	count=1
function	strings in ||| get	count=1
class	for example some ||| terminal interactive	count=1
class	for a re ||| shell	count=1
function	return a repr of ||| safe repr	count=1
function	[function_1] dir and ||| [function_1] [function_2]	count=2
function	the image file to ||| save image	count=1
arg	%aimport ||| parameter_s stream	count=1
class	is ||| shim	count=1
function	catch [function_2] ||| [function_2] [function_1]	count=1
module	computation of ||| terminal	count=1
function_arg	[function_1] multiline ||| [function_1] string [arg_2]	count=8
function_arg	[function_1] [arg_2] ||| utils [function_1] [arg_2]	count=2
function	line ends ||| ends	count=1
arg	[arg] instance ||| [arg]	count=1
module_class	[module_1] input buffer ||| [module_1] [class_2]	count=4
class	re computation of the ||| interactive shell	count=1
function	to unicode ||| to unicode	count=2
function	[function_1] handler ||| [function_1] [function_2]	count=2
function	history previous unlike ||| history	count=1
module	as appropriate ||| utils	count=1
function	[function_1] figure ||| [function_1] [function_2]	count=1
arg	prefix to ||| prefix delims	count=1
function	show [function_2] ||| [function_2] [function_1]	count=1
function	profiler ||| prun	count=1
function	[function_1] last session ||| [function_1] [function_2]	count=1
module	activate the ||| terminal	count=1
function	give the current session ||| name session	count=1
arg	formatted string ||| value elist tb_offset	count=1
function	re computation of ||| update	count=1
arg	(wildcards * and ?) ||| pattern raw search_raw output	count=1
class	for example some ||| interactive shell	count=1
function	style [function_1] [function_2] ||| style [function_1] [function_2]	count=9
module	called from the ||| core	count=1
function	run ||| run	count=5
class	input buffer and associated ||| ipython input	count=1
arg	execute a function ||| func	count=1
arg	expand a path ||| path	count=1
function	the commit hash from ||| commit hash	count=1
module_class	[module_1] whole ||| [module_1] [class_2]	count=4
arg	readline library ||| namespace global_namespace use_readline	count=1
function	to import the module ||| module	count=1
function_arg	[function_1] into ||| [arg_2] [function_1]	count=5
class	interactiveshell to do ||| interactive shell	count=1
function	what to edit ||| edit	count=1
function	currently active [function] scheme and ||| [function]	count=1
arg	currently ||| case_sensitive	count=1
arg	line or ||| line	count=1
module_class	[module_1] active profile ||| [module_1] [class_2]	count=2
class	process ||| embedded sphinx shell	count=4
module	always ||| utils	count=1
class	some configuration options ||| interactive shell	count=1
module	the payloadmanager ||| core	count=1
module	database out of the ||| core	count=1
function_arg	[function_1] multiline ||| [arg_2] [function_1]	count=8
function	prompts [function_2] ||| [function_2] [function_1]	count=8
module	on [module] ||| [module]	count=2
module	a specified width ||| utils	count=1
function	default handlers ||| handlers	count=1
arg	and salt for use ||| passphrase algorithm	count=1
function	sys ||| sys	count=1
arg	obj if ||| obj	count=1
function	[function_1] name we ||| [function_2] [function_1]	count=1
function_arg	optimal [arg_2] ||| [arg_2] [function_1]	count=2
module_class	[module_1] profile ||| [module_1] [class_2]	count=2
class	format ||| base formatter	count=1
function	[function_1] comment or ||| [function_1] [function_2]	count=5
arg	data to ||| data	count=1
function	register ||| register handler	count=1
function	[function_1] code of ||| [function_2] [function_1]	count=2
arg	a cell via a ||| cell	count=1
module	return the [module_2] ||| [module_1] [module_2]	count=2
arg	if obj ||| obj	count=2
class	ipython into a ||| interactive shell	count=1
function	of a class ||| update class	count=1
function	merge two structs ||| merge	count=1
arg	sentinel ||| sentinel	count=1
arg	by callable when ||| func	count=1
function	transform assignment [function_1] [function_2] commands (e g files ||| [function_1] [function_2]	count=1
class	example ||| shell	count=1
class	some configuration options ||| terminal interactive shell	count=1
module	to sys stdout/err as ||| utils	count=1
function	code or file ||| cmd line code	count=1
arg	converts a ||| txt errors skip_encoding_cookie	count=1
function	[function_1] list ||| [function_2] [function_1]	count=1
function_arg	[function_1] line of ||| [arg_2] [function_1]	count=1
function	[function_1] data ||| [function_2] [function_1]	count=8
arg	items parameters ||| items	count=1
function	options have ||| update	count=1
function	comment [function_2] ||| [function_1] [function_2]	count=3
function	posix ||| posix	count=1
class	some configuration ||| terminal interactive shell	count=1
function	sys [function_2] ||| [function_2] [function_1]	count=1
function	status of the ||| status	count=1
arg	code ||| source filename symbol	count=1
class	write ||| display hook	count=1
function	arguments of ||| arguments	count=1
class	from [class_2] ||| [class_2] [class_1]	count=8
class	some configuration options ||| interactive	count=1
function	show matplotlib ||| show matplotlib	count=1
class	tee object ||| tee	count=1
module	seek pointer ||| lib	count=1
class	[class_1] pretty printing ||| [class_2] [class_1]	count=2
function	dict ||| user obj	count=1
function	find and return a ||| find	count=1
class	have ||| shell	count=1
function_arg	[function_1] at runtime ||| [arg_2] [function_1]	count=2
function	[function] do ||| [function] raw	count=1
function	stack ||| dirs	count=1
function	cpus ||| num cpus	count=1
function	base pprint for ||| pprint	count=1
function	back [function_2] ||| [function_2] [function_1]	count=5
arg	passed to an argument ||| arg_str opt_str	count=1
arg	%aimport ||| stream	count=1
function	ends in a blank ||| blank	count=1
function	copy a [function_2] ||| [function_2] [function_1]	count=2
arg	of variables into ||| variables	count=1
class	list of ||| profile list	count=1
class	for example some ||| interactive	count=1
function_arg	[function_1] cocoa ||| [function_1] [arg_2]	count=1
function	info dict with ||| info	count=1
function	dir and return its ||| dir	count=1
function	or store it ||| store or	count=2
function	shell aliases to auto-define ||| aliases	count=1
module	completer for [module] command ||| [module]	count=1
arg	[arg_1] name ||| [arg_1] [arg_2]	count=2
function	find what to edit ||| find edit	count=1
module	return the list ||| core	count=1
arg	the [arg] ||| [arg]	count=1
function	initialize all ||| init	count=1
arg	escape [arg_2] ||| [arg_2] [arg_1]	count=1
class	display ||| app	count=1
arg	reps ||| reps	count=1
class	ipython [class_2] ||| [class_2] [class_1]	count=1
module	the source code for ||| core	count=1
module	the system as ||| utils	count=1
function	a profile dir and ||| profile dir	count=1
class	re computation of the ||| interactive	count=1
function	dir and ||| dir	count=1
function	for a ||| for	count=1
function	input line [function] i e ||| [function]	count=1
arg	an ||| oname	count=3
function	is history previous unlike ||| history	count=1
function	from system ||| from system	count=1
module	current dir on stack ||| magics	count=1
class	example ||| interactive shell	count=2
function	compute format ||| compute format	count=2
module	of range for %%load ||| magics	count=1
class	seek pointer back ||| demo	count=1
arg	subname [arg_2] ||| [arg_1] [arg_2]	count=1
function	ast nodes the ||| ast nodes	count=2
function	for exception reporting ||| exception colors	count=1
function_arg	pylab support [arg_2] ||| [function_1] [arg_2]	count=1
arg	info to columnize ||| row_first	count=1
function	ipython [function] of ipython ||| get ipython [function]	count=1
function	run ||| run cmd	count=1
module	specified at the ||| core	count=1
class	example some ||| shell	count=1
class	[class_1] information ||| [class_2] [class_1]	count=4
function	[function_1] or within ||| [function_1] [function_2]	count=7
function	reshow ||| reshow	count=1
function_arg	[function_1] name ||| [function_1] [arg_2]	count=2
function	a pager after a ||| pager page	count=1
module_class	the handlers ||| core prefilter manager	count=1
arg	and salt ||| passphrase algorithm	count=1
function	initial spaces in ||| ini spaces	count=2
function	print the status ||| status	count=1
function	taking [function] into account ||| init gui [function]	count=1
class	set ||| color scheme table	count=1
class	optionally display the ||| terminal	count=1
arg	[arg_1] handler which ||| [arg_1] [arg_2]	count=1
function	at a [function_2] ||| [function_2] [function_1]	count=2
function	is ||| is	count=4
function	configuration options have ||| update	count=1
function	pinfo 2 /psearch call ||| help call	count=1
function	default config ||| config	count=1
module	single decorator for adding ||| magics	count=1
arg	element in args ||| args	count=1
arg	block for [arg_2] ||| [arg_2] [arg_1]	count=2
function	remove encoding ||| strip encoding	count=1
module_class	the user's ||| core interactive shell	count=1
arg	unless a warning of [arg_1] [arg_2] ||| external decorators assert warns [arg_1] [arg_2]	count=9
function	an alias ||| alias	count=2
class	formatter for a given ||| base formatter	count=1
function	full copy of the ||| copy	count=1
function	session [function_2] ||| [function_2] [function_1]	count=2
module	for ||| terminal	count=2
function	try to fix ||| fix frame	count=1
arg	completions ||| cursor_pos	count=1
arg	string piping ||| pager_cmd	count=1
module	for [module] %run command ||| [module]	count=1
function	return a format data ||| format display data	count=1
function	[function_1] user input ||| [function_1] [function_2]	count=1
arg	line and returns ||| line	count=1
function_arg	[function_1] for compatible ||| [function_1] [arg_2]	count=3
module	the raw data ||| core	count=2
arg	line and ||| line	count=1
function_arg	[function_1] data ||| [function_1] [arg_2]	count=2
function	method called after ||| post	count=1
function	a property ||| property	count=1
function	[function_1] [function_2] ||| [function_1] [function_2] fig fmt bbox_inches	count=7
function	blanks ||| blanks	count=1
class	for example some configuration ||| shell	count=1
function_arg	[function_1] fit ||| [arg_2] [function_1]	count=3
function	/psearch call from a ||| help call	count=1
module_class	the cmd [class_2] ||| [module_1] [class_2]	count=2
module_class	the [class_2] ||| [module_1] verbose [class_2]	count=1
function	of lines ||| lines	count=1
module	write the ||| core	count=1
function	list of default arguments ||| default arguments	count=1
function_arg	[function_1] oinfo dict ||| [function_1] [arg_2]	count=3
function	which [function] is ||| loaded [function]	count=1
module	re ||| terminal	count=1
class	options have changed ||| terminal	count=1
function	the [function] ||| load ipython [function]	count=4
module	active in [module] compilation process ||| [module]	count=1
arg	data ||| data	count=7
function	a given cursor used ||| cursor	count=1
function	[function] commands (e ||| assign [function]	count=1
arg	readline library ||| shell namespace global_namespace use_readline	count=1
function	transform assignment [function] commands (e ||| assign [function]	count=1
function	level of indentation as ||| indent	count=1
function	configuration options have changed ||| update	count=1
class	a display ||| display	count=1
function	catch ||| catch	count=1
class	options ||| interactive	count=1
arg	store [arg_2] ||| [arg_2] [arg_1]	count=2
arg	name return ||| name	count=1
class	clear ||| display publisher	count=1
module_class	[module_1] hook ||| [module_1] [class_2]	count=4
function	execute a ||| execute	count=1
function	can [function] executed ||| [function]	count=1
function	return list ||| default	count=1
arg	pager piping [arg_2] ||| [arg_2] [arg_1]	count=8
function_arg	[function_1] block ||| [function_1] [arg_2]	count=1
module	message about the ||| core	count=1
class	information ||| inspector	count=1
function	assuming ||| other	count=1
module	a string ||| utils	count=1
arg	an import line ||| line	count=1
function	extract call [function_2] ||| [function_1] [function_2]	count=4
function	next command ||| next	count=1
arg	find/create a ||| profile_dir config	count=1
module	we silence the ||| core	count=1
function	parse options ||| parse options	count=2
function	compute format data ||| compute format data	count=3
function	a format data ||| format display data	count=2
arg	part is a ||| part	count=1
module	return list ||| core	count=1
class	signature from the given ||| signature	count=1
function	ipy or ipynb files ||| execfile ipy	count=1
function	process the ||| process	count=1
module	to auto-define ||| core	count=1
class	user_ns with various ||| display hook	count=1
function	files from [function_2] ||| [function_2] [function_1]	count=2
arg	like safe_execfile but for ||| fname shell_futures raise_exceptions	count=1
class	this ||| history saving	count=1
function	extension ||| extension	count=4
class	of ||| interactive	count=1
arg	cell block ||| line cell	count=2
function_arg	given [arg_2] ||| [function_1] [arg_2]	count=4
class	no alias [class] ||| alias [class]	count=1
function	import the module ||| module	count=1
arg	for code ||| code	count=1
function	[function_1] dict ||| [function_2] [function_1]	count=4
arg	name and ||| name	count=1
arg	salt for ||| passphrase algorithm	count=1
function	commit ||| commit	count=1
function	create a ||| create	count=1
function	unregister ||| unregister	count=1
function_arg	or [arg_2] ||| [arg_2] [function_1]	count=1
function	[function_1] edit ||| [function_1] [function_2]	count=2
module	return the ||| core	count=9
function	paragraphs to ||| paragraphs	count=1
function	check whether ||| check	count=1
function	get a [function_2] ||| [function_2] [function_1]	count=4
function	list [function_2] ||| [function_2] [function_1]	count=1
function	example ||| update	count=1
function	; ||| quote2	count=1
function	to ||| default	count=1
function	containing ||| module	count=1
function	functions of a property ||| update property	count=1
function	a comment [function_2] ||| [function_1] [function_2]	count=3
arg	group of variables into ||| variables interactive	count=1
class	history [class_2] ||| [class_1] [class_2] init	count=1
arg	obj if it is ||| obj	count=1
function	[function_1] encoding ||| [function_1] [function_2] cookie	count=1
module	some ||| terminal	count=1
function	add a [function_2] ||| [function_1] [function_2]	count=2
class	[class_1] [class_2] ||| [class_1] [class_2] init	count=3
function	builtin and save ||| builtin	count=1
function	[function_1] options ||| [function_1] [function_2]	count=1
function	to unicode ||| matches	count=1
arg	good the current ||| parameter_s	count=1
function	last session [function_2] ||| [function_2] [function_1]	count=2
function	update the ||| update	count=1
arg	[arg_1] an object ||| [arg_2] [arg_1]	count=2
module	the content splitted by ||| core	count=1
function	2 /psearch call ||| help call	count=1
function	computation of ||| update	count=1
function	last session [function_2] ||| [function_1] [function_2]	count=2
function	cpus in the system ||| cpus	count=1
module	have ||| terminal	count=1
module	dump the ||| core	count=1
function_arg	[function_1] [arg_2] raw input ||| [function_1] [arg_2] source_raw	count=1
arg	called by ||| start stop raw	count=1
module	returns a ||| utils	count=1
module	file specified at the ||| core	count=1
function	transform assignment [function] ||| assign [function]	count=1
function	[function_1] to html ||| [function_2] [function_1]	count=1
class	the ||| terminal ipython app	count=2
module	the opposite of ||| core	count=1
function	pylab support ||| enable pylab	count=1
arg	size ||| size	count=1
module	the list of ||| core	count=1
function	cpus in the ||| cpus	count=1
class	string [class] allows ||| [class]	count=1
module	the ||| terminal	count=3
arg	reload ||| module reload	count=1
function	[function_1] code ||| [function_2] [function_1]	count=2
class	some ||| terminal	count=1
class	re computation ||| shell	count=1
function	show [function_2] ||| [function_1] [function_2]	count=1
function	for deprecation ||| init deprecation	count=1
arg	one or more lines ||| lines buffer	count=1
function_arg	[function_1] line returning ||| [arg_2] [function_1]	count=1
function_arg	load_next mod ||| load next mod	count=1
arg	multiline ||| src	count=1
function	directory to ||| dir	count=1
class	re computation of ||| interactive	count=1
class	future ||| module reloader	count=1
function	import an ||| import	count=1
function	[function_1] to unicode ||| [function_1] name [function_2]	count=2
function_arg	file [arg_2] ||| [function_1] [arg_2]	count=1
class	configuration options ||| terminal	count=1
function	fix ||| fix frame records	count=1
class	for a re ||| terminal	count=1
class	raw input [class] ||| [class]	count=3
function	the status of newly ||| status new	count=1
module	from the main ||| core	count=1
function	default editor at ||| editor	count=1
class	for a ||| terminal interactive	count=1
class	for ||| magics	count=5
function	a comment or ||| comment or	count=2
function	profile [function_2] ||| [function_2] [function_1]	count=4
function	tokens ||| tokens	count=1
function	re computation ||| update	count=1
module	given list of ||| utils	count=1
function	run code or ||| run cmd line code	count=1
function	stdin to ||| stdin	count=1
function	banner ||| banner	count=1
function	create a ||| init	count=2
arg	color formatted string with ||| value elist tb_offset	count=1
function	references to all ||| all	count=1
function	session id currently in ||| session id	count=1
arg	elems ||| elems	count=1
function	code profiler ||| prun	count=1
function	[function_1] a cell ||| [function_2] [function_1]	count=1
function	for returning [function] with ||| data and [function]	count=1
function_arg	an api ||| import api	count=1
class	computation of ||| terminal interactive	count=1
class	pexpect ||| process handler	count=1
function	with profiler ||| with profiler	count=2
function	a pager after a ||| pager	count=1
function	using os system ||| system	count=1
arg	magic ||| magic_name	count=1
module	of hooks in the ||| core	count=1
function	[function_1] or within ||| [function_2] [function_1]	count=7
function	[function_1] code of ||| [function_1] [function_2]	count=1
function	history [function] into ||| extract hist [function]	count=1
arg	returning ||| continue_prompt	count=1
class	callable without having to ||| auto magics	count=2
function	[function] handler ||| [function]	count=1
function	write ||| write	count=4
class	change directory ||| osmagics	count=1
arg	used if an object ||| obj	count=1
function	the state of ||| state	count=1
module	the value of an ||| utils	count=1
arg	val should be ||| val	count=1
function	factory that returns ||| set pprinter factory	count=1
function	a pager ||| pager page	count=1
function	group if ||| group	count=1
function_arg	store [arg_2] ||| [function_1] [arg_2] source_raw	count=3
function	ends [function_2] ||| [function_1] [function_2]	count=6
function	style name ||| name	count=1
function	formatter ||| formatter	count=1
function	[function_1] of lines ||| [function_1] [function_2]	count=1
function_arg	[function_1] columnize a ||| [arg_2] [function_1]	count=1
arg	within a multiline ||| src	count=1
arg	probably unique ||| number	count=1
function	[function_1] cell ||| [function_1] [function_2]	count=1
function	to find what to ||| find	count=1
function_arg	[function_1] [arg_2] ||| [function_1] backend gui [arg_2]	count=1
function_arg	arguments of obj ||| arguments obj	count=2
function_arg	[function_1] for code ||| [arg_2] [function_1]	count=1
function	[function_1] function ||| [function_2] [function_1]	count=4
function	find the [function] ipython ||| get ipython module [function]	count=1
function	return ||| default	count=1
module	of parameter objects ||| utils	count=1
arg	whether path ||| path	count=1
function	list of ||| default	count=1
module_class	indicated prompt number to [module_1] [class_2] ||| [module_1] [class_2]	count=2
module	the parsing part ||| core	count=1
function	[function_1] in a ||| [function_1] [function_2]	count=4
function	[function_1] html ||| [function_1] [function_2]	count=3
module	a re computation of ||| terminal	count=1
arg	piping through ||| start screen_lines pager_cmd	count=2
class	active profile [class_2] ||| [class_1] [class_2]	count=1
function	with python source code ||| source	count=1
arg	through a ||| screen_lines	count=2
module_class	the tb reference ||| core verbose tb	count=1
module	and ||| lib	count=2
class	input [class] ||| [class]	count=3
class	schemes ||| scheme	count=1
arg	result_html_prefix and ||| result_html_prefix	count=1
function_arg	[function_1] called ||| [arg_2] [function_1]	count=1
function	[function_1] of newly ||| [function_1] [function_2]	count=3
function	a cell ||| cell	count=1
module	display the ||| core	count=1
function	number or ||| or	count=1
function	full copy of ||| copy	count=1
module	display ||| terminal	count=1
class	history from a ||| history	count=1
arg	customizable conflict resolution ||| __loc_data__ __conflict_solve	count=1
function	extract call tip ||| call tip	count=2
function	clipboard's text [function_2] ||| [function_2] [function_1]	count=2
function_arg	config file [arg_2] ||| [arg_2] [function_1]	count=1
function	process ||| process	count=4
function	greedy ||| greedy	count=1
arg	equivalent to warn(msg ||| msg	count=2
function	wx ||| wx	count=2
function	return ||| return	count=1
class	been [class] by add_builtins ||| [class]	count=1
arg	module_name on sys ||| module_name	count=1
function_arg	or within [arg_2] ||| [arg_2] [function_1]	count=1
function	print ||| pprint	count=1
arg	as a ||| line	count=1
class	the ||| interactive shell	count=2
function_arg	[function_1] passed ||| [function_1] [arg_2]	count=2
function	parent ||| get parent	count=1
arg	altmod ||| altmod	count=1
arg	like safe_execfile ||| fname shell_futures raise_exceptions	count=1
arg	[arg] seek pointer ||| [arg]	count=2
function_arg	unregister a [arg_2] ||| [function_1] [arg_2]	count=2
module	update the splitter ||| core	count=1
function	[function_1] information to ||| [function_2] [function_1]	count=1
function	and clear it ||| clear	count=1
module	list of ||| core	count=2
class	configuration options ||| interactive	count=1
module_class	the tb ||| core verbose tb	count=1
class	dict of ||| manager	count=1
function	event loop [function_2] ||| [function_1] [function_2]	count=2
class	[class_1] schemes ||| [class_2] [class_1]	count=1
arg	a shell ||| shell	count=1
class	is always defined ||| shim	count=1
function	to auto-define ||| default	count=1
function	return a repr ||| repr	count=1
arg	[arg_1] [arg_2] instance ||| init [arg_2] [arg_1]	count=2
function	displays ||| display	count=1
function	name we ||| name	count=1
function	process the [function_2] ||| [function_2] [function_1]	count=1
class	desired ||| formatted tb	count=1
class	is specified ||| representation printer	count=1
function	unset ||| unset	count=1
function	the default editor at ||| editor	count=1
module_class	[module_1] active formatters ||| [module_1] [class_2]	count=2
function	or store ||| store or	count=1
module	the output of the ||| core	count=1
arg	[arg_1] output token ||| [arg_2] [arg_1]	count=2
function	[function_1] a figure ||| [function_2] [function_1]	count=1
class	[class_1] directory ||| [class_1] [class_2]	count=2
module	through the python code ||| core	count=1
function	show entire ||| show all	count=2
function	back to [function_2] ||| [function_1] latex [function_2]	count=4
function	to fix ||| fix	count=1
class	an ||| magics	count=1
module	[module_1] [module_2] ||| [module_1] [module_2]	count=24
function	get info about a ||| get session info	count=1
class	having to type ||| auto	count=2
arg	whether path is a ||| path	count=1
class	dict of ||| magics manager	count=1
class	profile ||| profile	count=1
module	of parameter ||| utils	count=1
arg	[arg_1] handler ||| [arg_1] [arg_2]	count=1
arg	execution mode depends on ||| nodelist cell_name interactivity compiler	count=1
function	[function_1] code ||| [function_1] output error [function_2]	count=1
arg	an info dict ||| info	count=1
class	have been [class] by add_builtins ||| [class]	count=1
class	re computation of ||| shell	count=1
class	ipythonapp ||| interactive shell app	count=1
function	[function_1] name we ||| style [function_1] [function_2]	count=1
class	write [class] string ||| [class]	count=1
function	run through pager ||| do psource	count=1
function	user-created object ||| ns refs	count=1
class	of the signature ||| signature	count=1
arg	the prompt_toolkit keyboard ||| registry shell	count=1
module	of the main statement ||| core magics	count=1
function	a comment ||| comment	count=1
class	optionally display the ||| terminal ipython app	count=1
function	this object's information to ||| to	count=1
function	an added builtin and ||| builtin	count=1
function	two blanks ||| two blanks	count=2
function	a repr ||| repr	count=1
class	check ||| module reloader	count=1
function	register the function *inputhook* ||| register	count=1
module	out of the ||| core	count=1
arg	[arg_1] a shell ||| [arg_2] [arg_1]	count=1
function	[function] of ipython ||| get ipython [function]	count=1
class	ask for a re ||| interactive shell	count=1
module	statement through the python ||| core magics	count=1
function	[function_1] startup directory ||| [function_2] [function_1]	count=2
class	variable from ||| interactive shell	count=1
module	image and return the ||| core	count=1
arg	and metadata to ||| metadata source	count=2
function	yield pasted ||| pasted	count=1
function	[function_1] last ||| [function_1] [function_2]	count=1
class	a re computation of ||| interactive shell	count=1
class	input history to ||| history	count=1
module	the given ||| core	count=2
class	computation of ||| shell	count=1
function	is a directory to ||| dir	count=1
function	inspect ||| inspect	count=1
function	readline is history previous ||| next history	count=1
module	elements [module] the ||| [module]	count=1
arg	tk ||| inputhook_context	count=1
arg	[arg_1] name buf ||| [arg_2] [arg_1]	count=2
function	[function_1] in ipython ||| [function_2] [function_1]	count=8
function	[function_1] from ||| [function_2] [function_1]	count=2
function_arg	name [arg_2] ||| [arg_2] [function_1]	count=3
function_arg	[function_1] upgrade ||| [function_1] [arg_2]	count=3
function	prepare ||| prepare	count=1
function	pprint ||| pprint	count=3
function	ipython ||| ipython	count=5
function	to [function_2] ||| [function_2] [function_1]	count=2
function	a code ||| code	count=1
class	constructs signature from the ||| signature	count=1
module	whether the inline ||| core	count=1
function	to unicode name this ||| name matches	count=1
function	list profiles ||| list bundled profiles	count=1
function	return list of ||| default	count=1
class	ask for a ||| interactive	count=1
function	the pprint function ||| pattern pprint	count=1
module	computation ||| terminal	count=1
function	get the last ||| get last	count=3
arg	name and [arg_2] ||| [arg_2] [arg_1]	count=2
arg	source and ||| source	count=1
function_arg	[function_1] cocoa nsapp ||| [arg_2] [function_1]	count=1
function	copy a default config ||| copy config	count=1
function	handle ||| handle	count=2
module	activate the ||| core	count=2
function	to set _ip ||| set	count=1
function	latex characters back ||| back latex	count=3
function	default [function] output ||| write [function]	count=1
arg	[arg_1] callable when ||| external decorators assert warns [arg_1] [arg_2]	count=3
module_class	the transformer ||| core input transformer	count=1
function	[function_1] profiler used ||| [function_1] [function_2]	count=1
function	a class and ||| class	count=1
function	pasted [function_2] ||| [function_1] [function_2]	count=3
module	dict of all the ||| core	count=1
module_class	lines of history ||| core history accessor	count=1
function	read from a ||| read	count=1
function	get the name ||| mirror name	count=1
module	[module] for ||| [module]	count=1
function_arg	macro [arg_2] ||| [arg_2] [function_1]	count=1
function_arg	[function_1] compatible with ||| [function_1] [arg_2]	count=3
function_arg	[function_1] in object ||| [arg_2] [function_1]	count=1
arg	piping through a ||| start screen_lines pager_cmd	count=2
class	ask ||| interactive	count=1
function	re computation of the ||| update	count=1
function	the named module ||| module	count=2
function_arg	format data [arg_2] ||| [arg_2] [function_1]	count=4
function	dir ||| dir	count=3
arg	equivalent to warn(msg ||| msg exit_val	count=1
class	marked by python-mode ||| emacs handler	count=1
function	for deprecation [function_2] ||| [function_1] [function_2]	count=1
function	a re computation ||| update	count=1
module	ask for ||| terminal	count=1
arg	piping [arg_2] ||| [arg_2] [arg_1]	count=12
function	handler [function_2] ||| [function_1] [function_2]	count=2
function	back [function_2] ||| [function_1] latex [function_2]	count=4
function	html ||| html	count=3
module	the default figure ||| core	count=1
class	list ||| profile list	count=1
class	ask for ||| terminal	count=1
function	check to see ||| check	count=1
function_arg	format data [arg_2] ||| [function_1] obj [arg_2]	count=3
arg	format for an object ||| obj	count=1
class	some configuration ||| interactive	count=1
module	elements [module] the input ||| [module]	count=1
class	add a format ||| base formatter	count=1
class	thread ||| thread	count=1
function	stdout ||| stdout	count=1
class	handle ||| auto handler	count=1
function	wx event ||| event loop wx	count=1
function	remove [function_2] ||| [function_1] [function_2]	count=1
function_arg	to format [arg_2] ||| [arg_2] [function_1]	count=1
function	used to set _ip ||| set	count=1
function	a repr of ||| repr	count=1
class	have ||| interactive	count=1
function_arg	macro [arg_2] ||| [function_1] [arg_2]	count=1
module_class	[module_1] transformed input ||| [module_1] [class_2]	count=2
arg	exception [arg_2] ||| [arg_1] [arg_2]	count=4
module	of the same ||| core	count=1
class	of the ||| shell	count=1
module	[module] # ||| [module]	count=3
class	callable without having to ||| auto	count=2
arg	code will be run ||| user_module user_ns	count=1
arg	code to ||| source filename symbol	count=1
function	api ||| api	count=1
class	[class_1] input ||| [class_2] [class_1]	count=2
function	#! ||| shebang	count=1
arg	given directory pkg_path we ||| pkg_path	count=1
function	pager after ||| pager	count=1
function	[function_1] executing ||| [function_2] [function_1]	count=2
function	application layout if ||| update layout	count=1
function	javascript representation ||| javascript	count=1
function	a named file as ||| file	count=1
function_arg	class and [arg_2] ||| [arg_2] [function_1]	count=1
class	without having ||| auto	count=2
function_arg	[function_1] a session ||| [function_1] [arg_2]	count=2
arg	find/create a ||| profile_dir	count=1
module	a re ||| terminal	count=1
function	of cpus in ||| cpus	count=1
function	a completer ||| completer	count=1
function	publish ||| publish	count=1
function	save a ||| save	count=1
module	return a ||| utils	count=2
module_class	[module_1] ipython ||| [module_1] [class_2]	count=2
function	input line ends ||| ends	count=1
function_arg	[function_1] of obj ||| [function_1] [arg_2]	count=4
module	and dropped the ||| core	count=1
function_arg	[function_1] dict ||| [function_1] obj [arg_2]	count=4
module	ipynb for [module] %run ||| [module]	count=1
arg	columnize a list of ||| row_first	count=1
module	a file in ||| utils	count=1
function	or cell magic ||| magic	count=1
arg	prefix ||| prefix delims	count=1
function	comment ||| comment	count=1
module	return list of ||| core	count=1
arg	args ||| args	count=1
module	mod name buf = ||| lib	count=1
module	= ||| lib	count=1
function	translate lines escaped ||| tr magic	count=1
function	process the [function_2] ||| [function_1] [function_2]	count=1
module	adds a ||| utils	count=1
module_class	[module_1] display ||| [module_1] [class_2]	count=10
function_arg	add [arg_2] ||| [function_1] [arg_2]	count=2
arg	a func ||| func	count=1
function	the format data ||| format data	count=2
class	ask for ||| interactive shell	count=1
arg	[arg_1] as an ||| [arg_2] [arg_1]	count=2
module_class	the formatter for ||| core base formatter	count=1
arg	of obj ||| obj	count=1
function	set _ip point to ||| set	count=1
function_arg	paragraphs [arg_2] ||| [arg_2] [function_1]	count=1
function	the token at a ||| token at	count=1
function	find what [function_2] ||| [function_1] [function_2]	count=1
arg	warning_class is [arg_2] ||| external decorators assert warns [arg_1] [arg_2]	count=2
function	match latex [function_2] ||| [function_2] [function_1]	count=4
arg	paging [arg_2] ||| [arg_1] [arg_2]	count=1
module	the value if ||| core	count=1
function	report summary ||| report	count=1
module	set the ||| core	count=3
function	[function_1] status of ||| [function_2] [function_1]	count=1
module	is always ||| utils	count=1
class	optionally display the ||| app	count=1
arg	columnize a ||| row_first	count=1
class	run ||| interactive shell app	count=2
module	[module_1] the ||| [module_2] [module_1]	count=1
function	of a property ||| property	count=1
function_arg	execute [arg_2] ||| [function_1] [arg_2]	count=1
class	transformed ||| stateless	count=1
function	compute ||| compute	count=1
module_class	the input ||| core input splitter	count=1
function	translate lines ||| tr magic	count=1
arg	a path into its ||| path	count=1
module_class	lines of [class_2] ||| [module_1] [class_2]	count=8
function	format [function_2] ||| [function_1] [function_2]	count=7
function	module and insert it ||| load module	count=1
function	fpblock for comment ||| comment	count=1
function	certain type ||| type	count=1
class	runs ||| command controller	count=1
module	for [module] line_info by ||| [module]	count=1
module	the ipython user namespace ||| core	count=1
function	[function_1] status ||| [function_2] [function_1]	count=1
class	from string [class] allows ||| [class]	count=1
function	magic function ||| magic	count=1
function	the format ||| format	count=2
class	profile [class_2] ||| [class_2] [class_1]	count=1
arg	warn(msg ||| msg	count=2
function	/psearch call from ||| help call	count=1
module	the string for ||| core	count=1
arg	[arg_1] [arg_2] ||| [arg_1] input_lines [arg_2]	count=4
function	ipy or ipynb ||| ipy	count=1
function	profile ||| find profile	count=1
function	module ||| find module	count=1
class	constructs signature ||| signature	count=1
function_arg	write data to ||| write data	count=2
function	block and re-execute ||| again	count=1
function	[function_1] nodes ||| [function_1] [function_2]	count=3
function_arg	[function_1] and metadata ||| [function_1] data [arg_2]	count=1
class	without having to type ||| auto	count=2
module	show the ||| core	count=1
function	[function_1] entire ||| [function_2] [function_1]	count=1
class	of traceback ||| tb	count=1
class	ask ||| terminal interactive shell	count=2
class	for a given job ||| job manager	count=1
function	format a [function_2] ||| [function_1] [function_2]	count=2
class	object's ||| method wrapper	count=1
arg	or pyside2 without importing ||| api	count=1
module	the format ||| core	count=1
class	one block ||| demo	count=1
arg	a pager piping through ||| data start screen_lines pager_cmd	count=1
function	default arguments of ||| default arguments	count=2
module	configuration options ||| terminal	count=1
function	call ||| call	count=3
arg	a pprint function useful ||| start end basetype	count=1
class	a re ||| shell	count=1
function	qt4 ||| qt4	count=1
class	database ||| history	count=1
function_arg	inputhook for cocoa ||| inputhook context	count=1
function	config [function_2] ||| [function_2] [function_1]	count=5
class	history ||| history manager	count=1
function	png representation ||| png	count=1
arg	prefix to a ||| prefix	count=1
arg	pyside2 [arg] ||| [arg]	count=1
module	all the ||| core	count=1
function	named file ||| file	count=1
function	errors from a corrupt ||| corrupt db	count=1
arg	through a ||| strng start screen_lines	count=1
function	display ||| init	count=1
class	url information ||| audio	count=1
class	for an object ||| magics	count=1
function_arg	[function_1] a block ||| [arg_2] [function_1]	count=1
function	call from ||| make help call	count=1
arg	line mode ||| line cell	count=1
arg	line mode ||| line	count=1
function	generator ||| tokens	count=1
function	modules ||| modules	count=1
class	for example ||| terminal interactive	count=1
function_arg	print function [arg_2] ||| [function_1] [arg_2]	count=2
function_arg	[function_1] parameters ||| [function_1] [arg_2]	count=1
function	shell aliases to auto-define ||| default aliases	count=1
function	which can [function] executed ||| [function]	count=1
arg	[arg_1] metadata ||| [arg_2] [arg_1]	count=2
class	for ||| interactive shell	count=4
module_class	[module_1] user's namespace ||| [module_1] [class_2]	count=2
function	factory that ||| set pprinter factory	count=1
function	a directory [function] if ||| ensure dir [function]	count=1
function	figure to an image ||| figure	count=1
function	[function_1] session ||| [function_2] [function_1]	count=3
arg	passphrase ||| passphrase	count=1
class	profile directory ||| profile dir	count=2
arg	handler ||| handler	count=1
module	[module_1] the ||| [module_1] [module_2]	count=1
class	optionally display ||| ipython	count=1
module	return true ||| utils	count=1
class	for an ||| magics	count=1
class	for pexpect ||| process handler	count=1
function	extension in ||| extension	count=4
function_arg	multiple paragraphs [arg_2] ||| [arg_2] [function_1]	count=1
function	parse [function_2] ||| [function_1] [function_2]	count=1
function_arg	register a [arg_2] ||| [function_1] name [arg_2]	count=1
class	ask for a ||| interactive shell	count=1
function	the ||| update	count=1
function	screen ||| detect screen	count=1
function	normal repr ||| repr	count=1
function	start ||| start	count=1
function	to edit ||| edit target	count=1
function	set ||| set term	count=1
function	an exception call ||| call	count=1
arg	of variables into ||| variables interactive	count=1
function	types mime types ||| types	count=1
class	display the ||| terminal	count=1
class	demo ||| demo	count=1
function	global interactiveshell ||| ipython	count=1
function	current session ||| name session	count=1
module	[module] an ||| [module]	count=3
function	a directory to ||| dir	count=1
arg	[arg_1] altmod name ||| [arg_1] [arg_2]	count=1
arg	obj ||| obj	count=1
function	line ends [function_2] ||| [function_2] [function_1]	count=6
function	wrap multiple [function_2] ||| [function_1] [function_2]	count=2
module	the active ||| core	count=1
function	used by ||| range by	count=1
class	save ||| interactive shell	count=1
module	[module] # coding ||| [module]	count=3
arg	through a pager ||| data start screen_lines	count=1
arg	subname [arg_2] ||| [arg_2] [arg_1]	count=1
function	a profile [function_2] ||| [function_2] [function_1]	count=3
function	[function_1] to ||| [function_1] [function_2]	count=5
function	[function_1] default config ||| [function_1] [function_2]	count=1
class	this object's [class_2] ||| [class_2] [class_1]	count=2
function	safe version of ||| safe	count=1
function	profile dir and return ||| find profile dir	count=1
function	split [function_2] ||| [function_2] [function_1]	count=2
arg	pyside2 [arg] submodules supports ||| [arg]	count=1
function	pasted lines ||| get pasted lines	count=2
function	by ||| range by	count=1
function	at [function_2] ||| [function_1] [function_2]	count=1
class	of script ||| script magics	count=1
arg	output ||| output	count=2
class	[class_1] hook ||| [class_1] [class_2]	count=1
function	code or file ||| line code	count=1
class	the job ||| job	count=1
function	unregister a ||| unregister handler	count=1
arg	a line ||| line	count=3
function	parent ||| parent	count=1
class	re computation of the ||| shell	count=1
function	a completer for ||| completer	count=1
function	at [function_2] ||| [function_2] [function_1]	count=1
class	in history ||| history	count=1
class	pretty representation ||| plain text formatter	count=1
class	configuration options ||| terminal interactive	count=1
class	dead job ||| job	count=1
function	[function_1] [function_2] ||| [function_2] running [function_1]	count=2
function	[function_1] lines until ||| [function_2] [function_1]	count=2
function	dir and return ||| dir	count=1
module	for line ||| core magics	count=1
function	pager after a ||| pager	count=1
module	the inline backend ||| core	count=1
arg	a pager piping ||| pager_cmd	count=1
class	internal ||| interactive shell	count=1
arg	data [arg_2] ||| [arg_2] [arg_1]	count=6
function_arg	write [arg_2] ||| [arg_2] [function_1]	count=3
class	optionally ||| terminal ipython app	count=2
function	format types mime types ||| format types	count=1
module_class	return the [class_2] ||| [module_1] [class_2]	count=2
function	[function_1] clear it ||| [function_2] [function_1]	count=2
function	[function_1] from a ||| [function_2] [function_1]	count=2
function	insertion ||| get mci	count=1
arg	directory pkg_path ||| pkg_path	count=1
module_class	[module_1] profiler ||| [module_1] [class_2]	count=4
class	for a ||| terminal interactive shell	count=1
function	merge two ||| merge	count=1
class	from the ||| terminal interactive	count=1
arg	input text ||| text formatter	count=1
function	number ||| num	count=3
module	type the ||| core	count=1
arg	given filename and linenumber ||| filename linenum wait	count=1
module	[module_1] current dir ||| [module_1] [module_2]	count=2
module	return the string of ||| core	count=1
class	find ||| profile dir	count=1
module	like the ||| core	count=1
class	[class_1] the parent ||| [class_2] [class_1]	count=4
arg	of :func os path ||| path	count=1
class	code ||| code	count=1
class	display the ||| terminal ipython app	count=1
arg	traceback ||| etype evalue stb	count=1
arg	and ||| line	count=1
class	a re ||| terminal	count=1
function	split user ||| split user	count=2
arg	* and ?) ||| pattern raw search_raw output	count=1
function_arg	load_next [arg_2] ||| [arg_2] [function_1]	count=4
function	editor ||| editor	count=1
module	newline the ||| core	count=1
function	ends in a ||| ends in	count=2
class	[class] none ||| coroutine [class]	count=1
function	on readline is history ||| history	count=1
arg	converts a bytes ||| txt errors skip_encoding_cookie	count=1
function_arg	return code [arg_2] ||| [function_1] [arg_2]	count=2
module	decorator for adding ||| magics	count=1
function	a named magic ||| magic	count=1
function	[function_1] a list ||| [function_2] [function_1]	count=1
function	as used by ||| range by	count=1
class	re computation ||| interactive shell	count=1
function	run ||| run cmd line	count=1
function	application layout if for ||| update layout	count=1
class	of all jobs ||| background job manager	count=1
class	current compiler flags active ||| caching compiler	count=1
function_arg	[function_1] session ||| [function_1] [arg_2]	count=3
function	extension in ipython ||| ipython extension	count=4
class	the ||| ipython	count=1
function	cache is ||| cache	count=1
function	and message without ||| show	count=1
function_arg	[function_1] a multiline ||| [function_1] string [arg_2]	count=8
module	the top of the ||| core	count=1
function_arg	[function_1] data to ||| [arg_2] [function_1]	count=1
class	input buffer and ||| ipython input splitter	count=1
function	a profile dir and ||| find profile dir	count=1
function	token at ||| token at	count=2
module_class	the display hook ||| core display hook	count=1
arg	find [arg] for ||| text line_buffer [arg]	count=1
function	[function] to ||| write format [function]	count=1
module	currently active exception ||| magics	count=1
arg	block [arg_2] ||| [arg_1] input_lines [arg_2]	count=1
module_class	use the [module_1] [class_2] ||| [module_1] [class_2]	count=2
class	example some configuration options ||| terminal interactive shell	count=1
function_arg	nodes the [arg_2] ||| [function_1] [arg_2]	count=1
function	ignore its methods ||| method	count=1
function	method called after executing ||| post cmd	count=1
class	for example ||| shell	count=1
function	color ||| color	count=1
module	block and ||| lib	count=1
class	overridden from ||| interactive shell	count=1
function	input can accept ||| push accepts	count=1
module	for %load ||| magics	count=1
class	defined ||| module	count=1
module	flexibility and dropped the ||| core magics	count=1
function	string to stdout ||| stdout raw	count=1
function	history ||| next history	count=1
class	example some configuration options ||| interactive	count=1
arg	warning_class is [arg_2] ||| [arg_2] [arg_1]	count=2
module	the object and ||| core	count=1
class	configuration options have changed ||| terminal	count=1
function	create an alias ||| alias	count=1
class	[class_1] thread ||| [class_1] [class_2]	count=1
module_class	activate the [class_2] ||| [module_1] [class_2]	count=2
function	reload ||| reload	count=5
class	command ||| command	count=1
arg	piping through ||| strng start screen_lines pager_cmd	count=1
function	for ipy or ||| safe execfile ipy	count=1
function	[function_1] ipython ||| [function_2] [function_1]	count=10
function	input ||| range	count=1
function	check that ||| check	count=1
module	stdout/err as appropriate ||| utils	count=1
module	out of the way ||| core	count=1
arg	argment readline which ||| readline	count=1
function	info about ||| info	count=1
function	pager after a ||| pager page	count=1
function	default config file ||| config file	count=2
module	update the splitter and ||| core	count=1
arg	level return the package ||| level	count=1
module	re computation ||| terminal	count=1
class	all ||| interactive shell	count=1
function	comment or ||| comment or	count=2
arg	subname fullname ||| subname fullname	count=2
module	through the ||| core magics	count=1
function	line ends in ||| ends in	count=2
class	input buffer and ||| ipython input	count=1
arg	argment readline ||| readline	count=1
module	decorator for adding ||| core magics	count=1
function	from a ||| strip	count=1
arg	is thrown by callable ||| func	count=1
function	save the ||| save	count=1
function	currently available magic functions ||| lsmagic	count=1
function	or [function_2] ||| [function_2] [function_1]	count=6
function_arg	[function_1] passed to ||| [function_1] [arg_2]	count=2
class	interactive ||| interactive shell	count=2
function	pdb ||| pdb	count=1
arg	to use in object ||| obj	count=1
arg	object for the passed ||| obj	count=1
class	of the job ||| job	count=1
function_arg	html with ||| html s	count=1
function	this inputhook ||| inputhook	count=1
function	clear ||| clear	count=2
module_class	of input ||| core input	count=1
arg	saves ||| image_file	count=1
arg	given class ||| cls	count=1
function	find what [function_2] ||| [function_2] [function_1]	count=1
function	[function_1] handler ||| [function_2] [function_1]	count=2
arg	entry tuples for ||| extracted_list	count=1
class	callable without having ||| auto magics	count=2
function	find the [function_1] [function_2] of ipython ||| [function_2] [function_1]	count=1
function	hash from in ||| hash	count=1
arg	string piping through a ||| screen_lines pager_cmd	count=1
class	from the parent ||| terminal interactive shell	count=2
class	by ||| manager	count=2
function	message without a ||| show	count=1
function	get the [function_2] ||| [function_1] [function_2]	count=4
class	marquee ||| clear mixin	count=1
arg	name [arg_2] ||| [arg_1] handler [arg_2]	count=2
function	directory ||| dir	count=2
function	unicode ||| unicode	count=2
function	get a reasonable ||| get	count=1
arg	cell receiving ||| wait	count=1
module_class	return the input ||| core input	count=1
module_class	to [module_1] [class_2] ||| [module_1] [class_2]	count=4
class	constructs signature from ||| signature	count=1
function	style name we need ||| name	count=1
function	code or file ||| code	count=1
arg	[arg_1] and format ||| [arg_2] [arg_1]	count=6
class	for example some configuration ||| terminal interactive	count=1
function_arg	inputhook for [arg_2] ||| [function_1] [arg_2]	count=2
class	have changed ||| interactive shell	count=1
function	event loop [function_2] ||| [function_2] [function_1]	count=2
function	[function_1] information to ||| [function_1] [function_2]	count=1
function	files into profile ||| files	count=1
function	reload all modules used ||| reload	count=1
function	[function_1] state ||| [function_1] sys module [function_2]	count=1
function	input token ||| input	count=1
function_arg	#! line ||| shebang line	count=1
function	[function_1] [function_2] ||| [function_2] loop running [function_1]	count=2
arg	ipython shell ||| shell backend	count=1
function	[function_1] state ||| [function_2] [function_1]	count=1
function	[function_1] clipboard's text ||| [function_2] [function_1]	count=4
arg	[arg_1] level return ||| [arg_1] [arg_2]	count=1
class	writes the string ||| win32shell command controller	count=1
function	or within a ||| or	count=1
class	specify traceback ||| verbose tb	count=1
module	some configuration options have ||| terminal	count=1
class	in history and create ||| history manager	count=1
function	pasted lines until the ||| pasted lines	count=1
class	job ||| job manager	count=3
arg	metadata to all frontends ||| metadata	count=1
function	user has write access ||| writable	count=1
module_class	the [class_2] ||| [module_1] [class_2]	count=84
function	find and ||| find	count=1
module	the raw data from ||| core	count=2
arg	path into its ||| path	count=1
module	access to [module] ||| [module]	count=2
arg	string piping [arg_2] ||| [arg_2] [arg_1]	count=4
arg	[arg_1] for output ||| [arg_1] input_lines [arg_2]	count=2
module	line is like the ||| core magics	count=1
function	which [function] is loaded ||| loaded [function]	count=1
function	process the input ||| process input	count=2
arg	given backend ||| backend	count=1
module	for %%load into ||| magics	count=1
function_arg	[function_1] mod ||| [arg_2] [function_1]	count=1
module	the various namespaces so ||| core	count=1
arg	data block [arg_2] ||| [arg_2] [arg_1]	count=2
function	[function_1] running ||| [function_1] [function_2]	count=4
function	delete ||| xdel	count=1
function	activate ||| activate	count=1
function	a pager ||| pager	count=1
arg	the current ||| index	count=1
arg	cell as a ||| line cell	count=2
module	the given position ||| core	count=1
arg	pkg_path we ||| pkg_path	count=1
class	execution of a python ||| execution magics	count=1
function	usage ||| usage	count=1
class	[class_1] the ||| [class_2] [class_1]	count=4
function	clipboard's text using tkinter ||| tkinter clipboard	count=1
function_arg	set the [arg_2] ||| [function_1] active scheme scheme [arg_2]	count=1
class	given job ||| background job	count=1
function	at ||| at	count=1
arg	uniq_stable [arg] -> list ||| [arg]	count=1
function	define an alias but ||| define alias	count=1
function	fpblock for comment token ||| comment	count=1
class	aliaserror ||| alias manager	count=1
function	select figure ||| select figure	count=2
module_class	[module_1] history ||| [module_1] [class_2]	count=4
