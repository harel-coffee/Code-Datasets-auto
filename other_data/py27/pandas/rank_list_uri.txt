<tt style='background-color:#E8E8E8;'> core. <a href=' /core/strings.py#L49'>str_cat</a>(arr,others,sep,na_rep)</tt>	Concatenate strings in the series/index with given separator.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/strings.py#L200'>str_count</a>(arr,pat,flags)</tt>	Count occurrences of pattern in each string of the series/index.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/strings.py#L219'>str_contains</a>(arr,pat,case,flags)</tt>	Return boolean series/array whether given pattern/regex is contained in each string in the series/index.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/strings.py#L268'>str_startswith</a>(arr,pat,na)</tt>	Return boolean series/array indicating whether each string in the series/index starts with passed pattern.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/strings.py#L288'>str_endswith</a>(arr,pat,na)</tt>	Return boolean series indicating whether each string in the series/index ends with passed pattern.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/strings.py#L308'>str_replace</a>(arr,pat,repl,n)</tt>	Replace occurrences of pattern/regex in the series/index with some other string.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/strings.py#L432'>str_repeat</a>(arr,repeats)</tt>	Duplicate each string in the series/index by indicated number of times.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/strings.py#L468'>str_match</a>(arr,pat,case,flags)</tt>	Determine if each string matches a regular expression.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/strings.py#L523'>_groups_or_na_fun</a>(regex)</tt>	Used in both extract_noexpand and extract_frame.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/strings.py#L540'>_str_extract_noexpand</a>(arr,pat,flags)</tt>	Find groups in each string in the series using passed regular expression.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/strings.py#L573'>_str_extract_frame</a>(arr,pat,flags)</tt>	For each subject string in the series extract groups from the first match of regular expression pat.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/strings.py#L600'>str_extract</a>(arr,pat,flags,expand)</tt>	For each subject string in the series extract groups from the first match of regular expression pat.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/strings.py#L697'>str_extractall</a>(arr,pat,flags)</tt>	For each subject string in the series extract groups from all matches of regular expression pat.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/strings.py#L809'>str_get_dummies</a>(arr,sep)</tt>	Split each string in the series by sep and return a frame of dummy/indicator variables.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/strings.py#L860'>str_join</a>(arr,sep)</tt>	Join lists contained as elements in the series/index with passed delimiter.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/strings.py#L877'>str_findall</a>(arr,pat,flags)</tt>	Find all occurrences of pattern or regular expression in the series/index.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/strings.py#L901'>str_find</a>(arr,sub,start,end)</tt>	Return indexes in each strings in the series/index where the substring is fully contained between [start end].
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/strings.py#L961'>str_pad</a>(arr,width,side,fillchar)</tt>	Pad strings in the series/index with an additional character to specified side.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/strings.py#L1003'>str_split</a>(arr,pat,n)</tt>	Split each string a la re split in the series/index by given.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/strings.py#L1043'>str_rsplit</a>(arr,pat,n)</tt>	Split each string in the series/index by the given delimiter string starting at the end of the string and working to the front.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/strings.py#L1072'>str_slice</a>(arr,start,stop,step)</tt>	Slice substrings from each element in the series/index.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/strings.py#L1091'>str_slice_replace</a>(arr,start,stop,repl)</tt>	Replace a slice of each string in the series/index with another string.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/strings.py#L1126'>str_strip</a>(arr,to_strip,side)</tt>	Strip whitespace including newlines from each string in the series/index.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/strings.py#L1151'>str_wrap</a>(arr,width)</tt>	Wrap long strings in the series/index to be formatted in paragraphs with length less than a given width.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/strings.py#L1214'>str_translate</a>(arr,table,deletechars)</tt>	Map all characters in the string through the given mapping table.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/strings.py#L1253'>str_get</a>(arr,i)</tt>	Extract element from lists tuples or strings in each element in the series/index.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/strings.py#L1271'>str_decode</a>(arr,encoding,errors)</tt>	Decode character string in the series/index using indicated encoding.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/strings.py#L1295'>str_encode</a>(arr,encoding,errors)</tt>	Encode character string in the series/index using indicated encoding.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/strings.py#L1354'>copy</a>(source)</tt>	Copy a docstring from another source function if present.
<tt style='background-color:#E8E8E8;'> core.StringMethods <a href=' /core/strings.py#L1617'>zfill</a>(width)</tt>	Filling left side of strings in the series/index with 0.
<tt style='background-color:#E8E8E8;'> core.StringMethods <a href=' /core/strings.py#L1751'>normalize</a>(form)</tt>	Return the unicode normal form for the strings in the series/index.
<tt style='background-color:#E8E8E8;'> core._NDFrameIndexer <a href=' /core/indexing.py#L184'>_has_valid_tuple</a>(key)</tt>	Check the key for valid keys across my indexer.
<tt style='background-color:#E8E8E8;'> core._NDFrameIndexer <a href=' /core/indexing.py#L193'>_should_validate_iterable</a>(axis)</tt>	Return a boolean whether this axes needs validation for a passed.
<tt style='background-color:#E8E8E8;'> core._NDFrameIndexer <a href=' /core/indexing.py#L228'>_convert_range</a>(key,is_setter)</tt>	Convert a range argument.
<tt style='background-color:#E8E8E8;'> core._NDFrameIndexer <a href=' /core/indexing.py#L246'>_has_valid_positional_setitem_indexer</a>(indexer)</tt>	Validate that an positional indexer cannot enlarge its target.
<tt style='background-color:#E8E8E8;'> core._NDFrameIndexer <a href=' /core/indexing.py#L881'>_multi_take</a>(tup)</tt>	Create the reindex map for our objects raise the _exception if we.
<tt style='background-color:#E8E8E8;'> core._NDFrameIndexer <a href=' /core/indexing.py#L1133'>_convert_to_indexer</a>(obj,axis,is_setter)</tt>	Convert indexing key into something we can use to do actual fancy indexing on an ndarray.
<tt style='background-color:#E8E8E8;'> core._LocationIndexer <a href=' /core/indexing.py#L1348'>_get_slice_axis</a>(slice_obj,axis)</tt>	This is pretty simple as we just have to deal with labels.
<tt style='background-color:#E8E8E8;'> core._LocIndexer <a href=' /core/indexing.py#L1476'>_get_partial_string_timestamp_match_key</a>(key,labels)</tt>	Translate any partial string timestamp matches in key returning the.
<tt style='background-color:#E8E8E8;'> core._iLocIndexer <a href=' /core/indexing.py#L1701'>_get_list_axis</a>(key,axis)</tt>	Return series values by list or array of integers.
<tt style='background-color:#E8E8E8;'> core._iLocIndexer <a href=' /core/indexing.py#L1753'>_convert_to_indexer</a>(obj,axis,is_setter)</tt>	Much simpler as we only have to deal with our valid types.
<tt style='background-color:#E8E8E8;'> core._AtIndexer <a href=' /core/indexing.py#L1815'>_convert_key</a>(key,is_setter)</tt>	Require they keys to be the same type as the index (so we don't.
<tt style='background-color:#E8E8E8;'> core._iAtIndexer <a href=' /core/indexing.py#L1850'>_convert_key</a>(key,is_setter)</tt>	Require integer args and convert to label arguments.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/indexing.py#L1863'>length_of_indexer</a>(indexer,target)</tt>	Return the length of a single non-tuple indexer which could be a slice.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/indexing.py#L1891'>convert_to_index_sliceable</a>(obj,key)</tt>	If we are index sliceable then return my slicer otherwise return none.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/indexing.py#L1954'>convert_missing_indexer</a>(indexer)</tt>	Reverse convert a missing indexer which is a dict.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/indexing.py#L1971'>convert_from_missing_indexer_tuple</a>(indexer,axes)</tt>	Create a filtered indexer that doesn't have any missing indexers.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/indexing.py#L1981'>maybe_convert_indices</a>(indices,n)</tt>	If we have negative indicies translate to postive here.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/indexing.py#L2001'>maybe_convert_ix</a>()</tt>	We likely want to take the cross-product.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/indexing.py#L2066'>_non_reducing_slice</a>(slice_)</tt>	Ensurse that a slice doesn't reduce to a series or scalar.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/indexing.py#L2096'>_maybe_numeric_slice</a>(df,slice_,include_bool)</tt>	Want nice defaults for background_gradient that don't break with non-numeric data.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L158'>_repr_table_schema_</a>()</tt>	Not a real jupyter special repr method but we use the same naming convention.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L169'>_validate_dtype</a>(dtype)</tt>	Validate the passed dtype.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L183'>_init_mgr</a>(mgr,axes,dtype,copy)</tt>	Passed a manager and a axes dict.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L203'>_constructor</a>()</tt>	Used when a manipulation result has the same dimensions as the original.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L216'>_dir_additions</a>()</tt>	Add the string-like attributes from the info_axis.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L221'>_constructor_sliced</a>()</tt>	Used when a manipulation result has one lower dimension s as the original such as dataframe single columns slicing.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L228'>_constructor_expanddim</a>()</tt>	Used when a manipulation result has one higher dimension as the original such as series.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L238'>_setup_axes</a>(cls,axes,info_axis,stat_axis)</tt>	Provide axes setup for the major pandasobjects.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L299'>_construct_axes_dict</a>(axes)</tt>	Return an axes dictionary for myself.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L305'>_construct_axes_dict_from</a>(axes)</tt>	Return an axes dictionary for the passed axes.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L312'>_construct_axes_dict_for_slice</a>(axes)</tt>	Return an axes dictionary for myself.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L319'>_construct_axes_from_arguments</a>(args,kwargs,require_all)</tt>	Construct and returns axes if supplied in args/kwargs.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L396'>_get_block_manager_axis</a>(axis)</tt>	Map the axis to the block_manager axis.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L448'>shape</a>()</tt>	Return a tuple of axis dimensions.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L453'>axes</a>()</tt>	Return index label s of the internal ndframe.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L460'>ndim</a>()</tt>	Number of axes / array dimensions.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L465'>size</a>()</tt>	Number of elements in the ndframe.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L470'>_selected_obj</a>()</tt>	Internal compat with selectionmixin.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L475'>_obj_with_exclusions</a>()</tt>	Internal compat with selectionmixin.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L492'>set_axis</a>(axis,labels)</tt>	Public verson of axis assignment.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L544'>swapaxes</a>(axis1,axis2,copy)</tt>	Interchange axes and swap values axes appropriately.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L570'>pop</a>(item)</tt>	Return item and drop from frame raise keyerror if not found.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L583'>squeeze</a>(axis)</tt>	Squeeze length 1 dimensions.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L607'>swaplevel</a>(i,j,axis)</tt>	Swap levels i and j in a multiindex on a particular axis parameters.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L761'>rename_axis</a>(mapper,axis,copy,inplace)</tt>	Alter index and / or columns using input function or functions.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L818'>_set_axis_name</a>(name,axis)</tt>	Alter the name or names of the axis returning self.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L889'>equals</a>(other)</tt>	Determines if two ndframe objects contain the same elements nans in.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L905'>__iter__</a>()</tt>	Iterate over infor axis.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L910'>keys</a>()</tt>	Get the 'info axis' see indexing for more this is index for series columns for dataframe and major_axis for.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L918'>iteritems</a>()</tt>	Iterate over label values on info axis this is index for series columns for dataframe major_axis for panel.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L927'>__len__</a>()</tt>	Returns length of info axis.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L931'>__contains__</a>(key)</tt>	True if the key is in the info axis.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L935'>empty</a>()</tt>	True if ndframe is entirely empty [no items], meaning any of the axes are of length 0.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L983'>bool</a>()</tt>	Return the bool of a single element pandasobject.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L1023'>to_dense</a>()</tt>	Return dense representation of ndframe as opposed to sparse.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L1143'>to_json</a>(path_or_buf,orient,date_format,double_precision)</tt>	Convert the object to a json string.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L1261'>to_hdf</a>(path_or_buf,key)</tt>	Write the contained data to an hdf5 file using hdfstore.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L1310'>to_msgpack</a>(path_or_buf,encoding)</tt>	Msgpack serialize object to input file path this is an experimental library and the storage format.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L1331'>to_sql</a>(name,con,flavor,schema)</tt>	Write records stored in a dataframe to a sql database.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L1373'>to_pickle</a>(path,compression)</tt>	Pickle serialize object to input file path.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L1389'>to_clipboard</a>(excel,sep)</tt>	Attempt to write text representation of object to the system clipboard this can be pasted into excel for example.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L1414'>to_xarray</a>()</tt>	Return an xarray object from the pandas object.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L1514'>_create_indexer</a>(cls,name,indexer)</tt>	Create an indexer like _name in the class.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L1534'>get</a>(key,default)</tt>	Get item from object for given key (dataframe column panel slice etc.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L1555'>_get_item_cache</a>(item)</tt>	Return the cached item item represents a label indexer.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L1569'>_set_as_cached</a>(item,cacher)</tt>	Set the _cacher attribute on the calling object with a weakref to cacher.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L1575'>_reset_cacher</a>()</tt>	Reset the cacher.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L1580'>_iget_item_cache</a>(item)</tt>	Return the cached item item represents a positional indexer.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L1592'>_maybe_cache_changed</a>(item,value)</tt>	The object has called back to us saying maybe it has changed.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L1600'>_is_cached</a>()</tt>	Return boolean indicating if self is cached or not.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L1605'>_get_cacher</a>()</tt>	Return my cacher or none.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L1612'>_is_view</a>()</tt>	Return boolean indicating if self is view of another array.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L1617'>_maybe_update_cacher</a>(clear,verify_is_copy)</tt>	See if we need to update our parent cacher if clear then clear our cache.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L1657'>_slice</a>(slobj,axis,kind)</tt>	Construct a slice of this container.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L1686'>_check_is_chained_assignment_possible</a>()</tt>	Check if we are a view have a cacher and are of mixed type.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L1824'>take</a>(indices,axis,convert,is_copy)</tt>	Analogous to ndarray take.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L1853'>xs</a>(key,axis,level,drop_level)</tt>	Returns a cross-section (row s or column s from the series/dataframe.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L1986'>select</a>(crit,axis)</tt>	Return data corresponding to axis labels matching criteria parameters.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L2012'>reindex_like</a>(other,method,copy,limit)</tt>	Return an object with matching indices to myself.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L2044'>drop</a>(labels,axis,level,inplace)</tt>	Return new object with labels in requested axis removed.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L2103'>_update_inplace</a>(result,verify_is_copy)</tt>	Replace self internals with result.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L2121'>add_prefix</a>(prefix)</tt>	Concatenate prefix string with panel items names.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L2136'>add_suffix</a>(suffix)</tt>	Concatenate suffix string with panel items names.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L2432'>_reindex_axes</a>(axes,level,limit,tolerance)</tt>	Perform the reindex for all the axes.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L2452'>_needs_reindex_multi</a>(axes,method,level)</tt>	Check if we do need a multi reindex.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L2521'>_reindex_with_indexers</a>(reindexers,fill_value,copy,allow_dups)</tt>	Allow_dups indicates an internal call here.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L2558'>filter</a>(items,like,regex,axis)</tt>	Subset rows or columns of dataframe according to labels in the specified index.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L2644'>head</a>(n)</tt>	Returns first n rows.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L2650'>tail</a>(n)</tt>	Returns last n rows.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L2658'>sample</a>(n,frac,replace,weights)</tt>	Returns a random sample of items from an axis of object.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L2944'>__finalize__</a>(other,method)</tt>	Propagate metadata from other to self.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L2961'>__getattr__</a>(name)</tt>	After regular attribute access try looking up the name this allows simpler access to columns for interactive use.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L2977'>__setattr__</a>(name,value)</tt>	After regular attribute access try setting the name this allows simpler access to columns for interactive use.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L3016'>_protect_consolidate</a>(f)</tt>	Consolidate _data -- if the blocks have changed then clear the.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L3056'>consolidate</a>(inplace)</tt>	Deprecated consolidate will be an internal implementation only.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L3080'>_check_inplace_setting</a>(value)</tt>	Check whether we allow in-place setting with this type of value.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L3108'>as_matrix</a>(columns)</tt>	Convert the frame to its numpy-array representation.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L3150'>values</a>()</tt>	Numpy representation of ndframe notes.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L3178'>get_values</a>()</tt>	Same as values but handles sparseness conversions.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L3182'>get_dtype_counts</a>()</tt>	Return the counts of dtypes in this object.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L3187'>get_ftype_counts</a>()</tt>	Return the counts of ftypes in this object.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L3192'>dtypes</a>()</tt>	Return the dtypes in this object.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L3199'>ftypes</a>()</tt>	Return the ftypes (indication of sparse/dense and dtype) in this object.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L3209'>as_blocks</a>(copy)</tt>	Convert the frame to a dict of dtype -> constructor types that each has a homogeneous dtype.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L3242'>blocks</a>()</tt>	Internal property property synonym for as_blocks().
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L3247'>astype</a>(dtype,copy,errors)</tt>	Cast object to input numpy dtype.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L3307'>copy</a>(deep)</tt>	Make a copy of this objects data.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L3337'>_convert</a>(datetime,numeric,timedelta,coerce)</tt>	Attempt to infer better dtype for object columns parameters.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L3558'>ffill</a>(axis,inplace,limit,downcast)</tt>	Synonym for :meth dataframe fillna(method='ffill') <dataframe fillna>.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L3565'>bfill</a>(axis,inplace,limit,downcast)</tt>	Synonym for :meth dataframe fillna(method='bfill') <dataframe fillna>.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L3572'>replace</a>(to_replace,value,inplace,limit)</tt>	Replace values given in 'to_replace' with 'value'.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L3904'>interpolate</a>(method,axis,limit,inplace)</tt>	Interpolate values according to different methods.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L3971'>asof</a>(where,subset)</tt>	The last row without any nan is taken or the last row without nan considering only the subset of columns in the case of a dataframe.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L4107'>clip</a>(lower,upper,axis)</tt>	Trim values at input threshold s.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L4171'>clip_upper</a>(threshold,axis)</tt>	Return copy of input with values above given value s truncated.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L4195'>clip_lower</a>(threshold,axis)</tt>	Return copy of the input with values below given value s truncated.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L4219'>groupby</a>(by,axis,level,as_index)</tt>	Group series using mapper dict or key function apply given function to group return result as series or by a series of columns.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L4278'>asfreq</a>(freq,method,how,normalize)</tt>	Convert timeseries to specified frequency.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L4377'>at_time</a>(time,asof)</tt>	Select values at particular time of day e g 9 30am.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L4395'>between_time</a>(start_time,end_time,include_start,include_end)</tt>	Select values between particular times of the day (e g 9 00-9 30 am).
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L4419'>resample</a>(rule,how,axis,fill_method)</tt>	Convenience method for frequency conversion and resampling of time series.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L4595'>first</a>(offset)</tt>	Convenience method for subsetting initial periods of time series data based on a date offset.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L4631'>last</a>(offset)</tt>	Convenience method for subsetting final periods of time series data based on a date offset.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L4662'>rank</a>(axis,method,numeric_only,na_option)</tt>	Compute numerical data ranks 1 through n along axis equal values are.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L4925'>_where</a>(cond,other,inplace,axis)</tt>	Equivalent to public method where, except that other is not applied as a function even if callable.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L5250'>slice_shift</a>(periods,axis)</tt>	Equivalent to shift without copying data the shifted data will.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L5286'>tshift</a>(periods,freq,axis)</tt>	Shift the time index using the index's frequency if available.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L5343'>truncate</a>(before,after,axis,copy)</tt>	Truncates a sorted ndframe before and/or after some particular index value.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L5393'>tz_convert</a>(tz,axis,level,copy)</tt>	Convert tz-aware axis to target time zone.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L5445'>tz_localize</a>(tz,axis,level,copy)</tt>	Localize tz-naive timeseries to target time zone.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L5514'>abs</a>()</tt>	Return an object with absolute value taken--only applicable to objects that are all numeric.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L5525'>describe</a>(percentiles,include,exclude)</tt>	Generates descriptive statistics that summarize the central tendency dispersion and shape of a dataset's distribution excluding.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L5830'>_check_percentile</a>(q)</tt>	Validate percentiles used by describe and quantile.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L5896'>_add_numeric_operations</a>(cls)</tt>	Add the operations to the cls evaluate the doc strings again.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L6020'>_add_series_only_operations</a>(cls)</tt>	Add the series only operations to the cls evaluate the doc strings again.
<tt style='background-color:#E8E8E8;'> core.NDFrame <a href=' /core/generic.py#L6040'>_add_series_or_dataframe_operations</a>(cls)</tt>	Add the series or dataframe only operations to the cls evaluate the doc strings again.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/generic.py#L6090'>_doc_parms</a>(cls)</tt>	Return a tuple of the doc parms.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/ops.py#L170'>add_special_arithmetic_methods</a>(cls,arith_method,comp_method,bool_method)</tt>	Adds the full suite of special arithmetic methods (__add__, __sub__, etc.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/ops.py#L239'>add_flex_arithmetic_methods</a>(cls,flex_arith_method,flex_comp_method,flex_bool_method)</tt>	Adds the full suite of flex arithmetic methods (pow, mul, add) to the class.
<tt style='background-color:#E8E8E8;'> core._Op <a href=' /core/ops.py#L316'>get_op</a>(cls,left,right,name)</tt>	Get op dispatcher returns _op or _timeop.
<tt style='background-color:#E8E8E8;'> core._TimeOp <a href=' /core/ops.py#L443'>_convert_to_array</a>(values,name,other)</tt>	Converts values to ndarray.
<tt style='background-color:#E8E8E8;'> core._TimeOp <a href=' /core/ops.py#L604'>_is_offset</a>(arr_or_obj)</tt>	Check if obj or all elements of list-like is dateoffset.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/ops.py#L613'>_align_method_SERIES</a>(left,right,align_asobject)</tt>	Align lhs and rhs series.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/ops.py#L638'>_construct_divmod_result</a>(left,result,index,name)</tt>	Divmod returns a tuple of like indexed series instead of a single series.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/ops.py#L648'>_arith_method_SERIES</a>(op,name,str_rep,fill_zeros)</tt>	Wrapper function for series arithmetic operations to avoid code duplication.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/ops.py#L749'>_comp_method_SERIES</a>(op,name,str_rep,masker)</tt>	Wrapper function for series arithmetic operations to avoid code duplication.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/ops.py#L875'>_bool_method_SERIES</a>(op,name,str_rep)</tt>	Wrapper function for series arithmetic operations to avoid code duplication.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/ops.py#L1133'>_align_method_FRAME</a>(left,right,axis)</tt>	Convert rhs to meet lhs dims if input is list tuple or np ndarray.
<tt style='background-color:#E8E8E8;'> core.Block <a href=' /core/internals.py#L125'>is_view</a>()</tt>	Return a boolean if i am possibly a view.
<tt style='background-color:#E8E8E8;'> core.Block <a href=' /core/internals.py#L130'>is_datelike</a>()</tt>	Return true if i am a non-datelike.
<tt style='background-color:#E8E8E8;'> core.Block <a href=' /core/internals.py#L135'>is_categorical_astype</a>(dtype)</tt>	Validate that we have a astypeable to categorical.
<tt style='background-color:#E8E8E8;'> core.Block <a href=' /core/internals.py#L150'>external_values</a>(dtype)</tt>	Return an outside world format currently just the ndarray.
<tt style='background-color:#E8E8E8;'> core.Block <a href=' /core/internals.py#L154'>internal_values</a>(dtype)</tt>	Return an internal format currently just the ndarray.
<tt style='background-color:#E8E8E8;'> core.Block <a href=' /core/internals.py#L160'>get_values</a>(dtype)</tt>	Return an internal format currently just the ndarray.
<tt style='background-color:#E8E8E8;'> core.Block <a href=' /core/internals.py#L172'>to_object_block</a>(mgr)</tt>	Return myself as an object block.
<tt style='background-color:#E8E8E8;'> core.Block <a href=' /core/internals.py#L189'>array_dtype</a>()</tt>	The dtype to return if i want to construct this block as an.
<tt style='background-color:#E8E8E8;'> core.Block <a href=' /core/internals.py#L196'>make_block</a>(values,placement,ndim)</tt>	Create a new block with type inference propagate any values that are.
<tt style='background-color:#E8E8E8;'> core.Block <a href=' /core/internals.py#L208'>make_block_scalar</a>(values)</tt>	Create a scalarblock.
<tt style='background-color:#E8E8E8;'> core.Block <a href=' /core/internals.py#L214'>make_block_same_class</a>(values,placement,fastpath)</tt>	Wrap given values in a block of same type as self.
<tt style='background-color:#E8E8E8;'> core.Block <a href=' /core/internals.py#L256'>_slice</a>(slicer)</tt>	Return a slice of my values.
<tt style='background-color:#E8E8E8;'> core.Block <a href=' /core/internals.py#L275'>getitem_block</a>(slicer,new_mgr_locs)</tt>	Perform __getitem__-like return result as block.
<tt style='background-color:#E8E8E8;'> core.Block <a href=' /core/internals.py#L314'>reindex_axis</a>(indexer,method,axis,fill_value)</tt>	Reindex using pre-computed indexer information.
<tt style='background-color:#E8E8E8;'> core.Block <a href=' /core/internals.py#L335'>set</a>(locs,values,check)</tt>	Modify block in-place with new item value.
<tt style='background-color:#E8E8E8;'> core.Block <a href=' /core/internals.py#L345'>delete</a>(loc)</tt>	Delete given loc -s from block in-place.
<tt style='background-color:#E8E8E8;'> core.Block <a href=' /core/internals.py#L352'>apply</a>(func,mgr)</tt>	Apply the function to my values return a block if we are not.
<tt style='background-color:#E8E8E8;'> core.Block <a href=' /core/internals.py#L364'>fillna</a>(value,limit,inplace,downcast)</tt>	Fillna on the block with the value if we fail then convert to.
<tt style='background-color:#E8E8E8;'> core.Block <a href=' /core/internals.py#L420'>downcast</a>(dtypes,mgr)</tt>	Try to downcast each item to the dict of dtypes if present.
<tt style='background-color:#E8E8E8;'> core.Block <a href=' /core/internals.py#L473'>_astype</a>(dtype,copy,errors,values)</tt>	Coerce to the new type (if copy=true return a new copy).
<tt style='background-color:#E8E8E8;'> core.Block <a href=' /core/internals.py#L540'>convert</a>(copy)</tt>	Attempt to coerce any object types to better types return a copy.
<tt style='background-color:#E8E8E8;'> core.Block <a href=' /core/internals.py#L554'>_try_cast_result</a>(result,dtype)</tt>	Try to cast the result to our original type we may have.
<tt style='background-color:#E8E8E8;'> core.Block <a href=' /core/internals.py#L587'>_try_operate</a>(values)</tt>	Return a version to operate on as the input.
<tt style='background-color:#E8E8E8;'> core.Block <a href=' /core/internals.py#L591'>_try_coerce_args</a>(values,other)</tt>	Provide coercion to our input arguments.
<tt style='background-color:#E8E8E8;'> core.Block <a href=' /core/internals.py#L595'>_try_coerce_result</a>(result)</tt>	Reverse of try_coerce_args.
<tt style='background-color:#E8E8E8;'> core.Block <a href=' /core/internals.py#L607'>to_native_types</a>(slicer,na_rep,quoting)</tt>	Convert to our native types format slicing if desired.
<tt style='background-color:#E8E8E8;'> core.Block <a href=' /core/internals.py#L632'>replace</a>(to_replace,value,inplace,filter)</tt>	Replace the to_replace value with value possible to create new blocks here this is just a call to putmask.
<tt style='background-color:#E8E8E8;'> core.Block <a href=' /core/internals.py#L668'>_replace_single</a>()</tt>	No-op on a non-objectblock.
<tt style='background-color:#E8E8E8;'> core.Block <a href=' /core/internals.py#L672'>setitem</a>(indexer,value,mgr)</tt>	Set the value inplace return a new block (of a possibly different.
<tt style='background-color:#E8E8E8;'> core.Block <a href=' /core/internals.py#L798'>putmask</a>(mask,new,align,inplace)</tt>	Putmask the data to the block it is possible that we may create a.
<tt style='background-color:#E8E8E8;'> core.Block <a href=' /core/internals.py#L957'>_interpolate_with_fill</a>(method,axis,inplace,limit)</tt>	Fillna but using the interpolate machinery.
<tt style='background-color:#E8E8E8;'> core.Block <a href=' /core/internals.py#L984'>_interpolate</a>(method,index,values,fill_value)</tt>	Interpolate using scipy wrappers.
<tt style='background-color:#E8E8E8;'> core.Block <a href=' /core/internals.py#L1025'>take_nd</a>(indexer,axis,new_mgr_locs,fill_tuple)</tt>	Take values according to indexer and return them as a block bb.
<tt style='background-color:#E8E8E8;'> core.Block <a href=' /core/internals.py#L1063'>diff</a>(n,axis,mgr)</tt>	Return block for the diff of the values.
<tt style='background-color:#E8E8E8;'> core.Block <a href=' /core/internals.py#L1068'>shift</a>(periods,axis,mgr)</tt>	Shift the block by periods possibly upcast.
<tt style='background-color:#E8E8E8;'> core.Block <a href=' /core/internals.py#L1098'>eval</a>(func,other,raise_on_error,try_cast)</tt>	Evaluate the block return result block from the result.
<tt style='background-color:#E8E8E8;'> core.Block <a href=' /core/internals.py#L1216'>where</a>(other,cond,align,raise_on_error)</tt>	Evaluate the block return result block s from the result.
<tt style='background-color:#E8E8E8;'> core.Block <a href=' /core/internals.py#L1315'>quantile</a>(qs,interpolation,axis,mgr)</tt>	Compute the quantiles of the.
<tt style='background-color:#E8E8E8;'> core.NonConsolidatableMixIn <a href=' /core/internals.py#L1483'>get_values</a>(dtype)</tt>	Need to to_dense myself and always return a ndim sized object.
<tt style='background-color:#E8E8E8;'> core.NonConsolidatableMixIn <a href=' /core/internals.py#L1516'>putmask</a>(mask,new,align,inplace)</tt>	Putmask the data to the block we must be a single block and not.
<tt style='background-color:#E8E8E8;'> core.NonConsolidatableMixIn <a href=' /core/internals.py#L1550'>_slice</a>(slicer)</tt>	Return a slice of my values but densify first.
<tt style='background-color:#E8E8E8;'> core.FloatBlock <a href=' /core/internals.py#L1595'>to_native_types</a>(slicer,na_rep,float_format,decimal)</tt>	Convert to our native types format slicing if desired.
<tt style='background-color:#E8E8E8;'> core.DatetimeLikeBlockMixin <a href=' /core/internals.py#L1687'>_try_operate</a>(values)</tt>	Return a version to operate on.
<tt style='background-color:#E8E8E8;'> core.DatetimeLikeBlockMixin <a href=' /core/internals.py#L1691'>get_values</a>(dtype)</tt>	Return object dtype as boxed values such as timestamps/timedelta.
<tt style='background-color:#E8E8E8;'> core.TimeDeltaBlock <a href=' /core/internals.py#L1719'>_try_coerce_args</a>(values,other)</tt>	Coerce values and other to int64 with null values converted to inat.
<tt style='background-color:#E8E8E8;'> core.TimeDeltaBlock <a href=' /core/internals.py#L1762'>_try_coerce_result</a>(result)</tt>	Reverse of try_coerce_args / try_operate.
<tt style='background-color:#E8E8E8;'> core.TimeDeltaBlock <a href=' /core/internals.py#L1776'>to_native_types</a>(slicer,na_rep,quoting)</tt>	Convert to our native types format slicing if desired.
<tt style='background-color:#E8E8E8;'> core.ObjectBlock <a href=' /core/internals.py#L1846'>is_bool</a>()</tt>	We can be a bool if we have only bool values but are of type.
<tt style='background-color:#E8E8E8;'> core.ObjectBlock <a href=' /core/internals.py#L1854'>convert</a>()</tt>	Attempt to coerce any object types to better types return a copy of.
<tt style='background-color:#E8E8E8;'> core.ObjectBlock <a href=' /core/internals.py#L1912'>set</a>(locs,values,check)</tt>	Modify block in-place with new item value.
<tt style='background-color:#E8E8E8;'> core.CategoricalBlock <a href=' /core/internals.py#L2098'>is_view</a>()</tt>	I am never a view.
<tt style='background-color:#E8E8E8;'> core.CategoricalBlock <a href=' /core/internals.py#L2109'>array_dtype</a>()</tt>	The dtype to return if i want to construct this block as an.
<tt style='background-color:#E8E8E8;'> core.CategoricalBlock <a href=' /core/internals.py#L2116'>_slice</a>(slicer)</tt>	Return a slice of my values.
<tt style='background-color:#E8E8E8;'> core.CategoricalBlock <a href=' /core/internals.py#L2123'>_try_coerce_result</a>(result)</tt>	Reverse of try_coerce_args.
<tt style='background-color:#E8E8E8;'> core.CategoricalBlock <a href=' /core/internals.py#L2159'>take_nd</a>(indexer,axis,new_mgr_locs,fill_tuple)</tt>	Take values according to indexer and return them as a block bb.
<tt style='background-color:#E8E8E8;'> core.CategoricalBlock <a href=' /core/internals.py#L2182'>_astype</a>(dtype,copy,errors,values)</tt>	Coerce to the new type (if copy=true return a new copy).
<tt style='background-color:#E8E8E8;'> core.CategoricalBlock <a href=' /core/internals.py#L2199'>to_native_types</a>(slicer,na_rep,quoting)</tt>	Convert to our native types format slicing if desired.
<tt style='background-color:#E8E8E8;'> core.DatetimeBlock <a href=' /core/internals.py#L2226'>_astype</a>(dtype,mgr)</tt>	These automatically copy so copy=true has no effect.
<tt style='background-color:#E8E8E8;'> core.DatetimeBlock <a href=' /core/internals.py#L2258'>_try_coerce_args</a>(values,other)</tt>	Coerce values and other to dtype 'i8' nan and nat convert to.
<tt style='background-color:#E8E8E8;'> core.DatetimeBlock <a href=' /core/internals.py#L2307'>_try_coerce_result</a>(result)</tt>	Reverse of try_coerce_args.
<tt style='background-color:#E8E8E8;'> core.DatetimeBlock <a href=' /core/internals.py#L2323'>to_native_types</a>(slicer,na_rep,date_format,quoting)</tt>	Convert to our native types format slicing if desired.
<tt style='background-color:#E8E8E8;'> core.DatetimeBlock <a href=' /core/internals.py#L2343'>set</a>(locs,values,check)</tt>	Modify block in-place with new item value.
<tt style='background-color:#E8E8E8;'> core.DatetimeTZBlock <a href=' /core/internals.py#L2389'>external_values</a>()</tt>	We internally represent the data as a datetimeindex but for.
<tt style='background-color:#E8E8E8;'> core.DatetimeTZBlock <a href=' /core/internals.py#L2403'>to_object_block</a>(mgr)</tt>	Return myself as an object block.
<tt style='background-color:#E8E8E8;'> core.DatetimeTZBlock <a href=' /core/internals.py#L2418'>_slice</a>(slicer)</tt>	Return a slice of my values.
<tt style='background-color:#E8E8E8;'> core.DatetimeTZBlock <a href=' /core/internals.py#L2427'>_try_coerce_args</a>(values,other)</tt>	Localize and return i8 for the values.
<tt style='background-color:#E8E8E8;'> core.DatetimeTZBlock <a href=' /core/internals.py#L2472'>_try_coerce_result</a>(result)</tt>	Reverse of try_coerce_args.
<tt style='background-color:#E8E8E8;'> core.DatetimeTZBlock <a href=' /core/internals.py#L2491'>shift</a>(periods,axis,mgr)</tt>	Shift the block by periods.
<tt style='background-color:#E8E8E8;'> core.SparseBlock <a href=' /core/internals.py#L2586'>make_block_same_class</a>(values,placement,sparse_index,kind)</tt>	Return a new block.
<tt style='background-color:#E8E8E8;'> core.SparseBlock <a href=' /core/internals.py#L2639'>shift</a>(periods,axis,mgr)</tt>	Shift the block by periods.
<tt style='background-color:#E8E8E8;'> core.SparseBlock <a href=' /core/internals.py#L2658'>reindex_axis</a>(indexer,method,axis,fill_value)</tt>	Reindex using pre-computed indexer information.
<tt style='background-color:#E8E8E8;'> core.SparseBlock <a href=' /core/internals.py#L2673'>sparse_reindex</a>(new_index)</tt>	Sparse reindex and return a new block.
<tt style='background-color:#E8E8E8;'> core.BlockManager <a href=' /core/internals.py#L2801'>make_empty</a>(axes)</tt>	Return an empty blockmanager with the items axis of len 0.
<tt style='background-color:#E8E8E8;'> core.BlockManager <a href=' /core/internals.py#L2840'>rename_axis</a>(mapper,axis,copy,level)</tt>	Rename one of axes.
<tt style='background-color:#E8E8E8;'> core.BlockManager <a href=' /core/internals.py#L2876'>_rebuild_blknos_and_blklocs</a>()</tt>	Update mgr _blknos / mgr _blklocs.
<tt style='background-color:#E8E8E8;'> core.BlockManager <a href=' /core/internals.py#L2902'>_get_counts</a>(f)</tt>	Return a dict of the counts of the function in blockmanager.
<tt style='background-color:#E8E8E8;'> core.BlockManager <a href=' /core/internals.py#L3013'>apply</a>(f,axes,filter,do_integrity_check)</tt>	Iterate over the blocks collect and create a new block manager parameters.
<tt style='background-color:#E8E8E8;'> core.BlockManager <a href=' /core/internals.py#L3101'>reduction</a>(f,axis,consolidate,transposed)</tt>	Iterate over the blocks collect and create a new block manager.
<tt style='background-color:#E8E8E8;'> core.BlockManager <a href=' /core/internals.py#L3232'>replace_list</a>(src_list,dest_list,inplace,regex)</tt>	Do a list replace.
<tt style='background-color:#E8E8E8;'> core.BlockManager <a href=' /core/internals.py#L3292'>reshape_nd</a>(axes)</tt>	A 2d-nd reshape operation on a blockmanager.
<tt style='background-color:#E8E8E8;'> core.BlockManager <a href=' /core/internals.py#L3296'>is_consolidated</a>()</tt>	Return true if more than one block with the same dtype.
<tt style='background-color:#E8E8E8;'> core.BlockManager <a href=' /core/internals.py#L3327'>is_view</a>()</tt>	Return a boolean if we are a single block and are a view.
<tt style='background-color:#E8E8E8;'> core.BlockManager <a href=' /core/internals.py#L3362'>combine</a>(blocks,copy)</tt>	Return a new manager with the blocks.
<tt style='background-color:#E8E8E8;'> core.BlockManager <a href=' /core/internals.py#L3411'>copy</a>(deep,mgr)</tt>	Make deep or shallow copy of blockmanager.
<tt style='background-color:#E8E8E8;'> core.BlockManager <a href=' /core/internals.py#L3452'>_interleave</a>()</tt>	Return ndarray from blocks with specified item order.
<tt style='background-color:#E8E8E8;'> core.BlockManager <a href=' /core/internals.py#L3528'>fast_xs</a>(loc)</tt>	Get a cross sectional for a given location in the.
<tt style='background-color:#E8E8E8;'> core.BlockManager <a href=' /core/internals.py#L3560'>consolidate</a>()</tt>	Join together blocks having same dtype.
<tt style='background-color:#E8E8E8;'> core.BlockManager <a href=' /core/internals.py#L3583'>get</a>(item,fastpath)</tt>	Return values for selected item ndarray or blockmanager.
<tt style='background-color:#E8E8E8;'> core.BlockManager <a href=' /core/internals.py#L3612'>iget</a>(i,fastpath)</tt>	Return the data as a singleblockmanager if fastpath=true and possible.
<tt style='background-color:#E8E8E8;'> core.BlockManager <a href=' /core/internals.py#L3630'>get_scalar</a>(tup)</tt>	Retrieve single item.
<tt style='background-color:#E8E8E8;'> core.BlockManager <a href=' /core/internals.py#L3645'>delete</a>(item)</tt>	Delete selected item items if non-unique in-place.
<tt style='background-color:#E8E8E8;'> core.BlockManager <a href=' /core/internals.py#L3683'>set</a>(item,value,check)</tt>	Set new item in-place does not consolidate adds new block if not.
<tt style='background-color:#E8E8E8;'> core.BlockManager <a href=' /core/internals.py#L3795'>insert</a>(loc,item,value,allow_duplicates)</tt>	Insert item at selected position.
<tt style='background-color:#E8E8E8;'> core.BlockManager <a href=' /core/internals.py#L3848'>reindex_axis</a>(new_index,axis,method,limit)</tt>	Conform block manager to new index.
<tt style='background-color:#E8E8E8;'> core.BlockManager <a href=' /core/internals.py#L3903'>_slice_take_blocks_ax0</a>(slice_or_indexer,fill_tuple)</tt>	Slice/take blocks along axis=0.
<tt style='background-color:#E8E8E8;'> core.BlockManager <a href=' /core/internals.py#L3990'>take</a>(indexer,axis,verify,convert)</tt>	Take items along any axis.
<tt style='background-color:#E8E8E8;'> core.BlockManager <a href=' /core/internals.py#L4034'>_is_indexed_like</a>(other)</tt>	Check all axes except items.
<tt style='background-color:#E8E8E8;'> core.SingleBlockManager <a href=' /core/internals.py#L4132'>_blknos</a>()</tt>	Compat with blockmanager.
<tt style='background-color:#E8E8E8;'> core.SingleBlockManager <a href=' /core/internals.py#L4137'>_blklocs</a>()</tt>	Compat with blockmanager.
<tt style='background-color:#E8E8E8;'> core.SingleBlockManager <a href=' /core/internals.py#L4189'>convert</a>()</tt>	Convert the whole block as one.
<tt style='background-color:#E8E8E8;'> core.SingleBlockManager <a href=' /core/internals.py#L4224'>get_values</a>()</tt>	Return a dense type view.
<tt style='background-color:#E8E8E8;'> core.SingleBlockManager <a href=' /core/internals.py#L4228'>asobject</a>()</tt>	Return a object dtype array datetime/timedelta like values are boxed.
<tt style='background-color:#E8E8E8;'> core.SingleBlockManager <a href=' /core/internals.py#L4253'>delete</a>(item)</tt>	Delete single item from singleblockmanager.
<tt style='background-color:#E8E8E8;'> core.SingleBlockManager <a href=' /core/internals.py#L4263'>fast_xs</a>(loc)</tt>	Fast path for getting a cross-section.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/internals.py#L4271'>construction_error</a>(tot_items,block_shape,axes,e)</tt>	Raise a helpful message about our construction.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/internals.py#L4427'>_simple_blockify</a>(tuples,dtype)</tt>	Return a single array of a block that has a single dtype if dtype is.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/internals.py#L4441'>_multi_blockify</a>(tuples,dtype)</tt>	Return an array of blocks that potentially have different dtypes.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/internals.py#L4458'>_sparse_blockify</a>(tuples,dtype)</tt>	Return an array of blocks that potentially have different dtypes (and.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/internals.py#L4513'>_consolidate</a>(blocks)</tt>	Merge blocks having same dtype exclude non-consolidating blocks.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/internals.py#L4557'>_extend_blocks</a>(result,blocks)</tt>	Return a new extended blocks givin the result.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/internals.py#L4574'>_block_shape</a>(values,ndim,shape)</tt>	Guarantee the shape of the values to be at least 1 d.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/internals.py#L4627'>_block2d_to_blocknd</a>(values,placement,shape,labels)</tt>	Pivot to the labels shape.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/internals.py#L4655'>_factor_indexer</a>(shape,labels)</tt>	Given a tuple of shape and a list of categorical labels return the.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/internals.py#L4688'>items_overlap_with_suffix</a>(left,lsuffix,right,rsuffix)</tt>	If two indices overlap add suffixes to overlapping entries.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/internals.py#L4717'>_safe_reshape</a>(arr,new_shape)</tt>	If possible reshape arr to have shape new_shape, with a couple of exceptions see gh-13012 :.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/internals.py#L4739'>_transform_index</a>(index,func,level)</tt>	Apply function to all values found in index.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/internals.py#L4759'>_putmask_smart</a>(v,m,n)</tt>	Return a new block try to preserve dtype if possible.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/internals.py#L4814'>concatenate_block_managers</a>(mgrs_indexers,axes,concat_axis,copy)</tt>	Concatenate block managers into one.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/internals.py#L4837'>get_empty_dtype_and_na</a>(join_units)</tt>	Return dtype and n/a values to use when concatenating specified units.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/internals.py#L4927'>concatenate_join_units</a>(join_units,concat_axis,copy)</tt>	Concatenate values from several join units along selected axis.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/internals.py#L4952'>get_mgr_concatenation_plan</a>(mgr,indexers)</tt>	Construct concatenation plan for given block manager and indexers.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/internals.py#L5031'>combine_concat_plans</a>(plans,concat_axis)</tt>	Combine multiple concatenation plans into one.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/internals.py#L5094'>trim_join_unit</a>(join_unit,length)</tt>	Reduce join_unit's shape along item axis to length.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/internals.py#L5246'>_fast_count_smallints</a>(arr)</tt>	Faster version of set arr for sequences of small numbers.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/sorting.py#L19'>get_group_index</a>(labels,shape,sort,xnull)</tt>	For the particular label_list gets the offsets into the hypothetical list representing the totally ordered cartesian product of all possible label.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/sorting.py#L97'>get_compressed_ids</a>(labels,sizes)</tt>	Group_index is offsets into cartesian product of all possible labels this.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/sorting.py#L146'>decons_obs_group_ids</a>(comp_ids,obs_ids,shape,labels)</tt>	Reconstruct labels from observed group ids parameters.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/sorting.py#L227'>nargsort</a>(items,kind,ascending,na_position)</tt>	This is intended to be a drop-in replacement for np argsort which.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/sorting.py#L293'>get_indexer_dict</a>(label_list,keys)</tt>	Return a diction of {labels} -> {indexers}.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/sorting.py#L313'>get_group_index_sorter</a>(group_index,ngroups)</tt>	Algos groupsort_indexer implements counting sort and it is at least.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/sorting.py#L340'>compress_group_index</a>(group_index,sort)</tt>	Group_index is offsets into cartesian product of all possible labels this.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/common.py#L101'>flatten</a>(l)</tt>	Flatten an arbitrarily nested sequence.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/common.py#L148'>_get_info_slice</a>(obj,indexer)</tt>	Slice the info axis of obj with indexer.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/common.py#L276'>split_ranges</a>(mask)</tt>	Generates tuples of ranges which cover all true value in mask.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/common.py#L323'>map_indices_py</a>(arr)</tt>	Returns a dictionary with element index pairs for each element in the.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/common.py#L406'>is_null_slice</a>(obj)</tt>	We have a null slice.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/common.py#L412'>is_full_slice</a>(obj,l)</tt>	We have a full length slice.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/common.py#L435'>_apply_if_callable</a>(maybe_callable,obj)</tt>	Evaluate possibly callable input using obj and kwargs if it is callable.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/common.py#L465'>_dict_compat</a>(d)</tt>	Helper function to convert datetimelike-keyed dicts to timestamp-keyed dict.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/common.py#L492'>in_interactive_session</a>()</tt>	Check if we're running in an interactive shell.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/common.py#L509'>in_qtconsole</a>()</tt>	Check if we're inside an ipython qtconsole deprecated this is no longer needed or working in ipython 3 and above.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/common.py#L527'>in_ipnb</a>()</tt>	Check if we're inside an ipython notebook deprecated this is no longer used in pandas and won't work in ipython 3.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/common.py#L546'>in_ipython_frontend</a>()</tt>	Check if we're inside an an ipython zmq frontend.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/common.py#L559'>_random_state</a>(state)</tt>	Helper function for processing random_state arguments.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/algorithms.py#L42'>_ensure_data</a>(values,dtype)</tt>	Routine to ensure that our data is of the correct.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/algorithms.py#L132'>_reconstruct_data</a>(values,dtype,original)</tt>	Reverse of _ensure_data.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/algorithms.py#L158'>_ensure_arraylike</a>(values)</tt>	Ensure that we are arraylike if not already.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/algorithms.py#L230'>match</a>(to_match,values,na_sentinel)</tt>	Compute locations of to_match into values.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/algorithms.py#L268'>unique</a>(values)</tt>	Hash table-based unique uniques are returned in order.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/algorithms.py#L367'>isin</a>(comps,values)</tt>	Compute the isin boolean array.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/algorithms.py#L424'>safe_sort</a>(values,labels,na_sentinel,assume_unique)</tt>	Sort values and reorder corresponding labels.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/algorithms.py#L522'>factorize</a>(values,sort,order,na_sentinel)</tt>	Encode input values as an enumerated type or categorical variable parameters.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/algorithms.py#L576'>value_counts</a>(values,sort,ascending,normalize)</tt>	Compute a histogram of the counts of non-null values.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/algorithms.py#L693'>duplicated</a>(values,keep)</tt>	Return boolean ndarray denoting duplicate values.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/algorithms.py#L720'>mode</a>(values)</tt>	Returns the mode s of an array.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/algorithms.py#L763'>rank</a>(values,axis,method,na_option)</tt>	Rank the values along a given axis.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/algorithms.py#L802'>checked_add_with_arr</a>(arr,b,arr_mask,b_mask)</tt>	Perform array addition that checks for underflow and overflow.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/algorithms.py#L905'>quantile</a>(x,q,interpolation_method)</tt>	Compute sample quantile or quantiles of the input array for example q=0 5.
<tt style='background-color:#E8E8E8;'> core.SelectN <a href=' /core/algorithms.py#L1005'>is_valid_dtype_n_method</a>(dtype)</tt>	Helper function to determine if dtype is valid for.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/algorithms.py#L1370'>take_nd</a>(arr,indexer,axis,out)</tt>	Specialized cython take which sets nan values in one pass parameters.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/algorithms.py#L1476'>take_2d_multi</a>(arr,indexer,out,fill_value)</tt>	Specialized cython take which sets nan values in one pass.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/algorithms.py#L1558'>diff</a>(arr,n,axis)</tt>	Difference of n between self analagoust to s-s.
<tt style='background-color:#E8E8E8;'> core.StringMixin <a href=' /core/base.py#L42'>__str__</a>()</tt>	Return a string representation for a particular object invoked by str df in both py2/py3.
<tt style='background-color:#E8E8E8;'> core.StringMixin <a href=' /core/base.py#L54'>__bytes__</a>()</tt>	Return a string representation for a particular object.
<tt style='background-color:#E8E8E8;'> core.StringMixin <a href=' /core/base.py#L66'>__repr__</a>()</tt>	Return a string representation for a particular object.
<tt style='background-color:#E8E8E8;'> core.PandasObject <a href=' /core/base.py#L79'>_constructor</a>()</tt>	Class constructor (for this class it's just __class__.
<tt style='background-color:#E8E8E8;'> core.PandasObject <a href=' /core/base.py#L84'>__unicode__</a>()</tt>	Return a string representation for a particular object.
<tt style='background-color:#E8E8E8;'> core.PandasObject <a href=' /core/base.py#L94'>_dir_additions</a>()</tt>	Add addtional __dir__ for this object.
<tt style='background-color:#E8E8E8;'> core.PandasObject <a href=' /core/base.py#L98'>_dir_deletions</a>()</tt>	Delete unwanted __dir__ for this object.
<tt style='background-color:#E8E8E8;'> core.PandasObject <a href=' /core/base.py#L102'>__dir__</a>()</tt>	Provide method name lookup and completion.
<tt style='background-color:#E8E8E8;'> core.PandasObject <a href=' /core/base.py#L111'>_reset_cache</a>(key)</tt>	Reset cached properties if key is passed only clears that key.
<tt style='background-color:#E8E8E8;'> core.PandasObject <a href=' /core/base.py#L122'>__sizeof__</a>()</tt>	Generates the total memory usage for a object that returns.
<tt style='background-color:#E8E8E8;'> core.NoNewAttributesMixin <a href=' /core/base.py#L149'>_freeze</a>()</tt>	Prevents setting additional attributes.
<tt style='background-color:#E8E8E8;'> core.PandasDelegate <a href=' /core/base.py#L178'>_add_delegate_accessors</a>(cls,delegate,accessors,typ)</tt>	Add accessors to cls from the delegate class.
<tt style='background-color:#E8E8E8;'> core.SelectionMixin <a href=' /core/base.py#L293'>_selection_name</a>()</tt>	Return a name for myself this would ideally be called the 'name' property but we cannot conflict with the.
<tt style='background-color:#E8E8E8;'> core.SelectionMixin <a href=' /core/base.py#L357'>_gotitem</a>(key,ndim,subset)</tt>	Sub-classes to define.
<tt style='background-color:#E8E8E8;'> core.SelectionMixin <a href=' /core/base.py#L414'>_try_aggregate_string_function</a>(arg)</tt>	If arg is a string then try to operate on it.
<tt style='background-color:#E8E8E8;'> core.SelectionMixin <a href=' /core/base.py#L434'>_aggregate</a>(arg)</tt>	Provide an implementation for the aggregators.
<tt style='background-color:#E8E8E8;'> core.SelectionMixin <a href=' /core/base.py#L736'>_shallow_copy</a>(obj,obj_type)</tt>	Return a new object with the replacement attributes.
<tt style='background-color:#E8E8E8;'> core.SelectionMixin <a href=' /core/base.py#L749'>_is_cython_func</a>(arg)</tt>	If we define an internal function for this argument return it.
<tt style='background-color:#E8E8E8;'> core.SelectionMixin <a href=' /core/base.py#L753'>_is_builtin_func</a>(arg)</tt>	If we define an builtin function for this argument return it.
<tt style='background-color:#E8E8E8;'> core.GroupByMixin <a href=' /core/base.py#L764'>_dispatch</a>(name)</tt>	Dispatch to apply.
<tt style='background-color:#E8E8E8;'> core.GroupByMixin <a href=' /core/base.py#L776'>_gotitem</a>(key,ndim,subset)</tt>	Sub-classes to define.
<tt style='background-color:#E8E8E8;'> core.IndexOpsMixin <a href=' /core/base.py#L817'>transpose</a>()</tt>	Return the transpose which is by definition self.
<tt style='background-color:#E8E8E8;'> core.IndexOpsMixin <a href=' /core/base.py#L825'>shape</a>()</tt>	Return a tuple of the shape of the underlying data.
<tt style='background-color:#E8E8E8;'> core.IndexOpsMixin <a href=' /core/base.py#L830'>ndim</a>()</tt>	Return the number of dimensions of the underlying data.
<tt style='background-color:#E8E8E8;'> core.IndexOpsMixin <a href=' /core/base.py#L837'>item</a>()</tt>	Return the first element of the underlying data as a python.
<tt style='background-color:#E8E8E8;'> core.IndexOpsMixin <a href=' /core/base.py#L848'>data</a>()</tt>	Return the data pointer of the underlying data.
<tt style='background-color:#E8E8E8;'> core.IndexOpsMixin <a href=' /core/base.py#L853'>itemsize</a>()</tt>	Return the size of the dtype of the item of the underlying data.
<tt style='background-color:#E8E8E8;'> core.IndexOpsMixin <a href=' /core/base.py#L858'>nbytes</a>()</tt>	Return the number of bytes in the underlying data.
<tt style='background-color:#E8E8E8;'> core.IndexOpsMixin <a href=' /core/base.py#L863'>strides</a>()</tt>	Return the strides of the underlying data.
<tt style='background-color:#E8E8E8;'> core.IndexOpsMixin <a href=' /core/base.py#L868'>size</a>()</tt>	Return the number of elements in the underlying data.
<tt style='background-color:#E8E8E8;'> core.IndexOpsMixin <a href=' /core/base.py#L873'>flags</a>()</tt>	Return the ndarray flags for the underlying data.
<tt style='background-color:#E8E8E8;'> core.IndexOpsMixin <a href=' /core/base.py#L878'>base</a>()</tt>	Return the base object if the memory of the underlying data is.
<tt style='background-color:#E8E8E8;'> core.IndexOpsMixin <a href=' /core/base.py#L885'>_values</a>()</tt>	The internal implementation.
<tt style='background-color:#E8E8E8;'> core.IndexOpsMixin <a href=' /core/base.py#L894'>max</a>()</tt>	The maximum value of the object.
<tt style='background-color:#E8E8E8;'> core.IndexOpsMixin <a href=' /core/base.py#L898'>argmax</a>(axis)</tt>	Return a ndarray of the maximum argument indexer see also.
<tt style='background-color:#E8E8E8;'> core.IndexOpsMixin <a href=' /core/base.py#L908'>min</a>()</tt>	The minimum value of the object.
<tt style='background-color:#E8E8E8;'> core.IndexOpsMixin <a href=' /core/base.py#L912'>argmin</a>(axis)</tt>	Return a ndarray of the minimum argument indexer see also.
<tt style='background-color:#E8E8E8;'> core.IndexOpsMixin <a href=' /core/base.py#L922'>hasnans</a>()</tt>	Return if i have any nans enables various perf speedups.
<tt style='background-color:#E8E8E8;'> core.IndexOpsMixin <a href=' /core/base.py#L927'>_reduce</a>(op,name,axis,skipna)</tt>	Perform the reduction type operation if we can.
<tt style='background-color:#E8E8E8;'> core.IndexOpsMixin <a href=' /core/base.py#L936'>value_counts</a>(normalize,sort,ascending,bins)</tt>	Returns object containing counts of unique values.
<tt style='background-color:#E8E8E8;'> core.IndexOpsMixin <a href=' /core/base.py#L1004'>nunique</a>(dropna)</tt>	Return number of unique elements in the object.
<tt style='background-color:#E8E8E8;'> core.IndexOpsMixin <a href=' /core/base.py#L1025'>is_unique</a>()</tt>	Return boolean if values in the object are unique.
<tt style='background-color:#E8E8E8;'> core.IndexOpsMixin <a href=' /core/base.py#L1036'>is_monotonic</a>()</tt>	Return boolean if values in the object are monotonic_increasing.
<tt style='background-color:#E8E8E8;'> core.IndexOpsMixin <a href=' /core/base.py#L1053'>is_monotonic_decreasing</a>()</tt>	Return boolean if values in the object are monotonic_decreasing.
<tt style='background-color:#E8E8E8;'> core.IndexOpsMixin <a href=' /core/base.py#L1068'>memory_usage</a>(deep)</tt>	Memory usage of my values parameters.
<tt style='background-color:#E8E8E8;'> core.IndexOpsMixin <a href=' /core/base.py#L1100'>factorize</a>(sort,na_sentinel)</tt>	Encode the object as an enumerated type or categorical variable.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/panel.py#L48'>_ensure_like_indices</a>(time,panels)</tt>	Makes sure that time and panels are conformable.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/panel.py#L63'>panel_index</a>(time,panels,names)</tt>	Returns a multi-index suitable for a panel-like dataframe parameters.
<tt style='background-color:#E8E8E8;'> core.Panel <a href=' /core/panel.py#L150'>_init_data</a>(data,copy,dtype)</tt>	Generate nd initialization axes are passed.
<tt style='background-color:#E8E8E8;'> core.Panel <a href=' /core/panel.py#L239'>from_dict</a>(cls,data,intersect,orient)</tt>	Construct panel from dict of dataframe objects parameters.
<tt style='background-color:#E8E8E8;'> core.Panel <a href=' /core/panel.py#L343'>__unicode__</a>()</tt>	Return a string representation for a particular panel invoked by unicode df in py2 only.
<tt style='background-color:#E8E8E8;'> core.Panel <a href=' /core/panel.py#L370'>_get_plane_axes_index</a>(axis)</tt>	Get my plane axes indexes these are already.
<tt style='background-color:#E8E8E8;'> core.Panel <a href=' /core/panel.py#L390'>_get_plane_axes</a>(axis)</tt>	Get my plane axes indexes these are already.
<tt style='background-color:#E8E8E8;'> core.Panel <a href=' /core/panel.py#L401'>to_sparse</a>()</tt>	Not implemented do not call this method as sparsifying is not supported for panel objects and will raise an error.
<tt style='background-color:#E8E8E8;'> core.Panel <a href=' /core/panel.py#L411'>to_excel</a>(path,na_rep,engine)</tt>	Write each dataframe in panel to a separate excel sheet parameters.
<tt style='background-color:#E8E8E8;'> core.Panel <a href=' /core/panel.py#L469'>get_value</a>()</tt>	Quickly retrieve single value at item major minor location.
<tt style='background-color:#E8E8E8;'> core.Panel <a href=' /core/panel.py#L505'>set_value</a>()</tt>	Quickly set single value at item major minor location.
<tt style='background-color:#E8E8E8;'> core.Panel <a href=' /core/panel.py#L594'>_unpickle_panel_compat</a>(state)</tt>	Unpickle the panel.
<tt style='background-color:#E8E8E8;'> core.Panel <a href=' /core/panel.py#L606'>conform</a>(frame,axis)</tt>	Conform input dataframe to align with chosen axis pair.
<tt style='background-color:#E8E8E8;'> core.Panel <a href=' /core/panel.py#L632'>round</a>(decimals)</tt>	Round each value in panel to a specified number of decimal places.
<tt style='background-color:#E8E8E8;'> core.Panel <a href=' /core/panel.py#L660'>_needs_reindex_multi</a>(axes,method,level)</tt>	Don't allow a multi reindex on panel or above ndim.
<tt style='background-color:#E8E8E8;'> core.Panel <a href=' /core/panel.py#L667'>dropna</a>(axis,how,inplace)</tt>	Drop 2d from panel holding passed axis constant parameters.
<tt style='background-color:#E8E8E8;'> core.Panel <a href=' /core/panel.py#L759'>major_xs</a>(key)</tt>	Return slice of panel along major axis parameters.
<tt style='background-color:#E8E8E8;'> core.Panel <a href=' /core/panel.py#L784'>minor_xs</a>(key)</tt>	Return slice of panel along minor axis parameters.
<tt style='background-color:#E8E8E8;'> core.Panel <a href=' /core/panel.py#L809'>xs</a>(key,axis)</tt>	Return slice of panel along selected axis parameters.
<tt style='background-color:#E8E8E8;'> core.Panel <a href=' /core/panel.py#L846'>_ixs</a>(i,axis)</tt>	I : int slice or sequence of integers.
<tt style='background-color:#E8E8E8;'> core.Panel <a href=' /core/panel.py#L873'>groupby</a>(function,axis)</tt>	Group data on given axis returning groupby object.
<tt style='background-color:#E8E8E8;'> core.Panel <a href=' /core/panel.py#L891'>to_frame</a>(filter_observations)</tt>	Transform wide format into long stacked format as dataframe whose columns are the panel's items and whose index is a multiindex formed.
<tt style='background-color:#E8E8E8;'> core.Panel <a href=' /core/panel.py#L967'>apply</a>(func,axis)</tt>	Applies function along axis or axes of the panel parameters.
<tt style='background-color:#E8E8E8;'> core.Panel <a href=' /core/panel.py#L1090'>_apply_2d</a>(func,axis)</tt>	Handle 2-d slices equiv to iterating over the other axis.
<tt style='background-color:#E8E8E8;'> core.Panel <a href=' /core/panel.py#L1134'>_construct_return_type</a>(result,axes)</tt>	Return the type for the ndim of the result.
<tt style='background-color:#E8E8E8;'> core.Panel <a href=' /core/panel.py#L1227'>count</a>(axis)</tt>	Return number of observations over requested axis.
<tt style='background-color:#E8E8E8;'> core.Panel <a href=' /core/panel.py#L1247'>shift</a>(periods,freq,axis)</tt>	Shift index by desired number of periods with an optional time freq.
<tt style='background-color:#E8E8E8;'> core.Panel <a href=' /core/panel.py#L1273'>join</a>(other,how,lsuffix,rsuffix)</tt>	Join items with other panel either on major and minor axes column parameters.
<tt style='background-color:#E8E8E8;'> core.Panel <a href=' /core/panel.py#L1322'>update</a>(other,join,overwrite,filter_func)</tt>	Modify panel in place using non-na values from passed panel or object coercible to panel.
<tt style='background-color:#E8E8E8;'> core.Panel <a href=' /core/panel.py#L1368'>_extract_axes</a>(data,axes)</tt>	Return a list of the axis indicies.
<tt style='background-color:#E8E8E8;'> core.Panel <a href=' /core/panel.py#L1374'>_extract_axes_for_slice</a>(axes)</tt>	Return the slice dictionary for these axes.
<tt style='background-color:#E8E8E8;'> core.Panel <a href=' /core/panel.py#L1399'>_homogenize_dict</a>(frames,intersect,dtype)</tt>	Conform set of _constructor_sliced-like objects to either an intersection of indices / columns or a union.
<tt style='background-color:#E8E8E8;'> core.Panel <a href=' /core/panel.py#L1484'>_add_aggregate_operations</a>(cls,use_numexpr)</tt>	Add the operations to the cls evaluate the doc strings again.
<tt style='background-color:#E8E8E8;'> core._Window <a href=' /core/window.py#L113'>_convert_freq</a>(how)</tt>	Resample according to the how return a new object.
<tt style='background-color:#E8E8E8;'> core._Window <a href=' /core/window.py#L130'>_create_blocks</a>(how)</tt>	Split data into blocks & return conformed data.
<tt style='background-color:#E8E8E8;'> core._Window <a href=' /core/window.py#L146'>_gotitem</a>(key,ndim,subset)</tt>	Sub-classes to define.
<tt style='background-color:#E8E8E8;'> core._Window <a href=' /core/window.py#L189'>__unicode__</a>()</tt>	Provide a nice str repr of our rolling object.
<tt style='background-color:#E8E8E8;'> core._Window <a href=' /core/window.py#L198'>_get_index</a>(index)</tt>	Return index as ndarrays.
<tt style='background-color:#E8E8E8;'> core._Window <a href=' /core/window.py#L243'>_wrap_result</a>(result,block,obj)</tt>	Wrap a single result.
<tt style='background-color:#E8E8E8;'> core._Window <a href=' /core/window.py#L265'>_wrap_results</a>(results,blocks,obj)</tt>	Wrap the results.
<tt style='background-color:#E8E8E8;'> core._Window <a href=' /core/window.py#L313'>_center_window</a>(result,window)</tt>	Center the result in the window.
<tt style='background-color:#E8E8E8;'> core.Window <a href=' /core/window.py#L527'>_prep_window</a>()</tt>	Provide validation for our window type return the window.
<tt style='background-color:#E8E8E8;'> core.Window <a href=' /core/window.py#L564'>_apply_window</a>(mean,how)</tt>	Applies a moving window of type window_type on the data.
<tt style='background-color:#E8E8E8;'> core._GroupByMixin <a href=' /core/resample.py#L651'>_apply</a>(func,name,window,center)</tt>	Dispatch to apply we are stripping all of the _apply kwargs and.
<tt style='background-color:#E8E8E8;'> core._Rolling <a href=' /core/window.py#L684'>_apply</a>(func,name,window,center)</tt>	Rolling statistical measure using supplied function designed to be.
<tt style='background-color:#E8E8E8;'> core.Rolling <a href=' /core/window.py#L1067'>_validate_monotonic</a>()</tt>	Validate on is monotonic.
<tt style='background-color:#E8E8E8;'> core.Rolling <a href=' /core/window.py#L1074'>_validate_freq</a>()</tt>	Validate & return our freq.
<tt style='background-color:#E8E8E8;'> core.RollingGroupby <a href=' /core/window.py#L1211'>_validate_monotonic</a>()</tt>	Validate that on is monotonic we don't care for groupby.
<tt style='background-color:#E8E8E8;'> core.EWM <a href=' /core/window.py#L1545'>_apply</a>(func,how)</tt>	Rolling statistical measure using supplied function designed to be.
<tt style='background-color:#E8E8E8;'> core.EWM <a href=' /core/window.py#L1588'>mean</a>()</tt>	Exponential weighted moving average.
<tt style='background-color:#E8E8E8;'> core.EWM <a href=' /core/window.py#L1595'>std</a>(bias)</tt>	Exponential weighted moving stddev.
<tt style='background-color:#E8E8E8;'> core.EWM <a href=' /core/window.py#L1605'>var</a>(bias)</tt>	Exponential weighted moving variance.
<tt style='background-color:#E8E8E8;'> core.EWM <a href=' /core/window.py#L1619'>cov</a>(other,pairwise,bias)</tt>	Exponential weighted sample covariance.
<tt style='background-color:#E8E8E8;'> core.EWM <a href=' /core/window.py#L1641'>corr</a>(other,pairwise)</tt>	Exponential weighted sample correlation.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/categorical.py#L112'>maybe_to_categorical</a>(array)</tt>	Coerce to a categorical if a series is given.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L342'>astype</a>(dtype,copy)</tt>	Coerce this type to another dtype parameters.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L363'>ndim</a>()</tt>	Number of dimensions of the categorical.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L368'>size</a>()</tt>	Return the len of myself.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L373'>itemsize</a>()</tt>	Return the size of a single category.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L378'>reshape</a>(new_shape)</tt>	Deprecated calling this method will raise an error in a future release.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L404'>base</a>()</tt>	Compat we are always our own object.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L409'>from_array</a>(cls,data)</tt>	Deprecated use categorical instead.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L428'>from_codes</a>(cls,codes,categories,ordered)</tt>	Make a categorical type from codes and categories arrays.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L469'>_get_codes</a>()</tt>	Get the codes.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L481'>_set_codes</a>(codes)</tt>	Not settable by the user directly.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L489'>_get_labels</a>()</tt>	Get the category labels deprecated.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L503'>_validate_ordered</a>(cls,ordered)</tt>	Validates that we have a valid ordered parameter if.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L522'>_validate_categories</a>(cls,categories,fastpath)</tt>	Validates that we have good categories.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L561'>_set_categories</a>(categories,fastpath)</tt>	Sets new categories.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L579'>_get_categories</a>()</tt>	Gets the categories.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L587'>_codes_for_groupby</a>(sort)</tt>	If sort=false return a copy of self coded with categories as returned by.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L629'>set_ordered</a>(value,inplace)</tt>	Sets the ordered attribute to the boolean value.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L648'>as_ordered</a>(inplace)</tt>	Sets the categorical to be ordered.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L661'>as_unordered</a>(inplace)</tt>	Sets the categorical to be unordered.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L674'>_get_ordered</a>()</tt>	Gets the ordered attribute.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L680'>set_categories</a>(new_categories,ordered,rename,inplace)</tt>	Sets the categories to the specified new_categories.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L790'>reorder_categories</a>(new_categories,ordered,inplace)</tt>	Reorders categories as specified in new_categories.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L832'>add_categories</a>(new_categories,inplace)</tt>	Add new categories.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L879'>remove_categories</a>(removals,inplace)</tt>	Removes the specified categories.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L930'>remove_unused_categories</a>(inplace)</tt>	Removes categories which are not used.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L964'>map</a>(mapper)</tt>	Apply mapper function to its categories not codes.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L996'>shape</a>()</tt>	Shape of the categorical.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L1009'>shift</a>(periods)</tt>	Shift categorical by desired number of periods.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L1037'>__array__</a>(dtype)</tt>	The numpy array interface.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L1053'>__setstate__</a>(state)</tt>	Necessary for making this object picklable.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L1086'>memory_usage</a>(deep)</tt>	Memory usage of my values parameters.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L1131'>isnull</a>()</tt>	Detect missing values both missing values (-1 in.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L1158'>notnull</a>()</tt>	Reverse of isnull both missing values (-1 in.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L1177'>put</a>()</tt>	Replace specific elements in the categorical with given values.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L1184'>dropna</a>()</tt>	Return the categorical without null values.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L1200'>value_counts</a>(dropna)</tt>	Returns a series containing counts of each category.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L1243'>get_values</a>()</tt>	Return the values.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L1259'>check_for_ordered</a>(op)</tt>	Assert that we are ordered.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L1266'>argsort</a>(ascending)</tt>	Returns the indices that would sort the categorical instance if 'sort_values' was called.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L1292'>sort_values</a>(inplace,ascending,na_position)</tt>	Sorts the categorical by category value returning a new categorical by default.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L1397'>_values_for_rank</a>()</tt>	For correctly ranking ordered categorical data see gh#15420.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L1426'>order</a>(inplace,ascending,na_position)</tt>	Deprecated use :meth categorical sort_values that function.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L1440'>sort</a>(inplace,ascending,na_position)</tt>	Deprecated use :meth categorical sort_values that function.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L1457'>ravel</a>(order)</tt>	Return a flattened numpy array.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L1468'>view</a>()</tt>	Return a view of myself.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L1480'>to_dense</a>()</tt>	Return my 'dense' representation for internal compatibility with numpy arrays.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L1491'>fillna</a>(value,method,limit)</tt>	Fill na/nan values using the specified method.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L1557'>take_nd</a>(indexer,allow_fill,fill_value)</tt>	Take the codes by the indexer fill with the fill_value.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L1574'>_slice</a>(slicer)</tt>	Return a slice of myself.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L1592'>__len__</a>()</tt>	The length of this categorical.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L1596'>__iter__</a>()</tt>	Returns an iterator over the values of this categorical.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L1600'>_tidy_repr</a>(max_vals,footer)</tt>	A short repr displaying only max_vals and an optional (but default.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L1614'>_repr_categories</a>()</tt>	Return the base repr for the categories.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L1631'>_repr_categories_info</a>()</tt>	Returns a string representation of the footer.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L1686'>_maybe_coerce_indexer</a>(indexer)</tt>	Return an indexer coerced to the codes dtype.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L1692'>__getitem__</a>(key)</tt>	Return an item.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L1779'>_reverse_indexer</a>()</tt>	Compute the inverse of a categorical returning a dict of categories -> indexers.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L1819'>_reduce</a>(op,name,axis,skipna)</tt>	Perform the reduction type operation.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L1828'>min</a>(numeric_only)</tt>	The minimum value of the object.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L1853'>max</a>(numeric_only)</tt>	The maximum value of the object.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L1878'>mode</a>()</tt>	Returns the mode s of the categorical.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L1896'>unique</a>()</tt>	Return the categorical which categories and codes are unique.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L1952'>equals</a>(other)</tt>	Returns true if categorical arrays are equal.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L1967'>is_dtype_equal</a>(other)</tt>	Returns true if categoricals are the same dtype.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L1987'>describe</a>()</tt>	Describes this categorical returns.
<tt style='background-color:#E8E8E8;'> core.Categorical <a href=' /core/categorical.py#L2005'>repeat</a>(repeats)</tt>	Repeat elements of a categorical.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/categorical.py#L2081'>_get_codes_for_values</a>(values,categories)</tt>	Utility routine to turn values into codes given the specified categories.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/categorical.py#L2113'>_factorize_from_iterable</a>(values)</tt>	Factorize an input values into categories and codes preserves.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/categorical.py#L2150'>_factorize_from_iterables</a>(iterables)</tt>	A higher-level wrapper over _factorize_from_iterable.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/nanops.py#L165'>_get_fill_value</a>(dtype,fill_value,fill_value_typ)</tt>	Return the correct fill value for the dtype of the values.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/nanops.py#L188'>_get_values</a>(values,skipna,fill_value,fill_value_typ)</tt>	Utility to get the values view mask dtype.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/nanops.py#L252'>_wrap_results</a>(result,dtype)</tt>	Wrap our results if needed.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/nanops.py#L473'>nanargmax</a>(values,axis,skipna)</tt>	Returns -1 in the na case.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/nanops.py#L484'>nanargmin</a>(values,axis,skipna)</tt>	Returns -1 in the na case.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/nanops.py#L495'>nanskew</a>(values,axis,skipna)</tt>	Compute the sample skewness.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/nanops.py#L551'>nankurt</a>(values,axis,skipna)</tt>	Compute the sample skewness.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/nanops.py#L688'>nancorr</a>(a,b,method,min_periods)</tt>	A b ndarrays.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L357'>_init_dict</a>(data,index,columns,dtype)</tt>	Segregate series based on type and coerce into matrices.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L484'>axes</a>()</tt>	Return a list with the row axis labels and column axis labels as the only members.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L492'>shape</a>()</tt>	Return a tuple representing the dimensionality of the dataframe.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L499'>_repr_fits_vertical_</a>()</tt>	Check length against max_rows.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L506'>_repr_fits_horizontal_</a>(ignore_width)</tt>	Check if full repr fits in horizontal boundaries imposed by the display options width and max_columns.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L559'>_info_repr</a>()</tt>	True if the repr should show the info view.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L565'>__unicode__</a>()</tt>	Return a string representation for a particular dataframe invoked by unicode df in py2 only.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L589'>_repr_html_</a>()</tt>	Return a html representation for a particular dataframe.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L622'>_repr_latex_</a>()</tt>	Returns a latex representation for a particular dataframe.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L632'>style</a>()</tt>	Property returning a styler object containing methods for building a styled html representation fo the dataframe.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L645'>iteritems</a>()</tt>	Iterator over column name series pairs.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L662'>iterrows</a>()</tt>	Iterate over dataframe rows as index series pairs.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L710'>itertuples</a>(index,name)</tt>	Iterate over dataframe rows as namedtuples with index value as first element of the tuple.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L777'>__len__</a>()</tt>	Returns length of info axis but here we use the index.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L781'>dot</a>(other)</tt>	Matrix multiplication with dataframe or series objects.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L828'>from_dict</a>(cls,data,orient,dtype)</tt>	Construct dataframe from dict of array-like or dicts parameters.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L862'>to_dict</a>(orient)</tt>	Convert dataframe to dictionary.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L913'>to_gbq</a>(destination_table,project_id,chunksize,verbose)</tt>	Write a dataframe to a google bigquery table.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L968'>from_records</a>(cls,data,index,exclude)</tt>	Convert structured or record ndarray to dataframe parameters.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L1094'>to_records</a>(index,convert_datetime64)</tt>	Convert dataframe to record array index will be put in the.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L1144'>from_items</a>(cls,items,columns,orient)</tt>	Convert key value pairs to dataframe the keys will be the axis.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L1203'>from_csv</a>(cls,path,header,sep)</tt>	Read csv file (discouraged please use :func pandas read_csv.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L1262'>to_sparse</a>(fill_value,kind)</tt>	Convert to sparsedataframe.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L1280'>to_panel</a>()</tt>	Transform long stacked format dataframe into wide 3d panel format.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L1332'>to_csv</a>(path_or_buf,sep,na_rep,float_format)</tt>	Write dataframe to a comma-separated values csv file parameters.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L1435'>to_stata</a>(fname,convert_dates,write_index,encoding)</tt>	A class for writing stata binary dta files from array-like objects parameters.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L1500'>to_feather</a>(fname)</tt>	Write out the binary feather-format for dataframes.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L1515'>to_string</a>(buf,columns,col_space,header)</tt>	Render a dataframe to a console-friendly tabular output.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L1544'>to_html</a>(buf,columns,col_space,header)</tt>	Render a dataframe as an html table.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L1598'>to_latex</a>(buf,columns,col_space,header)</tt>	Render a dataframe to a tabular environment table you can splice.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L1686'>info</a>(verbose,buf,max_cols,memory_usage)</tt>	Concise summary of a dataframe.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L1818'>memory_usage</a>(index,deep)</tt>	Memory usage of dataframe columns.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L1853'>transpose</a>()</tt>	Transpose index and columns.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L1897'>get_value</a>(index,col,takeable)</tt>	Quickly retrieve single value at passed column and index.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L1929'>set_value</a>(index,col,value,takeable)</tt>	Put single value at passed column and index.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L1963'>_ixs</a>(i,axis)</tt>	I : int slice or sequence of integers.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L2063'>_getitem_column</a>(key)</tt>	Return the actual column.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L2135'>query</a>(expr,inplace)</tt>	Query the columns of a frame with a boolean expression.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L2227'>eval</a>(expr,inplace)</tt>	Evaluate an expression in the context of the calling dataframe instance.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L2285'>select_dtypes</a>(include,exclude)</tt>	Return a subset of a dataframe including/excluding columns based on their dtype.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L2409'>_box_col_values</a>(values,items)</tt>	Provide boxed values for a column.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L2465'>_ensure_valid_index</a>(value)</tt>	Ensure that if we don't have an index that we can create one from the.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L2482'>_set_item</a>(key,value)</tt>	Add series to dataframe in specified column.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L2503'>insert</a>(loc,column,value,allow_duplicates)</tt>	Insert column into dataframe at specified location.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L2522'>assign</a>()</tt>	Assign new columns to a dataframe returning a new object a copy with all the original columns in addition to the new ones.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L2602'>_sanitize_column</a>(key,value,broadcast)</tt>	Ensures new columns which go into the blockmanager as new blocks are always copied and converted into an array.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L2710'>lookup</a>(row_labels,col_labels)</tt>	Label-based "fancy indexing" function for dataframe.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L2798'>_reindex_multi</a>(axes,copy,fill_value)</tt>	We are guaranteed non-nones in the axes!.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L2858'>set_index</a>(keys,drop,append,inplace)</tt>	Set the dataframe index row labels using one or more existing columns.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L2950'>reset_index</a>(level,drop,inplace,col_level)</tt>	For dataframe with multi-level index return new dataframe with labeling information in the columns under the index names defaulting.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L3064'>dropna</a>(axis,how,thresh,subset)</tt>	Return object with labels on given axis omitted where alternately any or all of the data are missing.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L3173'>drop_duplicates</a>(subset,keep,inplace)</tt>	Return dataframe with duplicate rows removed optionally only considering certain columns.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L3204'>duplicated</a>(subset,keep)</tt>	Return boolean series denoting duplicate rows optionally only considering certain columns.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L3372'>sortlevel</a>(level,axis,ascending,inplace)</tt>	Deprecated use :meth dataframe sort_index.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L3405'>nlargest</a>(n,columns,keep)</tt>	Get the rows of a dataframe sorted by the n largest values of columns.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L3442'>nsmallest</a>(n,columns,keep)</tt>	Get the rows of a dataframe sorted by the n smallest values of columns.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L3479'>swaplevel</a>(i,j,axis)</tt>	Swap levels i and j in a multiindex on a particular axis parameters.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L3507'>reorder_levels</a>(order,axis)</tt>	Rearrange index levels using input order.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L3678'>combine</a>(other,func,fill_value,overwrite)</tt>	Add two dataframe objects and do not propagate nan values so if for a.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L3774'>combine_first</a>(other)</tt>	Combine two dataframe objects and default to non-null values in frame calling the method.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L3811'>update</a>(other,join,overwrite,filter_func)</tt>	Modify dataframe in place using non-na values from passed dataframe.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L3867'>first_valid_index</a>()</tt>	Return label for first non-na/null value.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L3876'>last_valid_index</a>()</tt>	Return label for last non-na/null value.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L3888'>pivot</a>(index,columns,values)</tt>	Reshape data (produce a "pivot" table) based on column values uses.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L3952'>stack</a>(level,dropna)</tt>	Pivot a level of the possibly hierarchical column labels returning a dataframe (or series in the case of an object with a single level of.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L3992'>unstack</a>(level,fill_value)</tt>	Pivot a level of the necessarily hierarchical index labels returning a dataframe having a new level of column labels whose inner-most level.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L4160'>diff</a>(periods,axis)</tt>	1st discrete difference of object parameters.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L4184'>_gotitem</a>(key,ndim,subset)</tt>	Sub-classes to define.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L4220'>apply</a>(func,axis,broadcast,raw)</tt>	Applies function along input axis of dataframe.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L4471'>applymap</a>(func)</tt>	Apply a function to a dataframe that is intended to operate elementwise i.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L4519'>append</a>(other,ignore_index,verify_integrity)</tt>	Append rows of other to the end of this frame returning a new object.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L4610'>join</a>(other,on,how,lsuffix)</tt>	Join columns with other dataframe either on index or on a key column.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L4785'>round</a>(decimals)</tt>	Round a dataframe to a variable number of decimal places.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L4878'>corr</a>(method,min_periods)</tt>	Compute pairwise correlation of columns excluding na/null values parameters.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L4934'>cov</a>(min_periods)</tt>	Compute pairwise covariance of columns excluding na/null values parameters.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L4971'>corrwith</a>(other,axis,drop)</tt>	Compute pairwise correlation between rows or columns of two dataframe objects.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L5024'>count</a>(axis,level,numeric_only)</tt>	Return series with number of non-na/null observations over requested axis.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L5187'>nunique</a>(axis,dropna)</tt>	Return series with number of distinct observations over requested axis.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L5218'>idxmin</a>(axis,skipna)</tt>	Return index of first occurrence of minimum over requested axis.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L5249'>idxmax</a>(axis,skipna)</tt>	Return index of first occurrence of maximum over requested axis.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L5280'>_get_agg_axis</a>(axis_num)</tt>	Let's be explict about this.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L5289'>mode</a>(axis,numeric_only)</tt>	Gets the mode s of each element along the axis selected adds a row.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L5327'>quantile</a>(q,axis,numeric_only,interpolation)</tt>	Return values at the given quantile over requested axis a la numpy.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L5400'>to_timestamp</a>(freq,how,axis,copy)</tt>	Cast to datetimeindex of timestamps at *beginning* of period parameters.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L5434'>to_period</a>(freq,axis,copy)</tt>	Convert dataframe from datetimeindex to periodindex with desired.
<tt style='background-color:#E8E8E8;'> core.DataFrame <a href=' /core/frame.py#L5465'>isin</a>(values)</tt>	Return boolean dataframe showing whether each element in the dataframe is contained in values.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/frame.py#L5550'>_arrays_to_mgr</a>(arrays,arr_names,index,columns)</tt>	Segregate series based on type and coerce into matrices.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/frame.py#L5656'>_to_arrays</a>(data,columns,coerce_float,dtype)</tt>	Return list of arrays columns.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/frame.py#L5703'>_masked_rec_array_to_mgr</a>(data,index,columns,dtype)</tt>	Extract from a masked rec array and create the manager.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/config.py#L411'>register_option</a>(key,defval,doc,validator)</tt>	Register an option in the package-wide pandas config object parameters.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/config.py#L477'>deprecate_option</a>(key,msg,rkey,removal_ver)</tt>	Mark option key as deprecated if code attempts to access this option a warning will be produced using msg if given or a default message.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/config.py#L528'>_select_options</a>(pat)</tt>	Returns a list of keys matching pat.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/config.py#L554'>_is_deprecated</a>(key)</tt>	Returns true if the given option has been deprecated.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/config.py#L561'>_get_deprecated_option</a>(key)</tt>	Retrieves the metadata for a deprecated option if key is deprecated.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/config.py#L578'>_get_registered_option</a>(key)</tt>	Retrieves the option metadata if key is a registered option.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/config.py#L589'>_translate_key</a>(key)</tt>	If key id deprecated and a replacement key defined will return the.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/config.py#L602'>_warn_if_deprecated</a>(key)</tt>	Checks if key is a deprecated option and if so prints a warning.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/config.py#L630'>_build_option_description</a>(k)</tt>	Builds a formatted description of a registered option and prints it.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/config.py#L656'>pp_options_list</a>(keys,width,_print)</tt>	Builds a concise listing of available options grouped by prefix.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/config.py#L689'>config_prefix</a>(prefix)</tt>	Contextmanager for multiple invocations of api with a common prefix supported api functions (register / get / set )__option.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/panelnd.py#L8'>create_nd_panel_factory</a>(klass_name,orders,slices,slicer)</tt>	Manufacture a n-d class deprecated.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/missing.py#L26'>mask_missing</a>(arr,values_to_mask)</tt>	Return a masking array of same size/shape as arr.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/missing.py#L113'>interpolate_1d</a>(xvalues,yvalues,method,limit)</tt>	Logic for the 1-d interpolation the result should be 1-d inputs.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/missing.py#L231'>_interpolate_scipy_wrapper</a>(x,y,new_x,method)</tt>	Passed off to scipy interpolate interp1d method is scipy's kind.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/missing.py#L301'>_from_derivatives</a>(xi,yi,x,order)</tt>	Convenience function for interpolate bpoly from_derivatives.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/missing.py#L355'>_akima_interpolate</a>(xi,yi,x,der)</tt>	Convenience function for akima interpolation.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/missing.py#L405'>interpolate_2d</a>(values,method,axis,limit)</tt>	Perform an actual interpolation of values values will be make 2-d if.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/missing.py#L575'>fill_zeros</a>(result,x,y,name)</tt>	If this is a reversed op then flip x y.
<tt style='background-color:#E8E8E8;'> core.Grouper <a href=' /core/groupby.py#L273'>_set_grouper</a>(obj,sort)</tt>	Given an object and the specifications setup the internal grouper.
<tt style='background-color:#E8E8E8;'> core.Grouper <a href=' /core/groupby.py#L325'>_get_binner_for_grouping</a>(obj)</tt>	Default to the standard binner here.
<tt style='background-color:#E8E8E8;'> core._GroupBy <a href=' /core/groupby.py#L408'>_assure_grouper</a>()</tt>	We create the grouper on instantiation.
<tt style='background-color:#E8E8E8;'> core._GroupBy <a href=' /core/groupby.py#L415'>groups</a>()</tt>	Dict {group name -> group labels}.
<tt style='background-color:#E8E8E8;'> core._GroupBy <a href=' /core/groupby.py#L426'>indices</a>()</tt>	Dict {group name -> group indices}.
<tt style='background-color:#E8E8E8;'> core._GroupBy <a href=' /core/groupby.py#L432'>_get_indices</a>(names)</tt>	Safe get multiple indices translate keys for.
<tt style='background-color:#E8E8E8;'> core._GroupBy <a href=' /core/groupby.py#L482'>_get_index</a>(name)</tt>	Safe get index translate keys for datelike to underlying repr.
<tt style='background-color:#E8E8E8;'> core._GroupBy <a href=' /core/groupby.py#L496'>_reset_group_selection</a>()</tt>	Clear group based selection used for methods needing to return info on.
<tt style='background-color:#E8E8E8;'> core._GroupBy <a href=' /core/groupby.py#L506'>_set_group_selection</a>()</tt>	Create group based selection used when selection is not passed.
<tt style='background-color:#E8E8E8;'> core._GroupBy <a href=' /core/groupby.py#L617'>get_group</a>(name,obj)</tt>	Constructs ndframe from group with provided name parameters.
<tt style='background-color:#E8E8E8;'> core._GroupBy <a href=' /core/groupby.py#L654'>apply</a>(func)</tt>	Apply function and combine results together in an intelligent way the.
<tt style='background-color:#E8E8E8;'> core._GroupBy <a href=' /core/groupby.py#L764'>_index_with_as_index</a>(b)</tt>	Take boolean mask of index to be returned from apply if as_index=true.
<tt style='background-color:#E8E8E8;'> core._GroupBy <a href=' /core/groupby.py#L781'>_try_cast</a>(result,obj,numeric_only)</tt>	Try to cast the result to our obj original type.
<tt style='background-color:#E8E8E8;'> core.GroupBy <a href=' /core/groupby.py#L1018'>count</a>()</tt>	Compute count of group excluding missing values.
<tt style='background-color:#E8E8E8;'> core.GroupBy <a href=' /core/groupby.py#L1026'>mean</a>()</tt>	Compute mean of groups excluding missing values.
<tt style='background-color:#E8E8E8;'> core.GroupBy <a href=' /core/groupby.py#L1044'>median</a>()</tt>	Compute median of groups excluding missing values.
<tt style='background-color:#E8E8E8;'> core.GroupBy <a href=' /core/groupby.py#L1066'>std</a>(ddof)</tt>	Compute standard deviation of groups excluding missing values.
<tt style='background-color:#E8E8E8;'> core.GroupBy <a href=' /core/groupby.py#L1084'>var</a>(ddof)</tt>	Compute variance of groups excluding missing values.
<tt style='background-color:#E8E8E8;'> core.GroupBy <a href=' /core/groupby.py#L1105'>sem</a>(ddof)</tt>	Compute standard error of the mean of groups excluding missing values.
<tt style='background-color:#E8E8E8;'> core.GroupBy <a href=' /core/groupby.py#L1121'>size</a>()</tt>	Compute group sizes.
<tt style='background-color:#E8E8E8;'> core.GroupBy <a href=' /core/groupby.py#L1131'>_add_numeric_operations</a>(cls)</tt>	Add numeric operations to the groupby generically.
<tt style='background-color:#E8E8E8;'> core.GroupBy <a href=' /core/groupby.py#L1202'>ohlc</a>()</tt>	Compute sum of values excluding missing values.
<tt style='background-color:#E8E8E8;'> core.GroupBy <a href=' /core/groupby.py#L1223'>resample</a>(rule)</tt>	Provide resampling when using a timegrouper.
<tt style='background-color:#E8E8E8;'> core.GroupBy <a href=' /core/groupby.py#L1233'>rolling</a>()</tt>	Return a rolling grouper providing rolling.
<tt style='background-color:#E8E8E8;'> core.GroupBy <a href=' /core/groupby.py#L1244'>expanding</a>()</tt>	Return an expanding grouper providing expanding.
<tt style='background-color:#E8E8E8;'> core.GroupBy <a href=' /core/groupby.py#L1255'>pad</a>(limit)</tt>	Forward fill the values parameters.
<tt style='background-color:#E8E8E8;'> core.GroupBy <a href=' /core/groupby.py#L1274'>backfill</a>(limit)</tt>	Backward fill the values parameters.
<tt style='background-color:#E8E8E8;'> core.GroupBy <a href=' /core/groupby.py#L1293'>nth</a>(n,dropna)</tt>	Take the nth row from each group if n is an int or a subset of rows if n is a list of ints.
<tt style='background-color:#E8E8E8;'> core.GroupBy <a href=' /core/groupby.py#L1439'>cumcount</a>(ascending)</tt>	Number each item in each group from 0 to the length of that group - 1.
<tt style='background-color:#E8E8E8;'> core.GroupBy <a href=' /core/groupby.py#L1491'>cumprod</a>(axis)</tt>	Cumulative product for each group.
<tt style='background-color:#E8E8E8;'> core.GroupBy <a href=' /core/groupby.py#L1501'>cumsum</a>(axis)</tt>	Cumulative sum for each group.
<tt style='background-color:#E8E8E8;'> core.GroupBy <a href=' /core/groupby.py#L1511'>cummin</a>(axis)</tt>	Cumulative min for each group.
<tt style='background-color:#E8E8E8;'> core.GroupBy <a href=' /core/groupby.py#L1520'>cummax</a>(axis)</tt>	Cumulative max for each group.
<tt style='background-color:#E8E8E8;'> core.GroupBy <a href=' /core/groupby.py#L1529'>shift</a>(periods,freq,axis)</tt>	Shift each group by periods observations.
<tt style='background-color:#E8E8E8;'> core.GroupBy <a href=' /core/groupby.py#L1558'>head</a>(n)</tt>	Returns first n rows of each group.
<tt style='background-color:#E8E8E8;'> core.GroupBy <a href=' /core/groupby.py#L1585'>tail</a>(n)</tt>	Returns last n rows of each group essentially equivalent to.
<tt style='background-color:#E8E8E8;'> core.BaseGrouper <a href=' /core/groupby.py#L1735'>indices</a>()</tt>	Dict {group name -> group indices}.
<tt style='background-color:#E8E8E8;'> core.BaseGrouper <a href=' /core/groupby.py#L1758'>size</a>()</tt>	Compute group sizes.
<tt style='background-color:#E8E8E8;'> core.BaseGrouper <a href=' /core/groupby.py#L1770'>_max_groupsize</a>()</tt>	Compute size of largest group.
<tt style='background-color:#E8E8E8;'> core.BaseGrouper <a href=' /core/groupby.py#L1782'>groups</a>()</tt>	Dict {group name -> group labels}.
<tt style='background-color:#E8E8E8;'> core.BaseGrouper <a href=' /core/groupby.py#L1887'>_is_builtin_func</a>(arg)</tt>	If we define an builtin function for this argument return it.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/groupby.py#L2151'>generate_bins_generic</a>(values,binner,closed)</tt>	Generate bin edge offsets and bin labels for one array using another array which has bin edge values.
<tt style='background-color:#E8E8E8;'> core.BinGrouper <a href=' /core/groupby.py#L2211'>groups</a>()</tt>	Dict {group name -> group labels}.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/groupby.py#L2482'>_get_grouper</a>(obj,key,axis,level)</tt>	Create and return a basegrouper which is an internal mapping of how to create the grouper indexers.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/groupby.py#L2671'>_whitelist_method_generator</a>(klass,whitelist)</tt>	Yields all groupby member defs for dataframe/series names in _whitelist.
<tt style='background-color:#E8E8E8;'> core.SeriesGroupBy <a href=' /core/groupby.py#L2740'>_selection_name</a>()</tt>	Since we are a series we by definition only have.
<tt style='background-color:#E8E8E8;'> core.SeriesGroupBy <a href=' /core/groupby.py#L2752'>aggregate</a>(func_or_funcs)</tt>	Apply aggregation function or functions to groups yielding most likely series but in some cases dataframe depending on the output of the.
<tt style='background-color:#E8E8E8;'> core.SeriesGroupBy <a href=' /core/groupby.py#L2893'>_wrap_output</a>(output,index,names)</tt>	Common agg/transform wrapping logic.
<tt style='background-color:#E8E8E8;'> core.SeriesGroupBy <a href=' /core/groupby.py#L3002'>_transform_fast</a>(func)</tt>	Fast version of transform only applicable to.
<tt style='background-color:#E8E8E8;'> core.SeriesGroupBy <a href=' /core/groupby.py#L3017'>filter</a>(func,dropna)</tt>	Return a copy of a series excluding elements from groups that do not satisfy the boolean criterion specified by func.
<tt style='background-color:#E8E8E8;'> core.SeriesGroupBy <a href=' /core/groupby.py#L3068'>nunique</a>(dropna)</tt>	Returns number of unique elements in the group.
<tt style='background-color:#E8E8E8;'> core.SeriesGroupBy <a href=' /core/groupby.py#L3250'>count</a>()</tt>	Compute count of group excluding missing values.
<tt style='background-color:#E8E8E8;'> core.SeriesGroupBy <a href=' /core/groupby.py#L3264'>_apply_to_column_groupbys</a>(func)</tt>	Return a pass thru.
<tt style='background-color:#E8E8E8;'> core.NDFrameGroupBy <a href=' /core/groupby.py#L3763'>_transform_fast</a>(result,obj)</tt>	Fast transform path for aggregations.
<tt style='background-color:#E8E8E8;'> core.NDFrameGroupBy <a href=' /core/groupby.py#L3835'>filter</a>(func,dropna)</tt>	Return a copy of a dataframe excluding elements from groups that do not satisfy the boolean criterion specified by func.
<tt style='background-color:#E8E8E8;'> core.DataFrameGroupBy <a href=' /core/groupby.py#L3916'>_gotitem</a>(key,ndim,subset)</tt>	Sub-classes to define.
<tt style='background-color:#E8E8E8;'> core.DataFrameGroupBy <a href=' /core/groupby.py#L4013'>_reindex_output</a>(result)</tt>	If we have categorical groupers then we want to make sure that we have a fully reindex-output to the levels.
<tt style='background-color:#E8E8E8;'> core.DataFrameGroupBy <a href=' /core/groupby.py#L4080'>count</a>()</tt>	Compute count of group excluding missing values.
<tt style='background-color:#E8E8E8;'> core.DataFrameGroupBy <a href=' /core/groupby.py#L4097'>nunique</a>(dropna)</tt>	Return dataframe with number of distinct observations per group for each column.
<tt style='background-color:#E8E8E8;'> core.PanelGroupBy <a href=' /core/groupby.py#L4194'>aggregate</a>(arg)</tt>	Aggregate using input function or dict of {column -> function} parameters.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/series.py#L89'>_coerce_method</a>(converter)</tt>	Install the scalar coercion methods.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L283'>_set_axis</a>(axis,labels,fastpath)</tt>	Override generic we want to set the _typ here.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L330'>dtype</a>()</tt>	Return the dtype object of the underlying data.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L335'>dtypes</a>()</tt>	Return the dtype object of the underlying data.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L340'>ftype</a>()</tt>	Return if the data is sparse|dense.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L345'>ftypes</a>()</tt>	Return if the data is sparse|dense.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L383'>_values</a>()</tt>	Return the internal repr of this data.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L388'>get_values</a>()</tt>	Same as values but handles sparseness conversions ; is a view.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L392'>asobject</a>()</tt>	Return object series which contains boxed values.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L402'>ravel</a>(order)</tt>	Return the flattened underlying data as an ndarray see also.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L412'>compress</a>(condition)</tt>	Return selected slices of an array along given axis as a series see also.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L423'>nonzero</a>()</tt>	Return the indices of the elements that are non-zero this method is equivalent to calling numpy.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L449'>put</a>()</tt>	Applies the put method to its values attribute if it has one.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L460'>__len__</a>()</tt>	Return the length of the series.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L470'>__array__</a>(result)</tt>	The array interface return my values.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L476'>__array_wrap__</a>(result,context)</tt>	Gets called after a ufunc.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L483'>__array_prepare__</a>(result,context)</tt>	Gets called prior to a ufunc.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L550'>axes</a>()</tt>	Return a list of the row axis labels.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L555'>_ixs</a>(i,axis)</tt>	Return the i-th value or values in the series by location.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L833'>repeat</a>(repeats)</tt>	Repeat elements of an series refer to numpy ndarray repeat.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L849'>reshape</a>()</tt>	Deprecated calling this method will raise an error in a future release.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L879'>get_value</a>(label,takeable)</tt>	Quickly retrieve single value at passed index label.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L896'>set_value</a>(label,value,takeable)</tt>	Quickly set single value at passed label if label is not contained a.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L928'>reset_index</a>(level,drop,name,inplace)</tt>	Analogous to the :meth pandas dataframe reset_index function see.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L973'>__unicode__</a>()</tt>	Return a string representation for a particular dataframe invoked by unicode df in py2 only.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L992'>to_string</a>(buf,na_rep,float_format,header)</tt>	Render a string representation of the series parameters.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L1048'>__iter__</a>()</tt>	Provide iteration over the values of the series.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L1056'>iteritems</a>()</tt>	Lazily iterate over index value tuples.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L1068'>keys</a>()</tt>	Alias for index.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L1072'>tolist</a>()</tt>	Convert series to a nested list.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L1076'>to_dict</a>()</tt>	Convert series to {label -> value} dict.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L1086'>to_frame</a>(name)</tt>	Convert series to dataframe parameters.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L1107'>to_sparse</a>(kind,fill_value)</tt>	Convert series to sparseseries.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L1124'>_set_name</a>(name,inplace)</tt>	Set the series name.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L1144'>count</a>(level)</tt>	Return number of non-na/null observations in the series.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L1179'>mode</a>()</tt>	Return the mode s of the dataset.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L1212'>idxmin</a>(axis,skipna)</tt>	Index of first occurrence of minimum of values.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L1240'>idxmax</a>(axis,skipna)</tt>	Index of first occurrence of maximum of values.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L1272'>round</a>(decimals)</tt>	Round each value in a series to the given number of decimals.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L1299'>quantile</a>(q,interpolation)</tt>	Return value at the given quantile a la numpy percentile.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L1351'>corr</a>(other,method,min_periods)</tt>	Compute correlation with other series excluding missing values.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L1376'>cov</a>(other,min_periods)</tt>	Compute covariance with series excluding missing values parameters.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L1398'>diff</a>(periods)</tt>	1st discrete difference of object.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L1414'>autocorr</a>(lag)</tt>	Lag-n autocorrelation parameters.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L1429'>dot</a>(other)</tt>	Matrix multiplication with dataframe or inner-product with series.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L1483'>append</a>(to_append,ignore_index,verify_integrity)</tt>	Concatenate two or more series.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L1554'>_binop</a>(other,func,level,fill_value)</tt>	Perform generic binary operation with optional fill value parameters.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L1608'>combine</a>(other,func,fill_value)</tt>	Perform elementwise binary operation on two series using given function.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L1640'>combine_first</a>(other)</tt>	Combine series values choosing the calling series's values first.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L1661'>update</a>(other)</tt>	Modify series in place using non-na values from passed series.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L1787'>argsort</a>(axis,kind,order)</tt>	Overrides ndarray argsort argsorts the value omitting na/null values.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L1823'>nlargest</a>(n,keep)</tt>	Return the largest n elements.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L1869'>nsmallest</a>(n,keep)</tt>	Return the smallest n elements.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L1915'>sortlevel</a>(level,ascending,sort_remaining)</tt>	Deprecated use :meth series sort_index.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L1942'>swaplevel</a>(i,j,copy)</tt>	Swap levels i and j in a multiindex parameters.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L1965'>reorder_levels</a>(order)</tt>	Rearrange index levels using input order may not drop or duplicate.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L1987'>unstack</a>(level,fill_value)</tt>	Unstack a k a pivot series with multiindex to produce dataframe.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L2032'>map</a>(arg,na_action)</tt>	Map values of series using input correspondence which can be a dict series or function.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L2162'>_gotitem</a>(key,ndim,subset)</tt>	Sub-classes to define.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L2205'>apply</a>(func,convert_dtype,args)</tt>	Invoke function on values of series can be ufunc (a numpy function.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L2339'>_reduce</a>(op,name,axis,skipna)</tt>	Perform a reduction operation.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L2372'>_needs_reindex_multi</a>(axes,method,level)</tt>	Check if we do need a multi reindex this is for compat with.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L2415'>reindex_axis</a>(labels,axis)</tt>	For compatibility with higher dims.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L2421'>memory_usage</a>(index,deep)</tt>	Memory usage of the series parameters.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L2450'>take</a>(indices,axis,convert,is_copy)</tt>	Return series corresponding to requested indices parameters.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L2480'>isin</a>(values)</tt>	Return a boolean :class ~pandas series showing whether each element.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L2533'>between</a>(left,right,inclusive)</tt>	Return boolean series equivalent to left <= series <= right na values.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L2558'>from_csv</a>(cls,path,sep,parse_dates)</tt>	Read csv file (discouraged please use :func pandas read_csv.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L2621'>to_csv</a>(path,index,sep,na_rep)</tt>	Write series to a comma-separated values csv file parameters.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L2680'>dropna</a>(axis,inplace)</tt>	Return series without null values returns.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L2714'>first_valid_index</a>()</tt>	Return label for first non-na/null value.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L2728'>last_valid_index</a>()</tt>	Return label for last non-na/null value.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L2745'>to_timestamp</a>(freq,how,copy)</tt>	Cast to datetimeindex of timestamps at *beginning* of period parameters.
<tt style='background-color:#E8E8E8;'> core.Series <a href=' /core/series.py#L2769'>to_period</a>(freq,copy)</tt>	Convert series from datetimeindex to periodindex with desired.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/series.py#L2838'>remove_na</a>(series)</tt>	Return series containing only true/non-nan values possibly empty.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/series.py#L2845'>_sanitize_index</a>(data,index,copy)</tt>	Sanitize an index type to return an ndarray of the underlying pass.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/series.py#L2869'>_sanitize_array</a>(data,index,dtype,copy)</tt>	Sanitize input data to an ndarray copy if specified coerce to the.
<tt style='background-color:#E8E8E8;'> core.Resampler <a href=' /core/resample.py#L91'>__unicode__</a>()</tt>	Provide a nice str repr of our rolling object.
<tt style='background-color:#E8E8E8;'> core.Resampler <a href=' /core/resample.py#L107'>_typ</a>()</tt>	Masquerade for compat as a series or a dataframe.
<tt style='background-color:#E8E8E8;'> core.Resampler <a href=' /core/resample.py#L114'>_from_selection</a>()</tt>	Is the resampling from a dataframe column or multiindex level.
<tt style='background-color:#E8E8E8;'> core.Resampler <a href=' /core/resample.py#L211'>_convert_obj</a>(obj)</tt>	Provide any conversions for the object in order to correctly handle.
<tt style='background-color:#E8E8E8;'> core.Resampler <a href=' /core/resample.py#L229'>_set_binner</a>()</tt>	Setup our binners.
<tt style='background-color:#E8E8E8;'> core.Resampler <a href=' /core/resample.py#L238'>_get_binner</a>()</tt>	Create the bingrouper assume that self set_grouper obj.
<tt style='background-color:#E8E8E8;'> core.Resampler <a href=' /core/resample.py#L248'>_assure_grouper</a>()</tt>	Make sure that we are creating our binner & grouper.
<tt style='background-color:#E8E8E8;'> core.Resampler <a href=' /core/resample.py#L257'>aggregate</a>(arg)</tt>	Apply aggregation function or functions to resampled groups yielding most likely series but in some cases dataframe depending on the output.
<tt style='background-color:#E8E8E8;'> core.Resampler <a href=' /core/resample.py#L331'>transform</a>(arg)</tt>	Call function producing a like-indexed series on each group and return a series with the transformed values.
<tt style='background-color:#E8E8E8;'> core.Resampler <a href=' /core/resample.py#L358'>_gotitem</a>(key,ndim,subset)</tt>	Sub-classes to define.
<tt style='background-color:#E8E8E8;'> core.Resampler <a href=' /core/resample.py#L383'>_groupby_and_aggregate</a>(how,grouper)</tt>	Re-evaluate the obj with a groupby aggregation.
<tt style='background-color:#E8E8E8;'> core.Resampler <a href=' /core/resample.py#L410'>_apply_loffset</a>(result)</tt>	If loffset is set offset the result index this is not an idempotent routine it will be applied.
<tt style='background-color:#E8E8E8;'> core.Resampler <a href=' /core/resample.py#L435'>_get_resampler_for_grouping</a>(groupby)</tt>	Return the correct class for resampling with groupby.
<tt style='background-color:#E8E8E8;'> core.Resampler <a href=' /core/resample.py#L439'>_wrap_result</a>(result)</tt>	Potentially wrap any results.
<tt style='background-color:#E8E8E8;'> core.Resampler <a href=' /core/resample.py#L446'>pad</a>(limit)</tt>	Forward fill the values parameters.
<tt style='background-color:#E8E8E8;'> core.Resampler <a href=' /core/resample.py#L463'>backfill</a>(limit)</tt>	Backward fill the values parameters.
<tt style='background-color:#E8E8E8;'> core.Resampler <a href=' /core/resample.py#L480'>fillna</a>(method,limit)</tt>	Fill missing values parameters.
<tt style='background-color:#E8E8E8;'> core.Resampler <a href=' /core/resample.py#L497'>interpolate</a>(method,axis,limit,inplace)</tt>	Interpolate values according to different methods.
<tt style='background-color:#E8E8E8;'> core.Resampler <a href=' /core/resample.py#L511'>asfreq</a>(fill_value)</tt>	Return the values at the new freq essentially a reindex.
<tt style='background-color:#E8E8E8;'> core.Resampler <a href=' /core/resample.py#L531'>std</a>(ddof)</tt>	Compute standard deviation of groups excluding missing values.
<tt style='background-color:#E8E8E8;'> core.Resampler <a href=' /core/resample.py#L543'>var</a>(ddof)</tt>	Compute variance of groups excluding missing values.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/resample.py#L584'>_maybe_process_deprecations</a>(r,how,fill_method,limit)</tt>	Potentially we might have a deprecation warning show it.
<tt style='background-color:#E8E8E8;'> core._GroupByMixin <a href=' /core/resample.py#L651'>_apply</a>(f)</tt>	Dispatch to _upsample we are stripping all of the _upsample kwargs and.
<tt style='background-color:#E8E8E8;'> core.DatetimeIndexResampler <a href=' /core/resample.py#L686'>_downsample</a>(how)</tt>	Downsample the cython defined function.
<tt style='background-color:#E8E8E8;'> core.DatetimeIndexResampler <a href=' /core/resample.py#L722'>_adjust_binner_for_upsample</a>(binner)</tt>	Adjust our binner when upsampling.
<tt style='background-color:#E8E8E8;'> core.DatetimeIndexResampler <a href=' /core/resample.py#L730'>_upsample</a>(method,limit,fill_value)</tt>	Method : string {'backfill', 'bfill', 'pad', 'ffill', 'asfreq'} method for upsampling.
<tt style='background-color:#E8E8E8;'> core.PeriodIndexResampler <a href=' /core/resample.py#L830'>_get_new_index</a>()</tt>	Return our new index.
<tt style='background-color:#E8E8E8;'> core.PeriodIndexResampler <a href=' /core/resample.py#L843'>_downsample</a>(how)</tt>	Downsample the cython defined function.
<tt style='background-color:#E8E8E8;'> core.PeriodIndexResampler <a href=' /core/resample.py#L884'>_upsample</a>(method,limit,fill_value)</tt>	Method : string {'backfill', 'bfill', 'pad', 'ffill'} method for upsampling.
<tt style='background-color:#E8E8E8;'> core.TimedeltaIndexResampler <a href=' /core/resample.py#L942'>_adjust_binner_for_upsample</a>(binner)</tt>	Adjust our binner when upsampling.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/resample.py#L969'>resample</a>(obj,kind)</tt>	Create a timegrouper and return our resampler.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/resample.py#L978'>get_resampler_for_grouping</a>(groupby,rule,how,fill_method)</tt>	Return our appropriate resampler when grouping as well.
<tt style='background-color:#E8E8E8;'> core.TimeGrouper <a href=' /core/resample.py#L1055'>_get_resampler</a>(obj,kind)</tt>	Return my resampler or raise if we have an invalid axis.
<tt style='background-color:#E8E8E8;'> core. <a href=' /core/resample.py#L1356'>asfreq</a>(obj,freq,method,how)</tt>	Utility frequency conversion method for series/dataframe.
<tt style='background-color:#E8E8E8;'> core.tools. <a href=' /core/tools/datetimes.py#L60'>_guess_datetime_format</a>(dt_str,dayfirst,dt_str_parse,dt_str_split)</tt>	Guess the datetime format of a given datetime string.
<tt style='background-color:#E8E8E8;'> core.tools. <a href=' /core/tools/datetimes.py#L184'>to_datetime</a>(arg,errors,dayfirst,yearfirst)</tt>	Convert argument to datetime.
<tt style='background-color:#E8E8E8;'> core.tools. <a href=' /core/tools/datetimes.py#L548'>_assemble_from_unit_mappings</a>(arg,errors)</tt>	Assemble the unit specifed fields from the arg dataframe.
<tt style='background-color:#E8E8E8;'> core.tools. <a href=' /core/tools/datetimes.py#L632'>_attempt_YYYYMMDD</a>(arg,errors)</tt>	Try to parse the yyyymmdd/%y%m%d format try to deal with nat-like arg is a passed in as an object dtype but could really be ints/strings.
<tt style='background-color:#E8E8E8;'> core.tools. <a href=' /core/tools/datetimes.py#L682'>_format_is_iso</a>(f)</tt>	Does format match the iso8601 set that can be handled by the c parser? generally of form yyyy-mm-ddthh mm ss - date separator can be different.
<tt style='background-color:#E8E8E8;'> core.tools. <a href=' /core/tools/datetimes.py#L700'>parse_time_string</a>(arg,freq,dayfirst,yearfirst)</tt>	Try hard to parse datetime string leveraging dateutil plus some extra goodies like quarter recognition.
<tt style='background-color:#E8E8E8;'> core.tools. <a href=' /core/tools/datetimes.py#L760'>to_time</a>(arg,format,infer_time_format,errors)</tt>	Parse time strings to time objects using fixed strptime formats ("%h %m", "%h%m", "%i %m%p", "%i%m%p", "%h %m %s", "%h%m%s", "%i %m %s%p",.
<tt style='background-color:#E8E8E8;'> core.tools. <a href=' /core/tools/datetimes.py#L861'>format</a>(dt)</tt>	Returns date in yyyymmdd format.
<tt style='background-color:#E8E8E8;'> core.tools. <a href=' /core/tools/datetimes.py#L869'>ole2datetime</a>(oledt)</tt>	Function for converting excel date to normal date format.
<tt style='background-color:#E8E8E8;'> core.tools. <a href=' /core/tools/numeric.py#L15'>to_numeric</a>(arg,errors,downcast)</tt>	Convert argument to a numeric type.
<tt style='background-color:#E8E8E8;'> core.tools. <a href=' /core/tools/timedeltas.py#L17'>to_timedelta</a>(arg,unit,box,errors)</tt>	Convert argument to timedelta parameters.
<tt style='background-color:#E8E8E8;'> core.tools. <a href=' /core/tools/timedeltas.py#L120'>_validate_timedelta_unit</a>(arg)</tt>	Provide validation / translation for timedelta short units.
<tt style='background-color:#E8E8E8;'> core.tools. <a href=' /core/tools/timedeltas.py#L130'>_coerce_scalar_to_timedelta_type</a>(r,unit,box,errors)</tt>	Convert string 'r' to a timedelta object.
<tt style='background-color:#E8E8E8;'> core.tools. <a href=' /core/tools/timedeltas.py#L149'>_convert_listlike</a>(arg,unit,box,errors)</tt>	Convert a list of objects to a timedelta index object.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/common.py#L34'>_ensure_float</a>(arr)</tt>	Ensure that an array object has a float dtype if possible.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/common.py#L63'>_ensure_categorical</a>(arr)</tt>	Ensure that an array-like object is a categorical if not already.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/common.py#L91'>is_sparse</a>(array)</tt>	Return if we are a sparse array.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/common.py#L96'>is_scipy_sparse</a>(array)</tt>	Return if we are a scipy sparse spmatrix.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/common.py#L107'>is_categorical</a>(array)</tt>	Return if we are a categorical possibility.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/common.py#L112'>is_datetimetz</a>(array)</tt>	Return if we are a datetime with tz array.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/common.py#L119'>is_period</a>(array)</tt>	Return if we are a period array.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/common.py#L165'>is_string_dtype</a>(arr_or_dtype)</tt>	Check whether the provided array or dtype is of the string dtype.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/common.py#L204'>is_period_arraylike</a>(arr)</tt>	Return if we are period arraylike / periodindex.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/common.py#L213'>is_datetime_arraylike</a>(arr)</tt>	Return if we are datetime arraylike / datetimeindex.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/common.py#L229'>is_dtype_equal</a>(source,target)</tt>	Return a boolean if the dtypes are equal.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/common.py#L308'>is_timedelta64_ns_dtype</a>(arr_or_dtype)</tt>	Check whether the provided array or dtype is of the timedelta64[ns] dtype.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/common.py#L354'>_is_unorderable_exception</a>(e)</tt>	Check if the exception raised is an unorderable exception.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/common.py#L379'>is_numeric_v_string_like</a>(a,b)</tt>	Numpy doesn't like to compare numeric arrays vs scalar string-likes.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/common.py#L452'>is_string_like_dtype</a>(arr_or_dtype)</tt>	Check whether the provided array or dtype is of a string-like dtype.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/common.py#L515'>is_extension_type</a>(value)</tt>	If we are a klass that is preserved by the internals these are internal klasses that we represent (and don't use a np.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/common.py#L536'>_coerce_to_dtype</a>(dtype)</tt>	Coerce a string or np dtype to a pandas or numpy.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/common.py#L566'>_get_dtype</a>(arr_or_dtype)</tt>	Get the dtype instance associated with an array or dtype object.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/common.py#L615'>_get_dtype_type</a>(arr_or_dtype)</tt>	Get the type not dtype instance associated with an array or dtype object.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/common.py#L659'>_get_dtype_from_object</a>(dtype)</tt>	Get a numpy dtype type-style object for a dtype object.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/common.py#L716'>_validate_date_like_dtype</a>(dtype)</tt>	Check whether the dtype is a date-like dtype raises an error if invalid.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/common.py#L745'>pandas_dtype</a>(dtype)</tt>	Converts input into a pandas only dtype object or a numpy dtype object.
<tt style='background-color:#E8E8E8;'> core.dtypes.ExtensionDtype <a href=' /core/dtypes/dtypes.py#L31'>__str__</a>()</tt>	Return a string representation for a particular object invoked by str df in both py2/py3.
<tt style='background-color:#E8E8E8;'> core.dtypes.ExtensionDtype <a href=' /core/dtypes/dtypes.py#L43'>__bytes__</a>()</tt>	Return a string representation for a particular object.
<tt style='background-color:#E8E8E8;'> core.dtypes.ExtensionDtype <a href=' /core/dtypes/dtypes.py#L55'>__repr__</a>()</tt>	Return a string representation for a particular object.
<tt style='background-color:#E8E8E8;'> core.dtypes.ExtensionDtype <a href=' /core/dtypes/dtypes.py#L74'>is_dtype</a>(cls,dtype)</tt>	Return a boolean if the passed type is an actual dtype that.
<tt style='background-color:#E8E8E8;'> core.dtypes.CategoricalDtype <a href=' /core/dtypes/dtypes.py#L134'>construct_from_string</a>(cls,string)</tt>	Attempt to construct this type from a string raise a typeerror if.
<tt style='background-color:#E8E8E8;'> core.dtypes.DatetimeTZDtype <a href=' /core/dtypes/dtypes.py#L172'>__new__</a>(cls,unit,tz)</tt>	Create a new unit if needed otherwise return from the cache.
<tt style='background-color:#E8E8E8;'> core.dtypes.DatetimeTZDtype <a href=' /core/dtypes/dtypes.py#L230'>construct_from_string</a>(cls,string)</tt>	Attempt to construct this type from a string raise a typeerror if.
<tt style='background-color:#E8E8E8;'> core.dtypes.PeriodDtype <a href=' /core/dtypes/dtypes.py#L324'>construct_from_string</a>(cls,string)</tt>	Attempt to construct this type from a string raise a typeerror.
<tt style='background-color:#E8E8E8;'> core.dtypes.PeriodDtype <a href=' /core/dtypes/dtypes.py#L356'>is_dtype</a>(cls,dtype)</tt>	Return a boolean if we if the passed type is an actual dtype that we.
<tt style='background-color:#E8E8E8;'> core.dtypes.IntervalDtype <a href=' /core/dtypes/dtypes.py#L434'>construct_from_string</a>(cls,string)</tt>	Attempt to construct this type from a string raise a typeerror.
<tt style='background-color:#E8E8E8;'> core.dtypes.IntervalDtype <a href=' /core/dtypes/dtypes.py#L467'>is_dtype</a>(cls,dtype)</tt>	Return a boolean if we if the passed type is an actual dtype that we.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/cast.py#L39'>maybe_convert_platform</a>(values)</tt>	Try to do platform conversion allow ndarray or list here.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/cast.py#L52'>is_nested_object</a>(obj)</tt>	Return a boolean if we have a nested object e g a series with 1 or.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/cast.py#L69'>maybe_downcast_to_dtype</a>(result,dtype)</tt>	Try to cast to the specified dtype (e g convert back to bool/int.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/cast.py#L166'>maybe_upcast_putmask</a>(result,mask,other)</tt>	A safe version of putmask that potentially upcasts the result parameters.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/cast.py#L336'>infer_dtype_from_scalar</a>(val,pandas_dtype)</tt>	Interpret the dtype from a scalar parameters.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/cast.py#L411'>infer_dtype_from_array</a>(arr)</tt>	Infer the dtype from a scalar or array parameters.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/cast.py#L455'>maybe_upcast</a>(values,fill_value,dtype,copy)</tt>	Provide explict type promotion and coercion.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/cast.py#L491'>invalidate_string_dtypes</a>(dtype_set)</tt>	Change string like dtypes to object for dataframe.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/cast.py#L500'>maybe_convert_string_to_object</a>(values)</tt>	Convert string-like and string-like array to convert object dtype.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/cast.py#L514'>maybe_convert_scalar</a>(values)</tt>	Convert a python scalar to the appropriate numpy dtype if possible.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/cast.py#L528'>coerce_indexer_dtype</a>(indexer,categories)</tt>	Coerce the indexer input array to the smallest dtype possible.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/cast.py#L540'>coerce_to_dtypes</a>(result,dtypes)</tt>	Given a dtypes and a result set coerce the result elements to the.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/cast.py#L575'>astype_nansafe</a>(arr,dtype,copy)</tt>	Return a view if copy is false but.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/cast.py#L640'>maybe_convert_objects</a>(values,convert_dates,convert_numeric,convert_timedeltas)</tt>	If we have an object dtype try to coerce dates and/or numbers.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/cast.py#L703'>soft_convert_objects</a>(values,datetime,numeric,timedelta)</tt>	If we have an object dtype try to coerce dates and/or numbers.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/cast.py#L771'>maybe_infer_to_datetimelike</a>(value,convert_dates)</tt>	We might have a array or single object that is datetime like and no dtype is passed don't change the value unless we find a.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/cast.py#L868'>maybe_cast_to_datetime</a>(value,dtype,errors)</tt>	Try to cast the array/value to a datetimelike dtype converting float.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/cast.py#L981'>find_common_type</a>(types)</tt>	Find a common data type among the given dtypes.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/concat.py#L64'>_get_series_result_type</a>(result)</tt>	Return appropriate class of series concat.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/concat.py#L87'>_get_frame_result_type</a>(result,objs)</tt>	Return appropriate class of dataframe-like concat.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/concat.py#L100'>_concat_compat</a>(to_concat,axis)</tt>	Provide concatenation of an array of arrays each of which is a single.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/concat.py#L169'>_concat_categorical</a>(to_concat,axis)</tt>	Concatenate an object/categorical array of arrays each of which is a single dtype.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/concat.py#L212'>union_categoricals</a>(to_union,sort_categories,ignore_order)</tt>	Combine list-like of categorical-like unioning categories all.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/concat.py#L317'>_concat_datetime</a>(to_concat,axis,typs)</tt>	Provide concatenation of an datetimelike array of arrays each of which is a.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/concat.py#L390'>_concat_datetimetz</a>(to_concat,name)</tt>	Concat datetimeindex with the same tz all inputs must be datetimeindex.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/concat.py#L405'>_concat_index_asobject</a>(to_concat,name)</tt>	Concat all inputs as object datetimeindex timedeltaindex and.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/concat.py#L425'>_concat_sparse</a>(to_concat,axis,typs)</tt>	Provide concatenation of an sparse/dense array of arrays each of which is a.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/inference.py#L26'>is_number</a>(obj)</tt>	Check if the object is a number.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/inference.py#L50'>is_string_like</a>(obj)</tt>	Check if the object is a string.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/inference.py#L74'>_iterable_not_string</a>(obj)</tt>	Check if the object is an iterable but not a string.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/inference.py#L101'>is_iterator</a>(obj)</tt>	Check if the object is an iterator.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/inference.py#L140'>is_file_like</a>(obj)</tt>	Check if the object is a file-like object.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/inference.py#L180'>is_re</a>(obj)</tt>	Check if the object is a regex pattern instance.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/inference.py#L204'>is_re_compilable</a>(obj)</tt>	Check if the object can be compiled into a regex pattern instance.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/inference.py#L233'>is_list_like</a>(obj)</tt>	Check if the object is list-like.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/inference.py#L269'>is_nested_list_like</a>(obj)</tt>	Check if the object is list-like and that all of its elements are also list-like.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/inference.py#L313'>is_dict_like</a>(obj)</tt>	Check if the object is dict-like.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/inference.py#L337'>is_named_tuple</a>(obj)</tt>	Check if the object is a named tuple.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/inference.py#L364'>is_hashable</a>(obj)</tt>	Return true if hash obj will succeed false otherwise.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/inference.py#L396'>is_sequence</a>(obj)</tt>	Check if the object is a sequence of objects.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/missing.py#L26'>isnull</a>(obj)</tt>	Detect missing values (nan in numeric arrays none/nan in object arrays) parameters.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/missing.py#L63'>_isnull_old</a>(obj)</tt>	Detect missing values treat none nan inf -inf as null.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/missing.py#L92'>_use_inf_as_null</a>(key)</tt>	Option change callback for null/inf behaviour choose which replacement for numpy.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/missing.py#L188'>notnull</a>(obj)</tt>	Replacement for numpy isfinite / -numpy isnan which is suitable for use.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/missing.py#L213'>is_null_datelike_scalar</a>(other)</tt>	Test whether the object is a null datelike e g nat.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/missing.py#L247'>array_equivalent</a>(left,right,strict_nan)</tt>	True if two arrays left and right have equal non-nan elements and nans in corresponding locations.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/missing.py#L343'>_infer_fill_value</a>(val)</tt>	Infer the fill value for the nan/nat from the provided.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/missing.py#L364'>_maybe_fill</a>(arr,fill_value)</tt>	If we have a compatiable fill_value and arr dtype then fill.
<tt style='background-color:#E8E8E8;'> core.dtypes. <a href=' /core/dtypes/missing.py#L373'>na_value_for_dtype</a>(dtype)</tt>	Return a dtype compat na value parameters.
<tt style='background-color:#E8E8E8;'> core.indexes. <a href=' /core/indexes/accessors.py#L22'>is_datetimelike</a>(data)</tt>	Return a boolean if we can be successfully converted to a datetimelike.
<tt style='background-color:#E8E8E8;'> core.indexes. <a href=' /core/indexes/accessors.py#L34'>maybe_to_datetimelike</a>(data,copy)</tt>	Return a delegatedclass of a series that is datetimelike (e.
<tt style='background-color:#E8E8E8;'> core.indexes.TimedeltaProperties <a href=' /core/indexes/accessors.py#L192'>components</a>()</tt>	Return a dataframe of the components days hours minutes seconds milliseconds microseconds nanoseconds of the timedeltas.
<tt style='background-color:#E8E8E8;'> core.indexes. <a href=' /core/indexes/datetimes.py#L101'>_dt_index_cmp</a>(opname,nat_result)</tt>	Wrap comparison operations to convert datetime-like to datetime64.
<tt style='background-color:#E8E8E8;'> core.indexes. <a href=' /core/indexes/datetimes.py#L150'>_new_DatetimeIndex</a>(cls,d)</tt>	This is called upon unpickling rather than the default which doesn't.
<tt style='background-color:#E8E8E8;'> core.indexes.DatetimeIndex <a href=' /core/indexes/datetimes.py#L547'>_convert_for_op</a>(value)</tt>	Convert value to be insertable to ndarray.
<tt style='background-color:#E8E8E8;'> core.indexes.DatetimeIndex <a href=' /core/indexes/datetimes.py#L568'>_simple_new</a>(cls,values,name,freq)</tt>	We require the we have a dtype compat for the values.
<tt style='background-color:#E8E8E8;'> core.indexes.DatetimeIndex <a href=' /core/indexes/datetimes.py#L598'>tzinfo</a>()</tt>	Alias for tz attribute.
<tt style='background-color:#E8E8E8;'> core.indexes.DatetimeIndex <a href=' /core/indexes/datetimes.py#L605'>_timezone</a>()</tt>	Comparable timezone both for pytz / dateutil.
<tt style='background-color:#E8E8E8;'> core.indexes.DatetimeIndex <a href=' /core/indexes/datetimes.py#L709'>__setstate__</a>(state)</tt>	Necessary for making this object picklable.
<tt style='background-color:#E8E8E8;'> core.indexes.DatetimeIndex <a href=' /core/indexes/datetimes.py#L775'>_sub_datelike_dti</a>(other)</tt>	Subtraction of two datetimeindexes.
<tt style='background-color:#E8E8E8;'> core.indexes.DatetimeIndex <a href=' /core/indexes/datetimes.py#L788'>_maybe_update_attributes</a>(attrs)</tt>	Update index attributes e g freq depending on op.
<tt style='background-color:#E8E8E8;'> core.indexes.DatetimeIndex <a href=' /core/indexes/datetimes.py#L873'>to_series</a>(keep_tz)</tt>	Create a series with both index and values equal to the index keys useful with map for returning an indexer based on an index.
<tt style='background-color:#E8E8E8;'> core.indexes.DatetimeIndex <a href=' /core/indexes/datetimes.py#L905'>_to_embed</a>(keep_tz)</tt>	Return an array repr of this object potentially casting to object.
<tt style='background-color:#E8E8E8;'> core.indexes.DatetimeIndex <a href=' /core/indexes/datetimes.py#L918'>to_pydatetime</a>()</tt>	Return datetimeindex as object ndarray of datetime datetime objects.
<tt style='background-color:#E8E8E8;'> core.indexes.DatetimeIndex <a href=' /core/indexes/datetimes.py#L928'>to_period</a>(freq)</tt>	Cast to periodindex at a particular frequency.
<tt style='background-color:#E8E8E8;'> core.indexes.DatetimeIndex <a href=' /core/indexes/datetimes.py#L946'>snap</a>(freq)</tt>	Snap time stamps to nearest occurring frequency.
<tt style='background-color:#E8E8E8;'> core.indexes.DatetimeIndex <a href=' /core/indexes/datetimes.py#L970'>union</a>(other)</tt>	Specialized union for datetimeindex objects if combine.
<tt style='background-color:#E8E8E8;'> core.indexes.DatetimeIndex <a href=' /core/indexes/datetimes.py#L1004'>to_perioddelta</a>(freq)</tt>	Calcuates timedeltaindex of difference between index values and index converted to periodindex at specified.
<tt style='background-color:#E8E8E8;'> core.indexes.DatetimeIndex <a href=' /core/indexes/datetimes.py#L1023'>union_many</a>(others)</tt>	A bit of a hack to accelerate unioning a collection of indexes.
<tt style='background-color:#E8E8E8;'> core.indexes.DatetimeIndex <a href=' /core/indexes/datetimes.py#L1054'>join</a>(other,how,level,return_indexers)</tt>	See index join.
<tt style='background-color:#E8E8E8;'> core.indexes.DatetimeIndex <a href=' /core/indexes/datetimes.py#L1162'>__iter__</a>()</tt>	Return an iterator over the boxed values.
<tt style='background-color:#E8E8E8;'> core.indexes.DatetimeIndex <a href=' /core/indexes/datetimes.py#L1191'>intersection</a>(other)</tt>	Specialized intersection for datetimeindex objects may be much faster.
<tt style='background-color:#E8E8E8;'> core.indexes.DatetimeIndex <a href=' /core/indexes/datetimes.py#L1247'>_parsed_string_to_bounds</a>(reso,parsed)</tt>	Calculate datetime bounds for parsed time string and its resolution.
<tt style='background-color:#E8E8E8;'> core.indexes.DatetimeIndex <a href=' /core/indexes/datetimes.py#L1358'>get_value</a>(series,key)</tt>	Fast lookup of value from 1-dimensional ndarray only use this if you.
<tt style='background-color:#E8E8E8;'> core.indexes.DatetimeIndex <a href=' /core/indexes/datetimes.py#L1401'>get_loc</a>(key,method,tolerance)</tt>	Get integer location for requested label.
<tt style='background-color:#E8E8E8;'> core.indexes.DatetimeIndex <a href=' /core/indexes/datetimes.py#L1440'>_maybe_cast_slice_bound</a>(label,side,kind)</tt>	If label is a string cast it to datetime according to resolution.
<tt style='background-color:#E8E8E8;'> core.indexes.DatetimeIndex <a href=' /core/indexes/datetimes.py#L1489'>slice_indexer</a>(start,end,step,kind)</tt>	Return indexer for specified label slice.
<tt style='background-color:#E8E8E8;'> core.indexes.DatetimeIndex <a href=' /core/indexes/datetimes.py#L1610'>time</a>()</tt>	Returns numpy array of datetime time the time part of the timestamps.
<tt style='background-color:#E8E8E8;'> core.indexes.DatetimeIndex <a href=' /core/indexes/datetimes.py#L1619'>date</a>()</tt>	Returns numpy array of python datetime date objects (namely the date.
<tt style='background-color:#E8E8E8;'> core.indexes.DatetimeIndex <a href=' /core/indexes/datetimes.py#L1628'>normalize</a>()</tt>	Return datetimeindex with times to midnight length is unaltered.
<tt style='background-color:#E8E8E8;'> core.indexes.DatetimeIndex <a href=' /core/indexes/datetimes.py#L1670'>is_normalized</a>()</tt>	Returns true if all of the dates are at midnight ("no time").
<tt style='background-color:#E8E8E8;'> core.indexes.DatetimeIndex <a href=' /core/indexes/datetimes.py#L1681'>insert</a>(loc,item)</tt>	Make new index inserting new item at location parameters.
<tt style='background-color:#E8E8E8;'> core.indexes.DatetimeIndex <a href=' /core/indexes/datetimes.py#L1728'>delete</a>(loc)</tt>	Make a new datetimeindex with passed location s deleted.
<tt style='background-color:#E8E8E8;'> core.indexes.DatetimeIndex <a href=' /core/indexes/datetimes.py#L1759'>tz_convert</a>(tz)</tt>	Convert tz-aware datetimeindex from one time zone to another (using pytz/dateutil).
<tt style='background-color:#E8E8E8;'> core.indexes.DatetimeIndex <a href=' /core/indexes/datetimes.py#L1790'>tz_localize</a>(tz,ambiguous,errors)</tt>	Localize tz-naive datetimeindex to given time zone (using pytz/dateutil), or remove timezone from tz-aware datetimeindex.
<tt style='background-color:#E8E8E8;'> core.indexes.DatetimeIndex <a href=' /core/indexes/datetimes.py#L1848'>indexer_at_time</a>(time,asof)</tt>	Select values at particular time of day e g 9 30am.
<tt style='background-color:#E8E8E8;'> core.indexes.DatetimeIndex <a href=' /core/indexes/datetimes.py#L1877'>indexer_between_time</a>(start_time,end_time,include_start,include_end)</tt>	Select values between particular times of day (e g 9 00-9 30am).
<tt style='background-color:#E8E8E8;'> core.indexes.DatetimeIndex <a href=' /core/indexes/datetimes.py#L1926'>to_julian_date</a>()</tt>	Convert datetimeindex to float64index of julian dates.
<tt style='background-color:#E8E8E8;'> core.indexes. <a href=' /core/indexes/datetimes.py#L2002'>date_range</a>(start,end,periods,freq)</tt>	Return a fixed frequency datetime index with day calendar as the default frequency.
<tt style='background-color:#E8E8E8;'> core.indexes. <a href=' /core/indexes/datetimes.py#L2045'>bdate_range</a>(start,end,periods,freq)</tt>	Return a fixed frequency datetime index with business day as the default frequency.
<tt style='background-color:#E8E8E8;'> core.indexes. <a href=' /core/indexes/datetimes.py#L2089'>cdate_range</a>(start,end,periods,freq)</tt>	**experimental** return a fixed frequency datetime index with custombusinessday as the default frequency.
<tt style='background-color:#E8E8E8;'> core.indexes. <a href=' /core/indexes/timedeltas.py#L925'>_to_m8</a>(key,tz)</tt>	Timestamp-like => dt64.
<tt style='background-color:#E8E8E8;'> core.indexes.FrozenList <a href=' /core/indexes/frozen.py#L67'>_disabled</a>()</tt>	This method will not function because object is immutable.
<tt style='background-color:#E8E8E8;'> core.indexes.FrozenNDArray <a href=' /core/indexes/frozen.py#L93'>_disabled</a>()</tt>	This method will not function because object is immutable.
<tt style='background-color:#E8E8E8;'> core.indexes.FrozenNDArray <a href=' /core/indexes/frozen.py#L104'>values</a>()</tt>	Returns *copy* of underlying array.
<tt style='background-color:#E8E8E8;'> core.indexes.FrozenNDArray <a href=' /core/indexes/frozen.py#L109'>__unicode__</a>()</tt>	Return a string representation for this object.
<tt style='background-color:#E8E8E8;'> core.indexes.FrozenNDArray <a href=' /core/indexes/frozen.py#L120'>searchsorted</a>(v,side,sorter)</tt>	Find indices where elements of v should be inserted in a to maintain order.
<tt style='background-color:#E8E8E8;'> core.indexes. <a href=' /core/indexes/period.py#L77'>_period_index_cmp</a>(opname,nat_result)</tt>	Wrap comparison operations to convert datetime-like to datetime64.
<tt style='background-color:#E8E8E8;'> core.indexes.PeriodIndex <a href=' /core/indexes/period.py#L297'>_simple_new</a>(cls,values,name,freq)</tt>	Values can be any type that can be coerced to periods.
<tt style='background-color:#E8E8E8;'> core.indexes.PeriodIndex <a href=' /core/indexes/period.py#L311'>_from_ordinals</a>(cls,values,name,freq)</tt>	Values should be int ordinals.
<tt style='background-color:#E8E8E8;'> core.indexes.PeriodIndex <a href=' /core/indexes/period.py#L329'>_shallow_copy_with_infer</a>(values)</tt>	We always want to return a periodindex.
<tt style='background-color:#E8E8E8;'> core.indexes.PeriodIndex <a href=' /core/indexes/period.py#L341'>_coerce_scalar_to_index</a>(item)</tt>	We need to coerce a scalar to a compat for our index type.
<tt style='background-color:#E8E8E8;'> core.indexes.PeriodIndex <a href=' /core/indexes/period.py#L390'>__array_wrap__</a>(result,context)</tt>	Gets called after a ufunc needs additional handling as.
<tt style='background-color:#E8E8E8;'> core.indexes.PeriodIndex <a href=' /core/indexes/period.py#L428'>_to_embed</a>(keep_tz)</tt>	Return an array repr of this object potentially casting to object.
<tt style='background-color:#E8E8E8;'> core.indexes.PeriodIndex <a href=' /core/indexes/period.py#L438'>asof_locs</a>(where,mask)</tt>	Where : array of timestamps.
<tt style='background-color:#E8E8E8;'> core.indexes.PeriodIndex <a href=' /core/indexes/period.py#L494'>is_full</a>()</tt>	Returns true if there are any missing periods from start to end.
<tt style='background-color:#E8E8E8;'> core.indexes.PeriodIndex <a href=' /core/indexes/period.py#L506'>asfreq</a>(freq,how)</tt>	Convert the periodindex to the specified frequency freq.
<tt style='background-color:#E8E8E8;'> core.indexes.PeriodIndex <a href=' /core/indexes/period.py#L567'>to_datetime</a>(dayfirst)</tt>	Deprecated use :meth to_timestamp instead.
<tt style='background-color:#E8E8E8;'> core.indexes.PeriodIndex <a href=' /core/indexes/period.py#L596'>is_leap_year</a>()</tt>	Logical indicating if the date belongs to a leap year.
<tt style='background-color:#E8E8E8;'> core.indexes.PeriodIndex <a href=' /core/indexes/period.py#L613'>to_timestamp</a>(freq,how)</tt>	Cast to datetimeindex.
<tt style='background-color:#E8E8E8;'> core.indexes.PeriodIndex <a href=' /core/indexes/period.py#L701'>shift</a>(n)</tt>	Specialized shift which produces an periodindex.
<tt style='background-color:#E8E8E8;'> core.indexes.PeriodIndex <a href=' /core/indexes/period.py#L729'>get_value</a>(series,key)</tt>	Fast lookup of value from 1-dimensional ndarray only use this if you.
<tt style='background-color:#E8E8E8;'> core.indexes.PeriodIndex <a href=' /core/indexes/period.py#L788'>_get_unique_index</a>(dropna)</tt>	Wrap index _get_unique_index to handle nat.
<tt style='background-color:#E8E8E8;'> core.indexes.PeriodIndex <a href=' /core/indexes/period.py#L797'>get_loc</a>(key,method,tolerance)</tt>	Get integer location for requested label.
<tt style='background-color:#E8E8E8;'> core.indexes.PeriodIndex <a href=' /core/indexes/period.py#L833'>_maybe_cast_slice_bound</a>(label,side,kind)</tt>	If label is a string or a datetime cast it to period ordinal according.
<tt style='background-color:#E8E8E8;'> core.indexes.PeriodIndex <a href=' /core/indexes/period.py#L922'>join</a>(other,how,level,return_indexers)</tt>	See index join.
<tt style='background-color:#E8E8E8;'> core.indexes.PeriodIndex <a href=' /core/indexes/period.py#L978'>__setstate__</a>(state)</tt>	Necessary for making this object picklable.
<tt style='background-color:#E8E8E8;'> core.indexes.PeriodIndex <a href=' /core/indexes/period.py#L1006'>tz_convert</a>(tz)</tt>	Convert tz-aware datetimeindex from one time zone to another (using pytz/dateutil).
<tt style='background-color:#E8E8E8;'> core.indexes.PeriodIndex <a href=' /core/indexes/period.py#L1028'>tz_localize</a>(tz,infer_dst)</tt>	Localize tz-naive datetimeindex to given time zone (using pytz/dateutil), or remove timezone from tz-aware datetimeindex.
<tt style='background-color:#E8E8E8;'> core.indexes. <a href=' /core/indexes/period.py#L1163'>period_range</a>(start,end,periods,freq)</tt>	Return a fixed frequency datetime index with day calendar as the default.
<tt style='background-color:#E8E8E8;'> core.indexes. <a href=' /core/indexes/interval.py#L74'>_get_interval_closed_bounds</a>(interval)</tt>	Given an interval or intervalindex return the corresponding interval with closed bounds.
<tt style='background-color:#E8E8E8;'> core.indexes. <a href=' /core/indexes/interval.py#L87'>_new_IntervalIndex</a>(cls,d)</tt>	This is called upon unpickling.
<tt style='background-color:#E8E8E8;'> core.indexes.IntervalIndex <a href=' /core/indexes/interval.py#L210'>_validate</a>()</tt>	Verify that the intervalindex is valid.
<tt style='background-color:#E8E8E8;'> core.indexes.IntervalIndex <a href=' /core/indexes/interval.py#L227'>hasnans</a>()</tt>	Return if i have any nans enables various perf speedups.
<tt style='background-color:#E8E8E8;'> core.indexes.IntervalIndex <a href=' /core/indexes/interval.py#L232'>_isnan</a>()</tt>	Return if each value is nan.
<tt style='background-color:#E8E8E8;'> core.indexes.IntervalIndex <a href=' /core/indexes/interval.py#L269'>contains</a>(key)</tt>	Return a boolean if this key is in the index we accept / allow keys to be not *just* actual.
<tt style='background-color:#E8E8E8;'> core.indexes.IntervalIndex <a href=' /core/indexes/interval.py#L290'>from_breaks</a>(cls,breaks,closed,name)</tt>	Construct an intervalindex from an array of splits parameters.
<tt style='background-color:#E8E8E8;'> core.indexes.IntervalIndex <a href=' /core/indexes/interval.py#L319'>from_arrays</a>(cls,left,right,closed)</tt>	Construct an intervalindex from a a left and right array parameters.
<tt style='background-color:#E8E8E8;'> core.indexes.IntervalIndex <a href=' /core/indexes/interval.py#L351'>from_intervals</a>(cls,data,name,copy)</tt>	Construct an intervalindex from a 1d array of interval objects parameters.
<tt style='background-color:#E8E8E8;'> core.indexes.IntervalIndex <a href=' /core/indexes/interval.py#L386'>from_tuples</a>(cls,data,closed,name)</tt>	Construct an intervalindex from a list/array of tuples parameters.
<tt style='background-color:#E8E8E8;'> core.indexes.IntervalIndex <a href=' /core/indexes/interval.py#L449'>values</a>()</tt>	Returns the intervalindex's data as a numpy array of interval.
<tt style='background-color:#E8E8E8;'> core.indexes.IntervalIndex <a href=' /core/indexes/interval.py#L468'>__array__</a>(result)</tt>	The array interface return my values.
<tt style='background-color:#E8E8E8;'> core.indexes.IntervalIndex <a href=' /core/indexes/interval.py#L520'>mid</a>()</tt>	Returns the mid-point of each interval in the index as an array.
<tt style='background-color:#E8E8E8;'> core.indexes.IntervalIndex <a href=' /core/indexes/interval.py#L565'>_convert_list_indexer</a>(keyarr,kind)</tt>	We are passed a list-like indexer return the.
<tt style='background-color:#E8E8E8;'> core.indexes.IntervalIndex <a href=' /core/indexes/interval.py#L579'>_maybe_cast_indexed</a>(key)</tt>	We need to cast the key which could be a scalar.
<tt style='background-color:#E8E8E8;'> core.indexes.IntervalIndex <a href=' /core/indexes/interval.py#L756'>_get_reindexer</a>(target)</tt>	Return an indexer for a target intervalindex with self.
<tt style='background-color:#E8E8E8;'> core.indexes.IntervalIndex <a href=' /core/indexes/interval.py#L863'>_append_same_dtype</a>(to_concat,name)</tt>	Assert that we all have the same closed.
<tt style='background-color:#E8E8E8;'> core.indexes.IntervalIndex <a href=' /core/indexes/interval.py#L924'>_format_native_types</a>(na_rep,quoting)</tt>	Actually format my specific types.
<tt style='background-color:#E8E8E8;'> core.indexes. <a href=' /core/indexes/interval.py#L1015'>interval_range</a>(start,end,freq,periods)</tt>	Return a fixed frequency intervalindex.
<tt style='background-color:#E8E8E8;'> core.indexes. <a href=' /core/indexes/base.py#L87'>_new_Index</a>(cls,d)</tt>	This is called upon unpickling rather than the default which doesn't.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L367'>_simple_new</a>(cls,values,name,dtype)</tt>	We require the we have a dtype compat for the values if we are passed a non-dtype compat then coerce using the constructor.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L412'>_shallow_copy_with_infer</a>(values)</tt>	Create a new index inferring the class with passed value don't copy.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L437'>_deepcopy_if_needed</a>(orig,copy)</tt>	Versionadded : 0 19 0.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L468'>_sort_levels_monotonic</a>()</tt>	Compat with multiindex.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L502'>is_</a>(other)</tt>	More flexible faster check like is but that works through views note this is *not* the same as index.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L522'>_reset_identity</a>()</tt>	Initializes or resets _id attribute with new object.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L528'>__len__</a>()</tt>	Return the length of the index.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L534'>__array__</a>(dtype)</tt>	The array interface return my values.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L538'>__array_wrap__</a>(result,context)</tt>	Gets called after a ufunc.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L549'>dtype</a>()</tt>	Return the dtype object of the underlying data.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L554'>dtype_str</a>()</tt>	Return the dtype str of the underlying data.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L559'>values</a>()</tt>	Return the underlying data as an ndarray.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L564'>get_values</a>()</tt>	Return the underlying data as an ndarray.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L577'>tolist</a>()</tt>	Return a list of the index values.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L583'>repeat</a>(repeats)</tt>	Repeat elements of an index refer to numpy ndarray repeat.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L623'>ravel</a>(order)</tt>	Return an ndarray of the flattened values of the underlying data see also.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L634'>_try_convert_to_int_index</a>(cls,data,copy,name)</tt>	Attempt to convert an array of data into an integer index.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L685'>_coerce_to_ndarray</a>(cls,data)</tt>	Coerces data to ndarray raises on scalar data converts other.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L701'>_get_attributes_dict</a>()</tt>	Return an attributes dict for my class.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L717'>_coerce_scalar_to_index</a>(item)</tt>	We need to coerce a scalar to a compat for our index type.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L777'>_validate_names</a>(name,names,deep)</tt>	Handles the quirks of having a singular 'name' parameter for general index and plural 'names' parameter for multiindex.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L796'>__unicode__</a>()</tt>	Return a string representation for this object.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L829'>_formatter_func</a>()</tt>	Return the formatted data as a unicode string.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L836'>_format_data</a>()</tt>	Return the formatted data as a unicode string.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L945'>_format_attrs</a>()</tt>	Return a list of tuples of the (attr formatted_value).
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L958'>to_series</a>()</tt>	Create a series with both index and values equal to the index keys useful with map for returning an indexer based on an index.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L973'>_to_embed</a>(keep_tz)</tt>	*this is an internal non-public method*.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L1005'>_to_safe_for_reshape</a>()</tt>	Convert to object if we are a categorical.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L1009'>to_datetime</a>(dayfirst)</tt>	Deprecated use :meth pandas to_datetime instead.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L1041'>_convert_for_op</a>(value)</tt>	Convert value to be insertable to ndarray.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L1045'>_assert_can_do_op</a>(value)</tt>	Check value is valid for scalar op.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L1066'>set_names</a>(names,level,inplace)</tt>	Set new names on index defaults to returning new index.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L1125'>rename</a>(name,inplace)</tt>	Set new names on index defaults to returning new index.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L1142'>reshape</a>()</tt>	Not implemented do not call this method as reshaping is not supported for index objects and will raise an error.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L1184'>is_monotonic</a>()</tt>	Alias for is_monotonic_increasing deprecated.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L1189'>is_monotonic_increasing</a>()</tt>	Return if the index is monotonic increasing only equal or increasing values.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L1197'>is_monotonic_decreasing</a>()</tt>	Return if the index is monotonic decreasing only equal or decreasing values.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L1208'>is_unique</a>()</tt>	Return if the index has unique values.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L1464'>_invalid_indexer</a>(form,key)</tt>	Consistent invalid indexer message.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L1492'>_validate_index_level</a>(level)</tt>	Validate index level.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L1516'>inferred_type</a>()</tt>	Return a string of the type inferred from the values.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L1521'>_is_memory_usage_qualified</a>()</tt>	Return a boolean if we need a qualified info display.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L1542'>__setstate__</a>(state)</tt>	Necessary for making this object picklable.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L1622'>__getitem__</a>(key)</tt>	Override numpy ndarray's __getitem__ method to work as desired.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L1656'>append</a>(other)</tt>	Append a collection of index options together.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L1694'>_append_same_dtype</a>(to_concat,name)</tt>	Concatenate to_concat which has the same class.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L1740'>_assert_take_fillable</a>(values,indices,allow_fill,fill_value)</tt>	Internal method to handle na filling of take.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L1759'>_isnan</a>()</tt>	Return if each value is nan.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L1778'>hasnans</a>()</tt>	Return if i have any nans enables various perf speedups.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L1786'>isnull</a>()</tt>	Detect missing values.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L1802'>notnull</a>()</tt>	Reverse of isnull.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L1818'>putmask</a>(mask,value)</tt>	Return a new index of the values set with the mask see also.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L1834'>format</a>(name,formatter)</tt>	Render a string representation of the index.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L1874'>to_native_types</a>(slicer)</tt>	Format specified values of self and return them.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L1900'>_format_native_types</a>(na_rep,quoting)</tt>	Actually format my specific types.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L1911'>equals</a>(other)</tt>	Determines if two index objects contain the same elements.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L1931'>identical</a>(other)</tt>	Similar to equals but check that other comparable attributes are.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L1940'>asof</a>(label)</tt>	For a sorted index return the most recent label up to and including the passed label.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L1958'>asof_locs</a>(where,mask)</tt>	Where : array of timestamps.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L1974'>sort_values</a>(return_indexer,ascending)</tt>	Return sorted copy of index.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L1993'>sortlevel</a>(level,ascending,sort_remaining)</tt>	For internal compatibility with with the index api sort the index.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L2013'>shift</a>(periods,freq)</tt>	Shift index containing datetime objects by input number of periods and.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L2025'>argsort</a>()</tt>	Returns the indices that would sort the index and its underlying data.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L2064'>_get_consensus_name</a>(other)</tt>	Given 2 indexes give a consensus name meaning we take the not none one or none if the names differ.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L2079'>union</a>(other)</tt>	Form the union of two index objects and sorts if possible.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L2162'>intersection</a>(other)</tt>	Form the intersection of two index objects.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L2218'>difference</a>(other)</tt>	Return a new index with elements from the index that are not in other.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L2265'>symmetric_difference</a>(other,result_name)</tt>	Compute the symmetric difference of two index objects.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L2331'>_get_unique_index</a>(dropna)</tt>	Returns an index containing unique values.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L2405'>get_value</a>(series,key)</tt>	Fast lookup of value from 1-dimensional ndarray only use this if you.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L2451'>set_value</a>(arr,key,value)</tt>	Fast lookup of value from 1-dimensional ndarray only use this if you.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L2459'>_get_level_values</a>(level)</tt>	Return an index of values for requested level equal to the length.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L2570'>_get_fill_indexer_searchsorted</a>(target,method,limit)</tt>	Fallback pad/backfill get_indexer that works for monotonic decreasing.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L2600'>_get_nearest_indexer</a>(target,limit,tolerance)</tt>	Get the indexer for the nearest index labels requires an index with values that can be subtracted from each other (e.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L2662'>get_indexer_for</a>(target)</tt>	Guaranteed return of an indexer even when non-unique.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L2682'>groupby</a>(values)</tt>	Group the index labels by a given array of values.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L2710'>map</a>(mapper)</tt>	Apply mapper function to an index.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L2736'>isin</a>(values,level)</tt>	Compute boolean array of whether each index value is found in the passed set of values.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L2770'>_can_reindex</a>(indexer)</tt>	*this is an internal non-public method*.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L2789'>reindex</a>(target,method,level,limit)</tt>	Create index with target's values (move/add/delete values as necessary) parameters.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L2846'>_reindex_non_unique</a>(target)</tt>	*this is an internal non-public method* create a new index with target's values (move/add/delete values as.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L3094'>_join_level</a>(other,level,how,return_indexers)</tt>	The join method *only* affects the level of the resulting multiindex.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L3278'>slice_indexer</a>(start,end,step,kind)</tt>	For an ordered index compute the slice indexer for input labels and.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L3311'>_maybe_cast_indexer</a>(key)</tt>	If we have a float key and are not a floating index.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L3326'>_validate_indexer</a>(form,key,kind)</tt>	If we are positional indexer.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L3396'>_get_loc_only_exact_matches</a>(key)</tt>	This is overriden on subclasses namely intervalindex to control get_slice_bound.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L3403'>get_slice_bound</a>(label,side,kind)</tt>	Calculate slice bound that corresponds to given label.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L3462'>slice_locs</a>(start,end,step,kind)</tt>	Compute slice locations for input labels.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L3526'>delete</a>(loc)</tt>	Make new index with passed location -s deleted.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L3536'>insert</a>(loc,item)</tt>	Make new index inserting new item at location follows.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L3555'>drop</a>(labels,errors)</tt>	Make new index with passed list of labels deleted parameters.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L3653'>_add_comparison_methods</a>(cls)</tt>	Add in comparison methods.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L3697'>_add_numeric_methods_add_sub_disabled</a>(cls)</tt>	Add in the numeric add/sub methods to disable.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L3712'>_add_numeric_methods_disabled</a>(cls)</tt>	Add in numeric methods to disable other than add/sub.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L3735'>_maybe_update_attributes</a>(attrs)</tt>	Update index attributes e g freq depending on op.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L3739'>_validate_for_numeric_unaryop</a>(op,opstr)</tt>	Validate if we can perform a numeric unary operation.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L3749'>_validate_for_numeric_binop</a>(other,op,opstr)</tt>	Return valid other evaluate or raise typeerror.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L3798'>_add_numeric_methods_binary</a>(cls)</tt>	Add in numeric methods.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L3865'>_add_numeric_methods_unary</a>(cls)</tt>	Add in numeric unary methods.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L3890'>_add_logical_methods</a>(cls)</tt>	Add in logical methods.
<tt style='background-color:#E8E8E8;'> core.indexes.Index <a href=' /core/indexes/base.py#L3929'>_add_logical_methods_disabled</a>(cls)</tt>	Add in logical methods to disable.
<tt style='background-color:#E8E8E8;'> core.indexes. <a href=' /core/indexes/base.py#L3988'>_ensure_has_len</a>(seq)</tt>	If seq is an iterator put its values into a list.
<tt style='background-color:#E8E8E8;'> core.indexes. <a href=' /core/indexes/base.py#L3998'>_trim_front</a>(strings)</tt>	Trims zeros and decimal points.
<tt style='background-color:#E8E8E8;'> core.indexes.RangeIndex <a href=' /core/indexes/range.py#L97'>from_range</a>(cls,data,name,dtype)</tt>	Create rangeindex from a range py3 or xrange py2 object.
<tt style='background-color:#E8E8E8;'> core.indexes.RangeIndex <a href=' /core/indexes/range.py#L152'>_validate_dtype</a>(dtype)</tt>	Require dtype to be none or int64.
<tt style='background-color:#E8E8E8;'> core.indexes.RangeIndex <a href=' /core/indexes/range.py#L158'>_constructor</a>()</tt>	Return the class to use for construction.
<tt style='background-color:#E8E8E8;'> core.indexes.RangeIndex <a href=' /core/indexes/range.py#L171'>_get_data_as_items</a>()</tt>	Return a list of tuples of start stop step.
<tt style='background-color:#E8E8E8;'> core.indexes.RangeIndex <a href=' /core/indexes/range.py#L182'>_format_attrs</a>()</tt>	Return a list of tuples of the (attr formatted_value).
<tt style='background-color:#E8E8E8;'> core.indexes.RangeIndex <a href=' /core/indexes/range.py#L195'>nbytes</a>()</tt>	Return the number of bytes in the underlying data.
<tt style='background-color:#E8E8E8;'> core.indexes.RangeIndex <a href=' /core/indexes/range.py#L201'>memory_usage</a>(deep)</tt>	Memory usage of my values parameters.
<tt style='background-color:#E8E8E8;'> core.indexes.RangeIndex <a href=' /core/indexes/range.py#L230'>is_unique</a>()</tt>	Return if the index has unique values.
<tt style='background-color:#E8E8E8;'> core.indexes.RangeIndex <a href=' /core/indexes/range.py#L267'>argsort</a>()</tt>	Returns the indices that would sort the index and its underlying data.
<tt style='background-color:#E8E8E8;'> core.indexes.RangeIndex <a href=' /core/indexes/range.py#L287'>equals</a>(other)</tt>	Determines if two index objects contain the same elements.
<tt style='background-color:#E8E8E8;'> core.indexes.RangeIndex <a href=' /core/indexes/range.py#L303'>intersection</a>(other)</tt>	Form the intersection of two index objects sortedness of the result is.
<tt style='background-color:#E8E8E8;'> core.indexes.RangeIndex <a href=' /core/indexes/range.py#L352'>_min_fitting_element</a>(lower_limit)</tt>	Returns the smallest element greater than or equal to the limit.
<tt style='background-color:#E8E8E8;'> core.indexes.RangeIndex <a href=' /core/indexes/range.py#L357'>_max_fitting_element</a>(upper_limit)</tt>	Returns the largest element smaller than or equal to the limit.
<tt style='background-color:#E8E8E8;'> core.indexes.RangeIndex <a href=' /core/indexes/range.py#L362'>_extended_gcd</a>(a,b)</tt>	Extended euclidean algorithms to solve bezout's identity.
<tt style='background-color:#E8E8E8;'> core.indexes.RangeIndex <a href=' /core/indexes/range.py#L379'>union</a>(other)</tt>	Form the union of two index objects and sorts if possible.
<tt style='background-color:#E8E8E8;'> core.indexes.RangeIndex <a href=' /core/indexes/range.py#L446'>__len__</a>()</tt>	Return the length of the rangeindex.
<tt style='background-color:#E8E8E8;'> core.indexes.RangeIndex <a href=' /core/indexes/range.py#L456'>__getitem__</a>(key)</tt>	Conserve rangeindex type for scalar and slice keys.
<tt style='background-color:#E8E8E8;'> core.indexes.RangeIndex <a href=' /core/indexes/range.py#L539'>_add_numeric_methods_binary</a>(cls)</tt>	Add in numeric methods specialized to rangeindex.
<tt style='background-color:#E8E8E8;'> core.indexes.NumericIndex <a href=' /core/indexes/numeric.py#L66'>_assert_safe_casting</a>(cls,data,subarr)</tt>	Subclasses need to override this only if the process of casting data from some accepted dtype to the internal dtype s bears the risk of.
<tt style='background-color:#E8E8E8;'> core.indexes.NumericIndex <a href=' /core/indexes/numeric.py#L75'>is_all_dates</a>()</tt>	Checks that all the labels are datetime objects.
<tt style='background-color:#E8E8E8;'> core.indexes.Int64Index <a href=' /core/indexes/numeric.py#L148'>_assert_safe_casting</a>(cls,data,subarr)</tt>	Ensure incoming data can be represented as ints.
<tt style='background-color:#E8E8E8;'> core.indexes.UInt64Index <a href=' /core/indexes/numeric.py#L226'>_assert_safe_casting</a>(cls,data,subarr)</tt>	Ensure incoming data can be represented as uints.
<tt style='background-color:#E8E8E8;'> core.indexes.Float64Index <a href=' /core/indexes/numeric.py#L313'>get_value</a>(series,key)</tt>	We always want to get an index value never a value.
<tt style='background-color:#E8E8E8;'> core.indexes.Float64Index <a href=' /core/indexes/numeric.py#L324'>equals</a>(other)</tt>	Determines if two index objects contain the same elements.
<tt style='background-color:#E8E8E8;'> core.indexes. <a href=' /core/indexes/timedeltas.py#L39'>_td_index_cmp</a>(opname,nat_result)</tt>	Wrap comparison operations to convert timedelta-like to timedelta64.
<tt style='background-color:#E8E8E8;'> core.indexes.TimedeltaIndex <a href=' /core/indexes/timedeltas.py#L297'>__setstate__</a>(state)</tt>	Necessary for making this object picklable.
<tt style='background-color:#E8E8E8;'> core.indexes.TimedeltaIndex <a href=' /core/indexes/timedeltas.py#L305'>_maybe_update_attributes</a>(attrs)</tt>	Update index attributes e g freq depending on op.
<tt style='background-color:#E8E8E8;'> core.indexes.TimedeltaIndex <a href=' /core/indexes/timedeltas.py#L391'>days</a>()</tt>	Number of days for each element.
<tt style='background-color:#E8E8E8;'> core.indexes.TimedeltaIndex <a href=' /core/indexes/timedeltas.py#L396'>seconds</a>()</tt>	Number of seconds (>= 0 and less than 1 day) for each element.
<tt style='background-color:#E8E8E8;'> core.indexes.TimedeltaIndex <a href=' /core/indexes/timedeltas.py#L401'>microseconds</a>()</tt>	Number of microseconds (>= 0 and less than 1 second) for each element.
<tt style='background-color:#E8E8E8;'> core.indexes.TimedeltaIndex <a href=' /core/indexes/timedeltas.py#L408'>nanoseconds</a>()</tt>	Number of nanoseconds (>= 0 and less than 1 microsecond) for each element.
<tt style='background-color:#E8E8E8;'> core.indexes.TimedeltaIndex <a href=' /core/indexes/timedeltas.py#L416'>components</a>()</tt>	Return a dataframe of the components days hours minutes seconds milliseconds microseconds nanoseconds of the timedeltas.
<tt style='background-color:#E8E8E8;'> core.indexes.TimedeltaIndex <a href=' /core/indexes/timedeltas.py#L446'>total_seconds</a>()</tt>	Total duration of each element expressed in seconds.
<tt style='background-color:#E8E8E8;'> core.indexes.TimedeltaIndex <a href=' /core/indexes/timedeltas.py#L455'>to_pytimedelta</a>()</tt>	Return timedeltaindex as object ndarray of datetime timedelta objects.
<tt style='background-color:#E8E8E8;'> core.indexes.TimedeltaIndex <a href=' /core/indexes/timedeltas.py#L488'>union</a>(other)</tt>	Specialized union for timedeltaindex objects if combine.
<tt style='background-color:#E8E8E8;'> core.indexes.TimedeltaIndex <a href=' /core/indexes/timedeltas.py#L519'>join</a>(other,how,level,return_indexers)</tt>	See index join.
<tt style='background-color:#E8E8E8;'> core.indexes.TimedeltaIndex <a href=' /core/indexes/timedeltas.py#L597'>intersection</a>(other)</tt>	Specialized intersection for timedeltaindex objects may be much faster.
<tt style='background-color:#E8E8E8;'> core.indexes.TimedeltaIndex <a href=' /core/indexes/timedeltas.py#L644'>get_value</a>(series,key)</tt>	Fast lookup of value from 1-dimensional ndarray only use this if you.
<tt style='background-color:#E8E8E8;'> core.indexes.TimedeltaIndex <a href=' /core/indexes/timedeltas.py#L675'>get_loc</a>(key,method,tolerance)</tt>	Get integer location for requested label.
<tt style='background-color:#E8E8E8;'> core.indexes.TimedeltaIndex <a href=' /core/indexes/timedeltas.py#L713'>_maybe_cast_slice_bound</a>(label,side,kind)</tt>	If label is a string cast it to timedelta according to resolution.
<tt style='background-color:#E8E8E8;'> core.indexes.TimedeltaIndex <a href=' /core/indexes/timedeltas.py#L824'>insert</a>(loc,item)</tt>	Make new index inserting new item at location parameters.
<tt style='background-color:#E8E8E8;'> core.indexes.TimedeltaIndex <a href=' /core/indexes/timedeltas.py#L872'>delete</a>(loc)</tt>	Make a new datetimeindex with passed location s deleted.
<tt style='background-color:#E8E8E8;'> core.indexes. <a href=' /core/indexes/timedeltas.py#L907'>_is_convertible_to_index</a>(other)</tt>	Return a boolean whether i can attempt conversion to a timedeltaindex.
<tt style='background-color:#E8E8E8;'> core.indexes. <a href=' /core/indexes/timedeltas.py#L925'>_to_m8</a>(key)</tt>	Timedelta-like => dt64.
<tt style='background-color:#E8E8E8;'> core.indexes. <a href=' /core/indexes/timedeltas.py#L959'>timedelta_range</a>(start,end,periods,freq)</tt>	Return a fixed frequency timedelta index with day as the default frequency.
<tt style='background-color:#E8E8E8;'> core.indexes.CategoricalIndex <a href=' /core/indexes/category.py#L85'>_create_from_codes</a>(codes,categories,ordered,name)</tt>	*this is an internal non-public method*.
<tt style='background-color:#E8E8E8;'> core.indexes.CategoricalIndex <a href=' /core/indexes/category.py#L115'>_create_categorical</a>(data,categories,ordered)</tt>	*this is an internal non-public method*.
<tt style='background-color:#E8E8E8;'> core.indexes.CategoricalIndex <a href=' /core/indexes/category.py#L170'>_is_dtype_compat</a>(other)</tt>	*this is an internal non-public method*.
<tt style='background-color:#E8E8E8;'> core.indexes.CategoricalIndex <a href=' /core/indexes/category.py#L199'>equals</a>(other)</tt>	Determines if two categorialindex objects contain the same elements.
<tt style='background-color:#E8E8E8;'> core.indexes.CategoricalIndex <a href=' /core/indexes/category.py#L221'>_format_attrs</a>()</tt>	Return a list of tuples of the (attr formatted_value).
<tt style='background-color:#E8E8E8;'> core.indexes.CategoricalIndex <a href=' /core/indexes/category.py#L244'>values</a>()</tt>	Return the underlying data which is a categorical.
<tt style='background-color:#E8E8E8;'> core.indexes.CategoricalIndex <a href=' /core/indexes/category.py#L249'>get_values</a>()</tt>	Return the underlying data as an ndarray.
<tt style='background-color:#E8E8E8;'> core.indexes.CategoricalIndex <a href=' /core/indexes/category.py#L286'>__array__</a>(dtype)</tt>	The array interface return my values.
<tt style='background-color:#E8E8E8;'> core.indexes.CategoricalIndex <a href=' /core/indexes/category.py#L297'>_isnan</a>()</tt>	Return if each value is nan.
<tt style='background-color:#E8E8E8;'> core.indexes.CategoricalIndex <a href=' /core/indexes/category.py#L334'>_to_safe_for_reshape</a>()</tt>	Convert to object if we are a categorical.
<tt style='background-color:#E8E8E8;'> core.indexes.CategoricalIndex <a href=' /core/indexes/category.py#L338'>get_loc</a>(key,method)</tt>	Get integer location for requested label parameters.
<tt style='background-color:#E8E8E8;'> core.indexes.CategoricalIndex <a href=' /core/indexes/category.py#L357'>get_value</a>(series,key)</tt>	Fast lookup of value from 1-dimensional ndarray only use this if you.
<tt style='background-color:#E8E8E8;'> core.indexes.CategoricalIndex <a href=' /core/indexes/category.py#L373'>_can_reindex</a>(indexer)</tt>	Always allow reindexing.
<tt style='background-color:#E8E8E8;'> core.indexes.CategoricalIndex <a href=' /core/indexes/category.py#L389'>reindex</a>(target,method,level,limit)</tt>	Create index with target's values (move/add/delete values as necessary) returns.
<tt style='background-color:#E8E8E8;'> core.indexes.CategoricalIndex <a href=' /core/indexes/category.py#L450'>_reindex_non_unique</a>(target)</tt>	Reindex from a non-unique which categoricalindex's are almost.
<tt style='background-color:#E8E8E8;'> core.indexes.CategoricalIndex <a href=' /core/indexes/category.py#L562'>map</a>(mapper)</tt>	Apply mapper function to its categories not codes.
<tt style='background-color:#E8E8E8;'> core.indexes.CategoricalIndex <a href=' /core/indexes/category.py#L580'>delete</a>(loc)</tt>	Make new index with passed location -s deleted.
<tt style='background-color:#E8E8E8;'> core.indexes.CategoricalIndex <a href=' /core/indexes/category.py#L590'>insert</a>(loc,item)</tt>	Make new index inserting new item at location follows.
<tt style='background-color:#E8E8E8;'> core.indexes.CategoricalIndex <a href=' /core/indexes/category.py#L618'>_append_same_dtype</a>(to_concat,name)</tt>	Concatenate to_concat which has the same class.
<tt style='background-color:#E8E8E8;'> core.indexes.CategoricalIndex <a href=' /core/indexes/category.py#L630'>_codes_for_groupby</a>(sort)</tt>	Return a categorical adjusted for groupby.
<tt style='background-color:#E8E8E8;'> core.indexes.CategoricalIndex <a href=' /core/indexes/category.py#L634'>_add_comparison_methods</a>(cls)</tt>	Add in comparison methods.
<tt style='background-color:#E8E8E8;'> core.indexes.CategoricalIndex <a href=' /core/indexes/category.py#L672'>_delegate_method</a>(name)</tt>	Method delegation to the _values.
<tt style='background-color:#E8E8E8;'> core.indexes.CategoricalIndex <a href=' /core/indexes/category.py#L682'>_add_accessors</a>(cls)</tt>	Add in categorical accessor methods.
<tt style='background-color:#E8E8E8;'> core.indexes.MultiIndex <a href=' /core/indexes/multi.py#L194'>set_levels</a>(levels,level,inplace,verify_integrity)</tt>	Set new levels on multiindex defaults to returning.
<tt style='background-color:#E8E8E8;'> core.indexes.MultiIndex <a href=' /core/indexes/multi.py#L296'>set_labels</a>(labels,level,inplace,verify_integrity)</tt>	Set new labels on multiindex defaults to returning.
<tt style='background-color:#E8E8E8;'> core.indexes.MultiIndex <a href=' /core/indexes/multi.py#L366'>copy</a>(names,dtype,levels,labels)</tt>	Make a copy of this object names dtype levels and labels can be.
<tt style='background-color:#E8E8E8;'> core.indexes.MultiIndex <a href=' /core/indexes/multi.py#L407'>__array__</a>(dtype)</tt>	The array interface return my values.
<tt style='background-color:#E8E8E8;'> core.indexes.MultiIndex <a href=' /core/indexes/multi.py#L411'>view</a>(cls)</tt>	This is defined as a copy with the same identity.
<tt style='background-color:#E8E8E8;'> core.indexes.MultiIndex <a href=' /core/indexes/multi.py#L434'>_is_memory_usage_qualified</a>()</tt>	Return a boolean if we need a qualified info display.
<tt style='background-color:#E8E8E8;'> core.indexes.MultiIndex <a href=' /core/indexes/multi.py#L447'>nbytes</a>()</tt>	Return the number of bytes in the underlying data.
<tt style='background-color:#E8E8E8;'> core.indexes.MultiIndex <a href=' /core/indexes/multi.py#L452'>_nbytes</a>(deep)</tt>	Return the number of bytes in the underlying data.
<tt style='background-color:#E8E8E8;'> core.indexes.MultiIndex <a href=' /core/indexes/multi.py#L471'>_format_attrs</a>()</tt>	Return a list of tuples of the (attr formatted_value).
<tt style='background-color:#E8E8E8;'> core.indexes.MultiIndex <a href=' /core/indexes/multi.py#L499'>_set_names</a>(names,level,validate)</tt>	Sets names on levels warning mutates!.
<tt style='background-color:#E8E8E8;'> core.indexes.MultiIndex <a href=' /core/indexes/multi.py#L531'>_reference_duplicate_name</a>(name)</tt>	Returns true if the name refered to in self names is duplicated.
<tt style='background-color:#E8E8E8;'> core.indexes.MultiIndex <a href=' /core/indexes/multi.py#L670'>is_monotonic</a>()</tt>	Return if the index is monotonic increasing only equal or increasing values.
<tt style='background-color:#E8E8E8;'> core.indexes.MultiIndex <a href=' /core/indexes/multi.py#L678'>is_monotonic_increasing</a>()</tt>	Return if the index is monotonic increasing only equal or increasing values.
<tt style='background-color:#E8E8E8;'> core.indexes.MultiIndex <a href=' /core/indexes/multi.py#L696'>is_monotonic_decreasing</a>()</tt>	Return if the index is monotonic decreasing only equal or decreasing values.
<tt style='background-color:#E8E8E8;'> core.indexes.MultiIndex <a href=' /core/indexes/multi.py#L708'>_have_mixed_levels</a>()</tt>	Return a boolean list indicated if we have mixed levels.
<tt style='background-color:#E8E8E8;'> core.indexes.MultiIndex <a href=' /core/indexes/multi.py#L713'>_inferred_type_levels</a>()</tt>	Return a list of the inferred types one for each level.
<tt style='background-color:#E8E8E8;'> core.indexes.MultiIndex <a href=' /core/indexes/multi.py#L718'>_hashed_values</a>()</tt>	Return a uint64 ndarray of my hashed values.
<tt style='background-color:#E8E8E8;'> core.indexes.MultiIndex <a href=' /core/indexes/multi.py#L724'>_hashed_indexing_key</a>(key)</tt>	Validate and return the hash for the provided key *this is internal for use for the cython routines*.
<tt style='background-color:#E8E8E8;'> core.indexes.MultiIndex <a href=' /core/indexes/multi.py#L869'>get_level_values</a>(level)</tt>	Return vector of label values for requested level.
<tt style='background-color:#E8E8E8;'> core.indexes.MultiIndex <a href=' /core/indexes/multi.py#L946'>_to_safe_for_reshape</a>()</tt>	Convert to object if we are a categorical.
<tt style='background-color:#E8E8E8;'> core.indexes.MultiIndex <a href=' /core/indexes/multi.py#L950'>to_frame</a>(index)</tt>	Create a dataframe with the columns the levels of the multiindex.
<tt style='background-color:#E8E8E8;'> core.indexes.MultiIndex <a href=' /core/indexes/multi.py#L976'>to_hierarchical</a>(n_repeat,n_shuffle)</tt>	Return a multiindex reshaped to conform to the shapes given by n_repeat and n_shuffle.
<tt style='background-color:#E8E8E8;'> core.indexes.MultiIndex <a href=' /core/indexes/multi.py#L1018'>is_lexsorted</a>()</tt>	Return true if the labels are lexicographically sorted.
<tt style='background-color:#E8E8E8;'> core.indexes.MultiIndex <a href=' /core/indexes/multi.py#L1024'>is_lexsorted_for_tuple</a>(tup)</tt>	Return true if we are correctly lexsorted given the passed tuple.
<tt style='background-color:#E8E8E8;'> core.indexes.MultiIndex <a href=' /core/indexes/multi.py#L1045'>from_arrays</a>(cls,arrays,sortorder,names)</tt>	Convert arrays to multiindex parameters.
<tt style='background-color:#E8E8E8;'> core.indexes.MultiIndex <a href=' /core/indexes/multi.py#L1093'>from_tuples</a>(cls,tuples,sortorder,names)</tt>	Convert list of tuples to multiindex parameters.
<tt style='background-color:#E8E8E8;'> core.indexes.MultiIndex <a href=' /core/indexes/multi.py#L1138'>from_product</a>(cls,iterables,sortorder,names)</tt>	Make a multiindex from the cartesian product of multiple iterables parameters.
<tt style='background-color:#E8E8E8;'> core.indexes.MultiIndex <a href=' /core/indexes/multi.py#L1179'>_sort_levels_monotonic</a>()</tt>	Versionadded : 0 20 0.
<tt style='background-color:#E8E8E8;'> core.indexes.MultiIndex <a href=' /core/indexes/multi.py#L1241'>remove_unused_levels</a>()</tt>	Create a new multiindex from the current that removing unused levels meaning that they are not expressed in the labels.
<tt style='background-color:#E8E8E8;'> core.indexes.MultiIndex <a href=' /core/indexes/multi.py#L1335'>__reduce__</a>()</tt>	Necessary for making this object picklable.
<tt style='background-color:#E8E8E8;'> core.indexes.MultiIndex <a href=' /core/indexes/multi.py#L1342'>__setstate__</a>(state)</tt>	Necessary for making this object picklable.
<tt style='background-color:#E8E8E8;'> core.indexes.MultiIndex <a href=' /core/indexes/multi.py#L1399'>_assert_take_fillable</a>(values,indices,allow_fill,fill_value)</tt>	Internal method to handle na filling of take.
<tt style='background-color:#E8E8E8;'> core.indexes.MultiIndex <a href=' /core/indexes/multi.py#L1421'>append</a>(other)</tt>	Append a collection of index options together.
<tt style='background-color:#E8E8E8;'> core.indexes.MultiIndex <a href=' /core/indexes/multi.py#L1469'>drop</a>(labels,level,errors)</tt>	Make new multiindex with passed list of labels deleted.
<tt style='background-color:#E8E8E8;'> core.indexes.MultiIndex <a href=' /core/indexes/multi.py#L1537'>droplevel</a>(level)</tt>	Return index with requested level removed if multiindex has only 2.
<tt style='background-color:#E8E8E8;'> core.indexes.MultiIndex <a href=' /core/indexes/multi.py#L1583'>swaplevel</a>(i,j)</tt>	Swap level i with level j do not change the ordering of anything.
<tt style='background-color:#E8E8E8;'> core.indexes.MultiIndex <a href=' /core/indexes/multi.py#L1616'>reorder_levels</a>(order)</tt>	Rearrange levels using input order may not drop or duplicate levels.
<tt style='background-color:#E8E8E8;'> core.indexes.MultiIndex <a href=' /core/indexes/multi.py#L1638'>_get_labels_for_sorting</a>()</tt>	We categorizing our labels by using the.
<tt style='background-color:#E8E8E8;'> core.indexes.MultiIndex <a href=' /core/indexes/multi.py#L1655'>sortlevel</a>(level,ascending,sort_remaining)</tt>	Sort multiindex at the requested level the result will respect the.
<tt style='background-color:#E8E8E8;'> core.indexes.MultiIndex <a href=' /core/indexes/multi.py#L1804'>reindex</a>(target,method,level,limit)</tt>	Create index with target's values (move/add/delete values as necessary) returns.
<tt style='background-color:#E8E8E8;'> core.indexes.MultiIndex <a href=' /core/indexes/multi.py#L1873'>slice_locs</a>(start,end,step,kind)</tt>	For an ordered multiindex compute the slice locations for input labels.
<tt style='background-color:#E8E8E8;'> core.indexes.MultiIndex <a href=' /core/indexes/multi.py#L1932'>get_loc</a>(key,method)</tt>	Get integer location slice or boolean mask for requested label or tuple.
<tt style='background-color:#E8E8E8;'> core.indexes.MultiIndex <a href=' /core/indexes/multi.py#L2018'>get_loc_level</a>(key,level,drop_level)</tt>	Get integer location slice for requested label or tuple.
<tt style='background-color:#E8E8E8;'> core.indexes.MultiIndex <a href=' /core/indexes/multi.py#L2239'>get_locs</a>(tup)</tt>	Given a tuple of slices/lists/labels/boolean indexer to a level-wise.
<tt style='background-color:#E8E8E8;'> core.indexes.MultiIndex <a href=' /core/indexes/multi.py#L2340'>truncate</a>(before,after)</tt>	Slice index between two labels / tuples return new multiindex parameters.
<tt style='background-color:#E8E8E8;'> core.indexes.MultiIndex <a href=' /core/indexes/multi.py#L2370'>equals</a>(other)</tt>	Determines if two multiindex objects have the same labeling information.
<tt style='background-color:#E8E8E8;'> core.indexes.MultiIndex <a href=' /core/indexes/multi.py#L2419'>equal_levels</a>(other)</tt>	Return true if the levels of both multiindex objects are the same.
<tt style='background-color:#E8E8E8;'> core.indexes.MultiIndex <a href=' /core/indexes/multi.py#L2432'>union</a>(other)</tt>	Form the union of two multiindex objects sorting if possible parameters.
<tt style='background-color:#E8E8E8;'> core.indexes.MultiIndex <a href=' /core/indexes/multi.py#L2456'>intersection</a>(other)</tt>	Form the intersection of two multiindex objects sorting if possible.
<tt style='background-color:#E8E8E8;'> core.indexes.MultiIndex <a href=' /core/indexes/multi.py#L2485'>difference</a>(other)</tt>	Compute sorted set difference of two multiindex objects.
<tt style='background-color:#E8E8E8;'> core.indexes.MultiIndex <a href=' /core/indexes/multi.py#L2541'>insert</a>(loc,item)</tt>	Make new multiindex inserting new item at location.
<tt style='background-color:#E8E8E8;'> core.indexes.MultiIndex <a href=' /core/indexes/multi.py#L2581'>delete</a>(loc)</tt>	Make new index with passed location deleted.
<tt style='background-color:#E8E8E8;'> core.indexes.MultiIndex <a href=' /core/indexes/multi.py#L2597'>_bounds</a>()</tt>	Return or compute and return slice points for level 0 assuming.
<tt style='background-color:#E8E8E8;'> core.indexes.DatetimeIndexOpsMixin <a href=' /core/indexes/datetimelike.py#L128'>equals</a>(other)</tt>	Determines if two index objects contain the same elements.
<tt style='background-color:#E8E8E8;'> core.indexes.DatetimeIndexOpsMixin <a href=' /core/indexes/datetimelike.py#L159'>_join_i8_wrapper</a>(joinf,dtype,with_indexers)</tt>	Create the join wrapper methods.
<tt style='background-color:#E8E8E8;'> core.indexes.DatetimeIndexOpsMixin <a href=' /core/indexes/datetimelike.py#L178'>_evaluate_compare</a>(other,op)</tt>	We have been called because a comparison between 8 aware arrays.
<tt style='background-color:#E8E8E8;'> core.indexes.DatetimeIndexOpsMixin <a href=' /core/indexes/datetimelike.py#L210'>_ensure_localized</a>(result)</tt>	Ensure that we are re-localized.
<tt style='background-color:#E8E8E8;'> core.indexes.DatetimeIndexOpsMixin <a href=' /core/indexes/datetimelike.py#L233'>_box_func</a>()</tt>	Box function to get object from internal representation.
<tt style='background-color:#E8E8E8;'> core.indexes.DatetimeIndexOpsMixin <a href=' /core/indexes/datetimelike.py#L240'>_box_values</a>(values)</tt>	Apply box func to passed values.
<tt style='background-color:#E8E8E8;'> core.indexes.DatetimeIndexOpsMixin <a href=' /core/indexes/datetimelike.py#L259'>__getitem__</a>(key)</tt>	This getitem defers to the underlying array which by-definition can.
<tt style='background-color:#E8E8E8;'> core.indexes.DatetimeIndexOpsMixin <a href=' /core/indexes/datetimelike.py#L306'>freqstr</a>()</tt>	Return the frequency object as a string if its set otherwise none.
<tt style='background-color:#E8E8E8;'> core.indexes.DatetimeIndexOpsMixin <a href=' /core/indexes/datetimelike.py#L315'>inferred_freq</a>()</tt>	Trys to return a string representing a frequency guess generated by infer_freq.
<tt style='background-color:#E8E8E8;'> core.indexes.DatetimeIndexOpsMixin <a href=' /core/indexes/datetimelike.py#L327'>_nat_new</a>(box)</tt>	Return index or ndarray filled with nat which has the same length as the caller.
<tt style='background-color:#E8E8E8;'> core.indexes.DatetimeIndexOpsMixin <a href=' /core/indexes/datetimelike.py#L364'>sort_values</a>(return_indexer,ascending)</tt>	Return sorted copy of index.
<tt style='background-color:#E8E8E8;'> core.indexes.DatetimeIndexOpsMixin <a href=' /core/indexes/datetimelike.py#L419'>_isnan</a>()</tt>	Return if each value is nan.
<tt style='background-color:#E8E8E8;'> core.indexes.DatetimeIndexOpsMixin <a href=' /core/indexes/datetimelike.py#L424'>asobject</a>()</tt>	Return object index which contains boxed values.
<tt style='background-color:#E8E8E8;'> core.indexes.DatetimeIndexOpsMixin <a href=' /core/indexes/datetimelike.py#L467'>tolist</a>()</tt>	Return a list of the underlying data.
<tt style='background-color:#E8E8E8;'> core.indexes.DatetimeIndexOpsMixin <a href=' /core/indexes/datetimelike.py#L473'>min</a>(axis)</tt>	Return the minimum value of the index or minimum along an axis.
<tt style='background-color:#E8E8E8;'> core.indexes.DatetimeIndexOpsMixin <a href=' /core/indexes/datetimelike.py#L500'>argmin</a>(axis)</tt>	Returns the indices of the minimum values along an axis.
<tt style='background-color:#E8E8E8;'> core.indexes.DatetimeIndexOpsMixin <a href=' /core/indexes/datetimelike.py#L521'>max</a>(axis)</tt>	Return the maximum value of the index or maximum along an axis.
<tt style='background-color:#E8E8E8;'> core.indexes.DatetimeIndexOpsMixin <a href=' /core/indexes/datetimelike.py#L548'>argmax</a>(axis)</tt>	Returns the indices of the maximum values along an axis.
<tt style='background-color:#E8E8E8;'> core.indexes.DatetimeIndexOpsMixin <a href=' /core/indexes/datetimelike.py#L573'>_format_attrs</a>()</tt>	Return a list of tuples of the (attr formatted_value).
<tt style='background-color:#E8E8E8;'> core.indexes.DatetimeIndexOpsMixin <a href=' /core/indexes/datetimelike.py#L590'>resolution</a>()</tt>	Returns day hour minute second millisecond or microsecond.
<tt style='background-color:#E8E8E8;'> core.indexes.DatetimeIndexOpsMixin <a href=' /core/indexes/datetimelike.py#L597'>_convert_scalar_indexer</a>(key,kind)</tt>	We don't allow integer or float indexing on datetime-like when using.
<tt style='background-color:#E8E8E8;'> core.indexes.DatetimeIndexOpsMixin <a href=' /core/indexes/datetimelike.py#L632'>_add_datetimelike_methods</a>(cls)</tt>	Add in the datetimelike methods (as we may have to override the.
<tt style='background-color:#E8E8E8;'> core.indexes.DatetimeIndexOpsMixin <a href=' /core/indexes/datetimelike.py#L736'>isin</a>(values)</tt>	Compute boolean array of whether each index value is found in the.
<tt style='background-color:#E8E8E8;'> core.indexes.DatetimeIndexOpsMixin <a href=' /core/indexes/datetimelike.py#L757'>shift</a>(n,freq)</tt>	Specialized shift which produces a datetimeindex.
<tt style='background-color:#E8E8E8;'> core.indexes.DatetimeIndexOpsMixin <a href=' /core/indexes/datetimelike.py#L796'>repeat</a>(repeats)</tt>	Analogous to ndarray repeat.
<tt style='background-color:#E8E8E8;'> core.indexes.DatetimeIndexOpsMixin <a href=' /core/indexes/datetimelike.py#L818'>summary</a>(name)</tt>	Return a summarized representation.
<tt style='background-color:#E8E8E8;'> core.indexes.DatetimeIndexOpsMixin <a href=' /core/indexes/datetimelike.py#L840'>_append_same_dtype</a>(to_concat,name)</tt>	Concatenate to_concat which has the same class.
<tt style='background-color:#E8E8E8;'> core.indexes. <a href=' /core/indexes/datetimelike.py#L858'>_ensure_datetimelike_to_i8</a>(other)</tt>	Helper for coercing an input scalar or array to i8.
<tt style='background-color:#E8E8E8;'> core.sparse. <a href=' /core/sparse/scipy_sparse.py#L21'>_to_ijv</a>(ss,row_levels,column_levels,sort_labels)</tt>	For arbitrary multiindexed sparseseries return v i j ilabels jlabels where (v i j is suitable for.
<tt style='background-color:#E8E8E8;'> core.sparse. <a href=' /core/sparse/scipy_sparse.py#L94'>_sparse_series_to_coo</a>(ss,row_levels,column_levels,sort_labels)</tt>	Convert a sparseseries to a scipy sparse coo_matrix using index.
<tt style='background-color:#E8E8E8;'> core.sparse. <a href=' /core/sparse/scipy_sparse.py#L121'>_coo_to_sparse_series</a>(A,dense_index)</tt>	Convert a scipy sparse coo_matrix to a sparseseries.
<tt style='background-color:#E8E8E8;'> core.sparse. <a href=' /core/sparse/series.py#L44'>_arith_method</a>(op,name,str_rep,default_axis)</tt>	Wrapper function for series arithmetic operations to avoid code duplication.
<tt style='background-color:#E8E8E8;'> core.sparse. <a href=' /core/sparse/array.py#L150'>_wrap_result</a>(name,data,sparse_index,fill_value)</tt>	Wrap op result to have correct dtype.
<tt style='background-color:#E8E8E8;'> core.sparse.SparseArray <a href=' /core/sparse/array.py#L273'>__array_wrap__</a>(out_arr,context)</tt>	Numpy calls this method when ufunc is applied parameters.
<tt style='background-color:#E8E8E8;'> core.sparse.SparseArray <a href=' /core/sparse/array.py#L302'>__array_finalize__</a>(obj)</tt>	Gets called after any ufunc or other array operations necessary to pass on the index.
<tt style='background-color:#E8E8E8;'> core.sparse.SparseArray <a href=' /core/sparse/array.py#L310'>__reduce__</a>()</tt>	Necessary for making this object picklable.
<tt style='background-color:#E8E8E8;'> core.sparse.SparseArray <a href=' /core/sparse/array.py#L317'>__setstate__</a>(state)</tt>	Necessary for making this object picklable.
<tt style='background-color:#E8E8E8;'> core.sparse.SparseArray <a href=' /core/sparse/array.py#L383'>get_values</a>(fill)</tt>	Return a dense representation.
<tt style='background-color:#E8E8E8;'> core.sparse.SparseArray <a href=' /core/sparse/array.py#L387'>to_dense</a>(fill)</tt>	Convert sparsearray to a numpy array.
<tt style='background-color:#E8E8E8;'> core.sparse.SparseArray <a href=' /core/sparse/array.py#L456'>take</a>(indices,axis,allow_fill,fill_value)</tt>	Sparse-compatible version of ndarray take.
<tt style='background-color:#E8E8E8;'> core.sparse.SparseArray <a href=' /core/sparse/array.py#L551'>copy</a>(deep)</tt>	Make a copy of the sparsearray only the actual sparse values need to.
<tt style='background-color:#E8E8E8;'> core.sparse.SparseArray <a href=' /core/sparse/array.py#L563'>count</a>()</tt>	Compute sum of non-na/null observations in sparsearray if the.
<tt style='background-color:#E8E8E8;'> core.sparse.SparseArray <a href=' /core/sparse/array.py#L607'>sum</a>(axis)</tt>	Sum of non-na/null values.
<tt style='background-color:#E8E8E8;'> core.sparse.SparseArray <a href=' /core/sparse/array.py#L624'>cumsum</a>(axis)</tt>	Cumulative sum of non-na/null values.
<tt style='background-color:#E8E8E8;'> core.sparse.SparseArray <a href=' /core/sparse/array.py#L653'>mean</a>(axis)</tt>	Mean of non-na/null values.
<tt style='background-color:#E8E8E8;'> core.sparse.SparseArray <a href=' /core/sparse/array.py#L672'>value_counts</a>(dropna)</tt>	Returns a series containing counts of unique values.
<tt style='background-color:#E8E8E8;'> core.sparse. <a href=' /core/sparse/array.py#L709'>_maybe_to_dense</a>(obj)</tt>	Try to convert to dense.
<tt style='background-color:#E8E8E8;'> core.sparse. <a href=' /core/sparse/array.py#L716'>_maybe_to_sparse</a>(array)</tt>	Array must be sparseseries or sparsearray.
<tt style='background-color:#E8E8E8;'> core.sparse. <a href=' /core/sparse/array.py#L723'>_sanitize_values</a>(arr)</tt>	Return an ndarray for our input.
<tt style='background-color:#E8E8E8;'> core.sparse. <a href=' /core/sparse/array.py#L750'>make_sparse</a>(arr,kind,fill_value)</tt>	Convert ndarray to sparse format.
<tt style='background-color:#E8E8E8;'> core.sparse.SparseList <a href=' /core/sparse/list.py#L67'>consolidate</a>(inplace)</tt>	Internally consolidate chunks of data.
<tt style='background-color:#E8E8E8;'> core.sparse.SparseList <a href=' /core/sparse/list.py#L101'>copy</a>()</tt>	Return copy of the list.
<tt style='background-color:#E8E8E8;'> core.sparse.SparseList <a href=' /core/sparse/list.py#L113'>to_array</a>()</tt>	Return sparsearray from data stored in the sparselist.
<tt style='background-color:#E8E8E8;'> core.sparse.SparseList <a href=' /core/sparse/list.py#L124'>append</a>(value)</tt>	Append element or array-like chunk of data to the sparselist.
<tt style='background-color:#E8E8E8;'> core.sparse.SparseDataFrame <a href=' /core/sparse/frame.py#L174'>_init_matrix</a>(data,index,columns,dtype)</tt>	Init self from ndarray or list of lists.
<tt style='background-color:#E8E8E8;'> core.sparse.SparseDataFrame <a href=' /core/sparse/frame.py#L181'>_init_spmatrix</a>(data,index,columns,dtype)</tt>	Init self from scipy sparse matrix.
<tt style='background-color:#E8E8E8;'> core.sparse.SparseDataFrame <a href=' /core/sparse/frame.py#L226'>to_coo</a>()</tt>	Return the contents of the frame as a sparse scipy coo matrix.
<tt style='background-color:#E8E8E8;'> core.sparse.SparseDataFrame <a href=' /core/sparse/frame.py#L279'>_unpickle_sparse_frame_compat</a>(state)</tt>	Original pickle format.
<tt style='background-color:#E8E8E8;'> core.sparse.SparseDataFrame <a href=' /core/sparse/frame.py#L304'>to_dense</a>()</tt>	Convert to dense dataframe.
<tt style='background-color:#E8E8E8;'> core.sparse.SparseDataFrame <a href=' /core/sparse/frame.py#L315'>_apply_columns</a>(func)</tt>	Get new sparsedataframe applying func to each columns.
<tt style='background-color:#E8E8E8;'> core.sparse.SparseDataFrame <a href=' /core/sparse/frame.py#L329'>copy</a>(deep)</tt>	Make a copy of this sparsedataframe.
<tt style='background-color:#E8E8E8;'> core.sparse.SparseDataFrame <a href=' /core/sparse/frame.py#L346'>density</a>()</tt>	Ratio of non-sparse points to total dense data points.
<tt style='background-color:#E8E8E8;'> core.sparse.SparseDataFrame <a href=' /core/sparse/frame.py#L378'>_sanitize_column</a>(key,value)</tt>	Creates a new sparsearray from the input value.
<tt style='background-color:#E8E8E8;'> core.sparse.SparseDataFrame <a href=' /core/sparse/frame.py#L424'>__getitem__</a>(key)</tt>	Retrieve column or slice from dataframe.
<tt style='background-color:#E8E8E8;'> core.sparse.SparseDataFrame <a href=' /core/sparse/frame.py#L445'>set_value</a>(index,col,value,takeable)</tt>	Put single value at passed column and index parameters.
<tt style='background-color:#E8E8E8;'> core.sparse.SparseDataFrame <a href=' /core/sparse/frame.py#L480'>xs</a>(key,axis,copy)</tt>	Returns a row cross-section from the sparsedataframe as a series object.
<tt style='background-color:#E8E8E8;'> core.sparse.SparseDataFrame <a href=' /core/sparse/frame.py#L747'>transpose</a>()</tt>	Returns a dataframe with the rows/columns switched.
<tt style='background-color:#E8E8E8;'> core.sparse.SparseDataFrame <a href=' /core/sparse/frame.py#L766'>cumsum</a>(axis)</tt>	Return sparsedataframe of cumulative sums over requested axis.
<tt style='background-color:#E8E8E8;'> core.sparse.SparseDataFrame <a href=' /core/sparse/frame.py#L794'>apply</a>(func,axis,broadcast,reduce)</tt>	Analogous to dataframe apply for sparsedataframe.
<tt style='background-color:#E8E8E8;'> core.sparse.SparseDataFrame <a href=' /core/sparse/frame.py#L831'>applymap</a>(func)</tt>	Apply a function to a dataframe that is intended to operate elementwise i.
<tt style='background-color:#E8E8E8;'> core.sparse. <a href=' /core/sparse/frame.py#L849'>to_manager</a>(sdf,columns,index)</tt>	Create and return the block manager from a dataframe of series.
<tt style='background-color:#E8E8E8;'> core.sparse. <a href=' /core/sparse/frame.py#L861'>stack_sparse_frame</a>(frame)</tt>	Only makes sense when fill_value is nan.
<tt style='background-color:#E8E8E8;'> core.sparse. <a href=' /core/sparse/frame.py#L895'>homogenize</a>(series_dict)</tt>	Conform a set of sparseseries (with nan fill_value) to a common sparseindex corresponding to the locations where they all have data.
<tt style='background-color:#E8E8E8;'> core.sparse.SparseSeries <a href=' /core/sparse/series.py#L217'>values</a>()</tt>	Return the array.
<tt style='background-color:#E8E8E8;'> core.sparse.SparseSeries <a href=' /core/sparse/series.py#L222'>__array__</a>(result)</tt>	The array interface return my values.
<tt style='background-color:#E8E8E8;'> core.sparse.SparseSeries <a href=' /core/sparse/series.py#L226'>get_values</a>()</tt>	Same as values.
<tt style='background-color:#E8E8E8;'> core.sparse.SparseSeries <a href=' /core/sparse/series.py#L254'>from_array</a>(cls,arr,index,name)</tt>	Simplified alternate constructor.
<tt style='background-color:#E8E8E8;'> core.sparse.SparseSeries <a href=' /core/sparse/series.py#L279'>as_sparse_array</a>(kind,fill_value,copy)</tt>	Return my self as a sparse array do not copy by default.
<tt style='background-color:#E8E8E8;'> core.sparse.SparseSeries <a href=' /core/sparse/series.py#L302'>__array_wrap__</a>(result,context)</tt>	Gets called prior to a ufunc and after see sparsearray.
<tt style='background-color:#E8E8E8;'> core.sparse.SparseSeries <a href=' /core/sparse/series.py#L321'>__array_finalize__</a>(obj)</tt>	Gets called after any ufunc or other array operations necessary to pass on the index.
<tt style='background-color:#E8E8E8;'> core.sparse.SparseSeries <a href=' /core/sparse/series.py#L329'>_reduce</a>(op,name,axis,skipna)</tt>	Perform a reduction operation.
<tt style='background-color:#E8E8E8;'> core.sparse.SparseSeries <a href=' /core/sparse/series.py#L364'>__iter__</a>()</tt>	Forward to the array.
<tt style='background-color:#E8E8E8;'> core.sparse.SparseSeries <a href=' /core/sparse/series.py#L374'>_ixs</a>(i,axis)</tt>	Return the i-th value or values in the sparseseries by location.
<tt style='background-color:#E8E8E8;'> core.sparse.SparseSeries <a href=' /core/sparse/series.py#L392'>_get_val_at</a>(loc)</tt>	Forward to the array.
<tt style='background-color:#E8E8E8;'> core.sparse.SparseSeries <a href=' /core/sparse/series.py#L430'>abs</a>()</tt>	Return an object with absolute value taken only applicable to objects.
<tt style='background-color:#E8E8E8;'> core.sparse.SparseSeries <a href=' /core/sparse/series.py#L442'>get</a>(label,default)</tt>	Returns value occupying requested label default to specified missing value if not present.
<tt style='background-color:#E8E8E8;'> core.sparse.SparseSeries <a href=' /core/sparse/series.py#L464'>get_value</a>(label,takeable)</tt>	Retrieve single value at passed index label.
<tt style='background-color:#E8E8E8;'> core.sparse.SparseSeries <a href=' /core/sparse/series.py#L480'>set_value</a>(label,value,takeable)</tt>	Quickly set single value at passed label if label is not contained a.
<tt style='background-color:#E8E8E8;'> core.sparse.SparseSeries <a href=' /core/sparse/series.py#L531'>to_dense</a>(sparse_only)</tt>	Convert sparseseries to a series.
<tt style='background-color:#E8E8E8;'> core.sparse.SparseSeries <a href=' /core/sparse/series.py#L563'>copy</a>(deep)</tt>	Make a copy of the sparseseries only the actual sparse values need to.
<tt style='background-color:#E8E8E8;'> core.sparse.SparseSeries <a href=' /core/sparse/series.py#L583'>sparse_reindex</a>(new_index)</tt>	Conform sparse values to new sparseindex.
<tt style='background-color:#E8E8E8;'> core.sparse.SparseSeries <a href=' /core/sparse/series.py#L604'>take</a>(indices,axis,convert)</tt>	Sparse-compatible version of ndarray take.
<tt style='background-color:#E8E8E8;'> core.sparse.SparseSeries <a href=' /core/sparse/series.py#L619'>cumsum</a>(axis)</tt>	Cumulative sum of non-na/null values.
<tt style='background-color:#E8E8E8;'> core.sparse.SparseSeries <a href=' /core/sparse/series.py#L659'>dropna</a>(axis,inplace)</tt>	Analogous to series dropna if fill_value=nan returns a dense series.
<tt style='background-color:#E8E8E8;'> core.sparse.SparseSeries <a href=' /core/sparse/series.py#L704'>combine_first</a>(other)</tt>	Combine series values choosing the calling series's values first.
<tt style='background-color:#E8E8E8;'> core.sparse.SparseSeries <a href=' /core/sparse/series.py#L723'>to_coo</a>(row_levels,column_levels,sort_labels)</tt>	Create a scipy sparse coo_matrix from a sparseseries with multiindex.
<tt style='background-color:#E8E8E8;'> core.sparse.SparseSeries <a href=' /core/sparse/series.py#L779'>from_coo</a>(cls,A,dense_index)</tt>	Create a sparseseries from a scipy sparse coo_matrix.
<tt style='background-color:#E8E8E8;'> core.computation.BinOp <a href=' /core/computation/pytables.py#L127'>conform</a>(rhs)</tt>	Inplace conform rhs.
<tt style='background-color:#E8E8E8;'> core.computation.BinOp <a href=' /core/computation/pytables.py#L135'>is_valid</a>()</tt>	Return true if this is a valid field.
<tt style='background-color:#E8E8E8;'> core.computation.BinOp <a href=' /core/computation/pytables.py#L140'>is_in_table</a>()</tt>	Return true if this is a valid column name for generation (e g an.
<tt style='background-color:#E8E8E8;'> core.computation.BinOp <a href=' /core/computation/pytables.py#L146'>kind</a>()</tt>	The kind of my field.
<tt style='background-color:#E8E8E8;'> core.computation.BinOp <a href=' /core/computation/pytables.py#L151'>meta</a>()</tt>	The meta of my field.
<tt style='background-color:#E8E8E8;'> core.computation.BinOp <a href=' /core/computation/pytables.py#L156'>metadata</a>()</tt>	The metadata of my field.
<tt style='background-color:#E8E8E8;'> core.computation.BinOp <a href=' /core/computation/pytables.py#L161'>generate</a>(v)</tt>	Create and return the op string for this termvalue.
<tt style='background-color:#E8E8E8;'> core.computation.BinOp <a href=' /core/computation/pytables.py#L166'>convert_value</a>(v)</tt>	Convert the expression that is in the term to something that is.
<tt style='background-color:#E8E8E8;'> core.computation.FilterBinOp <a href=' /core/computation/pytables.py#L232'>invert</a>()</tt>	Invert the filter.
<tt style='background-color:#E8E8E8;'> core.computation.FilterBinOp <a href=' /core/computation/pytables.py#L240'>format</a>()</tt>	Return the actual filter format.
<tt style='background-color:#E8E8E8;'> core.computation.ConditionBinOp <a href=' /core/computation/pytables.py#L303'>invert</a>()</tt>	Invert the condition.
<tt style='background-color:#E8E8E8;'> core.computation.ConditionBinOp <a href=' /core/computation/pytables.py#L311'>format</a>()</tt>	Return the actual ne format.
<tt style='background-color:#E8E8E8;'> core.computation. <a href=' /core/computation/pytables.py#L453'>_validate_where</a>(w)</tt>	Validate that the where statement is of the right type.
<tt style='background-color:#E8E8E8;'> core.computation.Expr <a href=' /core/computation/pytables.py#L549'>evaluate</a>()</tt>	Create and return the numexpr condition and filter.
<tt style='background-color:#E8E8E8;'> core.computation.TermValue <a href=' /core/computation/pytables.py#L575'>tostring</a>(encoding)</tt>	Quote the string if not encoded.
<tt style='background-color:#E8E8E8;'> core.computation. <a href=' /core/computation/pytables.py#L589'>maybe_expression</a>(s)</tt>	Loose checking if s is a pytables-acceptable expression.
<tt style='background-color:#E8E8E8;'> core.computation.Term <a href=' /core/computation/ops.py#L83'>update</a>(value)</tt>	Search order for local (i e @variable) variables.
<tt style='background-color:#E8E8E8;'> core.computation.Op <a href=' /core/computation/ops.py#L191'>__unicode__</a>()</tt>	Print a generic n-ary operator and its operands using infix.
<tt style='background-color:#E8E8E8;'> core.computation. <a href=' /core/computation/ops.py#L230'>_in</a>(x,y)</tt>	Compute the vectorized membership of x in y if possible otherwise use python.
<tt style='background-color:#E8E8E8;'> core.computation. <a href=' /core/computation/ops.py#L245'>_not_in</a>(x,y)</tt>	Compute the vectorized membership of x not in y if possible otherwise use python.
<tt style='background-color:#E8E8E8;'> core.computation. <a href=' /core/computation/ops.py#L284'>_cast_inplace</a>(terms,acceptable_dtypes,dtype)</tt>	Cast an expression inplace.
<tt style='background-color:#E8E8E8;'> core.computation.BinOp <a href=' /core/computation/ops.py#L343'>__call__</a>(env)</tt>	Recursively evaluate an expression in python space.
<tt style='background-color:#E8E8E8;'> core.computation.BinOp <a href=' /core/computation/ops.py#L365'>evaluate</a>(env,engine,parser,term_type)</tt>	Evaluate a binary operation *before* being passed to the engine.
<tt style='background-color:#E8E8E8;'> core.computation.BinOp <a href=' /core/computation/ops.py#L402'>convert_values</a>()</tt>	Convert datetimes to a comparable value in an expression.
<tt style='background-color:#E8E8E8;'> core.computation. <a href=' /core/computation/expressions.py#L67'>_can_use_numexpr</a>(op,op_str,a,b)</tt>	Return a boolean if we will be using numexpr.
<tt style='background-color:#E8E8E8;'> core.computation. <a href=' /core/computation/expressions.py#L192'>evaluate</a>(op,op_str,a,b)</tt>	Evaluate and return the expression of the op on a and b.
<tt style='background-color:#E8E8E8;'> core.computation. <a href=' /core/computation/expressions.py#L215'>where</a>(cond,a,b,raise_on_error)</tt>	Evaluate the where condition cond on a and b.
<tt style='background-color:#E8E8E8;'> core.computation. <a href=' /core/computation/expressions.py#L235'>set_test_mode</a>(v)</tt>	Keeps track of whether numexpr was used stores an additional true.
<tt style='background-color:#E8E8E8;'> core.computation. <a href=' /core/computation/expressions.py#L252'>get_test_result</a>()</tt>	Get test result and reset test_results.
<tt style='background-color:#E8E8E8;'> core.computation. <a href=' /core/computation/common.py#L6'>_ensure_decoded</a>(s)</tt>	If we have bytes decode them to unicode.
<tt style='background-color:#E8E8E8;'> core.computation. <a href=' /core/computation/common.py#L13'>_result_type_many</a>()</tt>	Wrapper around numpy result_type which overcomes the npy_maxargs 32.
<tt style='background-color:#E8E8E8;'> core.computation. <a href=' /core/computation/align.py#L38'>_any_pandas_objects</a>(terms)</tt>	Check a sequence of terms for instances of pandasobject.
<tt style='background-color:#E8E8E8;'> core.computation. <a href=' /core/computation/align.py#L121'>_align</a>(terms)</tt>	Align a set of terms.
<tt style='background-color:#E8E8E8;'> core.computation. <a href=' /core/computation/align.py#L142'>_reconstruct_object</a>(typ,obj,axes,dtype)</tt>	Reconstruct an object given its type raw value and possibly empty none axes.
<tt style='background-color:#E8E8E8;'> core.computation. <a href=' /core/computation/engines.py#L23'>_check_ne_builtin_clash</a>(expr)</tt>	Attempt to prevent foot-shooting in a helpful way.
<tt style='background-color:#E8E8E8;'> core.computation.AbstractEngine <a href=' /core/computation/engines.py#L53'>convert</a>()</tt>	Convert an expression for evaluation.
<tt style='background-color:#E8E8E8;'> core.computation.AbstractEngine <a href=' /core/computation/engines.py#L83'>_evaluate</a>()</tt>	Return an evaluated expression.
<tt style='background-color:#E8E8E8;'> core.computation. <a href=' /core/computation/eval.py#L17'>_check_engine</a>(engine)</tt>	Make sure a valid engine is passed.
<tt style='background-color:#E8E8E8;'> core.computation. <a href=' /core/computation/eval.py#L60'>_check_parser</a>(parser)</tt>	Make sure a valid parser is passed.
<tt style='background-color:#E8E8E8;'> core.computation. <a href=' /core/computation/eval.py#L86'>_check_expression</a>(expr)</tt>	Make sure an expression is not an empty string.
<tt style='background-color:#E8E8E8;'> core.computation. <a href=' /core/computation/eval.py#L103'>_convert_expression</a>(expr)</tt>	Convert an object to an expression.
<tt style='background-color:#E8E8E8;'> core.computation. <a href=' /core/computation/eval.py#L149'>eval</a>(expr,parser,engine,truediv)</tt>	Evaluate a python expression as a string using various backends.
<tt style='background-color:#E8E8E8;'> core.computation. <a href=' /core/computation/expr.py#L26'>tokenize_string</a>(source)</tt>	Tokenize a python source code string.
<tt style='background-color:#E8E8E8;'> core.computation. <a href=' /core/computation/expr.py#L39'>_rewrite_assign</a>(tok)</tt>	Rewrite the assignment operator for pytables expressions that use = as a substitute for ==.
<tt style='background-color:#E8E8E8;'> core.computation. <a href=' /core/computation/expr.py#L57'>_replace_booleans</a>(tok)</tt>	Replace & with and and | with or so that bitwise precedence is changed to boolean precedence.
<tt style='background-color:#E8E8E8;'> core.computation. <a href=' /core/computation/expr.py#L81'>_replace_locals</a>(tok)</tt>	Replace local variables with a syntactically valid name.
<tt style='background-color:#E8E8E8;'> core.computation. <a href=' /core/computation/expr.py#L106'>_preparse</a>(source,f)</tt>	Compose a collection of tokenization functions parameters.
<tt style='background-color:#E8E8E8;'> core.computation. <a href=' /core/computation/expr.py#L135'>_is_type</a>(t)</tt>	Factory for a type checking function of type t or tuple of types.
<tt style='background-color:#E8E8E8;'> core.computation. <a href=' /core/computation/expr.py#L150'>_filter_nodes</a>(superclass,all_nodes)</tt>	Filter out ast nodes that are subclasses of superclass.
<tt style='background-color:#E8E8E8;'> core.computation. <a href=' /core/computation/expr.py#L197'>_node_not_implemented</a>(node_name,cls)</tt>	Return a function that raises a notimplementederror with a passed node name.
<tt style='background-color:#E8E8E8;'> core.computation. <a href=' /core/computation/expr.py#L208'>disallow</a>(nodes)</tt>	Decorator to disallow certain nodes from parsing raises a.
<tt style='background-color:#E8E8E8;'> core.computation. <a href=' /core/computation/expr.py#L227'>_op_maker</a>(op_class,op_symbol)</tt>	Return a function to create an op class with its symbol already passed.
<tt style='background-color:#E8E8E8;'> core.computation. <a href=' /core/computation/expr.py#L250'>add_ops</a>(op_classes)</tt>	Decorator to add default implementation of ops.
<tt style='background-color:#E8E8E8;'> core.computation.BaseExprVisitor <a href=' /core/computation/expr.py#L468'>visit_Slice</a>(node)</tt>	Df index[slice 4 6 ].
<tt style='background-color:#E8E8E8;'> core.computation.BaseExprVisitor <a href=' /core/computation/expr.py#L482'>visit_Assign</a>(node)</tt>	Support a single assignment node like.
<tt style='background-color:#E8E8E8;'> core.computation.BaseExprVisitor <a href=' /core/computation/expr.py#L532'>visit_Call_35</a>(node,side)</tt>	In 3 5 the starargs attribute was changed to be more flexible.
<tt style='background-color:#E8E8E8;'> core.computation.Expr <a href=' /core/computation/expr.py#L742'>parse</a>()</tt>	Parse an expression.
<tt style='background-color:#E8E8E8;'> core.computation.Expr <a href=' /core/computation/expr.py#L746'>names</a>()</tt>	Get the names in an expression.
<tt style='background-color:#E8E8E8;'> core.computation. <a href=' /core/computation/scope.py#L21'>_ensure_scope</a>(level,global_dict,local_dict,resolvers)</tt>	Ensure that we are grabbing the correct scope.
<tt style='background-color:#E8E8E8;'> core.computation. <a href=' /core/computation/scope.py#L28'>_replacer</a>(x)</tt>	Replace a number with its hexadecimal representation used to tag.
<tt style='background-color:#E8E8E8;'> core.computation. <a href=' /core/computation/scope.py#L43'>_raw_hex_id</a>(obj)</tt>	Return the padded hexadecimal id of obj.
<tt style='background-color:#E8E8E8;'> core.computation. <a href=' /core/computation/scope.py#L62'>_get_pretty_string</a>(obj)</tt>	Return a prettier version of obj.
<tt style='background-color:#E8E8E8;'> core.computation.Scope <a href=' /core/computation/scope.py#L143'>has_resolvers</a>()</tt>	Return whether we have any extra scope.
<tt style='background-color:#E8E8E8;'> core.computation.Scope <a href=' /core/computation/scope.py#L156'>resolve</a>(key,is_local)</tt>	Resolve a variable name in a possibly local context.
<tt style='background-color:#E8E8E8;'> core.computation.Scope <a href=' /core/computation/scope.py#L194'>swapkey</a>(old_key,new_key,new_value)</tt>	Replace a variable name with a potentially new value.
<tt style='background-color:#E8E8E8;'> core.computation.Scope <a href=' /core/computation/scope.py#L218'>_get_vars</a>(stack,scopes)</tt>	Get specifically scoped variables from a list of stack frames.
<tt style='background-color:#E8E8E8;'> core.computation.Scope <a href=' /core/computation/scope.py#L240'>update</a>(level)</tt>	Update the current scope by going back level levels.
<tt style='background-color:#E8E8E8;'> core.computation.Scope <a href=' /core/computation/scope.py#L259'>add_tmp</a>(value)</tt>	Add a temporary variable to the scope.
<tt style='background-color:#E8E8E8;'> core.computation.Scope <a href=' /core/computation/scope.py#L283'>ntemps</a>()</tt>	The number of temporary variables in this scope.
<tt style='background-color:#E8E8E8;'> core.computation.Scope <a href=' /core/computation/scope.py#L288'>full_scope</a>()</tt>	Return the full scope for use with passing to engines transparently as a mapping.
<tt style='background-color:#E8E8E8;'> core.reshape. <a href=' /core/reshape/pivot.py#L15'>pivot_table</a>(data,values,index,columns)</tt>	Create a spreadsheet-style pivot table as a dataframe the levels in the.
<tt style='background-color:#E8E8E8;'> core.reshape. <a href=' /core/reshape/pivot.py#L390'>crosstab</a>(index,columns,values,rownames)</tt>	Compute a simple cross-tabulation of two or more factors by default.
<tt style='background-color:#E8E8E8;'> core.reshape. <a href=' /core/reshape/tile.py#L24'>cut</a>(x,bins,right,labels)</tt>	Return indices of half-open bins to which each value of x belongs.
<tt style='background-color:#E8E8E8;'> core.reshape. <a href=' /core/reshape/tile.py#L142'>qcut</a>(x,q,labels,retbins)</tt>	Quantile-based discretization function discretize variable into.
<tt style='background-color:#E8E8E8;'> core.reshape. <a href=' /core/reshape/tile.py#L277'>_coerce_to_type</a>(x)</tt>	If the passed data is of datetime/timedelta type.
<tt style='background-color:#E8E8E8;'> core.reshape. <a href=' /core/reshape/tile.py#L295'>_convert_bin_to_numeric_type</a>(bins,dtype)</tt>	If the passed bin is of datetime/timedelta type.
<tt style='background-color:#E8E8E8;'> core.reshape. <a href=' /core/reshape/tile.py#L324'>_format_labels</a>(bins,precision,right,include_lowest)</tt>	Based on the dtype return our labels.
<tt style='background-color:#E8E8E8;'> core.reshape. <a href=' /core/reshape/tile.py#L356'>_preprocess_for_cut</a>(x)</tt>	Handles preprocessing for cut where we convert passed.
<tt style='background-color:#E8E8E8;'> core.reshape. <a href=' /core/reshape/tile.py#L375'>_postprocess_for_cut</a>(fac,bins,retbins,x_is_series)</tt>	Handles post processing for the cut method where.
<tt style='background-color:#E8E8E8;'> core.reshape. <a href=' /core/reshape/tile.py#L391'>_round_frac</a>(x,precision)</tt>	Round the fractional part of the given number.
<tt style='background-color:#E8E8E8;'> core.reshape. <a href=' /core/reshape/tile.py#L406'>_infer_precision</a>(base_precision,bins)</tt>	Infer an appropriate precision for _round_frac.
<tt style='background-color:#E8E8E8;'> core.reshape. <a href=' /core/reshape/util.py#L16'>cartesian_product</a>(X)</tt>	Numpy version of itertools product or pandas compat product.
<tt style='background-color:#E8E8E8;'> core.reshape. <a href=' /core/reshape/util.py#L68'>_compose2</a>(f,g)</tt>	Compose 2 callables.
<tt style='background-color:#E8E8E8;'> core.reshape. <a href=' /core/reshape/util.py#L73'>compose</a>()</tt>	Compose 2 or more callables.
<tt style='background-color:#E8E8E8;'> core.reshape. <a href=' /core/reshape/merge.py#L65'>_groupby_and_merge</a>(by,on,left,right)</tt>	Groupby & merge we are always performing a left-by type operation.
<tt style='background-color:#E8E8E8;'> core.reshape. <a href=' /core/reshape/merge.py#L155'>merge_ordered</a>(left,right,on,left_on)</tt>	Perform merge with optional filling/interpolation designed for ordered data like time series data.
<tt style='background-color:#E8E8E8;'> core.reshape. <a href=' /core/reshape/merge.py#L259'>merge_asof</a>(left,right,on,left_on)</tt>	Perform an asof merge this is similar to a left-join except that we.
<tt style='background-color:#E8E8E8;'> core.reshape._MergeOperation <a href=' /core/reshape/merge.py#L708'>_get_join_indexers</a>()</tt>	Return the join indexers.
<tt style='background-color:#E8E8E8;'> core.reshape._MergeOperation <a href=' /core/reshape/merge.py#L755'>_get_merge_keys</a>()</tt>	Note has side effects (copy/delete key columns).
<tt style='background-color:#E8E8E8;'> core.reshape. <a href=' /core/reshape/merge.py#L1083'>_get_cython_type</a>(dtype)</tt>	Given a dtype return a c name like 'int64_t' or 'double'.
<tt style='background-color:#E8E8E8;'> core.reshape. <a href=' /core/reshape/merge.py#L1092'>_get_cython_type_upcast</a>(dtype)</tt>	Upcast a dtype to 'int64_t', 'double', or 'object'.
<tt style='background-color:#E8E8E8;'> core.reshape._AsOfMerge <a href=' /core/reshape/merge.py#L1172'>_asof_key</a>()</tt>	This is our asof key the 'on'.
<tt style='background-color:#E8E8E8;'> core.reshape._AsOfMerge <a href=' /core/reshape/merge.py#L1223'>_get_join_indexers</a>()</tt>	Return the join indexers.
<tt style='background-color:#E8E8E8;'> core.reshape. <a href=' /core/reshape/concat.py#L21'>concat</a>(objs,axis,join,join_axes)</tt>	Concatenate pandas objects along a particular axis with optional set logic along the other axes.
<tt style='background-color:#E8E8E8;'> core.reshape._Concatenator <a href=' /core/reshape/concat.py#L457'>_get_concat_axis</a>()</tt>	Return index to be used along concatenation axis.
<tt style='background-color:#E8E8E8;'> core.reshape. <a href=' /core/reshape/reshape.py#L362'>pivot</a>(index,columns,values)</tt>	See dataframe pivot.
<tt style='background-color:#E8E8E8;'> core.reshape. <a href=' /core/reshape/reshape.py#L381'>pivot_simple</a>(index,columns,values)</tt>	Produce 'pivot' table based on 3 columns of this dataframe.
<tt style='background-color:#E8E8E8;'> core.reshape. <a href=' /core/reshape/reshape.py#L421'>_slow_pivot</a>(index,columns,values)</tt>	Produce 'pivot' table based on 3 columns of this dataframe.
<tt style='background-color:#E8E8E8;'> core.reshape. <a href=' /core/reshape/reshape.py#L500'>stack</a>(frame,level,dropna)</tt>	Convert dataframe to series with multi-level index columns become the.
<tt style='background-color:#E8E8E8;'> core.reshape. <a href=' /core/reshape/reshape.py#L776'>lreshape</a>(data,groups,dropna,label)</tt>	Reshape long-format data to wide generalized inverse of dataframe pivot.
<tt style='background-color:#E8E8E8;'> core.reshape. <a href=' /core/reshape/reshape.py#L845'>wide_to_long</a>(df,stubnames,i,j)</tt>	Wide panel to long format less flexible but more user-friendly than melt.
<tt style='background-color:#E8E8E8;'> core.reshape. <a href=' /core/reshape/reshape.py#L1069'>get_dummies</a>(data,prefix,prefix_sep,dummy_na)</tt>	Convert categorical variable into dummy/indicator variables parameters.
<tt style='background-color:#E8E8E8;'> core.reshape. <a href=' /core/reshape/reshape.py#L1297'>make_axis_dummies</a>(frame,axis,transform)</tt>	Construct 1-0 dummy variables corresponding to designated axis labels.
<tt style='background-color:#E8E8E8;'> tseries. <a href=' /tseries/util.py#L10'>pivot_annual</a>(series,freq)</tt>	Deprecated use pivot_table instead.
<tt style='background-color:#E8E8E8;'> tseries. <a href=' /tseries/util.py#L89'>isleapyear</a>(year)</tt>	Returns true if year is a leap year.
<tt style='background-color:#E8E8E8;'> tseries.Resolution <a href=' /tseries/frequencies.py#L109'>get_str</a>(cls,reso)</tt>	Return resolution str against resolution code.
<tt style='background-color:#E8E8E8;'> tseries.Resolution <a href=' /tseries/frequencies.py#L121'>get_reso</a>(cls,resostr)</tt>	Return resolution str against resolution code.
<tt style='background-color:#E8E8E8;'> tseries.Resolution <a href=' /tseries/frequencies.py#L136'>get_freq_group</a>(cls,resostr)</tt>	Return frequency str against resolution str.
<tt style='background-color:#E8E8E8;'> tseries.Resolution <a href=' /tseries/frequencies.py#L148'>get_freq</a>(cls,resostr)</tt>	Return frequency str against resolution str.
<tt style='background-color:#E8E8E8;'> tseries.Resolution <a href=' /tseries/frequencies.py#L160'>get_str_from_freq</a>(cls,freq)</tt>	Return resolution str against frequency str.
<tt style='background-color:#E8E8E8;'> tseries.Resolution <a href=' /tseries/frequencies.py#L172'>get_reso_from_freq</a>(cls,freq)</tt>	Return resolution code against frequency str.
<tt style='background-color:#E8E8E8;'> tseries.Resolution <a href=' /tseries/frequencies.py#L187'>get_stride_from_decimal</a>(cls,value,freq)</tt>	Convert freq with decimal stride into a higher freq with integer stride parameters.
<tt style='background-color:#E8E8E8;'> tseries. <a href=' /tseries/frequencies.py#L229'>get_to_timestamp_base</a>(base)</tt>	Return frequency code group used for base of to_timestamp against frequency code.
<tt style='background-color:#E8E8E8;'> tseries. <a href=' /tseries/frequencies.py#L257'>get_freq_group</a>(freq)</tt>	Return frequency code group of given frequency str or offset.
<tt style='background-color:#E8E8E8;'> tseries. <a href=' /tseries/frequencies.py#L282'>get_freq</a>(freq)</tt>	Return frequency code of given frequency str.
<tt style='background-color:#E8E8E8;'> tseries. <a href=' /tseries/frequencies.py#L301'>get_freq_code</a>(freqstr)</tt>	Return freq str or tuple to freq code and stride mult.
<tt style='background-color:#E8E8E8;'> tseries. <a href=' /tseries/frequencies.py#L420'>get_period_alias</a>(offset_str)</tt>	Alias to closest period strings bq->q etc.
<tt style='background-color:#E8E8E8;'> tseries. <a href=' /tseries/frequencies.py#L454'>to_offset</a>(freq)</tt>	Return dateoffset object from string or tuple representation or datetime.
<tt style='background-color:#E8E8E8;'> tseries. <a href=' /tseries/frequencies.py#L571'>_base_and_stride</a>(freqstr)</tt>	Return base freq and stride info from string representation.
<tt style='background-color:#E8E8E8;'> tseries. <a href=' /tseries/frequencies.py#L596'>get_base_alias</a>(freqstr)</tt>	Returns the base frequency alias e g '5d' -> 'd'.
<tt style='background-color:#E8E8E8;'> tseries. <a href=' /tseries/frequencies.py#L606'>get_offset</a>(name)</tt>	Return dateoffset object associated with rule name.
<tt style='background-color:#E8E8E8;'> tseries. <a href=' /tseries/frequencies.py#L640'>get_offset_name</a>(offset)</tt>	Return rule name associated with a dateoffset object.
<tt style='background-color:#E8E8E8;'> tseries. <a href=' /tseries/frequencies.py#L654'>get_standard_freq</a>(freq)</tt>	Return the standardized frequency string.
<tt style='background-color:#E8E8E8;'> tseries. <a href=' /tseries/frequencies.py#L749'>infer_freq</a>(index,warn)</tt>	Infer the most likely frequency given the input index if the frequency is.
<tt style='background-color:#E8E8E8;'> tseries. <a href=' /tseries/frequencies.py#L1058'>_maybe_coerce_freq</a>(code)</tt>	We might need to coerce a code to a rule_code.
<tt style='background-color:#E8E8E8;'> tseries. <a href=' /tseries/frequencies.py#L1078'>is_subperiod</a>(source,target)</tt>	Returns true if downsampling is possible between source and target.
<tt style='background-color:#E8E8E8;'> tseries. <a href=' /tseries/frequencies.py#L1131'>is_superperiod</a>(source,target)</tt>	Returns true if upsampling is possible between source and target.
<tt style='background-color:#E8E8E8;'> tseries.DateOffset <a href=' /tseries/offsets.py#L244'>apply_index</a>(i)</tt>	Vectorized apply of dateoffset to datetimeindex raises notimplentederror for offsets without a.
<tt style='background-color:#E8E8E8;'> tseries.DateOffset <a href=' /tseries/offsets.py#L421'>rollback</a>(dt)</tt>	Roll provided date backward to next offset only if not on offset.
<tt style='background-color:#E8E8E8;'> tseries.DateOffset <a href=' /tseries/offsets.py#L428'>rollforward</a>(dt)</tt>	Roll provided date forward to next offset only if not on offset.
<tt style='background-color:#E8E8E8;'> tseries.DateOffset <a href=' /tseries/offsets.py#L450'>_beg_apply_index</a>(i,freq)</tt>	Offsets index to beginning of period frequency.
<tt style='background-color:#E8E8E8;'> tseries.DateOffset <a href=' /tseries/offsets.py#L468'>_end_apply_index</a>(i,freq)</tt>	Offsets index to end of period frequency.
<tt style='background-color:#E8E8E8;'> tseries.BusinessMixin <a href=' /tseries/offsets.py#L555'>__getstate__</a>()</tt>	Return a pickleable state.
<tt style='background-color:#E8E8E8;'> tseries.BusinessMixin <a href=' /tseries/offsets.py#L570'>__setstate__</a>(state)</tt>	Reconstruct an instance from a pickled state.
<tt style='background-color:#E8E8E8;'> tseries.BusinessHourMixin <a href=' /tseries/offsets.py#L738'>_next_opening_time</a>(other)</tt>	If n is positive return tomorrow's business day opening time.
<tt style='background-color:#E8E8E8;'> tseries.BusinessHourMixin <a href=' /tseries/offsets.py#L756'>_prev_opening_time</a>(other)</tt>	If n is positive return yesterday's business day opening time.
<tt style='background-color:#E8E8E8;'> tseries.BusinessHourMixin <a href=' /tseries/offsets.py#L771'>_get_business_hours_by_sec</a>()</tt>	Return business hours in a day by seconds.
<tt style='background-color:#E8E8E8;'> tseries.BusinessHourMixin <a href=' /tseries/offsets.py#L786'>rollback</a>(dt)</tt>	Roll provided date backward to next offset only if not on offset.
<tt style='background-color:#E8E8E8;'> tseries.BusinessHourMixin <a href=' /tseries/offsets.py#L799'>rollforward</a>(dt)</tt>	Roll provided date forward to next offset only if not on offset.
<tt style='background-color:#E8E8E8;'> tseries.BusinessHourMixin <a href=' /tseries/offsets.py#L896'>_onOffset</a>(dt,businesshours)</tt>	Slight speedups using calcurated values.
<tt style='background-color:#E8E8E8;'> tseries.SemiMonthOffset <a href=' /tseries/offsets.py#L1215'>_apply</a>(n,other)</tt>	Handle specific apply logic for child classes.
<tt style='background-color:#E8E8E8;'> tseries.SemiMonthOffset <a href=' /tseries/offsets.py#L1245'>_get_roll</a>(i,before_day_of_month,after_day_of_month)</tt>	Return an array with the correct n for each date in i.
<tt style='background-color:#E8E8E8;'> tseries.SemiMonthOffset <a href=' /tseries/offsets.py#L1253'>_apply_index_days</a>(i,roll)</tt>	Apply the correct day for each date in i.
<tt style='background-color:#E8E8E8;'> tseries. <a href=' /tseries/offsets.py#L2850'>_get_firstbday</a>(wkday)</tt>	Wkday is the result of monthrange year month.
<tt style='background-color:#E8E8E8;'> tseries. <a href=' /tseries/offsets.py#L2864'>generate_range</a>(start,end,periods,offset)</tt>	Generates a sequence of dates corresponding to the specified time offset.
<tt style='background-color:#E8E8E8;'> tseries. <a href=' /tseries/holiday.py#L11'>next_monday</a>(dt)</tt>	If holiday falls on saturday use following monday instead.
<tt style='background-color:#E8E8E8;'> tseries. <a href=' /tseries/holiday.py#L23'>next_monday_or_tuesday</a>(dt)</tt>	For second holiday of two adjacent ones!.
<tt style='background-color:#E8E8E8;'> tseries. <a href=' /tseries/holiday.py#L38'>previous_friday</a>(dt)</tt>	If holiday falls on saturday or sunday use previous friday instead.
<tt style='background-color:#E8E8E8;'> tseries. <a href=' /tseries/holiday.py#L49'>sunday_to_monday</a>(dt)</tt>	If holiday falls on sunday use day thereafter monday instead.
<tt style='background-color:#E8E8E8;'> tseries. <a href=' /tseries/holiday.py#L58'>weekend_to_monday</a>(dt)</tt>	If holiday falls on sunday or saturday use day thereafter monday instead.
<tt style='background-color:#E8E8E8;'> tseries. <a href=' /tseries/holiday.py#L71'>nearest_workday</a>(dt)</tt>	If holiday falls on saturday use day before friday instead if holiday falls on sunday use day thereafter monday instead.
<tt style='background-color:#E8E8E8;'> tseries. <a href=' /tseries/holiday.py#L83'>next_workday</a>(dt)</tt>	Returns next weekday used for observances.
<tt style='background-color:#E8E8E8;'> tseries. <a href=' /tseries/holiday.py#L94'>previous_workday</a>(dt)</tt>	Returns previous weekday used for observances.
<tt style='background-color:#E8E8E8;'> tseries. <a href=' /tseries/holiday.py#L105'>before_nearest_workday</a>(dt)</tt>	Returns previous workday after nearest workday.
<tt style='background-color:#E8E8E8;'> tseries. <a href=' /tseries/holiday.py#L112'>after_nearest_workday</a>(dt)</tt>	Returns next workday after nearest workday.
<tt style='background-color:#E8E8E8;'> tseries.Holiday <a href=' /tseries/holiday.py#L189'>dates</a>(start_date,end_date,return_name)</tt>	Calculate holidays observed between start date and end date parameters.
<tt style='background-color:#E8E8E8;'> tseries.Holiday <a href=' /tseries/holiday.py#L232'>_reference_dates</a>(start_date,end_date)</tt>	Get reference dates for the holiday.
<tt style='background-color:#E8E8E8;'> tseries.Holiday <a href=' /tseries/holiday.py#L260'>_apply_rule</a>(dates)</tt>	Apply the given offset/observance to a datetimeindex of dates.
<tt style='background-color:#E8E8E8;'> tseries. <a href=' /tseries/holiday.py#L301'>get_calendar</a>(name)</tt>	Return an instance of a calendar based on its name.
<tt style='background-color:#E8E8E8;'> tseries.AbstractHolidayCalendar <a href=' /tseries/holiday.py#L333'>__init__</a>(name,rules)</tt>	Initializes holiday object with a given set a rules normally.
<tt style='background-color:#E8E8E8;'> tseries.AbstractHolidayCalendar <a href=' /tseries/holiday.py#L360'>holidays</a>(start,end,return_name)</tt>	Returns a curve with holidays between start_date and end_date parameters.
<tt style='background-color:#E8E8E8;'> tseries.AbstractHolidayCalendar <a href=' /tseries/holiday.py#L412'>merge_class</a>(base,other)</tt>	Merge holiday calendars together the base calendar.
<tt style='background-color:#E8E8E8;'> tseries.AbstractHolidayCalendar <a href=' /tseries/holiday.py#L447'>merge</a>(other,inplace)</tt>	Merge holiday calendars together the caller's class.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/testing.py#L108'>reset_display_options</a>()</tt>	Reset the display options for printing and representing objects.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/testing.py#L116'>round_trip_pickle</a>(obj,path)</tt>	Pickle an object and then read it again.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/testing.py#L140'>assert_almost_equal</a>(left,right,check_exact,check_dtype)</tt>	Check that left and right index are equal.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/testing.py#L199'>_check_isinstance</a>(left,right,cls)</tt>	Helper method for our assert_* methods that ensures that the two objects being compared have the right type before.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/testing.py#L241'>rands_array</a>(nchars,size,dtype)</tt>	Generate an array of byte strings.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/testing.py#L251'>randu_array</a>(nchars,size,dtype)</tt>	Generate an array of unicode strings.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/testing.py#L261'>rands</a>(nchars)</tt>	Generate one random byte string.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/testing.py#L271'>randu</a>(nchars)</tt>	Generate one random unicode string.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/testing.py#L297'>mplskip</a>(cls)</tt>	Skip a testcase instance if matplotlib isn't installed.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/testing.py#L416'>_incompat_bottleneck_version</a>(method)</tt>	Skip if we have bottleneck installed and its >= 1.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/testing.py#L483'>check_output</a>()</tt>	Run command with arguments and return its output as a byte string.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/testing.py#L527'>get_locales</a>(prefix,normalize,locale_getter)</tt>	Get all the locales that are available on the system.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/testing.py#L584'>set_locale</a>(new_locale,lc_var)</tt>	Context manager for temporarily setting a locale.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/testing.py#L619'>_can_set_locale</a>(lc)</tt>	Check to see if we can set a locale without throwing an exception.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/testing.py#L641'>_valid_locales</a>(locales,normalize)</tt>	Return a list of normalized locales that do not throw an exception when set.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/testing.py#L668'>capture_stdout</a>(f)</tt>	Decorator to capture stdout in a buffer so that it can be checked or suppressed during testing.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/testing.py#L716'>capture_stderr</a>(f)</tt>	Decorator to capture stderr in a buffer so that it can be checked or suppressed during testing.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/testing.py#L796'>ensure_clean</a>(filename,return_filelike)</tt>	Gets a temporary path and agrees to remove on close.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/testing.py#L844'>get_data_path</a>(f)</tt>	Return the path of a data file these are relative to the current test directory.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/testing.py#L857'>equalContents</a>(arr1,arr2)</tt>	Checks if the set of unique elements of arr1 and arr2 are equivalent.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/testing.py#L863'>assert_index_equal</a>(left,right,exact,check_names)</tt>	Check that left and right index are equal.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/testing.py#L970'>assert_class_equal</a>(left,right,exact,obj)</tt>	Checks classes are equal.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/testing.py#L998'>assert_attr_equal</a>(attr,left,right,obj)</tt>	Checks attributes are equal both objects must have attribute.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/testing.py#L1063'>assert_categorical_equal</a>(left,right,check_dtype,obj)</tt>	Test that categoricals are equivalent.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/testing.py#L1119'>assert_numpy_array_equal</a>(left,right,strict_nan,check_dtype)</tt>	Checks that 'np ndarray' is equivalent.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/testing.py#L1193'>assert_series_equal</a>(left,right,check_dtype,check_index_type)</tt>	Check that left and right series are equal.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/testing.py#L1302'>assert_frame_equal</a>(left,right,check_dtype,check_index_type)</tt>	Check that left and right dataframe are equal.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/testing.py#L1413'>assert_panelnd_equal</a>(left,right,check_dtype,check_panel_type)</tt>	Check that left and right panels are equal.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/testing.py#L1486'>assert_sp_array_equal</a>(left,right,check_dtype)</tt>	Check that the left and right sparsearray are equal.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/testing.py#L1517'>assert_sp_series_equal</a>(left,right,check_dtype,exact_indices)</tt>	Check that the left and right sparseseries are equal.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/testing.py#L1555'>assert_sp_frame_equal</a>(left,right,check_dtype,exact_indices)</tt>	Check that the left and right sparsedataframe are equal.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/testing.py#L1619'>assert_copy</a>(iter1,iter2)</tt>	Iter1 iter2 iterables that produce elements comparable with assert_almost_equal.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/testing.py#L1653'>makeCategoricalIndex</a>(k,n,name)</tt>	Make a length k index or n categories.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/testing.py#L1659'>makeIntervalIndex</a>(k,name)</tt>	Make a length k intervalindex.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/testing.py#L1706'>all_index_generator</a>(k)</tt>	Generator which can be iterated over to get instances of all the various index classes.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/testing.py#L1722'>all_timeseries_index_generator</a>(k)</tt>	Generator which can be iterated over to get instances of all the classes which represent time-seires.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/testing.py#L1830'>makeCustomIndex</a>(nentries,nlevels,prefix,names)</tt>	Create an index/multindex with given dimensions levels names etc' nentries - number of entries in index.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/testing.py#L1921'>makeCustomDataframe</a>(nrows,ncols,c_idx_names,r_idx_names)</tt>	Nrows ncols - number of data rows/cols c_idx_names idx_names - false/true/list of strings yields no names.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/testing.py#L2097'>skip_if_no_package</a>(pkg_name,min_version,max_version,app)</tt>	Check that the min/max version of the required package is installed.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/testing.py#L2148'>optional_args</a>(decorator)</tt>	Allows a decorator to take optional positional and keyword arguments.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/testing.py#L2216'>can_connect</a>(url,error_classes)</tt>	Try to connect to the given url true if succeeds false if ioerror.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/testing.py#L2240'>network</a>(t,url,raise_on_error,check_before_test)</tt>	Label a test as requiring network connection and if an error is encountered only raise if it does not find a network connection.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/testing.py#L2404'>stdin_encoding</a>(encoding)</tt>	Context manager for running bits of code while emulating an arbitrary stdin encoding.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/testing.py#L2426'>assert_raises_regex</a>(_exception,_regexp,_callable)</tt>	Check that the specified exception is raised and that the error message matches a given regular expression pattern.
<tt style='background-color:#E8E8E8;'> util._AssertRaisesContextmanager <a href=' /util/testing.py#L2483'>__init__</a>(exception,regexp)</tt>	Initialize an _assertraisescontextmanager instance.
<tt style='background-color:#E8E8E8;'> util._AssertRaisesContextmanager <a href=' /util/testing.py#L2514'>exception_matches</a>(exc_type,exc_value,trace_back)</tt>	Check that the exception raised matches the expected exception and expected error message regular expression.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/testing.py#L2555'>assert_produces_warning</a>(expected_warning,filter_level,clear,check_stacklevel)</tt>	Context manager for running code that expects to raise or not raise warnings.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/testing.py#L2668'>test_parallel</a>(num_threads,kwargs_list)</tt>	Decorator to run the same function multiple times in parallel.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/testing.py#L2770'>patch</a>(ob,attr,value)</tt>	Temporarily patch an attribute of an object.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/testing.py#L2822'>set_timezone</a>(tz)</tt>	Context manager for temporarily setting a timezone.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/terminal.py#L21'>get_terminal_size</a>()</tt>	Detect terminal size and return tuple = width height.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/print_versions.py#L11'>get_sys_info</a>()</tt>	Returns system information as a dict.
<tt style='background-color:#E8E8E8;'> util.TablePlotter <a href=' /util/doctools.py#L17'>_shape</a>(df)</tt>	Calcurate table chape considering index levels.
<tt style='background-color:#E8E8E8;'> util.TablePlotter <a href=' /util/doctools.py#L22'>_get_cells</a>(left,right,vertical)</tt>	Calcurate appropriate figure size based on left and right data.
<tt style='background-color:#E8E8E8;'> util.TablePlotter <a href=' /util/doctools.py#L37'>plot</a>(left,right,labels,vertical)</tt>	Plot left / right dataframes in specified layout.
<tt style='background-color:#E8E8E8;'> util.TablePlotter <a href=' /util/doctools.py#L97'>_conv</a>(data)</tt>	Convert each input to appropriate for table outplot.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/decorators.py#L19'>deprecate_kwarg</a>(old_arg_name,new_arg_name,mapping,stacklevel)</tt>	Decorator to deprecate a keyword argument of a function parameters.
<tt style='background-color:#E8E8E8;'> util.Substitution <a href=' /util/decorators.py#L139'>update</a>()</tt>	Assume self params is a dict and update it with supplied args.
<tt style='background-color:#E8E8E8;'> util.Substitution <a href=' /util/decorators.py#L143'>from_params</a>(cls,params)</tt>	In the case where the params is a mutable sequence list or dictionary and it may change before this class is called one may explicitly use a.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/decorators.py#L198'>make_signature</a>(func)</tt>	Returns a string repr of the arg list of a func call with any defaults.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/validators.py#L9'>_check_arg_length</a>(fname,args,max_fname_arg_count,compat_args)</tt>	Checks whether 'args' has length of at most 'compat_args' raises.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/validators.py#L31'>_check_for_default_values</a>(fname,arg_val_dict,compat_args)</tt>	Check that the keys in arg_val_dict are mapped to their default values as specified in compat_args.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/validators.py#L71'>validate_args</a>(fname,args,max_fname_arg_count,compat_args)</tt>	Checks whether the length of the *args argument passed into a function has at most len(compat_args) arguments and whether or not all of these.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/validators.py#L113'>_check_for_invalid_keys</a>(fname,kwargs,compat_args)</tt>	Checks whether 'kwargs' contains any keys that are not in 'compat_args' and raises a typeerror if there is one.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/validators.py#L129'>validate_kwargs</a>(fname,kwargs,compat_args)</tt>	Checks whether parameters passed to the **kwargs argument in a function fname are valid parameters as specified in *compat_args.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/validators.py#L159'>validate_args_and_kwargs</a>(fname,args,kwargs,max_fname_arg_count)</tt>	Checks whether parameters passed to the *args and **kwargs argument in a function fname are valid parameters as specified in *compat_args.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/validators.py#L220'>validate_bool_kwarg</a>(value,arg_name)</tt>	Ensures that argument passed in arg_name is of type bool.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/hashing.py#L51'>hash_pandas_object</a>(obj,index,encoding,hash_key)</tt>	Return a data hash of the index/series/dataframe.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/hashing.py#L122'>hash_tuples</a>(vals,encoding,hash_key)</tt>	Hash an multiindex / list-of-tuples efficiently.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/hashing.py#L168'>_hash_categorical</a>(c,encoding,hash_key)</tt>	Hash a categorical by hashing its categories and then mapping the codes.
<tt style='background-color:#E8E8E8;'> util. <a href=' /util/hashing.py#L205'>hash_array</a>(vals,encoding,hash_key,categorize)</tt>	Given a 1d array return an array of deterministic integers.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/pytables.py#L61'>_ensure_decoded</a>(s)</tt>	If we have bytes decode them to unicode.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/pytables.py#L79'>_ensure_term</a>(where,scope_level)</tt>	Ensure that the where is a term or a list of term.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/pytables.py#L255'>to_hdf</a>(path_or_buf,key,value,mode)</tt>	Store this object close it if we opened it.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/pytables.py#L273'>read_hdf</a>(path_or_buf,key)</tt>	Read from the store close it if we opened it retrieve pandas object stored in file optionally based on where.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/pytables.py#L369'>_is_metadata_of</a>(group,parent_group)</tt>	Check if a given group is a metadata group for a given parent_group.
<tt style='background-color:#E8E8E8;'> io.HDFStore <a href=' /io/pytables.py#L448'>root</a>()</tt>	Return the root node.
<tt style='background-color:#E8E8E8;'> io.HDFStore <a href=' /io/pytables.py#L467'>__getattr__</a>(name)</tt>	Allow attribute access to get stores.
<tt style='background-color:#E8E8E8;'> io.HDFStore <a href=' /io/pytables.py#L477'>__contains__</a>(key)</tt>	Check for existance of this key.
<tt style='background-color:#E8E8E8;'> io.HDFStore <a href=' /io/pytables.py#L525'>keys</a>()</tt>	Return a potentially unordered list of the keys corresponding to the objects stored in the hdfstore.
<tt style='background-color:#E8E8E8;'> io.HDFStore <a href=' /io/pytables.py#L536'>items</a>()</tt>	Iterate on key->group.
<tt style='background-color:#E8E8E8;'> io.HDFStore <a href=' /io/pytables.py#L545'>open</a>(mode)</tt>	Open the file in the specified mode parameters.
<tt style='background-color:#E8E8E8;'> io.HDFStore <a href=' /io/pytables.py#L620'>close</a>()</tt>	Close the pytables file handle.
<tt style='background-color:#E8E8E8;'> io.HDFStore <a href=' /io/pytables.py#L628'>is_open</a>()</tt>	Return a boolean indicating whether the file is open.
<tt style='background-color:#E8E8E8;'> io.HDFStore <a href=' /io/pytables.py#L637'>flush</a>(fsync)</tt>	Force all buffered modifications to be written to disk.
<tt style='background-color:#E8E8E8;'> io.HDFStore <a href=' /io/pytables.py#L661'>get</a>(key)</tt>	Retrieve pandas object stored in file.
<tt style='background-color:#E8E8E8;'> io.HDFStore <a href=' /io/pytables.py#L678'>select</a>(key,where,start,stop)</tt>	Retrieve pandas object stored in file optionally based on where.
<tt style='background-color:#E8E8E8;'> io.HDFStore <a href=' /io/pytables.py#L724'>select_as_coordinates</a>(key,where,start,stop)</tt>	Return the selection as an index.
<tt style='background-color:#E8E8E8;'> io.HDFStore <a href=' /io/pytables.py#L740'>select_column</a>(key,column)</tt>	Return a single column from the table this is generally only useful to.
<tt style='background-color:#E8E8E8;'> io.HDFStore <a href=' /io/pytables.py#L760'>select_as_multiple</a>(keys,where,selector,columns)</tt>	Retrieve pandas objects from multiple tables.
<tt style='background-color:#E8E8E8;'> io.HDFStore <a href=' /io/pytables.py#L843'>put</a>(key,value,format,append)</tt>	Store object in hdfstore parameters.
<tt style='background-color:#E8E8E8;'> io.HDFStore <a href=' /io/pytables.py#L873'>remove</a>(key,where,start,stop)</tt>	Remove pandas object partially by specifying the where condition.
<tt style='background-color:#E8E8E8;'> io.HDFStore <a href=' /io/pytables.py#L923'>append</a>(key,value,format,append)</tt>	Append to table in file node must already exist and be table.
<tt style='background-color:#E8E8E8;'> io.HDFStore <a href=' /io/pytables.py#L970'>append_to_multiple</a>(d,value,selector,data_columns)</tt>	Append to multiple tables parameters.
<tt style='background-color:#E8E8E8;'> io.HDFStore <a href=' /io/pytables.py#L1052'>create_table_index</a>(key)</tt>	Create a pytables index on the table.
<tt style='background-color:#E8E8E8;'> io.HDFStore <a href=' /io/pytables.py#L1075'>groups</a>()</tt>	Return a list of all the top-level nodes (that are not themselves a.
<tt style='background-color:#E8E8E8;'> io.HDFStore <a href=' /io/pytables.py#L1089'>get_node</a>(key)</tt>	Return the node with the key or none if it does not exist.
<tt style='background-color:#E8E8E8;'> io.HDFStore <a href=' /io/pytables.py#L1099'>get_storer</a>(key)</tt>	Return the storer object for a key raise if not in the file.
<tt style='background-color:#E8E8E8;'> io.HDFStore <a href=' /io/pytables.py#L1108'>copy</a>(file,mode,propindexes,keys)</tt>	Copy the existing store to a new file upgrading in place parameters.
<tt style='background-color:#E8E8E8;'> io.HDFStore <a href=' /io/pytables.py#L1164'>_validate_format</a>(format,kwargs)</tt>	Validate / deprecate formats return the new kwargs.
<tt style='background-color:#E8E8E8;'> io.HDFStore <a href=' /io/pytables.py#L1177'>_create_storer</a>(group,format,value,append)</tt>	Return a suitable class to operate.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/pytables.py#L1324'>get_store</a>(path)</tt>	Backwards compatible alias for hdfstore.
<tt style='background-color:#E8E8E8;'> io.IndexCol <a href=' /io/pytables.py#L1475'>set_name</a>(name,kind_attr)</tt>	Set the name of this indexer.
<tt style='background-color:#E8E8E8;'> io.IndexCol <a href=' /io/pytables.py#L1484'>set_axis</a>(axis)</tt>	Set the axis over which i index.
<tt style='background-color:#E8E8E8;'> io.IndexCol <a href=' /io/pytables.py#L1490'>set_pos</a>(pos)</tt>	Set the position of this column in the table.
<tt style='background-color:#E8E8E8;'> io.IndexCol <a href=' /io/pytables.py#L1511'>__eq__</a>(other)</tt>	Compare 2 col items.
<tt style='background-color:#E8E8E8;'> io.IndexCol <a href=' /io/pytables.py#L1519'>is_indexed</a>()</tt>	Return whether i am an indexed column.
<tt style='background-color:#E8E8E8;'> io.IndexCol <a href=' /io/pytables.py#L1531'>infer</a>(handler)</tt>	Infer this column from the table create and return a new object.
<tt style='background-color:#E8E8E8;'> io.IndexCol <a href=' /io/pytables.py#L1540'>convert</a>(values,nan_rep,encoding)</tt>	Set the values from this selection take = take ownership.
<tt style='background-color:#E8E8E8;'> io.IndexCol <a href=' /io/pytables.py#L1568'>take_data</a>()</tt>	Return the values & release the memory.
<tt style='background-color:#E8E8E8;'> io.IndexCol <a href=' /io/pytables.py#L1581'>col</a>()</tt>	Return my current col description.
<tt style='background-color:#E8E8E8;'> io.IndexCol <a href=' /io/pytables.py#L1586'>cvalues</a>()</tt>	Return my cython values.
<tt style='background-color:#E8E8E8;'> io.IndexCol <a href=' /io/pytables.py#L1594'>maybe_set_size</a>(min_itemsize)</tt>	Maybe set a string col itemsize.
<tt style='background-color:#E8E8E8;'> io.IndexCol <a href=' /io/pytables.py#L1621'>validate_col</a>(itemsize)</tt>	Validate this column return the compared against itemsize.
<tt style='background-color:#E8E8E8;'> io.IndexCol <a href=' /io/pytables.py#L1648'>update_info</a>(info)</tt>	Set/update the info for this indexable with the key/value.
<tt style='background-color:#E8E8E8;'> io.IndexCol <a href=' /io/pytables.py#L1680'>set_info</a>(info)</tt>	Set my state from the passed info.
<tt style='background-color:#E8E8E8;'> io.IndexCol <a href=' /io/pytables.py#L1686'>get_attr</a>()</tt>	Set the kind for this colummn.
<tt style='background-color:#E8E8E8;'> io.IndexCol <a href=' /io/pytables.py#L1690'>set_attr</a>()</tt>	Set the kind for this colummn.
<tt style='background-color:#E8E8E8;'> io.IndexCol <a href=' /io/pytables.py#L1694'>read_metadata</a>(handler)</tt>	Retrieve the metadata for this columns.
<tt style='background-color:#E8E8E8;'> io.IndexCol <a href=' /io/pytables.py#L1698'>validate_metadata</a>(handler)</tt>	Validate that kind=category does not change the categories.
<tt style='background-color:#E8E8E8;'> io.IndexCol <a href=' /io/pytables.py#L1708'>write_metadata</a>(handler)</tt>	Set the meta data.
<tt style='background-color:#E8E8E8;'> io.GenericIndexCol <a href=' /io/pytables.py#L1722'>convert</a>(values,nan_rep,encoding)</tt>	Set the values from this selection take = take ownership.
<tt style='background-color:#E8E8E8;'> io.DataCol <a href=' /io/pytables.py#L1752'>create_for_block</a>(cls,i,name,cname)</tt>	Return a new datacol with the block i.
<tt style='background-color:#E8E8E8;'> io.DataCol <a href=' /io/pytables.py#L1796'>__eq__</a>(other)</tt>	Compare 2 col items.
<tt style='background-color:#E8E8E8;'> io.DataCol <a href=' /io/pytables.py#L1811'>take_data</a>()</tt>	Return the data & release the memory.
<tt style='background-color:#E8E8E8;'> io.DataCol <a href=' /io/pytables.py#L1816'>set_metadata</a>(metadata)</tt>	Record the metadata.
<tt style='background-color:#E8E8E8;'> io.DataCol <a href=' /io/pytables.py#L1850'>set_atom</a>(block,block_items,existing_col,min_itemsize)</tt>	Create and setup my atom from the block b.
<tt style='background-color:#E8E8E8;'> io.DataCol <a href=' /io/pytables.py#L1952'>get_atom_coltype</a>(kind)</tt>	Return the pytables column class for this column.
<tt style='background-color:#E8E8E8;'> io.DataCol <a href=' /io/pytables.py#L2043'>cvalues</a>()</tt>	Return my cython values.
<tt style='background-color:#E8E8E8;'> io.DataCol <a href=' /io/pytables.py#L2048'>validate_attr</a>(append)</tt>	Validate that we have the same order as the existing & same dtype.
<tt style='background-color:#E8E8E8;'> io.DataCol <a href=' /io/pytables.py#L2063'>convert</a>(values,nan_rep,encoding)</tt>	Set the data from this selection (and convert to the correct dtype.
<tt style='background-color:#E8E8E8;'> io.DataCol <a href=' /io/pytables.py#L2134'>get_attr</a>()</tt>	Get the data for this colummn.
<tt style='background-color:#E8E8E8;'> io.DataCol <a href=' /io/pytables.py#L2141'>set_attr</a>()</tt>	Set the data for this colummn.
<tt style='background-color:#E8E8E8;'> io.Fixed <a href=' /io/pytables.py#L2207'>set_version</a>()</tt>	Compute and set our version.
<tt style='background-color:#E8E8E8;'> io.Fixed <a href=' /io/pytables.py#L2227'>__unicode__</a>()</tt>	Return a pretty representation of myself.
<tt style='background-color:#E8E8E8;'> io.Fixed <a href=' /io/pytables.py#L2237'>set_object_info</a>()</tt>	Set my pandas type & version.
<tt style='background-color:#E8E8E8;'> io.Fixed <a href=' /io/pytables.py#L2283'>set_attrs</a>()</tt>	Set our object attributes.
<tt style='background-color:#E8E8E8;'> io.Fixed <a href=' /io/pytables.py#L2287'>get_attrs</a>()</tt>	Get our object attributes.
<tt style='background-color:#E8E8E8;'> io.Fixed <a href=' /io/pytables.py#L2291'>storable</a>()</tt>	Return my storable.
<tt style='background-color:#E8E8E8;'> io.Fixed <a href=' /io/pytables.py#L2304'>validate</a>(other)</tt>	Validate against an existing storable.
<tt style='background-color:#E8E8E8;'> io.Fixed <a href=' /io/pytables.py#L2310'>validate_version</a>(where)</tt>	Are we trying to operate on an old version?.
<tt style='background-color:#E8E8E8;'> io.Fixed <a href=' /io/pytables.py#L2314'>infer_axes</a>()</tt>	Infer the axes of my storer.
<tt style='background-color:#E8E8E8;'> io.Fixed <a href=' /io/pytables.py#L2332'>delete</a>(where,start,stop)</tt>	Support fully deleting the node in its entirety only - where.
<tt style='background-color:#E8E8E8;'> io.GenericFixed <a href=' /io/pytables.py#L2375'>validate_read</a>(kwargs)</tt>	Remove table keywords from kwargs and return.
<tt style='background-color:#E8E8E8;'> io.GenericFixed <a href=' /io/pytables.py#L2398'>set_attrs</a>()</tt>	Set our object attributes.
<tt style='background-color:#E8E8E8;'> io.GenericFixed <a href=' /io/pytables.py#L2402'>get_attrs</a>()</tt>	Retrieve our attributes.
<tt style='background-color:#E8E8E8;'> io.GenericFixed <a href=' /io/pytables.py#L2411'>read_array</a>(key,start,stop)</tt>	Read an array for the specified node (off of group.
<tt style='background-color:#E8E8E8;'> io.GenericFixed <a href=' /io/pytables.py#L2589'>write_array_empty</a>(key,value)</tt>	Write a 0-len array.
<tt style='background-color:#E8E8E8;'> io.GenericFixed <a href=' /io/pytables.py#L2598'>_is_empty_array</a>(shape)</tt>	Returns true if any axis is zero length.
<tt style='background-color:#E8E8E8;'> io.SparseFixed <a href=' /io/pytables.py#L2744'>validate_read</a>(kwargs)</tt>	We don't support start stop kwds in sparse.
<tt style='background-color:#E8E8E8;'> io.SparseFrameFixed <a href=' /io/pytables.py#L2796'>write</a>(obj)</tt>	Write it as a collection of individual sparse series.
<tt style='background-color:#E8E8E8;'> io.Table <a href=' /io/pytables.py#L2961'>__unicode__</a>()</tt>	Return a pretty representatgion of myself.
<tt style='background-color:#E8E8E8;'> io.Table <a href=' /io/pytables.py#L2976'>__getitem__</a>(c)</tt>	Return the axis for c.
<tt style='background-color:#E8E8E8;'> io.Table <a href=' /io/pytables.py#L2983'>validate</a>(other)</tt>	Validate against an existing table.
<tt style='background-color:#E8E8E8;'> io.Table <a href=' /io/pytables.py#L3010'>is_multi_index</a>()</tt>	The levels attribute is 1 or a list in the case of a multi-index.
<tt style='background-color:#E8E8E8;'> io.Table <a href=' /io/pytables.py#L3015'>validate_metadata</a>(existing)</tt>	Create / validate metadata.
<tt style='background-color:#E8E8E8;'> io.Table <a href=' /io/pytables.py#L3020'>validate_multiindex</a>(obj)</tt>	Validate that we can store the multi-index reset and return the.
<tt style='background-color:#E8E8E8;'> io.Table <a href=' /io/pytables.py#L3032'>nrows_expected</a>()</tt>	Based on our axes compute the expected nrows.
<tt style='background-color:#E8E8E8;'> io.Table <a href=' /io/pytables.py#L3037'>is_exists</a>()</tt>	Has this table been created.
<tt style='background-color:#E8E8E8;'> io.Table <a href=' /io/pytables.py#L3046'>table</a>()</tt>	Return the table group this is my storable.
<tt style='background-color:#E8E8E8;'> io.Table <a href=' /io/pytables.py#L3063'>ncols</a>()</tt>	The number of total columns in the values axes.
<tt style='background-color:#E8E8E8;'> io.Table <a href=' /io/pytables.py#L3072'>data_orientation</a>()</tt>	Return a tuple of my permutated axes non_indexable at the front.
<tt style='background-color:#E8E8E8;'> io.Table <a href=' /io/pytables.py#L3078'>queryables</a>()</tt>	Return a dict of the kinds allowable columns for this object.
<tt style='background-color:#E8E8E8;'> io.Table <a href=' /io/pytables.py#L3090'>index_cols</a>()</tt>	Return a list of my index cols.
<tt style='background-color:#E8E8E8;'> io.Table <a href=' /io/pytables.py#L3094'>values_cols</a>()</tt>	Return a list of my values cols.
<tt style='background-color:#E8E8E8;'> io.Table <a href=' /io/pytables.py#L3098'>_get_metadata_path</a>(key)</tt>	Return the metadata pathname for this key.
<tt style='background-color:#E8E8E8;'> io.Table <a href=' /io/pytables.py#L3103'>write_metadata</a>(key,values)</tt>	Write out a meta data array to the key as a fixed-format series.
<tt style='background-color:#E8E8E8;'> io.Table <a href=' /io/pytables.py#L3117'>read_metadata</a>(key)</tt>	Return the meta data array for this key.
<tt style='background-color:#E8E8E8;'> io.Table <a href=' /io/pytables.py#L3123'>set_info</a>()</tt>	Update our table index info.
<tt style='background-color:#E8E8E8;'> io.Table <a href=' /io/pytables.py#L3127'>set_attrs</a>()</tt>	Set our table type & indexables.
<tt style='background-color:#E8E8E8;'> io.Table <a href=' /io/pytables.py#L3140'>get_attrs</a>()</tt>	Retrieve our attributes.
<tt style='background-color:#E8E8E8;'> io.Table <a href=' /io/pytables.py#L3162'>validate_version</a>(where)</tt>	Are we trying to operate on an old version?.
<tt style='background-color:#E8E8E8;'> io.Table <a href=' /io/pytables.py#L3171'>validate_min_itemsize</a>(min_itemsize)</tt>	Validate the min_itemisze doesn't contain items that are not in the.
<tt style='background-color:#E8E8E8;'> io.Table <a href=' /io/pytables.py#L3191'>indexables</a>()</tt>	Create/cache the indexables if they don't exist.
<tt style='background-color:#E8E8E8;'> io.Table <a href=' /io/pytables.py#L3220'>create_index</a>(columns,optlevel,kind)</tt>	Create a pytables index on the specified columns note cannot index time64col() or complexcol currently.
<tt style='background-color:#E8E8E8;'> io.Table <a href=' /io/pytables.py#L3289'>read_axes</a>(where)</tt>	Create and return the axes sniffed from the table return boolean.
<tt style='background-color:#E8E8E8;'> io.Table <a href=' /io/pytables.py#L3312'>get_object</a>(obj)</tt>	Return the data for this obj.
<tt style='background-color:#E8E8E8;'> io.Table <a href=' /io/pytables.py#L3316'>validate_data_columns</a>(data_columns,min_itemsize)</tt>	Take the input data_columns and min_itemize and create a data.
<tt style='background-color:#E8E8E8;'> io.Table <a href=' /io/pytables.py#L3349'>create_axes</a>(axes,obj,validate,nan_rep)</tt>	Create and return the axes.
<tt style='background-color:#E8E8E8;'> io.Table <a href=' /io/pytables.py#L3560'>process_axes</a>(obj,columns)</tt>	Process axes filters.
<tt style='background-color:#E8E8E8;'> io.Table <a href=' /io/pytables.py#L3620'>create_description</a>(complib,complevel,fletcher32,expectedrows)</tt>	Create the description of the table from the axes & values.
<tt style='background-color:#E8E8E8;'> io.Table <a href=' /io/pytables.py#L3645'>read_coordinates</a>(where,start,stop)</tt>	Select coordinates row numbers from a table return the.
<tt style='background-color:#E8E8E8;'> io.Table <a href=' /io/pytables.py#L3670'>read_column</a>(column,where,start,stop)</tt>	Return a single column from the table generally only indexables.
<tt style='background-color:#E8E8E8;'> io.WORMTable <a href=' /io/pytables.py#L3715'>read</a>()</tt>	Read the indicies and the indexing array calculate offset rows and.
<tt style='background-color:#E8E8E8;'> io.WORMTable <a href=' /io/pytables.py#L3720'>write</a>()</tt>	Write in a format that we can search later on but cannot append to : write out the indicies and the values using _write_array.
<tt style='background-color:#E8E8E8;'> io.LegacyTable <a href=' /io/pytables.py#L3747'>read</a>(where,columns)</tt>	We have n indexable columns with an arbitrary number of data.
<tt style='background-color:#E8E8E8;'> io.AppendableTable <a href=' /io/pytables.py#L3901'>write_data</a>(chunksize,dropna)</tt>	We form the data into a 2-d including indexes values mask.
<tt style='background-color:#E8E8E8;'> io.AppendableFrameTable <a href=' /io/pytables.py#L4095'>get_object</a>(obj)</tt>	These are written transposed.
<tt style='background-color:#E8E8E8;'> io.AppendableSeriesTable <a href=' /io/pytables.py#L4165'>write</a>(obj,data_columns)</tt>	We are going to write this as a frame table.
<tt style='background-color:#E8E8E8;'> io.AppendableMultiSeriesTable <a href=' /io/pytables.py#L4198'>write</a>(obj)</tt>	We are going to write this as a frame table.
<tt style='background-color:#E8E8E8;'> io.GenericTable <a href=' /io/pytables.py#L4223'>get_attrs</a>()</tt>	Retrieve our attributes.
<tt style='background-color:#E8E8E8;'> io.GenericTable <a href=' /io/pytables.py#L4235'>indexables</a>()</tt>	Create the indexables from the table description.
<tt style='background-color:#E8E8E8;'> io.AppendablePanelTable <a href=' /io/pytables.py#L4301'>get_object</a>(obj)</tt>	These are written transposed.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/pytables.py#L4341'>_get_info</a>(info,name)</tt>	Get/create the info for this name.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/pytables.py#L4352'>_get_tz</a>(tz)</tt>	For a tz-aware type return an encoded zone.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/pytables.py#L4360'>_set_tz</a>(values,tz,preserve_UTC,coerce)</tt>	Coerce the values to a datetimeindex if tz is set.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/pytables.py#L4514'>_convert_string_array</a>(data,encoding,itemsize)</tt>	We take a string-like that is object dtype and coerce to a fixed size.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/pytables.py#L4543'>_unconvert_string_array</a>(data,nan_rep,encoding)</tt>	Inverse of _convert_string_array.
<tt style='background-color:#E8E8E8;'> io.Selection <a href=' /io/pytables.py#L4670'>generate</a>(where)</tt>	Where can be a : dict list tuple string.
<tt style='background-color:#E8E8E8;'> io.Selection <a href=' /io/pytables.py#L4692'>select</a>()</tt>	Generate the selection.
<tt style='background-color:#E8E8E8;'> io.Selection <a href=' /io/pytables.py#L4704'>select_coords</a>()</tt>	Generate the selection.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/packers.py#L120'>to_msgpack</a>(path_or_buf)</tt>	Msgpack serialize object to input file path this is an experimental library and the storage format.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/packers.py#L163'>read_msgpack</a>(path_or_buf,encoding,iterator)</tt>	Load msgpack pandas object from the specified file path.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/packers.py#L236'>dtype_for</a>(t)</tt>	Return my dtype mapping whether number or name.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/packers.py#L252'>c2f</a>(r,i,ctype_name)</tt>	Convert strings to complex number instance with specified numpy type.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/packers.py#L261'>convert</a>(values)</tt>	Convert the numpy values to a list.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/packers.py#L543'>decode</a>(obj)</tt>	Decoder for deserializing numpy data types.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/packers.py#L680'>pack</a>(o,default,encoding,unicode_errors)</tt>	Pack an object and return the packed bytes.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/packers.py#L694'>unpack</a>(packed,object_hook,list_hook,use_list)</tt>	Unpack a packed object return an iterator.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/stata.py#L189'>_stata_elapsed_date_to_datetime_vec</a>(dates,fmt)</tt>	Convert from sif to datetime http //www stata com/help cgi?datetime.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/stata.py#L350'>_datetime_to_stata_elapsed_vec</a>(dates,fmt)</tt>	Convert from datetime to sif http //www stata com/help cgi?datetime.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/stata.py#L490'>_cast_to_stata_types</a>(data)</tt>	Checks the dtypes of the columns of a pandas dataframe for compatibility with the data types and ranges supported by stata and.
<tt style='background-color:#E8E8E8;'> io.StataValueLabel <a href=' /io/stata.py#L639'>_encode</a>(s)</tt>	Python 3 compatability shim.
<tt style='background-color:#E8E8E8;'> io.StataReader <a href=' /io/stata.py#L997'>__enter__</a>()</tt>	Enter context manager.
<tt style='background-color:#E8E8E8;'> io.StataReader <a href=' /io/stata.py#L1001'>__exit__</a>(exc_type,exc_value,traceback)</tt>	Exit context manager.
<tt style='background-color:#E8E8E8;'> io.StataReader <a href=' /io/stata.py#L1005'>close</a>()</tt>	Close the handle if its open.
<tt style='background-color:#E8E8E8;'> io.StataReader <a href=' /io/stata.py#L1423'>get_chunk</a>(size)</tt>	Reads lines from stata file and returns as dataframe parameters.
<tt style='background-color:#E8E8E8;'> io.StataReader <a href=' /io/stata.py#L1676'>_do_convert_categoricals</a>(data,value_label_dict,lbllist,order_categoricals)</tt>	Converts categorical columns to categorical type.
<tt style='background-color:#E8E8E8;'> io.StataReader <a href=' /io/stata.py#L1710'>data_label</a>()</tt>	Returns data label of stata file.
<tt style='background-color:#E8E8E8;'> io.StataReader <a href=' /io/stata.py#L1714'>variable_labels</a>()</tt>	Returns variable labels as a dict associating each variable name.
<tt style='background-color:#E8E8E8;'> io.StataReader <a href=' /io/stata.py#L1720'>value_labels</a>()</tt>	Returns a dict associating each variable name a dict associating.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/stata.py#L1746'>_pad_bytes</a>(name,length)</tt>	Takes a char string and pads it with null bytes until it's length chars.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/stata.py#L1753'>_convert_datetime_to_stata_type</a>(fmt)</tt>	Converts from one of the stata date formats to a type in type_map.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/stata.py#L1779'>_dtype_to_stata_type</a>(dtype,column)</tt>	Converts dtype types to stata types returns the byte of the given ordinal.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/stata.py#L1817'>_dtype_to_default_stata_fmt</a>(dtype,column)</tt>	Maps numpy dtype to stata's default format for this type not terribly.
<tt style='background-color:#E8E8E8;'> io.StataWriter <a href=' /io/stata.py#L1936'>_write</a>(to_write)</tt>	Helper to call encode before writing to file for python 3 compat.
<tt style='background-color:#E8E8E8;'> io.StataWriter <a href=' /io/stata.py#L1946'>_prepare_categoricals</a>(data)</tt>	Check for categorical columns retain categorical information for.
<tt style='background-color:#E8E8E8;'> io.StataWriter <a href=' /io/stata.py#L1986'>_replace_nans</a>(data)</tt>	Checks floating point data columns for nans and replaces these with the generic stata for missing value.
<tt style='background-color:#E8E8E8;'> io.StataWriter <a href=' /io/stata.py#L2001'>_check_column_names</a>(data)</tt>	Checks column names to ensure that they are valid stata column names.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/common.py#L96'>_is_url</a>(url)</tt>	Check to see if a url has a valid protocol.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/common.py#L114'>_is_s3_url</a>(url)</tt>	Check for an s3 s3n or s3a url.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/common.py#L122'>_expand_user</a>(filepath_or_buffer)</tt>	Return the argument with an initial component of ~ or ~user replaced by that user's home directory.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/common.py#L148'>_stringify_path</a>(filepath_or_buffer)</tt>	Return the argument coerced to a string if it was a pathlib path.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/common.py#L167'>get_filepath_or_buffer</a>(filepath_or_buffer,encoding,compression)</tt>	If the filepath_or_buffer is a url translate and return the buffer.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/common.py#L215'>file_path_to_url</a>(path)</tt>	Converts an absolute native path to a file url.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/common.py#L238'>_infer_compression</a>(filepath_or_buffer,compression)</tt>	Get the compression method for filepath_or_buffer if compression='infer',.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/common.py#L288'>_get_handle</a>(path_or_buf,mode,encoding,compression)</tt>	Get file handle for given path/buffer and mode.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/html.py#L72'>_remove_whitespace</a>(s,regex)</tt>	Replace extra whitespace inside of a string with a single space.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/html.py#L91'>_get_skiprows</a>(skiprows)</tt>	Get an iterator given an integer slice or container.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/parsers.py#L382'>_read</a>(obj)</tt>	Try to read from a url file or string.
<tt style='background-color:#E8E8E8;'> io._HtmlFrameParser <a href=' /io/html.py#L200'>_parse_raw_data</a>(rows)</tt>	Parse the raw data into a list of lists.
<tt style='background-color:#E8E8E8;'> io._HtmlFrameParser <a href=' /io/html.py#L224'>_text_getter</a>(obj)</tt>	Return the text of an individual dom node.
<tt style='background-color:#E8E8E8;'> io._HtmlFrameParser <a href=' /io/html.py#L239'>_parse_td</a>(obj)</tt>	Return the td elements from a row element.
<tt style='background-color:#E8E8E8;'> io._HtmlFrameParser <a href=' /io/html.py#L253'>_parse_tables</a>(doc,match,attrs)</tt>	Return all tables from the parsed dom.
<tt style='background-color:#E8E8E8;'> io._HtmlFrameParser <a href=' /io/html.py#L280'>_parse_tr</a>(table)</tt>	Return the list of row elements from the parsed table element.
<tt style='background-color:#E8E8E8;'> io._HtmlFrameParser <a href=' /io/html.py#L295'>_parse_thead</a>(table)</tt>	Return the header of a table.
<tt style='background-color:#E8E8E8;'> io._HtmlFrameParser <a href=' /io/html.py#L310'>_parse_tbody</a>(table)</tt>	Return the body of the table.
<tt style='background-color:#E8E8E8;'> io._HtmlFrameParser <a href=' /io/html.py#L325'>_parse_tfoot</a>(table)</tt>	Return the footer of the table if any.
<tt style='background-color:#E8E8E8;'> io._HtmlFrameParser <a href=' /io/html.py#L340'>_build_doc</a>()</tt>	Return a tree-like object that can be used to iterate over the dom.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/html.py#L458'>_build_xpath_expr</a>(attrs)</tt>	Build an xpath expression to simulate bs4's ability to pass in kwargs to search for attributes when using the lxml parser.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/html.py#L651'>_parser_dispatch</a>(flavor)</tt>	Choose the parser based on the input flavor.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/html.py#L754'>read_html</a>(io,match,flavor,header)</tt>	Read html tables into a list of dataframe objects.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/excel.py#L151'>register_writer</a>(klass)</tt>	Adds engine to the excel writer registry you must use this method to.
<tt style='background-color:#E8E8E8;'> io.ExcelFile <a href=' /io/excel.py#L262'>parse</a>(sheetname,header,skiprows,skip_footer)</tt>	Parse specified sheet s into a dataframe equivalent to read_excel(excelfile.
<tt style='background-color:#E8E8E8;'> io.ExcelFile <a href=' /io/excel.py#L531'>close</a>()</tt>	Close io if necessary.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/excel.py#L567'>_fill_mi_header</a>(row,control_row)</tt>	Forward fills blank entries in row but only inside the same parent index used for creating headers in multiindex.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/excel.py#L600'>_pop_header_name</a>(row,index_col)</tt>	(header new_data) for header rows in multiindex parsing.
<tt style='background-color:#E8E8E8;'> io.ExcelWriter <a href=' /io/excel.py#L698'>supported_extensions</a>()</tt>	Extensions that writer engine supports.
<tt style='background-color:#E8E8E8;'> io.ExcelWriter <a href=' /io/excel.py#L703'>engine</a>()</tt>	Name of engine.
<tt style='background-color:#E8E8E8;'> io.ExcelWriter <a href=' /io/excel.py#L708'>write_cells</a>(cells,sheet_name,startrow,startcol)</tt>	Write given formated cells into excel an excel sheet parameters.
<tt style='background-color:#E8E8E8;'> io.ExcelWriter <a href=' /io/excel.py#L727'>save</a>()</tt>	Save workbook to disk.
<tt style='background-color:#E8E8E8;'> io.ExcelWriter <a href=' /io/excel.py#L765'>check_extension</a>(cls,ext)</tt>	Checks that path's extension against the writer's supported extensions.
<tt style='background-color:#E8E8E8;'> io.ExcelWriter <a href=' /io/excel.py#L785'>close</a>()</tt>	Synonym for save to make it more file-like.
<tt style='background-color:#E8E8E8;'> io._Openpyxl1Writer <a href=' /io/excel.py#L817'>save</a>()</tt>	Save workbook to disk.
<tt style='background-color:#E8E8E8;'> io._Openpyxl1Writer <a href=' /io/excel.py#L885'>_convert_to_style</a>(cls,style_dict)</tt>	Converts a style_dict to an openpyxl style object.
<tt style='background-color:#E8E8E8;'> io._Openpyxl20Writer <a href=' /io/excel.py#L984'>_convert_to_style_kwargs</a>(cls,style_dict)</tt>	Convert a style_dict to a set of kwargs suitable for initializing or updating-on-copy an openpyxl v2 style object.
<tt style='background-color:#E8E8E8;'> io._Openpyxl20Writer <a href=' /io/excel.py#L1023'>_convert_to_color</a>(cls,color_spec)</tt>	Convert color_spec to an openpyxl v2 color object parameters.
<tt style='background-color:#E8E8E8;'> io._Openpyxl20Writer <a href=' /io/excel.py#L1051'>_convert_to_font</a>(cls,font_dict)</tt>	Convert font_dict to an openpyxl v2 font object parameters.
<tt style='background-color:#E8E8E8;'> io._Openpyxl20Writer <a href=' /io/excel.py#L1099'>_convert_to_stop</a>(cls,stop_seq)</tt>	Convert stop_seq to a list of openpyxl v2 color objects suitable for initializing the gradientfill stop parameter.
<tt style='background-color:#E8E8E8;'> io._Openpyxl20Writer <a href=' /io/excel.py#L1116'>_convert_to_fill</a>(cls,fill_dict)</tt>	Convert fill_dict to an openpyxl v2 fill object parameters.
<tt style='background-color:#E8E8E8;'> io._Openpyxl20Writer <a href=' /io/excel.py#L1180'>_convert_to_side</a>(cls,side_spec)</tt>	Convert side_spec to an openpyxl v2 side object parameters.
<tt style='background-color:#E8E8E8;'> io._Openpyxl20Writer <a href=' /io/excel.py#L1215'>_convert_to_border</a>(cls,border_dict)</tt>	Convert border_dict to an openpyxl v2 border object parameters.
<tt style='background-color:#E8E8E8;'> io._Openpyxl20Writer <a href=' /io/excel.py#L1258'>_convert_to_alignment</a>(cls,alignment_dict)</tt>	Convert alignment_dict to an openpyxl v2 alignment object parameters.
<tt style='background-color:#E8E8E8;'> io._Openpyxl20Writer <a href=' /io/excel.py#L1281'>_convert_to_number_format</a>(cls,number_format_dict)</tt>	Convert number_format_dict to an openpyxl v2 1 0 number format.
<tt style='background-color:#E8E8E8;'> io._Openpyxl20Writer <a href=' /io/excel.py#L1303'>_convert_to_protection</a>(cls,protection_dict)</tt>	Convert protection_dict to an openpyxl v2 protection object.
<tt style='background-color:#E8E8E8;'> io._XlwtWriter <a href=' /io/excel.py#L1416'>save</a>()</tt>	Save workbook to disk.
<tt style='background-color:#E8E8E8;'> io._XlwtWriter <a href=' /io/excel.py#L1471'>_style_to_xlwt</a>(cls,item,firstlevel,field_sep)</tt>	Helper which recursively generate an xlwt easy style string.
<tt style='background-color:#E8E8E8;'> io._XlwtWriter <a href=' /io/excel.py#L1505'>_convert_to_style</a>(cls,style_dict,num_format_str)</tt>	Converts a style_dict to an xlwt style object.
<tt style='background-color:#E8E8E8;'> io._XlsxWriter <a href=' /io/excel.py#L1546'>save</a>()</tt>	Save workbook to disk.
<tt style='background-color:#E8E8E8;'> io._XlsxWriter <a href=' /io/excel.py#L1599'>_convert_to_style</a>(style_dict,num_format_str)</tt>	Converts a style_dict to an xlsxwriter format object.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/gbq.py#L24'>read_gbq</a>(query,project_id,index_col,col_order)</tt>	Load data from google bigquery.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/clipboard.py#L6'>read_clipboard</a>(sep)</tt>	Read text from clipboard and pass to read_table see read_table for the.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/clipboard.py#L66'>to_clipboard</a>(obj,excel,sep)</tt>	Attempt to write text representation of object to the system clipboard the clipboard can be then pasted into excel for example.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/s3.py#L15'>_strip_schema</a>(url)</tt>	Returns the url without the s3 // part.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/sql.py#L44'>_validate_flavor_parameter</a>(flavor)</tt>	Checks whether a database 'flavor' was specified.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/sql.py#L91'>_convert_params</a>(sql,params)</tt>	Convert sql and params args to dbapi2 0 compliant format.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/sql.py#L122'>_parse_date_columns</a>(data_frame,parse_dates)</tt>	Force non-datetime columns to be read as such.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/sql.py#L152'>_wrap_result</a>(data,columns,index_col,coerce_float)</tt>	Wrap result set of query in a dataframe.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/sql.py#L167'>execute</a>(sql,con,cur,params)</tt>	Execute the given sql query using the provided connection object.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/sql.py#L198'>read_sql_table</a>(table_name,con,schema,index_col)</tt>	Read sql database table into a dataframe.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/sql.py#L273'>read_sql_query</a>(sql,con,index_col,coerce_float)</tt>	Read sql query into a dataframe.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/sql.py#L335'>read_sql</a>(sql,con,index_col,coerce_float)</tt>	Read sql query or database table into a dataframe.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/sql.py#L419'>to_sql</a>(frame,name,con,flavor)</tt>	Write records stored in a dataframe to a sql database.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/sql.py#L474'>has_table</a>(table_name,con,flavor,schema)</tt>	Check if database has named table.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/sql.py#L503'>_engine_builder</a>(con)</tt>	Returns a sqlalchemy engine from a uri if con is a string.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/sql.py#L521'>pandasSQL_builder</a>(con,flavor,schema,meta)</tt>	Convenience function to return the correct pandassql subclass based on the.
<tt style='background-color:#E8E8E8;'> io.SQLTable <a href=' /io/sql.py#L668'>_query_iterator</a>(result,chunksize,columns,coerce_float)</tt>	Return generator through chunked result set.
<tt style='background-color:#E8E8E8;'> io.SQLTable <a href=' /io/sql.py#L792'>_harmonize_columns</a>(parse_dates)</tt>	Make the dataframe's column types align with the sql table column types.
<tt style='background-color:#E8E8E8;'> io.SQLTable <a href=' /io/sql.py#L844'>_get_notnull_col_dtype</a>(col)</tt>	Infer datatype of the series col in case the dtype of col is 'object'.
<tt style='background-color:#E8E8E8;'> io.SQLDatabase <a href=' /io/sql.py#L976'>execute</a>()</tt>	Simple passthrough to sqlalchemy connectable.
<tt style='background-color:#E8E8E8;'> io.SQLDatabase <a href=' /io/sql.py#L980'>read_table</a>(table_name,index_col,coerce_float,parse_dates)</tt>	Read sql database table into a dataframe.
<tt style='background-color:#E8E8E8;'> io.SQLDatabase <a href=' /io/sql.py#L1029'>_query_iterator</a>(result,chunksize,columns,index_col)</tt>	Return generator through chunked result set.
<tt style='background-color:#E8E8E8;'> io.SQLDatabase <a href=' /io/sql.py#L1043'>read_query</a>(sql,index_col,coerce_float,parse_dates)</tt>	Read sql query into a dataframe.
<tt style='background-color:#E8E8E8;'> io.SQLDatabase <a href=' /io/sql.py#L1104'>to_sql</a>(frame,name,if_exists,index)</tt>	Write records stored in a dataframe to a sql database.
<tt style='background-color:#E8E8E8;'> io.SQLiteTable <a href=' /io/sql.py#L1296'>_create_table_setup</a>()</tt>	Return a list of sql statement that create a table reflecting the structure of a dataframe.
<tt style='background-color:#E8E8E8;'> io.SQLiteDatabase <a href=' /io/sql.py#L1418'>_query_iterator</a>(cursor,chunksize,columns,index_col)</tt>	Return generator through chunked result set.
<tt style='background-color:#E8E8E8;'> io.SQLiteDatabase <a href=' /io/sql.py#L1462'>to_sql</a>(frame,name,if_exists,index)</tt>	Write records stored in a dataframe to a sql database.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/sql.py#L1532'>get_schema</a>(frame,name,flavor,keys)</tt>	Get the sql db table schema for the given frame.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/feather_format.py#L36'>to_feather</a>(df,path)</tt>	Write a dataframe to the feather-format.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/feather_format.py#L84'>read_feather</a>(path)</tt>	Load a feather-format object from the file path.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/pickle.py#L10'>to_pickle</a>(obj,path,compression)</tt>	Pickle serialize object to input file path parameters.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/pickle.py#L35'>read_pickle</a>(path,compression)</tt>	Load pickled pandas object or any other pickled object from the specified file path.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/parsers.py#L352'>_validate_integer</a>(name,val,min_val)</tt>	Checks whether the 'name' parameter for parsing is either an integer or float that can safely be cast to an integer.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/parsers.py#L382'>_read</a>(filepath_or_buffer,kwds)</tt>	Generic reader of line files.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/parsers.py#L1026'>_evaluate_usecols</a>(usecols,names)</tt>	Check whether or not the 'usecols' parameter is a callable.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/parsers.py#L1040'>_validate_skipfooter_arg</a>(skipfooter)</tt>	Validate the 'skipfooter' parameter.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/parsers.py#L1071'>_validate_usecols_arg</a>(usecols)</tt>	Validate the 'usecols' parameter.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/parsers.py#L1111'>_validate_parse_dates_arg</a>(parse_dates)</tt>	Check whether or not the 'parse_dates' parameter is a non-boolean scalar.
<tt style='background-color:#E8E8E8;'> io.ParserBase <a href=' /io/parsers.py#L1223'>_extract_multi_indexer_columns</a>(header,index_names,col_names,passed_names)</tt>	Extract and return the names index_names col_names.
<tt style='background-color:#E8E8E8;'> io.ParserBase <a href=' /io/parsers.py#L1471'>_infer_types</a>(values,na_values,try_num_bool)</tt>	Infer types of values possibly casting.
<tt style='background-color:#E8E8E8;'> io.ParserBase <a href=' /io/parsers.py#L1518'>_cast_types</a>(values,cast_type,column)</tt>	Cast values to specified type parameters.
<tt style='background-color:#E8E8E8;'> io.CParserWrapper <a href=' /io/parsers.py#L1661'>_set_noconvert_columns</a>()</tt>	Set the columns that should not undergo dtype conversions.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/parsers.py#L1828'>TextParser</a>()</tt>	Converts lists of lists/tuples into dataframes with proper type inference and optional (e.
<tt style='background-color:#E8E8E8;'> io.PythonParser <a href=' /io/parsers.py#L1892'>__init__</a>(f)</tt>	Workhorse function for processing nested list into dataframe should be replaced by np.
<tt style='background-color:#E8E8E8;'> io.PythonParser <a href=' /io/parsers.py#L2379'>_handle_usecols</a>(columns,usecols_key)</tt>	Sets self _col_indices.
<tt style='background-color:#E8E8E8;'> io.PythonParser <a href=' /io/parsers.py#L2406'>_buffered_line</a>()</tt>	Return a line from buffer filling buffer if required.
<tt style='background-color:#E8E8E8;'> io.PythonParser <a href=' /io/parsers.py#L2415'>_check_for_bom</a>(first_row)</tt>	Checks whether the file begins with the bom character.
<tt style='background-color:#E8E8E8;'> io.PythonParser <a href=' /io/parsers.py#L2476'>_is_line_empty</a>(line)</tt>	Check if a line is empty or not.
<tt style='background-color:#E8E8E8;'> io.PythonParser <a href=' /io/parsers.py#L2543'>_alert_malformed</a>(msg,row_num)</tt>	Alert a user about a malformed row.
<tt style='background-color:#E8E8E8;'> io.PythonParser <a href=' /io/parsers.py#L2564'>_next_iter_line</a>(row_num)</tt>	Wrapper around iterating through self data csv source.
<tt style='background-color:#E8E8E8;'> io.PythonParser <a href=' /io/parsers.py#L2621'>_remove_empty_lines</a>(lines)</tt>	Iterate through the lines and remove any that are either empty or contain only one whitespace value.
<tt style='background-color:#E8E8E8;'> io.PythonParser <a href=' /io/parsers.py#L2683'>_get_index_name</a>(columns)</tt>	Try several cases to get lines 0) there are headers on row 0 and row 1 and their.
<tt style='background-color:#E8E8E8;'> io. <a href=' /io/parsers.py#L3116'>_stringify_na_values</a>(na_values)</tt>	Return a stringified and numeric for these values.
<tt style='background-color:#E8E8E8;'> io.FixedWidthReader <a href=' /io/parsers.py#L3205'>get_rows</a>(n,skiprows)</tt>	Read rows from self f skipping as specified.
<tt style='background-color:#E8E8E8;'> io.formats. <a href=' /io/formats/printing.py#L11'>adjoin</a>(space)</tt>	Glues together two sets of strings using the amount of space requested.
<tt style='background-color:#E8E8E8;'> io.formats. <a href=' /io/formats/printing.py#L46'>justify</a>(texts,max_len,mode)</tt>	Perform ljust center rjust against string or list-like.
<tt style='background-color:#E8E8E8;'> io.formats. <a href=' /io/formats/printing.py#L96'>_pprint_seq</a>(seq,_nest_lvl,max_seq_items)</tt>	Internal pprinter for iterables you should probably use pprint_thing().
<tt style='background-color:#E8E8E8;'> io.formats. <a href=' /io/formats/printing.py#L128'>_pprint_dict</a>(seq,_nest_lvl,max_seq_items)</tt>	Internal pprinter for iterables you should probably use pprint_thing().
<tt style='background-color:#E8E8E8;'> io.formats. <a href=' /io/formats/printing.py#L156'>pprint_thing</a>(thing,_nest_lvl,escape_chars,default_escapes)</tt>	This function is the sanctioned way of converting objects to a unicode representation.
<tt style='background-color:#E8E8E8;'> io.formats. <a href=' /io/formats/console.py#L14'>detect_console_encoding</a>()</tt>	Try to find the most capable encoding supported by the console.
<tt style='background-color:#E8E8E8;'> io.formats. <a href=' /io/formats/console.py#L46'>get_console_size</a>()</tt>	Return console size as tuple = width height.
<tt style='background-color:#E8E8E8;'> io.formats. <a href=' /io/formats/common.py#L7'>get_level_lengths</a>(levels,sentinel)</tt>	For each index in each level the function returns lengths of indexes.
<tt style='background-color:#E8E8E8;'> io.formats.CSSToExcelConverter <a href=' /io/formats/excel.py#L72'>__call__</a>(declarations_str)</tt>	Convert css declarations to excelwriter style parameters.
<tt style='background-color:#E8E8E8;'> io.formats.ExcelFormatter <a href=' /io/formats/excel.py#L600'>write</a>(writer,sheet_name,startrow,startcol)</tt>	Writer : string or excelwriter object file path or existing excelwriter.
<tt style='background-color:#E8E8E8;'> io.formats.CSSResolver <a href=' /io/formats/css.py#L21'>__call__</a>(declarations_str,inherited)</tt>	The given declarations to atomic properties parameters.
<tt style='background-color:#E8E8E8;'> io.formats.CSSResolver <a href=' /io/formats/css.py#L232'>parse</a>(declarations_str)</tt>	Generates prop value pairs from declarations.
<tt style='background-color:#E8E8E8;'> io.formats.DataFrameFormatter <a href=' /io/formats/format.py#L409'>_chk_truncate</a>()</tt>	Checks whether the frame should be truncated if so slices.
<tt style='background-color:#E8E8E8;'> io.formats.DataFrameFormatter <a href=' /io/formats/format.py#L486'>_to_str_columns</a>()</tt>	Render a dataframe to a list of columns as lists of strings.
<tt style='background-color:#E8E8E8;'> io.formats.DataFrameFormatter <a href=' /io/formats/format.py#L567'>to_string</a>()</tt>	Render a dataframe to a console-friendly tabular output.
<tt style='background-color:#E8E8E8;'> io.formats.DataFrameFormatter <a href=' /io/formats/format.py#L665'>to_latex</a>(column_format,longtable,encoding,multicolumn)</tt>	Render a dataframe to a latex tabular/longtable environment output.
<tt style='background-color:#E8E8E8;'> io.formats.DataFrameFormatter <a href=' /io/formats/format.py#L697'>to_html</a>(classes,notebook,border)</tt>	Render a dataframe to a html table.
<tt style='background-color:#E8E8E8;'> io.formats.LatexFormatter <a href=' /io/formats/format.py#L850'>write_result</a>(buf)</tt>	Render a dataframe to a latex tabular/longtable environment output.
<tt style='background-color:#E8E8E8;'> io.formats.LatexFormatter <a href=' /io/formats/format.py#L960'>_format_multicolumn</a>(row,ilevels)</tt>	Combine columns belonging to a group to a single multicolumn entry according to self.
<tt style='background-color:#E8E8E8;'> io.formats.LatexFormatter <a href=' /io/formats/format.py#L998'>_format_multirow</a>(row,ilevels,i,rows)</tt>	Check following rows whether row should be a multirow e.
<tt style='background-color:#E8E8E8;'> io.formats.LatexFormatter <a href=' /io/formats/format.py#L1024'>_print_cline</a>(buf,i,icol)</tt>	Print clines after multirow-blocks are finished.
<tt style='background-color:#E8E8E8;'> io.formats.FloatArrayFormatter <a href=' /io/formats/format.py#L1837'>_value_formatter</a>(float_format,threshold)</tt>	Returns a function to be applied on each value to format it.
<tt style='background-color:#E8E8E8;'> io.formats.FloatArrayFormatter <a href=' /io/formats/format.py#L1878'>get_result_as_array</a>()</tt>	Returns the float values converted into strings using.
<tt style='background-color:#E8E8E8;'> io.formats.Datetime64Formatter <a href=' /io/formats/format.py#L1972'>_format_strings</a>()</tt>	We by definition have do not have a tz.
<tt style='background-color:#E8E8E8;'> io.formats. <a href=' /io/formats/format.py#L2030'>format_percentiles</a>(percentiles)</tt>	Outputs rounded and formatted percentiles.
<tt style='background-color:#E8E8E8;'> io.formats. <a href=' /io/formats/format.py#L2141'>_get_format_datetime64_from_values</a>(values,date_format)</tt>	Given values and a date_format return a string format.
<tt style='background-color:#E8E8E8;'> io.formats.Datetime64TZFormatter <a href=' /io/formats/format.py#L2151'>_format_strings</a>()</tt>	We by definition have a tz.
<tt style='background-color:#E8E8E8;'> io.formats. <a href=' /io/formats/format.py#L2179'>_get_format_timedelta64</a>(values,nat_rep,box)</tt>	Return a formatter function for a range of timedeltas.
<tt style='background-color:#E8E8E8;'> io.formats. <a href=' /io/formats/format.py#L2246'>_trim_zeros</a>(str_floats,na_rep)</tt>	Trims zeros leaving just one before the decimal points if need be.
<tt style='background-color:#E8E8E8;'> io.formats.EngFormatter <a href=' /io/formats/format.py#L2324'>__call__</a>(num)</tt>	Formats a number in engineering notation appending a letter representing the power of 1000 of the original number.
<tt style='background-color:#E8E8E8;'> io.formats. <a href=' /io/formats/format.py#L2390'>set_eng_float_format</a>(accuracy,use_eng_prefix)</tt>	Alter default behavior on how float is formatted in dataframe.
<tt style='background-color:#E8E8E8;'> io.formats.Styler <a href=' /io/formats/style.py#L152'>_repr_html_</a>()</tt>	Hooks into jupyter notebook rich display system.
<tt style='background-color:#E8E8E8;'> io.formats.Styler <a href=' /io/formats/style.py#L180'>_translate</a>()</tt>	Convert the dataframe in self data and the attrs from _build_styles.
<tt style='background-color:#E8E8E8;'> io.formats.Styler <a href=' /io/formats/style.py#L324'>format</a>(formatter,subset)</tt>	Format the text display value of cells.
<tt style='background-color:#E8E8E8;'> io.formats.Styler <a href=' /io/formats/style.py#L389'>render</a>()</tt>	Render the built up styles to html.
<tt style='background-color:#E8E8E8;'> io.formats.Styler <a href=' /io/formats/style.py#L443'>_update_ctx</a>(attrs)</tt>	Update the state of the styler collects a mapping.
<tt style='background-color:#E8E8E8;'> io.formats.Styler <a href=' /io/formats/style.py#L472'>__copy__</a>()</tt>	Deep copy by default.
<tt style='background-color:#E8E8E8;'> io.formats.Styler <a href=' /io/formats/style.py#L481'>clear</a>()</tt>	"reset" the styler removing any previously applied styles.
<tt style='background-color:#E8E8E8;'> io.formats.Styler <a href=' /io/formats/style.py#L488'>_compute</a>()</tt>	Execute the style functions built up in self _todo.
<tt style='background-color:#E8E8E8;'> io.formats.Styler <a href=' /io/formats/style.py#L532'>apply</a>(func,axis,subset)</tt>	Apply a function column-wise row-wise or table-wase updating the html representation with the result.
<tt style='background-color:#E8E8E8;'> io.formats.Styler <a href=' /io/formats/style.py#L592'>applymap</a>(func,subset)</tt>	Apply a function elementwise updating the html representation with the result.
<tt style='background-color:#E8E8E8;'> io.formats.Styler <a href=' /io/formats/style.py#L618'>set_precision</a>(precision)</tt>	Set the precision used to render.
<tt style='background-color:#E8E8E8;'> io.formats.Styler <a href=' /io/formats/style.py#L635'>set_table_attributes</a>(attributes)</tt>	Set the table attributes these are the items.
<tt style='background-color:#E8E8E8;'> io.formats.Styler <a href=' /io/formats/style.py#L660'>export</a>()</tt>	Export the styles to applied to the current styler.
<tt style='background-color:#E8E8E8;'> io.formats.Styler <a href=' /io/formats/style.py#L677'>use</a>(styles)</tt>	Set the styles on the current styler possibly using styles from styler.
<tt style='background-color:#E8E8E8;'> io.formats.Styler <a href=' /io/formats/style.py#L700'>set_uuid</a>(uuid)</tt>	Set the uuid for a styler.
<tt style='background-color:#E8E8E8;'> io.formats.Styler <a href=' /io/formats/style.py#L717'>set_caption</a>(caption)</tt>	Se the caption on a styler.
<tt style='background-color:#E8E8E8;'> io.formats.Styler <a href=' /io/formats/style.py#L734'>set_table_styles</a>(table_styles)</tt>	Set the table styles on a styler these are placed in a.
<tt style='background-color:#E8E8E8;'> io.formats.Styler <a href=' /io/formats/style.py#L773'>highlight_null</a>(null_color)</tt>	Shade the background null_color for missing values.
<tt style='background-color:#E8E8E8;'> io.formats.Styler <a href=' /io/formats/style.py#L790'>background_gradient</a>(cmap,low,high,axis)</tt>	Color the background in a gradient according to the data in each column optionally row.
<tt style='background-color:#E8E8E8;'> io.formats.Styler <a href=' /io/formats/style.py#L827'>_background_gradient</a>(s,cmap,low,high)</tt>	Color background in a range according to the data.
<tt style='background-color:#E8E8E8;'> io.formats.Styler <a href=' /io/formats/style.py#L841'>set_properties</a>(subset)</tt>	Convience method for setting one or more non-data dependent properties or each cell.
<tt style='background-color:#E8E8E8;'> io.formats.Styler <a href=' /io/formats/style.py#L879'>bar</a>(subset,axis,color,width)</tt>	Color the background color proptional to the values in each column.
<tt style='background-color:#E8E8E8;'> io.formats.Styler <a href=' /io/formats/style.py#L906'>highlight_max</a>(subset,color,axis)</tt>	Highlight the maximum by shading the background.
<tt style='background-color:#E8E8E8;'> io.formats.Styler <a href=' /io/formats/style.py#L928'>highlight_min</a>(subset,color,axis)</tt>	Highlight the minimum by shading the background.
<tt style='background-color:#E8E8E8;'> io.formats.Styler <a href=' /io/formats/style.py#L957'>_highlight_extrema</a>(data,color,max_)</tt>	Highlight the min or max in a series or dataframe.
<tt style='background-color:#E8E8E8;'> io.formats.Styler <a href=' /io/formats/style.py#L975'>from_custom_template</a>(cls,searchpath,name)</tt>	Factory function for creating a subclass of styler with a custom template and jinja environment.
<tt style='background-color:#E8E8E8;'> io.formats. <a href=' /io/formats/style.py#L1005'>_is_visible</a>(idx_row,idx_col,lengths)</tt>	Index -> {(idx_row idx_col): bool}).
<tt style='background-color:#E8E8E8;'> io.formats. <a href=' /io/formats/style.py#L1012'>_get_level_lengths</a>(index)</tt>	Given an index find the level lenght for each element.
<tt style='background-color:#E8E8E8;'> io.msgpack. <a href=' /io/msgpack/__init__.py#L26'>pack</a>(o,stream)</tt>	Pack object o and write it to stream see :class packer for options.
<tt style='background-color:#E8E8E8;'> io.msgpack. <a href=' /io/msgpack/__init__.py#L36'>packb</a>(o)</tt>	Pack object o and return packed bytes see :class packer for options.
<tt style='background-color:#E8E8E8;'> io.sas. <a href=' /io/sas/sas_xport.py#L117'>_parse_date</a>(datestr)</tt>	Given a date in xport format return python date.
<tt style='background-color:#E8E8E8;'> io.sas. <a href=' /io/sas/sas_xport.py#L167'>_parse_float_vec</a>(vec)</tt>	Parse a vector of float values representing ibm 8 byte floats into native 8 byte floats.
<tt style='background-color:#E8E8E8;'> io.sas.XportReader <a href=' /io/sas/sas_xport.py#L365'>_record_count</a>()</tt>	Get number of records in file.
<tt style='background-color:#E8E8E8;'> io.sas.XportReader <a href=' /io/sas/sas_xport.py#L402'>get_chunk</a>(size)</tt>	Reads lines from xport file and returns as dataframe parameters.
<tt style='background-color:#E8E8E8;'> io.sas. <a href=' /io/sas/sasreader.py#L7'>read_sas</a>(filepath_or_buffer,format,index,encoding)</tt>	Read sas files stored as either xport or sas7bdat format files.
<tt style='background-color:#E8E8E8;'> io.json.FrameWriter <a href=' /io/json/json.py#L106'>_format_axes</a>()</tt>	Try to axes if they are datelike.
<tt style='background-color:#E8E8E8;'> io.json.JSONTableWriter <a href=' /io/json/json.py#L121'>__init__</a>(obj,orient,date_format,double_precision)</tt>	Adds a schema attribut with the table schema resets the index (can't do in caller because the schema inference needs.
<tt style='background-color:#E8E8E8;'> io.json. <a href=' /io/json/json.py#L172'>read_json</a>(path_or_buf,orient,typ,dtype)</tt>	Convert a json string to pandas object parameters.
<tt style='background-color:#E8E8E8;'> io.json.Parser <a href=' /io/json/json.py#L406'>check_keys_split</a>(decoded)</tt>	Checks that dict has only the appropriate keys for orient='split'.
<tt style='background-color:#E8E8E8;'> io.json.Parser <a href=' /io/json/json.py#L431'>_convert_axes</a>()</tt>	Try to convert axes.
<tt style='background-color:#E8E8E8;'> io.json.Parser <a href=' /io/json/json.py#L443'>_try_convert_data</a>(name,data,use_dtypes,convert_dates)</tt>	Try to parse a ndarray like into a column by inferring dtype.
<tt style='background-color:#E8E8E8;'> io.json.Parser <a href=' /io/json/json.py#L517'>_try_convert_to_date</a>(data)</tt>	Try to parse a ndarray like into a date column.
<tt style='background-color:#E8E8E8;'> io.json.FrameParser <a href=' /io/json/json.py#L654'>_process_converter</a>(f,filt)</tt>	Take a conversion function and possibly recreate the frame.
<tt style='background-color:#E8E8E8;'> io.json. <a href=' /io/json/table_schema.py#L13'>as_json_table_type</a>(x)</tt>	Convert a numpy / pandas type to its corresponding json_table.
<tt style='background-color:#E8E8E8;'> io.json. <a href=' /io/json/table_schema.py#L62'>set_default_names</a>(data)</tt>	Sets index names to 'index' for regular or 'level_x' for multi.
<tt style='background-color:#E8E8E8;'> io.json. <a href=' /io/json/table_schema.py#L101'>build_table_schema</a>(data,index,primary_key,version)</tt>	Create a table schema from data.
<tt style='background-color:#E8E8E8;'> io.json. <a href=' /io/json/normalize.py#L12'>_convert_to_line_delimits</a>(s)</tt>	Helper function that converts json lists to line delimited json.
<tt style='background-color:#E8E8E8;'> io.json. <a href=' /io/json/normalize.py#L24'>nested_to_record</a>(ds,prefix,sep,level)</tt>	A simplified json_normalize converts a nested dict into a flat dict ("record"), unlike json_normalize.
<tt style='background-color:#E8E8E8;'> io.json. <a href=' /io/json/normalize.py#L94'>json_normalize</a>(data,record_path,meta,meta_prefix)</tt>	"normalize" semi-structured json data into a flat table parameters.
<tt style='background-color:#E8E8E8;'> compat. <a href=' /compat/pickle_compat.py#L171'>load</a>(fh,encoding,compat,is_verbose)</tt>	Load a pickle with a provided encoding.
<tt style='background-color:#E8E8E8;'> compat. <a href=' /compat/openpyxl_compat.py#L13'>is_compat</a>(major_ver)</tt>	Detect whether the installed version of openpyxl is supported parameters.
<tt style='background-color:#E8E8E8;'> compat. <a href=' /compat/chainmap_impl.py#L9'>recursive_repr</a>(fillvalue)</tt>	Decorator to make a repr function return fillvalue for a recursive call.
<tt style='background-color:#E8E8E8;'> compat.ChainMap <a href=' /compat/chainmap_impl.py#L48'>__init__</a>()</tt>	Initialize a chainmap by setting *maps* to the given mappings.
<tt style='background-color:#E8E8E8;'> compat.ChainMap <a href=' /compat/chainmap_impl.py#L89'>fromkeys</a>(cls,iterable)</tt>	Create a chainmap with a single dict created from the iterable.
<tt style='background-color:#E8E8E8;'> compat.ChainMap <a href=' /compat/chainmap_impl.py#L94'>copy</a>()</tt>	New chainmap or subclass with a new copy of maps[0] and refs to.
<tt style='background-color:#E8E8E8;'> compat.ChainMap <a href=' /compat/chainmap_impl.py#L103'>new_child</a>(m)</tt>	New chainmap with a new map followed by all previous maps if no.
<tt style='background-color:#E8E8E8;'> compat.ChainMap <a href=' /compat/chainmap_impl.py#L112'>parents</a>()</tt>	New chainmap from maps[1 ].
<tt style='background-color:#E8E8E8;'> compat.ChainMap <a href=' /compat/chainmap_impl.py#L127'>popitem</a>()</tt>	Remove and return an item pair from maps[0] raise keyerror is maps[0].
<tt style='background-color:#E8E8E8;'> compat.ChainMap <a href=' /compat/chainmap_impl.py#L137'>pop</a>(key)</tt>	Remove *key* from maps[0] and return its value raise keyerror if.
<tt style='background-color:#E8E8E8;'> compat.ChainMap <a href=' /compat/chainmap_impl.py#L148'>clear</a>()</tt>	Clear maps[0], leaving maps[1 ] intact.
<tt style='background-color:#E8E8E8;'> compat. <a href=' /compat/__init__.py#L189'>bind_method</a>(cls,name,func)</tt>	Bind a method to class python 2 and python 3 compatible.
<tt style='background-color:#E8E8E8;'> compat. <a href=' /compat/__init__.py#L327'>add_metaclass</a>(metaclass)</tt>	Class decorator for creating a class with a metaclass.
<tt style='background-color:#E8E8E8;'> compat. <a href=' /compat/__init__.py#L401'>is_platform_little_endian</a>()</tt>	Am i little endian.
<tt style='background-color:#E8E8E8;'> compat.numpy. <a href=' /compat/numpy/__init__.py#L39'>np_datetime64_compat</a>(s)</tt>	Provide compat for construction of strings to numpy datetime64's with tz-changes in 1.
<tt style='background-color:#E8E8E8;'> compat.numpy. <a href=' /compat/numpy/__init__.py#L51'>np_array_datetime64_compat</a>(arr)</tt>	Provide compat for construction of an array of strings to a np.
<tt style='background-color:#E8E8E8;'> compat.numpy. <a href=' /compat/numpy/function.py#L75'>validate_argmin_with_skipna</a>(skipna,args,kwargs)</tt>	If 'series argmin' is called via the 'numpy' library.
<tt style='background-color:#E8E8E8;'> compat.numpy. <a href=' /compat/numpy/function.py#L89'>validate_argmax_with_skipna</a>(skipna,args,kwargs)</tt>	If 'series argmax' is called via the 'numpy' library.
<tt style='background-color:#E8E8E8;'> compat.numpy. <a href=' /compat/numpy/function.py#L111'>validate_argsort_with_ascending</a>(ascending,args,kwargs)</tt>	If 'categorical argsort' is called via the 'numpy' library the.
<tt style='background-color:#E8E8E8;'> compat.numpy. <a href=' /compat/numpy/function.py#L133'>validate_clip_with_axis</a>(axis,args,kwargs)</tt>	If 'ndframe clip' is called via the numpy library the third.
<tt style='background-color:#E8E8E8;'> compat.numpy. <a href=' /compat/numpy/function.py#L164'>validate_cum_func_with_skipna</a>(skipna,args,kwargs,name)</tt>	If this function is called via the 'numpy' library the third.
<tt style='background-color:#E8E8E8;'> compat.numpy. <a href=' /compat/numpy/function.py#L230'>validate_take_with_convert</a>(convert,args,kwargs)</tt>	If this function is called via the 'numpy' library the third.
<tt style='background-color:#E8E8E8;'> compat.numpy. <a href=' /compat/numpy/function.py#L310'>validate_groupby_func</a>(name,args,kwargs,allowed)</tt>	'args' and 'kwargs' should be empty except for allowed.
<tt style='background-color:#E8E8E8;'> compat.numpy. <a href=' /compat/numpy/function.py#L333'>validate_resampler_func</a>(method,args,kwargs)</tt>	'args' and 'kwargs' should be empty because all of.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/moments.py#L180'>ensure_compat</a>(dispatch,name,arg,func_kw)</tt>	Wrapper function to dispatch to the appropriate window functions.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/moments.py#L247'>rolling_count</a>(arg,window)</tt>	Rolling count of number of non-nan observations inside provided window.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/moments.py#L544'>rolling_apply</a>(arg,window,func,min_periods)</tt>	Generic moving function application.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/moments.py#L598'>rolling_window</a>(arg,window,win_type,min_periods)</tt>	Applies a moving window of type window_type and size window on the data.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/moments.py#L705'>expanding_count</a>(arg,freq)</tt>	Expanding count of number of non-nan observations.
<tt style='background-color:#E8E8E8;'> stats. <a href=' /stats/moments.py#L813'>expanding_apply</a>(arg,func,min_periods,freq)</tt>	Generic expanding function application.
<tt style='background-color:#E8E8E8;'> plotting._Options <a href=' /plotting/_style.py#L217'>reset</a>()</tt>	Reset the option store to its initial state.
<tt style='background-color:#E8E8E8;'> plotting._Options <a href=' /plotting/_style.py#L231'>use</a>(key,value)</tt>	Temporarily set a parameter value using the with statement.
<tt style='background-color:#E8E8E8;'> plotting. <a href=' /plotting/_tools.py#L28'>table</a>(ax,data,rowLabels,colLabels)</tt>	Helper function to convert dataframe and series to matplotlib table.
<tt style='background-color:#E8E8E8;'> plotting. <a href=' /plotting/_tools.py#L116'>_subplots</a>(naxes,sharex,sharey,squeeze)</tt>	Create a figure with a set of subplots already made.
<tt style='background-color:#E8E8E8;'> plotting. <a href=' /plotting/_misc.py#L17'>scatter_matrix</a>(frame,alpha,figsize,ax)</tt>	Draw a matrix of scatter plots.
<tt style='background-color:#E8E8E8;'> plotting. <a href=' /plotting/_misc.py#L149'>radviz</a>(frame,class_column,ax,color)</tt>	Radviz - a multivariate data visualization algorithm parameters.
<tt style='background-color:#E8E8E8;'> plotting. <a href=' /plotting/_misc.py#L234'>andrews_curves</a>(frame,class_column,ax,samples)</tt>	Generates a matplotlib plot of andrews curves for visualising clusters of multivariate data.
<tt style='background-color:#E8E8E8;'> plotting. <a href=' /plotting/_misc.py#L386'>parallel_coordinates</a>(frame,class_column,cols,ax)</tt>	Parallel coordinates plotting.
<tt style='background-color:#E8E8E8;'> plotting. <a href=' /plotting/_misc.py#L503'>lag_plot</a>(series,lag,ax)</tt>	Lag plot for time series.
<tt style='background-color:#E8E8E8;'> plotting. <a href=' /plotting/_misc.py#L533'>autocorrelation_plot</a>(series,ax)</tt>	Autocorrelation plot for time series.
<tt style='background-color:#E8E8E8;'> plotting. <a href=' /plotting/_timeseries.py#L23'>tsplot</a>(series,plotf,ax)</tt>	Plots a series on the given matplotlib axes or the current axes parameters.
<tt style='background-color:#E8E8E8;'> plotting. <a href=' /plotting/_timeseries.py#L147'>_decorate_axes</a>(ax,freq,kwargs)</tt>	Initialize axes for time-series plotting.
<tt style='background-color:#E8E8E8;'> plotting. <a href=' /plotting/_timeseries.py#L163'>_get_ax_freq</a>(ax)</tt>	Get the freq attribute of the ax object if set.
<tt style='background-color:#E8E8E8;'> plotting. <a href=' /plotting/_timeseries.py#L279'>format_timedelta_ticks</a>(x,pos,n_decimals)</tt>	Convert seconds to 'd days hh mm ss f'.
<tt style='background-color:#E8E8E8;'> plotting. <a href=' /plotting/_timeseries.py#L296'>format_dateaxis</a>(subplot,freq,index)</tt>	Pretty-formats the date axis x-axis.
<tt style='background-color:#E8E8E8;'> plotting.MPLPlot <a href=' /plotting/_core.py#L71'>_kind</a>()</tt>	Specify kind str must be overridden in child class.
<tt style='background-color:#E8E8E8;'> plotting.MPLPlot <a href=' /plotting/_core.py#L250'>_has_plotted_object</a>(ax)</tt>	Check whether ax has data.
<tt style='background-color:#E8E8E8;'> plotting.MPLPlot <a href=' /plotting/_core.py#L306'>result</a>()</tt>	Return result axes.
<tt style='background-color:#E8E8E8;'> plotting.MPLPlot <a href=' /plotting/_core.py#L362'>_post_plot_logic_common</a>(ax,data)</tt>	Common post process for each axes.
<tt style='background-color:#E8E8E8;'> plotting.MPLPlot <a href=' /plotting/_core.py#L384'>_post_plot_logic</a>(ax,data)</tt>	Post process for each axes overridden in child classes.
<tt style='background-color:#E8E8E8;'> plotting.MPLPlot <a href=' /plotting/_core.py#L388'>_adorn_subplots</a>()</tt>	Common post process unrelated to data.
<tt style='background-color:#E8E8E8;'> plotting.MPLPlot <a href=' /plotting/_core.py#L589'>_get_ax_layer</a>(cls,ax,primary)</tt>	Get left primary or right secondary axes.
<tt style='background-color:#E8E8E8;'> plotting.MPLPlot <a href=' /plotting/_core.py#L617'>_apply_style_colors</a>(colors,kwds,col_num,label)</tt>	Manage style and color based on column number and its label.
<tt style='background-color:#E8E8E8;'> plotting.MPLPlot <a href=' /plotting/_core.py#L648'>_parse_errorbars</a>(label,err)</tt>	Look for error keyword arguments and return the actual errorbar data or return the error dataframe/dict.
<tt style='background-color:#E8E8E8;'> plotting.HistPlot <a href=' /plotting/_core.py#L1316'>_make_plot_keywords</a>(kwds,y)</tt>	Merge boxplot/kdeplot properties to passed kwds.
<tt style='background-color:#E8E8E8;'> plotting. <a href=' /plotting/_core.py#L2019'>scatter_plot</a>(data,x,y,by)</tt>	Make a scatter plot from two dataframe columns parameters.
<tt style='background-color:#E8E8E8;'> plotting. <a href=' /plotting/_core.py#L2066'>hist_frame</a>(data,column,by,grid)</tt>	Draw histogram of the dataframe's series using matplotlib / pylab.
<tt style='background-color:#E8E8E8;'> plotting. <a href=' /plotting/_core.py#L2141'>hist_series</a>(by,ax,grid,xlabelsize)</tt>	Draw histogram of the input series using matplotlib.
<tt style='background-color:#E8E8E8;'> plotting. <a href=' /plotting/_core.py#L2215'>grouped_hist</a>(data,column,by,ax)</tt>	Grouped histogram parameters.
<tt style='background-color:#E8E8E8;'> plotting. <a href=' /plotting/_core.py#L2258'>boxplot_frame_groupby</a>(grouped,subplots,column,fontsize)</tt>	Make box plots from dataframegroupby data.
<tt style='background-color:#E8E8E8;'> plotting.SeriesPlotMethods <a href=' /plotting/_core.py#L2466'>bar</a>()</tt>	Vertical bar plot.
<tt style='background-color:#E8E8E8;'> plotting.SeriesPlotMethods <a href=' /plotting/_core.py#L2483'>barh</a>()</tt>	Horizontal bar plot.
<tt style='background-color:#E8E8E8;'> plotting.SeriesPlotMethods <a href=' /plotting/_core.py#L2536'>kde</a>()</tt>	Kernel density estimate plot.
<tt style='background-color:#E8E8E8;'> plotting.FramePlotMethods <a href=' /plotting/_core.py#L2642'>bar</a>(x,y)</tt>	Vertical bar plot.
<tt style='background-color:#E8E8E8;'> plotting.FramePlotMethods <a href=' /plotting/_core.py#L2661'>barh</a>(x,y)</tt>	Horizontal bar plot.
<tt style='background-color:#E8E8E8;'> plotting.FramePlotMethods <a href=' /plotting/_core.py#L2720'>kde</a>()</tt>	Kernel density estimate plot.
<tt style='background-color:#E8E8E8;'> plotting. <a href=' /plotting/_converter.py#L172'>_dt_to_float_ordinal</a>(dt)</tt>	Convert :mod datetime to the gregorian date as utc float days preserving hours minutes seconds and microseconds.
<tt style='background-color:#E8E8E8;'> plotting.DatetimeConverter <a href=' /plotting/_converter.py#L237'>axisinfo</a>(unit,axis)</tt>	Return the :class ~matplotlib units axisinfo for *unit*.
<tt style='background-color:#E8E8E8;'> plotting.PandasAutoDateLocator <a href=' /plotting/_converter.py#L274'>get_locator</a>(dmin,dmax)</tt>	Pick the best locator based on a distance.
<tt style='background-color:#E8E8E8;'> plotting.MilliSecondLocator <a href=' /plotting/_converter.py#L378'>autoscale</a>()</tt>	Set the view limits to include the data range.
<tt style='background-color:#E8E8E8;'> plotting. <a href=' /plotting/_converter.py#L437'>_get_default_annual_spacing</a>(nyears)</tt>	Returns a default spacing between consecutive ticks for annual data.
<tt style='background-color:#E8E8E8;'> plotting. <a href=' /plotting/_converter.py#L459'>period_break</a>(dates,period)</tt>	Returns the indices where the given period changes.
<tt style='background-color:#E8E8E8;'> plotting. <a href=' /plotting/_converter.py#L475'>has_level_label</a>(label_flags,vmin)</tt>	Returns true if the label_flags indicate there is at least one label for this level.
<tt style='background-color:#E8E8E8;'> plotting.TimeSeries_DateLocator <a href=' /plotting/_converter.py#L902'>_get_default_locs</a>(vmin,vmax)</tt>	Returns the default locations of ticks.
<tt style='background-color:#E8E8E8;'> plotting.TimeSeries_DateLocator <a href=' /plotting/_converter.py#L914'>__call__</a>()</tt>	Return the locations of the ticks.
<tt style='background-color:#E8E8E8;'> plotting.TimeSeries_DateLocator <a href=' /plotting/_converter.py#L933'>autoscale</a>()</tt>	Sets the view limits to the nearest multiples of base that contain the data.
<tt style='background-color:#E8E8E8;'> plotting.TimeSeries_DateFormatter <a href=' /plotting/_converter.py#L982'>_set_default_format</a>(vmin,vmax)</tt>	Returns the default ticks spacing.
<tt style='background-color:#E8E8E8;'> plotting.TimeSeries_DateFormatter <a href=' /plotting/_converter.py#L997'>set_locs</a>(locs)</tt>	Sets the locations of the ticks.
<tt style='background-color:#E8E8E8;'> plotting.TimeSeries_TimedeltaFormatter <a href=' /plotting/_converter.py#L1024'>format_timedelta_ticks</a>(x,pos,n_decimals)</tt>	Convert seconds to 'd days hh mm ss f'.
